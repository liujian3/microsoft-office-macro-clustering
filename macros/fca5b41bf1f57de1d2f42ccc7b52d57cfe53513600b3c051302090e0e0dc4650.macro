Attribute VB_Name = "CalcA_TK"
'=======================================================
' Taikou Ver5 : |fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
'
' 2009.2 LSQ
'=======================================================
Option Private Module
Option Explicit

Type VBATGD
    DataInRge As String
    OutRge As String
    formula As Long
    ExpRge As String
End Type

Type VBADRS
    DataInRge As String
    OutRge As String
    DataTitle As Long
    formula As Long
    RestErr As Long
    ExpFreq As Long
    SimpleRE As Long
    AdjustRE As Long
    Judgement As Long
    OutTable As Long                        '1: merge table,   2: separation table
    RealCount As Long
    PntCross As Long
    PntDown As Long
    PntAll As Long
End Type

Type VBAMAKU
    DataInRge As String
    OutRge As String
    DataTitle As Long
    Except As Long
End Type

Type VBAWALONN
    DataInRge As String
    OutRge As String
    DataTitle As Long
    Except As Long
End Type

Private Const m_XmlFile As String = "\TAI_NPR.XML"
Private Const m_XslFile As String = "\TAI_NPR.xsl"

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function NPR_walonn_VBA Lib "K_TK_TK1_64.dll" (vbapara As VBAWALONN) As Integer
    Private Declare PtrSafe Function NPR_TekiGoDo_VBA Lib "KKS_SubG_64.dll" (vbapara As VBATGD) As Integer
    Private Declare PtrSafe Function NPR_DokuRitu_VBA Lib "KKS_SubG_64.dll" (vbapara As VBADRS) As Integer
    Private Declare PtrSafe Function NPR_makunema_VBA Lib "KKS_SubG_64.dll" (vbapara As VBAMAKU) As Integer
    '
    Private Declare PtrSafe Function DllTk1_Main Lib "K_TK_TK1_64.dll" (kind As Long) As Integer
    Private Declare PtrSafe Function DllTk2_Main Lib "KKS_SubG_64.dll" (kind As Long) As Integer
    #Else
    Private Declare PtrSafe Function NPR_walonn_VBA Lib "K_TK_TK1.dll" (vbapara As VBAWALONN) As Integer
    Private Declare PtrSafe Function NPR_TekiGoDo_VBA Lib "KKS_SubG.dll" (vbapara As VBATGD) As Integer
    Private Declare PtrSafe Function NPR_DokuRitu_VBA Lib "KKS_SubG.dll" (vbapara As VBADRS) As Integer
    Private Declare PtrSafe Function NPR_makunema_VBA Lib "KKS_SubG.dll" (vbapara As VBAMAKU) As Integer
    '
    Private Declare PtrSafe Function DllTk1_Main Lib "K_TK_TK1.dll" (kind As Long) As Integer
    Private Declare PtrSafe Function DllTk2_Main Lib "KKS_SubG.dll" (kind As Long) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function NPR_walonn_VBA Lib "K_TK_TK1_64.dll" (vbapara As VBAWALONN) As Integer
    Private Declare Function NPR_TekiGoDo_VBA Lib "KKS_SubG_64.dll" (vbapara As VBATGD) As Integer
    Private Declare Function NPR_DokuRitu_VBA Lib "KKS_SubG_64.dll" (vbapara As VBADRS) As Integer
    Private Declare Function NPR_makunema_VBA Lib "KKS_SubG_64.dll" (vbapara As VBAMAKU) As Integer
    '
    Private Declare Function DllTk1_Main Lib "K_TK_TK1_64.dll" (kind As Long) As Integer
    Private Declare Function DllTk2_Main Lib "KKS_SubG_64.dll" (kind As Long) As Integer
    #Else
    Private Declare Function NPR_walonn_VBA Lib "K_TK_TK1.dll" (vbapara As VBAWALONN) As Integer
    Private Declare Function NPR_TekiGoDo_VBA Lib "KKS_SubG.dll" (vbapara As VBATGD) As Integer
    Private Declare Function NPR_DokuRitu_VBA Lib "KKS_SubG.dll" (vbapara As VBADRS) As Integer
    Private Declare Function NPR_makunema_VBA Lib "KKS_SubG.dll" (vbapara As VBAMAKU) As Integer
    '
    Private Declare Function DllTk1_Main Lib "K_TK_TK1.dll" (kind As Long) As Integer
    Private Declare Function DllTk2_Main Lib "KKS_SubG.dll" (kind As Long) As Integer
    #End If
#End If
Private m_AppPath As String

#If 0 Then
'|fffd|K|fffd||fffd||fffd|x|fffd||30c||fffd||fffd||fffd|
Sub T5KSKA_TGD()
    Dim rtn As Long
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(10)
End Sub

'|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|
Sub nu_T5KSKA_IND()
    Dim rtn As Long
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(11)
End Sub

'|fffd|}|fffd|N|fffd|l|fffd|}|fffd|[|fffd||fffd||fffd||fffd|
Private Function handleMakData(vbapara As VBAMAKU, ByVal dataIn1 As String, ByVal dataIn2 As String) As Worksheet
    Dim tmpsht As Worksheet
    Dim rgeIn1 As Range, rgeIn2 As Range
    On Error Resume Next
    Set rgeIn1 = Range(dataIn1)
    Set rgeIn2 = Range(dataIn2)
    On Error GoTo 0
    If rgeIn1 Is Nothing Or rgeIn2 Is Nothing Then
        Set handleMakData = Nothing
        Exit Function
    End If
    Set tmpsht = rgeIn1.Worksheet.Parent.Sheets.Add
    tmpsht.Range("A1").Resize(rgeIn1.Rows.Count, rgeIn1.Columns.Count).Value = rgeIn1.Value
    tmpsht.Range("B1").Resize(rgeIn2.Rows.Count, rgeIn2.Columns.Count).Value = rgeIn2.Value
    Set rgeIn1 = tmpsht.Range("A1").Resize(IIf(rgeIn1.Rows.Count > rgeIn2.Rows.Count, rgeIn1.Rows.Count, rgeIn2.Rows.Count), 2)
    vbapara.DataInRge = tmpsht.name & "!" & toXlRCstr(rgeIn1.Address)
    Set handleMakData = tmpsht
End Function

Sub T5KSKA_MAK()
    Dim rtn As Long
    Dim rgeIn1 As String, rgeIn2 As String
    Dim rgeout As String
    Dim vbapara As VBAMAKU
    Dim actSht As Worksheet, tmpsht As Worksheet
    Dim dlg As DialogSheet
    'Call changeToSSDir
    'ActiveWorkbook.ActiveSheet.Select
    'rtn = DllTk2_Main(22)
    Set actSht = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMaku")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        rgeIn1 = Trim(dlg.EditBoxes("edtRgeIn1").text)
        rgeIn2 = Trim(dlg.EditBoxes("edtRgeIn2").text)
        rgeout = Trim(dlg.EditBoxes("edtRgeOut").text)
        vbapara.DataTitle = 1 'With Title
        'old : 10.7.27
        'VbaPara.DataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 2)
        vbapara.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Set tmpsht = handleMakData(vbapara, rgeIn1, rgeIn2)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        vbapara.OutRge = toXlRCstr(rgeout)
        Call changeToSSDir
        actSht.Select
        rtn = NPR_makunema_VBA(vbapara)
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

'|fffd|N|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd|b|fffd|N|fffd||fffd||fffd|W|fffd||fffd|
Sub T5KSKB_Alpha()
    Dim rtn As Long
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk1_Main(6)
End Sub

'|fffd|K|fffd||fffd||fffd|x|fffd||30c||fffd||fffd||fffd|
Sub T5KSKA_TGD_TKO()
    Dim rtn As Long
    Dim vbapara As VBATGD
    vbapara.DataInRge = toXlRCstr("$A$1:$B$8")
    vbapara.OutRge = toXlRCstr("$A$12")
    vbapara.formula = 1
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = NPR_TekiGoDo_VBA(vbapara)
End Sub

'|fffd|}|fffd|N|fffd|l|fffd|}|fffd|[|fffd||fffd||fffd||fffd|
Sub T5KSKA_MAK_TKO()
    Dim rtn As Long
    Dim vbapara As VBAMAKU
    vbapara.DataInRge = toXlRCstr("$C$2:$D$22")
    vbapara.OutRge = toXlRCstr("$G$38")
    vbapara.DataTitle = 1
    vbapara.Except = 1
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = NPR_makunema_VBA(vbapara)
End Sub

'|fffd|N|fffd||fffd||fffd|[|fffd||fffd||fffd|o|fffd|b|fffd|N|fffd||fffd||fffd|W|fffd||fffd|
Sub T5KSKB_Alpha_TKO()
    Dim rtn As Long
    Dim vbapara As VBAWALONN
    vbapara.DataInRge = toXlRCstr("$B$1:$C$21")
    vbapara.OutRge = toXlRCstr("$A$25")
    vbapara.DataTitle = 1
    vbapara.Except = 1
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = NPR_walonn_VBA(vbapara)
End Sub
#End If

Private Sub DRS_RESTERR()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgDrs")
    bOn = (dlg.OptionButtons("optRestErrNo").Value = xlOff)
    dlg.CheckBoxes("chkExpFreq").Enabled = bOn
    dlg.CheckBoxes("chkSimpleRE").Enabled = bOn
    dlg.CheckBoxes("chkAdjustRE").Enabled = bOn
    dlg.CheckBoxes("chkJudgement").Enabled = bOn
    'dlg.OptionButtons("optMergeTbl").Enabled = bOn
    'dlg.OptionButtons("optSeparatTbl").Enabled = bOn
    dlg.CheckBoxes("chkRealCount").Enabled = bOn
    dlg.CheckBoxes("chkPntCross").Enabled = bOn
    dlg.CheckBoxes("chkPntDown").Enabled = bOn
    dlg.CheckBoxes("chkPntAll").Enabled = bOn
End Sub

Private Sub OutputDRS(ByVal formula As Long, ByVal OutRge As Range, ByVal objRge As Range, ByVal varRge As Range, ByVal namerge As Range)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim objVar As Variant, varVar As Variant, nameVar As Variant
    Dim outDrs As New ClsDrs
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    xslFName = m_AppPath & m_XslFile 'ThisWorkbook.Path & m_XslFile
    If Not bFileExist(xslFName) Then Exit Sub
    objVar = objRge.Value
    varVar = varRge.Value
    nameVar = namerge.Value
    Call outDrs.Initialize(formula, fname, xslFName)
    Call outDrs.SetTitleSource(objVar, varVar, nameVar)
    Call outDrs.OutputDRS(OutRge)
    Set outDrs = Nothing
End Sub

Private Function handleDkktData(vbapara As VBADRS) As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim rgeVar As Range, rge As Range, tmpRge As Range
    Dim tmpsht As Worksheet
    Dim dkktvar As Variant
    Dim itemnum As Long, smpnum As Long
    Dim msgStr As String
    Dim v As Variant
    
    On Error Resume Next
    Set rgeVar = Range(vbapara.DataInRge)
    If rgeVar Is Nothing Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        Set tmpsht = Nothing
        Exit Function
    End If
    Set rge = Range(vbapara.OutRge)
    If rge Is Nothing Then
        MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
        Set tmpsht = Nothing
        Exit Function
    End If
    
    dkktvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    itemnum = rgeVar.Columns.Count
    smpnum = rgeVar.Rows.Count
    If vbapara.DataTitle = 1 Then
        Set rge = tmpsht.Range("$A$1")
        itemnum = itemnum - 1
        smpnum = smpnum - 1
    Else
        Set rge = tmpsht.Range("$B$2")
        itemnum = rgeVar.Columns.Count
        smpnum = rgeVar.Rows.Count
        For i = 1 To smpnum
            tmpsht.Cells(i + 1, 1) = i
        Next i
        For i = 1 To itemnum
            tmpsht.Cells(1, i + 1) = i
        Next i
    End If
    
    Set tmpRge = PasteRange(rgeVar, rge, xlPasteValues)
    
    Set rge = tmpsht.Range("$B$2")
    
    Set rge = Range(rge(1, 1), rge(smpnum, itemnum))
    
    For i = smpnum To 1 Step -1
        dkktvar = rge.Rows(i)
        If Application.WorksheetFunction.Count(dkktvar) <> itemnum Then
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
            Set handleDkktData = Nothing
            Exit Function
        End If
    Next i
    
    If smpnum < 2 Then
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|", vbCritical Or vbOKOnly
        Set handleDkktData = Nothing
        Exit Function
    End If
       
    Set rge = tmpsht.Range("$A$1")
    
    vbapara.DataInRge = toXlRCstr(Range(rge(1, 1), rge(smpnum + 1, itemnum + 1)).Address)
    vbapara.DataInRge = tmpsht.name & "!" & vbapara.DataInRge
    vbapara.DataTitle = 1
    
    Set handleDkktData = tmpsht
    On Error GoTo 0
End Function

'|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|
Sub KKS_DkKt_1P01()
    Dim rtn As Long
    Dim vbapara As VBADRS
    Dim dlg As DialogSheet
    Dim actSht As Worksheet, tmpsht As Worksheet
    m_AppPath = ThisWorkbook.Path
    Set actSht = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgDrs")
    dlg.OptionButtons("optMergeTbl").OnAction = "DRS_RESTERR"
    dlg.OptionButtons("optSeparatTbl").OnAction = "DRS_RESTERR"
    dlg.OptionButtons("optRestErrNo").OnAction = "DRS_RESTERR"
    DRS_RESTERR
redisp:
    If Not bXMLAvailable Then Exit Sub
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        vbapara.DataInRge = Trim(dlg.EditBoxes("edtRgeIn").text)
        vbapara.OutRge = Trim(dlg.EditBoxes("edtRgeOut").text)
        vbapara.DataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 0)
        vbapara.formula = 1 'IIf(dlg.OptionButtons("optFormula1").Value = xlOn, 1, 2)
        vbapara.RestErr = IIf(dlg.OptionButtons("optRestErrno").Value = xlOff, 1, 0)
        vbapara.ExpFreq = IIf(dlg.CheckBoxes("chkExpFreq").Value = xlOn, 1, 0)
        vbapara.SimpleRE = IIf(dlg.CheckBoxes("chkSimpleRE").Value = xlOn, 1, 0)
        vbapara.AdjustRE = IIf(dlg.CheckBoxes("chkAdjustRE").Value = xlOn, 1, 0)
        vbapara.Judgement = IIf(dlg.CheckBoxes("chkJudgement").Value = xlOn, 1, 0)
        vbapara.OutTable = IIf(dlg.OptionButtons("optMergeTbl").Value = xlOn, 1, 2)
        vbapara.RealCount = IIf(dlg.CheckBoxes("chkRealCount").Value = xlOn, 1, 0)
        vbapara.PntCross = IIf(dlg.CheckBoxes("chkPntCross").Value = xlOn, 1, 0)
        vbapara.PntDown = IIf(dlg.CheckBoxes("chkPntDown").Value = xlOn, 1, 0)
        vbapara.PntAll = IIf(dlg.CheckBoxes("chkPntAll").Value = xlOn, 1, 0)
        
        Set tmpsht = handleDkktData(vbapara)
        If tmpsht Is Nothing Then GoTo redisp
        
        vbapara.OutRge = toXlRCstr(vbapara.OutRge)
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = NPR_DokuRitu_VBA(vbapara)
        If rtn = 0 Then
            actSht.Activate
            Call OutputDRS(vbapara.formula, Range(toXlA1str(vbapara.OutRge)), Range(toXlA1str(vbapara.DataInRge)), Range(toXlA1str(vbapara.DataInRge)), Range(toXlA1str(vbapara.DataInRge)))
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

'=== EOF ===
Attribute VB_Name = "Classify"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private m_Name As String
Private m_Key As String
Private m_Cnt As Integer
Private m_Values() As Variant

Public Property Get key() As Variant
    key = m_Key
End Property

Public Property Let key(ByVal vNewValue As Variant)
    m_Key = vNewValue
End Property

Public Property Get name() As Variant
    name = m_Name
End Property

Public Property Let name(ByVal vNewValue As Variant)
    m_Name = vNewValue
End Property

Public Property Get cnt() As Variant
    cnt = m_Cnt
End Property

Public Sub AddValue(ByVal vNewValue As Variant)
    m_Cnt = m_Cnt + 1
    ReDim Preserve m_Values(1 To m_Cnt)
    m_Values(m_Cnt) = vNewValue
End Sub

Public Property Get values() As Variant
    Dim i As Long, j As Long
    Dim val() As Variant
    ReDim val(1 To m_Cnt, 1 To 1)
    For i = 1 To m_Cnt
        val(i, 1) = m_Values(i)
    Next i
    values = val
End Property

Private Sub Class_Initialize()
    m_Cnt = 0
End Sub

Private Sub Class_Terminate()
    ReDim m_Values(0)
End Sub
Attribute VB_Name = "ClsDrs"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_ObjNum As Long
Private m_objXML As Object
Private m_lVarNum As Long
Private m_lLatentNum As Long
Private m_lSampleNum As Long
Private m_lObjNum As Long
Private m_sXmlFile As String
Private m_sXslFile As String
Private m_outRge As Range
Private m_curRge As Range
Private m_sFontName As String
Private m_lFontSize As Long
Private m_objVar As Variant
Private m_varVar As Variant
Private m_nameVar As Variant
Private m_bRealCount As Boolean
Private m_bPntCross As Boolean
Private m_bPntDown As Boolean
Private m_bPntAll As Boolean
Private m_bKitai As Boolean
Private m_bTann As Boolean
Private m_bTyou As Boolean
Private m_bYuisa As Boolean
Private m_lStatCnt As Long
Private m_lOutTbl As Long
Private m_lFlgSpecial As Long
Private m_lFactNum As Long
Private m_formula As Long
Private m_aryFmt(1 To 4) As String

Private Sub SetRangeBorder(ByVal rge As Range, _
                                    ByVal leftWgt As XlBorderWeight, _
                                    ByVal topWgt As XlBorderWeight, _
                                    ByVal rightWgt As XlBorderWeight, _
                                    ByVal bottomWgt As XlBorderWeight, _
                                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                                    Optional ByVal insideH As XlBorderWeight = xlNone)
                                    
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
End Sub

Private Sub SetRgeFormat(ByVal rge As Range)
    rge.Font.name = m_sFontName
    rge.Font.Size = m_lFontSize
    rge.WrapText = False
    rge.MergeCells = False
    rge.ShrinkToFit = False
End Sub
'---------------------------------------------------------------------------------------
' Procedure : OutputSpecial
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Function OutputSpecial() As Range
    On Error GoTo OutputSpecial_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputSpecial = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='title']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd||fffd| |fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|"
    OutRge.Font.Bold = True
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(2, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
    #End If
    Call SetRangeBorder(OutRge(3, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutRge(4, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(3, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(4, 2), OutRge(4, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    OutRge(4, 4).NumberFormatLocal = "0.000"
    
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='shihedu']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    Set OutRge = OutRge(6, 1)
    OutRge.Select
    OutRge.Worksheet.Paste
    SetRgeFormat Selection
    #Else
        Set OutRge = OutRge(6, 1)
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
    #End If
    If m_lFlgSpecial = 1 Then
        Call SetRangeBorder(OutRge(1, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(2, 1), OutRge(tmpi, 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(1, 2), OutRge(1, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
        Call SetRangeBorder(Range(OutRge(2, 2), OutRge(tmpi, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
        Range(OutRge(2, 2), OutRge(tmpi, 3)).NumberFormatLocal = "0.000"
    Else
        Call SetRangeBorder(OutRge(1, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(2, 1), OutRge(3, 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(1, 2), OutRge(1, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
        Call SetRangeBorder(Range(OutRge(2, 2), OutRge(3, 4)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
        Range(OutRge(2, 2), OutRge(3, 3)).NumberFormatLocal = "0.000"
    End If
    'outRge(2, 1) = IIf(m_formula = 1, "|fffd|K|fffd||fffd||fffd|x", "|fffd||793|x|fffd||fffd|")
    If m_lFlgSpecial = 1 Then
        Set OutputSpecial = OutRge(tmpi + 2, 1)
    Else
        Set OutputSpecial = OutRge(tmpi + 2, 1)
    End If
    
    On Error GoTo 0
    Exit Function
OutputSpecial_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputSpecial of Class Module ClsDrs"
    On Error GoTo 0
End Function

Private Function OutputFisher() As Range
    On Error GoTo OutputFisher_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputFisher = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='fisher']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge.Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    i = Selection.Rows.Count
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
        i = tmpi
    #End If
    Call SetRangeBorder(OutRge(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(4, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(4, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Range(OutRge(3, 2), OutRge(4, 2)).NumberFormatLocal = "0.000"
    Set OutputFisher = OutRge(i + 2, 1)
    On Error GoTo 0
    Exit Function
OutputFisher_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputFisher of Class Module ClsDrs"
    On Error GoTo 0
End Function

Private Function OutputStat(ByVal strTblName As String, ByVal strFormat As String) As Range
    On Error GoTo OutputStat_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputStat = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='" & strTblName & "']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge.Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
    #End If
    Call SetRangeBorder(OutRge(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + m_lSampleNum, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, m_lVarNum + 1)), xlThin, xlThin, xlThin, xlThin, xlThin, xlNone)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(2 + m_lSampleNum, m_lVarNum + 1)), xlThin, xlThin, xlThin, xlThin, xlThin, xlNone)
    Range(OutRge(3, 2), OutRge(2 + m_lSampleNum, m_lVarNum + 1)).NumberFormatLocal = strFormat
    For i = 1 To m_lVarNum
        OutRge(2, i + 1) = m_varVar(1, i + 1)
    Next i
    For i = 1 To m_lSampleNum
        OutRge(2 + i, 1) = m_nameVar(i + 1, 1)
    Next i
    Set OutputStat = OutRge(m_lSampleNum + 4, 1)
    On Error GoTo 0
    Exit Function
OutputStat_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputStat of Class Module ClsDrs"
    On Error GoTo 0
End Function

Private Sub OutputStats()
    Dim i As Long
    Dim a As Variant, f As Variant
    a = Array("RealCount", "PntCross", "PntDown", "PntAll", "Kitai", "Tann", "Tyou", "Yuisa")
    f = Array("0", "0.0""%""", "0.0""%""", "0.0""%""", "0.00", "0.00", "0.0000", "0")
    For i = LBound(a) To UBound(a)
        Set m_curRge = OutputStat(a(i), f(i))
    Next i
End Sub

Private Function OutputMergeTbl() As Range
    On Error GoTo OutputMergeTbl_Error
    Dim objXMLSearchElements As Object, objXmlNode As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, k As Long, tmpi As Long, tmpj As Long
    Dim inx As Long, lLoop As Long, lRows As Long, lp As Long
    Dim lFrom As Long, lTo As Long
    Set OutRge = m_curRge
    Set OutputMergeTbl = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='MergeTbl']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge.Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    #Else
        OutRge.Worksheet.Activate
        OutRge(1, 1) = "|fffd||fffd||fffd|c|fffd||fffd||fffd||fffd||fffd||fffd|"
        Set OutRge = OutRge(2, 1)
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
    #End If
    For i = 1 To m_lSampleNum
        OutRge(m_lStatCnt * (i - 1) + 2, 1) = m_nameVar(i + 1, 1)
    Next i
    For i = 1 To m_lVarNum
        OutRge(1, i + 2) = m_varVar(1, i + 1)
    Next i
    Call SetRangeBorder(Range(OutRge, OutRge(1, 2)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(1, 3), OutRge(1, 2 + m_lVarNum)), xlThin, xlThin, xlThin, xlThin, xlThin, xlNone)
    
    For i = 1 To m_lSampleNum
        Call SetRangeBorder(Range(OutRge(m_lStatCnt * (i - 1) + 2, 1), OutRge(m_lStatCnt * (i - 1) + 1 + m_lStatCnt, 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(m_lStatCnt * (i - 1) + 2, 2), OutRge(m_lStatCnt * (i - 1) + 1 + m_lStatCnt, 2)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(m_lStatCnt * (i - 1) + 2, 3), OutRge(m_lStatCnt * (i - 1) + 1 + m_lStatCnt, 2 + m_lVarNum)), xlThin, xlThin, xlThin, xlThin, xlThin, xlNone)
        Call SetRangeBorder(Range(OutRge(m_lStatCnt * (i - 1) + 2, 2), OutRge(m_lStatCnt * (i - 1) + 1 + m_lFactNum, 2)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(m_lStatCnt * (i - 1) + 2, 3), OutRge(m_lStatCnt * (i - 1) + 1 + m_lFactNum, 2 + m_lVarNum)), xlThin, xlThin, xlThin, xlThin, xlThin, xlNone)
        Range(OutRge(m_lStatCnt * (i - 1) + 2, 3), OutRge(m_lStatCnt * (i - 1) + 1 + m_lStatCnt, 2 + m_lVarNum)).NumberFormatLocal = "0.000"
        For j = 1 To m_lFactNum
            Range(OutRge(m_lStatCnt * (i - 1) + 1 + j, 3), OutRge(m_lStatCnt * (i - 1) + j + 1, 2 + m_lVarNum)).NumberFormatLocal = m_aryFmt(j)
        Next j
    Next i
    
    Set OutputMergeTbl = OutRge
    On Error GoTo 0
    Exit Function
OutputMergeTbl_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputMergeTbl of Class Module ClsDrs"
End Function

'---------------------------------------------------------------------------------------
' Procedure : ObjXML
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Property Set ObjXML(ByVal ObjXML As Object)
    Dim objSearchElement As Object
    On Error GoTo ObjXML_Error
    Set m_objXML = ObjXML
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"

    On Error GoTo 0
    Exit Property

ObjXML_Error:

    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure ObjXML of Class Module ClsDrs"

    On Error GoTo 0
    Exit Property
End Property

Public Property Get VarNum() As Long
    VarNum = m_lVarNum
End Property

Public Property Let VarNum(ByVal lVarNum As Long)
    m_lVarNum = lVarNum
End Property

Public Property Get LatentNum() As Long
    LatentNum = m_lLatentNum
End Property

Public Property Let LatentNum(ByVal lLatentNum As Long)
    m_lLatentNum = lLatentNum
End Property

Public Property Get SampleNum() As Long
   SampleNum = m_lSampleNum
End Property

Public Property Let SampleNum(ByVal lSampleNum As Long)
    m_lSampleNum = lSampleNum
End Property

Public Property Get ObjNum() As Long
    ObjNum = m_lObjNum
End Property

Public Property Let ObjNum(ByVal lObjNum As Long)
    m_lObjNum = lObjNum
End Property

Public Property Get XmlFile() As String

    XmlFile = m_sXmlFile

End Property

Public Property Let XmlFile(ByVal sXmlFile As String)

    m_sXmlFile = sXmlFile

End Property

Public Property Get XslFile() As String

    XslFile = m_sXslFile

End Property

Public Property Let XslFile(ByVal sXslFile As String)

    m_sXslFile = sXslFile

End Property

Public Sub OutputDRS(ByVal OutRge As Range)
    m_sFontName = OutRge.Font.name
    m_lFontSize = OutRge.Font.Size
    Set m_outRge = OutRge
    Set m_curRge = m_outRge
    m_curRge.Worksheet.Activate
    Set m_curRge = OutputSpecial()
    Set m_curRge = OutputFisher()
    Set m_curRge = OutputMergeTbl()
    OutputStats
    m_outRge.Select
End Sub

Public Sub SetTitleSource(ByVal objVar As Variant, ByVal varVar As Variant, ByVal nameVar As Variant)
    m_objVar = objVar
    m_varVar = varVar
    m_nameVar = nameVar
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Initialize
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Sub Initialize(ByVal formula As Long, ByVal XmlFile As String, ByVal XslFile As String)
    Dim xmlObj As Object, searchObj As Object
    On Error GoTo Initialize_Error
    m_formula = formula
    m_sXmlFile = XmlFile
    m_sXslFile = XslFile
    Set m_objXML = Localize(m_sXmlFile, m_sXslFile)
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"
    Set xmlObj = CreateXMLDom
    xmlObj.async = False
    xmlObj.setProperty "SelectionLanguage", "XPath"
    Call xmlObj.Load(m_sXmlFile)
    If xmlObj Is Nothing Then Exit Sub
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/RowNum")
    If Not searchObj Is Nothing Then
        m_lSampleNum = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/ColNum")
    If Not searchObj Is Nothing Then
        m_lVarNum = CLng(searchObj.text)
    End If
    m_lFactNum = 0
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/RealCount")
    If Not searchObj Is Nothing Then
        m_bRealCount = CBool(searchObj.text)
        If m_bRealCount Then
            m_lFactNum = m_lFactNum + 1
            m_aryFmt(m_lFactNum) = "0"
        End If
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/PntCross")
    If Not searchObj Is Nothing Then
        m_bPntCross = CBool(searchObj.text)
        If m_bPntCross Then
            m_lFactNum = m_lFactNum + 1
            m_aryFmt(m_lFactNum) = "0.0""%"""
        End If
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/PntDown")
    If Not searchObj Is Nothing Then
        m_bPntDown = CBool(searchObj.text)
        If m_bPntDown Then
            m_lFactNum = m_lFactNum + 1
            m_aryFmt(m_lFactNum) = "0.0""%"""
        End If
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/PntAll")
    If Not searchObj Is Nothing Then
        m_bPntAll = CBool(searchObj.text)
        If m_bPntAll Then
            m_lFactNum = m_lFactNum + 1
            m_aryFmt(m_lFactNum) = "0.0""%"""
        End If
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/Kitai")
    If Not searchObj Is Nothing Then
        m_bKitai = CBool(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/Tann")
    If Not searchObj Is Nothing Then
        m_bTann = CBool(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/Tyou")
    If Not searchObj Is Nothing Then
        m_bTyou = CBool(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Stat/Yuisa")
    If Not searchObj Is Nothing Then
        m_bYuisa = CBool(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/StatCnt")
    If Not searchObj Is Nothing Then
        m_lStatCnt = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/OutTbl")
    If Not searchObj Is Nothing Then
        m_lOutTbl = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/FlgSpecial")
    If Not searchObj Is Nothing Then
        m_lFlgSpecial = CLng(searchObj.text)
    End If
    Set xmlObj = Nothing
    On Error GoTo 0
    Exit Sub
Initialize_Error:
    Set xmlObj = Nothing
End Sub
Attribute VB_Name = "ClsPls"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_ObjNum As Long
Private m_objXML As Object
Private m_lVarNum As Long
Private m_lLatentNum As Long
Private m_lSampleNum As Long
Private m_lObjNum As Long
Private m_sXmlFile As String
Private m_sXslFile As String
Private m_outRge As Range
Private m_curRge As Range
Private m_sFontName As String
Private m_lFontSize As Long
Private m_objVar As Variant
Private m_varVar As Variant
Private m_nameVar As Variant
Private m_bSingleLat As Boolean

Private Sub SetRangeBorder(ByVal rge As Range, _
                                    ByVal leftWgt As XlBorderWeight, _
                                    ByVal topWgt As XlBorderWeight, _
                                    ByVal rightWgt As XlBorderWeight, _
                                    ByVal bottomWgt As XlBorderWeight)
                                    
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    rge.Borders(xlInsideVertical).LineStyle = xlNone
    rge.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Private Sub SetRgeFormat(ByVal rge As Range)
    rge.Font.name = m_sFontName
    rge.Font.Size = m_lFontSize
    rge.WrapText = False
    rge.MergeCells = False
    rge.ShrinkToFit = False
End Sub
'---------------------------------------------------------------------------------------
' Procedure : OutputBasicStat
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Function OutputBasicStat() As Range
    On Error GoTo OutputBasicStat_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Dim i As Long
    Set OutRge = m_curRge
    Set OutputBasicStat = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='BasicStat']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|"
    OutRge.Font.Bold = True
    OutRge(1, 3) = "|fffd||fffd||fffd||fffd|=" & m_lSampleNum
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + m_lVarNum + 1, 1)), xlMedium, xlThin, xlThin, xlMedium)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, 5)), xlThin, xlMedium, xlMedium, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(3 + m_lVarNum, 5)), xlThin, xlThin, xlMedium, xlMedium)
    Range(OutRge(3, 2), OutRge(3 + m_lVarNum, 5)).NumberFormatLocal = "0.0000"
    For i = 1 To m_lVarNum
        OutRge(2 + i, 1) = m_varVar(1, i)
    Next i
    OutRge(3 + m_lVarNum, 1) = m_objVar(1, 1)
    Set OutputBasicStat = OutRge(m_lVarNum + 5, 1)
    On Error GoTo 0
    Exit Function
OutputBasicStat_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputBasicStat of Class Module ClsPls"
    On Error GoTo 0
End Function

Private Function OutputCeleMatrix() As Range
    On Error GoTo OutputCeleMatrix_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Dim i As Long, j As Long
    Set OutRge = m_curRge
    Set OutputCeleMatrix = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='CeleMatrix']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd||fffd||fffd||58d|s|fffd||fffd|"
    OutRge.Font.Bold = True
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + m_lVarNum + 1, 1)), xlMedium, xlThin, xlThin, xlMedium)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, m_lVarNum + 2)), xlThin, xlMedium, xlMedium, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(3 + m_lVarNum, m_lVarNum + 2)), xlThin, xlThin, xlMedium, xlMedium)
    For i = 1 To m_lVarNum + 1
        For j = 1 To m_lVarNum + 1
            If i <> j Then
                OutRge(2 + i, j + 1).NumberFormatLocal = "0.0000"
            End If
        Next j
    Next i
    For i = 1 To m_lVarNum
        OutRge(2 + i, 1) = m_varVar(1, i)
        OutRge(2, i + 1) = m_varVar(1, i)
    Next i
    OutRge(3 + m_lVarNum, 1) = m_objVar(1, 1)
    OutRge(2, m_lVarNum + 2) = m_objVar(1, 1)
    Set OutputCeleMatrix = OutRge(m_lVarNum + 5, 1)
    On Error GoTo 0
    Exit Function
OutputCeleMatrix_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputCeleMatrix of Class Module ClsPls"
    On Error GoTo 0
End Function

Private Function OutputLoadings() As Range
    On Error GoTo OutputLoadings_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Dim i As Long
    Set OutRge = m_curRge
    Set OutputLoadings = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='Loadings']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd||fffd||fffd||5d7||fffd|"
    OutRge.Font.Bold = True
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + m_lVarNum + 1, 1)), xlMedium, xlThin, xlThin, xlMedium)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, m_lLatentNum + 1)), xlThin, xlMedium, xlMedium, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(3 + m_lVarNum, m_lLatentNum + 1)), xlThin, xlThin, xlMedium, xlMedium)
    Range(OutRge(3, 2), OutRge(3 + m_lVarNum, m_lLatentNum + 1)).NumberFormatLocal = "0.0000"
    For i = 1 To m_lVarNum
        OutRge(2 + i, 1) = m_varVar(1, i)
    Next i
    OutRge(3 + m_lVarNum, 1) = m_objVar(1, 1)
    Set OutputLoadings = OutRge(m_lVarNum + 5, 1)
    On Error GoTo 0
    Exit Function
OutputLoadings_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputLoadings of Class Module ClsPls"
    On Error GoTo 0
End Function

Private Function OutputCoef() As Range
    On Error GoTo OutputCoef_Error
    Dim objXMLSearchElements As Object, objXmlNode As Object
    Dim OutRge As Range
    Dim i As Long, j As Long, k As Long
    Dim inx As Long, lLoop As Long, lRows As Long, lp As Long
    Dim lFrom As Long, lTo As Long
    Set OutRge = m_curRge
    Set OutputCoef = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='Coefficients']")
    If objXMLSearchElements Is Nothing Then Exit Function
    If m_bSingleLat Then
        'PutInClipboard objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & m_lLatentNum & "']").xml
        lFrom = m_lLatentNum
        lTo = m_lLatentNum
    Else
        'PutInClipboard objXMLSearchElements.xml
        'lLoop = m_lLatentNum
        lFrom = 1
        lTo = m_lLatentNum
    End If
    OutRge.Worksheet.Activate
    DoEvents
    lLoop = (lTo - lFrom) Mod 63 + 1
    lRows = (lTo - lFrom) \ 63 + 1
    For k = 1 To lRows
        OutRge = "|fffd|W|fffd||fffd|"
        OutRge.Font.Bold = True
        OutRge(1, 2) = "|fffd||693|I|fffd||3d0||fffd|"
        OutRge(1, 3) = m_objVar(1, 1)
        OutRge(2, 1).Select
        If k < lRows Then
            lp = 63
            lTo = lFrom + 62
        Else
            lp = lLoop
            lTo = lFrom + lLoop - 1
        End If
        For i = 1 To lp
            'inx = (i - 1) * 4
            Set objXmlNode = objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & lFrom + i - 1 & "']")
            PutInClipboard objXmlNode.xml
            DoEvents
            OutRge(2, 1).Select
            DoEvents
            OutRge.Worksheet.Paste
            DoEvents
            SetRgeFormat Selection
            Call SetRangeBorder(OutRge(3, 1), xlMedium, xlMedium, xlThin, xlThin)
            Call SetRangeBorder(Range(OutRge(4, 1), OutRge(3 + m_lVarNum, 1)), xlMedium, xlThin, xlThin, xlMedium)
            Call SetRangeBorder(Range(OutRge(3, 2), OutRge(3, 2)), xlThin, xlMedium, xlMedium, xlThin)
            Call SetRangeBorder(Range(OutRge(4, 2), OutRge(3 + m_lVarNum, 2)), xlThin, xlThin, xlMedium, xlMedium)
            Range(OutRge(4, 2), OutRge(3 + m_lVarNum, 2)).NumberFormatLocal = "0.0000"
            For j = 1 To m_lVarNum
                OutRge(3 + j, 1) = m_varVar(1, j)
            Next j
            Set OutRge = OutRge(1, 5)
        Next i
        If k < lRows Then
            lFrom = lFrom + 63
        End If
        Set OutRge = OutRge(m_lVarNum + 5, 1)
        Set OutRge = Cells(OutRge.row, 2)
    Next k
    #If 0 Then
    OutRge = "|fffd|W|fffd||fffd|"
    OutRge.Font.Bold = True
    OutRge(1, 2) = "|fffd||693|I|fffd||3d0||fffd|"
    OutRge(1, 3) = m_objVar(1, 1)
    OutRge(2, 1).Select
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    For i = 1 To lLoop
        inx = (i - 1) * 4
        Call SetRangeBorder(OutRge(3, inx + 1), xlMedium, xlMedium, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(4, inx + 1), OutRge(3 + m_lVarNum, inx + 1)), xlMedium, xlThin, xlThin, xlMedium)
        Call SetRangeBorder(Range(OutRge(3, inx + 2), OutRge(3, inx + 2)), xlThin, xlMedium, xlMedium, xlThin)
        Call SetRangeBorder(Range(OutRge(4, inx + 2), OutRge(3 + m_lVarNum, inx + 2)), xlThin, xlThin, xlMedium, xlMedium)
        Range(OutRge(4, inx + 2), OutRge(3 + m_lVarNum, inx + 2)).NumberFormatLocal = "0.0000"
        For j = 1 To m_lVarNum
            OutRge(3 + j, inx + 1) = m_varVar(1, j)
        Next j
    Next i
    #End If
    Set OutputCoef = OutRge '(m_lVarNum + 5, 1)
    On Error GoTo 0
    Exit Function
OutputCoef_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputCoef of Class Module ClsPls"
End Function

Private Function OutputPredictError() As Range
    On Error GoTo OutputPredictError_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim v As Variant
    Dim i As Long, lLoop As Long
    Dim tmpStr As String
    Set OutRge = m_curRge
    Set OutputPredictError = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='PredictError']")
    If objXMLSearchElements Is Nothing Then Exit Function
    If m_bSingleLat Then
        'Set objXMLSearchElements = objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & m_lLatentNum & "']")
        tmpStr = "<table>"
        tmpStr = tmpStr & objXMLSearchElements.SelectSingleNode("tr[1]").xml
        tmpStr = tmpStr & objXMLSearchElements.SelectSingleNode("tr[" & m_lLatentNum + 1 & "]").xml
        tmpStr = tmpStr & "</table>"
        lLoop = 1
    Else
        tmpStr = objXMLSearchElements.xml
        lLoop = m_lLatentNum
    End If
    OutRge = "|fffd|\|fffd||fffd||fffd||b377|"
    OutRge.Font.Bold = True
    PutInClipboard tmpStr 'objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + lLoop, 1)), xlMedium, xlThin, xlThin, xlMedium)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, 3)), xlThin, xlMedium, xlMedium, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(2 + lLoop, 3)), xlThin, xlThin, xlMedium, xlMedium)
    Set r = Range(OutRge(3, 2), OutRge(2 + lLoop, 2))
    r.NumberFormatLocal = "0.000"
    OutRge(2, 3) = "|fffd||fffd||fffd||fffd|"
    On Error Resume Next
    For i = 1 To lLoop
        r(i, 2) = Application.WorksheetFunction.Rank(r(i, 1), r, 1)
        If val(r(i, 2)) = 1 Then
        With r(i, 2).Interior
            .colorIndex = 37
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
        End If
    Next i
    Set OutputPredictError = OutRge(lLoop + 4, 1)
    On Error GoTo 0
    Exit Function
OutputPredictError_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputPredictError of Class Module ClsPls"
    On Error GoTo 0
End Function

Private Function OutputRestDiff() As Range
    Dim lLoop As Long
    Dim tmpStr As String
    On Error GoTo OutputRestDiff_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Set OutRge = m_curRge
    Set OutputRestDiff = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='RestDiff']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd|c|fffd||fffd||fffd||fffd||fffd||fffd||fffd|a"
    OutRge.Font.Bold = True
    'PutInClipboard objXMLSearchElements.xml
    If m_bSingleLat Then
        'PutInClipboard objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & m_lLatentNum & "']").xml
        tmpStr = "<table>"
        tmpStr = tmpStr & objXMLSearchElements.SelectSingleNode("tr[1]").xml
        tmpStr = tmpStr & objXMLSearchElements.SelectSingleNode("tr[" & m_lLatentNum + 1 & "]").xml
        tmpStr = tmpStr & "</table>"
        PutInClipboard tmpStr
        lLoop = 1
    Else
        PutInClipboard objXMLSearchElements.xml
        lLoop = m_lLatentNum
    End If
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + lLoop, 1)), xlMedium, xlThin, xlThin, xlMedium)
    Call SetRangeBorder(OutRge(2, 2), xlThin, xlMedium, xlMedium, xlThin)
    Call SetRangeBorder(Range(OutRge(3, 2), OutRge(2 + lLoop, 2)), xlThin, xlThin, xlMedium, xlMedium)
    Set OutputRestDiff = OutRge(lLoop + 4, 1)
    On Error GoTo 0
    Exit Function
OutputRestDiff_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputRestDiff of Class Module ClsPls"
    On Error GoTo 0
End Function

#If True Then
Private Function OutputPrediction() As Range
    On Error GoTo OutputPrediction_Error
    Dim objXMLSearchElements As Object, objXmlNode As Object
    Dim OutRge As Range
    Dim i As Long, j As Long, k As Long
    Dim inx As Long, lLoop As Long, lRows As Long, lp As Long
    Dim lFrom As Long, lTo As Long
    Set OutRge = m_curRge
    Set OutputPrediction = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='Prediction']")
    If objXMLSearchElements Is Nothing Then Exit Function
    If m_bSingleLat Then
        lFrom = m_lLatentNum
        lTo = m_lLatentNum
    Else
        lFrom = 1
        lTo = m_lLatentNum
    End If
    OutRge.Worksheet.Activate
    DoEvents
    lLoop = (lTo - lFrom) Mod 63 + 1
    lRows = (lTo - lFrom) \ 63 + 1
    For k = 1 To lRows
        OutRge = "|fffd||693|I|fffd||3d0||fffd|"
        OutRge.Font.Bold = True
        OutRge(1, 2) = m_objVar(1, 1)
        OutRge(2, 1).Select
        If k < lRows Then
            lp = 63
            lTo = lFrom + 62
        Else
            lp = lLoop
            lTo = lFrom + lLoop - 1
        End If
        For i = 1 To lp
            Set objXmlNode = objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & lFrom + i - 1 & "']")
            PutInClipboard objXmlNode.xml
            OutRge(2, 1).Select
            DoEvents
            OutRge.Worksheet.Paste
            DoEvents
            SetRgeFormat Selection
            Call SetRangeBorder(OutRge(2, 1), xlMedium, xlMedium, xlThin, xlThin)
            Call SetRangeBorder(Range(OutRge(3, 1), OutRge(2 + m_lSampleNum, 3)), xlMedium, xlThin, xlThin, xlMedium)
            Call SetRangeBorder(Range(OutRge(2, 2), OutRge(2, 4)), xlThin, xlMedium, xlMedium, xlThin)
            Call SetRangeBorder(Range(OutRge(3, 2), OutRge(2 + m_lSampleNum, 4)), xlThin, xlThin, xlMedium, xlMedium)
            Range(OutRge(3, 2), OutRge(3 + m_lSampleNum, 4)).NumberFormatLocal = "0.0000"
            Range(OutRge(3, 1), OutRge(2 + m_lSampleNum, 1)).Value = m_nameVar
            Set OutRge = OutRge(1, 5)
        Next i
        If k < lRows Then
            lFrom = lFrom + 63
        End If
        Set OutRge = OutRge(m_lSampleNum + 4, 1)
        Set OutRge = Cells(OutRge.row, 2)
    Next k
    Set OutputPrediction = OutRge
    On Error GoTo 0
    Exit Function
OutputPrediction_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputPrediction of Class Module ClsPls"
    On Error GoTo 0
End Function
#Else
Private Function OutputPrediction() As Range
    On Error GoTo OutputPrediction_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Dim i As Long, inx As Long, lLoop As Long
    Set OutRge = m_curRge
    Set OutputPrediction = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='Prediction']")
    If objXMLSearchElements Is Nothing Then Exit Function
    OutRge = "|fffd||693|I|fffd||3d0||fffd|"
    OutRge.Font.Bold = True
    OutRge(1, 2) = m_objVar(1, 1)
    If m_bSingleLat Then
        PutInClipboard objXMLSearchElements.SelectSingleNode("tr/comp[@id='" & m_lLatentNum & "']").xml
        lLoop = 1
    Else
        PutInClipboard objXMLSearchElements.xml
        lLoop = m_lLatentNum
    End If
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(2, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    For i = 1 To lLoop
        inx = (i - 1) * 4
        Call SetRangeBorder(OutRge(2, inx + 1), xlMedium, xlMedium, xlThin, xlThin)
        Call SetRangeBorder(Range(OutRge(3, inx + 1), OutRge(2 + m_lSampleNum, inx + 1 + 2)), xlMedium, xlThin, xlThin, xlMedium)
        Call SetRangeBorder(Range(OutRge(2, inx + 2), OutRge(2, inx + 2 + 2)), xlThin, xlMedium, xlMedium, xlThin)
        Call SetRangeBorder(Range(OutRge(3, inx + 2), OutRge(2 + m_lSampleNum, inx + 2 + 2)), xlThin, xlThin, xlMedium, xlMedium)
        Range(OutRge(3, inx + 2), OutRge(2 + m_lSampleNum, inx + 2 + 2)).NumberFormatLocal = "0.0000"
        Range(OutRge(3, inx + 1), OutRge(2 + m_lSampleNum, inx + 1)).Value = m_nameVar
    Next i
    Set OutputPrediction = OutRge(m_lVarNum + 4, 1)
    On Error GoTo 0
    Exit Function
OutputPrediction_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputPrediction of Class Module ClsPls"
End Function
#End If

'---------------------------------------------------------------------------------------
' Procedure : ObjXML
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Property Set ObjXML(ByVal ObjXML As Object)
    Dim objSearchElement As Object
    On Error GoTo ObjXML_Error
    Set m_objXML = ObjXML
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"

    On Error GoTo 0
    Exit Property

ObjXML_Error:

    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure ObjXML of Class Module ClsPls"

    On Error GoTo 0
    Exit Property
End Property

Public Property Get VarNum() As Long
    VarNum = m_lVarNum
End Property

Public Property Let VarNum(ByVal lVarNum As Long)
    m_lVarNum = lVarNum
End Property

Public Property Get LatentNum() As Long
    LatentNum = m_lLatentNum
End Property

Public Property Let LatentNum(ByVal lLatentNum As Long)
    m_lLatentNum = lLatentNum
End Property

Public Property Get SampleNum() As Long
   SampleNum = m_lSampleNum
End Property

Public Property Let SampleNum(ByVal lSampleNum As Long)
    m_lSampleNum = lSampleNum
End Property

Public Property Get ObjNum() As Long
    ObjNum = m_lObjNum
End Property

Public Property Let ObjNum(ByVal lObjNum As Long)
    m_lObjNum = lObjNum
End Property

Public Property Get XmlFile() As String

    XmlFile = m_sXmlFile

End Property

Public Property Let XmlFile(ByVal sXmlFile As String)

    m_sXmlFile = sXmlFile

End Property

Public Property Get XslFile() As String

    XslFile = m_sXslFile

End Property

Public Property Let XslFile(ByVal sXslFile As String)

    m_sXslFile = sXslFile

End Property

Public Sub OutputPLS(ByVal OutRge As Range)
    m_sFontName = OutRge.Font.name
    m_lFontSize = OutRge.Font.Size
    Set m_outRge = OutRge
    Set m_curRge = m_outRge
    m_curRge.Worksheet.Activate
    Set m_curRge = OutputBasicStat()
    Set m_curRge = OutputCeleMatrix()
    'Set m_curRge = OutputLoadings()
    Set m_curRge = OutputCoef()
    Set m_curRge = OutputPredictError()
    Set m_curRge = OutputRestDiff()
    Set m_curRge = OutputPrediction()
    m_outRge.Select
End Sub

Public Sub SetTitleSource(ByVal objVar As Variant, ByVal varVar As Variant, ByVal nameVar As Variant)
    m_objVar = objVar
    m_varVar = varVar
    m_nameVar = nameVar
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Initialize
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Sub Initialize(ByVal bSingleLat As Boolean, ByVal XmlFile As String, ByVal XslFile As String)
    Dim xmlObj As Object, searchObj As Object
    On Error GoTo Initialize_Error
    m_bSingleLat = bSingleLat
    m_sXmlFile = XmlFile
    m_sXslFile = XslFile
    Set m_objXML = Localize(m_sXmlFile, m_sXslFile)
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"
    Set xmlObj = CreateXMLDom
    xmlObj.async = False
    xmlObj.setProperty "SelectionLanguage", "XPath"
    Call xmlObj.Load(m_sXmlFile)
    If xmlObj Is Nothing Then Exit Sub
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/@SampleNum")
    If Not searchObj Is Nothing Then
        m_lSampleNum = CLng(searchObj.nodevalue)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/@VarianceNum")
    If Not searchObj Is Nothing Then
        m_lVarNum = CLng(searchObj.nodevalue)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/@LatentNum")
    If Not searchObj Is Nothing Then
        m_lLatentNum = CLng(searchObj.nodevalue)
    End If
    Set xmlObj = Nothing
    On Error GoTo 0
    Exit Sub
Initialize_Error:
    Set xmlObj = Nothing
End Sub
Attribute VB_Name = "ClsWsk"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_ObjNum As Long
Private m_objXML As Object
Private m_kind As Long
Private m_sXmlFile As String
Private m_sXslFile As String
Private m_outRge As Range
Private m_curRge As Range
Private m_sFontName As String
Private m_lFontSize As Long
Private m_varVar1 As Variant
Private m_varVar2 As Variant

Private Sub SetRangeBorder(ByVal rge As Range, _
                                    ByVal leftWgt As XlBorderWeight, _
                                    ByVal topWgt As XlBorderWeight, _
                                    ByVal rightWgt As XlBorderWeight, _
                                    ByVal bottomWgt As XlBorderWeight, _
                                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                                    Optional ByVal insideH As XlBorderWeight = xlNone)
    On Error Resume Next
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    On Error GoTo 0
End Sub

Private Sub SetRgeFormat(ByVal rge As Range)
    Dim colWidth As Long
    If Not IsNull(rge.ColumnWidth) Then
        colWidth = rge.ColumnWidth
    End If
    rge.Font.name = m_sFontName
    rge.Font.Size = m_lFontSize
    rge.WrapText = False
    rge.MergeCells = False
    rge.ShrinkToFit = False
    If Not IsNull(rge.ColumnWidth) Then
        rge.ColumnWidth = colWidth
    End If
End Sub


'---------------------------------------------------------------------------------------
' Procedure : OutputTitle
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Function OutputTitle() As Range
    On Error GoTo OutputTitle_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputTitle = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='title']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(1, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    #Else
        OutRge.Worksheet.Activate
        SetRgeFormat OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        OutRge(1, 1).Font.Bold = True
    #End If
    Set OutputTitle = OutRge(5, 1)
    On Error GoTo 0
    Exit Function
OutputTitle_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputTitle of Class Module ClsWsk"
    On Error GoTo 0
End Function

'---------------------------------------------------------------------------------------
' Procedure : OutputStatics
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Function OutputStatics() As Range
    On Error GoTo OutputStatics_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    'If m_kind = 1 Then
    '    tmpi = 6
    'Else
    '    tmpi = 3
    'End If
    Set OutRge = m_curRge
    Set OutputStatics = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='statics']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(1, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    tmpi = Selection.Rows.Count
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
    #End If
    Call SetRangeBorder(Range(OutRge(1, 1), OutRge(tmpi, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(1, 2), OutRge(tmpi, 3)), xlThin, xlThin, xlThin, xlThin)
    Set OutputStatics = OutRge(tmpi, 1)
    On Error GoTo 0
    Exit Function
OutputStatics_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputStatics of Class Module ClsWsk"
    On Error GoTo 0
End Function

Private Function OutputStatics2() As Range
    On Error GoTo OutputStatics_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    'If m_kind = 1 Then
    '    tmpi = 6
    'Else
    '    tmpi = 3
    'End If
    Set OutRge = m_curRge
    Set OutputStatics2 = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='statics']")
    #If 0 Then
    If objXMLSearchElements Is Nothing Then Exit Function
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(1, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    tmpi = Selection.Rows.Count
    tmpj = Selection.Columns.Count
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
    #End If
    If tmpj > 4 Then Range(OutRge(tmpi, 1), OutRge(tmpi, 4)).NumberFormat = "0.000"
    SetRgeFormat Selection
    Call SetRangeBorder(Range(OutRge(1, 1), OutRge(tmpi, 1)), xlThin, xlThin, xlThin, xlThin, , xlThin)
    Call SetRangeBorder(Range(OutRge(1, 2), OutRge(tmpi, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
    Call SetRangeBorder(Range(OutRge(1, 4), OutRge(tmpi, tmpj)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
    Set OutputStatics2 = OutRge(tmpi, 1)
    On Error GoTo 0
    Exit Function
OutputStatics_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputStatics of Class Module ClsWsk"
    On Error GoTo 0
End Function

'---------------------------------------------------------------------------------------
' Procedure : OutputGroupInfo
' Purpose   :
'---------------------------------------------------------------------------------------
'
Private Function OutputGroupInfo() As Range
    On Error GoTo OutputGroupInfo_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputGroupInfo = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='group_info']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(1, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    tmpi = Selection.Rows.Count - 1
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
        tmpi = tmpi - 1
    #End If

    Call SetRangeBorder(OutRge(1, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(2, 1), OutRge(1 + tmpi, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(1, 2), OutRge(1, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(tmpi + 1, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    OutRge(1, 2) = m_varVar1(1, 1)
    OutRge(1, 3) = m_varVar2(1, 1)
    Set OutputGroupInfo = OutRge(tmpi + 2, 1)
    On Error GoTo 0
    Exit Function
OutputGroupInfo_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputGroupInfo of Class Module ClsWsk"
    On Error GoTo 0
End Function

Private Function OutputGroupInfo2() As Range
    On Error GoTo OutputGroupInfo_Error
    Dim objXMLSearchElements As Object
    Dim OutRge As Range, r As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    Set OutRge = m_curRge
    Set OutputGroupInfo2 = OutRge
    Set objXMLSearchElements = m_objXML.SelectSingleNode("//html/body/table[@id='group_info']")
    If objXMLSearchElements Is Nothing Then Exit Function
    #If 0 Then
    PutInClipboard objXMLSearchElements.xml
    OutRge.Worksheet.Activate
    DoEvents
    OutRge(1, 1).Select
    DoEvents
    OutRge.Worksheet.Paste
    DoEvents
    SetRgeFormat Selection
    tmpi = Selection.Rows.Count - 1
    'If m_kind = 1 Then
    '    tmpi = 3
    'Else
    '    tmpi = 2
    'End If
    #Else
        OutRge.Worksheet.Activate
        Set r = OutputXmlTableToRge(OutRge(1, 1), objXMLSearchElements)
        SetRgeFormat r
        tmpi = r.Rows.Count
        tmpj = r.Columns.Count
        tmpi = tmpi - 1
    #End If
    Call SetRangeBorder(OutRge(1, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(2, 1), OutRge(tmpi, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(OutRge(1, 2), OutRge(1, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(2, 2), OutRge(tmpi, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(tmpi + 1, 1), OutRge(tmpi + 1, 1)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    Call SetRangeBorder(Range(OutRge(tmpi + 1, 2), OutRge(tmpi + 1, 3)), xlThin, xlThin, xlThin, xlThin, xlHairline, xlNone)
    'outRge(1, 2) = m_varVar1(1, 1)
    'outRge(1, 3) = m_varVar2(1, 1)
    OutRge(2, 1) = "|fffd|@" & OutRge(2, 1)
    OutRge(3, 1) = "|fffd|@" & OutRge(3, 1)
    OutRge(4, 1) = "|fffd|@" & OutRge(4, 1)
    Set OutputGroupInfo2 = OutRge(tmpi + 3, 1)
    On Error GoTo 0
    Exit Function
OutputGroupInfo_Error:
    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure OutputGroupInfo of Class Module ClsWsk"
    On Error GoTo 0
End Function

'---------------------------------------------------------------------------------------
' Procedure : ObjXML
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Property Set ObjXML(ByVal ObjXML As Object)
    Dim objSearchElement As Object
    On Error GoTo ObjXML_Error
    Set m_objXML = ObjXML
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"

    On Error GoTo 0
    Exit Property

ObjXML_Error:

    MsgBox "Error " & err.Number & " (" & err.Description & ") in procedure ObjXML of Class Module ClsPls"

    On Error GoTo 0
    Exit Property
End Property

Public Property Get XmlFile() As String
    XmlFile = m_sXmlFile
End Property

Public Property Let XmlFile(ByVal sXmlFile As String)
    m_sXmlFile = sXmlFile
End Property

Public Property Get XslFile() As String
    XslFile = m_sXslFile
End Property

Public Property Let XslFile(ByVal sXslFile As String)
    m_sXslFile = sXslFile
End Property

Public Sub OutputWsk(ByVal varRge1 As Range, ByVal varRge2 As Range, ByVal OutRge As Range)
    m_sFontName = OutRge.Font.name
    m_lFontSize = OutRge.Font.Size
    m_varVar1 = varRge1.Value
    m_varVar2 = varRge2.Value
    Set m_outRge = OutRge
    Set m_curRge = m_outRge
    m_curRge.Worksheet.Activate
    DoEvents
    Set m_curRge = OutputTitle()
    Set m_curRge = OutputGroupInfo()
    Set m_curRge = OutputStatics()
    ActiveWindow.DisplayGridlines = False
    m_outRge.Select
End Sub

Public Sub OutputWsk2(ByVal varRge1 As Range, ByVal varRge2 As Range, ByVal OutRge As Range)
    m_sFontName = OutRge.Font.name
    m_lFontSize = OutRge.Font.Size
    m_varVar1 = varRge1.Value
    m_varVar2 = varRge2.Value
    Set m_outRge = OutRge
    Set m_curRge = m_outRge
    m_curRge.Worksheet.Activate
    DoEvents
    Set m_curRge = OutputTitle()
    Set m_curRge = OutputGroupInfo2()
    Set m_curRge = OutputStatics2()
    ActiveWindow.DisplayGridlines = False
    m_outRge.Select
End Sub

'---------------------------------------------------------------------------------------
' Procedure : Initialize
' Purpose   :
'---------------------------------------------------------------------------------------
'
Public Sub Initialize(ByVal XmlFile As String, ByVal XslFile As String)
    Dim xmlObj As Object, searchObj As Object
    On Error GoTo Initialize_Error
    m_sXmlFile = XmlFile
    m_sXslFile = XslFile
    Set m_objXML = Localize(m_sXmlFile, m_sXslFile)
    m_objXML.async = False
    m_objXML.setProperty "SelectionLanguage", "XPath"
    Set xmlObj = CreateXMLDom
    xmlObj.async = False
    xmlObj.setProperty "SelectionLanguage", "XPath"
    Call xmlObj.Load(m_sXmlFile)
    If xmlObj Is Nothing Then Exit Sub
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Kind")
    If Not searchObj Is Nothing Then
        m_kind = CLng(searchObj.text)
    End If
    Set xmlObj = Nothing
    On Error GoTo 0
    Exit Sub
Initialize_Error:
    Set xmlObj = Nothing
End Sub
Attribute VB_Name = "CommMdlA"
'=======================================================
' SSS_STAT Ver3.6 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2007.2.7 LSQ (mdf from other seihins)
'=======================================================
Option Explicit

Public Const GBKNAME_VBACM As String = "SSSVBACM.xla"
Public Const GBKNAME_VBA07 As String = "SSSVBA07.xla"
Public GVerNoXL As Integer

'2007.02.07 Copied from commMdl in SRKMAIN.xls
'07.2.7 mdf
Function getExcelVerNo() As Integer
    getExcelVerNo = CInt(Application.Run(GBKNAME_VBACM & "!getExcelVerNo"))
End Function
'
'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub Comm_setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Call Application.Run(GBKNAME_VBACM & "!setChartPosSize", _
                         chartObj, outGrp, rowNum, colNum)
End Sub
'
'cut data linkage
'
'07.1.31 LSQ
Sub Comm_CutDataLink(ByVal bkObj As Workbook, ByVal bkName As String)
    Dim verno As Integer
    verno = getExcelVerNo()
    
    If verno >= 12 Then
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub
'
Sub Comm_SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Call Application.Run(GBKNAME_VBACM & "!SetDataLabel", _
                         ser, namerge, fontsize, charcnt)
End Sub

Function Comm_SetDict(ByVal strpara As String) As Object
    Set Comm_SetDict = Application.Run(GBKNAME_VBACM & "!SetDict", strpara)
End Function

Function Comm_GetTmplGrp(ByVal OutRge As Range, ByVal strBkName As String, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    Set Comm_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", OutRge, _
                     strBkName, strShtName, strGrpName)
End Function

Function Comm_toXlRCstr(inputFormula As String) As String
    Comm_toXlRCstr = Application.Run(GBKNAME_VBACM & "!toXlRCstr", inputFormula)
End Function

Function Comm_toXlA1str(inputFormula As String) As String
    Comm_toXlA1str = Application.Run(GBKNAME_VBACM & "!toXlA1str", inputFormula)
End Function

'2007.03.21 modified
'added an argument of "DecimalPlaces"
'-1 for automatic calculation
Sub Comm_AdjustMinMax(ByRef minV As Double, ByRef maxV As Double, Optional ByVal MaxDecimalNum As Integer = -1)
    '2007.03.21 mdf for Application.Run doesn't set references by return
    'Call Application.Run(GBKNAME_VBACM & "!adjustMinMax", minV, maxV)
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = Application.Run(GBKNAME_VBACM & "!decNumKeta", (maxV - minV))
    If MaxDecimalNum >= 0 And keta > MaxDecimalNum Then
        keta = MaxDecimalNum
    End If
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Run(GBKNAME_VBACM & "!vbaRound", max, keta, 1)
    minV = Application.Run(GBKNAME_VBACM & "!vbaRound", min, keta, 2)
End Sub

Sub Comm_MatchWorkbookFont()
    Call Application.Run(GBKNAME_VBACM & "!MatchWorkbookFont")
End Sub

Sub Comm_SetTicks(ByVal cht As Chart, ByVal strTicks As String)
    Call Application.Run(GBKNAME_VBACM & "!SetTicks", cht, strTicks)
End Sub

Sub Comm_DrawCEGGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawCEGGrp", strWrkSht, strGrpOut, strGrpData, "GrpType=1&" & strpara)
End Sub

Sub Comm_DrawObiGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawObiGrp", strWrkSht, strGrpOut, strGrpData, strpara)
End Sub

'11.5.27 (11.5.30) LSQ add
Private Function getVerCommVBA(ByVal xlaFName As String) As Long
    Dim rgeVer As Range
    Set rgeVer = Application.Run(xlaFName & "!getRgeObj", 2)
    
    If Not (rgeVer Is Nothing) Then
        getVerCommVBA = val(Mid(rgeVer, 2)) 'V20100601
    Else
        getVerCommVBA = 0 'oldest version
    End If
    
End Function
'
'Open common used book (SSSVBACM, SSSVBA07)
'   1. Check if the book exist
'   2. Open the latest version of the book, Close the old version
'
'11.5.27 (11.5.30) LSQ mdf
'
Function WorkBookOpen_SetOpenNum(ByVal xlaFName As String) As Workbook
    Dim bkObj As Workbook
    Dim rgeCnt As Range, bUseOld As Boolean
    Dim cnt As Long, verOld As Long, verNew As Long, pathOld As String, pathNew As String
    
    If isBookExist(xlaFName) Then   'common book already opend
        Set bkObj = Workbooks(xlaFName)
        pathOld = bkObj.Path
        pathNew = ThisWorkbook.Path
        
        If UCase(pathOld) <> UCase(pathNew) Then 'not the same file
            Set rgeCnt = Application.Run(xlaFName & "!getRgeObj", 1)
            cnt = val(rgeCnt): If cnt < 0 Then cnt = 0
            verOld = getVerCommVBA(xlaFName)
            
            Call WorkBookClose(xlaFName)    'close the old one
            Set bkObj = WorkBookOpen(xlaFName) 'open another one
            
            If (bkObj Is Nothing) Then
                Set bkObj = WorkBookOpen(xlaFName, True, pathOld)
            Else
                verNew = getVerCommVBA(xlaFName) 'new bkObj
                If verNew < verOld Then
                    Call WorkBookClose(xlaFName)    'close the new opened
                    Set bkObj = WorkBookOpen(xlaFName, True, pathOld)
                End If
            End If
            
            '
            Set rgeCnt = Application.Run(xlaFName & "!getRgeObj", 1)
            rgeCnt = cnt
        End If
    Else
        Set bkObj = WorkBookOpen(xlaFName)
    End If
    
    If Not (bkObj Is Nothing) Then
        Application.Run (xlaFName & "!CallNum_AddOne")
    End If
    
    Set WorkBookOpen_SetOpenNum = bkObj
End Function


'2007.02.07 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Sub WorkBookClose_OnOpenNum(ByVal xlaFName As String)
    Dim cnt As Integer
    cnt = Application.Run(xlaFName & "!CallNum_DecOne")
    If cnt <= 0 Then
        Call WorkBookClose(xlaFName)
    End If
End Sub

Function MatchWorkbookFont()
    On Error Resume Next
    
    Selection.Font.name = ActiveWorkbook.Styles("Normal").Font.name
    Selection.Font.Size = ActiveWorkbook.Styles("Normal").Font.Size
    Selection.AutoScaleFont = True
    
    On Error GoTo 0
End Function

Function RangeToStr(ByVal rge As Range) As String
    Dim rgebk As Workbook
    Dim rgesht As Worksheet
    RangeToStr = vbNullString
    If rge Is Nothing Then Exit Function
    Set rgesht = rge.Worksheet
    Set rgebk = rgesht.Parent
    RangeToStr = "'[" & rgebk.name & "]" & rgesht.name & "'!" & rge.Address
End Function

Sub Comm_AddSheet(ByVal strSheetName As String)
    Dim lastSht As Worksheet
    On Error Resume Next
    Set lastSht = ActiveWorkbook.Worksheets(strSheetName)
    If err.Number = 0 Then
        lastSht.Activate
        On Error GoTo 0
        Exit Sub
    End If
    On Error GoTo err_handler
    Set lastSht = ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)
    ActiveWorkbook.Worksheets.Add(After:=lastSht).name = strSheetName
exit_sub:
    Exit Sub
err_handler:
    ActiveWorkbook.Worksheets(strSheetName).Activate
    Resume exit_sub
End Sub
'=== EOF ===
Attribute VB_Name = "Date_check"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Check|fffd|p
'
' 2010.11 LSQ
'=======================================================
Option Private Module
Option Explicit

Type CHECK_INFO
    EndDate As String
    bYearContract As Boolean
End Type

Public chkInfo As CHECK_INFO   '15.10.13 LSQ add
'
#If VBA7 Then
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If
Private SErrMsgStr As String

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(RSUIMUSE.INI)|fffd||fffd||fffd||fffd|
'* |fffd||fffd||fffd|t|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|
'* EXCEL|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
'* 06.2.15 LSQ mdf : "sub" to "function"
'* return TRUE OK else ERROR
'******************************************
Function user_date_chk() As Boolean
    Dim sIniStr As String, sDate As String, sMsg As String
    Dim vDate1, vDate2
    Dim iRet As Integer, nDay As Long
    Dim sTemp As String
    Dim bYContract As Boolean
    
    'init
    SErrMsgStr = ""
    user_date_chk = False
    sTemp = Chr(13)
    
    sIniStr = getTaikouIniStr(bYContract)     'RSUIMUSE.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    If SErrMsgStr <> "" Then
        MsgBox SErrMsgStr
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        MsgBox MSG_ERR_RSUINIa
        Exit Function
    End If
    
    'iRet = StringEncode(sDate, sTemp2)
    
    '15.10.13 add -- bgn --
    chkInfo.EndDate = sDate
    chkInfo.bYearContract = bYContract
    'end --
    
    'sDate = "1996/10/27"
    If (sDate <> "0000/00/00") Then
        If (IsDate(sDate) = False) Then
            MsgBox MSG_ERR_RSUINIa
            Exit Function
        End If
    
        vDate1 = CDate(sDate)
        vDate2 = Date
        If (vDate1 < vDate2) Then
            If bYContract = True Then
                sMsg = "|fffd|g|fffd|p|fffd||fffd||fffd||502||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B(|fffd|g|fffd|p|fffd||fffd||fffd||fffd|" & sDate & ")" & sTemp & _
                       "|fffd|p|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||242||34d||10c|_|fffd||fffd||315|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|" & sTemp & _
                       "|fffd|_|fffd||fffd||68d||5c2||242||82||fffd||fffd||102||fffd| support@esumi.co.jp |fffd||fffd||fffd||702||142||fffd||fffd||fffd||42b42||fffd||fffd||fffd||fffd||fffd||fffd|B"
            Else
                sMsg = GName_Prog & "|fffd||30e||fffd||fffd|p|fffd||fffd||fffd||fffd|[" & sDate & "]|fffd||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & sTemp & "|fffd||fffd||fffd||fffd||34f||fffd||fffd|i|fffd||142||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            End If
            
            MsgBox sMsg
            Exit Function
        Else
            user_date_chk = True
            
            If bYContract = True And vDate1 <= vDate2 + 30 Then
                nDay = vDate1 - vDate2
                sMsg = "|fffd|g|fffd|p|fffd||fffd||fffd||50f|I|fffd||fffd||fffd||702||142||fffd||fffd||fffd|" & nDay & "|fffd||fffd||fffd||142||fffd||fffd|(|fffd|g|fffd|p|fffd||fffd||fffd||fffd|" & sDate & ")" & sTemp & _
                       "|fffd|p|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||242||34d||10c|_|fffd||fffd||315|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|" & sTemp & _
                       "|fffd|_|fffd||fffd||68d||5c2||242||82||fffd||fffd||102||fffd| support@esumi.co.jp |fffd||fffd||fffd||702||142||fffd||fffd||fffd||42b42||fffd||fffd||fffd||fffd||fffd||fffd|B"
                MsgBox sMsg
                Exit Function
            End If
        End If
    End If
    
    'return error free
    user_date_chk = True

End Function

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(RSUIMUSE.INI)|fffd||fffd||fffd||fffd|
'* |fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'* 2015.10.13 LSQ mdf : add yearly contract (refer to AHP V2)
'******************************************
Function getTaikouIniStr(Optional ByRef bYrContract As Boolean) As String
    Dim sIniFileName As String, tmpStr As String
    Dim sGetBuffer As String
    Dim iRet As Integer
    Dim sTemp As String
    
    sGetBuffer$ = String$(300, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|

    sGetBuffer$ = getPathName() & "\"   'old = gsPrgPath
    sIniFileName$ = sGetBuffer$ & "RSUIMUSE.INI"
    iRet = 0
    
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "MyDate", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName$)
    sTemp = Left$(sGetBuffer$, InStr(sGetBuffer$, Chr(0)) - 1)
    If (sTemp = "0000000000") Then
        SErrMsgStr = MSG_ERR_RSUINIb
        Exit Function   'End
    End If
    getTaikouIniStr = sTemp
    
    '2015.10.13 LSQ add
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "YearContract", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName)
    
    'if value = ON / TRUE / YES --> same thing as true
    bYrContract = False 'init
    tmpStr = Left$(sGetBuffer$, 2)
    If UCase(tmpStr) = "ON" Then bYrContract = True
    
    tmpStr = Left$(sGetBuffer$, 3)
    If UCase(tmpStr) = "YES" Then bYrContract = True
    
    tmpStr = Left$(sGetBuffer$, 4)
    If UCase(tmpStr) = "TRUE" Then bYrContract = True
    '=== end ===
    
End Function

Function StringDecode(ByVal sInpStr As String, sOutStr As String) As Integer
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|sOutStr|fffd||255||502||fffd|
    Dim iLengs, iCnt1, iMojiCode0, iMojiCode1, iMojiCode2 As Integer
    Dim vKanjiCode  'As Integer
    Dim iKanjiFlg As Integer
    Dim sMoji, sTempStr As String
    Dim iKanji As Integer
    Dim dTemp1 As Double
    On Error GoTo ErrorHandler:
    sOutStr = ""
    iLengs = Len(sInpStr)
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    iKanjiFlg = 0   '|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    For iCnt1 = 1 To iLengs Step 2
        sMoji = Mid$(sInpStr, iCnt1, 1)         '|fffd|P|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode1 = Asc(sMoji) - &H40
        sMoji = Mid$(sInpStr, iCnt1 + 1, 1)
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode2 = Asc(sMoji) - &H40
        iMojiCode0 = iMojiCode1 * 16 + iMojiCode2
        
        '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|P|fffd|o|fffd|C|fffd|g|fffd||314||fffd||fffd||fffd|
        If (iMojiCode0 >= &H81 And iMojiCode0 <= &H9F) Or (iMojiCode0 >= &HE0 And iMojiCode0 <= &HFC) Then
            If iKanjiFlg = 0 Then   '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|P|fffd|o|fffd|C|fffd|g|fffd||fffd|
                iKanjiFlg = 1
                vKanjiCode = iMojiCode0 * 256
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        Else
            If iKanjiFlg = 0 Then   'ASC|fffd|R|fffd|[|fffd|h
                sOutStr = sOutStr + Chr$(iMojiCode0)
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        End If
    Next iCnt1
    StringDecode = True
    Exit Function
ErrorHandler:
    StringDecode = False
    Exit Function
End Function

Function StringEncode(ByVal sInpStr As String, sOutStr As String) As Integer
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sOutStr|fffd||255||502||fffd|
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iLengs, iCnt1, iMojiCode As Integer
    Dim sMoji, sTempStr As String
    
    sOutStr = ""
    sTempStr = ""
    iLengs = Len(sInpStr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sInpStr, iCnt1, 1)
        iMojiCode = Asc(sMoji)
        sTempStr = sTempStr + Hex$(iMojiCode)
    Next iCnt1
  
    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    iLengs = Len(sTempStr)
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sTempStr, iCnt1, 1)    '|fffd|l|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        Select Case sMoji
            Case "A"
                iMojiCode = 10 + &H40
            Case "B"
                iMojiCode = 11 + &H40
            Case "C"
                iMojiCode = 12 + &H40
            Case "D"
                iMojiCode = 13 + &H40
            Case "E"
                iMojiCode = 14 + &H40
            Case "F"
                iMojiCode = 15 + &H40
            Case Else   '0-9|fffd||310||fffd||fffd||fffd||fffd||30e||fffd|
                iMojiCode = val(sMoji) + &H40       '|fffd|o|fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|40|fffd||fffd||fffd||fffd|
        End Select
        sOutStr = sOutStr + Chr$(iMojiCode) '|fffd|X|fffd||243|L|fffd||fffd||fffd||fffd||fffd|N|fffd|^|fffd||255||3ca||fffd|
    Next iCnt1

End Function

'=== EOF ===
Attribute VB_Name = "ESUMI_REG_CHK"
Option Explicit
Option Base 1
'|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||310||752||fffd|
'=========================================================================
' Windows 10 |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||693||fffd||fffd||389||fffd||fffd||fffd| 2019/07/05
'=========================================================================
Private Const ciPRG_REG_CNT As Integer = 11                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)

Private Const csPRG_REG_01 As String = "Yosoku\V3"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_01 As String = "EXCEL|fffd|\|fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_01 As String = "YSK3_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_02 As String = "Toukei\V7"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_02 As String = "EXCEL|fffd||fffd||fffd|v"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_02 As String = "TOU7_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_03 As String = "Tahen\V7"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_03 As String = "EXCEL|fffd||fffd||fffd||3d7||289||fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_03 As String = "TAH7_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_04 As String = "Suryo\V4"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_04 As String = "EXCEL|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_04 As String = "SRK4_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

'Private Const csPRG_REG_05 As String = "Conjoint\V2"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_REG_05 As String = "Conjoint\V3"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_05 As String = "EXCEL|fffd|R|fffd||fffd||fffd|W|fffd||fffd||fffd|C|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
'Private Const csINI_NAM_05 As String = "CNJ2_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|
Private Const csINI_NAM_05 As String = "CNJ3_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

'Private Const csPRG_REG_06 As String = "Ahp\V1"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_REG_06 As String = "Ahp\V2"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_06 As String = "EXCEL_AHP"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
'Private Const csINI_NAM_06 As String = "AHP1_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|
Private Const csINI_NAM_06 As String = "AHP2_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|


Private Const csPRG_REG_07 As String = "Eqs\V2"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_07 As String = "EXCEL|fffd||fffd||fffd||fffd||fffd|U|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_07 As String = "EQS2_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_08 As String = "Keiji\V1"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_08 As String = "EXCEL|fffd|o|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_08 As String = "KIJ1_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_09 As String = "Lga\V1"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_09 As String = "EXCEL|fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||fffd||fffd||743|N|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
'Private Const csINI_NAM_09 As String = "CNJ2_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|
Private Const csINI_NAM_09 As String = "LGA1_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

Private Const csPRG_REG_10 As String = "Kks\V1"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)
Private Const csPRG_NAM_10 As String = "EXCEL|fffd||fffd||fffd|\|fffd|]|fffd||fffd|"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_10 As String = "KKS1_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

'Private Const csPRG_REG_11 As String = "Taikou\V5"                '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH2(|fffd||fffd||fffd|i|fffd||fffd||fffd||fffd|)

'Below = New, 2018.7.11
Private Const csPRG_REG_11 As String = "Taikou\V55"
Private Const csPRG_NAM_11 As String = "EXCEL|fffd|A|fffd||fffd||fffd|P|fffd|[|fffd|g|fffd||fffd||fffd|}"           '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||943b||fffd|i|fffd||fffd|
Private Const csINI_NAM_11 As String = "TAI_Reg.ini"           '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|

'-------------------------------------------------------------------------
Private Const csREGPATH1 As String = "SOFTWARE\Esumi\"              '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH1(32bitOS|fffd||30e||fffd|)
Private Const csREGPATH2 As String = "SOFTWARE\Wow6432Node\Esumi\"  '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH1(64bitOS|fffd||30e||fffd|)
Private Const csREGPATH3 As String = "SOFTWARE\Esumi\"              '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH1(64bitOS|fffd||30e||fffd|)
Private Const csREGPATH4 As String = "SOFTWARE\Wow6432Node\Esumi\"  '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||253|o|fffd|^|fffd||fffd||fffd||fffd||90cc||fffd|W|fffd|X|fffd|g|fffd||fffd|PATH1(64bitOS|fffd||30e||fffd|)
Private Const csUN_CHK_FILENAME As String = "debugchk.txt"          '|fffd||fffd||fffd||303||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||193||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||251||fffd||fffd||fffd|
                                                                    '|fffd||fffd||fffd||fffd||383|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||202||fffd|
'=========================================================================
'2019|fffd|N7|fffd||fffd||fffd||30f|C|fffd||fffd||fffd|_
'=========================================================================
'Windows10|fffd||303|Z|fffd|L|fffd||fffd||fffd||fffd||fffd|e|fffd|B|fffd||fffd||fffd||fffd||fffd||251||389||fffd||fffd||fffd||fffd||90bd||fffd||7c3|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd|B
'|fffd||fffd||fffd|Z|fffd|L|fffd||fffd||fffd||fffd||fffd|e|fffd|B|fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||fffd||fffd|_
'----------------------
'|fffd||fffd||fffd||fffd||fffd|_(1)|fffd|F
'----------------------
'  HKEY_LOCAL_MACHINE|fffd||24f||fffd||fffd||fffd||fffd||fffd||fffd||42f83|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||42a81|A|fffd||10b|N|fffd||fffd||fffd||303|^|fffd|C|fffd|~|fffd||fffd||fffd|O|fffd||fffd|
'  HKEY_CURRENT_USER|fffd||248||693||fffd||fffd||fffd||fffd||fffd|B
'----------------------
'|fffd||fffd||fffd||38d||fffd|(1):
'----------------------
'  HKEY_LOCAL_MACHINE|fffd|^HKEY_CURRENT_USER|fffd||317||fffd||fffd||fffd||fffd||243|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||24d|s|fffd||fffd||fffd|B
'----------------------
'|fffd||fffd||fffd||fffd||fffd|_(2)|fffd|F
'----------------------
'  |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd|B
'----------------------
'|fffd||fffd||fffd||38d||fffd|(2):
'----------------------
'  |fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||241|A|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||241|u|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|e|fffd||6d1||fffd||fffd|pINI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd|v|fffd||182||fffd||fffd||fffd|
'  |fffd||6d1||fffd||fffd||fffd||fffd||fffd||60a4||fffd||24b|@|fffd|\|fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd|B
'  |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||42a8c||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||a347||fffd||242||342||fffd||fffd||303|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd|
'  |fffd|N|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||257||fffd||fffd|p|fffd||fffd||fffd||fffd||60a4||fffd||243|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'=========================================================================
'
'
'----------------------------
Private Const csESUMI As String = "ESUMI"
Private Const csITEMID As String = "SystemID"
Private Const csITEMNAME As String = "ProName"
Private Const csITEMPW As String = "PassWord"
Private Const ciREGMODE As Integer = 3
'----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd|-----------
Private Const ciREGMODE2 As Integer = 2  'HKEY_CURRENT_USER
'----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd|-----------


Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_USERS = &H80000003
Private Const REG_SZ = 1
Private Const ERROR_SUCCESS = 0&


' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'

Private Const STANDARD_RIGHTS_ALL = &H1F0000
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const SYNCHRONIZE = &H100000

Private Const READ_CONTROL = &H20000
Private Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Private Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Private Const KEY_EXECUTE = (KEY_READ)

#If VBA7 Then
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As LongPtr) As Long
    Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String) As Long
    Private Declare PtrSafe Function OSRegSetValueEx Lib "advapi32" Alias "RegSetValueExA" (ByVal hkey As LongPtr, ByVal lpszValueName As String, ByVal dwReserved As Long, ByVal fdwType As Long, lpbData As Any, ByVal cbData As Long) As Long
    Private Declare PtrSafe Function OSRegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpszValueName As String, ByVal dwReserved As Long, lpdwType As Long, lpbData As Any, cbData As Long) As Long
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long

#Else
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
    Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
    Private Declare Function OSRegSetValueEx Lib "advapi32" Alias "RegSetValueExA" (ByVal hkey As Long, ByVal lpszValueName As String, ByVal dwReserved As Long, ByVal fdwType As Long, lpbData As Any, ByVal cbData As Long) As Long
    Private Declare Function OSRegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpszValueName As String, ByVal dwReserved As Long, lpdwType As Long, lpbData As Any, cbData As Long) As Long
    Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

Function iSss_Inst_Chk(iPrgNo As Integer, ByRef sPrg_Name As String) As Integer
'******************************
'|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||242||fffd||fffd|
'|fffd||fffd||fffd|K|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||90a9||fffd||12c82||5c2||702||fffd||fffd|B
' --------------------------------------
'|fffd||752||fffd|l|fffd|@iPrgNo : (1|fffd|`11) |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||242||fffd||fffd||642||202||fffd|
' iPrgNo : 01 "EXCEL|fffd|\|fffd||fffd|"
' iPrgNo : 02 "EXCEL|fffd||fffd||fffd|v"
' iPrgNo : 03 "EXCEL|fffd||fffd||fffd||3d7||289||fffd||fffd|"
' iPrgNo : 04 "EXCEL|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_"
' iPrgNo : 05 "EXCEL|fffd|R|fffd||fffd||fffd|W|fffd||fffd||fffd|C|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd|"
' iPrgNo : 06 "EXCEL_AHP"
' iPrgNo : 07 "EXCEL|fffd||fffd||fffd||fffd||fffd|U|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|"
' iPrgNo : 08 "EXCEL|fffd|o|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|"
' iPrgNo : 09 "EXCEL|fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||fffd||fffd||743|N|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|"
' iPrgNo : 10 "EXCEL|fffd||fffd||fffd|\|fffd|]|fffd||fffd|"
' iPrgNo : 11 "EXCEL|fffd|A|fffd||fffd||fffd|P|fffd|[|fffd|g|fffd||fffd||fffd|}"
' --------------------------------------
'|fffd||752||fffd|l|fffd|@sPrg_Name : |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd|G|fffd||fffd||fffd|A
' --------------------------------------
'|fffd||7c2||fffd|l 1:|fffd||fffd||fffd|K|fffd||243|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|
'         sPRG_Name : |fffd||fffd||fffd|K|fffd||243|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||182||fffd||fffd||fffd||fffd|i|fffd||fffd|
' --------------------------------------
'       0:|fffd||fffd||fffd|K|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||202||fffd|
'         sPRG_Name : ""
' --------------------------------------
'      -1:|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|G|fffd||fffd||fffd|[(|fffd||38f||6c3|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|)
'         sPRG_Name : ""
' --------------------------------------
' |fffd||fffd||fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||193||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd| "debugchk.txt"|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||fffd|
'|fffd|@|fffd|@|fffd||fffd||fffd||303|`|fffd|F|fffd|b|fffd|N|fffd||34e||fffd||fffd|s|fffd||fffd||fffd||202||fffd|
'******************************
    Dim iRet As Integer
    Dim iRet2 As Integer
    Dim sId As String
    Dim sPassWord As String
    Dim sName As String
    Dim sApRegName As String
    Dim sTemp1 As String
    Dim sLF As String
    Dim sPrgRegPathTbl As Variant   '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||243||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|PATH|fffd|e|fffd|[|fffd|u|fffd||fffd|
    Dim sPrgNameTbl As Variant      '|fffd||fffd||fffd|i|fffd||fffd||fffd|e|fffd|[|fffd|u|fffd||fffd|
    Dim sRegIniFnameTbl As Variant  '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||42a92|u|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd|e|fffd|[|fffd|u|fffd||fffd|
    Dim sRegIniName As String       '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|INI|327||fffd||fffd||4b2|
 
    '----2019/07/02 |fffd||1c9||fffd|----
    ' windows 10|fffd||303|Z|fffd|L|fffd||fffd||fffd||fffd||fffd|e|fffd|B|fffd||752||fffd||3cd|X|fffd||302||fffd||fffd||7c1|Aadministrator|fffd||142||341|A|fffd||fffd||fffd|i|fffd||303|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd|m|fffd|F|fffd||fffd|
    '|fffd||fffd||fffd||202||fffd||fffd||202||90bd||fffd||7cb|@|fffd|\|fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd|B
    '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd|administrator|fffd||303|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||24d||c42c||fffd||fffd||fffd||a0bd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|
    '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd|m|fffd|F|fffd||fffd||fffd|s|fffd||fffd||fffd|B
    Dim oWsh As Object
    Dim sTempDoc As String
    Dim sMyDocPath As String
    Dim sINI_FILE_NAME As String '|fffd|}|fffd|C|fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd||183|t|fffd||fffd||fffd|p|fffd|X

    '----2019/07/02 |fffd||1c9||fffd|----

    '----2019/07/02 ----|fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|----
    Set oWsh = CreateObject("WScript.Shell")
    sTempDoc = oWsh.specialfolders("MyDocuments")
    If (sTempDoc <> "") Then
        sMyDocPath = sTempDoc
    Else
        sMyDocPath = ""
    End If
    '----2019/07/02 ----|fffd|h|fffd|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd||fffd||64fe|----


  '---------------
    sId = ""
    sPassWord = ""
    sName = ""
    sLF = Chr$(10)
    
    sPrgRegPathTbl = Array(csPRG_REG_01, csPRG_REG_02, csPRG_REG_03, csPRG_REG_04, csPRG_REG_05, _
                            csPRG_REG_06, csPRG_REG_07, csPRG_REG_08, csPRG_REG_09, csPRG_REG_10, csPRG_REG_11)
 
    sPrgNameTbl = Array(csPRG_NAM_01, csPRG_NAM_02, csPRG_NAM_03, csPRG_NAM_04, csPRG_NAM_05, _
                            csPRG_NAM_06, csPRG_NAM_07, csPRG_NAM_08, csPRG_NAM_09, csPRG_NAM_10, csPRG_NAM_11)

    '----2019/07/02 |fffd||fffd||fffd|i|fffd||fffd||fffd||182||fffd|ini|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||752||fffd|-----
    sRegIniFnameTbl = Array(csINI_NAM_01, csINI_NAM_02, csINI_NAM_03, csINI_NAM_04, csINI_NAM_05, _
                            csINI_NAM_06, csINI_NAM_07, csINI_NAM_08, csINI_NAM_09, csINI_NAM_10, csINI_NAM_11)
    '----2019/07/02 |fffd||fffd||fffd|i|fffd||fffd||fffd||182||fffd|ini|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||752||fffd|-----
                       
    If ((iPrgNo > ciPRG_REG_CNT) Or (iPrgNo < 1)) Then '|fffd|w|fffd||fffd|l|fffd||20a|O|fffd||310||752||fffd||30e||fffd||fffd||343|G|fffd||fffd||fffd|[|fffd|I|fffd||fffd|
        iSss_Inst_Chk = -1
        sPrg_Name = ""
    End If
    
    
                       
    sApRegName = sPrgRegPathTbl(iPrgNo)  'iprgNo|fffd||14e|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|v|fffd||fffd|
    sRegIniName = sRegIniFnameTbl(iPrgNo)  '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||42a8f||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|INI|fffd|t|fffd|@|fffd|C|fffd||fffd|
 

    sTemp1 = Right(sMyDocPath, 1)
    If (sTemp1 = "\") Then
        sINI_FILE_NAME = sMyDocPath & sRegIniName
    Else
        sINI_FILE_NAME = sMyDocPath & "\" & sRegIniName
    End If


       
    '---------------
    '"debugchk.txt"|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||939e||fffd||343|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||202||fffd|
    sTemp1 = CurDir() & "\" & csUN_CHK_FILENAME
    iRet = iFileCheck(sTemp1)
    If (iRet = 1) Then
        iSss_Inst_Chk = 1
        sPrg_Name = sPrgNameTbl(iPrgNo)
        Exit Function
    End If
    
    '---------------
    '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N
    '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|o|fffd|^|fffd|f|fffd|[|fffd|^|fffd||1cd||fffd||fffd||fffd|
    iRet = iGet_Reg_ini2(sApRegName, sId, sPassWord, sName)

    If (iRet <> 1) Then
       iRet = iGet_RegDat_ini(sINI_FILE_NAME, sId, sPassWord, sName)
    End If
    
    If (sId = "") Then
    '|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||202||fffd||fffd||182||fffd|
        sTemp1 = "|fffd||fffd||fffd||30a||8b||fffd||fffd||142||341|u" & sPrgNameTbl(iPrgNo) & "|fffd|v|fffd||fffd||fffd||fffd||fffd|s|fffd||142||fffd||fffd||702||fffd||fffd||fffd|B" & sLF & sLF & _
                 "|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||242||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||24d||113|x|fffd||fffd||fffd|s|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
        MsgBox sTemp1, vbCritical + vbOKOnly, sPrgNameTbl(iPrgNo)
        iSss_Inst_Chk = 0
        sPrg_Name = ""
    Else
    '|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iSss_Inst_Chk = 1
        sPrg_Name = sPrgNameTbl(iPrgNo)
    End If
    
End Function



Private Function iGet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, ByRef sRegItemStr As String) As Integer
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||455||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|6bc||7bd||fffd||603||fffd||fffd|[|fffd|h|fffd||fffd||fffd||642||202||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim Ret As Long
    Dim KeyValueLength As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    Select Case iRegMode
        Case 1
            Ret = RegOpenKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 2
            Ret = RegOpenKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 3
            Ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 4
            Ret = RegOpenKeyEx(HKEY_USERS, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case Else
            sRegItemStr = ""
            iGet_reg_string = -1
            Exit Function
    End Select
    
    If Ret <> 0 Then
        sRegItemStr = ""
        iGet_reg_string = -2
        Exit Function
    End If

    
    sKeyTemp = sRegItem '|fffd|n|fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    bRet = RegQueryStringValue(keyhandle, sKeyTemp, Value)
    
    If bRet = False Then
        Ret = RegCloseKey(keyhandle)
        sRegItemStr = ""
        iGet_reg_string = -3
        Exit Function
    End If

    Ret = RegCloseKey(keyhandle)
    'Value = Trim(Left(KeyValue, KeyValueLength))
    iGet_reg_string = 1
    sRegItemStr = Value
End Function

' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd|:  16 |fffd||7af||102||30f||a347||fffd|AstrValueName |fffd||fffd| "" |fffd||142||202||fffd||fffd||fffd||382||202||fffd||702||fffd||fffd||fffd|B
' |fffd||fffd|: (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd| |fffd||fffd||fffd||782||30c||74a||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||34e|c|fffd||fffd||fffd||fffd||702||fffd|)
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'
#If VBA7 Then
Private Function RegQueryStringValue(ByVal hkey As LongPtr, ByVal strValueName As String, strData As String) As Boolean
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = OSRegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = OSRegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#Else
Private Function RegQueryStringValue(ByVal hkey As Long, ByVal strValueName As String, strData As String) As Boolean
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = OSRegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = OSRegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#End If

'-----------------------------------------------------------
' FUNCTION: StripTerminator
'
' |fffd||fffd||fffd||fffd||fffd||fffd||316||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B
' |fffd||fffd||fffd| Windows API |fffd||102||44f|o|fffd||fffd||fffd||155||502||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f||6c2||24e|g|fffd|p|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd||fffd||348||fffd||fffd||fffd|: [strString] - |fffd|I|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------------
'
Private Function StripTerminator(ByVal strString As String) As String
    Dim intZeroPos As Integer

    intZeroPos = InStrT(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

Private Function InStrT(arg1, arg2, Optional arg3, Optional arg4)
    If IsMissing(arg4) Then
        If IsMissing(arg3) Then
            InStrT = InStr(1, UCase(arg1), UCase(arg2), 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    Else
        If arg4 = 0 Then
            InStrT = InStr(arg1, arg2, arg3, 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    End If
End Function




Private Function iGet_Reg_ini2(sRegPATH As String, ByRef sId As String, ByRef sPassWord As String, ByRef sName As String) As Integer
'--------------------------
'|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||311||fffd||fffd|}|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sID:         |fffd||7c2||fffd|l|fffd||303|A|fffd|h|fffd||fffd||fffd|X
'  sPassWord:   |fffd||7c2||fffd|l|fffd||303|A|fffd|h|fffd||fffd||fffd|X
'  sName:       |fffd||7c2||fffd|l|fffd||303|A|fffd|h|fffd||fffd||fffd|X
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sID:         |fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||303|V|fffd|X|fffd|e|fffd||fffd||fffd|h|fffd|c
'  sPassWord:   |fffd||7fd||730||fffd||fffd|
'  sName:       |fffd||fffd||fffd|i|fffd||fffd||fffd|i|fffd|W|fffd|v+|fffd||fffd||fffd||301|j
'  iGet_Reg_ini2 |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@ |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|w|fffd||80b3||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'--------------------------
    Dim iRet As Integer
    Dim sRegUserID As String        '|6bc||7bd||fffd||602||303||fffd||fffd|[|fffd|U|fffd|[ID
    Dim sRegUserPW As String        '|6bc||7bd||fffd||602||303||fffd||fffd|[|fffd|U|fffd|[|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h
    Dim sRegRroName As String       '|6bc||7bd||fffd||602||fffd||fffd||fffd||fffd||fffd||7b8||96||fffd|
    Dim sTemp1 As String
    Dim sREGPATH1 As String
    Dim sREGPATH2 As String
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd|-----------
    Dim sREGPATH3 As String
    Dim sREGPATH4 As String
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd|-----------
    
    sREGPATH1 = csREGPATH1 & sRegPATH
    sREGPATH2 = csREGPATH2 & sRegPATH
    sREGPATH3 = csREGPATH3 & sRegPATH
    sREGPATH4 = csREGPATH4 & sRegPATH
    
    '==================================
    '|fffd|G|fffd|X|fffd|~|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||43303|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|systemid|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '==================================

    iRet = iGet_reg_string(ciREGMODE, sREGPATH1, csITEMID, sRegUserID)
    If (iRet <> 1) Then
        '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTemp1 = sREGPATH1 & "\" & csITEMID
        iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegUserID)
        'If (iRet <> 1) Then
        '    GoTo ERR_END
        'End If
    End If

    '64bitOS|fffd||30f||a347||fffd||1c9||fffd||fffd||fffd|--------------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE, sREGPATH2, csITEMID, sRegUserID)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH2 & "\" & csITEMID
            iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegUserID)
        End If
    End If
    '----2019/06/06---|fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c3|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd|
    'If (iRet <> 1) Then
    '    GoTo ERR_END
    'End If
    '----2019/06/06---
    '64bitOS|fffd||30f||a347||fffd||1c9||fffd||fffd||fffd|--------------

    '64bitOS|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||693||fffd||fffd||fffd||30c||fffd||fffd||fffd|-----
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH3, csITEMID, sRegUserID)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH3 & "\" & csITEMID
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegUserID)
        End If
    End If
    
    '64-64 Part2
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH4, csITEMID, sRegUserID)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH4 & "\" & csITEMID
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegUserID)
        End If
    End If

    If (iRet <> 1) Then
        GoTo ERR_END
    End If
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------



    '==================================
    '|fffd|G|fffd|X|fffd|~|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||43303|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||7fd||730||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '==================================
    iRet = iGet_reg_string(ciREGMODE, sREGPATH1, csITEMPW, sRegUserPW)
    If (iRet <> 1) Then
        '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTemp1 = sREGPATH1 & "\" & csITEMPW
        iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegUserPW)
        'If (iRet <> 1) Then
        '    GoTo ERR_END
        'End If
    End If

    '64bitOS|fffd||30f||a347|--------------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE, sREGPATH2, csITEMPW, sRegUserPW)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH2 & "\" & csITEMPW
            iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegUserPW)
        End If
    End If
    '----2019/06/06---|fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c3|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd|
    'If (iRet <> 1) Then
    '    GoTo ERR_END
    'End If
    '----2019/06/06---|fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c3|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd|
    '64bitOS|fffd||30f||a347|--------------

    '64bitOS|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||693||fffd||fffd||fffd||30c||fffd||fffd||fffd|-----
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH3, csITEMPW, sRegUserPW)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH3 & "\" & csITEMPW
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegUserPW)
        End If
    End If

    '64-64
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH4, csITEMPW, sRegUserPW)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH4 & "\" & csITEMPW
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegUserPW)
        End If
    End If

    If (iRet <> 1) Then
        GoTo ERR_END
    End If
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------

    
    '==================================
    '|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||43303|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7b8||96||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '==================================
    iRet = iGet_reg_string(ciREGMODE, sREGPATH1, csITEMNAME, sRegRroName)
    If (iRet <> 1) Then
        '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTemp1 = sREGPATH1 & "\" & csITEMNAME
        iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegRroName)
        'If (iRet <> 1) Then
        '    GoTo ERR_END
        'End If
    End If

    '64bitOS|fffd||30f||a347|--------------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE, sREGPATH2, csITEMNAME, sRegRroName)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH2 & "\" & csITEMNAME
            iRet = iGet_reg_string(ciREGMODE, sTemp1, "", sRegRroName)
        End If
    End If
    '----2019/06/06---|fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c3|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd|
    'If (iRet <> 1) Then
    '    GoTo ERR_END
    'End If
    '----2019/06/06---|fffd||fffd||fffd||fffd||fffd||fffd||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c3|R|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd|
    '64bitOS|fffd||30f||a347|--------------
    
    '64bitOS|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||693||fffd||fffd||fffd||30c||fffd||fffd||fffd|-----
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH3, csITEMNAME, sRegRroName)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH3 & "\" & csITEMNAME
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegRroName)
        End If
    End If

    'Part264-64
    If (iRet <> 1) Then
        iRet = iGet_reg_string(ciREGMODE2, sREGPATH4, csITEMNAME, sRegRroName)
        If (iRet <> 1) Then
            '|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||255||282||313||1c2||74d||fffd||fffd||755||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTemp1 = sREGPATH4 & "\" & csITEMNAME
            iRet = iGet_reg_string(ciREGMODE2, sTemp1, "", sRegRroName)
        End If
    End If

    If (iRet <> 1) Then
        GoTo ERR_END
    End If
    '----2019/06/06---|fffd||fffd| |fffd||fffd||fffd|i|fffd|o|fffd|^|fffd||693||fffd||fffd||60cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||312||1c9||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-----------
    
    '|fffd|S|fffd||10e||64fe||fffd||142||fffd||fffd||fffd||fffd||a347||fffd|O|fffd||fffd||fffd|[|fffd|o|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||250||752||80b7||fffd||fffd|
    sId = sRegUserID
    sPassWord = sRegUserPW
    sName = sRegRroName
    iGet_Reg_ini2 = 1
    Exit Function
ERR_END:
    sId = ""
    sPassWord = ""
    sName = ""
    iGet_Reg_ini2 = -1
End Function


Private Function iFileCheck(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||fffd|
'   sFileName=|fffd||fffd||fffd||5c2||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|i|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd|j
'|fffd||7c2||fffd|l
'   |fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'   |fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    On Error Resume Next
    
    Dim iRet
    Dim vTemp As Variant
    
    iRet = 0
    vTemp = FileDateTime(sFileName)
    If (err <> 0) Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFileCheck = iRet
End Function

Function iGet_RegDat_ini(sFName As String, ByRef sId As String, ByRef sPassWord As String, ByRef sName As String) As Integer
'--------------------------
' ----2019/06/13 |fffd|V|fffd|K|fffd||c42c||fffd||590||fffd|----
'|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||250||752||fffd||142||fffd||fffd||202||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||90bd||fffd||fffd|
'|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
' |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||241|ucsREG_INI_FNAME|fffd|v|fffd||fffd||fffd||14b|L|fffd|^|fffd||fffd||fffd||fffd||fffd|INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||313||fffd||fffd|e|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
' csREG_INI_FNAME |fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||24e|g|fffd|p|fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sFName:INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|(|fffd|t|fffd||fffd||fffd|p|fffd|X)
'|fffd|@sID:         |fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||303|V|fffd|X|fffd|e|fffd||fffd||fffd|h|fffd|c
'  sPassWord:   |fffd||7fd||730||fffd||fffd|
'  sName:       |fffd||fffd||fffd|i|fffd||fffd||fffd|i|fffd|W|fffd|v+|fffd||fffd||fffd||301|j
'|fffd||7c2||fffd|l|fffd|F
'  iGet_RegDat_ini |fffd||1c2||74d||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'                  |fffd||1c2||74d||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1
'--------------------------

    Dim sINI_FILE_NAME As String    'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd|(|fffd|t|fffd||fffd||fffd|p|fffd|X)
    '----2019/06/07 |fffd||fffd|--HKEY_CURRENT_USER |fffd||242||fffd||fffd||1c9||fffd||fffd||fffd||fffd||90bd||fffd||7d2||1c9||fffd|-----
    Dim iRet1 As Integer
    Dim iRet2 As Integer
    Dim iRet3 As Integer
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim sTemp3 As String
    
     
    sINI_FILE_NAME = sFName '|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||64fe|
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    sId = ""
    sPassWord = ""
    sName = ""

    'sINI_FILE_NAME = gsMyDocPath & csREG_INI_FNAME
    '|fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||fffd|INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||c42c|
'MsgBox "GetMyDocPath=" & sINI_FILE_NAME
    
    'ITEM |fffd||fffd||fffd|L|fffd|^|fffd||313||1c2||74f|o|fffd||fffd|
    sTemp1 = ""

    'ITEM|fffd||fffd||fffd||313||1c2||74d||fffd||fffd||fffd|
    iRet1 = iGet_Ini_String(sINI_FILE_NAME, csESUMI, csITEMID, sTemp1)
    If (iRet1 = 1) Then
        sId = sTemp1 'ID |fffd||fffd||fffd||64fe|
    End If

    '|fffd|p|fffd|X|fffd||fffd||fffd|[|fffd|h|fffd||313||1c2||74d||fffd||fffd||fffd|
    iRet2 = iGet_Ini_String(sINI_FILE_NAME, csESUMI, csITEMPW, sTemp1)
    If (iRet2 = 1) Then
        sPassWord = sTemp1 'ID |fffd||fffd||fffd||64fe|
    End If

    '|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|L|fffd|^
    iRet3 = iGet_Ini_String(sINI_FILE_NAME, csESUMI, csITEMNAME, sTemp1)
    If (iRet3 = 1) Then
        sName = sTemp1 'ID |fffd||fffd||fffd||64fe|
    End If
'MsgBox "iget_regdat_ini:sid= " & sId & " spassword= " & sPassWord & " sName= " & sName
 
    'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||743|G|fffd||fffd||fffd|[|fffd||30e||fffd||fffd||242||342||702||182||7c2||103|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If ((iRet1 = 1) And (iRet2 = 1) And (iRet3 = 1)) Then
        iGet_RegDat_ini = 1
        Exit Function
    Else
        GoTo ERR_END
    End If

ERR_END:
    iGet_RegDat_ini = -1
End Function

Private Function iGet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, ByRef sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd|@sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||a3ca|
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sKeyStr:     |fffd||1cd||fffd||fffd||42f95||fffd||fffd||fffd||fffd||fffd|
'  |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-2(|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||58c|W|fffd||303|G|fffd||fffd||fffd|[|fffd|j
'--------------------------
Dim iRet As Long
Dim sGetBuffer As String
Dim sTemp1 As String
    On Error GoTo ERR_OUT
    
    sGetBuffer$ = String(512, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal "0000000000", sGetBuffer, CInt(512), ByVal sIniFileName)
    sTemp1 = Left$(sGetBuffer, InStr(sGetBuffer, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        sKeyStr = ""
        iGet_Ini_String = -1
    Else
        sKeyStr = sTemp1
        iGet_Ini_String = 1
    End If
    Exit Function
    
ERR_OUT:
    iGet_Ini_String = -1
    sKeyStr = ""

End Function

Attribute VB_Name = "Excel_Ver_CHK"
'=====================================================
' Excel Version Check
' Check if Store version (App version)
'
' 2018.12
'=====================================================

Option Explicit

'
Sub excel_AppVer_chk(Optional ByVal sProgName As String = "|fffd|G|fffd|X|fffd|~|fffd|\|fffd|t|fffd|g|fffd||313||fffd||fffd||fffd|")
    Dim sMsg As String
    Dim sLF As String
    
    sLF = Chr$(10)

    sMsg = "|fffd||fffd||fffd||fffd||fffd|p|fffd||303|G|fffd|N|fffd|Z|fffd||fffd||fffd||142||343|G|fffd|X|fffd|~|fffd||fffd||fffd|i|fffd||353||fffd||fffd||c0b5||fffd||702||fffd||fffd||fffd|" & sLF & sLF & _
    "|fffd||fffd||fffd||303|p|fffd|\|fffd|R|fffd||fffd||fffd||242||343|X|fffd|g|fffd|A|fffd|A|fffd|v|fffd||fffd||fffd||142||303|G|fffd|N|fffd|Z|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|" & sLF & _
    "|fffd||fffd||fffd||303|G|fffd|N|fffd|Z|fffd||fffd||fffd||142||352||28f||fffd||303|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||c0b5||fffd||202||fffd||fffd||fffd||fffd||fffd|" & sLF & _
    "|fffd|f|fffd|X|fffd|N|fffd|g|fffd|b|fffd|v|fffd||143|G|fffd|N|fffd|Z|fffd||fffd||fffd||30d||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||142||fffd||fffd|" & sLF & sLF & _
    "|fffd||68d||5c2||343|G|fffd|X|fffd|~HP|fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & sLF & _
    "|fffd|u|fffd|G|fffd|X|fffd|~HP|fffd|v->|fffd|u|fffd||60ad||fffd||fffd||fffd||90b2||fffd||fffd||fffd||fffd|iFAQ|fffd|j|fffd|v" & sLF & _
    "|fffd|u|fffd||fffd||fffd||fffd||8b||fffd||fffd|v->|fffd|u Windows|fffd||141|v" & sLF & _
    "|fffd||fffd||fffd|X|fffd|g|fffd|A|fffd|A|fffd|v|fffd||fffd||fffd||fffd|Office2016|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||a347||fffd||311||389||fffd||fffd||fffd||fffd|@"
    
    If iExcel_Check() = 1 Then
        MsgBox sMsg, Title:=sProgName
        ThisWorkbook.Close SaveChanges:=False
        DoEvents
    End If

End Sub

'
'common function
'
Function iExcel_Check() As Integer
'****************************
' |fffd|X|fffd|g|fffd|A|fffd|A|fffd|v|fffd||fffd||fffd||fffd| Excel|fffd||12c82||5c2||fffd|
' Excel.exe is located on "C:\Program Files\WindowsApps", if Excel is store version
'
' iRet =0 |fffd|f|fffd|X|fffd|N|fffd|g|fffd|b|fffd|v|fffd||fffd|
' iRet =1 |fffd|X|fffd|g|fffd|A|fffd|A|fffd|v|fffd||fffd||fffd||fffd|
'****************************

    Dim sTemp As String
    Dim vRet As Variant
    
    sTemp = Application.Path
    vRet = InStr(sTemp, "WindowsApps")
    
    If (vRet >= 1) Then
        iExcel_Check = 1
    Else
        iExcel_Check = 0
    End If
    
End Function
Attribute VB_Name = "JSONLib"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const INVALID_JSON      As Long = 1
Const INVALID_OBJECT    As Long = 2
Const INVALID_ARRAY     As Long = 3
Const INVALID_BOOLEAN   As Long = 4
Const INVALID_NULL      As Long = 5
Const INVALID_KEY       As Long = 6

Private Sub Class_Initialize()

End Sub

Private Sub Class_Terminate()

End Sub

Private Function RemoveInvalidChars(ByVal str As String) As String
    While InStr(1, str, "\") > 0
        str = Replace(str, "\", "")
    Wend
    str = Replace(str, "1.#INF00000000000", """" & "-" & """")
    RemoveInvalidChars = str
End Function
'
'   parse string and create JSON object (Dictionary or Collection in VB)
'
Public Function parse(ByRef str As String) As Object

    Dim index As Long
    index = 1
    
    str = RemoveInvalidChars(str)
    
    On Error Resume Next

    Call skipChar(str, index)
    Select Case Mid(str, index, 1)
    Case "{"
        Set parse = parseObject(str, index)
    Case "["
        Set parse = parseArray(str, index)
    End Select

End Function

'
'   parse collection of key/value (Dictionary in VB)
'
Private Function parseObject(ByRef str As String, ByRef index As Long) As Object

    Set parseObject = CreateObject("Scripting.Dictionary")
    
    ' "{"
    Call skipChar(str, index)
    If Mid(str, index, 1) <> "{" Then err.Raise vbObjectError + INVALID_OBJECT, Description:="char " & index & " : " & Mid(str, index)
    index = index + 1
    
    Do
    
        Call skipChar(str, index)
        If "}" = Mid(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid(str, index, 1) Then
            index = index + 1
            Call skipChar(str, index)
        End If
        
        Dim key As String
        
        ' add key/value pair
        parseObject.Add key:=parseKey(str, index), Item:=parseValue(str, index)
        
    Loop

End Function

'
'   parse list (Collection in VB)
'
Private Function parseArray(ByRef str As String, ByRef index As Long) As Collection

    Set parseArray = New Collection
    
    ' "["
    Call skipChar(str, index)
    If Mid(str, index, 1) <> "[" Then err.Raise vbObjectError + INVALID_ARRAY, Description:="char " & index & " : " + Mid(str, index)
    index = index + 1
    
    Do
        
        Call skipChar(str, index)
        If "]" = Mid(str, index, 1) Then
            index = index + 1
            Exit Do
        ElseIf "," = Mid(str, index, 1) Then
            index = index + 1
            Call skipChar(str, index)
        End If
        
        ' add value
        parseArray.Add parseValue(str, index)
        
    Loop

End Function

'
'   parse string / number / object / array / true / false / null
'
Private Function parseValue(ByRef str As String, ByRef index As Long)

    Call skipChar(str, index)
    
    Select Case Mid(str, index, 1)
    Case "{"
        Set parseValue = parseObject(str, index)
    Case "["
        Set parseValue = parseArray(str, index)
    Case """", "'"
        parseValue = parseString(str, index)
    Case "t", "f"
        parseValue = parseBoolean(str, index)
    Case "n"
        parseValue = parseNull(str, index)
    Case Else
        parseValue = parseNumber(str, index)
    End Select

End Function

'
'   parse string
'
Private Function parseString(ByRef str As String, ByRef index As Long) As String

    Dim quote   As String
    Dim Char    As String
    Dim Code    As String
    
    Call skipChar(str, index)
    quote = Mid(str, index, 1)
    index = index + 1
    Do While index > 0 And index <= Len(str)
        Char = Mid(str, index, 1)
        Select Case (Char)
        Case "\"
            index = index + 1
            Char = Mid(str, index, 1)
            Select Case (Char)
            Case """", "'"
                parseString = parseString & Char
                index = index + 1
            Case "\"
                parseString = parseString & "\"
                index = index + 1
            Case """", "/", "'"
                 parseString = parseString & Char
                 index = index + 1
            Case "b"
                parseString = parseString & vbBack
                index = index + 1
            Case "f"
                parseString = parseString & vbFormFeed
                index = index + 1
            Case "n"
                parseString = parseString & vbNewLine
                index = index + 1
            Case "r"
                parseString = parseString & vbCr
                index = index + 1
            Case "t"
                parseString = parseString & vbTab
                index = index + 1
            Case "u"
                index = index + 1
                Code = Mid(str, index, 4)
                parseString = parseString & ChrW(val("&h" + Code))
                index = index + 4
            End Select
        Case quote
            index = index + 1
            Exit Function
        Case Else
            parseString = parseString & Char
            index = index + 1
        End Select
    Loop

End Function

'
'   parse number
'
Private Function parseNumber(ByRef str As String, ByRef index As Long)

    Dim Value   As String
    Dim Char    As String
    
    Call skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid(str, index, 1)
        If InStr("+-0123456789.eE", Char) Then
            Value = Value & Char
            index = index + 1
        Else
            If InStr(Value, ".") Or InStr(Value, "e") Or InStr(Value, "E") Then
                parseNumber = CDbl(Value)
            Else
                On Error Resume Next
                parseNumber = CLng(Value)
                If err.Number <> 0 Then
                    parseNumber = """ & value & """
                End If
                err.Clear
                On Error GoTo 0
            End If
            Exit Function
        End If
    Loop
End Function

'
'   parse true / false
'
Private Function parseBoolean(ByRef str As String, ByRef index As Long) As Boolean

    Call skipChar(str, index)
    If Mid(str, index, 4) = "true" Then
        parseBoolean = True
        index = index + 4
    ElseIf Mid(str, index, 5) = "false" Then
        parseBoolean = False
        index = index + 5
    Else
        err.Raise vbObjectError + INVALID_BOOLEAN, Description:="char " & index & " : " & Mid(str, index)
    End If

End Function

'
'   parse null
'
Private Function parseNull(ByRef str As String, ByRef index As Long)

    Call skipChar(str, index)
    If Mid(str, index, 4) = "null" Then
        parseNull = Null
        index = index + 4
    Else
        err.Raise vbObjectError + INVALID_NULL, Description:="char " & index & " : " & Mid(str, index)
    End If

End Function

Private Function parseKey(ByRef str As String, ByRef index As Long) As String

    Dim dquote  As Boolean
    Dim squote  As Boolean
    Dim Char    As String
    
    Call skipChar(str, index)
    Do While index > 0 And index <= Len(str)
        Char = Mid(str, index, 1)
        Select Case (Char)
        Case """"
            dquote = Not dquote
            index = index + 1
            If Not dquote Then
                Call skipChar(str, index)
                If Mid(str, index, 1) <> ":" Then
                    err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & parseKey
                End If
            End If
        Case "'"
            squote = Not squote
            index = index + 1
            If Not squote Then
                Call skipChar(str, index)
                If Mid(str, index, 1) <> ":" Then
                    err.Raise vbObjectError + INVALID_KEY, Description:="char " & index & " : " & parseKey
                End If
            End If
        Case ":"
            If Not dquote And Not squote Then
                index = index + 1
                Exit Do
            ElseIf dquote And Not squote Then
                parseKey = parseKey & Char
                index = index + 1
            End If
        Case Else
            If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Char) Then
            Else
                parseKey = parseKey & Char
            End If
            index = index + 1
        End Select
    Loop

End Function

'
'   skip special character
'
Private Sub skipChar(ByRef str As String, ByRef index As Long)

    While index > 0 And index <= Len(str) And InStr(vbCrLf & vbCr & vbLf & vbTab & " ", Mid(str, index, 1))
        index = index + 1
    Wend

End Sub

Public Function toString(ByRef obj As Variant) As String

    Select Case VarType(obj)
        Case vbNull
            toString = "null"
        Case vbDate
            toString = """" & CStr(obj) & """"
        Case vbString
            toString = """" & obj & """" ' Encode(obj) & """"
        Case vbObject
            Dim bFI, i
            bFI = True
            If TypeName(obj) = "Dictionary" Then
                toString = toString & "{"
                Dim keys
                keys = obj.keys
                For i = 0 To obj.Count - 1
                    If bFI Then bFI = False Else toString = toString & ","
                    Dim key
                    key = keys(i)
                    toString = toString & """" & key & """:" & toString(obj(key))
                Next i
                toString = toString & "}"
            ElseIf TypeName(obj) = "Collection" Then
                toString = toString & "["
                Dim Value
                For Each Value In obj
                    If bFI Then bFI = False Else toString = toString & ","
                    toString = toString & toString(Value)
                Next Value
                toString = toString & "]"
            End If
        Case vbBoolean
            If obj Then toString = "true" Else toString = "false"
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            toString = multiArray(obj, 1, "", sEB)
        Case Else
            toString = Replace(obj, ",", ".")
    End Select

End Function

Private Function Encode(str) As String
    
    Dim i, j, aL1, aL2, c, p

    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For i = 1 To Len(str)
        p = True
        c = Mid(str, i, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                Encode = Encode & "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next

        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                Encode = Encode & c
            ElseIf a > -1 Or a < 65535 Then
                Encode = Encode & "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next
End Function

Private Function multiArray(aBD, iBC, sPS, ByRef sPT)   ' Array BoDy, Integer BaseCount, String PoSition
    Dim iDU, iDL, i ' Integer DimensionUBound, Integer DimensionLBound
    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)
    
    Dim sPB1, sPB2  ' String PointBuffer1, String PointBuffer2
    If err.Number = 9 Then
        sPB1 = sPT & sPS
        For i = 1 To Len(sPB1)
            If i <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid(sPB1, i, 1)
        Next
'        multiArray = multiArray & toString(Eval("aBD(" & sPB2 & ")"))
        multiArray = multiArray & toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        multiArray = multiArray & "["
        For i = iDL To iDU
            multiArray = multiArray & multiArray(aBD, iBC + 1, i, sPT)
            If i < iDU Then multiArray = multiArray & ","
        Next
        multiArray = multiArray & "]"
        sPT = Left(sPT, iBC - 2)
    End If
    err.Clear
End Function

Attribute VB_Name = "M_Thr"
'=======================================================
' THR2 SSS_SRK Ver3.0
'
' 2006.10 WZH
'=======================================================
Option Private Module
Option Explicit

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function fDataExp Lib "SRK3_SubA_64.dll" () As Integer
    Private Declare PtrSafe Function fTextExp Lib "SRK3_SubA_64.dll" () As Integer
    #Else
    Private Declare PtrSafe Function fDataExp Lib "SRK3_SubA.dll" () As Integer
    Private Declare PtrSafe Function fTextExp Lib "SRK3_SubA.dll" () As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function fDataExp Lib "SRK3_SubA_64.dll" () As Integer
    Private Declare Function fTextExp Lib "SRK3_SubA_64.dll" () As Integer
    #Else
    Private Declare Function fDataExp Lib "SRK3_SubA.dll" () As Integer
    Private Declare Function fTextExp Lib "SRK3_SubA.dll" () As Integer
    #End If
#End If

'data expansion
'
Sub nu_KKS_THR6_EXPtoDumy()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    rtn = fDataExp()
End Sub

'text expansion
'
Sub nu_KKS_THR6_TEXTEXP()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    rtn = fTextExp()
End Sub
'=== EOF ===
Attribute VB_Name = "MdlGraph"
'=======================================================
' Graph for Sss_Use06 (TateOre, YBo+TateOre, Pyramid)
'
' 2006.11 WZH, LSQ
'=======================================================

Option Explicit

Private SbRedisp As Boolean  '11.11.19

Private Const MAXITEMNUM As Integer = 9
Private Const MAXSAMPNUM As Integer = 100
Private Const ERR_ITEMNUM As String = "The number of items should be "
Private Const ERR_LESSITEMNUM As String = "|fffd||fffd||20f||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Private Const ERR_OVERITEMNUM As String = "The number of items is over "
Private Const ERR_LESSSAMPNUM As String = "|fffd|f|fffd|[|fffd|^|fffd||fffd|{1}|fffd||20f||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Private Const ERR_OVERSAMPNUM As String = "he number of samples is over "
Private Const ERR_NUMDATA As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Type tagDataCheck
    rgein As Range
    MinItemNum As Long
    MAXITEMNUM As Long
    MinSampNum As Long
    MAXSAMPNUM As Long
    nTitle As Integer
    bStop As Boolean
End Type

Private Type tagClass
    DataClassIn As String
    DataTotalIn As String
    dataout As String
    bFlgTitle As Integer
    bFlgStop As Integer
    Method  As Long
    LowerLimit As Double
    Interval As Double
    Count As Long
    ClassCnt As Long
    CateCnt As Long
    decNum As Long
End Type

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function

Sub adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = decNumKeta(maxV - minV)
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Round(max, keta)
    minV = Application.Round(min, keta)
End Sub

'Axes Setting for value primary axes
Sub AxesSetting_VPrimary(ByVal cht As Chart, _
    ByVal dMin As Double, ByVal dMax As Double, _
    ByVal bShow As Boolean, ByVal nDecNum As Integer)
    cht.Axes(xlValue, xlPrimary).MinimumScale = dMin
    cht.Axes(xlValue, xlPrimary).MaximumScale = dMax
    cht.Axes(xlValue, xlPrimary).CrossesAt = dMin
End Sub

Private Function CheckData(DataCheck As tagDataCheck, cateDataNum As Long) As Boolean
    Dim itemnum As Long, smpnum As Long
    Dim smpCnt As Long, blankcnt As Long
    Dim tmpRge As Range
    itemnum = DataCheck.rgein.Columns.Count
    smpnum = DataCheck.rgein.Rows.Count
    If DataCheck.nTitle = 2 Then
        itemnum = itemnum - cateDataNum
        smpnum = smpnum - 1
    ElseIf DataCheck.nTitle = 1 Then
        smpnum = smpnum - 1
    End If
    If DataCheck.MinItemNum = DataCheck.MAXITEMNUM And itemnum <> DataCheck.MinItemNum Then
        MsgBox ERR_ITEMNUM & DataCheck.MinItemNum
        CheckData = False
        Exit Function
    End If
    If itemnum < 1 Then
        MsgBox DataCheck.MinItemNum & ERR_LESSITEMNUM
        CheckData = False
        Exit Function
    End If
    If itemnum > DataCheck.MAXITEMNUM Then
        MsgBox ERR_OVERITEMNUM & DataCheck.MAXITEMNUM
        CheckData = False
        Exit Function
    End If
    If smpnum < DataCheck.MinSampNum Then
        'MsgBox ERR_LESSSAMPNUM & DataCheck.MinSampNum
        MsgBox Replace(ERR_LESSSAMPNUM, "{1}", DataCheck.MinSampNum)
        CheckData = False
        Exit Function
    End If
    If smpnum > DataCheck.MAXSAMPNUM Then
        MsgBox ERR_OVERSAMPNUM & DataCheck.MAXSAMPNUM
        CheckData = False
        Exit Function
    End If
    Set tmpRge = DataCheck.rgein.Range("A1").offset(1, 2)
    Set tmpRge = Range(tmpRge, tmpRge.offset(smpnum - 1, itemnum - 1))
    smpCnt = Application.WorksheetFunction.Count(tmpRge)
    blankcnt = Application.WorksheetFunction.CountBlank(tmpRge)
    smpCnt = smpCnt + blankcnt
    If smpCnt < itemnum * smpnum And DataCheck.bStop Then
        MsgBox ERR_NUMDATA
        CheckData = False
        Exit Function
    End If
    CheckData = True
End Function

Private Sub Snake_DataType_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgTateOre")
    bOn = IIf(dlg.OptionButtons("optDataType2").Value = xlOn, True, False)
    dlg.OptionButtons("optStage3").Enabled = bOn
    dlg.OptionButtons("optStage5").Enabled = bOn
    dlg.OptionButtons("optStage7").Enabled = bOn
    dlg.OptionButtons("optStage9").Enabled = bOn
    dlg.OptionButtons("optStageType1").Enabled = bOn
    dlg.OptionButtons("optStageType2").Enabled = bOn
    dlg.DropDowns("DwListClass").Enabled = bOn
    
    Snake_ChkStage  '11.11.19
End Sub

'11.11.19 LSQ Add
Private Sub Snake_ChkStage()
    Dim dlg As DialogSheet
    Dim optBtn As OptionButton
    Dim bData2 As Boolean, bStageType2 As Boolean, stageNum As Long
    
    Set dlg = ThisWorkbook.DialogSheets("DlgTateOre")
    Set optBtn = dlg.OptionButtons("optDataType2")
    bData2 = IIf(optBtn.Value = xlOn, True, False)
    bStageType2 = IIf(dlg.OptionButtons("optStageType2").Value = xlOn, True, False)
    stageNum = CInt(dlg.DropDowns("DwListClass").text)
    
    SbRedisp = False
    If bData2 And optBtn.Enabled Then
        If bStageType2 And stageNum Mod 2 = 0 Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||30c|`|fffd||fffd||fffd||fffd||fffd|u-2,-1,0,1,2|fffd|v|fffd||30e||fffd||fffd||341|A|fffd||752||fffd||142||fffd||fffd||fffd|]|fffd||fffd||fffd|i|fffd|K|fffd||fffd||fffd||34a||f414||fffd||302||742||142||fffd||fffd|B"
            SbRedisp = True
            dlg.DropDowns("DwListClass").text = stageNum - 1    'set the correct number
        End If
    End If
    
End Sub

Private Sub Snake_SetMacro()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTateOre")
    dlg.OptionButtons("optDataType1").OnAction = "Snake_DataType_Click"
    dlg.OptionButtons("optDataType2").OnAction = "Snake_DataType_Click"
    
    '11.11.19 add
    dlg.OptionButtons("optStageType1").OnAction = "Snake_ChkStage"
    dlg.OptionButtons("optStageType2").OnAction = "Snake_ChkStage"
    dlg.DropDowns("DwListClass").OnAction = "Snake_ChkStage"
    
    Snake_DataType_Click
End Sub
'
Sub KKS_SnakeCht_1P01()
    Dim rgein As Range, rgeout As Range, tmpRge As Range, tmpCel As Range
    Dim itemnum As Long, smpnum As Long
    Dim i As Long, j As Long
    Dim dlg As DialogSheet
    Dim cht As Chart, serie As Series
    Dim rtn As Integer, special As Integer
    Dim strAddr As String, actStName As String
    Dim TODataCheck As tagDataCheck
    Dim dblMin As Double, dblMax As Double
    Dim bShowValue As Boolean
    Dim nNumber As Integer
    Dim oRow As Long, oCol As Long
    Dim cateDataNum As Long, stageNum As Long
    Dim stageType As Long

    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgTateOre")
    Snake_SetMacro
    If Not RestoreDlg(dlg) Then
        dlg.DropDowns("DwListClass").RemoveAllItems
        For i = 3 To 9
            dlg.DropDowns("DwListClass").AddItem i
        Next i
        dlg.DropDowns("DwListClass").ListIndex = 1
    End If
redisp:
    SbRedisp = False
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If SbRedisp Then GoTo redisp
    
    If rtn Then
        Call SaveDlg(dlg)
        Set rgein = Range(toXlA1str(dlg.EditBoxes("RgeDataIn").text)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        If rgein Is Nothing Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
            GoTo redisp
        End If
        Set rgeout = Range(toXlA1str(dlg.EditBoxes("RgeDataOut").text)).Range("A1")
        If rgeout Is Nothing Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
        bShowValue = IIf(dlg.CheckBoxes("chkValue").Value = xlOn, True, False)
        nNumber = CInt(dlg.EditBoxes("edtNumber").text)
        cateDataNum = IIf(dlg.OptionButtons("optDataType1").Value = xlOn, 1, 2)
        'stageNum = IIf(dlg.OptionButtons("optStage3").Value = xlOn, 3, _
        '                     IIf(dlg.OptionButtons("optStage5").Value = xlOn, 5, _
        '                     IIf(dlg.OptionButtons("optStage7").Value = xlOn, 7, 9))) 'CInt(dlg.EditBoxes("txtStageNum").Text)
        stageNum = CInt(dlg.DropDowns("DwListClass").text)
        stageType = IIf(dlg.OptionButtons("optStageType1").Value = xlOn, 1, 2)
        If cateDataNum = 2 Then
            If (stageNum < 3 Or stageNum > 9) Then
                MsgBox "|fffd|]|fffd||fffd||fffd|i|fffd|K|fffd||fffd|3|fffd|`9"
                GoTo redisp
            End If
'11.11.19 LSQ cmt
'            If WorksheetFunction.IsEven(stageNum) And stageType = 2 Then
'                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||30c|`|fffd||fffd||fffd||fffd||fffd|u-2,-1,0,1,2|fffd|v|fffd||30e||fffd||fffd||341|A|fffd||752||fffd||142||fffd||fffd||fffd|]|fffd||fffd||fffd|i|fffd|K|fffd||fffd||fffd||34a||f414||fffd||302||742||142||fffd||fffd|B"
'                GoTo redisp
'            End If
        End If
        Set TODataCheck.rgein = rgein
        TODataCheck.MinItemNum = cateDataNum + 1
        TODataCheck.MAXITEMNUM = MAXITEMNUM
        TODataCheck.MinSampNum = 1
        TODataCheck.MAXSAMPNUM = MAXSAMPNUM
        TODataCheck.bStop = True
        TODataCheck.nTitle = 2
        If Not CheckData(TODataCheck, cateDataNum) Then
            GoTo redisp
        End If
        Application.ScreenUpdating = False
        itemnum = rgein.Columns.Count - cateDataNum
        smpnum = rgein.Rows.Count - 1
        Set tmpRge = rgein.Range("A1").offset(1, cateDataNum).Resize(smpnum, itemnum) ', RgeIn.Range("A1").Offset(smpnum, itemnum))
        dblMin = Application.WorksheetFunction.min(tmpRge)
        dblMax = Application.WorksheetFunction.max(tmpRge)
        If cateDataNum = 2 Then
            If stageType = 1 Then
                i = stageNum
                If dblMin < 1 Or dblMax > i Then
                    MsgBox "|fffd|f|fffd|[|fffd|^|fffd||341|A1<=|fffd|f|fffd|[|fffd|^<=|fffd|i|fffd|K|fffd|A|fffd||314||348||342||24e||fffd||fffd||702||fffd||60a4||fffd||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
                    GoTo redisp
                End If
            Else
                i = stageNum \ 2
                If dblMin < -i Or dblMax > i Then
                    MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|K|fffd||602||214||348||342||24e||fffd||fffd||702||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B1-INT(|fffd|i|fffd|K/2)-1<=|fffd|f|fffd|[|fffd|^<=|fffd|i|fffd|K-INT(|fffd|i|fffd|K/2)-1|fffd||142||fffd||fffd|B"
                    GoTo redisp
                End If
            End If
        End If
        rgein.Copy
        rgeout.PasteSpecial xlPasteValues
        '2011.03.22 added
        If cateDataNum = 2 Then
            rgein.Columns(1).Copy
            rgeout(1, 2).PasteSpecial xlPasteValues
            rgein.Columns(2).Copy
            rgeout(1, 1).PasteSpecial xlPasteValues
        End If
        Application.CutCopyMode = False
        'end add
        
        'Dummy Data Created
        Set tmpCel = rgeout.offset(0, itemnum + cateDataNum)
        tmpCel(1, 1) = "|fffd|f|fffd|[|fffd|^1"
        tmpCel(1, 2) = "|fffd|f|fffd|[|fffd|^2"
        Set tmpCel = tmpCel.offset(1, 0)
        Set tmpRge = Range(rgeout.offset(1, cateDataNum), rgeout.offset(1, itemnum + cateDataNum - 1))
        For i = 1 To smpnum
            tmpCel(1, 1) = Application.WorksheetFunction.max(tmpRge)
            tmpCel(1, 2) = i - 1 + 0.5 'smpnum - i + 0.5; "|fffd|f|fffd|[|fffd|^2
            'next row
            Set tmpCel = tmpCel.offset(1, 0)
            Set tmpRge = tmpRge.offset(1, 0)
        Next i
        
        'Data Adjust (11.11.19 LSQ add), see "|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|@|fffd|C|fffd||fffd|111115.xls"
        If cateDataNum = 2 Then
            Set tmpRge = rgeout.offset(1, 0).Resize(smpnum, itemnum + cateDataNum + 4)
            Call SortByCol_data(tmpRge, itemnum + cateDataNum + 2, True) 'sort decent by "|fffd|f|fffd|[|fffd|^2" (i.e., data upside down)
            
            Set tmpRge = rgeout.offset(1, itemnum + cateDataNum + 1).Resize(smpnum, 1)
            Call SortByCol_data(tmpRge, 1, False) '"|fffd|f|fffd|[|fffd|^2" should be ascent
        End If
        
        'Template Graph Copy & Paste

        Comm_GetTmplGrp rgeout, ThisWorkbook.name, "GrpTateOre", "GraphTateOre"

        'Setting
        Set cht = ActiveSheet.ChartObjects(ActiveSheet.ChartObjects.Count).Chart
        actStName = ActiveSheet.name
        oRow = rgeout.row
        oCol = rgeout.Column + cateDataNum - 1
        
        'Adjust (Add or Delete) series based on the itemnum, comparing with the dummy itemnum(=9)
        For i = 1 To itemnum - 9
            strAddr = "'" & actStName & "'!R" & oRow & "C" & oCol + i
            Call cht.SeriesCollection.Add(strAddr)
        Next i
        For i = itemnum + 1 To 9
            cht.ChartGroups(2).SeriesCollection(cht.ChartGroups(2).SeriesCollection.Count).Delete
        Next i
        
        'Replace data range for each series
        j = 1
        For Each serie In cht.ChartGroups(2).SeriesCollection
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + j
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + j
            serie.XValues = "=" & strAddr
            
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 2
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 2
            serie.values = "=" & strAddr
            
            strAddr = "'" & actStName & "'!R" & oRow & "C" & oCol + j
            serie.name = "=" & strAddr
            
            If bShowValue Then
                Call serie.ApplyDataLabels(Type:=xlDataLabelsShowLabel, AutoText:=bShowValue, LegendKey:=False)
                serie.DataLabels.NumberFormatLocal = FormatNumber(0, nNumber) & "_ "
            End If
            'next series
            j = j + 1
        Next
        '
        Set serie = cht.ChartGroups(1).SeriesCollection.Item(1)
        strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol
        strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol
        serie.XValues = "=" & strAddr
        
        strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 1
        strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 1
        serie.values = "=" & strAddr
        
        strAddr = "'" & actStName & "'!R" & oRow & "C" & oCol + itemnum + 1
        serie.name = "=" & strAddr
        
        'Axes Setting
        Call adjustMinMax(dblMin, dblMax)
        Call AxesSetting_VPrimary(cht, dblMin, dblMax, bShowValue, nNumber) '06.12.12 LSQ add
        
        cht.Axes(xlCategory, xlPrimary).TickLabelSpacing = 1
        cht.Axes(xlCategory, xlPrimary).TickMarkSpacing = 1
        cht.Axes(xlCategory).MajorTickMark = xlInside
        cht.HasAxis(xlValue, xlSecondary) = True
        cht.Axes(xlValue, xlSecondary).MinimumScale = 0
        cht.Axes(xlValue, xlSecondary).MaximumScale = smpnum
        If cateDataNum = 1 Then
            If dlg.OptionButtons("optAxisDown").Value = xlOn Then
                ActiveChart.Axes(xlValue, xlSecondary).ReversePlotOrder = True
                ActiveChart.Axes(xlCategory).Crosses = xlMaximum
            Else
                ActiveChart.Axes(xlValue, xlSecondary).ReversePlotOrder = True
            End If
        End If
        cht.HasAxis(xlValue, xlSecondary) = False
        
        If stageType = 1 Then
            cht.Axes(xlValue).MinimumScale = 0
            cht.Axes(xlValue).MaximumScale = stageNum + 1
            cht.Axes(xlValue).MajorUnit = 0
            cht.Axes(xlValue).CrossesAt = 0
            If dblMax < stageNum + 1 Then dblMax = stageNum + 1
            dblMin = 0
            'cht.Axes(xlValue).TickLabels.NumberFormatLocal = "[>" & stageNum & "]"""";[<1] """";G/|fffd|W|fffd||fffd|"
            If cateDataNum = 2 Then cht.Axes(xlValue).TickLabels.NumberFormatLocal = "[>" & stageNum & "]"""";[<1] """";0"
        Else
            nNumber = stageNum \ 2
            cht.Axes(xlValue).MinimumScale = -nNumber - 1
            cht.Axes(xlValue).MaximumScale = nNumber + 1
            cht.Axes(xlValue).MajorUnit = 1
            cht.Axes(xlValue).CrossesAt = -nNumber - 1
            dblMax = nNumber + 1
            dblMin = -nNumber - 1
            'cht.Axes(xlValue).TickLabels.NumberFormatLocal = "[>" & nNumber & "]"""";[<" & -nNumber & "] """";G/|fffd|W|fffd||fffd|"
            If cateDataNum = 2 Then cht.Axes(xlValue).TickLabels.NumberFormatLocal = "[>" & nNumber & "]"""";[<" & -nNumber & "] """";0"
        End If
        
        '|fffd|}|fffd||303|t|fffd|H|fffd||fffd||fffd|g; 06.11.23 LSQ add
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        
        cht.HasLegend = False
        cht.HasLegend = True
        cht.Legend.Position = xlBottom
        cht.Legend.LegendEntries(1).Delete
        cht.Legend.Border.Weight = xlHairline
        cht.PlotArea.Left = 0
        cht.PlotArea.Width = cht.ChartArea.Width
        
        If cateDataNum = 2 Then
            ActiveSheet.Cells(oRow, oCol + itemnum + 3) = "Max"
            For i = 1 To smpnum
                ActiveSheet.Cells(oRow + i, oCol + itemnum + 3) = dblMax
            Next i
            Set serie = ActiveChart.SeriesCollection.NewSeries
            serie.ChartType = xlXYScatterLines
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 3
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 3
            serie.XValues = "=" & strAddr
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 2
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 2
            serie.values = "=" & strAddr
            serie.Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlNone
            End With
            With Selection
                .MarkerBackgroundColorIndex = xlNone
                .MarkerForegroundColorIndex = xlAutomatic
                .MarkerStyle = xlNone
                .Smooth = False
                .MarkerSize = 5
                .Shadow = False
            End With
            '2011.02.17 mdf:
            'serie.ApplyDataLabels AutoText:=True, LegendKey:= _
            '    False, ShowSeriesName:=True, ShowCategoryName:=False, ShowValue:=False, _
            '     ShowPercentage:=False, ShowBubbleSize:=False
            Call serie.ApplyDataLabels(AutoText:=True, LegendKey:= _
                False, Type:=xlDataLabelsShowLabel)
            'end mdf
            For i = 1 To serie.Points.Count
                serie.Points(i).DataLabel.text = rgeout(i + 1, 1)
            Next i
            ActiveChart.HasAxis(xlValue, xlSecondary) = True
            ActiveChart.Axes(xlCategory, xlPrimary).CategoryType = xlAutomatic
            ActiveChart.Axes(xlCategory, xlSecondary).CategoryType = xlAutomatic
            ActiveChart.Axes(xlValue, xlSecondary).Select
            With Selection.Border
                .colorIndex = 1
                .Weight = xlHairline
                .LineStyle = xlContinuous
            End With
            With Selection
                .MajorTickMark = xlNone
                .MinorTickMark = xlNone
                .TickLabelPosition = xlNone
            End With
            ActiveChart.PlotArea.Width = ActiveChart.ChartArea.Width * 0.8
            ActiveChart.Legend.LegendEntries(itemnum + 1).Delete
            
            ActiveSheet.Cells(oRow, oCol + itemnum + 4) = "Min"
            For i = 1 To smpnum
                ActiveSheet.Cells(oRow + i, oCol + itemnum + 4) = dblMin
            Next i
            Set serie = ActiveChart.SeriesCollection.NewSeries
            serie.ChartType = xlXYScatterLines
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 4
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 4
            serie.XValues = "=" & strAddr
            strAddr = "'" & actStName & "'!R" & oRow + 1 & "C" & oCol + itemnum + 2
            strAddr = strAddr & ":R" & oRow + smpnum & "C" & oCol + itemnum + 2
            serie.values = "=" & strAddr
            serie.Select
            With Selection.Border
                .Weight = xlThin
                .LineStyle = xlNone
            End With
            With Selection
                .MarkerBackgroundColorIndex = xlNone
                .MarkerForegroundColorIndex = xlAutomatic
                .MarkerStyle = xlNone
                .Smooth = False
                .MarkerSize = 5
                .Shadow = False
            End With
            '2011.02.17 mdf:
            'serie.ApplyDataLabels AutoText:=True, LegendKey:= _
            '    False, ShowSeriesName:=True, ShowCategoryName:=False, ShowValue:=False, _
            '     ShowPercentage:=False, ShowBubbleSize:=False
            Call serie.ApplyDataLabels(AutoText:=True, LegendKey:= _
                False, Type:=xlDataLabelsShowLabel)
            'end mdf
            For i = 1 To serie.Points.Count
                serie.Points(i).DataLabel.text = rgeout(i + 1, 2)
            Next i
            serie.DataLabels.Position = xlLabelPositionLeft
            ActiveChart.HasAxis(xlValue, xlSecondary) = True
            ActiveChart.Axes(xlCategory, xlPrimary).CategoryType = xlAutomatic
            ActiveChart.Axes(xlCategory, xlSecondary).CategoryType = xlAutomatic
            ActiveChart.Axes(xlValue, xlSecondary).Select
            With Selection.Border
                .colorIndex = 1
                .Weight = xlHairline
                .LineStyle = xlContinuous
            End With
            With Selection
                .MajorTickMark = xlNone
                .MinorTickMark = xlNone
                .TickLabelPosition = xlNone
            End With
            ActiveChart.PlotArea.Left = ActiveChart.ChartArea.Width * 0.1
            ActiveChart.PlotArea.Width = ActiveChart.ChartArea.Width * 0.8
            ActiveChart.Legend.LegendEntries(itemnum + 1).Delete
            ActiveChart.Axes(xlCategory).MajorTickMark = xlNone
            ActiveChart.Axes(xlCategory).TickLabelPosition = xlNone
            ActiveChart.Axes(xlCategory).Format.Line.DashStyle = msoLineDash
            'If (stageNum Mod 2 = 1) Then
                ActiveChart.Axes(xlValue).CrossesAt = (dblMax - dblMin) / 2
                ActiveChart.Axes(xlValue).MajorUnit = 1
                ActiveChart.Axes(xlCategory).Border.LineStyle = xlDot
            'End If
            If dlg.OptionButtons("optAxisDown").Value = xlOn Then
                ActiveChart.Axes(xlCategory).ReversePlotOrder = False
            End If
        Else                                                                                                        '2011.03.22 added
            With ActiveChart.Axes(xlValue)
                .MinimumScaleIsAuto = True
                .MaximumScaleIsAuto = True
                .MajorUnitIsAuto = True
            End With
            ActiveChart.Axes(xlValue).CrossesAt = ActiveChart.Axes(xlValue).MinimumScale
            If dlg.OptionButtons("optAxisDown").Value = xlOn Then
                ActiveChart.Axes(xlCategory).ReversePlotOrder = True
            End If
        End If
        
        Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.name)
            
        Application.ScreenUpdating = True
               
        rgeout.Select
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'=== EOF ===
Attribute VB_Name = "MdlNum2Cate"
Option Base 1
Option Explicit

Private Const ERR_NONNUMERIC As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_CLASSRANGE As String = "|fffd|K|fffd||fffd||fffd||fffd||fffd||64f||fffd||142||fffd||fffd|B"
Private Const ERR_DATARANGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Private Const ERR_NAMERANGE As String = "|fffd||fffd||fffd||302||314||348||34e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"

Private Sub BubbleSort(MyArray() As Variant, Optional ByVal bAsc As Boolean = True)
     
    Dim first           As Integer
    Dim last            As Integer
    Dim i               As Integer
    Dim j               As Integer
    Dim Temp            As Variant
    Dim List            As Variant
     
    first = LBound(MyArray)
    last = UBound(MyArray)
    For i = first To last - 1
        For j = i + 1 To last
            If bAsc Then
                If MyArray(i) > MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            Else
                If MyArray(i) < MyArray(j) Then
                    Temp = MyArray(j)
                    MyArray(j) = MyArray(i)
                    MyArray(i) = Temp
                End If
            End If
        Next j
    Next i
End Sub

Private Sub SetRangeBorder(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub

Private Sub subNum2Cate(ByVal bAsc As Boolean, ByVal rgeOutIn As Range, ByVal rgedata As Range, ByVal rgeClass As Range, ByVal rgeName As Range)
    Dim i As Integer, j As Integer, k As Integer
    Dim inx As Integer, ItmNum As Integer, smpnum As Integer
    Dim first As Integer, last As Integer
    Dim rge As Range, data As Range, rgeout As Range, rgeTitle As Range
    Dim arrayContacts() As Variant
    Dim arrayData() As Variant
    Dim aryData() As Variant
    Dim InvalidNum As Integer, MAXCATENUM As Integer
    Set rgeout = rgeOutIn
    Set rge = rgeClass
    Set data = rgedata
    Set rgeTitle = data.Rows(1)
    Set data = Range(data(2, 1), data(data.Rows.Count, data.Columns.Count))
    ItmNum = rge.Columns.Count
    smpnum = data.Rows.Count
    rgeout = "|fffd||fffd||fffd||fffd||fffd||282||fffd||fffd||fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|"
    For i = 1 To ItmNum
        rgeout(3, i + 1) = rgeTitle.Cells(1, i)
    Next i
    rgeout(4, 1) = "|fffd|L|fffd||fffd|"
    rgeout(5, 1) = "|fffd||fffd||fffd||fffd|"
    rgeout(6, 1) = "|fffd||fffd||fffd|v"
    Set rgeout = rgeout(8, 1)
    rgeout = "|fffd||fffd||fffd|f|fffd|[|fffd|^"
    Set rgeout = rgeout(2, 1)
    If Not rgeName Is Nothing Then
        arrayData = rgeName.Value
        Range(rgeout(2, 1), rgeout(smpnum + 1, 1)).Value = arrayData
    Else
        For i = 1 To smpnum
            rgeout(i + 1, 1).Value = i
        Next i
    End If
    rgeout(smpnum + 3, 1) = "|fffd||fffd||fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|"
    Set rgeout = rgeout(1, 2)
    MAXCATENUM = 0
    For i = 1 To ItmNum
        InvalidNum = 0
        arrayContacts = rge.Columns(i).Value
        first = LBound(arrayContacts)
        last = UBound(arrayContacts)
        ReDim arrayData(first To last)
        inx = 0
        For j = first To last
            If IsNumeric(arrayContacts(j, 1)) And Not IsEmpty(arrayContacts(j, 1)) Then
                arrayData(j) = arrayContacts(j, 1)
                inx = inx + 1
            End If
        Next j
        ReDim Preserve arrayData(1 To inx)
        Call BubbleSort(arrayData, bAsc)
        aryData = data.Columns(i).Value
        first = LBound(aryData)
        last = UBound(aryData)
        For j = first To last
            If IsNumeric(aryData(j, 1)) And Not IsEmpty(aryData(j, 1)) Then
                inx = UBound(arrayData) + 1
                For k = LBound(arrayData) To UBound(arrayData)
                    If bAsc Then
                        If aryData(j, 1) < arrayData(k) Then
                            inx = k
                            Exit For
                        End If
                    Else
                        If aryData(j, 1) >= arrayData(k) Then
                            inx = k
                            Exit For
                        End If
                    End If
                Next k
                aryData(j, 1) = inx
            Else
                aryData(j, 1) = "-"
                InvalidNum = InvalidNum + 1
            End If
        Next j
        rgeOutIn(4, i + 1) = smpnum - InvalidNum
        rgeOutIn(5, i + 1) = InvalidNum
        rgeOutIn(6, i + 1) = smpnum
        rgeout(1, i) = rgeTitle.Cells(1, i)
        Range(rgeout(2, i), rgeout(smpnum + 1, i)).Value = aryData
        rgeout(smpnum + 4, i) = rgeTitle.Cells(1, i)
        If bAsc Then
            For j = LBound(arrayData) To UBound(arrayData) + 1
                If j = LBound(arrayData) Then
                    rgeout(smpnum + j + 4, i) = arrayData(j) & "|fffd||fffd||fffd||fffd|"
                ElseIf j = UBound(arrayData) + 1 Then
                    rgeout(smpnum + j + 4, i) = arrayData(j - 1) & "|fffd||20f||fffd|"
                Else
                    rgeout(smpnum + j + 4, i) = arrayData(j - 1) & "-" & arrayData(j)
                End If
            Next j
        Else
            For j = LBound(arrayData) To UBound(arrayData) + 1
                If j = LBound(arrayData) Then
                    rgeout(smpnum + j + 4, i) = arrayData(j) & "|fffd||20f||fffd|"
                ElseIf j = UBound(arrayData) + 1 Then
                    rgeout(smpnum + j + 4, i) = arrayData(j - 1) & "|fffd||fffd||fffd||fffd|"
                Else
                    rgeout(smpnum + j + 4, i) = arrayData(j) & "-" & arrayData(j - 1)
                End If
            Next j
       
        End If
        j = UBound(arrayData) - LBound(arrayData) + 1 + 1
        If j > MAXCATENUM Then
            MAXCATENUM = j
        End If
    Next i
    For i = 1 To MAXCATENUM
        rgeout(smpnum + i + 4, 0) = i
    Next i
    Set rgeout = rgeOutIn(3, 1)
    Call SetRangeBorder(rgeout, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(rgeout, rgeout(3, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeout(4, 1), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To ItmNum
        Call SetRangeBorder(rgeout(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorder(Range(rgeout(2, i + 1), rgeout(3, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorder(rgeout(4, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    Next i
    Set rgeout = rgeOutIn(9, 1)
    Call SetRangeBorder(rgeout, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(rgeout, rgeout(smpnum + 1, 1)), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To ItmNum
        Call SetRangeBorder(rgeout(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorder(Range(rgeout(2, i + 1), rgeout(smpnum + 1, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    Next i
    Set rgeout = rgeOutIn(smpnum + 12, 1)
    Call SetRangeBorder(rgeout, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(rgeout, rgeout(MAXCATENUM + 1, 1)), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To ItmNum
        Call SetRangeBorder(rgeout(1, i + 1), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
        Call SetRangeBorder(Range(rgeout(2, i + 1), rgeout(MAXCATENUM + 1, i + 1)), IIf(i = 1, xlThin, xlHairline), xlThin, IIf(i = ItmNum, xlThin, xlHairline), xlThin)
    Next i
End Sub
 
Private Function CheckData(ByVal bStop As Boolean, ByVal rgedata As Range, ByVal rgeClass As Range, ByVal rgeName As Range) As Integer
    Dim dataNum As Long
    Dim ItmNum As Long, smpnum As Long
    Dim tmpRge As Range
    If rgedata Is Nothing Then
        CheckData = -1
        Exit Function
    End If
    If rgeClass Is Nothing Then
        CheckData = -2
        Exit Function
    End If
    ItmNum = rgedata.Columns.Count
    smpnum = rgedata.Rows.Count
    Set tmpRge = Range(rgedata(2, 1), rgedata(smpnum, ItmNum))
    If ItmNum <> rgeClass.Columns.Count Then
        CheckData = -2
        Exit Function
    End If
    dataNum = Application.WorksheetFunction.Count(tmpRge)
    If dataNum <> ItmNum * (smpnum - 1) And bStop Then
        CheckData = -3
        Exit Function
    End If
    If Not rgeName Is Nothing Then
        If rgeName.Rows.Count <> smpnum - 1 Or rgeName.Columns.Count <> 1 Then
            CheckData = -4
            Exit Function
        End If
    End If
    CheckData = 0
End Function

Private Sub setN2CSmpName()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgNum2Cate")
    If dlg.OptionButtons("optSmpNo").Value = xlOn Then
        Call CommSetSmpName(dlg, "RgeSmpName", False)
    Else
        Call CommSetSmpName(dlg, "RgeSmpName", True)
    End If
End Sub

Sub THR6_Num2Cate()
    Dim bStop As Boolean, bAsc As Boolean
    Dim rgeout As Range, rgedata As Range, rgeClass As Range, rgeName As Range
    Dim rtn As Integer
    Dim SmpName As Integer
    Dim dlg As DialogSheet
    Dim Ret As Boolean
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgNum2Cate")
    dlg.OptionButtons("optSmpNo").OnAction = "setN2CSmpName"
    dlg.OptionButtons("optSmpName").OnAction = "setN2CSmpName"
    dlg.OptionButtons("optSmpNo").Value = xlOn
    setN2CSmpName
redisp:
    Set rgeout = Nothing
    Set rgedata = Nothing
    Set rgeClass = Nothing
    Set rgeName = Nothing
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    Ret = dlg.Show
    If Ret Then
        Call SaveDlg(dlg)
        Set rgeout = Range(dlg.EditBoxes("RgeDataOut").text)
        Set rgeClass = Range(dlg.EditBoxes("RgeClass").text)
        Set rgedata = Range(dlg.EditBoxes("RgeDataIn").text)
        SmpName = IIf(dlg.OptionButtons("optSmpNo").Value = xlOn, 1, 2)
        If SmpName = 2 Then
            Set rgeName = Range(dlg.EditBoxes("RgeSmpName").text)
        Else
            Set rgeName = Nothing
        End If

        bStop = IIf(dlg.OptionButtons("optStop").Value = xlOn, True, False)
        bAsc = IIf(dlg.CheckBoxes("chkAsc").Value = xlOn, False, True)
        rtn = CheckData(bStop, rgedata, rgeClass, rgeName)
        If rtn < 0 Then
            If rtn = -1 Then
                MsgBox ERR_DATARANGE
            ElseIf rtn = -2 Then
                MsgBox ERR_CLASSRANGE
            ElseIf rtn = -3 Then
                MsgBox ERR_NONNUMERIC
            ElseIf rtn = -4 Then
                MsgBox ERR_NAMERANGE
            End If
            GoTo redisp
        Else
            Call subNum2Cate(bAsc, rgeout, rgedata, rgeClass, rgeName)
            rgeout.Worksheet.Activate
            rgeout.Select
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "MdlSRK"
'=======================================================
' Srk for SSS_SRK Ver3.0
'
' 2006.9 -- 2007.9 R & LSQ
' 08.9.19 LSQ renamed from "M_Srk"
' 08.12.4 LSQ : split some into MdlSR1, MdlSR3
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    '|fffd||348||34e|w|fffd||fffd|
    srcDataRef As String * 256
    AxisNum As Long      ' 2<=AxisNum<=5
    flgAllZero As Long
    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bBarChart As Long
    bGrpSame As Long           '|fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd|t|fffd||243|v|fffd||fffd||fffd|b|fffd|g
    bGrpSep As Long              '|fffd||282||303|O|fffd||fffd||fffd|t|fffd||243|v|fffd||fffd||fffd|b|fffd|g
    Yoko_Axis As Long             '1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             '1<=Tate_Axis<=AxisNum;
    bGrpCateDisp As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O; 08.12.4 LSQ add
    mojiNum As Long               '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
End Type

Private Const SDSKD_ERR_SMP As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|"

Private VbaGrp() As VBAGRAPH
Private sdskdtbl As paratbl
Private bSwap As Boolean
Private NumX As Integer
Private NumY As Integer

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function sdskd_dlg2 Lib "KKS_SubA_64.dll" (sdskdtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
    Private Declare PtrSafe Function sdskd_dlg2 Lib "KKS_SubA.dll" (sdskdtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function sdskd_dlg2 Lib "KKS_SubA_64.dll" (sdskdtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #Else
    Private Declare Function sdskd_dlg2 Lib "KKS_SubA.dll" (sdskdtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If

'==============================================================================================

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Function handleSdskdData() As Worksheet
    Dim i As Long, j As Long
    Dim rgeVar As Range, rge As Range, tmpRge As Range
    Dim tmpsht As Worksheet
    Dim sdskdvar As Variant
    Dim itemnum As Long, smpnum As Long
    Dim msgStr As String
    Dim v As Variant
    
    On Error Resume Next
    Set rgeVar = Range(sdskdtbl.srcDataRef)
    sdskdvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sdskdtbl.bGrpSame = 1 Or sdskdtbl.bGrpSep = 1) And _
              ((sdskdtbl.AxisNum < 2 Or sdskdtbl.AxisNum > 5) Or _
              (sdskdtbl.Tate_Axis < 1 Or sdskdtbl.Yoko_Axis < 1 Or sdskdtbl.Tate_Axis > sdskdtbl.AxisNum Or sdskdtbl.Yoko_Axis > sdskdtbl.AxisNum)) Then
        msgStr = "|fffd||fffd||fffd|i|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")

    itemnum = rgeVar.Columns.Count
    smpnum = rgeVar.Rows.Count
    
    Set tmpRge = PasteRange(rgeVar, rge, xlPasteValues)
    sdskdtbl.srcDataRef = Range(rge(1, 1), rge(smpnum, itemnum)).Address

    Set rge = Range(sdskdtbl.srcDataRef)
    
    For i = rge.Rows.Count To 2 Step -1
        sdskdvar = rge.Rows(i)
        If Application.WorksheetFunction.Count(sdskdvar) <> rge.Columns.Count Then
                Set handleSdskdData = Nothing
                Exit Function
        End If
        If Application.WorksheetFunction.sum(sdskdvar) = 0 Then
            If sdskdtbl.flgAllZero = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
            Else
                Set handleSdskdData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    If smpnum < 2 Then
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox SDSKD_ERR_SMP, vbCritical Or vbOKOnly
        Set handleSdskdData = Nothing
        Exit Function
    End If
    
    Set rge = tmpsht.Range("$A$1")
    
    bSwap = (smpnum < itemnum)
    If bSwap Then
        v = Range(rge(1, 1), rge(smpnum, itemnum)).Value
        For i = 1 To smpnum
            For j = 1 To itemnum
                rge(j, i) = v(i, j)
            Next j
        Next i
        NumX = itemnum
        NumY = smpnum
        sdskdtbl.srcDataRef = toXlRCstr(Range(rge(1, 1), rge(itemnum, smpnum)).Address) & vbNullChar
    Else
        NumX = smpnum
        NumY = itemnum
        sdskdtbl.srcDataRef = toXlRCstr(Range(rge(1, 1), rge(smpnum, itemnum)).Address) & vbNullChar
    End If
    
    'sdskdtbl.srcDataRef = toXlRCstr(Range(rge(1, 1), rge(smpNum, ItemNum)).Address) & vbNullChar
    
    Set handleSdskdData = tmpsht
    On Error GoTo 0
End Function

Private Sub Sdskd_setMacro(ByVal dlg As DialogSheet)
    dlg.CheckBoxes("chkSameChart").OnAction = "SDSKD_SetChart"
    dlg.CheckBoxes("chkOtherChart").OnAction = "SDSKD_SetChart"
    dlg.CheckBoxes("chkCateName").OnAction = "SDSKD_CateName"
End Sub

'open/close graph setting option
Private Sub SDSKD_SetChart()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, bSame As Boolean, bOther As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    bSame = (dlg.CheckBoxes("chkSameChart").Value = xlOn)
    bOther = (dlg.CheckBoxes("chkOtherChart").Value = xlOn)
    
    bOn = (bSame Or bOther)
    dlg.EditBoxes("Tate_Axis").Enabled = bOn
    dlg.EditBoxes("Yoko_Axis").Enabled = bOn
    dlg.CheckBoxes("chkCateName").Enabled = bOn
    
    dlg.EditBoxes("mojiNum").Enabled = IIf(bOn And dlg.CheckBoxes("chkCateName").Value = xlOn, xlOn, False)
  
    If bSame Then Call CommSetEditBox_byChk("DlgSdskd", "chkSameChart", "Yoko_Axis")
    If bOther Then Call CommSetEditBox_byChk("DlgSdskd", "chkOtherChart", "Yoko_Axis")

End Sub

'open/close category name option and set category name length
Private Sub SDSKD_CateName()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    
    bOn = (dlg.CheckBoxes("chkCateName").Value = xlOn)
    dlg.EditBoxes("mojiNum").Enabled = bOn
    
    Call CommSetEditBox_byChk("DlgSdskd", "chkCateName", "mojiNum")
End Sub
'
'|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|
'07.9.21 add
Sub KKS_SDSKD_1P01()
#If 0 Then
    Dim rtn As Integer, i As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    GVerNoXL = getExcelVerNo()
    ReDim VbaGrp(0)
    
    rtn = sdskd_dlg(CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
    If rtn = 0 And GVerNoXL >= 12 Then
        For i = 1 To UBound(VbaGrp)
            If VbaGrp(i).Type <> 0 Then
                If ConvToBSTR(VbaGrp(i)) = False Then
                    MsgBox ERR_COMMC_GENERAL
                    Exit Sub
                End If
                If VbaGrp(i).Type = 1 Then
                    Application.Run GxlaBkGraph & "!DrawSdsCateBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                ElseIf VbaGrp(i).Type = 2 Then
                    Application.Run GxlaBkGraph & "!DrawSdsCateScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                End If
            End If
        Next i
    End If
    Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph)
#Else
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim rgeVar As Range, r As Range, r1 As Range, r2 As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim tmpsht As Worksheet
    Dim v1 As Variant, v2 As Variant
    
    On Error Resume Next
    
    GVerNoXL = 12 'getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSdskd")
    
    Call Sdskd_setMacro(dlg)
    
    Call SDSKD_SetChart
    Call SDSKD_CateName
    
redisp:
   
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        sdskdtbl.srcDataRef = Trim(dlg.EditBoxes("edtDataRef").text) & vbNullChar
        sdskdtbl.AxisNum = val(dlg.EditBoxes("edtAxisNum").text)
        sdskdtbl.flgAllZero = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        sdskdtbl.bGrpSame = IIf(dlg.CheckBoxes("chkSameChart").Value = xlOn, 1, 0)
        sdskdtbl.bGrpSep = IIf(dlg.CheckBoxes("chkOtherChart").Value = xlOn, 1, 0)
        sdskdtbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").text)
        sdskdtbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").text)
        sdskdtbl.bGrpCateDisp = IIf(dlg.CheckBoxes("chkCateName").Value = xlOn, 1, 0)
        sdskdtbl.mojiNum = val(dlg.EditBoxes("mojiNum").text)
        sdskdtbl.bBarChart = 1
        
        Set tmpsht = handleSdskdData

        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        
        GVerNoXL = 12 'getExcelVerNo()
        ReDim VbaGrp(0)
        rtn = sdskd_dlg2(sdskdtbl, CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
        If rtn = 0 Then
            If bSwap Then
                Set r = ActiveSheet.Columns(1).Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A")
                If Not r Is Nothing Then
                    Set r = r.offset(1, 0)
                    Set r1 = Range(r, r.offset(0, 1).End(xlToRight))
                    Set r1 = r1.Resize(NumX, r1.Columns.Count)
                    Set r2 = r.offset(0, r1.Columns.Count + 1)
                    Set r2 = r2.Resize(NumY, r1.Columns.Count)
                    v1 = r1.Value
                    v2 = r2.Value
                    r1.Clear
                    r2.Clear
                    Set r1 = r1.offset(0, 0).Resize(NumY, r1.Columns.Count)
                    Set r2 = r2.offset(0, 0).Resize(NumX, r1.Columns.Count)
                    r1 = v2
                    r2 = v1
                    Call SetRangeBorder(r1(1, 1), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(r1(1, 2).Resize(1, r1.Columns.Count - 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    Call SetRangeBorder(r1(2, 1).Resize(r1.Rows.Count - 1, 1), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(r1(2, 2).Resize(r1.Rows.Count - 1, r1.Columns.Count - 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    Call SetRangeBorder(r2(1, 1), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(r2(1, 2).Resize(1, r2.Columns.Count - 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    Call SetRangeBorder(r2(2, 1).Resize(r2.Rows.Count - 1, 1), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(r2(2, 2).Resize(r2.Rows.Count - 1, r2.Columns.Count - 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
                End If
            End If
            If GVerNoXL >= 12 Then
                For i = 1 To UBound(VbaGrp)
                    If VbaGrp(i).Type <> 0 Then
                        If ConvToBSTR(VbaGrp(i)) = False Then
                            MsgBox ERR_COMMC_GENERAL
                            Exit Sub
                        End If
                        If VbaGrp(i).Type = 1 Then
                            Application.Run GxlaTai5BkGraph & "!DrawSdsCateBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                        ElseIf VbaGrp(i).Type = 2 Then
                            Application.Run GxlaTai5BkGraph & "!DrawSdsCateScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                        End If
                    End If
                Next i
                Call Comm_CutDataLink(ActiveWorkbook, GxlaTai5BkGraph)
            End If
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
#End If
End Sub

'=== EOF ===
Attribute VB_Name = "MdlSRK3"
'=======================================================
' SR3 for SSS_SRK Ver3.0
'
' 08.12.4 LSQ split from "MdlSRK"
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    '|fffd||348||34e|w|fffd||fffd|
    srcDataRef As String
    objDataRef As String
    srcNameRef As String

    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A
    bSmpScrDisp As Long   '|fffd|\|fffd||fffd|
    bSmpScrYsk As Long    '|fffd|\|fffd||fffd|
    
    'Option
    CateSelect As Long     ' |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||311|I|fffd||fffd|
    AxisNum As Double      ' 2<=AxisNum<=|fffd||3d0||fffd|-1

    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrpDisp As Long           '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|;
    flgTenGrpNum As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- 1(|fffd|P|fffd|})or 2(|fffd|S|fffd|})
    Yoko_Axis As Long             '1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             '1<=Tate_Axis<=AxisNum;
    mojiNum As Long               '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    bGrpCateDisp As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O; 08.12.4 LSQ add
  
    '
    bSmpLableNo As Long   ' |fffd||5368e||fffd||fffd||fffd||fffd||642||315|\|fffd||fffd|; TRUE : No.|fffd||155|\|fffd||fffd||fffd|C FALSE : |fffd||5368e||496||fffd||fffd||155|\|fffd||fffd|
    bExcept As Long
    bGrpCateBar As Long
    bGrpCateTen As Long
    bGrpAttrBar As Long
    bGrpAttrTen As Long
    bAttrDisp As Long       '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|\|fffd||fffd|; 08.12.4 LSQ add
    bAttrCateDisp As Long
    AttrRange As String
    AttrCateRange As String
    VarSelect As String
    bExceptAllZero As Long
    bNegNo As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private sr3tbl As paratbl

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function sr3_dlg2 Lib "KKS_SubA_64.dll" (sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
    Private Declare PtrSafe Function sr3_dlg2 Lib "KKS_SubA.dll" (sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function sr3_dlg2 Lib "KKS_SubA_64.dll" (sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #Else
    Private Declare Function sr3_dlg2 Lib "KKS_SubA.dll" (sr3tbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If

'==============================================================================================

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function
'
'|fffd||3d0||fffd||fffd|I|fffd||fffd|
'08.12.4 LSQ mdf
Private Sub Srk3_GetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    Set rgeVar = Range(dlg.EditBoxes("srcDataRef").text)
    Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect + "," + valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
'08.12.19 LSQ mdf
Private Sub Sr3CtrlMacro_SmpScr()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    bOn = (dlg.CheckBoxes("bSmpScrDisp") = xlOn)
    
    '08.12.19 LSQ add
    dlg.CheckBoxes("bAttrDisp").Enabled = bOn
    Call Sr3CtrlMacro_AttrDsp

    dlg.CheckBoxes("bTenGrpDisp").Enabled = bOn
    
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub Sr3CtrlMacro_SmpScrYsk()
    Call CommSetEditBox_byChk("DlgSrk3", "bSmpScrYsk", "objDataRef")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub Sr3CtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgSrk3", "optSmpName", "srcNameRef")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
'08.12.19 LSQ mdf
Private Sub Sr3CtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    Set ChkObj = dlg.CheckBoxes("bAttrDisp")
    bOn = (ChkObj = xlOn And ChkObj.Enabled = True) '08.12.19
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("bAttrCateDisp")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("attrCateRange").Enabled = (bOn And ChkObj = xlOn)
    
    'graph
    dlg.CheckBoxes("bGrpAttrBar").Enabled = bOn
    dlg.CheckBoxes("bGrpAttrTen").Enabled = bOn
    
    'data range
    Call CommSetEditBox_byChk("DlgSrk3", "bAttrDisp", "attrRange")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub Sr3CtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgSrk3", "bAttrCateDisp", "attrCateRange")
End Sub
'
'1|fffd|} / |fffd|S|fffd|}
Private Sub Sr3CtrlMacro_Graph()
    Call CommSetEditBox_byOpt("DlgSrk3", "flgTenGrpNum", "Tate_Axis")
    Call CommSetEditBox_byOpt("DlgSrk3", "flgTenGrpNum", "Yoko_Axis")
End Sub

'
Private Sub SR3_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("cateSelect").OnAction = "Srk3_GetVarSel"
    
    'sample score
    dlg.CheckBoxes("bSmpScrDisp").OnAction = "Sr3CtrlMacro_SmpScr"
    dlg.CheckBoxes("bSmpScrYsk").OnAction = "Sr3CtrlMacro_SmpScrYsk"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "Sr3CtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "Sr3CtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("bAttrDisp").OnAction = "Sr3CtrlMacro_AttrDsp"
    dlg.CheckBoxes("bAttrCateDisp").OnAction = "Sr3CtrlMacro_AttrCateName"
    
    'graph
    dlg.OptionButtons("flgTenGrpNum").OnAction = "Sr3CtrlMacro_Graph"
    dlg.OptionButtons("flgTenGrpNumAll").OnAction = "Sr3CtrlMacro_Graph"
End Sub
'
'08.12.4 LSQ add
'return TRUE = OK else ERROR
'
Private Function chkSr3Data() As Boolean
    Dim rgedata As Range, rgeYsk As Range, rgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemnum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgedata = Range(toXlA1str(sr3tbl.srcDataRef))
    Set rgeYsk = Range(toXlA1str(sr3tbl.objDataRef))
    Set rgeSmpName = Range(toXlA1str(sr3tbl.srcNameRef))
    Set rgeAttr = Range(toXlA1str(sr3tbl.AttrRange))
    Set rgeAttrCateName = Range(toXlA1str(sr3tbl.AttrCateRange))
    On Error GoTo 0
    
    If rgedata Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemnum = rgedata.Columns.Count
    tmpi = sr3tbl.AxisNum
    yokoNo = sr3tbl.Yoko_Axis
    tateNo = sr3tbl.Tate_Axis
    If (tmpi < 2 Or tmpi >= itemnum) Or _
       ((sr3tbl.flgTenGrpNum = 1) And (yokoNo < 1 Or yokoNo > 5 Or tateNo < 1 Or tateNo > 5)) Then
        msgStr = "|fffd||fffd||fffd|i|fffd||fffd||fffd||310||fffd||fffd|A|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bSmpScrYsk = 1 And rgeYsk Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bSmpLableNo = 0 And rgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bAttrDisp = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If sr3tbl.bAttrCateDisp = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkSr3Data = False
        Exit Function
    End If
    
    '
    chkSr3Data = True
End Function

'
'|fffd||fffd||fffd||289||fffd|3|fffd||fffd|
'
'08.12.4 LSQ mdf
Sub KKS_SR3_1P01()
    Dim i As Long
    'Dim sr3tbl As paratbl  '08.12.4 LSQ cmt
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim nameVar() As Long
    
    On Error Resume Next
    
    GVerNoXL = 12 'getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk3")
    
    Call SR3_setMacro(dlg)  '08.12.4 LSQ add
    
    'init
    Call Sr3CtrlMacro_SmpScr
    Call Sr3CtrlMacro_SmpScrYsk
    Call Sr3CtrlMacro_SmpName
    Call Sr3CtrlMacro_AttrDsp
    Call Sr3CtrlMacro_AttrCateName
    Call Sr3CtrlMacro_Graph
    
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        Else
            sr3tbl.VarSelect = m_varselect
        End If
        sr3tbl.objDataRef = toXlRCstr(dlg.EditBoxes("objDataRef").text)
        sr3tbl.srcDataRef = toXlRCstr(dlg.EditBoxes("srcDataRef").text)
        sr3tbl.srcNameRef = toXlRCstr(dlg.EditBoxes("srcNameRef").text)
        Set ChkObj = dlg.CheckBoxes("bAttrDisp")
        sr3tbl.bAttrDisp = IIf(ChkObj = xlOn And ChkObj.Enabled = True, 1, 0) '08.12.4 LSQ add, 08.12.19 LSQ mdf
        sr3tbl.AttrCateRange = toXlRCstr(dlg.EditBoxes("attrCateRange").text)
        sr3tbl.AttrRange = toXlRCstr(dlg.EditBoxes("attrRange").text)
        '
        sr3tbl.AxisNum = val(dlg.EditBoxes("axisNum").text)
        sr3tbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        
        If sr3tbl.bAttrDisp = 1 Then '08.12.4 LSQ
            sr3tbl.bAttrCateDisp = IIf(dlg.CheckBoxes("bAttrCateDisp") = xlOn, 1, 0)
            sr3tbl.bGrpAttrBar = IIf(dlg.CheckBoxes("bGrpAttrBar") = xlOn, 1, 0)
            sr3tbl.bGrpAttrTen = IIf(dlg.CheckBoxes("bGrpAttrTen") = xlOn, 1, 0)
        Else
            sr3tbl.bAttrCateDisp = 0
            sr3tbl.bGrpAttrBar = 0
            sr3tbl.bGrpAttrTen = 0
        End If
        
        sr3tbl.bGrpCateBar = IIf(dlg.CheckBoxes("bGrpCateBar") = xlOn, 1, 0)
        sr3tbl.bGrpCateTen = IIf(dlg.CheckBoxes("bGrpCateTen") = xlOn, 1, 0)
        sr3tbl.bGrpCateDisp = IIf(sr3tbl.bGrpCateTen = 1 And dlg.CheckBoxes("bGrpCateDisp") = xlOn, 1, 0) '08.12.4 LSQ add
        '
        sr3tbl.bSmpLableNo = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 1, 0)
        sr3tbl.bSmpScrDisp = IIf(dlg.CheckBoxes("bSmpScrDisp") = xlOn, 1, 0)
        sr3tbl.bSmpScrYsk = IIf(dlg.CheckBoxes("bSmpScrYsk") = xlOn, 1, 0)
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t
        sr3tbl.bTenGrpDisp = IIf(sr3tbl.bSmpScrDisp = 1 And dlg.CheckBoxes("bTenGrpDisp") = xlOn, 1, 0) '08.12.4 LSQ mdf
        
        sr3tbl.CateSelect = 0
        sr3tbl.flgTenGrpNum = IIf(dlg.OptionButtons("flgTenGrpNum") = xlOn, 1, 2)
        sr3tbl.mojiNum = val(dlg.EditBoxes("mojiNum").text)

        sr3tbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").text)
        sr3tbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").text)
        sr3tbl.bExceptAllZero = IIf(dlg.OptionButtons("bAllZeroExcept") = xlOn, 1, 0)
        sr3tbl.bNegNo = IIf(dlg.OptionButtons("bNegNo") = xlOn, 1, 0)
        
        'check; 08.12.4 LSQ add
        If chkSr3Data() = False Then
            GoTo redisp
        End If
        
        If sr3tbl.bSmpLableNo = 1 Then
            ReDim nameVar(1 To 64990, 1 To 1)
            For i = 1 To 64990
                nameVar(i, 1) = i
            Next i
            ThisWorkbook.Worksheets("TempSht").Range("A12").Resize(64990).Value = nameVar
            Erase nameVar
        End If
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        
        rtn = sr3_dlg2(sr3tbl, CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
        If rtn = 0 And GVerNoXL >= 12 Then
            For i = 1 To UBound(VbaGrp)
                If VbaGrp(i).Type <> 0 Then
                    If ConvToBSTR(VbaGrp(i)) = False Then
                        MsgBox ERR_COMMC_GENERAL
                        Exit Sub
                    End If
                    If VbaGrp(i).Type = 1 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3CateBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 2 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3CateScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 3 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3SmpScore1", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 4 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3SmpScore2", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 5 Then
                        VbaGrp(i).grpPara = VbaGrp(i).grpPara & "&From=1"               '2011.02.21 added
                        Application.Run GxlaTai5BkGraph & "!DrawSr3AttrBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 6 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3AttrScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    End If
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaTai5BkGraph)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'
'=== EOF ===

Attribute VB_Name = "MdlSrk4"
'=======================================================
' SR4 for SSS_SRK Ver3.0
'
' 2008.09 WZH
'=======================================================
Option Private Module
Option Explicit

Type Srk4Para
    rgeVar As String
    bExcept As Long
    bTitle As Long
    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrpDisp As Long           ' |fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|;
    flgTenGrpNum As Long          ' |fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- 1(|fffd|P|fffd|})or 2(|fffd|S|fffd|})
    Yoko_Axis As Long             ' 1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             ' 1<=Tate_Axis<=AxisNum;
    bCateNameDisp As Long     '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
    mojiNum As Long               ' |fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    fontNum As Long                ' |fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||303|t|fffd|H|fffd||fffd||fffd|g|fffd||752||fffd|
    'data type
    flgTblType As Long              '1 Cross Table, 2 Correspond Table
    flgDistance As Long
    flgSmpDist As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private Sr4tbl As Srk4Para

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function sr4_dlg Lib "KKS_SubA_64.dll" (Sr4tbl As Srk4Para, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #Else
    Private Declare PtrSafe Function sr4_dlg Lib "KKS_SubA.dll" (Sr4tbl As Srk4Para, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function sr4_dlg Lib "KKS_SubA_64.dll" (Sr4tbl As Srk4Para, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #Else
    Private Declare Function sr4_dlg Lib "KKS_SubA.dll" (Sr4tbl As Srk4Para, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Integer
    #End If
#End If
    

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function

Private Sub Sr4GetVarSel()
    Dim i As Integer
    Dim dlg As DialogSheet
    Dim rtn As Integer
    Dim rgeVar As Range
    Dim valvar As Variant
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    Set rgeVar = Range(dlg.EditBoxes("RgeVar").text)
    valvar = rgeVar.Value
    If err.Number <> 0 Then
        err.Clear
        m_varselect = "0"
        On Error GoTo 0
        Exit Sub
    End If
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect + "," + valvar(1, i)
    Next i
    m_varselect = VarSelect(Mid(m_varselect, 2))
    On Error GoTo 0
End Sub

'08.10.23 LSQ mdf
Private Function handleSr4Data() As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeCateName As Range
    Dim tmpsht As Worksheet
    Dim sr4obj As Variant, sr4var As Variant, sr4cate As Variant
    Dim sr4VarSel As Variant
    Dim cateNameRow As Long, smpnum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeVar = Range(Sr4tbl.rgeVar)
    sr4var = rgeVar.Value
    
    'check; 08.12.4 LSQ add -- bgn --
    msgStr = ""
    If rgeVar Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Sr4tbl.flgTenGrpNum = 1 And (Sr4tbl.Tate_Axis < 1 Or Sr4tbl.Yoko_Axis < 1) Then
        msgStr = "|fffd||fffd||fffd|i|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    'check; 08.12.4 LSQ add -- end --
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    ReDim sr4VarSel(0 To rgeVar.Columns.Count) As Long
    sr4VarSel(0) = rgeVar.Columns.Count
    For i = 1 To rgeVar.Columns.Count
        sr4VarSel(i) = i - 1
    Next i

    If Sr4tbl.bTitle = 1 Then
        For i = 1 To rgeVar.Rows.Count
            For j = 1 To sr4VarSel(0)
                rge(i, j) = rgeVar(i, sr4VarSel(j) + 1) '08.10.23 LSQ, old : rgeVar -> sr4var
            Next j
        Next i
        Sr4tbl.rgeVar = Range(rge(1, 1), rge(rgeVar.Rows.Count, sr4VarSel(0))).Address
    Else
        For i = 1 To rgeVar.Rows.Count
            For j = 1 To sr4VarSel(0)
                rge(i + 1, j) = rgeVar(i, sr4VarSel(j) + 1) '08.10.23 LSQ, old : rgeVar -> sr4var
            Next j
        Next i
        Sr4tbl.rgeVar = Range(rge(1, 1), rge(rgeVar.Rows.Count + 1, sr4VarSel(0))).Address
    End If

    Set rge = Range(Sr4tbl.rgeVar)
    smpnum = rge.Rows.Count
    
    #If 0 Then
    For i = rge.Rows.Count To 2 Step -1
        sr4var = rge.Rows(i)
        If Application.WorksheetFunction.Count(sr4var) + 1 <> rge.Columns.Count Then
            If Sr4tbl.bExcept = 1 Then
                tmpsht.Rows(i).Delete
                smpnum = smpnum - 1
            Else
                Set handleSr4Data = Nothing
                Exit Function
            End If
        End If
    Next i
    #End If
    
    Set rge = tmpsht.Range("$A$1")
    
    Sr4tbl.rgeVar = Range(rge(1, 1), rge(smpnum, sr4VarSel(0))).Address
    'end add
    
    Set handleSr4Data = tmpsht
    On Error GoTo 0
End Function

Sub KKS_SR4_1P01()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, groupArry(1 To 2) As Shape
    Dim tmpsht As Worksheet
    Dim rgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    
    On Error Resume Next
    
    GVerNoXL = 12 'getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    Set groupArry(1) = dlg.Shapes("groupVar")  '09.1.15 LSQ add
    Set groupArry(2) = dlg.Shapes("groupDist") '09.1.15 LSQ add
    
    Call SR4_setMacro(dlg)
    
    'init setting
    Call Sr4CtrlMacro_Graph
    Call Sr4CtrlMacro_DataType
    
    'dlg.Buttons("cateSelect").OnAction = vbNullString
    'dlg.Buttons("cateSelect").OnAction = "Sr4GetVarSel"
    'Sr4tbl.bTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 0)
    Sr4tbl.bTitle = 1
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    groupArry(1).Visible = False
    groupArry(2).Visible = False
    
    rtn = dlg.Show
    
    groupArry(1).Visible = True
    groupArry(2).Visible = True
    If rtn Then
        Call SaveDlg(dlg)
        Sr4tbl.rgeVar = (dlg.EditBoxes("RgeVar").text)
        Sr4tbl.bExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 0)
        Sr4tbl.flgTblType = IIf(dlg.OptionButtons("optCrossTbl").Value = xlOn, 1, 2)
        Sr4tbl.flgDistance = IIf(dlg.OptionButtons("optVarDist").Value = xlOn, 1, 2)
        'Sr4tbl.flgSmpDist = IIf(dlg.OptionButtons("optEuclDist").Value = xlOn, 1, IIf(dlg.OptionButtons("optEuclRefDist").Value = xlOn, 2, 3))
        Sr4tbl.flgSmpDist = IIf(dlg.OptionButtons("optEuclDist").Value = xlOn, 1, 2)
        Sr4tbl.bTenGrpDisp = IIf(dlg.CheckBoxes("chkTenGrpNum").Value = xlOn, 1, 0)
        Sr4tbl.bCateNameDisp = IIf(dlg.CheckBoxes("chkCateName").Value = xlOn, 1, 0)
        Sr4tbl.flgTenGrpNum = IIf(dlg.OptionButtons("optTenGrpNum").Value = xlOn, 1, 2)
        Sr4tbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").text)
        Sr4tbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").text)
        Sr4tbl.mojiNum = val(dlg.EditBoxes("mojiNum").text)
        Sr4tbl.fontNum = 9  '08.11.28 LSQ mdf, old : val(dlg.EditBoxes("fontNum").Text)
        Set tmpsht = handleSr4Data

        If tmpsht Is Nothing Then
            GoTo redisp
        End If

        Sr4tbl.rgeVar = toXlRCstr(Sr4tbl.rgeVar)
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = sr4_dlg(Sr4tbl, CInt(GVerNoXL), VbaGrp(), AddressOf ReallocGrp)
        If rtn = 0 And GVerNoXL >= 12 Then
            For i = 1 To UBound(VbaGrp)
                If VbaGrp(i).Type <> 0 Then
                    If ConvToBSTR(VbaGrp(i)) = False Then
                        MsgBox ERR_COMMC_GENERAL
                        Exit Sub
                    End If
                    Application.Run GxlaTai5BkGraph & "!DrawSr4SmpScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara, Sr4tbl.bCateNameDisp
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaTai5BkGraph)
        
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

'08.10.27 LSQ add
Private Sub SR4_setMacro(ByVal dlg As DialogSheet)
    'data type
    dlg.OptionButtons("optCrossTbl").OnAction = "Sr4CtrlMacro_DataType"
    dlg.OptionButtons("optCorrTbl").OnAction = "Sr4CtrlMacro_DataType"
    
    'dist
    dlg.OptionButtons("optVarDist").OnAction = "Sr4CtrlMacro_Dist"
    dlg.OptionButtons("optSmpDist").OnAction = "Sr4CtrlMacro_Dist"
    
    'graph
    dlg.CheckBoxes("chkTenGrpNum").OnAction = "Sr4CtrlMacro_Graph"
    
    'plot number
    dlg.OptionButtons("optTenGrpNum").OnAction = "Sr4CtrlMacro_PlotNum"
    dlg.OptionButtons("optTenGrpNumAll").OnAction = "Sr4CtrlMacro_PlotNum"
    
    'cate name
    dlg.CheckBoxes("chkCateName").OnAction = "Sr4CtrlMacro_CateName"
    
End Sub

'08.10.27 LSQ add
Private Sub Sr4OnOff_PlotNum(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    Dim optObj As OptionButton
    Set optObj = dlg.OptionButtons("optTenGrpNum")
    
    optObj.Enabled = bOn
    dlg.OptionButtons("optTenGrpNumAll").Enabled = bOn
    
    Call Sr4OnOff_Axis(dlg, bOn And optObj = xlOn)
End Sub

'08.10.27 LSQ add
Private Sub Sr4OnOff_Axis(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    dlg.EditBoxes("Tate_Axis").Enabled = bOn
    dlg.EditBoxes("Yoko_Axis").Enabled = bOn
End Sub

'08.10.27 LSQ add
Private Sub Sr4OnOff_CateMjNumFont(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    Dim ChkObj As CheckBox
    Set ChkObj = dlg.CheckBoxes("chkCateName")
    ChkObj.Enabled = bOn
    
    Call Sr4OnOff_MjNumFont(dlg, bOn And ChkObj = xlOn)
End Sub

Private Sub Sr4OnOff_MjNumFont(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    dlg.EditBoxes("mojiNum").Enabled = bOn
    'dlg.EditBoxes("fontNum").Enabled = bOn '08.11.28 LSQ cmt
End Sub

'08.10.27 LSQ add
Private Sub Sr4OnOff_Dist(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    Dim optObj As OptionButton
    Set optObj = dlg.OptionButtons("optSmpDist")
    
    dlg.OptionButtons("optVarDist").Enabled = bOn
    optObj.Enabled = bOn
    
    Call Sr4OnOff_DistType(dlg, bOn And optObj = xlOn)
End Sub

'08.10.27 LSQ add
Private Sub Sr4OnOff_DistType(ByVal dlg As DialogSheet, ByVal bOn As Boolean)
    dlg.OptionButtons("optEuclDist").Enabled = bOn
    dlg.OptionButtons("optEuclRefDist").Enabled = bOn
    'dlg.OptionButtons("optPanDist").Enabled = bOn
End Sub

'08.10.27 LSQ mdf
Private Sub Sr4CtrlMacro_DataType()
    Dim dlg As DialogSheet
    Dim optObj As OptionButton

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    Set optObj = dlg.OptionButtons("optCorrTbl")
    
    Call Sr4OnOff_Dist(dlg, optObj = xlOn)
End Sub

'08.10.27 LSQ mdf
Private Sub Sr4CtrlMacro_Dist()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, optObj As OptionButton

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    Set optObj = dlg.OptionButtons("optSmpDist")
    bOn = (optObj = xlOn And optObj.Enabled)
    
    Call Sr4OnOff_DistType(dlg, bOn)
End Sub

'08.10.27 LSQ mdf
Private Sub Sr4CtrlMacro_Graph()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    bOn = (dlg.CheckBoxes("chkTenGrpNum") = xlOn)
    
    Call Sr4OnOff_PlotNum(dlg, bOn)
    Call Sr4OnOff_CateMjNumFont(dlg, bOn)

End Sub

'08.10.27 LSQ mdf
Private Sub Sr4CtrlMacro_PlotNum()
    Dim dlg As DialogSheet, bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    bOn = (dlg.OptionButtons("optTenGrpNum") = xlOn)
    
    Call Sr4OnOff_Axis(dlg, bOn)
    
    Call CommSetSmpName(dlg, "Yoko_Axis", bOn)
End Sub

'08.10.27 LSQ mdf
Private Sub Sr4CtrlMacro_CateName()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox

    Set dlg = ThisWorkbook.DialogSheets("DlgSrk4")
    Set ChkObj = dlg.CheckBoxes("chkCateName")
    bOn = (ChkObj = xlOn And ChkObj.Enabled)
    
    Call Sr4OnOff_MjNumFont(dlg, bOn)

    Call CommSetSmpName(dlg, "mojiNum", bOn)
End Sub

'=== EOF ===

Attribute VB_Name = "MdlTenGrp"
'=======================================================
' Graph for Sss_Use06 (Ten Graph)
'
' 2008.04 WZH
'=======================================================

Option Explicit
Private Const ERR_NULLRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Private Const ERR_NUMDATA As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Dict_Cate As Object

Private Sub DrawTenBorder(ByVal rgedata As Range)
    rgedata.Borders(xlDiagonalDown).LineStyle = xlNone
    rgedata.Borders(xlDiagonalUp).LineStyle = xlNone
    With rgedata.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgedata.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgedata.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    With rgedata.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
End Sub

Private Function ProcData(ByVal bContinue As Boolean, ByRef bTitle As Boolean, ByRef nCateNum As Integer, ByRef sht As Worksheet, _
                          ByRef RgeNameData As Range, ByRef RgeClsData As Range, _
                          ByRef RgeXData As Range, ByRef RgeYData As Range) As Integer
    Dim rge As Range, rgeFiltered As Range
    Dim i, nSmpNum As Integer
    nSmpNum = RgeYData.Rows.Count
    If nSmpNum < RgeXData.Rows.Count Then
        nSmpNum = RgeXData.Rows.Count
    End If
    If Not RgeClsData Is Nothing Then
        If nSmpNum < RgeClsData.Rows.Count Then
            nSmpNum = RgeClsData.Rows.Count
        End If
    End If
    'Set sht = RgeClsData.Worksheet.Parent.Worksheets.Add
    'Set sht = ThisWorkbook.Worksheets("TempSht")
    Set rge = sht.Range("A1")
    rge(1, 1) = "|fffd||91||316||fffd||fffd||fffd|"
    If Not bTitle Then
        rge(1, 2) = "CLASS"
        rge(1, 3) = "X"
        rge(1, 4) = "Y"
        'Set rge = rge(2, 1)
        nSmpNum = nSmpNum + 1
    End If
    If Not RgeNameData Is Nothing Then
        Call RgeNameData.Columns(1).Copy
        rge(2, 1).PasteSpecial xlPasteValues
    Else
        For i = 2 To nSmpNum
            rge(i, 1) = i - 1
        Next i
    End If
    If RgeClsData Is Nothing Then
        rge(1, 2) = "CLASS"
        For i = 2 To nSmpNum
            rge(i, 2) = 1
        Next i
    Else
        RgeClsData.Columns(1).Copy
        rge(1 + IIf(bTitle, 0, 1), 2).PasteSpecial xlPasteValues
    End If
    RgeXData.Columns(1).Copy
    rge(1 + IIf(bTitle, 0, 1), 3).PasteSpecial xlPasteValues
    RgeYData.Columns(1).Copy
    rge(1 + IIf(bTitle, 0, 1), 4).PasteSpecial xlPasteValues
    '2010.05.27 mdf:
    #If 0 Then
        rge(1, 6) = ""
        rge(1, 7) = ""
        rge(1, 8) = ""
        rge(2, 6).FormulaR1C1 = "=VALUE(RC[-4])"
        rge(2, 7).FormulaR1C1 = ">=0" '"=VALUE(RC[-4])"
        rge(2, 8).FormulaR1C1 = ">=0" '"=VALUE(RC[-4])"
        Set rge = Range(rge(1, 1), rge(nSmpNum, 4))
        rge.AdvancedFilter xlFilterCopy, sht.Range("$E$1:$H$2"), sht.Range("$J$1"), False
        Set rge = sht.Range("$J$1")
    #Else
        Set rge = Range(rge(2, 2), rge(nSmpNum, 4))
        For i = rge.Rows.Count To 1 Step -1
            'If Application.WorksheetFunction.Count(rge.Rows(i)) <> 3 Then
            If Trim(rge(i, 1)) = "-" Or Trim(rge(i, 1)) = vbNullString Or Trim(rge(i, 2)) = vbNullString Or Trim(rge(i, 3)) = vbNullString _
              Or Not IsNumeric(rge(i, 2)) Or Not IsNumeric(rge(i, 3)) Then
                If bContinue Then
                    Application.CutCopyMode = False
                    sht.Rows(rge.Rows(i).row).Delete Shift:=xlUp
                    nSmpNum = nSmpNum - 1
                Else
                    ProcData = -2
                    Exit Function
                End If
            End If
        Next i
        Set rge = Range(rge(2, 1), rge(nSmpNum, 4))
        rge.Sort Key1:=Range("B2")
        Set rge = sht.Range("A1")
    #End If
    'end mdf
    nSmpNum = sht.Range(rge(1, 2), rge(1, 2).End(xlDown)).Rows.Count
    Set rge = sht.Range(rge, rge(nSmpNum, 1))
    Set RgeNameData = sht.Range(rge(1, 1), rge(nSmpNum, 1))
    Set RgeClsData = sht.Range(rge(1, 2), rge(nSmpNum, 2))
    Set RgeXData = sht.Range(rge(1, 3), rge(nSmpNum, 3))
    Set RgeYData = sht.Range(rge(1, 4), rge(nSmpNum, 4))
    bTitle = True
    'nCateNum = Application.WorksheetFunction.max(RgeClsData)
    On Error Resume Next
    Set Dict_Cate = CreateObject("Scripting.Dictionary")
    For i = 1 To nSmpNum - 1
        Dict_Cate.Add Trim(RgeClsData(i + 1, 1)), Dict_Cate.Count + 1
    Next i
    nCateNum = Dict_Cate.Count
    On Error GoTo 0
    If nSmpNum < 1 Then 'Or Application.WorksheetFunction.min(RgeClsData) <> 1 Then
        ProcData = -1
    Else
        ProcData = 0
    End If
End Function

Private Sub SmpName_Click()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.EditBoxes("RgeNameData").Enabled = (dlg.CheckBoxes("chkSmpName").Value = xlOn)
End Sub

Private Sub CateName_Click()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.EditBoxes("RgeCateData").Enabled = (dlg.CheckBoxes("chkCateName").Value = xlOn)
End Sub

Private Sub SetMacro_TEN()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    dlg.CheckBoxes("chkSmpName").OnAction = "SmpName_Click"
    dlg.CheckBoxes("chkCateName").OnAction = "CateName_Click"
    SmpName_Click
    CateName_Click
End Sub

Public Sub THR6_GRP_TEN()
    Dim i, j, k As Integer
    Dim ii As Integer, jj As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim rgeout As Range, RgeNameData As Range, RgeCateData As Range
    Dim xrge As Range, yrge As Range, clsrge As Range, namerge As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String
    Dim tmpsht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpval As Double
    Dim colorIndex() As Variant
    Dim cht As Chart
    
    colorIndex() = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgTenGrp")
    SetMacro_TEN
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set rgeout = Nothing
    Set RgeNameData = Nothing
    Set RgeCateData = Nothing
    Application.ScreenUpdating = True
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set RgeYData = Range(toXlA1str(dlg.EditBoxes("RgeYData").text)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(dlg.EditBoxes("RgeXData").text))
        'Set rgeOut = Range(toXlA1str(dlg.EditBoxes("RgeOut").Text))
         If err.Number <> 0 Then
            MsgBox ERR_NULLRGE
            GoTo redisp
        End If
        Set RgeClsData = Range(toXlA1str(dlg.EditBoxes("RgeClsData").text))
        err.Clear
        
        bDataTitle = True 'IIf(dlg.OptionButtons("optTitle").Value = xlOn, True, False)
        bContinue = IIf(dlg.OptionButtons("optExcept").Value = xlOn, True, False)
        
        bSmpName = IIf(dlg.CheckBoxes("chkSmpName").Value = xlOn, True, False)
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(dlg.EditBoxes("RgeNameData").text))
            Set namerge = Range(toXlA1str(dlg.EditBoxes("RgeNameData").text))
        End If
        bCateName = IIf(dlg.CheckBoxes("chkCateName").Value = xlOn, True, False)
        If bCateName Then
            Set RgeCateData = Range(toXlA1str(dlg.EditBoxes("RgeCateData").text))
        End If
        bOutYes = IIf(dlg.OptionButtons("optOutYes").Value = xlOn, True, False)
        
        Set yrge = Range(toXlA1str(dlg.EditBoxes("RgeYData").text)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set xrge = Range(toXlA1str(dlg.EditBoxes("RgeXData").text))
        Set clsrge = Range(toXlA1str(dlg.EditBoxes("RgeClsData").text))
        If yrge.Columns.Count * xrge.Columns.Count > 25 Then
            MsgBox "At most 25 of graphs", vbOKOnly Or vbExclamation
            GoTo redisp
        End If
        Set tmpsht = RgeClsData.Worksheet.Parent.Worksheets.Add
        Set rgeout = tmpsht.Range("A2")
        RgeClsData.Worksheet.Activate
        For ii = 1 To xrge.Columns.Count
        nSmpNum = xrge.Rows.Count - 1
        Set RgeXData = xrge.Worksheet.Range(xrge(1, ii), xrge(nSmpNum + 1, ii))
        For jj = 1 To yrge.Columns.Count
        Set RgeXData = xrge.Worksheet.Range(xrge(1, ii), xrge(nSmpNum + 1, ii))
        Set RgeYData = yrge.Worksheet.Range(yrge(1, jj), yrge(nSmpNum + 1, jj))
        Set RgeClsData = clsrge.Worksheet.Range(clsrge(1, 1), clsrge(nSmpNum + 1, 1))
        If bSmpName Then
            Set RgeNameData = namerge.Worksheet.Range(namerge(1, 1), namerge(nSmpNum + 1, 1))
        Else
            Set RgeNameData = Nothing
        End If
        Set tmpsht = rgeout.Worksheet.Parent.Worksheets.Add
        
        Set Dict_Cate = Nothing
        rtn = ProcData(bContinue, bDataTitle, nCateNum, tmpsht, RgeNameData, RgeClsData, RgeXData, RgeYData)
        If rtn < 0 Or Dict_Cate Is Nothing Then
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            If rtn = -2 Then MsgBox ERR_NUMDATA
            GoTo redisp
        End If
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        Application.ScreenUpdating = False
        rgeout.Worksheet.Activate
        rgeout.Activate
        oRow = 1
        oCol = 1
        rgeout(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        rgeout(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            rgeout(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).text
            strYTitle = RgeYData(1, 1).text
            'Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            'Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = RgeClsData.Worksheet.Range(RgeClsData(1, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = RgeNameData.Worksheet.Range(RgeNameData(1, 1), RgeNameData(nSmpNum + 1, 1))
            'nSmpNum = nSmpNum - 1
        Else
            rgeout(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        If bCateName And Not RgeCateData Is Nothing Then
            For i = 1 To nCateNum
                rgeout(oRow, oCol + i + 1) = RgeCateData(i, 1)
            Next i
        Else
            For i = 1 To nCateNum
                rgeout(oRow, oCol + i + 1) = i
            Next i
        End If
        'oRow = oRow + 1
        For i = 1 To nSmpNum
            If bSmpName Then
                rgeout(oRow + i, oCol) = RgeNameData(i + 1, 1)
            Else
                rgeout(oRow + i, oCol) = i
            End If
            rgeout(oRow + i, oCol + 1) = RgeXData(i + 1, 1)
            'rgeOut(oRow + i, oCol + val(RgeClsData(i, 1).Value) + 1) = RgeYData(i + 1, 1)
            rgeout(oRow + i, oCol + Dict_Cate(Trim(RgeClsData(i + 1, 1))) + 1) = RgeYData(i + 1, 1)
        Next i
        Set RgeTmp = Range(rgeout(2, 1), rgeout(nSmpNum + 2, nCateNum + 2))
        For i = 1 To nCateNum + 2
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        If nSmpNum > 1 Then
            Set RgeTmp = Range(rgeout(3, 2), rgeout(nSmpNum + 2, nCateNum + 2))
        Else
            Set RgeTmp = Range(rgeout(3, 2), rgeout(nSmpNum + 3, nCateNum + 2))
        End If
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        rgeout.Worksheet.Activate
        rgeout(1, 1).Activate
        'ActiveSheet.Paste
        Set cht = Comm_GetTmplGrp(rgeout(1, 1), GxlaTai5BkGraph, "tmplTenGrp", "grpTen") '11.5.31 mdf GxlaTai5BkGraph
        Call ActiveChart.SetSourceData(RgeTmp, xlByColumns)
        err.Clear
        ActiveChart.Legend.Position = xlLegendPositionRight
        For i = nCateNum To 1 Step -1
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).name = "='" & RgeTmp.Worksheet.name & "'!" & toXlRCstr(rgeout(2, i + 2).Address)
            If err.Number > 0 Then
                ActiveChart.Legend.LegendEntries(i).Delete
                err.Clear
            End If
        Next i
        ActiveChart.Axes(xlValue).AxisTitle.Characters.text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.text = strXTitle
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.text = RgeNameData(j + 1, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                .MarkerBackgroundColorIndex = colorIndex((i - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                .MarkerStyle = xlCircle
                .Smooth = False
                .MarkerSize = 6
                .Shadow = False
                .Border.LineStyle = xlNone
            End With
        Next i
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        If bOutYes Then
            Set RgeTmp = rgeout(nSmpNum + 4, 1)
            If RgeTmp.row < ActiveChart.Parent.BottomRightCell.row Then
                Set RgeTmp = rgeout.Worksheet.Cells(ActiveChart.Parent.BottomRightCell.row + 1, ActiveChart.Parent.TopLeftCell.Column)
            End If
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            For i = 1 To nCateNum
                RgeTmp(i, 1) = rgeout(2, i + 2)
                k = 0
                For j = 1 To nSmpNum
                    If val(RgeClsData(j, 1)) = i Then
                        k = k + 1
                        ReDim Preserve xData(1 To k)
                        ReDim Preserve yData(1 To k)
                        xData(k) = RgeXData(j, 1)
                        yData(k) = RgeYData(j, 1)
                    End If
                Next j
                If k > 1 Then
                    tmpval = Application.WorksheetFunction.Correl(xData, yData)
                    RgeTmp(i, 2) = tmpval
                Else
                    RgeTmp(i, 2) = "-"
                End If
            Next i
            RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
            RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
            Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
            Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        rgeout.Worksheet.Activate
        rgeout.Activate
        Set rgeout = rgeout(nSmpNum + 7, 1)
        If bOutYes Then
            Set rgeout = rgeout(nCateNum + 3, 1)
        End If
        Next jj
        Next ii
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

Public Sub drawTenGrp(ByVal yrge As String, ByVal xrge As String, ByVal clsrge As String, _
                          ByVal OutRge As String, ByVal namerge As String, ByVal strpara As String)
    Dim i, j, k As Integer
    Dim rtn As Integer
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim rgeout As Range, RgeNameData As Range, RgeCateData As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim bHasLegend As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String, strChtTitle  As String
    Dim tmpsht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpval As Double
    Dim colorIndex() As Variant
    Dim cht As Chart
    Dim para As Object
    Dim grpWidth As Integer, grpHeight As Integer
    Dim flgMarker As Integer
    
    colorIndex() = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    On Error Resume Next
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set rgeout = Nothing
    Set RgeNameData = Nothing
    
    If 1 Then
        Set RgeYData = Range(toXlA1str(yrge)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(xrge))
        Set RgeClsData = Range(toXlA1str(clsrge))
        Set rgeout = Range(toXlA1str(OutRge))
        Set para = Comm_SetDict(strpara)
        If para.exists("Marker") Then
            flgMarker = para("Marker")
        Else
            flgMarker = 0
        End If
        If para.exists("Width") Then
            grpWidth = para("Width")
        Else
            grpWidth = 0
        End If
        If para.exists("Height") Then
            grpHeight = para("Height")
        Else
            grpHeight = 0
        End If
        
        bDataTitle = True
        bContinue = True
        
        If para.exists("SmpName") Then
            bSmpName = (para("SmpName") = 1)
        Else
            bSmpName = True
        End If
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(namerge))
        End If
        If para.exists("CateName") Then
            bCateName = (para("CateName") = 1)
        Else
            bCateName = False
        End If
        If bCateName Then
            If para.exists("CateRange") Then
                Set RgeCateData = Range(toXlA1str(para("CateRange")))
                If RgeCateData Is Nothing Then
                    bCateName = False
                End If
            Else
                bCateName = False
            End If
        End If

        If para.exists("HasLegend") Then
            bHasLegend = (para("HasLegend") = 1)
        Else
            bHasLegend = False
        End If
        
        If para.exists("ChartTitle") Then
            strChtTitle = para("ChartTitle")
        Else
            strChtTitle = vbNullString
        End If
        
        bOutYes = False
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        If err.Number <> 0 Then
            Exit Sub
        End If
        
        Set tmpsht = rgeout.Worksheet.Parent.Worksheets.Add
        
        Set Dict_Cate = Nothing
        rtn = ProcData(bContinue, bDataTitle, nCateNum, tmpsht, RgeNameData, RgeClsData, RgeXData, RgeYData)
        If rtn < 0 Or Dict_Cate Is Nothing Then Exit Sub
        nSmpNum = RgeXData.Rows.Count - 1
        
        Application.ScreenUpdating = False
        rgeout.Worksheet.Activate
        rgeout.Select
        oRow = 1
        oCol = 1
        rgeout(oRow, oCol).Resize(nSmpNum + 2, nCateNum + 3).ClearContents
        rgeout(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        rgeout(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            rgeout(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).text
            strYTitle = RgeYData(1, 1).text
            Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = Range(RgeClsData(2, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = Range(RgeNameData(2, 1), RgeNameData(nSmpNum + 1, 1))
            'nSmpNum = nSmpNum - 1
        Else
            rgeout(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        If bCateName Then
            For i = 1 To nCateNum
                rgeout(oRow, oCol + i + 1) = RgeCateData(i, 1)
            Next i
        Else
            For i = 1 To nCateNum
                rgeout(oRow, oCol + i + 1) = i
            Next i
        End If
        'oRow = oRow + 1
        For i = 1 To nSmpNum
            If bSmpName Then
                rgeout(oRow + i, oCol) = RgeNameData(i, 1)
            Else
                rgeout(oRow + i, oCol) = i
            End If
            rgeout(oRow + i, oCol + 1) = RgeXData(i, 1)
            'rgeOut(oRow + i, oCol + val(RgeClsData(i, 1).Value) + 1) = RgeYData(i, 1)
            rgeout(oRow + i, oCol + Dict_Cate(Trim(RgeClsData(i, 1))) + 1) = RgeYData(i, 1)
        Next i
        Set RgeTmp = Range(rgeout(2, 1), rgeout(nSmpNum + 2, nCateNum + 2))
        For i = 1 To nCateNum + 2
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        If nSmpNum > 1 Then
            Set RgeTmp = Range(rgeout(3, 2), rgeout(nSmpNum + 2, nCateNum + 2))
        Else
            Set RgeTmp = Range(rgeout(3, 2), rgeout(nSmpNum + 3, nCateNum + 2))
        End If
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        rgeout.Worksheet.Activate
        rgeout(1, 1).Select
        'ActiveSheet.Paste
        Set cht = Comm_GetTmplGrp(rgeout(1, 1), GxlaTai5BkGraph, "tmplTenGrp", "grpTen") '11.5.31 mdf GxlaTai5BkGraph
        Call ActiveChart.SetSourceData(RgeTmp)
        err.Clear
        ActiveChart.Legend.Position = xlLegendPositionRight
        For i = nCateNum To 1 Step -1
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).name = "='" & RgeTmp.Worksheet.name & "'!" & toXlRCstr(rgeout(2, i + 2).Address)
            If err.Number > 0 Then
                ActiveChart.Legend.LegendEntries(i).Delete
                err.Clear
            End If
        Next i
        ActiveChart.Axes(xlValue).HasTitle = True
        ActiveChart.Axes(xlCategory).HasTitle = True
        ActiveChart.Axes(xlValue).AxisTitle.Characters.text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.text = strXTitle
        ActiveChart.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
        ActiveChart.Axes(xlValue).AxisTitle.Top = 6
        If strChtTitle <> vbNullString Then
            ActiveChart.chartTitle.Characters.text = strChtTitle
        End If
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.text = RgeNameData(j, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                .MarkerBackgroundColorIndex = colorIndex((i - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                If flgMarker = 0 Then
                .MarkerStyle = IIf(i = 1, xlCircle, xlDiamond)
                Else
                .MarkerStyle = IIf(flgMarker = 1, xlCircle, xlDiamond)
                .MarkerBackgroundColorIndex = colorIndex((flgMarker - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                End If
                .Smooth = False
                .MarkerSize = 6
                .Shadow = False
            End With
        Next i
        Call Comm_setChartPosSize(ActiveChart.Parent, rgeout(1, 1), grpHeight, grpWidth)
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        ActiveChart.HasLegend = False
        If para.exists("HasLegend") Then
            ActiveChart.HasLegend = (para("HasLegend") = 1)
            If ActiveChart.HasLegend Then
                ActiveChart.Legend.Border.colorIndex = 1
            End If
        End If
        If bOutYes Then
            Set RgeTmp = rgeout.Worksheet.Cells(ActiveChart.Parent.BottomRightCell.row + 1, ActiveChart.Parent.TopLeftCell.Column)
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            For i = 1 To nCateNum
                RgeTmp(i, 1) = rgeout(2, i + 2)
                k = 0
                For j = 1 To nSmpNum
                    If val(RgeClsData(j, 1)) = i Then
                        k = k + 1
                        ReDim Preserve xData(1 To k)
                        ReDim Preserve yData(1 To k)
                        xData(k) = RgeXData(j, 1)
                        yData(k) = RgeYData(j, 1)
                    End If
                Next j
                If k > 1 Then
                    tmpval = Application.WorksheetFunction.Correl(xData, yData)
                    RgeTmp(i, 2) = tmpval
                Else
                    RgeTmp(i, 2) = "-"
                End If
            Next i
            RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
            RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
            Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
            Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        rgeout.Activate
    End If
    On Error GoTo 0
End Sub

'=== EOF ===
Attribute VB_Name = "Mdl_toDo"
'=======================================================
' Try Menu Item
'
' 2010.11 LSQ
'=======================================================

Option Explicit

'---|fffd||fffd||fffd|v---

'|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|
Sub nu_KKS_DkKt()
    MsgBox "KKS_DkKt"
End Sub

'|fffd||fffd||fffd|d|fffd||fffd|r
Sub KKS_Tajyu()
    MsgBox "KKS_Tajyu"
End Sub

'|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||389||fffd||fffd||202||fffd|)
Sub nu_KKS_Wks_Nsi()
    MsgBox "KKS_Wks_Nsi"
End Sub

'|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||389||fffd||fffd||fffd||fffd||fffd|)
Sub nu_KKS_Wks_Ari()
    MsgBox "KKS_Wks_Ari"
End Sub

'|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|H|fffd||fffd||fffd|X
Sub nu_KKS_Krs()
    MsgBox "KKS_Krs"
End Sub
    
'|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd|
Sub nu_KKS_Fdm()
    MsgBox "KKS_Fdm"
End Sub
    
'|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||308||fffd|v|fffd|W|fffd||fffd|
Sub nu_KKS_Kdl_Ich()
    MsgBox "KKS_Kdl_Ich"
End Sub
    
'|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||fffd|
Sub nu_KKS_Kdl_Ord()
    MsgBox "KKS_Kdl_Ord"
End Sub
    
'|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||fffd|
Sub nu_KKS_Spm_Ord()
    MsgBox "KKS_Spm_Ord"
End Sub
    
'|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}
Sub KKS_Mosaic_1P01()
    'MsgBox "KKS_Mosaic"
    Application.Run GxlaMosaic & "!DoMosaic"
End Sub

'---|fffd||fffd||fffd||3d7||281||fffd||fffd||fffd||fffd||289||fffd|---

'|fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|
Sub nu_KKS_SSB()
    MsgBox "KKS_SSB"
End Sub

'|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|
Sub nu_KKS_INSI()
    MsgBox "KKS_INSI"
End Sub

'|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|
Sub nu_KKS_JKK()
    MsgBox "KKS_JKK"
End Sub

'|fffd||fffd||fffd||295||fffd||fffd||fffd|
Sub nu_KKS_HBT()
    MsgBox "KKS_HBT"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|
Sub nu_KKS_sjHBT()
    MsgBox "KKS_sjHBT"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||595||fffd||fffd||fffd|
Sub nu_KKS_sjSKN()
    MsgBox "KKS_sjSKN"
End Sub

'|fffd||4d003||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
Sub nu_KKS_biLogic()
    MsgBox "KKS_biLogic"
End Sub

'|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X
Sub nu_KKS_SDSKD()
    MsgBox "KKS_SDSKD"
End Sub

'|fffd||fffd||fffd||289||fffd|3|fffd||fffd|
Sub nu_KKS_SR3()
    MsgBox "KKS_SR3"
End Sub

'|fffd||fffd||fffd||289||fffd|4|fffd||fffd|
Sub nu_KKS_SR4()
    MsgBox "KKS_SR4"
End Sub

'---|fffd||fffd||fffd||fffd|---

'Smp : |fffd||fffd||394||fffd|r (|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)
Sub nu_KKS_IttSmp_stn()
    MsgBox "KKS_IttSmp_stn"
End Sub

'Smp : |fffd||fffd||394||fffd|r (|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)
Sub nu_KKS_IttSmp_sfe()
    MsgBox "KKS_IttSmp_sfe"
End Sub

'Sum : |fffd||fffd||394||fffd|r (|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)
Sub nu_KKS_IttSum_stn()
    MsgBox "KKS_IttSum_stn"
End Sub

'Sum : |fffd||fffd||394||fffd|r (|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)
Sub nu_KKS_IttSum_sfe()
    MsgBox "KKS_IttSum_sfe"
End Sub

'|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|
Sub KKS_NormOrder_1P01()
    'MsgBox "KKS_NormOrder"
    Application.Run GxlaNormOrder & "!Start"
End Sub

'|fffd|X|fffd|l|fffd|C|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g
Sub nu_KKS_SnakeCht()
    MsgBox "KKS_SnakeCht"
End Sub

'3 |fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||48f|W
Sub nu_KKS_3PsDataEdit()
    MsgBox "KKS_3PsDataEdit"
End Sub

'=== EOF ===
Attribute VB_Name = "PDF_EXE"
Option Explicit
'
' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||fffd|DebugTxt|fffd||fffd||fffd||82||fffd|

Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_USERS = &H80000003
Private Const ERROR_SUCCESS = 0&
Private Const ERROR_NO_MORE_ITEMS = 259&

Private Const REG_SZ = 1
Private Const REG_BINARY = 3
Private Const REG_DWORD = 4


'Private Const HKEY_LOCAL_MACHINE = &H80000002
'Private Const HKEY_CLASSES_ROOT = &H80000000
'Private Const REG_SZ = 1

Private Const STANDARD_RIGHTS_ALL = &H1F0000
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const SYNCHRONIZE = &H100000

Private Const READ_CONTROL = &H20000
Private Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Private Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Private Const KEY_EXECUTE = (KEY_READ)

'---------
Private Const KEY_SET_VALUE = &H2
Private Const KEY_CREATE_SUB_KEY = &H4
'Public Const KEY_ENUMERATE_SUB_KEYS = &H8
'Public Const KEY_NOTIFY = &H10
Private Const KEY_CREATE_LINK = &H20
'Public Const SYNCHRONIZE = &H100000
Private Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

Private Const REG_OPTION_VOLATILE = 1            ' Key is not preserved when system is rebooted
Private Const REG_OPTION_NON_VOLATILE = 0        ' Key is preserved when system is rebooted

Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Boolean
End Type
'-------

#If VBA7 Then
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As LongPtr) As Long
    Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, lpData As Any, lpcbData As Long) As Long          ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String) As Long
    Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As LongPtr, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As LongPtr, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare PtrSafe Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#Else
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
    Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
    Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As Long, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As Long, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#End If

Sub tetetet()
Attribute tetetet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim iRet As Integer
    Dim sTemp As String
    

    iRet = iExt_App_Search(".pdf", 1, sTemp)
    MsgBox sTemp

    iRet = iExt_App_Search(".pdf", 2, sTemp)
    MsgBox sTemp
End Sub


Function iExt_App_Search(sExt_str As String, iMode As Integer, ByRef sPrg_path As String) As Integer
Attribute iExt_App_Search.VB_ProcData.VB_Invoke_Func = " \n14"
'----------------------------------------
'|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|v|fffd||fffd||fffd||303|p|fffd|X|fffd||12c82||5c2||fffd|
'sPrg_path|fffd||243|p|fffd|X|fffd||292|u|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|
'|fffd|@sExt_str       |fffd||fffd||fffd||5c2||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|q(|fffd|s|fffd||fffd||fffd|I|fffd|h|fffd|t|fffd||fffd|)|fffd|@|fffd|y|fffd||fffd|z|fffd|@".PDF"
'  iMode          |fffd|f|fffd|[|fffd|^|fffd||64fe||fffd||fffd||fffd|[|fffd|h
'       1:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||303|t|fffd||fffd||fffd|p|fffd|X|fffd||302||741|@|fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe"|fffd|v
'       2:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||308||fffd||fffd||fffd||fffd||fffd||fffd|S|fffd||fffd|  |fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe""%1"|fffd|v
'|fffd|@sPrg_path      |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||30a|i|fffd|[|fffd|G|fffd||fffd||fffd|A|fffd|@|fffd|y|fffd||fffd|z|fffd|@"c:\acrobat\reader.exe"
'|fffd||7c2||fffd|l
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd||fffd||fffd|[|fffd|h|fffd||fffd|1,2|fffd||20a|O|fffd||fffd||fffd|w|fffd||80b3||fffd||a0bd||fffd|j
'--------------------------

    Dim iRet1 As Integer
    Dim sReg_Path As String
    Dim sApp_Path As String
    Dim sKey1  As String
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim sTemp3 As String
    Dim iLengs As Integer
    Dim iCnt1 As Integer
    Dim iEndCnt As Integer

    sKey1 = "\shell\open\command"
    
    '|fffd||fffd||fffd|}|fffd||302||60a4||fffd||203|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
    sTemp1 = sExt_str & sKey1
    iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
    If (iRet1 <> 1) Then
        '|fffd|s|fffd|V|fffd||1c2||fffd||fffd|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
        iRet1 = iGet_reg_string(1, sExt_str, "", sReg_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -1
            Exit Function
        End If
    
        sTemp1 = sReg_Path & sKey1
        iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -2
            Exit Function
        End If
    End If
    
    
    Select Case iMode
        Case 1 '|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||302||742||fffd||502||fffd|
            iLengs = Len(sApp_Path)
            sTemp1 = Mid(sApp_Path, 1, 1)
            iEndCnt = 0
            If (sTemp1 = Chr$(34)) Then
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||302||182||fffd||fffd||34f|I|fffd||fffd||fffd||301|u"|fffd|v|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 2 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = Chr$(34)) Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt)
            Else
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||20a|O|fffd||302||182||fffd||fffd||341|u%|fffd|v|fffd||30e||fffd|O|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 1 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = "%") Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt - 1)
            End If
            sPrg_path = sTemp3
            iExt_App_Search = 1
    
        Case 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||311|S|fffd||102||fffd||502||fffd|
            sPrg_path = sApp_Path
            iExt_App_Search = 1
        Case Else
            sPrg_path = ""
            iExt_App_Search = -3
    End Select
    
End Function







'--------------
Function iSet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, sItemStr As String)
Attribute iSet_reg_string.VB_ProcData.VB_Invoke_Func = " \n14"
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'  sItemStr:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1(|6bc||7bd||fffd||fffd||4f0||fffd||782||310||752||80aa||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|F1|fffd|`4|fffd||20a|O)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2(|6bc||7bd||fffd||637||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3(|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim index As Integer
    Dim Value As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim KeyValueLength As Long
    Dim Ret As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    Dim Ret2 As Long
        
     
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        Select Case iRegMode
            Case 1
                Ret = RegCreateKey(HKEY_CLASSES_ROOT, sRegPATH, keyhandle)
            Case 2
                Ret = RegCreateKey(HKEY_CURRENT_USER, sRegPATH, keyhandle)
            Case 3
                Ret = RegCreateKey(HKEY_LOCAL_MACHINE, sRegPATH, keyhandle)
            Case 4
                Ret = RegCreateKey(HKEY_USERS, sRegPATH, keyhandle)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||939e|
    Else
        Select Case iRegMode
            Case 1
                Ret = RegCreateKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 2
                Ret = RegCreateKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 3
                Ret = RegCreateKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 4
                Ret = RegCreateKeyEx(HKEY_USERS, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    End If
    
    If Ret <> 0 Then
        iSet_reg_string = -2
        Exit Function
    End If
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        
        If (sItemStr = "") Then
            Select Case iRegMode
                Case 1
                    Ret = RegDeleteKey(HKEY_CLASSES_ROOT, sRegPATH)
                Case 2
                    Ret = RegDeleteKey(HKEY_CURRENT_USER, sRegPATH)
                Case 3
                    Ret = RegDeleteKey(HKEY_LOCAL_MACHINE, sRegPATH)
                Case 4
                    Ret = RegDeleteKey(HKEY_USERS, sRegPATH)
                Case Else
                    iSet_reg_string = -1
                    Exit Function
            End Select
        Else
            Ret = RegSetValue(keyhandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        End If
        
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
     
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        
        'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
        If (sItemStr = "") Then
            Ret = RegDeleteValue(keyhandle, sRegItem)
        Else
            'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
            Ret = OSRegSetValueEx(keyhandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, LenB(sItemStr) + 1)
        End If
        
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
    End If
    RegCloseKey (keyhandle)
End Function

Private Function iGet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, ByRef sRegItemStr As String) As Integer
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||455||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|6bc||7bd||fffd||603||fffd||fffd|[|fffd|h|fffd||fffd||fffd||642||202||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim KeyValueLength As Long
    Dim Ret As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    Select Case iRegMode
        Case 1
            Ret = RegOpenKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 2
            Ret = RegOpenKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 3
            Ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 4
            Ret = RegOpenKeyEx(HKEY_USERS, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case Else
            sRegItemStr = ""
            iGet_reg_string = -1
            Exit Function
    End Select
    
    If Ret <> 0 Then
        sRegItemStr = ""
        iGet_reg_string = -2
        Exit Function
    End If

    
    sKeyTemp = sRegItem '|fffd|n|fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    bRet = RegQueryStringValue(keyhandle, sKeyTemp, Value)
    
    If bRet = False Then
        Ret = RegCloseKey(keyhandle)
        sRegItemStr = ""
        iGet_reg_string = -3
        Exit Function
    End If

    Ret = RegCloseKey(keyhandle)
    'Value = Trim(Left(KeyValue, KeyValueLength))
    iGet_reg_string = 1
    sRegItemStr = Value
End Function


Private Function iSet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1
'--------------------------
    Dim lRet As Long
        
    lRet = WritePrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal sKeyStr, ByVal sIniFileName)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||743|f|fffd|[|fffd|^|fffd||30a|m|fffd|F
    If (lRet = 0) Then
        iSet_Ini_String = -1
        Exit Function
    End If
    iSet_Ini_String = 1
End Function



Private Function iGet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, ByRef sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd|@sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||a3ca|
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sKeyStr:     |fffd||1cd||fffd||fffd||42f95||fffd||fffd||fffd||fffd||fffd|
'  |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-2(|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||58c|W|fffd||303|G|fffd||fffd||fffd|[|fffd|j
'--------------------------
Dim iRet As Long
Dim sGetBuffer As String
Dim sTemp1 As String
    On Error GoTo ERR_OUT
    
    sGetBuffer$ = String(512, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal "0000000000", sGetBuffer, CInt(512), ByVal sIniFileName)
    sTemp1 = Left$(sGetBuffer, InStr(sGetBuffer, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        sKeyStr = ""
        iGet_Ini_String = -1
    Else
        sKeyStr = sTemp1
        iGet_Ini_String = 1
    End If
    Exit Function
    
ERR_OUT:
    iGet_Ini_String = -1
    sKeyStr = ""

End Function

#If VBA7 Then
Private Function RegQueryStringValue(ByVal hkey As LongPtr, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#Else
Private Function RegQueryStringValue(ByVal hkey As Long, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#End If

Private Function StripTerminator(ByVal strString As String) As String
'-----------------------------------------------------------
' FUNCTION: StripTerminator
'
' |fffd||fffd||fffd||fffd||fffd||fffd||316||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B
' |fffd||fffd||fffd| Windows API |fffd||102||44f|o|fffd||fffd||fffd||155||502||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f||6c2||24e|g|fffd|p|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd||fffd||348||fffd||fffd||fffd|: [strString] - |fffd|I|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------------
    Dim intZeroPos As Integer

    intZeroPos = InStrT(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

Private Function InStrT(arg1, arg2, Optional arg3, Optional arg4)
    If IsMissing(arg4) Then
        If IsMissing(arg3) Then
            InStrT = InStr(1, UCase(arg1), UCase(arg2), 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    Else
        If arg4 = 0 Then
            InStrT = InStr(arg1, arg2, arg3, 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    End If
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




Attribute VB_Name = "commCallBack"
Function DoEvaluate(ByVal strEvaluate As String) As Double
    On Error Resume Next
    DoEvaluate = Application.Evaluate(strEvaluate)
    On Error GoTo 0
End Function
Attribute VB_Name = "commCheck"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : Check Update User
'
' 2010.11 LSQ
'=======================================================
Option Explicit
Option Private Module

Public GVerMsg As String

Const SYS_INI_Sect As String = "Esumi"           '|fffd||fffd||fffd||fffd|INI-Section|fffd||fffd|
Const SYS_INI_Key  As String = "VerMsg"          '|fffd||fffd||fffd||fffd|INI-Key|fffd||fffd|
Const MSG_NO_INIFILE As String = "|fffd||fffd||fffd||fffd||fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                                GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
         
#If VBA7 Then
Private Declare PtrSafe Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Private Declare Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'
'return TRUE OK else Illegal user
'
Function UpdateUserCheck() As Boolean
    Dim sInI_Path As String
    Dim iRet As Integer
    
    sInI_Path = getPathName()
    iRet = SubUserCheck(sInI_Path)
    
    If iRet > 0 Then    'OK
        UpdateUserCheck = True
    Else                'FAILED
        MsgBox MSG_NO_INIFILE
        UpdateUserCheck = False
    End If
    
End Function
'
'return the length of the KEY VALUE
'
Private Function SubUserCheck(ByVal IniPath As String) As Long
    Dim tmpStr As String
    tmpStr = Space$(1024)
    SubUserCheck = GetIniKey(SYS_INI_Sect, _
                      SYS_INI_Key, _
                      "", tmpStr, 1024, _
                      IniPath & "\" & "SSS_KKS1.ini")
    '
    GVerMsg = tmpStr
End Function

'
'
'Check file if exist in the folder
'
'Path : ended with "\"
'
'07.11.7 LSQ add (may be used as common function)
'08.5.29 LSQ mdf
'
Function IsFileExist(ByVal Path As String, ByVal fname As String) As Boolean
    
#If False Then '08.5.29 LSQ cmt : because ".FileSearch" error in Excel2007
    Dim fnum As Integer, i As Integer
    
    With Application.FileSearch
        .NewSearch
        .LookIn = Path
        .FileName = fname
        .MatchTextExactly = True
    End With

    If Application.FileSearch.Execute() <= 0 Then
        IsFileExist = False
        Exit Function
    End If
    
    fnum = Application.FileSearch.FoundFiles.Count
    For i = 1 To fnum
        If UCase(Application.FileSearch.FoundFiles(i)) = UCase(Path & fname) Then
            IsFileExist = True
            Exit Function
        End If
    Next i

    IsFileExist = False
#Else
    Dim fs
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    IsFileExist = fs.FileExists(Path & fname)
    
#End If

End Function
'
#If 0 Then '18.12.19 LSQ cmt
'Excel Vesion Check
'Warning Message for Excel not yet OK
'
'Excel2010 : VerNo = 14
'ErrMsgNo : 0 = no error message
'           1 = Message 1
'           2 = Message 2
'2013.9.11 LSQ
'Refer to SSSVBACM.xla ! isExcelVerOK()
'
Function isExcelVerOK_A(Optional ByVal OKVerNo As Long = 14, Optional ByVal errMsgNo As Integer = 0) As Boolean
    Dim vExcelVerChk As Variant
    Dim sLF As String
    Dim errMsg As String
   
    sLF = Chr$(10)
    '
    errMsg = ""
    If errMsgNo = 1 Then
        errMsg = "|fffd||fffd||fffd||310||fffd||fffd|i|fffd||342||fffd||fffd||fffd||fffd|p|fffd||fffd| Excel |fffd||251||389||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||702||fffd||fffd||fffd|B" & sLF & sLF & _
                 "|fffd||fffd||fffd|i|fffd||242||82||fffd||fffd||102||30f||68d||5c2||349||fffd||fffd|LHP|fffd||fffd||fffd||fffd||fffd|Q|fffd||189||fffd||fffd||fffd||fffd||fffd||fffd|B" & sLF & _
                 "http://www.esumi.co.jp/"
    End If
    
    '
    If errMsgNo = 2 Then
        errMsg = "|fffd||fffd||fffd||fffd|Excel|fffd||fffd||142||313||fffd||fffd||fffd||355||6cf||602||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B|fffd||fffd||fffd||fffd||fffd||4c2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
    End If
    
    isExcelVerOK_A = True
    
    vExcelVerChk = Application.Version
    If (OKVerNo < vExcelVerChk) Then
        MsgBox errMsg, vbCritical + vbOKOnly, "|fffd|N|fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N"
        isExcelVerOK_A = False
    End If

End Function
#End If
'
'Excel2010 : VerNo = 14
'Excel2016, Excel2019 : VerNo = 16
'
'ErrMsgNo : 0 = no error message
'
'2018.12.18 LSQ add
'
Function isExcelVerOK_B(ByVal VerNoLow As Integer, ByVal VerNoHigh As Integer, _
    Optional sProgName As String = "|fffd|G|fffd|X|fffd|~|fffd|\|fffd|t|fffd|g|fffd||313||fffd||fffd||fffd|", _
    Optional ByVal bDspMsg As Boolean = True) As Boolean
    
    Dim vExcelVerChk As Variant
    Dim sLF As String
    Dim errMsg As String
   
    sLF = Chr$(10)
    
    errMsg = "|fffd||fffd||fffd||742||fffd||fffd||fffd||fffd|p|fffd||303|G|fffd|N|fffd|Z|fffd||fffd||fffd||341|A|fffd||fffd||fffd||310||fffd||fffd|i|fffd||313||fffd||fffd||fffd||6cf||60a|O|fffd||142||fffd||fffd|B" & sLF & _
              "|fffd||fffd||fffd||d4ee||fffd||c0b5||fffd||202||fffd||fffd||a347||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||302||142||fffd||fffd||fffd||fffd||4c2||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & sLF & sLF & _
              "|fffd||fffd||fffd||fffd||fffd||fffd||8b||fffd||fffd||30a|m|fffd|F|fffd||fffd||fffd|@" & sLF & _
              "|fffd||fffd||fffd|i|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|@|fffd|u|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd||fffd|v|fffd||fffd||fffd|u|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||101|v|fffd||fffd|" & sLF & _
              "|fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    isExcelVerOK_B = True
    
    vExcelVerChk = Application.Version
    If (VerNoHigh < vExcelVerChk) Or (VerNoLow > vExcelVerChk) Then
        isExcelVerOK_B = False
        
        If bDspMsg Then
            MsgBox errMsg, vbExclamation + vbOKOnly, Title:=sProgName
        End If
    End If
    
End Function
'=== EOF ===


Attribute VB_Name = "commConst"
'===================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd||8414|
'
' 2010.11 LSQ
'===================================================
Option Explicit
'
Public Const GName_Prog As String = "EXCEL|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|" 'program name

Public Const GxlaBkGraph As String = "KKS_THR6Grp.xla" '11.5.31 old name THR6_Graph
'Public Const GxlaBkMT As String = "KKS_THR6MT.xla" '11.5.31 old name THR6_MT' 11.5.31 cmt, not used
Public Const GxlaThGraph As String = "KKS_THRGrp.xla" '11.5.31 old name THRGraph
Public Const GxlaSrkGraph As String = "KKS_srk3Grp.xla" '11.5.31 old name 'srk3graph.xla'
Public Const GxlaTai5BkGraph As String = "KKS_tk6Grp.xla" '11.5.31 old name 'Sss32Grp.xla'
'Public Const GxlaLogistic As String = "Logistic.xla"   '11.5.31 cmt, not used
Public Const GxlaMosaic As String = "KKS_MscGrp.xla" '11.6.2 old 'Mosaic_Grp.xla'
Public Const GxlaBkHSKGrp As String = "KKS_HSKGraph.xla"
Public Const GxlaNormOrder As String = "KKS_NormOrder.xla"
Public Const RibbonMenu As String = "KKS_Ribbon.xlam"
'=== EOF ===
Attribute VB_Name = "commMdl"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2010.11 LSQ
'=======================================================
Option Explicit

'11.5.30 LSQ mdf
Sub changeToSSDir()
    Call changeToPath(getPathName())
End Sub

'11.5.30 LSQ add
Sub changeToPath(ByVal pathName As String)
    Dim driveName As String
        
    If Trim(pathName) = "" Then Exit Sub 'NullString
        
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub

Function getPathName() As String
    getPathName = ThisWorkbook.Path
End Function
'
'H12.8.28 mdf LSQ : on error added
'
Function toXlRCstr(inputFormula As String) As String
    On Error Resume Next
    
    toXlRCstr = Application.ConvertFormula( _
                formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If err.Number <> 0 Then
        toXlRCstr = inputFormula
        err.Clear
    End If
    
    On Error GoTo 0
End Function
'
'|fffd||fffd||fffd||fffd||fffd||42a42||fffd|u|fffd|b|fffd|N|fffd|A|fffd|V|fffd|[|fffd|g|fffd||183|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||15a97||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|:
'   wkStr = "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
'|fffd|o|fffd||fffd|:
'   bkName = |fffd|u|fffd|b|fffd|N|fffd||fffd|; |fffd||fffd|, "toukeidt.xls" or ActiveWorkbook.Name (|fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|)
'   stName = |fffd|V|fffd|[|fffd|g|fffd||fffd|; |fffd||fffd|, "temp"
'   ceName = |fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd| (A1|fffd||30c|`|fffd||fffd|); |fffd||fffd|, "$A$1:$B$2"
'
'|fffd||fffd||fffd||30a||590||fffd||fffd||34a|e|fffd||fffd||fffd||3d7||282||182||fffd||fffd||fffd||fffd||fffd|
'H12.3.16 LSQ
'
Function getRangeInfo(ByVal rgestr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    Dim rgeObj As Range
    
    On Error Resume Next
    
    Set rgeObj = Range(rgestr)
    ceName = rgeObj.Address
    stName = rgeObj.Worksheet.name
    bkName = rgeObj.Worksheet.Parent.name
        
    getRangeInfo = IIf(err.Number <> 0, False, True)
    
    On Error GoTo 0
    
'--- the following are not used ---
'07.1.29 LSQ
#If False Then
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgestr
    
    bkName = ActiveWorkbook.name    'default
    pos = InStr(wkstr, "]")
    
#If True Then  '07.1.29; 05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True
#End If

End Function
'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
'11.5.30 LSQ mdf (old version use bksObj.Count, that not count "xla" file)
Function isBookExist(ByVal bkName As String) As Boolean
    Dim bk As Workbook
    
    On Error Resume Next
    
    Set bk = Workbooks(bkName)
    If err.Number <> 0 Or bk Is Nothing Then
        isBookExist = False
    Else
        isBookExist = True
    End If
    
    On Error GoTo 0

End Function

'
'11.5.27 (11.5.30) LSQ : add bkPath
'
Function WorkBookOpen(ByVal bkName As String, Optional ByVal bReadOnly As Boolean = True, _
    Optional ByVal bkPath As String = "") As Workbook
    Dim bkObj As Workbook
    Dim savCurDir As String
    
    If isBookExist(bkName) Then
        Set WorkBookOpen = Workbooks(bkName)
        Exit Function
    End If
    
    Application.CutCopyMode = False
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = True '10.2.12 LSQ ADD based on Esumi's Request
    Application.ScreenUpdating = False '10.2.15 LSQ : needed also based on Esumi's Request
    savCurDir = CurDir()
    
    If bkPath = "" Then '11.5.27 LSQ mdf
        Call changeToSSDir
    Else
        Call changeToPath(bkPath)
    End If
    
    On Error Resume Next
    
    Workbooks.Open FileName:=bkName, UpdateLinks:=1, ReadOnly:=bReadOnly 'old : TRUE
    
    Call changeToPath(savCurDir)
    'Application.ScreenUpdating = True  '10.2.12 LSQ cmt based on Esumi's Request
    
    Set bkObj = Workbooks(bkName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(bkName)
    End If
    
    On Error GoTo 0
    
    Set WorkBookOpen = bkObj
End Function

Sub WorkBookClose(ByVal fname As String, Optional closeFlg As Boolean = True)

    If closeFlg = False Then Exit Sub
    
    Application.DisplayAlerts = False
    
    Workbooks(fname).Close SaveChanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fname As String) As String
    MSG_CANTOPEN_FILE = fname & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If err.Number <> 0 Then
        toXlA1str = inputFormula
        err.Clear
    End If
    
    On Error GoTo 0
End Function

'
'H23.11.19 LSQ (from MAC11_TK ! SUBTK1.xls)
'
Sub SortByCol_data(ByVal DataRge As Range, ByVal orderCol As Integer, ByVal bDsnt As Boolean)
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    If orderCol <= 0 Then Exit Sub
    
    Set bgnCel = DataRge(1, orderCol)
    orderVal = IIf(bDsnt, xlDescending, xlAscending)
    
    DataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod _
        :=xlPinYin
End Sub

'=== EOF ====
Attribute VB_Name = "commSelMdl"
'===================================================
' From Sony Stat : |fffd||3d0||fffd||fffd||fffd|Visual|fffd|w|fffd||fffd|
'
' 2010.11 LSQ
'===================================================
Option Explicit

Public Const MSG_SETUNUM_LESS2 As String = "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd||fffd||fffd|1|fffd||209||fffd||fffd||142||fffd||fffd|B"
Public GxNoArray() As Integer   '|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||50d||fffd||fffd||315||6d1||fffd||fffd|z|fffd||fffd| (Temp|fffd|g|fffd|p)
Public GActShtObj As Worksheet
Public GbgnCel As Range
Public GedtRge As Object
Public GoptData As Object
Public GoptLabel As Object
Public GdlgObj As Object

Private SNameDlg As String  'dsnSelDlg or varSelDlg
Private SNameSht As String  'dsnSelSht or thrSelSht
'
Dim SsumNum As Integer, SselNum As Integer  '|fffd|I|fffd||fffd||fffd||142||fffd||fffd||9414||fffd|A|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd|
Dim SdlgObj As Object, Slboxa As Object, Slboxb As Object

'========================================================
'
'DialogSheet|fffd||fffd| |fffd||fffd| Template Sheet|fffd||fffd||fffd||30e|w|fffd||fffd|
'
'flg : |fffd||fffd||fffd|@|fffd|t|fffd||fffd||fffd|O; 1=for DSN, 2=for THR, 3=for SRK (THR|fffd|U)
'
'H12.7.18 SRK added by LSQ
'
Function InitVarSel() As Boolean
    InitVarSel = True
    SNameDlg = "dlgVarSel": SNameSht = "SelSht"
End Function

'
'|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd| :
'   1) SNameDlg, SNameSht |fffd||312|l|fffd||fffd||752||80b7||fffd||fffd|B
'   2) SNameSht |fffd|V|fffd|[|fffd|g|fffd||fffd|A2, A3:Bm; C2, C3:Cn|fffd||fffd||fffd|w|fffd||80b5||fffd||101|A|fffd||fffd||fffd||fffd||3f8||6c2||fffd||fffd||102||44f|o|fffd||fffd||fffd|B
'
Function Comm_VarSel()
    Dim stObj As Worksheet
        
    'Object|fffd|w|fffd||fffd|
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
        
    SsumNum = getListNum_CommSel(1)     '|fffd|w|fffd||fffd||142||fffd||fffd||9414|(|fffd||3d7||fffd|)
    SselNum = getListNum_CommSel(2)     '|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd|(|fffd||3d7||fffd|)
    
    If SsumNum < 1 Then SsumNum = 0
    If SselNum < 1 Then SselNum = 0
    
    '|fffd|`|fffd|F|fffd|b|fffd|N
    If SsumNum = 0 And SselNum = 0 Then
        Slboxa.ListFillRange = ""
        Slboxb.ListFillRange = ""
        
        Comm_VarSel = False
        Exit Function
    End If
    
    getItemObj(3).OnAction = "doBtnSel"
    getItemObj(4).OnAction = "doBtnDeSel"
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)
    If Slboxa.ListCount > 0 Then Slboxa.Value = 0
    If Slboxb.ListCount > 0 Then Slboxb.Value = 0
    
    'H12.8.10 LSQ add
    'SdlgObj.Labels("lblA").Text = GlblA
    'SdlgObj.Labels("lblB").Text = GlblB
    
    Comm_VarSel = SdlgObj.Show  'rtn
    
End Function
'
Function getShtObj_CommSel() As Worksheet
    Set getShtObj_CommSel = ThisWorkbook.Worksheets(SNameSht)
End Function
'
'flg : 1=listA, 2=listB;
'num : |fffd||fffd||fffd|X|fffd|g|fffd||331||fffd||fffd||44c||90||fffd||fffd|G
'
Private Function listLinkStr(flg As Integer, num As Integer) As String
    Dim listStr As String
    
    listStr = ""
    
    If num > 0 Then
        If flg = 1 Then listStr = SNameSht & "!A3:A" & (num + 2)
        If flg = 2 Then listStr = SNameSht & "!C3:C" & (num + 2)
    End If
    
    listLinkStr = listStr

End Function
'
Function getDlgObj_CommSel() As Object
    Set getDlgObj_CommSel = ThisWorkbook.DialogSheets(SNameDlg)
End Function
'
Private Function getItemObj(flg As Integer) As Object
    Set getItemObj = Nothing
    '
    Select Case flg
        Case 1: Set getItemObj = getDlgObj_CommSel().ListBoxes("lstA")
        Case 2: Set getItemObj = getDlgObj_CommSel().ListBoxes("lstB")
        Case 3: Set getItemObj = getDlgObj_CommSel().Buttons("btnSel")
        Case 4: Set getItemObj = getDlgObj_CommSel().Buttons("btnDeSel")
    End Select
End Function
'
'flg : 1 or 2 (see getCellObj())
'
Sub setListNum_CommSel(flg As Integer, num As Integer)
    getCellObj(flg) = num
End Sub
'
'flg : 1 or 2 (see getCellObj())
'
Function getListNum_CommSel(flg As Integer) As Integer
    getListNum_CommSel = val(getCellObj(flg).text)
End Function
'
'flg : 1 or 2;
'
Function getCellObj(flg As Integer) As Range
    Set getCellObj = Nothing
    '
    Select Case flg
        Case 1: Set getCellObj = getShtObj_CommSel().Range("A2")    'Number
        Case 2: Set getCellObj = getShtObj_CommSel().Range("C2")    'Number
    End Select
End Function
'
Sub doBtnSel()
    Dim i As Integer, ct As Integer
    Dim listStr As String
    Dim newNum As Integer, newNumSel As Integer
    Dim stObj As Worksheet, cellObjA As Range, cellObjb As Range
    
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
    Set cellObjA = getCellObj(1)
    Set cellObjb = getCellObj(2)
    
    SsumNum = Slboxa.ListCount
    SselNum = Slboxb.ListCount
    
    If SsumNum = 0 Then Exit Sub
    
    ct = 0
    For i = 1 To SsumNum
        If Slboxa.Selected(i) = True Then
            ct = ct + 1
                        
            stObj.Activate
            cellObjA.offset(i, 0).Range("A1:B1").Select
            Selection.Cut
            cellObjb.offset(SselNum + ct, 0).Select
            ActiveSheet.Paste
        End If
    Next i
    If ct = 0 Then Exit Sub
    
    newNum = SsumNum - ct
    newNumSel = SselNum + ct
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    stObj.Activate
    cellObjA.offset(1, 0).Range("A1:B" & SsumNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjA.offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
    
    cellObjb.offset(1, 0).Range("A1:B" & newNumSel).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjb.offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
        
    '|fffd||90||fffd||fffd||fffd||fffd||fffd|
    SsumNum = newNum
    SselNum = newNumSel
    
    Call setListNum_CommSel(1, SsumNum)
    Call setListNum_CommSel(2, SselNum)
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)
    
    'Display Selected Item Number; H17.5.25 LSQ add
    Call dispSelItemNum(newNumSel)
    
End Sub

Sub doBtnDeSel()
    Dim i As Integer, ct As Integer
    Dim listStr As String
    Dim newNum As Integer, newNumSel As Integer
    Dim stObj As Worksheet, cellObjA As Range, cellObjb As Range
    
    Set SdlgObj = getDlgObj_CommSel()
    Set Slboxa = getItemObj(1)
    Set Slboxb = getItemObj(2)
    Set stObj = getShtObj_CommSel()
    Set cellObjA = getCellObj(1)
    Set cellObjb = getCellObj(2)
    
    SsumNum = Slboxa.ListCount
    SselNum = Slboxb.ListCount
    
    If SselNum = 0 Then Exit Sub
    
    ct = 0
    For i = 1 To SselNum
        If Slboxb.Selected(i) = True Then
            ct = ct + 1
                        
            stObj.Activate
            cellObjb.offset(i, 0).Range("A1:B1").Select
            Selection.Cut
            cellObjA.offset(SsumNum + ct, 0).Select
            ActiveSheet.Paste
        End If
    Next i
    If ct = 0 Then Exit Sub
    
    newNum = SsumNum + ct
    newNumSel = SselNum - ct
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    stObj.Activate
    cellObjb.offset(1, 0).Range("A1:B" & SselNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjb.offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
    
    cellObjA.offset(1, 0).Range("A1:B" & newNum).Select
    Selection.SortSpecial SortMethod:=xlSyllabary, Key1:=cellObjA.offset(1, 1), _
        Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, _
        MatchCase:=False, Orientation:=xlTopToBottom
        
    '|fffd||90||fffd||fffd||fffd||fffd||fffd|
    SsumNum = newNum
    SselNum = newNumSel
    
    Call setListNum_CommSel(1, SsumNum)
    Call setListNum_CommSel(2, SselNum)
    
    Slboxa.ListFillRange = listLinkStr(1, SsumNum)
    Slboxb.ListFillRange = listLinkStr(2, SselNum)

    'Display Selected Item Number; H17.5.25 LSQ add
    Call dispSelItemNum(newNumSel)
    
End Sub
'
'Display Selected Item Number in the DialogBox
'
'H17.5.25 LSQ add
Private Sub dispSelItemNum(ByVal SelNum As Integer)

    Select Case UCase(SdlgObj.name)
        Case UCase("dsnSelDlg"):
        SdlgObj.Labels("lblB").text = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||fffd||fffd||74d||fffd|p (" & SelNum & ")"
    End Select
    
End Sub

'=== EOF ===


Attribute VB_Name = "commStruc"
'=======================================================
'|fffd|u|fffd||fffd||fffd|v|fffd|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||28d|\|fffd||fffd||fffd||fffd|
'
'H12.3 by LSQ
'=======================================================
'
Option Explicit
'
'|fffd||fffd||fffd||282||30e|w|fffd||fffd||fffd||fffd|e
Type DLG_Comm
    InRange As Range    '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    itemnum As Integer  '|fffd||fffd||fffd||690||fffd|
    smpnum As Long      '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    '
    OutBgnCel As Range   '|fffd||fffd||fffd||28f|o|fffd||342||30a|J|fffd|n|fffd|Z|fffd|[|fffd||fffd|
    '
    optCol As Boolean   '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|; TRUE=col else =row
    optStop As Boolean  '|fffd||fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd|; TRUE=stop else =skip
    optTitle As Boolean  '|fffd||fffd|s(|fffd||fffd|)|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||781|GTRUE=Title else =data
End Type
'
'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O
Type DLG_Suitei
    dlgCom As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nBoSyudan As Integer        '|fffd||fffd|W|fffd|c|fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|L|fffd||fffd||fffd|j
    nSyudanSize As Long         '|fffd|L|fffd||fffd||fffd||fffd|W|fffd|c|fffd||303|T|fffd|C|fffd|Y
    nFormula As Integer         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||781|i|fffd||fffd|W|fffd||fffd||fffd||38d||fffd||fffd||316||fffd||fffd|m|fffd|^|fffd||fffd||fffd|m|fffd|j
    dFormula As Double          '|fffd||fffd||fffd|m|fffd||315||fffd|W|fffd||fffd||fffd||38d||fffd|
End Type

'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|P
Type DLG_Kentei
    dlgCom As DLG_Comm
    nMethod As Integer          '|fffd||fffd||fffd||fffd||fffd||fffd|@
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dComp As Double             '|fffd||fffd|r|fffd|l
    nFormula As Integer         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dFormula As Double          '|fffd||fffd||fffd|m|fffd||315||fffd|W|fffd||fffd||fffd||38d||fffd|
End Type

'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|Q
Type DLG_Kentei2
    dlgCom1 As DLG_Comm
    dlgCom2 As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer             '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|E|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd|j
    nFormula As Integer          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    dFormula1 As Double        '|fffd||fffd||fffd|m|fffd||315||fffd|W|fffd||fffd||fffd||38d||fffd||fffd|P
    dFormula2 As Double        '|fffd||fffd||fffd|m|fffd||315||fffd|W|fffd||fffd||fffd||38d||fffd||fffd|Q
End Type

'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|R
Type DLG_Kentei3
    dlgCom As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer             '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|E|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd|j
    nFormula As Integer          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Type

'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|S                 'for |fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd|
Type DLG_Kentei4
    dlgCom1 As DLG_Comm
    dlgCom2 As DLG_Comm
    dlgCom3 As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|E|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd|j
End Type

'|fffd||fffd||fffd||fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd|T
Type DLG_Soukan
    dlgCom1 As DLG_Comm
    dlgCom2 As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer             '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|E|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd|j
    nFormula As Integer          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    nFmSize As Integer
End Type

'|fffd|x|fffd||fffd||fffd||598|A|fffd||30c||fffd||fffd||fffd|_|fffd|C|fffd|A|fffd||fffd||fffd|O
Type DLG_Dosu
    dlgCom As DLG_Comm
    '
    ktType As Integer     '|fffd||fffd||fffd||fffd|^|fffd|C|fffd|v
    expDsRge As Range     '|fffd||fffd||fffd||493|x|fffd||fffd||fffd||348||fffd|
    '
    kkStFlg As Integer    '|fffd|K|fffd||fffd||fffd||752||fffd|
    kkChiRge As Range     '|fffd|K|fffd||fffd||fffd||348||fffd|
    bgnVal As Double      '|fffd|K|fffd||fffd||fffd||14f||fffd||fffd|l
    haba As Double        '|fffd|K|fffd||fffd||fffd||50a|u
End Type

Type DLG_Dosu2
    dlgCom As DLG_Comm
    nFomularType As Integer    '|fffd||fffd||fffd||fffd||fffd|i|fffd|K|fffd||fffd||fffd|x|fffd|^|fffd||793|x|fffd||fffd|j
    nFomularSpecial As Integer '|fffd|i|fffd|C|fffd|G|fffd|c|fffd||2433||fffd|^|fffd||fffd||fffd||68a|m|fffd||fffd||fffd|j
    nZansa As Integer             '|fffd|i|fffd||fffd||fffd||202||fffd||fffd|^|fffd||fffd||fffd||fffd|j
    nKitaiZansa As Integer       '|fffd|i|fffd||fffd||fffd||493|x|fffd||fffd||fffd|j
    nTanjyunZansa As Integer   '|fffd|i|fffd|P|fffd||fffd||fffd|c|fffd||fffd||fffd|j
    nTyoseiZansa As Integer     '|fffd|i|fffd||fffd||fffd||fffd||fffd|c|fffd||fffd||fffd|j
    nPHantei As Integer           '(|fffd|L|fffd||4cd||fffd||fffd||fffd||fffd||fffd|j
End Type

Type DLG_Dosu3
    dlgCom1 As DLG_Comm
    dlgCom2 As DLG_Comm
    nDataType As Integer        '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|^|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|j
    nComp As Integer             '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|E|fffd||fffd||fffd|^|fffd||fffd||fffd||fffd||fffd|j
    nFormula As Integer          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Type
'
Type DLG_SampSize
    OutBgnCel As Range         '|fffd||fffd||fffd||28f|o|fffd||342||30a|J|fffd|n|fffd|Z|fffd|[|fffd||fffd|
    nDataType As Integer       '|fffd|f|fffd|[|fffd|^|fffd|^|fffd|C|fffd|v|fffd|i|fffd||45e6||fffd|^|fffd|W|fffd||fffd||fffd||38d||fffd||fffd|j
    dValue As Double           '|fffd||45e6||fffd||fffd||fffd||355|W|fffd||fffd||fffd||38d||fffd|
    nBoSyudan As Integer       '|fffd||fffd|W|fffd|c|fffd|i|fffd||fffd||fffd||fffd||fffd|^|fffd|L|fffd||fffd||fffd|j
    nSyudanSize As Long        '|fffd|L|fffd||fffd||fffd||fffd|W|fffd|c|fffd||303|T|fffd|C|fffd|Y
    dSeido As Double           '|fffd||fffd||fffd|x
    nCredit As Long             '|fffd|M|fffd||fffd||fffd|x
End Type

Type DLG_NormTest
    dlgCom As DLG_Comm
    nRejection As Integer       '|fffd||411||fffd||fffd|^|fffd||fffd||fffd||fffd|
    nFormula As Integer
End Type

'
Type THBS_COM
    dlgCom As DLG_Comm
    bAllItem As Boolean
    cmpval As Double
    bBosk As Boolean
    sk_fai  As Double   '|fffd|t|fffd|@|fffd|C|fffd|W|fffd||fffd|
    sk_p    As Double   '|fffd|s|fffd|A|fffd|\|fffd||fffd||fffd|W|fffd||fffd|
    sk_k    As Double   '|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd|W|fffd||fffd|
    sk_itti As Double   '|fffd||fffd|v|fffd|W|fffd||fffd|
    sk_rate As Double   '|fffd||fffd||fffd||594||fffd|
    sk_rsk  As Double   '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    sk_sp   As Double   '|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd|W|fffd||fffd|
    sk_kd  As Double    '|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd|W|fffd||fffd|
    tkryo   As Double   '|fffd||fffd||fffd|v|fffd||fffd|
    df1      As Integer    '|fffd||fffd||fffd|R|fffd|x1
    df2      As Integer    '|fffd||fffd||fffd|R|fffd|x2
    kt1Pcnt As Double   '|fffd|P|fffd||fffd||fffd|m|fffd||fffd|
    kt5Pcnt As Double   '|fffd|T|fffd||fffd||fffd|m|fffd||fffd|
    p_val   As Double   'p|fffd|l
    Upper95 As Double   '|fffd|X|fffd|T|fffd||fffd||fffd||fffd||fffd|
    Lower95 As Double   '|fffd|X|fffd|T|fffd||fffd||fffd||fffd||fffd||fffd|
    upper99 As Double   '|fffd|X|fffd|X|fffd||fffd||fffd||fffd||fffd|
    Lower99 As Double   '|fffd|X|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    kensu   As Long     '|fffd||fffd||fffd||fffd|
    gawaFlg As Integer  '0:Both|fffd|@1:Right|fffd|@2:Left
    ktFlg As Integer    '|fffd||fffd||fffd||fffd||30e||fffd||fffd|, for |fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd| only. |fffd||fffd||fffd||202||fffd|/|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|/|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    skflg   As Integer  '|fffd||fffd||fffd||582||30e||fffd||fffd|
    bMatrix As Boolean 'Matrix |fffd|w|fffd||fffd|
    bCateCode As Boolean '|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|f|fffd|[|fffd|^|fffd||30e||fffd||fffd|, for |fffd||197||fffd||fffd|W|fffd||fffd||fffd|A|fffd||fffd||fffd||594||fffd||30c|v|fffd|Z only, Jul 2003, PYJ
    htmark As String
    '
    itemnum As Integer  '|fffd||fffd||fffd||690||fffd|
    smpnum As Long      '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    '
    itemNum2 As Integer '|fffd||fffd||fffd||690||fffd|
    smpNum2 As Long     '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
End Type

'|fffd|R|fffd||fffd||fffd||fffd||fffd|S|fffd||fffd||fffd|t|fffd|E|fffd|X|fffd|~|fffd||fffd||fffd|m|fffd|t|fffd||fffd||fffd||fffd|i1|fffd|W|fffd|{|fffd|j|fffd||303|_|fffd|C|fffd|A|fffd||fffd||fffd|O
Type DLG_KOM1
    dlgCom As DLG_Comm
    
    flgJudge As Integer   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|  1: p|fffd|l, 2: |fffd||fffd||fffd|\
End Type

Type DLG_KTKOKUAM
    dlgCom As DLG_Comm
End Type
'=== EOF ===
Attribute VB_Name = "commText"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd||fffd||fffd||283|e|fffd|L|fffd|X|fffd|g
'
' 2010.11 LSQ
'=======================================================
Option Explicit

Public Const MSG_ERR_DATARAGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_EXCEED_DATE As String = GName_Prog & "|fffd||302||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||502||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_ERR_DATE As String = "|fffd||752||fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|"
Public Const MSG_ERR_RSUINIa As String = "RSUIMUSE.INI|327||fffd||642||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|." & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MSG_ERR_RSUINIb As String = "RSUIMUSE.INI|327||fffd||642||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|." & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const ERR_COMM_ITEM_SMP As String = "|fffd||348||34e|w|fffd||80aa||fffd|A|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd||12d09||7c2||fffd||fffd||102||fffd||fffd||fffd|v|fffd||202||1c1|A|fffd|K|fffd||602||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_COMMB_NUMBER As String = "|fffd|u|fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd|v|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd|v|fffd|un|fffd||312|l|fffd|v|fffd||202||1c2||256||fffd||fffd||302||fffd||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_COMMC_GENERAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|B"

'from Sss_SrkV3
Public Const MSG_GRP_DATA_ERR As String = "|fffd|O|fffd||fffd||fffd|t|fffd||303|f|fffd|[|fffd|^|fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd|N|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"

Public Const MSG_done As String = "|fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_lackData As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B" '"|fffd|w|fffd||80b3||fffd||a0bd||fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_wrongDataArea As String = "|fffd||fffd||fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_nErr As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Public Const MSG_nErr_a As String = "|fffd|x|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||a347||fffd||341|A|fffd|u|fffd||793|x|fffd||fffd||242||fffd||fffd|J|fffd|C|fffd||fffd||fffd||fffd|v|fffd||155||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B"  'H16.1.14 LSQ add
Public Const MSG_nodata As String = "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B" '"|fffd||50512|l|fffd||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|"
Public Const MSG_nodata1 As String = "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" '2017.3.28 LSQ add
Public Const MSG_naibuErr As String = "[|fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[] : "
Public Const MSG_CalcErr As String = "[|fffd|v|fffd|Z|fffd|G|fffd||fffd||fffd|[] : "
Public Const MSG_nAvgStdJun As String = "|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|x|fffd|[|fffd|X|fffd||30f||a347||fffd||242||341|A""|fffd||fffd||fffd||fffd||fffd|E|fffd||fffd||fffd||3c1|E|fffd|W|fffd||fffd||fffd||38d||fffd|""|fffd||30f||fffd||fffd||502||143|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||142||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_cannotAna As String = "|fffd||fffd||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|"

Public Const MSG_lessSmp As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_lessKensu As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"     'H16.3.3 LSQ
Public Const MSG_itemNumErr As String = "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Public Const MSG_COMM_ITM_SMP As String = "|fffd||348||34e|w|fffd||80aa||fffd|A|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd||12d09||7c2||fffd||fffd||102||fffd||fffd||fffd|v|fffd||202||1c1|A|fffd|K|fffd||602||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" & _
        vbCrLf & "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"

Public Const GSTR_err As String = "-"
Public Const GSTR_nasi As String = "|fffd||202||fffd|"

Public Const MSG_itemNum As String = "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Public Const MSG_CrsNumErr As String = "|fffd|N|fffd||fffd||fffd|X|fffd|\|fffd||fffd||fffd||fffd||fffd|e|fffd||348||342||12d02||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_smpNum As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
Public Const MSG_cateNum As String = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B" '18.9.19 LSQ
'
Public Const Dlglbl_OK As String = "OK"
Public Const Dlglbl_Cancel As String = "|fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd|"
'=== EOF ===
Attribute VB_Name = "frmAboutMe"
Attribute VB_Base = "0{6F0116EF-5DA2-42BD-8818-2CE79823DBF4}{4C4C7044-91AA-4C1D-9C25-B6558D97C143}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'=== BOF ===

Private Sub cmdOK_Click()
    frmAboutMe.Hide
End Sub


Private Sub Label14_Click()
    Dim Link As String
    Link = Label14.Caption
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & Link

End Sub

'=== EOF===
Private Sub Label9_Click()

End Sub
Attribute VB_Name = "frmPairLink"
Attribute VB_Base = "0{D193521E-082D-43E4-962E-B8762966217B}{A45E6532-CF06-433D-9CB1-8C1C27E05322}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private m_bOK As Boolean
Private m_bbDataReady As Boolean
Private oldCode As Long

Public Property Let bDataReady(ByVal bbDataReady As Boolean)
    m_bbDataReady = bbDataReady
End Property

Public Property Get OK() As Boolean
    OK = m_bOK
End Property

Private Sub btnCancel_Click()
    m_bOK = False
    m_bbDataReady = False
    Me.Hide
    On Error Resume Next
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = False
    SaveSetting PairPara.pCode
    On Error GoTo 0
End Sub

Private Sub btnDetail_Click()
    oldCode = PairPara.pCode
    GetPairLinkDetail
    SaveSetting PairPara.pCode
End Sub

Private Sub BackSetting(dest As PAIR_LINK, src As PAIR_LINK)
    dest.DataRge = src.DataRge
    dest.ClsMark = src.ClsMark
    dest.CateNum = src.CateNum
    dest.pCode = src.pCode
    dest.flgExcept = src.flgExcept
    dest.flgOrderEffect = src.flgOrderEffect
End Sub

Private Sub SetSmpName()
    Dim i As Long, j As Long, pCode As Long
    Dim itmCnt As Long
    Dim tmpStr As String, tmpStr2 As String
    Dim tmpRge As Range, tmpSmpNameRge As Range
    
    On Error Resume Next
    Application.DisplayAlerts = False
    Set tmpSmpNameRge = PairPara.WrkSht.Range(PairPara.SmpNameRge)
    itmCnt = PairPara.ValidNum
    pCode = PairPara.pCode
    If pCode <> 1 Then
        For i = 1 To itmCnt
            If tmpSmpNameRge Is Nothing Then
                tmpStr = "|fffd||fffd||fffd||fffd|" & i
            Else
                tmpStr = tmpSmpNameRge(i, 1)
            End If
            Call ActiveSheet.Cells.Replace("A-" & i, tmpStr)
            For j = 1 To itmCnt
                If i <> j Then
                    If tmpSmpNameRge Is Nothing Then
                        tmpStr2 = "|fffd||fffd||fffd||fffd|" & j
                    Else
                        tmpStr2 = tmpSmpNameRge(j, 1)
                    End If
                    Call ActiveSheet.Cells.Replace(i & "-" & j, tmpStr & "|fffd||fffd|" & tmpStr2)
                    Call ActiveSheet.Cells.Replace("A" & i & "A" & j, tmpStr & "|fffd||fffd|" & tmpStr2)
                End If
            Next j
        Next i
    End If
    If pCode = 1 Then
        For i = 1 To itmCnt
            If tmpSmpNameRge Is Nothing Then
                tmpStr = "|fffd||fffd||fffd||fffd|" & i
            Else
                tmpStr = tmpSmpNameRge(i, 1)
            End If
            Call ActiveSheet.Cells.Replace("A-" & i, tmpStr)
            For j = 1 To itmCnt
                If i <> j Then
                If tmpSmpNameRge Is Nothing Then
                    tmpStr2 = "|fffd||fffd||fffd||fffd|" & j
                Else
                    tmpStr2 = tmpSmpNameRge(j, 1)
                End If
                    If PairPara.flgOrderEffect = 1 Then
                        Call ActiveSheet.Cells.Replace(i & "-" & j, tmpStr & "|fffd||fffd|" & tmpStr2)
                    Else
                        Call ActiveSheet.Cells.Replace(i & "-" & j, tmpStr & "|fffd||fffd|" & tmpStr2)
                    End If
                End If
            Next j
        Next i
        Set tmpRge = ActiveSheet.Columns("B").Find("|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If Not tmpRge Is Nothing Then
            Set tmpRge = tmpRge(2, 1)
            For i = 1 To itmCnt
                If tmpSmpNameRge Is Nothing Then
                    tmpStr = "|fffd||fffd||fffd||fffd|" & i
                Else
                    tmpStr = tmpSmpNameRge(i, 1)
                End If
                tmpRge(i + 1, 1) = tmpStr
                tmpRge(1, i + 1) = tmpStr
            Next i
        End If
        Set tmpRge = ActiveSheet.Columns("B").Find("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If Not tmpRge Is Nothing Then
            Set tmpRge = tmpRge(2, 1)
            For i = 1 To itmCnt
                If tmpSmpNameRge Is Nothing Then
                    tmpStr = "|fffd||fffd||fffd||fffd|" & i
                Else
                    tmpStr = tmpSmpNameRge(i, 1)
                End If
                tmpRge(i + 1, 1) = tmpStr
                tmpRge(1, i + 1) = tmpStr
            Next i
        End If
        Set tmpRge = ActiveSheet.Columns("B").Find("|fffd||fffd||fffd|U|fffd||fffd||fffd||355|\")
        If Not tmpRge Is Nothing Then
            Set tmpRge = tmpRge(5, 1)
            If tmpRge(1, 3) < 1 Then
                tmpRge(1, 3).Resize(1, 5) = "|fffd|~"
            End If
        End If
    End If
    Application.DisplayAlerts = True
    On Error GoTo 0
End Sub
Private Sub btnOK_Click()
    Dim i As Long
    Dim actCel As Range
    Dim dataSht As Worksheet
    Dim bChanged As Boolean
    Dim rtnMsgBox As VbMsgBoxResult
    If Not m_bbDataReady Then Exit Sub
    BackSetting Bk_PairPara, PairPara
    PairPara.DataRge = Trim(frmPairLink.DataRge.text)
    PairPara.CateNum = IIf(frmPairLink.optStage3.Value = True, 3, _
                        IIf(frmPairLink.optStage5.Value = True, 5, _
                        IIf(frmPairLink.optStage7.Value = True, 7, 9)))
    PairPara.flgExcept = IIf(frmPairLink.optExcept.Value = True, 1, 2)
    PairPara.flgSDSort = IIf(frmPairLink.optSortUp.Value = True, 1, 2)
    PairPara.flgOrderEffect = IIf(frmPairLink.optOrderEffectOn.Value = True, 1, 2)
    PairPara.ClsMark = IIf(frmPairLink.optNormalCls.Value = True, 1, 2)
    If frmPairLink.chkDisplay.Value = True Then
        PairPara.SmpNameRge = Trim(frmPairLink.SmpNameRge.text)
    Else
        PairPara.SmpNameRge = vbNullString
    End If
    If PairPara.pCode = 5 Then
        PairPara.CateNum = 2
    End If
    PairPara.RawDataRge = PairPara.DataRge
    bChanged = bIsSettingChanged
    BackSetting PairPara, Bk_PairPara
    If bChanged And m_bbDataReady Then
        'rtnMsgBox = MsgBox("|fffd||fffd||fffd||313||fffd||fffd||fffd||341|A|fffd||fffd||fffd|@|fffd||303|f|fffd|[|fffd|^|fffd||30f||68d||5d0||752||fffd||fffd||752||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||282||315||fffd||fffd||342||fffd||fffd||3cd|X|fffd||fffd||fffd||a0bd||fffd||182||fffd||fffd||302||741|H", vbYesNo)
        rtnMsgBox = MsgBox("|fffd|f|fffd|[|fffd|^|fffd||752||fffd||fffd||241|A|fffd|I|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||3cd|X|fffd||fffd||fffd||fffd||183|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||b0b5||fffd||fffd||fffd||142||fffd||fffd||fffd||fffd|H", vbYesNo)
        If rtnMsgBox = vbYes Then
            frmPairLink.DataRge = ""
            PairPara.RawDataRge = ""
            PairPara.DataRge = ""
            m_bbDataReady = False
            Exit Sub
        Else
            
        End If
    End If
    m_bOK = True
    Set dataSht = PairPara.WrkSht
    If ittui_end Then
        oldCode = PairPara.pCode
        On Error Resume Next
        If PairPara.pCode <> 1 Then
            ActiveWorkbook.Worksheets("Sheet1").Select
            Worksheets("Sheet1").Copy After:=dataSht
            SetSmpName
            If 1 Then '2011.03.22 mdf: getExcelVerNo >= 12 Then
                Set actCel = ActiveCell
                If ConvToBSTR(PairVbaGrp(1)) Then
                    If PairVbaGrp(1).Type > 0 Then
                        PairVbaGrp(1).sheetName = ActiveSheet.name
                        Call DrawStoneGrp(PairVbaGrp(1).sheetName, PairVbaGrp(1).grpOut, PairVbaGrp(1).grpData, PairVbaGrp(1).grpPara)
                    End If
                End If
                actCel.Worksheet.Activate
                actCel.Select
                '2011.06.06 added
                ActiveSheet.Cells.Font.name = dataSht.Parent.Styles("Normal").Font.name
                ActiveSheet.Cells.Font.Size = dataSht.Parent.Styles("Normal").Font.Size
                'end add
            End If
        Else
            ActiveWorkbook.Worksheets("Sheet2").Select
            Worksheets("Sheet2").Copy After:=dataSht
            SetSmpName
            '2011.06.06 added
            ActiveSheet.Cells.Font.name = dataSht.Parent.Styles("Normal").Font.name
            ActiveSheet.Cells.Font.Size = dataSht.Parent.Styles("Normal").Font.Size
            'end add
        End If
        'datasht.Activate
        'm_bbDataReady = False
        If PairPara.pCode = 4 Then
            Set actCel = ActiveCell
            If PairPara.ClsMark = 1 Then
                For i = 1 To PairPara.CateNum
                    actCel(4, i + 1) = i
                Next i
            End If
        End If
        #If 0 Then                                  '2013.10.02 added
        If PairPara.pCode = 3 Then
            If PairPara.ClsMark = 1 Then
                For i = 1 To PairPara.CateNum
                    ActiveSheet.Cells(6, 3 + i) = i
                Next i
            End If
        End If
        #End If
        Me.Hide
    End If
    'On Error Resume Next
    'Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = False
    'On Error GoTo 0
    SaveSetting PairPara.pCode
    Application.OnTime Now + TimeValue("00:00:01"), "HideGamen"
End Sub

Private Sub RestoreSetting(ByVal pCode As Long)
    Dim tmpRge As Range
    Dim v As Variant
    On Error Resume Next
    ThisWorkbook.Worksheets("TempSht3").Range("A1").offset(0, pCode) = 1
    Set tmpRge = ThisWorkbook.Worksheets("TempSht3").Range("A2:A8").offset(0, pCode)
    tmpRge.NumberFormat = "@"
    v = tmpRge.Value2
    With PairPara
        .pCode = pCode
        .RawDataRge = v(2, 1)
        .CateNum = v(3, 1)
        .ClsMark = CLng(v(4, 1))
        If .ClsMark <> 1 And .ClsMark <> 2 Then
            .ClsMark = 1
        End If
        .flgExcept = CLng(v(5, 1))
        If .flgExcept <> 1 And .flgExcept <> 2 Then
            .flgExcept = 1
        End If
        .flgOrderEffect = CLng(v(6, 1))
        If .flgOrderEffect <> 1 And .flgOrderEffect <> 2 Then
            .flgOrderEffect = 1
        End If
    End With
    frmPairLink.DataRge = PairPara.RawDataRge
    If PairPara.CateNum <> 3 And PairPara.CateNum <> 5 And PairPara.CateNum <> 7 And PairPara.CateNum <> 9 Then
        PairPara.CateNum = 5
    End If
    frmPairLink.optStage3.Value = IIf(PairPara.CateNum = 3, True, False)
    frmPairLink.optStage5.Value = IIf(PairPara.CateNum = 5, True, False)
    frmPairLink.optStage7.Value = IIf(PairPara.CateNum = 7, True, False)
    frmPairLink.optStage9.Value = IIf(PairPara.CateNum = 9, True, False)
    frmPairLink.optNormalCls.Value = IIf(PairPara.ClsMark = 1, True, False)
    frmPairLink.optSymCls.Value = Not frmPairLink.optNormalCls.Value
    frmPairLink.optExcept.Value = IIf(PairPara.flgExcept = 1, True, False)
    If PairPara.pCode = 5 Or PairPara.pCode = 3 Or PairPara.pCode = 1 Then
        frmPairLink.optStop.Value = True
    Else
        frmPairLink.optStop.Value = Not frmPairLink.optExcept.Value
    End If
    frmPairLink.optOrderEffectOn.Value = IIf(PairPara.flgOrderEffect = 1, True, False)
    frmPairLink.optOrderEffectOff.Value = Not frmPairLink.optOrderEffectOn.Value
    On Error GoTo 0
End Sub
Private Sub SaveSetting(ByVal pCode As Long)
    Dim tmpRge As Range
    Dim v As Variant
    On Error Resume Next
    ThisWorkbook.Worksheets("TempSht3").Range("A1").offset(0, pCode) = 1
    Set tmpRge = ThisWorkbook.Worksheets("TempSht3").Range("A2:A8").offset(0, pCode)
    tmpRge.NumberFormat = "@"
    v = tmpRge.Value2
    v(1, 1) = pCode
    v(2, 1) = "'" & frmPairLink.DataRge
    v(3, 1) = IIf(frmPairLink.optStage3.Value = True, 3, _
            IIf(frmPairLink.optStage5.Value = True, 5, _
            IIf(frmPairLink.optStage7.Value = True, 7, 9)))
    v(4, 1) = IIf(frmPairLink.optNormalCls.Value, 1, 2)
    v(5, 1) = IIf(frmPairLink.optExcept.Value, 1, 2)
    v(6, 1) = IIf(frmPairLink.optOrderEffectOn.Value, 1, 2)
    tmpRge.Value = v
    On Error GoTo 0
End Sub
Private Sub SwitchForm(ByVal pCode As Long)
    Select Case pCode
        Case 1:
            grpStageNum.Enabled = True
            grpStageNum.Left = 6
            grpStageNum.Top = 6
            grpStageNum.Height = 90
            grpStageNum.Width = 72
            optStage7.Top = optStage5.Top + 18.75
            optStage7.Left = 6
            optStage9.Top = optStage7.Top + 18.75
            optStage9.Left = 6
            grpStageType.Caption = "|fffd|f|fffd|[|fffd|^|fffd||30c|`|fffd||fffd|"
            grpSDScore.Enabled = False
            grpSDScore.Top = 6
            grpSDScore.Left = 11400
            optSortUp.Value = True
            grpExData.Enabled = True
            grpExData.Top = 66
            grpExData.Left = 22200
            grpExData2.Enabled = True
            grpExData2.Top = 66
            grpExData2.Left = 192
            grpExData2.Height = 30
            lblStop.Top = 8
            optStop.Value = True
            grpStageType.Enabled = True
            grpStageType.Top = 6
            grpStageType.Left = 84
            grpOrderEffect.Enabled = True
            grpOrderEffect.Left = 84
            grpOrderEffect.Top = 66
            grpSmpName.Enabled = True
            grpSmpName.Top = 6
            grpSmpName.Left = 192
            grpDataRge.Top = 102
            grpDataRge.Left = 6
            optNormalCls.Caption = "1,2,3,4,5,|fffd||fffd||fffd|"
            optSymCls.Caption = "|fffd||fffd||fffd|,-2,-1,0,1,2,|fffd||fffd||fffd|"
            btnOK.Top = 114
            btnOK.Left = 232
            btnCancel.Top = 144
            btnCancel.Left = 232
            lblMessage.Top = 178
            
            frmPairLink.Height = 220
            frmPairLink.Width = 313
        Case 2, 3, 4:
            grpStageType.Enabled = True
            grpStageType.Top = 6
            grpStageType.Left = 114
            grpStageType.Caption = "|fffd|f|fffd|[|fffd|^|fffd||30c|`|fffd||fffd|"
            grpStageNum.Enabled = True
            grpStageNum.Top = 6
            grpStageNum.Left = 6
            grpStageNum.Height = 54
            grpStageNum.Width = 102
            optStage7.Top = optStage3.Top
            optStage7.Left = 49.5
            optStage9.Top = optStage5.Top
            optStage9.Left = 49.5
            grpSmpName.Enabled = True
            grpSmpName.Top = 6
            grpSmpName.Left = 222
            If pCode = 3 Then
                grpExData.Enabled = True
                grpExData.Top = 66
                grpExData.Left = 22200
                grpExData2.Enabled = True
                grpExData2.Top = 66
                grpExData2.Left = 222
                optStop.Value = True
                grpExData2.Height = 54
                lblStop.Top = 18
            Else
                grpExData.Enabled = True
                grpExData.Top = 66
                grpExData.Left = 222
                grpExData2.Enabled = True
                grpExData2.Top = 66
                grpExData2.Left = 22200
            End If
            grpDataRge.Enabled = True
            grpDataRge.Top = 66
            grpDataRge.Left = 6
            grpOrderEffect.Left = 10000
            grpOrderEffect.Top = 10000
            grpOrderEffect.Enabled = False
            grpSDScore.Left = 10000
            grpSDScore.Top = 10000
            grpSDScore.Enabled = False
            optOrderEffectOn.Value = True
            optSortUp.Value = True
            optNormalCls.Caption = "1,2,3,4,5,|fffd||fffd||fffd|"
            optSymCls.Caption = "|fffd||fffd||fffd|,-2,-1,0,1,2,|fffd||fffd||fffd|"
            btnOK.Top = 126
            btnOK.Left = 222
            btnCancel.Top = 126
            btnCancel.Left = 276
            lblMessage.Top = 149
            frmPairLink.Height = 193
            frmPairLink.Width = 342
        Case 5:
            grpStageType.Enabled = True
            grpStageType.Left = 6
            grpStageType.Top = 6
            grpStageType.Caption = "|fffd|f|fffd|[|fffd|^|fffd||30c|`|fffd||fffd|"
            grpExData.Enabled = True
            grpExData.Top = 6
            grpExData.Left = 11400
            grpExData2.Enabled = True
            grpExData2.Top = 6
            grpExData2.Left = 114
            optStop.Value = True
            grpSmpName.Enabled = True
            grpSmpName.Top = 6
            grpSmpName.Left = 222
            grpDataRge.Enabled = True
            grpDataRge.Top = 66
            grpDataRge.Left = 6
            grpOrderEffect.Left = 10000
            grpOrderEffect.Top = 10000
            grpOrderEffect.Enabled = False
            grpStageNum.Left = 10000
            grpStageNum.Top = 10000
            grpStageNum.Enabled = False
            grpSDScore.Left = 10000
            grpSDScore.Top = 10000
            grpSDScore.Enabled = False
            optOrderEffectOn.Value = True
            optSortUp.Value = True
            optNormalCls.Caption = "1,0"
            optSymCls.Caption = "1,-1"
            btnOK.Top = 78
            btnOK.Left = 246
            btnCancel.Top = 108
            btnCancel.Left = 246
            lblMessage.Top = 142
            frmPairLink.Height = 186
            frmPairLink.Width = 342
    End Select
End Sub

Private Sub UserForm_Activate()
    SwitchForm PairPara.pCode
    If PairPara.pCode <> oldCode Then
        'DataRge.Text = vbNullString
        m_bbDataReady = False
        SmpNameRge.text = vbNullString
        chkDisplay.Value = False
    End If
    DataRge.text = vbNullString
    RestoreSetting PairPara.pCode
    btnOK.SetFocus
End Sub

Private Sub UserForm_Initialize()
    m_bOK = False
    m_bbDataReady = False
    oldCode = PairPara.pCode
    'DataRge.Text = vbNullString
    'RestoreSetting PairPara.pCode
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Call WorkBookClose(BKNAME_|fffd||fffd||fffd||fffd|)
    SaveSetting PairPara.pCode
    On Error GoTo 0
End Sub


Attribute VB_Name = "frmVarSel"
Attribute VB_Base = "0{03C6F1F1-A22E-4E47-B378-F51FFF4A7739}{BB32B82A-CE60-404D-A083-A4C7C3D6B6CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Private m_Variables As String
Private m_Dict
Private m_DictUnsel
Private m_bIsOK As Boolean
Private m_VarList() As Integer

Private Function GetListInx(ByVal strText As String, lb As msforms.ListBox) As Integer
    Dim i As Integer, loc As Integer
    Dim tmpInx As Integer, nInx As Integer
    If lb.ListCount = 0 Then
        GetListInx = 0
        Exit Function
    End If
    nInx = CInt(m_Dict(strText))
    loc = lb.ListCount
    For i = 0 To lb.ListCount - 1
        tmpInx = CInt(m_Dict(lb.List(i)))
        If nInx < tmpInx Then
            loc = i
            Exit For
        End If
    Next i
    GetListInx = loc
End Function

Public Property Get bIsOk() As Boolean
    bIsOk = m_bIsOK
End Property

Public Property Get VarSelected() As String
    Dim i As Integer, j As Integer
    j = 0
    For i = 0 To lbSelected.ListCount - 1
        'm_VarList(m_Dict(lbSelected.List(i))) = i
        m_VarList(j) = m_Dict(lbSelected.List(i))
        j = j + 1
    Next i
    For i = 0 To lbUnselected.ListCount - 1
        'm_VarList(m_Dict(lbUnselected.List(i))) = lbSelected.ListCount + i
        m_VarList(j) = m_Dict(lbUnselected.List(i))
        j = j + 1
    Next i
    VarSelected = lbSelected.ListCount
    For i = LBound(m_VarList) To UBound(m_VarList)
        VarSelected = VarSelected & "," & m_VarList(i)
    Next i
End Property

Public Property Let Variables(ByVal vNewValue As String)
    Dim i As Integer
    Dim varList As Variant
    m_bIsOK = False
    m_Variables = vNewValue
    varList = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    ReDim m_VarList(LBound(varList) To UBound(varList))
    For i = LBound(varList) To UBound(varList)
        lbSelected.AddItem varList(i)
        m_Dict.Add varList(i), i
        m_VarList(i) = i
    Next i
End Property

Private Sub btnAdd_Click()
    Dim i As Integer
    If lbUnselected.ListCount = 0 Then Exit Sub
    For i = lbUnselected.ListCount - 1 To 0 Step -1
        If lbUnselected.Selected(i) Then
            lbSelected.AddItem lbUnselected.List(i), GetListInx(lbUnselected.List(i), lbSelected)
            lbUnselected.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnCancel_Click()
    m_bIsOK = False
    Me.Hide
End Sub

Private Sub btnOK_Click()
    m_bIsOK = True
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    Set m_Dict = CreateObject("Scripting.Dictionary")
    Set m_DictUnsel = CreateObject("Scripting.Dictionary")
    m_bIsOK = False
End Sub

Private Sub UserForm_Terminate()
    Set m_Dict = Nothing
    Set m_DictUnsel = Nothing
    m_bIsOK = False
End Sub

Private Sub btnRemove_Click()
    Dim i As Integer
    Dim strText As String
    If lbSelected.ListCount = 0 Then Exit Sub
    For i = lbSelected.ListCount - 1 To 0 Step -1
        If lbSelected.Selected(i) Then
            strText = lbSelected.List(i)
            lbUnselected.AddItem strText, GetListInx(strText, lbUnselected)
            lbSelected.RemoveItem i
        End If
    Next i
End Sub
Attribute VB_Name = "helpMdl"
'===================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : Help
'
' 2010.11 LSQ
'===================================================
Option Explicit
Option Private Module

Sub fHelp_KKSV1_1P01()
    Dim textMsg As String, prdMsg As String, dateStr As String
    
    textMsg = GVerMsg
    
    If UCase(Left(textMsg, 5)) = "DUMMY" Then   'default = blank
        textMsg = ""
    End If

    '15.10.13 LSQ add -- bgn --
    prdMsg = ""
    dateStr = chkInfo.EndDate
    If chkInfo.bYearContract Then
        prdMsg = "|fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd| : " & dateStr & "|fffd||702||fffd|"
    ElseIf (dateStr <> "0000/00/00") Then
        prdMsg = "|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd| : " & dateStr & "|fffd||702||fffd|"
    End If
    
    frmAboutMe.lblPrd = prdMsg
    'add end

    frmAboutMe.lblVerMsg.Caption = textMsg
    frmAboutMe.Show

End Sub

'***********************
Function sTAHEN_Path() As String
    sTAHEN_Path = getPathName() & "\"
End Function

Function iFile_Check(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    Dim iRet
    Dim vTemp As Variant
    iRet = 0
    On Error Resume Next
    vTemp = FileDateTime(sFileName)
    If (vTemp = "") Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFile_Check = iRet
End Function

Sub fOnlineManual_KKSV1_1P01()
    Dim sPDF_Path As String
    Dim sTemp As String
    Dim vRet As Variant
    Dim iLen As Integer
    Dim sTemp2 As String
    Dim sTemp1 As String
    Dim iRet As Integer
    Dim fname As String
    
    fname = "KKS1_HLP.pdf"
    
    sTemp = ""
    sTemp2 = sTAHEN_Path()
    '-----2006/05/25 Acrobat|fffd||20a|O|fffd||fffd|PDF|fffd|{|fffd||fffd||fffd|\|fffd|t|fffd|g|fffd||251||389||fffd||fffd||fffd||fffd||fffd||60a4||fffd||24f|C|fffd||fffd|------
    'sTemp = get_prg_ichi("Acrobat.exe")
    'If (sTemp = "") Then
    '    sTemp = get_prg_ichi("AcroRd32.exe")
    'End If
    '
    'If (sTemp = "") Then
    '    MsgBox "PDF|fffd|{|fffd||fffd||fffd|\|fffd|t|fffd|gAcrobat|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
    '    Exit Sub
    'Else
    '    iLen = Len(sTemp)
    '    sPDF_Path = Mid(sTemp, 1, iLen - 1)
    '    sTemp1 = sTemp2 & fName
    '---------------------------------------------------------------------
    iRet = iExt_App_Search(".pdf", 1, sTemp)
    '2012.09.13 added
    If (sTemp = "") Then
        iRet = iExt_App_Search("acrobat", 1, sTemp)
    End If
    'end add
    If (sTemp = "") Then
        MsgBox "PDF|fffd|{|fffd||fffd||fffd|p|fffd|\|fffd|t|fffd|g|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
        Exit Sub
    Else
        sPDF_Path = sTemp
        sTemp1 = sTemp2 & fname
    '---------------------------------------------------------------------
        iRet = iFile_Check(sTemp1)
        If (iRet = 1) Then
           ' -----2007/09/03 |fffd|\|fffd|t|fffd|g|fffd||302||fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|--------
            'sTemp = sPDF_Path & " " & sTemp2 & fName
            sTemp = sPDF_Path & " " & Chr(34) & sTemp2 & fname & Chr(34)
           '-----------------------------------------------------------------------------
            vRet = Shell(sTemp, 4)
        Else
            MsgBox "|fffd|I|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|w|fffd||fffd||fffd|v|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|", vbExclamation + vbOKOnly, GName_Prog
        End If
    End If
End Sub

'=== EOF ===

Attribute VB_Name = "mdl3PsDataEdit"
Option Explicit

Public Const MAX_CATENUM As Long = 50

Type DataDefCategory
    CateID As Long
    cateName As String
    DispName As String
End Type

Type DataDefVariables
    ID As Long
    varName As String
    CateNum As Long
    Categories(1 To MAX_CATENUM) As DataDefCategory
End Type
Public varArray(0 To 2) As DataDefVariables
Public varArray_Count As Integer

Function GetCateNum(ByRef DataRge As Range) As Long
    Dim r As Range, r1 As Range
    Dim i As Long, j As Long, validCnt As Long
    Dim v As Variant
    v = DataRge.Columns(1).Value
    ThisWorkbook.Worksheets("TempSht").Cells.ClearContents
    Set r = ThisWorkbook.Worksheets("TempSht").Range("A1").Resize(DataRge.Rows.Count, 1)
    r.Value = v
    validCnt = Application.WorksheetFunction.CountA(r)
    'r.Sort key1:=r(1, 1), _
    '        Order1:=xlAscending, _
    '        Header:=xlYes, _
    '        OrderCustom:=1, _
    '        MatchCase:=False, _
    '        Orientation:=xlTopToBottom
    Set r1 = ThisWorkbook.Worksheets("TempSht").Range("B1")
    r.AdvancedFilter Action:=xlFilterCopy, CopyToRange:=r1, Unique:=True
    Set r1 = Range(r1, r1.End(xlDown))
    If r1.Rows.Count > 0 Then
        GetCateNum = r1.Rows.Count - 1
    Else
        GetCateNum = 0
    End If
    Set DataRge = r1
    If validCnt < 2 Then GetCateNum = 0
End Function

Private Sub GetItemInfo(ByVal dataType As Long, ByVal inputrge As Range)
    Dim answer As VbMsgBoxResult
    Dim bkName As String, DataRge As String
    Dim bkstr As String, shtstr As String, rgestr As String
    Dim actSht As Worksheet
    Set actSht = ActiveSheet
    Application.Calculation = xlCalculationManual
    Dim i As Long, j As Long, k As Long, l As Long
    Dim r As Range, rCate As Range
    Dim minCateNo As Long, maxCateNo As Long
    Dim nSmpNum As Long
    
    'Get input
    Set r = inputrge
    
    'Create array
    With r
        varArray_Count = 3 '.Columns.Count
        nSmpNum = .Rows.Count - 1
        j = varArray_Count - 1
        
        'ReDim varArray(0 To j)
        
        For i = 0 To 1
            With varArray(i)
                If (Trim(r(1, i + 1)) = vbNullString) Then
                    r(1, i + 1) = "_I" & i + 1 & "_"
                End If
                .varName = r(1, i + 1)
                .ID = i + 1
                Set rCate = r.Columns(i + 1)
                .CateNum = GetCateNum(rCate)
                If .CateNum > MAX_CATENUM Then .CateNum = MAX_CATENUM
                If .CateNum > 0 And .CateNum <= MAX_CATENUM Then
                    For k = 1 To .CateNum
                        .Categories(k).CateID = k
                        .Categories(k).cateName = rCate(k + 1, 1)
                        .Categories(k).DispName = rCate(k + 1, 1)
                    Next k
                End If
            End With
        Next i
        For i = 0 To 2
            varArray(i).varName = Replace(varArray(i).varName, "|fffd|]|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
            varArray(i).varName = Replace(varArray(i).varName, "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||50d||fffd|", "|fffd|p|fffd|l|fffd||fffd||fffd||50d||fffd|")
        Next i
        With varArray(2)
            If dataType = 1 Then
                .varName = "|fffd||fffd||fffd||fffd|"
            ElseIf dataType = 2 Then
                .varName = "|fffd|]|fffd||fffd||fffd||fffd||fffd||fffd|"
            ElseIf dataType = 3 Then
                .varName = "|fffd|p|fffd|l|fffd||fffd||fffd||50d||fffd|"
            Else
                .varName = "|fffd|p|fffd|l|fffd||fffd||fffd||50d||fffd|"
            End If
            .CateNum = r.Columns.Count - 2
            For i = 1 To r.Columns.Count - 2
                .Categories(i).CateID = i
                If (Trim(r(1, 2 + i)) = vbNullString) Then
                    .Categories(i).cateName = "_C" & i + 1 & "_"
                Else
                    .Categories(i).cateName = r(1, 2 + i)
                    .Categories(i).DispName = r(1, 2 + i)
                End If
            Next i
        End With
    End With

exit_sub:
    actSht.Activate
    Exit Sub
err_handle:
    MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd||64fe||fffd||fffd||fffd||fffd||182||fffd||fffd||253||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd|N|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbInformation
    Resume exit_sub
End Sub

Private Function subDataEdit(ByVal outType As Long, ByVal DataRge As Range, ByVal OutRge As Range, ByVal inx1 As Long, ByVal inx2 As Long, ByVal inx3 As Long) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim tmpAry(0 To 2) As Long
    OutRge(1, 1) = "|fffd|f|fffd|[|fffd|^|fffd||30d|\|fffd||fffd|" & outType
    OutRge(1, 1).Font.Bold = True
    OutRge(3, 1) = varArray(inx1).varName
    OutRge(3, 2) = varArray(inx2).varName
    OutRge(2, 3) = varArray(inx3).varName
    For i = 1 To varArray(inx3).CateNum
        OutRge(3, 2 + i) = varArray(inx3).Categories(i).DispName
    Next i
    k = 4
    tmpAry(inx1) = 0
    For i = 1 To varArray(inx1).CateNum
        tmpAry(inx2) = 0
        For j = 1 To varArray(inx2).CateNum
            OutRge(k, 1) = varArray(inx1).Categories(i).DispName
            OutRge(k, 2) = varArray(inx2).Categories(j).DispName
            tmpAry(inx3) = 0
            For l = 1 To varArray(inx3).CateNum
                'outRge(k, 2 + l) = i & Format(j, "00") & Format(l, "00")
                OutRge(k, 2 + l) = DataRge(tmpAry(0) * varArray(1).CateNum + tmpAry(1) + 1, tmpAry(2) + 1)
                tmpAry(inx3) = tmpAry(inx3) + 1
            Next l
            k = k + 1
            tmpAry(inx2) = tmpAry(inx2) + 1
        Next j
        tmpAry(inx1) = tmpAry(inx1) + 1
    Next i
    k = varArray(inx1).CateNum * varArray(inx2).CateNum
    Call SetRangeBorder(OutRge(2, 3).Resize(1, varArray(inx3).CateNum), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutRge(3, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutRge(3, 3).Resize(1, varArray(inx3).CateNum), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(OutRge(4, 1).Resize(k, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(OutRge(4, 3).Resize(k, varArray(inx3).CateNum), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Set subDataEdit = OutRge(k + 6)
End Function

Private Function handle3PsData(ByVal DataRge As Range) As Range
    Dim i As Long, j As Long
    Dim r As Range
    Dim tmpsht As Worksheet
    On Error GoTo err_handler
    If DataRge Is Nothing Then Exit Function
    Set tmpsht = DataRge.Worksheet.Parent.Sheets.Add
    Set r = tmpsht.Range("$A$1")
    Call PasteRange(DataRge, r, xlPasteValues)
    Set r = r(1, 1).Resize(DataRge.Rows.Count, DataRge.Columns.Count)
    r.Sort Key1:=r(1, 1), Order1:=xlAscending, Key2:=r(1, 2) _
       , Order2:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:= _
       False, Orientation:=xlTopToBottom
    Set handle3PsData = r
exit_here:
    On Error GoTo 0
    Exit Function
err_handler:
    Resume exit_here
End Function

Private Function CheckData(ByVal DataRge As Range) As Boolean
    Dim i As Long, j As Long, k As Long, l As Long
    Dim m As Long, n As Long
    Dim r As Range, r1 As Range
    Dim tmpStr As String
    CheckData = False
    On Error Resume Next
    Set r = DataRge.Range("A2").Resize(DataRge.Rows.Count - 1, 1)
    l = 1
    For i = 1 To varArray(0).CateNum
        m = WorksheetFunction.CountIf(r, varArray(0).Categories(i).DispName)
        If m >= l Then
            If m - l + 1 <> varArray(1).CateNum Then Exit Function
            Set r1 = r(l, 2).Resize(m - l + 1, 1)
            k = 1
            For j = 1 To varArray(1).CateNum
                n = WorksheetFunction.CountIf(r1, varArray(1).Categories(j).DispName)
                If n >= k Then
                    If n - k + 1 <> 1 Then Exit Function
                    k = n + 1
                End If
            Next j
            l = m + 1
        End If
    Next i
    For i = 1 To varArray(2).CateNum
        tmpStr = varArray(2).Categories(i).DispName
        For j = 1 To varArray(2).CateNum
            If i <> j And varArray(2).Categories(j).DispName = tmpStr Then
                Exit Function
            End If
        Next j
    Next i
    On Error GoTo 0
    CheckData = True
End Function

Sub KKS_3PsDataEdit_1P01()
    Dim i As Long, j As Long, k As Long, l As Long
    Dim dataType As Long
    Dim r As Range, OutRge As Range, DataRge As Range
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("Dlg3PsDataEdit")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set r = Range(dlg.EditBoxes("edtDataRge").text)
        dataType = IIf(dlg.OptionButtons("optType1").Value = xlOn, 1, _
                          IIf(dlg.OptionButtons("optType2").Value = xlOn, 2, _
                          IIf(dlg.OptionButtons("optType3").Value = xlOn, 3, 4)))
        If r.Columns.Count < 3 Then
            MsgBox "3|fffd||fffd||20f||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly Or vbCritical
            Exit Sub
        End If
        On Error Resume Next
        Set r = handle3PsData(r)
        If r Is Nothing Then GoTo redisp
        Call GetItemInfo(dataType, r)
        For i = 1 To 3
            If varArray(i - 1).CateNum < 1 Or varArray(i - 1).CateNum > 50 Then
                MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly Or vbCritical
                Exit Sub
            End If
        Next i
        If Not CheckData(r) Then
            MsgBox "|fffd|J|fffd||fffd||502||fffd||fffd||302||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||355||3ca||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly Or vbCritical
            GoTo redisp
        End If
        Set DataRge = r(2, 3).Resize(r.Rows.Count - 1, r.Columns.Count - 2)
        Set OutRge = Worksheets.Add.Range("A1")
        OutRge(1, 1) = "|fffd||fffd|3|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||315||48f|W"
        OutRge(1, 1).Font.Bold = True
        Set OutRge = OutRge(3, 1)
        If dataType = 1 Then
            Set OutRge = subDataEdit(1, DataRge, OutRge, 0, 1, 2)
            Set OutRge = subDataEdit(2, DataRge, OutRge, 0, 2, 1)
            Set OutRge = subDataEdit(3, DataRge, OutRge, 1, 2, 0)
            Set OutRge = subDataEdit(4, DataRge, OutRge, 2, 1, 0)
        ElseIf dataType = 2 Then
            Set OutRge = subDataEdit(1, DataRge, OutRge, 0, 2, 1)
            Set OutRge = subDataEdit(2, DataRge, OutRge, 0, 1, 2)
            Set OutRge = subDataEdit(3, DataRge, OutRge, 2, 1, 0)
            Set OutRge = subDataEdit(4, DataRge, OutRge, 1, 2, 0)
        ElseIf dataType = 3 Then
            Set OutRge = subDataEdit(1, DataRge, OutRge, 2, 0, 1)
            Set OutRge = subDataEdit(2, DataRge, OutRge, 2, 1, 0)
            Set OutRge = subDataEdit(3, DataRge, OutRge, 0, 1, 2)
            Set OutRge = subDataEdit(4, DataRge, OutRge, 1, 0, 2)
        Else
            Set OutRge = subDataEdit(1, DataRge, OutRge, 2, 1, 0)
            Set OutRge = subDataEdit(2, DataRge, OutRge, 2, 0, 1)
            Set OutRge = subDataEdit(3, DataRge, OutRge, 1, 0, 2)
            Set OutRge = subDataEdit(4, DataRge, OutRge, 0, 1, 2)
        End If
        Application.DisplayAlerts = False
        r.Worksheet.Delete
        Application.DisplayAlerts = True
        On Error GoTo 0
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlBasicStat"
Option Explicit

Type DLG_Kihon
    dlgCom As DLG_Comm
    bPcnt As Boolean   'TRUE=|fffd||fffd||fffd||fffd|
    pcnt1 As Double    '|fffd||fffd|A25
    pcnt2 As Double    '|fffd||fffd|A75
    bZentai As Boolean 'TRUE=|fffd||fffd||fffd||fffd|
    chkArray(1 To 5) As Boolean 'TRUE=YES|fffd|G|fffd||2ce||fffd|,chuo,sendo,waido,saihin,4bun_hensa;
End Type

Type BASICSTAT_SETTING
    DataRge As String
    OutRge As String
    percent(1 To 5) As Double
End Type

'Public Const DBL_ERR As Double = 1E+30

Private dlgKihon As DLG_Kihon
Private GActShtObj As Worksheet

Private Function MSGfun_PcntErr(no As Integer) As String
    'MSGfun_PcntErr = "|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|" & no & "|fffd||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd|"
    MSGfun_PcntErr = "|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|" & no & "|fffd||30e|w|fffd||80aa||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|"
End Function

Private Function getCellValue(Cval As Variant) As Variant
    If IsError(Cval) Then
        getCellValue = GSTR_nasi
    ElseIf Abs(val(Cval)) = 1E+30 Then
        getCellValue = GSTR_nasi
    Else
        getCellValue = Cval
    End If
    
End Function

'
'|fffd||fffd|{|fffd||fffd||fffd|v|fffd||282||30c|v|fffd|Z|fffd||18f|o|fffd||fffd|
'H12.12.6 mdf LSQ
'
Private Function do_Kihon(bst() As Variant) As Boolean
    Dim i As Long, j As Long
    Dim bCol As Boolean, bTitle As Boolean, bZent As Boolean
    Dim smpnum As Long, itemnum As Integer
    Dim inpRge As Range
    Dim tmpBgn As Range
    Dim tmpbst(1 To 24) As Variant
    '
    Application.ScreenUpdating = False
    
    '|fffd||3d0||fffd||fffd||752||fffd|
    Set inpRge = dlgKihon.dlgCom.InRange
    bCol = dlgKihon.dlgCom.optCol
    bTitle = dlgKihon.dlgCom.optTitle
    bZent = dlgKihon.bZentai
    smpnum = inpRge.Rows.Count - 1
    itemnum = inpRge.Columns.Count
    If smpnum < 2 Or itemnum < 1 Then Exit Function
    
    '|fffd|v|fffd|Z
    Set tmpBgn = inpRge.offset(0, 0).Range("A1")
    For i = 1 To itemnum
        Call calcOneItem(tmpBgn, smpnum, tmpbst)
        For j = 1 To 24
            bst(j, i) = tmpbst(j)
        Next j
        Set tmpBgn = tmpBgn.offset(0, 1)
    Next i
    '
    If bZent Then  '|fffd|S|fffd||fffd|
        Set tmpBgn = inpRge.offset(0, 0).Range("A1")
        Call calcZenTai(tmpBgn, smpnum, itemnum, tmpbst)
        For j = 1 To 24
            bst(j, itemnum + 1) = tmpbst(j)
        Next j
    End If
    do_Kihon = True
End Function
'
Private Sub calcSub(bZen As Boolean, ByVal rgeBgn As Range, ByVal smpnum As Long, ByVal itemnum As Integer, bst() As Variant)
    Dim tmpd As Double, tmpd1 As Double, tmpd2 As Variant, tmpi As Integer
    Dim maxV As Double, minV As Double
    Dim Cval As Variant, cvalA As Variant
    Dim DataRge As Range, toCel As Range
    Dim actStObj As Worksheet
    
    '|fffd||3d0||fffd||fffd||752||fffd|
    Set actStObj = ActiveSheet
    rgeBgn.Worksheet.Activate
    
    If bZen Then
        Set DataRge = rgeBgn.offset(1, 0).Range(Cells(1, 1), Cells(smpnum, itemnum))
    Else
        Set DataRge = rgeBgn.offset(1, 0).Range("A1:A" & smpnum)
    End If
    
    
    'Title Name
    bst(1) = IIf(bZen, "|fffd|S|fffd||fffd|", rgeBgn(1, 1).text)
    tmpi = Application.Count(DataRge)   '|fffd||fffd||fffd||fffd|
    tmpd = Application.sum(DataRge)     '|fffd||fffd||fffd|v
    
    bst(2) = tmpi
    bst(3) = tmpd
    If tmpi < 1 Then Exit Sub 'H14.11.26 LSQ add
    
    bst(4) = tmpd / tmpi
    '
    bst(5) = getCellValue(Application.HarMean(DataRge))
    bst(6) = getCellValue(Application.GeoMean(DataRge))
    '
    If dlgKihon.chkArray(4) Then  '|fffd||155|p|fffd|l(|fffd||fffd|-|fffd|h)
        bst(7) = getCellValue(Application.Mode(DataRge))
    End If
    If dlgKihon.chkArray(1) Then  '|fffd||fffd||fffd||fffd||fffd|l(|fffd||fffd||fffd|f|fffd|B|fffd|A|fffd||fffd|)
        bst(8) = Application.median(DataRge)
    End If
    '
    If dlgKihon.bPcnt Then
        Cval = calcPcntile(DataRge, dlgKihon.pcnt1 / 100)
        bst(9) = getCellValue(Cval)
        '
        Cval = calcPcntile(DataRge, dlgKihon.pcnt2 / 100)
        bst(10) = getCellValue(Cval)
        '
    End If
    maxV = Application.max(DataRge)
    minV = Application.min(DataRge)
    bst(11) = maxV
    bst(12) = minV
    bst(13) = Application.DevSq(DataRge)

    tmpd1 = Application.VarP(DataRge)
    tmpd2 = Application.var(DataRge)
    If IsError(tmpd2) Then tmpd2 = DBL_ERR
    
    bst(14) = tmpd1    'n
    bst(15) = IIf(tmpd2 = DBL_ERR, GSTR_nasi, tmpd2)  'n-1
    
    tmpd1 = Sqr(tmpd1)
    bst(16) = tmpd1   'stdevp
    bst(17) = GSTR_nasi
    If tmpd2 <> DBL_ERR Then
        tmpd2 = Sqr(tmpd2)
        bst(17) = tmpd2   'stdev
    End If
    
    tmpd = Application.average(DataRge)
    bst(18) = GSTR_nasi
    bst(19) = GSTR_nasi
    If tmpd <> 0 Then
        bst(18) = tmpd1 / tmpd
        If tmpd2 <> DBL_ERR Then
            bst(19) = tmpd2 / tmpd
        End If
    End If
    '
    If dlgKihon.chkArray(5) Then  '|fffd|l|fffd||fffd||fffd||295||38d||fffd|
        Cval = calcPcntile(DataRge, 0.75)
        cvalA = calcPcntile(DataRge, 0.25)
        If IsError(Cval) Or IsError(cvalA) Then
            Cval = CVErr(xlErrValue)
            bst(20) = getCellValue(Cval)
            bst(21) = bst(20)
        Else
            Cval = Cval - cvalA
            bst(20) = getCellValue(Cval)
            bst(21) = getCellValue(Cval / 2)
        End If
        '
    End If
    bst(22) = maxV - minV
    '
    If dlgKihon.chkArray(2) Then '|fffd||fffd|x(|fffd||182||fffd||fffd||fffd|)
        Cval = Application.Kurt(DataRge)
        bst(23) = getCellValue(Cval)
    End If
    '
    If dlgKihon.chkArray(3) Then '|fffd|c|fffd|x(|fffd||40aa||fffd||fffd|)
        Cval = Application.Skew(DataRge)
        bst(24) = getCellValue(Cval)
    End If

End Sub
'
Private Sub calcOneItem(itemBgn As Range, smpnum As Long, bst() As Variant)
    Call calcSub(False, itemBgn, smpnum, 1, bst)
End Sub
'
Private Sub calcZenTai(rgeBgn As Range, smpnum As Long, itemnum As Integer, bst() As Variant)
    Call calcSub(True, rgeBgn, smpnum, itemnum, bst)
End Sub
'
#If 0 Then
Private Function calcPcntile(DataRge As Range, pcntDec As Double) As Variant
    Dim iPos As Integer, dPos As Double, tmpd As Double
    Dim cvalA As Variant, cvalB As Variant, errFlg As Boolean
    '
    tmpd = (Application.Count(DataRge) + 1) * pcntDec
    iPos = Int(tmpd)
    dPos = tmpd - iPos
    
    '|fffd||fffd||fffd||fffd||fffd||15a89||fffd||fffd||fffd||fffd||fffd|
    calcPcntile = 0
    errFlg = True
    cvalA = Application.Small(DataRge, iPos)
    cvalB = Application.Small(DataRge, iPos + 1)
    If Not IsError(cvalA) Then
        calcPcntile = calcPcntile + (1 - dPos) * cvalA
        errFlg = False
    End If
    '
    If Not IsError(cvalB) Then
        calcPcntile = calcPcntile + dPos * cvalB
        errFlg = False
    End If
    '
    If errFlg Then
        calcPcntile = CVErr(xlErrValue)
    End If
    '
End Function
#Else
Private Function calcPcntile(DataRge As Range, per As Double, Optional ByVal bTitle As Boolean = False) As Variant
    Dim n1 As Long, n2 As Long
    Dim D As Double, d1 As Double, d2 As Double, per1 As Double
    Dim r As Range
    Dim sample As Long
    If bTitle Then
        Set r = DataRge.Range("A2").Resize(DataRge.Rows.Count - 1, DataRge.Columns.Count)
    Else
        Set r = DataRge
    End If
    sample = Application.Count(r)
    'If per > sample / (sample + 1#) Then
    '    calcPcntile = -1E+30
    '    Exit Function
    'End If
    D = (sample + 1#) * per
    n1 = WorksheetFunction.Floor(D, 1)
    per1 = D - n1
    If Abs(per1) <= 0.000000001 Then
        n2 = 0
    Else
        n2 = n1 + 1
    End If
    If n1 < 1 Then n1 = 1
    If n1 > sample Then n1 = sample
    If n2 < 1 Then n2 = 1
    If n2 > sample Then n2 = sample
    d1 = WorksheetFunction.Small(r, n1)
    If n2 = 0 Then
        calcPcntile = d1
        Exit Function
    Else
        d2 = WorksheetFunction.Small(r, n2)
        D = d1 + (d2 - d1) * per1
        calcPcntile = D
    End If
    '
End Function
#End If

Function gpercentile(ByVal r As Range, ByVal per As Double, ByVal sample As Integer) As Double
    Dim n1 As Long, n2 As Long
    Dim D As Double, d1 As Double, d2 As Double, per1 As Double
    If per > sample / (sample + 1#) Then
        gpercentile = -1E+30
        Exit Function
    End If
    D = (sample + 1#) * per
    n1 = WorksheetFunction.Floor(D, 1)
    per1 = D - n1
    If Abs(per1) <= 0.000000001 Then
        n2 = 0
    Else
        n2 = n1 + 1
    End If
    If n1 < 1 Then n1 = 1
    If n1 > sample Then n1 = sample
    If n2 < 1 Then n2 = 1
    If n2 > sample Then n2 = sample
    d1 = WorksheetFunction.Small(r, n1)
    If n2 = 0 Then
        gpercentile = d1
        Exit Function
    Else
        d2 = WorksheetFunction.Small(r, n2)
        D = d1 + (d2 - d1) * per1
        gpercentile = D
    End If
End Function
'
'return : |fffd|o|fffd||353||fffd||fffd|v|fffd||282||30c||90||fffd|
'

Function KKS_fKH_Kihon(ByVal InRange As Range, bst() As Variant, _
                            Optional ByVal pcnt1 As Double = 25, Optional ByVal pcnt2 As Double = 75) As Boolean
    Dim ct As Integer
    Dim rtn, dlgBox As Object, dlgCom As DLG_Comm
    Dim tmpd As Double
    
    dlgCom.itemnum = InRange.Columns.Count
    dlgCom.smpnum = InRange.Rows.Count
    If dlgCom.itemnum < 1 Or dlgCom.smpnum < 3 Then
        MsgBox MSG_lackData
        KKS_fKH_Kihon = False
        Exit Function
    End If
    Set dlgCom.InRange = InRange
    dlgCom.optCol = True
    dlgCom.optTitle = True
    dlgKihon.dlgCom = dlgCom         '|fffd||fffd||fffd||295||fffd||fffd||fffd||fffd||752||fffd|
    
    '|fffd|S|fffd||302||30f|o|fffd||fffd|
    dlgKihon.bZentai = True 'False
    
    ReDim bst(1 To 24, dlgCom.itemnum + 1)
    
    '|fffd|O|fffd||fffd||fffd|[|fffd|v|fffd|{|fffd|b|fffd|N|fffd|X
    For ct = 1 To 5
        dlgKihon.chkArray(ct) = True 'False
    Next ct
    
    '|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd||fffd|v|fffd|Z
    dlgKihon.bPcnt = True ' False
    If dlgKihon.bPcnt Then
        tmpd = pcnt1
        If tmpd < 0 Or tmpd > 100 Then
            MsgBox MSGfun_PcntErr(1)
            KKS_fKH_Kihon = False
            Exit Function
        End If
        dlgKihon.pcnt1 = tmpd
        '
        tmpd = pcnt2
        If tmpd < 0 Or tmpd > 100 Then
            MsgBox MSGfun_PcntErr(2)
            KKS_fKH_Kihon = False
            Exit Function
        End If
        dlgKihon.pcnt2 = tmpd
    End If
    
    KKS_fKH_Kihon = do_Kihon(bst)
End Function

'2018.9.5 LSQ mdf
Private Function CalcBasicStat(adlgin As BASICSTAT_SETTING)
    Dim i As Long, j As Long, k As Long
    Dim itemnum As Long, nPcnt As Integer, tmpd As Double
    Dim bst() As Variant, v As Variant
    Dim D As Double
    Dim tmpd1, tmpd2, tmpv
    Dim r As Range, rout As Range, tmpBgn As Range, savCel As Range, tmpRge As Range
    
    Set r = Range(adlgin.DataRge)
    Set rout = Range(adlgin.OutRge)
    r.Worksheet.Activate
    Call KKS_fKH_Kihon(r, bst, adlgin.percent(1), adlgin.percent(2))
    itemnum = r.Columns.Count
    rout.Worksheet.Activate
    rout = "|fffd||fffd| |fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|"
    rout.Font.Bold = True
    Set rout = rout.offset(1, 0)
    Call SetRangeBorder(rout(2, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rout(2, 2).Resize(1, itemnum + 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(rout(3, 1).Resize(24, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rout(3, 2).Resize(24, itemnum + 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
    rout(2, 1) = ""
    rout(3, 1) = "n"
    rout(4, 1) = "|fffd||fffd||fffd|v"
    rout(5, 1) = "|fffd||fffd||fffd||3d2|l"
    rout(6, 1) = "|fffd||fffd||fffd|a|fffd||fffd||fffd||fffd|"
    rout(7, 1) = "|fffd||109f55||fffd||fffd||fffd|"
    rout(8, 1) = "|fffd||155|p|fffd|l|fffd|i|fffd||fffd||fffd|[|fffd|h|fffd|j"
    rout(9, 1) = "|fffd||fffd||fffd||fffd||fffd|l|fffd|i|fffd||fffd||fffd|f|fffd|B|fffd|A|fffd||fffd||fffd|j"
    rout(10, 1) = "|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|1" & Format(adlgin.percent(1) / 100#, "(0.0%)")
    rout(11, 1) = "|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|2" & Format(adlgin.percent(2) / 100#, "(0.0%)")
    rout(12, 1) = "|fffd||151||fffd|l"
    rout(13, 1) = "|fffd||14f||fffd||fffd|l"
    rout(14, 1) = "|fffd||38d||fffd||fffd||fffd||fffd||fffd||fffd|a"
    rout(15, 1) = "|fffd||fffd||fffd|U n"
    rout(16, 1) = "|fffd||fffd||fffd|U n-1"
    rout(17, 1) = "|fffd|W|fffd||fffd||fffd||38d||fffd| n"
    rout(18, 1) = "|fffd|W|fffd||fffd||fffd||38d||fffd| n-1"
    rout(19, 1) = "|fffd||3d3||fffd||fffd|W|fffd||fffd| n"
    rout(20, 1) = "|fffd||3d3||fffd||fffd|W|fffd||fffd| n-1"
    rout(21, 1) = "|fffd|W|fffd||fffd||fffd||b377|"
    rout(22, 1) = "|fffd|l|fffd||fffd||fffd||294||348||fffd|"
    rout(23, 1) = "|fffd|l|fffd||fffd||fffd||295||38d||fffd|"
    rout(24, 1) = "|fffd||fffd||fffd||fffd||fffd|W"
    rout(25, 1) = "|fffd||fffd|x|fffd|i|fffd||182||fffd||fffd||fffd|j"
    rout(26, 1) = "|fffd|c|fffd|x|fffd|i|fffd||40aa||fffd||741|j"
    For i = 1 To 24
        For j = 1 To itemnum + 1
            If i > 19 Then
                rout(i + 2, j + 1) = bst(i, j)
            Else
                rout(i + 1, j + 1) = bst(i, j)
            End If
        Next j
    Next i
    For j = 1 To itemnum + 1
        tmpd1 = rout(18, j + 1)
        tmpd2 = rout(3, j + 1)
        tmpv = GSTR_nasi
        If IsNumeric(tmpd1) And IsNumeric(tmpd2) Then
            If tmpd2 > 0 Then
                tmpv = tmpd1 / Sqr(tmpd2)
            End If
        End If
        rout(21, j + 1) = tmpv
    Next j

    rout(27, 1).Resize(1, itemnum + 2).Clear
    rout(22, 1).Resize(6, itemnum + 2).Copy rout(21, 1)
    
    Set rout = rout.offset(27, 0)
    
    Erase bst
End Function

Sub KKS_BASICSTAT_1P01()
    Dim rtn As Integer, i As Long, tmpd As Double
    Dim dlg As DialogSheet
    Dim tmpsht As Worksheet
    Dim r As Range, rout As Range, tmpStr As String
    Dim adlgin As BASICSTAT_SETTING
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set GActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set dlg = ThisWorkbook.DialogSheets("DlgBasicStat")
    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    GActShtObj.Activate
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn = True Then
        Call SaveDlg(dlg)
        adlgin.DataRge = Trim((dlg.EditBoxes("edtDataIn").text))
        adlgin.OutRge = Trim((dlg.EditBoxes("edtOutput").text))
        adlgin.percent(1) = 25
        adlgin.percent(2) = 75
        If adlgin.DataRge = "" Or adlgin.OutRge = "" Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        GActShtObj.Activate
        Call CalcBasicStat(adlgin)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

'=== EOF ===

Attribute VB_Name = "mdlBinomialSign"
'======|fffd||4d00c||fffd||fffd||fffd|E|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|======

Option Explicit

Type TEST_RST
    t As Double
    p As Double
    mark As Long
End Type

Type BinoSign_Rst
    nErrNo As Long
    name As String
    n As Double
    nl As Double
    ne As Double
    ng As Double
    nlPercent As Double
    ngPercent As Double
    zRst As TEST_RST
    fRst As TEST_RST
    tRst As TEST_RST
End Type

Type BinoSign_Info
    dataType As Long
    dCmpVal As Double
    dSPoint As Double
    ktFlg As Integer
    rst() As BinoSign_Rst
    bCmpInput As Boolean
End Type


'n:  |fffd|f|fffd|[|fffd|^|fffd||fffd|
'p:  |fffd||45e6|
'p0: |fffd||fffd|r|fffd|l
Private Sub testF(fRst As TEST_RST, ByVal ktFlg As Integer, ByVal n As Long, ByVal p As Double, ByVal p0 As Double)
    Dim two_n As Long
    Dim dn1 As Double, dn2 As Double, dM1 As Double, dM2 As Double
    Dim t1 As Double, t2 As Double, p1 As Double, p2 As Double
    Dim dSM01 As Double, dSM05 As Double, ds01 As Double, ds05 As Double
    'check
    If p0 <= 0 Or p0 >= 1 Or n < 1 Then
        MsgBox "p0 or n |fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
        Exit Sub
    End If
    
    If p < 0 Or p > 1 Then
        MsgBox "|fffd||45e6||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
        Exit Sub
    End If
    
    two_n = 2 * n
    
    dn1 = CLng(two_n * (1 - p)) + 2
    dn2 = CLng(two_n * p)
    dM1 = two_n * p + 2
    dM2 = two_n * (1 - p)
    
    'T|fffd||fffd||fffd|v|fffd|l
    t1 = dn2 * (1 - p0) / (dn1 * p0)
    t2 = dM2 * p0 / (dM1 * (1 - p0))
    
    If dn2 <> 0 And dn1 <> 0 Then
        p1 = Application.FDist(Abs(t1), dn1, dn2)
    Else
        p1 = 1
    End If
    If dM2 <> 0 And dM1 <> 0 Then
        p2 = Application.FDist(Abs(t2), CLng(dM1), CLng(dM2))
    Else
        p2 = 1
    End If
    
    #If 0 Then
    If ktFlg = KT_BOTH Or ktFlg = KT_LEFT Then  '|fffd||fffd||fffd||fffd|
        dSM01 = findFinv(0.01, ktFlg, dM1, dM2)
        dSM05 = findFinv(0.05, ktFlg, dM1, dM2)
    End If
    
    If ktFlg = KT_BOTH Or ktFlg = KT_RIGHT Then  '|fffd|E|fffd||fffd|
        ds01 = findFinv(0.01, ktFlg, dn1, dn2)
        ds05 = findFinv(0.05, ktFlg, dn1, dn2)
    End If
    #End If
    
    If ktFlg = KT_BOTH Then
        fRst.p = Application.min(p1, p2) * 2
    ElseIf ktFlg = KT_LEFT Then
        fRst.p = p2
    Else
        fRst.p = p1
    End If
    If fRst.p > 1 Then fRst.p = 1
    fRst.mark = IIf(fRst.p < 0.01, 2, IIf(fRst.p < 0.05, 1, 0))
End Sub

Private Sub testZ(zRst As TEST_RST, ByVal ktFlg As Integer, ByVal n As Long, ByVal p As Double, ByVal p0 As Double)
    Dim Tval As Double, pval As Double
    Dim ds01 As Double, ds05 As Double
    Tval = (p - p0) / (Sqr(p0 * (1 - p0)) / Sqr(n))
    If ktFlg = KT_BOTH Then
        Tval = Abs(Tval)
    End If
    pval = ProbZ(Tval, IIf(ktFlg = KT_LEFT, -1, ktFlg))
    
    ds01 = findZinv(0.01, ktFlg)
    ds05 = findZinv(0.05, ktFlg)
    
    zRst.p = pval
    zRst.t = Tval
    zRst.mark = IIf(zRst.p < 0.01, 2, IIf(zRst.p < 0.05, 1, 0))
End Sub

Private Sub testT(tRst As TEST_RST, ByVal ktFlg As Integer, ByVal nl As Long, ByVal ng As Long, ByVal p0 As Double)
    Dim i As Long
    Dim n As Long
    Dim pval As Double, tmpd As Double, sumd As Double
    n = nl + ng
    sumd = 0
    With WorksheetFunction
        pval = Exp(.GammaLn(n + 1) - .GammaLn(nl + 1) - .GammaLn(ng + 1) + nl * .Ln(1# - p0) + ng * .Ln(p0))
        If ktFlg = 0 Then
            pval = .Round(pval, 10)
        End If
        For i = n To 0 Step -1
            tmpd = Exp(.GammaLn(n + 1) - .GammaLn(i + 1) - .GammaLn((n - i) + 1) + i * .Ln(1# - p0) + (n - i) * .Ln(p0))
            If ktFlg = 0 Then
                tmpd = .Round(tmpd, 10)
            End If
            If ktFlg = 0 Then
                If tmpd <= pval Then
                    sumd = sumd + tmpd
                End If
            ElseIf ktFlg = 1 Then
                If i >= nl Then
                    sumd = sumd + tmpd
                End If
            Else
                If i <= nl Then
                    sumd = sumd + tmpd
                End If
            End If
        Next i
    End With
    tRst.p = sumd
    tRst.mark = IIf(tRst.p < 0.01, 2, IIf(tRst.p < 0.05, 1, 0))
End Sub

Private Sub calcOneItem(rst As BinoSign_Rst, ByVal datar As Range, ByVal ktFlg As Integer, ByVal dSPoint As Double, ByVal dCmpVal As Double)
    Dim n As Long, nl As Long, ne As Long, ng As Long
    Dim p As Double, p0 As Double
    Dim r As Range
    Set r = datar.Range("A2").Resize(datar.Rows.Count - 1, 1)
    r.Worksheet.Activate
    With rst
        .name = datar.Range("A1")
        .nl = Evaluate("COUNTIF(" & r.Address & "," & """<""&" & dSPoint & ")")
        .ne = Evaluate("COUNTIF(" & r.Address & "," & """=""&" & dSPoint & ")")
        .ng = Evaluate("COUNTIF(" & r.Address & "," & """>""&" & dSPoint & ")")
        .n = .nl + .ng
        If .n > 0 Then
            .ngPercent = 1# * .ng / .n
            .nlPercent = 1# * .nl / .n
            testF .fRst, ktFlg, .n, .ngPercent, dCmpVal
            testZ .zRst, ktFlg, .n, .ngPercent, dCmpVal
            testT .tRst, ktFlg, .nl, .ng, dCmpVal
            .nErrNo = 0
        Else
            .nErrNo = -1
        End If
    End With
End Sub

'|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|q|fffd|j
Private Sub calcOneItem_Sum1(rst As BinoSign_Rst, ByVal datar As Range, ByVal ktFlg As Integer, ByVal dSPoint As Double, ByVal dCmpVal As Double)
    Dim n As Long, nl As Long, ne As Long, ng As Long
    Dim p As Double, p0 As Double
    Dim r As Range
    If datar.Rows.Count <> 3 Then
        rst.nErrNo = -1
        Exit Sub
    End If
    Set r = datar.Range("A2").Resize(datar.Rows.Count - 1, 1)
    r.Worksheet.Activate
    With rst
        .name = datar.Range("A1")
        .n = datar.Range("A2")
        .ne = 0
        .ng = datar.Range("A3")
        .nl = .n - .ng
        If .n > 0 And .ng >= 0 And .n >= .ng Then
            .ngPercent = 1# * .ng / .n
            .nlPercent = 1# * .nl / .n
            testF .fRst, ktFlg, .n, .ngPercent, dCmpVal
            testZ .zRst, ktFlg, .n, .ngPercent, dCmpVal
            testT .tRst, ktFlg, .nl, .ng, dCmpVal
            .nErrNo = 0
        Else
            .nErrNo = -1
        End If
    End With
End Sub

'|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|j
Private Sub calcOneItem_Sum2(rst As BinoSign_Rst, ByVal datar As Range, ByVal ktFlg As Integer, ByVal dSPoint As Double, ByVal dCmpVal As Double)
    Dim n As Long, nl As Long, ne As Long, ng As Long
    Dim p As Double, p0 As Double
    Dim r As Range
    If datar.Rows.Count <> 3 Then
        rst.nErrNo = -1
        Exit Sub
    End If
    Set r = datar.Range("A2").Resize(datar.Rows.Count - 1, 1)
    r.Worksheet.Activate
    With rst
        .name = datar.Range("A1")
        .n = datar.Range("A2")
        .ne = 0
        .ngPercent = datar.Range("A3")
        .ng = .ngPercent * .n
        .nl = .n - .ng
        If .n > 0 And .ng >= 0 And .n >= .ng Then
            .ngPercent = 1# * .ng / .n
            .nlPercent = 1# * .nl / .n
            testF .fRst, ktFlg, .n, .ngPercent, dCmpVal
            testZ .zRst, ktFlg, .n, .ngPercent, dCmpVal
            If CLng(.nl) = .nl And CLng(.ng) = .ng Then
                testT .tRst, ktFlg, .nl, .ng, dCmpVal
            Else
                .tRst.p = DBL_ERR
            End If
            .nErrNo = 0
        Else
            .nErrNo = -1
        End If
    End With
End Sub

Private Function OutputRst_Basic(ByVal outR As Range, BSInfo As BinoSign_Info) As Range
    Dim i As Long, j As Long
    Dim row As Long, col As Long
    row = 1
    outR(1, 1) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||4d00c||fffd||fffd||fffd|j"
    outR(1, 1).Font.Bold = True
    row = row + 2
    outR(row, 1) = "|fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd|z|fffd|\"
    row = row + 1
    If BSInfo.dataType = 1 Then
        outR(row, 1) = ""
        outR(row, 2) = ""
        outR(row, 3) = "|fffd||fffd||fffd||fffd||fffd|_|fffd|i" & BSInfo.dSPoint & "|fffd|j|fffd||182||314||fffd|r"
        outR(row + 1, 1) = ""
        outR(row + 1, 2) = "|fffd||fffd||fffd|v"
        outR(row + 1, 3) = "|fffd||fffd||fffd||fffd|"
        outR(row + 1, 4) = "|fffd||fffd||fffd||fffd|"
        outR(row + 1, 5) = "|fffd||fffd|"
        j = 2
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                outR(row + j, 2) = .n + .ne
                outR(row + j, 3) = .nl
                outR(row + j, 4) = .ne
                outR(row + j, 5) = .ng
            End With
            j = j + 1
        Next i
        j = j - 2
        Call SetRangeBorder(outR(row, 1).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 3).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 3).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 2, 1).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 2, 3).Resize(j, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        outR(row + j + 2, 2) = "|fffd|u|fffd||fffd||fffd||fffd||fffd|v|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||34c||fffd||fffd||80a9||fffd||73dc||fffd|O|fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        Set OutputRst_Basic = outR(row + j + 4, 1)
    ElseIf BSInfo.dataType = 2 Then             '|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|q|fffd|j
        'row = row + 1
        outR(row, 1) = ""
        outR(row, 2).Resize(1, 3) = Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|q", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|q")
        j = 1
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                outR(row + j, 2) = .n
                outR(row + j, 3) = .ng
                outR(row + j, 4) = .nl
            End With
            j = j + 1
        Next i
        j = j - 1
        Call SetRangeBorder(outR(row, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 1).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 3).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Set OutputRst_Basic = outR(row + j + 2, 1)
    ElseIf BSInfo.dataType = 3 Then             '|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|j
        outR(row, 1) = ""
        outR(row, 2).Resize(1, 3) = Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|q", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|q")
        j = 1
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                outR(row + j, 2) = .n
                outR(row + j, 3) = .ng
                outR(row + j, 4) = .nl
            End With
            j = j + 1
        Next i
        j = j - 1
        Call SetRangeBorder(outR(row, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 1).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 3).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Set OutputRst_Basic = outR(row + j + 2, 1)
    End If
End Function

Private Function OutputRst_BS(ByVal outR As Range, BSInfo As BinoSign_Info) As Range
    Dim i As Long, j As Long
    Dim row As Long, col As Long
    row = 1
    outR(row, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||4d00c||fffd||fffd||fffd|j"
    row = row + 1
    outR(row, 1) = "|fffd||fffd|r|fffd|l"
    outR(row, 2) = BSInfo.dCmpVal
    'outr(row, 2).NumberFormat = "0.00%"
    Call SetRangeBorder(outR(row, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    row = row + 1
    If BSInfo.dataType = 1 Then
        outR(row, 1) = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(BSInfo.ktFlg = KT_BOTH, "|fffd||fffd||fffd||fffd|", IIf(BSInfo.ktFlg = KT_RIGHT, "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|j", "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j"))
        row = row + 1
        outR(row, 5) = "|fffd||fffd||fffd|m"
        outR(row, 7) = "F"
        outR(row, 9) = "Z"
        Call SetRangeBorder(outR(row, 5).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 7).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 9).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        row = row + 1
        outR(row, 1) = ""
        outR(row, 2) = "n"
        outR(row, 3) = "|fffd||fffd||fffd||fffd||fffd||301||fffd|"
        outR(row, 4) = "|fffd||fffd||fffd||301||fffd|"
        outR(row, 5) = "p|fffd|l"
        outR(row, 6) = "|fffd||fffd||fffd||fffd|"
        outR(row, 7) = "p|fffd|l"
        outR(row, 8) = "|fffd||fffd||fffd||fffd|"
        outR(row, 9) = "|fffd||fffd||fffd|v|fffd||fffd|"
        outR(row, 10) = "p|fffd|l"
        outR(row, 11) = "|fffd||fffd||fffd||fffd|"
        j = 1
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                outR(row + j, 2) = .n
                If .nErrNo = 0 Then
                    outR(row + j, 3) = .nlPercent
                    outR(row + j, 4) = .ngPercent
                    outR(row + j, 5) = .tRst.p
                    outR(row + j, 6) = IIf(.tRst.mark = 2, "**", IIf(.tRst.mark = 1, "* ", "n.s."))
                    'If (BSInfo.bCmpInput And BSInfo.ktFlg = KT_BOTH) Then
                    '    outr(row + j, 7) = "-"
                    '    outr(row + j, 8) = "-"
                    'Else
                        outR(row + j, 7) = .fRst.p
                        outR(row + j, 8) = IIf(.fRst.mark = 2, "**", IIf(.fRst.mark = 1, "* ", "n.s."))
                    'End If
                    outR(row + j, 9) = .zRst.t
                    outR(row + j, 10) = .zRst.p
                    outR(row + j, 11) = IIf(.zRst.mark = 2, "**", IIf(.zRst.mark = 1, "* ", "n.s."))
                Else
                    outR(row + j, 3) = "-"
                    outR(row + j, 4) = "-"
                    outR(row + j, 5) = "-"
                    outR(row + j, 6) = "-"
                    outR(row + j, 7) = "-"
                    outR(row + j, 8) = "-"
                    outR(row + j, 9) = "-"
                    outR(row + j, 10) = "-"
                    outR(row + j, 11) = "-"
                End If
            End With
            j = j + 1
        Next i
        j = j - 1
        
        outR(row + j + 1, 5) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        outR(row + j + 2, 5) = "|fffd||fffd||fffd||301||fffd||fffd||194||fffd|r|fffd|l|fffd||182||30d||fffd||fffd||fffd||fffd||fffd||fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd|B"
        If (BSInfo.bCmpInput And BSInfo.ktFlg = KT_BOTH And BSInfo.dCmpVal <> 0.5) Then
            outR(row + j + 3, 5) = "|fffd||fffd|r|fffd|l|fffd||fffd|0.5|fffd||30f||a347||fffd|AF|fffd||fffd|p|fffd|l|fffd||355||411||fffd|p|fffd|l|fffd||fffd|2|fffd|{|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B"
        End If
        
        'outr(row + 1, 3).Resize(j, 2).NumberFormat = "0.00%"
        outR(row + 1, 5).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 7).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 9).Resize(j, 1).NumberFormat = "0.00"
        outR(row + 1, 10).Resize(j, 1).NumberFormat = "0.000"
        
        Call SetRangeBorder(outR(row, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 2).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 5).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 7).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 9).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 1).Resize(j, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 2).Resize(j, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 5).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 7).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 9).Resize(j, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        Set OutputRst_BS = outR(row + j + 6, 1)
    ElseIf BSInfo.dataType = 2 Then                 '|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|q|fffd|j
        outR(row, 1) = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(BSInfo.ktFlg = KT_BOTH, "|fffd||fffd||fffd||fffd|", IIf(BSInfo.ktFlg = KT_RIGHT, "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|j", "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j"))
        row = row + 1
        outR(row, 4) = "|fffd||fffd||fffd|m"
        outR(row, 6) = "F"
        outR(row, 8) = "Z"
        Call SetRangeBorder(outR(row, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 6).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        row = row + 1
        outR(row, 1) = ""
        outR(row, 2) = "n"
        outR(row, 3) = "|fffd||fffd||fffd|q|fffd||301||fffd|"
        outR(row, 4) = "p|fffd|l"
        outR(row, 5) = "|fffd||fffd||fffd||fffd|"
        outR(row, 6) = "p|fffd|l"
        outR(row, 7) = "|fffd||fffd||fffd||fffd|"
        outR(row, 8) = "|fffd||fffd||fffd|v|fffd||fffd|"
        outR(row, 9) = "p|fffd|l"
        outR(row, 10) = "|fffd||fffd||fffd||fffd|"
        j = 1
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                If .nErrNo = 0 Then
                    outR(row + j, 2) = .n
                    outR(row + j, 3) = .ngPercent
                    outR(row + j, 4) = .tRst.p
                    outR(row + j, 5) = IIf(.tRst.mark = 2, "**", IIf(.tRst.mark = 1, "* ", "n.s."))
                    outR(row + j, 6) = .fRst.p
                    outR(row + j, 7) = IIf(.fRst.mark = 2, "**", IIf(.fRst.mark = 1, "* ", "n.s."))
                    outR(row + j, 8) = .zRst.t
                    outR(row + j, 9) = .zRst.p
                    outR(row + j, 10) = IIf(.zRst.mark = 2, "**", IIf(.zRst.mark = 1, "* ", "n.s."))
                Else
                    outR(row + j, 2) = "-"
                    outR(row + j, 3) = "-"
                    outR(row + j, 4) = "-"
                    outR(row + j, 5) = "-"
                    outR(row + j, 6) = "-"
                    outR(row + j, 7) = "-"
                    outR(row + j, 8) = "-"
                    outR(row + j, 9) = "-"
                    outR(row + j, 10) = "-"
                End If
            End With
            j = j + 1
        Next i
        j = j - 1
        
        outR(row + j + 1, 4) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        outR(row + j + 2, 4) = "|fffd||fffd||fffd|q|fffd||301||fffd||fffd||194||fffd|r|fffd|l|fffd||182||30d||fffd||fffd||fffd||fffd||fffd||fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd|B"
        If (BSInfo.bCmpInput And BSInfo.ktFlg = KT_BOTH And BSInfo.dCmpVal <> 0.5) Then
            outR(row + j + 3, 4) = "|fffd||fffd|r|fffd|l|fffd||fffd|0.5|fffd||30f||a347||fffd|AF|fffd||fffd|p|fffd|l|fffd||355||411||fffd|p|fffd|l|fffd||fffd|2|fffd|{|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B"
        End If
        
        'outr(row + 1, 3).Resize(j, 2).NumberFormat = "0.00%"
        outR(row + 1, 4).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 6).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 8).Resize(j, 1).NumberFormat = "0.00"
        outR(row + 1, 9).Resize(j, 1).NumberFormat = "0.000"
        
        Call SetRangeBorder(outR(row, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 6).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 1).Resize(j, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 2).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 4).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 6).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 8).Resize(j, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        Set OutputRst_BS = outR(row + j + 6, 1)
    ElseIf BSInfo.dataType = 3 Then                 '|fffd|T|fffd|}|fffd||fffd||fffd|[|fffd|i|fffd||3d0||fffd||fffd||fffd||fffd|b|fffd||fffd||fffd||fffd|b|fffd||fffd||fffd|j
        outR(row, 1) = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(BSInfo.ktFlg = KT_BOTH, "|fffd||fffd||fffd||fffd|", IIf(BSInfo.ktFlg = KT_RIGHT, "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|j", "|fffd||411||fffd||fffd|i|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j"))
        row = row + 1
        outR(row, 4) = "|fffd||fffd||fffd|m"
        outR(row, 6) = "F"
        outR(row, 8) = "Z"
        Call SetRangeBorder(outR(row, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 6).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        row = row + 1
        outR(row, 1) = ""
        outR(row, 2) = "n"
        outR(row, 3) = "|fffd||fffd||fffd|q|fffd||301||fffd|"
        outR(row, 4) = "p|fffd|l"
        outR(row, 5) = "|fffd||fffd||fffd||fffd|"
        outR(row, 6) = "p|fffd|l"
        outR(row, 7) = "|fffd||fffd||fffd||fffd|"
        outR(row, 8) = "|fffd||fffd||fffd|v|fffd||fffd|"
        outR(row, 9) = "p|fffd|l"
        outR(row, 10) = "|fffd||fffd||fffd||fffd|"
        j = 1
        For i = LBound(BSInfo.rst) To UBound(BSInfo.rst)
            With BSInfo.rst(i)
                outR(row + j, 1) = .name
                If .nErrNo = 0 Then
                    outR(row + j, 2) = .n
                    outR(row + j, 3) = .ngPercent
                    If .tRst.p = DBL_ERR Then
                        outR(row + j, 4) = "-"
                        outR(row + j, 5) = "-"
                    Else
                        outR(row + j, 4) = .tRst.p
                        outR(row + j, 5) = IIf(.tRst.mark = 2, "**", IIf(.tRst.mark = 1, "* ", "n.s."))
                    End If
                    outR(row + j, 6) = .fRst.p
                    outR(row + j, 7) = IIf(.fRst.mark = 2, "**", IIf(.fRst.mark = 1, "* ", "n.s."))
                    outR(row + j, 8) = .zRst.t
                    outR(row + j, 9) = .zRst.p
                    outR(row + j, 10) = IIf(.zRst.mark = 2, "**", IIf(.zRst.mark = 1, "* ", "n.s."))
                Else
                    outR(row + j, 2) = "-"
                    outR(row + j, 3) = "-"
                    outR(row + j, 4) = "-"
                    outR(row + j, 5) = "-"
                    outR(row + j, 6) = "-"
                    outR(row + j, 7) = "-"
                    outR(row + j, 8) = "-"
                    outR(row + j, 9) = "-"
                    outR(row + j, 10) = "-"
                End If
            End With
            j = j + 1
        Next i
        j = j - 1
        
        outR(row + j + 1, 4) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        outR(row + j + 2, 4) = "|fffd||fffd||fffd|q|fffd||301||fffd||fffd||194||fffd|r|fffd|l|fffd||182||30d||fffd||fffd||fffd||fffd||fffd||fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd|B"
        If (BSInfo.bCmpInput And BSInfo.ktFlg = KT_BOTH And BSInfo.dCmpVal <> 0.5) Then
            outR(row + j + 3, 4) = "|fffd||fffd|r|fffd|l|fffd||fffd|0.5|fffd||30f||a347||fffd|AF|fffd||fffd|p|fffd|l|fffd||355||411||fffd|p|fffd|l|fffd||fffd|2|fffd|{|fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B"
        End If
        
        'outr(row + 1, 3).Resize(j, 2).NumberFormat = "0.00%"
        outR(row + 1, 4).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 6).Resize(j, 1).NumberFormat = "0.000"
        outR(row + 1, 8).Resize(j, 1).NumberFormat = "0.00"
        outR(row + 1, 9).Resize(j, 1).NumberFormat = "0.000"
        
        Call SetRangeBorder(outR(row, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row, 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 6).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row, 8).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 1).Resize(j, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(outR(row + 1, 2).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 4).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 6).Resize(j, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(outR(row + 1, 8).Resize(j, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        Set OutputRst_BS = outR(row + j + 6, 1)
    End If
End Function

Private Function OutputRst_BinomialSign(ByVal outR As Range, BSInfo As BinoSign_Info) As Range
    Dim r As Range
    Set r = OutputRst_Basic(outR, BSInfo)
    Set r = OutputRst_BS(r, BSInfo)
End Function

Private Sub doCalc_BS(ByVal rgein As Range, ByVal rgeout As Range, BSInfo As BinoSign_Info)
    Dim i As Long
    Dim r As Range
    Set r = rgein
    ReDim BSInfo.rst(1 To r.Columns.Count)
    If BSInfo.dataType = 1 Then
        For i = 1 To r.Columns.Count
            calcOneItem BSInfo.rst(i), r.Columns(i), BSInfo.ktFlg, BSInfo.dSPoint, BSInfo.dCmpVal
        Next i
    ElseIf BSInfo.dataType = 2 Then
        For i = 1 To r.Columns.Count
            calcOneItem_Sum1 BSInfo.rst(i), r.Columns(i), BSInfo.ktFlg, BSInfo.dSPoint, BSInfo.dCmpVal
        Next i
    ElseIf BSInfo.dataType = 3 Then
        For i = 1 To r.Columns.Count
            calcOneItem_Sum2 BSInfo.rst(i), r.Columns(i), BSInfo.ktFlg, BSInfo.dSPoint, BSInfo.dCmpVal
        Next i
    End If
    Set r = OutputRst_BinomialSign(rgeout, BSInfo)
    rgeout.Worksheet.Activate
    rgeout.Select
    ActiveWindow.DisplayGridlines = False
    Erase BSInfo.rst
End Sub

Private Sub BS_DataType_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.Sheets("DlgBinoSign")
    bOn = (dlg.OptionButtons("optDataType1") = xlOn)
    dlg.OptionButtons("optSPAuto").Enabled = bOn
    dlg.EditBoxes("edtSP").Enabled = bOn
End Sub

Private Sub SetMacro_BS()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.Sheets("DlgBinoSign")
    dlg.OptionButtons("optDataType1").OnAction = "BS_DataType_Click"
    dlg.OptionButtons("optDataType2").OnAction = "BS_DataType_Click"
    dlg.OptionButtons("optDataType3").OnAction = "BS_DataType_Click"
    BS_DataType_Click
End Sub

Sub KKS_BINOMIALSIGN_1P01()
    Dim rgein As Range, rgeout As Range
    Dim dblMean As Double, dblPrecision As Double
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim rtn As Long
    Dim BSInfo As BinoSign_Info
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgBinoSign")
    SetMacro_BS
redisp:
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Set rgein = Range(dlg.EditBoxes("edtDataIn").text)
        Set rgeout = Range(dlg.EditBoxes("edtDataOut").text)
        If rgein Is Nothing Or rgeout Is Nothing Then
            MsgBox "Invalid Data Range."
            GoTo redisp
        End If
        BSInfo.dataType = IIf(dlg.OptionButtons("optDataType1") = xlOn, 1, IIf(dlg.OptionButtons("optDataType2") = xlOn, 2, 3))
        BSInfo.dSPoint = IIf(dlg.OptionButtons("optSPAuto") = xlOn, 0, val(dlg.EditBoxes("edtSP").text))
        BSInfo.dCmpVal = IIf(dlg.OptionButtons("optCmpValAuto") = xlOn, 0.5, val(dlg.EditBoxes("edtCmpVal").text))
        BSInfo.ktFlg = IIf(dlg.OptionButtons("optSide2") = xlOn, KT_BOTH, IIf(dlg.OptionButtons("optSide1") = xlOn, KT_LEFT, KT_RIGHT))
        If BSInfo.dCmpVal <= 0 Or BSInfo.dCmpVal >= 1 Then
            MsgBox "0|fffd||fffd||fffd||fffd||fffd||352|l|fffd||fffd|1|fffd|@|fffd||182||202||fffd||60a4||fffd||210||fffd||fffd|l|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
        BSInfo.bCmpInput = IIf(dlg.OptionButtons("optCmpValAuto") = xlOn, False, True)
        If BSInfo.dataType <> 1 Then
            BSInfo.dSPoint = 0
        End If
        actSht.Activate
        Call doCalc_BS(rgein, rgeout, BSInfo)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

'======EOF======
Attribute VB_Name = "mdlCallMe"
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Function VarSelect(ByVal strVarList As String) As String
    Dim rtnStr As String
    Application.ScreenUpdating = True
    If Trim(strVarList) = vbNullString Then
        VarSelect = "ERROR"
        Exit Function
    End If
    frmVarSel.Variables = strVarList
    frmVarSel.Show
    If frmVarSel.bIsOk Then
        rtnStr = frmVarSel.VarSelected
    Else
        rtnStr = "0"
    End If
    DoEvents
    Unload frmVarSel
    VarSelect = rtnStr
End Function

Function GetVarSel(ByVal dlg As DialogSheet, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|") As String
    Dim i As Integer
    Dim rtn As Integer
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set rgeVar = Range(dlg.EditBoxes(strVarRge).text)
    valvar = rgeVar.Value
    For i = 1 To rgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = VarSelect(Mid(strVarSelect, 2))
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    Resume exit_function
End Function

Private Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If err.Number <> 0 Then
        toXlA1str = inputFormula
        err.Clear
    End If
    
    On Error GoTo 0
End Function

Function VarRows(ByVal strData As String, ByVal strCriteria As String) As Integer
    Dim rngData As Range, rngCriteria As Range
    Dim rtnRows As Integer
    Set rngData = Range(toXlA1str(strData))
    Set rngCriteria = Range(toXlA1str(strCriteria))
    rngData.AdvancedFilter Action:=xlFilterInPlace, criteriarange:=rngCriteria, Unique:=True
    rtnRows = rngData.Columns(2).SpecialCells(xlCellTypeVisible).Count - 1
    rngData.Worksheet.ShowAllData
    VarRows = rtnRows
End Function

'===== EOF =====
Attribute VB_Name = "mdlCflibb"
Type VBAPARAM_A
    Tokeiryo As Double
    GunSu As Double
    GSmpl(101) As Double
    bFdGiven As Boolean
    Fd As Double
End Type

Type TUKEY
    p_para As VBAPARAM_A
    pval As Double
End Type

Public Const MAX_GUNSU As Long = 101
Public Const DEF_sqrt2Pi As Double = 2.506628274631

Public GParaTjProb As VBAPARAM_A
Private bSwEnd As Boolean
Private bAbort As Boolean

Private Function erf(ByVal x As Double) As Double
    Dim a1 As Double, a2 As Double, a3 As Double, a4 As Double, a5 As Double
    Dim p As Double, t As Double
    a1 = 0.254829592
    a2 = -0.284496736
    a3 = 1.421413741
    a4 = -1.453152027
    a5 = 1.061405429
    p = 0.3275911
    t = 1# / (1# + p * x)
    x = Abs(x)
    erf = 1# - ((((((a5 * t + a4) * t) + a3) * t + a2) * t) + a1) * t * Exp(-1# * x * x)
End Function

Private Function NORMSDIST(ByVal Z As Double) As Double
    Dim sign As Double
    If Z < 0 Then
        sign = -1
    Else
        sign = 1
    End If
    NORMSDIST = 0.5 * (1# + sign * erf(Abs(Z) / Sqr(2#)))
End Function

Private Function XlNormSDist(ByVal x As Double) As Double
    XlNormSDist = WorksheetFunction.NORMSDIST(x)
End Function

Private Function cGanm_Calc(pf As Double) As Double
    Dim AA0 As Double, AB0 As Double, AC0 As Double, AD0 As Double
    Dim PPi As Double, GANM_Culc As Double
    Dim i As Long, xx As Long, f As Long

    f = WorksheetFunction.Floor(pf, 1)

    AC0 = f
    If (f > 1412) Then AC0 = 1413

    PPi = 3.14159265358979
    xx = WorksheetFunction.Floor((AC0 - 1#) / 2#, 1)
    AA0 = 1

    AB0 = 0
    If ((f Mod 2) = 0) Then
        If (f > 1412) Then AC0 = 1412

        For i = 1 To xx
            AB0 = AC0 / (i * 2)
            AA0 = AA0 * AB0
            AD0 = AA0
        Next i
        GANM_Culc = AA0 * AC0
    Else
        If (f > 1411) Then AC0 = 1411
        xx = WorksheetFunction.Floor((AC0 - 1#) / 2#, 1) - 1
        AA0 = AC0 / (Sqr(PPi) / 2# * Sqr(2#))
        For i = 1 To xx
            AB0 = AC0 / (AC0 - (i * 2))
            AA0 = AA0 * AB0
            AD0 = AA0
        Next i
        GANM_Culc = AA0 * Sqr(AC0)
    End If
    cGanm_Calc = GANM_Culc
End Function

Private Function calc_D4xD5xD6xGama(ByVal fai As Double, ByVal xDat As Double, ByVal yDat As Double) As Double

    Dim tmpx As Double, tmpy As Double
    Dim Dm04 As Double, Dm05 As Double, Dm06 As Double
    Dim df As Double, gama As Double
    tmpx = WorksheetFunction.Power(xDat, 2) / 2
    tmpy = WorksheetFunction.Power(yDat, 2) / 2
    If (fai <= 1) Then fai = 1
    If (xDat = 0) Then
        calc_D4xD5xD6xGama = 0
        Exit Function
    End If
    Dm04 = 1#
    Dm05 = 1#
    Dm06 = Exp((-tmpy) + (fai - 1#) * Log(xDat) + (-fai * tmpx)) / DEF_sqrt2Pi
    df = fai
    gama = cGanm_Calc(df)
    calc_D4xD5xD6xGama = Dm04 * Dm05 * Dm06 * gama
End Function

Private Function sub_Tukey(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_Tukey As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo / Sqr(2#)
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_Tukey = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_Tukey = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 7 Then
        xSt = 0.001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
                'If (bAbort) Then
                '    bSwEnd = True
                '    sub_Tukey = DBL_ERR
                '    Exit Function
                'End If
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If i0 <> j0 Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1 - Parxy(i0, j0))
                        Dm01(j0) = NORMSDIST(sqrtA / sqrtB) - NORMSDIST((sqrtA - Dm00) / sqrtB)
                    Else
                        Dm01(j0) = 1
                    End If
                    'If (bAbort) Then
                    '    bSwEnd = True
                    '    sub_Tukey = DBL_ERR
                    '    Exit Function
                    'End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                    'If (bAbort) Then
                    '    bSwEnd = True
                    '    sub_Tukey = DBL_ERR
                    '    Exit Function
                    'End If
                Next j0
                Dm02 = Dm02 + Dm03
            Next i0
            Dm03 = calc_D4xD5xD6xGama(fai, xDat, yDat)
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_Tukey = Abs(1 - TT0 * xKan * yKan)
    sub_Tukey = P_Tukey
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_Tukey = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Function sub_CalcTukey(pTukey As TUKEY)
    Dim p As Double
    p = sub_Tukey(pTukey.p_para)
    pTukey.pval = p
End Function

Function CalcTukey(p_para As VBAPARAM_A) As Double
    Dim p As Double
    Dim ptr As TUKEY
    ptr.p_para = p_para
    bSwEnd = False
    bAbort = False
    p = sub_CalcTukey(ptr)
    If bAbort Then
        p = -1
    Else
        p = ptr.pval
    End If
    CalcTukey = p
End Function

Function P_TukeyDunnet(p_para As VBAPARAM_A, ByVal callFlg As Long) As Double
    If callFlg = 1 Then
        P_TukeyDunnet = sub_DunnetSingle(p_para)
    ElseIf callFlg = 2 Then
        P_TukeyDunnet = sub_DunnetBoth(p_para)
    Else
        P_TukeyDunnet = CalcTukey(p_para)
    End If
End Function

Function XlGanm_Calc(ByVal pf As Double) As Double
    Dim f As Double, tmpd As Double
    On Error Resume Next
    f = pf
    tmpd = WorksheetFunction.GammaLn(f)
    If err.Number <> 0 Then
        tmpd = -1
    End If
    err.Clear
    XlGanm_Calc = tmpd
    On Error GoTo 0
End Function

Function sub_HSD(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double

    Dim P_HSD As Double
    Dim Gsmple(MAX_GUNSU) As Double
    Const PPi As Double = 3.14159265358979
    Dim tmpv As Double
    Dim TVAL2 As Double, GUN As Double
    '-------------------------------------------------|fffd||fffd||fffd||fffd||fffd|n|fffd||fffd|
    TVAL2 = p_para.Tokeiryo / Sqr(2#)     '|fffd||fffd||fffd|v|fffd||282||fffd|Root(2)|fffd||14f||fffd||fffd|Z
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
        Next i
        If (GUN < 1) Then
            sub_HSD = -1
            Exit Function
        End If
    For i = 1 To GUN
        If (Gsmple(i) < 1) Then
            sub_HSD = -1
            Exit Function
        End If
    Next i

    '-----------------------------------------------------
    '------------------------------------------------|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|
    fai = 0
        For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If (i <> j) Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    
    fai = fai - GUN                                                             '|fffd||fffd||fffd|@|fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd|||fffd|Q|fffd||fffd|

    If (p_para.bFdGiven) Then
            fai = p_para.Fd
    End If

    If (fai > 6000) Then fai = 6000                                         '2013.01.15 mdf: if (fai > 1000) fai = 1000;

    '-----------------------------------------------------------------------------------
    LLP = 100                                                                           '----|fffd||fffd||fffd|[|fffd|v|fffd||fffd|
    If (fai > 90) Then LLP = fai + 20
    If (LLP > 50) Then LLP = 50
    
        '2013.01.15 mdf
#If 0 Then
    If (p_para.Tokeiryo > 7) Then
        xSt = 0.0001
    Else
        xSt = 0.01
    End If
        
    ySt = -5
    If (fai > 500) Then
        xKan = 1.5 / LLP
    ElseIf (fai > 100) Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
        
    yKan = 10# / LLP
        'end mdf
#Else
    ySt = -5
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = IIf(fai > 1000, (0.4 / LLP), IIf(fai > 500, (1.5 / LLP), IIf(fai > 100, (2# / LLP), (4# / LLP))))
    yKan = 10# / LLP
#End If

    '-------------------------------------------------------------------------|fffd|v|fffd|Z|fffd|J|fffd|n
    tmpv = fai / 2#
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If (i0 <> j0) Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1 - Parxy(i0, j0))
                        Dm01(j0) = WorksheetFunction.NORMSDIST(sqrtA / sqrtB) - WorksheetFunction.NORMSDIST((sqrtA - Dm00) / sqrtB)
                    Else
                        Dm01(j0) = 1
                    End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                Next j0
                
                Dm02 = Dm02 + Dm03 '--------Dm01(i0)
            Next i0
            Dm03 = Exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) - fai * xDat * xDat / 2# _
                - XlGanm_Calc(tmpv) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i

    P_HSD = Abs(1 - TT0 * xKan * yKan)          '2006.10.13 mdf from "P_Tukey = 1 - TT0 * xKan * yKan ;       "

    sub_HSD = P_HSD
        
End Function

Function P_HSD(p_para As VBAPARAM_A) As Double
    P_HSD = sub_HSD(p_para)
End Function

Private Function sub_STEEL(p_para As VBAPARAM_A, ByVal side As Long) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_STEEL As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo / Sqr(2#)
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_STEEL = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_STEEL = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(j) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 6000 Then fai = 6000
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 100 Then LLP = 100
    
    
    ySt = -5
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = (1.5 - 0.8) / LLP
    yKan = 10# / LLP
    
    tmpv = fai / 2#
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            Dm01(1) = 1
            For j0 = 2 To GUN
                sqrtA = Sqr(Parxy(1, j0)) * yDat
                sqrtB = Sqr(1# - Parxy(1, j0))
                If side = 1 Then
                    Dm01(j0) = XlNormSDist((sqrtA + Dm00) / sqrtB) - XlNormSDist((sqrtA - Dm00) / sqrtB)
                Else
                    Dm01(j0) = XlNormSDist((sqrtA + Dm00) / sqrtB)
                End If
            Next j0
            Dm03 = 1
            For j0 = 1 To GUN
                Dm03 = Dm03 * Dm01(j0)
            Next j0
            Dm02 = Dm02 + Dm03
            Dm03 = Exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) _
                - fai * xDat * xDat / 2# - XlGanm_Calc(tmpv) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_STEEL = Abs(1 - TT0 * xKan * yKan)
    sub_STEEL = P_STEEL
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_STEEL = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_STEEL(p_para As VBAPARAM_A, ByVal side As Long) As Double
    P_STEEL = sub_STEEL(p_para, side)
End Function

Private Function sub_GamesHowell(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU, MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01(MAX_GUNSU) As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_GamesHowell As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_GamesHowell = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_GamesHowell = DBL_ERR
            Exit Function
        End If
    Next i
    fai = 0
    For i = 1 To GUN
        fai = fai + Gsmple(i)
        TT0 = Gsmple(i)
        For j = 1 To GUN
            If i <> j Then
                Parxy(i, j) = Gsmple(i) / (TT0 + Gsmple(j))
            Else
                Parxy(i, j) = 0
            End If
        Next j
    Next i
    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    
    LLP = 100
    If fai > 90 Then LLP = fai + 20
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 7 Then
        xSt = 0.0001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    If fai > 6000 Then fai = 6000
    xSt = IIf(fai > 1000, 0.8, 0.0001)
    xKan = IIf(fai > 1000, 0.7 / LLP, IIf(fai > 500, 1.5 / LLP, IIf(fai > 100, 2# / LLP, 4# / LLP)))
    yKan = 10# / LLP

    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 0
            For i0 = 1 To GUN
                Dm01(i0) = 0
            Next i0
            For i0 = 1 To GUN
                For j0 = 1 To GUN
                    If i0 <> j0 Then
                        sqrtA = Sqr(Parxy(i0, j0)) * yDat
                        sqrtB = Sqr(1# - Parxy(i0, j0))
                        '2017.02.20 mdf:
                        'Dm01(j0) = NORMSDIST(sqrtA / sqrtB) - NORMSDIST((sqrtA - Dm00) / sqrtB)
                        Dm01(j0) = XlNormSDist(sqrtA / sqrtB) - XlNormSDist((sqrtA - Dm00) / sqrtB)
                        'end mdf
                    Else
                        Dm01(j0) = 1
                    End If
                Next j0
                Dm03 = 1
                For j0 = 1 To GUN
                    Dm03 = Dm03 * Dm01(j0)
                Next j0
                Dm02 = Dm02 + Dm03
            Next i0
            Dm03 = Exp(-yDat * yDat / 2# - Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) + (fai - 1#) * Log(xDat) - fai * xDat * xDat / 2# - XlGanm_Calc(fai / 2#) - (fai / 2# - 1#) * Log(2#))
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    P_GamesHowell = Abs(1 - TT0 * xKan * yKan)
    sub_GamesHowell = P_GamesHowell
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_GamesHowell = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_GamesHowell(p_para As VBAPARAM_A) As Double
    P_GamesHowell = sub_GamesHowell(p_para)
End Function

Private Function sub_DunnetT3(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetT3 = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetT3 = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 6000 Then fai = 6000
    
    LLP = 50
    TT0 = 0
    
    LLP = 1000
    If fai > 1400 Then
        delta = 1.2 / 1000
    Else
        delta = 10# / 1000
    End If
    
    ySt = delta
        
    Dm01 = GUN * (GUN - 1#) / 2#
    Dm04 = 0
    For i = 1 To LLP
        Dm02 = WorksheetFunction.Power((2# * NORMSDIST(TVAL2 * ySt) - 1), Dm01)
        Dm03 = Exp((fai / 2#) * Log(fai) + (fai - 1#) * Log(ySt) - fai * ySt * ySt / 2# - XlGanm_Calc(fai / 2#) - (fai / 2# - 1#) * Log(2#))
        If Dm03 <> Dm03 Then Dm03 = 0
        Dm04 = Dm04 + Dm02 * Dm03 * delta
        ySt = ySt + delta
    Next i
    
    P_DunnetT3 = 1 - Dm04
    sub_DunnetT3 = P_DunnetT3
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetT3 = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Public Function P_DunnetT3(p_para As VBAPARAM_A) As Double
    P_DunnetT3 = sub_DunnetT3(p_para)
End Function

Private Function sub_DunnetBoth(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim d1 As Double, d2 As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetBoth = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetBoth = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = Int(fai + 20)
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 5 Then
        xSt = 0.001
    Else
        xSt = 0.1
    End If
    
    ySt = -5
    
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
    d1 = -Log(Sqr(2# * PPi)) + (fai / 2#) * Log(fai) - XlGanm_Calc(fai / 2#) - (fai / 2# - 1#) * Log(2#)
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        d2 = (fai - 1#) * Log(xDat) - fai * xDat * xDat / 2#
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 1
            For i0 = 2 To GUN
                Dm01 = XlNormSDist((Sqr(Parxy(i0)) * yDat + Dm00) / Sqr(1 - Parxy(i0))) _
                      - XlNormSDist((Sqr(Parxy(i0)) * yDat - Dm00) / Sqr(1 - Parxy(i0)))
                Dm02 = Dm02 * Dm01
            Next i0
            #If 0 Then
            On Error Resume Next
            Dm05 = WorksheetFunction.Power(xDat, (fai - 1))
            If err.Number <> 0 Then
                Dm05 = 1.77937370028148E+307
            End If
            On Error GoTo handleCancel
            Dm04 = Exp(-WorksheetFunction.Power(yDat, 2) / 2#) / Sqr(PPi * 2#)
            Dm06 = Exp(-fai * WorksheetFunction.Power(xDat, 2) / 2#)
            
            Dm03 = Dm04 * Dm05 * Dm06 * cGanm_Calc(fai)
            #Else
            Dm03 = Exp(-yDat * yDat / 2# + d1 + d2)
            #End If
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    
    sub_DunnetBoth = Abs(1 - TT0 * xKan * yKan)
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetBoth = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

Private Function sub_DunnetSingle(p_para As VBAPARAM_A) As Double
    Dim Parxy(MAX_GUNSU) As Double
    Dim i As Long, j As Long, i0 As Long, j0 As Long
    Dim TT0 As Double, fai As Double, LLP As Double
    Dim xSt As Double, ySt As Double, xKan As Double, yKan As Double, xDat As Double, yDat As Double
    Dim Dm00 As Double, Dm01 As Double, Dm02 As Double, Dm03 As Double
    Dim sqrtA As Double, sqrtB As Double
    Dim P_DunnetT3 As Double
    Dim Gsmple(MAX_GUNSU)
    Const PPi As Double = 3.14159265358979
    Dim TVAL2 As Double
    Dim GUN As Double
    Dim saveCancelKey As Long
    saveCancelKey = Application.EnableCancelKey
    On Error GoTo handleCancel
    Application.EnableCancelKey = xlErrorHandler
    TVAL2 = p_para.Tokeiryo
    GUN = p_para.GunSu
    For i = 1 To GUN
        Gsmple(i) = p_para.GSmpl(i)
    Next i
    If GUN < 1 Then
        sub_DunnetSingle = DBL_ERR
        Exit Function
    End If
    For i = 1 To GUN
        If Gsmple(i) < 1 Then
            sub_DunnetSingle = DBL_ERR
            Exit Function
        End If
    Next i
    fai = Gsmple(1)
    TT0 = Gsmple(1)
    Parxy(1) = 0
    For i = 2 To GUN
        fai = fai + Gsmple(i)
        Parxy(i) = Gsmple(i) / (TT0 + Gsmple(i))
    Next i

    fai = fai - GUN
    
    If p_para.bFdGiven Then
        fai = p_para.Fd
    End If
    
    If fai > 1000 Then fai = 1000
    
    LLP = 100
    If fai > 90 Then LLP = Int(fai + 20)
    If LLP > 50 Then LLP = 50
    
    If p_para.Tokeiryo > 5 Then
        xSt = 0.001
    Else
        xSt = 0.01
    End If
    
    ySt = -5
    
    If fai > 500 Then
        xKan = 1.5 / LLP
    ElseIf fai > 100 Then
        xKan = 2# / LLP
    Else
        xKan = 4# / LLP
    End If
    yKan = 10# / LLP
    
        
    TT0 = 0
    For i = 1 To LLP
        xDat = xSt + xKan * (i - 1)
        Dm00 = xDat * TVAL2
        For j = 1 To LLP
            yDat = ySt + yKan * (j - 1)
            Dm02 = 1
            For i0 = 2 To GUN
                Dm01 = XlNormSDist((Sqr(Parxy(i0)) * yDat + Dm00) / Sqr(1 - Parxy(i0)))

                Dm02 = Dm02 * Dm01
            Next i0
            On Error Resume Next
            Dm05 = WorksheetFunction.Power(xDat, (fai - 1))
            If err.Number <> 0 Then
                Dm05 = 1.77937370028148E+307
            End If
            On Error GoTo handleCancel
            Dm04 = Exp(-WorksheetFunction.Power(yDat, 2) / 2#) / Sqr(PPi * 2#)
            Dm06 = Exp(-fai * WorksheetFunction.Power(xDat, 2) / 2#)
            
            Dm03 = Dm04 * Dm05 * Dm06 * cGanm_Calc(fai)
                        
            TT0 = TT0 + Dm02 * Dm03
        Next j
    Next i
    
    sub_DunnetSingle = Abs(1 - TT0 * xKan * yKan)
    Application.EnableCancelKey = saveCancelKey
    Exit Function
handleCancel:
    bSwEnd = True
    bAbort = True
    sub_DunnetSingle = DBL_ERR
    Application.EnableCancelKey = saveCancelKey
End Function

'========EOF========
Attribute VB_Name = "mdlClipBoard"
Option Explicit

#If VBA7 Then
    Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As LongPtr) As LongPtr
    Declare PtrSafe Function CloseClipboard Lib "User32" () As Long
    Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hwnd As LongPtr) As LongPtr
    Declare PtrSafe Function EmptyClipboard Lib "User32" () As Long
    Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr
    Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
#Else
    Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare Function CloseClipboard Lib "User32" () As Long
    Declare Function OpenClipboard Lib "User32" (ByVal hwnd As Long) As Long
    Declare Function EmptyClipboard Lib "User32" () As Long
    Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) As Long
    Declare Function SetClipboardData Lib "User32" (ByVal wFormat As Long, ByVal hMem As Long) As Long
#End If

Private Const GMEM_MOVEABLE = &H2
Private Const GMEM_ZEROINIT = &H40
Private Const GHND = (GMEM_MOVEABLE Or GMEM_ZEROINIT)

Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096

Public Sub Clear_Clipboard()
   OpenClipboard (0)
   DoEvents
   EmptyClipboard
   DoEvents
   CloseClipboard
   DoEvents
End Sub

Public Sub PutInClipboard(ByVal html As String)
    #If 0 And Win64 Then
        Call ClipBoard_SetData(html)
    #Else
        'Dim mydata As DataObject
        'Set mydata = New DataObject
        Dim mydata As Object
        Set mydata = CreateObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        Application.CutCopyMode = False
        DoEvents
        Clear_Clipboard
        DoEvents
        mydata.SetText html
        DoEvents
        mydata.PutInClipboard
        DoEvents
        Set mydata = Nothing
    #End If
End Sub

Sub ClipBoard_SetData(MyString As String)
    Dim hGlobalMemory As LongPtr, lpGlobalMemory As LongPtr
    Dim hClipMemory As LongPtr, x As Long

    hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

    lpGlobalMemory = GlobalLock(hGlobalMemory)

    lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

    If GlobalUnlock(hGlobalMemory) <> 0 Then
       MsgBox "Could not unlock memory location. Copy aborted."
       GoTo OutOfHere
    End If

    If OpenClipboard(0&) = 0 Then
       MsgBox "Could not open the Clipboard. Copy aborted."
       Exit Sub
    End If

    x = EmptyClipboard()

    hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

OutOfHere:
    If CloseClipboard() = 0 Then
       MsgBox "Could not close Clipboard."
    End If
End Sub

Attribute VB_Name = "mdlCluster"
Option Explicit

Private Type CLUSTERVBA
    DataRge As String * 256                          '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    OutRge As String * 256                             '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    ClusterType As Long                       '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30e|w|fffd||fffd|
    ClusterNum As Long                        '|fffd||5fd||fffd||fffd||fffd||fffd|
    Method As Long                             '|fffd|v|fffd|Z|fffd||fffd||fffd|@
    DistanceType As Long                     '|fffd||fffd||fffd||fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z
    ODistanceType As Long                   '|fffd||fffd||fffd||7b0||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z
    dummy As Long
    Multiple As Double                         '|fffd||fffd||fffd||7b0||fffd||fffd||fffd||fffd||7b7||fffd||fffd|i0.01|fffd|`0.9|fffd|j
    StartPoint As Long                         '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||c42c||fffd||fffd||fffd||fffd|
    Stop As Long                                '|fffd||fffd||fffd|l|fffd||20a|O|fffd||fffd||fffd||7b0||fffd||fffd||fffd||fffd||fffd|
    DataOri As Long                            '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    GrpShow As Long                          '|fffd|O|fffd||fffd||fffd|t|fffd||315|\|fffd||fffd|
    fontsize As Long                           '|32b||fffd||102||33b||fffd||fffd|
    GrpRows As Long                           '|fffd||fffd||fffd||302||33b||fffd||fffd|
    GrpCols As Long                            '|fffd||fffd||fffd||302||33b||fffd||fffd|
    RowFirst As Long                            '|fffd||fffd|s|fffd||682||fffd||fffd||7b0||fffd||fffd||fffd||fffd|
    ColFirst As Long                            '|fffd||fffd||fffd||682||fffd||fffd||7b0||fffd||fffd||fffd||fffd|
End Type

Private m_varselect As String
Private clusterTbl As CLUSTERVBA

#If VBA7 Then
    #If Win64 Then
        Declare PtrSafe Function clust_vba Lib "KKS_SubM_64.dll" (clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
    #Else
        Declare PtrSafe Function clust_vba Lib "KKS_SubM.dll" (clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
    #End If
#Else
    #If Win64 Then
        Declare Function clust_vba Lib "KKS_SubM_64.dll" (clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
    #Else
        Declare Function clust_vba Lib "KKS_SubM.dll" (clusterpara As CLUSTERVBA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
    #End If
#End If

'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub ClusterGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    Dim bColTitle As Boolean, bRowTitle As Boolean
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    Set rgeVar = Range(dlg.EditBoxes("edtDataRge").text)
    bColTitle = (dlg.OptionButtons("optCTitle").Value = xlOn)
    bRowTitle = True '(dlg.OptionButtons("optRTitle").Value = xlOn)
    If bColTitle Then
        Set rgeVar = Range(rgeVar(1, 2), rgeVar(1, rgeVar.Columns.Count))
    Else
        Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    End If
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    If bRowTitle Then
        For i = 1 To rgeVar.Columns.Count
            m_varselect = m_varselect & "," & valvar(1, i)
        Next i
    Else
        For i = 1 To rgeVar.Columns.Count
            m_varselect = m_varselect & "," & "Item " & i
        Next i
    End If
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    If bColTitle Then
        valvar = Split(m_varselect, ",")
        m_varselect = CStr(valvar(0) + 1) & ",0"
        For i = 1 To valvar(0)
            m_varselect = m_varselect & "," & valvar(i) + 1
        Next i
    End If
    
    On Error GoTo 0
End Sub

Private Sub Cluster_ODistance()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bOn = dlg.OptionButtons("optODistance2").Value = xlOn
    dlg.EditBoxes("edtMultiple").Enabled = bOn
End Sub

Private Sub Cluster_GrpShow()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bOn = (dlg.CheckBoxes("chkGrpShow").Value = xlOn)
    dlg.EditBoxes("edtFontSize").Enabled = bOn
    dlg.OptionButtons("optGrpOri1").Enabled = bOn
    dlg.OptionButtons("optGrpOri2").Enabled = bOn
End Sub

Private Sub ClusterDataType()
    Dim bEnabled As Boolean
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    bEnabled = IIf(dlg.OptionButtons("optSamples").Value = xlOn, True, False)
    dlg.OptionButtons("optDistance1").Enabled = True
    dlg.OptionButtons("optDistance2").Enabled = True
    dlg.OptionButtons("optDistance3").Enabled = True
    dlg.OptionButtons("optDistance4").Enabled = True
    dlg.OptionButtons("optDistance5").Enabled = True
    dlg.OptionButtons("optODistance1").Enabled = bEnabled
    dlg.OptionButtons("optODistance2").Enabled = bEnabled
    dlg.OptionButtons("optODistance3").Enabled = bEnabled
    dlg.OptionButtons("optODistance4").Enabled = bEnabled
    dlg.CheckBoxes("chkStartPoint").Enabled = bEnabled
    dlg.EditBoxes("edtMultiple").Enabled = (dlg.OptionButtons("optODistance2").Enabled And dlg.OptionButtons("optODistance2").Value = xlOn)
End Sub

Private Sub Cluster_SetMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("btnVarSelect").OnAction = "ClusterGetVarSel"
    dlg.OptionButtons("optSamples").OnAction = "ClusterDataType"
    dlg.OptionButtons("optItems").OnAction = "ClusterDataType"
    dlg.OptionButtons("optODistance1").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance2").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance3").OnAction = "Cluster_ODistance"
    dlg.OptionButtons("optODistance4").OnAction = "Cluster_ODistance"
    dlg.CheckBoxes("chkGrpShow").OnAction = "Cluster_GrpShow"
    ClusterDataType
    Cluster_ODistance
    Cluster_GrpShow
End Sub
'
'return TRUE = OK else ERROR
'
Private Function chkClusterData(ByVal bMultiCluster As Boolean, ByVal BgnNo As Long, ByVal EndNo As Long) As Boolean
    Dim rgedata As Range, rgeout As Range
    Dim msgStr As String
    Dim tmpi As Long
    Dim itemnum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgedata = Range(clusterTbl.DataRge)
    Set rgeout = Range(clusterTbl.OutRge)
    On Error GoTo 0
    
    If rgedata Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    'If RgeOut Is Nothing Then
    '    msgStr = "|fffd||fffd||fffd||28f|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    '    GoTo chkEnd
    'End If
    
    itemnum = rgedata.Columns.Count
    If clusterTbl.ColFirst = 1 Then itemnum = itemnum - 1
    If bMultiCluster Then
        If clusterTbl.ClusterType = 2 And (BgnNo > EndNo Or BgnNo < 2 Or EndNo < 2 Or BgnNo > itemnum Or EndNo > itemnum) Then
            msgStr = "|fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    Else
        tmpi = clusterTbl.ClusterNum
        If clusterTbl.ClusterType = 2 And (tmpi < 2 Or tmpi > itemnum) Then
            msgStr = "|fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    End If
    '
    If clusterTbl.ODistanceType = 2 Then
        If clusterTbl.Multiple < 0.01 Or clusterTbl.Multiple > 0.9 Then
            msgStr = "0.01|fffd|`0.9|fffd||30a||502||312|l|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo chkEnd
        End If
    End If
    
    If clusterTbl.GrpShow = 1 Then
        If clusterTbl.fontsize < 4 Or clusterTbl.fontsize > 20 Then
            msgStr = "|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd|T|fffd|C|fffd|Y|fffd||341|A4|fffd|`20|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
        If clusterTbl.GrpRows < 8 Or clusterTbl.GrpRows > 30 Then
            msgStr = "|fffd|O|fffd||fffd||fffd|t|fffd||30d|s|fffd||fffd||fffd||fffd|8|fffd|`30|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
        If clusterTbl.GrpCols < 8 Or clusterTbl.GrpCols > 30 Then
            msgStr = "|fffd|O|fffd||fffd||fffd|t|fffd||317||50502||341|A4|fffd|`12|fffd||142||fffd||fffd|B"
            GoTo chkEnd
        End If
    End If

chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkClusterData = False
        Exit Function
    End If
    
    '
    chkClusterData = True
End Function

Private Function handleClusterData() As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rge As Range
    Dim tmpRge As Range
    Dim tmpsht As Worksheet
    Dim clusterVarSel As Variant
    Dim smpnum As Long, itemnum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(clusterTbl.DataRge)
    smpnum = rgeSrc.Rows.Count
    itemnum = rgeSrc.Columns.Count
    Set tmpsht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$3")
    
    If m_varselect <> "0" Then
        clusterVarSel = Split(m_varselect, ",")
    Else
        ReDim clusterVarSel(0 To itemnum) As Long
        clusterVarSel(0) = itemnum
        For i = 1 To itemnum
            clusterVarSel(i) = i - 1
        Next i
    End If
    
    itemnum = clusterVarSel(0)

    For i = 1 To smpnum
        If clusterTbl.ColFirst = 2 Then
            rge(i + 1, 1) = i
        End If
        For j = 1 To itemnum
            rge(i, j + 1) = rgeSrc(i, clusterVarSel(j) + 1)
        Next j
    Next i
    If clusterTbl.ColFirst = 2 Then
        clusterTbl.DataRge = toXlRCstr(Range(rge(1, 1), rge(smpnum, itemnum + 1)).Address) & vbNullChar
        clusterTbl.ColFirst = 1
    Else
        clusterTbl.DataRge = toXlRCstr(Range(rge(1, 2), rge(smpnum, itemnum + 1)).Address) & vbNullChar
    End If
    clusterTbl.DataRge = tmpsht.name & "!" & clusterTbl.DataRge & vbNullChar
    
    Set handleClusterData = tmpsht
    On Error GoTo 0
End Function

Sub KKS_CLUSTER_1P01()
    Dim i As Integer, k As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim tmpsht As Worksheet
    Dim grpType0 As Integer
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim actCell As Range
    Dim cht As Chart
    Dim VerNoXL As Integer
    Dim actSht As Worksheet, ResultSht As Worksheet
    Dim bMultiCluster As Boolean
    Dim BgnNo As Long, EndNo As Long
    Dim GrpOri As Long
    Dim TextNum As Long
    
    On Error Resume Next
    
    VerNoXL = 12    '09.6 PYJ old:getExcelVerNo()
    ReDim VbaGrp(0)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgCluster")
    
    Call Cluster_SetMacro(dlg)
    
redisp:
    m_varselect = "0"
    Set actSht = ActiveSheet
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        clusterTbl.DataRge = dlg.EditBoxes("edtDataRge").text & vbNullChar
        'clusterTbl.OutRge = dlg.EditBoxes("edtOutRge").Text & vbNullChar
        clusterTbl.ClusterType = IIf(dlg.OptionButtons("optSamples").Value = xlOn, 1, 2)
        clusterTbl.ClusterNum = val(dlg.EditBoxes("edtClusterNum").text)
        clusterTbl.Method = 2 'IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 1, 2)
        clusterTbl.DistanceType = IIf(dlg.OptionButtons("optDistance1").Value = xlOn, 1, _
                                       IIf(dlg.OptionButtons("optDistance2").Value = xlOn, 2, _
                                       IIf(dlg.OptionButtons("optDistance3").Value = xlOn, 3, _
                                       IIf(dlg.OptionButtons("optDistance4").Value = xlOn, 4, 5))))
        clusterTbl.ODistanceType = IIf(dlg.OptionButtons("optODistance1").Value = xlOn, 1, _
                                       IIf(dlg.OptionButtons("optODistance2").Value = xlOn, 2, _
                                       IIf(dlg.OptionButtons("optODistance3").Value = xlOn, 3, 4)))
        If clusterTbl.ODistanceType = 2 Then
            clusterTbl.Multiple = val(dlg.EditBoxes("edtMultiple").text)
        End If
        clusterTbl.StartPoint = IIf(dlg.CheckBoxes("chkStartPoint").Value = xlOn, 1, 0)
        clusterTbl.Stop = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 0, 1)
        clusterTbl.DataOri = 1 'IIf(dlg.OptionButtons("optByCol").Value = xlOn, 1, 2)
        clusterTbl.GrpShow = IIf(dlg.CheckBoxes("chkGrpShow").Value = xlOn, 1, 0)
        clusterTbl.fontsize = 10 'val(dlg.EditBoxes("edtFontSize").Text)
        clusterTbl.GrpRows = 20 'val(dlg.EditBoxes("edtGrpRows").Text)
        clusterTbl.GrpCols = 8 'val(dlg.EditBoxes("edtGrpCols").Text)
        clusterTbl.RowFirst = 1 'IIf(dlg.OptionButtons("optRTitle").Value = xlOn, 1, 2)
        clusterTbl.ColFirst = IIf(dlg.OptionButtons("optCTitle").Value = xlOn, 1, 2)
        bMultiCluster = IIf(dlg.OptionButtons("optSingle").Value = xlOn, 0, 1)
        If bMultiCluster Then
            BgnNo = val(dlg.EditBoxes("edtBgnNo").text)
            EndNo = val(dlg.EditBoxes("edtEndNo").text)
        Else
            BgnNo = clusterTbl.ClusterNum
            EndNo = BgnNo
        End If
        GrpOri = IIf(dlg.OptionButtons("optGrpOri1").Value = xlOn, 2, 1)
        TextNum = val(dlg.EditBoxes("edtFontSize").text)
        If chkClusterData(bMultiCluster, BgnNo, EndNo) = False Then
            GoTo redisp
        End If
        
        Set tmpsht = handleClusterData
        If tmpsht Is Nothing Then GoTo redisp
        
        For k = BgnNo To EndNo
            actSht.Activate
            Call changeToSSDir
            ActiveWorkbook.ActiveSheet.Select
            Set ResultSht = ActiveWorkbook.Worksheets.Add
            clusterTbl.OutRge = toXlRCstr(ResultSht.name & "!$A$2") & vbNullChar
            clusterTbl.ClusterNum = k
            rtn = clust_vba(clusterTbl, VerNoXL, G_VbaGrp, CallBackPtr)
            Application.ScreenUpdating = True
            If (rtn = 0 And VerNoXL >= 12) Then
                Set actCell = ActiveCell
                #If 0 Then
                For i = 1 To UBound(G_VbaGrp)
                    If ConvToBSTR(G_VbaGrp(i)) Then
                        If VbaGrp(i).Type > 0 Then
                            Set cht = DrawClusterGrp(G_VbaGrp(i).sheetName, G_VbaGrp(i).grpOut, G_VbaGrp(i).grpData, G_VbaGrp(i).grpPara, cht)
                        End If
                    End If
                Next i
                #Else
                    If ConvToBSTR(G_VbaGrp(1)) Then
                        If VbaGrp(1).Type > 0 Then
                            Set cht = DrawClusterGrp(G_VbaGrp(1).sheetName, G_VbaGrp(1).grpOut, G_VbaGrp(1).grpData, G_VbaGrp(1).grpPara, clusterTbl.DataRge, clusterTbl.ClusterType, GrpOri, TextNum)
                        End If
                    End If
                #End If
                actCell.Worksheet.Activate
                actCell.Select
            End If
            ReDim G_VbaGrp(0)

            Call Comm_CutDataLink(ActiveWorkbook, GxlaTai5BkGraph)
            actCell.Select
            If bMultiCluster Then
                ActiveSheet.name = k & "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||142||30c||fffd||fffd||fffd|"
            End If
            ActiveSheet.Cells.ColumnWidth = 9
        Next k
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'



Attribute VB_Name = "mdlClusterGrp"
Option Explicit

Private ClusterCht As Chart
Private rgeTitle As Range
Private TextLen As Long
Private b50 As Long

' |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
Function DrawClusterGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                      ByVal strGrpData As String, ByVal strpara As String, ByVal strTitle As String, _
                      ByVal ClusterType As Long, ByVal Ori As Long, ByVal TextNum As Long) As Chart
    Dim nc As Long, clsNum As Long
    Dim r As Range, rgeout As Range
    Dim para As Object
    Dim WrkSht As Worksheet, wrkbk As Workbook
    On Error Resume Next
    Set para = Comm_SetDict(strpara)
    If para Is Nothing Then
        GoTo exitit
    End If
    Set WrkSht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set wrkbk = WrkSht.Parent
    If WrkSht Is Nothing Or wrkbk Is Nothing Then
        GoTo exitit
    End If
    Set rgeout = WrkSht.Range(Comm_toXlA1str(strGrpOut))
    Set r = WrkSht.Range(Comm_toXlA1str(strGrpData))
    Set rgeTitle = Range(Comm_toXlA1str(strTitle))
    If rgeout Is Nothing Or r Is Nothing Or rgeTitle Is Nothing Then
        GoTo exitit
    End If
    On Error GoTo 0
    
    nc = CLng(para("SmpNum"))
    clsNum = CLng(para("ClsNum"))
    b50 = CLng(para("b50"))
    TextLen = TextNum
    Set para = Nothing
    Set ClusterCht = Nothing
    If ClusterType = 1 Then
        Set rgeTitle = rgeTitle(2, 1).Resize(nc, 1)
    Else
        Set rgeTitle = rgeTitle(1, 2).Resize(1, nc)
    End If
    Application.ScreenUpdating = False
    DrawGrp nc, clsNum, r, Ori
    If Ori = 2 Then
        Call Comm_setChartPosSize(ClusterCht.Parent, rgeout, 20, 8)
    Else
        'Call Comm_setChartPosSize(ClusterCht.Parent, rgeOut, nc + clsNum + 5, 8)
        Call Comm_setChartPosSize(ClusterCht.Parent, rgeout, 25, 6)
    End If
    ClusterCht.ChartArea.Select
    Call MatchWorkbookFont
exitit:
    Set DrawClusterGrp = ClusterCht
End Function

Sub DrawGrp(ByVal nc As Long, ByVal clsNum As Long, ByVal r As Range, ByVal Ori As Long)
    Dim kgg() As Long
    Dim pair1() As Long, pair2() As Long
    Dim dist() As Double
    Dim v As Variant
    Dim i As Long
    ReDim kgg(0 To nc)
    ReDim pair1(0 To nc)
    ReDim pair2(0 To nc)
    ReDim dist(0 To nc)
    v = r.Value
    For i = 1 To nc
        kgg(i - 1) = v(i, 1) - 1
    Next i
    For i = 1 To nc
        pair1(i) = v(i, 2) - 1
    Next i
    For i = 1 To nc
        pair2(i) = v(i, 3) - 1
    Next i
    For i = 1 To nc
        dist(i) = v(i, 4)
    Next i
    Call fullgra(Ori, nc, clsNum, dist, kgg, pair1, pair2, r(1, 1).row - 1, r(1, 4).Column + 1)
End Sub

Function fullgra(Ori As Long, nc As Long, clsNum As Long, dist() As Double, _
        kgg() As Long, pair1() As Long, pair2() As Long, _
        row As Long, col As Long)
    Dim i As Long, j As Long, widthx As Long
    Dim CasePos() As Double, NodePos() As Double
    Dim DistLen As Double
    Dim offsety As Double, offsetx As Double, factorx As Double, delta As Double, x As Double
    Dim rng As Range

    ReDim CasePos(nc)
    ReDim NodePos(nc)

    DistLen = dist(nc - 1)

    Set rng = Range(Cells(row + 1, col + 1), Cells(row + 1, col + 1))
   
    row = row + 1
    For i = 0 To nc - 1
        For j = 0 To nc - 1
            If kgg(i) = j Then
                Exit For
            End If
        Next j
        NodePos(j) = 0
        CasePos(j) = i + 1
        If b50 = 0 Then
            '2016.07.12 mdf:
            #If 0 Then
            If rgeTitle.Columns.Count = 1 Then
                Cells(row, col) = MidB(rgeTitle(kgg(i) + 1, 1), 1, TextLen)
            Else
                Cells(row, col) = MidB(rgeTitle(1, kgg(i) + 1), 1, TextLen)
            End If
            #End If
        Else
            Cells(row, col) = kgg(i) + 1
        End If
        Cells(row, col + 1) = IIf(Ori = 2 Or Application.Version >= 12, 0, 1)
        row = row + 1
    Next i
   
    Charts.Add
    ActiveChart.Location Where:=xlLocationAsObject, name:=rng.Parent.name
    Set ClusterCht = ActiveChart
    With ClusterCht
        .HasTitle = True
        .chartTitle.Characters.text = "|fffd||fffd||fffd|`|fffd|}"
    End With
    For i = 1 To ClusterCht.SeriesCollection.Count
        ClusterCht.SeriesCollection(1).Delete
    Next i
    Dim maxDiff As Double
    maxDiff = 0
    For i = 1 To nc - 1
        Dim Case1 As Double, Node1 As Double, Case2 As Double, Node2 As Double, NodeN As Double
        Case1 = CasePos(pair1(i))
        Node1 = NodePos(pair1(i))
        Case2 = CasePos(pair2(i))
        Node2 = NodePos(pair2(i))
        NodeN = dist(i) ' i
        gline Ori, Node1, Case1, NodeN, Case1
        gline Ori, Node2, Case2, NodeN, Case2
        gline Ori, NodeN, Case1, NodeN, Case2
        CasePos(pair1(i)) = (Case1 + Case2) * 0.5
        NodePos(pair1(i)) = NodeN
        If dist(i + 1) - dist(i) > maxDiff Then maxDiff = dist(i + 1) - dist(i)
        If i = nc - clsNum Then
            'gline Ori, NodeN + 0.5, 1, NodeN + 0.5, nc, 3
            gline Ori, NodeN + (dist(i + 1) - dist(i)) / 2, 1, NodeN + (dist(i + 1) - dist(i)) / 2, nc, 3
        End If
        If i = nc - 1 Then
            'gline Ori, NodeN, (Case1 + Case2) / 2, NodeN + 1, (Case1 + Case2) / 2
            gline Ori, NodeN, (Case1 + Case2) / 2, NodeN + maxDiff / 2, (Case1 + Case2) / 2
        End If
    Next i
    AddLabels Ori, nc, rng
    If Ori = 2 Then
        SetChartProps2
    Else
        SetChartProps nc
    End If
End Function

Sub gline(ByVal Ori As Long, ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double, Optional ByVal Color As Long = 1)
    Dim index As Long
    Dim XValues As String, YValues As String
    If Ori = 2 Then
        YValues = "{" & x1 & "," & x2 & "}"
        XValues = "{" & y1 & "," & y2 & "}"
    Else
        XValues = "{" & x1 & "," & x2 & "}"
        YValues = "{" & y1 & "," & y2 & "}"
    End If
    With ClusterCht.SeriesCollection.NewSeries
        index = ClusterCht.SeriesCollection.Count
      .formula = "=SERIES(," + XValues + "," + YValues + "," + CStr(index - 1) + ")"
      .name = "Cluster" + CStr(index)
      .ChartType = xlXYScatterLinesNoMarkers
      .Border.colorIndex = Color
      .Border.Weight = xlThin
      .Border.LineStyle = xlContinuous
      .AxisGroup = xlPrimary
    End With
End Sub

Sub AddLabels(ByVal Ori As Long, ByVal nc As Long, ByVal r As Range)
    Dim LabelsAddress As String, ZerosAddress
    If Ori = 1 Then
        LabelsAddress = r(1, 0).Resize(nc + 1, 1).Address
        ZerosAddress = r(1, 1).Resize(nc + 1, 1).Address
    Else
        LabelsAddress = r(1, 0).Resize(nc, 1).Address
        ZerosAddress = r(1, 1).Resize(nc, 1).Address
    End If
    With ClusterCht.SeriesCollection.NewSeries
      .formula = "=SERIES(," + "'" & r.Parent.name & "'!" & LabelsAddress + "," + "'" & r.Parent.name & "'!" & ZerosAddress + ",1)"
      .ChartType = IIf(Ori = 2, xlColumnClustered, xlBarClustered)
      .AxisGroup = IIf(Ori = 2, xlPrimary, xlSecondary)
      .name = "Labels"
    End With
End Sub

Sub SetChartProps(ByVal nc As Long)
    ClusterCht.Legend.Delete
    ClusterCht.Axes(xlValue).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlNone
    End With
    With ClusterCht.Axes(xlValue)
        .MinimumScale = 1
        .MaximumScale = nc + 1
        .MinorUnitIsAuto = True
        .MajorUnit = 1
        .Crosses = xlAutomatic
        .ReversePlotOrder = True
        .ScaleType = xlLinear
        .DisplayUnit = xlNone
    End With
    ClusterCht.PlotArea.Select
    With ClusterCht
        .HasAxis(xlCategory, xlPrimary) = True
        .HasAxis(xlCategory, xlSecondary) = True
        .HasAxis(xlValue, xlPrimary) = True
        .HasAxis(xlValue, xlSecondary) = True
    End With
    ClusterCht.Axes(xlCategory, xlPrimary).CategoryType = xlAutomatic
    ClusterCht.Axes(xlCategory, xlSecondary).CategoryType = xlAutomatic
    ClusterCht.Axes(xlCategory, xlSecondary).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlLow
    End With
    With ClusterCht.Axes(xlCategory, xlSecondary)
        .Crosses = xlMaximum
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .AxisBetweenCategories = False
        .ReversePlotOrder = True
    End With
    ClusterCht.Axes(xlValue, xlSecondary).Select
    With ClusterCht.Axes(xlValue, xlSecondary)
        .MinimumScale = 0
        .MaximumScale = 1
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlCustom
        .CrossesAt = 1
        .ReversePlotOrder = False
        .ScaleType = xlLinear
        .DisplayUnit = xlNone
    End With
    ClusterCht.Axes(xlValue, xlSecondary).Delete
    ClusterCht.Axes(xlCategory).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MajorTickMark = xlNone
        .MinorTickMark = xlNone
        .TickLabelPosition = xlNone
    End With
    ClusterCht.Axes(xlValue).HasMajorGridlines = False
    ClusterCht.PlotArea.Select
    With Selection.Border
        .Weight = xlThin
        .LineStyle = xlNone
    End With
    Selection.Interior.colorIndex = xlNone
End Sub

Sub SetChartProps2()
    ClusterCht.Legend.Delete
    ClusterCht.PlotArea.Select
    ClusterCht.PlotArea.ClearFormats
    ClusterCht.Axes(xlValue).MajorGridlines.Delete
    ClusterCht.Axes(xlValue).Delete
    ClusterCht.Axes(xlCategory).TickLabels.Orientation = xlVertical
    With ActiveChart.Axes(xlCategory)
        .MajorTickMark = xlNone
        .TickLabels.Orientation = xlVertical
        .CrossesAt = 1
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .AxisBetweenCategories = True
        .ReversePlotOrder = False
        .Border.LineStyle = xlNone
    End With
End Sub
Attribute VB_Name = "mdlCommTest"
Option Explicit

Public Const DBL_ERR As Double = 1E+30
Public Const DBL_ZERO As Double = 0.0000000001  '1E-10
Public Const DBL_INFTY As Double = 1E+33

Public Const KT_BOTH As Integer = 0  '|fffd||fffd||fffd||fffd|
Public Const KT_LEFT As Integer = 1  '|fffd||fffd||fffd||fffd|
Public Const KT_RIGHT As Integer = 2 '|fffd|E|fffd||fffd|

Function findFinv(ByVal prob As Double, ktFlg As Integer, F1 As Double, F2 As Double) As Double
    If prob < 0 Or prob > 1 Or F1 <= DBL_ZERO Or F2 <= DBL_ZERO Then
        findFinv = DBL_ERR
        Exit Function
    End If
    '
    If ktFlg = KT_BOTH Then prob = prob / 2
    
    If ktFlg = KT_LEFT Then prob = 1 - prob
    
    findFinv = Application.FInv(prob, F1, F2)  '|fffd|E|fffd||fffd||fffd||fffd||fffd||fffd|

End Function

Function findZinv(ByVal prob As Double, ktFlg As Integer, Optional ByVal bCut As Boolean = False) As Double
    If prob <= 0 Then findZinv = -DBL_INFTY:   Exit Function
    If prob >= 1 Then findZinv = DBL_INFTY: Exit Function
    
    If ktFlg = KT_BOTH Then prob = prob * 0.5   'Normsinv : |fffd|P|fffd||fffd||fffd||590||fffd|
    findZinv = Abs(Application.NormSInv(prob))
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If ktFlg = KT_LEFT Then
        findZinv = -findZinv
    End If

    If bCut Then    '2|fffd||fffd|
        findZinv = Application.Round(findZinv, 2)
    End If

End Function


'======EOF======
Attribute VB_Name = "mdlCommon"
'=======================================================
Option Private Module
Option Explicit

Private dlgcontants As Object

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1) > oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1) < oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = err.Number
    On Error GoTo 0
End Function

Function Remove0Cate(rgeDataIn As String, rgeCateIn As String) As Integer
    Dim i As Long, j As Long, k As Long
    Dim ItmNum As Long, smpnum As Long, CateNum As Long
    Dim strCate As String
    Dim rgedata As Range, rgeCate As Range
    Dim varData As Variant, cate As Variant
    Dim cateCol As Collection
    On Error Resume Next
    Set rgedata = Range(toXlA1str(rgeDataIn))
    Set rgeCate = Range(toXlA1str(rgeCateIn))
    varData = rgedata.Value
    cate = rgeCate.Value
    ItmNum = rgedata.Columns.Count
    smpnum = rgedata.Rows.Count - 1
    CateNum = rgeCate.Rows.Count
    For i = 1 To ItmNum
        Set cateCol = New Collection
        For j = 1 To smpnum
            strCate = CStr(varData(j + 1, i))
            If cateCol.Item(strCate) = 0 Then
                cateCol.Add varData(j + 1, i), strCate
            End If
        Next j
        CollectionSort cateCol, True
        For j = 1 To smpnum
            strCate = CStr(varData(j + 1, i))
            For k = 1 To cateCol.Count
                If varData(j + 1, i) = cateCol(k) Then
                    varData(j + 1, i) = k
                    Exit For
                End If
            Next k
        Next j
        If CateNum >= cateCol.Count Then
            For k = 1 To cateCol.Count
                cate(k, i) = cate(cateCol(k), i)
            Next k
        End If
        Set cateCol = Nothing
    Next i
    rgedata.Value = varData
    rgeCate.Value = cate
    Set cateCol = Nothing
    Remove0Cate = 0
    On Error GoTo 0
End Function

'----- dialogBox control common module ----- bgn ------

Sub CommSetSmpName(ByVal dlg As DialogSheet, ByVal strSmpName As String, ByVal bEnabled As Boolean)
    dlg.EditBoxes(strSmpName).Enabled = bEnabled
    If bEnabled Then
        On Error Resume Next    '09.1.22 LSQ add "on error" : avoid focus setting unreasonable error (in SR2)
    
        'dlg.EditBoxes("RgeSmpName").SetFocus
        dlg.Focus = dlg.EditBoxes(strSmpName).name
        
        On Error GoTo 0
    End If
End Sub

'08.12.4 LSQ add : firstly used in SR3
Sub CommSetEditBox_byChk(ByVal dlgName As String, ByVal chkName As String, ByVal edtName As String)
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets(dlgName)
    Set ChkObj = dlg.CheckBoxes(chkName)
    bOn = (ChkObj = xlOn And ChkObj.Enabled)
    
    Call CommSetSmpName(dlg, edtName, bOn)
End Sub
'
'08.12.4 LSQ add : firstly used in SR3
Sub CommSetEditBox_byOpt(ByVal dlgName As String, ByVal optName As String, ByVal edtName As String)
    Dim dlg As DialogSheet, optObj As OptionButton
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets(dlgName)
    Set optObj = dlg.OptionButtons(optName)
    bOn = (optObj = xlOn And optObj.Enabled)
    
    Call CommSetSmpName(dlg, edtName, bOn)
End Sub
'
'----- dialogBox control common module ----- end ------
'
Sub SaveDlg(ByVal dlg As DialogSheet)
    Dim part As Shape
    On Error Resume Next
    Set dlgcontants = Nothing
    Set dlgcontants = CreateObject("Scripting.Dictionary")
    dlgcontants("SSS_SRKV3_DLGNAME") = dlg.name
    For Each part In dlg.Shapes
        If part.FormControlType = xlEditBox Then
            dlgcontants(part.name) = part.DrawingObject.text
        ElseIf part.FormControlType = xlOptionButton Or part.FormControlType = xlCheckBox Or part.FormControlType = xlDropDown Then
            dlgcontants(part.name) = CStr(part.DrawingObject.Value)
        End If
    Next part
    On Error GoTo 0
End Sub

Function RestoreDlg(ByVal dlg As DialogSheet) As Boolean
    Dim part As Shape
    Dim keys
    Dim i
    If dlgcontants Is Nothing Then Exit Function
    On Error Resume Next
    If dlgcontants("SSS_SRKV3_DLGNAME") <> dlg.name Then
        On Error GoTo 0
        RestoreDlg = False
        Exit Function
    End If
    keys = dlgcontants.keys
    dlg.Unprotect
    For i = 0 To dlgcontants.Count - 1
        Set part = dlg.Shapes(keys(i))
        If part.FormControlType = xlEditBox Then
            part.DrawingObject.text = dlgcontants(keys(i))
        ElseIf part.FormControlType = xlOptionButton Or part.FormControlType = xlCheckBox Or part.FormControlType = xlDropDown Then
            part.DrawingObject.Value = CDbl(dlgcontants(keys(i)))
        End If
    Next i
    dlg.Protect
    On Error GoTo 0
    RestoreDlg = True
End Function

Function PasteRange(ByVal srcRge As Range, ByVal dstRge As Range, ByVal pasteType As XlPasteType) As Range
        srcRge.Worksheet.Activate
        srcRge.Copy
        dstRge.Worksheet.Activate
        dstRge.Select
        dstRge.PasteSpecial pasteType
        Set PasteRange = Selection
End Function

Sub SetRangeBorder(ByVal rge As Range, _
                    ByVal leftWgt As XlBorderWeight, _
                    ByVal topWgt As XlBorderWeight, _
                    ByVal rightWgt As XlBorderWeight, _
                    ByVal bottomWgt As XlBorderWeight, _
                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                    Optional ByVal insideH As XlBorderWeight = xlNone)
    On Error Resume Next
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .colorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    On Error GoTo 0
End Sub

Sub DrawLine(ByVal r As Range, ByVal LineStyle As Long)
    With r.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .colorIndex = 0
        .Weight = LineStyle
    End With
End Sub

Sub DrawLine_V(ByVal r As Range, ByVal LineStyle As Long)
    With r.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .colorIndex = 0
        .Weight = LineStyle
    End With
End Sub
'=== EOF ===
Attribute VB_Name = "mdlCrsTbl"
'=======================================================
' SSS_SRK Ver3.0 (Cross Tabulation Table)
'
' 2008.07 WZH
'=======================================================
Option Explicit

Private Const MAXITEMNUM As Integer = 50
Private Const MAXCATENUM As Integer = 200
Private Const MINCLSSMPNUM As Integer = 2

Private Const ERR_NULLOUT As String = "|fffd|o|fffd||354||348||34e|w|fffd||80aa||fffd||d74c2||142||fffd||fffd|B"
Private Const ERR_OVERITEMNUM As String = "|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B "
Private Const ERR_OVERCATENUM As String = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_NUMDATA As String = "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_CLSSMPNUM As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||702||fffd|"
Private Const ERR_INPUTVAL  As String = "|fffd||fffd||fffd||352|l|fffd||fffd||fffd||64f||fffd||142||fffd||fffd|B"
Private Const ERR_INTERNAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd|N|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"

Private Const DATA_UNCERTAIN    As String = "-"
Private Const STR_UNCERTAIN As String = "|fffd|s|fffd||fffd|"

Type CrsTbl_T
    rgeClass As Range
    rgeItem As Range
    rgeout As Range
    bNewSheet As Boolean
    bOutNTbl As Boolean
    bOutHTbl As Boolean
    bOutVTbl As Boolean
    bOutUnk As Boolean
    bOutAll As Boolean
    ClassCol As Collection
    ItemCol() As Collection
    UniqueCount As Collection
    maxClsCnt As Integer
    minClsCnt As Integer
    itemCnt() As Integer
End Type

Private Function MoveUnknown(ByRef oCollection As Collection) As Long
    Dim lInx As Long, lLast As Long
    Dim vTempItem As Variant
    
    On Error GoTo ErrFailed
    lLast = oCollection.Count
    For lInx = 1 To oCollection.Count
        If oCollection(lInx).key = DATA_UNCERTAIN Then
            'Store the items
            If VarType(oCollection(lInx)) = vbObject Then
                Set vTempItem = oCollection(lInx)
            Else
                vTempItem = oCollection(lInx)
            End If
            
            'Swap the items over
            oCollection.Add vTempItem, , lLast
            'Delete the original items
            oCollection.Remove lInx + 1
        End If
    Next
    Exit Function

ErrFailed:
    MoveUnknown = err.Number
    On Error GoTo 0
End Function

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1).name > oCollection(lSort2).name Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1).name < oCollection(lSort2).name Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = err.Number
    On Error GoTo 0
End Function

Private Sub SetMem(crstbl As CrsTbl_T, itemnum As Integer)
    Dim i As Integer
    Set crstbl.ClassCol = New Collection
    ReDim crstbl.ItemCol(1 To itemnum)
    For i = 1 To itemnum
        Set crstbl.ItemCol(i) = New Collection
    Next i
    Set crstbl.UniqueCount = New Collection
    ReDim crstbl.itemCnt(1 To itemnum)
End Sub

Private Sub FreeMem(crstbl As CrsTbl_T)
    Dim i As Integer
    Set crstbl.ClassCol = Nothing
    For i = 1 To UBound(crstbl.ItemCol)
        Set crstbl.ItemCol(i) = Nothing
    Next i
    ReDim crstbl.ItemCol(0)
    Set crstbl.UniqueCount = Nothing
    ReDim crstbl.itemCnt(0)
End Sub

'get category count
Private Function GetUniqueCount(crstbl As CrsTbl_T) As Integer
    Dim rgeClass As Range, rge As Range
    Dim r As Range, o As Range
    Dim t As Integer
    Dim tt As Classify
    Dim maxCnt  As Long, minCnt  As Long, catCnt As Long
    Dim i, j As Integer
    Dim dataClass As Variant, dataItem As Variant
    Dim str As String, strClass As String, strItem As String, strKey As String, strClassKey As String
    Dim ClassCol, ItemCol, UniqueCount As Collection
    
    Set rgeClass = crstbl.rgeClass
    Set ClassCol = crstbl.ClassCol
    Set UniqueCount = crstbl.UniqueCount
    
    Application.Volatile
    On Error Resume Next
    Set rge = Range(rgeClass(2, 1), rgeClass(rgeClass.Rows.Count, rgeClass.Columns.Count))
    dataClass = rge.Value
    Set rgeClass = crstbl.rgeItem
    Set rge = Range(rgeClass.Range("A1")(2, 1), rgeClass.Range("A1")(rgeClass.Rows.Count, crstbl.rgeItem.Columns.Count))
    dataItem = rge.Value
    
    For i = 1 To rgeClass.Rows.Count - 1
        strClass = Trim(CStr(dataClass(i, 1)))
        If strClass <> vbNullString And (strClass <> DATA_UNCERTAIN Or Not crstbl.bOutUnk) Then
            str = strClass
            strClassKey = strClass
            If strClass = DATA_UNCERTAIN Then
                strClass = STR_UNCERTAIN
            End If
            For j = 1 To crstbl.rgeItem.Columns.Count
                Set ItemCol = crstbl.ItemCol(j)
                strItem = Trim(CStr(dataItem(i, j)))
                If strItem <> DATA_UNCERTAIN Or Not crstbl.bOutUnk Then
                    Set tt = ClassCol.Item(strClassKey)
                    If tt Is Nothing Then
                        Set tt = New Classify
                        tt.key = strClassKey
                        tt.name = strClass
                        Call tt.AddValue(i)
                        ClassCol.Add tt, strClassKey
                    Else
                        Call tt.AddValue(i)
                    End If
                    If strItem = DATA_UNCERTAIN Then
                        strItem = STR_UNCERTAIN
                        strKey = DATA_UNCERTAIN
                    Else
                        strKey = strItem
                    End If

                    Set tt = Nothing
                    Set tt = ItemCol.Item(strKey)
                    If tt Is Nothing Then
                        Set tt = New Classify
                        tt.key = strKey
                        tt.name = strItem
                        Call tt.AddValue(i)
                        ItemCol.Add tt, strKey
                    Else
                        Call tt.AddValue(i)
                    End If
                    Set tt = Nothing
                    str = j & "-" & strClassKey & strKey
                    Set tt = UniqueCount.Item(str)
                    If tt Is Nothing Then
                        Set tt = New Classify
                        tt.key = str
                        tt.name = str
                        Call tt.AddValue(i)
                        UniqueCount.Add tt, str
                    Else
                        Call tt.AddValue(i)
                    End If
                    Set tt = Nothing
                End If
                crstbl.itemCnt(j) = ItemCol.Count
            Next j
        End If
    Next i
    
    minCnt = UniqueCount(1).cnt
    maxCnt = minCnt
    For i = 2 To UniqueCount.Count
        Set tt = UniqueCount(i)
        If tt.cnt > maxCnt Then maxCnt = tt.cnt
        If tt.cnt < minCnt Then minCnt = tt.cnt
    Next i
    
    crstbl.maxClsCnt = maxCnt
    crstbl.minClsCnt = minCnt
    For i = 1 To UBound(crstbl.ItemCol)
        catCnt = catCnt + crstbl.ItemCol(i).Count
    Next i
    CollectionSort crstbl.ClassCol
    MoveUnknown crstbl.ClassCol
    For i = 1 To UBound(crstbl.ItemCol)
        CollectionSort crstbl.ItemCol(i)
        MoveUnknown crstbl.ItemCol(i)
    Next i
    GetUniqueCount = catCnt
    On Error GoTo 0
End Function

'check input
Private Function CheckData(crstbl As CrsTbl_T) As Boolean
    Dim itemnum As Integer, smpnum As Integer, minClsCnt As Integer
    Dim newSht As Worksheet
    Dim rge As Range
    Dim i, j As Integer
    If crstbl.rgeItem Is Nothing Then
       CheckData = False
       Exit Function
    End If
    itemnum = crstbl.rgeItem.Columns.Count
    smpnum = crstbl.rgeItem.Rows.Count
    If itemnum > MAXITEMNUM Then
        CheckData = False
        Call MsgBox(ERR_OVERITEMNUM & MAXITEMNUM, vbCritical, "Error")
        Exit Function
    End If
    
    Set rge = Range(crstbl.rgeItem.Range("A1")(2, 1), crstbl.rgeItem.Range("A1")(smpnum, itemnum))
    If crstbl.bNewSheet Then
        Set newSht = crstbl.rgeItem.Worksheet.Parent.Worksheets.Add
        Set crstbl.rgeout = newSht.Range("A1")
    ElseIf crstbl.rgeout Is Nothing Then
        CheckData = False
        Call MsgBox(ERR_NULLOUT, vbCritical, "Error")
        Exit Function
    End If
    Call SetMem(crstbl, itemnum)
    If Not crstbl.rgeClass Is Nothing Then
        itemnum = GetUniqueCount(crstbl)
        minClsCnt = crstbl.minClsCnt
        If itemnum > MAXCATENUM Or itemnum < 1 Or minClsCnt < 0 Then
            If crstbl.bNewSheet Then
                Application.DisplayAlerts = False
                crstbl.rgeout.Worksheet.Delete
                crstbl.rgeItem.Cells(1, 1).Select
                Application.DisplayAlerts = True
            End If
            Call FreeMem(crstbl)
            
            CheckData = False
            If itemnum < 1 Then
                Call MsgBox(ERR_NUMDATA, vbCritical, "Error")
            ElseIf itemnum > MAXCATENUM Then
                Call MsgBox(ERR_OVERCATENUM & MAXCATENUM, vbCritical, "Error")
            Else
                Call MsgBox(ERR_CLSSMPNUM & MINCLSSMPNUM, vbCritical, "Error")
            End If
            Exit Function
        End If
    End If
    CheckData = True
End Function

Private Sub SetRangeBorder(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub

Private Sub OutSide(ByVal flg As Integer, ByVal bOutAll As Boolean, ByVal rgeout As Range, crstbl As CrsTbl_T)
    Dim i, j As Integer
    Dim scol As Long, srow As Long
    Dim added As Integer
    Dim totalcnt As Integer
    If bOutAll Then
        scol = 3
        srow = 4
        added = 1
    Else
        scol = 2
        added = 0
        srow = 3
    End If
    If flg = 1 Then
        rgeout(1, 1) = "|fffd||fffd|n|fffd|\"
        rgeout(srow + 1, 1) = crstbl.rgeClass(1, 1)
        If bOutAll Then
            rgeout(srow, 2) = "|fffd|S|fffd||fffd|"
            rgeout(3, scol) = "|fffd|S|fffd||fffd|"
        End If
    ElseIf flg = 2 Then
        rgeout(1, 1) = "|fffd||fffd||fffd||fffd|%|fffd|\"
        rgeout(srow + 1, 1) = crstbl.rgeClass(1, 1)
        If bOutAll Then
            rgeout(srow, 2) = "|fffd|S|fffd||fffd|"
            rgeout(3, scol) = "|fffd|S|fffd||fffd|"
        End If
    ElseIf flg = 3 Then
            rgeout(1, 1) = "|fffd||fffd||fffd|c%|fffd|\"
            rgeout(srow + 1, 1) = crstbl.rgeClass(1, 1)
            If bOutAll Then
                rgeout(srow, 2) = "|fffd|S|fffd||fffd|"
                rgeout(3, scol) = "|fffd|S|fffd||fffd|"
            End If
    End If
    
    totalcnt = 0
    For i = 1 To crstbl.ClassCol.Count
        totalcnt = totalcnt + crstbl.ClassCol.Item(i).cnt
    Next i
    
    If bOutAll Then rgeout(srow, 3) = IIf(flg = 1, totalcnt, 100#)
    For i = 1 To crstbl.ClassCol.Count
       rgeout(i + srow, 2) = crstbl.ClassCol.Item(i).name
       If bOutAll Then
            If flg = 1 Then
                 rgeout(i + srow, 3) = crstbl.ClassCol.Item(i).cnt
            ElseIf flg = 2 Then
                 rgeout(i + srow, 3) = 100#
            ElseIf flg = 3 Then
                 rgeout(i + srow, 3) = crstbl.ClassCol.Item(i).cnt * 100# / totalcnt
            End If
       End If
    Next i
    If flg <> 1 Then 'not n table
        Range(rgeout(srow, 3), rgeout(srow + crstbl.ClassCol.Count, 3)).NumberFormatLocal = "0.0"
    End If

    For i = 1 To crstbl.ClassCol.Count + 1 + added
        For j = 1 To 2
            Call SetRangeBorder(rgeout(2 + i, j + 1), xlThin, xlThin, xlThin, xlThin)
        Next j
    Next i
    Call SetRangeBorder(Range(rgeout(srow + 1, 1), rgeout(srow + 1 + crstbl.ClassCol.Count - 1, 1)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(Range(rgeout(2, 1), rgeout(srow, scol)), xlThin, xlThin, xlThin, xlThin)
End Sub

Private Sub OutCrsTbl(ByVal flg As Integer, ByVal bOutAll As Boolean, ByVal rgeout As Range, crstbl As CrsTbl_T)
    Dim i, j, k As Long
    Dim scol As Long, srow As Long
    Dim str As String
    Dim cnt As Long, totalcnt As Long
    Dim added As Integer
    Dim bkRge As Range
    On Error Resume Next
    Set bkRge = rgeout
    If bOutAll Then
        scol = 0
        srow = 4
        added = 1
    Else
        scol = 0
        added = 0
        srow = 3
    End If
    Set rgeout = rgeout(1, scol + added + 3)
    ReDim classSum(1 To crstbl.ClassCol.Count)
    For k = 1 To crstbl.rgeItem.Columns.Count
        If crstbl.bOutUnk Then
            Call crstbl.ItemCol(k).Remove(STR_UNCERTAIN)
            err.Clear
        End If
        If flg = 1 Then
            rgeout(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    rgeout(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    If bOutAll Then
                        rgeout(srow, j + scol) = crstbl.ItemCol(k).Item(j).cnt
                    End If
                    str = k & "-" & crstbl.ClassCol.Item(i).key & crstbl.ItemCol(k).Item(j).key
                    cnt = crstbl.UniqueCount.Item(str).cnt
                    If err.Number <> 0 Then
                        err.Clear
                        cnt = 0
                    End If
                    rgeout(i + srow, j + scol) = cnt
                    totalcnt = totalcnt + cnt
                Next j
            Next i
        ElseIf flg = 2 Then
            rgeout(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    rgeout(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    str = k & "-" & crstbl.ClassCol.Item(i).key & crstbl.ItemCol(k).Item(j).key
                    cnt = crstbl.UniqueCount.Item(str).cnt
                    If err.Number <> 0 Then
                        err.Clear
                        cnt = 0
                    End If
                    rgeout(i + srow, j + scol) = 100# * cnt / crstbl.ClassCol.Item(i).cnt
                Next j
                totalcnt = totalcnt + crstbl.ClassCol.Item(i).cnt
            Next i
            If bOutAll Then
                For i = 1 To crstbl.ItemCol(k).Count
                    rgeout(srow, i + scol) = 100# * crstbl.ItemCol(k).Item(i).cnt / totalcnt
                Next i
            End If
        ElseIf flg = 3 Then
            rgeout(2, scol + 1) = crstbl.rgeItem.Range("A1")(1, k)
            totalcnt = 0
            For i = 1 To crstbl.ClassCol.Count
                For j = 1 To crstbl.ItemCol(k).Count
                    rgeout(3, j + scol) = crstbl.ItemCol(k).Item(j).name
                    If bOutAll Then
                        rgeout(srow, j + scol) = 100#
                    End If
                    str = k & "-" & crstbl.ClassCol.Item(i).key & crstbl.ItemCol(k).Item(j).key
                    cnt = crstbl.UniqueCount.Item(str).cnt
                    If err.Number <> 0 Then
                        err.Clear
                        cnt = 0
                    End If
                    rgeout(i + srow, j + scol) = 100# * cnt / crstbl.ItemCol(k).Item(j).cnt
                    totalcnt = totalcnt + cnt
                Next j
            Next i
        End If
        For i = 1 To crstbl.ClassCol.Count + 1 + added
            For j = 1 To crstbl.ItemCol(k).Count
                Call SetRangeBorder(rgeout(2 + i, j), xlThin, xlThin, xlThin, xlThin)
            Next j
        Next i
        Call SetRangeBorder(Range(rgeout(2, scol + 1), rgeout(2, scol + 1 + crstbl.ItemCol(k).Count - 1)), xlThin, xlThin, xlThin, xlThin)
        If flg = 1 Then
            Range(rgeout(4, scol + 1), rgeout(srow + 1 + crstbl.ClassCol.Count - 1, scol + 1 + crstbl.ItemCol(k).Count - 1)).NumberFormat = "General"
        Else
            Range(rgeout(4, scol + 1), rgeout(srow + 1 + crstbl.ClassCol.Count - 1, scol + 1 + crstbl.ItemCol(k).Count - 1)).NumberFormatLocal = "0.0"
        End If
        Set rgeout = rgeout(1, crstbl.ItemCol(k).Count + 1)
    Next k
    Call OutSide(flg, bOutAll, bkRge, crstbl)
    On Error GoTo 0
End Sub

Private Sub SetUnknown()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.Sheets("DlgCrsTab")
    If dlg.CheckBoxes("chkHTbl").Value = xlOn Then
        dlg.CheckBoxes("chkUnk").Enabled = True
    Else
        dlg.CheckBoxes("chkUnk").Value = xlOff
        dlg.CheckBoxes("chkUnk").Enabled = False
    End If
End Sub

'main entrance for procedure
Sub nu_KKS_THR6_CRSTBL_VBA()
    Dim crstbl As CrsTbl_T
    Dim rge As Range, rgeGrp As Range, rgeItem As Range, rgeout As Range
    Dim cht As Chart
    Dim itemCnt As Long, smpCnt As Long
    Dim i As Long, j As Long
    Dim dlg As DialogSheet
    Dim Ret As Boolean
    Dim str As String
    Dim cnt As Long, totalcnt As Long
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgCrsTab")
    dlg.CheckBoxes("chkHTbl").OnAction = "SetUnknown"
    SetUnknown
redisp:
    Set crstbl.rgeClass = Nothing
    Set crstbl.rgeItem = Nothing
    Set crstbl.rgeout = Nothing
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    Ret = dlg.Show
    If Ret Then
        Call SaveDlg(dlg)
        Set crstbl.rgeClass = Range(dlg.EditBoxes("RgeClassData").text)
        Set crstbl.rgeItem = Range(dlg.EditBoxes("RgeItemData").text)
        Set crstbl.rgeout = Range(dlg.EditBoxes("RgeDataOut").text)
        crstbl.bNewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, True, False)
        crstbl.bOutNTbl = IIf(dlg.CheckBoxes("chkNTbl").Value = xlOn, True, False)
        crstbl.bOutHTbl = IIf(dlg.CheckBoxes("chkHTbl").Value = xlOn, True, False)
        crstbl.bOutVTbl = crstbl.bOutHTbl 'IIf(dlg.CheckBoxes("chkVTbl").Value = xlOn, True, False)
        crstbl.bOutUnk = IIf(dlg.CheckBoxes("chkUnk").Value = xlOn, True, False)
        crstbl.bOutAll = IIf(dlg.CheckBoxes("chkAll").Value = xlOn, False, True)
        Set rgeItem = crstbl.rgeItem
        Set rgeout = crstbl.rgeout
        For i = 1 To rgeItem.Columns.Count
            Set crstbl.rgeItem = rgeItem.Columns(i)
            'Set crstbl.rgeOut = rgeOut
            Ret = CheckData(crstbl)
            If Not Ret Then
                GoTo redisp
            End If
            Set rge = crstbl.rgeout(1, 1)
            rge.Worksheet.Activate
            If crstbl.bOutNTbl Then
                Call OutCrsTbl(1, crstbl.bOutAll, rge, crstbl)
                Set rge = rge.offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
            End If
            If crstbl.bOutHTbl Then
                Call OutCrsTbl(2, crstbl.bOutAll, rge, crstbl)
                Set rge = rge.offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
            End If
            If crstbl.bOutVTbl Then
                Call OutCrsTbl(3, crstbl.bOutAll, rge, crstbl)
                Set rge = rge.offset(crstbl.ClassCol.Count + IIf(crstbl.bOutAll, 5, 4), 0)
            End If
            'crstbl.rgeOut(1, 1).Select
            Set crstbl.rgeout = rge
            Call FreeMem(crstbl)
        Next i
        rgeout.Select
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlFile"
Option Explicit

Const ForReading = 1
Const ForWriting = 2
Const ForAppending = 8
Const TristateUseDefault = -2
Const TristateTrue = -1
Const TristateFalse = 0

Function bFileExist(sFilePathAndName) As Boolean
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.FileExists(sFilePathAndName)
    Set fso = Nothing
    bFileExist = s
End Function

Function ShowExtensionName(fileSpec) As String
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.GetExtensionName(fileSpec)
    Set fso = Nothing
    ShowExtensionName = s
End Function

Sub WriteFile(sFilePathAndName, sFileContents)
#If 1 Then
    Dim oFS
    Dim oFSFile
    
    Set oFS = CreateObject("Scripting.FileSystemObject")
    Set oFSFile = oFS.OpenTextFile(sFilePathAndName, ForWriting, True, TristateTrue)
    
    oFSFile.Write (sFileContents)
    oFSFile.Close
    
    Set oFSFile = Nothing
    Set oFS = Nothing
#Else
   Dim bytes() As Byte
   Dim fnum As Integer
   With CreateObject("ADODB.Stream")
        .Open
        .Type = 2
        .Charset = "UTF-8"
        .WriteText sFileContents
        '.SaveToFile sFilePathAndName, 2
        .Position = 0
        .Type = 1
        .Position = 2
        bytes = .Read()
        .Close
    End With
    bytes(0) = &H20
    ' Open the file.
    fnum = FreeFile
    Open sFilePathAndName For Binary Access Write As #fnum
    Put #fnum, 1, bytes
    Close fnum
#End If
End Sub

Function ReadFile(sFilePathAndName, Optional ByVal bUnicode As Integer = TristateTrue)

    Dim sFileContents
    
#If 1 Then
    Dim oFS
    Dim oFSFile
    
    Set oFS = CreateObject("Scripting.FileSystemObject")
    
    If oFS.FileExists(sFilePathAndName) = True Then
       Set oFSFile = oFS.OpenTextFile(sFilePathAndName, ForReading, False, bUnicode)
       
       sFileContents = oFSFile.ReadAll
       oFSFile.Close
       
       Set oFSFile = Nothing
       Set oFS = Nothing
    End If
    
    Set oFS = Nothing
#Else
    With CreateObject("ADODB.Stream")
        .Open
        .Type = 2
       ' .Charset = IIf(bUnicode = TristateTrue, "unicode", "iso-8859-1")
        .Charset = IIf(bUnicode = TristateTrue, "unicode", "Shift_JIS")
        .LoadFromFile sFilePathAndName
        sFileContents = .ReadText '
        .Close
    End With
#End If

    ReadFile = sFileContents
       
End Function

Sub DeleteFile(sFilePathAndName)
    Dim oFS
  
    Set oFS = CreateObject("Scripting.FileSystemObject")
    If oFS.FileExists(sFilePathAndName) = True Then
        Call oFS.DeleteFile(sFilePathAndName, True)
    End If
    
    Set oFS = Nothing
End Sub

Function bFolderExist(sFolderName As String) As Boolean
    Dim fso, s
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.FolderExists(sFolderName)
    Set fso = Nothing
    bFolderExist = s
End Function

Function bFolderWriteable(sFolderName As String) As Boolean
    Dim tmpfile As String
    If bFolderExist(sFolderName) Then
        On Error Resume Next
        tmpfile = sFolderName & "\writeable"
        WriteFile tmpfile, "just test"
        If err.Number <> 0 Then
            bFolderWriteable = False
        Else
            bFolderWriteable = True
            DeleteFile tmpfile
        End If
    Else
        bFolderWriteable = False
    End If
End Function

Function CreateFolder(sFolderName As String)
    Dim fso, f
    Dim pname As String
    pname = sFolderName
    Set fso = CreateObject("Scripting.FileSystemObject")
    On Error Resume Next
    Set f = fso.CreateFolder(sFolderName)
    If err.Number <> 0 Then
        pname = GetMyDocPathName() & "\" & Mid(sFolderName, InStrRev(sFolderName, "\") + 1)
        If Not fso.FolderExists(pname) Then
            Set f = fso.CreateFolder(pname)
        End If
    End If
    CreateFolder = pname
    Set fso = Nothing
    On Error GoTo 0
End Function

Function ConvToUTF8(ByVal str As String) As Byte()
    Dim dst
    Dim bytes() As Byte
    Set dst = CreateObject("ADODB.Stream")
    With dst
        .Open
        .Type = 2
        .Charset = "UTF-8"
        .WriteText str
        .Position = 0
        .Type = 1
        .Position = 2
        bytes = .Read()
    End With
    bytes(0) = &H20
    ConvToUTF8 = bytes
    dst.Close
    Set dst = Nothing
End Function

Function bValidFileName(ByVal sFilePathAndName As String) As Boolean
    Dim fso, s
    On Error GoTo err_handler
    Set fso = CreateObject("Scripting.FileSystemObject")
    s = fso.GetFileName(sFilePathAndName)
    bValidFileName = fso.FolderExists(Mid(sFilePathAndName, 1, InStrRev(sFilePathAndName, s) - 1))
exit_func:
    Set fso = Nothing
    Exit Function
err_handler:
    bValidFileName = False
    Resume exit_func
End Function

Function SaveBinaryData(FileName, ByteArray)
  Const adTypeBinary = 1
  Const adSaveCreateOverWrite = 2
  
  'Create Stream object
  Dim BinaryStream
  Set BinaryStream = CreateObject("ADODB.Stream")
  
  'Specify stream type - binary data.
  BinaryStream.Type = adTypeBinary
  
  'Open the stream and write binary data to the object
  BinaryStream.Open
  BinaryStream.Write ByteArray
  
  'Save binary data to disk
  BinaryStream.SaveToFile FileName, adSaveCreateOverWrite
End Function

Attribute VB_Name = "mdlFileHandle"
Option Explicit

Type Category
    ID As Long
    CateNo(1 To 4) As Byte
End Type

Type Field
    ID As Long
    FieldName(1 To 20) As Byte
    Type As Long
    ByteLen As Long
    smpnum As Long
    CateNum As Long
    Categories(1 To 500) As Category
End Type

Type Info
    HeadBytes As Long
    FieldBytes As Long
    rowNum As Long
    colNum As Long
End Type

Public Function MAStrToBytes(ByVal strMa As String) As Byte()
    Dim tmpBytes(1 To 64) As Byte
    Dim v As Variant
    Dim i, j, k
    Dim m_mamax As Long
    m_mamax = 0
    v = Split(Replace(strMa, """", ""), ",")
    If IsArray(v) Then
        For i = LBound(v) To UBound(v)
            If v(i) >= 1 And v(i) <= 256 Then
                j = (v(i) - 1) \ 4 + 1
                k = (v(i) - 1) Mod 4
                tmpBytes(j) = tmpBytes(j) Or 1 * (2 ^ (k))
                If v(i) > m_mamax Then m_mamax = v(i)
            End If
        Next i
    Else
        If v >= 1 And v <= 256 Then
                j = (v - 1) \ 4 + 1
                k = (v - 1) Mod 4
                tmpBytes(j) = tmpBytes(j) Or 1 * (2 ^ (k))
        End If
    End If
    MAStrToBytes = tmpBytes
End Function

Public Function StrToStrAry(ByVal str As String, ByVal l As Long) As Byte()
    Dim tmpBytes() As Byte
    ReDim tmpBytes(1 To l) As Byte
    Call CopyStrToBytes(tmpBytes, str, l)
    StrToStrAry = tmpBytes()
End Function

Public Sub CopyStrToBytes(bytes() As Byte, ByVal str As String, ByVal l As Long)
    Dim i As Long, j As Long, ll As Long
    Dim tmpBytes() As Byte
    tmpBytes = StrConv(str, vbFromUnicode)
    ll = UBound(tmpBytes) + 1
    j = UBound(bytes)
    If ll > l Then ll = l
    If ll > j Then ll = j
    For i = 1 To ll
        bytes(i) = tmpBytes(i - 1)
    Next i
End Sub
Attribute VB_Name = "mdlHist"
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function DllMain_HSK2P5_TK1 Lib "KKS_SubN_64.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
        Private Declare PtrSafe Function DllMain_VBA_TK1 Lib "KKS_SubN_64.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr, ByVal JsonStr As String) As Long
    #Else
        Private Declare Function DllMain_HSK2P5_TK1 Lib "KKS_SubN_64.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
        Private Declare Function DllMain_VBA_TK1 Lib "KKS_SubN_64.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long, ByVal JsonStr As String) As Long
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function DllMain_HSK2P5_TK1 Lib "KKS_SubN.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr) As Long
        Private Declare PtrSafe Function DllMain_VBA_TK1 Lib "KKS_SubN.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As LongPtr, ByVal JsonStr As String) As Long
    #Else
        Private Declare Function DllMain_HSK2P5_TK1 Lib "KKS_SubN.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long) As Long
        Private Declare Function DllMain_VBA_TK1 Lib "KKS_SubN.dll" (ByVal refno As Long, ByVal nExcelVer As Long, grp() As VBAGRAPH, ByVal callback As Long, ByVal JsonStr As String) As Long
    #End If
#End If

Private Function SetJson(ByVal dlg As DialogSheet) As String
    Dim js As New JSONLib
    Dim json As Object
    Dim tmpStr As String
    Dim i As Long
    Dim fHandle
    Dim timeTitle
    On Error GoTo err_handle
    Set json = js.parse("{}")
    json.Add "DataRge", toXlRCstr(Trim(dlg.EditBoxes("DataRge").text))
    json.Add "OutRge", toXlRCstr(Trim(dlg.EditBoxes("OutRge").text))
    json.Add "DataType", 1
    json.Add "ClassType", IIf(dlg.OptionButtons("optClassWidth") = xlOn, 1, 2)
    json.Add "ClassLowerLmt", val(dlg.EditBoxes("edtLLmt").text)
    json.Add "ClassWidth", val(dlg.EditBoxes("edtClassWidth").text)
    json.Add "ClassNum", val(dlg.EditBoxes("edtClassNum").text)
    json.Add "DataTitle", 1 'IIf(dlg.OptionButtons("optDataTitle") = xlOn, 1, 2)
    json.Add "Except", 1 'IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 2)
    json.Add "GrpType", IIf(dlg.OptionButtons("optGrpType1") = xlOn, 1, 2)
    json.Add "DistType", IIf(dlg.OptionButtons("optDistType1") = xlOn, 1, _
                                      IIf(dlg.OptionButtons("optDistType2") = xlOn, 2, 3))
    json.Add "LimitLine", IIf(dlg.OptionButtons("optLmtLine1") = xlOn, 1, 2)
    json.Add "UpperLmt", IIf(IsNumeric(dlg.EditBoxes("edtUpperLmt").text), val(dlg.EditBoxes("edtUpperLmt").text), "-")
    json.Add "LowerLmt", IIf(IsNumeric(dlg.EditBoxes("edtLowerLmt").text), val(dlg.EditBoxes("edtLowerLmt").text), "-")
    json.Add "ScaleType", IIf(dlg.OptionButtons("optScaleType1") = xlOn, 1, 2)
    json.Add "GrpDirect", IIf(dlg.OptionButtons("optGrpDrt1") = xlOn, 1, 2)
    SetJson = js.toString(json)
    Set json = Nothing
    Set js = Nothing
exit_here:
    On Error GoTo 0
    Exit Function
err_handle:
    SetJson = vbNullString
    Resume exit_here
End Function

Sub doHSK2P5_VBA_TK1(ByVal pCode As Long, ByVal JsonStr As String)
    Dim rtn As Long
    Dim i As Integer
    Dim strFuncName As String, fullFunName As String
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    Erase G_VbaGrp
    rtn = DllMain_VBA_TK1(pCode, GVerNoXL, G_VbaGrp, CallBackPtr, JsonStr) 'call DLL
    If rtn = 0 Then
        fullFunName = GxlaBkHSKGrp & "!DrawHistGrp"
        
        For i = 1 To UBound(G_VbaGrp)
            If G_VbaGrp(i).Type <> 0 Then
                If ConvToBSTR(G_VbaGrp(i)) Then
                    Application.Run fullFunName, G_VbaGrp(i).sheetName, G_VbaGrp(i).grpOut, G_VbaGrp(i).grpData, G_VbaGrp(i).grpPara
                    '07.1.31
                    Call Comm_CutDataLink(ActiveWorkbook, GxlaBkHSKGrp)
                End If
            End If
        Next i
    End If
    Erase G_VbaGrp
End Sub

Sub KKS_fHist_1P01()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpsht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim rgeVar As Range, rge As Range
    Dim jsStr As String
    Dim actSheet As Worksheet
    On Error Resume Next
    Set actSheet = ActiveSheet
    GVerNoXL = 12
    
    Erase G_VbaGrp
    
    Set dlg = ThisWorkbook.DialogSheets("DlgGHist")

redisp:
    actSheet.Activate
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        jsStr = SetJson(dlg)
        Call changeToSSDir
        actSheet.Activate
        Call doHSK2P5_VBA_TK1(14, jsStr)
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub


Attribute VB_Name = "mdlInsi"
'=======================================================
' |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|
'
' 09.04 WZH
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    DataRge As String * 256
    Except As Long
    FactorNum As Long
    Method As Long
    InitValue As Long
    Repeat As Long
    Rotation As Long
    KValue As Double
    ScoreShow As Long
    ScoreMethod As Long
    Predict As Long
    PredictRge As String * 256
    SmpName As Long
    SmpNameRge As String * 256
    FactorLoad As Double
    OrderAsc As Long
    AttrShow As Long
    AttrDataRge As String * 256
    cateName As Long
    AttrCateRge As String * 256
    ScoreGrp As Long
    XAxis As Long
    YAxis As Long
    GrpCateDisp As Long
    GrpSmpNameDisp As Long
    txtLen As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private insitbl As paratbl

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function fMinsi_vba Lib "KKS_SubB_64.dll" (insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Private Declare PtrSafe Function fMinsi_vba Lib "KKS_SubB.dll" (insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function fMinsi_vba Lib "KKS_SubB_64.dll" (insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Private Declare Function fMinsi_vba Lib "KKS_SubB.dll" (insitbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub InsiGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    Set rgeVar = Range(dlg.EditBoxes("edtDataRge").text)
    Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_ScorePredict()
    Call CommSetEditBox_byChk("DlgInsi", "chkPredict", "edtPredictRge")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub InsiCtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgInsi", "optSmpName", "edtSmpNameRge")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    Set ChkObj = dlg.CheckBoxes("chkAttrShow")
    bOn = (ChkObj = xlOn)
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("chkCateName")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("edtAttrCate").Enabled = (bOn And ChkObj = xlOn)
       
    'data range
    Call CommSetEditBox_byChk("DlgInsi", "chkAttrShow", "edtAttrData")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub InsiCtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgInsi", "chkCateName", "edtAttrCate")
End Sub
'
'
Private Sub InsiCtrlMacro_ScoreShow()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    bOn = (dlg.CheckBoxes("chkScoreShow") = xlOn)
    
    dlg.CheckBoxes("chkPredict").Enabled = bOn
    dlg.OptionButtons("optScoreMethod1").Enabled = bOn
    dlg.OptionButtons("optScoreMethod2").Enabled = bOn
End Sub
'
'
Private Sub InsiCtrlMacro_ScoreGrp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    bOn = (dlg.CheckBoxes("chkScoreGrp") = xlOn)
    
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = bOn
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = bOn
    dlg.EditBoxes("edtXAxis").Enabled = bOn
    dlg.EditBoxes("edtYAxis").Enabled = bOn
    dlg.EditBoxes("edtTxtLen").Enabled = bOn
End Sub
'
'
Private Sub Insi_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("btnVarSelect").OnAction = "InsiGetVarSel"
    
    'factor score
    dlg.CheckBoxes("chkScoreShow").OnAction = "InsiCtrlMacro_ScoreShow"
    dlg.CheckBoxes("chkPredict").OnAction = "InsiCtrlMacro_ScorePredict"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "InsiCtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "InsiCtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("chkAttrShow").OnAction = "InsiCtrlMacro_AttrDsp"
    dlg.CheckBoxes("chkCateName").OnAction = "InsiCtrlMacro_AttrCateName"
    
    'Graph
    dlg.CheckBoxes("chkScoreGrp").OnAction = "InsiCtrlMacro_ScoreGrp"
End Sub

'
'return TRUE = OK else ERROR
'
Private Function chkInsiData() As Boolean
    Dim rgedata As Range, rgePredict As Range, rgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemnum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgedata = Range(insitbl.DataRge)
    Set rgePredict = Range(insitbl.PredictRge)
    Set rgeSmpName = Range(insitbl.SmpNameRge)
    Set rgeAttr = Range(insitbl.AttrDataRge)
    Set rgeAttrCateName = Range(insitbl.AttrCateRge)
    On Error GoTo 0
    
    If rgedata Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemnum = rgedata.Columns.Count
    tmpi = insitbl.FactorNum
    yokoNo = insitbl.XAxis
    tateNo = insitbl.YAxis
    If (tmpi < 1) Then 'If (tmpi < 2 Or tmpi > 16) Then
        msgStr = "|fffd||fffd||fffd|q|fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.Predict = 1 And rgePredict Is Nothing Then
        msgStr = "|fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
    If insitbl.SmpName = 1 And rgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.AttrShow = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If insitbl.cateName = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkInsiData = False
        Exit Function
    End If
    
    '
    chkInsiData = True
End Function

Private Function SetValues(ByVal OutRge As Range, ByVal values As Variant) As Range
    Dim i As Long, j As Long, l As Long
    l = 1
    For i = LBound(values) To UBound(values)
        For j = LBound(values, 2) To UBound(values, 2)
            OutRge(l, 1).Value = values(i, j)
            l = l + 1
        Next j
    Next i
    Set SetValues = Range(OutRge, OutRge(l - 1, 1))
End Function

Private Function handleInsiData() As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rgeObj As Range, rge As Range
    Dim rgeSmpName As Range, rgeAttrData As Range, rgeAttrName As Range
    Dim tmpRge As Range
    Dim tmpsht As Worksheet
    Dim insiobj As Variant, insivar As Variant, insicate As Variant
    Dim insiVarSel As Variant
    Dim cateNameRow As Long, CateNum As Long, smpnum As Long, itemnum As Long
    Dim attrColNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(insitbl.DataRge)
    If insitbl.Predict = 1 Then
        Set rgeObj = Range(insitbl.PredictRge)
    End If
    If insitbl.SmpName = 1 Then
        Set rgeSmpName = Range(insitbl.SmpNameRge)
    End If
    If insitbl.AttrShow = 1 Then
        Set rgeAttrData = Range(insitbl.AttrDataRge)
    End If
    If insitbl.cateName = 1 Then
        Set rgeAttrName = Range(insitbl.AttrCateRge)
    End If
    smpnum = rgeSrc.Rows.Count
    itemnum = rgeSrc.Columns.Count
    Set tmpsht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If rgeSmpName Is Nothing Then
        For i = 1 To smpnum - 1
            rge(i + 1, 1).Value = i
        Next i
        insitbl.DataRge = toXlRCstr(Range(rge(2, 1), rge(smpnum, 1)).Address & vbNullChar)
    Else
        insivar = rgeSmpName.Value
        Set tmpRge = SetValues(rge(2, 1), insivar)
        insitbl.SmpNameRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
    End If
    
    If m_varselect <> "0" Then
        insiVarSel = Split(m_varselect, ",")
    Else
        ReDim insiVarSel(0 To itemnum) As Long
        insiVarSel(0) = itemnum
        For i = 1 To itemnum
            insiVarSel(i) = i - 1
        Next i
    End If
    
    itemnum = insiVarSel(0)

    For i = 1 To smpnum
        For j = 1 To itemnum
            rge(i, j + 1) = rgeSrc(i, insiVarSel(j) + 1)
        Next j
    Next i
    insitbl.DataRge = toXlRCstr(Range(rge(1, 2), rge(smpnum, itemnum + 1)).Address & vbNullChar) & vbNullChar
    
    If Not rgeObj Is Nothing Then
        For i = 1 To rgeObj.Rows.Count
            For j = 1 To itemnum
                rge(i + smpnum, j + 1) = rgeObj(i, insiVarSel(j) + 1)
            Next j
        Next i
        insitbl.PredictRge = toXlRCstr(Range(rge(smpnum + 1, 2), rge(smpnum + rgeObj.Rows.Count, itemnum + 1)).Address & vbNullChar) & vbNullChar
    End If
    
    If Not rgeAttrData Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrData, rge(1, itemnum + 2), xlPasteValues)
        insitbl.AttrDataRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
        attrColNum = tmpRge.Columns.Count
    End If
    If Not rgeAttrName Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrName, rge(1, itemnum + 2 + attrColNum), xlPasteValues)
        insitbl.AttrCateRge = toXlRCstr(tmpRge.Address & vbNullChar) & vbNullChar
    End If
    Set handleInsiData = tmpsht
    On Error GoTo 0
End Function

Sub KKS_INSI_1P01()
    Dim rtn As Integer, i As Integer, grpType0 As Integer
    Dim grp(1 To maxGrpNum) As VBAGRAPH
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim nExcelVer As Integer
    Dim dlg As DialogSheet
    Dim tmpsht As Worksheet
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    Call InitGrpAry(grp())
    nExcelVer = 12  '09.6 PYJ old:getExcelVerNo()
    
    Set dlg = ThisWorkbook.DialogSheets("DlgInsi")
    
    Call Insi_setMacro(dlg)
    
    'init
    Call InsiCtrlMacro_SmpName
    Call InsiCtrlMacro_AttrDsp
    Call InsiCtrlMacro_AttrCateName
    Call InsiCtrlMacro_ScoreShow
    Call InsiCtrlMacro_ScorePredict
    Call InsiCtrlMacro_ScoreGrp
    
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        insitbl.DataRge = dlg.EditBoxes("edtDataRge").text & vbNullChar
        insitbl.Except = IIf(dlg.OptionButtons("optExcept") = xlOn, 1, 0)
        insitbl.FactorNum = IIf(dlg.OptionButtons("optFactor1") = xlOn, 1000, val(dlg.EditBoxes("edtFactorNum").text))
        insitbl.Method = IIf(dlg.OptionButtons("optMethod1") = xlOn, 1, _
                            IIf(dlg.OptionButtons("optMethod2") = xlOn, 2, 3))
        insitbl.InitValue = IIf(dlg.OptionButtons("optInitVal1") = xlOn, 1, _
                              IIf(dlg.OptionButtons("optInitVal2") = xlOn, 2, 3))
        insitbl.Repeat = IIf(dlg.CheckBoxes("chkRepeat") = xlOn, 1, 0)
        insitbl.Rotation = IIf(dlg.OptionButtons("optRotation1") = xlOn, 1, _
                             IIf(dlg.OptionButtons("optRotation2") = xlOn, 2, 3))
        insitbl.KValue = val(dlg.EditBoxes("edtKVal").text)
        insitbl.ScoreShow = IIf(dlg.CheckBoxes("chkScoreShow") = xlOn, 1, 0)
        insitbl.ScoreMethod = IIf(dlg.OptionButtons("optScoreMethod1") = xlOn, 1, 2)
        insitbl.Predict = IIf(dlg.CheckBoxes("chkPredict") = xlOn, 1, 0)
        insitbl.PredictRge = dlg.EditBoxes("edtPredictRge").text & vbNullChar
        insitbl.SmpName = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 0, 1)
        insitbl.SmpNameRge = dlg.EditBoxes("edtSmpNameRge").text & vbNullChar
        insitbl.FactorLoad = val(dlg.EditBoxes("edtLoad").text)
        insitbl.OrderAsc = IIf(dlg.CheckBoxes("chkOrdAsc") = xlOn, 1, 0)
        insitbl.AttrShow = IIf(dlg.CheckBoxes("chkAttrShow") = xlOn, 1, 0)
        insitbl.AttrDataRge = dlg.EditBoxes("edtAttrData").text & vbNullChar
        insitbl.cateName = IIf(dlg.CheckBoxes("chkCateName") = xlOn, 1, 0)
        insitbl.AttrCateRge = dlg.EditBoxes("edtAttrCate").text & vbNullChar
        insitbl.ScoreGrp = IIf(dlg.CheckBoxes("chkScoreGrp") = xlOn, 1, 0)
        insitbl.XAxis = val(dlg.EditBoxes("edtXAxis").text)
        insitbl.YAxis = val(dlg.EditBoxes("edtYAxis").text)
        insitbl.GrpCateDisp = IIf(dlg.CheckBoxes("chkGrpCateDisp") = xlOn, 1, 0)
        insitbl.GrpSmpNameDisp = IIf(dlg.CheckBoxes("chkGrpSmpNameDisp") = xlOn, 1, 0)
        insitbl.txtLen = val(dlg.EditBoxes("edtTxtLen").text)
        
        If insitbl.FactorNum < 2 Then
            insitbl.ScoreGrp = 0
        End If
        
        If chkInsiData() = False Then
            GoTo redisp
        End If
        
        Set tmpsht = handleInsiData
        
        If insitbl.FactorNum = 1 Then
            insitbl.FactorNum = 1000
        End If
        rtn = fMinsi_vba(insitbl, nExcelVer, grp())
        If rtn = 0 And nExcelVer >= 12 Then
            grpType0 = 0
            For i = 1 To maxGrpNum
                If grp(i).Type <> 0 Then
                    Call ConvToBSTR(grp(i))
                    On Error Resume Next
                    Set para = Comm_SetDict(grp(i).grpPara)
                    On Error GoTo 0
                    If para Is Nothing Then Exit Sub
                    chartTitle = para("chartTitle")
                    txtLen = CInt(para("txtLen"))
                    bSmpName = CInt(para("bSmpName"))
                    fontsize = CInt(para("fontSize"))
                    predictNum = CInt(para("predictNum"))
                    Set para = Nothing
                    chartName = IIf(grp(i).Type = 1, "Th2BarChart", "Th2PointChart")
                    If grp(i).Type <> grpType0 Then
                        grpType0 = grp(i).Type
                        If grp(i).Type <> 1 Then grpData0 = grp(i).grpData
                    End If
                    Application.Run GxlaThGraph & "!" & chartName, grp(i).sheetName, grp(i).grpOut, _
                        grp(i).grpData, grpData0, chartTitle, txtLen, fontsize, _
                        bSmpName, predictNum
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaThGraph)
        Cells(1, 1).Select
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlKMeans"
Option Explicit

Type kmnsTbl
    DataRge As String * 256
    OutRge As String * 256
    bColTitle As Long
    bExcept As Long
    ClusterNum As Long
    ExceptNum As Long
End Type

Private m_varselect As String
Private m_kmnsTbl As kmnsTbl
Private m_Average() As Double
Private m_Std() As Double

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function kmns_XL Lib "KKS_SubM_64.dll" (kmnsTbl As kmnsTbl) As Long
    #Else
    Private Declare PtrSafe Function kmns_XL Lib "KKS_SubM.dll" (kmnsTbl As kmnsTbl) As Long
    #End If
#Else
    #If Win64 Then
    Private Declare Function kmns_XL Lib "KKS_SubM_64.dll" (kmnsTbl As kmnsTbl) As Long
    #Else
    Private Declare Function kmns_XL Lib "KKS_SubM.dll" (kmnsTbl As kmnsTbl) As Long
    #End If
#End If

'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub KmnsGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgKMeans")
    Set rgeVar = Range(dlg.EditBoxes("RgeDataIn").text)
    If dlg.OptionButtons("optTitle") = xlOn Then
        Set rgeVar = Range(rgeVar(1, 2), rgeVar(1, rgeVar.Columns.Count))
    Else
        Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    End If
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub

Private Function chkKmnsData(ByVal BgnNo As Integer, ByVal EndNo As Integer) As Boolean
    Dim rgedata As Range
    Dim msgStr As String
    Dim tmpi As Long
    Dim itemnum As Long, smpnum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgedata = Range(m_kmnsTbl.DataRge)
    On Error GoTo 0
    
    If rgedata Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemnum = rgedata.Columns.Count
    smpnum = rgedata.Rows.Count
    'tmpi = m_kmnsTbl.ClusterNum
    If (BgnNo < 2 Or EndNo < 2 Or BgnNo > EndNo Or BgnNo > smpnum Or EndNo > smpnum) Then
        msgStr = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    If BgnNo > 100 Or EndNo > 100 Then
        msgStr = "K-|fffd||fffd||fffd||3d6|@|fffd||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd|100|fffd||142||fffd||fffd|B"
        GoTo chkEnd
    End If
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkKmnsData = False
        Exit Function
    End If
    '
    chkKmnsData = True
End Function

Private Function handleKmnsData(ByVal bStdData As Boolean, ByVal BgnNo As Integer, ByVal EndNo As Integer) As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rge As Range
    Dim tmpRge As Range
    Dim tmpsht As Worksheet, dataSht As Worksheet
    Dim kmnsVarSel As Variant, tmpVar As Variant
    Dim smpnum As Long, itemnum As Long
    Dim msgStr As String
    Dim dAvg As Double, dStdev As Double
    
    On Error Resume Next
    Set rgeSrc = Range(m_kmnsTbl.DataRge)
    Set dataSht = rgeSrc.Worksheet
    smpnum = rgeSrc.Rows.Count
    itemnum = rgeSrc.Columns.Count
    Set tmpsht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If m_kmnsTbl.bColTitle = 0 Then
        For i = 1 To smpnum - 1
            rge(i + 1, 1).Value = i
        Next i
        Set rge = rge(1, 2)
    Else
'10.12.14 DZH mdf
#If 0 Then
        rge.Range(Cells(1, 1), Cells(smpnum, 1)) = rgeSrc.Columns(1).Value
        Set rgeSrc = rgeSrc.Range("B1").Range(dataSht.Cells(1, 1), dataSht.Cells(smpnum, itemnum - 2))
        Set rge = rge(1, 2)
        itemnum = itemnum - 1
#Else
        rge.Range(Cells(1, 1), Cells(smpnum, 1)) = rgeSrc.Columns(1).Value
        Set rge = rge(1, 2)
        
        itemnum = itemnum - 1
        If itemnum < 1 Then
            MsgBox "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd|O|fffd||142||fffd||fffd|B"
            handleKmnsData = Nothing
            Exit Function
        End If
        Set rgeSrc = rgeSrc.Range("B1").Range(dataSht.Cells(1, 1), dataSht.Cells(smpnum, itemnum))
#End If
'
    End If

    If m_varselect <> "0" Then
        kmnsVarSel = Split(m_varselect, ",")
    Else
        ReDim kmnsVarSel(0 To itemnum) As Long
        kmnsVarSel(0) = itemnum
        For i = 1 To itemnum
            kmnsVarSel(i) = i - 1
        Next i
    End If
    
    itemnum = kmnsVarSel(0)

    For i = 1 To itemnum
            rge.Range(Cells(1, i), Cells(smpnum, i)) = rgeSrc.Columns(val(kmnsVarSel(i)) + 1).Value
    Next i
    
    i = 2
    m_kmnsTbl.ExceptNum = 0
    While i <= smpnum
        If Application.WorksheetFunction.Count(rge.Range(tmpsht.Cells(i, 1), tmpsht.Cells(i, itemnum))) <> itemnum Then
            If m_kmnsTbl.bExcept = 0 Then
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                handleKmnsData = Nothing
                Exit Function
            End If
            Rows(i).Delete
            smpnum = smpnum - 1
            m_kmnsTbl.ExceptNum = m_kmnsTbl.ExceptNum + 1
        Else
            i = i + 1
        End If
    Wend
    
    If smpnum < 2 Then
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            handleKmnsData = Nothing
            Exit Function
    End If
    
    If BgnNo > smpnum Or EndNo > smpnum Then
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            MsgBox "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            handleKmnsData = Nothing
            Exit Function
    End If
    
    Set rge = tmpsht.Range("$A$1")
    If bStdData Then
        ReDim m_Average(1 To itemnum)
        ReDim m_Std(1 To itemnum)
        For i = 1 To itemnum
            Set tmpRge = rge(2, i + 1).Resize(smpnum - 1, 1)
            tmpVar = tmpRge
            dAvg = Application.WorksheetFunction.average(tmpVar)
            dStdev = Application.WorksheetFunction.StDev(tmpVar)
            For j = 1 To smpnum - 1
                tmpVar(j, 1) = (tmpVar(j, 1) - dAvg) / dStdev
            Next j
            tmpRge.Value = tmpVar
            m_Average(i) = dAvg
            m_Std(i) = dStdev
        Next i
    End If
    m_kmnsTbl.DataRge = toXlRCstr(Range(rge(1, 1), rge(smpnum, itemnum + 1)).Address) & vbNullChar
    m_kmnsTbl.bColTitle = 1
    m_kmnsTbl.bExcept = 1
    Set handleKmnsData = tmpsht
    
    On Error GoTo 0
End Function

Sub KKS_KMEANS_1P01()
    Dim rtn As Integer, i As Long, j As Long, k As Long
    Dim dlg As DialogSheet
    Dim tmpsht As Worksheet, outSht As Worksheet
    Dim bMultiCluster As Boolean, bStdData As Boolean
    Dim BgnNo As Long, EndNo As Long
    Dim outR As Range
    Dim itemnum As Long
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    Set dlg = ThisWorkbook.DialogSheets("DlgKMeans")
    dlg.Buttons("btnVarSelect").OnAction = "KmnsGetVarSel"
   
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        m_kmnsTbl.DataRge = dlg.EditBoxes("RgeDataIn").text & vbNullChar
        m_kmnsTbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        m_kmnsTbl.ClusterNum = val(dlg.EditBoxes("edtClusterNum").text)
        m_kmnsTbl.bColTitle = IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        bStdData = IIf(dlg.OptionButtons("optOriData") = xlOn, False, True)
        bMultiCluster = IIf(dlg.OptionButtons("optSingle").Value = xlOn, 0, 1)
        If bMultiCluster Then
            BgnNo = val(dlg.EditBoxes("edtBgnNo").text)
            EndNo = val(dlg.EditBoxes("edtEndNo").text)
        Else
            BgnNo = m_kmnsTbl.ClusterNum
            EndNo = BgnNo
        End If
        If chkKmnsData(BgnNo, EndNo) = False Then
            GoTo redisp
        End If
        Set tmpsht = handleKmnsData(bStdData, BgnNo, EndNo)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        For i = BgnNo To EndNo
            Set outSht = tmpsht.Parent.Sheets.Add
            m_kmnsTbl.OutRge = outSht.name & "!R2C1" & vbNullChar
            tmpsht.Activate
            m_kmnsTbl.ClusterNum = i
            rtn = kmns_XL(m_kmnsTbl)
            outSht.Activate
            If rtn = 0 And bStdData Then
                Set outR = ActiveSheet.Columns("A").Find("|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30f|d|fffd|S")
                itemnum = UBound(m_Std) - LBound(m_Std) + 1
                For k = 1 To m_kmnsTbl.ClusterNum
                    For j = 1 To itemnum
                        outR(k + 2, j + 1) = outR(k + 2, j + 1) * m_Std(j) + m_Average(j)
                    Next j
                Next k
            End If
            If bMultiCluster Then
                On Error Resume Next
                ActiveSheet.name = i & "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||142||30c||fffd||fffd||fffd|"
                On Error GoTo 0
            End If
        Next i
        If bStdData Then
            Erase m_Average
            Erase m_Std
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub



Attribute VB_Name = "mdlKSK2Grp"
'=======================================================
' SSS_KSK2---Drawing  Graphs
'
' 2009.04 WZH
' 2010.12 MDF
'=======================================================

Option Explicit
Private Const GBKNAME_GrpTmp = "ksktmp.xlsx"
Private Const GBKNAME_GrpTmp2K = "ksktmp.xls"
Private strBkName As String

Private Function Ksk_GetTmplGrp(ByVal OutRge As Range, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    
    'add 09.6 PYJ
    Dim verno As Integer
    verno = getExcelVerNo()
    If verno < 12 Then
        strBkName = GBKNAME_GrpTmp2K
    Else
    'add end
        strBkName = GBKNAME_GrpTmp 'Excel2007 only
    End If
    If WorkBookOpen(strBkName) Is Nothing Then
        Set Ksk_GetTmplGrp = Nothing
        Exit Function
    End If
    
    Set Ksk_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", OutRge, _
                     strBkName, strShtName, strGrpName)
End Function

Private Sub Ksk_CutDataLink(ByVal bkObj As Workbook)
    Dim verno As Integer
    Dim bkName As String
    verno = getExcelVerNo()
    
    If verno >= 12 Then
        bkName = GBKNAME_GrpTmp 'Excel2007 only
        
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub

Private Sub SetProdFormat(ser As Series, ByVal prodNum As Long)
    Dim i As Long
    Dim dataNum As Long
    dataNum = ser.Points.Count
    If dataNum <= prodNum Then Exit Sub
    For i = 1 To prodNum
        With ser.Points(i + dataNum - prodNum)
            .MarkerBackgroundColorIndex = 2
            .MarkerForegroundColorIndex = 1
        End With
    Next i
End Sub

Private Sub SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Dim i As Integer
    On Error Resume Next
    ser.HasDataLabels = True
    DoEvents
    ser.ApplyDataLabels Type:= _
            xlDataLabelsShowLabel, AutoText:=True, LegendKey:=False
    DoEvents
    ser.DataLabels.Font.Size = fontsize
    For i = 1 To ser.Points.Count
        If CInt(Application.Version) < 12 Then
            ser.Points(i).DataLabel.Characters.text = Mid(namerge(i, 1).Value, 1, charcnt) '10.11.10 LSQ mdf : old use "MidB"
        Else
            ser.Points(i).DataLabel.text = Mid(namerge(i, 1).Value, 1, charcnt) '10.11.10 LSQ mdf : old use "MidB"
        End If
    Next i
    On Error GoTo 0
End Sub

Sub DrawStoneGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                      ByVal strGrpData As String, ByVal strpara As String)
    Dim wrkbk As Workbook
    Dim WrkSht As Worksheet
    Dim cht As Chart
    Dim serCol As SeriesCollection
    Dim para As Object
    Dim GrpType As Integer
    Dim rgein As Range, rgeout As Range, RgeTmp As Range
    Dim xrge As Range, yrge As Range, namerge As Range
    Dim dataNum As Long
    Dim i As Long, j As Long
    Dim rtn As Integer, special As Integer
    Dim strName As String
    Dim intSize As Integer
    Dim fontObj As Font

    On Error Resume Next
    Set WrkSht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set wrkbk = WrkSht.Parent
    On Error GoTo 0
    If WrkSht Is Nothing Or wrkbk Is Nothing Then
        GoTo exitit
    End If
    
    Set rgeout = WrkSht.Range(Comm_toXlA1str(strGrpOut))
    Set rgein = WrkSht.Range(Comm_toXlA1str(strGrpData))

    Set cht = Ksk_GetTmplGrp(rgeout, "tmplStone", "grpStone")
    If cht Is Nothing Then GoTo exitit
    
    dataNum = rgein.Rows.Count
    Set xrge = Range(rgein(2, 1), rgein(dataNum, 1))
    Set yrge = Range(rgein(2, 2), rgein(dataNum, 2))
    Set namerge = Range(rgein.Range("A1").offset(1, -1), rgein.Range("A1").offset(dataNum - 1, -1))
    
    Set serCol = cht.SeriesCollection
    serCol(1).XValues = "='" & strWrkSht & "'!" & Comm_toXlRCstr(xrge.Address)
    serCol(1).values = "='" & strWrkSht & "'!" & Comm_toXlRCstr(yrge.Address)
    serCol(1).name = "='" & strWrkSht & "'!" & Comm_toXlRCstr(rgein(1, 2).Address)
       
    DoEvents
    Call SetDataLabel(serCol(1), namerge.Range("A1"))
    DoEvents
    
    '10.08.12 DZH mdf for "|fffd||fffd||fffd|}V5|fffd|i|fffd|P|fffd||181|j|fffd||303|e|fffd|X|fffd|g|fffd||fffd||fffd||281|i6|fffd|j.xls"
    Call Comm_setChartPosSize(cht.Parent, rgeout, 8, 8) 'old : 18, 9
    
    'Comm_MatchWorkbookFont() not work in Excel2007
    If getExcelVerNo() < 12 Then
        Application.ScreenUpdating = True   'refresh screen
        Call Comm_MatchWorkbookFont
        Application.ScreenUpdating = False
    Else
        Set fontObj = WrkSht.Parent.Styles("Normal").Font
        strName = fontObj.name
        intSize = fontObj.Size
        
        cht.ChartArea.Select
        Selection.Font.name = strName
        Selection.Font.Size = intSize
         
        With cht.chartTitle.Font
            .name = strName
            .Size = intSize
        End With
        cht.SeriesCollection(1).DataLabels.Position = xlLabelPositionAbove              '2019.03.13 added
    End If
    'End mdf; 10.08.12
    
    Call Ksk_CutDataLink(ActiveWorkbook)
    
    Call WorkBookClose(strBkName)
    
    Application.ScreenUpdating = True
    rgeout.Select
exitit:
    On Error GoTo 0
End Sub

Sub Ksk_CloseTmplGrp()
    Dim verno As Integer
    Dim tmplWrk As Workbook
    verno = getExcelVerNo()
    If verno < 12 Then
        strBkName = GBKNAME_GrpTmp2K
    Else
        strBkName = GBKNAME_GrpTmp
    End If
    On Error Resume Next
    Set tmplWrk = Workbooks(strBkName)
    If Not tmplWrk Is Nothing Then
        Call WorkBookClose(strBkName)
    End If
    On Error GoTo 0
End Sub
'=== EOF ===





Attribute VB_Name = "mdlMhbt"
Option Private Module
Option Explicit
    
Type HBT_TBL
    objRge As String
    varRge As String
    OutRge As String
    bNewSheet As Long
    Except As Long
    Method As Long
    FIn As Double
    FOut As Double
    GroupMerge As Long
    GroupCode As Long
    Code1 As Long
    Code2 As Long
    Code3 As Long
    OutMid As Long
    SmpTitle As Long
    SmpNameRge As String
    DpScore As Long
    flgPull As Long
    GrpNameRge As String
    flgGrpOut As Long
End Type

Private m_varselect As String
Private Const HBT_ERR_SMP As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|"

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function fTH1_Hanbetsu_vba Lib "KKS_SubC_64.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Declare PtrSafe Function fTH1_Hanbetsu_vba Lib "KKS_SubC.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function fTH1_Hanbetsu_vba Lib "KKS_SubC_64.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Declare Function fTH1_Hanbetsu_vba Lib "KKS_SubC.dll" (mhbt As HBT_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

Private Function handleHbtData(HbtTbl As HBT_TBL, ByVal bAuto As Boolean) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeCateName As Range, rgeGrpName As Range
    Dim tmpsht As Worksheet
    Dim hbtobj As Variant, hbtvar As Variant
    Dim hbtVarSel As Variant
    Dim cateNameRow As Long, smpnum As Long, ItmNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim tmpi As Long
    Dim dict As Object, dict2 As Object
    Dim v As Variant
    Dim maxGrpCode As Integer
    
    On Error Resume Next
    Set rgeObj = Range(HbtTbl.objRge)
    Set rgeVar = Range(HbtTbl.varRge)
    Set rgeGrpName = Range(HbtTbl.GrpNameRge)
    If HbtTbl.SmpTitle = 2 Then
        Set rgeSmpName = Range(HbtTbl.SmpNameRge)
    End If
    
    hbtvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    If HbtTbl.SmpTitle = 2 And rgeSmpName Is Nothing Then
        MsgBox "|fffd||5368e||496||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set tmpsht = Nothing
        Exit Function
    End If
    
    If Not rgeGrpName Is Nothing And Not bAuto Then
        maxGrpCode = IIf(HbtTbl.Code1 > HbtTbl.Code2, HbtTbl.Code1, HbtTbl.Code2)
        If rgeGrpName.Rows.Count < maxGrpCode Then
            MsgBox "|fffd|Q|fffd||fffd||fffd||302||303|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbOKOnly Or vbInformation
            Set tmpsht = Nothing
            Exit Function
        End If
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$2")
    If HbtTbl.SmpTitle = 2 Then
        Call PasteRange(rgeSmpName, rge, xlPasteValues)
    Else
        For i = 1 To rgeVar.Rows.Count - 1
            rge(i, 1) = i
        Next i
    End If
    Set rge = tmpsht.Range("$C$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        hbtVarSel = Split(m_varselect, ",")
    Else
        ReDim hbtVarSel(0 To rgeVar.Columns.Count) As Long
        hbtVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            hbtVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To hbtVarSel(0)
            rge(i, j + 1) = rgeVar(i, hbtVarSel(j) + 1)
        Next j
    Next i
    HbtTbl.varRge = Range(rge(1, 2), rge(rgeVar.Rows.Count, hbtVarSel(0) + 1)).Address

    Set rge = Range(HbtTbl.varRge)
    smpnum = rge.Rows.Count
    
    Set rge = Range("C1")
    objSmpNum = rgeObj.Rows.Count
    ItmNum = hbtVarSel(0)
    Set rge = Range(rge(1, 1), rge(objSmpNum, 1))
    For i = objSmpNum To 2 Step -1
        If Trim(rge(i, 1)) = vbNullString Or (Not bAuto And Not IsNumeric(rge(i, 1))) Then
            If HbtTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("D1")
    ItmNum = hbtVarSel(0)
    Set rge = Range(rge(1, 1), rge(smpnum, ItmNum))
    For i = smpnum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> ItmNum Then
            If HbtTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1               '2011.12.09 added
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("C1")
    If objSmpNum >= 2 Then
        Set rge = Range(rge(1, 1), rge(objSmpNum, ItmNum + 1))
        Set dict = CreateObject("Scripting.Dictionary")
        Set dict2 = CreateObject("Scripting.Dictionary")
        If bAuto Then
            HbtTbl.Code1 = 1
            HbtTbl.Code2 = 2
            j = 1
            For i = 2 To objSmpNum
                v = rge(i, 1).Value
                If Not dict.exists(v) Then
                    dict.Add v, j
                    dict2.Add j, v
                    If j = 1 Or j = 2 Then
                        rge(i, 1) = j
                    Else
                        rge(i, 1) = vbNullString
                    End If
                    j = j + 1
                Else
                    If dict(v) = 1 Or dict(v) = 2 Then
                        rge(i, 1) = dict(v)
                    Else
                        rge(i, 1) = vbNullString
                    End If
                End If
            Next i
            If dict.Count < 2 Then
                Set dict = Nothing
                Set dict2 = Nothing
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                Set handleHbtData = Nothing
                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        Else
            dict2.Add 1, HbtTbl.Code1
            dict2.Add 2, HbtTbl.Code2
        End If
        For i = objSmpNum To 2 Step -1
            If Not IsNumeric(rge(i, 1)) Then
                tmpi = CInt(StrConv(rge(i, 1), vbNarrow))
            Else
                tmpi = CInt(rge(i, 1))
            End If
            If tmpi <> HbtTbl.Code1 And tmpi <> HbtTbl.Code2 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1
                'rge(i, 1) = vbNullString
            Else
                If tmpi = HbtTbl.Code1 Then
                    rge(i, 1) = 1
                Else
                    rge(i, 1) = 2
                End If
            End If
        Next i
    Else
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox HBT_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    HbtTbl.Code1 = 1
    HbtTbl.Code2 = 2
    
    If smpnum < 2 Or objSmpNum < 2 Then
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox HBT_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtData = Nothing
        Exit Function
    End If
    
    Set rge = tmpsht.Range("$B$1")
    If Not rgeGrpName Is Nothing And Not bAuto Then
        'Call PasteRange(rgeGrpName, rge, xlPasteValues)
        For i = 1 To 2
            rge(i, 1) = rgeGrpName(dict2(i), 1)
        Next i
    Else
        For i = 1 To 2
            rge(i, 1) = dict2(i)
        Next i
    End If
    
    Set rge = tmpsht.Range("$A$2")
    HbtTbl.SmpTitle = 2
    HbtTbl.SmpNameRge = Range(rge(1, 1), rge(smpnum - 1, 1)).Address
    HbtTbl.SmpNameRge = tmpsht.name & "!" & HbtTbl.SmpNameRge
     
    Set rge = tmpsht.Range("$B$1")
    HbtTbl.GrpNameRge = Range(rge(1, 1), rge(2, 1)).Address
    HbtTbl.GrpNameRge = tmpsht.name & "!" & HbtTbl.GrpNameRge
    
    Set rge = tmpsht.Range("$C$1")
    HbtTbl.objRge = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    HbtTbl.objRge = tmpsht.name & "!" & HbtTbl.objRge
    
    HbtTbl.varRge = Range(rge(1, 2), rge(smpnum, hbtVarSel(0) + 1)).Address
    HbtTbl.varRge = tmpsht.name & "!" & HbtTbl.varRge
    
    Set handleHbtData = tmpsht
    Set dict = Nothing
    Set dict2 = Nothing
    On Error GoTo 0
End Function

Sub HbtGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    m_varselect = GetVarSel(dlg, "edtVarRge")
End Sub

Private Sub HbtSign_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optProb").Value = xlOn)
    dlg.CheckBoxes("chkPull").Enabled = bOn
    dlg.CheckBoxes("chkGrpOut").Enabled = Not bOn
End Sub

Private Sub HbtAuto_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optAuto").Value = xlOn)
    dlg.EditBoxes("edtCode1").Enabled = Not bOn
    dlg.EditBoxes("edtCode2").Enabled = Not bOn
    dlg.EditBoxes("edtGrpName").Enabled = Not bOn
End Sub

Private Sub HbtMethod_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optMethod5").Value = xlOn)
    dlg.OptionButtons("optSmpNo").Enabled = Not bOn
    dlg.OptionButtons("optSmpName").Enabled = Not bOn
    dlg.EditBoxes("edtSmpName").Enabled = Not bOn
    dlg.CheckBoxes("chkGrpOut").Enabled = Not bOn
    bOn = (dlg.OptionButtons("optMethod5").Value = xlOn Or dlg.OptionButtons("optMethod1").Value = xlOn)
    dlg.CheckBoxes("chkOutMid").Enabled = Not bOn
    dlg.EditBoxes("edtFIn").Enabled = Not bOn
    dlg.EditBoxes("edtFOut").Enabled = Not bOn
End Sub

Private Sub HbtSmpName_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn And dlg.OptionButtons("optSmpNo").Enabled)
    dlg.EditBoxes("edtSmpName").Enabled = bOn
End Sub

Private Sub HbtSetMacro()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    dlg.OptionButtons("optSign").OnAction = "HbtSign_Click"
    dlg.OptionButtons("optProb").OnAction = "HbtSign_Click"
    dlg.Buttons("btnVarSel").OnAction = "HbtGetVarSelect"
    dlg.OptionButtons("optAuto").OnAction = "HbtAuto_Click"
    dlg.OptionButtons("optCustom").OnAction = "HbtAuto_Click"
    dlg.OptionButtons("optMethod1").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod2").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod3").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod4").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod5").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optMethod6").OnAction = "HbtMethod_Click"
    dlg.OptionButtons("optSmpNo").OnAction = "HbtSmpName_Click"
    dlg.OptionButtons("optSmpName").OnAction = "HbtSmpName_Click"
    HbtAuto_Click
    HbtMethod_Click
    HbtSmpName_Click
    HbtSign_Click
End Sub

Sub KKS_HBT_1P01() '|fffd||fffd||fffd||295||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim titleStr As String      '2007.1.16 PYJ
    Dim nExcelVer As Integer
    Dim tmpsht As Worksheet
    Dim mhbt As HBT_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim grp(1 To 1) As VBAGRAPH
    Dim bAuto As Boolean
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbt")
    HbtSetMacro
redisp:
    Set actSht = ActiveSheet
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        mhbt.objRge = (dlg.EditBoxes("edtObjRge").text)
        mhbt.varRge = (dlg.EditBoxes("edtVarRge").text)
        'mhbt.OutRge = (dlg.EditBoxes("edtOutRge").Text)
        mhbt.GrpNameRge = (dlg.EditBoxes("edtGrpName").text)
        mhbt.bNewSheet = 1 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        mhbt.Method = IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 1, _
                            IIf(dlg.OptionButtons("optMethod2").Value = xlOn, 2, _
                            IIf(dlg.OptionButtons("optMethod3").Value = xlOn, 3, _
                            IIf(dlg.OptionButtons("optMethod4").Value = xlOn, 4, _
                            IIf(dlg.OptionButtons("optMethod5").Value = xlOn, 5, 6)))))
        mhbt.OutMid = IIf(dlg.CheckBoxes("chkOutMid").Value = xlOn, 1, 0)
        mhbt.FIn = val(dlg.EditBoxes("edtFIn").text)
        mhbt.FOut = val(dlg.EditBoxes("edtFOut").text)
        bAuto = IIf(dlg.OptionButtons("optAuto").Value = xlOn, True, False)
        'mhbt.GroupMerge = IIf(dlg.CheckBoxes("chkGroupMerge").Value = xlOn, 1, 0)
        mhbt.GroupCode = 1 'IIf(dlg.OptionButtons("optGroup12").Value = xlOn, 1, 2)
        mhbt.Code1 = val(dlg.EditBoxes("edtCode1").text)
        mhbt.Code2 = val(dlg.EditBoxes("edtCode2").text)
        'mhbt.Code3 = val(dlg.EditBoxes("edtCode3").Text)
        'If IsEmpty(dlg.EditBoxes("edtCode3").Text) Then
        '    mhbt.GroupCode = 1
        'End If
        mhbt.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        mhbt.DpScore = IIf(dlg.OptionButtons("optSign").Value = xlOn, 1, 2)
        mhbt.flgPull = IIf(dlg.CheckBoxes("chkPull").Value = xlOn And dlg.CheckBoxes("chkPull").Enabled, 1, 0)
        mhbt.SmpTitle = IIf(dlg.OptionButtons("optSmpNo").Value = xlOn, 1, 2)
        If mhbt.SmpTitle = 2 Then
            mhbt.SmpNameRge = dlg.EditBoxes("edtSmpName").text
        End If
        mhbt.flgGrpOut = IIf(dlg.CheckBoxes("chkGrpOut").Value = xlOn And mhbt.DpScore = 1, 1, 0)
        
        Set tmpsht = handleHbtData(mhbt, bAuto)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        mhbt.objRge = toXlRCstr(mhbt.objRge)
        mhbt.varRge = toXlRCstr(mhbt.varRge)
        mhbt.OutRge = toXlRCstr(mhbt.OutRge)
        mhbt.GrpNameRge = toXlRCstr(mhbt.GrpNameRge)
        mhbt.SmpNameRge = toXlRCstr(mhbt.SmpNameRge)
        
        'mhbt.objRge = Replace(mhbt.objRge, "|fffd|f|fffd|f", "|fffd|f")
        'mhbt.varRge = Replace(mhbt.varRge, "|fffd|f|fffd|f", "|fffd|f")
        'mhbt.OutRge = Replace(mhbt.OutRge, "|fffd|f|fffd|f", "|fffd|f")
        'mhbt.GrpNameRge = Replace(mhbt.GrpNameRge, "|fffd|f|fffd|f", "|fffd|f")
        'mhbt.SmpNameRge = Replace(mhbt.SmpNameRge, "|fffd|f|fffd|f", "|fffd|f")
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        Call InitGrpAry(grp)
        nExcelVer = 12
        rtn = fTH1_Hanbetsu_vba(mhbt, nExcelVer, grp)
        If rtn Then
                If grp(1).Type <> 0 Then
                    Call ConvToBSTR(grp(1))
                    If grp(1).Type = 1 Then
                        Application.Run GxlaBkGraph & "!MhbtGrp", grp(1).sheetName, grp(1).grpOut, grp(1).grpData
                    End If
                End If
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub


Attribute VB_Name = "mdlMhbtsj"
Option Private Module
Option Explicit
    
Type HBTSJ_TBL
    objRge As String
    varRge As String
    OutRge As String
    bNewSheet As Long
    Except As Long
    Method As Long
    Level As Double
    FValue As Double
    GroupNum As Long
    Codes(1 To 10) As Long
    SmpNameRge As String
    GrpNameRge As String
    bShowGrp As Long
    nXAxis As Long
    nYAxis As Long
    bShowCateName As Long
    bShowSmpName As Long
End Type

Private m_varselect As String
Private Const HBTSJ_ERR_SMP As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|"

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function fTH1_HanbetsuSj_vba Lib "KKS_SubC_64.dll" (mhbt As HBTSJ_TBL) As Integer
    #Else
    Declare PtrSafe Function fTH1_HanbetsuSj_vba Lib "KKS_SubC.dll" (mhbt As HBTSJ_TBL) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function fTH1_HanbetsuSj_vba Lib "KKS_SubC_64.dll" (mhbt As HBTSJ_TBL) As Integer
    #Else
    Declare Function fTH1_HanbetsuSj_vba Lib "KKS_SubC.dll" (mhbt As HBTSJ_TBL) As Integer
    #End If
#End If

Private Function getCodeInx(ByVal grpCode As Integer, grpCodes() As Integer) As Integer
    Dim i As Integer
    For i = 1 To 10
        If grpCode = grpCodes(i) Then
            getCodeInx = i
            Exit Function
        End If
    Next i
    getCodeInx = 0
End Function

Private Function handleHbtsjData(HbtsjTbl As HBTSJ_TBL) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeGrpName As Range
    Dim tmpsht As Worksheet
    Dim hbtsjobj As Variant, hbtsjvar As Variant
    Dim hbtsjVarSel As Variant
    Dim cateNameRow As Long, smpnum As Long, ItmNum As Long, objSmpNum As Long
    Dim msgStr As String
    Dim grpFlgs(1 To 10) As Boolean
    Dim grpCodes(1 To 10) As Integer
    Dim tmpi As Integer
    Dim maxGrpCode As Integer
    
    On Error Resume Next
    j = 0
    maxGrpCode = 0
    For i = 1 To 10
        If HbtsjTbl.Codes(i) >= 1 And HbtsjTbl.Codes(i) <= 10 Then
            If grpFlgs(HbtsjTbl.Codes(i)) Then
                MsgBox "|fffd|Q|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Set tmpsht = Nothing
                Exit Function
            End If
            grpFlgs(HbtsjTbl.Codes(i)) = True
            j = j + 1
            grpCodes(j) = HbtsjTbl.Codes(i)
            If grpCodes(j) > maxGrpCode Then maxGrpCode = grpCodes(j)
        End If
    Next i
    HbtsjTbl.GroupNum = j
    If j < 2 Then
            MsgBox "|fffd|Q|fffd|Q|fffd||20f||fffd||30c|Q|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B", vbOKOnly Or vbInformation
            Set tmpsht = Nothing
            Exit Function
    End If
    Set rgeObj = Range(HbtsjTbl.objRge)
    Set rgeVar = Range(HbtsjTbl.varRge)
    Set rgeSmpName = Range(HbtsjTbl.SmpNameRge)
    Set rgeGrpName = Range(HbtsjTbl.GrpNameRge)
    hbtsjvar = rgeVar.Value
    
    If Not rgeGrpName Is Nothing Then
        If rgeGrpName.Rows.Count < maxGrpCode Then
            MsgBox "|fffd|Q|fffd||fffd||fffd||302||303|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|", vbOKOnly Or vbInformation
            Set tmpsht = Nothing
            Exit Function
        End If
    End If
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
       
    smpnum = rgeVar.Rows.Count
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If rgeSmpName Is Nothing Then
        For i = 2 To smpnum
            rge(i, 1) = i - 1
        Next i
    Else
        Call PasteRange(rgeSmpName, rge(2, 1), xlPasteValues)
    End If
    Set rge = tmpsht.Range("$C$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        hbtsjVarSel = Split(m_varselect, ",")
    Else
        ReDim hbtsjVarSel(0 To rgeVar.Columns.Count) As Long
        hbtsjVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            hbtsjVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To hbtsjVarSel(0)
            rge(i, j + 1) = rgeVar(i, hbtsjVarSel(j) + 1)
        Next j
    Next i
    HbtsjTbl.varRge = Range(rge(1, 2), rge(rgeVar.Rows.Count, hbtsjVarSel(0) + 1)).Address
      
    Set rge = Range("C1")
    objSmpNum = rgeObj.Rows.Count
    ItmNum = hbtsjVarSel(0)
    Set rge = Range(rge(1, 1), rge(objSmpNum, ItmNum + 1))
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> ItmNum + 1 Then
            If HbtsjTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtsjData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("D1")
    ItmNum = hbtsjVarSel(0)
    Set rge = Range(rge(1, 1), rge(smpnum, ItmNum))
    For i = smpnum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> ItmNum Then
            If HbtsjTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleHbtsjData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpsht.Range("$C$1")
    For i = objSmpNum To 2 Step -1
        If Not IsNumeric(rge(i, 1)) Then
            tmpi = CInt(StrConv(rge(i, 1), vbNarrow))
        Else
            tmpi = CInt(rge(i, 1))
        End If
        tmpi = getCodeInx(tmpi, grpCodes)
        If tmpi = 0 Then
            'rge(i, 1) = vbNullString
            tmpsht.Rows(rge.Rows(i).row).Delete
            smpnum = smpnum - 1
            objSmpNum = objSmpNum - 1
        Else
            rge(i, 1) = tmpi
        End If
    Next i
    
    If smpnum < 2 Or objSmpNum < 2 Then
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox HBTSJ_ERR_SMP, vbCritical Or vbOKOnly
        Set handleHbtsjData = Nothing
        Exit Function
    End If
    
    Set rge = tmpsht.Range("$A$1")
    HbtsjTbl.SmpNameRge = Range(rge(2, 1), rge(smpnum, 1)).Address
    If rgeGrpName Is Nothing Then
        For i = 1 To HbtsjTbl.GroupNum
            rge(i, 2) = "|fffd|Q" & grpCodes(i)
        Next i
    Else
        'Call PasteRange(rgeGrpName, rge(1, 2), xlPasteValues)
        For i = 1 To HbtsjTbl.GroupNum
            rge(i, 2) = rgeGrpName(grpCodes(i), 1)
        Next i
    End If
    
    Set rge = tmpsht.Range("$A$2")
    HbtsjTbl.SmpNameRge = Range(rge(1, 1), rge(smpnum - 1, 1)).Address
    HbtsjTbl.SmpNameRge = tmpsht.name & "!" & HbtsjTbl.SmpNameRge
     
    Set rge = tmpsht.Range("$B$1")
    HbtsjTbl.GrpNameRge = Range(rge(1, 1), rge(HbtsjTbl.GroupNum, 1)).Address
    HbtsjTbl.GrpNameRge = tmpsht.name & "!" & HbtsjTbl.GrpNameRge
    
    Set rge = tmpsht.Range("$C$1")
    HbtsjTbl.objRge = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    HbtsjTbl.objRge = tmpsht.name & "!" & HbtsjTbl.objRge
    
    HbtsjTbl.varRge = Range(rge(1, 2), rge(smpnum, hbtsjVarSel(0) + 1)).Address
    HbtsjTbl.varRge = tmpsht.name & "!" & HbtsjTbl.varRge
    
    Set handleHbtsjData = tmpsht
    On Error GoTo 0
End Function

Sub HbtsjGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    m_varselect = GetVarSel(dlg, "edtVarRge")
End Sub

Private Sub HbtsjMethod_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.OptionButtons("optMethod3").Value = xlOn)
    dlg.CheckBoxes("chkScoreGrp").Enabled = Not bOn
    dlg.EditBoxes("edtXAxis").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.EditBoxes("edtYAxis").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = (Not bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    bOn = (dlg.OptionButtons("optMethod2").Value = xlOn)
    dlg.EditBoxes("edtLevel").Enabled = bOn
    dlg.EditBoxes("edtFValue").Enabled = bOn
End Sub

Private Sub HbtsjShowGrp_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.CheckBoxes("chkScoreGrp").Value = xlOn)
    dlg.EditBoxes("edtXAxis").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.EditBoxes("edtYAxis").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpCateDisp").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
    dlg.CheckBoxes("chkGrpSmpNameDisp").Enabled = (bOn And dlg.CheckBoxes("chkScoreGrp").Enabled)
End Sub

Private Sub HbtsjSmpName_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn)
    dlg.EditBoxes("edtSmpName").Enabled = bOn
End Sub

Private Sub SetHbtsjMacro()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    dlg.Buttons("btnVarSel").OnAction = "HbtsjGetVarSelect"
    dlg.OptionButtons("optMethod1").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optMethod2").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optMethod3").OnAction = "HbtsjMethod_Click"
    dlg.OptionButtons("optSmpName").OnAction = "HbtsjSmpName_Click"
    dlg.OptionButtons("optSmpNo").OnAction = "HbtsjSmpName_Click"
    dlg.CheckBoxes("chkScoreGrp").OnAction = "HbtsjShowGrp_Click"
    HbtsjMethod_Click
    HbtsjSmpName_Click
    HbtsjShowGrp_Click
End Sub

Sub KKS_sjHBT() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim titleStr As String
    Dim nExcelVer As Integer
    Dim tmpsht As Worksheet
    Dim mhbt As HBTSJ_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMhbtsj")
    SetHbtsjMacro
redisp:
    Set actSht = ActiveSheet
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        mhbt.objRge = (dlg.EditBoxes("edtObjRge").text)
        mhbt.varRge = (dlg.EditBoxes("edtVarRge").text)
        mhbt.OutRge = (dlg.EditBoxes("edtOutRge").text)
        mhbt.bNewSheet = 1 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        mhbt.Method = IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 1, _
                                  IIf(dlg.OptionButtons("optMethod2").Value = xlOn, 2, 3))
        mhbt.Level = val(dlg.EditBoxes("edtLevel").text)
        mhbt.FValue = val(dlg.EditBoxes("edtFValue").text)
        'mhbt.GroupNum = val(dlg.EditBoxes("edtGroupNum").Text)
        mhbt.Codes(1) = val(dlg.EditBoxes("edtGrp1").text)
        mhbt.Codes(2) = val(dlg.EditBoxes("edtGrp2").text)
        mhbt.Codes(3) = val(dlg.EditBoxes("edtGrp3").text)
        mhbt.Codes(4) = val(dlg.EditBoxes("edtGrp4").text)
        mhbt.Codes(5) = val(dlg.EditBoxes("edtGrp5").text)
        mhbt.Codes(6) = val(dlg.EditBoxes("edtGrp6").text)
        mhbt.Codes(7) = val(dlg.EditBoxes("edtGrp7").text)
        mhbt.Codes(8) = val(dlg.EditBoxes("edtGrp8").text)
        mhbt.Codes(9) = val(dlg.EditBoxes("edtGrp9").text)
        mhbt.Codes(10) = val(dlg.EditBoxes("edtGrp10").text)
        mhbt.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        If (dlg.OptionButtons("optSmpNo").Value = xlOn) Then
            mhbt.SmpNameRge = vbNullString
        Else
            mhbt.SmpNameRge = Trim(dlg.EditBoxes("edtSmpName").text)
        End If
        mhbt.GrpNameRge = Trim(dlg.EditBoxes("edtGrpName").text)
        mhbt.bShowGrp = IIf(dlg.CheckBoxes("chkScoreGrp").Value = xlOn, 1, 0)
        mhbt.nXAxis = val(dlg.EditBoxes("edtXAxis").text)
        mhbt.nYAxis = val(dlg.EditBoxes("edtYAxis").text)
        mhbt.bShowCateName = IIf(dlg.CheckBoxes("chkGrpCateDisp").Value = xlOn, 1, 0)
        mhbt.bShowSmpName = IIf(dlg.CheckBoxes("chkGrpSmpNameDisp").Value = xlOn, 1, 0)
        
        Set tmpsht = handleHbtsjData(mhbt)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        mhbt.objRge = toXlRCstr(mhbt.objRge)
        mhbt.varRge = toXlRCstr(mhbt.varRge)
        mhbt.OutRge = toXlRCstr(mhbt.OutRge)
        mhbt.SmpNameRge = toXlRCstr(mhbt.SmpNameRge)
        mhbt.GrpNameRge = toXlRCstr(mhbt.GrpNameRge)
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fTH1_HanbetsuSj_vba(mhbt)
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub


Attribute VB_Name = "mdlMjkk"
Option Private Module
Option Explicit
    
Type JKK_TBL
    objRge As String
    varRge As String
    OutRge As String
    bNewSheet As Long
    Except As Long
    Method As Long
    TempOut As Long
    RelType As Long
    FIn As Double
    FOut As Double
    ConstItem As Long
    GrpShow As Long
    namerge As String
    SmpTitle As Long
End Type

Private m_varselect As String

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function fTH1_Jukaiki_vba Lib "KKS_SubC_64.dll" (jkk As JKK_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Declare PtrSafe Function fTH1_Jukaiki_vba Lib "KKS_SubC.dll" (jkk As JKK_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function fTH1_Jukaiki_vba Lib "KKS_SubC_64.dll" (jkk As JKK_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Declare Function fTH1_Jukaiki_vba Lib "KKS_SubC.dll" (jkk As JKK_TBL, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

Private Function handleJkkData(JkkTbl As JKK_TBL) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeCateName As Range
    Dim tmpsht As Worksheet
    Dim jkkobj As Variant, jkkvar As Variant
    Dim jkkVarSel As Variant
    Dim cateNameRow As Long, smpnum As Long, objSmpNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeObj = Range(JkkTbl.objRge)
    Set rgeVar = Range(JkkTbl.varRge)
    If JkkTbl.SmpTitle = 2 Then
        Set rgeSmpName = Range(JkkTbl.namerge)
    End If
    
    jkkvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    If JkkTbl.SmpTitle = 2 And rgeSmpName Is Nothing Then
        MsgBox "|fffd||5368e||496||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$2")
    If JkkTbl.SmpTitle = 2 Then
        Call PasteRange(rgeSmpName, rge, xlPasteValues)
    Else
        For i = 1 To rgeVar.Rows.Count
            rge(i, 1) = i
        Next i
    End If
    Set rge = tmpsht.Range("$B$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        jkkVarSel = Split(m_varselect, ",")
    Else
        ReDim jkkVarSel(0 To rgeVar.Columns.Count) As Long
        jkkVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            jkkVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To jkkVarSel(0)
            rge(i, j + 1) = rgeVar(i, jkkVarSel(j) + 1)
        Next j
    Next i
    JkkTbl.varRge = Range(rge(1, 2), rge(rgeVar.Rows.Count, jkkVarSel(0) + 1)).Address
    Set rge = tmpsht.Range(JkkTbl.varRge)
    smpnum = rge.Rows.Count
    
    Set rge = tmpsht.Range("B1")
    objSmpNum = rgeObj.Rows.Count
    Set rge = tmpsht.Range(rge(1, 1), rge(objSmpNum, jkkVarSel(0) + 1))
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JkkTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete xlUp
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                Set handleJkkData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i

    Set rge = Range(JkkTbl.varRge)
    For i = smpnum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JkkTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete xlUp
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                Set handleJkkData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
    Set rge = tmpsht.Range("$A$2")
    JkkTbl.SmpTitle = 2
    JkkTbl.namerge = Range(rge(1, 1), rge(smpnum, 1)).Address
    JkkTbl.namerge = tmpsht.name & "!" & JkkTbl.namerge
    
    Set rge = tmpsht.Range("$B$1")
    JkkTbl.objRge = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    JkkTbl.objRge = tmpsht.name & "!" & JkkTbl.objRge
    
    JkkTbl.varRge = Range(rge(1, 2), rge(smpnum, jkkVarSel(0) + 1)).Address
    JkkTbl.varRge = tmpsht.name & "!" & JkkTbl.varRge
    
    Set handleJkkData = tmpsht
    On Error GoTo 0
End Function

Sub JkkGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMjkk")
    m_varselect = GetVarSel(dlg, "edtVarRge")
End Sub

Private Sub JkkSmpName_click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMjkk")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn)
    dlg.EditBoxes("RgeSmpName").Enabled = bOn
End Sub

Private Sub JkkMethod_click()
    Dim dlg As DialogSheet
    Dim bNoneOn As Boolean, bSatariOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMjkk")
    bNoneOn = (dlg.OptionButtons("optMethod1").Value = xlOn)
    bSatariOn = (dlg.OptionButtons("optMethod5").Value = xlOn)
    dlg.OptionButtons("optSmpNo").Enabled = Not bSatariOn
    dlg.OptionButtons("optSmpName").Enabled = Not bSatariOn
    dlg.EditBoxes("RgeSmpName").Enabled = Not bSatariOn
    dlg.CheckBoxes("chkTempOut").Enabled = Not (bSatariOn Or bNoneOn)
    dlg.EditBoxes("edtFIn").Enabled = Not (bSatariOn Or bNoneOn)
    dlg.EditBoxes("edtFOut").Enabled = Not (bSatariOn Or bNoneOn)
    dlg.OptionButtons("optRelNone").Enabled = Not bSatariOn
    dlg.OptionButtons("optRel95").Enabled = Not bSatariOn
    dlg.OptionButtons("optRel99").Enabled = Not bSatariOn
    dlg.CheckBoxes("chkGrpYes").Enabled = Not bSatariOn
    If bSatariOn Then
        dlg.OptionButtons("optSmpNo").Value = xlOn
        dlg.CheckBoxes("chkTempOut").Value = xlOff
    End If
    JkkSmpName_click
End Sub

Private Sub Set_Macro_JKK()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMjkk")
    dlg.OptionButtons("optMethod1").OnAction = "JkkMethod_click"
    dlg.OptionButtons("optMethod2").OnAction = "JkkMethod_click"
    dlg.OptionButtons("optMethod3").OnAction = "JkkMethod_click"
    dlg.OptionButtons("optMethod4").OnAction = "JkkMethod_click"
    dlg.OptionButtons("optMethod5").OnAction = "JkkMethod_click"
    dlg.OptionButtons("optMethod6").OnAction = "JkkMethod_click"
    dlg.Buttons("btnVarSel").OnAction = "JkkGetVarSelect"
    dlg.OptionButtons("optSmpNo").OnAction = "JkkSmpName_click"
    dlg.OptionButtons("optSmpName").OnAction = "JkkSmpName_click"
    JkkMethod_click
    JkkSmpName_click
End Sub

Sub KKS_JKK_1P01() '|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim grp(1 To 2) As VBAGRAPH '2007.1.16 PYJ
    Dim titleStr As String      '2007.1.16 PYJ
    Dim nExcelVer As Integer
    Dim tmpsht As Worksheet
    Dim mjkk As JKK_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMjkk")
    Set_Macro_JKK
    
redisp:
    Set actSht = ActiveSheet
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        mjkk.objRge = (dlg.EditBoxes("edtObjRge").text)
        mjkk.varRge = (dlg.EditBoxes("edtVarRge").text)
        mjkk.OutRge = (dlg.EditBoxes("edtOutRge").text)
        mjkk.bNewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        mjkk.Method = IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 1, _
                            IIf(dlg.OptionButtons("optMethod2").Value = xlOn, 2, _
                            IIf(dlg.OptionButtons("optMethod3").Value = xlOn, 3, _
                            IIf(dlg.OptionButtons("optMethod4").Value = xlOn, 4, _
                            IIf(dlg.OptionButtons("optMethod5").Value = xlOn, 5, 6)))))
        mjkk.TempOut = IIf(dlg.CheckBoxes("chkTempOut").Value = xlOn, 1, 0)
        mjkk.RelType = IIf(dlg.OptionButtons("optRelNone").Value = xlOn, 1, _
                            IIf(dlg.OptionButtons("optRel95").Value = xlOn, 2, 3))
        mjkk.FIn = val(dlg.EditBoxes("edtFIn").text)
        mjkk.FOut = val(dlg.EditBoxes("edtFOut").text)
        mjkk.GrpShow = IIf(dlg.CheckBoxes("chkGrpYes").Value = xlOn, 1, 0)
        mjkk.ConstItem = IIf(dlg.CheckBoxes("chkConstYes").Value = xlOn, 2, 1)
        mjkk.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        mjkk.SmpTitle = IIf(dlg.OptionButtons("optSmpNo").Value = xlOn, 1, 2)
        If mjkk.SmpTitle = 2 Then
            mjkk.namerge = dlg.EditBoxes("RgeSmpName").text
        End If
        
        Set tmpsht = handleJkkData(mjkk)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        mjkk.objRge = toXlRCstr(mjkk.objRge)
        mjkk.varRge = toXlRCstr(mjkk.varRge)
        mjkk.OutRge = toXlRCstr(mjkk.OutRge)
        mjkk.namerge = toXlRCstr(mjkk.namerge)
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        Call InitGrpAry(grp)
        '2009.06.03 mdf for the UNICODE text cannot be shown in a chart created by C
        'Drawing a chart in VBA is OK
        nExcelVer = 12 ' getExcelVerNo()
        'end mdf
        rtn = fTH1_Jukaiki_vba(mjkk, nExcelVer, grp)
        If rtn = 0 And nExcelVer >= 12 Then
        '2010.06.03 mdf
        #If 0 Then
            If grp(1).Type <> 0 Then
                Call ConvToBSTR(grp(1))
                titleStr = Application.Run(GxlaBkGraph & "!DrawJkkTrendGrp", grp(1).sheetName, grp(1).grpOut, grp(1).grpData)
            End If
            If grp(2).Type <> 0 Then
                Call ConvToBSTR(grp(2))
                Application.Run GxlaBkGraph & "!DrawJkkSknGrp", grp(2).sheetName, grp(2).grpOut, grp(2).grpData, titleStr
            End If
        #Else
            If grp(1).Type = 4 Then
                Call ConvToBSTR(grp(1))
                Application.Run GxlaBkGraph & "!DrawJkkLogGrp", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).grpPara
            End If
            If grp(2).Type = 5 Then
                Call ConvToBSTR(grp(2))
                Application.Run GxlaBkGraph & "!DrawJkkTenGrp", grp(2).sheetName, grp(2).grpOut, grp(2).grpData, grp(2).grpPara
            End If
        #End If
            Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph)
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlMsj"
Option Private Module
Option Explicit
    
Type MSJ_TBL
    objRge As String
    varRge As String
    OutRge As String
    namerge As String
    bNewSheet As Long
    Except As Long
    AxeNum As Long
End Type

Private m_varselect As String

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function fMsjsokan_vba Lib "KKS_SubE_64.dll" (msj As MSJ_TBL) As Integer
    #Else
    Declare PtrSafe Function fMsjsokan_vba Lib "KKS_SubE.dll" (msj As MSJ_TBL) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function fMsjsokan_vba Lib "KKS_SubE_64.dll" (msj As MSJ_TBL) As Integer
    #Else
    Declare Function fMsjsokan_vba Lib "KKS_SubE.dll" (msj As MSJ_TBL) As Integer
    #End If
#End If

Private Function handleMsjData(msjTbl As MSJ_TBL) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeCateName As Range
    Dim tmpsht As Worksheet
    Dim msjobj As Variant, msjvar As Variant
    Dim msjVarSel As Variant
    Dim cateNameRow As Long, smpnum As Long, ItmNum As Long
    Dim msgStr As String
    Dim varcol As Long
    
    On Error Resume Next
    Set rgeObj = Range(msjTbl.objRge)
    Set rgeVar = Range(msjTbl.varRge)
    Set rgeSmpName = Range(msjTbl.namerge)
    
    msjvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If rgeSmpName Is Nothing Then
        For i = 1 To rgeVar.Rows.Count
            rge(i + 1, 1) = i
        Next i
    Else
        Call PasteRange(rgeSmpName, rge(2, 1), xlPasteValues)
    End If
    Set rge = tmpsht.Range("$B$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    varcol = rgeObj.Columns.Count
    If m_varselect <> "0" Then
        msjVarSel = Split(m_varselect, ",")
    Else
        ReDim msjVarSel(0 To rgeVar.Columns.Count) As Long
        msjVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            msjVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To msjVarSel(0)
            rge(i, j + varcol) = rgeVar(i, msjVarSel(j) + 1)
        Next j
    Next i
    msjTbl.varRge = Range(rge(1, varcol + 1), rge(rgeVar.Rows.Count, msjVarSel(0) + varcol)).Address

    Set rge = Range(msjTbl.varRge)
    smpnum = rge.Rows.Count
       
    ItmNum = msjVarSel(0)
    Set rge = Range(rge(1, 1), rge(smpnum, ItmNum))
    For i = smpnum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) <> ItmNum Then
            If msjTbl.Except = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd||fffd||fffd||fffd||fffd||142||202||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd|B"
                Set handleMsjData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpsht.Range("$A$2")
    
    msjTbl.namerge = Range(rge(1, 1), rge(smpnum - 1, 1)).Address
    msjTbl.namerge = tmpsht.name & "!" & msjTbl.namerge
    
    Set rge = tmpsht.Range("$B$1")
    
    msjTbl.objRge = Range(rge(1, 1), rge(rgeObj.Rows.Count, varcol)).Address
    msjTbl.objRge = tmpsht.name & "!" & msjTbl.objRge
    
    msjTbl.varRge = Range(rge(1, varcol + 1), rge(smpnum, msjVarSel(0) + varcol)).Address
    msjTbl.varRge = tmpsht.name & "!" & msjTbl.varRge
    
    Set handleMsjData = tmpsht
    On Error GoTo 0
End Function

Sub MsjGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMsj")
    m_varselect = GetVarSel(dlg, "edtVarRge")
End Sub

Private Sub MsjSmpName_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMsj")
    bOn = (dlg.OptionButtons("optSmpName").Value = xlOn)
    dlg.EditBoxes("edtSmpName").Enabled = bOn
End Sub

Private Sub SetMsjMacro()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMsj")
    dlg.Buttons("btnVarSel").OnAction = "MsjGetVarSelect"
    dlg.OptionButtons("optSmpName").OnAction = "MsjSmpName_Click"
    dlg.OptionButtons("optSmpNo").OnAction = "MsjSmpName_Click"
    MsjSmpName_Click
End Sub

Sub KKS_sjSKN_1P01() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||595||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim titleStr As String
    Dim nExcelVer As Integer
    Dim tmpsht As Worksheet
    Dim msj As MSJ_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMsj")
    SetMsjMacro
    
redisp:
    Set actSht = ActiveSheet
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        msj.objRge = (dlg.EditBoxes("edtObjRge").text)
        msj.varRge = (dlg.EditBoxes("edtVarRge").text)
        msj.namerge = (dlg.EditBoxes("edtSmpName").text)
        'msj.OutRge = (dlg.EditBoxes("edtOutRge").Text)
        msj.bNewSheet = 1 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        msj.AxeNum = val(dlg.EditBoxes("edtAxeNum").text)
        msj.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        If (dlg.OptionButtons("optSmpNo").Value = xlOn) Then
            msj.namerge = vbNullString
        End If
        Set tmpsht = handleMsjData(msj)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        msj.objRge = toXlRCstr(msj.objRge)
        msj.varRge = toXlRCstr(msj.varRge)
        'msj.OutRge = toXlRCstr(msj.OutRge)
        msj.namerge = toXlRCstr(msj.namerge)
        
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fMsjsokan_vba(msj)
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub




Attribute VB_Name = "mdlMssb"
'=======================================================
' |fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|
'
' 09.03 WZH
'=======================================================
Option Private Module
Option Explicit

Type paratbl
    '|fffd||348||34e|w|fffd||fffd|
    srcDataRef As String * 256
    objDataRef As String * 256
    srcNameRef As String * 256

    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A
    bSmpScrDisp As Long   '|fffd|\|fffd||fffd|
    bSmpScrYsk As Long    '|fffd|\|fffd||fffd|
    
    'Option
    CateSelect As Long     ' |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||311|I|fffd||fffd|
    SsbNum As Long      ' 2<=SsbNum<=|fffd||3d0||fffd|-1

    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrpDisp As Long           '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|;
    flgTenGrpNum As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- 1(|fffd|P|fffd|})or 2(|fffd|S|fffd|})
    Yoko_Axis As Long             '1<=Yoko_Axis<=AxisNum;
    Tate_Axis As Long             '1<=Tate_Axis<=AxisNum;
    mojiNum As Long               '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    bGrpCateDisp As Long          '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||243|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O;
  
    '
    bSmpLableNo As Long   ' |fffd||5368e||fffd||fffd||fffd||fffd||642||315|\|fffd||fffd|; TRUE : No.|fffd||155|\|fffd||fffd||fffd|C FALSE : |fffd||5368e||496||fffd||fffd||155|\|fffd||fffd|
    bExcept As Long
    bGrpCateBar As Long
    bGrpCateTen As Long
    bGrpAttrBar As Long
    bGrpAttrTen As Long
    bAttrDisp As Long       '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|\|fffd||fffd|;
    bAttrCateDisp As Long
    AttrRange As String * 256
    AttrCateRange As String * 256
    VarSelect As String * 256
    dataType As Long
    AnaMode As Long
End Type

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private ssbtbl As paratbl

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function ssb_vba Lib "KKS_SubD_64.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Private Declare PtrSafe Function ssb_vba Lib "KKS_SubD.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function ssb_vba Lib "KKS_SubD_64.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
    Private Declare Function ssb_vba Lib "KKS_SubD.dll" (ssbtbl As paratbl, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If

'==============================================================================================

Function ReallocGrp(ByVal n As Long) As Long
    ReDim VbaGrp(1 To n)
    Call InitGrpAry(VbaGrp)
    ReallocGrp = 0
End Function
'
'|fffd||3d0||fffd||fffd|I|fffd||fffd|
Private Sub SsbGetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    Set rgeVar = Range(dlg.EditBoxes("srcDataRef").text)
    Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpScr()
    Dim dlg As DialogSheet
    Dim bOn As Boolean

    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    bOn = (dlg.CheckBoxes("bSmpScrDisp") = xlOn)
    
    dlg.CheckBoxes("bAttrDisp").Enabled = bOn
    Call SsbCtrlMacro_AttrDsp

    dlg.CheckBoxes("bTenGrpDisp").Enabled = bOn
    
End Sub
'
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpScrYsk()
    Call CommSetEditBox_byChk("DlgMssb", "bSmpScrYsk", "objDataRef")
End Sub
'
'|fffd||5368e||483||fffd||fffd|x|fffd||fffd||fffd||315|\|fffd||fffd|
Private Sub SsbCtrlMacro_SmpName()
    Call CommSetEditBox_byOpt("DlgMssb", "optSmpName", "srcNameRef")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_AttrDsp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean, ChkObj As CheckBox

    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    Set ChkObj = dlg.CheckBoxes("bAttrDisp")
    bOn = (ChkObj = xlOn And ChkObj.Enabled = True)
    
    'cate name
    Set ChkObj = dlg.CheckBoxes("bAttrCateDisp")
    ChkObj.Enabled = bOn
    dlg.EditBoxes("attrCateRange").Enabled = (bOn And ChkObj = xlOn)
    
    'graph
    dlg.CheckBoxes("bGrpAttrBar").Enabled = bOn
    dlg.CheckBoxes("bGrpAttrTen").Enabled = bOn
    
    'data range
    Call CommSetEditBox_byChk("DlgMssb", "bAttrDisp", "attrRange")
End Sub
'
'|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S : |fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_AttrCateName()
    Call CommSetEditBox_byChk("DlgMssb", "bAttrCateDisp", "attrCateRange")
End Sub
'
'1|fffd|} / |fffd|S|fffd|}
Private Sub SsbCtrlMacro_Graph()
    Call CommSetEditBox_byOpt("DlgMssb", "flgTenGrpNum", "Tate_Axis")
    Call CommSetEditBox_byOpt("DlgMssb", "flgTenGrpNum", "Yoko_Axis")
End Sub

'|fffd||3d0||fffd||fffd||fffd||fffd||189||5368e||483||fffd||fffd|x|fffd||fffd||fffd||fffd| |fffd|\|fffd||fffd|
Private Sub SsbCtrlMacro_CateDisp()
    Call CommSetEditBox_byChk("DlgMssb", "bGrpCateDisp", "mojiNum")
End Sub
'
Private Sub SSB_setMacro(ByVal dlg As DialogSheet)
    'var select
    dlg.Buttons("cateSelect").OnAction = "SsbGetVarSel"
    
    'sample score
    dlg.CheckBoxes("bSmpScrDisp").OnAction = "SsbCtrlMacro_SmpScr"
    dlg.CheckBoxes("bSmpScrYsk").OnAction = "SsbCtrlMacro_SmpScrYsk"
    
    'sample name
    dlg.OptionButtons("optSmpNo").OnAction = "SsbCtrlMacro_SmpName"
    dlg.OptionButtons("optSmpName").OnAction = "SsbCtrlMacro_SmpName"
    
    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S
    dlg.CheckBoxes("bAttrDisp").OnAction = "SsbCtrlMacro_AttrDsp"
    dlg.CheckBoxes("bAttrCateDisp").OnAction = "SsbCtrlMacro_AttrCateName"
    
    'graph
    dlg.OptionButtons("flgTenGrpNum").OnAction = "SsbCtrlMacro_Graph"
    dlg.OptionButtons("flgTenGrpNumAll").OnAction = "SsbCtrlMacro_Graph"
    '|fffd||3d0||fffd||fffd||fffd||fffd||189||5368e||483||fffd||fffd|x|fffd||fffd||fffd||fffd| |fffd|\|fffd||fffd|
    dlg.CheckBoxes("bGrpCateDisp").OnAction = "SsbCtrlMacro_CateDisp"
        
End Sub
'
'return TRUE = OK else ERROR
'
Private Function chkSsbData() As Boolean
    Dim rgedata As Range, rgeYsk As Range, rgeSmpName As Range, rgeAttr As Range, rgeAttrCateName As Range
    Dim msgStr As String
    Dim tmpi As Long, yokoNo As Long, tateNo As Long
    Dim itemnum As Long
    
    'init
    msgStr = ""

    On Error Resume Next
    Set rgedata = Range((ssbtbl.srcDataRef))
    Set rgeYsk = Range((ssbtbl.objDataRef))
    Set rgeSmpName = Range((ssbtbl.srcNameRef))
    Set rgeAttr = Range((ssbtbl.AttrRange))
    Set rgeAttrCateName = Range((ssbtbl.AttrCateRange))
    On Error GoTo 0
    
    If rgedata Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    itemnum = rgedata.Columns.Count
    tmpi = ssbtbl.SsbNum
    yokoNo = ssbtbl.Yoko_Axis
    tateNo = ssbtbl.Tate_Axis
    If (tmpi < 2 Or tmpi > itemnum) Or _
       ((ssbtbl.flgTenGrpNum = 1) And (yokoNo < 1 Or yokoNo > 5 Or tateNo < 1 Or tateNo > 5)) Then
        msgStr = "|fffd||fffd||fffd|i|fffd||fffd||fffd||310||fffd||fffd|A|fffd|^|fffd|e|fffd||fffd||fffd|A|fffd||fffd||fffd|R|fffd||fffd||fffd|j|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bSmpScrYsk = 1 And rgeYsk Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    If ssbtbl.bSmpScrYsk = 1 And Not rgeYsk Is Nothing Then
        If rgeYsk.Columns.Count <> itemnum Then
            msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            GoTo chkEnd
        End If
    End If
    '
    If ssbtbl.bSmpLableNo = 0 And rgeSmpName Is Nothing Then
        msgStr = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bAttrDisp = 1 And rgeAttr Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    '
    If ssbtbl.bAttrCateDisp = 1 And rgeAttrCateName Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        GoTo chkEnd
    End If
    
    '
chkEnd:
    If msgStr <> "" Then
        MsgBox msgStr
        chkSsbData = False
        Exit Function
    End If
    
    '
    chkSsbData = True
End Function

Private Function SetValues(ByVal OutRge As Range, ByVal values As Variant) As Range
    Dim i As Long, j As Long, l As Long
    l = 1
    For i = LBound(values) To UBound(values)
        For j = LBound(values, 2) To UBound(values, 2)
            OutRge(l, 1).Value = values(i, j)
            l = l + 1
        Next j
    Next i
    Set SetValues = Range(OutRge, OutRge(l - 1, 1))
End Function

Private Function handleSsbData() As Worksheet
    Dim i As Long, j As Long, l As Long
    Dim rgeSrc As Range, rgeObj As Range, rge As Range
    Dim rgeSmpName As Range, rgeAttrData As Range, rgeAttrName As Range
    Dim tmpRge As Range
    Dim tmpsht As Worksheet
    Dim ssbobj As Variant, ssbvar As Variant, ssbcate As Variant
    Dim ssbVarSel As Variant
    Dim cateNameRow As Long, CateNum As Long, smpnum As Long, itemnum As Long
    Dim attrColNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeSrc = Range(ssbtbl.srcDataRef)
    If ssbtbl.bSmpScrDisp = 1 Then
        Set rgeObj = Range(ssbtbl.objDataRef)
    End If
    If ssbtbl.bSmpLableNo = 0 Then
        Set rgeSmpName = Range(ssbtbl.srcNameRef)
    End If
    If ssbtbl.bAttrDisp = 1 Then
        Set rgeAttrData = Range(ssbtbl.AttrRange)
    End If
    If ssbtbl.bAttrCateDisp = 1 Then
        Set rgeAttrName = Range(ssbtbl.AttrCateRange)
    End If
    smpnum = rgeSrc.Rows.Count
    itemnum = rgeSrc.Columns.Count
    Set tmpsht = rgeSrc.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If rgeSmpName Is Nothing Then
        For i = 1 To smpnum - 1
            rge(i + 1, 1).Value = i
        Next i
        ssbtbl.srcNameRef = toXlRCstr(Range(rge(2, 1), rge(smpnum, 1).Address)) & vbNullChar
    Else
        ssbvar = rgeSmpName.Value
        Set tmpRge = SetValues(rge(2, 1), ssbvar)
        ssbtbl.srcNameRef = toXlRCstr(tmpRge.Address) & vbNullChar
    End If
    
    If m_varselect <> "0" Then
        ssbVarSel = Split(m_varselect, ",")
    Else
        ReDim ssbVarSel(0 To itemnum) As Long
        ssbVarSel(0) = itemnum
        For i = 1 To itemnum
            ssbVarSel(i) = i - 1
        Next i
    End If
    
    itemnum = ssbVarSel(0)

    For i = 1 To smpnum
        For j = 1 To itemnum
            rge(i, j + 1) = rgeSrc(i, ssbVarSel(j) + 1)
        Next j
    Next i
    ssbtbl.srcDataRef = toXlRCstr(Range(rge(1, 2), rge(smpnum, itemnum + 1)).Address) & vbNullChar
    
    If Not rgeObj Is Nothing Then
        For i = 1 To rgeObj.Rows.Count
            For j = 1 To itemnum
                rge(i + smpnum, j + 1) = rgeObj(i, ssbVarSel(j) + 1)
            Next j
        Next i
        ssbtbl.objDataRef = toXlRCstr(Range(rge(smpnum + 1, 2), rge(smpnum + rgeObj.Rows.Count, itemnum + 1)).Address) & vbNullChar
    End If
    
    If Not rgeAttrData Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrData, rge(1, itemnum + 2), xlPasteValues)
        ssbtbl.AttrRange = toXlRCstr(tmpRge.Address) & vbNullChar
        attrColNum = tmpRge.Columns.Count
    End If
    If Not rgeAttrName Is Nothing Then
        Set tmpRge = PasteRange(rgeAttrName, rge(1, itemnum + 2 + attrColNum), xlPasteValues)
        ssbtbl.AttrCateRange = toXlRCstr(tmpRge.Address) & vbNullChar
    End If
    Set handleSsbData = tmpsht
    On Error GoTo 0
End Function
'
Sub KKS_SSB_1P01()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet, ChkObj As CheckBox
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim tmpsht As Worksheet
    Dim grpType0 As Integer
    Dim chartName As String, grpData0 As String
    Dim para As Object
    Dim chartTitle As String
    Dim txtLen As Integer
    Dim fontsize As Integer
    Dim bSmpName As Integer
    Dim predictNum As Integer
    Dim GDataSheet As String
    Dim VerNoXL As Integer
    
    On Error Resume Next
    
    '2009.06.03 mdf for the UNICODE text cannot be shown in a chart created by C
    'Drawing a chart in VBA is OK
    VerNoXL = 12 'getExcelVerNo()
    'end mdf
    
    ReDim VbaGrp(1 To maxGrpNum)
    Call InitGrpAry(VbaGrp)
    
    Set dlg = ThisWorkbook.DialogSheets("DlgMssb")
    
    Call SSB_setMacro(dlg)
    
    'init
    Call SsbCtrlMacro_SmpScr
    Call SsbCtrlMacro_SmpScrYsk
    Call SsbCtrlMacro_SmpName
    Call SsbCtrlMacro_AttrDsp
    Call SsbCtrlMacro_AttrCateName
    Call SsbCtrlMacro_Graph
    Call SsbCtrlMacro_CateDisp
    
redisp:
    m_varselect = "0"
    
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        Else
            ssbtbl.VarSelect = m_varselect
        End If
        ssbtbl.objDataRef = (dlg.EditBoxes("objDataRef").text) & vbNullChar
        ssbtbl.srcDataRef = (dlg.EditBoxes("srcDataRef").text) & vbNullChar
        ssbtbl.srcNameRef = (dlg.EditBoxes("srcNameRef").text) & vbNullChar
        Set ChkObj = dlg.CheckBoxes("bAttrDisp")
        ssbtbl.bAttrDisp = IIf(ChkObj = xlOn And ChkObj.Enabled = True, 1, 0)
        ssbtbl.AttrCateRange = (dlg.EditBoxes("attrCateRange").text) & vbNullChar
        ssbtbl.AttrRange = (dlg.EditBoxes("attrRange").text) & vbNullChar
        '
        ssbtbl.SsbNum = val(dlg.EditBoxes("edtSsbNum").text)
        ssbtbl.bExcept = IIf(dlg.OptionButtons("bExcept") = xlOn, 1, 0)
        
        If ssbtbl.bAttrDisp = 1 Then
            ssbtbl.bAttrCateDisp = IIf(dlg.CheckBoxes("bAttrCateDisp") = xlOn, 1, 0)
            ssbtbl.bGrpAttrBar = IIf(dlg.CheckBoxes("bGrpAttrBar") = xlOn, 1, 0)
            ssbtbl.bGrpAttrTen = IIf(dlg.CheckBoxes("bGrpAttrTen") = xlOn, 1, 0)
        Else
            ssbtbl.bAttrCateDisp = 0
            ssbtbl.bGrpAttrBar = 0
            ssbtbl.bGrpAttrTen = 0
        End If
        
        ssbtbl.bGrpCateBar = IIf(dlg.CheckBoxes("bGrpCateBar") = xlOn, 1, 0)
        ssbtbl.bGrpCateTen = IIf(dlg.CheckBoxes("bGrpCateTen") = xlOn, 1, 0)
        ssbtbl.bGrpCateDisp = IIf(ssbtbl.bGrpCateTen = 1 And dlg.CheckBoxes("bGrpCateDisp") = xlOn, 1, 0)
        '
        ssbtbl.bSmpLableNo = IIf(dlg.OptionButtons("optSmpNo") = xlOn, 1, 0)
        ssbtbl.bSmpScrDisp = IIf(dlg.CheckBoxes("bSmpScrDisp") = xlOn, 1, 0)
        ssbtbl.bSmpScrYsk = IIf(dlg.CheckBoxes("bSmpScrYsk") = xlOn, 1, 0)
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t
        ssbtbl.bTenGrpDisp = IIf(ssbtbl.bSmpScrDisp = 1 And dlg.CheckBoxes("bTenGrpDisp") = xlOn, 1, 0)
        
        ssbtbl.CateSelect = 0
        ssbtbl.flgTenGrpNum = IIf(dlg.OptionButtons("flgTenGrpNum") = xlOn, 1, 2)
        ssbtbl.mojiNum = val(dlg.EditBoxes("mojiNum").text)

        ssbtbl.Tate_Axis = val(dlg.EditBoxes("Tate_Axis").text)
        ssbtbl.Yoko_Axis = val(dlg.EditBoxes("Yoko_Axis").text)
        ssbtbl.dataType = IIf(dlg.OptionButtons("optRele") = xlOn, 1, 2)
        ssbtbl.AnaMode = 2 'IIf(dlg.OptionButtons("optModeVect") = xlOn, 1, 2)
        
        If chkSsbData() = False Then
            GoTo redisp
        End If
        
        Set tmpsht = handleSsbData
        If tmpsht Is Nothing Then GoTo redisp
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        
        rtn = ssb_vba(ssbtbl, CInt(VerNoXL), VbaGrp())
        If rtn = 0 And VerNoXL >= 12 Then
            grpType0 = 0
            For i = 1 To maxGrpNum
                If VbaGrp(i).Type <> 0 Then
                    Call ConvToBSTR(VbaGrp(i))
                    If VbaGrp(i).Type = 5 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3AttrBar", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    ElseIf VbaGrp(i).Type = 6 Then
                        Application.Run GxlaTai5BkGraph & "!DrawSr3AttrScore", VbaGrp(i).sheetName, VbaGrp(i).grpOut, VbaGrp(i).grpData, VbaGrp(i).grpPara
                    Else
                        On Error Resume Next
                        Set para = Comm_SetDict(VbaGrp(i).grpPara)
                        On Error GoTo 0
                        If para Is Nothing Then Exit Sub
                        chartTitle = para("chartTitle")
                        txtLen = CInt(para("txtLen"))
                        bSmpName = CInt(para("bSmpName"))
                        fontsize = CInt(para("fontSize"))
                        predictNum = CInt(para("predictNum"))
                        GDataSheet = para("GDataSheet")
                        If GDataSheet <> vbNullString Then
                            GDataSheet = GDataSheet & "!"
                        End If
                        Set para = Nothing
                        chartName = IIf(VbaGrp(i).Type = 1, "Th2BarChart", "Th2PointChart")
                        If VbaGrp(i).Type <> grpType0 Then
                            grpType0 = VbaGrp(i).Type
                            If VbaGrp(i).Type <> 1 Then grpData0 = VbaGrp(i).grpData
                        End If
                        '
                        '11.5.31 mdf GxlaThGraph
                        Application.Run GxlaThGraph & "!" & chartName, VbaGrp(i).sheetName, VbaGrp(i).grpOut, _
                            GDataSheet & VbaGrp(i).grpData, GDataSheet & grpData0, chartTitle, txtLen, fontsize, _
                            bSmpName, predictNum
                    End If
                End If
            Next i
        End If
        Call Comm_CutDataLink(ActiveWorkbook, GxlaBkGraph)
        Call Comm_CutDataLink(ActiveWorkbook, GxlaTai5BkGraph)  '2011.03.16 added
        Cells(1, 1).Select
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub
'
'=== EOF ===


Attribute VB_Name = "mdlMulcomn"

Option Explicit

Public Const SK_ZERO As Double = 0.0000000001
Public Const SK_INFINITY As Double = 1E+30

Public Const KTCON_BOTH As Long = 0
Public Const KTCON_RIGHT As Long = 1
Public Const KTCON_LEFT As Long = 2
Public Const ZINV_25PCT As Double = 1.95996108232066
Public Const ZINV_05PCT As Double = 2.57583451457321
Public Const ZINV_5PCT As Double = 1.6448530004709
Public Const ZINV_1PCT As Double = 2.32634192798286

Public Const KTTYPE_MU As Long = 0
Public Const KTTYPE_BO As Long = 1
Public Const KTTYPE_SA As Long = 2

Public Function Tinv(ByVal prob As Double, ByVal smp As Long) As Double
    On Error GoTo err_handle
    Tinv = WorksheetFunction.Tinv(prob, smp)
err_handle:
    On Error GoTo 0
End Function

Public Function ProbT(ByVal t As Double, ByVal free As Double, ByVal ktFlg As Long) As Double
    Dim p As Double
    On Error GoTo err_handle
    If ktFlg = 0 Then
        p = WorksheetFunction.TDist(Abs(t), free, 2)
    Else
        p = WorksheetFunction.TDist(Abs(t), free, 1)
        If (ktFlg = -1 And t > 0) Or (ktFlg = 1 And t < 0) Then
            p = 1 - p
        End If
    End If
    ProbT = p
err_handle:
    On Error GoTo 0
End Function

Public Function ProbZ(ByVal Z As Double, ByVal ktFlg As Long) As Double
    Dim p As Double
    If ktFlg = 0 Then
        p = WorksheetFunction.NORMSDIST(Z)
        p = (1 - p) * 2
    Else
        p = WorksheetFunction.NORMSDIST(Z)
        p = IIf(ktFlg = -1, p, 1 - p)
    End If
    ProbZ = p
End Function

Public Function ProbF(ByVal Fval As Double, ByVal F1 As Double, ByVal F2 As Double, ByVal ktFlg As Long) As Double
    Dim p As Double
    On Error GoTo err_handle
    p = WorksheetFunction.FDist(Fval, F1, F2)

    If ktFlg < 0 Then
        ProbF = 1 - p
    ElseIf ktFlg > 0 Then
        ProbF = p
    Else
        ProbF = IIf(p < 1 - p, p, 1 - p)
    End If
err_handle:
    On Error GoTo 0
End Function

Public Function rKenTei_A(ByVal smp As Long, ByVal r As Double, ByVal cmp As Double, _
                          ByVal ktFlg As Long, ByVal gawaFlg As Long, _
                          f As Long, tkryo As Double, tt5 As Double, tt1 As Double, prob As Double, mark As String) As Long
    Dim tmpd As Double, p1 As Double, p5 As Double, sk0 As Double
    If r <= -1 Or r >= 1 Or smp <= 3 Then
        rKenTei_A = -1
        Exit Function
    End If
    If ktFlg = 0 Then
        tmpd = r * Sqr((smp - 2#) / (1# - r * r))
    Else
        sk0 = cmp
        tmpd = (0.5 * WorksheetFunction.Ln((1 + r) / (1 - r)) - 0.5 * WorksheetFunction.Ln((1 + sk0) / (1 - sk0))) / Sqr(1# / (smp - 3#))
    End If
    If tmpd = 1E+31 Then
        rKenTei_A = -1
        Exit Function
    End If
    If ktFlg = 0 Or (gawaFlg <> KTCON_RIGHT And gawaFlg <> KTCON_LEFT) Then
        gawaFlg = KTCON_BOTH
    End If
    p1 = 0.01
    p5 = 0.05
    If gawaFlg <> KTCON_BOTH Then
        p1 = p1 * 2
        p5 = p5 * 2
    End If
    f = smp - 2
    tkryo = IIf(gawaFlg <> KTCON_BOTH, tmpd, Abs(tmpd))
    If ktFlg = 0 Then
        tt5 = Tinv(p5, f)
        tt1 = Tinv(p1, f)
        tmpd = ProbT(tkryo, f, IIf(gawaFlg = KTCON_LEFT, -1, gawaFlg))
    Else
        If gawaFlg <> KTCON_BOTH Then
            tt5 = ZINV_5PCT
            tt1 = ZINV_1PCT
        Else
            tt5 = ZINV_25PCT
            tt1 = ZINV_05PCT
        End If
        tmpd = ProbZ(tkryo, IIf(gawaFlg = KTCON_LEFT, -1, gawaFlg))
    End If
    prob = tmpd
    rKenTei_A = 0
End Function

Public Function rSuiTei(ByVal n As Long, ByVal r As Double, _
                        low95 As Double, up95 As Double, low99 As Double, up99 As Double) As Long
    Dim rln As Double, dr95 As Double, dr99 As Double
    Dim eln As Double, de95 As Double, de99 As Double
    If r <= -1 Or r >= 1 Or n <= 3 Then
        rSuiTei = -1
        Exit Function
    End If
    
    rln = 0.5 * WorksheetFunction.Ln((1 + r) / (1 - r))
    dr95 = ZINV_25PCT / Sqr(n - 3#)
    dr99 = ZINV_05PCT / Sqr(n - 3#)
    
    eln = Exp(2 * rln)
    de95 = Exp(2 * dr95)
    de99 = Exp(2 * dr99)
    low95 = 1 - 2# / (eln / de95 + 1#)
    up95 = 1 - 2# / (eln * de95 + 1#)
    low99 = 1 - 2# / (eln / de99 + 1#)
    up99 = 1 - 2# / (eln * de99 + 1#)
End Function

Public Sub findT1T5_Zinv(ByVal gawaFlg As Long, t1 As Double, t5 As Double)
    t5 = WorksheetFunction.NormSInv(0.975) '2017.01.27 mdf: = 1.96
    t1 = WorksheetFunction.NormSInv(0.995) '2017.01.27 mdf: = 2.58
    If gawaFlg = -1 Then
        t5 = -WorksheetFunction.NormSInv(0.95) '-1.64
        t1 = -WorksheetFunction.NormSInv(0.99) '-2.33
    ElseIf gawaFlg = 1 Then
        t5 = WorksheetFunction.NormSInv(0.95) '1.64
        t1 = WorksheetFunction.NormSInv(0.99) ''2.33
    End If
End Sub

Public Function ZdistRight(ByVal x As Double) As Double
    ZdistRight = ProbZ(x, 1)
End Function

Public Function TdistRight(ByVal x As Double, ByVal free As Long) As Double
    Dim prob As Double
    prob = WorksheetFunction.TDist(x, free, 1)
    TdistRight = prob
End Function

Public Function FdistRight(ByVal x As Double, ByVal F1 As Double, ByVal F2 As Double) As Double
    Dim prob As Double
    prob = WorksheetFunction.FDist(x, F1, F2)
    FdistRight = prob
End Function

Public Function XlBetaInv(ByVal x As Double, ByVal F1 As Double, ByVal F2 As Double) As Double
    Dim prob As Double
    prob = WorksheetFunction.BetaInv(x, F1, F2)
    XlBetaInv = prob
End Function

Public Function XlBetaDist(ByVal df1 As Double, ByVal df2 As Double, ByVal df3 As Double) As Double
    Dim prob As Double
    prob = WorksheetFunction.BetaDist(df1, df2, df3)
    XlBetaDist = prob
End Function

Public Function X2inv(ByVal prob As Double, ByVal free As Double) As Double
    X2inv = WorksheetFunction.ChiInv(prob, free)
End Function

Public Function X2distRight(ByVal x As Double, ByVal f As Long) As Double
    If x <= 0 Then
        X2distRight = 1
    Else
        X2distRight = WorksheetFunction.ChiDist(x, f)
    End If
End Function

Public Function probX2(ByVal X2val As Double, ByVal f As Double, ByVal ktFlg As Long) As Double
    Dim dTmp As Double, dProbX2 As Double
    dTmp = X2distRight(X2val, f)
    
    If (ktFlg = KTCON_LEFT) Then
        dProbX2 = 1 - dTmp
    ElseIf (ktFlg = KTCON_RIGHT) Then
        dProbX2 = dTmp
    Else
        dProbX2 = IIf(dTmp < 0.5, dTmp, 1 - dTmp) * 2    'KTCON_BOTH
    End If
    probX2 = dProbX2
End Function
'======EOF======
Attribute VB_Name = "mdlMyDocument"
Option Explicit
'
' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||fffd|DebugTxt|fffd||fffd||fffd||82||fffd|

Const HKEY_LOCAL_MACHINE = &H80000002
Const HKEY_CURRENT_USER = &H80000001
Const HKEY_CLASSES_ROOT = &H80000000
Const REG_SZ = 1

Const STANDARD_RIGHTS_ALL = &H1F0000
Const KEY_QUERY_VALUE = &H1
Const KEY_ENUMERATE_SUB_KEYS = &H8
Const KEY_NOTIFY = &H10
Const SYNCHRONIZE = &H100000

Const READ_CONTROL = &H20000
Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Const KEY_EXECUTE = (KEY_READ)

#If VBA7 Then
Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As LongPtr) As Long
Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String) As Long
#Else
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
#End If

Function sGet_WinPathName(iPathName As Integer) As String
'--------------------------
'|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||fffd|
'|fffd|V|fffd|X|fffd|e|fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||303|p|fffd|X|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'|fffd||fffd||fffd||fffd|
'   iPathName = 1|fffd||fffd||fffd||fffd|11|fffd||310||fffd||fffd||fffd|
'    1 = "DosIme"
'    2 = "Favorites"
'    3 = "Fonts"
'    4 = "Personal"
'    5 = "Programs"
'    6 = "Recent"
'    7 = "SendTo"
'    8 = "Start Menu"
'    9 = "Desktop"
'   10 = "Startup"
'   11 = "Templates"
'|fffd||7c2||fffd|l
'   |fffd||64fe||fffd||fffd||fffd||fffd||fffd|p|fffd|X(|fffd||fffd||fffd||fffd|\|fffd||355|t|fffd||fffd||fffd||202||fffd|)
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim KeyValueLength As Long
    Dim Ret As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    Dim sTemp1 As String
    Dim sPrgName As String
    Dim iTemp1 As Integer
    Select Case iPathName
        Case 1
            sPrgName = "DosIme"
        Case 2
            sPrgName = "Favorites"
        Case 3
            sPrgName = "Fonts"
        Case 4
            sPrgName = "Personal"
        Case 5
            sPrgName = "Programs"
        Case 6
            sPrgName = "Recent"
        Case 7
            sPrgName = "SendTo"
        Case 8
            sPrgName = "Start Menu"
        Case 9
            sPrgName = "Desktop"
        Case 10
            sPrgName = "Startup"
        Case 11
            sPrgName = "Templates"
        Case Else
            sGet_WinPathName = ""
            Exit Function
   End Select
    '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    '|6bc||7bd||fffd||603|L|fffd|[|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
    sTemp1 = "Microsoft\Windows\CurrentVersion\Explorer\Shell folders"
    Ret = RegOpenKey(HKEY_CURRENT_USER, "Software\" & sTemp1, keyhandle)

    If Ret <> 0 Then
        sGet_WinPathName = ""
        Exit Function
    End If

    sKeyTemp = sPrgName
    '|fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
    Ret = RegQueryValueEx(keyhandle, sKeyTemp, 0&, REG_SZ, ByVal KeyValue, KeyValueLength)
    If Ret <> 0 Then
        Ret = RegCloseKey(keyhandle)
        sGet_WinPathName = ""
        Exit Function
    End If

    Ret = RegCloseKey(keyhandle)
    Value = Trim(Left(KeyValue, KeyValueLength))
    iTemp1 = InStr(1, Value, Chr$(0), 0)
    sTemp1 = Left$(Value, iTemp1 - 1)
    sGet_WinPathName = sTemp1
End Function

Function GetMyDocPathName() As String
    GetMyDocPathName = sGet_WinPathName(4)
End Function
Attribute VB_Name = "mdlOutlier"
Option Private Module
Option Explicit

Type outlier_para
    DataRef As String
    SmpNameRef As String
    OutRef As String
End Type

Private Const ERR_DATARGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||752||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const ERR_OUTRGE As String = "|fffd|o|fffd||350||fffd||fffd||752||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const ERR_NAMERGE As String = "|fffd||5368e||496||fffd||fffd||348||342||311|I|fffd||fffd||fffd||fffd||fffd||508||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B"
Private Const ERR_ITEMNUM As String = "|fffd||3d0||fffd||fffd||fffd|2|fffd||fffd||20f||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Private Const ERR_SMPNUM As String = "|fffd|W|fffd|{|fffd||fffd||fffd||34f||fffd||fffd||202||fffd||fffd||182||fffd|2|fffd||142||fffd||fffd||fffd||5c2||fffd||fffd||142||fffd||fffd|B"
Private Const ERR_MOREITEM As String = "|fffd||fffd||310||fffd||fffd||fffd|200|fffd||fffd||702||142||142||fffd||fffd|B"

Private m_varselect As String
Private m_RemovedSmpNo As Collection

#If VBA7 Then
    #If Win64 Then
    Private Declare PtrSafe Function fOutlier Lib "KKS_SubB_64.dll" (outlier As outlier_para) As Integer
    #Else
    Private Declare PtrSafe Function fOutlier Lib "KKS_SubB.dll" (outlier As outlier_para) As Integer
    #End If
#Else
    #If Win64 Then
    Private Declare Function fOutlier Lib "KKS_SubB_64.dll" (outlier As outlier_para) As Integer
    #Else
    Private Declare Function fOutlier Lib "KKS_SubB.dll" (outlier As outlier_para) As Integer
    #End If
#End If

Private Sub OUTLIER_GetVarSel()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim valvar As Variant
    Dim savLabelA As String, savLabelB As String
    
    m_varselect = vbNullString
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgOutlier")
    Set rgeVar = Range(dlg.EditBoxes("edtRgeData").text)
    Set rgeVar = Range(rgeVar(1, 1), rgeVar(1, rgeVar.Columns.Count))
    If err.Number <> 0 Then
        err.Clear
        m_varselect = vbNullString
        On Error GoTo 0
        Exit Sub
    End If
    valvar = rgeVar.Value()
    For i = 1 To rgeVar.Columns.Count
        m_varselect = m_varselect & "," & valvar(1, i)
    Next i
        
    'save
    savLabelA = frmVarSel.Label1.Caption
    savLabelB = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|"
    frmVarSel.Label2.Caption = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|"
    
    m_varselect = VarSelect(Mid(m_varselect, 2))
    
    'recovery
    frmVarSel.Label1.Caption = savLabelA
    frmVarSel.Label2.Caption = savLabelB
    
    On Error GoTo 0
End Sub

Private Function handleData(outlier As outlier_para, ByVal bExcept As Boolean) As Integer
    Dim i As Long, j As Long
    Dim rgedata As Range, rgeName As Range, rgeout As Range
    Dim tmpsht As Worksheet
    Dim varsel As Variant
    Dim itemnum As Long, smpnum As Long
    Dim tmpRge As Range
    
    On Error Resume Next
    Set rgedata = Range(outlier.DataRef)
    Set rgeName = Range(outlier.SmpNameRef)
    On Error GoTo 0
    If rgedata.Rows.Count < 2 Then
        handleData = -1
        MsgBox ERR_SMPNUM
        Exit Function
    End If
    If Not rgeName Is Nothing Then
        If rgeName.Rows.Count <> rgedata.Rows.Count - 1 Then
            handleData = -2
            MsgBox ERR_NAMERGE
            Exit Function
        End If
    End If
    
    Set tmpsht = ThisWorkbook.Worksheets("TempSht")
    
    If m_varselect <> "0" Then
        varsel = Split(m_varselect, ",")
    Else
        ReDim varsel(0 To rgedata.Columns.Count) As Long
        varsel(0) = rgedata.Columns.Count
        For i = 1 To rgedata.Columns.Count
            varsel(i) = i - 1
        Next i
    End If
    
    itemnum = varsel(0)
    smpnum = rgedata.Rows.Count
    If itemnum < 2 Then
        handleData = -3
        MsgBox ERR_ITEMNUM
        Exit Function
    End If
    If itemnum > 200 Then
        handleData = -3
        MsgBox ERR_MOREITEM
        Exit Function
    End If
    
    tmpsht.Cells.Clear
    Set rgeout = tmpsht.Range("A1")
    If Not rgeName Is Nothing Then
        rgeName.Copy
        rgeout(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To smpnum - 1
            rgeout(1 + i, 1).Value = "|fffd||5368e||fffd|" & i
        Next i
    End If
    For i = 1 To itemnum
        rgedata.Columns(CInt(varsel(i)) + 1).Copy
        rgeout(1, i + 1).PasteSpecial xlValues
    Next i

    Set tmpRge = rgeout(2, 2).Resize(smpnum - 1, itemnum)
    For i = smpnum - 1 To 1 Step -1
        If Application.WorksheetFunction.Count(tmpRge.Rows(i)) <> itemnum Then
            If Not bExcept Then
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbOKOnly Or vbInformation
                handleData = -1
                Exit Function
            Else
                m_RemovedSmpNo.Add i
                tmpsht.Rows(tmpRge.Rows(i).row).Delete
                smpnum = smpnum - 1
            End If
        End If
    Next i
    If smpnum < 2 Then
        MsgBox ERR_DATARGE, vbOKOnly Or vbInformation
        handleData = -3
        Exit Function
    End If
    outlier.DataRef = toXlRCstr(RangeToStr(Range(rgeout(1, 2), rgeout(smpnum, itemnum + 1))))
    outlier.SmpNameRef = toXlRCstr(RangeToStr(Range(rgeout(2, 1), rgeout(smpnum, 1))))
End Function

Sub nu_KKS_THR6_OUTLIER_VBA()
    Dim i As Long, j As Long
    Dim outlier As outlier_para
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgedata As Range, rgeout As Range, rgeName As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim databk As Workbook
    Dim dataSht As Worksheet, actSht As Worksheet
    Dim bNewSht As Boolean
    Dim bExcept As Boolean
    
    On Error Resume Next
    Set actSht = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgOutlier")
    dlg.Buttons("btnVarSel").OnAction = "OUTLIER_GetVarSel"
    Set m_RemovedSmpNo = New Collection
redisp:
    m_varselect = "0"
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        If m_varselect = vbNullString Then
            GoTo redisp
        End If
        outlier.DataRef = Trim(dlg.EditBoxes("edtRgeData").text)
        outlier.OutRef = Trim(dlg.EditBoxes("edtRgeOut").text)
        outlier.SmpNameRef = Trim(dlg.EditBoxes("edtRgeName").text)
        bNewSht = IIf(dlg.OptionButtons("optNewSht").Value = xlOn, True, False)
        bExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, True, False)
        On Error Resume Next
        Set rgedata = Range(outlier.DataRef)
        Set rgeout = Range(outlier.OutRef)
        Set rgeName = Range(outlier.SmpNameRef)
        On Error GoTo 0
        If rgedata Is Nothing Then
            MsgBox ERR_DATARGE
            GoTo redisp
        End If
        If Not bNewSht And rgeout Is Nothing Then
            MsgBox ERR_OUTRGE
            GoTo redisp
        End If
        Set databk = rgedata.Worksheet.Parent
        If bNewSht Then
            Set dataSht = databk.Worksheets.Add
            Set rgeout = dataSht.Range("A1")
        End If
        outlier.OutRef = toXlRCstr(RangeToStr(rgeout))
        actSht.Activate
        rtn = handleData(outlier, bExcept)
        If rtn <> 0 Then
            Set m_RemovedSmpNo = New Collection
            GoTo redisp
        End If
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fOutlier(outlier)
        If rtn Then
            If m_RemovedSmpNo.Count > 0 Then
                For i = m_RemovedSmpNo.Count To 1 Step -1
                    rgeout.Worksheet.Rows(rgeout.row + m_RemovedSmpNo(i) + 3 & ":" & rgeout.row + m_RemovedSmpNo(i) + 3).Insert
                    If rgeName Is Nothing Then
                        rgeout(m_RemovedSmpNo(i) + 4, 1) = "|fffd||5368e||fffd|" & m_RemovedSmpNo(i)
                    Else
                        rgeout(m_RemovedSmpNo(i) + 4, 1) = rgeName(m_RemovedSmpNo(i), 1)
                    End If
                    For j = 1 To 7
                        rgeout(m_RemovedSmpNo(i) + 4, j + rgedata.Columns.Count + 1) = "-"
                    Next j
                Next i
                rgeout(4, 2).Resize(rgedata.Rows.Count, rgedata.Columns.Count).Value = rgedata.Value
                SetRangeBorder rgeout(5, 1).Resize(rgedata.Rows.Count - 1, 1), xlMedium, xlThin, xlThin, xlMedium
                For i = 1 To rgedata.Columns.Count - 1
                    SetRangeBorder rgeout(5, i + 1).Resize(rgedata.Rows.Count - 1, 1), xlThin, xlThin, xlThin, xlMedium
                Next i
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 1).Resize(rgedata.Rows.Count - 1, 1), xlThin, xlThin, xlMedium, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 2).Resize(rgedata.Rows.Count - 1, 1), xlMedium, xlThin, xlHairline, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 3).Resize(rgedata.Rows.Count - 1, 1), xlHairline, xlThin, xlThin, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 4).Resize(rgedata.Rows.Count - 1, 1), xlThin, xlThin, xlHairline, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 5).Resize(rgedata.Rows.Count - 1, 1), xlHairline, xlThin, xlMedium, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 6).Resize(rgedata.Rows.Count - 1, 1), xlMedium, xlThin, xlHairline, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 7).Resize(rgedata.Rows.Count - 1, 1), xlHairline, xlThin, xlHairline, xlMedium
                SetRangeBorder rgeout(5, rgedata.Columns.Count + 8).Resize(rgedata.Rows.Count - 1, 1), xlHairline, xlThin, xlMedium, xlMedium
            End If
        End If
    Else
        Call RestoreDlg(dlg)
    End If
    Set m_RemovedSmpNo = Nothing
End Sub
'=== EOF ===

Attribute VB_Name = "mdlPairComp"
'
'|fffd||fffd||394||fffd|r|fffd|@
'   |fffd||fffd||282||312||fffd|`|fffd||fffd| TAIKOUDT.XLS |fffd||142||fffd||fffd||fffd|B
'
'
Public Const BKNAME_|fffd||fffd||fffd||fffd| As String = "PairComp.xls"

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function ittui_taikou Lib "KKS_SubJ_64.DLL" (bkName As String, row As Long, col As Long, _
        shNum As Long, CateNum As Long, sdFlg As Long, junFlg As Long) As Long
    Declare PtrSafe Function ittui_syukei Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, CateNum As Long, oRw As Long, oCl As Long) As Long
    'added by SJY on 1997.7.31
    Declare PtrSafe Function ittui_stone Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, oRw As Long, oCl As Long, ncd As Long, ByVal ExcelVer As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function ittui_pu Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long) As Long
    Declare PtrSafe Function ittui_fang Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    Declare PtrSafe Function ittui_zhong Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    #Else
    Declare PtrSafe Function ittui_taikou Lib "KKS_SubJ.DLL" (bkName As String, row As Long, col As Long, _
        shNum As Long, CateNum As Long, sdFlg As Long, junFlg As Long) As Long
    Declare PtrSafe Function ittui_syukei Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, CateNum As Long, oRw As Long, oCl As Long) As Long
    'added by SJY on 1997.7.31
    Declare PtrSafe Function ittui_stone Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, oRw As Long, oCl As Long, ncd As Long, ByVal ExcelVer As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function ittui_pu Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long) As Long
    Declare PtrSafe Function ittui_fang Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    Declare PtrSafe Function ittui_zhong Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    #End If
#Else
    #If Win64 Then
    Declare Function ittui_taikou Lib "KKS_SubJ_64.DLL" (bkName As String, row As Long, col As Long, _
        shNum As Long, CateNum As Long, sdFlg As Long, junFlg As Long) As Long
    Declare Function ittui_syukei Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, CateNum As Long, oRw As Long, oCl As Long) As Long
    'added by SJY on 1997.7.31
    Declare Function ittui_stone Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, oRw As Long, oCl As Long, ncd As Long, ByVal ExcelVer As Long, grp() As VBAGRAPH) As Long
    Declare Function ittui_pu Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long) As Long
    Declare Function ittui_fang Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    Declare Function ittui_zhong Lib "KKS_SubJ_64.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    #Else
    Declare Function ittui_taikou Lib "KKS_SubJ.DLL" (bkName As String, row As Long, col As Long, _
        shNum As Long, CateNum As Long, sdFlg As Long, junFlg As Long) As Long
    Declare Function ittui_syukei Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, CateNum As Long, oRw As Long, oCl As Long) As Long
    'added by SJY on 1997.7.31
    Declare Function ittui_stone Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, oRw As Long, oCl As Long, ncd As Long, ByVal ExcelVer As Long, grp() As VBAGRAPH) As Long
    Declare Function ittui_pu Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long) As Long
    Declare Function ittui_fang Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    Declare Function ittui_zhong Lib "KKS_SubJ.DLL" (bkName As String, inStName As String, outStName As String, rw As Long, cl As Long, _
        rwNum As Long, clNum As Long, shNum As Long, CateNum As Long, oRw As Long, oCl As Long, ncd As Long, dataType As Long) As Long
    #End If
#End If

'--------------------------
Const KSKGM = "|fffd||fffd||394||fffd|rGM"
Const ShName = "TempSht"
Const Newshet = "Sheet1"
Const kskdlg = "DlgPair"
Const DataShet = "data"

Private m_DataRge As Range
Private m_SmpNameRge As Range
Private m_cateNum As Long
Private m_itemNum As Long

Public PairVbaGrp(1 To 1) As VBAGRAPH
    
Sub doUnprotect(ByVal bkName As String, ByVal stName As String)
    Workbooks(bkName).Sheets(stName).Unprotect
End Sub
'
'
Sub doProtect(ByVal bkName As String, ByVal stName As String)
    Workbooks(bkName).Sheets(stName).Protect DrawingObjects:=True, Contents:=True, Scenarios _
        :=True
End Sub

Private Sub Init()
    On Error Resume Next
    Set m_SmpNameRge = Nothing
    Set m_DataRge = Range(PairPara.DataRge)
    Set m_SmpNameRge = Range(PairPara.SmpNameRge)
    m_cateNum = PairPara.CateNum
    m_itemNum = m_DataRge.Columns.Count
    On Error GoTo 0
End Sub
'=== |fffd|}|fffd|N|fffd||fffd||fffd||fffd|` ===
'
'--- added by SJY on 1997.7.30 ---
'
'|fffd||fffd||394||fffd|r|fffd|@|fffd||303||fffd||fffd|[|fffd|h|fffd||fffd||fffd|
'
Sub DispIttuiGamen1()               '|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F
Attribute DispIttuiGamen1.VB_ProcData.VB_Invoke_Func = " \n14"
    Init
    Call DispIttuiGamen_Comm(1)
End Sub

Sub DispIttuiGamen2()                 '|fffd||fffd||fffd||fffd||fffd||315||3d6|@
Attribute DispIttuiGamen2.VB_ProcData.VB_Invoke_Func = " \n14"
    Init
    Call DispIttuiGamen_Comm(2)
End Sub

Sub DispIttuiGamen3()                 '|fffd|F|fffd||fffd||315||3d6|@
Attribute DispIttuiGamen3.VB_ProcData.VB_Invoke_Func = " \n14"
    Init
    Call DispIttuiGamen_Comm(3)
End Sub

Sub DispIttuiGamen4()                 '|fffd|Y|fffd||315||3d6|@
Attribute DispIttuiGamen4.VB_ProcData.VB_Invoke_Func = " \n14"
    Init
    Call DispIttuiGamen_Comm(4)
End Sub

Sub DispIttuiGamen5()                 '|fffd|T-|fffd|X|fffd|g|fffd||fffd||fffd||315||3d6|@
Attribute DispIttuiGamen5.VB_ProcData.VB_Invoke_Func = " \n14"
    Init
    Call DispIttuiGamen_Comm(5)
End Sub
'--- added by SJY end ---
'
'|fffd||fffd||290||752||fffd||30b||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'flg:
'1 = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)"
'2 = "|fffd||fffd||394||fffd|r|fffd|@(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)"
'3 = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|F|fffd||fffd||315||3d6|@)"
'4 = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|Y|fffd||315||3d6|@)"
'5 = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|T-|fffd|X|fffd|g|fffd||fffd|)"
'1999.9.3 added by LSQ
'
Private Sub DispIttuiGamen_Comm(flg As Long)
    Dim stObj As Worksheet
    
    '07.8.29 add
    If flg = 1 Then GdlgTitle = "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|"
    If flg = 2 Then GdlgTitle = "|fffd||fffd||fffd|@"
    If flg = 3 Then GdlgTitle = "|fffd|Y|fffd||315||3d6|@"
    If flg = 4 Then GdlgTitle = "|fffd|F|fffd||fffd||315||3d6|@"
    If flg = 5 Then GdlgTitle = "|fffd||fffd||fffd||fffd||fffd||315||3d6|@"
    
    Application.ScreenUpdating = False
    
    Call WorkBookOpen(BKNAME_|fffd||fffd||fffd||fffd|)
    Call doUnprotect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
    Set stObj = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM)
    stObj.Shapes("btnOk").Left = 94.5
    stObj.Shapes("btnEnd").Left = 276.75
    stObj.Shapes("btnDo").Left = 276.75
    stObj.Shapes("btnEnd").Left = 276.75
    stObj.Activate
    stObj.Cells(3, 4) = flg     '|fffd||fffd||fffd|@|fffd||242||fffd||fffd|
    stObj.DrawingObjects("|fffd|e|fffd|L|fffd|X|fffd|g 2").Select
    Selection.Characters.text = getHoHoName(flg)    '|fffd||fffd||fffd|@|fffd||242||fffd||fffd|
    Cells(3, 4).Select
    'Call init_KskRstSave(stObj)  '99.9.9 by LSQ
    
    Call doProtect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
    Call DispIttuiGamen(flg)    '|fffd||fffd||fffd|@|fffd||242||fffd||fffd|

End Sub
'
Private Function getHoHoName(flg As Long) As String
    getHoHoName = "|fffd||fffd||fffd|@|fffd||fffd||fffd||fffd|`"
    Select Case flg
        Case 1: getHoHoName = "|fffd||fffd||394||fffd|r|fffd|@(|fffd||fffd||fffd|@)"    'old:|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F, 11.6.13 LSQ
        Case 2: getHoHoName = "|fffd||fffd||394||fffd|r|fffd|@(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)"
        Case 3: getHoHoName = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|F|fffd||fffd||315||3d6|@)"
        Case 4: getHoHoName = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|Y|fffd||315||3d6|@)"
        Case 5: getHoHoName = "|fffd||fffd||394||fffd|r|fffd|@(|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)"
    End Select
    
End Function

'
'1997.7.31 SJY : add si
'2002.3.4 mdf by LSQ
'
Sub DispIttuiGamen(si As Long)
Attribute DispIttuiGamen.VB_ProcData.VB_Invoke_Func = " \n14"
    '95.11.24 LSQ
    'If chkItemNum() = 0 Then Exit Sub

    Call doProtect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
    
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = True
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Visible = True
    '--- set Zoom ---
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Activate
    'Call COMM_setZoom
    ActiveWindow.DisplayVerticalScrollBar = True    ''96.12.6 LSQ
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Application.EnableEvents = False
    If ittui_setListRange(si) = False Then
        frmPairLink.Show
        Exit Sub
    End If
    ittui_ok
    Application.EnableEvents = True
End Sub

Sub DoOK()
    Dim tmpRge As Range
    Dim v As Variant
    Dim itemnum As Long
    itemnum = getItemNum
    Set tmpRge = ThisWorkbook.Worksheets("TempSht2").Range("B2").Resize(itemnum, 1)
    v = Range("D35").Resize(itemnum, 1).Value2
    tmpRge.Value2 = v
    ActiveWindow.DisplayVerticalScrollBar = False
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = False
    'frmPairLink.btnOK.Enabled = True
    frmPairLink.bDataReady = True
    frmPairLink.Show
End Sub
'
Sub DoCancel()
Attribute DoCancel.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveWindow.DisplayVerticalScrollBar = False
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = False
    frmPairLink.Show
End Sub
'
'
'DoHelp:
'   link to the |fffd||fffd||394||fffd|rGM in taikoudt.xls;
'
Sub DoHelp()
Attribute DoHelp.VB_ProcData.VB_Invoke_Func = " \n14"
    'Call Help_ITTUI
End Sub

'
'|fffd||fffd|r|fffd||38f||6d0||fffd||fffd||fffd||fffd| |fffd|}|fffd|N|fffd||fffd|
Function getHikakuSu()
Attribute getHikakuSu.VB_ProcData.VB_Invoke_Func = " \n14"
    getHikakuSu = val(Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Range("C8").Value)
End Function
'
'|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||fffd||fffd||7c2||fffd|
'
Private Function getItemNum()
    Dim junFlg As Long, shNum As Long
    Dim sFlag As Long              'added by SJY on 1997.7.31
    
    'changed by SJY on 1997.7.31
    sFlag = getMethodFlg()  'H14.6.5 LSQ mdf
    Select Case sFlag
        Case 1
            junFlg = getJunFlg()   'H14.6.5 LSQ mdf
        Case 2
            junFlg = xlOff
        Case 3
            junFlg = xlOff
        Case 4
            junFlg = xlOn
        Case 5
            junFlg = xlOff
    End Select
    'changed by SJY end
    shNum = getHikakuSu()
    If junFlg = xlOn Then
        getItemNum = shNum * (shNum - 1)        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        getItemNum = shNum * (shNum - 1) / 2    '|fffd||fffd||fffd||fffd||fffd||202||fffd|
    End If
        
End Function
'
'
Private Function getKateSu()
    getKateSu = val(Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Cells(3, 3).Value)
End Function
'
'
'
Private Sub setKateSu(ByVal num As Long)
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Cells(3, 3) = num
End Sub


' |fffd||fffd||394||fffd|r_|fffd||fffd|r|fffd||38f||6d0||fffd||fffd||314||348||37e||fffd||fffd| |fffd|}|fffd|N|fffd||fffd|
' |3f8||6cb|L|fffd|^|fffd||fffd| : 1995/9/6  |570||fffd||7b0||fffd||fffd| : |fffd||5334||fffd|@|fffd|||fffd|}
'
'changed by SJY on 1997.7.31 : add si
'modified by LSQ 2002.3.4 : sub -> private function
'
Private Function ittui_setListRange(si As Long) As Boolean
Attribute ittui_setListRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim BkNameEnqute As String
    Dim sFlag As Long             'added by SJY on 1997.7.31
    
    Dim codeSaMaRyo As Long, numInfo As Long, transFlg As Long
    Dim dlgBox As DialogSheet
    
    numInfo = 6: codeSaMaRyo = 1
    'transFlg = 1
    'changed by SJY on 1997.8.6
    If si = 5 Then
        transFlg = 123
    Else
        transFlg = 1
    End If
    'changed by SJY end
    'saItemSu = COMM_copyItemInfo_ittui(BkNameEnqute, BKNAME_|fffd||fffd||fffd||fffd|, ShName, "B1", CInt(numInfo), CInt(transFlg))
    m_DataRge.Worksheet.Activate
    m_DataRge.Copy
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Activate
    Worksheets(ShName).Activate
    Range("D1").PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    Range("D1").Resize(1, m_DataRge.Columns.Count).Copy
    Range("C1").PasteSpecial xlPasteValues, , , True
    saItemSu = m_DataRge.Columns.Count
    If saItemSu <= 0 Then
        'Call dispMsgTko("|fffd|Y|fffd||fffd||fffd|r|fffd|`|fffd||fffd||fffd||682||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, GdlgTitle)
        ittui_setListRange = False
        Exit Function
    End If

'--- 96.7.12 by LSQ ---
'    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Range("A1:A" & saItemSu).Formula = "=""("" & B1 & "")"" & ""["" & G1 & ""]"" & C1"
    'Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Range("A1:A" & saItemSu).Formula = "=TEXT(B1,""(???)"") & ""["" & TEXT(G1,""???"") & ""]"" & C1"
    
    'jyokenSu = COMM_copyCondList(BkNameEnqute, BKNAME_|fffd||fffd||fffd||fffd|, ShName, "H1")
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Range("A1:A" & saItemSu).formula = "=TEXT(B1,""(???)"") & ""[  " & m_cateNum & "]"" & C1"
    'Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Range("A1:A" & saItemSu).Formula = "=""[  " & m_cateNum & "]"" & B1"
    'Set dbox = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Sheets(KSKGM).ListBoxes("listItem")
    'dbox.ListFillRange = ShName + "!A1:A" & saItemSu
    'dbox.Value = False
    
    ittui_setListRange = True
End Function

'
' |fffd|v|fffd|Z|fffd||fffd||fffd|@|fffd||30e|w|fffd||fffd|
'
Sub ittui_DispOption()
Attribute ittui_DispOption.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim sFlag As Long
    
    sFlag = getMethodFlg()  'H14.6.5 LSQ mdf
    If sFlag = 1 Then
        DialogSheets(kskdlg).Show
        
        'H14.6.6 LSQ add
        '|fffd||fffd||fffd||34b||fffd||63a9||fffd||fffd||fffd||3cd|X
'        Call ittui_ok  'cmt Dec 2003, PYJ
    Else
        DialogSheets(kskdlg1).Show
    End If

End Sub

'
'|fffd||fffd||394||fffd|r_|fffd||fffd|r|fffd||38f||6d0||fffd||fffd||314||348||fffd||fffd||fffd||fffd||fffd| |fffd|}|fffd|N|fffd||fffd|
'H14.6.5 LSQ mdf
Sub ittui_ok()
Attribute ittui_ok.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tmpRge As Range
    Dim itemnum As Long
    Dim v As Variant
    
    Call doUnprotect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)

    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    ExecuteExcel4Macro ("ECHO(FALSE)")
    
    If chkHikakuSu() = False Then
        Call clearGamen
        Range("C8").Select
    Else
        Call ittui_disp
        If ThisWorkbook.Worksheets("TempSht2").Range("A1").Value2 = 0 Then
            itemnum = getItemNum
            Set tmpRge = ThisWorkbook.Worksheets("TempSht2").Range("B2").Resize(itemnum, 1)
            v = tmpRge.Value2
            Range("D35").Resize(itemnum, 1).Value2 = v
        End If
        Range("D35").Select
    End If

    Call doProtect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)

End Sub
'
' |fffd|g|fffd||74d||fffd||fffd||d0b9||fffd|\|fffd||315|\|fffd||fffd| |fffd|}|fffd|N|fffd||fffd|
' |3f8||6cb|L|fffd|^|fffd||fffd| : 1995/10/26  |570||fffd||7b0||fffd||fffd| : LSQ
'
Private Sub ittui_disp()
    Dim Num1 As Long, Num2 As Long, itemnum As Long
    Dim junFlg As Long
    Dim sFlag As Long           'added by SJY on 1997.7.31
    Dim SmpName_i As String, SmpName_j As String
    
    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    ExecuteExcel4Macro ("ECHO(FALSE)")
    
    HiKaKuSu = getHikakuSu()
    
    '|fffd||fffd||283|N|fffd||fffd||fffd|A
    Call clearGamen         'H14.6.5 LSQ add
    
    '|fffd|Z|fffd||fffd||fffd||303|R|fffd|s|fffd|[
    sFlag = getMethodFlg()  'H14.6.5 LSQ mdf
    Select Case sFlag
        Case 1
            junFlg = getJunFlg()   'H14.6.5 LSQ mdf
        Case 2
            junFlg = xlOff
        Case 3
            junFlg = xlOff
        Case 4
            junFlg = xlOn
        Case 5
            junFlg = xlOff
    End Select
    '
    If junFlg = xlOn Then
        Num1 = HiKaKuSu: Num2 = HiKaKuSu - 1
    Else
        Num1 = HiKaKuSu: Num2 = HiKaKuSu - 1
        If Num1 Mod 2 = 0 Then Num1 = Num1 / 2 Else Num2 = Num2 / 2
    End If
    '
    Range("C15:E" & Num1 + 14).Select
    Selection.Copy
    For i = 1 To Num2
        Range("C" & 35 + (i - 1) * Num1).Select
        ActiveSheet.Paste
    Next i
    Application.CutCopyMode = False
    
    '|fffd|Z|fffd||fffd||fffd|r|fffd||fffd|
    itemnum = getItemNum
    Range("C" & itemnum + 34 & ":D" & itemnum + 34).Select
    With Selection.Borders(xlLeft)
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    Selection.Borders(xlTop).LineStyle = xlNone
    With Selection.Borders(xlBottom)
        .Weight = xlThin
        .colorIndex = xlAutomatic
    End With
    Selection.BorderAround LineStyle:=xlNone
    
    '|fffd||50d||fffd||fffd||310||752||fffd|
    cnt = 0
    'changed by SJY on 1997.8.1
    Select Case sFlag
        Case 1, 2, 3, 5
            For i = 1 To HiKaKuSu
                If m_SmpNameRge Is Nothing Then
                    SmpName_i = "|fffd||fffd||fffd||fffd|" & i
                Else
                    SmpName_i = m_SmpNameRge(i, 1)
                End If
                For j = 1 To HiKaKuSu
                    If m_SmpNameRge Is Nothing Then
                        SmpName_j = "|fffd||fffd||fffd||fffd|" & j
                    Else
                        SmpName_j = m_SmpNameRge(j, 1)
                    End If
                    If junFlg = xlOn Then
                        If i <> j Then
                            Cells(35 + cnt, 3) = SmpName_i & "|fffd||fffd|" & SmpName_j
                            cnt = cnt + 1
                        End If
                    Else
                        If i < j Then
                            Cells(35 + cnt, 3) = SmpName_i & "|fffd||fffd|" & SmpName_j
                            cnt = cnt + 1
                        End If
                    End If
                Next j
            Next i
        Case 4                     '|fffd|Y|fffd||315||3d6|@
            For i = 1 To HiKaKuSu
                If m_SmpNameRge Is Nothing Then
                    SmpName_i = "|fffd||fffd||fffd||fffd|" & i
                Else
                    SmpName_i = m_SmpNameRge(i, 1)
                End If
                For j = 1 To HiKaKuSu
                    If m_SmpNameRge Is Nothing Then
                        SmpName_j = "|fffd||fffd||fffd||fffd|" & j
                    Else
                        SmpName_j = m_SmpNameRge(j, 1)
                    End If
                    If i < j Then
                        Cells(35 + cnt, 3) = SmpName_i & "|fffd||fffd|" & SmpName_j
                        Cells(35 + cnt + 1, 3) = SmpName_j & "|fffd||fffd|" & SmpName_i
                        cnt = cnt + 2
                     End If
                Next j
            Next i
    End Select
    'changed by SJY end
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Range("A1").Resize(m_itemNum, 1).Copy
    Range("H1").PasteSpecial xlPasteValues
    Range("D35").Select
    With Range("D35").Resize(cnt, 1)
        .Validation.Delete
        .Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=" & Range("H1").Resize(m_itemNum, 1).Address
    End With
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(ShName).Cells(1, 255) = cnt
    Application.EnableEvents = True
End Sub
'

'
' |fffd||fffd||fffd||68e|w|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|}|fffd|N|fffd||fffd|
'
' |3f8||6cb|L|fffd|^|fffd||fffd| : 1995/9/6  |570||fffd||7b0||fffd||fffd| : |fffd||5334||fffd|@|fffd|||fffd|}
'
' modified by LSQ 1996/12/6
'
Sub ittui_sel()
Attribute ittui_sel.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim stObj As Object, listObj As Object
    
    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    ExecuteExcel4Macro ("ECHO(FALSE)")
    
    Set stObj = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM)
    Set listObj = stObj.ListBoxes("listItem")
    
    'cursor position check
    stObj.Activate
    rw = ActiveCell.row
    cl = ActiveCell.Column
    rwEnd = getItemNum() + 34
    If rw < 35 Or rw > rwEnd Or cl <> 4 Then
        Call MsgBox("|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||fffd||fffd||48f|W|fffd||348||342||30a|O|fffd||242||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly, GdlgTitle)
        GoTo EXIT_ittui_sel
    End If
    
    itemnum = listObj.ListCount
    For i = 1 To itemnum
        If listObj.Selected(i) = True And rw <= rwEnd Then  ''selected item
            Cells(rw, cl) = listObj.List(i)
            rw = rw + 1
        End If
    Next i
    Cells(rw, cl).Select
    
EXIT_ittui_sel:
    '|fffd|I|fffd||fffd||fffd||fffd||fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||256||7c2||fffd| 95.10.25 LSQ
    If listObj.ListCount > 0 Then listObj.Selected = False
End Sub

'
' |fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd|||fffd||fffd|
' |3f8||6cb|L|fffd|^|fffd||fffd| : 1995/9/6  |570||fffd||7b0||fffd||fffd| : |fffd||5334||fffd|@|fffd|||fffd|}
'
Function ittui_end() As Boolean
Attribute ittui_end.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim BkNameEnqute As String
    Dim itemnum As Long
    Dim sFlag As Long               'added by SJY on 1997.7.31
    
    Call doUnprotect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
    
    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    ExecuteExcel4Macro ("ECHO(FALSE)")
    
    Dim sample As Long
    HiKaKuSu = getHikakuSu()
    
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Activate
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Activate
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Activate
    sFlag = val(Cells(3, 4).Value)
    flg = 0: kateCHK = 0: itemnum = getItemNum
    For i = 1 To itemnum
        Crw = Cells(i + 34, 4)
        If Crw = "" Then
            flg = 2
            Exit For
        End If
        KateNum = Cells(i + 34, 4)
        slen = InStr(KateNum, "[")
        slen2 = InStr(KateNum, "]")
        If slen = 0 Or slen2 = 0 Then flg = 1: Exit For
        kateSu = val(Mid(KateNum, slen + 1, slen2 - slen1 - 1))
        setKateSu (kateSu)
        If sFlag = 5 Then
            If kateCHK = 0 Then
                Select Case kateSu
                    'Case 3, 5, 7, 9
                    Case 2
                        kateCHK = kateSu
                    Case Else
                        flg = 2
                End Select
            Else
                If kateSu <> kateCHK Then flg = 1
            End If
        Else
            If kateCHK = 0 Then
                Select Case kateSu
                    'Case 2
                    Case 3, 5, 7, 9
                        kateCHK = kateSu
                    Case Else
                        flg = 2
                End Select
            Else
                If kateSu <> kateCHK Then flg = 1
            End If
        End If
        If flg <> 0 Then Exit For
    Next i
    If flg <> 0 Then
        Select Case flg
            Case 1: mes = "|fffd||389||fffd||fffd||fffd||fffd||682||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd|v|fffd||142||fffd||fffd|B"
            Case 2: mes = "|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||349||fffd||342||142||fffd||fffd||702||fffd||fffd||fffd|B"
            Case Else: mes = "|fffd||fffd||fffd||682||fffd||fffd|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        End Select
        Call MsgBox(mes, vbOKOnly, GdlgTitle)
        
        Call doProtect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
        ittui_end = False
        Exit Function
    End If
    
    ittui_end = ittui_sheet(sFlag)
    PairPara.ValidNum = HiKaKuSu
    Call doProtect(BKNAME_|fffd||fffd||fffd||fffd|, KSKGM)
End Function

'
' |fffd||389||fffd||fffd||fffd||fffd||682||30e|w|fffd||fffd| |fffd|}|fffd|N|fffd||fffd|
' |3f8||6cb|L|fffd|^|fffd||fffd| : 1995/9/6  |570||fffd||7b0||fffd||fffd| : |fffd||5334||fffd|@|fffd|||fffd|}
'
'Sub ittui_sheet()
Function ittui_sheet(si As Long) As Boolean
Attribute ittui_sheet.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim NewName As String
    Dim SelNum As Long, rowNum As Long, colNum As Long
    Dim shNum As Long, CateNum As Long, junFlg As Long, sdFlg As Long
    
    Dim SHEsw(1 To 4) As Long
    Dim EBno1(1 To 2) As Long
    Dim sFlag As Long                  'added by SJY on 1997.7.31
    Dim ncd As Long                    'added by SJY on 1997.7.31
    Dim ExcelVer As Long
    'Dim VbaGrp(1 To 1) As VBAGRAPH
    Dim actCell As Range
    Dim CateSelect() As Long
    
    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    ExecuteExcel4Macro ("ECHO(FALSE)")
    sFlag = si               'added by SJY on 1997.7.31
    
    'Combination Check; H14.6.6 LSQ add
    '2019.04.24 mdf
    #If 0 Then
    If sFlag = 1 Then   'Scheff
        If (getJunFlg() = xlOff And getHikakuSu() = 2) Then '|fffd||fffd||fffd||fffd||fffd||202||fffd|, |fffd||fffd|r|fffd||fffd||fffd|i|fffd||fffd|=2
            Call MsgBox("|fffd||fffd|r|fffd||38f||fffd|(|fffd||fffd||fffd|i)|fffd||fffd|=2|fffd||30f||a347||fffd||241|A|fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||315||fffd||fffd||342||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, GdlgTitle)
            ittui_sheet = False
            Exit Function
        End If
    End If
    #End If
    'end mdf
    
    For i = 1 To 4: SHEsw(i) = 1: Next

    If (sFlag = 1) Then
        If PairPara.flgSDSort = 2 Then SHEsw(2) = 2
        If PairPara.flgOrderEffect = 2 Then SHEsw(3) = 2
        If PairPara.flgExcept = 2 Then SHEsw(4) = 2
    Else
        If PairPara.flgExcept = 2 Then SHEsw(4) = 2
    End If
    
    'Call GetOutWorkbook     'Workbooks.Add
    'Worksheets.Add  '|fffd|V|fffd|[|fffd|g|fffd|Q
    'Worksheets(1).Name = DataShet
    Application.DisplayAlerts = False
    On Error Resume Next
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(DataShet).Delete
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets("Sheet2").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True
    Call Comm_AddSheet(DataShet)
    Call Comm_AddSheet("Sheet2")
    
    Worksheets(DataShet).Activate
    
    Call ittui_work(sFlag, SHEsw(1), EBno1(1), EBno1(2))

    NewName = BKNAME_|fffd||fffd||fffd||fffd| 'Workbooks(Workbooks.Count).Name
    
    '2007.03.20 added
    ExcelVer = getExcelVerNo()
    Call InitGrpAry(PairVbaGrp)
    'end add
    
    '---|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    'ChDir getPathName
    changeToSSDir    '1996.09.24  Kato
     '---|fffd|f|fffd|[|fffd|^|fffd||30f|W|fffd|v|fffd||590||fffd||fffd||fffd||fffd||102||44f|o|fffd||fffd|
    rowNum = val(Worksheets(DataShet).Cells(1, 2))
    colNum = val(Worksheets(DataShet).Cells(2, 2))
    '
    sdFlg = SHEsw(2)
    junFlg = SHEsw(3)
    ncd = SHEsw(4)               'added by SJY on 1997.7.31
    CateNum = getKateSu
    shNum = getHikakuSu()
    '--- 96.6.4 by LSQ ---
    If rowNum <= 0 Or colNum <= 0 Or CateNum <= 0 Then
        Call MsgBox("|fffd|w|fffd||fffd||fffd||fffd|e|fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly, GdlgTitle)
        ittui_sheet = False
        Exit Function
    End If
    If (sFlag = 1) Then          'added by SJY on 1997.7.31
        rtn = ittui_syukei(NewName, DataShet, Newshet, 2, 0, rowNum, colNum, CateNum, 0, 0)

        '---|fffd|v|fffd|Z|fffd||590||fffd||fffd||fffd||fffd||102||44f|o|fffd||fffd|
        rtn = ittui_taikou(NewName, 1, 1, shNum, CateNum, sdFlg, junFlg)
    End If                       'added by SJY on 1997.7.31
    'added by SJY on 1997.7.31
    If (sFlag = 2) Then
        rtn = ittui_zhong(NewName, DataShet, Newshet, 4, 1, rowNum, colNum, shNum, CateNum, 0, 0, ncd, PairPara.ClsMark)
    End If
    If (sFlag = 3) Then
        rtn = ittui_fang(NewName, DataShet, Newshet, 4, 1, rowNum, colNum, shNum, CateNum, 0, 0, ncd, 2) '2013.10.02 mdf: , PairPara.ClsMark)
    End If
    If (sFlag = 4) Then
        rtn = ittui_pu(NewName, DataShet, Newshet, 4, 1, rowNum, colNum, shNum, CateNum, 0, 0, ncd)
    End If
    If (sFlag = 5) Then
        ExcelVer = 12
        rtn = ittui_stone(NewName, DataShet, Newshet, 4, 1, rowNum, colNum, shNum, 0, 0, ncd, ExcelVer, PairVbaGrp)
#If 0 Then
        If rtn = 0 And ExcelVer >= 12 Then
            Set actCell = ActiveCell
            If ConvToBSTR(VbaGrp(1)) Then
                If VbaGrp(1).Type > 0 Then
                    Call DrawStoneGrp(VbaGrp(1).sheetName, VbaGrp(1).grpOut, VbaGrp(1).grpData, VbaGrp(1).grpPara)
                End If
            End If
            actCell.Worksheet.Activate
            actCell.Select
        End If
#End If
    End If
    If rtn = 0 Then
        ittui_sheet = True
    Else
        ittui_sheet = False
    End If
End Function
'
'knum : item no
'H14.3.1 mdf by LSQ
'
Private Function getiup(ByVal knum As Integer)
    Dim i As Long, sjy As Long, flag As Long
    Dim jdua As Long, d1 As Double, d2 As Long
    Dim flag1 As Long
    Dim colpos As Integer, sysStObj As Worksheet
    Dim BkNameEnqute As String
    
    'colpos = IIf(knum < 255, knum, knum - 255) + 1
    'Set sysStObj = Workbooks(BkNameEnqute).Worksheets(IIf(knum < 255, SyName, SyName2))
    'Set sysStObj = Workbooks(BkNameEnqute).Worksheets(getSheetName(knum, colpos))
    colpos = colpos + 1
    
    jdua = getKateSu()
    i = 0
    d1 = 0#
    flag1 = 1
    
    'sysStObj.Activate
    
    Do While True
        flag = 1
        i = i + 1
        If (i > jdua) Then Exit Do
        Cells(267 + 2 * (i - 1), colpos).Select
        a = ActiveCell.Value
        sjy = VarType(a)
        d2 = a
        If ((sjy = 0) Or (sjy = 8)) Then
            flag1 = 1
            flag = 0
        End If
        If (flag = 0) Then Exit Do
        If (i = 1) Then
            d1 = d2
        ElseIf (i = 2) Then
            If (d2 >= d1) Then
                flag1 = 1
            Else
                flag1 = 2
            End If
            d1 = d2
        ElseIf (((flag1 = 1) And (d2 >= d1)) Or ((flag1 = 2) And (d2 < d1))) Then
            d1 = d2
        Else
            flag = 0
            flag1 = 1
        End If
        If (flag = 0) Then Exit Do
    Loop
    getiup = flag1
    
End Function                     'added by SJY on 1998.2.10

'
'H14.3.1 LSQ : recover using C program, add "flag" parameter
'
Sub ittui_work(flag As Long, Selsw As Long, Selno1 As Long, Selno2 As Long)
    Dim tmpArray(0 To 255) As Long
    Dim itemNoArray() As Long, itemNo As Long, tmpRow As Long
    Dim stObjGm As Worksheet, stObj As Worksheet
    Dim BkNameEnqute As String
    Dim bkObj As Workbook

    Application.ScreenUpdating = False

    'Sample = getSample(BkNameEnqute)
    'If Sample < 1 Then
    '    Call MsgBox("|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, GdlgTitle)
    '    Exit Sub
    'End If

    '|fffd|V|fffd|K|fffd||7af||fffd||fffd||30d||c42c|
    'Call GetOutWorkbook     'Workbooks.Add
    'Worksheets.Add  '|fffd|V|fffd|[|fffd|g|fffd|Q
    'Worksheets.Add  '|fffd|V|fffd|[|fffd|g|fffd|R 10.25 LSQ
    'Worksheets(1).Name = DataShet '10.25 LSQ
    Application.DisplayAlerts = False
    On Error Resume Next
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(Newshet).Delete
    On Error GoTo 0
    Application.DisplayAlerts = True
    
    Call Comm_AddSheet(Newshet)
    
    Set bkObj = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|) 'Workbooks(Workbooks.Count)
    
    Set stObj = bkObj.Worksheets(DataShet)
    Set stObjGm = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM)
    
    bkObj.Activate
    stObj.Select

    '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|R|fffd|s|fffd|[
    itemnum = getItemNum()
    ct = 0
    For i = 1 To itemnum
        KoumokNum = stObjGm.Cells(i + 34, 4)
        slen = InStr(KoumokNum, ")")
        If slen > 2 Then
           Kno = val(Mid(KoumokNum, 2, slen - 2))
           tmpArray(ct) = Kno: ct = ct + 1
        End If
    Next i
    If ct = 0 Or ct < itemnum Then
        Call MsgBox("|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, GdlgTitle)
        Exit Sub
    End If

    ReDim itemNoArray(0 To ct) As Long
    
    tmpRow = IIf(flag = 1, 3, 4)
    For i = 0 To ct - 1
        itemNo = tmpArray(i)
        
        itemNoArray(i) = itemNo
        '|fffd||fffd||fffd||696||fffd||fffd||313|]|fffd||fffd|
        'stObj.Cells(tmpRow, 2 + i) = getItemName(itemNo)
        
        If Not (flag = 1) Then
            'stObj.Cells(3, 2 + i) = getiup(itemNo)
        End If
        'stObj.Cells(tmpRow, 2 + i) = Worksheets("TempSht").Range("D1")(1, i + 1)
        stObj.Cells(tmpRow, 2 + i).Resize(PairPara.smpnum, 1).Value = Worksheets("TempSht").Range("D1")(1, itemNo).Resize(PairPara.smpnum, 1).Value
    Next i
    For i = 1 To PairPara.smpnum
        stObj.Cells(tmpRow + i, 1) = i
    Next i
    '|fffd|f|fffd|[|fffd|^|fffd||313|]|fffd||fffd|
    'rtnSmpNum = cCopyData(BkNameEnqute, bkObj.Name, DataShet, tmpRow, 0, Selsw, Selno1, Selno2, itemNoArray, 0)

    '|fffd|s|fffd||50502||315|\|fffd||fffd|
    bkObj.Activate
    Cells(1, 1).Value = "|fffd|s|fffd||fffd|"
    Cells(1, 2).Value = PairPara.smpnum
    Cells(2, 1).Value = "|fffd||fffd|"
    Cells(2, 2).Value = itemnum + 1
    'For i = 1 To PairPara.CateNum
    '    Cells(3, i + 1) = i
    'Next i
End Sub
'
'H14.6.5 LSQ add
Private Function getJunFlg() As Long
    'getJunFlg = Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).DialogSheets("|fffd||fffd||394||fffd|rDLG").OptionButtons("OpB31")
    getJunFlg = IIf(PairPara.flgOrderEffect = 1, xlOn, xlOff)
End Function
'
'H14.6.5 LSQ add
Private Function getMethodFlg() As Long
    getMethodFlg = val(Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Cells(3, 4).Value)
End Function
'
'H14.6.6 LSQ mdf
Private Function chkHikakuSu() As Boolean
    Dim HiKaKuSu As Long, MethodFlg As Long
    Dim xmin As Long, xmax As Long
    
    chkHikakuSu = True  'Init
    
    HiKaKuSu = getHikakuSu()
    MethodFlg = getMethodFlg()
    
    xmax = 20
    xmin = IIf(MethodFlg = 1, 2, 2)
    
    'Range Check
    If (HiKaKuSu < xmin Or HiKaKuSu > xmax) Then
        Call MsgBox("|fffd||752||fffd||142||fffd||fffd||fffd||fffd|r|fffd||38f||6c1|i|fffd||fffd||fffd|i|fffd|j|fffd||fffd||fffd||341|A" & xmin & "|fffd|`" & xmax & "|fffd||142||fffd||fffd|B", vbOKOnly, GdlgTitle)
        chkHikakuSu = False
    End If
    '
End Function
'
'H14.6.5 LSQ add
Private Sub clearGamen()
    Workbooks(BKNAME_|fffd||fffd||fffd||fffd|).Worksheets(KSKGM).Activate
    Range("C35:F414").Clear
End Sub

Sub HideGamen()
    On Error Resume Next
    Windows(BKNAME_|fffd||fffd||fffd||fffd|).Visible = False
    On Error GoTo 0
End Sub
'=== end of file ===

Attribute VB_Name = "mdlPair_Tai"
'=======================================================
'2010.12
'=======================================================
Option Explicit
Option Private Module

Type PAIR_LINK
    WrkSht As Worksheet
    DataRge As String
    OutRge As String
    CateNum As Long
    smpnum As Long
    flgExcept As Long
    flgSDSort As Long
    flgOrderEffect As Long
    pCode As Long
    ClsMark As Long
    RawDataRge As String
    SmpNameRge As String
    ValidNum As Long
End Type

Type STONE_PARA
    DataRge As String
    OutRge As String
End Type

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function ittui_XL Lib "KKS_SubJ_64.DLL" () As Integer
    Declare PtrSafe Function stone_XL Lib "KKS_SubJ_64.DLL" Alias "tone_XL" (ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function stone_XL_Vba Lib "KKS_SubJ_64.DLL" Alias "tone_XL_Vba" (vbapara As STONE_PARA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function pu_XL Lib "KKS_SubJ_64.DLL" () As Long
    Declare PtrSafe Function zhong_XL Lib "KKS_SubJ_64.DLL" () As Long
    Declare PtrSafe Function fang_XL Lib "KKS_SubJ_64.DLL" () As Long
    #Else
    Declare PtrSafe Function ittui_XL Lib "KKS_SubJ.DLL" () As Integer
    Declare PtrSafe Function stone_XL Lib "KKS_SubJ.DLL" Alias "tone_XL" (ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function stone_XL_Vba Lib "KKS_SubJ.DLL" Alias "tone_XL_Vba" (vbapara As STONE_PARA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare PtrSafe Function pu_XL Lib "KKS_SubJ.DLL" () As Long
    Declare PtrSafe Function zhong_XL Lib "KKS_SubJ.DLL" () As Long
    Declare PtrSafe Function fang_XL Lib "KKS_SubJ.DLL" () As Long
    #End If
#Else
    #If Win64 Then
    Declare Function ittui_XL Lib "KKS_SubJ_64.DLL" () As Integer
    Declare Function stone_XL Lib "KKS_SubJ_64.DLL" Alias "tone_XL" (ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare Function stone_XL_Vba Lib "KKS_SubJ_64.DLL" Alias "tone_XL_Vba" (vbapara As STONE_PARA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare Function pu_XL Lib "KKS_SubJ_64.DLL" () As Long
    Declare Function zhong_XL Lib "KKS_SubJ_64.DLL" () As Long
    Declare Function fang_XL Lib "KKS_SubJ_64.DLL" () As Long
    #Else
    Declare Function ittui_XL Lib "KKS_SubJ.DLL" () As Integer
    Declare Function stone_XL Lib "KKS_SubJ.DLL" Alias "tone_XL" (ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare Function stone_XL_Vba Lib "KKS_SubJ.DLL" Alias "tone_XL_Vba" (vbapara As STONE_PARA, ByVal ExcelVerNo As Long, grp() As VBAGRAPH) As Long
    Declare Function pu_XL Lib "KKS_SubJ.DLL" () As Long
    Declare Function zhong_XL Lib "KKS_SubJ.DLL" () As Long
    Declare Function fang_XL Lib "KKS_SubJ.DLL" () As Long
    #End If
#End If

Public PairPara As PAIR_LINK
Public Bk_PairPara As PAIR_LINK

'|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|
Sub nu_KKS_IttSum_stn_1P01()
    Dim rtn As Integer, i As Integer
    Dim ExcelVer As Long
    Dim VbaGrp(1 To 1) As VBAGRAPH
    Dim actCell As Range
    ExcelVer = 12
    Call InitGrpAry(VbaGrp)
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = stone_XL(ExcelVer, VbaGrp)
    If rtn = 0 And ExcelVer >= 12 Then
        Set actCell = ActiveCell
        If ConvToBSTR(VbaGrp(1)) Then
            If VbaGrp(1).Type > 0 Then
                Call DrawStoneGrp(VbaGrp(1).sheetName, VbaGrp(1).grpOut, VbaGrp(1).grpData, VbaGrp(1).grpPara)
            End If
        End If
        actCell.Worksheet.Activate
        actCell.Select
    End If
End Sub

Sub KKS_IttSum_stn_1P01()
    Dim rtn As Integer, i As Integer
    Dim ExcelVer As Long
    Dim VbaGrp(1 To 1) As VBAGRAPH
    Dim actCell As Range
    Dim adlgin As STONE_PARA
    Dim ActShtObj As Worksheet, tmpsht As Worksheet
    Dim dlg As Object
    Dim rdata As Range, rout As Range
    On Error Resume Next
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set ActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set dlg = ThisWorkbook.DialogSheets("DlgStone")

    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    ActShtObj.Activate
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
       
        adlgin.DataRge = Trim((dlg.EditBoxes("edtDataRge").text))
        adlgin.OutRge = Trim((dlg.EditBoxes("edtOutRge").text))
        Set rdata = Range(adlgin.DataRge)
        Set rout = Range(adlgin.OutRge)
        If rdata Is Nothing Or rout Is Nothing Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        
        adlgin.DataRge = toXlRCstr(adlgin.DataRge)
        adlgin.OutRge = toXlRCstr(adlgin.OutRge)
        
        ExcelVer = 12
        Call InitGrpAry(VbaGrp)
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = stone_XL_Vba(adlgin, ExcelVer, VbaGrp)
        If rtn = 0 And ExcelVer >= 12 Then
            Set actCell = ActiveCell
            If ConvToBSTR(VbaGrp(1)) Then
                If VbaGrp(1).Type > 0 Then
                    Call DrawStoneGrp(VbaGrp(1).sheetName, VbaGrp(1).grpOut, VbaGrp(1).grpData, VbaGrp(1).grpPara)
                End If
            End If
            actCell.Worksheet.Activate
            actCell.Select
        End If
    Else
        Call RestoreDlg(dlg)
    End If
    On Error GoTo 0
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd||fffd||fffd|@)
Sub KKS_IttSum_sfe()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = ittui_XL()
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Y|fffd||315||3d6|@)
Sub KKS_IttSum_pu()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = pu_XL()
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|F|fffd||fffd||315||3d6|@)
Sub KKS_IttSum_fang()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = fang_XL()
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)
Sub KKS_IttSum_zhong()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = zhong_XL()
End Sub

Function bIsSettingChanged() As Boolean
    Dim tmpRge As Range
    Dim v As Variant
    bIsSettingChanged = True
    Set tmpRge = ThisWorkbook.Worksheets("TempSht2").Range("A2:A9")
    tmpRge.NumberFormat = "@"
    v = tmpRge.Value2
    With PairPara
        If .pCode <> val(v(1, 1)) Then Exit Function
        If .RawDataRge <> Trim(v(2, 1)) Then Exit Function
        If .CateNum <> val(v(3, 1)) Then Exit Function
        If .ClsMark <> val(v(4, 1)) Then Exit Function
        If .flgExcept <> val(v(5, 1)) Then Exit Function
        If .pCode = 1 And .flgOrderEffect <> val(v(6, 1)) Then Exit Function
    End With
    bIsSettingChanged = False
End Function

Private Function BackupSetting(ByVal bChanged As Boolean)
    Dim tmpRge As Range
    Dim v As Variant
    If bChanged Then
        ThisWorkbook.Worksheets("TempSht2").Range("A1") = 1
        Set tmpRge = ThisWorkbook.Worksheets("TempSht2").Range("A2:A8")
        tmpRge.NumberFormat = "@"
        v = tmpRge.Value2
        With PairPara
            v(1, 1) = .pCode
            v(2, 1) = "'" & .RawDataRge
            v(3, 1) = .CateNum
            v(4, 1) = .ClsMark
            v(5, 1) = .flgExcept
            v(6, 1) = .flgOrderEffect
            tmpRge.Value2 = v
        End With
    Else
        ThisWorkbook.Worksheets("TempSht2").Range("A1") = 0
    End If
End Function

Sub GetPairLinkDetail()
    Dim i As Integer
    Dim rtn As Integer
    Dim pCode As Long, CateNum As Long
    Dim dlg As DialogSheet
    Dim rgeVar As Range
    Dim tmpsht As Worksheet
    On Error Resume Next
    PairPara.DataRge = Trim(frmPairLink.DataRge.text)
    PairPara.CateNum = IIf(frmPairLink.optStage3.Value = True, 3, _
                        IIf(frmPairLink.optStage5.Value = True, 5, _
                        IIf(frmPairLink.optStage7.Value = True, 7, 9)))                      '2011.02.16 mdf: val(frmPairLink.edtCateNum.Text)
    PairPara.flgExcept = IIf(frmPairLink.optExcept.Value = True, 1, 2)
    PairPara.flgSDSort = IIf(frmPairLink.optSortUp.Value = True, 1, 2)
    PairPara.flgOrderEffect = IIf(frmPairLink.optOrderEffectOn.Value = True, 1, 2)
    PairPara.ClsMark = IIf(frmPairLink.optNormalCls.Value = True, 1, 2)                     '2011.02.16 added
    If frmPairLink.chkDisplay.Value = True Then
        PairPara.SmpNameRge = Trim(frmPairLink.SmpNameRge.text)
    Else
        PairPara.SmpNameRge = vbNullString
    End If
    Set PairPara.WrkSht = Range(PairPara.DataRge).Worksheet
    If PairPara.pCode = 5 Then
        PairPara.CateNum = 2
    End If
    
    PairPara.RawDataRge = PairPara.DataRge      '2011.03.18 added
    BackupSetting bIsSettingChanged             '2011.03.18 added
    
    Set tmpsht = handlePairLinkData
    If tmpsht Is Nothing Then
        Exit Sub
    End If
    frmPairLink.Hide
    DoEvents
    If PairPara.pCode = 5 Then
        Call DispIttuiGamen5
    ElseIf PairPara.pCode = 1 Then
        Call DispIttuiGamen1
    ElseIf PairPara.pCode = 2 Then
        Call DispIttuiGamen2
    ElseIf PairPara.pCode = 3 Then
        Call DispIttuiGamen3
    ElseIf PairPara.pCode = 4 Then
        Call DispIttuiGamen4
    End If
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
End Sub

Private Function bInvalidData(pairvar As Variant) As Boolean
    Dim i As Long
    If Not IsArray(pairvar) Then
        If pairvar < 1 Or pairvar > PairPara.CateNum Then
            bInvalidData = True
            Exit Function
        End If
    Else
        For i = LBound(pairvar, 2) To UBound(pairvar, 2)
            If pairvar(1, i) < 1 Or pairvar(1, i) > PairPara.CateNum Then
                bInvalidData = True
                Exit Function
            End If
        Next i
    End If
    bInvalidData = False
End Function

Private Function handlePairLinkData() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim rgeVar As Range, rge As Range, tmpRge As Range
    Dim tmpsht As Worksheet
    Dim pairvar As Variant
    Dim itemnum As Long, smpnum As Long
    Dim msgStr As String
    Dim v As Variant
    
    On Error Resume Next
    Set rgeVar = Range(PairPara.DataRge)
    pairvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (PairPara.CateNum < 2 Or PairPara.CateNum > 9) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")

    itemnum = rgeVar.Columns.Count
    smpnum = rgeVar.Rows.Count
    
    Set tmpRge = PasteRange(rgeVar, rge, xlPasteValues)
    
    '2011.02.16 added
    If PairPara.pCode = 5 Then
        'If PairPara.ClsMark = 1 Then
            v = tmpRge.Value
            For i = 2 To smpnum
                For j = 1 To itemnum
                    If Not IsEmpty(v(i, j)) Then
                        If Not IsNumeric(v(i, j)) Then
                            If PairPara.flgExcept = 2 Then
                                Application.DisplayAlerts = False
                                tmpsht.Delete
                                Application.DisplayAlerts = True
                                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||348||34a|O|fffd||242||fffd||fffd||90a9||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||702||fffd||702||fffd||fffd|B"
                                Set handlePairLinkData = Nothing
                                Exit Function
                            End If
                        End If
                        If v(i, j) <> 1 Then
                            If v(i, j) = 0 Or v(i, j) = -1 Then
                                v(i, j) = 2
                            Else
                                v(i, j) = vbNullString
                            End If
                        End If
                    Else
                        v(i, j) = vbNullString
                    End If
                Next j
            Next i
            tmpRge.Value = v
        'End If
    Else
        If PairPara.ClsMark = 2 Then        '...,-2,-1,0,1,2,...
            k = PairPara.CateNum \ 2
            v = tmpRge.Value
            For i = 2 To smpnum
                For j = 1 To itemnum
                    If v(i, j) <= k And v(i, j) >= -k Then
                        If val(v(i, j)) = CInt(v(i, j)) Then
                            If PairPara.pCode <> 5 Then
                                v(i, j) = v(i, j) + k + 1
                            Else
                                v(i, j) = IIf(v(i, j) = 1, 1, 2)
                            End If
                        Else
                            v(i, j) = vbNullString
                        End If
                    Else
                        v(i, j) = vbNullString
                    End If
                Next j
            Next i
            tmpRge.Value = v
        End If
    End If
    'end add
    
    PairPara.DataRge = Range(rge(1, 1), rge(smpnum, itemnum)).Address

    Set rge = Range(PairPara.DataRge)
    
    For i = rge.Rows.Count To 2 Step -1
        pairvar = rge.Rows(i)
        If Application.WorksheetFunction.Count(pairvar) <> rge.Columns.Count Or bInvalidData(pairvar) Then
            If PairPara.flgExcept = 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||348||34a|O|fffd||242||fffd||fffd||90a9||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||702||fffd||702||fffd||fffd|B"
                Set handlePairLinkData = Nothing
                Exit Function
            End If
        End If
    Next i
    
    If smpnum < 2 Then
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||202||fffd|", vbCritical Or vbOKOnly
        Set handlePairLinkData = Nothing
        Exit Function
    End If
    
    PairPara.smpnum = smpnum
    
    Set rge = tmpsht.Range("$A$1")
    
    PairPara.DataRge = Range(rge(1, 1), rge(smpnum, itemnum)).Address
    PairPara.DataRge = tmpsht.name & "!" & PairPara.DataRge
    
    Set handlePairLinkData = tmpsht
    On Error GoTo 0
End Function

Private Sub KKS_IttSmp_Comm(ByVal pCode As Long)
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim DataRge As String
    Dim tmpsht As Worksheet
    Dim CodeName As Variant
    CodeName = Array("|fffd||fffd||fffd|@", "|fffd||fffd||fffd||fffd||fffd||315||3d6|@", "|fffd|F|fffd||fffd||315||3d6|@", "|fffd|Y|fffd||315||3d6|@", "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|")
    '11.6.13 LSQ mdf; old:
    'CodeName = Array("|fffd||fffd||394||fffd|r|fffd|@(|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)", "|fffd||fffd||394||fffd|r|fffd|@(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)", "|fffd||fffd||394||fffd|r|fffd|@(|fffd|F|fffd||fffd||315||3d6|@)", "|fffd||fffd||394||fffd|r|fffd|@(|fffd|Y|fffd||315||3d6|@)", "|fffd||fffd||394||fffd|r|fffd|@(|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)")
    PairPara.pCode = pCode
    frmPairLink.Caption = CodeName(pCode - 1)
    frmPairLink.Show
End Sub

Sub KKS_IttSmp_stn_1P01()
    KKS_IttSmp_Comm 5
End Sub

Sub KKS_IttSmp_zhong_1P01()
    KKS_IttSmp_Comm 2
End Sub

Sub KKS_IttSmp_pu_1P01()
    KKS_IttSmp_Comm 4
End Sub

Sub KKS_IttSmp_fang_1P01()
    KKS_IttSmp_Comm 3
End Sub

Sub KKS_IttSmp_sfe_1P01()
    KKS_IttSmp_Comm 1
End Sub


'=== EOF ===


Attribute VB_Name = "mdlPls"
Option Private Module
Option Explicit
    
Type PLS_TBL
    FileName As String * 256
    objRge As String * 256
    varRge As String * 256
    OutRge As String * 256
    namerge As String * 256
    bExcept As Long
    bSmpName As Long
    LatentNum As Long
    bPredict As Long
    bSingle As Long
End Type

Private Const m_XmlFile As String = "\THRV6_PLS.XML"
Private Const m_XslFile As String = "\pls.xsl"
Private m_varselect As String

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function pls_vba Lib "SSS32PLS_64.dll" (pls As PLS_TBL) As Integer
    #Else
    Declare PtrSafe Function pls_vba Lib "SSS32PLS.dll" (pls As PLS_TBL) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function pls_vba Lib "SSS32PLS_64.dll" (pls As PLS_TBL) As Integer
    #Else
    Declare Function pls_vba Lib "SSS32PLS.dll" (pls As PLS_TBL) As Integer
    #End If
#End If

Private Function handlePlsData(PlsTbl As PLS_TBL) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range, rgeCateName As Range
    Dim tmpsht As Worksheet, shtout As Worksheet
    Dim plsobj As Variant, plsvar As Variant
    Dim plsVarSel As Variant
    Dim cateNameRow As Long, smpnum As Long
    Dim msgStr As String
    Dim varcol As Long
    
    On Error Resume Next
    Set rgeObj = Range(PlsTbl.objRge)
    Set rgeVar = Range(PlsTbl.varRge)
    Set rgeSmpName = Range(PlsTbl.namerge)
    plsvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Or (PlsTbl.bSmpName = 1 And rgeSmpName Is Nothing) Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set shtout = rgeVar.Worksheet.Parent.Sheets.Add
    PlsTbl.OutRge = "'[" & shtout.Parent.name & "]" & shtout.name & "'!$A$1" & vbNullChar
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$2")
    If PlsTbl.bSmpName = 1 Then
        smpnum = rgeSmpName.Rows.Count
        Call PasteRange(rgeSmpName, rge, xlPasteValues)
    Else
        smpnum = IIf(rgeObj.Rows.Count > rgeVar.Rows.Count, rgeObj.Rows.Count, rgeVar.Rows.Count)
        For i = 1 To smpnum
            rge(i, 1) = i
        Next i
    End If
    
    Set rge = tmpsht.Range("$B$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    varcol = rgeObj.Columns.Count
    If m_varselect <> "0" And Trim(m_varselect) <> vbNullString Then
        plsVarSel = Split(m_varselect, ",")
    Else
        ReDim plsVarSel(0 To rgeVar.Columns.Count) As Long
        plsVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            plsVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To plsVarSel(0)
            rge(i, j + varcol) = plsvar(i, plsVarSel(j) + 1) 'rgeVar(i, plsVarSel(j) + 1)
        Next j
    Next i
    PlsTbl.varRge = Range(rge(1, varcol + 1), rge(rgeVar.Rows.Count, plsVarSel(0) + varcol)).Address & vbNullChar

    Set rge = Range(PlsTbl.varRge)
    If rge.Columns.Count > 200 Then
        MsgBox "|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||30d||151||fffd|l|fffd||fffd|200|fffd||142||fffd||fffd|B", vbInformation
        Application.DisplayAlerts = False
        shtout.Delete
        tmpsht.Delete
        Application.DisplayAlerts = True
        Set handlePlsData = Nothing
        Exit Function
    End If
    smpnum = rge.Rows.Count
    If rge.Columns.Count < 1 Or plsVarSel(0) < 1 Then
        Application.DisplayAlerts = False
        shtout.Delete
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd||3d0||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||182||fffd||fffd|P|fffd||91|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Set handlePlsData = Nothing
        Exit Function
    End If
    If smpnum < rgeObj.Rows.Count Then smpnum = rgeObj.Rows.Count
    If smpnum > 15001 Then
        MsgBox "T|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||30d||151||fffd|l|fffd||fffd|15000|fffd||142||fffd||fffd|B", vbInformation
        Application.DisplayAlerts = False
        shtout.Delete
        tmpsht.Delete
        Application.DisplayAlerts = True
        Set handlePlsData = Nothing
        Exit Function
    End If
    For i = smpnum To 2 Step -1
        If Not IsNumeric(rgeObj(i, 1)) Or IsEmpty(rgeObj(i, 1)) Then
            If PlsTbl.bExcept Then
                tmpsht.Rows(rgeObj(i, 1).row).Delete
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                shtout.Delete
                tmpsht.Delete
                Application.DisplayAlerts = True
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Set handlePlsData = Nothing
                Exit Function
            End If
       Else
            For j = 1 To rge.Columns.Count
                If Not IsNumeric(rge(i, j)) Or IsEmpty(rge(i, j)) Then
                    If PlsTbl.bExcept Then
                        tmpsht.Rows(rgeObj(i, 1).row).Delete
                        smpnum = smpnum - 1
                    Else
                        Application.DisplayAlerts = False
                        shtout.Delete
                        tmpsht.Delete
                        Application.DisplayAlerts = True
                        MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                        Set handlePlsData = Nothing
                        Exit Function
                    End If
            End If
            Next j
       End If
    Next i
    
    If smpnum < 2 Then
        Application.DisplayAlerts = False
        shtout.Delete
        tmpsht.Delete
        Application.DisplayAlerts = True
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||242||34c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd| ", vbInformation
        Set handlePlsData = Nothing
        Exit Function
    End If
    
    Set rge = tmpsht.Range("$B$1")
    
    PlsTbl.objRge = Range(rge(1, 1), rge(smpnum, varcol)).Address & vbNullChar
    PlsTbl.objRge = "'[" & tmpsht.Parent.name & "]" & tmpsht.name & "'!" & PlsTbl.objRge
    
    PlsTbl.varRge = Range(rge(1, varcol + 1), rge(smpnum, plsVarSel(0) + varcol)).Address & vbNullChar
    PlsTbl.varRge = "'[" & tmpsht.Parent.name & "]" & tmpsht.name & "'!" & PlsTbl.varRge
    
    Set rge = tmpsht.Range("$A$2")
    PlsTbl.namerge = Range(rge(1, 1), rge(smpnum, 1)).Address & vbNullChar
    PlsTbl.namerge = "'[" & tmpsht.Parent.name & "]" & tmpsht.name & "'!" & PlsTbl.namerge
    PlsTbl.bSmpName = 1
    
    Set handlePlsData = tmpsht
    On Error GoTo 0
End Function

Private Sub PlsGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgPls")
    m_varselect = GetVarSel(dlg, "edtVarRge", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|")
End Sub

Private Sub OutputPLS(ByVal bSingleLat As Boolean, ByVal objRge As Range, ByVal varRge As Range, ByVal namerge As Range)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim objVar As Variant, varVar As Variant, nameVar As Variant
    Dim outPls As New ClsPls
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    xslFName = ThisWorkbook.Path & m_XslFile
    If Not bFileExist(xslFName) Then Exit Sub
    objVar = objRge.Value
    varVar = varRge.Value
    nameVar = namerge.Value
    Call outPls.Initialize(bSingleLat, fname, xslFName)
    Call outPls.SetTitleSource(objVar, varVar, nameVar)
    Call outPls.OutputPLS(Range("B2"))
    Set outPls = Nothing
End Sub

Private Sub SetPlsData(pls As PLS_TBL)
    Dim myinfo As Info, RecordNumber
    Dim Fields() As Field
    Dim i, j
    Dim v() As Variant
    Dim l As Long, D As Double
    Dim vv As Variant
    Dim fHandle As Long
    Dim objRge As Range, varRge As Range, namerge As Range
    Dim tmpBytes(1 To 1024) As Byte
    l = 1
    D = 0.1
    fHandle = FreeFile
    Open pls.FileName For Binary Access Write As #fHandle
    Set objRge = Range(pls.objRge)
    Set varRge = Range(pls.varRge)
    Set namerge = Range(pls.namerge)

    myinfo.rowNum = objRge.Rows.Count - 1
    myinfo.colNum = varRge.Columns.Count + 2
    
    ReDim Fields(1 To myinfo.colNum)
    Fields(1).ID = 1
    Call CopyStrToBytes(Fields(1).FieldName, "Name", 20)
    Fields(1).Type = 4
    Fields(1).ByteLen = 1024
    Fields(1).smpnum = myinfo.rowNum
    Fields(1).CateNum = 0
    For i = 1 To 500
        Fields(1).Categories(i).ID = i
    Next i
    pls.namerge = "R2C1:R" & myinfo.rowNum & "C1" & vbNullChar
    Fields(2).ID = 2
    Call CopyStrToBytes(Fields(2).FieldName, objRge(1, 1), 20)
    Fields(2).Type = 2
    Fields(2).ByteLen = LenB(D)
    Fields(2).smpnum = myinfo.rowNum
    Fields(2).CateNum = 0
    pls.objRge = "R2C2:R" & myinfo.rowNum + 1 & "C2" & vbNullChar
    For i = 1 To varRge.Columns.Count
        Fields(i + 2).ID = i + 2
        Call CopyStrToBytes(Fields(i + 2).FieldName, varRge(1, i), 20)
        Fields(i + 2).Type = 2
        Fields(i + 2).ByteLen = LenB(D)
        Fields(i + 2).smpnum = myinfo.rowNum
        Fields(i + 2).CateNum = 0
    Next i
    pls.varRge = "R2C3:R" & myinfo.rowNum + 1 & "C" & varRge.Columns.Count + 2 & vbNullChar
    myinfo.HeadBytes = LenB(myinfo)
    myinfo.FieldBytes = 0
    For i = 1 To myinfo.colNum
        myinfo.FieldBytes = myinfo.FieldBytes + Fields(i).ByteLen
    Next i
    Put #fHandle, , myinfo
    Put #fHandle, , Fields
    For i = 1 To myinfo.rowNum
        Put #fHandle, , StrToStrAry(namerge(i, 1), 1024)
        Put #fHandle, , CDbl(objRge(i + 1, 1))
        For j = 1 To varRge.Columns.Count
            Put #fHandle, , CDbl(varRge(i + 1, j))
        Next j
    Next i
    Close #fHandle
End Sub

Sub nu_KKS_THR6_PLS()
    Dim rtn As Integer
    Dim titleStr As String
    Dim nExcelVer As Integer
    Dim tmpsht As Worksheet
    Dim pls As PLS_TBL
    Dim dlg As DialogSheet
    Dim actSht As Worksheet
    Dim rge As Range
    Dim objRge As String, varRge As String, namerge As String
    
    Set dlg = ThisWorkbook.DialogSheets("DlgPls")
    dlg.Buttons("btnVarSel").OnAction = "PlsGetVarSelect"
    pls.FileName = GetMyDocPathName() & "\PlsData.dat" & vbNullChar
redisp:
    Set actSht = ActiveSheet
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        pls.objRge = (dlg.EditBoxes("edtObjRge").text) & vbNullChar
        pls.varRge = (dlg.EditBoxes("edtVarRge").text) & vbNullChar
        pls.namerge = (dlg.EditBoxes("edtSmpName").text) & vbNullChar
        pls.bSmpName = IIf(dlg.OptionButtons("optSmpName").Value = xlOn, 1, 0)
        pls.LatentNum = val(dlg.EditBoxes("edtLatentNum").text)
        pls.bExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 0)
        pls.bPredict = IIf(dlg.CheckBoxes("chkPredictErr").Value = xlOn, 1, 0)
         
        Set tmpsht = handlePlsData(pls)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        Set rge = Range(pls.varRge)
        If dlg.OptionButtons("optMax").Value = xlOn Then
            pls.LatentNum = rge.Columns.Count
        End If
        
        If pls.LatentNum < 1 Or pls.LatentNum > rge.Columns.Count Then
            MsgBox "|fffd||fffd||fffd||755||3d0||fffd||fffd||310||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Application.DisplayAlerts = False
            tmpsht.Delete
            Set rge = Range(pls.OutRge)
            rge.Worksheet.Delete
            Application.DisplayAlerts = True
            GoTo redisp
        End If
        
        objRge = toXlRCstr(pls.objRge) & vbNullChar
        varRge = toXlRCstr(pls.varRge) & vbNullChar
        namerge = toXlRCstr(pls.namerge) & vbNullChar
        SetPlsData pls
        
        'pls.objRge = toXlRCstr(pls.objRge) & vbNullChar
        'pls.varRge = toXlRCstr(pls.varRge) & vbNullChar
        'pls.OutRge = toXlRCstr(pls.OutRge) & vbNullChar
        'pls.nameRge = toXlRCstr(pls.nameRge) & vbNullChar
        pls.bSingle = IIf(dlg.OptionButtons("optMax").Value = xlOn, 0, 1)
        actSht.Activate
        
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = pls_vba(pls)
        If rtn = 0 Then
            OutputPLS IIf(dlg.OptionButtons("optMax").Value = xlOn, False, True), Range(toXlA1str(objRge)), Range(toXlA1str(varRge)), Range(toXlA1str(namerge))
        End If
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub




Attribute VB_Name = "mdlSeparation"
'=======================================================
' SSS_SRK Ver3.0 (Data Separation)
'
' 2008.07 WZH
'=======================================================
Option Explicit

Private Const MAXITEMNUM As Integer = 20
Private Const MAXCATENUM As Integer = 200
Private Const MINCLSSMPNUM As Integer = 2

Private Const ERR_NULLOUT As String = "The output range should not be empty"
Private Const ERR_OVERITEMNUM As String = "The count of items is over "
Private Const ERR_OVERCATENUM As String = "The count of categories is over "
Private Const ERR_NUMDATA As String = "Non-numeric data exists"
Private Const ERR_CLSSMPNUM As String = "The number of sample in each class should be at least "
Private Const ERR_INPUTVAL  As String = "Incorrect input value "
Private Const ERR_INTERNAL As String = "Error occurred "

Type DataSep_T
    rgein As Range
    rgeout As Range
    bDataTitle As Boolean
    bOutInvalid As Boolean
End Type

Private Sub SetRangeBorder(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub

'main entrance for procedure
Sub nu_KKS_THR6_DATAAPART()
    Dim DataSep As DataSep_T
    Dim rge As Range, rgeTitle As Range, rgeSmpName As Range
    Dim itemCnt As Long, smpCnt As Long
    Dim i As Long, j As Long
    Dim dlg As DialogSheet
    Dim data As Variant
    Dim effectivedata As Collection
    Dim invaliddata As Collection
    Dim scol As Long
    Dim bInvalid As Boolean
    Dim Ret As Boolean, bOutNewSht As Boolean, newSht As Worksheet
    Dim itmAmt() As Integer
    
    On Error Resume Next
    Set dlg = ThisWorkbook.Sheets("DlgSeparation")
redisp:
    Set DataSep.rgein = Nothing
    Set DataSep.rgeout = Nothing
    
    Call SaveDlg(dlg)   '08.12.29 LSQ
    Ret = dlg.Show
    If Ret Then
        Call SaveDlg(dlg)
        Set DataSep.rgein = Range(dlg.EditBoxes("RgeDataIn").text)
        Set DataSep.rgeout = Range(dlg.EditBoxes("RgeDataOut").text)
        bOutNewSht = (dlg.OptionButtons("optOutNewSht") = xlOn) '09.1.15 LSQ add OutNewSht
        If bOutNewSht Then
            Set newSht = ActiveWorkbook.Worksheets.Add
            Set DataSep.rgeout = newSht.Range("A2")
        End If
        DataSep.bDataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, True, False)
        DataSep.bOutInvalid = IIf(dlg.CheckBoxes("chkOutInvalid").Value = xlOn, True, False)
        If DataSep.rgein Is Nothing Or DataSep.rgeout Is Nothing Then
            GoTo redisp
        End If
        itemCnt = DataSep.rgein.Columns.Count
        smpCnt = DataSep.rgein.Rows.Count
        Set rgeTitle = Range(DataSep.rgein(1, 1), DataSep.rgein(1, itemCnt))
        If DataSep.bDataTitle Then
            Set rge = Range(DataSep.rgein(2, 2), DataSep.rgein(smpCnt, itemCnt))
            Set rgeSmpName = Range(DataSep.rgein(2, 1), DataSep.rgein(smpCnt, 1))
            data = rge.Value
            scol = 1
            itemCnt = itemCnt - 1
        Else
            Set rge = Range(DataSep.rgein(2, 1), DataSep.rgein(smpCnt, itemCnt))
            data = rge.Value
            scol = 1
        End If
        smpCnt = smpCnt - 1
        Set effectivedata = New Collection
        Set invaliddata = New Collection
        bInvalid = False
        For i = 1 To smpCnt
            For j = scol To itemCnt
                If Not IsNumeric(data(i, j)) Or data(i, j) = vbNullString Then
                    invaliddata.Add i
                    bInvalid = True
                    Exit For
                End If
            Next j
            If Not bInvalid Then
                effectivedata.Add i
            End If
            bInvalid = False
        Next i
        Set rge = DataSep.rgeout(1, 1)
        rge = "|fffd||fffd||fffd|L|fffd||fffd||fffd||5368e||482||196||fffd||fffd||fffd||fffd||5368e||482||315||fffd||fffd||fffd|"
        rge.Font.FontStyle = "BOLD"
        Set rge = rge.offset(1, 0)
        rge(2, 1) = "|fffd|L|fffd||fffd|"
        rge(3, 1) = "|fffd||fffd||fffd||fffd|"
        rge(4, 1) = "|fffd||fffd||fffd|v"
        rge(1, 2) = "n"
        rge(1, 3) = "%"
        rge(2, 2) = effectivedata.Count
        rge(3, 2) = invaliddata.Count
        rge(2, 3) = 1# * effectivedata.Count / smpCnt
        rge(2, 3).NumberFormatLocal = "0.0%"
        rge(3, 3) = 1# * invaliddata.Count / smpCnt
        rge(3, 3).NumberFormatLocal = "0.0%"
        rge(4, 2) = smpCnt
        rge(4, 3) = 100#
        Call SetRangeBorder(Range(rge(1, 1), rge(4, 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(1, 2), rge(4, 2)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(1, 3), rge(4, 3)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(1, 1), rge(1, 3)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(4, 1), rge(4, 3)), xlThin, xlThin, xlThin, xlThin)
        Set rge = rge(6, 1)
        rge(1, 1) = "|fffd||fffd||fffd|L|fffd||fffd||fffd||5368e||fffd|"
        rge(1, itemCnt + 1) = "n=" & effectivedata.Count
        Set rge = rge.offset(1, 0)
        If DataSep.bDataTitle Then
            For i = 1 To itemCnt
                rge(1, i + 1) = rgeTitle(1, i + 1)
            Next i
            For i = 1 To effectivedata.Count
                rge(i + 1, 1) = rgeSmpName(effectivedata.Item(i), 1)
            Next i
        Else
            For i = 1 To itemCnt
                rge(1, i + 1) = rgeTitle(1, i)
            Next i
            For i = 1 To effectivedata.Count
                rge(i + 1, 1) = effectivedata.Item(i)
            Next i
        End If
        For i = 1 To effectivedata.Count
            For j = 1 To itemCnt
                rge(i + 1, j + 1) = data(effectivedata.Item(i), j)
            Next j
        Next i
        For i = 1 To itemCnt + 1
            Call SetRangeBorder(Range(rge(1, i), rge(effectivedata.Count + 1, i)), xlHairline, xlHairline, xlHairline, xlHairline)
        Next i
        Call SetRangeBorder(Range(rge(1, 1), rge(1, itemCnt + 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(1, 1), rge(effectivedata.Count + 1, 1)), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(Range(rge(1, 1), rge(effectivedata.Count + 1, itemCnt + 1)), xlThin, xlThin, xlThin, xlThin)
        If DataSep.bOutInvalid Then
            Set rge = rge(effectivedata.Count + 3, 1)
            rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||5368e||fffd|"
            rge(1, itemCnt + 1) = "n=" & invaliddata.Count
            Set rge = rge.offset(1, 0)
            ReDim itmAmt(1 To itemCnt)
            If DataSep.bDataTitle Then
                For i = 1 To itemCnt
                    rge(1, i + 1) = rgeTitle(1, i + 1)
                Next i
                For i = 1 To invaliddata.Count
                    rge(i + 1, 1) = rgeSmpName(invaliddata.Item(i), 1)
                Next i
            Else
                For i = 1 To itemCnt
                    rge(1, i + 1) = rgeTitle(1, i)
                Next i
                For i = 1 To invaliddata.Count
                    rge(i + 1, 1) = invaliddata.Item(i)
                Next i
            End If
            For i = 1 To invaliddata.Count
                For j = scol To itemCnt
                    rge(i + 1, j + 1) = data(invaliddata.Item(i), j)
                    If data(invaliddata.Item(i), j) = vbNullString Or Not IsNumeric(data(invaliddata.Item(i), j)) Then
                        rge(i + 1, j + 1).Interior.colorIndex = 44
                        itmAmt(j - scol + 1) = itmAmt(j - scol + 1) + 1
                    End If
                Next j
            Next i
            j = invaliddata.Count
            rge(j + 2, scol) = "|fffd||fffd||fffd||fffd||fffd||53690||fffd|"
            rge(j + 3, scol) = "|fffd||fffd||fffd||fffd||fffd||5368a||fffd||fffd||fffd|"
            For i = scol To itemCnt
                rge(j + 2, i + 1) = itmAmt(i - scol + 1)
                rge(j + 3, i + 1) = itmAmt(i - scol + 1) / j
                rge(j + 3, i + 1).NumberFormatLocal = "0.0%"
            Next i
            ReDim itmAmt(0)
            For i = scol To itemCnt + 1
                Call SetRangeBorder(Range(rge(1, i), rge(invaliddata.Count + 3, i)), xlHairline, xlHairline, xlHairline, xlHairline)
            Next i
            Call SetRangeBorder(Range(rge(1, 1), rge(1, itemCnt + 1)), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(Range(rge(1, 1), rge(invaliddata.Count + 1, 1)), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(Range(rge(1, 1), rge(invaliddata.Count + 1, itemCnt + 1)), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(Range(rge(invaliddata.Count + 2, 1), rge(invaliddata.Count + 3, 1)), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(Range(rge(invaliddata.Count + 2, 1), rge(invaliddata.Count + 3, itemCnt + 1)), xlThin, xlThin, xlThin, xlThin)
        End If
        DataSep.rgeout(1, 1).Select
        Set data = Nothing
        Set effectivedata = Nothing
        Set invaliddata = Nothing
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "mdlVbaGrp"
'=======================================================
' Common interface for getting graphic data from C
'
' 2010.11 LSQ
'=======================================================
Option Explicit

Private Const BUF_SIZE As Integer = 256
Public Const maxGrpNum As Integer = 255

Type VBAGRAPH
    no As Long
    Type As Long                    'Graphic type based on each method; 0 is for no graphic
    sheetName As String             'worksheet name of data and output; must set
    grpData As String               'graphic data source              ; must set
    grpOut As String                'graphic output range             ; must set
    grpPara As String               'parameters for drawing a graphic, the division is '&'
End Type

Public G_VbaGrp() As VBAGRAPH

#If VBA7 Then
Private Function GetAddr(ByVal addr As LongPtr) As LongPtr
    GetAddr = addr
End Function

Public Function CallBackPtr() As LongPtr
    CallBackPtr = GetAddr(AddressOf ReallocGrp)
End Function
#Else
Private Function GetAddr(ByVal addr As Long) As Long
    GetAddr = addr
End Function

Public Function CallBackPtr() As Long
    CallBackPtr = GetAddr(AddressOf ReallocGrp)
End Function
#End If

Function ReallocGrp(ByVal n As Long) As Long
    ReDim G_VbaGrp(1 To n)
    Call InitGrpAry(G_VbaGrp)
    ReallocGrp = 0
End Function

'change a string returned by C to a basic string(BSTR)
Private Function CtoBSTR(ByVal strAnsi As String) As String
    Dim tmpStr As String
    On Error Resume Next
    tmpStr = StrConv(strAnsi, vbUnicode)
    If tmpStr <> vbNullString Then
        tmpStr = (Mid(tmpStr, 1, InStr(1, tmpStr, Chr(0)) - 1))
    End If
    CtoBSTR = IIf(err.Number <> 0, vbNullString, tmpStr)
    On Error GoTo 0
End Function

'initialize graphic array
Function InitGrpAry(grp() As VBAGRAPH) As Boolean
    Dim dimen As Long
    Dim i As Long
    On Error Resume Next
    dimen = UBound(grp)
    For i = 1 To dimen
        grp(i).no = 0
        grp(i).Type = 0
        grp(i).sheetName = Space(BUF_SIZE)
        grp(i).grpData = Space(BUF_SIZE)
        grp(i).grpOut = Space(BUF_SIZE)
        grp(i).grpPara = Space(BUF_SIZE)
    Next i
    InitGrpAry = IIf(err.Number = 0, True, False)
    On Error GoTo 0
End Function

'convert all C strings to Basic strings
Function ConvToBSTR(grp As VBAGRAPH) As Boolean
    On Error Resume Next
    grp.sheetName = CtoBSTR(grp.sheetName)
    grp.grpData = CtoBSTR(grp.grpData)
    grp.grpOut = CtoBSTR(grp.grpOut)
    grp.grpPara = CtoBSTR(grp.grpPara)
    ConvToBSTR = grp.sheetName <> vbNullString _
             And grp.grpData <> vbNullString _
             And grp.grpOut <> vbNullString
    On Error GoTo 0
End Function

'=== EOF ===
Attribute VB_Name = "mdlWSMPSR3"
Type LEVELOFS
    Winput As Double
    n As Long
    pval As Double
End Type

Const log2 As Double = 0.693147180559945

Dim bSwEnd As Boolean
Dim bAbort As Boolean

Function Shl(ByVal num As Double, ByVal Places As Long) As Double
    Shl = num * (2 ^ Places)
End Function

Function Shr(ByVal num As Double, ByVal Places As Long) As Double
    Shr = num
    If Places > 0 Then
        Shr = WorksheetFunction.Floor(num / (2 ^ Places), 1)
    End If
End Function

Sub abortProc()
    On Error GoTo MyErrorHandler
    Application.EnableCancelKey = xlErrorHandler
MyErrorHandler:
    If err.Number = 18 Then '18 =User interrupt
        bAbort = True
    End If
End Sub

Function NumberOfSetBits(ByVal x As Double) As Double
     x = x - (Shr(x, 1) And &H55555555)
     x = (x And &H33333333) + (Shr(x, 2) And &H33333333)
     NumberOfSetBits = Shr((((x + Shr(x, 4)) And &HF0F0F0F) * 1# * &H1010101), 24)
End Function

Function GetRankSum(ByVal x As Long, n As Long) As Long
    Dim tmpl As Long, tmpv As Long
    tmpv = 0
    x = x And (2 ^ n - 1)
    'log2 = Log(2)
    While x
        tmpl = x And (-x)
        x = x Xor tmpl
        tmpv = tmpv + Log(tmpl) / log2 + 1
    Wend
    GetRankSum = tmpv
End Function

Sub sub_LevelOfSignificanceWXMPSR(pLevelOfS As LEVELOFS)
    Dim W As Long, MaximalW As Long, NumberOfPossibilities As Double, CountLarger As Long
    Dim i As Long, RankSum As Double, j As Long, n As Long
    Dim p As Double, Winput As Double
    Dim x As Long
    Dim dblShr As Double
    
    'On Error GoTo MyErrorHandler
    'Application.EnableCancelKey = xlErrorHandler
    Winput = pLevelOfS.Winput
    
    n = pLevelOfS.n
    
    '/* Determine Wmax, i.e., work with the largest Rank Sum */
    MaximalW = n * (n + 1) / 2
    If (Winput < MaximalW / 2) Then Winput = MaximalW - Winput
    W = WorksheetFunction.Ceiling(Winput, 1)    '/* Convert to long int */
    'If (W <> Winput) Then W = W + 1 '/* Increase to next full integer */
    
    '/* The total number of possible outcomes is 2**N  */
    If n < pLevelOfS.Winput Then
        NumberOfPossibilities = 2 ^ n
        
        nStart = (Sqr(8# * W + 1) - 1) / 2#
        nStart = 2 ^ nStart
        nStart = WorksheetFunction.Floor(nStart, 1)
        '/* Initialize and loop. The loop-interior will be run 2**N times. */
        CountLarger = 0
        '/* Generate all distributions of sign over ranks as bit-patterns (i). */
        For i = nStart To NumberOfPossibilities - 1
            RankSum = GetRankSum(i, n)
            '/*
            '* Count the number of "samples" that have a Sum of Ranks larger than
            '* or equal to the one found (i.e., >= W).
            '*/
            If (RankSum >= W) Then
                CountLarger = CountLarger + 1
            End If
        Next i
    Else
        NumberOfPossibilities = 2 ^ pLevelOfS.Winput
        
        '/* Initialize and loop. The loop-interior will be run 2**N times. */
        CountLarger = 0
        '/* Generate all distributions of sign over ranks as bit-patterns (i). */
        For i = 0 To NumberOfPossibilities - 1
            RankSum = GetRankSum(i, n)
            '/*
            '* Count the number of "samples" that have a Sum of Ranks larger than
            '* or equal to the one found (i.e., >= W).
            '*/
            If (RankSum <= pLevelOfS.Winput) Then
                CountLarger = CountLarger + 1
            End If
        Next i
        NumberOfPossibilities = 2 ^ n
    End If
    '/*****************************************************************
    '* The level of significance is the number of outcomes with a
    '* sum of ranks equal to or larger than the one found (W)
    '* divided by the total number of possible outcomes.
    '* The level is doubled to get the two-tailed result.
    '******************************************************************/
    p = 2# * CountLarger / NumberOfPossibilities
    '//return p;
ExitSub:
    pLevelOfS.pval = p
    bSwEnd = True
    Application.EnableCancelKey = xlInterrupt
    On Error GoTo 0
    Exit Sub
MyErrorHandler:
    If err.Number = 18 Then '18 =User interrupt
      bAbort = True
    Else
      p = -1
      GoTo ExitSub
    End If
    Resume Next
End Sub

Function LevelOfSignificanceWXMPSR(ByVal Winput As Double, ByVal n As Long) As Double
    Dim p As Double
    Dim ptr As LEVELOFS
    If n > 30 Then
        LevelOfSignificanceWXMPSR = -1
        Exit Function
    End If
    ptr.Winput = Winput
    ptr.n = n
    bSwEnd = False
    bAbort = False
    '_beginthread(sub_LevelOfSignificanceWXMPSR, 0, ptr);
    Call sub_LevelOfSignificanceWXMPSR(ptr)
    If (bAbort) Then
        p = -1
    Else
        p = ptr.pval
    End If
    'free(ptr);
    LevelOfSignificanceWXMPSR = p
End Function

'//EOF

Attribute VB_Name = "mdlXML"
Option Explicit

Function RegistrXML() As Boolean
    Dim strDllName As String
    strDllName = ThisWorkbook.Path & "/msxml3.dll"
    If bFileExist(strDllName) Then
        Shell "REGSVR32.EXE  /s """ & strDllName & """", vbMinimizedNoFocus
        RegistrXML = True
        Exit Function
    Else
        RegistrXML = False
    End If
End Function

Function CreateXMLDom() As Object
    Dim i As Integer
    Dim progIDs As Variant
    Dim xmldoc As Object
    On Error Resume Next
    progIDs = Array("MSXML2.DOMDocument.6.0", "MSXML2.DOMDocument.5.0", _
                         "MSXML2.DOMDocument.4.0", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument")
    For i = LBound(progIDs) To UBound(progIDs)
        Set xmldoc = CreateObject(progIDs(i))
        If Not xmldoc Is Nothing Then
            Set CreateXMLDom = xmldoc
            If progIDs(i) = "MSXML2.DOMDocument.6.0" Then
                CreateXMLDom.setProperty "AllowDocumentFunction", True
            End If
            On Error GoTo 0
            Exit Function
        End If
    Next i
    On Error GoTo 0
End Function

Function bXMLAvailable() As Boolean
    Dim xmlObj As Object
    Dim bOK As Boolean
    Set xmlObj = CreateXMLDom
    If xmlObj Is Nothing Then
        bOK = RegistrXML
        If bOK Then
            bXMLAvailable = True
        Else
            bXMLAvailable = False
            MsgBox "This program needs MSXML."
        End If
    Else
        bXMLAvailable = True
    End If
End Function

Function Localize(ByVal strXmlFile As String, ByVal strXslFile As String) As Object
    Dim source, stylesheet, result As Object
    Dim strxml1 As String
    Set source = CreateXMLDom()
    Set stylesheet = CreateXMLDom()
    Set result = CreateXMLDom()
    source.async = False
    source.validateOnParse = True
    source.Load strXmlFile
    If (source.parseError.ErrorCode <> 0) Then
        Set Localize = source
    Else
        stylesheet.async = False
        stylesheet.validateOnParse = True
        stylesheet.Load strXslFile
        If (stylesheet.parseError.ErrorCode <> 0) Then
            Set Localize = source
        Else
            ' Set up the resulting document.
            result.async = False
            result.validateOnParse = True
            ' Parse results into a result DOM Document.
            source.transformNodeToObject stylesheet, result
            If (stylesheet.parseError.ErrorCode <> 0) Then
               Set Localize = source
            Else
                Set Localize = result
            End If
        End If
    End If
End Function

Function OutputXmlTableToRge(ByVal outBgnRge As Range, ByVal xmlObj As Object) As Range
    Dim i As Long, j As Long, k As Long, l As Long, tmpi As Long, tmpj As Long
    Dim trNode As Object, tdNode As Object
    k = xmlObj.ChildNodes.Length
    tmpi = k
    tmpj = 0
    For i = 1 To k
        Set trNode = xmlObj.ChildNodes(i - 1)
        l = trNode.ChildNodes.Length
        If l > tmpj Then tmpj = l
        For j = 1 To l
            Set tdNode = trNode.ChildNodes(j - 1)
            outBgnRge(i, j) = tdNode.text
        Next j
    Next i
    Set OutputXmlTableToRge = outBgnRge(1, 1).Resize(tmpi, tmpj)
End Function
Attribute VB_Name = "menuBarMdl"
'===================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd||fffd||fffd|j|fffd||fffd||fffd|[ System (CommandBar)
'
' 2010.11 LSQ
' 2011.6.13 LSQ mdf : KKS_DEV.xls ! No.15
'===================================================
Option Explicit
Option Private Module

Public Const BARNAME_KKSV1 As String = "EXCEL|fffd||fffd||fffd|\|fffd|]|fffd||fffd| Ver.1.00"
Public Const BARNAME_KKSV1_ICON As String = "KKS_ICONBAR"

'2011.09.06 mdf on |fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|j|fffd||fffd||fffd|[|fffd||3cd|X2.xls
#If 0 Then
'
'11.5.20 LSQ Menu Mdf based on "|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||303||fffd||fffd|j|fffd||fffd||fffd|[|fffd||3cd|X.xls"
'
Sub nu_make_MenuBar()
    Dim menuBar As CommandBar           'menu bar
    Dim popMenu As CommandBarControl    'menu
    Dim submn As CommandBarControl      'sub menu
    Dim submm As CommandBarControl
    Dim iconMenuName As String

    'delete old one if any
    Call delete_MenuBar(BARNAME_KKSV1)

    Set menuBar = CommandBars.Add(name:=BARNAME_KKSV1)  ', Temporary:=True', MenuBar:=True)
    menuBar.Position = msoBarTop
    
    '---|fffd||fffd||fffd|v|fffd|I|fffd||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd|v|fffd|I|fffd||fffd||fffd||fffd|", "|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|A|fffd||fffd||fffd|d|fffd||fffd|r |fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_DkKt_1P01", "|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    '|fffd||fffd||fffd|d|fffd||fffd|r
    Set submm = popMenu.Controls.Add(Type:=msoControlPopup)
    submm.Caption = "|fffd||fffd||fffd|d|fffd||fffd|r"
    Set submn = submm.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd||a57d||fffd||fffd|"
    Call addItemToPopMenu(submn, "KKS_Bonferoni", "|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Holm", "|fffd|z|fffd||fffd||fffd||fffd|(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Sheffe_Z", "|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Sheffe_S", "|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Chuki_Z", "|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Chuki_S", "|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Dankan", "|fffd|_|fffd||fffd||fffd|J|fffd||fffd|(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Danetto", "|fffd|_|fffd|l|fffd|b|fffd|g(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_Williams", "|fffd|E|fffd|C|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")

#If 0 Then '11.6.13 cmt
    Set submn = submm.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd||fffd||45e6|"
    Call addItemToPopMenu(submn, "KKS_HRI_Bonferoni", "|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_HRI_Chuki_Z", "|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)")
#End If

    Set submn = submm.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|b|fffd|N"
    Call addItemToPopMenu(submn, "KKS_NP_SteelDwass_1P01", "|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X(|fffd|S|fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_NP_Steel_1P01", "|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")
    Call addItemToPopMenu(submn, "KKS_NP_ShirleyWilliams_1P01", "|fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|C|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")
    '|fffd||fffd||fffd|d|fffd||fffd|r -- end --
    
    '11.6.13 mdf
    Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|"
    Call addItemToPopMenu(submn, "KKS_Wks_Nsi_1P01", "|fffd||389||fffd||fffd||202||fffd|")
    Call addItemToPopMenu(submn, "KKS_Wks_Ari_1P01", "|fffd||389||fffd||fffd||fffd||fffd||fffd|")
    
    Call addItemToPopMenu(popMenu, "KKS_Krs_1P01", "|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|H|fffd||fffd||fffd|X|fffd||30c||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Fdm_1P01", "|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    
    '---|fffd||fffd||fffd||58c|W|fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||58c|W|fffd||fffd|", "|fffd||fffd|v|fffd|W|fffd||fffd||fffd|A|fffd||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_Kdl_Ich_1P01", "|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||308||fffd|v|fffd|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Spm_Ord", "|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Kdl_Ord", "|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    
    '---|fffd|O|fffd||fffd||fffd|t---
    Set popMenu = makePopMenu(menuBar, "|fffd|O|fffd||fffd||fffd|t", "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd|A|fffd|X|fffd|l|fffd|[|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g")
    Call addItemToPopMenu(popMenu, "KKS_Mosaic_1P01", "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}")
    Call addItemToPopMenu(popMenu, "KKS_SnakeCht_1P01", "|fffd|X|fffd|l|fffd|[|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g")

    '---|fffd||fffd||fffd||3d7||289||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||3d7||289||fffd||fffd|", "|fffd||542c||fffd||fffd||fffd||fffd||fffd||341|A|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd| |fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_SSB_1P01", "|fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_INSI_1P01", "|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SR3_1P01", "|fffd||fffd||fffd||289||fffd||fffd|V|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SR4_1P01", "|fffd||fffd||fffd||289||fffd||fffd|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SDSKD_1P01", "|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_sjSKN_1P01", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||595||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_JKK_1P01", "|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_biLogic", "|fffd||4d003||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_HBT_1P01", "|fffd||fffd||fffd|`|fffd||fffd||fffd||295||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_sjHBT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|")
    
    '---|fffd||fffd||fffd||fffd|---
    '11.6.13 mdf-- bgn --
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||fffd|", "|fffd||fffd||394||fffd|r|fffd|@|fffd|A|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||281|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True

    Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd||fffd||394||fffd|r|fffd|@|fffd|F|fffd|T|fffd||fffd||fffd|v|fffd||fffd|"
    Call addItemToPopMenu(submn, "KKS_IttSmp_stn_1P01", "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|")
    Call addItemToPopMenu(submn, "KKS_IttSmp_sfe_1P01", "|fffd||fffd||fffd|@")
    Call addItemToPopMenu(submn, "KKS_IttSmp_pu_1P01", "|fffd|Y|fffd||315||3d6|@")
    Call addItemToPopMenu(submn, "KKS_IttSmp_fang_1P01", "|fffd|F|fffd||fffd||315||3d6|@")
    Call addItemToPopMenu(submn, "KKS_IttSmp_zhong_1P01", "|fffd||fffd||fffd||fffd||fffd||315||3d6|@")
    
    Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd||fffd||394||fffd|r|fffd|@|fffd|F|fffd|T|fffd|}|fffd||fffd||fffd|["
    Call addItemToPopMenu(submn, "KKS_IttSum_stn_1P01", "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|")
    Call addItemToPopMenu(submn, "KKS_IttSum_sfe", "|fffd||fffd||fffd|@")
'   Call addItemToPopMenu(submn, "KKS_IttSum_pu", "|fffd|Y|fffd||315||3d6|@")
    Call addItemToPopMenu(submn, "KKS_IttSum_fang", "|fffd|F|fffd||fffd||315||3d6|@")
'   Call addItemToPopMenu(submn, "KKS_IttSum_zhong", "|fffd||fffd||fffd||fffd||fffd||315||3d6|@")
    '11.6.13 mdf-- end --

    Call addItemToPopMenu(popMenu, "KKS_NormOrder_1P01", "|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||296|@")
    Call addItemToPopMenu(popMenu, "KKS_3PsDataEdit_1P01", "|fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||48f|W")
    
    '---|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|", "|fffd|w|fffd||fffd||fffd|v|fffd|E|fffd|I|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "fOnlineManual_KKSV1_1P01", "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd|y|fffd||fffd||fffd||355||481|z")
    Call addItemToPopMenu(popMenu, "fHelp_KKSV1_1P01", "|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fExit_KKSV1_1P01", "EXCEL|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|")
    
    'display menubar
    menuBar.Visible = True
End Sub
#Else
Sub make_MenuBar()
    Dim menuBar As CommandBar           'menu bar
    Dim popMenu As CommandBarControl    'menu
    Dim submn As CommandBarControl      'sub menu
    Dim submm As CommandBarControl
    Dim iconMenuName As String

    'delete old one if any
    Call delete_MenuBar(BARNAME_KKSV1)

    Set menuBar = CommandBars.Add(name:=BARNAME_KKSV1)  ', Temporary:=True', MenuBar:=True)
    menuBar.Position = msoBarTop
    
    '---|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|", "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_BASICSTAT_1P01", "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|")
    
    '---|fffd||fffd||fffd|v|fffd|I|fffd||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd|v|fffd|I|fffd||fffd||fffd||fffd|", "|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|A|fffd||fffd||fffd|d|fffd||fffd|r |fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_BINOMIALSIGN_1P01", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||4d00c||fffd||fffd||fffd|j")
    Call addItemToPopMenu(popMenu, "KKS_DkKt_1P01", "|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    
    '11.6.13 mdf
    'Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    'submn.Caption = "|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|"
    'Call addItemToPopMenu(submn, "KKS_Wks_Nsi_1P01", "|fffd||389||fffd||fffd||202||fffd|")
    'Call addItemToPopMenu(submn, "KKS_Wks_Ari_1P01", "|fffd||389||fffd||fffd||fffd||fffd||fffd|")
    
    Call addItemToPopMenu(popMenu, "KKS_Wks_Nsi_1P01", "|fffd||389||fffd||fffd||302||202||fffd||fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_MultiCmp_1P01", "|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|E|fffd|H|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd||191||fffd||fffd|d|fffd||fffd|r")
    Call addItemToPopMenu(popMenu, "KKS_Wks_Ari_1P01", "|fffd||389||fffd||fffd||302||fffd||fffd||fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Fdm_1P01", "|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||fffd||fffd||fffd|")
    
    '|fffd||fffd||fffd|d|fffd||fffd|r
    'Set submm = popMenu.Controls.Add(Type:=msoControlPopup)
    'submm.Caption = "|fffd||fffd||fffd|d|fffd||fffd|r(|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|b|fffd|N)"
    'Call addItemToPopMenu(submm, "KKS_NP_SteelDwass_1P01", "|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X(|fffd|S|fffd|Q|fffd||fffd|r)")
    'Call addItemToPopMenu(submm, "KKS_NP_Steel_1P01", "|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")
    'Call addItemToPopMenu(submm, "KKS_NP_ShirleyWilliams_1P01", "|fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|C|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)")
    '|fffd||fffd||fffd|d|fffd||fffd|r -- end --
    
    '---|fffd||fffd||fffd||58c|W|fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||282||309||fffd||fffd|", "|fffd||fffd|v|fffd|W|fffd||fffd||fffd|A|fffd||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_Kdl_Ich_1P01", "|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||308||fffd|v|fffd|W|fffd||fffd|")
    'Call addItemToPopMenu(popMenu, "KKS_Spm_Ord", "|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    'Call addItemToPopMenu(popMenu, "KKS_Kdl_Ord", "|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Ord_1P01", "|fffd||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_NormOrder_1P01", "|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||296|@")
    
    '---|fffd|O|fffd||fffd||fffd|t---
    Set popMenu = makePopMenu(menuBar, "|fffd|O|fffd||fffd||fffd|t", "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd|A|fffd|X|fffd|l|fffd|[|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g")
    Call addItemToPopMenu(popMenu, "KKS_fHist_1P01", "|fffd|q|fffd|X|fffd|g|fffd|O|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_Mosaic_1P01", "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}")
    Call addItemToPopMenu(popMenu, "KKS_SnakeCht_1P01", "|fffd|X|fffd|l|fffd|[|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g")

    '---|fffd||fffd||fffd||3d7||289||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||3d7||289||fffd||fffd|", "|fffd||542c||fffd||fffd||fffd||fffd||fffd||341|A|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd| |fffd|E|fffd|E|fffd|E")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "KKS_SSB_1P01", "|fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_INSI_1P01", "|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SR3_1P01", "|fffd||fffd||fffd||289||fffd||fffd|V|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SR4_1P01", "|fffd||fffd||fffd||289||fffd||fffd|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_SDSKD_1P01", "|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_sjSKN_1P01", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||595||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_JKK_1P01", "|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|")
    'Call addItemToPopMenu(popMenu, "KKS_biLogic", "|fffd||4d003||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "KKS_HBT_1P01", "|fffd||fffd||fffd|`|fffd||fffd||fffd||295||fffd||fffd||fffd|")
    'Call addItemToPopMenu(popMenu, "KKS_sjHBT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|")
    
    Set submn = popMenu.Controls.Add(Type:=msoControlPopup)
    submn.Caption = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|"
    Call addItemToPopMenu(submn, "KKS_CLUSTER_1P01", "|fffd|K|fffd|w|fffd|^")
    Call addItemToPopMenu(submn, "KKS_KMEANS_1P01", "K-|fffd||fffd||fffd||3d6|@")
    
    '---|fffd||fffd||394||fffd|r|fffd|@---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd||394||fffd|r|fffd|@", "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd||fffd|A|fffd||fffd||fffd|@|fffd|E|fffd|E|fffd|E")
    'Call addItemToPopMenu(popMenu, "KKS_IttSmp_stn", "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|")
    Set submm = popMenu.Controls.Add(Type:=msoControlPopup)
    submm.Caption = "|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|"
    Call addItemToPopMenu(submm, "KKS_IttSmp_stn_1P01", "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd|")
    Call addItemToPopMenu(submm, "KKS_IttSum_stn_1P01", "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|W|fffd|v|fffd|\")
    
    Call addItemToPopMenu(popMenu, "KKS_IttSmp_sfe_1P01", "|fffd||fffd||fffd|@")
    Call addItemToPopMenu(popMenu, "KKS_IttSmp_pu_1P01", "|fffd|Y|fffd||315||3d6|@")
    Call addItemToPopMenu(popMenu, "KKS_IttSmp_fang_1P01", "|fffd|F|fffd||fffd||315||3d6|@")
    Call addItemToPopMenu(popMenu, "KKS_IttSmp_zhong_1P01", "|fffd||fffd||fffd||fffd||fffd||315||3d6|@")
    
    Set popMenu = makePopMenu(menuBar, "|fffd|f|fffd|[|fffd|^|fffd||48f|W", "|fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||48f|W|fffd|E|fffd|E|fffd|E")
    Call addItemToPopMenu(popMenu, "KKS_3PsDataEdit_1P01", "|fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||48f|W")
    
    '---|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|", "|fffd|w|fffd||fffd||fffd|v|fffd|E|fffd|I|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "fOnlineManual_KKSV1_1P01", "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd|y|fffd||fffd||fffd||355||481|z")
    Call addItemToPopMenu(popMenu, "fHelp_KKSV1_1P01", "|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fExit_KKSV1_1P01", "EXCEL|fffd||fffd||fffd|\|fffd|]|fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|")
    
    'display menubar
    menuBar.Visible = True
End Sub
#End If
'
Private Function makePopMenu(mnBar As CommandBar, ByVal capName As String, _
    Optional ByVal toolTipStr As String = "") As CommandBarControl
    Set makePopMenu = mnBar.Controls.Add(Type:=msoControlPopup)
    makePopMenu.Caption = capName
    makePopMenu.TooltipText = toolTipStr
End Function
'
Private Sub addItemToPopMenu(ByVal popMenu As CommandBarControl, _
    ByVal macroName As String, ByVal capName As String, _
    Optional ByVal bSeper As Boolean = False, _
    Optional ByVal iconMenuName As String = "", _
    Optional ByVal iconBtnName As String = "")
    Dim barBtn As CommandBarButton
    '
    Dim iconBar As CommandBar
    Dim iconMenu As CommandBarPopup
    Dim iconBtn As CommandBarButton
    
    'Buttons
    Set barBtn = popMenu.Controls.Add(Type:=msoControlButton)
    barBtn.OnAction = macroName
    barBtn.Caption = capName
    'If faceIdNum <> 0 Then barBtn.FaceId = faceIdNum 'not used
    If bSeper Then barBtn.BeginGroup = True
    
    'Icon Attached
    If iconMenuName <> "" And iconBtnName <> "" Then
        Set iconBar = CommandBars(BARNAME_KKSV1_ICON)
        Set iconMenu = iconBar.Controls(iconMenuName) 'example, IconForGraph
        Set iconBtn = iconMenu.Controls(iconBtnName)
        iconBtn.CopyFace
        barBtn.PasteFace
    End If
    
End Sub
'
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[Bar|fffd||30d||d3dc||fffd|B
'
Sub delete_MenuBar(ByVal barName As String)
    If isMenuBarExist(barName) = True Then
        CommandBars(barName).Delete
    End If
End Sub
'
Private Function isMenuBarExist(ByVal barName As String) As Boolean
    Dim B As CommandBar
    
    isMenuBarExist = False
    
    For Each B In CommandBars
        If UCase(B.name) = UCase(barName) Then
            isMenuBarExist = True
            Exit Function
        End If
    Next B

End Function

'=== EOF ===
Attribute VB_Name = "menuBarRB"
'
'Ribbon Interface
'As Object = As IRibbonControl
'
'2010.11.5 LSQ
'
Option Explicit

'---|fffd||fffd||fffd|v---

'|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|
Sub KKSRB_DkKt_1P01(control As Object)
    Call KKS_DkKt_1P01
End Sub

'|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_Bonferoni(control As Object)
    Call KKS_Bonferoni
End Sub

'|fffd|z|fffd||fffd||fffd||fffd|(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_Holm(control As Object)
    Call KKS_Holm
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|S|fffd|Q|fffd||fffd|r)"
Sub KKSRB_Sheffe_Z(control As Object)
    Call KKS_Sheffe_Z
End Sub

'|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)
Sub KKSRB_Sheffe_S(control As Object)
    Call KKS_Sheffe_S
End Sub

'|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_Chuki_Z(control As Object)
    Call KKS_Chuki_Z
End Sub

'|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)
Sub KKSRB_Chuki_S(control As Object)
    Call KKS_Chuki_S
End Sub

'|fffd|_|fffd||fffd||fffd|J|fffd||fffd|(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_Dankan(control As Object)
    Call KKS_Dankan
End Sub

'|fffd|_|fffd|l|fffd|b|fffd|g(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
Sub KKSRB_Danetto(control As Object)
    Call KKS_Danetto
End Sub

'|fffd|E|fffd|C|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
Sub KKSRB_Williams(control As Object)
    Call KKS_Williams
End Sub

'|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_HRI_Bonferoni(control As Object)
    Call KKS_HRI_Bonferoni
End Sub

'|fffd|e|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_HRI_Chuki_Z(control As Object)
    Call KKS_HRI_Chuki_Z
End Sub

'|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X(|fffd|S|fffd|Q|fffd||fffd|r)
Sub KKSRB_NP_SteelDwass_1P01(control As Object)
    Call KKS_NP_SteelDwass_1P01
End Sub

'|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
Sub KKSRB_NP_Steel_1P01(control As Object)
    Call KKS_NP_Steel_1P01
End Sub

'|fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|C|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
Sub KKSRB_NP_ShirleyWilliams_1P01(control As Object)
    Call KKS_NP_ShirleyWilliams_1P01
End Sub

'|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||389||fffd||fffd||202||fffd|)
Sub KKSRB_Wks_Nsi_1P01(control As Object)
    Call KKS_Wks_Nsi_1P01
End Sub

'|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||389||fffd||fffd||fffd||fffd||fffd|)
Sub KKSRB_Wks_Ari_1P01(control As Object)
    Call KKS_Wks_Ari_1P01
End Sub

'|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|H|fffd||fffd||fffd|X
Sub KKSRB_Krs_1P01(control As Object)
    Call KKS_Krs_1P01
End Sub
    
'|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd|
Sub KKSRB_Fdm_1P01(control As Object)
    Call KKS_Fdm_1P01
End Sub
    
'|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||308||fffd|v|fffd|W|fffd||fffd|
Sub KKSRB_Kdl_Ich_1P01(control As Object)
    Call KKS_Kdl_Ich_1P01
End Sub
    
'|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||fffd|
Sub KKSRB_Kdl_Ord(control As Object)
    Call KKS_Kdl_Ord
End Sub
    
'|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||fffd|
Sub KKSRB_Spm_Ord(control As Object)
    Call KKS_Spm_Ord
End Sub
    
'|fffd||fffd||fffd||291||fffd||fffd||fffd|
Sub KKSRB_Ord_1P01(control As Object)
    Call KKS_Ord_1P01
End Sub

'|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}
Sub KKSRB_Mosaic_1P01(control As Object)
    Call KKS_Mosaic_1P01
End Sub
    
'---|fffd||fffd||fffd||3d7||281||fffd||fffd||fffd||fffd||289||fffd|---

'|fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd|
Sub KKSRB_SSB_1P01(control As Object)
    Call KKS_SSB_1P01
End Sub

'|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|
Sub KKSRB_INSI_1P01(control As Object)
    Call KKS_INSI_1P01
End Sub

'|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|
Sub KKSRB_JKK_1P01(control As Object)
    Call KKS_JKK_1P01
End Sub

'|fffd||fffd||fffd||295||fffd||fffd||fffd|
Sub KKSRB_HBT_1P01(control As Object)
    Call KKS_HBT_1P01
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||295||fffd||fffd||fffd|
Sub KKSRB_sjHBT(control As Object)
    Call KKS_sjHBT
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||595||fffd||fffd||fffd|
Sub KKSRB_sjSKN_1P01(control As Object)
    Call KKS_sjSKN_1P01
End Sub

'|fffd||4d003||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
Sub KKSRB_biLogic(control As Object)
    Call KKS_biLogic
End Sub

'|fffd|R|fffd||fffd||fffd|X|fffd|||fffd||fffd||fffd|f|fffd||fffd||fffd|X
Sub KKSRB_SDSKD_1P01(control As Object)
    Call KKS_SDSKD_1P01
End Sub

'|fffd||fffd||fffd||289||fffd|3|fffd||fffd|
Sub KKSRB_SR3_1P01(control As Object)
    Call KKS_SR3_1P01
End Sub

'|fffd||fffd||fffd||289||fffd|4|fffd||fffd|
Sub KKSRB_SR4_1P01(control As Object)
    Call KKS_SR4_1P01
End Sub

Sub KKSRB_CLUSTER_1P01(control As Object)
    Call KKS_CLUSTER_1P01
End Sub

Sub KKSRB_KMEANS_1P01(control As Object)
    Call KKS_KMEANS_1P01
End Sub

'---|fffd||fffd||fffd||fffd|---

'Smp : |fffd||fffd||394||fffd|r (|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)
Sub KKSRB_IttSmp_stn_1P01(control As Object)
    Call KKS_IttSmp_stn_1P01
End Sub

'Smp : |fffd||fffd||394||fffd|r (|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)
Sub KKSRB_IttSmp_sfe_1P01(control As Object)
    Call KKS_IttSmp_sfe_1P01
End Sub

'Smp : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Y|fffd||315||3d6|@)"
Sub KKSRB_IttSmp_pu_1P01(control As Object)
    Call KKS_IttSmp_pu_1P01
End Sub

'Smp : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|F|fffd||fffd||315||3d6|@)
Sub KKSRB_IttSmp_fang_1P01(control As Object)
    Call KKS_IttSmp_fang_1P01
End Sub

'Smp : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)
Sub KKSRB_IttSmp_zhong_1P01(control As Object)
    Call KKS_IttSmp_zhong_1P01
End Sub

'Sum : |fffd||fffd||394||fffd|r (|fffd|T|fffd|[|fffd|X|fffd|g|fffd||fffd|)
Sub KKSRB_IttSum_stn_1P01(control As Object)
    Call KKS_IttSum_stn_1P01
End Sub

'Sum : |fffd||fffd||394||fffd|r (|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F)
Sub KKSRB_IttSum_sfe(control As Object)
    Call KKS_IttSum_sfe
End Sub

'Sum : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Y|fffd||315||3d6|@)"
Sub KKSRB_IttSum_pu(control As Object)
    Call KKS_IttSum_pu
End Sub

'Sum : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|F|fffd||fffd||315||3d6|@)
Sub KKSRB_IttSum_fang(control As Object)
    Call KKS_IttSum_fang
End Sub

'Sum : |fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd||fffd||fffd||fffd||fffd||315||3d6|@)
Sub KKSRB_IttSum_zhong(control As Object)
    Call KKS_IttSum_zhong
End Sub

'|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|
Sub KKSRB_NormOrder_1P01(control As Object)
    Call KKS_NormOrder_1P01
End Sub

'|fffd|X|fffd|l|fffd|C|fffd|N|fffd|`|fffd||fffd||fffd|[|fffd|g
Sub KKSRB_SnakeCht_1P01(control As Object)
    Call KKS_SnakeCht_1P01
End Sub

'3 |fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||48f|W
Sub KKSRB_3PsDataEdit_1P01(control As Object)
    Call KKS_3PsDataEdit_1P01
End Sub

'---|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|---
    
'|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd|y|fffd||fffd||fffd||355||481|z
Sub KKSRB_OnlineManual_1P01(control As Object)
    Call fOnlineManual_KKSV1_1P01
End Sub

'|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|
Sub KKSRB_AboutMe_1P01(control As Object)
    Call fHelp_KKSV1_1P01
End Sub

'|fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|
Sub fExit_KKSV1_RB_1P01(control As Object)
    Call fExit_KKSV1_1P01
End Sub

Sub KKSRB_BASICSTAT_1P01(control As Object)
    Call KKS_BASICSTAT_1P01
End Sub

Sub KKSRB_BINOMIALSIGN_1P01(control As Object)
    Call KKS_BINOMIALSIGN_1P01
End Sub

Sub KKSRB_fHist_1P01(control As Object)
    Call KKS_fHist_1P01
End Sub

Sub KKSRB_MultiCmp_1P01(control As Object)
    Call KKS_MultiCmp_1P01
End Sub

'Callback
'Not Display Hint
'
'2019.4.21 LSQ add
Sub CallBack_Screentip(control As IRibbonControl, ByRef scrntip)
    'do nothing
End Sub

'==== EOF ====





Attribute VB_Name = "sssJsk"
'=======================================================
' SSS|fffd||fffd||fffd|vVer6 : DLL JSK
'
' 2005.9 LSQ
'=======================================================
Option Private Module
Option Explicit

Type DLG_IN
    sRngDep As String       '|fffd||693|I|fffd||3d0||fffd|
    sRngInd As String       '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    sRngT_Name As String    '|fffd||fffd||fffd|_|fffd||3d0||fffd||fffd||348||fffd| or |fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||348||fffd|(|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|)
    bTitle As Integer
    bStop As Integer
    
    '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd| only
    dBase As Double         '|fffd||fffd||fffd||283|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\|fffd||30a||e3c0|
    bName As Integer        '|fffd||91||316||fffd|
    bSatari As Integer      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Type

Private m_varselect As String

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function cLJkk Lib "KKS_SubK_64.dll" (adlgin As DLG_IN) As Integer
    #Else
    Declare PtrSafe Function cLJkk Lib "KKS_SubK.dll" (adlgin As DLG_IN) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function cLJkk Lib "KKS_SubK_64.dll" (adlgin As DLG_IN) As Integer
    #Else
    Declare Function cLJkk Lib "KKS_SubK.dll" (adlgin As DLG_IN) As Integer
    #End If
#End If

Private Function handleJskData(JskTbl As DLG_IN) As Worksheet
    Dim i As Long, j As Long
    Dim rgeObj As Range, rgeVar As Range, rge As Range
    Dim rgeSmpName As Range
    Dim tmpsht As Worksheet
    Dim Jskobj As Variant, Jskvar As Variant, JskName As Variant
    Dim JskVarSel As Variant
    Dim NameRow As Long, smpnum As Long, objSmpNum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set rgeObj = Range(JskTbl.sRngDep)
    Set rgeVar = Range(JskTbl.sRngInd)
    If JskTbl.bName Then
        Set rgeSmpName = Range(JskTbl.sRngT_Name)
    End If
    Jskvar = rgeVar.Value
    
    msgStr = ""
    If rgeVar Is Nothing Or rgeObj Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    Set tmpsht = rgeVar.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$2")
    If JskTbl.bName Then
        Call PasteRange(rgeSmpName, rge, xlPasteValues)
        NameRow = rgeSmpName.Rows.Count * rgeSmpName.Columns.Count
    Else
        NameRow = rgeObj.Rows.Count
        For i = 1 To NameRow
            rge(i, 1) = i
        Next i
    End If
    Set rge = tmpsht.Range("$B$1")
    Call PasteRange(rgeObj, rge, xlPasteValues)
    If m_varselect <> "0" Then
        JskVarSel = Split(m_varselect, ",")
    Else
        ReDim JskVarSel(0 To rgeVar.Columns.Count) As Long
        JskVarSel(0) = rgeVar.Columns.Count
        For i = 1 To rgeVar.Columns.Count
            JskVarSel(i) = i - 1
        Next i
    End If
    For i = 1 To rgeVar.Rows.Count
        For j = 1 To JskVarSel(0)
            rge(i, j + 1) = rgeVar(i, JskVarSel(j) + 1)
        Next j
    Next i
    JskTbl.sRngInd = Range(rge(1, 2), rge(rgeVar.Rows.Count, JskVarSel(0) + 1)).Address

    Set rge = Range(JskTbl.sRngInd)
    smpnum = rge.Rows.Count
       
    Set rge = Range("B1")
    objSmpNum = rgeObj.Rows.Count
    Set rge = Range(rge(1, 1), rge(objSmpNum, JskVarSel(0) + 1))
    For i = objSmpNum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete xlUp
                smpnum = smpnum - 1
                objSmpNum = objSmpNum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                Set handleJskData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
    
    Set rge = Range("C1")
    Set rge = Range(rge(1, 1), rge(smpnum, JskVarSel(0)))
    For i = smpnum To 2 Step -1
        If Application.WorksheetFunction.Count(rge.Rows(i)) < rge.Columns.Count Then
            If JskTbl.bStop <> 1 Then
                tmpsht.Rows(rge.Rows(i).row).Delete xlUp
                smpnum = smpnum - 1
            Else
                Application.DisplayAlerts = False
                tmpsht.Delete
                Application.DisplayAlerts = True
                Set handleJskData = Nothing
                MsgBox "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|||fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|||fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|", vbInformation
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpsht.Range("$A$2")
    
    JskTbl.sRngT_Name = Range(rge(1, 1), rge(NameRow, 1)).Address
    JskTbl.sRngT_Name = tmpsht.name & "!" & JskTbl.sRngT_Name
    
    Set rge = tmpsht.Range("$B$1")
    
    JskTbl.sRngDep = Range(rge(1, 1), rge(objSmpNum, 1)).Address
    JskTbl.sRngDep = tmpsht.name & "!" & JskTbl.sRngDep
    
    JskTbl.sRngInd = Range(rge(1, 2), rge(smpnum, JskVarSel(0) + 1)).Address
    JskTbl.sRngInd = tmpsht.name & "!" & JskTbl.sRngInd
    
    Set handleJskData = tmpsht
    On Error GoTo 0
End Function

Sub JskGetVarSelect()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgLjkk")
    m_varselect = GetVarSel(dlg, "edtVarRge")
End Sub

Public Sub LjkkDrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double, ByVal strpara As String)
    Call Application.Run(GxlaTai5BkGraph & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt, strpara)
End Sub

'---------------------------------------------------------------
Sub KKS_biLogic()          '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N|fffd||fffd|A|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim adlgin As DLG_IN
    Dim ActShtObj As Worksheet, tmpsht As Worksheet
    Dim dlg As Object
    '|fffd|J|fffd|n|fffd|V|fffd|[|fffd|g|fffd||315||6d1||fffd|
    Set ActShtObj = ActiveSheet
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set dlg = ThisWorkbook.DialogSheets("DlgLjkk")
    dlg.Buttons("btnVarSel").OnAction = "JskGetVarSelect"

    'DialogBox|fffd||315|\|fffd||fffd|
redisp:
    ActShtObj.Activate
    m_varselect = "0"
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
       
        adlgin.sRngDep = Trim((dlg.EditBoxes("edtObjRge").text))
        adlgin.sRngInd = Trim((dlg.EditBoxes("edtVarRge").text))
        adlgin.bName = IIf(dlg.OptionButtons("optSmpName") = xlOn, 1, 0)
        If adlgin.bName Then
            adlgin.sRngT_Name = Trim((dlg.EditBoxes("edtNameRge").text))
        End If
        If adlgin.sRngDep = "" Or adlgin.sRngInd = "" Or (adlgin.bName And adlgin.sRngT_Name = "") Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
        adlgin.bTitle = IIf(dlg.OptionButtons("optTitle") = xlOn, 1, 0)
        adlgin.bStop = IIf(dlg.OptionButtons("optStop") = xlOn, 1, 0)
        adlgin.bSatari = IIf(dlg.OptionButtons("optSatari") = xlOn, 1, 0)
        adlgin.dBase = val(dlg.EditBoxes("edtBase").text)
        If adlgin.dBase < 0 Or adlgin.dBase > 1 Then
            MsgBox MSG_ERR_DATARAGE
            GoTo redisp
        End If
    
        adlgin.sRngDep = " " & adlgin.sRngDep
        adlgin.sRngInd = " " & adlgin.sRngInd
        If (adlgin.bName) Then
            adlgin.sRngT_Name = " " & adlgin.sRngT_Name
        End If
        
        Set tmpsht = handleJskData(adlgin)
        If tmpsht Is Nothing Then
            GoTo redisp
        End If
        
        adlgin.sRngDep = toXlRCstr(adlgin.sRngDep)
        adlgin.sRngInd = toXlRCstr(adlgin.sRngInd)
        adlgin.sRngT_Name = toXlRCstr(adlgin.sRngT_Name)
        
        Call changeToSSDir
        ActShtObj.Activate
        rtn = cLJkk(adlgin)
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

#If 0 Then '11.5.31 LSQ cmt : not used
Sub THR6_LOGISTIC()
    Application.Run GxlaLogistic & "!Logistic_Main"
End Sub
#End If

Attribute VB_Name = "sssSKN"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : SKN
'
' 2010.11 LSQ
'=======================================================
Option Private Module
Option Explicit

Type SKARI_TBL
    DataRge As String
    datarge1 As String
    datarge2 As String
    OutRge As String
    NewSheet As Long
    Except As Long
    dataType As Long
    AllVariables As Long
    corrType As Long
    sccType As Long
    CateType As Long
    side As Long
    CmpValue As Double
    flgDirt As Long
End Type

Private Const ERR_NULLRGE As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||80aa||fffd|K|fffd||602||142||fffd||fffd||fffd||702||fffd||fffd||fffd|B"

'09.5.31 LSQ cmt; Declare Function fSkAri Lib "SSS32SKN.DLL" () As Integer
#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function fSkAri_Vba Lib "KKS_SubF_64.DLL" (Skari As SKARI_TBL) As Long
    #Else
    Declare PtrSafe Function fSkAri_Vba Lib "KKS_SubF.DLL" (Skari As SKARI_TBL) As Long
    #End If
#Else
    #If Win64 Then
    Declare Function fSkAri_Vba Lib "KKS_SubF_64.DLL" (Skari As SKARI_TBL) As Long
    #Else
    Declare Function fSkAri_Vba Lib "KKS_SubF.DLL" (Skari As SKARI_TBL) As Long
    #End If
#End If

Function KKS_fSkAri_Internal(ByVal strDataRge As String, ByVal AllVariables As Long, ByVal corrType As Long, ByVal sccType As Long, _
                             ByVal CmpValue As Double, ByVal side As Long, Optional ByVal flgDirt As Long = 0) As Range
    Dim rtn As Integer, i As Long, j As Long, k As Long
    Dim DataRge As Range, datarge1 As Range, datarge2 As Range
    Dim OutRge As Range
    Dim vdata As Variant
    Dim itemnum As Long, rowNum As Long
    Dim actSheet As Worksheet, dataSheet As Worksheet
    Dim NewSheet As Boolean
    Dim dlg As DialogSheet
    Dim Skari As SKARI_TBL
    Set actSheet = ActiveSheet
    Skari.dataType = 1
    Skari.NewSheet = 1
    Skari.DataRge = toXlRCstr(strDataRge)
    Skari.Except = 1
    Skari.AllVariables = AllVariables
    Skari.corrType = corrType
    Skari.sccType = sccType
    Skari.CmpValue = CmpValue
    Skari.side = side
    Skari.CateType = 1
    Skari.flgDirt = flgDirt
    If Skari.corrType <> 4 Then
        Skari.sccType = 1
    End If
    Call changeToSSDir
    actSheet.Activate
    Set dataSheet = Range(toXlA1str(Skari.DataRge)).Worksheet
    rtn = fSkAri_Vba(Skari)
    If rtn = 0 And Skari.AllVariables = 2 Then
        Set actSheet = ActiveSheet
        Set DataRge = dataSheet.Range(toXlA1str(Skari.DataRge))
        Set OutRge = actSheet.Range("A2")
        itemnum = DataRge.Columns.Count
        rowNum = itemnum * (itemnum - 1) / 2
        If rowNum < 1 Then rowNum = 1
        If Skari.corrType = 4 Then
            Set datarge1 = OutRge(4, 1).Resize(rowNum, 11)
            vdata = datarge1.Value
            Set OutRge = OutRge(rowNum + 5, 1)
            OutRge = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
        ElseIf Skari.corrType = 5 Then
            Set datarge1 = OutRge(3, 1).Resize(rowNum, 11)
            vdata = datarge1.Value
            Set OutRge = OutRge(rowNum + 5, 1)
            OutRge = "|fffd|P|fffd||fffd||fffd|h|fffd|[|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|"
        Else
            Set datarge1 = OutRge(3, 1).Resize(rowNum, 11)
            vdata = datarge1.Value
            Set OutRge = OutRge(rowNum + 5, 1)
            OutRge = "|fffd|X|fffd|s|fffd|A|fffd|}|fffd||fffd||fffd||30f||fffd||fffd||291||fffd||fffd||58c|W|fffd||fffd|"
        End If
        k = 1
        Set OutRge = OutRge(3, 1)
        For i = 1 To itemnum
            OutRge(i + 1, 1) = DataRge(1, i)
            OutRge(1, i + 1) = DataRge(1, i)
            OutRge(i + 1, i + 1) = 1
            For j = i + 1 To itemnum
                OutRge(i + 1, j + 1) = vdata(k, 3)
                OutRge(j + 1, i + 1) = vdata(k, 3)
                OutRge(i + 1, j + 1).NumberFormat = "0.000"
                OutRge(j + 1, i + 1).NumberFormat = "0.000"
                k = k + 1
            Next j
        Next i
        Call SetRangeBorder(OutRge, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(2, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(1, 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(OutRge(2, 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        Set OutRge = OutRge(itemnum + 3, 1)
        OutRge = "|fffd||fffd||fffd||fffd|"
        k = 1
        Set OutRge = OutRge(2, 1)
        For i = 1 To itemnum
            OutRge(i + 1, 1) = DataRge(1, i)
            OutRge(1, i + 1) = DataRge(1, i)
            OutRge(i + 1, i + 1) = "-"
            For j = i + 1 To itemnum
                OutRge(i + 1, j + 1) = vdata(k, 2)
                OutRge(j + 1, i + 1) = vdata(k, 2)
                k = k + 1
            Next j
        Next i
        Call SetRangeBorder(OutRge, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(2, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(1, 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(OutRge(2, 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    
        Set OutRge = OutRge(itemnum + 3, 1)
        If Skari.corrType = 4 Then
            If Skari.sccType = 1 Then
                OutRge = "|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|"
            Else
                OutRge = "|fffd||a44a||fffd||582||30c||fffd||fffd||fffd|"
            End If
            Set OutRge = OutRge(2, 1)
        End If
        OutRge = "p|fffd|l"
        If Skari.corrType = 3 Then
            OutRge(1, itemnum + 3) = "p|fffd|l|fffd|i|fffd||7ce||fffd||fffd|j"
        End If
        k = 1
        Set OutRge = OutRge(2, 1)
        For i = 1 To itemnum
            OutRge(i + 1, 1) = DataRge(1, i)
            OutRge(1, i + 1) = DataRge(1, i)
            OutRge(i + 1, i + 1) = "-"
            If Skari.corrType = 3 Then
                OutRge(i + 1, itemnum + 3) = DataRge(1, i)
                OutRge(1, i + itemnum + 3) = DataRge(1, i)
                OutRge(i + 1, i + itemnum + 3) = "-"
            End If
            For j = i + 1 To itemnum
                OutRge(i + 1, j + 1) = IIf(Skari.sccType = 4 Or Skari.sccType = 1, vdata(k, 10), vdata(k, 5))
                OutRge(j + 1, i + 1) = IIf(Skari.sccType = 4 Or Skari.sccType = 1, vdata(k, 10), vdata(k, 5))
                OutRge(i + 1, j + 1).NumberFormat = "0.000"
                OutRge(j + 1, i + 1).NumberFormat = "0.000"
                If Skari.corrType = 3 Then
                    OutRge(i + 1, j + itemnum + 3) = vdata(k, 8)
                    OutRge(j + 1, i + itemnum + 3) = vdata(k, 8)
                    OutRge(i + 1, j + itemnum + 3).NumberFormat = "0.000"
                    OutRge(j + 1, i + itemnum + 3).NumberFormat = "0.000"
                End If
                k = k + 1
            Next j
        Next i
        Call SetRangeBorder(OutRge, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(2, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(1, 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(OutRge(2, 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        If Skari.corrType = 3 Then
            Call SetRangeBorder(OutRge(1, 1 + itemnum + 2), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(OutRge(2, 1 + itemnum + 2).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(OutRge(1, 2 + itemnum + 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
            Call SetRangeBorder(OutRge(2, 2 + itemnum + 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        End If
        
        Set OutRge = OutRge(itemnum + 3, 1)
        If Skari.sccType = 1 Then
            OutRge = "|fffd||fffd||fffd||fffd|"
            If Skari.corrType = 3 Then
                OutRge(1, itemnum + 3) = "|fffd||fffd||fffd||fffd|"
            End If
        Else
            OutRge = "|fffd||fffd|r|fffd|l"
            OutRge(1, 3) = Skari.CmpValue
        End If
        k = 1
        Set OutRge = OutRge(2, 1)
        For i = 1 To itemnum
            OutRge(i + 1, 1) = DataRge(1, i)
            OutRge(1, i + 1) = DataRge(1, i)
            OutRge(i + 1, i + 1) = "-"
            If Skari.corrType = 3 Then
                OutRge(i + 1, 1 + itemnum + 2) = DataRge(1, i)
                OutRge(1, i + 1 + itemnum + 2) = DataRge(1, i)
                OutRge(i + 1, i + 1 + itemnum + 2) = "-"
            End If
            For j = i + 1 To itemnum
                OutRge(i + 1, j + 1) = IIf(Skari.corrType = 4, vdata(k, 11), vdata(k, 6))
                OutRge(j + 1, i + 1) = IIf(Skari.corrType = 4, vdata(k, 11), vdata(k, 6))
                If Skari.corrType = 3 Then
                    OutRge(i + 1, j + 1 + itemnum + 2) = vdata(k, 9)
                    OutRge(j + 1, i + 1 + itemnum + 2) = vdata(k, 9)
                End If
                k = k + 1
            Next j
        Next i
        Call SetRangeBorder(OutRge, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(2, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(OutRge(1, 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(OutRge(2, 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        If Skari.corrType = 3 Then
            Call SetRangeBorder(OutRge(1, 1 + itemnum + 2), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(OutRge(2, 1 + itemnum + 2).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(OutRge(1, 2 + itemnum + 2).Resize(1, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
            Call SetRangeBorder(OutRge(2, 2 + itemnum + 2).Resize(itemnum, itemnum), xlThin, xlThin, xlThin, xlThin, xlHairline)
        End If
        
        Set OutRge = actSheet.Range("A2").Resize(rowNum + 4, IIf(Skari.corrType = 3, 11 + itemnum + 2, 11))
        OutRge.Delete Shift:=xlUp
        ActiveWindow.DisplayGridlines = False
    ElseIf rtn = 0 Then
        Set actSheet = ActiveSheet
        ActiveWindow.DisplayGridlines = False
        If Skari.corrType = 7 Then
            Set KKS_fSkAri_Internal = actSheet.Range("A2").Resize(3, 6)
        End If
    End If
End Function

Private Sub Spm_DataRge_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgSpearman")
    bOn = (dlg.OptionButtons("optMatrix").Value = xlOn)
    dlg.EditBoxes("edtDataRge").Enabled = bOn
    dlg.EditBoxes("edtDataRge1").Enabled = Not bOn
    dlg.EditBoxes("edtDataRge2").Enabled = Not bOn
End Sub

Private Sub Spm_NewSheet_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgSpearman")
    bOn = (dlg.OptionButtons("optNewSheet").Value = xlOn)
    dlg.EditBoxes("edtOutRge").Enabled = Not bOn
End Sub

Private Sub SetMacro_Spearman()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgSpearman")
    dlg.OptionButtons("optMatrix").OnAction = "Spm_DataRge_Click"
    dlg.OptionButtons("optCrowd").OnAction = "Spm_DataRge_Click"
    dlg.OptionButtons("optNewSheet").OnAction = "Spm_NewSheet_Click"
    dlg.OptionButtons("optOutRge").OnAction = "Spm_NewSheet_Click"
    Spm_DataRge_Click
    Spm_NewSheet_Click
End Sub

Sub KKS_Spm_Ord()
    Dim rtn As Integer
    Dim DataRge As Range, datarge1 As Range, datarge2 As Range
    Dim OutRge As Range
    Dim NewSheet As Boolean
    Dim dlg As DialogSheet
    Dim Skari As SKARI_TBL
    Set dlg = ThisWorkbook.DialogSheets("DlgSpearman")
    dlg.Shapes("GroupOutput").Visible = False '11.5.22
    SetMacro_Spearman
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Skari.dataType = IIf(dlg.OptionButtons("optMatrix").Value = xlOn, 1, 2)
        Skari.NewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        Skari.DataRge = toXlRCstr(dlg.EditBoxes("edtDataRge").text)
        Skari.datarge1 = toXlRCstr(dlg.EditBoxes("edtDataRge1").text)
        Skari.datarge2 = toXlRCstr(dlg.EditBoxes("edtDataRge2").text)
        Skari.OutRge = toXlRCstr(dlg.EditBoxes("edtOutRge").text)
        Skari.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Skari.AllVariables = IIf(dlg.OptionButtons("optAllVariables").Value = xlOn, 1, 2)
        Skari.corrType = 6
        Skari.flgDirt = 0
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fSkAri_Vba(Skari)
        If rtn = 1 Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
            GoTo redisp
        End If
        If rtn = 2 Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Private Sub Kdl_DataRge_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgKendall")
    bOn = (dlg.OptionButtons("optMatrix").Value = xlOn)
    dlg.EditBoxes("edtDataRge").Enabled = bOn
    dlg.EditBoxes("edtDataRge1").Enabled = Not bOn
    dlg.EditBoxes("edtDataRge2").Enabled = Not bOn
End Sub

Private Sub Kdl_NewSheet_Click()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgKendall")
    bOn = (dlg.OptionButtons("optNewSheet").Value = xlOn)
    dlg.EditBoxes("edtOutRge").Enabled = Not bOn
End Sub

Private Sub SetMacro_Kdl()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgKendall")
    dlg.OptionButtons("optMatrix").OnAction = "Kdl_DataRge_Click"
    dlg.OptionButtons("optCrowd").OnAction = "Kdl_DataRge_Click"
    dlg.OptionButtons("optNewSheet").OnAction = "Kdl_NewSheet_Click"
    dlg.OptionButtons("optOutRge").OnAction = "Kdl_NewSheet_Click"
    Kdl_DataRge_Click
    Kdl_NewSheet_Click
End Sub

Sub KKS_Kdl_Ord()
    Dim rtn As Integer
    Dim DataRge As Range, datarge1 As Range, datarge2 As Range
    Dim OutRge As Range
    Dim NewSheet As Boolean
    Dim dlg As DialogSheet
    Dim Skari As SKARI_TBL
    Set dlg = ThisWorkbook.DialogSheets("DlgKendall")
    dlg.Shapes("GroupOutput").Visible = False '11.5.22
    SetMacro_Kdl
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Skari.dataType = IIf(dlg.OptionButtons("optMatrix").Value = xlOn, 1, 2)
        Skari.NewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        Skari.DataRge = toXlRCstr(dlg.EditBoxes("edtDataRge").text)
        Skari.datarge1 = toXlRCstr(dlg.EditBoxes("edtDataRge1").text)
        Skari.datarge2 = toXlRCstr(dlg.EditBoxes("edtDataRge2").text)
        Skari.OutRge = toXlRCstr(dlg.EditBoxes("edtOutRge").text)
        Skari.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Skari.AllVariables = IIf(dlg.OptionButtons("optAllVariables").Value = xlOn, 1, 2)
        Skari.corrType = 3
        Skari.flgDirt = 0
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fSkAri_Vba(Skari)
        If rtn = 1 Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
            GoTo redisp
        End If
        If rtn = 2 Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub KKS_Kdl_Ich_1P01()
    Dim rtn As Integer
    Dim DataRge As Range, datarge1 As Range, datarge2 As Range
    Dim OutRge As Range
    Dim NewSheet As Boolean
    Dim dlg As DialogSheet
    Dim Skari As SKARI_TBL
    Set dlg = ThisWorkbook.DialogSheets("DlgIch")
    SetMacro_Kdl
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Skari.dataType = 1 'IIf(dlg.OptionButtons("optMatrix").Value = xlOn, 1, 2)
        Skari.NewSheet = 0 'IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        Skari.DataRge = toXlRCstr(dlg.EditBoxes("edtDataRge").text)
        Skari.datarge1 = vbNullString 'toXlRCstr(dlg.EditBoxes("edtDataRge1").Text)
        Skari.datarge2 = vbNullString 'toXlRCstr(dlg.EditBoxes("edtDataRge2").Text)
        Skari.OutRge = toXlRCstr(dlg.EditBoxes("edtOutRge").text) '11.5.22 old: vbNullString '
        Skari.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Skari.AllVariables = 1 'IIf(dlg.OptionButtons("optAllVariables").Value = xlOn, 1, 2)
        Skari.corrType = 7
        Skari.flgDirt = 0
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fSkAri_Vba(Skari)
        If rtn = 1 Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
            GoTo redisp
        End If
        If rtn = 2 Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub KKS_Ord_1P01()
    Dim rtn As Integer
    Dim DataRge As Range, datarge1 As Range, datarge2 As Range
    Dim OutRge As Range
    Dim NewSheet As Boolean
    Dim dlg As DialogSheet
    Dim Skari As SKARI_TBL
    Set dlg = ThisWorkbook.DialogSheets("DlgOrd")
    dlg.Shapes("GroupOutput").Visible = False
    SetMacro_Kdl
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Skari.dataType = IIf(dlg.OptionButtons("optMatrix").Value = xlOn, 1, 2)
        Skari.NewSheet = IIf(dlg.OptionButtons("optNewSheet").Value = xlOn, 1, 0)
        Skari.DataRge = toXlRCstr(dlg.EditBoxes("edtDataRge").text)
        Skari.datarge1 = toXlRCstr(dlg.EditBoxes("edtDataRge1").text)
        Skari.datarge2 = toXlRCstr(dlg.EditBoxes("edtDataRge2").text)
        Skari.OutRge = toXlRCstr(dlg.EditBoxes("edtOutRge").text)
        Skari.Except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Skari.AllVariables = IIf(dlg.OptionButtons("optAllVariables").Value = xlOn, 1, 2)
        Skari.corrType = 9
        Skari.flgDirt = 0
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = fSkAri_Vba(Skari)
        If rtn = 1 Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
            GoTo redisp
        End If
        If rtn = 2 Then
            MsgBox "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
            GoTo redisp
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
'=== EOF ===

Attribute VB_Name = "sssTk2"
'=======================================================
' SSS|fffd||fffd||fffd|vVer6 : DLL |fffd||fffd||fffd|v 2
'
' 2005.9 LSQ
'=======================================================
Option Private Module
Option Explicit

Type TK2_DEF
    datarge1 As String
    datarge2 As String
    OutRge As String
    flgDataTitle As Long
    flgExcept As Long
    flgSide As Long
    flgKind As Long
    nCalcMethod As Long
    pCode As Long
End Type


Private Type BASICSTAT_VBA
    DataRge As String
    OutRge As String
    f_datatitle As Long
    f_except As Long
    f_allOut As Long
    f_median As Long
    f_kurtosis As Long
    f_skewness As Long
    f_modevalue As Long
    f_quardev As Long
    f_percent As Long
    percent1 As Double
    percent2 As Double
End Type

Private Type WKS_ARI_RESULT
    name1 As String
    name2 As String
    nPositive  As Long
    nNegative As Long
    nZero As Long
    ValidSample As Long
    RankDataSum As Double
    RankDataSum1 As Double
    RankDataSum2 As Double
    p1 As Double
    p5 As Double
    stat As Double
    pval As Double
    aval As Double
    pExact As Double
End Type

Private Type WKS_ARI_SET
    TK2Info As TK2_DEF
    flg3Grp As Long
    flgSide As Long
    flg3GrpPVal As Long
    flgDataProc As Long
    vRstAri() As WKS_ARI_RESULT
End Type

Private Type WKS_NSI_RESULT
    name1 As String
    name2 As String
    n1  As Long
    n2 As Long
    RankDataSum1 As Double
    RankDataSum2 As Double
    p1 As Double
    p5 As Double
    stat As Double
    pval As Double
    uval As Double
    aval As Double
    pExact As Double
End Type

Private Type WKS_NSI_SET
    TK2Info As TK2_DEF
    flg3Grp As Long
    flgSide As Long
    flg3GrpPVal As Long
    flgDataProc As Long
    vRstNsi() As WKS_NSI_RESULT
End Type

Private Const m_XmlFile As String = "\TK2_WSK.XML"
Private Const m_XslFile As String = "\TK2_WSK.xsl"
Private Tk2Para As TK2_DEF

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function DllTk2_Main Lib "KKS_SubH_64.dll" (callFlg As Integer) As Integer
    Declare PtrSafe Function DllTk2_Main_Vba Lib "KKS_SubH_64.dll" (TK2Tbl As TK2_DEF) As Integer
    #Else
    Declare PtrSafe Function DllTk2_Main Lib "KKS_SubH.dll" (callFlg As Integer) As Integer
    Declare PtrSafe Function DllTk2_Main_Vba Lib "KKS_SubH.dll" (TK2Tbl As TK2_DEF) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function DllTk2_Main Lib "KKS_SubH_64.dll" (callFlg As Integer) As Integer
    Declare Function DllTk2_Main_Vba Lib "KKS_SubH_64.dll" (TK2Tbl As TK2_DEF) As Integer
    #Else
    Declare Function DllTk2_Main Lib "KKS_SubH.dll" (callFlg As Integer) As Integer
    Declare Function DllTk2_Main_Vba Lib "KKS_SubH.dll" (TK2Tbl As TK2_DEF) As Integer
    #End If
#End If

'---------------------------------------------------------------

#If 0 Then
Sub ST_boheikin()               '|fffd||a57d||fffd||3c2||310||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(1)
End Sub

Sub ST_bohiritu()               '|fffd||fffd||45e6||fffd||310||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(2)
End Sub

Sub ST_bobusan()               '|fffd||a56a||fffd|U|fffd||310||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(3)
End Sub

Sub boheikik()               '|fffd||a57d||fffd||3c2||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(4)
End Sub

Sub bohirituk()               '|fffd||fffd||45e6||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(5)
End Sub

Sub bobusak()                 '|fffd||a56a||fffd|U|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(6)
End Sub

Sub bheikisa()                 '|fffd||a57d||fffd||3c2||30d||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(7)
End Sub

Sub bohiritusa()                 '|fffd||fffd||45e6||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(8)
End Sub

Sub bobusahi()                 '|fffd||a56a||fffd|U|fffd||314||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(9)
End Sub

Sub tekigodo()                 '|fffd|K|fffd||fffd||fffd|x|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(10)
End Sub

Sub dokuritu()                 '|fffd||197||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(11)
End Sub


Sub bheikisaf()                 '|fffd||a57d||fffd||3c2||30d||fffd||fffd||30c||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd||694||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(15)
End Sub

Sub bohiritusaf()                 '|fffd||fffd||45e6||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||694||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(16)
End Sub

Sub doKT_ANSA()                 '|fffd|A|fffd||fffd||fffd|T|fffd||fffd||fffd|[|fffd|E|fffd|u|fffd||fffd||fffd|b|fffd|h|fffd||fffd||fffd|C|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(17)
End Sub

Sub doKT_RABE()                 '|fffd||fffd||fffd|y|fffd|[|fffd|W|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(18)
End Sub

Sub doKT_KOM1()                 '|fffd|R|fffd||fffd||fffd||fffd||fffd|S|fffd||fffd||fffd|t|fffd|E|fffd|X|fffd|~|fffd||fffd||fffd|m|fffd|t|fffd||30c||fffd||fffd||fffd|(1|fffd|W|fffd|{)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(19)
End Sub

Sub doKT_KOM2()                 '|fffd|R|fffd||fffd||fffd||fffd||fffd|S|fffd||fffd||fffd|t|fffd|E|fffd|X|fffd|~|fffd||fffd||fffd|m|fffd|t|fffd||30c||fffd||fffd||fffd|(2|fffd|W|fffd|{)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(20)
End Sub

Sub doNPR_makunema()                 '|fffd|}|fffd|N|fffd|l|fffd|}|fffd|[|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(22)
End Sub

Sub doSumi()                          '|fffd|X|fffd|~|fffd||fffd||fffd|m|fffd|t|fffd|E|fffd|O|fffd||fffd||fffd|u|fffd|X|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer, callFlg As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    callFlg = 23 'IIf(TK6P05_VID = TK6P05_SSS, 23, 34) '09.1.20 LSQ
    rtn = DllTk2_Main(callFlg)

End Sub

Sub KT_BunsanSa1()                          '|fffd||fffd||fffd||fffd||fffd|U|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(24)
End Sub

Sub KT_HiritsuSa_M1()                          '|fffd|R|fffd|N|fffd||fffd||fffd||fffd||fffd||302|p|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(25)
End Sub

Sub NPR_DokuRitu1()                          '|fffd||fffd||fffd||fffd||fffd|l|fffd|i|fffd||fffd||fffd|f|fffd|B|fffd|A|fffd||fffd||fffd|j|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(26)
End Sub

Sub ssize_AVG()                             '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(27)
End Sub

Sub NPR_walonn1()                             '|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd|(|fffd||389||fffd||fffd||202||fffd|)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(28)
End Sub

Sub NPR_walonn2()                             '|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd|y|fffd||389||fffd||fffd||fffd||fffd||fffd|z(|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||202||fffd|)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(29)
End Sub

Sub NPR_walonn2y()                            '|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30d||fffd||fffd||30c||fffd||fffd||fffd|y|fffd||389||fffd||fffd||fffd||fffd||fffd|z(|fffd|d|fffd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd||fffd||fffd|)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(32)
End Sub

Sub doKokuam()
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(30)
End Sub

Sub ST_boOzu()                  '|fffd||fffd|I|fffd|b|fffd|Y|fffd||fffd||310||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(31)
End Sub

'05.12.19 LSQ add
Sub normTest_SW()                          '|fffd||fffd||fffd|K|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(33)
End Sub

#End If

Sub OutputWsk(ByVal varRge1 As Range, ByVal varRge2 As Range, ByVal OutRge As Range)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim outWsk As New ClsWsk
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    xslFName = ThisWorkbook.Path & m_XslFile
    If Not bFileExist(xslFName) Then Exit Sub
    Call outWsk.Initialize(fname, xslFName)
    Call outWsk.OutputWsk(varRge1, varRge2, OutRge)
    Set outWsk = Nothing
End Sub

Sub OutputWsk2(ByVal varRge1 As Range, ByVal varRge2 As Range, ByVal OutRge As Range)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim outWsk As New ClsWsk
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    xslFName = ThisWorkbook.Path & m_XslFile
    If Not bFileExist(xslFName) Then Exit Sub
    Call outWsk.Initialize(fname, xslFName)
    Call outWsk.OutputWsk2(varRge1, varRge2, OutRge)
    Set outWsk = Nothing
End Sub

Private Function Calc_Wks_Nsi(wksPara As WKS_NSI_SET) As Long
    Dim i As Long, j As Long, k As Long
    Dim itemnum As Long, smpnum As Long
    Dim nloop1 As Long, nloop2 As Long, nLoop As Long
    Dim r1 As Range, r2 As Range, rout As Range
    Dim tmpsht As Worksheet, tmpshtOut As Worksheet
    Dim rtn As Integer
    Dim vbapara As NGN_VBA
    Dim NsiPara As TK2_DEF
    Dim newrow As Long
    Dim jval As Double, n As Long
    Calc_Wks_Nsi = -1
    On Error Resume Next
    Set r1 = Range(wksPara.TK2Info.datarge1)
    If r1 Is Nothing Then Exit Function
    itemnum = r1.Columns.Count
    smpnum = r1.Rows.Count
    If wksPara.flg3Grp = 1 Then
        nloop1 = itemnum - 1
        nloop2 = itemnum
        nLoop = nloop1 * nloop2 / 2
        ReDim wksPara.vRstNsi(1 To nloop1 * nloop2 / 2)
    Else
        nloop1 = 1
        nloop2 = itemnum
        nLoop = itemnum - 1
        ReDim wksPara.vRstNsi(1 To itemnum - 1)
    End If
    Set tmpsht = handleWksData(wksPara.TK2Info, wksPara.flgDataProc)
    If tmpsht Is Nothing Then
        Exit Function
    End If
    vbapara.DataRge = wksPara.TK2Info.datarge1
    vbapara.OutRge = wksPara.TK2Info.OutRge
    GActShtObj.Activate
    Set r2 = Range(vbapara.OutRge)
    r2 = "|fffd|}|fffd||fffd||fffd|E|fffd|z|fffd|C|fffd|b|fffd|g|fffd|j|fffd|[|fffd||302|t|fffd||fffd||fffd||fffd|i|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||30f||fffd||fffd||298|a|fffd||fffd||fffd||fffd|j"
    r2.Font.Bold = True
    newrow = 3
    newrow = newrow + CalcBasicStat(newrow, vbapara)
    NsiPara = wksPara.TK2Info
    GActShtObj.Activate
    Set r1 = Range(wksPara.TK2Info.datarge1)
    Set tmpshtOut = tmpsht.Parent.Worksheets.Add
    GActShtObj.Activate
    Set rout = tmpshtOut.Range("A1")
    NsiPara.OutRge = toXlRCstr("'" & tmpshtOut.name & "'!" & rout.Address)
    k = 1
    For i = 1 To nloop1
        NsiPara.datarge1 = toXlRCstr("'" & tmpsht.name & "'!" & r1.Columns(i).Address)
        For j = i + 1 To nloop2
            NsiPara.datarge2 = toXlRCstr("'" & tmpsht.name & "'!" & r1.Columns(j).Address)
            GActShtObj.Activate
            Call changeToSSDir
            rtn = DllTk2_Main_Vba(NsiPara)
            If rtn = 0 Then
                'OutputWsk2 Range(toXlA1str(AriPara.datarge1)), Range(toXlA1str(AriPara.datarge2)), Range(toXlA1str(AriPara.OutRge))
                'wksPara.vRst(k) = rout.Resize(12, 5).Value
                wksPara.vRstNsi(k).name1 = r1(1, i)
                wksPara.vRstNsi(k).name2 = r1(1, j)
                Call GetWksResult_Nsi(wksPara.vRstNsi(k))
                If wksPara.vRstNsi(k).aval = 0 Then
                    n = wksPara.vRstNsi(k).n1 + wksPara.vRstNsi(k).n2
                    jval = WorksheetFunction.min(wksPara.vRstNsi(k).RankDataSum1, wksPara.vRstNsi(k).RankDataSum2)
                    wksPara.vRstNsi(k).pExact = LevelOfSignificanceWXMPSR(jval, n)
                    If wksPara.flg3GrpPVal = 2 Then
                        wksPara.vRstNsi(k).pExact = wksPara.vRstNsi(k).pExact * (nLoop - k + 1)
                    End If
                    If wksPara.vRstNsi(k).pExact > 1 Then wksPara.vRstNsi(k).pExact = 1
                Else
                    wksPara.vRstNsi(k).pExact = DBL_ERR
                End If
                If wksPara.flg3GrpPVal = 2 Then
                    wksPara.vRstNsi(k).pval = wksPara.vRstNsi(k).pval * (nLoop - k + 1)
                End If
                If wksPara.vRstNsi(k).pval > 1 Then wksPara.vRstNsi(k).pval = 1
            ElseIf rtn = 110 Or rtn = 114 Or rtn = 206 Then
            End If
            k = k + 1
        Next j
    Next i
    Call OutWks_Nsi(wksPara, newrow)
    Application.DisplayAlerts = False
    tmpsht.Delete
    tmpshtOut.Delete
    Application.DisplayAlerts = True
    Calc_Wks_Nsi = 0
    On Error GoTo 0
End Function

#If 0 Then
Sub KKS_Wks_Nsi_1P01()                 '|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Set dlg = ThisWorkbook.DialogSheets("DlgWsk")
    dlg.Unprotect
    dlg.DialogFrame.Caption = "|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||389||fffd||fffd||202||fffd||fffd|j"
    dlg.Protect
redisp:
    If Not bXMLAvailable Then Exit Sub
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk2Para.datarge1 = toXlRCstr(dlg.EditBoxes("RgeDataIn1").text)
        Tk2Para.datarge2 = toXlRCstr(dlg.EditBoxes("RgeDataIn2").text)
        Tk2Para.OutRge = toXlRCstr(dlg.EditBoxes("RgeDataOut").text)
        Tk2Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk2Para.flgSide = IIf(dlg.OptionButtons("optBoth").Value = xlOn, 1, 2)
        Tk2Para.flgKind = 1
        Tk2Para.pCode = 12
        Tk2Para.nCalcMethod = 1
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk2_Main_Vba(Tk2Para)
        If rtn = 0 Then
            OutputWsk Range(toXlA1str(Tk2Para.datarge1)), Range(toXlA1str(Tk2Para.datarge2)), Range(toXlA1str(Tk2Para.OutRge))
        ElseIf rtn = 110 Or rtn = 114 Or rtn = 206 Then
            GoTo redisp
        End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#Else
Sub KKS_Wks_Nsi_1P01()                 '|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Dim wksPara As WKS_NSI_SET
    Set GActShtObj = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgWsk_Nsi")
    'dlg.Unprotect
    'dlg.DialogFrame.Caption = "|fffd||389||fffd||fffd||302||202||fffd||fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|i|fffd|}|fffd||fffd||fffd|E|fffd|z|fffd|C|fffd|b|fffd|g|fffd|j|fffd|[|fffd||302|t|fffd||fffd||fffd||fffd|j"
    'dlg.Protect
redisp:
    If Not bXMLAvailable Then Exit Sub
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        wksPara.TK2Info.datarge1 = (dlg.EditBoxes("RgeDataIn").text)
        wksPara.TK2Info.OutRge = (dlg.EditBoxes("RgeDataOut").text)
        wksPara.TK2Info.flgExcept = 1
        wksPara.TK2Info.flgSide = IIf(dlg.OptionButtons("optBoth").Value = xlOn, 1, 2)
        wksPara.TK2Info.flgKind = 1
        wksPara.TK2Info.nCalcMethod = 2
        wksPara.TK2Info.pCode = 12
        wksPara.flg3Grp = IIf(dlg.OptionButtons("opt3Grp1").Value = xlOn, 1, 2)
        wksPara.flg3GrpPVal = IIf(dlg.OptionButtons("opt3Col1").Value = xlOn, 1, 2)
        wksPara.flgDataProc = 2
        wksPara.flgSide = wksPara.TK2Info.flgSide
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = Calc_Wks_Nsi(wksPara)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#End If
Private Function handleWksData(wksPara As TK2_DEF, Optional ByVal flgDataProc As Long = 1) As Worksheet
    Dim i As Long, j As Long
    Dim smpnum As Long, itemnum As Long
    Dim r As Range, r1 As Range
    Dim tmpsht As Worksheet
    Dim v As Variant
    On Error Resume Next
    Set handleWksData = Nothing
    Set r = Range(wksPara.datarge1)
    If r Is Nothing Then Exit Function
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    For i = 1 To itemnum
        If WorksheetFunction.Count(r.Columns(i)) < 1 Then
            MsgBox MSG_nodata
            Exit Function
        End If
    Next i
    v = r.Value
    Set tmpsht = r.Worksheet.Parent.Worksheets.Add
    Set r1 = tmpsht.Range("A1").Resize(smpnum, itemnum)
    r1 = v
    If flgDataProc = 1 Then
        For i = smpnum To 2 Step -1
            If WorksheetFunction.Count(r1.Rows(i)) <> itemnum Then
                tmpsht.Rows(r1.Rows(i).row).Delete
                smpnum = smpnum - 1
            End If
        Next i
        If smpnum < 2 Then
            MsgBox MSG_nodata
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            Exit Function
        End If
    End If
    Set r1 = tmpsht.Range("A1").Resize(smpnum, itemnum)
    wksPara.datarge1 = "'" & tmpsht.name & "'!" & r1.Address
    Set handleWksData = tmpsht
    On Error GoTo 0
End Function

Private Sub GetWksResult_Ari(rst As WKS_ARI_RESULT)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim xmlObj As Object, searchObj As Object
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    Set xmlObj = CreateXMLDom
    xmlObj.async = False
    xmlObj.setProperty "SelectionLanguage", "XPath"
    Call xmlObj.Load(fname)
    If xmlObj Is Nothing Then Exit Sub
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/nPositive")
    If Not searchObj Is Nothing Then
        rst.nPositive = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/nNegative")
    If Not searchObj Is Nothing Then
        rst.nNegative = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/nZero")
    If Not searchObj Is Nothing Then
        rst.nZero = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/ValidSample")
    If Not searchObj Is Nothing Then
        rst.ValidSample = CLng(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/RankDataSum1")
    If Not searchObj Is Nothing Then
        rst.RankDataSum1 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/RankDataSum2")
    If Not searchObj Is Nothing Then
        rst.RankDataSum2 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/RankDataSum")
    If Not searchObj Is Nothing Then
        rst.RankDataSum = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/P1")
    If Not searchObj Is Nothing Then
        rst.p1 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/P5")
    If Not searchObj Is Nothing Then
        rst.p5 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Prob")
    If Not searchObj Is Nothing Then
        rst.pval = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Tokei")
    If Not searchObj Is Nothing Then
        rst.stat = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/AValue")
    If Not searchObj Is Nothing Then
        rst.aval = CDbl(searchObj.text)
    End If
    Set xmlObj = Nothing
End Sub

Private Sub GetWksResult_Nsi(rst As WKS_NSI_RESULT)
    Dim fname As String, xslFName As String
    Dim objXMLSearchDocument As Object
    Dim objXMLSearchElement As Object
    Dim xmlObj As Object, searchObj As Object
    fname = GetMyDocPathName() & m_XmlFile
    If fname = vbNullString Then Exit Sub
    If Not bFileExist(fname) Then Exit Sub
    Set xmlObj = CreateXMLDom
    xmlObj.async = False
    xmlObj.setProperty "SelectionLanguage", "XPath"
    Call xmlObj.Load(fname)
    If xmlObj Is Nothing Then Exit Sub
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Group/V[1]/cnt")
    If Not searchObj Is Nothing Then
        rst.n1 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Group/V[2]/cnt")
    If Not searchObj Is Nothing Then
        rst.n2 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Group/V[1]/rank")
    If Not searchObj Is Nothing Then
        rst.RankDataSum1 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Group/V[2]/rank")
    If Not searchObj Is Nothing Then
        rst.RankDataSum2 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/P1")
    If Not searchObj Is Nothing Then
        rst.p1 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/P5")
    If Not searchObj Is Nothing Then
        rst.p5 = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Prob")
    If Not searchObj Is Nothing Then
        rst.pval = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/Tokei")
    If Not searchObj Is Nothing Then
        rst.stat = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/UValue")
    If Not searchObj Is Nothing Then
        rst.uval = CDbl(searchObj.text)
    End If
    Set searchObj = xmlObj.SelectSingleNode("//root/Info/AValue")
    If Not searchObj Is Nothing Then
        rst.aval = CDbl(searchObj.text)
    End If
    Set xmlObj = Nothing
End Sub

Function ChangeMark(ByVal strMark As String) As String
    strMark = Replace(strMark, "[", "")
    strMark = Replace(strMark, "]", "")
    If InStr(1, strMark, "*") < 1 Then
        strMark = "n.s."
    End If
    ChangeMark = strMark
End Function

Private Sub OutWks_Ari(mwin As WKS_ARI_SET, ByVal newrow As Long)
    Dim i As Long, j As Long, k As Long, l As Long, ii As Long, jj As Long
    Dim smpnum As Long, itemnum As Long
    Dim r As Range, rdata As Range
    Set rdata = Range(mwin.TK2Info.datarge1)
    itemnum = rdata.Columns.Count
    smpnum = rdata.Rows.Count
    If mwin.flg3Grp = 1 Then
        l = itemnum * (itemnum - 1) / 2
    Else
        l = itemnum - 1
    End If
    GActShtObj.Activate
    Set r = Range(mwin.TK2Info.OutRge)
    Set r = r(newrow, 1)
    r(1, 1) = "|fffd||fffd||fffd|T|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd|"
    r(1, 4) = "|fffd||fffd||fffd||341|u|fffd|O|fffd||fffd|-|fffd||fffd||481|v"
    r(2, 4) = "|fffd||fffd|"
    r(2, 5) = "n"
    r(2, 6) = "|fffd||fffd||fffd||298|a"
    r(2, 7) = "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|"
    Call SetRangeBorder(r(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(2, 4), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(2, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    k = 3
    For i = 1 To l
        With mwin.vRstAri(i)
            r(k, 1) = i
            r(k, 2) = .name1
            r(k, 3) = .name2
            r(k, 4) = " |fffd||fffd|"
            r(k + 1, 4) = " |fffd||fffd|"
            r(k + 2, 4) = " |fffd|[|fffd||fffd|"
            r(k, 5) = .nPositive
            r(k + 1, 5) = .nNegative
            r(k + 2, 5) = .nZero
            r(k, 6) = .RankDataSum1
            r(k + 1, 6) = .RankDataSum2
            r(k + 2, 6) = "-"
            If .nPositive <> 0 Then
                r(k, 7) = CDbl(.RankDataSum1) / CInt(.nPositive)
            Else
                r(k, 7) = IIf(.RankDataSum1 = 0, 0, "-")
            End If
            If .nNegative <> 0 Then
                r(k + 1, 7) = CDbl(.RankDataSum2) / CInt(.nNegative)
            Else
                r(k + 1, 7) = IIf(.RankDataSum2 = 0, 0, "-")
            End If
            r(k + 2, 7) = "-"
        End With
        Call SetRangeBorder(r(k, 1).Resize(3, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(r(k, 2).Resize(3, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(r(k, 4).Resize(3, 1), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(r(k, 5).Resize(3, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        k = k + 3
    Next i
    r(k, 4) = "|fffd|u|fffd|[|fffd||fffd||fffd|v|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||34c|v|fffd|Z|fffd||fffd||fffd||73dc||fffd|O|fffd||fffd||fffd||fffd||702||fffd|"
    Set r = r(k + 1, 1)
    r(1, 9) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
    r(2, 1) = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(mwin.TK2Info.flgSide = 1, "|fffd||fffd||fffd||fffd|", "|fffd||411||fffd|")
    r(2, 5) = "|fffd||fffd||fffd||341|u|fffd||fffd|-|fffd||fffd||fffd|v"
    r(2, 6) = "Z|fffd|i|fffd||fffd||fffd|K|fffd||fffd||fffd|z|fffd|j"
    r(2, 11) = "|fffd||fffd||fffd|m|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||282||202||fffd||fffd||fffd|3|fffd||fffd|n|fffd||fffd|30|fffd|j"
    r(3, 4) = "n"
    r(3, 5) = "|fffd||fffd|"
    r(3, 6) = "|fffd||fffd||fffd|v|fffd||fffd|"
    If mwin.TK2Info.flgSide = 1 Then
        r(3, 7) = "0.5%|fffd|_"
        r(3, 8) = "2.5%|fffd|_"
    Else
        r(3, 7) = "1%|fffd|_"
        r(3, 8) = "5%|fffd|_"
    End If
    r(3, 9) = "p|fffd|l"
    r(3, 10) = "|fffd||fffd||fffd||fffd|"
    r(3, 11) = "p|fffd|l"
    r(3, 12) = "|fffd||fffd||fffd||fffd|"
    For i = 1 To l
        With mwin.vRstAri(i)
            r(3 + i, 1) = i
            r(3 + i, 2) = .name1
            r(3 + i, 3) = .name2
            r(3 + i, 4) = .nPositive + .nNegative '- .n(3)
            If .nPositive <> 0 Or .nNegative <> 0 Then
                If .nPositive = 0 And .nNegative <> 0 Then
                    r(3 + i, 5) = -.RankDataSum2 / .nNegative
                ElseIf .nPositive <> 0 And .nNegative = 0 Then
                    r(3 + i, 5) = .RankDataSum1 / .nPositive
                Else
                    r(3 + i, 5) = .RankDataSum1 / .nPositive - .RankDataSum2 / .nNegative
                End If
            Else
                r(3 + i, 5) = "-"
            End If
            If r(3 + i, 4) >= 3 Then
                r(3 + i, 6) = .stat
                If mwin.TK2Info.flgSide = 1 Then
                    r(3 + i, 7) = ZINV_05PCT
                    r(3 + i, 8) = ZINV_25PCT
                Else
                    r(3 + i, 7) = ZINV_1PCT
                    r(3 + i, 8) = ZINV_5PCT
                End If
                r(3 + i, 9) = .pval
                r(3 + i, 10) = IIf(.pval < 0.01, "**", IIf(.pval < 0.05, "* ", "n.s."))
                If .nPositive + .nNegative > 30 Then
                    r(3 + i, 11) = "-"
                    r(3 + i, 12) = "-"
                ElseIf .pExact = DBL_ERR Then
                    r(3 + i, 11) = "-"
                    r(3 + i, 12) = "-"
                Else
                    r(3 + i, 11) = .pExact
                    r(3 + i, 12) = IIf(.pExact < 0.01, "**", IIf(.pExact < 0.05, "* ", "n.s."))
                End If
            Else
                r(3 + i, 6).Resize(1, 7) = "-"
            End If
        End With
    Next i
    r(4, 6).Resize(l, 6).NumberFormat = "0.000"
    r(4, 11).Resize(l, 1).NumberFormat = "0.000"
    Call SetRangeBorder(r(2, 6).Resize(1, 5), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(2, 11).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(4, 1).Resize(l, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(4, 2).Resize(l, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(4, 4).Resize(l, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(3, 5).Resize(1, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(4, 5).Resize(l, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 11).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(4, 11).Resize(l, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    
    If mwin.flg3Grp = 1 Then
        Set r = r(4 + itemnum - 1, 1)
        For i = 1 To itemnum - 2
            With r.Resize(1, 12).Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .colorIndex = 1
                .Weight = xlHairline
            End With
            Set r = r(itemnum - i, 1)
        Next i
    End If
    Erase mwin.vRstAri
End Sub

Private Sub OutWks_Nsi(mwin As WKS_NSI_SET, ByVal newrow As Long)
    Dim i As Long, j As Long, k As Long, l As Long, ii As Long, jj As Long
    Dim smpnum As Long, itemnum As Long
    Dim r As Range, rdata As Range
    Set rdata = Range(mwin.TK2Info.datarge1)
    itemnum = rdata.Columns.Count
    smpnum = rdata.Rows.Count
    If mwin.flg3Grp = 1 Then
        l = itemnum * (itemnum - 1) / 2
    Else
        l = itemnum - 1
    End If
    GActShtObj.Activate
    Set r = Range(mwin.TK2Info.OutRge)
    Set r = r(newrow, 1)
    r(1, 1) = "|fffd||fffd||fffd|}|fffd||fffd||fffd|E|fffd|z|fffd|C|fffd|b|fffd|g|fffd|j|fffd|[|fffd||302|t|fffd||fffd||fffd||fffd|"
    r(2, 1).Resize(1, 5) = Array("", "|fffd|Q", "n", "|fffd||fffd||fffd||298|a", "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|")

    Call SetRangeBorder(r(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(2, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    k = 3
    For i = 1 To l
        With mwin.vRstNsi(i)
            r(k, 1) = i
            r(k, 2) = .name1
            r(k, 3) = .n1
            r(k, 4) = .RankDataSum1
            r(k, 5) = .RankDataSum1 / .n1
            r(k + 1, 2) = .name2
            r(k + 1, 3) = .n2
            r(k + 1, 4) = .RankDataSum2
            r(k + 1, 5) = .RankDataSum2 / .n2
        End With
        Call SetRangeBorder(r(k, 1).Resize(2, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(r(k, 4).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        k = k + 2
    Next i

    Set r = r(k + 1, 1)
    r(1, 9) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
    r(2, 1) = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(mwin.TK2Info.flgSide = 1, "|fffd||fffd||fffd||fffd|", "|fffd||411||fffd|")
    r(2, 4) = "|fffd||fffd||fffd||341|u|fffd|O|fffd||fffd|-|fffd||fffd||481|v"
    r(2, 6) = "Z|fffd|i|fffd||fffd||fffd|K|fffd||fffd||fffd|z|fffd|j"
    r(2, 11) = "|fffd||fffd||fffd|m|fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||282||202||fffd||fffd||157||fffd||fffd|Q|fffd||182||fffd|3|fffd||fffd|n|fffd||fffd|8|fffd|j"
    r(3, 4) = "|fffd||fffd|"
    r(3, 5) = "U|fffd|l"
    r(3, 6) = "|fffd||fffd||fffd|v|fffd||fffd|"
    If mwin.TK2Info.flgSide = 1 Then
        r(3, 7) = "0.5%|fffd|_"
        r(3, 8) = "2.5%|fffd|_"
    Else
        r(3, 7) = "1%|fffd|_"
        r(3, 8) = "5%|fffd|_"
    End If
    r(3, 9) = "p|fffd|l"
    r(3, 10) = "|fffd||fffd||fffd||fffd|"
    r(3, 11) = "p|fffd|l"
    r(3, 12) = "|fffd||fffd||fffd||fffd|"
    For i = 1 To l
        With mwin.vRstNsi(i)
            r(3 + i, 1) = i
            r(3 + i, 2) = .name1
            r(3 + i, 3) = .name2
            r(3 + i, 4) = (.RankDataSum1 / .n1) - (.RankDataSum2 / .n2)
            r(3 + i, 5) = .uval
            r(3 + i, 6) = .stat
            r(3 + i, 7) = .p1
            r(3 + i, 8) = .p5
            r(3 + i, 9) = .pval
            r(3 + i, 10) = IIf(.pval < 0.01, "**", IIf(.pval < 0.05, "* ", "n.s."))
            If .pExact = DBL_ERR Then
                r(3 + i, 11) = "-"
                r(3 + i, 12) = "-"
            Else
                r(3 + i, 11) = .pExact
                r(3 + i, 12) = IIf(.pExact < 0.01, "**", IIf(.pExact < 0.05, "* ", "n.s."))
            End If
        End With
    Next i
    r(4, 6).Resize(l, 3).NumberFormat = "0.00"
    r(4, 9).Resize(l, 1).NumberFormat = "0.000"
    Call SetRangeBorder(r(2, 6).Resize(1, 5), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(2, 11).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(4, 1).Resize(l, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 4).Resize(1, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(4, 4).Resize(l, 1), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(r(3, 5).Resize(1, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(4, 5).Resize(l, 6), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(3, 11).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(r(4, 11).Resize(l, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    
    If mwin.flg3Grp = 1 Then
        Set r = r(4 + itemnum - 1, 1)
        For i = 1 To itemnum - 2
            With r.Resize(1, 12).Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .colorIndex = 1
                .Weight = xlHairline
            End With
            Set r = r(itemnum - i, 1)
        Next i
    End If
    Erase mwin.vRstNsi
End Sub

Private Function Calc_Wks_Ari(wksPara As WKS_ARI_SET) As Long
    Dim i As Long, j As Long, k As Long
    Dim itemnum As Long, smpnum As Long
    Dim nloop1 As Long, nloop2 As Long, nLoop As Long
    Dim r1 As Range, r2 As Range, rout As Range
    Dim tmpsht As Worksheet, tmpshtOut As Worksheet
    Dim rtn As Integer
    Dim vbapara As NGN_VBA
    Dim AriPara As TK2_DEF
    Dim newrow As Long
    Dim jval As Double, n As Long
    Calc_Wks_Ari = -1
    On Error Resume Next
    Set r1 = Range(wksPara.TK2Info.datarge1)
    If r1 Is Nothing Then Exit Function
    itemnum = r1.Columns.Count
    smpnum = r1.Rows.Count
    If wksPara.flg3Grp = 1 Then
        nloop1 = itemnum - 1
        nloop2 = itemnum
        nLoop = nloop1 * nloop2 / 2
        ReDim wksPara.vRstAri(1 To nloop1 * nloop2 / 2)
    Else
        nloop1 = 1
        nloop2 = itemnum
        nLoop = itemnum - 1
        ReDim wksPara.vRstAri(1 To itemnum - 1)
    End If
    Set tmpsht = handleWksData(wksPara.TK2Info, wksPara.flgDataProc)
    If tmpsht Is Nothing Then
        Exit Function
    End If
    vbapara.DataRge = wksPara.TK2Info.datarge1
    vbapara.OutRge = wksPara.TK2Info.OutRge
    GActShtObj.Activate
    Set r2 = Range(vbapara.OutRge)
    r2 = "|fffd|T|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd|i|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||28c||fffd||fffd||fffd|j"
    r2.Font.Bold = True
    newrow = 3
    newrow = newrow + CalcBasicStat(newrow, vbapara)
    AriPara = wksPara.TK2Info
    GActShtObj.Activate
    Set r1 = Range(wksPara.TK2Info.datarge1)
    Set tmpshtOut = tmpsht.Parent.Worksheets.Add
    GActShtObj.Activate
    Set rout = tmpshtOut.Range("A1")
    AriPara.OutRge = toXlRCstr("'" & tmpshtOut.name & "'!" & rout.Address)
    k = 1
    For i = 1 To nloop1
        AriPara.datarge1 = toXlRCstr("'" & tmpsht.name & "'!" & r1.Columns(i).Address)
        For j = i + 1 To nloop2
            AriPara.datarge2 = toXlRCstr("'" & tmpsht.name & "'!" & r1.Columns(j).Address)
            GActShtObj.Activate
            Call changeToSSDir
            rtn = DllTk2_Main_Vba(AriPara)
            If rtn = 0 Then
                'OutputWsk2 Range(toXlA1str(AriPara.datarge1)), Range(toXlA1str(AriPara.datarge2)), Range(toXlA1str(AriPara.OutRge))
                'wksPara.vRst(k) = rout.Resize(12, 5).Value
                wksPara.vRstAri(k).name1 = r1(1, i)
                wksPara.vRstAri(k).name2 = r1(1, j)
                Call GetWksResult_Ari(wksPara.vRstAri(k))
                If wksPara.vRstAri(k).aval = 0 Then
                    n = wksPara.vRstAri(k).nPositive + wksPara.vRstAri(k).nNegative + wksPara.vRstAri(k).nZero
                    jval = wksPara.vRstAri(k).RankDataSum
                    wksPara.vRstAri(k).pExact = LevelOfSignificanceWXMPSR(jval, n)
                    If wksPara.flg3GrpPVal = 2 Then
                        wksPara.vRstAri(k).pExact = wksPara.vRstAri(k).pExact * (nLoop - k + 1)
                    End If
                    If wksPara.vRstAri(k).pExact > 1 Then wksPara.vRstAri(k).pExact = 1
                Else
                    wksPara.vRstAri(k).pExact = DBL_ERR
                End If
                If wksPara.flg3GrpPVal = 2 Then
                    wksPara.vRstAri(k).pval = wksPara.vRstAri(k).pval * (nLoop - k + 1)
                    If wksPara.vRstAri(k).pval > 1 Then wksPara.vRstAri(k).pval = 1
                End If
            ElseIf rtn = 110 Or rtn = 114 Or rtn = 206 Then
            End If
            k = k + 1
        Next j
    Next i
    Call OutWks_Ari(wksPara, newrow)
    Application.DisplayAlerts = False
    tmpsht.Delete
    tmpshtOut.Delete
    Application.DisplayAlerts = True
    Calc_Wks_Ari = 0
    On Error GoTo 0
End Function

'2019.11.15 mdf:
#If 0 Then
Sub KKS_Wks_Ari_1P01()                 '|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Set GActShtObj = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgWsk")
    dlg.Unprotect
    dlg.DialogFrame.Caption = "|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|i|fffd||389||fffd||fffd||fffd||fffd||fffd|j"
    dlg.Protect
redisp:
    If Not bXMLAvailable Then Exit Sub
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk2Para.datarge1 = toXlRCstr(dlg.EditBoxes("RgeDataIn1").text)
        Tk2Para.datarge2 = toXlRCstr(dlg.EditBoxes("RgeDataIn2").text)
        Tk2Para.OutRge = toXlRCstr(dlg.EditBoxes("RgeDataOut").text)
        Tk2Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk2Para.flgSide = IIf(dlg.OptionButtons("optBoth").Value = xlOn, 1, 2)
        Tk2Para.flgKind = 2
        Tk2Para.pCode = 12
        Tk2Para.nCalcMethod = 1
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        #If 1 Then
        rtn = DllTk2_Main_Vba(Tk2Para)
        If rtn = 0 Then
            OutputWsk2 Range(toXlA1str(Tk2Para.datarge1)), Range(toXlA1str(Tk2Para.datarge2)), Range(toXlA1str(Tk2Para.OutRge))
        ElseIf rtn = 110 Or rtn = 114 Or rtn = 206 Then
            GoTo redisp
        End If
        #Else
            rtn = Calc_Wks_Ari
        #End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#Else
Sub KKS_Wks_Ari_1P01()                 '|fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Dim wksPara As WKS_ARI_SET
    Set GActShtObj = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgWsk_Ari")
    'dlg.Unprotect
    'dlg.DialogFrame.Caption = "|fffd||389||fffd||fffd||302||fffd||fffd||fffd|E|fffd|B|fffd||fffd||fffd|R|fffd|N|fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|i|fffd|T|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd|j"
    'dlg.Protect
redisp:
    If Not bXMLAvailable Then Exit Sub
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        wksPara.TK2Info.datarge1 = (dlg.EditBoxes("RgeDataIn").text)
        wksPara.TK2Info.OutRge = (dlg.EditBoxes("RgeDataOut").text)
        wksPara.TK2Info.flgExcept = 1
        wksPara.TK2Info.flgSide = IIf(dlg.OptionButtons("optBoth").Value = xlOn, 1, 2)
        wksPara.TK2Info.flgKind = 2
        wksPara.TK2Info.nCalcMethod = 2
        wksPara.TK2Info.pCode = 12
        wksPara.flg3Grp = IIf(dlg.OptionButtons("opt3Grp1").Value = xlOn, 1, 2)
        wksPara.flg3GrpPVal = IIf(dlg.OptionButtons("opt3Col1").Value = xlOn, 1, 2)
        wksPara.flgDataProc = IIf(dlg.OptionButtons("optAllVariables").Value = xlOn, 1, 2)
        wksPara.flgSide = wksPara.TK2Info.flgSide
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = Calc_Wks_Ari(wksPara)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#End If
'end mdf

#If 0 Then
Sub KKS_Fdm_1P01()                 '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(13)
End Sub

Sub KKS_Krs_1P01()                 '|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd|X|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk2_Main(14)
End Sub

#Else
Private Function CalcBasicStat(ByVal outoffset As Long, Ngn As NGN_VBA) As Long
    Dim rtn As Integer
    Dim i As Long, j As Long, k As Long, l As Long, ii As Long, jj As Long
    Dim smpnum As Long, itemnum As Long, rowNum As Long
    Dim r As Range, rout As Range
    Dim tmpsht As Worksheet
    Dim v As Variant, vrst As Variant, bst() As Variant
    Dim adlgin As BASICSTAT_VBA
    adlgin.DataRge = Trim(toXlRCstr(Ngn.DataRge))
    If adlgin.DataRge = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcBasicStat = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    v = r(1, 1).Resize(smpnum, itemnum).Value
    l = itemnum
    adlgin.f_datatitle = 1
    adlgin.f_except = 1
    adlgin.f_allOut = 2
    adlgin.f_median = 1
    adlgin.f_kurtosis = 1
    adlgin.f_percent = 2
    adlgin.f_skewness = 1
    adlgin.f_modevalue = 1
    adlgin.f_quardev = 1
    adlgin.percent1 = 25
    adlgin.percent2 = 75
    ThisWorkbook.Activate
    ThisWorkbook.Worksheets("TempSht").Activate
    Set tmpsht = ThisWorkbook.Worksheets("TempSht")
    tmpsht.Cells.ClearContents
    Set rout = tmpsht.Range("A1")
    If 1 Or WorksheetFunction.Count(r.Range("A2").Resize(smpnum - 1, itemnum)) = (smpnum - 1) * (itemnum) Then
        rout.Resize(smpnum, itemnum).Value = v
        adlgin.DataRge = Trim(toXlRCstr(tmpsht.name & "!" & rout.Resize(smpnum, itemnum).Address))
    Else
        Set r = r.Range("A1").Resize(smpnum, itemnum)
        rout(1, 1).Resize(1, itemnum) = r.Rows(1).Value
        j = 2
        For i = 2 To smpnum
            If WorksheetFunction.Count(r.Rows(i)) = itemnum Then
                rout(j, 1).Resize(1, itemnum) = r.Rows(i).Value
                j = j + 1
            End If
        Next i
        smpnum = j - 1
        adlgin.DataRge = Trim(toXlRCstr(tmpsht.name & "!" & rout.Resize(smpnum, itemnum).Address))
    End If
    Call changeToSSDir
    Call KKS_fKH_Kihon(Range(toXlA1str(adlgin.DataRge)), bst)
    If rtn = 0 Then
        GActShtObj.Activate
        Set rout = Range(Ngn.OutRge)
        Set rout = rout(outoffset, 1)
        rout(1, 1) = "|fffd||fffd||fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|"
        rout(2, 1) = "|fffd|Q"
        rout(2, 2) = "n"
        rout(2, 3) = "|fffd||fffd||fffd||3d2|l"
        rout(2, 4) = "|fffd||fffd||fffd|U"
        rout(2, 5) = "|fffd|W|fffd||fffd||fffd||38d||fffd|"
        rout(2, 6) = "|fffd||fffd||fffd||fffd||fffd|l"
        rout(2, 7) = "25|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|"
        rout(2, 8) = "75|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|"
        rout(2, 9) = "|fffd|l|fffd||fffd||fffd||295||38d||fffd|"
        rout(2, 10) = "|fffd||151||fffd|l"
        rout(2, 11) = "|fffd||14f||fffd||fffd|l"
        'itemnum = itemnum - 1
        For i = 1 To itemnum
            rout(i + 2, 1) = bst(1, i)
            rout(i + 2, 2) = bst(2, i)
            rout(i + 2, 3) = bst(4, i)
            rout(i + 2, 4) = bst(15, i)
            rout(i + 2, 5) = bst(17, i)
            rout(i + 2, 6) = bst(8, i)
            rout(i + 2, 7) = bst(9, i)
            rout(i + 2, 8) = bst(10, i)
            rout(i + 2, 9) = bst(20, i)
            If IsNumeric(bst(20, i)) Then
                rout(i + 2, 9) = bst(20, i) / 2#
            End If
            rout(i + 2, 10) = bst(11, i)
            rout(i + 2, 11) = bst(12, i)
        Next i
        Call SetRangeBorder(rout(2, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 2).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(2, 6).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(2, 10).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(3, 2).Resize(itemnum, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 6).Resize(itemnum, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 10).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    End If
    CalcBasicStat = itemnum + 3
End Function

Private Function OutFriedman(Ngn As NGN_VBA) As Long
    Dim r As Range
    GActShtObj.Activate
    Set r = Range(Ngn.OutRge)
    r(1, 1) = "|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||fffd||fffd||fffd|"
    r(1, 1).Font.Bold = True
    OutFriedman = 3
End Function

Sub KKS_Fdm_1P01()                 '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Dim vbapara As NGN_VBA
    Set dlg = ThisWorkbook.DialogSheets("DlgFRDMN")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        #If 0 Then
        Tk2Para.datarge1 = toXlRCstr(dlg.EditBoxes("edtRgeIn").text)
        Tk2Para.OutRge = toXlRCstr(dlg.EditBoxes("edtRgeOut").text)
        Tk2Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk2Para.pCode = 13
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk2_Main_Vba(Tk2Para)
        #Else
        vbapara.DataRge = (dlg.EditBoxes("edtRgeIn").text)
        vbapara.OutRge = (dlg.EditBoxes("edtRgeOut").text)
        vbapara.f_except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        vbapara.f_datatitle = 1
        Set GActShtObj = ActiveSheet
        rtn = OutFriedman(vbapara)
        rtn = rtn + CalcBasicStat(rtn, vbapara)
        rtn = CalcFdm_TK2(rtn, vbapara)
        #End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub KKS_Krs_1P01()                 '|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd|X|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range, rgedata As Range
    Dim vbapara As NGN_VBA
    Dim vRstKrs As Variant
    Set dlg = ThisWorkbook.DialogSheets("DlgKRSKR")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        #If 0 Then
        Tk2Para.datarge1 = toXlRCstr(dlg.EditBoxes("edtRgeIn").text)
        Tk2Para.OutRge = toXlRCstr(dlg.EditBoxes("edtRgeOut").text)
        Tk2Para.flgDataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 2)
        Tk2Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk2Para.pCode = 14
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk2_Main_Vba(Tk2Para)
        #Else
        vbapara.DataRge = (dlg.EditBoxes("edtRgeIn").text)
        vbapara.OutRge = (dlg.EditBoxes("edtRgeOut").text)
        vbapara.f_except = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        vbapara.f_datatitle = 1
        Set GActShtObj = ActiveSheet
        'rtn = OutKrs(vbapara)
        rtn = 1
        rtn = rtn + CalcBasicStat(rtn, vbapara)
        Call CalcKrs_TK2(vRstKrs, vbapara)
        GActShtObj.Activate
        Set rgedata = Range(vbapara.DataRge)
        Set rgeout = Range(vbapara.OutRge)
        rtn = OutputKrs_TK2(vRstKrs, rgeout, rtn, rgedata.Columns.Count)
        #End If
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#End If

Function KKS_Krs_Internal(vbapara As NGN_VBA) As Long                 '|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd||fffd||fffd||fffd||fffd|X|fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim rgeout As Range
    Set GActShtObj = ActiveSheet
    'rtn = OutKrs(vbapara)
    rtn = 1
    rtn = rtn + CalcBasicStat(rtn, vbapara)
    rtn = CalcKrs_TK2(rtn, vbapara)
    KKS_Krs_Internal = rtn
End Function

Function Calc_TK2_Internal(Tk2Para As TK2_DEF) As Integer                '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Call changeToSSDir
    'ActiveWorkbook.ActiveSheet.Select
    Calc_TK2_Internal = DllTk2_Main_Vba(Tk2Para)
End Function

Private Function CalcFdm_TK2(ByVal outoffset As Long, Ngn As NGN_VBA)                 '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim i As Long, j As Long
    Dim itemnum As Long, smpnum As Long
    Dim rgeout As Range, r As Range
    Dim tmpsht As Worksheet
    Dim v As Variant
    Dim Tk2Para As TK2_DEF
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    
    Tk2Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk2Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcFdm_TK2 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    v = r(1, 1).Resize(smpnum, itemnum).Value
    ThisWorkbook.Activate
    ThisWorkbook.Worksheets("TempSht").Activate
    Set tmpsht = ThisWorkbook.Worksheets("TempSht")
    Set r = tmpsht.Range("B1").Resize(smpnum, itemnum)
    r = v
    Set r = tmpsht.Range("A2").Resize(smpnum - 1, itemnum + 1)
    For i = 1 To smpnum - 1
        r(i, 1) = "A" & i
    Next i
    Set rgeout = KKS_fSkAri_Internal(r.Address, 1, 7, 1, 0, 1, 1)
    If rgeout Is Nothing Then '2016.9.19 LSQ
        CalcFdm_TK2 = -1
        Exit Function
    End If
    
    tmpval = rgeout(3, 2)           '|fffd||fffd|v|fffd|W|fffd||fffd|
    tmpTK = rgeout(3, 3)
    tmpFree = rgeout(3, 4)
    tmpPVal = rgeout(3, 5)
    Application.DisplayAlerts = False
    rgeout.Worksheet.Delete
    Application.DisplayAlerts = True
    
    ThisWorkbook.Worksheets("TempSht").Activate
    Set tmpsht = ThisWorkbook.Worksheets("TempSht")
    Set r = tmpsht.Range("A1")
    r.Resize(smpnum, itemnum).Value = v
    Tk2Para.datarge1 = toXlRCstr(tmpsht.name & "!" & r.Resize(smpnum, itemnum).Address)
    Set tmpsht = ThisWorkbook.Worksheets.Add
    Tk2Para.OutRge = Trim(toXlRCstr(tmpsht.name & "!A1"))
    Tk2Para.flgExcept = 1
    Tk2Para.nCalcMethod = 1
    Tk2Para.pCode = 13
    rtn = Calc_TK2_Internal(Tk2Para)
    If rtn = 0 Then
        Set r = tmpsht.Range("A1")
        GActShtObj.Activate
        Set rgeout = Range(Ngn.OutRge)
        Set rgeout = rgeout(outoffset, 1)
        rgeout(1, 1) = "|fffd||fffd||fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||fffd||fffd||fffd|"
        rgeout(1, 1).Font.Bold = True
        rgeout(2, 2) = "|fffd||fffd||fffd||298|a"
        rgeout(2, 3) = "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|"
        'itemnum = itemnum - 1
        For i = 1 To itemnum
            rgeout(i + 2, 1) = r(4, i + 1)
            rgeout(i + 2, 2) = r(6, i + 1)
            rgeout(i + 2, 3) = r(6, i + 1) / r(5, i + 1)
        Next i
        rgeout(2, 5) = "|fffd||fffd|v|fffd|W|fffd||fffd|"
        rgeout(2, 6) = "|fffd||fffd||fffd|v|fffd||fffd|"
        rgeout(2, 7) = "|fffd||fffd||fffd|R|fffd|x"
        rgeout(2, 8) = "p|fffd|l"
        rgeout(2, 9) = "|fffd||fffd||fffd||fffd|"
        rgeout(3, 5) = tmpval
        rgeout(3, 6) = tmpTK            '2018.03.28 mdf: = r(7, 2)
        rgeout(3, 7) = tmpFree          '2018.03.28 mdf: = r(8, 2)
        rgeout(3, 8) = tmpPVal          '2018.03.28 mdf: = r(11, 2)
        rgeout(3, 9) = IIf(rgeout(3, 8) < 0.01, "**", IIf(rgeout(3, 8) < 0.05, "*", "n.s."))
        rgeout(3, 5).NumberFormat = "0.000"
        rgeout(3, 6).NumberFormat = "0.00"
        rgeout(3, 8).NumberFormat = "0.000"
        Call SetRangeBorder(rgeout(2, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rgeout(2, 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rgeout(3, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rgeout(3, 2).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rgeout(2, 5).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, , xlThin)
        Call SetRangeBorder(rgeout(2, 6).Resize(2, 4), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
        rgeout(4, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
    End If
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    CalcFdm_TK2 = rtn
End Function

Function OutputKrs_TK2(vrst As Variant, ByVal rgeout As Range, ByVal outoffset As Long, ByVal itemnum As Long)
    Dim i As Long
    Dim r As Range
    GActShtObj.Activate
    Set rgeout = rgeout(outoffset, 1)
    rgeout(1, 1) = "|fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|E|fffd|H|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|"
    rgeout(2, 1).Resize(1, 4) = Array("|fffd|Q", "n", "|fffd||fffd||fffd||298|a", "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|")
    For i = 1 To itemnum
        rgeout(2 + i, 1) = vrst(4, i + 1)
        rgeout(2 + i, 2) = vrst(5, i + 1)
        rgeout(2 + i, 3) = vrst(5, i + 1) * vrst(6, i + 1)
        rgeout(2 + i, 4) = vrst(6, i + 1)
    Next i
    Call SetRangeBorder(rgeout(2, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeout(2, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    Call SetRangeBorder(rgeout(3, 1).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeout(3, 3).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    
    Set rgeout = rgeout(3 + itemnum, 1)
    rgeout(1, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
    rgeout(2, 1).Resize(1, 7) = Array("|fffd||fffd||fffd|z", "|fffd||fffd||fffd|v|fffd||fffd|", "|fffd||fffd||fffd|R|fffd|x", "1%|fffd|_", "5%|fffd|_", "p|fffd|l", "|fffd||fffd||fffd||fffd|")
    rgeout(3, 1) = "|fffd|J|fffd|C|fffd||fffd||656a||fffd|z"
    rgeout(3, 2) = vrst(7, 2)
    rgeout(3, 3) = vrst(8, 2)
    rgeout(3, 4) = vrst(9, 2)
    rgeout(3, 5) = vrst(10, 2)
    rgeout(3, 6) = vrst(11, 2)
    rgeout(3, 7) = ChangeMark(vrst(12, 2))
    rgeout(3, 2).NumberFormat = "0.000"
    rgeout(3, 4).Resize(1, 3).NumberFormat = "0.000"
    Call SetRangeBorder(rgeout(2, 1).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeout(2, 2).Resize(2, 6), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
    OutputKrs_TK2 = itemnum + 6
End Function

Function CalcKrs_TK2(vRstKrs As Variant, Ngn As NGN_VBA)                 '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Dim rtn As Integer
    Dim i As Long, j As Long
    Dim itemnum As Long, smpnum As Long
    Dim rgeout As Range, r As Range
    Dim tmpsht As Worksheet
    Dim v As Variant, vrst As Variant
    Dim Tk2Para As TK2_DEF
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    
    Tk2Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk2Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcKrs_TK2 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    v = r(1, 1).Resize(smpnum, itemnum).Value
    
    ThisWorkbook.Worksheets("TempSht").Activate
    Set tmpsht = ThisWorkbook.Worksheets("TempSht")
    Set r = tmpsht.Range("$A$1")
    r.Resize(smpnum, itemnum).Value = v
    Tk2Para.datarge1 = toXlRCstr(tmpsht.name & "!" & r.Resize(smpnum, itemnum).Address)
    Set tmpsht = ThisWorkbook.Worksheets.Add
    Tk2Para.OutRge = Trim(toXlRCstr(tmpsht.name & "!$A$1"))
    Tk2Para.flgExcept = Ngn.f_except
    Tk2Para.flgDataTitle = Ngn.f_datatitle
    Tk2Para.nCalcMethod = 1
    Tk2Para.pCode = 14
    rtn = Calc_TK2_Internal(Tk2Para)
    If rtn = 0 Then
        Set r = tmpsht.Range("$A$1")
        vRstKrs = r.Resize(12, itemnum + 1).Value
        #If 0 Then
        GActShtObj.Activate
        Set rgeout = Range(Ngn.OutRge)
        Set rgeout = rgeout(outoffset, 1)
        rgeout(1, 1) = "|fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|E|fffd|H|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|"
        rgeout(2, 1).Resize(1, 4) = Array("|fffd|Q", "n", "|fffd||fffd||fffd||298|a", "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|")
        For i = 1 To itemnum
            rgeout(2 + i, 1) = v(1, i)
            rgeout(2 + i, 2) = vrst(5, i + 1)
            rgeout(2 + i, 3) = vrst(5, i + 1) * vrst(6, i + 1)
            rgeout(2 + i, 4) = vrst(6, i + 1)
        Next i
        Call SetRangeBorder(rgeout(2, 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rgeout(2, 3).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rgeout(3, 1).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rgeout(3, 3).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        
        Set rgeout = rgeout(3 + itemnum, 1)
        rgeout(1, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        rgeout(2, 1).Resize(1, 7) = Array("|fffd||fffd||fffd|z", "|fffd||fffd||fffd|v|fffd||fffd|", "|fffd||fffd||fffd|R|fffd|x", "1%|fffd|_", "5%|fffd|_", "p|fffd|l", "|fffd||fffd||fffd||fffd|")
        rgeout(3, 1) = "|fffd|J|fffd|C|fffd||fffd||656a||fffd|z"
        rgeout(3, 2) = vrst(7, 2)
        rgeout(3, 3) = vrst(8, 2)
        rgeout(3, 4) = vrst(9, 2)
        rgeout(3, 5) = vrst(10, 2)
        rgeout(3, 6) = vrst(11, 2)
        rgeout(3, 7) = vrst(12, 2)
        Call SetRangeBorder(rgeout(2, 1).Resize(2, 1), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rgeout(2, 2).Resize(2, 6), xlThin, xlThin, xlThin, xlThin, xlHairline, xlThin)
        #End If
    End If
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    CalcKrs_TK2 = rtn
End Function
'=== EOF ===

Attribute VB_Name = "sssTk3"
'=======================================================
' SSS|fffd||fffd||fffd|vVer6 : DLL |fffd||fffd||fffd|v 3
'
' 2005.9 LSQ
'=======================================================
Option Private Module
Option Explicit

Type NGN_VBA
    DataRge As String
    OutRge As String
    f_datatitle As Long
    f_except As Long
    option As Long
    dist As Long
End Type

Type TK3_DEF
    datarge1 As String
    datarge2 As String
    OutRge As String
    flgDataTitle As Long
    flgExcept As Long
    flgOutSep As Long
    flgSort As Long
    flgSide As Long
    pCode As Long
End Type

Private Type MULTICMP_RESULT
    itemnum As Long
    smpnum As Long
    rstBasicStat() As Variant
    rstKrs As Variant
    rstSteelDwass As Variant
    rstSteel As Variant
    rstShirleyWilliams As Variant
    rstRankAvg() As Double
End Type

Private Tk3Para As TK3_DEF
Private rstMultiCmp As MULTICMP_RESULT

#If VBA7 Then
    #If Win64 Then
    Declare PtrSafe Function DllTk3_Main Lib "KKS_SubI_64.dll" (pCode As Long) As Integer
    Declare PtrSafe Function DllTk3_Main_Vba Lib "KKS_SubI_64.dll" (vbapara As TK3_DEF) As Integer
    #Else
    Declare PtrSafe Function DllTk3_Main Lib "KKS_SubI.dll" (pCode As Long) As Integer
    Declare PtrSafe Function DllTk3_Main_Vba Lib "KKS_SubI.dll" (vbapara As TK3_DEF) As Integer
    #End If
#Else
    #If Win64 Then
    Declare Function DllTk3_Main Lib "KKS_SubI_64.dll" (pCode As Long) As Integer
    Declare Function DllTk3_Main_Vba Lib "KKS_SubI_64.dll" (vbapara As TK3_DEF) As Integer
    #Else
    Declare Function DllTk3_Main Lib "KKS_SubI.dll" (pCode As Long) As Integer
    Declare Function DllTk3_Main_Vba Lib "KKS_SubI.dll" (vbapara As TK3_DEF) As Integer
    #End If
#End If

Function Calc_TK3_Internal(Tk3Para As TK3_DEF) As Integer                '|fffd|t|fffd||fffd||fffd|[|fffd|h|fffd|}|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    Call changeToSSDir
    'ActiveWorkbook.ActiveSheet.Select
    Calc_TK3_Internal = DllTk3_Main_Vba(Tk3Para)
End Function

'---------------------------------------------------------------
Sub KKS_Bonferoni()          '|fffd||a57d||fffd||3c1|F|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j (|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(1)
End Sub

Sub KKS_Holm()          '|fffd||a57d||fffd||3c1|F|fffd|z|fffd||fffd||fffd||fffd| (|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(2)
End Sub

Sub KKS_Sheffe_Z()          '|fffd||a57d||fffd||3c1|F|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(3)
End Sub

Sub KKS_Sheffe_S()          '|fffd||a57d||fffd||3c1|F|fffd|V|fffd|F|fffd|b|fffd|t|fffd|F(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(4)
End Sub

Sub KKS_Chuki_Z()          '|fffd||a57d||fffd||3c1|F|fffd|`|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(5)
End Sub

Sub KKS_Chuki_S()          '|fffd||a57d||fffd||3c1|F|fffd|`|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|Q|fffd|W|fffd||fffd||fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(6)
End Sub

Sub KKS_Dankan()          '|fffd||a57d||fffd||3c1|F|fffd|_|fffd||fffd||fffd|J|fffd||fffd|(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(7)
End Sub

Sub KKS_Danetto()          '|fffd||a57d||fffd||3c1|F|fffd|_|fffd|l|fffd|b|fffd|g(|fffd||38f||181|||fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(8)
End Sub

Sub KKS_Williams()          '|fffd||a57d||fffd||3c1|F|fffd|E|fffd|B|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||181|||fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(9)
End Sub

#If 0 Then
Sub Ichigen_VBA()          '|fffd||fffd||fffd|U|fffd||fffd||fffd||fffd|(|fffd||a333||fffd|z|fffd|u)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(20)
End Sub

Sub Nigen_N_VBA()          '|fffd||fffd||fffd|U|fffd||fffd||fffd||fffd|(|fffd||4ccd4|z|fffd|u|fffd|F|fffd|J|fffd||fffd||502||fffd||fffd||202||fffd|)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(21)
End Sub

Sub SNigen_A_VBA()          '|fffd||4ccd4|z|fffd|u|fffd|@(|fffd|J|fffd||502||fffd||fffd||fffd||fffd||fffd|)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(22)
End Sub

Sub Tagen_VBA()          '|fffd||fffd||fffd||fffd||fffd|z|fffd|u|fffd|@
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(23)
End Sub

Sub Hen_VBA()          '|fffd||fffd||fffd||fffd||fffd||210||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(24)
End Sub

Sub CovarAna_VBA()          '|fffd||fffd||fffd||fffd||fffd|U|fffd||fffd||fffd||fffd|
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(25)
End Sub
#End If

Sub KKS_HRI_Bonferoni()          '|fffd||fffd||45e6||fffd|F|fffd|{|fffd||fffd||fffd|t|fffd|F|fffd||fffd||fffd|[|fffd|j(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(100)
End Sub

Sub KKS_HRI_Chuki_Z()          '|fffd||fffd||45e6||fffd|F|fffd|`|fffd||fffd||fffd|[|fffd|L|fffd|[(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(101)
End Sub

#If 0 Then
Sub KKS_NP_SteelDwass_1P01()          '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(200)
End Sub

Sub KKS_NP_Steel_1P01()          '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(201)
End Sub

Sub KKS_NP_ShirleyWilliams_1P01()          '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|B|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = DllTk3_Main(202)
End Sub
 #Else
 
Sub KKS_NP_SteelDwass_1P01()                 '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X(|fffd|S|fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Set dlg = ThisWorkbook.DialogSheets("DlgSteelDwass")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk3Para.datarge1 = toXlRCstr(dlg.EditBoxes("edtRgeIn").text)
        Tk3Para.OutRge = toXlRCstr(dlg.EditBoxes("edtRgeOut").text)
        Tk3Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk3Para.flgDataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 2)
        Tk3Para.pCode = 200
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk3_Main_Vba(Tk3Para)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub KKS_NP_Steel_1P01()          '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Set dlg = ThisWorkbook.DialogSheets("DlgSteel")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk3Para.datarge1 = toXlRCstr(dlg.EditBoxes("edtRgeIn").text)
        Tk3Para.OutRge = toXlRCstr(dlg.EditBoxes("edtRgeOut").text)
        Tk3Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk3Para.flgDataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 2)
        Tk3Para.flgSide = IIf(dlg.OptionButtons("optSide1").Value = xlOn, 1, _
                                    IIf(dlg.OptionButtons("optSide2").Value = xlOn, 2, 3))
        Tk3Para.pCode = 201
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk3_Main_Vba(Tk3Para)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub

Sub KKS_NP_ShirleyWilliams_1P01()          '|fffd|m|fffd||fffd||fffd|p|fffd||fffd||fffd|F|fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|B|fffd||fffd||fffd|A|fffd||fffd||fffd|Y(|fffd||38f||fffd|-|fffd||fffd||fffd||fffd||fffd|Q|fffd||fffd|r)
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim rgeout As Range
    Set dlg = ThisWorkbook.DialogSheets("DlgShirleyWilliams")
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk3Para.datarge1 = toXlRCstr(dlg.EditBoxes("edtRgeIn").text)
        Tk3Para.OutRge = toXlRCstr(dlg.EditBoxes("edtRgeOut").text)
        Tk3Para.flgExcept = IIf(dlg.OptionButtons("optExcept").Value = xlOn, 1, 2)
        Tk3Para.flgDataTitle = IIf(dlg.OptionButtons("optTitle").Value = xlOn, 1, 2)
        Tk3Para.pCode = 202
        Call changeToSSDir
        ActiveWorkbook.ActiveSheet.Select
        rtn = DllTk3_Main_Vba(Tk3Para)
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
#End If

Private Function OutputBasicStat_MultiCmp(ByVal rout As Range, ByVal outoffset As Long) As Long
    Dim i As Long, itemnum As Long
    GActShtObj.Activate
    With rstMultiCmp
        itemnum = .itemnum
        Set rout = rout(outoffset, 1)
        rout(1, 1) = "|fffd||fffd||fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|"
        rout(2, 1) = "|fffd|Q"
        rout(2, 2) = "n"
        rout(2, 3) = "|fffd||fffd||fffd||3d2|l"
        rout(2, 4) = "|fffd||fffd||fffd|U"
        rout(2, 5) = "|fffd|W|fffd||fffd||fffd||38d||fffd|"
        rout(2, 6) = "|fffd||fffd||fffd||fffd||fffd|l"
        rout(2, 7) = "25|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|"
        rout(2, 8) = "75|fffd|p|fffd|[|fffd|Z|fffd||fffd||fffd|^|fffd|C|fffd||fffd|"
        rout(2, 9) = "|fffd|l|fffd||fffd||fffd||295||38d||fffd|"
        rout(2, 10) = "|fffd||151||fffd|l"
        rout(2, 11) = "|fffd||14f||fffd||fffd|l"
        'itemnum = itemnum - 1
        For i = 1 To itemnum
            rout(i + 2, 1) = .rstBasicStat(1, i)
            rout(i + 2, 2) = .rstBasicStat(2, i)
            rout(i + 2, 3) = .rstBasicStat(4, i)
            rout(i + 2, 4) = .rstBasicStat(15, i)
            rout(i + 2, 5) = .rstBasicStat(17, i)
            rout(i + 2, 6) = .rstBasicStat(8, i)
            rout(i + 2, 7) = .rstBasicStat(9, i)
            rout(i + 2, 8) = .rstBasicStat(10, i)
            rout(i + 2, 9) = .rstBasicStat(20, i)
            If IsNumeric(.rstBasicStat(20, i)) Then
                rout(i + 2, 9) = .rstBasicStat(20, i) / 2#
            End If
            rout(i + 2, 10) = .rstBasicStat(11, i)
            rout(i + 2, 11) = .rstBasicStat(12, i)
        Next i
        Call SetRangeBorder(rout(2, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 2).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(2, 6).Resize(1, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(2, 10).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(3, 2).Resize(itemnum, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 6).Resize(itemnum, 4), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 10).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
    End With
    OutputBasicStat_MultiCmp = itemnum + 3
End Function

Private Function OutputShirleyWilliams_MultiCmp(ByVal rout As Range, ByVal outoffset As Long) As Long
    Dim i As Long, j As Long
    Dim itemnum As Long
    GActShtObj.Activate
    With rstMultiCmp
        itemnum = .itemnum
        Set rout = rout(outoffset, 1)
        rout(1, 1) = "|fffd||fffd||fffd|V|fffd||fffd||fffd|[|fffd||fffd||fffd|[|fffd|E|fffd|E|fffd|B|fffd||fffd||fffd|A|fffd||fffd||fffd|Y"
        rout(1, 4) = "|fffd||fffd||fffd||341|u|fffd||fffd||fffd|-|fffd|O|fffd||481|v"
        rout(1, 6) = "n.s.|fffd|F|fffd||fffd||fffd|v|fffd||281||fffd|5%|fffd|_|fffd|A*|fffd|F|fffd||fffd||fffd|v|fffd||281||fffd|5%|fffd|_"
        rout(2, 1).Resize(1, 3) = Array("", "", "")
        rout(2, 4).Resize(1, 4) = Array("|fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|", "5%|fffd|_", "|fffd||fffd||fffd||fffd|")
        j = 3
        For i = itemnum To 2 Step -1
            If .rstShirleyWilliams(j + 2, 1) <> "" Then
                rout(j, 1) = j - 2
                rout(j, 2) = .rstBasicStat(1, 1)
                rout(j, 3) = .rstBasicStat(1, i)
                rout(j, 4) = .rstKrs(6, i + 1) - .rstKrs(6, 2)
                rout(j, 5) = .rstShirleyWilliams(j + 2, 2)
                rout(j, 6) = .rstShirleyWilliams(j + 2, 3)
                rout(j, 7) = ChangeMark(.rstShirleyWilliams(j + 2, 4))
                j = j + 1
            End If
        Next i
        itemnum = j - 3
        If itemnum > 0 Then
            rout(3, 5).Resize(itemnum, 2).NumberFormat = "0.000"
            Call SetRangeBorder(rout(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rout(2, 4).Resize(1, 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rout(2, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
            Call SetRangeBorder(rout(3, 1).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rout(3, 2).Resize(itemnum, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
            Call SetRangeBorder(rout(3, 4).Resize(itemnum, 1), xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rout(3, 5).Resize(itemnum, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        End If
    End With
    OutputShirleyWilliams_MultiCmp = itemnum + 3
End Function

Private Function OutputSteelDwass_MultiCmp(ByVal rout As Range, ByVal outoffset As Long) As Long
    Dim i As Long, j As Long, k As Long, l As Long, ii As Long, ll As Long
    Dim itemnum As Long
    Dim pval As Double
    GActShtObj.Activate
    With rstMultiCmp
        itemnum = .itemnum
        Set rout = rout(outoffset, 1)
        rout(1, 1) = "|fffd||fffd||fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd||fffd|E|fffd|h|fffd|D|fffd||fffd||fffd|X"
        rout(2, 1).Resize(1, 5) = Array("", "|fffd|Q", "n", "|fffd||fffd||fffd||298|a", "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|")
        Call SetRangeBorder(rout(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        l = 3
        k = 1
        For i = 1 To itemnum - 1
            For j = i + 1 To itemnum
                rout(l, 1) = k
                rout(l, 2) = .rstBasicStat(1, i)
                rout(l + 1, 2) = .rstBasicStat(1, j)
                rout(l, 3) = .rstBasicStat(2, i)
                rout(l + 1, 3) = .rstBasicStat(2, j)
                rout(l, 4) = .rstRankAvg(k, 1)
                rout(l + 1, 4) = .rstRankAvg(k, 2)
                rout(l, 5) = .rstRankAvg(k, 1) / .rstBasicStat(2, i)
                rout(l + 1, 5) = .rstRankAvg(k, 2) / .rstBasicStat(2, j)
                Call SetRangeBorder(rout(l, 1).Resize(2, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
                Call SetRangeBorder(rout(l, 4).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
                l = l + 2
                k = k + 1
            Next j
        Next i
        Set rout = rout(l + 1, 1)
        rout = ""
        rout(1, 4) = "|fffd||fffd||fffd||341|u|fffd||fffd||fffd|-|fffd|O|fffd||481|v"
        rout(1, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        rout(2, 1).Resize(1, 7) = Array("", "", "", "|fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|", "p|fffd|l", "|fffd||fffd||fffd||fffd|")
        l = itemnum * (itemnum - 1) / 2
        Call SetRangeBorder(rout(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 4).Resize(1, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 1).Resize(l, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 4).Resize(l, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(3, 5).Resize(l, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        rout(3, 5).Resize(l, 3).NumberFormat = "0.000"
        l = 3
        k = 1
        For i = 1 To itemnum - 1
            ll = l
            For j = i + 1 To itemnum
                rout(l, 1) = k
                rout(l, 2) = .rstBasicStat(1, i)
                rout(l, 3) = .rstBasicStat(1, j)
                rout(l, 4) = .rstKrs(6, j + 1) - .rstKrs(6, i + 1)
                rout(l, 5) = .rstSteelDwass(k + 4, 3)
                GParaTjProb.GunSu = itemnum
                GParaTjProb.Fd = 1
                GParaTjProb.bFdGiven = True
                GParaTjProb.Tokeiryo = Abs(.rstSteelDwass(k + 4, 3)) * Sqr(2#)
                GParaTjProb.Fd = 6000
                For ii = 1 To itemnum
                    GParaTjProb.GSmpl(ii) = 1
                Next ii
                pval = P_HSD(GParaTjProb)
                rout(l, 6) = pval
                rout(l, 7) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
                k = k + 1
                l = l + 1
            Next j
            If i < itemnum - 1 Then
                Call DrawLine(rout(l, 1).Resize(1, 7), xlHairline)
            End If
        Next i
    End With
    OutputSteelDwass_MultiCmp = (itemnum - 1) * 3 + 6
End Function

Private Function OutputSteel_MultiCmp(ByVal rout As Range, ByVal outoffset As Long) As Long
    Dim i As Long, j As Long, k As Long, l As Long
    Dim itemnum As Long
    Dim pval As Double
    GActShtObj.Activate
    With rstMultiCmp
        itemnum = .itemnum
        Set rout = rout(outoffset, 1)
        rout(1, 1) = "|fffd||fffd||fffd|X|fffd|e|fffd|B|fffd|[|fffd||fffd|"
        rout(2, 1).Resize(1, 5) = Array("", "|fffd|Q", "n", "|fffd||fffd||fffd||298|a", "|fffd||fffd||fffd||3cf||fffd||fffd||fffd|")
        Call SetRangeBorder(rout(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 4).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
        j = 3
        For i = 2 To itemnum
            rout(j, 1) = i - 1
            rout(j, 2) = .rstBasicStat(1, 1)
            rout(j + 1, 2) = .rstBasicStat(1, i)
            rout(j, 3) = .rstBasicStat(2, 1)
            rout(j + 1, 3) = .rstBasicStat(2, i)
            rout(j, 4) = .rstRankAvg(i - 1, 1)
            rout(j + 1, 4) = .rstRankAvg(i - 1, 2)
            rout(j, 5) = .rstRankAvg(i - 1, 1) / .rstBasicStat(2, 1)
            rout(j + 1, 5) = .rstRankAvg(i - 1, 2) / .rstBasicStat(2, i)
            Call SetRangeBorder(rout(j, 1).Resize(2, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
            Call SetRangeBorder(rout(j, 4).Resize(2, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
            j = j + 2
        Next i
        Set rout = rout(j + 1, 1)
        rout = "|fffd||397||fffd||fffd||fffd||fffd||fffd||fffd|F" & IIf(Tk3Para.flgSide = 1, "|fffd||411||fffd||fffd|i|fffd|Q1|fffd||302||642||fffd||fffd||fffd||fffd||fffd||fffd|j", IIf(Tk3Para.flgSide = 2, "|fffd||fffd||fffd||fffd|", "|fffd||411||fffd||fffd|i|fffd|Q1|fffd||302||642||fffd||fffd||fffd||fffd||fffd|j"))
        rout(1, 4) = "|fffd||fffd||fffd||341|u|fffd||fffd||fffd|-|fffd|O|fffd||481|v"
        rout(1, 6) = "n.s.|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A*|fffd|Fp|fffd|l|fffd||fffd|0.05|fffd|A**|fffd|Fp|fffd|l|fffd||fffd|0.01"
        rout(2, 1).Resize(1, 7) = Array("", "", "", "|fffd||fffd|", "|fffd||fffd||fffd|v|fffd||fffd|", "p|fffd|l", "|fffd||fffd||fffd||fffd|")
        l = (itemnum - 1)
        Call SetRangeBorder(rout(2, 1).Resize(1, 3), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 4).Resize(1, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(2, 5).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 1).Resize(l, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        Call SetRangeBorder(rout(3, 4).Resize(l, 1), xlThin, xlThin, xlThin, xlThin)
        Call SetRangeBorder(rout(3, 5).Resize(l, 3), xlThin, xlThin, xlThin, xlThin, xlHairline)
        rout(3, 5).Resize(l, 2).NumberFormat = "0.000"
        j = 3
        For i = 2 To itemnum
            rout(j, 1) = i - 1
            rout(j, 2) = .rstBasicStat(1, 1)
            rout(j, 3) = .rstBasicStat(1, i)
            rout(j, 4) = .rstKrs(6, i + 1) - .rstKrs(6, 2)
            rout(j, 5) = .rstSteel(i + 3, 3)
            GParaTjProb.GunSu = itemnum
            GParaTjProb.bFdGiven = True
            GParaTjProb.Tokeiryo = .rstSteel(i + 3, 3) * Sqr(2#)
            GParaTjProb.Fd = 6000
            For k = 1 To itemnum
                GParaTjProb.GSmpl(k) = .rstBasicStat(2, k)
            Next k
            pval = P_STEEL(GParaTjProb, 1)
            rout(j, 6) = pval
            rout(j, 7) = IIf(pval < 0.01, "**", IIf(pval < 0.05, "* ", "n.s."))
            j = j + 1
        Next i
    End With
    OutputSteel_MultiCmp = (itemnum - 1) * 3 + 6
End Function

Function CalcSteelDwass_TK3(vRstSteelDwass As Variant, Ngn As NGN_VBA) As Long
    Dim rtn As Integer
    Dim i As Long, j As Long
    Dim itemnum As Long, smpnum As Long
    Dim rgeout As Range, r As Range
    Dim tmpsht As Worksheet
    Dim v As Variant, vrst As Variant
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    Dim backOutRge As String
    
    Tk3Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk3Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcSteelDwass_TK3 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    Set tmpsht = r.Worksheet.Parent.Worksheets.Add
    backOutRge = Tk3Para.OutRge
    Tk3Para.OutRge = Trim(toXlRCstr(tmpsht.name & "!$A$1"))
    Tk3Para.flgExcept = Ngn.f_except
    Tk3Para.flgDataTitle = Ngn.f_datatitle
    Tk3Para.pCode = 200
    rtn = Calc_TK3_Internal(Tk3Para)
    If rtn = 1 Then
        Set r = tmpsht.Range("$A$1")
        vRstSteelDwass = r.Resize(itemnum * (itemnum - 1) / 2 + 4, 6).Value
    End If
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    Tk3Para.OutRge = toXlRCstr(backOutRge)
    CalcSteelDwass_TK3 = rtn
End Function

Function CalcSteel_TK3(vRstSteel As Variant, Ngn As NGN_VBA) As Long
    Dim rtn As Integer
    Dim i As Long, j As Long
    Dim itemnum As Long, smpnum As Long
    Dim rgeout As Range, r As Range
    Dim tmpsht As Worksheet
    Dim v As Variant, vrst As Variant
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    Dim backOutRge As String
    
    Tk3Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk3Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcSteel_TK3 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    Set tmpsht = r.Worksheet.Parent.Worksheets.Add
    backOutRge = Tk3Para.OutRge
    Tk3Para.OutRge = Trim(toXlRCstr(tmpsht.name & "!$A$1"))
    Tk3Para.flgExcept = Ngn.f_except
    Tk3Para.flgDataTitle = Ngn.f_datatitle
    Tk3Para.pCode = 201
    rtn = Calc_TK3_Internal(Tk3Para)
    If rtn = 1 Then
        Set r = tmpsht.Range("$A$1")
        vRstSteel = r.Resize(itemnum - 1 + 4, 6).Value
    End If
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    Tk3Para.OutRge = toXlRCstr(backOutRge)
    CalcSteel_TK3 = rtn
End Function

Function CalcShirleyWilliams_TK3(vRstShirleyWilliams As Variant, Ngn As NGN_VBA) As Long
    Dim rtn As Integer
    Dim i As Long, j As Long
    Dim itemnum As Long, smpnum As Long
    Dim rgeout As Range, r As Range
    Dim tmpsht As Worksheet
    Dim v As Variant, vrst As Variant
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    Dim backOutRge As String
    
    Tk3Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk3Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcShirleyWilliams_TK3 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count
    Set tmpsht = r.Worksheet.Parent.Worksheets.Add
    backOutRge = Tk3Para.OutRge
    Tk3Para.OutRge = Trim(toXlRCstr(tmpsht.name & "!$A$1"))
    Tk3Para.flgExcept = Ngn.f_except
    Tk3Para.flgDataTitle = Ngn.f_datatitle
    Tk3Para.pCode = 202
    rtn = Calc_TK3_Internal(Tk3Para)
    If rtn = 1 Then
        Set r = tmpsht.Range("$A$1")
        vRstShirleyWilliams = r.Resize(itemnum - 1 + 4, 4).Value
    End If
    Application.DisplayAlerts = False
    tmpsht.Delete
    Application.DisplayAlerts = True
    Tk3Para.OutRge = toXlRCstr(backOutRge)
    CalcShirleyWilliams_TK3 = rtn
End Function

Function CalcRankAvg_TK3(vrst() As Double, Ngn As NGN_VBA, Optional ByVal bAllGroups As Boolean = True) As Long
    Dim rtn As Integer
    Dim i As Long, j As Long, k As Long, l As Long
    Dim itemnum As Long, smpnum As Long
    Dim r As Range, r1 As Range
    Dim tmpsht As Worksheet
    Dim v As Variant
    Dim tmpval As Double, tmpTK As Double, tmpPVal As Double
    Dim tmpFree As Long
    Dim backOutRge As String
    
    Tk3Para.datarge1 = Trim(toXlRCstr(Ngn.DataRge))
    If Tk3Para.datarge1 = "" Then
        MsgBox MSG_ERR_DATARAGE
        CalcRankAvg_TK3 = -1
        Exit Function
    End If
    Set r = Range(Ngn.DataRge)
    itemnum = r.Columns.Count
    smpnum = r.Rows.Count - 1
    Set r = r(2, 1).Resize(smpnum, itemnum)
    v = r.Value
    'Set tmpsht = r.Worksheet.Parent.Worksheets.Add
    If bAllGroups Then
        ReDim vrst(1 To itemnum * (itemnum - 1) / 2, 1 To 2)
        l = 1
        For i = 1 To itemnum - 1
            For j = i + 1 To itemnum
                Set r1 = Union(r.Columns(i), r.Columns(j))
                For k = 1 To smpnum
                    If v(k, i) <> "" Then
                        vrst(l, 1) = vrst(l, 1) + WorksheetFunction.Rank_Avg(v(k, i), r1, 1)
                    End If
                    If v(k, j) <> "" Then
                        vrst(l, 2) = vrst(l, 2) + WorksheetFunction.Rank_Avg(v(k, j), r1, 1)
                    End If
                Next k
                l = l + 1
            Next j
        Next i
    Else
        ReDim vrst(1 To itemnum - 1, 1 To 2)
        l = 1
        For j = 2 To itemnum
            Set r1 = Union(r.Columns(1), r.Columns(j))
            For k = 1 To smpnum
                If v(k, 1) <> "" Then
                    vrst(l, 1) = vrst(l, 1) + WorksheetFunction.Rank_Avg(v(k, 1), r1, 1)
                End If
                If v(k, j) <> "" Then
                    vrst(l, 2) = vrst(l, 2) + WorksheetFunction.Rank_Avg(v(k, j), r1, 1)
                End If
            Next k
            l = l + 1
        Next j
    End If
    CalcRankAvg_TK3 = l
End Function

Private Sub Calc_MultiCmp(vbapara As NGN_VBA, rst As MULTICMP_RESULT)
    Dim rdata As Range, rout As Range
    Set rdata = Range(vbapara.DataRge)
    Set rout = Range(vbapara.OutRge)
    Call changeToSSDir
    Call KKS_fKH_Kihon(rdata, rst.rstBasicStat)
    GActShtObj.Activate
    Call CalcKrs_TK2(rst.rstKrs, vbapara)
    GActShtObj.Activate
    If Tk3Para.pCode = 200 Then
        Call CalcRankAvg_TK3(rst.rstRankAvg, vbapara, True)
        Call CalcSteelDwass_TK3(rst.rstSteelDwass, vbapara)
    ElseIf Tk3Para.pCode = 201 Then
        Call CalcRankAvg_TK3(rst.rstRankAvg, vbapara, False)
        Call CalcSteel_TK3(rst.rstSteel, vbapara)
    ElseIf Tk3Para.pCode = 202 Then
        Call CalcShirleyWilliams_TK3(rst.rstShirleyWilliams, vbapara)
    End If
End Sub

Private Function handleMultiCmpData(vbapara As NGN_VBA) As Worksheet
    Dim i As Long, j As Long
    Dim rge As Range, r As Range
    Dim tmpsht As Worksheet
    Dim vdata As Variant
    Dim itemnum As Long, smpnum As Long
    Dim msgStr As String
    
    On Error Resume Next
    Set handleMultiCmpData = Nothing
    Set rge = Range(Tk3Para.datarge1)
    vdata = rge.Value
    
    msgStr = ""
    If rge Is Nothing Then
        msgStr = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If
    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set tmpsht = Nothing
        Exit Function
    End If
    
    itemnum = rge.Columns.Count
    smpnum = rge.Rows.Count
    Set tmpsht = rge.Worksheet.Parent.Sheets.Add
    Set rge = tmpsht.Range("$A$1")
    If Tk3Para.flgDataTitle = 1 Then
        rge.Resize(smpnum, itemnum) = vdata
    Else
        rge(2, 1).Resize(smpnum, itemnum) = vdata
        smpnum = smpnum + 1
    End If
    
    Set r = rge(2, 1).Resize(smpnum - 1, itemnum)
    For i = 1 To itemnum
        If WorksheetFunction.Count(r.Columns(i)) < 1 Then
            MsgBox MSG_nodata
            Application.DisplayAlerts = False
            tmpsht.Delete
            Application.DisplayAlerts = True
            Exit Function
        End If
    Next i
    
    vbapara.DataRge = "'" & tmpsht.name & "'!" & rge.Resize(smpnum, itemnum).Address
    vbapara.f_datatitle = 1
    vbapara.f_except = Tk3Para.flgExcept
    vbapara.OutRge = Tk3Para.OutRge
    rstMultiCmp.itemnum = itemnum
    
    Set handleMultiCmpData = tmpsht
    On Error GoTo 0
End Function

Private Function Output_MultiCmp()
    Dim rgeout As Range
    Dim row As Long
    row = 1
    Set rgeout = Range(toXlA1str(Tk3Para.OutRge))
    rgeout = "|fffd|N|fffd||fffd||fffd|X|fffd|J|fffd||fffd||fffd|E|fffd|E|fffd|H|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|d|fffd||fffd|r|fffd|@"
    rgeout.Font.Bold = True
    row = 3
    row = row + OutputBasicStat_MultiCmp(rgeout, row)
    row = row + OutputKrs_TK2(rstMultiCmp.rstKrs, rgeout, row, rstMultiCmp.itemnum)
    If Tk3Para.pCode = 200 Then
        row = row + OutputSteelDwass_MultiCmp(rgeout, row)
    ElseIf Tk3Para.pCode = 201 Then
        row = row + OutputSteel_MultiCmp(rgeout, row)
    ElseIf Tk3Para.pCode = 202 Then
        row = row + OutputShirleyWilliams_MultiCmp(rgeout, row)
    End If
End Function

Private Sub Method_MultiCmp()
    Dim dlg As DialogSheet
    Dim bOn As Boolean
    Set dlg = ThisWorkbook.DialogSheets("DlgMultiCmp")
    bOn = (dlg.OptionButtons("optMethod2").Value = xlOn)
    dlg.OptionButtons("optLeft").Enabled = bOn
    dlg.OptionButtons("optBoth").Enabled = bOn
    dlg.OptionButtons("optRight").Enabled = bOn
End Sub

Private Sub SetMacro_MultiCmp()
    Dim dlg As DialogSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMultiCmp")
    dlg.OptionButtons("optMethod1").OnAction = "Method_MultiCmp"
    dlg.OptionButtons("optMethod2").OnAction = "Method_MultiCmp"
    dlg.OptionButtons("optMethod3").OnAction = "Method_MultiCmp"
    Method_MultiCmp
End Sub

Sub KKS_MultiCmp_1P01()
    Dim rtn As Integer
    Dim dlg As DialogSheet, tmpsht As Worksheet
    Dim rgeout As Range
    Dim vbapara As NGN_VBA
    Set GActShtObj = ActiveSheet
    Set dlg = ThisWorkbook.DialogSheets("DlgMultiCmp")
    SetMacro_MultiCmp
redisp:
    Call SaveDlg(dlg)
    rtn = dlg.Show
    If rtn Then
        Call SaveDlg(dlg)
        Tk3Para.datarge1 = (dlg.EditBoxes("RgeDataIn").text)
        Tk3Para.OutRge = (dlg.EditBoxes("RgeDataOut").text)
        Tk3Para.flgExcept = 1
        Tk3Para.flgDataTitle = 1
        Tk3Para.flgSide = IIf(dlg.OptionButtons("optLeft").Value = xlOn, 1, _
                        IIf(dlg.OptionButtons("optBoth").Value = xlOn, 2, 3))
        Tk3Para.pCode = IIf(dlg.OptionButtons("optMethod1").Value = xlOn, 200, _
                        IIf(dlg.OptionButtons("optMethod2").Value = xlOn, 201, 202))
        Set tmpsht = handleMultiCmpData(vbapara)
        If tmpsht Is Nothing Then GoTo redisp
        
        GActShtObj.Activate
        Call Calc_MultiCmp(vbapara, rstMultiCmp)
        Tk3Para.OutRge = (dlg.EditBoxes("RgeDataOut").text)
        GActShtObj.Activate
        Call Output_MultiCmp
        
        Application.DisplayAlerts = False
        tmpsht.Delete
        Application.DisplayAlerts = True
    Else
        Call RestoreDlg(dlg)
    End If
End Sub
Attribute VB_Name = "startEnd"
'=======================================================
' SSS|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|Ver1 : |fffd|X|fffd|^|fffd|[|fffd|g & |fffd|N|fffd||fffd||fffd|[|fffd|Y |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|
'
' 2010.11 : LSQ
'=======================================================
Option Explicit

Sub Auto_open()
    Dim nbk As Integer
    Dim iconBar As CommandBar
    
    '-- 2018.12.18 LSQ mdf -- bgn
    Call excel_AppVer_chk
    
    If isExcelVerOK_B(14, 16) = False Then 'Excel2010 (VerNo = 14) -- Excel2019 (VerNo = 16)
        'Auto_Close
    End If
    '-- end --
    
    '|fffd||fffd||fffd|t|fffd||fffd|check
    If user_date_chk() = False Then 'Check RSUIMUSE.INI
        Call fExit_KKSV1_1P01
    End If
    
    '
    If UpdateUserCheck() = False Then 'Check SSS_KKS1.ini
        Call fExit_KKSV1_1P01
    End If
    
    '|fffd|V|fffd|[|fffd|g|fffd||315|\|fffd||fffd||fffd||602||fffd||582||fffd|OFF
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    '13.9.30 LSQ add
    If iSss_Inst_Chk(10, "") <> 1 Then '|fffd||fffd||fffd|K|fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||90a9||fffd||12c82||5c2||702||fffd|
        Call fExit_KKSV1_1P01
    End If
    
#If 0 Then '18.12.19 LSQ cmt
    '13.9.30 LSQ add
    If isExcelVerOK_A(16, 2) = False Then 'if after Excel2016, 15.10.13 LSQ mdf
        'warning, but continue
    End If
'
'    Call Application.Run(GBKNAME_VBACM & "!isExcelVerOK", 16)   '13.2.18 LSQ add, 13.9.30 LSQ cmt
'
#End If


    nbk = Workbooks.Count
    If (nbk = 0) Then
        Workbooks.Add
    End If
    
'   DoEvents    '2019.6.5 LSQ add
'   2019.6.12 LSQ note : delete all DoEvents before "WorkBookOpen() calling"
'
    Call WorkBookOpen_SetOpenNum(GBKNAME_VBACM) 'firstly open COMMON file
    
#If 1 Then '11.4 LSQ cmt
    Call WorkBookOpen(GxlaBkGraph)
    Call WorkBookOpen(GxlaSrkGraph)
    Call WorkBookOpen(GxlaThGraph)
    Call WorkBookOpen(GxlaTai5BkGraph)
    Call WorkBookOpen(GxlaMosaic)
    Call WorkBookOpen(GxlaNormOrder)
    Call WorkBookOpen(GxlaBkHSKGrp)
    'Call WorkBookOpen(GxlaLogistic)
    '
    'Call WorkBookOpen(GxlaBkMT)
    
    'Application.Run (GxlaBkMT & "!MT_AutoOpen")
#End If

    If getExcelVerNo() >= 12 Then
        Call WorkBookOpen_SetOpenNum(GBKNAME_VBA07)
    End If
    
    'Menu Bar |fffd||fffd||fffd||fffd| --- bgn ---; 11.2.22 LSQ mdf
    Set iconBar = CommandBars(BARNAME_KKSV1_ICON)
    iconBar.Visible = False
    
    If getExcelVerNo() < 12 Then
        make_MenuBar
    Else
        WorkBookOpen (RibbonMenu)
    End If
    
    iconBar.Delete
    'Menu Bar |fffd||fffd||fffd||fffd| --- end ---

End Sub

Sub Auto_Close()
    Call fExit_KKSV1_1P01
End Sub

Sub fExit_KKSV1_1P01()
    
    On Error Resume Next
    
    Application.CutCopyMode = xlCopy
    
    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||d3dc|
    If getExcelVerNo() < 12 Then
        Call delete_MenuBar(BARNAME_KKSV1)
        'Call delete_MenuBar(BARNAME_KKSV1_ICON)    '15.11.17 LSQ cmt
    End If

    Call delete_MenuBar(BARNAME_KKSV1_ICON) '15.11.17 LSQ add

    'Dll Memory Free
    '<Not necessary>

    '2011.01.07 added
    ClosePairComp
    'end add
    
#If 1 Then '11.4 LSQ cmt
    '|fffd|u|fffd|b|fffd|N|fffd||303|N|fffd||fffd||fffd|[|fffd|Y
    Call WorkBookClose(GxlaBkGraph)
    Call WorkBookClose(GxlaSrkGraph)
    Call WorkBookClose(GxlaThGraph)
    Call WorkBookClose(GxlaTai5BkGraph)
    Call WorkBookClose(GxlaMosaic)
    Call WorkBookClose(GxlaNormOrder)
    Call WorkBookClose(GxlaBkHSKGrp)
    'Call WorkBookClose(GxlaLogistic)
    '
    'Application.Run (GxlaBkMT & "!MT_AutoClose")
    'Call WorkBookClose(GxlaBkMT)
#End If
    
    If getExcelVerNo() >= 12 Then
        Call WorkBookClose_OnOpenNum(GBKNAME_VBA07)
        Call WorkBookClose(RibbonMenu)
    End If
    
    Call WorkBookClose_OnOpenNum(GBKNAME_VBACM) 'at last close COMMON file
    
    Application.ScreenUpdating = True '|fffd||fffd||295|\|fffd||fffd|ON
    Application.DisplayAlerts = True '|fffd||6d1||fffd||fffd||fffd|
    
    On Error GoTo 0
    
    ThisWorkbook.Close SaveChanges:=False
  
End Sub

Private Sub ClosePairComp()
    On Error Resume Next
    Call WorkBookClose("PairComp.xls")
    On Error GoTo 0
End Sub
'=== EOF ===

' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
