Attribute VB_Name = "ADOConnection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Adatbazis kapcsolat letrehozasaert es lezarasaert felelos osztaly.
'
' @remarks  Reference needed: Microsoft ActiveX Data Objects X.X Library
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
'@Folder("Database")
'@PredeclaredId

''
' Osztaly mezok
'
' @param Connection     Adatbazis kapcsolat (ADODB.Connetion object)
' @param LastError      Hibauzenet
' @param Error          Hiba statusz: igaz, ha hiba tortent
Private Type TFields
    Connection  As ADODB.Connection
    LastError   As String
    Error       As Boolean
End Type
Private this    As TFields


'==================================================================================================================================================
'   PROPERTIES
'==================================================================================================================================================
 
Public Property Get Self() As ADOConnection
    Set Self = Me
End Property
 
''
' Kiolvassa az aktiv kapcsolatot.
'
' @return               aktiv kapcsolat
Public Property Get Connection() As ADODB.Connection
    Set Connection = this.Connection
End Property

''
' Beallitja az akt|fffd|v kapcsolatot.
'
' @param Value           akt|fffd|v kapcsolat
Public Property Set Connection(ByVal Value As ADODB.Connection)
    Set this.Connection = Value
End Property

''
' Kiolvassa a hibauzenetet.
'
' @return               hibauzenet szovege
Public Property Get LastError() As String
    LastError = this.LastError
End Property

''
' Beallitja a hibauzenetet.
'
' @param Value              hibauzenet szovege
Public Property Let LastError(ByVal Value As String)
    this.LastError = Value
End Property

''
' Kiolvassa a hiba statuszat.
'
' @return               hiba statusza (igaz ha hiba tortent)
Public Property Get Error() As Boolean
    Error = this.Error
End Property

''
' Beallitja a hiba statuszat.
'
' @param Value              hiba statusza (igaz/hamis)
Public Property Let Error(ByVal Value As Boolean)
    this.Error = Value
End Property

'==================================================================================================================================================
'   CLASS EVENTS
'==================================================================================================================================================

''
' Osztaly konstruktor. Letrehozza az adatbazis kapcsolatot, vagy hibat dob.
'
' @param CONNECTION_STRING  connection string
' @return                   osztaly instancia
Public Function Create(ByVal CONNECTION_STRING As String) As ADOConnection
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New ADOConnection
        Set .Connection = New ADODB.Connection
        OpenAdoConnection .Connection, CONNECTION_STRING, Error_, LastError_
        .Error = Error_
        .LastError = LastError_
        Set Create = .Self
    End With
End Function

''
' Osztaly destruktor. Lezarja az aktiv kapcsolatot.
Private Sub Class_Terminate()
    'close connection
    CloseAdoConnection
End Sub

'==================================================================================================================================================
'   METHODS
'==================================================================================================================================================
 
''
' Letrehozza az adatbazis kapcsolatot. Ha hiba tortent, hibauzenetet general.
'
' @param Connection         kapcsolat objektum
' @param CONNECTION_STRING  connection string
' @param Error_             hiba statusz (callback)
' @param LastError_         hibauzenet (callback)
Private Sub OpenAdoConnection(ByRef Conn As ADODB.Connection, ByVal CONNECTION_STRING As String, _
                              Optional ByRef Error_ As Boolean, Optional ByRef LastError_ As String)
    On Error GoTo AdoError
 
    Error_ = False
 
    '   Connection object
    Conn.Open CONNECTION_STRING
    Debug.Print Now & "  Connection state: " & Conn.State
 
CleanExit:
    Exit Sub
AdoError:
    Error_ = True
    Dim strErr As String

    ' VB |fffd|ltal gener|fffd|lt hiba|fffd|zenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API |fffd|ltal gener|fffd|lt hiba|fffd|zenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = Conn.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    LastError_ = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' Lezarja az aktiv kapcsolatot.
Private Sub CloseAdoConnection()
 
    If Not this.Connection Is Nothing Then
        If this.Connection.State = adStateOpen Then this.Connection.Close
        Debug.Print Now & "  Connection state: " & this.Connection.State
    End If
    Set this.Connection = Nothing
 
End Sub

''
' Vegrehajt egy SQL parancsot
'
' @param SQL_String     SQL parancs
Public Sub ExecuteSqlCommand(ByVal SQL_String As String)

    On Error GoTo AdoError
    
    With this.Connection
        Dim CurrentCommandTimeout As Long
        CurrentCommandTimeout = .CommandTimeout
        .CommandTimeout = 5
        
        .BeginTrans
        .Execute SQL_String, , adCmdText + adExecuteNoRecords + adAsyncExecute
        Dim hook As Date: hook = Now
        Do
            If Not CBool(.State And adStateExecuting) Then
                .CommitTrans
                Exit Do
            ElseIf Now > hook + TimeValue("0:00:05") Then
                .Cancel
                .RollbackTrans
                this.Error = True
                this.LastError = "Id|fffd|t|fffd|ll|fffd|p|fffd|s"
                Exit Do
            Else
                Application.Wait (Now + TimeValue("0:00:01"))
            End If
        Loop
    End With
    
'        Do Until .State = 0
'            If Now > hook + TimeValue("0:00:05") Then
'                this.Error = True
'                this.LastError = "Id|fffd|t|fffd|ll|fffd|p|fffd|s"
'                Exit Do
'            End If
'        Loop
    
    
    
'    Dim cmd As ADODB.Command
'    Set cmd = New ADODB.Command
'    With cmd
'        Set .ActiveConnection = this.Connection
'        .CommandType = adCmdText
'        .CommandText = SQL_String
'        .Execute
'        Do Until .State = 0 'ha elobb kilepunk, mint ahogy a cmd lezarul, akkor kifagy
'        Loop
'    End With

CleanExit:
    this.Connection.CommandTimeout = CurrentCommandTimeout
    Exit Sub
AdoError:
    this.Connection.Cancel
    this.Connection.RollbackTrans
    this.Error = True
    Dim strErr As String

    ' VB |fffd|ltal gener|fffd|lt hiba|fffd|zenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API |fffd|ltal gener|fffd|lt hiba|fffd|zenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = this.Connection.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    this.LastError = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' Ellenorzi, letezik-e a megadott tabla az adatbazisban
'
' @param TableName      keresett tabla neve
' @return               true/false
Public Function TableExists(ByVal TableName As String) As Boolean
'Excel eseteben TableName-et $-al kel megadni
    Dim rsSchema As ADODB.Recordset
    Set rsSchema = this.Connection.OpenSchema(adSchemaColumns, _
                        Array(Empty, Empty, TableName, Empty))
    TableExists = Not (rsSchema.BOF And rsSchema.EOF)
    rsSchema.Close
    Set rsSchema = Nothing
End Function

''
' Ellenorzi, letezik-e a megadott mezo a megadott tablaban
'
' @param TableName      tabla neve
' @param FieldName      keresett mezo neve
' @return               true/false
Public Function FieldExists(ByVal TableName As String, ByVal FieldName As String) As Boolean
'Excel eseteben TableName-et $-al kel megadni
    Dim rsSchema As ADODB.Recordset
    Set rsSchema = this.Connection.OpenSchema(adSchemaColumns, _
                        Array(Empty, Empty, TableName, FieldName))
    FieldExists = Not (rsSchema.BOF And rsSchema.EOF)
    rsSchema.Close
    Set rsSchema = Nothing
End Function

Attribute VB_Name = "AdoRecordset"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Recordset letrehozasaert es lezarasaert felelos osztaly.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
'@Folder("Database")
'@PredeclaredId

''
' Osztaly mezok
'
' @param Connection     Aktiv adatbazis kapcsolat (ADODB.Connetion object)
' @param Recordset      A lekerdezes eredmenyet tarolo Recordset (ADODB.Recordset object)
' @param LastError      Hibauzenet
' @param Error          Hiba statusz: igaz, ha hiba tortent
Private Type TAdoRecordset
    Connection As ADODB.Connection
    Recordset  As ADODB.Recordset
    LastError  As String
    Error      As Boolean
End Type
Private this As TAdoRecordset

Public Property Get Self() As AdoRecordset
    Set Self = Me
End Property

''
' Kiolvassa az aktiv kapcsolatot.
'
' @return               aktiv kapcsolat
Public Property Get Connection() As ADODB.Connection
    Set Connection = this.Connection
End Property

''
' Beallitja az akt|fffd|v kapcsolatot.
'
' @param Value          akt|fffd|v kapcsolat
Public Property Set Connection(ByRef Value As ADODB.Connection)
    Set this.Connection = Value
End Property

''
' Kiolvassa a recorset-et.
'
' @return               recordset
Public Property Get Recordset() As ADODB.Recordset
    Set Recordset = this.Recordset
End Property

''
' Beallitja a recordset-et.
'
' @param Value          recordset
Public Property Set Recordset(ByRef Value As ADODB.Recordset)
    Set this.Recordset = Value
End Property

''
' Kiolvassa a hibauzenetet.
'
' @return               hibauzenet szovege
Public Property Get LastError() As String
    LastError = this.LastError
End Property

''
' Beallitja a hibauzenetet.
'
' @param Value              hibauzenet szovege
Public Property Let LastError(ByVal Value As String)
    this.LastError = Value
End Property

''
' Kiolvassa a hiba statuszat.
'
' @return               hiba statusza (igaz ha hiba tortent)
Public Property Get Error() As Boolean
    Error = this.Error
End Property

''
' Beallitja a hiba statuszat.
'
' @param Value              hiba statusza (igaz/hamis)
Public Property Let Error(ByVal Value As Boolean)
    this.Error = Value
End Property

''
' Osztaly konstruktor. Vegrehajt egy SQL parancsot es eltarolja az eredmenyet recordset-kent, vagy hibat dob.
'
' @param Connection     aktiv adatbazis kapcsolat
' @param SQL_String     vegrehajtando SQL parancs
' @return               osztaly instancia
Public Function SQLtoRecordset(ByRef Conn As ADODB.Connection, ByVal SQL_String As String) As AdoRecordset
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New AdoRecordset
        If Not Conn Is Nothing Then
            If Conn.State = adStateOpen Then
                Set .Recordset = New ADODB.Recordset
                Set .Recordset.ActiveConnection = Conn
                If Not SQL_String = vbNullString Then
                    CreateRecordset .Recordset, SQL_String, ADODB.adCmdText, Error_, LastError_
                    .Error = Error_
                    .LastError = LastError_
                Else
                    .Error = True: .LastError = "Nincs SQL utas|fffd|t|fffd|s megadva"
                End If
            Else
                .Error = True: .LastError = "A kapcsolat nincs megnyitva"
            End If
        Else
            .Error = True: .LastError = "Nincs kapcsolat"
        End If
        Set SQLtoRecordset = .Self
    End With
End Function

''
' Osztaly konstruktor. Egy adatbazis tabla tartalmat eltarolja recordset-kent, vagy hibat dob.
'
' @param Connection     aktiv adatbazis kapcsolat
' @param TableName      tabla neve
' @return               osztaly instancia
Public Function OpenTableAsRecordSet(ByRef Conn As ADODB.Connection, ByVal TableName As String) As AdoRecordset
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New AdoRecordset
        If Not Conn Is Nothing Then
            If Conn.State = adStateOpen Then
                Set .Recordset = New ADODB.Recordset
                Set .Recordset.ActiveConnection = Conn
                If Not TableName = vbNullString Then
                    CreateRecordset .Recordset, TableName, ADODB.adCmdTable, Error_, LastError_
                    .Error = Error_
                    .LastError = LastError_
                Else
                    .Error = True: .LastError = "Nincs t|fffd|bla n|fffd|v megadva"
                End If
            Else
                .Error = True: .LastError = "A kapcsolat nincs megnyitva"
            End If
        Else
            .Error = True: .LastError = "Nincs kapcsolat"
        End If
        Set OpenTableAsRecordSet = .Self
    End With
End Function

''
' Osztaly destruktor. Lezarja a recordset-et.
Private Sub Class_Terminate()
    CloseAdoRecordset
End Sub

''
' Letrehozza a recordset-et.
'
' @param rs             inicializalt, de meg ures (nem megnyitott) Recordset objektum
' @param Source         SQL utasitas vagy a tabla neve
' @param CommandType    lekerdezes tipusa: adCmdText ha SQL parancsot hajtunk vegre vagy adCmdTable ha egy tablat olvasunk be
' @param Error_         hiba statusz (callback)
' @param LastError_     hibauzenet (callback)
Private Sub CreateRecordset(ByRef rs As ADODB.Recordset, ByVal Source As String, ByVal CommandType As ADODB.CommandTypeEnum, _
                                ByRef Error_ As Boolean, ByRef LastError_ As String)

    On Error GoTo AdoError
    Error_ = False

    'kapcsolat letrehozasa
    With rs
        .Source = Source
        Select Case CommandType
            Case ADODB.adCmdText
                .CursorType = adOpenStatic
                .CursorLocation = adUseClient
                .LockType = adLockOptimistic
            Case ADODB.adCmdTable
                .CursorType = adOpenStatic
                .CursorLocation = adUseClient
                .LockType = adLockOptimistic
        End Select
        .Open Options:=CommandType
    End With

    'kapcsolat ellenorzese
    If Not rs.State = adStateOpen Then
        Error_ = True
        LastError_ = "A Recordset l|fffd|trehoz|fffd|sa nem siker|fffd|lt"
    Else
        Debug.Print "A Recordset l|fffd|trej|fffd|tt" ' tesztel|fffd|shez
    End If

CleanExit:
    Exit Sub
AdoError:
    Error_ = True
    Dim strErr As String

    ' VB altal generalt hibauzenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API altal generalt hibauzenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = rs.ActiveConnection.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    LastError_ = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' A recordset-et kiirja egy excel tartomanyba.
'
' @param StartCell      cel tartomany kezdo (bal felso) cellaja
Public Sub WriteRecordsetToRange(ByVal startCell As Range)
 
'   ha StartCell t|fffd|bb cellabol all, akkor a bal felsot hasznalja
    If startCell.Cells.Count > 1 Then startCell = startCell.Cells(1)
    
    If Not this.Recordset Is Nothing Then
        startCell.CopyFromRecordset this.Recordset
    Else
        Debug.Print "Nincs Recordset" 'tesztel|fffd|shez
    End If
 
End Sub

''
' A recordset fejlecet kiirja egy excel tartomanyba.
'
' @param StartCell      cel tartomany kezdo (bal felso) cellaja
Public Sub WriteHeaderToRange(ByVal startCell As Range)
  
'   ha StartCell t|fffd|bb cellabol all, akkor a bal felsot hasznalja
    If startCell.Cells.Count > 1 Then startCell = startCell.Cells(1)
    With this.Recordset
        Dim i As Long
        For i = 0 To .Fields.Count - 1
            'Mez|fffd|/oszlop n|fffd|v:
            startCell.Offset(0, i).Value = .Fields(i).Name
        Next i
    End With
    
End Sub

''
' Lezarja a recordset-et.
Private Sub CloseAdoRecordset()
    If Not this.Recordset Is Nothing Then
        If this.Recordset.State = adStateOpen Then this.Recordset.Close
        Debug.Print "A Recordsetet lez|fffd|rtuk" ' tesztel|fffd|shez
    Else
        Debug.Print "Nincs lez|fffd|rand|fffd| recordset" ' tesztel|fffd|shez
    End If
    Set this.Recordset = Nothing
End Sub
Attribute VB_Name = "Booster"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Futas gyorsitasaert felelos osztaly.
' Kikapcsolja a kepernyo frissitest, kalkulaciot, esemenykezelest.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
 '@Folder("Application")
 
''
' Munkafuzet szamolasi beallitasanak (kezi/automatikus) eltarolasara szolgalo valtozo.
Private CalculationState As XlCalculationState

'==================================================================================================================================================
'   CLASS EVENTS
'==================================================================================================================================================
''
' Osztaly konstruktor. Lefuttatja a gyorsito eljarast.
Private Sub Class_Initialize()
    SpeedUp
End Sub
 
''
' Osztaly destruktor. Visszaallitja az eredeti beallitasokat.
Private Sub Class_Terminate()
    RestoreSpeed
End Sub
 
 
'==================================================================================================================================================
'   METHODS
'==================================================================================================================================================

''
' Lassito tenyezoket kikapcsolja.
Private Sub SpeedUp()
    CalculationState = Application.Calculation
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.EnableEvents = False
'    Application.DisplayAlerts = True
'    Application.DisplayStatusBar = True
End Sub

''
' Visszaallitja az eredeti beallitasokat.
Private Sub RestoreSpeed()
    On Error Resume Next
        Application.ScreenUpdating = True
        Application.Calculation = CalculationState
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Application.DisplayStatusBar = True
        Application.StatusBar = False
    On Error GoTo 0
End Sub
Attribute VB_Name = "Controller"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const TobbCellaError As String = "A makr|fffd| csak egy cella kijel|fffd|l|fffd|se eset|fffd|n m|fffd|k|fffd|dik"
Private Const NoRecordSelectedError As String = "Nincs t|fffd|tel kijel|fffd|lve"
Private Const NoFormError As String = "'%RelatedForm%' UserForm nem tal|fffd|lhat|fffd|"
Private Const UserFormNotDefinedError As String = "Nincs UserForm defini|fffd|lva"
Private Const DBTableNotDefinedError As String = "Nincs adatb|fffd|zis t|fffd|bla defini|fffd|lva"
Private Const Interruption As String = "Felhaszn|fffd|l|fffd|i megszak|fffd|t|fffd|s"

Private Const ERTEK As String = "e" 'ezzel jeloljuk, hogy keplet helyett ertek szukseges

Public Sub FormNyitas(ByRef sht As Object, ByRef sel As Range, ByVal UjTetel As Boolean)
'Form megnyitasa hivatkozott munkalap alapjan
    
    'check RelatedForm, RelatedTable
    If CheckRelatedForm(sht) = False Then
        MsgBox UserFormNotDefinedError
        GoTo CleanExit
    ElseIf CheckRelatedTable(sht) = False Then
        MsgBox DBTableNotDefinedError
        GoTo CleanExit
    End If
    
    Dim frm As Object
    Dim ID As Long
    Dim wsProxy As WorksheetProxy
    Set wsProxy = WorksheetProxy.Create(sht)
            
    If UjTetel Then

        Set frm = GetForm(wsProxy.RelatedForm)  'inicializalas megjelenites nelkul
        If frm Is Nothing Then GoTo NoFormExit
        Set frm.RelatedSheet = sht              'kapcsolodo lap beallitasa
        
        Dim dbProxy As DatabaseProxy
        Dim Cancel As Boolean
        Set dbProxy = DatabaseProxy.Create(sht, Cancel)
        If Cancel = True Then GoTo CancelExit
        
        ID = dbProxy.GetNextID           'uj ID megkeresese
        frm.SetIDOnly ID                 'ID betoltese
        Set wsProxy = Nothing            'memoria tisztitas
        Set dbProxy = Nothing            'memoria tisztitas
        ShowForm frm                     'form megjelenitese
        
    Else
    
        If sel.Cells.Count = 1 Then
                        
            'egy cella van kijelolve
            'check, letezo rekord, vagy uj rekord
            ID = wsProxy.GetRowID(sel.Row)
            If ID <= 0 Then
                MsgBox NoRecordSelectedError
            ElseIf ID > 0 Then
                'ha rekord
                Set frm = GetForm(wsProxy.RelatedForm)  'inicializalas megjelenites nelkul
                If frm Is Nothing Then GoTo NoFormExit
                Set frm.RelatedSheet = sht              'kapcsolodo lap beallitasa
                'adatokkal feltoltes
                Dim tetelData As Tetel
                Set tetelData = wsProxy.GetTetelData(ID) 'adatok beolvasasa munkalaprol
                If Not tetelData Is Nothing Then
                    frm.SetTetelData tetelData   'adatok betoltese form-ra
                    Set wsProxy = Nothing        'memoria tisztitas
                    Set dbProxy = Nothing        'memoria tisztitas
                    ShowForm frm                 'form megjelenitese
                Else
                    MsgBox NoRecordSelectedError
                End If
                
            End If
        Else
            'tobb cella van kijelolve
            MsgBox TobbCellaError
        End If
        
    End If
        
CleanExit:
    Set wsProxy = Nothing
    Set dbProxy = Nothing
    Exit Sub
NoFormExit:
    MsgBox Replace(NoFormError, "%RelatedForm%", wsProxy.RelatedForm, , , vbTextCompare)
    GoTo CleanExit
CancelExit:
    MsgBox Interruption
    GoTo CleanExit
End Sub

Public Sub FormRogzites(ByVal sht As Object, ByRef frm As Object)
'Form rogzitese hivatkozott munkalapra
    
    'check RelatedTable
    If CheckRelatedTable(sht) = False Then
        MsgBox DBTableNotDefinedError
        Exit Sub
    End If


    Dim boost As Booster: Set boost = New Booster
    
    '------------------------
    'ADATBAZIS frissitese
    '------------------------
    Dim tetelData As Tetel
    Set tetelData = frm.GetTetelData()
    Unload frm
    Set frm = Nothing
    If Not tetelData Is Nothing Then
        Dim dbProxy As DatabaseProxy
        Dim Cancel As Boolean
        Set dbProxy = DatabaseProxy.Create(sht, Cancel)
        If Cancel = True Then GoTo CancelExit
        'tetel rogzitese adatbazisba
        TetelRogzites dbProxy, tetelData, Cancel
        If Cancel = True Then GoTo CancelExit
'        'VIEW frissitese
'        RefreshView DbProxy, sht
        'TETELEK lap frissitese
        RefreshView dbProxy, shtTetelek
        'KIADASOK lap frissitese
        If CsakSajatRekord Then
            RefreshView dbProxy, shtKiadasok, "ttipus='KIAD|fffd|S' AND beoreklat=0"
        Else
            RefreshView dbProxy, shtKiadasok, "ttipus='KIAD|fffd|S'"
        End If
    End If
    
CleanExit:
    Set dbProxy = Nothing
    Set boost = Nothing
    Exit Sub
CancelExit:
    MsgBox Interruption
    GoTo CleanExit
End Sub

Public Sub TetelRogzites(ByRef dbProxy As DatabaseProxy, ByVal tetelData As Tetel, ByRef Cancel As Boolean)
    With dbProxy
        .CheckAndCreateFields tetelData, Cancel     'mezok megletenek ellenorzese
        If Cancel = True Then Exit Sub
        .TetelRogzites tetelData                    'tetel rogzitese adatbazisba
    End With
End Sub

Public Sub RefreshView(ByRef dbProxy As DatabaseProxy, ByRef sht As Object, Optional ByVal SqlFilter As String = vbNullString)
    
    'protection off
    sht.Unprotect INTERNAL_PWD
    
    'DB tabla kiexportalasa Import lapra
    Dim imProxy As ImportProxy 'a konstruktor oldja fel az import lap vedelmet
    Set imProxy = New ImportProxy
    dbProxy.ExportTable SqlFilter
    
    Dim wsProxy As WorksheetProxy
    Set wsProxy = WorksheetProxy.Create(sht)
    
    'Ha szurve van, a szurot ki kell venni
    With wsProxy
        .ResetFilters
        .HandleColors
    End With
    
    'VIEW adatainak torlese
    If Not wsProxy.DataRange Is Nothing Then wsProxy.DataRange.ClearContents
    
    'Import laprol adatok atemelese
    GetImportData imProxy, wsProxy
    
    '?TODO: Import lap torlese?

    'Egyeb oszlopokba kepletek masolasa
     CopyAllFormula imProxy, wsProxy

    'Calculate
    Application.Calculate
    Do While Application.CalculationState <> xlDone
        DoEvents
    Loop

    'kepletek rogzitese ahol szukseges
    PasteAllValues wsProxy

    'Formatumok masolasa
    CopyFormats wsProxy
    
    'sorbarendezes ujra
    With wsProxy
        .ResetFilters
        .HandleColors
    End With

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True
    
    '-----------------------------------------------------
    'frissites idejenek visszairasa setup lapra
    '-----------------------------------------------------
    'protection off
    shtSetup.Unprotect INTERNAL_PWD
    
    If RangeExists("rngTetelekUpdated", shtSetup) Then
        shtSetup.Range("rngTetelekUpdated").Value = Now
    End If
    
    'protection vissza
    shtSetup.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    shtSetup.EnableOutlining = True
    

CleanExit:
    Set wsProxy = Nothing
    Set imProxy = Nothing
End Sub

Public Sub DoSort(ByVal Target As Range)
'lap sorbarendezese Target oszlopa alapjan

    Dim sht As Worksheet
    Set sht = Target.Parent

    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster

    With WorksheetProxy.Create(sht)
        .SortTable Target
        .HandleColors
    End With
    
    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True

End Sub

Public Sub DoFilter(ByVal Target As Range)
'lap szurese Target oszlopa alapjan

    Dim sht As Worksheet
    Set sht = Target.Parent

    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster
    
    With WorksheetProxy.Create(sht)
        .FilterTable Target
        .HandleColors
    End With

    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True

End Sub

Public Sub DoReset(ByVal sht As Worksheet)
'minden szurot torol, ID szerint rakja sorba
    
    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster

    With WorksheetProxy.Create(sht)
        .ResetFilters
        .HandleColors
    End With
    
    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True

End Sub

Private Function GetForm(ByVal FormName As String) As Object
'hiba eseten Nothing a visszateresi ertek --> hivo eljarasban kezelni
    On Error Resume Next
        Set GetForm = CallByName(New FormSpawner, "FormInstance_" & FormName, VbGet)
    On Error GoTo 0
End Function

Private Sub ShowForm(ByVal frm As Variant)
'Form megjelenitese
    frm.Show
End Sub

Private Function CheckRelatedForm(ByRef sht As Object) As Boolean
' Ellenorzi, hogy definialva van-e sht objektumban a RelatedForm property.
    On Error Resume Next
        Dim rf As String: rf = sht.RelatedForm
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    CheckRelatedForm = Not (rf = vbNullString)
End Function

Private Function CheckRelatedTable(ByRef sht As Object) As Boolean
' Ellenorzi, hogy definialva van-e sht objektumban a RelatedTable property.
    On Error Resume Next
        Dim rt As String: rt = sht.RelatedTable
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    CheckRelatedTable = Not (rt = vbNullString)
End Function

Private Sub GetImportData(ByRef imProxy As ImportProxy, ByRef wsProxy As WorksheetProxy)
'Import laprol adatok atemelese
    
    imProxy.Refresh 'dimenziok frissitese
    
    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        Dim CopyRange As Range
        Set CopyRange = imProxy.GetDataColumn(HdrAzon)
        If Not CopyRange Is Nothing Then
            Dim PasteRange As Range
            Set PasteRange = wsProxy.sht.Cells(wsProxy.HeaderRange.Row + 1, wsProxy.HeaderDict(HdrAzon))
            CopyImportColumn CopyRange, PasteRange
        End If
    Next HdrAzon
    
    wsProxy.Refresh 'LastRow ujraszamolasa
    
End Sub

Private Sub CopyImportColumn(ByVal CopyRange As Range, ByVal PasteRange As Range)
' Import lap egy oszlopanak ertekeit atmasolja (PasteValues) a megadott helyre
    CopyRange.Copy
    PasteRange.PasteSpecial xlPasteValues
    Application.CutCopyMode = False
End Sub

Private Sub CopyAllFormula(ByRef imProxy As ImportProxy, ByRef wsProxy As WorksheetProxy)
'Egyeb oszlopokba kepletek masolasa

    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        If Not imProxy.FieldExists(HdrAzon) Then
            'kepletet masolni kepletkent, hogy mindent kalkulaljon
            With wsProxy
                Dim CopyRange As Range
                Set CopyRange = .sht.Cells(.FormulaRowIndex, .HeaderDict(HdrAzon))
                Dim PasteRange As Range
                Set PasteRange = .sht.Range( _
                                        .sht.Cells(.HeaderRange.Row + 1, .HeaderDict(HdrAzon)), _
                                        .sht.Cells(.LastUsedRow, .HeaderDict(HdrAzon)) _
                                        )
                CopyFormula CopyRange, PasteRange
            End With
        End If
    Next HdrAzon

End Sub

Private Sub CopyFormula(ByVal CopyRange As Range, ByVal PasteRange As Range)
' Egy cella kepleteit atmasolja (PasteFormulasAndNumberFormats) a kijelolt range-be
    CopyRange.Copy
    PasteRange.PasteSpecial xlPasteFormulasAndNumberFormats
    Application.CutCopyMode = False
End Sub

Private Sub PasteAllValues(ByRef wsProxy As WorksheetProxy)
'Kepletek rogzitese, ahol szukseges

    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        With wsProxy
            If StrComp(.ControlDict(HdrAzon), ERTEK, vbTextCompare) = 0 Then
                Dim PasteRange As Range
                Set PasteRange = .sht.Range( _
                                        .sht.Cells(.HeaderRange.Row + 1, .HeaderDict(HdrAzon)), _
                                        .sht.Cells(.LastUsedRow, .HeaderDict(HdrAzon)) _
                                        )
                PasteValues PasteRange
            End If
        End With
    Next HdrAzon
    
End Sub

Private Sub PasteValues(ByVal PasteRange As Range)
'A hivatkozott range ertekeit rogziti (Copy-PasteValues)
    PasteRange.Copy
    PasteRange.PasteSpecial xlPasteValues
    Application.CutCopyMode = False
End Sub

Private Sub CopyFormats(ByRef wsProxy As WorksheetProxy)
'Formatumok masolasa
    With wsProxy
        .HeaderRange.Offset(.FormulaRowIndex - .HeaderRange.Row).Copy
        .DataRange.PasteSpecial xlPasteFormats
    End With
    Application.CutCopyMode = False
End Sub

Attribute VB_Name = "DatabaseProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Adatbazis (excel fajl) egy tablajanak (munkalapjanak) proxy-ja.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12


Option Explicit
'@PredeclaredID

''
' Connection string template - placeholder-ekkel
Private Const CONN_STR_TEMPLATE As String = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=%DATASOURCE%;Extended Properties='Excel 12.0;HDR = YES'"

''
' Osztaly mezok.
'
' @param ADOConn        ADOConnection instancia
' @param RelatedTable   Adatbazis tabla (Excel lap) elnevezese
' @param IDREF          Elsodleges kulcsmezo elnevezese
Private Type TFields
    AdoConn As ADOConnection
    RelatedTable As String
    IDREF As String
End Type
Private this As TFields

Public Property Get Self() As DatabaseProxy
    Set Self = Me
End Property

''
' Megadja az elsodleges kulcsmezo elnevezeset.
'
' @return               elsodleges kulcsmezo elnevezese
Public Property Get IDREF() As String
    IDREF = this.IDREF
End Property

''
' Beallitja az elsodleges kulcsmezo elnevezeset.
'
' @param IDREF          elsodleges kulcsmezo elnevezese
Public Property Let IDREF(ByVal Value As String)
    this.IDREF = Value
End Property


''
' Megadja a connection string-et
'
' @return               connection string
Private Property Get ConnectionString() As String
    ConnectionString = Replace(CONN_STR_TEMPLATE, "%DATASOURCE%", DataSourceADO, , , vbTextCompare)
End Property

''
' Megadja a connection string-be beillesztendo adatforrast (=adatbazis eleresi utvonala).
'
' @return               adatbazis eleresi utvonala
' @remarks              mindenkepp .xlsb fajlt hoz letre, ha mas kiterjesztest adok, nem nyitja meg
Private Property Get DataSourceADO() As String
    Dim fName As String
    If RangeExists("rngDBPath", shtSetup) Then
        fName = shtSetup.Range("rngDBPath").Value
    Else
        fName = "DB_FILE.xlsb"
    End If
    DataSourceADO = ThisWorkbook.Path & "\" & fName
End Property

''
' Megadja a kapcsolodo adatbazis tabla nevet.
'
' @return               kapcsolodo adatbazis tabla neve
Public Property Get RelatedTable() As String
    RelatedTable = this.RelatedTable
End Property

''
' Beallitja a kapcsolodo adatbazis tabla nevet.
'
' @param RelatedTable   kapcsolodo adatbazis tabla neve
Public Property Let RelatedTable(ByVal Value As String)
    this.RelatedTable = Value
End Property

''
' Osztaly destruktor
Private Sub Class_Terminate()
    Set this.AdoConn = Nothing
End Sub

''
' Osztaly konstruktor
'
' @param sht            munkalap objektum
' @return               osztaly instancia
Public Function Create(ByVal sht As Object, Cancel As Boolean) As DatabaseProxy

    With New DatabaseProxy
        .IDREF = sht.IDColumnHeader
        .RelatedTable = sht.RelatedTable
        .CheckAndCreateDatabase Cancel
        Set Create = .Self
    End With
    
End Function

''
' Ellenorzi, letezik-e az adatbazis es a tabla. Ha nem: rakerdez, hogy letrehozza-e. Ha nem: Cancel=True
' Kapcsolodik is az adatbazishoz.
'
' @param Cancel         megszakitas statusz
Public Sub CheckAndCreateDatabase(Cancel As Boolean)
    
    If Not DatabaseExists Then
        Dim res As VbMsgBoxResult
        res = MsgBox("Az adatb|fffd|zis nem tal|fffd|lhat|fffd|. L|fffd|trehozzam?", vbOKCancel, "Adatb|fffd|zis hi|fffd|nyzik")
        Select Case res
            Case VbMsgBoxResult.vbOK
                ConnectToDatabase Cancel
                If Cancel = True Then Exit Sub
            Case VbMsgBoxResult.vbCancel
                Cancel = True
                Exit Sub
        End Select
    Else
        ConnectToDatabase Cancel
        If Cancel = True Then Exit Sub
    End If
    
    If Not TableExists(this.RelatedTable) Then
        res = MsgBox(this.RelatedTable & " t|fffd|bla nem tal|fffd|lhat|fffd| az adatb|fffd|zisban. L|fffd|trehozzam?", vbOKCancel, "T|fffd|bla hi|fffd|nyzik")
        Select Case res
            Case VbMsgBoxResult.vbOK
                CreateTable this.RelatedTable, Cancel
                If Cancel = True Then Exit Sub
            Case VbMsgBoxResult.vbCancel
                Cancel = True
                Exit Sub
        End Select
    End If
    
End Sub

''
' Ellenorzi, leteznek-e a tetelben megadott mezok. Ha nem: rakerdez, hogy letrehozza-e. Ha nem: Cancel=True
'
' @param tetelData      Tetel objektum
' @param Cancel         megszakitas statusz
' @see                  Tetel
Public Sub CheckAndCreateFields(ByVal tetelData As Tetel, Cancel As Boolean)
    Dim Field As Variant
    For Each Field In tetelData.Fields
        Dim FieldName As String
        FieldName = CStr(Field)
        If Not FieldExists(this.RelatedTable, FieldName) Then
            Dim res As VbMsgBoxResult
            res = MsgBox(FieldName & " mez|fffd| nem tal|fffd|lhat|fffd| az " & this.RelatedTable & " t|fffd|bl|fffd|ban. L|fffd|trehozzam?", vbOKCancel, "Mez|fffd| hi|fffd|nyzik")
            Select Case res
                Case VbMsgBoxResult.vbOK
                    CreateField this.RelatedTable, FieldName, tetelData.SqlDataType(FieldName), Cancel
                    If Cancel = True Then Exit Sub
                Case VbMsgBoxResult.vbCancel
                    Cancel = True
                    Exit Sub
            End Select
        End If
    Next Field
End Sub

''
' Ellenorzi, letezik-e az adatbazis fajl.
'
' @return               true/false
Private Function DatabaseExists() As Boolean
    DatabaseExists = FileExists(DataSourceADO)
End Function

''
' Kapcsolat letrehozasa (akor is, ha meg nem letezik a DB fajl).
'
' @param Cancel         megszakitas statusz
Private Sub ConnectToDatabase(Cancel As Boolean)
    Set this.AdoConn = ADOConnection.Create(ConnectionString)
    With this.AdoConn
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
            Cancel = True
        End If
    End With
End Sub

''
' Ellenorzi, letezik-e a megadott tabla az adatbazisban
'
' @param TableName      keresett tabla neve
' @return               true/false
Private Function TableExists(ByVal TableName As String) As Boolean
    TableExists = this.AdoConn.TableExists(TableName & "$")
End Function

''
' Letrehozza a hivatkozott tablat az adatbazisban
'
' @param TableName      tabla neve
' @param Cancel         megszakitas statusz
Private Sub CreateTable(ByVal TableName As String, Cancel As Boolean)
    
    Dim SQL_String As String
    SQL_String = "CREATE TABLE [%TABLENAME%] ([%ID%] Int)"
    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%ID%", this.IDREF, , , vbTextCompare)
    
    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
            Cancel = True
        End If
    End With
    
End Sub

''
' Ellenorzi, letezik-e a megadott mezo a megadott tablaban
'
' @param TableName      tabla neve
' @param FieldName      keresett mezo neve
' @return               true/false
Private Function FieldExists(ByVal TableName As String, ByVal FieldName As String) As Boolean
    FieldExists = this.AdoConn.FieldExists(TableName & "$", FieldName)
End Function

''
' Letrehozza a hivatkozott mezot a hivatkozott tablaban
'
' @param TableName      tabla neve
' @param FieldName      mezo neve
' @param DataType       adattipus
' @param Cancel         megszakitas statusz
Private Sub CreateField(ByVal TableName As String, ByVal FieldName As String, ByVal DataType As String, Cancel As Boolean)
    
    Dim SQL_String As String
    SQL_String = "ALTER TABLE [%TABLENAME%$] ADD COLUMN [%FIELDNAME%] %DATATYPE%"
    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%FIELDNAME%", FieldName, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%DATATYPE%", DataType, , , vbTextCompare)
    
    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
            Cancel = True
        End If
    End With

End Sub

''
' Letezo rekord frissitese vagy uj rekord rogzitese az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Public Sub TetelRogzites(ByVal tetelData As Tetel)
    'ha letezo ID, akkor meglevo rekord UPDATE, ha nem letezo, akkor CreateNewRecord
    Dim IDNum As Long
    If tetelData.Exists(this.IDREF) Then
        IDNum = tetelData.Item(this.IDREF)
        If IDNum <= 0 Then
            MsgBox this.IDREF & " = " & IDNum, vbCritical, "HIBA"
            Exit Sub
        End If
    Else
        MsgBox this.IDREF & " NOT EXISTS IN tetelData", vbCritical, "HIBA"
        Exit Sub
    End If
    
    If IDExists(IDNum) Then
        UpdateExistingRecord tetelData
    ElseIf IDNum = 1 Then
        CreateFirstRecord tetelData
    Else
        CreateNewRecord tetelData
    End If
    
End Sub

''
' Elso rekord letrehozasa.
' Mivel az elso rekord adja meg a szamformatumokat, ezt direkt modon rakjuk a fajlba, nem SQL-el,
' kulonben a szamokat is szovegkent tarolja az Excel.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub CreateFirstRecord(ByVal tetelData As Tetel)
    'Connection lezarasa (kulonben csak read-only tudjuk megnyitni)
    Set this.AdoConn = Nothing
    
    ' DB fajl megnyitasa
    Dim wb As Workbook
    Set wb = Workbooks.Open(DataSourceADO, , False)
    Dim sht As Worksheet
    Set sht = wb.Worksheets(this.RelatedTable)
    
    ' Adatok kiirasa
    Dim cella As Range
    For Each cella In sht.Rows(1).Cells
        If IsEmpty(cella) Then Exit For
        Dim hdr As String: hdr = cella.Value
        If tetelData.Exists(hdr) Then cella.Offset(1, 0).Value = tetelData.Item(hdr)
    Next cella
    
    'Mentes, kilepes
    wb.Close SaveChanges:=True
    
    ' Ujra kapcsolodas
    Dim Cancel As Boolean
    ConnectToDatabase Cancel
    If Cancel = True Then Exit Sub
        
End Sub

''
' Letezo rekord frissitese az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub UpdateExistingRecord(ByVal tetelData As Tetel)
    
    Dim SQL_String As String
    SQL_String = "UPDATE [%TABLENAME%$] SET %SPECIALLIST% WHERE %IDCOL% = %IDNUM%"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%SPECIALLIST%", Join(tetelData.SpecialList, ","), , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%IDNUM%", tetelData.Item(this.IDREF), , , vbTextCompare)

    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
        End If
    End With
    
End Sub

''
' Uj rekord letrehozasa az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub CreateNewRecord(ByVal tetelData As Tetel)
' BUG:  a szamokat szovegkent rakja be a tablaba, kiveve ha van mar szamkent formazott adat benne.
'       ha zavaro: mezo letrehozasakor elso rekordot dummy adattal feltolteni, sima VBA-val (fajl megnyitas, stb)

    Dim SQL_String As String
    SQL_String = "INSERT INTO [%TABLENAME%$] (%FIELDS%) VALUES (%VALUES%)"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%FIELDS%", Join(tetelData.Fields, ","), , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%VALUES%", Join(tetelData.Values, ","), , , vbTextCompare)

    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
        End If
    End With
    
'    Dim SQL_String As String
'    SQL_String = "INSERT INTO [%TABLENAME%] (%FIELDS%) VALUES (?,?,?,?)"
'    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%FIELDS%", Join(tetelData.Fields, ","), , , vbTextCompare)
'
'    With New ADODB.Command
'        .ActiveConnection = this.ADOConn.Connection
'        .CommandText = SQL_String
'        .Prepared = True
'        .Parameters.Append .CreateParameter("p1", adInteger, adParamInput, , CLng(tetelData.Values(0)))
'        .Parameters.Append .CreateParameter("p2", adDouble, adParamInput, , CDbl(tetelData.Values(1)))
'        .Parameters.Append .CreateParameter("p3", adDouble, adParamInput, , CDbl(tetelData.Values(2)))
'        .Parameters.Append .CreateParameter("p4", adDouble, adParamInput, , CDbl(tetelData.Values(3)))
'        .Execute
'    End With
    
End Sub

''
' Adatbazis tablat egyben kirakja 'import' lapra. Ha 'import' lap hianyzik, letrehozza.
'
Public Sub ExportTable(Optional ByVal sFilter As String = vbNullString)
    
    Dim FilterClause As String
    If Not sFilter = vbNullString Then
        FilterClause = "WHERE " & sFilter
    End If
    
    Dim SQL_String As String
    SQL_String = "SELECT * FROM [%TABLENAME%$] %FILTER%;"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%FILTER%", FilterClause, , , vbTextCompare)
    
    Dim AdoRs As AdoRecordset
    Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
    If AdoRs.Error Then
        MsgBox AdoRs.LastError, vbCritical, "HIBA"
        Exit Sub
    End If
    
    Dim shtImport As Worksheet
    Set shtImport = GetImportSheet()
    
    shtImport.Cells.ClearContents
    
    AdoRs.WriteHeaderToRange shtImport.Cells(1, 1)
    AdoRs.WriteRecordsetToRange shtImport.Cells(2, 1)
    
End Sub

''
' Ellenorzi, hogy a parameterkent megadott fajl letezik-e.
'
' @param FullName       fajl eleresi utvonala (FullName)
' @return               igaz/hamis
Private Function FileExists(ByVal FullName As String) As Boolean
    Dim objFSO As Object
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    FileExists = objFSO.FileExists(FullName)
    Set objFSO = Nothing
End Function

''
' Import lap hivatkozasat adja meg visszateresi ertekkent.
'
' @return               import lap hivatkozas (Worksheet obj)
Private Function GetImportSheet() As Worksheet
    Dim sht As Worksheet
    On Error Resume Next
        Set sht = ThisWorkbook.Worksheets("import")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    If sht Is Nothing Then
        Set sht = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        sht.Name = "import"
    End If
    Set GetImportSheet = sht
            
End Function

''
' Megadja a soron kovetkezo ID-t
'
' @return               kovetkezo szabad ID
Public Function GetNextID() As Long
    
    If DatabaseExists And TableExists(this.RelatedTable) And FieldExists(this.RelatedTable, this.IDREF) Then
    
        Dim SQL_String As String
        SQL_String = "SELECT Max(%IDCOL%) FROM [%TABLENAME%$]"
        SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
        
        Dim AdoRs As AdoRecordset
        Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
        If AdoRs.Error Then
            MsgBox AdoRs.LastError, vbCritical, "HIBA"
            Exit Function
        End If
        
        With AdoRs.Recordset
            If .RecordCount < 1 Then
                GetNextID = 1
            Else
                If IsNull(.Fields(0).Value) Then
                    GetNextID = 1
                Else
                    GetNextID = .Fields(0).Value + 1
                End If
            End If
        End With
    Else
        GetNextID = 1
    End If
    
End Function

''
' Validalja, hogy egy elsodleges kulcs letezik-e az adatbazis tablaban
'
' @param IDNum          elsodleges kulcs erteke
' @return               True/False
Private Function IDExists(ByVal IDNum As Long) As Boolean
    
    Dim SQL_String As String '0-t vagy 1-t ad eredmenyul
        SQL_String = "SELECT COUNT(1) FROM [%TABLENAME%$] WHERE %IDCOL% = %IDNUM%"
        SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDNUM%", IDNum, , , vbTextCompare)

        Dim AdoRs As AdoRecordset
        Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
        If AdoRs.Error Then
            MsgBox AdoRs.LastError, vbCritical, "HIBA"
            Exit Function
        End If

        IDExists = AdoRs.Recordset.Fields(0).Value > 0
        
End Function
Attribute VB_Name = "FormSpawner"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Itt kell definialni a formokat
'Public FormInstance_%FORMNAME% As New %FORMNAME%

Public FormInstance_frmTetelek As New frmTetelek
Attribute VB_Name = "ImportProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Type TFields
    sht As Worksheet
    HeaderRange As Range 'fejlec range
    LastUsedRow As Long 'utolso rekord sorszama
    HdrDict As Scripting.Dictionary 'fejlec ertekei szotarkent >> {MezoNeve:OszlopIndex}
End Type
Private this As TFields

''
' Osztaly konstruktor
Private Sub Class_Initialize()
    With this
        Set .sht = GetImportSheet()
        Set .HeaderRange = GetHeaderRange()
        .LastUsedRow = FindLastUsedRow()
        Set .HdrDict = GetHeaderDict(.HeaderRange)
    End With
End Sub

Public Function GetDataColumn(ByVal FieldName As String) As Range
'Egy adott mezohoz tartozo adatok range hivatkozasat adja meg.
    If this.HdrDict.Exists(FieldName) And this.LastUsedRow > 1 Then
        Dim col As Long: col = this.HdrDict(FieldName)
        With this.sht
            Set GetDataColumn = .Range(.Cells(2, col), .Cells(this.LastUsedRow, col))
        End With
    End If
End Function

Public Function FieldExists(ByVal FieldName As String) As Boolean
' Validalja, hogy egy mezo elnevezes letezik-e a lapon.
    FieldExists = this.HdrDict.Exists(FieldName)
End Function

''
' Import lap hivatkozasat adja meg visszateresi ertekkent. Ha nem letezik, letrehozza.
'
' @return               import lap hivatkozas (Worksheet obj)
Private Function GetImportSheet() As Worksheet
    Dim sht As Worksheet
    On Error Resume Next
        Set sht = ThisWorkbook.Worksheets("import")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    If sht Is Nothing Then
        Set sht = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        sht.Name = "import"
    End If
    Set GetImportSheet = sht
            
End Function

Private Function GetHeaderRange() As Range
'Fejlec range hivatkozasat adja meg
    With this.sht
        Dim lc As Long 'last column
        lc = FindLastColumnInRange(.Rows(1))
        If lc > 0 Then
            Set GetHeaderRange = .Range(.Cells(1, 1), .Cells(1, lc))
        End If
    End With
End Function

Private Function FindLastUsedRow() As Long
'megkeresi az utolso hasznalt sort (utolso rekord sorat)
    FindLastUsedRow = FindLastRowInRange(this.sht.Columns(1))
End Function

Private Function GetHeaderDict(ByVal hdr As Range) As Scripting.Dictionary
'Header-t betolti egy dictionarybe -> Key:=hdr felirat, Value:=oszlop sorszam
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr.Cells
        tempdict(CStr(c.Value)) = c.Column
    Next c
    Set GetHeaderDict = tempdict
End Function

Private Function FindLastRowInRange(ByVal rng As Range) As Long
'Description: finds the last row in a range
'Inputs:      Range
'Outputs:     Row number (long), zero if error occurs

'   check range
    If rng Is Nothing Then Exit Function

    On Error Resume Next
    FindLastRowInRange = Application.WorksheetFunction.Max( _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row, _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row)
    On Error GoTo 0

End Function

Private Function FindLastColumnInRange(ByVal rng As Range) As Long
'Description: finds the last column in a range
'Inputs:      Range
'Outputs:     column number (long), zero if error occured

'   check range
    If rng Is Nothing Then Exit Function

        On Error Resume Next
        FindLastColumnInRange = Application.WorksheetFunction.Max( _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column, _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column)
        On Error GoTo 0

End Function

Public Sub Refresh()
'Frissiti az utolso sor elmentett erteket
    this.LastUsedRow = FindLastUsedRow()
End Sub
Attribute VB_Name = "Munka1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TemplateMacros"
Option Explicit
'Option Private Module

Public Const INTERNAL_PWD As String = "adam"
Private Const sModule As String = "TemplateMacros"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'       Entry points

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Public Sub ResetView()
'Fokusz: shtMain $C$7
'Called by: ThisWorkbook.Workbook_BeforeSave // ThisWorkbook.Workbook_Open

    On Error Resume Next
        With shtMain
            .Activate
            .Range("C7").Select
        End With
    On Error GoTo 0
    
End Sub

Public Sub FormNyitasMod()
'Tetel modositashoz Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
'Called by: munkalapon levo Button (macro assign)

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormNyitasMod"
'-------------------------------------------------

    Dim sel As Range:       Set sel = Selection
    Dim sht As Object:      Set sht = ActiveSheet
    
    With New Controller
        .FormNyitas sht, sel, False
    End With
    
    sht.Activate: sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
    
End Sub

Public Sub FormNyitasUj()
'Tetel modositashoz Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
'Called by: munkalapon levo Button (macro assign)

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormNyitasUj"
'-------------------------------------------------

    Dim sel As Range:       Set sel = Selection
    Dim sht As Object:      Set sht = ActiveSheet
    
    With New Controller
        .FormNyitas sht, sel, True
    End With
    
    sht.Activate: sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
    
End Sub

'Public Sub FormNyitas()
''Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
''Called by: munkalapon levo Button (macro assign)
'
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormNyitas"
''-------------------------------------------------
'
'    Dim sel As Range:       Set sel = Selection
'    Dim sht As Object:      Set sht = ActiveSheet
'
'    With New Controller
'        .FormNyitas sht, sel
'    End With
'
'    sht.Activate: sel.Select
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub

Public Sub FormRogzites(ByRef sht As Object, ByVal frm As Object)
'Form tartalmanak rogzitese a megfelelo munkalapra
'Called by: Form 'OK' gombja

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormRogzites"
'-------------------------------------------------

    With New Controller
        .FormRogzites sht, frm
    End With
    Application.StatusBar = False

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub FormCancel(ByRef frm As UserForm)
'Form rogzites megszakitasa
'Called by: Form 'Megsem' gombja

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormCancel"
'-------------------------------------------------

    Unload frm

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoSort(ByVal Target As Range)
'Tabla sorbarendezese a kijelolt cella alapjan
'Called by: Thisworkbook.Workbook_SheetBeforeDoubleClick

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoSort"
'-------------------------------------------------
 
    With New Controller
        .DoSort Target
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoFilter(ByVal Target As Range)
'Tabla szurese kijelolt cella alapjan
'Called by: ThisWorkbook.Workbook_SheetChange

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoFilter"
'-------------------------------------------------

    With New Controller
        .DoFilter Target
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoReset(ByVal sht As Worksheet)
'Tabla szures / sorbarandezes visszaallitasa
'Called by: ThisWorkbook.ResetButton_Clicked

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoReset"
'-------------------------------------------------
    
    With New Controller
        .DoReset sht
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'       Public functions

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Public Function HandleSeparator(ByVal Value As Variant) As Variant
'szamnak latszo erteket szamma konvertal, fuggetlenul attol, hogy vesszovel vagy ponttal valasztottak el a tizedest
'Ellenorizz|fffd|k a tizedes elv|fffd|laszt|fffd|jelet, |fffd|s cser|fffd|lj|fffd|k, ha sz|fffd|ks|fffd|ges
    
    On Error GoTo ErrHandler
    
    If IsEmpty(Value) Or Value = vbNullString Then Exit Function
    
    Dim TempValueStr As String
    TempValueStr = CStr(Value)
    Dim TempValueDbl As Double
    TempValueDbl = 0
    Dim SeparatorStr As String
    SeparatorStr = Application.International(xlDecimalSeparator)
  
    Select Case SeparatorStr
        Case ","
            If InStr(1, TempValueStr, ".", vbTextCompare) > 0 Then
                TempValueStr = Replace(TempValueStr, ".", ",", , , vbTextCompare)
            End If
        Case "."
            If InStr(1, TempValueStr, ",", vbTextCompare) > 0 Then
                TempValueStr = Replace(TempValueStr, ",", ".", , , vbTextCompare)
            End If
        Case Else
            'nincs kezelve
    End Select
    TempValueDbl = CDbl(TempValueStr)
    TempValueDbl = Round(TempValueDbl, 2)
    'RETURN
    HandleSeparator = TempValueDbl

CleanExit:
    Exit Function
ErrHandler:
    'eredeti erteket adjuk vissza
    HandleSeparator = Value
    Resume CleanExit
End Function

Public Function RangeExists(ByVal RangeName As String, ByVal WS As Worksheet) As Boolean
    Dim test As Range
    On Error Resume Next
        Set test = WS.Range(RangeName)
        RangeExists = Err.Number = 0
    On Error GoTo 0
End Function

Public Function DotSeparator(ByVal Value As Variant) As String
'szamnak latszo erteket tizedes pontot hasznalo szamma konvertal, stringkent visszaadva
'Mivel makron belul csak a pontot fogadja el tizedes elvalasztokent
'Ellen|fffd|rizz|fffd|k a tizedes elv|fffd|laszt|fffd|jelet, |fffd|s cser|fffd|lj|fffd|k, ha sz|fffd|ks|fffd|ges

    On Error GoTo ErrHandler

    If IsEmpty(Value) Or Value = vbNullString Then Exit Function
    
    Dim TempValueStr As String
    TempValueStr = CStr(Value)
    Dim DecimalSeparatorStr As String
    DecimalSeparatorStr = Application.International(xlDecimalSeparator)
    Dim ThousandsSeparatorStr As String
    ThousandsSeparatorStr = Application.International(xlThousandsSeparator)
    
    'Ezres elvalasztot mindenkepp toroljuk
    If InStr(1, TempValueStr, ThousandsSeparatorStr, vbTextCompare) > 0 Then
        TempValueStr = Replace(TempValueStr, ThousandsSeparatorStr, vbNullString, , , vbTextCompare)
    End If
    
    'tizedes elvalasztot csereljuk pontra
    If InStr(1, TempValueStr, DecimalSeparatorStr, vbTextCompare) > 0 Then
        TempValueStr = Replace(TempValueStr, DecimalSeparatorStr, ".", , , vbTextCompare)
    End If

    'RETURN
    DotSeparator = TempValueStr

CleanExit:
    Exit Function
ErrHandler:
    'eredeti erteket adjuk vissza
    DotSeparator = CStr(Value)
    Resume CleanExit

End Function


'Public Sub FormProjektekNyitas()
''Projektek Form nyitasa Projektek laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormProjektekNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormProjektekNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormMunkakNyitas()
''Munkak Form nyitasa Munkak laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormMunkakNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormMunkakNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormDolgozokNyitas()
''Dolgozok Form nyitasa Dolgozok laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormDolgozokNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormDolgozokNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormEllenorzesekNyitas()
''Ellenorzesek Form nyitasa Ellenorzesek laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormEllenorzesekNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormEllenorzesekNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'
'
'Public Sub FormKulsosNyitas()
''Kulsos Form nyitasa Kulsos laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormKulsosNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormKulsosNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAdatlistaNyitas()
''Adatlista Form nyitasa Adatlista laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAdatlistaNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormAdatlistaNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAnyaglistaNyitas()
''Anyaglista Form nyitasa Anyaglista laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAnyaglistaNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormAnyaglistaNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAnyagokNyitas()
''Anyagok Form nyitasa Anyagok laprol, kijelolt cella figyelembevetelevel
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAnyagokNyitas"
''-------------------------------------------------
'
'    Dim sel As Range
'    Set sel = Selection
'    With New Controller
'        .FormAnyagokNyitas sel
'    End With
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub

'Public Sub FormProjektekRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormProjektekRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .ProjektekRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormMunkakRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormMunkakRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .MunkakRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormDolgozokRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormDolgozokRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .DolgozokRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormEllenorzesekRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormEllenorzesekRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .EllenorzesekRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'
'
'Public Sub FormKulsosRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormKulsosRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .KulsosRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAdatlistaRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAdatlistaRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .AdatlistaRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub AdatlapRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "AdatlapRogzites"
''-------------------------------------------------
'
'    'Biztos?
'    Dim res As VbMsgBoxResult
'    res = MsgBox("Biztos beilleszt egy |fffd|j adatlapot?", vbOKCancel)
'    If res = vbOK Then
'        With New Controller
'            .AdatlapRogzites
'        End With
'    End If
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAnyaglistaRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAnyaglistaRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .AnyaglistaRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
'
'Public Sub FormAnyagokRogzites()
''Entry point
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormAnyagokRogzites"
''-------------------------------------------------
'
'    With New Controller
'        .AnyagokRogzites
'    End With
'    Application.StatusBar = False
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub

Sub testconn()
    Dim dbp As DatabaseProxy
    Dim Cancel As Boolean
    Set dbp = DatabaseProxy.Create(shtTetelek, Cancel)
    Dim TableName As String: TableName = "tblOne"
    Debug.Print Cancel
    If Cancel = True Then Exit Sub
    
    Dim t As Tetel
    Set t = New Tetel
    t.AddItem "ID", 1, "int"
    t.AddItem "Elso", 99999.99, "numeric"
    t.AddItem "Masodik", 99999.99, "decimal"
    t.AddItem "Harmadik", 99999.99, "float"
    
    dbp.CheckAndCreateFields t, Cancel
    Debug.Print Cancel
    If Cancel = True Then Exit Sub
    
    dbp.TetelRogzites t
    
    Set dbp = Nothing
End Sub

Sub test()

    Dim fn As String
    fn = "c:\Users\Judit\Documents\Qsync\_C|fffd|g\ExcelMester\BConsulting\DB_FILE.xlsb"

    Dim cn As ADODB.Connection
    Dim cmd As ADODB.Command

    Set cn = New ADODB.Connection
    With cn
        .Provider = "Microsoft.ACE.OLEDB.12.0"
        .ConnectionString = "Data Source=" & fn & ";Extended Properties='Excel 12.0;HDR = YES'"
        .Open
        Debug.Print cn.State

        Set cmd = New ADODB.Command
        Set cmd.ActiveConnection = cn

'        '~~> Command to create the table
'        cmd.CommandText = "CREATE TABLE Sheet1 (Sno Int, " & _
'                                               "Employee_Name VARCHAR, " & _
'                                               "Company VARCHAR, " & _
'                                               "Date_Of_joining DATE, " & _
'                                               "Stipend DECIMAL, " & _
'                                               "Stocks_Held DECIMAL)"
'        '~~> Adding Data
'        cmd.CommandText = "INSERT INTO Sheet1 (Sno, Employee_Name, " & _
'                                              "Company,Date_Of_joining,Stipend,Stocks_Held) " & _
'                                              "values ('1', 'Siddharth Rout', 'Defining Horizons', " & _
'                                              "'20/7/2014','2000.75','0.01')"
'
        cmd.Execute

        .Close
        Debug.Print cn.State
    End With

End Sub

Sub test2()
    With New Tetel
        Dim a As Variant
        a = .Fields
        Dim x As Variant
        For Each x In a
            Stop
        Next x
        Stop
    End With
End Sub

Sub test3()

    Const fn As String = "c:\Users\Judit\Documents\Qsync\_C|fffd|g\ExcelMester\BConsulting\DB_FILE.xlsb"
    Const CONN_STR_TEMPLATE As String = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=%DATASOURCE%;Extended Properties='Excel 12.0;HDR = YES'"
    Dim cs As String
    cs = Replace(CONN_STR_TEMPLATE, "%DATASOURCE%", fn, , , vbTextCompare)
    
    Dim AdoConn As ADOConnection
    Set AdoConn = ADOConnection.Create(cs)
    With AdoConn
        If .Error Then MsgBox .LastError
    End With

    Const tn As String = "tblTetelek$"
    Debug.Print AdoConn.TableExists(tn)
    

    Set AdoConn = Nothing

End Sub

Public Sub TestFieldExists()
    
    Const TableName As String = "tblTetelek$"
    Const FieldName As String = "tev"
    
    Const CONN_STR_TEMPLATE As String = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=%DATASOURCE%;Extended Properties='Excel 12.0;HDR = YES'"
    Dim ConnectionString As String
    ConnectionString = Replace(CONN_STR_TEMPLATE, "%DATASOURCE%", "c:\Users\Judit\Documents\Qsync\_C|fffd|g\ExcelMester\BConsulting\DB_FILE.xlsb", , , vbTextCompare)
    Dim cn As ADOConnection
    Set cn = ADOConnection.Create(ConnectionString)
    
    Dim tableSchema As ADODB.Recordset
    Set tableSchema = cn.Connection.OpenSchema(adSchemaTables)
    Do While Not tableSchema.EOF
        Debug.Print tableSchema("TABLE_NAME")
        tableSchema.MoveNext
    Loop
        
    Dim rsSchema As ADODB.Recordset
    Set rsSchema = cn.Connection.OpenSchema(adSchemaColumns, _
                        Array(Empty, Empty, TableName))
    
    Do While Not rsSchema.EOF
        Debug.Print rsSchema("COLUMN_NAME")
        rsSchema.MoveNext
    Loop
    
    'Dim FieldExists As Boolean
    'FieldExists = Not (rsSchema.BOF And rsSchema.EOF)
    'Debug.Print FieldExists
    
    rsSchema.Close
    Set rsSchema = Nothing
    
    Set cn = Nothing
End Sub

Attribute VB_Name = "Tetel"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Egy barmilyen tetel tarolasara szolgalo osztaly. Az ertekeket szotarban tarolja: {FieldName:Value}.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit

''
' Ertekek tarolasara szolgalo szotar {FieldName:Value}
Private valDict As Scripting.Dictionary

''
' SQL adattipusok tarolasara szolgalo szotar {FieldName:SqlDataType}
Private dTypeDict As Scripting.Dictionary

''
' Osztaly konstruktor. Inicializalja a szotarakat.
Private Sub Class_Initialize()
    Set valDict = New Scripting.Dictionary
    valDict.CompareMode = TextCompare
    Set dTypeDict = New Scripting.Dictionary
    dTypeDict.CompareMode = TextCompare
End Sub

''
' Uj tetel hozzaadasa.
'
' @param FieldName      mezo elnevezese
' @param Value          mezo erteke
' @param SqlDataType    mezo SQL adattipusa (default: 'VARCHAR')
Public Sub AddItem(ByVal FieldName As String, ByVal Value As Variant, Optional ByVal SqlDataType As String = "VARCHAR")
    valDict(FieldName) = Value
    dTypeDict(FieldName) = SqlDataType
End Sub

''
' Megadja egy tetel erteket.
'
' @param FieldName      mezo elnevezese
' @return               mezo erteke
Public Property Get Item(ByVal FieldName As String) As Variant
    If valDict.Exists(FieldName) Then
        Item = valDict(FieldName)
    Else
        Item = "{" & FieldName & " nem tal|fffd|lhat|fffd|}"
    End If
End Property

''
' Megadja egy tetel SQL adattipusat.
'
' @param FieldName      mezo elnevezese
' @return               mezo SQL adattipusa
Public Property Get SqlDataType(ByVal FieldName As String) As String
    If dTypeDict.Exists(FieldName) Then
        SqlDataType = dTypeDict(FieldName)
    Else
        'pass
    End If
End Property

''
' Validalja, hogy egy mezo elnevezes letezik-e a szotarban
'
' @param FieldName      mezo elnevezese
' @return               igaz/hamis
Public Function Exists(ByVal FieldName As String) As Boolean
    Exists = valDict.Exists(FieldName)
End Function

''
' Array-kent megadja az eltarolt mezo neveket.
'
' @return               mezo elnevezesek tombkent
Public Property Get Fields() As Variant
    Fields = valDict.Keys
End Property

''
' Array-kent megadja az eltarolt mezo ertekeket.
'
' @return               mezo ertekek tombkent
' @remarks              a string-eket idezojelbe is teszi, pl: [1, 'minta', 12345, 'valami']
Public Property Get Values() As Variant
    Dim arr As Variant
    arr = valDict.Items
    Dim i As Long
    For i = LBound(arr) To UBound(arr)
        If Not (IsNumeric(arr(i)) Or IsDate(arr(i))) Then
            arr(i) = "'" & arr(i) & "'"
        End If
    Next i
    Values = arr
End Property

''
' Array-kent megadja MezoNev-Ertek parosokat, ahol array egy eleme: < Key=Value > vagy < Key='String' >
' Pl: [ID=1, anyag='minta', osszeg=123456, megjegyzes='valami']
'
' @return               'Key=Value' parosok tombkent
Public Property Get SpecialList() As Variant
    Dim list() As Variant
    ReDim list(1 To valDict.Count)
    Dim i As Long: i = 0
    
    Dim key As Variant
    For Each key In valDict.Keys
        i = i + 1
        Dim Value As Variant
        Value = valDict(key)
        If IsNumeric(Value) Or IsDate(Value) Then
            list(i) = key & "=" & Value
        Else
            list(i) = key & "='" & Value & "'"
        End If
    Next key
    SpecialList = list
End Property
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
 Private sht As Worksheet
 Private rng As Range
 Private Visibilities() As Variant

Private Sub Workbook_AfterSave(ByVal Success As Boolean)
    On Error Resume Next
        RestoreVisibility Visibilities
        sht.Activate
        rng.Select
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
    On Error GoTo 0
    Set sht = Nothing
    Set rng = Nothing
    Erase Visibilities
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    On Error Resume Next
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        Set sht = ActiveSheet
        Set rng = Selection
        Visibilities = SaveVisibility
        KezdoNezet
'        ResetView
    On Error GoTo 0
End Sub

Private Sub Workbook_Open()
'    On Error Resume Next
'        ResetView
'    On Error GoTo 0
    KezdoNezet
End Sub

Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    If RangeExists("rngSort", Sh) Then
        If Not Intersect(Sh.Range("rngSort"), Target) Is Nothing Then
            'sorbarendezes
            Dim sht As Worksheet: Set sht = Sh
            DoSort Target
            Cancel = True
        End If
    End If
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    If RangeExists("rngFilter", Sh) Then
        If Not Intersect(Sh.Range("rngFilter"), Target) Is Nothing And Target.Rows.Count = 1 Then
            'szures
            DoFilter Target
        End If
    End If
    If RangeExists("rngBelepesiJelszo", Sh) Then
        If Not Intersect(Sh.Range("rngBelepesiJelszo"), Target) Is Nothing Then
            StartNewSession Sh.Range("rngBelepesiJelszo").Value
            Application.EnableEvents = False
                Sh.Range("rngBelepesiJelszo").MergeArea.ClearContents
            Application.EnableEvents = True
        End If
    End If
End Sub

Public Sub ResetButton_Clicked()
    DoReset ActiveSheet
End Sub

Attribute VB_Name = "WorksheetProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'@PredeclaredID

Private Const SORTROW As Long = 3           'sorter sora
Private Const FILTERROW As Long = 4         'Szuro sora
Private Const PASTECONTROLROW As Long = 9   'Az a sor ami vezerli, hogy ertek vagy keplet
Private Const FORMULAROW As Long = 8        'Kepletek sora
Private Const ERTEK As String = "e"         'ezzel jeloljuk, hogy keplet helyett ertek szukseges

Private Type TFields
    sht As Worksheet 'kapcsolodo munkalap hivatkozasa
    IDREF As String 'elsodleges kulcsmezo elnevezese
    IDcell As Range 'ID cella fejlecben
    HeaderRange As Range 'fejlec range
    LastUsedRow As Long 'utolso rekord sorszama
    HdrDict As Scripting.Dictionary 'fejlec ertekei szotarkent >> {MezoNeve:OszlopIndex}
    ControlDict As Scripting.Dictionary 'keplet/ertek szotar >> {MezoNeve:k/e}
    RelatedForm As String 'kapcsolodo urlap neve
End Type
Private this As TFields

Private Const IDMissingError = "ID oszlopa nem tal|fffd|lhat|fffd|"
Private Const IDNotValidError = "ID nem |fffd|rtelmezhet|fffd|"
Private Const HeaderMissingError = "{HeaderMissing}"

Public Property Get Self() As WorksheetProxy
    Set Self = Me
End Property

Public Property Get sht() As Worksheet
    Set sht = this.sht
End Property
Public Property Set sht(ByVal Value As Worksheet)
    Set this.sht = Value
End Property

Public Property Get IDREF() As String
    IDREF = this.IDREF
End Property
Public Property Let IDREF(ByVal Value As String)
    this.IDREF = Value
End Property

Public Property Get HeaderRange() As Range
    Set HeaderRange = this.HeaderRange
End Property
Public Property Set HeaderRange(ByVal Value As Range)
    Set this.HeaderRange = Value
End Property

Public Property Get DefaultSortOnColumn() As Long
    DefaultSortOnColumn = this.IDcell.Column
End Property

'Public Property Get IDColumnHeader() As String
'    IDColumnHeader = this.IDREF
'End Property

Private Property Get IDDataRange() As Range
    Set IDDataRange = this.sht.Range(this.IDcell.Offset(1, 0), this.sht.Cells(this.LastUsedRow, this.IDcell.Column))
End Property

Public Property Get IDcell() As Range
    Set IDcell = this.IDcell
End Property
Public Property Set IDcell(ByVal Value As Range)
    Set this.IDcell = Value
End Property

Public Property Get LastUsedRow() As Long
    LastUsedRow = this.LastUsedRow
End Property
Public Property Let LastUsedRow(ByVal Value As Long)
    this.LastUsedRow = Value
End Property

Public Property Get HeaderDict() As Scripting.Dictionary
    Set HeaderDict = this.HdrDict
End Property
Public Property Set HeaderDict(ByVal Value As Scripting.Dictionary)
    Set this.HdrDict = Value
End Property

Public Property Get ControlDict() As Scripting.Dictionary
    Set ControlDict = this.ControlDict
End Property
Public Property Set ControlDict(ByVal Value As Scripting.Dictionary)
    Set this.ControlDict = Value
End Property

Public Property Get RelatedForm() As String
    RelatedForm = this.RelatedForm
End Property
Public Property Let RelatedForm(ByVal Value As String)
    this.RelatedForm = Value
End Property

Public Property Get DataRange() As Range
'Megadja az adatokat tartalmazo terulet (range) hivatkozasat.
    If this.LastUsedRow > this.HeaderRange.Row Then
        Set DataRange = this.HeaderRange.Offset(1).Resize(this.LastUsedRow - this.HeaderRange.Row)
    Else
        'nincs adat sor --> DataRange Is Nothing
    End If
End Property

Public Property Get FormulaRowIndex() As Long
'Megadja a kepleteket es formatumokat tartalmazo sor indexet.
    FormulaRowIndex = FORMULAROW
End Property

Public Function Create(ByVal sht As Object) As WorksheetProxy

    With New WorksheetProxy
        Set .sht = sht
        .IDREF = sht.IDColumnHeader
        Set .IDcell = FindIDcell(.sht, .IDREF)
        Set .HeaderRange = GetHeaderRange(.IDcell)
        .LastUsedRow = FindLastUsedRow(.IDcell.EntireColumn)
        Set .HeaderDict = GetHeaderDict(.HeaderRange)
        Set .ControlDict = GetControlDict(.HeaderRange)
        .RelatedForm = sht.RelatedForm
        Set Create = .Self
    End With
    
End Function

Public Sub Refresh()
'Frissiti az utolso sor elmentett erteket
    this.LastUsedRow = FindLastUsedRow(this.IDcell.EntireColumn)
End Sub

Private Function GetHeaderDict(ByVal hdr As Range) As Scripting.Dictionary
'Header-t betolti egy dictionarybe -> Key:=hdr felirat, Value:=oszlop sorszam
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr.Cells
        tempdict(CStr(c.Value)) = c.Column
    Next c
    Set GetHeaderDict = tempdict
End Function

Private Function GetControlDict(ByVal hdr As Range) As Scripting.Dictionary
'Controlt (adott oszlop ertek vagy keplet) betolti dictionary-be -> Key:=hdr felirat, Value:=k/e
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr
        tempdict(CStr(c.Value)) = CStr(c.Offset(PASTECONTROLROW - hdr.Row).Value)
    Next c
    Set GetControlDict = tempdict
End Function

Public Sub ResetFilters()
'minden szurot torol, ID szerint rakja sorba
    
    Dim sht As Worksheet:       Set sht = this.sht
    Dim HeaderRange As Range:   Set HeaderRange = this.HeaderRange
    Dim DefaultSortOnColumn As Long:    DefaultSortOnColumn = Me.DefaultSortOnColumn
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, DefaultSortOnColumn)
    
    '4. sor tisztitasa
    HeaderRange.Offset(-HeaderRange.Row + FILTERROW).ClearContents
    
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    'minden filter torlese
    If sht.FilterMode Then sht.ShowAllData

    With sht.AutoFilter.Sort.SortFields

        'Rendezes hozzaadasa
        .Clear
        .Add key:=rng, SortOn:=xlSortOnValues, Order:=xlDescending

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
        .SortFields.Clear
    End With

End Sub

Public Sub SortTable(ByVal Target As Range)
'a Target oszlopat sorba rendezi, egyszer novekvo egyszer csokkeno sorrendben

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, Target.Column)

    Dim NewSortOrder As XlSortOrder

    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    With sht.AutoFilter.Sort.SortFields

        'check van-e mar sorbarendezes
        If .Count > 0 Then
            'van sorbarendezes
            'check ugyanaz az oszlop-e
            If Not Intersect(.Item(1).key, Target.Columns(1).EntireColumn) Is Nothing Then
                'ugyanaz az oszlop
                'check irany
                If .Item(1).Order = xlAscending Then
                    'novekvo sorrend -> uj: csokkeno
                    NewSortOrder = xlDescending
                Else
                    'csokkeno sorrend -> uj: novekvo
                    NewSortOrder = xlAscending
                End If
            Else
                'masik oszlop -> novekvo sorrend
                NewSortOrder = xlAscending
            End If
        Else
            'nincs sorbarendezes -> novekvo sorrend
            NewSortOrder = xlAscending
        End If

        'Rendezes hozzaadasa
        .Clear
        .Add key:=rng, SortOn:=xlSortOnValues, Order:=NewSortOrder

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
    End With

End Sub

Public Sub FilterTable(ByVal Target As Range)
'a Target oszlopat szuri, target erteke alapjan
'tobb cella is lehet egyszerre

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    Dim c As Range
    For Each c In Target
        'get field value
        Dim fld As Long
        fld = c.Column - HeaderRange.Cells(1).Column + 1
        'get criteria
        If c.Value = vbNullString Then
            'cellat toroltek --> filter torlese
            HeaderRange.AutoFilter Field:=fld
        ElseIf IsNumeric(c.Value) Then
            'numeric filter -> teljes egyezes
            Dim crit As String
            crit = DotSeparator(c.Value)
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        ElseIf IsDate(c.Value) Then
            'date filter -> teljes egyezes
            crit = CStr(CLng(c.Value))
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        Else
            'szoveges szuro -> reszleges egyezes
            crit = "*" & c.Value & "*"
            HeaderRange.AutoFilter Field:=fld, Criteria1:=crit
        End If
    Next c

End Sub

Public Sub HandleColors()
' kezeli a fejlec szineket (szures-rendezesnel)

    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange

    'alap szinek
    '3. sor
    ColorSortBase HeaderRange.Offset(-HeaderRange.Row + SORTROW)
    '4. sor
    ColorFilterBase HeaderRange.Offset(-HeaderRange.Row + FILTERROW)

    Dim sht As Worksheet:   Set sht = this.sht
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

        'check van-e sorbarendezes
        If sht.AutoFilter.Sort.SortFields.Count > 0 Then
            'van sorbarendezes
            'egesz 3. sor szinezese elenk kekre
            ColorSortUsed HeaderRange.Offset(-HeaderRange.Row + SORTROW)
        End If

        'check van-e filter
        If sht.AutoFilter.FilterMode = True Then
            'van szures
            'egesz 4. sor szinezese elenk sargara
            ColorFilterUsed HeaderRange.Offset(-HeaderRange.Row + FILTERROW)
        End If

        Dim c As Range
        For Each c In HeaderRange

                'check oszlop
                With sht.AutoFilter.Sort.SortFields
                    If .Count > 0 Then
                        If Not Intersect(sht.AutoFilter.Sort.SortFields.Item(1).key, c) Is Nothing Then
                            'sort oszlop szinezese sotetkekre
                            ColorSortSorted c.Offset(-c.Row + SORTROW)
                        End If
                    End If
                End With
                If sht.AutoFilter.Filters(c.Column - sht.AutoFilter.Range.Column + 1).On Then
                    'filter oszlop szinezese narancssargara
                    ColorFilterFiltered c.Offset(-c.Row + FILTERROW)
                End If

        Next c

End Sub

Private Sub ColorFilterBase(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(255, 255, 255)
        .Pattern = xlPatternGrid
        .PatternColor = RGB(217, 217, 217)
    End With
End Sub
Private Sub ColorFilterUsed(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(255, 255, 0)
        .Pattern = xlPatternSolid
    End With
End Sub
Private Sub ColorFilterFiltered(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(255, 192, 0)
        .Pattern = xlPatternSolid
    End With
End Sub

Private Sub ColorSortBase(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(255, 255, 255)
        .Pattern = xlPatternGrid
        .PatternColor = RGB(217, 217, 217)
    End With
End Sub
Private Sub ColorSortUsed(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(0, 0, 255)
        .Pattern = xlPatternSolid
    End With
End Sub
Private Sub ColorSortSorted(ByVal rng As Range)
    With rng.Interior
        .Color = RGB(0, 32, 96)
        .Pattern = xlPatternSolid
    End With
End Sub

Private Function FindIDcell(ByVal sht As Worksheet, ByVal IDREF As String) As Range
'Megkeresi a fejlec ID cellajat ID string alapjan
    Set FindIDcell = sht.Cells.Find(What:=IDREF, LookAt:=xlWhole)
End Function

Private Function GetHeaderRange(ByVal IDcell As Range) As Range
'megadja a fejlec hivatkozasat (Range)
    Dim sht As Worksheet: Set sht = IDcell.Parent
    Dim lc As Long 'last column
    lc = FindLastColumnInRange(IDcell.EntireRow)
    Set GetHeaderRange = sht.Range(IDcell, sht.Cells(IDcell.Row, lc))
End Function

Private Function FindLastUsedRow(ByVal IDColumn As Range) As Long
'megkeresi az utolso hasznalt sort (utolso rekord sorat)
    FindLastUsedRow = FindLastRowInRange(IDColumn)
End Function

Private Function FindLastColumnInRange(ByVal rng As Range) As Long
'Description: finds the last column in a range
'Inputs:      Range
'Outputs:     column number (long), zero if error occured

'   check range
    If rng Is Nothing Then Exit Function

        On Error Resume Next
        FindLastColumnInRange = Application.WorksheetFunction.Max( _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column, _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column)
        On Error GoTo 0

End Function

Private Function FindLastRowInRange(ByVal rng As Range) As Long
'Description: finds the last row in a range
'Inputs:      Range
'Outputs:     Row number (long), zero if error occurs

'   check range
    If rng Is Nothing Then Exit Function

    On Error Resume Next
    FindLastRowInRange = Application.WorksheetFunction.Max( _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row, _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row)
    On Error GoTo 0

End Function


Public Function IDExists(ByVal IDDataRange As Range, ByVal ID As Long) As Boolean
'ellenorzi, hogy ID letezik-e az IDColumn oszlopban
    Dim r As Range
    Set r = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
    IDExists = Not r Is Nothing
End Function

Private Function FindID(ByVal IDDataRange As Range, ByVal ID As Long) As Long
'megkeresi az ID erteket es visszaadja a sorszamat. Ha nem talalja, akkor 0-t ad.
    Dim r As Range
    Set r = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
    If Not r Is Nothing Then
        FindID = r.Row
    Else
        FindID = 0
    End If
End Function


Public Function GetRowID(ByVal sor As Long) As Long
'adott sorhoz tartozo ID erteket adja meg
'ha nincs ertek, akkor 0-t ad
'ha nem adat sor, -1-et ad
    If sor <= this.IDcell.Row Then
        GetRowID = -1
        Exit Function
    End If
    Dim tmpID As Variant
    tmpID = GetRecordField(sor, this.IDREF)
    If IsNumeric(tmpID) Then
        GetRowID = CLng(tmpID)
    Else
        MsgBox "'" & tmpID & "' " & IDNotValidError
        GetRowID = 0
    End If
End Function

Private Function GetRecordField(ByVal sor As Long, ByVal FieldName As String) As Variant
'Sor es fejlec felirat alapjan megkeresi egy cella erteket
    If this.HdrDict.Exists(FieldName) Then
        GetRecordField = sht.Cells(sor, this.HdrDict(FieldName)).Value
    Else
        GetRecordField = HeaderMissingError
    End If
End Function

Public Function GetTetelData(ByVal ID As Long) As Tetel
'betolti a letezo rekord ertekeket 'Egyeb' objektumba
    If IDExists(IDDataRange, ID) Then
        Dim sor As Long
        sor = FindID(IDDataRange, ID)
        Set GetTetelData = GetExistingRecord(sor)
    End If
End Function

Private Function GetExistingRecord(ByVal sor As Long) As Tetel
'adott sorbol beolvassa az ertekeket 'Tetel' objektumba

    Dim tetelData As Tetel
    Set tetelData = New Tetel
    
    'Az osszes oszlopot beolvassuk a Tetelbe -> Majd a form kivalogatja, neki mi kell
    Dim key As Variant
    For Each key In this.HdrDict.Keys
        tetelData.AddItem key, GetRecordField(sor, key)
    Next key

    'RETURN
    Set GetExistingRecord = tetelData

End Function

Public Function GetIDs(Optional ByVal HeaderRef As String) As Object 'Scripting.Dictionary
' szotarba gyujti a letezo ID szamokat
    
    Dim href As String
    href = IIf(HeaderRef = vbNullString, this.IDREF, HeaderRef)
    
    Dim Pcol As Long
    Pcol = this.HdrDict(href)
    
    Dim tempdict As Object
    Set tempdict = CreateObject("Scripting.Dictionary")
    tempdict.CompareMode = 0 'binarycompare
    
    If this.LastUsedRow > IDcell.Row Then 'van rekord
        Dim rng As Range
        Set rng = this.sht.Range(this.sht.Cells(IDcell.Row, Pcol), this.sht.Cells(this.LastUsedRow, Pcol))
        Dim c As Range
        For Each c In rng
            If IsNumeric(c.Value) Then
                tempdict(CLng(c.Value)) = vbNullString
            End If
        Next c
        'RETURN
        Set GetIDs = tempdict
    Else 'nincs rekord
        'Pass
    End If

End Function

Private Sub PasteValues(ByVal sor As Long)
'Copy-PasteValues

'*************** Ha direktben a tetel sorba irunk es azt rogzitjuk ***************
    With this.HeaderRange
        Dim HdrArr As Variant:      HdrArr = .Value2
        Dim rng As Range:           Set rng = .Offset(-.Row + sor)
    End With
    Dim DataFormulaArr As Variant:  DataFormulaArr = rng.FormulaR1C1
    Dim DataValueArr As Variant:    DataValueArr = rng.Value2
    Dim ResultArr() As Variant
    ReDim ResultArr(1 To 1, LBound(HdrArr, 2) To UBound(HdrArr, 2))

    Dim i As Long
    For i = LBound(HdrArr, 2) To UBound(HdrArr, 2)
        Dim FieldName As String
        FieldName = HdrArr(1, i)
        If StrComp(ControlDict(FieldName), ERTEK, vbTextCompare) = 0 Then
            ResultArr(1, i) = DataValueArr(1, i)
        Else
            ResultArr(1, i) = DataFormulaArr(1, i)
        End If
    Next i
    rng.FormulaR1C1 = ResultArr


    'Formatum masolasa
    With this.HeaderRange
        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + FORMULAROW)
        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
    End With

    RngFormula.Copy
    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
    Application.CutCopyMode = False

'***********************************************************************************

'*************** Ha keplet sorba irunk es azt masoljuk ertekkent ***************
'    With this.HeaderRange
'        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + FORMULAROW)
'        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
'    End With
'
'    RngFormula.Copy
'    RngDestination.PasteSpecial xlPasteValues   'ertekek masolasa
'    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
'    Application.CutCopyMode = False

End Sub



'Public Sub TetelRogzites(ByVal tetelData As Tetel)
''Rogziti a tablaban a tetel ertekeket + kepletes sorokat
'
'    'check
'    Dim id As Variant
'    id = tetelData.Item(Me.IDREF)
'    If IsNumeric(id) Then
'
'        Dim sor As Long
'        If IDExists(IDDataRange, CLng(id)) Then
'            'ha letezik a rekord azonosito, akkor megkeresni, melyik sorban es oda rogziteni a modositasokat
'            sor = FindID(IDDataRange, CLng(id))
'        Else
'            'ha nem letezik, akkor az elso ures sorba rogziteni
'            sor = this.LastUsedRow + 1
'        End If
'
'        'kiiras
'        RecordData sor, tetelData
'
'        'Calculate
'        Application.Calculate
'        Do While Application.CalculationState <> xlDone
'            DoEvents
'        Loop
'
'        'Paste Value
'        PasteValues sor
'
'    Else
'        MsgBox IDNotValidError
'    End If
'
'End Sub

'Private Sub RecordData(ByVal sor As Long, ByVal tetelData As Tetel)
''adott sorba betolti az ertekeket es kepletes mezokat
'
'    Dim arr() As Variant
'    ReDim arr(1 To this.HeaderRange.Columns.Count)
'
'    '---- Fill array ----
'    Dim key As Variant
'    Dim i As Long
'    For Each key In this.HdrDict.Keys
'        i = this.HdrDict(key) - this.HeaderRange.Column + 1
'        Dim Formula As Variant
'        If tetelData.Exists(key) Then
'            Formula = tetelData.Item(key)
'        Else
'            'nincs ilyen property
'            Formula = sht.Cells(FORMULAROW, this.HdrDict(key)).FormulaR1C1
'        End If
'        arr(i) = Formula
'    Next key
'
'    ' --- write array to range ---
'    '-->> ha tetel soraba irunk
'    Dim rng As Range:   Set rng = this.HeaderRange.Offset(-this.HeaderRange.Row + sor) 'tetel sora
'    rng.FormulaR1C1 = arr
'
'    '-->> ha keplet soraba irunk
''    Dim Rng2 As Range:  Set Rng2 = this.HeaderRange.Offset(-this.HeaderRange.Row + FORMULAROW) 'keplet sor
''    Rng2.FormulaR1C1 = arr
'
'End Sub


'Public Function GetNextID() As Long
''megadja a kovetkezo szabad ID sorszamot
'
'    If this.LastUsedRow > IDcell.Row Then 'van rekord
'        Dim maxID As Long
'        maxID = Application.WorksheetFunction.Max(IDDataRange)
'        'RETURN
'        GetNextID = maxID + 1
'    Else 'nincs rekord
'        'RETURN
'        GetNextID = 1
'    End If
'
'End Function
Attribute VB_Name = "frmTetelek"
Attribute VB_Base = "0{1F2CE849-B58C-45F8-9898-04942192CCD5}{52F6F27E-0515-4E3B-88C5-5BD6F1816BB7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private MyRelatedSheet As Object

Public Property Get RelatedSheet() As Object
    If Not MyRelatedSheet Is Nothing Then
        Set RelatedSheet = MyRelatedSheet
    Else
        Set RelatedSheet = shtTetelek
    End If
End Property

Public Property Set RelatedSheet(ByVal Value As Object)
    Set MyRelatedSheet = Value
    ResetLists
End Property

Private Sub ttipus_Change()

    'Tipus lista feltoltese
    With Me.taltipus
        .Clear
        .list = GetAltipusLista(Me.ttipus.Value) 'in modListak
    End With
    'Tetel kod kikeresese
    With Me.ttkod
        .Value = GetTetelKod(Me.ttipus.Value, Me.taltipus.Value) 'in modListak
    End With

End Sub

Private Sub taltipus_Change()
    'Tetel kod kikeresese
    With Me.ttkod
        .Value = GetTetelKod(Me.ttipus.Value, Me.taltipus.Value) 'in modListak
    End With
End Sub

Private Sub UserForm_Initialize()
    ResetLists
    With Me.beoreklat
        .Value = Abs(CInt(GetFonokNezetErv())) 'in modSecurity
        .Locked = Not CBool(.Value)
        .BackColor = IIf(CBool(.Value), &H80000005, &H80000004)
    End With
    
End Sub

Private Sub ResetLists()
    'Fajta lista feltoltese
    With Me.ttipus
        .Clear
        Select Case Me.RelatedSheet.Name
            Case shtKiadasok.Name
                .list = Array("KIAD|fffd|S")
                .ListIndex = 0          'elso tetel kivalasztasa
            Case Else
                .list = GetTipusLista() 'in modListak
        End Select
    End With
End Sub





Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Tetel' objektumba

    Dim tetelData As Tetel
    Set tetelData = New Tetel

    With Me
        With .ID:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":                                   End With
        With .beoreklat:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":                                   End With
        With .tev:      tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":                End With
        With .tho:      tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":                End With
        With .tnap:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":                End With
        With .ttipus:   tetelData.AddItem .Name, .Value, "CHAR":                                            End With
        With .taltipus: tetelData.AddItem .Name, .Value, "CHAR":                                            End With
        With .ttkod:    tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":                End With
        With .tenyosszeg:  tetelData.AddItem .Name, IIf(.TextLength = 0, 0, HandleSeparator(.Value)), "FLOAT": End With
        With .unev:     tetelData.AddItem .Name, .Value, "CHAR":                                            End With
        With .tmegj:    tetelData.AddItem .Name, "''" & .Value, "CHAR":                                     End With 'hogy a szamot is karakterkent rogzitse
    End With

    'RETURN
    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Tetel' objektum adatainak betoltese a Form megfelelo mezoibe

    With Me
        With .ID:       .Value = tetelData.Item(.Name): End With
        With .beoreklat:       .Value = tetelData.Item(.Name): End With
        With .tev:      .Value = tetelData.Item(.Name): End With
        With .tho:      .Value = tetelData.Item(.Name): End With
        With .tnap:     .Value = tetelData.Item(.Name): End With
        With .ttipus:   .Value = tetelData.Item(.Name): End With
        With .taltipus: .Value = tetelData.Item(.Name): End With
        With .ttkod:    .Value = tetelData.Item(.Name): End With
        With .tenyosszeg:  .Value = tetelData.Item(.Name): End With
        With .unev:     .Value = tetelData.Item(.Name): End With
        With .tmegj:    .Value = tetelData.Item(.Name): End With
    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
    Me.ID.Value = ID
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub

Private Sub beoreklat_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    BooleanValidacio Me.beoreklat
End Sub
Private Sub beoreklat_Change()
    BooleanValidacio Me.beoreklat
End Sub
Private Sub BooleanValidacio(ByRef BlnBox As Object)
'TextBox erteke 0 vagy 1 lehet
    With BlnBox
        If Not (.Value = 1 Or .Value = 0) Then
            .Value = vbNullString
            .SetFocus
        End If
    End With
End Sub
Attribute VB_Name = "modErrorHandling"
Option Explicit
Option Private Module

'
' Description:  This module contains the central error
'               handler and related constant declarations.
'
' Authors:      Stephen Bullen, www.oaltd.co.uk
'               Rob Bovey, www.appspro.com
'
' Chapter Change Overview
' Ch#   Comment
' --------------------------------------------------------------
' 12    Initial version
'


' **************************************************************
' Global Constant Declarations Follow
' **************************************************************
Public Const glHANDLED_ERROR As Long = 9999     ' Run-time error number for our custom errors.
Public Const glUSER_CANCEL As Long = 18         ' The error number generated when the user cancels program execution.
Public Const gsAPPNAME As String = "BConsulting"

Public gbDebugMode As Boolean

Public Enum DebugModeEnum
    debugBypass 'VBE debugging, nincs k|fffd|l|fffd|n elj|fffd|r|fffd|s
    debugAdmin  'ErrorHandling, enged|fffd|lyezett a VBE-be bel|fffd|p|fffd|s
    debugClient 'ErrorHandling, NEM enged|fffd|lyezett a VBE-be bel|fffd|p|fffd|s
    debugIgnore 'Resume Next mindenhol, hogy ne legyen hiba|fffd|zenet
End Enum

Public Const DebugMode = debugBypass 'debugBypass debugAdmin debugClient debugIgnore


' **************************************************************
' Module Constant Declarations Follow
' **************************************************************
Private Const msSILENT_ERROR As String = "UserCancel"   ' Used by the central error handler to bail out silently on user cancel.
Private Const msFILE_ERROR_LOG As String = "Error.log"  ' The name of the file where error messages will be logged to.


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Comments: This is the central error handling procedure for the
'           program. It logs and displays any run-time errors
'           that occur during program execution.
'
' Arguments:    sModule         The module in which the error occured.
'               sProc           The procedure in which the error occured.
'               sFile           (Optional) For multiple-workbook
'                               projects this is the name of the
'                               workbook in which the error occured.
'               bEntryPoint     (Optional) True if this call is
'                               being made from an entry point
'                               procedure. If so, an error message
'                               will be displayed to the user.
'
' Returns:      Boolean         True if the program is in debug
'                               mode, False if it is not.
'
' Date          Developer       Chap    Action
' --------------------------------------------------------------
' 28 May 04     Rob Bovey       Ch12    Initial version
' 05 Jun 04     Stephen Bullen  Ch12    Modified to demonstrate the re-throw method
'
Public Function bCentralErrorHandler( _
                                     ByVal sModule As String, _
                                     ByVal sProc As String, _
                                     Optional ByVal sFile As String, _
                                     Optional ByVal bEntryPoint As Boolean = False, _
                                     Optional ByVal bReThrow As Boolean = True) As Boolean

    Static sErrMsg As String

    Dim iFile As Integer
    Dim lErrNum As Long
    Dim sFullSource As String
    Dim sPath As String
    Dim sLogText As String
    
    'Handle SpeedUp
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    On Error Resume Next
        Application.Calculation = xlCalculationAutomatic
    On Error GoTo 0
    
    If DebugMode = debugBypass Or DebugMode = debugAdmin Then
        gbDebugMode = True
    Else
        gbDebugMode = False
    End If
    
    
    ' Grab the error info before it's cleared by
    ' On Error Resume Next below.
    lErrNum = Err.Number

    ' If this is a user cancel, set the silent error flag
    ' message. This will cause the error to be ignored.
    If lErrNum = glUSER_CANCEL Then sErrMsg = msSILENT_ERROR

    ' If this is the originating error, the static error
    ' message variable will be empty. In that case, store
    ' the originating error message in the static variable.
    If Len(sErrMsg) = 0 Then sErrMsg = Err.Description

    ' We cannot allow errors in the central error handler.
    On Error Resume Next

    ' Load the default filename if required.
    If Len(sFile) = 0 Then sFile = ThisWorkbook.Name

    ' Get the application directory.
    sPath = ThisWorkbook.Path
    If Right$(sPath, 1) <> "\" Then sPath = sPath & "\"

    ' Construct the fully-qualified error source name.
    sFullSource = "[" & sFile & "]" & sModule & "." & sProc

    ' Create the error text to be logged.
    sLogText = "  " & sFullSource & ", Error " & _
               CStr(lErrNum) & ": " & sErrMsg

    ' Open the log file, write out the error information and
    ' close the log file.
    iFile = FreeFile()
    Open sPath & ThisWorkbook.Name & "_" & msFILE_ERROR_LOG For Append As #iFile
    Print #iFile, Format$(Now(), "yyyy.mm.dd hh:mm:ss"), sLogText
    If bEntryPoint Or Not bReThrow Then Print #iFile,
    Close #iFile

    ' Do not display or debug silent errors.
    If sErrMsg <> msSILENT_ERROR Then

        ' Show the error message when we reach the entry point
        ' procedure or immediately if we are in debug mode.
        If bEntryPoint Or gbDebugMode Then
            Application.ScreenUpdating = True
            MsgBox sErrMsg, vbCritical, gsAPPNAME
            ' Clear the static error message variable once
            ' we've reached the entry point so that we're ready
            ' to handle the next error.
            sErrMsg = vbNullString
        End If

        ' The return vale is the debug mode status.
        bCentralErrorHandler = gbDebugMode

    Else
        ' If this is a silent error, clear the static error
        ' message variable when we reach the entry point.
        If bEntryPoint Then sErrMsg = vbNullString
        bCentralErrorHandler = False
    End If

    'SB 05 Jun 04: Extra code for re-throw method
    'If we're using re-throw error handling (the default for this project),
    'this is not the entry point and we're not debugging,
    're-raise the error, to be caught in the next procedure
    'up the call stack.
    'Procedures that handle their own errors can call the central error
    'handler with bReThrow:=False to log the error, but not re-raise it.
    If bReThrow Then
        If Not bEntryPoint And Not gbDebugMode Then
            On Error GoTo 0
            Err.Raise lErrNum, sFullSource, sErrMsg
        End If
    Else
        'Error is being logged and handled,
        'so clear the static error message variable
        sErrMsg = vbNullString
    End If

End Function

Attribute VB_Name = "modListak"
Option Explicit
Option Base 1

' ***** Listak form controlokhoz *****

Public Function GetTipusLista() As Variant
'Named Range >> Array
    Dim rng As Range
    Set rng = NamedRangeToRange("rngTipus", shtSetup)
    If Not rng Is Nothing Then
        Dim inp As Range:   Set inp = rng.Columns(3)
        Dim mask As Range:  Set mask = rng.Columns(2)
        GetTipusLista = GetSetupLista(inp, BoolMask:=mask, Distinct:=True)
    Else
        GoTo EmptyExit
    End If
CleanExit:
    Exit Function
EmptyExit:
    GetTipusLista = Array(vbNullString)
    GoTo CleanExit
End Function

Public Function GetAltipusLista(ByVal Fajta As String) As Variant
'Szurt lista >> Array
    Dim rng As Range
    Select Case Fajta
        Case "BEV|fffd|TEL"
            Set rng = NamedRangeToRange("rngAltipusBevetel", shtSetup)
        Case "KIAD|fffd|S"
            Set rng = NamedRangeToRange("rngAltipusKiadas", shtSetup)
        Case Else
            GoTo EmptyExit
    End Select
    If Not rng Is Nothing Then
        Dim inp As Range:   Set inp = rng.Columns(3)
        Dim mask As Range:  Set mask = rng.Columns(2)
        GetAltipusLista = GetSetupLista(inp, BoolMask:=mask, Distinct:=True)
    Else
        GoTo EmptyExit
    End If
    
CleanExit:
    Exit Function
EmptyExit:
    GetAltipusLista = Array(vbNullString)
    GoTo CleanExit
End Function

Public Function GetTetelKod(ByVal Tipus As String, ByVal Altipus As String) As String

    Dim rng As Range
    Dim key As String
    Select Case Tipus
        Case "BEV|fffd|TEL"
            'kodot altipus alapjan a BEVETEL tablaban keressuk
            Set rng = NamedRangeToRange("rngAltipusBevetel", shtSetup)
            key = Altipus
        Case "KIAD|fffd|S"
            'kodot altipus alapjan a KIADAS tablaban keressuk
            Set rng = NamedRangeToRange("rngAltipusKiadas", shtSetup)
            key = Altipus
        Case Else
            'kodot tipus alapjan a TIPUS tablaban keressuk
            Set rng = NamedRangeToRange("rngTipus", shtSetup)
            key = Tipus
    End Select

    If Not (rng Is Nothing Or key = vbNullString) Then
        
        Dim inputArr As Variant
        inputArr = rng.Value2
        Dim i As Long
        For i = LBound(inputArr, 1) To UBound(inputArr, 1)
            'harmadik oszlopban keressuk key-t es elso oszlopban van a tetelkod
            If StrComp(inputArr(i, 3), key, vbBinaryCompare) = 0 Then
                GetTetelKod = CStr(inputArr(i, 1))
                Exit Function
            End If
        Next i
    
    Else
        GoTo EmptyExit
    End If

CleanExit:
    Exit Function
EmptyExit:
    GetTetelKod = vbNullString
    GoTo CleanExit
End Function

Public Function GetProjektIDs() As Variant
'Project ID szamok >> Array

'    With WorksheetProxy.Create(shtAdatlapok)
'        Dim tempdict As Object
'        Set tempdict = .GetIDs("psorsz")
'    End With
'
'    If tempdict.Count >= 1 Then
'        GetProjektIDs = tempdict.keys
'    Else
'        GetProjektIDs = Array("Nincs projekt")
'    End If

End Function

Public Function GetOKLista() As Variant
'I/N lista >> Array
    GetOKLista = Array("I", "N")
End Function

Public Function GetSetupLista(ByVal rng As Range, _
                              Optional ByVal BoolMask As Range, _
                              Optional ByVal Distinct As Boolean = False, _
                              Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array
    Dim arr As Variant
    If Distinct Then
        arr = DistinctListFromRange(rng, BoolMask:=BoolMask, AllowEmpty:=AllowEmpty)
    Else
        arr = ListFromRange(rng, BoolMask:=BoolMask, AllowEmpty:=AllowEmpty)
    End If
    If IsArray(arr) Then
        GetSetupLista = arr
    Else
        GetSetupLista = Array(vbNullString)
    End If
End Function

Public Function NamedRangeToRange(ByVal RangeName As String, ByVal WS As Worksheet) As Range
    If RangeExists(RangeName, WS) Then
        Set NamedRangeToRange = WS.Range(RangeName)
    End If
End Function

Private Function ListFromRange(ByVal rng As Range, _
                               Optional ByVal BoolMask As Range, _
                               Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array
    If Not rng Is Nothing Then
        Dim arr() As Variant
        Dim i As Long 'array counter
        Dim c As Long 'range counter
        For c = 1 To rng.Cells.Count
            Dim cella As Range
            Set cella = rng.Cells(c)
            Dim include As Boolean
            If Not BoolMask Is Nothing Then
                include = CBool(BoolMask.Cells(c).Value)
            Else
                include = True
            End If
            If include Then
                If Not IsEmpty(cella) Or AllowEmpty Then
                    i = i + 1
                    ReDim Preserve arr(1 To i)
                    arr(i) = CStr(cella.Value)
                End If
            End If
        Next c
        ListFromRange = arr
    End If
End Function

Private Function DistinctListFromRange(ByVal rng As Range, _
                                       Optional ByVal BoolMask As Range, _
                                       Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array, ismetlodesek es ures cellak nelkul
    If Not rng Is Nothing Then
        Dim tempdict As Object
        Set tempdict = CreateObject("Scripting.Dictionary")
        tempdict.CompareMode = 0 'binarycompare
        Dim c As Long
        For c = 1 To rng.Cells.Count
            Dim cella As Range
            Set cella = rng.Cells(c)
            Dim include As Boolean
            If Not BoolMask Is Nothing Then
                include = CBool(BoolMask.Cells(c).Value)
            Else
                include = True
            End If
            If include Then
                If Not IsEmpty(cella) Or AllowEmpty Then
                    tempdict(CStr(cella.Value)) = vbNullString
                End If
            End If
        Next c
        DistinctListFromRange = tempdict.Keys
    End If
End Function
Attribute VB_Name = "modNaptarFrissites"
Option Explicit

Private Const sModule As String = "modNaptarFrissites"


Public Sub NaptarFrissites()

    Const RangeName As String = "rngNaptar"                     'Named range
    Dim NaptarSheet As Worksheet: Set NaptarSheet = shtNaptar   'naptar munkalap CodeName
    Const FormulaRange As String = "X1"                         'ebben az oszlopban van a masolando keplet

    'ActiveSheet mentese
    Dim ActSht As Worksheet: Set ActSht = ActiveSheet

    'protection off
    NaptarSheet.Unprotect INTERNAL_PWD

    Dim NaptarRange As Range
    If RangeExists(RangeName, NaptarSheet) Then
        
        Application.EnableEvents = False
        
        Set NaptarRange = shtNaptar.Range(RangeName)

        Dim FormulaRng As Range
        'Set FormulaRng = shtNaptar.Range(FormulaRange) ' Ha egy cellaban van a keplet
        Set FormulaRng = Intersect(shtNaptar.Range(FormulaRange).EntireColumn, NaptarRange.EntireRow)
        FormulaRng.Copy
        NaptarRange.PasteSpecial xlPasteFormulas

        'Calculate
        Application.Calculate
        Do While Application.CalculationState <> xlDone
            DoEvents
        Loop
        NaptarRange.Copy
        NaptarRange.PasteSpecial xlPasteValues
        Application.CutCopyMode = False
        
        Application.EnableEvents = True

    Else
        Exit Sub
    End If

    NaptarSheet.Activate
    NaptarRange.Cells(1).Select 'hogy ne az egesz lap legyen kijelolve

    'protection vissza
    NaptarSheet.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    NaptarSheet.EnableOutlining = True

    'Ugras kezdo nezetre
    ActSht.Activate


    '-----------------------------------------------------
    'frissites idejenek visszairasa setup lapra
    '-----------------------------------------------------
    'protection off
    shtSetup.Unprotect INTERNAL_PWD
    
    If RangeExists("rngNaptarUpdated", shtSetup) Then
        shtSetup.Range("rngNaptarUpdated").Value = Now
    End If
    
    'protection vissza
    shtSetup.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    shtSetup.EnableOutlining = True


End Sub

'Public Sub FilterTetelByDate(ByVal datum As Long)
'
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FilterTetelByDate"
''-------------------------------------------------
'
'    Dim Target As Range
'    Set Target = shtTetelek.Range("F4")
'    Target.Value = datum 'ez automatikusan inditja a Sheet_Change event-et
'    Target.Parent.Activate
'    Target.Select
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub
Attribute VB_Name = "modSecurity"
Option Explicit
Option Private Module

Public Sub StartNewSession(ByVal Jelszo As String)
    If RangeExists("rngFonokJelszo", shtSetup) And RangeExists("rngKiadasJelszo", shtSetup) Then
        If StrComp(Jelszo, shtSetup.Range("rngFonokJelszo").Value, vbBinaryCompare) = 0 Then
            FonokNezet
        ElseIf StrComp(Jelszo, shtSetup.Range("rngKiadasJelszo").Value, vbBinaryCompare) = 0 Then
            KiadasNezet
        Else
            KezdoNezet
            '--------------------------------
            'Setup lap ertekeinek beallitasa
            '--------------------------------
            'protection off
            shtSetup.Unprotect INTERNAL_PWD
            'allitas
            SetFonokNezetErv False
            SetBeoNezetErv False
            'protection vissza
            shtSetup.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
            shtSetup.EnableOutlining = True
        End If
    End If
End Sub

Public Sub KezdoNezet()
' csak a Start lap lathato
    Dim sht As Worksheet
    For Each sht In ThisWorkbook.Worksheets
        If Not sht.Name = shtStart.Name Then
            sht.Visible = xlSheetVeryHidden
        End If
    Next sht
    
End Sub

Public Sub FonokNezet()
' minden lap lathato kiveve a kivetelek
    
    Dim boost As Booster: Set boost = New Booster
    
    'kivetelek
    Dim kivetelek As Collection: Set kivetelek = New Collection
    With kivetelek
        '.Add [munkalap].Name
    End With
    
    'munkalap lathatosag
    Dim sheetVisibility As Integer
    Dim sht As Worksheet
    Dim kivetel As Variant
    For Each sht In ThisWorkbook.Worksheets
        sheetVisibility = xlSheetVisible
        For Each kivetel In kivetelek
            If sht.Name = kivetel Then sheetVisibility = xlSheetVeryHidden
        Next kivetel
        sht.Visible = sheetVisibility
    Next sht
    
    'named range lathatosag
    If RangeExists("rngFonokJelszo", shtSetup) Then shtSetup.Names("rngFonokJelszo").Visible = True
    If RangeExists("rngKiadasJelszo", shtSetup) Then shtSetup.Names("rngKiadasJelszo").Visible = True
    
    '--------------------------------
    'Setup lap ertekeinek beallitasa
    '--------------------------------
    'protection off
    shtSetup.Unprotect INTERNAL_PWD
    'allitas
    SetFonokNezetErv True
    SetBeoNezetErv False
    'protection vissza
    shtSetup.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    shtSetup.EnableOutlining = True
    
    Set boost = Nothing
End Sub

Public Sub KiadasNezet()
' Csak a felsorolt lapok lathatok
    
    Dim boost As Booster: Set boost = New Booster
    
    'lista
    Dim lathatoLapok As Collection: Set lathatoLapok = New Collection
    With lathatoLapok
        .Add shtStart.Name
        .Add shtKiadasok.Name
        '.Add [munkalap].Name
    End With
    
    'munkalap lathatosag
    Dim sheetVisibility As Integer
    Dim sht As Worksheet
    Dim lathatoLap As Variant
    For Each sht In ThisWorkbook.Worksheets
        sheetVisibility = xlSheetVeryHidden
        For Each lathatoLap In lathatoLapok
            If sht.Name = lathatoLap Then sheetVisibility = xlSheetVisible
        Next lathatoLap
        sht.Visible = sheetVisibility
    Next sht
    
    'named range lathatosag
    If RangeExists("rngFonokJelszo", shtSetup) Then shtSetup.Names("rngFonokJelszo").Visible = False
    If RangeExists("rngKiadasJelszo", shtSetup) Then shtSetup.Names("rngKiadasJelszo").Visible = False
    
    '--------------------------------
    'Setup lap ertekeinek beallitasa
    '--------------------------------
    'protection off
    shtSetup.Unprotect INTERNAL_PWD
    'allitas
    SetFonokNezetErv False
    SetBeoNezetErv True
    'protection vissza
    shtSetup.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    shtSetup.EnableOutlining = True
        
    Set boost = Nothing
End Sub

Public Function SaveVisibility() As Variant
    With ThisWorkbook.Worksheets
        Dim arr As Variant
        ReDim arr(1 To .Count)
        Dim i As Long
        For i = 1 To .Count
            arr(i) = .Item(i).Visible
        Next i
    End With
    'RETURN
    SaveVisibility = arr
End Function

Public Sub RestoreVisibility(ByVal Visibilities As Variant)
    With ThisWorkbook.Worksheets
        Dim i As Long
        For i = 1 To .Count
            .Item(i).Visible = Visibilities(i)
        Next i
    End With
End Sub

Public Function CsakSajatRekord() As Boolean
    If RangeExists("rngBeoRekLat", shtSetup) Then
        CsakSajatRekord = CBool(shtSetup.Range("rngBeoRekLat").Value)
    Else
        CsakSajatRekord = False 'Default ertek
    End If
End Function
Public Function GetFonokNezetErv() As Boolean
    If RangeExists("rngFonokNezetVan", shtSetup) Then
        GetFonokNezetErv = CBool(shtSetup.Range("rngFonokNezetVan").Value)
    Else
        GetFonokNezetErv = False 'Default ertek
    End If
End Function
Public Sub SetFonokNezetErv(ByVal Value As Boolean)
    If RangeExists("rngFonokNezetVan", shtSetup) Then
        shtSetup.Range("rngFonokNezetVan").Value = Abs(CInt(Value))
    End If
End Sub
Public Function GetBeoNezetErv() As Boolean
    If RangeExists("rngBeoNezetVan", shtSetup) Then
        GetBeoNezetErv = CBool(shtSetup.Range("rngBeoNezetVan").Value)
    Else
        GetBeoNezetErv = False 'Default ertek
    End If
End Function
Public Sub SetBeoNezetErv(ByVal Value As Boolean)
    If RangeExists("rngBeoNezetVan", shtSetup) Then
        shtSetup.Range("rngBeoNezetVan").Value = Abs(CInt(Value))
    End If
End Sub
Attribute VB_Name = "shtImport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtKiadasok"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmTetelek"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblTetelek"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs

Public Property Get IDColumnHeader() As String
    IDColumnHeader = IDREF
End Property

Public Property Get RelatedForm() As String
    RelatedForm = MyForm
End Property

Public Property Get RelatedTable() As String
    RelatedTable = MyTable
End Property

Attribute VB_Name = "shtMain"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtMain4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtNaptar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Enum DataColumnWidthEnum
    Undefined = 0
    Normal
    Narrow
End Enum

Private DataColumnWidth As DataColumnWidthEnum

Private Property Get NormalColumnWidth() As Double
    If RangeExists("rngNormalColumnWidth", shtSetup) Then
        NormalColumnWidth = shtSetup.Range("rngNormalColumnWidth").Value
    End If
End Property

Private Property Get NarrowColumnWidth() As Double
    If RangeExists("rngNarrowColumnWidth", shtSetup) Then
        NarrowColumnWidth = shtSetup.Range("rngNarrowColumnWidth").Value
    End If
End Property

Private Property Get Datumok() As Range
    If RangeExists("rngDatumok", Me) Then
        Set Datumok = Me.Range("rngDatumok")
    End If
End Property

Private Property Get NaptarData() As Range
    If RangeExists("rngNaptar", Me) Then
        Set NaptarData = Me.Range("rngNaptar")
    End If
End Property

Private Property Get FirstVisibleDate() As Long
    If Not Datumok Is Nothing Then
        Dim rng As Range
        Set rng = Intersect(ActiveWindow.VisibleRange.Cells(1).EntireColumn, Datumok)
        If Not rng Is Nothing Then FirstVisibleDate = rng.Value
    End If
End Property

Private Function FindDateColumn(ByVal datum As Long) As Long
    Dim rng As Range: Set rng = Datumok
    If Not Datumok Is Nothing Then
        Dim c As Range
        For Each c In rng.Cells
            FindDateColumn = c.Column
            If CLng(c.Value) >= datum Then
                Exit For
            End If
        Next c
    End If
End Function

Public Sub HonapElore()
    'Csak akkor mukodik szepen, ha FreezePanes be van kapcsolva
    '(enelkul is mukodik, csak eltunnek a gombok, mert a kijelolest mindig a bal felso sarokba teszi)
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    'jelenlegi bal szelso datum
    Dim CurrentDate As Long
    CurrentDate = FirstVisibleDate
    'cel datum
    Dim TargetDate As Long
    TargetDate = DateSerial(Year(CurrentDate), Month(CurrentDate) + 1, 1)
    'ugras cel datumra
    JumpToDate TargetDate
End Sub

Public Sub HonapHatra()
    'Csak akkor mukodik szepen, ha FreezePanes be van kapcsolva
    '(enelkul is mukodik, csak eltunnek a gombok, mert a kijelolest mindig a bal felso sarokba teszi)
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    'jelenlegi bal szelso datum
    Dim CurrentDate As Long
    CurrentDate = FirstVisibleDate
    'cel datum
    Dim TargetDate As Long
    TargetDate = DateSerial(Year(CurrentDate - 1), Month(CurrentDate - 1), 1)
    'ugras cel datumra
    JumpToDate TargetDate
End Sub

Public Sub MaiNapra()
    'Csak akkor mukodik, ha AA8-nal FreezePanes be van kapcsolva
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    CenterOnDate Date
    'HighlightDay Date
End Sub

Public Sub Helyzetre()
    'Csak akkor mukodik, ha AA8-nal FreezePanes be van kapcsolva
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    Dim datum As Long
    datum = Me.Range("t7")
    CenterOnDate datum
    'HighlightDay datum
End Sub

Private Sub JumpToDate(ByVal datum As Long)
'A datumot helyezi a bal szelre
    Dim rng As Range
    Set rng = Me.Cells(5, FindDateColumn(datum))
    Application.GoTo rng, True
End Sub

Private Sub CenterOnDate(ByVal datum As Long)
'A datumot helyezi a kepernyo kozepere
    Dim rng As Range
    Set rng = Me.Cells(5, FindDateColumn(datum))
    CenterOnCell rng
End Sub

Private Sub HighlightDay(ByVal datum As Long)
    If Not NaptarData Is Nothing Then
        Dim col As Long: col = FindDateColumn(datum)
        If col > 0 Then
            Dim rng As Range
            Set rng = Intersect(NaptarData, Me.Columns(col))
            rng.Interior.Color = RGB(255, 242, 204)
        End If
    End If

End Sub

Private Sub CenterOnCell(ByVal OnCell As Range)

    Dim VisRows As Integer
    Dim VisCols As Integer
    
    Application.ScreenUpdating = False
    '
    ' Switch over to the OnCell's workbook and worksheet.
    '
    OnCell.Parent.Parent.Activate
    OnCell.Parent.Activate
    '
    ' Get the number of visible rows and columns for the active window.
    '
    With ActiveWindow.VisibleRange
        VisRows = .Rows.Count
        VisCols = .Columns.Count
    End With
    '
    ' Now, determine what cell we need to GOTO. The GOTO method will
    ' place that cell reference in the upper left corner of the screen,
    ' so that reference needs to be VisRows/2 above and VisCols/2 columns
    ' to the left of the cell we want to center on. Use the MAX function
    ' to ensure we're not trying to GOTO a cell in row <=0 or column <=0.
    '
    With Application
        .GoTo reference:=OnCell.Parent.Cells( _
            .WorksheetFunction.Max(1, OnCell.Row + _
            (OnCell.Rows.Count / 2) - (VisRows / 2)), _
            .WorksheetFunction.Max(1, OnCell.Column + _
            (OnCell.Columns.Count / 4) - _
            .WorksheetFunction.RoundDown((VisCols / 4), 0))), _
         Scroll:=True
    End With
    
    OnCell.Select
    Application.ScreenUpdating = True

End Sub

Public Sub NezetValtas()
    Select Case DataColumnWidth
        Case DataColumnWidthEnum.Undefined
            SetColumnWidth NarrowColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Narrow
        Case DataColumnWidthEnum.Normal
            SetColumnWidth NarrowColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Narrow
        Case DataColumnWidthEnum.Narrow
            SetColumnWidth NormalColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Normal
    End Select
End Sub

Private Sub SetColumnWidth(ByVal ColW As Double)
    If Not NaptarData Is Nothing Then
        NaptarData.EntireColumn.ColumnWidth = ColW
    End If
End Sub

'Public Sub TetelSzures()
'    If TypeName(Selection) = "Range" Then
'        If Not Datumok Is Nothing Then
'            If Not Intersect(Selection.EntireColumn, Datumok) Is Nothing Then
'                Dim datum As Long
'                datum = Intersect(Selection.EntireColumn, Datumok).Value
'                FilterTetelByDate datum 'in modNaptarFrissites
'            End If
'        End If
'    End If
'End Sub
Attribute VB_Name = "shtSetup"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtStart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shtTetelek"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmTetelek"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblTetelek"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs

Public Property Get IDColumnHeader() As String
    IDColumnHeader = IDREF
End Property

Public Property Get RelatedForm() As String
    RelatedForm = MyForm
End Property

Public Property Get RelatedTable() As String
    RelatedTable = MyTable
End Property


' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
