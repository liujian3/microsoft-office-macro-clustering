Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet111"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub CommandButton1_Click()
  
  If ThisWorkbook.SaveWb Then
    ThisWorkbook.ReturnLinksToNormal
  End If
  
  Application.Quit
  
End Sub

Attribute VB_Name = "Sheet112"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet1121"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11211"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11212"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet112121"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet112122"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet113"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim mbSaveWb As Boolean
Const mcCoverSheetName = "Contents"

Dim wbkLaunch As Workbook

#If VBA7 And Win64 Then
Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" _
    Alias "GetPrivateProfileStringA" _
    (ByVal lpApplicationName As String, ByVal lpKeyName As Any _
    , ByVal lpDefault As String, ByVal lpReturnedString As String _
    , ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Private Declare Function GetPrivateProfileString Lib "kernel32" _
    Alias "GetPrivateProfileStringA" _
    (ByVal lpApplicationName As String, ByVal lpKeyName As Any _
    , ByVal lpDefault As String, ByVal lpReturnedString As String _
    , ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

Public Property Get SaveWb() As Boolean
    SaveWb = mbSaveWb
End Property
Public Property Let SaveWb(bSave As Boolean)
    mbSaveWb = bSave
End Property

 

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  '* close the Launch sheet without saving
  If Not wbkLaunch Is Nothing Then
    wbkLaunch.AllowClose = True
    wbkLaunch.Close False
    Set wbkLaunch = Nothing
  End If
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
  Worksheets(mcCoverSheetName).Activate
End Sub

Private Sub Workbook_Open()
        
    Dim nVisSheetCount As Integer
    Dim ws As Worksheet
        
    'If Me.ReadOnly Then
    '    Exit Sub
    'End If
    
    INIFileWrite "PermSzeFileAdjust", "OpenedForReadOnly", "Inforum.ini", Me.ReadOnly
    
    ActiveWorkbook.Worksheets(mcCoverSheetName).Activate
    
    'Do not allow selection of cells outside of our
    'worksheet menu
    ActiveWorkbook.Worksheets(mcCoverSheetName).EnableSelection = xlUnlockedCells
    
    'Add the Back To Cover Sheet and the What's This Button
    'AddToolbarButton
    
    'Fix CoverSheet window
    ActiveWindow.LargeScroll ToRight:=-1
    ActiveWindow.ScrollRow = 1
    
    'See how many visible sheets we have
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Visible = xlSheetVisible Then
            nVisSheetCount = nVisSheetCount + 1
        End If
    Next
    
    If nVisSheetCount = 2 Then
        ActiveWorkbook.Sheets(2).Activate
    End If
    
End Sub
Private Sub Workbook_SheetDeactivate(ByVal sh As Object)

    'If coming back to the Cover Sheet from another
    'Sheet then find that Sheet name and deactivate it
    'If ActiveSheet.Name = "Cover Sheet" Then
    '    ChangeLinkColor sh.Name
    'End If
    
    
End Sub

Public Sub ChangeLinkColor(sWorksheet As String)
    
    Dim nRow As Integer
    Dim scol As String
    
    nRow = 3
    scol = "E"
    
    While StrComp(Worksheets(mcCoverSheetName).Range(scol & Trim$(nRow)).Value, sWorksheet) <> 0
        nRow = nRow + 2
        If IsEmpty(Worksheets(mcCoverSheetName).Range(scol & Trim$(nRow)).Value) Then
            Exit Sub
        End If
    Wend
    
    scol = "B"
    
    Worksheets(mcCoverSheetName).Range(scol & Trim$(nRow)).Font.ColorIndex = 13
    
End Sub
Public Sub AddToolbarButton()
    
    Dim cmdBarButton As CommandBarControl
    Dim nAddInPosition As Integer
    Dim nIndex As Integer
    Dim bExists As Boolean
    Dim cmdBar As CommandBar
    
    'If IsEmpty(Worksheets("Cover Sheet").Range("B3").Value) Then
    '    Exit Sub
    'End If
    On Error Resume Next
    If Me.ReadOnly Then
        Exit Sub
    End If
    
    'Hide all CommandBars except the Standard
    On Error Resume Next
    For Each cmdBar In Application.CommandBars
        If StrComp(cmdBar.Name, "Standard", vbTextCompare) <> 0 Then
            cmdBar.Visible = False
        End If
    Next
    
    'Remove the Back to cover sheet and the What's this buttons
    'from the STandard toolbar
    For Each cmdBarButton In Application.CommandBars("Standard").Controls
        If StrComp(cmdBarButton.Caption, mcCoverSheetName, vbTextCompare) = 0 Or _
            StrComp(cmdBarButton.DescriptionText, "TempMenu", vbTextCompare) = 0 Or _
            StrComp(Mid$(cmdBarButton.DescriptionText, 1, 8), "TempMenu", vbTextCompare) = 0 Or _
            StrComp(cmdBarButton.Caption, "&Custom Menu Item", vbTextCompare) = 0 Or _
            StrComp(cmdBarButton.Caption, "M&ap...", vbTextCompare) = 0 Or _
            StrComp(cmdBarButton.Caption, "What's This?", vbTextCompare) = 0 Then
            cmdBarButton.Delete
        End If
    Next
    
    'Add our back to cover sheet button at the end of the Standard Control Bar
    nAddInPosition = Application.CommandBars("Standard").Controls.Count
    
    'We have to find someway to add controls until
    'we can get the Back to cover sheet button under the
    'X in the upper right hand corner of the screen
    If nAddInPosition < 23 Then
        For nIndex = 1 To (23 - nAddInPosition)
            Application.CommandBars("Standard").Controls.Add Type:=msoControlButton, Id:= _
            2949, Temporary:=True
            Application.CommandBars("Standard").Controls(nAddInPosition + nIndex).DescriptionText = "TempMenu" & Trim$(nIndex)
            Application.CommandBars("Standard").Controls(nAddInPosition + nIndex).Enabled = False
        
        Next
    Else
        nIndex = 1
    End If
    
    nAddInPosition = nAddInPosition + nIndex
    
    'Add the What's This and Back to Cover Sheet buttons
    'on the STandard toolbar
    'nAddInPosition = nAddInPosition + 1
    Application.CommandBars("Standard").Controls.Add Type:=msoControlButton, Id:= _
        2949, Temporary:=True
    Application.CommandBars("Standard").Controls(nAddInPosition).BeginGroup = True
    Application.CommandBars("Standard").Controls(nAddInPosition).Style = msoButtonCaption
    Application.CommandBars("Standard").Controls(nAddInPosition).OnAction = "DisplayWhatsThis2"
    Application.CommandBars("Standard").Controls(nAddInPosition).Caption = "What's This?"
    Application.CommandBars("Standard").Controls(nAddInPosition).DescriptionText = "Help On This WorkSheet"
    Application.CommandBars("Standard").Controls(nAddInPosition).Visible = True
    
    nAddInPosition = nAddInPosition + 1
    Application.CommandBars("Standard").Controls.Add Type:=msoControlButton, Id:= _
        2949, Temporary:=True
    Application.CommandBars("Standard").Controls(nAddInPosition).BeginGroup = True
    Application.CommandBars("Standard").Controls(nAddInPosition).Style = msoButtonIconAndCaption
    Application.CommandBars("Standard").Controls(nAddInPosition).OnAction = "BackToCoverSheet"
    'Worksheets("Cover Sheet").Shapes("Picture 33").Visible = True
    Worksheets(mcCoverSheetName).Shapes("Picture 33").Copy
    'Worksheets("Cover Sheet").Shapes("Picture 33").Visible = False
    Application.CommandBars("Standard").Controls(nAddInPosition).PasteFace
    Application.CommandBars("Standard").Controls(nAddInPosition).Caption = mcCoverSheetName
    Application.CommandBars("Standard").Controls(nAddInPosition).DescriptionText = "Back to Cover Sheet"
    Application.CommandBars("Standard").Controls(nAddInPosition).Visible = True
    Worksheets(mcCoverSheetName).Activate
    
End Sub

Public Sub ReturnLinksToNormal()

    Dim shpWhatsThis As Shape
    Dim wsCurrworksheet As Worksheet
    Dim nRow As Integer
    Dim scol As String
        
    Set wsCurrworksheet = ActiveSheet
       
    scol = "B"
    nRow = 3
    If IsEmpty(Worksheets(mcCoverSheetName).Range(scol & Trim$(nRow)).Value) Then
        Exit Sub
    End If
    
    ActiveSheet.Unprotect
    
    'While Not IsEmpty(Worksheets("Cover Sheet").Range(sCol & Trim$(nRow)).Value)
        
    '    With Worksheets("Cover Sheet").Range(sCol & Trim$(nRow)).Font
    '        If .ColorIndex <> 5 Then
    '            .ColorIndex = 5
    '        End If
    '    End With
        
    '    nRow = nRow + 2
        
    'Wend
    
    
    Worksheets(mcCoverSheetName).Activate
    'Change the Visited What's This links back to
    'non visited via the font color
    For Each shpWhatsThis In Worksheets(mcCoverSheetName).Shapes
    
        If InStr(1, shpWhatsThis.Name, "WhatsThis", vbTextCompare) > 0 Then
            If shpWhatsThis.Visible Then
                ActiveSheet.Unprotect
                shpWhatsThis.Select
                With Selection.Characters(Start:=1, Length:=12).Font
                    If .ColorIndex <> 5 Then
                        .ColorIndex = 5
                    End If
                End With
            End If
        End If
    Next
    
    'Protect the Worksheet
    Worksheets(mcCoverSheetName).Protect
        
    wsCurrworksheet.Activate
    
End Sub

'************************************
'* CallLauncher
'*  purpose: open the map dat with the map viewer server
'************************************
Public Sub CallLauncher()
  Dim sLaunch As String
  Dim bFromInfIni As Boolean
  
      '* find the template for running mapviewer
      '* ig not found assume mapviewer is
      '* not installed on this machine
      
      '* BJN 07/06/2000
      '* We are in the process of moving the Global_MapViewer.ini to a global location so
      '* we don't have to hardcode.  During this move we will first look in the Inforum.ini
      '* to find the key MapviewerLauncher Keyword in the Inforum Platform section.  If we don't
      '* Find the keyword or the value is empty we will then look on the hardcoded area.  This gives
      '* us time to update everyone's Inforum.ini
  bFromInfIni = False
  sLaunch = INIGetStr("Inforum Platform", "MapviewerLauncher", "Inforum.INI")
      
  If Len(sLaunch) = 0 Then
    sLaunch = INIGetStr("Templates", "Launcher", "X:\Inforum Platform\Inforum Interface\Global_MapViewer.INI")
  Else
    bFromInfIni = True
  End If
  
  If Len(sLaunch) = 0 Then
    sLaunch = INIGetStr("Templates", "Launcher", "Global_MapViewer.INI")
  End If
  
  If Len(sLaunch) = 0 Then
    Err.Raise -1, "", "Mapviewer is not installed"
    Exit Sub
  End If
  
  '* If we are not getting the launcher from the Inforum.ini then look in Mapviewer.ini for the Level
  If Not bFromInfIni Then
    sLaunch = GetFilePath(sLaunch) & Trim(INIGetStr("Launcher", "Level", "Mapviewer.ini") & " Launcher.xls")
  End If
  
    
    '* create a copy of the launch template
    '* if one is not already open
  If wbkLaunch Is Nothing Then
    Set wbkLaunch = Workbooks.Add(sLaunch)
  End If
    
    '* show the map
  wbkLaunch.ConnectToMap ActiveSheet.Name, Me.Name
  
End Sub
'***************************
'*  INIGetStr$:
'*    Purpose:  get a string from the INI file
'*    Inputs:   sSection is the section of the INI file to look in
'*              sVarName is the name you are looking for
'*              sFilename is the INI File path and name
'*                - defaults to windows directory if the
'*                - if sFilename is invalid
'*    Output:   Returns a string containing
'*              either the value or is empty
'***************************
Private Function INIGetStr$(sSection As String, sVarName As String, sFileName As String)
  Dim sDefault As String
  Dim sAns As String
          
          '* sDefault is the default value
          '* if the entry is not found
          '* it is not currently used
  sDefault = ""
          '* sAns is the returned value
          '* from the INI file
  sAns = ""
  INIGetStr$ = ""
  Do
        '* repeat till the the returned valu is not truncated
    sAns = sAns & Space$(50)
    If GetPrivateProfileString(Trim$(UCase$(sSection)), Trim$(UCase$(sVarName)), sDefault, sAns, Len(sAns), sFileName) > 0 Then
      If Right$(sAns, 1) = " " Then    '* if no truncation then
        INIGetStr$ = Trim$(NullTrim$(Trim$(sAns)))   '* remove nulls and spaces
        Exit Do
      End If
    Else
      Exit Do
    End If
  Loop
End Function
'************************************
'*  GetFilePath:
'*    Purpose:  Return either the pathname
'*              from a filepath\name string
'*    Inputs:   sFile by value is the full filename and path
'*    Outputs:  the pathname
'************************************
Public Function GetFilePath$(ByVal sfile As String)
  Dim sPath As String

        '* split into path and filename
  Do While InStr(sfile, "\")
    sPath = sPath & LeftOf$(sfile, "\") & "\"
    sfile = RightOf$(sfile, "\")
  Loop
  
  GetFilePath = sPath
End Function
'**************************************
'*  LeftOf$:
'*    Purpose:  returns a string of everthing to the left of a sub string
'*    Inputs:   sLeft is the string
'*              sOf is the Substring
'*              bCaseInsensitive - whether to check case or not
'*    Outputs:  everything to the left of the substring or
'*              an empty string if the substring is not in the string
'**************************************
Public Function LeftOf$(ByVal sLeft As String, ByVal sOf As String, Optional ByVal bCaseInSensitive As Boolean)
  Dim iPos As Integer
  
  LeftOf$ = ""
  If bCaseInSensitive Then
    iPos = InStr(1, sLeft, sOf, vbTextCompare)
  Else
    iPos = InStr(sLeft, sOf)
  End If
  If iPos Then
    LeftOf$ = Left$(sLeft, iPos - 1)
  End If
End Function
'**************************************
'*  RightOf$:
'*    Purpose:  returns a string of everthing to the right of a sub string
'*    Inputs:   sRight is the string
'*              sOf is the Substring
'*              bCaseInsensitive - whether to check case or not
'*    Outputs:  everything to the right of the substring or
'*              an empty string if the substring is not in the string
'**************************************
Public Function RightOf$(ByVal sRight As String, ByVal sOf As String, Optional ByVal bCaseInSensitive As Boolean)
  Dim iPos As Integer
  
  RightOf$ = ""
  If bCaseInSensitive Then
    iPos = InStr(1, sRight, sOf, vbTextCompare)
  Else
    iPos = InStr(sRight, sOf)
  End If
  
  If iPos Then
    RightOf$ = Mid$(sRight, iPos + Len(sOf), Len(sRight))
  End If
End Function
'***********************************************************
'Function INIFileWrite
'Purpose:         Write the Section sSection and the Key sKey
'                 and the value sValue of the file sINIFileName
'                 and return True or False when success
'                 value.
'Inputs:          sSection the section of the inifile to Write
'                 sKey the Key of sSection to Write to the inifile
'                 sINIFileName the INI file to Write to
'                 sValue the Value to write in sKey
'Outputs:         True or False based on Successful completion
'***********************************************************
Public Function INIFileWrite(sSection As String, sKey As String, sINIFileName As String, sValue As String) As Boolean

  
On Error GoTo ErrorHandler
  
  Const cSOURCE = "[ThisWorkbook" & ".INIFILEWRITE]"
  
  Dim retval As String
  Dim Worked As Integer
    
    retval = String$(255, 0)
    Worked = WritePrivateProfileString(sSection, sKey, sValue, sINIFileName)
    If Worked Then
        INIFileWrite = True
    Else
        INIFileWrite = False
    End If
    
Exit Function
  
ErrorHandler:

  Dim nerrnum As Long
  Dim sDesc As String
  Dim sSource As String
  
  nerrnum = Err.Number
  sDesc = Err.Description
  sSource = cSOURCE & Err.Source
  
  Err.Raise nerrnum, sSource, sDesc
  
End Function

Attribute VB_Name = "modInforum"
'/* IBM Confidential
' * OCO Source Materials
' * |fffd| Copyright IBM Corporation 2018
' * The source code for this program is not published or otherwise
' * divested of its trade secrets, irrespective of what has been
' * deposited with the U.S. Copyright Office.
'*/

Option Explicit
Option Compare Text

Private gcolPivotDataFieldsReset As New Collection
Public Const gcCoverSheetName = "Contents"
Public Const cPivRepOpts = "PivotReportOptions"

#If VBA7 And Win64 Then
Public Declare PtrSafe Function LockWindowUpdate Lib "user32" (ByVal hwndLock As Long) As Long
Public Declare PtrSafe Function GetActiveWindow Lib "user32" () As Long
#Else
Public Declare Function LockWindowUpdate Lib "user32" (ByVal hwndLock As Long) As Long
Public Declare Function GetActiveWindow Lib "user32" () As Long
#End If

'Public Declare Function LockWindowUpdate Lib "user32" (ByVal hwndLock As Long) As Long
'Public Declare Function GetActiveWindow Lib "user32" () As Long

'64bit MLucas Changes - KRK
'Dim CMaxControls As mLucas64bit.CMaxControls
'Dim CMaxEnvironment As mLucas64bit.CMaxEnvironment
'Dim CMaxGeneric As mLucas64bit.CMaxGeneric
'Dim CMaxINIFiles As mLucas64bit.CMaxINIFiles
'Dim CMaxString As mLucas64bit.CmaxStrings

Private Const cWebServerURL = "www.InforumOnline.com"
Private Const cHelpDefault = "DefaultWhatsThis/DefaultWhatsThis.HTM"
'Dinesh Advanced excel charts -28 AUG 2017
 Dim chType As XlChartType
 Public strChartType_new As String
'csh
 Public CSHBrowserpath  As String
 Public cshCompleteURL As String

Private objIE As Object 'cannot have this going out of scope!

'INI File Stuff
Const gstrNULL = ""
Const cMODULENAME = "[MODINIFUNCS."

#If VBA7 And Win64 Then
Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
'Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long

'*****************************
'*  Enums
'*****************************

Const Show = 5
Const Success = 32


Const Object_0 = &H0         ' the object is signaled (finished)
Const Abandoned = &H80       ' the object is a mutex which became signaled when the process that owned it terminated
Const Timeout = &H102        ' the object remains unsignaled (unfinished) and the wait function timed out
Const Failed = &HFFFFFFFF    '   function call failed
Const IO_Completion = &HC0&  ' recieved IO complete signal



Const NotStarted = -19
Const WaitFailed = -20
Const UnknownErr = -21


'*****************************
'*  Constants
'*****************************
Private Const INFINITE = &HFFFF
Private Const SYNCHRONIZE = &H100000
Private Const cMAX_PATH = 260
Private Const OFN_HIDEREADONLY = &H4
Private Const OFN_FILEMUSTEXIST = &H1000
Private Const OFN_EXPLORER = &H80000
Private Const OFN_PATHMUSTEXIST = &H800
Private Const OFN_OVERWRITEPROMPT = &H2

'*****************************
'* typedefs
'*****************************
Private Type typStartUpInfo
  cb              As Long
  lpReserved      As String
  lpDesktop       As String
  lpTitle         As String
  dwX             As Long
  dwy             As Long
  dwXSize         As Long
  dwYSize         As Long
  dwFillAttribute As Long
  dwFlags         As Long
  wShowWindow     As Integer
  cbReserved2     As Integer
  lpReserved2     As Long
  hStdInput       As Long
  hStdOutput      As Long
  hStdError       As Long
End Type

Private Type typProcessInfo
  hProcess    As Long 'used by WaitForSingleObject()
  hThread     As Long
  dwProcessId As Long
  dwThreadID  As Long
End Type

Type OPENFILENAME
    lStructSize As Long
    hwndOwner As Long
    hInstance As Long
    lpstrFilter As String
    lpstrCustomFilter As String
    nMaxCustFilter As Long
    nFilterIndex As Long
    lpstrFile As String
    nMaxFile As Long
    lpstrFileTitle As String
    nMaxFileTitle As Long
    lpstrInitialDir As String
    lpstrTitle As String
    flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    lpstrDefExt As String
    lCustData As Long
    lpfnHook As Long
    lpTemplateName As String
End Type

'*****************************
'* API Delcares
'*****************************
#If VBA7 And Win64 Then
Private Declare PtrSafe Function WaitForSingleObjectEx Lib "kernel32" _
        (ByVal hHandle As Long, ByVal dwMilliseconds As Long, _
         ByVal bAlertable As Long) As Long
Private Declare PtrSafe Function CloseHandle Lib "kernel32" _
        (ByVal hObject As Long) As Long
Private Declare PtrSafe Function OpenProcess Lib "kernel32" _
        (ByVal dwDesiredAccess As Long, _
         ByVal bInheritHandle As Long, _
         ByVal dwProcessId As Long) As Long
Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" _
        Alias "ShellExecuteA" _
        (ByVal hwnd As Long, ByVal lpOperation As String, _
         ByVal lpFile As String, ByVal lpParameters As String, _
         ByVal lpDirectory As String, ByVal nShowCmd As Long) _
         As Long

Private Declare PtrSafe Function FindExecutable& Lib "shell32.dll" _
        Alias "FindExecutableA" _
        (ByVal lpFile As String, ByVal lpDirectory As String _
        , ByVal lpResult As String)
        
Private Declare PtrSafe Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
Private Declare Function WaitForSingleObjectEx Lib "kernel32" _
        (ByVal hHandle As Long, ByVal dwMilliseconds As Long, _
         ByVal bAlertable As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" _
        (ByVal hObject As Long) As Long
Private Declare Function OpenProcess Lib "kernel32" _
        (ByVal dwDesiredAccess As Long, _
         ByVal bInheritHandle As Long, _
         ByVal dwProcessId As Long) As Long
Private Declare Function ShellExecute Lib "shell32.dll" _
        Alias "ShellExecuteA" _
        (ByVal hwnd As Long, ByVal lpOperation As String, _
         ByVal lpFile As String, ByVal lpParameters As String, _
         ByVal lpDirectory As String, ByVal nShowCmd As Long) _
         As Long

Private Declare Function FindExecutable& Lib "shell32.dll" _
        Alias "FindExecutableA" _
        (ByVal lpFile As String, ByVal lpDirectory As String _
        , ByVal lpResult As String)
        
Private Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

'Private Declare Function WaitForSingleObjectEx Lib "kernel32" _
        (ByVal hHandle As Long, ByVal dwMilliseconds As Long, _
         ByVal bAlertable As Long) As Long
'Private Declare Function CloseHandle Lib "kernel32" _
        (ByVal hObject As Long) As Long
'Private Declare Function OpenProcess Lib "kernel32" _
        (ByVal dwDesiredAccess As Long, _
         ByVal bInheritHandle As Long, _
         ByVal dwProcessId As Long) As Long
'Private Declare Function ShellExecute Lib "shell32.dll" _
        Alias "ShellExecuteA" _
        (ByVal hwnd As Long, ByVal lpOperation As String, _
         ByVal lpFile As String, ByVal lpParameters As String, _
         ByVal lpDirectory As String, ByVal nShowCmd As Long) _
         As Long

'Private Declare Function FindExecutable& Lib "shell32.dll" _
        Alias "FindExecutableA" _
        (ByVal lpFile As String, ByVal lpDirectory As String _
        , ByVal lpResult As String)
        
'Private Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

'Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Const HWND_BOTTOM = 1
Const HWND_NOTOPMOST = -2
Const SWP_NOSIZE = &H1
Const SWP_NOMOVE = &H2
Const SWP_NOACTIVATE = &H10
Const SWP_SHOWWINDOW = &H40

#If VBA7 And Win64 Then
Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
#Else
Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
#End If
'Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long



'***********************************************************
'Function INIFileRead
'Purpose:         Read the Section sSection and the Key sKey
'                 of the file sINIFileName and return the
'                 value.
'Inputs:          sSection the section of the inifile to read
'                 sKey the Key of sSection to read of the inifile
'                 sINIFileName the INI file to read from
'                  sDefault the default value of sKey
'Outputs:         Value of the sSection:sKey in sINIfilename
'***********************************************************
Public Function INIFileRead(sSection As String, sKey As String, sINIFileName As String, Optional sDefault As Variant) As String

  
1: On Error GoTo ErrorHandler
  
  Const cSOURCE = cMODULENAME & ".INIFILEREAD]"
  
  Dim retval As String
  Dim Worked As Integer
    
2:    retval = String$(255, 0)
3:    Worked = GetPrivateProfileString(sSection, sKey, "", retval, Len(retval), sINIFileName)
4:    If Worked = 0 Then
5:          If Not IsMissing(sDefault) Then
6:            INIFileRead = sDefault
7:          Else
8:            INIFileRead = gstrNULL
9:          End If
10:    Else
11:        INIFileRead = Trim(Left(retval, InStr(retval, Chr(0)) - 1))
12:    End If
    
13: Exit Function
  
ErrorHandler:

  Dim nerrnum As Long
  Dim sDesc As String
  Dim sSource As String
  
14:  nerrnum = Err.Number
15:  sDesc = Err.Description
16:  sSource = cSOURCE & Err.Source
  
17:  Err.Raise nerrnum, sSource, sDesc
End Function

'***********************************************************
'Function INIFileWrite
'Purpose:         Write the Section sSection and the Key sKey
'                 and the value sValue of the file sINIFileName
'                 and return True or False when success
'                 value.
'Inputs:          sSection the section of the inifile to Write
'                 sKey the Key of sSection to Write to the inifile
'                 sINIFileName the INI file to Write to
'                 sValue the Value to write in sKey
'Outputs:         True or False based on Successful completion
'***********************************************************
Public Function INIFileWrite(sSection As String, sKey As String, sINIFileName As String, sValue As String) As Boolean

  
18: On Error GoTo ErrorHandler
  
  Const cSOURCE = cMODULENAME & ".INIFILEWRITE]"
  
  Dim retval As String
  Dim Worked As Integer
    
19:    retval = String$(255, 0)
20:    Worked = WritePrivateProfileString(sSection, sKey, sValue, sINIFileName)
21:    If Worked Then
22:        INIFileWrite = True
23:    Else
24:        INIFileWrite = False
25:    End If
    
26: Exit Function
  
ErrorHandler:

  Dim nerrnum As Long
  Dim sDesc As String
  Dim sSource As String
  
27:  nerrnum = Err.Number
28:  sDesc = Err.Description
29:  sSource = cSOURCE & Err.Source
  
30:  Err.Raise nerrnum, sSource, sDesc
  
End Function

''*********************************************************************************
''* Function:cmdResetPivotTableOptions
''* Purpose:
''* Inputs:  None
''* Outputs: True if no errors.
''*********************************************************************************
'Private Sub cmdResetPivotTableOptions()
'    On Error GoTo ErrorHandler
'    '* Find the pivot table options for this specific Pivot Table.
'    Dim sWorkSheetName As String
'    Dim sWorkbookName As String
'    Dim sResetWorksheetName As String
'    Dim oRow
'    Dim nPivotTableToModify As Integer
'    Dim nPivotTableCount As Integer
'    Dim sBeginRange As String
'    Dim sEndRange As String
'    Dim sFinalRange As String
'
'    Application.ScreenUpdating = False
'    Set gcolPivotDataFieldsReset = Nothing
'    sWorkbookName = ActiveWorkbook.Name
'    sWorkSheetName = ActiveSheet.Name
'    sResetWorksheetName = sWorkSheetName & "R"
'    If Not SheetExists(sWorkbookName, sResetWorksheetName) Then
'        MsgBox "Could not locate Reset Pivot Table Options.", vbExclamation, "Error in Reset Pivot Table Button"
'        Exit Sub
'    End If
'
'    Workbooks(sWorkbookName).Worksheets(sResetWorksheetName).Activate
'    With Workbooks(sWorkbookName).Worksheets(sResetWorksheetName).UsedRange
'        nPivotTableCount = 0
'        '* First, find the pivot table's name that matches the active one
'        nPivotTableToModify = 0
'        For Each oRow In .Rows
'            If Left$(Trim(oRow.Cells(1).Value), 14) = "PivotSheetName" Then
'                If UCase(Trim(RightOf(oRow.Cells(1).Value, "="))) = UCase(sWorkSheetName) Then
'                    nPivotTableToModify = Val(RightOf(LeftOf(Trim(oRow.Cells(1).Value), "="), "PivotSheetName"))
'                    Exit For
'                End If
'            End If
'        Next
'        nPivotTableCount = 0
'        sBeginRange = ""
'        sEndRange = ""
'        For Each oRow In .Rows
'            If Left$(Trim(oRow.Cells(1).Value), 11) = "[PivotTable" Then
'                nPivotTableCount = nPivotTableCount + 1
'                If nPivotTableCount = nPivotTableToModify Then
'                    sBeginRange = oRow.Cells(1).Address(RowAbsolute:=False, ColumnAbsolute:=False)
'                Else
'                    If sBeginRange <> "" Then
'                        sEndRange = oRow.Cells(1).Address(RowAbsolute:=False, ColumnAbsolute:=False)
'                        Exit For
'                    End If
'                End If
'            ElseIf InStr(1, oRow.Cells(1).Value, "End of Pivot Table", vbTextCompare) <> 0 Then
'                If sBeginRange <> "" Then
'                    sEndRange = oRow.Cells(1).Address(RowAbsolute:=False, ColumnAbsolute:=False)
'                    Exit For
'                End If
'            End If
'        Next
'    End With
'    If sBeginRange = "" Or sEndRange = "" Then
'        MsgBox "Could not locate Reset Pivot Table Options.", vbExclamation, "Error in Reset Pivot Table Button"
'        Exit Sub
'    End If
'    Workbooks(sWorkbookName).Sheets(sWorkSheetName).Activate
'    sFinalRange = sBeginRange & ":" & sEndRange
'    If Not ResetPivotTableOptions(sFinalRange, sWorkbookName, sResetWorksheetName, sWorkSheetName) Then
'        MsgBox "Could not locate Reset Pivot Table Options.", vbExclamation, "Error in Reset Pivot Table Button"
'        Exit Sub
'    End If
'    Exit Sub
'ErrorHandler:
'    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error in Reset Pivot Table Button"
'    Exit Sub
'End Sub

'*********************************************************************************
'* Function:cmdShowPivotWizard
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Sub cmdShowPivotWizard()

31:    On Error Resume Next
32:    With ActiveSheet.PivotTables(1)
33:        .PivotSelect "'" & .DataFields(1).Name & "'", xlLabelOnly
    If Err.Number Then 'Advanced SF
           .PivotSelect "'" & .DataFields(1).Name & "'"
    End If
    On Error GoTo ErrorHandler
    
34:    End With

    Dim vResponse
35:    vResponse = Application.Dialogs(xlDialogPivotTableWizard).Show
    
    'Freeze Panes
    'sRow = Trim$(Activsheet.PivotTables(1).DataBodyRange.ROW)
    
    'Activsheet.Range("A" & sRow).Select
    'ActiveWindow.FreezePanes = False
    'ActiveWindow.FreezePanes = True
    
36:    Exit Sub
ErrorHandler:
37:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error in Pivot Table Wizard Button"
38:    Exit Sub
End Sub

'***********************************************
'These Next two functions commented out because
'They are no longer needed.  However oneday they might be used
'***********************************************

'
'Private Function ResetPivotTableOptions(ByVal sRange As String, ByVal sWorkbook As String, ByVal sResetWorksheet As String, ByVal sPivotWorksheet As String) As Boolean
'    On Error GoTo ErrorHandler
'    ResetPivotTableOptions = False
'    Dim oRow
'    Dim sValue As String
'    Dim sTempValue As String
'    Dim colDataNames As New Collection
'    Dim colDataColumns As New Collection
'    Dim colDataFunctions As New Collection
'    Dim colDataShowDataAs As New Collection
'    Dim colPivotSuperHeaders As New Collection
'    Dim cPivotTable As New PivotTableClass
'    Dim colPivotFields As New Collection
'    Dim sFieldName As String
'    Dim sItem
'    Dim colPageColumns As New Collection
'    Dim colRowColumns As New Collection
'    Dim colColumnFields As New Collection
'    Dim cDataField As New DataFields
'    Dim nPivotFieldNumber As Integer
'    Dim sTest As String
'    Dim nNextLine As Integer
'    Dim sTempRange As String
'    Dim nLine As Integer
'    Dim sPivotColumn As String
'    Dim nIndex As Integer
'
'    'Initialize the Collection with Default Values
'    For Each oRow In Workbooks(sWorkbook).Worksheets(sResetWorksheet).Range(sRange).Rows
'        If InStr(1, oRow.Cells(1).Value, "=", vbTextCompare) <> 0 Then
'            sValue = RightOf(Trim(oRow.Cells(1).Value), "=")
'        End If
'        With cPivotTable
'            If InStr(1, oRow.Cells(1).Value, "PIVCOL=", vbTextCompare) <> 0 Then _
'                .PIVCol = sValue
'            If InStr(1, oRow.Cells(1).Value, "PIVPAGECOL=", vbTextCompare) <> 0 Then _
'                .PIVPageCol = sValue
'            If InStr(1, oRow.Cells(1).Value, "PIVROWCOL=", vbTextCompare) <> 0 Then _
'                .PIVRowCol = sValue
'            If InStr(1, oRow.Cells(1).Value, "PIVCOLUMNCOL=", vbTextCompare) <> 0 Then _
'                .PIVColumnCol = sValue
'            If InStr(1, oRow.Cells(1).Value, "PIVHEADERSPAN=", vbTextCompare) <> 0 Then _
'                .PivHeaderSpan = sValue
'        End With
'        If UCase(Left(Trim(oRow.Cells(1).Value), 8)) = "PIVSUPER" Then
'            sTempValue = Len(LeftOf(oRow.Cells(1).Value, "=")) - 8
'            sTempValue = Mid$(Trim(oRow.Cells(1).Value), 9, Val(sTempValue))
'            colPivotSuperHeaders.Add sValue, sTempValue
'        End If
'        If UCase(Left(Trim(oRow.Cells(1).Value), 11)) = "PIVDATANAME" Then
'            sTempValue = Len(LeftOf(oRow.Cells(1).Value, "=")) - 11
'            sTempValue = Mid$(Trim(oRow.Cells(1).Value), 12, Val(sTempValue))
'            colDataNames.Add sValue, sTempValue
'        End If
'        If UCase(Left(Trim(oRow.Cells(1).Value), 10)) = "PIVDATACOL" Then
'            sTempValue = Len(LeftOf(oRow.Cells(1).Value, "=")) - 10
'            sTempValue = Mid$(Trim(oRow.Cells(1).Value), 11, Val(sTempValue))
'            colDataColumns.Add sValue, sTempValue
'        End If
'        If UCase(Left(Trim(oRow.Cells(1).Value), 11)) = "PIVDATAFUNC" Then
'            sTempValue = Len(LeftOf(oRow.Cells(1).Value, "=")) - 11
'            sTempValue = Mid$(Trim(oRow.Cells(1).Value), 12, Val(sTempValue))
'            colDataFunctions.Add sValue, sTempValue
'        End If
'        If UCase(Left(Trim(oRow.Cells(1).Value), 10)) = "PIVDATASDA" Then
'            sTempValue = Len(LeftOf(oRow.Cells(1).Value, "=")) - 10
'            sTempValue = Mid$(Trim(oRow.Cells(1).Value), 11, Val(sTempValue))
'            colDataShowDataAs.Add sValue, sTempValue
'        End If
'    Next
'    If Not MergeDataFieldsReset(colDataNames, colDataColumns, colDataFunctions, colDataShowDataAs) Then Exit Function
'
'    If Not ClearPivotTableSheet(sWorkbook, sPivotWorksheet) Then
'        MsgBox "Could not Clear Pivot Table Options.", vbExclamation, "Error"
'        Exit Function
'    End If
'
'
'    Set colPivotFields = CreateCollection2(cPivotTable.PIVCol)
'
'    'Add the SuperHeaders back to the Worksheet
'    With Workbooks(sWorkbook).Worksheets(sPivotWorksheet)
'        nLine = 3
'        For Each sItem In colPivotSuperHeaders
'            nLine = nLine + 1
'            .Range("A" & Trim(Str(nLine))).EntireRow.Insert
'            .Range("A" & Trim(Str(nLine))).Value = Trim(sItem)
'            .Range("A" & Trim(Str(nLine))).Font.Bold = True
'            If Trim(cPivotTable.PivHeaderSpan) <> "" Then
'                sPivotColumn = ConvertNumber(Val(cPivotTable.PivHeaderSpan))
'                If Val(sPivotColumn) = 0 And Trim(sPivotColumn) <> "" Then
'                    .Range("A" & Trim(Str(nLine)) & ":" & Trim(sPivotColumn) & Trim(Str(nLine))).HorizontalAlignment = xlCenterAcrossSelection
'                    .Range("A" & Trim(Str(nLine)) & ":" & Trim(sPivotColumn) & Trim(Str(nLine))).MergeCells = True
'                Else
'                    .Range("A" & Trim(Str(nLine)) & ":" & "C" & Trim(Str(nLine))).HorizontalAlignment = xlCenterAcrossSelection
'                    .Range("A" & Trim(Str(nLine)) & ":" & "C" & Trim(Str(nLine))).MergeCells = True
'                End If
'            Else
'                .Range("A" & Trim(Str(nLine)) & ":" & "C" & Trim(Str(nLine))).HorizontalAlignment = xlCenterAcrossSelection
'                .Range("A" & Trim(Str(nLine)) & ":" & "C" & Trim(Str(nLine))).MergeCells = True
'            End If
'        Next
'
'        'Page Field Work
'        If Trim(cPivotTable.PIVPageCol) <> "" Then
'            Set colPageColumns = CreateCollection(cPivotTable.PIVPageCol)
'
'            'Now we need to add one row for each Page field we have
'            'so the page field does not overwrite our Header
'            For nIndex = 1 To colPageColumns.Count
'                Workbooks(sWorkbook).Worksheets(sPivotWorksheet).Range("A" & Trim$(nLine + 1)).EntireRow.Insert
'            Next
'
'            'Now Add the Page Fields
'            For Each sItem In colPageColumns
'                sTest = colPivotFields(sItem)
'                nPivotFieldNumber = Val(sTest)
'                .PivotTables(1).PivotFields(nPivotFieldNumber).Orientation = xlPageField
''                .PivotTables(1).PivotSelect .PivotTables(1).PageFields(.PivotTables(1).PageFields.Count), xlButton
''                sTempRange = Selection.Address(rowabsolute:=False, columnabsolute:=False)
''                Workbooks(sWorkbook).Worksheets(sPivotWorksheet).Range(sTempRange).EntireRow.Insert
'            Next
'        End If
'
'        'Add the Row Fields
'        If Trim(cPivotTable.PIVRowCol) <> "" Then
'            Set colRowColumns = CreateCollection(cPivotTable.PIVRowCol)
'            For Each sItem In colRowColumns
'                sTest = colPivotFields(sItem)
'                nPivotFieldNumber = Val(sTest)
'                .PivotTables(1).PivotFields(nPivotFieldNumber).Orientation = xlRowField
'            Next
'        End If
'
'        'Add the Column Fields
'        If Trim(cPivotTable.PIVColumnCol) <> "" Then
'            Set colColumnFields = CreateCollection(cPivotTable.PIVColumnCol)
'            For Each sItem In colColumnFields
'                sTest = colPivotFields(sItem)
'                nPivotFieldNumber = Val(sTest)
'                .PivotTables(1).PivotFields(nPivotFieldNumber).Orientation = xlColumnField
'            Next
'        End If
'
'        'Add the Data Fields
'        For Each cDataField In gcolPivotDataFieldsReset
'            On Error Resume Next
'            sTest = colPivotFields(Trim(Str(cDataField.ColumnNo)))
'            If Err Then
'                Err.Clear
'                On Error GoTo ErrorHandler
'                GoTo NextDataField
'            End If
'            On Error GoTo ErrorHandler
'            nPivotFieldNumber = Val(sTest)
'            .PivotTables(1).PivotFields(nPivotFieldNumber).Orientation = xlDataField
'            sFieldName = .PivotTables(1).DataFields(.PivotTables(1).DataFields.Count).Name
'            .PivotTables(1).DataFields(sFieldName).Function = cDataField.SummaryFunction
'            sFieldName = .PivotTables(1).DataFields(.PivotTables(1).DataFields.Count).Name
'            Select Case UCase(Trim(cDataField.SummaryFunctionDescription))
'                Case "XLAVERAGE0": .PivotTables(1).DataFields(sFieldName).NumberFormat = "#,##0"
'                Case "XLAVERAGE1", "XLAVERAGE": .PivotTables(1).DataFields(sFieldName).NumberFormat = "#,##0.0"
'                Case "XLAVERAGE2": .PivotTables(1).DataFields(sFieldName).NumberFormat = "#,##0.00"
'            End Select
'            If Trim(cDataField.Name) <> "" Then
'                .PivotTables(1).PivotFields(sFieldName).Name = cDataField.Name
'                sFieldName = cDataField.Name
'            End If
'            If cDataField.ShowDataAs <> xlNoAdditionalCalculation Then
'                .PivotTables(1).PivotFields(sFieldName).Calculation = cDataField.ShowDataAs
'            End If
'NextDataField:
'        Next
'
'        .PivotTables(1).PivotFields("Data").Orientation = xlColumnField
'
'        .Range("A1").Select
'
'        .PivotTables(1).PivotSelect "Data", xlButton
'
'    End With
'
'    ResetPivotTableOptions = True
'    Exit Function
'ErrorHandler:
'    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error in Reset Pivot Table Button"
'    Exit Function
'End Function
'Private Function MergeDataFieldsReset(ByVal colDataNames As Collection, ByVal colDataColumns As Collection, ByVal colDataFunctions As Collection, ByVal colDataShowDataAs As Collection) As Boolean
'    On Error GoTo ErrorHandler
'    MergeDataFieldsReset = False
'    Dim cPivotDataFields As New DataFields
'    Dim nCount As Integer
'    Dim sTest As String
'    Dim nShowDataAs As Integer
'    Dim nSummaryFunction As Integer
'    Dim nDataColumnsCount As Integer
'
'    'Set gcolPivotDataFieldsReset = Nothing
'
'    nCount = 0
'    nDataColumnsCount = 0
'    Do
'        nCount = nCount + 1
'        If nDataColumnsCount = colDataColumns.Count Then Exit Do
'        Set cPivotDataFields = New DataFields
'        On Error Resume Next
'        cPivotDataFields.ColumnNo = colDataColumns(Trim(Str(nCount)))
'        If Err Then
'            Err.Clear
'            On Error GoTo ErrorHandler
'            GoTo NextPivotField
'        End If
'        nDataColumnsCount = nDataColumnsCount + 1
'        On Error Resume Next
'        sTest = colDataNames(Trim(Str(nCount)))
'        If Err Then
'            Err.Clear
'            On Error GoTo ErrorHandler
'        Else
'            On Error GoTo ErrorHandler
'            cPivotDataFields.Name = sTest
'        End If
'
'        On Error Resume Next
'        sTest = ""
'        sTest = colDataFunctions(Trim(Str(nCount)))
'        If Err Then Err.Clear
'        On Error GoTo ErrorHandler
'        nSummaryFunction = GetSummaryFunction(sTest)
'        cPivotDataFields.SummaryFunction = nSummaryFunction
'        If Trim(sTest) = "" Then
'            cPivotDataFields.SummaryFunctionDescription = "xlSum"
'        Else
'            cPivotDataFields.SummaryFunctionDescription = sTest
'        End If
'        On Error Resume Next
'        sTest = ""
'        sTest = colDataShowDataAs(Trim(Str(nCount)))
'        If Err Then Err.Clear
'        On Error GoTo ErrorHandler
'        nShowDataAs = GetShowDataAsOption(sTest)
'        cPivotDataFields.ShowDataAs = nShowDataAs
'        gcolPivotDataFieldsReset.Add cPivotDataFields, Trim(Str(nCount))
'NextPivotField:
'    Loop
'
'    MergeDataFieldsReset = True
'    Exit Function
'ErrorHandler:
'    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error in Reset Pivot Table Button"
'    Exit Function
'End Function

Private Function CreateCollection2(ByVal sTempParse As String) As Collection
39:    On Error GoTo ErrorHandler
    Dim sTest As String
40:    Set CreateCollection2 = Nothing
    Dim colTempCollection As New Collection
    Dim nCollectionCount As Integer
    
41:    nCollectionCount = 0
42:    Do While InStr(1, sTempParse, ",", vbTextCompare) <> 0
43:        nCollectionCount = nCollectionCount + 1
44:        colTempCollection.Add nCollectionCount, LeftOf(sTempParse, ",", False)
45:        sTempParse = RightOf(sTempParse, ",", False)
46:    Loop
47:    nCollectionCount = nCollectionCount + 1
48:    colTempCollection.Add nCollectionCount, sTempParse
49:    Set CreateCollection2 = colTempCollection
50:    Exit Function
ErrorHandler:
51:    Set CreateCollection2 = Nothing
52:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error in Reset Pivot Table Button"
53:    Exit Function
End Function


'**************************************
'*  LeftOf$:
'*    Purpose:  returns a string of everthing to the left of a sub string
'*    Inputs:   sLeft is the string
'*              sOf is the Substring
'*    Outputs:  everything to the left of the substring or
'*              an empty string if the substring is not in the string
'**************************************
Private Function LeftOf$(sLeft As String, sOf As String, Optional bCaseSensitive As Boolean = False)
54:  LeftOf$ = ""
55:  If InStr(1, sLeft, sOf, vbTextCompare) > 0 Then
56:    LeftOf$ = Left$(sLeft, InStr(1, sLeft, sOf, IIf(Not bCaseSensitive, vbTextCompare, vbBinaryCompare)) - 1)
57:  End If
End Function

'**************************************
'*  RightOf$:
'*    Purpose:  returns a string of everthing to the right of a sub string
'*    Inputs:   sRight is the string
'*              sOf is the Substring
'*    Outputs:  everything to the right of the substring or
'*              an empty string if the substring is not in the string
'**************************************
Private Function RightOf$(sRight As String, sOf As String, Optional bCaseSensitive As Boolean)
58:  RightOf$ = ""
59:  If InStr(1, sRight, sOf, vbTextCompare) > 0 Then
60:    RightOf$ = Mid$(sRight, InStr(1, sRight, sOf, vbTextCompare) + Len(sOf), Len(sRight))
61:  End If
End Function

'*********************************************************************************
'* Function:SearchandReplace
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function SearchandReplace(ByVal sSource As String, ByVal sSearch As String, ByVal sReplace) As String
62:    On Error GoTo ErrorHandler
63:    SearchandReplace = ""
    Dim sTempSearch As String
    Dim sNewString As String
    Dim sPart As String
64:    sTempSearch = sSource
65:    sNewString = ""
66:    Do While InStr(1, sTempSearch, sSearch, vbTextCompare) <> 0
67:        sPart = LeftOf(sTempSearch, sSearch) & sReplace
68:        sTempSearch = RightOf(sTempSearch, sSearch)
69:        sNewString = sNewString & sPart
70:    Loop
71:    sNewString = sNewString & sTempSearch
72:    SearchandReplace = sNewString
73:    Exit Function
ErrorHandler:
74:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
75:    Exit Function
End Function

'*********************************************************************************
'* Function:CreateCollection
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function CreateCollection(ByVal sTempParse As String) As Collection
76:    On Error GoTo ErrorHandler
    Dim sTest As String
77:    Set CreateCollection = Nothing
    Dim colTempCollection As New Collection
78:    Do While InStr(1, sTempParse, ",", vbTextCompare) <> 0
79:        colTempCollection.Add LeftOf(sTempParse, ",", False), LeftOf(sTempParse, ",", False)
80:        sTempParse = RightOf(sTempParse, ",", False)
81:    Loop
82:    colTempCollection.Add sTempParse, sTempParse
83:    Set CreateCollection = colTempCollection
84:    Exit Function
ErrorHandler:
85:    Set CreateCollection = Nothing
86:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
87:    Exit Function
End Function

'*********************************************************************************
'* Function:GetNextRangeLetter
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function GetNextRangeLetter(ByVal sLetter As String) As String
88:    GetNextRangeLetter = ""
    Dim sTempLetter As String
    Dim sNextLetter As String
    
89:    Select Case Len(sLetter)
        Case 1
90:            If sLetter = "Z" Then
91:                sNextLetter = "AA"
92:            Else
93:                sNextLetter = Chr((Asc(sLetter) + 1))
94:            End If
95:        Case Else
96:            If Mid$(sLetter, 2, 1) = "Z" Then
97:                sNextLetter = Chr(Asc(Mid$(sLetter, 2, 1)) + 1) & "A"
98:            Else
99:                sNextLetter = Mid$(sLetter, 1, 1) & Chr(Asc(Mid$(sLetter, 2, 1)) + 1)
100:            End If
101:    End Select
102:    GetNextRangeLetter = sNextLetter
End Function

'*********************************************************************************
'* Function:GetRange
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function GetRange(ByVal sRange As String, ByVal nPassback As Integer) As String
103:    GetRange = ""
    Dim sBeginRange As String
    Dim sEndRange As String
    Dim sBeginLetter As String
    Dim sEndLetter As String
    Dim sBeginNumber As String
    Dim sEndNumber As String
    Dim x As Integer
104:    sBeginRange = Left$(sRange, InStr(1, sRange, ":", vbTextCompare) - 1)
105:    sEndRange = Right$(sRange, Len(sRange) - InStr(1, sRange, ":", vbTextCompare))
    
106:    For x = 1 To Len(sBeginRange)
107:        If Asc(Mid$(sBeginRange, x, 1)) >= 65 Then
108:            sBeginLetter = sBeginLetter & Mid$(sBeginRange, x, 1)
109:        Else
110:            sBeginNumber = sBeginNumber & Mid$(sBeginRange, x, 1)
111:        End If
112:    Next x
113:    For x = 1 To Len(sEndRange)
114:        If Asc(Mid$(sEndRange, x, 1)) >= 65 Then
115:            sEndLetter = sEndLetter & Mid$(sEndRange, x, 1)
116:        Else
117:            sEndNumber = sEndNumber & Mid$(sEndRange, x, 1)
118:        End If
119:    Next x
120:    Select Case nPassback
        Case 1
121:            GetRange = sBeginLetter
122:        Case 2
123:            GetRange = sBeginNumber
124:        Case 3
125:            GetRange = sEndLetter
126:        Case 4
127:            GetRange = sEndNumber
128:    End Select
End Function

'*********************************************************************************
'* Function:SheetExists
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function SheetExists(ByVal sWorkbook As String, ByVal sSheetName As String) As Boolean
129:    On Error GoTo ErrorHandler
130:    SheetExists = False
131:    Workbooks(sWorkbook).Sheets(sSheetName).Activate
132:    SheetExists = True
133:    Exit Function
ErrorHandler:
134:    If Err.Number = 9 Then
135:        SheetExists = False
136:        Exit Function
137:    Else
138:        MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
139:    End If
End Function

'*********************************************************************************
'* Function:ConvertNumber
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function ConvertNumber(nIndex As Integer) As String
140:    On Error GoTo ErrorHandler
141:    ConvertNumber = ""
142:    Select Case nIndex
        Case 1 To 26
143:            ConvertNumber = Chr$(64 + nIndex)
144:        Case 27 To 52
145:            ConvertNumber = "A" & Chr$(64 + nIndex - 26)
146:        Case 53 To 78
147:            ConvertNumber = "B" & Chr$(64 + nIndex - 52)
148:        Case 79 To 104
149:            ConvertNumber = "C" & Chr$(64 + nIndex - 78)
150:        Case 105 To 130
151:            ConvertNumber = "D" & Chr$(64 + nIndex - 104)
152:        Case 131 To 156
153:            ConvertNumber = "E" & Chr$(64 + nIndex - 130)
154:        Case 157 To 182
155:            ConvertNumber = "F" & Chr$(64 + nIndex - 156)
156:        Case 183 To 208
157:            ConvertNumber = "G" & Chr$(64 + nIndex - 182)
158:        Case 209 To 234
159:            ConvertNumber = "H" & Chr$(64 + nIndex - 208)
160:        Case 235 To 260
161:            ConvertNumber = "I" & Chr$(64 + nIndex - 234)
162:    End Select
163:    Exit Function
ErrorHandler:
164:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
165:    Exit Function
End Function

'*********************************************************************************
'* Function:GetSummaryFunction
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function GetSummaryFunction(ByVal sSummaryFunction As String) As Integer
166:    On Error GoTo ErrorHandler
167:    GetSummaryFunction = XlConsolidationFunction.xlsxum
168:    Select Case Trim(UCase(sSummaryFunction))
        Case "XLAVERAGE":   GetSummaryFunction = xlAverage
169:        Case "XLAVERAGE0":  GetSummaryFunction = xlAverage
170:        Case "XLAVERAGE1":  GetSummaryFunction = xlAverage
171:        Case "XLAVERAGE2":  GetSummaryFunction = xlAverage
172:        Case "XLCOUNT":     GetSummaryFunction = xlCount
173:        Case "XLCOUNTNUMS": GetSummaryFunction = xlCountNums
174:        Case "XLMAX":       GetSummaryFunction = xlMax
175:        Case "XLMIN":       GetSummaryFunction = xlMin
176:        Case "XLPRODUCT":   GetSummaryFunction = xlProduct
177:        Case "XLSTDEV":     GetSummaryFunction = xlStDev
178:        Case "XLSTDEVP":    GetSummaryFunction = xlStDevP
179:        Case "XLSUM":       GetSummaryFunction = xlSum
180:        Case "XLVAR":       GetSummaryFunction = xlVar
181:        Case "XLVARP":      GetSummaryFunction = xlVarP
182:    End Select
183:    Exit Function
ErrorHandler:
184:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
185:    Exit Function
End Function

'*********************************************************************************
'* Function:GetShowDataAsOption
'* Purpose:
'* Inputs:  None
'* Outputs: True if no errors.
'*********************************************************************************
Private Function GetShowDataAsOption(ByVal sShowDataAs As String) As Integer
186:    On Error GoTo ErrorHandler
187:    GetShowDataAsOption = xlNoAdditionalCalculation
188:    Select Case Trim(UCase(sShowDataAs))
        Case "XLPERCENTOFCOLUMN": GetShowDataAsOption = xlPercentOfColumn
189:        Case "XLPERCENTOFROW":    GetShowDataAsOption = xlPercentOfRow
190:    End Select
191:    Exit Function
ErrorHandler:
192:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
193:    Exit Function
End Function
Public Function ClearPivotTableSheet(ByVal sWorkbook As String, ByVal sPivotTable As String) As Boolean
194:    On Error GoTo ErrorHandler
195:    ClearPivotTableSheet = False
    Dim nPageFieldsCount As Integer
    Dim colRanges As New Collection
    Dim sRange
    Dim oPivot As Excel.PivotField
    Dim sTempName As String
    Dim sBeginSuperHeaderRange As String
    Dim sEndSuperHeaderRange As String
    Dim nDataFieldCounter As Integer
    
196:    With Workbooks(sWorkbook).Sheets(sPivotTable)
        '* Delete Page Fields
197:        sTempName = ""
198:        For Each oPivot In .PivotTables(1).PageFields
            'If sTempName = "" Then sTempName = oPivot.Name
            '.PivotTables(1).PivotSelect sTempName, xlButton
            'sRange = Selection.Address(rowabsolute:=False, columnabsolute:=False)
            'Selection.Delete
            'colRanges.Add sRange
            '.PivotTables(1).PivotFields(oPivot.Name).Orientation = xlHidden
199:            oPivot.Orientation = xlHidden
200:        Next
        
201:        For Each sRange In colRanges
202:            .Range(sRange).EntireRow.Delete
203:        Next
        
204:        Set colRanges = Nothing
        
        '* Delete the section between the buttons and the pivot table
205:        .PivotTables(1).PivotSelect "", xlDataAndLabel
        'Select Case .PivotTables(1).DataFields.Count
        '    Case 0: .PivotTables(1).PivotSelect .DataFields(1).Name, xlLabelOnly
        '    Case 1: .PivotTables(1).PivotSelect .DataFields(1).Name, xlLabelOnly
        '    Case Else: .PivotTables(1).PivotSelect "Data", xlLabelOnly
        'End Select
206:        sBeginSuperHeaderRange = "A4"
207:        sEndSuperHeaderRange = Selection.Address(RowAbsolute:=False, ColumnAbsolute:=False)
208:        sEndSuperHeaderRange = GetRange(sEndSuperHeaderRange, 1) & Trim(Str(GetRange(sEndSuperHeaderRange, 2) - 1))
209:        .Range(sBeginSuperHeaderRange & ":" & sEndSuperHeaderRange).EntireRow.Delete
210:        .Range(sBeginSuperHeaderRange).EntireRow.Insert
211:        .Range(sBeginSuperHeaderRange).EntireRow.Insert
        
        '* Delete Row Fields
212:        For Each oPivot In .PivotTables(1).RowFields
213:            If UCase(oPivot.Name) <> "DATA" Then
                '.PivotTables(1).PivotSelect oPivot.Name, xlButton
                'Selection.Delete
                '.PivotTables(1).PivotFields(oPivot.Name).Orientation = xlHidden
214:                oPivot.Orientation = xlHidden
215:            End If
216:        Next
        '* Delete Column Fields
217:        For Each oPivot In .PivotTables(1).ColumnFields
218:            If UCase(oPivot.Name) <> "DATA" Then
                '.PivotTables(1).PivotSelect oPivot.Name, xlButton
                'Selection.Delete
                '.PivotTables(1).PivotFields(oPivot.Name).Orientation = xlHidden
219:                oPivot.Orientation = xlHidden
220:            End If
221:        Next
        
        '* Delete Data Fields
222:        For nDataFieldCounter = 1 To .PivotTables(1).DataFields.Count
            'Delete the first item position wise in the DataFields
223:            On Error Resume Next
224:            .PivotTables(1).PivotSelect "'" & .PivotTables(1).DataFields(1).Name & "'", xlDataAndLabel
225:            If Err.Number = 0 Then
226:                Selection.Delete
227:            Else
228:                .PivotTables(1).DataFields(1).Orientation = xlHidden
229:            End If
230:            If .PivotTables(1).DataFields.Count = 0 Then
231:                Exit For
232:            End If
            
233:        Next
        'For Each oPivot In .PivotTables(1).DataFields
        '    On Error Resume Next
        '    oPivot.Orientation = xlHidden
        '    If Err.Number Then
        '        On Error GoTo ErrorHandler
        '        .PivotTables(1).PivotSelect oPivot.Name, xlDataAndLabel
        '        Selection.Delete
        '    End If
        'Next
        
234:        On Error GoTo ErrorHandler
235:    End With
236:    ClearPivotTableSheet = True
237:    Exit Function
ErrorHandler:
238:    MsgBox Err.Number & ": " & Err.Description, vbExclamation, "Error"
239:    Exit Function
End Function


Sub BackToCoverSheet()
'
' BackToCoverSheet Macro
' Macro recorded 12/23/99 by Internal Support
'

'
        
240:    Sheets(gcCoverSheetName).Select
End Sub
Public Sub HideBackToCoverSheet()

    Dim ctl As CommandBarControl
    
241:    On Error Resume Next
242:    For Each ctl In Application.CommandBars("Standard").Controls
    
243:        If StrComp(ctl.Caption, "Back To Contents", vbTextCompare) = 0 Then
244:            If ctl.Enabled Then
245:                ctl.Enabled = False
246:            End If
247:            DoEvents
248:            Exit Sub
249:        End If
250:    Next
    
End Sub

Public Sub ShowBackToCoverSheet()

    Dim ctl As CommandBarControl
    
251:    For Each ctl In Application.CommandBars("Standard").Controls
    
252:        If StrComp(ctl.Caption, "Back To Contents", vbTextCompare) = 0 Then
253:            If Not ctl.Enabled Then
254:                ctl.Enabled = True
255:            End If
256:            DoEvents
257:            Exit Sub
258:        End If
259:    Next
    
End Sub

'Mod0005: row numbers bumped up +1 to even rows vs. odd rows
Public Sub lblWhatsThis1_Click()
260:    DisplayWhatsThis "4"
End Sub
Public Sub lblWhatsThis2_Click()
261:    DisplayWhatsThis "6"
End Sub
Public Sub lblWhatsThis3_Click()
262:    DisplayWhatsThis "8"
End Sub
Public Sub lblWhatsThis4_Click()
263:    DisplayWhatsThis "10"
End Sub
Public Sub lblWhatsThis5_Click()
264:    DisplayWhatsThis "12"
End Sub
Public Sub lblWhatsThis6_Click()
265:    DisplayWhatsThis "14"
End Sub
Public Sub lblWhatsThis7_Click()
266:    DisplayWhatsThis "16"
End Sub
Public Sub lblWhatsThis8_Click()
267:    DisplayWhatsThis "18"
End Sub
Public Sub lblWhatsThis9_Click()
268:    DisplayWhatsThis "20"
End Sub
Public Sub lblWhatsThis10_Click()
269:    DisplayWhatsThis "22"
End Sub
Public Sub lblWhatsThis11_Click()
270:    DisplayWhatsThis "24"
End Sub
Public Sub lblWhatsThis12_Click()
271:    DisplayWhatsThis "26"
End Sub
Public Sub lblWhatsThis13_Click()
272:    DisplayWhatsThis "28"
End Sub
Public Sub lblWhatsThis14_Click()
273:    DisplayWhatsThis "30"
End Sub
Public Sub lblWhatsThis15_Click()
274:    DisplayWhatsThis "32"
End Sub
Public Sub lblWhatsThis16_Click()
275:    DisplayWhatsThis "34"
End Sub
Public Sub lblWhatsThis17_Click()
276:    DisplayWhatsThis "36"
End Sub
Public Sub lblWhatsThis18_Click()
277:    DisplayWhatsThis "38"
End Sub
Public Sub lblWhatsThis19_Click()
278:    DisplayWhatsThis "40"
End Sub
Public Sub lblWhatsThis20_Click()
279:    DisplayWhatsThis "42"
End Sub
Public Sub lblWhatsThis21_Click()
280:    DisplayWhatsThis "44"
End Sub
Public Sub lblWhatsThis22_Click()
281:    DisplayWhatsThis "46"
End Sub
Public Sub lblWhatsThis23_Click()
282:    DisplayWhatsThis "48"
End Sub
Public Sub lblWhatsThis24_Click()
283:    DisplayWhatsThis "50"
End Sub
Public Sub lblWhatsThis25_Click()
284:    DisplayWhatsThis "52"
End Sub
Public Sub lblWhatsThis26_Click()
    DisplayWhatsThis "54"
End Sub
Public Sub lblWhatsThis27_Click()
    DisplayWhatsThis "56"
End Sub
Public Sub lblWhatsThis28_Click()
    DisplayWhatsThis "58"
End Sub
Public Sub lblWhatsThis29_Click()
    DisplayWhatsThis "60"
End Sub
Public Sub lblWhatsThis30_Click()
    DisplayWhatsThis "62"
End Sub
Public Sub lblWhatsThis31_Click()
    DisplayWhatsThis "64"
End Sub
Public Sub lblWhatsThis32_Click()
    DisplayWhatsThis "66"
End Sub
Public Sub lblWhatsThis33_Click()
    DisplayWhatsThis "68"
End Sub
Public Sub lblWhatsThis34_Click()
    DisplayWhatsThis "70"
End Sub
Public Sub lblWhatsThis35_Click()
    DisplayWhatsThis "72"
End Sub
Public Sub lblWhatsThis36_Click()
    DisplayWhatsThis "74"
End Sub
Public Sub lblWhatsThis37_Click()
    DisplayWhatsThis "76"
End Sub
Public Sub lblWhatsThis38_Click()
    DisplayWhatsThis "78"
End Sub
Public Sub lblWhatsThis39_Click()
    DisplayWhatsThis "80"
End Sub
Public Sub lblWhatsThis40_Click()
    DisplayWhatsThis "82"
End Sub
Public Sub lblWhatsThis41_Click()
    DisplayWhatsThis "84"
End Sub
Public Sub lblWhatsThis42_Click()
    DisplayWhatsThis "86"
End Sub
Public Sub lblWhatsThis43_Click()
    DisplayWhatsThis "88"
End Sub
Public Sub lblWhatsThis44_Click()
    DisplayWhatsThis "90"
End Sub
Public Sub lblWhatsThis45_Click()
    DisplayWhatsThis "92"
End Sub
Public Sub lblWhatsThis46_Click()
    DisplayWhatsThis "94"
End Sub
Public Sub lblWhatsThis47_Click()
    DisplayWhatsThis "96"
End Sub
Public Sub lblWhatsThis48_Click()
    DisplayWhatsThis "98"
End Sub
Public Sub lblWhatsThis49_Click()
    DisplayWhatsThis "100"
End Sub
Public Sub lblWhatsThis50_Click()
    DisplayWhatsThis "102"
End Sub
Public Sub lblWhatsThis51_Click()
    DisplayWhatsThis "104"
End Sub
Public Sub lblWhatsThis52_Click()
    DisplayWhatsThis "106"
End Sub
Public Sub lblWhatsThis53_Click()
    DisplayWhatsThis "108"
End Sub
Public Sub lblWhatsThis54_Click()
    DisplayWhatsThis "110"
End Sub
Public Sub lblWhatsThis55_Click()
    DisplayWhatsThis "112"
End Sub
Public Sub lblWhatsThis56_Click()
    DisplayWhatsThis "114"
End Sub
Public Sub lblWhatsThis57_Click()
    DisplayWhatsThis "116"
End Sub
Public Sub lblWhatsThis58_Click()
    DisplayWhatsThis "118"
End Sub
Public Sub lblWhatsThis59_Click()
    DisplayWhatsThis "120"
End Sub
Public Sub lblWhatsThis60_Click()
    DisplayWhatsThis "122"
End Sub
Public Sub lblWhatsThis61_Click()
    DisplayWhatsThis "124"
End Sub
Public Sub lblWhatsThis62_Click()
    DisplayWhatsThis "126"
End Sub
Public Sub lblWhatsThis63_Click()
    DisplayWhatsThis "128"
End Sub
Public Sub lblWhatsThis64_Click()
    DisplayWhatsThis "130"
End Sub
Public Sub lblWhatsThis65_Click()
    DisplayWhatsThis "132"
End Sub
Public Sub lblWhatsThis66_Click()
    DisplayWhatsThis "134"
End Sub
Public Sub lblWhatsThis67_Click()
    DisplayWhatsThis "136"
End Sub
Public Sub lblWhatsThis68_Click()
    DisplayWhatsThis "138"
End Sub
Public Sub lblWhatsThis69_Click()
    DisplayWhatsThis "140"
End Sub
Public Sub lblWhatsThis70_Click()
    DisplayWhatsThis "142"
End Sub
Public Sub lblWhatsThis71_Click()
    DisplayWhatsThis "144"
End Sub
Public Sub lblWhatsThis72_Click()
    DisplayWhatsThis "146"
End Sub
Public Sub lblWhatsThis73_Click()
    DisplayWhatsThis "148"
End Sub
Public Sub lblWhatsThis74_Click()
    DisplayWhatsThis "150"
End Sub
Public Sub lblWhatsThis75_Click()
    DisplayWhatsThis "152"
End Sub
Public Sub lblWhatsThis76_Click()
    DisplayWhatsThis "154"
End Sub
Public Sub lblWhatsThis77_Click()
    DisplayWhatsThis "156"
End Sub
Public Sub lblWhatsThis78_Click()
    DisplayWhatsThis "158"
End Sub
Public Sub lblWhatsThis79_Click()
    DisplayWhatsThis "160"
End Sub
Public Sub lblWhatsThis80_Click()
    DisplayWhatsThis "162"
End Sub
Public Sub lblWhatsThis81_Click()
    DisplayWhatsThis "164"
End Sub
Public Sub lblWhatsThis82_Click()
    DisplayWhatsThis "166"
End Sub
Public Sub lblWhatsThis83_Click()
    DisplayWhatsThis "168"
End Sub
Public Sub lblWhatsThis84_Click()
    DisplayWhatsThis "170"
End Sub
Public Sub lblWhatsThis85_Click()
    DisplayWhatsThis "172"
End Sub
Public Sub lblWhatsThis86_Click()
    DisplayWhatsThis "174"
End Sub
Public Sub lblWhatsThis87_Click()
    DisplayWhatsThis "176"
End Sub
Public Sub lblWhatsThis88_Click()
    DisplayWhatsThis "178"
End Sub
Public Sub lblWhatsThis89_Click()
    DisplayWhatsThis "180"
End Sub
Public Sub lblWhatsThis90_Click()
    DisplayWhatsThis "182"
End Sub
Public Sub lblWhatsThis91_Click()
    DisplayWhatsThis "184"
End Sub
Public Sub lblWhatsThis92_Click()
    DisplayWhatsThis "186"
End Sub
Public Sub lblWhatsThis93_Click()
    DisplayWhatsThis "188"
End Sub
Public Sub lblWhatsThis94_Click()
    DisplayWhatsThis "190"
End Sub
Public Sub lblWhatsThis95_Click()
    DisplayWhatsThis "192"
End Sub
Public Sub lblWhatsThis96_Click()
    DisplayWhatsThis "194"
End Sub
Public Sub lblWhatsThis97_Click()
    DisplayWhatsThis "196"
End Sub
Public Sub lblWhatsThis98_Click()
    DisplayWhatsThis "198"
End Sub
Public Sub lblWhatsThis99_Click()
    DisplayWhatsThis "200"
End Sub
Public Sub lblWhatsThis100_Click()
    DisplayWhatsThis "202"
End Sub
Public Sub lblWhatsThis101_Click()
    DisplayWhatsThis "204"
End Sub
Public Sub lblWhatsThis102_Click()
    DisplayWhatsThis "206"
End Sub
Public Sub lblWhatsThis103_Click()
    DisplayWhatsThis "208"
End Sub
Public Sub lblWhatsThis104_Click()
    DisplayWhatsThis "210"
End Sub
Public Sub lblWhatsThis105_Click()
    DisplayWhatsThis "212"
End Sub
Public Sub lblWhatsThis106_Click()
    DisplayWhatsThis "214"
End Sub
Public Sub lblWhatsThis107_Click()
    DisplayWhatsThis "216"
End Sub
Public Sub lblWhatsThis108_Click()
    DisplayWhatsThis "218"
End Sub
Public Sub lblWhatsThis109_Click()
    DisplayWhatsThis "220"
End Sub
Public Sub lblWhatsThis110_Click()
    DisplayWhatsThis "222"
End Sub
Public Sub lblWhatsThis111_Click()
    DisplayWhatsThis "224"
End Sub
Public Sub lblWhatsThis112_Click()
    DisplayWhatsThis "226"
End Sub
Public Sub lblWhatsThis113_Click()
    DisplayWhatsThis "228"
End Sub
Public Sub lblWhatsThis114_Click()
    DisplayWhatsThis "230"
End Sub
Public Sub lblWhatsThis115_Click()
    DisplayWhatsThis "232"
End Sub
Public Sub lblWhatsThis116_Click()
    DisplayWhatsThis "234"
End Sub
Public Sub lblWhatsThis117_Click()
    DisplayWhatsThis "236"
End Sub
Public Sub lblWhatsThis118_Click()
    DisplayWhatsThis "238"
End Sub
Public Sub lblWhatsThis119_Click()
    DisplayWhatsThis "240"
End Sub
Public Sub lblWhatsThis120_Click()
    DisplayWhatsThis "242"
End Sub
Public Sub lblWhatsThis121_Click()
    DisplayWhatsThis "244"
End Sub
Public Sub lblWhatsThis122_Click()
    DisplayWhatsThis "246"
End Sub
Public Sub lblWhatsThis123_Click()
    DisplayWhatsThis "248"
End Sub
Public Sub lblWhatsThis124_Click()
    DisplayWhatsThis "250"
End Sub
Public Sub lblWhatsThis125_Click()
    DisplayWhatsThis "252"
End Sub
Public Sub lblWhatsThis126_Click()
    DisplayWhatsThis "254"
End Sub
Public Sub lblWhatsThis127_Click()
    DisplayWhatsThis "256"
End Sub
Public Sub lblWhatsThis128_Click()
    DisplayWhatsThis "258"
End Sub
Public Sub lblWhatsThis129_Click()
    DisplayWhatsThis "260"
End Sub
Public Sub lblWhatsThis130_Click()
    DisplayWhatsThis "262"
End Sub
Public Sub lblWhatsThis131_Click()
    DisplayWhatsThis "264"
End Sub
Public Sub lblWhatsThis132_Click()
    DisplayWhatsThis "266"
End Sub
Public Sub lblWhatsThis133_Click()
    DisplayWhatsThis "268"
End Sub
Public Sub lblWhatsThis134_Click()
    DisplayWhatsThis "270"
End Sub
Public Sub lblWhatsThis135_Click()
    DisplayWhatsThis "272"
End Sub
Public Sub lblWhatsThis136_Click()
    DisplayWhatsThis "274"
End Sub
Public Sub lblWhatsThis137_Click()
    DisplayWhatsThis "276"
End Sub
Public Sub lblWhatsThis138_Click()
    DisplayWhatsThis "278"
End Sub
Public Sub lblWhatsThis139_Click()
    DisplayWhatsThis "280"
End Sub
Public Sub lblWhatsThis140_Click()
    DisplayWhatsThis "282"
End Sub
Public Sub lblWhatsThis141_Click()
    DisplayWhatsThis "284"
End Sub
Public Sub lblWhatsThis142_Click()
    DisplayWhatsThis "286"
End Sub
Public Sub lblWhatsThis143_Click()
    DisplayWhatsThis "288"
End Sub
Public Sub lblWhatsThis144_Click()
    DisplayWhatsThis "290"
End Sub
Public Sub lblWhatsThis145_Click()
    DisplayWhatsThis "292"
End Sub
Public Sub lblWhatsThis146_Click()
    DisplayWhatsThis "294"
End Sub
Public Sub lblWhatsThis147_Click()
    DisplayWhatsThis "296"
End Sub
Public Sub lblWhatsThis148_Click()
    DisplayWhatsThis "298"
End Sub
Public Sub lblWhatsThis149_Click()
    DisplayWhatsThis "300"
End Sub
Public Sub lblWhatsThis150_Click()
    DisplayWhatsThis "302"
End Sub
Public Sub lblWhatsThis151_Click()
    DisplayWhatsThis "304"
End Sub
Public Sub lblWhatsThis152_Click()
    DisplayWhatsThis "306"
End Sub
Public Sub lblWhatsThis153_Click()
    DisplayWhatsThis "308"
End Sub
Public Sub lblWhatsThis154_Click()
    DisplayWhatsThis "310"
End Sub
Public Sub lblWhatsThis155_Click()
    DisplayWhatsThis "312"
End Sub
Public Sub lblWhatsThis156_Click()
    DisplayWhatsThis "314"
End Sub
Public Sub lblWhatsThis157_Click()
    DisplayWhatsThis "316"
End Sub
Public Sub lblWhatsThis158_Click()
    DisplayWhatsThis "318"
End Sub
Public Sub lblWhatsThis159_Click()
    DisplayWhatsThis "320"
End Sub
Public Sub lblWhatsThis160_Click()
    DisplayWhatsThis "322"
End Sub
Public Sub lblWhatsThis161_Click()
    DisplayWhatsThis "324"
End Sub
Public Sub lblWhatsThis162_Click()
    DisplayWhatsThis "326"
End Sub
Public Sub lblWhatsThis163_Click()
    DisplayWhatsThis "328"
End Sub
Public Sub lblWhatsThis164_Click()
    DisplayWhatsThis "330"
End Sub
Public Sub lblWhatsThis165_Click()
    DisplayWhatsThis "332"
End Sub
Public Sub lblWhatsThis166_Click()
    DisplayWhatsThis "334"
End Sub
Public Sub lblWhatsThis167_Click()
    DisplayWhatsThis "336"
End Sub
Public Sub lblWhatsThis168_Click()
    DisplayWhatsThis "338"
End Sub
Public Sub lblWhatsThis169_Click()
    DisplayWhatsThis "340"
End Sub
Public Sub lblWhatsThis170_Click()
    DisplayWhatsThis "342"
End Sub
Public Sub lblWhatsThis171_Click()
    DisplayWhatsThis "344"
End Sub
Public Sub lblWhatsThis172_Click()
    DisplayWhatsThis "346"
End Sub
Public Sub lblWhatsThis173_Click()
    DisplayWhatsThis "348"
End Sub
Public Sub lblWhatsThis174_Click()
    DisplayWhatsThis "350"
End Sub
Public Sub lblWhatsThis175_Click()
    DisplayWhatsThis "352"
End Sub
Public Sub lblWhatsThis176_Click()
    DisplayWhatsThis "354"
End Sub
Public Sub lblWhatsThis177_Click()
    DisplayWhatsThis "356"
End Sub
Public Sub lblWhatsThis178_Click()
    DisplayWhatsThis "358"
End Sub
Public Sub lblWhatsThis179_Click()
    DisplayWhatsThis "360"
End Sub
Public Sub lblWhatsThis180_Click()
    DisplayWhatsThis "362"
End Sub
Public Sub lblWhatsThis181_Click()
    DisplayWhatsThis "364"
End Sub
Public Sub lblWhatsThis182_Click()
    DisplayWhatsThis "366"
End Sub
Public Sub lblWhatsThis183_Click()
    DisplayWhatsThis "368"
End Sub
Public Sub lblWhatsThis184_Click()
    DisplayWhatsThis "370"
End Sub
Public Sub lblWhatsThis185_Click()
    DisplayWhatsThis "372"
End Sub
Public Sub lblWhatsThis186_Click()
    DisplayWhatsThis "374"
End Sub
Public Sub lblWhatsThis187_Click()
    DisplayWhatsThis "376"
End Sub
Public Sub lblWhatsThis188_Click()
    DisplayWhatsThis "378"
End Sub
Public Sub lblWhatsThis189_Click()
    DisplayWhatsThis "380"
End Sub
Public Sub lblWhatsThis190_Click()
    DisplayWhatsThis "382"
End Sub
Public Sub lblWhatsThis191_Click()
    DisplayWhatsThis "384"
End Sub
Public Sub lblWhatsThis192_Click()
    DisplayWhatsThis "386"
End Sub
Public Sub lblWhatsThis193_Click()
    DisplayWhatsThis "388"
End Sub
Public Sub lblWhatsThis194_Click()
    DisplayWhatsThis "390"
End Sub
Public Sub lblWhatsThis195_Click()
    DisplayWhatsThis "392"
End Sub
Public Sub lblWhatsThis196_Click()
    DisplayWhatsThis "394"
End Sub
Public Sub lblWhatsThis197_Click()
    DisplayWhatsThis "396"
End Sub
Public Sub lblWhatsThis198_Click()
    DisplayWhatsThis "398"
End Sub
Public Sub lblWhatsThis199_Click()
    DisplayWhatsThis "400"
End Sub
Public Sub lblWhatsThis200_Click()
    DisplayWhatsThis "402"
End Sub
Public Sub lblWhatsThis201_Click()
    DisplayWhatsThis "404"
End Sub
Public Sub lblWhatsThis202_Click()
    DisplayWhatsThis "406"
End Sub
Public Sub lblWhatsThis203_Click()
    DisplayWhatsThis "408"
End Sub
Public Sub lblWhatsThis204_Click()
    DisplayWhatsThis "410"
End Sub
Public Sub lblWhatsThis205_Click()
    DisplayWhatsThis "412"
End Sub
Public Sub lblWhatsThis206_Click()
    DisplayWhatsThis "414"
End Sub
Public Sub lblWhatsThis207_Click()
    DisplayWhatsThis "416"
End Sub
Public Sub lblWhatsThis208_Click()
    DisplayWhatsThis "418"
End Sub
Public Sub lblWhatsThis209_Click()
    DisplayWhatsThis "420"
End Sub
Public Sub lblWhatsThis210_Click()
    DisplayWhatsThis "422"
End Sub
Public Sub lblWhatsThis211_Click()
    DisplayWhatsThis "424"
End Sub
Public Sub lblWhatsThis212_Click()
    DisplayWhatsThis "426"
End Sub
Public Sub lblWhatsThis213_Click()
    DisplayWhatsThis "428"
End Sub
Public Sub lblWhatsThis214_Click()
    DisplayWhatsThis "430"
End Sub
Public Sub lblWhatsThis215_Click()
    DisplayWhatsThis "432"
End Sub
Public Sub lblWhatsThis216_Click()
    DisplayWhatsThis "434"
End Sub
Public Sub lblWhatsThis217_Click()
    DisplayWhatsThis "436"
End Sub
Public Sub lblWhatsThis218_Click()
    DisplayWhatsThis "438"
End Sub
Public Sub lblWhatsThis219_Click()
    DisplayWhatsThis "440"
End Sub
Public Sub lblWhatsThis220_Click()
    DisplayWhatsThis "442"
End Sub
Public Sub lblWhatsThis221_Click()
    DisplayWhatsThis "444"
End Sub
Public Sub lblWhatsThis222_Click()
    DisplayWhatsThis "446"
End Sub
Public Sub lblWhatsThis223_Click()
    DisplayWhatsThis "448"
End Sub
Public Sub lblWhatsThis224_Click()
    DisplayWhatsThis "450"
End Sub
Public Sub lblWhatsThis225_Click()
    DisplayWhatsThis "452"
End Sub
Public Sub lblWhatsThis226_Click()
    DisplayWhatsThis "454"
End Sub
Public Sub lblWhatsThis227_Click()
    DisplayWhatsThis "456"
End Sub
Public Sub lblWhatsThis228_Click()
    DisplayWhatsThis "458"
End Sub
Public Sub lblWhatsThis229_Click()
    DisplayWhatsThis "460"
End Sub
Public Sub lblWhatsThis230_Click()
    DisplayWhatsThis "462"
End Sub
Public Sub lblWhatsThis231_Click()
    DisplayWhatsThis "464"
End Sub
Public Sub lblWhatsThis232_Click()
    DisplayWhatsThis "466"
End Sub
Public Sub lblWhatsThis233_Click()
    DisplayWhatsThis "468"
End Sub
Public Sub lblWhatsThis234_Click()
    DisplayWhatsThis "470"
End Sub
Public Sub lblWhatsThis235_Click()
    DisplayWhatsThis "472"
End Sub
Public Sub lblWhatsThis236_Click()
    DisplayWhatsThis "474"
End Sub
Public Sub lblWhatsThis237_Click()
    DisplayWhatsThis "476"
End Sub
Public Sub lblWhatsThis238_Click()
    DisplayWhatsThis "478"
End Sub
Public Sub lblWhatsThis239_Click()
    DisplayWhatsThis "480"
End Sub
Public Sub lblWhatsThis240_Click()
    DisplayWhatsThis "482"
End Sub
Public Sub lblWhatsThis241_Click()
    DisplayWhatsThis "484"
End Sub
Public Sub lblWhatsThis242_Click()
    DisplayWhatsThis "486"
End Sub
Public Sub lblWhatsThis243_Click()
    DisplayWhatsThis "488"
End Sub
Public Sub lblWhatsThis244_Click()
    DisplayWhatsThis "490"
End Sub
Public Sub lblWhatsThis245_Click()
    DisplayWhatsThis "492"
End Sub
Public Sub lblWhatsThis246_Click()
    DisplayWhatsThis "494"
End Sub
Public Sub lblWhatsThis247_Click()
    DisplayWhatsThis "496"
End Sub
Public Sub lblWhatsThis248_Click()
    DisplayWhatsThis "498"
End Sub
Public Sub lblWhatsThis249_Click()
    DisplayWhatsThis "500"
End Sub
Public Sub lblWhatsThis250_Click()
    DisplayWhatsThis "502"
End Sub
Public Sub lblWhatsThis251_Click()
    DisplayWhatsThis "504"
End Sub
Public Sub lblWhatsThis252_Click()
    DisplayWhatsThis "506"
End Sub
Public Sub lblWhatsThis253_Click()
    DisplayWhatsThis "508"
End Sub
Public Sub lblWhatsThis254_Click()
    DisplayWhatsThis "510"
End Sub

'****************************************************
'Sub DisplayWhatsThis
'Purpose: Display Helpfile for application on sRow
'           from the Cover Sheet What's This? links
'Inputs:  sRow - The Row the application is on on the
'                Cover Sheet
'****************************************************
Public Sub DisplayWhatsThis(sRow As String)
Dim sHelpFile As String
Dim sHelpRoot As String
Dim sURL As String

285:    On Error GoTo ErrorHandler
   
    'Get the "back half" of the URL from the Cover Sheet
    '   "/folder/filename.HTM"
286:    sHelpFile = Trim$(Worksheets(gcCoverSheetName).Range("H" & sRow).Value)
      
    'mod0009 If there's no help then point the user to the default help html
287:    If Not CBool(Len(sHelpFile)) Then
288:        sHelpFile = cHelpDefault
289:    End If

    'Remove leading "/" delimiter from sHelpFile: we need a relative URL
    'to pass to the HtmlHelpLauncher.CFM from InforumOnline -OR- to build
    'the "full URL" when running from a downloaded workbook
    '   "/folder/filename.HTM" --> "folder/filename.HTM"
290:    If Left(sHelpFile, 1) = "/" Then
291:        sHelpFile = Mid$(sHelpFile, 2, Len(sHelpFile) - 1)
292:    End If
    
    '(Attempt to) get the "front half" of the URL from then user's
    'Inforum.INI [Inforum Platform] BrowserHelpBaseURL=
    '   Note that there is no default
293:    sHelpRoot = INIFileRead("Inforum Platform", "BrowserHelpBaseURL", "Z:\Windows\Inforum.ini", "")

    '------------------------------------------------------------
294:    If Len(sHelpRoot) Then '>>>>> we're running on InforumOnline <<<<<
        'Ensure sHelproot begins with "http://" and ends with "/" delimiter
        '   "[http://]dev.inforumonline.com/marketexpert/help[/]"
        
        'CSH- Updated
295:        If StrComp(Left(sHelpRoot, 7), "https://", vbTextCompare) <> 0 Then
296:            sHelpRoot = "https://" & sHelpRoot
297:        End If
298:        If Right(sHelpRoot, 1) <> "/" Then
299:            sHelpRoot = sHelpRoot & "/"
300:        End If
        
        'Add the /yyyy/ version folder to the sHelproot and ensure it ends with "/" delimiter
        '   "http://dev.inforumonline.com/marketexpert/help/yyyy/"
301:        sHelpRoot = sHelpRoot _
            & INIFileRead("Frontend", "CurrentCompassVersion", "Z:\Windows\Inforum.ini", "")
302:        If Right(sHelpRoot, 1) <> "/" Then
303:            sHelpRoot = sHelpRoot & "/"
304:        End If
            
          'CSH- Updated
            sHelpRoot = sHelpRoot & INIFileRead("Inforum Platform", "DefaultPage", "Z:\Windows\Inforum.ini", "")
            'added for csh  in below
            CSHBrowserpath = INIFileRead("Inforum Platform", "CSHBrowserpath", "Z:\Windows\Inforum.ini", "")
            'build url for csh
            cshCompleteURL = Trim$(sHelpRoot & "#cshid=" & sHelpFile)
            If Not CSHBrowserpath = "" Then
               If Shell(CSHBrowserpath & " " & cshCompleteURL, vbMaximizedFocus) = 0 Then
                    MsgBox "Error in executing CSHWebBrowser: " & CSHBrowserpath
                End If
                Exit Sub
            Else
                MsgBox "CSHBrowser path is missing in INI."
            End If
        
        'Build the URL
305:        sURL = sHelpRoot & "HtmlHelpLauncher.CFM" _
            & "?uuid=" & Format$(Now(), "yyyymmddhhnnss") _
            & "&type=EXCEL" _
            & "&help=" & UrlEncode(sHelpFile)
        '------------------------------
306:        Set objIE = CreateObject("InternetExplorer.Application")
307:        objIE.MenuBar = False
308:        objIE.Toolbar = False
309:        objIE.AddressBar = False
310:        objIE.StatusBar = True
311:        objIE.FullScreen = False 'True (gotta include [Close] button on "menubar")
312:        objIE.Resizable = True 'False
        '------------------------------
        'run the URL (in a new window opened by HtmlHelpLauncher.CFM)
313:        objIE.Navigate sURL
314:        objIE.Visible = True
315:        Application.Visible = True
316:        Do While objIE.Busy
317:            DoEvents 'wait while we're loading the pages
318:        Loop
319:        objIE.Visible = False 'hide the parent window

    On Error Resume Next
    SetWindowPos Application.hwnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOACTIVATE Or SWP_NOMOVE Or SWP_NOSIZE
    Sleep 1000
    SetWindowPos Application.hwnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOACTIVATE Or SWP_NOMOVE Or SWP_NOSIZE
    
    '------------------------------------------------------------
320:    Else 'We're NOT running on InforumOnline -OR- the user's Inforum.INI file
    'doesn't have the [Inforum Platform] BroswerHelpBaseURL= keyword!  A down
    'loaded workbook will simply fire-up the local instance of Internet Explorer.
    'From InforumOnline, this "worse case scenario", the InforumOnline flavor of
    'InternetExplorer will not have the any toolbars ("No home/back/next for you!").
        
'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
'JSG: sHelpRoot must be read from cell E2 on the
'cover sheet (post update to ProtoFormat/SQPFormatter)
'vs. the following INI file read
'the format of the URL in cell E2 must be
'   HTTP://webserver/MARKETEXPERT/HELP/yyyy/
'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
        '(Attempt to) get the "front half" of the URL from then user's
        'Inforum.INI [Inforum Platform] BrowserHelpBaseURL=
        'sHelpRoot = INIFileRead("Inforum Platform", "BrowserHelpBaseURL", "Z:\Windows\Inforum.ini", "http://" & cWebServerURL & "/marketexpert/help/")
321:        sHelpRoot = Trim$(Worksheets(gcCoverSheetName).Range("E2").Value)

'[Inforum Platform]BrowserHelpBaseURL=
'[Frontend]CurrentCompassVersion=

'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
        
        'Ensure sHelproot begins with "http://" and ends with "/" delimiter
        '   "[HTTP://]www.inforumonline.com/MARKETEXPERT/HELP/yyyy[/]"
322:        If StrComp(Left(sHelpRoot, 7), "http://", vbTextCompare) <> 0 Then
323:            sHelpRoot = "http://" & sHelpRoot
324:        End If
325:        If Right(sHelpRoot, 1) <> "/" Then
326:            sHelpRoot = sHelpRoot & "/"
327:        End If
        

        
        
        'Build the URL
328:        sURL = sHelpRoot & sHelpFile

'' Nedu to make CSH work in offline Reports
On Error Resume Next
If InStr(1, UCase(sURL), UCase("Index.htm"), vbTextCompare) = 0 Then
sURL = sHelpRoot & "Index.htm#cshid=" & sHelpFile
End If
'' Nedu to make CSH work in offline Reports

        'run the URL in a new browser window (most likely the first!)
329:        ThisWorkbook.FollowHyperlink sURL, , True
330:    End If

331:    Exit Sub
ErrorHandler:
332:    MsgBox "Unable to Display HelpFile " & IIf(Len(sURL), sURL, sHelpFile) & "." & vbCrLf & _
        Err.Description & vbCrLf & "Please Contact IBM Market Expert Product Support For Further Assistance.", _
        vbOKOnly, "Error Displaying Help"
End Sub


'****************************************************
'Sub DisplayWhatsThis2
'Purpose: Display Helpfile for application from the
'         worksheet (vs. the Cover Sheet)
'****************************************************
Public Sub DisplayWhatsThis2()
Dim sRow As String
Dim scol As String
Dim sHelpFile As String
Dim sHelpRoot As String
Dim sURL As String
    
333:    On Error GoTo ErrorHandler
    
    '----------------------------------------------------------------------
    'This is the only difference between DisplayWhatsThis() and DisplayWhatsThis2().
    'since the sRow value that DisplayWhatsThis() requires is not "hard-coded" in
    'a lblWhatsThis#_Click() macro like all the Cover Sheet What's This? links are,
    'we have to search for the correct row by sheet name.
'Mod0005: row numbers bumped up +1 to even rows vs. odd rows
'    sRow = 3
334:    sRow = 4
335:    scol = "E"
336:    While StrComp(Worksheets(gcCoverSheetName).Range(scol & sRow).Value, ActiveSheet.Name, vbTextCompare) <> 0
337:        sRow = Trim$(Val(sRow) + 2)
338:        If IsEmpty(Worksheets(gcCoverSheetName).Range(scol & sRow).Value) Then
339:            MsgBox "Unable to Display Help for " & ActiveSheet.Name
340:            Exit Sub
341:        End If
342:    Wend
    '----------------------------------------------------------------------
   
    'Get the "back half" of the URL from the Cover Sheet
    '   "/folder/filename.HTM"
343:    sHelpFile = Trim$(Worksheets(gcCoverSheetName).Range("H" & sRow).Value)
    
    'mod0009 If there's no help then point the user to the default help html
344:    If Not CBool(Len(sHelpFile)) Then
345:        sHelpFile = cHelpDefault
346:    End If
    
    'Remove leading "/" delimiter from sHelpFile: we need a relative URL
    'to pass to the HtmlHelpLauncher.CFM from InforumOnline -OR- to build
    'the "full URL" when running from a downloaded workbook
    '   "/folder/filename.HTM" --> "folder/filename.HTM"
347:    If Left(sHelpFile, 1) = "/" Then
348:        sHelpFile = Mid$(sHelpFile, 2, Len(sHelpFile) - 1)
349:    End If
    
    '(Attempt to) get the "front half" of the URL from then user's
    'Inforum.INI [Inforum Platform] BrowserHelpBaseURL=
    '   Note that there is no default
350:    sHelpRoot = INIFileRead("Inforum Platform", "BrowserHelpBaseURL", "Z:\Windows\Inforum.ini", "")

    '------------------------------------------------------------
351:    If Len(sHelpRoot) Then '>>>>> we're running on InforumOnline <<<<<
        'Ensure sHelproot begins with "http://" and ends with "/" delimiter
        '   "[http://]dev.inforumonline.com/marketexpert/help[/]"
        
        'CSH- Updated
352:        If StrComp(Left(sHelpRoot, 7), "https://", vbTextCompare) <> 0 Then
353:            sHelpRoot = "https://" & sHelpRoot
354:        End If
355:        If Right(sHelpRoot, 1) <> "/" Then
356:            sHelpRoot = sHelpRoot & "/"
357:        End If
        
        'Add the /yyyy/ version folder to the sHelproot and ensure it ends with "/" delimiter
        '   "http://dev.inforumonline.com/marketexpert/help/yyyy/"
358:        sHelpRoot = sHelpRoot _
            & INIFileRead("Frontend", "CurrentCompassVersion", "Z:\Windows\Inforum.ini", "")
359:        If Right(sHelpRoot, 1) <> "/" Then
360:            sHelpRoot = sHelpRoot & "/"
361:        End If
        
        'CSH- Updated
            sHelpRoot = sHelpRoot & INIFileRead("Inforum Platform", "DefaultPage", "Z:\Windows\Inforum.ini", "")
            'added for csh  in below
            CSHBrowserpath = INIFileRead("Inforum Platform", "CSHBrowserpath", "Z:\Windows\Inforum.ini", "")
            'build url for csh
            cshCompleteURL = Trim$(sHelpRoot & "#cshid=" & sHelpFile)
          
            If Not CSHBrowserpath = "" Then
               If Shell(CSHBrowserpath & " " & cshCompleteURL, vbMaximizedFocus) = 0 Then
                    MsgBox "Error in executing CSHWebBrowser: " & CSHBrowserpath
                End If
                Exit Sub
            Else
                MsgBox "CSHBrowser path is missing in INI."
            End If
        'Build the URL
362:        sURL = sHelpRoot & "HtmlHelpLauncher.CFM" _
            & "?uuid=" & Format$(Now(), "yyyymmddhhnnss") _
            & "&type=EXCEL" _
            & "&help=" & UrlEncode(sHelpFile)
        '------------------------------
363:        Set objIE = CreateObject("InternetExplorer.Application")
364:        objIE.MenuBar = False
365:        objIE.Toolbar = False
366:        objIE.AddressBar = False
367:        objIE.StatusBar = True
368:        objIE.FullScreen = False 'True (gotta include [Close] button on "menubar")
369:        objIE.Resizable = True 'False
        '------------------------------
        'run the URL (in a new window opened by HtmlHelpLauncher.CFM)
370:        objIE.Navigate sURL
371:        objIE.Visible = True
372:        Application.Visible = True
373:        Do While objIE.Busy
374:            DoEvents 'wait while we're loading the pages
375:        Loop
376:        objIE.Visible = False 'hide the parent window
    
    On Error Resume Next
    SetWindowPos Application.hwnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOACTIVATE Or SWP_NOMOVE Or SWP_NOSIZE
    Sleep 1000
    SetWindowPos Application.hwnd, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOACTIVATE Or SWP_NOMOVE Or SWP_NOSIZE
    
    '------------------------------------------------------------
377:    Else 'We're NOT running on InforumOnline -OR- the user's Inforum.INI file
    'doesn't have the [Inforum Platform] BroswerHelpBaseURL= keyword!  A down
    'loaded workbook will simply fire-up the local instance of Internet Explorer.
    'From InforumOnline, this "worse case scenario", the InforumOnline flavor of
    'InternetExplorer will not have the any toolbars ("No home/back/next for you!").
        
'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
'JSG: sHelpRoot must be read from cell E2 on the
'cover sheet (post update to ProtoFormat/SQPFormatter)
'vs. the following INI file read
'the format of the URL in cell E2 must be
'   HTTP://webserver/MARKETEXPERT/HELP/yyyy/
'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
        '(Attempt to) get the "front half" of the URL from then user's
        'Inforum.INI [Inforum Platform] WebHelpURL=http://someplace/
        'sHelpRoot = INIFileRead("Inforum Platform", "WebHelpURL", "Z:\Windows\Inforum.ini", "http://" & cWebServerURL & "/marketexpert/help/")
378:        sHelpRoot = Trim$(Worksheets(gcCoverSheetName).Range("E2").Value)
'!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
        
        'Ensure sHelproot begins with "http://" and ends with "/" delimiter
        '   "[http://]www.InforumOnline.com/marketexpert/help[/]"
379:        If StrComp(Left(sHelpRoot, 7), "http://", vbTextCompare) <> 0 Then
380:            sHelpRoot = "http://" & sHelpRoot
381:        End If
382:        If Right(sHelpRoot, 1) <> "/" Then
383:            sHelpRoot = sHelpRoot & "/"
384:        End If
        
        'Build the URL
385:        sURL = sHelpRoot & sHelpFile

'' Nedu to make CSH work in offline Reports
On Error Resume Next
If InStr(1, UCase(sURL), UCase("Index.htm"), vbTextCompare) = 0 Then
sURL = sHelpRoot & "Index.htm#cshid=" & sHelpFile
End If
'' Nedu to make CSH work in offline Reports

        'run the URL in a new browser window (most likely the first!)
386:        ThisWorkbook.FollowHyperlink sURL, , True
387:    End If

388:    Exit Sub
ErrorHandler:
389:    MsgBox "Unable to Display HelpFile " & IIf(Len(sURL), sURL, sHelpFile) & "." & vbCrLf & _
        Err.Description & vbCrLf & "Please Contact IBM Market Expert Product Support For Further Assistance.", _
        vbOKOnly, "Error Displaying Help"
End Sub
'************************************
'* ConnectToMap
'*  purpose: open the map dat with the map viewer server
'************************************
Public Sub ConnectToMap()
'MsgBox " connect to map"
390:  ActiveWorkbook.CallLauncher
End Sub

'*************************
'*  NullTrim$:
'*    Purpose:  remove Leading and Trailing Nulls from
'*              a string
'*    Inputs:   sNulls is the string to NullTrim
'*    Outputs:  the NullTrimmed string
'*************************
Public Function NullTrim$(ByVal sNulls As String)
391:  sNulls = Trim$(sNulls)
      '* remove nulls on the left side
392:  Do While Left$(sNulls, 1) = Chr$(0)
393:    sNulls = Mid$(sNulls, 2, Len(sNulls) - 1)
394:  Loop
      '* remove nulls on the right side
395:  Do While Right$(sNulls, 1) = Chr$(0)
396:    sNulls = Mid$(sNulls, 1, Len(sNulls) - 1)
397:  Loop
398:  NullTrim$ = sNulls
End Function
Public Sub UpdateView(Optional AppendDescriptionToSuperHeaderWithoutReplacing As Boolean = False)
  Dim sViewSheet As String
    Dim objCell As Object
    Dim sRow As String
    Dim nRow As Integer
    Dim sSuperHeader As String
    Dim sTemp As String
    Dim columnDest As Range
    Dim columnSrc As Range
    Dim sSelectedValue As String
    
    
On Error Resume Next
sSelectedValue = ActiveSheet.Shapes("cmbView").ControlFormat.List(ActiveSheet.Shapes("cmbView").ControlFormat.ListIndex)

If Err.Number > 0 Then
    ActiveSheet.Shapes("cmbView").ControlFormat.ListIndex = 1
    sSelectedValue = ActiveSheet.Shapes("cmbView").ControlFormat.List(ActiveSheet.Shapes("cmbView").ControlFormat.ListIndex)
End If
    
    
    
'1399:    If ActiveSheet.Shapes("cmbView").Name = "" Then
''400:        ActiveSheet.OLEObjects("cmbView").Object.ListIndex = 0
'1400:         ActiveSheet.Shapes("cmbView").ControlFormat.ListIndex = 0
'1401:    End If
    
    'get the focus off of the combo box
1402:    ActiveSheet.Range("A1").Select
    
    'Find this Sheet's Name in the First column of the PivotReportOptions sheet
    
    
1403:    For Each objCell In Worksheets(cPivRepOpts).UsedRange.Columns("A").Cells
1404:        If StrComp(objCell.Value, ActiveSheet.Name, vbTextCompare) = 0 Then
            'Find the Sheet associated with the Selected View
1405:            If StrComp(Worksheets(cPivRepOpts).Range("C" & objCell.ROW).Value, sSelectedValue, vbTextCompare) = 0 Then
                'Found the Sheet
1406:                sViewSheet = Worksheets(cPivRepOpts).Range("B" & objCell.ROW).Value
1407:                Exit For
1408:            End If
        
1409:        End If
1410:    Next
    
    'Load the Pivot Table with the Pivot Table options from the Sheet
    'of the Selected View
1411:    LoadView ActiveSheet.PivotTables(1), Worksheets(sViewSheet).PivotTables(1)
    
    'Set the Column Widths according to the View on
    'sViewSheet
1412:    For Each columnSrc In ActiveSheet.UsedRange.Columns
1413:        If Worksheets(sViewSheet).Columns(columnSrc.Column).ColumnWidth <> columnSrc.ColumnWidth Then
1414:            columnSrc.ColumnWidth = Worksheets(sViewSheet).Columns(columnSrc.Column).ColumnWidth
1415:        End If
1416:    Next
    
    'Freeze Panes
    'sRow = Trim$(ActiveSheet.PivotTables(1).DataBodyRange.ROW)
        
    'ActiveSheet.Range("A" & sRow).Select
    'ActiveWindow.FreezePanes = False
    'ActiveWindow.FreezePanes = True
    
    'Update SuperHeader of Pivot Sheet to include information
    'specifying which View is currently displayed
1417:    nRow = 1
1418:    Do While True
    
1419:        If Len(Trim$(ActiveSheet.Range("A" & nRow).Value)) Then
1420:            sSuperHeader = Trim$(ActiveSheet.Range("A" & nRow).Value)
            
            'Do we just need to append the "- Selection" or do we need to replace
            'a previous "- Selection"?
1421:            If AppendDescriptionToSuperHeaderWithoutReplacing Then
                'append
1422:                ActiveSheet.Range("A" & nRow).Value = sSuperHeader & " - " & sSelectedValue
1423:            Else
                'Replace
1424:                sTemp = sSuperHeader
1425:                sSuperHeader = ""
1426:                Do While True
                    
1427:                    If InStr(1, sTemp, "-", vbTextCompare) Then
1428:                        sSuperHeader = sSuperHeader & Mid$(sTemp, 1, InStr(1, sTemp, "-", vbTextCompare))
1429:                        sTemp = Mid$(sTemp, InStr(1, sTemp, "-", vbTextCompare) + 1)
1430:                    Else
1431:                        If Len(sSuperHeader) = 0 Then
1432:                            sSuperHeader = sTemp
1433:                        End If
                        
                        'sSuperHeader should have a dash at the end
1434:                        If InStr(1, Right(Trim(sSuperHeader), 1), "-") Then
1435:                            sSuperHeader = Trim(sSuperHeader) & " " & sSelectedValue  'ActiveSheet.Shapes("cmbView").Name
1436:                        Else
1437:                            sSuperHeader = Trim(sSuperHeader) & " - " & sSelectedValue 'ActiveSheet.Shapes("cmbView").Name
1438:                        End If
1439:                        ActiveSheet.Range("A" & nRow).Value = sSuperHeader
1440:                        Exit Do
1441:                    End If
                    
1442:                Loop
1443:            End If
            'AlignSuperHeader
1444:            Exit Do
1445:        End If
        
1446:        nRow = nRow + 1
        
1447:    Loop
    
    'Put Focus on Cell A1
1448:    ActiveSheet.Range("A1").Select



'    Dim sViewSheet As String
'    Dim objCell As Object
'    Dim sRow As String
'    Dim nRow As Integer
'    Dim sSuperHeader As String
'    Dim sTemp As String
'    Dim columnDest As Range
'    Dim columnSrc As Range
'
'399:    If ActiveSheet.OLEObjects("cmbView").Object.Text = "" Then
'400:        ActiveSheet.OLEObjects("cmbView").Object.ListIndex = 0
'401:    End If
'
'    'get the focus off of the combo box
'402:    ActiveSheet.Range("A1").Select
'
'    'Find this Sheet's Name in the First column of the PivotReportOptions sheet
'
'
'403:    For Each objCell In Worksheets(cPivRepOpts).UsedRange.Columns("A").Cells
'404:        If StrComp(objCell.Value, ActiveSheet.Name, vbTextCompare) = 0 Then
'            'Find the Sheet associated with the Selected View
'405:            If StrComp(Worksheets(cPivRepOpts).Range("C" & objCell.ROW).Value, ActiveSheet.OLEObjects("cmbView").Object.Text, vbTextCompare) = 0 Then
'                'Found the Sheet
'406:                sViewSheet = Worksheets(cPivRepOpts).Range("B" & objCell.ROW).Value
'407:                Exit For
'408:            End If
'
'409:        End If
'410:    Next
'
'    'Load the Pivot Table with the Pivot Table options from the Sheet
'    'of the Selected View
'411:    LoadView ActiveSheet.PivotTables(1), Worksheets(sViewSheet).PivotTables(1)
'
'    'Set the Column Widths according to the View on
'    'sViewSheet
'412:    For Each columnSrc In ActiveSheet.UsedRange.Columns
'413:        If Worksheets(sViewSheet).Columns(columnSrc.Column).ColumnWidth <> columnSrc.ColumnWidth Then
'414:            columnSrc.ColumnWidth = Worksheets(sViewSheet).Columns(columnSrc.Column).ColumnWidth
'415:        End If
'416:    Next
'
'    'Freeze Panes
'    'sRow = Trim$(ActiveSheet.PivotTables(1).DataBodyRange.ROW)
'
'    'ActiveSheet.Range("A" & sRow).Select
'    'ActiveWindow.FreezePanes = False
'    'ActiveWindow.FreezePanes = True
'
'    'Update SuperHeader of Pivot Sheet to include information
'    'specifying which View is currently displayed
'417:    nRow = 1
'418:    Do While True
'
'419:        If Len(Trim$(ActiveSheet.Range("A" & nRow).Value)) Then
'420:            sSuperHeader = Trim$(ActiveSheet.Range("A" & nRow).Value)
'
'            'Do we just need to append the "- Selection" or do we need to replace
'            'a previous "- Selection"?
'421:            If AppendDescriptionToSuperHeaderWithoutReplacing Then
'                'append
'422:                ActiveSheet.Range("A" & nRow).Value = sSuperHeader & " - " & ActiveSheet.OLEObjects("cmbView").Object.Text
'423:            Else
'                'Replace
'424:                sTemp = sSuperHeader
'425:                sSuperHeader = ""
'426:                Do While True
'
'427:                    If InStr(1, sTemp, "-", vbTextCompare) Then
'428:                        sSuperHeader = sSuperHeader & Mid$(sTemp, 1, InStr(1, sTemp, "-", vbTextCompare))
'429:                        sTemp = Mid$(sTemp, InStr(1, sTemp, "-", vbTextCompare) + 1)
'430:                    Else
'431:                        If Len(sSuperHeader) = 0 Then
'432:                            sSuperHeader = sTemp
'433:                        End If
'
'                        'sSuperHeader should have a dash at the end
'434:                        If InStr(1, Right(Trim(sSuperHeader), 1), "-") Then
'435:                            sSuperHeader = Trim(sSuperHeader) & " " & ActiveSheet.OLEObjects("cmbView").Object.Text
'436:                        Else
'437:                            sSuperHeader = Trim(sSuperHeader) & " - " & ActiveSheet.OLEObjects("cmbView").Object.Text
'438:                        End If
'439:                        ActiveSheet.Range("A" & nRow).Value = sSuperHeader
'440:                        Exit Do
'441:                    End If
'
'442:                Loop
'443:            End If
'            'AlignSuperHeader
'444:            Exit Do
'445:        End If
'
'446:        nRow = nRow + 1
'
'447:    Loop
'
'    'Put Focus on Cell A1
'448:    ActiveSheet.Range("A1").Select
    
End Sub
'***************************************
'* LoadView:
'*      Purpose:  To load a specific View into a Pivot Table based on another Pivot Table
'*      Inputs:   pivDest - The Destination Pivot Table
'*                pivSource - The Source Pivot Table properties from
'*                (Assumes ActiveWorkbook)
'*      Outputs:  none
'****************************************
Public Sub LoadView(pivDest As Excel.PivotTable, pivSource As Excel.PivotTable)

    Dim pvfField As Excel.PivotField
    Dim varRows As Variant
    Dim varCols As Variant
    Dim varPages As Variant
    Dim nPageCounter As Integer
    Dim nRowCounter As Integer
    Dim nColCounter As Integer
    Dim sFieldName As String
    Dim nFieldIndex As Integer
    Dim nDataFieldCounter As Integer
    Dim nSTIndex As Integer
    Dim pvfDestPivotField As Excel.PivotField
    Dim bFoundField As Boolean
    
    'LockWindowUpdate GetActiveWindow
    
449:    On Error Resume Next

    'Build our Arrays of Column, row, and page fields according
    'to which View is selected
450:    If pivSource.RowFields.Count Then
451:        ReDim varRows(1 To pivSource.RowFields.Count)
452:    End If
453:    If pivSource.ColumnFields.Count Then
454:        ReDim varCols(1 To pivSource.ColumnFields.Count)
455:    End If
456:    If pivSource.PageFields.Count Then
457:        ReDim varPages(1 To pivSource.PageFields.Count)
458:    End If
        
459:    nPageCounter = 0
460:    nRowCounter = 0
461:    nColCounter = 0
462:    For Each pvfField In pivSource.PivotFields
        
463:        Select Case pvfField.Orientation
        
        Case xlRowField
464:            nRowCounter = nRowCounter + 1
465:            varRows(pvfField.Position) = pvfField.Name
            
466:        Case xlColumnField
467:            nColCounter = nColCounter + 1
468:            varCols(pvfField.Position) = pvfField.Name
            
469:        Case xlPageField
470:            nPageCounter = nPageCounter + 1
471:            varPages(pvfField.Position) = pvfField.Name
472:        Case xlDataField
473:            DoEvents
474:        Case xlHidden
475:            DoEvents
476:        End Select
477:    Next
    
    'Remove all Data Fields
            '* Delete Data Fields
478:    With pivDest
479:        nFieldIndex = 1
480:        For nDataFieldCounter = 1 To .DataFields.Count
            'Delete the first item position wise in the DataFields
481:            On Error Resume Next
            'See if this Datafield belongs
            'sFieldName = pivSource.DataFields(.DataFields(nFieldIndex).Name).Name
            'If Err.Number Then 'It doesn't belong remove it
482:                Err.Clear
483:                .PivotSelect "'" & .DataFields(nFieldIndex).Name & "'", xlDataAndLabel
484:                If Err.Number = 0 Then
485:                    Selection.Delete
486:                Else
487:                    .DataFields(nFieldIndex).Orientation = xlHidden
488:                End If
                'If there are no more datafields then we are out of here
489:                If .DataFields.Count = 0 Then
490:                    Exit For
491:                End If
            'Else
            '    nFieldIndex = nFieldIndex + 1
            'End If
492:        Next
        
        'Remove all Column Fields
493:        For nDataFieldCounter = 1 To .ColumnFields.Count
494:            On Error Resume Next
495:            .PivotSelect "'" & .ColumnFields(1).Name & "'", xlDataAndLabel
496:            If Err.Number = 0 Then
497:                Selection.Delete
498:            Else
499:                .ColumnFields(1).Orientation = xlHidden
500:            End If
501:            If .ColumnFields.Count = 0 Then
502:                Exit For
503:            End If
504:        Next
505:    End With
    
        
    'Add the DataFields
506:    For Each pvfField In pivSource.DataFields

'this was redundant BJN 3/8/2001
'        If pvfField.Orientation = xlDataField Then
507:            With pivDest
508:                On Error Resume Next
                
                'No need to do this since we are removing all data fields
                'anyway BJN 3/8/2001
                'See if this one is already in the Datafield collection
         '       sFieldName = .DataFields(pvfField.Name).Name
                
         '       If Err.Number Then
                    'The Datafield is NOT already in the Datafield collection.  Add it
            '        Err.Clear
509:                    .PivotFields(pvfField.SourceName).Orientation = xlDataField
510:                    If Err.Number Then
                    
                        'If we were unable to retrieve the Pivot Field based on the
                        'Sort name then the Pivot Field name has been changed in the
                        'Pivot Table.  therefore we need to Loop through the collection
                        'of PivotFields in the Destination table and find one that
                        'has a source field that matches our Source field for the Source
                        'Tables Data Field(pvfField)
511:                        bFoundField = False
512:                        For Each pvfDestPivotField In .PivotFields
513:                            If StrComp(pvfDestPivotField.SourceName, pvfField.SourceName, vbTextCompare) = 0 Then
514:                                pvfDestPivotField.Orientation = xlDataField
515:                                bFoundField = True
516:                                Exit For
517:                            End If
518:                        Next
                        
519:                        If Not bFoundField Then
520:                            GoTo NextPivotField
521:                        End If
522:                    End If
                    
523:                    If .DataFields(.DataFields.Count).Name <> pvfField.Name Then
524:                        .DataFields(.DataFields.Count).Name = pvfField.Name
525:                    End If
526:                    If .DataFields(pvfField.Name).Function <> pvfField.Function Then
527:                        .DataFields(pvfField.Name).Function = pvfField.Function
    '64 Bit
                                If .DataFields(.DataFields.Count).Name <> pvfField.Name Then
                                    .DataFields(.DataFields.Count).Name = pvfField.Name
                                End If
                                '------------------
528:                    End If
529:                    If .DataFields(pvfField.Name).Calculation <> pvfField.Calculation Then
530:                        .DataFields(pvfField.Name).Calculation = pvfField.Calculation
531:                    End If
532:                    If .DataFields(pvfField.Name).DataType <> pvfField.DataType Then
533:                        .DataFields(pvfField.Name).DataType = pvfField.DataType
534:                    End If
535:                    If .DataFields(pvfField.Name).NumberFormat <> pvfField.NumberFormat Then
536:                        .DataFields(pvfField.Name).NumberFormat = pvfField.NumberFormat
537:                    End If
538:                    If .DataFields(pvfField.Name).Position <> pvfField.Position Then
539:                        .DataFields(pvfField.Name).Position = pvfField.Position
540:                    End If
           '     Else
                    'The DataField is already a member of the DataFields Collection just
                    'update it's properties if needed
541:                    If .DataFields(pvfField.Name).Function <> pvfField.Function Then
542:                        .DataFields(pvfField.Name).Function = pvfField.Function
543:                    End If
544:                    If .DataFields(pvfField.Name).Calculation <> pvfField.Calculation Then
545:                        .DataFields(pvfField.Name).Calculation = pvfField.Calculation
546:                    End If
547:                    If .DataFields(pvfField.Name).DataType <> pvfField.DataType Then
548:                        .DataFields(pvfField.Name).DataType = pvfField.DataType
549:                    End If
550:                    If .DataFields(pvfField.Name).NumberFormat <> pvfField.NumberFormat Then
551:                        .DataFields(pvfField.Name).NumberFormat = pvfField.NumberFormat
552:                    End If
553:                    If .DataFields(pvfField.Name).Position <> pvfField.Position Then
554:                        .DataFields(pvfField.Name).Position = pvfField.Position
555:                    End If
          '      End If
                
556:            End With 'pivdest
        'End If
NextPivotField:

557:    Next 'DataField
    
558:    With pivDest
        'Add the Column, Row and page fields in one fail swoop
559:        If CBool(nRowCounter) And CBool(nColCounter) And CBool(nPageCounter) Then
560:            .AddFields RowFields:=varRows, _
                ColumnFields:=varCols, PageFields:=varPages
561:        ElseIf CBool(nRowCounter) And CBool(nColCounter) And Not CBool(nPageCounter) Then
562:            .AddFields RowFields:=varRows, _
                ColumnFields:=varCols
563:        ElseIf CBool(nRowCounter) And Not CBool(nColCounter) And CBool(nPageCounter) Then
564:            .AddFields RowFields:=varRows, _
                PageFields:=varPages
565:        ElseIf CBool(nRowCounter) And Not CBool(nColCounter) And Not CBool(nPageCounter) Then
566:            .AddFields RowFields:=varRows
567:        ElseIf Not CBool(nRowCounter) And CBool(nColCounter) And CBool(nPageCounter) Then
568:            .AddFields PageFields:=varPages, _
                ColumnFields:=varCols
569:        ElseIf Not CBool(nRowCounter) And Not CBool(nColCounter) And CBool(nPageCounter) Then
570:            .AddFields varPages
571:        ElseIf Not CBool(nRowCounter) And CBool(nColCounter) And Not CBool(nPageCounter) Then
572:            .AddFields ColumnFields:=varCols
573:        End If
        
        'set the sort of each columnfield
574:        For Each pvfField In .ColumnFields
575:            With pivSource.ColumnFields(pvfField.Name)
576:                If pvfField.AutoSortField <> .AutoSortField Or _
                    pvfField.AutoSortOrder <> .AutoSortOrder Then
                    
577:                        pvfField.AutoSort .AutoSortOrder, _
                                .AutoSortField
578:                End If
579:            End With
580:        Next
        
        'set the sort and Subtotals of each rowfield
581:        For Each pvfField In .RowFields
582:            With pivSource.RowFields(pvfField.Name)
583:                If pvfField.AutoSortField <> .AutoSortField Or _
                    pvfField.AutoSortOrder <> .AutoSortOrder Then
                    
584:                        pvfField.AutoSort .AutoSortOrder, _
                                .AutoSortField
               
585:                End If
            
                'There are 12 subtotal indexes each corresponding to a different
                'subtotaling method.  The Subtotals Method sets or returns a boolean
                'value indicating if that subtotaling method(sum, avg, etc...)
                'is used on the row field.
586:                For nSTIndex = 1 To 12
587:                    If pvfField.Subtotals(nSTIndex) <> .Subtotals(nSTIndex) Then
588:                        pvfField.Subtotals(nSTIndex) = .Subtotals(nSTIndex)
589:                    End If
590:                Next
            
591:            End With
592:        Next
        
         'set the sort of each pagefield
593:        For Each pvfField In .PageFields
594:            With pivSource.PageFields(pvfField.Name)
595:                If pvfField.AutoSortField <> .AutoSortField Or _
                    pvfField.AutoSortOrder <> .AutoSortOrder Then
                    
596:                        pvfField.AutoSort .AutoSortOrder, _
                                .AutoSortField
597:                End If
598:            End With
599:        Next
600:    End With
        
    'Now we have to set the widths of each column according
    'to the source View
    
    'We have some Pivot Table columns currently selected
    'move the focus to Cell A1
601:    pivDest.Parent.Range("A1").Select
    'LockWindowUpdate 0

End Sub
'****************************************************
'Sub DisplaySheet
'Purpose: Display worksheet for application on sRow
'Inputs:  sRow - The Row the application is on on the
'                coversheet
'Outputs: none
'****************************************************
Public Sub DisplaySheet(sRow As String)
    
    Dim sSheet As String
    Dim sLabelName As String
    Dim nIndex As Integer
    Dim bSheetExists As Boolean
602: On Error GoTo ErrorHandler

    
603:    sSheet = Worksheets(gcCoverSheetName).Range("E" & sRow).Value
        
    'Make sure the Helpfile exists
604:    bSheetExists = False
605:    On Error Resume Next
606:    Worksheets(sSheet).Activate
607:    Worksheets(sSheet).Range("A1").Select
    
608:    If Err.Number Then
609:        bSheetExists = False
610:    Else
611:        bSheetExists = True
612:    End If
    
613:    On Error GoTo ErrorHandler
    
614:    If Not bSheetExists Then
615:        MsgBox "Unable to Locate Sheet " & sSheet & ".", vbOKOnly, "Error Displaying Sheet"
616:    End If
    
617:    Exit Sub
ErrorHandler:
618:    MsgBox "Unable to Locate Sheet " & sSheet & ".", vbOKOnly, "Error Displaying Sheet"
        
End Sub


'Mod0005: row numbers bumped up +1 to even rows vs. odd rows
Public Sub lblSheetLink1_Click()
619:    DisplaySheet "4"
End Sub
Public Sub lblSheetLink2_Click()
620:    DisplaySheet "6"
End Sub
Public Sub lblSheetLink3_Click()
621:    DisplaySheet "8"
End Sub
Public Sub lblSheetLink4_Click()
622:    DisplaySheet "10"
End Sub
Public Sub lblSheetLink5_Click()
623:    DisplaySheet "12"
End Sub
Public Sub lblSheetLink6_Click()
624:    DisplaySheet "14"
End Sub
Public Sub lblSheetLink7_Click()
625:    DisplaySheet "16"
End Sub
Public Sub lblSheetLink8_Click()
626:    DisplaySheet "18"
End Sub
Public Sub lblSheetLink9_Click()
627:    DisplaySheet "20"
End Sub
Public Sub lblSheetLink10_Click()
628:    DisplaySheet "22"
End Sub
Public Sub lblSheetLink11_Click()
629:    DisplaySheet "24"
End Sub
Public Sub lblSheetLink12_Click()
630:    DisplaySheet "26"
End Sub
Public Sub lblSheetLink13_Click()
631:    DisplaySheet "28"
End Sub
Public Sub lblSheetLink14_Click()
632:    DisplaySheet "30"
End Sub
Public Sub lblSheetLink15_Click()
633:    DisplaySheet "32"
End Sub
Public Sub lblSheetLink16_Click()
634:    DisplaySheet "34"
End Sub
Public Sub lblSheetLink17_Click()
635:    DisplaySheet "36"
End Sub
Public Sub lblSheetLink18_Click()
636:    DisplaySheet "38"
End Sub
Public Sub lblSheetLink19_Click()
637:    DisplaySheet "40"
End Sub
Public Sub lblSheetLink20_Click()
638:    DisplaySheet "42"
End Sub
Public Sub lblSheetLink21_Click()
639:    DisplaySheet "44"
End Sub
Public Sub lblSheetLink22_Click()
640:    DisplaySheet "46"
End Sub
Public Sub lblSheetLink23_Click()
641:    DisplaySheet "48"
End Sub
Public Sub lblSheetLink24_Click()
642:    DisplaySheet "50"
End Sub
Public Sub lblSheetLink25_Click()
    DisplaySheet "52"
End Sub
Public Sub lblSheetLink26_Click()
    DisplaySheet "54"
End Sub
Public Sub lblSheetLink27_Click()
    DisplaySheet "56"
End Sub
Public Sub lblSheetLink28_Click()
    DisplaySheet "58"
End Sub
Public Sub lblSheetLink29_Click()
    DisplaySheet "60"
End Sub
Public Sub lblSheetLink30_Click()
    DisplaySheet "62"
End Sub
Public Sub lblSheetLink31_Click()
    DisplaySheet "64"
End Sub
Public Sub lblSheetLink32_Click()
    DisplaySheet "66"
End Sub
Public Sub lblSheetLink33_Click()
    DisplaySheet "68"
End Sub
Public Sub lblSheetLink34_Click()
    DisplaySheet "70"
End Sub
Public Sub lblSheetLink35_Click()
    DisplaySheet "72"
End Sub
Public Sub lblSheetLink36_Click()
    DisplaySheet "74"
End Sub
Public Sub lblSheetLink37_Click()
    DisplaySheet "76"
End Sub
Public Sub lblSheetLink38_Click()
    DisplaySheet "78"
End Sub
Public Sub lblSheetLink39_Click()
    DisplaySheet "80"
End Sub
Public Sub lblSheetLink40_Click()
    DisplaySheet "82"
End Sub
Public Sub lblSheetLink41_Click()
    DisplaySheet "84"
End Sub
Public Sub lblSheetLink42_Click()
    DisplaySheet "86"
End Sub
Public Sub lblSheetLink43_Click()
    DisplaySheet "88"
End Sub
Public Sub lblSheetLink44_Click()
    DisplaySheet "90"
End Sub
Public Sub lblSheetLink45_Click()
    DisplaySheet "92"
End Sub
Public Sub lblSheetLink46_Click()
    DisplaySheet "94"
End Sub
Public Sub lblSheetLink47_Click()
    DisplaySheet "96"
End Sub
Public Sub lblSheetLink48_Click()
    DisplaySheet "98"
End Sub
Public Sub lblSheetLink49_Click()
    DisplaySheet "100"
End Sub
Public Sub lblSheetLink50_Click()
    DisplaySheet "102"
End Sub
Public Sub lblSheetLink51_Click()
    DisplaySheet "104"
End Sub
Public Sub lblSheetLink52_Click()
    DisplaySheet "106"
End Sub
Public Sub lblSheetLink53_Click()
    DisplaySheet "108"
End Sub
Public Sub lblSheetLink54_Click()
    DisplaySheet "110"
End Sub
Public Sub lblSheetLink55_Click()
    DisplaySheet "112"
End Sub
Public Sub lblSheetLink56_Click()
    DisplaySheet "114"
End Sub
Public Sub lblSheetLink57_Click()
    DisplaySheet "116"
End Sub
Public Sub lblSheetLink58_Click()
    DisplaySheet "118"
End Sub
Public Sub lblSheetLink59_Click()
    DisplaySheet "120"
End Sub
Public Sub lblSheetLink60_Click()
    DisplaySheet "122"
End Sub
Public Sub lblSheetLink61_Click()
    DisplaySheet "124"
End Sub
Public Sub lblSheetLink62_Click()
    DisplaySheet "126"
End Sub
Public Sub lblSheetLink63_Click()
    DisplaySheet "128"
End Sub
Public Sub lblSheetLink64_Click()
    DisplaySheet "130"
End Sub
Public Sub lblSheetLink65_Click()
    DisplaySheet "132"
End Sub
Public Sub lblSheetLink66_Click()
    DisplaySheet "134"
End Sub
Public Sub lblSheetLink67_Click()
    DisplaySheet "136"
End Sub
Public Sub lblSheetLink68_Click()
    DisplaySheet "138"
End Sub
Public Sub lblSheetLink69_Click()
    DisplaySheet "140"
End Sub
Public Sub lblSheetLink70_Click()
    DisplaySheet "142"
End Sub
Public Sub lblSheetLink71_Click()
    DisplaySheet "144"
End Sub
Public Sub lblSheetLink72_Click()
    DisplaySheet "146"
End Sub
Public Sub lblSheetLink73_Click()
    DisplaySheet "148"
End Sub
Public Sub lblSheetLink74_Click()
    DisplaySheet "150"
End Sub
Public Sub lblSheetLink75_Click()
    DisplaySheet "152"
End Sub
Public Sub lblSheetLink76_Click()
    DisplaySheet "154"
End Sub
Public Sub lblSheetLink77_Click()
    DisplaySheet "156"
End Sub
Public Sub lblSheetLink78_Click()
    DisplaySheet "158"
End Sub
Public Sub lblSheetLink79_Click()
    DisplaySheet "160"
End Sub
Public Sub lblSheetLink80_Click()
    DisplaySheet "162"
End Sub
Public Sub lblSheetLink81_Click()
    DisplaySheet "164"
End Sub
Public Sub lblSheetLink82_Click()
    DisplaySheet "166"
End Sub
Public Sub lblSheetLink83_Click()
    DisplaySheet "168"
End Sub
Public Sub lblSheetLink84_Click()
    DisplaySheet "170"
End Sub
Public Sub lblSheetLink85_Click()
    DisplaySheet "172"
End Sub
Public Sub lblSheetLink86_Click()
    DisplaySheet "174"
End Sub
Public Sub lblSheetLink87_Click()
    DisplaySheet "176"
End Sub
Public Sub lblSheetLink88_Click()
    DisplaySheet "178"
End Sub
Public Sub lblSheetLink89_Click()
    DisplaySheet "180"
End Sub
Public Sub lblSheetLink90_Click()
    DisplaySheet "182"
End Sub
Public Sub lblSheetLink91_Click()
    DisplaySheet "184"
End Sub
Public Sub lblSheetLink92_Click()
    DisplaySheet "186"
End Sub
Public Sub lblSheetLink93_Click()
    DisplaySheet "188"
End Sub
Public Sub lblSheetLink94_Click()
    DisplaySheet "190"
End Sub
Public Sub lblSheetLink95_Click()
    DisplaySheet "192"
End Sub
Public Sub lblSheetLink96_Click()
    DisplaySheet "194"
End Sub
Public Sub lblSheetLink97_Click()
    DisplaySheet "196"
End Sub
Public Sub lblSheetLink98_Click()
    DisplaySheet "198"
End Sub
Public Sub lblSheetLink99_Click()
    DisplaySheet "200"
End Sub
Public Sub lblSheetLink100_Click()
    DisplaySheet "202"
End Sub
Public Sub lblSheetLink101_Click()
    DisplaySheet "204"
End Sub
Public Sub lblSheetLink102_Click()
    DisplaySheet "206"
End Sub
Public Sub lblSheetLink103_Click()
    DisplaySheet "208"
End Sub
Public Sub lblSheetLink104_Click()
    DisplaySheet "210"
End Sub
Public Sub lblSheetLink105_Click()
    DisplaySheet "212"
End Sub
Public Sub lblSheetLink106_Click()
    DisplaySheet "214"
End Sub
Public Sub lblSheetLink107_Click()
    DisplaySheet "216"
End Sub
Public Sub lblSheetLink108_Click()
    DisplaySheet "218"
End Sub
Public Sub lblSheetLink109_Click()
    DisplaySheet "220"
End Sub
Public Sub lblSheetLink110_Click()
    DisplaySheet "222"
End Sub
Public Sub lblSheetLink111_Click()
    DisplaySheet "224"
End Sub
Public Sub lblSheetLink112_Click()
    DisplaySheet "226"
End Sub
Public Sub lblSheetLink113_Click()
    DisplaySheet "228"
End Sub
Public Sub lblSheetLink114_Click()
    DisplaySheet "230"
End Sub
Public Sub lblSheetLink115_Click()
    DisplaySheet "232"
End Sub
Public Sub lblSheetLink116_Click()
    DisplaySheet "234"
End Sub
Public Sub lblSheetLink117_Click()
    DisplaySheet "236"
End Sub
Public Sub lblSheetLink118_Click()
    DisplaySheet "238"
End Sub
Public Sub lblSheetLink119_Click()
    DisplaySheet "240"
End Sub
Public Sub lblSheetLink120_Click()
    DisplaySheet "242"
End Sub
Public Sub lblSheetLink121_Click()
    DisplaySheet "244"
End Sub
Public Sub lblSheetLink122_Click()
    DisplaySheet "246"
End Sub
Public Sub lblSheetLink123_Click()
    DisplaySheet "248"
End Sub
Public Sub lblSheetLink124_Click()
    DisplaySheet "250"
End Sub
Public Sub lblSheetLink125_Click()
    DisplaySheet "252"
End Sub
Public Sub lblSheetLink126_Click()
    DisplaySheet "254"
End Sub
Public Sub lblSheetLink127_Click()
    DisplaySheet "256"
End Sub
Public Sub lblSheetLink128_Click()
    DisplaySheet "258"
End Sub
Public Sub lblSheetLink129_Click()
    DisplaySheet "260"
End Sub
Public Sub lblSheetLink130_Click()
    DisplaySheet "262"
End Sub
Public Sub lblSheetLink131_Click()
    DisplaySheet "264"
End Sub
Public Sub lblSheetLink132_Click()
    DisplaySheet "266"
End Sub
Public Sub lblSheetLink133_Click()
    DisplaySheet "268"
End Sub
Public Sub lblSheetLink134_Click()
    DisplaySheet "270"
End Sub
Public Sub lblSheetLink135_Click()
    DisplaySheet "272"
End Sub
Public Sub lblSheetLink136_Click()
    DisplaySheet "274"
End Sub
Public Sub lblSheetLink137_Click()
    DisplaySheet "276"
End Sub
Public Sub lblSheetLink138_Click()
    DisplaySheet "278"
End Sub
Public Sub lblSheetLink139_Click()
    DisplaySheet "280"
End Sub
Public Sub lblSheetLink140_Click()
    DisplaySheet "282"
End Sub
Public Sub lblSheetLink141_Click()
    DisplaySheet "284"
End Sub
Public Sub lblSheetLink142_Click()
    DisplaySheet "286"
End Sub
Public Sub lblSheetLink143_Click()
    DisplaySheet "288"
End Sub
Public Sub lblSheetLink144_Click()
    DisplaySheet "290"
End Sub
Public Sub lblSheetLink145_Click()
    DisplaySheet "292"
End Sub
Public Sub lblSheetLink146_Click()
    DisplaySheet "294"
End Sub
Public Sub lblSheetLink147_Click()
    DisplaySheet "296"
End Sub
Public Sub lblSheetLink148_Click()
    DisplaySheet "298"
End Sub
Public Sub lblSheetLink149_Click()
    DisplaySheet "300"
End Sub
Public Sub lblSheetLink150_Click()
    DisplaySheet "302"
End Sub
Public Sub lblSheetLink151_Click()
    DisplaySheet "304"
End Sub
Public Sub lblSheetLink152_Click()
    DisplaySheet "306"
End Sub
Public Sub lblSheetLink153_Click()
    DisplaySheet "308"
End Sub
Public Sub lblSheetLink154_Click()
    DisplaySheet "310"
End Sub
Public Sub lblSheetLink155_Click()
    DisplaySheet "312"
End Sub
Public Sub lblSheetLink156_Click()
    DisplaySheet "314"
End Sub
Public Sub lblSheetLink157_Click()
    DisplaySheet "316"
End Sub
Public Sub lblSheetLink158_Click()
    DisplaySheet "318"
End Sub
Public Sub lblSheetLink159_Click()
    DisplaySheet "320"
End Sub
Public Sub lblSheetLink160_Click()
    DisplaySheet "322"
End Sub
Public Sub lblSheetLink161_Click()
    DisplaySheet "324"
End Sub
Public Sub lblSheetLink162_Click()
    DisplaySheet "326"
End Sub
Public Sub lblSheetLink163_Click()
    DisplaySheet "328"
End Sub
Public Sub lblSheetLink164_Click()
    DisplaySheet "330"
End Sub
Public Sub lblSheetLink165_Click()
    DisplaySheet "332"
End Sub
Public Sub lblSheetLink166_Click()
    DisplaySheet "334"
End Sub
Public Sub lblSheetLink167_Click()
    DisplaySheet "336"
End Sub
Public Sub lblSheetLink168_Click()
    DisplaySheet "338"
End Sub
Public Sub lblSheetLink169_Click()
    DisplaySheet "340"
End Sub
Public Sub lblSheetLink170_Click()
    DisplaySheet "342"
End Sub
Public Sub lblSheetLink171_Click()
    DisplaySheet "344"
End Sub
Public Sub lblSheetLink172_Click()
    DisplaySheet "346"
End Sub
Public Sub lblSheetLink173_Click()
    DisplaySheet "348"
End Sub
Public Sub lblSheetLink174_Click()
    DisplaySheet "350"
End Sub
Public Sub lblSheetLink175_Click()
    DisplaySheet "352"
End Sub
Public Sub lblSheetLink176_Click()
    DisplaySheet "354"
End Sub
Public Sub lblSheetLink177_Click()
    DisplaySheet "356"
End Sub
Public Sub lblSheetLink178_Click()
    DisplaySheet "358"
End Sub
Public Sub lblSheetLink179_Click()
    DisplaySheet "360"
End Sub
Public Sub lblSheetLink180_Click()
    DisplaySheet "362"
End Sub
Public Sub lblSheetLink181_Click()
    DisplaySheet "364"
End Sub
Public Sub lblSheetLink182_Click()
    DisplaySheet "366"
End Sub
Public Sub lblSheetLink183_Click()
    DisplaySheet "368"
End Sub
Public Sub lblSheetLink184_Click()
    DisplaySheet "370"
End Sub
Public Sub lblSheetLink185_Click()
    DisplaySheet "372"
End Sub
Public Sub lblSheetLink186_Click()
    DisplaySheet "374"
End Sub
Public Sub lblSheetLink187_Click()
    DisplaySheet "376"
End Sub
Public Sub lblSheetLink188_Click()
    DisplaySheet "378"
End Sub
Public Sub lblSheetLink189_Click()
    DisplaySheet "380"
End Sub
Public Sub lblSheetLink190_Click()
    DisplaySheet "382"
End Sub
Public Sub lblSheetLink191_Click()
    DisplaySheet "384"
End Sub
Public Sub lblSheetLink192_Click()
    DisplaySheet "386"
End Sub
Public Sub lblSheetLink193_Click()
    DisplaySheet "388"
End Sub
Public Sub lblSheetLink194_Click()
    DisplaySheet "390"
End Sub
Public Sub lblSheetLink195_Click()
    DisplaySheet "392"
End Sub
Public Sub lblSheetLink196_Click()
    DisplaySheet "394"
End Sub
Public Sub lblSheetLink197_Click()
    DisplaySheet "396"
End Sub
Public Sub lblSheetLink198_Click()
    DisplaySheet "398"
End Sub
Public Sub lblSheetLink199_Click()
    DisplaySheet "400"
End Sub
Public Sub lblSheetLink200_Click()
    DisplaySheet "402"
End Sub
Public Sub lblSheetLink201_Click()
    DisplaySheet "404"
End Sub
Public Sub lblSheetLink202_Click()
    DisplaySheet "406"
End Sub
Public Sub lblSheetLink203_Click()
    DisplaySheet "408"
End Sub
Public Sub lblSheetLink204_Click()
    DisplaySheet "410"
End Sub
Public Sub lblSheetLink205_Click()
    DisplaySheet "412"
End Sub
Public Sub lblSheetLink206_Click()
    DisplaySheet "414"
End Sub
Public Sub lblSheetLink207_Click()
    DisplaySheet "416"
End Sub
Public Sub lblSheetLink208_Click()
    DisplaySheet "418"
End Sub
Public Sub lblSheetLink209_Click()
    DisplaySheet "420"
End Sub
Public Sub lblSheetLink210_Click()
    DisplaySheet "422"
End Sub
Public Sub lblSheetLink211_Click()
    DisplaySheet "424"
End Sub
Public Sub lblSheetLink212_Click()
    DisplaySheet "426"
End Sub
Public Sub lblSheetLink213_Click()
    DisplaySheet "428"
End Sub
Public Sub lblSheetLink214_Click()
    DisplaySheet "430"
End Sub
Public Sub lblSheetLink215_Click()
    DisplaySheet "432"
End Sub
Public Sub lblSheetLink216_Click()
    DisplaySheet "434"
End Sub
Public Sub lblSheetLink217_Click()
    DisplaySheet "436"
End Sub
Public Sub lblSheetLink218_Click()
    DisplaySheet "438"
End Sub
Public Sub lblSheetLink219_Click()
    DisplaySheet "440"
End Sub
Public Sub lblSheetLink220_Click()
    DisplaySheet "442"
End Sub
Public Sub lblSheetLink221_Click()
    DisplaySheet "444"
End Sub
Public Sub lblSheetLink222_Click()
    DisplaySheet "446"
End Sub
Public Sub lblSheetLink223_Click()
    DisplaySheet "448"
End Sub
Public Sub lblSheetLink224_Click()
    DisplaySheet "450"
End Sub
Public Sub lblSheetLink225_Click()
    DisplaySheet "452"
End Sub
Public Sub lblSheetLink226_Click()
    DisplaySheet "454"
End Sub
Public Sub lblSheetLink227_Click()
    DisplaySheet "456"
End Sub
Public Sub lblSheetLink228_Click()
    DisplaySheet "458"
End Sub
Public Sub lblSheetLink229_Click()
    DisplaySheet "460"
End Sub
Public Sub lblSheetLink230_Click()
    DisplaySheet "462"
End Sub
Public Sub lblSheetLink231_Click()
    DisplaySheet "464"
End Sub
Public Sub lblSheetLink232_Click()
    DisplaySheet "466"
End Sub
Public Sub lblSheetLink233_Click()
    DisplaySheet "468"
End Sub
Public Sub lblSheetLink234_Click()
    DisplaySheet "470"
End Sub
Public Sub lblSheetLink235_Click()
    DisplaySheet "472"
End Sub
Public Sub lblSheetLink236_Click()
    DisplaySheet "474"
End Sub
Public Sub lblSheetLink237_Click()
    DisplaySheet "476"
End Sub
Public Sub lblSheetLink238_Click()
    DisplaySheet "478"
End Sub
Public Sub lblSheetLink239_Click()
    DisplaySheet "480"
End Sub
Public Sub lblSheetLink240_Click()
    DisplaySheet "482"
End Sub
Public Sub lblSheetLink241_Click()
    DisplaySheet "484"
End Sub
Public Sub lblSheetLink242_Click()
    DisplaySheet "486"
End Sub
Public Sub lblSheetLink243_Click()
    DisplaySheet "488"
End Sub
Public Sub lblSheetLink244_Click()
    DisplaySheet "490"
End Sub
Public Sub lblSheetLink245_Click()
    DisplaySheet "492"
End Sub
Public Sub lblSheetLink246_Click()
    DisplaySheet "494"
End Sub
Public Sub lblSheetLink247_Click()
    DisplaySheet "496"
End Sub
Public Sub lblSheetLink248_Click()
    DisplaySheet "498"
End Sub
Public Sub lblSheetLink249_Click()
    DisplaySheet "500"
End Sub
Public Sub lblSheetLink250_Click()
    DisplaySheet "502"
End Sub
Public Sub lblSheetLink251_Click()
    DisplaySheet "504"
End Sub
Public Sub lblSheetLink252_Click()
    DisplaySheet "506"
End Sub
Public Sub lblSheetLink253_Click()
    DisplaySheet "508"
End Sub
Public Sub lblSheetLink254_Click()
    DisplaySheet "510"
End Sub
Private Sub AlignSuperHeader()
    
    Dim nRow As Integer
    Dim sStartRange As String
    Dim sEndRange As String
    Dim sHeaderRange As String
    Dim nOrgWidth As Double
    Dim dExpWidth As Double
    Dim scol As String
    Dim dSelectionWidth As Double
    
644:    With ActiveSheet
        'First we need to get the range of the SuperHeader
645:        nRow = 1
646:        sStartRange = ""
647:        sEndRange = ""
648:        Do While True
            
649:            If CBool(Len(Trim(.Range("A" & nRow)))) And Not IsEmpty(.Range("A" & nRow).Value) Then
650:                If Not CBool(Len(sStartRange)) Then
651:                    sStartRange = "A" & nRow
652:                Else
653:                    sEndRange = "A" & nRow
654:                End If
655:            ElseIf CBool(Len(sStartRange)) Then
656:                Exit Do
657:            End If
658:            nRow = nRow + 1
            
659:            If nRow >= .PivotTables(1).TableRange2.ROW Then
660:                If sStartRange = "" Then
                    'No superheader
661:                    Exit Sub
662:                End If
                'Only one superheader
663:                sEndRange = sStartRange
664:                Exit Do
665:            End If
666:        Loop
    
        'we have our superheader range
667:        If Len(sEndRange) = 0 Then
668:            sEndRange = sStartRange
669:        End If
670:        sHeaderRange = sStartRange & ":" & sEndRange
671:        .Range(sHeaderRange).Select
672:        With Selection
673:            .MergeCells = False
674:        End With
        
        'save original width
675:        nOrgWidth = .Columns("A").ColumnWidth
        'autofit the superheader column
676:        .Columns("A").AutoFit
        'store the expaned width
677:        dExpWidth = .Columns("A").ColumnWidth
        'set superheader column back to original width
678:        .Columns("A").ColumnWidth = nOrgWidth
        
679:        .Range(sStartRange).Select
        
680:        nRow = Selection.ROW
        
        'Remerge cells of Superheader based on it's width
681:        Do While nRow <= .Range(sEndRange).ROW
        
682:            scol = "A"
683:            .Range(scol & nRow).Select
            'This will not work for AA-ZZ but there will never be a case where
            'the superheader will extend that far
684:            dSelectionWidth = Selection.ColumnWidth
685:            While dSelectionWidth < dExpWidth
686:                scol = Chr(Asc(scol) + 1)
687:                dSelectionWidth = dSelectionWidth + .Columns(scol).ColumnWidth
688:                .Range("A" & nRow & ":" & scol & nRow).Select
689:            Wend
690:            Selection.MergeCells = True
691:            nRow = Selection.ROW + 1
            
692:        Loop
693:    End With
    
End Sub

Private Function FormatTextToHTM(sText As String) As String

    Dim nChar As Integer
    Dim sChar As String * 1
    
694:    sText = Trim$(sText)
    
    'Squash out spaces
695:    While InStr(1, sText, " ", vbTextCompare)
696:        sText = LeftOf(sText, " ") & RightOf(sText, " ")
697:    Wend
    
    'get rid of non-alpahnumeric characters
698:    For nChar = 1 To Len(sText)
699:        sChar = Mid$(sText, nChar, 1)
700:        If Not IsNumeric(sChar) And ((Asc(sChar) < 65) Or (Asc(sChar) > 90 And Asc(sChar) < 97) Or (Asc(sChar) > 122)) Then
            'INvalid character replace it with "."
701:            Mid$(sText, nChar, 1) = "."
702:        End If
703:    Next
    
704:    FormatTextToHTM = sText
    
End Function


'************************************
'*  GetFileName:
'*    Purpose:  Return the filename
'*              from a filepath\name string
'*    Inputs:   sFile by value is the full filename and path
'*    Outputs:  the filename
'************************************
Public Function FileName$(ByVal sfile As String)
  Dim sPath As String

705:  FileName = ""

        '* split into path and filename
706:  Do While InStr(sfile, "\")
707:    sPath = sPath & LeftOf$(sfile, "\") & "\"
708:    sfile = RightOf$(sfile, "\")
709:  Loop
710:  FileName = sfile
End Function


Private Function UrlEncode(ByVal sVal As String) As String
711:  On Error Resume Next
'<cfset client.mx_sIEProblemChars="\,%,##,&,+">
'<cfset client.mx_sIEMaskChars   ="/,|per,|pnd,|and,|pls">
712:  sVal = ReplaceAll(sVal, "\", "/")
713:  sVal = ReplaceAll(sVal, "%", "|per")
714:  sVal = ReplaceAll(sVal, "#", "|pnd") 'slight difference here, VB doesn't care about ##
715:  sVal = ReplaceAll(sVal, "&", "|and")
716:  sVal = ReplaceAll(sVal, "+", "|pls")
717:  sVal = ReplaceAll(sVal, " ", "%20")
718:  UrlEncode = sVal
End Function


Private Function ReplaceAll(ByVal sString As String, _
  ByVal sSearch As String, ByVal sReplace As String) As String
'-------------------- Code Body Starts --------------------
Dim sTemp As String
Dim nPos As Integer

719:  nPos = 1 'set start position for search
  
720:  While InStr(nPos, sString, sSearch)     'Loop through while search string exists
721:    nPos = InStr(nPos, sString, sSearch)            'Get position of search in string
722:    sTemp = Left$(sString, nPos - 1) & sReplace     'Create temp string with replacement value
723:    sTemp = sTemp & Mid$(sString, nPos + Len(sSearch), (Len(sString) + 1) - (nPos + Len(sSearch)))  'Append rest of string to temp
724:    sString = sTemp                                 'Set string to new value
725:    nPos = nPos + Len(sReplace)                     'Set start position for next search
726:  Wend
  
727:  ReplaceAll = sString

End Function


'Mod0005:new function to attach the "Back to Output Folder" hyperlink to
Public Sub BackToOutputFolder2()
728:  Application.Quit
End Sub

Public Sub ConvertXMPtoWOR()

    Dim sWorconverter As String
    Dim bClaritasMappingEnabled As Boolean
    Dim sSheetName As String
    Dim sXMP As String
    Dim wb As Workbook
    Dim wbLaunch As Workbook
    Dim bInforumOnline As Boolean
    Dim bDesktopUser As Boolean

729:    bInforumOnline = ConvertToBoolean(False, INIFileRead("FrontEnd", _
                                    "InforumOnline", "Z:\Windows\Inforum.ini"))
                                            
730:    bDesktopUser = Not (bInforumOnline)
                                    
731:    bClaritasMappingEnabled = ConvertToBoolean(False, INIFileRead("Inforum Platform Toolbox", _
                                    "ClaritasMappingEnabled", "Z:\Windows\Inforum.ini"))
    
        
    'Get the path to the worconverter.  If it is INforumOnline default to
    'X:\Inforum Platform\Inforum Interface\worconverter.exe else
    'C:\medstat platform\inforum interface\worconverter.exe
732:    sWorconverter = INIFileRead("Inforum Platform", "WorConverter", "Z:\Windows\Inforum.ini", "")
        
    
733:    If Len(sWorconverter) = 0 And bInforumOnline Then
734:        sWorconverter = "X:\Inforum Platform\Inforum Interface\worconverter.exe"
735:    ElseIf Len(sWorconverter) = 0 And bDesktopUser Then
736:        sWorconverter = "C:\Medstat Platform\Inforum Interface\worconverter.exe"
737:    End If
        'v1.0 CSC: Change the support number from 1-800-899-0600 to 1-877-843-6796
738:    If Len(Dir(sWorconverter)) = 0 Then
739:        MsgBox "Unable to locate Conversion Program" & _
                IIf(Len(sWorconverter), "(" & sWorconverter & ")", "") & _
                ".  This functionality is only " & _
                "available in MarketExpert." & vbCrLf & vbCrLf & _
                "If you feel this is an error " & _
                "Please contact IBM Market Expert Product support at 1-877-843-6796"
740:        Exit Sub
741:    End If
    
'   Close Mapviewer if it is currently open so it will release the xmp.
742:    On Error Resume Next
743:    For Each wb In Workbooks
744:        If wb.Name Like "Launcher*" Or _
            wb.Name Like "Dev Launcher*" Or _
            wb.Name Like "Prog Launcher*" Or _
            wb.Name Like "QA Launcher*" Then
745:            Set wbLaunch = Workbooks(wb.Name)
746:            wbLaunch.stopmap
747:            wbLaunch.AllowClose = True
748:            Exit For
749:        End If
750:    Next
    
751:    On Error Resume Next
    
    'Get the Sheet name and xmp name
752:    sSheetName = ActiveSheet.Name
753:    sXMP = ActiveWorkbook.Path & "\" & LeftOf(ActiveWorkbook.Name, ".xlsm") & ".xmp"
    
'   Hide the Excel Interface
754:    Application.Interactive = False
755:    Application.Visible = False
756:    DoEvents
    
'   Call the WorConverter.exe with the path and name of the currently open workbook replacing the .xlsx with .xmp and the name of the Active worksheet.  Wait for the Worconverter to finish processing.
757:    ShellPause sWorconverter & " """ & sXMP & """ """ & sSheetName & """"
    
'   Display the Excel Interface
758:    Application.Interactive = True
759:    Application.Visible = True
760:    DoEvents
    
End Sub

'*****************************
'*  ShellPause:
'*    Purpose:  run another program using
'*              the shell command and wait for
'*              the second program to finish
'*    Inputs:
'*      sCmdLine - the command line that
'*                 is used to start the
'*                 second program
'*      iMode - the mode to run the
'*              second program in. Ex. Maximized
'*      optional lWaitFor_MS - # of milliseconds to wait
'*               default = 1000 (1sec)
'*****************************
Public Sub ShellPause(ByVal sCMDLine As String, _
                 Optional ByVal lWaitFor_MS As Long = 1000)
  Dim tProcessInfo As typProcessInfo, tStartInfo As typStartUpInfo
  Dim bInheritHandle As Boolean
  
    '* get the number of bytes tStartInfo needs
761:  tStartInfo.cb = Len(tStartInfo)
  
762:  With tProcessInfo
        '* create the process
763:    .dwProcessId = Shell(sCMDLine, vbNormalFocus) 'vbNormalFocus
        '* create the get its process handle
764:    .hProcess = OpenProcess(SYNCHRONIZE, bInheritHandle, tProcessInfo.dwProcessId)
765:    If .hProcess = 0 Then
766:      Err.Raise NotStarted, "modShelPause: ShellPause()", _
              "Could not start the new process: " & sCMDLine
767:      Exit Sub
768:    End If
        
        '* wait for the process to finish
769:    Do While Timeout = WaitForSingleObjectEx(.hProcess, lWaitFor_MS, True)
        '* process any events and keep waiting
770:      DoEvents
771:    Loop
      '* close the process/release the handle
772:    CloseHandle .hProcess
773:  End With
End Sub

'*******************************
'* ConvertToBoolean():
'*
'* Returns:
'*    TRUE, FALSE or raises an error (-1)
'*    If an error is raised, the boolDefault is returned
'*    If vBool is a string:
'*      If vBool is a string representation of a number:
'*        returns 0=False any other value=True
'*      If vBool is a not the string representation of a number:
'*        see Select Case UCase$(Trim$(vBool)) for True/False lists
'*
'* Inputs:
'*    boolDefault As Boolean
'*    Optional vBool As Variant
'*******************************
Public Function ConvertToBoolean(boolDefault As Boolean, _
    Optional vBool As Variant) As Boolean
 
774:  ConvertToBoolean = boolDefault 'just in case...
  
775:  If IsMissing(vBool) Then
776:    Exit Function 'simply return the default
777:  Else
778:    Select Case VarType(vBool)
        'if it's numeric
      Case vbInteger, vbLong, vbSingle, vbDouble, vbCurrency, vbByte, vbBoolean
779:        If Abs(vBool) Then
780:          ConvertToBoolean = True
781:        Else
782:          ConvertToBoolean = False
783:        End If
        'it's a string
784:      Case vbString
          'if it's the string representation of a number
785:        If IsNumeric(vBool) Then
786:          If Abs(Val(vBool)) Then
787:            ConvertToBoolean = True
788:          Else
789:            ConvertToBoolean = False
790:          End If
791:        End If
          'common string 'boolean' values
          '*** please note that an empty string
          '*** does not equate to False - the
          '*** boolDefault value is returned
792:        Select Case UCase$(Trim$(vBool))
          Case "TRUE", "T", "YES", "Y", "ON", "+"
793:            ConvertToBoolean = True
794:          Case "FALSE", "F", "NO", "N", "OFF", "-"
795:            ConvertToBoolean = False
796:        End Select
797:    End Select
798:  End If


End Function

Public Function PromptForWorConverter(sDefaultPath As String) As String

  Dim of As OPENFILENAME, sRes As String
    
  Const MAX_PATH = 260
  
799:  PromptForWorConverter = ""

800:  of.lStructSize = Len(of)
801:  of.hwndOwner = Application.hwnd
802:  of.hInstance = 0
803:  of.lpstrFilter = "WorConverter (WorConverter.exe)" & Chr$(0) & "worConverter.exe" & Chr$(0) & Chr$(0)
804:  of.lpstrCustomFilter = vbNullString
805:  of.nMaxCustFilter = 0
806:  of.nFilterIndex = 0
807:  of.lpstrFile = sDefaultPath & Space$(254 - Len(sDefaultPath))
808:  of.nMaxFile = 255
809:  of.lpstrFileTitle = vbNullString
810:  of.nMaxFileTitle = 0
811:  of.lpstrInitialDir = ExtractPath(sDefaultPath)
812:  of.lpstrTitle = "Worconverter.exe"
813:  of.nFileOffset = 0
814:  of.nFileExtension = 0
815:  of.lpstrDefExt = ""
816:  of.lCustData = 0
817:  of.lpfnHook = 0
818:  of.lpTemplateName = vbNullString
819:  of.flags = OFN_FILEMUSTEXIST Or OFN_HIDEREADONLY Or OFN_EXPLORER Or OFN_PATHMUSTEXIST
  
820:  If GetOpenFileName(of) <> 0 Then
821:    sRes = RTrim(of.lpstrFile)
822:    If Asc(Right$(sRes, 1)) = 0 Then
823:      sRes = Left$(sRes, Len(sRes) - 1)
824:    End If
825:    PromptForWorConverter = sRes
826:  Else 'User clicked cancel
827:    PromptForWorConverter = "usercancel"
828:  End If
  
End Function

Private Function ExtractPath(ByVal file_path As String) As String
  Dim i As Integer
829:  ExtractPath = ""
830:  For i = Len(file_path) To 1 Step -1
831:    If (Mid(file_path, i, 1) = "\") Then
832:      ExtractPath = Left(file_path, i - 1)
833:      Exit For
834:    End If
835:  Next i
End Function

'Dinesh Advanced excel charts - starts-28 AUG 2017
Sub Gobutton1()
Gobutton 1, 13
End Sub
Sub Gobutton2()
Gobutton 2, 16
End Sub
Sub Gobutton3()
Gobutton 3, 19
End Sub
Sub Gobutton4()
Gobutton 4, 22
End Sub
Sub Gobutton5()
Gobutton 5, 25
End Sub
Sub Gobutton6()
Gobutton 6, 28
End Sub
Sub Gobutton7()
Gobutton 7, 31
End Sub
Sub Gobutton8()
Gobutton 8, 34
End Sub
Sub Gobutton9()
Gobutton 9, 37
End Sub
Sub Gobutton10()
Gobutton 10, 40
End Sub

Sub defaultview1()
defaultview 1
End Sub
Sub defaultview2()
defaultview 2
End Sub
Sub defaultview3()
defaultview 3
End Sub
Sub defaultview4()
defaultview 4
End Sub
Sub defaultview5()
defaultview 5
End Sub
Sub defaultview6()
defaultview 6
End Sub
Sub defaultview7()
defaultview 7
End Sub
Sub defaultview8()
defaultview 8
End Sub
Sub defaultview9()
defaultview 9
End Sub
Sub defaultview10()
defaultview 10
End Sub

Sub Defaultchart(chType As Integer)

Select Case chType
Case 1:
    strChartType_new = "Area"
Case -4098:
    strChartType_new = "3DArea"
Case 78:
    strChartType_new = "3DAreaStacked"
Case 79:
    strChartType_new = "3DAreaStacked100"
Case 60:
    strChartType_new = "3DBarClustered"
Case 61:
    strChartType_new = "3DBarStacked"
Case 62:
    strChartType_new = "3DBarStacked100"
Case -4100:
    strChartType_new = "3DColumn"
Case 54:
    strChartType_new = "3DColumnClustered"
Case 55:
    strChartType_new = "3DColumnStacked"
Case 56:
    strChartType_new = "3DColumnStacked100"
Case -4101:
    strChartType_new = "3DLine"
Case -4102:
    strChartType_new = "3DPie"
Case 70:
    strChartType_new = "3DPieExploded"
Case 77:
    strChartType_new = "AreaStacked100"
Case 57:
    strChartType_new = "BarClustered"
Case 71:
    strChartType_new = "BarOfPie"
Case 58:
    strChartType_new = "BarStacked"
Case 59:
    strChartType_new = "BarStacked100"
Case 15:
    strChartType_new = "Bubble"
Case 87:
    strChartType_new = "Bubble3DEffect"
Case 51:
    strChartType_new = "ColumnClustered"
Case 52:
    strChartType_new = "ColumnStacked"
Case 53:
    strChartType_new = "ColumnStacked100"
Case 102:
    strChartType_new = "ConeBarClustered"
Case 103:
    strChartType_new = "ConeBarStacked"
Case 104:
    strChartType_new = "ConeBarStacked100"
Case 105:
    strChartType_new = "ConeCol"
Case 99:
    strChartType_new = "ConeColClustered"
Case 100:
    strChartType_new = "ConeColStacked"
Case 101:
    strChartType_new = "ConeColStacked100"
Case 95:
    strChartType_new = "CylinderBarClustered"
Case 96:
    strChartType_new = "CylinderBarStacked"
Case 97:
    strChartType_new = "CylinderBarStacked100"
Case 98:
    strChartType_new = "CylinderCol"
Case 92:
    strChartType_new = "CylinderColClustered"
Case 93:
    strChartType_new = "CylinderColStacked"
Case 94:
    strChartType_new = "CylinderColStacked100"
Case -4120:
    strChartType_new = "Doughnut"
Case 80:
    strChartType_new = "DoughnutExploded"
Case 4:
    strChartType_new = "Line"
Case 65:
    strChartType_new = "LineMarkers"
Case 66:
    strChartType_new = "LineMarkersStacked"
Case 67:
    strChartType_new = "LineMarkersStacked100"
Case 63:
    strChartType_new = "LineStacked"
Case 64:
    strChartType_new = "LineStacked100"
Case 5:
    strChartType_new = "Pie"
Case 110:
    strChartType_new = "PyramidBarStacked"
Case 111:
    strChartType_new = "PyramidBarStacked100"
Case 112:
    strChartType_new = "PyramidCol"
Case 106:
    strChartType_new = "PyramidColClustered"
Case 107:
    strChartType_new = "PyramidColStacked"
Case 108:
    strChartType_new = "PyramidColStacked100"
Case -4169:
    strChartType_new = "XYScatter"
Case 74:
    strChartType_new = "XYScatterLines"
Case 75:
    strChartType_new = "XYScatterLinesNoMarkers"
Case 72:
    strChartType_new = "XYScatterSmooth"
Case 73:
    strChartType_new = "XYScatterSmoothNoMarkers"
End Select

End Sub

Sub defaultview(i As Integer)
Dim ws As Worksheet
Dim objChrt As ChartObject
Dim chrt As Chart
Dim ChartType As XlChartType
Dim Defaulti As String
Dim j As Integer, k As Integer
Dim c As Integer
Dim Dv As Integer


c = Worksheets(ActiveSheet.Name).ChartObjects.Count
'j = ActiveSheet.ChartObjects(c).BottomRightCell.Column

j = 0
For k = 1 To c
 If j < ActiveSheet.ChartObjects(k).BottomRightCell.Column Then
   j = ActiveSheet.ChartObjects(k).BottomRightCell.Column
 End If
Next k
Dv = j + 2
Set ws = ActiveSheet
Set objChrt = ActiveSheet.ChartObjects(ActiveSheet.ChartObjects(i).Name)
Set chrt = objChrt.Chart
Defaulti = "Default" & i
chrt.ChartType = Range(Defaulti)
Defaultchart chrt.ChartType
If Defaulti = "Default" & 1 Then
ActiveSheet.Cells(13, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 2 Then
ActiveSheet.Cells(16, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 3 Then
ActiveSheet.Cells(19, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 4 Then
ActiveSheet.Cells(22, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 5 Then
ActiveSheet.Cells(25, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 6 Then
ActiveSheet.Cells(28, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 7 Then
ActiveSheet.Cells(31, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 8 Then
ActiveSheet.Cells(34, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 9 Then
ActiveSheet.Cells(37, Dv) = strChartType_new
ElseIf Defaulti = "Default" & 10 Then
ActiveSheet.Cells(40, Dv) = strChartType_new
End If

End Sub

Sub Gobutton(i As Integer, x As Integer)
Dim ws As Worksheet
Dim objChrt As ChartObject
Dim chrt As Chart
Dim sxaxis As String
Dim syaxis As String
Dim chrtSQP As Chart
Dim ChartType As XlChartType
Dim chrtyp As String
Dim wkSheet As Worksheet
Dim chartsWorki As String
Set ws = ActiveSheet
Set objChrt = ws.ChartObjects(ws.ChartObjects(i).Name)
Set chrt = objChrt.Chart
Set chrtSQP = objChrt.Chart


chartsWorki = "chartswork" & i

For Each wkSheet In ActiveWorkbook.Worksheets
    
    On Error Resume Next
   sxaxis = chrtSQP.Axes(xlValue, xlPrimary).AxisTitle.Characters.Text
   syaxis = chrtSQP.Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text

    On Error GoTo 0
    
    If sxaxis <> "" And syaxis <> "" Then
    
     sxaxis = chrtSQP.Axes(xlValue, xlPrimary).AxisTitle.Characters.Text
     syaxis = chrtSQP.Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text
    
     On Error GoTo ErrGoButton
     
      Select Case ws.Range(chartsWorki)
              Case "3DArea"
             chrt.ChartType = xl3DArea
             
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
   
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
    
       
    Case "3DAreaStacked"
        chrt.ChartType = xl3DAreaStacked
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
             
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis

              
    Case "3DAreaStacked100"
        chrt.ChartType = xl3DAreaStacked100
        
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
        
   objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
           
    Case "3DBarClustered"
        chrt.ChartType = xl3DBarClustered
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
        
   objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
 
 Case "3DBarStacked"
       chrt.ChartType = xl3DBarStacked
        'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis

   
    Case "3DBarStacked100"
        chrt.ChartType = xl3DBarStacked100
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "3DColumn"
        chrt.ChartType = xl3DColumn
        
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
     
    Case "3DColumnClustered"
        chrt.ChartType = xl3DColumnClustered
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
   
   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
        
        
   Case "3DColumnStacked"
        chrt.ChartType = xl3DColumnStacked
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
        
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
       
        
        
    Case "3DColumnStacked100"
        chrt.ChartType = xl3DColumnStacked100
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
      
    Case "3DLine"
        chrt.ChartType = xl3DLine
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
      
    Case "3DPie"
    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For

    Case "3DPieExploded"
    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For

    Case "AreaStacked100"
        chrt.ChartType = xlAreaStacked100
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
      
        
        
    Case "BarClustered"
        chrt.ChartType = xlBarClustered
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
        
      objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
      
   Case "BarOfPie"
   MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For

    Case "BarStacked"
        chrt.ChartType = xlBarStacked
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "BarStacked100"
        chrt.ChartType = xlBarStacked100
        
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "Bubble"
        chrt.ChartType = xlBubble
        
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "Bubble3DEffect"
        chrt.ChartType = xlBubble3DEffect
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ColumnClustered"
        chrt.ChartType = xlColumnClustered
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
 
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ColumnStacked"
        chrt.ChartType = xlColumnStacked
        
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ColumnStacked100"
        chrt.ChartType = xlColumnStacked100
        
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeBarClustered"
        chrt.ChartType = xlConeBarClustered
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeBarStacked"
        chrt.ChartType = xlConeBarStacked
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
    
    'Chart Fix
    objChrt.Chart.PlotArea.Select
    objChrt.Chart.ClearToMatchStyle
    objChrt.Chart.ChartStyle = 2
    objChrt.Chart.ClearToMatchStyle
    'Chart Fix
   
    Case "ConeBarStacked100"
        chrt.ChartType = xlConeBarStacked100
        
       'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
      
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeCol"
        chrt.ChartType = xlConeCol
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
       
        
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeColClustered"
        chrt.ChartType = xlConeColClustered
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeColStacked"
        chrt.ChartType = xlConeColStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "ConeColStacked100"
        chrt.ChartType = xlConeColStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderBarClustered"
        chrt.ChartType = xlCylinderBarClustered
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderBarStacked"
        chrt.ChartType = xlCylinderBarStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderBarStacked100"
        chrt.ChartType = xlCylinderBarStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderCol"
        chrt.ChartType = xlCylinderCol
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderColClustered"
        chrt.ChartType = xlCylinderColClustered
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderColStacked"
        chrt.ChartType = xlCylinderColStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "CylinderColStacked100"
        chrt.ChartType = xlCylinderColStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "Doughnut"
    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For
        
    Case "DoughnutExploded"
    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For
       

    Case "Line"
        chrt.ChartType = xlLine
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        
   objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "LineMarkers"
        chrt.ChartType = xlLineMarkers
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
      objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
  
   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "LineMarkersStacked"
        chrt.ChartType = xlLineMarkersStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "LineMarkersStacked100"
        chrt.ChartType = xlLineMarkersStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "LineStacked"
        chrt.ChartType = xlLineStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "LineStacked100"
        chrt.ChartType = xlLineStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PieOfPie"
     MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For
        
    Case "PyramidBarStacked"
        chrt.ChartType = xlPyramidBarStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PyramidBarStacked100"
        chrt.ChartType = xlPyramidBarStacked100
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PyramidCol"
        chrt.ChartType = xlPyramidCol
        
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PyramidColClustered"
        chrt.ChartType = xlPyramidColClustered
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PyramidColStacked"
        chrt.ChartType = xlPyramidColStacked
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
        objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "PyramidColStacked100"
        chrt.ChartType = xlPyramidColStacked100
        
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
       objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   

    Case "XYScatter"
        chrt.ChartType = xlXYScatter
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "XYScatterLines"
        chrt.ChartType = xlXYScatterLines
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
      objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
  
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "XYScatterLinesNoMarkers"
        chrt.ChartType = xlXYScatterLinesNoMarkers
        
         'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "XYScatterSmooth"
     chrt.ChartType = xlXYScatterSmooth
    
    
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
    
      objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
 
        
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
   
    Case "XYScatterSmoothNoMarkers"
        chrt.ChartType = xlXYScatterSmoothNoMarkers
        
        
     'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
     objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete
   
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
    
    
    Case "Area"
        chrt.ChartType = xlArea
      'lables
    objChrt.Chart.Axes(xlCategory).TickLabels.Orientation = 50
    objChrt.Chart.Axes(xlValue).TickLabels.Orientation = 50
    'title
    objChrt.Chart.Axes(xlValue).AxisTitle.Orientation = 90
    objChrt.Chart.Axes(xlCategory).AxisTitle.Orientation = 0
             
    objChrt.Activate
    objChrt.Chart.Axes(xlValue).AxisTitle.Select
    Selection.Delete

    objChrt.Activate
    objChrt.Chart.Axes(xlCategory).AxisTitle.Select
    Selection.Delete

    
    objChrt.Chart.Axes(xlValue).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryValueAxisTitleAdjacentToAxis)
    objChrt.Activate
    objChrt.Chart.Axes(xlValue, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = sxaxis
    
    objChrt.Chart.Axes(xlCategory).HasTitle = True
    objChrt.Chart.SetElement (msoElementPrimaryCategoryAxisTitleRotated)
    objChrt.Activate
    objChrt.Chart.Axes(xlCategory, xlPrimary).HasTitle = True
    objChrt.Chart.Axes(xlCategory, xlPrimary).AxisTitle.Text = syaxis
    
    Case "Pie"
    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
    Exit For
   
End Select
'Set ws = Nothing
'Set objChrt = Nothing
'Set chrt = Nothing

    
    Else
   
   

Select Case ws.Range(chartsWorki)
Case "3DPie"
        chrt.ChartType = xl3DPie

Case "3DPieExploded"
        chrt.ChartType = xl3DPieExploded
    
Case "Doughnut"
        chrt.ChartType = xlDoughnut

Case "DoughnutExploded"
        chrt.ChartType = xlDoughnutExploded
        
Case "BarOfPie"
    chrt.ChartType = xlBarOfPie
    
 Case "PieOfPie"
        chrt.ChartType = xlPieOfPie
      
Case "Pie"
        chrt.ChartType = xlPie
        


 Case Else
     MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
     Exit For

End Select

    End If
    
    
   Next wkSheet
Set ws = Nothing
Set objChrt = Nothing
Set chrt = Nothing
 
 Exit Sub
ErrGoButton:

    MsgBox "This chart is not applicable. Please select a different option", vbOKOnly
    
  End Sub
'Dinesh Advanced excel charts - Ends-28 AUG 2017

' InQuest injected base64 decoded content
' jZ >+
' +ZrG
' +ZrG
' +ZrG
' t*%J

INQUEST-PP=macro
