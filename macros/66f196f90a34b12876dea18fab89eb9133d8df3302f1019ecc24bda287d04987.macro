Attribute VB_Name = "Excellator"
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excellator
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LGPL 2.1.
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| inv, ainv, pow, linapprox, mystr, piecewise.
'      |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LGPL 2.1  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'      |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
'<http://excellator.sourceforge.net>.
'    |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| tkr14@yandex.ru. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'
'    |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| LGPL 2.1 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
'      |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Free Software  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
'
'Excellator Copyright (C) 2013 Andrey Stolyarov
'Notes:
'        You can use Excellator on any computer, including a computer in commercial
'        organization. You don|fffd|t need to register or pay for Excellator.
'
'      GNU LGPL information
'      --------------------
'        This library is free software; you can redistribute it and/or
'        modify it under the terms of the GNU Lesser General Public
'        License as published by the Free Software Foundation; either
'        version 2.1 of the License, or (at your option) any later version.
'
'        This library is distributed in the hope that it will be useful,
'        but WITHOUT ANY WARRANTY; without even the implied warranty of
'        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'        Lesser General Public License for more details.

Public Function mystr(x As Double, r As Integer) As String
Dim mant As Double
Dim p As Integer
  p = 0
  If x <> 0 Then
   p = Int(Log(Abs(x)) / Log(10))
   If (p > -4) And (p < 7) Then
    If p > r - 1 Then
     mant = Round(x)
    Else
     mant = Round(x * 10 ^ (r - 1 - p)) * 10 ^ (1 - r + p)
    End If
    p = 0
   Else
    mant = Round(x * 10 ^ (r - 1 - p)) * 10 ^ (1 - r)
   End If
  End If
 If (mant = 10) And (p <> 0) Then
   mystr = "10^" + CStr(p + 1)
  Else
   mystr = CStr(mant)
   If p <> 0 Then
    mystr = "(" + mystr + "*10^" + CStr(p) + ")"
   End If
 End If
End Function

Public Function inv(x As Double) As Double
  inv = Tan(x) - x
End Function

Public Function pow(x As Double, y As Double) As Double
  pow = Exp(y * Log(x))
End Function



Public Function ainv(inv1 As Double) As Double
  ' Calculating the inv1erse of an inv1olute
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Laskin)
  
  Dim ar As Double
  Dim inv1Dif As Double
 
  If inv1 < 1.2 Then
    ar = 1.441 * pow(inv1, 1 / 3) - 0.374 * inv1
  Else: ar = Atn(inv1)
  End If
  
  inv1Dif = inv1
  
  
  Do While Abs(inv1Dif) > 0.00000001 * ar
    
    inv1Dif = (inv1 - Tan(ar)) / (Tan(ar) ^ 2) + ar / (Tan(ar) ^ 2)
    ar = ar + inv1Dif
    
  Loop
  ainv = ar
End Function

Public Function piecewise(ParamArray varArg() As Variant) As Variant

Dim i As Integer, result As Variant

i = 0
Do While i < UBound(varArg) - 3
 If varArg(i) Then
   result = varArg(i + 1)
   Exit Do
 End If
 i = i + 2
Loop

If i = UBound(varArg) - 2 Then
   If varArg(i) Then
     result = varArg(i + 1)
   Else: result = varArg(i + 2)
 End If
ElseIf i = UBound(varArg) - 1 Then
   If varArg(i) Then
     result = varArg(i + 1)
 End If
End If

piecewise = result

End Function

Public Function linapprox(ParamArray varArg() As Variant) As Variant

Dim i As Integer, result As Variant
Dim x As Double

x = varArg(0)
i0 = 1
i = 1
Do While i < UBound(varArg) - 2
 If (x > varArg(i)) And (x <= varArg(i + 2)) Then
  Exit Do
 End If
 i = i + 2
Loop

If x <= varArg(1) Then
 i = 1
End If
If i > UBound(varArg) - 2 Then
 i = 2 * Int((UBound(varArg) - 2) / 2) - 1
End If
linapprox = varArg(i + 1) + (x - varArg(i)) * (varArg(i + 3) - varArg(i + 1)) / (varArg(i + 2) - varArg(i))

End Function

Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
