Attribute VB_Name = "Module1"
Option Explicit

    Declare PtrSafe Function OpenProcess Lib "kernel32" _
    (ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) As Long
    Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" _
    (ByVal hProcess As Long, _
    lpExitCode As Long) As Long
    Public username As String
    Public userpassword As String
    Public path As String
    Public thepath As String
    Public save_destination As String
    Public open_from As String
    Public progdetails As String
    Dim TaskID As Long
    Dim hProc As Long
    Dim lExitCode As Long
    Dim ACCESS_TYPE As Integer, STILL_ACTIVE As Integer
    Dim program As String
    Dim server As String
    Dim database As String
    Dim paramdetails As String
    Dim report As Integer
    Dim report_row As Integer
    Dim start_date As String
    Dim end_date As String
    Dim report_number As Integer
    Dim report_name As String
    Dim report_name_string As String
    Dim save_name As String
    Dim parameterid As String
    Dim dates As String
    Dim date_parameters As String
    Dim date_string As String
    Dim start_of_term As String
    Dim start_of_year As String
    Dim Ans As String
    Dim time_counter As Long
    Public save_path As String

Sub Get_params()

'   Gets report parameters

    thepath = ThisWorkbook.path
    username = Sheets("Set up").Range("C1")
    userpassword = Sheets("Set up").Range("C2")
    server = Sheets("Set up").Range("C4")
    database = Sheets("Set up").Range("C5")
    save_destination = """" + thepath + "\paramdefs.xml" + """"
    path = Sheets("Set up").Range("C3") + "\CommandReporter.exe"
    
    report_number = InputBox("Report number?")
    Select Case report_number
        Case 1
            report_name = Sheets("Set up").Range("B10")
        Case 2
            report_name = Sheets("Set up").Range("B11")
        Case 3
            report_name = Sheets("Set up").Range("B12")
        Case 4
            report_name = Sheets("Set up").Range("B13")
        Case 5
            report_name = Sheets("Set up").Range("B14")
        Case 6
            report_name = Sheets("Set up").Range("B15")
        Case 7
            report_name = Sheets("Set up").Range("B16")
        Case 8
            report_name = Sheets("Set up").Range("B17")
        Case 9
            report_name = Sheets("Set up").Range("B18")
    End Select
    
    report_name = """" + report_name + """"
    paramdetails = path + " /USER:" + username + " /PASSWORD:" + userpassword + " /SERVERNAME:" + server + " /DATABASENAME:" + database + " /REPORT:" + report_name + " /PARAMDEF /OUTPUT:" + save_destination
    TaskID = Shell(paramdetails, 1)

End Sub

Sub Generate_strings()

'   Generates strings

    thepath = ThisWorkbook.path
    username = Sheets("Set up").Range("C1")
    userpassword = Sheets("Set up").Range("C2")
    server = Sheets("Set up").Range("C4")
   
    database = Sheets("Set up").Range("C5")
    path = Sheets("Set up").Range("C3") + "\CommandReporter.exe"
    If Sheets("Set up").Range("C6") = "" Then
        save_path = ThisWorkbook.path
    Else
        save_path = Sheets("Set up").Range("C6")
    End If
    start_of_term = VBA.Format(Sheets("Set up").Range("E5"), "yyyy-mm-dd")
    start_of_year = VBA.Format(Sheets("Set up").Range("E6"), "yyyy-mm-dd")
    
    Range("G10:I18").ClearContents

'   Replaces double quotes with single in report parameters
    Sheets("Set up").Range("C10,C11,C12,C13,C14,C15,C16,C17,C18").Replace What:="""", Replacement:="'", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
'   Generates dates for cmd line

    For report = 1 To 9
    report_row = report + 9
    start_date = Range("D" + CStr(report_row))
    end_date = Range("E" + CStr(report_row))
    
    If Not start_date = "" And Not end_date = "" Then
    Range("G" + CStr(report_row)).Select
    ActiveCell.FormulaR1C1 = _
        "=CONCATENATE(""<Start>"",TEXT(INDIRECT(RC[-3]),""yyyy-mm-dd""),""</Start><End>"",TEXT(INDIRECT(RC[-2]),""yyyy-mm-dd""),""</End>"")"
    End If
    
    If Not start_date = "" And end_date = "" Then
    Range("G" + CStr(report_row)).Select
    ActiveCell.FormulaR1C1 = _
        "=CONCATENATE(""<Date>"",TEXT(INDIRECT(RC[-3]),""yyyy-mm-dd""),""</Date>"")"
        End If
    
    Next report
            
'   Generates strings for cmd line
        
    For report = 1 To 9
    report_row = report + 9
    report_name = Range("B" + CStr(report_row))
    
    save_name = Range("F" + CStr(report_row))
    If save_name = "" Then
    save_name = "\Report" + CStr(report) + ".csv"
    Else
    save_name = "\" + save_name + ".csv"
    End If
    save_destination = """" + save_path + save_name + """"
    
    If Not report_name = "" Then
    
    report_name_string = """" + report_name + """"
    parameterid = Sheets("Set up").Range("C" + CStr(report_row))
    dates = Sheets("Set up").Range("G" + CStr(report_row))
    
        If dates = "" Then
            date_parameters = ""
        Else
            date_parameters = """<ReportParameters>" + parameterid + "<Values>" + dates + "</Values></Parameter></ReportParameters>"""
        End If
    
    progdetails = """" + path + """" + " /USER:" + username + " /PASSWORD:" + userpassword + " /SERVERNAME:" + server + " /DATABASENAME:" + database + " /REPORT:" + report_name_string + " /OUTPUT:" + save_destination + " /PARAMS:" + date_parameters
    Worksheets("Set up").Range("G" + CStr(report_row)) = progdetails
       
    End If
    
    Next report
    
'   Generates dates for .bat file

    For report = 1 To 9
    report_row = report + 9
    start_date = Range("D" + CStr(report_row))
    end_date = Range("E" + CStr(report_row))
    
    If Not start_date = "" And Not end_date = "" Then
    date_string = "<Start>" + start_date + "</Start><End>" + end_date + "</End>"
    Worksheets("Set up").Range("H" + CStr(report_row)) = date_string
    End If
    
    If Not start_date = "" And end_date = "" Then
    date_string = "<Date>" + start_date + "</Date>"
    Worksheets("Set up").Range("H" + CStr(report_row)) = date_string
    End If
      
    Next report
    
    Range("H10:H18").Select
    
    Selection.Replace What:="Today", Replacement:="%Today%", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
     
    Selection.Replace What:="One_week_ago", Replacement:="%Today-7%", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Two_weeks_ago", Replacement:="%Today-14%", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Four_weeks_ago", Replacement:="%Today-28%", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Start_of_term", Replacement:=start_of_term, LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
       
    Selection.Replace What:="Start_of_year", Replacement:=start_of_year, LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

'   Generates strings for substituting into .bat file
        
    For report = 1 To 9
    report_row = report + 9
    report_name = Range("B" + CStr(report_row))
    
    save_name = Range("F" + CStr(report_row))
    If save_name = "" Then
    save_name = "\Report" + CStr(report) + ".csv"
    Else
    save_name = "\" + save_name + ".csv"
    End If
    save_destination = """" + save_path + save_name + """"
    
    If Not report_name = "" Then
    
    report_name_string = """" + report_name + """"
    parameterid = Sheets("Set up").Range("C" + CStr(report_row))
    dates = Sheets("Set up").Range("H" + CStr(report_row))
    
        If dates = "" Then
            date_parameters = ""
        Else
            date_parameters = """<ReportParameters>" + parameterid + "<Values>" + dates + "</Values></Parameter></ReportParameters>"""
        End If
    
    progdetails = """" + path + """" + " /USER:" + username + " /PASSWORD:" + userpassword + " /SERVERNAME:" + server + " /DATABASENAME:" + database + " /REPORT:" + report_name_string + " /OUTPUT:" + save_destination + " /PARAMS:" + date_parameters
    Worksheets("Set up").Range("H" + CStr(report_row)) = progdetails
       
    End If
    
    Next report
    
    '   Generates dates for .ps1 file

    For report = 1 To 9
    report_row = report + 9
    start_date = Range("D" + CStr(report_row))
    end_date = Range("E" + CStr(report_row))
    
    If Not start_date = "" And Not end_date = "" Then
    date_string = "<Start>" + start_date + "</Start><End>" + end_date + "</End>"
    Worksheets("Set up").Range("I" + CStr(report_row)) = date_string
    End If
    
    If Not start_date = "" And end_date = "" Then
    date_string = "<Date>" + start_date + "</Date>"
    Worksheets("Set up").Range("I" + CStr(report_row)) = date_string
    End If
      
    Next report
    
    Range("I10:I18").Select
    
    Selection.Replace What:="Today", Replacement:="$Today", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
     
    Selection.Replace What:="One_week_ago", Replacement:="$One_week_ago", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Two_weeks_ago", Replacement:="$Two_weeks_ago", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Four_weeks_ago", Replacement:="$Four_weeks_ago", LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
    Selection.Replace What:="Start_of_term", Replacement:=start_of_term, LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
       
    Selection.Replace What:="Start_of_year", Replacement:=start_of_year, LookAt _
        :=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

'   Generates strings for substituting into .ps1 file
        
    For report = 1 To 9
    report_row = report + 9
    report_name = Range("B" + CStr(report_row))
    
    save_name = Range("F" + CStr(report_row))
    If save_name = "" Then
    save_name = "\Report" + CStr(report) + ".csv"
    Else
    save_name = "\" + save_name + ".csv"
    End If
    save_destination = """" + save_path + save_name + """"
    
    If Not report_name = "" Then
    
    report_name_string = """" + report_name + """"
    parameterid = Sheets("Set up").Range("C" + CStr(report_row))
    dates = Sheets("Set up").Range("I" + CStr(report_row))
    
        If dates = "" Then
            date_parameters = ""
        Else
            date_parameters = """<ReportParameters>" + parameterid + "<Values>" + dates + "</Values></Parameter></ReportParameters>"""
        End If
    
    progdetails = "& " + """" + path + """" + " /USER:" + username + " /PASSWORD:" + userpassword + " /SERVERNAME:" + server + " /DATABASENAME:" + database + " /REPORT:" + report_name_string + " /OUTPUT:" + save_destination + " /PARAMS:" + date_parameters
    Worksheets("Set up").Range("I" + CStr(report_row)) = progdetails
       
    End If
    
    Next report

End Sub

Sub Run_from_Excel()

    Call Generate_strings
    
    Ans = MsgBox("Run all reports?", vbYesNo, "Run from Excel")
    
    Select Case Ans
    Case vbYes
        For report = 1 To 9
        report_row = report + 9
        report_name = Sheets("Set up").Range("B" + CStr(report_row))
        If Not report_name = "" Then
        progdetails = Sheets("Set up").Range("G" + CStr(report_row))
        Call Run_Cmd_Reporter
        Call Progress
        End If
        Next report
        
    Case vbNo
        report_number = InputBox("Report number?", "Run single report")
            If CStr(report_number) = "" Then Exit Sub
            Select Case report_number
                Case 1
                    progdetails = Sheets("Set up").Range("G10")
                Case 2
                    progdetails = Sheets("Set up").Range("G11")
                Case 3
                    progdetails = Sheets("Set up").Range("G12")
                Case 4
                    progdetails = Sheets("Set up").Range("G13")
                Case 5
                    progdetails = Sheets("Set up").Range("G14")
                Case 6
                    progdetails = Sheets("Set up").Range("G15")
                Case 7
                    progdetails = Sheets("Set up").Range("G16")
                Case 8
                    progdetails = Sheets("Set up").Range("G17")
                Case 9
                    progdetails = Sheets("Set up").Range("G18")
            End Select

            Call Run_Cmd_Reporter
            Call Progress
    End Select
    
    End Sub

Sub Run_Cmd_Reporter()

'   Run command reporter and wait for it to finish
    ACCESS_TYPE = &H400
    STILL_ACTIVE = &H103
'   Application.Cursor = xlWait
  
'   Shell the task
'   windowstyle:
'   0  Hidden
'   1  Normal
'   2  Minimised Icon
'   3  Maximised
    TaskID = Shell(progdetails, 1)

'   Get the process handle
    hProc = OpenProcess(ACCESS_TYPE, False, TaskID)

    If Err <> 0 Then
        MsgBox "Cannot start " & progdetails, vbCritical, "Error"
        Exit Sub
    End If
    
End Sub

Sub Progress()
        
'   Loop continuously
    time_counter = 0
    Do
    
'   Check on the process
    GetExitCodeProcess hProc, lExitCode
    
'   Allow event processing
    DoEvents
    time_counter = time_counter + 1
    Loop While lExitCode = STILL_ACTIVE
    
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



INQUEST-PP=macro
