Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)

Dim i As Integer
Dim s As String

ModuleSelected = CheckPartNumberCell(Target.row, Target.column)
If ModuleSelected > 0 Then
    If (GetArrayValue(Target.row, Target.column)) Then
        If Cells(Target.row, Target.column) <> ArrayValues(0) Then
            s = BuiltComment(ModuleSelected, 0, 1)
            i = FillComment(s, Target.row, Target.column)
        End If
    Else
        s = BuiltComment(ModuleSelected, 0, 1)
        i = FillComment(s, Target.row, Target.column)
    End If
End If


End Sub



Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
     
Dim Index As Integer
Dim Index1 As Integer
Dim numModule As Integer
Dim a As String
     
     
ModuleSelected = CheckPartNumberCell(Target.row, Target.column)
If ModuleSelected > 0 Then
   
    ' se |fffd| una cella che interessa compila la combobox per fare la selezione
    ' del modo di utilizzo
    NotSave = True
    Index = 0
    UserForm1.TypeMode.Clear
    Do While (Sheets("Modules").Cells(ModuleSelected, Index * OffsetModuleInfo1 + OffsetModuleInfo) <> "")
        UserForm1.TypeMode.AddItem Sheets("Modules").Cells(ModuleSelected, Index * OffsetModuleInfo1 + OffsetModuleInfo)
        Index = Index + 1
    Loop
    ' se non |fffd| stata trovata nessuna sotto-selezione esce
    If Index = 0 Then
        Exit Sub
    End If
    Index = Index - 1
        
    ModuleTypeSelected = 0
    ' legge le info correnti nel campo note
    If (GetArrayValue(Target.row, Target.column)) Then
        ' cerca la seleziona corrente
        For Index = 0 To UserForm1.TypeMode.ListCount
            If Sheets("Modules").Cells(ModuleSelected, Index * OffsetModuleInfo1 + OffsetModuleInfo) = ArrayValues(1) Then
                ModuleTypeSelected = Index
                Exit For
            End If
        Next Index
    End If
 
    UserForm1.TypeMode.ListIndex = ModuleTypeSelected
    NotSave = False
    
    ' passa il controllo al form di impostazione
    Set InputCell = Cells(Target.row, Target.column)
    UserForm1.Show


End If



End Sub





Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modulo1"




Attribute VB_Name = "Modulo2"
Sub Macro6()
Attribute Macro6.VB_ProcData.VB_Invoke_Func = " \n14"

    UpdateVoltageDrop

End Sub
Attribute VB_Name = "Modulo3"

Public InputCell As Range
Public NotSave As Boolean
Public ModuleSelected As Integer
Public ModuleTypeSelected As Integer
Public ModuleValues(4) As Double
Public ArrayValues(6) As String

Public Const OffsetModuleInfo As Integer = 2
Public Const OffsetModuleInfo1 As Integer = 5
Public Enum Re
L = 1
a = 2
mA = 3
FastI = 4
FastO = 5
Power = 6
numMod = 7
End Enum



Public Sub UpdateVoltageDrop()
Attribute UpdateVoltageDrop.VB_Description = "Calculate voltage drop"
Attribute UpdateVoltageDrop.VB_ProcData.VB_Invoke_Func = "a\n14"

Dim Rtree, Ctree As Integer
Dim InputArea As Range
Dim TreeArea As Range
Dim ModulesArea As Range
Dim xR, xC As Integer
Dim SumI As Double
Dim FirstPosition As Integer
Dim cntBranch As Integer
Dim numBranch As Integer
Dim E As Integer
Dim Rmod, Cmod As Integer
Dim SubTotal(0 To 4) As Double
Dim Total(0 To 4) As Double
Dim z As String
Dim i As Integer
Dim b As Boolean
Dim v As Variant
Dim cntCO2 As Integer
Dim offsetCO2 As Double
Dim offset As Double


    On Error Resume Next
    Set InputArea = Application.InputBox("Select the tree and the modules area", "Input area", Type:=8)
    E = Err.number
    On Error GoTo 0
    If E <> 0 Then
        Exit Sub
    End If
    
    ' Divide the selected area between TreeArea and ModulesArea
    ' Module area begings from the first column where is found a valid part number
    Dim Break As Boolean
    Break = False
    For xC = 0 To InputArea.Columns.Count - 1
        For xR = 0 To InputArea.Rows.Count - 1
            If CheckPartNumberCell(InputArea.row + xR, InputArea.column + xC) > 0 Then
                Break = True
                Exit For
            End If
        Next xR
        If Break Then
            Exit For
        End If
    Next xC
    If xC = 0 Then
        MyValue = MsgBox("The Tree area has not found", vbCritical)
        Exit Sub
    End If
    If xC >= InputArea.Columns.Count Then
        MyValue = MsgBox("The Module area has not been found", vbCritical)
        Exit Sub
    End If
    
    Set TreeArea = Range(Cells(InputArea.row, InputArea.column), Cells(InputArea.row + InputArea.Rows.Count - 1, InputArea.column + xC - 1))
    Set ModulesArea = Range(Cells(InputArea.row, InputArea.column + xC), Cells(InputArea.row + InputArea.Rows.Count - 1, InputArea.column + InputArea.Columns.Count - 1))

    
    Rtree = TreeArea.Rows.Count - 1
    Ctree = TreeArea.Columns.Count - 1
    
    Rmod = ModulesArea.Rows.Count - 1
    Cmod = ModulesArea.Columns.Count - 1

    ReDim treearray(Rtree, Ctree)
    ReDim CurrentArray(Rtree, Ctree)
    ReDim voltagearray(Rtree, Ctree)

    For xC = 0 To Ctree
        For xR = 0 To Rtree
            treearray(xR, xC) = ""
            Select Case UCase(Cells(TreeArea.row + xR, TreeArea.column + xC))
            Case "P", "D", "B", "A", "N", ""
                treearray(xR, xC) = UCase(Cells(TreeArea.row + xR, TreeArea.column + xC))
            Case Else
                ' char not valid is overwritten with null
                Cells(TreeArea.row + xR, TreeArea.column + xC) = ""
            End Select
        Next xR
    Next xC
    ' rules:
    ' only one M in a row
    ' if in a row there is the N in the same row can be preent only B
    ' In a row can be only one A
    
    ' Count number of branch (row with "D")
    numBranch = 0
    For xR = 0 To Rtree
        For xC = 0 To Ctree
            If treearray(xR, xC) = "N" Then
                numBranch = numBranch + 1
                Exit For
            End If
        Next xC
    Next xR

    ' ascansione le celle:
    ' - dove non c'|fffd| il commento lo genera
    ' - conta il numero di moduli CO2
    cntCO2 = 0
    For xR = 0 To Rmod
        For xC = 0 To Cmod
            ModuleSelected = CheckPartNumberCell(ModulesArea.row + xR, ModulesArea.column + xC)
            If ModuleSelected > 0 Then
                If (GetArrayValue(ModulesArea.row + xR, ModulesArea.column + xC)) Then
                    If Cells(ModulesArea.row + xR, ModulesArea.column + xC) <> ArrayValues(0) Then
                        z = BuiltComment(ModuleSelected, 0, 1)
                        i = FillComment(z, ModulesArea.row + xR, ModulesArea.column + xC)
                    End If
                Else
                    z = BuiltComment(ModuleSelected, 0, 1)
                    i = FillComment(z, ModulesArea.row + xR, ModulesArea.column + xC)
                End If
                b = GetArrayValue(ModulesArea.row + xR, ModulesArea.column + xC)
                v = InStr(1, ArrayValues(0), "SUCO", vbTextCompare)
                If v > 0 Then
                    cntCO2 = cntCO2 + Val(ArrayValues(6))
                End If
            Else
                ' cancella il commento
                i = ClearComment(ModulesArea.row + xR, ModulesArea.column + xC)
            End If
        Next xC
    Next xR
    ' calcola offset di corrente da aggiungere ai moduli CO2
    Select Case cntCO2
    Case 0
        offsetCO2 = 0
    Case 1
        offsetCO2 = 27
    Case Is > 8
        offsetCO2 = (Int((cntCO2 + 8) / 8) + 1) * 23
    Case Else
        offsetCO2 = 46
    End Select
    
    
    ' b) scansione per righe: si recuperano i valori dai commenti si esegueno i subtotali
    '    per mA, FastIN, FastOut, Power, NumModuli riportandoli nelle rispettive colonne
    ' c) si eseguono la somma dei totali
    
    SubTotal(0) = 0
    SubTotal(1) = 0
    SubTotal(2) = 0
    SubTotal(3) = 0
    SubTotal(4) = 0
    For xR = 0 To Rmod
        For xC = 0 To Cmod
            ModuleSelected = CheckPartNumberCell(ModulesArea.row + xR, ModulesArea.column + xC)
            If ModuleSelected > 0 Then
                If (GetArrayValue(ModulesArea.row + xR, ModulesArea.column + xC)) Then
                    v = InStr(1, ArrayValues(0), "SUCO", vbTextCompare)
                    If v > 0 Then
                        offset = offsetCO2
                    Else
                        offset = 0
                    End If
                    SubTotal(0) = SubTotal(0) + Val(ArrayValues(2)) * Val(ArrayValues(6)) + offset
                    SubTotal(1) = SubTotal(1) + Val(ArrayValues(3)) * Val(ArrayValues(6))
                    SubTotal(2) = SubTotal(2) + Val(ArrayValues(4)) * Val(ArrayValues(6))
                    SubTotal(3) = SubTotal(3) + Val(ArrayValues(5)) * Val(ArrayValues(6))
                    SubTotal(4) = SubTotal(4) + Val(ArrayValues(6))
                End If
            End If
        Next xC
        Cells(ModulesArea.row + xR, TreeArea.column - 3) = SubTotal(0)
        Cells(ModulesArea.row + xR, TreeArea.column - 4) = SubTotal(1)
        Cells(ModulesArea.row + xR, TreeArea.column - 5) = SubTotal(2)
        Cells(ModulesArea.row + xR, TreeArea.column - 6) = SubTotal(3)
        Cells(ModulesArea.row + xR, TreeArea.column - 7) = SubTotal(4)
        Total(0) = Total(0) + SubTotal(0)
        Total(1) = Total(1) + SubTotal(1)
        Total(2) = Total(2) + SubTotal(2)
        Total(3) = Total(3) + SubTotal(3)
        Total(4) = Total(4) + SubTotal(4)
        SubTotal(0) = 0
        SubTotal(1) = 0
        SubTotal(2) = 0
        SubTotal(3) = 0
        SubTotal(4) = 0
    Next xR
    Cells(TreeArea.row - 1, TreeArea.column - Re.mA) = Total(0)
    Cells(TreeArea.row - 1, TreeArea.column - Re.FastI) = Total(1)
    Cells(TreeArea.row - 1, TreeArea.column - Re.FastO) = Total(2)
    Cells(TreeArea.row - 1, TreeArea.column - Re.Power) = Total(3)
    Cells(TreeArea.row - 1, TreeArea.column - Re.numMod) = Total(4)

    ' controllo dei valori
    ' warning over 300mA, error over 400mA
    ' warning over 100 fastInputs, error over 120 FastInputs
    ' warning over 100 fastOutputs, error over 112 FastInputs
    ' warning over 220 Modules, error over 250 Modules

' Calculate currents
' Repaeat the calculation in function of the branch number
For cntBranch = 1 To numBranch
    ' update current node
    For xC = 0 To Ctree
        SumI = 0
        For xR = Rtree To 0 Step -1
            Select Case treearray(xR, xC)
            Case "P"
                SumI = SumI + Cells(TreeArea.row + xR, TreeArea.column - Re.mA)
                CurrentArray(xR, xC) = SumI
            Case "D"
                SumI = SumI + Cells(TreeArea.row + xR, TreeArea.column - Re.mA) * 0.65
                CurrentArray(xR, xC) = SumI
            Case "N"
                SumI = SumI + CurrentArray(xR, xC)
            Case "A"
                SumI = 0
                CurrentArray(xR, xC) = 0
            Case "B"
                CurrentArray(xR, xC) = SumI
                SumI = 0
            Case Else
                CurrentArray(xR, xC) = 0
            End Select
        Next xR
    Next xC
    ' Calculate currents branch
    ' find row with "D", Sum all the D values and relpace the D vuales with the sum
    For xR = 0 To Rtree
        SumI = 0
        FirstPosition = -1
        For xC = 0 To Ctree
        If treearray(xR, xC) = "B" Then
            SumI = SumI + CurrentArray(xR, xC)
            If FirstPosition = -1 Then
                FirstPosition = xC
            End If
        End If
        Next xC
        If FirstPosition <> -1 Then
            'For xC = FirstPosition To Ctree
            '    If treearray(xR, xC) = "D" Then
            '        CurrentArray(xR, xC) = SumI
            '    End If
            'Next xC
            treearray(xR, FirstPosition - 1) = "N"
            CurrentArray(xR, FirstPosition - 1) = SumI
        End If
    Next xR
Next cntBranch


' calculate voltage drop


Dim Vup As Double
Dim Area, Lenght, Ohm, Vdrop As Double

Const Vdup As Double = 8
Const ro As Double = 0.0175

Vup = Vdup
For xC = 0 To Ctree
    For xR = 0 To Rtree
        Select Case treearray(xR, xC)
        Case "B"
            For i = 0 To Ctree
                If treearray(xR, i) = "N" Then
                    Vup = voltagearray(xR, i)
                Exit For
                End If
            Next i
            voltagearray(xR, xC) = Vup
        Case "A"
            Vup = Vdup
            voltagearray(xR, xC) = Vup
        Case "P", "D", "N"
            Lenght = Cells(TreeArea.row + xR, TreeArea.column - Re.L)
            Area = Cells(TreeArea.row + xR, TreeArea.column - Re.a)
            If Area <> 0 Then
                Ohm = ro * Lenght / Area
                Vdrop = 4 * Ohm * CurrentArray(xR, xC) / 1000
            Else
                Vdrop = 0
            End If
            Vup = Vup - Vdrop
            voltagearray(xR, xC) = Vup
        Case Else
        End Select
    Next xR
Next xC



' Show results
Dim Note As String
For xC = 0 To Ctree
    For xR = 0 To Rtree
        Cells(TreeArea.row + xR, TreeArea.column + xC).Select
        On Error Resume Next
        Cells(TreeArea.row + xR, TreeArea.column + xC).Comment.Visible = False
        On Error GoTo 0
        If treearray(xR, xC) = "" Then
            Cells(TreeArea.row + xR, TreeArea.column + xC).ClearComments
            With Selection.Interior
                    .Pattern = xlNone
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
            End With
        Else
            On Error Resume Next
            Cells(TreeArea.row + xR, TreeArea.column + xC).AddComment
            On Error GoTo 0
            Select Case treearray(xR, xC)
            Case "P"
                Note = "Point" + vbCrLf
             Case "D"
                Note = "Dritributed" + vbCrLf
            Case "N"
                Note = "Node" + vbCrLf
            Case "B"
                Note = "Branch" + vbCrLf
            Case "A"
                Note = "Amplifier" + vbCrLf
            Case Else
                Note = ""
            End Select
            Note = Note + Str(CurrentArray(xR, xC)) + "mA  " + vbCrLf
            Note = Note + Str(voltagearray(xR, xC)) + "V"
            Cells(TreeArea.row + xR, TreeArea.column + xC).Comment.Text Text:=Note
            
            Cells(TreeArea.row + xR, TreeArea.column + xC).Comment.Visible = False
            Cells(TreeArea.row + xR, TreeArea.column + xC).Comment.Shape.Width = 100
            Cells(TreeArea.row + xR, TreeArea.column + xC).Comment.Shape.Height = 50
            
            If voltagearray(xR, xC) < 5.5 Then
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 255
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            ElseIf voltagearray(xR, xC) < 6# Then
                With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 65535
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            Else
               With Selection.Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = 5296274
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
            End If
            
        End If
    Next xR
Next xC

Dim numCOLOR As Long

' controlla totali
Select Case Total(0)
Case Is > 350   ' red
    numCOLOR = 255
Case Is > 300   ' yellow
    numCOLOR = 65535
Case Else            ' green
    numCOLOR = 5296274
End Select
Cells(TreeArea.row - 1, TreeArea.column - Re.mA).Select
With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = numCOLOR
        .TintAndShade = 0
        .PatternTintAndShade = 0
End With

Select Case Total(1)
Case Is > 120   ' red
    numCOLOR = 255
Case Is > 100   ' yellow
    numCOLOR = 65535
Case Else       ' green
    numCOLOR = 5296274
End Select
Cells(TreeArea.row - 1, TreeArea.column - Re.FastI).Select
With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = numCOLOR
        .TintAndShade = 0
        .PatternTintAndShade = 0
End With

Select Case Total(2)
Case Is > 112   ' red
    numCOLOR = 255
Case Is > 100   ' yellow
    numCOLOR = 65535
Case Else       ' green
    numCOLOR = 5296274
End Select
Cells(TreeArea.row - 1, TreeArea.column - Re.FastO).Select
With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = numCOLOR
        .TintAndShade = 0
        .PatternTintAndShade = 0
End With

Cells(TreeArea.row - 1, TreeArea.column - Re.Power).Select
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
 

Select Case Total(4)
Case Is > 250   ' red
    numCOLOR = 255
Case Is > 230   ' yellow
    numCOLOR = 65535
Case Else       ' green
    numCOLOR = 5296274
End Select
Cells(TreeArea.row - 1, TreeArea.column - Re.numMod).Select
With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = numCOLOR
        .TintAndShade = 0
        .PatternTintAndShade = 0
End With



End Sub

Public Function GetArrayValue(x As Integer, y As Integer) As Boolean

Dim Field() As String
Dim SubField() As String
Dim i As Integer
Dim Result As Boolean
Dim TextComment As String

    For i = 0 To 6
        ArrayValues(i) = ""
    Next i
     
    On Error Resume Next
    TextComment = Cells(x, y).Comment.Text
    i = Err.number
    On Error GoTo 0
    
    If TextComment = "" Or i <> 0 Then
        GetArrayValue = False
        Exit Function
    End If
    
    ' se saranno trovati tutti i dati ritorna vero
    Result = True
    Field = Split(TextComment, vbCrLf)
    For i = 0 To 6
        If UBound(Field) >= i Then
            SubField = Split(Field(i), ":")
            If UBound(SubField) = 1 Then
                ArrayValues(i) = Trim(SubField(1))
                'ModuleValues(i) = Val(SubField(1))
            End If
        Else
            ' se non ci sono tutti i dati ritorna Falso
            Result = False
        End If
    Next i
    Cells(x, y).Comment.Shape.Width = 300
    Cells(x, y).Comment.Shape.Height = 100
    GetArrayValue = Result
    
End Function


Public Sub WriteComment(ByVal Rx, ByVal Cx, ByVal Module, ByVal typ, ByVal number)

Dim s As String
Dim i As Integer

    s = BuiltComment(Module, typ, number)
    i = fillycomment(s, Rx, Cx)
    
    
End Sub

 


Public Function BuiltComment(ByRef MODi As Integer, ByRef TYPi As Integer, ByVal NUM As Integer) As String

' ModuleSelected: indica la riga dove si trova nel foglio "Modules" il modulo selezionato ne
' ModuleTypeSelected: indica l'opzione attiva del modulo selezionato

Dim TextNote As String
Dim s As Variant
    
    If MODi < 1 Then
        MODi = 1
    End If
    If TYPi < 0 Then
        TYPi = 0
    End If
    If NUM < 0 Then
        NUM = 1
    End If
    
    s = Sheets("Modules").Cells(MODi, 1)
    TextNote = "Part number: " + s + vbCrLf
    s = Sheets("Modules").Cells(MODi, TYPi * OffsetModuleInfo1 + OffsetModuleInfo)
    TextNote = TextNote + "Type mode: " + s + vbCrLf
    s = Sheets("Modules").Cells(MODi, TYPi * OffsetModuleInfo1 + OffsetModuleInfo + 1)
    TextNote = TextNote + "Bus current(mA): " + Str(s) + vbCrLf
    s = Sheets("Modules").Cells(MODi, TYPi * OffsetModuleInfo1 + OffsetModuleInfo + 2)
    TextNote = TextNote + "Fast Input: " + Str(s) + vbCrLf
    s = Sheets("Modules").Cells(MODi, TYPi * OffsetModuleInfo1 + OffsetModuleInfo + 3)
    TextNote = TextNote + "Fast Output: " + Str(s) + vbCrLf
    s = Sheets("Modules").Cells(MODi, TYPi * OffsetModuleInfo1 + OffsetModuleInfo + 4)
    TextNote = TextNote + "Power 24V (W): " + Str(s) + vbCrLf
    TextNote = TextNote + "Number of modules:" + Str(NUM) + vbCrLf
    'TextNote = TextNote + "Number of modules:" + (Str(UserForm1.NumModules.ListIndex + 1)) + vbCrLf
    BuiltComment = TextNote
   
    ' link utile per la formattazione dei commenti
    ' http://www.contextures.com/xlcomments03.html

End Function

Public Function FillComment(ByVal TextComment As String, ByVal R As Integer, ByVal C As Integer) As Integer

    ' riporta il testo nel commento della cella che |fffd| stata selezionata
    'InputCell.Select
    ' non importa se viene generato un errore interno
    'On Error Resume Next
    'InputCell.AddComment
    ' ripristina la gestione di errori normale
    'On Error GoTo 0
    '
    'InputCell.Comment.Text Text:=TextComment
    'InputCell.Comment.Visible = False
    'InputCell.Comment.Shape.Width = 300
    'InputCell.Comment.Shape.Height = 100
Dim CNTerr As Integer
    
    CNTerr = 0
    On Error GoTo FillCommentError
    Cells(R, C).Select
    Cells(R, C).AddComment
    Cells(R, C).Comment.Text Text:=TextComment
    Cells(R, C).Comment.Visible = False
    Cells(R, C).Comment.Shape.Width = 300
    Cells(R, C).Comment.Shape.Height = 100
    FillComment = CNTerr
    On Error GoTo 0
    Exit Function
    
    ' link utile per la formattazione dei commenti
    ' http://www.contextures.com/xlcomments03.html


FillCommentError:
    CNTerr = CNTerr + 1
    Resume Next

End Function


Public Function ClearComment(ByVal R As Integer, ByVal C As Integer) As Integer

    ' riporta il testo nel commento della cella che |fffd| stata selezionata
    'InputCell.Select
    ' non importa se viene generato un errore interno
    'On Error Resume Next
    'InputCell.AddComment
    ' ripristina la gestione di errori normale
    'On Error GoTo 0
    '
    'InputCell.Comment.Text Text:=TextComment
    'InputCell.Comment.Visible = False
    'InputCell.Comment.Shape.Width = 300
    'InputCell.Comment.Shape.Height = 100
Dim CNTerr As Integer
    
    CNTerr = 0
    On Error GoTo ClearCommentError
    Cells(R, C).Select
    Cells(R, C).ClearComments
    Cells(R, C).Comment.Visible = False
    ClearComment = CNTerr
    On Error GoTo 0
    Exit Function
    
    ' link utile per la formattazione dei commenti
    ' http://www.contextures.com/xlcomments03.html


ClearCommentError:
    CNTerr = CNTerr + 1
    Resume Next

End Function





Public Function CheckPartNumberCell(x As Integer, y As Integer) As Integer


Dim Index As Integer
Dim numModule As Integer
Dim TextString As String


    On Error Resume Next
    TextString = Cells(x, y)
    i = Err.number
    On Error GoTo 0
    If TextString = "" Or i <> 0 Then
        CheckPartNumberCell = 0
        Exit Function
    End If

' cerca se |fffd| stata premuta una cella relativa al tipo di modulo
' cerca quanti moduli sono presenti
numModule = 0
Do While (Sheets("Modules").Cells(numModule + 3, 1) <> "")
    numModule = numModule + 1
Loop
If numModule = 0 Then
    CheckPartNumberCell = -1
    Exit Function
End If
' cerca se il contenuto della cella selezionata corrisponde ad uno dei moduli
For Index = 0 To numModule
    'If InputCell.Cells = Sheets("Modules").Cells(Index + 3, 1) Then
    If TextString = Sheets("Modules").Cells(Index + 3, 1) Then
        Exit For
    End If
Next Index
' se non |fffd| stata trovata non |fffd| una cella che interessa
If Index > numModule Then
    CheckPartNumberCell = 0
    Exit Function
End If

CheckPartNumberCell = Index + 3


End Function


Attribute VB_Name = "Questa_cartella_di_lavoro"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{AAEF5822-9426-409A-AAD6-B02FCCBE2254}{C49DF6A9-8AEB-4B28-B61B-05C1507175F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Apply_Click()

Dim s As String
Dim i As Integer

    s = BuiltComment(ModuleSelected, ModuleTypeSelected, NumModules.ListIndex + 1)
    BoxInfo.Text = s
    i = FillComment(s, InputCell.row, InputCell.column)
    UserForm1.Hide

End Sub

Private Sub Quit_Click()
    
    UserForm1.Hide
    
End Sub

Private Sub boxinfo_click()


    Stop
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

' inizializza la combobox di selezione numero moduli

Dim i As Integer

UserForm1.NumModules.Clear
For i = 1 To 100
    UserForm1.NumModules.AddItem Str(i)
Next i
UserForm1.NumModules.ListIndex = 0
If UserForm1.BoxInfo.MultiLine = False Then
    UserForm1.BoxInfo.MultiLine = True
End If

End Sub


Private Sub Typemode_dropbuttonclick()

If Not NotSave Then
    ModuleTypeSelected = UserForm1.TypeMode.ListIndex
    BoxInfo.Text = BuiltComment(ModuleSelected, ModuleTypeSelected, NumModules.ListIndex + 1)
   
End If

End Sub

Private Sub Typemode_change()

If Not NotSave Then
    ModuleTypeSelected = UserForm1.TypeMode.ListIndex
    BoxInfo.Text = BuiltComment(ModuleSelected, ModuleTypeSelected, NumModules.ListIndex + 1)
    
End If

End Sub

Private Sub NumModules_change()

If Not NotSave Then
    ModuleTypeSelected = UserForm1.TypeMode.ListIndex
    
    BoxInfo.Text = BuiltComment(ModuleSelected, ModuleTypeSelected, NumModules.ListIndex + 1)
   
    
End If

End Sub


INQUEST-PP=macro
