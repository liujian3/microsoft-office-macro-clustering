Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Module1"
Public Function ftName(ByRef nm As String) As String
    ftName = Left(nm, InStr(nm, " ") - 1)
    
End Function
'UpdateAD
'nick AD info
'Get-ADGroupMember -identity |fffd|VPN Users|fffd| | select name | Export-csv -path C:\Groupmembers.csv -NoTypeInformation
' import-active directory modeule needs to be run first
Sub ADUserInfo()

On Error GoTo errlbl
Dim iDebug As Integer

Dim rw As Integer
Dim rw2 As Integer
Dim rs As Object
Const ClrOn = 6
Const ClrOff = 0
Const ClrRed = 3
Dim bRed As Boolean
Dim sDebug As String


Dim QryVal As String
Dim UserName As String

If IsNumeric(Worksheets(ActiveSheet.Name).Cells(1, 3).Value) Then
    iDebug = CInt(Worksheets(ActiveSheet.Name).Cells(1, 3).Value)
Else
    iDebug = 0
End If

'Sheets(ActiveSheet.Name).Range("A:G").Interior.ColorIndex = -4142
'Sheets(ActiveSheet.Name).Range("H:J").Interior.ColorIndex = 40
Sheets(ActiveSheet.Name).Range("D:K").ClearContents
Sheets(ActiveSheet.Name).Range("A:B").Interior.ColorIndex = 0
Sheets(ActiveSheet.Name).Range("D:G").Interior.ColorIndex = 0
Sheets(ActiveSheet.Name).Range("K:K").Interior.ColorIndex = 0
Sheets(ActiveSheet.Name).Range("H:J").Interior.ColorIndex = 19
Sheets(ActiveSheet.Name).Range("c:c").Interior.ColorIndex = 15
Sheets(ActiveSheet.Name).Range("l:l").Interior.ColorIndex = 15

Sheets(ActiveSheet.Name).Range("A:L").Font.FontStyle = "Regular"
Sheets(ActiveSheet.Name).Range("A:L").Font.Color = 0

Sheets(ActiveSheet.Name).Range("A1:K1").Font.FontStyle = "Bold"

Sheets(ActiveSheet.Name).Range("A:B").Borders.LineStyle = 1
Sheets(ActiveSheet.Name).Range("D:K").Borders.LineStyle = 1
Sheets(ActiveSheet.Name).Range("c:c").Borders.LineStyle = -4142
Sheets(ActiveSheet.Name).Range("L:L").Borders.LineStyle = -4142

rw = 1

Call CellUpdate(rw, 4, "User ID")
Call CellUpdate(rw, 5, "Name")
Call CellUpdate(rw, 6, "Email Address")
Call CellUpdate(rw, 7, "Phone #")
Call CellUpdate(rw, 8, "IP Phone #")
Call CellUpdate(rw, 9, "Optimizer Buss Unit")
Call CellUpdate(rw, 10, "Optimizer Office")
Call CellUpdate(rw, 11, "Department")
rw = rw + 1
rw2 = 1
Dim Flags As Integer
Const ADS_UF_ACCOUNTDISABLE As Integer = &H2
Dim msg As String
UserName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)
 
Do While Len(UserName) > 0
    msg = ""
 
  
    QryVal = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value)
    Set rootDSE = GetObject("LDAP://RootDSE")
   Base = "<LDAP://" & rootDSE.Get("defaultNamingContext") & ">"
    
    'filter on user objects with the given account name
    If Len(QryVal) Then
        fltr = "(&(objectClass=user)(objectCategory=Person)" & _
                "(sAMAccountName=" & UserName & "))"
    
    ElseIf InStr(UserName, "@") > 0 Then
        fltr = "(&(objectClass=user)(objectCategory=Person)" & _
                "(mail=" & UserName & "))"
    
    Else
        fltr = "(&(objectClass=user)(objectCategory=Person)" & _
                "(cn=" & UserName & "))"
    End If
            
   '             fltr = "(&(objectClass=user)(objectCategory=Person)" & _
    '            "(optimizerOffice=" & "Pod Nowotarski" & "))"
            
  
    
    'add other attributes according to your requirements
    attr = "distinguishedName,sAMAccountName, title,department, cn,telephoneNumber,ipPhone,optimizerBusinessUnit,optimizerOffice,mail,userAccountControl,WhenChanged"

 

    scope = "subtree"
    
    Set conn = CreateObject("ADODB.Connection")
    conn.Provider = "ADsDSOObject"
  
    conn.OpeF "Active Directory Provider"
    msg = "Query User:" & UserName
    
    
    Set cmd = CreateObject("ADODB.Command")
    Set cmd.ActiveConnection = conn
    
    cmd.CommandText = Base & ";" & fltr & ";" & attr & ";" & scope
  
   
    ret = ""
    
    Set rs = cmd.Execute
    
    If rs.EOF Then
       Worksheets(ActiveSheet.Name).Cells(rw, 1).Interior.ColorIndex = ClrOn
 
    Else
        Worksheets(ActiveSheet.Name).Cells(rw, 1).Interior.ColorIndex = ClrOff
        
        Do Until rs.EOF
        
          rw2 = rw2 + 1
          msg = "Displaying User:" & rs.Fields("cn").Value
          bRed = False
            
          If rs.Fields("userAccountControl").Value < 32768 Then
              Flags = CInt(rs.Fields("userAccountControl").Value)
            If (Flags And ADS_UF_ACCOUNTDISABLE) = ADS_UF_ACCOUNTDISABLE Then
               'Acct disabled
               Worksheets(ActiveSheet.Name).Cells(rw, 1).Interior.ColorIndex = ClrRed
              bRed = True
            
            End If
          ElseIf rs.Fields("userAccountControl").Value = 66050 Then
               Worksheets(ActiveSheet.Name).Cells(rw, 1).Interior.ColorIndex = ClrRed
              bRed = True
              
          End If

          
          If iDebug > 0 And bRed And (DateDiff("d", CDate(rs.Fields("WhenChanged").Value), Now) <= iDebug) Then
            If Len(sDebug) = 0 Then
                sDebug = rs.Fields("cn").Value
            Else
                sDebug = sDebug + vbCrLf + rs.Fields("cn").Value
            End If
            
          End If
          'distinguishedName displays OU
          
          Call CellUpdate(rw2, 4, rs.Fields("sAMAccountName").Value)
          Call CellUpdate(rw2, 5, rs.Fields("cn").Value)
          Call CellUpdate(rw2, 6, rs.Fields("mail").Value)
          Call CellUpdate(rw2, 7, rs.Fields("telephoneNumber").Value)
          Call CellUpdate(rw2, 8, "'" & rs.Fields("ipPhone").Value)
          Call CellUpdate(rw2, 9, rs.Fields("optimizerBusinessUnit").Value)
          Call CellUpdate(rw2, 10, rs.Fields("optimizerOffice").Value)
          'Call CellUpdate(rw2, 11, rs.Fields("title").Value)
          Call CellUpdate(rw2, 11, rs.Fields("department").Value)
         
          rs.MoveNext
        
        Loop
      
     End If
     
errlbl:
 '   On Error GoTo errlbl2
        
    If Not rs Is Nothing Then
        If rs.State <> 0 Then
          rs.Close
        End If
    End If
        
        If Err <> 0 Then
            Cells(rw, 1).Select
            MsgBox "Error #:" & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
            Err.Clear
            Set rst = Nothing
            Exit Sub
        End If
    
    'On Error Resume Next

'errlbl2:
        
    'Call test
    conn.Close
    rw = rw + 1
    UserName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)

Loop
If iDebug > 0 And Len(sDebug) > 0 Then
    MsgBox sDebug
End If
End Sub

Public Function HasSpecialCharacers(ByVal InputString As String) As Boolean
'For j = 1 To Len(InputString)
'    tmpString = Mid(InputString, j, 1)
    'If (tmpString < "a" Or tmpString > "Z") And (tmpString < "0" And tmpString > "9") Or tmpString = " " Then
   '     HasSpecialCharacers = True
  '      MsgBox "Has Special Char"
 '   End If
'Next j

For j = 1 To Len(InputString)
   If InStr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ", UCase(Mid(InputString, j, 1))) = 0 Then
      MsgBox "special character " & Mid(InputString, j, 1) & " exists"
      HasSpecialCharacers = True
   End If

Next

End Function


Public Sub CellUpdate(cl, rw, val)
 
 
Worksheets(ActiveSheet.Name).Cells(cl, rw).Value = val

'Cells(cl, rw).Value = vl
'test = "done"
End Sub

Public Sub UpdateAD()
    On Error GoTo errlbl
    Const sCode = "Update"
    Dim sInput As String
    
    sInput = InputBox("Enter Code To Update AD", "Passcode")
    
    If UCase(sInput) <> UCase(sCode) Then
        Exit Sub
    End If
    Dim msg As String
    msg = "Intial Query:" & "LDAP://rootDSE"
    
    Set objRootDSE = GetObject("LDAP://rootDSE")
    Dim strQuery As String

    
    rw = 2
    
    UserName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 4).Value)
    
    
    Do While Len(UserName) > 0
        msg = "Querying User:" & strQuery
    
        strQuery = ("LDAP://" & getUsersDN(UserName))
        Set objItem = GetObject(strQuery)
        
        msg = "Updating User:" & strQuery
        
        If Len(Trim(Worksheets(ActiveSheet.Name).Cells(rw, 7).Value)) > 0 Then
            objItem.Put "telephoneNumber", Trim(Worksheets(ActiveSheet.Name).Cells(rw, 7).Value)
        End If
        
        
        If Len(Trim(Worksheets(ActiveSheet.Name).Cells(rw, 8).Value)) > 0 Then
            If Left(Trim(Worksheets(ActiveSheet.Name).Cells(rw, 8).Value), 1) = "+" Then
                objItem.Put "ipPhone", Trim(Worksheets(ActiveSheet.Name).Cells(rw, 8).Value)
            Else
                objItem.Put "ipPhone", "+" & Trim(Worksheets(ActiveSheet.Name).Cells(rw, 8).Value)
            End If
        End If
        objItem.Put "optimizerBusinessUnit", Trim(Worksheets(ActiveSheet.Name).Cells(rw, 9).Value)
        objItem.Put "optimizerOffice", Trim(Worksheets(ActiveSheet.Name).Cells(rw, 10).Value)
        objItem.SetInfo
        rw = rw + 1
        UserName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 4).Value)
    
    Loop
    
    Exit Sub
errlbl:
 
    MsgBox "Error #:" & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg
    On Error Resume Next
 

End Sub
Sub tests()

       Set objRootDSE = GetObject("LDAP://rootDSE")
        Dim strQuery As String
        
        strQuery = ("LDAP://" & getUsersDN("pprete"))

        Set objItem = GetObject(strQuery)

        '***********************************************
        '*         End connect to an object           *
        '***********************************************

        objItem.Put "optimizerBusinessUnit", "test"
        objItem.SetInfo
End Sub

   Public Function getUsersDN(ByVal strUsername As String)
        Const ADS_SCOPE_SUBTREE = 2

        Set objConnection = CreateObject("ADODB.Connection")
        Set objCommand = CreateObject("ADODB.Command")
        objConnection.Provider = "ADsDSOObject"
        objConnection.Open "Active Directory Provider"
        Set objCommand.ActiveConnection = objConnection

        objCommand.Properties("Page Size") = 1000
        objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE

        objCommand.CommandText = _
            "SELECT distinguishedName FROM 'LDAP://DC=hq,DC=echogl,DC=net' " & _
                "WHERE objectCategory='user' " & _
                    "AND sAMAccountName='" & strUsername & "'"
        Set objRecordSet = objCommand.Execute

        objRecordSet.MoveFirst
        Do Until objRecordSet.EOF
            strDN = objRecordSet.Fields("distinguishedName").Value
            getUsersDN = strDN
            objRecordSet.MoveNext
        Loop


 End Function
 
 
Sub getGroupInfo()

On Error GoTo errlbl



Dim rw As Integer



rw = 1
groupName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value)

Set rootDSE = GetObject("LDAP://rootDSE") 'detect the own domain
domainDN = rootDSE.Get("defaultNamingContext")


Sheets(ActiveSheet.Name).Range("C:E").ClearContents


Sheets(ActiveSheet.Name).Range("A:E").Interior.ColorIndex = 0
Sheets(ActiveSheet.Name).Range("A:E").Font.FontStyle = "Regular"
Sheets(ActiveSheet.Name).Range("A:E").Font.FontStyle = "Regular"
Sheets(ActiveSheet.Name).Range("A:E").Font.Color = 0
Sheets(ActiveSheet.Name).Range("B1:E1").Font.FontStyle = "Bold"
Sheets(ActiveSheet.Name).Range("A:B").Borders.LineStyle = 0
Sheets(ActiveSheet.Name).Range("C:E").Borders.LineStyle = 1
Sheets(ActiveSheet.Name).Range("C:E").Borders.ColorIndex = 15

Worksheets(ActiveSheet.Name).Cells(1, 2).Interior.ColorIndex = 35
Sheets(ActiveSheet.Name).Range("b1").Font.Underline = False

Call CellUpdate(rw, 3, "User ID")
Call CellUpdate(rw, 4, "User Name")
Call CellUpdate(rw, 5, "Email Address")
rw = rw + 1


ldapFilter = "(sAMAccountName=" & groupName & ")"

Set ado = CreateObject("ADODB.Connection")
ado.Provider = "ADSDSOObject"
ado.Open "ADSearch"
'ado.Properties("Page Size") = 1000

Set objectList = ado.Execute("<LDAP://" & domainDN & ">;" & ldapFilter & _
                             ";distinguishedName,primaryGroupToken;subtree")



groupDN = objectList.Fields("distinguishedName")
groupRID = objectList.Fields("primaryGroupToken")

                                           'search the members
ldapFilter = "(|(memberOf=" & groupDN & ")(primaryGroupID=" & groupRID & "))"
'Set ado = CreateObject("ADODB.Connection")

'ado.Properties("Page Size") = 1000
'ado.Provider = "ADSDSOObject"
'ado.Open "ADSearch"

        Const ADS_SCOPE_SUBTREE = 2

        Set ado = CreateObject("ADODB.Connection")
        Set objCommand = CreateObject("ADODB.Command")
        ado.Provider = "ADsDSOObject"
        ado.Open "Active Directory Provider"
        Set objCommand.ActiveConnection = ado

        objCommand.Properties("Page Size") = 1000
        objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE

        objCommand.CommandText = _
          "<LDAP://" & domainDN & ">;" & ldapFilter & _
                             ";distinguishedName,samAccountName,displayname,userPrincipalName,cn,mail;subtree"
        Set objectList = objCommand.Execute
 
 
 
 
'Set objectList = ado.Execute("<LDAP://" & domainDN & ">;" & ldapFilter & _
 '                            ";distinguishedName,samAccountName,displayname,userPrincipalName,cn,mail;subtree")

While Not objectList.EOF
    userDN = objectList.Fields("distinguishedName")
    logonName = objectList.Fields("samAccountName")
    
    Call CellUpdate(rw, 3, objectList.Fields("sAMAccountName").Value)
    Call CellUpdate(rw, 4, objectList.Fields("cn").Value)
    Call CellUpdate(rw, 5, objectList.Fields("mail").Value)
    
    
    objectList.MoveNext
    rw = rw + 1
Wend
errlbl:
If Not objectList Is Nothing Then
    If objectList.State <> 0 Then
      objectList.Close
    End If
End If
    
If Err <> 0 Then
    MsgBox "Error #:" & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
    Err.Clear
    Set objectList = Nothing
    Exit Sub
End If
End Sub

Sub getUserInfo()

On Error GoTo errlbl
Dim objGroup As Object
Dim objUser As Object
Dim rw As Integer
Dim flt As String

rw = 1
Sheets(ActiveSheet.Name).Range("C:C").ClearContents


Sheets(ActiveSheet.Name).Range("A:C").Interior.ColorIndex = 0
Sheets(ActiveSheet.Name).Range("A:C").Font.FontStyle = "Regular"
Sheets(ActiveSheet.Name).Range("A:C").Font.FontStyle = "Regular"
Sheets(ActiveSheet.Name).Range("A:L").Font.Color = 0
Sheets(ActiveSheet.Name).Range("B1:C1").Font.FontStyle = "Bold"
Sheets(ActiveSheet.Name).Range("A:B").Borders.LineStyle = 0
Sheets(ActiveSheet.Name).Range("C:C").Borders.LineStyle = 1
Sheets(ActiveSheet.Name).Range("C:C").Borders.ColorIndex = 15

Worksheets(ActiveSheet.Name).Cells(1, 2).Interior.ColorIndex = 35
Sheets(ActiveSheet.Name).Range("b1").Font.Underline = False


UserName = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value)



Set rootDSE = GetObject("LDAP://rootDSE")
AD_Domain = rootDSE.Get("defaultNamingContext")


Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")

objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
objCommand.ActiveConnection = objConnection

If InStr(UserName, "@") > 0 Then
     fltr = "(&(objectClass=user)(objectCategory=Person)" & _
              "(mail=" & UserName & "))"
Else
      fltr = "(&(objectClass=user)(objectCategory=Person)" & _
              "(sAMAccountName=" & UserName & "))"
End If

objCommand.CommandText = "<LDAP://" & AD_Domain & ">;(&(objectCategory=User)" & fltr & ");samAccountName,distinguishedName,cn;subtree"

Set objRecordSet = objCommand.Execute



If objRecordSet.RecordCount = 0 Then 'User doesn't exist
  MsgBox "User " & UserName & " doesn't exist in Active Directory"
  Exit Sub

Else

 'objRecordSet.Close
' Set objRecordSet = Nothing
'==========================================================================
' This is an existing user to search for and work with
'==========================================================================

  If InStr(UserName, "@") > 0 Then
       fltr = "(&(objectClass=user)(objectCategory=Person)" & _
                "(mail=" & UserName & "))"
  Else
        fltr = "(&(objectClass=user)(objectCategory=Person)" & _
                "(sAMAccountName=" & UserName & "))"
  End If

  objCommand.CommandText = "SELECT distinguishedName,cn FROM 'LDAP://" & AD_Domain & "' WHERE objectClass='user' " & "and " & fltr

  'objCommand.Properties("Page Size") = 1000
 ' objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE
 ' Set objRecordSet = objCommand.Execute
  'objRecordSet.MoveFirst
  
  objDistinguishedName = objRecordSet.Fields("distinguishedName").Value
  objFullName = objRecordSet.Fields("cn").Value
  Set objUser = GetObject("LDAP://" & objDistinguishedName)
 

 
    Call CellUpdate(rw, 3, "Groups - " & objFullName)
    rw = rw + 1

    
  Set objGroups = objUser.Groups

  If IsEmpty(objGroups) Then
    ' No groups for this user
  ElseIf TypeName(objGroups) = "String" Then
    ' Only one group
    Call CellUpdate(rw, 3, objGroups.cn)
    Call CellUpdate(rw, 4, objGroups.Description)

  Else
    For Each objGroup In objGroups
        Call CellUpdate(rw, 3, objGroup.cn)
        'Call CellUpdate(rw, 4, objGroup.Description)
      rw = rw + 1
      
    Next
  End If
 

End If

errlbl:
If Not objRecordSet Is Nothing Then
    If objRecordSet.State <> 0 Then
      objRecordSet.Close
    End If
End If
    
If Err <> 0 Then
    MsgBox "Error #:" & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
    Err.Clear
    Set objRecordSet = Nothing
    Exit Sub
End If
End Sub

 
Attribute VB_Name = "Module2"




Sub ListComputers()

Set rootDSE = GetObject("LDAP://rootDSE")
AD_Domain = rootDSE.Get("defaultNamingContext")


Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")

objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
objCommand.ActiveConnection = objConnection


'Set rootDSE = GetObject("LDAP://" & sDomain)
'sBase = "<" & oDomain.ADsPath & ">"
'sFilter = "(&(objectCategory=Computer))"
'sAttribs = "name"
'sDepth = "subTree"

rw2 = 2
    Sheets(ActiveSheet.Name).Range("A:C").ClearContents

' sQuery = sBase & ";" & sFilter & ";" & sAttribs & ";" & sDepth
 
'     Set conn = CreateObject("ADODB.Connection")
 '   conn.Provider = "ADsDSOObject"
  '   Set cmd = CreateObject("ADODB.Command")
   ' Set cmd.ActiveConnection = conn
  
 ' cmd.CommandText = sBase & ";" & sFilter & ";" & sAttribs & ";" & sDepth
'objCommand.CommandText = "<LDAP://" & AD_Domain & ">;(&(objectCategory=Computer)" & fltr & ");name,cn;subtree"

fltr = ""
'fltr = "(name=" & "PTHOMPSON-P510" & ")"
    currentDate = DateDiff("s", CDate("9/1/2017"), Now()) * 1000#
    'currentDate = currentDate - 7776000000# 'Subtracts 90 days
currentDate = "30"

fltr = "(lastLogonTimestamp>=" & currentDate & ")"
',LastLogonDate,UserPrincipalName
fltr = ""
objCommand.CommandText = "<LDAP://" & AD_Domain & ">;(&(objectCategory=Computer)" & fltr & ");name,DistinguishedName,lastLogonTimestamp,SamAccountName,cn;subtree"
  
  
  objCommand.Properties("Page Size") = 1000
  objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE


         
  Set rs = objCommand.Execute
  Do Until rs.EOF
Call CellUpdate(rw2, 1, rs("name"))
Set objDate = rs.Fields("lastLogonTimestamp").Value

            lngHigh = objDate.HighPart
            lngLow = objDate.LowPart
            If (lngLow < 0) Then
                lngHigh = lngHigh + 1
            End If
            If (lngHigh = 0) And (lngLow = 0) Then
                dtmDate = ""
            Else
                dtmDate = #1/1/1601# + (((lngHigh * (2 ^ 32)) _
                    + lngLow) / 600000000) / 1440
            End If
 
     Call CellUpdate(rw2, 2, dtmDate)
     Call CellUpdate(rw2, 3, rs("SamAccountName"))
   
 Call CellUpdate(1, 2, rw2)
rw2 = rw2 + 1

  rs.MoveNext
  Loop
  
  If Not rs Is Nothing Then
    If rs.State <> 0 Then
      rs.Close
    End If
End If
  MsgBox "Done"
  
End Sub
Function SystemReachable(ByVal ComputerName As String)
Dim oShell, oExec As Variant
Dim strText, strCmd As String

strText = ""
strCmd = "ping -n 3 -w 1000 " & ComputerName

Set oShell = CreateObject("WScript.Shell")
Set oExec = oShell.Exec(strCmd)

Do While Not oExec.StdOut.AtEndOfStream
    strText = oExec.StdOut.ReadLine()
    If InStr(strText, "Reply") > 0 Then
        myStatus = strText
        Exit Do
    Else
        myStatus = ""
    End If
Loop

End Function
Sub isDirty()
     On Error GoTo errlbl
    
 
    Dim rw As Integer
    Dim rw2 As Integer
    Dim msg As String
    Dim bolOnLine As Boolean
    
    Sheets(ActiveSheet.Name).Range("B:K").ClearContents
    Sheets(ActiveSheet.Name).Range("A:K").Interior.ColorIndex = 0
    Sheets(ActiveSheet.Name).Range("A:L").Font.FontStyle = "Regular"
    Sheets(ActiveSheet.Name).Range("A:L").Font.Color = 0
    rw2 = 1
    Sheets(ActiveSheet.Name).Range("a1:K1").Font.FontStyle = "Bold"
    Call CellUpdate(rw2, 1, "Computer")
    Call CellUpdate(rw2, 2, "Pingable")
  '  Call CellUpdate(rw2, 3, "Disk Name")
 '   Call CellUpdate(rw2, 4, "Volume Name")
    'Call CellUpdate(rw2, 5, "Volume Dirty")
   '' Call CellUpdate(rw2, 6, "Free Space in GB")
   ' Call CellUpdate(rw2, 7, "Last Error Code")
   ' Call CellUpdate(rw2, 8, "File System")
   ' Call CellUpdate(rw2, 9, "Description")
    

    rw2 = rw2 + 1
    rw = rw2
    
    strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)
    
    'just test pingable
    
    
    
    
    
    Do While Len(strComputer) > 0
        Call CellUpdate(rw2, 1, strComputer)
        Call CellUpdate(rw2, 2, Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value))
        If SystemReachable(strComputer) > 0 Then
           Call CellUpdate(rw2, 3, "Yes")
        End If
        rw2 = rw2 + 1
        
        
        Call CellUpdate(1, 2, Str(rw2))
        bolOnLine = False
        Set objPing = GetObject("winmgmts:{impersonationLevel=impersonate}"). _
        ExecQuery("Select * from Win32_PingStatus Where Address = '" & strComputer & "'")
        
        For Each objStatus In objPing
            If Not IsNull(objStatus.StatusCode) Then
                If objStatus.StatusCode = 0 Then
                    bolOnLine = True
                End If
            End If
        Next
        
        If Not bolOnLine Then
            Call CellUpdate(rw2, 1, strComputer)
            Call CellUpdate(rw2, 2, Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value))
            rw2 = rw2 + 1
        Else
            bolErr = False
            Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
            If Not bolErr Then
            
                Set oWmiDiskSet = objWMIService.ExecQuery("select * from Win32_LogicalDisk where (DriveType=3 or DriveType=6) and FileSystem != null")
            
                For Each oWmiDisk In oWmiDiskSet
          
                    Call CellUpdate(rw2, 1, strComputer)
                    Call CellUpdate(rw2, 2, Trim(Worksheets(ActiveSheet.Name).Cells(rw, 2).Value))
                    Call CellUpdate(rw2, 3, oWmiDisk.Name)
                    Call CellUpdate(rw2, 4, oWmiDisk.VolumeName)
                    Call CellUpdate(rw2, 5, oWmiDisk.VolumeDirty)
                    Call CellUpdate(rw2, 6, Round(oWmiDisk.FreeSpace / 1024 / 1024 / 1024, 0) & " GB")
                    Call CellUpdate(rw2, 7, oWmiDisk.LastErrorCode)
                    Call CellUpdate(rw2, 8, oWmiDisk.FileSystem)
                    Call CellUpdate(rw2, 9, oWmiDisk.Description)
                    rw2 = rw2 + 1
                Next
            End If
        End If

errlbl:
        If Err <> 0 Then
        bolErr = True
        
        rw2 = rw2 + 1
        Resume Next
        'Cells(rw, 1).Select
        Debug.Print "Error #:" & strComputer & vbCr & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
        Err.Clear
        '       Set rst = Noth
        'Exit Sub
    End If
    
    rw = rw + 1
    strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)
    
    Loop
 
   
MsgBox "done"
End Function

Sub getIP()
 
    Dim oWMISrvEx       As Object   'SWbemServicesEx
    Dim oWMIObjSet      As Object   'SWbemServicesObjectSet
    Dim oWMIObjEx       As Object   'SWbemObjectEx
    Dim oWMIProp        As Object   'SWbemProperty
    Dim sWQL            As String   'WQL Statement
    Dim n               As Long     'Generic Counter
    Dim rw As Integer
    Dim rw2 As Integer
    On Error GoTo errlbl
    Sheets(ActiveSheet.Name).Range("B:B").ClearContents
    
    sWQL = "Select * From Win32_NetworkAdapterConfiguration"
'    Set oWMISrvEx = GetObject("winmgmts:root/CIMV2")
    
    rw2 = 2
    rw = rw2
    strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)


    
    Do While Len(strComputer) > 0
       bolErr = False
       Set oWMISrvEx = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
       If Not bolErr Then
            Call CellUpdate(1, 2, Str(rw))
            Set oWMIObjSet = oWMISrvEx.ExecQuery(sWQL)
            ot = ""
            For Each oWMIObjEx In oWMIObjSet
            'Put a STOP here then View > Locals Window to see all properties
            If Not IsNull(oWMIObjEx.ipaddress) Then
                If Len(ot) = 0 Then
                    ot = oWMIObjEx.ipaddress(0)
                Else
                    ot = ot + ";" + oWMIObjEx.ipaddress(0)
                End If
            End If
            Next
            
            Call CellUpdate(rw, 2, ot)

        End If
errlbl:
     If Err <> 0 Then
     bolErr = True

     'rw2 = rw2 + 1
     Resume Next
     'Cells(rw, 1).Select
     Debug.Print "Error #:" & strComputer & vbCr & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
     Err.Clear
     '       Set rst = Noth
     'Exit Sub
     End If

     rw = rw + 1
     strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)
     
     Loop
  
    
MsgBox "done"
End Sub

Sub WMI(strComputer As String)
 
    Dim oWMISrvEx       As Object   'SWbemServicesEx
    Dim oWMIObjSet      As Object   'SWbemServicesObjectSet
    Dim oWMIObjEx       As Object   'SWbemObjectEx
    Dim oWMIProp        As Object   'SWbemProperty
    Dim sWQL            As String   'WQL Statement
    Dim n               As Long     'Generic Counter
 
    sWQL = "Select * From Win32_NetworkAdapterConfiguration"
'    Set oWMISrvEx = GetObject("winmgmts:root/CIMV2")
     
    Set oWMISrvEx = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")

    
    Set oWMIObjSet = oWMISrvEx.ExecQuery(sWQL)
    For Each oWMIObjEx In oWMIObjSet
        'Put a STOP here then View > Locals Window to see all properties
        If Not IsNull(oWMIObjEx.ipaddress) Then
            Debug.Print "IP:"; oWMIObjEx.ipaddress(0)
            Debug.Print "Host name:"; oWMIObjEx.DNSHostName
            For Each oWMIProp In oWMIObjEx.Properties_
                If IsArray(oWMIProp.Value) Then
                    For n = LBound(oWMIProp.Value) To UBound(oWMIProp.Value)
                        Debug.Print oWMIProp.Name & "(" & n & ")", oWMIProp.Value(n)
                    Next
                Else
                    Debug.Print oWMIProp.Name, oWMIProp.Value
                End If
            Next
        End If
    Next
 
End Sub

Sub goTIMER(NumOfSeconds As Long) 'in (seconds) as:  call gotimer (1)  'seconds
  Application.Wait Now + NumOfSeconds / 86400#
  'Application.Wait (Now + TimeValue("0:00:05"))  'other
  Application.EnableEvents = True       'EVENTS
  'MsgBox "true"
End Sub

Sub cInfo()
    On Error GoTo errlbl
    
 
    Dim rw As Integer
    Dim rw2 As Integer
    Dim msg As String
    Sheets(ActiveSheet.Name).Range("B:K").ClearContents
    Sheets(ActiveSheet.Name).Range("A:K").Interior.ColorIndex = 0
    Sheets(ActiveSheet.Name).Range("A:L").Font.FontStyle = "Regular"
    Sheets(ActiveSheet.Name).Range("A:L").Font.Color = 0
    rw2 = 1
    Sheets(ActiveSheet.Name).Range("A1:K1").Font.FontStyle = "Bold"
    Call CellUpdate(rw2, 2, "User Name")
    Call CellUpdate(rw2, 3, "System Type")
    Call CellUpdate(rw2, 4, "Manufacturer")
    Call CellUpdate(rw2, 5, "OS Manufacturer")
    Call CellUpdate(rw2, 6, "OS Caption")
    Call CellUpdate(rw2, 7, "OS Version")
    Call CellUpdate(rw2, 8, "OS CSD Version")
    Call CellUpdate(rw2, 9, "OS Architecture")
    Call CellUpdate(rw2, 10, "OS Version")
 
    Dim bolOnLine As Boolean
    Dim bolErr As Boolean
    
    rw2 = rw2 + 1
    rw = rw2
    
    strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw2, 1).Value)
    Do While Len(strComputer) > 0
       Call CellUpdate(1, 2, Str(rw2))
       DoEvents
       On Error GoTo errlbl
       msg = ""
       bolOnLine = False
       
       bolErr = False
       
 '      Set objPing = objWMIService.ExecQuery("Select * from Win32_PingStatus")
 'goTIMER (1)

 
    Set objPing = GetObject("winmgmts:{impersonationLevel=impersonate}"). _
     ExecQuery("Select * from Win32_PingStatus Where Address = '" & strComputer & "'")
 
       For Each objStatus In objPing
            If Not IsNull(objStatus.StatusCode) Then
                If objStatus.StatusCode = 0 Then
                    bolOnLine = True
                End If
            End If
       Next
       If Not bolOnLine Then
           rw2 = rw2 + 1
        Else
 'goTIMER (1)
           
           Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
         Set rs = objWMIService.ExecQuery("Select * from Win32_ComputerSystem")
 '         Set rs = objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration where DeviceID=1 ")
' Set rs = objWMIService.ExecQuery("Select MACAddress from Win32_NetworkAdapter where DeviceID=1")
        
          ' objOperatingSystem.MACAddress
           
           If bolErr Then
               rw2 = rw2 + 1
            Else

               For Each objOperatingSystem In rs
                  Call CellUpdate(rw2, 2, objOperatingSystem.UserName)
                Call CellUpdate(rw2, 3, objOperatingSystem.systemtype)
                  Call CellUpdate(rw2, 4, objOperatingSystem.manufacturer)
                   Call CellUpdate(rw2, 5, objOperatingSystem.Model)
         'round(objOperatingSystem.TotalPhysicalMemory/1024/1024/1024,2)
         'objOperatingSystem.NumberOfLogicalProcessors
         'objOperatingSystem.NumberOfProcessors
               Next
               
                            
               
               Set rs = objWMIService.ExecQuery("Select * from Win32_OperatingSystem")
               
                
               For Each objOperatingSystem In rs
                   
                   Call CellUpdate(rw2, 6, objOperatingSystem.manufacturer)
                   Call CellUpdate(rw2, 7, objOperatingSystem.Caption)
                   Call CellUpdate(rw2, 8, objOperatingSystem.CSDVersion)
                   Call CellUpdate(rw2, 9, objOperatingSystem.OSArchitecture)
                   Call CellUpdate(rw2, 10, objOperatingSystem.Version)
                   rw2 = rw2 + 1
        
        
               Next
                              
               
                

            End If
            
errlbl:
             '   On Error GoTo errlbl2
                    
             '   If Not objOperatingSystem Is Nothing Then
              '      If objOperatingSystem.State <> 0 Then
               '       objOperatingSystem.Close
                '    End If
                'End If
                    
                    If Err <> 0 Then
                        bolErr = True
                        
                        Resume Next
                        'Cells(rw, 1).Select
                        Debug.Print "Count:" & Str(rw2)
                        Debug.Print "Error #:" & Str(Err.Number) & vbCr & vbCr & Err.Description & vbCr & msg & vbCr & vbCr & "Please Fix and try again"
                        Err.Clear
                 '       Set rst = Noth
                        Exit Sub
                    End If
                
                'On Error Resume Next
            
            'errlbl2:
                    
                'Call test
               ' conn.Close
            End If
            rw = rw + 1
            strComputer = Trim(Worksheets(ActiveSheet.Name).Cells(rw, 1).Value)
        
        Loop
MsgBox "done"

End Sub






Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
 


INQUEST-PP=macro
