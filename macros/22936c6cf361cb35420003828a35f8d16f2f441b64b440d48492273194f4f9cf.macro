Attribute VB_Name = "ModCCs"
Option Explicit

Public Sub ExtractCCtoExcel(oDoc As Document, strWorkBookName As String, xlSheetName As String, Optional bClose As Boolean)

Dim oCC As ContentControl
Dim oCCs As ContentControls
Dim oCCPsuedo As Object
Dim iXL As Long
Dim sText As String
Dim sName As String
Dim pPath As String
Dim strData As String
Dim sFieldName As String
Dim lngName As Long
Dim oFSO As Object
Dim sResult As String

    lngName = 1
    sText = ""
    sName = ""
    sFieldName = ""
    Set oCCs = oDoc.ContentControls
    For iXL = 1 To oCCs.Count
        Set oCC = oCCs(iXL)
        Select Case oCC.Type
            Case 0, 1, 3, 4, 6
                sResult = oCC.Range.Text
                sResult = Replace(sResult, Chr(39), Chr(39) & Chr(39))
                'sResult = Left(sResult, 255)
                sText = sText & sResult
                If iXL < oCCs.Count Then sText = sText & "|"
            Case 2
                pPath = ""
                On Error Resume Next
                pPath = oCC.Range.InlineShapes(1).LinkFormat.SourceFullName
                On Error GoTo 0
                If Len(pPath) > 0 Then
                    sText = sText & pPath
                Else
                    sText = sText & oCC.Range.Text
                End If
                If iXL < oCCs.Count Then sText = sText & "|"
            Case 8
                'Check box controls (not available in Word 2007)
                Set oCCPsuedo = oCC
                If oCCPsuedo.Checked Then
                    strData = True
                Else
                    strData = False
                End If
                sText = sText & strData
                If iXL < oCCs.Count Then sText = sText & "|"
            Case Else
                'Skip Group and Building Block Controls
        End Select
        sFieldName = oCC.TITLE
        If Trim(sFieldName) = "" Then
            sFieldName = "Un-named " & lngName
            lngName = lngName + 1
        End If
        sName = sName & sFieldName
        If iXL < oCCs.Count Then sName = sName & "|"
        DoEvents
    Next iXL
    Set oFSO = CreateObject("Scripting.FileSystemObject")

    'Debug.Print strWorkBookName
    'Debug.Print xlSheetName
    'Debug.Print sName

    If Not oFSO.FileExists(strWorkBookName) Then
        CreateWorkbook strWorkBookName, xlSheetName, sName
    End If

    SaveData strWorkBookName, xlSheetName, sName, sText
    If bClose Then oDoc.Close SaveChanges:=wdDoNotSaveChanges

lbl_Exit:
    Exit Sub
End Sub

Function IncompleteCCData(oDoc As Document) As Boolean
Dim cc_J As ContentControl
Dim bccIncomplete As Boolean

    bccIncomplete = False
    For Each cc_J In oDoc.Range.ContentControls
        'If any are incomplete
        If cc_J.ShowingPlaceholderText = True Then
            'Call the routine to return the unaltered form to the sender
            bccIncomplete = True
            Exit For
        End If
    Next cc_J
    IncompleteCCData = bccIncomplete
lbl_Exit:
    Exit Function
End Function

Function fcnGetCCTitles(oDoc As Word.Document, Optional bExtractFileName As Boolean = False) As String
Dim oCC_FormData As ContentControl
Dim strDataField_Name As String
Dim strField_Headings As String
Dim lngCCIndex As Long
Dim strCC_Data As String
Dim lngUntitled As Long
    strField_Headings = ""
    lngUntitled = 1
    Erase p_arrCCs_FormData
    p_arrCCs_FormData = fcnGet_CC_Data_Fields(oDoc)
    For lngCCIndex = 0 To UBound(p_arrCCs_FormData)
        Set oCC_FormData = oDoc.ContentControls(p_arrCCs_FormData(lngCCIndex))
        strDataField_Name = oCC_FormData.TITLE
        If strDataField_Name = "" Then
            strDataField_Name = "Untitled " & lngUntitled
            lngUntitled = lngUntitled + 1
        End If
        Select Case lngCCIndex
            Case Is = UBound(p_arrCCs_FormData)
                If bExtractFileName Then
                    strField_Headings = strField_Headings & strDataField_Name & ","
                    strField_Headings = strField_Headings & "Record Name"
                Else
                    strField_Headings = strField_Headings & strDataField_Name
                End If
            Case Else
                strField_Headings = strField_Headings & strDataField_Name & ","
        End Select
    Next lngCCIndex
    fcnGetCCTitles = strField_Headings
CleanUp:
    Set oCC_FormData = Nothing
lbl_Exit:
    Exit Function
End Function

Function fcnGetCCCollection(oDoc As Document) As Collection
Dim lngValidator As Long
Dim oStoryRng As Word.Range
Dim oCC As ContentControl
Dim oShp As Shape
Dim strSelectedID As String
Dim lngItems As Long
Dim oColCCs As Collection

    Set oColCCs = New Collection
    lngValidator = oDoc.Sections(1).Headers(1).Range.StoryType
    For Each oStoryRng In oDoc.StoryRanges
        'Iterate through all linked stories
        Select Case oStoryRng.StoryType
            Case 1 To 11
                Do
                    On Error Resume Next
                    For Each oCC In oStoryRng.ContentControls
                        Select Case oCC.Type
                            Case 0, 1, 2, 3, 4, 5, 6, 8
                                'If p_bDataFieldIsTagged = True Then
                                '    If oCC.Tag = p_strFormDataFieldTag Then
                                '        oColCCs.Add oCC
                                '    End If
                                'Else
                                oColCCs.Add oCC
                                'End If
                        End Select
                    Next oCC
                    Select Case oStoryRng.StoryType
                        Case 6, 7, 8, 9, 10, 11
                            If oStoryRng.ShapeRange.Count > 0 Then
                                For Each oShp In oStoryRng.ShapeRange
                                    On Error GoTo Err_HasText
                                    If oShp.TextFrame.HasText Then
                                        For Each oCC In oShp.TextFrame.TextRange.ContentControls
                                            Select Case oCC.Type
                                                Case 0, 1, 2, 3, 4, 5, 6, 8
                                                    'If p_bDataFieldIsTagged = True Then
                                                    '    If oCC.Tag = p_strFormDataFieldTag Then
                                                    '        oColCCs.Add oCC
                                                    '    End If
                                                    'Else
                                                    oColCCs.Add oCC
                                                    'End If
                                            End Select
                                        Next oCC
                                    End If
Err_HasText_ReEntry:
                                Next oShp
                            End If
                        Case Else
                            'Do Nothing
                    End Select
                    'Get next linked story (if any)
                    Set oStoryRng = oStoryRng.NextStoryRange
                Loop Until oStoryRng Is Nothing
            Case Else
        End Select
    Next oStoryRng
    Set fcnGetCCCollection = oColCCs
    Set oColCCs = Nothing
lbl_Exit:
    Exit Function
Err_HasText:
    Resume Err_HasText_ReEntry
End Function

Function fcnCC_Content(oCC_Passed As ContentControl) As String
Dim strData As String
Dim oCCPsuedo As Object
    If oCC_Passed.ShowingPlaceholderText Then
        strData = ""
    Else
        Select Case oCC_Passed.Type
            Case 0, 1, 3, 4, 5, 6
                'Text, date, list and combo controls
                strData = oCC_Passed.Range.Text
            Case 2
                'Picture
                On Error Resume Next
                strData = oCC_Passed.Range.InlineShapes(1).LinkFormat.SourceName
                On Error GoTo 0
                If Len(strData) = 0 Then
                    'Inserts a "/" character indicating an unlinked image file
                    strData = oCC_Passed.Range
                End If
            Case 5
                strData = ""
            Case 8
                'Check box controls (not available in Word 2007)
                Set oCCPsuedo = oCC_Passed
                If oCCPsuedo.Checked Then
                    strData = True
                Else
                    strData = False
                End If
        End Select
    End If
    fcnCC_Content = strData
lbl_Exit:
    Set oCCPsuedo = Nothing
    Exit Function
End Function

Function fcnGet_CC_Data_Fields(oDocPassed As Word.Document) As String()
'Collect the CCs that are tagged as form data fields.
Dim arrCCs() As String
Dim oCC As ContentControl
Dim lngIndex As Long
    lngIndex = 0
    'End If
    ReDim arrCCs(lngIndex)
    For Each oCC In fcnGetCCCollection(oDocPassed)
        Select Case oCC.Type
            Case 0, 1, 2, 3, 4, 5, 6, 8
                ReDim Preserve arrCCs(lngIndex)
                arrCCs(lngIndex) = oCC.ID
                lngIndex = lngIndex + 1
            Case 7, 9
                'Exclude group and repeating data controls
        End Select
    Next oCC
    fcnGet_CC_Data_Fields = arrCCs
lbl_Exit:
    Exit Function
End Function

Function fcnValidateCCTitles(oDocPassed As Document) As Boolean
Dim oColCCs As New Collection
Dim lngIndex As Long
Dim oCC As ContentControl
    fcnValidateCCTitles = True
    Erase p_arrCCs_FormData
    p_arrCCs_FormData = fcnGet_CC_Data_Fields(oDocPassed)
    For lngIndex = 0 To UBound(p_arrCCs_FormData)
        Set oCC = oDocPassed.ContentControls(p_arrCCs_FormData(lngIndex))
        If oCC.TITLE = vbNullString Then
            fcnValidateCCTitles = False
            Exit Function
        End If
        On Error Resume Next
        oColCCs.Add oCC.TITLE, oCC.TITLE
        If Err.Number <> 0 Then
            fcnValidateCCTitles = False
            Exit Function
        End If
        On Error GoTo 0
    Next lngIndex
lbl_Exit:
    Exit Function
End Function

Function fcnValidateScrubTitle(ByRef pPassedStr As String) As String
Dim arrProhibited() As String
Dim lngIndex As Long
    arrProhibited = Split(" .!.#.$.%.&.'.(.).*.+.=.|.\.{.}.[.]./.<.>.^.`.~.\.:.;", ".")
    For lngIndex = 0 To UBound(arrProhibited)
        'Debug.Print Asc(arrProhibited(lngIndex)) & ", "
        pPassedStr = Replace(pPassedStr, arrProhibited(lngIndex), "_")
    Next lngIndex
    If Mid(pPassedStr, 1, 1) Like "[0-9]" Then
        fcnValidateScrubTitle = "_" & pPassedStr
    Else
        fcnValidateScrubTitle = pPassedStr
    End If
lbl_Exit:
    Exit Function
End Function

Function fcnValidateTitle(ByRef strPassed As String) As Boolean
Dim arrProhibited() As String
Dim lngIndex As Long
    fcnValidateTitle = True
    arrProhibited = Split("!.#.$.%.&.'.(.).*.+.=.|.\.{.}.[.]./.<.>.^.`.~.\.:.;", ".")
    For lngIndex = 0 To UBound(arrProhibited)
        If InStr(strPassed, arrProhibited(lngIndex)) > 0 Then
            fcnValidateTitle = False
            Exit For
        End If
    Next lngIndex
lbl_Exit:
    Exit Function
End Function


Attribute VB_Name = "ModCloseBtn_TitleBar"
Option Explicit
Private Const mcGWL_STYLE = (-16)
Private Const mcWS_SYSMENU = &H80000
'Windows API calls to handle windows
#If Win64 Then
Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                              ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As LongPtr, _
                                                                                    ByVal nIndex As Long) As Long
Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, _
                                                                                    ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hwd As LongPtr) As Long
#Else
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                      ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, _
                                                                            ByVal nIndex As Long) As Long
Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, _
                                                                            ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long
#End If

Public Sub RemoveCloseButton(frm As Object)
Dim lngStyle As Long
Dim lngHWnd As Long
    lngHWnd = FindWindow(vbNullString, frm.Caption)
    lngStyle = GetWindowLong(lngHWnd, mcGWL_STYLE)
    If lngStyle And mcWS_SYSMENU > 0 Then
        SetWindowLong lngHWnd, mcGWL_STYLE, (lngStyle And Not mcWS_SYSMENU)
    End If
lbl_Exit:
    Exit Sub
End Sub

Public Sub RemoveTitleBar(oFrm As Object)
Dim lStyle As Long
Dim hMenu As Long
Dim mhWndForm As Long
    mhWndForm = FindWindow("ThunderDFrame", oFrm.Caption)
    lStyle = GetWindowLong(mhWndForm, -16)
    lStyle = lStyle And Not &HC00000
    SetWindowLong mhWndForm, -16, lStyle
    DrawMenuBar mhWndForm
    oFrm.Height = oFrm.Height - 24 + (oFrm.Height - oFrm.InsideHeight)    'Reduce the height of the form by the height of the title bar
lbl_Exit:
    Exit Sub
End Sub




Attribute VB_Name = "ModExcel"
Option Explicit

Public Sub CreateWorkbook(strWorkbook As String, _
                          strSheet As String, _
                          strFieldNames As String)
Dim xlApp As Object
Dim xlBook As Object
Dim xlSheet As Object
Dim oFSO As Object
Dim vFieldNames As Variant
Dim i As Integer, j As Integer
Dim sDummy As String
    vFieldNames = Split(strFieldNames, "|")
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    If oFSO.FileExists(strWorkbook) Then GoTo lbl_Exit
    Set xlApp = CreateObject("Excel.Application")

    On Error GoTo 0
    xlApp.Visible = False
    xlApp.DisplayAlerts = False
    Set xlBook = xlApp.Workbooks.Add
    Set xlSheet = xlBook.Sheets(1)
    xlSheet.Name = strSheet
    For j = 1 To 300
        If j Mod 10 = 0 Then
            sDummy = sDummy & "O"
        Else
            sDummy = sDummy & "x"
        End If
    Next
    For i = 0 To UBound(vFieldNames)
        xlSheet.Cells(1, i + 1) = vFieldNames(i)
        xlSheet.Cells(2, i + 1) = sDummy
    Next i
    xlSheet.Rows(2).Hidden = True
    With xlSheet.UsedRange
        .ColumnWidth = 22
        .HorizontalAlignment = 1
        .VerticalAlignment = -4160
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = -5002
        .MergeCells = False
    End With
    xlBook.SaveAs Filename:=strWorkbook
    xlBook.Close
    xlApp.DisplayAlerts = True
    xlApp.Quit
lbl_Exit:
    Set xlSheet = Nothing
    Set xlBook = Nothing
    Set xlApp = Nothing
    Set oFSO = Nothing
    Exit Sub
End Sub

Public Sub SaveData(strWorkbook As String, strSheet As String, strFields As String, strData As String)
Dim vFields As Variant
Dim i As Integer
Dim iFields As Integer
Dim strPath As String
Dim strName As String
Dim strExt As String
    vFields = Split(strFields, "|")
    iFields = UBound(vFields) + 1
    If Not xlFieldCount(strWorkbook, strSheet) = iFields Then
        ShowMessage 25, True
        Unload frmMsg
        GoTo lbl_Exit
    End If
    Do While Right(strSheet, 1) = "]" Or Right(strSheet, 1) = "$"
        strSheet = Left(strSheet, Len(strSheet) - 1)
    Loop
    strSheet = Trim(strSheet)
    WriteToWorksheet strWorkbook, strSheet, strData
lbl_Exit:
    Exit Sub
End Sub

Private Function WriteToWorksheet(strWorkbook As String, _
                                  strRange As String, _
                                  strValues As String)
Dim ConnectionString As String
Dim strSQL As String
Dim wCN As Object
    strValues = Replace(strValues, "|", "', '")
    
    ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                       "Data Source=" & strWorkbook & ";" & _
                       "Extended Properties=""Excel 12.0 Xml;HDR=YES;"";"
    strSQL = "INSERT INTO [" & strRange & "$] VALUES('" & strValues & "')"
    Set wCN = CreateObject("ADODB.Connection")
    Call wCN.Open(ConnectionString)
    Call wCN.Execute(strSQL, , 1 Or 128)
    If wCN.State = 1 Then wCN.Close
lbl_Exit:
    Set wCN = Nothing
    Exit Function
End Function

Private Function xlFieldCount(ByVal strWorkbook As String, _
                              strRange As String) As Integer
Dim cCN As Object
Dim cRS As Object

    If Not FileExists(strWorkbook) Then
        xlFieldCount = 0
        GoTo lbl_Exit
    End If

    Do While Right(strRange, 1) = "]" Or Right(strRange, 1) = "$"
        strRange = Left(strRange, Len(strRange) - 1)
    Loop
    strRange = Trim(strRange)

    strRange = strRange & "$]"
    Set cCN = CreateObject("ADODB.Connection")
    cCN.Open ConnectionString:="Provider=Microsoft.ACE.OLEDB.12.0;" & _
                              "Data Source=" & strWorkbook & ";" & _
                              "Extended Properties=""Excel 12.0 Xml;HDR=YES"";"
    Set cRS = CreateObject("ADODB.Recordset")
    cRS.CursorLocation = 3
    cRS.Open "SELECT * FROM [" & strRange, cCN, 2, 1        'read the data from the worksheet
    xlFieldCount = cRS.Fields.Count
    If cRS.State = 1 Then cRS.Close
    If cCN.State = 1 Then cCN.Close
lbl_Exit:
    Set cRS = Nothing
    Set cCN = Nothing
    Exit Function
End Function

'Sub Test()

'    CreateWorkbook "D:\My Documents\Test\User Files\Tina Wright\Data\Book1.xlsx", _
                   "Extracted Data", "Name|Address|Number"
'MsgBox xlFieldCount("D:\My Documents\Test\User Files\Tina Wright\Data\Book1.xlsx", "Sheet1")
'End Sub

'Sub Test1()
'MsgBox GetSheet("D:\My Documents\Test\User Files\Tina Wright\Data\Data.xlsx")
'End Sub

Function GetSheet(strWorkbook As String) As String
Dim CN As Object
Dim RS As Object
Dim tbl As Object
Dim iTbl As Long
Dim strTable As String
    Set CN = CreateObject("ADODB.Connection")
    CN.Open ConnectionString:="Provider=Microsoft.ACE.OLEDB.12.0;" & _
                              "Data Source=" & strWorkbook & ";" & _
                              "Extended Properties=""Excel 12.0 Xml;HDR=YES"";"
    Set RS = CN.OpenSchema(20, Array(Empty, Empty, Empty, "Table"))
    Do While Not RS.EOF
        strTable = RS!TABLE_NAME
        strTable = Replace(strTable, "'", "")
        strTable = Replace(strTable, "$", "")
        GetSheet = strTable
        Exit Do
        RS.MoveNext
    Loop
    CN.Close
    Set CN = Nothing
    Set RS = Nothing
    Set tbl = Nothing
lbl_Exit:
    Exit Function
End Function


Function IsSheet(strWorkbook As String, strSheet As String) As Boolean
Dim CN As Object
Dim RS As Object
Dim tbl As Object
Dim iTbl As Long
Dim strTable As String
    Set CN = CreateObject("ADODB.Connection")
    CN.Open ConnectionString:="Provider=Microsoft.ACE.OLEDB.12.0;" & _
                              "Data Source=" & strWorkbook & ";" & _
                              "Extended Properties=""Excel 12.0 Xml;HDR=YES"";"
    Set RS = CN.OpenSchema(20, Array(Empty, Empty, Empty, "Table"))
    Do While Not RS.EOF
        strTable = RS!TABLE_NAME
        strTable = Replace(strTable, "'", "")
        strTable = Replace(strTable, "$", "")
        'MsgBox strTable
        If strSheet = strTable Then
            IsSheet = True
            Exit Do
        End If
        RS.MoveNext
    Loop
    CN.Close
    Set CN = Nothing
    Set RS = Nothing
    Set tbl = Nothing
lbl_Exit:
    Exit Function
End Function

Private Function FileNameUnique(strPath As String, _
                                strFileName As String, _
                                strExtension As String) As String
'Graham Mayor
'Requires the use of the FileExists function
'strPath is the path in which the file is to be saved
'strFilename is the filename to check
'strextension is the extension of the filename to check
Dim lngF As Long
Dim lngName As Long
    strExtension = Replace(strExtension, Chr(46), "")
    lngF = 1
    lngName = Len(strFileName) - (Len(strExtension) + 1)
    strFileName = Left(strFileName, lngName)
    'If the filename exists, add or increment a number to the filename
    'and keep checking until a unique name is found
    Do While FileExists(strPath & strFileName & Chr(46) & strExtension) = True
        strFileName = Left(strFileName, lngName) & "(" & lngF & ")"
        lngF = lngF + 1
    Loop
    'Reassemble the filename
    FileNameUnique = strFileName & Chr(46) & strExtension
lbl_Exit:
    Exit Function
End Function

Private Function FileExists(strFullName As String) As Boolean
'Graham Mayor
'strFullName is the name with path of the file to check
Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(strFullName) Then
        FileExists = True
    Else
        FileExists = False
    End If
lbl_Exit:
    Set fso = Nothing
    Exit Function
End Function

'Sub Macro1()
'Dim strName As String
'Dim strPath As String
'Dim strExt As String
'Const strWorkbook As String = "D:\My Documents\Test\User Files\Tina Wright\Data\Book1.xlsx"
'strExt = Mid(strWorkbook, InStrRev(strWorkbook, Chr(46)) + 1)
'strName = Mid(strWorkbook, InStrRev(strWorkbook, Chr(92)) + 1)
'strPath = Left(strWorkbook, InStrRev(strWorkbook, Chr(92)))
'MsgBox strPath
'End Sub


Attribute VB_Name = "ModFFToCC"
Option Explicit

Sub ConvertDocumentFFsToCCs()
'A basic Word macro coded by Greg Maxey with changes by Graham Mayor ;)
Dim oFF As FormField
Dim oCC As ContentControl
Dim strText As String, strName As String
Dim bVal As Boolean
Dim arrVals() As String
Dim lngIndex As Long, lngDDItem As Long, lngCount As Long, lngFld As Long
Dim lngPT As Long, lngChk As Long, lngDD As Long
Dim oRng As Range, oRngBand As Range
Dim oFrmCnv As frmConvertFF
Dim oPrimaryBar As clsProgressBar
Dim bApplyGlobalEditor As Boolean
Dim strPassword As String

    lngPT = 0: lngChk = 0: lngDD = 0
    lngCount = ActiveDocument.FormFields.Count
    If lngCount = 0 Then
        ShowMessage 3
        GoTo lbl_Exit
    End If

    If WordVer < 14 Then
        ShowMessage 41
        GoTo lbl_Exit
    End If

    Set oFrmCnv = New frmConvertFF

    With oFrmCnv
        .Caption = AppID & " Version " & AppVer

        If GetSetting(AppID, "Config", "Disclaimer") = vbNullString Then
            .CheckDisclaimer.value = True
        Else
            .CheckDisclaimer.value = GetSetting(AppID, "Config", "Disclaimer")
        End If
        If Not ActiveDocument.ProtectionType = wdNoProtection Then
            .FramePassword.Visible = True
            If Val(Application.Version) > 14 Then
                .Height = 360
                .Width = 270
            Else
                .Height = 353
                .Width = 263
            End If
        Else
            .FramePassword.Visible = False
            If Val(Application.Version) > 14 Then
                .Height = 232
                .Width = 270
            Else
                .Height = 225
                .Width = 263
            End If
        End If
        .btnCancel.Top = .Height - 64
        .btnOK.Top = .Height - 64
        .CheckDisclaimer.Top = .Height - 84
        .Image2.Top = .Height - 96
        .chkGlobalEditor.Top = .Height - 120
        .hlpEditors.Top = .Height - 126


        .LabelInfo.Caption = "The active document contains " & lngCount & _
                             " legacy form fields available to be converted to content controls."
        RemoveCloseButton oFrmCnv
        .Show
        If .Tag = 0 Then GoTo lbl_Exit
        bApplyGlobalEditor = .chkGlobalEditor

        strPassword = .txtPassword.Text

        If Not ActiveDocument.ProtectionType = wdNoProtection Then
            On Error Resume Next
            ActiveDocument.Unprotect Password:=strPassword
            If Err.Number <> 0 Then
                ShowMessage 42
                GoTo lbl_Exit
            End If
            On Error GoTo 0
        End If
    End With


    Unload oFrmCnv

    For lngIndex = 1 To lngCount
        Set oFF = ActiveDocument.FormFields(lngIndex)
        If oFF.Name = "" Or oFF.Range.Bookmarks.Count = 0 Then
            Select Case oFF.Type
                Case 83: lngDD = lngDD + 1
                Case 71: lngChk = lngChk + 1
                Case 70: lngPT = lngPT + 1
            End Select
        End If
    Next lngIndex
    '    If lngCount > 5 Then
    Set oPrimaryBar = New clsProgressBar
    With oPrimaryBar
        .Background = &HE6FFFF
        .FontColor = 6291584
        .InitialColor = &HF7FBF7
        .FinalColor = &HFF00&
        .TotalActions = lngCount
        .ApplicationStatusBar = False
        If Not .ApplicationStatusBar Then .ShowBar
    End With
    '    End If
    Application.ScreenUpdating = False
    lngFld = 0
    For lngIndex = lngCount To 1 Step -1
        '       If lngCount > 5 Then
        oPrimaryBar.StepBar
        '      End If
        Set oFF = ActiveDocument.FormFields(lngIndex)
        If oFF.Name <> "" And oFF.Range.Bookmarks.Count <> 0 Then
            strName = oFF.Name
        Else
            strName = vbNullString
        End If
        Select Case oFF.Type
            Case 83
                ReDim arrVals(1 To oFF.DropDown.ListEntries.Count)
                For lngDDItem = 1 To oFF.DropDown.ListEntries.Count
                    arrVals(lngDDItem) = oFF.DropDown.ListEntries(lngDDItem).Name
                Next lngDDItem
                strText = oFF.Result
                Set oRng = oFF.Range
                oRng.Select
                oFF.Delete
                Set oCC = ActiveDocument.ContentControls.Add(wdContentControlDropdownList, oRng)
                oCC.SetPlaceholderText , , "Choose an item."
                If strName <> vbNullString Then
                    oCC.TITLE = strName
                Else
                    oCC.TITLE = "Defined DD " & lngDD
                    lngDD = lngDD - 1
                End If
                For lngDDItem = 1 To UBound(arrVals)
                    oCC.DropdownListEntries.Add arrVals(lngDDItem), arrVals(lngDDItem)
                    If oCC.DropdownListEntries(oCC.DropdownListEntries.Count).value = strText Then
                        oCC.DropdownListEntries(oCC.DropdownListEntries.Count).Select
                    End If
                Next lngDDItem
                If bApplyGlobalEditor Then oCC.Range.Editors.Add (wdEditorEveryone)
            Case 71
#If VBA7 Then
                bVal = oFF.CheckBox.value
                Set oRng = oFF.Range
                oRng.Select
                oFF.Delete
                Set oCC = ActiveDocument.ContentControls.Add(wdContentControlCheckBox, oRng)
                With oCC
                    If strName <> vbNullString Then
                        .TITLE = strName
                    Else
                        .TITLE = "Defined ChkBox " & lngChk
                        lngChk = lngChk - 1
                    End If
                    .Checked = bVal
                    If bApplyGlobalEditor Then
                        Set oRngBand = .Range
                        oRngBand.Start = oRngBand.Start - 1
                        oRngBand.End = oRngBand.End + 1
                        oRngBand.Editors.Add (wdEditorEveryone)
                    End If
                End With
#End If
            Case 70
                strText = oFF.Result
                Set oRng = oFF.Range
                oRng.Select
                oFF.Delete
                Set oCC = ActiveDocument.ContentControls.Add(wdContentControlText, oRng)
                With oCC
                    If strName <> vbNullString Then
                        .TITLE = strName
                    Else
                        .TITLE = "Defined Text " & lngPT
                        lngPT = lngPT - 1
                    End If
                    .SetPlaceholderText , , "Click or tap here to enter text."
                    .Range.Text = strText
                    If bApplyGlobalEditor Then
                        Set oRngBand = .Range
                        oRngBand.Start = oRngBand.Start - 1
                        oRngBand.End = oRngBand.End + 1
                        oRngBand.Editors.Add (wdEditorEveryone)
                    End If

                End With
        End Select
        'Select Case oCC.Type
        '    Case wdContentControlText: oCC.SetPlaceholderText , , "Click or tap here to enter text." 'String(5, Chr(160))
        '    Case wdContentControlDropdownList: oCC.SetPlaceholderText , , "Choose an item."
        'End Select
        DoEvents

    Next lngIndex
    oPrimaryBar.Complete 2
    'If lngCount > 5 Then: Unload oFrmProg: Set oFrmProg = Nothing
    Application.ScreenUpdating = True
    Application.ScreenRefresh
    ShowMessage 27, True, ActiveDocument.ContentControls.Count
    If frmMsg.Tag = 1 Then TagControls
    Unload frmMsg
lbl_Exit:
    Set oPrimaryBar = Nothing
    Exit Sub
End Sub



Attribute VB_Name = "ModFFs"
Option Explicit

Public Function ExtractDatatoExcel(oDoc As Document, _
                                   strWorkBookName As String, _
                                   xlSheetName As String, _
                                   Optional bClose As Boolean) As Boolean
Dim iLast As Long
Dim iXL As Long
Dim lngName As Long
Dim lngData As Long
Dim sText As String
Dim sName As String
Dim sFieldName As String
Dim oFld As FormField
Dim oFlds As FormFields
Dim oFSO As Object
Dim oRng As Range
Dim sResult As String

    Set oFlds = oDoc.FormFields
    Application.ScreenUpdating = False
    lngName = 1
    sText = ""
    sName = ""
    sFieldName = ""
    lngData = oFlds.Count
    For iXL = 1 To lngData
        Set oFld = oFlds(iXL)
        Select Case oFld.Type
            Case Is = wdFieldFormDropDown
                If oFld.DropDown.ListEntries.Count > 0 Then
                    sResult = oFld.Result
                    sResult = Replace(sResult, Chr(39), Chr(39) & Chr(39))
                    sText = sText & sResult
                Else
                    sText = sText & "Null Value"    'If it is a dropdown IT MUST HAVE at least one value assigned.
                End If
                If iXL < lngData Then sText = sText & "|"
            Case Is = wdFieldFormTextInput
                sResult = oFld.Result
                sResult = Replace(sResult, Chr(39), Chr(39) & Chr(39))
                'sResult = Left(sResult, 255)
                sText = sText & sResult
                If iXL < lngData Then sText = sText & "|"
            Case Is = wdFieldFormCheckBox
                sText = sText & oFld.CheckBox.value
                If iXL < lngData Then sText = sText & "|"
        End Select
        sFieldName = oFld.Name
        If Trim(sFieldName) = "" Then
            sFieldName = "Un-named " & lngName
            lngName = lngName + 1
        End If
        sName = sName & sFieldName
        If iXL < lngData Then sName = sName & "|"
        DoEvents
    Next iXL

    Application.ScreenUpdating = True
    Application.ScreenRefresh

    Set oRng = oDoc.Range(0, 0)
    oRng.Select

    Set oFSO = CreateObject("Scripting.FileSystemObject")

    If Not oFSO.FileExists(strWorkBookName) Then
        CreateWorkbook strWorkBookName, xlSheetName, sName
    End If

    SaveData strWorkBookName, xlSheetName, sName, sText
    If bClose Then oDoc.Close SaveChanges:=wdDoNotSaveChanges
CleanUp:
lbl_Exit:
    Set oRng = Nothing
    Exit Function
End Function


Public Function EscapeChars(strText As String) As String
    strText = Replace(strText, Chr(34), Chr(92) & Chr(34))
    strText = Replace(strText, Chr(37), Chr(92) & Chr(37))
    strText = Replace(strText, Chr(39), Chr(92) & Chr(39))
    strText = Replace(strText, Chr(92), Chr(92) & Chr(92))
    EscapeChars = strText

    '\0   An ASCII NUL (0x00) character.
    '    \    '   A single quote (|fffd|'|fffd|) character.
    '    \"   A double quote (|fffd|"|fffd|) character.
    '    \b   A backspace character.
    '    \n   A newline (linefeed) character.
    '    \r   A carriage return character.
    '    \t   A tab character.
    '    \Z   ASCII 26 (Control-Z). See note following the table.
    '    \\   A backslash (|fffd|\|fffd|) character.
    '    \%   A |fffd|%|fffd| character. See note following the table.
    '    \_   A |fffd|_|fffd| character. See note following the table.

End Function
Attribute VB_Name = "ModGetFolder"
Option Explicit

Public Function BrowseFolder(Optional Caption As String = "") As String
Dim fDialog As FileDialog
    On Error GoTo err_Handler
    Set fDialog = Application.FileDialog(msoFileDialogFolderPicker)
    With fDialog
        .TITLE = Caption
        .AllowMultiSelect = False
        .InitialView = msoFileDialogViewList
        If .Show <> -1 Then GoTo err_Handler:
        BrowseFolder = fDialog.SelectedItems.Item(1) & Chr(92)
    End With
lbl_Exit:
    Exit Function
err_Handler:
    ShowMessage 18
    Err.Clear
    BrowseFolder = vbNullString
    GoTo lbl_Exit
End Function

Function BrowseForFile(Optional Caption As String = "") As String
Dim fDialog As FileDialog
    On Error GoTo err_Handler
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    With fDialog
        .TITLE = Caption
        .AllowMultiSelect = False
        .Filters.Clear
        .Filters.Add "Excel Workbooks", "*.xls,*.xlsx,*.xlsmm"
        .InitialView = msoFileDialogViewList
        If .Show <> -1 Then GoTo err_Handler:
        BrowseForFile = fDialog.SelectedItems.Item(1)
    End With
lbl_Exit:
    Exit Function
err_Handler:
    BrowseForFile = vbNullString
    Err.Clear
    GoTo lbl_Exit
End Function

Public Function FileExists(strFullName As String) As Boolean
'Graham Mayor
'strFullName is the name with path of the file to check
Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(strFullName) Then
        FileExists = True
    Else
        FileExists = False
    End If
lbl_Exit:
    Set fso = Nothing
    Exit Function
End Function

Public Function FolderExists(strFolderName As String) As Boolean
'Graham Mayor
'strFolderName is the name of folder to check
   Dim fso As Object
   Set fso = CreateObject("Scripting.FileSystemObject")
   If (fso.FolderExists(strFolderName)) Then
      FolderExists = True
   Else
      FolderExists = False
   End If
lbl_Exit:
    Set fso = Nothing
    Exit Function
End Function

Public Sub CreateFolders(strPath As String)
'Graham Mayor
'Create any missing folders in a named file path
Dim lngPathSep As Long
Dim lngPS As Long
    If Right(strPath, 1) <> "\" Then strPath = strPath & "\"
    lngPathSep = InStr(3, strPath, "\")
    If lngPathSep = 0 Then GoTo lbl_Exit
    Do
        lngPS = lngPathSep
        lngPathSep = InStr(lngPS + 1, strPath, "\")
        If lngPathSep = 0 Then Exit Do
        If Len(Dir(Left(strPath, lngPathSep), vbDirectory)) = 0 Then Exit Do
    Loop
    Do Until lngPathSep = 0
        MkDir Left(strPath, lngPathSep)
        lngPS = lngPathSep
        lngPathSep = InStr(lngPS + 1, strPath, "\")
    Loop
lbl_Exit:
    Exit Sub
End Sub

Function xlListSheets(strWorkbook As String, _
                      ListOrComboBox As Object, _
                      Optional PromptText As String = "[Select Worksheet]") As String
Dim CN As Object
Dim RS As Object
Dim tbl As Object
Dim iTbl As Long
Dim strTable As String
    Set CN = CreateObject("ADODB.Connection")
    CN.Open ConnectionString:="Provider=Microsoft.ACE.OLEDB.12.0;" & _
                              "Data Source=" & strWorkbook & ";" & _
                              "Extended Properties=""Excel 12.0 Xml;HDR=YES"";"
    Set RS = CN.OpenSchema(20, Array(Empty, Empty, Empty, "Table"))
    ListOrComboBox.Clear
    Do While Not RS.EOF
        strTable = RS!TABLE_NAME
        If Right(strTable, 1) = "$" Then
            ListOrComboBox.AddItem Replace(RS!TABLE_NAME, "$", "")
        End If
        RS.MoveNext
    Loop
    If TypeName(ListOrComboBox) = "ComboBox" Then
        If TypeName(ListOrComboBox) = "ComboBox" Then
            ListOrComboBox.AddItem PromptText, 0
            ListOrComboBox.ListIndex = 0
        End If
    End If
    CN.Close
    Set CN = Nothing
    Set RS = Nothing
    Set tbl = Nothing
lbl_Exit:
    Exit Function
End Function

Function Bar(Var As Variant) As Boolean
    If IsNumeric(Var) Then
        Bar = False
    ElseIf IsDate(Var) Then
        Bar = True
    Else
        Bar = False
    End If
lbl_Exit:
    Exit Function
End Function


Attribute VB_Name = "ModGetOutlook"
Option Explicit
'Ben Clothier - http://www.rondebruin.nl/win/s1/outlook/openclose.htm
#Const LateBind = True

Const olMinimized As Long = 1
Const olMaximized As Long = 2
Const olFolderCalendar As Long = 9
Const olFolderContacts As Long = 10
Const olFolderDrafts As Long = 16
Const olFolderInbox As Long = 6
Const olFolderOutbox = 4
Const olFolderSentMail = 5
Const olFolderTasks = 13

#If LateBind Then

Public Function OutlookApp( _
       Optional WindowState As Long = olMinimized, _
       Optional Folder As Long = olFolderInbox, _
       Optional ReleaseIt As Boolean = False _
       ) As Object
Static o As Object
#Else
Public Function OutlookApp( _
       Optional WindowState As Outlook.OlWindowState = olMinimized, _
       Optional Folder As Long = olFolderInbox, _
       Optional ReleaseIt As Boolean _
       ) As Outlook.Application
Static o As Outlook.Application
#End If
    On Error GoTo ErrHandler

    Select Case True
        Case o Is Nothing, Len(o.Name) = 0
            Set o = GetObject(, "Outlook.Application")
            If o.Explorers.Count = 0 Then
InitOutlook:
                'Open inbox to prevent errors with security prompts
                o.Session.GetDefaultFolder(Folder).Display
                o.ActiveExplorer.WindowState = WindowState
            End If
        Case ReleaseIt
            Set o = Nothing
    End Select
    Set OutlookApp = o

ExitProc:
    Exit Function
ErrHandler:
    Select Case Err.Number
        Case -2147352567
            'User cancelled setup, silently exit
            Set o = Nothing
        Case 429, 462
            Set o = GetOutlookApp()
            If o Is Nothing Then
                Err.Raise 429, "OutlookApp", "Outlook Application does not appear to be installed."
            Else
                Resume InitOutlook
            End If
        Case Else
            MsgBox "Error " & Err.Number & ": " & Err.Description, vbCritical, "Unexpected error"
    End Select
    Resume ExitProc
    Resume
End Function

#If LateBind Then
Private Function GetOutlookApp() As Object
#Else
Private Function GetOutlookApp() As Outlook.Application
#End If
    On Error GoTo ErrHandler
    Set GetOutlookApp = CreateObject("Outlook.Application")
ExitProc:
    Exit Function
ErrHandler:
    Select Case Err.Number
        Case Else
            'Do not raise any errors
            Set GetOutlookApp = Nothing
    End Select
    Resume ExitProc
    Resume
End Function

'Sub MyMacroThatUseOutlook()
'Dim OutApp As Object
'    Set OutApp = OutlookApp()
    'Automate OutApp as desired
'End Sub

Attribute VB_Name = "ModGlobal"
Option Explicit

Public Const p_strReservedWords As String = "|ADD|ALL|Alphanumeric|ALTER|AND|ANY|Application|AS|ASC|Assistant|AUTOINCREMENT|Avg|" & _
       "BETWEEN|BINARY|BIT|BOOLEAN|BY|BYTE|CHAR|CHARACTER|COLUMN|CompactDatabase|CONSTRAINT|Container|Count|COUNTER|CREATE|CreateDatabase|" & _
       "CreateField|CreateGroup|CreateIndex|CreateObject|CreateProperty|CreateRelation|CreateTableDef|CreateUser|CreateWorkspace|CURRENCY|" & _
       "CurrentUser|DATABASE|DATE|DATETIME|DELETE|DESC|Description|DISALLOW|DISTINCT|DISTINCTROW|Document|DOUBLE|DROP|Echo|Else|End|Eqv|Error|" & _
       "EXISTS|Exit|FALSE|Field|Fields|FillCache|FLOAT|FLOAT4|FLOAT8|FOREIGN|Form|Forms|FROM|Full|FUNCTION|GENERAL|GetObject|GetOption|" & _
       "GotoPage|GROUP|GROUPBY|GUID|HAVING|Idle|IEEEDOUBLE|IEEESINGLE|If|IGNORE|Imp|IN|INDEX|Index|Indexes|INNER|INSERT|InsertText|INT|" & _
       "INTEGER|INTEGER1|INTEGER2|INTEGER4|INTO|IS|JOIN|KEY|LastModified|LEFT|Level|Like|LOGICAL|LOGICAL1|LONG|LONGBINARY|LONGTEXT|Macro|" & _
       "Match|Max|Min|Mod|MEMO|Module|MONEY|Move|NAME|NewPassword|NO|Not|Note|NULL|NUMBER|NUMERIC|Object|OLEOBJECT|OFF|ON|OpenRecordset|" & _
       "OPTION|OR|ORDER|Orientation|Outer|OWNERACCESS|Parameter|PARAMETERS|Partial|PERCENT|PIVOT|PRIMARY|PROCEDURE|Property|Queries|Query|" & _
       "Quit|REAL|Recalc|Recordset|REFERENCES|Refresh|RefreshLink|RegisterDatabase|Relation|Repaint|RepairDatabase|Report|Reports|Requery|" & _
       "RIGHT|SCREEN|SECTION|SELECT|SET|SetFocus|SetOption|SHORT|SINGLE|SMALLINT|SOME|SQL|StDev|StDevP|STRING|Sum|TABLE|TableDef|TableDefs|" & _
       "TableID|TEXT|TIME|TIMESTAMP|TOP|TRANSFORM|TRUE|Type|UNION|UNIQUE|UPDATE|USER|VALUE|VALUES|Var|VarP|VARBINARY|VARCHAR|VERSION|WHERE|" & _
       "WITH|Workspace|Xor|Year|YES|YESNO|"

Public p_arrCCs_FormData() As String
Attribute VB_Name = "ModLogStyles"
Option Explicit

Sub CreateLog(p_strProcessed As String, p_strSkipped As String)
Dim oRng As Range
Dim oLog As Document
    '    p_strSkipped = "All documents in the selected folder were processed."
    'End If
    Set oLog = Documents.Add
    Set oRng = oLog.Range
    With oRng
        LogBody oRng
        If Not p_strSkipped = vbNullString Then
            .Text = "The following documents were skipped due to an unhandled error (or required skip) during the extraction process:" & vbCr & p_strSkipped
            LogHeading .Paragraphs(1).Range
            .Collapse wdCollapseEnd
            .Text = vbCr & "The following documents were processed:" & vbCr
            LogHeading .Paragraphs.Last.Range
        Else
            .Text = "The following documents were processed:" & vbCr
            LogHeading .Paragraphs.First.Range
        End If
        .End = oLog.Range.End
        .Collapse wdCollapseEnd
        .Text = p_strProcessed
        LogBody .Paragraphs.Last.Range
        oLog.Activate
    End With
    Unload oFrmExtract
lbl_Exit:
    Exit Sub
End Sub

Public Sub LogBody(oRng As Range)
    With oRng.Font
        .Name = "Calibri"
        .Size = 12
        .Bold = False
        .Italic = False
        .Underline = wdUnderlineNone
        .StrikeThrough = False
        .DoubleStrikeThrough = False
        .Outline = False
        .Emboss = False
        .Shadow = False
        .Hidden = False
        .SmallCaps = False
        .AllCaps = False
        .Color = wdColorAutomatic
        .Engrave = False
        .Superscript = False
        .Subscript = False
        .Scaling = 100
        .Kerning = 0
        .Animation = wdAnimationNone
        #If VBA7 Then
            .Ligatures = wdLigaturesNone
            .NumberSpacing = wdNumberSpacingDefault
            .NumberForm = wdNumberFormDefault
            .StylisticSet = wdStylisticSetDefault
            .ContextualAlternates = 0
        #End If
    End With
    With oRng.ParagraphFormat
        .LeftIndent = CentimetersToPoints(0)
        .RightIndent = CentimetersToPoints(0)
        .SpaceBefore = 0
        .SpaceBeforeAuto = False
        .SpaceAfter = 0
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
        .Alignment = wdAlignParagraphLeft
        .WidowControl = True
        .KeepWithNext = False
        .KeepTogether = False
        .PageBreakBefore = False
        .NoLineNumber = False
        .Hyphenation = True
        .FirstLineIndent = CentimetersToPoints(0)
        .OutlineLevel = wdOutlineLevelBodyText
        .CharacterUnitLeftIndent = 0
        .CharacterUnitRightIndent = 0
        .CharacterUnitFirstLineIndent = 0
        .LineUnitBefore = 0
        .LineUnitAfter = 0
        .MirrorIndents = False
        .TextboxTightWrap = wdTightNone
        '.CollapsedByDefault = False
    End With
    oRng.NoProofing = True
lbl_Exit:
    Exit Sub
End Sub

Public Sub LogHeading(oRng As Range)
    With oRng.Font
        .Name = "Calibri"
        .Size = 14
        .Bold = True
        .Italic = True
        .Underline = wdUnderlineNone
        .StrikeThrough = False
        .DoubleStrikeThrough = False
        .Outline = False
        .Emboss = False
        .Shadow = False
        .Hidden = False
        .SmallCaps = False
        .AllCaps = False
        .Color = wdColorAutomatic
        .Engrave = False
        .Superscript = False
        .Subscript = False
        .Scaling = 100
        .Kerning = 0
        .Animation = wdAnimationNone
        #If VBA7 Then
            .Ligatures = wdLigaturesNone
            .NumberSpacing = wdNumberSpacingDefault
            .NumberForm = wdNumberFormDefault
            .StylisticSet = wdStylisticSetDefault
            .ContextualAlternates = 0
        #End If
    End With
    With oRng.ParagraphFormat
        .LeftIndent = CentimetersToPoints(0)
        .RightIndent = CentimetersToPoints(0)
        .SpaceBefore = 12
        .SpaceBeforeAuto = False
        .SpaceAfter = 3
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
        .Alignment = wdAlignParagraphLeft
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = False
        .PageBreakBefore = False
        .NoLineNumber = False
        .Hyphenation = True
        .FirstLineIndent = CentimetersToPoints(0)
        .OutlineLevel = wdOutlineLevel2
        .CharacterUnitLeftIndent = 0
        .CharacterUnitRightIndent = 0
        .CharacterUnitFirstLineIndent = 0
        .LineUnitBefore = 0
        .LineUnitAfter = 0
        .MirrorIndents = False
        .TextboxTightWrap = wdTightNone
        '.CollapsedByDefault = False
    End With
    oRng.NoProofing = True
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "ModOpenBrowser"
Option Explicit
Private pWebAddress As String
#If Win64 Then
    Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
                                                                                          ByVal lpOperation As String, ByVal lpFile As String, _
                                                                                          ByVal lpParameters As String, ByVal lpDirectory As String, _
                                                                                          ByVal nShowCmd As Long) As Long
#Else
    Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
                                                                                  ByVal lpOperation As String, ByVal lpFile As String, _
                                                                                  ByVal lpParameters As String, ByVal lpDirectory As String, _
                                                                                  ByVal nShowCmd As Long) As Long
#End If

Public Sub NewShell(cmdLine As String, lngWindowHndl As Long)
    ShellExecute lngWindowHndl, "open", cmdLine, "", "", 1
lbl_Exit:
    Exit Sub
End Sub

Public Sub MyWeb()
    pWebAddress = "http://www.gmayor.com/Index.htm"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub

Public Sub Info()
    pWebAddress = "http://www.gmayor.com/ExtractDataFromForms.htm"
    PlayASound "Notify"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub

Public Sub DonateGB()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=C22QAMXJVVZQ4"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub

Public Sub DonateEU()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=72JWWJEZX6KXS"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub

Public Sub DonateUS()
    pWebAddress = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HUS7FWLVVNTH4"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub

Sub MaxeyLink()
    pWebAddress = "http://gregmaxey.mvps.org/word_tip_pages/content_control_fillin_form.html"
    PlayASound "Notify"
    Call NewShell(pWebAddress, 3)
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "ModOutlook"
Option Explicit

Public Function CheckOutlookFolders(bWarning As Boolean)
Dim lngAdded As Long
Dim bExists As Boolean
Dim strAdded As String
Dim itxtHeight As Long
    lngAdded = 0

    Set olApp = OutlookApp()

    Set olNs = olApp.GetNamespace("MAPI")
    Set olFolder = olNs.GetDefaultFolder(6)

    'Create Parent folder
    bExists = False
    For i = 1 To olFolder.Folders.Count
        If olFolder.Folders(i).Name = "Forms_In" Then
            bExists = True
            Exit For
        End If
    Next i
    If bExists = False Then
        olFolder.Folders.Add "Forms_In"
        lngAdded = lngAdded + 10
    End If

    Set olFolder = olNs.GetDefaultFolder(6).Folders("Forms_In")

    'Create sub-folders
    bExists = False
    For i = 1 To olFolder.Folders.Count
        If olFolder.Folders(i).Name = "Forms_Completed" Then
            bExists = True
            Exit For
        End If
    Next i

    If bExists = False Then
        olFolder.Folders.Add "Forms_Completed"
        lngAdded = lngAdded + 50
    End If

    bExists = False
    For i = 1 To olFolder.Folders.Count
        If olFolder.Folders(i).Name = "Forms_Incomplete" Then
            bExists = True
            Exit For
        End If
    Next i

    If bExists = False Then
        olFolder.Folders.Add "Forms_Incomplete"
        lngAdded = lngAdded + 100
    End If

    bExists = False
    For i = 1 To olFolder.Folders.Count
        If olFolder.Folders(i).Name = "Forms_Wrong" Then
            bExists = True
            Exit For
        End If
    Next i

    If bExists = False Then
        olFolder.Folders.Add "Forms_Wrong"
        lngAdded = lngAdded + 500
    End If

    Select Case lngAdded
        Case 0
            strAdded = "The Outlook folders required by this application are already present."
            itxtHeight = 10
        Case 10
            strAdded = "The required Outlook folder and its three sub folders have been added to the Outlook inbox."
            itxtHeight = 10
        Case 50, 60
            strAdded = "The required Outlook folder " & Chr(34) & "Forms_Completed" & Chr(34) & " was missing and has been restored to the Outlook inbox."
            itxtHeight = 20
        Case 100, 110
            strAdded = "The required Outlook folder " & Chr(34) & "Forms_InComplete" & Chr(34) & " was missing and has been restored to the Outlook inbox."
            itxtHeight = 20
        Case 150, 160
            strAdded = "The required Outlook folders " & Chr(34) & "Forms_Completed" & Chr(34) & " and " & Chr(34) & _
                       "Forms_Incomplete" & Chr(34) & " were missing and have been restored to the Outlook inbox."
            itxtHeight = 20
        Case 500, 510
            strAdded = "The required Outlook folder " & Chr(34) & "Forms_Wrong" & Chr(34) & " was missing and has been restored to the Outlook inbox."
            itxtHeight = 20
        Case 550, 560
            strAdded = "The required Outlook folders " & Chr(34) & "Forms_Completed" & Chr(34) & " and " & Chr(34) & _
                       "Forms_Wrong" & Chr(34) & " were missing and have been restored to the Outlook inbox."
            itxtHeight = 20
        Case 600, 610
            strAdded = "The required Outlook folders " & Chr(34) & "Forms_InComplete" & Chr(34) & " and " & Chr(34) & _
                       "Forms_Wrong" & Chr(34) & " were missing and have been restored to the Outlook inbox."
            itxtHeight = 20
        Case 650, 660
            strAdded = "The three required Outlook sub folders " & Chr(34) & "Forms_Completed" & _
                       Chr(34) & ", " & Chr(34) & "Forms_Incomplete" & Chr(34) & " and " & Chr(34) & _
                       "Forms_Wrong" & Chr(34) & " were missing and have been restored to the Outlook inbox."
            itxtHeight = 36
    End Select
    If bWarning = False Then ShowMessage 2, False, strAdded, CStr(itxtHeight)
lbl_Exit:
    Exit Function
End Function

Public Function IsOutlook() As Boolean
    On Error Resume Next
    IsOutlook = (Not CreateObject("Outlook.Application") Is Nothing)
lbl_Exit:
    Exit Function
End Function

Attribute VB_Name = "ModPlayASound"
Option Explicit

#If Win64 Then
    Public Declare PtrSafe Function sndPlaySound32 Lib "winmm.dll" Alias "sndPlaySoundA" _
           (ByVal lpszSoundName As String, ByVal uFlags As Long) As Long
#Else
    Public Declare Function sndPlaySound32 Lib "winmm.dll" Alias "sndPlaySoundA" _
                                           (ByVal lpszSoundName As String, ByVal uFlags As Long) As Long
#End If

Public Sub PlayASound(ByVal pSound As String)
    If Dir(pSound, vbNormal) = "" Then
        pSound = Environ("WinDir") & "\Media\" & pSound
        If InStr(1, pSound, ".") = 0 Then pSound = pSound & ".wav"
        If Dir(pSound, vbNormal) = vbNullString Then
            Beep
            Exit Sub
        End If
    End If
    DoEvents
    sndPlaySound32 pSound, 0&
    DoEvents
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "ModReport"
Option Explicit

Sub PrepareReport()
Dim DocDir As String
Dim oFormDoc As Document
Dim oReportDoc As Document
Dim oVar As Variable
Dim oVars As Variables
Dim oFlds As FormFields
Dim varField As Field
Dim oCCs As ContentControls
Dim bLegacy As Boolean
Dim oReportRange As Range
Dim lngFields As Long
Dim iLeg As Long, iCC As Long
Dim sCCName As String
Dim strData As String
Dim oCCPsuedo As Object
Dim CC_Ctrl As ContentControl
Dim strFFText As String
Dim oSecondaryBar As clsProgressBar

    bLegacy = False
    If Documents.Count = 0 Then Documents.Add
    Set oFormDoc = ActiveDocument
    Set oFlds = oFormDoc.FormFields
    Set oCCs = oFormDoc.ContentControls

    If oFlds.Count = 0 And oCCs.Count = 0 Then
        ShowMessage 11
        GoTo CleanUp:
    End If

    If oFlds.Count > 0 Then bLegacy = True

    If bLegacy = True And oCCs.Count > 0 Then
        ShowMessage 11
        GoTo CleanUp:
    End If

    If GetSetting(AppID, "Config", "CheckIncomplete") = "" Then
        SaveSetting AppID, "Config", "CheckIncomplete", "False"
    End If


    If GetSetting(AppID, "Config", "CheckIncomplete") = True Then
        If bLegacy = True Then
            If IncompleteData(oFormDoc) = True Then
                ShowMessage 17, True
                If frmMsg.Tag = 0 Then
                    Unload frmMsg
                    GoTo CleanUp:
                End If
            End If
        Else
            If IncompleteCCData(oFormDoc) = True Then
                ShowMessage 16, True
                If frmMsg.Tag = 0 Then
                    Unload frmMsg
                    GoTo CleanUp:
                End If
            End If
        End If
    End If
    With frmReport
        If Val(Application.Version) > 14 Then
            .Width = 441
            .Height = 239
        Else
            .Width = 434
            .Height = 232
        End If
        If GetSetting(AppID, "Config", "Disclaimer") = vbNullString Then
            .CheckDisclaimer.value = True
        Else
            .CheckDisclaimer.value = GetSetting(AppID, "Config", "Disclaimer")
        End If

        RemoveCloseButton frmReport
        .Show
        If .Tag = 0 Then
            Unload frmReport
            GoTo CleanUp:
        End If
        On Error Resume Next
        Application.ScreenUpdating = False
        'Create a new Document from the named report template
        Set oReportDoc = Documents.Add(.TextTemplate.Text)
        If Err.Number = 5174 Then
            ShowMessage 12
            Unload frmMsg
            Unload frmReport
            GoTo CleanUp
        End If
        On Error GoTo 0
        WordBasic.DisableAutoMacros 1
        Set oVars = oReportDoc.Variables
        'Assign the Form Fields by name to the docvariables
        With oFormDoc
            If bLegacy = True Then
                lngFields = oFlds.Count
                Set oSecondaryBar = New clsProgressBar
                With oSecondaryBar
                    .Background = &HE6FFFF
                    .FontColor = 6291584
                    .InitialColor = &HF7FBF7
                    .FinalColor = &HFF00&
                    .TotalActions = lngFields
                    .ApplicationStatusBar = False
                    If Not .ApplicationStatusBar Then .ShowBar
                End With
                For iLeg = 1 To lngFields
                    oSecondaryBar.StepBar

                    strFFText = .FormFields(iLeg).Result
                    If strFFText = "" Then strFFText = " "
                    oVars("var" & .FormFields(iLeg).Name).value = strFFText
                    For Each varField In oReportDoc.Fields
                        If varField.Type = wdFieldDocVariable Then
                            If InStr(1, varField.Code, .FormFields(iLeg).Name) > 0 Then GoTo SkipField
                        End If
                    Next varField
                    Set oReportRange = oReportDoc.Range
                    oReportRange.Start = oReportDoc.Range.End
                    oReportRange.Text = vbCr
                    oReportRange.Start = oReportDoc.Range.End
                    oReportRange.ParagraphFormat.SpaceAfter = 0
                    oReportRange.ParagraphFormat.SpaceBefore = 0
                    oReportDoc.Fields.Add oReportRange, wdFieldDocVariable, Chr(34) & "var" & .FormFields(iLeg).Name & Chr(34), False
SkipField:
                    DoEvents
                Next iLeg
                oSecondaryBar.Complete 2
            Else
                For Each CC_Ctrl In oCCs
                    If CC_Ctrl.Type = 2 Or CC_Ctrl.Type = 5 Then
                        ShowMessage 13, True
                        If frmMsg.Tag = 0 Then
                            Unload frmMsg
                            Unload frmReport
                            oReportDoc.Close wdDoNotSaveChanges
                            GoTo CleanUp:
                        End If
                        Exit For
                    End If
                Next CC_Ctrl
                lngFields = oCCs.Count

                Set oSecondaryBar = New clsProgressBar
                With oSecondaryBar
                    .Background = &HE6FFFF
                    .FontColor = 6291584
                    .InitialColor = &HF7FBF7
                    .FinalColor = &HFF00&
                    .TotalActions = lngFields
                    .ApplicationStatusBar = False
                    If Not .ApplicationStatusBar Then .ShowBar
                End With
                For iCC = 1 To lngFields
                    oSecondaryBar.StepBar
                    sCCName = oCCs(iCC).TITLE
                    'If the content control has no name, create one
                    If sCCName = "" Then sCCName = "CControl" & iCC
                    Select Case oCCs(iCC).Type
                        Case 0, 1, 3, 4, 6
                            'Text, date, list and combo controls
                            strData = oCCs(iCC).Range
                        Case 2, 5
                            'Picture and building block controls
                            strData = " "
                        Case 8
                            Set oCCPsuedo = oCCs(iCC)
                            If oCCPsuedo.Checked Then
                                strData = True
                            Else
                                strData = False
                            End If
                        Case Else

                    End Select
                    oVars("var" & sCCName) = strData
                    For Each varField In oReportDoc.Fields
                        If varField.Type = wdFieldDocVariable Then
                            If InStr(1, varField.Code, sCCName) > 0 Then GoTo SkipCC
                        End If
                    Next varField
                    Set oReportRange = oReportDoc.Range
                    oReportRange.Start = oReportDoc.Range.End
                    oReportRange.Text = vbCr
                    oReportRange.Start = oReportDoc.Range.End
                    oReportRange.ParagraphFormat.SpaceAfter = 0
                    oReportRange.ParagraphFormat.SpaceBefore = 0
                    oReportDoc.Fields.Add oReportRange, wdFieldDocVariable, Chr(34) & "var" & sCCName & Chr(34), False
SkipCC:
                    DoEvents
                Next iCC
                oSecondaryBar.Complete 2
                Set oSecondaryBar = Nothing
    
            End If
        End With
        oReportDoc.Fields.Update
        oReportDoc.Activate
        Application.ScreenUpdating = True
        WordBasic.DisableAutoMacros 0

    End With
    Unload frmReport
CleanUp:
    Set oFlds = Nothing
    Set oCCs = Nothing
    Set oVars = Nothing
    Set oReportRange = Nothing
    Set oFormDoc = Nothing
    Set oReportDoc = Nothing
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "ModResetRegistry"
Option Explicit

Function RegKeyDelete(i_RegKey As String) As Boolean
Dim oWS As Object
    On Error GoTo ErrorHandler
    Set oWS = CreateObject("WScript.Shell")
    oWS.RegDelete i_RegKey
    RegKeyDelete = True
lbl_Exit:
    Set oWS = Nothing
    Exit Function
ErrorHandler:
    RegKeyDelete = False
    Err.Clear
    GoTo lbl_Exit
End Function

Public Sub Reset_Registry(Optional bMessage As Boolean = True)
    RegKeyDelete ("HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & AppID & "\Config\")
    If RegKeyDelete("HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & AppID & "\") = True Then
        If bMessage = True Then ShowMessage 35, False, AppID & " registry settings reset."
    Else
        If bMessage = True Then ShowMessage 35, False, AppID & " registry settings not present"
    End If
lbl_Exit:
    Exit Sub
End Sub

Attribute VB_Name = "ModRibbonCommands"
Option Explicit
Sub ExtractDataRibbonBtn(control As IRibbonControl)
    If Not GetSetting(AppID, "Config", "Version") = AppVer Then
        ModResetRegistry.Reset_Registry False
        SaveSetting AppID, "Config", "Version", AppVer
    End If
    If CBool(GetSetting(AppID, "Config", "Disclaimer", True)) = True Then frmDisclaimer.Show
    Select Case control.ID
        Case "EXTBut001": ProcessFormAttachments
        Case "EXTBut002": ModOutlook.CheckOutlookFolders False
        Case "EXTBut003": ModReport.PrepareReport
        Case "EXTBut004": ModResetRegistry.Reset_Registry True
        Case "EXTBut005": ModFFToCC.ConvertDocumentFFsToCCs
        Case "EXTBut006": ModTag.TagControls
    End Select
lbl_Exit:
    Exit Sub
End Sub



Attribute VB_Name = "ModTag"
Option Explicit

Sub TagControls()
Dim ofrmTag As frmTagControls
Dim lngCC_Count As Long
Dim lngFF_Count As Long
Dim strVer As String

    lngFF_Count = ActiveDocument.FormFields.Count
    lngCC_Count = fcnGetCCCollection(ActiveDocument).Count

    If lngCC_Count + lngFF_Count = 0 Then
        ShowMessage 26
        GoTo lbl_Exit
    End If

    If lngFF_Count > 0 Then
        ShowMessage 40
        If WordVer > 14 Then
            Select Case Val(Application.Version)
                Case 15: strVer = "Word 2013"
                Case 16: strVer = "Word 2016"
                Case Else: strVer = "a Word version later than Word 2010"
            End Select
            ShowMessage 36, , strVer
        End If
    End If

    If lngCC_Count > 0 Then
        If Val(Application.Version) = 12 Then
            ShowMessage 37
            GoTo lbl_Exit
        End If
    End If

    If GetSetting(AppID, "Config", "Form Data Field Tag") = "" Then
        SaveSetting AppID, "Config", "Form Data Field Tag", "Form Data Field"
    End If
    Set ofrmTag = New frmTagControls
    With ofrmTag
        
        If GetSetting(AppID, "Config", "Disclaimer") = vbNullString Then
            .CheckDisclaimer.value = True
        Else
            .CheckDisclaimer.value = GetSetting(AppID, "Config", "Disclaimer")
        End If

        RemoveCloseButton ofrmTag
        .Show
        If .Tag = 0 Then GoTo lbl_Exit
    End With
lbl_Exit:
    Set ofrmTag = Nothing
    Exit Sub
End Sub
Attribute VB_Name = "ModVersion"
Option Explicit

Function AppVer() As String
    AppVer = ThisDocument.Name
    AppVer = Right(AppVer, Len(AppVer) - InStr(AppVer, "Ver ") - 3)
    AppVer = Left(AppVer, Len(AppVer) - 5)
lbl_Exit:
    Exit Function
End Function

Function strDisclaimer(Optional bMaxey As Boolean) As String
    If bMaxey Then
        strDisclaimer = "The processes and features in the " & AppID & " add-in Version " & AppVer & _
                        " were developed and provided by Greg Maxey and Graham Mayor as a courtesy to the Microsoft Word user community." & vbCr & vbCr & _
                        "While exhaustive testing has been performed to ensure that each process is performed reliably " & _
                        "and without risk to the document structure or data, the developers makes no representations " & _
                        "or warranties of any kind, express or implied, about the completeness, accuracy, reliability, " & _
                        "suitability or availability with respect to the add-in or any of the processes that it is intended to perform. " & _
                        "Any reliance you place on the add-in or individual processes is therefore strictly at your own risk." & vbCr & vbCr & _
                        "In no event will the developers be liable for any loss or damage including without limitation, indirect " & _
                        "or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits " & _
                        "arising out of, or in connection with, the use of this add-in." & vbCr & vbCr & _
                        "Through the GM Logo links you are directed to support and help information from which " & _
                        "you are able to link to other websites which are not under the developer's control. " & _
                        "The developers have no control over the nature, content and availability of those sites. " & _
                        "The inclusion of any links does not necessarily imply a recommendation or endorsement of the views " & _
                        "expressed within them." & vbCr & vbCr & _
                        "The developers are committed to reasonable effort to address user comments, " & _
                        "suggestions for improvement and technical assistance associated with the add-in. " & _
                        "However, the developers are not bound in any way to address those comments, suggestions for improvement, " & _
                        "or provide technical assistance."

    Else
        strDisclaimer = "The processes and features in the " & AppID & " add-in Version " & AppVer & _
                        " were developed and provided by Graham Mayor as a courtesy to the Microsoft Word user community." & vbCr & vbCr & _
                        "While exhaustive testing has been performed to ensure that each process is performed reliably " & _
                        "and without risk to the document structure or data, the developer makes no representations " & _
                        "or warranties of any kind, express or implied, about the completeness, accuracy, reliability, " & _
                        "suitability or availability with respect to the add-in or any of the processes that it is intended to perform. " & _
                        "Any reliance you place on the add-in or individual processes is therefore strictly at your own risk." & vbCr & vbCr & _
                        "In no event will the developer be liable for any loss or damage including without limitation, indirect " & _
                        "or consequential loss or damage, or any loss or damage whatsoever arising from loss of data or profits " & _
                        "arising out of, or in connection with, the use of this add-in." & vbCr & vbCr & _
                        "Through the GM Logo links you are directed to support and help information from which " & _
                        "you are able to link to other websites which are not under the developer's control. " & _
                        "The developer has no control over the nature, content and availability of those sites. " & _
                        "The inclusion of any links does not necessarily imply a recommendation or endorsement of the views " & _
                        "expressed within them." & vbCr & vbCr & _
                        "The developer is committed to reasonable effort to address user comments, " & _
                        "suggestions for improvement and technical assistance associated with the add-in.  " & _
                        "However, the developer is not bound in any way to address those comments, suggestions for improvement, " & _
                        "or provide technical assistance."
    End If
lbl_Exit:
    Exit Function
End Function

Function AppID() As String
    AppID = "Extract Data from Forms"
lbl_Exit:
    Exit Function
End Function

Function WordVer() As Long
    WordVer = Val(Application.Version)
lbl_Exit:
    Exit Function
End Function

Function strFFInfo() As String
    strFFInfo = "Use this tool to cycle through and bookmark each form field in the active document with a unique name. " & _
                "Bookmarks applied to document form fields provide a robust means to ensure the form field name is unique " & _
                "and in most cases is compatible with database field name conventions. " & vbCr & vbCr & _
                "For best results using the extractor utility, all form fields should be bookmarked. " & _
                "Check 'Validate Reserved Keywords' (recommended) to ensure you do not set a bookmark name " & _
                "that conflicts with an Access Reserved Keyword."
lbl_Exit:
    Exit Function
End Function

Function strCCInfo() As String
    strCCInfo = "Use this tool to cycle through and assign unique titles to each content control " & _
                "and apply an optional tag, which could be a common tag identifying the content controls that constitute form data fields. " & _
                "You can skip applying the common tag to any content control that functions as a label." & vbCr & vbCr & _
                "For best results using the data extraction utility, all content controls should have a valid title. " & _
                "Check 'Validate Reserved Keywords/Prohibited Characters' (recommended) " & _
                "to ensure you do not set a title that that conflicts with a Microsoft Access Reserved Keyword or content control XML Mapping."
lbl_Exit:
    Exit Function
End Function

Function strEditors() As String
strEditors = "A form requires the user to input information in the spaces provided, " _
               & "and not be able to alter other content or the form layout." & vbCr + vbCr _
               & "There are a number of ways that you can achieve this with content control forms." & vbCr & vbCr _
               & " - Continue using the protection method 'filling in forms.'" & vbCr _
               & " - Use group content controls." & vbCr _
               & " - Use a grouping rich text content control." & vbCr _
               & " - Use 'Restrict Editing (No Changes - Read Only) with exceptions (recommended)'." & vbCr & vbCr _
               & "The recommended method requires the content controls used for form data fields to be flagged " _
               & "as editable regions, before applying the editing restrictions. Using 'Add global editors to content controls' performs " _
               & "this step automatically as the formfields are converted to content controls." & vbCr & vbCr _
               & "For additional information and examples using each of these methods, follow the web link " _
               & "to the developer's 'Create Forms with Content Controls' at:"
End Function


Attribute VB_Name = "Scratch"
Option Explicit


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "clsProgressBar"
Attribute VB_Base = "0{51AD9973-C900-4CFF-98E7-2EE04E209945}{CB200318-EE9E-4A34-833B-67791FCCCC7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
'Module Name: clsProgressBar
'Module Type: UserForm Class
'Source: Adapated and expanded for Word by Gregory K. Maxey http://gregmaxey.com/word_tips.html, 2/9/2018
'from a similar class developed for Excel by Ejaz Ahmed, http://strugglingtoexcel.wordpress.com/

#If Win64 Then
Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" ( _
        ByVal lpClassName As String, _
        ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" ( _
        ByVal hwnd As LongPtr, _
        ByVal nIndex As Long) As Long

Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" ( _
        ByVal hwnd As LongPtr, _
        ByVal nIndex As Long, _
        ByVal dwNewLong As Long) As Long

Private Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hwd As LongPtr) As Long
Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" ( _
                                    ByVal lpClassName As String, _
                                    ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" ( _
                                       ByVal hwnd As Long, _
                                       ByVal nIndex As Long) As Long

Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" ( _
                                       ByVal hwnd As Long, _
                                       ByVal nIndex As Long, _
                                       ByVal dwNewLong As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long
Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If


Private m_strFormTitle As String    'Defines the userform caption
Private m_bAppStatusBar As Boolean    'Set True to use the application status bar in lieu of this class's form ojbect to show progress
Private m_lngTotalActions As Long    'Defines range (or number of of progress actions)
Private m_lngActionIndex As Long    'Defines the index 0 base of the current action
Private m_lngActionCounter As Long    'Defines the actual number count of the current action
Private m_strProgMsg As String    'Defines text displayed in form object status textbox
Private m_dblBarWidth As Double    'Initial width of the Progressbar control
Private m_strPercentComplete As String    'Defines text displayed in in form object perecent complete textbox
Private m_bFormShowing As Boolean    'Status of class form object
Private m_bTotalActionsSet As Boolean
Private m_bShowTitleBar As Boolean
'Color variables
Private m_lngBackColor As Long    'Class form object backcolor
Private m_lngFontColor As Long    'Class form object textbox controls forecolor
Private m_lngInitialColor As Long    'Class form object incrementing ProgressBar control initial backcolor
Private m_lngFinalColor As Long    'Class form object incrementing ProgressBar control final backcolor and ProgressBox border color
Private m_bChangeColors As Boolean    'Deterines if incrementing progress bar colors are used.
Private cInitialRed As Long, m_lngFinalRed As Long    'Red component of of initial and final incrementing color
Private cInitialGreen As Long, m_lngFinalGreen As Long    'Green component of of initial and final incrementing color
Private cInitialBlue As Long, m_lngFinalBlue As Long    'Blue component of of initial and final incrementing color

'Events
Private Sub UserForm_Initialize()
'Set variable default values.
    ShowTitleBar = "False"
    m_lngBackColor = &HE6FFFF   '13352870
    m_lngActionIndex = 0
    m_lngTotalActions = 0
    m_strProgMsg = "Processing ..."
    m_strFormTitle = "Progress Bar"
    m_bAppStatusBar = False
    m_bFormShowing = False
    m_bTotalActionsSet = False
    m_strPercentComplete = "0% Completed"
    'Use the property Let procedures to set initial and final incrementing color variables.
    InitialColor = &HE4F3E4    '10653569
    FinalColor = &HFF00&    '4073000
    m_lngFontColor = 6291584
    TITLE = m_strFormTitle
    With StatusMessageBox
        .Caption = " " & m_strProgMsg
        .ForeColor = m_lngFontColor
    End With
    With PercentIndicator
        .Caption = m_strPercentComplete
        .ForeColor = m_lngFontColor
    End With
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Terminate()
    Application.StatusBar = vbNullString
    Application.ScreenUpdating = True
lbl_Exit:
    Exit Sub
End Sub

'Properties
Property Let TITLE(value As String)
    If Not value = vbNullString Then
        m_strFormTitle = value
        If Not Me Is Nothing Then
            DoEvents
            Caption = m_strFormTitle
        End If
    End If
End Property

Property Get TITLE() As String
    TITLE = m_strFormTitle
End Property

Property Get ShowTitleBar() As Boolean
    ShowTitleBar = m_bShowTitleBar
End Property

Property Let ShowTitleBar(value As Boolean)
    m_bShowTitleBar = value
End Property

Property Let ApplicationStatusBar(value As Boolean)
'Uses the application status bar to show progress in lieu of the this class's form object.
    If m_bFormShowing Then
        Err.Raise 1, m_strFormTitle, "Must be set prior to running the class Show method."
    Else
        m_bAppStatusBar = value
        If value Then Application.DisplayStatusBar = True
    End If
End Property

Property Get ApplicationStatusBar() As Boolean
    ApplicationStatusBar = m_bAppStatusBar
End Property

Property Let TotalActions(value As Long)
    If m_bTotalActionsSet Then
        Err.Raise 4, m_strFormTitle, "The TotalActions cannot be changed after it has been set."
    Else
        m_lngTotalActions = value
        m_bTotalActionsSet = True
    End If
End Property

Property Get TotalActions() As Long
    TotalActions = m_lngTotalActions
End Property

Property Let ActionIndex(value As Long)
    m_lngActionIndex = value
    UpdateDialog
End Property

Property Get ActionIndex() As Long
    ActionIndex = m_lngActionIndex
End Property

Property Get ActionCounter() As Long
    ActionCounter = m_lngActionIndex + 1
End Property

Property Let InitialColor(value As Long)
    If m_bFormShowing Then
        Err.Raise 1, m_strFormTitle, "InitialColor must be set prior to showing the form."
    Else
        m_lngInitialColor = value
        cInitialRed = GetPrimaryColor(m_lngInitialColor, "R")
        cInitialGreen = GetPrimaryColor(m_lngInitialColor, "G")
        cInitialBlue = GetPrimaryColor(m_lngInitialColor, "B")
    End If
End Property

Property Let FinalColor(value As Long)
    If m_bFormShowing Then
        Err.Raise 1, m_strFormTitle, "FinalColor must be set prior to showing the form."
    Else
        m_lngFinalColor = value
        m_lngFinalRed = GetPrimaryColor(m_lngFinalColor, "R")
        m_lngFinalGreen = GetPrimaryColor(m_lngFinalColor, "G")
        m_lngFinalBlue = GetPrimaryColor(m_lngFinalColor, "B")
        m_bChangeColors = Not CBool(m_lngInitialColor = m_lngFinalColor)
    End If
End Property

Property Let StatusMessage(value As String)
    m_strProgMsg = value
    UpdateDialog
End Property

Property Let ActionCounter(value As Long)
    m_lngActionCounter = value
End Property

Property Get StatusMessage() As String
    StatusMessage = m_strProgMsg
End Property

Property Let Background(value As Long)
    m_lngBackColor = value
End Property
Property Let FontColor(value As Long)
    m_lngFontColor = value
End Property

'Public Methods
Public Sub ShowBar()
    If m_bFormShowing Then
        Err.Raise 6, m_strFormTitle, "The Progress Bar has already been Loaded."
    Else
        DoEvents
        'Progress bar initial width
        m_dblBarWidth = ProgressBar.Width
        ProgressBar.Width = 0
        Caption = m_strFormTitle
        m_bFormShowing = True
        BackColor = m_lngBackColor
        ProgressBar.BackColor = m_lngInitialColor
        ProgressBox.BorderColor = m_lngInitialColor
        With PercentIndicator
            .ForeColor = m_lngFontColor
            .BackColor = m_lngBackColor
        End With
        With StatusMessageBox
            .ForeColor = m_lngFontColor
            .BackColor = m_lngBackColor
        End With
        If Not ShowTitleBar Then RemoveTitleBar
        Show
        Repaint
    End If
lbl_Exit:
    Exit Sub
End Sub

Public Sub StepBar(Optional ByVal ProgressMsg As String = vbNullString)
'Triggers display and progress update.
    m_lngActionIndex = m_lngActionIndex + 1
    If Not ProgressMsg = vbNullString Then
        m_strProgMsg = ProgressMsg
    End If
    UpdateDialog
lbl_Exit:
    Exit Sub
End Sub

Public Sub Complete(Optional ByVal Pause As Long = 0, _
                    Optional ByVal Prompt As String = "Processing Complete")
'Provides notification that process is complete and realease application statusbar.
Dim lngCounter As Long
    'Display an error message if the CurrentAction numeber is lesser than the number of TotalActions.
    If m_lngActionIndex < m_lngTotalActions Then
        Err.Raise 5, m_strFormTitle, "Premature call.  Run the Complete Method only after all the actions have been completed."
    Else
        'Release control over Application's status bar
        If m_bAppStatusBar Then Application.StatusBar = vbNullString
        If Pause > 0 Then
            For lngCounter = Pause To 1 Step -1
                DoEvents
                StatusMessageBox.Caption = " " & Prompt & _
                                           ". This dialog will auto-close in " & lngCounter & " " & IIf(lngCounter = 1, "second.", "seconds.")
                DoEvents
                Sleep 1000
            Next lngCounter
            Terminate
        Else
            DoEvents
            'Update the Status Message
            StatusMessageBox.Caption = Prompt
        End If
    End If
lbl_Exit:
    Exit Sub
End Sub

Public Sub Terminate()
    If m_bFormShowing Then
        Hide
        m_bFormShowing = False
        m_bTotalActionsSet = False
        m_lngActionIndex = 0
        m_lngTotalActions = 0
    End If
    'Return the Appliation StatusBar control to Application
    If m_bAppStatusBar Then Application.StatusBar = vbNullString
lbl_Exit:
    Exit Sub
End Sub

Private Sub UpdateDialog()
    If m_bTotalActionsSet Then
        If m_lngActionIndex > m_lngTotalActions Then
            Err.Raise 3, m_strFormTitle, "Current action index is greater than the defined action count."
        Else
            UpdateProgress
        End If
    Else
        Err.Raise 2, m_strFormTitle, "The TotalActions property has not been set."
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub UpdateProgress()
Dim dblPercentComplete As Double
Dim dblBarWidth As Double

    dblPercentComplete = m_lngActionIndex / m_lngTotalActions
    dblBarWidth = m_dblBarWidth * dblPercentComplete
    m_strPercentComplete = Format(dblPercentComplete * 100, "0") & "% Completed"
    DoEvents
    ProgressBar.Width = dblBarWidth
    'Update the Percent Indicator
    PercentIndicator.Caption = m_strPercentComplete
    'Change the Color of the Progressbar if needed
    If m_bChangeColors Then
        ProgressBar.BackColor = RGB(cInitialRed + (m_lngFinalRed - cInitialRed) * dblPercentComplete, _
                                    cInitialGreen + (m_lngFinalGreen - cInitialGreen) * dblPercentComplete, _
                                    cInitialBlue + (m_lngFinalBlue - cInitialBlue) * dblPercentComplete)
    End If
    'Set the Status Bar Message
    StatusMessageBox.Caption = " " & m_strProgMsg
    'Update th application's status bar if applicable.
    If m_bAppStatusBar Then
        Application.StatusBar = fcnDevelopStatusBar(m_lngActionIndex, m_lngTotalActions) & _
                                " | " & m_strPercentComplete & " | " & m_strProgMsg
    End If
    'Repaint the form.
    Repaint
lbl_Exit:
    Exit Sub
End Sub

'Private Functions Needed by the form class
Private Function GetPrimaryColor(ByVal lngColor As Long, ByVal RGB As String) As Long
Dim strHex As String
    strHex = CStr(Hex(lngColor))
    'Prefix 0's so the string is always 8 Characters in length
    strHex = String(8 - Len(strHex), "0") & strHex
    Select Case StrConv(RGB, vbUpperCase)
        Case "R": strHex = "&H" & Mid(strHex, 7, 2)
        Case "G": strHex = "&H" & Mid(strHex, 5, 2)
        Case "B": strHex = "&H" & Mid(strHex, 3, 2)
        Case Else: strHex = "-100"
    End Select
    'The R, G, or Blue color component of the color passed (0 to 225).
    GetPrimaryColor = CLng(strHex)
lbl_Exit:
    Exit Function
End Function

Function fcnDevelopStatusBar(ByVal ActionIndex As Long, ByVal TotalActions As Long, _
                             Optional ByVal BarLength As Long = 15)
'Generate unicode characters and text to display on the application status bar.
Dim lngProcessed As Long, lngToProcess As Long
Dim strBarChar As String, strSpaceChar As String
    strBarChar = ChrW(&H2589)
    strSpaceChar = ChrW(&H2000)
    BarLength = Round(BarLength / 2, 0) * 2
    lngProcessed = Fix((ActionIndex * BarLength) / TotalActions)
    lngToProcess = BarLength - lngProcessed
    fcnDevelopStatusBar = String(lngProcessed, strBarChar) & String(lngToProcess, strSpaceChar)
lbl_Exit:
    Exit Function
End Function

Sub RemoveTitleBar()
Dim lStyle As Long
Dim hMenu As Long
Dim mhWndForm As Long
    mhWndForm = FindWindow("ThunderDFrame", Caption)
    lStyle = GetWindowLong(mhWndForm, -16)
    lStyle = lStyle And Not &HC00000
    SetWindowLong mhWndForm, -16, lStyle
    DrawMenuBar mhWndForm
    Height = Height - 24 + (Height - InsideHeight)    'Reduce the height of the form by the height of the title bar
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "frmConvertFF"
Attribute VB_Base = "0{7418133F-FAB1-4259-B573-52910F04885F}{E591AD82-A807-433D-B6B0-76DCCF9145CA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
    chkGlobalEditor.value = False
End Sub

Private Sub btnCancel_Click()
    Tag = 0
    Me.Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub btnOK_Click()
    Tag = 1
    Me.Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckDisclaimer_Click()
    SaveSetting AppID, "Config", "Disclaimer", CheckDisclaimer.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image2_Click()
    RemoveCloseButton frmDonate
    frmDonate.Show
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image5_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub hlpEditors_Click()
Dim strFieldType As String
    With frmHelp
        .Caption = AppID & " - Version " & AppVer & " - Configuration Help - Add Global Editors to Content Controls"
        .lblHelp.Caption = strEditors
        .CB_Continue.Left = .lblHelp.Left
        .CB_Continue.Width = .lblHelp.Width
        If Val(Application.Version) > 14 Then
            .Height = 350
        Else
            .Height = 343
        End If
        .CB_Continue.Top = .Height - 60
        .lblHelp.Height = .Height - 118
        .lblLink.Visible = True
        .lblLink.Top = .CB_Continue.Top - 48
        .lblLink.Caption = "http://gregmaxey.mvps.org/word_tip_pages/content_control_fillin_form.html"
        RemoveTitleBar frmHelp
        PlayASound "Chimes"
        .Show
    End With
    Unload frmHelp
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "frmDisclaimer"
Attribute VB_Base = "0{8BD39F2E-9C8D-473D-9F58-3293640F59A3}{A066A3A4-4AE6-4AF5-AC4B-C1F8D021A43A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub chkDisclaimer_Click()
    SaveSetting AppID, "Config", "Disclaimer", chkDisclaimer.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdHideDisclaimer_Click()
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub ImageLogo_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Activate()
    If Application.Version > 14# Then Width = Width - 7
    lblDisclaimer.Caption = strDisclaimer
    RemoveTitleBar Me
    PlayASound "Notify"
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "frmDonate"
Attribute VB_Base = "0{7C54DD6A-919D-42FE-B106-6EC1379A7F87}{54A25627-1C9E-4868-8D4A-5FD8E5225F1B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCancel_Click()
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub btnDonatePound_Click()
    DonateGB
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub btnDonateEuro_Click()
    DonateEU
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub btnDonateDollar_Click()
    DonateUS
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Activate()
    PlayASound "Notify"
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "frmExtract"
Attribute VB_Base = "0{B5CF0A4B-8379-4E77-9514-E0ECD4155C39}{1AEDC18B-D5A6-4577-9A5A-4365B7232394}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private bExists As Boolean
Private SubFolderCount As Long
Private strAdded As String
Private strLegacy As String
Private strFileName As String
Private lng_Sheet As Long
Private strSheetName As String
Private strWB As String
Private strVer As String
Const strMessageBody As String = "The form (attached) that you have submitted is incomplete. Please complete the form fully and return it."


Private Sub btnCountFields_Click()
    If OptionLegacy.value = True Then
        If ActiveDocument.FormFields.Count = 0 Then
            ShowMessage 3
            GoTo lbl_Exit
        End If
        TextNumFields.Text = ActiveDocument.FormFields.Count
    Else
        If ActiveDocument.ContentControls.Count = 0 Then
            ShowMessage 4
            GoTo lbl_Exit
        End If
        TextNumFields.Text = ActiveDocument.ContentControls.Count
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckFolderWarning_Click()
    SaveSetting AppID, "Config", "Folder Warning", CheckFolderWarning.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckHTML_Click()
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckIncomplete_Click()
    SaveSetting AppID, "Config", "CheckIncomplete", CheckIncomplete.value
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckReturns_Click()
    SaveSetting AppID, "Config", "Returns", CheckReturns.value
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub CmbBrowseBatch_Click()
Dim fname As String
    fname = BrowseFolder(Caption:="Select folder containing the form documents to process.")

    If fname = vbNullString Then
        Exit Sub
    Else
        If Right(fname, 1) = Chr(92) Then
            TextBatchPath.Text = fname
        Else
            TextBatchPath.Text = fname & Chr(92)
        End If
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub CmdBrowse_Click()
Dim fname As String
    ShowMessage 19, True
    If frmMsg.Tag = 1 Then
        fname = BrowseFolder(Caption:="Select folder to store data file.")
        If fname = vbNullString Then
            GoTo err_Handler
        Else
            If Right(fname, 1) = Chr(92) Then
                TextPath.Text = fname
            Else
                TextPath.Text = fname & Chr(92)
            End If
        End If
        TextFname.Text = "FormData.xlsx"


    ElseIf frmMsg.Tag = 0 Then
        fname = BrowseForFile(Caption:="Select the workbook to store the data.")
        If fname = vbNullString Then
            GoTo err_Handler
        Else
            TextPath.Text = Left(fname, InStrRev(fname, Chr(92)))
            TextFname.Text = Right(fname, Len(fname) - InStrRev(fname, Chr(92)))
        End If
    End If
    If Mid(TextFname.Text, InStrRev(TextFname.Text, Chr(46)), 1) = Chr(46) Then
        If Not Right(TextFname.Text, 5) = ".xlsx" Then
            TextFname.Text = TextFname.Text & ".xlsx"
        End If
    End If
    SetupForm

lbl_Exit:
    Exit Sub
err_Handler:
    TextPath.Text = ""
    TextFname.Text = Left(TextFname.Text, InStrRev(TextFname.Text, Chr(46)) - 1)
    TextFname.Text = TextFname.Text & ".xlsx"
End Sub

Private Sub cmdCancel_Click()
    Tag = 0
    Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub CmdContinue_Click()
    Select Case MultiPage1.value
        Case 0
            If TextNumFields.value > 255 Then
                ShowMessage 44
                TextNumFields.SetFocus
                GoTo lbl_Exit
            End If

            If TextNumFields.Text = vbNullString Then
                ShowMessage 20
                TextNumFields.SetFocus
                GoTo lbl_Exit
            End If

            If Len(TextPath.Text) = 0 Then
                ShowMessage 8
                TextPath.SetFocus
                GoTo lbl_Exit
            End If

            If Left(TextFname.Text, 1) = "." Then
                ShowMessage 9
                TextFname.SetFocus
                GoTo lbl_Exit
            End If

            If Not Right(LCase(TextFname.Text), 4) = "xlsx" Then
                ShowMessage 9
                TextFname.SetFocus
                GoTo lbl_Exit
            End If

            If OptionBatch.value = True Then
                If Len(TextBatchPath.Text) = 0 Or _
                   InStr(1, TextBatchPath.Text, "\") = 0 Then
                    ShowMessage 10
                    TextBatchPath.SetFocus
                    GoTo lbl_Exit
                End If
            End If

            If TextNumFields.Text = "" Or _
               TextNumFields.value = 0 Then
                ShowMessage 1
                MultiPage1.value = 1
                TextNumFields.SetFocus
                GoTo lbl_Exit
            End If



            If OptionLegacy.value = True Then
                If WordVer > 14 Then
                    Select Case Val(Application.Version)
                        Case 15: strVer = "Word 2013"
                        Case 16: strVer = "Word 2016"
                        Case Else: strVer = "a Word version later than Word 2010"
                    End Select
                    ShowMessage 38, , strVer
                End If
            End If

            Tag = 1
            Hide
        Case 1
            SaveSetting AppID, "Config", "Signature", LstSignature.Text
            SaveSetting AppID, "Config", "Message Text", txtEmailMessage.Text
            MultiPage1.value = 0
    End Select
    SaveSetting AppID, "Config", "Data File", TextFname.Text
    SaveSetting AppID, "Config", "Data Path", TextPath.Text
    SaveSetting AppID, "Config", "Batch Path", TextBatchPath.Text
lbl_Exit:
    Exit Sub
End Sub

Private Sub ConfigHlp_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image1_Click()
    MyWeb
lbl_Exit:
    Exit Sub
End Sub

Private Sub ExcelHlp_Click()
    With frmHelp
        .Caption = AppID & " - Version " & AppVer & " - Configuration Help - Workbook Creation"
        .lblHelp.Caption = "The first time the add-in is run, if the default named workbook does not exist (as is likely to be the case) a new workbook is created and the add-in will write the data to a new worksheet of that workbook." & vbCr & vbCr & _
                           "You may change the default workbook name to a preferred workbook name, or enter the name and path of an existing workbook to accept the data." & vbCr & vbCr & _
                           "When creating a new workbook, the default worksheet name 'Form Data' will be shown in the worksheet text box and you may change that default name to a name of your choice." & vbCr & vbCr & _
                           "In order to accommodate field lengths in excess of 255 characters, a dummy row is created at the top of the worksheet and hidden from view. If your data is likely to contain more than 255 characters in a field, do not remove the hidden row." & vbCr & vbCr & _
                           "When opening an existing workbook, the name of the associated worksheet will be shown as the worksheet name. You may not however use this function to add a worksheet to an existing workbook nor change that existing worksheet name."

        .CB_Continue.Left = .lblHelp.Left
        .CB_Continue.Width = .lblHelp.Width
        If Val(Application.Version) > 14 Then
            .Height = 290
        Else
            .Height = 283
        End If
        .CB_Continue.Top = .Height - 60
        .lblHelp.Height = .Height - 118
        RemoveTitleBar frmHelp
        PlayASound "Chimes"
        .Show
    End With
    Unload frmHelp
lbl_Exit:
    Exit Sub
End Sub

Private Sub hlpFields_Click()
Dim strFieldType As String
    If OptionLegacy.value = True Then
        strFieldType = "form fields"
    Else
        strFieldType = "content controls"
    End If
    With frmHelp
        .Caption = AppID & " - Version " & AppVer & " - Configuration Help - Field Count"
        .lblHelp.Caption = "Enter the number of " & strFieldType & " in the documents to be processed." & vbCr & vbCr & _
                           "Where there are many " & strFieldType & " in the documents, you may find it convenient to open one of the documents to be " & _
                           "processed and click the button to 'Count the " & strFieldType & " in the active document'." & vbCr & vbCr & _
                           "The value is transferred to the dialog box and the number is immediately stored in the registry, thus you can close the document and cancel the userform, without " & _
                           "processing the document, and the value will be retained for when you next run the add-in to process the batch of documents."

        .CB_Continue.Left = .lblHelp.Left
        .CB_Continue.Width = .lblHelp.Width
        If Val(Application.Version) > 14 Then
            .Height = 250
        Else
            .Height = 243
        End If
        .CB_Continue.Top = .Height - 60
        .lblHelp.Height = .Height - 118
        RemoveTitleBar frmHelp
        PlayASound "Chimes"
        .Show
    End With
    Unload frmHelp
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image2_Click()
    RemoveCloseButton frmDonate
    frmDonate.Show
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image4_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub Label4_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image5_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub OptionAttachments_Click()
Dim oCheckDoc As Document
    For Each oCheckDoc In Application.Documents
        If Not oCheckDoc.ProtectionType = wdNoProtection Then
            OptionDocument.value = True
            ShowMessage 39
            Tag = 0
            Hide
            Exit For
        End If
    Next oCheckDoc
    If GetSetting(AppID, "Config", "Attachments") = False Then
        ModOutlook.CheckOutlookFolders GetSetting(AppID, "Config", "Folder Warning")
    End If
    SaveSetting AppID, "Config", "Attachments", OptionAttachments.value
    SaveSetting AppID, "Config", "Batch", OptionBatch.value
    SetupForm
lbl_Exit:
    Set oCheckDoc = Nothing
    Exit Sub
End Sub

Private Sub OptionBatch_Click()
Dim oCheckDoc As Document
    For Each oCheckDoc In Application.Documents
        If Not oCheckDoc.ProtectionType = wdNoProtection Then
            OptionDocument.value = True
            ShowMessage 39
            Tag = 0
            Hide
            Exit For
        End If
    Next oCheckDoc
    SaveSetting AppID, "Config", "Batch", OptionBatch.value
    SaveSetting AppID, "Config", "Attachments", OptionAttachments.value
    SetupForm
lbl_Exit:
    Set oCheckDoc = Nothing
    Exit Sub
End Sub

Private Sub OptionDocument_Click()
    SaveSetting AppID, "Config", "Attachments", OptionAttachments.value
    SaveSetting AppID, "Config", "Batch", OptionBatch.value
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub OptionCC_Click()
    SaveSetting AppID, "Config", "Legacy", OptionLegacy.value
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub OptionLegacy_Click()
    SaveSetting AppID, "Config", "Legacy", OptionLegacy.value
    SetupForm
End Sub

Private Sub TextFname_Change()
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Private Sub TextNumFields_Change()
    If TextNumFields.value > 255 Then
        PlayASound "Notify"
        SetupForm
        GoTo lbl_Exit
    End If
    SaveSetting AppID, "Config", "Field Count", TextNumFields
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
    Caption = AppID & " - Version " & AppVer

    If GetSetting(AppID, "Config", "Data File") = "" Then
        SaveSetting AppID, "Config", "Data File", "FormData.xlsx"
    End If

    If GetSetting(AppID, "Config", "Legacy") = "" Then
        SaveSetting AppID, "Config", "Legacy", True
    End If

    If GetSetting(AppID, "Config", "Attachments") = "" Then
        SaveSetting AppID, "Config", "Attachments", False
    End If

    If GetSetting(AppID, "Config", "Batch") = "" Then
        SaveSetting AppID, "Config", "Batch", False
    End If

    If GetSetting(AppID, "Config", "Folder Warning") = "" Then
        SaveSetting AppID, "Config", "Folder Warning", False
    End If

    If GetSetting(AppID, "Config", "Returns") = "" Then
        SaveSetting AppID, "Config", "Returns", True
    End If

    If GetSetting(AppID, "Config", "CheckIncomplete") = "" Then
        SaveSetting AppID, "Config", "CheckIncomplete", "False"
    End If

    CheckFolderWarning.value = GetSetting(AppID, "Config", "Folder Warning")
    CheckReturns.value = GetSetting(AppID, "Config", "Returns")
    CheckIncomplete.value = GetSetting(AppID, "Config", "CheckIncomplete")
    TextNumFields.value = GetSetting(AppID, "Config", "Field Count")
    TextBatchPath.Text = GetSetting(AppID, "Config", "Batch Path")
    TextFname.Text = GetSetting(AppID, "Config", "Data File")
    TextPath.Text = GetSetting(AppID, "Config", "Data Path")

    If GetSetting(AppID, "Config", "Legacy") = True Then
        OptionLegacy.value = True
        OptionCC.value = False
    Else
        OptionLegacy.value = False
        OptionCC.value = True
    End If
    SetupForm
    If OptionAttachments.value = True Then
        CheckOutlookFolders GetSetting(AppID, "Config", "Folder Warning")
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub CheckDisclaimer_Click()
    SaveSetting AppID, "Config", "Disclaimer", CheckDisclaimer.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
lbl_Exit:
    Exit Sub
End Sub

Private Sub MultiPage1_Change()
    SetupForm
lbl_Exit:
    Exit Sub
End Sub

Function SetupForm()
    If Val(Application.Version) > 14 Then
        Width = 468
    Else
        Width = 461
    End If
    Select Case MultiPage1.value
        Case 0
            btnCountFields.Enabled = True
            If OptionLegacy.value = True Then
                LabelNumFields.Caption = "Total number of Form Fields in each of the forms"
                OptionLegacy.Left = 12
                btnCountFields.Caption = "Count the form fields in the active document"
                If ActiveDocument.FormFields.Count = 0 Then btnCountFields.Enabled = False
            Else
                LabelNumFields.Caption = "Total number of Content Controls in each of the forms"
                btnCountFields.Caption = "Count the content controls in the active document"
                If ActiveDocument.ContentControls.Count = 0 Then btnCountFields.Enabled = False
            End If
            CmdContinue.Caption = "Extract Data"
            OptionAttachments.value = GetSetting(AppID, "Config", "Attachments")
            OptionBatch.value = GetSetting(AppID, "Config", "Batch")

            If OptionAttachments.value = False Then
                If OptionBatch.value = False Then
                    OptionDocument.value = True
                End If
            Else
                OptionDocument.value = False
                OptionBatch.value = False
                OptionAttachments.value = True
            End If

            CheckReturns.Visible = OptionAttachments.value

            If OptionBatch.value = True Then
                If Val(Application.Version) > 14 Then
                    Height = 511        '482
                Else
                    Height = 504        '474
                End If
                FrameBatchFolder.Visible = True
                CheckDisclaimer.Top = FrameExtract.Top + 132
            Else
                If Val(Application.Version) > 14 Then
                    Height = 453        '422
                Else
                    Height = 446        '414
                End If
                FrameBatchFolder.Visible = False
                CheckDisclaimer.Top = FrameExtract.Top + 74
            End If

            CmdContinue.Caption = "Extract Data"

            If TextNumFields.value > 255 Then
                'TextNumFields.Value = 0
                'CmdContinue.Enabled = False
                LabelExtract.Caption = "The form contains more than 255 fields." & vbCr & _
                                       "The process cannot currently handle more than 255 fields" & vbCr & _
                                       "Click 'Cancel' to quit."
                LabelExtract.ForeColor = &H40C0&    '&HFF
                GoTo skipLabel
            Else
                CmdContinue.Enabled = True
            End If


            If OptionAttachments.value = True Then
                FrameExtract.Caption = "Extract Data from e-mailed attachments"
                If OptionLegacy.value = True Then
                    LabelExtract.Caption = "This application requires a sub folder of the Outlook Inbox " & _
                                           "named " & Chr(34) & "Forms_In" & Chr(34) & ". If not present when this application is started, " & _
                                           "the folder will have been created and will contain three sub folders " & Chr(34) & _
                                           "Forms_Completed" & Chr(34) & ", " & Chr(34) & "Forms_Incomplete" & Chr(34) & Chr(32) & _
                                           Chr(34) & "Forms_Wrong" & Chr(34) & "."
                Else
                    LabelExtract.Caption = "This application requires a sub folder of the Outlook Inbox " & _
                                           "named " & Chr(34) & "Forms_In" & Chr(34) & ". If not present when this application is started, " & _
                                           "the folder will have been created and will contain three sub folders " & Chr(34) & _
                                           "Forms_Completed" & Chr(34) & ", " & Chr(34) & "Forms_Incomplete" & Chr(34) & Chr(32) & _
                                           Chr(34) & "Forms_Wrong" & Chr(34) & ". Picture and Building Block control values will not be recorded."
                End If
                If CheckIncomplete.value = True Then
                    CheckReturns.Visible = True
                Else
                    CheckReturns.Visible = False
                End If
            Else
                If OptionLegacy.value = True Then
                    If OptionDocument.value = True Then
                        FrameExtract.Caption = "Extract form field data from the active document"
                        LabelExtract.ForeColor = wdColorBlack
                        LabelExtract.Caption = "The data from the form fields in the active document will be extracted to the " & _
                                               "Data File configured in the panel above."
                    End If
                    If OptionBatch.value = True Then
                        FrameExtract.Caption = "Extract form field data from a batch of documents"
                        LabelExtract.ForeColor = wdColorBlack
                        LabelExtract.Caption = "The data from the form fields in all the documents in the selected folder will be extracted to the " & _
                                               "Data File configured in the panel above."
                    End If
                Else
                    If OptionDocument.value = True Then
                        FrameExtract.Caption = "Extract content control data from the active document"
                        LabelExtract.ForeColor = wdColorBlack
                        LabelExtract.Caption = "The values from the content controls in the active document will be extracted to the " & _
                                               "Data File configured in the panel above. Picture and Building Block control values will not be recorded."
                    End If
                    If OptionBatch.value = True Then
                        FrameExtract.Caption = "Extract content control data from a batch of documents"
                        LabelExtract.ForeColor = wdColorBlack
                        LabelExtract.Caption = "The values from the content controls in all the documents in the selected folder will be extracted to the " _
                                               & "Data File configured in the panel above. Picture and Building Block control values will not be recorded."
                    End If
                End If
            End If
skipLabel:
            strFileName = TextPath.Text & TextFname.Text
            If FileExists(strFileName) Then
                TextSheet.Text = GetSheet(strFileName)
            Else
                TextSheet.Text = "Form Data"
            End If
        Case 1
            frameMessage.Caption = "Plain text e-mail message"
            ListSignatures "txt"
            frameMessage.Height = 174

            If Val(Application.Version) > 14 Then
                Height = 401
            Else
                Height = 394
            End If
            CmdContinue.Caption = "Return to Main Configuration Page"
            If GetSetting(AppID, "Config", "Message Text") = "" Then
                SaveSetting AppID, "Config", "Message Text", strMessageBody
            End If
            txtEmailMessage = GetSetting(AppID, "Config", "Message Text")
    End Select
    If Val(Application.Version) > 14 Then
        MultiPage1.Height = Height - 78
        cmdCancel.Top = Height - 60
        CmdContinue.Top = Height - 60
        Image2.Top = Height - 60
    Else
        MultiPage1.Height = Height - 71
        cmdCancel.Top = Height - 53
        CmdContinue.Top = Height - 53
        Image2.Top = Height - 53
    End If
    If OptionAttachments.value = True And CheckReturns.value = True Then
        MultiPage1.Pages(1).Visible = True
    Else
        MultiPage1.Pages(1).Visible = False
    End If

    strWB = TextPath.Text
    If Not strWB = "" Then
        If Not Right(strWB, 1) = Chr(92) Then
            strWB = strWB & Chr(92)
        End If
    End If
    strWB = strWB & TextFname.Text
    If FileExists(strWB) Then
        TextSheet.Enabled = False
    Else
        TextSheet.Enabled = True
    End If

lbl_Exit:
    Exit Function
End Function


Function ListSignatures(ext As String)
Dim fso As New FileSystemObject
Dim strSigpath As String
Dim flSig As File
Dim li As Long
Dim strGetSig As String
Dim fldrSignatures As Folder

    strSigpath = "C:\Users\" & Environ("username") & _
                 "\AppData\Roaming\Microsoft\Signatures\"
    If Dir(strSigpath) = "" Then
        strSigpath = "C:\Documents and Settings\" & Environ("username") & _
                     "\Application Data\Microsoft\Signatures\"
    End If

    LstSignature.Clear
    LstSignature.AddItem "No Signature"
    If fso.FolderExists(strSigpath) Then
        Set fldrSignatures = fso.GetFolder(strSigpath)
        For Each flSig In fldrSignatures.Files
            If InStr(1, flSig.Name, "." & ext) <> 0 Then
                LstSignature.AddItem Left(flSig.Name, Len(flSig.Name) - 4)
            End If
        Next flSig
    End If
    Set fso = Nothing
    Set flSig = Nothing
    Set fldrSignatures = Nothing
    LstSignature.ListIndex = 0
    strGetSig = GetSetting(AppID, "Config", "Signature")
    For li = 0 To LstSignature.ListCount - 1
        If LstSignature.List(li) = strGetSig Then
            LstSignature.ListIndex = li
            Exit For
        End If
    Next li
lbl_Exit:
    Exit Function
End Function

Attribute VB_Name = "frmHelp"
Attribute VB_Base = "0{A4B94744-E8AA-4D6B-BFD9-CEF2CF434D2C}{15790F86-4245-466C-84FC-2BE883EFBD05}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CB_Continue_Click()
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdDonate_Click()
    Hide
    RemoveCloseButton frmDonate
    frmDonate.Show
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image1_Click()
    Hide
    RemoveCloseButton frmDonate
    frmDonate.Show
    Unload Me
lbl_Exit:
    Exit Sub
End Sub

Private Sub lblLink_Click()
    If lblLink.Visible Then
        MaxeyLink
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
    Caption = AppID & " - Version " & AppVer
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        ShowMessage 11
        Cancel = True
    End If
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "frmMsg"
Attribute VB_Base = "0{F434C623-9325-4A93-A2A8-647FD9EC3DBA}{59443389-2ED3-4888-8E65-28682C670187}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private Sub CB_ErrOK_Click()
    Tag = "1"
    Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub CBErrNo_Click()
    Tag = "0"
    Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub CBQuit_Click()
    Tag = "3"
    Hide
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{A144228A-4237-4299-B820-09C57C5E0FDC}{60859F20-4D18-400C-84C7-DB1DC6926BD2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
lbl_Exit:
    Exit Sub
End Sub
Attribute VB_Name = "frmReport"
Attribute VB_Base = "0{0A00774E-5EB6-4430-BE13-268B78439281}{00209814-45E8-476E-A25D-B6C7FE0CBFA0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CheckDisclaimer_Click()
    SaveSetting AppID, "Config", "Disclaimer", CheckDisclaimer.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image2_Click()
    RemoveCloseButton frmDonate
    frmDonate.Show
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image4_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub Image5_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
Dim strTemplate As String
    Caption = AppID & " - Version " & AppVer & _
                 " - Create Report"
    strTemplate = GetSetting(AppID, "Config", "Report Template")
    If strTemplate = "" Then strTemplate = Options.DefaultFilePath(wdUserTemplatesPath) & "\Normal.dotm"
    TextTemplate.Text = strTemplate
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdCancel_Click()
    Me.Hide
    Tag = 0
lbl_Exit:
    Exit Sub
End Sub

Private Sub CmdContinue_Click()
    SaveSetting AppID, "Config", "Report Template", TextTemplate.Text
    Me.Hide
    Tag = 1
lbl_Exit:
    Exit Sub
End Sub

Private Sub CmdTemplateBrowse_Click()
Dim fDialog As FileDialog
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    On Error GoTo CleanUp:
    With fDialog        'Pick the form to process
        .TITLE = "Select the template to create the report document and click OK"
        .AllowMultiSelect = False
        .InitialFileName = Options.DefaultFilePath(wdUserTemplatesPath)
        .Filters.Add "Word Template", "*.dot; *.dotx; *.dotm", 1
        .InitialView = msoFileDialogViewList
        If .Show <> -1 Then
            ' Showmessage  15
            Set fDialog = Nothing
            Exit Sub
        End If
        TextTemplate.Text = fDialog.SelectedItems.Item(1)
    End With
CleanUp:
    Set fDialog = Nothing
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then Cancel = True
lbl_Exit:
    Exit Sub
End Sub

Attribute VB_Name = "frmTagControls"
Attribute VB_Base = "0{061ED173-E7A9-44E6-A54A-9467D149A812}{83C74B5E-BD09-4A75-8328-158BFF238BD6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_colBookmarks As Collection, _
        m_colCCs As Collection, _
        m_colCCTitlesChk As Collection, _
        m_colTitlesValidated As Collection
Private m_oCC As ContentControl, _
        m_oFF As FormField
Private m_lngIndex As Long
Private m_oRng As Word.Range
Private m_lngCounter As Long
Private m_lngView As Long
Private m_strCurrentNameTitle As String
Private m_lngCCCount As Long
Private m_strCommonDataFieldTag As String
Private m_bUseForPassword As Boolean
Private m_bUtilityUnprotected As Boolean    'GKM
Private m_bInitialized As Boolean    'GKM

Private Sub CheckDisclaimer_Click()
    SaveSetting AppID, "Config", "Disclaimer", CheckDisclaimer.value
lbl_Exit:
    Exit Sub
End Sub

Private Sub chkMatchPlace_Click()
    If chkMatchPlace.value = True Then
        txtPlaceHolder = txtControl_NameTitle
    Else
        txtPlaceHolder = m_oCC.PlaceholderText
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub chkMatchTag_Click()
    If chkMatchTag.value = True Then
        txtCC_Tag = txtControl_NameTitle
    Else
        txtCC_Tag = m_oCC.Tag
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub chkNoDups_Click()
    optCCs_Change
    txtControl_NameTitle_Change
lbl_Exit:
    Exit Sub
End Sub

Private Sub ImageDonate_Click()
    frmDonate.Show
lbl_Exit:
    Exit Sub
End Sub

Private Sub ImageGMLogo_Click()
    Info
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
Dim m_colCCs As Collection
Dim lngCount As Long
Dim lngIndex As Long

    m_bUtilityUnprotected = False
    chkReservedWord = True
    chkNoDups = True
    m_strCommonDataFieldTag = GetSetting(AppID, "Config", "Form Data Field Tag")
    m_lngCCCount = fcnGetCCCollection(ActiveDocument).Count

    If m_lngCCCount = 0 And ActiveDocument.FormFields.Count = 0 Then
        ShowMessage 26
        cmdCancel_Click
    End If
    m_bUseForPassword = False
    m_bInitialized = True
    Select Case True
        Case m_lngCCCount > 0: optCCs = True
        Case ActiveDocument.FormFields.Count > 0: optFFs = True
    End Select
lbl_Exit:
    Exit Sub
End Sub

Private Sub optCCs_Change()
Dim lngCount As Long, lngIndex As Long
    Set m_colTitlesValidated = New Collection
    If chkReservedWord Then
        cmdAuto.Enabled = False
    Else
        cmdAuto.Enabled = True
    End If
    If optCCs.value = True Then
        If m_lngCCCount = 0 Then
            ShowMessage 4
            optFFs = True
            optFFs.SetFocus
            GoTo lbl_Exit
        End If
        chkNoDups.Visible = True
        cmdClearTag.Visible = True
        chkReservedWord.Caption = "Validate Reserved Keywords/Prohibited Characters"
        Caption = AppID & " Version " & AppVer & " - Name and Tag Content Controls"
        RemoveCloseButton Me

        With lbl_CommonTag
            .Caption = m_strCommonDataFieldTag
            .Visible = True
        End With

        lbl_Info.Caption = strCCInfo

        If Val(Application.Version) > 14 Then
            Height = 380
            Width = 442
        Else
            Height = 373
            Width = 435
        End If

        lblTag.Visible = True
        cmd_SetAsDefault.Visible = True
        txtCC_Tag.Visible = True

        With cmdOKSetNext
            .Caption = "Set title and tag >>"
            .Width = 156
            .Left = 168
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 88
            Else
                .Top = Me.Height - 81
            End If
        End With
        With cmdOKSetPrev
            .Caption = "<< Set title and tag"
            .Width = 156
            .Left = 11.4
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 88
            Else
                .Top = Me.Height - 81
            End If
        End With

        With cmdOvrdPrev
            .Visible = True
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 64
            Else
                .Top = Me.Height - 57
            End If
            .Width = 156
            .Left = 11.4
        End With

        With cmdOvrdNext
            .Visible = True
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 64
            Else
                .Top = Me.Height - 57
            End If
            .Width = 156
            .Left = 168
        End With

        With cmdAuto
            .Visible = True
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 88
            Else
                .Top = Me.Height - 81
            End If
            .Width = 96.8
            .Left = 324
        End With

        With cmdCancel
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 64
            Else
                .Top = Me.Height - 57
            End If
            .Width = 96.8
            .Left = 324
        End With

        'Get collection of CCs currently in the documment.
        Set m_colCCs = fcnGetCCCollection(ActiveDocument)
        Set m_colCCTitlesChk = New Collection
        Set m_oCC = m_colCCs.Item(1)
        If m_oCC.TITLE <> vbNullString Then
            m_strCurrentNameTitle = m_oCC.TITLE
            txtControl_NameTitle.Text = m_strCurrentNameTitle
        Else
            m_strCurrentNameTitle = "**NOT DEFINED**"
            txtControl_NameTitle_Change
        End If
        txtCC_Tag = m_oCC.Tag
        Set m_oRng = m_oCC.Range
        m_oRng.Start = m_oRng.Start - 1
        m_oRng.End = m_oRng.End + 1
        'When shifting from main text to header, view wants to change visible indication that selection was made is sporadic.
        m_lngView = ActiveDocument.ActiveWindow.View
        m_oRng.Select
        ActiveDocument.ActiveWindow.View = m_lngView
        m_oRng.Select
    Else
        If ActiveDocument.FormFields.Count = 0 Then
            ShowMessage 3
            optCCs = True
            optCCs.SetFocus
            GoTo lbl_Exit
        End If
        Caption = AppID & " Version " & AppVer & " - Bookmark Document Form Fields"
        RemoveCloseButton Me
        lblPlaceholder.Visible = False
        txtPlaceHolder.Visible = False
        lbl_lblCommonTag.Visible = False
        lbl_CommonTag.Visible = False
        chkNoDups.Visible = False
        chkMatchPlace.Visible = False
        chkMatchTag.Visible = False
        cmdClearTag.Visible = False
        chkReservedWord.Caption = "Validate Reserved Keywords"
        lbl_Info.Caption = strFFInfo
        lblTag.Visible = False
        cmd_SetAsDefault.Visible = False
        txtCC_Tag.Visible = False
        cmdOvrdNext.Visible = False
        cmdOvrdPrev.Visible = False

        If Val(Application.Version) > 14 Then
            Height = 352 - 20
            Width = 442
        Else
            Height = 352 - 27
            Width = 435
        End If

        With cmdOKSetNext
            .Caption = "Set Bookmark >>"
            .Width = 204
            .Left = 217.4
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 88
            Else
                .Top = Me.Height - 81
            End If
        End With

        With cmdOKSetPrev
            .Caption = "<< Set Bookmark"
            .Width = 204
            .Left = 11.4
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 88
            Else
                .Top = Me.Height - 81
            End If
        End With
        With cmdAuto
            .Visible = False
        End With
        With cmdCancel
            .Width = 410
            .Left = 11.4
            If Val(Application.Version) > 14 Then
                .Top = Me.Height - 64
            Else
                .Top = Me.Height - 57
            End If
        End With
        If Not m_bUseForPassword Then
            cmdOKSetNext.Enabled = True
            cmdOKSetPrev.Enabled = True
            chkReservedWord.Enabled = True
            'Get collection of bookmarks currently in the documment.
            Set m_colBookmarks = fcnGetBMNames
            Set m_oFF = ActiveDocument.FormFields(1)
            m_strCurrentNameTitle = "**NOT DEFINED**"
            If m_oFF.Range.Bookmarks.Count > 0 Then
                m_strCurrentNameTitle = m_oFF.Range.Bookmarks(1).Name
                txtControl_NameTitle.Text = m_strCurrentNameTitle
            Else
                If txtControl_NameTitle.Text <> vbNullString Then
                    txtControl_NameTitle.Text = vbNullString
                Else
                    txtControl_NameTitle_Change
                End If
                txtControl_NameTitle_Change
            End If
            m_oFF.Range.Select
        Else
            cmdOKSetNext.Enabled = False
            cmdOKSetPrev.Enabled = False
            cmdOKSetPrev.Enabled = True
            chkReservedWord.Enabled = False
            lbl_Title = "Password:"
        End If
    End If
    Application.ScreenRefresh
    m_lngCounter = 1
lbl_Exit:
    Exit Sub
End Sub

Private Sub optFFs_Change()
    If optFFs = True Then
        If ActiveDocument.ProtectionType = wdAllowOnlyFormFields Then
            On Error Resume Next
            ActiveDocument.Unprotect
            If Err.Number <> 0 Then
                txtControl_NameTitle.PasswordChar = "*"
                lbl_Notification.Caption = "The document is password protected." & vbCr _
                                           & "Enter the password to continue processing."
                m_bUseForPassword = True
            End If
            m_bUtilityUnprotected = True
            optCCs_Change
            Exit Sub
        Else
            txtControl_NameTitle.PasswordChar = ""
        End If
        optCCs_Change
    Else
        m_bUseForPassword = False
    End If
lbl_Exit:
    Exit Sub
End Sub


Private Sub chkReservedWord_Click()
    optCCs_Change
lbl_Exit:
    Exit Sub
End Sub

Private Sub chkDup_Click()
    optCCs_Change
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdAuto_Click()
    If optCCs.value = True Then
        ShowMessage 29, True
        If frmMsg.Tag = 1 Then
            AutoTitleDocCCs
            ShowMessage 33, False, "content controls"
        Else
            GoTo lbl_Exit
        End If
    Else
        ShowMessage 29, True
        If frmMsg.Tag = 1 Then
            AutoBookmarkDocFormFields
            ShowMessage 33, False, "form fields"
        Else
            GoTo lbl_Exit
        End If
    End If
    Tag = 0
    Me.Hide
lbl_Exit:
    Unload frmMsg
    Exit Sub
End Sub

Private Sub cmdClearTag_Click()
    txtCC_Tag = vbNullString
    SaveSetting AppID, "Config", "Form Data Field Tag", "Form Data Field"
    lbl_CommonTag = "Form Data Field"
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmd_SetAsDefault_Click()
    SaveSetting AppID, "Config", "Form Data Field Tag", txtCC_Tag
    m_strCommonDataFieldTag = txtCC_Tag
    lbl_CommonTag = txtCC_Tag
    lbl_lblCommonTag.Visible = True
lbl_Exit:
    Exit Sub
End Sub


Private Sub cmdCancel_Click()
Dim strPassword As String
    strPassword = GetSetting(AppID, "Config", "Legacy Password")
    'Debug.Print m_bUseForPassword & vbTab & vbTab & m_bUtilityUnprotected & vbCr & strPassword
    If ActiveDocument.FormFields.Count > 0 Then
        If m_bUtilityUnprotected Then    'GKM reprotect only if we unprotected.
            If Not ActiveDocument.ProtectionType = wdAllowOnlyFormFields Then
                ActiveDocument.Protect Type:=wdAllowOnlyFormFields, NoReset:=True, Password:=strPassword
            End If
        End If
    End If
    SaveSetting AppID, "Config", "Legacy Password", ""
    Me.Hide
    Tag = 0
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdOKSetNext_Click()
Dim lngIndex As Long
Dim oBM As Bookmark
    If txtCC_Tag = "" And Not txtControl_NameTitle = "" Then
        txtCC_Tag = txtControl_NameTitle
    End If
    If optCCs Then
        m_oCC.TITLE = txtControl_NameTitle
        If chkNoDups Then    'GKM
            m_colCCTitlesChk.Add m_oCC.TITLE, m_oCC.TITLE
            m_colTitlesValidated.Add m_oCC.TITLE, m_oCC.ID
        End If
               
        m_oCC.Tag = txtCC_Tag
        m_oCC.SetPlaceholderText , , txtPlaceHolder
        
        If m_lngCounter = m_colCCs.Count Then
            ShowMessage 34, True, "content control"
            If frmMsg.Tag = 0 Then
                Me.Hide
                Tag = 0
                GoTo lbl_Exit
            End If
        End If

        If m_lngCounter = m_colCCs.Count Then
            m_lngCounter = 1
        Else
            m_lngCounter = m_lngCounter + 1
        End If
        Set m_oCC = m_colCCs(m_lngCounter)
        If m_oCC.TITLE <> vbNullString Then
            m_strCurrentNameTitle = m_oCC.TITLE
            If m_strCurrentNameTitle = txtControl_NameTitle.Text Then
                txtControl_NameTitle_Change
            Else
                txtControl_NameTitle.Text = m_strCurrentNameTitle
            End If
        Else
            m_strCurrentNameTitle = "**NOT DEFINED**"
            txtControl_NameTitle = vbNullString
        End If
        'txtCC_Tag = m_oCC.Tag
        'If chkMatchTag.Value = True Then
        '    txtCC_Tag = m_oCC.Title
        'Else
        '    txtCC_Tag = m_oCC.Tag
        'End If
        
        Set m_oRng = m_oCC.Range
        m_oRng.Start = m_oRng.Start - 1
        m_oRng.End = m_oRng.End + 1
        m_lngView = ActiveDocument.ActiveWindow.View
        m_oRng.Select
        ActiveDocument.ActiveWindow.View = m_lngView
        m_oRng.Select
        Application.ScreenRefresh
    Else
        For lngIndex = m_oFF.Range.Bookmarks.Count To 1 Step -1
            Set oBM = m_oFF.Range.Bookmarks(lngIndex)
            m_colBookmarks.Remove oBM.Name
            oBM.Delete
        Next

        With Dialogs(wdDialogFormFieldOptions)
            .Name = txtControl_NameTitle
            .Execute
        End With
        m_colBookmarks.Add txtControl_NameTitle, txtControl_NameTitle
        If m_lngCounter = ActiveDocument.FormFields.Count Then
            ShowMessage 34, True, "form field"
            If frmMsg.Tag = 0 Then
                Me.Hide
                Tag = 0
                GoTo lbl_Exit
            End If
        End If
        If m_lngCounter = ActiveDocument.FormFields.Count Then
            m_lngCounter = 1
        Else
            m_lngCounter = m_lngCounter + 1
        End If
        Set m_oFF = ActiveDocument.FormFields(m_lngCounter)
        m_strCurrentNameTitle = "**NOT DEFINED**"
        If m_oFF.Range.Bookmarks.Count > 0 Then
            m_strCurrentNameTitle = m_oFF.Range.Bookmarks(1).Name
            txtControl_NameTitle.Text = m_strCurrentNameTitle
        Else
            If txtControl_NameTitle.Text <> vbNullString Then
                txtControl_NameTitle.Text = vbNullString
            Else
                txtControl_NameTitle_Change
            End If
        End If
        m_oFF.Range.Select
        Application.ScreenRefresh
    End If
    txtControl_NameTitle.SetFocus
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdOvrdNext_Click()
    m_oCC.TITLE = txtControl_NameTitle
    If chkNoDups Then    'GKM
        m_colCCTitlesChk.Add m_oCC.TITLE, m_oCC.TITLE
        m_colTitlesValidated.Add m_oCC.TITLE, m_oCC.ID
    End If
    m_oCC.Tag = m_strCommonDataFieldTag
    txtCC_Tag = m_strCommonDataFieldTag
    If m_lngCounter = m_colCCs.Count Then
        ShowMessage 34, True, "content control"
        If frmMsg.Tag = 0 Then
            Me.Hide
            Tag = 0
            GoTo lbl_Exit
        End If
    End If
    If m_lngCounter = m_colCCs.Count Then
        m_lngCounter = 1
    Else
        m_lngCounter = m_lngCounter + 1
    End If
    Set m_oCC = m_colCCs(m_lngCounter)
    If m_oCC.TITLE <> vbNullString Then
        m_strCurrentNameTitle = m_oCC.TITLE
        If m_strCurrentNameTitle = txtControl_NameTitle.Text Then
            txtControl_NameTitle_Change
        Else
            txtControl_NameTitle.Text = m_strCurrentNameTitle
        End If
    Else
        m_strCurrentNameTitle = "**NOT DEFINED**"
        txtControl_NameTitle = vbNullString
    End If
    txtCC_Tag = m_oCC.Tag
    Set m_oRng = m_oCC.Range
    m_oRng.Start = m_oRng.Start - 1
    m_oRng.End = m_oRng.End + 1
    m_lngView = ActiveDocument.ActiveWindow.View
    m_oRng.Select
    Application.ScreenRefresh
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdOKSetPrev_Click()
Dim lngIndex As Long
Dim oBM As Bookmark
    If txtCC_Tag = "" And Not txtControl_NameTitle = "" Then
        txtCC_Tag = txtControl_NameTitle
    End If
    If optCCs Then
        m_oCC.TITLE = txtControl_NameTitle
        If Not txtControl_NameTitle = "" Then    'GM
            If chkNoDups Then    'GKM
                m_colCCTitlesChk.Add m_oCC.TITLE, m_oCC.TITLE
                m_colTitlesValidated.Add m_oCC.TITLE, m_oCC.ID
            End If
        Else    'GM
            ShowMessage 43, , "following 'Current Title:' field."    'GM
        End If    'GM
        m_oCC.Tag = txtCC_Tag
        m_oCC.SetPlaceholderText , , txtPlaceHolder
        'If m_lngCounter = 1 Then
        '    ShowMessage 32, True, "content control"
        '    If frmMsg.Tag = 0 Then
        '        Me.Hide
        '        Tag = 0
        '        GoTo lbl_Exit
        '    End If
        'End If
        If m_lngCounter = 1 Then
            m_lngCounter = m_colCCs.Count
        Else
            m_lngCounter = m_lngCounter - 1
        End If
        Set m_oCC = m_colCCs(m_lngCounter)
        If m_oCC.TITLE <> vbNullString Then
            m_strCurrentNameTitle = m_oCC.TITLE
            If m_strCurrentNameTitle = txtControl_NameTitle.Text Then
                txtControl_NameTitle_Change
            Else
                txtControl_NameTitle.Text = m_strCurrentNameTitle
            End If
        Else
            m_strCurrentNameTitle = "**NOT DEFINED**"
            txtControl_NameTitle = vbNullString
        End If
        'If chkMatchTag.Value = True Then
        '    txtCC_Tag = m_oCC.Title
        'Else
        '    txtCC_Tag = m_oCC.Tag
        'End If
        Set m_oRng = m_oCC.Range
        m_oRng.Start = m_oRng.Start - 1
        m_oRng.End = m_oRng.End + 1
        m_lngView = ActiveDocument.ActiveWindow.View
        m_oRng.Select
        ActiveDocument.ActiveWindow.View = m_lngView
        m_oRng.Select
        Application.ScreenRefresh
    Else
        For lngIndex = m_oFF.Range.Bookmarks.Count To 1 Step -1
            Set oBM = m_oFF.Range.Bookmarks(lngIndex)
            m_colBookmarks.Remove oBM.Name
            oBM.Delete
        Next
        If Not txtControl_NameTitle = "" Then
            With Dialogs(wdDialogFormFieldOptions)
                .Name = txtControl_NameTitle
                .Execute
            End With
            m_colBookmarks.Add txtControl_NameTitle, txtControl_NameTitle
            'If m_lngCounter = 1 Then 'GM
            '    ShowMessage 32, True, "form field" 'GM
            '    If frmMsg.Tag = 0 Then 'GM
            '        Me.Hide
            '        Tag = 0
            '        GoTo lbl_Exit
            '    End If
            'End If
        Else
            ShowMessage 43, , "following 'Name:' field."
        End If
        If m_lngCounter = 1 Then
            m_lngCounter = ActiveDocument.FormFields.Count
        Else
            m_lngCounter = m_lngCounter - 1
        End If
        Set m_oFF = ActiveDocument.FormFields(m_lngCounter)
        m_strCurrentNameTitle = "**NOT DEFINED**"
        If m_oFF.Range.Bookmarks.Count > 0 Then
            m_strCurrentNameTitle = m_oFF.Range.Bookmarks(1).Name
            txtControl_NameTitle.Text = m_strCurrentNameTitle
        Else
            If txtControl_NameTitle.Text <> vbNullString Then
                txtControl_NameTitle.Text = vbNullString
            Else
                txtControl_NameTitle_Change
            End If
        End If
        m_oFF.Range.Select
        Application.ScreenRefresh
    End If
    txtControl_NameTitle.SetFocus
lbl_Exit:
    Exit Sub
End Sub

Private Sub cmdOvrdPrev_Click()
    m_oCC.TITLE = txtControl_NameTitle
    If Not txtControl_NameTitle = "" Then
        If chkNoDups Then    'GKM
            m_colCCTitlesChk.Add m_oCC.TITLE, m_oCC.TITLE
            m_colTitlesValidated.Add m_oCC.TITLE, m_oCC.ID
        End If
    Else    'GM
        ShowMessage 43, , "following 'Current Tag:' field."    'GM
    End If    'GM
    m_oCC.Tag = m_strCommonDataFieldTag
    'If m_lngCounter = 1 Then
    '    ShowMessage 34, True, "content control"
    '    If frmMsg.Tag = 0 Then
    '        Me.Hide
    '        Tag = 0
    '        GoTo lbl_Exit
    '    End If
    'End If
    If m_lngCounter = 1 Then
        m_lngCounter = m_colCCs.Count
    Else
        m_lngCounter = m_lngCounter - 1
    End If
    Set m_oCC = m_colCCs(m_lngCounter)
    If m_oCC.TITLE <> vbNullString Then
        m_strCurrentNameTitle = m_oCC.TITLE
        If m_strCurrentNameTitle = txtControl_NameTitle.Text Then
            txtControl_NameTitle_Change
        Else
            txtControl_NameTitle.Text = m_strCurrentNameTitle
        End If
    Else
        m_strCurrentNameTitle = "**NOT DEFINED**"
        txtControl_NameTitle = vbNullString
    End If
    txtCC_Tag = m_oCC.Tag
    Set m_oRng = m_oCC.Range
    m_oRng.Start = m_oRng.Start - 1
    m_oRng.End = m_oRng.End + 1
    m_lngView = ActiveDocument.ActiveWindow.View
    m_oRng.Select
    Application.ScreenRefresh
lbl_Exit:
    Exit Sub
End Sub

Private Sub txtControl_NameTitle_Change()
Dim lngValidate As Long
    If m_bUseForPassword Then
        If ActiveDocument.ProtectionType = wdAllowOnlyFormFields Then
            On Error Resume Next
            ActiveDocument.Unprotect Password:=txtControl_NameTitle.Text
            If Err.Number = 0 Then
                If Not txtControl_NameTitle.Text = "" Then SaveSetting AppID, "Config", "Legacy Password", txtControl_NameTitle.Text
                On Error GoTo 0
                txtControl_NameTitle.Text = vbNullString
            End If
            On Error GoTo 0
            Exit Sub
        End If
        m_bUseForPassword = False
        optFFs_Change
    End If
    If optCCs Then
        If Not m_oCC.Type = wdContentControlCheckBox Then
            txtPlaceHolder = m_oCC.PlaceholderText
        End If
        If txtControl_NameTitle = m_oCC.TITLE Then
            lbl_Title = "Current title:"
        Else
            lbl_Title = "Title:"
        End If
        If chkMatchTag.value = True Then
            txtCC_Tag = txtControl_NameTitle
        Else
            txtCC_Tag = m_oCC.Tag
        End If
        
        If Not m_oCC.Type = wdContentControlCheckBox Then
            If chkMatchPlace.value = True Then
                txtPlaceHolder = txtControl_NameTitle
            Else
                txtPlaceHolder = m_oCC.PlaceholderText
            End If
        End If

        If m_strCurrentNameTitle = txtControl_NameTitle Then
            If Not chkReservedWord And Not chkNoDups Then
                lngValidate = 0
                cmdOKSetNext.Enabled = True
                cmdOKSetPrev.Enabled = True
                cmdOvrdNext.Enabled = True
                cmdOvrdPrev.Enabled = True
            Else
                lngValidate = fcnValidateCCTitle(txtControl_NameTitle)
                Select Case lngValidate
                    Case 1
                        lngValidate = 0
                        cmdOKSetNext.Enabled = True
                        cmdOKSetPrev.Enabled = True
                        cmdOvrdNext.Enabled = True
                        cmdOvrdPrev.Enabled = True
                    Case Else
                        cmdOKSetNext.Enabled = False
                        cmdOKSetPrev.Enabled = False
                        cmdOvrdNext.Enabled = False
                        cmdOvrdPrev.Enabled = False
                        With txtControl_NameTitle
                            .SetFocus
                            .SelStart = 0
                            .SelLength = Len(txtControl_NameTitle)
                        End With
                End Select
            End If
        Else
            lngValidate = fcnValidateCCTitle(txtControl_NameTitle)
            If lngValidate = 1 Then
                cmdOKSetNext.Enabled = True
                cmdOKSetPrev.Enabled = True
                cmdOvrdNext.Enabled = True
                cmdOvrdPrev.Enabled = True
            Else
                If m_lngCounter = 1 Then    'GM
                    cmdOKSetPrev.Enabled = False
                    cmdOvrdPrev.Enabled = False
                Else    'GM
                    cmdOKSetPrev.Enabled = True    'GM
                    cmdOvrdPrev.Enabled = True    'GM
                End If    'GM
                cmdOKSetNext.Enabled = False
                cmdOvrdNext.Enabled = False
            End If
        End If

    Else
        lbl_Title = "Name:"
        If m_oFF.Range.Bookmarks.Count > 0 Then
            If txtControl_NameTitle = m_oFF.Range.Bookmarks(1).Name Then
                lbl_Title = "Current name:"
            End If
        End If
        If m_strCurrentNameTitle = txtControl_NameTitle Then
            If Not chkReservedWord Then
                lngValidate = 0
                cmdOKSetNext.Enabled = True
                cmdOKSetPrev.Enabled = True
            Else
                lngValidate = fcnValidateBMName(txtControl_NameTitle)
                Select Case lngValidate
                    Case 1, 2, 3
                        cmdOKSetNext.Enabled = True
                        cmdOKSetPrev.Enabled = True
                        lngValidate = 0
                    Case Else
                        cmdOKSetNext.Enabled = False
                        cmdOKSetPrev.Enabled = False
                        With txtControl_NameTitle
                            .SelStart = 0
                            .SelLength = Len(txtControl_NameTitle)
                        End With
                End Select
            End If
        Else
            lngValidate = fcnValidateBMName(txtControl_NameTitle)
            If lngValidate = 1 Then
                cmdOKSetNext.Enabled = True
                cmdOKSetPrev.Enabled = True
            Else
                If m_lngCounter = 1 Then    'GM
                    cmdOKSetPrev.Enabled = False
                    cmdOvrdPrev.Enabled = False
                Else    'GM
                    cmdOKSetPrev.Enabled = True    'GM
                    cmdOvrdPrev.Enabled = True    'GM
                End If    'GM
                cmdOKSetNext.Enabled = False
                cmdOvrdNext.Enabled = False
            End If
        End If
    End If

    If m_lngCounter <= 1 Then    'GM
        cmdOKSetPrev.Enabled = False    'GM
        cmdOvrdPrev.Enabled = False    'GM
    End If    'GM

    If txtControl_NameTitle = "" Then
        cmdOvrdPrev.Enabled = False    'GM
    End If    'GM

    With lbl_Notification
        Select Case lngValidate
            Case 0
                If optCCs Then
                    .Caption = vbCr & "Title validated.": .ForeColor = &HFF0000
                Else
                    .Caption = vbCr & "Bookmark name validated.": .ForeColor = &HFF0000
                End If
            Case 1
                If optCCs Then
                    .Caption = vbCr & "Defined title validated.": .ForeColor = &HFF0000
                Else
                    .Caption = vbCr & "Defined bookmark name validated.": .ForeColor = &HFF0000
                End If
            Case 2
                If optCCs Then
                    .Caption = vbCr & "Title not defined. Type in a title to validate.": .ForeColor = &HFF0000
                Else
                    .Caption = vbCr & "Name not defined. Type in a bookmark name to validate.": .ForeColor = &HFF0000
                End If
            Case 3
                If optCCs Then
                    .Caption = "Defined title is already assigned to an existing content control.": .ForeColor = &HFF&
                Else
                    .Caption = "Defined name is already assigned to an existing bookmark.": .ForeColor = &HFF&
                End If
            Case 4:
                If optCCs Then
                    .Caption = "Defined title conflicts with a keyword or contains a restricted character." & vbCr & "Replace with a non-reserved keyword/remove any restricted characters.": .ForeColor = &HFF&
                Else
                    .Caption = "Defined bookmark name conflicts with a keyword." & vbCr & "Replace with a non-reserved keyword.": .ForeColor = &HFF&
                End If
        End Select
        Select Case lngValidate
            Case 0, 1, 2, 3: .Font.Size = 12
            Case 4: .Font.Size = 10
        End Select
    End With
lbl_Exit:
    Exit Sub
End Sub

Private Sub txtControl_NameTitle_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If optCCs Then
        If chkReservedWord Then
            Select Case KeyAscii
                'Case 32
                '    Beep
                '    KeyAscii = 95
                Case 33, 35 To 43, 47, 58 To 62, 91 To 94, 96, 123 To 126
                    Beep
                    KeyAscii = 0
                Case Else
            End Select
            If Len(txtControl_NameTitle) = 0 Then
                If KeyAscii = 32 Then
                    Beep
                    KeyAscii = 0
                End If
            End If
        End If
    Else
        If Not m_bUseForPassword = True Then
            If Len(txtControl_NameTitle) = 0 Then
                If Not Chr(KeyAscii) Like "[A-Za-z]" Then
                    Beep
                    KeyAscii = 0
                End If
            Else
                If Not Chr(KeyAscii) Like "[A-Za-z0-9_]" Then
                    Beep
                    KeyAscii = 0
                End If
            End If
        End If
    End If
lbl_Exit:
    Exit Sub
End Sub

Private Sub txtCC_Tag_Change()
    If optCCs Then
        If txtCC_Tag.Text <> "" Then
            cmd_SetAsDefault.Enabled = True
            If txtCC_Tag = m_oCC.Tag Then
                lblTag = "Current tag:"
            Else
                lblTag = "Tag:"
            End If
        Else
            If txtCC_Tag = m_oCC.Tag Then
                lblTag = "Current tag:"
            Else
                lblTag = "Tag:"
            End If
            cmd_SetAsDefault.Enabled = False
        End If
    End If
lbl_Exit:
    Exit Sub
End Sub

Function fcnGetBMNames() As Collection
Dim oBM
    Set fcnGetBMNames = New Collection
    For Each oBM In ActiveDocument.Bookmarks
        fcnGetBMNames.Add oBM.Name, LCase(oBM.Name)
    Next
lbl_Exit:
    Exit Function
End Function

Function fcnValidateCCTitle(strName As String) As Long
    fcnValidateCCTitle = 1
    'First see if text was passed
    If txtControl_NameTitle = vbNullString Then
        fcnValidateCCTitle = 2
        Exit Function
    End If
    'Then see if the name passed is a reserved word.
    If chkReservedWord Then
        If InStr(p_strReservedWords, "|" & strName & "|") > 0 Then
            fcnValidateCCTitle = 4
            Exit Function
        End If
        If Not fcnValidateTitle(strName) Then
            fcnValidateCCTitle = 4
            Exit Function
        End If
    End If
    If chkNoDups Then
        'Then see if the name passed is duplicated
        On Error Resume Next
        m_colCCTitlesChk.Add strName, strName
        If Err.Number <> 0 Then
            Err.Clear
            If strName = m_oCC.TITLE Then
                m_colTitlesValidated.Add m_oCC.TITLE, m_oCC.ID
                If Err.Number <> 0 Then
                    Err.Clear
                    m_colTitlesValidated.Remove m_oCC.ID
                    m_colCCTitlesChk.Remove m_oCC.TITLE
                Else
                    m_colTitlesValidated.Remove m_oCC.ID
                    fcnValidateCCTitle = 3
                End If
            Else
                fcnValidateCCTitle = 3

            End If
        Else
            m_colCCTitlesChk.Remove (m_colCCTitlesChk.Count)
        End If
        On Error GoTo 0
    End If
lbl_Exit:
    Exit Function
End Function

Function fcnValidateBMName(strName) As Long
    fcnValidateBMName = 1
    'First see if text was passed
    If txtControl_NameTitle = vbNullString Then
        fcnValidateBMName = 2
        Exit Function
    End If
    'Then see if the name passed is a reserved word.
    If chkReservedWord Then
        If InStr(p_strReservedWords, "|" & strName & "|") > 0 Then
            fcnValidateBMName = 4
            Exit Function
        End If
    End If
    'Then see if the name passed is already assigned to a bookmark
    On Error Resume Next
    m_colBookmarks.Add strName, strName
    If Err.Number <> 0 Then
        fcnValidateBMName = 3
        Err.Clear
    Else
        m_colBookmarks.Remove (m_colBookmarks.Count)
    End If
    On Error GoTo 0
lbl_Exit:
    Exit Function
End Function

Sub AutoBookmarkDocFormFields()
Dim lngIndex As Long, lngBM As Long, lngText As Long, lngDD As Long, lngChk As Long, lngDup
Dim strName As String
Dim oBM As Bookmark
Dim colBookmarks As New Collection
    For lngBM = 1 To ActiveDocument.Bookmarks.Count
        colBookmarks.Add ActiveDocument.Bookmarks(lngBM).Name, ActiveDocument.Bookmarks(lngBM).Name
    Next lngBM
    lngText = 1: lngDD = 1: lngChk = 1
    For lngIndex = 1 To ActiveDocument.FormFields.Count
        Set m_oFF = ActiveDocument.FormFields(lngIndex)
        If m_oFF.Range.Bookmarks.Count = 1 Then
            If m_oFF.Range.Bookmarks(1).Name = m_oFF.Name Then
                GoTo NextFF
                'This is the ideal case.  The formfield name and bookmark match
            ElseIf m_oFF.Range.Bookmarks(1).Name <> m_oFF.Name Then
                If m_oFF.Name <> vbNullString Then
                    strName = m_oFF.Range.Bookmarks(1).Name
                    'Attempt to synchronize the bookmark\FF names.
                    On Error Resume Next
                    colBookmarks.Add m_oFF.Name, m_oFF.Name
                    If Err.Number = 0 Then
                        colBookmarks.Remove strName
                        m_oFF.Range.Bookmarks(1).Delete
                        ActiveDocument.Bookmarks.Add m_oFF.Name, m_oFF.Range
                        GoTo NextFF
                    End If
                End If
            End If
        End If
        'More drastic measures required.
        m_oFF.Range.Select
        DoEvents
        For lngBM = m_oFF.Range.Bookmarks.Count To 1 Step -1
            Set oBM = m_oFF.Range.Bookmarks(lngBM)
            colBookmarks.Remove oBM.Name
            oBM.Delete
        Next lngBM
        Select Case m_oFF.Type
            Case 83
                On Error Resume Next
                Do
                    Err.Clear
                    strName = "DD_" & lngDD
                    lngDD = lngDD + 1
                    m_colBookmarks.Add strName, strName
                Loop Until Err.Number = 0
            Case 71
                On Error Resume Next
                Do
                    Err.Clear
                    strName = "CHK_" & lngChk
                    lngChk = lngChk + 1
                    m_colBookmarks.Add strName, strName
                Loop Until Err.Number = 0
            Case 70
                On Error Resume Next
                Do
                    Err.Clear
                    strName = "TEXT_" & lngText
                    lngText = lngText + 1
                    m_colBookmarks.Add strName, strName
                Loop Until Err.Number = 0
        End Select
        On Error GoTo 0
        With Dialogs(wdDialogFormFieldOptions)
            .Name = strName
            .Execute
        End With
        Application.ScreenRefresh
NextFF:
    Next lngIndex
    ActiveDocument.FormFields(1).Range.Select
lbl_Exit:
    Exit Sub
End Sub

Sub AutoTitleDocCCs()
Dim lngIndex As Long, lngTrialNumber As Long
Dim lngRT As Long, lngPT As Long, lngPic As Long, lngCombo As Long, lngDD As Long, lngBB As Long, lngDTG As Long, lngChk As Long
Dim strName As String
    lngRT = 1: lngPT = 1: lngPic = 1: lngCombo = 1: lngDD = 1: lngBB = 1: lngDTG = 1: lngChk = 1
    Set m_colCCTitlesChk = New Collection
    For lngIndex = 1 To m_colCCs.Count
        'Auto tag all CCs
        m_colCCs.Item(lngIndex).Tag = txtCC_Tag
        If m_colCCs.Item(lngIndex).TITLE <> vbNullString Then
            'Next index duplicates
            lngTrialNumber = 0
            On Error Resume Next
            Do
                Err.Clear
                m_colCCTitlesChk.Add m_colCCs.Item(lngIndex).TITLE, m_colCCs.Item(lngIndex).TITLE
                If Err.Number <> 0 Then
                    lngTrialNumber = lngTrialNumber + 1
                    m_colCCs.Item(lngIndex).TITLE = m_colCCs.Item(lngIndex).TITLE & "_" & lngTrialNumber
                End If
            Loop Until Err.Number = 0
        Else
            'Then assign unique indexed generic titles to any remaining untitled CC.
            On Error Resume Next
            Select Case m_colCCs.Item(lngIndex).Type
                    'Note: Group (7) and Repeating Section (9) CCs are not processed.
                Case 0
                    Do
                        Err.Clear
                        strName = "CC_RT_" & lngRT
                        lngRT = lngRT + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 1
                    Do
                        Err.Clear
                        strName = "CC_PT_" & lngPT
                        lngPT = lngPT + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 2
                    Do
                        Err.Clear
                        strName = "CC_Picture_" & lngPic
                        lngPic = lngPic + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 3
                    Do
                        Err.Clear
                        strName = "CC_Combo_" & lngCombo
                        lngCombo = lngCombo + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 4
                    Do
                        Err.Clear
                        strName = "CC_DD_" & lngDD
                        lngDD = lngDD + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 5
                    Do
                        Err.Clear
                        strName = "CC_BB_" & lngBB
                        lngBB = lngBB + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 6
                    Do
                        Err.Clear
                        strName = "CC_DTG_" & lngDTG
                        lngDTG = lngDTG + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
                Case 8
                    Do
                        Err.Clear
                        strName = "CC_CHK_" & lngChk
                        lngChk = lngChk + 1
                        m_colCCTitlesChk.Add strName, strName
                    Loop Until Err.Number = 0
                    m_colCCs.Item(lngIndex).TITLE = strName
            End Select
            On Error GoTo 0
        End If
    Next lngIndex
lbl_Exit:
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)    'GKM - added to handle all of the Unload Me statements.
    If CloseMode <> 1 Then Cancel = True
    cmdCancel_Click
lbl_Exit:
    Exit Sub
End Sub


Attribute VB_Name = "modMain"
Option Explicit
'This module requires a reference to the Microsoft Outlook Object Library
Private oVars As Variables
Private vVar As Variant
Public i As Long, j As Long
Public oFrmExtract As frmExtract
Public olApp As Object        'Outlook.Application
Public olNs As Object        'Outlook.Namespace
Public olAccount As Object
Private strAcc As String
Public olFolder As Object        'Outlook.Folder
Public olSubFolder As Object        'Outlook.Folder
Private olItem As Object        'Outlook.MailItem
Private oNewMailItem As Object        'Outlook.MailItem
Private olAttachments As Object        'Outlook.Attachments
Private sFname As String
Private iMessages As Long
Private oDoc As Word.Document
Private TempDoc As Word.Document
Private strDocName As String
Private oTarget As Word.Document
Private oBatchDoc As Word.Document
Private sDataName As String
Private oTable As Word.Table
Private iCol As Long
Private sText As String
Private sName As String
Private fname As String
Private strFileName As String
Private strCountName As String
Private strSigpath As String
Private strMessage As String
Private Signature As String
Private oFld As FormFields
Private oBatchFld As FormFields
Private oFF As FormField
Private oCC As ContentControls
Private sPath As String
Private fso As Object
Private bIncomplete As Boolean
Private bAttachOK As Boolean
Public strProcessed As String
Public strSkipped As String
Public bOutlook As Boolean

Sub ProcessFormAttachments()
Dim lng_Docs As Long
Dim oPrimaryBar As clsProgressBar
Dim lngFF_Count As Long, lngCC_Count As Long

    If Documents.Count = 0 Then Documents.Add

    Set oDoc = ActiveDocument
    Set oFld = oDoc.FormFields
    Set oCC = oDoc.ContentControls
    lngFF_Count = oFld.Count
    lngCC_Count = oCC.Count

    sPath = Environ("Temp") & "\TempFormDocs\"

    CreateFolders sPath

    Set oFrmExtract = New frmExtract
    With oFrmExtract

        If GetSetting(AppID, "Config", "Disclaimer") = vbNullString Then
            .CheckDisclaimer.value = True
        Else
            .CheckDisclaimer.value = GetSetting(AppID, "Config", "Disclaimer")
        End If

        If Val(Application.Version) > 14 Then
            .Width = 468
        Else
            .Width = 461
        End If

        If lngFF_Count > 0 Then
            .OptionLegacy.value = True
            .OptionCC.value = False
            .TextNumFields.value = lngFF_Count
        End If
        If lngCC_Count > 0 Then
            .OptionCC.value = True
            .OptionLegacy.value = False
            .TextNumFields.value = lngCC_Count
        End If
        If lngFF_Count + lngCC_Count > 0 Then
            .OptionDocument.value = True
        End If
        RemoveCloseButton oFrmExtract
        .Show
        If .Tag = 0 Then
            Unload oFrmExtract
            Set oDoc = Nothing
            Set oFld = Nothing
            Set oCC = Nothing
            Exit Sub
        End If
        If .OptionDocument.value = True Then
            If .OptionLegacy.value = True Then
                If oFld.Count = 0 Then
                    ShowMessage 3
                    Unload oFrmExtract
                    Set oDoc = Nothing
                    Set oFld = Nothing
                    Set oCC = Nothing
                    Exit Sub
                End If
            Else
                If oCC.Count = 0 Then
                    ShowMessage 4
                    Unload oFrmExtract
                    Set oDoc = Nothing
                    Set oFld = Nothing
                    Set oCC = Nothing
                    Exit Sub
                End If
            End If
        End If
        CreateFolders .TextPath.Text
        sDataName = .TextPath.Text & .TextFname.Text
        strAcc = GetSetting(AppID, "Config", "Outlook Account")
        bOutlook = False

        If .OptionAttachments.value = True Then
            On Error Resume Next
            bOutlook = True

            Set olApp = OutlookApp()

            Set olNs = olApp.GetNamespace("MAPI")
            'Locate the folder containing the unprocessed e-mail messages
            Set olFolder = olNs.GetDefaultFolder(6).Folders("Forms_In")
            'Examine each message starting from the bottom of the list

            strProcessed = vbNullString
            strSkipped = vbNullString
            lng_Docs = olFolder.Items.Count
            Set oPrimaryBar = New clsProgressBar
            With oPrimaryBar
                .Background = &HE6FFFF
                .FontColor = 6291584
                .InitialColor = &HF7FBF7
                .FinalColor = &HFF00&
                .TotalActions = lng_Docs
                .ApplicationStatusBar = False
                If Not .ApplicationStatusBar Then .ShowBar
            End With
            For i = lng_Docs To 1 Step -1
                Set olItem = olFolder.Items(i)
                'Mark the message as read
                'olItem.UnRead = True
                Set olAttachments = olItem.Attachments
                'Count the attachments attached to the message
                If olAttachments.Count = 1 Then
                    'There is one attachment so note its filename
                    sFname = sPath & olAttachments.Item(1).DisplayName
                    If CheckAttachments(sFname) = True Then
                        'Save the attachment to the temporary folder
                        olAttachments.Item(1).SaveAsFile sFname
                    Else
                        'add to log
                        strSkipped = strSkipped & "Message from " & olItem.Sender & " had the wrong type of attachment." & vbCr
                        'The message has the wrong type of attachment
                        'Mark it as unread
                        olItem.UnRead = True
                        'and move it to the Forms_Wrong folder
                        olItem.Move olFolder.Folders("Forms_Wrong")
                        'and move on to the next message
                        GoTo ProcessNext
                    End If
                Else
                    'add to log
                    strSkipped = strSkipped & "Message from " & olItem.Sender & " had the wrong number of attachments." & vbCr
                    'The message has the wrong number of attachments
                    'Mark it as unread
                    olItem.UnRead = True
                    'and move it to the Forms_Wrong folder
                    olItem.Move olFolder.Folders("Forms_Wrong")
                    'and move on to the next message
                    GoTo ProcessNext
                End If
                'Open the temporary document from its folder
                'The form may contain automacros, not required
                'by this macro, so first disable them
                WordBasic.DisableAutoMacros 1
                Set TempDoc = Documents.Open(Filename:=sFname, AddToRecentFiles:=False, Visible:=False)
                strDocName = TempDoc.Name & " - from '" & olItem.Sender & "'"

                Set oVars = TempDoc.Variables
                'Store the sender's e-mail address and message subject in the document
                oVars("varSender").value = olItem.SenderEmailAddress
                oVars("varSubject").value = olItem.Subject
                'Word 2007 has a habit of switching to draft view so select PrintView
                If Val(Application.Version) = 12 Then ActiveWindow.View.Type = wdPrintView
                'Check all the form fields in the temporary document

                Select Case True
                    Case .OptionLegacy.value
                        If Not TempDoc.FormFields.Count = .TextNumFields.value Then
                            TempDoc.Close SaveChanges:=wdDoNotSaveChanges
                            olItem.UnRead = True
                            olItem.Move olFolder.Folders("Forms_Wrong")
                            strSkipped = strSkipped & strDocName & " (Form field count error)" & vbCr
                            GoTo ProcessNext
                        End If

                        If IncompleteData(TempDoc) = True Then
                            If .CheckIncomplete.value = True Then
                                If Not .CheckReturns.value = True Then
                                    strSkipped = strSkipped & strDocName & " (Incomplete Form)" & vbCr
                                End If
                                If .CheckReturns.value = True Then
                                    strSkipped = strSkipped & strDocName & " (Incomplete Form - Returned to Sender)" & vbCr
                                    strSigpath = "C:\Users\" & Environ("username") & _
                                                 "\AppData\Roaming\Microsoft\Signatures\"
                                    If Dir(strSigpath) = "" Then
                                        strSigpath = "C:\Documents and Settings\" & Environ("username") & _
                                                     "\Application Data\Microsoft\Signatures\"
                                    End If
                                    If .LstSignature.value <> "No Signature" Then
                                        strSigpath = strSigpath & GetSetting(AppID, "Config", "Signature") & ".txt"
                                        If Dir(strSigpath) <> "" Then
                                            Signature = GetText(strSigpath)
                                        Else
                                            Signature = ""
                                        End If
                                    Else
                                        Signature = ""
                                    End If
                                    strMessage = .txtEmailMessage & vbCr & vbCr & vbCr & Signature
                                    Set oNewMailItem = olApp.CreateItem(0)
                                    With oNewMailItem
                                        .BodyFormat = 1
                                        .To = olItem.SenderEmailAddress
                                        .Subject = "Re: " & olItem.Subject
                                        .body = strMessage
                                        .Attachments.Add sFname
                                        .Send
                                    End With
                                End If
                                olItem.UnRead = True
                                olItem.Move olFolder.Folders("Forms_Incomplete")
                                TempDoc.Close SaveChanges:=wdDoNotSaveChanges
                                GoTo ProcessNext
                            Else
                                strProcessed = strProcessed & strDocName & vbCr
                                ExtractDatatoExcel TempDoc, sDataName, .TextSheet.Text, True
                                olItem.UnRead = False
                                olItem.Move olFolder.Folders("Forms_Completed")
                            End If
                        Else
                            strProcessed = strProcessed & strDocName & vbCr
                            ExtractDatatoExcel TempDoc, sDataName, .TextSheet.Text, True
                            'Move the message to the Forms_Complete folder
                            olItem.UnRead = False
                            olItem.Move olFolder.Folders("Forms_Completed")
                        End If

                    Case .OptionCC
                        If Not TempDoc.ContentControls.Count = .TextNumFields.value Then
                            olItem.UnRead = True
                            olItem.Move olFolder.Folders("Forms_Wrong")
                            strSkipped = strSkipped & strDocName & " (Content control count error)" & vbCr
                            TempDoc.Close SaveChanges:=wdDoNotSaveChanges
                            GoTo ProcessNext
                        End If

                        If IncompleteCCData(TempDoc) = True Then
                            If .CheckIncomplete.value = True Then
                                If Not .CheckReturns.value = True Then
                                    strSkipped = strSkipped & strDocName & " (Incomplete Form)" & vbCr
                                End If
                                If .CheckReturns.value = True Then
                                    strSkipped = strSkipped & strDocName & " (Incomplete Form - Returned to Sender)" & vbCr
                                    strSigpath = "C:\Users\" & Environ("username") & _
                                                 "\AppData\Roaming\Microsoft\Signatures\"
                                    If Dir(strSigpath) = "" Then
                                        strSigpath = "C:\Documents and Settings\" & Environ("username") & _
                                                     "\Application Data\Microsoft\Signatures\"
                                    End If
                                    If .LstSignature.value <> "No Signature" Then
                                        strSigpath = strSigpath & GetSetting(AppID, "Config", "Signature") & ".txt"
                                        If Dir(strSigpath) <> "" Then
                                            Signature = GetText(strSigpath)
                                        Else
                                            Signature = ""
                                        End If
                                    Else
                                        Signature = ""
                                    End If
                                    strMessage = .txtEmailMessage & vbCr & vbCr & vbCr & Signature
                                    Set oNewMailItem = olApp.CreateItem(0)
                                    With oNewMailItem
                                        .BodyFormat = 1
                                        .To = olItem.SenderEmailAddress
                                        .Subject = "Re: " & olItem.Subject
                                        .body = strMessage
                                        .Attachments.Add sFname
                                        .Send
                                    End With
                                End If
                                olItem.UnRead = True
                                olItem.Move olFolder.Folders("Forms_Incomplete")
                                TempDoc.Close SaveChanges:=wdDoNotSaveChanges
                                GoTo ProcessNext
                            Else
                                strProcessed = strProcessed & strDocName & vbCr
                                ExtractCCtoExcel TempDoc, sDataName, .TextSheet.Text, True
                                olItem.UnRead = False
                                olItem.Move olFolder.Folders("Forms_Completed")
                            End If
                        Else
                            strProcessed = strProcessed & strDocName & vbCr
                            ExtractCCtoExcel TempDoc, sDataName, .TextSheet.Text, True
                            'Move the message to the Forms_Complete folder
                            olItem.UnRead = False
                            olItem.Move olFolder.Folders("Forms_Completed")
                        End If
                End Select
                'Re-enable automacros
                WordBasic.DisableAutoMacros 0
ProcessNext:
                DoEvents
                oPrimaryBar.StepBar
            Next i
            oPrimaryBar.Complete 2
            Set oPrimaryBar = Nothing

            CreateLog strProcessed, strSkipped

        Else        'Process documents!
            If .OptionBatch.value = True Then
                strProcessed = vbNullString
                strSkipped = vbNullString

                lng_Docs = CountFiles(.TextBatchPath.Text, "doc")
                strFileName = Dir$(.TextBatchPath.Text & "*.doc*")

                Set oPrimaryBar = New clsProgressBar
                With oPrimaryBar
                    .Background = &HE6FFFF
                    .FontColor = 6291584
                    .InitialColor = &HF7FBF7
                    .FinalColor = &HFF00&
                    .TotalActions = lng_Docs
                    .ApplicationStatusBar = False
                    If Not .ApplicationStatusBar Then .ShowBar
                End With

                While Len(strFileName) > 0 And Not Left(strFileName, 2) = "~$"
                    WordBasic.DisableAutoMacros 1

                    Set oBatchDoc = Documents.Open(Filename:=.TextBatchPath.Text & strFileName, _
                                                   AddToRecentFiles:=False, _
                                                   Visible:=False)
                    Set oBatchFld = oBatchDoc.FormFields


                    Select Case True
                        Case .OptionLegacy.value
                            If oBatchFld.Count <> .TextNumFields.value Then
                                strSkipped = strSkipped & .TextBatchPath.Text & strFileName & " (Form field count error)" & vbCr
                                oBatchDoc.Close SaveChanges:=wdDoNotSaveChanges
                                GoTo Skip:
                            End If
                            If .CheckIncomplete.value = True Then
                                If IncompleteData(oBatchDoc) = True Then
                                    strSkipped = strSkipped & .TextBatchPath.Text & strFileName & " (Incomplete Form)" & vbCr
                                    oBatchDoc.Close SaveChanges:=wdDoNotSaveChanges
                                    GoTo Skip:
                                End If
                            End If
                            ExtractDatatoExcel oBatchDoc, sDataName, .TextSheet.Text, True
                            DoEvents
                        Case .OptionCC.value
                            If oBatchDoc.ContentControls.Count <> .TextNumFields.value Then
                                strSkipped = strSkipped & .TextBatchPath.Text & strFileName & " (Content control count error)" & vbCr
                                oBatchDoc.Close SaveChanges:=wdDoNotSaveChanges
                                GoTo Skip:
                            End If
                            If .CheckIncomplete = True Then
                                If IncompleteCCData(oBatchDoc) = True Then
                                    strSkipped = strSkipped & .TextBatchPath.Text & strFileName & " (Incomplete Form)" & vbCr
                                    oBatchDoc.Close SaveChanges:=wdDoNotSaveChanges
                                    GoTo Skip:
                                End If
                            End If
                            ExtractCCtoExcel oBatchDoc, sDataName, .TextSheet.Text, True
                            DoEvents
                    End Select

                    strProcessed = strProcessed & .TextBatchPath.Text & strFileName & vbCr

Skip:
                    DoEvents
                    oPrimaryBar.StepBar

                    strFileName = Dir$()
                    WordBasic.DisableAutoMacros 0
                Wend
                On Error GoTo err_Handler
                oPrimaryBar.Complete 2
                Set oPrimaryBar = Nothing
                CreateLog strProcessed, strSkipped

            Else
                Select Case True
                    Case .OptionLegacy.value
                        If oFld.Count <> .TextNumFields.value Then
                            ShowMessage 5, False, oDoc.Name
                            GoTo CleanUp:
                        End If
                        If .CheckIncomplete.value = True Then
                            If IncompleteData(oDoc) = True Then
                                ShowMessage 7, True, oDoc.Name
                                If frmMsg.Tag = 0 Then
                                    Unload frmMsg
                                    GoTo CleanUp:
                                End If
                            End If
                        End If
                        ExtractDatatoExcel oDoc, sDataName, .TextSheet.Text
                        ShowMessage 24, , sDataName

                    Case .OptionCC.value
                        If oCC.Count <> .TextNumFields.value Then
                            ShowMessage 6, False, oDoc.Name
                            GoTo CleanUp:
                        End If
                        If .CheckIncomplete = True Then
                            If IncompleteCCData(oDoc) = True Then
                                ShowMessage 14, True, oDoc.Name
                                If frmMsg.Tag = 0 Then
                                    Unload frmMsg
                                    GoTo CleanUp:
                                End If
                            End If
                        End If
                        ExtractCCtoExcel oDoc, sDataName, .TextSheet.Text
                        ShowMessage 23, , sDataName
                End Select
            End If
        End If
    End With

CleanUp:
    Unload oFrmExtract
    Set oPrimaryBar = Nothing
    Set olItem = Nothing
    Set oDoc = Nothing
    Set oFld = Nothing
    Set oBatchDoc = Nothing
    Set oBatchFld = Nothing
    Set oCC = Nothing
    Set olFolder = Nothing
    Set olAttachments = Nothing
    Set olNs = Nothing
    Set olApp = Nothing
    Set fso = Nothing
lbl_Exit:
    Exit Sub
err_Handler:
    oPrimaryBar.StepBar
    Resume
End Sub

Function IncompleteData(oDoc As Document) As Boolean
    bIncomplete = False
    For j = 1 To oDoc.FormFields.Count
        'If any are incomplete
        If oDoc.FormFields(j).Result = "" Then
            'Call the routine to return the unaltered form to the sender
            bIncomplete = True
            Exit For
        End If
    Next j
    IncompleteData = bIncomplete
lbl_Exit:
    Exit Function
End Function

Function CheckAttachments(strAttachment As String) As Boolean
    Select Case LCase(Right(strAttachment, Len(strAttachment) - InStrRev(strAttachment, ChrW(46))))
        Case "doc", "docx", "docm"
            bAttachOK = True
        Case Else
            bAttachOK = False
    End Select
    CheckAttachments = bAttachOK
lbl_Exit:
    Exit Function
End Function

Function GetText(ByVal sFile As String) As String
Dim fso As Object
Dim ts As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(sFile).OpenAsTextStream(1, -2)
    GetText = ts.ReadAll
    ts.Close
lbl_Exit:
    Exit Function
End Function

Private Function CountFiles(strPath As String, Optional strExt As String) As Double    'Look for strExt = 'doc' for doc & docx/docm
Dim objFso As Object
Dim objFiles As Object
Dim objFile As Object

    On Error GoTo err_Handler

    Set objFso = CreateObject("Scripting.FileSystemObject")
    Set objFiles = objFso.GetFolder(strPath).Files

    If strExt = "" Then
        CountFiles = objFiles.Count
    Else
        For Each objFile In objFiles
            If Mid(LCase(objFile.Path), InStrRev(objFile.Path, Chr(46)) + 1) Like LCase(strExt & "*") And _
               Not Left(LCase(objFile.Path), 2) = "~$" Then
                CountFiles = CountFiles + 1
            End If
        Next objFile
    End If
lbl_Exit:
    Set objFile = Nothing
    Set objFiles = Nothing
    Set objFso = Nothing
    Exit Function
err_Handler:
    CountFiles = 0
    Err.Clear
    GoTo lbl_Exit
End Function

Attribute VB_Name = "modMsg"
Option Explicit

Function ShowMessage(ByRef lngErr As Long, _
                     Optional bYesNo As Boolean, _
                     Optional sText As String, _
                     Optional sValue As String = "0", _
                     Optional bQuit As Boolean)
Dim pCaption As String
Dim pMessage As String
Dim lngFontSize As Long
Dim strYes As String, strNo As String, strYesAcc As String, strNoAcc As String
Dim strQuit As String, strQuitAcc As String
Dim iHeight As Long
Dim iWide As Long, i As Long
Dim strColor As String
Dim cap1 As String
Dim strAlign As String

Const bShowTitleBar As Boolean = False

Const msg1 As String = "You must enter the number of form fields in the forms to be processed before continuing."
Const msg3 As String = "There are no form fields in the current document!" & vbCr & vbCr & _
      "Open a form to be processed before using this function."
Const msg4 As String = "There are no content controls in the current document!" & vbCr & vbCr & _
      "Open a form to be processed before using this function."
Const msg8 As String = "You must enter the location to save the data file."
Const msg9 As String = "You must enter a valid filename for the data file."
Const msg10 As String = "You must enter the location of the folder containing the documents to be processed."
Const msg11 As String = "The active document is not a valid form document."
Const msg12 As String = "The requested template could not be loaded." & vbCr & vbCr & " Run the function again and re-enter the template preference."
Const msg13 As String = "The current document includes at least one Picture or Building Block content control." & vbCr + vbCr & _
      "This function has no control over the layout of the report and thus such control content is ignored when preparing the report."
Const msg15 As String = "The selected function has been cancelled."
Const msg16 As String = "One or more of the Content Controls in the document has not been completed." & vbCr + vbCr & _
      "Do you still wish to create a report from the data in the document?"
Const msg17 As String = "One or more of the Form Fields in the document has not been completed." & vbCr + vbCr & _
      "Do you still wish to create a report from the data from the document?"
Const msg18 As String = "User Cancelled!"
Const msg19 As String = "Do you wish to select a folder to store the default workbook, or do you wish to select an existing workbook?"
Const msg20 As String = "You must enter the number of "
Const msg21 As String = "You must select the worksheet in which to record the data."
Const msg22 As String = "The add-in requires all documents to be closed. The add-in will close the documents and saving any changes, or you can cancel and save any changes manually."
Const msg23 As String = "The content controls in the active document have been processed and recorded in the workbook"
Const msg24 As String = "The form fields in the active document have been processed and recorded in the workbook"
Const msg25 As String = "The named worksheet does not have the same number of fields as fields in the document."
Const msg26 As String = "There are no form fields or content controls in the current document!" & vbCr & vbCr & _
      "Open a form to be processed before using this function."
Const msg27 As String = "While the converted form would be compatible with the extraction process, " & _
      "it would be advisable to ensure that those controls are appropriately titled and/or tagged, " & _
      "before distributing the form for completion." & vbCr & vbCr & "Do you want to review the content control titles applied (recommended)?"
Const msg28 As String = "Content control title validation and tagging complete."
Const msg29 As String = "The 'Auto' process a sets a common tag to all document content controls " _
      & "(except group and repeating sections types). It applies a unique indexed title to any content control " _
      & "in the active document that is not already titled." & vbCr & vbCr _
      & "Content controls with duplicate titles are indexed starting with the first duplicated instance found." & vbCr & vbCr _
      & "It DOES NOT ensure that existing content control titles " _
      & "won't conflict with Access reserved keywords." & vbCr & vbCr _
      & "When used for data extraction, data field names define column headings. " _
      & "Therefore use this option judiciously, as generic content control titles could create a reserve keyword conflict or make reading " _
      & "and evaluating extracted data difficult." & vbCr & vbCr _
      & "Click 'OK' to proceed with 'AUTO' processing or 'Cancel' to quit."
Const msg30 As String = "The 'AUTO' process applies a unique indexed bookmark " _
      & "(i.e. it applies a unique generic form field name) to any form field in " _
      & "the active document that is not already bookmarked, either as the form field was created, or by using this utility." & vbCr & vbCr _
      & "It DOES NOT ensure that existing bookmarked form fields " _
      & "(i.e. form field names) won't conflict with Access reserved keywords." & vbCr & vbCr _
      & "When used for data extraction, data field names define column headings. " _
      & "Therefore use this option judiciously, as generic field names could create a reserve keyword conflict or make reading " _
      & "and evaluating extracted data difficult." & vbCr & vbCr _
      & "Click 'OK' to proceed with 'AUTO' processing or 'Cancel' to quit."
Const msg37 As String = "You appear to attempting to process a form, with content controls, in Word 2007." & vbCr & vbCr & _
      "The content control implementation in Word 2007 is rudimentary at best. " & _
      "This add-in is not equipped to handle content controls in that Word version."
Const msg38 As String = "You are about to process a form with legacy form fields in "
Const msg39 As String = "One of more documents currently open is a protected document." & vbCr & vbCr _
      & "To extract data from multiple documents in a batch or Outlook folder, this add-in first " _
      & "disables execution of any auto macros that may be contained in those documents." & vbCr & vbCr _
      & "A protected active document, inhibits this step.  Please close the protected document and try again."
Const msg40 As String = "This process is intended for use when creating a legacy form for collecting data." & vbCr & vbCr _
      & "Do not use it to modify a completed form, as any data it contains will be lost."
Const msg41 As String = "Form field conversion to content controls is not supported in Word 2007."
Const msg42 As String = "The active form document has password protected editing restrictions applied." & vbCr & vbCr & _
      "The password, entered on the userform, is not the correct password to remove the editing restrictions." & vbCr & vbCr & _
      "Either run the process again and enter the correct password, or manually remove the editing restrictions, before this utility can convert form fields to content controls."
Const msg43 As String = "The process does not allow the entry of an unnamed value. To proceed forwards beyond this point, you must enter a value in the "
Const msg44 As String = "The process used to extract fields cannot handle forms that contain more than 255 fields." & vbCr & "Cancel the process and select a different form."

    cap1 = " - User Information"

    strYes = "OK"
    strYesAcc = "O"
    strNo = "Cancel"
    strNoAcc = "C"
    strQuit = "Quit"
    strQuitAcc = ""
    iHeight = 140
    strColor = 6291584
    strAlign = "Center"
    lngFontSize = 10

    Select Case lngErr
        Case 1
            pMessage = msg1
            iHeight = 110
        Case 2
            pMessage = sText
            iHeight = 100 + Val(sValue)
            strAlign = "left"
        Case 3
            pMessage = msg3
            iHeight = 150
            strAlign = "left"
        Case 4
            pMessage = msg4
            iHeight = 150
            strAlign = "left"
        Case 5
            pMessage = "The number of form fields in the document " & Chr(34) & _
                       sText & Chr(34) & " does not match the number of fields in the data file. This document will not be processed."
            iHeight = 140
        Case 6
            pMessage = "The number of content controls in the document " & Chr(34) & _
                       sText & Chr(34) & " does not match the number of fields in the data file."
            iHeight = 130
        Case 7
            pMessage = "One or more of the form fields in the document " & Chr(34) & _
                       sText & Chr(34) & " has not been completed." & vbCr + vbCr & _
                       "Do you still wish to record the data from the document?"
            strYes = "Yes"
            strNo = "No"
            iHeight = 160
        Case 8
            pMessage = msg8
            iHeight = 110
        Case 9
            pMessage = msg9
            iHeight = 110
        Case 10
            pMessage = msg10
            iHeight = 110
        Case 11
            pMessage = msg11
            iHeight = 110
        Case 12
            pMessage = msg12
            iHeight = 140
        Case 13
            pMessage = msg13
            iHeight = 160
        Case 14
            pMessage = "One or more of the Content Controls in the document" & Chr(34) & _
                       sText & Chr(34) & " has not been completed." & vbCr + vbCr & _
                       "Do you still wish to record the data from the document?"
            strYes = "Yes"
            strNo = "No"
            iHeight = 160
        Case 15
            pMessage = msg15
            iHeight = 100
        Case 16
            pMessage = msg16
            iHeight = 150
            strYes = "Yes"
            strNo = "No"

        Case 17
            pMessage = msg17
            iHeight = 150
            strYes = "Yes"
            strNo = "No"
        Case 18
            pMessage = msg18
            iHeight = 100
        Case 19
            pMessage = msg19
            iHeight = 130
            strYes = "Select Folder"
            strYesAcc = "S"
            strNo = "Existing W/B"
            strNoAcc = "E"
        Case 20
            pMessage = msg20
            If oFrmExtract.OptionCC.value = True Then
                pMessage = pMessage & " content controls"
            Else
                pMessage = pMessage & " form fields"
            End If
            pMessage = pMessage & " in the document"
            If Not oFrmExtract.OptionDocument.value = True Then
                pMessage = pMessage & "s"
            End If
            pMessage = pMessage & " to be processed"
            iHeight = 110
        Case 21
            pMessage = msg21
            iHeight = 110
        Case 22
            pMessage = msg22
            iHeight = 140
            strYes = "Save and Close Docs"
            strYesAcc = "S"
            strNo = "Cancel"
            strNoAcc = "N"
        Case 23
            pMessage = msg23 & vbCr & sText
            iHeight = 150
        Case 24
            pMessage = msg24 & vbCr & sText
            iHeight = 130
        Case 25
            pMessage = msg25
            iHeight = 110
        Case 26
            pMessage = msg26
            iHeight = 150
        Case 27
            pMessage = "Conversion Complete" & vbCr & vbCr & sText & _
                       " content controls have been created." _
                       & vbCr & vbCr & msg27
            iHeight = 240
            strAlign = "left"
            strYes = "Review Now"
            strYesAcc = "R"
        Case 28
            pMessage = msg28
            iHeight = 110
        Case 29
            pMessage = msg29
            iHeight = 370
            strAlign = "left"
            strYes = "OK"
            strYesAcc = "O"
        Case 30
            pMessage = msg30
            iHeight = 320
            strAlign = "left"
            strYes = "OK"
            strYesAcc = "O"
        Case 31
            pMessage = sText
            iHeight = 100
        Case 32
            pMessage = "You have processed the first " & sText & " in the document." & vbCr & vbCr _
                       & "Do you want to continue looping backwards through the " & sText & "s to review?"
            iHeight = 150
            strYes = "Yes"
            strYesAcc = "Y"
        Case 33
            pMessage = "Auto processing " & sText & " is complete."
            iHeight = 110
        Case 34
            pMessage = "You have processed the last " & sText & " in the document." & vbCr & vbCr _
                       & "Do you want to continue looping through the " & sText & "s, from the start, to review?"
            iHeight = 150
            strYes = "Yes"
            strYesAcc = "Y"
        Case 35
            pMessage = sText
            iHeight = 110
        Case 36
            pMessage = msg38 & sText & "." & vbCr & vbCr & _
                       "If you propose extracting the data from legacy form fields, using the extraction functions of this add-in, with this Word version, " & _
                       "employing the utility provided with this add-in to convert the form fields to content controls is recommended." & vbCr & vbCr & _
                       sText & " processes legacy forms slowly, and with a large number of fields this can make a significant difference to the extraction speed." & vbCr & vbCr & _
                       "Word 2010, should you have it available, would be able to extract data from legacy forms much more quickly."
            iHeight = 290
            strAlign = "left"
        Case 37
            pMessage = msg37
            iHeight = 170
            strAlign = "left"
        Case 38
            pMessage = msg38 & sText & "." & vbCr & vbCr & _
                       "Word versions after Word 2010 process legacy form fields relatively slowly and with a large form, " & _
                       "with many fields, this can take a significant time to complete, " & _
                       "without much obvious activity." & vbCr & vbCr & "Please wait until the process is completed."
            iHeight = 210
            strAlign = "left"
        Case 39
            pMessage = msg39
            iHeight = 220
            strAlign = "left"
        Case 40
            pMessage = msg40
            iHeight = 150
        Case 41
            pMessage = msg41
            iHeight = 110
        Case 42
            pMessage = msg42
            iHeight = 220
            strAlign = "left"
        Case 43
            pMessage = msg43 & sText
            iHeight = 140
            strAlign = "Left"
        Case 44
            pMessage = msg44
            iHeight = 130
    End Select

    With frmMsg
        .Height = iHeight

        If Val(Application.Version) > 14 Then
            .Width = .Width - 7
            .Height = .Height - 7
        End If

        .Caption = cap1
        .CB_ErrOK.Caption = strYes
        .CB_ErrOK.Accelerator = strYesAcc
        .CBErrNo.Caption = strNo
        .CBErrNo.Accelerator = strNoAcc
        .txtMessage.Height = .Height - 76
        .CB_ErrOK.Top = .Height - 57
        .CBErrNo.Top = .Height - 57
        .CBQuit.Top = .Height - 57

        .CBQuit.Visible = False
        .CBQuit.Accelerator = ""
        If bYesNo = True Then
            .CB_ErrOK.Left = 120    '108
            .CB_ErrOK.Width = 108
            .CBErrNo.Visible = True
            .CBErrNo.Left = 12
            .CBErrNo.Width = 108
        Else
            .CB_ErrOK.Left = 12
            .CB_ErrOK.Width = 216
            .CBErrNo.Visible = False
        End If
        If bQuit = True Then
            .CBQuit.Width = 72
            .CBQuit.Visible = True
            .CBQuit.Left = 12
            .CBQuit.Caption = strQuit
            .CBQuit.Accelerator = strQuitAcc
            .CBErrNo.Width = 72
            .CBErrNo.Visible = True
            .CBErrNo.Left = 84
            .CB_ErrOK.Width = 72
            .CB_ErrOK.Left = 156
        End If
        With .txtMessage
            .Text = pMessage
            .Font.Name = "Tahoma"
            .Font.Size = lngFontSize
            .Font.Bold = False
            .ForeColor = strColor
            Select Case LCase(strAlign)
                Case Is = "left"
                    .TextAlign = fmTextAlignLeft
                Case Is = "right"
                    .TextAlign = fmTextAlignRight
                Case Else
                    .TextAlign = fmTextAlignCenter
            End Select
            .SetFocus
            .SelStart = 0
        End With
        .CB_ErrOK.SetFocus
        PlayASound "Notify"
        If Not bShowTitleBar = True Then RemoveTitleBar frmMsg
        RemoveCloseButton frmMsg
        .Show
    End With
    If bYesNo = False Then Unload frmMsg
lbl_Exit:
    Exit Function
End Function


' InQuest injected base64 decoded content
' '.+-
' )zw%
' zPhw$

INQUEST-PP=macro
