Attribute VB_Name = "CBOM_Menu"
Attribute VB_Base = "0{4FDD0566-3062-4795-B32A-6142A98640CF}{831B2C56-13FF-401B-9CF5-E3DA609289BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub Create_CBOM_Button_Click()

'CBOM_erstellen

End Sub

Private Sub All_Data_Button_Click()

'Update_All_Data

End Sub

Private Sub Only_Prices_Button_Click()

'Update_Only_Prices

End Sub
Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
   Application.ScreenUpdating = False
   Call CheckUser
   Application.ScreenUpdating = True
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
  'Speicherinformationen in Project Data
  Worksheets("Project Data").Cells(6, 4).Value = Format(Now, "DD" & "." & "MM" & "." & "YYYY" & " - " & "hh" & ":" & "mm" & ":" & "ss")
  Worksheets("Project Data").Cells(7, 4).Value = currentUserEmailAddress()
  Worksheets("Project Data").Cells(8, 4).Value = Worksheets("Project Data").Cells(8, 4).Value + 1
End Sub

'Private Sub Workbook_open()
   'Application.DisplayFullScreen = True
   'Version_Check
   'Protect_all "lock"
'End Sub

'Private Sub Workbook_BeforeClose(Cancel As Boolean)
   'Application.DisplayFullScreen = False
'End Sub

'Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
   'Range("Range_Calc_in_Progress").Value = ""
   'Range("Current_Range").Value = ""
   'Range("Current_Period").Value = ""
   'Bid_Export_erstellen
'End Sub

Attribute VB_Name = "Funktionen"
Function FACULT(No_Ersatzteil)
    Dim Z|fffd|hler1 As Integer, fakult1 As Double, fakult2 As Double
  
    fakult1 = 0
    fakult2 = 1
    
    For Z|fffd|hler1 = 0 To No_Ersatzteil - 1 Step 1
  
        fakult1 = fakult1 + 1
        fakult2 = fakult1 * fakult2
        
    Next Z|fffd|hler1
    
    FACULT = fakult2
  
End Function

Function INITIALSPARES(Anzahl_Systeme As Double, Prob_Grenze As Double, Lambda As Double, cycle_time As Double)
  
  'Dim Anzahl_Systeme As Double
  'Dim Prob_Grenze As Double
  
  Dim prob As Double
  Dim Prob_Teil As Double
  Dim No_Ersatzteil As Double
  
  'Anzahl_Systeme = Range("No_Of_Vehicles")
  'Prob_Grenze = Range("Initial_Spares_Avail")
  
  prob = 0
  Prob_Teil = 0
  No_Ersatzteil = 0
  
  prob = Exp(-Anzahl_Systeme * Lambda * cycle_time)
  
  If prob > Prob_Grenze Then
  
     No_Ersatzteil = 0
  
  Else
     
     Do Until prob >= Prob_Grenze
        
        No_Ersatzteil = No_Ersatzteil + 1
        Prob_Teil = ((Anzahl_Systeme * Lambda * cycle_time) ^ No_Ersatzteil * Exp(-Anzahl_Systeme * Lambda * cycle_time)) / FACULT(No_Ersatzteil)
        prob = prob + Prob_Teil
        
     Loop
  
  End If
  
  INITIALSPARES = No_Ersatzteil & " @ " & Round(prob, 4) * 100 & "%"
     
End Function

Function Probability(Anzahl_Systeme As Double, Lambda As Double, cycle_time As Double, No_Ersatzteil As Integer)
  
  'Dim Anzahl_Systeme As Double
  
  Dim prob As Double
  Dim Prob_Teil As Double
  Dim Z|fffd|hler1 As Double
    
  'Anzahl_Systeme = Range("No_Of_Vehicles")
   
  prob = 0
  Prob_Teil = 0
  Z|fffd|hler1 = 0
  
  prob = Exp(-Anzahl_Systeme * Lambda * cycle_time)
  
  Do While Z|fffd|hler1 <= No_Ersatzteil

     Z|fffd|hler1 = Z|fffd|hler1 + 1
     Prob_Teil = ((Anzahl_Systeme * Lambda * cycle_time) ^ Z|fffd|hler1 * Exp(-Anzahl_Systeme * Lambda * cycle_time)) / FACULT(Z|fffd|hler1)
     prob = prob + Prob_Teil
     
  Loop
 
  Probability = prob
     
End Function

Function SUMMEWENN2(Struktur_ID As Range, Struktur_Level As Range, Suche_ID As String, Suche_Level As String, Type_SEC As Range, Suche_SEC As String, SummeBereich As Range)

Dim i As Integer
Dim i_max As Integer
Dim Spalten_Kontrolle As Integer
Dim Summe As Double

i_max = Struktur_ID.Rows.Count
Spalten_Kontrolle = Struktur_ID.Columns.Count + Struktur_Level.Columns.Count + SummeBereich.Columns.Count
Summe = 0

If Spalten_Kontrolle <> 3 Then

    SUMMEWENN2 = "#ERROR"

Else
    
    For i = 1 To i_max Step 1
        
        If Struktur_ID(i, 1) = Suche_ID And Struktur_Level(i, 1) = Suche_Level And Type_SEC(i, 1) = Suche_SEC Then
            
            If IsNumeric(SummeBereich(i, 1)) = True Then
                
                Summe = Summe + SummeBereich(i, 1)
                
            End If
            
        End If
        
    Next i
    
    SUMMEWENN2 = Summe
    
End If

End Function

Function PRODUKTWENN(Suche_Bereich As Range, Suche As String, Produkt_Bereich As Range)

Dim i As Integer
Dim i_max As Integer
Dim Spalten_Kontrolle As Integer
Dim Produkt As Double

i_max = Suche_Bereich.Rows.Count
Spalten_Kontrolle = Suche_Bereich.Columns.Count + Produkt_Bereich.Columns.Count
Produkt = 1

If Spalten_Kontrolle <> 2 Then

    PRODUKTWENN = "#ERROR"

Else
    
    For i = 1 To i_max Step 1
        
        If Suche_Bereich(i, 1) = Suche Then
            
            If IsNumeric(Produkt_Bereich(i, 1)) = True Then
                
                Produkt = Produkt * Produkt_Bereich(i, 1)
                
            End If
            
        End If
        
    Next i
    
    PRODUKTWENN = Produkt
    
End If

End Function

Function ZELLFORMEL(ByVal Zelle As Range, Optional International As Boolean)

If International = True Then
    ZELLFORMEL = Zelle.Formula
      Else
    ZELLFORMEL = Zelle.FormulaLocal
End If

End Function
Attribute VB_Name = "Input_Values_Makros"
Option Explicit

Public SW As Long
Dim Schritt As Double
Dim L|fffd|nge As Double

Sub Formeln_und_Formate()

Dim Antwort_Formeln As String
Dim Antwort_Formate As String
Dim Antwort_Zirkel As String
Dim Tabellen_Name As String
Dim i_start As Integer
Dim i_total As Integer
Dim EQT_ID_neu As String
Dim i As Integer

i_start = 8                     ' Zeilennummer ab der die Input Values-Liste starten soll (unter der |fffd|berschrift)
i_total = Range("Structure_ID").Rows.Count
Tabellen_Name = "Input Values"  ' Name der Tabelle

'***************************************************
'Abfrage ob nach Zirkelbez|fffd|gen gesucht werden sollen
'***************************************************

Antwort_Zirkel = MsgBox("Check for circular references within the Structure IDs?", vbYesNo)

If Antwort_Zirkel = vbYes Then
    
    On Error Resume Next
    
    For i = 1 To i_total Step 1
            
        If Range("Structure_ID").Cells(i, 1).Value = "" Then GoTo Next_i
        
        If Range("Structure_ID").Cells(i, 1).Value = Range("Structure_ID").Cells(i, 2).Value Then
            
            EQT_ID_neu = InputBox("Equipment ID number " & Range("Structure_ID").Cells(i, 2).Value & " MUST NOT equal the Structure ID number " & Range("Structure_ID").Cells(i, 1).Value & ". Please change it:", "Enter the new Equipment ID number")
            
            If EQT_ID_neu = "" Then
                        
                Else
                
                Range("Structure_ID").Cells(i, 2).Value = EQT_ID_neu * 1
                
                If Err = 0 Then
                Else
                    MsgBox "Input must be a number. Please run the macro again."
                End If
                
            End If
            
        End If
        
Next_i:
    
    Next i
    
End If

'Application.ScreenUpdating = False
Unprotect_me Tabellen_Name 'hebt den Blattschutz auf

'******************************************
'Abfrage ob Formeln eingef|fffd|gt werden sollen
'******************************************

Antwort_Formeln = MsgBox("Update all formulas in this worksheet (CAUTION: This will erase any entered data below the violet columns)?", vbYesNo)

If Antwort_Formeln = vbYes Then
    
    If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData 'setzt die Filter im Registerblatt auf "0" zur|fffd|ck
    Formeln_zuweisen i_start, Tabellen_Name
    
End If

'******************************************
'Abfrage ob Formate eingef|fffd|gt werden sollen
'******************************************

Antwort_Formate = MsgBox("Reset all formats in this worksheet (CAUTION: This will reset all individual colours)?", vbYesNo)

If Antwort_Formate = vbYes Then

    If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData 'setzt die Filter im Registerblatt auf "0" zur|fffd|ck
    Formate_zuweisen i_start, Tabellen_Name
    
End If

Berechnen

Protect_me Tabellen_Name, "low" 'schaltet den Blattschutz wieder ein

'Application.ScreenUpdating = True

End Sub

Private Sub Formeln_zuweisen(i_start As Integer, Tabellen_Name As String)

Dim Antwort_Preise As Integer
Dim Anzahl_Zeilen As Integer
Dim i As Integer
Dim i_max As Integer
Dim i_total As Integer
Dim safety_check As Double
Dim LOG_Next_Z|fffd|hler As Integer

LOG_Next_Z|fffd|hler = Range("LOG_Next")

SW = 29
L|fffd|nge = 0
Schritt = ProgressForm.Label1.Width / SW
i = 1
ProgressForm.Show 0

'********************************************
'Soll in allen Spalten die Formeln nachtragen
'********************************************

With Application
    .Calculation = xlManual
    .MaxChange = 1
End With

i_total = Range("Structure_ID").Rows.Count + i_start
i_max = Worksheets(Tabellen_Name).Range("A" & i_start & ":A" & i_total).End(xlDown).Row
    
'01 Formel f|fffd|r Structure_Level - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("D4").Copy Worksheets(Tabellen_Name).Range("Structure_Level")
    Range("Structure_Level").ClearFormats
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Structure_Level").Column), Cells(i_total, Range("Structure_Level").Column)).ClearContents
    Formel_Schutz "Structure_Level"
    
    Progress i
    i = i + 1
    
'02 Formel f|fffd|r Structure_Next_Level - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("E4").Copy Worksheets(Tabellen_Name).Range("Structure_Next_Level")
    Range("Structure_Next_Level").ClearFormats
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Structure_Next_Level").Column), Cells(i_total, Range("Structure_Next_Level").Column)).ClearContents
    Formel_Schutz "Structure_Next_Level"
    
    Progress i
    i = i + 1
    
'03 Formel f|fffd|r WBS_Levels_Combined - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("F4").Copy Worksheets(Tabellen_Name).Range("WBS_Levels_Combined")
    Range("WBS_Levels_Combined").ClearFormats
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("WBS_Levels_Combined").Column), Cells(i_total, Range("WBS_Levels_Combined").Column)).ClearContents
    Formel_Schutz "WBS_Levels_Combined"
    
    Progress i
    i = i + 1
    
'04 Formel f|fffd|r Structure_Children - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("G4").Copy Worksheets(Tabellen_Name).Range("Structure_Children")
    Range("Structure_Children").ClearFormats
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Structure_Children").Column), Cells(i_total, Range("Structure_Children").Column)).ClearContents
    Formel_Schutz "Structure_Children"
    
    Progress i
    i = i + 1
    
'05 Formel f|fffd|r Structure_Check - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("H4").Copy Worksheets(Tabellen_Name).Range("Structure_Check")
    Range("Structure_Check").ClearFormats
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Structure_Check").Column), Cells(i_total, Range("Structure_Check").Column)).ClearContents
    Formel_Schutz "Structure_Check"
    
    Progress i
    i = i + 1
    
'06 Formel f|fffd|r Material_On - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("K4").Copy Worksheets(Tabellen_Name).Range("Material_On")
    Range("Material_On").ClearFormats
    Formel_Schutz "Material_On"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Material_On").Column), Cells(i_total, Range("Material_On").Column)).ClearContents
 
    Progress i
    i = i + 1
        
'07 Formel f|fffd|r Labour_On - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("L4").Copy Worksheets(Tabellen_Name).Range("Labour_On")
    Range("Labour_On").ClearFormats
    Formel_Schutz "Labour_On"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Labour_On").Column), Cells(i_total, Range("Labour_On").Column)).ClearContents

    Progress i
    i = i + 1
    
'08 Formel f|fffd|r System_Name - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("V4").Copy Worksheets(Tabellen_Name).Range("System_Name")
    Range("System_Name").ClearFormats
    Formel_Schutz "System_Name"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("System_Name").Column), Cells(i_total, Range("System_Name").Column)).ClearContents

    Progress i
    i = i + 1
    
'09 Formel f|fffd|r Base_FR_SUPP - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AH4").Copy Worksheets(Tabellen_Name).Range("Base_FR_SUPP")
    Range("Base_FR_SUPP").ClearFormats
    Formel_Schutz "Base_FR_SUPP"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Base_FR_SUPP").Column), Cells(i_total, Range("Base_FR_SUPP").Column)).ClearContents

    Progress i
    i = i + 1
    
'10 Formel f|fffd|r Base_FR_MIN - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AI4").Copy Worksheets(Tabellen_Name).Range("Base_FR_MIN")
    Range("Base_FR_MIN").ClearFormats
    Formel_Schutz "Base_FR_MIN"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Base_FR_MIN").Column), Cells(i_total, Range("Base_FR_MIN").Column)).ClearContents

    Progress i
    i = i + 1
    
'11 Formel f|fffd|r Base_FR_NOM - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AJ4").Copy Worksheets(Tabellen_Name).Range("Base_FR_NOM")
    Range("Base_FR_NOM").ClearFormats
    Formel_Schutz "Base_FR_NOM"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Base_FR_NOM").Column), Cells(i_total, Range("Base_FR_NOM").Column)).ClearContents

    Progress i
    i = i + 1
        
'12 Formel f|fffd|r Base_FR_MAX - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AK4").Copy Worksheets(Tabellen_Name).Range("Base_FR_MAX")
    Range("Base_FR_MAX").ClearFormats
    Formel_Schutz "Base_FR_MAX"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Base_FR_MAX").Column), Cells(i_total, Range("Base_FR_MAX").Column)).ClearContents

    Progress i
    i = i + 1
        
'13 Formel f|fffd|r Base_FR_FOI - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AL4").Copy Worksheets(Tabellen_Name).Range("Base_FR_FOI")
    Range("Base_FR_FOI").ClearFormats
    Formel_Schutz "Base_FR_FOI"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Base_FR_FOI").Column), Cells(i_total, Range("Base_FR_FOI").Column)).ClearContents

    Progress i
    i = i + 1
    
'14 Formel f|fffd|r Failurerate_Calc - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AM4").Copy Worksheets(Tabellen_Name).Range("Failurerate_Calc")
    Range("Failurerate_Calc").ClearFormats
    Formel_Schutz "Failurerate_Calc"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Failurerate_Calc").Column), Cells(i_total, Range("Failurerate_Calc").Column)).ClearContents

    Progress i
    i = i + 1
    
'15 Formel f|fffd|r MTBF_Unit - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AN4").Copy Worksheets(Tabellen_Name).Range("MTBF_Unit")
    Range("MTBF_Unit").ClearFormats
    Formel_Schutz "MTBF_Unit"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("MTBF_Unit").Column), Cells(i_total, Range("MTBF_Unit").Column)).ClearContents

    Progress i
    i = i + 1
    
'16 Formel f|fffd|r MTBF_Calc - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AO4").Copy Worksheets(Tabellen_Name).Range("MTBF_Calc")
    Range("MTBF_Calc").ClearFormats
    Formel_Schutz "MTBF_Calc"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("MTBF_Calc").Column), Cells(i_total, Range("MTBF_Calc").Column)).ClearContents

    Progress i
    i = i + 1
    
'17 Formel f|fffd|r MTBF_LCC - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AP4").Copy Worksheets(Tabellen_Name).Range("MTBF_LCC")
    Range("MTBF_LCC").ClearFormats
    Formel_Schutz "MTBF_LCC"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("MTBF_LCC").Column), Cells(i_total, Range("MTBF_LCC").Column)).ClearContents

    Progress i
    i = i + 1
    
'18 Formel f|fffd|r DC_System - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AT4").Copy Worksheets(Tabellen_Name).Range("DC_System")
    Range("DC_System").ClearFormats
    Formel_Schutz "DC_System"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("DC_System").Column), Cells(i_total, Range("DC_System").Column)).ClearContents

    Progress i
    i = i + 1
    
'19 Formel f|fffd|r MTTR - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("AZ4").Copy Worksheets(Tabellen_Name).Range("MTTR")
    Range("MTTR").ClearFormats
    Formel_Schutz "MTTR"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("MTTR").Column), Cells(i_total, Range("MTTR").Column)).ClearContents

    Progress i
    i = i + 1
    
'20 Formel f|fffd|r Tech_MTTR - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BA4").Copy Worksheets(Tabellen_Name).Range("Tech_MTTR")
    Range("Tech_MTTR").ClearFormats
    Formel_Schutz "Tech_MTTR"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Tech_MTTR").Column), Cells(i_total, Range("Tech_MTTR").Column)).ClearContents

    Progress i
    i = i + 1
    
'21 Formel f|fffd|r Failurerate_DC_System - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BB4").Copy Worksheets(Tabellen_Name).Range("Failurerate_DC_System")
    Range("Failurerate_DC_System").ClearFormats
    Formel_Schutz "Failurerate_DC_System"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Failurerate_DC_System").Column), Cells(i_total, Range("Failurerate_DC_System").Column)).ClearContents

    Progress i
    i = i + 1
    
'22 Formel f|fffd|r weighted_MTTR_Rate - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BC4").Copy Worksheets(Tabellen_Name).Range("weighted_MTTR_Rate")
    Range("weighted_MTTR_Rate").ClearFormats
    Formel_Schutz "weighted_MTTR_Rate"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("weighted_MTTR_Rate").Column), Cells(i_total, Range("weighted_MTTR_Rate").Column)).ClearContents

    Progress i
    i = i + 1
    
'23 Formel f|fffd|r weighted_Tech_MTTR_Rate - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BD4").Copy Worksheets(Tabellen_Name).Range("weighted_Tech_MTTR_Rate")
    Range("weighted_Tech_MTTR_Rate").ClearFormats
    Formel_Schutz "weighted_Tech_MTTR_Rate"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("weighted_Tech_MTTR_Rate").Column), Cells(i_total, Range("weighted_Tech_MTTR_Rate").Column)).ClearContents

    Progress i
    i = i + 1
    
'24 Formel f|fffd|r Event_Time - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BE4").Copy Worksheets(Tabellen_Name).Range("Event_Time")
    Range("Event_Time").ClearFormats
    Formel_Schutz "Event_Time"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Event_Time").Column), Cells(i_total, Range("Event_Time").Column)).ClearContents

    Progress i
    i = i + 1
    
'25 Formel f|fffd|r QPS - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BH4").Copy Worksheets(Tabellen_Name).Range("QPS")
    Range("QPS").ClearFormats
    Formel_Schutz "QPS"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("QPS").Column), Cells(i_total, Range("QPS").Column)).ClearContents

    Progress i
    i = i + 1
    
'26 Formel f|fffd|r QPS_all - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("BI4:BQ4").Copy Worksheets(Tabellen_Name).Range("QPS_all")
    Range("QPS_all").ClearFormats
    Formel_Schutz "QPS_all"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("QPS_all").Column), Cells(i_total, Range("QPS_all").Column + Range("QPS_all").Columns.Count - 1)).ClearContents

    Progress i
    i = i + 1
          
'27 Formel f|fffd|r Event_Price - Spalte einf|fffd|gen
    
    Worksheets(Tabellen_Name).Range("CG4").Copy Worksheets(Tabellen_Name).Range("Event_Price")
    Range("Event_Price").ClearFormats
    Formel_Schutz "Event_Price"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("Event_Price").Column), Cells(i_total, Range("Event_Price").Column)).ClearContents

    Progress i
    i = i + 1
    
'28 F|fffd|gt die Formeln in den 1 Block der LCC Costs - Spalten ein

    Worksheets(Tabellen_Name).Range("CT4:DX4").Copy Worksheets(Tabellen_Name).Range("LCC_Formulas1")
    Range("LCC_Formulas1").ClearFormats
    Formel_Schutz "LCC_Formulas1"
    Worksheets(Tabellen_Name).Range(Cells(i_max + 1, Range("LCC_Formulas1").Column), Cells(i_total, Range("LCC_Formulas1").Column + Range("LCC_Formulas1").Columns.Count - 1)).ClearContents

    Progress i
    i = i + 1
    
'29 F|fffd|gt die Formeln in den 2.-4. Block der LCC Costs - Spalten ein
    
    Tabelle1.Calc_On

    Progress i
    
ProgressForm.Hide
    
'******************************************************************
'*   Formeln einf|fffd|gen abgeschlossen                               *
'******************************************************************

Berechnen

End Sub

Private Sub Formate_zuweisen(i_start As Integer, Tabellen_Name As String)

'****************************************
'Formatiert die Strukturliste automatisch
'****************************************

Dim i As Integer
Dim i_max As Integer
Dim i_total As Integer

i_total = Range("Structure_ID").Rows.Count + i_start
i_max = Worksheets(Tabellen_Name).Range("A" & i_start & ":A" & i_total).End(xlDown).Row - i_start + 1

Worksheets(Tabellen_Name).Rows("1:6").EntireRow.Hidden = True

Worksheets(Tabellen_Name).Columns("H:J").FormatConditions.Delete

Worksheets(Tabellen_Name).Cells(i_total, 1).Value = ""

SW = i_max
Schritt = ProgressForm.Label1.Width / SW
L|fffd|nge = 0
ProgressForm.Show 0

For i = 1 To i_max Step 1
    
'************************
'Formatiert die EQT Zeile
'************************
        
    If Range("Structure_Level").Cells(i, 1).Value = "EQT" Then
        
        Worksheets(Tabellen_Name).Rows("1:1").Copy
        Range("Structure_Level").EntireRow(i).PasteSpecial xlFormats
        
    End If

'************************
'Formatiert die LRU Zeile
'************************

    If Range("Structure_Level").Cells(i, 1).Value = "" Or Range("Structure_Level").Cells(i, 1).Value = "LRU" Then
        
        Worksheets(Tabellen_Name).Rows("2:2").Copy
        Range("Structure_Level").EntireRow(i).PasteSpecial xlFormats
        
    End If

'************************
'Formatiert die SRU Zeile
'************************

    If Range("Structure_Level").Cells(i, 1).Value = "SRU" Then
        
        Worksheets(Tabellen_Name).Rows("3:3").Copy
        Range("Structure_Level").EntireRow(i).PasteSpecial xlFormats
        
    End If

Progress i

Next i

Worksheets(Tabellen_Name).Range("Structure_ID").EntireRow.Hidden = False

'*******************************************************
'Bedingte Formatierung f|fffd|r die Spalte Material_On_manual
'*******************************************************

Range("Material_On_manual").FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=1"
Range("Material_On_manual").FormatConditions(Range("Material_On_manual").FormatConditions.Count).SetFirstPriority
With Range("Material_On_manual").FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .Color = 5296274
    .TintAndShade = 0
End With
Range("Material_On_manual").FormatConditions(1).StopIfTrue = False

Range("Material_On_manual").FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=0"
Range("Material_On_manual").FormatConditions(Range("Material_On_manual").FormatConditions.Count).SetFirstPriority
With Range("Material_On_manual").FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .Color = 49407
    .TintAndShade = 0
End With
Range("Material_On_manual").FormatConditions(1).StopIfTrue = False

'*****************************************************
'Bedingte Formatierung f|fffd|r die Spalte Labour_On_manual
'*****************************************************

Range("Labour_On_manual").FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=1"
Range("Labour_On_manual").FormatConditions(Range("Labour_On_manual").FormatConditions.Count).SetFirstPriority
With Range("Labour_On_manual").FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .Color = 5296274
    .TintAndShade = 0
End With
Range("Labour_On_manual").FormatConditions(1).StopIfTrue = False

Range("Labour_On_manual").FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=0"
Range("Labour_On_manual").FormatConditions(Range("Labour_On_manual").FormatConditions.Count).SetFirstPriority
With Range("Labour_On_manual").FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .Color = 49407
    .TintAndShade = 0
End With
Range("Labour_On_manual").FormatConditions(1).StopIfTrue = False

'******************************************************
'Bedingte Formatierung f|fffd|r die Spalte "Structure_Check"
'******************************************************

Range("Structure_Check").FormatConditions.Add Type:=xlCellValue, Operator:=xlNotEqual, Formula1:="="""""
Range("Structure_Check").FormatConditions(Range("Structure_Check").FormatConditions.Count).SetFirstPriority
With Range("Structure_Check").FormatConditions(1).Font
    .ThemeColor = xlThemeColorDark1
    .TintAndShade = 0
End With
With Range("Structure_Check").FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .Color = 255
    .TintAndShade = 0
End With
Range("Structure_Check").FormatConditions(1).StopIfTrue = False

Worksheets(Tabellen_Name).Cells(i_total, 1).Value = "CALCULATION ENDS IN THE ROW ABOVE, PLEASE ADD ROWS ONLY ABOVE!"
With Worksheets(Tabellen_Name).Rows(i_total).Font
    .Bold = True
    .Size = 22
    .ThemeColor = xlThemeColorDark1
    .TintAndShade = 0
End With
With Worksheets(Tabellen_Name).Rows(i_total).Interior
    .Pattern = xlSolid
    .PatternColorIndex = xlAutomatic
    .Color = 255
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
With Worksheets(Tabellen_Name).Rows(i_total)
    .HorizontalAlignment = xlGeneral
    .VerticalAlignment = xlCenter
    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    .Borders(xlEdgeLeft).LineStyle = xlNone
    .Borders(xlEdgeBottom).LineStyle = xlNone
    .Borders(xlEdgeRight).LineStyle = xlNone
    .Borders(xlInsideVertical).LineStyle = xlNone
    .Borders(xlInsideHorizontal).LineStyle = xlNone
    .EntireRow.AutoFit
End With

If Worksheets(Tabellen_Name).Rows(i_total).OutlineLevel > 1 Then Worksheets(Tabellen_Name).Rows(i_total).Ungroup

Worksheets(Tabellen_Name).Rows(i_start & ":" & i_total).Locked = False

ProgressForm.Hide

End Sub

Sub Berechnen()
      
    With Application
        .Calculation = xlAutomatic
        .MaxChange = 1
    End With
    
    With Application
        .Calculation = xlManual
        .MaxChange = 1
    End With
    
    Worksheets("Reliability Summary").Range("$B$10:$X$479").AutoFilter Field:=18
    Worksheets("Reliability Summary").Range("$B$10:$X$479").AutoFilter Field:=18, Criteria1:="<>", Operator:=xlAnd
    Worksheets("Cost Summary").Range("$B$14:$AF$483").AutoFilter Field:=15
    Worksheets("Cost Summary").Range("$B$14:$AF$483").AutoFilter Field:=15, Criteria1:="<>0", Operator:=xlAnd
    
   'Version_Check
    
End Sub

Private Sub Pivot_Refresh(wks As Worksheet)

Dim pt As PivotTable

For Each pt In wks.PivotTables
    pt.RefreshTable
Next pt

End Sub

Sub Calculate_Everything()

Worksheets("Input Values").Activate
Formeln_und_Formate
Application.ScreenUpdating = True

Worksheets("Dashboard").Activate
Price_Range
Update_A_R
Update_Driver_Pivot
Application.ScreenUpdating = True

Worksheets("Costs per year").Activate
Costs_per_year
Application.ScreenUpdating = True

Worksheets("Labour per year").Activate
Labour_per_year
Application.ScreenUpdating = True

Worksheets("Material Planning").Activate
Material_Planning
Application.ScreenUpdating = True

'Bid_Export_erstellen

End Sub

Private Sub Progress(i As Integer)

L|fffd|nge = L|fffd|nge + Schritt
ProgressForm.Label2.Width = L|fffd|nge
ProgressForm.Label3.Caption = Format(i / SW, "0 %")

DoEvents

End Sub

Attribute VB_Name = "Maintenance_Planning"
Sub Update_Maint_Plan()

Dim Tabellen_Name As String
Dim Tab_Name_Additional_Pivot As String
Dim Tab_Name_Additional_Pivot2 As String
Dim Pivot_Name As String
Dim Antwort_Update_Abfrage As String

Tabellen_Name = "Maintenance Plan & Overview"
Tab_Name_Additional_Pivot = "Material Planning"
Tab_Name_Additional_Pivot2 = "Dashboard"

Pivot_Name = "Maintenance_Plan_Config"

Antwort_Update_Abfrage = MsgBox("Update the list of maintenance intervals and clear the current configuration?", vbYesNo)

If Antwort_Update_Abfrage = vbNo Then Exit Sub

Unprotect_me Tabellen_Name
Unprotect_me Tab_Name_Additional_Pivot
Unprotect_me Tab_Name_Additional_Pivot2

Worksheets(Tabellen_Name).Range("F3:H3").Copy
Worksheets(Tabellen_Name).Range("F7:H36").PasteSpecial xlFormulas

Worksheets(Tabellen_Name).Range("J8:J36,K9:K36,L10:L36,M11:M36,N12:N36,O13:O36,P14:P36,Q15:Q36,R16:R36,S17:S36,T18:T36,U19:U36,V20:V36,W21:W36,X22:X36,Y23:Y36,Z24:Z36,AA25:AA36,AB26:AB36,AC27:AC36,AD28:AD36,AE29:AE36,AF30:AF36,AG31:AG36,AH32:AH36,AI33:AI36,AJ34:AJ36,AK35:AK36,AL36").ClearContents

If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData

If Application.WorksheetFunction.CountIf(Range("Labour_On"), 0) > 0 Then
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).RefreshTable
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc").ClearAllFilters
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc")
        .PivotItems("0").Visible = False
        .PivotItems("1").Visible = True
        .PivotItems("(blank)").Visible = False
    End With
    
Else

    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).RefreshTable
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc").ClearAllFilters
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc")
        '.PivotItems("0").Visible = False
        .PivotItems("1").Visible = True
        .PivotItems("(blank)").Visible = False
    End With
    
End If

If Range("Corrective_per_km") = 0 Then
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = False
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").ClearAllFilters
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").CurrentPage = "(All)"
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = True
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C")
        .PivotItems("(blank)").Visible = False
    End With
    
Else
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = False
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").ClearAllFilters
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").CurrentPage = "(All)"
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = True
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C")
        .PivotItems("C").Visible = False
        .PivotItems("(blank)").Visible = False
    End With
    
End If


Berechnen

Worksheets(Tabellen_Name).Range("F7:H36").Value = Worksheets(Tabellen_Name).Range("F7:H36").Value

Protect_me Tab_Name_Additional_Pivot, "low"
Protect_me Tab_Name_Additional_Pivot2, "medium"
Protect_me Tabellen_Name, "medium"

End Sub

Sub Tasks_Suchen()

On Error Resume Next

Dim i As Integer
Dim i_max As Integer
Dim i_z|fffd|hler_Check As Integer

Dim i_start_Check As Integer
Dim Tabellen_Name As String
Dim i_ende As Integer

i_start_Check = 41

Tabellen_Name = "Maintenance Plan & Overview"

i_max = Range("Structure_ID_Number").End(xlDown).Row    'ermittelt die Anzahl an Zeilen in den Input Values

i_z|fffd|hler_Check = i_start_Check

Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA20000").Delete

Berechnen

'********************************************************************************
'* Sucht nach Teilen mit Material_On=1 & Structure_Level<>"EQT" und wenn der    *
'* Ausdruck gefunden wurde, wird die Struktur_ID in die andere Tabelle kopiert. *
'********************************************************************************

For i_config = 1 To 30 Step 1
    
    If Range("Maint_Plan_Chosen_Config").Cells(i_config, 2) = "" Then GoTo Next_i_config
        
        For i = 1 To i_max Step 1
            
            If Range("Labour_On").Cells(i, 1) = 1 And Range("Structure_Level").Cells(i, 1) <> "EQT" And Range("QPS").Cells(i, 1) <> 0 And Range("MTBF_Unit").Cells(i, 1) = Range("Maint_Plan_Chosen_Config").Cells(i_config, 4) And Range("MTBF_Calc").Cells(i, 1) = Range("Maint_Plan_Chosen_Config").Cells(i_config, 3) Then
                
                Range("Structure_ID_Number").Cells(i, 1).Copy Worksheets(Tabellen_Name).Cells(i_z|fffd|hler_Check, 53)   'letzter Cell-Verweis bezieht sich auf die Spalte in der die Structure ID eingef|fffd|gt werden soll
                
                i_z|fffd|hler_Check = i_z|fffd|hler_Check + 1
                
            End If
            
        Next i
        
Next_i_config:

Next i_config

i_ende = Worksheets(Tabellen_Name).Range("BA" & i_start_Check & ":BA20000").End(xlDown).Row  'ermittelt die Anzahl an Zeilen in der CBOM

If Err <> 0 Then i_ende = i_start_Check

Worksheets(Tabellen_Name).Range("AP3:AY3").Copy Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":AY" & i_ende)
Worksheets(Tabellen_Name).Range("BB3:CA3").Copy Worksheets(Tabellen_Name).Range("BB" & i_start_Check & ":CA" & i_ende)

Berechnen

'**********************************
' Wandelt die Formeln in Werte um *
'**********************************

Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA" & i_ende).Value = Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA" & i_ende).Value
Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA" & i_ende).Locked = False
Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA" & i_ende).FormulaHidden = False
Worksheets(Tabellen_Name).Range("AP" & i_start_Check & ":CA" & i_ende).Sort Key1:=Worksheets(Tabellen_Name).Range("BA" & i_start_Check), Order1:=xlAscending

End Sub

Sub Checklisten_erstellen()

On Error Resume Next

Dim i_start As Integer
Dim i_ende As Integer
Dim i_module_start As Integer
Dim i_module_ende As Integer
Dim Tabellen_Name As String
Dim Zeile_Hauptsystem As Integer
Dim Zeile_Untersystem As Integer
Dim LOG_Next_Z|fffd|hler As Integer

If Range("Maint_Plan_Chosen").Value = "" Then
    
    MsgBox ("No maintenance interval chosen!")
    Exit Sub
    
End If

Unprotect_me Tabellen_Name

Tasks_Suchen   'als erster Schritt werden alle Tasks zu einer Revision aus den "Input Values" geholt

Tabellen_Name = "Maintenance Plan & Overview"

Zeile_Hauptsystem = 1
Zeile_Untersystem = 2

i_start = 41
i_ende = Worksheets(Tabellen_Name).Range("BA" & i_start & ":BA20000").End(xlDown).Row + 1 'ermittelt die Anzahl an Zeilen in der CBOM

If Err <> 0 Then i_ende = i_start + 1

LOG_Next_Z|fffd|hler = Range("LOG_Next")

i = i_start

Do While i < i_ende
    
    If Worksheets(Tabellen_Name).Cells(i, 54).Value <> "" Then   'F|fffd|gt die |fffd|berschrift des Fahrzeuges ein
        
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Insert Shift:=xlDown
        
        Worksheets(Tabellen_Name).Range(Cells(Zeile_Hauptsystem, 42), Cells(Zeile_Hauptsystem, 79)).Copy Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79))
        
        Worksheets(Tabellen_Name).Cells(i + 1, 54).Copy
        Worksheets(Tabellen_Name).Cells(i, 42).PasteSpecial xlValues
        
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Calculate
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value = Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value
        
        If Range("Maint_Plan_Custom_Structure") = "Yes" Then Worksheets(Tabellen_Name).Cells(i, 42).ClearContents
        
        i = i + 1
        i_ende = i_ende + 1
        
    End If
        
    If Worksheets(Tabellen_Name).Cells(i, 55).Value <> "" Then   'F|fffd|gt die |fffd|berschrift des Hauptsystems ein
        
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Insert Shift:=xlDown
        
        Worksheets(Tabellen_Name).Range(Cells(Zeile_Hauptsystem, 42), Cells(Zeile_Hauptsystem, 79)).Copy Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79))
        
        Worksheets(Tabellen_Name).Cells(i + 1, 55).Copy
        Worksheets(Tabellen_Name).Cells(i, 42).PasteSpecial xlValues
                
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Calculate
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value = Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value
        
        If Range("Maint_Plan_Custom_Structure") = "Yes" Then Worksheets(Tabellen_Name).Cells(i, 42).ClearContents
        
        i = i + 1
        i_ende = i_ende + 1
        
    End If
    
    If Worksheets(Tabellen_Name).Cells(i, 56).Value <> "" Then   'F|fffd|gt die |fffd|berschrift des Untersystems ein
        
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Insert Shift:=xlDown

        Worksheets(Tabellen_Name).Range(Cells(Zeile_Untersystem, 42), Cells(Zeile_Untersystem, 79)).Copy Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79))
        
        Worksheets(Tabellen_Name).Cells(i + 1, 56).Copy
        Worksheets(Tabellen_Name).Cells(i, 42).PasteSpecial xlValues
                
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Calculate
        Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value = Worksheets(Tabellen_Name).Range(Cells(i, 42), Cells(i, 79)).Value
        
        If Range("Maint_Plan_Custom_Structure") = "Yes" Then Worksheets(Tabellen_Name).Cells(i, 42).ClearContents
        
        i = i + 1
        i_ende = i_ende + 1
        
    End If
    
    i_module_start = i
    
    If Worksheets(Tabellen_Name).Cells(i_module_start, 70).Value > 1 Then    '|fffd|berpr|fffd|ft ob die Anzahl der Module > 1 ist, SpaltenID f|fffd|r
        
        i_module_ende = i_module_start + Cells(i, 70) - 1
        
        For ii = i_module_start To i_module_ende - 1 Step 1 'F|fffd|gt neue Zeilen ein je nach Anzahl an Modulen und kopiert auch die jeweiligen Zeileninhalt von oben runter
            
            Worksheets(Tabellen_Name).Range(Cells(ii + 1, 42), Cells(ii + 1, 79)).Insert Shift:=xlDown
            
            Worksheets(Tabellen_Name).Range(Cells(ii, 42), Cells(ii, 52)).Copy
            Worksheets(Tabellen_Name).Range(Cells(ii + 1, 42), Cells(ii + 1, 52)).PasteSpecial xlFormats
            
            Worksheets(Tabellen_Name).Range(Cells(ii, 54), Cells(ii, 79)).Copy Worksheets(Tabellen_Name).Range(Cells(ii + 1, 54), Cells(ii + 1, 79))
            
            i_ende = i_ende + 1
            i = i + 1
            
        Next ii
        
        Worksheets(Tabellen_Name).Range(Cells(i_module_start, 42), Cells(i_module_ende, 42)).Select   'Verkn|fffd|pft die Zellen der Struktur Spalte
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        Selection.Merge
        
        Worksheets(Tabellen_Name).Range(Cells(i_module_start, 44), Cells(i_module_ende, 44)).Select   'Verkn|fffd|pft die Zellen der Material notwendig Spalte
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        Selection.Merge
        
        Worksheets(Tabellen_Name).Range(Cells(i_module_start, 45), Cells(i_module_ende, 45)).Select   'Verkn|fffd|pft die Zellen der User Spalte 1 Spalte
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        Selection.Merge
        
        Worksheets(Tabellen_Name).Range(Cells(i_module_start, 47), Cells(i_module_ende, 47)).Select   'Verkn|fffd|pft die Zellen der Task description Spalte
        With Selection
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = True
            .IndentLevel = 1
            .ShrinkToFit = True
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        Selection.Merge
        
        Worksheets(Tabellen_Name).Range(Cells(i_module_start, 48), Cells(i_module_ende, 48)).Select   'Verkn|fffd|pft die Zellen der User Spalte 2 Spalte
        With Selection
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = True
            .IndentLevel = 1
            .ShrinkToFit = True
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        Selection.Merge
    
    End If
            
    r = i_module_start
    
    For C = 0 To 8 Step 1
        
        If Cells(r, 61 + C) <> "" Then
            
            Worksheets(Tabellen_Name).Cells(r, 43).Value = Worksheets(Tabellen_Name).Cells(i_start - 1, 61 + C).Value   'F|fffd|gt den Modulnamen an
            Worksheets(Tabellen_Name).Cells(r, 46).Value = Worksheets(Tabellen_Name).Cells(r, 61 + C).Value   ' F|fffd|gt die Qty ein
            r = r + 1
                
        End If
            
    Next C
    
    i = i + 1
    
Loop

Berechnen

Worksheets(Tabellen_Name).Range("AW6").Value = Date & " Version: " & Range("Maint_Plan_Version").Value

Worksheets("LOG").Cells(LOG_Next_Z|fffd|hler, 1).Value = Range("Maint_Plan_Chosen").Value
Worksheets("LOG").Cells(LOG_Next_Z|fffd|hler, 2).Value = "Update of the maintenance checklist."
Worksheets("LOG").Cells(LOG_Next_Z|fffd|hler, 3).Value = "Version " & Range("Maint_Plan_Version").Value
Worksheets("LOG").Cells(LOG_Next_Z|fffd|hler, 4).Value = Now()
Worksheets("LOG").Cells(LOG_Next_Z|fffd|hler, 5).Value = Environ("USERNAME")

Worksheets(Tabellen_Name).PageSetup.PrintArea = "$AP$6:$AY$" & i_ende

Protect_me Tabellen_Name, "medium"

End Sub


Attribute VB_Name = "Modul1"
'1. Synch = Daten aus Input Data holen
'2. Up = Zeile um 1 nach oben verschieben
'3. Down = Zeile um 1 nach unten verschieben
'4. Cut = Matrix auf eingabebereich begrenzen
Option Explicit
Option Base 1

Sub Up()
'- Variablendeklaration
Dim varActiveCellIntervall As Variant
Dim varActiveCellUnit As Variant
Dim varActiveCellDescription As Variant

Dim varAboveCellIntervall As Variant
Dim varAboveCellUnit As Variant
Dim varAboveCellDescription As Variant

Dim lngMatrixRowTarget As Long                  'Zeilenvariable

'- Konstanten vorbesetzen
Const lngFirstColTargetConst As Long = 2        'erste Spalte der Ziel-Matrix (B)
Const lngFirstRowTargetConst As Long = 7        'erste Zeile der Ziel-Matrix

' Pr|fffd|fen ob m|fffd|glich

If ActiveCell.Row <= lngFirstRowTargetConst Then
   MsgBox "The selected line cannot be moved further up!", vbInformation, "Shifting not possible!"
   Exit Sub
End If

If ActiveCell.Value = "" Then
   MsgBox "A shift is not possible because the current cell does not contain any data.", vbInformation, "Shifting not possible!"
   Exit Sub
End If

' Zeile ermitteln
lngMatrixRowTarget = ActiveCell.Row

' Zeile markieren
Range(Cells(ActiveCell.Row, 2), Cells(ActiveCell.Row, 4)).Select

' Obere Zeile speichern
varAboveCellIntervall = Cells(ActiveCell.Row - 1, lngFirstColTargetConst).Value
varAboveCellUnit = Cells(ActiveCell.Row - 1, lngFirstColTargetConst + 1).Value
varAboveCellDescription = Cells(ActiveCell.Row - 1, lngFirstColTargetConst + 2).Value

' Aktuelle zeile speichern
varActiveCellIntervall = Cells(ActiveCell.Row, lngFirstColTargetConst).Value
varActiveCellUnit = Cells(ActiveCell.Row, lngFirstColTargetConst + 1).Value
varActiveCellDescription = Cells(ActiveCell.Row, lngFirstColTargetConst + 2).Value

' markierte Zeile um einen nach oben setzen
Cells(ActiveCell.Row - 1, lngFirstColTargetConst).Value = varActiveCellIntervall
Cells(ActiveCell.Row - 1, lngFirstColTargetConst + 1).Value = varActiveCellUnit
Cells(ActiveCell.Row - 1, lngFirstColTargetConst + 2).Value = varActiveCellDescription

' gespeicherte Zeile darunter setzenn
Cells(ActiveCell.Row, lngFirstColTargetConst).Value = varAboveCellIntervall
Cells(ActiveCell.Row, lngFirstColTargetConst + 1).Value = varAboveCellUnit
Cells(ActiveCell.Row, lngFirstColTargetConst + 2).Value = varAboveCellDescription

' Zeile markieren
Range(Cells(ActiveCell.Row - 1, 2), Cells(ActiveCell.Row - 1, 4)).Select

End Sub

Sub Down()
'- Variablendeklaration
Dim varActiveCellIntervall As Variant
Dim varActiveCellUnit As Variant
Dim varActiveCellDescription As Variant

Dim varAboveCellIntervall As Variant
Dim varAboveCellUnit As Variant
Dim varAboveCellDescription As Variant

Dim lngMatrixRowTarget As Long                  'Zeilenvariable

'- Konstanten vorbesetzen
Const lngFirstColTargetConst As Long = 2        'erste Spalte der Ziel-Matrix (B)
Const lngFirstRowTargetConst As Long = 7        'erste Zeile der Ziel-Matrix

' Pr|fffd|fen ob m|fffd|glich

If Cells(ActiveCell.Row + 1, 3) = "" Then
   MsgBox "Last Row cannot move down.", vbInformation, "Shifting not possible!"
   Exit Sub
End If

If ActiveCell.Value = "" Then
   MsgBox "A shift is not possible because the current cell does not contain any data.", vbInformation, "Shifting not possible!"
   Exit Sub
End If

' Zeile ermitteln
lngMatrixRowTarget = ActiveCell.Row

' Zeile markieren
Range(Cells(ActiveCell.Row, 2), Cells(ActiveCell.Row, 4)).Select

' Obere Zeile speichern
varAboveCellIntervall = Cells(ActiveCell.Row + 1, lngFirstColTargetConst).Value
varAboveCellUnit = Cells(ActiveCell.Row + 1, lngFirstColTargetConst + 1).Value
varAboveCellDescription = Cells(ActiveCell.Row + 1, lngFirstColTargetConst + 2).Value

' Aktuelle zeile speichern
varActiveCellIntervall = Cells(ActiveCell.Row, lngFirstColTargetConst).Value
varActiveCellUnit = Cells(ActiveCell.Row, lngFirstColTargetConst + 1).Value
varActiveCellDescription = Cells(ActiveCell.Row, lngFirstColTargetConst + 2).Value

' markierte Zeile um einen nach oben setzen
Cells(ActiveCell.Row + 1, lngFirstColTargetConst).Value = varActiveCellIntervall
Cells(ActiveCell.Row + 1, lngFirstColTargetConst + 1).Value = varActiveCellUnit
Cells(ActiveCell.Row + 1, lngFirstColTargetConst + 2).Value = varActiveCellDescription

' gespeicherte Zeile darunter setzenn
Cells(ActiveCell.Row, lngFirstColTargetConst).Value = varAboveCellIntervall
Cells(ActiveCell.Row, lngFirstColTargetConst + 1).Value = varAboveCellUnit
Cells(ActiveCell.Row, lngFirstColTargetConst + 2).Value = varAboveCellDescription

' Zeile markieren
Range(Cells(ActiveCell.Row + 1, 2), Cells(ActiveCell.Row + 1, 4)).Select

End Sub

Sub Synch()
Dim lngMatrixRowSource As Long
Dim strResultArray() As Variant
Dim i As Long

'- Konstanten vorbesetzen
Const lngFirstColTargetConst As Long = 2       'erste Spalte der Ziel-Matrix (B)
Const lngFirstRowTargetConst As Long = 7       'erste Zeile der Ziel-Matrix
'- Variablendeklaration

Const lngFirstRowSourceConst As Long = 11      'Quelle (Project Data) Zeile 11
Const lngFirstColSourceConst As Long = 16      'Quelle (Project Data) Spalte 16 (P)

' Ausgeblendete Zellen einblenden
Cells.Select
Selection.EntireColumn.Hidden = False
Selection.EntireRow.Hidden = False

' Matrix leeren
Call DeleteMatrix

'Variablen vorbelegen
i = 1
lngMatrixRowSource = lngFirstRowSourceConst

'Array f|fffd|llen
While Worksheets("Project Data").Cells(lngMatrixRowSource, lngFirstColSourceConst).Value <> ""
      'Cells(Zeile, Spalte)
      ReDim Preserve strResultArray(1 To 3, 1 To i)
      strResultArray(1, i) = Worksheets("Project Data").Cells(lngMatrixRowSource, lngFirstColSourceConst)
      strResultArray(2, i) = Worksheets("Project Data").Cells(lngMatrixRowSource, lngFirstColSourceConst + 1)
      strResultArray(3, i) = Worksheets("Project Data").Cells(lngMatrixRowSource, lngFirstColSourceConst + 2)
      lngMatrixRowSource = lngMatrixRowSource + 1
      i = i + 1
Wend

'Array transponieren (wegen Zeile, Spalte --> gef|fffd|llt wurde jedoch Spalte, Zeile wegen des Redims
strResultArray = Application.WorksheetFunction.Transpose(strResultArray)
Worksheets("Maintenance Interval").Range(Cells(lngFirstRowTargetConst, lngFirstColTargetConst), Cells(lngFirstRowTargetConst + UBound(strResultArray) - 1, lngFirstColTargetConst + 2)).Value = strResultArray

'Cursor setzen
Cells(lngFirstRowTargetConst, lngFirstColTargetConst).Select

End Sub

Sub DeleteMatrix()
'- Variablendeklaration
'Dim lngMatrixRowTarget As Long            'Zeilenvariable

'- Konstanten vorbesetzen
Const lngFirstColTargetConst As Long = 2       'erste Spalte der Ziel-Matrix (B)
Const lngFirstRowTargetConst As Long = 7       'erste Zeile der Ziel-Matrix


If MsgBox("Do you really want to delete the Mainenance Interval Plan?", vbQuestion + vbYesNo, "Delete?") = vbYes Then
   'lngMatrixRowTarget = lngFirstRowTargetConst

   'While Worksheets("Maintenance Interval").Cells(lngMatrixRowTarget, lngFirstColTargetConst + 2).Value <> ""
   '      'Cells(Zeile, Spalte)
   '      Worksheets("Maintenance Interval").Cells(lngMatrixRowTarget, lngFirstColTargetConst).Value = ""
   '      Worksheets("Maintenance Interval").Cells(lngMatrixRowTarget, lngFirstColTargetConst + 1).Value = ""
   '      Worksheets("Maintenance Interval").Cells(lngMatrixRowTarget, lngFirstColTargetConst + 2).Value = ""
   '      lngMatrixRowTarget = lngMatrixRowTarget + 1
   'Wend
    
   Range("B7:D36").Select
   Selection.ClearContents
    
   Range("E8,E9:F9,E10:G10,E11:H11,E12:I12,E13:J13,E14:K14,E15:L15,E16:M16,E17:N17,E18:O18,E19:P19,E20:Q20,E21:R21,E22:S22,E23:T23,E24:U24,E25:V25,E26:W26,E27:X27,E28:Y28,E29:Z29,E30:AA30,E31:AB31,E32:AC32,E33:AD33,E34:AE34,E35:AF35,E36:AG36").Select
   Selection.ClearContents
End If

Cells(lngFirstRowTargetConst, lngFirstColTargetConst).Select

End Sub

Sub Cut()
'- Variablendeklaration
Dim lngMatrixRowTarget As Long              'Zeilenvariable
Dim lngMatrixColTarget As Long              'Spaltenweise

'- Konstanten vorbesetzen
Const lngFirstColMatrixConst As Long = 5        ' erste Spalte der Matrix (E)
Const lngFirstRowMatrixConst As Long = 7        ' erste Zeile der Matrix
Const lngMaxColMatrixConst As Long = 34         ' letzte Spalte der Matrix
Const lngMaxRowMatrixConst As Long = 36         ' letzte Zeile der Matrix

' pr|fffd|fen ob m|fffd|glich
    ' nicht m|fffd|glich bei leerer Matrix
    If Cells(lngFirstRowMatrixConst, 4).Value = "" Then
       MsgBox "The matrix does not contain any data.", vbInformation, "Hiding not possible!"
       Exit Sub
    End If
    
    ' nicht m|fffd|glich bei voller Matrix
    If Cells(lngFirstRowMatrixConst + 29, 4).Value <> "" Then
       MsgBox "The matrix has no empty rows.", vbInformation, "Hiding not possible!"
       Exit Sub
    End If
        
' Zeilen ausblenden
    ' erste freie Zeile ermitteln
        lngMatrixRowTarget = lngFirstRowMatrixConst
        While Worksheets("Maintenance Interval").Cells(lngMatrixRowTarget, 2).Value <> ""
              lngMatrixRowTarget = lngMatrixRowTarget + 1
        Wend

    ' Zeilen selectieren und ausblenden
        Rows(lngMatrixRowTarget & ":36").Select
        Selection.EntireRow.Hidden = True
  
' Spalten ausblenden
    ' gwlbe |fffd|berschrift Verbindung aufheben sonst Fehler bei Spalte ausblenden
        Range("B4:AH4").Select
        Selection.MergeCells = False

    ' erste freie Spalte ermitteln
        lngMatrixColTarget = lngMatrixRowTarget - 2

    ' Spalten selectieren und ausblenden
        'Columns(lngMatrixColTarget & ":34").Select
        Range(Columns(lngMatrixColTarget), Columns(34)).Select
        Selection.EntireColumn.Hidden = True
        
    ' gwlbe |fffd|berschrift Verbindung wieder herstellen
        Range("B4:AH4").Select
        Selection.MergeCells = True
    
    Cells(lngFirstRowMatrixConst, 2).Select

End Sub


Sub ios()
Worksheets("Input Values").Unprotect Password:="Init123!"
    
End Sub

Attribute VB_Name = "Modul10"
Sub Schaltfl|fffd|che5_Klicken()
Dim lngMatrixRowSource As Long
Dim strResultArray() As Variant
Dim i As Long

'- Konstanten vorbesetzen
Const lngFirstColTargetConst As Long = 2       'erste Spalte der Ziel-Matrix (B)
Const lngFirstRowTargetConst As Long = 19      'erste Zeile der Ziel-Matrix
'- Variablendeklaration

Const lngFirstColSourceConst As Long = 2      'Quelle (Project Data) Spalte 16 (P)
Const lngFirstRowSourceConst As Long = 8      'Quelle (Project Data) Zeile 11

Application.ScreenUpdating = False

' Ausgeblendete Zellen einblenden
Cells.Select
Selection.EntireColumn.Hidden = False
Selection.EntireRow.Hidden = False

' Matrix leeren
Range("B19:E487").Select
Selection.ClearContents

'Variablen vorbelegen
i = 1
lngMatrixRowSource = lngFirstRowSourceConst

'Array f|fffd|llen
While Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst).Value <> ""
      'Cells(Zeile, Spalte)
      If Len(Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst + 7).Value) < 12 Then
         ReDim Preserve strResultArray(1 To 4, 1 To i)
         strResultArray(1, i) = Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst)
         strResultArray(2, i) = Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst + 1)
         strResultArray(3, i) = Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst + 2)
         strResultArray(4, i) = Worksheets("VBS").Cells(lngMatrixRowSource, lngFirstColSourceConst + 3)
         i = i + 1
      End If
      lngMatrixRowSource = lngMatrixRowSource + 1
Wend

'Array transponieren (wegen Zeile, Spalte --> gef|fffd|llt wurde jedoch Spalte, Zeile wegen des Redims
strResultArray = Application.WorksheetFunction.Transpose(strResultArray)
Worksheets("Cost Summary").Range(Cells(lngFirstRowTargetConst, lngFirstColTargetConst), Cells(lngFirstRowTargetConst + UBound(strResultArray) - 1, lngFirstColTargetConst + 3)).Value = strResultArray

'Cursor setzen
Cells(lngFirstRowTargetConst, lngFirstColTargetConst).Select
Application.Calculate
Application.ScreenUpdating = True

End Sub


Sub Schaltfl|fffd|che3_Klicken()
'Leere Zeilen ausblenden
'- Variablendeklaration
Dim lngMatrixRowTarget As Long              'Zeilenvariable
Dim lngMatrixColTarget As Long              'Spaltenweise

'- Konstanten vorbesetzen
Const lngFirstColMatrixConst As Long = 2        ' erste Spalte der Matrix (E)
Const lngFirstRowMatrixConst As Long = 19        ' erste Zeile der Matrix
Const lngMaxColMatrixConst As Long = 5         ' letzte Spalte der Matrix
Const lngMaxRowMatrixConst As Long = 600         ' letzte Zeile der Matrix

' pr|fffd|fen ob m|fffd|glich
    ' nicht m|fffd|glich bei leerer Matrix
    If Cells(lngFirstRowMatrixConst, lngFirstColMatrixConst).Value = "" Then
       MsgBox "The matrix does not contain any data.", vbInformation, "Hiding not possible!"
       Exit Sub
    End If
    
    ' nicht m|fffd|glich bei voller Matrix
    If Cells(lngMaxRowMatrixConst, 2).Value <> "" Then
       MsgBox "The matrix has no empty rows.", vbInformation, "Hiding not possible!"
       Exit Sub
    End If
        
' Zeilen ausblenden
    ' erste freie Zeile ermitteln
    lngMatrixRowTarget = lngFirstRowMatrixConst
    While Worksheets("Cost Summary").Cells(lngMatrixRowTarget, lngFirstColMatrixConst).Value <> ""
          lngMatrixRowTarget = lngMatrixRowTarget + 1
    Wend

' Zeilen selectieren und ausblenden
    Rows(lngMatrixRowTarget & ":" & lngMaxRowMatrixConst).Select
    Selection.EntireRow.Hidden = True
  
'Cursor positionieren
    Cells(lngFirstRowMatrixConst, lngFirstColMatrixConst).Select

End Sub
Attribute VB_Name = "Modul2"
Option Explicit
Option Base 1

Sub Schaltfl|fffd|che4_Klicken()
'Daten zeilenweise aus Input Values auslesen
Dim strResultArray() As Variant
Dim strResultArray2() As Variant
Dim i As Long

' Deklaration der Variablen
Dim lngCounter As Long

Dim lngCurrentRowCounterSource As Long          'Zeilenmerker f|fffd|r Input Values
Dim lngCurrentColCounterSource As Long          'Spaltenmerker f|fffd|r Input Values

Dim lngCurrentRowCounterTarget As Long          'Zeilenmerker f|fffd|r Maintenance Plan
Dim lngCurrentColCounterTarget As Long          'Spaltenmerker f|fffd|r Maintenance Plan

' Deklaration der Konstanten
Const lngColInclInMaintenance As Long = 13      'Spalte M / Enthalten in Maintenance Plan
Const lngColTypeOfMaintenance As Long = 22      'Spalte V / Type of Maintenance
Const lngRowStartSource As Long = 12            'Ab Zeile 12 gtehts los in Input Values
Const lngRowStartTarget As Long = 7             'Ab Zeile  7 gtehts los in Maintanence Plan


If MsgBox("Should the plan really be synchronized with the data from the Input Values worksheet?", vbQuestion + vbYesNo, "Synch Data?") = vbYes Then

   Application.ScreenUpdating = False
   'Positionen vorbereiten
   Call hlpGetPositions

   lngCurrentRowCounterSource = lngRowStartSource
   lngCurrentRowCounterTarget = lngRowStartTarget
   i = 0

   For lngCounter = 1 To 3000

       Application.StatusBar = "Create Maintenance Plan search data..."
       'Pr|fffd|fen ob in Maintenance enthalten
       If UCase(Worksheets("Input Values").Cells(lngCurrentRowCounterSource, lngColInclInMaintenance).Value) = "Y" And _
             (UCase(Worksheets("Input Values").Cells(lngCurrentRowCounterSource, lngColTypeOfMaintenance).Value) = "PM" Or _
             UCase(Worksheets("Input Values").Cells(lngCurrentRowCounterSource, lngColTypeOfMaintenance).Value) = "OH") Then
             'Ziel = Quelle D J K L P T CL U --> B C D E F G H I
             'Ziel = Quelle B C D E F G H I --> D J  K  L  P  T  CL U
             '              2 3 4 5 6 7 8 9 --> 4 10 11 12 16 20 90 21
             Application.StatusBar = "Create Maintenance Plan Row " & lngCurrentRowCounterSource & "..."
             i = i + 1
             ReDim Preserve strResultArray(11, i)
             strResultArray(1, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 4).Value
             strResultArray(2, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 10).Value
             strResultArray(3, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 11).Value
             strResultArray(4, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 12).Value
             strResultArray(5, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 16).Value
             strResultArray(6, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 20).Value
             strResultArray(7, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 90).Value
             strResultArray(8, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 21).Value
             'Pr|fffd|fen welche Intervalart AI, AJ
             Select Case UCase(Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 26 + 10).Value)
                    Case "YEARS"  '9/J
                         strResultArray(9, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 26 + 9).Value & " Years"
                         strResultArray(10, i) = ""
                         strResultArray(11, i) = ""
                    Case "MONTHS" '9/J
                         strResultArray(9, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 26 + 9).Value & " Months"
                         strResultArray(10, i) = ""
                         strResultArray(11, i) = ""
                    Case "KM"     '11/L
                         strResultArray(9, i) = ""
                         strResultArray(10, i) = ""
                         strResultArray(11, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 26 + 9).Value & " KM"
             End Select
             
             ReDim Preserve strResultArray2(18, i)
             'Hilfsspalten f|fffd|r Checklist
             strResultArray2(1, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 17).Value
             strResultArray2(2, i) = ""
             'Positionen und St|fffd|ckzahlen
             strResultArray2(3, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 56).Value
             strResultArray2(4, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 57).Value
             strResultArray2(5, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 58).Value
             strResultArray2(6, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 59).Value
             strResultArray2(7, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 60).Value
             strResultArray2(8, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 61).Value
             strResultArray2(9, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 62).Value
             strResultArray2(10, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 63).Value
             strResultArray2(11, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 64).Value
             strResultArray2(12, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 65).Value
             strResultArray2(13, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 66).Value
             strResultArray2(14, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 67).Value
             strResultArray2(15, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 68).Value
             strResultArray2(16, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 69).Value
             strResultArray2(17, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 70).Value
             strResultArray2(18, i) = Worksheets("Input Values").Cells(lngCurrentRowCounterSource, 71).Value
             
             '...
             lngCurrentRowCounterTarget = lngCurrentRowCounterTarget + 1
       End If
       lngCurrentRowCounterSource = lngCurrentRowCounterSource + 1
    
   Next lngCounter
   'Arrays |fffd|bergeben...
    '1. Block / B7:L3000 (7,2;3000,12)
    strResultArray = Application.WorksheetFunction.Transpose(strResultArray)
    Worksheets("Maintenance Plan & Overview").Range(Cells(lngRowStartTarget, 2), Cells(lngRowStartTarget + i - 1, 1 + 11)).Value = strResultArray
    '2. Block / BB7:BS3000 (7,54;3000,71)
    strResultArray2 = Application.WorksheetFunction.Transpose(strResultArray2)
    Worksheets("Maintenance Plan & Overview").Range(Cells(lngRowStartTarget, 54), Cells(lngRowStartTarget + i - 1, 53 + 18)).Value = strResultArray2
   
End If
Application.ScreenUpdating = True
Application.StatusBar = ""

End Sub


'Maintenance Intervalle |fffd|bernehmen
Sub SynchMaintenanceIntervall()
' Deklaration der Variablen
Dim strResultArray() As Variant
Dim i As Long

Dim lngCurrentColCounterSource As Long          'Spaltenmerker f|fffd|r Input Values
Dim lngCurrentColCounterTarget As Long          'Spaltenmerker f|fffd|r Maintenance Plan

' Deklaration der Konstanten
Const lngRowMPlanTargetConst As Long = 5        'Zeile 6 im Maintenance Plan
Const lngRowMatrixSourceConst As Long = 5       'Zeile 6 der matrix
Const lngColStartTargetConst As Long = 13       'Spalte M (13)

If MsgBox("Do you really want to snch the intervals?", vbQuestion + vbYesNo, "Synch intervals?") = vbYes Then
   i = 0
   lngCurrentColCounterSource = 5
   
   While Worksheets("Maintenance Interval").Cells(lngRowMatrixSourceConst, lngCurrentColCounterSource).Value <> ""
         i = i + 1
         ReDim Preserve strResultArray(1, 1 To i)
         strResultArray(1, i) = Worksheets("Maintenance Interval").Cells(lngRowMatrixSourceConst, lngCurrentColCounterSource).Value
         lngCurrentColCounterSource = lngCurrentColCounterSource + 1
   Wend
   
   'Array transponieren (wegen Zeile, Spalte --> gef|fffd|llt wurde jedoch Spalte, Zeile wegen des Redims
   'strResultArray = Application.WorksheetFunction.Transpose(strResultArray)
   Worksheets("Maintenance Plan & Overview").Range(Cells(lngRowMPlanTargetConst, lngColStartTargetConst), Cells(lngRowMPlanTargetConst, lngColStartTargetConst + i - 1)).Value = strResultArray
End If

End Sub

Sub DeleteMaintenanceIntervall()

' Deklaration der Variablen
Dim lngCurrentColCounterSource As Long          'Spaltenmerker f|fffd|r Input Values

' Deklaration der Konstanten
Const lngRowMatrixSourceConst As Long = 5             'Zeile 6 der matrix

If MsgBox("Do you really want to delete the maintenance intervals?", vbQuestion + vbYesNo, "Delete maintenance intervals?") = vbYes Then

   lngCurrentColCounterSource = 5

   For lngCurrentColCounterSource = 13 To 43
       Worksheets("Maintenance Plan & Overview").Cells(lngRowMatrixSourceConst, lngCurrentColCounterSource).Value = ""
   Next lngCurrentColCounterSource

      Range("M7:AQ3007").Select
      Selection.ClearContents
      Range("M7").Select

End If

End Sub


Sub DeleteMaintenancePlan()

If MsgBox("Should the plan really be deleted?", vbQuestion + vbYesNo, "Delete Data?") = vbYes Then

   Range("B7:BS3000").Select
   Selection.ClearContents
   Range("B7").Select

   Call IntervalSpaltenEinblenden
   
End If

End Sub


'Maintenance Intervalle |fffd|bernehmen
Sub SetIntervals()

' Deklaration der Variablen
Dim lngCurrentRowCounterSource As Long                'Zeilenmerker f|fffd|r Matrix
Dim lngCurrentColCounterSource As Long                'Spaltenmerker f|fffd|r Matrix

Dim lngCurrentRowCounterTarget As Long                'Zeilenmerker f|fffd|r Maintenance Plan
Dim lngCurrentColCounterTarget As Long                'Spaltenmerker f|fffd|r Maintenance Plan

' Deklaration der Konstanten
Const lngStartRowCounterSourceConst As Long = 7       'Zeilenstart f|fffd|r Matrix
Const lngStartColCounterSourceConst As Long = 5       'Spaltenstart f|fffd|r Matrix

Const lngStartRowCounterTargetConst As Long = 7       'Zeilenmerker f|fffd|r Maintenance Plan
Const lngStartColCounterTargetConst As Long = 13      'Spaltenmerker f|fffd|r Maintenance Plan


If MsgBox("Do you really want to sset the intervals?", vbQuestion + vbYesNo, "Set intervals?") = vbYes Then
   'Bereich leeren
   Range("M7:AQ1000").Select
   Selection.ClearContents
   Range("M7").Select
   
   lngCurrentColCounterSource = lngStartColCounterSourceConst
   lngCurrentColCounterTarget = lngStartColCounterTargetConst
   'Maintenance Interval Kopfspalten pr|fffd|fen von links nach rechts
   While Worksheets("Maintenance Plan & Overview").Cells(5, lngCurrentColCounterTarget).Value <> ""
         lngCurrentRowCounterTarget = lngStartRowCounterTargetConst
         'An dieser Stelle gehe ich davon aus, dass die Spalten der Matrix und im Plan die gleiche Reihenfolge haben (weil programmtechnisch so umgesetzt)
         Do While Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterTarget, 2).Value <> ""
            lngCurrentRowCounterSource = lngStartRowCounterSourceConst
            'Maintenance Plan durchsuchen
            Do While Worksheets("Maintenance Interval").Cells(lngCurrentRowCounterSource, 2).Value <> ""
               If UCase(Trim(Worksheets("Maintenance Interval").Cells(lngCurrentRowCounterSource, 2).Value & " " & Worksheets("Maintenance Interval").Cells(lngCurrentRowCounterSource, 3).Value)) = UCase(Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterTarget, 10).Value) & UCase(Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterTarget, 11).Value) & UCase(Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterTarget, 12).Value) Then
                  If UCase(Worksheets("Maintenance Interval").Cells(lngCurrentRowCounterSource, lngCurrentColCounterSource).Value) = "X" Then
                     Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterTarget, lngCurrentColCounterTarget).Value = "X"
                     Exit Do
                  End If
               End If
               lngCurrentRowCounterSource = lngCurrentRowCounterSource + 1
            Loop
            lngCurrentRowCounterTarget = lngCurrentRowCounterTarget + 1
         Loop
         lngCurrentColCounterSource = lngCurrentColCounterSource + 1
         lngCurrentColCounterTarget = lngCurrentColCounterTarget + 1
   Wend
End If

End Sub

Sub IntervalSpaltenAusblenden()
Dim i As Long
    
    Range("M4:AQ4").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    ' Spalten selectieren und ausblenden
    i = 13
    Do While Worksheets("Maintenance Plan & Overview").Cells(5, i).Value <> ""
       i = i + 1
    Loop
    Range(Columns(i), Columns(43)).Select
    Selection.EntireColumn.Hidden = True
    Range("M7").Select

    Range("M4:AQ4").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    
End Sub

Sub IntervalSpaltenEinblenden()
    
    Range("M4:AQ4").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    Range(Columns(13), Columns(43)).Select
    Selection.EntireColumn.Hidden = False
    Range("M7").Select

    Range("M4:AQ4").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    
End Sub


Sub hlpGetPositions()
'Ermittlung der Positionen wie CAB A, Bogie A,...
Dim lngColSource As Long
Dim lngColTarget As Long
Dim strResultArray() As Variant
Dim i As Long

Const lngRowSource As Long = 9
Const lngRowTarget As Long = 6
Const lngStartColSource As Long = 56
Const lngStartColTarget As Long = 56
Const lngEndColSource As Long = 71

   Range("BD6:BS6").Select
   Selection.ClearContents
   Range("BD6").Select
   
   lngColTarget = lngStartColTarget
   i = 0
   'Maintenance Interval Kopfspalten pr|fffd|fen von links nach rechts
   For lngColSource = lngStartColSource To lngEndColSource
       i = i + 1
       ReDim Preserve strResultArray(1, 1 To i)
       strResultArray(1, i) = Worksheets("Input Values").Cells(lngRowSource, lngColSource).Value
       lngColTarget = lngColTarget + 1
   Next
   Worksheets("Maintenance Plan & Overview").Range(Cells(lngRowTarget, lngStartColTarget), Cells(lngRowTarget, lngStartColTarget + i)).Value = strResultArray

End Sub

Sub hlpGetChecklistData()
'Automatisches Ausf|fffd|llen der Checkliste
Dim strChoosenInterval As String
Dim lngCurrentRowCounterSource As Long
Dim lngCurrentColMainenanceIntervalSource As Long
Dim strVBSCode As String
Dim strVBSDescription As String
Dim strVBSCode02 As String
Dim strVBSDescription02 As String
Dim strVBSCode03 As String
Dim strVBSDescription03 As String
Dim lngRowKopiervorlage As Long
Dim lngPosSourceCol As Long
Dim lngCopyFromRow As Long
Dim lngPasteToRow As Long
Dim bolStructureHeaderRow As Boolean
Dim lngStructureHeaderRow As Long
Dim lngFirstPositionRow As Long
Dim lngLastPositionRow As Long
Dim strCopyRange As Variant
Dim strPasteRange As Variant

lngCopyFromRow = 1
lngPasteToRow = 59
bolStructureHeaderRow = True
lngStructureHeaderRow = 15
lngCurrentRowCounterSource = 7
lngCurrentColMainenanceIntervalSource = 13

'0. Initialisieren
Range("B9").Select
Application.ScreenUpdating = False
If MsgBox("Do you really want to create the <<" & Worksheets("Maintenance Checklist").Cells(4, 7).Value & ">> Checklist?", vbQuestion + vbYesNo, "Create Checklist?") = vbNo Then
   Exit Sub
End If

'Pr|fffd|fungen ob Maintenance Plan & Overview mit Daten gef|fffd|llt
If Worksheets("Maintenance Plan & Overview").Cells(5, 13).Value = "" Then
   MsgBox "No Intervals available in Maintenance Plan and Overview! Please create Plan first.", vbInformation, "No Intervals found in maintenance Plan!"
   Exit Sub
End If

If Worksheets("Maintenance Plan & Overview").Cells(7, 2).Value = "" Then
   MsgBox "No data (rows) available in Maintenance Plan and Overview! Please create Plan first.", vbInformation, "No data found in Maintenance Plan!"
   Exit Sub
End If

'1. Revisionsinterval inkl. Spalte merken
lngCurrentColMainenanceIntervalSource = getMaintenanceIntervalColumn(Worksheets("Maintenance Checklist").Cells(4, 7).Value)
'2. F|fffd|r alle Zeilen in Revisionsintervall = "X"
Do While Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 2).Value <> ""
   If Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, lngCurrentColMainenanceIntervalSource).Value = "X" Then
      lngRowKopiervorlage = 3
   '  2a - VBS-Code ermitteln
      strVBSCode = Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 2).Value
   '  2b - Struktur und Bezeichnungen zum VBS-Code ermitteln
      If Left$(strVBSCode, 2) <> "4S" Then strVBSCode = "4S." & strVBSCode
      strVBSDescription = getVBSDescription(strVBSCode)
      strVBSCode02 = Left$(strVBSCode, 5)
      strVBSDescription02 = getVBSDescription(strVBSCode02)
      strVBSCode03 = Left$(strVBSCode, 8)
      strVBSDescription03 = getVBSDescription(strVBSCode03)
   '  2c - Struktur-Pr|fffd|fung / wenn gleich, dann Entfall
      If Worksheets("Maintenance Checklist").Cells(1, 27).Value <> strVBSCode02 Then
         lngCopyFromRow = 1      'dann beim formatieren +2
         bolStructureHeaderRow = True
         Worksheets("Maintenance Checklist").Cells(1, 27).Value = strVBSCode02
         Worksheets("Maintenance Checklist").Cells(1, 28).Value = strVBSDescription02
         Worksheets("Maintenance Checklist").Cells(2, 27).Value = strVBSCode03
         Worksheets("Maintenance Checklist").Cells(2, 28).Value = strVBSDescription03
         Else
         If Worksheets("Maintenance Checklist").Cells(2, 27).Value = strVBSCode03 Then
            lngCopyFromRow = 3  'dann beim formatieren +0
            bolStructureHeaderRow = False
            Else
            lngCopyFromRow = 2  'dann beim formatieren +1
            bolStructureHeaderRow = True
            Worksheets("Maintenance Checklist").Cells(2, 27).Value = strVBSCode03
            Worksheets("Maintenance Checklist").Cells(2, 28).Value = strVBSDescription03
         End If
      End If
      '3. Schreibe Zeile von Source in Target
      Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 27).Value = strVBSCode
      Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 29).Value = "??"
      Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 30).Value = Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 6).Value
      Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 32).Value = Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 4).Value & ": " & Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 4).Value
      Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 33).Value = Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, 54).Value
      '4. Positionen ermitteln von Source in Target
      'F|fffd|r Jede Position: Spalte in Zeile transformieren
      For lngPosSourceCol = 56 To 71
          If Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, lngPosSourceCol).Value <> "" Then
             '4a - Position eintragen
             Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 28).Value = Worksheets("Maintenance Plan & Overview").Cells(6, lngPosSourceCol).Value
             '4b - Quantity
             Worksheets("Maintenance Checklist").Cells(lngRowKopiervorlage, 31).Value = Worksheets("Maintenance Plan & Overview").Cells(lngCurrentRowCounterSource, lngPosSourceCol).Value
             lngRowKopiervorlage = lngRowKopiervorlage + 1
          End If
      Next
      lngRowKopiervorlage = lngRowKopiervorlage - 1     'Korrektur f|fffd|r Kopieren/Einf|fffd|gen
      '5. Kopiervorlage nach Checklist kopieren
      '5a - Copy
      strCopyRange = "AA" & lngCopyFromRow & ":AJ" & lngRowKopiervorlage
      Range(strCopyRange).Select
      Selection.Copy
      '5b - Paste
      strPasteRange = "B" & lngPasteToRow
      Range(strPasteRange).Select
      ActiveSheet.Paste
      Application.CutCopyMode = False
      '5c - Checklist formatieren
      lngFirstPositionRow = lngPasteToRow + 3 - lngCopyFromRow
      lngLastPositionRow = lngFirstPositionRow + lngRowKopiervorlage - 3
      formatChecklistPositions lngFirstPositionRow, lngLastPositionRow
      '5d - StructureHeader f|fffd|llen
      If bolStructureHeaderRow Then
         fillStructureHeader lngStructureHeaderRow, strVBSCode03, strVBSDescription03
         lngStructureHeaderRow = lngStructureHeaderRow + 1
      End If
      '5e - Neue Paste-Row berechnen
      lngPasteToRow = lngLastPositionRow + 1 'gek|fffd|rzte Fassung
      '6. - Kopiervorlage leeren
      Range("AA3:AJ28").Select
      Selection.ClearContents
   End If
   lngCurrentRowCounterSource = lngCurrentRowCounterSource + 1

  ' Stop
Loop
'7. - Aufr|fffd|umen
Range("AA1:AJ28").Select
Selection.ClearContents

If lngStructureHeaderRow > 30 Then
   Rows(lngStructureHeaderRow & ":44").Select
   Else
   Rows("30:44").Select
End If
Selection.EntireRow.Hidden = True

Range("B9").Select

Application.ScreenUpdating = True
If Worksheets("Maintenance Checklist").Cells(15, 3).Value = "" Then
   MsgBox "No Items found to create Checklist!", vbInformation, "Checklist empty!"
End If

End Sub


Sub cleanUp()
'7. - Aufr|fffd|umen
Application.ScreenUpdating = False
Range("AA1:AJ28").Select
Selection.ClearContents
Range("B59:K60").Select
Selection.ClearContents
Range("C15:H44").Select
Selection.ClearContents
Rows("61:450").Select
Selection.Delete Shift:=xlUp
Rows("14:45").Select
Selection.EntireRow.Hidden = False
Range("B9").Select
Application.ScreenUpdating = True

End Sub


Sub fillStructureHeader(lngRow As Long, strStructureCode As String, strStructureDescription As String)
'Struktur|fffd|nderungen 2. Stelle im Header protokollieren

Worksheets("Maintenance Checklist").Cells(lngRow, 3).Value = strStructureCode
Worksheets("Maintenance Checklist").Cells(lngRow, 4).Value = strStructureDescription

End Sub


Sub formatChecklistPositions(lngFirstPositionRowP As Long, lngLastPositionRowP As Long)
'Formatierung von Positionen in der Checklist
Dim strFormatRange As String
Dim lngLastPositionRow As Long

'B61:B63,D61:D63,E61:E63,G61:G63,H61:H63
'B61:B67,D61:D67,E61:E67,G61:G67,H61:H67
    Application.DisplayAlerts = False
    strFormatRange = "B" & lngFirstPositionRowP & ":B" & lngLastPositionRowP & ",D" & lngFirstPositionRowP & ":D" & lngLastPositionRowP & ",E" & lngFirstPositionRowP & ":E" & lngLastPositionRowP & ",G" & lngFirstPositionRowP & ":G" & lngLastPositionRowP & ",H" & lngFirstPositionRowP & ":H" & lngLastPositionRowP
    Range(strFormatRange).Select
    Range("H" & lngFirstPositionRowP).Activate
    With Selection
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Range("B" & lngFirstPositionRowP & ":K" & lngLastPositionRowP).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Application.DisplayAlerts = True
    
End Sub


Function getVBSDescription(sVBSCode As String) As String
'Ermittlung VBS Description zum dazugeh|fffd|rigen Code
Dim i As Long

getVBSDescription = "Item not found in VBS!"
i = 8
Do While Worksheets("VBS").Cells(i, 9).Value <> ""
   If Worksheets("VBS").Cells(i, 9).Value = sVBSCode Then
      getVBSDescription = Worksheets("VBS").Cells(i, 11).Value
      Exit Do
   End If
   i = i + 1
Loop

End Function


Function getMaintenanceIntervalColumn(strInterval As String) As Long
'Ermittlung der Spalte zum Maintenance Interval
Dim i As Long

getMaintenanceIntervalColumn = 0
For i = 13 To 43
    If Worksheets("Maintenance Plan & Overview").Cells(5, i).Value = strInterval Then
       getMaintenanceIntervalColumn = i
       Exit For
    End If
Next

End Function



Attribute VB_Name = "Modul3"
'=={Module for Maitenance Checklist]==========================
Option Explicit


'---[Schlalos@SWMS}-------------------------------------------

' 1. Checklist initialize
'   1a.

Attribute VB_Name = "Modul4"
Sub Makro1()
Attribute Makro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro1 Makro
'

'
    Range("B59:K66").Select
    Selection.Copy
    Range("B67").Select
    ActiveSheet.Paste
    Range("E62").Select
    ActiveWindow.SmallScroll Down:=-15
    Range("B43:B44").Select
    ActiveWindow.SmallScroll Down:=6
    Range("A45:A46").Select
    Range("A46").Activate
    ActiveWindow.SmallScroll Down:=3
    Range("F54").Select
    ActiveWindow.SmallScroll Down:=-42
    Range("G4").Select
    Windows("eMCM Dev Build 0.67.xlsm").Activate
    Range("Y17").Select
    Windows( _
        "Kopie von eMCM Dev Build 0 (Repariert)(Automatisch wiederhergestellt) (version 1).xlsb" _
        ).Activate
    Windows("eMCM Dev Build 0.67.xlsm").Activate
    Windows("Kopie von eMCM Dev Build 0 (Repariert).xlsm").Activate
    Windows( _
        "Kopie von eMCM Dev Build 0 (Repariert)(Automatisch wiederhergestellt) (version 1).xlsb" _
        ).Activate
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveWindow.SmallScroll Down:=-27
    Range("E134").Select
    ActiveWindow.SmallScroll Down:=9
    Range("B147").Select
    ActiveWindow.SmallScroll Down:=-18
    Windows("Kopie von eMCM Dev Build 0 (Repariert).xlsm").Activate
    ActiveWindow.SmallScroll Down:=-9
    Range("A5:A9").Select
    Sheets("UserManagement").Select
    Windows( _
        "Kopie von eMCM Dev Build 0 (Repariert)(Automatisch wiederhergestellt) (version 1).xlsb" _
        ).Activate
    ActiveWindow.SmallScroll Down:=-129
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    Range("A1").Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Previous.Select
    ActiveSheet.Next.Select
    ActiveSheet.Previous.Select
    Range("B7").Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Next.Select
    ActiveSheet.Shapes.Range(Array("Button 1")).Select
    Application.CutCopyMode = False
    Selection.Characters.Text = "Create Checklist"
    With Selection.Characters(Start:=1, Length:=16).Font
        .Name = "Arial"
        .FontStyle = "Standard"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
    End With
    Range("C7:H7").Select
    Windows("Kopie von eMCM Dev Build 0 (Repariert).xlsm").Activate
    Windows( _
        "Kopie von eMCM Dev Build 0 (Repariert)(Automatisch wiederhergestellt) (version 1).xlsb" _
        ).Activate
    Range("B7").Select
    ActiveSheet.Shapes.Range(Array("Button 1")).Select
    Windows("Kopie von eMCM Dev Build 0 (Repariert).xlsm").Activate
    ActiveWorkbook.Save
    ActiveWindow.Close
    Sheets("Maintenance Plan & Overview").Select
    ActiveWorkbook.Save
    ActiveWindow.Close
    Sheets("Maintenance Plan & Overview").Select
    ActiveWindow.Close
    Sheets("Maintenance Plan & Overview").Select
    Range("M2").Select
    ActiveWindow.Close
    Range("G947:G948").Select
    ActiveWindow.SmallScroll Down:=-51
    Range("A1").Select
    ActiveWindow.Close
    ActiveWindow.SmallScroll Down:=-12
    ActiveWindow.Close
    Sheets("Maintenance Plan & Overview").Select
    Selection.AutoFilter
    ActiveWindow.SmallScroll Down:=-30
    ActiveWorkbook.SaveAs Filename:= _
        "C:\Users\ischlalos\Documents\eMCM_Dev_IOS.xlsm", FileFormat:= _
        xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    Range("D6").Select
    ActiveSheet.Shapes.Range(Array("Button 8")).Select
    Range("E9").Select
    ActiveWindow.SmallScroll Down:=12
    Windows("PartnerCenter_Users_Report (2) (1).csv").Activate
    Range("E19").Select
    ActiveWindow.Close
End Sub
Attribute VB_Name = "Modul5"
Sub KopierenWieEinBloeder()
Attribute KopierenWieEinBloeder.VB_ProcData.VB_Invoke_Func = " \n14"
'
' KopierenWieEinBloeder Makro
'

'
    
    
    
    
    
    Range("AA2:AJ7").Select
    Selection.Copy
    Range("A1").Select
    ActiveWindow.SmallScroll Down:=48
    Range("B60").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("B61").Select
End Sub
Attribute VB_Name = "Modul6"
Sub Makro2()
Attribute Makro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro2 Makro
'

'
    Range("B61:B63,D61:D63,E61:E63,G61:G63,H61:H63").Select
    'Range("H61").Activate
    With Selection
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    Range("B61:K63").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Range("B64").Select
End Sub
Sub Makro3()
Attribute Makro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro3 Makro
'

'
    Range("AA3:AJ28").Select
    Selection.ClearContents
    Range("AA3").Select
End Sub
Attribute VB_Name = "Modul7"
Sub Makro4()
Attribute Makro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro4 Makro
'

'
    Rows("61:450").Select
    Selection.Delete Shift:=xlUp
End Sub
Sub Makro5()
Attribute Makro5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro5 Makro
'

'
    Rows("14:45").Select
    Selection.EntireRow.Hidden = False
    Rows("26:44").Select
    Selection.EntireRow.Hidden = True
End Sub
Attribute VB_Name = "Modul8"
Sub Diagramm3_Klicken()
MsgBox "Hallo SmartArt"
End Sub
Attribute VB_Name = "Modul9"
Option Explicit
Sub Costsperyear_Schaltfl|fffd|che2_Klicken()
'Stop

Dim firstyeardate, startcontract, a, endcontract, startcontract_overall, firstdate As Date
Dim i, j, tr_type, veh_nr, InVal_cr As Integer
Dim firstyear, startkm, startcontract_d, d, startup_d, mileage, warranty, contract_len, interval, interval_a(1 To 2), mat_C, year_run, spalte_entry, endcontract_d, Start_p, End_p, interval_y, offset, lab_C As Double
Dim OH_lasty As Boolean
Dim warranty_calc_M, warranty_calc_L, warrantyline As Double
Dim config, warr_M_L, unit, freq_sel As String
Dim Costs(0 To 499, 0 To 50) As Double
Dim labour(0 To 499, 0 To 50) As Double
Dim onlyonce As Boolean
Dim M_type, tr_type_chosen As String



'DROPDOWN: Auswahl des aktuellen Zugtyps oder alle Zugtypen:
'wenn aktueller Zugtyp, dann:
tr_type_chosen = Worksheets("Input Values").Cells(2, 35)

If tr_type_chosen = "ALL" Then
    '===SWMS: ggf. Wartungsarmer, wenn nur wenig Daten vorhanden (sonst ggf. R|fffd|ckgabe von "1899"
    firstyear = Year(Application.Min(Worksheets("Fleet configuration").Range("E3:E502")))
    firstdate = Application.Min(Worksheets("Fleet configuration").Range("E3:E502"))
Else
    'Projektdaten, tr_type zeigt auf Zugtype (von 1 bis 6)
    firstyear = Year(Worksheets("Project Data").Cells(11, 26))
    firstdate = Worksheets("Project Data").Cells(11, 26)
End If

Worksheets("Costs per year").Cells(3, 6) = firstdate
Worksheets("Costs per year").Cells(4, 6) = DateDiff("d", DateSerial(firstyear, 1, 1), DateSerial(firstyear, 12, 31))
Worksheets("Costs per year").Cells(5, 6) = DateDiff("d", firstdate, DateSerial(firstyear, 12, 31))

Worksheets("Labour per year").Cells(3, 6) = firstdate
Worksheets("Labour per year").Cells(4, 6) = DateDiff("d", DateSerial(firstyear, 1, 1), DateSerial(firstyear, 12, 31))
Worksheets("Labour per year").Cells(5, 6) = DateDiff("d", firstdate, DateSerial(firstyear, 12, 31))


'______________________________________________________________________hier start der Schleife f|fffd|r die Zugnummern

veh_nr = 1              'Start bei Vehicle 1
While Not (Worksheets("Fleet Configuration").Cells(veh_nr + 2, 4) = "NO CONFIG" Or Worksheets("Fleet Configuration").Cells(veh_nr + 2, 4) = "")
    If Worksheets("Fleet configuration").Cells(veh_nr + 2, 7) = tr_type_chosen Or tr_type_chosen = "ALL" Then
        
        'Vorbesetzung der Startwerte //SWMS: festverdrahtete Zeilen mit veh_nr + ausgetauscht
        startcontract = Worksheets("Fleet configuration").Cells(veh_nr + 2, 5)   'Delivery Date = 15.01.2018
        startkm = Worksheets("Fleet configuration").Cells(veh_nr + 2, 6)         'km at contract start = 5741
        config = Worksheets("Fleet configuration").Cells(veh_nr + 2, 7)          'Vehicle configuration = Flexity 5ER
        
        'Projektdaten, tr_type zeigt auf Zugtype (von 1 bis 6)
        tr_type = 0
        Do
            tr_type = tr_type + 1
        Loop Until Worksheets("Project Data").Cells(5, tr_type + 8) = config Or tr_type + 8 > 14
        mileage = Worksheets("Project Data").Cells(7, tr_type + 8)
        endcontract = Worksheets("Project Data").Cells(12, tr_type + 8)               'SWMS: endcontract hinzugef|fffd|gt
        warranty = Worksheets("Project Data").Cells(8, tr_type + 8)
        warr_M_L = Worksheets("Project Data").Cells(9, tr_type + 8)
        If Worksheets("Project Data").Cells(10, tr_type + 8) = "Yes" Then OH_lasty = True
        contract_len = Worksheets("Project Data").Cells(14, tr_type + 8)
        
        'Berechnung der Daten (Startdatum, Abzug der Kilometerleistung, Enddatum je nach Auswahl I13)
        'd enth|fffd|lt Anzahl der Tage des Jahres in dem der Vertrag beginnt
        d = DateDiff("d", DateSerial(Year(startcontract), 1, 1), DateSerial(Year(startcontract), 12, 31))
        'Startcontract_d ist das Datum als Dezimalzahl: zB 2019.14
        startcontract_d = DateDiff("d", DateSerial(Year(startcontract), 1, 1), startcontract) / d + Year(startcontract)
        startup_d = startcontract_d - startkm / mileage
        'endcontract_d: je nach Auswahl endet der Vertrag f|fffd|r alle Zugtypen zum selben Zeitpunkt oder die Vertragslaufzeit ist f|fffd|r alle Zugtypen gleich:
        If Worksheets("Project Data").Cells(13, tr_type + 8) = "Yes" Then
            'SWMS: Dieser True-Abschnit muss noch einmal |fffd|berpr|fffd|ft/|fffd|berarbeitet werden!!!!!!
            d = DateDiff("d", DateSerial(Year(endcontract), 1, 1), DateSerial(Year(endcontract), 12, 31))
            endcontract_d = DateDiff("d", DateSerial(Year(endcontract), 1, 1), endcontract) / d + Year(endcontract)
        Else
            endcontract_d = startcontract_d + contract_len
        End If
        
        'Eintr|fffd|ge der Daten in den |fffd|berschriftenkopf
        Worksheets("Costs per year").Cells(1005 + veh_nr, 3) = startcontract
        Worksheets("Costs per year").Cells(1005 + veh_nr, 4) = startkm
        
        Worksheets("Labour per year").Cells(1005 + veh_nr, 3) = startcontract
        Worksheets("Labour per year").Cells(1005 + veh_nr, 4) = startkm
        
        
        
        '_______________________________________________________hier startet die Schleife f|fffd|r die "Input Values"
        
        With Worksheets("Input Values")
            InVal_cr = 11                               'Start bei Zeile 11 in Input_Values
            
            While .Cells(InVal_cr, 8) <> ""             'So lange Spalte H - Structure Level einen Wert enth|fffd|lt
                If .Cells(InVal_cr, 8) = "LRU" And .Cells(InVal_cr, 9) = 1 Then '|fffd|berschriftszeilen "ausblenden"; diese sind mit "EQT" gekennzeichnet, alternativ:wenn = "LRU"
                    
                    
                    M_type = .Cells(InVal_cr, 22)           'Spalte V - Type of maintenance; z. B.: "PM"
                    freq_sel = .Cells(InVal_cr, 37)         'Spalte AK - Freq. Selection; z. B.: "BT"
                    
                    unit = .Cells(InVal_cr, 36)             'Spalte AJ - Selected Unit for calc; z. B.: "km"
                    interval_y = .Cells(InVal_cr, 107)      'Spalte DB - choosen Freq. in years;
                    
                    
                    If freq_sel <> "FAILURE" Then
                        
                        '__________________________________________pr|fffd|ventive Wartung
                        'Intervall in Jahren:
                        
                        onlyonce = False
                        If unit = "once km" Or unit = "once hours" Then onlyonce = True
                        
                        offset = .Cells(InVal_cr, 38)           'Spalte AL - Freq. Offset
                        If offset > 0 Then
                            Select Case unit
                                Case "KM":         offset = offset / mileage
                                Case "Miles":      offset = offset * 1.60934 / mileage
                                Case "Hours":      offset = offset / .Cells(InVal_cr, 39)
                                Case "Days":       offset = offset / 365.25
                                Case "Weeks":      offset = offset / (365.25 / 7)
                                Case "Month":      offset = offset / 12
                                Case "Cycle":      offset = offset / .Cells(InVal_cr, 40)
                                Case "once km":    offset = offset / mileage
                                Case "once hours": offset = offset / .Cells(InVal_cr, 39)
                            End Select
                        End If
                                                        
                        'Materialkosten pro Event * Anzahl der Komponenten, hier kann auf die Spalte CQ zur|fffd|ckgegriffen werden, keine Zugtyp spezifischen Kosten
                        mat_C = .Cells(InVal_cr, 95) * .Cells(InVal_cr, 49 + tr_type)           'z. B.: mat_C =
                        
                        'Arbeitszeit pro Event
                        lab_C = .Cells(InVal_cr, 96) * .Cells(InVal_cr, 49 + tr_type)
                        
                        'Kompletter Durchlauf der Wartungsaktivit|fffd|ten in der Vertragslaufzeit
                        year_run = startup_d + interval_y + offset
                        Do While year_run <= endcontract_d
                            If year_run < startcontract_d Then
                                Costs(veh_nr, 0) = Costs(veh_nr, 0) + mat_C
                                labour(veh_nr, 0) = labour(veh_nr, 0) + lab_C
                            Else
                                spalte_entry = WorksheetFunction.RoundDown(year_run - 0.001, 0) - firstyear + 1
                                If Not (M_type = "OH" And year_run > endcontract_d - 1 And Not OH_lasty) Then
                                    Costs(veh_nr, spalte_entry) = Costs(veh_nr, spalte_entry) + mat_C
                                    labour(veh_nr, spalte_entry) = labour(veh_nr, spalte_entry) + lab_C
                                End If
                            End If
                            If onlyonce Then Exit Do
                            year_run = year_run + interval_y
                        Loop
                    Else
                        '_____________________________________________korrektive Wartung
                        'Berechnung der Kosten / Jahr -> mat_C
                        mat_C = .Cells(InVal_cr, 95) * .Cells(InVal_cr, 49 + tr_type) / interval_y
                        
                        'Berechnung Arbeitszeit pro Jahr:
                        lab_C = .Cells(InVal_cr, 96) * .Cells(InVal_cr, 49 + tr_type) / interval_y
                        
                        If startkm > 0 Then
                            Costs(veh_nr, 0) = Costs(veh_nr, 0) + (startcontract_d - startup_d) * mat_C
                            labour(veh_nr, 0) = labour(veh_nr, 0) + (startcontract_d - startup_d) * lab_C
                        End If
                        
                        Start_p = startcontract_d
                        End_p = WorksheetFunction.RoundDown(startcontract_d, 0) + 1
                        
                        'korrektive Kosten den Jahren zuordnen, w|fffd|hrend der Gew|fffd|hrleistung fallen keine korrektiven Kosten an
                        
                        If .Cells(InVal_cr, 87) > 0 Then warrantyline = .Cells(InVal_cr, 87) Else warrantyline = warranty
                        If warr_M_L = "L" Then warranty_calc_M = 0 Else warranty_calc_M = warrantyline
                        If warr_M_L = "M" Then warranty_calc_L = 0 Else warranty_calc_L = warrantyline
                        While End_p <= endcontract_d
                            If Start_p + warranty_calc_M < End_p Then
                                spalte_entry = WorksheetFunction.RoundDown(Start_p, 0) - firstyear + 1
                                Costs(veh_nr, spalte_entry) = Costs(veh_nr, spalte_entry) + mat_C * (End_p - (Start_p + warranty_calc_M))
                                warranty_calc_M = 0
                            Else
                                warranty_calc_M = warranty_calc_M - (End_p - Start_p)
                            End If
                            
                            If Start_p + warranty_calc_L < End_p Then
                                spalte_entry = WorksheetFunction.RoundDown(Start_p, 0) - firstyear + 1
                                labour(veh_nr, spalte_entry) = labour(veh_nr, spalte_entry) + lab_C * (End_p - (Start_p + warranty_calc_L))
                                warranty_calc_L = 0
                            Else
                                warranty_calc_L = warranty_calc_L - (End_p - Start_p)
                            End If
                            
                            Start_p = End_p
                            End_p = End_p + 1
                        Wend
                        
                        spalte_entry = WorksheetFunction.RoundDown(Start_p, 0) - firstyear + 1
                        If Start_p + warranty_calc_M <= endcontract_d Then
                            Costs(veh_nr, spalte_entry) = Costs(veh_nr, spalte_entry) + mat_C * (endcontract_d - (Start_p + warranty_calc_M))
                        End If
                        If Start_p + warranty_calc_L <= endcontract_d Then
                            labour(veh_nr, spalte_entry) = labour(veh_nr, spalte_entry) + lab_C * (endcontract_d - (Start_p + warranty_calc_L))
                        End If
                    End If
                End If
            InVal_cr = InVal_cr + 1
            Wend
        End With
    End If 'vehicle type chosen
    veh_nr = veh_nr + 1
Wend

'Zum Schlu|fffd| noch das Array ins Blatt schreiben:  Range("E1006:H30") = costs /// Costs(1006 To 1505, 5 To 55
'Worksheets("Labour per year").Range(Cells(6, 5), Cells(veh_nr + 5, spalte_entry)) = labour
'Array dynamisieren und auf sheet anpassen: !!!!!
'Worksheets("Costs per year").Range(Cells(1006, 5), Cells(1505, 55)) = Costs
'Worksheets("Labour per year").Range(Cells(1006, 5), Cells(1505, 55)) = labour
For j = 1006 To 1015    'Zeile
    For i = 1 To 10     'Spalte
        Worksheets("Costs per year").Cells(j, 4 + i) = Costs(j - 1005, i - 1)
        Worksheets("Labour per year").Cells(j, 4 + i) = labour(j - 1005, i - 1)
    Next
Next

'Worksheets("Costs per year").Range(Cells(1006, 5), Cells(1007, 9)).Value = Costs
'Worksheets("Labour per year").Range(Cells(1006, 5), Cells(1007, 9)).Value = labour



End Sub


Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{8235B5A4-90BA-4537-9568-189920779E8E}{0204E35D-3E4E-49AC-84CD-1AE724101B92}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Protection"

Sub Formel_Schutz(Schutz_Range As String)
Stop
'************************************************************************
' Setzt eine Daten|fffd|berwachung damit Formeln nicht ge|fffd|ndert werden k|fffd|nnen.
'************************************************************************

    With Range(Schutz_Range).Validation
        .Delete
        .Add Type:=xlValidateCustom, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0"
        .IgnoreBlank = True
        .InCellDropdown = False
        .InputTitle = ""
        .ErrorTitle = "Change of formulas denied"
        .InputMessage = ""
        .ErrorMessage = "You are not allowed to change formulas."
        .ShowInput = False
        .ShowError = True
    End With
    
End Sub

Sub Unprotect_me(Tabellen_Name As String)
    
    Worksheets(Tabellen_Name).Unprotect Password:="Init123!"
    'Die obige Zeile muss "aktiviert werden".       Hier muss ein Passwort gew|fffd|hlt werden, zur Zeit Init123! (und 4x weiter unten ebenfalls).
    
End Sub

Sub Protect_me(Tabellen_Name As String, level As String)
Attribute Protect_me.VB_ProcData.VB_Invoke_Func = " \n14"

'Hier muss der Inhalt vom Makro Protect_me_content() stehen, damit das Makro funktioniert.

End Sub

Private Sub Protect_me_content() 'Der Inhalt von diesem Makro geh|fffd|rt in das obige Makro eingef|fffd|gt, um den automatischen Blattschutz zu aktivieren.

If level = "high" Then
    
    Worksheets(Tabellen_Name).Protect Password:="Init123!", _
        userinterfaceonly:=True, _
        AllowFiltering:=True, _
        Contents:=True
    Worksheets(Tabellen_Name).EnableSelection = xlUnlockedCells
    Worksheets(Tabellen_Name).EnableOutlining = True
    
End If

If level = "medium" Then
    
    Worksheets(Tabellen_Name).Protect Password:="Init123!", _
        userinterfaceonly:=True, _
        Contents:=True, _
        AllowFormattingCells:=True, _
        AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, _
        AllowInsertingColumns:=False, _
        AllowInsertingRows:=False, _
        AllowInsertingHyperlinks:=True, _
        AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, _
        AllowSorting:=True, _
        AllowFiltering:=True, _
        AllowUsingPivotTables:=True, _
        DrawingObjects:=False, _
        Scenarios:=False
    Worksheets(Tabellen_Name).EnableSelection = xlNoRestrictions
    Worksheets(Tabellen_Name).EnableOutlining = True
    
End If

If level = "low" Then
    
    Worksheets(Tabellen_Name).Protect Password:="Init123!", _
        userinterfaceonly:=True, _
        Contents:=True, _
        AllowFormattingCells:=True, _
        AllowFormattingColumns:=False, _
        AllowFormattingRows:=True, _
        AllowInsertingColumns:=False, _
        AllowInsertingRows:=True, _
        AllowInsertingHyperlinks:=True, _
        AllowDeletingColumns:=False, _
        AllowDeletingRows:=True, _
        AllowSorting:=True, _
        AllowFiltering:=True, _
        AllowUsingPivotTables:=True, _
        DrawingObjects:=False, _
        Scenarios:=False
    Worksheets(Tabellen_Name).EnableSelection = xlNoRestrictions
    Worksheets(Tabellen_Name).EnableOutlining = True
    
End If

End Sub

Private Sub Admin()

Dim Password As String
Dim level As String

Password = InputBox("Please enter administrator password:", "Administrator Unlock")

'Protect_all Password       ==> Diese Zeile muss aktiviert werden, damit das Makro funktioniert.

MsgBox ("This Excel file has no automatic write protection.") 'Diese Zeile muss gel|fffd|scht werden, wenn der Blattschutz wieder automatisch erfolgen soll.

End Sub

Sub Protect_all(Admin_override As String)

'Hier muss der Inhalt vom Makro Protect_all_content() stehen, damit das Makro funktioniert.

End Sub

Private Sub Protect_all_content()  'Der Inhalt von diesem Makro geh|fffd|rt in das obige Makro eingef|fffd|gt, um den automatischen Blattschutz zu aktivieren.

Application.ScreenUpdating = False

Dim Input_Values As String
Dim Project_Data As String
Dim Fleet_Configuration As String
Dim Curr As String
Dim Dashboard As String
Dim Cost_Summary As String
Dim Reliability_Summary As String
Dim Costs_per_year As String
Dim Labour_per_year As String
Dim Material_Planning As String
Dim CBOM As String
Dim WBS As String
Dim LOG_File As String
Dim Input_Data As String
Dim Maintenance_Plan_Overview As String

Input_Values = "Input Values"
Project_Data = "Project Data"
Fleet_Configuration = "Fleet Configuration"
Curr = "Currency"
Dashboard = "Dashboard"
Cost_Summary = "Cost Summary"
Reliability_Summary = "Reliability Summary"
Maintenance_Plan_Overview = "Maintenance Plan & Overview"
Costs_per_year = "Costs per year"
Labour_per_year = "Labour per year"
Material_Planning = "Material Planning"
CBOM = "CBOM"
WBS = "WBS"
LOG_File = "LOG"
Input_Data = "Input_Data"

Unprotect_me Input_Values
Unprotect_me Project_Data
Unprotect_me Fleet_Configuration
Unprotect_me Curr
Unprotect_me Dashboard
Unprotect_me Cost_Summary
Unprotect_me Reliability_Summary
Unprotect_me Maintenance_Plan_Overview
Unprotect_me Costs_per_year
Unprotect_me Labour_per_year
Unprotect_me Material_Planning
Unprotect_me CBOM
Unprotect_me WBS
Unprotect_me LOG_File
Unprotect_me Input_Data

If Admin_override = "Init123!" Then GoTo Ende

Protect_me Input_Values, "low"
Protect_me Project_Data, "high"
Protect_me Fleet_Configuration, "medium"
Protect_me Curr, "high"
Protect_me Dashboard, "medium"
Protect_me Cost_Summary, "medium"
Protect_me Reliability_Summary, "medium"
Protect_me Maintenance_Plan_Overview, "medium"
Protect_me Costs_per_year, "low"
Protect_me Labour_per_year, "low"
Protect_me Material_Planning, "low"
Protect_me CBOM, "low"
Protect_me WBS, "medium"
Protect_me LOG_File, "low"
Protect_me Input_Data, "low"

Ende:

Application.ScreenUpdating = True
Berechnen

End Sub
Attribute VB_Name = "SOnstige"
Option Explicit

Public SW As Long
Dim Schritt As Double
Dim L|fffd|nge As Double

Sub Delete_Content()

Dim Antwort_Del As String

Antwort_Del = MsgBox("Do you really want to delete that?", vbYesNo)

If Antwort_Del = vbYes Then
          
    Selection.ClearContents
    Selection.ClearFormats
    
End If

End Sub


Sub Price_Range()

Dim i As Integer
Dim i_Range As Integer
Dim i_Period As Integer
'Dim km_init As String
'Dim year_init As String
Dim Antwort_Spares As String
Dim Tabellen_Name As String
Dim Tab_Name_Project As String

Tabellen_Name = "Dashboard"
Tab_Name_Project = "Project Data"

Unprotect_me Tabellen_Name
Unprotect_me Tab_Name_Project

Worksheets(Tabellen_Name).Activate

Range("Range_Calc_in_Progress").Value = "x"

Call Application.GoTo(Range("A70"), True)


'km_init = Range("Annual_Mileage").Formula
'year_init = Range("Contract_Length").Formula

'Antwort_Spares = MsgBox("Switch off Initial Spares calculation to speed up the price range calculation?", vbYesNo)

'If Antwort_Spares = vbYes Then
    
'    Tabelle1.Calc_Off
    
'End If

i = 0
SW = 26
L|fffd|nge = 0
Schritt = ProgressForm.Label1.Width / SW
ProgressForm.Show 0

For i_Period = 2 To 3 Step 1
    
    For i_Range = 4 To 16 Step 1
        
        If Range("Analysis_Price_Range").Cells(i_Range, 1) = "" Then
        
            Range("Analysis_Price_Range").Cells(i_Range, i_Period).Value = ""
        
        Else
            
            Range("Analysis_Price_Range").Cells(i_Range, i_Period).Formula = Range("Analysis_Price_Range").Cells(1, 2).Formula
            
        End If
        
    Next i_Range
    
Next i_Period

For i_Period = 2 To 3 Step 1
    
    If Range("Analysis_Price_Range").Cells(i_Period, 7) = "" Then GoTo Next_Period
    
        For i_Range = 4 To 16 Step 1
            
            If Range("Analysis_Price_Range").Cells(i_Range, 1) = "" Then
            
            Else
                
                Range("Current_Range").Value = Range("Analysis_Price_Range").Cells(i_Range, 1)
                Range("Current_Period").Value = Range("Analysis_Price_Range").Cells(i_Period, 7)
                
                Berechnen
                
                Range("Analysis_Price_Range").Cells(i_Range, i_Period).Value = Range("Analysis_Price_Range").Cells(i_Range, i_Period).Value
                
            End If
            
            i = i + 1
            Progress i
            
        Next i_Range
        
Next_Period:
    
Next i_Period

'Range("Annual_Mileage").Formula = km_init
'Range("Contract_Length").Formula = year_init

Range("Range_Calc_in_Progress").Value = ""
Range("Current_Range").Value = ""
Range("Current_Period").Value = ""

Range("A70").Select

'If Antwort_Spares = vbYes Then
    
'    Tabelle1.Calc_On
    
'End If

Berechnen

ProgressForm.Hide

Protect_me Tabellen_Name, "medium"
Protect_me Tab_Name_Project, "high"

End Sub

Sub Update_Driver_Pivot()

'***************************************************
'Top Cost Driver und Top Labour Driver aktualisieren
'***************************************************

Dim Tabellen_Name As String
Dim Tab_Name_Additional_Pivot As String
Dim Tab_Name_Additional_Pivot2 As String
Dim Pivot_Name As String

Tabellen_Name = "Dashboard"
Tab_Name_Additional_Pivot = "Material Planning"
Tab_Name_Additional_Pivot2 = "Maintenance Plan & Overview"

Pivot_Name = "Material_Costs_Driver"

Unprotect_me Tabellen_Name
Unprotect_me Tab_Name_Additional_Pivot
Unprotect_me Tab_Name_Additional_Pivot2

    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).ClearAllFilters
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure ID Number").PivotFilters.Add Type:=xlTopCount, _
    DataField:=Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Material Costs Driver"), Value1:=50
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure Level").PivotFilters.Add Type:=xlCaptionEquals, Value1:="LRU"

    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure ID Number").AutoSort xlDescending, "Material Costs Driver"
    
 Pivot_Name = "Labour_Costs_Driver"
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).ClearAllFilters
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure ID Number").PivotFilters.Add Type:=xlTopCount, _
    DataField:=Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour Costs Driver"), Value1:=50
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure Level").PivotFilters.Add Type:=xlCaptionEquals, Value1:="LRU"
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Structure ID Number").AutoSort xlDescending, "Labour Costs Driver"
    
Protect_me Tab_Name_Additional_Pivot, "low"
Protect_me Tab_Name_Additional_Pivot2, "medium"
Protect_me Tabellen_Name, "medium"

End Sub

Sub Update_A_R()

Dim Tabellen_Name As String
Dim Pivot_Name As String
Tabellen_Name = "Dashboard"
Pivot_Name = "Avail_Reliab"


Unprotect_me Tabellen_Name

Worksheets(Tabellen_Name).PivotTables(Pivot_Name).RefreshTable

Protect_me Tabellen_Name, "medium"

End Sub

Sub Costs_per_year()

Application.ScreenUpdating = False

Dim Tabellen_Name As String
Dim Anzahl_Fahrzeuge As Integer

Tabellen_Name = "Costs per year"
Anzahl_Fahrzeuge = Range("No_Of_Vehicles")

Unprotect_me Tabellen_Name

Worksheets(Tabellen_Name).Range("E6:BC1505").ClearContents

Berechnen

'****************
'Nebenberechnung
'****************

Worksheets(Tabellen_Name).Range("E1506").Copy
Worksheets(Tabellen_Name).Range("E6:BC" & Anzahl_Fahrzeuge + 6).PasteSpecial xlFormulas

Worksheets(Tabellen_Name).Range("E1507").Copy
Worksheets(Tabellen_Name).Range("E506:BC" & Anzahl_Fahrzeuge + 506).PasteSpecial xlFormulas

Berechnen

Worksheets(Tabellen_Name).Range("E6:BC1005").Value = Worksheets(Tabellen_Name).Range("E6:BC1005").Value

'****************
'Hauptberechnung
'****************

Worksheets(Tabellen_Name).Range("E1508").Copy
Worksheets(Tabellen_Name).Range("E1006:BC1505").PasteSpecial xlFormulas

Berechnen

Worksheets(Tabellen_Name).Range("E1006:BC1505").Value = Worksheets(Tabellen_Name).Range("E1006:BC1505").Value

Berechnen

Protect_me Tabellen_Name, "low"

Worksheets(Tabellen_Name).Range("E1006").Select

End Sub

Sub Labour_per_year()

Application.ScreenUpdating = False

Dim Tabellen_Name As String
Dim Anzahl_Fahrzeuge As Integer

Tabellen_Name = "Labour per year"
Anzahl_Fahrzeuge = Range("No_Of_Vehicles")

Unprotect_me Tabellen_Name

Worksheets(Tabellen_Name).Range("E6:BC1505").ClearContents

Berechnen

'****************
'Nebenberechnung
'****************

Worksheets(Tabellen_Name).Range("E1506").Copy
Worksheets(Tabellen_Name).Range("E6:BC" & Anzahl_Fahrzeuge + 6).PasteSpecial xlFormulas

Worksheets(Tabellen_Name).Range("E1507").Copy
Worksheets(Tabellen_Name).Range("E506:BC" & Anzahl_Fahrzeuge + 506).PasteSpecial xlFormulas

Berechnen

Worksheets(Tabellen_Name).Range("E6:BC1005").Value = Worksheets(Tabellen_Name).Range("E6:BC1005").Value

'****************
'Hauptberechnung
'****************

Worksheets(Tabellen_Name).Range("E1508").Copy
Worksheets(Tabellen_Name).Range("E1006:BC1505").PasteSpecial xlFormulas

Berechnen

Worksheets(Tabellen_Name).Range("E1006:BC1505").Value = Worksheets(Tabellen_Name).Range("E1006:BC1505").Value

Berechnen

Protect_me Tabellen_Name, "low"

Worksheets(Tabellen_Name).Range("E1006").Select

End Sub

Sub Material_Planning()

Application.ScreenUpdating = False

Dim i As Integer
Dim i_step As Integer
Dim i_for_Progress As Integer
Dim i_max As Integer
Dim Tabellen_Name As String
Dim Tab_Name_Additional_Pivot As String
Dim Tab_Name_Additional_Pivot2 As String
Dim Pivot_Name As String
Dim Antwort_CBOM As String
Dim Antwort_Spares As String

Tabellen_Name = "Material Planning"
Tab_Name_Additional_Pivot = "Dashboard"
Tab_Name_Additional_Pivot2 = "Maintenance Plan & Overview"

Pivot_Name = "Material_Planning"

Berechnen

Unprotect_me Tabellen_Name
Unprotect_me Tab_Name_Additional_Pivot
Unprotect_me Tab_Name_Additional_Pivot2

If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData

If Application.WorksheetFunction.CountIf(Range("Labour_On"), 0) > 0 Then
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).RefreshTable
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc").ClearAllFilters
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc")
        .PivotItems("0").Visible = False
        .PivotItems("1").Visible = True
        .PivotItems("(blank)").Visible = False
    End With
    
Else

    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).RefreshTable
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc").ClearAllFilters
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Labour calc")
        '.PivotItems("0").Visible = False
        .PivotItems("1").Visible = True
        .PivotItems("(blank)").Visible = False
    End With
    
End If

If Range("Corrective_per_km") = 0 Then
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = False
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").ClearAllFilters
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").CurrentPage = "(All)"
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = True
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C")
        .PivotItems("(blank)").Visible = False
    End With
    
Else
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = False
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").ClearAllFilters
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").CurrentPage = "(All)"
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C").EnableMultiplePageItems = True
    
    Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotCache.Refresh
    
    With Worksheets(Tabellen_Name).PivotTables(Pivot_Name).PivotFields("Type S, E or C")
        .PivotItems("C").Visible = False
        .PivotItems("(blank)").Visible = False
    End With
    
End If

'Antwort_Spares = MsgBox("Switch off Initial Spares calculation to speed up the material planning?", vbYesNo)

'If Antwort_Spares = vbYes Then
    
'    Tabelle1.Calc_Off
    
'End If

Berechnen
    
i_max = Range("Material_Planning_Max").Value

SW = Range("Material_Planning_Max").Value - 2302
L|fffd|nge = 0
Schritt = ProgressForm.Label1.Width / (WorksheetFunction.RoundUp((SW) / 50, 0) + 1)
ProgressForm.Show 0

Worksheets(Tabellen_Name).Range("A2302:BK20320").ClearContents

For i = 2302 To i_max Step 50
    
    i_step = i + 49
    
    Worksheets(Tabellen_Name).Range("A1798:BK1798").Copy Worksheets(Tabellen_Name).Range("A" & i & ":BK" & i_step)
    
    Berechnen
    
    Worksheets(Tabellen_Name).Range("A" & i & ":BK" & i_step).Value = Worksheets(Tabellen_Name).Range("A" & i & ":BK" & i_step).Value
    
    i_for_Progress = i - 2302 + 49
    
    Progress i_for_Progress
    
Next i

Berechnen

ProgressForm.Hide

'If Antwort_Spares = vbYes Then
    
'    Tabelle1.Calc_On
'    Worksheets(Tabellen_Name).Select
    
'End If

Antwort_CBOM = MsgBox("Update the CBOM table?", vbYesNo)

If Antwort_CBOM = vbYes Then
    
'    CBOM_erstellen
    
End If

'Worksheets(Tabellen_Name).Select
'Range("B4").Select

Protect_me Tab_Name_Additional_Pivot, "medium"
Protect_me Tab_Name_Additional_Pivot2, "medium"
Protect_me Tabellen_Name, "low"

End Sub

Private Sub Progress(i As Integer)

L|fffd|nge = L|fffd|nge + Schritt
ProgressForm.Label2.Width = L|fffd|nge
ProgressForm.Label3.Caption = Format(L|fffd|nge / 182, "0 %")

DoEvents

End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
  If GetFieldWatchInputValues = True Then Exit Sub

  On Error GoTo On_Error
  
  '|fffd|nderungen |fffd|berschrift/Eintrag
  If Target.Column = 8 Or Target.Column = 2 Then
    If Cells(Target.Row, 8).Value = "EQT" Then
      Call IVFormatLineHeadLine(Target.Row)
    Else
      If Cells(Target.Row, 2).Value <> "" Then
        Call IVFormatLineSubEntry(Target.Row)
      Else
        Call IVFormatLineEntry(Target.Row)
      End If
    End If
  End If
 
On_Error:
  
End Sub


Private Sub CommandButton1_Click()
'Dim Antwort As String
'
'Antwort = MsgBox("CAUTION: This macro might delete comments or content which are in columns DY:EV below the LCC data, proceed?", vbYesNo)
'If Antwort = vbYes Then
'   If CommandButton1.BackColor = RGB(0, 255, 0) Then 'Wenn Schalter beim Dr|fffd|cken gr|fffd|n ist, dann werden die Formeln gel|fffd|scht
'      Calc_Off
'      GoTo Ende
'   End If
'   If CommandButton1.BackColor = RGB(255, 0, 0) Then 'Wenn Schalter beim Dr|fffd|cken rot ist, dann werden die Formeln eingef|fffd|gt
'      Calc_On
'      GoTo Ende
'   End If
'End If
'Ende:

End Sub

Sub Calc_On()
'Dim i_start As Integer
'Dim i_max As Integer
'Dim i_total As Integer
'Dim Tabellen_Name As String
'Dim protect_status As Boolean
'
'Application.ScreenUpdating = False
'
'i_start = 8                     ' Zeilennummer ab der die CBOM-Liste starten soll (unter der |fffd|berschrift)
'Tabellen_Name = "Input Values"  ' Name der Tabelle
'i_total = Range("Structure_ID").Rows.Count + i_start
'i_max = Worksheets(Tabellen_Name).Range("A" & i_start & ":A" & i_total).End(xlDown).Row
'
'   With Worksheets(Tabellen_Name)
'        If .ProtectContents Then
'            Unprotect_me Tabellen_Name
'            protect_status = True
'        End If
'   End With
'
'   If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData
'   CommandButton1.BackColor = RGB(0, 255, 0)
'   CommandButton1.Caption = "Spares Calc On"
'
'   '29 F|fffd|gt die Formeln in den 2 Block der LCC Costs - Spalten ein
'   Worksheets(Tabellen_Name).Range("DY4:EE4").Copy
'   Worksheets(Tabellen_Name).Range("LCC_Formulas2").PasteSpecial xlFormulas
'   Worksheets(Tabellen_Name).Range("DY" & i_max + 1 & ":EE" & i_total).ClearContents
'   Formel_Schutz "LCC_Formulas2"
'
'   '30 F|fffd|gt die Formeln in den 3 Block der LCC Costs - Spalten ein
'   Worksheets(Tabellen_Name).Range("EG4:EI4").Copy
'   Worksheets(Tabellen_Name).Range("LCC_Formulas3").PasteSpecial xlFormulas
'   Worksheets(Tabellen_Name).Range("EG" & i_max + 1 & ":EI" & i_total).ClearContents
'   Formel_Schutz "LCC_Formulas3"
'
'   '31 F|fffd|gt die Formeln in den 4 Block der LCC Costs - Spalten ein
'   Worksheets(Tabellen_Name).Range("EK4:EV4").Copy
'   Worksheets(Tabellen_Name).Range("LCC_Formulas4").PasteSpecial xlFormulas
'   Worksheets(Tabellen_Name).Range("EK" & i_max + 1 & ":EV" & i_total).ClearContents
'   Formel_Schutz "LCC_Formulas4"
'
'   Berechnen
'
'   If protect_status = True Then Protect_me Tabellen_Name, "low"
'
'End Sub
'
'Sub Calc_Off()
'Dim i_start As Integer
'Dim Tabellen_Name As String
'
'Application.ScreenUpdating = False
'
'i_start = 8                     ' Zeilennummer ab der die CBOM-Liste starten soll (unter der |fffd|berschrift)
'Tabellen_Name = "Input Values"  ' Name der Tabelle
'
'   With Worksheets(Tabellen_Name)
'        If .ProtectContents Then
'           Unprotect_me Tabellen_Name
'           protect_status = True
'        End If
'   End With
'
'   If Worksheets(Tabellen_Name).FilterMode Then Worksheets(Tabellen_Name).ShowAllData
'
'   CommandButton1.BackColor = RGB(255, 0, 0)
'   CommandButton1.Caption = "Spares Calc Off"
'
'   'L|fffd|scht die Formeln im 2. Block der LCC Costs - Spalten
'   Worksheets(Tabellen_Name).Range("LCC_Formulas2").ClearContents
'
'   'L|fffd|scht die Formeln im 3. Block der LCC Costs - Spalten
'   Worksheets(Tabellen_Name).Range("LCC_Formulas3").ClearContents
'
'   'L|fffd|scht die Formeln im 4. Block der LCC Costs - Spalten
'   Worksheets(Tabellen_Name).Range("LCC_Formulas4").ClearContents
'
'   Berechnen
'
'   If protect_status = True Then Protect_me Tabellen_Name, "low"

End Sub

Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Activate()
'Dim Antwort_GoTo As String
'Antwort_GoTo = MsgBox("This page is for export to the BidMCM only. Please use the ''Export to BidMCM'' button if you want to update it." & vbCrLf & vbCrLf & "Do you want to jump to the ''Input Values'' now?", vbYesNo)

   'If Antwort_GoTo = vbYes Then Worksheets("Input Values").Activate

'End Sub
Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "DrDnSystem, 4, 0, MSForms, ComboBox"
'Option Explicit

Dim m_worksheetChangeStatus As Boolean
Dim m_selectedVehicle As String

'########################## Spaltenkonfiguration Input Values ##########################
'# Spalte  # Inhalt                                                                    #
'#---------#---------------------------------------------------------------------------#
'# 001     # System (according to VBS structure                                        #
'# 002     # Filepath                                                                  #
'# 003-008 # Quantity Informations                                                     #
'# 009     # Import Info                                                               #
'# 010     # User Comment                                                              #
'# 011     # Empty                                                                     #
'# 012-018 # System Life Cycle Cost Overview                                           #
'# 019     # Empty                                                                     #
'# 020-025 # System Reliability Overview                                               #
'# 026-027 # Empty                                                                     #
'# 028-033 # Old Quantity Informations                                                 #
'# 034-039 # Calculated Status (-(not Calculated); +(Calculated))                      #
'#   0  #
'#   0  #
'#   0  #
'#######################################################################################

Private Sub Worksheet_Change(ByVal Target As Range)
  If m_worksheetChangeStatus = True Then Exit Sub
  m_worksheetChangeStatus = True
  On Error GoTo On_Error
  m_selectedVehicle = Cells(2, 10).Value
  
  '|fffd|nderungen Quantity
  If Target.Row > 6 And Target.Column > 2 And Target.Column < 9 And Target.Row > 6 And Cells(5, Target.Column).Value = m_selectedVehicle Then
    'Ausgew|fffd|hltes Fahrzeug
    If Cells(Target.Row, 2).Value = "" Then
      'File nicht vorhanden
      Target.Value = ""
    Else
      Target.Value = CInt(Target.Value)
      If Cells(5, Target.Column).Value = m_selectedVehicle Then
        If Target.Value > 0 Then
          Cells(Target.Row, 1).Interior.ColorIndex = 4 'gr|fffd|n
        Else
          Cells(Target.Row, 1).Interior.ColorIndex = 3 'rot
          Target.Value = 0
        End If
        Call SetImportInfo(Target.Row, Cells(Target.Row, Target.Column).Value, Cells(Target.Row, Target.Column + 25).Value)
      End If
    End If

  Else
    'Nicht das ausgew|fffd|hlte Fahrzeug
    If Cells(Target.Row, 2).Value = "" Then
      'File nicht vorhanden
      If Cells(Target.Row, Target.Column).Value <> "" Then
        Cells(Target.Row, 1).Interior.ColorIndex = 0
        Cells(Target.Row, 9).Interior.Color = RGB(171, 158, 153) 'RGB Farbe (Zelle nicht bearbeitbar)
      End If
      Cells(Target.Row, 1).Value = ""
      Cells(Target.Row, 3).Value = ""
      Cells(Target.Row, 4).Value = ""
      Cells(Target.Row, 5).Value = ""
      Cells(Target.Row, 6).Value = ""
      Cells(Target.Row, 7).Value = ""
      Cells(Target.Row, 8).Value = ""
      Cells(Target.Row, 9).Value = ""
    Else
      'File vorhanden
      If Cells(5, Target.Column).Value = "0" Then
        'Fahrzeug nicht konfiguriert
        Target.Value = ""
      End If
    End If
  End If
  
On_Error:
  m_worksheetChangeStatus = False
End Sub

Private Sub SetImportInfo(ByVal zeile As Integer, ByVal myQuantityNew As Integer, ByVal myQuantityOld As Integer)
  If myQuantityOld = 0 Then
    If myQuantityNew > 0 Then
      Cells(zeile, 9).Interior.ColorIndex = 6 'gelb
      Cells(zeile, 9).Value = "Quantity Changed"
    Else
      Cells(zeile, 9).Interior.Color = RGB(171, 158, 153) 'RGB Farbe (Zelle nicht bearbeitbar)
      Cells(zeile, 9).Value = ""
    End If
    Exit Sub
  End If
  If myQuantityNew > 0 And myQuantityOld = myQuantityNew Then
    Cells(zeile, 9).Interior.ColorIndex = 4 'gr|fffd|n
    Cells(zeile, 9).Value = "Calculated"
    Exit Sub
  End If
  If myQuantityOld > 0 Then
    If myQuantityNew > 0 Then
      Cells(zeile, 9).Interior.ColorIndex = 6 'gelb
      Cells(zeile, 9).Value = "Quantity Changed"
    Else
      Cells(zeile, 9).Interior.ColorIndex = 6 'gelb
      Cells(zeile, 9).Value = "Quantity Changed"
    End If
    Exit Sub
  End If
  
End Sub

'======[Eingef|fffd|gt von Ingo@SWMS]================

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Dim str As String
Dim cboTemp As OLEObject
Dim ws As Worksheet
Set ws = ActiveSheet

Set cboTemp = ws.OLEObjects("DrDnSystem")
On Error Resume Next
With cboTemp
     'clear and hide the combo box
     .ListFillRange = ""
     .LinkedCell = ""
     .Visible = False
End With
On Error GoTo errHandler
If Target.Validation.Type = 3 Then
    'if the cell contains a data validation list
   Cancel = True
   Application.EnableEvents = False
   'get the data validation formula
   str = Target.Validation.Formula1
   str = Right(str, Len(str) - 1)
   With cboTemp
        'show the combobox with the list
        .Visible = True
        .Left = Target.Left
        .Top = Target.Top
        .Width = Target.Width + 5
        .Height = Target.Height + 5
        .ListFillRange = str
        .LinkedCell = Target.Address
   End With
   cboTemp.Activate
   'open the drop down list automatically
   Me.DrDnSystem.DropDown
End If
  
errHandler:
   Application.EnableEvents = True
   Exit Sub

End Sub
'=========================================
Private Sub DrDnSystem_LostFocus()
With Me.DrDnSystem
     .Top = 10
     .Left = 10
     .Width = 0
     .ListFillRange = ""
     .LinkedCell = ""
     .Visible = False
     .Value = ""
End With
'Me.DrDnSystem.Visible = True   '// zum ein-/ausblenden f|fffd|r die Entwicklung
End Sub
 '====================================
'Optional code to move to next cell
'if Tab or Enter are pressed
'from code by Ted Lanham
'***NOTE: if KeyDown causes problems,
'change to KeyUp
'Table with numbers for other keys
'such as Right Arrow (39)
'https://msdn.microsoft.com/en-us/library/aa243025%28v=vs.60%29.aspx

Private Sub DrDnSystem_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
Select Case KeyCode
       Case 9 'Tab
            ActiveCell.offset(0, 1).Activate
       Case 13 'Enter
            ActiveCell.offset(1, 0).Activate
       Case Else
            'do nothing
End Select
End Sub


Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
If Not Intersect(Target, Range("F6:V35")) Is Nothing Then
   Select Case Target.Value
          Case Empty
               Target.Value = "|fffd|"
          Case "|fffd|"
               Target.Value = "|fffd|"
          Case "|fffd|"
               Target.Value = "x"
          Case "x"
               Target.Value = "|fffd|"
   End Select
   Range("E" & Target.Row).Select
End If

If Not Intersect(Target, Range("E6:E35")) Is Nothing Then
   Select Case Target.Value
          Case Empty
               Range("E" & Target.Row & ":V" & Target.Row).Value = "|fffd|"
          Case "|fffd|"
               Range("E" & Target.Row & ":V" & Target.Row).Value = "|fffd|"
          Case "|fffd|"
               Range("E" & Target.Row & ":V" & Target.Row).Value = "x"
          Case "x"
               Range("E" & Target.Row & ":V" & Target.Row).Value = "|fffd|"
   End Select
   Range("D" & Target.Row).Select

End If

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'SWMS
'Zufall: Row-Nr. = Col.-Nr!!!

Dim lngNextRow As Long
Dim bolTargetIsEmpty As Boolean

lngNextRow = Target.Row + 1
bolTargetIsEmpty = IsEmpty(Target.Value)
'Stop
   
If Not IsEmpty(Range("B" & lngNextRow).Value) And bolTargetIsEmpty Then     'If currency is deleted in the middle of the list
   MsgBox "It is not allowed to delete a currency in the middle of the list!", vbInformation, "Delete not allowed!"
   Application.Undo
   Else
   If Not Application.Intersect(Target, Range("B4:B13")) Is Nothing Then    'As long as the user is editing B4:B13
      ActiveSheet.Columns(Target.Row).Hidden = bolTargetIsEmpty
      If Target.Row < 13 Then
         ActiveSheet.Rows(lngNextRow).Hidden = bolTargetIsEmpty
         Range("B" & lngNextRow + bolTargetIsEmpty).Select
         Else                                                               'Last row is special: no hide of next row
         Range("B13").Select
      End If
   End If
End If

End Sub

Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "sCalculateIV"
'Funktionen zur Kalkulation der Input Values
Option Explicit

'Read & Write Data
Private Const gFirstInputRow = 11
Private gLastInputRow As Integer
Private gInputValuesData As Variant
Private gInputValuesInformationData As Variant

'Project Data
Private gTrainNumberOfVehicle As Integer ' nr_of_ve
Private gTrainDataKilometersYear As Long ' MILEAGE
Private gTrainDataStandardWarrantyPeriod As Integer
Private gTrainDataStandardWarrantyMaterial As String
Private gTrainDataOverhaulLastYear As Boolean
Private gTrainDataContractStartDate As Date
Private gTrainDataContractFinishDate As Date
Private gTrainDataContractEndsAllVehicles As Boolean
Private gTrainDataContractLength As Integer 'CONT_LEN
Private gTrainTypeNumberOfComponentsColumn As Integer
Private gCurrencyOutputRT As Double
Private gCurrencyInputRT As Double
Private gInflationEndDate As String
Private gAdditionalMaterialFaktor As String
Private gLabourCostsPerEvent As Double   'WW: Arbeitskosten pro Event, -> f|fffd|r Jahresscheibenberechnung
Private gLabourRateEURJobTitle01 As Double
Private gLabourRateEURJobTitle02 As Double
Private gLabourRateEURJobTitle03 As Double
Private gLabourRateEURJobTitle04 As Double
Private gLabourRateEURJobTitle05 As Double
Private gLabourTime As String
Private gMinimumLabourUnitFP As Double 'E23
Private gMinimumLabourUnitAfterFP As Double 'E24
Private gWorkingHoursPerDay As Double 'E25
Private gStandardLeadTime As Double 'VarLT E33
Private gSupplierRepairTime As Double 'VarSRT E34    WW: name ge|fffd|ndert auf ..Supplier... statt ..Suplier...
Private gOrderandShippingTime As Double 'E35
Private gOutputUnitMaintenanceSchedule As String 'E11
Private gOutputUnitReliabilityFigures As String 'E12
Private gInefficiencyRate As Double
Private gMaintenanceDefinition As String 'E44-49
Private gTrainColumn As Integer

Private gEventDurationH As Double 'WW: globale Variable f|fffd|r Durchlaufzeit

'Summen Input Value

Private sSumOfLabourCosts As Double
Private sSumOfMaterialCosts As Double
Private sSumOfTotalCosts As Double
Private sSumOfFailureCalc01 As Double 'VarZuvSum
Private sSumOfFailureCalc02 As Double
Private sSumOfFailureCalc03 As Double
Private sSumOfFailureCalc04 As Double
Private sSumOfFailureCalc05 As Double
Private sSumOfFailureCalc06 As Double

'Input Values Columns
Private Const rLevelOfMaintenance = 21 'U
Private Const rTypeOfMaintenance = 22 'V
Private Const rScheduledMaintenanceFreqSup = 23 'W
Private Const rScheduledMaintenanceUnitSup = 24 'X
Private Const rScheduledMaintenanceFreqBT = 25 'Y
Private Const rScheduledMaintenanceUnitBT = 26 'Z
Private Const rFehlerklasse01 = 27 'AA
Private Const rFehlerklasse02 = 28 'AB
Private Const rFehlerklasse03 = 29 'AC
Private Const rFehlerklasse04 = 30 'AD
Private Const rFehlerklasse05 = 31 'AE
Private Const rFehlerklasse06 = 32 'AF
Private Const rFailureUnit = 33 'AG
Private Const rSelectedFrequencyForCalculation = 35 'AI
Private Const rSelectedUnitForCalculation = 36 'AJ
Private Const rFrequencySelection = 37
Private Const rFrequencyOffset = 38
Private Const rAnnualOperatingHours = 39 'AM
Private Const rAnnualOperatingCycles = 40 'AN

Private Const rTaskTime = 42
Private Const rCrewSize = 43 'AQ
Private Const rJobTitle01 = 44
Private Const rJobTitle02 = 45
Private Const rJobTitle03 = 46
Private Const rJobTitle04 = 47
Private Const rJobTitle05 = 48

Private Const rFirstColumnTrainTypeNumberOfComponents = 50
Private Const rFirstColumnNumberOfComponents = 56

Private Const rScrapRate = 73
Private Const rRepairPrice = 74
Private Const rCurrencyRepair = 75
Private Const rReplacePrice = 76
Private Const rCurrencyReplace = 77
Private Const rCostBaseDate = 78

Private Const rInitialSparePrice = 84
Private Const rCurrencyInitialSpare = 85

Private Const rWarrantyPeriod = 87  'WW: individual warranty period
Private Const rSupplierRepairTime = 88
Private Const rLeadTimeDays = 89

Private Const rEventPrice = 95
Private Const rEventLabourTime = 96 'CR
Private Const rEventDuration = 97 'CS
Private Const rLabourCostPerEvent = 98 'CT
Private Const rEventsOverXYearsPV = 99 'CU

Private Const rLabourCostPVoverXYears = 100

Private Const rMaterialCostsPV = 101
Private Const rTotalCostsPV = 102
Private Const rPercentageOfLybourCosts = 103
Private Const rPercentageOfMaterialCosts = 104
Private Const rPercentageOfTotalCosts = 105
Private Const rChosenFrequencyYears = 107 'DC    WW: name ge|fffd|ndert von rChoosenFrequenzyDays

Private Const rPercentTotalFailure01 = 159
Private Const rPercentTotalFailure02 = 160
Private Const rPercentTotalFailure03 = 161
Private Const rPercentTotalFailure04 = 162
Private Const rPercentTotalFailure05 = 163
Private Const rPercentTotalFailure06 = 164

Private Const rFailurerateTenVehicles = 166
Private Const rFailurerateInitialSpareCalc = 168
Private Const rMeanCycleTime = 169
Private Const rProbabilitySparesAvailability = 170

Private Const rVehicleDepots = 172
Private Const rCalculatedInitialSpareStocks = 176
Private Const rInitialSparerStockMainDepot = 179
Private Const rInitialSparerStockTenVehicle = 180

Private Const rInitialSparerStockAutomatic = 181
Private Const rInitialSparerStockTotal = 182

Private Const rMeanCycleTimeWithoutSPS = 184      'WW: mean cycle time withouT SPS
Private Const rMeanCycleTimeWithSPS = 185
Private Const rEventsPYandPV = 186
Private Const rInherentAv = 187
Private Const rAchievedAV = 188
Private Const rOperationalAV = 189

Private Const rFirstUnusedColumnForCalculation = 195

'Project Data For IV Rows
Private rMaintenanceTypSet As Boolean
Private rMaintenanceRow As Integer


'Functions

Sub CalculateCostsByMT(ByVal Row As Integer) 'CT

  'Abbruch, wenn MaintenanceTyp nicht angegeben
  If rMaintenanceTypSet = False Then Exit Sub

  Dim Ergebnis As Double
   
  Dim VarZT As Integer
  VarZT = gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn)
  
  Dim SelectedFrequencyForCalculation As Double 'AI
  SelectedFrequencyForCalculation = gInputValuesData(Row, rSelectedFrequencyForCalculation)
  
  Dim AnnualOperatingHours As Double 'AM
  AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
  
  Dim AnnualOperatingCycles As Double 'AN
  AnnualOperatingCycles = gInputValuesData(Row, rAnnualOperatingCycles)
  
  Dim SelectedUnitForCalculation As String 'AJ
  SelectedUnitForCalculation = gInputValuesData(Row, rSelectedUnitForCalculation)
  
  Dim FrequencyOffset As Double 'AL
  FrequencyOffset = gInputValuesData(Row, rFrequencyOffset)
   
  Dim Interval_factor As Double
  If SelectedUnitForCalculation = "" Then Exit Sub
  Select Case SelectedUnitForCalculation
    Case "KM"
      If gTrainDataKilometersYear > 0 Then Interval_factor = 1 / gTrainDataKilometersYear
    Case "Miles"
      If gTrainDataKilometersYear > 0 Then Interval_factor = 1.60934 / gTrainDataKilometersYear
    Case "Hours"
      If AnnualOperatingHours > 0 Then Interval_factor = 1 / AnnualOperatingHours
    Case "Days"
      Interval_factor = 1 / 365.25
    Case "Weeks"
      Interval_factor = 1 / 52
    Case "Month"
      Interval_factor = 1 / 12
    Case "Years"
      Interval_factor = 1
    Case "Cycle"
      If AnnualOperatingCycles > 0 Then Interval_factor = 1 / AnnualOperatingCycles
    Case "once km"
      If gTrainDataKilometersYear > 0 Then Interval_factor = 1 / gTrainDataKilometersYear
    Case "once hours"
      If AnnualOperatingHours > 0 Then Interval_factor = 1 / AnnualOperatingHours
  End Select
     
  'WW: Overhaul in the last year?
  Dim OHLastYear As Integer
  If Not gTrainDataOverhaulLastYear And gInputValuesData(Row, rTypeOfMaintenance) = "OH" Then
    OHLastYear = 1
  End If

  If SelectedUnitForCalculation = "" Then Exit Sub
  Select Case SelectedUnitForCalculation
    Case "KM"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Miles"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Hours"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Days"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Weeks"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Month"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Years"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "Cycle"
      If Interval_factor = 0 Then Exit Sub
      If SelectedFrequencyForCalculation = 0 Then Exit Sub
      Ergebnis = WorksheetFunction.RoundDown((gTrainDataContractLength - OHLastYear - FrequencyOffset * Interval_factor) / (SelectedFrequencyForCalculation * Interval_factor), 0)
    Case "once km"
      If gTrainDataContractLength < Interval_factor * SelectedFrequencyForCalculation - OHLastYear Then
        Ergebnis = 0
      Else
        Ergebnis = 1
      End If
    Case "once hours"
      If gTrainDataContractLength < Interval_factor * SelectedFrequencyForCalculation - OHLastYear Then
        Ergebnis = 0
      Else
        Ergebnis = 1
      End If
    Case "FPMK"
      Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation * gTrainDataKilometersYear / 1000000
    Case "FPMM"
      Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation * gTrainDataKilometersYear / 1.60934 / 1000000
    Case "MDBF(Km)"
      If SelectedFrequencyForCalculation > 0 Then Ergebnis = gTrainDataContractLength * gTrainDataKilometersYear / SelectedFrequencyForCalculation
    Case "MDBF(Mi)"
      If SelectedFrequencyForCalculation > 0 Then Ergebnis = gTrainDataContractLength * gTrainDataKilometersYear / SelectedFrequencyForCalculation / 1.60934
    Case "MTBF"
      If SelectedFrequencyForCalculation > 0 Then Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation / SelectedFrequencyForCalculation
    Case "FIT"
      Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation * AnnualOperatingHours / 1000000000
    Case "FPMH"
      Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation * AnnualOperatingHours / 1000000
    Case "FPMC"
      Ergebnis = gTrainDataContractLength * SelectedFrequencyForCalculation * AnnualOperatingCycles / 1000000
  End Select

  gInputValuesData(Row, rEventsOverXYearsPV) = Ergebnis * VarZT     'WW: hier muss noch die Anzahl der Komponenten CarZT ber|fffd|cksichtigt werden

End Sub

Sub CalculateFrequencys(ByVal Row As Integer) 'DB, AI, AJ

  Dim ErgebnisDB As Double
  Dim ErgebnisAI As Double
  Dim ErgebnisAJ As String
  
  Dim VarA As Double
  Dim VarB As Double
  Dim VarC As Double
  Dim VarD As String
  Dim VarE As Double
  Dim VarF As Double
  
  Dim AnnualOperatingHours As Double 'AM
  AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
  
  Dim AnnualOperatingCycles As Double 'AN
  AnnualOperatingCycles = gInputValuesData(Row, rAnnualOperatingCycles)
  
  Dim ScheduledMaintenanceFreqSup As Double 'W
  ScheduledMaintenanceFreqSup = gInputValuesData(Row, rScheduledMaintenanceFreqSup)
  
  Dim ScheduledMaintenanceUnitSup As String 'X
  ScheduledMaintenanceUnitSup = gInputValuesData(Row, rScheduledMaintenanceUnitSup)
  
  Dim ScheduledMaintenanceFreqBT As Double 'Y
  ScheduledMaintenanceFreqBT = gInputValuesData(Row, rScheduledMaintenanceFreqBT)
  
  Dim ScheduledMaintenanceUnitBT As String 'Z
  ScheduledMaintenanceUnitBT = gInputValuesData(Row, rScheduledMaintenanceUnitBT)


  If gMaintenanceDefinition = "" Then Exit Sub
  
  If gMaintenanceDefinition = "Preventive" Then
  
    Dim FrequencySelection As String
    FrequencySelection = gInputValuesData(Row, rFrequencySelection)
    
    If FrequencySelection = "BT" Or FrequencySelection = "SUPPLIER" Then    'WW: SUPPLIER statt Supplier
        Select Case FrequencySelection
          Case "BT"
            VarC = ScheduledMaintenanceFreqBT
            VarD = ScheduledMaintenanceUnitBT
          Case "SUPPLIER"      'WW: wie oben: SUPPLIER
            VarC = ScheduledMaintenanceFreqSup
            VarD = ScheduledMaintenanceUnitSup
        End Select
        Select Case VarD
          Case "KM"
            If gTrainDataKilometersYear > 0 Then ErgebnisDB = VarC / gTrainDataKilometersYear
          Case "Miles"
            If gTrainDataKilometersYear > 0 Then ErgebnisDB = VarC * 1.60934 / gTrainDataKilometersYear
          Case "Hours"
            If AnnualOperatingHours > 0 Then ErgebnisDB = VarC / AnnualOperatingHours
          Case "Days"
            ErgebnisDB = VarC / 365.25
          Case "Weeks"
            ErgebnisDB = VarC * 7 / 365.25
          Case "Month"
            ErgebnisDB = VarC / 12
          Case "Years"
            ErgebnisDB = VarC
          Case "Cycle"
            If AnnualOperatingCycles > 0 Then ErgebnisDB = VarC / AnnualOperatingCycles
          Case "once km"
            If gTrainDataKilometersYear > 0 Then ErgebnisDB = VarC / gTrainDataKilometersYear
          Case "once hours"
            If AnnualOperatingHours > 0 Then ErgebnisDB = VarC / AnnualOperatingHours
        End Select
        Select Case gOutputUnitMaintenanceSchedule
          Case "KM"
            If gTrainDataKilometersYear > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * gTrainDataKilometersYear
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Miles"
            If gTrainDataKilometersYear > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * gTrainDataKilometersYear * 1.60934
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Hours"
            If AnnualOperatingHours > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * AnnualOperatingHours
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Days"
            ErgebnisAI = ErgebnisDB
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Weeks"
            ErgebnisAI = ErgebnisDB / 7
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Month"
            ErgebnisAI = ErgebnisDB / 12
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Years"
            ErgebnisAI = ErgebnisDB / 365.25
            ErgebnisAJ = gOutputUnitMaintenanceSchedule
          Case "Unchanged"
            ErgebnisAI = VarC
            ErgebnisAJ = VarD
        End Select
    Else
      If FrequencySelection = "WHATEVER COMES FIRST" Or FrequencySelection = "WHATEVER COMES LATEST" Then
          Select Case ScheduledMaintenanceUnitSup
            Case "KM"
              VarA = ScheduledMaintenanceFreqSup
            Case "Miles"
              VarA = ScheduledMaintenanceFreqSup * 1.60934
            Case "Hours"
              If AnnualOperatingHours > 0 Then VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / AnnualOperatingHours)
            Case "Days"
              VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / 365.25)
            Case "Weeks"
              VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / (365.25 / 7))
            Case "Month"
              VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / 12)
            Case "Years"
              VarA = gTrainDataKilometersYear * ScheduledMaintenanceFreqSup
            Case "Cycle"
              If rAnnualOperatingCycles > 0 Then VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / AnnualOperatingCycles)
            Case "once km"
              VarA = ScheduledMaintenanceFreqSup
            Case "once hours"
              If AnnualOperatingHours > 0 Then VarA = gTrainDataKilometersYear * (ScheduledMaintenanceFreqSup / AnnualOperatingHours)
          End Select
          Select Case ScheduledMaintenanceUnitBT
            Case "KM"
              VarB = ScheduledMaintenanceFreqBT
            Case "Miles"
              VarB = ScheduledMaintenanceFreqBT * 1.60934
            Case "Hours"
              If AnnualOperatingHours > 0 Then VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / AnnualOperatingHours)
            Case "Days"
              VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / 365.25)
            Case "Weeks"
              VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / (365.25 / 7))
            Case "Month"
              VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / 12)
            Case "Years"
              VarB = gTrainDataKilometersYear * ScheduledMaintenanceFreqBT
            Case "Cycle"
              If rAnnualOperatingCycles > 0 Then VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / AnnualOperatingCycles)
            Case "once km"
              VarB = ScheduledMaintenanceFreqBT
            Case "once hours"
              If AnnualOperatingHours > 0 Then VarB = gTrainDataKilometersYear * (ScheduledMaintenanceFreqBT / AnnualOperatingHours)
          End Select
          Dim OperatorCheck As Boolean
          Select Case FrequencySelection
            Case "WHATEVER COMES FIRST"
              OperatorCheck = VarA >= VarB
            Case "WHATEVER COMES LATEST"
              OperatorCheck = VarA <= VarB
          End Select
          Select Case OperatorCheck
            Case True
              If gTrainDataKilometersYear > 0 Then ErgebnisDB = VarB / gTrainDataKilometersYear
              VarD = ScheduledMaintenanceUnitBT
              VarE = ScheduledMaintenanceFreqBT
            Case False
              If gTrainDataKilometersYear > 0 Then ErgebnisDB = VarA / gTrainDataKilometersYear
              VarD = ScheduledMaintenanceUnitSup
              VarE = ScheduledMaintenanceFreqSup
          End Select
          Select Case gOutputUnitMaintenanceSchedule
            Case "KM"
              If gTrainDataKilometersYear > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * gTrainDataKilometersYear
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Miles"
              If gTrainDataKilometersYear > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * gTrainDataKilometersYear * 1.60934
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Hours"
              If AnnualOperatingHours > 0 Then ErgebnisAI = ErgebnisDB / 365.25 * AnnualOperatingHours
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Days"
              ErgebnisAI = ErgebnisDB
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Weeks"
              ErgebnisAI = ErgebnisDB / 7
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Month"
              ErgebnisAI = ErgebnisDB / 12
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Years"
              ErgebnisAI = ErgebnisDB / 365.25
              ErgebnisAJ = gOutputUnitMaintenanceSchedule
            Case "Unchanged"
              ErgebnisAI = VarE
              ErgebnisAJ = VarD
          End Select
      End If
    End If
  Else
    ErgebnisAJ = gOutputUnitReliabilityFigures
    Dim FailureUnit As String
    FailureUnit = gInputValuesData(Row, rFailureUnit)
    
    Dim VarF01 As Double
    Dim VarF02 As Double
    Dim VarF03 As Double
    Dim VarF04 As Double
    Dim VarF05 As Double
    Dim VarF06 As Double
    Dim VarF01T As Double
    Dim VarF02T As Double
    Dim VarF03T As Double
    Dim VarF04T As Double
    Dim VarF05T As Double
    Dim VarF06T As Double
  
    VarF01 = gInputValuesData(Row, rFehlerklasse01)
    VarF02 = gInputValuesData(Row, rFehlerklasse02)
    VarF03 = gInputValuesData(Row, rFehlerklasse03)
    VarF04 = gInputValuesData(Row, rFehlerklasse04)
    VarF05 = gInputValuesData(Row, rFehlerklasse05)
    VarF06 = gInputValuesData(Row, rFehlerklasse06)
    
    If gInputValuesData(Row, rFehlerklasse01) > 0 Then VarF01T = 1 / gInputValuesData(Row, rFehlerklasse01)
    If gInputValuesData(Row, rFehlerklasse02) > 0 Then VarF02T = 1 / gInputValuesData(Row, rFehlerklasse02)
    If gInputValuesData(Row, rFehlerklasse03) > 0 Then VarF03T = 1 / gInputValuesData(Row, rFehlerklasse03)
    If gInputValuesData(Row, rFehlerklasse04) > 0 Then VarF04T = 1 / gInputValuesData(Row, rFehlerklasse04)
    If gInputValuesData(Row, rFehlerklasse05) > 0 Then VarF05T = 1 / gInputValuesData(Row, rFehlerklasse05)
    If gInputValuesData(Row, rFehlerklasse06) > 0 Then VarF06T = 1 / gInputValuesData(Row, rFehlerklasse06)
        
    Select Case FailureUnit
      Case "FPMK"
        VarF = VarF01 + VarF02 + VarF03 + VarF04 + VarF05 + VarF06
      Case "FPMM"
        VarF = (VarF01 + VarF02 + VarF03 + VarF04 + VarF05 + VarF06) / 1.60934
      Case "MDBF(Km)"
        VarF = (VarF01T + VarF02T + VarF03T + VarF04T + VarF05T + VarF06T) * 10 ^ 6
      Case "MDBF(Mi)"
        VarF = (VarF01T + VarF02T + VarF03T + VarF04T + VarF05T + VarF06T) * 10 ^ 6 / 1.60934
      Case "MTBF"
        If gTrainDataKilometersYear > 0 Then VarF = (VarF01T + VarF02T + VarF03T + VarF04T + VarF05T + VarF06T) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear
      Case "FIT"
        If gTrainDataKilometersYear > 0 And AnnualOperatingHours > 0 Then VarF = (VarF01 + VarF02 + VarF03 + VarF04 + VarF05 + VarF06) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear
      Case "FPMH"
        If gTrainDataKilometersYear > 0 Then VarF = (VarF01 + VarF02 + VarF03 + VarF04 + VarF05 + VarF06) * AnnualOperatingHours / gTrainDataKilometersYear
      Case "FPMC"
        If gTrainDataKilometersYear > 0 Then VarF = (VarF01 + VarF02 + VarF03 + VarF04 + VarF05 + VarF06) * AnnualOperatingCycles / gTrainDataKilometersYear
    End Select
    Select Case gOutputUnitReliabilityFigures
      Case "FPMK"
        ErgebnisAI = VarF
      Case "FPMM"
        ErgebnisAI = VarF * 1.60934
      Case "MDBF(Km)"
        ErgebnisAI = 1 / VarF * 1000000   'WW: 1/... eingef|fffd|gt
      Case "MDBF(Mi)"
        ErgebnisAI = 1 / VarF * 1000000 / 1.60934   'WW: 1/... eingef|fffd|gt
      Case "MTBF"
        If gTrainDataKilometersYear > 0 Then ErgebnisAI = 1 / VarF * AnnualOperatingHours / gTrainDataKilometersYear * 1000000 'WW: 1/... eingef|fffd|gt
      Case "FIT"
        If AnnualOperatingHours > 0 Then ErgebnisAI = VarF * 1000 * gTrainDataKilometersYear / AnnualOperatingHours   'WW: * 1 000 statt 1 000 000
      Case "FPMH"
        If AnnualOperatingHours > 0 Then ErgebnisAI = VarF * gTrainDataKilometersYear / AnnualOperatingHours
      Case "FPMC"
        If AnnualOperatingCycles > 0 Then ErgebnisAI = VarF * gTrainDataKilometersYear / AnnualOperatingCycles
    End Select
    If gTrainDataKilometersYear > 0 And VarF > 0 Then ErgebnisDB = 1 / (VarF * gTrainDataKilometersYear / 1000000)
  End If
  
  gInputValuesData(Row, rChosenFrequencyYears) = ErgebnisDB    'WW: chosenfreq, Name ge|fffd|ndert
  gInputValuesData(Row, rSelectedFrequencyForCalculation) = ErgebnisAI
  gInputValuesData(Row, rSelectedUnitForCalculation) = ErgebnisAJ
  
End Sub

Sub CalculateEventPrice(ByVal Row As Integer) 'CQ

  Dim Ergebnis As Double
  
  Dim CurrencyRepair As String
  CurrencyRepair = gInputValuesData(Row, rCurrencyRepair)
  Dim CurrencyRTRepair As Double
  CurrencyRTRepair = GetCurrencyOutBYEur(CurrencyRepair)
  
  Dim CurrencyReplace As String
  CurrencyReplace = gInputValuesData(Row, rCurrencyReplace)
  Dim CurrencyRTReplace As Double
  CurrencyRTReplace = GetCurrencyOutBYEur(CurrencyRepair)
  
  Dim JahrBZ As Date
  JahrBZ = gInputValuesData(Row, rCostBaseDate)
  If JahrBZ <> "00:00:00" Then
  
  Dim JahrBZYear As String
  JahrBZYear = Year(JahrBZ)
    
  If CInt(JahrBZYear) > CInt(gInflationEndDate) Then
    Ergebnis = (gInputValuesData(Row, rRepairPrice) * CurrencyRTRepair * (1 - (gInputValuesData(Row, rScrapRate) / 100)) + gInputValuesData(Row, rReplacePrice) * CurrencyRTReplace * (gInputValuesData(Row, rScrapRate) / 100)) * (gAdditionalMaterialFaktor) * gCurrencyOutputRT
  Else
    Ergebnis = (gInputValuesData(Row, rRepairPrice) * CurrencyRTRepair * (1 - (gInputValuesData(Row, rScrapRate) / 100)) + gInputValuesData(Row, rReplacePrice) * CurrencyRTReplace * (gInputValuesData(Row, rScrapRate) / 100)) * (gAdditionalMaterialFaktor) * gCurrencyOutputRT
  End If
  
  gInputValuesData(Row, rEventPrice) = Ergebnis
  
  End If

End Sub

Sub CalculateEventDuration(ByVal Row As Integer) 'CS

  Dim TaskTime As Double
  TaskTime = gInputValuesData(Row, rTaskTime)
  
  Dim Ergebnis As Double
  
  If gLabourTime = "" Then Exit Sub
  Select Case gLabourTime
    Case "Hours"
      Ergebnis = TaskTime * (1 + gInefficiencyRate) 'WW: hier nicht durch 60 dividieren
    Case "Minutes"
      Ergebnis = TaskTime * (1 + gInefficiencyRate) * 60 'hier mal 60
    Case "AW"
      Ergebnis = TaskTime * (1 + gInefficiencyRate) * 10 'hier mal 10 statt dividiert durch 6
  End Select
  
  gEventDurationH = TaskTime * (1 + gInefficiencyRate)  'WW: globale Variable f|fffd|r die Durchlaufzeit in Stunden (Event Duration)
  gInputValuesData(Row, rEventDuration) = Ergebnis
   
End Sub

Sub CalculateEventLabourTime(ByVal Row As Integer) 'CR rEventLabourTime

  Dim Ergebnis As Double
  
  Dim EventDuration As Double
  EventDuration = gEventDurationH    'WW: globale Durchlaufzeit
  Dim CrewSize As Double 'AQ
  CrewSize = gInputValuesData(Row, rCrewSize)          'WW hier ginputvaluesdata(row, rcrewsize) statt getcurrencyoutbyeur
  Dim EventsOverXYearsPV As Double 'CS
  EventsOverXYearsPV = GetCurrencyOutBYEur(rEventsOverXYearsPV)

  If gMaintenanceDefinition = "" Then Exit Sub
  
  If gMaintenanceDefinition = "Preventive" Then
    Ergebnis = EventDuration * CrewSize
  
  Else
    If gMinimumLabourUnitFP = 0 And gMinimumLabourUnitAfterFP = 0 Then
      Ergebnis = EventDuration * CrewSize
    
    Else
      If EventDuration > gMinimumLabourUnitFP Then   'WW: Calsum entfernt und Ergebnisformel angepasst:gEventDurationH
        If gMinimumLabourUnitAfterFP > 0 Then
          Ergebnis = (WorksheetFunction.RoundUp((EventDuration - gMinimumLabourUnitFP) / gMinimumLabourUnitAfterFP, 0) * gMinimumLabourUnitAfterFP + gMinimumLabourUnitFP) * CrewSize   'WW: Formel ge|fffd|ndert
          
        Else
          Ergebnis = EventDuration * CrewSize
                   
        End If
      Else
        Ergebnis = gMinimumLabourUnitFP * CrewSize  'WW: crewsize
        
      End If
    End If
  End If
  
  gInputValuesData(Row, rEventLabourTime) = Ergebnis
   
End Sub

Sub CalculateLabourCostsPH(ByVal Row As Integer) 'CU

  Dim JobTitleSumme As Double
  JobTitleSumme = (gInputValuesData(Row, rJobTitle01) * gLabourRateEURJobTitle01 + gInputValuesData(Row, rJobTitle02) * gLabourRateEURJobTitle02 + gInputValuesData(Row, rJobTitle03) * gLabourRateEURJobTitle03 + gInputValuesData(Row, rJobTitle04) * gLabourRateEURJobTitle04 + gInputValuesData(Row, rJobTitle05) * gLabourRateEURJobTitle05)
  Dim eventLabourTime As Double
  Dim EventsOverXYearsPV As Double
  If gInputValuesData(Row, rEventLabourTime) <> "" Then
    eventLabourTime = CDbl(gInputValuesData(Row, rEventLabourTime))
  End If
  If gInputValuesData(Row, rEventsOverXYearsPV) <> "" Then
    EventsOverXYearsPV = CDbl(gInputValuesData(Row, rEventsOverXYearsPV))
  End If
  
  'WW: Keine Arbeitskosten w|fffd|hrend der Garantie (nur korrektiv)
  Dim warranty As Double
  
  If gInputValuesData(Row, rFrequencySelection) = "FAILURE" Then
    If gTrainDataStandardWarrantyMaterial = "M & L" Or gTrainDataStandardWarrantyMaterial = "L" Then
      If gInputValuesData(Row, rWarrantyPeriod) <> "" Then
        warranty = gInputValuesData(Row, rWarrantyPeriod)
      Else
        warranty = gTrainDataStandardWarrantyPeriod
      End If
    End If
  End If
    
  Dim Ergebnis As Double
  gLabourCostsPerEvent = eventLabourTime * JobTitleSumme * gCurrencyInputRT * gCurrencyOutputRT
  Ergebnis = eventLabourTime * EventsOverXYearsPV * JobTitleSumme * gCurrencyInputRT * gCurrencyOutputRT * (gTrainDataContractLength - warranty) / gTrainDataContractLength
  
  gInputValuesData(Row, rLabourCostPVoverXYears) = Ergebnis
  'WW: 2019-11-11 Labour costs per event:
  gInputValuesData(Row, rLabourCostPerEvent) = gLabourCostsPerEvent
  
  sSumOfLabourCosts = sSumOfLabourCosts + Ergebnis
  

End Sub

Sub CalculateMaterialCostsPH(ByVal Row As Integer) 'CV

  Dim Ergebnis As Double
  If gInputValuesData(Row, rEventPrice) = "" Then Exit Sub
  If gInputValuesData(Row, rEventsOverXYearsPV) = "" Then Exit Sub
  
  
  'WW: keine Materialkosten w|fffd|hrend der Garantie (nur korrektiv)
  Dim warranty As Double
  If gInputValuesData(Row, rFrequencySelection) = "FAILURE" Then
    If gTrainDataStandardWarrantyMaterial = "M & L" Or gTrainDataStandardWarrantyMaterial = "M" Then
      If gInputValuesData(Row, rWarrantyPeriod) <> "" Then
        warranty = gInputValuesData(Row, rWarrantyPeriod)
      Else
        warranty = gTrainDataStandardWarrantyPeriod
      End If
    End If
  End If
  
  Ergebnis = CDbl(gInputValuesData(Row, rEventPrice)) * CDbl(gInputValuesData(Row, rEventsOverXYearsPV)) * (gTrainDataContractLength - warranty) / gTrainDataContractLength
  
  gInputValuesData(Row, rMaterialCostsPV) = Ergebnis
  sSumOfMaterialCosts = sSumOfMaterialCosts + Ergebnis

End Sub

Sub CalculateTotalCostsPH(ByVal Row As Integer) 'CW

  Dim Ergebnis As Double
  If gInputValuesData(Row, rLabourCostPVoverXYears) = "" Then Exit Sub
  If gInputValuesData(Row, rMaterialCostsPV) = "" Then Exit Sub
  Ergebnis = CDbl(gInputValuesData(Row, rLabourCostPVoverXYears)) + CDbl(gInputValuesData(Row, rMaterialCostsPV))
  
  gInputValuesData(Row, rTotalCostsPV) = Ergebnis
  sSumOfTotalCosts = sSumOfTotalCosts + Ergebnis

End Sub

Sub CalculatePercentageOfLabourCosts(ByVal Row As Integer) 'CX

  If sSumOfLabourCosts = 0 Then Exit Sub
  Dim Ergebnis As Integer
  Ergebnis = gInputValuesData(Row, rLabourCostPVoverXYears) / sSumOfLabourCosts

  gInputValuesData(Row, rPercentageOfLybourCosts) = Ergebnis

End Sub

Sub CalculatePercentageOfMaterialCosts(ByVal Row As Integer) 'CY

  If sSumOfMaterialCosts = 0 Then Exit Sub
  Dim Ergebnis As Integer
  Ergebnis = gInputValuesData(Row, rMaterialCostsPV) / sSumOfMaterialCosts
  
  gInputValuesData(Row, rPercentageOfMaterialCosts) = Ergebnis

End Sub

Sub CalculatePercentageOfTotalCosts(ByVal Row As Integer) 'CZ

  If sSumOfTotalCosts = 0 Then Exit Sub
  Dim Ergebnis As Integer
  Ergebnis = gInputValuesData(Row, rTotalCostsPV) / sSumOfTotalCosts

  gInputValuesData(Row, rPercentageOfTotalCosts) = Ergebnis

End Sub

Sub CalculatePercentageOfTotalFailureSums(ByVal Row As Integer) 'FB-FG Summen

  Dim AnnualOperatingHours As Double 'AM
  AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
  
  Dim AnnualOperatingCycles As Double 'AN
  AnnualOperatingCycles = gInputValuesData(Row, rAnnualOperatingCycles)
  
  'TODO: AY???
  Const AY = 1
    
  Dim FailureUnit As String
  FailureUnit = gInputValuesData(Row, rFailureUnit)
  
  Dim VarF01 As Double
  Dim VarF02 As Double
  Dim VarF03 As Double
  Dim VarF04 As Double
  Dim VarF05 As Double
  Dim VarF06 As Double
  
  If FailureUnit = "" Then Exit Sub
  Select Case FailureUnit
  Case "FPMK"
    VarF01 = gInputValuesData(Row, rFehlerklasse01) * AY
    VarF02 = gInputValuesData(Row, rFehlerklasse02) * AY
    VarF03 = gInputValuesData(Row, rFehlerklasse03) * AY
    VarF04 = gInputValuesData(Row, rFehlerklasse04) * AY
    VarF05 = gInputValuesData(Row, rFehlerklasse05) * AY
    VarF06 = gInputValuesData(Row, rFehlerklasse06) * AY
    
  Case "FPMM"
    If AY = 0 Then Exit Sub
    VarF01 = gInputValuesData(Row, rFehlerklasse01) / 1.60934 * AY
    VarF02 = gInputValuesData(Row, rFehlerklasse02) / 1.60934 * AY
    VarF03 = gInputValuesData(Row, rFehlerklasse03) / 1.60934 * AY
    VarF04 = gInputValuesData(Row, rFehlerklasse04) / 1.60934 * AY
    VarF05 = gInputValuesData(Row, rFehlerklasse05) / 1.60934 * AY
    VarF06 = gInputValuesData(Row, rFehlerklasse06) / 1.60934 * AY
    
  Case "MDBF(Km)"
    If AY = 0 Then Exit Sub
    If gInputValuesData(Row, rFehlerklasse01) > 0 Then VarF01 = 1 / gInputValuesData(Row, rFehlerklasse01) * 1000000 * AY
    If gInputValuesData(Row, rFehlerklasse02) > 0 Then VarF02 = 1 / gInputValuesData(Row, rFehlerklasse02) * 1000000 * AY
    If gInputValuesData(Row, rFehlerklasse03) > 0 Then VarF03 = 1 / gInputValuesData(Row, rFehlerklasse03) * 1000000 * AY
    If gInputValuesData(Row, rFehlerklasse04) > 0 Then VarF04 = 1 / gInputValuesData(Row, rFehlerklasse04) * 1000000 * AY
    If gInputValuesData(Row, rFehlerklasse05) > 0 Then VarF05 = 1 / gInputValuesData(Row, rFehlerklasse05) * 1000000 * AY
    If gInputValuesData(Row, rFehlerklasse06) > 0 Then VarF06 = 1 / gInputValuesData(Row, rFehlerklasse06) * 1000000 * AY
  
  Case "MDBF(Mi)"
    If AY = 0 Then Exit Sub
    If gInputValuesData(Row, rFehlerklasse01) > 0 Then VarF01 = 1 / gInputValuesData(Row, rFehlerklasse01) * 1000000 * 1.60934 * AY
    If gInputValuesData(Row, rFehlerklasse02) > 0 Then VarF02 = 1 / gInputValuesData(Row, rFehlerklasse02) * 1000000 * 1.60934 * AY
    If gInputValuesData(Row, rFehlerklasse03) > 0 Then VarF03 = 1 / gInputValuesData(Row, rFehlerklasse03) * 1000000 * 1.60934 * AY
    If gInputValuesData(Row, rFehlerklasse04) > 0 Then VarF04 = 1 / gInputValuesData(Row, rFehlerklasse04) * 1000000 * 1.60934 * AY
    If gInputValuesData(Row, rFehlerklasse05) > 0 Then VarF05 = 1 / gInputValuesData(Row, rFehlerklasse05) * 1000000 * 1.60934 * AY
    If gInputValuesData(Row, rFehlerklasse06) > 0 Then VarF06 = 1 / gInputValuesData(Row, rFehlerklasse06) * 1000000 * 1.60934 * AY
    
  Case "MTBF"
    If AY = 0 Then Exit Sub
    If AnnualOperatingHours = 0 Then Exit Sub
    If gTrainDataKilometersYear = 0 Then Exit Sub
    If gInputValuesData(Row, rFehlerklasse01) > 0 Then VarF01 = 1 / gInputValuesData(Row, rFehlerklasse01) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    If gInputValuesData(Row, rFehlerklasse02) > 0 Then VarF02 = 1 / gInputValuesData(Row, rFehlerklasse02) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    If gInputValuesData(Row, rFehlerklasse03) > 0 Then VarF03 = 1 / gInputValuesData(Row, rFehlerklasse03) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    If gInputValuesData(Row, rFehlerklasse04) > 0 Then VarF04 = 1 / gInputValuesData(Row, rFehlerklasse04) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    If gInputValuesData(Row, rFehlerklasse05) > 0 Then VarF05 = 1 / gInputValuesData(Row, rFehlerklasse05) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    If gInputValuesData(Row, rFehlerklasse06) > 0 Then VarF06 = 1 / gInputValuesData(Row, rFehlerklasse06) * 1000000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
   
  Case "FIT"
    If AY = 0 Then Exit Sub
    If AnnualOperatingHours = 0 Then Exit Sub
    If gTrainDataKilometersYear = 0 Then Exit Sub
    VarF01 = gInputValuesData(Row, rFehlerklasse01) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF02 = gInputValuesData(Row, rFehlerklasse02) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF03 = gInputValuesData(Row, rFehlerklasse03) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF04 = gInputValuesData(Row, rFehlerklasse04) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF05 = gInputValuesData(Row, rFehlerklasse05) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF06 = gInputValuesData(Row, rFehlerklasse06) / 1000 * AnnualOperatingHours / gTrainDataKilometersYear * AY
    
  Case "FPMH"
    If AY = 0 Then Exit Sub
    If gTrainDataKilometersYear = 0 Then Exit Sub
    VarF01 = gInputValuesData(Row, rFehlerklasse01) * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF02 = gInputValuesData(Row, rFehlerklasse02) * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF03 = gInputValuesData(Row, rFehlerklasse03) * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF04 = gInputValuesData(Row, rFehlerklasse04) * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF05 = gInputValuesData(Row, rFehlerklasse05) * AnnualOperatingHours / gTrainDataKilometersYear * AY
    VarF06 = gInputValuesData(Row, rFehlerklasse06) * AnnualOperatingHours / gTrainDataKilometersYear * AY
   
  Case "FPMC"
    If AY = 0 Then Exit Sub
    If gTrainDataKilometersYear = 0 Then Exit Sub
    VarF01 = gInputValuesData(Row, rFehlerklasse01) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
    VarF02 = gInputValuesData(Row, rFehlerklasse02) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
    VarF03 = gInputValuesData(Row, rFehlerklasse03) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
    VarF04 = gInputValuesData(Row, rFehlerklasse04) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
    VarF05 = gInputValuesData(Row, rFehlerklasse05) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
    VarF06 = gInputValuesData(Row, rFehlerklasse06) * AnnualOperatingCycles / gTrainDataKilometersYear * AY
      
  End Select
  
  Dim VarZuv01 As Double
  Dim VarZuv02 As Double
  Dim VarZuv03 As Double
  Dim VarZuv04 As Double
  Dim VarZuv05 As Double
  Dim VarZuv06 As Double

  If gOutputUnitReliabilityFigures = "" Then Exit Sub
  Select Case gOutputUnitReliabilityFigures
    Case "FPMK"
      VarZuv01 = VarF01
      VarZuv02 = VarF02
      VarZuv03 = VarF03
      VarZuv04 = VarF04
      VarZuv05 = VarF05
      VarZuv06 = VarF06
      
    Case "FPMM"
      VarZuv01 = (VarF01 * 1.60934)
      VarZuv02 = (VarF02 * 1.60934)
      VarZuv03 = (VarF03 * 1.60934)
      VarZuv04 = (VarF04 * 1.60934)
      VarZuv05 = (VarF05 * 1.60934)
      VarZuv06 = (VarF06 * 1.60934)
      
    Case "MDBF(Km)"
      If VarF01 > 0 Then VarZuv01 = 1 / VarF01 * 1000000
      If VarF02 > 0 Then VarZuv02 = 1 / VarF02 * 1000000
      If VarF03 > 0 Then VarZuv03 = 1 / VarF03 * 1000000
      If VarF04 > 0 Then VarZuv04 = 1 / VarF04 * 1000000
      If VarF05 > 0 Then VarZuv05 = 1 / VarF05 * 1000000
      If VarF06 > 0 Then VarZuv06 = 1 / VarF06 * 1000000
      
    Case "MDBF(Mi)"
      If VarF01 > 0 Then VarZuv01 = 1 / VarF01 * 1000000 / 1.60934
      If VarF02 > 0 Then VarZuv02 = 1 / VarF02 * 1000000 / 1.60934
      If VarF03 > 0 Then VarZuv03 = 1 / VarF03 * 1000000 / 1.60934
      If VarF04 > 0 Then VarZuv04 = 1 / VarF04 * 1000000 / 1.60934
      If VarF05 > 0 Then VarZuv05 = 1 / VarF05 * 1000000 / 1.60934
      If VarF06 > 0 Then VarZuv06 = 1 / VarF06 * 1000000 / 1.60934
      
    Case "MTBF"
      If AnnualOperatingHours = 0 Then Exit Sub
      If gTrainDataKilometersYear = 0 Then Exit Sub
      If VarF01 > 0 Then VarZuv01 = 1 / VarF01 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      If VarF02 > 0 Then VarZuv02 = 1 / VarF02 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      If VarF03 > 0 Then VarZuv03 = 1 / VarF03 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      If VarF04 > 0 Then VarZuv04 = 1 / VarF04 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      If VarF05 > 0 Then VarZuv05 = 1 / VarF05 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      If VarF06 > 0 Then VarZuv06 = 1 / VarF06 * AnnualOperatingHours / gTrainDataKilometersYear * 1000000
      
    Case "FIT"
      If AnnualOperatingHours = 0 Then Exit Sub
      If gTrainDataKilometersYear = 0 Then Exit Sub
      VarZuv01 = (VarF01 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv02 = (VarF02 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv03 = (VarF03 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv04 = (VarF04 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv05 = (VarF05 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv06 = (VarF06 * 1000 * gTrainDataKilometersYear / AnnualOperatingHours)
      
    Case "FPMH"
      If AnnualOperatingHours = 0 Then Exit Sub
      VarZuv01 = (VarF01 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv02 = (VarF02 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv03 = (VarF03 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv04 = (VarF04 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv05 = (VarF05 * gTrainDataKilometersYear / AnnualOperatingHours)
      VarZuv06 = (VarF06 * gTrainDataKilometersYear / AnnualOperatingHours)
      
    Case "FPMC"
      If AnnualOperatingCycles = 0 Then Exit Sub
      VarZuv01 = (VarF01 * gTrainDataKilometersYear / AnnualOperatingCycles)
      VarZuv02 = (VarF02 * gTrainDataKilometersYear / AnnualOperatingCycles)
      VarZuv03 = (VarF03 * gTrainDataKilometersYear / AnnualOperatingCycles)
      VarZuv04 = (VarF04 * gTrainDataKilometersYear / AnnualOperatingCycles)
      VarZuv05 = (VarF05 * gTrainDataKilometersYear / AnnualOperatingCycles)
      VarZuv06 = (VarF06 * gTrainDataKilometersYear / AnnualOperatingCycles)
        
  End Select
  
  gInputValuesData(Row, rFirstUnusedColumnForCalculation) = VarZuv01
  gInputValuesData(Row, rFirstUnusedColumnForCalculation + 1) = VarZuv02
  gInputValuesData(Row, rFirstUnusedColumnForCalculation + 2) = VarZuv03
  gInputValuesData(Row, rFirstUnusedColumnForCalculation + 3) = VarZuv04
  gInputValuesData(Row, rFirstUnusedColumnForCalculation + 4) = VarZuv05
  gInputValuesData(Row, rFirstUnusedColumnForCalculation + 5) = VarZuv06
  
  If gOutputUnitReliabilityFigures = "FPMK" Or gOutputUnitReliabilityFigures = "FPMM" Or gOutputUnitReliabilityFigures = "FIT" Or gOutputUnitReliabilityFigures = "FPMH" Or gOutputUnitReliabilityFigures = "FPMC" Then
    sSumOfFailureCalc01 = sSumOfFailureCalc01 + VarZuv01
    sSumOfFailureCalc02 = sSumOfFailureCalc02 + VarZuv02
    sSumOfFailureCalc03 = sSumOfFailureCalc03 + VarZuv03
    sSumOfFailureCalc04 = sSumOfFailureCalc04 + VarZuv04
    sSumOfFailureCalc05 = sSumOfFailureCalc05 + VarZuv05
    sSumOfFailureCalc06 = sSumOfFailureCalc06 + VarZuv06
  End If

  If gOutputUnitReliabilityFigures = "MTBF" Or gOutputUnitReliabilityFigures = "MDBF(Km)" Or gOutputUnitReliabilityFigures = "MDBF(Mi)" Then
    If VarZuv01 > 0 Then sSumOfFailureCalc01 = sSumOfFailureCalc01 + (1 / VarZuv01)
    If VarZuv02 > 0 Then sSumOfFailureCalc02 = sSumOfFailureCalc02 + (1 / VarZuv02)
    If VarZuv03 > 0 Then sSumOfFailureCalc03 = sSumOfFailureCalc03 + (1 / VarZuv03)
    If VarZuv04 > 0 Then sSumOfFailureCalc04 = sSumOfFailureCalc04 + (1 / VarZuv04)
    If VarZuv05 > 0 Then sSumOfFailureCalc05 = sSumOfFailureCalc05 + (1 / VarZuv05)
    If VarZuv06 > 0 Then sSumOfFailureCalc06 = sSumOfFailureCalc06 + (1 / VarZuv06)
  End If

End Sub

Sub CalculatePercentageOfTotalFailure(ByVal Row As Integer) 'FB-FG = rPercentTotalFailureXX

  If sSumOfFailureCalc01 > 0 Then gInputValuesData(Row, rPercentTotalFailure01) = gInputValuesData(Row, rFirstUnusedColumnForCalculation) / sSumOfFailureCalc01
  If sSumOfFailureCalc02 > 0 Then gInputValuesData(Row, rPercentTotalFailure02) = gInputValuesData(Row, rFirstUnusedColumnForCalculation + 1) / sSumOfFailureCalc02
  If sSumOfFailureCalc03 > 0 Then gInputValuesData(Row, rPercentTotalFailure03) = gInputValuesData(Row, rFirstUnusedColumnForCalculation + 2) / sSumOfFailureCalc03
  If sSumOfFailureCalc04 > 0 Then gInputValuesData(Row, rPercentTotalFailure04) = gInputValuesData(Row, rFirstUnusedColumnForCalculation + 3) / sSumOfFailureCalc04
  If sSumOfFailureCalc05 > 0 Then gInputValuesData(Row, rPercentTotalFailure05) = gInputValuesData(Row, rFirstUnusedColumnForCalculation + 4) / sSumOfFailureCalc05
  If sSumOfFailureCalc06 > 0 Then gInputValuesData(Row, rPercentTotalFailure06) = gInputValuesData(Row, rFirstUnusedColumnForCalculation + 5) / sSumOfFailureCalc06

End Sub

Sub CalculateFailurerateTenVehicles(ByVal Row As Integer) 'FI = rFailurerateTenVehicles   WW: Name |fffd|ndern auf ...FailurerateXVehicles

'WW: dieser SUB is komplett |fffd|berarbeitet ANFANG
If gInputValuesData(Row, rFrequencySelection) = "FAILURE" Then
  Dim Ergebnis As Double
  
  Dim ChosenFrequency As Double
  ChosenFrequency = gInputValuesData(Row, rChosenFrequencyYears)
  
  Ergebnis = 1 / ChosenFrequency * gTrainNumberOfVehicle * gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn)
   
  gInputValuesData(Row, rFailurerateTenVehicles) = Ergebnis
End If
  'WW: |fffd|berarbeitung ENDE
  
End Sub

Sub CalculateFailureRate(ByVal Row As Integer) 'FK = rFailurerateInitialSpareCalc

    'WW: dieses SUB komplett |fffd|berarbeitet
If gInputValuesData(Row, rFrequencySelection) = "FAILURE" Then
  Dim Ergebnis As Double
  Dim chosenfreq As Double
  chosenfreq = gInputValuesData(Row, rChosenFrequencyYears)
  
  Ergebnis = 1 / chosenfreq / gTrainDataKilometersYear * gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn)
  
  gInputValuesData(Row, rFailurerateInitialSpareCalc) = Ergebnis
End If
  
End Sub

Sub CalculateMeanCycleTime(ByVal Row As Integer) 'FL = rMeanCycleTime

  Dim Ergebnis As Double
    
  Dim LeadTime As Double
  LeadTime = gInputValuesData(Row, rLeadTimeDays)
  If LeadTime = 0 Then LeadTime = gStandardLeadTime
  
  Dim SupplierRepairTime As Double
  SupplierRepairTime = gInputValuesData(Row, rSupplierRepairTime)
  If SupplierRepairTime = 0 Then SupplierRepairTime = gSupplierRepairTime
  
  'WW: unten: gEventDurationH eingesetzt
    
  If gInputValuesData(Row, rLevelOfMaintenance) = 0 Then Exit Sub        'WW: gInputValuesData... eingesetzt
  Dim matship As Integer
  If gInputValuesData(Row, rEventPrice) > 0 Then matship = 1 Else matship = 0   'WW: nur bei Materialkosten>0 macht es Sinn, eine Shipping Time einzubeziehen
  Select Case gInputValuesData(Row, rLevelOfMaintenance)                'WW: gInputValuesData... eingesetzt
    Case "1"
      Ergebnis = gEventDurationH / gWorkingHoursPerDay + (gInputValuesData(Row, rScrapRate) / 100) * (LeadTime + gOrderandShippingTime) * matship
    Case "2"
      Ergebnis = gEventDurationH / gWorkingHoursPerDay + (gInputValuesData(Row, rScrapRate) / 100) * (LeadTime + gOrderandShippingTime) * matship
    Case "3"
      Ergebnis = gEventDurationH / gWorkingHoursPerDay + ((gInputValuesData(Row, rScrapRate) / 100) * (LeadTime + gOrderandShippingTime) + (1 - (gInputValuesData(Row, rScrapRate) / 100)) * (SupplierRepairTime + gOrderandShippingTime)) * matship
  End Select
    
  gInputValuesData(Row, rMeanCycleTime) = Ergebnis

End Sub

Sub CalculateInitialSpareStocks(ByVal Row As Integer) 'FL = rInitialSparerStockAutomatic ; FY = rInitialSparerStockTotal

  Dim ErgebnisX As Double
  Dim ErgebnisY As Double

  Dim CurrencyReplace As String
  CurrencyReplace = gInputValuesData(Row, rCurrencyInitialSpare)
  Dim CurrencyRTReplace As Double
  CurrencyRTReplace = GetCurrencyOutBYEur(CurrencyReplace)

  Dim Zwischen As Double
  Zwischen = gInputValuesData(Row, rInitialSparePrice) * CurrencyRTReplace * gCurrencyOutputRT
  
  Dim VehicleDepots As Integer
  If IsNumeric(gInputValuesData(Row, rVehicleDepots)) Then VehicleDepots = gInputValuesData(Row, rVehicleDepots)
  Dim CalculatedInitialSpareStocks As Double
  If IsNumeric(gInputValuesData(Row, rCalculatedInitialSpareStocks)) Then CalculatedInitialSpareStocks = gInputValuesData(Row, rCalculatedInitialSpareStocks)
  Dim InitialSparerStockTenVehicle As Double
  If IsNumeric(gInputValuesData(Row, rInitialSparerStockTenVehicle)) Then InitialSparerStockTenVehicle = gInputValuesData(Row, rInitialSparerStockTenVehicle)

  ErgebnisX = (VehicleDepots + CalculatedInitialSpareStocks) * Zwischen
  ErgebnisY = InitialSparerStockTenVehicle * Zwischen
    
  gInputValuesData(Row, rInitialSparerStockAutomatic) = ErgebnisX
  gInputValuesData(Row, rInitialSparerStockTotal) = ErgebnisY

End Sub

Sub CalculateMeanCycleTimeWithoutSPS(ByVal Row As Integer) 'GA = rMeanCycleTimeWithoutSPS

  gInputValuesData(Row, rMeanCycleTimeWithoutSPS) = gInputValuesData(Row, rMeanCycleTime)     'WW: mean cylce time withouT sps

End Sub

Sub CalculateMeanCycleTimeWithSPS(ByVal Row As Integer) 'GB = rMeanCycleTimeWithSPS

  Dim Ergebnis As Double
  If gInputValuesData(Row, rProbabilitySparesAvailability) = "" Then Exit Sub
  If gInputValuesData(Row, rMeanCycleTime) = "" Then Exit Sub
  If gInputValuesData(Row, rEventDuration) = "" Then Exit Sub
  Dim ProbabilitySparesAvailability As Double 'FM
  ProbabilitySparesAvailability = CDbl(gInputValuesData(Row, rProbabilitySparesAvailability))
  Dim MeanCycleTime As Double 'FL
  MeanCycleTime = CDbl(gInputValuesData(Row, rMeanCycleTime))
  Dim EventDuration As Double 'CS
  EventDuration = gEventDurationH   'WW: globale event duration (Durchlaufzeit)
   
    'AB HIER WW 2019-11-07
  
    Ergebnis = ProbabilitySparesAvailability / 100 * EventDuration / gWorkingHoursPerDay + (1 - ProbabilitySparesAvailability / 100) * MeanCycleTime
  
  'bis HIER WW 2019-11-07
  
  gInputValuesData(Row, rMeanCycleTimeWithSPS) = Ergebnis

End Sub

Sub CalculateEventsPYandPV(ByVal Row As Integer) 'GC = rEventsPYandPV

  If gTrainDataContractLength = 0 Then Exit Sub
  If gTrainNumberOfVehicle = 0 Then Exit Sub
  If gInputValuesData(Row, rEventsOverXYearsPV) = "" Then Exit Sub
  Dim Ergebnis As Double
  Ergebnis = gInputValuesData(Row, rEventsOverXYearsPV) / gTrainDataContractLength    'WW: hier nicht durch die Anzahl der Fahrzeuge dividieren
  gInputValuesData(Row, rEventsPYandPV) = Ergebnis
  
End Sub

Sub CalculateInherentAvailability(ByVal Row As Integer) 'GD = rInherentAv

  Dim Ergebnis As Double 'WW: 2019-11-07
  Dim FailureUnit As String
  FailureUnit = gInputValuesData(Row, rFailureUnit)
  If FailureUnit = "" Then
    Ergebnis = 1  'WW: 2019-11-07
  Else
    
    Dim AnnualOperatingHours As Double 'AM
    AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
    If AnnualOperatingHours = 0 Then Exit Sub
    If gWorkingHoursPerDay = 0 Then Exit Sub
    If gInputValuesData(Row, rEventDuration) = "" Then Exit Sub
    If gInputValuesData(Row, rEventsOverXYearsPV) = "" Then Exit Sub
    Dim EventDuration As Double 'CS
    
    EventDuration = gEventDurationH   'WW: globale EventDuration
    Dim EventsOverXYearsPV As Double 'CT
    EventsOverXYearsPV = gInputValuesData(Row, rEventsOverXYearsPV)
    
    Ergebnis = AnnualOperatingHours / (AnnualOperatingHours + EventDuration * EventsOverXYearsPV / gWorkingHoursPerDay * AnnualOperatingHours / 365)
    
  End If
  gInputValuesData(Row, rInherentAv) = Ergebnis
  
End Sub

Sub CalculateAchievedAvailability(ByVal Row As Integer) 'GE = rAchievedAV

  Dim Ergebnis As Double
  Dim AnnualOperatingHours As Double 'AM
  AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
  If AnnualOperatingHours = 0 Then Exit Sub
  If gWorkingHoursPerDay = 0 Then Exit Sub
  If gInputValuesData(Row, rEventsOverXYearsPV) = "" Then Exit Sub
  If gInputValuesData(Row, rEventDuration) = "" Then Exit Sub
  Dim EventsOverXYearsPV As Double 'CT
  EventsOverXYearsPV = gInputValuesData(Row, rEventsOverXYearsPV)
  If EventsOverXYearsPV = 0 Then Exit Sub
  Dim EventDuration As Double 'CS
  EventDuration = gEventDurationH
   
  Ergebnis = AnnualOperatingHours / (AnnualOperatingHours + EventDuration * EventsOverXYearsPV / gWorkingHoursPerDay * AnnualOperatingHours / 365)

  gInputValuesData(Row, rAchievedAV) = Ergebnis

End Sub

Sub CalculateOperationalAvailability(ByVal Row As Integer) 'GF = rOperationalAV

  Dim Ergebnis As Double
  If gInputValuesData(Row, rAnnualOperatingHours) = "" Then Exit Sub
  ' AB HIER 2019-11-07 WW
  If gInputValuesData(Row, rEventsPYandPV) = "" Then Exit Sub
  
  'If gInputValuesData(Row, rMeanCycleTimeWithSPS) = "" Then Exit Sub
  ' BIS HIER 2019-11-07 WW
  Dim AnnualOperatingHours As Double 'AM
  AnnualOperatingHours = gInputValuesData(Row, rAnnualOperatingHours)
  If AnnualOperatingHours = 0 Then Exit Sub
  Dim EventsPYandPV As Double 'CT      WW 2019-11-07 Korrektur -> GC
  EventsPYandPV = gInputValuesData(Row, rEventsPYandPV)  ' WW 2019-11-07
  If AnnualOperatingHours = 0 Then Exit Sub
  Dim MeanCycleTimeWithSPS As Double 'GB
  
  'AB HIER 2019-11-07 WW
  'MeanCycleTimeWithSPS = gInputValuesData(Row, rMeanCycleTimeWithSPS)
  
  
  If gInputValuesData(Row, rMeanCycleTimeWithSPS) <> "" Then
    MeanCycleTimeWithSPS = gInputValuesData(Row, rMeanCycleTimeWithSPS)
    Ergebnis = AnnualOperatingHours / (AnnualOperatingHours + MeanCycleTimeWithSPS * EventsPYandPV * AnnualOperatingHours / 365)  'WW 2019-11-07 Korrektur Events per Year and Vehicle
  Else
    If Not gInputValuesData(Row, rAchievedAV) = "" Then
        Ergebnis = gInputValuesData(Row, rAchievedAV)
    End If
  End If
  'BIS HIER 2019-11-07 WW
  
  
  gInputValuesData(Row, rOperationalAV) = Ergebnis
  
End Sub

Sub CalculateComponents()

  Dim sum As Integer    'WW: sum eingef|fffd|gt
  Dim myRow As Integer
  For myRow = 1 To (gLastInputRow - gFirstInputRow + 1)
    Dim j As Integer
    'WW: 2019-11-11 AB HIER: |fffd|nderung: Berechnung der Anzahl aller Komponenten
    If gInputValuesData(myRow, 8) = "LRU" Then
      For j = 9 To 14
      
           
        Dim CompRow As Integer
        For CompRow = 16 To 31
          Dim NumPD As Integer
          If IsNumeric(Worksheets("Project Data").Cells(CompRow, j)) Then NumPD = Worksheets("Project Data").Cells(CompRow, j)
          Dim NumIV As Integer
          If IsNumeric(gInputValuesData(myRow, rFirstColumnNumberOfComponents + CompRow - 16)) Then NumIV = gInputValuesData(myRow, rFirstColumnNumberOfComponents + CompRow - 16)
        
          sum = sum + NumPD * NumIV    'WW: sum = sum + ...
        
        Next
      
      
    
        If sum > 0 Then gInputValuesData(myRow, rFirstColumnTrainTypeNumberOfComponents + j - 9) = sum 'WW: verschoben, da die Summe |fffd|ber alle Module berechnet wird
        sum = 0
      Next
    End If
    'WW: bis hier 2019-11-11
  Next myRow


End Sub

Sub SetProjectDataRow(ByVal Row As Integer)

  Dim MaintenanceType As String
  MaintenanceType = gInputValuesData(Row, rTypeOfMaintenance)
  rMaintenanceTypSet = False
  gMaintenanceDefinition = ""
  Dim i As Integer
  For i = 44 To 49
    If MaintenanceType = Worksheets("Project Data").Cells(i, 5) Then
      gMaintenanceDefinition = Worksheets("Project Data").Cells(i, 3)
      rMaintenanceRow = i
      rMaintenanceTypSet = True
      gInefficiencyRate = Worksheets("Project Data").Cells(i - 27, 5)
      
    End If
  Next i

End Sub

Sub Calculate_Array()

'WW: Alle MDBF(Km) durch MDBF(Km) ersetzt, beachte Gro|fffd|- und Kleinschreibung

  sSumOfLabourCosts = 0
  sSumOfMaterialCosts = 0
  sSumOfTotalCosts = 0
  sSumOfFailureCalc01 = 0
  sSumOfFailureCalc02 = 0
  sSumOfFailureCalc03 = 0
  sSumOfFailureCalc04 = 0
  sSumOfFailureCalc05 = 0
  sSumOfFailureCalc06 = 0
  
  Call CalculateComponents

  Dim myRow As Integer
  For myRow = 1 To (gLastInputRow - gFirstInputRow + 1)
    If gInputValuesData(myRow, 8) = "LRU" And gInputValuesData(myRow, 9) = 1 Then   'WW: 2019-11-11 nur die aktivierten werden berechnet
      Call SetProjectDataRow(myRow)
    
      Call CalculateFrequencys(myRow)
      Call CalculateCostsByMT(myRow)
      Call CalculateEventPrice(myRow)
      Call CalculateEventDuration(myRow)
      Call CalculateEventLabourTime(myRow)
      Call CalculateLabourCostsPH(myRow)
      Call CalculateMaterialCostsPH(myRow)
      Call CalculateTotalCostsPH(myRow)
      Call CalculatePercentageOfTotalFailureSums(myRow)
      Call CalculateFailurerateTenVehicles(myRow)
      Call CalculateFailureRate(myRow)
      Call CalculateMeanCycleTime(myRow)
      
      'AB HIER WW: 2019-11-07
      
      Call CalculateMeanCycleTimeWithoutSPS(myRow)
      
      Call CalculateEventsPYandPV(myRow)
      
      'WW: Berechnungsreihenfolge ge|fffd|ndert
      
      Call MinInSpares_Click(myRow)
      Call CalculateInitialSpareStocks(myRow)
      
      'BIS HIER WW: 2019-11-07
      Call Probability_Click(myRow)
      Call CalculateMeanCycleTimeWithSPS(myRow)
      
      Call CalculateInherentAvailability(myRow)
      Call CalculateAchievedAvailability(myRow)
      Call CalculateOperationalAvailability(myRow)
      
      
      Call Jahresscheiben_Click(myRow)
    
    
    End If
  Next myRow
  
End Sub

Sub Calculate_ArrayAfterSum()

  Dim myRow As Integer
  For myRow = gFirstInputRow To (gLastInputRow + 1)
    If gInputValuesData(myRow, 8) = "LRU" Then
      Call SetProjectDataRow(myRow)
      
      Call CalculatePercentageOfLabourCosts(myRow)
      Call CalculatePercentageOfMaterialCosts(myRow)
      Call CalculatePercentageOfTotalCosts(myRow)
      Call CalculatePercentageOfTotalFailure(myRow)
        
    End If
  Next myRow
  
End Sub

Sub Load_ProjectDataGlobal()

  Dim TrainTyp As String
  TrainTyp = Worksheets("Input Values").Cells(2, 35)
  gTrainColumn = 9
  Dim i As Integer
  For i = 9 To 14
    If TrainTyp = Worksheets("Project Data").Cells(5, i) Then
      gTrainColumn = i
      gTrainTypeNumberOfComponentsColumn = rFirstColumnTrainTypeNumberOfComponents + i - 9
    End If
  Next i
  gTrainNumberOfVehicle = Worksheets("Project Data").Cells(6, gTrainColumn)
  gTrainDataKilometersYear = Worksheets("Project Data").Cells(7, gTrainColumn)
  gTrainDataStandardWarrantyPeriod = Worksheets("Project Data").Cells(8, gTrainColumn)
  gTrainDataStandardWarrantyMaterial = Worksheets("Project Data").Cells(9, gTrainColumn)
  If Worksheets("Project Data").Cells(10, gTrainColumn) = "Yes" Then
    gTrainDataOverhaulLastYear = True
  Else
    gTrainDataOverhaulLastYear = False
  End If
  gTrainDataContractStartDate = Worksheets("Project Data").Cells(11, gTrainColumn)
  gTrainDataContractFinishDate = Worksheets("Project Data").Cells(12, gTrainColumn)
  If Worksheets("Project Data").Cells(13, gTrainColumn) = "Yes" Then
    gTrainDataContractEndsAllVehicles = True
  Else
    gTrainDataContractEndsAllVehicles = False
  End If
  gTrainDataContractLength = Worksheets("Project Data").Cells(14, gTrainColumn)
  
  Dim CurrecyOut As String
  CurrecyOut = Worksheets("Project Data").Cells(14, 5)
  gCurrencyOutputRT = GetCurrencyOutBYEur(CurrecyOut)
    
  Dim CurrecyIn As String
  CurrecyIn = Worksheets("Project Data").Cells(13, 5)
  gCurrencyInputRT = GetCurrencyInBYEur(CurrecyIn)
      
  gOutputUnitMaintenanceSchedule = Worksheets("Project Data").Cells(11, 5)
  gOutputUnitReliabilityFigures = Worksheets("Project Data").Cells(12, 5)
  gLabourTime = Worksheets("Project Data").Cells(16, 5)
  
  gMinimumLabourUnitFP = Worksheets("Project Data").Cells(23, 5)
  gMinimumLabourUnitAfterFP = Worksheets("Project Data").Cells(24, 5)
  gWorkingHoursPerDay = Worksheets("Project Data").Cells(25, 5)
  gLabourRateEURJobTitle01 = Worksheets("Project Data").Cells(26, 5)
  gLabourRateEURJobTitle02 = Worksheets("Project Data").Cells(27, 5)
  gLabourRateEURJobTitle03 = Worksheets("Project Data").Cells(28, 5)
  gLabourRateEURJobTitle04 = Worksheets("Project Data").Cells(29, 5)
  gLabourRateEURJobTitle05 = Worksheets("Project Data").Cells(30, 5)
  
  gStandardLeadTime = Worksheets("Project Data").Cells(33, 5)
  gSupplierRepairTime = Worksheets("Project Data").Cells(34, 5)
  gOrderandShippingTime = Worksheets("Project Data").Cells(35, 5)
  gAdditionalMaterialFaktor = 1 + Worksheets("Project Data").Cells(37, 5)
  gInflationEndDate = Worksheets("Project Data").Cells(39, 5)
   
End Sub

Function GetCurrencyOutBYEur(OutputCR As String) As Double

    If OutputCR = "" Then
      GetCurrencyOutBYEur = 1
    Else
      Select Case OutputCR
        Case "EUR"
          GetCurrencyOutBYEur = 1
        Case "CHF"
          GetCurrencyOutBYEur = Worksheets("Currency").Cells(5, 4) 'WW: statt Zeile 4 -> Zeile 5
        Case "USD"
          GetCurrencyOutBYEur = Worksheets("Currency").Cells(6, 4)  'WW:statt Zeile 5 -> Zeile 6 etc.
        Case "GBP"
          GetCurrencyOutBYEur = Worksheets("Currency").Cells(7, 4)
        Case "AUD"
          GetCurrencyOutBYEur = Worksheets("Currency").Cells(8, 4)
        Case "CAD"
          GetCurrencyOutBYEur = Worksheets("Currency").Cells(9, 4)
      End Select
    End If
  
End Function

Function GetCurrencyInBYEur(InputCR As String) As Double

    If InputCR = "" Then
      GetCurrencyInBYEur = 1
    Else
      Select Case InputCR
        Case "EUR"
          GetCurrencyInBYEur = 1
        Case "CHF"
          GetCurrencyInBYEur = Worksheets("Currency").Cells(4, 5)
        Case "USD"
          GetCurrencyInBYEur = Worksheets("Currency").Cells(4, 6)
        Case "GBP"
          GetCurrencyInBYEur = Worksheets("Currency").Cells(4, 7)
        Case "AUD"
          GetCurrencyInBYEur = Worksheets("Currency").Cells(4, 8)
        Case "CAD"
          GetCurrencyInBYEur = Worksheets("Currency").Cells(4, 9)
      End Select
    End If
 
End Function

Sub Load_CalculationData()

  gLastInputRow = Worksheets("Input Values").Cells(5000, 1).End(xlUp).Row
'  gLastInputRow = 5000
  Sheets("Input Values").Range("CQ" & gFirstInputRow & ":FP" & 5000).ClearContents
  Sheets("Input Values").Range("FR" & gFirstInputRow & ":FT" & 5000).ClearContents
  Sheets("Input Values").Range("FV" & gFirstInputRow & ":GS" & 5000).ClearContents
  
  Sheets("Input Values").Range("CQ" & gFirstInputRow & ":FN" & 5000).NumberFormat = "General"
  Sheets("Input Values").Range("FP" & gFirstInputRow & ":GS" & 5000).NumberFormat = "General"
  
  gInputValuesData = Sheets("Input Values").Range("A" & gFirstInputRow & ":GS" & 5000) '6 Spalten zus|fffd|tzlich f|fffd|r Berechnungen (rFirstUnusedColumnForCalculation)
  gInputValuesInformationData = Sheets("Input Values").Range("A1:GS" & gFirstInputRow - 1)
  Dim myRow As Integer
  Dim myColumn As Integer
'  For myRow = 1 To (gLastInputRow - gFirstInputRow)
'    For myColumn = 95 To 200
'      If myColumn <> 172 And myColumn <> 176 Then
'        gInputValuesData(myRow, myColumn) = ""
'      End If
'    Next
'  Next
End Sub

Sub Write_CalculationData()

  Sheets("Input Values").Range("A" & gFirstInputRow & ":GL" & gLastInputRow) = gInputValuesData

End Sub

Sub Calculate_InputValues()

 Call Load_CalculationData
 Call Load_ProjectDataGlobal
 Call Calculate_Array
 Call Write_CalculationData

End Sub

'------- Functions From W. Weirich -------


Private Sub Jahresscheiben_Click(ByVal Row As Integer)
Dim i, t_i As Integer
Dim warranty, interval_y, spalte, mat_C, lab_C, Y_run, offset As Double
Dim lab_c_py, mat_c_py As Double
Dim unit, traintype, warr_M_L As String
Dim onlyonce, OHlastY As Boolean

If gInputValuesInformationData(2, 113) = gInputValuesData(Row, rTypeOfMaintenance) Or gInputValuesInformationData(2, 113) = "ALL" Then

    onlyonce = False
    unit = gInputValuesData(Row, rSelectedUnitForCalculation)
    interval_y = gInputValuesData(Row, rChosenFrequencyYears)
    
    'Projektparameter
    traintype = gInputValuesInformationData(2, 35)
    t_i = 0
    Do
        t_i = t_i + 1
    Loop Until Worksheets("Project Data").Cells(5, 7 + t_i) = traintype Or i > 6
    If gInputValuesData(Row, rWarrantyPeriod) <> "" Then
      warranty = gInputValuesData(Row, rWarrantyPeriod)
    Else
      warranty = Worksheets("Project Data").Cells(8, 7 + t_i)
    End If
    
    warr_M_L = Worksheets("Project Data").Cells(9, 7 + t_i)
  
    If unit = "Once km" Then
        onlyonce = True
    End If
    If unit = "Once Hours" Then
        onlyonce = True
    End If
    
    For i = 107 To 156
        gInputValuesData(Row, i) = 0
    Next
    
    'Material- und Arbeitskosten per Event
    If gInputValuesInformationData(2, 109) = "MATERIAL" Or gInputValuesInformationData(2, 109) = "ALL" Then mat_C = gInputValuesData(Row, rEventPrice) * gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn) Else mat_C = 0
    If (gInputValuesInformationData(2, 109) = "LABOUR" Or gInputValuesInformationData(2, 109) = "ALL") And gInputValuesData(Row, rEventsOverXYearsPV) > 0 Then lab_C = gLabourCostsPerEvent * gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn) Else lab_C = 0
        
    '*********************** pr|fffd|ventive Wartung *************************************
    If gInputValuesData(Row, rFrequencySelection) <> "FAILURE" Then
        If gInputValuesData(Row, rTypeOfMaintenance) = "OH" And Not gTrainDataOverhaulLastYear Then OHlastY = False Else OHlastY = True
         offset = gInputValuesData(Row, rFrequencyOffset)
                        If offset > 0 Then
                            Select Case unit
                                Case "KM":         offset = offset / gTrainDataKilometersYear
                                Case "Miles":      offset = offset * 1.60934 / gTrainDataKilometersYear
                                Case "Hours":      offset = offset / gInputValuesData(Row, rAnnualOperatingHours)
                                Case "Days":       offset = offset / 365.25
                                Case "Weeks":      offset = offset / (365.25 / 7)
                                Case "Month":      offset = offset / 12
                                Case "Cycle":      offset = offset / gInputValuesData(Row, rAnnualOperatingCycles)
                                Case "once km":    offset = offset / gTrainDataKilometersYear
                                Case "once hours": offset = offset / gInputValuesData(Row, rAnnualOperatingHours)
                            End Select
                        End If
        'Zuordnung der Wartungskosten zu den Jahresscheiben bis zum Ende des Vertrags
        Y_run = interval_y + offset
        Do While OHlastY And Y_run <= gTrainDataContractLength Or Not OHlastY And Y_run <= gTrainDataContractLength - 1
            spalte = WorksheetFunction.RoundDown(Y_run - 0.0001, 0)     '     'Abzug von 0.0001 um Wartungen den Jahren richtig zuzuordnen
            
            'hier in die Input Values Matrix |fffd|bertragen:
            gInputValuesData(Row, spalte + 108) = gInputValuesData(Row, spalte + 108) + mat_C + lab_C
            Y_run = Y_run + interval_y
            If onlyonce Then Exit Do
        Loop
    Else
        lab_c_py = lab_C / interval_y
        mat_c_py = mat_C / interval_y
        'korrektive Wartung *************************************************
        'Bef|fffd|llen der Zellen:
        For i = 1 To gTrainDataContractLength
            'Kosten f|fffd|r korrektive Wartung erst nach Ablauf der Gew|fffd|hrleistung:
            
            If i <= warranty Then
                If warr_M_L = "M" Then gInputValuesData(Row, i + 107) = lab_c_py
                If warr_M_L = "L" Then gInputValuesData(Row, i + 107) = mat_c_py
                If warr_M_L = "M & L" Then gInputValuesData(Row, i + 107) = 0
            End If
            If i > warranty And i < warranty + 1 Then
                If warr_M_L = "M" Then gInputValuesData(Row, i + 107) = mat_c_py * (i - warranty) + lab_c_py
                If warr_M_L = "L" Then gInputValuesData(Row, i + 107) = lab_c_py * (i - warranty) + mat_c_py
                If warr_M_L = "M & L" Then gInputValuesData(Row, i + 107) = (mat_c_py + lab_c_py) * (i - warranty)
            End If
        
            If i >= warranty + 1 Then
                gInputValuesData(Row, i + 107) = mat_c_py + lab_c_py
            End If
        Next
    End If
End If
End Sub

Private Sub MinInSpares_Click(ByVal Row As Integer)

If gInputValuesData(Row, rFrequencySelection) = "FAILURE" And (gInputValuesData(Row, rScrapRate) > 0 And gInputValuesData(Row, rReplacePrice) > 0) Then   'WW: 2019-11-07

    Dim prob, nr_veh_SpareStock, nr_veh, fail_rt, cycle_time, prob_target, nr_spar, QuC, nr_of_fail, nr_depot As Double
    Dim traintype As String
    Dim t_i, depot_i, i As Integer
    Dim main_D As Boolean
    
    'nr_veh_SpareStock ist die Anzahl der Fzg, die f|fffd|r die Ersatzteilberechnung ber|fffd|cksichtigt wird
    'nr_veh ist die Gesamtzahl der Fzg
    
    traintype = gInputValuesInformationData(2, 35)
    nr_veh = gTrainNumberOfVehicle
    
    t_i = 0
    Do
        t_i = t_i + 1
    Loop Until Worksheets("Project Data").Cells(5, 8 + t_i) = traintype Or t_i > 6
    nr_veh_SpareStock = Worksheets("Project Data").Cells(39, 8 + t_i)
    prob_target = Worksheets("Project Data").Cells(35, 8 + t_i)
    
    QuC = gInputValuesData(Row, gTrainTypeNumberOfComponentsColumn)
    
    'die Einheit von cycle time ist km
    
    cycle_time = gInputValuesData(Row, 169) / 365.25 * gTrainDataKilometersYear
    
    'failure rate
    fail_rt = 1 / (gInputValuesData(Row, 107) * gTrainDataKilometersYear)
    
    nr_spar = -1
    prob = 0
    
    Do
        nr_spar = nr_spar + 1
        prob = prob + (nr_veh_SpareStock * fail_rt * cycle_time) ^ nr_spar * Exp((0 - nr_veh_SpareStock) * fail_rt * cycle_time) / WorksheetFunction.Fact(nr_spar)
    Loop Until prob > prob_target Or nr_spar > 99
    
    prob = prob * 100
    
    '_______________________Main Depot oder Vehicle Depot?
    
    main_D = False
    nr_of_fail = fail_rt * cycle_time * nr_veh
    'Wert des Ersatzteils:
    If gInputValuesData(Row, 76) > Worksheets("Project Data").Cells(38, 8 + t_i) Then main_D = True
    'Minimum Ratio until spares are kept in the main depot(s):
    If nr_spar / Worksheets("Project Data").Cells(33, 8 + t_i) < Worksheets("Project Data").Cells(36, 8 + t_i) Then main_D = True
    'Limit Value (Failure / cycle time)
    If nr_of_fail < Worksheets("Project Data").Cells(37, 8 + t_i) Then main_D = True
    If main_D Then
        depot_i = 4
        nr_depot = Worksheets("Project Data").Cells(34, 8 + t_i)
    Else
        depot_i = 0
        nr_depot = Worksheets("Project Data").Cells(33, 8 + t_i)
    End If
    
    '_______________________Bef|fffd|llen der Zellen
    
    
    gInputValuesData(Row, 171) = str(nr_spar) + " @ " + Left(str(prob), 6) + "%"  'WW: string k|fffd|rzen 2019-11-07
    gInputValuesData(Row, 167) = nr_of_fail
    
    
    If nr_spar > nr_veh_SpareStock * QuC Then
        gInputValuesData(Row, 172 + depot_i) = nr_veh_SpareStock * QuC
    Else
        gInputValuesData(Row, 172 + depot_i) = WorksheetFunction.RoundUp(nr_spar / nr_depot, 0) * nr_depot
    End If
    
    'AB HIER: 2019-11-07 WW
    gInputValuesData(Row, 175 + depot_i) = WorksheetFunction.RoundUp(nr_spar / nr_depot, 0) * nr_depot
    
    
    If gInputValuesData(Row, 173 + depot_i) > 0 Then
        gInputValuesData(Row, 175 + depot_i) = gInputValuesData(Row, 173 + depot_i) * nr_depot  'WW: Typen unvertr|fffd|glich????
        gInputValuesData(Row, 180) = gInputValuesData(Row, 173 + depot_i) * nr_depot            'WW: Typen unvertr|fffd|glich?????
    Else
        gInputValuesData(Row, 175 + depot_i) = gInputValuesData(Row, 172 + depot_i)
        gInputValuesData(Row, 180) = gInputValuesData(Row, 175 + depot_i)
    End If
    
    gInputValuesData(Row, 174 + depot_i) = gInputValuesData(Row, 175 + depot_i) / nr_depot
    'BIS HIER: 2019-11-07 WW
    
End If
End Sub


Private Sub Probability_Click(ByVal Row As Integer)

If gInputValuesData(Row, rFrequencySelection) = "FAILURE" And (gInputValuesData(Row, rScrapRate) > 0 And gInputValuesData(Row, rReplacePrice) > 0) Then   'WW: 2019-11-07

    Dim prob, nr_veh_SpareStock, fail_rt, cycle_time, prob_target, nr_spar, mileage, interval As Double
    Dim unit, traintype As String
    Dim t_i, counter As Integer
    
    'nr_veh_SpareStock ist die Anzahl der Fzg, die f|fffd|r die Ersatzteilberechnung ber|fffd|cksichtigt wird
    'ACHTUNG: Initial Spares Stock TOTAL for 19 vehicles GC muss ausgef|fffd|llt sein!
    
    traintype = gInputValuesInformationData(2, 35)
    t_i = 0
    Do
        t_i = t_i + 1
    Loop Until Worksheets("Project Data").Cells(5, 7 + t_i) = traintype Or t_i > 6
    nr_veh_SpareStock = Worksheets("Project Data").Cells(39, 7 + t_i)
    prob_target = Worksheets("Project Data").Cells(35, 7 + t_i)
    
    'die Einheit von cycle time sind km
    cycle_time = gInputValuesData(Row, 169) / 365.25 * gTrainDataKilometersYear
    
    fail_rt = 1 / (gInputValuesData(Row, 107) * gTrainDataKilometersYear)
    
    If gInputValuesData(Row, 180) = "" Then nr_spar = 0 Else nr_spar = gInputValuesData(Row, 180)
    
    counter = -1
    prob = 0
    Do
        counter = counter + 1
        prob = prob + (nr_veh_SpareStock * fail_rt * cycle_time) ^ counter * Exp((0 - nr_veh_SpareStock) * fail_rt * cycle_time) / WorksheetFunction.Fact(counter)
    Loop Until counter >= nr_spar
    
    prob = prob * 100
    
    gInputValuesData(Row, 170) = prob
    
End If
End Sub

Attribute VB_Name = "sGUID"
'Option Explicit
'
'Private Type GUID
'    bytes(15) As Byte
'End Type
'
''GUID |fffd|ber OLE32.DLL
'Private Declare Function CoCreateGuid Lib "OLE32.dll" (GUID As GUID) As Long
'Private Declare Function StringFromGUID2 Lib "OLE32.dll" (GUID As GUID, ByVal lpszString As String, ByVal iMax As Long) As Long
'
''Neue GUID
'Private Function nGUID() As GUID
'    Dim uGUID As GUID
'    CoCreateGuid uGUID
'    nGUID = uGUID
'End Function
'
''GUID als String
'Public Function newGUID() As String
'    Dim sBuffer As String
'    Dim lResult As Long
'
'    sBuffer = VBA.Space(78)
'    lResult = StringFromGUID2(nGUID, sBuffer, Len(sBuffer))
'    newGUID = Left$(StrConv(sBuffer, vbFromUnicode), lResult - 1)
'
'End Function
'
'
Attribute VB_Name = "sGlobal"

Attribute VB_Name = "sImport_BLESS"
'Funktionen f|fffd|r den Reiter "Import BLESS"
Option Explicit

'########################## Spaltenkonfiguration Input Values ##########################
'# Spalte  # Inhalt                                                                    #
'#---------#---------------------------------------------------------------------------#
'# 001     # System (according to VBS structure                                        #
'# 002     # Filepath                                                                  #
'# 003-008 # Quantity Informations                                                     #
'# 009     # Import Info                                                               #
'# 010     # User Comment                                                              #
'# 011     # Empty                                                                     #
'# 012-018 # System Life Cycle Cost Overview                                           #
'# 019     # Empty                                                                     #
'# 020-025 # System Reliability Overview                                               #
'# 026-027 # Empty                                                                     #
'# 028-033 # Old Quantity Informations                                                 #
'# 034-039 # Calculated Status (-(not Calculated); +(Calculated))                      #
'# 040-059 # Empty
'# 060-065 # Tempor|fffd|r Summen                                                           #
'# 066-069 # Empty
'# 070-075 # Tempor|fffd|r RAM                                                              #
'# 076-079 # Empty
'# 080     # X = Imported                                                              #
'#######################################################################################

'########################## Spaltenkonfiguration Project Data ##########################
'# Spalte  # Inhalt                                                                    #
'#---------#---------------------------------------------------------------------------#
'# 001-015 # Diverses
'# 016-018 # List of used Maintenance Interval
'# 017     # Empty
'# 020-021 # List of annual operating Hours
'# 022     # Empty
'# 023-024 # List of annual Cycles
'# 025-039 # Empty
'# 040-042 # Tempor|fffd|r List of used Maintenance Interval
'#   0  #
'#   0  #
'#   0  #
'#   0  #
'#######################################################################################


Private Const ImportNameColumn = 9

Private FieldUniqueID As Integer
Private FieldCorrectionLine As Integer
Private FieldStructureLevel As Integer
Private FieldErrorCheck As Integer
Private FieldVehicleBreakdownStructureBombardier As Integer
Private FieldVehicleBreakdownStructureCustomer As Integer
Private FieldSuppliersystembreakdown As Integer
Private FieldBLESSLineNo As Integer
Private FieldLineItemOnOff As Integer
Private FieldSystemName As Integer
Private FieldSubSystemComponent As Integer
Private FieldTaskDescription As Integer
Private FieldIncludedInMaintenancePlan As Integer
Private FieldFailureDetectableViaDianosticSoftware As Integer
Private FieldTaskPerformedOnVehicle As Integer
Private FieldWorkArea As Integer
Private FieldSuppliercomments As Integer
Private FieldLevelofMaintenance As Integer
Private FieldTypeofmaintenance As Integer
Private FieldScheduledMaintenancefrequencySup As Integer
Private FieldScheduledMaintenanceunitSup As Integer
Private FieldScheduledMaintenancefrequencyBT As Integer
Private FieldScheduledMaintenanceunitBT As Integer
Private FieldFailureCategoryA As Integer
Private FieldFailureCategoryB As Integer
Private FieldFailureCategoryC As Integer
Private FieldFailureCategoryD As Integer
Private FieldFailureCategoryE As Integer
Private FieldFailureCategoryF As Integer
Private FieldFailureunit As Integer
Private FieldSourceoffailuredata As Integer
Private FieldSelectedFrequencyForCalculation As Integer
Private FieldSelectedUnitForCalculation As Integer
Private FieldFrequencySelection As Integer
Private FieldFrequencyOffset As Integer
Private FieldAnnualoperatinghours As Integer
Private FieldAnnualoperatingcycles As Integer
Private FieldSourceoflabourdata As Integer
Private FieldTasktimeHs As Integer
Private FieldCrewsize As Integer
Private FieldJobtitle1 As Integer
Private FieldJobtitle2 As Integer
Private FieldJobtitle3 As Integer
Private FieldJobtitle4 As Integer
Private FieldJobtitle5 As Integer
Private QuantityPerVehicle1 As Integer
Private QuantityPerVehicle2 As Integer
Private QuantityPerVehicle3 As Integer
Private QuantityPerVehicle4 As Integer
Private QuantityPerVehicle5 As Integer
Private QuantityPerVehicle6 As Integer
Private FieldModul1 As Integer
Private FieldModul2 As Integer
Private FieldModul3 As Integer
Private FieldModul4 As Integer
Private FieldModul5 As Integer
Private FieldModul6 As Integer
Private FieldModul7 As Integer
Private FieldModul8 As Integer
Private FieldModul9 As Integer
Private FieldModul10 As Integer
Private FieldModul11 As Integer
Private FieldModul12 As Integer
Private FieldModul13 As Integer
Private FieldModul14 As Integer
Private FieldModul15 As Integer
Private FieldModul16 As Integer
Private FieldScrapRatePercent As Integer
Private FieldRepairPrice As Integer
Private FieldCurrency1 As Integer
Private FieldReplacePrice As Integer
Private FieldCurrency2 As Integer
Private FieldCostBaseDate As Integer
Private FieldSupplier As Integer
Private FieldSupplierPartNumber As Integer
Private FieldBTPartNumber As Integer
Private FieldSupplierInitialSparesRecommendation As Integer
Private FieldInitialSparesPrice As Integer
Private FieldCurrency3 As Integer
Private FieldWarrantyPeriodYears As Integer
Private FieldLeadTimeDays As Integer
Private FieldSpecialToolsAndEquipment As Integer
Private FieldSourceOfData As Integer

Private UsedMaintenanceCollection As Collection
Private AnnualOperationHoursCollection As Collection
Private AnnualCyclesCollection As Collection

Private g_ImportActive As Boolean

Public Sub DeaktivateFieldWatchInputValues()
  g_ImportActive = True
End Sub

Public Sub AktivateFieldWatchInputValues()
  g_ImportActive = False
End Sub

Public Function GetFieldWatchInputValues()
  GetFieldWatchInputValues = g_ImportActive
End Function

'Button "Add BLESS"
'Mario Babel 07.01.2019
Sub CommandButton_AddBLESS()
  Dim datein As Variant
  Dim zeile As Integer
  Dim icounter As Integer
  Dim filePath As String
  Dim saved As Boolean
  Dim zaehler As Integer
  
  Dim lala As String
    
  zeile = 7
  datein = Application.GetOpenFilename("Alle-Dateien (*.*),*.*,", MultiSelect:=True)
  On Error GoTo On_Error  'Abbruch wenn keine Datei ausgew|fffd|hlt wurde
  For icounter = 1 To UBound(datein)
    filePath = datein(icounter)
    '|fffd|bersichtszeile f|fffd|llen
    saved = False
    While saved = False
      If Worksheets("Import BLESS").Cells(zeile, 2).Value = "" Then
        'Werte in Tabelle f|fffd|llen. Anzahl mit 0 vorgeben
        Worksheets("Import BLESS").Cells(zeile, 2).Value = filePath
        For zaehler = 1 To 6
        lala = Worksheets("Import BLESS").Cells(5, zaehler + 2).Value
          If Worksheets("Import BLESS").Cells(5, zaehler + 2).Value <> "0" Then
            Worksheets("Import BLESS").Cells(zeile, zaehler + 2).Value = 0
            Worksheets("Import BLESS").Cells(zeile, zaehler + 26).Value = 0
            Worksheets("Import BLESS").Cells(zeile, zaehler + 32).Value = "-"
          End If
        Next zaehler
        'Farbe System f|fffd|r Anzahl 0
        Worksheets("Import BLESS").Cells(zeile, 1).Interior.ColorIndex = 3    'rot
        'Worksheets("Import BLESS").Cells(zeile, 9).Value = "Not Calculated"
        'Worksheets("Import BLESS").Cells(zeile, 9).Interior.ColorIndex = 6 'gelb
'        If CheckBLESSFile(filePath) > 0 Then
'          Worksheets("Import BLESS").Cells(zeile, 4).Value = "Wrong Import Parameter"
'          Worksheets("Import BLESS").Cells(zeile, 4).Interior.ColorIndex = 3 'rot
'          Worksheets("Import BLESS").Cells(zeile, ???).Value = "-"
'        End If
        saved = True
      End If
      zeile = zeile + 1
    Wend
  Next icounter
   
On_Error:

End Sub

'Button "Update"
'Mario Babel 09.01.2019
Sub CommandButton_UpdateBLESS()

  Dim zeile As Integer
  Dim filePath As String
  Const RowFilePath As Integer = 93
  Dim spalte As Integer
  
  zeile = ActiveCell.Row
  If zeile < 7 Then Exit Sub
  If Worksheets("Import BLESS").Cells(zeile, 2).Value = "" Then Exit Sub
  
  filePath = Application.GetOpenFilename("Alle-Dateien (*.*),*.*,", MultiSelect:=False)
  On Error GoTo On_Error  'Abbruch wenn keine Datei ausgew|fffd|hlt wurde
  
  '|fffd|bersichtszeile f|fffd|llen wenn neue Datei gew|fffd|hlt
  If Worksheets("Import BLESS").Cells(zeile, 2).Value <> filePath And filePath <> "Falsch" Then

    'Werte in Tabelle f|fffd|llen. Anzahl mit 0 vorgeben
    'Worksheets("Import BLESS").Cells(zeile, 1).Value = "WBA Info (ToDo Ingo)"
    Worksheets("Import BLESS").Cells(zeile, 2).Value = filePath
    Worksheets("Import BLESS").Cells(zeile, 3).Value = 0
    'Farbe System f|fffd|r Anzahl 0
    Worksheets("Import BLESS").Cells(zeile, 1).Interior.ColorIndex = 3    'rot
    'Worksheets("Import BLESS").Cells(zeile, 9).Value = "Not Calculated"
    'Worksheets("Import BLESS").Cells(zeile, 9).Interior.ColorIndex = 6 'gelb
    If CheckBLESSFile(filePath) > 0 Then
      'Worksheets("Import BLESS").Cells(zeile, 9).Value = "Wrong Import Parameter"
      'Worksheets("Import BLESS").Cells(zeile, 9).Interior.ColorIndex = 3 'rot
      Worksheets("Import BLESS").Cells(zeile, 55).Value = "-"
    End If
    'Alte Importwerte l|fffd|schen
    For spalte = 45 To 79
      Worksheets("Import BLESS").Cells(zeile, spalte).Value = Null
    Next
    For spalte = 81 To 299
      Worksheets("Import BLESS").Cells(zeile, spalte).Value = Null
    Next
    Worksheets("Import BLESS").Cells(zeile, 5).Value = Null
    
    
    'Importierte Daten pr|fffd|fen, falsl Datei bereits eingelesen
    If Worksheets("Import BLESS").Cells(zeile, 80).Value = "X" Then
      Dim app As New Excel.Application
      Dim book As Excel.Workbook
      app.Visible = False
      Set book = app.Workbooks.Add(filePath)
      Dim emptyRows As Integer
      Dim zeileQuelle As Integer
    
      Dim zeileZiel As Integer
      For zeileZiel = 11 To 5000
        If Worksheets("Input Values").Cells(zeileZiel, RowFilePath).Value = filePath Then
          'L|fffd|schen der aktuellen Kalkulation
          Dim myColumn As Integer
          For myColumn = 95 To 200
            If myColumn <> 172 And myColumn <> 176 Then
              Worksheets("Input Values").Cells(zeileZiel, myColumn).Value = ""
            End If
          Next
          
          Dim FieldBLESSLineNo As Integer
          FieldBLESSLineNo = Worksheets("Input Values").Cells(zeileZiel, 7).Value
                    
          emptyRows = 0
          zeileQuelle = 14
                                             
          While emptyRows < 5
            If book.Worksheets("Input Sheet").Cells(zeileQuelle, 1).Value <> "" Or book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value <> "" Or book.Worksheets("Input Sheet").Cells(zeileQuelle, 3).Value <> "" Then
              If FieldBLESSLineNo = book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value Then
                Worksheets("Input Values").Cells(zeileZiel, 76).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 30).Value
                Worksheets("Input Values").Cells(zeileZiel, 75).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 31).Value
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 32).Value <> "" Then
                  Worksheets("Input Values").Cells(zeileZiel, 73).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 32).Value
                End If
                Worksheets("Input Values").Cells(zeileZiel, 84).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 35).Value
                Worksheets("Input Values").Cells(zeileZiel, 25).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 39).Value
              End If
            Else
              emptyRows = emptyRows + 1
            End If
                  
            zeileQuelle = zeileQuelle + 1
          Wend
        End If
        
      Next zeileZiel
      book.Close SaveChanges:=False
      app.Quit
      Set app = Nothing
    End If
  End If
      
On_Error:

End Sub

'Button "Remove"
'Mario Babel 09.01.2019
Sub CommandButton_RemoveBLESS()

  Dim zeile As Integer
  Dim filePath As String
  Dim spalte As Integer
  
  zeile = ActiveCell.Row
  If zeile < 7 Then Exit Sub
  If Worksheets("Import BLESS").Cells(zeile, 2).Value = "" Then Exit Sub
  
  On Error GoTo On_Error
  
  'Alte Importwerte l|fffd|schen
  Worksheets("Import BLESS").Cells(zeile, 1).Interior.ColorIndex = 0    'Neutral
  Worksheets("Import BLESS").Cells(zeile, 9).Interior.Color = RGB(171, 158, 153) 'RGB Farbe (Zelle nicht bearbeitbar)
  For spalte = 1 To 299
    Worksheets("Import BLESS").Cells(zeile, spalte).Value = Null
  Next

On_Error:

End Sub

'Button "Calculate Preview"
'Mario Babel 07.01.2019
Sub CommandButton_CalculateImportData()

  Dim anzahlZeilenBLESS As Integer
  Dim zeileImport As Integer
  Dim zeileQuelle As Integer
  Dim filePath As String
  Dim myQuantity As Integer
  Dim myVehicle As String
  Dim MyYear As Integer
  Dim mySpalte As Integer
  Dim emptyRows As Integer
  Dim debugError As Boolean

  anzahlZeilenBLESS = Worksheets("Import BLESS").Cells(1048576, 2).End(xlUp).Row
'  'Jahresrechnung l|fffd|schen
''  Dim MyCell As Variant
''  For Each MyCell In Range("G13:P52")
''    MyCell.Value = ""
''  Next
'  For MyYear = 4 To 43
'    For mySpalte = 22 To 27
'      Worksheets("Import BLESS").Cells(MyYear + 10, mySpalte).Value = Null
'    Next
'  Next
  
  For zeileImport = 7 To anzahlZeilenBLESS
    filePath = Worksheets("Import BLESS").Cells(zeileImport, 2).Value
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    'ActiveWindow.Visible = False
    
    emptyRows = 0
    zeileQuelle = 7
    debugError = False
       
    For mySpalte = 12 To 18
      Worksheets("Import BLESS").Cells(zeileImport, mySpalte).Value = Null
    Next
    For mySpalte = 20 To 25
      Worksheets("Import BLESS").Cells(zeileImport, mySpalte).Value = Null
    Next
    
    myVehicle = Worksheets("Import BLESS").Cells(2, 10).Value
    
    Select Case myVehicle
      Case Worksheets("Import BLESS").Cells(5, 3).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 3).Value
      Case Worksheets("Import BLESS").Cells(5, 4).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 4).Value
      Case Worksheets("Import BLESS").Cells(5, 5).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 5).Value
      Case Worksheets("Import BLESS").Cells(5, 6).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 6).Value
      Case Worksheets("Import BLESS").Cells(5, 7).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 7).Value
      Case Worksheets("Import BLESS").Cells(5, 8).Value
        myQuantity = Worksheets("Import BLESS").Cells(zeileImport, 8).Value
      Case Else
        myQuantity = 0
    End Select
    
    'Daten einlesen, wenn _Neu
    If Worksheets("Import BLESS").Cells(zeileImport, 55).Value = "" Then
      If Not IsFileOpen(filePath) Then
        Dim app As New Excel.Application
        Dim book As Excel.Workbook
        app.Visible = False
        Set book = app.Workbooks.Add(filePath)
        
        If CheckBLESSWorkbook(book) > 0 Then
        
          Worksheets("Import BLESS").Cells(zeileImport, 4).Value = "Not Calculated - Wrong Import Parameter"
          Worksheets("Import BLESS").Cells(zeileImport, 4).Interior.ColorIndex = 3 'rot
          Worksheets("Import BLESS").Cells(zeileImport, 55).Value = "-"
          
        Else
        
'          'Jahreswerte
'          For MyYear = 4 To 43
'            Worksheets("Import BLESS").Cells(zeileImport, 80 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Labour Hours").Cells(14, MyYear).Value)
'            Worksheets("Import BLESS").Cells(zeileImport, 81 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Material Cost").Cells(14, MyYear).Value)
'            Worksheets("Import BLESS").Cells(zeileImport, 82 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Labour Hours").Cells(17, MyYear).Value)
'            Worksheets("Import BLESS").Cells(zeileImport, 83 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Material Cost").Cells(17, MyYear).Value)
'            Worksheets("Import BLESS").Cells(zeileImport, 84 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Labour Hours").Cells(20, MyYear).Value)
'            Worksheets("Import BLESS").Cells(zeileImport, 85 + ((MyYear - 4) * 6)).Value = (book.Worksheets("Annual Material Cost").Cells(20, MyYear).Value)
'          Next
          
          'Summen
          Worksheets("Import BLESS").Cells(zeileImport, 60).Value = book.Worksheets("Annual Labour Hours").Cells(14, 3).Value
          Worksheets("Import BLESS").Cells(zeileImport, 61).Value = book.Worksheets("Annual Material Cost").Cells(14, 3).Value
          Worksheets("Import BLESS").Cells(zeileImport, 62).Value = book.Worksheets("Annual Labour Hours").Cells(17, 3).Value
          Worksheets("Import BLESS").Cells(zeileImport, 63).Value = book.Worksheets("Annual Material Cost").Cells(17, 3).Value
          Worksheets("Import BLESS").Cells(zeileImport, 64).Value = book.Worksheets("Annual Labour Hours").Cells(20, 3).Value
          Worksheets("Import BLESS").Cells(zeileImport, 65).Value = book.Worksheets("Annual Material Cost").Cells(20, 3).Value
          
          'RAM
          Worksheets("Import BLESS").Cells(zeileImport, 70).Value = book.Worksheets("RAM").Cells(16, 4).Value
          Worksheets("Import BLESS").Cells(zeileImport, 71).Value = book.Worksheets("RAM").Cells(16, 5).Value
          Worksheets("Import BLESS").Cells(zeileImport, 72).Value = book.Worksheets("RAM").Cells(16, 6).Value
          Worksheets("Import BLESS").Cells(zeileImport, 73).Value = book.Worksheets("RAM").Cells(16, 7).Value
          Worksheets("Import BLESS").Cells(zeileImport, 74).Value = book.Worksheets("RAM").Cells(16, 8).Value
          Worksheets("Import BLESS").Cells(zeileImport, 75).Value = book.Worksheets("RAM").Cells(16, 9).Value
          
          zeileQuelle = 14
          While emptyRows < 5
            If book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value = "" Then
              emptyRows = emptyRows + 1
            End If
            If book.Worksheets("Input Sheet").Cells(zeileQuelle, 1).Value = "debug" Then
              debugError = True
            End If
            zeileQuelle = zeileQuelle + 1
          Wend
          
          Worksheets("Import BLESS").Cells(zeileImport, 55).Value = "X"
          
        End If
                      
        book.Close SaveChanges:=False
        app.Quit
        Set app = Nothing
             
      Else
        Worksheets("Import BLESS").Cells(zeileImport, 4).Value = "File Error"
        Worksheets("Import BLESS").Cells(zeileImport, 4).Interior.ColorIndex = 3 'rot
      End If
    End If
    
    If Worksheets("Import BLESS").Cells(zeileImport, 55).Value = "X" And debugError = False Then
      If myQuantity > 0 Then
             
'        'Jahresrechnung
'        For MyYear = 4 To 43
'          Worksheets("Import BLESS").Cells(MyYear + 10, 22).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 22).Value + (Worksheets("Import BLESS").Cells(zeileImport, 70 + ((MyYear - 4) * 6)).Value * myQuantity)
'          Worksheets("Import BLESS").Cells(MyYear + 10, 23).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 23).Value + (Worksheets("Import BLESS").Cells(zeileImport, 71 + ((MyYear - 4) * 6)).Value * myQuantity)
'          Worksheets("Import BLESS").Cells(MyYear + 10, 24).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 24).Value + (Worksheets("Import BLESS").Cells(zeileImport, 72 + ((MyYear - 4) * 6)).Value * myQuantity)
'          Worksheets("Import BLESS").Cells(MyYear + 10, 25).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 25).Value + (Worksheets("Import BLESS").Cells(zeileImport, 73 + ((MyYear - 4) * 6)).Value * myQuantity)
'          Worksheets("Import BLESS").Cells(MyYear + 10, 26).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 26).Value + (Worksheets("Import BLESS").Cells(zeileImport, 74 + ((MyYear - 4) * 6)).Value * myQuantity)
'          Worksheets("Import BLESS").Cells(MyYear + 10, 27).Value = Worksheets("Import BLESS").Cells(MyYear + 10, 27).Value + (Worksheets("Import BLESS").Cells(zeileImport, 75 + ((MyYear - 4) * 6)).Value * myQuantity)
'        Next
             
        'Summen
        Worksheets("Import BLESS").Cells(zeileImport, 13).Value = Worksheets("Import BLESS").Cells(zeileImport, 60).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 14).Value = Worksheets("Import BLESS").Cells(zeileImport, 61).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 15).Value = Worksheets("Import BLESS").Cells(zeileImport, 62).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 16).Value = Worksheets("Import BLESS").Cells(zeileImport, 63).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 17).Value = Worksheets("Import BLESS").Cells(zeileImport, 64).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 18).Value = Worksheets("Import BLESS").Cells(zeileImport, 65).Value * myQuantity
        Worksheets("Import BLESS").Cells(zeileImport, 12).Value = Worksheets("Import BLESS").Cells(zeileImport, 13).Value + Worksheets("Import BLESS").Cells(zeileImport, 14).Value + Worksheets("Import BLESS").Cells(zeileImport, 15).Value + Worksheets("Import BLESS").Cells(zeileImport, 16).Value + Worksheets("Import BLESS").Cells(zeileImport, 17).Value + Worksheets("Import BLESS").Cells(zeileImport, 18).Value
        
        'RAM
        Worksheets("Import BLESS").Cells(zeileImport, 20).Value = Worksheets("Import BLESS").Cells(zeileImport, 70).Value
        Worksheets("Import BLESS").Cells(zeileImport, 21).Value = Worksheets("Import BLESS").Cells(zeileImport, 71).Value
        Worksheets("Import BLESS").Cells(zeileImport, 22).Value = Worksheets("Import BLESS").Cells(zeileImport, 72).Value
        Worksheets("Import BLESS").Cells(zeileImport, 23).Value = Worksheets("Import BLESS").Cells(zeileImport, 73).Value
        Worksheets("Import BLESS").Cells(zeileImport, 24).Value = Worksheets("Import BLESS").Cells(zeileImport, 74).Value
        Worksheets("Import BLESS").Cells(zeileImport, 25).Value = Worksheets("Import BLESS").Cells(zeileImport, 75).Value
                    
        Worksheets("Import BLESS").Cells(zeileImport, 9).Value = "Calculated"
        Worksheets("Import BLESS").Cells(zeileImport, 9).Interior.ColorIndex = 4 'gr|fffd|n
      Else
        Worksheets("Import BLESS").Cells(zeileImport, 9).Value = ""
        Worksheets("Import BLESS").Cells(zeileImport, 9).Interior.ColorIndex = 0 'weiss
      End If
    End If
    'Worksheets("Import BLESS").Cells(zeileImport, 11).Font.ColorIndex = 2 'weiss
    Worksheets("Import BLESS").Cells(zeileImport, 11).Value = myQuantity
    
    If debugError Then
      Worksheets("Import BLESS").Cells(zeileImport, 9).Value = "Debug Error"
      Worksheets("Import BLESS").Cells(zeileImport, 9).Interior.ColorIndex = 3 'rot
    End If
  Next

On_Error:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  'ActiveWindow.Visible = True
End Sub

Sub CommandButton_CompareBLESS()

'Removed

On_Error:

End Sub

Sub CommandButton_ImportData()

Dim anzahlZeilenBLESS As Integer
  Dim zeileImport As Integer
  Dim filePath As String
  Dim zeileZiel As Integer
  Dim zeileQuelle As Integer
  Dim emptyRows As Integer
  Dim myID As Integer
  Dim InStrPosition As Integer

  Dim D18ProjektDescription_WarrantyPeriod As Variant     'BLESS Project Description Cell D18
  Dim F5InputSheet_Currency As String                     'BLESS Input Sheet Cell F5
  Dim D6InputSheet_SystemSupplier As Variant              'BLESS Input Sheet Cell D6
  Dim F7InputSheet_CostBaseDate As Variant                'BLESS Input Sheet Cell F7

  Dim AFInputSheet_ReplaceRate As Double                  'BLESS Input Sheet Column AF
  Dim AGInputSheet_RepairRate As Double                   'BLESS Input Sheet Column AG
  Dim myScrapeRate As Double
  Dim myOperatingScenario As String

  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  Call SetRowNumbers
  Call InitilizeCollections
  Call DeaktivateFieldWatchInputValues
  
  anzahlZeilenBLESS = Worksheets("Import BLESS").Cells(1048576, 2).End(xlUp).Row
  zeileZiel = ImportNameColumn + 2
  myID = 1
   
  Dim neueZeile As Integer
  neueZeile = Worksheets("Input Values").Cells(1048576, 1).End(xlUp).Row
  If neueZeile > 15 Then
    zeileZiel = neueZeile
    Dim myRow As Integer
    For myRow = 15 To zeileZiel
      If myID < Worksheets("Import BLESS").Cells(myRow, 1).Value Then myID = Worksheets("Import BLESS").Cells(myRow, 1).Value + 1
    Next
  End If
  
  For zeileImport = 7 To anzahlZeilenBLESS
    If Not Worksheets("Import BLESS").Cells(zeileImport, 80).Value = "X" Then
      filePath = Worksheets("Import BLESS").Cells(zeileImport, 2).Value
   
      'Daten einlesen
      If filePath <> "" Then
        If Not IsFileOpen(filePath) Then
          Dim app As New Excel.Application
          Dim book As Excel.Workbook
          app.Visible = False
          Set book = app.Workbooks.Add(filePath)
          
          If CheckBLESSWorkbook(book) > 0 Then
          
            Worksheets("Import BLESS").Cells(zeileImport, 4).Value = "Not Imported - Wrong Import Parameter"
            Worksheets("Import BLESS").Cells(zeileImport, 4).Interior.ColorIndex = 3 'rot
            Worksheets("Import BLESS").Cells(zeileImport, 55).Value = "-"
            
          Else
          
            '|fffd|berschrift
            Call IVFormatLineHeadLine(zeileZiel)
            Worksheets("Input Values").Cells(zeileZiel, FieldStructureLevel).Value = "EQT"
            InStrPosition = InStr(1, Worksheets("Import BLESS").Cells(zeileImport, 1).Value, " ")
            Worksheets("Input Values").Cells(zeileZiel, FieldVehicleBreakdownStructureBombardier).Value = Trim(Left(Worksheets("Import BLESS").Cells(zeileImport, 1).Value, InStrPosition))    'ImportBLESS column A
            Worksheets("Input Values").Cells(zeileZiel, FieldSystemName).Value = Trim(Mid(Worksheets("Import BLESS").Cells(zeileImport, 1).Value, InStrPosition))    'ImportBLESS column A
            Worksheets("Input Values").Cells(zeileZiel, FieldSuppliersystembreakdown).Value = book.Worksheets("Input Sheet").Cells(14, 3).Value    'BLESS Input Sheet Column C
            Worksheets("Input Values").Cells(zeileZiel, FieldLineItemOnOff).Value = 1
            zeileZiel = zeileZiel + 1
          
            emptyRows = 0
            zeileQuelle = 14
                    
            D18ProjektDescription_WarrantyPeriod = book.Worksheets("Project Description").Cells(18, 4).Value
            
            Dim NewCurrency As String
            NewCurrency = book.Worksheets("Input Sheet").Cells(5, 6).Value
            If Len(NewCurrency) > 3 Then
                F5InputSheet_Currency = Mid(NewCurrency, (InStr(1, NewCurrency, "(") + 1), 3)
            Else
              F5InputSheet_Currency = NewCurrency
            End If
                
            D6InputSheet_SystemSupplier = book.Worksheets("Input Sheet").Cells(6, 4).Value
            F7InputSheet_CostBaseDate = book.Worksheets("Input Sheet").Cells(7, 6).Value
                          
            While emptyRows < 5
              If book.Worksheets("Input Sheet").Cells(zeileQuelle, 1).Value <> "" Or book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value <> "" Or book.Worksheets("Input Sheet").Cells(zeileQuelle, 3).Value <> "" Then
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 1).Value = "free" Or book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value = "" Then
                  Worksheets("Input Values").Cells(zeileZiel, FieldLineItemOnOff).Value = 0
                Else
                  Worksheets("Input Values").Cells(zeileZiel, FieldLineItemOnOff).Value = 1
                  Worksheets("Input Values").Cells(zeileZiel, FieldIncludedInMaintenancePlan).Value = "Y"
                
                End If
              
                Worksheets("Input Values").Cells(zeileZiel, FieldUniqueID).Value = myID 'newGUID() 'ID
                
                InStrPosition = InStr(1, Worksheets("Import BLESS").Cells(zeileImport, 1).Value, " ")
                Worksheets("Input Values").Cells(zeileZiel, FieldVehicleBreakdownStructureBombardier).Value = Trim(Left(Worksheets("Import BLESS").Cells(zeileImport, 1).Value, InStrPosition))    'ImportBLESS column A
                Worksheets("Input Values").Cells(zeileZiel, FieldSystemName).Value = Trim(Mid(Worksheets("Import BLESS").Cells(zeileImport, 1).Value, InStrPosition))    'ImportBLESS column A
                              
                Worksheets("Input Values").Cells(zeileZiel, FieldSourceOfData).Value = filePath    'FileName from ImportBLESS column B
                
                Worksheets("Input Values").Cells(zeileZiel, FieldSuppliersystembreakdown).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 3).Value    'BLESS Input Sheet Column C
                Worksheets("Input Values").Cells(zeileZiel, FieldBLESSLineNo).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 2).Value    'BLESS Input Sheet Column B
                Worksheets("Input Values").Cells(zeileZiel, FieldStructureLevel).Value = "LRU"
                Worksheets("Input Values").Cells(zeileZiel, FieldSubSystemComponent).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 4).Value    'BLESS Input Sheet Column D
                Worksheets("Input Values").Cells(zeileZiel, FieldTaskDescription).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 17).Value    'BLESS Input Sheet Column Q
                'Worksheets("Input Values").Cells(zeileZiel, FieldFailureDetectableViaDianosticSoftware).Value = ""    'Blank via Import
                'Worksheets("Input Values").Cells(zeileZiel, FieldTaskPerformedOnVehicle).Value = ""    'Blank via Import
                Worksheets("Input Values").Cells(zeileZiel, FieldWorkArea).Value = ""
                
                
                
  
                
                Worksheets("Input Values").Cells(zeileZiel, FieldSuppliercomments).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 19).Value    'BLESS Input Sheet Column S
      
                Worksheets("Input Values").Cells(zeileZiel, FieldLevelofMaintenance).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 18).Value    'BLESS Input Sheet Column R
                
                'BLESS Input Sheet Column F/G/H depending which one is selected
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 6).Value = 1 Then
                  Worksheets("Input Values").Cells(zeileZiel, FieldTypeofmaintenance).Value = "PM"
                  Worksheets("Input Values").Cells(zeileZiel, FieldFrequencySelection).Value = "SUPPLIER"
                End If
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 7).Value = 1 Then
                  Worksheets("Input Values").Cells(zeileZiel, FieldTypeofmaintenance).Value = "CM"
                  Worksheets("Input Values").Cells(zeileZiel, FieldFrequencySelection).Value = "FAILURE"
                End If
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 8).Value = 1 Then
                  Worksheets("Input Values").Cells(zeileZiel, FieldTypeofmaintenance).Value = "OH"
                  Worksheets("Input Values").Cells(zeileZiel, FieldFrequencySelection).Value = "SUPPLIER"
                End If
                                  
                                                          
                Worksheets("Input Values").Cells(zeileZiel, FieldScheduledMaintenancefrequencySup).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 39).Value    'BLESS Input Sheet Column AM
                Worksheets("Input Values").Cells(zeileZiel, FieldScheduledMaintenanceunitSup).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 40).Value    'BLESS Input Sheet Column AN
      
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryA).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 42).Value    'BLESS Input Sheet Column AP
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryB).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 43).Value    'BLESS Input Sheet Column AQ
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryC).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 44).Value    'BLESS Input Sheet Column AR
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryD).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 45).Value    'BLESS Input Sheet Column AS
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryE).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 46).Value    'BLESS Input Sheet Column AT
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureCategoryF).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 47).Value    'BLESS Input Sheet Column AU
                Worksheets("Input Values").Cells(zeileZiel, FieldFailureunit).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 41).Value    'BLESS Input Sheet Column AO
                Worksheets("Input Values").Cells(zeileZiel, FieldSourceoffailuredata).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 50).Value    'BLESS Input Sheet Column AX
                
                'ToDo: noch anpassen
                myOperatingScenario = book.Worksheets("Input Sheet").Cells(zeileQuelle, 51).Value
                Select Case myOperatingScenario
                  Case "A"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 8).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 8).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  Case "B"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 9).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 9).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  Case "C"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 10).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 10).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  Case "D"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 11).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 11).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  Case "E"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 12).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 12).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  Case "F"
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatinghours).Value = book.Worksheets("Project Description").Cells(10, 13).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                    Worksheets("Input Values").Cells(zeileZiel, FieldAnnualoperatingcycles).Value = book.Worksheets("Project Description").Cells(11, 13).Value    'BLESS Input Sheet Column AY translated into the corresponding numeric value
                  End Select
      
                Worksheets("Input Values").Cells(zeileZiel, FieldSourceoflabourdata).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 29).Value    'BLESS Input Sheet Column AC
                Worksheets("Input Values").Cells(zeileZiel, FieldTasktimeHs).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 22).Value + book.Worksheets("Input Sheet").Cells(zeileQuelle, 23).Value    'BLESS Input Sheet Sum of Column V and W
                Worksheets("Input Values").Cells(zeileZiel, FieldCrewsize).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 21).Value    'BLESS Input Sheet Column U
                
                Worksheets("Input Values").Cells(zeileZiel, FieldJobtitle1).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 24).Value    'BLESS Input Sheet Column X
                Worksheets("Input Values").Cells(zeileZiel, FieldJobtitle2).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 25).Value    'BLESS Input Sheet Column Y
                Worksheets("Input Values").Cells(zeileZiel, FieldJobtitle3).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 26).Value    'BLESS Input Sheet Column Z
                Worksheets("Input Values").Cells(zeileZiel, FieldJobtitle4).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 27).Value    'BLESS Input Sheet Column AA
                Worksheets("Input Values").Cells(zeileZiel, FieldJobtitle5).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 28).Value    'BLESS Input Sheet Column AB
                
                Dim FieldModul01Multi As Integer
                Dim FieldModul02Multi As Integer
                Dim FieldModul03Multi As Integer
                Dim FieldModul04Multi As Integer
                Dim FieldModul05Multi As Integer
                Dim FieldModul06Multi As Integer
                Dim FieldModul07Multi As Integer
                Dim FieldModul08Multi As Integer
                
                If IsNumeric(book.Worksheets("Project Description").Cells(28, 4).Value) Then
                  If IsNumeric(book.Worksheets("Project Description").Cells(31, 4).Value) Then FieldModul01Multi = book.Worksheets("Project Description").Cells(31, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(33, 4).Value) Then FieldModul02Multi = book.Worksheets("Project Description").Cells(33, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(35, 4).Value) Then FieldModul03Multi = book.Worksheets("Project Description").Cells(35, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(37, 4).Value) Then FieldModul04Multi = book.Worksheets("Project Description").Cells(37, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(39, 4).Value) Then FieldModul05Multi = book.Worksheets("Project Description").Cells(39, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(41, 4).Value) Then FieldModul06Multi = book.Worksheets("Project Description").Cells(41, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(43, 4).Value) Then FieldModul07Multi = book.Worksheets("Project Description").Cells(43, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                  If IsNumeric(book.Worksheets("Project Description").Cells(45, 4).Value) Then FieldModul08Multi = book.Worksheets("Project Description").Cells(45, 4).Value * book.Worksheets("Project Description").Cells(28, 4).Value
                End If
                
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 9).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul1).Value = FieldModul01Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 9).Value   'BLESS Input Sheet Column I
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 10).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul2).Value = FieldModul02Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 10).Value    'BLESS Input Sheet Column J
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 11).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul3).Value = FieldModul03Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 11).Value    'BLESS Input Sheet Column K
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 12).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul4).Value = FieldModul04Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 12).Value    'BLESS Input Sheet Column L
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 13).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul5).Value = FieldModul05Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 13).Value    'BLESS Input Sheet Column M
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 14).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul6).Value = FieldModul06Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 14).Value    'BLESS Input Sheet Column N
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 15).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul7).Value = FieldModul07Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 15).Value    'BLESS Input Sheet Column O
                If IsNumeric(book.Worksheets("Input Sheet").Cells(zeileQuelle, 16).Value) Then Worksheets("Input Values").Cells(zeileZiel, FieldModul8).Value = FieldModul08Multi * book.Worksheets("Input Sheet").Cells(zeileQuelle, 16).Value    'BLESS Input Sheet Column P
    
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 32).Value <> "" Then
                  AFInputSheet_ReplaceRate = book.Worksheets("Input Sheet").Cells(zeileQuelle, 32).Value
                Else
                  AFInputSheet_ReplaceRate = 0
                End If
                If book.Worksheets("Input Sheet").Cells(zeileQuelle, 33).Value <> "" Then
                  AGInputSheet_RepairRate = book.Worksheets("Input Sheet").Cells(zeileQuelle, 33).Value
                Else
                  AGInputSheet_RepairRate = 0
                End If
                myScrapeRate = AFInputSheet_ReplaceRate  '(AFInputSheet_ReplaceRate + AGInputSheet_RepairRate) / 2
                If myScrapeRate > 0 Then
                  Worksheets("Input Values").Cells(zeileZiel, FieldScrapRatePercent).Style = "Percent"
                  Worksheets("Input Values").Cells(zeileZiel, FieldScrapRatePercent).Value = myScrapeRate '& "%" 'BLESS Input Sheet Combination of Columns AF and AG
                End If
                
                Worksheets("Input Values").Cells(zeileZiel, FieldRepairPrice).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 31).Value    'BLESS Input Sheet Column AE
                Worksheets("Input Values").Cells(zeileZiel, FieldCurrency1).Value = F5InputSheet_Currency    'BLESS Input Sheet Cell F5
                Worksheets("Input Values").Cells(zeileZiel, FieldReplacePrice).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 30).Value    'BLESS Input Sheet Column AD
                Worksheets("Input Values").Cells(zeileZiel, FieldCurrency2).Value = F5InputSheet_Currency    'BLESS Input Sheet Cell F5
                Worksheets("Input Values").Cells(zeileZiel, FieldCostBaseDate).Value = F7InputSheet_CostBaseDate    'BLESS Input Sheet Cell F7
                
                Worksheets("Input Values").Cells(zeileZiel, FieldSupplier).Value = D6InputSheet_SystemSupplier    'BLESS Input Sheet Cell D6
                Worksheets("Input Values").Cells(zeileZiel, FieldSupplierPartNumber).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 5).Value    'BLESS Input Sheet Column E
                Worksheets("Input Values").Cells(zeileZiel, FieldSupplierInitialSparesRecommendation).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 37).Value    'BLESS Input Sheet Column AK
                Worksheets("Input Values").Cells(zeileZiel, FieldInitialSparesPrice).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 35).Value    'BLESS Input Sheet Column AI
                Worksheets("Input Values").Cells(zeileZiel, FieldCurrency3).Value = F5InputSheet_Currency    'BLESS Input Sheet Cell F5
                Worksheets("Input Values").Cells(zeileZiel, FieldWarrantyPeriodYears).Value = D18ProjektDescription_WarrantyPeriod    'BLESS Project Description Cell D18
                Worksheets("Input Values").Cells(zeileZiel, FieldLeadTimeDays).Value = (book.Worksheets("Input Sheet").Cells(zeileQuelle, 36).Value) * 6    'BLESS Input Sheet Column AJ, Umrechnung Weeks in WorkingDays
                Worksheets("Input Values").Cells(zeileZiel, FieldSpecialToolsAndEquipment).Value = book.Worksheets("Input Sheet").Cells(zeileQuelle, 20).Value    'BLESS Input Sheet Column T
                           
                Call UpdateCollections(zeileZiel)
                           
                zeileZiel = zeileZiel + 1
                myID = myID + 1
              Else
                emptyRows = emptyRows + 1
              End If
                    
              zeileQuelle = zeileQuelle + 1
            Wend
             
          End If
                     
          book.Close SaveChanges:=False
          app.Quit
          Set app = Nothing
          Worksheets("Import BLESS").Cells(zeileImport, 9).Value = "Imported"
          Worksheets("Import BLESS").Cells(zeileImport, 80).Value = "X"
          Worksheets("Import BLESS").Cells(zeileImport, 9).Interior.ColorIndex = 4 'gr|fffd|n
        End If
      End If
    End If
    
  Next
  Call WriteCollections
  Call AktivateFieldWatchInputValues
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  Exit Sub

On_Error:
  Call AktivateFieldWatchInputValues
  Application.ScreenUpdating = True
  Application.EnableEvents = True

End Sub

Private Function IsFileOpen(path As String) As Boolean

    On Error Resume Next
    
    Open path For Binary Access Read Lock Read As #1
    Close #1
    
    If Err.Number <> 0 Then
        IsFileOpen = True
        Err.Clear
    End If
    
End Function

Function DelSpecChar(strSource As String) As String
  Dim i As Long
  Dim strTmp As String
 
  If IsNull(strSource) Then Exit Function
 
  For i = 1 To Len(strSource)
    Select Case Asc(Mid$(strSource, i, 1))
      Case 48 To 57, 65 To 90, 97 To 122
        strTmp = strTmp & Mid$(strSource, i, 1)
    End Select
  Next i
 
  DelSpecChar = strTmp
End Function

Private Sub SetRowNumbers()

  Dim myRow As Integer
  Dim ImportName As String
  
  For myRow = 1 To 200
    ImportName = DelSpecChar(Replace(LCase(Worksheets("Input Values").Cells(ImportNameColumn, myRow).Value), " ", ""))
    Debug.Print ImportName
    
    Select Case ImportName
      Case "uniqueid"
        FieldUniqueID = myRow
        FieldCorrectionLine = myRow + 1
        FieldErrorCheck = myRow + 2
        FieldVehicleBreakdownStructureBombardier = myRow + 3
        FieldVehicleBreakdownStructureCustomer = myRow + 4
        FieldSuppliersystembreakdown = myRow + 5
      Case "blesslineno"
        FieldBLESSLineNo = myRow
        FieldStructureLevel = myRow + 1
      Case "lineitemonoff"
        FieldLineItemOnOff = myRow
      Case "systemname"
        FieldSystemName = myRow
      Case "subsystemcomponent"
        FieldSubSystemComponent = myRow
      Case "taskdescription"
        FieldTaskDescription = myRow
      Case "includedinmaintenanceplan"
        FieldIncludedInMaintenancePlan = myRow
      Case "failuredetectableviadiagnosticsoftware"
        FieldFailureDetectableViaDianosticSoftware = myRow
      Case "taskperformedonvehicle"
        FieldTaskPerformedOnVehicle = myRow
      Case "workarea"
        FieldWorkArea = myRow
      Case "suppliercomments"
        FieldSuppliercomments = myRow
      Case "levelofmaintenance"
        FieldLevelofMaintenance = myRow
      Case "typeofmaintenance"
        FieldTypeofmaintenance = myRow
      Case "scheduledmaintenancefrequencysupplier"
        FieldScheduledMaintenancefrequencySup = myRow
        FieldScheduledMaintenanceunitSup = myRow + 1
        FieldScheduledMaintenancefrequencyBT = myRow + 2
        FieldScheduledMaintenanceunitBT = myRow + 3
        FieldFailureCategoryA = myRow + 4
        FieldFailureCategoryB = myRow + 5
        FieldFailureCategoryC = myRow + 6
        FieldFailureCategoryD = myRow + 7
        FieldFailureCategoryE = myRow + 8
        FieldFailureCategoryF = myRow + 9
      Case "failureunit"
        FieldFailureunit = myRow
      Case "sourceoffailuredata"
        FieldSourceoffailuredata = myRow
      Case "selectedfrequencyforcalculation"
        FieldSelectedFrequencyForCalculation = myRow
      Case "selectedunitforcalculation"
        FieldSelectedUnitForCalculation = myRow
      Case "frequencyselection"
        FieldFrequencySelection = myRow
        FieldFrequencyOffset = myRow + 1
      Case "annualoperatinghoursperitem"
        FieldAnnualoperatinghours = myRow
        FieldAnnualoperatingcycles = myRow + 1
      Case "sourceoflabourdata"
        FieldSourceoflabourdata = myRow
      Case "tasktimeinhrs"
        FieldTasktimeHs = myRow
      Case "crewsize"
        FieldCrewsize = myRow
        FieldJobtitle1 = myRow + 1
        FieldJobtitle2 = myRow + 2
        FieldJobtitle3 = myRow + 3
        FieldJobtitle4 = myRow + 4
        FieldJobtitle5 = myRow + 5
        QuantityPerVehicle1 = myRow + 7
        QuantityPerVehicle2 = myRow + 8
        QuantityPerVehicle3 = myRow + 9
        QuantityPerVehicle4 = myRow + 10
        QuantityPerVehicle5 = myRow + 11
        QuantityPerVehicle6 = myRow + 12
        FieldModul1 = myRow + 13
        FieldModul2 = myRow + 14
        FieldModul3 = myRow + 15
        FieldModul4 = myRow + 16
        FieldModul5 = myRow + 17
        FieldModul6 = myRow + 18
        FieldModul7 = myRow + 19
        FieldModul8 = myRow + 20
        FieldModul9 = myRow + 21
        FieldModul10 = myRow + 22
        FieldModul11 = myRow + 23
        FieldModul12 = myRow + 24
        FieldModul13 = myRow + 25
        FieldModul14 = myRow + 26
        FieldModul15 = myRow + 27
        FieldModul16 = myRow + 28
      Case "scrapratein"
        FieldScrapRatePercent = myRow
      Case "repairprice"
        FieldRepairPrice = myRow
        FieldCurrency1 = myRow + 1
      Case "replaceprice"
        FieldReplacePrice = myRow
        FieldCurrency2 = myRow + 1
      Case "costbasedate"
        FieldCostBaseDate = myRow
      Case "supplier"
        FieldSupplier = myRow
      Case "supplierpartnumber"
        FieldSupplierPartNumber = myRow
        FieldBTPartNumber = myRow + 1
      Case "initialproductionsparesprice"
        FieldInitialSparesPrice = myRow
        FieldCurrency3 = myRow + 1
      Case "supplierinitialsparesrecommendation"
        FieldSupplierInitialSparesRecommendation = myRow
      Case "warrantyperiodinyears"
        FieldWarrantyPeriodYears = myRow
      Case "leadtimeindays"
        FieldLeadTimeDays = myRow
      Case "specialtoolsandequipment"
        FieldSpecialToolsAndEquipment = myRow
      Case "sourceofdata"
        FieldSourceOfData = myRow
      Case Else
    End Select
  Next
End Sub

Public Function CheckBLESSFile(myfilePath As String) As Integer
  
  CheckBLESSFile = 0
  If Not IsFileOpen(myfilePath) Then
    Dim app As New Excel.Application
    Dim book As Excel.Workbook
    
    app.Visible = False
    Set book = app.Workbooks.Add(myfilePath)
    
    CheckBLESSFile = CheckBLESSWorkbook(book)
    
    book.Close SaveChanges:=False
    app.Quit
    Set app = Nothing
  
  End If

End Function

Public Function CheckSelectesVehicleID() As Integer
  Dim selectedVehicle As String
  Dim zaehler As Integer
  selectedVehicle = Worksheets("Import BLESS").Cells(2, 10).Value
  CheckSelectesVehicleID = 1
  For zaehler = 2 To 6
    If selectedVehicle = Worksheets("Import BLESS").Cells(5, zaehler + 2).Value Then
      CheckSelectesVehicleID = zaehler
      Exit Function
    End If
  Next zaehler
End Function

Public Function CheckBLESSWorkbook(myWorkbook As Excel.Workbook) As Integer

'  CheckBLESSWorkbook = 0
'  Dim checkValue1 As Variant
'  Dim checkValue2 As Variant
'
'  checkValue1 = myWorkbook.Worksheets("Project Description").Cells(19, 4).Value
'  checkValue2 = Worksheets("Import BLESS").Cells(6, 3).Value
'  If checkValue1 <> checkValue2 Then
'    CheckBLESSWorkbook = 4
'  End If
'
'  checkValue1 = myWorkbook.Worksheets("Project Description").Cells(18, 4).Value
'  checkValue2 = Worksheets("Import BLESS").Cells(5, 3).Value
'  If checkValue1 <> checkValue2 Then
'    CheckBLESSWorkbook = 3
'  End If
'
'  checkValue1 = myWorkbook.Worksheets("Project Description").Cells(17, 4).Value
'  checkValue2 = Worksheets("Import BLESS").Cells(4, 3).Value
'  If checkValue1 <> checkValue2 Then
'    CheckBLESSWorkbook = 2
'  End If
'
'  checkValue1 = myWorkbook.Worksheets("Project Description").Cells(14, 8).Value
'  checkValue2 = Worksheets("Import BLESS").Cells(3, 3).Value
'  If checkValue1 <> checkValue2 Then
'    CheckBLESSWorkbook = 1
'  End If
  
End Function

Public Function ValidateBLESSFile(myfilePath As String) As Integer
  
  ValidateBLESSFile = 0 'Datei konnte nicht gepr|fffd|ft werden
  On Error GoTo WorkBookError:
  
  If Not IsFileOpen(myfilePath) Then
 
    Dim app As New Excel.Application
    Dim book As Excel.Workbook
    
    app.Visible = False
    Set book = app.Workbooks.Add(myfilePath)
    
    ValidateBLESSFile = ValidateBLESSWorkbook(book)
    
    book.Close SaveChanges:=False
    app.Quit
    Set app = Nothing
  End If
  Exit Function
    
WorkBookError:

  ValidateBLESSFile = 1 'Datei ist keine Exceldatei
  
End Function

Public Function ValidateBLESSWorkbook(myWorkbook As Excel.Workbook) As Integer

  ValidateBLESSWorkbook = 2 'Datei ist keine BLESS Datei
  
  
  
  
  

  
End Function

Public Sub InitilizeCollections()

  Dim zeile As Integer
  Dim Entry As String
  Dim key As String
  Set UsedMaintenanceCollection = New Collection
  Set AnnualOperationHoursCollection = New Collection
  Set AnnualCyclesCollection = New Collection
    
  'F|fffd|lle Maintenance
  For zeile = 11 To 40
    If Worksheets("Project Data").Cells(zeile, 16).Value > 0 Then
      key = Worksheets("Project Data").Cells(zeile, 16).Value & Worksheets("Project Data").Cells(zeile, 17).Value
      Entry = Worksheets("Project Data").Cells(zeile, 16).Value & " " & Worksheets("Project Data").Cells(zeile, 17).Value
      UsedMaintenanceCollection.Add Entry, key
    End If
  Next zeile

  'F|fffd|lle Operation Hours
  For zeile = 5 To 40
    If Worksheets("Project Data").Cells(zeile, 20).Value > 0 Then
      Entry = Worksheets("Project Data").Cells(zeile, 20).Value
      AnnualOperationHoursCollection.Add Entry, Entry
    End If
  Next

  'F|fffd|lle Annual Cycles
  For zeile = 5 To 40
    If Worksheets("Project Data").Cells(zeile, 23).Value > 0 Then
      Entry = Worksheets("Project Data").Cells(zeile, 23).Value
      AnnualCyclesCollection.Add Entry, Entry
    End If
  Next

End Sub

Public Sub UpdateCollections(ByVal myZeile As Integer)

  Dim MaintenanceInterval As String
  Dim MaintenanceUnit As String
  Dim AnnualOperatingHours As String
  Dim AnnualCycles As String
  
  MaintenanceInterval = Worksheets("Input Values").Cells(myZeile, FieldScheduledMaintenancefrequencySup).Value
  MaintenanceUnit = Worksheets("Input Values").Cells(myZeile, FieldScheduledMaintenanceunitSup).Value
  AnnualOperatingHours = Worksheets("Input Values").Cells(myZeile, FieldAnnualoperatinghours).Value
  AnnualCycles = Worksheets("Input Values").Cells(myZeile, FieldAnnualoperatingcycles).Value
  
  If Not MaintenanceInterval = "" Or Not MaintenanceUnit = "" Then
    If Not ExistsInCollection(UsedMaintenanceCollection, MaintenanceInterval & MaintenanceUnit) Then
      UsedMaintenanceCollection.Add MaintenanceInterval & " " & MaintenanceUnit, MaintenanceInterval & MaintenanceUnit
    End If
  End If
  
  If Not AnnualOperatingHours = "" Then
    If Not ExistsInCollection(AnnualOperationHoursCollection, AnnualOperatingHours) Then
      AnnualOperationHoursCollection.Add AnnualOperatingHours, AnnualOperatingHours
    End If
  End If
  
  If Not AnnualCycles = "" Then
    If Not ExistsInCollection(AnnualCyclesCollection, AnnualCycles) Then
      AnnualCyclesCollection.Add AnnualCycles, AnnualCycles
    End If
  End If
   
End Sub

Public Sub WriteCollections()

  Dim Anzahl As Integer
  Dim zeile As Integer
  Dim EntryNumber As Integer
  Dim Entry As String
  Dim InStrPosition As Integer
  
  Anzahl = UsedMaintenanceCollection.Count
  zeile = 5
  If Anzahl > 0 Then
    For EntryNumber = 1 To Anzahl
      If Not Worksheets("Project Data").Cells(zeile, 16).Value > 0 Then
        Entry = UsedMaintenanceCollection.Item(EntryNumber)
          InStrPosition = InStr(1, Entry, " ")
          'Maintenance Interval Sicherung
          Worksheets("Project Data").Cells(zeile, 16).Value = Trim(Left(Entry, InStrPosition))
          Worksheets("Project Data").Cells(zeile, 17).Value = Trim(Mid(Entry, InStrPosition))
          Worksheets("Project Data").Cells(zeile, 18).Value = Trim(Left(Entry, InStrPosition)) & " " & Trim(Mid(Entry, InStrPosition))
          'Tempor|fffd|re Sicherung zur |fffd|nderungsverfolgung
          Worksheets("Project Data").Cells(zeile, 40).Value = Trim(Left(Entry, InStrPosition))
          Worksheets("Project Data").Cells(zeile, 41).Value = Trim(Mid(Entry, InStrPosition))
          Worksheets("Project Data").Cells(zeile, 42).Value = Trim(Left(Entry, InStrPosition)) & " " & Trim(Mid(Entry, InStrPosition))
                   
          '|fffd|bernahme in MaintenancePlan
'          Worksheets("Maintenance Plan & Overview").Cells(6 + EntryNumber, 2).Value = Worksheets("Project Data").Cells(zeile, 16).Value
'          Worksheets("Maintenance Plan & Overview").Cells(6 + EntryNumber, 3).Value = Worksheets("Project Data").Cells(zeile, 17).Value
'
      End If
      zeile = zeile + 1
    Next
  End If
    
  Anzahl = AnnualOperationHoursCollection.Count
  zeile = 5
  If Anzahl > 0 Then
    For EntryNumber = 1 To Anzahl
      If Not Worksheets("Project Data").Cells(zeile, 20).Value > 0 Then
        Entry = AnnualOperationHoursCollection.Item(EntryNumber)
        Worksheets("Project Data").Cells(zeile, 20).Value = Entry
      End If
      zeile = zeile + 1
    Next
  End If
  
  Anzahl = AnnualCyclesCollection.Count
  zeile = 5
  If Anzahl > 0 Then
    For EntryNumber = 1 To Anzahl
      If Not Worksheets("Project Data").Cells(zeile, 23).Value > 0 Then
        Entry = AnnualCyclesCollection.Item(EntryNumber)
        Worksheets("Project Data").Cells(zeile, 23).Value = Entry
      End If
      zeile = zeile + 1
    Next
  End If

End Sub

Function ExistsInCollection(col As Collection, key As Variant) As Boolean
   Dim myKey
   ExistsInCollection = True
   On Error GoTo notfound
     myKey = col.Item(key)
   On Error GoTo 0
   Exit Function
notfound:
   ExistsInCollection = False
End Function




Attribute VB_Name = "sInput_Values"
Sub Calculate_InputData()

End Sub

Sub Link_Entry()

End Sub

Public Sub test()
Call IVFormatLineHeadLine(60)
Call IVFormatLineNormal(61)
Call IVFormatLineEntry(62)
Call IVFormatLineSubEntry(63)
End Sub

Public Sub IVFormatLineNormal(ByVal LineNumber As Integer)
  'Zeilenh|fffd|he
  Worksheets("Input Values").Rows(LineNumber).RowHeight = 20
  'Hintergrundfarben
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 1), Worksheets("Input Values").Cells(LineNumber, 189)).Interior.ColorIndex = 2
  'Schrift
  Worksheets("Input Values").Rows(LineNumber).Font.Bold = False
  Worksheets("Input Values").Rows(LineNumber).Font.Size = 10
  Worksheets("Input Values").Rows(LineNumber).Font.ColorIndex = 1
End Sub

Public Sub IVFormatLineHeadLine(ByVal LineNumber As Integer)
  'Zeilenh|fffd|he
  Worksheets("Input Values").Rows(LineNumber).RowHeight = 30
  'Hintergrundfarben
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 1), Worksheets("Input Values").Cells(LineNumber, 189)).Interior.Color = RGB(56, 112, 136)
  Worksheets("Input Values").Cells(LineNumber, 49).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 72).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 80).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 94).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 106).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 158).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 165).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 183).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 190).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  'Schrift
  Worksheets("Input Values").Rows(LineNumber).Font.Bold = True
  Worksheets("Input Values").Rows(LineNumber).Font.Size = 14
  Worksheets("Input Values").Rows(LineNumber).Font.ColorIndex = 2
  
End Sub

Public Sub IVFormatLineEntry(ByVal LineNumber As Integer)
  'Zeilenh|fffd|he
  Worksheets("Input Values").Rows(LineNumber).RowHeight = 20
  'Hintergrundfarben
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 1), Worksheets("Input Values").Cells(LineNumber, 189)).Interior.ColorIndex = 2
  
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 1), Worksheets("Input Values").Cells(LineNumber, 3)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 7), Worksheets("Input Values").Cells(LineNumber, 8)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Cells(LineNumber, 10).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 35), Worksheets("Input Values").Cells(LineNumber, 36)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 50), Worksheets("Input Values").Cells(LineNumber, 55)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 95), Worksheets("Input Values").Cells(LineNumber, 105)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 107), Worksheets("Input Values").Cells(LineNumber, 157)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 159), Worksheets("Input Values").Cells(LineNumber, 164)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 166), Worksheets("Input Values").Cells(LineNumber, 182)).Interior.Color = RGB(171, 158, 153) 'HellGrau
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 184), Worksheets("Input Values").Cells(LineNumber, 189)).Interior.Color = RGB(171, 158, 153) 'HellGrau
   
  Worksheets("Input Values").Cells(LineNumber, 49).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 72).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 80).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 94).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 106).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 158).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 165).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 183).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 190).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  'Schrift
  Worksheets("Input Values").Rows(LineNumber).Font.Bold = False
  Worksheets("Input Values").Rows(LineNumber).Font.Size = 10
  Worksheets("Input Values").Rows(LineNumber).Font.ColorIndex = 1
  
End Sub

Public Sub IVFormatLineSubEntry(ByVal LineNumber As Integer)
  'Zeilenh|fffd|he
  Worksheets("Input Values").Rows(LineNumber).RowHeight = 20
  'Hintergrundfarben
  Worksheets("Input Values").Range(Worksheets("Input Values").Cells(LineNumber, 1), Worksheets("Input Values").Cells(LineNumber, 189)).Interior.Color = RGB(228, 110, 23) 'Orange
  Worksheets("Input Values").Cells(LineNumber, 49).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 72).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 80).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 94).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 106).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 158).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 165).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 183).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  Worksheets("Input Values").Cells(LineNumber, 190).Interior.Color = RGB(45, 55, 80) 'GrauBlau
  'Schrift
  Worksheets("Input Values").Rows(LineNumber).Font.Bold = False
  Worksheets("Input Values").Rows(LineNumber).Font.Size = 10
  Worksheets("Input Values").Rows(LineNumber).Font.ColorIndex = 1

End Sub

Attribute VB_Name = "sKonverter"
Option Explicit

'Ausgangswert: FPMK
Function FPMK2FPMH(ByVal FPMK As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FPMK = 0 Then
    FPMK2FPMH = 0
  Else
    FPMK2FPMH = FPMK / (Hours * Laufleistung)
  End If
End Function

Function FPMK2MDBF(ByVal FPMK As Double) As Double
  If FPMK = 0 Then
    FPMK2MDBF = 0
  Else
    FPMK2MDBF = 1 / (FPMK * 1000000)
  End If
End Function

Function FPMK2MTBF(ByVal FPMK As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FPMK = 0 Then
    FPMK2MTBF = 0
  Else
    FPMK2MTBF = 1 / (FPMK * Hours / (Laufleistung * 1000000))
  End If
End Function

Function FPMK2FIT(ByVal FPMK As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FPMK = 0 Then
    FPMK2FIT = 0
  Else
    FPMK2FIT = (FPMK * 1000 * Laufleistung) / Hours
  End If
End Function


'Ausgangswert: FPMH
Function FPMH2FPMK(ByVal FPMH As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FPMH = 0 Then
    FPMH2FPMK = 0
  Else
    FPMH2FPMK = (FPMH * Hours) / Laufleistung
  End If
End Function

Function FPMH2MDBF(ByVal FPMH As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FPMH = 0 Then
    FPMH2MDBF = 0
  Else
    FPMH2MDBF = 1 / (FPMH / (Hours * Laufleistung))
  End If
End Function

Function FPMH2MTBF(ByVal FPMH As Double) As Double
  If FPMH = 0 Then
    FPMH2MTBF = 0
  Else
    FPMH2MTBF = 1 / (FPMH * 1000000)
  End If
End Function

Function FPMH2FIT(ByVal FPMH As Double) As Double
  If FPMH = 0 Then
    FPMH2FIT = 0
  Else
    FPMH2FIT = FPMH * 1000
  End If
End Function


'Ausgangswert: MDBF
Function MDBF2FPMK(ByVal MDBF As Double) As Double
  If MDBF = 0 Then
    MDBF2FPMK = 0
  Else
    MDBF2FPMK = 1 / (MDBF * 1000000)
  End If
End Function

Function MDBF2FPMH(ByVal MDBF As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or MDBF = 0 Then
    MDBF2FPMH = 0
  Else
    MDBF2FPMH = 1 / (MDBF / (Hours * Laufleistung * 1000000))
  End If
End Function

Function MDBF2MTBF(ByVal MDBF As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or MDBF = 0 Then
    MDBF2MTBF = 0
  Else
    MDBF2MTBF = (MDBF * Hours) / Laufleistung
  End If
End Function

Function MDBF2FIT(ByVal MDBF As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or MDBF = 0 Then
    MDBF2FIT = 0
  Else
    MDBF2FIT = 1 / ((MDBF * 1000000000 * Laufleistung) / Hours)
  End If
End Function


'Ausgangswert: MTBF
Function MTBF2FPMK(ByVal MTBF As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or MTBF = 0 Then
    MTBF2FPMK = 0
  Else
    MTBF2FPMK = 1 / ((MTBF * Hours) / (Laufleistung * 1000000))
  End If
End Function

Function MTBF2FPMH(ByVal MTBF As Double) As Double
  If MTBF = 0 Then
    MTBF2FPMH = 0
  Else
    MTBF2FPMH = 1 / (MTBF * 1000000)
  End If
End Function

Function MTBF2MDBF(ByVal MTBF As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or MTBF = 0 Then
    MTBF2MDBF = 0
  Else
    MTBF2MDBF = MTBF / (Hours * Laufleistung)
  End If
End Function

Function MTBF2FIT(ByVal MTBF As Double) As Double
  If MTBF = 0 Then
    MTBF2FIT = 0
  Else
    MTBF2FIT = 1 / (MTBF * 1000000000)
  End If
End Function


'Ausgangswert: FIT
Function FIT2FPMK(ByVal FIT As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FIT = 0 Then
    FIT2FPMK = 0
  Else
    FIT2FPMK = FIT / (Hours * Laufleistung)
  End If
End Function

Function FIT2FPMH(ByVal FIT As Double) As Double
  If FIT = 0 Then
    FIT2FPMH = 0
  Else
    FIT2FPMH = FIT / 1000
  End If
End Function

Function FIT2MDBF(ByVal FIT As Double, ByVal Hours As Double, ByVal Laufleistung As Double) As Double
  If Hours = 0 Or Laufleistung = 0 Or FIT = 0 Then
    FIT2MDBF = 0
  Else
    FIT2MDBF = 1 / ((FIT * 1000000000 * Laufleistung) / Hours)
  End If
End Function

Function FIT2MTBF(ByVal FIT As Double) As Double
  If FIT = 0 Then
    FIT2MTBF = 0
  Else
    FIT2MTBF = 1 / (FIT * 1000000000)
  End If
End Function
Attribute VB_Name = "sLogging"
'Funktionen f|fffd|r den Reiter "Import BLESS"
Option Explicit

Dim zeile As Integer

'Logging Eintragen Wert |fffd|nderung
'Mario Babel 18.01.2019
Private Sub InsertLoggingValueChanged(ByVal mySourceForm As String, ByVal mySourveItem As Variant, ByVal myOld As Variant, ByVal myNew As Variant)

  If zeile < 2 Then zeile = 2
  While Worksheets("LOG").Cells(zeile, 1).Value <> ""
    zeile = zeile + 1
  Wend

  Worksheets("LOG").Cells(zeile, 1).Value = mySourceForm
  Worksheets("LOG").Cells(zeile, 2).Value = mySourveItem
  Worksheets("LOG").Cells(zeile, 3).Value = "Value was changed from: '" & myOld & "' to: '" & myNew & "'"
  Worksheets("LOG").Cells(zeile, 4).Value = Now()
  Worksheets("LOG").Cells(zeile, 5).Value = "User"
   
On_Error:

End Sub

'Logging Eintragen Information
'Mario Babel 18.01.2019
Private Sub InsertLoggingInformation(ByVal mySourceForm As String, ByVal mySourveItem As Variant, ByVal myInformation As String)

  If zeile < 2 Then zeile = 2
  While Worksheets("LOG").Cells(zeile, 1).Value <> ""
    zeile = zeile + 1
  Wend

  Worksheets("LOG").Cells(zeile, 1).Value = mySourceForm
  Worksheets("LOG").Cells(zeile, 2).Value = mySourveItem
  Worksheets("LOG").Cells(zeile, 3).Value = myInformation
  Worksheets("LOG").Cells(zeile, 4).Value = Now()
  Worksheets("LOG").Cells(zeile, 5).Value = "User"
   
On_Error:

End Sub
Attribute VB_Name = "sMyRibbon"
Option Private Module
Public objRibbon As IRibbonUI

Public Sub onload(ribbon As IRibbonUI)
    Set objRibbon = ribbon
End Sub

'================== TEST Buttons ==================
Sub Button1_OnAction(control As IRibbonControl)
  If ThisWorkbook.Sheets("Import BLESS").Columns("A:A").EntireColumn.Hidden = False Then
     ThisWorkbook.Sheets("Import BLESS").Columns("A:A").EntireColumn.Hidden = True
     MsgBox "Spalte A wurde ausgeblendet", vbOKOnly + vbInformation, "Hinweis"
  Else
     ThisWorkbook.Sheets("Import BLESS").Columns("A:A").EntireColumn.Hidden = False
     MsgBox "Spalte A wurde eingeblendet", vbOKOnly + vbInformation, "Hinweis"
  End If
End Sub

Sub Button2_getLabel(control As IRibbonControl, ByRef label)
    If ThisWorkbook.Sheets("Import BLESS").Columns("B:B").EntireColumn.Hidden = False Then
       label = "Spalte B eingeblendet"
    Else
       label = "Spalte B ausgeblendet"
    End If
End Sub

Sub Button2_OnAction(control As IRibbonControl)
    If ThisWorkbook.Sheets("Import BLESS").Columns("B:B").EntireColumn.Hidden = False Then
       ThisWorkbook.Sheets("Import BLESS").Columns("B:B").EntireColumn.Hidden = True
       objRibbon.Invalidate
       MsgBox "Spalte B wurde ausgeblendet", vbOKOnly + vbInformation, "Hinweis"
    Else
       ThisWorkbook.Sheets("Import BLESS").Columns("B:B").EntireColumn.Hidden = False
       objRibbon.Invalidate
       MsgBox "Spalte B wurde eingeblendet", vbOKOnly + vbInformation, "Hinweis"
    End If
End Sub

'================== General ==================
Sub getLabel_Autofield(control As IRibbonControl, ByRef label)
    If Application.Calculation = xlManual = False Then
       label = "Switch Autofield (Off)"
    Else
       label = "Switch Autofield (On)"
    End If
End Sub

Sub Button20_onAction(control As IRibbonControl)
    'Switch Autofield
    If Application.Calculation = xlManual Then
       Application.Calculation = xlAutomatic
    Else
       Application.Calculation = xlManual
    End If
    objRibbon.Invalidate
End Sub

'================== Import BLESS ==================
Sub Button3_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Import BLESS" Then Sheets("Import BLESS").Activate
    'BLESS Zuf|fffd|gen
    Call CommandButton_AddBLESS
End Sub

Sub Button4_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Import BLESS" Then Sheets("Import BLESS").Activate
    'BLESS Ersetzen
    Call CommandButton_UpdateBLESS
End Sub

Sub Button5_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Import BLESS" Then Sheets("Import BLESS").Activate
    'BLESS l|fffd|schen
    Call CommandButton_RemoveBLESS
End Sub

Sub Button6_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Import BLESS" Then Sheets("Import BLESS").Activate
    'Berechnen Voransicht
    Call CommandButton_CalculateImportData
End Sub

Sub Button7_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Import BLESS" Then Sheets("Import BLESS").Activate
    'BLESS in Input Values importieren
    Call CommandButton_ImportData
End Sub

'================== Input Values ==================
Sub getLabel_SetVehicle(control As IRibbonControl, ByRef label)
    Dim VehicleID As Integer
    VehicleID = Worksheets("Project Data").Cells(3, 14).Value
    Select Case VehicleID
      Case 0
        Worksheets("Project Data").Cells(3, 14).Value = 1
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 8).Value & ")"
      Case 1
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 8).Value & ")"
      Case 2
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 9).Value & ")"
      Case 3
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 10).Value & ")"
      Case 4
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 11).Value & ")"
      Case 5
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 12).Value & ")"
      Case 6
        label = "Select Vehicle (" & Worksheets("Project Data").Cells(4, 13).Value & ")"
      End Select
End Sub

Sub Button8_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Calculate All
    Call Calculate_InputValues
End Sub

Sub Button15_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Insert Correction Line
End Sub

Sub Button16_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Add Correction Line
End Sub

Sub Button17_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Show Correction Line
  If ThisWorkbook.Sheets("Input Values").Columns("B:B").EntireColumn.Hidden = False Then
     ThisWorkbook.Sheets("Input Values").Columns("B:B").EntireColumn.Hidden = True
  Else
     ThisWorkbook.Sheets("Input Values").Columns("B:B").EntireColumn.Hidden = False
  End If
End Sub

Sub Button18_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Calculate Spares
End Sub

Sub Button19_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Input Values" Then Sheets("Input Values").Activate
    'Get Vehicle for Calculate
    Dim VehicleID As Integer
    VehicleID = Worksheets("Project Data").Cells(3, 14).Value
    Select Case VehicleID
      Case 0
        Worksheets("Project Data").Cells(3, 14).Value = 2
      Case 1
        Worksheets("Project Data").Cells(3, 14).Value = 2
      Case 2
        Worksheets("Project Data").Cells(3, 14).Value = 3
      Case 3
        Worksheets("Project Data").Cells(3, 14).Value = 4
      Case 4
        Worksheets("Project Data").Cells(3, 14).Value = 5
      Case 5
        Worksheets("Project Data").Cells(3, 14).Value = 6
      Case 6
        Worksheets("Project Data").Cells(3, 14).Value = 1
      End Select
      objRibbon.Invalidate
End Sub
'================== Project Data ==================
Sub Button9_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'CalculateCostsYear
End Sub

Sub Button10_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'CalculateLaborYear
End Sub

Sub Button11_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'MaterialPlanung
End Sub

Sub Button12_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'OpenCBOMMenu
End Sub

Sub Button13_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'Administrator
End Sub

Sub Button14_OnAction(control As IRibbonControl)
    If ActiveSheet.Name <> "Project Data" Then Sheets("Project Data").Activate
    'ExportToBidMCM
End Sub
Attribute VB_Name = "sWBSecurity"
Option Explicit

Sub CheckUser()
Dim varMatch As Variant
Dim lngSheetCol As Long
Dim strSheetName As String
Dim bolIsAdmin As Boolean
Dim bolFirstUser As Boolean
On Error Resume Next

bolIsAdmin = False
varMatch = "NF"

'erst einmal alles abriegeln
Sheets("UserManagement").Unprotect "HalloWelt01!"
Sheets("UserManagement").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
For lngSheetCol = 6 To 21
    strSheetName = Worksheets("UserManagement").Cells(5, lngSheetCol).Value
    Sheets(strSheetName).Protect "HalloWelt01!"
    Sheets(strSheetName).Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Next
Sheets("RegistrierungAbwarten").Protect "HalloWelt01!"
Sheets("RegistrierungAbwarten").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Sheets("UserUnknown").Protect "HalloWelt01!"
Sheets("UserUnknown").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Sheets("MakroStop").Protect "HalloWelt01!"
Sheets("MakroStop").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible

   'getUser
   varMatch = Application.WorksheetFunction.Match(currentUserEmailAddress(), Worksheets("UserManagement").Range("D6:D35"), 0)
   If varMatch = "NF" Then
      'not registered --> show register sheet
      Sheets("UserUnknown").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
      Sheets("MakroStop").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
      Sheets("UserUnknown").Activate
      Else
      If Worksheets("UserManagement").Cells(varMatch + 5, 6).Value = "" Then
         'registered but blank --> show please come in later
         Sheets("RegistrierungAbwarten").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         Sheets("MakroStop").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         Sheets("RegistrierungAbwarten").Activate
         Sheets("UserUnknown").Protect "HalloWelt01!"
         Sheets("UserUnknown").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         Else
         'lock/unlock content
         If Worksheets("UserManagement").Cells(varMatch + 5, 22).Value = "|fffd|" Then bolIsAdmin = True
         Sheets("MakroStop").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         For lngSheetCol = 6 To 21
             strSheetName = Worksheets("UserManagement").Cells(5, lngSheetCol).Value
             Select Case Worksheets("UserManagement").Cells(varMatch + 5, lngSheetCol).Value
                    Case "|fffd|"
                         Sheets(strSheetName).Unprotect "HalloWelt01!"
                         Sheets(strSheetName).Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
                    Case "|fffd|"
                         Sheets(strSheetName).Protect "HalloWelt01!"
                         Sheets(strSheetName).Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
                    Case "x"
                         Sheets(strSheetName).Protect "HalloWelt01!"
                         Sheets(strSheetName).Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
                    Case Empty
                         Sheets(strSheetName).Protect "HalloWelt01!"
                         Sheets(strSheetName).Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
             End Select
         Next
         If bolIsAdmin Then Sheets("UserManagement").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         Sheets("MakroStop").Protect "HalloWelt01!"
         Sheets("MakroStop").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
         Sheets(Worksheets("UserManagement").Cells(5, 6).Value).Activate
      End If
   End If
Calculate
End Sub

Sub lockWB()
Dim lngSheetCol As Long
Dim strSheetName As String
On Error Resume Next
Calculate
If MsgBox("Soll dieses Projektarbeitsmappe wirklich gesperrt werden?", vbQuestion + vbYesNo, "Projektarbeitsmappe sperren?") = vbYes Then
   Sheets("UserManagement").Unprotect "HalloWelt01!"
   Sheets("UserManagement").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
   Sheets("RegistrierungAbwarten").Protect "HalloWelt01!"
   Sheets("RegistrierungAbwarten").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
   Sheets("UserUnknown").Protect "HalloWelt01!"
   Sheets("UserUnknown").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
   For lngSheetCol = 6 To 21
       strSheetName = Worksheets("UserManagement").Cells(5, lngSheetCol).Value
       Sheets(strSheetName).Protect "HalloWelt01!"
       Sheets(strSheetName).Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
   Next
   Sheets("MakroStop").Protect "HalloWelt01!"
   Sheets("MakroStop").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible

   ActiveWorkbook.Save
   ActiveWorkbook.Close
   Application.Quit
End If

End Sub

Sub UnlockWB()
Dim lngSheetCol As Long
Dim strSheetName As String
On Error Resume Next

Sheets("UserManagement").Unprotect "HalloWelt01!"
Sheets("UserManagement").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Sheets("RegistrierungAbwarten").Unprotect "HalloWelt01!"
Sheets("RegistrierungAbwarten").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Sheets("UserUnknown").Unprotect "HalloWelt01!"
Sheets("UserUnknown").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
For lngSheetCol = 6 To 21
    strSheetName = Worksheets("UserManagement").Cells(5, lngSheetCol).Value
    Sheets(strSheetName).Unprotect "HalloWelt01!"
    Sheets(strSheetName).Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Next
Sheets("MakroStop").Unprotect "HalloWelt01!"
Sheets("MakroStop").Visible = xlSheetVisible     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
Sheets("UserManagement").Activate
End Sub

' ----------------------------------------------------------------
' Purpose: Get current user email address
' ----------------------------------------------------------------
Function currentUserEmailAddress() As String

    Dim outApp As Object, outSession As Object

    'Create an Outlook session
    Set outApp = CreateObject("Outlook.Application")

    'Check if session is created
    If outApp Is Nothing Then
        currentUserEmailAddress = "Cannot create Microsoft Outlook session."
        currentUserEmailAddress = "Not found"
        Exit Function
    End If

    'Set a NameSpace object variable with .Session property (same as .GetNamespace("MAPI"), to access existing Outlook items, and get
    'current user name
    Set outSession = outApp.Session.CurrentUser

    'Get current user email address
    currentUserEmailAddress = outSession.AddressEntry.GetExchangeUser().PrimarySmtpAddress

    Set outApp = Nothing
End Function

Sub Schaltfl|fffd|che1_Klicken()
Dim rngStep As Range
Dim objOutlook As Object
Dim objMail As Object

Application.ScreenUpdating = False

If Worksheets("UserManagement").Range("D6").Value = "" Then
   'Projektarbeitsmappe ist leer (noch kein User angelegt) --> Aktueller User wird als Admin eingetragen
   Call UnlockWB
   Worksheets("UserManagement").Range("D6").Value = currentUserEmailAddress()
   Worksheets("UserManagement").Range("E6:V6").Value = "|fffd|"
   Sheets("UserManagement").Activate
Else

'E-Mail des aktuellen users in Liste einf|fffd|gen
For Each rngStep In Worksheets("UserManagement").Range("D6:D35")
    If rngStep.Value = "" Then
       rngStep.Value = currentUserEmailAddress()
       If Worksheets("UserUnknown").Range("L11").Value <> "" Then
          If Worksheets("UserUnknown").Range("L11").Value = Worksheets("UserManagement").Range("Z7").Value Then
             'RW
             Worksheets("UserManagement").Range("E" & rngStep.Row & ":U" & rngStep.Row).Value = "|fffd|"
             ElseIf Worksheets("UserUnknown").Range("L11").Value = Worksheets("UserManagement").Range("Z8").Value Then
             'RO
             Worksheets("UserManagement").Range("E" & rngStep.Row & ":U" & rngStep.Row).Value = "|fffd|"
          End If
          Worksheets("UserManagement").Range("V" & rngStep.Row).Value = "x"
       End If
       Exit For
    End If
Next

If Worksheets("UserUnknown").Range("L11").Value <> "" Then
   'E-Mail mit bitte um Zugriff versenden
   Set objOutlook = CreateObject("Outlook.Application")
   Set objMail = objOutlook.CreateItem(0)
   With objMail
        .To = Worksheets("UserManagement").Range("D6").Value
        .Subject = "Zugriff per Selbstregistrierung auf Projektarbeitsblatt " & ActiveWorkbook.Name
        .Body = "Hallo. ich habe mir Zugriff durch Selbstregistrierung auf das Projektarbeitsblatt " & ActiveWorkbook.Name & " verschafft."
        .Send        'Erstellt die Email und |fffd|ffnet diese. Der Versand erfolgt anschlie|fffd|end manuell vom User!
   End With
   'Arbeitsblatt schlie|fffd|en
   Worksheets("UserUnknown").Range("L11").Value = ""
   Calculate
   ActiveWorkbook.Save
   Call CheckUser
   Sheets("UserUnknown").Protect "HalloWelt01!"
   Sheets("UserUnknown").Visible = xlSheetVeryHidden     'xlSheetVeryHidden; xlSheetHidden; xlSheetVisible
   Else
   'E-Mail mit bitte um Zugriff versenden
   Set objOutlook = CreateObject("Outlook.Application")
   Set objMail = objOutlook.CreateItem(0)
   With objMail
        .To = Worksheets("UserManagement").Range("D6").Value
        .Subject = "Erbitte Zugriff auf das Projektarbeitsblatt " & ActiveWorkbook.Name
        .Body = "Hallo. Hiermit bitte ich um Zugriff auf das Projektarbeitsblatt " & ActiveWorkbook.Name
        .Display        'Erstellt die Email und |fffd|ffnet diese. Der Versand erfolgt anschlie|fffd|end manuell vom User!
   End With
   'Arbeitsblatt schlie|fffd|en
   Calculate
   ActiveWorkbook.Save
   ActiveWorkbook.Close
   Application.Quit
End If

End If
Application.ScreenUpdating = True
End Sub

Sub Schaltfl|fffd|che2_Klicken()
Application.DisplayAlerts = False
ActiveWorkbook.Close
Application.Quit
End Sub

' InQuest injected base64 decoded content
' R'rR'1
' 'z{l
' +Lj)
' }:-jP
' /j)Zn)b
' }:-jP
' y+hrK
' +hrD
' +z(^
' K+-z`
' u'!y
' u'!y
' u'!y
' s'%z
' bzWVj
' !"zn
' jZ)z
' ljw^

INQUEST-PP=macro
