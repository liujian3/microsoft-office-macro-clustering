Attribute VB_Name = "CResizer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const MFrameResizer = "FrameResizeGrab"
Private Const MResizer = "ResizeGrab"
Private WithEvents m_objResizer As MSForms.Frame
Attribute m_objResizer.VB_VarHelpID = -1
Private m_sngLeftResizePos As Single
Private m_sngTopResizePos As Single
Private m_blnResizing As Single
Private WithEvents m_frmParent As MSForms.UserForm
Attribute m_frmParent.VB_VarHelpID = -1
Private m_objParent As Object

Private Sub Class_Terminate()
    m_objParent.Controls.Remove MResizer
End Sub


Private Sub m_frmParent_Layout()
    If Not m_blnResizing Then
        With m_objResizer
            .Top = m_objParent.InsideHeight - .Height
            .Left = m_objParent.InsideWidth - .Width
            AdjustForm
        End With
    End If
End Sub


Private Sub m_objResizer_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then
        m_sngLeftResizePos = X
        m_sngTopResizePos = Y
        m_blnResizing = True
        AdjustForm
    End If
End Sub

Private Sub m_objResizer_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then
        With m_objResizer
            .Move .Left + X - m_sngLeftResizePos, .Top + Y - m_sngTopResizePos
            m_objParent.Width = m_objParent.Width + X - m_sngLeftResizePos
            m_objParent.Height = m_objParent.Height + Y - m_sngTopResizePos
            .Left = m_objParent.InsideWidth - .Width
            .Top = m_objParent.InsideHeight - .Height
            AdjustForm
        End With
    End If
End Sub

Private Sub m_objResizer_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Button = 1 Then
        m_blnResizing = False
        AdjustForm
    End If
End Sub

Public Function Add(Parent As Object) As MSForms.Frame
'
' add resizing control to bottom righthand corner of userform
'
    Dim labTemp As MSForms.Label
    
    Set m_frmParent = Parent
    Set m_objParent = Parent
    
    Set m_objResizer = m_objParent.Controls.Add("Forms.Frame.1", MFrameResizer, True)
    Set labTemp = m_objResizer.Add("Forms.label.1", MResizer, True)
    With labTemp
        With .Font
            .Name = "Marlett"
            .Charset = 2
            .Size = 14
            .Bold = True
        End With
        .BackStyle = fmBackStyleTransparent
        .AutoSize = True
        .BorderStyle = fmBorderStyleNone
        .Caption = "o"
        .MousePointer = fmMousePointerSizeNWSE
        .ForeColor = RGB(100, 100, 100)
        .ZOrder
        .Top = 1
        .Left = 1
        .Enabled = False
    End With
    
    With m_objResizer
        .MousePointer = fmMousePointerSizeNWSE
        .BorderStyle = fmBorderStyleNone
        .SpecialEffect = fmSpecialEffectFlat
        .ZOrder
        .Caption = ""
        .Width = labTemp.Width + 1
        .Height = labTemp.Height + 1
        .Top = m_objParent.InsideHeight - .Height
        .Left = m_objParent.InsideWidth - .Width
    End With
End Function


Attribute VB_Name = "Module1"
Public StringPosition As Double
Public Const SPChar As String = "`"

Public Sub ResourcesZip()
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    Dim FilePath As String
    Dim FolderPath As String
    Dim wsh As Object
    Set wsh = VBA.CreateObject("WScript.Shell")
    Dim waitOnReturn As Boolean: waitOnReturn = True
    Dim windowStyle As Integer: windowStyle = 1
    Dim errorCode As Long
    Dim Padding As Byte
    Dim Entry As String
    Dim Note As String
    Dim Towns(16) As String
    Dim stream As Object

    Towns(0) = "Bervenia"
    Towns(1) = "Dorter"
    Towns(2) = "Gariland"
    Towns(3) = "Goland"
    Towns(4) = "Goug"
    Towns(5) = "Igros"
    Towns(6) = "Lesalia"
    Towns(7) = "Limberry"
    Towns(8) = "Lionel"
    Towns(9) = "None"
    Towns(10) = "Riovanes"
    Towns(11) = "Warjilis"
    Towns(12) = "Yardrow"
    Towns(13) = "Zaland"
    Towns(14) = "Zarghidas"
    Towns(15) = "Zeltennia"
    
    WinRAR = ReadReg("HKEY_LOCAL_MACHINE\SOFTWARE\Classes\WinRAR\shell\open\command\", "")
    If WinRAR = "" Then
        MsgBox "WinRAR doesn't seem to be installed. Please install WinRAR then try again.", vbOKOnly, "Unable to compile resources"
        Exit Sub
    End If
    FilePath = ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Resources FilePath", ActiveWorkbook.Path)
    FileNameFromPath = Right(FilePath, Len(FilePath) - InStrRev(FilePath, "\"))
    FolderFromPath = Left(FilePath, InStrRev(FilePath, "\"))
    ChDir FolderFromPath
    FilePath = Application.GetSaveAsFilename(FileFilter:="Resource Files (*.zip), *.zip, Any File (*.*), *.*", Title:="Choose a Filename")
    If FilePath = "False" Then
        Exit Sub
    End If
    Call WriteReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Resources FilePath", FilePath)
    FolderPath = Environ("Temp") & "\Resources\"
    If Dir(FilePath) = "" Then
        params = "m -afzip -df -r -ep1 "
    Else
        params = "u -r -df -ep1 "
    End If
    WinRAR = Replace(WinRAR, Chr(34) & "%1" & Chr(34), params & Chr(34) & FilePath & Chr(34) & " " & Chr(34) & FolderPath & Chr(34))
    Debug.Print "shell: " & WinRAR
    
    CurrentEditMode = Sheets("Resources.zip").Cells(1, 4)
    For i = 2 To 38
        CurrentFileMode = Sheets("Resources.zip").Cells(i, 4)
        If CurrentFileMode = 0 Or CurrentFileMode = CurrentEditMode Then
            xmlPath = Sheets("Resources.zip").Cells(i, 5)
            If Len(xmlPath) > 1 Then
                xmlPath = FolderPath & xmlPath
                a = Len(FolderPath)
                Do While True
                    pos = InStr(a, xmlPath, "\")
                    If pos > 0 Then
                        TempFolder = Left(xmlPath, pos)
                        If Len(Dir(TempFolder, vbDirectory)) = 0 Then
                            MkDir TempFolder
                        End If
                        a = pos + 1
                    Else
                        Exit Do
                    End If
                Loop
    
                Padding = 0
                Set stream = CreateObject("ADODB.Stream")
                stream.Type = 2 'Specify stream type - we want To save text/string data.
                stream.Charset = "utf-8" 'Specify charset For the source text data.
                stream.Open 'Open the stream And write binary data To the object
                stream.WriteText "<?xml version=""1.0"" encoding=""utf-8"" ?>" & vbCrLf
                GlobalSection = Sheets("Resources.zip").Cells(i, 6)
                If Len(GlobalSection) Then
                    stream.WriteText "<" & GlobalSection & ">" & vbCrLf
                    Padding = 1
                End If
                For v = 0 To 2
                    Section = Sheets("Resources.zip").Cells(i, 7 + 4 * v)
                    If Len(Section) Then
                        stream.WriteText PadMe("<" & Section & ">", Padding) & vbCrLf
                        Note = Sheets("Resources.zip").Cells(i, 8 + 4 * v)
                        If Len(Note) Then stream.WriteText PadMe(Note, Padding + 1) & vbCrLf
                        CurrentCol = Sheets("Resources.zip").Cells(i, 9 + 4 * v)
                        MaxLine = 16
                        For c = 1039 To 16 Step -1
                            If Len(Sheets("FFTText").Cells(c, CurrentCol)) Then
                                MaxLine = c
                                Exit For
                            End If
                        Next c
                        BaseEntry = Sheets("Resources.zip").Cells(i, 10 + 4 * v)
                        For c = 16 To MaxLine
                            Entry = BaseEntry
                            Entry = Replace(Entry, ChrW(167), ReplaceFromTo(Sheets("FFTText").Cells(c, CurrentCol), 5), 1, 1)
                            Entry = Replace(Entry, ChrW(260), Hex(c - 16), 1, 1)
                            Entry = Replace(Entry, ChrW(292), Right("00" & Hex(c - 16), 2), 1, 1)
                            Entry = Replace(Entry, ChrW(294), Right("000" & Hex(c - 16), 3), 1, 1)
                            Entry = Replace(Entry, ChrW(393), CStr(c - 16), 1, 1)
                            If c - 16 < 16 Then Entry = Replace(Entry, ChrW(181), Towns(c - 16), 1, 1)
                            stream.WriteText PadMe(Entry, Padding + 1) & vbCrLf
                        Next c
                        stream.WriteText PadMe("</" & Section & ">", Padding) & vbCrLf
                    Else
                        Exit For
                    End If
                Next v
                If Len(GlobalSection) Then
                    stream.WriteText "</" & GlobalSection & ">" & vbCrLf
                End If
                stream.SaveToFile xmlPath, 2 'Save binary data To disk
                stream.Close
            End If
        End If
    Next i
    Set stream = CreateObject("ADODB.Stream")
    stream.Type = 2 'Specify stream type - we want To save text/string data.
    stream.Charset = "utf-8" 'Specify charset For the source text data.
    stream.Open 'Open the stream And write binary data To the object
    stream.WriteText = "    Copyright 2007, Joe Davidson <joedavidson@gmail.com>" & vbCrLf & vbCrLf & "    The files in this archive are part of FFTPatcher." & vbCrLf & vbCrLf & "    FFTPatcher is free software: you can redistribute it and/or modify" & vbCrLf & "    it under the terms of the GNU General Public License as published by" & vbCrLf & "    the Free Software Foundation, either version 3 of the License, or" & vbCrLf & "    (at your option) any later version." & vbCrLf & vbCrLf & "    FFTPatcher is distributed in the hope that it will be useful," & vbCrLf & "    but WITHOUT ANY WARRANTY; without even the implied warranty of" & vbCrLf & "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" & vbCrLf & "    GNU General Public License for more details." & vbCrLf & vbCrLf & "    You should have received a copy of the GNU General Public License" & vbCrLf & "    along with FFTPatcher.  If not, see <http://www.gnu.org/licenses/>."
    stream.SaveToFile FolderPath & "GNU.txt", 2 'Save binary data To disk
    stream.Close
    
    'errorCode = wsh.Run(WinRAR, windowStyle, waitOnReturn)
    Shell WinRAR, vbNormalFocus
End Sub

Public Sub ExportFFTText()
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    Dim ffttexthandle As Byte
    Dim ffttextpath As String
    Dim Entry As String
    Dim c, R, SectionLength As Integer
    Dim Closed As Boolean
    Dim FilePath As String
    Set objStream = CreateObject("ADODB.Stream")
    
    objStream.Charset = "utf-8"
    objStream.Open
    FilePath = ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Tactext FilePath", ActiveWorkbook.Path)
    FileNameFromPath = Right(FilePath, Len(FilePath) - InStrRev(FilePath, "\"))
    FolderFromPath = Left(FilePath, InStrRev(FilePath, "\"))
    ChDir FolderFromPath
    FilePath = Application.GetSaveAsFilename(FileFilter:="FFTactext Files (*.ffttext), *.ffttext, Any File (*.*), *.*", Title:="Choose a Filename")
    If FilePath = "False" Then
        Exit Sub
    End If
    Call WriteReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Tactext FilePath", FilePath)

    Dim fsT As Object
    Set fsT = CreateObject("ADODB.Stream")
    fsT.Type = 2 'Specify stream type - we want To save text/string data.
    fsT.Charset = "utf-8" 'Specify charset For the source text data.
    fsT.Open 'Open the stream And write binary data To the object
    ffttextpath = FilePath
    MaxRows = Sheet4.UsedRange.Rows.Count
    MaxCols = Sheet4.UsedRange.Columns.Count
    fsT.WriteText "<?xml version=""1.0"" encoding=""utf-8""?>" & Chr(10)
    fsT.WriteText "<FFTText context=""US_PSX"">" & Chr(10)
    LastFile = 0
    Section = 1
    For d = 1 To 360
        c = Sheet3.Cells(d, 2)
        If c Then
            If c = 85 Then
                c = 85
            End If
            If Not IsError(Sheet4.Cells(6, c)) Then
                If Sheet3.Cells(d, 10) <> LastFile Then
                    LastFile = Sheet3.Cells(d, 10)
                    fsT.WriteText Chr(9) & "<File>" & Chr(10)
                    fsT.WriteText Chr(9) & Chr(9) & "<!--DisplayName: " & Sheet4.Cells(7, c) & "-->" & Chr(10)
                    fsT.WriteText Chr(9) & Chr(9) & Sheet4.Cells(6, c) & Chr(10)
                    fsT.WriteText Chr(9) & Chr(9) & "<Sections>" & Chr(10)
                    Section = 1
                    SectionEnd = False
                End If
                fsT.WriteText Chr(9) & Chr(9) & Chr(9) & "<Section>" & Chr(10)
                fsT.WriteText Chr(9) & Chr(9) & Chr(9) & Chr(9) & "<!--" & Section & ": " & Sheet4.Cells(8, c) & "-->" & Chr(10)
                SectionLength = 0
                For R = 16 To MaxRows
                    Entry = Sheet4.Cells(MaxRows - R + 16, c)
                    If Len(Entry) Then
                        SectionLength = MaxRows - R + 1
                        Exit For
                    End If
                Next R
                Closed = True
                MinSectionLength = Sheet4.Cells(2, c)
                SectionPosition = 1
                LineBreak = Sheet9.Range("A21")
                For R = 0 To SectionLength - 1
                
                    If R = 245 Then
                        test = 0
                    End If
                    
                    Entry = ReplaceFromTo(Sheet4.Cells(R + 16, c), 4)
                    If LineBreak Then
                        Entry = Replace(Entry, "{Newline}", "{Newline}" & vbCrLf)
                    End If
                    
                    If LCase(Right(Entry, 7)) = "{close}" Then
                        EntryEndTag = ""
                        SetClose = False
                    Else
                        EntryEndTag = "</Entry>" & Chr(10)
                        SetClose = True
                    End If
                    
                    If Closed Then
                        If Len(Entry) Then
                            Entry = Chr(9) & Chr(9) & Chr(9) & Chr(9) & "<Entry>" & Entry & EntryEndTag
                        Else
                            Entry = Chr(9) & Chr(9) & Chr(9) & Chr(9) & "<Entry />" & Chr(10)
                        End If
                    Else
                        If Len(Entry) Then
                            Entry = Entry & EntryEndTag
                        Else
                            Entry = "</Entry>" & Chr(10)
                        End If
                    End If
                    
                    If SetClose = True Then
                        SectionPosition = SectionPosition + 1
                    End If
                    
                    Closed = SetClose
                    fsT.WriteText Entry
                Next R
                If Not Closed Then
                    fsT.WriteText "</Entry>" & Chr(10)
                    SectionPosition = SectionPosition + 1
                    Closed = True
                End If
                For p = SectionPosition To MinSectionLength
                    fsT.WriteText Chr(9) & Chr(9) & Chr(9) & Chr(9) & "<Entry />" & Chr(10)
                Next p
                fsT.WriteText Chr(9) & Chr(9) & Chr(9) & "</Section>" & Chr(10)
                If Sheet3.Cells(d + 1, 10) <> LastFile Then
                    fsT.WriteText Chr(9) & Chr(9) & "</Sections>" & Chr(10)
                    fsT.WriteText Chr(9) & "</File>" & Chr(10)
                    SectionEnd = True
                End If
            End If
            Section = Section + 1
        End If
    Next d
    If SectionEnd = False Then
        fsT.WriteText Chr(9) & Chr(9) & "</Sections>" & Chr(10)
        fsT.WriteText Chr(9) & "</File>" & Chr(10)
    End If
    fsT.WriteText "</FFTText>"
    fsT.SaveToFile ffttextpath, 2 'Save binary data To disk
End Sub

Public Sub ImportFFTText()
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    VBATime
    Dim ReturnRange As Variant
    Dim objStream, strData
    Dim Position As Double
    Dim NextTag As String
    Dim FullText, FileText As String
    Dim FFTTextPosition, FilePosition, SectionPosition As Double
    Dim FilePath As String
    Dim SectionPriorities(15) As Integer
    Dim ReplaceCharsRange As String
    ReturnRange = Selection.Address(ReferenceStyle:=xlA1, _
                           RowAbsolute:=False, ColumnAbsolute:=False)
    For i = 0 To 14
        SectionPriorities(i) = 0
    Next i
    Set objStream = CreateObject("ADODB.Stream")
    
    objStream.Charset = "utf-8"
    objStream.Open
    FilePath = ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Tactext FilePath", ActiveWorkbook.Path)
    FileNameFromPath = Right(FilePath, Len(FilePath) - InStrRev(FilePath, "\"))
    FolderFromPath = Left(FilePath, InStrRev(FilePath, "\"))
    ChDir FolderFromPath
    FilePath = Application.GetOpenFilename(FileFilter:="FFTactext Files (*.ffttext), *.ffttext, Any File (*.*), *.*", Title:="Select a FFTactext file", MultiSelect:=False)
    If FilePath = "False" Then
        Exit Sub
    End If
    Call WriteReg("HKEY_CURRENT_USER\Software\FFHacktics\Last Tactext FilePath", FilePath)
    objStream.LoadFromFile (FilePath)
    FullText = objStream.ReadText()
    objStream.Close
    
    FullText = ReplaceFromTo(FullText & "", 3)
    
    FFTTextPosition = 1
    Do While True
        FileText = GetTagContents(FullText, FFTTextPosition, "File")
        FilePosition = 1
        If FileText <> "<" Then
            FFTTextPosition = StringPosition
            GuidText = GetTagContents(FileText, FilePosition, "Guid")
            If GuidText = "<" Then
                Exit Do
            End If
            FilePosition = StringPosition
            FileRow = Application.WorksheetFunction.VLookup(GuidText, Sheet3.Range("E1:F33"), 2, False)
            SectionPosition = 1
            SectionID = 0
            Do While True
                SectionText = GetTagContents(FileText, FilePosition, "Section")
                FilePosition = StringPosition
                SectionPosition = 1
                If SectionText <> "<" Then
                    SectionID = SectionID + 1
                    SectionColumn = Sheet3.Cells(FileRow + SectionID - 1, 1)
                    If SectionColumn Then
                        ImportSection = True
                        QuickEditID = Sheet5.Cells(FileRow + SectionID - 1, 1)
                        If QuickEditID > 0 Then
                            SectionPriority = Sheet5.Cells(FileRow + SectionID - 1, 2)
                            If SectionPriority > SectionPriorities(QuickEditID - 1) Then
                                SectionPriorities(QuickEditID - 1) = SectionPriority
                            Else
                                ImportSection = False
                            End If
                        End If
                        If ImportSection Then
                            Sheet7.Cells(1, SectionColumn) = 1
                            With Sheet7.Range(Cells(16, SectionColumn).Address, Cells(1039, SectionColumn).Address).Cells
                                .Value = "'"
                            End With
                            SectionText = Replace(SectionText, "<Entry />", "<Entry></Entry>")
                            CurrentRow = 16
                            Do While True
                                EntryText = Replace(Replace(GetTagContents(SectionText, SectionPosition, "Entry"), Chr(10), ""), Chr(13), "")
                                SectionPosition = StringPosition
                                Do While True
                                    ClosePos = InStr(1, EntryText, "{Close}")
                                    If ClosePos Then
                                        CloseText = Mid(EntryText, 1, ClosePos + 6)
                                        EntryText = Mid(EntryText, ClosePos + 7, Len(EntryText) - ClosePos - 6)
                                        If Len(CloseText) = 0 Then
                                            CloseText = ""
                                        End If
                                        Sheet7.Cells(CurrentRow, SectionColumn) = "'" & CloseText
                                        CurrentRow = CurrentRow + 1
                                    Else
                                        Exit Do
                                    End If
                                Loop
                                If EntryText <> "<" Then
                                    If Len(EntryText) = 0 Then
                                        EntryText = ""
                                    End If
                                    Sheet7.Cells(CurrentRow, SectionColumn) = "'" & EntryText
                                    CurrentRow = CurrentRow + 1
                                Else
                                    Exit Do
                                End If
                            Loop
                        End If
                    End If
                Else
                    Exit Do
                End If
            Loop
        Else
            Exit Do
        End If
    Loop
    StartRange = 0
    For i = 1 To 1024
        Activated = Sheet7.Cells(1, i)
        If StartRange = 0 And Activated = 1 Then
            StartRange = i
        ElseIf StartRange > 0 And Activated = 0 Then
            Sheet7.Range(Cells(16, StartRange).Address, Cells(1039, i - 1).Address).Copy
            Sheet4.Range(Cells(16, StartRange).Address, Cells(1039, i - 1).Address).PasteSpecial xlPasteValues
            StartRange = 0
        End If
    Next i
    Sheet7.Range("1:1048576").Clear
    Calculate
    Sheet4.Range(ReturnRange).Select
    VBATime False
End Sub


Public Function GetTagContents(ByVal TextStr As String, ByVal Position As Double, ByVal TagName As String) As String
    TempStr = Right(TextStr, Len(TextStr) - Position - 1)
    TagStart = InStr(1, TempStr, "<" & TagName & ">", 1) + Len(TagName) + 2
    If TagStart Then
        TagEnd = InStr(TagStart, TempStr, "</" & TagName & ">", 1)
    End If
    If TagEnd Then
        GetTagContents = Mid(TempStr, TagStart, TagEnd - TagStart)
    Else
        GetTagContents = "<"
    End If
    StringPosition = TagEnd + Len(TagName) + 3 + Position
End Function

Function FFTTextLen(SourceText As String, Optional ForceError As Boolean)
    FFTTextLen = 0
    SourceLen = Len(SourceText)
    i = 1
    Do While i <= SourceLen
        Character = Mid(SourceText, i, 1)
        CharLen = 0
        If Character = "{" Then
            EndBracket = InStr(i + 1, SourceText, "}")
            If EndBracket Then
                Character = Mid(SourceText, i, EndBracket - i + 1)
            End If
            If Mid(Character, 2, 1) = "x" Then
                Row = "&H" & Mid(Character, 3, Len(Character) - 3)
                CharLen = Sheet2.Cells(Row + 1, 2)
            Else
                Set oRng = Range("Characters!C1:C16")
                Row = 0
                On Error Resume Next
                Row = Application.WorksheetFunction.Match(Character, oRng, 0)
                If Row Then
                    CharLen = Sheet2.Cells(Row, 4)
                End If
            End If
        Else
            Row = AscW(Character)
            If Row < 0 Then
                Row = 65536 + Row
            End If
            CharLen = Sheet2.Cells(Row + 1, 1).Value
            If CharLen = 0 And ForceError Then
                FFTTextLen = -1
                Exit Function
            End If
        End If
        i = i + Len(Character)
        FFTTextLen = FFTTextLen + CharLen
    Loop
    MinLen = FFTTextLen
    MaxLen = FFTTextLen
    MinLen = MinLen + StringCount("{0xE1}", SourceText) * 4 'Unit Name
    MinLen = MinLen + StringCount("{Ramza}", SourceText) * 4 'Ramza's Name
    MaxLen = MaxLen + StringCount("{0xE1}", SourceText) * 84 'Unit Name
    MaxLen = MaxLen + StringCount("{Ramza}", SourceText) * 84 'Ramza's Name
    If MinLen = MaxLen Then
        FFTTextLen = MinLen
    Else
        FFTTextLen = MinLen & "/" & MaxLen
    End If

End Function


Function UCode(CharCode As Variant) As String
    UCode = AscW(CharCode)
    If UCode < 0 Then
        UCode = 65536 + UCode
    End If
End Function

Function FFTTextTrim(FFTString As String)
    FFTString = Replace(FFTString, "{Newline}", "")
    FFTString = Replace(FFTString, "{r }", "*")
    FFTString = Replace(FFTString, "{Unknown}", ChrW(9633))
    FFTString = Replace(FFTString, "{SP}", ChrW(170)) 'ChrW(8199)
    FFTString = Replace(FFTString, SPChar, ChrW(170)) 'ChrW(8199)
    FFTString = Replace(FFTString, "{Serpentarius}", ChrW(9798))
    FFTString = Replace(FFTString, ChrW(65281), "!")
    FFTTextTrim = ""
    SourceLen = Len(FFTString)
    i = 1
    Do While i <= SourceLen
        Character = Mid(FFTString, i, 1)
        If Character = "{" Then
            EndBracket = InStr(i + 1, FFTString, "}")
            If EndBracket Then
                Character = Mid(FFTString, i, EndBracket - i + 1)
            End If
            If Mid(Character, 2, 1) = "x" Then
                Row = "&H" & Mid(Character, 3, Len(Character) - 3)
                Set oRng = Range("Characters!G1:G2200")
                Row = 0
                On Error Resume Next
                Row = Application.WorksheetFunction.Match(Character, oRng, 0)
                If Row Then
                    NewCharacter = Sheet2.Cells(Row + 1, 6).Text
                Else
                    NewCharacter = ""
                End If
            Else
                Set oRng = Range("Characters!C1:C16")
                Row = 0
                On Error Resume Next
                Row = Application.WorksheetFunction.Match(Character, oRng, 0)
                If Row Then
                    NewCharacter = "*"
                Else
                    NewCharacter = ""
                End If
            End If
        Else
            Unicode = AscW(Character)
            If Unicode < 0 Then
                Unicode = 65536 + Unicode
            End If
            If Not Len(Sheet2.Cells(Unicode + 1, 11)) = 1 Then
                NewCharacter = ChrW(9633)
            Else
                NewCharacter = Character
            End If
        End If
        i = i + Len(Character)
        FFTTextTrim = FFTTextTrim & NewCharacter
    Loop
End Function

Public Sub EditSelection()
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    Call Edit(Selection.Rows.Count, Selection.Row, Selection.Column)
End Sub

Public Sub EditAll()
Attribute EditAll.VB_ProcData.VB_Invoke_Func = "e\n14"
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    Dim Count As Integer
    Dim CurCol As Integer
    Count = 1
    CurCol = Selection.Column
    For i = 1039 To 17 Step -1
        If Len(Cells(i, CurCol)) Then
            Count = i - 16 + 1
            Exit For
        End If
    Next i
    Count = Application.WorksheetFunction.Max(Sheet4.Cells(2, CurCol), Count)
    Call Edit(Count, 16, CurCol)
End Sub

Public Sub Edit(Count As Integer, Start As Integer, Col As Integer)
    TextType = Sheet4.Cells(9, Col)
    If TextType < 1 Then
        MsgBox "This section cannot be edited with this workbook's text editor.", vbOKOnly, "Unable to proceed"
        Exit Sub
    End If
    VBATime
    Dim cell As Object
    Sheet9.Cells(1, 1) = Col
    Sheet9.Cells(2, 1) = Start - 16
    Sheet9.Cells(3, 1) = Count
    Sheet9.Cells(4, 1) = TextType
    Sheet9.Cells(13, 1) = Selection.Address
    Calculate
    LinesPerPage = Sheet9.Cells(8, 1)
    EditRow = 3
    RefCol = Sheet9.Cells(10, 1)
    RefOff = Sheet9.Cells(11, 1)
    Sheet1.Range("AI2:AJ65535").ClearContents
    Sheet1.Range("AG2:AG65535").ClearContents
    Sheet1.Range("AL:AL").ColumnWidth = Sheet9.Range("A5")
    For i = Start To Start + Count - 1
        RowCount = 0
        EntryString = Sheet4.Cells(i, Col)
        EntryString = Replace(EntryString, "{SP}", SPChar)
        If Right(EntryString, 9) = "{Newline}" Then
            EntryString = EntryString & "{End}"
        End If
        SearchPosition = 1
        Sheet1.Cells(EditRow, 31 + 2) = 1
        If RefCol > 0 Then
            Sheet1.Cells(EditRow, 31 + 4) = Sheet4.Cells(i + RefOff, RefCol)
        End If
        Do While True
            Newline = InStr(SearchPosition, EntryString, "{Newline}")
            If Newline Then
                Sheet1.Cells(EditRow, 31 + 5) = Mid(EntryString, SearchPosition, Newline - SearchPosition)
                EditRow = EditRow + 1
                RowCount = RowCount + 1
                SearchPosition = Newline + 9
            Else
                Sheet1.Cells(EditRow, 31 + 5) = Mid(EntryString, SearchPosition, Len(EntryString) - SearchPosition + 1)
                EditRow = EditRow + 1
                RowCount = RowCount + 1
                Exit Do
            End If
        Loop
        RowsUsed = RowCount Mod LinesPerPage
        If RowsUsed Then
            EditRow = EditRow + LinesPerPage - RowsUsed
        End If
    Next i
    If Sheet9.Cells(10, 1) Then
        Sheet1.Range("AI:AI").Columns.AutoFit
    Else
        Sheet1.Range("AI:AI").ColumnWidth = 0
    End If
    If EditRow > 3 Then
        Sheet1.Range(Sheet1.Cells(EditRow, 1), Sheet1.Cells(65535, 40)).ClearContents
        Sheet9.Range(Sheet9.Cells(EditRow + 1, 5), Sheet9.Cells(65535, 11)).ClearContents
        Sheet1.Range(Sheet1.Cells(2, 1), Sheet1.Cells(EditRow - 1, 32)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 31 + 3), Sheet1.Cells(EditRow - 1, 31 + 3)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 31 + 6), Sheet1.Cells(EditRow - 1, 31 + 7)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 40), Sheet1.Cells(EditRow - 1, 40)).FillDown
        Sheet9.Range(Sheet9.Cells(3, 5), Sheet9.Cells(EditRow, 11)).FillDown
    End If
    SwitchTab True
    VBATime False
End Sub

Public Function ReadReg(RegPath As String, Default As String) As String
Dim myWS As Object

  On Error GoTo ErrorHandler
  Set myWS = CreateObject("WScript.Shell")
  ReadReg = myWS.RegRead(RegPath)
  Exit Function
  
ErrorHandler:
  ReadReg = Default
End Function

Public Sub WriteReg(RegPath As String, _
               RegVal As String, _
      Optional RegType As String = "REG_SZ")
    Dim myWS As Object
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegWrite RegPath, RegVal, RegType
End Sub

Public Sub AddPages()
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    VBATime
    Dim Pages2 As Integer
    Pages = InputBox("How many pages would you like to add?" & Chr(10) & "(Current Section is " & LPP & " lines per page)", "Add Pages", 1)
    If IsNumeric(Pages) Then
        If Pages > 0 Then
            Pages2 = Pages
            Call AlterPages(Pages2)
        End If
    End If
    VBATime False
End Sub

Public Sub DeletePages()
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    VBATime
    Dim Pages2 As Integer
    Pages = InputBox("How many pages would you like to delete?" & Chr(10) & "(Current Section is " & LPP & " lines per page)", "Delete Pages", 1)
    If IsNumeric(Pages) Then
        If Pages > 0 Then
            Pages2 = Pages
            Call AlterPages(0 - Pages2)
        End If
    End If
    VBATime False
End Sub

Public Sub SaveEdits()
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    VBATime
    Dim EntryString As String
    Dim EntryID As Integer
    Dim SectionCol As Integer
    LastRow = Sheet1.Range("A1048576").End(xlUp).Row
    EntryString = "'"
    EntryID = Sheet9.Cells(2, 1) - 1
    First = True
    SectionCol = Sheet9.Cells(1, 1)
    For CurrentRow = 3 To LastRow
        If Len(Sheet1.Cells(CurrentRow, 33)) Then
            If First = False Then
                Call SaveEditCell(EntryString, EntryID, SectionCol)
            Else
                First = False
            End If
            EntryID = EntryID + 1
            EntryString = "'"
        End If
        EntryString = EntryString & Sheet1.Cells(CurrentRow, 36).Text & "{Newline}"
    Next CurrentRow
    Call SaveEditCell(EntryString, EntryID, SectionCol)
    StartRow = Sheet9.Cells(2, 1) + 16
    EndRow = EntryID + 16
    Sheet7.Range(Sheet7.Cells(StartRow, SectionCol), Sheet7.Cells(EndRow, SectionCol)).Copy
    Sheet4.Range(Sheet4.Cells(StartRow, SectionCol), Sheet4.Cells(EndRow, SectionCol)).PasteSpecial xlPasteValues
    Sheet7.Range("1:1048576").Clear
    SwitchTab False
    VBATime False
End Sub

Public Sub SaveEditCell(EntryStr As String, EntryRow As Integer, EntryCol As Integer)
    ParsedText = EntryStr
    Do While Right(ParsedText, 1) = "}"
        If LCase(Right(ParsedText, 9)) = "{newline}" Then
            ParsedText = Left(ParsedText, Len(ParsedText) - 9)
        ElseIf LCase(Right(ParsedText, 5)) = "{end}" Then
            ParsedText = Left(ParsedText, Len(ParsedText) - 5)
            Exit Do
        Else
            Exit Do
        End If
    Loop
    ParsedText = Replace(ParsedText, SPChar, "{SP}", , , vbBinaryCompare)
    ParsedText = Replace(ParsedText, "{newline}", "{Newline}", , , vbTextCompare)
    Sheet7.Cells(EntryRow + 16, EntryCol) = ParsedText
End Sub

Public Sub NotepadEmulator()
Attribute NotepadEmulator.VB_ProcData.VB_Invoke_Func = "n\n14"
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    TRow = TopRow()
    BRow = BottomRow()
    RowCount = BRow - TRow + 1
    If TRow > 0 Then
        MultiString = ""
        For a = TRow To BRow
            MultiString = MultiString & Sheet1.Cells(a, 36) & Chr(20) ' vbCrLf
        Next a
        For a = Len(MultiString) To 1 Step -1
            If Right(MultiString, 1) = Chr(20) Then
                MultiString = Left(MultiString, Len(MultiString) - 1)
                RowCount = RowCount - 1
            Else
                Exit For
            End If
        Next a
        SplitString = Split(MultiString, Chr(20))
        CurrentRow = Selection.Row - TRow
        If CurrentRow > RowCount Then
            CurrentRow = RowCount
        End If
        UserForm1.LinesPerPage.Caption = Sheet9.Range("A8")
        UserForm1.Notepad.Text = Replace(MultiString, Chr(20), vbCrLf)
        UserForm1.Notepad.SetFocus
        If Len(MultiString) Then
            LineLen = Len(SplitString(CurrentRow))
            UserForm1.Notepad.CurLine = CurrentRow
        Else
            LineLen = 0
        End If
        UserForm1.Notepad.SelStart = UserForm1.Notepad.SelStart + LineLen
        UserForm1.Show
    End If
End Sub

Public Function TopRow() As Integer
    CurrentRow = Selection.Row
    CurrentColour = Int((Sheet1.Cells(CurrentRow, 1) + 1) / 2)
    TopRow = 3
    If Len(Sheet1.Cells(CurrentRow, 1)) Then
        For c = CurrentRow To 3 Step -1
            If Int((Sheet1.Cells(c, 1) + 1) / 2) <> CurrentColour Then
                TopRow = c + 1
                Exit For
            End If
        Next c
    Else
        TopRow = 0
    End If
End Function

Public Function BottomRow() As Integer
    CurrentRow = Selection.Row
    CurrentColour = Int((Sheet1.Cells(CurrentRow, 1) + 1) / 2)
    BottomRow = CurrentRow
    If Len(Sheet1.Cells(CurrentRow, 1)) Then
        For c = CurrentRow To 65536
            If Int((Sheet1.Cells(c, 1) + 1) / 2) <> CurrentColour Then
                BottomRow = c - 1
                Exit For
            End If
        Next c
    Else
        BottomRow = 0
    End If
End Function

Public Sub AlterPages(Count As Integer)
    If Count = 0 Then
        Exit Sub
    End If
    LPP = Sheet9.Cells(8, 1)
    TRow = TopRow
    BRow = BottomRow
    If TRow > 0 Then
        CurrentRows = (BRow - TRow + 1) Mod LPP
        LinesCount = Count * LPP + ((LPP - CurrentRows) Mod LPP)
        LastLine = Sheet1.Range("A1048576").End(xlUp).Row
        If Count > 0 Then
            Sheet1.Range(Sheet1.Cells(BRow + 1, 1), Sheet1.Cells(BRow + LinesCount, 1)).EntireRow.Insert
            LastLine = LastLine + LinesCount
        Else
            If (BRow - TRow + 1 + LinesCount) > 0 Then
                Sheet1.Range(Sheet1.Cells(BRow + LinesCount + 1, 1), Sheet1.Cells(BRow, 1)).EntireRow.Delete
                Sheet9.Range("E4:E65536").ClearContents
                LastLine = LastLine + LinesCount
            End If
        End If
        Sheet1.Range(Sheet1.Cells(2, 1), Sheet1.Cells(LastLine, 32)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 31 + 3), Sheet1.Cells(LastLine, 31 + 3)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 31 + 6), Sheet1.Cells(LastLine, 31 + 7)).FillDown
        Sheet1.Range(Sheet1.Cells(2, 40), Sheet1.Cells(LastLine, 40)).FillDown
        Sheet9.Range(Sheet9.Cells(3, 5), Sheet9.Cells(LastLine, 11)).FillDown
    End If
End Sub

Public Function StringCount(Search As String, Text As String) As Integer
    Trimmed = Replace(Text, Search, "")
    StringCount = (Len(Text) - Len(Trimmed)) / Len(Search)
End Function


Public Sub ExitWithoutSaving()
    VBATime
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    Really = MsgBox("Are you sure you wish to return without saving?" & Chr(10) & "All changes will be lost.", vbOKCancel, "Cancel")
    If Really = 1 Then
        SwitchTab False
    Else
        Exit Sub
    End If
    VBATime False
End Sub

Public Sub SwitchTab(ToTextEdit As Boolean)
    Application.EnableEvents = True
    If ToTextEdit = True Then
        Sheet1.Visible = xlSheetVisible
        Sheet1.Activate
        Sheet4.Visible = xlSheetHidden
        ActiveWindow.ScrollRow = 3
        Sheet1.Range("AJ3").Select
    Else
        Sheet4.Visible = xlSheetVisible
        Sheet4.Activate
        Sheet1.Visible = xlSheetHidden
        Sheet1.Range("A3:AN65535").ClearContents
        Sheet9.Range("E4:K65535").ClearContents
        Sheet4.Range(Sheet9.Cells(13, 1)).Select
    End If
End Sub

Public Sub ClearEditSheet()
    If ActiveSheet.Name <> "FFTText" Then Exit Sub
    UserForm2.Show
End Sub

Public Sub SearchSection()
    Calculate
    VBATime
    For a = 1 To 2200
        Filename = Sheet10.Cells(a, 6)
        Section = Sheet10.Cells(a, 7)
        If Filename <> "" And Section <> "" Then
            For i = 1 To 390
                If Sheet4.Cells(7, i) = Filename Then
                    If Sheet4.Cells(4, i) = Section Then
                            Sheet4.Cells(2, i) = Sheet10.Cells(a, 9)
                        Exit For
                    End If
                End If
            Next i
        End If
    Next a
    VBATime False
End Sub

Public Sub ShowHideEndOfLine()
    If ActiveSheet.Name <> "Edit" Then Exit Sub
    If Sheet9.Range("A20") = True Then
        Sheet9.Range("A20") = False
    Else
        Sheet9.Range("A20") = True
    End If
End Sub

Public Sub EditPSX()
    ChangeVersion True
End Sub

Public Sub EditPSP()
    ChangeVersion False
End Sub

Public Sub ChangeVersion(PSX As Boolean)
    VBATime
    With Sheet4
        LastCol = .Cells(7, .Columns.Count).End(xlToLeft).Column
        For i = 2 To LastCol
            CurrentCell = .Cells(3, i)
            If CurrentCell = "PSX" Then
                .Columns(i).Hidden = Not PSX
            ElseIf CurrentCell = "PSP" Then
                .Columns(i).Hidden = PSX
            End If
        Next i
    End With
    VBATime False
End Sub

Public Function PadMe(PadString As String, PadCount As Byte)
    PadMe = PadString
    For i = 1 To PadCount
        PadMe = Chr(9) & PadMe
    Next i
End Function

Public Sub CalcCharacters()
    VBATime
    Sheet2.Range("A1:A65536").ClearContents
    For i = 1 To 2201
        Sheet2.Cells(1 + Sheet2.Cells(i, 12), 1) = Sheet2.Cells(i, 9)
    Next i
    VBATime False
End Sub

Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean
  IsInArray = (UBound(Filter(arr, stringToBeFound)) > -1)
End Function

Public Sub ImportCheckAll()
    With Sheet5
        .Range(.Range("C33")).Value = 1
    End With
End Sub

Public Sub ImportUncheckAll()
    With Sheet5
        .Range(.Range("C33")).ClearContents
    End With
End Sub

Public Sub ExportCheckAll()
    With Sheet5
        .Range(.Range("C34")).Value = 1
    End With
End Sub

Public Sub ExportUncheckAll()
    With Sheet5
        .Range(.Range("C34")).ClearContents
    End With
End Sub

Public Function ReplaceFromTo(ParseText As String, OnCol As Integer) As String
    Dim ReplaceCharsRange As String
    Dim FromString, ToString As String
    ReplaceCharsRange = Sheet5.Range("C35").Value2
    With Sheet5.Range(ReplaceCharsRange)
        For i = 1 To .Rows.Count
            If Len(.Cells(i, OnCol).Value2) Then
                FromString = .Cells(i, 1).Value2
                ToString = .Cells(i, 2).Value2
                If Len(FromString) > 0 Then
                    ParseText = Replace(ParseText, FromString, ToString)
                End If
            End If
        Next i
    End With
    ReplaceFromTo = ParseText
End Function


Public Sub VBATime(Optional DisableExcelStuff As Boolean = True)
    If DisableExcelStuff Then
        Application.Calculation = xlCalculationManual
        Application.ScreenUpdating = False
        Application.DisplayStatusBar = False
        Application.EnableEvents = False
    Else
        Application.DisplayStatusBar = True
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
    End If
End Sub

Public Sub ScanForIllegalCharacters()
    Dim LastCol As Integer
    Dim StringPos As Integer
    Dim ScanString As String
    Dim EndBracket As Integer
    Dim StringChar As String
    Dim ValidHex, ValidChar As Boolean
    Dim BracketEntry As String
    With Sheet4
        LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
        For CurrentCol = 1 To LastCol
            If .Cells(1, CurrentCol).Value2 > 0 Then
                For CurrentRow = 16 To 1039
                    ScanString = .Cells(CurrentRow, CurrentCol)
                    If Len(ScanString) Then
                        StringPos = 1
                        ScanString = ReplaceFromTo(ScanString, 4)
                        StringLen = Len(ScanString)
                        Do While StringPos <= StringLen
                            StringChar = Mid(ScanString, StringPos, 1)
                            ValidChar = True
                            ValidHex = True
                            If StringChar = "{" Then
                                EndBracket = InStr(StringPos + 1, ScanString, "}")
                                If EndBracket = 0 Then
                                    ValidChar = False
                                    GoTo Validate
                                End If
                                BracketEntry = Mid(ScanString, StringPos, EndBracket - StringPos + 1)
                                If Left(BracketEntry, 3) = "{0x" Then
                                    ValidHex = HexScan(BracketEntry, 4)
                                ElseIf Left(BracketEntry, 6) = "{Color" Then
                                    ValidHex = HexScan(BracketEntry, 8)
                                ElseIf Left(BracketEntry, 6) = "{Delay" Then
                                    ValidHex = HexScan(BracketEntry, 8)
                                ElseIf BracketEntry = "{Newline}" Then
                                
                                ElseIf BracketEntry = "{Ramza}" Then
                                
                                ElseIf BracketEntry = "{Close}" Then
                                
                                ElseIf BracketEntry = "{Begin List}" Then
                                
                                ElseIf BracketEntry = "{End List}" Then
                                
                                Else
                                    For i = 1 To 16
                                        ValidChar = False
                                        If BracketEntry = Sheet2.Cells(i, 3).Value2 Then
                                            ValidChar = True
                                            Exit For
                                        End If
                                    Next i
                                End If
                                StringPos = StringPos + Len(BracketEntry)
                            ElseIf StringChar = " " Then
                                StringPos = StringPos + 1
                                GoTo Validate
                            Else
                                If Sheet2.Cells(1 + UCode(StringChar), 1) = 0 Then
                                     ValidChar = False
                                     BracketEntry = StringChar
                                     GoTo Validate
                                End If
                                StringPos = StringPos + 1
                            End If
Validate:
                            If (ValidChar = False) Or (ValidHex = False) Then
                                Sheet4.Cells(CurrentRow, CurrentCol).Select
                                If ValidChar = False Then
                                    MsgBox "Unknown String " & """" & BracketEntry & """", vbOKOnly, "Invalid Characters"
                                ElseIf ValidHex = False Then
                                    MsgBox "Invalid hex inside " & """" & BracketEntry & """", vbOKOnly, "Invalid Hex"
                                End If
                                GoTo EndSub
                            End If
                            
                        Loop
                        
                    End If
                Next CurrentRow
            End If
        Next CurrentCol
    End With
    MsgBox "Congratulations! It seems that all characters would be valid if you were to save to a .ffttext file.", vbOKOnly, "Validated"
EndSub:
End Sub

Public Function HexScan(ScanString As String, HexPos As Integer) As Boolean
    Dim HexLen As Integer
    Dim i As Integer
    Dim test As String
    HexLen = Len(ScanString) - 1 - HexPos
    HexScan = True
    For i = HexPos To HexLen + HexPos
        test = Mid(ScanString, i, 1)
        Select Case Mid(ScanString, i, 1)
            Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"
            
            Case Else
                HexScan = False
        End Select
    Next i
End Function
Attribute VB_Name = "Module2"
Option Explicit
 
Sub SpawnToolbar(ToolbarID As Integer)
    On Error Resume Next
    Application.CommandBars("1").Delete
    Application.CommandBars("2").Delete
    Application.CommandBars("3").Delete
    Application.CommandBars("4").Delete
    Application.CommandBars("5").Delete
    Application.CommandBars("6").Delete
    Application.CommandBars("7").Delete
    On Error GoTo 0
    
    If ToolbarID = 1 Then
        ToolbarButton "1", "Save Edits                      ", "Save edits and return", 3, "SaveEdits"
        ToolbarButton "3", "Add Pages                     ", "Adds a number of pages to the end of the currently selected entry", 1924, "AddPages"
        ToolbarButton "5", "Notepad Emulator        ", "(ctrl+n) Edit the current entry in the notepad emulator", 1776, "NotepadEmulator"
        ToolbarButton "2", "Exit without Saving      ", "Discard changes and return without saving", 1088, "ExitWithoutSaving" '1786
        ToolbarButton "4", "Delete Pages               ", "Deletes a number of pages from the currently selected entry", 1925, "DeletePages"
        ToolbarButton "6", "Show/Hide End of Line", "Enable/Disable the display of the character '" & Chr(20) & "' at the end of lines", 119, "ShowHideEndOfLine"
    ElseIf ToolbarID = 2 Then
        ToolbarButton "1", "Edit Selection                ", "Edit the currently selected entries", 1773, "EditSelection"
        ToolbarButton "3", "Import .ffttext                ", "Import all the strings of a FFTactext file", 1591, "ImportFFTText"
        ToolbarButton "5", "Clear Sheet                    ", "Clears this entire sheet of FFTactext strings", 3792, "ClearEditSheet"
        ToolbarButton "2", "Edit All                           ", "(ctrl+e) Edit every valid entry of the currently selected section", 1774, "EditAll"
        ToolbarButton "4", "Export .ffttext                ", "Export all the strings into a FFTactext file", 1590, "ExportFFTText"
        ToolbarButton "6", "Resources.zip                ", "Compile, Generate/Update a chosen Resources.zip for FFTPatcher", 1676, "ResourcesZip"
        ToolbarButton "7", "Scan for Invalid Chars", "Scan for invalid characters which would cause FFTTactext to fail to patch or open the .ffttext file", 1676, "ScanForIllegalCharacters"
    Else
        With Application.CommandBars.Add("1", , False, True)
            .Protection = msoBarNoCustomize
            .Position = msoBarBottom
            .Visible = True
            With .Controls.Add(msoControlButton)
                .Caption = ""
                .FaceID = 1
                .Style = msoButtonIconAndCaption
            End With
        End With
    End If
End Sub
 
 
Sub MenuDelete()
    On Error Resume Next
    Application.CommandBars("1").Delete
    Application.CommandBars("2").Delete
    Application.CommandBars("3").Delete
    Application.CommandBars("4").Delete
    Application.CommandBars("5").Delete
    Application.CommandBars("6").Delete
    Application.CommandBars("7").Delete
    On Error GoTo 0
End Sub

Sub ToolbarButton(Name As String, Caption As String, Tooltip As String, FaceID As Integer, Macro As String)
    With Application.CommandBars.Add(Name, , False, True)
        .Protection = msoBarNoCustomize
        .Position = msoBarBottom
        .Visible = True
        With .Controls.Add(msoControlButton)
            .Caption = Caption
            .TooltipText = Tooltip
            .FaceID = FaceID
            .OnAction = Macro
            .Style = msoButtonIconAndCaption
            .Width = 300
        End With
    End With
End Sub


Sub AdjustForm()
    With UserForm1
        .OKButton.Top = UserForm1.InsideHeight - 21.25
        .OKButton.Left = UserForm1.InsideWidth - 209.25
        .CancelButton.Top = UserForm1.InsideHeight - 21.25
        .CancelButton.Left = UserForm1.InsideWidth - 113.25
        .Label1.Top = UserForm1.InsideHeight - 17.25
        .LinesCount.Top = UserForm1.InsideHeight - 17.25
        .Label3.Top = UserForm1.InsideHeight - 17.25
        .PagesCount.Top = UserForm1.InsideHeight - 17.25
        .Label5.Top = UserForm1.InsideHeight - 17.25
        .LinesPerPage.Top = UserForm1.InsideHeight - 17.25
        .Notepad.Width = .InsideWidth - 53.25
        .Notepad.Height = .InsideHeight - 30
        .LenList.Height = .InsideHeight - 32.25

    End With
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 1
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 0
End Sub


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 0
End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 2
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 0
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 0
End Sub


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    SpawnToolbar 0
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Select Case ActiveSheet.Name
        Case "FFTText"
            SpawnToolbar 2
        Case "Text"
            SpawnToolbar 1
        Case Else
            SpawnToolbar 0
    End Select
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    MenuDelete
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{A42FD60D-5C5E-4BBB-8360-0193236A1CD1}{09C82EC0-EA31-4117-A056-68C7955D7CBF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private m_clsResizer As CResizer

Private Sub UserForm_Initialize()
    With UserForm1
        .StartUpPosition = 0
        .Width = CSng(ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Width", 2007) / 4)
        .Height = CSng(ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Height", 969) / 4)
        TempTop = CSng(ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Top", -32768))
        TempLeft = CSng(ReadReg("HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Left", -32768))
        If TempTop <> -32768 Then
            .Top = TempTop
        End If
        If TempLeft <> -32768 Then
            .Left = TempLeft
        End If
    End With
    Set m_clsResizer = New CResizer
    m_clsResizer.Add Me
End Sub

Private Sub UserForm_Terminate()
    Set m_clsResizer = Nothing
End Sub

Private Sub Notepad_Change()
    LenList.Clear
    Dim a() As String
    a = Split(Notepad.Text, vbCrLf)
    For B = 0 To UBound(a)
        UserForm1.LenList.AddItem FFTTextLen(a(B))
    Next B
    UserForm1.Notepad.SetFocus
    UserForm1.LinesCount = UserForm1.Notepad.LineCount
    UserForm1.PagesCount = Application.WorksheetFunction.RoundUp(UserForm1.Notepad.LineCount / Sheet9.Range("A8"), 0)
End Sub

Private Sub OKButton_Click()
    VBATime
    Dim a() As String
    Dim NewPages As Integer
    CurrentRow = Selection.Row
    TRow = TopRow()
    BRow = BottomRow()
    If TRow > 0 Then
        OldCount = BRow - TRow + 1
        UserForm1.Notepad.SetFocus
        MaxLines = Sheet9.Cells(8, 1)
        NewCount = Application.WorksheetFunction.RoundUp(UserForm1.Notepad.LineCount / MaxLines, 0) * MaxLines
        NewPages = Application.WorksheetFunction.RoundUp((NewCount - OldCount) / MaxLines, 0)
        a = Split(Notepad.Text, vbCrLf)
        For B = TRow To BRow
            Sheet1.Cells(B, 36).ClearContents
        Next B
        If NewPages <> 0 Then
            AlterPages (NewPages)
        End If
        For B = 0 To UBound(a)
            Sheet1.Cells(TRow + B, 36) = a(B)
        Next B
    End If
    SaveWindow
    Unload UserForm1
    VBATime False
End Sub

Private Sub CancelButton_Click()
    SaveWindow
    Unload UserForm1
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    SaveWindow
End Sub

Sub SaveWindow()
    With UserForm1
        WriteReg "HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Width", .Width * 4, "REG_DWORD"
        WriteReg "HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Height", .Height * 4, "REG_DWORD"
        WriteReg "HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Top", .Top, "REG_DWORD"
        WriteReg "HKEY_CURRENT_USER\Software\FFHacktics\Notepad Emu\Left", .Left, "REG_DWORD"
    End With
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{EAFD0276-D26D-4F0F-B900-5FEEB29E386E}{99BA9522-E0AC-408C-8C01-C30E2A843378}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Fill_Click()
    VBATime
    With Sheet7
        For i = 1 To 360
            ClearCol = Sheet3.Cells(i, 2)
            If Sheet5.Cells(i, 1) = 0 Then
                .Cells(1, ClearCol).Value = 1
                .Range(.Cells(16, ClearCol), .Cells(16 + 1023, ClearCol)).Value = "'"
            End If
        Next i
        For i = 1 To 15
            ClearCol = Sheet5.Cells(i, 4)
            .Cells(1, ClearCol).Value = 1
            .Range(.Cells(16, ClearCol), .Cells(16 + 1023, ClearCol)).Value = "'"
        Next i
    End With
    StartCol = 0
    For i = 1 To 1024
        NextCol = Sheet7.Cells(1, i)
        If NextCol = 1 And StartCol = 0 Then
            StartCol = i
        ElseIf NextCol <> 1 And StartCol > 0 Then
            Sheet7.Range(Sheet7.Cells(16, StartCol), Sheet7.Cells(16 + 1023, i - 1)).Copy
            Sheet4.Range(Sheet4.Cells(16, StartCol), Sheet4.Cells(16 + 1023, i - 1)).PasteSpecial xlPasteValues
            StartCol = 0
        End If
    Next i
    Sheet7.Range("1:1048576").Clear
    VBATime False
    Unload Me
End Sub

Private Sub Clear_Click()
    VBATime
    With Sheet4
        For i = 1 To 360
            ClearCol = Sheet3.Cells(i, 2)
            If Sheet5.Cells(i, 1) = 0 Then
                .Cells(1, ClearCol).Value = 1
                .Range(.Cells(16, ClearCol), .Cells(16 + 1023, ClearCol)).ClearContents
            End If
        Next i
        For i = 1 To 15
            ClearCol = Sheet5.Cells(i, 4)
            .Cells(1, ClearCol).Value = 1
            .Range(.Cells(16, ClearCol), .Cells(16 + 1023, ClearCol)).ClearContents
        Next i
    End With
    VBATime False
    Unload Me
End Sub

Private Sub Cancel_Click()
    Unload Me
End Sub


' InQuest injected base64 decoded content
' ~`ZrD

INQUEST-PP=macro
