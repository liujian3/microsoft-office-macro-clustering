Attribute VB_Name = "DictForm"
Attribute VB_Base = "0{A64B1974-47CE-4B46-A714-97A7D4F16F9B}{D45632A0-7470-4089-B59E-484A151A17A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub AddCustomButton_Click()
  AddCustomWord (1)
End Sub

Private Sub AddExcludeWordButton_Click()
  AddExcludeWord (1)
End Sub

Private Sub AUoption_Click()
  LoadExcludeDict (1)
End Sub

Private Sub CancelButton_Click()
  DictForm.hide
End Sub

Private Sub CAoption_Click()
   LoadExcludeDict (1)
End Sub

Private Sub DeleteCiustomWordButton_Click()
  DeleteCustomWord (0)
End Sub

Private Sub DeleteExcludeWordButton_Click()
  DeleteExcludeWord (0)
End Sub

Private Sub DictListbox_Click()
  ChangeDict (1)
End Sub

Private Sub HelpButton_Click()
  DictHelp (1)
End Sub

Private Sub MainDictOnlyCheckbox_Click()
 UseMainOnly (DictForm.MainDictOnlyCheckbox.Value)
End Sub

Private Sub NZoption_Click()
   LoadExcludeDict (1)
End Sub

Private Sub ProofingOptionsButton_Click()
  ShowProofingOptions (1)
End Sub

'Private Sub RemoveDictButton_Click()
'  DeactivateCustomDict (0)
'End Sub

'Private Sub AddDictButton_Click()
'  DeactivateCustomDict (1)
'End Sub

Private Sub UKoption_Click()
   LoadExcludeDict (1)
End Sub

Private Sub USoption_Click()
   LoadExcludeDict (1)
End Sub
Attribute VB_Name = "DictModule"
Option Explicit
Dim DictNo As Long
Dim DictPath As String

'expression.GetSpellingSuggestions(Word, CustomDictionary, IgnoreUppercase, MainDictionary, SuggestionMode, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10)

Sub GO_Spelling(n As Long)
Dim k As Long

  DictNo = Application.CustomDictionaries.Count
  If DictNo > 1 Then
    k = 1
    Do While Application.CustomDictionaries(k).Name <> "CUSTOM.DIC" And k < DictNo
      k = k + 1
    Loop
    DictNo = k
  End If
  DictPath = Environ("appdata") & "\Microsoft\UProof"
'  MsgBox Dir(DictPath & "\custom.dic")
  
  LoadCustomDict
  LoadExcludeDict (1)
  LoadAllDicts
  If DictForm.DictListbox.ListCount > 0 Then DictForm.DictListbox.ListIndex = 0
 ' DictForm.LanguageLabel.Caption = Languages(ActiveDocument.AttachedTemplate.LanguageID)
  DictForm.Show
End Sub
 
Private Sub LoadCustomDict()
Dim FSO As Object
Dim MyFileRead  As Object
Dim sDict As String
Dim k As Long
  k = 0
  DictForm.LanguageLabel.Caption = "No current dictionary"
  DictForm.MainDictOnlyCheckbox = Options.SuggestFromMainDictionaryOnly
  DictForm.CustomListbox.Clear
  
  If DictNo = 0 Then GoTo Lerr
  On Error GoTo Lerr
  'With Application.CustomDictionaries.ActiveCustomDictionary
  With Application.CustomDictionaries(DictNo) '.ActiveCustomDictionary
    sDict = .Path & "\" & .Name
    DictForm.LanguageLabel.Caption = .Name & " Lang=" & GiveLang(.LanguageID)
  End With
  Set FSO = CreateObject("Scripting.FileSystemObject")
  Set MyFileRead = FSO.OpenTextFile(sDict, 1, True, -1)
  With DictForm.CustomListbox
    .Clear
    Do While Not MyFileRead.AtEndOfStream
      .AddItem MyFileRead.ReadLine
      k = k + 1
    Loop
Lerr:
    If k = 0 Then DictForm.CustomListbox.AddItem "no entries"
  End With
  'DictForm.Show
  
  'LoadAllDicts
End Sub

Sub UseMainOnly(v As Boolean)
  Options.SuggestFromMainDictionaryOnly = v
  LoadCustomDict
End Sub

  
Private Sub LoadAllDicts()
Dim k As Long
Dim D As Object
Dim s As String
  With DictForm.DictListbox
    .Clear
    .ColumnCount = 3
    .ColumnHeads = False
    .ColumnWidths = "12,67,24"
    s = ""
    On Error Resume Next
    s = Application.CustomDictionaries.ActiveCustomDictionary.Name
    On Error GoTo 0
    If s = "" Then
      Exit Sub
    End If
    k = -1
    For Each D In CustomDictionaries ' iterates through all dicts.
      k = k + 1
      .AddItem
       
      If D.Name = s Then
        DictForm.DictListbox.List(k, 0) = "A"
      Else
          DictForm.DictListbox.List(k, 0) = " "
      End If
      DictForm.DictListbox.List(k, 1) = D.Name
      DictForm.DictListbox.List(k, 2) = GiveLang(D.LanguageID)
    Next D
      
    If Val(Application.Version) = 14 Then
      DictForm.VersionLabel.Caption = "Word 2010" & vbCrLf & "All custom" & vbCrLf & "dictionaries"
    Else
      DictForm.VersionLabel.Caption = "Only active" & vbCrLf & "custom" & vbCrLf & "dictionaries"
    End If
    
  End With
End Sub

Sub ShowProofingOptions(n As Long)
  Dialogs(wdDialogToolsOptionsSpellingAndGrammar).Show
  LoadAllDicts
  If DictForm.DictListbox.ListCount > 0 Then
     DictNo = DictForm.DictListbox.ListIndex
     If DictNo = -1 Then
       DictNo = 0
       DictForm.DictListbox.ListIndex = 0
     End If
  End If
  LoadCustomDict
End Sub
Sub DeactivateCustomDictXXXXXXXXXX(n As Long) ' n=0 deactivate, n=1 activate
Dim k As Long
Dim j As Long
Dim X As String
Dim D(100) As String
Dim dd
Dim s As String
Dim ss As String
Dim ds As String
  k = DictForm.DictListbox.ListIndex + 1
  'If k < 1 Or k > Application.CustomDictionaries.Count Then
  If k < 1 Then
    MsgBox "Dictionary not selected"
    Exit Sub
  End If
  X = DictForm.DictListbox.List(k - 1, 0)
  k = 0
  ss = ""
  For j = 1 To Application.CustomDictionaries.Count
    s = Application.CustomDictionaries(j).Name
    ss = ss & s
    If (n = 0 And s <> X) Or n = 1 Then
      k = k + 1
      D(k) = s
    End If
  Next j

  If k > 0 Then
    Application.CustomDictionaries.ClearAll
    For j = 1 To k
      Set dd = Application.CustomDictionaries.Add(FileName:=D(j))
    Next j
  End If
  If n = 1 Then
    If InStr(ss, X) = 0 Then Set dd = Application.CustomDictionaries.Add(X)
  End If
  LoadAllDicts
End Sub
  
Sub ChangeDict(n As Long)
Dim k As Long
  k = DictForm.DictListbox.ListIndex
  If k < 0 Then Exit Sub
  DictNo = k + 1
  LoadCustomDict
End Sub
Function GiveLang(n As Long) As String
  Select Case n
    Case 0
      GiveLang = "all"
    Case wdEnglishAUS
      GiveLang = "AU"
    Case wdEnglishCanadian
      GiveLang = "CAN"
    Case wdEnglishNewZealand
      GiveLang = "NZ"
    Case wdEnglishUK
      GiveLang = "UK"
    Case wdEnglishUS
      GiveLang = "US"
    Case Else
    GiveLang = Str(n)
  End Select
End Function

Sub AddCustomWord(n As Long)
Dim FSO As Object
Dim MyFileRead  As Object
Dim aWord As String
Dim cWord As String
Dim sDict As String
Dim wordFound As Boolean
  aWord = Trim(DictForm.CustomTextbox.Value)
  If aWord = "" Then Exit Sub
  With Application.CustomDictionaries(DictNo)
    sDict = .Path & "\" & .Name
  End With
  Set FSO = CreateObject("Scripting.FileSystemObject")
  Set MyFileRead = FSO.OpenTextFile(sDict, 1, True, -1)
  wordFound = False
  Do While Not MyFileRead.AtEndOfStream
        cWord = MyFileRead.ReadLine
        If cWord = aWord Then wordFound = True: Exit Do
  Loop
  MyFileRead.Close
  If Not wordFound Then
    Set MyFileRead = FSO.OpenTextFile(sDict, 8, True, -1) 'Unicode=True'
    MyFileRead.WriteLine aWord
    MyFileRead.Close
  End If
  LoadCustomDict
End Sub


Sub DeleteCustomWord(n As Long)
Dim FSO As Object
Dim MyFileRead  As Object
Dim aWord As String
Dim cWord As String
Dim sDict As String
Dim w() As String
Dim k As Long
  ReDim w(0)
    
  With DictForm.CustomListbox
    If .ListIndex = 0 Then If Left(.List(0), 1) = "#" Then Exit Sub
    If .ListIndex = -1 Then Exit Sub
    If .ListCount < 1 Then Exit Sub
    aWord = Trim(.List(.ListIndex))
  End With
'  If aWord = "" Then Exit Sub
  With Application.CustomDictionaries(DictNo)
    sDict = .Path & "\" & .Name
  End With
  Set FSO = CreateObject("Scripting.FileSystemObject")
  Set MyFileRead = FSO.OpenTextFile(sDict, 1, True, -1)
  k = -1
  Do While Not MyFileRead.AtEndOfStream
        cWord = MyFileRead.ReadLine
        If cWord <> aWord Then
          k = k + 1
          ReDim Preserve w(k)
          w(k) = cWord
        End If
  Loop
  MyFileRead.Close
  Set MyFileRead = FSO.OpenTextFile(sDict, 2, True, -1) ' open for writing with Unicode
  If k > -1 Then
    For k = 0 To UBound(w)
      MyFileRead.WriteLine w(k)
    Next k
  End If
  MyFileRead.Close
  LoadCustomDict
End Sub


'ExcludeDictionaryEN0C09.lex: English |fffd| Australia
'ExcludeDictionaryEN2809.lex: English |fffd| Belize
'ExcludeDictionaryEN1009.lex: English |fffd| Canada
'ExcludeDictionaryEN2409.lex: English |fffd| Caribbean
'ExcludeDictionaryEN3C09.lex: English |fffd| Hong Kong |fffd| SAR
'ExcludeDictionaryEN4009.lex: English |fffd| India
'ExcludeDictionaryEN3809.lex: English |fffd| Indonesia
'ExcludeDictionaryEN1809.lex: English |fffd| Ireland
'ExcludeDictionaryEN2009.lex: English |fffd| Jamaica
'ExcludeDictionaryEN4409.lex: English |fffd| Malaysia
'ExcludeDictionaryEN1409.lex: English |fffd| New Zealand
'ExcludeDictionaryEN3409.lex: English |fffd| Philippines
'ExcludeDictionaryEN4809.lex: English |fffd| Singapore
'ExcludeDictionaryEN1C09.lex: English |fffd| South Africa
'ExcludeDictionaryEN2C09.lex: English |fffd| Trinidad
'ExcludeDictionaryEN0809.lex: English |fffd| United Kingdom
'ExcludeDictionaryEN0409.lex: English |fffd| United States
'ExcludeDictionaryEN3009.lex: English |fffd| Zimbabwe


Sub LoadExcludeDict(n As Long)
Dim dPath As String
Dim eName As String
Dim cName As String
Dim cWord As String
Dim FSO As Object
Dim MyFileRead  As Object
Dim k As Long
  dPath = ""
  On Error Resume Next
  dPath = Environ("appdata") & "\Microsoft\UProof"
  On Error GoTo 0
  If dPath = "" Then
    With DictForm.ExcludeListbox
      .Clear
      .AddItem "active dictionary missing"
    End With
    Exit Sub
  End If
  With DictForm
    If .AUoption Then cName = "0c09"
    If .USoption Then cName = "0409"
    If .UKoption Then cName = "0809"
    If .CAoption Then cName = "1009"
    If .NZoption Then cName = "1409"
  End With
  dPath = dPath & "\ExcludeDictionaryEN" & cName & ".lex"
  Set FSO = CreateObject("Scripting.FileSystemObject")
  k = 0
  With DictForm.ExcludeListbox
    .Clear
   
    Set MyFileRead = FSO.OpenTextFile(dPath, 1, True, -1) 'Unicode=True'
    Do While Not MyFileRead.AtEndOfStream
      .AddItem MyFileRead.ReadLine
      k = k + 1
    Loop
    If k = 0 Then .AddItem "no entries"
  End With
 ' DictForm.Show
End Sub

Sub AddExcludeWord(n As Long)
Dim FSO As Object
Dim MyFileRead  As Object
Dim aWord As String
Dim cWord As String
'Dim sDict As String
Dim dPath As String
Dim cName As String
Dim wordFound As Boolean
  aWord = Trim(DictForm.ExcludeTextbox.Value)
  If aWord = "" Then Exit Sub
  dPath = ""
  On Error Resume Next
  'dPath = Application.CustomDictionaries.ActiveCustomDictionary.Path
  dPath = Environ("appdata") & "\Microsoft\UProof"
  On Error GoTo 0
  If dPath = "" Then Exit Sub
  With DictForm
    If .AUoption Then cName = "0c09"
    If .USoption Then cName = "0409"
    If .UKoption Then cName = "0809"
    If .CAoption Then cName = "1009"
    If .NZoption Then cName = "1409"
  End With
  dPath = dPath & "\ExcludeDictionaryEN" & cName & ".lex"
  
  Set FSO = CreateObject("Scripting.FileSystemObject")
  Set MyFileRead = FSO.OpenTextFile(dPath, 1, True, -1)
  wordFound = False
  Do While Not MyFileRead.AtEndOfStream
        cWord = MyFileRead.ReadLine
        If cWord = aWord Then wordFound = True: Exit Do
  Loop
  MyFileRead.Close
  If Not wordFound Then
    Set MyFileRead = FSO.OpenTextFile(dPath, 8, True, -1) 'Unicode=True'
    MyFileRead.WriteLine aWord
    MyFileRead.Close
  End If
  LoadExcludeDict (1)
End Sub

Sub DeleteExcludeWord(n As Long)
Dim FSO As Object
Dim MyFileRead  As Object
Dim aWord As String
Dim cWord As String
'Dim sDict As String
Dim dPath As String
Dim cName As String
Dim w() As String
Dim k As Long
  ReDim w(0)
  With DictForm.ExcludeListbox
    If .ListIndex < 0 Then Exit Sub
    aWord = Trim(.List(.ListIndex))
  End With
 ' If aWord = "" Then Exit Sub
  dPath = ""
  On Error Resume Next
 ' dPath = Application.CustomDictionaries.ActiveCustomDictionary.Path
  dPath = Environ("appdata") & "\Microsoft\UProof"
  On Error GoTo 0
  If dPath = "" Then Exit Sub
  With DictForm
    If .AUoption Then cName = "0c09"
    If .USoption Then cName = "0409"
    If .UKoption Then cName = "0809"
    If .CAoption Then cName = "1009"
    If .NZoption Then cName = "1409"
  End With
  dPath = dPath & "\ExcludeDictionaryEN" & cName & ".lex"
  
  With DictForm.ExcludeListbox
    If .ListCount < 1 Then Exit Sub
    aWord = Trim(.List(.ListIndex))
  End With
 ' If aWord = "" Then Exit Sub
 
  Set FSO = CreateObject("Scripting.FileSystemObject")
  Set MyFileRead = FSO.OpenTextFile(dPath, 1, True, -1)
  k = -1
  Do While Not MyFileRead.AtEndOfStream
        cWord = MyFileRead.ReadLine
        If cWord <> aWord Then
          k = k + 1
          ReDim Preserve w(k)
          w(k) = cWord
        End If
  Loop
  MyFileRead.Close
 ' If k < 0 Then Exit Sub
  Set MyFileRead = FSO.OpenTextFile(dPath, 2, True, -1) ' open for writing with Unicode
  If k > -1 Then
    For k = 0 To UBound(w)
      MyFileRead.WriteLine w(k)
    Next k
  End If
  MyFileRead.Close
  LoadExcludeDict (1)
End Sub


Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{C2078D3E-3B29-4492-954E-1CA3B52F846B}{C956A24A-1757-4387-8B7F-5E7208DB6585}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
  ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub
Attribute VB_Name = "MsgForm"
Attribute VB_Base = "0{66E8EB82-61A4-48DA-86CA-1B33642470E3}{314FFAFE-68A4-4B13-917E-E918595476E7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  MsgReturn = 0
  MsgForm.hide
End Sub

Private Sub NoButton_Click()
  MsgReturn = 2
  MsgForm.hide
End Sub

Private Sub YesButton_Click()
  MsgReturn = 1
  MsgForm.hide
End Sub
Attribute VB_Name = "SpellChecking"
Option Explicit

Public prompts() As Range
Public MsgReturn As Long
Public FirstErrors As New Collection
Dim wd() As String
Dim wdN() As Long
Dim languageSW As Boolean
Dim hPoints As Single
Dim vPoints As Single

Sub GO_SPELLER()
  Call GiveScreenPoints(hPoints, vPoints)
  With SpellGrammarForm
    .StartUpPosition = 0
    .Left = hPoints - .Width - 60
 '   .Height = 580  '
    .Top = 46
    .TypeOfChangeLabel.Caption = ""
    .Show
  End With
  Application.ScreenRefresh
  DoEvents
  BlankLowerForm
  SpellGrammarForm.STextLabel = ""
  SpellGrammarForm.SpellCountLabel = ""
  LoadSpellingForm
End Sub

Sub refreshForm(n As Long)
  LoadSpellingForm
End Sub

Private Sub ShowMsge(s As String)
  MsgReturn = 0
  With MsgForm
    .Top = SpellGrammarForm.Height / 2
    .Left = SpellGrammarForm.Left - .Width
    .MsgLabel.Caption = s
    .Show
  End With
End Sub

Private Sub LoadSpellingForm()
Dim s As String
Dim L As Long
Dim aRange As Range
Dim selRange As Range
Dim returnRange As Range
Dim k As Long

On Error GoTo loadErr

  BlankLowerForm
  Set returnRange = Selection.Range
'  If Selection.Range = "" Then ActiveDocument.Range.Select
  Set selRange = Selection.Range
'  If selRange = "" Then
  If returnRange = "" Then
    Set selRange = selRange.Paragraphs(1).Range
    Set aRange = ActiveDocument.Paragraphs(1).Range
  Else
    Set aRange = Selection.Paragraphs(1).Range
  '  Set selRange = Selection.Paragraphs(1).Range
  End If
selRange.Select
  With SpellGrammarForm
    .ErrorCountButton.Enabled = False
    .GoToNextButton.Visible = False
  '  .TooManyLabel.Caption = ""
    .SpellCountLabel.Caption = ""
    .STextLabel.Caption = "PLEASE WAIT until spell checking finishes"
    DoEvents
  '  If Selection.Paragraphs.Count > 40 Then _
  '  .TooManyLabel.Caption = "WARNING. Selection is large & results may not be correct"
    .SpellCountLabel.Caption = Str(ActiveDocument.SpellingErrors.Count)
selRange.Select
    If Selection.Paragraphs.Count > 50 Then
      .LanguageInSelectionLabel.Caption = "> 50 paragraphs"
    Else
      .LanguageInSelectionLabel.Caption = "Unknown or mixed"
    End If
    On Error Resume Next
    .LanguageInSelectionLabel.Caption = Languages(Selection.LanguageID)
    .LanguageInParaLabel.Caption = "Unknown or mixed"
    .LanguageInParaLabel.Caption = Languages(aRange.LanguageID)
    .LanguageInStyleLabel.Caption = "Unknown or mixed"
    .LanguageInStyleLabel.Caption = Languages(selRange.Paragraphs(1).Style.LanguageID)
    .DefaultLanguageLabel.Caption = Languages(ActiveDocument.AttachedTemplate.LanguageID)
    On Error GoTo 0
    .AutoLanguageCheckbox = Application.CheckLanguage
    
    .AsYouTypeCheckbox.Value = Options.CheckSpellingAsYouType
    
    .HideSpellingErrorsCheckbox = Not ActiveDocument.ShowSpellingErrors '.Value
    .HideCommentLabel = ""
    .HideSpellingErrorsCheckbox.Enabled = .AsYouTypeCheckbox
 selRange.Select
    s = Proof(selRange, "")
    .SelectedProofLabel.Caption = s
    s = Proof(aRange, "")
 '   s = Proof(selRange.Paragraphs(1).Range, "")
    .ParagraphProofLabel.Caption = s
    's = Proof(selRange, selRange.Paragraphs(1).Style.NameLocal)
     s = Proof(aRange, aRange.Paragraphs(1).Style.NameLocal)
    .StyleProofLabel.Caption = s
    '.styleLabel.Caption = selRange.Paragraphs(1).Style.NameLocal
    .styleLabel.Caption = aRange.Paragraphs(1).Style.NameLocal
    k = ActiveDocument.SpellingErrors.Count
    s = Str(k)
    If k < 1000 Then s = "   " & s
    .SpellCountLabel.Caption = s  'Str(ActiveDocument.SpellingErrors.Count) ' repeat of above
    .HighlightStatus.Caption = ""
    .STextLabel.Caption = "spelling      " & Str(ActiveDocument.GrammaticalErrors.Count) & " grammar errors"
    .HideSpellingErrorsCheckbox = Not ActiveDocument.ShowSpellingErrors ' repeated as may change if too many errors
    .ErrorCountButton.Enabled = True
    selRange.Select
  End With
  If returnRange.Text = "" Then returnRange.Select
  Exit Sub
loadErr:
  MsgBox "Document not open"
End Sub

Private Sub BlankLowerForm()
  With SpellGrammarForm
    .LanguageListbox.Clear
    .PromptListbox.Clear
    .GoToNextButton.Caption = ""
    .AcceptButton.Caption = ""
    .IgnoreButton.Caption = ""
    .TypeOfChangeLabel.Caption = ""
    .ChangeLangStyleButton.Default = False
    .ChangeLangSelectionButton.Default = False
    .ChangeLangParaButton.Default = False
    .ChangeDefaultLangButton.Default = False
    .ChangeDefaultLangButton.Cancel = True
    .SpellCancelButton.Default = True
  End With
End Sub

Sub SetHideSpellingErrors(n As Long)
Dim sTest As Boolean
  With ActiveDocument
    sTest = .ShowSpellingErrors
    .ShowSpellingErrors = Not SpellGrammarForm.HideSpellingErrorsCheckbox
    DoEvents
    Application.ScreenRefresh
    DoEvents
    If sTest <> Not .ShowSpellingErrors Then
      SpellGrammarForm.HideCommentLabel = "Too many errors to show"
    Else
      SpellGrammarForm.HideCommentLabel = ""
    End If
  End With
End Sub

Sub setAutoLanguage(n As Long)
  Application.CheckLanguage = SpellGrammarForm.AutoLanguageCheckbox
End Sub

Sub setAsYouType(n As Long)
  If SpellGrammarForm.AsYouTypeCheckbox.Value Then
 '   Application.CheckLanguage = False 'True
    Options.CheckSpellingAsYouType = True
  Else
 '   Application.CheckLanguage = 'True
    Options.CheckSpellingAsYouType = False
  End If
  Application.ScreenRefresh
  'LoadSpellingForm
  SpellGrammarForm.AsYouTypeCheckbox = Options.CheckSpellingAsYouType
End Sub

Function Proof(aRange As Range, styleNM As String) As String
Dim L As Long
Dim s As String
Dim aPara As Paragraph
Dim onP As Long
Dim offP As Long
Dim undefP As Long
  If styleNM = "" Then
    L = aRange.NoProofing
  Else
    L = ActiveDocument.Styles(styleNM).NoProofing
  End If
    If L = wdUndefined Then
      onP = 0
      offP = 0
      undefP = 0
      For Each aPara In aRange.Paragraphs
        L = aPara.Range.NoProofing
        Select Case L
          Case 0
            onP = onP + 1
          Case -1
            offP = offP + 1
          Case Else
            undefP = undefP + 1
        End Select
      Next aPara
      If undefP > 0 Then
        s = "Undefined or mixed"
      Else
        If onP > 0 And offP > 0 Then
          s = "Mixed on & off"
        Else
          If onP > 0 Then
            s = "Spell check all paras"
          Else
            s = "Spell check suppressed"
          End If
        End If
      End If
    Else
      If L = True Then
        s = "Spell check suppressed"
      Else
        s = "Spell check on"
      End If
    End If
   Proof = s
End Function

Sub AcceptOption(n As Long)
  If n = 0 Then
    'SpellGrammarForm.Height = 580 '430
    BlankLowerForm
    'SpellGrammarForm.TypeOfChangeLabel.Caption = ""
    Exit Sub
  End If
  If SpellGrammarForm.AcceptButton.Caption = "Accept language" Then
    AcceptLanguage (n)
    BlankLowerForm
  Else
    IgnoreOrReplace (n)
  End If
End Sub

Sub AcceptLanguage(n As Long) ' n=0 cancel
Dim s As String
Dim aStyle As Style
Dim aRange As Range
Dim aParagraph As Paragraph
Dim aLanguageID As Long
  
  If n = 0 Then Exit Sub
  
  With SpellGrammarForm.LanguageListbox
  If .ListIndex < 1 Then
 '   MsgBox "Please select a language"
     ShowMsge ("Please select a language." & vbCrLf & vbCrLf & _
        "Any button to exit.")
    Exit Sub
  End If
    s = .List(.ListIndex)
'    Set aLanguage = Languages(s)
    aLanguageID = Languages(s).ID
  End With
  
  With SpellGrammarForm
    s = .TypeOfChangeLabel.Caption
    If InStr(s, "style") > 0 Then
      Set aRange = Selection.Paragraphs(1).Range
      Set aStyle = aRange.Paragraphs(1).Style
      aStyle.LanguageID = aLanguageID 'Languages(.LanguageListbox.List(.LanguageListbox.ListIndex)).ID
      aRange.Select
      Selection.Style = aStyle.NameLocal
      Selection.LanguageID = aLanguageID
      Selection.NoProofing = False
    Else
      If InStr(s, "selection") > 0 Then
        Set aRange = Selection.Range
        If Len(Selection.Range.Text) < Len(Selection.Paragraphs(1).Range.Text) Then
          Selection.LanguageID = aLanguageID
        Else
          For Each aParagraph In aRange.Paragraphs
            aParagraph.Range.LanguageID = aLanguageID
            aParagraph.Range.NoProofing = False
          Next aParagraph
          aRange.Select
        End If
      Else
        If InStr(s, "paragraph") > 0 Then
          Selection.Paragraphs(1).Range.LanguageID = aLanguageID
          Selection.Paragraphs(1).Range.NoProofing = False
        Else
          If InStr(s, "Default") > 0 Then
            ActiveDocument.AttachedTemplate.LanguageID = aLanguageID
   ' ActiveDocument.AttachedTemplate.NoProofing = True
   ' Selection.LanguageID = wdEnglishUS
   ' Selection.NoProofing = True
   ' Application.CheckLanguage = False
          End If
        End If
      End If
    End If
  End With
   SpellGrammarForm.Height = 580 '430 '390
  SpellGrammarForm.TypeOfChangeLabel.Caption = ""
  LoadSpellingForm
End Sub

Sub ChangeLanguage(n As Long) ' n=1 selection, 2=paragraph, 3=style, 4=default
Dim LL As Language
Dim DC As Dictionary
Dim LA As New Collection
Dim LLExist As String
Dim k As Long
Dim s As String
  languageSW = True
  BlankLowerForm
  With SpellGrammarForm
    .Height = 580
    .AcceptButton.Caption = "Accept language"
    .IgnoreButton.Visible = False
    .PromptListbox.Clear
    Select Case n
      Case 1
        .TypeOfChangeLabel = "Change language for selection"
        LLExist = .LanguageInSelectionLabel.Caption
      Case 2
       .TypeOfChangeLabel = "Change language for paragraph"
        LLExist = .LanguageInParaLabel.Caption
        Selection.Paragraphs(1).Range.Select
      Case 3
        .TypeOfChangeLabel = "Change language for style " & _
            Selection.Paragraphs(1).Style.NameLocal
        LLExist = .LanguageInStyleLabel.Caption
      Case 4
        .TypeOfChangeLabel = "Default language in template"
    End Select
  End With
   
  For Each LL In Application.Languages
    Set DC = Nothing
    Set DC = LL.ActiveSpellingDictionary
    If Not DC Is Nothing Then
      s = LL.NameLocal
      For k = 1 To LA.Count
        If LA(k) >= s Then
          LA.Add Item:=s, Before:=k
          GoTo KK
        End If
      Next k
        LA.Add Item:=s
KK:
    End If
  Next LL
 
  With SpellGrammarForm.LanguageListbox
    .Clear
    For k = 1 To LA.Count
      .AddItem LA(k)
    Next k
    For k = 0 To .ListCount - 1
      If .List(k) = LLExist Then
        .ListIndex = k
        Exit For
      End If
    Next k
  End With
  
End Sub

Sub SuppressionChange(n As Long) ' n=1 selection, 2=paragraph, 3=style
Dim aRange As Range
Dim bRange As Range
Dim aTest As Boolean
Dim aStyleName As String
Dim aStyle As Style
Dim s As String
Dim L As Long
Dim k As Long
Dim aParagraph As Paragraph
  BlankLowerForm
  languageSW = True
  SpellGrammarForm.AcceptButton.Caption = "Accept language"
  SpellGrammarForm.IgnoreButton.Visible = False
  If n = 3 Then
    Set aStyle = Selection.Paragraphs(1).Style
    aStyleName = aStyle.NameLocal
    aTest = aStyle.NoProofing
    s = "Style:   " & aStyleName
    If aTest Then
      s = s & " has spelling suppressed." & vbCrLf & "Do you want to remove spell checking suppression"
    Else
      s = s & vbCrLf & "Do you want to suppress spell checking for this style"
    End If
   ' If MsgBox(s, vbYesNo) = vbYes Then
    ShowMsge (s)
    If MsgReturn = 1 Then
      aStyle.NoProofing = Not aStyle.NoProofing
    End If
  Else
    If n = 1 Then
      If Selection.Range.Text = "" Then Selection.Paragraphs(1).Range.Select
      Set aRange = Selection.Range
    End If
    If n = 2 Then
      Set aRange = Selection.Paragraphs(1).Range
      aRange.Select
    End If
    L = aRange.NoProofing
    If L = wdUndefined Then
      If aRange.Paragraphs.Count > 50 Then
        s = "More than 50 paragraphs" & vbCrLf
      Else
        s = "Part checking suppressed" & vbCrLf
      End If

    End If
    s = s & "YES  to set spell checking" & vbCrLf & _
            "NO  to suppress spell checking"
   ' k = MsgBox(s, vbYesNoCancel)
    ShowMsge (s)
    If MsgReturn = 0 Then GoTo WW
    If MsgReturn = 1 Then
      L = False
    Else
      L = True
    End If
    If Selection.Paragraphs.Count > 25 Then ' multiparagraph selection
        SpellGrammarForm.SelectedProofLabel.Caption = "-- please wait --"
        DoEvents
        Application.ScreenRefresh
        For Each aParagraph In Selection.Range.Paragraphs
            aParagraph.Range.NoProofing = L
        Next aParagraph
     Else
        aRange.NoProofing = L
     End If
  End If
  Set aRange = Selection.Range
  k = ActiveDocument.SpellingErrors.Count ' to delay next statement
  Set bRange = ActiveDocument.GoTo(What:=wdGoToBookmark, Name:="\EndOfDoc")
  aRange.Select
  ActiveDocument.ShowSpellingErrors = True
WW:
  Application.ScreenRefresh
  LoadSpellingForm
End Sub

Sub ChangeSuppression(n As Long)
  DoEvents
  If n = 0 Then
    Selection.Range.NoProofing = True
  Else
    Selection.Range.NoProofing = False
  End If
  Application.ScreenRefresh
  LoadSpellingForm
End Sub

Sub go_ResetSpellChecking(n As Long)
Dim aRange As Range
Dim k1 As Long
'  MsgBox "There are bugs in VBA that prevent resetting individual words." & _

'  "Instead the 'Recheck Document' button in the following dialog box will reset all"
'  k1 = ActiveDocument.SpellingErrors.Count
'  With Dialogs(wdDialogToolsOptionsSpellingAndGrammar)
'    .Show
'    If k1 <> ActiveDocument.SpellingErrors.Count Then ErrorWordCount (1)
'  End With
  
    Application.ResetIgnoreAll
    ActiveDocument.SpellingChecked = False
    ActiveDocument.GrammarChecked = False
 
  
  
  
  LoadSpellingForm
  Exit Sub
  
 ' MsgBox "WARNING. Due to a bug in VBA the document needs" & vbCrLf & _
 '        "to be freshly loaded and/or Word re-opened before reset will work." & vbCrLf & _
 '        "It may be easier to use File > Options > Proofing > Recheck Document"
 ' Set aRange = Selection.Range
 ' If aRange.Start = aRange.End Then 'whole document ****
 '   Set aRange = ActiveDocument.StoryRanges(Selection.StoryType)
 ' End If
 ' Options.CheckSpellingAsYouType = False
 ' Application.ScreenRefresh

'  aRange.SpellingChecked = False
'  Application.ResetIgnoreAll ' must be followed by next statement
'  aRange.SpellingChecked = False
'
'  aRange.GrammarChecked = False
'
'  Options.CheckSpellingAsYouType = True
'  ActiveDocument.ShowSpellingErrors = True
'  Application.ScreenRefresh
'  LoadSpellingForm

End Sub

Sub reCheck(n As Long)
  ActiveDocument.SpellingChecked = False
  ActiveDocument.GrammarChecked = False
  ActiveDocument.ShowSpellingErrors = True
  If SpellGrammarForm.AlsoGrammarCheckbox Then 'Options.CheckGrammarWithSpelling = True Then
        ActiveDocument.CheckGrammar
  Else
        ActiveDocument.CheckSpelling
  End If
  LoadSpellingForm
End Sub

Sub HighlightErrors(n As Long)
Dim k As Long
Dim j As Long
Dim spError As Range
Dim chkWord
Dim rngStory As Word.Range
  ' clear existing highlighting
  ' ActiveDocument.Range.HighlightColorIndex = wdNoHighlight
  j = ActiveDocument.SpellingErrors.Count
  k = -1
  On Error GoTo nxtStory
  For Each rngStory In ActiveDocument.StoryRanges
    With rngStory
      If Len(rngStory.Text) > 2 And .SpellingErrors.Count > 0 Then
        Set spError = .SpellingErrors(1)
        Do
          Set chkWord = spError.SpellingErrors
          If chkWord.Count = 1 Then
            k = k + 1
            spError.HighlightColorIndex = wdYellow
            If k Mod 10 = 0 Then
              SpellGrammarForm.HighlightStatus.Caption = Trim(Str(k)) & " of" & Str(j) & " errors highlighted"
              DoEvents
            End If
          End If
          spError.Collapse wdCollapseEnd
          spError.MoveEnd wdWord, 1
        Loop Until spError.End = .End
       End If
     End With

nxtStory:
  Next rngStory
  Set spError = Nothing
  SpellGrammarForm.HighlightStatus.Caption = Str(k + 1) & " errors highlighted"
  
End Sub

Sub UnHighlightErrors(n As Long)
Dim rngStory As Word.Range
Dim oShp As Shape
  On Error Resume Next
  For Each rngStory In ActiveDocument.StoryRanges
    rngStory.HighlightColorIndex = wdNoHighlight
    If rngStory.ShapeRange.Count > 0 Then
       For Each oShp In rngStory.ShapeRange
         If oShp.TextFrame.HasText Then
           oShp.TextFrame.TextRange.HighlightColorIndex = wdNoHighlight
         End If
       Next oShp
     End If
  Next rngStory
  SpellGrammarForm.HighlightStatus.Caption = ""
End Sub

Sub MarkIgnoredText(n As Long)
Dim fontColor As Long
Dim lngChar As Long
Dim lngCharCount As Long
Dim rngStory As Word.Range
Dim rngChar As Range
Dim RRange As Range
Dim oShp As Word.Shape

  fontColor = wdTurquoise
  Set RRange = Selection.Range
  
  For Each rngStory In ActiveDocument.StoryRanges
    lngChar = 0
    lngCharCount = rngStory.Characters.Count
      For Each rngChar In rngStory.Characters
        lngChar = lngChar + 1
        If lngChar Mod 1000 = 1 Then
            SpellGrammarForm.HighlightStatus.Caption = "Story" & Str(rngChar.StoryType) & "  Character" & Str(lngChar) & _
             " of" & Str(lngCharCount)
             DoEvents
        End If
        
        If rngChar.NoProofing Then
          rngChar.HighlightColorIndex = fontColor
        End If
        If lngChar > lngCharCount Then Exit For
      Next rngChar
      
      On Error GoTo Err_Handler
          If rngStory.ShapeRange.Count > 0 Then
            SpellGrammarForm.HighlightStatus.Caption = "Checking textboxes"
            For Each oShp In rngStory.ShapeRange
              If oShp.TextFrame.HasText Then
                lngChar = 0
                lngCharCount = oShp.TextFrame.TextRange.Characters.Count
                For Each rngChar In oShp.TextFrame.TextRange.Characters
                  lngChar = lngChar + 1
                  If rngChar.NoProofing Then
                    rngChar.HighlightColorIndex = fontColor
                  End If
                Next rngChar
              End If
            Next oShp
      End If

SkipRange:
      On Error GoTo 0
  Next rngStory
  SpellGrammarForm.HighlightStatus.Caption = "noProofing highlighted"
  RRange.Select
  ActiveWindow.ScrollIntoView Selection.Range
  Exit Sub
Err_Handler:
  Resume SkipRange
End Sub

Sub ErrorWordCount(n As Long)
Dim j As Long
Dim k As Long
Dim s As String
Dim m As Long
Dim ss As String
Dim spError As Range
Dim chkWord
Dim inStory As Long
Dim revisionSW As Boolean
Dim ta As Single ' ???????????????
ta = Timer
  SpellGrammarForm.Show ' ????????????
  BlankLowerForm
  languageSW = False
  revisionSW = ActiveDocument.ShowRevisions
  If revisionSW Then
    ShowMsge ("Track change display" & vbCrLf & "will be turned off." & vbCrLf & _
      "Yes to proceed.")
    If MsgReturn <> 1 Then Exit Sub
'    If MsgBox("Revision display will be turned off by this routine" & vbCrLf & _
 '         " OK to proceed", vbOKCancel) = vbCancel Then Exit Sub
    ActiveDocument.ShowRevisions = False
  End If
  With SpellGrammarForm
    .AcceptButton.Caption = "Ignore all"
    .IgnoreButton.Caption = "Ignore one"
    .IgnoreButton.Visible = True
    .Height = 580
    .TypeOfChangeLabel = "Spelling error word count"
    .LanguageListbox.Clear
    .LanguageListbox.AddItem "Please wait..."
    .PromptListbox.Clear
  End With
  DoEvents
  If ActiveDocument.SpellingErrors.Count < 1 Then
    SpellGrammarForm.LanguageListbox.Clear
    SpellGrammarForm.LanguageListbox.AddItem "No spelling errors in document"
    Exit Sub
  End If
  ReDim wd(0)
  ReDim wdN(0)
  k = -1
  inStory = Selection.StoryType
 
  With ActiveDocument.StoryRanges(inStory)
    j = .SpellingErrors.Count
    If Len(.Text) > 2 And j > 0 Then
      Set spError = .SpellingErrors(1)
      Do
        Set chkWord = spError.SpellingErrors
        If chkWord.Count = 1 Then
          k = k + 1
          Call addToCount(spError, wd, wdN)
          If k Mod 10 = 0 Then
            SpellGrammarForm.HighlightStatus.Caption = Trim(Str(k)) & " individual words in error" '" of" & Str(j) & " errors found"
            DoEvents
          End If
        End If
        spError.Collapse wdCollapseEnd
        spError.MoveEnd wdWord, 1
      Loop Until spError.End = .End
    End If
  End With
  
  Set spError = Nothing
  SpellGrammarForm.HighlightStatus.Caption = ""
  With SpellGrammarForm.LanguageListbox
    .Clear
    If UBound(wd) = 0 Then
      .AddItem "No spelling errors"
    Else
      LoadErrorWords
    End If
  End With
' ActiveDocument.ShowRevisions = revisionSW
End Sub

Private Sub addToCount(ByRef sx As Range, ByRef wd() As String, ByRef wdN() As Long)
Dim j As Long
Dim i As Long
Dim L As Long
Dim m As Long
Dim k As Long
Dim s As String
Dim su As String
Dim ss As Long
  s = Trim(sx.Text) ' don't change sx as it might trigger a recalc
  k = UBound(wd)
  If k < 1 Then
     ReDim wd(1)
     ReDim wdN(1)
     wd(1) = s
     wdN(1) = 1
    Exit Sub
  End If
  ss = Asc(Left(s, 1))
  If (ss < 48) Or (ss > 57 And ss < 65) Or (ss > 90 And ss < 97) Then Exit Sub
  su = UCase(s)
  For j = 1 To k
    If su > UCase(wd(UBound(wd))) Then
      ReDim Preserve wd(UBound(wd) + 1)
      ReDim Preserve wdN(UBound(wdN) + 1)
      wd(UBound(wd)) = s
      wdN(UBound(wdN)) = 1
      Exit Sub
    Else
      For m = 1 To UBound(wd)
        If su = UCase(wd(m)) Then
          wdN(m) = wdN(m) + 1
          Exit Sub
        End If
        If su < UCase(wd(m)) Then ' shuffle down
          ReDim Preserve wd(UBound(wd) + 1)
          ReDim Preserve wdN(UBound(wdN) + 1)
          For L = UBound(wd) To m + 1 Step -1
            wd(L) = wd(L - 1)
            wdN(L) = wdN(L - 1)
          Next L
          wd(m) = s
          wdN(m) = 1
          '********** store range for first occurrance
          GoTo WW
        End If
      Next m
    End If
  Next j
WW:
End Sub

Function isInField(ByRef aRange As Range) As Range
Dim bRange As Range
Dim aField As Field
  If Selection.Fields.Count > 0 Then
    aRange.Start = aRange.End
    Set isInField = aRange
    Exit Function
  End If
  Set bRange = Selection.Range
  bRange.Expand wdParagraph

  For Each aField In bRange.Fields
    If Selection.InRange(aField.result) Then
      aRange.Start = bRange.End
      Set isInField = aRange
    End If
  Next aField

End Function

Sub LangListboxChange(n As Long)
Dim k As Long
Dim j As Long
Dim txt As String
Dim result As Boolean
Dim aRange As Range
Dim bRange As Range
Dim aField As Field
Dim spl As ProofreadingErrors
Dim wdd As Range
Dim sugg
Dim ss
Dim s As String
Dim inStory As Long


  SpellGrammarForm.GoToNextButton.Visible = False
  If languageSW Then Exit Sub
  
  k = SpellGrammarForm.LanguageListbox.ListIndex
  If k < 1 Then ' header in listbox
    ShowMsge ("Word in error not selected." & vbCrLf & "Any button to exit.")
    Exit Sub
  End If
  
  If wdN(k) > 1 Then
    SpellGrammarForm.GoToNextButton.Visible = True
    SpellGrammarForm.GoToNextButton.Caption = "Next"
  Else
    SpellGrammarForm.GoToNextButton.Visible = False
  End If
  
  txt = wd(k)
  inStory = Selection.StoryType
  Set aRange = ActiveDocument.StoryRanges(inStory)
  If n = 2 Then aRange.Start = Selection.End
  j = 0
Fagain:
  j = j + 1
  If j > 300 Then GoTo Ferror
  aRange.Select
  With Selection.Find
'  With aRange.Find
    .ClearFormatting
    .Text = "<" & txt & ">"
    .Replacement.Text = ""
    .Replacement.ClearFormatting
    .MatchWildcards = True
    .Execute Replace:=wdReplaceNone, Wrap:=wdFindContinue
  '  result = .Execute(Replace:=wdReplaceNone, Wrap:=wdFindContinue)
  End With
  Set aRange = Selection.Range
'  If result Then
  If aRange <> "" Then
    If aRange.SpellingErrors.Count = 0 Then
      If aRange.Information(wdWithInTable) Then
        Set aRange = aRange.Cells(1).Range
        aRange.Collapse direction:=wdCollapseEnd
        aRange.MoveStart unit:=wdCharacter, Count:=2
      Else
        If isInField(aRange) Is Nothing Then
          ' aRange.Start = aRange.End
          MsgBox "This word has been accepted or has a different dictionary applied"
        End If
      End If
   '   aRange.End = ActiveDocument.StoryRanges(inStory).End
   '   GoTo Fagain  ' modifies 1Sep17
    End If
  ' result may be a noproofing word
    aRange.Select
    DoEvents
    Set wdd = aRange
    On Error Resume Next
    Set sugg = wdd.GetSpellingSuggestions
    
    With SpellGrammarForm.PromptListbox
      .Clear
      .AddItem "    none"
      If sugg.Count <> 0 Then
        For Each ss In sugg
          .AddItem ss.Name
        Next ss
      End If
      If k <= .ListCount Then
        .ListIndex = k
      Else
        .ListIndex = 0
      End If
    End With
  Else
Ferror:
    SpellGrammarForm.PromptListbox.Clear
    ShowMsge ("Cannot find misspelt word." & vbCrLf & vbCrLf & "Any button to exit")
 '   MsgBox "Cannot find misspelt word " & txt
    aRange.Collapse
  End If
  aRange.Select
  ActiveWindow.ScrollIntoView Selection.Range
  
  ActiveWindow.SmallScroll up:=5
   ActiveWindow.ScrollIntoView Selection.Range  ' needed if moved to next page
  
  DoEvents

End Sub

Private Sub LoadErrorWords()
Dim j As Long
Dim inStory As Long
Dim s As String
   SpellGrammarForm.SpellCountLabel.Caption = Str(ActiveDocument.SpellingErrors.Count)
   inStory = Selection.StoryType
   s = Trim(Str(UBound(wd)))
   If inStory = 1 Then
     s = s & " unique words in body"
   Else
     s = s & " separate words in story " & Str(inStory)
   End If
   With SpellGrammarForm.LanguageListbox
     .Clear
     .AddItem s
     For j = 1 To UBound(wd)
       .AddItem wd(j) & Str(wdN(j))
     Next j
   End With
   SpellGrammarForm.PromptListbox.Clear
End Sub

Sub IgnoreOrReplace(n As Long) ' n=1 ignore, n=2 ignore all
Dim suggestWrd As String
Dim Wrd As String
Dim L As Long
  If Not Options.CheckSpellingAsYouType Then
    ShowMsge ("Check Spelling as you type" & "must be activated." & _
      "Any button to exit")
 '   MsgBox "To accept Check Spelling as you type must be activated"
    Exit Sub
  End If
  With SpellGrammarForm
    L = .LanguageListbox.ListIndex
    If L < 1 Then
   '   MsgBox "No error word has been selected:"
      ShowMsge ("No error word has been selected." & vbCrLf & vbCrLf & _
        "Any button to exit.")
      Exit Sub
    End If
    If .PromptListbox.ListIndex < 1 Then ' no suggestions
       On Error GoTo CTLerr
      If n = 1 Then
        CommandBars("Spelling").Controls("Ignore").Execute
        wdN(L) = wdN(L) - 1
      Else
        If n = 2 Then
          CommandBars("Spelling").Controls("Ignore All").Execute
          wdN(L) = 0
        End If
      End If
      LoadErrorWords
      Selection.MoveLeft unit:=wdWord, Count:=1
      If L + 4 > .LanguageListbox.ListCount Then
        .LanguageListbox.ListIndex = .LanguageListbox.ListCount
      Else
        .LanguageListbox.ListIndex = L + 4
       End If
      .LanguageListbox.ListIndex = L
      Exit Sub
CTLerr:
      On Error Resume Next
      ActiveDocument.CheckSpelling
      On Error GoTo 0
      If n = 1 Then
        wdN(L) = wdN(L) - 1
      Else
        wdN(L) = 0
      End If
      LoadErrorWords
      Exit Sub
    End If
    
    ' replace with suggestion
    Wrd = wd(L)
    L = .PromptListbox.ListIndex
    suggestWrd = .PromptListbox.List(L)
    If Wrd <> Selection.Text Then
     ShowMsge ("No error word has been selected." & vbCrLf & vbCrLf & _
        "Any button to exit.")
   '   MsgBox "error word has not been selected"
      Exit Sub
    End If
    L = .LanguageListbox.ListIndex
    If n = 1 Then ' accept one
      Selection.Text = suggestWrd
      wdN(L) = wdN(L) - 1
    Else ' accept all
      Selection.Collapse
      With Selection.Find
        .ClearFormatting
        .Text = "<" & Wrd & ">"
        .Replacement.Text = suggestWrd
        .MatchWildcards = True
        .Execute Replace:=wdReplaceAll, Wrap:=wdFindContinue
      End With
      wdN(L) = 0
    End If
  
 '   Selection.MoveLeft unit:=wdWord, Count:=1
 '   L = .LanguageListbox.ListIndex
 '   If L + 4 > .LanguageListbox.ListCount Then
 '       .LanguageListbox.ListIndex = .LanguageListbox.ListCount - 1
 '   Else
 '      .LanguageListbox.ListIndex = L + 4
 '   End If
 '   .LanguageListbox.ListIndex = L
    LoadErrorWords
 '   .LanguageListbox.ListIndex = L
  End With
End Sub

Sub PromptChange(n As Long)
  With SpellGrammarForm
    If .PromptListbox.ListIndex = 0 Then
      .AcceptButton.Caption = "Ignore all"
      .IgnoreButton.Caption = "Ignore one"
    Else
      .AcceptButton.Caption = "Suggestion Accept all"
      .IgnoreButton.Caption = "Suggestion Accept one"
    End If
  End With
End Sub


Attribute VB_Name = "SpellGrammarForm"
Attribute VB_Base = "0{B02CB2BF-A807-42D7-9FA8-A5144E3D03BE}{2D04A396-2E12-41CF-8EB4-550F62DD8271}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub AcceptLanguageButton_Click()
  AcceptLanguage (1)
End Sub

Private Sub CancelOptionButton_Click()
  AcceptOption (0)
End Sub
Private Sub IgnoreButton_Click()
  AcceptOption (1)
End Sub
Private Sub AcceptButton_Click()
  AcceptOption (2)
End Sub

Private Sub EdititDictsButton_Click()
  GO_Spelling (1)
End Sub

Private Sub GoToNextButton_Click()
  LangListboxChange (2)
End Sub

Private Sub AsYouTypeCheckbox_Click()
  setAsYouType (1)
End Sub

Private Sub AutoLanguageCheckbox_Click()
  setAutoLanguage (1)
End Sub

Private Sub ChangeDefaultLangButton_Click()
  ChangeLanguage (4)
End Sub

Private Sub ChangeLangParaButton_Click()
  ChangeLanguage (2)
End Sub

Private Sub ChangeLangSelectionButton_Click()
  ChangeLanguage (1)
End Sub

Private Sub ChangeLangStyleButton_Click()
  ChangeLanguage (3)
End Sub

Private Sub ChangeParaButton_Click()
  SuppressionChange (2)
End Sub

Private Sub ChangeSelectedButton_Click()
  SuppressionChange (1)
End Sub

Private Sub ChangeStyleButton_Click()
  SuppressionChange (3)
End Sub

Private Sub CommandButton1_Click()
  reCheck (1)
End Sub

Private Sub CommandButton2_Click()
  MarkIgnoredText (1)
End Sub

Private Sub ErrorCountButton_Click()
  ErrorWordCount (1)
End Sub

Private Sub HideSpellingErrorsCheckbox_Click()
  SetHideSpellingErrors (1)
End Sub

Private Sub HighlightErrorsButton_Click()
  HighlightErrors (1)
End Sub

Private Sub LanguageListbox_Click()
 LangListboxChange (1)
End Sub

Private Sub PromptListbox_Click()
  PromptChange (1)
End Sub

Private Sub RefreshSpellButton_Click()
   refreshForm (1)
End Sub

Private Sub ResetSpellButton_Click()
  go_ResetSpellChecking (1)
End Sub

Private Sub SpellCancelButton_Click()
  SpellGrammarForm.hide
End Sub

Private Sub SpellHelpButton_Click()
  SpellHelpText (1)
End Sub

Private Sub UnHighlightButton_Click()
  UnHighlightErrors (1)
End Sub

Attribute VB_Name = "SpellHelpModule"
Option Explicit

Sub SpellHelpText(n As Long)
Dim s As String
    HelpForm.Caption = "Spell Checking - Help"
    s = "HOW WORD SPELL CHECKS" & vbCrLf & _
       "The spell checker runs in background and cannot be turned off but what it checks and displays can be controlled. " & _
       "The spell checker maintains a collection of errors that can be accessed from the Review > Spelling and Grammar command. Also they can be read in VBA even if not displayed in the document." & vbCrLf & vbCrLf & _
       "Errors are marked in the document with a wriggly underline if the following conditions are met:" & vbCrLf & _
       "  ""Check spelling as you type"" is on" & vbCrLf & _
       "  There are less than 1400 errors in the document" & vbCrLf & _
       "  ""Hide spelling errors in this document"" is off" & vbCrLf & _
       "  Individual words are not marked to be ignored" & vbCrLf & _
       "  Blocks of text are not marked with NoProofing" & vbCrLf & _
       "  The paragraph style does not have ""Do not check spelling or grammar"" set." & vbCrLf & _
       "  Some (but not all) fields are not spell chedked"
    
    s = s & vbCrLf & vbCrLf & "SPELL CHECKING LARGE DOCUMENTS.  Will be slow specially in compatibility mode" & vbCrLf
    s = s & "If there are too many spelling and grammar errors (approximately 1400 errors) then the message ""Too Many Spelling or Grammatical Errors|fffd|"" appears and ""Hide spelling errors..."" is turned on so that the errors are not marked in the document. " & _
     "However, the errors are still stored in the SpellingErrors collection." & vbCrLf & _
     "If there are too many errors to display then they can still be processed by this macro. To display:" & vbCrLf & _
     "1.  Set blocks of text to NoProofing so that there are fewer than 1400 errors in the remaining text" & vbCrLf & _
     "2.  Ignore or 'ignore all' is applied to individual errors until less than 1400 remain."
    
    s = s & vbCrLf & vbCrLf & "LANGUAGES" & vbCrLf & _
      "Individual words, paragraphs or blocks of text can be checked with different languages." & _
      " Word does not show which language is used to check particular parts of the text. This tool shows the languages used for the selected text, the first paragraph of the selection and the paragraph's style." & vbCrLf
    
    HelpForm.Helptxt0.Caption = s
    
    
    s = "SHOW AND CORRECT SPELLING ERRORS" & vbCrLf & _
    "Display sorted list of spelling errors and suggestions. Clicking an entry will jump to the word in the document." & vbCrLf
    s = s & vbCrLf & "RESET IGNORES BUTTON" & vbCrLf & _
    "Removes ignore flags and forces a new spelling check. Because of a VBA bug this uses the Word menu." & vbCrLf & vbCrLf
    s = s & "RE-SPELLCHECK BUTTON" & vbCrLf & "Keeps ignore flags on individual words and forces a new spelling check."
    HelpForm.HelpTxt4.Caption = s
    
    s = "50 PARAGRAPH LIMIT" & vbCrLf & _
      "Word menus have a limit of 50 paragraphs that can have NoProofing changed at a time with no indication that the change has failed. This tool has no limits on the selected text that can have NoProofing changed."
 
    s = s & vbCrLf & vbCrLf & "SPELLING ERRORS NOT SHOWING" & vbCrLf & _
    "If spelling errors are not marked in all or part of the document then the following might help:"
    s = s & vbCrLf & "*  Make sure that 'Check spelling as you type' is ticked and 'Hide spelling errors' is unticked." & vbCrLf
    s = s & "*  If there are too many spelling errors then try to reduce to less than 1400 by:" & vbCrLf
    s = s & "  - mark words in error to be ignored using the Review > Spelling & Grammar command, or:" & vbCrLf & _
      "  - select a block of text, click Refresh and click the Change button for Selected text" & vbCrLf
    s = s & "  After the number of spelling errors has been reduced, untick 'Hide spelling errors' to display the remaininder. "
    s = s & vbCrLf & "*  If there are parts of the document where spell checking is not working then display their the check status."
    s = s & vbCrLf & "*  Click the Reset button to remove all ignore flags and re-start spell checking from scratch."
    
    HelpForm.HelpTxt5.Caption = s
 
    HelpForm.Show
      
 End Sub

Sub DictHelp(n As Long)
Dim s As String
  HelpForm.Caption = "Custom Dictionaries - Help"
  s = "LANGUAGE AND CUSTOM DICTIONARIES" & vbCrLf
  s = s & "The language dictionaries are common to all Microsoft Office applications however custom dictionaries and speller settings are specific to the individual user and in some cases to the individual document. Furthermore, there are differences between office versions in the way custom dictionaries are setup and used." & vbCrLf
  s = s & "Therefore, a document may raise different spelling results if opened by a different user or on a different computer." & vbCrLf
  s = s & "Language dictionaries cannot be edited, however Custom and exclude dictionaries that modify the spell checking can be edited and words added or deleted." & vbCrLf
  s = s & vbCrLf & "CUSTOM DICTIONARIES" & vbCrLf & "There can be more than one custom dictionary and an individual custom dictionary may apply to all or to an individual language. One dictionary for each language and one for 'all' languages is flagged as 'default'.  The Custom Dictionaries dialog box at Options > Proofing > Custom Dictionaries is used to manage them."
  s = s & vbCrLf & vbCrLf & "When a marked misspelt word is right clicked and 'Add to Dictionary' is selected then the word is added to a custom dictionary. This menu item is only available if there is a default custom dictionary for the current language dictionary or a default 'all' custom dictionary. If both are present then the language one is used. Note that current language dictionary is the one that applies to the selected text, different language dictionaries can be applied to different parts of the text and even to different words in a sentence."
  s = s & vbCrLf & vbCrLf & "EXCLUDE DICTIONARIES" & vbCrLf & "These are .lex files that contain words that will always raise a spelling error even if the words are in the spelling directory. There is one .lex file for each language, they can only be modified with a text editor."
  s = s & vbCrLf & vbCrLf & "DIFFERENCES BETWEEN OFFICE VERSIONS.  The MS Office speller has a number of idiosyncrasies and straight out bugs. The major difference between 2010 and 2016 is in the way custom dictionaries are handled."
  HelpForm.Helptxt0.Caption = s
  s = "WHICH CUSTOM DICTIONARIES SHOULD YOU USE" & vbCrLf
  s = s & "WORD 2010 and below. The default dictionary CUSTOM.DIC is applicable to all languages. Other dictionaries can be created and are flagged as 'all' or to a specific language. In the Custom Dictionary dialog box Individual dictionaries are flagged with a tick if they ae active. Unfortunately these tick boxed cannot be accessed in VBA.  Custom dictionaries are text files and are stored usually in the user's UProof folder - although they can be stored anywhere for example on a server. Language custom dictionaries have as the first entry '#LID xxxx' where xxxx is a number identifying the language.  In typical MS fashion the xxxx is decimal whereas the exclude file for the same language uses hex characters."
  HelpForm.HelpTxt4.Caption = s
  s = "In use, the appropriate custom directories are ticked to make them active and the speller uses all the words in the active directories. The 'Add to dictionary' command will add the word to either the default 'all' or the default language custom dictionary. It may not be obvious which is in use unless the user is aware of what language is applied to the relevant text."
  s = s & vbCrLf & vbCrLf & "WORD 2016 and above. The default 'all' dictionary 'RoamingCustom.dic' is stored in a system folder and cannot be deleted or applied to a language. It can have words added or deleted and be flagged as inactive. When a language is activated a custom dictionary file 'default.dic' is created in a language specific folder at C:\Users\Ken\AppData\Roaming\Microsoft\Spelling\."
  s = s & " It is not clear what these dictionaries do as they cannot be deleted or edited, however additional dictionaries can be added to the language folder. 'Add to dictionary' words are added to the default 'all' dictionary unless there is an active custom language dictionary (the 'default.dic' dictionary doesn't count and the name is confusing)."

   HelpForm.HelpTxt5.Caption = s
  
  HelpForm.Show
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "WindowsParameters"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars


Sub ConvertPixelsToPoints(ByRef X As Single, ByRef y As Single)
    Dim hDC As Long
    Dim RetVal As Long
    Dim XPixelsPerInch As Long
    Dim YPixelsPerInch As Long

    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    X = X * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
    
 ' MsgBox "points x=" & x & " y=" & y
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub




' InQuest injected base64 decoded content
' yj+t
' jZ N
' '-]u
' Z+aJ

INQUEST-PP=macro
