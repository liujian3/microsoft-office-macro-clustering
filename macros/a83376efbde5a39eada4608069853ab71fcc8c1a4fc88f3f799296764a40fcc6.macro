Attribute VB_Name = "Module1"
Dim Numbers(50) As Integer
Dim EmpID(50) As String
Dim NoOfAssesors As Integer




Sub AssignFindRef()
Attribute AssignFindRef.VB_ProcData.VB_Invoke_Func = " \n14"
'On Error Resume Next
'
' AssignFindRef Macro
'

'
'    Range("AxTable1[Finding reference]").Select
 '   Selection.ListObject.ListRows.Add AlwaysInsert:=True
  '  Range("A10").Select
   ' ActiveCell.FormulaR1C1 = "sww"
'    Range("B9").Select
 '   ActiveCell.FormulaR1C1 = "qww"
  '  Range("B9").Select
   ' ActiveCell.FormulaR1C1 = "qw"
    'Range("A9").Select
   ' ActiveCell.FormulaR1C1 = "xxc"


Dim tbl As ListObject
'Dim tbl1 As ListObject
Dim x As Long
Dim Project As String
Dim CaseId As String
Dim PersonID As String
Dim PersonName As String
Dim dels(500) As Integer
Dim noofdels As Integer

' This is nasty but it is quick and dirty
AssignFindRef2

NoOfAssesors = 0
noofdels = 0
SortWorker

'LoadState
GetState


Range("B4").Select
Project = ActiveCell.FormulaR1C1

'Range("L1").Select
'PersonID = ActiveCell.Value

Range("L2").Select
CaseId = ActiveCell.Value

If Project <> "" Then
'Set tbl1 = Worksheets("Support2").ListObjects("Cases")
 ' For x = 1 To tbl1.ListRows.Count
 
 '   tbl1.DataBodyRange(x, 1).Select
 '   If ActiveCell.FormulaR1C1 = Project Then
  '  tbl1.DataBodyRange(x, 2).Select
  '  CaseId = ActiveCell.FormulaR1C1
  '  End If
 ' Next x


Set tbl = ActiveSheet.ListObjects("AxTable1")


'Loop Through Each Column in Table
  'For x = 1 To tbl.ListColumns.Count
   ' tbl.ListColumns(x).Range.ColumnWidth = 8
  'Next x

'Loop Through Every Row in Table
  'For x = 1 To tbl.Range.Rows.Count
   ' tbl.Range.Rows(x).RowHeight = 20
  'Next x
  
'Loop Through Each DataBody Row in Table
  For x = 1 To tbl.ListRows.count
    'tbl.ListRows(x).Range.RowHeight = 20
    tbl.DataBodyRange(x, 2).Select
PersonName = ActiveCell.Value
If PersonName = "" Then
 '   noofdels = noofdels + 1
  '  dels(noofdels) = x
Else

    PersonID = GetID(PersonName)


    tbl.DataBodyRange(x, 1).Select
    If ActiveCell.FormulaR1C1 = "" Then
    
    ActiveCell.FormulaR1C1 = Project & "-" & PersonID & "-" & getEmpNo(PersonID)
    End If
    
        tbl.DataBodyRange(x, 13).Select
    ActiveCell.FormulaR1C1 = "UKAS"
            tbl.DataBodyRange(x, 14).Select
   ' ActiveCell.FormulaR1C1 = Ca
                tbl.DataBodyRange(x, 15).Select
    ActiveCell.FormulaR1C1 = PersonID
End If
        
  Next x
End If

If noofdels > 0 Then
For x = 1 To noofdels


tbl.ListRows(dels(x) - (x - 1)).Delete
Next x
End If
'tbl.Refresh
'tbl.DataBodyRange(x, 1).Select

    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
    
Range("A9").Select


'SaveState

ActiveWorkbook.Save

End Sub


Sub AssignFindRef2()
    On Error GoTo EndMe
    Range("A9:A999").ClearContents
    
    Dim a_value As String
    Dim b_value As String
    Dim s As String
    Dim empl_id As String
    Dim i As Integer
    Dim cnt As Integer
    Dim proj As String
    Dim PersonName As String
    Dim x As Long
    Dim ret As String
    Dim rng As Range

    Dim dels(500) As Integer
    Dim noofdels As Integer
    
    proj = Range("B4").Value

    i = 9
       
    Do While True
        b_value = Range("B" + CStr(i)).Value
        
        If Len(b_value) = 0 Then Exit Do
        
        a_value = Range("A" + CStr(i)).Value
        
        If Len(a_value) > 0 Then
            i = i + 1
        Else
           ' empl_id = ExtractId2(b_value)
            
            empl_id = Range("O" + CStr(i)).Value
            cnt = 1
            
            Do While True
                a_value = Range("A" + CStr(i)).Value
                s = Range("B" + CStr(i)).Value
                If Len(s) = 0 Then
                    i = 9
                    Exit Do
                End If
 
                If Len(a_value) = 0 And b_value = s Then
                    ' PersonID = GetID2(s)
                    Set rng = Worksheets("Support3").Range("B:C")
                    ret = WorksheetFunction.VLookup(b_value, rng, 2, False)

                    Range("M" + CStr(i)).Value = "UKAS"
                    Range("O" + CStr(i)).Value = ret
                    empl_id = ret
                    Range("A" + CStr(i)).Value = proj + "-" + empl_id + "-" + Format(cnt, "000")
                    cnt = cnt + 1
                End If
                i = i + 1
            Loop
        End If
    Loop
    Range("A" + CStr(i - 1)).Select

EndMe:

Columns("M:O").Select
Selection.EntireColumn.Hidden = True
  
   
End Sub

Private Function SaveState() As Boolean
Dim ret As String
Dim wkstmp As Worksheet
Dim rng As Range

'Set rng =
'Worksheet("Sheet1").Range("I1").FormulaR1C1

'rng.Select
Worksheets("Sheet1").Range("I1").FormulaR1C1 = NoOfAssesors
If NoOfAssesors > 0 Then

For n = 1 To NoOfAssesors
'Worksheet("Sheet1").Range("I" & (n + 1)).Select
If EmpID(n) <> "" Then
Worksheets("Sheet1").Range("I" & (n + 1)).FormulaR1C1 = EmpID(n)
'wkstmp.Range("J" & (n + 1)).Select
Worksheets("Sheet1").Range("J" & (n + 1)).FormulaR1C1 = Numbers(n)
End If

Next
End If

End Function


Private Function GetState() As Boolean
Dim ret As String
Dim wkstmp As Worksheet
Dim rng As Range
Dim tbl As ListObject
Dim id As String
Dim empl As String
Dim idno As Integer

Set tbl = ActiveSheet.ListObjects("AxTable1")

'rng.Select
NoOfAssesors = 0
If tbl.ListRows.count > 0 Then

For n = 1 To tbl.ListRows.count

tbl.DataBodyRange(n, 1).Select
id = ActiveCell.Value
If (id <> "") Then
idno = Right(id, 3)
tbl.DataBodyRange(n, 15).Select
empl = ActiveCell.Value
setEmpNo empl, idno
End If
'Worksheet("Sheet1").Range("I" & (n + 1)).Select
'EmpID(n) = Worksheets("Sheet1").Range("I" & (n + 1)).FormulaR1C1
'wkstmp.Range("J" & (n + 1)).Select
'Numbers(n) = Worksheets("Sheet1").Range("J" & (n + 1)).FormulaR1C1

Next
End If

End Function


Private Function GetID(inName As String) As String
Dim ret As String
Dim rng As Range

Set rng = Worksheets("Support3").Range("B:C")

'ret = Application.VLookup(inName, Worksheets("Support").ListObjects("Resources"), 2, False)
ret = WorksheetFunction.VLookup(inName, rng, 2, False)


GetID = ret
End Function


Private Function GetMe(iIn As Long) As String
Dim ret As String

If iIn < 10 Then
ret = "00" & iIn
End If

If iIn > 9 And iIn < 100 Then
ret = "0" & iIn
End If

If iIn > 99 Then
ret = iIn
End If

GetMe = ret




End Function



Private Function getEmpNo(inEMpid As String) As String

Dim ret As Long
ret = 0

If NoOfAssesors > 0 Then
For n = 1 To NoOfAssesors
If EmpID(n) = inEMpid Then
ret = Numbers(n) + 1
Numbers(n) = ret
End If

Next

If ret = 0 Then
NoOfAssesors = NoOfAssesors + 1
EmpID(NoOfAssesors) = inEMpid
ret = 1
Numbers(NoOfAssesors) = 1

End If

Else
NoOfAssesors = NoOfAssesors + 1
EmpID(1) = inEMpid
ret = 1
Numbers(1) = 1


End If
getEmpNo = GetMe(ret)

End Function



Private Function setEmpNo(inEMpid As String, inValue As Integer)

Dim ret As Long
ret = 0

If NoOfAssesors > 0 Then
For n = 1 To NoOfAssesors + 1
If EmpID(n) = inEMpid Then
ret = Numbers(n) + 1
Numbers(n) = ret
End If

Next

If ret = 0 Then
NoOfAssesors = NoOfAssesors + 1
EmpID(NoOfAssesors) = inEMpid
ret = 1
Numbers(NoOfAssesors) = 1

End If

Else
NoOfAssesors = NoOfAssesors + 1
EmpID(1) = inEMpid
ret = 1
Numbers(1) = 1


End If


End Function
Attribute VB_Name = "Module2"
Sub SpellCheck()
'Sheet1.Cells.CheckSpelling

Sheet1.Range("AXTable1").CheckSpelling

ActiveWorkbook.Save

End Sub
Attribute VB_Name = "Module3"
Sub AddLines()
Set tbl = ActiveSheet.ListObjects("AxTable1")

For x = 1 To 100
tbl.ListRows.Add
Next x

Sheet1.AssignValRange
  
End Sub
Attribute VB_Name = "Module4"
Sub HideCols()
Attribute HideCols.VB_ProcData.VB_Invoke_Func = " \n14"
'
' HideCols Macro
'

'
    Columns("M:O").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub SortWorker()
Attribute SortWorker.VB_ProcData.VB_Invoke_Func = " \n14"
'
' SortWorker Macro
'

'

    ActiveWorkbook.Worksheets("Support3").ListObjects("Table5").Sort.SortFields. _
        Clear
    ActiveWorkbook.Worksheets("Support3").ListObjects("Table5").Sort.SortFields. _
        Add Key:=Range("Table5[[#All],[Name]]"), SortOn:=xlSortOnValues, Order:= _
        xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Support3").ListObjects("Table5").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Attribute VB_Name = "Module5"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    Cells.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlUp
    Range("A1").Select
End Sub
Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'

'
    Sheets("Backup").Select
    Cells.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlUp
    Sheets("Improvement action request data").Select
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



'Private Sub Worksheet_Change(ByVal Target As Range)

  ' selectedVal = Target.Value

   ' If Target.Column = 2 Then
    '    selectedNum = Application.VLookup(selectedVal, Worksheets("Support3").Range("Table5"), 2, False)

     '   If Not IsError(selectedNum) Then
      '      Target.Value = selectedNum
       ' End If

    'End If
   ' MsgBox "hello"
'End Sub

Sub AssignValRange()

Dim Lrow As Single
Dim Lrow2 As Single

Dim j As Single

Dim ws As Worksheet
Dim range1 As Range, rng As Range

Lrow2 = Worksheets("Improvement action request data").Range("A" & Rows.count).End(xlUp).Row

Set ws = ThisWorkbook.Worksheets("Support3")
Lrow = Worksheets("Support3").Range("A" & Rows.count).End(xlUp).Row
Set range1 = ws.Range("B2:B" + CStr(Lrow))

j = 9

Do While j <= Lrow2

 With Range("B" + CStr(j)).Validation
    .Delete
    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
        Formula1:="='" & ws.Name & "'!" & range1.Address
 End With
 
j = j + 1
Loop

End Sub


Sub sbChangeColumnWidth()

Columns("A").ColumnWidth = Worksheets("ColW").Range("B1")
Columns("B").ColumnWidth = Worksheets("ColW").Range("B2")
Columns("C").ColumnWidth = Worksheets("ColW").Range("B3")
Columns("D").ColumnWidth = Worksheets("ColW").Range("B4")
Columns("E").ColumnWidth = Worksheets("ColW").Range("B5")
Columns("F").ColumnWidth = Worksheets("ColW").Range("B6")
Columns("G").ColumnWidth = Worksheets("ColW").Range("B7")
Columns("H").ColumnWidth = Worksheets("ColW").Range("B8")
Columns("I").ColumnWidth = Worksheets("ColW").Range("B9")
Columns("J").ColumnWidth = Worksheets("ColW").Range("B10")
Columns("K").ColumnWidth = Worksheets("ColW").Range("B11")
Columns("L").ColumnWidth = Worksheets("ColW").Range("B12")

End Sub


Sub Backup()

Dim copyfromrange As Range
Dim copytorange As Range
On Error GoTo Errorcatch

'Set copyfromrange = Worksheets("Improvement action request data").Range("AxTable1")
'copyfromrange.Copy
'Set copytorange = Worksheets("Backup").Range("A1")
'Paste
 Application.ScreenUpdating = False

  Sheets("Backup").Cells.ClearContents


 Set copyfromrange = Worksheets("Improvement action request data").Range("AxTable1")
copyfromrange.Copy
Set copytorange = Worksheets("Backup").Range("A1")
copytorange.PasteSpecial xlPasteAll
 Application.ScreenUpdating = True
Exit Sub
Errorcatch:
MsgBox Err.Description
End Sub



Sub Restore()

Dim copyfromrange As Range
Dim copytorange As Range
Dim tbl As ListObject
Dim cel As Range
Dim SearchResult As Range


Dim b As Range

On Error GoTo Errorcatch

Application.Calculation = xlCalculationManual
 Application.ScreenUpdating = False

'need to copy the data and add to the table
Set copyfromrange = getBlank()
Set tbl = ListObjects("AxTable1")

    For Each b In copyfromrange.Rows
    Dim newrow As ListRow
    Dim n As Integer
    n = 1
    If b.Cells(1, 1) <> "" Then
    Set SearchResult = Sheets(1).Range("AxTable1[Finding reference]").Find(What:=b.Cells(1, 1).Value, LookIn:=xlValues, _
    LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False)
    End If
    
    If Not SearchResult Is Nothing Then
    'If SearchResult <> "" Then
    
    MsgBox SearchResult & " already exists in the list"
    
    
        Else
    Set newrow = tbl.ListRows.Add
    With newrow
    For Each cel In b.Cells
        .Range(n) = cel.Value
       ' .Range(2) = b.Range(2)
       ' .Range(3) = b.Range(3)
       ' .Range(4) = b.Range(4)
       ' .Range(5) = b.Range(5)
       ' .Range(6) = b.Range(6)
       ' .Range(7) = b.Range(7)
       ' .Range(8) = b.Range(8)
       ' .Range(9) = b.Range(9)
       n = n + 1
        Next
        
    End With
        End If
        'End If
    
    Next

' Set copytorange = Worksheets("Improvement action request data").Range("AxTable1")
'copyfromrange.Copy
'Set copytorange = Worksheets("Backup").Range("A1")
'copytorange.PasteSpecial xlPasteAll
 Application.ScreenUpdating = True
 Application.Calculation = xlCalculationAutomatic
Exit Sub
Errorcatch:
MsgBox Err.Description
 Application.ScreenUpdating = True
 Application.Calculation = xlCalculationAutomatic
End Sub


Function getBlank() As Range

    Dim sourceCol As Integer, rowCount As Integer, currentRow As Integer
    Dim currentRowValue2 As String
    Dim currentRowValue3 As String
    Dim currentRowValue4 As String
    Dim currentRowValue5 As String
    Dim currentRowValue6 As String
    Dim currentRowValue7 As String
    Dim currentRowValue8 As String

    sourceCol = 2   'column F has a value of 6
    rowCount = Worksheets("Backup").Cells(Rows.count, sourceCol).End(xlUp).Row
If rowCount > 0 Then
Set getBlank = Worksheets("Backup").Range("A1:O" & rowCount)
    'for every row, find the first blank cell and select it
 '   For currentRow = 1 To rowCount
  '      currentRowValue2 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
   '     currentRowValue3 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
    '    currentRowValue4 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
     '   currentRowValue5 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
      '  currentRowValue6 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
       ' currentRowValue7 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
        'currentRowValue8 = Worksheets("Backup").Cells(currentRow, sourceCol).Value
        
        
        
        
'        If currentRow > 1 And _
 '       (IsEmpty(currentRowValue2) Or currentRowValue2 = "") And _
  '      (IsEmpty(currentRowValue3) Or currentRowValue3 = "") And _
   '     (IsEmpty(currentRowValue4) Or currentRowValue4 = "") And _
    '    (IsEmpty(currentRowValue5) Or currentRowValue5 = "") And _
     '   (IsEmpty(currentRowValue6) Or currentRowValue6 = "") And _
      '  (IsEmpty(currentRowValue7) Or currentRowValue7 = "") And _
       ' (IsEmpty(currentRowValue8) Or currentRowValue8 = "") _
        'Then
'            Set getBlank = Worksheets("Backup").Range("A1:O" & currentRow - 1)
 '           Exit Function
  '      End If
        
   '     If rowCount = currentRow Then
    '        Set getBlank = Worksheets("Backup").Range("A1:O" & currentRow)
     '       Exit Function
      '  End If
   ' Next
End If
End Function


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)

Application.EnableEvents = False
  SortWorker
  Sheet1.AssignValRange
  Sheet1.sbChangeColumnWidth
Application.EnableEvents = True

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
