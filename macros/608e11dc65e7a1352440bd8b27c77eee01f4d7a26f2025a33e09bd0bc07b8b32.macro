Attribute VB_Name = "ArrayHelpers"
Sub QuickSortArray(vArray As Variant, numColumns As Long, orderByCol As Long, inLow As Long, inHi As Long)
'*************************************************************
' Subroutine to order an array and pass back the ordered array
'*************************************************************

    Dim pivot   As Variant
    Dim tmpSwap As Variant
    Dim tmpLow  As Long
    Dim tmpHi   As Long
    Dim dCntr   As Long
    
    ReDim tmpSwap(1 To 1, 1 To numColumns)
    
    tmpLow = inLow
    tmpHi = inHi

  pivot = vArray((inLow + inHi) \ 2, orderByCol)

  While (tmpLow <= tmpHi)
     While (vArray(tmpLow, orderByCol) < pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot < vArray(tmpHi, orderByCol) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        For dCntr = 1 To numColumns
            tmpSwap(1, dCntr) = vArray(tmpLow, dCntr)
            vArray(tmpLow, dCntr) = vArray(tmpHi, dCntr)
            vArray(tmpHi, dCntr) = tmpSwap(1, dCntr)
        Next dCntr
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If
  Wend

  If (inLow < tmpHi) Then QuickSortArray vArray, numColumns, orderByCol, inLow, tmpHi
  If (tmpLow < inHi) Then QuickSortArray vArray, numColumns, orderByCol, tmpLow, inHi

End Sub



Sub RemoveDuplicatesArray(vArray As Variant, itemCount As Long)

    Dim tmr As Long
    Dim x As Long
    Dim y As Long
    Dim arrCount As Long
    Dim tempArr As Variant
    
    itemCount = 0
    
    ' Get the number of items
    arrCount = UBound(vArray, 1)
    ' Transfer over to temp array
    tempArr = vArray
    ' Re-initialise vArray - this should reset all values
    ReDim vArray(1 To arrCount)
    
    ' Loop through each item
    For x = LBound(tempArr, 1) To UBound(tempArr, 1)
        ' If blanks are not allowed and it finds a blank then exit the for loop
        If tempArr(x) = "" Then Exit For
        
        ' Loop through each of temp array items
        For y = LBound(vArray, 1) To UBound(vArray, 1)
            ' If it matches then no need to add it, exit for and go to next item
            If vArray(y) = tempArr(x) Then Exit For
            ' If you reach a blank then it doesn't exist and therefore should be added
            If vArray(y) = "" Then
                itemCount = itemCount + 1
                vArray(y) = tempArr(x)
                Exit For
            End If
        Next y
    Next x

End Sub

Sub TrimBlanksFromArray(vArray As Variant, numColumns As Long, colCheck As Long, cnt As Long)
    
    Dim tempArray As Variant
    Dim x As Long
    Dim y As Long
    Dim vCnt As Long
    
    cnt = 0
    tempArray = vArray
    
    
    For x = LBound(tempArray, 1) To UBound(vArray, 1)
        If tempArray(x, colCheck) <> "" Then cnt = cnt + 1
    Next x
    
    'Erase vArray
    ReDim vArray(LBound(tempArray, 1) To LBound(tempArray, 1) + cnt - 1, LBound(tempArray, 2) To UBound(tempArray, 2))
    vCnt = 0
    For x = LBound(tempArray, 1) To cnt
        If tempArray(x, colCheck) <> "" Then
            vCnt = vCnt + 1
            For y = LBound(vArray, 2) To UBound(vArray, 2)
                vArray(vCnt, y) = tempArray(x, y)
            Next y
        End If
    Next x
    
End Sub



Sub ReverseArray(vArray As Variant)
    
    
    Dim tempArray As Variant
    Dim colCount As Long
    Dim x As Long
    Dim y As Long
    Dim cnt As Long
    
    
    tempArray = vArray
    ReDim vArray(LBound(tempArray, 1) To UBound(tempArray, 1), LBound(tempArray, 2) To UBound(tempArray, 2))
    
    For x = UBound(tempArray, 1) To LBound(tempArray, 1) Step -1
        cnt = cnt + 1
        For y = LBound(tempArray, 2) To UBound(tempArray, 2)
            vArray(cnt, y) = tempArray(x, y)
        Next y
    Next x
    
    
End Sub










Attribute VB_Name = "DeleteData"
Option Explicit

Sub DeleteSelectedItems()
    
    Application.ScreenUpdating = False
    
    Dim rng As Range
    Dim c As Range
    Dim x As Long
    Dim startTimer As Long
    Dim endTimer As Long
    Dim rngAdd As String
    Dim splitAdd() As String
    Dim splitRange As Range
    
    
    startTimer = Timer
    
    If TypeName(Selection) <> "Range" Then Exit Sub
    
    Set rng = Selection
    rngAdd = rng.Address
    
    splitAdd = Split(rngAdd, ",")
    
    
    For x = UBound(splitAdd, 1) To LBound(splitAdd, 1) Step -1
        Set splitRange = wsPortfolio.Range(splitAdd(x))
        For Each c In splitRange.Rows
            If wsPortfolio.Cells(c.Row, wsPortfolio.Range("PortfolioTable").Column) <> "" Then
                Call DeleteItem(wsPortfolio.Cells(c.Row, wsPortfolio.Range("PortfolioTable").Column))
            End If
        Next c
        splitRange.EntireRow.Delete Shift:=xlUp
    Next x
    
    Call Top10Update.Top10Tenants
    
    endTimer = Timer
    
    Debug.Print "Delete Time: " & endTimer - startTimer
    
    wsPortfolio.Activate
    MsgBox "Input Data for selected schedule(s) has been deleted", vbInformation, "Delete Complete"
    
    Application.ScreenUpdating = True
    
End Sub

Sub sdf()
    Debug.Print Selection.Address
End Sub
Private Sub DeleteItem(scheduleName As String, Optional delRow As Boolean = False)
    
    
    Dim schedRange As Range
    Dim inputWS As Worksheet
    Dim x As Long
    
    ' Get the range of the matching ID - this makes it easdier to set the other values below
    For x = 0 To wsPortfolio.Range("PortfolioTable").Rows.Count - 1
        If Not IsError(wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0).Value2) Then
            If wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0).Value2 = scheduleName Then
                Set schedRange = wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0)
                Exit For
            End If
        End If
    Next x
    
    If schedRange Is Nothing Then Exit Sub
    
    Set inputWS = ThisWorkbook.Worksheets(schedRange.Value2)
    
    Application.DisplayAlerts = False
    inputWS.Delete
    Application.DisplayAlerts = True
    
    If delRow Then schedRange.EntireRow.Delete Shift:=xlUp
End Sub
Attribute VB_Name = "ImportData"
Option Explicit

Sub AddNewSchedule()
    
    Application.ScreenUpdating = False
    
    Dim wbPath As String
    Dim oSet As Long
    Dim sourceWB As Workbook
    Dim newWS As Worksheet
    
    Application.StatusBar = "Opening tenancy schedule..."
    
    ' Get the new tenancy schedule from the user
    wbPath = OpenWB.GetWorkbookName
    If wbPath = "False" Then Exit Sub
    
    ' Check that it doesn't already exist
    If DoesInputExist(wbPath) Then
        MsgBox "This tenancy schedule is already part of the portfolio (based on the workbook path).", vbExclamation, "Already in Portfolio"
        Exit Sub
    End If
    
    ' Open the workbook
    Set sourceWB = OpenWB.OpenWorkbook(wbPath)
    
    
    Application.StatusBar = "Set up new worksheet..."
    
    ' Add a new line to the table
    wsGraphInputsEnd.Visible = xlSheetVisible
    wsGraphInputsEnd.Copy wsGraphInputsEnd
    Set newWS = ActiveSheet
    wsGraphInputsEnd.Visible = xlSheetHidden
    
    If wsPortfolio.Range("PortfolioTable").Resize(1, 1) = "" Then
        oSet = 0
    Else
        oSet = wsPortfolio.Range("PortfolioTable").Offset(-1).End(xlDown).Row - wsPortfolio.Range("PortfolioTable").Row + 1
    End If
    
    
    newWS.Name = CheckName(sourceWB.Name)
    
    wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(oSet, 1).Value2 = sourceWB.FullName
    wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(oSet, 2).Value2 = Now()
    wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(oSet, 0).Value2 = "=RIGHT(CELL(""filename"",'" & newWS.Name & "'!A1),LEN(CELL(""filename"",'" & newWS.Name & "'!A1)) - SEARCH("".xlsm]"",CELL(""filename"",'" & newWS.Name & "'!A1)) - 5)"
    
    
    Application.StatusBar = "Copying data..."
    
    ' Copy the data across
    Call CopyData(sourceWB, newWS)
    
    ' Close the source workbook
    sourceWB.Close False
    
    Call Top10Update.Top10Tenants
    
    ' Go back to the portfolio options
    wsPortfolio.Activate
    'Application.Goto wsPortfolio.Range("A1")
    
    ' Completed
    MsgBox "New tenancy schedule added to the portfolio", vbInformation, "Schedule Added"
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    
End Sub


Private Function DoesInputExist(wbPath As String) As Boolean
    
    Dim tblRange As Range
    Dim x As Long
    Dim fndPath As Boolean
    
    Set tblRange = wsPortfolio.Range("PortfolioTable")
    
    For x = 0 To tblRange.Rows.Count - 1
        If tblRange.Resize(1, 1).Offset(x, 1).Value2 = wbPath Then
            fndPath = True
            Exit For
        End If
    Next x
    
    DoesInputExist = fndPath
    
End Function


Sub CopyData(sourceWB As Workbook, inputWS As Worksheet)
    
    Application.DisplayAlerts = False
    Dim tenWS As Worksheet
    Dim wsCashProject As Worksheet
    Dim cashBtmRow As Long
    Dim topDiv As Double
    Dim botDiv As Double
    Dim x As Long
    
    ' Set the Graph Inputs sheet from the source workbook
    Set tenWS = sourceWB.Worksheets("Graph Inputs")
    
    ' Copy the Section through to the start part above the income at risk in section 4
    tenWS.Range(tenWS.Range("Section1Heading"), tenWS.Range("IncomeAtRiskDatesHeading").Offset(-2)).EntireRow.Copy inputWS.Range("Section1Heading")
    
    'Copy Section 5 through to the buildings by void part
    tenWS.Range(tenWS.Range("Section5Heading"), tenWS.Range("VOIDListHeading").Offset(-3)).EntireRow.Copy inputWS.Range("Section5Heading")
    
    ' Copy from income at risk part of Section 7 to the end of the worksheet
    tenWS.Range(tenWS.Range("IncomeAtRiskHeading"), tenWS.Cells(tenWS.UsedRange.Rows.Count, 1)).EntireRow.Copy inputWS.Range("IncomeAtRiskHeading")
    
    Set wsCashProject = sourceWB.Worksheets("Cashflow Projections For Charts")
    cashBtmRow = wsCashProject.Range("CashFlowTotal").Row
    
    For x = 0 To 5
        inputWS.Range("B122").Offset(0, x) = wsCashProject.Range("ID" & cashBtmRow).Offset(0, x * 12).Value2
        inputWS.Range("B122").Offset(1, x) = wsCashProject.Range("IE" & cashBtmRow).Offset(0, x * 12).Value2
        inputWS.Range("B122").Offset(2, x) = wsCashProject.Range("IC" & cashBtmRow).Offset(0, x * 12).Value2
        inputWS.Range("B122").Offset(3, x) = wsCashProject.Range("IF" & cashBtmRow).Offset(0, x * 12).Value2
        inputWS.Range("B122").Offset(4, x) = wsCashProject.Range("IG" & cashBtmRow).Offset(0, x * 12).Value2
        inputWS.Range("B122").Offset(5, x) = wsCashProject.Range("L" & cashBtmRow).Offset(2, x).Value2
        inputWS.Range("B122").Offset(6, x) = wsCashProject.Range("C3").Value2
    Next x
    
    
    
    
    ' Copy and paste the values to remove equations
    inputWS.UsedRange.Copy
    inputWS.Range("A1").PasteSpecial xlPasteValues
    
    Application.DisplayAlerts = True
End Sub



Function CheckName(nme As String) As String

    Dim ws As Worksheet
    Dim fndWS As Long
    
    ' Restrict name to 25 chars
    nme = Left(nme, 25)
    ' Loop through each ws and find out if the name already exists
    Do Until Not WorksheetExists(nme & " " & fndWS)
        fndWS = fndWS + 1
    Loop
    'For Each ws In ThisWorkbook.Worksheets
    '    If Left(ws.Name, 25) = nme Then fndWS = fndWS + 1
    'Next ws
    
    ' If the name already exists then add the count to the end of the name
    If fndWS > 0 Then
        nme = nme & " " & fndWS
    End If
    
    CheckName = nme
    

End Function

Function WorksheetExists(nme As String) As Boolean
    
    Dim ws As Worksheet
    Dim foundWS As Boolean
    
    If Right(nme, 2) = " 0" Then nme = Left(nme, Len(nme) - 2)
    
    For Each ws In ThisWorkbook.Worksheets
        If ws.Name = nme Then
            foundWS = True
            Exit For
        End If
    Next ws
    
    WorksheetExists = foundWS
    
End Function


Sub RefreshData()
    
    Application.ScreenUpdating = False
    'Application.Calculation = xlCalculationManual
    
    Dim rng As Range
    Dim c As Range
    Dim x As Long
    Dim startTimer As Long
    Dim endTimer As Long
    
    startTimer = Timer
    
    If TypeName(Selection) <> "Range" Then Exit Sub
    
    Set rng = Selection
    
    For Each c In rng.Rows
        If wsPortfolio.Cells(c.Row, wsPortfolio.Range("PortfolioTable").Column) <> "" Then
            Application.StatusBar = "Updarte data for " & wsPortfolio.Cells(c.Row, wsPortfolio.Range("PortfolioTable").Column).Value2 & "..."
            Call RefreshItem(wsPortfolio.Cells(c.Row, wsPortfolio.Range("PortfolioTable").Column))
        End If
    Next c
    
    Call Top10Update.Top10Tenants
    
    endTimer = Timer
    Debug.Print "Refresh Time: " & endTimer - startTimer
    
    Application.StatusBar = "Finished Update"
    
    wsPortfolio.Activate
    MsgBox "Refresh has been completed", vbInformation, "Update Complete"
        
    Application.StatusBar = False
        
    Application.ScreenUpdating = True
    'Application.Calculation = xlCalculationAutomatic

End Sub





Sub RefreshItem(scheduleName As String)

    Dim wbPath As String
    Dim wbName As String
    Dim schedRange As Range
    Dim wbSource As Workbook
    Dim inputWS As Worksheet
    Dim x As Long
    
    ' Get the range of the matching ID - this makes it easdier to set the other values below
    For x = 0 To wsPortfolio.Range("PortfolioTable").Rows.Count - 1
        If wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0).Value2 = scheduleName Then
            Set schedRange = wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0)
        End If
    Next x
    
    If schedRange Is Nothing Then Exit Sub
    
    ' Set the path and name based on the value in the table
    wbPath = schedRange.Offset(0, 1).Value2
    
    ' If the length of the directory item is 0 then the file doesn't exist
    If Len(Dir(wbPath)) = 0 Then
        MsgBox wbName & " cannot be found at the oiriginal path" & vbNewLine & vbNewLine & "Please locate and open the correct workbook", _
                    vbExclamation, "Unable to find Tenancy Schedule"
        ' Ask the user to open the workbook
        wbPath = OpenWB.GetWorkbookName
        If wbPath = "False" Then Exit Sub
    End If
    
    ' Set the workbook source
    Set wbSource = OpenWB.OpenWorkbook(wbPath)
    
    Set inputWS = ThisWorkbook.Worksheets(schedRange.Value2)
    Call CopyData(wbSource, inputWS)
    
    ' Set the values in the table
    schedRange.Offset(0, 1) = wbSource.FullName
    schedRange.Offset(0, 2) = Now()
    
    ' Close the source workbook
    wbSource.Close False
    
End Sub
Attribute VB_Name = "IncomeAtRisk"

Sub GetAllIaRProperties()
    
    Application.ScreenUpdating = False
    
    Dim x As Long
    Dim wsName As String
    Dim wbPath As String
    Dim dteStart As Date
    Dim dteEnd As Date
    Dim headRange As Range
    Dim totalRange As Range
    Dim IaRArr() As Variant
    Dim btmItem As Long
    
    ' This is the array that will hold all the data before it is trimmed and put into the worksheet
    ' Since we don't know how many workbooks there are, I've just assumed that there worn't
    ' be more than 1,000,000 void or expiry properties
    ReDim IaRArr(1 To 1000000, 1 To 5)
    
    ' Get the period start and end dates
    dteStart = wsGraphInputs.Range("IaRDateStart")
    dteEnd = wsGraphInputs.Range("IaRDateEnd")
    
    ' Get the ranges of the IaR section
    Set headRange = wsGraphInputs.Range("IncomeAtRiskDatesHeading")
    Set totalRange = wsGraphInputs.Range("IncomeAtRiskDatesTotal")
    
    ' Remove current values from the worksheet
    If totalRange.Row - headRange.Row > 4 Then
        headRange.Offset(2, 0).Resize(totalRange.Row - headRange.Row - 4, 1).EntireRow.Delete
    End If
    ' Clear the last item from the worksheet
    headRange.Offset(2, 0).Resize(totalRange.Row - headRange.Row - 3, 5).ClearContents
    
    ' For each workbook in the portfolio table
    For x = 0 To wsPortfolio.Range("PortfolioTable").Rows.Count - 1
        wsName = wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0).Value2
        wbPath = wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 1).Value2
        ' If the name isn't blank
        If wsName <> "" Then
             Application.StatusBar = "Getting IaR properties from: " & wsName
            ' Populate the array with data
            Call AddDataToArray(wbPath, IaRArr, btmItem, dteStart, dteEnd)
        End If
    Next x
    
    ' If there aren't any then leave the sub
    If btmItem = 0 Then GoTo Ending
    
    ' Trim the blanks
    Call ArrayHelpers.TrimBlanksFromArray(IaRArr, 5, 1, btmItem)
    ' Sort the array
    Call ArrayHelpers.QuickSortArray(IaRArr, 5, 5, LBound(IaRArr, 1), UBound(IaRArr, 1))
    ' Reverse the array
    Call ArrayHelpers.ReverseArray(IaRArr)
    
    headRange.Offset(2, 0).Resize(UBound(IaRArr, 1) - 1, UBound(IaRArr, 2)).EntireRow.Insert
    headRange.Offset(2, 0).Resize(UBound(IaRArr, 1), UBound(IaRArr, 2)).Value2 = IaRArr
    
    headRange.Offset(2, 0).Resize(UBound(IaRArr, 1), UBound(IaRArr, 2)).EntireRow.Rows.AutoFit
    
Ending:
    Application.StatusBar = False
    Application.ScreenUpdating = True
    
End Sub



Sub AddDataToArray(wbPath As String, IaRArr As Variant, btmItem As Long, dteStart As Date, dteEnd As Date)
    
    Dim wb As Workbook
    Dim tenStartRow As Long
    Dim tenEndRow As Long
    Dim fullArr() As Variant
    Dim x As Long
    
    
    Set wb = Workbooks.Open(wbPath, False, True)

    tenStartRow = wb.Worksheets("Tenancy Schedule").Range("TenancyHeading").Row + 1
    tenEndRow = wb.Worksheets("Tenancy Schedule").Range("TenancyTotal").Row - 1
    
    
    ' Get the information from the worksheet into an array
    fullArr = wb.Worksheets("Tenancy Schedule").Range("Tenancy_Sched[[Business Park]:[Headline Rent " & Chr(10) & "(|fffd| p.a.)]]").Value2
    
    ' Close the workbook
    wb.Close False
    
    ' Loop through each of the items in the fullArr (all data taken from the Tenancy Schedule)
    For x = LBound(fullArr, 1) To UBound(fullArr, 1)
        ' If the expiry date is between the dates
        If fullArr(x, 10) >= dteStart And fullArr(x, 10) <= dteEnd Then
            ' Then populate the IaRArr
            btmItem = btmItem + 1
            IaRArr(btmItem, 1) = fullArr(x, 4)
            IaRArr(btmItem, 2) = fullArr(x, 10)
            IaRArr(btmItem, 3) = "Expiry"
            IaRArr(btmItem, 4) = fullArr(x, 7)
            IaRArr(btmItem, 5) = fullArr(x, 17)
        ElseIf fullArr(x, 13) >= dteStart And fullArr(x, 13) <= dteEnd Then
            ' Else if the break date is between the dates then
            ' Populate the IaRArr
            btmItem = btmItem + 1
            IaRArr(btmItem, 1) = fullArr(x, 4)
            IaRArr(btmItem, 2) = fullArr(x, 13)
            IaRArr(btmItem, 3) = "Break"
            IaRArr(btmItem, 4) = fullArr(x, 7)
            IaRArr(btmItem, 5) = fullArr(x, 17)
        End If
    Next x
    
End Sub
Attribute VB_Name = "OpenWB"
Option Explicit


Function GetWorkbookName() As String
    
    Dim wbPath As String
    
    wbPath = Application.GetOpenFilename("Excel Files (*.xls*), *.xls*", , "Import Tenancy Schedule", "Import", False)
    GetWorkbookName = wbPath
    
    
End Function



Function OpenWorkbook(wbPath As String) As Workbook
    
    Dim wb As Workbook
    
    Set wb = Application.Workbooks.Open(Filename:=wbPath, ReadOnly:=True)
    Set OpenWorkbook = wb
    
End Function

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Top10Update"
Option Explicit

Sub Top10Tenants()

    Dim x As Long
    Dim wsName As String
    
    wsTop10.Range("Top10Table").ClearContents
    
    For x = 0 To wsPortfolio.Range("PortfolioTable").Rows.Count - 1
        wsName = wsPortfolio.Range("PortfolioTable").Resize(1, 1).Offset(x, 0).Value2
        If wsName <> "" Then
            Call CopyTop10(ThisWorkbook.Worksheets(wsName))
        End If
    Next x
    
    
    wsTop10.ListObjects("Top10Table").Sort.SortFields.Clear
    wsTop10.ListObjects("Top10Table").Sort.SortFields.Add2 Key:=Range("Top10Table[[#All],[|fffd| pa]]"), _
        SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    With wsTop10.ListObjects("Top10Table").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    
End Sub




Private Sub CopyTop10(ws As Worksheet)
    
    Dim btmRow As Long
    Dim tblRng As Range
    Dim top10Rng As Range
    
    Set tblRng = wsTop10.Range("Top10Table")
    Set top10Rng = ws.Range("A26:K35")
    
    If tblRng.Resize(1, 1).Value2 = "" Then
        btmRow = tblRng.Row
    Else
        btmRow = tblRng.Resize(1, 1).Offset(-1).End(xlDown).Row + 1
    End If

    wsTop10.Range("B" & btmRow, "L" & btmRow + 9).Value2 = top10Rng.Value2
    
    
End Sub

Attribute VB_Name = "UpdateCode"
'UpdateCodeVersion: 1.0

Option Explicit
Private sourceCodePath As String
Private thisCodePath As String


Sub UpdateCode_Main()
    Application.ScreenUpdating = False
    
    
    
    Dim wbPath As String
    Dim wbSource As Workbook
    ' Get the workbook
    wbPath = GetWorkbookPath
    ' If the path is false then the user clicked cancel
    If wbPath = "False" Then Exit Sub
    
    ' Open the wb
    Set wbSource = Application.Workbooks.Open(wbPath, False, True)
    
    ' Set the code paths
    Call CreateFolders
    
    ' Export the new code
    Call ExportRemoveCode(wbSource, sourceCodePath, False)
    
    
    ' Close the source workbook
    wbSource.Close False
    
    On Error GoTo reImport
reImport:
    ' Remove all the existing modules (except this one)
    Call ExportRemoveCode(ThisWorkbook, thisCodePath, True)
    
    Application.Wait Now() + #12:00:03 AM#
    
    ' Import the modules from the other one
    Call ImportCode(ThisWorkbook, sourceCodePath)
    
    ' Rename the modules - some have a 1 attached as it thinks the module already exists
    Call RenameModules(ThisWorkbook)
    
    'Delete the code folders
    Call DeleteAllFiles(sourceCodePath)
    Call DeleteFolder(sourceCodePath)
    Call DeleteAllFiles(thisCodePath)
    Call DeleteFolder(thisCodePath)
    
    MsgBox "Import Complete"
    
    Application.ScreenUpdating = True
End Sub

Sub DeleteAllFiles(pth As String)
    
    On Error Resume Next
    Kill pth & "\" & "*.*"
    On Error GoTo 0
    
End Sub

Sub DeleteFolder(pth As String)

    RmDir pth & "\"
    
End Sub


Sub CreateFolders()
    
    If Dir(ThisWorkbook.path & "\SourceCode", vbDirectory) = "" Then
        MkDir ThisWorkbook.path & "\SourceCode"
    End If
    
    If Dir(ThisWorkbook.path & "\CurrentCode", vbDirectory) = "" Then
        MkDir ThisWorkbook.path & "\CurrentCode"
    End If
    
    sourceCodePath = ThisWorkbook.path & "\SourceCode"
    thisCodePath = ThisWorkbook.path & "\CurrentCode"
    
    
End Sub


Sub ExportRemoveCode(wb As Workbook, folderPath As String, Optional removeCode As Boolean = False)
    
    Dim vbComp As VBComponent
    Dim expBool As Boolean
    Dim delBool As Boolean
    Dim expFileName As String
    
    ' Loop through each component
    For Each vbComp In wb.VBProject.VBComponents
        expBool = False
        delBool = False
        
        ' Determine the type
        Select Case vbComp.Type
            Case vbext_ct_ClassModule
                expFileName = vbComp.Name & ".cls"
                expBool = True
                delBool = removeCode
            Case vbext_ct_MSForm
                expFileName = vbComp.Name & ".frm"
                expBool = True
                delBool = removeCode
            Case vbext_ct_StdModule
                expFileName = vbComp.Name & ".bas"
                expBool = True
                delBool = removeCode
            Case vbext_ct_Document
                If vbComp.CodeModule.CountOfLines > 0 Then
                    expFileName = vbComp.Name & ".xlobj"
                    expBool = True
                    delBool = False
                End If
        End Select
        
        ' If it's this module then don't delete
        If vbComp.Name = "UpdateCode" Then delBool = False
        
        ' Export the code
        If expBool Then vbComp.Export folderPath & "\" & expFileName
        ' Delete the component
        If delBool Then wb.VBProject.VBComponents.Remove vbComp
            
    Next vbComp
    
    
    
End Sub

Sub ImportCode(wb As Workbook, codePath As String)
    
    Dim objFile As Scripting.File
    Dim objFSO As Scripting.FileSystemObject
    Dim vbComp As VBComponent
    
    Set objFSO = New Scripting.FileSystemObject
    
    ' Loop through each file in the folder
    For Each objFile In objFSO.GetFolder(codePath).Files
        If objFile.Name <> "UpdateCode.bas" Then
        
            If (objFSO.GetExtensionName(objFile.Name) = "cls") Or _
                (objFSO.GetExtensionName(objFile.Name) = "frm") Or _
                (objFSO.GetExtensionName(objFile.Name) = "bas") Then
                wb.VBProject.VBComponents.Import objFile.path
            ElseIf objFSO.GetExtensionName(objFile.Name) = "xlobj" Then
                For Each vbComp In wb.VBProject.VBComponents
                    If vbComp.Name & ".xlobj" = objFile.Name Then
                        Call vbComp.CodeModule.DeleteLines(1, vbComp.CodeModule.CountOfLines)
                        Call vbComp.CodeModule.AddFromFile(objFile.path)
                        Call vbComp.CodeModule.DeleteLines(1, 4)
                    End If
                Next vbComp
                
            End If
        End If
    Next objFile
    
End Sub

Sub RenameModules(wb As Workbook)
    
    Dim vbComp As VBComponent
    Dim expBool As Boolean
    Dim delBool As Boolean
    Dim expFileName As String
    
    ' Loop through each component
    For Each vbComp In wb.VBProject.VBComponents
        If vbComp.Type = vbext_ct_StdModule Then
            If IsNumeric(Right(vbComp.Name, 1)) And Left(vbComp.Name, 6) <> "Module" Then
                vbComp.Name = Left(vbComp.Name, Len(vbComp.Name) - 1)
            End If
        End If
    Next vbComp
    
End Sub

Function GetWorkbookPath() As String
    
    Dim path As String
    
    path = Application.GetOpenFilename(FileFilter:="Excel (*.xls*), *.xls*", Title:="Import Updates From", ButtonText:="Import")
    GetWorkbookPath = path
    
    
End Function




Sub ImportTenancySchedule()
' This is needed because everytime the modules are removed, the button stops working
    Call Import.StartImport
    
End Sub


Attribute VB_Name = "wsGraphInputs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsGraphInputsEnd"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsGraphInputsStart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsPortfolio"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "wsTop10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


' InQuest injected base64 decoded content
' -F+$
' -F+$

INQUEST-PP=macro
