Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Module1"


Public Function ArrayDiff(RangeCells As Range, Optional ByVal ActionType As String = "MIN") As Variant
  On Error GoTo ErrorHandler   ' Enable error-handling routine.
  'error handling method.
  Const BAD_ActionType As Integer = 3
  Const BAD_Range As Integer = 4
  
  Dim cellValues() As Double
  Dim minValue As Double
  Dim maxValue As Double
  Dim c As Range
  Dim i As Integer
  Dim x As Integer
  Dim j As Double
  
  minValue = 5000
  maxValue = 0
  
  'Parameter checking
  ' MIN - return minumum value difference
  ' MAX - return maximum value difference
  ' RCM1 - return first minimum cell
  ' RCM2 - return second minimum cell
  'If Not (UCase(ActionType) = "MIN") And Not (UCase(ActionType) = "MAX") Then
  '  Err.Number = BAD_ActionType
 '   GoTo ErrorHandler
  'End If
  
  If RangeCells.Count = 0 Then
    Err.Number = BAD_Range
    GoTo ErrorHandler
  End If
    
  'Get Range values
  ReDim cellValues(RangeCells.Count)
  x = 0
  For Each c In RangeCells.Cells
    cellValues(x) = c.Value
    Debug.Print "cellValue: " & c.Value
    x = x + 1
  Next c
  
  'Subtract every cell from everyother cell to find min or max
  For x = 0 To (UBound(cellValues) - 2)
    For i = (x + 1) To (UBound(cellValues) - 1)
      j = Abs(cellValues(i) - cellValues(x))
      If (j < minValue) Then
         minValue = j
         rcm1 = x
         rcm2 = i
      End If
      If (j > maxValue) Then maxValue = j
    Next i
  Next x
  
  'Provide result based on ActionType
  If UCase(ActionType) = "MIN" Then
    ArrayDiff = minValue
  ElseIf UCase(ActionType) = "RCM1" Then
    ArrayDiff = rcm1
  ElseIf UCase(ActionType) = "RCM2" Then
    ArrayDiff = rcm2
  Else
    ArrayDiff = maxValue
  End If

ErrorExit:
    On Error Resume Next
    Exit Function

'Error Handler routine
ErrorHandler:
  Select Case Err.Number
    Case 3 'ActionType Error - parameter incorrect
        ArrayDiff = "#VALUE!"
        'MsgBox ("You attempted to divide by zero!")
    Case 4 'rngCells Error - range invalid
        ArrayDiff = "#REF!"
    Case Else 'catch all
        ArrayDiff = "#VALUE!"
    End Select
    Resume ErrorExit

End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
