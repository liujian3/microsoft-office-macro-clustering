Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "VBA Makros"

'****************************************************************************************
'*                                                                                      *
'* SAP Event Management                                                                 *
'* ====================                                                                 *
'*                                                                                      *
'* Printer and Microsoft Excel 5.0 interface                                            *
'*                                                                                      *
'* |fffd| 1994, 1995 by SAP AG, Walldorf/Baden (Germany)                                     *
'*            - Personnel Development -                                                 *
'*                    M. Kaiser                                                         *
'*--------------------------------------------------------------------------------------*
'*  1.00  30.01.1995 Freigabe Test intern                                               *
'*  1.00a 14.02.1995 Einbau Aktivierung 1. Seite / Freigabe extern / CeBit 1995         *
'*  1.00b 21.02.1995 Einbau Unterst|fffd|tzung Textelemente aus R/3, Versionsunterst|fffd|tzung   *
'*        24.02.1995 Erweiterung der Zeichenlegende auf 30 Eintr|fffd|ge                     *
'*  1.00c 03.03.1995 Verschiebung des Datenbereichs korrigiert                          *
'*        06.03.1995 Automatischer Zoom auf Bildschirmgr|fffd||fffd|e                             *
'*        24.04.1995 Verbreiterung Spalte "Name" in Vorlage                             *
'*  1.00d 08.06.1995 Tage dynamisch numerieren (Zeitraum aus R/3 lesen), Fileversion 3  *
'*  1.00e 01.02.1996 Formatierung des Datenbereichs als TEXT erzwungen                  *
'*  1.00f 20.11.2000 FMS: Zus|fffd|tzliche Formatierungszeile (Zeile4),                      *
'*                   f|fffd|r Wochenenden und Feiertage                                      *
'*  1.00g 10.06.2003 FMS: zwei weitere Zeilen f|fffd|r Stundensaldozeile und Infozeile       *
'*  1.00g 16.09.2003 FMS: Korrektur Hinweis 661055                                      *
'*  2.00  01.03.2005 JF:  Erweiterung Farb- und Schriftformatierung Hinweis 824520      *
'****************************************************************************************

Option Explicit

Global Const MakroVersion = "1.00e"
Global Const MakroFileName = "ZGPEPMAC.XLS"   ' Name of this workbook
Global Const DataFileName = "WDPDDPRT.CSV"  ' Name of data file downloaded
Global Const HideTemplate = False           ' Hide template sheet during execution?
Global Const PathSeparator = "\"            ' Path separator character
                                           ' (to be changed on other systems)
Global Const Err_DataNotFound = 1
Global Const Err_PlanNotFound = 2
Global Const Err_DataNotLoaded = 3
Global Const Err_MacroOutOfDate = 4         ' 1.00b
Dim DataVersion As Integer                  ' 1.00b: Version flag
Dim AppxCount   As Integer                  ' 1.00b: Number of appendix lines to copy
Dim HeaderLines As Integer                  ' 1.00b: Number of lines used as header
                                            '        (offset to data area downloaded)

'========================================================================================
' automatic startup
'----------------------------------------------------------------------------------------
Sub auto_open()
Attribute auto_open.VB_ProcData.VB_Invoke_Func = " \n14"
   
   Application.ScreenUpdating = False
   CreateWorkbook

End Sub

'========================================================================================
' creates a new workbook containing new sheets
'----------------------------------------------------------------------------------------
Sub CreateWorkbook()
Attribute CreateWorkbook.VB_ProcData.VB_Invoke_Func = " \n14"
   
   Dim DestBook As Workbook    'new created workbook with formatted data
   Dim DataBook As Workbook    'data file created by R/3 system
   Dim PlanBook As Workbook    'this workbook
   
   Dim DestSheet As Worksheet
   Dim PlanSheet As Worksheet
   Dim DataSheet As Worksheet
   Dim colorsheet As Worksheet ' JF note 824520
   
   Dim PlanSheetName As String 'some parameters (from R/3 or from this workbook)
   Dim ActPageNum As Integer
   Dim StartPageNum As Integer
   Dim PageCount As Integer
   Dim PageLines As Integer
   Dim PrintPages As Integer
   Dim SavePages As Integer
   Dim SaveFilename As String
   Dim CloseExcel As Integer
   Dim i As Integer            ' FOR loops
   
   On Error Resume Next 'ignore errors
   
   '--- Load data sheet and initialize variables ----------------------------------------
   Set PlanBook = Workbooks(MakroFileName)
      
   If HideTemplate Then
      Application.ScreenUpdating = True
      Windows(MakroFileName).Visible = False
      Application.ScreenUpdating = False
   End If
   
   Err = 0
   Set DataBook = Workbooks(DataFileName)
   If Err <> 0 Then 'data sheet is not present
      DisplayMsg Err_DataNotLoaded
      PlanBook.Close False
      Exit Sub
   End If
   Set DataSheet = DataBook.Sheets(1)
      
   PlanSheetName = DataSheet.Cells(1, 2)
   PrintPages = DataSheet.Cells(1, 3)
   SavePages = DataSheet.Cells(1, 4)
   SaveFilename = DataSheet.Cells(1, 5)
   CloseExcel = DataSheet.Cells(1, 6)
   StartPageNum = DataSheet.Cells(1, 7)
   
   Err = 0
   Set PlanSheet = PlanBook.Sheets(PlanSheetName)
   Set colorsheet = PlanBook.Sheets("color")      ' JF note 824520
   If Err <> 0 Then 'plan sheet has not been found
      DisplayMsg Err_PlanNotFound
      DataBook.Close False
      PlanBook.Close False
      Exit Sub
   End If
   'PageLines = PlanSheet.Evaluate("Lines") - 1 'ERROR! Must be exactly the number of lines per page!
   'PageCount = (DataSheet.Cells(1, 1) \ PageLines) + 1 'is now wrong too -> PageLines!
'   PageLines = PlanSheet.Evaluate("Lines")      '1.00c
    
    PageLines = 57
    PageCount = ((DataSheet.Cells(1, 1) - 1) \ PageLines) + 1 '1.00c
    HeaderLines = 2
    AppxCount = 30
    
   '--- Copy text elements (1.00b) ------------------------------------------------------
    For i = 1 To 11
       PlanSheet.Evaluate("Txt" & Format$(i, "##")) = DataSheet.Cells(2, i)
    Next

   '--- Create first page ---------------------------------------------------------------
   PlanSheet.Copy
   Set DestBook = Application.ActiveWorkbook
   ActPageNum = StartPageNum
   DestBook.Windows(1).Activate     '1.00c
         
   Do While ActPageNum - StartPageNum < PageCount
      If ActPageNum <> StartPageNum Then 'not first page
         PlanSheet.Copy After:=DestSheet
      End If
      Set DestSheet = Application.ActiveSheet
      DestSheet.Name = Format$(ActPageNum, "#######0")
      Call CopyData(ActPageNum, PageLines, DataSheet, DestSheet)
      Call FormatData(ActPageNum, PageLines, DataSheet, colorsheet)          'FMS for customer Project LMU
     
      ActPageNum = ActPageNum + 1
   Loop
   
   DataSheet.Cells(1, 1).Copy
   DataBook.Close False
   
   DestBook.Sheets(1).Activate '1.00a: activate first page of workbook
   
   If PrintPages = 1 Then
      DestBook.PrintOut
   End If
   
   If CloseExcel < 2 Then '*** close Excel or close Workbook ***
      Select Case SavePages
         Case 0    '--- close without saving ---
            DestBook.Close False
         Case 1    '--- close and save ---
            If SaveFilename = "" Then
               DestBook.Activate
               Application.Dialogs(xlDialogSaveAs).Show
           Else
              DestBook.SaveAs SaveFilename
           End If
           DestBook.Close False
         Case Else '--- ask user wether to save ---
            DestBook.Close
       End Select
   
      If CloseExcel = 0 Then
         PlanBook.Close False
      Else
         Application.Quit
      End If
    Else  '*** neither close Excel nor close Workbook ***
       PlanBook.Close False
    End If

End Sub

'========================================================================================
' inserts data to given sheet
'----------------------------------------------------------------------------------------
Sub CopyData(ActPageNum As Integer, PageLines As Integer, DataSheet As Worksheet, DestSheet As Worksheet)
Attribute CopyData.VB_ProcData.VB_Invoke_Func = " \n14"
   
   '--- copy header ---
   DestSheet.Evaluate("PageNo").Formula = ActPageNum
   DestSheet.Evaluate("CreatedBy").Formula = DataSheet.Cells(1, 11)
   DestSheet.Evaluate("CreatedOn").Formula = DataSheet.Cells(1, 12)
   '--- copy data area of this page ---
   'DataSheet.Range(DataSheet.Cells((ActPageNum - 1) * PageLines + 2, 1), DataSheet.Cells(ActPageNum * PageLines + 1, 36)).Copy
   DataSheet.Range(DataSheet.Cells((ActPageNum - 1) * PageLines + HeaderLines + 1, 1), DataSheet.Cells(ActPageNum * PageLines + HeaderLines, 25)).Copy '1.00b: changed
   DestSheet.Evaluate("Data").PasteSpecial Paste:=xlFormulas, Transpose:=DestSheet.Evaluate("DataTranspose")
   DestSheet.UsedRange.Select       '1.00c
   Application.ActiveWindow.Zoom = True '1.00c
   DestSheet.Cells(1, 1).Select     '1.00c

End Sub

'========================================================================================
' displays messages of the routines
'----------------------------------------------------------------------------------------
Sub DisplayMsg(Num As Integer)
Attribute DisplayMsg.VB_ProcData.VB_Invoke_Func = " \n14"

   Dim S As String, Title As String

   Select Case Application.International(xlCountrySetting)
      Case 49 '--- good old Germany ---
               Select Case Num
                  Case Err_DataNotFound:   S$ = "Die Daten aus dem SAP-System k|fffd|nnen nicht geladen werden!"
                  Case Err_PlanNotFound:   S$ = "Die Formatvorlage kann nicht gefunden werden!"
                  Case Err_DataNotLoaded:  S$ = "Die Daten m|fffd|ssen vor Aufruf der Formatierung geladen sein!"
                  Case Err_MacroOutOfDate: S$ = "Makro veraltet / Daten besitzen unbekanntes Format!" '1.00b
                  Case Else:               S$ = "Unbekannter Fehler ist aufgetreten!"
               End Select
               Title$ = "Fehler #"
      Case Else '--- UK, USA and the rest of the world ---
               Select Case Num
                  Case Err_DataNotFound:   S$ = "Can't load data file!"
                  Case Err_PlanNotFound:   S$ = "Can't find plan template!"
                  Case Err_DataNotLoaded:  S$ = "No data file present!"
                  Case Err_MacroOutOfDate: S$ = "Macro out of date / unknown data type!" '1.00b
                  Case Else:              S$ = "Unknown error!"
               End Select
               Title$ = "Error #"
   End Select
   Beep
   Call MsgBox(S$, vbCritical, Title$ & Format$(Num, "##0"))

End Sub

'========================================================================================
' displays copyright popup
'----------------------------------------------------------------------------------------
Sub DisplayCopyright()
Attribute DisplayCopyright.VB_ProcData.VB_Invoke_Func = "C\n14"

   Beep
   Call MsgBox("Version " & MakroVersion & Chr$(13) & "Copyright |fffd| 1994, 1995" & Chr$(13) & "SAP AG, Walldorf, Germany", vbInformation, "Shift Planning Interface Macro")

End Sub

'========================================================
' formatting columns for week-end and bank holidays
' The flag (X) indicating if a day has to be formatted or not
' is stored in file WDPDDPRT.XLS line 4, beginning in column 1
' or the first day of a month
'========================================================
Sub FormatData(ActPageNum As Integer, PageLines As Integer, DataSheet As Worksheet, colorsheet As Worksheet)

Dim DataBook As Workbook    'data file created by R/3 system

Dim factory_day   As String   'flag wor week-end day or bank holiday
Dim color_string  As String   'color in cell of data sheet(2.00)
Dim col_count     As Integer  'counter for days
Dim max_rows      As Integer
Dim row_count     As Integer  ' JF note 824520
Dim start_row     As Integer  ' JF note 824520
Dim color_rgb     As Long     ' JF note 824520 - selected color
Dim font_rgb      As Long     ' JF note 824520
Dim bold          As String   ' JF note 824520
Dim underline     As Variant  ' JF note 824520
Dim italic        As String   ' JF note 824520
Dim row_color     As Integer  ' JF note 824520 - row of color

Const NoColor = "000000"      ' JF note 824520


max_rows = 57  ' 24 x 3 Zeilen

' >> begin of insert ----  JF note 824520 ------------------------------
'----- Color and patterns in cells  JF note 824520 --------------------------------
row_count = 3         ' Quellzeile der Excel-Daten-Datei (Zielzeile ist + 1 !)

Do While row_count < max_rows

    col_count = 6
    
    Do While col_count <= 26
    
        color_string = DataSheet.Cells((ActPageNum - 1) * PageLines + row_count, col_count + 20)
        
        If color_string = "" Then
           color_string = NoColor           ' no color
        End If
        
        bold = "False"
        italic = "False"
        row_color = CInt(Mid(color_string, 4, 1))
        start_row = 11 + row_color             ' normal
        
        If Mid(color_string, 1, 1) = "1" Then  ' bold
          bold = "True"
        End If
        If Mid(color_string, 2, 1) = "1" Then  ' italic
          italic = "True"
        End If
        If Mid(color_string, 5, 1) = "1" Then  ' intensified
          start_row = 3 + row_color
        End If
        If Mid(color_string, 6, 1) = "1" Then  ' inverse
          start_row = 19 + row_color
        End If
        If Mid(color_string, 3, 1) = "1" Then   ' underline
        underline = xlUnderlineStyleSingle
        Else
        underline = xlUnderlineStyleNone
        End If
        
        ' get color from colorheet
        color_rgb = colorsheet.Cells(start_row, 1).Interior.color
        font_rgb = colorsheet.Cells(start_row, 1).Font.color
        
        Range(Cells(row_count + 1, col_count), Cells(row_count + 1, col_count)).Select
        
        With Selection.Interior
        .color = color_rgb                   ' color select
        End With
        With Selection.Font                     ' Font
        .bold = bold
        .italic = italic
        .underline = underline
        .color = font_rgb
        End With
        
        col_count = col_count + 1
    
    Loop
    
    row_count = row_count + 1

Loop

' << end of insert ----  JF note 824520 ------------------------------

Cells(1, 1).Select
              
End Sub



' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
