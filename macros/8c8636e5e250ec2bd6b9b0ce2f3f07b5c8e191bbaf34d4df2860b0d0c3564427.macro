Attribute VB_Name = "A_PIVOT"
Sub Budget_Pivot_aktualisieren()
    
    'dropdown_projekte und dropdown_kostenstellen f|fffd|r Budget in Kalkulationen aktualisieren
    Sheet1.PivotTables("Piv_E_Projekte").PivotCache.Refresh
    Sheet1.PivotTables("Piv_E_Kostenstellen").PivotCache.Refresh
    
End Sub
Sub ZE_Pivot_aktualisieren()
    
    'Budget, Einstellungen, Finanztabelle entsperren
    Call Unprotect_Pivotrelevante
    
    Sheet1.PivotTables("Piv_Budget_UKS").PivotCache.Refresh
    Sheet1.PivotTables("Piv_Budget_KS").PivotCache.Refresh
    
End Sub
Sub FT_Pivot_aktualisieren()
                
    'Pivot aktualisieren
    Call Unprotect_Pivotrelevante
        Sheet3.PivotTables("Piv_Finanztabelle").PivotCache.Refresh
    Call Protect_Pivotrelevante
    
End Sub
Sub Ausgaben_Pivots_aktualisieren()
    
    Call Unprotect_Pivotrelevante
        'Belegnummer Dropdown + Rechnungsleger Dropdown aktualisieren: Piv in Kalkulationen
        Sheet1.PivotTables("Piv_Ausgaben_BelegNR").PivotCache.Refresh
        Sheet1.PivotTables("Piv_Ausgaben_Rechnungsleger").PivotCache.Refresh
    Call Protect_Pivotrelevante
    
End Sub
Sub ZA_Pivots_aktualisieren()

On Error Resume Next
    
    'entperren
    Sheet9.Unprotect Password:="tnm"
    
    'Piv_ZA_Ausgaben+Zeiterfassungen aktualisieren
    Sheet9.PivotTables("Piv_ZA_Ausgaben").PivotCache.Refresh
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotCache.Refresh
    
    'nur leere Zahlungsantr|fffd|ge in Zeiterfassung und Ausgaben anzeigen
    Sheet9.PivotTables("Piv_ZA_Ausgaben").PivotCache.Refresh
    Sheet9.PivotTables("Piv_ZA_Ausgaben").ClearAllFilters
    Sheet9.PivotTables("Piv_ZA_Ausgaben").PivotFields("Nr.ZA").CurrentPage = ""
    
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotCache.Refresh
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").ClearAllFilters
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotFields("ZA Beleg").CurrentPage = "1"
    
End Sub

Sub Controlling_Pivots_aktualisieren()

On Error Resume Next
    
    Call CALC_OFF
    
    Call Unprotect_Pivotrelevante
    
    'aktualisieren
    Sheet14.PivotTables("Piv_Controlling").PivotCache.Refresh
    
    'Zeilenumbruch in Kostenstelle
    Sheet14.PivotTables("Piv_Controlling").PivotSelect "Kostenstellen[All]", xlLabelOnly, True
    With Selection
        .WrapText = True
    End With
    
    'Zeilenumbruch in Unterkostenstelle
    Sheet14.PivotTables("Piv_Controlling").PivotSelect "Unterkostenstellen[All]", xlLabelOnly, True
    With Selection
        .WrapText = True
    End With
    
    Call Protect_Pivotrelevante
    
    Call CALC_ON
     
    'scroll
    Sheet14.Activate
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
End Sub

Sub Mitarbeitercontrolling_Pivots_aktualisieren()
    
    Call Unprotect_Pivotrelevante
       
    'aktualisieren
    Sheet1.PivotTables("Piv_MA_IST_1").PivotCache.Refresh
    Sheet1.PivotTables("Piv_MA_IST_2").PivotCache.Refresh
    Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotCache.Refresh
    
    'Filter korrekt setzen und leere ausblenden
    On Error Resume Next
    With Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt")
        .ClearAllFilters
        .PivotItems("(blank)").Visible = False
        .PivotItems("(Leer)").Visible = False
        .PivotItems("").Visible = False
    End With
    
    Call Protect_Pivotrelevante
    
    Call CALC_ON
     
    'scroll
    Sheet7.Activate
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
End Sub
Attribute VB_Name = "A_RESET"
Sub RESET_ALL()

If MsgBox("Wollen Sie wirklich alle Daten zur|fffd|cksetzen? Nur die Einstellungen bleiben erhalten.", vbYesNoCancel) = vbYes Then
       
On Error GoTo fehler

    'AUS
    Call CALC_OFF
        
    'Teil1/ Tab
    Call RESET_0_Einstellungen
    Call RESET_1_Budget
    Call RESET_2_Ausgaben
    Call RESET_4_ZEG
    Call RESET_5_Original
    Call RESET_6_Summary
    
    'alle Bl|fffd|tter entsperren
    Call Unprotect_ALL
    
    'alle Piv aktualisieren
    ActiveWorkbook.RefreshAll
    
    'Teil2/ Piv
    Call RESET_8_Controlling
    Call RESET_9_Mitarbeitercontrolling
    Call RESET_7_ZA
    
    ' Zeiterfassungsvorlage aktialisieren
    Call RESET_3_ZE
        
    'alle Bl|fffd|tter sperren, ausblenden, |fffd|bersicht aufrufen
    Call Protect_ALL
    Call alle_ausblenden
    
    'EIN
    Call CALC_ON
    
    MsgBox ("Sie k|fffd|nnen nun ein neues Controllingjahr starten - viel Erfolg.")

Exit Sub
fehler:
    MsgBox ("Controllingtool konnte leider nicht fehlerfrei zur|fffd|ckgesetzt werden. Fehler im Code *RESET_ALL*.")
End If

End Sub
Sub RESET_ZEG()

If Range("ZA_max") > 0 Then

    MsgBox ("Sie haben Zahlungsantr|fffd|ge gestellt, deshalb k|fffd|nnen Sie nicht alle Zeiterfassungen l|fffd|schen.")

Else

    If MsgBox("Wollen Sie wirklich alle Zeiterfassungen l|fffd|schen?", vbYesNoCancel) = vbYes Then
           
    On Error GoTo fehler
    
        'AUS
        Call CALC_OFF
            
        'Zeiterfassungen und Zwischenspeicher ZE_Retour l|fffd|schen
        Call RESET_4_ZEG
        Call RESET_5_Original
            
        'EIN
        Call CALC_ON
        
        'sperren
        Call Protect_Sheet
        
    Exit Sub
fehler:
    Call CALC_ON
    Call Protect_Sheet
    MsgBox ("Zeiterfassungen konnten leider nicht fehlerfrei zur|fffd|ckgesetzt werden. Fehler im Code *RESET_ZEG*.")
    End If

End If
End Sub

Sub CALC_OFF()

    'AUS
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
End Sub
Sub CALC_ON()

    'EIN
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub
Sub RESET_0_Einstellungen()
    
    'alle Filter l|fffd|schen
    Call Einstellungen_Filter
    
    'Jahr l|fffd|schen
    Range("dropdown_jahre").Value = ""
    
    ActiveWindow.ScrollRow = 1

End Sub
Sub RESET_1_Budget()
   
    'entsperren und alle Filter l|fffd|schen
    Call Budget_delete_Filter
    
    With Range("Tab_Budget").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Call Budget_LNR_korrigieren
    
    ActiveWindow.ScrollRow = 1

End Sub
Sub RESET_2_Ausgaben()
   
   'entsperren und alle Filter l|fffd|schen
    Call Ausgaben_Filter_entfernen
    
    With Range("Tab_Ausgaben").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Call Ausgaben_LNR_korrigieren
    
    ActiveWindow.ScrollRow = 1

End Sub
Sub RESET_3_ZE()
    
    Call ZE_Reset 'Tabelle verkleinern auf 365 Tage (inkl. Samstag und Sonntag), Rest l|fffd|schen, Formatierung zur|fffd|cksetzen
    Call ZE_dropdown_aktualisieren 'neue dropdowns integrieren
    Call ZE_Formeln 'Standard herstellen
    Call ZE_Eingabefelder 'Eingabespalten leeren
    
End Sub
Sub RESET_4_ZEG()
    
    'entsperren und alle Filter l|fffd|schen
    Call ZEG_Filter_entfernen
    
    With Range("Tab_Zeiterfassung_Gesamt").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Call ZEG_Formeln

    ActiveWindow.ScrollRow = 1
    
End Sub
Sub RESET_5_Original()
    
On Error Resume Next

    'Zwischenspeicher Zeiterfassung (ZE Retour) l|fffd|schen
    With Range("Tab_Original").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
End Sub
Sub RESET_6_Summary()
    
On Error Resume Next
    
    'entsperren und alle Filter l|fffd|schen
    Call Summary_Filter_entfernen
    
    'Executive Summary leeren
    With Range("Tab_Summary").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    ActiveWindow.ScrollRow = 1
    
End Sub
Sub RESET_7_ZA()

On Error GoTo fehler

Call RESET_ZA1
Call RESET_ZA2

    'Ausgaben: Formeln ZA-Nr und LNr wiederherstellen
    
        'Formeln wiederherstellen
        Range("Tab_Ausgaben[Nr.ZA]").FormulaR1C1 = "=IF(Tab_Ausgaben[@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Tab_Ausgaben_Retour[ZA.Nr.],MATCH(Tab_Ausgaben[@[Lf.Nr. (ZA)]],Tab_Ausgaben_Retour[lf.Nr.],0)),""""))"
        Range("Tab_Ausgaben[Lf.Nr. (ZA)]").ClearContents
        Range("ausgaben_ZA_LFN_start").FormulaArray = "=IF([@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(A_sp1,MATCH([@[Lf.Nr. ]]&[@Belegnummer],A_sp2&A_sp3,0)),IFERROR(INDEX(A_sp1,MATCH([@[Lf.Nr. ]],A_sp2,0)),"""")))"

        'Zeilen entsperren
        Range("Tab_Ausgaben").EntireRow.Locked = False
        
        'formelspalten sperren
        Range("formelspalten_ausgaben").Locked = True
            
            
    'ZEG: Formel ZA und LNR wiederherstellen
    
        'Formeln wiederherstellen
        Range("Tab_Zeiterfassung_Gesamt[Nr.ZA]").FormulaR1C1 = "=IF(Tab_Zeiterfassung_Gesamt[@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Tab_ZEG_Retour[ZA.Nr.],MATCH(Tab_Zeiterfassung_Gesamt[@[Lf.Nr. (ZA)]],Tab_ZEG_Retour[Lf.Nr.],0)),""""))"
        Range("Tab_Zeiterfassung_Gesamt[Lf.Nr. (ZA)]").ClearContents
        Range("ZEG_ZA_LFN_start").FormulaArray = "=IF([@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Z_sp1,MATCH([@[Lf.Nr. ]]&[@[Belegnr./ Rechnungsnr.]],Z_sp2&Z_sp3,0)),IFERROR(INDEX(Z_sp1,MATCH([@[Lf.Nr. ]],Z_sp2,0)),"""")))"

        'Zeilen entsperren
        Range("Tab_Zeiterfassung_Gesamt").EntireRow.Locked = False
        
        'formelspalten sperren
        Range("formelspalten_zeg").Locked = True


Exit Sub
fehler:
Call CALC_ON
MsgBox "Fehler im Code *RESET_ZA*"

End Sub
Sub RESET_ZA1()

'On Error Resume Next

    With Range("Tab_Ausgaben_RETOUR").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("check1").Value = ""
    Range("check2").Value = ""
    Range("check3").Value = ""
     
End Sub
Sub RESET_ZA2()

'On Error Resume Next
    
    With Range("Tab_ZEG_RETOUR").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("check4").Value = ""
    Range("check5").Value = ""
    Range("check6").Value = ""
    
End Sub
Sub RESET_8_Controlling()

On Error Resume Next
    
    'Zeilenumbruch in Kostenstelle
    Sheet14.PivotTables("Piv_Controlling").PivotSelect "Kostenstellen[All]", xlLabelOnly, True
    With Selection
        .WrapText = True
    End With
    
    'Zeilenumbruch in Unterkostenstelle
    Sheet14.PivotTables("Piv_Controlling").PivotSelect "Unterkostenstellen[All]", xlLabelOnly, True
    With Selection
        .WrapText = True
    End With

End Sub

Sub RESET_9_Mitarbeitercontrolling()

On Error Resume Next
    
    'Filter korrekt setzen und leere ausblenden
    With Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt")
        .ClearAllFilters
        .PivotItems("(blank)").Visible = False
        .PivotItems("(Leer)").Visible = False
        .PivotItems("").Visible = False
    End With
    
End Sub
Attribute VB_Name = "Ausgaben"
Sub Ausgaben_Filter()
    
    On Error Resume Next
    Sheet6.Activate
    Call Unprotect_Sheet
    Range("Ausgaben_HEAD").Activate
    Sheet6.ShowAllData
    
    Call Protect_Sheet
    
End Sub
Sub Ausgaben_Filter_entfernen()
    
    On Error Resume Next
    Sheet6.Activate
    Call Unprotect_Sheet
    Range("Ausgaben_HEAD").Activate
    Sheet6.ShowAllData
    
End Sub

Sub Ausgaben_Fehler_filtern()

If Range("miss_Ausgaben").Value = 0 Then
    
    Call Ausgaben_Filter
    MsgBox ("Es gibt keine fehlenden Daten in Ihrer Zeiterfasung.")
    
Else
    
    Call Ausgaben_Filter_entfernen
    
        n = Range("Ausgaben_Spalte_check").Value
            Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="1"
            ActiveWindow.ScrollRow = 1
    
    Call Protect_Sheet
    
End If
    
End Sub

Sub Ausgaben_Monat1()

    Call Ausgaben_Filter_entfernen
                
    'J|fffd|nner filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="1"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat2()

    Call Ausgaben_Filter_entfernen
                
    'Februar filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="2"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat3()

    Call Ausgaben_Filter_entfernen
                
    'M|fffd|rz filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="3"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat4()

    Call Ausgaben_Filter_entfernen
                
    'April filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="4"
     
    Call Protect_Sheet
    
End Sub
Sub Ausgaben_Monat5()

    Call Ausgaben_Filter_entfernen
                
    'Mai filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="5"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat6()

    Call Ausgaben_Filter_entfernen
                
    'Juni filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="6"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat7()

    Call Ausgaben_Filter_entfernen
                
    'Juli filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="7"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat8()

    Call Ausgaben_Filter_entfernen
                
    'August filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="8"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat9()

    Call Ausgaben_Filter_entfernen
                
    'September filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="9"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat10()

    Call Ausgaben_Filter_entfernen
                
    'Oktober filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="10"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat11()

    Call Ausgaben_Filter_entfernen
                
    'November filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="11"
    
    Call Protect_Sheet
     
End Sub
Sub Ausgaben_Monat12()

    Call Ausgaben_Filter_entfernen
                
    'Dezember filtern
    n = Range("Ausgaben_spalte_monat").Value
    Sheet6.ListObjects("Tab_Ausgaben").Range.AutoFilter Field:=n, Criteria1:="12"
    
    Call Protect_Sheet
     
End Sub

Sub Ausgaben_ADD_row()
               
On Error GoTo fehler

Application.Calculation = xlCalculationManual

Dim cl2 As Range
Dim i2 As Integer
                
    With Selection.Cells(1)
        
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
            Sheet6.Activate
            Call Unprotect_Sheet
            Range("Tab_Ausgaben").ListObject.ListRows.Add AlwaysInsert:=True
        Else
            Sheet6.Activate
            Call Unprotect_Sheet
            rng2.Insert Shift:=xlDown
        End If
        
    End With
    
    'Zeilen entsperren, wenn keine ZA-Nr
    For Each cl2 In Range("spalte_ZA_ausgaben")
        If cl2.Value < 1 Then
            cl2.EntireRow.Locked = False 'ganze Zeile entsperren
        End If
    Next
    
    Range("formelspalten_ausgaben").Locked = True
    Call Ausgaben_LNR_korrigieren
    Call Protect_Sheet

Exit Sub
fehler:
On Error Resume Next
Sheet6.Activate
Call Unprotect_Sheet
Range("Tab_Ausgaben").ListObject.ListRows.Add AlwaysInsert:=True
For Each cl2 In Range("spalte_ZA_ausgaben")
If cl2.Value < 1 Then
cl2.EntireRow.Locked = False 'Eingabefelder entsperren, falls kein ZA
End If
Next
Range("formelspalten_ausgaben").Locked = True 'formelspalten sperren
Call Ausgaben_LNR_korrigieren
Call Protect_Sheet
Application.Calculation = xlCalculationAutomatic

End Sub

Sub Ausgaben_DELETE_row()

If MsgBox("Wollen Sie die Zeile wirklich aus der Liste entfernen?", vbYesNo) = vbYes Then
    
On Error Resume Next
Application.Calculation = xlCalculationManual

'Blattschutz off
Call Unprotect_Sheet
    
    Dim rng As Range
    
    With Selection.Cells(1)
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        On Error GoTo 0
        If rng Is Nothing Then
            MsgBox "Bitte klicken Sie zuerst auf eine Ausgabe, die Sie aus der Tabelle entfernen wollen.", vbCritical
        Else
            On Error Resume Next
            Call Unprotect_Sheet
            Sheet6.ShowAllData
            rng.Delete xlShiftUp
            Call Ausgaben_LNR_korrigieren
        End If
    End With

Application.Calculation = xlCalculationAutomatic

'Blattschutz on
Call Protect_Sheet

End If

End Sub
Sub Ausgaben_LNR_korrigieren()

    Range("Tab_Ausgaben[Lf.Nr. ]").FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
    
    Range("spalte_ausgaben_mwst_satz").NumberFormat = "0%"
    Range("spalte_ausgaben_abzug").NumberFormat = "0%"
    Range("spalte_ausgaben_foerdersatz").NumberFormat = "0%"
    
End Sub
Sub Ausgaben_Brutto()

Call Unprotect_Sheet

    Range("Ausgaben_spalten_brutto").EntireColumn.Hidden = False
    Range("Ausgaben_spalten_netto").EntireColumn.Hidden = True

    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Sub Ausgaben_Netto()

Call Unprotect_Sheet

    Range("Ausgaben_spalten_netto").EntireColumn.Hidden = False
    Range("Ausgaben_spalten_brutto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Sub Ausgaben_alles()

Call Unprotect_Sheet

    Range("Ausgaben_spalten_alle").EntireColumn.Hidden = False
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Attribute VB_Name = "BUDGET"
Sub Budget_FORMELN()

    Range("Tab_Budget[Unterkostenstelle Beschreibung]").FormulaR1C1 = _
        "=Tab_Budget[@[Unter-Kostenstelle]]&"" ""&Tab_Budget[@[Beschreibung der Leistungen/ T|fffd|tigkeit" & Chr(10) & "Aufschl|fffd|sselung der Kostenpositionen]]"

    Range("Tab_Budget[Kostenstelle Nr.]").FormulaR1C1 = _
        "=IFERROR(INDEX(Tab_Kostenstellen[Kostenstelle Nr. korrigiert],MATCH(Tab_Budget[@[Kostenstelle Beschreibung]],Tab_Kostenstellen[Kostenstelle Arbeitspaket],0)),1)"

    Range("Tab_Budget[Kostenstelle Beschreibung]").FormulaR1C1 = _
        "=Tab_Budget[@Kostenstelle]&"" ""&Tab_Budget[@Arbeitspaket]"

    Range("Tab_Budget[von]").FormulaR1C1 = _
        "=MATCH(Tab_Budget[@Projekt],Tab_Kostenstellen[Projekt],0)"

    Range("Tab_Budget[bis]").FormulaR1C1 = _
        "=COUNTIF(Tab_Kostenstellen[Projekt],Tab_Budget[@Projekt])-1"

    Range("Tab_Budget[dropdown kostenstelle]").FormulaR1C1 = _
        "=""1Einstellungen!o""&Tab_Budget[@von]+5&"":o""&Tab_Budget[@von]+5+Tab_Budget[@bis]"

End Sub

Sub Budget_Fehler_filtern()

If Sheet1.Range("miss_budget").Value = 0 Then
    
    MsgBox ("Es gibt keine fehlenden Daten in der Tabelle.")
    
Else
    
    'Filter und Blattschutz aufheben
    Call Budget_delete_Filter
    
    'Spalte Check mit fehlenden Daten filtern (Filter=1)
    n = Sheet1.Range("budget_spalte_check").Value
    Sheet10.ListObjects("Tab_Budget").Range.AutoFilter Field:=n, Criteria1:="=1"
    
    'scroll
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    'Blattschutz
    Call Protect_Sheet
    
End If
    
End Sub
Sub Budget_Filter()
    
On Error Resume Next
    
    'Budget aufrufen
    Sheet10.Activate
    
    'entsperren
    Call Unprotect_Sheet
    
    Range("Budget_HEADER").Activate
    ActiveSheet.ShowAllData
    
    'Blattschutz aktivieren
    Call Protect_Sheet
    
End Sub
Sub Budget_delete_Filter()
    
On Error Resume Next
    
    'Budget aufrufen
    Sheet10.Activate
    
    'entsperren
    Call Unprotect_Sheet
    
    Range("Budget_HEADER").Activate
    ActiveSheet.ShowAllData
    
End Sub
Sub Budget_Formatierung_MwSt()

    Range("Tab_Budget[MwSt.-Satz]").NumberFormat = "0%"
    
End Sub
Sub Budget_ADD_row()
               
On Error GoTo fehler

    With Selection.Cells(1)
        
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
            'Budget aufrufen
            Sheet10.Activate
            'entsperren
            Call Unprotect_Sheet
                Range("Tab_Budget").ListObject.ListRows.Add AlwaysInsert:=True
                Call Budget_LNR_korrigieren
            Call Protect_Sheet
        Else
            'Budget aufrufen
            Sheet10.Activate
            'entsperren
            Call Unprotect_Sheet
                rng2.Insert Shift:=xlDown
                Call Budget_LNR_korrigieren
            Call Protect_Sheet
        End If
        
    End With
    
Exit Sub
fehler:
'Budget aufrufen
Sheet10.Activate
'entsperren
Call Unprotect_Sheet
Range("Tab_Budget").ListObject.ListRows.Add AlwaysInsert:=True
Call Budget_LNR_korrigieren
Call Protect_Sheet

End Sub
Sub Budget_DELETE_row()

If MsgBox("Wollen Sie die Zeile wirklich aus der Liste entfernen?", vbYesNo) = vbYes Then
    
'Budget aufrufen
Sheet10.Activate

'entsperren
Call Unprotect_Sheet
    
    Dim rng As Range
    
    With Selection.Cells(1)
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        On Error GoTo 0
        If rng Is Nothing Then
            MsgBox "Bitte klicken Sie zuerst auf die Kostenstelle, die Sie aus der Liste entfernen wollen.", vbCritical
        Else
            On Error Resume Next
            'Budget aufrufen
            Sheet10.Activate
            'entsperren
            Call Unprotect_Sheet
                ActiveSheet.ShowAllData
                rng.Delete xlShiftUp
            Call Budget_LNR_korrigieren
        End If
    End With

'Blattschutz on
Call Protect_Sheet

End If

End Sub
Sub Budget_LNR_korrigieren()

    Range("Tab_Budget[Unterkostenstelle Nr.]").FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
    Range("Tab_Budget[Kostenstelle Nr.]").FormulaR1C1 = "=IFERROR(IF(Tab_Budget[@Kostenstelle]<>R[-1]C[14],R[-1]C+1,R[-1]C),1)"
    Range("Tab_Budget[Lf.Nr.]").FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
    
    Range("Tab_Budget[MwSt.-Satz]").NumberFormat = "0%"
    Range("Tab_Budget[F|fffd|rdersatz]").NumberFormat = "0%"
    
End Sub
Sub Budget_BST_entsperren()

Dim pw As String
pw = InputBox("Bitte geben Sie das Passwort ein:")
   
    If pw = "R1t4" Then
    
        'Budget aufrufen
        Sheet10.Activate
        
        'entsperren
        Call Unprotect_Sheet
        
        'Tab_Budget Plausibilisierung/Anmerkung durch BST entsperren
        Range("spalte_BST1").Locked = False
        Range("spalte_BST2").Locked = False
        Range("spalte_BST3").Locked = False
        Range("spalte_BST4").Locked = False
    
        'sperren
        Call Protect_Sheet
        
        MsgBox ("Sie k|fffd|nnen nun die BST Spalten editieren. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Sie haben leider keinen Zugriff auf die Spalten der Bewilligungsstelle.")
                
    End If
    
End Sub
Sub Budget_BST_sperren()
    
    'Budget aufrufen
    Sheet10.Activate
    
    'entsperren
    Call Unprotect_Sheet
    
    'Tab_Budget Plausibilisierung/Anmerkung durch BST entsperren
    Range("spalte_BST1").Locked = True
    Range("spalte_BST2").Locked = True
    Range("spalte_BST3").Locked = True
    Range("spalte_BST4").Locked = True
    
    'sperren
    Call Protect_Sheet
    
End Sub

Sub Budget_Eingabespalten_()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet

    Range("Budget_eingabespalten").EntireColumn.Hidden = False
    Range("Budget_formelspalten").EntireColumn.Hidden = True

    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_Formelspalten_()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    Range("Budget_formelspalten").EntireColumn.Hidden = False
    Range("Budget_eingabespalten").EntireColumn.Hidden = True

    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_alleSpalten()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet

    Range("Budget_formelspalten").EntireColumn.Hidden = False
    Range("Budget_eingabespalten").EntireColumn.Hidden = False
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Blattschutz"
Sub Unprotect_ALL()

    Sheet3.Unprotect Password:="tnm" 'Finanztabelle
    Sheet4.Unprotect Password:="tnm" 'ZE
    Sheet5.Unprotect Password:="tnm" 'ZEG
    Sheet6.Unprotect Password:="tnm" 'Ausgaben
    Sheet7.Unprotect Password:="tnm" 'MA-Controlling
    Sheet8.Unprotect Password:="tnm" 'Einstellungen
    Sheet9.Unprotect Password:="tnm" 'ZA
    Sheet10.Unprotect Password:="tnm" 'Budget
    Sheet11.Unprotect Password:="tnm" 'Executive Summary
    Sheet14.Unprotect Password:="tnm" 'Controlling
    
End Sub
Sub Protect_ALL()
    
    'Tables
    Sheet3.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'Finanztabelle
    Sheet4.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'ZE
    Sheet5.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'ZEG
    Sheet6.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'Ausgaben
    Sheet8.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'Einstellungen
    Sheet10.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'Budget
    Sheet11.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True 'Executive Summary
       
    'select just unlocked
    Sheet3.EnableSelection = xlUnlockedCells
    Sheet4.EnableSelection = xlUnlockedCells
    Sheet5.EnableSelection = xlUnlockedCells
    Sheet6.EnableSelection = xlUnlockedCells
    Sheet8.EnableSelection = xlUnlockedCells
    Sheet10.EnableSelection = xlUnlockedCells
    Sheet11.EnableSelection = xlUnlockedCells
    
    'Pivottables
    Sheet7.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    Sheet9.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    Sheet14.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
    
End Sub
Sub Protect_Sheet()
Attribute Protect_Sheet.VB_ProcData.VB_Invoke_Func = " \n14"

    ActiveSheet.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True
    ActiveSheet.EnableSelection = xlUnlockedCells
    
End Sub
Sub Protect_Sheet_with_Piv()

    ActiveSheet.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True, AllowFormattingCells:=True
    ActiveSheet.EnableSelection = xlUnlockedCells
    
End Sub
Sub Unprotect_Sheet()

    ActiveSheet.Unprotect Password:="tnm"

End Sub
Sub Unprotect_Pivotrelevante()
    
    Sheet10.Unprotect Password:="tnm" 'Budget
    Sheet8.Unprotect Password:="tnm" 'Einstellungen
    Sheet3.Unprotect Password:="tnm" 'Finanztabelle
    Sheet14.Unprotect Password:="tnm" 'Controlling
    Sheet7.Unprotect Password:="tnm" 'Mitarbeitercontrolling
    Sheet9.Unprotect Password:="tnm" 'Zahlungsantrag
    
End Sub
Sub Protect_Pivotrelevante()

    Sheet10.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True
    Sheet8.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True
    Sheet3.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True
    Sheet14.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    Sheet7.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    Sheet9.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        
End Sub
Sub Unprotect_Einstellungen()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Budget aufrufen
        Sheet8.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Unprotect_Budget()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Budget aufrufen
        Sheet10.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Unprotect_Ausgaben()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Ausgaben aufrufen
        Sheet6.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Unprotect_Zeiterfassungen()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Zeiterfassungen aufrufen
        Sheet5.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Unprotect_Summary()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Executive Summary aufrufen
        Sheet11.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Unprotect_FT()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        On Error Resume Next
        Application.ScreenUpdating = False
       
        'Executive Summary aufrufen
        Sheet3.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoFalse
        
        'Blatt sperren
        Call Protect_Sheet
        
        'screen on
        Application.ScreenUpdating = True
        
        MsgBox ("Die Infobox ist nun entsperrt. Bitte vergessen Sie nicht, diese wieder zu sperren.")
               
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Infobox konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_FT()
    
On Error Resume Next
Application.ScreenUpdating = False

        'Executive Summary aufrufen
        Sheet3.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Call Protect_Sheet
    
Application.ScreenUpdating = True

End Sub
Sub Unprotect_ZE()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Executive Summary aufrufen
        Sheet4.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoFalse
        
        'Blatt sperren
        Call Protect_Sheet
        
        MsgBox ("Die Infobox ist nun entsperrt. Bitte vergessen Sie nicht, diese wieder zu sperren.")
               
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Infobox konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_ZE()

        'ZE Vorlage aufrufen
        Sheet4.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Call Protect_Sheet
    
End Sub
Sub Unprotect_ZE2()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Executive Summary aufrufen
        Sheet4.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Kurzanleitung")).Select
        Selection.LockedText = msoFalse
        
        'Blatt sperren
        Call Protect_Sheet
        
        MsgBox ("Die Infobox ist nun entsperrt. Bitte vergessen Sie nicht, diese wieder zu sperren.")
               
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Infobox konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_ZE2()

        'ZE aufrufen
        Sheet4.Activate
        
        'Blatt entsperren
        Call Unprotect_Sheet
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Kurzanleitung")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Call Protect_Sheet
    
End Sub
Sub Unprotect_Controlling()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Blatt entsperren
        Sheet14.Unprotect Password:="tnm"
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoFalse
        
        'Blatt sperren
        Sheet14.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True, AllowUsingPivotTables:=True
    
        MsgBox ("Die Infobox ist nun entsperrt. Bitte vergessen Sie nicht, diese wieder zu sperren.")
               
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Infobox konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_Controlling()
        
        'Blatt entsperren
        Sheet14.Unprotect Password:="tnm"
        
        'Infobox entsperren
        ActiveSheet.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Sheet14.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowFormattingCells:=True, AllowUsingPivotTables:=True
    
End Sub
Sub Unprotect_Mitarbeitercontrolling()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
        
        On Error Resume Next
        Application.ScreenUpdating = False
        
        'Blatt entsperren
        Sheet7.Unprotect Password:="tnm"
        
        'Infobox entsperren
        Sheet7.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoFalse
        
        'Blatt sperren
        Sheet7.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        
        Application.ScreenUpdating = True
        
        MsgBox ("Die Infobox ist nun entsperrt. Bitte vergessen Sie nicht, diese wieder zu sperren.")
               
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Infobox konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_Mitarbeitercontrolling()
        
On Error Resume Next
Application.ScreenUpdating = False

        'Blatt entsperren
        Sheet7.Unprotect Password:="tnm"
        
        'Infobox entsperren
        Sheet7.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Sheet7.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
Application.ScreenUpdating = True

End Sub
Sub Unprotect_ZA()

Dim pw As String
pw = InputBox("Bitte geben Sie das Admin Passwort ein:")
   
    If pw = "4m4" Then
    
        'Zeiterfassungen aufrufen
        Sheet9.Activate
        
        'entsperren
        Call Unprotect_Sheet

        MsgBox ("Die Seite ist nun entsperrt. Bitte vergessen Sie nicht, die Spalten wieder zu sperren.")
        
    Else
        
        MsgBox ("Das Passwort war leider falsch. Die Seite konnte leider nicht entsperrt werden.")
                
    End If
    
End Sub
Sub Protect_ZA()
        
On Error Resume Next
Application.ScreenUpdating = False

        'Blatt entsperren
        Sheet9.Unprotect Password:="tnm"
        
        'Infobox entsperren
        Sheet9.Shapes.Range(Array("Speech_Original")).Select
        Selection.LockedText = msoTrue
        
        'Blatt sperren
        Sheet9.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "CRC32"
' **********************************************************************
' *                                                                    *
' *                   32-Bit Cyclic Redundancy Check                   *
' *         Compute the CRC-32 checksum/hash value of a string         *
' *                                                                    *
' *  Weitere Informationen zu F|fffd|rderungen:                             *
' *      Bundesministerium f|fffd|r Nachhaltigkeit und Tourismus            *
' *      Stubenring 1 - 1010 Wien - |fffd|sterreich                         *
' *      http://www.bmnt.gv.at                                         *
' *                                                                    *
' *  Diese Kalkulationunterlagen wurden erstellt von:                  *
' *      AMA - Agrarmarkt Austria                                      *
' *      GB II/Abt.4/Ref.17 LE-Projekte                                *
' *      Dresdner Stra|fffd|e 70 - 1200 Wien - |fffd|sterreich                   *
' *      http://www.ama.gv.at                                          *
' *                                                                    *
' *                                           Version RL4 / 24.05.2019 *
' **********************************************************************
' * 89012345678901234567890123456789++98765432109876543210987654321098 *

' We shall require that all variables be explicitly defined
' (No automatic definition upon first use...)
Option Explicit

' **********************************************************************
' **********************************************************************

Private CRC32Table(0 To 255) As Long
Private CRC32TableInited As Boolean

' **********************************************************************
' *                                                                    *
' *                          InitCRC32Table()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Note: To speed up computation, we need a table that will allow us to
' add new data to our CRC32 value one byte at a time (rather than one
' bit at a time). This table is static and could theoretically be computed
' at compile-time.
' However Visual Basic for Applications does not support array constants.
' Thus we shall compute it once every time we load this workbook (and
' then remember the table in a private variable, that will get discarded
' when we close the workbook).
' Since the computation of the complete table takes just ~80us, this is
' not bad at all...
Private Sub InitCRC32Table()
  Dim I As Integer
  Dim J As Integer
  Dim Polynomial As Long
  Dim Code As Long
  
'  Debug.Print Format(Now, "hh:mm:ss") & " - InitCRC32Table()"
  If CRC32TableInited Then
    Exit Sub
  End If
  
  ' This is the official polynomial used by CRC-32 in PKZip, WinZip and Ethernet.
  ' p[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26,(32)}
  Polynomial = &HEDB88320   ' %1110 1101 1011 1000 1000 0011 0010 0000 (1)
 
  ' 256 possible values of 1 Byte
  For I = 0 To 255
    Code = I
    For J = 0 To 7
      If Code And 1 Then
        Code = (Int(Code / 2) And &H7FFFFFFF) Xor Polynomial
      Else
        Code = (Int(Code / 2) And &H7FFFFFFF)
      End If
    Next J
    CRC32Table(I) = Code
  Next I
  CRC32TableInited = True

End Sub ' InitCRC32Table()

' **********************************************************************
' *                                                                    *
' *                             CalcCRC32()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' * Compute the CRC32 Checksum for a String
' *
' * The CRC32 (Cyclic Redundancy CheckSum) CheckSum for a given string
' * is computed. CRC32 is a well known (and frequently used) method for
' * CheckSum computation. It is used (among other things) for ZIP, GZIP
' * and Ethernet packet integrity checks.\n
' * A detailed introduction to CRC32 computation can be found at:
' * http://www34.brinkster.com/dizzyk/math-crc.asp or at
' * https://en.wikipedia.org/wiki/Cyclic_redundancy_check or at
' * https://de.wikipedia.org/wiki/Zyklische_Redundanzpr%C3%BCfung
Function CalcCRC32(Msg As String, Optional Init As Long = 0)
  Dim MsgLen As Integer
  Dim MsgPos As Integer
  Dim C As Integer
  Dim CRC32 As Long
  
  If (Not CRC32TableInited) Then
    Call InitCRC32Table
  End If
  
  CRC32 = Init Xor &HFFFFFFFF
  
  MsgLen = Len(Msg)
  For MsgPos = 1 To MsgLen
    C = Asc(Mid(Msg, MsgPos, 1))
    CRC32 = (Int(CRC32 / 256) And &HFFFFFF) Xor CRC32Table((CRC32 And &HFF) Xor C)
  Next MsgPos
  
  CRC32 = CRC32 Xor &HFFFFFFFF
  CalcCRC32 = CRC32

#If False Then
  If (Init <> 0) Then
    Debug.Print Format(Now, "hh:mm:ss") & ": " & "CRC32(""" & Msg & """, " & _
         "0x" & Right("00000000" & Application.WorksheetFunction.Dec2Hex(Init), 8) & ") -> " & _
         "0x" & Right("00000000" & Application.WorksheetFunction.Dec2Hex(CRC32), 8)
  Else
    Debug.Print Format(Now, "hh:mm:ss") & ": " & "CRC32(""" & Msg & """) -> " & _
        "0x" & Right("00000000" & Application.WorksheetFunction.Dec2Hex(CRC32), 8)
  End If
#End If

End Function ' CalcCRC32()

' **********************************************************************
' *                                                                    *
' *                             CRC32Demo()                            *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
' Verfiy the correctness of this demo using:
'   https://crccalc.com/
Sub CRC32Demo()
  Dim Msg As String
  Dim CRC32 As Long
  
  ' DemoA: Compute the Checksum for the complete string at once
  Msg = "Excel CRC-32 Demo von Roland Lieger"
  CRC32 = CalcCRC32(Msg)
  Debug.Print "CRC32(""" & Msg & """) -> 0x" & Right("00000000" & Application.WorksheetFunction.Dec2Hex(CRC32), 8)
  
  ' DemoB: Compute the Checksum by computing the CRC32 of several
  '   substrings and carrying along the already computed partial
  '   result
  Msg = "Excel CRC-32 Demo von Roland Lieger"
  CRC32 = CalcCRC32(Left(Msg, 10))
  CRC32 = CalcCRC32(Mid(Msg, 11), CRC32)
  Debug.Print "CRC32(""" & Msg & """) -> 0x" & Right("00000000" & Application.WorksheetFunction.Dec2Hex(CRC32), 8)
End Sub ' CRC32Demo()

' **********************************************************************
' *                   32-Bit Cyclic Redundancy Check                   *
' **********************************************************************

Attribute VB_Name = "Controlling"
Sub Controlling_Brutto()
Attribute Controlling_Brutto.VB_ProcData.VB_Invoke_Func = " \n14"

Call Unprotect_Sheet

    Range("controlling_spalten_alle").EntireColumn.Hidden = False
    Range("controlling_spalten_netto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet_with_Piv

End Sub
Sub Controlling_Netto()

Call Unprotect_Sheet

    Range("controlling_spalten_alle").EntireColumn.Hidden = False
    Range("controlling_spalten_brutto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet_with_Piv

End Sub
Sub Controlling_alles()

Call Unprotect_Sheet

    Range("controlling_spalten_alle").EntireColumn.Hidden = False
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet_with_Piv

End Sub
Sub Controlling_Filter_Projekte()
    
    Sheet14.PivotTables("Piv_Controlling").PivotFields("Projekt").DrillTo "Projekt"
    
End Sub
Sub Controlling_Filter_Kostenstellen()
    
    Sheet14.PivotTables("Piv_Controlling").PivotFields("Projekt").DrillTo "Kostenstellen"
    
End Sub
Sub Controlling_Filter_Unterkostenstellen()
    
    Sheet14.PivotTables("Piv_Controlling").PivotFields("Projekt").DrillTo "Unterkostenstellen"
    
End Sub

Attribute VB_Name = "Einfuegen"
Sub Einfuegen_shortcut()
Attribute Einfuegen_shortcut.VB_ProcData.VB_Invoke_Func = "v\n14"

On Error Resume Next

    Selection.PasteSpecial Paste:=xlPasteValues
    
End Sub


Attribute VB_Name = "Einstellungen"
Sub Einstellungen_Fehler_filtern()

If Sheet8.Range("miss_einstellungen").Value = 0 Then
    
    MsgBox ("Es gibt keine fehlenden Daten in der Dropdown Tabelle.")
    
Else

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    'Spalte Check mit fehlenden Daten filtern (Filter=1)
    n = Sheet1.Range("einstellungen_Spalte_check").Value
    Sheet8.ListObjects("Tab_Kostenstellen").Range.AutoFilter Field:=n, Criteria1:="=1"
    ActiveWindow.ScrollRow = 1
    
    'on
    Application.EnableEvents = True
    
End If
    
End Sub
Sub Einstellungen_delete_Filter()
    
On Error Resume Next

    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    'alle Filter entfernen: kostenstellen, mitarbeiter, organisationen, partner, jahre, f|fffd|rderwerber, antragsnummer/vorhaben
    Range("einstellungen_header1").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header2").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header3").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header4").Activate
    ActiveSheet.ShowAllData
       
    Range("einstellungen_header5").Activate
    ActiveSheet.ShowAllData
        
    Range("einstellungen_header6").Activate
    ActiveSheet.ShowAllData
        
    Range("einstellungen_header7").Activate
    ActiveSheet.ShowAllData
    
    'Blattschutz aktivieren
    Call Protect_Sheet
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    'on
    Application.EnableEvents = True
    
End Sub
Sub Einstellungen_Filter()
    
On Error Resume Next
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    'alle Filter entfernen: kostenstellen, mitarbeiter, organisationen, partner, jahre, f|fffd|rderwerber, antragsnummer/vorhaben
    Range("einstellungen_header1").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header2").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header3").Activate
    ActiveSheet.ShowAllData
    
    Range("einstellungen_header4").Activate
    ActiveSheet.ShowAllData
       
    Range("einstellungen_header5").Activate
    ActiveSheet.ShowAllData
        
    Range("einstellungen_header6").Activate
    ActiveSheet.ShowAllData
        
    Range("einstellungen_header7").Activate
    ActiveSheet.ShowAllData
    
End Sub
Sub Einstellungen_DeleteRow_foerderwerber()

antwort = MsgBox("Wollen Sie alle F|fffd|rderwerber entfernen? Falls Sie nur den selektierten entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Foerderwerber").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_foerderwerber").Activate
    
    'Blattschutz an
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
    Set Bereich = Application.Intersect(Range("Tab_Foerderwerber"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keinen F|fffd|rderwerber markiert, den Sie entfernen wollen.")
                
    Else
    
        Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keinen F|fffd|rderwerber markiert, den Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                Application.EnableEvents = False
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                rng.Delete xlShiftUp
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Foerderwerber"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_foerderwerber").Value = 0 Then
                        Range("ende_foerderwerber").Activate
                    Else
                        Range("letzte_foerderwerber").Activate
                    End If
                End If
                Call Protect_Sheet
                Application.EnableEvents = True
            End If
        End With
    
    End If
    
End If

End Sub
Sub Einstellungen_DeleteRow_ANR()

antwort = MsgBox("Wollen Sie alle Antragsnummern entfernen? Falls Sie nur die selektierte entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Antragsnummern").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_ANR").Activate
    
    'Blattschutz an
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
    Set Bereich = Application.Intersect(Range("Tab_Antragsnummern"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keine Antragsnummer markiert, die Sie entfernen wollen.")
                
    Else
    
Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keine Antragsnummer markiert, die Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                Application.EnableEvents = False
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                rng.Delete xlShiftUp
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Antragsnummern"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_ANR").Value = 0 Then
                        Range("ende_ANR").Activate
                    Else
                        Range("letzte_ANR").Activate
                    End If
                End If
                Call Protect_Sheet
                Application.EnableEvents = True
            End If
        End With
    
    End If
    
End If

End Sub
Sub Einstellungen_DeleteRow_Kostenstelle()

antwort = MsgBox("Wollen Sie alle Kostenstellen entfernen? Falls Sie nur die selektierte entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Kostenstellen").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_kostenstellen").Activate
    
    'Blattschutz an
    Call Protect_Sheet
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle F|fffd|rderwerber ist
    Set Bereich = Application.Intersect(Range("Tab_Kostenstellen"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keine Kostenstelle markiert, die Sie entfernen wollen.")
                
    Else
    
        Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keine Kostenstelle markiert, die Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                'Zeile entfernen
                rng.Delete xlShiftUp
                'Pivot Projekte aktualisieren
                Sheet1.PivotTables("Piv_E_Projekte").PivotCache.Refresh
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Kostenstelle"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_kostenstellen").Value = 0 Then
                        Range("ende_kostenstellen").Activate
                    Else
                        Range("letzte_kostenstellen").Activate
                    End If
                End If
                Call Protect_Sheet
            End If
        End With
    
    End If
    
End If

End Sub
Sub Einstellungen_DeleteRow_Mitarbeiter()

antwort = MsgBox("Wollen Sie alle Mitarbeiter entfernen? Falls Sie nur den selektierten entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Mitarbeiter").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_mitarbeiter").Activate
    
    'Blattschutz an
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
    Set Bereich = Application.Intersect(Range("Tab_Mitarbeiter"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keinen Mitarbeiter markiert, den Sie entfernen wollen.")
                
    Else
    
 Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keinen Mitarbeiter markiert, den Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                Application.EnableEvents = False
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                rng.Delete xlShiftUp
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Mitarbeiter"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_mitarbeiter").Value = 0 Then
                        Range("ende_mitarbeiter").Activate
                    Else
                        Range("letzte_mitarbeiter").Activate
                    End If
                End If
                Call Protect_Sheet
                Application.EnableEvents = True
            End If
        End With
    
    End If
    
End If

End Sub
Sub Einstellungen_DeleteRow_Organisation()

antwort = MsgBox("Wollen Sie alle Organisationen entfernen? Falls Sie nur die selektierte entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Organisationen").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_organisation").Activate
    
    'Blattschutz an
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
    Set Bereich = Application.Intersect(Range("Tab_Organisationen"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keine Organisation markiert, die Sie entfernen wollen.")
                
    Else
    
Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keine Organisation markiert, die Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                Application.EnableEvents = False
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                rng.Delete xlShiftUp
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Organisationen"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_organisationen").Value = 0 Then
                        Range("ende_organisation").Activate
                    Else
                        Range("letzte_organisation").Activate
                    End If
                End If
                Call Protect_Sheet
                Application.EnableEvents = True
            End If
        End With
    
    End If
    
End If

End Sub
Sub Einstellungen_DeleteRow_Partner()

antwort = MsgBox("Wollen Sie alle Partner entfernen? Falls Sie nur den selektierten entfernen wollen, klicken Sie bitte auf *nein*.", vbYesNoCancel)

If antwort = vbYes Then

    On Error Resume Next
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
    
    With Range("Tab_Partner").ListObject
        If Not .DataBodyRange Is Nothing Then
            .DataBodyRange.Delete
            .ListRows.Add (1)
        End If
    End With
    
    Range("ende_partner").Activate

    'Blattschutz an
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
ElseIf antwort = vbNo Then
    
    'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
    Set Bereich = Application.Intersect(Range("Tab_Partner"), Range(ActiveCell.Address))
    
    If Bereich Is Nothing Then
            
        MsgBox ("Sie haben keinen Partner markiert, den Sie entfernen wollen.")
                
    Else
    
Dim rng As Range
        
        On Error Resume Next
        With Selection.Cells(1)
            Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
            On Error GoTo 0
            If rng Is Nothing Then
                MsgBox "Sie haben keinen Partner markiert, den Sie entfernen wollen.", vbCritical
            Else
                On Error Resume Next
                Application.EnableEvents = False
                'Einstellungen aufrufen
                Sheet8.Activate
                'Blattschutz aufheben
                Call Unprotect_Sheet
                rng.Delete xlShiftUp
                'Pr|fffd|fen, ob Zelle innerhalb der Tabelle ist
                Set Bereich2 = Application.Intersect(Range("Tab_Partner"), Range(ActiveCell.Address))
                If Bereich2 Is Nothing Then
                    If Range("sum_partner").Value = 0 Then
                        Range("ende_partner").Activate
                    Else
                        Range("letzte_partner").Activate
                    End If
                End If
                Call Protect_Sheet
                Application.EnableEvents = True
            End If
        End With
        
    End If
    
End If

End Sub
Sub Einstellungen_AddRow_Foerderwerber()
    
'Pr|fffd|fen, ob Zelle innerhalb der Tabelle F|fffd|rderwerber ist
Set Bereich = Application.Intersect(Range("Tab_Foerderwerber"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
            
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_Foerderwerber").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_foerderwerber").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_Foerderwerber").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If
    
Exit Sub
fehler:
Call Unprotect_Sheet
Range("Tab_Foerderwerber").ListObject.ListRows.Add AlwaysInsert:=True
Call Protect_Sheet

End Sub
Sub Einstellungen_AddRow_Antragsnummern()
    
'Pr|fffd|fen, ob Zelle innerhalb der Tabelle Antragsnr. ist
Set Bereich = Application.Intersect(Range("Tab_Antragsnummern"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
            
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_Antragsnummern").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_ANR").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'on
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_Antragsnummern").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If

Exit Sub
fehler:
Call Unprotect_Sheet
Range("Tab_Antragsnummern").ListObject.ListRows.Add AlwaysInsert:=True
Call Protect_Sheet

End Sub
Sub Einstellungen_AddRow_Mitarbeiter()
    
'Pr|fffd|fen, ob Zelle innerhalb der Tabelle Mitarbeiter ist
Set Bereich = Application.Intersect(Range("Tab_Mitarbeiter"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
            
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_mitarbeiter").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_mitarbeiter").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'off
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_mitarbeiter").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If

Exit Sub
fehler:
Application.EnableEvents = True
Call Unprotect_Sheet
Range("Tab_mitarbeiter").ListObject.ListRows.Add AlwaysInsert:=True
Call Protect_Sheet

End Sub
Sub Einstellungen_AddRow_Kostenstellen()
    
'Pr|fffd|fen, ob Zelle innerhalb der Tabelle KS ist
Set Bereich = Application.Intersect(Range("Tab_Kostenstellen"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
    
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_Kostenstellen").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_kostenstellen").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'off
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_Kostenstellen").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If

Exit Sub
fehler:
Call Unprotect_Sheet
Range("Tab_Kostenstellen").ListObject.ListRows.Add AlwaysInsert:=True
Call Einstellungen_LNR_korrigieren
Call Protect_Sheet

End Sub

Sub Einstellungen_AddRow_Organisationen()
    
'Pr|fffd|fen, ob Zelle innerhalb der Tabelle Organisation ist
Set Bereich = Application.Intersect(Range("Tab_Organisationen"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
            
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_Organisationen").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_organisation").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'off
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_Organisationen").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If

Exit Sub
fehler:
Application.EnableEvents = True
Call Unprotect_Sheet
Range("Tab_Organisationen").ListObject.ListRows.Add AlwaysInsert:=True
Call Protect_Sheet

End Sub
Sub Einstellungen_AddRow_Partner()

'Pr|fffd|fen, ob Zelle innerhalb der Tabelle Partner ist
Set Bereich = Application.Intersect(Range("Tab_Partner"), Range(ActiveCell.Address))
    
If Bereich Is Nothing Then
            
    'off
    Application.EnableEvents = False
    
    'Einstellungen aufrufen
    Sheet8.Activate
    
    'Blattschutz aufheben
    Call Unprotect_Sheet
            
    'Zeile am Tabellenende hinzuf|fffd|gen
    Range("Tab_Partner").ListObject.ListRows.Add AlwaysInsert:=True
            
    'Zeile ausw|fffd|hlen
    Range("ende_partner").Activate
            
    'Blattschutz
    Call Protect_Sheet
    
    'off
    Application.EnableEvents = True
    
Else

    On Error GoTo fehler

    'off
    Application.EnableEvents = False
    
    With Selection.Cells(1)
        
    Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
    Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile am Tabellenende einf|fffd|gen
            Range("Tab_Partner").ListObject.ListRows.Add AlwaysInsert:=True
            
            'Blattschutz
            Call Protect_Sheet
            
        Else
    
            'Einstellungen aufrufen
            Sheet8.Activate
            
            'Blattschutz aufheben
            Call Unprotect_Sheet
            
            'Zeile dazwischen einf|fffd|gen
            rng2.Insert Shift:=xlDown
            
            'Blattschutz
            Call Protect_Sheet
            
        End If
        
    End With
    
    'on
    Application.EnableEvents = True
                
End If

Exit Sub
fehler:
Application.EnableEvents = True
Call Unprotect_Sheet
Range("Tab_Partner").ListObject.ListRows.Add AlwaysInsert:=True
Call Protect_Sheet

End Sub

Sub Einstellungen_LNR_korrigieren()
    
    Range("Tab_Kostenstellen[Kostenstelle Nr. korrigiert]").FormulaR1C1 = _
        "=LEFT(Tab_Kostenstellen[@Kostenstelle],FIND(""."",Tab_Kostenstellen[@Kostenstelle])-1)*1"

    Range("Tab_Kostenstellen[Kostenstelle Arbeitspaket]").FormulaR1C1 = _
        "=TRIM(CLEAN(Tab_Kostenstellen[@Kostenstelle]&"" ""&Tab_Kostenstellen[@Arbeitspaket]))"

    Range("Tab_Kostenstellen[Check]").FormulaR1C1 = _
        "=IF(OR(RIGHT(Tab_Kostenstellen[@Projekt],1)="" "",RIGHT(Tab_Kostenstellen[@Kostenstelle],1)="" "",RIGHT(Tab_Kostenstellen[@Arbeitspaket],1)="" ""),1,IF(COUNTA(Tab_Kostenstellen[@Projekt],Tab_Kostenstellen[@Kostenstelle],Tab_Kostenstellen[@Arbeitspaket])=3,0,1))"
    
End Sub

Sub Einstellungen_Pivot_aktualisieren()
    
    'Blattschutz OFF
    Call Unprotect_Pivotrelevante
    
    'Kostenstellen aktualisieren: Piv in Einstellungen
    Sheet8.PivotTables("Piv_dropdown4").PivotCache.Refresh
    
    'Zeilenumbruch in Pivottabelle f|fffd|r Kostenstellen und Unterkostenstellen
    Sheet8.PivotTables("Piv_dropdown4").PivotSelect "", xlDataAndLabel, True
        With Selection
            .WrapText = True
        End With
    
    'Blattschutz ON
    Call Protect_Pivotrelevante
    
End Sub
Attribute VB_Name = "Finanztabelle"
Sub Dateipfad_ermitteln()

On Error Resume Next

    Sheet3.Range("FT_pfad") = ThisWorkbook.Path & "\"
    
End Sub
Sub Finanztabelle_genehmigen()

Dim pw As String
pw = InputBox("Bitte geben Sie das Passwort ein:")
   
    If pw = "R1t4" Then
    
        On Error Resume Next
            
            'off
            Call CALC_OFF
            
            'entperren
            Call Unprotect_Pivotrelevante
                       
            'Piv_Finanztabelle aktualisieren
            Sheet3.PivotTables("Piv_Finanztabelle").PivotCache.Refresh
            
            'zuletzt genehmigt am aus Einstellungen (FT_jetzt) in Finanztabelle (FT_importiert_am)
            Sheet3.Range("FT_importiert_am").Value = Sheet1.Range("FT_jetzt").Value
            
            'sperren
            Call Protect_Pivotrelevante
            
            'Sheet Finanztabelle aufrufen
            Sheet3.Visible = True
            Sheet3.Activate
            
            'on
            Call CALC_ON
   
    Else
        Call CALC_ON
        MsgBox ("Das Passwort war leider falsch. Die Finanztabelle kann deshalb nicht genehmigt werden.")

    End If

End Sub

Attribute VB_Name = "Links"


Sub alle_ausblenden()
    
    Sheet3.Visible = False
    Sheet4.Visible = False
    Sheet5.Visible = False
    Sheet6.Visible = False
    Sheet7.Visible = False
    Sheet8.Visible = False
    Sheet9.Visible = False
    Sheet10.Visible = False
    Sheet11.Visible = False
    Sheet12.Visible = False
    Sheet13.Visible = False
    Sheet14.Visible = False
    
    '|fffd|bersicht aufrufen
    Sheet2.Visible = True
    Sheet2.Activate
    
    Range("home_start").Activate
    
End Sub
Sub Link_HOME()

Application.ScreenUpdating = False
    
    Sheet2.Visible = True
    Sheet2.Activate
    
Application.ScreenUpdating = True
    
End Sub
Sub Link_Budget()

Application.ScreenUpdating = False
    
    Call Budget_Pivot_aktualisieren
    
    Sheet10.Visible = True
    Sheet10.Activate
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
    
End Sub
Sub Link_Budget_BACK()

Application.ScreenUpdating = False
    
    Sheet10.Visible = True
    Sheet10.Activate
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True

End Sub
Sub Link_Finanztabelle()
Attribute Link_Finanztabelle.VB_ProcData.VB_Invoke_Func = " \n14"

On Error Resume Next

Application.ScreenUpdating = False

    Sheet3.Visible = True
    Sheet3.Activate
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True

End Sub
Sub Link_Infos()

On Error Resume Next

Application.ScreenUpdating = False

    Sheet8.Visible = True
    Sheet8.Activate
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True

End Sub
Sub Link_ZE()

On Error Resume Next
    
    Application.ScreenUpdating = False
    
    Sheet4.Visible = True
    Sheet4.Activate
        
    Call ZE_dropdown_aktualisieren 'neue dropdowns integrieren
    Call ZE_aktualisieren 'Standard herstellen
    Call Protect_Sheet
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    Application.ScreenUpdating = True

End Sub
Sub Link_ZE_back()

    Sheet4.Visible = True
    Sheet4.Activate
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
End Sub
Sub Link_ZEG()

On Error Resume Next

Application.ScreenUpdating = False
Application.EnableEvents = False
    
    'Dropdow Rechnungsleger aktualisieren
    Call Ausgaben_Pivots_aktualisieren
    
    Sheet5.Visible = True
    Sheet5.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub
Sub Link_ZEG_back()

On Error Resume Next

Application.ScreenUpdating = False
Application.EnableEvents = False
    
    Sheet5.Visible = True
    Sheet5.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub
Sub Link_Ausgaben()

On Error Resume Next

Application.ScreenUpdating = False

    Sheet6.Visible = True
    Sheet6.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
    
End Sub

Sub Link_ZA_BACK()

On Error Resume Next

Application.EnableEvents = False

    Sheet9.Visible = True
    Sheet9.Activate
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
Application.EnableEvents = True

End Sub
Sub Link_ZA_1()

On Error Resume Next
    
Application.EnableEvents = False
Application.ScreenUpdating = False
    
    Sheet9.Visible = True
    Sheet9.Activate
    
    Call Unprotect_Sheet
   
    Sheet9.PivotTables("Piv_ZA_Ausgaben").PivotCache.Refresh
    Sheet9.PivotTables("Piv_ZA_Ausgaben").ClearAllFilters
    Sheet9.PivotTables("Piv_ZA_Ausgaben").PivotFields("Nr.ZA").CurrentPage = ""
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    Call Protect_Sheet_with_Piv
    
Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub
Sub Link_ZA_2()
    
On Error Resume Next

    Call CALC_OFF
    Call Unprotect_Pivotrelevante
    
    'piv
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotCache.Refresh
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").ClearAllFilters
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotFields("ZA Beleg").CurrentPage = "1"
            
    'sheet
    Sheet9.Visible = True
    Sheet9.Activate
    
    'scroll
    ActiveWindow.ScrollColumn = 48
    ActiveWindow.ScrollRow = 1
    
    Call Protect_Sheet_with_Piv
    Call CALC_ON

End Sub
Sub Link_Summary()

On Error Resume Next

Application.ScreenUpdating = False

    Sheet11.Visible = True
    Sheet11.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True

End Sub
Sub Link_Controlling()

On Error Resume Next

Application.ScreenUpdating = False

    Sheet14.Visible = True
    Sheet14.Activate
    
    Call Controlling_Pivots_aktualisieren
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    MsgBox ("Controlling wurde soeben aktualisiert.")
    
Application.ScreenUpdating = True
    
End Sub
Sub Link_Controlling_BACK()

On Error Resume Next

Application.EnableEvents = False
Application.ScreenUpdating = False

    Sheet14.Visible = True
    Sheet14.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub

Sub Link_Mitarbeitercontrolling()

On Error Resume Next
    
    Call CALC_OFF
    
    Sheet7.Visible = True
    Sheet7.Activate
    
    Call Mitarbeitercontrolling_Pivots_aktualisieren
    
    Call CALC_ON
    
    MsgBox ("Mitarbeitercontrolling wurde soeben aktualisiert.")
    
End Sub
Sub Link_Mitarbeitercontrolling_BACK()

On Error Resume Next

Application.EnableEvents = False
Application.ScreenUpdating = False
    
    Sheet14.Visible = True
    Sheet14.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub
Sub Link_Controlling2()

On Error Resume Next
    
    Call CALC_OFF

    Sheet14.Visible = True 'MA-Controlling
    Sheet7.Visible = True 'Controlling
    Sheet7.Activate

    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    Call CALC_ON
    
End Sub
Attribute VB_Name = "Mitarbeitercontrolling"
Sub Mitarbeitercontrolling_Filter_Projekte()

    Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt").DrillTo "Projekt"
     
End Sub
Sub Mitarbeitercontrolling_Filter_Kostenstellen()

    Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt").DrillTo "Kostenstelle"
     
End Sub
Sub Mitarbeitercontrolling_Filter_Unterkostenstellen()
    
    Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt").DrillTo "Unterkostenstelle"
     
End Sub
Sub Mitarbeitercontrolling_Filter_Mitarbeiter()

    Sheet7.PivotTables("Piv_Mitarbeitercontrolling").PivotFields("Projekt").DrillTo "Mitarbeiter/ externes Personal"
    
End Sub
Attribute VB_Name = "Modul_Buttons"
Sub Budget_Buttons_weiss()
Attribute Budget_Buttons_weiss.VB_ProcData.VB_Invoke_Func = " \n14"
    
    'Hintergrund wei|fffd|
    Sheet10.Shapes("Button_alles").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_iPK").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_ePK").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_SK").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_IK").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_GK").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_BST").Fill.ForeColor.RGB = RGB(255, 255, 255)

    'Schrift schwarz
    Sheet10.Shapes("Button_alles").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_iPK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_ePK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_SK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_IK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_GK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_BST").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    
End Sub
Sub Budget_Button_alles()
    
    'alle Buttons Hintergrund wei|fffd|, Schrift schwarz einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_alles").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_alles").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 1
    
End Sub
Sub Budget_Button_iPK()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_iPK").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_iPK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 2
        
End Sub
Sub Budget_Button_ePK()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_ePK").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_ePK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 3
        
End Sub
Sub Budget_Button_SK()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_SK").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_SK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 4
        
End Sub
Sub Budget_Button_IK()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_IK").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_IK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 5
        
End Sub
Sub Budget_Button_GK()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_GK").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_GK").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 6
        
End Sub
Sub Budget_Button_BST()
    
    'alle Buttons Hintergrund wei|fffd| einf|fffd|rben
    Call Budget_Buttons_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_bst").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_bst").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
    
    'zuordnung
    Range("budget_button_nr2") = 7
        
End Sub
Sub Budget_Buttons_bruttonetto_weiss()
    
    'Hintergrund wei|fffd|
    Sheet10.Shapes("Button_brutto_netto").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_brutto").Fill.ForeColor.RGB = RGB(255, 255, 255)
    Sheet10.Shapes("Button_netto").Fill.ForeColor.RGB = RGB(255, 255, 255)

    'Schrift schwarz
    Sheet10.Shapes("Button_brutto_netto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_brutto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    Sheet10.Shapes("Button_netto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
    
End Sub
Sub Budget_Button_bruttonetto()
    
    'alle Buttons Hintergrund wei|fffd|, Schrift schwarz einf|fffd|rben
    Call Budget_Buttons_bruttonetto_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_brutto_netto").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_brutto_netto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
                
    'Zuordnung f|fffd|r Spalten brutto/netto
    Range("budget_button_nr") = 1
    
End Sub
Sub Budget_Button_brutto()
    
    'alle Buttons Hintergrund wei|fffd|, Schrift schwarz einf|fffd|rben
    Call Budget_Buttons_bruttonetto_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_brutto").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_brutto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
            
    'Zuordnung f|fffd|r Spalten brutto/netto
    Range("budget_button_nr") = 2
    
End Sub
Sub Budget_Button_netto()
    
    'alle Buttons Hintergrund wei|fffd|, Schrift schwarz einf|fffd|rben
    Call Budget_Buttons_bruttonetto_weiss
    
    'Hintergrund rot, Schrift wei|fffd|
    Sheet10.Shapes("Button_netto").Fill.ForeColor.RGB = RGB(206, 22, 41)
    Sheet10.Shapes("Button_netto").TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
            
    'Zuordnung f|fffd|r Spalten brutto/netto
    Range("budget_button_nr") = 3
    
End Sub
Sub Budget_Brutto()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
        
'Buttons umf|fffd|rben
Call Budget_Button_brutto
 
    If Range("budget_button_nr2") = 1 Then 'alles
    
        Range("Budget_spalten_brutto").EntireColumn.Hidden = False
        Range("Budget_spalten_netto").EntireColumn.Hidden = True
    
    ElseIf Range("budget_button_nr2") = 2 Then 'iPK
        
        Call Budget_iPK
        
    ElseIf Range("budget_button_nr2") = 3 Then 'ePK
        
        Call Budget_ePK
        
    ElseIf Range("budget_button_nr2") = 4 Then 'SK
        
        Call Budget_SK
            
    ElseIf Range("budget_button_nr2") = 5 Then 'IK
        
        Call Budget_IK
            
    ElseIf Range("budget_button_nr2") = 6 Then 'GK
        
        Call Budget_GK
    
    ElseIf Range("budget_button_nr2") = 7 Then 'BST
        
        Call Budget_BST
        
    End If

ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_Netto()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
        
'Buttons umf|fffd|rben
Call Budget_Button_netto
 
    If Range("budget_button_nr2") = 1 Then 'alles
    
        Range("Budget_spalten_netto").EntireColumn.Hidden = False
        Range("Budget_spalten_brutto").EntireColumn.Hidden = True
    
    ElseIf Range("budget_button_nr2") = 2 Then 'iPK
        
        Call Budget_iPK
        
    ElseIf Range("budget_button_nr2") = 3 Then 'ePK
        
        Call Budget_ePK
        
    ElseIf Range("budget_button_nr2") = 4 Then 'SK
        
        Call Budget_SK
            
    ElseIf Range("budget_button_nr2") = 5 Then 'IK
        
        Call Budget_IK
            
    ElseIf Range("budget_button_nr2") = 6 Then 'GK
        
        Call Budget_GK
    
    ElseIf Range("budget_button_nr2") = 7 Then 'BST
        
        Call Budget_BST
        
    End If

ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_alles()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
   
'Buttons umf|fffd|rben
Call Budget_Button_bruttonetto
     
    If Range("budget_button_nr2") = 1 Then 'alles
    
        Range("Budget_spalten_alle").EntireColumn.Hidden = False
        
    ElseIf Range("budget_button_nr2") = 2 Then 'iPK
        
        Call Budget_iPK
        
    ElseIf Range("budget_button_nr2") = 3 Then 'ePK
        
        Call Budget_ePK
        
    ElseIf Range("budget_button_nr2") = 4 Then 'SK
        
        Call Budget_SK
            
    ElseIf Range("budget_button_nr2") = 5 Then 'IK
        
        Call Budget_IK
            
    ElseIf Range("budget_button_nr2") = 6 Then 'GK
        
        Call Budget_GK
    
    ElseIf Range("budget_button_nr2") = 7 Then 'BST
        
        Call Budget_BST
        
    End If
  
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_spalten_ausblenden()
    
    'ausblenden
    Range("spalten_budget_iPK").EntireColumn.Hidden = True
    Range("spalten_budget_ePK").EntireColumn.Hidden = True
    Range("spalten_budget_IK").EntireColumn.Hidden = True
    Range("spalten_budget_SK").EntireColumn.Hidden = True
    Range("spalten_budget_GK").EntireColumn.Hidden = True
    Range("spalten_budget_BST").EntireColumn.Hidden = True
        
End Sub
Sub Budget_iPK()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
 
    'ausblenden
    Call Budget_spalten_ausblenden
            
    'einblenden
    Range("spalten_budget_iPK").EntireColumn.Hidden = False
                
    'einf|fffd|rben
    Call Budget_Button_iPK
    
ActiveWindow.ScrollColumn = 26
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

Application.ScreenUpdating = True

End Sub
Sub Budget_ePK()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    If Range("budget_button_nr") = 1 Then 'brutto+netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
            
        'einblenden
        Range("spalten_budget_ePK").EntireColumn.Hidden = False
                
    ElseIf Range("budget_button_nr") = 2 Then 'brutto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_ePK_brutto").EntireColumn.Hidden = False
                    
    ElseIf Range("budget_button_nr") = 3 Then 'netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_ePK_netto").EntireColumn.Hidden = False
        
    End If
                
'einf|fffd|rben
Call Budget_Button_ePK
                            
ActiveWindow.ScrollColumn = 31
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_SK()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    If Range("budget_button_nr") = 1 Then 'brutto+netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
            
        'einblenden
        Range("spalten_budget_SK").EntireColumn.Hidden = False
                
    ElseIf Range("budget_button_nr") = 2 Then 'brutto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_SK_brutto").EntireColumn.Hidden = False
                    
    ElseIf Range("budget_button_nr") = 3 Then 'netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_SK_netto").EntireColumn.Hidden = False
        
    End If
                
'einf|fffd|rben
Call Budget_Button_SK
               
ActiveWindow.ScrollColumn = 39
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_IK()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    If Range("budget_button_nr") = 1 Then 'brutto+netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
            
        'einblenden
        Range("spalten_budget_IK").EntireColumn.Hidden = False
                
    ElseIf Range("budget_button_nr") = 2 Then 'brutto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_IK_brutto").EntireColumn.Hidden = False
                    
    ElseIf Range("budget_button_nr") = 3 Then 'netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_IK_netto").EntireColumn.Hidden = False
        
    End If
                
'einf|fffd|rben
Call Budget_Button_IK
                 
ActiveWindow.ScrollColumn = 46
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_GK()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    If Range("budget_button_nr") = 1 Then 'brutto+netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
            
        'einblenden
        Range("spalten_budget_GK").EntireColumn.Hidden = False
                
    ElseIf Range("budget_button_nr") = 2 Then 'brutto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_GK_brutto").EntireColumn.Hidden = False
                    
    ElseIf Range("budget_button_nr") = 3 Then 'netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_GK_netto").EntireColumn.Hidden = False
        
    End If
                
'einf|fffd|rben
Call Budget_Button_GK
                 
ActiveWindow.ScrollColumn = 27
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_BST()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    If Range("budget_button_nr") = 1 Then 'brutto+netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
            
        'einblenden
        Range("spalten_budget_BST").EntireColumn.Hidden = False
                
    ElseIf Range("budget_button_nr") = 2 Then 'brutto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_BST_brutto").EntireColumn.Hidden = False
                    
    ElseIf Range("budget_button_nr") = 3 Then 'netto
    
        'ausblenden
        Call Budget_spalten_ausblenden
        
        'einblenden
        Range("spalten_budget_BST_netto").EntireColumn.Hidden = False
        
    End If
                
'einf|fffd|rben
Call Budget_Button_BST
             
ActiveWindow.ScrollColumn = 64
ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Sub Budget_alle()

On Error Resume Next
Application.ScreenUpdating = False
Call Unprotect_Sheet
    
    'einblenden
    Range("spalten_budget_iPK").EntireColumn.Hidden = False
    Range("spalten_budget_ePK").EntireColumn.Hidden = False
    Range("spalten_budget_IK").EntireColumn.Hidden = False
    Range("spalten_budget_SK").EntireColumn.Hidden = False
    Range("spalten_budget_GK").EntireColumn.Hidden = False
    Range("spalten_budget_BST").EntireColumn.Hidden = False
    
    'umf|fffd|rben
    Call Budget_Button_alles
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet
Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub ZE_Unprotect()

    Sheet4.Unprotect Password:="tnm"

End Sub
Sub ZE_Protect()
    
    Sheet4.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True
    Sheet4.EnableSelection = xlUnlockedCells
    
End Sub
Sub ZE_Filter()

On Error Resume Next
    
    'Unprotect
    Call Sheet4.ZE_Unprotect
    
    'Filter l|fffd|schen
    Sheet4.Activate
    Range("ZE_HEAD").Activate
    Sheet4.ShowAllData
    ActiveWindow.ScrollRow = 1
    
     'Protect
    Call Sheet4.ZE_Protect
    
End Sub

Sub ZE_Filter_entfernen()

On Error Resume Next
    
    'Unprotect
    Call Sheet4.ZE_Unprotect
    
    'Filter l|fffd|schen
    Sheet4.Activate
    Range("ZE_HEAD").Activate
    Sheet4.ShowAllData
    
End Sub
Sub ZE_Monat1()
   
    Call ZE_Filter_entfernen
    
    'J|fffd|nner filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="1"
                    
     'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Monat2()

    Call ZE_Filter_entfernen
    
    'Februar filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="2"
                    
     'Protect
    Call Sheet4.ZE_Protect
    
End Sub
Sub ZE_Monat3()

    Call ZE_Filter_entfernen
                    
    'M|fffd|rz filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="3"
                    
     'Protect
    Call Sheet4.ZE_Protect

End Sub
Sub ZE_Monat4()

    Call ZE_Filter_entfernen
            
    'Spril filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="4"
                    
    'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Monat5()

    Call ZE_Filter_entfernen
                    
    'Mai filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="5"
                    
    'Protect
    Call Sheet4.ZE_Protect
         
End Sub
Sub ZE_Monat6()

    Call Sheet4.ZE_Filter_entfernen
                    
    'Juni filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="6"
                     
    'Protect
    Call Sheet4.ZE_Protect
       
End Sub
Sub ZE_Monat7()

    Call Sheet4.ZE_Filter_entfernen
                    
    'Juli filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="7"
                    
    'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Monat8()

    Call ZE_Filter_entfernen
                    
    'August filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="8"
                    
    'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Monat9()

    Call ZE_Filter_entfernen
                   
    'September filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="9"
                     
    'Protect
    Call Sheet4.ZE_Protect
       
End Sub
Sub ZE_Monat10()

    Call ZE_Filter_entfernen
                    
    'Oktober filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="10"
                    
    'Protect
    Call Sheet4.ZE_Protect
         
End Sub
Sub ZE_Monat11()

    Call ZE_Filter_entfernen
                   
    'November filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="11"
                    
    'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Monat12()

    Call ZE_Filter_entfernen
                    
    'Dezember filtern
    n = Range("ZE_spalte_monat").Value
    Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="12"
                    
    'Protect
    Call Sheet4.ZE_Protect
        
End Sub
Sub ZE_Datum_ADD()
                
If MsgBox("Wollen Sie das ausgew|fffd|hlte Datum in der Liste duplizieren?", vbYesNo) = vbYes Then

 Call Sheet4.ZE_Unprotect

    Dim rng As Range
    Dim rng2 As Range 'Zeile unterhalb
    Dim rng3 As Range 'Datum aktuell
    Dim rng4 As Range 'Datum unterhalb
    
    With Selection.Cells(1)
        On Error GoTo fehler
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        Set rng3 = Range("H" & ActiveCell.Row)
        Set rng4 = Range("H" & ActiveCell.Offset(1, 0).Row)
        
        If rng Is Nothing Then
            MsgBox "Bitte klicken Sie zuerst auf das Datum, das Sie in der Liste duplizieren m|fffd|chten.", vbCritical
        Else
            On Error Resume Next
            rng2.Insert Shift:=xlDown
            rng3.Copy
            Range("H" & ActiveCell.Offset(1, 0).Row).PasteSpecial xlPasteValues
        End If
        
    End With

    'Protect
    Call Sheet4.ZE_Protect
 
Exit Sub
fehler:
    MsgBox "Bitte klicken Sie zuerst auf das Datum, das Sie in der Liste duplizieren m|fffd|chten.", vbCritical
    Call Sheet4.ZE_Protect
          
End If

End Sub
Sub ZE_Datum_DELETE()

If MsgBox("Wollen Sie das ausgew|fffd|hlte Datum aus der Liste entfernen?", vbYesNo) = vbYes Then
    
    'Unptotect
    Call Sheet4.ZE_Unprotect
    
    Dim rng As Range
    
    With Selection.Cells(1)
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        On Error GoTo 0
        If rng Is Nothing Then
            MsgBox "Bitte klicken Sie zuerst auf das Datum, das Sie aus der Liste entfernen wollen.", vbCritical
        Else
            On Error Resume Next
            Selection.EntireRow.Delete
        End If
    End With

    'Protect
    Call Sheet4.ZE_Protect
 
End If

End Sub
Attribute VB_Name = "Summary"
Sub Summary_KS_uebertragen()
Attribute Summary_KS_uebertragen.VB_ProcData.VB_Invoke_Func = " \n14"
    
If Range("sum_summary").Value > 0 Then 'mit Abfrage, ob man l|fffd|schen m|fffd|chte
        
    If MsgBox("Wollen Sie wirklich die Executive Summary komplett zur|fffd|cksetzen und die neuen Projekte/ Kostenstellen/ Unterkostenstellen |fffd|bertragen?", vbYesNoCancel) = vbYes Then
    
        Call CALC_OFF
        
        Call Summary_Filter_entfernen
            
        'Executive Summary leeren
        With Range("Tab_Summary").ListObject
            If Not .DataBodyRange Is Nothing Then
                .DataBodyRange.Delete
                .ListRows.Add (1)
            End If
        End With
        
        'Projekt, Kostenstellen und Unterkostenstellen aus Kalkulation |fffd|bertragen
        Sheet1.Range("dropdown_projekt_KS_UKS").Copy
        Sheet11.Range("summary_start").PasteSpecial xlPasteValues
               
        'scroll
        ActiveWindow.ScrollColumn = 1
        ActiveWindow.ScrollRow = 1
        
        Call CALC_ON
        Call Protect_Sheet
        
    End If

Else 'ohne Abfrage, ob man l|fffd|schen m|fffd|chte

    Call CALC_OFF
        
    Call Summary_Filter_entfernen
            
    'Executive Summary leeren
    With Range("Tab_Summary").ListObject
            If Not .DataBodyRange Is Nothing Then
                .DataBodyRange.Delete
                .ListRows.Add (1)
            End If
    End With
        
    'Projekt, Kostenstellen und Unterkostenstellen aus Kalkulation |fffd|bertragen
    Sheet1.Range("dropdown_projekt_KS_UKS").Copy
    Sheet11.Range("summary_start").PasteSpecial xlPasteValues
               
    'scroll
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
        
    Call CALC_ON
    Call Protect_Sheet
    
End If

End Sub
Sub Summary_Filter()
    
On Error Resume Next
    Sheet11.Activate
    Call Unprotect_Sheet
        Range("Summary_HEAD").Activate
        Sheet11.ShowAllData
    Call Protect_Sheet
    
End Sub
Sub Summary_Filter_entfernen()
    
On Error Resume Next
    Sheet11.Visible = True
    Sheet11.Activate
    Call Unprotect_Sheet
        Range("Summary_HEAD").Activate
        Sheet11.ShowAllData
    
End Sub
Sub Summary_Brutto()
    
On Error Resume Next

    Application.ScreenUpdating = False

    Call Unprotect_Sheet
    Range("summary_spalten_alle").EntireColumn.Hidden = False
    Range("summary_spalten_netto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    Call Protect_Sheet
    
    Application.ScreenUpdating = True

End Sub
Sub Summary_Netto()

Call Unprotect_Sheet
    
    On Error Resume Next
    Application.ScreenUpdating = False
 
    Range("summary_spalten_alle").EntireColumn.Hidden = False
    Range("summary_spalten_brutto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    Application.ScreenUpdating = True
    
Call Protect_Sheet
    
End Sub
Sub Summary_alles()

Call Unprotect_Sheet
    
    On Error Resume Next
    Application.ScreenUpdating = False
 
    Range("summary_spalten_alle").EntireColumn.Hidden = False
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    Application.ScreenUpdating = True
    
Call Protect_Sheet
    
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub workbook_open()
    
    Call CALC_ON
    Call Dateipfad_ermitteln
   
End Sub

Attribute VB_Name = "ZA"
Sub ZA_Spalten_ausblenden()
    
    Sheet9.Activate
    Call Unprotect_Sheet

    Range("ZA_spalte1").EntireColumn.Hidden = True
    Range("ZA_spalte2").EntireColumn.Hidden = True
    Range("ZA_spalte3").EntireColumn.Hidden = True
    Range("ZA_spalte4").EntireColumn.Hidden = True
    
    Range("spalte_ZA1").EntireColumn.Hidden = True
    Range("spalte_ZA2").EntireColumn.Hidden = True
    Range("spalte_ZA3").EntireColumn.Hidden = True
    Range("spalte_ZA4").EntireColumn.Hidden = True
    Range("spalte_ZA5").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
End Sub

Sub ZA_exportieren()
Attribute ZA_exportieren.VB_ProcData.VB_Invoke_Func = " \n14"

On Error Resume Next
Call CALC_OFF

Dim myOriginal As String
myOriginal = ThisWorkbook.Name
    
    'Schutz aus
    Sheet9.Activate
    Call Unprotect_Sheet

    'falls externe/externe KoPa ausgeblendet wurden: alle einblenden, da zu Ausgaben geh|fffd|rende Belege
    Call ZA_Slicer
    
    'ZA.Nr und LfNr. neu vergeben
    Call ZA_Formeln
    
    'Ausgaben ZA kopieren
    Range("bereich_ZA1").Copy
    
    'neues Workbook
    Workbooks.Add
    ActiveSheet.Paste
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Blank)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Leer)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.FormatConditions.Delete 'bedingte Formatierungen l|fffd|schen
    
    'Tabellenbl|fffd|tter benennen
    ActiveSheet.Name = "Ausgaben"
    Sheets.Add After:=ActiveSheet
    ActiveSheet.Name = "Zeiterfassung"
    
    'neuer Dateiname:
    Dim myNewName As String
    myNewName = ActiveWorkbook.Name

    
    'Original |fffd|ffnen
    Workbooks(myOriginal).Activate
    
    'Zeiterfassungen ZA kopieren
    Range("bereich_ZA2").Copy

    'ZA aktivieren
    Workbooks(myNewName).Activate
    ActiveSheet.Paste
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Blank)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Leer)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.FormatConditions.Delete 'bedingte Formatierungen l|fffd|schen
    
    'definierte Namen entfernen
    ActiveWorkbook.Names("ZA1_max_LNR").Delete
    ActiveWorkbook.Names("ZA1_max_ZA").Delete
    ActiveWorkbook.Names("ZA2_max_LNR").Delete
    ActiveWorkbook.Names("ZA2_max_ZA").Delete
        
    'Spalten *erstellt am* verschieben vor HEAD
    ActiveWorkbook.Sheets("Zeiterfassung").Columns("A:A").Cut
    ActiveWorkbook.Sheets("Zeiterfassung").Columns("BE:BE").Insert Shift:=xlToRight
    ActiveWorkbook.Sheets("Ausgaben").Columns("A:A").Cut
    ActiveWorkbook.Sheets("Ausgaben").Columns("AI:AI").Insert Shift:=xlToRight
    
    'falls keine Ausgaben, l|fffd|schen
    If Worksheets("Ausgaben").Range("A2").Value = "" Then
        Range(Worksheets("Ausgaben").Range("A2:ai2"), Worksheets("Ausgaben").Range("A2:Ai2").End(xlDown)).ClearContents
    End If
    
    'falls keine Zeiterfassungen, l|fffd|schen
    If Worksheets("Zeiterfassung").Range("A2") = "" Then
        Range(Worksheets("Zeiterfassung").Range("A2:Be2"), Worksheets("Zeiterfassung").Range("A2:Be2").End(xlDown)).ClearContents
    End If
    
'Original |fffd|ffnen
Workbooks(myOriginal).Activate
    
    'in ZA Retour speichern
    Call ZA_zwischenspeichern
    
    'in Ausgaben und Zeiterfassungen die ZA-Nr und ZA-Lf.Nr. fixieren (Formeln in Werte umwandeln, somit eindeutige ID)
    Call ZA_Formeln_in_Werte_umwandeln
    
    Call Link_ZA_1
    
    Sheet9.Activate
        
Call CALC_ON

End Sub
Sub ZA_Slicer()

On Error Resume Next

    With ActiveWorkbook.SlicerCaches("Slicer_Monat_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With

    With ActiveWorkbook.SlicerCaches("Slicer_Organisation_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
    With ActiveWorkbook.SlicerCaches("Slicer_Mitarbeiter_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
    With ActiveWorkbook.SlicerCaches("Slicer_Mitarbeiter_Datum")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
    With ActiveWorkbook.SlicerCaches("Slicer_Belegnummer_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
    With ActiveWorkbook.SlicerCaches("Slicer_Rechnungsleger_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
    With ActiveWorkbook.SlicerCaches("Slicer_Unterkostenstelle_Filter")
        .SlicerItems("extern/extern KoPa").Selected = True
    End With
    
End Sub

Sub ZA_Formeln()

On Error Resume Next
    
    'Kalkulation einschalten
    Application.Calculation = xlCalculationAutomatic
        
    'Formeln in ZA Retour: ZANr + LfNr neu berechnen
    Range("ZA1_max_ZA").FormulaR1C1 = "=MAX(Tab_Ausgaben_Retour[ZA.Nr.])"
    Range("ZA1_max_LNR").FormulaR1C1 = "=MAX(Tab_Ausgaben_Retour[lf.Nr.])"
    Range("ZA2_max_ZA").FormulaR1C1 = "=MAX(Tab_ZEG_Retour[ZA.Nr.])"
    Range("ZA2_max_LNR").FormulaR1C1 = "=MAX(Tab_ZEG_Retour[Lf.Nr.])"
    Range("ZA_max").FormulaR1C1 = "=MAX(ZA1_max_ZA,ZA2_max_ZA)"
        
    'Reset Spalten
    Range("ZA1_").ClearContents
    Range("ZA2_").ClearContents
    
    'ZA Nr. und Lf.Nr. vorbereiten: Ausgaben
    Range("ZA1_Formel1").FormulaR1C1 = "=IF(OR(sum_ZA1=0,RC[33]=""""),"""",ZA_max+1)"
    Range("ZA1_Formel2").FormulaR1C1 = "=IF(OR(sum_ZA1=0,RC[33]=""""),"""",ZA_max+1)"
    Range("ZA1_Formel3").FormulaR1C1 = "=IF(OR(sum_ZA1=0,RC[32]=""""),"""",ZA1_max_LNR+1)"
    Range("ZA1_Formel4").FormulaR1C1 = "=IF(OR(sum_ZA1=0,RC[32]=""""),"""",R[-1]C+1)"
    Range("ZA1_Formel5").FormulaR1C1 = CLng(Now * 1440) / 1440
       
    'ZA Nr. und Lf.Nr. vorbereiten: Zeiterfassungen
    Range("ZA2_Formel1").FormulaR1C1 = "=IF(OR(sum_ZA2=0,RC[55]=""""),"""",ZA_max+1)"
    Range("ZA2_Formel2").FormulaR1C1 = "=IF(OR(sum_ZA2=0,RC[55]=""""),"""",ZA_max+1)"
    Range("ZA2_Formel3").FormulaR1C1 = "=IF(OR(sum_ZA2=0,RC[54]=""""),"""",ZA2_max_LNR+1)"
    Range("ZA2_Formel4").FormulaR1C1 = "=IF(OR(sum_ZA2=0,RC[54]=""""),"""",R[-1]C+1)"
    Range("ZA2_Formel5").FormulaR1C1 = CLng(Now * 1440) / 1440
    
    'Datum *erstellt am* erstellen (bereich erweitern)
    Range("ZA1_spalte_datum") = Range("ZA1_Formel5").Value
    Range("ZA2_spalte_datum") = Range("ZA2_Formel5").Value
    
    'ZA und LFn erstellen (bereich erweitern)
    Range("ZA1_ZA_LNR").AutoFill Destination:=Range("ZA1_spalten")
    Range("ZA2_ZA_LNR").AutoFill Destination:=Range("ZA2_spalten")
    
    'in Werte um wandeln
    Range("ZA1_") = Range("ZA1_").Value
    Range("ZA2_") = Range("ZA2_").Value
    
End Sub
Sub ZA_zwischenspeichern()
    
    If Range("sum_ZA1").Value > 0 Then
        'Ausgaben mit fixierter LNr in Ausgaben Retour
        Range("bereich_ZA1_2").Copy
        Range("ZA1_retour_ende2").PasteSpecial xlPasteValues
    End If
    
    If Range("sum_ZA2").Value > 0 Then
        'Zeiterfassungen mit fixierter LNr in Zeiterfassungen Retour
        Range("bereich_ZA2_2").Copy
        Range("ZA2_retour_ende2").PasteSpecial xlPasteValues
    End If
    
    'ZA_Retour_bereinigen (Leerzeichen entfernen)
    Range("Tab_Ausgaben_Retour[[ZA.Nr.]:[HEAD]]").Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Range("Tab_ZEG_Retour[[ZA.Nr.]:[HEAD]]").Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    
End Sub
Sub ZA_Formeln_in_Werte_umwandeln()

'Application.Calculation = xlCalculationManual

'-------ZEG: Formel in Wert umwandeln, falls exportierter ZA

    Sheet5.Activate
    Call Unprotect_Sheet
    
    Dim cl As Range
    Dim I As Integer
    Dim nummer As Integer

    'aktuell exportierte Zahlungsantragsnummer
    nummer = Range("ZA_max").Value
    
    For Each cl In Range("spalte_ZA_zeg")
        If cl.Value = nummer Then
            cl.Value = cl.Value 'ZA Formel in Wert umwandeln
            cl.Offset(0, 1).Value = cl.Offset(0, 1).Value 'ZA Lf.Nr. Formel in Wert umwandeln
            cl.EntireRow.Locked = True 'ganze Zeile sch|fffd|tzen
        End If
    Next

    Call Protect_Sheet


'-------Ausgaben: Formel in Wert umwandeln, falls exportierter ZA

    Sheet6.Activate
    Call Unprotect_Sheet
    
    Dim cl2 As Range
    Dim i2 As Integer
    Dim nummer2 As Integer
    
    'aktuell exportierte Zahlungsantragsnummer
    nummer2 = Range("ZA_max").Value 'aktuelle Zahlungsantragsnummer
    
    For Each cl2 In Range("spalte_ZA_ausgaben")
        If cl2.Value = nummer2 Then
            cl2.Value = cl2.Value 'ZA Formel in Wert umwandeln
            cl2.Offset(0, 1).Value = cl2.Offset(0, 1).Value 'ZA Lf.Nr. Formel in Wert umwandeln
            cl2.EntireRow.Locked = True 'ganze Zeile sch|fffd|tzen
        End If
    Next

    Call Protect_Sheet
    
'Application.Calculation = xlCalculationAutomatic

End Sub
Sub ZA_stornieren()

antwort = MsgBox("Wollen Sie den letzten Zahlungsantrag wirklich stornieren?", vbYesNoCancel)

If antwort = vbYes Then

On Error Resume Next
    
Call CALC_OFF

    x = Range("ZA_max").Value
    If Range("ZA_max").Value > 0 Then
               
        If Sheet13.Range("B5") = "" Then
            
            Call RESET_ZA1
        
        Else
            
            'Ausgaben Retour l|fffd|schen
            Sheet13.ListObjects("Tab_Ausgaben_Retour").Range.AutoFilter Field:=2, Criteria1:=x
                Range("Tab_Ausgaben_Retour[ZA.Nr.]").SpecialCells(xlCellTypeVisible).ClearContents
            Sheet13.ListObjects("Tab_Ausgaben_Retour").Range.AutoFilter Field:=2
                Range("Tab_Ausgaben_Retour[ZA.Nr.]").SpecialCells(xlCellTypeBlanks).Delete Shift:=xlUp
        
        End If
        
        If Sheet13.Range("AU5") = "" Then
        
            Call RESET_ZA2
            
        Else
        
            'Zeiterfassungen Retour l|fffd|schen
            Sheet13.ListObjects("Tab_ZEG_Retour").Range.AutoFilter Field:=2, Criteria1:=x
                Range("Tab_ZEG_Retour[ZA.Nr.]").SpecialCells(xlCellTypeVisible).ClearContents
            Sheet13.ListObjects("Tab_ZEG_Retour").Range.AutoFilter Field:=2
            Range("Tab_ZEG_Retour[ZA.Nr.]").SpecialCells(xlCellTypeBlanks).Delete Shift:=xlUp
                    
        End If
        
        'Storno in Ausgaben und Zeiterfassungen
        Call ZA_Werte_in_Formeln_umwandeln
        
        Sheet9.Activate
        
        MsgBox "Letzter Zahlungsantrag wurde storniert."
         
    Else
    
        'Storno in Ausgaben und Zeiterfassungen
        Call ZA_Werte_in_Formeln_umwandeln
        
        Sheet9.Activate
        
        MsgBox "Sie haben noch keinen Zahlungsantrag erstellt, den man stornieren kann."
        
    End If

Call CALC_ON

End If

End Sub
   
Sub ZA_Werte_in_Formeln_umwandeln()

Call CALC_OFF

'-------ZEG: Wert in Formel umwandeln, falls stornierter ZA

    Sheet5.Activate
    Call Unprotect_Sheet
    
    Dim cl As Range
    Dim I As Integer
    Dim nummer As Integer
   
    nummer = Range("ZA_max").Value + 1 'aktuelle Zahlungsantragsnummer+1 weil in ZA Retour schon gel|fffd|scht
    
    For Each cl In Range("spalte_ZA_zeg")
        If cl.Value = nummer Then
            cl.FormulaR1C1 = "=IF(Tab_Zeiterfassung_Gesamt[@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Tab_ZEG_Retour[ZA.Nr.],MATCH(Tab_Zeiterfassung_Gesamt[@[Lf.Nr. (ZA)]],Tab_ZEG_Retour[Lf.Nr.],0)),""""))"
            cl.Offset(0, 1).FormulaArray = "=IF([@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Z_sp1,MATCH([@[Lf.Nr. ]]&[@[Belegnr./ Rechnungsnr.]],Z_sp2&Z_sp3,0)),IFERROR(INDEX(Z_sp1,MATCH([@[Lf.Nr. ]],Z_sp2,0)),"""")))"
            cl.EntireRow.Locked = False 'ganze Zeile sch|fffd|tzen
        End If
    Next
    
    'formelspalten sch|fffd|tzen
    Range("formelspalten_zeg").Locked = True
        
    Call Protect_Sheet
    

'-------Ausgaben: Wert in Formel umwandeln, falls stornierter ZA

    Sheet6.Activate
    Call Unprotect_Sheet
    
    Dim cl2 As Range
    Dim i2 As Integer
    Dim nummer2 As Integer

    nummer2 = Range("ZA_max").Value + 1 'aktuelle Zahlungsantragsnummer+1 weil in ZA Retour schon gel|fffd|scht
    
    For Each cl2 In Range("spalte_ZA_ausgaben")
        If cl2.Value = nummer2 Then
            cl2.FormulaR1C1 = "=IF(Tab_Ausgaben[@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(Tab_Ausgaben_Retour[ZA.Nr.],MATCH(Tab_Ausgaben[@[Lf.Nr. (ZA)]],Tab_Ausgaben_Retour[lf.Nr.],0)),""""))"
            cl2.Offset(0, 1).FormulaArray = "=IF([@[Hilfsspalte ZA]]="""","""",IFERROR(INDEX(A_sp1,MATCH([@[Lf.Nr. ]]&[@Belegnummer],A_sp2&A_sp3,0)),IFERROR(INDEX(A_sp1,MATCH([@[Lf.Nr. ]],A_sp2,0)),"""")))"
            cl2.EntireRow.Locked = False 'ganze Zeile sch|fffd|tzen
        End If
    Next
    
    'formelspalten sch|fffd|tzen
    Range("formelspalten_ausgaben").Locked = True
    
    Call Protect_Sheet
    
Call CALC_ON

End Sub
Sub ZA_exportieren_ohne_Zeiterfassung()

On Error Resume Next
Call CALC_OFF

Dim myOriginal As String
myOriginal = ThisWorkbook.Name
    
    'Schutz aus
    Sheet9.Activate
    Call Unprotect_Sheet

    'falls externe/externe KoPa ausgeblendet wurden: alle einblenden, da zu Ausgaben geh|fffd|rende Belege
    Call ZA_Slicer
    
    'ZA.Nr und LfNr. neu vergeben
    Call ZA_Formeln
    
    'Ausgaben ZA kopieren
    Range("bereich_ZA1").Copy
    
    'neues Workbook
    Workbooks.Add
    ActiveSheet.Paste
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Blank)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Leer)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.FormatConditions.Delete 'bedingte Formatierungen l|fffd|schen
    
    'Tabellenbl|fffd|tter benennen
    ActiveSheet.Name = "Ausgaben"
    Sheets.Add After:=ActiveSheet
    ActiveSheet.Name = "Zeiterfassung"
    
    'neuer Dateiname:
    Dim myNewName As String
    myNewName = ActiveWorkbook.Name

    
    'Original |fffd|ffnen
    Workbooks(myOriginal).Activate
    
    'Zeiterfassungen ZA kopieren
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotFields("Mitarbeiter"). _
    PivotFilters.Add Type:=xlCaptionEquals, Value1:="A"
    Range("bereich_ZA2").Copy

    'ZA aktivieren
    Workbooks(myNewName).Activate
    ActiveSheet.Paste
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Replace What:=" ", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Blank)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.Replace What:="(Leer)", Replacement:="", LookAt:=xlWhole, SearchOrder:=xlByRows
    Selection.FormatConditions.Delete 'bedingte Formatierungen l|fffd|schen
    
    'definierte Namen entfernen
    ActiveWorkbook.Names("ZA1_max_LNR").Delete
    ActiveWorkbook.Names("ZA1_max_ZA").Delete
    ActiveWorkbook.Names("ZA2_max_LNR").Delete
    ActiveWorkbook.Names("ZA2_max_ZA").Delete
        
    'Spalten *erstellt am* verschieben vor HEAD
    ActiveWorkbook.Sheets("Zeiterfassung").Columns("A:A").Cut
    ActiveWorkbook.Sheets("Zeiterfassung").Columns("BE:BE").Insert Shift:=xlToRight
    ActiveWorkbook.Sheets("Ausgaben").Columns("A:A").Cut
    ActiveWorkbook.Sheets("Ausgaben").Columns("AI:AI").Insert Shift:=xlToRight
    
    'falls keine Ausgaben, l|fffd|schen
    If Worksheets("Ausgaben").Range("A2").Value = "" Then
        Range(Worksheets("Ausgaben").Range("A2:ai2"), Worksheets("Ausgaben").Range("A2:Ai2").End(xlDown)).ClearContents
    End If
    
    'falls keine Zeiterfassungen, l|fffd|schen
    If Worksheets("Zeiterfassung").Range("A2") = "" Then
        Range(Worksheets("Zeiterfassung").Range("A2:Be2"), Worksheets("Zeiterfassung").Range("A2:Be2").End(xlDown)).ClearContents
    End If
    
'Original |fffd|ffnen
Workbooks(myOriginal).Activate
    
    'in ZA Retour speichern
    Call ZA_zwischenspeichern
    
    'in Ausgaben und Zeiterfassungen die ZA-Nr und ZA-Lf.Nr. fixieren (Formeln in Werte umwandeln, somit eindeutige ID)
    Call ZA_Formeln_in_Werte_umwandeln
    
    'Hilfsfilter l|fffd|schen
    Sheet9.PivotTables("Piv_ZA_Zeiterfassung").PivotFields("Mitarbeiter").ClearAllFilters
    
    Call Link_ZA_1
    
    Sheet9.Activate
        
    Call CALC_ON

End Sub
Attribute VB_Name = "ZA_Retour"
Sub ZA_importieren()

oWB = ThisWorkbook.Name

Dim fDialog As FileDialog
Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    
    'FileDialog properties
    fDialog.AllowMultiSelect = False
    fDialog.Title = "Bitte w|fffd|hlen Sie einen best|fffd|tigten Zahlungsatrag mit Ausgaben und Zeiterfassungen aus."
    fDialog.InitialFileName = ThisWorkbook.Path
    
    'Add filters
    fDialog.Filters.Clear
    fDialog.Filters.Add "xls-Dateien", "*.xls"
    fDialog.ButtonName = "Importieren"

    'Show the dialog. -1 means success!
    If fDialog.Show = -1 Then
            
            On Error GoTo fehler
            Call CALC_OFF
            
            'Datei |fffd|ffnen
            oFN = fDialog.SelectedItems(1)
            Workbooks.Open (oFN), Local:=True
            aWB = ActiveWorkbook.Name
                           
            'Blatt Ausgaben aufrufen
            check_1 = Worksheets("Ausgaben").Range("A2").Value
            check_2 = Worksheets("Ausgaben").Range("B2").Value
            check_3 = Worksheets("Ausgaben").Range("AH2").Value
            check_4 = Worksheets("Zeiterfassung").Range("A2").Value
            check_5 = Worksheets("Zeiterfassung").Range("B2").Value
            check_6 = Worksheets("Zeiterfassung").Range("BD2").Value
            
            'zur|fffd|ck zum Export
            Workbooks(aWB).Activate
            
            'Varibalen pr|fffd|fen: ZA-Nr + LfNr. + erstellt am
            Sheet13.Range("check1").Value = check_1
            Sheet13.Range("check2").Value = check_2
            Sheet13.Range("check3").Value = check_3
            Sheet13.Range("check4").Value = check_4
            Sheet13.Range("check5").Value = check_5
            Sheet13.Range("check6").Value = check_6
        
            If Sheet13.Range("import_LNR").Value = "not ok" Then
                
                'Varibalenspeicher l|fffd|schen: ZA-Nr + LfNr. + erstellt am
                Sheet13.Range("check1").Value = ""
                Sheet13.Range("check2").Value = ""
                Sheet13.Range("check3").Value = ""
                Sheet13.Range("check4").Value = ""
                Sheet13.Range("check5").Value = ""
                Sheet13.Range("check6").Value = ""
                
                'schlie|fffd|en ohne Speichern
                Workbooks(aWB).Close SaveChanges:=False
                
                MsgBox "Sie haben einen falschen Zahlungsantrag ausgesucht. Um einen bereits importierten Zahlungsantrag erneut zu importieren, m|fffd|ssen Sie diesen zuerst stornieren."
                     
            Else
        
                'zur|fffd|ck zum Export
                Workbooks(aWB).Activate
                     
                    'Export kopieren
                    If Worksheets("Ausgaben").Range("A3").Value = "" Then
                            Worksheets("Ausgaben").Range("A2:Ah2").Copy
                        Else
                            Range(Worksheets("Ausgaben").Range("A2:ah2"), Worksheets("Ausgaben").Range("A2:Ah2").End(xlDown)).Copy
                    End If
                    
                    'zur|fffd|ck zur Hauptdatei
                    Workbooks(oWB).Activate
                            
                    'in ZA Retour einf|fffd|gen
                    Sheet13.Range("ZA1_RETOUR_ende").PasteSpecial xlPasteValues
                 
                 'zur|fffd|ck zum Export
                 Workbooks(aWB).Activate
                    
                    'Blatt ZE aufrufen
                    Worksheets("Zeiterfassung").Select
                    
                    If Worksheets("Zeiterfassung").Range("A3").Value = "" Then
                        Worksheets("Zeiterfassung").Range("A2:Bd2").Copy
                    Else
                        Range(Worksheets("Zeiterfassung").Range("A2:Bd2"), Worksheets("Zeiterfassung").Range("A2:Bd2").End(xlDown)).Copy
                    End If
                             
                
                'zur|fffd|ck zur Hauptdatei
                Workbooks(oWB).Activate
                            
                    'in ZA Retour einf|fffd|gen
                    Sheet13.Range("ZA2_RETOUR_ende").PasteSpecial xlPasteValues
                                    
                    'Varibalenspeicher l|fffd|schen: ZA-Nr + LfNr. + erstellt am
                    Sheet13.Range("check1").Value = ""
                    Sheet13.Range("check2").Value = ""
                    Sheet13.Range("check3").Value = ""
                    Sheet13.Range("check4").Value = ""
                    Sheet13.Range("check5").Value = ""
                    Sheet13.Range("check6").Value = ""
                
                    Sheet9.Activate
                    ActiveWindow.ScrollRow = 1
                    
                'schlie|fffd|en ohne Speichern
                Workbooks(aWB).Close SaveChanges:=False
                
                End If
            
        Call CALC_ON
        
    End If

Exit Sub
fehler:
Call CALC_ON
MsgBox "Sie haben eine falsche Datei ausgew|fffd|hlt. Bitte w|fffd|hlen Sie eine bewilligte xls-Datei mit den Sheets *Ausgaben* und *Zeiterfassung* aus."

End Sub

Attribute VB_Name = "ZE"
Sub ZE_aktualisieren()

On Error Resume Next

Application.ScreenUpdating = False
Application.EnableEvents = False
        
    Call Sheet4.ZE_Unprotect
    Call ZE_Pivot_aktualisieren 'Dropdown KS + UKS aktualisieren (Piv_dropdown4)
    Call ZE_Reset 'Tabelle verkleinern auf 365 Tage (inkl. Samstag und Sonntag), Rest l|fffd|schen, Formatierung zur|fffd|cksetzen
    Call ZE_dropdown_aktualisieren 'neue dropdowns integrieren
    Call ZE_Formeln 'Standard herstellen
    Call ZE_Eingabefelder 'Eingabespalten leeren
    Call Sheet4.ZE_Protect
    
Application.EnableEvents = True
Application.ScreenUpdating = True

End Sub
Sub ZE_Reset()
    
    Call Sheet4.ZE_Unprotect
    
    'Tabelle verkleinern auf 365 Tage (inkl. Samstag und Sonntag), Rest l|fffd|schen, Formatierung zur|fffd|cksetzen
    Sheet4.ListObjects("Tab_Zeiterfassung").Resize Sheet4.Range("ZE_Bereich")
    Range(Sheet4.Range("ZE_Bereich_Ende"), Sheet4.Range("ZE_Bereich_Ende").End(xlDown)).ClearContents
    Range(Sheet4.Range("ZE_Bereich_Ende"), Sheet4.Range("ZE_Bereich_Ende").End(xlDown)).Interior.Pattern = xlNone
    
End Sub
Sub ZE_dropdown_aktualisieren()
    
    'alle Filter in Einstellungen entfernen
    Call Einstellungen_delete_Filter
    
    Call Sheet4.ZE_Unprotect
        
    'Kostenstellen, Cluster, Organisationen und Mitarbeiter Dropdown l|fffd|schen
    Sheet4.Range("ZE_bereich_dropdowns").ClearContents
    
    'Kostenstellen-Dropdown (Antragsnummer + Kostenstelle Arbeitspaket) aus Kalkulationen in ZE Vorlage |fffd|bertragen
    Sheet1.Range("dropdown1").Copy
    Sheet4.Range("dropdown_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
        
    'Antragsnummer-Dropdown aus Einstellungen |fffd|bertragen
    Sheet8.Range("dropdown_antragsnummer").Copy
    Sheet4.Range("dropdown2_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
    
    'Organisationen-Dropdown aus Einstellungen |fffd|bertragen
    Sheet8.Range("dropdown_organisationen").Copy
    Sheet4.Range("dropdown3_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
    
    'ANR, Nr, KS und Unter-KS aus Kalkulationen |fffd|bertragen
    Sheet1.Range("dropdown4").Copy
    Sheet4.Range("dropdown4_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
    
    'Mitarbeiter-Dropdown aus Einstellungen |fffd|bertragen
    Sheet8.Range("dropdown_mitarbeiter").Copy
    Sheet4.Range("dropdown5_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
            
    'Reisekostentabelle aus Einstellungen |fffd|bertragen: Staaten, Taggeld und N|fffd|chtigungssatz
    Sheet8.Range("dropdown6").Copy
    Sheet4.Range("dropdown6_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True

    'Partner Organisationen aus Einstellungen |fffd|bertragen
    Sheet8.Range("dropdown_partner").Copy
    Sheet4.Range("dropdown7_start").PasteSpecial Paste:=xlPasteValues, Transpose:=True
    
    'kmgeld aus Einstellungen |fffd|bertragen
    Sheet8.Range("kmgeld_PKW").Copy
    Sheet4.Range("ZE_kmgeld_pkw").PasteSpecial Paste:=xlPasteValues
    Sheet8.Range("kmgeld_Mitreisende").Copy
    Sheet4.Range("ZE_kmGeld_mitreisende").PasteSpecial Paste:=xlPasteValues
    
    'F|fffd|rderwerber aus Kalkulationen |fffd|bertragen
    Sheet1.Range("einstellungen_foerderwerber").Copy
    Sheet4.Range("ZE_cluster").PasteSpecial Paste:=xlPasteValues
    
    'Datum aus Kalkulationen |fffd|bertragen
    Call ZE_Formel_Jahr
    
End Sub

Sub ZE_Formeln()
    
    Call Sheet4.ZE_Unprotect
    
    '9 Formeln wiederherstellen
    Sheet4.Range("Tab_Zeiterfassung[Monat]").FormulaR1C1 = "=IF([@Datum]="""","""",IFERROR(MONTH(Tab_Zeiterfassung[@Datum]),""""))"
    Sheet4.Range("Tab_Zeiterfassung[Datum]").FormulaR1C1 = "=IF(ZE_jahr="""","""",IFERROR(R[-1]C+1,ZE_datum_von))"
    Sheet4.Range("Tab_Zeiterfassung[Antragsnummer]").FormulaR1C1 = "=IF(ZE_antragsnummer="""","""",ZE_antragsnummer)"
    Sheet4.Range("Tab_Zeiterfassung[Organisation]").FormulaR1C1 = "=IF(ZE_organisation="""","""",ZE_organisation)"
    Sheet4.Range("Tab_Zeiterfassung[Mitarbeiter]").FormulaR1C1 = "=IF(ZE_name="""","""",ZE_name)"
    Sheet4.Range("Tab_Zeiterfassung[Stundensatz]").FormulaR1C1 = "=IFERROR(INDEX(ZE_PK_Bereich2,MATCH(Tab_Zeiterfassung[@[Interne/ Externe PK]],ZE_PK_Bereich,0)),ZE_stundensatz)"
    Sheet4.Range("Tab_Zeiterfassung[max. f|fffd|rderb. Stunden]").FormulaR1C1 = "=IF(ZE_maxTagsatz="""","""",ZE_maxTagsatz)"
    Sheet4.Range("Tab_Zeiterfassung[Interne/ Externe PK]").FormulaR1C1 = "=IF(COUNTA(ZE_PK_Bereich2)=0,""intern"",IF(AND(ZE_stundensatz>0,ZE_stundensatz_extern_KoPa="""",ZE_stundensatz_extern=""""),""intern"",IF(AND(ZE_stundensatz="""",ZE_stundensatz_extern_KoPa>0,ZE_stundensatz_extern=""""),""extern KoPa"",IF(AND(ZE_stundensatz="""",ZE_stundensatz_extern_KoPa="""",ZE_stundensatz_extern>0),""extern"",""intern""))))"
    
    'Check und Duplikats-Formeln
    Range("Tab_Zeiterfassung[Check]").FormulaR1C1 = _
        "=IF(COUNTIFS(Tab_Zeiterfassung[T|fffd|tigkeit],Tab_Zeiterfassung[@T|fffd|tigkeit],Tab_Zeiterfassung[Dupl1],Tab_Zeiterfassung[@Dupl1],Tab_Zeiterfassung[Dupl2],Tab_Zeiterfassung[@Dupl2],Tab_Zeiterfassung[Dupl3],Tab_Zeiterfassung[@Dupl3],Tab_Zeiterfassung[Dupl4],Tab_Zeiterfassung[@Dupl4])>1,1,IF(YEAR(Tab_Zeiterfassung[@Datum])<>ZE_jahr,1,IF(AND(Tab_Zeiterfassung[@T|fffd|tigkeit]=""""" & _
        ",Tab_Zeiterfassung[@Dauer]="""",Tab_Zeiterfassung[@[Kostenstelle Arbeitspaket]]="""",Tab_Zeiterfassung[@Unterkostenstelle]="""",Tab_Zeiterfassung[@[Gesamt - Reisekosten brutto]]=0),"""",IF(AND(Tab_Zeiterfassung[@[B|fffd|ro/ Dienstreise]]=""B|fffd|ro"",Tab_Zeiterfassung[@[Gesamt - Reisekosten brutto]]>0),1,IF(AND(Tab_Zeiterfassung[@Stundensatz]>0,COUNTA(ZE_name,Tab_Zeiterfassu" & _
        "ng[@Datum],Tab_Zeiterfassung[@T|fffd|tigkeit],Tab_Zeiterfassung[@Dauer],Tab_Zeiterfassung[@Antragsnummer],Tab_Zeiterfassung[@[Kostenstelle Arbeitspaket]],Tab_Zeiterfassung[@Unterkostenstelle],Tab_Zeiterfassung[@[B|fffd|ro/ Dienstreise]],Tab_Zeiterfassung[@F|fffd|rdersatz],Tab_Zeiterfassung[@[Interne/ Externe PK]])=10),0,1)))))" & _
        ""

    Range("Tab_Zeiterfassung[Dupl1]").FormulaR1C1 = "=LEFT(Tab_Zeiterfassung[@Mitarbeiter],50)&LEFT(Tab_Zeiterfassung[@[Partner / Region]],50)&LEFT(Tab_Zeiterfassung[@Organisation],50)"
    Range("Tab_Zeiterfassung[Dupl2]").FormulaR1C1 = "=Tab_Zeiterfassung[@Datum]&Tab_Zeiterfassung[@Dauer]&Tab_Zeiterfassung[@[B|fffd|ro/ Dienstreise]]&Tab_Zeiterfassung[@F|fffd|rdersatz]&Tab_Zeiterfassung[@[Interne/ Externe PK]]&Tab_Zeiterfassung[@Stundensatz]&Tab_Zeiterfassung[@[max. f|fffd|rderb. Stunden]]"
    Range("Tab_Zeiterfassung[Dupl3]").FormulaR1C1 = "=Tab_Zeiterfassung[@Antragsnummer]&LEFT(Tab_Zeiterfassung[@[Kostenstelle Arbeitspaket]],15)&LEFT(Tab_Zeiterfassung[@Unterkostenstelle],15)&Tab_Zeiterfassung[@[Reiseland ausw|fffd|hlen]]"
    Range("Tab_Zeiterfassung[Dupl4]").FormulaR1C1 = "=Tab_Zeiterfassung[@[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "brutto]]&Tab_Zeiterfassung[@[PKW (km)]]&Tab_Zeiterfassung[@[Anzahl Mitfahrer]]&Tab_Zeiterfassung[@N|fffd|chtigung]&Tab_Zeiterfassung[@Fr|fffd|hst|fffd|ck]&Tab_Zeiterfassung[@Mittagessen]&Tab_Zeiterfassung[@Abendessen]&Tab_Zeiterfassung[@[Hotelkosten " & Chr(10) & "brutto]]&Tab_Zeiterfassung[@[Hotelkosten " & Chr(10) & "netto]]&Tab_Zeiterfassung[@[sonstige Reiseko" & _
        "sten " & Chr(10) & "brutto]]&Tab_Zeiterfassung[@[sonstige Reisekosten " & Chr(10) & "netto]]" & _
        ""
End Sub

Sub ZE_Eingabefelder()

On Error Resume Next

    '19 Eingabespalten leeren inkl. 5 Spalten vorausf|fffd|llen (F|fffd|rdersatz; Buro/Dienstreise; Fr|fffd|hst|fffd|ck/Mittagessen/Abendessen
    Range("Tab_Zeiterfassung[Partner / Region]").ClearContents
    Range("Tab_Zeiterfassung[T|fffd|tigkeit]").ClearContents
    Range("Tab_Zeiterfassung[Dauer]").ClearContents
    Range("Tab_Zeiterfassung[Kostenstelle Arbeitspaket]").ClearContents
    Range("Tab_Zeiterfassung[Unterkostenstelle]").ClearContents
    Range("Tab_Zeiterfassung[Unterkostenstelle]").ClearContents
    Range("Tab_Zeiterfassung[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "brutto]").ClearContents
    Range("Tab_Zeiterfassung[PKW (km)]").ClearContents
    Range("Tab_Zeiterfassung[Anzahl Mitfahrer]").ClearContents
    Range("Tab_Zeiterfassung[Fahrtroute]").ClearContents
    Range("Tab_Zeiterfassung[Reiseland ausw|fffd|hlen]").ClearContents
    Range("Tab_Zeiterfassung[N|fffd|chtigung]").ClearContents
    Range("Tab_Zeiterfassung[Fr|fffd|hst|fffd|ck]").ClearContents
    Range("Tab_Zeiterfassung[Mittagessen]").ClearContents
    Range("Tab_Zeiterfassung[Abendessen]").ClearContents
    Range("Tab_Zeiterfassung[Hotelkosten " & Chr(10) & "brutto]").ClearContents
    Range("Tab_Zeiterfassung[Hotelkosten " & Chr(10) & "netto]").ClearContents
    Range("Tab_Zeiterfassung[sonstige Reisekosten " & Chr(10) & "brutto]").ClearContents
    Range("Tab_Zeiterfassung[USt %]").ClearContents
    
    'vorausf|fffd|llen
    Range("Tab_Zeiterfassung[B|fffd|ro/ Dienstreise]").Value = "B|fffd|ro"
    Range("Tab_Zeiterfassung[F|fffd|rdersatz]").Value = "100%"
    
    'Antragsnummer in Werte umwandeln, damit dynamischer Dropdown funktioniert
    Range("Tab_Zeiterfassung[Antragsnummer]").Value = Range("Tab_Zeiterfassung[Antragsnummer]").Value
    
    'Haupteingabefelder
    Range("ZE_maxTagsatz").ClearContents
    Range("ZE_stundensatz_extern").ClearContents
    Range("ZE_stundensatz_extern_KoPa").ClearContents
    Range("ZE_stundensatz").ClearContents
    Range("ZE_name").ClearContents
    Range("ZE_organisation").ClearContents
    
    'scroll
    Sheet4.Activate
    Range("ZE_organisation").Activate
    ActiveWindow.ScrollRow = 1
    
End Sub
Sub ZE_Formel_Datum()

    Sheet4.Range("Tab_Zeiterfassung[Datum]").FormulaR1C1 = "=IF(ZE_jahr="""","""",IFERROR(R[-1]C+1,ZE_datum_von))"

End Sub

Sub ZE_Formel_Jahr()

    'Datum aus Kalkulationen |fffd|bertragen
    Sheet4.Range("ZE_jahr").Value = Sheet1.Range("einstellungen_jahr").Value
    
End Sub

Sub ZE_Fehler_filtern()

If Sheet4.Range("miss_ZE").Value = 0 Then
          
    Call Sheet4.ZE_Filter_entfernen
    MsgBox ("Es gibt keine fehlenden Daten in Ihrer Zeiterfasung.")
    Call Sheet4.ZE_Protect
    
Else
    
    Call Sheet4.ZE_Filter_entfernen
    Call Sheet4.ZE_Unprotect
        n = Sheet4.Range("ZE_Spalte_check").Value
            Sheet4.ListObjects("Tab_Zeiterfassung").Range.AutoFilter Field:=n, Criteria1:="=1"
            ActiveWindow.ScrollRow = 1
    Call Sheet4.ZE_Protect
        
End If
    
End Sub

Sub ZE_exportieren()

Application.ScreenUpdating = False
Application.DisplayAlerts = False
    
Dim myOriginal As String
myOriginal = ThisWorkbook.Name
    
    'alle Filter in Vorlage l|fffd|schen
    Call Sheet4.ZE_Filter_entfernen
    
    'Blattschutz off
    Call Sheet4.ZE_Unprotect
        
    'clusterbezogener Titel
    Sheet4.Range("ZE_Titel") = Sheet4.Range("ZE_Titel").Value
        
    'Datum Formeln in Werte umwandeln
    Sheet4.Range("Tab_Zeiterfassung[Datum]") = Sheet4.Range("Tab_Zeiterfassung[Datum]").Value
    
    'Titel Eingabefelder leeren (Partner, Organisation, Mitarbeiter, Stundens|fffd|tze und max. f|fffd|rderbare Stunden)
    Sheet4.Range("ZE_bereich_titel").Value = ""
    
    Dim myPath As String
    Dim myName As String
    Dim myNameOEnd As String
    Dim myNewName As String
            
    'zuletzt exportiert am einf|fffd|gen
    Call ZE_Formel_Exportdatum
    
    'Pfad der aufrufenden Mappe:
        myPath = ThisWorkbook.Path & "\"
    'Name der aufrufenden Mappe ohne Pfad:
        myName = ThisWorkbook.Name
    'Name der aufrufenden Mappe ohne Endung :
        myNameOEnd = Sheet4.Range("ZE_dateiname").Value
    'neuer Dateiname:
        myNewName = myPath & myNameOEnd
     
    'speichern
    ActiveWorkbook.Save
    ActiveWorkbook.SaveCopyAs myNewName
    
    'ZE |fffd|ffnen
    Workbooks.Open Filename:=myNewName

    
    'Tabellen l|fffd|schen
    Dim Sheet As Worksheet
    Zeiterfassung = Sheet4.Name
    
    For Each Sheet In ActiveWorkbook.Worksheets
        If Sheet.Name <> Zeiterfassung Then
            On Error Resume Next
            Application.DisplayAlerts = False
            Sheet.Visible = True
            Sheet.Unprotect Password:="tnm"
            Sheet.Delete
            Application.DisplayAlerts = True
        End If
    Next Sheet
    
    'Buttons l|fffd|schen
    On Error Resume Next
    ActiveSheet.Shapes.Range(Array("Group")).Delete
    ActiveSheet.Shapes.Range(Array("Group lock1")).Delete
    ActiveSheet.Shapes.Range(Array("Speech_Original")).Delete
    
    'Button Zeile ausblenden
    Rows("23:23").EntireRow.Hidden = True
    
    'sperren
    ActiveSheet.Protect Password:="tnm", AllowSorting:=True, AllowFiltering:=True
        
    'speichern
    ActiveWorkbook.Save
    
    'Original |fffd|ffnen
    Workbooks(myOriginal).Activate
    
    'Formelspalte Datum wiederherstellen, damit Jahrauswahl flexibel bleibt
    Call ZE_Formel_Datum
    
    'sperren
    Call Sheet4.ZE_Protect
    
Application.DisplayAlerts = True
Application.ScreenUpdating = True
    
End Sub
Sub ZE_Formel_Exportdatum()

    Sheet4.Range("ZE_exportiert_am").FormulaR1C1 = "=""zuletzt exportiert: ""&TEXT(NOW(),""tt.MM.JJJJ hh:mm"")"
    Sheet4.Range("ZE_exportiert_am").Copy
    Sheet4.Range("ZE_exportiert_am").PasteSpecial xlPasteValues

End Sub



Attribute VB_Name = "ZEG"
Sub ZEG_Filter()

On Error Resume Next
       
    'Filter l|fffd|schen
    Sheet5.Activate
    Call Unprotect_Sheet
    Sheet5.Range("ZEG_HEAD").Activate
    Sheet5.ShowAllData
    
    Call Protect_Sheet
    
End Sub
Sub ZEG_Filter_entfernen()

On Error Resume Next
    
    'Filter l|fffd|schen
    Sheet5.Activate
    Call Unprotect_Sheet
    Sheet5.Range("ZEG_HEAD").Activate
    Sheet5.ShowAllData
   
End Sub
Sub ZEG_Monat1()

    Call ZEG_Filter_entfernen
                
    'J|fffd|nner filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="1"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat2()

    Call ZEG_Filter_entfernen
                
    'Februar filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="2"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat3()

    Call ZEG_Filter_entfernen
                
    'M|fffd|rz filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="3"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat4()

    Call ZEG_Filter_entfernen
                
    'April filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="4"
     
    Call Protect_Sheet
    
End Sub
Sub ZEG_Monat5()

    Call ZEG_Filter_entfernen
                
    'Mai filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="5"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat6()

    Call ZEG_Filter_entfernen
                
    'Juni filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="6"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat7()

    Call ZEG_Filter_entfernen
                
    'Juli filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="7"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat8()

    Call ZEG_Filter_entfernen
                
    'August filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="8"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat9()

    Call ZEG_Filter_entfernen
                
    'September filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="9"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat10()

    Call ZEG_Filter_entfernen
                
    'Oktober filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="10"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat11()

    Call ZEG_Filter_entfernen
                
    'November filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="11"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Monat12()

    Call ZEG_Filter_entfernen
                
    'Dezember filtern
    n = Range("ZEG_spalte_monat").Value
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="12"
    
    Call Protect_Sheet
     
End Sub
Sub ZEG_Fehler_filtern()

If Range("miss_ZEG").Value = 0 Then
    
    Call ZEG_Filter
    MsgBox ("Es gibt keine fehlenden Daten in Ihren Zeiterfasungen.")
    
Else
    
    Call ZEG_Filter_entfernen
    
    n = Range("ZEG_Spalte_check").Value
        Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Range.AutoFilter Field:=n, Criteria1:="=1", Operator:=xlAnd
        ActiveWindow.ScrollRow = 1
      
    Call Protect_Sheet
 
End If
    
End Sub
Sub ZEG_ADD_row()
               
On Error GoTo fehler

    With Selection.Cells(1)
        
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        Set rng2 = Intersect(.EntireRow.Offset(1, 0), ActiveCell.ListObject.DataBodyRange)
        
        If rng Is Nothing Then
            Call Unprotect_Sheet
            Range("Tab_Zeiterfassung_Gesamt").ListObject.ListRows.Add AlwaysInsert:=True
            Call ZEG_LNR_korrigieren
            Call Protect_Sheet
        Else
            Call Unprotect_Sheet
            rng2.Insert Shift:=xlDown
            Call ZEG_LNR_korrigieren
            Call Protect_Sheet
        End If
        
    End With
    
Exit Sub
fehler:
Sheet5.Activate
Call Unprotect_Sheet
Range("Tab_Zeiterfassung_Gesamt").ListObject.ListRows.Add AlwaysInsert:=True
Call ZEG_LNR_korrigieren
Call Protect_Sheet

End Sub

Sub ZEG_DELETE_row()

If MsgBox("Wollen Sie die Zeile wirklich aus der Liste entfernen?", vbYesNo) = vbYes Then
    
'Blattschutz off
Call Unprotect_Sheet
    
    Dim rng As Range
    
    With Selection.Cells(1)
        Set rng = Intersect(.EntireRow, ActiveCell.ListObject.DataBodyRange)
        On Error GoTo 0
        If rng Is Nothing Then
            MsgBox "Bitte klicken Sie zuerst auf ein Feld, das Sie aus der Tabelle entfernen wollen.", vbCritical
        Else
            On Error Resume Next
            Call Unprotect_Sheet
            ActiveSheet.ShowAllData
            rng.Delete xlShiftUp
            Call ZEG_LNR_korrigieren
        End If
    End With

'Blattschutz on
Call Protect_Sheet

End If

End Sub
Sub ZEG_LNR_korrigieren()

    Range("Tab_Zeiterfassung_Gesamt[Lf.Nr. ]").FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
    
End Sub
Sub ZEG_Brutto()

Call Unprotect_Sheet

    Range("ZEG_spalten_brutto").EntireColumn.Hidden = False
    Range("ZEG_spalten_netto").EntireColumn.Hidden = True

    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Sub ZEG_Netto()

Call Unprotect_Sheet

    Range("ZEG_spalten_netto").EntireColumn.Hidden = False
    Range("ZEG_spalten_brutto").EntireColumn.Hidden = True
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Sub ZEG_alles()

Call Unprotect_Sheet

    Range("ZEG_spalten_alle").EntireColumn.Hidden = False
    
    ActiveWindow.ScrollRow = 1
    
Call Protect_Sheet

End Sub
Sub ZEG_Formel_ZABeleg()
    
    'Background Sicherung
    Range("Tab_Zeiterfassung_Gesamt[ZA Beleg]").FormulaArray = _
        "=IF(ISNUMBER(Tab_Zeiterfassung_Gesamt[@[Nr.ZA]])=TRUE,"""",IF(Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]=""intern"",1,IF(OR(Tab_Zeiterfassung_Gesamt[@[Belegnr./ Rechnungsnr.]]="""",Tab_Zeiterfassung_Gesamt[@Rechnungsleger]=""""),"""",IFERROR(IF(MATCH(Tab_Zeiterfassung_Gesamt[@[Belegnr./ Rechnungsnr.]]&Tab_Zeiterfassung_Gesamt[@Rechnungsleger],spalte_BelegNr&sp" & _
        "alte_Rechnungsleger,0)>0,1,""""),""""))))" & _
        ""
        
End Sub
Sub ZEG_Dropdown_korrigieren()

    Range("Tab_Zeiterfassung_Gesamt[Belegnr./ Rechnungsnr.]").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=dropdown_belegnummer"
    End With
End Sub
Attribute VB_Name = "ZE_Retour"
Sub ZE_importieren()

    oWB = ThisWorkbook.Name
    
    Dim fDialog As FileDialog
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
        
    'filter l|fffd|schen
    Call ZEG_Filter_entfernen
    
    'FileDialog properties
    fDialog.AllowMultiSelect = False
    fDialog.Title = "Bitte w|fffd|hlen Sie eine ausgef|fffd|llte Zeiterfassung aus."
    fDialog.InitialFileName = ThisWorkbook.Path
    
    'Add filters
    fDialog.Filters.Clear
    fDialog.Filters.Add "XLSB-Dateien", "*.xlsb"
    fDialog.ButtonName = "Importieren"

'Show the dialog. -1 means success!
If fDialog.Show = -1 Then

    'off
    Call CALC_OFF

    'Datei |fffd|ffnen
    oFN = fDialog.SelectedItems(1)
    Workbooks.Open (oFN)
    
    oWB2 = ActiveWorkbook.Name
    Workbooks(oWB2).Activate
                      
    'Blattschutz aus Vorlage entfernen und alle aktiven Filter l|fffd|schen
    On Error Resume Next
    ActiveSheet.Unprotect Password:="tnm"
    Range("ZE_HEAD").Activate
    ActiveSheet.ShowAllData
        
        If Range("miss_ZE").Value > 0 Then
        
            'zur|fffd|ck zur Hauptdatei
            Workbooks(oWB).Activate
            Call Protect_Sheet
            Call CALC_ON
            MsgBox ("Achtung! Die Zeiterfassung kann nicht importiert werden, da diese Fehler enth|fffd|lt! Bitte korrigieren Sie zuerst die Fehler (vor allem Duplikate) und versuchen Sie es erneut.")
                       
        Else
        
            On Error GoTo fehler 'falls falsche Datei ausgew|fffd|hlt wurde, soll Code abbrechen und ein Hinweis erfolgen
            Range("Tab_Zeiterfassung[[Check]:[anrechenb. Reisekosten netto]]").Copy
                
            'zur|fffd|ck zur Hauptdatei
            Workbooks(oWB).Activate
    
            'in Kalkulation zwischenspeichern und bearbeiten (zuerst in Kalkulation zwischenspeichern, um korrekte laufende Nummern zu erhalten)
            Sheet12.Range("Original_start").PasteSpecial xlPasteValues
                
                On Error Resume Next
                    
                'als aktuellen Import kennzeichnen (=2)
                Range("Tab_Original[Original]").Replace What:="", Replacement:="2", LookAt:=xlPart, SearchOrder:=xlByRows
                    
                'Original Zwischenspeicher sortieren nach Check (0=korrekt, 1=fehler, leer=keine eintr|fffd|ge)
                Call Original_sortieren
        
                'nicht ausgef|fffd|llte Zeiteintr|fffd|ge l|fffd|schen (Check Spalte > "", 0=korrekt, 1=fehler, leer=nicht ausgef|fffd|llt)
                Call Original_bereinigen
            
                'Duplikatsformel starten - Hashwert
                Call DuplicateDemo
                                                      
                'neu sortieren nach: 1. Mitarbeiter, 2. Datum, 3. Dauer
                Call Original_sortieren2
                    
                '|fffd|brig gebliebenen Rest (neu u/o ver|fffd|ndert) in ZEG gr|fffd|n gekennzeichnet speichern
                Call Original_speichern
                    
                'alle 20 Formeln wiederherstellen
                Call ZEG_Formeln
                    
                'Datumsspalte bereinigen (Text in Zahl umwandeln)
                Call ZEG_Datum_korrigieren
                    
                'nach Datum und Mitarbeiter aufsteigend sortieren
                Call ZEG_sortieren
                    
                'sch|fffd|tzen
                Call Protect_Sheet
                
            'schlie|fffd|en ohne speichern
            Workbooks(oWB2).Close SaveChanges:=False
                   
            'on
            Call CALC_ON
        
            'scroll to check zeiterfassung (Spalte BA)
            ActiveWindow.ScrollColumn = 51
            ActiveWindow.ScrollRow = 1
        
            MsgBox ("Zeiterfassung wurde importiert. Bitte pr|fffd|fen Sie die Eintr|fffd|ge (rot=ver|fffd|nderter Eintrag; gr|fffd|n=neuer Eintrag; schwarz=gepr|fffd|fter Eintrag) und l|fffd|schen Sie in der Spalte BA *Check Zeiterfassung* nach erfolgter Pr|fffd|fung die rote/gr|fffd|ne Fahne.")
             
        End If
        
Else
    
   'Screen aus
    Call CALC_OFF

    'Datei |fffd|ffnen
    oFN = fDialog.SelectedItems(1)
    oWB2 = ActiveWorkbook.Name
    Workbooks(oWB2).Activate
                      
    'Blattschutz aus Vorlage entfernen und alle aktiven Filter l|fffd|schen
    On Error Resume Next
    ActiveSheet.Unprotect Password:="tnm"
    Range("ZE_HEAD").Activate
    ActiveSheet.ShowAllData
                
    If Range("miss_ZE").Value > 0 Then
    
        'zur|fffd|ck zur Hauptdatei
        Workbooks(oWB).Activate
        Call Protect_Sheet
        Call CALC_ON
        MsgBox ("Achtung! Die Zeiterfassung des ausgew|fffd|hlten Mitarbeiters kann leider nicht importiert werden, da diese Fehler und/oder Duplikate enth|fffd|lt! Bitte korrigieren Sie zuerst die Fehler (vor allem Duplikate) und versuchen Sie es erneut.")
                       
    Else
        
        On Error GoTo fehler 'falls falsche Datei ausgew|fffd|hlt wurde, soll Code abbrechen und ein Hinweis erfolgen
        Range("Tab_Zeiterfassung[[Check]:[anrechenb. Reisekosten netto]]").Copy
            
        'zur|fffd|ck zur Hauptdatei
        Workbooks(oWB).Activate

        'in Kalkulation zwischenspeichern und bearbeiten (zuerst in Kalkulation zwischenspeichern, um korrekte laufende Nummern zu erhalten)
        Sheet12.Range("Original_start").PasteSpecial xlPasteValues
            
            On Error Resume Next
            
            'als aktuellen Import kennzeichnen (=2)
            Range("Tab_Original[Original]").Replace What:="", Replacement:="2", LookAt:=xlPart, SearchOrder:=xlByRows
            
            'Original Zwischenspeicher sortieren nach Check (0=korrekt, 1=fehler, leer=keine eintr|fffd|ge)
            Call Original_sortieren

            'nicht ausgef|fffd|llte Zeiteintr|fffd|ge l|fffd|schen (Check Spalte > "", 0=korrekt, 1=fehler, leer=nicht ausgef|fffd|llt)
            Call Original_bereinigen
            
            'Duplikatsformel starten - Hashwert
            Call DuplicateDemo
                       
            'neu sortieren nach: 1. Mitarbeiter, 2. Datum, 3. Dauer
            Call Original_sortieren2
            
            '|fffd|brig gebliebenen Rest (neu u/o ver|fffd|ndert) in ZEG gr|fffd|n gekennzeichnet speichern
            Call Original_speichern
            
            'alle 20 Formeln wiederherstellen
            Call ZEG_Formeln
            
            'Datumsspalte bereinigen (Text in Zahl umwandeln)
            Call ZEG_Datum_korrigieren
            
            'nach Datum und Mitarbeiter aufsteigend sortieren
            Call ZEG_sortieren
            
            'sperren
            Call Protect_Sheet
            
        'schlie|fffd|en ohne speichern
        Workbooks(oWB2).Close SaveChanges:=False
        
        'on
        Call CALC_ON
    
        'scroll to check zeiterfassung (Spalte BA)
        ActiveWindow.ScrollColumn = 51
        ActiveWindow.ScrollRow = 1
        
        MsgBox ("Zeiterfassung wurde importiert. Bitte pr|fffd|fen Sie die Eintr|fffd|ge (rot=ver|fffd|nderter Eintrag; gr|fffd|n=neuer Eintrag; schwarz=gepr|fffd|fter Eintrag) und l|fffd|schen Sie in der Spalte BA *Check Zeiterfassung* nach erfolgter Pr|fffd|fung die rote/gr|fffd|ne Fahne.")
        
     End If
     
End If
    
Exit Sub
fehler:
Call Protect_Sheet
Call CALC_ON
MsgBox ("Import hat leider nicht geklappt. Bitte gehen Sie sicher, dass Sie die korrekte Datei ausgew|fffd|hlt haben und probieren Sie es noch einmal.")
     
End Sub

Sub Original_sortieren()

    'Reset
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Clear
    
    '1. nach Check (0=korrekt, 1=fehler, leer=keine Eintr|fffd|ge)
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Add Key:=Range("Tab_Original[Check]"), SortOn:= _
        xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    
    'Sortieren
    With Sheet12.ListObjects("Tab_Original").Sort
        .Apply
    End With
                
End Sub
Sub Original_bereinigen()
    
On Error Resume Next

    'im Original Zwischenspeicher nicht ausgef|fffd|llte Zeilen l|fffd|schen (Spalte Check: 0=korrekt, 1=fehler, leer=keine Eintr|fffd|ge an dem Datum) und echt blank machen
    
    'Pr|fffd|fen
    n = Range("spalte_original_check").Value
    Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=n, Criteria1:="="
        Range("Tab_Original[Check]").SpecialCells(xlCellTypeVisible).ClearContents
    Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=n
    
    'l|fffd|schen
    Range("Tab_Original[Check]").SpecialCells(xlCellTypeBlanks).EntireRow.Delete
    
End Sub


'
' **********************************************************************
' *                                                                    *
' *                          DuplicateDemo()                           *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub DuplicateDemo()

  Dim WSheet As Worksheet
  Dim ZERetour As ListObject
  
  Const DemoWSheetName As String = "ZE Retour"
  Const DemoTableName As String = "Tab_Original"
  
  On Error Resume Next
  
  Set WSheet = Nothing
  Set WSheet = ActiveWorkbook.Worksheets(DemoWSheetName)
  If (WSheet Is Nothing) Then
    Call MsgBox(Prompt:=("Das Tabellenblatt " & DemoWSheetName & " konnte nicht gefunden werden." & vbCrLf & _
                         "Die Duplikatssuche wird abgebrochen!"))
    Exit Sub
  End If
  
  Set ZERetour = Nothing
  Set ZERetour = WSheet.ListObjects(DemoTableName)
  If (ZERetour Is Nothing) Then
    Call MsgBox(Prompt:=("Die Tabelle " & DemoTableName & " konnte in der Tabellenblatt " & DemoWSheetName & " nicht gefunden werden." & vbCrLf & _
                         "Die Duplikatssuche wird abgebrochen!"))
    Exit Sub
  End If
  On Error GoTo 0

  Call MarkDuplicates(ZERetour:=ZERetour)
  
End Sub ' DuplicateDemo()

' **********************************************************************
' *                    Zeiterfassung/Duplikatssuche                    *
' **********************************************************************


Sub Original_sortieren2()
    
    'Reset
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Clear
    
    '1. nach Mitarbeiter
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Add Key:=Range("Tab_Original[Mitarbeiter]"), SortOn:= _
        xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    
    '2. nach Datum
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Add Key:=Range("Tab_Original[Datum]"), SortOn:= _
        xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    
    '3. nach Dauer
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Add Key:=Range("Tab_Original[Dauer]"), SortOn:= _
        xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        
    'Sort
    With Sheet12.ListObjects("Tab_Original").Sort
        .Header = xlYes
        .Apply
    End With
    
End Sub

Sub Original_speichern()

If Range("sum_original") = 0 Then
    
    MsgBox ("Es gibt keine neuen Eintr|fffd|ge in der ausgew|fffd|hlten Zeiterfassungsvorlage.")
    
Else

    On Error Resume Next
    
    'aktuellen Mitarbeiter filtern
    sp = Range("spalte_name").Value 'Spaltennummer von Spalte "Mitarbeiter"
    n = Range("original_name").Value 'aktuell importierter Name des Mitarbeiters
    
    Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=sp, Criteria1:=n
    
    'neue/ver|fffd|nderte Eintr|fffd|ge aus Zwischenspeicher in Zeiterfassung Gesamt |fffd|bertragen
        x = Range("spalte_original").Value '(spalte check ZE filtern: 1=ver|fffd|ndert im Original und 2=neu)
        
        Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=x, Criteria1:=">0"
    
            Range("Tab_Original[[Datum]:[Check ZE]]").SpecialCells(xlCellTypeVisible).Copy
            
            'pr|fffd|fen ob erster Eintrag in Tabelle (dann in Tabelle), sonst dranh|fffd|ngen an Tabelle
            If Range("ZEG_check") = "" Then
                Range("ZEG_start0").PasteSpecial Paste:=xlPasteValues
            Else
                Range("ZEG_start").PasteSpecial Paste:=xlPasteValues
            End If
            
        Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=x
               
        Range("Tab_Original[Original]").SpecialCells(xlCellTypeVisible).Replace What:="1", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows
        
    'Mitarbeiter filter entfernen
    Sheet12.ListObjects("Tab_Original").Range.AutoFilter Field:=sp
    
        'zuletzt importierte Eintr|fffd|ge als neue Referenz im Zwischenspeicher kennzeichnen
        Range("Tab_Original[Original]").Replace What:="2", Replacement:="1", LookAt:=xlPart, SearchOrder:=xlByRows
    
    
    'alten l|fffd|schen
    Sheet12.ListObjects("Tab_Original").Sort.SortFields.Clear
    Sheet12.ListObjects("Tab_Original").Sort. _
        SortFields.Add Key:=Range("Tab_Original[Original]"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
    With Sheet12.ListObjects("Tab_Original").Sort
        .Header = xlYes
        .Apply
    End With
    Range("Tab_Original[Original]").SpecialCells(xlCellTypeBlanks).EntireRow.Delete
    
    'zur Check Spalte scrollen
    Sheet5.Activate
    ActiveWindow.ScrollColumn = 55
    
End If

End Sub
Sub ZEG_Formeln()

On Error Resume Next

'9 Formelspalten wiederherstellen

    Range("Tab_Zeiterfassung_Gesamt[Check]").FormulaR1C1 = _
        "=IF(AND(Tab_Zeiterfassung_Gesamt[@[Belegnr./ Rechnungsnr.]]="""",OR(Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]=""extern"",Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]=""extern KoPa"")),1,IF(AND(Tab_Zeiterfassung_Gesamt[@Organisation]>"""",COUNTIF(dropdown_organisationen,Tab_Zeiterfassung_Gesamt[@Organisation])=0),1,IF(COUNTIF(dropdown_mitarbeiter,Tab_Zeite" & _
        "rfassung_Gesamt[@Mitarbeiter])=0,1,IF(Tab_Zeiterfassung_Gesamt[@Leistungsjahr]<>einstellungen_jahr,1,IF(OR(Tab_Zeiterfassung_Gesamt[@F|fffd|rderwerber]="""",Tab_Zeiterfassung_Gesamt[@Vorhaben]="""",Tab_Zeiterfassung_Gesamt[@Projekt]="""",Tab_Zeiterfassung_Gesamt[@Leistungsjahr]="""",Tab_Zeiterfassung_Gesamt[@Datum]="""",Tab_Zeiterfassung_Gesamt[@T|fffd|tigkeit]="""",Tab_Zeite" & _
        "rfassung_Gesamt[@Dauer]="""",Tab_Zeiterfassung_Gesamt[@Antragsnummer]="""",Tab_Zeiterfassung_Gesamt[@[Kostenstelle Arbeitspaket]]="""",Tab_Zeiterfassung_Gesamt[@Unterkostenstelle]="""",Tab_Zeiterfassung_Gesamt[@[B|fffd|ro/ Dienstreise]]="""",Tab_Zeiterfassung_Gesamt[@F|fffd|rdersatz]="""",Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]="""",Tab_Zeiterfassung_Gesamt[@Stundens" & _
        "atz]="""",Tab_Zeiterfassung_Gesamt[@Mitarbeiter]=""""),1,IF(AND(Tab_Zeiterfassung_Gesamt[@[B|fffd|ro/ Dienstreise]]=""B|fffd|ro"",Tab_Zeiterfassung_Gesamt[@[Gesamt - Reisekosten netto ]]>0),1,0))))))"

    Range("Tab_Zeiterfassung_Gesamt[Lf.Nr. ]").FormulaR1C1 = "=IFERROR(R[-1]C+1,1)"
    
    Range("Tab_Zeiterfassung_Gesamt[Monat]").FormulaR1C1 = "=IFERROR(MONTH(Tab_Zeiterfassung_Gesamt[@Datum]),"""")"

    Range("ZEG_spalte_foerderwerber").FormulaR1C1 = _
        "=IFERROR(INDEX(Tab_Budget[F|fffd|rderwerber],MATCH(Tab_Zeiterfassung_Gesamt[@[Kostenstelle Arbeitspaket]],Tab_Budget[Kostenstelle Beschreibung],0)),"""")"

    Range("ZEG_spalte_Vorhaben").FormulaR1C1 = _
        "=IFERROR(INDEX(Tab_Budget[Vorhaben],MATCH(Tab_Zeiterfassung_Gesamt[@[Kostenstelle Arbeitspaket]],Tab_Budget[Kostenstelle Beschreibung],0)),"""")"

    Range("ZEG_spalte_Projekt").FormulaR1C1 = _
        "=IFERROR(INDEX(Tab_Kostenstellen[Projekt],MATCH(Tab_Zeiterfassung_Gesamt[@[Kostenstelle Arbeitspaket]],Tab_Kostenstellen[Kostenstelle Arbeitspaket],0)),"""")"

    Range("ZEG_spalte_Personalkosten").FormulaR1C1 = _
        "=IFERROR(Tab_Zeiterfassung_Gesamt[@Stundensatz]*Tab_Zeiterfassung_Gesamt[@Dauer],0)"

    Range("ZEG_spalte_Foerderbetrag_brutto").FormulaR1C1 = _
        "=IF(Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]=""intern"",(Tab_Zeiterfassung_Gesamt[@[anrechenb. Personalkosten" & Chr(10) & "nach VWK/VOK]]*1.15+Tab_Zeiterfassung_Gesamt[@[anrechenb. Reisekosten " & Chr(10) & "nach VWK/VOK brutto]]),Tab_Zeiterfassung_Gesamt[@[anrechenb. Personalkosten" & Chr(10) & "nach VWK/VOK]]+Tab_Zeiterfassung_Gesamt[@[anrechenb. Reisekosten " & Chr(10) & "nach VWK/VOK brutto]])*Tab_Zeiterfass" & _
        "ung_Gesamt[@F|fffd|rdersatz]"

    Range("ZEG_spalte_Foerderbetrag_netto").FormulaR1C1 = _
        "=IF(Tab_Zeiterfassung_Gesamt[@[Interne/ Externe PK]]=""intern"",(Tab_Zeiterfassung_Gesamt[@[anrechenb. Personalkosten" & Chr(10) & "nach VWK/VOK]]*1.15+Tab_Zeiterfassung_Gesamt[@[anrechenb. Reisekosten " & Chr(10) & "nach VWK/VOK netto]]),Tab_Zeiterfassung_Gesamt[@[anrechenb. Personalkosten" & Chr(10) & "nach VWK/VOK]]+Tab_Zeiterfassung_Gesamt[@[anrechenb. Reisekosten " & Chr(10) & "nach VWK/VOK netto]])*Tab_Zeiterfassun" & _
        "g_Gesamt[@F|fffd|rdersatz]"
    
      
'12 Reisekosten Formeln wiederherstellen

    Range("Tab_Zeiterfassung_Gesamt[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "netto]").FormulaR1C1 = _
        "=IFERROR(Tab_Zeiterfassung_Gesamt[@[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "brutto]]/1.1,0)"

    Range("Tab_Zeiterfassung_Gesamt[Fahrtkosten PKW]").FormulaR1C1 = _
        "=IFERROR((Tab_Zeiterfassung_Gesamt[@[PKW (km)]]*kmgeld_PKW)+(Tab_Zeiterfassung_Gesamt[@[Anzahl Mitfahrer]]*Tab_Zeiterfassung_Gesamt[@[PKW (km)]]*kmgeld_Mitreisende),0)"

    Range("Tab_Zeiterfassung_Gesamt[max. N|fffd|chtigungsgeb|fffd|hr " & Chr(10) & "brutto]").FormulaR1C1 _
        = "=IF(Tab_Zeiterfassung_Gesamt[@N|fffd|chtigung]=""ja"",IF(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "brutto]]=0,INDEX(Tab_Reise[N|fffd|chtigungssatz brutto],MATCH(Tab_Zeiterfassung_Gesamt[@[Reiseland ausw|fffd|hlen]],Tab_Reise[Staaten],0)),MIN(INDEX(Tab_Reise[N|fffd|chtigungssatz brutto],MATCH(Tab_Zeiterfassung_Gesamt[@[Reiseland ausw|fffd|hlen]],Tab_Reise[Staaten],0))*7,Tab_Zeiterfassung_Gesam" & _
        "t[@[Hotelkosten " & Chr(10) & "brutto]])),0)"

    Range("Tab_Zeiterfassung_Gesamt[max. N|fffd|chtigungsgeb|fffd|hr " & Chr(10) & "netto]").FormulaR1C1 = _
        "=IF(Tab_Zeiterfassung_Gesamt[@N|fffd|chtigung]=""ja"",IF(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "netto]]=0,INDEX(Tab_Reise[N|fffd|chtigungssatz netto],MATCH(Tab_Zeiterfassung_Gesamt[@[Reiseland ausw|fffd|hlen]],Tab_Reise[Staaten],0)),MIN(INDEX(Tab_Reise[N|fffd|chtigungssatz netto],MATCH(Tab_Zeiterfassung_Gesamt[@[Reiseland ausw|fffd|hlen]],Tab_Reise[Staaten],0))*7,Tab_Zeiterfassung_Gesamt[@" & _
        "[Hotelkosten " & Chr(10) & "netto]])),0)"
        
    Range("Tab_Zeiterfassung_Gesamt[Taggeld " & Chr(10) & "brutto]").FormulaR1C1 = _
        "=IFERROR(INDEX(Tab_Reise[Tagsatz],MATCH(Tab_Zeiterfassung_Gesamt[@[Reiseland ausw|fffd|hlen]],Tab_Reise[Staaten],0))*(IF(Tab_Zeiterfassung_Gesamt[@[eingereichte Stunden]]<=5,0,IF(Tab_Zeiterfassung_Gesamt[@[eingereichte Stunden]]<=8,1/3,IF(Tab_Zeiterfassung_Gesamt[@[eingereichte Stunden]]<=12,2/3,1))))*(1-IF(Tab_Zeiterfassung_Gesamt[@Fr|fffd|hst|fffd|ck]=""Ja"",0.15,0)-IF(Tab_Zeite" & _
        "rfassung_Gesamt[@Mittagessen]=""Ja"",0.4,0)-IF(Tab_Zeiterfassung_Gesamt[@Abendessen]=""Ja"",0.4,0)),0)"

    Range("Tab_Zeiterfassung_Gesamt[Taggeld " & Chr(10) & "netto]").FormulaR1C1 = _
        "=IFERROR(Tab_Zeiterfassung_Gesamt[@[Taggeld " & Chr(10) & "brutto]]/1.1,0)"

    Range("Tab_Zeiterfassung_Gesamt[Gesamt - Reisekosten brutto]").FormulaR1C1 = _
        "=SUM(Tab_Zeiterfassung_Gesamt[@[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "brutto]],Tab_Zeiterfassung_Gesamt[@[Fahrtkosten PKW]],Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "brutto]],Tab_Zeiterfassung_Gesamt[@[Taggeld " & Chr(10) & "brutto]],Tab_Zeiterfassung_Gesamt[@[sonstige Reisekosten " & Chr(10) & "brutto]])"

    Range("Tab_Zeiterfassung_Gesamt[Gesamt - Reisekosten netto ]").FormulaR1C1 = _
        "=SUM(Tab_Zeiterfassung_Gesamt[@[|fffd|ffentl. Verkehrsmittel " & Chr(10) & "netto]],Tab_Zeiterfassung_Gesamt[@[Fahrtkosten PKW]],Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "netto]],Tab_Zeiterfassung_Gesamt[@[Taggeld " & Chr(10) & "netto]],Tab_Zeiterfassung_Gesamt[@[sonstige Reisekosten " & Chr(10) & "netto]])"

    Range("Tab_Zeiterfassung_Gesamt[davon nicht anrechenb. Reisekosten brutto]").FormulaR1C1 = _
        "=IF(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "brutto]]="""",0,IFERROR(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "brutto]]-Tab_Zeiterfassung_Gesamt[@[max. N|fffd|chtigungsgeb|fffd|hr " & Chr(10) & "brutto]],0))"

    Range("Tab_Zeiterfassung_Gesamt[davon nicht anrechenb. Reisekosten netto]").FormulaR1C1 = _
        "=IF(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "netto]]="""",0,IFERROR(Tab_Zeiterfassung_Gesamt[@[Hotelkosten " & Chr(10) & "netto]]-Tab_Zeiterfassung_Gesamt[@[max. N|fffd|chtigungsgeb|fffd|hr " & Chr(10) & "netto]],0))"

    Range("Tab_Zeiterfassung_Gesamt[anrechenb. Reisekosten brutto]").FormulaR1C1 = _
        "=Tab_Zeiterfassung_Gesamt[@[Gesamt - Reisekosten brutto]]-Tab_Zeiterfassung_Gesamt[@[davon nicht anrechenb. Reisekosten brutto]]"

    Range("Tab_Zeiterfassung_Gesamt[anrechenb. Reisekosten netto]").FormulaR1C1 = _
        "=Tab_Zeiterfassung_Gesamt[@[Gesamt - Reisekosten netto ]]-Tab_Zeiterfassung_Gesamt[@[davon nicht anrechenb. Reisekosten netto]]"
            
'F|fffd|rdersatzspalte Format wiederherstellen
    Range("ZEG_spalte_foerdersatz").NumberFormat = "0%"
    
    
'Formel Rechnungsleger wiederherstellen
    Range("Tab_Zeiterfassung_Gesamt[Rechnungsleger]").FormulaR1C1 = "=IFERROR(INDEX(Tab_Ausgaben[Rechnungsleger],MATCH(Tab_Zeiterfassung_Gesamt[@[Belegnr./ Rechnungsnr.]],Tab_Ausgaben[Belegnummer],0)),"""")"
    
End Sub
Sub ZEG_Datum_korrigieren()

    Range("multiplikator").Copy
    Range("spalte_ZEG_datum").PasteSpecial Paste:=xlPasteValues, Operation:=xlMultiply
    Range("spalte_ZEG_datum").NumberFormat = "m/d/yyyy"
        
End Sub

Sub ZEG_sortieren()

On Error Resume Next

    'Blattschutz entfernen
    Call ZEG_Filter_entfernen
    
    'Reset
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort.SortFields.Clear
      
    '1 Datum
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort.SortFields.Add Key:=Range( _
        "Tab_Zeiterfassung_Gesamt[Datum]"), SortOn:=xlSortOnValues, Order:= _
        xlAscending, DataOption:=xlSortNormal
      
    '2 Mitarbeiter
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort.SortFields.Add Key:=Range( _
        "Tab_Zeiterfassung_Gesamt[Mitarbeiter]"), SortOn:=xlSortOnValues, Order:= _
        xlAscending, DataOption:=xlSortNormal
        
    '3 Dauer
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort.SortFields.Add Key:=Range( _
        "Tab_Zeiterfassung_Gesamt[Dauer]"), SortOn:=xlSortOnValues, Order:= _
        xlAscending, DataOption:=xlSortNormal
        
    '4 Kostenstelle
    Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort.SortFields.Add Key:=Range( _
        "Tab_Zeiterfassung_Gesamt[Kostenstelle Arbeitspaket]"), SortOn:= _
        xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        
    With Sheet5.ListObjects("Tab_Zeiterfassung_Gesamt").Sort
        .Header = xlYes
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
End Sub

Sub ZEG_sortieren2()

    Call ZEG_sortieren
    Call Protect_Sheet
    
End Sub

Attribute VB_Name = "ZeiterfassungDuplikate"
' **********************************************************************
' *                                                                    *
' *                    Zeiterfassung/Duplikatssuche                    *
' *                                                                    *
' *                                           Version RL4 / 24.05.2019 *
' **********************************************************************
' *
' * Im AMA Controllingtool k|fffd|nnen wiederholt Zeiterfassungen importiert
' * werden. Dabei k|fffd|nnen in den neu importierten Daten Zeiten vorkommen
' * die bereits bei vorherigen Importvorg|fffd|ngen importiert wurden. Diese
' * Duplikate sollen automatisch erkannt werden.


' We shall require that all variables be explicitly defined
' (No automatic definition upon first use...)
Option Explicit

' **********************************************************************
' **********************************************************************

Private Const ActionDelete  As Integer = -1 ' Item is present in old data, but not in new data --> It was Deleted
Private Const ActionKeep    As Integer = 0 ' Item is present in old and new data --> Keep this item as the _one_ copy
Private Const ActionInsert  As Integer = 1 ' Item was not present in old data, but is appears in new data --> It was Inserted
Private Const ActionKeepDup As Integer = 2 ' Item is present in old and new data --> Keep _one_ copy, but this one is a duplicate
Private Const ActionDuplicate  As Integer = 3 ' There are several copies of this item within the old or within the new data. We don't need duplicates! --> This should never happen
Private Const ActionError   As Integer = 4 ' Item is neither part of the old or new data set, but has an invalid set ID --> This should never happen
'

' **********************************************************************
' *                                                                    *
' *                          MarkDuplicates()                          *
' * 89012345678901234567890123456789++98765432109876543210987654321098 *
' *                                                                    *
' **********************************************************************
Sub MarkDuplicates(ZERetour As ListObject)
  Dim WSheet As Worksheet
  Dim FirstColumnIdx As Long, LastColumnIdx As Long
  Dim HashColumn() As Long
  Dim HashColIdx As Long
  Dim RowOffset As Long, RowCnt As Long
  Dim RowIdx As Long
  Dim CRC32 As Long
  Dim CRC32Hash() As Long
  Dim Duplicate() As Long
  Dim Action() As Long
  Dim MatchIdx As Long
  Dim NextMatchIdx As Long
  Dim IsDuplicate As Boolean
  Dim CRC32IDRange As Range
  Dim DuplicateRange As Range
  Dim Data As Variant
  Dim SetColumnIdx As Long
  Dim InSetIdx As Integer
  Dim InSetACnt As Integer, InSetBCnt As Integer, InOtherSetCnt As Integer
  Dim ActionRange As Range
  
  ' We will later need to access cell values and require a handle to
  ' the worksheet that contains them.
  Set WSheet = ZERetour.Parent
  
  ' Create a list of all columns that need to be checked when looking
  ' for duplicates.
  ' We can initialize the array with a known invalid value and later
  ' check if the value is still there. This makes it possible to wrap
  ' the whole thing in an "On Error Resume Next" block...
  '
  ' Unfortunately there was a misunderstanding regarding about the
  ' columns that must be checked to identify duplicates.
  ' In version 63 of the Controlling Tool, the Table ZE_Retour some
  ' comments in cells AU2:AU8, that described an algorithm for
  ' duplicate matching. This description was mistaken for a specification
  ' and the matching code here was designed to match this (non-)
  ' specification. However these were actually just some notes and
  ' the correct requirements are to check the full length of _all_
  ' columns.
  '
  ' Since we already have the logic for filtering specific columns,
  ' we shall leave the code here and just fill it with all columns.
  ' This indirection will not provide maximal efficiency, however
  ' the extra cost is low, and we keep the flexibility to skip over
  ' selected columns if the need should ever arrise...
  #If False Then
    ReDim HashColumn(1 To 31)
    For HashColIdx = LBound(HashColumn) To UBound(HashColumn)
      HashColumn(HashColIdx) = -1
    Next HashColIdx
    HashColumn(1) = ZERetour.ListColumns("Datum").Range.Column
    HashColumn(2) = ZERetour.ListColumns("T|fffd|tigkeit").Range.Column
    HashColumn(3) = ZERetour.ListColumns("Dauer").Range.Column
    HashColumn(4) = ZERetour.ListColumns("Antragsnummer").Range.Column
    HashColumn(5) = ZERetour.ListColumns("Kostenstelle Arbeitspaket").Range.Column
    HashColumn(6) = ZERetour.ListColumns("Unterkostenstelle").Range.Column
    HashColumn(7) = ZERetour.ListColumns("Partner / Region").Range.Column
    HashColumn(8) = ZERetour.ListColumns("B|fffd|ro/ Dienstreise").Range.Column
    HashColumn(9) = ZERetour.ListColumns("F|fffd|rdersatz").Range.Column
    HashColumn(10) = ZERetour.ListColumns("Interne/ Externe PK").Range.Column
    HashColumn(11) = ZERetour.ListColumns("Stundensatz").Range.Column
    HashColumn(12) = ZERetour.ListColumns("Organisation").Range.Column
    HashColumn(13) = ZERetour.ListColumns("Mitarbeiter").Range.Column
    HashColumn(14) = ZERetour.ListColumns("max. f|fffd|rderb. Stunden").Range.Column
    HashColumn(15) = ZERetour.ListColumns("|fffd|ffentl. Verkehrsmittel " & Chr(10) & "brutto").Range.Column
    HashColumn(16) = ZERetour.ListColumns("PKW (km)").Range.Column
    HashColumn(17) = ZERetour.ListColumns("Anzahl Mitfahrer").Range.Column
    HashColumn(18) = ZERetour.ListColumns("Fahrtroute").Range.Column
    HashColumn(19) = ZERetour.ListColumns("Fahrtkosten PKW").Range.Column
    HashColumn(20) = ZERetour.ListColumns("Reiseland ausw|fffd|hlen").Range.Column
    HashColumn(21) = ZERetour.ListColumns("N|fffd|chtigung").Range.Column
    HashColumn(22) = ZERetour.ListColumns("Fr|fffd|hst|fffd|ck").Range.Column
    HashColumn(23) = ZERetour.ListColumns("Mittagessen").Range.Column
    HashColumn(24) = ZERetour.ListColumns("Abendessen").Range.Column
    HashColumn(25) = ZERetour.ListColumns("Hotelkosten " & Chr(10) & "brutto").Range.Column
    HashColumn(26) = ZERetour.ListColumns("max. N|fffd|chtigungsgeb|fffd|hr " & Chr(10) & "brutto").Range.Column
    HashColumn(27) = ZERetour.ListColumns("Taggeld " & Chr(10) & "brutto").Range.Column
    HashColumn(28) = ZERetour.ListColumns("sonstige Reisekosten " & Chr(10) & "brutto").Range.Column
    HashColumn(29) = ZERetour.ListColumns("Gesamt - Reisekosten brutto").Range.Column
    HashColumn(30) = ZERetour.ListColumns("davon nicht anrechenb. Reisekosten brutto").Range.Column
    HashColumn(31) = ZERetour.ListColumns("anrechenb. Reisekosten brutto").Range.Column
  #Else
    FirstColumnIdx = ZERetour.ListColumns("Datum").Range.Column
    LastColumnIdx = ZERetour.ListColumns("anrechenb. Reisekosten netto").Range.Column
    ReDim HashColumn(FirstColumnIdx To LastColumnIdx)
    For HashColIdx = LBound(HashColumn) To UBound(HashColumn)
      HashColumn(HashColIdx) = HashColIdx
    Next HashColIdx
  #End If
  
  RowOffset = ZERetour.Range.Row
  RowCnt = ZERetour.Range.Rows.Count - 1
  ReDim CRC32Hash(1 To RowCnt)
  ReDim Duplicate(1 To RowCnt)
  ReDim Action(1 To RowCnt)
  
  For RowIdx = 1 To RowCnt
    ' Compute the CRC-32 Hash value for the collected 'interesting' columns of each row
    ' Note: We could build one long string that contains the text from all interesting
    ' columns and then apply the CRC-32 hash function to that long string. However this
    ' would be inefficient. It is possible to compute the same value by computing the
    ' CRC-32 hash for the first column, and then use this partial result as seed value
    ' in the computation of the CRC-32 of the second column and that partial result as
    ' seed for the next column and so on. Produces the same results, but avoids the
    ' overhead of generating the long string.
    CRC32 = 0
    For HashColIdx = LBound(HashColumn) To UBound(HashColumn)
      CRC32 = CalcCRC32(WSheet.Cells(RowOffset + RowIdx, HashColumn(HashColIdx)), CRC32)
    Next HashColIdx
    
    ' Remember the CRC32 and assume that we have not seen the row before
    CRC32Hash(RowIdx) = CRC32
    Duplicate(RowIdx) = -1
    
    ' Now we have a CRC-32 for the current row and can check if that same CRC-32 value
    ' was already seen in a previous row. If it was not, we can be sure that this row
    ' is a 'new' row, was not seen before. If the CRC-32 hash was however seen before
    ' there is a high probability that this row as seen before, however there is a
    ' possibility that this is just an unfortunate collision of the hash function and
    ' the rows are indeed different. Thus we need to check all individual rows for
    ' identity to make absolutely sure that we have a duplicate. This full check is
    ' a slow operation, that we want to avoid, but since it is only needed when there
    ' is a CRC-32 match, it will usually only occur for rows that are really duplicates
    ' and we can't avoid the effort here...
    '
    ' FAQ: How likely are accidental hash collisions?
    ' If the table contains N lines, the the probability of an accidental collision
    ' will be about (N*(N-1))/2 / (2^32)   (for suffienty small values of N)
    ' Thus for N = 10000, there is a chance of ~0.017 = 1.7% for one accidental
    ' collision in the entire table. While this is quite low, it clearly shows
    ' that this chance can not be ignored and we MUST verify that equal hashes
    ' really belong to equal lines by checking for identity in every field.
    
    ' Note: We shall look for duplicates in reverse order. Thus if we remember which
    ' is the most recent duplicate we shall generate a 'linked list' kind of structure
    ' that we can later easily walk to detect _all_ duplicates of one line.
    ' For MatchIdx = 1 To RowIdx - 1  ' DON'T DO THIS!!
    For MatchIdx = RowIdx - 1 To 1 Step -1
      If CRC32 = CRC32Hash(MatchIdx) Then
        IsDuplicate = True
        For HashColIdx = LBound(HashColumn) To UBound(HashColumn)
          If (WSheet.Cells(RowOffset + RowIdx, HashColumn(HashColIdx)) <> WSheet.Cells(RowOffset + MatchIdx, HashColumn(HashColIdx))) Then
            IsDuplicate = False
            Exit For
          End If
        Next HashColIdx
        If (IsDuplicate) Then
          Duplicate(RowIdx) = MatchIdx ' Remember where we have seen the row before...
          Exit For
        End If
      End If
    Next MatchIdx
  Next RowIdx
  
  ' What we really need is the information which rows are unique and
  ' which rows are duplicates (and what they are duplicates of). We shall
  ' store this information in the "Duplikat" column.
  ' The first time a row shows up its "Duplikat" entry will be -1
  ' The secord and any later time a row shows up, its "Duplikat"
  ' entry will be the row number of the most recent previous copy.
  ' Thus we have a linked list, were we can walk from one duplicate
  ' to the previous duplicate until we arrive at a line that has
  ' no previous duplicate (as marked by a -1 entry).
  ' Note: Eventually we will probably not need this information. We
  ' shall store it in the table, because we have the capacity, but
  ' this can easily be removed later on...
#If True Then
  Set DuplicateRange = Nothing
  Set DuplicateRange = ZERetour.ListColumns("Duplikat").Range
  Data = DuplicateRange.Value
  For RowIdx = 1 To RowCnt
    If (Duplicate(RowIdx) < 0) Then
      Data(RowIdx + 1, 1) = -1
    Else
      Data(RowIdx + 1, 1) = RowOffset + Duplicate(RowIdx)
    End If
  Next RowIdx
  DuplicateRange.Value = Data
#End If
  
  ' Actually we are only moderately interested in the presence of
  ' duplicates. What we really need is information how the input
  ' data has changed from one import to the next. We want to know
  ' what data was present in a old data import but disappeared in the
  ' latest import, what data was unchanged from the previous data
  ' import to the latest import and what data newly appeared in the
  ' latest import.
  ' Thus we shall assume that we have a "Original" column that
  ' is '1' for old data and '2' for newly imported data. All other
  ' values are prohibited. We shall now walk our linked lists of
  ' duplicate data to see what data is available in the old and/or
  ' new data set (possibly several times within one set, for whatever
  ' strange reason) and mark data as 'deleted', 'unchanged' or
  ' 'inserted'. The case of 'unchanged' is special, since we will
  ' with to keep only one copy of the unchanged line. Thus we will
  ' mark the old copy as 'keep' and the new copy as 'keep duplicate'.
  ' If items are present more than once in the old data set or
  ' more than once in the new data set, then all duplicate copies
  ' (i.e. all but the first one) are marked as 'duplicate'. If
  ' a data element does not belong the the old or new data it will
  ' be marked as 'error'
  ' Suggested User Experience:
  ' .) Items that are marked 'deleted' are displayed in red
  ' .) Items that are marked 'inserted' are displayed in green
  ' .) Items that are marked 'keep' are displayed in the same color
  '    that they were before
  ' .) Items that are marked 'keep duplicate' are deleted
  ' .) Items that are marked 'duplicate' are deleted (with or without user feedback??)
  ' .) Items that are marked 'error' are signs of an internal error
  
  SetColumnIdx = ZERetour.ListColumns("Original").Range.Column
  For RowIdx = RowCnt To 1 Step -1
    If (Duplicate(RowIdx) <> 0) Then
      ' Walk the chain of duplicates and check how often each
      ' item is present in the old, new (and other) data set.
      InSetACnt = 0
      InSetBCnt = 0
      InOtherSetCnt = 0
      MatchIdx = RowIdx
      Do
        InSetIdx = WSheet.Cells(RowOffset + MatchIdx, SetColumnIdx).Value
        If InSetIdx = 1 Then
          InSetACnt = InSetACnt + 1
        ElseIf InSetIdx = 2 Then
          InSetBCnt = InSetBCnt + 1
        Else
          InOtherSetCnt = InOtherSetCnt + 1
        End If
        MatchIdx = Duplicate(MatchIdx)
      Loop While (MatchIdx > 0)
      
      ' Assign an appropriate action to each data element
      MatchIdx = RowIdx
      Do
        InSetIdx = WSheet.Cells(RowOffset + MatchIdx, SetColumnIdx).Value
        If InSetIdx = 1 Then
          If (InSetACnt = 1) Then
            ' This is the first (and usualy only) copy of the item in old data set
            If (InSetBCnt = 0) Then
              ' Item is only present in old data and has been deleted from new data
              Action(MatchIdx) = ActionDelete
            Else
              ' Item is present old and new data data
              Action(MatchIdx) = ActionKeep
            End If
          Else
            Action(MatchIdx) = ActionDuplicate ' This is a usless duplicate that shall be deleted!
            InSetACnt = InSetACnt - 1
          End If
        ElseIf InSetIdx = 2 Then
          If (InSetBCnt = 1) Then
            ' This is the first (and usualy only) copy of the item in new data set
            If (InSetACnt = 0) Then
              ' Item is only present in new data, it has been inserted into the data set
              Action(MatchIdx) = ActionInsert
            Else
              ' Item is present old and new data data. We shall eventually only keep
              ' the copy from the old data set, thus we can mark this as duplicate
              Action(MatchIdx) = ActionKeepDup
            End If
          Else
            Action(MatchIdx) = ActionDuplicate ' This is a usless duplicate that shall be deleted!
            InSetBCnt = InSetBCnt - 1
          End If
        Else
          Action(MatchIdx) = ActionError
        End If
        NextMatchIdx = Duplicate(MatchIdx)
        Duplicate(MatchIdx) = 0
        MatchIdx = NextMatchIdx
      Loop While (MatchIdx > 0)
    End If
  Next RowIdx
  
  ' Write the required actions to the "Action" column of the "ZE Retour" Table
  
  ' FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME
  ' Note: As of 2018-05-23, there is no "Action" column in this table. Thus
  ' we shall simply abuse the column 'A'. This is definitly not a clean
  ' solution, but I do not want to mess with the table layout of TnM.
  ' FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME
  
  ' I do not know if it better to write out the actions in human readable
  ' strings or as simple integers. I implemented both options, feel free to
  ' use whatever suits your needs...
  
  Set ActionRange = Nothing
  ' Set ActionRange = ZERetour.ListColumns("Action").Range  ' FIXME FIXME
  Set ActionRange = WSheet.Range(WSheet.Cells(RowOffset, 1), WSheet.Cells(RowOffset + RowCnt, 1))
  Data = ActionRange.Value
  For RowIdx = 1 To RowCnt
    #If True Then
    If (Action(RowIdx) = ActionDelete) Then
      Data(RowIdx + 1, 1) = "Del"
    ElseIf (Action(RowIdx) = ActionKeep) Then
      Data(RowIdx + 1, 1) = "Keep"
    ElseIf (Action(RowIdx) = ActionInsert) Then
      Data(RowIdx + 1, 1) = "Ins"
    ElseIf (Action(RowIdx) = ActionKeepDup) Then
      Data(RowIdx + 1, 1) = "KeepDup"
    ElseIf (Action(RowIdx) = ActionDuplicate) Then
      Data(RowIdx + 1, 1) = "Dup"
    ElseIf (Action(RowIdx) = ActionError) Then
      Data(RowIdx + 1, 1) = "Err"
    Else
      Data(RowIdx + 1, 1) = "???"
    End If
    #Else
    Data(RowIdx + 1, 1) = Action(RowIdx)
    #End If
  Next RowIdx
  ActionRange.Value = Data

  ' Now that we have checked for all duplicates, we are actally done with
  ' the CRC-32 values. We could simply discard the variable, or we can,
  ' just for the fun of debugging, store them in the "ID" column.
#If True Then
  Set CRC32IDRange = Nothing
  Set CRC32IDRange = ZERetour.ListColumns("ID").Range
  Data = CRC32IDRange.Value
  For RowIdx = 1 To RowCnt
    ' Note: We shall add a C-style "0x" prefix to make sure that Excel
    ' handles the values as "Text" and never as "Number"
    ' (e.g. 12345E12 is a valid hex number, that Excel sees as 1.2345E+16,
    ' which is definitly not what we want. 0x12345E12 is a text!)
    Data(RowIdx + 1, 1) = "0x" & Right("00000000" & Hex(CRC32Hash(RowIdx)), 8)
  Next RowIdx
  CRC32IDRange.Value = Data
#End If

End Sub ' MarkDuplicates()

' InQuest injected base64 decoded content
' j{kj
' x,j{kj

INQUEST-PP=macro
