Attribute VB_Name = "ConvMxNodeToTable"
'------------------------------------------------------------------------------
'
'------------------------------------------------------------------------------

Option Explicit
Option Private Module

Private row As Long



'------------------------------------------------------------------------------
Public Sub ConvertMxNodeToTableIDs(srcNode As MxNode, resultNode As MxNode, wks As Worksheet, xrow As Long, endRow As Long)

    Dim i As Long
    Dim r As Long
    Dim node1 As MxNode
    Dim node2 As MxNode
    
    row = xrow

    For i = 1 To resultNode.childNodesCount - 1
        Set node1 = srcNode.childNode(i)
        Set node2 = resultNode.childNode(i)

        r = srcNode.childNode(i + 1).sheetRow
        
        For row = row To r - 1
            WriteNodeAndParents wks, node2
        Next row
        
    Next i

    For row = row To endRow
        If Cells(row, 2) = "" Then Exit For
        WriteNodeAndParents wks, resultNode.childNode(resultNode.childNodesCount)
    Next row

End Sub


'------------------------------------------------------------------------------
Public Sub ConvertMxNodeToTable(rootNode As MxNode, wks As Worksheet, maxObjs As Long)
    Dim i As Long
    Dim node As MxNode
    
    row = cfgStartRow

    For i = 1 To rootNode.childNodesCount
        If maxObjs > 0 And i > maxObjs Then
            Exit Sub
        End If
        Set node = rootNode.childNode(i)
        TraverseHierarchy wks, node
    Next i

End Sub




'------------------------------------------------------------------------------
Private Sub TraverseHierarchy(wks As Worksheet, node As MxNode)
    Dim i As Long

    If node.childNodesCount = 0 Then
        WriteNodeAndParents wks, node
        row = row + 1
    Else
        For i = 1 To node.childNodesCount
            TraverseHierarchy wks, node.childNode(i)
        Next i
    End If

End Sub


'------------------------------------------------------------------------------
Private Sub WriteNodeAndParents(wks As Worksheet, node As MxNode)
    Dim i As Long
    Dim attrName As String
    Dim val As MxAttribute
    
    For i = 1 To node.attrCount
        Set val = node.attr(i)
        'LogDebug "> " & node.GetFullName & " " & val.GetName
        attrName = node.GetFullName & "." & val.GetName
        SetAttr attrName, val.GetValue, wks, row
    Next i
    
    If Not node.parentNode Is Nothing Then
        WriteNodeAndParents wks, node.parentNode
    End If

End Sub

'------------------------------------------------------------------------------
Private Sub SetAttr(attr As String, val As String, wks As Worksheet, row As Long)
    Dim i As Integer

    For i = 0 To UBound(attrList)
        If StrComp(attr, attrList(i), vbTextCompare) = 0 Or StrComp("[" & attr & "]", attrList(i), vbTextCompare) = 0 Then
            'LogDebug ">>> " & attr & "=" & val
            WriteFormatCell wks.Cells(row, i + 1), val, attrTypes(i), attrScales(i)
            Exit Sub
        End If
    Next i
End Sub

'------------------------------------------------------------------------------
Private Sub WriteFormatCell(cell As Range, ByVal attrValue As String, ByVal attrType As String, ByVal attrScale As Integer)
    Dim j As Long
    Dim formatString As String
    Dim tz As Integer

    
    If attrType = "BIGINT" Or attrType = "INTEGER" Or attrType = "SMALLINT" Then
        formatString = "0"
    ElseIf attrType = "AMOUNT" Or attrType = "FLOAT" Then
        formatString = "0.00"
    ElseIf attrType = "DECIMAL" Then
        formatString = "0."
        For j = 1 To attrScale
            formatString = formatString & "0"
        Next j
    ElseIf attrType = "DATETIME" Then
        formatString = cfgDateTimeFormat
    ElseIf attrType = "DATE" Then
        formatString = cfgDateFormat
    ElseIf attrType = "TIME" Then
        formatString = cfgTimeFormat
    ElseIf attrType = "YORN" Then
        formatString = "0"
    Else
        ' general should be better since the text formatting disables formula calculation
        ' however, using 'general' strings like '00100' are stored as '100'
        
        'formatString = "General"
        formatString = "@"         ' format as Text
    End If
    
    cell.NumberFormat = formatString
    
    cell.HorizontalAlignment = xlLeft

    
    If attrValue <> "" Then
        If attrType = "DATETIME" Then
            ' date format is 2010-07-27T06:00:00+02:00
            'LogDebug ">>>>>>>>> " & attrValue
            tz = CInt(Mid(attrValue, 20, 3))
            'attrValue = Mid(attrValue, 1, 16)
            attrValue = Mid(attrValue, 1, 10) & " " & Mid(attrValue, 12, 8)
            cell = DateAdd("h", -tz + cfgTimezone, CDate(attrValue))
            'LogDebug ">>>>>>>>> " & attrValue
        ElseIf attrType = "DATE" Then
            cell = CDate(Mid(attrValue, 1, 10))
        ElseIf attrType = "TIME" Then
            attrValue = Mid(attrValue, 12, 5)
            cell = DateAdd("h", -tz + cfgTimezone, CDate(attrValue))
        Else
            cell = attrValue
        End If
    Else
        cell = attrValue
    End If
    
End Sub



'Private Function ParseDate(s As String) As Date
'    ParseDate = DateSerial(Mid(s, 1, 4), Mid(s, 6, 2), Mid(s, 9, 2))
'    ParseDate = ParseDate + TimeSerial(Mid(s, 12, 2), Mid(s, 15, 2), 0)
'End Function
'Private Function ParseTime(s As String) As Date
'    ParseTime = TimeSerial(Mid(s, 1, 2), Mid(s, 3, 2), 0)
'End Function


Attribute VB_Name = "ConvTableToMxNode"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' ConvTableToMxNode
'------------------------------------------------------------------------------

Option Explicit


' class attributes

Private cWks As Worksheet

Private cRootName As String
Private cObjName As String
Private cBatchSize As Long
Private cMaxObjs As Long

Private numObjs As Long

Private row As Long
Private rootNode As MxNode
Private currNode As MxNode
Private parentNode As MxNode
Private prevObjectFullName As String


'------------------------------------------------------------------------------
Public Sub Init(wks As Worksheet, rootName As String, objname As String, sRow As Long, batchSize As Long)
    Set cWks = wks
    cRootName = rootName
    cObjName = objname
    cBatchSize = batchSize
    
    row = sRow
    numObjs = 0
End Sub


'------------------------------------------------------------------------------
Public Property Get numObjects() As Long
    numObjects = numObjs
End Property

'------------------------------------------------------------------------------
Public Property Get node() As MxNode
    Set node = rootNode
End Property

'------------------------------------------------------------------------------
Public Function currRow() As Long
    currRow = row
End Function

'------------------------------------------------------------------------------
Public Function isLast() As Boolean
    isLast = IsEmptyRow(row)
End Function

'------------------------------------------------------------------------------
Public Sub ParseTable()
    Dim col As Long
    Dim val As String
    Dim colName As String
    Dim ctype As String
    
    
    Set rootNode = New MxNode
    rootNode.Init cRootName, Nothing
    
    LogInfo "Parsing table from row " & row
    
    For row = row To MAXROWS

        If IsEmptyRow(row) Then
            Exit For
        End If
        
        Set parentNode = rootNode
        Set currNode = New MxNode
        currNode.Init cObjName, parentNode
        prevObjectFullName = cObjName
        currNode.sheetRow = row
        

        For col = 1 To UBound(attrList) + 1
            If IsUidCol(col) Or IsErrCol(col) Then
                ' skip and clean if it is a UID to be retrieved
                Cells(row, col) = ""
            Else
                'val = Cells(row, col).Text
                val = Cells(row, col)
                ctype = attrTypes(col - 1)
                
                If val <> "" Then val = AdjustVal(val, ctype)

                colName = Replace(Cells(HEADERROW, col), vbLf, "")
                
                xhAdd cObjName & "." & colName, val
            End If
        Next
        
        parentNode.AddChildNodeNE currNode
        
        
        If cBatchSize > 0 And rootNode.childNodesCount > cBatchSize Then
            rootNode.RemoveLastChildNode
            row = row
            Exit For
        End If
        
        If IsEmptyRow(row) Or cfgSplitChildRows Then
            row = row + 1
            Exit For
        End If
        
    Next row
    
    LogInfo "Objects parsed from table: " & rootNode.childNodesCount
    numObjs = numObjs + rootNode.childNodesCount

    'GetXML = root.ToXml
    
    'LogInfo "Finished creating XML structure"

End Sub




'------------------------------------------------------------------------------
' PRIVATE
'------------------------------------------------------------------------------

'------------------------------------------------------------------------------
Private Sub xhAdd(attr As String, Value As String)
    Dim pos As Integer
    Dim currVal As MxAttribute
    Dim currObjFullName As String
    Dim currObjName As String
    Dim currAttrName As String
    
    If Value = "" Then Exit Sub
    
    pos = InStrRev(attr, ".")

    currObjFullName = Left(attr, pos - 1)

    currAttrName = Right(attr, Len(attr) - pos)

    pos = InStrRev(currObjFullName, ".")
    If pos = 0 Then
        currObjName = currObjFullName
    Else
        currObjName = Right(currObjFullName, Len(currObjFullName) - pos)
    End If
    
    'LogDebug ">> " & attr & " = " & value
    

    If currObjFullName <> prevObjectFullName Then
        'LogDebug ">>>> currNode " & currNode.ToString
        'LogDebug ">>>> parentNode " & parentNode.ToString
        
        Set parentNode = parentNode.AddChildNodeNE(currNode)
    
        Set currNode = New MxNode
        currNode.Init currObjName, parentNode
    End If

    Set currVal = New MxAttribute
    currVal.Init currAttrName, Value
    currNode.AddAttribute currVal
    
    prevObjectFullName = currObjFullName
    
End Sub


'------------------------------------------------------------------------------
Private Function IsEmptyRow(ByVal row As Long) As Boolean
    'fix for: MxLoader '0' returned by external reference formula
    'https://www.ibm.com/developerworks/community/forums/html/topic?id=7f3917fb-92d2-4153-8631-4484bf4b742a
    'If IsEmpty(Cells(row, 1)) And IsEmpty(Cells(row, 2)) Then
    
    If Cells(row, 1) = "" And Cells(row, 2) = "" Then
        IsEmptyRow = True
    Else
        IsEmptyRow = False
    End If
End Function



'------------------------------------------------------------------------------
Private Function AdjustVal(ByVal val As String, ByVal ctype As String) As String

    If val <> "" Then
        If ctype = "BIGINT" Or ctype = "INTEGER" Or ctype = "SMALLINT" Or ctype = "DECIMAL" Or ctype = "FLOAT" Or ctype = "AMOUNT" Then
            val = Replace(val, ",", ".")
        ElseIf ctype = "DATETIME" Then
            'LogDebug ">>>>>>>>> " & val
            val = Format(CDate(val), "yyyy-mm-ddThh:mm:ss")
            val = val & Format(cfgTimezone, "+00;-00") & ":00"
            'LogDebug ">>>>>>>>> " & val
        ElseIf ctype = "DATE" Then
            val = Format(CDate(val), "yyyy-mm-ddT00:00:00")
            ' it seems strange but we also need to adjust dates: https://www.ibm.com/developerworks/community/forums/html/topic?id=a86f0c36-a754-48a1-b698-d1ba2f6262df#57187fd3-7bb4-455f-83aa-dc54e69955bd
            val = val & Format(cfgTimezone, "+00;-00") & ":00"
        ElseIf ctype = "TIME" Then
            val = DateAdd("h", cfgTimezone, CDate(val))
            'val = Format(val, "1970-01-01Thh:mm:ss") this is not working
            val = Format(val, "hh:mm:ss")
            val = "1970-01-01T" & val & Format(cfgTimezone, "+00;-00") & ":00"
        End If
    End If
        
    AdjustVal = val
End Function


Attribute VB_Name = "ConvXmlToMxNode"
Option Explicit
Option Private Module


Private rootXmlNode As MSXML2.IXMLDOMNode

'------------------------------------------------------------------------------
Public Function ConvertXmlToMxNode(objXML As MSXML2.DOMDocument60) As MxNode
    Dim i As Long
    Dim childNode As MxNode
    Dim objCount As Long
    
    LogInfo "Parsing objects from XML structure"
    
    
    'Set rootXmlNode = objXML.ChildNodes(1).ChildNodes(0)
    If cfgUseWs = True Then
        Set rootXmlNode = objXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).ChildNodes(0)
    Else
        Set rootXmlNode = objXML.ChildNodes(1).ChildNodes(0)
    End If
    
    Set ConvertXmlToMxNode = New MxNode
    ConvertXmlToMxNode.Init "", Nothing
    'LogDebug "--> root"

    If rootXmlNode Is Nothing Then
        LogDebug "No child objects to parse"
        Exit Function
    End If
    
    objCount = rootXmlNode.ChildNodes.Length
    
    LogDebug "Parsing " & objCount & " objects"
    
    For i = 0 To objCount - 1

        If ((i + 1) Mod 20) = 0 Then
            LogInfo "Parsing object " & (i + 1)
            'Application.ScreenUpdating = True
            DoEvents
            'Application.ScreenUpdating = False
        Else
            LogDebug "Parsing object " & (i + 1)
        End If
        
        
        Set childNode = New MxNode
        childNode.Init rootXmlNode.ChildNodes(i).nodeName, ConvertXmlToMxNode
        LogDebug "--> " & childNode.GetFullName
        
        ConvertXmlToMxNode.AddChildNode childNode
        
        ConvertXmlToMxNode2 childNode, rootXmlNode.ChildNodes(i)

    Next i
    
    LogInfo "Finished parsing objects from XML structure"
    
    'LogDebug ConvertXmlToMxNode.ToString
    
End Function


'------------------------------------------------------------------------------
' Recursive part of ConvertXmlToMxNode method
'------------------------------------------------------------------------------
Private Function ConvertXmlToMxNode2(node As MxNode, xmlNode As MSXML2.IXMLDOMNode) As MxNode
    Dim i As Integer
    Dim childNode As MxNode
    Dim xmlElem As MSXML2.IXMLDOMNode
    Dim nName As String
    

    For Each xmlElem In xmlNode.ChildNodes
        If xmlElem.HasChildNodes Then
        
            nName = GetNodeFullName(xmlElem)
            
            If IsValueAttribute(xmlElem) And AttrExists(nName) Then
                LogDebug ">> " & nName & " = " & xmlElem.Text
                node.AddAttribute2 xmlElem.nodeName, xmlElem.Text
            Else
                
                ' handle special GLACCOUNT field
                If IsValueGLAttribute(xmlElem) And AttrExists(nName) Then
                    Dim objAttrChild As MSXML2.IXMLDOMNode
                    For Each objAttrChild In xmlElem.ChildNodes
                        If objAttrChild.nodeName = "VALUE" Then
                            LogDebug ">> " & nName & " = " & objAttrChild.Text
                            node.AddAttribute2 xmlElem.nodeName, objAttrChild.Text
                        End If
                    Next objAttrChild

                ' do not proceed if the object does not exists in the worksheet
                ElseIf ObjectExists(nName) Then
                    
                    Set childNode = New MxNode
                    childNode.Init xmlElem.nodeName, node
                    LogDebug "> " & childNode.GetFullName
                    
                    node.AddChildNode childNode
    
                    ConvertXmlToMxNode2 childNode, xmlElem
                End If
            End If
        End If
    Next

End Function



'------------------------------------------------------------------------------
Private Function IsValueAttribute(xmlNode As MSXML2.IXMLDOMNode) As Boolean
    If xmlNode.FirstChild.NodeType = NODE_TEXT Then
        IsValueAttribute = True
        Exit Function
    End If
    IsValueAttribute = False
End Function

Private Function IsValueGLAttribute(xmlNode As MSXML2.IXMLDOMNode) As Boolean
    'If xmlNode.nodeName = "GLACCOUNT" Or xmlNode.nodeName = "GLCREDITACCT" Then
    Dim objAttrChild As MSXML2.IXMLDOMNode
    For Each objAttrChild In xmlNode.ChildNodes
        If objAttrChild.nodeName = "GLCOMP" Then
            IsValueGLAttribute = True
            Exit Function
        End If
    Next objAttrChild
 
    IsValueGLAttribute = False
End Function

'------------------------------------------------------------------------------
Private Function GetNodeFullName(xmlNode As MSXML2.IXMLDOMNode) As String
    GetNodeFullName = xmlNode.nodeName
    If Not xmlNode.parentNode Is Nothing Then
        If xmlNode.parentNode.nodeName <> rootXmlNode.nodeName Then
            GetNodeFullName = GetNodeFullName(xmlNode.parentNode) & "." & GetNodeFullName
        End If
    End If
End Function

Attribute VB_Name = "FLL"
'------------------------------------------------------------------------------
' FLL: FailureListLoader
' See http://maximodev.blogspot.com/2013/07/how-to-import-failure-list-from-excel.html
'------------------------------------------------------------------------------

Option Explicit
Option Private Module

Private Const objname = "MXL_FAILURELIST"

Private mainObjAttrs As MxNode


'------------------------------------------------------------------------------
Public Sub UploadFailureList1()
    Dim row As Long
    Dim fc As String
    Dim xml As String
    Dim rootNode As MxNode
    Dim fcNode As MxNode


    LogDebug "-----------------------------------------------------------------------"

    For row = cfgStartRow To MAXROWS
        If IsEmpty(Cells(row, 3)) Then Exit For
        
        ' focus on current cell to show progress and DoEvents
        Cells(row, 3).Select
        DoEvents
        'If row Mod 10 = 0 Then DoEvents

        If Cells(row, 2) = "" Then
            fc = QueryFc(objname, Cells(row, 1), Cells(row, 3), "")
        
            If fc <> "" Then
                Cells(row, 2) = fc
                SetIDs row, 2
            End If
        End If
        
        If Cells(row, 2) = "" Then

            Set rootNode = New MxNode
            rootNode.Init Cells(1, 1) & "FAILURELISTSet", Nothing
            
            Set fcNode = New MxNode
            fcNode.Init Cells(1, 2), rootNode
            
            rootNode.AddChildNode fcNode
            
            fcNode.AddAttribute2 "ORGID", Cells(row, 1)
            fcNode.AddAttribute2 "FAILURECODE", Cells(row, 3)
            
            xml = rootNode.ToXml
    
            fc = DoCreateFc(objname, "FAILURELIST", xml)
            
            If fc <> "" Then
                Cells(row, 2) = fc
                SetIDs row, 2
            End If

        End If
    Next row
    
End Sub



'------------------------------------------------------------------------------
Public Sub UploadFailureList2(ByVal col As Long, ByVal fcType As String)
    Dim row As Long
    Dim fc As String
    Dim xml As String
    Dim rootNode As MxNode
    Dim fcNode As MxNode
    

    LogDebug "-----------------------------------------------------------------------"
    LogDebug "Updating " & fcType

    For row = cfgStartRow To MAXROWS
        If IsEmpty(Cells(row, col + 1)) Then Exit For
        
        ' focus on current cell to show progress and DoEvents
        Cells(row, col + 1).Select
        DoEvents
        
        If Cells(row, col) = "" Then
            fc = QueryFc(objname, Cells(row, 1), Cells(row, col + 1), Cells(row, col - 2))
            
            'LogDebug Cells(row, col + 1) & ":" & fc
            
            If fc <> "" Then
                Cells(row, col) = fc
                SetIDs2 row, col
            End If
        End If
        
        If Cells(row, col) = "" And Cells(row, col - 2) <> "" Then

            Set rootNode = New MxNode
            rootNode.Init Cells(1, 1) & "Set", Nothing
            
            Set fcNode = New MxNode
            fcNode.Init Cells(1, 2), rootNode
            
            rootNode.AddChildNode fcNode
            
            fcNode.AddAttribute2 "ORGID", Cells(row, 1)
            fcNode.AddAttribute2 "FAILURECODE", Cells(row, col + 1)
            fcNode.AddAttribute2 "TYPE", fcType
            fcNode.AddAttribute2 "PARENT", Cells(row, col - 2)
            
            xml = rootNode.ToXml
    
            fc = DoCreateFc(objname, "FAILURELIST", xml)
            LogDebug xml
            
            If fc <> "" Then
                Cells(row, col) = fc
                SetIDs2 row, col
            End If

        End If
    Next row
    
    Cells(1, 1).Select

End Sub


'------------------------------------------------------------------------------
Private Sub SetIDs(ByVal srcRow As Long, srcCol As Long)
    Dim row As Long
    Dim id As String
    Dim val As String
    Dim org As String
    
    id = Cells(srcRow, srcCol)
    val = Cells(srcRow, srcCol + 1)
    org = Cells(srcRow, 1)

    For row = cfgStartRow To MAXROWS
        If IsEmpty(Cells(row, srcCol + 1)) Then Exit For
        If row <> srcRow And Cells(row, srcCol + 1) = val And Cells(row, 1) = org Then
            Cells(row, srcCol) = id
        End If
    Next row

End Sub

'------------------------------------------------------------------------------
Private Sub SetIDs2(ByVal srcRow As Long, ByVal srcCol As Long)
    Dim row As Long
    Dim id As Long
    Dim val As String
    Dim parent As Long
    
    id = Cells(srcRow, srcCol)
    val = Cells(srcRow, srcCol + 1)
    parent = Cells(srcRow, srcCol - 2)

    For row = cfgStartRow To MAXROWS
        If IsEmpty(Cells(row, srcCol + 1)) Then Exit For
        If row <> srcRow And Cells(row, srcCol + 1) = val And Cells(row, srcCol - 2) = parent Then
            Cells(row, srcCol) = id
        End If
    Next row

End Sub



'------------------------------------------------------------------------------

Private Function DoCreateFc(ByVal os As String, io As String, ByVal req As String) As String
    Dim objXML As MSXML2.DOMDocument60
    Dim objSet, obj
    Dim mxReq As MxHttpRequest

    Set mxReq = New MxHttpRequest
    mxReq.DoPost os, os, "Create", "", req
    
    Set objXML = mxReq.GetXML

    Set objSet = objXML.ChildNodes(1).ChildNodes(0).ChildNodes(0)
    
    For Each obj In objSet.ChildNodes
        LogDebug obj.nodeName
        LogDebug " " + obj.nodeName + "=" + obj.Text
        If obj.nodeName = "FAILURELIST" Then DoCreateFc = obj.Text
    Next obj
    
End Function

'------------------------------------------------------------------------------

Private Function QueryFc(ByVal os As String, ByVal orgId As String, ByVal fc As String, ByVal parent As String) As String
    Dim objXML As MSXML2.DOMDocument60
    Dim objSet, obj
    Dim mxReq As MxHttpRequest
    Dim httpReq As String
    Dim xml As String
    Dim where As String
    
    where = "FAILURECODE='" & fc & "'" & " and ORGID='" & orgId & "'"
    If parent = "" Then
        where = where & " and PARENT is null"
    Else
        where = where & " and PARENT='" & parent & "'"
    End If
    
    Set mxReq = New MxHttpRequest
    
    xml = "<" & os & "Query>" & vbNewLine & _
       "<WHERE>" + where + "</WHERE>" & vbNewLine & _
      "</" & os & "Query>"

    mxReq.DoPost os, os, "Query", "maxItems=""1""", xml

    Set objXML = mxReq.GetXML
    
    If objXML.ChildNodes(1).ChildNodes(0).ChildNodes.Length = 0 Then
        QueryFc = ""
        Exit Function
    End If
    
    Set objSet = objXML.ChildNodes(1).ChildNodes(0).ChildNodes(0)
    
    For Each obj In objSet.ChildNodes
        LogDebug obj.nodeName
        LogDebug " " + obj.nodeName + "=" + obj.Text
        If obj.nodeName = "FAILURELIST" Then QueryFc = obj.Text
    Next obj

End Function

Attribute VB_Name = "Logger"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Sub xx()
    MsgBox "aa"
End Sub
Attribute VB_Name = "Main"
'------------------------------------------------------------------------------
' Main: Main macro and global variables
'------------------------------------------------------------------------------

Option Explicit


'------------------------------------------------------------------------------
' Global variables and constants
'------------------------------------------------------------------------------

Public Const APPNAME = "MxLoader"
Public Const MAXCOLS = 500
Public Const MAXROWS = 300000
Public Const HEADERROW = 2
Public Const MXACTIONS = "Query,Sync-AddChange,Sync-Add,Sync-Change,Sync,Delete"

Public Const MAXLOGSIZE = 2000000


Public Const MXERR_INVALIDSHEET = 1010
Public Const MXERR_NOINTOBJ = 1011
Public Const MXERR_NOMXOBJ = 1012
Public Const MXERR_NOACTION = 1013
Public Const MXERR_NOATTR = 1014
Public Const MXERR_NOPWD = 1015
Public Const MXERR_WEBLOGINNODLL = 1016
Public Const MXERR_WEBLOGINFAILED = 1017


' Settings

Global cfgMxUrl As String
Global cfgEnableAuth As String
Global cfgAuthUser As String
Global cfgAuthPwd As String

Global cfgBaseLanguage As String
Global cfgTransLanguage As String
Global cfgTimezone As Integer
Global cfgDateTimeFormat As String
Global cfgDateFormat As String
Global cfgTimeFormat As String

Global cfgResolveTimeout As Long
Global cfgConnectTimeout As Long
Global cfgSendTimeout As Long
Global cfgReceiveTimeout As Long
Global cfgProxy As String


Global cfgLogEnabled As Boolean
Global cfgLogFileName As String
Global cfgLogLevel As String

Global cfgMaxCount As Long
Global cfgBatchSize As Long
Global cfgStartRow As Long
Global cfgContinueSync As Boolean
Global cfgStopOnError As Boolean
Global cfgSplitChildRows As Boolean
Global cfgDisplaySummary As Boolean
Global cfgQueryOnly As Boolean
Global cfgXmlNs As String
Global cfgUseWs As Boolean

Global cfgSamlLoginOk As String
Global cfgSamlCookie As String
Global cfgSamlWidth As Integer
Global cfgSamlHeight As Integer
Global cfgSamlLogoutUrl As String

Global logFile As String

Global svcOperation As String
Global svcAction As String
Global attrList() As String
Global attrTypes() As String
Global attrScales() As Integer


Global lastWks As String
Global lastRow As Long


'------------------------------------------------------------------------------
'------------------------------------------------------------------------------
' Create new sheet from template
'------------------------------------------------------------------------------
Public Sub MxPreviewXmlAction()
    MxPreviewXml
End Sub

Public Sub MxPreviewXml(Optional ByVal control As IRibbonControl)
    Dim xmlBody As String
    Dim os As String
    Dim convTbl As New ConvTableToMxNode
    
    GeMxLoaderConfig
    DoCheckActiveSheet
    GetSheetConfig
    
    If svcOperation <> "Sync" Then
        MsgBox "Only 'Sync' actions are supported for XML preview", vbExclamation, APPNAME
        Exit Sub
    End If
    
    convTbl.Init ActiveSheet, Cells(1, 1) & "Set", Cells(1, 2), cfgStartRow, 0

    convTbl.ParseTable
    xmlBody = convTbl.node.ToXml

    Dim mxReq As MxHttpRequest
    Set mxReq = New MxHttpRequest
    os = Cells(1, 1)
    
    xmlBody = "<Sync" & os & _
            " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""" & _
            " xmlns=""" & cfgXmlNs & """" & _
            " baseLanguage=""" & cfgBaseLanguage & """" & _
            " transLanguage=""" & cfgBaseLanguage & """ >" & vbNewLine & _
            xmlBody & _
        "</Sync" & os & ">"
        
    frmPreview.Init xmlBody

End Sub


Public Sub MxTestConnection(Optional ByVal control As IRibbonControl)
    Dim mxReq As MxHttpRequest

    On Error GoTo CatchError
    
    GeMxLoaderConfig

    Set mxReq = New MxHttpRequest

    mxReq.TestConnection

    MsgBox "Server connection OK", vbInformation, APPNAME

    Exit Sub

CatchError:

    frmError.Init Err.Number, Err.Source, Err.Description
    
End Sub


Public Sub MxDisconnectWeb(Optional ByVal control As IRibbonControl)
    GeMxLoaderConfig
    ThisWorkbook.Worksheets("ConfigH").Cells(1, 2) = ""
    MsgBox "Web session token deleted. Launching logout page...", vbInformation, APPNAME
    
    If cfgEnableAuth = "Web" Then

    Dim c As Object
        Set c = GetWebLogin
        
        c.width = cfgSamlWidth
        c.height = cfgSamlHeight
        c.Run cfgSamlLogoutUrl
        Do While Not c.IsDisposed
            DoEvents
        Loop

    End If

End Sub


'------------------------------------------------------------------------------
' Call MIF
'------------------------------------------------------------------------------
Public Sub MxRunAction()
    MxRun
End Sub

Public Sub MxRun(Optional ByVal control As IRibbonControl)
    Dim msgRet As Integer
    Dim ret As Boolean
    
    Dim node As MxNode
    Dim node2 As MxNode
    
    On Error GoTo CatchError
    
    GeMxLoaderConfig
    DoCheckActiveSheet
    GetSheetConfig
    
    If cfgQueryOnly = True And svcOperation <> "Query" Then
        MsgBox "Insert/Update/delete of objects is disabled." & vbNewLine & "Only 'Query' action can be selected in cell C1.", vbExclamation, APPNAME
        Exit Sub
    End If
    
    If Cells(1, 1) = "MXL_FAILURELIST" Then
        If svcOperation <> "Sync" Then
            MsgBox "Only 'Sync' is supported", vbExclamation, APPNAME
            Exit Sub
        End If
        
        UploadFailureList1
                
        Dim i As Long
        For i = 4 To MAXROWS Step 2
            If IsEmpty(Cells(HEADERROW, i)) Or IsEmpty(Cells(HEADERROW, i + 1)) Then Exit For
            UploadFailureList2 i, Cells(HEADERROW, i + 1)
        Next
        
        MsgBox "Done"

    ElseIf svcOperation = "Query" Then
        
        DoQuery
        
    ElseIf svcOperation = "Sync" Or svcOperation = "Delete" Then
        
        DoSync
        
    Else
        MsgBox "Unsupported action: " & svcOperation, vbExclamation, APPNAME
    End If

    Exit Sub

CatchError:
    frmError.Init Err.Number, Err.Source, Err.Description
    'Application.Calculation = xlAutomatic
    'Application.ScreenUpdating = True
End Sub


'------------------------------------------------------------------------------
' Create new sheet from template
'------------------------------------------------------------------------------
Public Sub MxAddSheetAction()
    MxAddSheet
End Sub

Public Sub MxAddSheet(Optional ByVal control As IRibbonControl)
    frmTemplates.Show
End Sub

'------------------------------------------------------------------------------
' Settings
'------------------------------------------------------------------------------

Public Sub MxConfiguration(Optional ByVal control As IRibbonControl)
    Worksheets("Config").Activate
End Sub

Public Sub MxTestConnectionAction()
    MxTestConnection
End Sub


'------------------------------------------------------------------------------
' Refresh attribute types from Maximo
'------------------------------------------------------------------------------
Public Sub MxRefreshAttrCfg(Optional ByVal control As IRibbonControl)
    Dim mxReq As MxHttpRequest
    Dim msgResp As VbMsgBoxResult
    Dim node As MxNode

    msgResp = MsgBox("This button refreshes TPAE's data dictionary from the server to correctly manage data types." & vbNewLine & _
                     "The Object Structure MXL_MAXATTRIBUTECFG must be defined on the server." & vbNewLine & _
                     "This can be done automatically by clicking on the 'Create Custom Object Structures button or manually using the Object Structures application in Integration module." & vbNewLine & _
                     vbNewLine & _
                     "The operation can take some minutes to complete. Please be patient.", _
                     vbOKCancel + vbInformation, _
                     "Refresh Data Dictionary")
    
    If msgResp = vbCancel Then Exit Sub

    On Error GoTo CatchError
    
    Worksheets("MxAttrCfg").Activate
    
    GeMxLoaderConfig
    GetSheetConfig
    
    'override some settings
    cfgLogLevel = "INFO"
    cfgMaxCount = 0
    
    Set mxReq = New MxHttpRequest
    mxReq.GetData Cells(1, 1), Cells(1, 4), "maxtype"

    CleanSheet

    Set node = mxReq.GetMxNode
    ConvertMxNodeToTable node, ActiveSheet, 0
    
    LogInfo "Done"
    
    MsgBox "Data dictionary loaded successfully", vbExclamation, APPNAME
    
    Exit Sub

CatchError:
    frmError.Init Err.Number, Err.Source, Err.Description
End Sub

'------------------------------------------------------------------------------
Public Sub MxImportOS(Optional ByVal control As IRibbonControl)
    Dim mxReq As MxHttpRequest
    Dim node As MxNode
    Dim wks As Worksheet

    On Error GoTo CatchError
    
    Worksheets("MxLoaderOS").Activate
    
    GeMxLoaderConfig
    GetSheetConfig
    
    'override some settings
    cfgLogLevel = "INFO"
    cfgMaxCount = 0

    Set wks = ActiveSheet
    Dim convTbl As New ConvTableToMxNode

    convTbl.Init wks, Cells(1, 1) & "Set", Cells(1, 2), 3, 0
    convTbl.ParseTable

    Set mxReq = New MxHttpRequest
    mxReq.SyncData Cells(1, 1), svcOperation, convTbl.node.ToXml
    
    MsgBox "Custom MxLoader Object Structures successfully created", vbExclamation, APPNAME

    Exit Sub

CatchError:
    frmError.Init Err.Number, Err.Source, Err.Description
End Sub


'------------------------------------------------------------------------------
' Functions for MxLoader toolbar buttons
'------------------------------------------------------------------------------

Public Sub MxColAdd(ByVal control As IRibbonControl)
    Dim rows As Long
    Dim col As Long

    rows = GetRowsCount
    col = ActiveCell.Column
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col), ActiveSheet.Cells(rows, col)).Select

    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    Cells(HEADERROW, col).Select
End Sub


'------------------------------------------------------------------------------
Public Sub MxColDel(ByVal control As IRibbonControl)
    Dim ret As VbMsgBoxResult
    
    ret = MsgBox("Are you sure you want to delete column '" & ActiveSheet.Cells(HEADERROW, ActiveCell.Column) & "' ?", vbOKCancel, "Delete column")
    If ret = vbCancel Then Exit Sub
    
    MxColSel
    Selection.Delete Shift:=xlToLeft
    
    Cells(HEADERROW, ActiveCell.Column).Select
End Sub


'------------------------------------------------------------------------------
Public Sub MxColRight(ByVal control As IRibbonControl)
    Dim rows As Long
    Dim row As Long
    Dim col As Long
    Dim w1, w2

    If ActiveSheet.AutoFilterMode Then
        MsgBox "You must turn off filters to move columns", vbExclamation
        Exit Sub
    End If
  
    rows = GetRowsCount
    row = ActiveCell.row
    col = ActiveCell.Column
    w1 = ActiveSheet.Columns(col).ColumnWidth
    w2 = ActiveSheet.Columns(col + 1).ColumnWidth
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col), ActiveSheet.Cells(rows, col)).Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col + 2), ActiveSheet.Cells(rows, col + 2)).Select
    Selection.Cut
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col), ActiveSheet.Cells(rows, col)).Select
    ActiveSheet.Paste
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col + 2), ActiveSheet.Cells(rows, col + 2)).Select
    Selection.Delete Shift:=xlToLeft
    
    
    ActiveSheet.Columns(col).ColumnWidth = w2
    ActiveSheet.Columns(col + 1).ColumnWidth = w1
    
    Cells(row, col + 1).Select
End Sub


'------------------------------------------------------------------------------
Public Sub MxColLeft(ByVal control As IRibbonControl)
    Dim rows As Long
    Dim row As Long
    Dim col As Long
    Dim w1, w2

    rows = GetRowsCount
    row = ActiveCell.row
    col = ActiveCell.Column
    w1 = ActiveSheet.Columns(col - 1).ColumnWidth
    w2 = ActiveSheet.Columns(col).ColumnWidth
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col - 1), ActiveSheet.Cells(rows, col - 1)).Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col + 1), ActiveSheet.Cells(rows, col + 1)).Select
    Selection.Cut
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col - 1), ActiveSheet.Cells(rows, col - 1)).Select
    ActiveSheet.Paste
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col + 1), ActiveSheet.Cells(rows, col + 1)).Select
    Selection.Delete Shift:=xlToLeft
    
    
    ActiveSheet.Columns(col - 1).ColumnWidth = w2
    ActiveSheet.Columns(col).ColumnWidth = w1
    
    Cells(row, col - 1).Select
End Sub


'------------------------------------------------------------------------------
' PRIVATE METHODS
'------------------------------------------------------------------------------

Private Sub MxColSel()
    Dim rows As Long
    Dim col As Long

    rows = GetRowsCount
    col = ActiveCell.Column
    
    ActiveSheet.Range(ActiveSheet.Cells(HEADERROW, col), ActiveSheet.Cells(rows, col)).Select
End Sub


Private Sub DoQuery()
    Dim mxReq As MxHttpRequest
    Dim node As MxNode

    
    ' verify if sheet is empty and display warning
    If Not IsEmpty(Cells(cfgStartRow, 1)) Or Not IsEmpty(Cells(cfgStartRow, 2)) Then
        Dim msgRet As VbMsgBoxResult
        msgRet = MsgBox("Worksheet is not empty." & vbNewLine & "Current data will be replaced.", vbOKCancel + vbExclamation, APPNAME)
        If msgRet = vbCancel Then Exit Sub
    End If
    
    Set mxReq = New MxHttpRequest
    mxReq.GetData Cells(1, 1), Cells(1, 4), Cells(1, 5)
    
    CleanSheet
    
    Set node = mxReq.GetMxNode
    ConvertMxNodeToTable node, ActiveSheet, cfgMaxCount
    
    LogInfo "Done"
    
    If cfgDisplaySummary = False Then Exit Sub
    
    If cfgMaxCount > 0 And node.childNodesCount > cfgMaxCount Then
        MsgBox "Done (" & node.childNodesCount - 1 & " objects returned)" & vbCrLf & "Result set truncated!", vbExclamation, APPNAME
    Else
        MsgBox "Done (" & node.childNodesCount & " objects returned)", vbInformation, APPNAME
    End If
    
End Sub

Private Sub DoSync()
    Dim mxReq As MxHttpRequest
    Dim node As MxNode
    Dim node2 As MxNode
    Dim xmlBody As String
    Dim wks As Worksheet
    Dim currSelection As Range
    

    ' save the current worksheet to avoid writing on a different one if the users swithes the active sheet
    Set wks = ActiveSheet
    Set currSelection = ActiveCell
    

    ' Display a warning message is action is 'Sync'
    If svcOperation = "Sync" And svcAction = "" Then
        Dim msgRetSync As VbMsgBoxResult
        msgRetSync = MsgBox("Action 'Sync' deletes all the child objects to match the input data." & vbCrLf & "Use 'Sync-AddChange' is you are not sure." & vbCrLf & vbCrLf & "Are you sure you want to run a 'Sync' action?", vbYesNo + vbQuestion)
        If msgRetSync <> vbYes Then
            Exit Sub
        End If
    End If

    ' Ask user to resume from last row in error
    If cfgContinueSync = True And lastRow <> 0 And lastRow <> cfgStartRow And lastWks = wks.name Then
        Dim msgRet As VbMsgBoxResult
        msgRet = MsgBox("Continuing synching from row " & lastRow, vbYesNoCancel + vbQuestion)
        If msgRet = vbYes Then
            cfgStartRow = lastRow
        ElseIf msgRet = vbCancel Then
            Exit Sub
        End If
    End If
    
    
    lastWks = wks.name
    
    If cfgStopOnError = False Then
        On Error Resume Next
    End If
    
    ' Initialize the ConvTableToMxNode object that will handle the Table>XML conversion
    Dim convTbl As New ConvTableToMxNode
    convTbl.Init wks, Cells(1, 1) & "Set", Cells(1, 2), cfgStartRow, cfgBatchSize

    ' Get the [ERROR] column to be filled with returned error
    Dim errCol As Long
    errCol = GetErrCol()
    
    Dim i As Long
    Dim iRow As Long
    
    For i = 0 To MAXROWS
        iRow = convTbl.currRow
        lastRow = iRow
        Cells(iRow, 1).Select
        
        DoEvents
        
        convTbl.ParseTable
        xmlBody = convTbl.node.ToXml
        
        Set mxReq = New MxHttpRequest
        mxReq.SyncData Cells(1, 1), svcOperation, xmlBody
        
        If Not mxReq.GetXML Is Nothing And IsUidCol(1) Then
            Set node2 = mxReq.GetMxNode
            If node2.childNodesCount = 0 Then
                MsgBox "Object IDs not found." & vbCrLf & "Set mxe.int.keyresponse=1 in your Maximo system configuration."
                Exit Sub
            End If

            ConvertMxNodeToTableIDs convTbl.node, node2, ActiveSheet, iRow, convTbl.currRow - 1
        End If

        If mxReq.GetXML Is Nothing And errCol > 0 Then
            'extract the error message and try to strip away unuseful text
            Dim errMsg As String
            Dim errPos As Integer
            errMsg = Err.Description
            errPos = InStr(errMsg, ": BMX")
            If errPos > 0 Then errMsg = Right(errMsg, Len(errMsg) - errPos - 1)
            If Right(errMsg, 1) = vbLf Then errMsg = Left(errMsg, Len(errMsg) - 1)
            If Right(errMsg, 1) = vbCr Then errMsg = Left(errMsg, Len(errMsg) - 1)
            
            'write the error message in the [ERROR] column
            With ActiveSheet.Cells(iRow, errCol)
                .NumberFormat = "@" ' format as Text
                .Value = errMsg
                .WrapText = False   ' no word wrap
            End With
            Err.Clear
        End If

        If convTbl.isLast Then Exit For
    Next i
    
    lastRow = 0
    
    LogInfo "Done"
    
    currSelection.Select

    If cfgDisplaySummary = False Then Exit Sub
    
    If svcOperation = "Sync" Then
        MsgBox "Done (" & convTbl.numObjects & " objects synched)", vbInformation, APPNAME
    ElseIf svcOperation = "Delete" Then
        MsgBox "Done (" & convTbl.numObjects & " objects deleted)", vbInformation, APPNAME
    End If

End Sub


Attribute VB_Name = "MxAttrCfg"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MxAttribute"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' MxAttribute
'------------------------------------------------------------------------------

Option Explicit


' class attributes

Private cName As String
Private cValue As String


'------------------------------------------------------------------------------
Public Sub Init(name As String, Value As String)
    cName = name
    cValue = Value
End Sub


'------------------------------------------------------------------------------
Public Function GetName() As String
    GetName = cName
End Function

'------------------------------------------------------------------------------
Public Function GetValue() As String
    GetValue = cValue
End Function


'------------------------------------------------------------------------------
Public Function ToString() As String
    ToString = cName & "=" & cValue
End Function


'------------------------------------------------------------------------------
' Create XML fragment with attributes elements and value
'------------------------------------------------------------------------------
Public Function ToXml() As String
    If cValue = vbNullString Then
        ToXml = ""
    ElseIf cValue = "~NULL~" Then
        ToXml = "<" & UCase(cName) & "></" & UCase(cName) & ">"
    ElseIf Left(cValue, 8) = "file:///" Then
        ' changed syntax in MxLoader 6.1
        'ToXml = "<" & UCase(cName) & ">" & EncodeFile(Right(cValue, Len(cValue) - 8)) & "</" & UCase(cName) & ">"
        Err.Raise 1001, "MxAttribute", "Deprecated API. Use FileEnc:/ or FileTxt:/ to read files. See MxLoader user guide for details."
    ElseIf Left(cValue, 9) = "FileEnc:/" Then
        ToXml = "<" & UCase(cName) & ">" & ReadFile(GetFullpath(cValue), True) & "</" & UCase(cName) & ">"
    ElseIf Left(cValue, 9) = "FileTxt:/" Then
        ToXml = "<" & UCase(cName) & ">" & EscXml(ReadFile(GetFullpath(cValue), False)) & "</" & UCase(cName) & ">"
    Else
        ToXml = "<" & UCase(cName) & ">" & EscXml(cValue) & "</" & UCase(cName) & ">"
    End If
End Function

Private Function GetFullpath(ByVal fname As String) As String
    GetFullpath = Right(cValue, Len(cValue) - 9)
    If Left(GetFullpath, 1) = "." Then
        GetFullpath = Application.ActiveWorkbook.Path & Right(GetFullpath, Len(GetFullpath) - 1)
    End If
    'fName = Replace(fName, "\", "/")
End Function


'------------------------------------------------------------------------------
' Escape XML characters
'------------------------------------------------------------------------------
Private Function EscXml(ByVal str As String) As String
    If Len(str) > 0 Then
        EscXml = str
        EscXml = Replace(EscXml, "&", "&amp;")
        EscXml = Replace(EscXml, """", "&quot;")
        EscXml = Replace(EscXml, "'", "&apos;")
        EscXml = Replace(EscXml, "<", "&lt;")
        EscXml = Replace(EscXml, ">", "&gt;")
    Else
        EscXml = ""
    End If
End Function

Attribute VB_Name = "MxConfigH"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "MxHttpRequest"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' MxHttpRequest: Class for HTTP calls to MIF
'------------------------------------------------------------------------------

Option Explicit


Private httpStatus As String
Private httpStatusText As String
Private httpResponseText As String



Private objXML As MSXML2.DOMDocument60


'problemi su sistemi x64

'Public Declare Function GetTickCount Lib "kernel32.dll" () As Long
'Declare PtrSafe Function GetTickCount64 Lib "kernel32" () As LongLong
'#If Win64 Then
'   Private Declare PtrSafe Function GetTickCount64 Lib "kernel32" () As LongLong
'#Else
'   Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
'#End If


'------------------------------------------------------------------------------
' Sync data with Maximo using an HTTP call to an Object Structure service
'
' Paramenters
' - os: Object Service name
'------------------------------------------------------------------------------
Public Sub SyncData(ByVal os As String, ByVal action As String, xmlBody As String)
    LogInfo "Entering SyncData method"

    ' retrieve webservice name if needed
    If cfgUseWs = True And InStr(os, ".") Then
        DoPost Split(os, ".")(0), Split(os, ".")(1), action, "", xmlBody
    Else
        DoPost os, os, action, "", xmlBody
    End If
    
End Sub


'------------------------------------------------------------------------------
' Retrieve data from Maximo using an HTTP call to an Object Structure service
'
' Parameters
' - os       : Object Service name
' - where    : where clause to filter data
' - orderby  : order by clause to sort data (optional)
'------------------------------------------------------------------------------
Public Sub GetData(ByVal os As String, ByVal where As String, Optional ByVal orderby As String)
    Dim xml As String
    Dim attr As String
    Dim obj As String

    LogInfo "Entering GetData method"

    If cfgUseWs = True And InStr(os, ".") Then
        obj = Split(os, ".")(1)
    Else
        obj = os
    End If
    
    If orderby = "" Then
        xml = "<" & obj & "Query>" & vbNewLine & _
              "<WHERE>" + where + "</WHERE>" & vbNewLine & _
              "</" & obj & "Query>"
    Else
        xml = "<" & obj & "Query orderby=""" & orderby & """>" & vbNewLine & _
              "<WHERE>" + where + "</WHERE>" & vbNewLine & _
              "</" & obj & "Query>"
    End If

    If cfgMaxCount > 0 Then
        'limit the results to maxCount + 1 to understand if we are exceding the limit
        attr = "maxItems=""" & cfgMaxCount + 1 & """"
    End If

    ' retrieve webservice name if needed
    If cfgUseWs = True And InStr(os, ".") Then
        DoPost Split(os, ".")(0), Split(os, ".")(1), "Query", attr, xml
    Else
        DoPost os, os, "Query", attr, xml
    End If

End Sub

'------------------------------------------------------------------------------
' Test the connection to the OS service
' Raise an exception if fails
'------------------------------------------------------------------------------
Public Sub TestConnection()
    Dim xml As String

    LogInfo "Entering TestConnection method"
    
    xml = "<MXASSETQuery>" & vbNewLine & _
           "<WHERE>1=0</WHERE>" & vbNewLine & _
          "</MXASSETQuery>"
    
    
    If cfgEnableAuth = "Web" Then

        Dim authToken As String
        authToken = DoWebAuth(cfgMxUrl, cfgSamlLoginOk, cfgSamlCookie, cfgSamlWidth, cfgSamlHeight)
        
        If authToken = "" Then
            Err.Raise MXERR_WEBLOGINFAILED, "WebAuth", "Authentication failed"
        End If
        
        ThisWorkbook.Worksheets("ConfigH").Cells(1, 2) = authToken

    End If
    DoPost "MXASSET", "MXASSET", "Query", "maxItems=""1""", xml
End Sub


'------------------------------------------------------------------------------
Public Function GetHTTPResponseText() As String
    GetHTTPResponseText = httpResponseText
End Function


'------------------------------------------------------------------------------
' Parse the HTTP response and retrieve the XML DOM
' Raise an exception if it fails to parse the XML structure
'------------------------------------------------------------------------------
Public Function GetXML() As MSXML2.DOMDocument60

    ' Parse the XML only for the first time
    If objXML Is Nothing Then
        
        Set objXML = New MSXML2.DOMDocument60
        
        If Not objXML.LoadXML(httpResponseText) Then
            LogInfo "Failed to parse XML from server response"
            If cfgStopOnError = True Then
                If cfgEnableAuth = "Web" Then
                    Err.Raise vbObjectError + 1, "GetXML", "Unexpected server response. Try to login again."
                Else
                    Err.Raise vbObjectError + 1, "GetXML", "Unexpected server response."
                End If
            Else
                Set objXML = Nothing
            End If
        End If
    End If
    
    Set GetXML = objXML

End Function

'------------------------------------------------------------------------------
'
'------------------------------------------------------------------------------
Public Function GetMxNode() As MxNode

    Set GetMxNode = ConvertXmlToMxNode(GetXML)

End Function


'------------------------------------------------------------------------------
' Execute the HTTP call
'------------------------------------------------------------------------------
Public Sub DoPost(ByVal service As String, ByVal os As String, ByVal action As String, ByVal attr As String, ByVal xml As String)
    Dim objHTTP As MSXML2.ServerXMLHTTP60
    Dim httpReq As String
    Dim httpUrl As String
    Dim respType As String
    
    httpReq = ""

    If cfgUseWs = True Then
        httpReq = httpReq & _
            "<soapenv:Envelope " & _
                "xmlns:max=""http://www.ibm.com/maximo"" " & _
                "xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/""> " & vbNewLine & _
            "<soapenv:Header/>" & vbNewLine & _
            "<soapenv:Body>" & vbNewLine
    End If
    
    httpReq = httpReq & _
        "<" & action & os & _
            " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""" & _
            " xmlns=""" & cfgXmlNs & """" & _
            " baseLanguage=""" & cfgBaseLanguage & """" & _
            " transLanguage=""" & cfgBaseLanguage & """" & _
            " " & attr & ">" & vbNewLine & _
            xml & vbNewLine & _
        "</" & action & os & ">"

    If cfgUseWs = True Then
        httpReq = httpReq & _
            "</soapenv:Body>" & vbNewLine & _
            "</soapenv:Envelope>"
    End If


    LogDebug "-------------------------------------------------------------------------------------------------"
    LogDebug "HTTP call" & vbNewLine & httpReq
    LogDebug "-------------------------------------------------------------------------------------------------"
    
    
    Set objHTTP = New MSXML2.ServerXMLHTTP60
    
    ' ignore all certificate errors
    ' http://www.normanbauer.com/2011/02/10/certificate-problems-with-vbscript-and-xml-http-calls/
    objHTTP.setOption SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS, 13056
    'objHTTP.getOption (2) - SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS
    
    objHTTP.setTimeouts cfgResolveTimeout, cfgConnectTimeout, cfgSendTimeout, cfgReceiveTimeout
    
    If cfgProxy <> "" Then
        LogInfo "Setting Proxy: " & cfgProxy
        ' http://www.logikdev.com/2010/07/07/use-serverxmlhttp-through-proxy/
        objHTTP.setProxy SXH_PROXY_SET_PROXY, cfgProxy, ""
    End If

    
    httpUrl = cfgMxUrl + service
    objHTTP.Open "POST", httpUrl, False

    objHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    
    If cfgEnableAuth = "Native" Then
        LogInfo "Setting MAXAUTH header: " & Encode64(cfgAuthUser & ":" & cfgAuthPwd)
        objHTTP.setRequestHeader "MAXAUTH", Encode64(cfgAuthUser & ":" & cfgAuthPwd)
    ElseIf cfgEnableAuth = "LDAP" Then
        LogInfo "Setting HTTP header: " & Encode64(cfgAuthUser & ":" & cfgAuthPwd)
        objHTTP.setRequestHeader "Accept", "application/json"
        objHTTP.setRequestHeader "Authorization", "Basic " + Encode64(cfgAuthUser & ":" & cfgAuthPwd)
    ElseIf cfgEnableAuth = "Web" Then
        objHTTP.setRequestHeader "Cookie", cfgSamlCookie & "=" & ThisWorkbook.Worksheets("ConfigH").Cells(1, 2)
    End If

    
    LogInfo "Sending HTTP call (" & Len(httpReq) & " bytes)"
    LogInfo "Sending HTTP call " & httpUrl
    
    objHTTP.send (httpReq)


    httpStatus = objHTTP.Status
    httpStatusText = objHTTP.statusText
    httpResponseText = objHTTP.responseText
    Set objXML = Nothing
    
    If objHTTP.Status <> 200 Then
        LogInfo "HTTP status      : " & objHTTP.Status
        LogInfo "HTTP statusText  : " & objHTTP.statusText
        LogInfo "HTTP responseText: " & objHTTP.responseText

        Err.Raise objHTTP.Status, "DoPost", objHTTP.statusText & vbNewLine & objHTTP.responseText
    End If
    
    LogInfo "HTTP response: " & objHTTP.Status & " - " & Len(objHTTP.responseText) & " bytes"
    LogDebug objHTTP.responseText
    
    'Parse HTTP response
    GetXML
    
    
    If cfgUseWs = True Then
        respType = objXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).nodeName
    Else
        respType = objXML.ChildNodes(1).nodeName
    End If
    
    LogDebug "Response type " + respType
    
    If respType <> action + os + "Response" Then
        Err.Raise vbObjectError + 2, "DoPost", "Unexpected response"
    End If

End Sub


Attribute VB_Name = "MxLoaderOS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MxNode"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'------------------------------------------------------------------------------
' MxNode
'------------------------------------------------------------------------------

Option Explicit

' class attributes

Private cName As String
Private cParent As MxNode
Private cLevel As Integer
Public sheetRow As Long

Private cAttributes As Collection
Private cChildNodes As Collection


'------------------------------------------------------------------------------
Public Sub Init(ByVal name As String, parent As MxNode)
    cName = name
    Set cParent = parent
    
    Set cAttributes = New Collection
    Set cChildNodes = New Collection
    
    If Not parent Is Nothing Then
        cLevel = parent.level + 1
    End If
End Sub


'------------------------------------------------------------------------------
Public Sub AddAttribute(nodeVal As MxAttribute)
    cAttributes.Add nodeVal ', nodeVal.GetName
End Sub

'------------------------------------------------------------------------------
Public Function AddAttribute2(name As String, Value As String) As MxAttribute
    Set AddAttribute2 = New MxAttribute
    AddAttribute2.Init name, Value
    
    cAttributes.Add AddAttribute2 ', nodeVal.GetName
End Function


'------------------------------------------------------------------------------
Public Sub AddChildNode(node As MxNode)
    node.level = cLevel + 1
    cChildNodes.Add node
End Sub

'------------------------------------------------------------------------------
Public Sub RemoveLastChildNode()
    cChildNodes.Remove cChildNodes.Count
End Sub

'------------------------------------------------------------------------------
' Add a child node if not already exists
' Return the new object or the existing one
'------------------------------------------------------------------------------
Public Function AddChildNodeNE(node As MxNode) As MxNode
    
    If cChildNodes.Count > 0 Then
        Dim lastNode As MxNode
        Set lastNode = cChildNodes.Item(cChildNodes.Count)
        
        If lastNode.Equals(node) Then
            Set AddChildNodeNE = lastNode
            Exit Function
        End If
    End If
    
    Set AddChildNodeNE = node
    AddChildNodeNE.level = cLevel + 1
    cChildNodes.Add node
End Function

'------------------------------------------------------------------------------
Public Function GetName() As String
    GetName = cName
End Function

'------------------------------------------------------------------------------
Public Function GetFullName() As String
    GetFullName = cName
    If Not cParent Is Nothing Then
        If cParent.GetName <> "" Then
            GetFullName = cParent.GetFullName & "." & GetFullName
        End If
    End If
        
End Function


'------------------------------------------------------------------------------
Public Property Let level(level As Integer)
    cLevel = level
End Property

'------------------------------------------------------------------------------
Public Property Get level() As Integer
    level = cLevel
End Property

'------------------------------------------------------------------------------
Public Property Get childNodesCount() As Long
    childNodesCount = cChildNodes.Count
End Property

'------------------------------------------------------------------------------
Public Property Get childNode(i As Long) As MxNode
    Set childNode = cChildNodes.Item(i)
End Property

'------------------------------------------------------------------------------
Public Property Get parentNode() As MxNode
    Set parentNode = cParent
End Property

'------------------------------------------------------------------------------
Public Property Get attr(i As Long) As MxAttribute
    Set attr = cAttributes.Item(i)
End Property

'------------------------------------------------------------------------------
Public Property Get attrCount() As Long
    attrCount = cAttributes.Count
End Property


'------------------------------------------------------------------------------
Public Function ToString() As String
    Dim currNodeVal As MxAttribute
    Dim currNode As MxNode


    ToString = Space(2 * cLevel) & cName & vbNewLine
    
    ' print elements
    For Each currNodeVal In cAttributes
        ToString = ToString & Space(2 * cLevel + 2) & "." & currNodeVal.ToString & vbNewLine
    Next

    ' print child objects
    For Each currNode In cChildNodes
        ToString = ToString & currNode.ToString
    Next
    
End Function



'------------------------------------------------------------------------------
' Create XML fragment with all elements and child objects
'------------------------------------------------------------------------------
Public Function ToXml() As String
    Dim currNodeVal As MxAttribute
    Dim currNode As MxNode

    
    If svcAction <> "" Then
        ToXml = Space(2 * cLevel) & "<" & cName & " action=""" & svcAction & """>" & vbNewLine
    Else
        ToXml = Space(2 * cLevel) & "<" & cName & ">" & vbNewLine
    End If

    
    ' print elements
    For Each currNodeVal In cAttributes
        ToXml = ToXml & Space(2 * cLevel + 2) & currNodeVal.ToXml() & vbNewLine
    Next

    ' print child objects
    For Each currNode In cChildNodes
        ToXml = ToXml & currNode.ToXml
    Next
    
    ToXml = ToXml & Space(2 * cLevel) & "</" & cName & ">" & vbNewLine
End Function



'------------------------------------------------------------------------------
' Compare two objects
'------------------------------------------------------------------------------
Public Function Equals(MxNode As MxNode) As Boolean
    Dim i As Long

    If Me.GetName <> MxNode.GetName Or Me.attrCount <> MxNode.attrCount Then
        Equals = False
        Exit Function
    End If

    For i = 1 To Me.attrCount
        
        ' check only the first
        If i > 15 Then Exit For
        
        If Me.attr(i).GetValue <> MxNode.attr(i).GetValue Then
            Equals = False
            Exit Function
        End If
    Next

    Equals = True
    
End Function
Attribute VB_Name = "MxTemplates"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Test"
'------------------------------------------------------------------------------
'
'------------------------------------------------------------------------------

Option Explicit
Option Private Module


Sub t()
    Logger.xx
End Sub

Private Sub RunTests()

    Worksheets("T101").Activate
    MxRun
    
    Worksheets("T102").Activate
    MxRun
    
    Worksheets("T103").Activate
    MxRun
    
    Worksheets("T104").Activate
    MxRun
    
    Worksheets("T105").Activate
    MxRun
    
End Sub


Private Sub testGetSheetConfig()
    GeMxLoaderConfig
    GetSheetConfig
End Sub


Private Sub testXmlToTable()

    Dim wks As Worksheet
    Dim rootNode As MxNode
    

    
    Worksheets("T0xmlgen").Activate
            
    GeMxLoaderConfig
    DoCheckActiveSheet
    GetSheetConfig
    
    
    ' parse table and create MxNode hierarchy
    
    Set rootNode = ConvertTableToMxNode(ActiveSheet, "", "ASSET")
    
    LogDebug rootNode.ToXml
    
    
    ' traverse MxNode hierarchy and write table in a new worksheet
    
    Worksheets("T0xmlgen2").Activate
    CleanSheet

    ConvertMxNodeToTable rootNode, ActiveSheet, 0
    
End Sub


' http://stackoverflow.com/questions/7442648/parse-data-and-time-string-to-access-date-value
' http://www.techonthenet.com/access/functions/date/dateserial.php

Private Sub testDateConv()
    Dim s1 As String, s2 As String
    Dim d1 As Date, d2 As Date
    
    s1 = "2012-21-01 20:00:00"
    s2 = "2012-01-21 20:00:00"
    
    MsgBox CDate(s1)
    MsgBox CDate(s2)
    
    'Cells(2, 1) = CDate(s1)
    'Cells(3, 1) = CDate(s2)
    
    'Cells(2, 2) = ParseDate(s1)
    'Cells(3, 2) = ParseDate(s2)
    

End Sub


Private Function ParseDate(s As String) As Date
    ParseDate = DateSerial(Mid(s, 1, 4), Mid(s, 6, 2), Mid(s, 9, 2))
    ParseDate = ParseDate + TimeSerial(Mid(s, 12, 2), Mid(s, 15, 2), Mid(s, 18, 2))
End Function


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilLog"
'------------------------------------------------------------------------------
' UtilLog: Tracing and logging to file
'------------------------------------------------------------------------------

Option Explicit
Option Private Module


'------------------------------------------------------------------------------
Public Sub LogInit()
    Dim x As Long
    
    If cfgLogEnabled = True Then
        If Dir(logFile) <> "" Then
        
            x = FileLen(logFile)
            If FileLen(logFile) > MAXLOGSIZE Then
                Kill logFile
            End If
        End If
    End If

End Sub


'------------------------------------------------------------------------------
Public Sub LogInfo(msg As String)
    PrintToOutput Format(Now(), "yyyy-MM-dd hh:mm:ss") + " [INFO]  " + msg
End Sub


Public Sub LogDebug(msg As String)
    If cfgLogLevel = "Debug" Then
        PrintToOutput Format(Now(), "yyyy-MM-dd hh:mm:ss") + " [DEBUG] " + msg
    End If
End Sub



Private Sub PrintToOutput(msg As String)
    Dim fNum As Integer

    If cfgLogEnabled = True Then
        fNum = FreeFile
        Open logFile For Append Access Write Shared As fNum
        Print #fNum, msg
        Close #fNum
    Else
        Debug.Print msg
    End If
End Sub
Attribute VB_Name = "UtilProcessing"

'------------------------------------------------------------------------------
' Reliable function to return the number of rows
' http://www.mrexcel.com/forum/excel-questions/343500-shortest-code-finding-last-row-via-visual-basic-applications.html
'------------------------------------------------------------------------------
Public Function GetRowsCount() As Long
    Dim c As Long
    GetRowsCount = Range("A" & rows.Count).End(xlUp).row
    c = Range("B" & rows.Count).End(xlUp).row
    If c > GetRowsCount Then GetRowsCount = c
End Function

Public Function GetColsCount() As Long
    Dim i As Long
    For i = 1 To MAXCOLS
        If (IsEmpty(Cells(HEADERROW, i))) Then Exit For
    Next
    GetColsCount = i
End Function

'------------------------------------------------------------------------------
' Retrieve the Range of the worksheet with data
'------------------------------------------------------------------------------
Public Function GetDataRange(wks As Worksheet) As Range
    Dim cols As Long
    Dim rows As Long

    Set GetDataRange = wks.Range(cWks.Cells(cfgStartRow, 1), cWks.Cells(GetRowsCount, GetColsCount))
End Function


'------------------------------------------------------------------------------
Public Function IsUidCol(col As Long) As Boolean
    If Left(Cells(HEADERROW, col), 1) = "[" And Right(Cells(HEADERROW, col), 1) = "]" Then
        If Cells(HEADERROW, col) <> "[ERROR]" Then
            IsUidCol = True
        End If
    Else
        IsUidCol = False
    End If
End Function

'------------------------------------------------------------------------------
Public Function IsErrCol(col As Long) As Boolean
    If Cells(HEADERROW, col) = "[ERROR]" Then
        IsErrCol = True
    Else
        IsErrCol = False
    End If
End Function

'------------------------------------------------------------------------------
Public Function GetErrCol() As Long
    Dim i As Long
    
    For i = 1 To MAXCOLS
        If StrComp("[ERROR]", Cells(HEADERROW, i)) = 0 Then
            GetErrCol = i
            Exit Function
        End If
    Next i
    GetErrCol = 0
End Function


'------------------------------------------------------------------------------
Public Function GetAttrName(fullAttrName As String) As String
    Dim pos As Integer

    pos = InStrRev(attr, ".")

    GetAttrName = Right(attr, Len(attr) - pos)
End Function

'------------------------------------------------------------------------------
Public Function GetAttrObjFullName(fullAttrName As String) As String
    Dim pos As Integer

    pos = InStrRev(fullAttrName, ".")

    GetAttrObjFullName = Left(fullAttrName, pos - 1)
End Function

'------------------------------------------------------------------------------
Public Function GetAttrObjName(fullAttrName As String) As String
    Dim pos As Integer

    GetAttrObjName = GetAttrObjFullName(fullAttrName)
    
    pos = InStrRev(GetAttrObjName, ".")
    
    If pos <> 0 Then
        GetAttrObjName = Right(GetAttrObjName, Len(GetAttrObjName) - pos)
    End If
End Function


'------------------------------------------------------------------------------
Public Function AttrExists(attr As String) As Boolean
    Dim i As Integer

    For i = 0 To UBound(attrList)
        If StrComp(attr, attrList(i), vbTextCompare) = 0 Or StrComp("[" & attr & "]", attrList(i), vbTextCompare) = 0 Then
            AttrExists = True
            Exit Function
        End If
    Next i
    AttrExists = False
End Function


'------------------------------------------------------------------------------
Public Function ObjectExists(objectName As String) As Boolean
    Dim i As Integer

    For i = 0 To UBound(attrList)
        If StrComp(objectName, GetAttrObjFullName(attrList(i)), vbTextCompare) = 0 Then
            ObjectExists = True
            Exit Function
        End If
    Next i
    ObjectExists = False
End Function

Attribute VB_Name = "UtilVarious"
'------------------------------------------------------------------------------
' UtilVarious
'------------------------------------------------------------------------------

Option Explicit
Option Private Module


Private Const clOneMask = 16515072          '000000 111111 111111 111111
Private Const clTwoMask = 258048            '111111 000000 111111 111111
Private Const clThreeMask = 4032            '111111 111111 000000 111111
Private Const clFourMask = 63               '111111 111111 111111 000000

Private Const clHighMask = 16711680         '11111111 00000000 00000000
Private Const clMidMask = 65280             '00000000 11111111 00000000
Private Const clLowMask = 255               '00000000 00000000 11111111

Private Const cl2Exp18 = 262144             '2 to the 18th power
Private Const cl2Exp12 = 4096               '2 to the 12th
Private Const cl2Exp6 = 64                  '2 to the 6th
Private Const cl2Exp8 = 256                 '2 to the 8th
Private Const cl2Exp16 = 65536              '2 to the 16th



'------------------------------------------------------------------------------
' Retrieve configuration from Config sheet and set global variables.
'------------------------------------------------------------------------------
Public Sub GeMxLoaderConfig()
    Dim xlsName As String
    
    With ThisWorkbook.Worksheets("Config") 'ThisWorkbook is needed to run this macro from external workbooks
    
        If IsEmpty(.Range("cfgMxUrl")) Then Err.Raise 1001, "DoCheckActiveSheet", "Missing configuration value: cfgMxUrl"
        If IsEmpty(.Range("cfgLogFileName")) Then Err.Raise 1001, "DoCheckActiveSheet", "Missing configuration value: cfgLogFileName"
        If IsEmpty(.Range("cfgLogLevel")) Then Err.Raise 1001, "DoCheckActiveSheet", "Missing configuration value: cfgLogLevel"

        cfgMxUrl = .Range("cfgMxUrl")
        cfgEnableAuth = .Range("cfgEnableAuth")
        cfgAuthUser = .Range("cfgAuthUser")
        cfgAuthPwd = .Range("cfgAuthPwd")
        
        cfgProxy = .Range("cfgProxy")
        
        cfgResolveTimeout = .Range("cfgResolveTimeout") * 1000
        cfgConnectTimeout = .Range("cfgConnectTimeout") * 1000
        cfgSendTimeout = .Range("cfgSendTimeout") * 1000
        cfgReceiveTimeout = .Range("cfgReceiveTimeout") * 1000
        
        cfgBaseLanguage = .Range("cfgBaseLanguage")
        cfgTransLanguage = .Range("cfgTransLanguage")
        cfgTimezone = .Range("cfgTimezone")
        cfgDateTimeFormat = .Range("cfgDateTimeFormat")
        cfgDateFormat = .Range("cfgDateFormat")
        cfgTimeFormat = .Range("cfgTimeFormat")

        cfgLogEnabled = .Range("cfgLogEnabled")
        cfgLogFileName = .Range("cfgLogFileName")
        cfgLogLevel = .Range("cfgLogLevel")
        
        cfgSamlLoginOk = .Range("cfgSamlLoginOk")
        cfgSamlCookie = .Range("cfgSamlCookie")
        cfgSamlWidth = .Range("cfgSamlWidth")
        cfgSamlHeight = .Range("cfgSamlHeight")
        cfgSamlLogoutUrl = .Range("cfgSamlLogoutUrl")
        
        cfgMaxCount = .Range("cfgMaxCount")
        cfgBatchSize = .Range("cfgBatchSize")
        cfgStartRow = .Range("cfgStartRow")
        cfgContinueSync = .Range("cfgContinueSync")
        cfgStopOnError = .Range("cfgStopOnError")
        cfgSplitChildRows = .Range("cfgSplitChildRows")
        cfgDisplaySummary = .Range("cfgDisplaySummary")
        cfgQueryOnly = .Range("cfgQueryOnly")
        cfgXmlNs = .Range("cfgXmlNs")
        cfgUseWs = .Range("cfgUseWs")
    End With
    
    xlsName = Left(ActiveWorkbook.name, (InStrRev(ActiveWorkbook.name, ".", -1, vbTextCompare) - 1))
    logFile = cfgLogFileName
    logFile = Replace(logFile, "[XLSNAME]", xlsName)
    logFile = Replace(logFile, "[XLSDIR]", Application.ActiveWorkbook.Path)
    logFile = Replace(logFile, "[TMPDIR]", IIf(Environ$("tmp") <> "", Environ$("tmp"), Environ$("temp")))
    logFile = Replace(logFile, "[TS]", Format(Now(), "yyyyMMdd-hhmmss"))

    If cfgEnableAuth <> "None" And cfgEnableAuth <> "Web" And cfgAuthPwd = "" Then
        frmPwdInput.Show
        cfgAuthPwd = frmPwdInput.txtPassword
        If cfgAuthPwd = "" Then Err.Raise MXERR_NOPWD, "DoCheckActiveSheet", "Password not specified"
        ' call the cancel method to unload form
        frmPwdInput.btnCancel_Click
    End If
    
    LogInit
    
    LogInfo "------------------------------------------------------------------------------------------------------------------------"
    LogInfo " MxLoader started"
    LogInfo "------------------------------------------------------------------------------------------------------------------------"
    LogInfo "Operating System    : " & Application.OperatingSystem
    LogInfo "Excel version       : " & Application.Version & " - " & GetExcelVersion(Application.Version)
    LogInfo "MxLoader version    : " & ThisWorkbook.Worksheets("About").Cells(1, 1)
    LogInfo "ActiveWorkbook.Name : " & ActiveWorkbook.name
    LogInfo "ActiveSheet.Name    : " & ActiveSheet.name
    
    LogInfo "cfgMxUrl            : " & cfgMxUrl
    LogInfo "cfgEnableAuth       : " & cfgEnableAuth
    LogInfo "cfgAuthUser         : " & cfgAuthUser
    LogInfo "cfgProxy            : " & cfgProxy
    LogInfo "cfgResolveTimeout   : " & cfgResolveTimeout
    LogInfo "cfgConnectTimeout   : " & cfgConnectTimeout
    LogInfo "cfgSendTimeout      : " & cfgSendTimeout
    LogInfo "cfgReceiveTimeout   : " & cfgReceiveTimeout
    
    LogInfo "cfgBaseLanguage     : " & cfgBaseLanguage
    LogInfo "cfgTransLanguage    : " & cfgTransLanguage
    LogInfo "cfgTimezone         : " & cfgTimezone
    LogInfo "cfgDateTimeFormat   : " & cfgDateTimeFormat
    LogInfo "cfgDateFormat       : " & cfgDateFormat
    LogInfo "cfgTimeFormat       : " & cfgTimeFormat
    
    LogInfo "cfgLogEnabled       : " & cfgLogEnabled
    LogInfo "cfgLogFileName      : " & cfgLogFileName
    LogInfo "logFile             : " & logFile
    
    LogInfo "cfgMaxCount         : " & cfgMaxCount
    LogInfo "cfgBatchSize        : " & cfgBatchSize
    LogInfo "cfgStartRow         : " & cfgStartRow
    LogInfo "cfgContinueSync     : " & cfgContinueSync
    LogInfo "cfgDisplaySummary   : " & cfgDisplaySummary
    LogInfo "cfgXmlNs            : " & cfgXmlNs
    LogInfo "cfgUseWs            : " & cfgUseWs
End Sub


Public Sub DoCheckActiveSheet()
    
    If ActiveSheet.name = "Config" Or ActiveSheet.name = "About" Then Err.Raise MXERR_INVALIDSHEET, "DoCheckActiveSheet", "Invalid worksheet"

    If IsEmpty(Cells(1, 1)) Then Err.Raise MXERR_NOINTOBJ, "DoCheckActiveSheet", "Integration Object not specified"
    If IsEmpty(Cells(1, 2)) Then Err.Raise MXERR_NOMXOBJ, "DoCheckActiveSheet", "Object not specified"
    If IsEmpty(Cells(1, 3)) Then Err.Raise MXERR_NOACTION, "DoCheckActiveSheet", "Action not specified"

    If IsEmpty(Cells(HEADERROW, 1)) Then Err.Raise MXERR_NOATTR, "DoCheckActiveSheet", "No attributes list"

End Sub


'------------------------------------------------------------------------------
' Delete data except header
'------------------------------------------------------------------------------
Public Sub CleanSheet()
    Dim rows As Long
    Dim cols As Long

    cols = GetColsCount - 1
    rows = GetRowsCount
    
    If rows = 2 Then Exit Sub
    
    LogInfo "Cleaning sheet"
    LogDebug "Rows=" & rows
    LogDebug "Columns=" & cols
    
    ActiveSheet.Range(ActiveSheet.Cells(cfgStartRow, 1), ActiveSheet.Cells(rows, cols)).Clear

End Sub



'------------------------------------------------------------------------------
' Initialize the array containing the list of attributes to be retrieved
'------------------------------------------------------------------------------
Public Sub GetSheetConfig()
    Dim i As Integer
    Dim attrFullName As String
    Dim attrName As String
    Dim objname As String
    Dim attrType As String
    Dim attrScale As Integer
    Dim attrs() As String


    
    LogInfo "------------------------------------------------------------"
    LogInfo "Worksheet configuration"
    LogInfo "ActiveWorkbook.Name : " & ActiveWorkbook.name
    LogInfo "ActiveSheet.Name    : " & ActiveSheet.name
    LogInfo "Object service      : " & Cells(1, 1)
    LogInfo "Object name         : " & Cells(1, 2)
    LogInfo "Action              : " & Cells(1, 3)
    If Cells(1, 4) <> "" Then LogInfo "Where               : " & Cells(1, 4)
    
    If Left(Cells(1, 3), 5) = "Sync-" Then
        svcOperation = "Sync"
        svcAction = Split(Cells(1, 3), "-")(1)
    Else
        svcOperation = Cells(1, 3)
        svcAction = ""
    End If
    
    i = GetColsCount
    
    ReDim attrList(i - 2)
    ReDim attrTypes(i - 2)
    ReDim attrScales(i - 2)
    
    For i = 1 To UBound(attrList) + 1
        If (IsEmpty(Cells(HEADERROW, i))) Then Exit For
        
        attrFullName = Cells(HEADERROW, i)
        If Left(attrFullName, 1) = "[" Then attrFullName = Mid(attrFullName, 2, Len(attrFullName) - 2)
        attrFullName = Cells(1, 2) & "." & attrFullName
        attrFullName = UCase(attrFullName)
        attrFullName = Replace(attrFullName, vbLf, "")

        
        ' check for duplicate columns
        If FindInArray(attrList, attrFullName) Then
            Err.Raise 1001, "GetSheetConfig", "Duplicate column: " & attrFullName
        End If

        
        'If InStr(1, attrFullName, ".") <> 0 Then
        
        attrs = Split(attrFullName, ".")
        attrName = attrs(UBound(attrs))
        objname = attrs(UBound(attrs) - 1)
        
        GetAttrType objname, attrName, attrType, attrScale


        attrList(i - 1) = attrFullName
        attrTypes(i - 1) = attrType
        attrScales(i - 1) = attrScale
        
        LogInfo "Attr(" & i & ")             : " & attrFullName & " (" & attrType & ")"
    Next
    
    LogInfo "------------------------------------------------------------"

End Sub

'------------------------------------------------------------------------------
Private Function FindInArray(strArray() As String, Value As String) As Boolean
    Dim i As Long
    
    For i = 0 To UBound(strArray)
        If Value = strArray(i) Then
            FindInArray = True
            Exit Function
        End If
    Next
    
    FindInArray = False
End Function


'------------------------------------------------------------------------------
Public Function LongToUnsigned(Value As Long) As Double
    If Value < 0 Then
        LongToUnsigned = Value + 4294967296#
    Else
        LongToUnsigned = Value
    End If
End Function




'------------------------------------------------------------------------------
Sub GetAttrType(ByVal obj As String, ByVal attr As String, ByRef attrType As String, ByRef attrScale As Integer)
    Dim maxRow As Long
    Dim row As Long

    attrType = ""
    attrScale = 0
    
    With ThisWorkbook.Worksheets("MxAttrCfg") 'ThisWorkbook is needed to run this macro from external workbooks
        
        maxRow = .Range("A65536").End(xlUp).row
        
        For row = 2 To maxRow
            If .Cells(row, 1).Value = obj Then
                If .Cells(row, 2).Value = attr Then
                    attrType = .Cells(row, 3).Value
                    attrScale = .Cells(row, 4).Value
                    Exit Sub
                End If
            End If
        Next row

    End With
    
End Sub

'------------------------------------------------------------------------------
' Base64 encoding
'------------------------------------------------------------------------------
Public Function Encode64(sString As String) As String

    Dim bTrans(63) As Byte, lPowers8(255) As Long, lPowers16(255) As Long, bOut() As Byte, bIn() As Byte
    Dim lChar As Long, lTrip As Long, iPad As Integer, lLen As Long, lTemp As Long, lPos As Long, lOutSize As Long

    For lTemp = 0 To 63                                 'Fill the translation table.
        Select Case lTemp
            Case 0 To 25
                bTrans(lTemp) = 65 + lTemp              'A - Z
            Case 26 To 51
                bTrans(lTemp) = 71 + lTemp              'a - z
            Case 52 To 61
                bTrans(lTemp) = lTemp - 4               '1 - 0
            Case 62
                bTrans(lTemp) = 43                      'Chr(43) = "+"
            Case 63
                bTrans(lTemp) = 47                      'Chr(47) = "/"
        End Select
    Next lTemp

    For lTemp = 0 To 255                                'Fill the 2^8 and 2^16 lookup tables.
        lPowers8(lTemp) = lTemp * cl2Exp8
        lPowers16(lTemp) = lTemp * cl2Exp16
    Next lTemp

    iPad = Len(sString) Mod 3                           'See if the length is divisible by 3
    If iPad Then                                        'If not, figure out the end pad and resize the input.
        iPad = 3 - iPad
        sString = sString & String(iPad, Chr(0))
    End If

    bIn = StrConv(sString, vbFromUnicode)               'Load the input string.
    lLen = ((UBound(bIn) + 1) \ 3) * 4                  'Length of resulting string.
    lTemp = lLen \ 72                                   'Added space for vbCrLfs.
    lOutSize = ((lTemp * 2) + lLen) - 1                 'Calculate the size of the output buffer.
    ReDim bOut(lOutSize)                                'Make the output buffer.

    lLen = 0                                            'Reusing this one, so reset it.

    For lChar = LBound(bIn) To UBound(bIn) Step 3
        lTrip = lPowers16(bIn(lChar)) + lPowers8(bIn(lChar + 1)) + bIn(lChar + 2)    'Combine the 3 bytes
        lTemp = lTrip And clOneMask                     'Mask for the first 6 bits
        bOut(lPos) = bTrans(lTemp \ cl2Exp18)           'Shift it down to the low 6 bits and get the value
        lTemp = lTrip And clTwoMask                     'Mask for the second set.
        bOut(lPos + 1) = bTrans(lTemp \ cl2Exp12)       'Shift it down and translate.
        lTemp = lTrip And clThreeMask                   'Mask for the third set.
        bOut(lPos + 2) = bTrans(lTemp \ cl2Exp6)        'Shift it down and translate.
        bOut(lPos + 3) = bTrans(lTrip And clFourMask)   'Mask for the low set.
        If lLen = 68 Then                               'Ready for a newline
            bOut(lPos + 4) = 13                         'Chr(13) = vbCr
            bOut(lPos + 5) = 10                         'Chr(10) = vbLf
            lLen = 0                                    'Reset the counter
            lPos = lPos + 6
        Else
            lLen = lLen + 4
            lPos = lPos + 4
        End If
    Next lChar

    If bOut(lOutSize) = 10 Then lOutSize = lOutSize - 2 'Shift the padding chars down if it ends with CrLf.

    If iPad = 1 Then                                    'Add the padding chars if any.
        bOut(lOutSize) = 61                             'Chr(61) = "="
    ElseIf iPad = 2 Then
        bOut(lOutSize) = 61
        bOut(lOutSize - 1) = 61
    End If

    Encode64 = StrConv(bOut, vbUnicode)                 'Convert back to a string and return it.

End Function

Public Function ReadFile(strPicPath As String, encode As Boolean) As String
    Dim objStream
    Set objStream = CreateObject("ADODB.Stream")

    If encode = True Then
        ' Variables for encoding
        Dim objXML
        Dim objDocElem
        
        objStream.Type = 1  'binary file
        objStream.Open
        objStream.LoadFromFile (strPicPath)
        ' Create XML Document object and root node
        ' that will contain the data
        Set objXML = CreateObject("MSXml2.DOMDocument")
        Set objDocElem = objXML.createElement("Base64Data")
        objDocElem.DataType = "bin.base64"
    
        ' Set binary value
        objDocElem.nodeTypedValue = objStream.Read()
    
        ' Get base64 value
        ReadFile = objDocElem.Text
    
        ' Clean all
        Set objXML = Nothing
        Set objDocElem = Nothing
    Else
        objStream.Charset = "utf-8"
        objStream.Type = 2  'text file
        objStream.Open
        objStream.LoadFromFile (strPicPath)
        ReadFile = objStream.ReadText
    End If
    objStream.Close
    Set objStream = Nothing

End Function


'Application.Version
Private Function GetExcelVersion(ver As String) As String
    Select Case ver
        Case "11.0"
            GetExcelVersion = "Excel 2003"
        Case "12.0"
            GetExcelVersion = "Excel 2007"
        Case "14.0"
            GetExcelVersion = "Excel 2010"
        Case Else
            GetExcelVersion = "Unknown version"
    End Select

    'With Application
    '    MsgBox ver & vbCr & "Version: " & .Version & " Build: " & .Build
    'End With

End Function
Attribute VB_Name = "UtilWebAuth"
Option Explicit

' perform SAML authentication using the WebLogin.dll

Public Function DoWebAuth(url As String, strToFind As String, cookieName As String, width As Integer, height As Integer) As String
    Dim c As Object
    Set c = GetWebLogin
    
    c.width = width
    c.height = height
    c.Run url
    Do While Not c.IsDisposed
        If c.FindInBody(strToFind) Then Exit Do
        DoEvents
    Loop

    DoWebAuth = c.GetCookieValue(cookieName)

    c.Close

End Function


Public Function GetWebLogin() As Object
    ' catch errors to display a nice message when the WebLogin DLL fails to load
    On Error GoTo CatchError

    ' use late binding to avoid adding a static reference to the WebLogin DLL
    Set GetWebLogin = CreateObject("WebLogin.WebLoginForm")
    
    Exit Function

CatchError:
    Err.Raise MXERR_WEBLOGINNODLL, "WebAuth"
End Function


Attribute VB_Name = "frmError"
Attribute VB_Base = "0{3287765C-3BC3-4B7B-84AC-DC2762FF78C9}{DE89C81E-1755-4D40-8ED2-7ABF5C93D446}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Sub Init(errNumber As Long, errSource As String, errDescription As String)

    Dim msg As String
    
    msg = GetErrorRemedy(LongToUnsigned(Err.Number), Err.Source, Err.Description)
    
    LogInfo "Error message dialog"
    LogDebug "Error code        : " & Err.Number & " (" & LongToUnsigned(Err.Number) & ")"
    LogDebug "Error source      : " & Err.Source
    LogDebug "Error description : " & Err.Description
    LogDebug "Remedy            : " & msg

    frmError.txrErrCode = LongToUnsigned(Err.Number)
    frmError.txtErrSrc = Err.Source
    frmError.txtErrDesc = Err.Description
    frmError.txtErrCause = msg
    
    If msg = "" Then
        frmError.txtErrCause.BackColor = vbWindowBackground
    Else
        frmError.txtErrCause.BackColor = vbYellow
    End If
    
    Show
End Sub


Private Sub cmdOk_Click()
    'frmError.Hide
    Unload Me
End Sub



'------------------------------------------------------------------------------
Private Function GetErrorRemedy(ByVal errCode As String, ByVal errSource As String, ByVal errDescription As String) As String
    GetErrorRemedy = ""
    
    If errCode = MXERR_INVALIDSHEET Then
        GetErrorRemedy = "Please select a vaild sheet."
    ElseIf errCode = MXERR_NOINTOBJ Then
        GetErrorRemedy = "Please insert a valid Integration Object in cell A1."
    ElseIf errCode = MXERR_NOMXOBJ Then
        GetErrorRemedy = "Please insert a valid Object in cell B1."
    ElseIf errCode = MXERR_NOACTION Then
        GetErrorRemedy = "Please insert a valid action in cell C1."
    ElseIf errCode = MXERR_NOATTR Then
        GetErrorRemedy = "Please insert at least one attribute in row 2."
    ElseIf errCode = MXERR_NOPWD Then
        GetErrorRemedy = "Please insert a valid password."
    ElseIf errCode = MXERR_WEBLOGINNODLL Then
        GetErrorRemedy = "Failed to load WebLogin library."
    ElseIf errCode = MXERR_WEBLOGINFAILED Then
        GetErrorRemedy = "Failed to login using web authentication."

    ElseIf InStr(Err.Description, "java.lang.NullPointerException") > 0 Or _
           InStr(Err.Description, "java.lang.StringIndexOutOfBoundsException") > 0 Then
        GetErrorRemedy = "Check that " & Cells(1, 1) & " Object Structure is defined"
    ElseIf InStr(Err.Description, "BMXAA1268E") > 0 Then
        GetErrorRemedy = "Object service security is enabled. Enable authentication in Config sheet"
    ElseIf InStr(Err.Description, "BMXAA7901E") > 0 Then
        GetErrorRemedy = "Check your user credentials in Config sheet"
    ElseIf errCode = "401" Then
        'https://www.ibm.com/developerworks/community/forums/html/topic?id=f972281a-958c-4526-8804-e2486565ff60&ps=25
        GetErrorRemedy = "Check authentication settings in Config sheet."
    ElseIf errCode = "404" Then
        GetErrorRemedy = "Unable to contact Maximo Object Structure service at: " & cfgMxUrl & vbNewLine & _
                         "Check that the server is running and responding on this URL."
    'ElseIf errCode = "500" Then
    '    GetErrorRemedy = "Generic error received from server." & vbNewLine & _
    '    "Please check server's log files."
    
    ElseIf InStr(Err.Description, "timed out") > 0 Then
        GetErrorRemedy = "Network timeout. Check timeout settings in Config sheet."
    ElseIf errCode = "2147954407" Or errCode = "2147954405" Then
        GetErrorRemedy = "Connection error." & vbNewLine & _
                         "Check connection setting in Config sheet."
    ElseIf errCode = "2147954402" Then
        GetErrorRemedy = "The operation timed out." & vbNewLine & _
                         "If you are able to connect to " & cfgMxUrl & " using a web browser this means that Excel is blocked by your Windows firewall"
    End If
End Function

Attribute VB_Name = "frmPreview"
Attribute VB_Base = "0{8EB61DB1-1BBA-4657-9F66-8A0023C64212}{238FED26-565E-448E-ABCC-5EEB2CD30D63}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub Init(txt As String)

    txtPreview = txt
    
    Show
End Sub

Private Sub cmdClose_Click()
    Hide
End Sub

Private Sub cmdSave_Click()
    Dim bFileSaveAs As Variant
    'bFileSaveAs = Application.Dialogs(xlDialogSaveAs).Show
    bFileSaveAs = Application.GetSaveAsFilename(FileFilter:="XML Files (*.xml), *.xml")
    If bFileSaveAs = False Then Exit Sub
    
    Open bFileSaveAs For Output As #1
    Print #1, txtPreview
    Close #1
End Sub
Attribute VB_Name = "frmPwdInput"
Attribute VB_Base = "0{BB0D5546-D43E-4FFA-9166-7FD817E79C21}{8593EB45-199E-4BDD-9CC7-A7C80C5C504F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub UserForm_Activate()
    txtPassword.Value = ""
    txtPassword.SetFocus
End Sub


Private Sub btnOk_Click()
    frmPwdInput.Hide
    ' cannot unload this form because the calling code cannot read the password
    'Unload Me
End Sub

Public Sub btnCancel_Click()
    'txtPassword.Value = ""
    'frmPwdInput.Hide
    Unload Me
End Sub


Attribute VB_Name = "frmResults"
Attribute VB_Base = "0{0678359B-7F28-4504-A12A-25D0D6406D8E}{40A4AB5A-72C5-496F-9937-D730E982C5F5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "frmTemplates"
Attribute VB_Base = "0{CDF0CAE7-3549-48B1-B9C3-0DC26E73B788}{20534331-70D5-43C5-8355-39473CD689A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub txtSearch_Change()
    UserForm_Initialize
End Sub

Private Sub UserForm_Activate()
    txtSearch.Text = ""
    txtSearch.SetFocus
End Sub

'------------------------------------------------------------------------------
Private Sub UserForm_Initialize()
    Dim row As Long
    Dim searchText As String
    Dim templateName As String
    
    lbTemplates.Clear
    searchText = txtSearch
    
    
    For row = 2 To 10000
        If Worksheets("MxTemplates").Cells(row, 2) = "" Then Exit Sub
        templateName = Worksheets("MxTemplates").Cells(row, 2)
        If InStr(1, templateName, searchText, 1) > 0 Then
            lbTemplates.AddItem Worksheets("MxTemplates").Cells(row, 2)
        End If
    Next
End Sub


'------------------------------------------------------------------------------
Private Sub lbTemplates_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdOk_Click
End Sub


'------------------------------------------------------------------------------
Private Sub cmdOk_Click()
    Dim wsNew As Worksheet
    Dim wsTempl As Worksheet
    Dim i As Long
    Dim row As Long
    Dim templateName As String
    
    
    If lbTemplates.ListIndex = -1 Then Exit Sub
    
    Set wsTempl = Worksheets("MxTemplates")

    
    templateName = lbTemplates.List(lbTemplates.ListIndex)
    
    For row = 2 To 100
        If wsTempl.Cells(row, 2) = templateName Then Exit For
        'row = lbTemplates.ListIndex + 2
    Next row
    
    frmTemplates.Hide
    
    
    With ThisWorkbook
        Set wsNew = .Worksheets.Add(After:=.Sheets(.Sheets.Count))
    End With
    
    wsNew.name = GetWsName(wsTempl.Cells(row, 1))
    
    
    wsNew.Cells(1, 1) = wsTempl.Cells(row, 4)
    wsNew.Cells(1, 2) = wsTempl.Cells(row, 5)
    wsNew.Cells(1, 3) = "Query"
    wsTempl.Range(wsTempl.Cells(row, 6), wsTempl.Cells(row, 100)).Copy wsNew.Cells(HEADERROW, 1)

        

    wsNew.Cells(1, 3).Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:=MXACTIONS
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Invalid action"
        .InputMessage = ""
        .ErrorMessage = "Allowed actions are: " & MXACTIONS
        .ShowInput = True
        .ShowError = True
    End With

    
    wsNew.Cells.Select
    Selection.ColumnWidth = 15
    
    wsNew.rows("1:2").Select
    Selection.Font.Bold = True
    Selection.Interior.Color = RGB(197, 217, 241)
    
    If wsTempl.Cells(row, 3) <> "" Then CreateNote wsTempl.Cells(row, 3)
    

    Range("A1").Select
    
    Unload Me

End Sub

'------------------------------------------------------------------------------
Private Sub cmdCancel_Click()
    'frmTemplates.Hide
    Unload Me
End Sub



'------------------------------------------------------------------------------
Private Function GetWsName(wsName As String) As String
    Dim i As Integer
    Dim Exists As Boolean
    
    For i = 1 To Worksheets.Count
        If Worksheets(i).name = wsName Then
            Exists = True
        End If
    Next i
    
    If Not Exists Then
        GetWsName = wsName
    Else
        wsName = wsName & "."
        GetWsName = GetWsName(wsName)
    End If
    
End Function



'------------------------------------------------------------------------------
Private Sub CreateNote(msg As String)

    ActiveSheet.Shapes.AddLabel(msoShapeRectangle, 100, 100, 400, 400).Select
    ActiveSheet.Shapes(1).TextFrame2.TextRange.Characters.Text = msg

    ActiveSheet.Shapes(1).Fill.ForeColor.RGB = RGB(255, 80, 80)

End Sub



INQUEST-PP=macro
