Attribute VB_Name = "Embed"
Option Explicit

Private Const cAdobeIcoFile$ = "\\va10dwviss315\ABACUS_DEV_Artifacts\Print\Templates\PrintPackage_Temp\Template\adobe.ico"
Private Const cWordIcoFile$ = "\\va10dwviss315\ABACUS_DEV_Artifacts\Print\Templates\PrintPackage_Temp\Template\word.ico"

Public Sub EmbedPrintDocs()

Application.Calculation = xlCalculationManual 'Added by Mike 3/20/2018

    Dim fso As Scripting.FileSystemObject, fls As Scripting.Files, fl As Scripting.File
    Dim path As String, i&, r As Range, aFls, aDisp
    
    On Error Resume Next
    
    Set r = [IntegrationBegin]
    
    path = r.Offset(0, 0)
    Set fso = New FileSystemObject
    
    Set fls = fso.GetFolder(path).Files
    
    i = -1: ReDim aFls(0): ReDim aDisp(0)
    For Each fl In fls
        If Not fl.Name = ThisWorkbook.Name Then
            i = i + 1
            ReDim Preserve aFls(i): Set aFls(i) = fl
            ReDim Preserve aDisp(i): aDisp(i) = fl.Name
        End If
    Next
    
    If i + 1 Then EmbedFiles aFls, aDisp, [EmbedFilesBegin]
    
    
End Sub

Sub EmbedFiles(aFls, aDisp, rAnchor As Range)
    Dim fl As Scripting.File, ole As OLEObject, r As Range, i&
    
    For i = 0 To UBound(aFls)
        If ole Is Nothing Then Set r = rAnchor.Cells(1, 1) Else Set r = OLEObjectBottomLeft(ole)
        Set fl = aFls(i)
        Set ole = EmbedFileAsIcon(fl.path, CStr(aDisp(i)), IIf(getFileExtension(fl.Name) Like "x*", "excel.exe", _
        IIf(getFileExtension(fl.Name) Like "d*", cWordIcoFile, cAdobeIcoFile)), r.Offset(1, 0))
    Next
    
End Sub

Function EmbedFileAsIcon(fileName$, displayName$, icoFile$, r As Range) As OLEObject
    Dim ole As OLEObject, r2 As Range, ws As Worksheet
    Const padLeft& = 10
    Set ws = r.Worksheet: Set r2 = r.Cells(1, 1)
    Set ole = ws.OLEObjects.Add( _
        , fileName:=fileName _
        , link:=False _
        , DisplayAsIcon:=True _
        , IconLabel:=displayName _
        , iconfilename:=icoFile _
        , iconindex:=0 _
        , Top:=r2.Top _
        , Left:=r2.Left + padLeft _
    )
    Set EmbedFileAsIcon = ole: Set ole = Nothing
End Function

Function OLEObjectBottomLeft(ole As OLEObject) As Range
    Dim r As Range
    Set r = Range(ole.TopLeftCell, ole.BottomRightCell)
    Set OLEObjectBottomLeft = r.Cells(r.Rows.count, 1): Set r = Nothing
End Function

Private Function getFileExtension(nm$) As String
    getFileExtension = Right(nm, Len(nm) - InStrRev(nm, "."))
End Function

Attribute VB_Name = "Module1"
Option Explicit
Public bRet As Boolean
Public Sub UnhideAllWorksheets()
    Dim Worksheet As Excel.Worksheet
    For Each Worksheet In ActiveWorkbook.Sheets
        Worksheet.Visible = xlSheetVisible
    Next
End Sub
Public Sub PrintRun()


    On Error Resume Next
    
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = True 'This needs to be enabled for dynamic logos to work
    
        Dim Worksheet As Excel.Worksheet
    For Each Worksheet In ActiveWorkbook.Sheets
        Worksheet.Visible = xlSheetVisible
        Worksheet.Select
        ActiveWindow.View = xlNormalView 'Set Page Break Preview Mode Off
        Worksheet.DisplayPageBreaks = False 'Hides Page Breaks
        ActiveWindow.Zoom = 100 'After converting the page breaks, set zoom to 100 on each sheet in the workbook
    Next
    
    If ExhibitIsSelected("Cover Letter") = True Then
    
            Worksheets("Cover Letter").Rows("1:27").AutoFit
            HideRows Worksheets("Cover Letter"), 1, 34
            HideCols Worksheets("Cover Letter"), 1, 6
                                   
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                
            Sheets("Cover Letter").Select
            Worksheets("Cover Letter").Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            Worksheets("Cover Letter").Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
    If ExhibitIsSelected("Why Anthem 1") = True Then
        'Common.LogDebug "3"
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
'            Sheets("Why Anthem 1").Select
'            ActiveSheet.Shapes.Range(Array("Picture 3")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
'            Selection.Formula = "=Logos!$H$6"
'            Range("A1").Select
'            ActiveSheet.Shapes.Range(Array("Picture 3")).Select
'            Selection.Formula = ""
        End If
            
    If ExhibitIsSelected("Why Anthem 2") = True Then
            'Common.LogDebug "4"
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
'            Sheets("Why Anthem 2").Select
'            ActiveSheet.Shapes.Range(Array("Picture 4")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
'            Selection.Formula = "=Logos!$H$6"
'            Range("A1").Select
'            ActiveSheet.Shapes.Range(Array("Picture 4")).Select
'            Selection.Formula = ""
        End If
    End If
    
    If ExhibitIsSelected("Rate Change Description") = True Then
    
    HideRows Worksheets("Rate Change Description"), 1, 103
    HideCols Worksheets("Rate Change Description"), 1, 12
    
    End If
    

            'Cover Page exhibit is not in If Function because it is always included and should always be updated.
            Sheets("Cover Page").Select
            ActiveSheet.Shapes.Range(Array("Picture 38")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 38")).Select
            Selection.Formula = ""

    
    If ExhibitIsSelected("Renewal Overview") = True Then

        HideRows Worksheets("Renewal Overview"), 1, 150
        HideCols Worksheets("Renewal Overview"), 1, 16
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Renewal Overview").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
    End If
        
    If ExhibitIsSelected("Renewal Rate Sheet") = True Then

        HideRows Worksheets("Renewal Rate Sheet"), 1, 250
        HideCols Worksheets("Renewal Rate Sheet"), 1, 20
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Renewal Rate Sheet").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
    End If
    
        If ExhibitIsSelected("Renewal Rate Action") = True Then

            HideRows Worksheets("Renewal Rate Action"), 1, 123
            HideCols Worksheets("Renewal Rate Action"), 1, 100
                
            If [PE_AltPmtFrequency="Monthly"] Then 'Alt Payment Frequencies require this page break, other scenarios should not have page breaks on Featured Plans
            Worksheets("Renewal Rate Action").Rows(76).PageBreak = xlPageBreakNone
            End If
            
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                
            Sheets("Renewal Rate Action").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select
            Selection.Formula = ""
            
            Select Case [RoundUp(PE_FeaturedPlans_Cnt / 3, 0)]
            
            Case 1
            Sheets("Renewal Rate Action").PageSetup.PrintArea = "$F$5:$AA$122"
            
            Case 2
            Sheets("Renewal Rate Action").PageSetup.PrintArea = "$F$5:$AW$122"
            
            Case 3
            Sheets("Renewal Rate Action").PageSetup.PrintArea = "$F$5:$BS$122"
            
            Case Else
            Sheets("Renewal Rate Action").PageSetup.PrintArea = "$F$5:$CO$122"
            
            End Select
    End If
    
    If ExhibitIsSelected("Renewal Rate Action (Legacy)") = True Then

            HideRows Worksheets("Renewal Rate Action (Legacy)"), 1, 113
            HideCols Worksheets("Renewal Rate Action (Legacy)"), 1, 100
                
            If [PE_AltPmtFrequency="Monthly"] Then 'Alt Payment Frequencies require this page break, other scenarios should not have page breaks on Featured Plans
            Worksheets("Renewal Rate Action (Legacy)").Rows(67).PageBreak = xlPageBreakNone
            End If
                        
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                
            Sheets("Renewal Rate Action (Legacy)").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select
            Selection.Formula = ""
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select
            Selection.Formula = ""
            
            Select Case [RoundUp(PE_FeaturedPlans_Cnt / 3, 0)]
            
            Case 1
            Sheets("Renewal Rate Action (Legacy)").PageSetup.PrintArea = "$F$5:$AA$113"
            
            Case 2
            Sheets("Renewal Rate Action (Legacy)").PageSetup.PrintArea = "$F$5:$AW$113"
            
            Case 3
            Sheets("Renewal Rate Action (Legacy)").PageSetup.PrintArea = "$F$5:$BS$113"
            
            Case Else
            Sheets("Renewal Rate Action (Legacy)").PageSetup.PrintArea = "$F$5:$CO$113"
            
            End Select
    End If

    If ExhibitIsSelected("Claim Projection") = True Then

        HideRows Worksheets("Claim Projection"), 1, 105
        HideCols Worksheets("Claim Projection"), 1, 80
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Claim Projection").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
            Sheets("Claim Projection").Select
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select
            Selection.Formula = ""
            
            Sheets("Claim Projection").Select
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select
            Selection.Formula = ""
            
            Select Case [ExpRt_ContractPd_MultiYrClmsExpWgtFinal]
            
            Case 1
            Sheets("Claim Projection").PageSetup.PrintArea = "$I$4:$R$97"
            
            Case Else
            Sheets("Claim Projection").PageSetup.PrintArea = "$I$4:$AB$97"
            
            End Select

    End If
    
    If ExhibitIsSelected("Claim Projection (Product)") = True Then

        
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Claim Projection (Product)").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 2")).Select
            Selection.Formula = ""
            
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 3")).Select
            Selection.Formula = ""
            
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 4")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 5")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 5")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 6")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 6")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 7")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 7")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 8")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 8")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 9")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 9")).Select
            Selection.Formula = ""

            ActiveSheet.Shapes.Range(Array("Picture 10")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 10")).Select
            Selection.Formula = ""
            
            Select Case [COUNT(ExpRt_ProdContract_MultiYrClmsExpWgtFinal__Range)]
            
            Case 0
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$R$96"
            
            Case 1
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$R$96"
            
            Case 2
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$AB$96"
            
            Case 3
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$AL$96"
                        
            Case 4
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$AV$96"
            
            Case 5
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$BF$96"
            
            Case 6
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$BP$96"
            
            Case 7
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$BZ$96"
            
            Case 8
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$CJ$96"
            
            Case 9
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$CT$96"
            
            Case 10
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$DD$96"
            
            Case Else
            Sheets("Claim Projection (Product)").PageSetup.PrintArea = "$I$3:$DD$96"
            
            End Select
            
        HideRows Worksheets("Claim Projection (Product)"), 1, 105
        HideCols Worksheets("Claim Projection (Product)"), 1, 120
            
    End If
    
        If ExhibitIsSelected("FINAL QUOTE CONFIRMATION") = True Then
        
         HideRows Worksheets("FINAL QUOTE CONFIRMATION"), 1, 200
         HideCols Worksheets("FINAL QUOTE CONFIRMATION"), 1, 26
         
            Sheets("FINAL QUOTE CONFIRMATION").Select
            Worksheets("FINAL QUOTE CONFIRMATION").Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            Worksheets("FINAL QUOTE CONFIRMATION").Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
    End If


    If ExhibitIsSelected("Services Included and Buy-ups") = True Then

        HideRows Worksheets("Services Included and Buy-ups"), 1, 230
        HideCols Worksheets("Services Included and Buy-ups"), 1, 3
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                    
            Sheets("Services Included and Buy-ups").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
    End If
   
    If ExhibitIsSelected("Alternate Plans 1") = True Then
        
        HideRows Worksheets("Alternate Plans 1"), 1, 850
        HideCols Worksheets("Alternate Plans 1"), 1, 30
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Alternate Plans 1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
 
    End If
    
        If ExhibitIsSelected("Alternate Plans 2") = True Then
        
        HideRows Worksheets("Alternate Plans 2"), 1, 850
        HideCols Worksheets("Alternate Plans 2"), 1, 30
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Alternate Plans 2").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
 
    End If
    
    
    If ExhibitIsSelected("Riders") = True Then
        
        HideRows Worksheets("Riders"), 1, 96
        HideCols Worksheets("Riders"), 1, 22
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Riders").Select
            ActiveSheet.Shapes.Range(Array("Picture 5")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 5")).Select
            Selection.Formula = ""

    End If
     
    If ExhibitIsSelected("Large Claims Exhibit") = True Then
        
        HideRows Worksheets("Large Claims Exhibit"), 1, 150 '***adjust syntax
        HideCols Worksheets("Large Claims Exhibit"), 1, 13 '***adjust syntax
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                  
            Sheets("Large Claims Exhibit").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""

    End If
 
'   ALGR-36705 Large Claims Exhibit CA Manual Worksheet

    If ExhibitIsSelected("Large Claims Exhibit CA Manual") = True Then
    
        HideRows Worksheets("Large Claims Exhibit CA Manual"), 1, 120
        HideCols Worksheets("Large Claims Exhibit CA Manual"), 1, 15
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                  
        Sheets("Large Claims Exhibit CA Manual").Select
        ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
        Selection.Formula = "=Logos!$H$6"
        Range("A1").Select
        ActiveSheet.Shapes.Range(Array("Picture 1")).Select
        Selection.Formula = ""
 
    End If

'   ALGR-36705 Large Claims Exhibit CA Exp Worksheet

    If ExhibitIsSelected("Large Claims Exhibit CA Exp") = True Then
    
        HideRows Worksheets("Large Claims Exhibit CA Exp"), 1, 120
        HideCols Worksheets("Large Claims Exhibit CA Exp"), 1, 15
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
                  
        Sheets("Large Claims Exhibit CA Exp").Select
        ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
        Selection.Formula = "=Logos!$H$6"
        Range("A1").Select
        ActiveSheet.Shapes.Range(Array("Picture 1")).Select
        Selection.Formula = ""
        
        ' Sort by Product Column
        
        Worksheets("Large Claims Exhibit CA Exp").Sort.SortFields.Clear
        Worksheets("Large Claims Exhibit CA Exp").Sort.SortFields.Add _
            Key:=Range("H12:H112"), SortOn:=xlSortOnValues, Order:=xlAscending, _
            DataOption:=xlSortNormal
            
        With Worksheets("Large Claims Exhibit CA Exp").Sort
            .SetRange Range("G11:L112")
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With

    End If
 
'   End of ALGR-36705
       
    If ExhibitIsSelected("Mandated Offer Benefits") = True Then
    
        HideRows Worksheets("Mandated Offer Benefits"), 1, 128
        HideCols Worksheets("Mandated Offer Benefits"), 1, 17
        PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Mandated Offer Benefits").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""


     End If
    
     If ExhibitIsSelected("Assumptions & Conditions") = True Then
        
            Sheets("Assumptions & Conditions").Rows("8:150").AutoFit
            
            HideRows Worksheets("Assumptions & Conditions"), 1, 150
            HideCols Worksheets("Assumptions & Conditions"), 1, 4
            PageSetup , , , , Range("PE_GroupName").Text & " - " & Range("QuoteID").Text & " - " & Range("PE_PrintDate").Text
            
            Sheets("Assumptions & Conditions").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
            
    End If
     
    'Attachments VBA is outside of the If Function because the Attachments exhibit should always be included and should always be updated
            Sheets("Attachments").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 1")).Select
            Selection.Formula = ""
     
    If ExhibitIsSelected("Attachments for CA Pool") = True Then
            
            Sheets("Attachments for CA Pool").Select
            ActiveSheet.Shapes.Range(Array("Picture 7")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 7")).Select
            Selection.Formula = ""
    End If
    
    If ExhibitIsSelected("Attachments for CA Non-Pool") = True Then
            
            Sheets("Attachments for CA Non-Pool").Select
            ActiveSheet.Shapes.Range(Array("Picture 8")).Select 'Jason Atwood - attempt to lessen processing time of linked graphics
            Selection.Formula = "=Logos!$H$6"
            Range("A1").Select
            ActiveSheet.Shapes.Range(Array("Picture 8")).Select
            Selection.Formula = ""
    End If
          

End Sub
Public Sub PrintCleanUp()

If Range("PE_Debug") = False Then

Protection1

End If

End Sub
Public Sub Protection1()
On Error GoTo SkipError
    
    Application.Calculation = xlCalculationManual
    Application.CalculateBeforeSave = False
    Application.ScreenUpdating = False

    'Convert to Values
    Dim sheet As Worksheet
    For Each sheet In Worksheets
        sheet.Range("$A$1:$HZ$850").Value = sheet.Range("$A$1:$HZ$850").Value
    Next
    
    Application.DisplayAlerts = False
    
    Sheets("Cover Page").Visible = xlSheetVisible
    Sheets("Attachments").Visible = xlSheetVisible

    Dim currentSheet As Worksheet
    For Each currentSheet In Worksheets
        Dim vis As Boolean
        vis = currentSheet.Visible = xlSheetVisible
        
        If Not vis Then
            currentSheet.Visible = xlSheetVisible
            currentSheet.Delete
        End If
    Next

    Application.DisplayAlerts = True

Exit Sub

SkipError:
     
End Sub
Public Sub Protection2()

'Add sheet password protection and Delete VBA

'Add sheet password protection
    Dim Worksheet As Worksheet
    Dim Password As String: Password = Worksheets("Cover Page").Range("T250").Value 'cell to place UW anthem ID for password
    
   
    For Each Worksheet In Worksheets
    
        If Worksheet.Name = "Alternate Plans 1" Then Worksheets("Alternate Plans 1").Range("D16:D818").Locked = False 'Unlock cells for UW filtering
        
        If Worksheet.Name = "Attachments" Or Worksheet.Name = "Attachments for CA Pool" Or Worksheet.Name = "Attachments for CA Non-Pool" Or Worksheet.Name = "Cover Letter" Then GoTo NoPassword

        Worksheet.Protect Password:=Password, DrawingObjects:=True, Contents:=True, Scenarios:=True _
        , AllowFiltering:=True


NoPassword:
        
    Next

    Dim x               As Integer
    
     Application.DisplayAlerts = True
    On Error GoTo ErrorHandler:
    'remove VBA modules
    With ActiveWorkbook.VBProject
        For x = .VBComponents.count To 1 Step -1
            .VBComponents.Remove .VBComponents(x)
        Next x
        For x = .VBComponents.count To 1 Step -1
            .VBComponents(x).CodeModule.DeleteLines _
            1, .VBComponents(x).CodeModule.CountOfLines
        Next x
    End With
    On Error GoTo 0

ErrorHandler:

End Sub

Sub HideRows(Worksheet As Worksheet, FromRow As Integer, ToRow As Integer)

    On Error Resume Next

    Dim i As Integer            'Row counter
    Dim HoldFrom As Integer     'Start of contiguous range of hidden rows
    Dim HoldTo As Integer       'End of contiguous range of hidden rows
    Dim RangeText As String     'Concatenated string of contiguous ranges to be hidden

    With Worksheet
        .Calculate                                                          'Make sure boolean value calcs are refreshed
        .Range("a" & FromRow & ":a" & ToRow).EntireRow.Hidden = False       'Unhide all rows defined in the FromRow and ToRow range
                                                                            ' (Assumes Column A contains the boolean logic)
        i = FromRow                                                         'Set the first row number to the FromRow
        Do While i <= ToRow                                                 'While the row is less than or equal to the max row (ToRow),
            If .Range("a" & i).Value <> "" And _
                Not .Range("a" & i).Value Then                              ' If the value in cell Ai where i is the current row number
                                                                            ' is not blank and value is False (row should be hidden) then
                HoldFrom = i                                                ' set HoldFrom to the current row
                Do While .Range("a" & i + 1).Value <> "" And _
                    Not .Range("a" & i + 1).Value And i < ToRow             'While consecutive rows within the range are set to False, increment the row counter
                    i = i + 1                                               'Exit loop when the next row is set to True
                Loop
                HoldTo = i                                                  'Set HoldTo (represents the end of contiguos range of hidden rows) to the current row
                RangeText = RangeText & ",A" & HoldFrom & _
                            ":A" & HoldTo & ""                            'Concatenate the contiguous range to the end of the RangeText string

            End If
            i = i + 1                                                       'Exit loop once all rows defined between the min and max rows are checked
        Loop

        RangeText = Right(RangeText, Len(RangeText) - 1)                    'Remove the leading comma from the range string
        .Range(RangeText).EntireRow.Hidden = True                           'Hide all of the indicated ranges in one transaction

    End With
End Sub

Sub HideCols(Worksheet As Worksheet, FromCol As Integer, ToCol As Integer)
    On Error Resume Next
    Dim i As Integer            'Row counter
    Dim HoldFrom As Integer     'Start of contiguous range of hidden rows
    Dim HoldTo As Integer       'End of contiguous range of hidden rows
    Dim RangeText As String     'Concatenated string of contiguous ranges to be hidden

    With Worksheet
        .Calculate
        .Range(GetColLetter(FromCol) & "1:" & GetColLetter(ToCol) & "1").EntireColumn.Hidden = False
        i = FromCol
        Do While i <= ToCol
            If .Range(GetColLetter(i) & "1").Value <> "" And _
                Not .Range(GetColLetter(i) & "1").Value Then

                HoldFrom = i
                Do While .Range(GetColLetter(i + 1) & "1").Value <> "" And _
                    Not .Range(GetColLetter(i + 1) & "1").Value And i < ToCol
                    i = i + 1
                Loop
 '               .Range(GetColLetter(HoldFrom) & "1:" & GetColLetter(i) & "1").EntireColumn.Hidden = True
        HoldTo = i                                                  'Set HoldTo (represents the end of contiguos range of hidden rows) to the current row
                 RangeText = RangeText & "," & GetColLetter(HoldFrom) & "1:" & _
                             GetColLetter(HoldTo) & "1" & ""

            End If
            i = i + 1
        Loop
    RangeText = Right(RangeText, Len(RangeText) - 1)                    'Remove the leading comma from the range string
        .Range(RangeText).EntireColumn.Hidden = True                           'Hide all of the indicated ranges in one transaction

    End With
End Sub

Function GetColLetter(ColNumber As Integer) As String
    If ColNumber < 27 Then
        GetColLetter = Chr(ColNumber + 64)
    Else
        GetColLetter = Chr(CInt((ColNumber - 1) / 26 - 0.49) + 64) & Chr((ColNumber - 1) Mod 26 + 65)
    End If
End Function
Public Function ExhibitIsSelected(aExhibitName As String) As Boolean

    Dim iRows As Integer
    bRet = False
    With Sheets("Raw Data").Range("_ExhibitNames")
        iRows = .CurrentRegion.Rows.count
        Dim i As Integer
        For i = 0 To iRows - 1
            If UCase(.Offset(i).Value) = UCase(aExhibitName) Then
                bRet = True
                Exit For
            End If
        Next i
    End With
    ExhibitIsSelected = bRet 'Is this needed??
    '    ExhibitIsSelected = Not PE_CurrentRegion(Range("_ExhibitNames")).Find(aExhibitName, LookIn:=xlValues, LookAt:=xlWhole) Is Nothing


End Function
Sub PageSetup(Optional LeftHead As String, Optional CenterHead As String, Optional RightHead As String, Optional LeftFoot As String, Optional CenterFoot As String, Optional RightFoot As String, Optional LeftMarginInches As String, Optional RightMarginInches As String, Optional TopMarginInches As String, Optional BottomMarginInches As String, Optional HeaderMarginInches As String, Optional FooterMarginInches As String, Optional PrintHeadings As String, Optional PrintGridlines As String, Optional PrintComments As String, Optional PrintQuality As String, Optional CenterHorizontally As String, Optional CenterVertically As String, Optional Orientation As String, Optional Draft As String, Optional PaperSize As String, Optional FirstPageNumber As String, Optional Order As String, Optional BlackAndWhite As String, Optional Zoom As String)
     Const c As String = ","
     Dim pgSetup As String
     Dim head As String
     Dim foot As String
     If LeftHead <> "" Then head = "&L" & LeftHead
     If CenterHead <> "" Then head = head & "&C" & CenterHead
     If RightHead <> "" Then head = head & "&R" & RightHead
     If Not head = "" Then head = """" & head & """"
     If LeftFoot <> "" Then foot = "&L" & LeftFoot
     If CenterFoot <> "" Then foot = foot & "&C" & CenterFoot
     If RightFoot <> "" Then foot = foot & "&R" & RightFoot
     If Not foot = "" Then foot = """" & foot & """"
        
     pgSetup = "PAGE.SETUP(" & head & c & foot & c & _
       LeftMarginInches & c & RightMarginInches & c & _
       TopMarginInches & c & BottomMarginInches & c & _
       PrintHeadings & c & PrintGridlines & c & _
       CenterHorizontally & c & CenterVertically & c & _
       Orientation & c & PaperSize & c & Zoom & c & _
       FirstPageNumber & c & Order & c & BlackAndWhite & c & _
       PrintQuality & c & HeaderMarginInches & c & _
       FooterMarginInches & c & PrintComments & c & Draft & ")"
     Application.ExecuteExcel4Macro pgSetup
   End Sub
   
    Public Function BASE64SHA1(ByVal sTextToHash As String)

    Dim asc As Object
    Dim enc As Object
    Dim TextToHash() As Byte
    Dim SharedSecretKey() As Byte
    Dim bytes() As Byte
    Const cutoff As Integer = 5

    Set asc = CreateObject("System.Text.UTF8Encoding")
    Set enc = CreateObject("System.Security.Cryptography.HMACSHA1")

    TextToHash = asc.GetBytes_4(sTextToHash)
    SharedSecretKey = asc.GetBytes_4(sTextToHash)
    enc.Key = SharedSecretKey

    bytes = enc.ComputeHash_2((TextToHash))
    BASE64SHA1 = EncodeBase64(bytes)
    BASE64SHA1 = Left(BASE64SHA1, cutoff)

    Set asc = Nothing
    Set enc = Nothing

End Function

Private Function EncodeBase64(ByRef arrData() As Byte) As String

    Dim objXML As Object
    Dim objNode As Object

    Set objXML = CreateObject("MSXML2.DOMDocument")
    Set objNode = objXML.createElement("b64")

    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeBase64 = objNode.Text

    Set objNode = Nothing
    Set objXML = Nothing

End Function
Attribute VB_Name = "Module2"
Private Sub WorksheetSizes()
'Update 20140526
Dim xWs As Worksheet
Dim Rng As Range
Dim xOutWs As Worksheet
Dim xOutFile As String
Dim xOutName As String
xOutName = "Sheet Sizes"
xOutFile = ThisWorkbook.path & "\TempWb.xls"
On Error Resume Next
Application.DisplayAlerts = False
Err = 0
Set xOutWs = Application.Worksheets(xOutName)
If Err = 0 Then
    xOutWs.Delete
    Err = 0
End If
With Application.ActiveWorkbook.Worksheets.Add(Before:=Application.Worksheets(1))
    .Name = xOutName
    .Range("A1").Resize(1, 2).Value = Array("Worksheet Name", "Size")
End With
Set xOutWs = Application.Worksheets(xOutName)
Application.ScreenUpdating = False
xIndex = 1
For Each xWs In Application.ActiveWorkbook.Worksheets
    If xWs.Name <> xOutName Then
        xWs.Copy
        Application.ActiveWorkbook.SaveAs xOutFile
        Application.ActiveWorkbook.Close SaveChanges:=False
        Set Rng = xOutWs.Range("A1").Offset(xIndex, 0)
        Rng.Resize(1, 2).Value = Array(xWs.Name, VBA.FileLen(xOutFile))
        Kill xOutFile
        xIndex = xIndex + 1
    End If
Next
Application.ScreenUpdating = True
Application.Application.DisplayAlerts = True
End Sub
Private Sub CalculateRunTime_Seconds()
'PURPOSE: Determine how many seconds it took for code to completely run

Dim StartTime As Double
Dim SecondsElapsed As Double

'Remember time when macro starts
  StartTime = Timer
'*****************************



'*****************************
'Determine how many seconds code took to run
  SecondsElapsed = Round(Timer - StartTime, 2)

'Notify user in seconds
  MsgBox "This code ran successfully in " & SecondsElapsed & " seconds", vbInformation

End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public Sub UnhideAllWorksheets()
    Dim Worksheet As Excel.Worksheet
    For Each Worksheet In ActiveWorkbook.Sheets
        Worksheet.Visible = xlSheetVisible
    Next
End Sub

Friend Sub cmdPopulate_Click()
    Dim curSubName As String
    curSubName = "cmdPopulationulate_Click"
    Dim lStart As Long
    'End standard procedure header
    
    Application.Calculation = xlCalculationManual

    Dim ConnectionString As String
    ConnectionString = Range("C1").Text
  
    Const TableRows = 5000 'different from PrintFillMacro sent by Tom Kurt (1000)
    Const SubGroupCols = 10
    Const FormatCells = True
    
    Dim rsSteps As New ADODB.Recordset
    Dim rsCategories As New ADODB.Recordset
    Dim rsTables As New ADODB.Recordset
    Dim CurrentTable As String
    Dim i, j As Long
    Dim HoldFormat As String
    Dim FormulaName As String
    FormulaName = Range("C2").Text
    
    
    Dim rsCon As New ADODB.Connection
    rsCon.Open ConnectionString
    
    ' Clear Out Range Names
    With ActiveWorkbook.Names
        j = 1
        For i = 1 To .count
            If True Or Left(.Item(j).RefersTo, 11) = "='Raw Data'" Then
                .Item(j).Delete
            Else
                j = j + 1
            End If
        Next i
    End With
    ActiveWorkbook.Names.Add "StepValues", Range("C5")
    Names.Add "_ExhibitNames", Worksheets("Raw Data").Range("$A$10000")

Skipper:
    
    Dim RPtr, CPtr As Long
    
    With rsCategories
        .ActiveConnection = rsCon
        .CursorLocation = adUseClient
        .CursorType = adOpenStatic
        
        .Open "SELECT xs_Categories.Category FROM xs_Categories, xs_Formula_Master" & _
            " WHERE xs_Categories.Formula_Name = xs_Formula_Master.Formula_Name " & _
            " AND xs_Formula_Master.Formula_Name = '" & Range("C2").Text & _
            "' ORDER BY Category_Index "
    End With

    Range("A5:IV65536").ClearContents
    Range("Q2:IV5").ClearContents
    
    With rsSteps
        .ActiveConnection = rsCon
        .CursorLocation = adUseClient
        .CursorType = adOpenForwardOnly
        '.Open "EXEC ksi_LoadFormulaSteps"
        Dim SQLString As String
        SQLString = "SELECT * FROM ( " & _
            "SELECT '' As Alias, Step_Name, Input_Table, Varies_Category, F2.Varies_Subgroup, " & _
            "F2.Data_Format , ST.Display_Order, Section , F2.Display_Order as Step_Display_Order " & _
            "FROM xs_Formula_Steps F2 " & _
            "    LEFT JOIN xs_Formula_Data_Tables DT ON F2.Formula_Name = DT.Formula_Name AND F2.Input_Table = DT.Table_Name " & _
            "    LEFT JOIN xs_Sections ST ON F2.Formula_Name = ST.Formula_Name AND F2.Section = ST.Section_Name " & _
            "WHERE Show_In_Print = 1 AND F2.Formula_Name = '" & FormulaName & "' "
        SQLString = SQLString & _
            "UNION " & _
            "SELECT FL.Alias, FL.Alias + '.' + F2.Step_Name, CASE WHEN KS.Input_Table IS NOT NULL THEN 'Modularity.' + FL.Alias ELSE FL.Alias + '.' + F2.Input_Table END AS Input_Table, " & _
            "F2.Varies_Category, F2.Varies_Subgroup, " & _
            "F2.Data_Format , ST.Display_Order, F2.Section  , F2.Display_Order as Step_Display_Order " & _
            "FROM xs_Formula_Links FL " & _
            "INNER JOIN (" & _
            "    select RANK ( ) OVER ( partition by Formula_Name,alias order by Create_Criteria) as [Rank], Child_Formula_Name as RelatedFormulaName,Formula_Name,Alias from xs_Formula_Link_Children " & _
            ") FLC on FL.Formula_Name=FLC.Formula_Name and FL.Alias = FLC.Alias" & _
            " LEFT JOIN xs_Formula_Steps F2 on FLC.RelatedFormulaName = F2.Formula_Name " & _
            "    LEFT JOIN xs_Formula_Data_Tables DT ON F2.Formula_Name = DT.Formula_Name AND F2.Input_Table = DT.Table_Name " & _
            "    LEFT JOIN xs_Sections ST ON F2.Formula_Name = ST.Formula_Name AND F2.Section = ST.Section_Name " & _
            "    LEFT JOIN xs_Formula_Steps KS ON FL.Key_Step_Name = KS.Step_Name AND FL.Formula_Name = KS.Formula_Name " & _
            "WHERE F2.Show_In_Print = 1 AND FL.Formula_Name = '" & FormulaName & "' " & _
            "    AND (KS.Input_Table IS NULL OR F2.Input_Table IS NULL) "
        SQLString = SQLString & _
            "Union " & _
            "SELECT FL.Alias + '.' + FL2.Alias, FL.Alias + '.' + FL2.Alias + '.' + F2.Step_Name, " & _
            "CASE WHEN KS.Input_Table IS NULL THEN FL.Alias + '.' + FL2.Alias + '.' + F2.Input_Table ELSE 'Modularity.' + FL.Alias + '.' + FL2.Alias END, F2.Varies_Category, F2.Varies_Subgroup, " & _
            "F2.Data_Format , ST.Display_Order, F2.Section  , F2.Display_Order as Step_Display_Order " & _
            "FROM xs_Formula_Links FL " & _
            "INNER JOIN (" & _
            "select RANK ( ) OVER ( partition by Formula_Name,alias order by Create_Criteria) as [RankC], Child_Formula_Name as RelatedFormulaName,Formula_Name,Alias from xs_Formula_Link_Children " & _
            ") FLC on FL.Formula_Name=FLC.Formula_Name and FL.Alias = FLC.Alias     " & _
            "INNER JOIN xs_Formula_Links FL2 ON FLC.RelatedFormulaName = FL2.Formula_Name " & _
            "INNER JOIN ( " & _
            "select RANK ( ) OVER ( partition by Formula_Name,alias order by Create_Criteria) as [RankG], Child_Formula_Name as RelatedFormulaName,Formula_Name,Alias from xs_Formula_Link_Children " & _
            ") FLC2 on FL2.Formula_Name=FLC2.Formula_Name and FL2.Alias = FLC2.Alias  " & _
            "LEFT JOIN xs_Formula_Steps F2 on FLC2.RelatedFormulaName = F2.Formula_Name  " & _
            "    LEFT JOIN xs_Formula_Data_Tables DT ON F2.Formula_Name = DT.Formula_Name AND F2.Input_Table = DT.Table_Name " & _
            "    LEFT JOIN xs_Sections ST ON F2.Formula_Name = ST.Formula_Name AND F2.Section = ST.Section_Name " & _
            "    LEFT JOIN xs_Formula_Steps KS ON FL2.Key_Step_Name = KS.Step_Name AND FL2.Formula_Name = KS.Formula_Name " & _
            "WHERE F2.Show_In_Print = 1 AND FL.Formula_Name = '" & FormulaName & "' " & _
            ") x "
        SQLString = SQLString & _
            "Order BY " & _
            "    CASE WHEN Input_Table IS NULL THEN 0 ELSE 1 END, " & _
            "    Alias, " & _
            "    CASE WHEN Input_Table IS NULL THEN Display_Order ELSE 0 END, " & _
            "    CASE WHEN Input_Table IS NULL THEN '' ELSE Input_Table END, " & _
            "        Step_Display_Order , Input_Table, Section, Step_Name "
        .Open SQLString
        
        RPtr = 0
        Range("StepValues").Offset(RPtr, -2).Formula = "QuoteID"
        ActiveWorkbook.Names.Add "QuoteID", Range("StepValues").Offset(RPtr, 0)
        
        Do While Not .EOF And IsNull(.Fields("Input_Table"))
           
                RPtr = RPtr + 1
                Range("StepValues").Offset(RPtr, -2).Formula = .Fields("Step_Name")
                
                ActiveWorkbook.Names.Add .Fields("Step_Name"), Range("StepValues").Offset(RPtr, 0)
                If .Fields("Varies_Subgroup") = 1 Then
                    ActiveWorkbook.Names.Add .Fields("Step_Name") & "__SG", Range("StepValues").Offset(RPtr, 1)
                    ActiveWorkbook.Names.Add .Fields("Step_Name") & "__SGRange", Range(Range("StepValues").Offset(RPtr, 2), Range("StepValues").Offset(RPtr, 1 + SubGroupCols))
                End If
                
                If .Fields("Varies_Category") = 1 Then
                    rsCategories.MoveFirst
                    Do While Not rsCategories.EOF
                        RPtr = RPtr + 1
                        Range("StepValues").Offset(RPtr, -1).Formula = rsCategories.Fields("Category")
                       rsCategories.MoveNext
                    Loop
                End If
            
                If FormatCells Then
                    Select Case Left(.Fields("Data_Format"), 1)
                        Case "T"
                            HoldFormat = "@"
                        Case Else
                            HoldFormat = "General"
                    End Select
                    Range(.Fields("Step_Name")).Resize(IIf(.Fields("Varies_Category"), rsCategories.RecordCount + 1, 1), IIf(.Fields("Varies_Subgroup"), 12, 1)).NumberFormat = HoldFormat
                End If
            
            .MoveNext
        Loop
        
        ' Tables
        CPtr = SubGroupCols + 10
        Dim ROffset As Long
        Dim StepNames() As String
        Dim StepFormats() As String
        Dim ColCount As Integer
        
        ReDim StepNames(256)
        ReDim StepFormats(256)
        
        ROffset = 0
        Do While Not .EOF
            CurrentTable = .Fields("Input_Table")
            
            ' First, Put data for this table into arrays (so we know number of columns...)
            ColCount = 0
            Do While CurrentTable = .Fields("Input_Table")
                ColCount = ColCount + 1
                StepNames(ColCount) = .Fields("Step_Name")
                StepFormats(ColCount) = .Fields("Data_Format")
                
                .MoveNext
                If .EOF Then Exit Do
            Loop
            
            ' If table won't fit, move it to next "row/section"
             'Backlog# 8000 (Enhancement)Changed value from 256 to max. col size 16384 for Excel 2010
            'If CPtr + ColCount + Range("StepValues").Column - 1 > 256 Then
            If CPtr + ColCount + Range("StepValues").Column - 1 > 16384 Then
                ROffset = ROffset + TableRows + 5
                CPtr = SubGroupCols + 10
            End If
            
            ' Table caption
            Range("StepValues").Offset(ROffset - 2, CPtr).Formula = CurrentTable
            'Range("StepValues").Offset(ROffset-2, CPtr).Font.Bold = True
            ActiveWorkbook.Names.Add CurrentTable, Range("StepValues").Offset(ROffset - 1, CPtr)
            
            ' Column info...
            For i = 1 To ColCount
                Range("StepValues").Offset(ROffset - 1, CPtr).Formula = StepNames(i)
                ActiveWorkbook.Names.Add StepNames(i), Range("StepValues").Offset(ROffset, CPtr)
                ActiveWorkbook.Names.Add StepNames(i) & "__Range", Range(Range("StepValues").Offset(ROffset, CPtr), Range("StepValues").Offset(ROffset + TableRows, CPtr))
                If FormatCells Then
                    Select Case Left(StepFormats(i), 1)
                        Case "T"
                            HoldFormat = "@"
                        Case Else
                            HoldFormat = "General"
                    End Select
                    Range(StepNames(i) & "__Range").NumberFormat = HoldFormat
                End If
                
                CPtr = CPtr + 1
            Next
            CPtr = CPtr + 1
        Loop
    
    End With
'Application.Calculation = xlCalculationAutomatic
    
    Exit Sub
ErrorHandler:
    Dim oErr As VBA.ErrObject: Set oErr = Err
    Err.Raise vbObjectError + 500
End Sub




Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



INQUEST-PP=macro
