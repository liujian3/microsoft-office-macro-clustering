Attribute VB_Name = "BGDoc"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Compare Text

Public WithEvents ThisDoc As Document
Attribute ThisDoc.VB_VarHelpID = -1
Public DocState As BGDocState
Public InSave As Boolean
Public SaveAction As String

Public dx As docXML
Public ReadOnly As Boolean
Public NewTranslation As Boolean

' DV Variables
Public ShowForm As Boolean
Public FormName As String
Public saveFileName As String
Public saveFolder As String

'Public ConvertToFullName As String
'Public SaveAsTempFullName As String

'Private BackupIsForm As String
'Private BackupConvertToFullName As String
'Private BackupSaveAsTempFullName As String
'Private BackupSaveFileName As String
'Private BackupSaveFolder As String

'Public DocumentBeforeSave As Boolean
'Public DocumentBeforeClose As Boolean

'Public SaveAsUI As Boolean

Public app As Word.Application

' -- Initialization --

Private Sub Class_Initialize()
    InSave = False
    ShowForm = False
    SaveAction = ""
End Sub

Private Sub Class_Terminate()
    '!!!LogDebug "BGDoc", "Class_Terminate"
    
'    If Not ThisDoc Is Nothing Then
'        If BGDocs.exists(ThisDoc.fullName) Then
'            '!!!LogDebug "Remove from BGDocs Dictionary", "Class_Terminate"
'            BGDocs.Remove ThisDoc.fullName
'        End If
'    End If
    
    Set dx = Nothing
    Set ThisDoc = Nothing
    Set app = Nothing
End Sub

Public Sub ClearDVs()
    FormName = ""
'    ConvertToFullName = ""
'    SaveAsTempFullName = ""
    saveFileName = ""
    saveFolder = ""
    WriteDVs
End Sub

Public Sub SetFormName(val As String)
    FormName = val
    DV ThisDoc, "FormName", FormName
End Sub

'Public Sub SetConvertToFullName(val As String)
'    ConvertToFullName = val
'    DV ThisDoc, "ConvertToFullName", ConvertToFullName
'End Sub
'
'Public Sub SetSaveAsTempFullName(val As String)
'    SaveAsTempFullName = val
'    DV ThisDoc, "SaveAsTempFullName", SaveAsTempFullName
'End Sub

Public Sub SetSaveFileName(val As String)
    saveFileName = val
    DV ThisDoc, "SaveFileName", saveFileName
End Sub

Public Sub SetSaveFolder(val As String)
    saveFolder = val
    DV ThisDoc, "SaveFolder", saveFolder
End Sub

Public Sub ReadDVs()
    FormName = DV(ThisDoc, "FormName")
'    ConvertToFullName = DV(ThisDoc, "ConvertToFullName")
'    SaveAsTempFullName = DV(ThisDoc, "SaveAsTempFullName")
    saveFileName = DV(ThisDoc, "SaveFileName")
    saveFolder = DV(ThisDoc, "SaveFolder")
End Sub

'Public Sub BackupDVs()
'    BackupIsForm = DV(ThisDoc, "FormName")
'    BackupConvertToFullName = DV(ThisDoc, "ConvertToFullName")
'    BackupSaveAsTempFullName = DV(ThisDoc, "SaveAsTempFullName")
'    BackupSaveFileName = DV(ThisDoc, "SaveFileName")
'    BackupSaveFolder = DV(ThisDoc, "SaveFolder")
'End Sub

'Public Sub RestoreDVs()
'    DV ThisDoc, "FormName", BackupIsForm
'    DV ThisDoc, "ConvertToFullName", BackupConvertToFullName
'    DV ThisDoc, "SaveAsTempFullName", BackupSaveAsTempFullName
'    DV ThisDoc, "SaveFileName", BackupSaveFileName
'    DV ThisDoc, "SaveFolder", BackupSaveFolder
'End Sub

Public Sub WriteDVs()
    DV ThisDoc, "FormName", FormName
'    DV ThisDoc, "ConvertToFullName", ConvertToFullName
'    DV ThisDoc, "SaveAsTempFullName", SaveAsTempFullName
    DV ThisDoc, "SaveFileName", saveFileName
    DV ThisDoc, "SaveFolder", saveFolder
End Sub

Public Sub Init(doc As Document, stateOpen As BGDocState)
' REMEMBER
'    GetManager.Init(ActiveDocument).AddDoc ActiveDocument, dsAutoNew
'    GetManager.Init(ActiveDocument).AddDoc ActiveDocument, dsAutoOpen
    If saveFileName = "" Then
        saveFileName = doc.name
        saveFolder = doc.Path
    End If

    
    Dim SavedCorrectly As Boolean
    SavedCorrectly = True
    Set ThisDoc = doc
    On Error Resume Next
    Set app = Nothing
    Set app = ThisDoc.Application
    On Error GoTo 0
    If app Is Nothing Then
        '!!!LogError "App is Nothing?", "BGDoc.Init"
        Exit Sub
    End If
    ReadOnly = ThisDoc.ReadOnly
    
    If ThisDoc.attachedTemplate.fullName <> ThisDocument.fullName Then
        DocState = dsNotBGDoc
    ElseIf ThisDoc.fullName = ThisDocument.fullName Then
        DocState = dsTemplate
    End If
    If DocState = dsNotBGDoc Or DocState = dsTemplate Then
        Exit Sub
    End If
    
    Set dx = New docXML
    dx.Init Me
    
    If stateOpen = dsNoAutoOpen Then
        Exit Sub
    End If
    
    GetManager.UpdateEditBoxes doc
    
    Dim ReadFormName As String
    If dx.TryReadText("/DocumentInfo/DocumentInfo-Form", ReadFormName) Then
        If ReadFormName > "" Then
            If stateOpen = dsAutoOpen Then
                ' Close and create new
                Dim newFullName As String
                newFullName = ThisDoc.fullName
                ThisDoc.Close wdDoNotSaveChanges
                BGDocs.Remove CVar(newFullName)
                app.Documents.Add newFullName, , , True
                Exit Sub
            Else
                SetFormName ReadFormName
                SetSaveFolder dx.ReadText("/DocumentInfo/DocumentInfo-SaveFolder")
                SetSaveFileName dx.ReadText("/DocumentInfo/DocumentInfo-SaveFileName")
            End If
        Else
            ReadDVs
        End If
    Else
        ReadDVs
    End If
    
    If stateOpen = dsDocument Then
        DocState = dsDocument
    ElseIf ThisDoc.ActiveWindow.visible = False Then
        DocState = IIf(stateOpen = dsAutoNew, dsNoAutoNew, dsNoAutoOpen)
    ElseIf ReadFormName > "" Then
        DocState = dsAutoNew 'dsUseForm
    Else
        DocState = stateOpen
    End If
    
    Dim IsNewDocument As Boolean
    IsNewDocument = (ThisDoc.name = ThisDoc.fullName) Or (DocState = dsUseForm)
    
    
    If DocState = dsAutoOpen Then
        SavedCorrectly = (dx.ReadText("/DocumentInfo/DocumentInfo-FullName") > "")
    End If
    
    ' Run Update
    If ThisDoc Is ActiveDocument Then
        Select Case DocState
            Case dsAutoNew
                DocState = dsDocument
                Update "Form"
            Case dsAutoOpen
                DocState = dsDocument
            Case dsUseForm
                DocState = dsDocument
                Update "Form"
        End Select
    End If
    
'    If IsNewDocument Then
'        SavedOk = SaveAsTemp(dsDocument)
'    End If
    
    If ThisDoc Is ActiveDocument And stateOpen <> dsDocument Then
    
        Dim saved As Boolean
        saved = ThisDoc.saved
        'SavedAt = ""
        
        If Not ThisDoc.ReadOnly Then
            dx.DeleteNode "/DocumentInfo/DocumentInfo-ShowFullName"
            dx.DeleteNode "/DocumentInfo/DocumentInfo-FullName"
            WriteDVs
        End If
        If Not (saved = ThisDoc.saved) Then
            ThisDoc.saved = saved
        End If
        
        If app.DisplayDocumentInformationPanel Then app.DisplayDocumentInformationPanel = False
        
        Application.ScreenRefresh
        If ThisDoc.Bookmarks.exists("Start") Then
            Selection.GoTo What:=wdGoToBookmark, name:="Start"
            Selection.find.ClearFormatting
            With Selection.find
                .Text = ""
                .Replacement.Text = ""
                .Forward = True
                .Wrap = wdFindAsk
                .Format = False
                .MatchCase = False
                .MatchWholeWord = False
                .MatchByte = False
                .MatchWildcards = False
                .MatchSoundsLike = False
                .MatchAllWordForms = False
            End With
            ThisDoc.Bookmarks("Start").Delete
            ActiveWindow.ScrollIntoView Selection.Range, True
        End If
        
        DoEvents
        
        On Error Resume Next
        DocRibbon.ActivateTab "documentTab"
        '!!!SwitchTab "BG Documentation"
        On Error GoTo 0
        

''        Dim i As Integer
''        i = 0
''        On Error GoTo RibbonNotReady
''ShowRibbon:
''        i = i + 1
''        If i = 100 Then
''            Exit Sub
''        End If
''        DoEvents
''        Sleep 10
''        DoEvents
''
''        If Not DocRibbon Is Nothing Then
''            DocRibbon.ActivateTab "documentTab"
''        Else
''            'Set DocRibbon = Nothing
''        End If
''
''        If Not SavedCorrectly Then
''            MsgBox "Metadata may be invalid. Something went wrong the last time the document was saved. Please update and save the document if possible.", vbCritical + vbOKOnly, "Document error"
''        End If
''        Exit Sub
''RibbonNotReady:
''        Resume ShowRibbon
   End If
End Sub

' -- Events --

'Private Sub Doc_BuildingBlockInsert(ByVal Range As Range, ByVal Name As String, ByVal Category As String, ByVal BlockType As String, ByVal Template As String)
'    If DocState = dsNotBGDoc Then Exit Sub
'    'Xebug.Print "Doc_BuildingBlockInsert: " & Doc.Name
'End Sub
'
'Private Sub Doc_Close()
'    If DocState = dsNotBGDoc Then Exit Sub
'    Xebug.Print Now, "Doc_Close: " & doc.Name
'End Sub
'
'Private Sub Doc_New()
'    If DocState = dsNotBGDoc Then Exit Sub
'    Xebug.Print Now, "Doc_New: " & doc.Name
'End Sub
'
'Private Sub Doc_ContentControlAfterAdd(ByVal NewContentControl As ContentControl, ByVal InUndoRedo As Boolean)
'    If DocState = dsNotBGDoc Then Exit Sub
'    'Xebug.Print Now, "Doc_ContentControlAfterAdd", Doc.Name
'End Sub
'
'Private Sub Doc_Open()
'    If DocState = dsNotBGDoc Then Exit Sub
'    Xebug.Print Now, "Doc_Open", doc.Name
'End Sub
'
'Private Sub ThisDoc_XMLAfterInsert(ByVal NewXMLNode As XMLNode, ByVal InUndoRedo As Boolean)
'    MsgBox "Attached"
'End Sub

' -- Saving and closing --

'Public Function SaveAsTemp(newDocState As BGDocState) As Boolean
'    '!!!LogDebug "Entering", "SaveAsTemp"
'    On Error GoTo Catch
'
'    Dim tmpFileName As String
'    Dim backupFullName As String
'    backupFullName = ThisDoc.fullName
'
'    On Error Resume Next
'    MkDir UserTemp() & "\BGdoc"
'    On Error GoTo 0
'    If (ThisDoc.name = ThisDoc.fullName) Then 'New, not from form
'        If FormName > "" Then
'            SaveAsTempFullName = FormName & ".docx"
'        Else
'            SaveAsTempFullName = dx.ReadText("/DocumentInfo/DocumentInfo-DocType") & ".docx"
'        End If
'        SetSaveAsTempFullName UserTemp() & "\BGdoc\" & Mid(SaveAsTempFullName, 1, InStrRev(SaveAsTempFullName, ".") - 1) & " " & Format(Now, "yyyy-mm-dd HH.nn.ss") & ".docx"
'    ElseIf SaveAsTempFullName > "" Then ' already saved as temporary file
'        ' Just in case
'        'If SaveFileName = "" Then SetSaveFileName DX.ReadText("/DocumentInfo/DocumentInfo-SaveFileName")
'        'If SaveFolder = "" Then SetSaveFolder DX.ReadText("/DocumentInfo/DocumentInfo-SaveFolder")
'    ElseIf SaveAsTempFullName = "" Then ' Already saved with ordinary name
'        SaveAsTempFullName = ThisDoc.name
'        SetSaveAsTempFullName UserTemp() & "\BGdoc\" & Mid(SaveAsTempFullName, 1, InStrRev(SaveAsTempFullName, ".") - 1) & " " & Format(Now, "yyyy-mm-dd HH.nn.ss") & ".docx"
'        'SetSaveFileName ThisDoc.Name
'        'SetSaveFolder ThisDoc.path
'    End If
'
'    Dim SavedIsForm As String
'    Dim IsSaved As Boolean
'    IsSaved = ThisDoc.Saved
'    SavedIsForm = FormName
'    SetFormName ""
'    dx.DeleteNode "/DocumentInfo/DocumentInfo-Form"
'    InSave = True
'    ThisDoc.SaveAs2 SaveAsTempFullName, , , , False
'    InSave = False
'    'Update Manager
'    SetFormName SavedIsForm
'    If ThisDoc.Saved <> IsSaved Then ThisDoc.Saved = IsSaved
'
'    If SaveAsTempFullName <> backupFullName Then
'         BGDocs.Add SaveAsTempFullName, Me
'         BGDocs.Remove CVar(backupFullName)
'    End If
'    DocState = newDocState
'    SaveAsTemp = True
'
'Finally:
'    On Error GoTo 0
'    Exit Function
'
'Catch:
'    Dim e As New BGError
'    e.OnError
'    SaveAsTemp = False
'    Resume Finally
'
'End Function

Public Sub DoSave(selectedFullName As String)
    '!!!LogDebug "Entering", "DoSave"
    
    If Not (LCase(ActiveDocument.fullName) = LCase(selectedFullName) Or LCase(FixPath(ActiveDocument.fullName)) = LCase(FixPath(selectedFullName))) Then
        ' Check if this document is already open as another document
        Dim alreadyOpen As Boolean
        alreadyOpen = False
        Dim i As Integer
        For i = 1 To Application.Documents.Count
            If (LCase(Application.Documents(i).fullName) = LCase(selectedFullName) Or LCase(FixPath(Application.Documents(i).fullName)) = LCase(FixPath(selectedFullName))) Then
                alreadyOpen = True
            End If
        Next
    End If
    If alreadyOpen Then
        MsgBox "Cannot overwrite a document that is already opened in another window!" & vbCrLf & vbCrLf & "Please save with another name.", vbCritical + vbOKOnly, "Save document"
        Exit Sub
    End If
    
    Dim oNode As CustomXMLNode
    Dim showFullName As String
    Dim fullNameOld As String
    Dim isConversion As Boolean
    
    Dim fullnameToUse As String
    Dim showDialog As Boolean
    Dim dialogInputFullName As String
    
    Dim backupFullName As String
    backupFullName = ThisDoc.fullName
    
    ' Handle save
    Application.DisplayAlerts = wdAlertsNone
    dx.Init Me
    isConversion = False
'    BackupDVs
        
    fullnameToUse = FixPath(selectedFullName)
    
    ' Check if Conversion
    ' Prepare to save to SharePoint
    If LCase(GetSite(fullnameToUse)) Like "http*" Or LCase(FixPath(fullnameToUse, "\")) Like "*\\crisnet\*" Or LCase(FixPath(fullnameToUse, "\")) Like "*\\extranet.crisplant.com\*" Then
        Dim webFolder As String
        webFolder = LCase(FixPath(fullnameToUse))
        webFolder = IIf(InStrRev(webFolder, "\") > 0, Mid(webFolder, 1, InStrRev(webFolder, "\")), Mid(webFolder, 1, InStrRev(webFolder, "/")))
        'webFolder = FixPath(webFolder, "http")
        If GetURLStatus(webFolder) = "200" Then
            fullNameOld = Mid(fullnameToUse, 1, InStrRev(fullnameToUse, ".")) & "doc"
            If GetURLStatus(fullNameOld) = "200" Then
                If GetURLStatus(fullnameToUse) <> "200" Then
                    isConversion = True
                    ' Move SharePoint file
                    Debug.Print "Move " & fullNameOld & " to " & fullnameToUse
                    Dim moveResult As String
                    moveResult = MoveSP(fullNameOld, fullnameToUse)
                    If LCase(moveResult) = "ok" Then
                        checkout fullnameToUse
                    End If
                Else
                    MsgBox "Converted file '" & fullnameToUse & "'already exists?", vbCritical + vbOKOnly, "Cannot move SharePoint file"
                    Exit Sub
                End If
            End If
        End If
    End If
        
'    If selectedFullName > "" Then
'        fullnameToUse = FixPath(selectedFullName)
'    ElseIf (ThisDoc.fullName = ThisDoc.name) Then 'New
'        Dim tempFolder As String
'        Dim tempFileName As String
'
'        If FormName = "" Then
'            If SaveFileName > "" Then
'                tempFileName = CalculateTitle(SaveFileName, dx)
'            End If
'            If SaveFolder > "" Then
'                tempFolder = CalculateTitle(SaveFolder, dx)
'            Else
'                tempFolder = Dialogs(wdDialogToolsOptionsFileLocations).Setting
'            End If
'        Else
'            tempFileName = ""
'            tempFolder = Dialogs(wdDialogToolsOptionsFileLocations).Setting
'        End If
'
'        fullnameToUse = FixPath(CombinePaths(tempFolder, tempFileName))
''    ElseIf SaveAsTempFullName > "" Then
''        fullnameToUse = FixPath(SaveAsTempFullName)
'    ElseIf BatchSaveAsFullName = "" Then
'        fullnameToUse = FixPath(ThisDoc.fullName)
'    Else
'        fullnameToUse = FixPath(BatchSaveAsFullName)
'    End If
    
    ' Show FileMame
    showFullName = fullnameToUse
    If InStr(showFullName, "_Converted_") > 0 Then
        Dim start As Integer
        start = InStr(showFullName, "_Converted_")
        showFullName = Mid(showFullName, 1, start - 1) & Mid(showFullName, start + 20)
    End If
    
    Dim cc As ContentControl
    Dim docCCs As ContentControls
    Set docCCs = ThisDoc.SelectContentControlsByTag("DocumentInfo-FileName:DocumentInformation")
    If docCCs.Count <> 0 Then
        For Each cc In docCCs
            cc.LockContents = False
            cc.Range.Text = showFullName
            cc.LockContents = True
        Next
    End If
    
    'Save
    dx.WriteText "/DocumentInfo/DocumentInfo-ShowFullName", showFullName
    dx.WriteText "/DocumentInfo/DocumentInfo-FullName", fullnameToUse
    
    If FormName > "" Then
        dx.SetNode "/DocumentInfo", "DocumentInfo-Form", FormName
        dx.SetNode "/DocumentInfo", "DocumentInfo-SaveFolder", saveFolder
        dx.SetNode "/DocumentInfo", "DocumentInfo-SaveFileName", saveFileName
    Else
        dx.DeleteNode "/DocumentInfo/DocumentInfo-Form"
        dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFolder"
        dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFileName"
    End If
    
    ClearDVs
    
    If fullnameToUse = ActiveDocument.fullName Then
        On Error GoTo SaveFailed
        ThisDoc.Save
        On Error GoTo 0
    Else
        On Error GoTo SaveFailed
        ThisDoc.SaveAs2 fullnameToUse
        On Error GoTo 0
    End If
    Set ThisDoc = ActiveDocument
    Dim saved As Boolean
    saved = ThisDoc.saved
    SetSaveFileName (ThisDoc.name)
    SetSaveFolder (ThisDoc.Path)
    EditBoxFileName = ThisDoc.name
    EditBoxFolder = ThisDoc.Path
    RefreshBackstage
    If ThisDoc.saved <> saved Then
        ThisDoc.saved = saved
    End If
    
ResumeSaveFailed:

    Exit Sub
    
SaveFailed:
    MsgBox "Save failed!" & vbCrLf & vbCrLf & "Error: " & Err.Description, vbCritical + vbOKOnly, "Save document"
    Resume ResumeSaveFailed
    
End Sub


'Public Function HandleSave(method As String, ByRef Cancel As Boolean, SaveAsUI As Boolean) As Boolean
'    '!!!LogDebug "Method: " & method & ", " & "SaveAsUi: " & SaveAsUI & ", Cancel: " & Cancel, "HandleSave"
'    ' Returns True If Saved
'    ' Cancel is True If Calling Method Should Cancel it's action
'
'    'Debug.Print Now; " *HandleSave, "; method; ": "; ThisDoc.fullName
'    'Exit Sub
'    If method = "DocumentBeforeClose" Then
'        Dim res As VbMsgBoxResult
'        If SaveAsTempFullName > "" Then
'            res = MsgBox("Do you want to save your changes to '" & ThisDoc.name & "'?" + vbCrLf + vbCrLf + "If you click 'No' a temporary file will be available in '" & ThisDoc.Path & "'", vbYesNoCancel + vbDefaultButton1 + vbExclamation, "Closing document")
'        Else
'            res = MsgBox("Do you want to save your changes to '" & ThisDoc.name & "'?" + vbCrLf + vbCrLf + "If you click 'No' a temporary file will be available in '" & UserTemp & "'", vbYesNoCancel + vbDefaultButton1 + vbExclamation, "Closing document")
'        End If
'        Select Case res
'            Case vbYes
'                Cancel = False
'            Case vbNo
'                SaveAsTemp dsDocument
'                ThisDoc.Saved = True
'                Cancel = False
'                Exit Function
'            Case vbCancel
'                Cancel = True
'                Exit Function
'        End Select
'    Else
'        Cancel = True
'    End If
'
'    Dim oNode As CustomXMLNode
'    Dim showFullName As String
'    Dim fullNameOld As String
'    Dim isConversion As Boolean
'
'    Dim fullnameToUse As String
'    Dim showDialog As Boolean
'    Dim dialogInputFullName As String
'
'    Dim backupFullName As String
'    backupFullName = ThisDoc.fullName
'
'    ' Handle save
'    Application.DisplayAlerts = wdAlertsNone
'    dx.Init Me
'    isConversion = False
'    BackupDVs
'
'    showDialog = (BatchSaveAsFullName = "") And _
'                ( _
'                    SaveAsUI _
'                    Or (SaveAsTempFullName > "") _
'                    Or (ThisDoc.fullName = ThisDoc.name) _
'                 ) ' Last one possible if Attached template
'
'    If showDialog Then
'        If SaveAsTempFullName > "" Or (ThisDoc.fullName = ThisDoc.name) Then 'New
'            Dim tempFolder As String
'            Dim tempFileName As String
'
'            If FormName = "" Then
'                If SaveFileName > "" Then
'                    tempFileName = CalculateTitle(SaveFileName, dx)
'                End If
'                If SaveFolder > "" Then
'                    tempFolder = CalculateTitle(SaveFolder, dx)
'                Else
'                    tempFolder = Dialogs(wdDialogToolsOptionsFileLocations).Setting
'                End If
'            Else
'                tempFileName = ""
'                tempFolder = Dialogs(wdDialogToolsOptionsFileLocations).Setting
'            End If
'
''            If Not Right$(tempFolder, 1) = "\" And Not Right$(tempFolder, 1) = "/" Then
''                tempFolder = IIf(InStr(SaveFolder, "\") > 0, "\", "/")
''            End If
'            ' Test Exists on SaveFolder !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'
'            dialogInputFullName = FixPath(CombinePaths(tempFolder, tempFileName))
'        Else ' SaveAsUI
'            dialogInputFullName = FixPath(ThisDoc.fullName)
'        End If
'
''        ElseIf (ThisDoc.fullName <> ThisDoc.Name) And Not (ThisDoc.fullName = SaveAsTempFullName) Then
''            dialogInputFullName = ThisDoc.fullName
''        ElseIf (ConvertToFullName > "") And Not (ThisDoc.fullName = SaveAsTempFullName) Then
''            dialogInputFullName = FixPath(ConvertToFullName)
''        Else
''            dialogInputFullName = Dialogs(wdDialogToolsOptionsFileLocations).Setting
''            If Not Right$(dialogInputFullName, 1) = "\" And Not Right$(dialogInputFullName, 1) = "/" Then
''                dialogInputFullName = dialogInputFullName + IIf(InStr(dialogInputFullName, "\") > 0, "\", "/")
''            End If
''            dialogInputFullName = FixPath(dialogInputFullName)
''        End If
'
'        Application.FileDialog(msoFileDialogSaveAs).InitialFileName = dialogInputFullName
'        Application.FileDialog(msoFileDialogSaveAs).title = ""
'        Application.FileDialog(msoFileDialogSaveAs).ButtonName = ""
'        Application.FileDialog(msoFileDialogSaveAs).FilterIndex = 1
'
'        Dim choice As Integer
'        choice = Application.FileDialog(msoFileDialogSaveAs).show
'        If choice = 0 Then 'Don't save
'            Cancel = True
'            Exit Function
'        Else
'            fullnameToUse = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
'            If fullnameToUse = "" Then
'                Exit Function
'            Else
'                fullnameToUse = FixPath(fullnameToUse, False)
'            End If
'        End If
'    ElseIf BatchSaveAsFullName = "" Then
'        fullnameToUse = FixPath(ThisDoc.fullName)
'    Else
'        fullnameToUse = FixPath(BatchSaveAsFullName)
'    End If
'
'
'    ' Prepare to save to SharePoint
'    If LCase(GetSite(fullnameToUse)) Like "http*" Or LCase(FixPath(fullnameToUse, "\")) Like "*\\crisnet\*" Or LCase(FixPath(fullnameToUse, "\")) Like "*\\extranet.crisplant.com\*" Then
'        Dim webFolder As String
'        webFolder = LCase(FixPath(fullnameToUse))
'        webFolder = IIf(InStrRev(webFolder, "\") > 0, Mid(webFolder, 1, InStrRev(webFolder, "\")), Mid(webFolder, 1, InStrRev(webFolder, "/")))
'        'webFolder = FixPath(webFolder, "http")
'        If GetURLStatus(webFolder) = "200" Then
'            fullNameOld = Mid(fullnameToUse, 1, InStrRev(fullnameToUse, ".")) & "ThisDoc"
'            If GetURLStatus(fullNameOld) = "200" Then
'                If GetURLStatus(fullnameToUse) <> "200" Then
'                    isConversion = True
'                    ' Move SharePoint file
'                    Debug.Print "Move " & fullNameOld & " to " & fullnameToUse
'                    Dim moveResult As String
'                    moveResult = MoveSharePointFile(fullNameOld, fullnameToUse)
'                    If LCase(moveResult) = LCase(fullnameToUse) Then
'                        CheckOut fullnameToUse
'                    End If
'                Else
'                    MsgBox "Converted file '" & fullnameToUse & "'already exists", vbCritical + vbOKOnly, "Cannot move SharePoint file"
'                    Cancel = True
'                    Exit Function
'                End If
'            End If
'        End If
'    End If
'    ' Show FileMame
'    showFullName = fullnameToUse
'    If InStr(showFullName, "_Converted_") > 0 Then
'        Dim start As Integer
'        start = InStr(showFullName, "_Converted_")
'        showFullName = Mid(showFullName, 1, start - 1) & Mid(showFullName, start + 20)
'    End If
'
'    Dim cc As ContentControl
'    Dim docCCs As ContentControls
'    Set docCCs = ThisDoc.SelectContentControlsByTag("DocumentInfo-FileName:DocumentInformation")
'    If docCCs.Count <> 0 Then
'        For Each cc In docCCs
'            cc.LockContents = False
'            cc.Range.Text = showFullName
'            cc.LockContents = True
'        Next
'    End If
'
'
'    'Save
'    dx.WriteText "/DocumentInfo/DocumentInfo-ShowFullName", showFullName
'    dx.WriteText "/DocumentInfo/DocumentInfo-FullName", fullnameToUse
'
'    If FormName > "" Then
'        dx.SetNode "/DocumentInfo", "DocumentInfo-Form", FormName
'        dx.SetNode "/DocumentInfo", "DocumentInfo-SaveFolder", SaveFolder
'        dx.SetNode "/DocumentInfo", "DocumentInfo-SaveFileName", SaveFileName
'    Else
'        dx.DeleteNode "/DocumentInfo/DocumentInfo-Form"
'        dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFolder"
'        dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFileName"
'    End If
'
'    ClearDVs
'
'    On Error GoTo FailedToSave
'    If LCase(fullnameToUse) = LCase(ThisDoc.fullName) Then
'        InSave = True
'        ThisDoc.Save
'        InSave = False
'    ElseIf LCase(fullnameToUse) Like "*.docx" Then
'        InSave = True
'        ThisDoc.SaveAs2 fullnameToUse, , , , (BatchSaveAsFullName = "")
'        InSave = False
'    Else
'        InSave = True
'        Application.FileDialog(msoFileDialogSaveAs).Execute 'Save as other format?
'        InSave = False
'    End If
'    On Error GoTo 0
'
'    Set ThisDoc = ActiveDocument ' Application.Documents(FullNameToUse)
'    Dim Saved As Boolean
'    Saved = ThisDoc.Saved
'
'    If Not (Saved = ThisDoc.Saved) Then
'        ThisDoc.Saved = Saved
'    End If
'
'
'ExitSub:
'
'    Application.DisplayDocumentInformationPanel = False
'    Application.DisplayAlerts = wdAlertsAll
'
'    If ThisDoc.fullName <> backupFullName Then
'        BGDocs.Add ThisDoc.fullName, Me
'        BGDocs.Remove CVar(backupFullName)
'    End If
'
'    If isConversion Then
'        ConvertedFullName = ThisDoc.fullName
'        Application.OnTime Now + TimeValue("00:00:01"), "bg_Support.AfterSave"
'    End If
'    Exit Function
'
'FailedToSave:
'    ' Restore
'    RestoreDVs
'    dx.DeleteNode "/DocumentInfo/DocumentInfo-Form"
'    dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFolder"
'    dx.DeleteNode "/DocumentInfo/DocumentInfo-SaveFileName"
'
'    Dim result As String
'    result = ThisDoc.ContentTypeProperties.validate()
'    If result > "" Then
'        Application.DisplayDocumentInformationPanel = True
'    Else
'        MsgBox "File not saved!" & vbCrLf & Err.Description, vbCritical + vbOKOnly, "Save document"
'    End If
'    Resume ExitSub
'
'End Function

Public Sub Update(method As String)
    If DocRibbon Is Nothing Then Exit Sub
    
    '!!!LogDebug "Method:" & method, "Update"
    Dim frm As MainForm
    Dim updated As Boolean
    updated = True
    
    dx.Init Me
    dx.method = method
    Select Case method
    Case "Form"
        dx.LanguageUpdated = False
        'DX.StructureUpdated = False
        dx.UpdateCaptions = False
        dx.ReplaceRegistered = False
        
        dx.DoUpdate = True
        dx.DoReadTranslation = False
        dx.DoFixDocument = False
        Set frm = New MainForm
        frm.Init dx
        frm.show
        SetFormName ""
    Case "Refresh"
        dx.LanguageUpdated = True
        'DX.StructureUpdated = True
        dx.UpdateCaptions = True
        dx.ReplaceRegistered = True
        
        dx.DoUpdate = True
        dx.DoReadTranslation = True
        dx.DoFixDocument = False
    Case "Full"
        dx.LanguageUpdated = True
        'DX.StructureUpdated = True
        dx.UpdateCaptions = True
        dx.ReplaceRegistered = True
        
        dx.DoUpdate = True
        dx.DoReadTranslation = True
        dx.DoFixDocument = True
    Case "Convert"
        dx.LanguageUpdated = True
        'DX.StructureUpdated = True
        dx.UpdateCaptions = True
        dx.ReplaceRegistered = True
        
        dx.DoUpdate = True
        dx.DoReadTranslation = False
        dx.DoFixDocument = True
    End Select
    
'    dx.UpdateCaptions = True
'    dx.RebuildTOC = True
'    dx.CompanyLogoUpdated = True
'    dx.DoFixDocument = True
    
    If dx.DoUpdate Then
        If dx.Undo Is Nothing Then
            dx.Prolog "Update Document - " & method, False
        Else
            If dx.Undo.IsRecordingCustomRecord Then
                If dx.Undo.CustomRecordName = "Updated from main form" Then
                    'No Action
                Else
                    dx.Undo.EndCustomRecord
                    dx.Prolog "Update Document - " & method, False
                End If
            Else
                dx.Prolog "Update Document - " & method, False
            End If
        End If
        
        
        Set TimerForm = New UpdateForm
        TimerForm.Init Me, "UpdateDocument"
        TimerForm.show vbModal
        updated = True
        
        '!!!LogDebug "Finish update"
        
        Dim p2 As Paragraph
        Set p2 = Nothing
        On Error Resume Next
        Set p2 = ThisDoc.Paragraphs(2)
        On Error GoTo 0
        If p2 Is Nothing Then
            If ThisDoc.Characters.Count < 2 Then
                ThisDoc.Range.Delete
                Dim p As Paragraph
                Set p = ThisDoc.Paragraphs.Add(ThisDoc.Range)
                p.Range.LanguageId = ThisDoc.Styles(wdStyleNormal).LanguageId
                p.Style = wdStyleHeading1
            End If
        End If
        dx.updated = updated
        dx.Epilog
        If saveFileName = "" Then
            saveFileName = "[[TitleLine1]]"
            ' PLY SaveFileName
        End If
        GetManager.UpdateEditBoxes ThisDoc
        
        '!!!LogDebug "Finished update"
        
    End If
 
End Sub

Public Sub ConvertToBGDoc(fromFullName As String)
    Dim docFrom As Document
    
    dx.Init Me
    dx.method = "Convert"
    Set dx.ConversionHistory = New Scripting.Dictionary
    dx.WriteText "/DocumentInfo/DocumentInfo-WorkflowLabel", "Conversion Draft"
    
' Test
'    DX.AddError "Picture: Missing file"
'    DX.AddError "Picture: File newer"
'    DX.AddWarning "Date: Frontpage, Header"
    
    If fromFullName = "" Then
        Set docFrom = Nothing
    Else
        On Error Resume Next
        Dim i As Integer
        For i = 1 To Application.Documents.Count
            If Application.Documents(i).fullName = fromFullName Then
                Set docFrom = Application.Documents(i)
                Exit For
            End If
        Next
        On Error GoTo 0
    End If
    
    ThisDoc.Activate
    ThisDoc.ActiveWindow.visible = True
    Set dx.fromDoc = docFrom
    
    Set TimerForm = New UpdateForm
    TimerForm.Init Me, "ConvertDocument"
    TimerForm.show vbModal
    
    Update "Form"
End Sub

Public Function BatchConvertToBGDoc(fromFullName As Variant, toFullName As String, workflowLabel As Variant, image As Variant, projectNo As Variant) As String
    On Error GoTo OnError
    Dim strError As String
    
    Dim docFrom As Document
    dx.Init Me
    Set dx.ConversionHistory = New Scripting.Dictionary
    If workflowLabel > "" Then dx.WriteText "/DocumentInfo/DocumentInfo-WorkflowLabel", workflowLabel
    If projectNo > "" Then dx.WriteText "/DocumentInfo/DocumentInfo-ProjectNo", projectNo
    If image > "" Then dx.WriteText "/DocumentInfo/DocumentInfo-CompanyLogo", "http://crisnet/project/spteam/Pictures/" & image

'    DX.AddError "Picture: Missing file"
'    DX.AddError "Picture: File newer"
'    DX.AddWarning "Date: Frontpage, Header"

    dx.method = "Convert"
    If fromFullName = "" Then
        Set docFrom = Nothing
    Else
        On Error Resume Next
        Dim i As Integer
        For i = 1 To Application.Documents.Count
            If Application.Documents(i).fullName = fromFullName Then
                Set docFrom = Application.Documents(i)
                Exit For
            End If
        Next
        On Error GoTo 0
    End If
    If docFrom Is Nothing Then
        On Error Resume Next
        Set docFrom = Application.Documents.Open(fromFullName, , , False)
        On Error GoTo 0
    End If
    
    If Not docFrom Is Nothing Then
        Dim Skip As Boolean
        Dim Template As String
        Dim altTemplate As String
        altTemplate = ""
        Template = docFrom.attachedTemplate.name
        On Error Resume Next
        altTemplate = docFrom.BuiltInDocumentProperties.Item("Template").value
        On Error GoTo 0
        Skip = Not UsesOldDocumentationTemplate(Template, altTemplate)
        
        If Skip Then
            docFrom.Close wdDoNotSaveChanges
            BatchConvertToBGDoc = "Skipped:Wrong template"
            Exit Function
        Else
            Set dx.fromDoc = docFrom
            ThisDoc.Activate
            ConvertDocument
            BatchSaveAsFullName = toFullName
            BatchConvertToBGDoc = dx.ConversionHistoryToString()
            DoSave toFullName
        End If
    Else
        BatchConvertToBGDoc = "Skipped:Document not found"
    End If
    Exit Function
    
    
ReturnError:
    dx.AddError strError
    BatchConvertToBGDoc = dx.ConversionHistoryToString()
    
    Exit Function
OnError:
    strError = Err.Number & ". " & Err.Description
    Resume ReturnError
    
End Function

Public Sub ConvertDocument(Optional closeAgain As Boolean = True, Optional screenUpdate As Boolean = False)
    Application.ScreenUpdating = screenUpdate
    Dim paperFormat As String
    Dim showFrontMatter As Boolean
    Dim fromDoc As Document
    Dim updated As Boolean
    updated = False
    Dim aRevHist() As String
    Dim ok As Boolean
    ok = True
    
    dx.WriteLog "Start conversion"
    
    Dim fromDocFullName As String
    Set fromDoc = dx.fromDoc
    fromDocFullName = fromDoc.fullName
    dx.OrgFileDate = GetFileDate(fromDocFullName)
    closeAgain = fromDoc.saved
    
'    If fromDocFullName = "" Then
'        MsgBox "Please provide a file to import", vbExclamation & vbOKOnly, "Cannot convert document"
'        ok = False
'        Exit Sub
'    End If
'
'    If fromDoc Is Nothing Then
'        MsgBox "Unable to open '" & fromDocFullName & "'. Not allowed due to Trust Center settibgs?", vbExclamation & vbOKOnly, "Cannot convert document"
'        ok = False
'        Exit Sub
'    End If
'
'    If fromDoc.CanCheckin Then
'        MsgBox "Document must be checked in to be converted '" & fromDocFullName & "'", vbExclamation & vbOKOnly, "Cannot convert document"
'        ok = False
'        Exit Sub
'    End If
    
    
    Dim strSaveFolder As String
    Dim strSaveFileName As String
    
    'PLY!
    If InStr(fromDocFullName, "/") > 0 Then
        strSaveFolder = FixPath(Mid(fromDocFullName, 1, InStrRev(fromDocFullName, "/")))
        strSaveFileName = Mid(fromDocFullName, InStrRev(fromDocFullName, "/") + 1)
    Else
        strSaveFolder = FixPath(Mid(fromDocFullName, 1, InStrRev(fromDocFullName, "\")))
        strSaveFileName = Mid(fromDocFullName, InStrRev(fromDocFullName, "\") + 1)
    End If
    strSaveFileName = FixPath(Mid(strSaveFileName, 1, InStrRev(strSaveFileName, ".")) & "docx")
    
    dx.WriteText "/DocumentInfo/DocumentInfo-SaveFolder", strSaveFolder
    dx.WriteText "/DocumentInfo/DocumentInfo-SaveFileName", strSaveFileName
    
'    If fromDoc.CanCheckin Then
'        On Error Resume Next
'        fromDoc.CheckIn False ' Discard CheckOut
'        On Error GoTo 0
'        Set fromDoc = Application.Documents.Open(fromDocFullName, False, True, False, , , , , , , , True)
'        ok = Not fromDoc.CanCheckin
'    End If
    
    If ok Then
        ' Read Properties
        Dim fromFile As New CPDocFile
        
        Dim Head1 As String
        Dim Head2 As String
        Dim Head3 As String
        Dim Head4 As String
        Dim DateText As String
        Dim IniText As String
        Dim Section As String
        Dim Copyright As String
        Dim Language As String
        Dim comments As String
        Dim fld As field
        Dim ifld As Long
        
        fromDoc.Activate
    
        If Selection.Range.StoryType = 5 Then
            SendKeys "{Esc}", False
            DoEvents
            If Selection.Range.StoryType = 5 Then
                SendKeys "{Esc}", False
                DoEvents
            End If
        End If
        DoEvents

        dx.WriteLog "Unlink includetext and WordPerfect"
        Dim fldCount As Integer
        fldCount = fromDoc.fields.Count
        Dim fldPrev As field
        If Not fldCount = 0 Then
            Set fld = fromDoc.fields(fldCount)
            Do While Not fld Is Nothing
                Set fldPrev = fld.Previous
                If fld.Type = wdFieldIncludeText Then
                    fld.Unlink
                ElseIf Trim(LCase(fld.code)) Like "include *" Then
                    fld.Unlink
                End If
                Set fld = fldPrev
            Loop
        End If
'
'        For ifld = fldCount To 1 Step -1
'            Set fld = fromDoc.fields(ifld)
'            If fld.type = wdFieldIncludeText Then
'                fld.Unlink
'            ElseIf Trim(LCase(fld.code)) Like "include *" Then
'                fld.Unlink
'            End If
'        Next
        
        dx.WriteLog "Read document information"
        GetVariablesFromDocument Head1, Head2, Head3, Head4, DateText, IniText, Section, Copyright
        comments = fromDoc.BuiltInDocumentProperties("Comments")
                
        fromDoc.Content.Select
        DeleteSectionBreaks

         With ActiveWindow.View
            dx.ShowRevisionsAndComments = .ShowRevisionsAndComments
            dx.RevisionsView = .RevisionsView
            .ShowRevisionsAndComments = False
            .RevisionsView = wdRevisionsViewFinal
        End With

        dx.WriteLog "Determine paper format and language"
        paperFormat = GetPaperFormatFromPageSetup(fromDoc)
        
        ' GetLanguage
        fromFile.LanguageCode = dx.GetLanguageFromFileName(fromDoc.name)
        ReadLanguageFromDocument fromDoc, fromFile
        
        dx.WriteLog "Read front page"
        ReadFrontPage fromDoc, fromFile
        fromFile.FPJournalExtra = Replace(Replace(Trim(fromFile.FPJournalExtra), "(", ""), ")", "")
        If fromFile.FPCopyright > "" Or fromFile.FPLine1 > "" Or fromFile.FPLine2 > "" Or fromFile.FPLine3 > "" Or fromFile.FPLine4 > "" Then
            showFrontMatter = True
        End If
        
        ' Prepare Shapes
        dx.WriteLog "Mark pictures"
        
        Dim bgpmFrom As New BGPictureManager
        ok = bgpmFrom.ReadRange(fromDoc.Content, dx, True)
        
'        For ifld = FromDoc.fields.count To 1 Step -1
'            Set fld = FromDoc.fields(ifld)
'            If Trim(LCase(fld.code)) Like "includepicture *" Then
'                fld.Unlink
'            End If
'        Next
        
        ' Copy/Paste
        dx.WriteLog "Copy content into document"
        fromDoc.Range.Select
        Selection.copy
        ThisDoc.Activate
        
        With ActiveWindow.View
            .ShowRevisionsAndComments = False
            .RevisionsView = wdRevisionsViewFinal
        End With
        
        'If doc.ContentControls.Count > 0 Then doc.ContentControls(1).LockContentControl = False
        ThisDoc.Range.Delete
        On Error Resume Next
        ThisDoc.Range.Paste
        If Err.Number <> 0 Then
            On Error GoTo 0
            dx.AddError "Unable to insert document content:" & Err.Description & ". Orginal must to be fixed."
        End If
        On Error GoTo 0
        
        ' Get Picture information
        dx.WriteLog "Read pictures"
        If ok Then
           dx.WriteLog "Read pictures, Read old filename"
           ok = bgpmFrom.ReadOldFilename(dx, True)
            If ok Then
               dx.WriteLog "Read pictures, Read info"
                ok = bgpmFrom.ReadInfo(dx, False)
            End If
            
'            If ok Then
'                ok = bgpmFrom.BreakBrokenLinks
'            End If
            If ok Then
               dx.WriteLog "Read pictures, Read"
                ok = bgpmFrom.Read(dx, True, False, False)
'                If ok Then
'                    ok = bgpmFrom.BreakBrokenLinks
'                End If
            End If
        End If
        
        ' All actions on fromDoc must be finished here
        
        ThisDoc.Activate
        dx.Prolog "Import Document"
        
        ' All Actions on doc below here
        
        If fromFile.LanguageCode > "" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-Language", fromFile.LanguageCode
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-Language", fromFile.LanguageId
        End If
        
        ' Perhaps get Language and Paper from Variables before Clear
        ClearVariables ThisDoc
        
        ' Add Conversion fields to XML
        dx.WriteConversion fromDocFullName, Format(Now, "YYYY-MM-DD HH.mm:ss"), GetUserFullName, bgpmFrom
'        SetConvertToFullName FixPath(Mid(fromDocFullName, 1, InStrRev(fromDocFullName, ".")) & "docx", False)
        SetSaveFileName strSaveFileName
        SetSaveFolder strSaveFolder
        
        dx.UnlockAllContentControls
        
        dx.WriteLog "Update pictures, Read range"
        ' Change Pictures to V
        Dim bgpm As New BGPictureManager
        ok = bgpm.ReadRange(ThisDoc.Content, dx)
        If ok Then
            dx.WriteLog "Update pictures, Read info"
            ok = bgpm.ReadInfo(dx, False)
            'Application.screenUpdating = True
            If ok Then
                dx.WriteLog "Update pictures, Break broken links"
                ok = bgpm.BreakBrokenLinks
            End If
            If ok Then
'                ok = bgpm.Read(True)
'                If ok Then
                dx.WriteLog "Update pictures, Change pictures to V:"
                ok = bgpm.ChangePicturesToV(bgpmFrom)
'                End If
            End If
        End If
        
        dx.WriteLog "Check Paragraphs"
        dx.CheckParagraphs
        
        dx.docType = GetDocType(Section)
        If dx.docType = "O & M Document" And dx.FoundCaptionRes Then
            dx.docType = "O & M Spare Parts Catalogue"
        End If
        If dx.docType = "" Then
            dx.docType = "Project Document"
        End If
                    
        ' Read Revisions
        dx.WriteLog "Read revison history"
        
        aRevHist = dx.ReadRevisions()
        Dim revisions As Integer
        Dim showRevision As Boolean
        revisions = UBound(aRevHist, 1) + 1
        If revisions > 0 And aRevHist(0, 0) > "" Then
            showRevision = True
            showFrontMatter = True
            dx.WriteText "/DocumentInfo/DocumentInfo-RevisionHistory-Show", "Standard"
        Else
            showRevision = False
            dx.WriteText "/DocumentInfo/DocumentInfo-RevisionHistory-Show", ""
            aRevHist = dx.ReadRevisionHistoryFromCommnets(comments)
            revisions = UBound(aRevHist, 1) + 1
            If revisions > 0 And aRevHist(0, 0) > "" Then
                showRevision = True
            End If
        End If
        
        If showRevision Then
            dx.WriteText "/DocumentInfo/DocumentInfo-Revision", Replace(aRevHist(revisions - 1, 0), Chr(11), vbCr)
            dx.WriteText "/DocumentInfo/DocumentInfo-Date", Replace(aRevHist(revisions - 1, 1), Chr(11), vbCr)
            dx.WriteText "/DocumentInfo/DocumentInfo-Author", Replace(aRevHist(revisions - 1, 2), Chr(11), vbCr)
            dx.WriteText "/DocumentInfo/DocumentInfo-Description", Replace(aRevHist(revisions - 1, 3), Chr(11), vbCr)
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-Revision", GetNewMajor("")
            dx.WriteText "/DocumentInfo/DocumentInfo-Date", Format(Now, "YYYY-MM-DD")
            dx.WriteText "/DocumentInfo/DocumentInfo-Author", UserName
            dx.WriteText "/DocumentInfo/DocumentInfo-Description", ""
        End If
        'If revisions > 1 Then
            dx.WriteRevisionHistory aRevHist
        'End If
        
        dx.WriteLog "Read TOC, TOF and TOT"

        ' Read TOC, TOF, TOT
        showFrontMatter = showFrontMatter Or ReadCaptionTOCTOFTOT(ThisDoc, dx)
        
        dx.WriteLog "Apply new styles"
        ' Reload Styles
        ThisDoc.CopyStylesFromTemplate ThisDoc.attachedTemplate.fullName
        
        ' Update XML
        dx.WriteLog "Set paper format"
        dx.NewPaperFormat = paperFormat
        dx.ChangePaperFormat
        
        ' Change to "Standard, All Caps"
        If dx.GetPropertyValue(dx.docType, "HeadingLayout") Like "Standard*" Or dx.GetPropertyValue(dx.docType, "HeadingLayout") = "" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-HeadingLayout", "Standard, All Caps"
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-HeadingLayout", Split(dx.GetPropertyValue(dx.docType, "HeadingLayout"), " | ")(0)
        End If
        
        dx.WriteText "/DocumentInfo/DocumentInfo-DocType", dx.docType
        dx.WriteText "/DocumentInfo/DocumentInfo-DocMainType", dx.GetPropertyValue(dx.docType, "DocMainType")
        dx.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", dx.GetPropertyValue(dx.docType, "FrontMatter")
        dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", dx.GetPropertyValue(dx.docType, "CaptionHeading")
        dx.WriteText "/DocumentInfo/DocumentInfo-DocumentInformation", dx.GetPropertyValue(dx.docType, "DocumentInformation")
        dx.WriteText "/DocumentInfo/DocumentInfo-FrontPage", dx.GetPropertyValue(dx.docType, "FrontPage")
        dx.WriteText "/DocumentInfo/DocumentInfo-RevisionHistory", dx.GetPropertyValue(dx.docType, "RevisionHistory")
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC", dx.GetPropertyValue(dx.docType, "TOC")
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC-HeadingLevels", dx.GetPropertyValue(dx.docType, "TOC-HeadingLevels")
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC-Headings", dx.GetPropertyValue(dx.docType, "TOC-Headings")
        dx.WriteText "/DocumentInfo/DocumentInfo-TOF", dx.GetPropertyValue(dx.docType, "TOF")
        dx.WriteText "/DocumentInfo/DocumentInfo-TOT", dx.GetPropertyValue(dx.docType, "TOT")
        dx.WriteText "/DocumentInfo/DocumentInfo-PDFLayout", dx.GetPropertyValue(dx.docType, "PDFLayout")
        
        If dx.FoundHeadingOrParmheadOrHeadingPart = False Then
            dx.WriteText "/DocumentInfo/DocumentInfo-TOC", ""
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-TOC", "Standard"
        End If
        If showFrontMatter Then
            dx.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", ""
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", "Hide"
        End If
        
        'DX.WriteText "/DocumentInfo/DocumentInfo-WorkflowLabel", "Conversion Draft"
        
        dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine1", dx.ReplaceRText(Head1)
        dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine2", dx.ReplaceRText(Head2)
        dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine3", dx.ReplaceRText(Head3)
        dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine4", dx.ReplaceRText(Head4)
        
        dx.WriteText "/DocumentInfo/DocumentInfo-DocNo", dx.ReplaceRText(Section)
        dx.WriteText "/DocumentInfo/DocumentInfo-SupplierFileName", dx.ReplaceRText(fromFile.FPJournalExtra)
        
        dx.WriteText "/DocumentInfo/DocumentInfo-DocTitle", CalculateTitle(dx.GetPropertyValue(dx.docType, "DocTitle", True), dx)
        dx.WriteText "/DocumentInfo/DocumentInfo-DocSearchTitle", CalculateTitle(dx.GetPropertyValue(dx.docType, "DocSearchTitle", True), dx)
        
        ThisDoc.BuiltInDocumentProperties("Title").value = CalculateTitle(dx.GetPropertyValue(dx.docType, "Title", True), dx)
        ThisDoc.BuiltInDocumentProperties("Subject").value = CalculateTitle(dx.GetPropertyValue(dx.docType, "Subject", True), dx)
        
        dx.WriteLog "Delete old front matter"
        
        If showFrontMatter Then dx.MoveTextBoxesToLastPage
        ' Delete Old FrontMatter
        Dim rngDelete As Range
        Dim para As Paragraph
        Dim i As Integer
        Dim rngRevisionTable As Range
       
        If dx.RevisionTableIndex > 0 Then
            Set rngRevisionTable = ThisDoc.Content.Tables(dx.RevisionTableIndex).Range
        End If
        
        If ThisDoc.TablesOfFigures.Count > 0 Then
            i = ThisDoc.TablesOfFigures.Count
            Set rngDelete = ThisDoc.TablesOfFigures(i).Range
            rngDelete.SetRange 0, rngDelete.End
            rngDelete.Delete
            rngDelete.SetRange 0, 1
            Set para = rngDelete.Paragraphs(1)
            Do While Replace(Replace(Trim(para.Range.Text), vbCr, ""), vbCrLf, "") = ""
                rngDelete.Delete
                rngDelete.SetRange 0, 1
                Set para = rngDelete.Paragraphs(1)
            Loop
        End If
        
        If ThisDoc.TablesOfContents.Count > 0 Then
            i = ThisDoc.TablesOfContents.Count
            
            If dx.docType = "O & M Spare Parts Catalogue" Then
                ThisDoc.TablesOfContents(i).Range.fields(1).code.Text = "TOC \O ""1-1"" \H"
                dx.RebuildTOC = True
            End If
            Set rngDelete = ThisDoc.TablesOfContents(i).Range
            rngDelete.SetRange 0, rngDelete.End
            rngDelete.Delete
            
'            rngDelete.SetRange 0, 1
'            Set para = rngDelete.Paragraphs(1)
'            Do While Replace(Replace(Trim(para.Range.text), vbCr, ""), vbCrLf, "") = ""
'                rngDelete.Delete
'                rngDelete.SetRange 0, 1
'                Set para = rngDelete.Paragraphs(1)
'            Loop
        End If
        
        If dx.RevisionTableIndex > 0 Then
            Set rngDelete = rngRevisionTable.Duplicate
            Set rngRevisionTable = rngRevisionTable.GoTo(What:=wdGoToHeading, Which:=wdGoToPrevious)
            rngRevisionTable.Collapse wdCollapseStart
            rngDelete.SetRange rngRevisionTable.start, rngDelete.End
            rngDelete.Delete
            rngDelete.SetRange rngRevisionTable.start, rngRevisionTable.start
            Set para = rngDelete.Paragraphs(1)
            Dim paraPriv As Paragraph
            Do While Replace(Replace(Trim(para.Range.Text), vbCr, ""), vbCrLf, "") = ""
                Set paraPriv = para.Previous
                para.Range.Delete
                Set para = paraPriv
                If para Is Nothing Then Exit Do
            Loop
        End If
        
        If showFrontMatter Then dx.MoveTextBoxesToFirstPage
        
        Dim strt As Long
        Dim rng As Range
        strt = ThisDoc.GoTo(wdGoToPage, wdGoToLast).start
        If strt = 0 Then strt = 1 ' PLY 2019-08-21
        Set rng = ThisDoc.Range(strt - 1, ThisDoc.Range.End)
        If rng.End - rng.start = 2 Then
            rng.Delete
        End If
        
        ' Update Document
        dx.DoFixDocument = True
        dx.DoUpdate = True
        dx.DoReadTranslation = False
        dx.LanguageUpdated = True
        dx.UpdateCaptions = True
        dx.ReplaceRegistered = True
                
        dx.UpdateDocument False
        
        ' End Update
        updated = True
        
    End If

    If closeAgain And Not fromDoc Is Nothing Then
        fromDoc.Close wdDoNotSaveChanges
        Set fromDoc = Nothing
    End If
    
   
    ThisDoc.Activate
    
    With ActiveWindow.View
        If .ShowRevisionsAndComments <> dx.ShowRevisionsAndComments Then .ShowRevisionsAndComments = dx.ShowRevisionsAndComments
        If .RevisionsView <> dx.RevisionsView Then .RevisionsView = dx.RevisionsView
    End With
    
TestExit:

    dx.updated = updated
    dx.Epilog
    DoEvents
    If Not DocRibbon Is Nothing Then
        On Error Resume Next
        DocRibbon.ActivateTab "documentTab"
        On Error GoTo 0
    End If
End Sub

Public Function UpdateDocument(Optional screenUpdate As Boolean = False) As Boolean
    dx.UpdateDocument screenUpdate
End Function


Attribute VB_Name = "BGDocManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Compare Text

Public WithEvents app As Word.Application
Attribute app.VB_VarHelpID = -1
Public LatestDoc As Word.Document
Public LatestProject As String
Public LatestSite As String


Private Sub Class_Initialize()
    '!!!LogDebug "Entering", "BGDocManager.Class_Initialize"
    
    If BGDocs Is Nothing Then
        Set BGDocs = New Scripting.Dictionary
        BGDocs.CompareMode = TextCompare
    End If
    
    Set app = Application
    LatestProject = ""
    LatestSite = ""
    Set LatestDoc = Nothing
    
    Dim key As Variant
    Dim found As Boolean
    Dim doc As Document
    
    If Not ReadTemplateComments Then
        ReadTemplate
    End If
    
    If Not FoundUserName Then
        GetUserNameAndDeleteOldFiles
    End If

''    For Each doc In App.Documents
''        If Not BGDocs.Exists(doc.fullName) Then
''            Dim isDocAdd As Boolean
''            isDocAdd = Not (docAdd Is Nothing)
''            If isDocAdd Then isDocAdd = (docAdd Is doc)
''            If Not isDocAdd Then
''                Debug.Print Now; "  Init_Add"; ": "; doc.fullName;
''                Dim bgd As New BGDoc
''                bgd.Init Me, doc, dsDocument
''                BGDocs.Add doc.fullName, bgd
''            End If
''        End If
''    Next
''    For Each key In BGDocs.Keys
''        found = False
''        For Each doc In App.Documents
''            If key = doc.fullName Then
''                found = True
''                Exit For
''            End If
''        Next
''        If Not found Then
''            Debug.Print Now; "  Init_Close"; ": "; key
''            Set bgd = BGDocs(key)
''            Set bgd.ThisDoc = Nothing
''            Set bgd.Manager = Nothing
''            BGDocs.Remove key
''        End If
''    Next
    
End Sub

Public Sub RemoveDeadBGDocs()
    Dim key As Variant
    Dim found As Boolean
    Dim doc As Document

    For Each key In BGDocs.Keys
        found = False
        For Each doc In app.Documents
            If key = doc.fullName Then
                found = True
                Exit For
            End If
        Next
        If Not found Then
            '!!!LogDebug "Not Found. Removing:" & key, "Manager.RemoveDeadBGDocs"
            BGDocs.Remove key
        End If
    Next
End Sub

Private Sub Class_Terminate()
    '!!!LogError "Entering", "BGDocManager.Class_Terminate"
    If Not (BGDocs Is Nothing) Then
        Set BGDocs = Nothing
    End If
    Set app = Nothing
End Sub

Public Function NewBGDoc(doc As Document, openState As BGDocState) As BGDoc
    On Error Resume Next
    If doc.fullName = doc.attachedTemplate.fullName Then
        Set NewBGDoc = Nothing
        Exit Function
    End If
    If doc.attachedTemplate.name <> "BG Documentation.dotm" Then
        Set NewBGDoc = Nothing
        Exit Function
    End If
    On Error GoTo 0
    
    Dim bgd As BGDoc
    
    If BGDocs.exists(doc.fullName) Then
        Set bgd = BGDocs(doc.fullName)
'        BGDocs.Add doc.fullName, bgd
'        LogInfo "Remove from BGDocs Dictionary. Checked Out? ," & openState, "NewBGDoc"
'        BGDocs.Remove doc.fullName
    Else
        Set bgd = New BGDoc
        BGDocs.Add doc.fullName, bgd
    End If
    
    bgd.Init doc, openState
    Set NewBGDoc = bgd
End Function

Public Function GetDX(Optional bgd As BGDoc = Nothing) As docXML
    On Error Resume Next
    If ActiveDocument.fullName = ActiveDocument.attachedTemplate.fullName Then Set GetDX = Nothing: Exit Function
    If ActiveDocument.attachedTemplate.name <> "BG Documentation.dotm" Then Set GetDX = Nothing: Exit Function
    On Error GoTo 0
    
    If bgd Is Nothing Then
        If BGDocs.exists(ActiveDocument.fullName) Then
            If IsEmpty(BGDocs(ActiveDocument.fullName)) Then
                BGDocs.Remove (ActiveDocument.fullName)
                Set bgd = New BGDoc
                BGDocs.Add ActiveDocument.fullName, bgd
                bgd.Init ActiveDocument, dsDocument
                RemoveDeadBGDocs
            Else
                Set bgd = BGDocs(ActiveDocument.fullName)
            End If
        Else
            Set bgd = New BGDoc
            BGDocs.Add ActiveDocument.fullName, bgd
            bgd.Init ActiveDocument, dsDocument
            RemoveDeadBGDocs
            
'            Stop
'            '!!!LogError "Not in BGDocs: " & ActiveDocument.fullName, "GetDX"
'            Set GetDX = Nothing
'            Exit Function
        End If
    End If
    Set GetDX = bgd.dx
End Function

Public Function GetDXFromDoc(Optional doc As Document = Nothing) As docXML
    Dim bgd As BGDoc
    If doc Is Nothing Then Set doc = ActiveDocument
    
    If BGDocs.exists(doc.fullName) Then
        Set bgd = BGDocs(doc.fullName)
    Else
        '!!!LogError "Not in BGDocs: " & doc.fullName, "GetDXFromDoc"
        Set GetDXFromDoc = Nothing
        Exit Function
    End If
    Set GetDXFromDoc = bgd.dx

End Function


Public Function GetDXFromFullName(fullName As String) As docXML
    Dim bgd As BGDoc
    
    If BGDocs.exists(fullName) Then
        Set bgd = BGDocs(fullName)
    Else
        '!!!LogError "Not in BGDocs: " & fullName, "GetDXFromFullName"
        Set GetDXFromFullName = Nothing
        Exit Function
    End If
    Set GetDXFromFullName = bgd.dx
End Function


''Public Function Init(Optional docAdd As Document = Nothing) As BGDocManager
''    Set Init = Me
''End Function

' -- Methods --

''Public Function AddDoc(doc As Document, stateOpen As BGDocState) As BGDoc
''    On Error GoTo Catch
''
''    Dim key As Variant
''    Dim bgd As BGDoc
''    Dim state As BGDocState
''
''    If BGDocs Is Nothing Then
''        Init doc
''    End If
''
''    key = doc.fullName
''    If BGDocs.Exists(key) Then
''        Set bgd = BGDocs(key)
''    Else
''        Set bgd = New BGDoc
''        BGDocs.Add doc.fullName, bgd
''    End If
''
''    bgd.Init Me, doc, stateOpen
''
''Finally:
''    On Error GoTo 0
''    Set AddDoc = bgd
''    Exit Function
''
''Catch:
''    Dim e As New BGError
''    e.OnError
''    Set bgd = Nothing
''    Resume Finally
''End Function

Public Function GetBGDocFromDoc(doc As Document, Optional force As Boolean = True) As BGDoc
    Dim key As Variant
    Dim bgd As BGDoc
    
    key = doc.fullName
    If BGDocs.exists(key) Then
        'On Error GoTo SearchOneByOne
        Set bgd = BGDocs(key)
        'On Error GoTo 0
    ElseIf force Then
        Set bgd = GetManager.NewBGDoc(doc, dsNoAutoOpen)
        'Set bgd = Nothing
    Else
        Set bgd = Nothing
    End If
    Set GetBGDocFromDoc = bgd
    
    Exit Function
    
ResumeSearchOneByOne:
    Dim bgdLooper As BGDoc
    On Error GoTo 0
    For Each bgdLooper In BGDocs.items
        If bgdLooper.ThisDoc.fullName = key Then
            Set bgd = bgdLooper
            Exit For
        End If
    Next
    If Not bgd Is Nothing Then
        Set GetBGDocFromDoc = bgd
    Else
        
    End If
    Exit Function
    
SearchOneByOne:
    Resume ResumeSearchOneByOne
    
End Function

Public Function GetBGDocFromFullName(fullName As String) As BGDoc
    On Error GoTo Catch
    
    Dim key As Variant
    Dim doc As Document
    Dim bgd As BGDoc
    Dim found As Boolean
    found = False
    
    For Each doc In app.Documents
        If fullName = doc.fullName Then
            found = True
            Exit For
        End If
    Next
    
    If Not found Then
        Set bgd = Nothing
    Else
        key = doc.fullName
        If BGDocs.exists(key) Then
            Set bgd = BGDocs(key)
        Else
            Set bgd = Nothing
        End If
    End If
    
Finally:
    On Error GoTo 0
    Set GetBGDocFromFullName = bgd
    Exit Function
   
Catch:
'    Dim e As New BGError
'    e.OnError
    Set bgd = Nothing
    Resume Finally
End Function

Public Sub UpdateEditBoxes(doc As Document)
    Set LatestDoc = doc
    Dim bgd As BGDoc
    Set bgd = GetBGDocFromDoc(doc)
    EditBoxFileName = CalculateTitle(bgd.saveFileName, bgd.dx)
    EditBoxFolder = CalculateTitle(bgd.saveFolder, bgd.dx)
    RefreshBackstage
End Sub

Private Sub App_DocumentChange()
    On Error Resume Next
    If ActiveDocument.fullName = ActiveDocument.attachedTemplate.fullName Then Exit Sub
    If ActiveDocument.attachedTemplate.name <> "BG Documentation.dotm" Then Exit Sub
    On Error GoTo 0
    
    Dim LatestDocFullName As String
    LatestDocFullName = ""
    On Error Resume Next
    LatestDocFullName = LatestDoc.fullName
    On Error GoTo 0
    
    '!!!LogDebug "Entering", "BGDocManager.App_DocumentChange"
    If LatestDoc Is Nothing Then
        ' Do Nothing
    ElseIf LatestDocFullName = "" Then
        ' Do Nothing
    ElseIf LatestDocFullName = ActiveDocument.fullName Then
        ' Do Nothing
    Else
        UpdateEditBoxes ActiveDocument
    End If

    
'    On Error GoTo NoDocuments
'    If Not ActiveDocument Is Nothing Then
'        'GetManager.Init "App_DocumentChange", ActiveDocument.fullName
'        'Xebug.Print Now, "ChangedTo: "; ActiveDocument.fullName
'    Else
'        'GetManager.Init "App_DocumentChange", "NoDocument"
'        'MsgBox "Last"
'    End If
'    On Error Resume Next
'
'ExitSub:
'    Exit Sub
'
'NoDocuments:
'    Resume ExitSub

End Sub

Private Sub App_DocumentOpen(ByVal doc As Document)
    '!!!LogDebug "Entering", "BGDocManager.App_DocumentOpen"
    'GetManager.Init "App_DocumentOpen", doc.fullName
End Sub

Private Sub App_NewDocument(ByVal doc As Document)
    'GetManager.Init "App_NewDocument", doc.fullName
End Sub

'Private Sub App_Quit()
'    '!!!LogDebug "Entering", "App_Quit"
'
'    'GetManager.Init "Quit", ""
'End Sub

Private Sub App_WindowActivate(ByVal doc As Document, ByVal Wn As Window)
    On Error Resume Next
    If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
    If doc.attachedTemplate.name <> "BG Documentation.dotm" Then Exit Sub
    On Error GoTo 0
    
    GetBGDocFromDoc(doc).SaveAction = ""
    
    '!!!LogDebug "Entering", "BGDocManager.App_WindowActivate"
    On Error Resume Next
    DocRibbon.ActivateTab "documentTab"
    '!!!SwitchTab "BG Documentation"
    On Error GoTo 0
    'GetManager.Init "App_WindowActivate", doc.fullName
End Sub

'Private Sub App_WindowDeactivate(ByVal doc As Document, ByVal Wn As Window)
'    On Error Resume Next
'    If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
'    If doc.attachedTemplate.name <> "BG Documentation.dotm" Then Exit Sub
'    On Error GoTo 0
'
'    '!!!LogDebug "Entering", "BGDocManager.App_WindowDeactivate"
'    Dim m As String
'    Dim bgd As BGDoc
'    m = "--->"
'
'    If Manager Is Nothing Then
'        If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
'        'm = InputBox("Manager is Nothing. How?", "BGDocManager.App_WindowDeactivate")
'        LogWarn "Manager Is Nothing. How: " & m, "BGDocManager.App_WindowDeactivate"
'        Stop
'    Else
'        Set bgd = GetManager.GetBGDocFromDoc(doc)
'        If bgd Is Nothing Then
'            If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
'            'm = InputBox("BGD is Nothing. How?", "BGDocManager.App_WindowDeactivate")
'            LogWarn "BGD is Nothing. How: " & m, "BGDocManager.App_WindowDeactivate"
'        Else
''            If bgd.DocumentBeforeClose Then
''                'm = InputBox("DocumentBeforeClose. How?", "BGDocManager.App_WindowDeactivate")
''                LogInfo "DocumentBeforeClose, SaveAsUI is" & bgd.SaveAsUI & " How: " & m, "BGDocManager.App_WindowDeactivate"
''                bgd.DocumentBeforeClose = False
''                bgd.DocumentBeforeSave = False
''                bgd.SaveAsUI = False
''            ElseIf bgd.DocumentBeforeSave Then
''                'm = InputBox("DocumentBeforeSave. How?", "BGDocManager.App_WindowDeactivate")
''                LogInfo "DocumentBeforeSave. How: " & m, "BGDocManager.App_WindowDeactivate"
''                bgd.DocumentBeforeClose = False
''                bgd.DocumentBeforeSave = False
''                bgd.SaveAsUI = False
''            Else
''                'LogInfo "Exciting", "BGDocManager.App_WindowDeactivate"
''            End If
'        End If
'    End If
'
'
'    'GetManager.Init "App_WindowDeactivate", doc.fullName
'End Sub

Public Function Count() As Integer
    Count = BGDocs.Count
End Function

'Public Function SaveDoc(fullName As String, Optional saveAs As String = "") As String
'    Dim bgd As BGDoc
'    Dim doc As Document
'
'    If BGDocs.Exists(fullName) Then
'        Set bgd = BGDocs(fullName)
'        Set doc = bgd.ThisDoc
'        If doc.Saved And saveAs = "" Then
'            SaveDoc = "NotFound"
'        ElseIf saveAs = "" Then
'            doc.Save
'            SaveDoc = ""
'        Else
'            doc.SaveAs2 saveAs
'            SaveDoc = ""
'        End If
'    Else
'        SaveDoc = "NotFound"
'    End If
'End Function

Private Function SkipSave(doc As Document) As Boolean
    Dim Skip As Boolean
    Skip = False
    ' Skip if another template or is template itself
    Dim attachedTemplate As String
    attachedTemplate = ""
    On Error Resume Next
    attachedTemplate = doc.attachedTemplate
    On Error GoTo 0
    If Not LCase(attachedTemplate) Like "bg documentation.dotm" Then
        Skip = True
    ElseIf LCase(doc.name) Like "*.dot?" Then
        Skip = True
    End If
    SkipSave = Skip

End Function

Private Sub App_DocumentBeforeClose(ByVal doc As Document, Cancel As Boolean)
    On Error Resume Next
    If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
    If doc.attachedTemplate.name <> "BG Documentation.dotm" Then Exit Sub
    On Error GoTo 0

    '!!!LogDebug "Entering", "BGDocManager.App_DocumentBeforeClose"
    If doc.saved Then Exit Sub

    Dim bgd As BGDoc
    Set bgd = GetManager.GetBGDocFromDoc(doc)
    
    ' TODO: Get Proposed FileName and folder
'    bgd.SaveFileName = doc.name
'
'    DoEvents
'    If ActiveDocument.name = ActiveDocument.fullName Then
'        SaveDontSaveCancel "NewClose", bgd.SaveFileName
'    Else
'        SaveDontSaveCancel "OpenClose", bgd.SaveFileName
'    End If
'
    '!!!LogDebug "Save method: " & SaveDontSaveCancelAnswer, "BGDocManager.App_DocumentBeforeClose"
    
    Select Case SaveDontSaveCancelAnswer
    Case "Cancel"
        Cancel = True
    Case "DontSave"
        Cancel = False
        On Error Resume Next
        If Not doc Is Nothing Then doc.saved = True
        On Error GoTo 0
    Case "Save"
        Cancel = False
        doc.Save
    Case "SaveTemp"
        Cancel = True
        bgd.SaveAction = "Temporary"
        ' TODO: Handle temporary save
    
    Case "SaveAs"
        Cancel = True
        ' Handle permanent save
        bgd.SaveAction = "Permanent"
'        bgd.DocumentBeforeSave = False
'        bgd.DocumentBeforeClose = True
'        bgd.SaveAsUI = False

        '!!ExStopTimer
        '!!ExDone = True
        '!!ExSubToCall = "WaitAndSaveAs"

        '!!!LogDebug "Run WaitAndSaveAs after setting ExCloseAfterSave"
        '!!Set TimerDoc = ActiveDocument
        '!!ExLoops = 0
        '!!ExMaxLoops = 1
        '!!ExDone = False
        '!!ExStartTimer 500
    
    End Select
    Set bgd = Nothing
    
End Sub



'Private Sub App_DocumentBeforeClose(ByVal doc As Document, Cancel As Boolean)
'    '!!!LogDebug "SkipSave: " & SkipSave(doc), "App_DocumentBeforeClose"
'    If SkipSave(doc) Then Exit Sub
'
'    If doc.Saved Then
'        If doc.CanCheckin Then
'            Exit Sub
''            If vbOK = MsgBox("The document is checked out. Do you wan't to check it in?", vbOKCancel + vbQuestion, "Closing document") Then
''                Exit Sub
''            Else
''                Cancel = True
''                Exit Sub
''            End If
'        Else
'            Exit Sub
'        End If
'    End If
'
'    Dim bgd As BGDoc
'    Set bgd = GetBGDocFromDoc(doc)
'    ' Handle save
'    Dim SavedCancel As Boolean
'    Dim ByRefCancel As Boolean
'    Dim SavedSaveAsUI As Boolean
'    Dim ByRefSaveAsUI As Boolean
'    SavedCancel = Cancel
'    ByRefCancel = SavedCancel
'    SavedSaveAsUI = (doc.FullName = doc.name)
'    ByRefSaveAsUI = SavedSaveAsUI
'
'    bgd.HandleSave "DocumentBeforeClose", ByRefCancel, ByRefSaveAsUI
'
'    Debug.Print "BeforeClose.ByRefCancel: "; ByRefCancel
'
'    Cancel = ByRefCancel
'    Set bgd = Nothing
'
'End Sub

'Private Sub SetDocumentSaving(doc As Word.Document, Optional withState As String = "")
'    ExSaveState = withState
'    Debug.Print Now, "ExSaveState = "; ExSaveState
'    If ExSaveState Like "*SaveAsUI*" Then
'        ExSubToCall = "DocumentSaving"
'        ExLoops = 0
'        ExMaxLoops = 20
'        ExStartTimer 50
'        ExDone = False
'        Set TimerDoc = doc
'    Else
'        If Not ExSaveState Like "Saved" Then
'            Debug.Print Now, "Prepare save"
'        Else
'            Debug.Print Now, "Already saved"
'        End If
'    End If
'End Sub

'Private Sub App_DocumentBeforeSave(ByVal doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
'    On Error Resume Next
'    If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
'    If doc.attachedTemplate.name <> "BG Documentation.dotm" Then Exit Sub
'    On Error GoTo 0
'    'Debug.Print Now, "App_DocumentBeforeSave"
'
'    ' Skip if AutoSave
'    Dim inAutoSave As Boolean
'    inAutoSave = False
'    On Error Resume Next
'    inAutoSave = doc.IsInAutosave
'    On Error GoTo 0
'    If inAutoSave Then Exit Sub
'    On Error Resume Next
'    inAutoSave = WordBasic.IsAutoSaveEvent
'    On Error GoTo 0
'    If inAutoSave Then Exit Sub
'
'    Dim bgd As BGDoc
'    Set bgd = GetBGDocFromDoc(doc)
'
'    '!!!LogDebug "SaveAsUi: " & SaveAsUI & ", Cancel: " & Cancel, "BGDocManager.App_DocumentBeforeSave"
'    Exit Sub
'
'    bgd.PrepareSave
'
'
'
'    '!!!LogDebug "SaveAsUi: " & SaveAsUI & ", Cancel: " & Cancel, "BGDocManager.App_DocumentBeforeSave"
'    If doc.Saved Then
'        If doc.CanCheckin Then
'            If SaveAsUI Then
'                SetDocumentSaving doc, "Saved|CanCheckin|SaveAsUI"
'                Exit Sub
'            Else 'No SaveAsUI
'                SetDocumentSaving doc, "Saved|CanCheckin"
'                Exit Sub
'            End If
'        Else ' Cannot CheckIn
'            If SaveAsUI Then ' SaveAs Save Button
'                SetDocumentSaving doc, "Saved|SaveAsUI"
'                Exit Sub
'            Else ' No SaveAsUI
'                SetDocumentSaving doc, "Saved"
'                Exit Sub
'            End If
'        End If
'    Else ' NotSaved
'        If doc.CanCheckin Then
'            If SaveAsUI Then
'                SetDocumentSaving doc, "CanCheckin|SaveAsUI"
'                Exit Sub
'            Else 'No SaveAsUI
'                SetDocumentSaving doc, "CanCheckin"
'            End If
'        Else ' Cannot CheckIn
'            If SaveAsUI Then ' SaveAs Save Button
'                SetDocumentSaving doc, "SaveAsUI"
'                Exit Sub
'            Else ' No SaveAsUI. Standard save
'                SetDocumentSaving doc, ""
'                Exit Sub
'            End If
'        End If
'    End If
'
'
'
'End Sub


'Private Sub App_DocumentBeforeSave(ByVal doc As Document, SaveAsUi As Boolean, Cancel As Boolean)
'    '!!!LogDebug "SaveAsUi: " & SaveAsUi & ", Cancel: " & Cancel, "App_DocumentBeforeSave"
'
'    ' Skip if AutoSave
'    Dim inAutoSave As Boolean
'    inAutoSave = False
'    On Error Resume Next
'    inAutoSave = doc.IsInAutosave
'    On Error GoTo 0
'    If inAutoSave Then Exit Sub
'    On Error Resume Next
'    inAutoSave = WordBasic.IsAutoSaveEvent
'    On Error GoTo 0
'    If inAutoSave Then Exit Sub
'    If SkipSave(doc) Then Exit Sub
'    If SaveAsUi Then ' SaveAsUI or MajorMinor shown
'        ExSubToCall = "DocumentSaving"
'        ExLoops = 0
'        ExMaxLoops = 10
'        ExStartTimer 50
'        ExDone = False
'        Set TimerDoc = doc
'        Exit Sub
'    End If
'
'    Exit Sub
'
'    If doc.Saved Then
'        If doc.CanCheckin And Not SaveAsUi Then
'            Stop
''            MsgBox "CheckIn?"
''            Cancel = True
''            Exit Sub
'        ElseIf SaveAsUi Then
'            Stop
'            ' HandleSave
'        Else
'            Stop
''            Exit Sub
'        End If
'    Else
'        'Stop
'        Exit Sub
'    End If
'
'    Dim bgd As BGDoc
'    Set bgd = GetBGDocFromDoc(doc)
'    If bgd.InSave Then Exit Sub
'
'    Dim SavedCancel As Boolean
'    Dim ByRefCancel As Boolean
'    Dim SavedSaveAsUI As Boolean
'    Dim ByRefSaveAsUI As Boolean
'    SavedCancel = Cancel
'    ByRefCancel = SavedCancel
'    SavedSaveAsUI = SaveAsUi
'    ByRefSaveAsUI = SavedSaveAsUI
'
'    bgd.HandleSave "DocumentBeforeSave", ByRefCancel, ByRefSaveAsUI
'    Cancel = ByRefCancel
'
'    'SaveAsUi = ByRefSaveAsUI
'    'Xebug.Print "BeforeSave.ByRefCancel: "; ByRefCancel
'    Set bgd = Nothing
'End Sub

Attribute VB_Name = "BGPicture"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public CollectionRange As Range
Public doc As Document
Public key As String
Public IsPictureOrObject As Boolean
Public HasPictureFormat As Boolean
Public HasCrop As Boolean
Public HasPictureFormatCrop As Boolean
Public HasPictureFormatCropTopLeft As Boolean
Public Disk As String
Public ShapeType As String
Public WordFile As String
Public Selected As Boolean
Public TypeOfPicture As PictureType
Public Missing As Boolean
Public SaveAs As String
Public MaybeFoundAt As String
Public SourceDate As Date
Public OutOfDate As Boolean
Public Range As Range
Public Hyperlink As Hyperlink
Public IsLinked As Boolean
Public LinkType As String
Public InvalidLink As Boolean
Public LinkFormat As LinkFormat
Public InlineShape As InlineShape
Public SavePictureWithDocument As Boolean
Public Shape As Shape
Public image As image
Public title As String
Public SourcePath As String
Public SourceName As String
Public sourceFullName As String
Public SourceExtension As String
Public AlternativeText As String
Public HyperlinkAddress As String
Public HyperlinkText As String
Public page As Integer
Public INLIndex As Integer
Public SHPIndex As Integer
Public IsField As Boolean
Public field As field
Public FieldCode As String
Public FieldCount As Integer
Public caption As String

Public RangeStart As Long
Public RangeEnd As Long

Public Top As Single
Public Left As Single

Public Height As Single
Public Width As Single
Public CropLeft As Single
Public CropTop As Single
Public CropRight As Single
Public CropBottom As Single
Public Brightness As Single
Public Contrast As Single
Public Rotation As Single
Public ColorType As MsoPictureColorType

Public LockAspectRatio As MsoTriState
Public LineVisible As MsoTriState
Public LineTransparency As Single
Public LineWeight As Single

Public FillVisible As MsoTriState
Public FillTransparency As Single
Public FillBackColor As ColorFormat
Public FillForeColor As ColorFormat

Public CropPictureHeight As Single
Public CropPictureOffsetX As Single
Public CropPictureOffsetY As Single
Public CropPictureWidth As Single
Public CropShapeHeight As Single
Public CropShapeLeft As Single
Public CropShapeTop As Single
Public CropShapeWidth As Single

Public FoundFile As String
Public HasAutoUpdate As Boolean
Public AutoUpdate As Boolean
Public LinkFormatType As WdLinkType

Public RelativeVerticalPosition As WdRelativeVerticalPosition
Public RelativeHorizontalPosition As WdRelativeHorizontalPosition
Public RelativeVerticalSize As WdRelativeVerticalSize
Public RelativeHorizontalSize As WdRelativeHorizontalSize

Public IsEmbed As Boolean

Private Function ReadInline(dx As docXML, Optional doFindFile As Boolean = False, Optional findPage As Boolean = False, Optional findCaption As Boolean = False, Optional force As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As InlineShape
    Dim fld As field
    Dim rng As Range
    Dim rngCaption As Range
    Dim resumeAt As String

    Set shp = InlineShape ' CollectionRange.InlineShapes(INLIndex)
    Set rng = shp.Range.Duplicate
    RangeStart = shp.Range.start
    RangeEnd = shp.Range.End
    Set Range = rng
    
    IsPictureOrObject = InlineIsPictureOrObject(shp)
    If Not shp.LinkFormat Is Nothing Then
        Me.IsLinked = True
        Me.LinkFormat = shp.LinkFormat
        If Me.FoundFile = "" Or doFindFile Then
            If force Then
                shp.Range.fields.Update
                If rng.InlineShapes.Count > 0 Then
                    Set shp = rng.InlineShapes(1)
                    Set Me.InlineShape = shp
                    Set rng = shp.Range.Duplicate
                    RangeStart = shp.Range.start
                    RangeEnd = shp.Range.End
                    Set Range = rng
                Else
                    Set shp = Nothing
                    ReadInline = False
                    Exit Function
                End If
            End If
            If Not shp Is Nothing Then
                Me.sourceFullName = shp.LinkFormat.sourceFullName
                Me.SourceName = shp.LinkFormat.SourceName
                Me.SourcePath = shp.LinkFormat.SourcePath
                Me.SavePictureWithDocument = shp.LinkFormat.SavePictureWithDocument
                Me.LinkFormatType = shp.LinkFormat.Type
                Me.HasAutoUpdate = True
                Me.AutoUpdate = False
                On Error Resume Next
                Me.AutoUpdate = shp.LinkFormat.AutoUpdate
                If Err.Number > 0 Then
                    Me.HasAutoUpdate = False
                Else
                    Me.HasAutoUpdate = True
                End If
            End If
            On Error GoTo Failed
        End If
    Else
        Me.IsLinked = False
        Me.sourceFullName = ""
        Me.SourceName = ""
        Me.SourcePath = ""
        Me.SavePictureWithDocument = True
        Me.LinkFormatType = 0
        Me.HasAutoUpdate = False
        Me.AutoUpdate = False
    End If
    
    If findPage Then
        Me.page = shp.Range.Information(wdActiveEndPageNumber)
    End If
    
    If findCaption Then
        On Error Resume Next
        Set rngCaption = Nothing
        Set rngCaption = rng.Paragraphs.Last.Next.Range
        On Error GoTo Failed
        If Not rngCaption Is Nothing Then
            If rngCaption.Parent.Styles(rngCaption.Style) = rngCaption.Parent.Styles(wdStyleCaption) Then
                Me.caption = Replace(Replace(rngCaption.Text, vbTab, " "), vbCr, "")
            End If
        End If
    End If
    Me.AlternativeText = shp.AlternativeText
    Me.Disk = "Embedded"
    If Me.sourceFullName > "" Then
        If Me.LinkFormat.SavePictureWithDocument Then
            Me.Disk = "Linked and embedded. Not checked"
        Else
            Me.Disk = "Linked only!. Not checked"
        End If
    End If
    If doFindFile And Me.sourceFullName > "" Then
        Me.FoundFile = findFile(sourceFullName)
        If Me.FoundFile = "" And Not rng Is Nothing Then
            For Each fld In rng.fields
'                If fld.Type = wdFieldIncludePicture Then
'                    Debug.Print "wdFieldIncludePicture ", Trim(fld.code) ' , GetFileNameFromCode(fld.code), FindFile(GetFileNameFromCode(fld.code))
'                ElseIf fld.Type = wdFieldEmbed Then
'                    Debug.Print "wdFieldEmbed          ", Trim(fld.code) ' , GetFileNameFromCode(fld.code), FindFile(GetFileNameFromCode(fld.code))
'                ElseIf fld.Type = wdFieldShape Then
'                    Debug.Print "wdFieldShape          ", Trim(fld.code)
'                Else
'                    Debug.Print fld.Type, Trim(fld.code)
'                End If
                Me.FoundFile = findFile(GetFileNameFromCode(fld.code))
                If Me.FoundFile > "" Then
                    Exit For
                End If
            Next
        End If
        If Me.FoundFile = "" And Not rng Is Nothing Then
            If InStr(sourceFullName, "/") > 0 Then
                Me.FoundFile = FindDocumentationFile(Replace(sourceFullName, "/", "\"), shp.Parent.Path)
            End If
        End If
        If Me.FoundFile = "" And Not rng Is Nothing Then
            Me.FoundFile = FindDocumentationFile(sourceFullName, shp.Parent.Path)
        End If
        
        If Me.FoundFile = "" And Me.SavePictureWithDocument = False Then
            Me.Disk = "Missing in document and on disk!"
        ElseIf Me.FoundFile = "" Then
            Me.Disk = "Missing on disk!"
        Else
            Dim dtFile As Date
            dtFile = GetFileDate(Me.FoundFile)
            Me.SourceDate = dtFile
            If dtFile > dx.OrgFileDate Then
                OutOfDate = True
                '!!Me.AlternativeText = UpdateAlternativeText(Me.InlineShape.AlternativeText, "OutOfDate", UTCTime(Now))
            Else
                OutOfDate = False
            End If
            Dim dtLastSaved As Date
            Dim dtUpdated As Date
            Dim saved As Boolean
            saved = True
            dtLastSaved = shp.Range.Parent.BuiltInDocumentProperties(12)
            dtUpdated = GetTime(Me.AlternativeText, "Updated")
            If dtLastSaved < dtUpdated Then
                dtLastSaved = dtUpdated
            End If
            If dtLastSaved < #1/1/1950# Then
                saved = False
                dtLastSaved = Now - 0.5
            End If
            If dtFile = #12:00:00 PM# Then
                Me.Disk = "Error reading disk."
            ElseIf Me.SavePictureWithDocument = False Then
                Me.Disk = "Linked only!"
            ElseIf dtFile < dtLastSaved Then
                Me.Disk = "Embedded and linked"
            ElseIf Format(dtFile, "YYYY-MM-DD") = Format(Now, "YYYY-MM-DD") Then
                Me.Disk = "Edited Today " & Format(dtFile, "HH:mm")
            ElseIf Format(dtFile + 1, "YYYY-MM-DD") = Format(Now, "YYYY-MM-DD") Then
                Me.Disk = "Edited Yesterday " & Format(dtFile, "HH:mm")
            Else
                Me.Disk = "Edited " & Format(dtFile, "YYYY-MM-DD HH:mm")
            End If
        End If
        Me.AlternativeText = UpdateAlternativeText(Me.AlternativeText, "Checked")
    End If
    'Me.InlineShape.Reset
ExitIt:
    On Error GoTo 0
    ReadInline = ok
    Exit Function
   
Failed:
    Select Case Err.Number
    Case 91 'Object variable or With block variable not set
        Resume Next
    Case 4198 'Command failed
        Resume Next
    Case 5825: 'Object has been deleted.
        Resume Next
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Stop
        Resume Next
        ok = False
        Resume ExitIt
    End Select
End Function

Private Function ReadShape(dx As docXML, Optional doFindFile As Boolean = False, Optional findPage As Boolean = False, Optional findCaption As Boolean = False, Optional force As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Shape
    Dim fld As field
    Dim rng As Range
    Dim rngCaption As Range
    Dim resumeAt As String

    Set shp = Shape 'CollectionRange.ShapeRange(SHPIndex)
    Set rng = shp.Anchor.Duplicate
    RangeStart = shp.Anchor.start
    RangeEnd = shp.Anchor.End
    Set Range = rng
    
    IsPictureOrObject = ShapeIsPictureOrObject(shp)
    
    If Not shp.LinkFormat Is Nothing Then
        IsLinked = True
        If Me.FoundFile = "" Then
            If force Then
                shp.Anchor.fields.Update
            End If
            Me.sourceFullName = shp.LinkFormat.sourceFullName
            Me.SourceName = shp.LinkFormat.SourceName
            Me.SourcePath = shp.LinkFormat.SourcePath
            Me.SavePictureWithDocument = shp.LinkFormat.SavePictureWithDocument
            Me.LinkFormatType = shp.LinkFormat.Type
            Me.HasAutoUpdate = True
            Me.AutoUpdate = False
            On Error Resume Next
            Me.AutoUpdate = shp.LinkFormat.AutoUpdate
            If Err.Number > 0 Then
                Me.HasAutoUpdate = False
            Else
                Me.HasAutoUpdate = True
            End If
            On Error GoTo Failed
        End If
    Else
        Me.IsLinked = False
        Me.sourceFullName = ""
        Me.SourceName = ""
        Me.SourcePath = ""
        Me.SavePictureWithDocument = True
        Me.LinkFormatType = 0
        Me.HasAutoUpdate = False
        Me.AutoUpdate = False
    End If
    
    If findPage Then
        Me.page = shp.Anchor.Information(wdActiveEndPageNumber)
    End If
    
    If findCaption Then
        On Error Resume Next
        Set rngCaption = Nothing
        Set rngCaption = rng.Paragraphs.Last.Next.Range
        On Error GoTo Failed
        If Not rngCaption Is Nothing Then
            If rngCaption.Parent.Styles(rngCaption.Style) = rngCaption.Parent.Styles(wdStyleCaption) Then
                Me.caption = Replace(Replace(rngCaption.Text, vbTab, " "), vbCr, "")
            End If
        End If
    End If
    
    Me.AlternativeText = shp.AlternativeText
    Me.Disk = "Embedded"
    If Me.sourceFullName > "" Then
        If Me.LinkFormat.SavePictureWithDocument Then
            Me.Disk = "Embedded and linked. Not checked"
        Else
            Me.Disk = "Linked only!. Not checked"
        End If
    End If
    If doFindFile And Me.sourceFullName > "" Then
        Me.FoundFile = findFile(sourceFullName)
        If Me.FoundFile = "" Then
            For Each fld In rng.fields
'                If fld.Type = wdFieldIncludePicture Then
'                    Debug.Print "wdFieldIncludePicture ", Trim(fld.code) ' , GetFileNameFromCode(fld.code), FindFile(GetFileNameFromCode(fld.code))
'                ElseIf fld.Type = wdFieldEmbed Then
'                    Debug.Print "wdFieldEmbed          ", Trim(fld.code) ' , GetFileNameFromCode(fld.code), FindFile(GetFileNameFromCode(fld.code))
'                ElseIf fld.Type = wdFieldShape Then
'                    Debug.Print "wdFieldShape          ", Trim(fld.code)
'                Else
'                    Debug.Print fld.Type, Trim(fld.code)
'                End If
                Me.FoundFile = findFile(GetFileNameFromCode(fld.code))
                If Me.FoundFile > "" Then
                    Exit For
                End If
            Next
        End If
        If Me.FoundFile = "" Then
            If InStr(sourceFullName, "/") > 0 Then
                Me.FoundFile = FindDocumentationFile(Replace(sourceFullName, "/", "\"), shp.Parent.Path)
            End If
        End If
        If Me.FoundFile = "" Then
            Me.FoundFile = FindDocumentationFile(sourceFullName, shp.Parent.Path)
        End If

        If Me.FoundFile = "" And Me.SavePictureWithDocument = False Then
           Me.Disk = "Missing in document and on disk!"
        ElseIf Me.FoundFile = "" Then
            Me.Disk = "Missing on disk!"
        Else
            Dim dtFile As Date
            dtFile = GetFileDate(Me.FoundFile)
            If dtFile > dx.OrgFileDate Then
                OutOfDate = True
                '!!Me.AlternativeText = UpdateAlternativeText(Me.AlternativeText, "OutOfDate", UTCTime(Now))
            Else
                OutOfDate = False
            End If
            Dim dtLastSaved As Date
            Dim dtUpdated As Date
            Dim saved As Boolean
            saved = True
            dtLastSaved = shp.Anchor.Parent.BuiltInDocumentProperties(12)
            dtUpdated = GetTime(Me.AlternativeText, "Updated")
            If dtLastSaved < dtUpdated Then
                dtLastSaved = dtUpdated
            End If
            If dtLastSaved < #1/1/1950# Then
                saved = False
                dtLastSaved = Now - 0.5
            End If
            If dtFile = #12:00:00 PM# Then
                Me.Disk = "Error reading disk."
            ElseIf Me.SavePictureWithDocument = False Then
                Me.Disk = "Linked only!"
            ElseIf dtFile < dtLastSaved Then
                Me.Disk = "Embedded and linked"
            ElseIf Format(dtFile, "YYYY-MM-DD") = Format(Now, "YYYY-MM-DD") Then
                Me.Disk = "Edited Today " & Format(dtFile, "HH:mm")
            ElseIf Format(dtFile + 1, "YYYY-MM-DD") = Format(Now, "YYYY-MM-DD") Then
                Me.Disk = "Edited Yesterday " & Format(dtFile, "HH:mm")
            Else
                Me.Disk = "Edited " & Format(dtFile, "YYYY-MM-DD HH:mm")
            End If
        End If
        Me.AlternativeText = UpdateAlternativeText(Me.AlternativeText, "Checked")
    End If

ExitIt:
    On Error GoTo 0
    ReadShape = ok
    Exit Function
    
Failed:
    Select Case Err.Number
    Case 91 'Object variable or With block variable not set
        Resume Next
    Case 4198 'Command failed
        Resume Next
    Case 5825: 'Object has been deleted.
        Resume Next
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Stop
        Resume Next
        ok = False
        Resume ExitIt
    End Select
End Function

Public Function Read(dx As docXML, Optional findFile As Boolean = True, Optional findPage As Boolean = False, Optional findCaption As Boolean = False, Optional force As Boolean = False) As Boolean
    If Me.TypeOfPicture = PictureType.InlineType Then
        ShapeType = "Inline"
        Read = ReadInline(dx, findFile, findPage, findCaption, force)
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        ShapeType = "Shape"
        Read = ReadShape(dx, findFile, findPage, findCaption, force)
'    ElseIf Me.TypeOfPicture = PictureType.Embed Then
'        ShapeType = "Embed"
'        Read = ReadEmbed
    Else
        Read = False
    End If
    
    
End Function

Public Sub AddIDInAltText(dx As docXML)
On Error GoTo Failed
  Dim rng As Range

' Insert Error Handling
    If Me.TypeOfPicture = PictureType.InlineType Then
        InlineShape.AlternativeText = InlineShape.AlternativeText & "[ID:" & key & "]"
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Shape.AlternativeText = Shape.AlternativeText & "[ID:" & key & "]"
    Else
        Stop
    End If
    On Error GoTo 0
    Exit Sub
    
ResumeUnknown:
    On Error GoTo UnableToDeletePicture
    dx.AddError "Search for text '[[Unknown Error]]' in converted document:" & key & ", " & Me.SaveAs & ". Orginal may need to be fixed."
    If Me.TypeOfPicture = PictureType.InlineType Then
        Set rng = InlineShape.Range.Duplicate
        InlineShape.Delete
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set rng = InlineShape.Range.Duplicate
        Shape.Delete
    End If
    rng.Text = "[[Unknown Error]]"
    Exit Sub
    
ResumeFailed:
    On Error GoTo UnableToDeletePicture
    dx.AddError "Search for text '[[Deleted picture]]' in converted document:" & key & ", " & Me.SaveAs & ". Orginal may need to be fixed."
    If Me.TypeOfPicture = PictureType.InlineType Then
        Set rng = InlineShape.Range.Duplicate
        InlineShape.Delete
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set rng = InlineShape.Range.Duplicate
        Shape.Delete
    End If
    rng.Text = "[[Deleted picture]]"
    Exit Sub
    
UnableToDeletePicture:
    On Error GoTo 0
    dx.AddError "Search for text '[[Unable to delete picture]]' in converted document:" & key & ", " & Me.SaveAs & ". Orginal may need to be fixed."
    rng.Collapse wdCollapseStart
    rng.Text = "[[Unable to delete picture]]"
    Exit Sub
Failed:
    Select Case Err.Number
    Case 4198
        Resume ResumeFailed
    Case Else
        Resume ResumeUnknown
    End Select

End Sub

Public Function ReadFormat() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim ishp As InlineShape
    Dim sShp As Shape
    
    Dim fld As field
    Dim rng As Range
    Dim resumeAt As String

    HasPictureFormat = True
    HasCrop = True
    HasPictureFormatCrop = True
    HasPictureFormatCropTopLeft = True

    If Me.TypeOfPicture = PictureType.InlineType Then
        Set shp = Me.InlineShape
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set shp = Me.Shape
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    resumeAt = "Next"
    Me.LockAspectRatio = shp.LockAspectRatio
    Me.FillVisible = shp.Fill.visible
    Me.FillTransparency = shp.Fill.Transparency
    Me.LineWeight = shp.Line.Weight
    Me.LineTransparency = shp.Line.Transparency
    Me.LineVisible = shp.Line.visible
    Me.LockAspectRatio = shp.LockAspectRatio
    Me.Height = shp.Height
    Me.Width = shp.Width
    Me.AlternativeText = shp.AlternativeText
    
    If Me.TypeOfPicture = PictureType.ShapeType Then
        Me.Top = shp.Top
        Me.Left = shp.Left
        Me.RelativeHorizontalPosition = shp.RelativeHorizontalPosition
        Me.RelativeVerticalPosition = shp.RelativeVerticalPosition
        Me.RelativeHorizontalSize = shp.RelativeHorizontalSize
        Me.RelativeVerticalSize = shp.RelativeVerticalSize
        Me.Rotation = shp.Rotation
    End If
    
    resumeAt = "ResumeNoPictureFormat"
    If Not shp.PictureFormat Is Nothing Then
        resumeAt = "Next"
        Me.Brightness = shp.PictureFormat.Brightness
        Me.Contrast = shp.PictureFormat.Contrast
        Me.ColorType = shp.PictureFormat.ColorType
        resumeAt = "ResumeNoCrop"
        Me.CropLeft = shp.PictureFormat.CropLeft
        Me.CropRight = shp.PictureFormat.CropRight
        Me.CropTop = shp.PictureFormat.CropTop
        Me.CropBottom = shp.PictureFormat.CropBottom
ResumeNoCrop:
        resumeAt = "ResumeNoPictureFormatCrop"
        Me.CropPictureHeight = shp.PictureFormat.Crop.PictureHeight
        Me.CropPictureOffsetX = shp.PictureFormat.Crop.PictureOffsetX
        Me.CropPictureOffsetY = shp.PictureFormat.Crop.PictureOffsetY
        Me.CropPictureWidth = shp.PictureFormat.Crop.PictureWidth
        Me.CropShapeHeight = shp.PictureFormat.Crop.ShapeHeight
        Me.CropShapeWidth = shp.PictureFormat.Crop.ShapeWidth
        resumeAt = "ResumeNoPictureFormatCropTopLeft"
        Me.CropShapeLeft = shp.PictureFormat.Crop.ShapeLeft
        Me.CropShapeTop = shp.PictureFormat.Crop.ShapeTop
    End If
ResumeNoPictureFormat:
    resumeAt = ""
    ok = True
    
ExitIt:
    On Error GoTo 0
    ReadFormat = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case -2147024891, -2147024809, 438, 445
        'This member can only be accessed for a picture or an OLE object.
        'Operation is not supported by the current object
        'Object doesn't support this property or method,
        'Object doesn't support this action
        If resumeAt = "ResumeNoPictureFormat" Then
            HasPictureFormat = False
            HasCrop = False
            HasPictureFormatCrop = False
            HasPictureFormatCropTopLeft = False
            Resume ResumeNoPictureFormat
        ElseIf resumeAt = "ResumeNoCrop" Then
            HasCrop = False
            Resume ResumeNoCrop
        ElseIf resumeAt = "ResumeNoPictureFormatCrop" Then
            HasPictureFormatCrop = False
            HasPictureFormatCropTopLeft = False
            Resume ResumeNoPictureFormat
        ElseIf resumeAt = "ResumeNoPictureFormatCropTopLeft" Then
            HasPictureFormatCropTopLeft = False
            Resume ResumeNoPictureFormat
        ElseIf resumeAt = "Next" Then
            Resume Next
        Else
            Stop
        End If
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        ok = False
        Resume ExitIt
    End Select
End Function

Public Function WriteFormat(Optional ByVal bgpFrom As BGPicture = Nothing) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim fld As field
    Dim rng As Range
    Dim rngInsert As Range
    Dim resumeAt As String
    
    If Me.TypeOfPicture = PictureType.InlineType Then
        Set shp = InlineShape
        Set rng = shp.Range.Duplicate
        RangeStart = shp.Range.start
        RangeEnd = shp.Range.End
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set shp = Shape
        Set rng = shp.Anchor.Duplicate
        RangeStart = shp.Anchor.start
        RangeEnd = shp.Anchor.End
    ElseIf bgpFrom.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    
    If bgpFrom Is Nothing Then Set bgpFrom = Me
    
    If bgpFrom.TypeOfPicture = PictureType.ShapeType Then
        'Application.screenUpdating = True
        shp.RelativeHorizontalPosition = bgpFrom.RelativeHorizontalPosition
        shp.RelativeVerticalPosition = bgpFrom.RelativeVerticalPosition
        shp.RelativeHorizontalSize = bgpFrom.RelativeHorizontalSize
        shp.RelativeVerticalSize = bgpFrom.RelativeVerticalSize
        shp.Rotation = bgpFrom.Rotation
        'Application.screenUpdating = False
    End If
    
    
'    shp.Fill.Visible = bgpFrom.FillVisible
'    If bgpFrom.FillTransparency > -2147483640# Then shp.Fill.Transparency = bgpFrom.FillTransparency
'    If bgpFrom.LineWeight > -2147483640# Then shp.Line.Weight = bgpFrom.LineWeight
'    If bgpFrom.LineTransparency > -2147483640# Then shp.Line.Transparency = bgpFrom.LineTransparency
'    shp.Line.Visible = bgpFrom.LineVisible
'    shp.LockAspectRatio = bgpFrom.LockAspectRatio
    
    shp.LockAspectRatio = False
    shp.Height = bgpFrom.Height
    shp.Width = bgpFrom.Width

'    If bgpFrom.Top > -2147483640# Then shp.Top = bgpFrom.Top
'    If bgpFrom.Left > -2147483640# Then shp.Left = bgpFrom.Left

'    resumeAt = "Next"
    
    resumeAt = "ResumeNoPictureFormat"
    If bgpFrom.HasPictureFormatCrop And Me.HasPictureFormatCrop Then
        If bgpFrom.CropPictureHeight > -2147483640# Then shp.PictureFormat.Crop.PictureHeight = bgpFrom.CropPictureHeight
        If bgpFrom.CropPictureOffsetX > -2147483640# Then shp.PictureFormat.Crop.PictureOffsetX = bgpFrom.CropPictureOffsetX
        If bgpFrom.CropPictureOffsetY > -2147483640# Then shp.PictureFormat.Crop.PictureOffsetY = bgpFrom.CropPictureOffsetY
        If bgpFrom.CropPictureWidth > -2147483640# Then shp.PictureFormat.Crop.PictureWidth = bgpFrom.CropPictureWidth
        If bgpFrom.CropShapeHeight > -2147483640# Then shp.PictureFormat.Crop.ShapeHeight = bgpFrom.CropShapeHeight
        If bgpFrom.CropShapeWidth > -2147483640# Then shp.PictureFormat.Crop.ShapeWidth = bgpFrom.CropShapeWidth
        If bgpFrom.HasPictureFormatCropTopLeft And Me.HasPictureFormatCropTopLeft Then
            If bgpFrom.CropShapeLeft > -2147483640# Then shp.PictureFormat.Crop.ShapeLeft = bgpFrom.CropShapeLeft
            If bgpFrom.CropShapeTop > -2147483640# Then shp.PictureFormat.Crop.ShapeTop = bgpFrom.CropShapeTop
        End If
    ElseIf bgpFrom.HasPictureFormat And Me.HasPictureFormat Then
        shp.PictureFormat.Brightness = bgpFrom.Brightness
        shp.PictureFormat.Contrast = bgpFrom.Contrast
        shp.PictureFormat.ColorType = bgpFrom.ColorType
        If bgpFrom.CropLeft > -2147483640# Then shp.PictureFormat.CropLeft = bgpFrom.CropLeft
        If bgpFrom.CropTop > -2147483640# Then shp.PictureFormat.CropTop = bgpFrom.CropTop
        If bgpFrom.CropBottom > -2147483640# Then shp.PictureFormat.CropBottom = bgpFrom.CropBottom
        If bgpFrom.CropRight > -2147483640# Then shp.PictureFormat.CropRight = bgpFrom.CropRight
    End If

    shp.LockAspectRatio = Me.LockAspectRatio

ResumeNoPictureFormat:
    resumeAt = ""
    ok = True
    
ExitIt:
    On Error GoTo 0
    WriteFormat = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case -2147024891 'This member can only be accessed for a picture or an OLE object.
        If resumeAt = "ResumeNoPictureFormat" Then
            Resume ResumeNoPictureFormat
        Else
            Stop
        End If
    Case 438, 445 'Object doesn't support this property or method, 'Object doesn't support this action
        If resumeAt = "Next" Then
            Resume Next
        Else
            Stop
        End If
    Case -2147024809, 5 'Operation is not supported by the current object, 'Invalid procedure call or argument
        If resumeAt = "Next" Then
            Resume Next
        ElseIf resumeAt = "ResumeNoPictureFormat" Then 'The specified parameter has an invalid value.
            Resume Next
        Else
            Debug.Print vbTab & "Case " & Err.Number & " '" & Err.Description
            Stop
        End If
    Case Else
        Debug.Print vbTab & "Case " & Err.Number & " '" & Err.Description
        Stop
    End Select
End Function

Public Function ReApplyFormat() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim fld As field
    Dim rng As Range
    Dim rngInsert As Range
    Dim resumeAt As String
    
    If TypeOfPicture = PictureType.InlineType Then
        Set shp = InlineShape
        Set rng = shp.Range.Duplicate
    ElseIf TypeOfPicture = PictureType.ShapeType Then
        Set shp = Shape
        Set rng = shp.Anchor.Duplicate
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    
    shp.LockAspectRatio = False
    shp.Height = Height
    shp.Width = Width
    shp.AlternativeText = Me.AlternativeText

    resumeAt = "ResumeNoPictureFormat"
    If HasPictureFormatCrop And Me.HasPictureFormatCrop Then
        If CropPictureHeight > -2147483640# Then shp.PictureFormat.Crop.PictureHeight = CropPictureHeight
        If CropPictureOffsetX > -2147483640# Then shp.PictureFormat.Crop.PictureOffsetX = CropPictureOffsetX
        If CropPictureOffsetY > -2147483640# Then shp.PictureFormat.Crop.PictureOffsetY = CropPictureOffsetY
        If CropPictureWidth > -2147483640# Then shp.PictureFormat.Crop.PictureWidth = CropPictureWidth
        If CropShapeHeight > -2147483640# Then shp.PictureFormat.Crop.ShapeHeight = CropShapeHeight
        If CropShapeWidth > -2147483640# Then shp.PictureFormat.Crop.ShapeWidth = CropShapeWidth
        If HasPictureFormatCropTopLeft And Me.HasPictureFormatCropTopLeft Then
            If CropShapeLeft > -2147483640# Then shp.PictureFormat.Crop.ShapeLeft = CropShapeLeft
            If CropShapeTop > -2147483640# Then shp.PictureFormat.Crop.ShapeTop = CropShapeTop
        End If
    ElseIf HasPictureFormat And Me.HasPictureFormat Then
        resumeAt = "Next"
        shp.PictureFormat.Brightness = Brightness
        shp.PictureFormat.Contrast = Contrast
        shp.PictureFormat.ColorType = ColorType
        If CropLeft > -2147483640# Then shp.PictureFormat.CropLeft = CropLeft
        If CropTop > -2147483640# Then shp.PictureFormat.CropTop = CropTop
        If CropBottom > -2147483640# Then shp.PictureFormat.CropBottom = CropBottom
        If CropRight > -2147483640# Then shp.PictureFormat.CropRight = CropRight
    End If

    shp.LockAspectRatio = Me.LockAspectRatio

ResumeNoPictureFormat:
    resumeAt = ""
    ok = True
    
ExitIt:
    On Error GoTo 0
    ReApplyFormat = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case -2147024891 'This member can only be accessed for a picture or an OLE object.
        If resumeAt = "ResumeNoPictureFormat" Then
            Resume ResumeNoPictureFormat
        Else
            Stop
        End If
    Case 438, 445 'Object doesn't support this property or method, 'Object doesn't support this action
        If resumeAt = "Next" Then
            Resume Next
        Else
            Stop
        End If
    Case -2147024809 'Operation is not supported by the current object
        If resumeAt = "Next" Then
            Resume Next
        Else
            Stop
        End If
    Case 5 'Invalid procedure call or argument
        If resumeAt = "Next" Then
            Resume Next
        Else
            Debug.Print vbTab & "Case " & Err.Number & " '" & Err.Description
            Stop
        End If
    Case Else
        Debug.Print vbTab & "Case " & Err.Number & " '" & Err.Description
        Stop
    End Select
End Function


Public Function BreakLink() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim fld As field
    Dim rng As Range
    Dim rngInsert As Range
    
    Dim resumeAt As String

    If Me.TypeOfPicture = PictureType.InlineType Then
        Set shp = InlineShape
        Set rng = shp.Range.Duplicate
        RangeStart = shp.Range.start
        RangeEnd = shp.Range.End
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set shp = Shape
        Set rng = shp.Anchor.Duplicate
        RangeStart = shp.Anchor.start
        RangeEnd = shp.Anchor.End
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    
    
    If (Me.sourceFullName > "" And Me.FoundFile = "") Then
        Dim tempImageName As String
        Dim inlDelete As InlineShape
        Dim rngDelete As Range
        If Me.TypeOfPicture = PictureType.InlineType Then
            Set rngInsert = shp.Range.Duplicate
            Set rngDelete = shp.Range.Duplicate
            tempImageName = WriteToTemporaryPictureFile()
            rngDelete.Delete
            Set shp = rngInsert.InlineShapes.AddPicture(tempImageName, False, True, rngInsert)
        ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
            Set rngInsert = shp.Anchor.Duplicate
            Set rngDelete = shp.Anchor.Duplicate
            tempImageName = WriteToTemporaryPictureFile()
            rngDelete.Delete
            Dim inl As InlineShape
            Set inl = rngInsert.InlineShapes.AddPicture(tempImageName, False, True, rngInsert)
            Set shp = inl.ConvertToShape
        End If
        KillFilesAndFolder tempImageName
    Else
        If Not shp.LinkFormat Is Nothing Then
            shp.LinkFormat.BreakLink
        End If
    End If
    sourceFullName = ""
    SourceExtension = ""
    SourceName = ""
    SourcePath = ""
    
    If Me.TypeOfPicture = PictureType.InlineType Then
        Set InlineShape = shp
        Set rng = shp.Range.Duplicate
        Set Range = rng
        RangeStart = shp.Range.start
        RangeEnd = shp.Range.End
        ok = Me.ReApplyFormat
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set Shape = shp
        Set rng = shp.Anchor.Duplicate
        Set Range = rng
        RangeStart = shp.Anchor.start
        RangeEnd = shp.Anchor.End
        ok = Me.ReApplyFormat
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    Else
        ok = True
    End If
    
    
ExitIt:
    On Error GoTo 0
    BreakLink = ok
    Exit Function

Failed:
    Select Case Err.Number
'    Case -2147024891 'This member can only be accessed for a picture or an OLE object.
'        If resumeAt = "ResumeNoPictureFormat" Then
'            Resume ResumeNoPictureFormat
'        Else
'            Stop
'        End If
'    Case 438, 445 'Object doesn't support this property or method, 'Object doesn't support this action
'        If resumeAt = "Next" Then
'            Resume Next
'        Else
'            Stop
'        End If
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        ok = False
        Resume ExitIt
    End Select
End Function

Public Function ResizePercent(percentSize As Integer) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim resumeAt As String

    If Me.TypeOfPicture = PictureType.InlineType Then
        Set shp = InlineShape ' CollectionRange.InlineShapes(INLIndex)
         shp.ScaleHeight = percentSize
         shp.ScaleWidth = percentSize
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set shp = Shape 'CollectionRange.ShapeRange(SHPIndex)
         shp.ScaleHeight Factor:=(percentSize / 100), RelativeToOriginalSize:=msoCTrue
         shp.ScaleWidth Factor:=(percentSize / 100), RelativeToOriginalSize:=msoCTrue
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    
    resumeAt = ""
    ok = True
    
ExitIt:
    On Error GoTo 0
    ResizePercent = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        ok = False
        Resume ExitIt
    End Select
 End Function

Public Sub KillFilesAndFolder(strFullName As String)
    Dim filesFolder As String
    
    If strFullName > "" Then
        filesFolder = Mid(strFullName, 1, InStrRev(strFullName, "\"))
        Kill filesFolder & "*.*"
        RmDir filesFolder
        Kill Mid(strFullName, 1, InStrRev(strFullName, "_files") - 1) & ".htm"
    End If
End Sub



Public Function WriteToTemporaryPictureFile() As String
On Error GoTo Failed
    
    Dim filesFolder As String
    Dim lWritePos As Long
    Dim vData() As Byte
    Dim prefix As String
    Dim inl As InlineShape
    Dim shp As Shape
    Dim inlNew As InlineShape
    Dim shpNew As Shape
    Dim newDoc As Document
    
    Dim tempFileName As String
    tempFileName = GetTempFile("pic", "htm")

    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Write To Temporary Picture File"

    If Me.TypeOfPicture = PictureType.InlineType Then
        Set inl = InlineShape
    Else
        Set shp = Shape
        Set inl = shp.ConvertToInlineShape
    End If
    
    inl.reset
    inl.LockAspectRatio = False
    inl.ScaleHeight = 100
    inl.ScaleWidth = 100
    inl.LockAspectRatio = True
    inl.Range.copy
    
    dx.updated = False
    dx.Epilog
    Set dx = Nothing

    Set newDoc = Application.Documents.Add(visible:=False)
    newDoc.Range.Paste
    If newDoc.InlineShapes.Count > 0 Then
        Set inlNew = newDoc.InlineShapes(1)
        Set shpNew = inlNew.ConvertToShape
    Else
        Set shpNew = newDoc.Shapes(1)
        Set inlNew = shpNew.ConvertToInlineShape
        inlNew.reset
        Set shpNew = inlNew.ConvertToShape
    End If
    
    shpNew.LockAspectRatio = False
    shpNew.ScaleHeight 1, msoCTrue
    shpNew.ScaleWidth 1, msoCTrue
    shpNew.Line.visible = msoFalse
    shpNew.Rotation = 0
    shpNew.LockAspectRatio = True
    Set inlNew = shpNew.ConvertToInlineShape
    
    filesFolder = Replace(tempFileName, ".htm", "_files")
    newDoc.SaveAs2 tempFileName, wdFormatHTML, , , False, , , , True
    newDoc.Close wdDoNotSaveChanges
    
    Dim strFile As String
    strFile = Dir(filesFolder & "\image*")
    Do While Len(strFile) > 0
        Exit Do
        strFile = Dir
    Loop
    
    If strFile > "" Then
        Debug.Print strFile
    End If
    
    
    'vData = inlNew.Range.EnhMetaFileBits
    
    'Open strFullName For Binary Access Write As #1
    'lWritePos = 1
    'Put #1, lWritePos, vData
    'Close #1
    
    '    Dim ok As Boolean
    '    Dim shp As Object
    '    Dim resumeAt As String
    '    Dim vData() As Byte
    '    Dim lWritePos As Long
    '
    '    If Me.TypeOfPicture = PictureType.InlineType Then
    '        Set shp = InlineShape
    '        vData = shp.Range.EnhMetaFileBits
    '    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
    '        Set shp = Shape
    '        vData = shp.Anchor.EnhMetaFileBits
    '    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
    '        Stop
    '    End If
    '
    '    Open strFullName For Binary Access Write As #1
    '    lWritePos = 1
    '    Put #1, lWritePos, vData
    '    Close #1

    
ExitIt:
    On Error GoTo 0
    WriteToTemporaryPictureFile = filesFolder & "\" & strFile
    Exit Function

Failed:
    Select Case Err.Number
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Resume ExitIt
    End Select
 End Function

Public Function ChangePictureToV(Optional bgpmFrom As BGPictureManager = Nothing) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim shp As Object
    Dim fld As field
    Dim rng As Range
    Dim rngInsert As Range
    Dim resumeAt As String
    Dim key As Variant
    Dim found As Boolean
    
    Dim bgpSearch As BGPicture
    Dim bgpFrom As BGPicture
    found = False
    If Me.TypeOfPicture = PictureType.InlineType Then
        Set shp = InlineShape
        Set rng = shp.Range.Duplicate
        RangeStart = shp.Range.start
        RangeEnd = shp.Range.End
        '!!!LogDebug "Inline, " & RangeStart & ", " & RangeEnd, "Update pictures, ChangePictureToV"
        If bgpmFrom Is Nothing Then
            Set bgpFrom = Me
            found = True
        Else
            For Each key In bgpmFrom.GetBGPictures.Keys
                Set bgpSearch = bgpmFrom.GetBGPictures(key)
                If AlternativeText Like "*" & bgpSearch.key & "*" Then
                    Set bgpFrom = bgpSearch
                    found = True
                    Exit For
                End If
            Next
        End If
    ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
        Set shp = Shape
        Set rng = shp.Anchor.Duplicate
        RangeStart = shp.Anchor.start
        RangeEnd = shp.Anchor.End
        '!!!LogDebug "Shape, " & RangeStart & ", " & RangeEnd, "Update pictures, ChangePictureToV"
        If bgpmFrom Is Nothing Then
            Set bgpFrom = Me
            found = True
        Else
            For Each key In bgpmFrom.GetBGPictures.Keys
                Set bgpSearch = bgpmFrom.GetBGPictures(key)
                If AlternativeText Like "*" & bgpSearch.key & "*" Then
                    Set bgpFrom = bgpSearch
                    found = True
                    Exit For
                End If
            Next
        End If
    ElseIf Me.TypeOfPicture = PictureType.EmbedType Then
        Stop
    End If
    
    If Not found Then
        'Me.ReApplyFormat
    ElseIf bgpFrom.FoundFile > "" Then
        Dim newFileName As String
        newFileName = FixPath(bgpFrom.FoundFile)
        '!!!LogDebug Me.sourceFullName & ", " & newFileName, "Update pictures, ChangePictureToV"
        If Me.sourceFullName <> newFileName Then
            If Me.TypeOfPicture = PictureType.InlineType Then
                Set rngInsert = shp.Range.Duplicate
                shp.Range.Delete
                Set shp = rngInsert.InlineShapes.AddPicture(newFileName, True, True, rngInsert)
                If bgpFrom.Rotation <> 0 Then
                    Set shp = shp.ConvertToShape
                    shp.Rotation = bgpFrom.Rotation
                    Set shp = shp.ConvertToInlineShape
                End If
                Set InlineShape = shp
                Set rng = shp.Range.Duplicate
                RangeStart = shp.Range.start
                RangeEnd = shp.Range.End
            ElseIf Me.TypeOfPicture = PictureType.ShapeType Then
                Set rngInsert = shp.Anchor.Duplicate
                shp.Anchor.Delete
                Dim inl As InlineShape
                Set inl = rngInsert.InlineShapes.AddPicture(newFileName, True, True, rngInsert)
                Set shp = inl.ConvertToShape
                If bgpFrom.Rotation <> 0 Then
                    shp.Rotation = bgpFrom.Rotation
                End If
                Set Shape = shp
                Set rng = shp.Anchor.Duplicate
                RangeStart = shp.Anchor.start
                RangeEnd = shp.Anchor.End
            End If
            Me.ReApplyFormat
        End If
'    ElseIf bgpFrom.sourceFullName > "" Then
'        bgpFrom.WriteToTemporaryPictureFile ("D:\test.emf")
    Else
        'Me.ReApplyFormat
    End If
    
ResumeNoPictureFormat:
    resumeAt = ""
    
ExitIt:
    On Error GoTo 0
    ChangePictureToV = ok
    Exit Function

Failed:
    Select Case Err.Number
'    Case -2147024891 'This member can only be accessed for a picture or an OLE object.
'        If resumeAt = "ResumeNoPictureFormat" Then
'            Resume ResumeNoPictureFormat
'        Else
'            Stop
'        End If
'    Case 438, 445 'Object doesn't support this property or method, 'Object doesn't support this action
'        If resumeAt = "Next" Then
'            Resume Next
'        Else
'            Stop
'        End If
'    Case -2147024809 'Operation is not supported by the current object
'        If resumeAt = "Next" Then
'            Resume Next
'        Else
'            Stop
'        End If
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Debug.Print AlternativeText
        ok = False
        Resume ExitIt
    End Select
End Function
Attribute VB_Name = "BGPictureManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private BGPictures As Scripting.Dictionary
Public CollectionRange As Range
Public doc As Document

Private Sub Class_Initialize()
    Set BGPictures = New Scripting.Dictionary
End Sub

Public Function GetBGPictures() As Scripting.Dictionary
    Set GetBGPictures = BGPictures
End Function


'Public Function Remove(key As String) As Boolean
'On Error GoTo Failed
'    Dim ok As Boolean
'    If Contains(key) Then
'        BGPictures.Remove (key)
'    End If
'    ok = Not Contains(key)
'ExitIt:
'    On Error GoTo 0
'    Remove = ok
'    Exit Function
'Failed:
'    ok = False
'    Resume ExitIt
'
'End Function
'
'
'Public Function Add(bgPic As Variant, key As String, Optional Force As Boolean = False) As Boolean
'On Error GoTo Failed
'    Dim ok As Boolean
'    If Contains(key) Then
'        If Force Then
'            BGPictures.Remove (key)
'        Else
'            ok = False
'        End If
'    End If
'    If Not Contains(key) Then
'        BGPictures.Add bgPic, key
'        ok = Contains(key)
'    End If
'ExitIt:
'    On Error GoTo 0
'    Add = ok
'    Exit Function
'Failed:
'    ok = False
'    Resume ExitIt
'
'End Function
'
'Public Function Contains(key As String) As Boolean
'    Dim dummy As Variant
'
'    On Error Resume Next
'    Set dummy = BGPictures(key)
'    Contains = (Err.Number = 0)
'    Err.Clear
'End Function

Public Function ReadRange(rng As Range, dx As docXML, Optional AddIDInAltText As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    
    Set CollectionRange = rng
    Set doc = rng.Document
    
    Dim inl As InlineShape
    Dim shp As Shape
    Dim i As Integer
    Dim iInline As Integer
    Dim iShape As Integer
    Dim key As String
    
    Dim bgp As BGPicture
    
    i = 0
    iInline = 0
    iShape = 0
    Set BGPictures = New Scripting.Dictionary
        
    For Each inl In rng.InlineShapes
        i = i + 1
        iInline = iInline + 1
        Set bgp = New BGPicture
        
        Set bgp.doc = doc
        Set bgp.CollectionRange = CollectionRange
        bgp.INLIndex = iInline
        bgp.TypeOfPicture = PictureType.InlineType
        Set bgp.InlineShape = inl
        bgp.key = Format(inl.Range.start, "00000000") & "." & Format(i, "00000")
        BGPictures.Add bgp.key, bgp
        If AddIDInAltText Then bgp.AddIDInAltText dx
    Next
    
    For Each shp In rng.ShapeRange
        i = i + 1
        iShape = iShape + 1
        Set bgp = New BGPicture
        Set bgp.doc = doc
        Set bgp.CollectionRange = CollectionRange
        bgp.SHPIndex = iShape
        bgp.TypeOfPicture = PictureType.ShapeType
        Set bgp.Shape = shp
        bgp.key = Format(shp.Anchor.start, "00000000") & "." & Format(i, "00000")
        BGPictures.Add bgp.key, bgp
        If AddIDInAltText Then bgp.AddIDInAltText dx
    Next
     
    '!!SortDictionary BGPictures, True
    ok = True
ExitIt:
    On Error GoTo 0
    ReadRange = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt

End Function

Public Function Read(dx As docXML, Optional findFile As Boolean = False, Optional findPage As Boolean = False, Optional findCaption As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean

    Dim bgp As BGPicture
    Dim key As Variant
    For Each key In BGPictures.Keys
        DoEvents
        Set bgp = BGPictures(key)
        bgp.Read dx, findFile, findPage, findCaption
    Next

    ok = True
ExitIt:
    On Error GoTo 0
    Read = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt
End Function

Public Function ReadOldFilename(dx As docXML, Optional force As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim key As Variant
    Dim bgp As BGPicture
    
    For Each key In BGPictures.Keys
        Set bgp = BGPictures(key)
        bgp.Read dx, True, False, False, force
    Next

    ok = True
ExitIt:
    On Error GoTo 0
    ReadOldFilename = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt
End Function


Public Function ReadInfo(dx As docXML, Optional force As Boolean = False) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim key As Variant
    
    Dim bgp As BGPicture
    For Each key In BGPictures.Keys
        Set bgp = BGPictures(key)
        bgp.ReadFormat
        bgp.Read dx, True, False, False, False
    Next

    If force Then
        For Each key In BGPictures.Keys
            Set bgp = BGPictures(key)
            bgp.Read dx, True, False, False, True
        Next
    End If

    ok = True
ExitIt:
    On Error GoTo 0
    ReadInfo = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt
End Function

Public Function BreakBrokenLinks() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim key As Variant
    Dim bgp As BGPicture
    Dim i As Integer
    Dim fld As field
    Dim rng As Range
    
    For Each key In BGPictures.Keys
        Set bgp = BGPictures(key)
        If (bgp.sourceFullName > "" And bgp.FoundFile = "") Then
'            Set rng = bgp.Range.Duplicate
'            rng.Select
'            Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
'            Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
'            Set rng = Selection.Range
            'rng.MoveEnd wdCharacter, 1
'            If rng.fields.count > 0 Then
'                For i = rng.fields.count To 1 Step -1
'                    Set fld = rng.fields(i)
'                    If LCase(Trim(fld.code)) Like "include*" Then
'                        fld.Unlink
'                    End If
'                Next
'            Else
                bgp.BreakLink
'            End If
        End If
    Next
    
    ok = True
ExitIt:
    On Error GoTo 0
    BreakBrokenLinks = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt
End Function

Public Function ChangePicturesToV(Optional bgpmFrom As BGPictureManager = Nothing) As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim key As Variant
    Dim bgp As BGPicture
    For Each key In BGPictures.Keys
        Set bgp = BGPictures(key)
        bgp.ChangePictureToV bgpmFrom
    Next
    
    ok = True
ExitIt:
    On Error GoTo 0
    ChangePicturesToV = ok
    Exit Function
Failed:
    ok = False
    Resume ExitIt
End Function


Attribute VB_Name = "CPDocFile"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Public LanguageCode As String
Public LanguageId As Integer
Public Frontpage As Boolean
Public Pages As Integer
Public LanguageFromPara As String
Public Paragraphs As Integer

Public HFLine1 As String
Public HFLine2 As String
Public HFLine3 As String
Public HFLine4 As String
Public HFLine5 As String

Public FPLine1 As String
Public FPLine2 As String
Public FPLine3 As String
Public FPLine4 As String
Public FPLine5 As String
Public FPLine6 As String

Public FPCopyright As String
Public FPDisclaimer As String
Public FPDate As Date
Public FPDateCP As String
Public FPJournal As String
Public FPJournalExtra As String
Public FPRevision As String
Public FPPages As String
Public FPInitials As String


'Public row As Integer
'Public RootFolder As String
'Public SubFolder As String
'Public name As String
'Public DirectoryName As String
'Public fullName As String
'Public Extension As String
'Public Created As Date
'Public Modified As Date
'Public Read As Date
'Public Pictures As Integer
'Public Missing As Integer
'Public IsLinked As Integer
'Public OutOfDate As Integer
'Public saveAs As Integer
'Public MaybeFound As Integer
'Public MultiField As Integer
'Public Convert As Boolean
'Public Upgrade As Boolean
'Public Converted As Date
'Public DocLanguageCode As String
'Public line1 As String
'Public line2 As String
'Public Line3 As String
'Public Line4 As String
'Public Revision As String
'Public Section As String
'Public Language As String

'Public template As String
'Public Paper As String
'Public Errors As String
'Public Differences As String
'Public Copyright As String
'Public DateCP As String
'Public HeaderName As String
'Public Company As String
'Public Ini As String
'Public Initials As String
'Public RevInitials As String
'Public RevRevision As String
'Public RevDateCP As String
'Public RevDate As Date
'Public RevComment As String
'Public altTemplate As String
'Public projectNo As String
'Public PictureDirectory As String
'Public VDate As Date
'Public HFDate As Date
'Public SectionNo As String
'Public HFSectionNo As String
'Public LineCount As Integer

'Public HFRevision As String
'Public HFSection As String
'Public HFCopyright As String
'Public HFDateCP As String
'Public HFIni As String


Attribute VB_Name = "DOCXML"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const NS As String = "http://beumergroup.com/namespaces/bgdoc"
Const PathLanguage As String = "/DocumentInfo/DocumentInfo-Language"

'------------------------
' New Update variables

Private JumpToPart As String
Private Language As String

Private ScreenUpdating As Boolean
Private rngReturnTo As Range
Private cc As ContentControl
Private rng As Range
Private stry As Range
Private aTag() As String
Private Path As String
Private gotoEnd As Boolean

Private pageHeight As Single
' Private rngInsert As Range

Private rngStart As Range
Private moveBooks As Long
Private bk As Bookmark
Private bkRng As Range
Private iBK As Long

Private value As String
Private HeadingLayout As String

Private rngDelete As Range
Private paraStart As Long
Private para As Paragraph

Private headingLevels As Integer
Private addedStyles As String
Private TermReg As String

'------------------------

Public ThisBGD As BGDoc
Public ThisDoc As Document
Public fromDoc As Document
Public ConversionHistory As Scripting.Dictionary

Public method As String
Public DoFixDocument As Boolean
Public DoUpdate As Boolean
Public DoReadTranslation As Boolean

Public prefix As String
Public SPXML As CustomXMLPart
Public CustomXML As CustomXMLPart
Public OriginalXML As New MSXML2.DOMDocument60
Public RevCount As Integer
Public RevisionTableIndex As Integer

Public ReplaceRegistered As Boolean
Public RebuildFrontMatter As Boolean
Public RebuildTOC As Boolean
Public UpdateCaptions As Boolean
Public FieldsUpdated As Boolean
'Public StructureUpdated As Boolean
Public LanguageUpdated As Boolean
Public CompanyLogoUpdated As Boolean
Public OldLanguage As String
Public NewPaperFormat As String
Public OrgFileDate As Date
Public ShowRevisionsAndComments As Boolean
Public RevisionsView  As WdRevisionsView

Public saved As Boolean
Public updated As Boolean
Public Undo As Word.UndoRecord
Public docType As String

Public IsNewDocument As Boolean
Public OldTranslation As Boolean
Private showFrontMatter As String
Private ShowSupplierFileName As String
Private ShowFrontPage As String
Private ShowDocumentInformation As String
Private ShowRevisions As String
Private ShowTOC As String
Private ShowTOF As String
Private ShowTOT As String
Private CaptionHeading As String
Private pdfLayout As String

Private ccFrontMatter As ContentControl
Private ccFrontPage As ContentControl
Private ccFrontPageHeader As ContentControl
Private ccFrontPageFooter As ContentControl
Private ccTranslation As ContentControl
Private ccTOC As ContentControl
Private ccTOF As ContentControl
Private ccTOT As ContentControl
Private ccTOCLabel As ContentControl
Private ccTOFLabel As ContentControl
Private ccTOTLabel As ContentControl
Private ccHeader As ContentControl
Private ccFooter As ContentControl
Private ccDocumentInformation As ContentControl
Private ccFileName As ContentControl
Private ccSupplierFileName As ContentControl
Private ccSupplierFileNameLabel As ContentControl
Private ccCopyright As ContentControl
Private ccDisclaimer As ContentControl
Private ccRevisions As ContentControl
Public FoundHeadingOrParmheadOrHeadingPart As Boolean
Public FoundCaptionRes As Boolean
Public ErrorNo As Long

Private aRevHist() As String

Private Sub Class_Initialize()
    Set ThisDoc = Nothing
End Sub
    
Public Sub Init(bgd As BGDoc)
    Set ThisBGD = bgd
    Set ThisDoc = bgd.ThisDoc
    
    Dim parts As CustomXMLParts
    Dim strPrefix As String

    Set parts = ThisDoc.CustomXMLParts.SelectByNamespace(NS)
    If parts.Count = 0 Then
        Dim tmp As Document
        Dim tmpTemp As Template
        Set tmpTemp = ThisDoc.attachedTemplate
        Set tmp = tmpTemp.OpenAsDocument
        Dim partFromTemplate As CustomXMLPart
        
        Set parts = tmp.CustomXMLParts.SelectByNamespace(NS)
        If Not parts.Count = 0 Then
            Set CustomXML = ThisDoc.CustomXMLParts.Add(parts(1).XML)
            Set parts = ThisDoc.CustomXMLParts.SelectByNamespace(NS)
            prefix = parts(1).NamespaceManager.LookupPrefix(NS) & ":"
            Set parts = Nothing
            tmp.Close wdDoNotSaveChanges
            Set tmp = Nothing
            Set tmpTemp = Nothing
        
            Dim thcStyle As Style
            On Error Resume Next
            Set thcStyle = ThisDoc.Styles("Table Header Center")
            On Error GoTo 0
            If thcStyle Is Nothing Then
                 ThisDoc.CopyStylesFromTemplate (ThisDoc.attachedTemplate.fullName)
            End If
            NewPaperFormat = "Detect"
        End If
    Else
        Set CustomXML = parts(1)
        prefix = parts(1).NamespaceManager.LookupPrefix(NS) & ":"
        Set parts = Nothing
    End If
    
    Dim WasSaved As Boolean
    WasSaved = ThisDoc.saved
    If Not ThisDoc.ReadOnly Then
'        ' New Fields
'        Dim oNode As CustomXMLNode
'        Dim TryIntentionallyLeftBlank As String
'        If Not TryReadText("/DocumentLabel/DocumentLabel-IntentionallyLeftBlank", TryIntentionallyLeftBlank) Then
'              Set oNode = AddNode("/DocumentLabel", "DocumentLabel-IntentionallyLeftBlank", "Intentionally Left Blank")
'        End If
'        Dim TryPDFLayout As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-PDFLayout", TryPDFLayout) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-PDFLayout", "Standard")
'        End If
'        Dim TryHeadingLayout As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-HeadingLayout", TryHeadingLayout) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-HeadingLayout", "Standard")
'        End If
'
'        Dim TryFullName As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-FullName", TryFullName) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-FullName", "")
'        End If
'        Dim TryShowFullName As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-ShowFullName", TryShowFullName) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-ShowFullName", "")
'        End If
'        Dim TrySaveFolder As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-SaveFolder", TrySaveFolder) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-SaveFolder", "")
'        End If
'        Dim TrySaveFileName As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-SaveFileName", TrySaveFileName) Then
'              Set oNode = AddNode("/DocumentInfo", "DocumentInfo-SaveFileName", "")
'        End If
'
'        Dim TryDocType As String
'        If Not TryReadText("/DocumentInfo/DocumentInfo-DocType", TryDocType) Then
'            Set oNode = RenameNode("/DocumentInfo", "DocumentInfo-Layout", "DocumentInfo-DocType")
'            If oNode.text = "" Or oNode.text = "Standard Documentation" Then
'                oNode.text = "O & M Document"
'                AddNode "/DocumentInfo", "DocumentInfo-DocMainType", "O & M Document"
'            ElseIf oNode.text = "Spare Parts Catalogue" Then
'                oNode.text = "O & M Spare Parts Catalogue"
'                AddNode "DocumentInfo-DocMainType", "O & M Spare Parts Catalogue", False
'            End If
'            Set oNode = RenameNode("/DocumentInfo", "DocumentInfo-ClassificationLevel", "DocumentInfo-ClassificationLabel")
'            Set oNode = RenameNode("/DocumentInfo", "DocumentInfo-Status", "DocumentInfo-WorkflowLabel")
'        Else
'            Set oNode = ReadNode("/DocumentInfo/DocumentInfo-DocType")
'            If oNode.text = "" Or oNode.text = "Standard Documentation" Then
'                oNode.text = "O & M Document"
'                AddNode "DocumentInfo-DocMainType", "O & M Document", False
'            ElseIf oNode.text = "Standard Document" Then
'                oNode.text = "Project Document"
'            ElseIf oNode.text = "Standard Sheet" Then
'                oNode.text = "BDK Standard Sheet"
'            ElseIf oNode.text = "Spare Parts Catalogue" Then
'                oNode.text = "O & M Spare Parts Catalogue"
'                AddNode "DocumentInfo-DocMainType", "O & M Spare Parts Catalogue", False
'            End If
'        End If
    End If
    OriginalXML.LoadXML Replace(CustomXML.XML, "xmlns=""" & NS & """", "")
     
    RebuildFrontMatter = False
    RebuildTOC = False
    UpdateCaptions = False
    ReplaceRegistered = False
    FieldsUpdated = False
    LanguageUpdated = False
    CompanyLogoUpdated = False
    OldLanguage = ReadText(PathLanguage)
    
    If ThisDoc.saved <> WasSaved Then ThisDoc.saved = WasSaved
    
End Sub

Public Function ReadRevisionHistory() As String()

    Dim i As Integer
    Dim oRevHist As CustomXMLNode
    Set oRevHist = ReadNode("/DocumentInfo/DocumentInfo-RevisionHistory")
    RevCount = oRevHist.SelectNodes(prefix & "Revision").Count + 1
    
    ReDim aRevHist(RevCount - 1, 4)
    Dim oRow As CustomXMLNode
    i = 0
    For Each oRow In oRevHist.SelectNodes(prefix & "Revision")
        aRevHist(i, 0) = oRow.SelectSingleNode("./" & prefix & "No").Text
        aRevHist(i, 1) = oRow.SelectSingleNode("./" & prefix & "Date").Text
        aRevHist(i, 2) = oRow.SelectSingleNode("./" & prefix & "Author").Text
        aRevHist(i, 3) = oRow.SelectSingleNode("./" & prefix & "Description").Text
        i = i + 1
    Next
    aRevHist(i, 0) = ReadText("/DocumentInfo/DocumentInfo-Revision")
    aRevHist(i, 1) = ReadText("/DocumentInfo/DocumentInfo-Date")
    aRevHist(i, 2) = ReadText("/DocumentInfo/DocumentInfo-Author")
    aRevHist(i, 3) = ReadText("/DocumentInfo/DocumentInfo-Description")
    
    Set oRevHist = Nothing
    aRevHist = OrderRevisionHistory(aRevHist)
    ReadRevisionHistory = aRevHist
    
End Function

Public Function GetRevisionHistory() As Variant
    GetRevisionHistory = aRevHist
End Function

Public Function AddNode(ByVal Path As String, nodeName As String, ByVal value As Variant) As CustomXMLNode ', Optional structureUpdate As Boolean = False
    Dim oNode As CustomXMLNode
    Path = Replace(Path, "/", "/" & prefix)
    On Error Resume Next
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    On Error GoTo 0
    If Not oNode Is Nothing Then
        oNode.AppendChildNode nodeName, NS, msoCustomXMLNodeElement
        Set oNode = oNode.LastChild
        If oNode.Text <> value Then
            oNode.Text = value
            FieldsUpdated = True
'            If structureUpdate Then
'                'StructureUpdated = True
'            End If
        End If
        Set AddNode = oNode
    Else
        Set AddNode = Nothing
    End If
End Function

Public Function RenameNode(ByVal Path As String, oldNodeName As String, newNodeName As String) As CustomXMLNode
    Dim oNode As CustomXMLNode
    Dim oldNode As CustomXMLNode
    Dim newNode As CustomXMLNode
    
    Path = Replace(Path, "/", "/" & prefix)
    On Error Resume Next
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    On Error GoTo 0
    If Not oNode Is Nothing Then
        On Error Resume Next
        Set oldNode = oNode.SelectSingleNode(prefix & oldNodeName)
        On Error GoTo 0
        If Not oldNode Is Nothing Then
            oNode.AppendChildNode newNodeName, NS, msoCustomXMLNodeElement
            Set newNode = oNode.LastChild
            If newNode Is Nothing Then
                Set RenameNode = Nothing
                Exit Function
            Else
                Dim oChild As CustomXMLNode
                For Each oChild In oldNode.ChildNodes
                    If oChild.NodeType = msoCustomXMLNodeText Then
                        newNode.AppendChildNode newNodeName, "", msoCustomXMLNodeText, oChild.Text
                    Else
                        newNode.AppendChildSubtree oChild.XML
                    End If
                Next
                oNode.RemoveChild oldNode
            End If
        Else
            Set RenameNode = Nothing
            Exit Function
        End If
        
                
        Set RenameNode = newNode
    Else
        Set RenameNode = Nothing
    End If
End Function

Public Sub WriteConversion(fromDocFullName As String, atTime As String, user As String, bgpmFrom As BGPictureManager)
    Dim oConv As CustomXMLNode
    Dim oNode As CustomXMLNode
    Set oConv = ReadNode("/DocumentInfo/Conversion")
    If Not oConv Is Nothing Then
        For Each oNode In oConv.ChildNodes
            oConv.RemoveChild oNode
        Next
    Else
        Set oNode = ReadNode("/DocumentInfo")
        oNode.AppendChildNode "Conversion", NS, msoCustomXMLNodeElement
        Set oConv = oNode.LastChild
    End If
    
'    Dim oOutOfDate As CustomXMLNode
'    Dim key As Variant
'    Dim bgp As BGPicture
'    If Not bgpmFrom Is Nothing Then
'        For Each key In bgpmFrom.GetBGPictures
'            Set bgp = bgpmFrom.GetBGPictures(key)
'            If bgp.OutOfDate Then
'                If oOutOfDate Is Nothing Then
'                    oConv.AppendChildNode "OutOfDate", NS, msoCustomXMLNodeElement
'                    Set oOutOfDate = oNode.LastChild
'                End If
'                oOutOfDate.AppendChildNode "File", NS
'                oOutOfDate.LastChild.AppendChildNode "File", NS, msoCustomXMLNodeText, bgp.FoundFile
'            End If
'        Next
'    End If
    
    
    Dim key As Variant
    Dim bgp As BGPicture
    If Not bgpmFrom Is Nothing Then
        For Each key In bgpmFrom.GetBGPictures
            Set bgp = bgpmFrom.GetBGPictures(key)
            If bgp.OutOfDate Then
                AddWarning "Inserted newer version of picture from disk:'" & bgp.FoundFile & "'. Text may no longer apply."
            End If
        Next
    End If
    
    oConv.AppendChildNode "Conversion-History", NS
    oConv.LastChild.AppendChildNode "Conversion-History", NS, msoCustomXMLNodeText, ConversionHistoryToString
    oConv.AppendChildNode "Conversion-FromDoc", NS
    oConv.LastChild.AppendChildNode "Conversion-FromDoc", NS, msoCustomXMLNodeText, fromDocFullName
    oConv.AppendChildNode "Conversion-AtTime", NS
    oConv.LastChild.AppendChildNode "Conversion-AtTime", NS, msoCustomXMLNodeText, atTime
    oConv.AppendChildNode "Conversion-User", NS
    oConv.LastChild.AppendChildNode "Conversion-User", NS, msoCustomXMLNodeText, user

End Sub

Public Sub WriteRevisionHistory(aNewRevHist() As String)
    Dim i As Integer
    Dim oRevHist As CustomXMLNode
    Dim oNode As CustomXMLNode
    Set oRevHist = ReadNode("/DocumentInfo/DocumentInfo-RevisionHistory")
    
    aRevHist = aNewRevHist
    RevCount = UBound(aRevHist, 1)
    For Each oNode In oRevHist.ChildNodes
        oRevHist.RemoveChild oNode
    Next
    For i = 0 To RevCount - 1
        oRevHist.AppendChildNode "Revision", NS, msoCustomXMLNodeElement
        Set oNode = oRevHist.LastChild
        oNode.AppendChildNode "No", NS
        oNode.LastChild.AppendChildNode "No", NS, msoCustomXMLNodeText, Replace(Replace(aRevHist(i, 0), Chr(11), vbCr), Chr(31), "")
        oNode.AppendChildNode "Date", NS
        oNode.LastChild.AppendChildNode "Date", NS, msoCustomXMLNodeText, Replace(aRevHist(i, 1), Chr(11), vbCr)
        oNode.AppendChildNode "Author", NS
        oNode.LastChild.AppendChildNode "Author", NS, msoCustomXMLNodeText, Replace(aRevHist(i, 2), Chr(11), vbCr)
        oNode.AppendChildNode "Description", NS
        oNode.LastChild.AppendChildNode "Description", NS, msoCustomXMLNodeText, Replace(aRevHist(i, 3), Chr(11), vbCr)
    Next
    Set oNode = Nothing
    Set oRevHist = Nothing
End Sub

Public Function ReadNode(ByVal Path As String) As CustomXMLNode
    Dim oNode As CustomXMLNode
    Path = Replace(Path, "/", "/" & prefix)
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    Set ReadNode = oNode
End Function

Public Function DeleteNode(ByVal Path As String) As Boolean
    Dim oNode As CustomXMLNode
    Path = Replace(Path, "/", "/" & prefix)
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    If oNode Is Nothing Then
        DeleteNode = False
    Else
        oNode.Delete
        DeleteNode = True
    End If
End Function

Public Function TryReadText(ByVal Path As String, ByRef assignTo As String) As Boolean
    Dim oNode As CustomXMLNode
    Dim value As String
    If Path Like "/DocumentInfo/DocumentInfo-??" Then
        Dim pv As String
        pv = Replace(Path, "/DocumentInfo/DocumentInfo-", "")
        
        Dim pvLine As String
        Dim pvPart As String
        Dim str As String
        Dim aValue() As String
        
        pvLine = Right(pv, 1)
        pvPart = Left(pv, 1)
        If Not pvLine = "1" And Not pvLine = "2" And Not pvLine = "3" And Not pvPart = "P" And Not pvPart = "V" Then
            TryReadText = False
        Else
            Path = Replace("/DocumentInfo/DocumentInfo-FrontPageInfo", "/", "/" & prefix)
            Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
            If oNode Is Nothing Then
                assignTo = " "
                TryReadText = True
            Else
                value = oNode.Text
                Set oNode = Nothing
                Dim aPV() As String
                aPV = Split(value, vbLf)
                If UBound(aPV) < CInt(pvLine - 1) Then
                    assignTo = " "
                    TryReadText = True
                Else
                    aValue = Split(aPV(CInt(pvLine - 1)), ":", 2)
                    If pvPart = "P" Then
                        value = aValue(0)
                    ElseIf UBound(aValue) = 1 Then
                        value = aValue(1)
                    Else
                        value = ""
                    End If
                    If value = "" Then value = " "
                    assignTo = value
                    TryReadText = True
                End If
            End If
        End If
    Else
        Path = Replace(Path, "/", "/" & prefix)
        On Error Resume Next
        Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
        On Error GoTo 0
        If oNode Is Nothing Then
            TryReadText = False
        Else
            value = oNode.Text
            Set oNode = Nothing
            assignTo = value
            TryReadText = True
        End If
    End If
End Function


Public Function ReadText(ByVal Path As String) As String
    Dim oNode As CustomXMLNode
    Path = Replace(Path, "/", "/" & prefix)
    Dim value As String
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    If oNode Is Nothing Then
        value = ""
    Else
        value = oNode.Text
    End If
    Set oNode = Nothing
    ReadText = value
End Function

Public Function DataHasChanged() As Boolean
    Dim prefix As String
    prefix = "/DocumentInfo/DocumentInfo-"
    ' Check revison first.
    If HasChanged(prefix & "Revision") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "Date") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "Description") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "ClassificationLabel") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "WorkflowLabel") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "Author") Then DataHasChanged = True: Exit Function
    ' Then document info
    If HasChanged(prefix & "TitleLine1") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "TitleLine2") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "TitleLine3") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "TitleLine4") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "TitleLine5") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "DocNo") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "ProjectNo") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "FileName") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "SupplierFileName") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "FrontPageInfo") Then DataHasChanged = True: Exit Function
    
    ' Then Language dependent values - Never?
    If HasChanged(prefix & "Copyright") Then DataHasChanged = True: Exit Function
    If HasChanged(prefix & "Disclaimer") Then DataHasChanged = True: Exit Function
    
    DataHasChanged = False
End Function

Public Function LanguageHasChanged() As Boolean
    Dim prefix As String
    prefix = "/DocumentInfo/DocumentInfo-"
    If HasChanged(prefix & "Language") Then LanguageHasChanged = True: Exit Function
    LanguageHasChanged = False
End Function

Public Function DocTypeHasChanged() As Boolean
    Dim prefix As String
    prefix = "/DocumentInfo/DocumentInfo-"
    If HasChanged(prefix & "DocType") Then DocTypeHasChanged = True: Exit Function
    DocTypeHasChanged = False
End Function

Public Function FrontMatterHasChanged() As Boolean
    Dim prefix As String
    prefix = "/DocumentInfo/DocumentInfo-"
    If HasChanged(prefix & "FrontMatter") Then FrontMatterHasChanged = True: Exit Function
    FrontMatterHasChanged = False
End Function

Public Function SetupHasChanged() As Boolean
    Dim prefix As String
    prefix = "/DocumentInfo/DocumentInfo-"
    If HasChanged(prefix & "FrontMatter") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "FrontPage") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "HeadingLayout") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "DocumentInformation") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "Language") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "DocType") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "RevisionHistory-Show") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "TOC") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "TOC-HeadingLevels") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "TOC-Headings") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "TOF") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "CaptionHeading") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "Logo") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "SupplierFileName") Then SetupHasChanged = True: Exit Function
    If HasChanged(prefix & "CompanyLogo") Then SetupHasChanged = True: Exit Function
    If ThisBGD.NewTranslation Then SetupHasChanged = True: Exit Function
    If OldTranslation Then SetupHasChanged = True: Exit Function
    SetupHasChanged = False
End Function

Public Function HasChanged(ByVal pathOrSimplePath As String) As Boolean
    If InStr(pathOrSimplePath, "/") <= 0 Then pathOrSimplePath = "/DocumentInfo/DocumentInfo-" & pathOrSimplePath
    Dim oNode As MSXML2.IXMLDOMNode
    Set oNode = OriginalXML.DocumentElement.SelectSingleNode("/doc" & pathOrSimplePath)
    If oNode Is Nothing Then
        HasChanged = True
    Else
        HasChanged = (Me.ReadText(pathOrSimplePath) <> oNode.Text)
    End If
End Function

Public Function WriteNode(ByVal Path As String, ByVal value As Variant) As CustomXMLNode
    Dim oNode As CustomXMLNode
    Path = Replace(Path, "/", "/" & prefix)
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    If oNode.Text <> value Then
        oNode.Text = value
        FieldsUpdated = True
'        If structureUpdate Then
'            'StructureUpdated = True
'        End If
    End If
    Set WriteNode = oNode
End Function

Public Function SetNode(ByVal Path As String, nodeName As String, ByVal value As Variant) As CustomXMLNode
    Dim oNode As CustomXMLNode
    Dim childPath As String
    Dim prefixPath As String
    childPath = Path & "/" & nodeName
    prefixPath = prefix & "doc" & Replace(childPath, "/", "/" & prefix)
    Set oNode = CustomXML.SelectSingleNode(prefixPath)
    If oNode Is Nothing Then
        Set SetNode = AddNode(Path, nodeName, value)
    Else
        Set SetNode = WriteNode(childPath, value)
    End If
End Function

Public Function WriteText(ByVal Path As String, ByVal value As Variant) As String
    On Error GoTo CannotUpdate
    Dim oNode As CustomXMLNode
    Dim oldValue As String
    
    Path = Replace(Path, "/", "/" & prefix)
    Set oNode = CustomXML.SelectSingleNode(prefix & "doc" & Path)
    oldValue = oNode.Text
    If oldValue <> value Then
        oNode.Text = value
        FieldsUpdated = True
'        If structureUpdate Then
'            'StructureUpdated = True
'        End If
    End If
ExitUpdate:
    On Error GoTo 0
    Set oNode = Nothing
    WriteText = oldValue
    Exit Function
CannotUpdate:
    Resume ExitUpdate
    
End Function


Public Sub SetLanguage()
    Language = ReadText(PathLanguage)
    If Language = "" Then Language = "2057"
    If Language = "1034" Then Language = "3082" ' Spanish Traditional Sort => Modern Sort
    
    If OldLanguage <> Language Or LanguageUpdated Then
        LanguageUpdated = True
        FieldsUpdated = True
        UpdateCaptions = True
        
        Dim rows As Integer
        Dim row As Integer
        
        Dim i As Integer
        Dim j As Integer
        
        rows = UBound(aLanguages, 1)
        For row = 0 To rows
            If aLanguages(row, 0) = Language Then Exit For
        Next
        If row > rows Then
            Language = "2057"
            For row = 0 To rows
                If aLanguages(row, 0) = Language Then Exit For
            Next
        End If
        ' Update all language values
        WriteText PathLanguage, Language
        
        For i = 0 To UBound(LanguageFields)
            Dim iLanguage As String
            Dim iPathLanguage As String
            iLanguage = LanguageFields(i)
            iPathLanguage = PathLanguageFields(i)
            For j = 1 To UBound(LanguageFieldIndexes)
                If LanguageFieldIndexes(j) = iLanguage Then
                        WriteText iPathLanguage, aLanguages(row, j + 1)
                End If
            Next
        Next
    End If
End Sub

Public Function ReplaceRText(str As String) As String
    If str = "" Then
        ReplaceRText = ""
    Else
        ' ((?:^|\W)(CrisBag(?:\W||fffd|||fffd||$))|(?:^|\W)(BEUMER(?:\W||fffd|||fffd||$))|(?:^|\W)(autover(?:\W||fffd|||fffd||$))|(?:^|\W)(CrisBelt(?:\W||fffd|||fffd||$)))
        Dim rows As Integer
        Dim i As Integer
        Dim Loops As Integer
        
        rows = UBound(aTerms, 1)
        For Loops = 1 To 3
            For i = 0 To rows
                If str Like "*Crist*" And aTerms(i, 0) Like "*Crist*" Then
                    Debug.Print str
                    Stop
                End If
                str = Replace(str, aTerms(i, 0), aTerms(i, 1), , , vbTextCompare)
            Next
'
'        str = Replace(str, "CrisBag", "CrisBag|fffd|", , , vbTextCompare)
'        str = Replace(str, "Crisclaim", "CrisClaim|fffd|", , , vbTextCompare)
'        str = Replace(str, "Crisbelt", "CrisBelt|fffd|", , , vbTextCompare)
'        str = Replace(str, "Rampmate", "RampMate|fffd|", , , vbTextCompare)
'        str = Replace(str, "Crisstore", "CrisStore|fffd|", , , vbTextCompare)
'        str = Replace(str, "Autover", "autover|fffd|", , , vbTextCompare)
'        str = Replace(str, "Autoca", "autoca|fffd|", , , vbTextCompare)
'        str = Replace(str, "CrisCheck", "CrisCheck|fffd|", , , vbTextCompare)
'        str = Replace(str, "Crisplant", "Crisplant", , , vbTextCompare)
'        str = Replace(str, "BEUMER", "BEUMER", , , vbTextCompare)
'        str = Replace(str, "Christoph Beumer", "Christoph Beumer", , , vbTextCompare)
            str = Replace(str, "|fffd||fffd|", "|fffd|")
            str = Replace(str, "|fffd||fffd|", "|fffd|")
        Next
        
        ReplaceRText = str
    End If
End Function

Public Sub WriteLog(str As String)
On Error GoTo LogFailed
    'Xebug.Print Now, str
    If Not TimerForm Is Nothing Then
        TimerForm.WriteLog str
    End If

ExitSub:
    On Error GoTo 0
    Exit Sub
    
LogFailed:
    Resume ExitSub
End Sub
    
Private Sub FillRevisionHistory(cc As ContentControl)
    Dim tbl As table
    Dim aRevHist() As String
    Dim RevCount As Integer
    Dim i As Integer
    Set tbl = cc.Range.Tables(1)
    aRevHist = ReadRevisionHistory
    RevCount = UBound(aRevHist, 1)
    For i = tbl.rows.Count To RevCount + 1
         tbl.rows.Add
    Next i
    For i = tbl.rows.Count To RevCount + 3 Step -1
         tbl.rows.Last.Delete
    Next
    For i = 0 To RevCount
        tbl.Cell(i + 2, 1).Range.Text = aRevHist(i, 0)
        tbl.Cell(i + 2, 2).Range.Text = aRevHist(i, 1)
        tbl.Cell(i + 2, 3).Range.Text = aRevHist(i, 2)
        tbl.Cell(i + 2, 4).Range.Text = aRevHist(i, 3)
    Next
End Sub

Public Sub ReformatTOC(rng As Range)
    InsertTabInFirstChar ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC9).NameLocal
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC1).NameLocal, "TOC1cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC2).NameLocal, "TOC2cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC3).NameLocal, "TOC3cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC4).NameLocal, "TOC4cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC5).NameLocal, "TOC5cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC6).NameLocal, "TOC6cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC7).NameLocal, "TOC7cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC8).NameLocal, "TOC8cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC9).NameLocal, "TOC9cp"
    ReplaceStyleInRange rng, ThisDoc.Styles(WdBuiltinStyle.wdStyleTableOfFigures).NameLocal, "Table of FiguresCP"
End Sub


Public Sub ReformatTOCOld(rng As Range)
    InsertTabInFirstChar ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC9).NameLocal
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC1).NameLocal, "TOC1cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC2).NameLocal, "TOC2cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC3).NameLocal, "TOC3cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC4).NameLocal, "TOC4cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC5).NameLocal, "TOC5cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC6).NameLocal, "TOC6cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC7).NameLocal, "TOC7cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC8).NameLocal, "TOC8cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTOC9).NameLocal, "TOC9cp"
    ReplaceStyleInRange ThisDoc.Content, ThisDoc.Styles(WdBuiltinStyle.wdStyleTableOfFigures).NameLocal, "Table of FiguresCP"
End Sub

Public Sub InsertTabInFirstChar(styleName As String)
    Dim rng As Range
    Set rng = ThisDoc.Content
    With rng.find
         .ClearFormatting
         .Style = styleName
         While .Execute
            rng.InsertBefore vbTab
         Wend
    End With
End Sub

Public Sub ReformatTOCHyperlinks()
    Dim rng As Range
    Set rng = Nothing
    On Error Resume Next
    Set rng = ThisDoc.TablesOfContents.Item(1).Range
    'rng.Select
    On Error GoTo 0
    If Not rng Is Nothing Then ReplaceStyleInRange rng, ThisDoc.Styles(wdStyleHyperlink).NameLocal, "HyperLinkCP"
    Set rng = Nothing
    On Error Resume Next
    Set rng = ThisDoc.TablesOfFigures.Item(1).Range
    On Error GoTo 0
    If Not rng Is Nothing Then ReplaceStyleInRange rng, ThisDoc.Styles(wdStyleHyperlink).NameLocal, "HyperLinkCP"
    Set rng = Nothing
    On Error Resume Next
    Set rng = ThisDoc.TablesOfFigures.Item(2).Range
    On Error GoTo 0
    If Not rng Is Nothing Then ReplaceStyleInRange rng, ThisDoc.Styles(wdStyleHyperlink).NameLocal, "HyperLinkCP"

End Sub

Private Sub ReplaceStyleInRange(rng As Range, oldStyle As Variant, NewStyle As String)
    
    With rng.find
         .ClearFormatting
         .Style = oldStyle
         .Replacement.Style = NewStyle
         .Execute
         'rng.Select
         If .found Then
            .Execute Replace:=wdReplaceAll
         End If
     End With
End Sub


Public Sub SetHeaderFooter(Optional force As Boolean = False)
    Dim rngInsert As Range
    Dim cc As ContentControl
    Dim head As Range
    Dim foot As Range
    
    
    Dim ccsPH As ContentControls
    Dim ccsPF As ContentControls
    Set ccsPH = ThisDoc.SelectContentControlsByTag("Container:PrimaryHeader")
    Set ccsPF = ThisDoc.SelectContentControlsByTag("Container:PrimaryFooter")
    
    If Not force And (ccsPH.Count > 0 And ccsPF.Count > 0) Then Exit Sub
    
    Set head = ThisDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range
    Set foot = ThisDoc.Sections(1).Footers(wdHeaderFooterPrimary).Range
    head.Delete
    foot.Delete
    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzHeader").Insert(where:=head, RichText:=True)
    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzFooter").Insert(where:=foot, RichText:=True)
    Set head = ThisDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range
    Set foot = ThisDoc.Sections(1).Footers(wdHeaderFooterPrimary).Range
    head.Paragraphs.Last.Range.Delete
    foot.Paragraphs.Last.Range.Delete
    
End Sub


Public Sub SpecialFirstHeaderFooter(Optional force As Boolean = False)
    Dim rngInsert As Range
    Dim cc As ContentControl
    Dim head As Range
    Dim foot As Range
    
    Dim ccsFPH As ContentControls
    Dim ccsFPF As ContentControls
    Set ccsFPH = ThisDoc.SelectContentControlsByTag("Container:FirstPageHeader")
    Set ccsFPF = ThisDoc.SelectContentControlsByTag("Container:FirstPageFooter")
    If ccsFPF.Count = 0 Then Set ccsFPF = ThisDoc.SelectContentControlsByTag("Container:FrontPageFooter") ' Old
    
    With ThisDoc.PageSetup
        On Error Resume Next
        If Not .DifferentFirstPageHeaderFooter Then .DifferentFirstPageHeaderFooter = True
        On Error GoTo 0
    End With
    
    If Not force And (ccsFPH.Count > 0 And ccsFPF.Count > 0) Then Exit Sub
    
    Set head = ThisDoc.Sections(1).Headers(wdHeaderFooterFirstPage).Range
    Set foot = ThisDoc.Sections(1).Footers(wdHeaderFooterFirstPage).Range
    head.Delete
    foot.Delete
    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzFrontPageHeader").Insert(where:=head, RichText:=True)
    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzFrontPageFooter").Insert(where:=foot, RichText:=True)
    Set head = ThisDoc.Sections(1).Headers(wdHeaderFooterFirstPage).Range
    Set foot = ThisDoc.Sections(1).Footers(wdHeaderFooterFirstPage).Range
    head.Paragraphs.Last.Range.Delete
    foot.Paragraphs.Last.Range.Delete
End Sub

Public Sub Prolog(UndoText As String, Optional screenUpdate As Boolean = False)
        
    On Error GoTo ExitSub
    saved = ThisDoc.saved
    updated = False
    Set Undo = Application.UndoRecord
    If Undo.IsRecordingCustomRecord Then
        Undo.EndCustomRecord
    End If
    Undo.StartCustomRecord UndoText
    System.Cursor = wdCursorWait
    Application.ScreenUpdating = screenUpdate
    On Error GoTo 0
    GoTo ExitSubClean
ExitSub:
    On Error GoTo 0
    updated = False
    System.Cursor = wdCursorNormal
ExitSubClean:
    Exit Sub
End Sub

Public Sub Epilog()
    On Error GoTo ExitSub
    If updated Then
        If Undo.IsRecordingCustomRecord Then
            Undo.EndCustomRecord
        End If
        ThisDoc.saved = False
    Else
        If Undo.IsRecordingCustomRecord Then
            Undo.EndCustomRecord
        End If
        ThisDoc.Undo
        ThisDoc.saved = saved
    End If
ExitSub:
    On Error GoTo 0
    updated = False
    DoEvents
    Application.ScreenRefresh
    DoEvents
    Application.ScreenUpdating = True
    System.Cursor = wdCursorNormal
    Exit Sub
End Sub


Public Function GetPaperFormat() As String
    Dim paperFormat As String
    Select Case ThisDoc.PageSetup.PaperSize
    Case wdPaperA4
        paperFormat = "A4"
    Case wdPaperA3
        paperFormat = "A3"
    Case wdPaperLetter
        paperFormat = "Letter"
    Case wdPaperTabloid, 1
        paperFormat = "Tabloid"
    Case Else
    End Select
    If paperFormat > "" Then
        If ThisDoc.PageSetup.Orientation = wdOrientPortrait Then
            paperFormat = paperFormat & " - Portrait"
        Else
            paperFormat = paperFormat & " - Landscape"
        End If
    End If
    GetPaperFormat = paperFormat
End Function



Public Sub ChangePaperFormat()
    
    If NewPaperFormat = "Detect" Then NewPaperFormat = GetPaperFormatFromPageSetup(ThisDoc)
    
    Dim useDocument As Boolean
    useDocument = False
    Dim obj As Object
    Set obj = Selection
    
    On Error GoTo ErrorReDo
ReDo:
    With obj.PageSetup
        Select Case NewPaperFormat
        Case "A4 - Portrait"
            .PaperSize = wdPaperA4
            .Orientation = wdOrientPortrait
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 595.35
            '.PageHeight = 842
        Case "Letter - Portrait"
            .PaperSize = wdPaperLetter
            .Orientation = wdOrientPortrait
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 612
            '.PageHeight = 792
        Case "A4 - Landscape"
            .PaperSize = wdPaperA4
            .Orientation = wdOrientLandscape
            .TopMargin = CentimetersToPoints(4.1) '99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = CentimetersToPoints(1#)  '70.9
            .RightMargin = CentimetersToPoints(1#)  '70.9
            .HeaderDistance = CentimetersToPoints(1.7) '31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 842
            '.PageHeight = 595.35
        Case "Letter - Landscape"
            .PaperSize = wdPaperLetter
            .Orientation = wdOrientLandscape
            .TopMargin = CentimetersToPoints(4.1) '99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = CentimetersToPoints(1#)  '70.9
            .RightMargin = CentimetersToPoints(1#)  '70.9
            .HeaderDistance = CentimetersToPoints(1.7) '31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 792
            '.PageHeight = 612
        Case "A3 - Portrait"
            .PaperSize = wdPaperA3
            .Orientation = wdOrientPortrait
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 842
            '.PageHeight = 595.35 * 2
        Case "Tabloid/Ledger - Portrait"
            .PaperSize = wdPaperTabloid
            .Orientation = wdOrientPortrait
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 792
            '.PageHeight = 612 * 2
        Case "A3 - Landscape"
            .PaperSize = wdPaperA3
            .Orientation = wdOrientLandscape
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 595.35 * 2
            '.PageHeight = 842
        Case "Tabloid/Ledger - Landscape"
            .PaperSize = wdPaperTabloid
            .Orientation = wdOrientLandscape
            .TopMargin = 99.25
            .BottomMargin = 81.5 ' 77.5 ' 44.5
            .LeftMargin = 70.9
            .RightMargin = 70.9
            .HeaderDistance = 31.2
            .FooterDistance = 21.85 ' 17.85
            '.PageWidth = 612 * 2
            '.PageHeight = 792
        End Select
    End With
    
NoReDo:
    SetTabs NewPaperFormat
    NewPaperFormat = ""
    
    Exit Sub
    
ErrorReDo:
    If useDocument Then
        Resume NoReDo
    Else
        useDocument = True
        Set obj = ThisDoc
        Resume ReDo
    End If
End Sub

Private Sub SetTabs(paperFormat As String)
    SetTabsOnStyle ThisDoc, paperFormat, "TOC1cp"
    SetTabsOnStyle ThisDoc, paperFormat, "Table of Figures"
End Sub

Private Sub SetTabsOnStyle(doc As Document, paperFormat As String, styleName As String)
    Dim tabStop As Double
    tabStop = doc.PageSetup.PageWidth - 141.8
    With doc.Styles(styleName)
        
        .AutomaticallyUpdate = False
        .ParagraphFormat.TabStops.ClearAll
        .ParagraphFormat.TabStops.Add Position:=85.05, Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
        Select Case paperFormat
        Case "A4 - Portrait"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "Letter - Portrait"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "A4 - Landscape"
            .ParagraphFormat.TabStops.Add Position:=tabStop + 85.05, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "Letter - Landscape"
            .ParagraphFormat.TabStops.Add Position:=tabStop + 85.05, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "A3 - Portrait"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "Tabloid/Ledger - Portrait"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "A3 - Landscape"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        Case "Tabloid/Ledger - Landscape"
            .ParagraphFormat.TabStops.Add Position:=tabStop, Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDots
        End Select
    End With
End Sub

Public Sub SetCaptions(figureOrTable As String)
    Dim collCC As ContentControls
    Dim aCC() As Variant
    Dim cc As ContentControl
    Dim ccRng As Range
    Dim rng As Range
    Dim rngInsert As Range
    Dim fld As field
    Dim code As String
    Dim idx As Integer
    
    Dim lastStyleref As String
    lastStyleref = ""
    Dim resetSeq As Boolean
    resetSeq = False
    
    
    Dim CaptionHeading As String
    Dim caption As String
    
    CaptionHeading = ReadText("/DocumentInfo/DocumentInfo-CaptionHeading")
    caption = ReadText("/DocumentLabel/DocumentLabel-" & figureOrTable & "Caption")
    
    Set collCC = ThisDoc.SelectContentControlsByTag("DocumentLabel-" & figureOrTable & "Caption")
    
    If collCC.Count > 0 Then
        ReDim aCC(collCC.Count - 1, 1) As Variant
        Dim i As Integer
        For i = 1 To collCC.Count
            aCC(i - 1, 1) = i
            aCC(i - 1, 0) = collCC(i).Range.start
        Next
        QuickSortArray aCC
        
        For i = 1 To collCC.Count
            idx = aCC(i - 1, 1)
            Set cc = collCC(idx)
            Set ccRng = cc.Range
            If ccRng.Text <> caption Then ccRng.Text = caption
        Next
        
        For i = 1 To collCC.Count
            idx = aCC(i - 1, 1)
            Set cc = collCC(idx)
            Set ccRng = cc.Range
            If ccRng.Text <> caption Then ccRng.Text = caption
            Set rng = ccRng.Paragraphs(1).Range
            'Debug.Print rng.Text
'            For Each fld In rng.fields
'                'Debug.Print fld.code.Text
'            Next
            If rng.fields.Count > 0 Then
                For Each fld In rng.fields
                    'If i = 3 Then Debug.Print fld.code.Text, fld.Result.Text
                    If Not Trim(LCase(fld.code.Text)) Like "ref*" Then fld.Update
                Next
                Set fld = rng.fields(1)
                code = Trim(LCase(fld.code.Text))
                If code Like "ref*" Then
                    'Xebug.Print code
                    ' fld.Update
                ElseIf Not InStr(1, code, caption, vbTextCompare) And Not Trim(LCase(fld.code.Text)) Like "styleref*" Then
                    'Xebug.Print code
                    If CaptionHeading <> "none" Then
                        Set rngInsert = ccRng.Duplicate
                        rngInsert.MoveEnd wdCharacter, 2
                        rngInsert.Collapse wdCollapseEnd
                        rngInsert.InsertAfter "-"
                        rngInsert.Collapse wdCollapseStart
                        Set fld = rngInsert.fields.Add(rngInsert)
                        fld.code.Text = "STYLEREF """ & CaptionHeading & """ \n"
                        fld.Update
                    End If
                Else
                    'Xebug.Print code
                    If CaptionHeading = "none" Then 'none
                        If Not code Like "seq*" Then
                            'Xebug.Print "none:Remove field"
                            Set rngInsert = fld.result.Duplicate
                            fld.Delete
                            rngInsert.MoveEnd wdCharacter, 1
                            rngInsert.Delete
                        End If
                        Set fld = rng.fields(rng.fields.Count)
                        fld.Update
                        If lastStyleref <> "1" Then
                            resetSeq = True
                        End If
                        lastStyleref = "1"
                    Else ' 1..3
                        If Trim(LCase(fld.code.Text)) Like "styleref*" Then
                            'Xebug.Print "1..3:update field"
                            If Not InStr(1, fld.code.Text, CaptionHeading, vbTextCompare) > 0 Then
                                fld.code.Text = "STYLEREF """ & CaptionHeading & """ \n"
                                fld.Update
                            End If
                            If lastStyleref <> fld.result.Text Then
                                resetSeq = True
                            End If
                            lastStyleref = fld.result.Text
                        Else
                            'Xebug.Print "1..3:insert seq field"
                            Set rngInsert = ccRng.Duplicate
                            rngInsert.MoveEnd wdCharacter, 2
                            rngInsert.Collapse wdCollapseEnd
                            rngInsert.InsertAfter "-"
                            rngInsert.Collapse wdCollapseStart
                            Set fld = rngInsert.fields.Add(rngInsert)
                            fld.code.Text = "STYLEREF """ & CaptionHeading & """ \n"
                            fld.Update
                        End If
                    End If
                    Set fld = rng.fields(rng.fields.Count)
                    'fld.Select
                    'Xebug.Print i, "Table", fld.Code.Text, fld.Code.Start, fld.Result.Text
                    If resetSeq Then
                        If Not LCase(fld.code.Text) Like "*\r*" Then
                            If Not (fld.code.Text = Replace(fld.code.Text & " \r 1", "  ", " ")) Then
                                fld.code.Text = Replace(fld.code.Text & " \r 1", "  ", " ")
                            End If
                        Else
                            'If Not (fld.code.Text = Replace(fld.code.Text, "  ", " ")) Then
                            '    fld.code.Text = Replace(fld.code.Text, "  ", " ")
                            'End If
                        End If
                    Else
                        If LCase(fld.code.Text) Like "*\r*" Then
                            If Not (fld.code.Text = Replace(Replace(Replace(fld.code.Text, "\r 1", ""), "\r1", ""), "  ", " ")) Then
                                fld.code.Text = Replace(Replace(Replace(fld.code.Text, "\r 1", ""), "\r1", ""), "  ", " ")
                            End If
                        Else
                            'If Not (fld.code.Text = Replace(fld.code.Text, "  ", " ")) Then
                            '    fld.code.Text = Replace(fld.code.Text, "  ", " ")
                            'End If
                        End If
                    End If
                    fld.Update
                    resetSeq = False
                End If
            End If
        Next
    End If
        
'    Set collCC = ThisDoc.SelectContentControlsByTag("DocumentLabel-" & figureOrTable & "Caption")
'
'    If collCC.Count > 0 Then
'        ReDim aCC(collCC.Count - 1, 1) As Variant
'        For i = 1 To collCC.Count
'            aCC(i - 1, 1) = i
'            aCC(i - 1, 0) = collCC(i).Range.Start
'        Next
'        QuickSortArray aCC
'
'        For i = 1 To collCC.Count
'            idx = aCC(i - 1, 1)
'            Set cc = collCC(idx)
'            Set ccRng = cc.Range
'            If ccRng.Text <> caption Then ccRng.Text = caption
''            Set rng = ccRng.Paragraphs(1).Range
''            'Xebug.Print rng.Text
''            If rng.fields.Count > 0 Then
''                Set fld = rng.fields(1)
''                code = Trim(LCase(fld.code.Text))
''                If code Like "ref*" Then
''                    fld.Update
''                End If
''            End If
'        Next
'
'    End If

End Sub

Public Function GetFirstContentControlByTag(tag As String) As ContentControl
    Dim ccs As ContentControls
    Set ccs = ThisDoc.SelectContentControlsByTag(tag)
    If ccs.Count = 0 Then
        Set GetFirstContentControlByTag = Nothing
    Else
        Set GetFirstContentControlByTag = ccs(1)
    End If
End Function

Public Sub ResetContentControls()
    Set ccRevisions = Nothing
    Set ccFrontPage = Nothing
    Set ccDocumentInformation = Nothing
    Set ccFileName = Nothing
    Set ccSupplierFileName = Nothing
    Set ccSupplierFileNameLabel = Nothing
    Set ccCopyright = Nothing
    Set ccDisclaimer = Nothing
    Set ccTranslation = Nothing
    Set ccTOC = Nothing
    Set ccTOF = Nothing
    Set ccTOT = Nothing
    Set ccTOCLabel = Nothing
    Set ccTOFLabel = Nothing
    Set ccTOTLabel = Nothing
    Set ccFrontPageHeader = Nothing
    Set ccFrontPageFooter = Nothing
End Sub

Public Sub GetMainDocInfo()
  
    CaptionHeading = ReadText("/DocumentInfo/DocumentInfo-CaptionHeading")
    If docType = "" Then docType = ReadText("/DocumentInfo/DocumentInfo-DocType")
    Set ccFrontMatter = GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation")
    Set ccRevisions = GetFirstContentControlByTag("DocumentInfo-Revisions:DocumentInformation")
    Set ccFrontPage = GetFirstContentControlByTag("DocumentInfo-FrontPage:FrontPage")
    Set ccDocumentInformation = GetFirstContentControlByTag("DocumentInfo-DocumentInformation:DocumentInformation")
    Set ccFileName = GetFirstContentControlByTag("DocumentInfo-FileName:DocumentInformation")
    Set ccSupplierFileName = GetFirstContentControlByTag("DocumentInfo-SupplierFileName:DocumentInformation")
    Set ccSupplierFileNameLabel = GetFirstContentControlByTag("DocumentLabel-SupplierFileName:DocumentInformation")
    Set ccCopyright = GetFirstContentControlByTag("DocumentInfo-Copyright:DocumentInformation")
    Set ccDisclaimer = GetFirstContentControlByTag("DocumentInfo-Disclaimer:DocumentInformation")
    Set ccTranslation = GetFirstContentControlByTag("DocumentInfo-Translation")
    Set ccTOC = GetFirstContentControlByTag("DocumentInfo-TOC:DocumentInformation")
    Set ccTOF = GetFirstContentControlByTag("DocumentInfo-TOF:DocumentInformation")
    Set ccTOT = GetFirstContentControlByTag("DocumentInfo-TOT:DocumentInformation")
    Set ccTOCLabel = GetFirstContentControlByTag("DocumentInfo-TOCLabel:DocumentInformation")
    Set ccTOFLabel = GetFirstContentControlByTag("DocumentInfo-TOFLabel:DocumentInformation")
    Set ccTOTLabel = GetFirstContentControlByTag("DocumentInfo-TOTLabel:DocumentInformation")
    Set ccFrontPageHeader = GetFirstContentControlByTag("DocumentInfo-Logo:FrontPageHeader")
    Set ccHeader = GetFirstContentControlByTag("DocumentInfo-Logo:Header")
    Set ccFrontPageFooter = GetFirstContentControlByTag("DocumentInfo-Copyright:FrontPageFooter")
    Set ccFooter = GetFirstContentControlByTag("DocumentInfo-Copyright:Footer")
    
    showFrontMatter = ReadText("/DocumentInfo/DocumentInfo-FrontMatter")
    If ThisBGD.NewTranslation Then
        showFrontMatter = "Translation"
    End If
    OldTranslation = Not (ccTranslation Is Nothing)
    
    If showFrontMatter = "Translation" Then
        ' Transfer text from line 1 to 5
        ShowFrontPage = ""
        ShowSupplierFileName = ""
        ShowDocumentInformation = ""
        ShowRevisions = ReadText("/DocumentInfo/DocumentInfo-RevisionHistory-Show")
        ShowTOC = ""
        ShowTOF = ""
        ShowTOT = ""
    Else
        ShowFrontPage = ReadText("/DocumentInfo/DocumentInfo-FrontPage")
        ShowSupplierFileName = ReadText("/DocumentInfo/DocumentInfo-SupplierFileName")
        ShowDocumentInformation = ReadText("/DocumentInfo/DocumentInfo-DocumentInformation")
        ShowRevisions = ReadText("/DocumentInfo/DocumentInfo-RevisionHistory-Show")
        ShowTOC = ReadText("/DocumentInfo/DocumentInfo-TOC")
        ShowTOF = ReadText("/DocumentInfo/DocumentInfo-TOF")
        ShowTOT = ReadText("/DocumentInfo/DocumentInfo-TOT")
    End If
    
    If showFrontMatter = "" _
    And (ShowFrontPage = "") _
    And (ShowSupplierFileName = "") _
    And (ShowDocumentInformation = "") _
    And (ShowRevisions = "") _
    And (ShowTOC = "") _
    And (ShowTOF = "") _
    And (ShowTOT = "") Then
       showFrontMatter = "Hide"
    End If
    
    If showFrontMatter = "" Then
        If (ShowFrontPage <> "Standard") <> (ccFrontPage Is Nothing) _
        Or (ShowSupplierFileName = "") <> (ccSupplierFileName Is Nothing) _
        Or (ShowDocumentInformation <> "Standard") <> (ccDocumentInformation Is Nothing) _
        Or (ShowRevisions <> "Standard") <> (ccRevisions Is Nothing) _
        Or (ShowTOC <> "Standard") <> (ccTOC Is Nothing) _
        Or (ShowTOF <> "Standard") <> (ccTOF Is Nothing) _
        Or (ShowTOT <> "Standard") <> (ccTOT Is Nothing) _
        Or Not ccTranslation Is Nothing Or showFrontMatter = "Translation" Then
           RebuildFrontMatter = True
        End If
    ElseIf showFrontMatter = "Translation" And ccTranslation Is Nothing Then
        RebuildFrontMatter = True
    ElseIf showFrontMatter = "Translation" Then
        RebuildFrontMatter = True
    End If
    
End Sub

Public Function ReloadTemplateStyles() As Boolean
    Dim ccs As Collection
    Set ccs = UnlockAllContentControls
    ThisDoc.CopyStylesFromTemplate (ThisDoc.attachedTemplate.fullName)
    LanguageUpdated = True
    SetLanguage
    LockAllContentControls ccs
    ReloadTemplateStyles = True
    
End Function

Public Function SetStyle(styNameOrNo As Variant) As Boolean
    Dim updated As Boolean
    updated = True
    
    On Error GoTo ReturnError
    Dim sty As Style
    Set sty = ThisDoc.Styles(styNameOrNo)
    Selection.Style = sty
    On Error GoTo 0

DoExit:
    SetStyle = updated
    Exit Function

ReturnError:
    updated = False
    Resume DoExit
End Function

Public Sub GetTranslation()
    Dim str As String
    Dim cc As ContentControl
    Set cc = GetFirstContentControlByTag("DocumentInfo-TitleLine1:Translation")
    Dim ccRevisions As ContentControl
    Set ccRevisions = GetFirstContentControlByTag("DocumentInfo-Revisions:DocumentInformation")
    If Not cc Is Nothing Then
        If cc.ShowingPlaceholderText Then
            str = ""
        Else
            str = ReplaceRText(Trim(cc.Range.Text))
        End If
        WriteText "/DocumentInfo/DocumentInfo-TitleLine1", str
    End If
    Set cc = GetFirstContentControlByTag("DocumentInfo-TitleLine2:Translation")
    If Not cc Is Nothing Then
        If cc.ShowingPlaceholderText Then
            str = ""
        Else
            str = ReplaceRText(Trim(cc.Range.Text))
        End If
        WriteText "/DocumentInfo/DocumentInfo-TitleLine2", str
    End If
    Set cc = GetFirstContentControlByTag("DocumentInfo-TitleLine3:Translation")
    If Not cc Is Nothing Then
        If cc.ShowingPlaceholderText Then
            str = ""
        Else
            str = ReplaceRText(Trim(cc.Range.Text))
        End If
        WriteText "/DocumentInfo/DocumentInfo-TitleLine3", str
    End If
    Set cc = GetFirstContentControlByTag("DocumentInfo-TitleLine4:Translation")
    If Not cc Is Nothing Then
        If cc.ShowingPlaceholderText Then
            str = ""
        Else
            str = ReplaceRText(Trim(cc.Range.Text))
        End If
        WriteText "/DocumentInfo/DocumentInfo-TitleLine4", str
    End If
    Set cc = GetFirstContentControlByTag("DocumentInfo-TitleLine5:Translation")
    If Not cc Is Nothing Then
        If cc.ShowingPlaceholderText Then
            str = ""
        Else
            str = ReplaceRText(Trim(cc.Range.Text))
        End If
        WriteText "/DocumentInfo/DocumentInfo-TitleLine5", str
    End If
    If Not ccRevisions Is Nothing Then
        Dim revisions As Integer
        Dim revisionsDoc As Integer
        Dim aRevHistDoc() As String
        Dim aRevHist() As String
        aRevHistDoc = ReadRevisions(False)
        
        'Merge with existing revision history
        aRevHist = ReadRevisionHistory
        
        revisions = UBound(aRevHist, 1) + 1
        revisionsDoc = UBound(aRevHistDoc, 1) + 1
        If revisions <> revisionsDoc Then
            MsgBox "Number of revisions has changed during translation", vbCritical + vbOKOnly, "Error in Translated Document"
        ElseIf revisions > 0 And aRevHist(0, 0) > "" Then
            'Copy revision descriptions
            Dim r As Integer
            For r = 0 To revisions - 1
                aRevHist(r, 3) = Replace(aRevHistDoc(revisions - r - 1, 3), Chr(11), vbCr)
            Next
            
            WriteText "/DocumentInfo/DocumentInfo-Revision", Replace(aRevHist(revisions - 1, 0), Chr(11), vbCr)
            WriteText "/DocumentInfo/DocumentInfo-Date", Replace(aRevHist(revisions - 1, 1), Chr(11), vbCr)
            WriteText "/DocumentInfo/DocumentInfo-Author", Replace(aRevHist(revisions - 1, 2), Chr(11), vbCr)
            WriteText "/DocumentInfo/DocumentInfo-Description", Replace(aRevHist(revisions - 1, 3), Chr(11), vbCr)
        Else
            WriteText "/DocumentInfo/DocumentInfo-Revision", GetNewMajor("")
            WriteText "/DocumentInfo/DocumentInfo-Date", Format(Now, "YYYY-MM-DD")
            WriteText "/DocumentInfo/DocumentInfo-Author", UserName
            WriteText "/DocumentInfo/DocumentInfo-Description", ""
        End If
        WriteRevisionHistory aRevHist
    End If
    
End Sub

Public Sub SetContentProperties(docType As String)
    Dim prop As MetaProperty
    Dim i As Integer
    Dim j As Integer
    Dim formula As String
    Dim field As String

    Set prop = Nothing
    On Error Resume Next
    Set prop = ThisDoc.ContentTypeProperties(1)
    On Error GoTo 0
    If prop Is Nothing Then Exit Sub

    For i = 2 To UBound(aDocumentTypes)
        If aDocumentTypes(i, 0) = docType Then
            Exit For
        End If
    Next
    
    For Each prop In ThisDoc.ContentTypeProperties
        Select Case prop.name
        Case "Title Line 1"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-TitleLine1")
        Case "Title Line 2"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-TitleLine2")
        Case "Title Line 3"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-TitleLine3")
        Case "Title Line 4"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-TitleLine4")
        Case "Title Line 5"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-TitleLine5")
        Case "Doc Type"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-DocType")
        Case "Classification Label"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-ClassificationLabel")
        Case "Project No."
            prop.value = ReadText("/DocumentInfo/DocumentInfo-ProjectNo")
        Case "Workflow Label"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-WorkflowLabel")
        Case "Additional ID"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-FrontPageInfo")
        Case "Doc No."
            prop.value = ReadText("/DocumentInfo/DocumentInfo-DocNo")
        Case "Supplier File Name"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-SupplierFileName")
        
        
        'Revision
        Case "Rev No."
            prop.value = ReadText("/DocumentInfo/DocumentInfo-Revision")
        Case "Rev Date"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-Date")
        Case "Rev Description"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-Description")
        Case "Rev Author"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-Author")
        
        ' Lookup
        Case "Doc Type"
            prop.value = docType
        Case "Doc Main Type"
            Dim DocMainType As String
            prop.value = "Project Document"
            DocMainType = "Project Document"
            For j = 0 To UBound(aDocumentTypes, 1)
                If aDocumentTypes(j, 0) = docType Then
                    prop.value = aDocumentTypes(j, 1)
                    Exit For
                End If
            Next
        Case "Language"
            Dim lang As String
            Dim l As Integer
            lang = ReadText("/DocumentInfo/DocumentInfo-Language")
            For l = 0 To UBound(aLanguages, 1)
                If aLanguages(l, 0) = lang Then
                    lang = aLanguages(l, 3)
                    Exit For
                End If
            Next
            If l > UBound(aLanguages, 1) Then
                prop.value = ""
            Else
                prop.value = lang
            End If
            If prop.validate > "" Then ' Failed
                prop.value = UCase(lang)
            End If
            If prop.validate > "" Then ' Failed again
                prop.value = lang
            End If
        ' RegEx From DocNo
        Case "Part"
            Dim strPart As String
            strPart = ReadText("/DocumentInfo/DocumentInfo-DocNo")
            If Not InStr(strPart, "/") > 0 Then
                strPart = "-"
            Else
                strPart = Trim(Split(strPart, "/")(0))
            End If
            prop.value = strPart
            If prop.validate > "" Then ' Failed
                If Len(strPart) > 1 Then
                    prop.value = Left(strPart, 1) & "-" & Mid(strPart, 2)
                End If
            End If
            If prop.validate > "" Then ' Failed again
                prop.value = strPart
            End If
        Case "Section"
            Dim strSection As String
            strSection = ReadText("/DocumentInfo/DocumentInfo-DocNo")
            If Not InStr(strSection, "/") > 0 Then
                strSection = "-"
            Else
                strSection = Trim(Split(strSection, "/")(1))
            End If
            prop.value = strSection
        ' Calculate from ProjectNo + DocNo
        Case "Doc Order"
            Dim strDocOrder As String
            Dim No1 As String
            Dim No2 As String
            Dim No3 As String
            Dim No4 As String
            Dim aNo() As String
            strDocOrder = ReadText("/DocumentInfo/DocumentInfo-DocNo")
            If Not InStr(strDocOrder, "/") > 0 Then
                strDocOrder = ""
            Else
                No1 = Trim(Split(strDocOrder, "/")(0))
                No4 = Trim(Split(strDocOrder, "/")(1))
                If No1 = "" Then
                    No1 = "0000"
                ElseIf Left(UCase(No1), 1) = "O" Then
                    No1 = "35" & Right("00" & No1, 2)
                ElseIf Left(UCase(No1), 1) = "M" Then
                    No1 = "55" & Right("00" & Mid(No1, 2), 2)
                Else
                    No1 = "75" & Right("00" & Mid(No1, 2), 2)
                End If
                If No4 > "" Then
                    No4 = Replace(No4, "-", "")
                    No2 = Left(No4, 1)
                    No3 = Mid(No4, 2)
                    No4 = ""
                End If
                If No3 = "" Then
                ElseIf InStr(No3, ".") > 0 Then
                    aNo = Split(No3, ".")
                    No3 = Right("00" & aNo(0), 2)
                    No4 = Right("00" & aNo(1), 2)
                Else
                    No3 = "00" & No3
                End If
                strDocOrder = No1 & No2 & No3 & No4
            End If
            prop.value = strDocOrder
        
        ' ????
        Case "Description"
            prop.value = ReadText("/DocumentInfo/DocumentInfo-Description")
        
        'Formula
        Case "Doc Title"
            If i <= UBound(aDocumentTypes) Then
                For j = 1 To UBound(aDocumentTypes, 2)
                    field = aDocumentTypes(0, j)
                    formula = aDocumentTypes(i, j)
                    Select Case field
                        Case "DocTitle"
                            prop.value = CalculateTitle(formula, Me)
                    End Select
                Next
            End If
        
        Case "Doc Search Title"
            If i <= UBound(aDocumentTypes) Then
                For j = 1 To UBound(aDocumentTypes, 2)
                    field = aDocumentTypes(0, j)
                    formula = aDocumentTypes(i, j)
                    Select Case field
                        Case "DocSearchTitle"
                            prop.value = CalculateTitle(formula, Me)
                    End Select
                Next
            End If
        
        End Select
        
        
        'Xebug.Print prop.name, prop.value 'If prop.value = "" Then
        'Xebug.Print "Case """ & prop.name & """"
        'Xebug.Print , "prop.Value = ReadText(""/DocumentInfo/DocumentInfo-" & Replace(Replace(prop.name, "Title ", "Title"), " ", "") & """)"
    Next

End Sub

Public Sub UpdateContentInformation()
    Dim DocNo As String
    Dim line1 As String
    Dim line2 As String
    Dim Line3 As String
    Dim Line4 As String
    Dim Line5 As String
    Dim title As String
    Dim Author As String
    Dim projectNo As String
    Dim NewTitle As String
    Dim NewSubject As String
    Dim docType As String
    Dim DocMainType As String
    Dim formula As String
    Dim field As String
    Dim i As Integer
    Dim j As Integer
    
    line1 = ReadText("/DocumentInfo/DocumentInfo-TitleLine1")
    line2 = ReadText("/DocumentInfo/DocumentInfo-TitleLine2")
    Line3 = ReadText("/DocumentInfo/DocumentInfo-TitleLine3")
    Line4 = ReadText("/DocumentInfo/DocumentInfo-TitleLine4")
    Line5 = ReadText("/DocumentInfo/DocumentInfo-TitleLine5")
    DocNo = ReadText("/DocumentInfo/DocumentInfo-DocNo")
    projectNo = ReadText("/DocumentInfo/DocumentInfo-ProjectNo")
    Author = ReadText("/DocumentInfo/DocumentInfo-Author")
    docType = ReadText("/DocumentInfo/DocumentInfo-DocType")
    
    CDP ThisDoc, "Title Line 1", msoPropertyTypeString, line1, True
    CDP ThisDoc, "Title Line 2", msoPropertyTypeString, line2, True
    CDP ThisDoc, "Title Line 3", msoPropertyTypeString, Line3, True
    CDP ThisDoc, "Title Line 4", msoPropertyTypeString, Line4, True
    CDP ThisDoc, "Title Line 5", msoPropertyTypeString, Line5, True
   
    CDP ThisDoc, "Doc No.", msoPropertyTypeString, DocNo, True
    CDP ThisDoc, "Project No.", msoPropertyTypeString, projectNo, True
    CDP ThisDoc, "Doc Type", msoPropertyTypeString, docType, True
    
    CDP ThisDoc, "TitleLine5", msoPropertyTypeString, Line5, True
    CDP ThisDoc, "BGProjectNumber", msoPropertyTypeString, projectNo, True
    CDP ThisDoc, "BGDocType", msoPropertyTypeString, docType, True
    
    DocMainType = "Project Document"
    For j = 0 To UBound(aDocumentTypes, 1)
        If aDocumentTypes(j, 0) = docType Then
            DocMainType = aDocumentTypes(j, 1)
            Exit For
        End If
    Next
            
    CDP ThisDoc, "BGDocMainType", msoPropertyTypeString, DocMainType, True
    ' Calculate Part and Section. Should be XML Properties
    
    Dim strPart As String
    Dim strSection As String
    
    strPart = ReadText("/DocumentInfo/DocumentInfo-DocNo")
    strSection = ReadText("/DocumentInfo/DocumentInfo-DocNo")
    
    If Not InStr(strPart, "/") > 0 Then
        strPart = "-"
    Else
        strPart = Trim(Split(strPart, "/")(0))
    End If
    
    '            If prop.validate > "" Then ' Failed
    '                If Len(strPart) > 1 Then
    '                    prop.value = Left(strPart, 1) & "-" & Mid(strPart, 2)
    '                End If
    '            End If
    '            If prop.validate > "" Then ' Failed again
    '                prop.value = strPart
    '            End If
    
    If Not InStr(strSection, "/") > 0 Then
        strSection = "-"
    Else
        strSection = Trim(Split(strSection, "/")(1))
    End If
    
    CDP ThisDoc, "BGSection", msoPropertyTypeString, strSection, True
    CDP ThisDoc, "BGPart", msoPropertyTypeString, strPart, True
    
    CDP ThisDoc, "Classification Label", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-ClassificationLabel"), True
    CDP ThisDoc, "Workflow Label", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-WorkflowLabel"), True
    CDP ThisDoc, "Additional ID", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-FrontPageInfo"), True
    CDP ThisDoc, "Supplier File Name", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-SupplierFileName"), True
    CDP ThisDoc, "Rev No.", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-Revision"), True
    CDP ThisDoc, "Rev Date", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-Date"), True
    CDP ThisDoc, "Rev Description", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-Description"), True
    CDP ThisDoc, "Rev Author", msoPropertyTypeString, ReadText("/DocumentInfo/DocumentInfo-Author"), True
    
    
    For i = 2 To UBound(aDocumentTypes)
        If aDocumentTypes(i, 0) = docType Then
            Exit For
        End If
    Next
    If i <= UBound(aDocumentTypes) Then
        For j = 1 To UBound(aDocumentTypes, 2)
            field = aDocumentTypes(0, j)
            formula = aDocumentTypes(i, j)
            Select Case field
                Case "DocSearchTitle"
                    CDP ThisDoc, "Doc Search Title", msoPropertyTypeString, CalculateTitle(formula, Me), True
                    CDP ThisDoc, "DocSearchTitle", msoPropertyTypeString, CalculateTitle(formula, Me), True
                Case "DocTitle"
                    CDP ThisDoc, "Doc Title", msoPropertyTypeString, CalculateTitle(formula, Me), True
                    CDP ThisDoc, "DocTitle", msoPropertyTypeString, CalculateTitle(formula, Me), True
            End Select
        Next
    End If
    
    If i <= UBound(aDocumentTypes) Then
        For j = 1 To UBound(aDocumentTypes, 2)
            field = aDocumentTypes(0, j)
            formula = aDocumentTypes(i, j)
            Select Case field
                Case "Title", "Subject"
                    ThisDoc.BuiltInDocumentProperties(field) = CalculateTitle(formula, Me)
            End Select
        Next
    Else ' Old Method
'        If DocNo > "" Then
'            NewTitle = DocNo
'            If Line3 > "" Then NewTitle = IIf(NewTitle > "", NewTitle & ", ", "") & Line3
'            If Line4 > "" Then NewTitle = IIf(NewTitle > "", NewTitle & " - ", "") & Line4
'            If Line5 > "" Then NewTitle = IIf(NewTitle > "", NewTitle & " - ", "") & Line5
'            If line1 > "" Then NewSubject = line1
'            If line2 > "" Then NewSubject = IIf(NewSubject > "", NewSubject & " - ", "") & line2
'        Else
'            NewTitle = projectNo
'            If line1 > "" Then NewTitle = IIf(NewTitle > "", NewTitle & ", ", "") & line1
'            If line2 > "" Then NewTitle = IIf(NewTitle > "", NewTitle & " - ", "") & line2
'            If Line3 > "" Then NewSubject = Line3
'            If Line4 > "" Then NewSubject = IIf(NewSubject > "", NewSubject & " - ", "") & Line4
'            If Line5 > "" Then NewSubject = IIf(NewSubject > "", NewSubject & " - ", "") & Line5
'        End If
'
'        If ThisDoc.BuiltInDocumentProperties("Author") <> Author Then
'            ThisDoc.BuiltInDocumentProperties("Author") = Author
'        End If
'
'        If ThisDoc.BuiltInDocumentProperties("Subject") <> NewSubject Then
'            ThisDoc.BuiltInDocumentProperties("Subject") = NewSubject
'        End If
'
'        Title = ThisDoc.BuiltInDocumentProperties("Title")
'        If Title <> NewTitle Then
'            ThisDoc.BuiltInDocumentProperties("Title") = NewTitle
'        End If
    End If
    SetContentProperties docType
End Sub

Function GetLanguageFromFileName(fileName As String) As String
    fileName = UCase(fileName)
    Dim RegExpObj As Object
    Dim matches As Object
    Dim lang As String
    Dim code As String
    Dim found As Boolean
    found = False
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Pattern = "[_0-9]([A-Z][A-Z])[_0-9\.]"
        If .Test(fileName) Then
            found = True
        End If
        If Not found Then
            .Pattern = "[_0-9]([A-Z][A-Z])([0-9A-Z]?[_0-9\.][0-9])."
            If .Test(fileName) Then
                found = True
            End If
        End If
        If found Then
            Set matches = .Execute(fileName)
            lang = matches(0).SubMatches(0)
            Dim i As Integer
            For i = 0 To UBound(aLanguages, 1)
                If aLanguages(i, 4) Like "*" & UCase(lang) & "*" Then
                    code = aLanguages(i, 0)
                    Exit For
                End If
            Next
            Select Case UCase(lang)
            Case "UK", "US"
                code = "2057"
            Case "DK"
                code = "1030"
            End Select
        Else
            code = ""
        End If
        
        
    End With
    GetLanguageFromFileName = code
End Function

Public Sub FixOldCaptions()
    Dim fld As field
    Dim fldStyleref As field
    
    Dim rng As Range
    Dim rngHead As Range
    Dim fixField As Boolean
    Dim cc As ContentControl
    
    Dim CaptionHeading As String
    Dim FigureCaption As String
    Dim TableCaption As String
    Dim rngFld As Range
    Dim sty As Style
    
    Dim caption As String
    Dim tag As String
    
    CaptionHeading = ReadText("/DocumentInfo/DocumentInfo-CaptionHeading")
    FigureCaption = ReadText("/DocumentLabel/DocumentLabel-FigureCaption")
    TableCaption = ReadText("/DocumentLabel/DocumentLabel-TableCaption")
    
    For Each fld In GetDocumentRange.fields
        fixField = False
        If fld.Type = wdFieldSequence Then
            Set rng = fld.result.Paragraphs.first.Range
            Set sty = rng.Style
            If Not rng.ContentControls.Count > 0 Then
                Set rngHead = rng.Duplicate
                'Xebug.Print fld.code, fld.result, fld.result.Paragraphs(1).Range.text, rngHead.ShapeRange.count, rngHead.InlineShapes.count, rngHead.fields.count, rng.ShapeRange.count, rng.InlineShapes.count, rng.fields.count
                If rngHead.fields.Count > 1 And Not (rngHead.fields(1).Type = wdFieldStyleRef) And Not (rngHead.fields(1).Type = wdFieldSequence) Then
                    'Xebug.Print "Extra Field"
                    rngHead.start = rngHead.fields(1).result.End + 1
                    On Error Resume Next ' !PLY Check this
                    rngHead.InsertParagraphBefore
                    On Error GoTo 0
                    rngHead.start = rngHead.start + 1
                    rngHead.Select
                End If
                Do While rngHead.ShapeRange.Count + rngHead.InlineShapes.Count > 0
                    'Application.screenUpdating = True
                    rngHead.SetRange rngHead.start + rngHead.ShapeRange.Count + rngHead.InlineShapes.Count, fld.code.start - 1
                    'rngHead.Select
                Loop
                'If rngHead.fields.count > 0 Then
                '    rngHead.SetRange rngHead.fields(rngHead.fields.count).code.End + 1, fld.code.start - 1
                'End If
                'If rngHead.fields.count > 0 Then
                '    rngHead.SetRange rngHead.fields(rngHead.fields.count).result.End + 1, fld.code.start - 1
                'End If
                rngHead.SetRange rngHead.start, fld.code.start - 1
                'rngHead.Select
                Dim rngBB As Range
                
                If fld.code Like "*Table*" Then
                    fixField = True
                    caption = TableCaption
                    tag = "DocumentLabel-TableCaption"
                    rngHead.Text = ""
                    Set rngBB = ThisDoc.attachedTemplate.BuildingBlockEntries("zzTableCaption").Insert(where:=rngHead, RichText:=True)
                    rng.Style = ThisDoc.Styles("CaptionTable")
                ElseIf fld.code Like "*Figure*" Then
                    fixField = True
                    caption = FigureCaption
                    tag = "DocumentLabel-FigureCaption"
                    'If rngHead.fields.count > 0 Then rngHead.fields(1).Delete
                    rngHead.Text = ""
                    Set rngBB = ThisDoc.attachedTemplate.BuildingBlockEntries("zzFigureCaption").Insert(where:=rngHead, RichText:=True)
                    rng.Style = ThisDoc.Styles(wdStyleCaption)
                End If
                If fixField Then
                        Set fldStyleref = rngBB.fields(1)
    
                        If CaptionHeading = "none" Then
                            Set rngFld = fldStyleref.result.Duplicate
                            fldStyleref.Delete
                            rngFld.MoveEnd
                            rngFld.Text = ""
                        Else
                            fldStyleref.code.Text = "STYLEREF """ & CaptionHeading & """ \n"
                        End If
                        
                        
                        Set rngFld = fld.result.Duplicate
                        rngFld.SetRange rngFld.End + 1, rngFld.End + 2
                        Do While (rngFld.Text = " " Or rngFld.Text = "." Or rngFld.Text = ":" Or rngFld.Text = vbTab)
                            rngFld.Text = ""
                            rngFld.SetRange rngFld.End, rngFld.End + 1
                        Loop
                        fld.Delete
                        rng.fields.Update
                End If
            End If
        End If
    Next
    
   Dim book As Bookmark
   Dim aCode() As String
   Dim bookRef As String
   Dim i As Integer
   
   For Each fld In GetDocumentRange.fields
        If fld.Type = wdFieldRef Then
            'fld.ShowCodes = True
            'Xebug.Print fld.code
            aCode = Split(Trim(fld.code.Text), " ")
            For i = 0 To UBound(aCode)
                If LCase(aCode(i)) Like "_ref*" Then
                    Exit For
                End If
            Next
            If i <= UBound(aCode) Then ' Found hidden bookmark reference
                bookRef = aCode(i)
                'Xebug.Print "=> " & bookRef
                Set book = Nothing
                On Error Resume Next
                Set book = ThisDoc.Bookmarks(bookRef)
                On Error GoTo 0
                If Not book Is Nothing Then
                    If book.Range.ContentControls.Count > 0 Then
                        If book.Range.Text Like "* " & vbTab Then
                            Set rng = book.Range.Duplicate
                            rng.SetRange book.Range.start, book.Range.End - 2
                            ThisDoc.Bookmarks.Add bookRef, rng
                        End If
                    End If
                    'fld.code.text = "REF " & bookRef & " \h"
                    'Xebug.Print book.Range.Text
                End If
            End If
            'fld.Update
        ElseIf fld.Type = WdFieldType.wdFieldPageRef Then
            'fld.ShowCodes = True
            'Xebug.Print fld.code
            aCode = Split(Trim(fld.code.Text), " ")
            For i = 0 To UBound(aCode)
                If LCase(aCode(i)) Like "_ref*" Then
                    Exit For
                End If
            Next
            If i <= UBound(aCode) Then ' Found hidden bookmark reference
                bookRef = aCode(i)
                'Xebug.Print "=> " & bookRef
                Set book = Nothing
                On Error Resume Next
                Set book = ThisDoc.Bookmarks(bookRef)
                On Error GoTo 0
                If Not book Is Nothing Then
                    If book.Range.ContentControls.Count > 0 Then
                        If book.Range.Text Like "* " & vbTab Then
                            Set rng = book.Range.Duplicate
                            rng.SetRange book.Range.start, book.Range.End - 2
                            ThisDoc.Bookmarks.Add bookRef, rng
                        End If
                    End If
                    'fld.code.text = "PAGEREF " & bookRef & " \h"
                    'Xebug.Print book.Range.Text
                End If
            End If
            'fld.Update
        End If
    Next fld
     
    
End Sub

Public Function ReadRevisions(Optional Sort As Boolean = True) As String()
    Dim aRevHist() As String
    ReDim aRevHist(0, 4)

    Dim str As String
    Dim strRev As String
    Dim tbl As Word.table
    Dim ce As Word.Cell
    Dim ce1 As Word.Cell
    Dim r As Word.row
    Dim r1 As Word.row
    Dim i As Integer
    Dim rng As Range
    Dim revisions As Integer
    revisions = 0
    Dim RevRevision As String
    Dim RevDateCP As String
    Dim RevInitials As String
    Dim RevComment As String
    Dim RevDate As String
    Dim revIndex As Integer
    revIndex = -1
    
    Set rng = ThisDoc.Content
    If rng.Tables.Count = 0 Then
        revIndex = -1
    End If
    If revIndex = -1 And rng.Tables.Count >= 1 Then
        Set tbl = rng.Tables(1)
        If tbl.Columns.Count = 4 Then
            revIndex = 1
        End If
    End If
    If revIndex = -1 And rng.Tables.Count >= 2 Then
        Set tbl = rng.Tables(2)
        If tbl.Columns.Count = 4 Then
            revIndex = 2
        End If
    End If
    If revIndex = -1 And rng.Tables.Count >= 3 Then
        Set tbl = rng.Tables(3)
        If tbl.Columns.Count = 4 Then
            revIndex = 3
        End If
    End If
    If revIndex = -1 Then
        revIndex = 0
    Else
        Set r = tbl.rows.Last
        Set r1 = tbl.rows.first
        Set ce = r.Cells(1)
        Set ce1 = r1.Cells(1)
        strRev = Replace(Trim(Left(ce1.Range.Text, Len(ce1.Range.Text) - 2)), ".", "")
        If strRev = "||" Or (Len(strRev) > 2 And (TableRevNames.exists(LCase(strRev)) Or RevNames Like "*|" & LCase(strRev) & "*")) Then '  Or LCase(strRev) = "rev" Or LCase(strRev) = "rev." Or LCase(strRev) = "ausg."
            Do While Not r.isFirst
                str = Trim(Left(ce.Range.Text, Len(ce.Range.Text) - 2))
                If str > "" And Not (str = "||" Or LCase(str) = "rev" Or LCase(str) = "rev." Or LCase(str) = "ausg.") Then
                    RevRevision = Trim(Replace(Replace(Replace(r.Cells(1).Range.Text, vbCr, ""), vbTab, ""), ChrW(7), ""))
                    RevDateCP = Trim(Replace(Replace(Replace(r.Cells(2).Range.Text, vbCr, ""), vbTab, ""), ChrW(7), ""))
                    RevInitials = Trim(Replace(Replace(Replace(r.Cells(3).Range.Text, vbCr, ""), vbTab, ""), ChrW(7), ""))
                    RevComment = Trim(Replace(r.Cells(4).Range.Text, ChrW(7), ""))
'                    If Len(RevRevision) > 1 Then RevRevision = Left(RevRevision, Len(RevRevision) - 1)
'                    If Len(RevInitials) > 1 Then RevInitials = Left(RevInitials, Len(RevInitials) - 1)
                    If Len(RevDateCP) > 1 Then
'                        RevDateCP = Left(RevDateCP, Len(RevDateCP) - 1)
                        RevDate = GetDateFromCrisplantDate(RevDateCP)
                        If IsDate(RevDate) Then
                            RevDate = Format(RevDate, "YYYY-MM-DD")
                        End If
                    End If
                    If Len(RevComment) > 0 Then
                        Do While Right(RevComment, 1) = vbCr Or Right(RevComment, 1) = vbLf
                            RevComment = Trim(Left(RevComment, Len(RevComment) - 1))
                        Loop
                    End If
                    If RevRevision & RevDateCP & RevInitials & RevComment > "" Then
                        revisions = revisions + 1
                        ReDimPreserve aRevHist, revisions - 1, 4
                        aRevHist(revisions - 1, 0) = RevRevision
                        aRevHist(revisions - 1, 1) = RevDate
                        aRevHist(revisions - 1, 2) = IIf(LCase(RevInitials) = "init", "Full Name", RevInitials)
                        aRevHist(revisions - 1, 3) = RevComment
                    End If
                End If
                Set r = r.Previous
                Set ce = r.Cells(1)
            Loop
            If Sort Then aRevHist = OrderRevisionHistory(aRevHist)
        Else
            revIndex = 0
        End If
    End If
    RevisionTableIndex = revIndex
    ReadRevisions = aRevHist
End Function

Public Function MoveTextBoxesToLastPage() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    
    Dim shp As Shape
    Dim i As Integer
    
    Dim rng As Range
    Set rng = ThisDoc.Content
    rng.SetRange 0, 0
    rng.Select
    rng.End = Selection.Bookmarks("\Page").Range.End
    
    Selection.EndKey Unit:=wdStory
    Selection.InsertBreak Type:=wdPageBreak
    Selection.InsertAfter "LastPage - Delete Again"
    
    For i = rng.ShapeRange.Count To 1 Step -1
        Set shp = rng.ShapeRange(i)
        If shp.Type = msoTextBox Then
            shp.LockAnchor = False
            shp.Select
            Selection.copy
            ThisDoc.Paragraphs.Last.Range.Select
            Selection.Collapse wdCollapseEnd
            Selection.PasteAndFormat wdPasteDefault
        End If
    Next
    ok = True
    
ExitIt:
    On Error GoTo 0
    MoveTextBoxesToLastPage = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        ok = False
        Resume ExitIt
    End Select
End Function

Public Function MoveTextBoxesToFirstPage() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    
    Dim shp As Shape
    Dim i As Integer
    
    Dim rng As Range
    
    ThisDoc.Content.Paragraphs.Last.Range.Select
    'Selection.Collapse wdCollapseStart
    'Selection.Bookmarks("\Page").Range.Select
    Set rng = Selection.Range
    For i = rng.ShapeRange.Count To 1 Step -1
        Set shp = rng.ShapeRange(i)
        If shp.Type = msoTextBox Then
            shp.LockAnchor = False
            shp.Select
            Selection.Cut
            ThisDoc.Paragraphs.first.Range.Select
            Selection.Collapse wdCollapseStart
            Selection.PasteAndFormat wdPasteDefault
        End If
    Next
    
    Dim strt As Long
    strt = ThisDoc.GoTo(wdGoToPage, wdGoToLast).start
    Set rng = ThisDoc.Range(strt - 1, ThisDoc.Range.End)
    rng.Delete

'    ThisDoc.Content.Paragraphs.Last.Range.Select
'    Selection.Delete

    ok = True
    
ExitIt:
    On Error GoTo 0
    MoveTextBoxesToFirstPage = ok
    Exit Function

Failed:
    Select Case Err.Number
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        ok = False
        Resume ExitIt
    End Select
End Function

Public Function ReadRevisionHistoryFromCommnets(comments As String) As String()
    Dim aRevHist() As String
    ReDim aRevHist(0, 4)
    Dim revisions As Integer
    revisions = 0

    Dim IsRevisionHistory As Boolean
    IsRevisionHistory = True
    Dim str As Variant
    Dim aComments() As String
    Dim aRevision() As String
    aComments = Split(Replace(comments, vbCr, vbLf), vbLf)
    For Each str In aComments
        'Xebug.Print Trim(str)
        If InStr(str, ": ") <= 0 Then
            IsRevisionHistory = False
        Else
            aRevision = Split(Trim(str), ": ", 2)
            If UBound(aRevision) = 1 Then
                If Not IsNumeric(Trim(aRevision(0))) Then
                    IsRevisionHistory = False
                Else
                    If Not Fix(Trim(aRevision(0)) = Trim(aRevision(0))) Then
                        IsRevisionHistory = False
                    Else ' Valid
                        revisions = revisions + 1
                        ReDimPreserve aRevHist, revisions - 1, 4
                        aRevHist(revisions - 1, 0) = "0_" & Fix(Trim(aRevision(0)))
                        aRevHist(revisions - 1, 1) = ""
                        aRevHist(revisions - 1, 2) = ""
                        aRevHist(revisions - 1, 3) = Trim(aRevision(1))
                        'Xebug.Print Fix(Trim(aRevision(0))), Trim(aRevision(1))
                    End If
                End If
            Else
                IsRevisionHistory = False
            End If
        End If
    Next
    'Xebug.Print IsRevisionHistory
    ReadRevisionHistoryFromCommnets = aRevHist
End Function

Public Function GetDocumentRange() As Range
    Dim rng As Range
    Dim ccFrontMatter As ContentControl
    Set ccFrontMatter = GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation")
    Set rng = ThisDoc.Range
    If Not ccFrontMatter Is Nothing Then
        rng.start = ccFrontMatter.Range.End + 1
    End If
    Set GetDocumentRange = rng
End Function

Public Sub ReplaceWith(rng As Range, str As String)
    Dim find As String
    Dim repl As String
    Dim Registered As Boolean
    Dim aStr() As String
    aStr = Split(str, "|")
    find = aStr(0)
    repl = aStr(1)
        
    Dim repStr As String
    repStr = str
    rng.find.ClearFormatting
    rng.find.Replacement.ClearFormatting
    With rng.find
        .Text = find
        .Replacement.Text = repl
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = True
        .MatchWholeWord = True
        .MatchByte = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    rng.find.Execute Replace:=wdReplaceAll
End Sub

Public Sub CheckProductNames()
    Dim m As Integer
    Dim s As Integer
    Dim match
    Dim submatch As String
    Dim t As Integer
    Dim fi As String
    Dim rep As String
    Dim i As Integer
    Dim rng As Range
    
    Dim W As Long
    Dim guard As String
    Dim str As String
    
    Dim re As Object
    Dim matches As Object
    Dim fiMatches As Object
    Dim repMatches As Object
    Dim IsMatch As Boolean
    Dim iwordsCI As Integer
    Dim iwords As Integer
    Dim wordFound As String
    Dim symbolFound As String
    
    Dim fiFound As String
    Dim fiSymbolFound As String
    Dim repFound As String
    Dim repSymbolFound As String
    Dim repl As String
    Dim words As Scripting.Dictionary
    Dim wordsCI As Scripting.Dictionary
    Dim wordAT As Scripting.Dictionary
    Dim guardAT As Scripting.Dictionary
    Dim symbolAT As Scripting.Dictionary
    Dim replWith As Scripting.Dictionary
    Dim AllCaps As Boolean
    
    
    Dim c As Collection
    Dim fixes As Boolean
    Dim Loops As Integer
    fixes = True
    Loops = 0
    'Xebug.Print Now
    AllCaps = ThisDoc.Styles(WdBuiltinStyle.wdStyleHeading1).Font.AllCaps
    If AllCaps Then ThisDoc.Styles(WdBuiltinStyle.wdStyleHeading1).Font.AllCaps = False
    
CheckTerms:
    Do While fixes And Loops <= 3
        
        Set words = New Scripting.Dictionary
        Set wordsCI = New Scripting.Dictionary
        Set wordAT = New Scripting.Dictionary
        Set guardAT = New Scripting.Dictionary
        Set symbolAT = New Scripting.Dictionary
        Set replWith = New Scripting.Dictionary
        wordsCI.CompareMode = vbTextCompare ' Text Compare
        
        fixes = False
        Loops = Loops + 1
        str = Replace(Replace(Replace(Replace(Replace(GetDocumentRange.Text, vbCr, " x "), vbLf, " x "), vbTab, " x "), vbCrLf, " x "), Chr(7), " x ")
        
        Set re = CreateObject("vbscript.regexp")
        With re
            .IgnoreCase = True
            .Global = True
            .Pattern = "([\w-]+)([|fffd|||fffd|]?)" '"([^ ,.()'""!?;|fffd||fffd|]+)([|fffd|||fffd|]?)" ' "([^ |fffd||fffd|]+)([|fffd|||fffd|]?)" ' "([^\r\n \t|fffd||fffd|]+)([|fffd|||fffd|]?)" '"(\b[^\s]+\b)([|fffd|||fffd|]?)"
            If .Test(str) Then
                Set matches = .Execute(str)
                For m = 0 To matches.Count - 1
                    Set match = matches(m)
                    wordFound = match.SubMatches(0)
                    symbolFound = match.SubMatches(1)
                    If Not words.exists(wordFound) Then
                        Set c = New Collection
                        c.Add m
                        words.Add wordFound, c
                    Else
                        words(wordFound).Add m
                    End If
                    If Not wordsCI.exists(wordFound) Then
                        Set c = New Collection
                        c.Add m
                        wordsCI.Add wordFound, c
                    Else
                        wordsCI(wordFound).Add m
                    End If
                    wordAT.Add m, wordFound
                    symbolAT.Add m, symbolFound
                    'Xebug.Print match, submatch, match.FirstIndex
                Next
                
                For t = UBound(aTerms, 1) To 0 Step -1
                    fi = aTerms(t, 0)
                    rep = aTerms(t, 1)
                    If .Test(fi) And .Test(rep) Then
                        'If t = 15 Then Stop
                        Set fiMatches = .Execute(fi)
                        Set match = fiMatches(0)
                        fiFound = match.SubMatches(0)
                        fiSymbolFound = match.SubMatches(1)
                        Set repMatches = .Execute(rep)
                        Set match = repMatches(0)
                        repFound = match.SubMatches(0)
                        repSymbolFound = match.SubMatches(1)
                        
                        If wordsCI.exists(fiFound) Then
                            For iwordsCI = 1 To wordsCI(fiFound).Count
                                IsMatch = True
                                W = wordsCI(fiFound).Item(iwordsCI)
                                If fiSymbolFound > "" And symbolAT(W) <> fiSymbolFound Then IsMatch = False
                                For m = 1 To fiMatches.Count - 1
                                    If LCase(wordAT(W + m)) <> LCase(fiMatches(m).SubMatches(0)) Then IsMatch = False
                                    If fiMatches(m).SubMatches(1) > "" And symbolAT(W + m) <> fiMatches(m).SubMatches(1) Then IsMatch = False
                                Next
                                If IsMatch Then
                                    'Xebug.Print "Found at "; w, fi, fiFound, fiSymbolFound
                                    ' Check if already formatted correct
                                    W = wordsCI(fiFound).Item(iwordsCI)
                                    If wordAT(W) <> repFound Then IsMatch = False
                                    If repSymbolFound > "" And symbolAT(W) <> repSymbolFound Then IsMatch = False
                                    repl = wordAT(W) & IIf(repSymbolFound > "", symbolAT(W), "")
                                    For m = 1 To repMatches.Count - 1
                                        If wordAT(W + m) <> repMatches(m).SubMatches(0) Then IsMatch = False
                                        If repMatches(m).SubMatches(1) > "" And symbolAT(W + m) <> repMatches(m).SubMatches(1) Then IsMatch = False
                                        repl = repl & " " & wordAT(W + m) & IIf(repMatches(m).SubMatches(1) > "", symbolAT(W + m), "")
                                    Next
                                    For m = 0 To repMatches.Count - 1
                                        guard = CStr(W + m)
                                        If Not guardAT.exists(guard) Then
                                            guardAT.Add guard, True
                                        Else
                                            IsMatch = True
                                        End If
                                    Next
                                    If Not IsMatch Then
                                        'Xebug.Print "Replace '" & repl & "' at " & w & " with '" & rep & "'"
                                        If Not replWith.exists(repl & "|" & rep) Then
                                            replWith.Add repl & "|" & rep, True
                                        End If
                                    Else
                                        'Xebug.Print "Keep '" & repl & "' at " & w & " since it matches '" & rep & "'"
                                    End If
                                End If
                            Next
                        Else
                            'Xebug.Print "Not Found", fiFound, fiSymbolFound
                        End If
                    End If
    '                Debug.Print fi, rep
                Next
                Dim strR As Variant
                For Each strR In replWith
                    fixes = True
                    'Xebug.Print strR
                    ReplaceWith GetDocumentRange, CStr(strR)
                Next
            End If
        End With
        'Xebug.Print
    Loop
    
    str = Replace(Replace(Replace(Replace(Replace(GetDocumentRange.Text, vbCr, " x "), vbLf, " x "), vbTab, " x "), vbCrLf, " x "), Chr(7), " x ")
    If InStr(str, "|fffd||fffd|") > 0 Then
        Set rng = GetDocumentRange
        rng.find.Font.reset
        With rng.find
            .Text = "|fffd||fffd|"
            .Replacement.Text = "|fffd|"
            .Wrap = wdFindContinue
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        rng.find.Execute Replace:=wdReplaceAll
    End If
    
    str = Replace(Replace(Replace(Replace(Replace(GetDocumentRange.Text, vbCr, " x "), vbLf, " x "), vbTab, " x "), vbCrLf, " x "), Chr(7), " x ")
    If InStr(str, "|fffd||fffd|") > 0 Then
        Set rng = GetDocumentRange
        rng.find.Font.reset
        With rng.find
            .Text = "|fffd||fffd|"
            .Replacement.Text = "|fffd|"
            .Wrap = wdFindContinue
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        rng.find.Execute Replace:=wdReplaceAll
    End If
    
    
    str = Replace(Replace(Replace(Replace(Replace(GetDocumentRange.Text, vbCr, " x "), vbLf, " x "), vbTab, " x "), vbCrLf, " x "), Chr(7), " x ")
    If InStr(str, "|fffd|") > 0 Then
        Set rng = GetDocumentRange
        rng.find.Font.Superscript = False
        rng.find.Replacement.Font.Superscript = True
        With rng.find
            .Text = "|fffd|"
            .Replacement.Text = "|fffd|"
            .Wrap = wdFindContinue
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        rng.find.Execute Replace:=wdReplaceAll
    End If
        
    Set rng = GetDocumentRange
    rng.find.ClearFormatting
    rng.find.Replacement.ClearFormatting
    Set rng = GetDocumentRange
    With rng.find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    If AllCaps Then ThisDoc.Styles(WdBuiltinStyle.wdStyleHeading1).Font.AllCaps = True
End Sub

Public Sub FixBookmarks()
    Dim rng As Range
    Dim book As Bookmark
    Dim fld As field
    Dim str As String
    
    Dim books As New Scripting.Dictionary
    Dim refs As New Scripting.Dictionary
    Dim failrefs As New Scripting.Dictionary
    
    books.CompareMode = TextCompare
    refs.CompareMode = TextCompare
    failrefs.CompareMode = TextCompare
    
    Set rng = ThisDoc.Range
    rng.Bookmarks.ShowHidden = True
    
    For Each book In rng.Bookmarks
        books.Add book.name, book
    Next
    rng.Bookmarks.ShowHidden = False
    
    Set rng = ThisDoc.Range
    
    Dim RegExpObj As Object
    Dim matches As Object
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .IgnoreCase = True
        .Pattern = "(_(?:REF|TOC|HLT|PAGEREF)\d*)"
        For Each fld In rng.fields
            str = fld.code.Text
            If .Test(fld.code.Text) Then
                Set matches = .Execute(fld.code.Text)
                'Xebug.Print str, matches(0)
                str = CStr(matches(0))
                If books.exists(str) Then
                    books.Remove str
                    If Not refs.exists(str) Then
                        refs.Add str, fld
                    End If
                Else
                    If Not refs.exists(str) Then
                        If Not failrefs.exists(str) Then
                            failrefs.Add str, fld
                        End If
                    End If
                End If
            End If
        Next
    End With
    With RegExpObj
        .IgnoreCase = True
        .Pattern = "REF [^\\]*(.*)"
        For Each fld In rng.fields
            If fld.Type = wdFieldRef Then
                str = fld.code.Text
                If .Test(fld.code.Text) Then
                    Set matches = .Execute(fld.code.Text)
                    'Xebug.Print str, matches(0)
                    str = CStr(matches(0).SubMatches(0))
                    If Not LCase(str) Like "*\h*" Then
                        fld.code.Text = Trim(Replace(fld.code.Text & " \h ", "  ", " "))
                        fld.Update
                    End If
                End If
            End If
        Next
    End With
    Dim v As Variant 'Delete unused hidden bookmarks
    For Each v In books
        If Left(v, 1) = "_" Then
            ThisDoc.Bookmarks(v).Delete
        End If
    Next
End Sub

Public Function RemoveR0Fields() As Boolean
On Error GoTo Failed
    Dim ok As Boolean
    Dim fld As field
    Dim fldPrev As field
    Dim seq As String
    
    seq = "zzzzzzzzz"
    For Each fld In GetDocumentRange.fields
        If LCase(fld.code.Text) Like "*seq *\r0*" Then
            Set fldPrev = fld
            seq = Mid(Trim(Split(Trim(fld.code.Text), "\r0 \h", , vbTextCompare)(0)), 5)
            'Xebug.Print fld.code.Text, seq
        ElseIf LCase(fld.code.Text) Like LCase("*seq " & seq & "*") And Not LCase(fld.code.Text) Like LCase("*\r*") Then
            fld.Select
            'Xebug.Print fld.code.Text, seq
            fld.code.Text = Replace(fld.code.Text, seq, seq & " \r1", , , vbTextCompare)
            fldPrev.Delete
            fld.Update
            seq = "zzzzzzzzz"
        Else
            Set fldPrev = Nothing
            seq = "zzzzzzzzz"
        End If
    Next
    
    ok = True
ExitIt:
    On Error GoTo 0
    RemoveR0Fields = ok
    Exit Function
   
Failed:
    Select Case Err.Number
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Stop
        Resume Next
        ok = False
        Resume ExitIt
    End Select
End Function

Public Sub CheckParagraphs()  ' SLOW. Rewrite
    
    FoundHeadingOrParmheadOrHeadingPart = False
    FoundCaptionRes = False
    Dim breakBefore As Boolean
    Dim sty As Style
    Dim rng As Range
    Dim para As Paragraph
    ThisDoc.Bookmarks.ShowHidden = True
    Dim i As Long
    i = -1
    For Each para In GetDocumentRange.Paragraphs
        Set rng = para.Range
        If Not rng.Style Is Nothing Then
            Set sty = rng.Style
        End If
        DoEvents
        i = i + 1
'        If i Mod 100 = 0 Then
'        Debug.Print i, Now
'        If Application.ScreenUpdating = True Then
''            Stop
'            Application.ScreenUpdating = False
'        End If
'        End If
        If Not sty Is Nothing Then
            If sty >= ThisDoc.Styles(wdStyleHeading1) And sty <= ThisDoc.Styles(wdStyleHeading9) Then
                If method = "Convert" Then breakBefore = rng.ParagraphFormat.PageBreakBefore
                sty = sty
                If method = "Convert" Then rng.ParagraphFormat.PageBreakBefore = breakBefore
                If sty <= ThisDoc.Styles(wdStyleHeading8) Then
                    FoundHeadingOrParmheadOrHeadingPart = True
                End If
            ElseIf sty = "wpsDumps" Then
                ConvertWPSDumpFontLine para
            ElseIf sty Like "LineDraw*" Then
                CourierNewToMSLineDraw rng
            ElseIf sty = "CaptionRes" Then
                If rng.fields.Count > 0 Then
                    Dim IsSeq As Boolean
                    Dim IsRef As Boolean
                    Dim strField As String
                    Dim strResult
                    strField = rng.fields(1).code
                    strResult = rng.fields(1).result
                    IsSeq = (LCase(strField) Like "*seq*")
                    IsRef = (LCase(strField) Like "*ref*" And Not LCase(strField) Like "*\r*")
                    Dim bk As Bookmark
                    Dim aBKName() As String
                    Dim bkName As String
                    Set bk = Nothing
                    Dim iBK As Integer
                    If rng.Bookmarks.Count > 0 Then
                        ReDim aBKName(1 To rng.Bookmarks.Count)
                        For iBK = UBound(aBKName) To 1 Step -1
                            Set bk = rng.Bookmarks(iBK)
                            aBKName(iBK) = bk.name
                            bk.Delete
                        Next
                    Else
                        Erase aBKName
                    End If
                    If IsSeq Then
                        Dim rngSeq As Range
                        Set rngSeq = rng
                        FoundCaptionRes = True
                        rngSeq.End = rngSeq.End - 1
                        Do While rng.ShapeRange.Count > 0
                            rngSeq.start = rngSeq.start + 1
                        Loop
                        If InStr(rngSeq.Text, vbTab) > 0 Then
                            rngSeq.Text = Split(rngSeq.Text, vbTab, 2)(1)
                        Else
                            rngSeq.Text = Trim(Split(rngSeq.Text, strResult, 2)(1))
                        End If
                        If (Not aBKName) = -1 Then
                        Else
                            For iBK = 1 To UBound(aBKName)
                                Set bk = ThisDoc.Bookmarks.Add(aBKName(iBK), rngSeq)
                            Next
                        End If
                        sty = wdStyleHeading1
                        rng.ParagraphFormat.TabStops.ClearAll
                        rng.Paragraphs.TabStops.Add Position:=64.05, Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
                    ElseIf IsRef Then
                        Dim rngRef As Range
                        Set rngRef = rng
                        Dim fieldNo As field
                        Set rngRef = rng
                        Do While rngRef.ShapeRange.Count > 0
                            rngRef.start = rng.start + 1
                        Loop
                        rngRef.End = rng.start
                        rngRef.Text = vbTab
                        rngRef.End = rng.start
                        Set fieldNo = rngRef.fields.Add(rng, wdFieldEmpty, Trim(strField) & " \r")
                        
                        If (Not aBKName) = -1 Then
                        Else
                            For iBK = 1 To UBound(aBKName)
                                Set bk = ThisDoc.Bookmarks.Add(aBKName(iBK), rngRef)
                            Next
                        End If
                    End If
                End If
            ElseIf sty = "ParmHead" Then
                FoundHeadingOrParmheadOrHeadingPart = True
            ElseIf sty = "HeadingPart" Then
                FoundHeadingOrParmheadOrHeadingPart = True
            End If
        End If
    Next
End Sub

'--------------------------------------------------------------------------------------
' Update
'--------------------------------------------------------------------------------------

Public Sub UpdatePrepare()
    Dim rngInsert As Range
    Application.ScreenUpdating = ScreenUpdating
    
    WriteLog "Reading document information"
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If

    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument

    Set rngReturnTo = Selection.Range
    
    Selection.Range.MoveEnd wdStory
    
    LockMainContentControls False
    If rngReturnTo.start + 1 >= ThisDoc.Range.End Then
        gotoEnd = True
    End If
    
    SetLanguage
    GetMainDocInfo
    
    If Len(ThisDoc.BuiltInDocumentProperties("Comments").value) > 200 Then
        If Left(ThisDoc.BuiltInDocumentProperties("Comments").value, 20) Like "*|||Languages*" And Not ThisDoc.name Like "BGdoc.dotm" Then
            ThisDoc.BuiltInDocumentProperties("Comments").value = ""
        End If
    End If
    
'    Set rngInsert = ThisDoc.Range(0, 0)
'    rngInsert.Collapse wdCollapseStart
'    rngInsert.Select
    
    If ThisDoc.Range.End > 0 Then
        ThisDoc.Range(ThisDoc.Range.End - 1, ThisDoc.Range.End).Select
        Selection.Range.Collapse wdCollapseEnd
        Selection.Range.start = Selection.Range.End
    End If
   
    If showFrontMatter = "Translation" Then
        WriteLog "Reading translated information"
        If DoReadTranslation Then GetTranslation
        If Not ccFrontMatter Is Nothing Then
            ccFrontMatter.Delete True
            Set ccFrontMatter = Nothing
            ThisDoc.Range.Paragraphs(1).Range.Delete
        End If
        ResetContentControls
    End If

    SetPageHeight
    
End Sub

Public Sub UpdateDocumentRangeFields()
    Dim flds As fields
    Dim fld As field
    Dim fldPrev As field
    Set flds = GetDocumentRange.fields
    Dim fldCount As Integer
    fldCount = flds.Count
    
'    Set fld = flds(fldCount)
'    Do While Not fld Is Nothing
'        Set fldPrev = fld.Previous
'        fld.Update
'        Set fld = fldPrev
'    Loop
    
    Dim i As Integer
    For i = fldCount To 1 Step -1
        Set fld = flds(i)
        'Xebug.Print fld.code.text
        fld.Update
    Next
End Sub

Public Sub UpdateDocumentRangeFieldsPageRef()
    Dim flds As fields
    Dim fld As field
    Dim fldPrev As field
    Set flds = GetDocumentRange.fields
    Dim fldCount As Integer
    fldCount = flds.Count
    If Not fldCount = 0 Then
        Set fld = flds(fldCount)
        Do While Not fld Is Nothing
            Set fldPrev = fld.Previous
            If fld.Type = wdFieldPageRef Then
                fld.Update
            End If
            Set fld = fldPrev
        Loop
    End If
End Sub

Private Function UpdateStylesAndParagraphs()
'    WriteLog "Updating heading styles"
    
    If ReadText("/DocumentInfo/DocumentInfo-HeadingLayout") = "" Or HasChanged("HeadingLayout") Or method = "Convert" Then
        WriteLog "Updating heading styles, Check paragraphs"
        HeadingLayout = ReadText("/DocumentInfo/DocumentInfo-HeadingLayout")
        
        Select Case HeadingLayout
        Case "Spare Parts Catalogue"
            'ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 3
            ThisDoc.Styles(wdStyleHeading1).Font.Position = -3
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 0
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = True
            
            SetHeadingListTemplateColor wdColorBlack
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 3
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
        
            
            ' New Test
            ThisDoc.Styles(wdStyleHeading1).Font.size = 12
            ThisDoc.Styles(wdStyleHeading1).Font.Position = -3
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 0
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = True
            
            ThisDoc.Styles(wdStyleHeading2).Font.size = 12
            ThisDoc.Styles(wdStyleHeading2).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading2).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading2).ParagraphFormat.PageBreakBefore = False
 
            ThisDoc.Styles(wdStyleHeading3).Font.AllCaps = False
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 3
            ThisDoc.Styles("TOC1cp").Font.size = 12
            ThisDoc.Styles("TOC1cp").Font.Bold = True
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles("TOC2cp").Font.AllCaps = False
            ThisDoc.Styles("TOC2cp").Font.size = 10
            ThisDoc.Styles("TOC2cp").Font.Bold = True
            
            ThisDoc.Styles("TOC3cp").Font.AllCaps = False
            ThisDoc.Styles("TOC3cp").Font.Bold = False
        
        
        Case "No Numbering, No Page Break"
            'ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 18
            'ThisDoc.Styles(wdStyleHeading1).Font.Position = -18
            
'            ThisDoc.Styles(wdStyleHeading1).Font.Position = 0 ' 2019-07-30
'
'            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 0
'
'            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
'            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = False
'            SetHeadingListTemplateColor wdColorWhite
'
'            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 18
'            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 18
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles(wdStyleHeading1).Font.size = 14
            ThisDoc.Styles(wdStyleHeading1).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 10
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
            ' Special
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading2).Font.size = 12
            ThisDoc.Styles(wdStyleHeading2).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading2).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading2).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading3).Font.AllCaps = False
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 12
            ThisDoc.Styles("TOC1cp").Font.size = 12
            ThisDoc.Styles("TOC1cp").Font.Bold = True
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles("TOC2cp").Font.AllCaps = False
            ThisDoc.Styles("TOC2cp").Font.size = 10
            ThisDoc.Styles("TOC2cp").Font.Bold = True
            
            ThisDoc.Styles("TOC3cp").Font.AllCaps = False
            ThisDoc.Styles("TOC3cp").Font.Bold = False
            
            ThisDoc.Styles("HeadingFrontPage").Font.size = 14
            ThisDoc.Styles("HeadingFrontPage").Font.AllCaps = False
            ThisDoc.Styles("HeadingFrontPage").ParagraphFormat.SpaceBefore = 4
            ' Special
            SetHeadingListTemplateColor wdColorWhite
            
            
        Case "No Page Break"
'            'ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 18
'            ThisDoc.Styles(wdStyleHeading1).Font.Position = -18
'            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 0
'
'            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
'            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = False
'            SetHeadingListTemplateColor wdColorBlack
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 18
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles(wdStyleHeading1).Font.size = 14
            ThisDoc.Styles(wdStyleHeading1).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 10
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading2).Font.size = 12
            ThisDoc.Styles(wdStyleHeading2).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading2).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading2).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading3).Font.AllCaps = False
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 12
            ThisDoc.Styles("TOC1cp").Font.size = 12
            ThisDoc.Styles("TOC1cp").Font.Bold = True
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles("TOC2cp").Font.AllCaps = False
            ThisDoc.Styles("TOC2cp").Font.size = 10
            ThisDoc.Styles("TOC2cp").Font.Bold = True
            
            ThisDoc.Styles("TOC3cp").Font.AllCaps = False
            ThisDoc.Styles("TOC3cp").Font.Bold = False
            
            ThisDoc.Styles("HeadingFrontPage").Font.size = 14
            ThisDoc.Styles("HeadingFrontPage").Font.AllCaps = False
            ThisDoc.Styles("HeadingFrontPage").ParagraphFormat.SpaceBefore = 4
            
            SetHeadingListTemplateColor wdColorBlack
            
            
       Case "Standard, All Caps"
            ThisDoc.Styles(wdStyleHeading1).Font.size = 12
            ThisDoc.Styles(wdStyleHeading1).Font.Position = -24
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 0
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = True
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = True
            
            ThisDoc.Styles(wdStyleHeading2).Font.size = 10
            ThisDoc.Styles(wdStyleHeading2).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading2).Font.AllCaps = True
            ThisDoc.Styles(wdStyleHeading2).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading3).Font.AllCaps = False
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 12
            ThisDoc.Styles("TOC1cp").Font.size = 10
            ThisDoc.Styles("TOC1cp").Font.AllCaps = True
            ThisDoc.Styles("TOC1cp").Font.Bold = False
            
            ThisDoc.Styles("TOC2cp").Font.AllCaps = True
            ThisDoc.Styles("TOC2cp").Font.size = 10
            ThisDoc.Styles("TOC2cp").Font.Bold = False
            
            ThisDoc.Styles("TOC3cp").Font.AllCaps = False
            ThisDoc.Styles("TOC3cp").Font.Bold = False
        
            ThisDoc.Styles("HeadingFrontPage").Font.size = 12
            ThisDoc.Styles("HeadingFrontPage").Font.AllCaps = True
            ThisDoc.Styles("HeadingFrontPage").ParagraphFormat.SpaceBefore = 6
        
            SetHeadingListTemplateColor wdColorBlack
            
        Case Else 'Standard
            ThisDoc.Styles(wdStyleHeading1).Font.size = 14
            ThisDoc.Styles(wdStyleHeading1).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.SpaceBefore = 10
            ThisDoc.Styles(wdStyleHeading1).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading1).ParagraphFormat.PageBreakBefore = True
            
            ThisDoc.Styles(wdStyleHeading2).Font.size = 12
            ThisDoc.Styles(wdStyleHeading2).Font.Position = 0
            ThisDoc.Styles(wdStyleHeading2).Font.AllCaps = False
            ThisDoc.Styles(wdStyleHeading2).ParagraphFormat.PageBreakBefore = False
            
            ThisDoc.Styles(wdStyleHeading3).Font.AllCaps = False
            
            ThisDoc.Styles("TOC1cp").ParagraphFormat.SpaceBefore = 12
            ThisDoc.Styles("TOC1cp").Font.size = 12
            ThisDoc.Styles("TOC1cp").Font.Bold = True
            ThisDoc.Styles("TOC1cp").Font.AllCaps = False
            
            ThisDoc.Styles("TOC2cp").Font.AllCaps = False
            ThisDoc.Styles("TOC2cp").Font.size = 10
            ThisDoc.Styles("TOC2cp").Font.Bold = True
            
            ThisDoc.Styles("TOC3cp").Font.AllCaps = False
            ThisDoc.Styles("TOC3cp").Font.Bold = False
            
            ThisDoc.Styles("HeadingFrontPage").Font.size = 14
            ThisDoc.Styles("HeadingFrontPage").Font.AllCaps = False
            ThisDoc.Styles("HeadingFrontPage").ParagraphFormat.SpaceBefore = 4
            
            SetHeadingListTemplateColor wdColorBlack
            
        End Select
        CheckParagraphs
    End If
    
    If HasChanged("Language") Then
        WriteLog "Updating heading styles, Language"
        ' Update language in document
        ThisDoc.Styles(wdStyleNormal).LanguageId = Language
        If Language = "2052" Then 'Chinese
            ThisDoc.Styles(wdStyleNormal).Font.name = "Microsoft YaHei"
            With ThisDoc.Styles("Table Text").ParagraphFormat
                .LineSpacingRule = wdLineSpaceSingle
                .SpaceBefore = 3
                .SpaceAfter = 3
                '.SpaceAfterAuto = False
                '.SpaceBeforeAuto = False
            End With
        ElseIf Language = "1042" Then 'Korean
            ThisDoc.Styles(wdStyleNormal).Font.name = "Malgun Gothic"
            With ThisDoc.Styles("Table Text").ParagraphFormat
                .LineSpacingRule = wdLineSpaceExactly
                .LineSpacing = 11
                .SpaceBefore = 2
                .SpaceAfter = 2
                '.SpaceAfterAuto = False
                '.SpaceBeforeAuto = False
            End With
        Else
            ThisDoc.Styles(wdStyleNormal).Font.name = "Arial"
            With ThisDoc.Styles("Table Text").ParagraphFormat
                .LineSpacingRule = wdLineSpaceSingle
                .SpaceBefore = 3
                .SpaceAfter = 3
                '.SpaceAfterAuto = False
                '.SpaceBeforeAuto = False
            End With
        End If
    
        Dim storyRng As Range
        For Each storyRng In ThisDoc.StoryRanges
            storyRng.LanguageId = Language
        Next
        ThisDoc.Range.LanguageId = Language
    End If
    
End Function

Private Sub SetPageHeight()
    Dim rngInsert As Range
    ' Temporary placement
    Set rngInsert = ThisDoc.Range(0, 0)
    rngInsert.Collapse wdCollapseStart
    rngInsert.Select
    pageHeight = rngInsert.PageSetup.pageHeight
    If pageHeight = 0 Then
        On Error Resume Next
        pageHeight = rngInsert.PageSetup.pageHeight
        On Error Resume Next
        If pageHeight = 0 Then
            On Error Resume Next
            pageHeight = ThisDoc.Sections(1).PageSetup.pageHeight
            On Error Resume Next
        End If
    End If
End Sub

Public Sub UpdateLayout()
    Dim rngInsert As Range
    SetPageHeight
    If NewPaperFormat > "" Then
        WriteLog "Change paper format"
        ChangePaperFormat
        SetPageHeight
    End If
    
    Set rngInsert = ThisDoc.Range(0, 0)
    
    WriteLog "Updating header/footer"
    SetHeaderFooter
    
    WriteLog "Updating styles"
    UpdateStylesAndParagraphs
    
    WriteLog "Remove R0 fields"
    RemoveR0Fields
    WriteLog "Fix old captions"
    FixOldCaptions
    WriteLog "Updating figure captions"
    SetCaptions "Figure"
    WriteLog "Updating table captions"
    SetCaptions "Table"
   
    WriteLog "Updating fields"
    UpdateDocumentRangeFields
    
    WriteLog "Updating bookmarks"
    FixBookmarks

    If ReplaceRegistered Then
        WriteLog "Check product names"
        CheckProductNames
    End If

    
    WriteLog "Updating front matter"
    Select Case showFrontMatter
    Case "Translation", ""
        If ThisDoc.Tables.Count > 0 Then
            If ThisDoc.Tables(1).Range.start = 0 Then
                Selection.HomeKey Unit:=wdStory
                Selection.SplitTable
                Selection.Style = ThisDoc.Styles("Paragraph1")
                Selection.Range.Collapse wdCollapseEnd
                Selection.Range.start = Selection.Range.End
                Set rngInsert = ThisDoc.Range(0, 0)
                rngInsert.Collapse wdCollapseStart
            End If
        End If
        If ccFrontMatter Is Nothing Then
            Set bkRng = ThisDoc.Range
            bkRng.Bookmarks.ShowHidden = True
            
            For iBK = ThisDoc.Bookmarks.Count To 1 Step -1
                Set bk = ThisDoc.Bookmarks(iBK)
                Set bkRng = bk.Range
                If ThisDoc.Bookmarks(iBK).start = 0 Then
                    'Xebug.Print "Before", bk.name, bkRng.start, bkRng.End, bkRng.text; "!"
                End If
            Next
            
            rngInsert.Paragraphs.Add
            rngInsert.Style = wdStyleNormal
            Set ccFrontMatter = rngInsert.ContentControls.Add(wdContentControlRichText, rngInsert)
            ccFrontMatter.tag = "DocumentInfo-FrontMatter:DocumentInformation"
            RebuildFrontMatter = True
            ccFrontMatter.Range.Delete
            
            If Not ccFrontMatter Is Nothing Then
                Set rngStart = ccFrontMatter.Range
                moveBooks = rngStart.End + 2
                'Xebug.Print "FrontMatter", rngStart.start, rngStart.End, rngStart.End - rngStart.start, rngStart.text; "!"
                
                For iBK = ThisDoc.Bookmarks.Count To 1 Step -1
                    If ThisDoc.Bookmarks(iBK).start = 0 Then
                        Set bk = ThisDoc.Bookmarks(iBK)
                        Set bkRng = bk.Range
                        'Xebug.Print ">>", bk.name, bkRng.start, bkRng.End, bkRng.text; "!"
                        'bkRng.End = bkRng.End + moveBooks
                        bkRng.start = moveBooks
                        bkRng.Bookmarks.Add bk.name
                        'Xebug.Print "After", bk.name, bk.Range.start, bk.Range.End, rngStart.End - rngStart.start, bk.Range.text; "!", vbCrLf
                    End If
                Next
            End If
            Set bkRng = ThisDoc.Range
            bkRng.Bookmarks.ShowHidden = False
            
        ElseIf RebuildFrontMatter Then
            ccFrontMatter.Range.Delete
            ThisDoc.Range.Paragraphs(1).Range.Delete
            ResetContentControls
        End If
        Set rngInsert = ccFrontMatter.Range
        rngInsert.Collapse wdCollapseEnd

        If RebuildFrontMatter Then
            If showFrontMatter = "" Then
                If ShowFrontPage > "" Then
                    SpecialFirstHeaderFooter
                    CompanyLogoUpdated = True
                    ThisDoc.PageSetup.DifferentFirstPageHeaderFooter = True
                    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzFrontPage").Insert(where:=rngInsert, RichText:=True)
                    
                    Set ccFrontPage = rngInsert.ContentControls(1)
                    ccFrontPage.Range.Paragraphs(1).Range.Font.reset
                    ccFrontPage.Range.Paragraphs(1).Format.PageBreakBefore = False
                Else
                    ThisDoc.PageSetup.DifferentFirstPageHeaderFooter = False
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowDocumentInformation > "" Then
                    If ccDocumentInformation Is Nothing Or (ShowSupplierFileName > "" And ccSupplierFileName Is Nothing) Then
                        If Not ccDocumentInformation Is Nothing Then
                            ccDocumentInformation.Delete True
                        End If
                        Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzDocumentInformation").Insert(where:=rngInsert, RichText:=True)
                        Set ccDocumentInformation = rngInsert.ContentControls(1)
                        Set ccFileName = GetFirstContentControlByTag("DocumentInfo-FileName:DocumentInformation")
                        Set ccSupplierFileName = GetFirstContentControlByTag("DocumentInfo-SupplierFileName:DocumentInformation")
                        Set ccSupplierFileNameLabel = GetFirstContentControlByTag("DocumentLabel-SupplierFileName:DocumentInformation")
                        Set ccCopyright = GetFirstContentControlByTag("DocumentInfo-Copyright:DocumentInformation")
                        Set ccDisclaimer = GetFirstContentControlByTag("DocumentInfo-Disclaimer:DocumentInformation")
                    End If
                    If ShowSupplierFileName = "" And Not ccSupplierFileName Is Nothing Then
                        ccSupplierFileName.Range.Paragraphs(1).Range.Delete
                        Set ccSupplierFileName = Nothing
                    End If
                    If ShowSupplierFileName = "" And Not ccSupplierFileNameLabel Is Nothing Then
                        ccSupplierFileNameLabel.Range.Paragraphs(1).Range.Delete
                        Set ccSupplierFileNameLabel = Nothing
                    End If
                    ccDocumentInformation.Range.Paragraphs(1).Range.Font.reset
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowRevisions > "" Then
                    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzRevisions").Insert(where:=rngInsert, RichText:=True)
                    Set ccRevisions = GetFirstContentControlByTag("DocumentInfo-Revisions:DocumentInformation")
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowTOC > "" Then
                    If ccTOC Is Nothing Then
                        Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzTOC").Insert(where:=rngInsert, RichText:=True)
                        Set ccTOC = rngInsert.ContentControls(1)
                    Else
                        Set rngInsert = ccTOC.Range.Duplicate
                        rngInsert.Collapse wdCollapseEnd
                    End If
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowTOF > "" Then
                    If ccTOF Is Nothing Then
                        Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzTOF").Insert(where:=rngInsert, RichText:=True)
                        Set ccTOF = rngInsert.ContentControls(1)
                    Else
                        Set rngInsert = ccTOF.Range.Duplicate
                        rngInsert.Collapse wdCollapseEnd
                    End If
                    ccTOF.Range.Paragraphs(1).Range.Font.reset
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowTOT > "" Then
                    If ccTOT Is Nothing Then
                        Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzTOT").Insert(where:=rngInsert, RichText:=True)
                        Set ccTOT = rngInsert.ContentControls(1)
                    Else
                        Set rngInsert = ccTOT.Range.Duplicate
                        rngInsert.Collapse wdCollapseEnd
                    End If
                    ccTOT.Range.Paragraphs(1).Range.Font.reset
                End If
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                rngInsert.MoveStart wdCharacter, -1
                rngInsert.Delete
            End If
        End If
        If showFrontMatter = "Translation" Then
            If ccTranslation Is Nothing Then
                Set rngInsert = ccFrontMatter.Range
                Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzTranslation").Insert(where:=rngInsert, RichText:=True)
                Set ccTranslation = rngInsert.ContentControls(1)
                Set rngInsert = ccFrontMatter.Range
                rngInsert.Collapse wdCollapseEnd
                If ShowRevisions > "" Then
                    Set rngInsert = ThisDoc.attachedTemplate.BuildingBlockEntries("zzRevisions").Insert(where:=rngInsert, RichText:=True)
                    Set ccRevisions = GetFirstContentControlByTag("DocumentInfo-Revisions:DocumentInformation")
                    FillRevisionHistory ccRevisions
                    Set rngInsert = ccFrontMatter.Range
                    rngInsert.Collapse wdCollapseEnd
                End If
                
                rngInsert.MoveStart wdCharacter, -1
                rngInsert.Delete
            End If
        End If
    Case "Hide"
        If Not ccFrontMatter Is Nothing Then
           ccFrontMatter.Delete True
           Set ccFrontMatter = Nothing
           ThisDoc.Range.Paragraphs(1).Range.Delete
           ResetContentControls
        ElseIf Not ccTranslation Is Nothing Then
           ccTranslation.Delete True
           Set ccTranslation = Nothing
           ThisDoc.Range.Paragraphs(1).Range.Delete
           ResetContentControls
        End If
        If Not ThisDoc.PageSetup.DifferentFirstPageHeaderFooter = False Then ThisDoc.PageSetup.DifferentFirstPageHeaderFooter = False
        
    End Select

End Sub

Private Sub UpdateContentInStory(stry As Range)
    Set rng = stry
    
    Dim strStatus As String
    If TryReadText("/DocumentInfo/DocumentInfo-ClassificationLabel", value) Then
        strStatus = value
    End If
    If strStatus = " " Then strStatus = ""
    If TryReadText("/DocumentInfo/DocumentInfo-WorkflowLabel", value) Then
        If strStatus > "" And value > "" Then
            strStatus = strStatus & " " & ChrW(8226) & " " & value
        ElseIf value > "" Then
            strStatus = value
        End If
    End If
    If strStatus = "" Then strStatus = " "
    
    If (stry.StoryType = wdFirstPageHeaderStory Or stry.StoryType = wdPrimaryHeaderStory) Then
        If rng.ShapeRange.Count > 0 Then
            Dim ishp As Integer
            Dim shp As Shape
            Dim shpCount As Integer
            shpCount = rng.ShapeRange.Count
            For ishp = shpCount To 1 Step -1
'                WriteLog CStr(ishp)
                If rng.ShapeRange(ishp).Type = msoTextBox Then
                    Set shp = rng.ShapeRange(ishp)
                    Set cc = shp.TextFrame.TextRange.ContentControls(1)
                    cc.LockContents = False
'                    With shp.TextFrame
'                        If Not .MarginBottom = 0 Then .MarginBottom = 0
'                        If Not .MarginLeft = 0 Then .MarginLeft = 0
'                        If Not .MarginRight = 0 Then .MarginRight = 0
'                        If Not .MarginTop = 0 Then .MarginRight = 0
'                    End With
                    
                    Dim ccIsAtTop As Boolean
                    ccIsAtTop = (shp.TextFrame.Orientation = msoTextOrientationHorizontal)
                    
                    If (ccIsAtTop And pageHeight < 700) Then
                        If Not shp.Top = 34 Then shp.Top = 34
                    ElseIf (ccIsAtTop And pageHeight >= 700) Then
                        If Not shp.Top = -34 Then shp.Top = -34
                    End If

                    If (ccIsAtTop And pageHeight < 700) Then
                        If Not cc.Range.Text = strStatus Then cc.Range.Text = strStatus
                    ElseIf (ccIsAtTop And pageHeight >= 700) Then
                        If Not cc.Range.Text = " " Then cc.Range.Text = " "
                    ElseIf (Not ccIsAtTop And pageHeight >= 700) Then
                        If Not cc.Range.Text = strStatus Then cc.Range.Text = strStatus
                    Else
                        If Not cc.Range.Text = " " Then cc.Range.Text = " "
                    End If


'                    If Not cc.Range.Style = "Table Header Center" Then
'                        cc.Range.Style = "Table Header Center"
'                        cc.Range.Font.TextColor = RGB(0, 157, 224)
'                        cc.Range.Font.Size = 12
'                        cc.Range.Font.Bold = True
'                    End If
'
'                    If ThisDoc.Styles(wdStyleNormal).Font.name = "Arial" Then
'                        If Not cc.Range.ParagraphFormat.SpaceBefore = 6 Then cc.Range.ParagraphFormat.SpaceBefore = 6
'                        If Not cc.Range.ParagraphFormat.SpaceAfter = 0 Then cc.Range.ParagraphFormat.SpaceAfter = 0
'                    Else
'                        If Not cc.Range.ParagraphFormat.SpaceBefore = 3 Then cc.Range.ParagraphFormat.SpaceBefore = 3
'                        If Not cc.Range.ParagraphFormat.SpaceAfter = 3 Then cc.Range.ParagraphFormat.SpaceAfter = 3
'                    End If
                    'cc.LockContents = True
                End If
            Next
        End If
    End If
    
    
    Dim strFormula As String
    Dim wasLocked As Boolean
    
    If stry.StoryType = wdMainTextStory And Not ccFrontMatter Is Nothing Then
        Set rng = GetDocumentRange
        Dim ccs As New Collection
        LockUnlockContentControlsInRange False, rng, ccs
        For Each cc In rng.ContentControls
            wasLocked = cc.LockContents
            If wasLocked Then cc.LockContents = False
            If cc.tag Like "Calculate:*" Then
                strFormula = cc.title
                If ccTranslation Is Nothing Then
                    cc.Range.Text = CalculateTitle(strFormula, , False)
                Else
                    cc.Range.Text = "|||"
                End If
            End If
            If wasLocked Then cc.LockContents = True
        Next
        LockUnlockContentControlsInRange True, rng, ccs
        Set rng = ccFrontMatter.Range
    ElseIf stry.StoryType = wdMainTextStory And ccFrontMatter Is Nothing Then
        For Each cc In stry.ContentControls
            wasLocked = cc.LockContents
            If wasLocked Then cc.LockContents = False
            If cc.tag Like "Calculate:*" Then
                strFormula = cc.title
                cc.Range.Text = CalculateTitle(strFormula, , False)
            End If
            If wasLocked Then cc.LockContents = True
        Next
        rng.start = 0
        rng.End = 0
    End If

    Do
        For Each cc In rng.ContentControls
            aTag = Split(cc.tag, ":")
            Path = "/" & Split(aTag(0), "-")(0) & "/" & aTag(0)
            ''Xebug.Print cc.Tag, aTag(0), path
            If Path = "/DocumentInfo/DocumentInfo-Revisions" Then
                If Not showFrontMatter = "Translation" Then
                    FillRevisionHistory cc
                End If
            ElseIf Path = "/DocumentInfo/DocumentInfo-Logo" Then
                Dim changePicture As Boolean
                changePicture = False
                If cc.Range.ShapeRange.Count = 0 And cc.Range.InlineShapes.Count = 0 Then
                    changePicture = True
                End If
                If Not cc.Range.ShapeRange.Count = 0 Then
                    If cc.Range.ShapeRange(1).AlternativeText <> "BEUMER Group 1.0" Then
                        changePicture = True
                    End If
                End If
                If Not cc.Range.InlineShapes.Count = 0 Then
                    If cc.Range.InlineShapes(1).AlternativeText <> "BEUMER Group 1.0" Then
                        changePicture = True
                    End If
                End If
                If changePicture Then
                    cc.Range.Text = ""
                    ThisDoc.attachedTemplate.BuildingBlockEntries("zzLogo").Insert where:=cc.Range, RichText:=True
                End If
            ElseIf Path = "/DocumentInfo/DocumentInfo-CompanyLogo" Then
                If aTag(1) Like "FrontPageHeader" Then
                    If CompanyLogoUpdated Then
                        Dim NewLogoPath As String
                        NewLogoPath = ReadText(Path)
                        cc.Range.Text = " "
                        If NewLogoPath > "" Then
                            cc.Range.InlineShapes.AddPicture NewLogoPath, False, True, cc.Range
                            With cc.Range.InlineShapes(1)
                                .LockAspectRatio = msoCTrue
                                Dim scaling As Double
                                scaling = (48 / .Height) * (.ScaleHeight / 100)
                                If scaling * .Width > 240 Then
                                    scaling = (240 / .Width)
                                End If
                                .ScaleHeight = 100 * scaling
                            End With
                        End If
                        CompanyLogoUpdated = False
                    End If
                End If
            ElseIf Path = "/DocumentInfo/DocumentInfo-FileName" Then ' This is Not In the XML
                cc.Range.Text = FixPath(ThisDoc.fullName)
                If Not cc.Range.Font.name = "Arial" Then cc.Range.Font.name = "Arial"
            ElseIf cc.tag = "DocumentLabel-ProjectNo:FrontPage" Then
                If ReadText("/DocumentInfo/DocumentInfo-ProjectNo") = "" Then
                    cc.Range.Text = " "
                Else
                    cc.Range.Text = ReadText(Path)
                End If
            ElseIf Path = "/DocumentInfo/DocumentInfo-TOC" Then
                headingLevels = ReadText("/DocumentInfo/DocumentInfo-TOC-HeadingLevels")
                addedStyles = ReadText("/DocumentInfo/DocumentInfo-TOC-Headings")
                If addedStyles > "" Then
                    'addedStyles = "HEADINGPART;9;PARMHEAD;9;Dummy,1,HEADINGPART,9,PARMHEAD,9"
                    addedStyles = "PARMHEAD;9;Dummy,1,PARMHEAD,9"
                End If
                Set ccTOC = cc
'                ElseIf path = "/DocumentLabel/DocumentLabel-Front" Then
'                    cc.Range.Text = "<|"
            ElseIf Path = "/DocumentInfo/DocumentInfo-Translation" Then
                cc.Range.Paragraphs.Alignment = wdAlignParagraphLeft

            ElseIf Path = "/DocumentInfo/DocumentInfo-TOF" Then
                'Do Nothing
            ElseIf Path = "/DocumentInfo/DocumentInfo-TOT" Then
                'Do Nothing
            ElseIf Path = "/DocumentInfo/DocumentInfo-FrontPage" Then
                'Do Nothing
            ElseIf Path = "/DocumentInfo/DocumentInfo-FrontMatter" Then
                'Do Nothing
            ElseIf Path = "/DocumentInfo/DocumentInfo-DocumentInformation" Then
                'Do Nothing
            ElseIf Path = "/DocumentInfo/DocumentInfo-LeftBlank" Then
                'Do Nothing

            ElseIf cc.tag Like "DocumentInfo-Status:*" Then
                cc.Range.Text = " "
            ElseIf TryReadText(Path, value) Then
                cc.Range.Text = ""
                cc.Range.LanguageId = Language
                If value > "" Then
                    If Not ((showFrontMatter = "Translation") And (cc.tag Like "*Header*" Or cc.tag Like "*Footer*")) Then
                        cc.Range.Text = ReplaceRText(value)
                    Else
                        cc.Range.Text = " "
                    End If
                    If showFrontMatter = "Translation" Then
                        If cc.tag Like "DocumentLabel-RevisionHistory*" Then
                            cc.Range.Text = " "
                        End If
                        If cc.tag = "DocumentLabel-RevisionHistory-Revision:DocumentInformation" Then
                            cc.Range.Text = "|||"
                        End If
                    End If

                    If InStr(cc.Range.Text, vbCr) > 0 Then
                        cc.Range.Text = Replace(cc.Range.Text, vbCr, Chr(11))
                    End If
                    cc.Range.Characters(1).LanguageId = Language
                    cc.Range.Font.Hidden = False
                    If InStr(cc.Range.Text, "|fffd|") > 0 Then
                        ' Raise Registered
                        Dim ch As Range
                        For Each ch In cc.Range.Characters
                            If ch.Text = "|fffd|" Then
                                ch.Font.Superscript = True
                            End If
                        Next
                    End If
                Else
                    cc.Range.Text = " "
                End If
            ElseIf Path = "/Container/Container" Then
                'Do Nothing
            ElseIf Path = "/Unlocked/Unlocked" Then
                'Do Nothing
            Else
                'Stop
            End If
        Next
        Set rng = rng.NextStoryRange
        If ActiveWindow.View.SplitSpecial = wdPaneNone Then
            ActiveWindow.ActivePane.View.Type = wdPrintView
        Else
            ActiveWindow.ActivePane.Close
            ActiveWindow.View.Type = wdPrintView
        End If
    Loop While Not rng Is Nothing
End Sub

Public Sub UpdateContent()
    WriteLog "Updating header content"
    UpdateContentInStory ThisDoc.StoryRanges(wdPrimaryHeaderStory)
    UpdateContentInStory ThisDoc.StoryRanges(wdFirstPageHeaderStory)
    WriteLog "Updating footer content"
    UpdateContentInStory ThisDoc.StoryRanges(wdPrimaryFooterStory)
    UpdateContentInStory ThisDoc.StoryRanges(wdFirstPageFooterStory)
    
    WriteLog "Updating main content"
    UpdateContentInStory ThisDoc.StoryRanges(wdMainTextStory)
    
    WriteLog "Updating content information"
    UpdateContentInformation
End Sub

Private Sub UpdateOptional()

End Sub

Public Sub UpdateFinish()
    Dim rngInsert As Range
    WriteLog "Remove empty paragraphs at end of document"
    Set para = ThisDoc.Range.Paragraphs.Last
    Do While Replace(Replace(Trim(para.Range.Text), vbCr, ""), vbCrLf, "") = "" And (para.Range.ShapeRange.Count + para.Range.InlineShapes.Count = 0) And para.Style.NameLocal <> ThisDoc.Styles(WdBuiltinStyle.wdStyleHeading1)
        If paraStart = para.Range.start Then
            Exit Do
        Else
            paraStart = para.Range.start
        End If
        Set rngDelete = para.Range
        'Xebug.Print rngDelete.start, rngDelete.End
        If rngDelete.ShapeRange.Count + rngDelete.InlineShapes.Count = 0 Then
            On Error Resume Next
            rngDelete.Delete
            On Error GoTo 0
        End If
        If Err.Number > 0 Then Exit Do
        Set para = ActiveDocument.Range.Paragraphs.Last
    Loop
    
    ' Set Pagebreak on first paragraph (normally Heading1)
    Set cc = GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation")
    If Not cc Is Nothing Then
        On Error GoTo NoParagraphs
        Set rng = cc.Range
        rng.Collapse wdCollapseEnd
        rng.Move wdParagraph, 1
        rng.Paragraphs(1).PageBreakBefore = True
    End If
NoParagraphs:
    On Error GoTo 0
    '
    
    'If HasChanged(CaptionHeading) Or HasChanged("Language") Then UpdateDocumentRangeFields
    
    ' Remove LeftBlank
    Dim rngDel As Range

    Set cc = GetFirstContentControlByTag("DocumentInfo-LeftBlank:DocumentInformation")
    If Not cc Is Nothing Then
        Set rngDel = cc.Range.Duplicate
        cc.Delete True
        rngDel.Delete
    End If

    WriteLog "Resizing front page and revisions"
    If Not ccFrontPage Is Nothing Then
        'ccFrontPage.Range.Paragraphs.first.Style = "Paragraph1"
        'ccFrontPage.Range.Paragraphs.Last.Style = "Paragraph1"
        Dim projectHeight As Single
        Dim mainHeight As Single
        Dim headerFooterHeight As Single
        Dim linesRowHeightExtra As Single
        Set rngInsert = ccFrontPage.Range.Duplicate '.Tables(1).Range.Duplicate
        With rngInsert.Paragraphs(1)
            .SpaceBefore = 0
            .SpaceAfter = 0
        End With
        With rngInsert.Paragraphs(1).Range.Font
            .size = 1
            .ColorIndex = wdWhite
            .Position = 0
        End With
        With rngInsert.Tables(1)
            .rows(4).Height = 80
            .rows(5).Height = 3
            .rows(5).Range.Style = "Paragraph1"
            .rows(5).Range.ParagraphFormat.SpaceBefore = 0
            .rows(5).Range.ParagraphFormat.SpaceAfter = 0
            .rows(2).Height = 150
            .rows(1).Height = 80
            .rows(3).Height = 10
        End With
        
        projectHeight = rngInsert.Tables(1).rows(4).Height
        mainHeight = rngInsert.Tables(1).rows(2).Height
        linesRowHeightExtra = 6 'mainHeight - 114
        headerFooterHeight = 228
        If Language = "2052" Or Language = "1042" Then
            headerFooterHeight = 244
        End If
        Dim H As Single
        H = ((pageHeight - headerFooterHeight - mainHeight - projectHeight - linesRowHeightExtra) / 2)
        If H < 80 Then
            rngInsert.Tables(1).rows(1).Height = 80
            rngInsert.Tables(1).rows(3).Height = 2 * H - 80
        Else
            rngInsert.Tables(1).rows(1).Height = H + 20
            rngInsert.Tables(1).rows(3).Height = rngInsert.Tables(1).rows(1).Height - 20
        End If
    End If
    
    
    ' Resize revisions
    If Not ccRevisions Is Nothing Then
        ccRevisions.Range.Paragraphs(1).Range.Font.AllCaps = False
        'If Not ccRevisions.Range.Characters(1) = vbTab Then
        '    ccRevisions.Range.InsertBefore vbTab
        'End If
        ccRevisions.Range.Paragraphs(1).KeepWithNext = True
        Dim tblRevisions As table
        Set tblRevisions = ccRevisions.Range.Tables(1)
        If Not showFrontMatter = "Translation" Then
            tblRevisions.rows(1).HeadingFormat = True
        Else
            tblRevisions.rows(1).HeadingFormat = False
        End If
'        tblRevisions.rows.AllowBreakAcrossPages = True
        tblRevisions.Range.ParagraphFormat.KeepWithNext = False
        tblRevisions.Range.Paragraphs.KeepWithNext = False
'        tblRevisions.rows(1).Range.ParagraphFormat.KeepWithNext = False
'        tblRevisions.rows(1).Range.Paragraphs.KeepWithNext = False
        Dim col As Column
        Dim ce As Cell
        Dim longest As Integer
        longest = 0
        Set col = tblRevisions.Columns(4)
        For Each ce In col.Cells
        If ce.Range.Characters.Count > longest Then
            longest = ce.Range.Characters.Count
        End If
        Next
    
        tblRevisions.Columns(1).Width = 40
        tblRevisions.Columns(2).Width = 64
        If longest > 22 Then
            tblRevisions.Columns(3).Width = 80
            tblRevisions.Columns(4).Width = Selection.PageSetup.PageWidth - (220 + 64.05 + 151.8 - 9.5) + 36
        Else
            tblRevisions.Columns(3).Width = 116
            tblRevisions.Columns(4).Width = Selection.PageSetup.PageWidth - (220 + 64.05 + 151.8 - 9.5)
        End If
    End If

    Dim i As Integer
    'TOC \O "1-6" \T "PARMHEAD;9" \T "HEADINGPART;9" \H
   
    If Not ccTOC Is Nothing Then
        Dim rngToc As Range
        Set rngToc = ThisDoc.TablesOfContents(1).Range.Duplicate
        If RebuildTOC Then
            Set rngToc = ThisDoc.TablesOfContents(1).Range
            rngToc.Delete
        End If
        
        If ThisDoc.TablesOfContents.Count = 0 Then
            WriteLog "Inserting new TOC"
            'ThisDoc.TablesOfContents(1).Delete
            ThisDoc.TablesOfContents.Add Range:=rngToc, RightAlignPageNumbers:=True, UseHeadingStyles:=True, UpperHeadingLevel:=1, _
                LowerHeadingLevel:=headingLevels, IncludePageNumbers:=True, addedStyles:=addedStyles, _
                UseHyperlinks:=True, HidePageNumbersInWeb:=False, UseOutlineLevels:=False
            ThisDoc.TablesOfContents(1).TabLeader = wdTabLeaderDots
            ThisDoc.TablesOfContents.Format = wdIndexIndent
        Else
            Dim hs As HeadingStyle
            For Each hs In ThisDoc.TablesOfContents(1).HeadingStyles
                If LCase(hs.Style) = LCase("HeadingPart") Then
                    hs.Delete
                    Exit For
                End If
            Next
            WriteLog "Updating TOC"
            ThisDoc.TablesOfContents(1).Update
        End If
        
        ccTOC.Range.Paragraphs(ccTOC.Range.Paragraphs.Count).Style = "Paragraph1"
        ' CONTENTS LINE
        With ccTOC.Range.Paragraphs(1).Range.Font
            .Spacing = 2
            .Underline = wdUnderlineSingle
            .Bold = True
            .size = 12
        End With
        
        ' Depend On Standard, All Caps !
        With ccTOC.Range.Paragraphs(1).Range.ParagraphFormat
            .LineSpacingRule = wdLineSpaceExactly
            .LineSpacing = 24
            .SpaceBefore = 24
            .SpaceAfter = 3
        End With
        
        With ccTOC.Range.Paragraphs(2).Range.ParagraphFormat
            .SpaceBefore = 4
            .SpaceAfter = 0
        End With
        
        GoTo NewCode
        ' Begin Old Code
        
        Set rng = ccTOC.Range.Paragraphs(3).Range
        rng.Collapse wdCollapseStart
        rng.Select
        
        'Debug.Print "!"; rng.Text; "!"
        If rng.Text = "" Then
            rng.Style = "Paragraph1"
            rng.ParagraphFormat.LineSpacingRule = wdLineSpaceExactly
            rng.ParagraphFormat.LineSpacing = 1
            With rng.ParagraphFormat
                .SpaceBefore = 0
                .SpaceAfter = 0
            End With
        End If
        
        ' Delete Front link
        If Not ccFrontPage Is Nothing Then
            Selection.Move wdCharacter, 1
            Selection.MoveEnd WdUnits.wdParagraph, 1
            Selection.TypeBackspace
        End If
        
        Selection.MoveDown wdLine, 1
        
        ' Keep Document Information
        If Not ccDocumentInformation Is Nothing Then
            Selection.MoveDown wdLine, 1
        Else
            With ccTOC.Range.Paragraphs(2).Range.ParagraphFormat
                .SpaceBefore = 4
                .SpaceAfter = 4
            End With
        End If
        
        ' Delete Contents
        If headingLevels > 1 Then
            Selection.Move wdCharacter, 1
            Selection.MoveEnd WdUnits.wdParagraph, 1
            Selection.TypeBackspace
        End If
        
        ' Delete Revisions
        If Not ccRevisions Is Nothing And headingLevels > 1 Then
            Selection.Move wdCharacter, 1
            Selection.MoveEnd WdUnits.wdParagraph, 1
            Selection.TypeBackspace
        End If
        
        ' End Old Code
        
NewCode:
        
'        Application.ScreenUpdating = True
        
        Set rng = ccTOC.Range.Paragraphs(3).Range
        rng.Select
        'Stop
        rng.Collapse wdCollapseStart
        rng.Select
        
'        If rng.Text > "" Then
'            Stop
'            rng.Style = "Paragraph1"
'            rng.ParagraphFormat.LineSpacingRule = wdLineSpaceExactly
'            rng.ParagraphFormat.LineSpacing = 1
'            With rng.ParagraphFormat
'                .SpaceBefore = 0
'                .SpaceAfter = 0
'            End With
'        End If
'
        Dim rngEdit As Range
        Dim iPara As Integer
        iPara = 3
        If Not ccFrontPage Is Nothing Then
            iPara = iPara + 1
        End If
        If Not ccDocumentInformation Is Nothing Then
            iPara = iPara + 1
        End If
        If Not ccRevisions Is Nothing And headingLevels > 1 Then
            iPara = iPara + 1
        End If
        
        ' Delete Contents
        If headingLevels > 1 Then
            Set rngEdit = ccTOC.Range.Paragraphs(iPara).Range
            rngEdit.Select
            rngEdit.Delete
            iPara = iPara - 1
        End If
        
        If Not ccRevisions Is Nothing And headingLevels > 1 Then
            Set rngEdit = ccTOC.Range.Paragraphs(iPara).Range
            rngEdit.Select
            rngEdit.Delete
            iPara = iPara - 1
        ElseIf Not ccRevisions Is Nothing Then
            iPara = iPara - 1
        End If
        
        If Not ccDocumentInformation Is Nothing Then
            iPara = iPara - 1
        End If
        
        If Not ccFrontPage Is Nothing Then
            Set rngEdit = ccTOC.Range.Paragraphs(iPara).Range
            rngEdit.Select
            rngEdit.Style = "Paragraph1"
            rngEdit.ParagraphFormat.LineSpacingRule = wdLineSpaceExactly
            rngEdit.ParagraphFormat.LineSpacing = 1
            rngEdit.ParagraphFormat.SpaceBefore = 0
            rngEdit.ParagraphFormat.SpaceAfter = 0
            'rngEdit.Font.Hidden = True
            rngEdit.Font.ColorIndex = wdWhite
            iPara = iPara - 1
        End If
        
        ' Delete Front link
       ' If Not ccFrontPage Is Nothing Then
'            Selection.Move wdCharacter, 1
'            Selection.MoveEnd WdUnits.wdParagraph, 1
'            Selection.TypeBackspace
                
        '    rng.Select
                
        '    Set rngEdit = rng.Paragraphs(1).Range
        '    rngEdit.Delete
        'End If
        
        'Selection.MoveDown wdLine, 1
        
        ' Keep Document Information

        WriteLog "Reformat TOC and update TOC hyperlinks"
        ReformatTOC ThisDoc.TablesOfContents(1).Range
        ReformatTOCHyperlinks
        
        If HeadingLayout = "No Numbering, No Page Break" Then
            For Each para In ThisDoc.TablesOfContents(1).Range.Paragraphs
                If (para.Range.Text Like "#*.*" & vbTab & "*") Then
                    Dim tabRange As Range
                    Set tabRange = para.Range.Duplicate
                    tabRange.End = tabRange.start
                    Do While Not tabRange.Text Like "*" & vbTab
                        tabRange.End = tabRange.End + 1
                    Loop
                    tabRange.End = tabRange.End - 1
                    tabRange.Font.color = wdColorWhite
                End If
            Next
        End If
    End If
    
    For i = 1 To ThisDoc.TablesOfFigures.Count
        If i = 1 Then WriteLog "Updating TOF, TOT"
        ThisDoc.TablesOfFigures(i).Update
    Next
    
    If Not ccTOF Is Nothing Then
        With ccTOF.Range.Paragraphs(1).Range.ParagraphFormat
            .SpaceBefore = 24
            .SpaceAfter = 3
        End With
        With ccTOF.Range.Paragraphs(2).Range.ParagraphFormat
            .SpaceBefore = 4
            .SpaceAfter = 8
        End With
     
        ccTOF.Range.Paragraphs(1).KeepWithNext = True
        ccTOF.Range.Paragraphs(2).KeepWithNext = True
    End If
    If Not ccTOT Is Nothing Then
        With ccTOT.Range.Paragraphs(1).Range.ParagraphFormat
            .SpaceBefore = 24
            .SpaceAfter = 3
        End With
        With ccTOT.Range.Paragraphs(2).Range.ParagraphFormat
            .SpaceBefore = 4
            .SpaceAfter = 8
        End With
        ccTOT.Range.Paragraphs(1).KeepWithNext = True
        ccTOT.Range.Paragraphs(2).KeepWithNext = True
    End If
   
    Dim aText() As String
    Dim pg As Integer
    Dim tocStart As Integer
    Dim fld As field
    
    pdfLayout = ReadText("/DocumentInfo/DocumentInfo-PDFLayout")
    If Not ccFrontPage Is Nothing And Not ccTOC Is Nothing And Not ccDocumentInformation Is Nothing Then
        If pdfLayout = "Two Page Right" Then
            ThisDoc.TablesOfContents(1).UpdatePageNumbers
            WriteLog "Updating PDF layout"
            For Each para In ThisDoc.TablesOfContents(1).Range.Paragraphs
                If para.Range.Text Like "#*.*" & vbTab & "*" Then
                    aText = Split(para.Range.Text, vbTab)
                    pg = aText(UBound(aText))
                    Exit For
                End If
            Next
            tocStart = ccTOC.Range.Paragraphs.first.Range.Information(WdInformation.wdActiveEndAdjustedPageNumber)
            'Xebug.Print pg, tocStart
            If pg Mod 2 = 1 Then
                 If (pg - tocStart) Mod 2 = 0 Then
                    Set cc = GetFirstContentControlByTag("DocumentInfo-FrontPage:FrontPage")
                    Set rngInsert = cc.Range
                    rngInsert.Collapse wdCollapseEnd
                    ThisDoc.attachedTemplate.BuildingBlockEntries("zzLeftBlank").Insert where:=rngInsert, RichText:=True
                Else
                    Set cc = ccTOC
                    Set rngInsert = cc.Range
                    rngInsert.Collapse wdCollapseStart
                    ThisDoc.attachedTemplate.BuildingBlockEntries("zzLeftBlank").Insert where:=rngInsert, RichText:=True
                End If
            End If
        End If
    End If
       
    WriteLog "Updating PageRef fields"
    TestUpdateAllFields ThisDoc
    ' UpdateDocumentRangeFieldsPageRef
    
    WriteLog "Updating page numbering"
    For i = 1 To ThisDoc.TablesOfContents.Count
         ThisDoc.TablesOfContents(i).UpdatePageNumbers
    Next
    For i = 1 To ThisDoc.TablesOfFigures.Count
        ThisDoc.TablesOfFigures(i).UpdatePageNumbers
    Next
    WriteLog "Locking main content controls"
    LockMainContentControls True
    'TestUnlockAll
ExitSub:



End Sub

Public Function UpdateDocument(Optional screenUpdate As Boolean = False) As Boolean
    ScreenUpdating = screenUpdate
    UpdatePrepare
'    If HasChanged(PathLanguage) Then
'        'Stop
'    End If
'    If DataHasChanged() Then
'        'Stop
'    End If
'    If FrontMatterHasChanged() Then
'        'Stop
'    End If
'    If DocTypeHasChanged() Then
'        'Stop
'    End If
'    If SetupHasChanged() Then
'        'Stop
'    End If
    Dim fullUpdate As Boolean
    fullUpdate = (NewPaperFormat > "" Or FrontMatterHasChanged Or SetupHasChanged Or method <> "Form")

    If fullUpdate And (JumpToPart = "" Or JumpToPart = "UpdateLayout") Then UpdateLayout
    If JumpToPart = "" Or JumpToPart = "UpdateContent" Then UpdateContent
    
    'If JumpToPart = "" Or JumpToPart = "UpdateOptional" Then UpdateOptional
    'If fullUpdate And (JumpToPart = "" Or JumpToPart = "UpdateFinish") Then
    UpdateFinish
    If JumpToPart = "Error" Then
        ' Error handling
    End If
    '
    
    If gotoEnd Then
        ThisDoc.Characters.Last.Select
        Selection.Collapse wdCollapseEnd
    Else
        rngReturnTo.Select
    End If
    'ActiveWindow.ScrollIntoView Selection.Range, True
    
    'StructureUpdated = False
    LanguageUpdated = False
    CompanyLogoUpdated = False
    NewPaperFormat = ""
    OldLanguage = ReadText(PathLanguage)
    
    updated = True
    WriteLog "Done.."
End Function

Public Sub AddConversionHistory(key As Variant, value As String)
    ErrorNo = ErrorNo + 1
    key = key & "." & Right("000000" & ErrorNo, 6)
    ConversionHistory.Add key, value
End Sub

Public Sub AddError(value As String)
    Dim key As String
    key = "Error"
    AddConversionHistory key, value
End Sub

Public Sub AddWarning(value As String)
    Dim key As String
    key = "Warning"
    AddConversionHistory key, value
End Sub

Public Function ConversionHistoryToString() As String
    Dim key As Variant
    Dim str As String
    str = ""
    For Each key In ConversionHistory.Keys
        str = str & IIf(str = "", "", vbLf) & key & "|" & ConversionHistory(key)
    Next
    ConversionHistoryToString = str
End Function

Public Sub InsertCalculatedCC(strFormula As String)
    Dim isUpdated As Boolean
    isUpdated = True
    
    If Not IsLocked Then
        Prolog "Insert Control: " & strFormula
        On Error GoTo UpdatedFalse
        Dim cc As ContentControl
        Set cc = Selection.Range.ContentControls.Add(wdContentControlRichText)
        cc.tag = "Calculate:"
        cc.title = strFormula
        cc.Range.Text = CalculateTitle(strFormula, , False)
        cc.SetPlaceholderText , , " "
        'cc.LockContents = True
        cc.Range.Select
        Selection.Collapse wdCollapseEnd
        Selection.MoveRight
        Selection.InsertBefore " "
        Selection.Collapse wdCollapseEnd
        On Error GoTo 0
    Else
        Exit Sub
    End If
ExitSub:
    updated = isUpdated
    Epilog
    
    Exit Sub
    
UpdatedFalse:
    isUpdated = False
    Resume ExitSub

End Sub

Public Sub LockUnlockContentControlsInRange(blnLock As Boolean, rng As Range, Optional ByRef ccs As Collection = Nothing)
    Dim cc As ContentControl
    If ccs Is Nothing Then
        For Each cc In rng.ContentControls
            If Not cc.LockContents = blnLock Then
                cc.LockContents = blnLock
            End If
        Next cc
    Else
        If blnLock Then
            For Each cc In ccs
                If Not cc.LockContents = True Then
                    cc.LockContents = True
                End If
            Next cc
        Else
            For Each cc In rng.ContentControls
                If Not cc.LockContents = False Then
                    cc.LockContents = False
                    ccs.Add cc
                End If
            Next cc
        End If
    End If
End Sub

Public Sub LockAllContentControls(ccs As Collection)
    Dim cc As ContentControl

    For Each cc In ccs
        cc.LockContents = True
    Next
        
    Dim ccDocumentInformation As ContentControl
    Set ccDocumentInformation = GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation")
    If Not ccDocumentInformation Is Nothing Then
        ccDocumentInformation.LockContentControl = True
    End If
    
End Sub

Public Sub LockMainContentControls(blnLock As Boolean)
    Dim ccFrontMatter As ContentControl
    Dim cc As ContentControl
    Set ccFrontMatter = GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation")
    
    LockUnlockContentControlsInRange blnLock, ThisDoc.StoryRanges(wdFirstPageHeaderStory)
    LockUnlockContentControlsInRange blnLock, ThisDoc.StoryRanges(wdFirstPageFooterStory)
    LockUnlockContentControlsInRange blnLock, ThisDoc.StoryRanges(wdPrimaryHeaderStory)
    LockUnlockContentControlsInRange blnLock, ThisDoc.StoryRanges(wdPrimaryFooterStory)
    
    If Not ccFrontMatter Is Nothing Then
        If Not blnLock Then
            ccFrontMatter.LockContentControl = False
            ccFrontMatter.LockContents = False
        End If
        For Each cc In ccFrontMatter.Range.ContentControls
            cc.LockContents = blnLock
        Next cc
        If Not ccTranslation Is Nothing Then
            For Each cc In ccTranslation.Range.ContentControls
                cc.LockContents = False
            Next cc
            If Not ccRevisions Is Nothing Then
                ccRevisions.LockContents = False
            End If
        End If
        If blnLock Then
            ccFrontMatter.LockContentControl = True
            ccFrontMatter.LockContents = True
        End If
    End If
End Sub

'Public Function UnlockContentControls(rng As Range) As Collection
'    Dim ccs As New Collection
'    Dim cc As ContentControl
'
'    For Each cc In rng.ContentControls
'        If cc.LockContents Then
'            ccs.Add cc
'            cc.LockContents = False
'        End If
'    Next
'    Set UnlockContentControls = ccs
'End Function

Public Function UnlockAllContentControls() As Collection
    Dim ccs As New Collection
    Dim cc As ContentControl
    On Error Resume Next
    GetFirstContentControlByTag("DocumentInfo-FrontMatter:DocumentInformation").LockContentControl = False
    On Error GoTo 0
    LockUnlockContentControlsInRange False, ThisDoc.Range, ccs
    Set UnlockAllContentControls = ccs
End Function

Public Function GetPropertyValue(strDocType As String, strProperty As String, Optional justValue As Boolean = False) As String
    Dim i As Integer
    Dim field As String
    Dim value As String
    Dim mode As String
    
    For i = 2 To UBound(aDocumentTypes)
        If aDocumentTypes(i, 0) = strDocType Then
            Exit For
        End If
    Next
    If i <= UBound(aDocumentTypes) Then
        Dim j As Integer
        For j = 1 To UBound(aDocumentTypes, 2)
            mode = ""
            field = aDocumentTypes(0, j)
            If field = strProperty Then
                value = aDocumentTypes(i, j)
                If justValue Then
                    GetPropertyValue = value
                Else
                    If value = "" Then 'Set empty if not new
                        mode = "SetValue"
                        value = ""
                    ElseIf value = "#" Then 'Do nothing
                        mode = "SetDefault"
                    ElseIf value = "%" Then 'Set default if not new
                        mode = "SetDefault"
                        value = ""
                    ElseIf Left(value, 1) = "!" Then 'Force value
                        mode = "ForceValue"
                        value = Mid(value, 2)
                        If value = "%" Then
                            mode = "ForceDefault"
                            value = ""
                        End If
                    Else 'Set value if not new
                        mode = "SetValue"
                    End If
                    ' Find value
                    Select Case mode
                        Case "SetDefault", "ForceDefault"
                            Dim defaultValue As String
                            value = aDocumentTypes(1, j)
                    End Select
                    GetPropertyValue = ReplaceRText(value)
                End If
                Exit For
            End If
        Next
    Else
        GetPropertyValue = ""
    End If
    
End Function


Attribute VB_Name = "DriveButton"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Text As String
Public Path As String
Public ButtonName As String
Public DriveType As String
Public imageMSO As String
Attribute VB_Name = "InsertCalculatedField"
Attribute VB_Base = "0{F9942C9C-1590-450C-A6CF-79738F44B193}{79335A27-C953-4FE1-91DC-0DD4ADB1AD0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim dx As docXML

Public Sub DoOk()
    dx.InsertCalculatedCC TextBoxFormula.Text
    Set dx = Nothing
    Unload Me
End Sub

Public Sub DoCancel()
    Set dx = Nothing
    Unload Me
End Sub

Private Sub ComboBoxInsertField_Change()
    Dim formulaLen As Integer
    Dim formulaStart As Integer
    
    Dim txt As String
    txt = ComboBoxInsertField.Text
    formulaLen = Len(txt) + 4
    formulaStart = TextBoxFormula.SelStart
    
    If txt > "" Then
        TextBoxFormula.SelText = "[[" & txt & "]]"
        TextBoxFormula.SelStart = formulaStart
        TextBoxFormula.SelLength = formulaLen
    Else
        TextBoxFormula.SelText = ""
        TextBoxFormula.SelStart = formulaStart
        TextBoxFormula.SelLength = 0
    End If

End Sub

Private Sub CommandButtonCancel_Click()
    DoCancel
End Sub

Private Sub CommandButtonOk_Click()
    DoOk
End Sub

Private Sub TextBoxFormula_Change()
    lblResult.caption = CalculateTitle(TextBoxFormula.Text, dx)
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
    Set dx = GetManager.GetDX
End Sub

Private Sub UserForm_Layout()
  
    Dim fields() As String
    fields = Split(",Author,Date,DocNo,Language,LanguageCode,TitleLine1,TitleLine2,TitleLine3,TitleLine4,TitleLine5,MainProjectNo,ProjectNo,Revision,SupplierFileName", ",")
    
    With ComboBoxInsertField
        .List = fields
        .AutoWordSelect = True
    End With

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub

Attribute VB_Name = "MRUButton"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Text As String
Public IsPinned As Boolean
Public Path As String
Public DateAndTime As Date
Public DateOnly As Date
Public DateGroup As Integer
Public TimeText As String
Public Order As Integer
Public ButtonName As String
Attribute VB_Name = "MainForm"
Attribute VB_Base = "0{0C5D70BD-BBF6-4747-ACD5-FB5FE97EBC8A}{FEEC7402-D00A-48E9-8974-D6953024B9A7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public dx As docXML
Public RevCount As Integer
Private aRevHist() As String
Private CompanyLogoPath As String
Private NewCompanyLogoPath As String
Private toc As String
Private InChange As Boolean
Private ShowConversion As Boolean
Private ShowForm As Boolean
Private IsNewDoc As Boolean
Private WasTranslation As Boolean
Private InInit As Boolean
Private docType As String

Public Sub DoOk()
    
    dx.Prolog "Updated from main form"

    If Me.cmbDocType = "Engineering Change News" Then
        Me.TextBoxClassificationLabel = "Only for BEUMER Group internal use"
    End If
    
    dx.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", IIf(Me.OptionButtonShowFrontMatter.value = True, "", "Hide")
    dx.WriteText "/DocumentInfo/DocumentInfo-ClassificationLabel", dx.ReplaceRText(Me.TextBoxClassificationLabel)
    
    dx.WriteText "/DocumentInfo/DocumentInfo-WorkflowLabel", dx.ReplaceRText(Me.TextBoxWorkflowLabel)
    dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine1", dx.ReplaceRText(Me.TextBoxLine1)
    dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine2", dx.ReplaceRText(Me.TextBoxLine2)
    dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine3", dx.ReplaceRText(Me.TextBoxLine3)
    dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine4", dx.ReplaceRText(Me.TextBoxLine4)
    dx.WriteText "/DocumentInfo/DocumentInfo-TitleLine5", dx.ReplaceRText(Me.TextBoxLine5)
    dx.WriteText "/DocumentInfo/DocumentInfo-FrontPageInfo", dx.ReplaceRText(Me.TextBoxFrontPageInfo)
    dx.WriteText "/DocumentInfo/DocumentInfo-DocType", Me.cmbDocType.Text
    dx.WriteText "/DocumentInfo/DocumentInfo-PDFLayout", Me.cmbPDFLayout.Text
    dx.WriteText "/DocumentInfo/DocumentInfo-HeadingLayout", Me.cmbHeadingLayout.Text
    
    dx.WriteText "/DocumentInfo/DocumentInfo-DocNo", dx.ReplaceRText(Me.TextBoxDocNo)
    dx.WriteText "/DocumentInfo/DocumentInfo-ProjectNo", dx.ReplaceRText(Me.TextBoxProjectNo)
    dx.WriteText "/DocumentInfo/DocumentInfo-Author", Me.TextBoxAuthor
    dx.WriteText "/DocumentInfo/DocumentInfo-Date", Me.TextBoxDate
    dx.WriteText "/DocumentInfo/DocumentInfo-Revision", Me.TextBoxRevision
    dx.WriteText "/DocumentInfo/DocumentInfo-Description", dx.ReplaceRText(Me.TextBoxDescription)
    dx.WriteText "/DocumentInfo/DocumentInfo-SupplierFileName", dx.ReplaceRText(Me.TextBoxSupplierFileName)

    dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", Me.cmbCaptionHeading.Text
    dx.WriteText "/DocumentInfo/DocumentInfo-TOC-HeadingLevels", Me.cmbHeadingLevels.Text
    dx.WriteText "/DocumentInfo/DocumentInfo-TOC-Headings", IIf(Me.CheckBoxIncludeParmHead.value = True, "Include Parm Head", "")
    
    dx.WriteText "/DocumentInfo/DocumentInfo-TOC", IIf(Me.CheckBoxTableOfContents.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-TOF", IIf(Me.CheckBoxTableOfFigures.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-TOT", IIf(Me.CheckBoxTableOfTables.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-FrontPage", IIf(Me.CheckBoxFrontPage.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-DocumentInformation", IIf(Me.CheckBoxDocumentInformation.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-RevisionHistory-Show", IIf(Me.CheckBoxTableOfRevisions.value = True, "Standard", "")
    dx.WriteText "/DocumentInfo/DocumentInfo-Language", cmbLanguage.value
    
    If cmbCaptionHeading.Text <> dx.ReadText("/DocumentInfo/DocumentInfo-CaptionHeading") Then
        dx.UpdateCaptions = True
    End If
    
    If toc <> Me.cmbHeadingLevels.Text & dx.ReadText("/DocumentInfo/DocumentInfo-TOC-Headings") Then
        dx.RebuildTOC = True
    End If
    
    If NewCompanyLogoPath <> CompanyLogoPath Then
        dx.WriteText "/DocumentInfo/DocumentInfo-CompanyLogo", NewCompanyLogoPath
        dx.CompanyLogoUpdated = True
    End If
    
    If cmbPaper.Text <> dx.GetPaperFormat Then
        dx.NewPaperFormat = cmbPaper.Text
    End If
    
    GetRevisionHistory
    dx.WriteRevisionHistory aRevHist
    
    dx.ThisBGD.NewTranslation = CheckBoxTranslation.value
    dx.DoUpdate = True
    dx.DoReadTranslation = False
    If Application.DisplayDocumentInformationPanel = True Then Application.DisplayDocumentInformationPanel = False
    Unload Me
End Sub

Public Function GetRevisionHistory() As Variant
    aRevHist(RevCount - 1, 0) = Me.TextBoxRevision.Text
    aRevHist(RevCount - 1, 1) = Me.TextBoxDate.Text
    aRevHist(RevCount - 1, 2) = Me.TextBoxAuthor.Text
    aRevHist(RevCount - 1, 3) = Me.TextBoxDescription.Text
    GetRevisionHistory = aRevHist
End Function

Public Function SetRevisionHistory(aNewRevHist() As String, NewRevCount As Integer) As Variant
    aRevHist = OrderRevisionHistory(aNewRevHist)
    RevCount = NewRevCount
    Me.TextBoxRevision.Text = aRevHist(RevCount - 1, 0)
    Me.TextBoxDate.Text = aRevHist(RevCount - 1, 1)
    Me.TextBoxAuthor.Text = aRevHist(RevCount - 1, 2)
    Me.TextBoxDescription.Text = aRevHist(RevCount - 1, 3)
End Function

Public Sub DoCancel()
    If Not dx Is Nothing Then
        If dx.ReadText("/DocumentInfo/DocumentInfo-Language") = "" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-Language", 2057
            Me.OptionButtonHideFrontMatter.value = True
            dx.LanguageUpdated = True
            DoOk
        Else
            dx.DoUpdate = False
            dx.DoReadTranslation = False
            If Application.DisplayDocumentInformationPanel = True Then Application.DisplayDocumentInformationPanel = False
            Unload Me
        End If
    End If

End Sub

Private Sub cmbAcceptConversion_Click()
    dx.DeleteNode "/DocumentInfo/Conversion"
    MultiPageMain.value = MultiPageMain.Pages("PageMain").Index
    Me.TextBoxWorkflowLabel.Text = ""
    Me.TextBoxLine1.SetFocus
    MultiPageMain.Pages("PageConversion").visible = False
End Sub

Private Sub cmbClassificationLabel_Change()
    TextBoxClassificationLabel.value = cmbClassificationLabel.value
End Sub

Private Sub SetValue(i As Integer, j As Integer, mode As String, field As String, value As String)

    Dim oldValue As String
    Dim force As Boolean
    
    
    Dim defaultValue As String
    Select Case field
        Case "DocMainType", "Title", "Subject", "DocTitle", "DocSearchTitle", "Logo"
            Exit Sub
    End Select
    
    defaultValue = aDocumentTypes(1, j)
    
'    Select Case field
'        Case "PDFLayout"
'            oldValue = TextBoxPDFLayout.text
'        Case "HeadingLayout"
'            oldValue = TextBoxHeadingLayout.text
'        Case "ClassificationLabel"
'            oldValue = TextBoxClassificationLabel.text
'        Case "WorkflowLabel"
'            oldValue = TextBoxWorkflowLabel.text
'        Case "DocNo"
'            oldValue = TextBoxDocNo.text
'        Case "CaptionHeading"
'            oldValue = cmbCaptionHeading.text
'        Case "DocumentInformation"
'            oldValue = IIf(Me.CheckBoxDocumentInformation.value = True, "Standard", "")
'        Case "FrontMatter"
'            oldValue = IIf(Me.OptionButtonShowFrontMatter.value = True, "", IIf(Me.OptionButtonHideFrontMatter.value = True, "Hide", "Translation"))
'        Case "FrontPage"
'            oldValue = TextBoxClassificationLabel.text
'        Case "FrontPageInfo"
'            oldValue = TextBoxFrontPageInfo.text
''        Case "Logo"
''            oldValue = IIf(NewCompanyLogoPath = "", CompanyLogoPath, NewCompanyLogoPath)
'        Case "ProjectNo"
'            oldValue = TextBoxProjectNo.text
'        Case "RevisionHistory-Show"
'            oldValue = IIf(Me.CheckBoxTableOfRevisions.value = True, "Standard", "")
'        Case "TOC"
'            oldValue = IIf(Me.CheckBoxTableOfContents.value = True, "Standard", "")
'        Case "TOC-HeadingLevels"
'            oldValue = cmbHeadingLevels.text
'        Case "TOC-Headings"
'            oldValue = IIf(Me.CheckBoxIncludeParmHead.value = True, "Include Parm Head", "")
'        Case "TOF"
'            oldValue = IIf(Me.CheckBoxTableOfFigures.value = True, "Standard", "")
'        Case "TOT"
'            oldValue = IIf(Me.CheckBoxTableOfTables.value = True, "Standard", "")
'    End Select
    
    ' Debug Print i, j, mode, field, value, oldValue, defaultValue
    
    ' Find value
    Select Case mode
        Case "SetDefault"
            value = defaultValue
            force = False
        Case "ForceDefault"
            value = defaultValue
            force = True
        Case "SetValue"
            force = False
        Case "ForceValue"
            force = True
        Case "DoNothing"
            force = False
    End Select
    value = dx.ReplaceRText(value)
    ' Debug.Print oldValue, value
    
    Dim ctrl As control
    Set ctrl = Nothing
    Dim ctrlLabel As control
    Set ctrlLabel = Nothing
    
    
    Select Case field
        Case "PDFLayout"
            If mode <> "DoNothing" Then Me.cmbPDFLayout = value
            Set ctrl = Me.cmbPDFLayout
            Set ctrlLabel = Me.LabelPDFLayout
        Case "HeadingLayout"
            If mode <> "DoNothing" Then
                If value = "" Then
                    Me.cmbHeadingLayout = value
                Else
                    Me.cmbHeadingLayout = Split(value, " | ")(0)
                End If
            End If
            Set ctrl = Me.cmbHeadingLayout
            Set ctrlLabel = Me.LabelHeadingLayout
        Case "ClassificationLabel"
            If mode <> "DoNothing" Then Me.TextBoxClassificationLabel = value
            Set ctrl = Me.TextBoxClassificationLabel
        Case "WorkflowLabel"
            If mode <> "DoNothing" Then Me.TextBoxWorkflowLabel = value
            Set ctrl = Me.TextBoxWorkflowLabel
        Case "DocNo"
            If mode <> "DoNothing" Then Me.TextBoxDocNo = value
            Set ctrl = Me.TextBoxDocNo
        Case "CaptionHeading"
            If mode <> "DoNothing" Then Me.cmbCaptionHeading.value = value
            Set ctrl = Me.cmbCaptionHeading
            Set ctrlLabel = Me.LabelHeadingCaption
        Case "DocumentInformation"
            If mode <> "DoNothing" Then Me.CheckBoxDocumentInformation = (value > "")
            Set ctrl = Me.CheckBoxDocumentInformation
        Case "FrontMatter"
            Select Case value
            Case ""
                If mode <> "DoNothing" Then Me.OptionButtonShowFrontMatter.value = True
            Case "Hide"
                If mode <> "DoNothing" Then Me.OptionButtonHideFrontMatter.value = True
            End Select
            If force Then
                On Error Resume Next
                Me.OptionButtonShowFrontMatter.enabled = False
                Me.OptionButtonHideFrontMatter.enabled = False
                On Error GoTo 0
            Else
                On Error Resume Next
                Me.OptionButtonShowFrontMatter.enabled = True
                Me.OptionButtonHideFrontMatter.enabled = True
                On Error GoTo 0
            End If
        Case "FrontPage"
            If mode <> "DoNothing" Then Me.CheckBoxFrontPage = (value > "")
            Set ctrl = Me.CheckBoxFrontPage
        Case "FrontPageInfo"
            If mode <> "DoNothing" Then Me.TextBoxFrontPageInfo = value
            Set ctrl = Me.TextBoxFrontPageInfo
'        Case "Logo"
        Case "ProjectNo"
            If mode <> "DoNothing" Then Me.TextBoxProjectNo = value
            Set ctrl = Me.TextBoxProjectNo
        Case "RevisionHistory-Show"
            If mode <> "DoNothing" Then Me.CheckBoxTableOfRevisions = (value > "")
            Set ctrl = Me.CheckBoxTableOfRevisions
        Case "TOC"
            If mode <> "DoNothing" Then Me.CheckBoxTableOfContents = (value > "")
            Set ctrl = Me.CheckBoxTableOfContents
        Case "TOC-HeadingLevels"
            If mode <> "DoNothing" Then Me.cmbHeadingLevels = value
            Set ctrl = Me.cmbHeadingLevels
            Set ctrlLabel = Me.LabelHeadingLevels
        Case "TOC-Headings"
            If mode <> "DoNothing" Then Me.CheckBoxIncludeParmHead = (value > "")
            Set ctrl = Me.CheckBoxIncludeParmHead
        Case "TOF"
            If mode <> "DoNothing" Then Me.CheckBoxTableOfFigures = (value > "")
            Set ctrl = Me.CheckBoxTableOfFigures
        Case "TOT"
            If mode <> "DoNothing" Then Me.CheckBoxTableOfTables = (value > "")
            Set ctrl = Me.CheckBoxTableOfTables
    End Select
    
    If Not ctrl Is Nothing Then
        If force Then
            On Error Resume Next
            ctrl.enabled = False
            On Error GoTo 0
        Else
            On Error Resume Next
            ctrl.enabled = True
            On Error GoTo 0
        End If
    End If
      
    If Not ctrlLabel Is Nothing Then
        If force Then
            On Error Resume Next
            ctrlLabel.enabled = False
            On Error GoTo 0
        Else
            On Error Resume Next
            ctrlLabel.enabled = True
            On Error GoTo 0
        End If
    End If
      
End Sub


Private Sub cmbCompare_Click()
    CompareWithConversionBase Me
End Sub

Private Sub cmbDocType_Change()
    Dim i As Integer
   
    
    For i = 2 To UBound(aDocumentTypes)
        If aDocumentTypes(i, 0) = cmbDocType.Text Then
            Exit For
        End If
    Next
    If i <= UBound(aDocumentTypes) Then
        Dim j As Integer
        For j = 1 To UBound(aDocumentTypes, 2)
            Dim field As String
            Dim value As String
            Dim mode As String
            mode = ""
            field = aDocumentTypes(0, j)
            value = aDocumentTypes(i, j)
            If field = "HeadingLayout" Then
                With cmbHeadingLayout
                ' Set possible values
                    If InStr(value, " | ") > 0 Then
                        .List = Split(value, " | ")
                    Else
                        .List = Array("Standard", "Standard, All Caps", "Spare Parts Catalogue", "No Page Break", "No Numbering, No Page Break")
                    End If
                    .AutoWordSelect = True
                End With
            End If
            If value = "" And Not InInit Then 'Set empty if not new
                mode = "SetValue"
                value = ""
            ElseIf value = "" And InInit Then 'Set empty if not new
'                Stop
                mode = "DoNothing"
            ElseIf value = "#" Then 'Do nothing
                mode = "DoNothing"
            ElseIf value = "%" And Not InInit Then 'Set default if not new
                mode = "SetDefault"
                value = ""
            ElseIf value = "%" And InInit Then 'Set default if new
'                Stop
                mode = "DoNothing"
                value = ""
            ElseIf Left(value, 1) = "!" Then 'Force value
                mode = "ForceValue"
                value = Mid(value, 2)
                If value = "%" Then
                    mode = "ForceDefault"
                    value = ""
                End If
            ElseIf Not InInit Then 'Set value if not new
                mode = "SetValue"
            Else
                mode = "DoNothing"
            End If
            SetValue i, j, mode, field, value
        Next
    End If
    
    If Me.cmbDocType.Text = "Engineering Change News" Then
        Me.TextBoxClassificationLabel = "Only for BEUMER Group internal use"
    Else
        Me.TextBoxClassificationLabel = "" ' Saved label?
    End If
    
End Sub

Private Sub cmbMainDocType_Change()
    If Not InChange Then
        InChange = True
        InitializeDocType True
        InChange = False
    End If
End Sub

Private Sub cmbDocType_Enter()
'    SendKeys "%{Down}"
End Sub

Private Sub cmbWorkflowLabel_Change()
    TextBoxWorkflowLabel.value = cmbWorkflowLabel.value
End Sub

Private Sub CommandButtonCancel_Click()
    DoCancel
End Sub

Private Sub CommandButtonLoadImage_Click()
    Dim rng As Range
    Dim rngPic As Range
  
    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = False
        .ButtonName = "Load image"
        .title = "Select an image file"
        .Filters.Add "Image", "*.emf; *.wmf; *.png; *.gif; *.jpg; *.jpeg", 1
        .Filters.Add "All files", "*.*", 2
        .InitialView = msoFileDialogViewLargeIcons
        .InitialFileName = "\\crisnet\project\spteam\Pictures\"
        If .show = -1 Then
            NewCompanyLogoPath = .SelectedItems(1)
            If CompanyLogoPath <> NewCompanyLogoPath Then
                ImageCompanyLogo.Picture = Nothing
                If NewCompanyLogoPath > "" Then
                    On Error GoTo ErrorPicture
                    'ImageCompanyLogo.Picture = LoadPicture(Replace(Replace(NewCompanyLogoPath, "http:", "", , , vbTextCompare), "/", "\"))
                    '!!Set ImageCompanyLogo.Picture = LoadPictureGDI(Replace(Replace(NewCompanyLogoPath, "http:", "", , , vbTextCompare), "/", "\"))
                    On Error GoTo 0
                End If
            End If
        Else
        
        End If
    End With
ExitSub:
    Exit Sub
ErrorPicture:
    ' Restore old logo
    ImageCompanyLogo.Picture = Nothing
    If CompanyLogoPath > "" Then
        Dim ccRestore As ContentControl
        Set ccRestore = ActiveDocument.SelectContentControlsByTag("DocumentInfo-CompanyLogo:FrontPageHeader")(1)
        If ccRestore.Range.InlineShapes.Count > 0 Then
            ccRestore.Range.InlineShapes(1).Range.CopyAsPicture
        End If
        '!!ImageCompanyLogo.Picture = PastePicture()
    End If
    NewCompanyLogoPath = CompanyLogoPath
    If Not rng Is Nothing Then
        rng.Select
    End If
    If Not rngPic Is Nothing Then
        rngPic.Delete
    End If
    
    MsgBox "Failed loading picture. Some files are not usable.", vbCritical + vbOKOnly, "Load image"
    
    
    Resume ExitSub
End Sub

Private Sub CommandButtonquickGuide_Click()
    Dim myShell As Object
    Set myShell = CreateObject("WScript.Shell")
    myShell.run "http://extranet.crisplant.com/site/SoftwareProducts/Shared%20Documents/Documentation/BGdoc%20Template/BGdoc_QuickGuide_EN.pdf"
End Sub

Private Sub CommandButtonRemoveLogo_Click()
    NewCompanyLogoPath = ""
    ImageCompanyLogo.Picture = Nothing
End Sub


Private Sub CommandButtonNewMajor_Click()
    AddRevision GetNewMajor(Me.TextBoxRevision.Text)
End Sub

Private Sub CommandButtonNewMinor_Click()
    AddRevision GetNewMinor(Me.TextBoxRevision.Text)
End Sub

Private Sub AddRevision(newRev As String)
    aRevHist(RevCount - 1, 0) = Me.TextBoxRevision.Text
    aRevHist(RevCount - 1, 1) = Me.TextBoxDate.Text
    aRevHist(RevCount - 1, 2) = Me.TextBoxAuthor.Text
    aRevHist(RevCount - 1, 3) = Me.TextBoxDescription.Text
    ReDimPreserve aRevHist, RevCount, 4
    RevCount = RevCount + 1
    Me.TextBoxRevision.Text = newRev
    Me.TextBoxDate.Text = Format(Now, "YYYY-MM-DD")
    Me.TextBoxAuthor.Text = UserName
    Me.TextBoxDescription.Text = ""
    aRevHist(RevCount - 1, 0) = Me.TextBoxRevision.Text
    aRevHist(RevCount - 1, 1) = Me.TextBoxDate.Text
    aRevHist(RevCount - 1, 2) = Me.TextBoxAuthor.Text
    aRevHist(RevCount - 1, 3) = Me.TextBoxDescription.Text
    If Not UserName = "" Then
        Me.TextBoxDescription.SetFocus
    Else
        Me.TextBoxAuthor.SetFocus
    End If
End Sub

Private Sub CommandButtonOk_Click()
    DoOk
End Sub

Private Sub RevisionHistory_Click()
    Dim frmRevision As New RevisionHistoryForm
    Set frmRevision.CalledFrom = Me
    frmRevision.Display
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
'    Me.StartUpPosition = 0
'    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
'    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub

Public Sub Init(useDX As docXML)
    'Xebug.Print PointsToPixels(Me.Width), PointsToPixels(Me.Height), PointsToPixels(Application.ActiveWindow.UsableWidth), PointsToPixels(Application.ActiveWindow.UsableHeight)
    InInit = True
    InChange = True
    ShowConversion = False
    
    Set dx = useDX
    Dim data() As String
    Dim Language As String
    Dim rows As Integer
    Dim listIndex As Integer
    Dim i As Integer
    Dim cc As ContentControl
    Dim str As String
    
    For i = 1 To 12
        str = Right("00" & i, 2)
        Me.Controls("lbl" & str).visible = False
        Me.Controls("txt" & str).visible = False
    Next
    
    
    ' Initialize form fields
    
    Dim oConv As CustomXMLNode
    Set oConv = dx.ReadNode("/DocumentInfo/Conversion")
    If Not oConv Is Nothing Then
        ShowConversion = True
    End If
    
    If ShowConversion Then
        Me.MultiPageMain.Pages("PageConversion").visible = True
        Me.MultiPageMain.value = Me.MultiPageMain.Pages("PageConversion").Index
        ' Fill Out Conversion Controls
        Me.TextBoxConvertedFrom = dx.ReadText("/DocumentInfo/Conversion/Conversion-FromDoc")
        Me.TextBoxConvertedBy = dx.ReadText("/DocumentInfo/Conversion/Conversion-User")
        Me.TextBoxConvertedAt = dx.ReadText("/DocumentInfo/Conversion/Conversion-AtTime")
        Dim strConversionHistory As String
        strConversionHistory = dx.ReadText("/DocumentInfo/Conversion/Conversion-History")
        If strConversionHistory > "" Then
            Dim aStrConversionHistory() As String
            Dim strErrors As String
            Dim strWarnings As String
            aStrConversionHistory = Split(strConversionHistory, vbLf)
            Dim var As Variant
            For Each var In aStrConversionHistory
                If var Like "Error*" Then
                    strErrors = strErrors & IIf(strErrors = "", "", vbLf) & Split(var, "|", 2)(1)
                ElseIf var Like "Warning*" Then
                    strWarnings = strWarnings & IIf(strWarnings = "", "", vbLf) & Split(var, "|", 2)(1)
                End If
            Next
        
            TextBoxErrorsAndWarnings.Text = IIf(strErrors > "", "Errors:" & vbLf, "") & strErrors & IIf(strErrors > "" And strWarnings > "", vbLf & vbLf, "") & IIf(strWarnings > "", "Warnings:" & vbLf, "") & strWarnings
        
        End If
    Else
        Me.MultiPageMain.Pages("PageConversion").visible = False
        Me.MultiPageMain.value = Me.MultiPageMain.Pages("PageMain").Index
        Me.TextBoxLine1.SetFocus
    End If
    
    str = ""
    Dim frontMatter As String
    If Not dx.TryReadText("/DocumentInfo/DocumentInfo-FrontMatter", frontMatter) Then frontMatter = ""
    Select Case frontMatter
    Case ""
        Me.OptionButtonShowFrontMatter.value = True
    Case "Hide"
        Me.OptionButtonHideFrontMatter.value = True
    End Select
    
    
' PLY!
'    Case "Translation"
'        Me.OptionButtonShowTranslation.value = True
    If Not dx.GetFirstContentControlByTag("DocumentInfo-Translation") Is Nothing Then
        dx.GetTranslation
        dx.DoReadTranslation = False
    End If
    
    dx.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", IIf(Me.OptionButtonShowFrontMatter.value = True, "", IIf(Me.OptionButtonHideFrontMatter.value = True, "Hide", "Translation"))
    
    Me.TextBoxWorkflowLabel = dx.ReadText("/DocumentInfo/DocumentInfo-WorkflowLabel")
    Me.TextBoxClassificationLabel = dx.ReadText("/DocumentInfo/DocumentInfo-ClassificationLabel")
    
    Me.TextBoxLine1 = dx.ReadText("/DocumentInfo/DocumentInfo-TitleLine1")
    Me.TextBoxLine2 = dx.ReadText("/DocumentInfo/DocumentInfo-TitleLine2")
    Me.TextBoxLine3 = dx.ReadText("/DocumentInfo/DocumentInfo-TitleLine3")
    Me.TextBoxLine4 = dx.ReadText("/DocumentInfo/DocumentInfo-TitleLine4")
    Me.TextBoxLine5 = dx.ReadText("/DocumentInfo/DocumentInfo-TitleLine5")
    Me.TextBoxDocNo = dx.ReadText("/DocumentInfo/DocumentInfo-DocNo")
    Me.TextBoxProjectNo = dx.ReadText("/DocumentInfo/DocumentInfo-ProjectNo")
    
    Me.TextBoxRevision = dx.ReadText("/DocumentInfo/DocumentInfo-Revision")
    If Me.TextBoxRevision = "" Then
        Me.TextBoxRevision = GetNewMajor("")
        Me.TextBoxDate = Format(Now, "YYYY-MM-DD")
        Me.TextBoxAuthor = UserName
    Else
        Me.TextBoxDate = dx.ReadText("/DocumentInfo/DocumentInfo-Date")
        Me.TextBoxAuthor = dx.ReadText("/DocumentInfo/DocumentInfo-Author")
        Me.TextBoxDescription = dx.ReadText("/DocumentInfo/DocumentInfo-Description")
    End If
    
    Me.TextBoxSupplierFileName = dx.ReadText("/DocumentInfo/DocumentInfo-SupplierFileName")
    
    Me.cmbPDFLayout.value = dx.ReadText("/DocumentInfo/DocumentInfo-PDFLayout")
    Me.cmbHeadingLayout.value = dx.ReadText("/DocumentInfo/DocumentInfo-HeadingLayout")
    
    Me.cmbHeadingLevels.Text = dx.ReadText("/DocumentInfo/DocumentInfo-TOC-HeadingLevels")
    If Me.cmbHeadingLevels.Text = "" Then
        Me.cmbHeadingLevels.Text = "6"
        Me.CheckBoxIncludeParmHead = True
    Else
        Me.CheckBoxIncludeParmHead = (dx.ReadText("/DocumentInfo/DocumentInfo-TOC-Headings") > "")
    End If
    
    toc = Me.cmbHeadingLevels.Text & dx.ReadText("/DocumentInfo/DocumentInfo-TOC-Headings")
    
    Me.cmbDocType.Text = dx.ReadText("/DocumentInfo/DocumentInfo-DocType")
    If Me.cmbDocType.Text = "" Then Me.cmbDocType.Text = "Project Document"
    Me.cmbMainDocType.Text = mainDocType(cmbDocType.Text)
    Me.TextBoxFrontPageInfo = dx.ReadText("/DocumentInfo/DocumentInfo-FrontPageInfo")
   
    Me.cmbCaptionHeading.Text = dx.ReadText("/DocumentInfo/DocumentInfo-CaptionHeading")
    If Me.cmbCaptionHeading.Text = "" Then
        Me.cmbCaptionHeading.Text = "1"
        Me.CheckBoxFrontPage = True
        Me.CheckBoxTableOfContents = True
        Me.CheckBoxTableOfFigures = False
        Me.CheckBoxTableOfTables = False
        Me.CheckBoxDocumentInformation = True
        Me.CheckBoxTableOfRevisions = True
    Else
        Me.CheckBoxFrontPage = (dx.ReadText("/DocumentInfo/DocumentInfo-FrontPage") > "")
        Me.CheckBoxTableOfContents = (dx.ReadText("/DocumentInfo/DocumentInfo-TOC") > "")
        Me.CheckBoxTableOfFigures = (dx.ReadText("/DocumentInfo/DocumentInfo-TOF") > "")
        Me.CheckBoxTableOfTables = (dx.ReadText("/DocumentInfo/DocumentInfo-TOT") > "")
        Me.CheckBoxDocumentInformation = (dx.ReadText("/DocumentInfo/DocumentInfo-DocumentInformation") > "")
        Me.CheckBoxTableOfRevisions = (dx.ReadText("/DocumentInfo/DocumentInfo-RevisionHistory-Show") > "")
    End If
    
    
    ' Set Customer Logo in Form
    CompanyLogoPath = dx.ReadText("/DocumentInfo/DocumentInfo-CompanyLogo")
    NewCompanyLogoPath = CompanyLogoPath
    On Error Resume Next
    Set cc = ActiveDocument.SelectContentControlsByTag("DocumentInfo-CompanyLogo:FrontPageHeader")(1)
    On Error GoTo 0
    If Not cc Is Nothing Then
        If CompanyLogoPath > "" Then
            Dim clip As DataObject
            Dim hasStr As Boolean
            Set clip = New DataObject
            clip.GetFromClipboard
            If clip.GetFormat(1) Then
                str = clip.GetText
                hasStr = True
            End If
            
            If cc.Range.InlineShapes.Count > 0 Then
                cc.Range.InlineShapes(1).Range.CopyAsPicture
            End If
            '!!ImageCompanyLogo.Picture = PastePicture()
            
            If hasStr Then
                 clip.SetText str
                 clip.PutInClipboard
            End If
            Set clip = Nothing
        End If
    End If
    ' Initialize Paper
    With cmbPaper
        .List = Array("A4 - Portrait", "Letter - Portrait", "A3 - Portrait", "Tabloid/Ledger - Portrait", _
                      "A4 - Landscape", "Letter - Landscape", "A3 - Landscape", "Tabloid/Ledger - Landscape")
        .AutoWordSelect = True
    End With
    cmbPaper.Text = dx.GetPaperFormat
    
    ' Initalize languages
    Language = dx.ReadText("/DocumentInfo/DocumentInfo-Language")
    If Language = "" Then
        IsNewDoc = True
        Language = "2057"
    Else
        IsNewDoc = False
    End If
    listIndex = 1
    
    rows = UBound(aLanguages, 1)
    For i = 0 To rows - 1
        If aLanguages(i, 0) = Language Then
            listIndex = i
            Exit For
        End If
    Next
    
    With cmbLanguage
        .List = aLanguages
        .ListRows = rows + 1
        .listIndex = listIndex
        If rows > 25 Then .ListRows = 25
    End With

    With cmbHeadingLevels
        .List = Array("1", "2", "3", "4", "5", "6", "7", "8")
        .AutoWordSelect = True
    End With
    
    With cmbPDFLayout
        .List = Array("Standard", "Two Page Right")
        .AutoWordSelect = True
    End With
    
'    With cmbHeadingLayout
'        .List = Array("Standard", "Standard, All Caps", "Spare Parts Catalogue", "No Page Break", "No Numbering, No Page Break")
'        .AutoWordSelect = True
'    End With
    
    With cmbWorkflowLabel
        .List = Array("", "Draft", "Reviewed", "Approved", "For translation") ', "Ready for Doc dept", "Ready for translation", "eDoc version", "Tracked changes")
        .AutoWordSelect = True
    End With
    
    With cmbClassificationLabel
        .List = Array("", "Confidential", "Official", "Only for BEUMER Group internal use", "Restricted", "Secret", "Unclassified")
        .AutoWordSelect = True
    End With
    
    With cmbCaptionHeading
        .List = Array("1", "2", "3", "none")
        .AutoWordSelect = True
    End With
    
    ' Check if Clone
    
    Dim saveFolder As String
    Dim saveFileName As String
    saveFolder = dx.ThisBGD.saveFolder
    saveFileName = dx.ThisBGD.saveFileName
    
    dx.ReadRevisionHistory
    RevCount = dx.RevCount
    ReDim aRevHist(RevCount - 1, 4)
    aRevHist = dx.GetRevisionHistory
    
'    If LCase(dx.ThisDoc.Path) = LCase(UserTemp & "\BGdoc") Then ' Temporary file
'        If dx.ThisDoc.name Like "* ####-##-## ##.##.##*" Then ' From clone
'            Dim pos As Long
'            pos = InStrRev(dx.ThisDoc.name, " ")
'            pos = InStrRev(dx.ThisDoc.name, " ", pos - 1)
'            Dim orgName As String
'            orgName = Left(dx.ThisDoc.name, pos - 1)
'            ' Change revision history
'            If dx.ThisDoc.name Like Replace(saveFileName, ".docx", "", , , vbTextCompare) & " ####-##-## ##.##.##*" Then ' New name
'                If Not aRevHist(0, 3) = "Based on '" & orgName & "' in '" & saveFolder & "'" Then
'                    ReDim aRevHist(0, 4)
'                    aRevHist(0, 0) = GetNewMajor("")
'                    aRevHist(0, 1) = Format(Now, "YYYY-MM-DD")
'                    aRevHist(0, 2) = UserName
'                    aRevHist(0, 3) = "Based on '" & orgName & "' in '" & saveFolder & "'"
'                    Me.TextBoxRevision = aRevHist(0, 0)
'                    Me.TextBoxDate = aRevHist(0, 1)
'                    Me.TextBoxAuthor = aRevHist(0, 2)
'                    Me.TextBoxDescription = aRevHist(0, 3)
'                    RevCount = 1
'                End If
'                If dx.ReadText("/DocumentInfo/DocumentInfo-SaveFileName") > "" Then
'                    saveFileName = dx.ReadText("/DocumentInfo/DocumentInfo-SaveFileName")
'                Else
'                    saveFileName = "[[TitleLine1]]"
'                End If
'                dx.ThisBGD.saveFileName = saveFileName
'            End If
'        End If
'    End If
    
    InitializeDocType
    
    InChange = False
    
    If ActiveDocument.ReadOnly Then
        Dim ctrl As control
        For Each ctrl In Me.Controls
            ctrl.enabled = False
        Next
        CommandButtonCancel.enabled = True
        CommandButtonquickGuide.enabled = True
        MultiPageMain.enabled = True
        frameRevison.enabled = True
        RevisionHistory.enabled = True
    End If
    InInit = False
End Sub

Public Sub InitializeDocType(Optional GetFirstForMainDocType As Boolean = False)
    Dim rows As Integer
    Dim rowsForType As Integer
    Dim aMainDocTypes() As String
    Dim newMainDocType As String
    Dim m As Integer
    Dim i As Integer
    docType = dx.ReadText("/DocumentInfo/DocumentInfo-Form")
    If docType = "" Then docType = cmbDocType.Text
    Dim newDocType As Boolean
    newDocType = True
    
    m = 0
    rows = UBound(aDocumentTypes, 1)
    rowsForType = 0

    For i = 2 To rows
        If aDocumentTypes(i, 0) = docType Then
            newDocType = False
            Exit For
        End If
    Next

    With cmbDocType
        If newDocType Then
            ReDim aDocTypes(rows - 1)
        Else
        ReDim aDocTypes(rows - 2)
        End If
        For i = 2 To rows
            If aDocumentTypes(i, 1) = cmbMainDocType.Text Then
                aDocTypes(rowsForType) = aDocumentTypes(i, 0)
                rowsForType = rowsForType + 1
            End If
            newMainDocType = aDocumentTypes(i, 1)
            Dim iM As Integer
            For iM = 0 To m - 1
                If aMainDocTypes(iM) = newMainDocType Then
                    Exit For
                End If
            Next
            If iM = m Then 'new
                ReDim Preserve aMainDocTypes(m)
                aMainDocTypes(m) = newMainDocType
                m = m + 1
            End If
        Next
        If newDocType Then
            aDocTypes(UBound(aDocTypes)) = docType
            ReDim Preserve aMainDocTypes(m)
            aMainDocTypes(m) = docType
        End If
        If rowsForType > 0 Then
        ReDim Preserve aDocTypes(rowsForType - 1)
            .ListRows = rows - 1
            If rows - 1 > 25 Then .ListRows = 25
            .List = aDocTypes
            .AutoWordSelect = True
            End If
        If rowsForType <= 1 Then
            .visible = False
        Else
            .visible = True
        End If
    End With
    
    With cmbMainDocType
        .List = aMainDocTypes
    End With
    
    If GetFirstForMainDocType And rowsForType > 1 Then
        cmbDocType.SetFocus
        cmbDocType.Text = ""
        SendKeys "%{Down}"
    ElseIf GetFirstForMainDocType Then
        For i = 2 To rows
            If aDocumentTypes(i, 1) = cmbMainDocType.Text Then
                cmbDocType.Text = aDocumentTypes(i, 0)
                Exit For
            End If
        Next
    End If
    
    
    Dim aLocked() As String
    Dim locked As String
    Dim ctrlName As Variant
    Dim ctrl As control
    
    
    'Stop
    locked = dx.ReadText("/DocumentType/DocumentType-LockedProperties")
    aLocked = Split(locked, "|")
    If (docType = cmbDocType.Text) And cmbMainDocType.Text = "" Then
        cmbMainDocType.Text = docType
    End If
    If (docType = cmbMainDocType.Text) Or (docType = cmbDocType.Text) Then
        cmbDocType.Text = docType
        If locked > "" Then
            For Each ctrlName In aLocked
                Set ctrl = Nothing
                On Error Resume Next
                Set ctrl = Me.Controls("TextBox" & Replace(ctrlName, "Title", ""))
                On Error GoTo 0
                If Not ctrl Is Nothing Then
                    ctrl.locked = True
                    ctrl.enabled = False
                    ctrl.BackColor = &H8000000F
                    ctrl.tabStop = False
                End If
                Set ctrl = Nothing
                On Error Resume Next
                Set ctrl = Me.Controls("cmb" & ctrlName)
                On Error GoTo 0
                If Not ctrl Is Nothing Then
                    ctrl.locked = True
                    ctrl.enabled = False
                    ctrl.BackColor = &H8000000F
                    ctrl.tabStop = False
                End If
            Next
        End If
    Else
        If locked > "" Then
            For Each ctrlName In aLocked
                Set ctrl = Nothing
                On Error Resume Next
                Set ctrl = Me.Controls("TextBox" & Replace(ctrlName, "Title", ""))
                On Error GoTo 0
                If Not ctrl Is Nothing Then
                    ctrl.locked = False
                    ctrl.enabled = True
                    ctrl.BackColor = &H80000005
                    ctrl.tabStop = True
                End If
                Set ctrl = Nothing
                On Error Resume Next
                Set ctrl = Me.Controls("cmb" & ctrlName)
                On Error GoTo 0
                If Not ctrl Is Nothing Then
                    ctrl.locked = False
                    ctrl.enabled = True
                    ctrl.BackColor = &H80000005
                    ctrl.tabStop = True
                End If
            Next
        End If
    End If
    
    
    IsNewDoc = False
    
End Sub

Public Function mainDocType(docType As String) As String
    Dim newMainDocType As String
    newMainDocType = ""
    Dim rows As Integer
    Dim i As Integer
    rows = UBound(aDocumentTypes, 1)
    For i = 2 To rows
        If aDocumentTypes(i, 0) = docType Then
            newMainDocType = aDocumentTypes(i, 1)
            Exit For
        End If
    Next
    If newMainDocType = "" Then
        'Dim size As Integer
        'size = UBound(aMainDocTypes) + 1
        'ReDim Preserve aMainDocTypes(size)
        'aMainDocTypes(UBound(aMainDocTypes)) = DocType
        mainDocType = docType
    End If
    mainDocType = newMainDocType
        
End Function

Attribute VB_Name = "MarkAsForm"
Attribute VB_Base = "0{5A770AC7-0654-422B-A8A9-6B53A2777C2F}{B0D8D449-2CF5-4673-80B5-EB99FAD9FC1A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim bgd As BGDoc
Dim dx As docXML
Dim SaveAsForm As String
Dim addProp() As String


Public Sub DoOk()
    If SaveAsForm > "" Then
        bgd.SetFormName SaveAsForm
        bgd.SetSaveFileName Trim(TextBoxSaveFileName.Text)
        bgd.SetSaveFolder Trim(TextBoxSaveFolder.Text)
    Else
        bgd.SetFormName ""
    End If
    Set bgd = Nothing
    
    
    ' Save Properties
    
    dx.WriteText "/DocumentInfo/DocumentInfo-DocType", Trim(TextBoxDocType.Text)
    
    dx.WriteText "/DocumentType/DocumentType-AdditionalProperties", Trim(TextBoxAdditionalProperties.Text)
    dx.WriteText "/DocumentType/DocumentType-CalculatedProperties", Trim(TextBoxCalculatedProperties.Text)
    dx.WriteText "/DocumentType/DocumentType-DocSearchTitle", Trim(TextBoxDocSearchTitle.Text)
    dx.WriteText "/DocumentType/DocumentType-DocTitle", Trim(TextBoxDocTitle.Text)
    dx.WriteText "/DocumentType/DocumentType-LockedProperties", Trim(TextBoxLockedProperties.Text)
    dx.WriteText "/DocumentType/DocumentType-MandatoryProperties", Trim(TextBoxMandatoryProperties.Text)
    dx.WriteText "/DocumentType/DocumentType-SaveFileName", Trim(TextBoxSaveFileName.Text)
    dx.WriteText "/DocumentType/DocumentType-SaveFolder", Trim(TextBoxSaveFolder.Text)
    dx.WriteText "/DocumentType/DocumentType-SharePointProperties", Trim(TextBoxSharePointProperties.Text)
    dx.WriteText "/DocumentType/DocumentType-Subject", Trim(TextBoxSubject.Text)
    dx.WriteText "/DocumentType/DocumentType-Title", Trim(TextBoxTitle.Text)
    
    If ListBoxGoto.listIndex < 4 Then
        If dx.ThisDoc.Bookmarks.exists("Start") Then
            dx.ThisDoc.Bookmarks("Start").Delete
        End If
        Dim rng As Range
        Select Case ListBoxGoto.listIndex
            Case 0 ' "Start of document"
            ' No bookmark
            
            Case 1 ' "Start of document text"
            Set rng = dx.GetDocumentRange
            rng.Collapse wdCollapseStart
            On Error Resume Next
            rng.Move wdCharacter, 1
            On Error GoTo 0
            dx.ThisDoc.Bookmarks.Add "Start", rng
            
            Case 2 ' "End of document"
            Set rng = ActiveDocument.Content
            rng.Collapse wdCollapseEnd
            dx.ThisDoc.Bookmarks.Add "Start", rng
            
            Case 3 ' "New Bookmark at current cursor"
            Set rng = dx.ThisDoc.Application.Selection.Range
            rng.Collapse wdCollapseStart
            dx.ThisDoc.Bookmarks.Add "Start", rng
            
        End Select
    End If
    
    
    Unload Me
End Sub

Public Sub DoCancel()
    Unload Me
End Sub

Private Sub UpdateTextFromCombo(cmb As control, tbox As control, Optional blocked As Boolean = True)
    Dim formulaLen As Integer
    Dim formulaStart As Integer
    
    Dim Text As String
    Text = cmb.Text
    If blocked Then
        formulaLen = Len(Text) + 4
    Else
        formulaLen = Len(Text)
    End If
    formulaStart = tbox.SelStart
    
    If Text > "" Then
        If blocked Then
            tbox.SelText = "[[" & Text & "]]"
        Else
            If tbox.SelStart <= 1 Then
                tbox.SelText = Text
            Else
                tbox.SelText = "|" & Text
                formulaLen = formulaLen + 1
            End If
        End If
        tbox.SelStart = formulaStart
        tbox.SelLength = formulaLen
    Else
        tbox.SelText = ""
        tbox.SelStart = formulaStart
        tbox.SelLength = 0
    End If
End Sub

Private Sub ComboBoxCalculatedProperties_Change()
    UpdateTextFromCombo ComboBoxCalculatedProperties, TextBoxCalculatedProperties
End Sub

Private Sub ComboBoxDocSearchTitle_Change()
    UpdateTextFromCombo ComboBoxDocSearchTitle, TextBoxDocSearchTitle
End Sub

Private Sub ComboBoxDocTitle_Change()
    UpdateTextFromCombo ComboBoxDocTitle, TextBoxDocTitle
End Sub

Private Sub ComboBoxFileNameField_Change()
    UpdateTextFromCombo ComboBoxFileNameField, TextBoxSaveFileName
End Sub

Private Sub ComboBoxFolderField_Change()
    UpdateTextFromCombo ComboBoxFolderField, TextBoxSaveFolder
End Sub

Private Sub ComboBoxLockedProperties_Change()
    UpdateTextFromCombo ComboBoxLockedProperties, TextBoxLockedProperties, False
End Sub

Private Sub ComboBoxMandatoryProperties_Change()
    UpdateTextFromCombo ComboBoxMandatoryProperties, TextBoxMandatoryProperties, False
End Sub

Private Sub ComboBoxSharePointProperties_Change()
    UpdateTextFromCombo ComboBoxSharePointProperties, TextBoxSharePointProperties
End Sub

Private Sub ComboBoxSubject_Change()
    UpdateTextFromCombo ComboBoxSubject, TextBoxSubject
End Sub

Private Sub ComboBoxSuggestedDocSearchTitle_Change()
    UpdateTextFromCombo ComboBoxSuggestedDocSearchTitle, TextBoxDocSearchTitle, False
End Sub

Private Sub ComboBoxSuggestedDocTitle_Change()
    UpdateTextFromCombo ComboBoxSuggestedDocTitle, TextBoxDocTitle, False
End Sub

Private Sub ComboBoxSuggestedSubject_Change()
    UpdateTextFromCombo ComboBoxSuggestedSubject, TextBoxSubject, False
End Sub

Private Sub ComboBoxSuggestedTitle_Change()
    UpdateTextFromCombo ComboBoxSuggestedTitle, TextBoxTitle, False
End Sub

Private Sub ComboBoxTitle_Change()
    UpdateTextFromCombo ComboBoxTitle, TextBoxTitle
End Sub

Private Sub CommandButtonCancel_Click()
    DoCancel
End Sub

Private Sub CommandButtonOk_Click()
    If Trim(TextBoxDocType) = "" Then
        MsgBox "Please give the form a telling name", vbOKOnly, "Missing name of form"
    ElseIf IsValidFileName(Trim(TextBoxDocType)) Then
        SaveAsForm = Trim(TextBoxDocType)
        DoOk
    Else
        MsgBox "Please give the form a name that is a valid filename", vbOKOnly, "Unfortunate name for the form"
    End If
End Sub
 
Private Sub CommandButtonRemove_Click()
    SaveAsForm = ""
    DoOk
End Sub

Private Sub TextBoxAdditionalProperties_Change()
    Dim result As String
    result = ""
    Dim aAP() As String
    Dim aP() As String
    
    Dim updated As Boolean
    updated = False
    
    Dim i As Integer
    Dim j As Integer
    
    aAP = Split(Trim(TextBoxAdditionalProperties.Text), vbCrLf)
    If TextBoxAdditionalProperties = "" Then
        updated = True
    ElseIf (Not addProp) = -1 Then  ' Empty
        updated = True
    ElseIf UBound(aAP) <> UBound(addProp) Then
        updated = True
    Else
        For i = 0 To UBound(aAP)
            aP = Split(Trim(aAP(i)), "|")
            If aP(0) <> addProp(j) Then
                updated = True
            End If
        Next
    End If
    If updated Then
        Dim aNewProp() As String
        For i = 0 To UBound(aAP)
            aP = Split(Trim(aAP(i)), "|")
            For j = 0 To 0 'UBound(aP)
                If aAP(i) > "" Then
                    ReDim Preserve aNewProp(i)
                    aNewProp(i) = Trim(aP(0))
                    result = result & IIf(result > "", vbCrLf, "") & Trim(aP(0))
                End If
            Next
        Next
        addProp = aNewProp
    End If
    txtCalcResult.Text = result
End Sub

Private Sub TextBoxCalculatedProperties_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxCalculatedProperties.Text, dx)
End Sub

Private Sub TextBoxCalculatedProperties_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxCalculatedProperties.Text, dx)
End Sub

Private Sub TextBoxDocSearchTitle_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxDocSearchTitle.Text, dx)
End Sub

Private Sub TextBoxDocSearchTitle_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxDocSearchTitle.Text, dx)
End Sub

Private Sub TextBoxDocTitle_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxDocTitle.Text, dx)
End Sub

Private Sub TextBoxDocTitle_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxDocTitle.Text, dx)
End Sub

Private Sub TextBoxSaveFileName_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSaveFileName.Text, dx)
End Sub

Private Sub TextBoxSaveFileName_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSaveFileName.Text, dx)
End Sub

Private Sub TextBoxSaveFolder_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSaveFolder.Text, dx)
End Sub

Private Sub TextBoxSaveFolder_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSaveFolder.Text, dx)
End Sub

Private Sub TextBoxSharePointProperties_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSharePointProperties.Text, dx)
End Sub

Private Sub TextBoxSharePointProperties_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSharePointProperties.Text, dx)
End Sub

Private Sub TextBoxSubject_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSubject.Text, dx)
End Sub

Private Sub TextBoxSubject_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxSubject.Text, dx)
End Sub

Private Sub TextBoxTitle_Change()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxTitle.Text, dx)
End Sub

Private Sub TextBoxTitle_Enter()
    txtCalcResult.Text = CalculateMultiLineTitle(TextBoxTitle.Text, dx)
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
    
    Set bgd = GetManager.GetBGDocFromDoc(ActiveDocument)
    Set dx = GetManager.GetDX
End Sub

Private Sub UserForm_Layout()
    ' Read Form XML
    
    TextBoxDocType.Text = dx.ReadText("/DocumentInfo/DocumentInfo-DocType")
    
    TextBoxAdditionalProperties.Text = dx.ReadText("/DocumentType/DocumentType-AdditionalProperties")
    TextBoxCalculatedProperties.Text = dx.ReadText("/DocumentType/DocumentType-CalculatedProperties")
    TextBoxDocSearchTitle.Text = dx.ReadText("/DocumentType/DocumentType-DocSearchTitle")
    TextBoxDocTitle.Text = dx.ReadText("/DocumentType/DocumentType-DocTitle")
    TextBoxLockedProperties.Text = dx.ReadText("/DocumentType/DocumentType-LockedProperties")
    TextBoxMandatoryProperties.Text = dx.ReadText("/DocumentType/DocumentType-MandatoryProperties")
    TextBoxSaveFileName.Text = dx.ReadText("/DocumentType/DocumentType-SaveFileName")
    TextBoxSaveFolder.Text = dx.ReadText("/DocumentType/DocumentType-SaveFolder")
    TextBoxSharePointProperties.Text = dx.ReadText("/DocumentType/DocumentType-SharePointProperties")
    TextBoxSubject.Text = dx.ReadText("/DocumentType/DocumentType-Subject")
    TextBoxTitle.Text = dx.ReadText("/DocumentType/DocumentType-Title")
    
    
    SaveAsForm = bgd.FormName '(DV(DX.ThisDoc, "FormName") > "")
    TextBoxSaveFolder.Text = Trim(bgd.saveFolder)
    TextBoxSaveFileName.Text = Trim(bgd.saveFileName)
    
'    If SaveAsForm > "" Then
'        TextBoxDocType = SaveAsForm
'        lblQuestion.caption = "Already used as a form for new documents. Change path and file name or change to normal document?"
'    Else
'        lblQuestion.caption = "Use this document as a form for creating new documents?"
'    End If
 
    FillComboBoxes
    
    Dim fields() As String
    fields = Split("|[[ProjectNo]] - [[DocNo]], [[TitleLine1]] - [[TitleLine2]]|[[DocNo]], [[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]|[[DocNo]], [[TitleLine1]] - [[TitleLine2]] - [[TitleLine3]] - [[TitleLine4]]|[[TitleLine1]] - [[TitleLine2]] - [[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]", "|")
    FillComboBox ComboBoxSuggestedTitle, fields
    
    fields = Split("|[[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]|[[TitleLine1]] - [[TitleLine2]]|[[TitleLine5]]", "|")
    FillComboBox ComboBoxSuggestedSubject, fields
    
    fields = Split("|[[TitleLine1]] - [[TitleLine2]]|[[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]|[[TitleLine1]] - [[TitleLine2]] - [[TitleLine3]]|[[TitleLine4]] - [[TitleLine5]]", "|")
    FillComboBox ComboBoxSuggestedDocTitle, fields
    
    fields = Split("|[[ProjectNo]] - [[DocNo]], [[TitleLine1]] - [[TitleLine2]] - [[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]|[[ProjectNo]] - [[DocNo]], [[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]] ([[TitleLine1]] - [[TitleLine2]])|[[DocNo]], [[TitleLine1]] - [[TitleLine2]] - [[TitleLine3]] - [[TitleLine4]]|[[TitleLine1]] - [[TitleLine2]], [[TitleLine3]] - [[TitleLine4]] - [[TitleLine5]]", "|")
    FillComboBox ComboBoxSuggestedDocSearchTitle, fields
    
    
    With ListBoxGoto
        If dx.ThisDoc.Bookmarks.exists("Start") Then
            .List = Array("Start of document", "Start of document text", "End of document", "New Bookmark at current cursor", "Current Start bookmark")
            .listIndex = 4
        Else
            .List = Array("Start of document", "Start of document text", "End of document", "New Bookmark at current cursor")
            .listIndex = 0
        End If
    End With

End Sub

Private Sub FillComboBoxes()
    Dim fields() As String
    fields = Split(",Author,Date,DocNo,FormName,Language,LanguageCode,TitleLine1,TitleLine2,TitleLine3,TitleLine4,TitleLine5,MainProjectNo,ProjectNo,Revision,SupplierFileName", ",")
    
    FillComboBox ComboBoxLockedProperties, fields
    FillComboBox ComboBoxMandatoryProperties, fields
    FillComboBox ComboBoxFolderField, fields
    FillComboBox ComboBoxFileNameField, fields
    FillComboBox ComboBoxCalculatedProperties, fields
    FillComboBox ComboBoxSubject, fields
    FillComboBox ComboBoxTitle, fields
    FillComboBox ComboBoxDocTitle, fields
    FillComboBox ComboBoxDocSearchTitle, fields
    FillComboBox ComboBoxSharePointProperties, fields
End Sub

Private Sub FillComboBox(cmb As control, fields() As String)
    With cmb
        .List = fields
        .AutoWordSelect = True
    End With
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub

Attribute VB_Name = "PictureTool"
Attribute VB_Base = "0{8DA7A530-83CB-4BB1-8074-AC84248AD115}{10D921B9-8FB7-4BFA-8A53-26EB6D86266F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
    
Private PicRange As Range
Private bgpm As BGPictureManager
Private current As String
Private DoneLoad As Boolean
Private ActiveFilter As String

Private Embedded As Integer
Private EmbeddedAndLinked As Integer
Private MissingInDocumentAndOnDisk As Integer
Private MissingOnDisk As Integer
Private EditedOnDisk As Integer
Private LinkedOnly As Integer

Private dx As docXML

Public Sub DoClose()
    Set dx = Nothing
    Unload Me
End Sub

Private Sub cmdAll_Click()
    FillList "All"
End Sub

Private Sub cmdBreakLink_Click()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        BreakLink key
    End If
End Sub

Private Sub cmdChangeToV_Click()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        Dim bgp As BGPicture
        Set bgp = bgpm.GetBGPictures(key)
        
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Change to V:"
        bgp.ChangePictureToV
        bgp.Read dx, True, True, True
        
        dx.updated = True
        dx.Epilog
        Set dx = Nothing
        
        FillList ActiveFilter, lstPictures.listIndex
    End If
End Sub

Private Sub cmdCheckAll_Click()
    Dim ok As Boolean
    ok = bgpm.Read(dx, True, False, False)
    RefillList
    
End Sub

Private Sub cmdClose_Click()
    DoClose
End Sub

Private Sub GotoPicture(key As String)
    current = key
    Dim bgp As BGPicture
    Set bgp = bgpm.GetBGPictures(current)
    If bgp.TypeOfPicture = InlineType Then
        bgp.InlineShape.Range.Select
        bgp.InlineShape.Range.Parent.ActiveWindow.ScrollIntoView bgp.Range
    Else
        bgp.Shape.Anchor.Select
        bgp.Shape.Anchor.Parent.ActiveWindow.ScrollIntoView bgp.Range
    End If
    Unload Me
End Sub


Private Sub cmdEditedOnDisk_Click()
    FillList "Edited"
End Sub

Private Sub cmdEditCancel_Click()
    Dim name As String
    txtPath.Text = txtBackupPath.Text
    If InStr(txtPath.Text, divider(True)) > 0 Then
        name = Mid(txtPath, InStrRev(txtPath.Text, divider(True)) + 1)
        txtName.Text = name
        txtDirectory.Text = Left(txtPath.Text, Len(txtPath.Text) - 1 - Len(name))
    Else
        txtDirectory.Text = ""
        txtName.Text = txtPath.Text
    End If

End Sub

Private Sub cmdEditReplace_Click()
    Dim key As String
    If lstPictures.listIndex = -1 Then
        Exit Sub
    End If
    
    key = lstPictures.List(lstPictures.listIndex, 0)
    If txtPath.Text = "" Then Exit Sub
    If Dir(txtPath.Text) = "" Then Exit Sub
On Error GoTo Failed
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Replace picture"
    
    Dim bgp As BGPicture
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(key)

    Dim fileName As String
    fileName = FixPath(txtPath.Text)
   
    Dim inlSelect As InlineShape
    Dim shpSelect As Shape
    Dim rng As Range
    
    If bgp.ShapeType = "Inline" Then
        Set inlSelect = bgp.InlineShape
        Set rng = inlSelect.Range.Duplicate
        inlSelect.Delete
        rng.Select
        Set inlSelect = Selection.InlineShapes.AddPicture(fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range)
        With Selection
             .Expand Unit:=wdParagraph
             inlSelect.PictureFormat.ColorType = msoPictureAutomatic
             If inlSelect.Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                 inlSelect.LockAspectRatio = msoTrue
                 inlSelect.Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
             Else
                 inlSelect.LockAspectRatio = msoTrue
             End If
             If Selection.Information(wdWithInTable) Then
                 If inlSelect.Width > Selection.Cells(1).Width Then
                     inlSelect.LockAspectRatio = msoTrue
                     inlSelect.Width = Selection.Cells(1).Width
                 End If
             End If
             .Collapse Direction:=wdCollapseEnd
        End With
        Set bgp.InlineShape = inlSelect
        Set bgp.Range = inlSelect.Range
        bgp.RangeStart = inlSelect.Range.start
        bgp.RangeEnd = inlSelect.Range.End
        inlSelect.Select
    Else
        Set shpSelect = bgp.Shape
        Set rng = shpSelect.Anchor.Duplicate
        shpSelect.Delete
        rng.Select
        Set shpSelect = Selection.InlineShapes.AddPicture(fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range).ConvertToShape
        With Selection
             .Expand Unit:=wdParagraph
             shpSelect.PictureFormat.ColorType = msoPictureAutomatic
             If shpSelect.Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                 shpSelect.LockAspectRatio = msoTrue
                 shpSelect.Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
             Else
                 shpSelect.LockAspectRatio = msoTrue
             End If
             If Selection.Information(wdWithInTable) Then
                 If shpSelect.Width > Selection.Cells(1).Width Then
                     shpSelect.LockAspectRatio = msoTrue
                     shpSelect.Width = Selection.Cells(1).Width
                 End If
             End If
             .Collapse Direction:=wdCollapseEnd
        End With
        Set bgp.Shape = shpSelect
        Set bgp.Range = shpSelect.Anchor
        bgp.RangeStart = shpSelect.Anchor.start
        bgp.RangeEnd = shpSelect.Anchor.End
        shpSelect.Select
    End If
    
    bgp.Read dx, True, True, True
    FillList ActiveFilter, lstPictures.listIndex
    
    dx.updated = True
ExitSub:
    On Error GoTo 0
    If Not dx Is Nothing Then
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub

Private Sub cmdEmbeddded_Click()
    FillList "Embedded"
End Sub

Private Sub cmdEmbeddedAndLinked_Click()
    FillList "Embedded and linked"
End Sub

Private Sub cmdGoToPicture_Click()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
    End If
    GotoPicture key
End Sub

Private Sub cmdLinkedOnly_Click()
    FillList "Linked only!"
End Sub

Private Sub cmdMissingInDocumentAndOnDisk_Click()
    FillList "Missing in document and on disk!"
End Sub

Private Sub cmdMissingOnDisk_Click()
    FillList "Missing on disk!"
End Sub

Private Sub cmdRefreshAll_Click()
    Dim bgp As BGPicture
    Dim key As String
    Dim bgpColl As Scripting.Dictionary
    Set bgpColl = bgpm.GetBGPictures
    
    Dim i As Integer
    For i = 0 To lstPictures.ListCount - 1
        key = lstPictures.List(i, 0)
        Set bgp = bgpColl(key)
        If bgp.Disk Like "Edited*" Or bgp.Disk = "Embedded and linked" Then
            RefreshFromDisk key
        End If
    Next
End Sub

Private Sub cmdRefreshEdited_Click()
    Dim bgp As BGPicture
    Dim key As String
    Dim bgpColl As Scripting.Dictionary
    Set bgpColl = bgpm.GetBGPictures
    
    Dim i As Integer
    For i = 0 To lstPictures.ListCount - 1
        key = lstPictures.List(i, 0)
        Set bgp = bgpColl(key)
        If bgp.Disk Like "Edited*" Then
            RefreshFromDisk key
        End If
    Next
End Sub

Private Sub cmdRefreshFromDisk_Click()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        RefreshFromDisk key

    End If
End Sub

Public Sub BreakLink(key As String)
On Error GoTo Failed
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Break Link"
    
    Dim bgp As BGPicture
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(key)
    
    Dim inlSelect As InlineShape
    Dim shpSelect As Shape

    bgp.BreakLink

'    If bgp.ShapeType = "Inline" Then
'        Set inlSelect = bgp.InlineShape
'        If Not inlSelect.LinkFormat Is Nothing Then
'            inlSelect.LinkFormat.BreakLink
'        End If
'    Else
'        Set shpSelect = bgp.Shape
'        If Not shpSelect.LinkFormat Is Nothing Then
'            shpSelect.LinkFormat.BreakLink
'        End If
'    End If
    
    bgp.Read dx, True, True, True
    FillList ActiveFilter, lstPictures.listIndex
    
    dx.updated = True
ExitSub:
    On Error GoTo 0
    If Not dx Is Nothing Then
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub

Public Sub RefreshFromDisk(key As String)
On Error GoTo Failed
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Refresh Picture From Disk"
    
    Dim bgp As BGPicture
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(key)
    
    Dim inlSelect As InlineShape
    Dim shpSelect As Shape

    If bgp.ShapeType = "Inline" Then
        Set inlSelect = bgp.InlineShape
        If Not inlSelect.LinkFormat Is Nothing Then
            inlSelect.LinkFormat.Update
            inlSelect.AlternativeText = UpdateAlternativeText(inlSelect.AlternativeText, "Updated")
        End If
    Else
        Set shpSelect = bgp.Shape
        If Not shpSelect.LinkFormat Is Nothing Then
            shpSelect.LinkFormat.Update
            shpSelect.AlternativeText = UpdateAlternativeText(shpSelect.AlternativeText, "Updated")
        End If
    End If
    
    bgp.Read dx, True, True, True
    FillList ActiveFilter, lstPictures.listIndex

    dx.updated = True
ExitSub:
    On Error GoTo 0
    If Not dx Is Nothing Then
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub

Private Sub cmdReplace_Click()
'    MsgBox "Not yet implemented"
'    Exit Sub
    

    Dim key As String
    If lstPictures.listIndex = -1 Then
        Exit Sub
    End If
    
    key = lstPictures.List(lstPictures.listIndex, 0)
    
On Error GoTo Failed
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Replace picture"
    
    Dim bgp As BGPicture
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(key)

    Dim fileName As String
    With Dialogs(wdDialogInsertPicture)
        .Display
        If .name <> "" Then
           fileName = .name
           fileName = FixPath(fileName)
           
            Dim inlSelect As InlineShape
            Dim shpSelect As Shape
            Dim rng As Range
            
            If bgp.ShapeType = "Inline" Then
                Set inlSelect = bgp.InlineShape
                Set rng = inlSelect.Range.Duplicate
                inlSelect.Delete
                rng.Select
                Set inlSelect = Selection.InlineShapes.AddPicture(fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range)
                With Selection
                     .Expand Unit:=wdParagraph
                     inlSelect.PictureFormat.ColorType = msoPictureAutomatic
                     If inlSelect.Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                         inlSelect.LockAspectRatio = msoTrue
                         inlSelect.Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
                     Else
                         inlSelect.LockAspectRatio = msoTrue
                     End If
                     If Selection.Information(wdWithInTable) Then
                         If inlSelect.Width > Selection.Cells(1).Width Then
                             inlSelect.LockAspectRatio = msoTrue
                             inlSelect.Width = Selection.Cells(1).Width
                         End If
                     End If
                     .Collapse Direction:=wdCollapseEnd
                End With
                Set bgp.InlineShape = inlSelect
                Set bgp.Range = inlSelect.Range
                bgp.RangeStart = inlSelect.Range.start
                bgp.RangeEnd = inlSelect.Range.End
                inlSelect.Select
            Else
                Set shpSelect = bgp.Shape
                Set rng = shpSelect.Anchor.Duplicate
                shpSelect.Delete
                rng.Select
                Set shpSelect = Selection.InlineShapes.AddPicture(fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range).ConvertToShape
                With Selection
                     .Expand Unit:=wdParagraph
                     shpSelect.PictureFormat.ColorType = msoPictureAutomatic
                     If shpSelect.Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                         shpSelect.LockAspectRatio = msoTrue
                         shpSelect.Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
                     Else
                         shpSelect.LockAspectRatio = msoTrue
                     End If
                     If Selection.Information(wdWithInTable) Then
                         If shpSelect.Width > Selection.Cells(1).Width Then
                             shpSelect.LockAspectRatio = msoTrue
                             shpSelect.Width = Selection.Cells(1).Width
                         End If
                     End If
                     .Collapse Direction:=wdCollapseEnd
                End With
                Set bgp.Shape = shpSelect
                Set bgp.Range = shpSelect.Anchor
                bgp.RangeStart = shpSelect.Anchor.start
                bgp.RangeEnd = shpSelect.Anchor.End
                shpSelect.Select
            End If
           
        End If
    End With
    
    bgp.Read dx, True, True, True
    FillList ActiveFilter, lstPictures.listIndex

    
    dx.updated = True
ExitSub:
    On Error GoTo 0
    If Not dx Is Nothing Then
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub

Private Sub cmdSaveACopy_Click()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        SaveToDisk key, False
    End If
End Sub

Private Sub cmdSaveAndUpdateLink_Click()
'    MsgBox "Not yet working"
'    Exit Sub
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        SaveToDisk key, True
    End If
End Sub

Private Sub lstPictures_Change()
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
        ShowPicture key
    End If
End Sub

Private Sub lstPictures_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim key As String
    If Not lstPictures.listIndex = -1 Then
        key = lstPictures.List(lstPictures.listIndex, 0)
    End If
    GotoPicture key
End Sub

Private Function IsActive(controlName As String) As Boolean
    If Me.ActiveControl Is Nothing Then
        IsActive = False
        Exit Function
    End If
    Dim ctl As control
    Set ctl = ActiveControl
    Do While TypeOf ctl Is MSForms.Frame
       Set ctl = ctl.ActiveControl
    Loop
    IsActive = (controlName = ctl.name)
End Function

Private Function divider(Optional full As Boolean = False) As String
    Dim check As String
    check = txtDirectory.Text
    If full Then
        check = txtPath.Text
    End If
    
    If InStr(check, "/") > 0 Then
        divider = "/"
    Else
        divider = "\"
    End If
End Function

Private Sub txtDirectory_Change()
    If IsActive(txtDirectory.name) Then
        txtPath = txtDirectory.Text & divider() & txtName.Text
        'Xebug.Print txtDirectory.text
    End If
End Sub

Private Sub txtName_Change()
    If IsActive(txtName.name) Then
        txtPath = txtDirectory.Text & divider() & txtName.Text
        'Xebug.Print txtName.text
    End If
End Sub

Private Sub txtPath_Change()
    If IsActive(txtPath.name) Then
        Dim name As String
        If InStr(txtPath.Text, divider(True)) > 0 Then
            name = Mid(txtPath, InStrRev(txtPath.Text, divider(True)) + 1)
            txtName.Text = name
            txtDirectory.Text = Left(txtPath.Text, Len(txtPath.Text) - 1 - Len(name))
        Else
            txtDirectory.Text = ""
            txtName.Text = txtPath.Text
        End If
        'Xebug.Print txtPath.text
    End If
    Dim bgp As BGPicture
    Set bgp = bgpm.GetBGPictures(current)
    ShowCommands bgp
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoClose
    End If
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
    DoEvents
    
    Dim dx As docXML
    Set dx = GetManager.GetDX
    
'    Application.ScreenUpdating = False
    Set bgpm = New BGPictureManager
    DoneLoad = False
    StopTimer = False
    Reschedule = True ' Run only once
    If Selection.Range.InlineShapes.Count > 0 Or Selection.Range.ShapeRange.Count > 0 Then
        Init dx, Selection.Range
    Else
        Init dx
    End If
    DoEvents
    Dim ok As Boolean
    ok = bgpm.Read(dx, False, False, False)
    ' RefillList
    System.Cursor = wdCursorNormal
'    Application.ScreenUpdating = True
    DoEvents
    
End Sub

Private Sub UserForm_Terminate()
'    StopTimer = True
'    Set TimerForm = Nothing
'    Application.OnTime Now, "bg_FormTimers.PictureToolOnTimer"
End Sub

Private Sub ScheduleNextTrigger()
'    Application.OnTime Now + TimeValue("00:00:01"), "bg_FormTimers.PictureToolOnTimer"
End Sub

'Public Sub OnTimer()
'    Xebug.Print Now, StopTimer, Reschedule
'    If Not StopTimer Then
'    ''//... Trigger whatever task you want here
'        Debug.Print "My actions"
'        If DoneLoad Then
'            Dim ok As Boolean
'            ok = BGPM.Read(DX, True, False, False)
'
'            RefillList
'
'            'Me.cmdAll.caption = UTCTIME(Now)
'            'Me.Repaint
'            'Me.Hide
'            StopTimer = True
'            Reschedule = False
'            'Me.Show vbModal
'        End If
'        DoEvents
'    ''//Then schedule it to run again
'        If Reschedule Then
'            ScheduleNextTrigger
'        End If
'    End If
'End Sub

Public Function Init(dx As docXML, Optional rng As Range = Nothing) As Integer
    On Error Resume Next
    ActiveWindow.View.ShowFieldCodes = False
    On Error GoTo 0
    
    Dim ok As Boolean
    If rng Is Nothing Then
        Set PicRange = ActiveDocument.Content
    Else
        Set PicRange = rng
    End If
    
    ok = bgpm.ReadRange(PicRange, dx)
    If ok Then
        ok = bgpm.ReadInfo(dx)
        If ok Then
            ok = bgpm.Read(dx, False, True, True)
        End If
    End If

    FillList
    
    DoneLoad = True
    
    If ActiveDocument.ReadOnly Then
        cmdBreakLink.enabled = False
        cmdChangeToV.enabled = False
        cmdCheckAll.enabled = False
        cmdRefreshAll.enabled = False
        cmdRefreshEdited.enabled = False
        cmdRefreshFromDisk.enabled = False
        cmdReplace.enabled = False
        cmdSaveAndUpdateLink.enabled = False
    End If
    
    
    Init = bgpm.GetBGPictures.Count
    
End Function

Private Sub ShowCommands(bgp As BGPicture)
    If txtPath.Text = txtBackupPath.Text Then
        cmdEditReplace.visible = False
        cmdEditCancel.visible = False
        If UCase(bgp.SourcePath) Like "L:*" Then
            cmdChangeToV.visible = True
        Else
            cmdChangeToV.visible = False
        End If
        If bgp.Disk = "Missing in document and on disk!" Then
            cmdBreakLink.visible = False
            cmdRefreshFromDisk.visible = False
            cmdReplace.visible = False
            cmdSaveACopy.visible = False
            cmdSaveAndUpdateLink.visible = False
        ElseIf bgp.Disk = "Missing on disk!" Then
            cmdBreakLink.visible = True
            cmdRefreshFromDisk.visible = False
            cmdReplace.visible = True
            cmdSaveACopy.visible = True
            cmdSaveAndUpdateLink.visible = True
        Else
            cmdReplace.visible = True
            cmdSaveACopy.visible = True
            cmdSaveAndUpdateLink.visible = True
            If bgp.IsLinked Then
                cmdBreakLink.visible = True
                cmdRefreshFromDisk.visible = True
            Else
                cmdBreakLink.visible = False
                cmdRefreshFromDisk.visible = False
            End If
        End If
    Else
        cmdBreakLink.visible = False
        cmdRefreshFromDisk.visible = False
        cmdReplace.visible = False
        cmdSaveACopy.visible = False
        cmdSaveAndUpdateLink.visible = False
        cmdEditReplace.visible = True
        cmdEditCancel.visible = True
        cmdChangeToV.visible = False
    End If
End Sub

Private Sub ShowPicture(key As String, Optional GetPicture As Boolean = False)
    Dim bgp As BGPicture
    current = key
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(current)
    Me.txtName = bgp.SourceName
    Me.txtDirectory = bgp.SourcePath
    Me.txtPath = bgp.sourceFullName
    Me.txtBackupPath = bgp.sourceFullName
    
    If bgp.Disk Like "*Not checked" Then
        bgp.Read dx, True, False, False
        Me.lstPictures.List(lstPictures.listIndex, 4) = bgp.Disk
    End If
    
    If bgp.caption > "" Then
        framePictureInfo.caption = bgp.caption
    Else
        framePictureInfo.caption = "Picture on page " & bgp.page
    End If
    
    If bgp.ShapeType = "Inline" Then
        If Not bgp.Range Is Nothing Then
            If Not bgp.Range = "" Then
                bgp.Range.CopyAsPicture
                '!!Me.imgPicture.Picture = PastePicture()
            End If
        End If
    ElseIf bgp.ShapeType = "Shape" Then
        bgp.Shape.Select
        Selection.CopyAsPicture
        '!!Me.imgPicture.Picture = PastePicture()
    End If
    ShowCommands bgp
   
End Sub

Public Sub FillList(Optional filterName As String = "All", Optional Index As Integer = 0)
    Dim show As Boolean
    Dim shapeTypeText As String
    Dim caption As String
    Dim page As String
    Dim bgp As BGPicture
    Dim key As Variant
    Dim bgpColl As Scripting.Dictionary
    Dim i As Integer
    i = 0
    Set bgpColl = bgpm.GetBGPictures
    Me.lstPictures.Clear
    For Each key In bgpColl.Keys
        show = False
        Set bgp = bgpColl(key)
        If bgp.IsPictureOrObject Then
            If bgp.Disk = "Linked only!" Then
                bgp.Disk = "Embedded and linked"
                bgp.SavePictureWithDocument = True
                If bgp.ShapeType = "Shape" Then
                    bgp.Shape.LinkFormat.SavePictureWithDocument = True
                Else
                    bgp.InlineShape.LinkFormat.SavePictureWithDocument = True
                End If
                LinkedOnly = LinkedOnly - 1
                EmbeddedAndLinked = EmbeddedAndLinked + 1
            End If
            If filterName = "All" Then
                show = True
            Else
                Select Case filterName
                    Case "Embedded", "Embedded and linked", "Missing on disk!", "Missing in document and on disk!", "Linked only!"
                        If bgp.Disk = filterName Then
                            show = True
                        End If
                    Case Else
                        If bgp.Disk Like filterName & "*" Then
                            show = True
                        End If
                End Select
            End If
            If show Then
                page = "   " & bgp.page
                If bgp.page > 9 Then page = " " & bgp.page
                If bgp.page > 99 Then page = bgp.page
                If bgp.caption > "" Then
                    caption = bgp.caption
                Else
                    caption = bgp.SourceName
                End If
                lstPictures.AddItem bgp.key
                lstPictures.List(i, 1) = page
                lstPictures.List(i, 2) = caption
                lstPictures.List(i, 3) = bgp.ShapeType
                lstPictures.List(i, 4) = bgp.Disk
                i = i + 1
            End If
        End If
    Next
    ActiveFilter = filterName
    If lstPictures.ListCount > 0 Then lstPictures.listIndex = Index
End Sub

Public Sub RefillList()
    Dim bgp As BGPicture
    Dim key As Variant
    Dim bgpColl As Scripting.Dictionary
    Set bgpColl = bgpm.GetBGPictures
    
    Dim i As Integer
    For i = 0 To lstPictures.ListCount - 1
        key = lstPictures.List(i, 0)
        Set bgp = bgpColl(key)
        lstPictures.List(i, 4) = bgp.Disk
        Select Case bgp.Disk
        Case "Embedded"
            Embedded = Embedded + 1
        Case "Embedded and linked"
            EmbeddedAndLinked = EmbeddedAndLinked + 1
        Case "Missing on disk!"
            MissingOnDisk = MissingOnDisk + 1
        Case "Linked only!"
            LinkedOnly = LinkedOnly + 1
        Case "Missing in document and on disk!"
            MissingInDocumentAndOnDisk = MissingInDocumentAndOnDisk + 1
        Case Else
            If bgp.Disk Like "Edited*" Then
                EditedOnDisk = EditedOnDisk + 1
            End If
        End Select
    Next
    FillList "All"
    ShowOrHideFilters
End Sub

Private Sub ShowOrHideFilters()
    If Embedded > 0 Then cmdEmbeddded.visible = True Else cmdEmbeddded.visible = False
    If EmbeddedAndLinked > 0 Then cmdEmbeddedAndLinked.visible = True Else cmdEmbeddedAndLinked.visible = False
    If MissingOnDisk > 0 Then cmdMissingOnDisk.visible = True Else cmdMissingOnDisk.visible = False
    If LinkedOnly > 0 Then cmdLinkedOnly.visible = True Else cmdLinkedOnly.visible = False
    If MissingInDocumentAndOnDisk > 0 Then cmdMissingInDocumentAndOnDisk.visible = True Else cmdMissingInDocumentAndOnDisk.visible = False
    If EditedOnDisk > 0 Then
        cmdEditedOnDisk.visible = True
        cmdRefreshEdited.visible = True
    Else
        cmdRefreshEdited.visible = False
        cmdEditedOnDisk.visible = False
    End If
    If EmbeddedAndLinked + MissingInDocumentAndOnDisk + MissingOnDisk + LinkedOnly + EditedOnDisk > 0 Then
        cmdRefreshAll.visible = True
        cmdCheckAll.visible = True
        lblActions.visible = True
    Else
        cmdRefreshAll.visible = False
        cmdCheckAll.visible = False
        lblActions.visible = False
    End If
End Sub


Public Sub SaveToDisk(key As String, UpdateFileLocation As Boolean)
    Dim dx As docXML
    Set dx = GetManager.GetDX
    
    Dim bgp As BGPicture
    Dim bgpDict As Scripting.Dictionary
    Set bgpDict = bgpm.GetBGPictures
    Set bgp = bgpDict(key)
    
    Dim Addin As Object
    Dim fullFileName As String
    Dim folder As String
    Dim fileName As String
    If bgp.SourcePath > "" Then folder = bgp.SourcePath
    If bgp.SourceName > "" Then fileName = bgp.SourceName
    
'    Dim obj As Object
'    Set Addin = GetAutomationObject()
    
'    If Not Addin Is Nothing Then
'        If bgp.ShapeType = "Inline" Then
'            Set obj = bgp.InlineShape
'        Else
'            Set obj = bgp.Shape
'        End If
'        fullFileName = Addin.SavePictureToDisk(bgp.ShapeType, obj, folder, fileName)
'        'fullFileName = "\\beumer.com\public\HomeDirs\Sub\Denmark\AAR\ply\My Pictures\T1.jpg"
'        If fullFileName > "" Then
'            fullFileName = FixPath(fullFileName)
'        End If
'    Else
        Dim strTempFile As String
        Dim ext As String
        strTempFile = bgp.WriteToTemporaryPictureFile()
        ext = Mid(strTempFile, InStrRev(strTempFile, ".") + 1)

        Dim strFilter As String
        Dim lngFlags As Long
        Dim defaultFileName As String
        If fileName > "" Then defaultFileName = Mid(fileName, 1, InStrRev(fileName, ".") - 1) & "." & ext
        
        '!!strFilter = ahtAddFilterItem(strFilter, UCase(ext) & " Files (*." & ext & ")", "*." & UCase(ext) & "")
        Dim result As Variant
        
        '!!!ActiveWindowHandle = GetActiveWindow
        '!!fullFileName = ahtCommonFileOpenSave(fileName:=defaultFileName, InitialDir:=folder, Filter:=strFilter, FilterIndex:=1, flags:=lngFlags, DialogTitle:="Save picture", OpenFile:=False)
        If fullFileName > "" Then
            fullFileName = FixPath(fullFileName)
            FileCopy strTempFile, fullFileName
            bgp.KillFilesAndFolder strTempFile
        End If
 '   End If
    
    If Not UpdateFileLocation Or fullFileName = "" Then Exit Sub
    bgp.Range.Select
    
    Dim inl As InlineShape
    Dim shp As Shape
    
On Error GoTo Failed
    dx.Prolog "Save Picture To Disk and Update"
    Dim rngInsert As Range
    Dim rng As Range
    If bgp.TypeOfPicture = PictureType.InlineType Then
        Set inl = bgp.InlineShape
        Set rngInsert = inl.Range.Duplicate
        inl.Range.Delete
        Set inl = rngInsert.InlineShapes.AddPicture(fullFileName, True, True, rngInsert)
        Set rng = inl.Range.Duplicate
        Set bgp.InlineShape = inl
        Set bgp.Range = inl.Range
        bgp.RangeStart = inl.Range.start
        bgp.RangeEnd = inl.Range.End
    ElseIf bgp.TypeOfPicture = PictureType.ShapeType Then
        Set shp = bgp.Shape
        Set rngInsert = shp.Anchor.Duplicate
        shp.Anchor.Delete
        Set inl = rngInsert.InlineShapes.AddPicture(fullFileName, True, True, rngInsert)
        Set shp = inl.ConvertToShape
        Set bgp.Shape = shp
        Set bgp.Range = shp.Anchor
        Set rng = shp.Anchor.Duplicate
        bgp.RangeStart = shp.Anchor.start
        bgp.RangeEnd = shp.Anchor.End
    End If

    bgp.ReApplyFormat

'    If bgp.ShapeType = "Inline" Then
'        Set inlSelect = bgp.InlineShape
'        inlSelect.Delete
'
'    Else
'        Dim anchorRange As Range
'        Dim dTop As Double
'        Dim dLeft As Double
'        Dim dHeight As Double
'        Dim dWidth As Double
'        Set shpSelect = bgp.Shape
'        With Document.Shapes(i)
'            .RelativeHorizontalPosition = Microsoft.Office.Interop.Word.WdRelativeHorizontalPosition.wdRelativeHorizontalPositionPage
'            dTop = .Top
'            dLeft = .Left
'            dHeight = .Height
'            dWidth = .Width
'            anchorRange = .Anchor.Duplicate
'            .Delete
'        End With
'
'        Set Shape = Document.Shapes.AddPicture(FileName:=sPathPicture, _
'            SaveWithDocument:=True, _
'            Left:=dLeft - Document.PageSetup.LeftMargin, _
'            Top:=dTop, _
'            Width:=dWidth, _
'            Height:=dHeight, _
'            Anchor:=anchorRange)
'
'    End If
    
    bgp.Read dx, True, False, False
    FillList ActiveFilter, lstPictures.listIndex
    dx.updated = True
ExitSub:
    On Error GoTo 0
    If Not dx Is Nothing Then
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub

'Private Sub SavePicture()
'    If Doc.FullName <> Doc.name Then
'        Application.FileDialog(msoFileDialogSaveAs).InitialFileName = Doc.path & IIf(InStr(Doc.FullName, "\") > 0, "\", "/")
'    Else
'        Dim FileSaveAsSetting As String
'        FileSaveAsSetting = Dialogs(wdDialogToolsOptionsFileLocations).Setting
'        If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
'            FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
'        End If
'
'        Application.FileDialog(msoFileDialogSaveAs).InitialFileName = FileSaveAsSetting
'    End If
'
'    Application.FileDialog(msoFileDialogSaveAs).Title = ""
'    Application.FileDialog(msoFileDialogSaveAs).ButtonName = ""
'    Application.FileDialog(msoFileDialogSaveAs).FilterIndex = 1
'
'    Dim choice As Integer
'    choice = Application.FileDialog(msoFileDialogSaveAs).show
'    If choice <> 0 Then
'        FileName = FixPath(Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1))
'    End If
'End Sub

'Public Sub UpdateImages(ByRef convertCount As Integer, ByRef errorConvertCount As Integer)
'        For i As Integer = BPictures.Count - 1 To 0 Step -1
'            Dim bPic As BPicture = BPictures(i)
'            Dim bPicSaved As BPicture = BPicturesSaved(i)
'            If Not bPicSaved.Missing Then
'                Dim rng As Range
'                Dim tempBPic As BPicture = Nothing
'                rng = RemoveImage(BPictures(i))
'                If rng Is Nothing Then Continue For
'                tempBPic = DummyImage(bPic, BPicturesSaved(i).FoundFile)
'                InsertImage(rng, tempBPic, BPicturesSaved(i))
'                convertCount += 1
'            Else
'                errorConvertCount += 1
'            End If
'        Next
'    End Sub
'
'
'   Public Function SaveImage(bPic As BPicture, Optional path As String = "") As BPicture
'        Dim filterIndex As Integer = 0
'        Dim format As Imaging.ImageFormat = Nothing
'
'        If bPic.Image Is Nothing Then
'            Return Nothing
'        End If
'
'        Dim index = bPic.Index
'        If path = "" Then
'            Dim sfd As SaveFileDialog = Nothing
'            Try
'                sfd = New SaveFileDialog()
'                sfd.InitialDirectory = FixPath(Doc.Application.Options.DefaultFilePath(Word.WdDefaultFilePath.wdPicturesPath))
'                sfd.fileName = bPic.SourceName
'                sfd.Filter = "JPG files (*.jpg)|*.jpg|PNG files (*.png)|*.png|BMP files (*.bmp)|*.bmp|EMF files (*.emf)|*.emf|WMF files (*.wmf)|*.wmf|All files (*.*)|*.*"
'                ' Find eksisterende filtype
'                filterIndex = GetFilterIndex(bPic.SourceName)
'                sfd.filterIndex = filterIndex
'                sfd.RestoreDirectory = True
'
'                If sfd.ShowDialog() = DialogResult.ok Then
'                    path = sfd.fileName
'                End If
'            Catch ex As Exception
'                Debug.Print (ex.Message)
'            Finally
'                If Not sfd Is Nothing Then
'                    sfd.Dispose()
'                End If
'            End Try
'        End If
'
'        If path = "" Then Return Nothing
'        filterIndex = GetFilterIndex(path)
'
'        If filterIndex = 1 Then
'            format = Imaging.ImageFormat.Jpeg
'        ElseIf filterIndex = 2 Then
'            format = Imaging.ImageFormat.Png
'        ElseIf filterIndex = 3 Then
'            format = Imaging.ImageFormat.Bmp
'        ElseIf filterIndex = 4 Then
'            format = Imaging.ImageFormat.Emf
'        ElseIf filterIndex = 5 Then
'            format = Imaging.ImageFormat.Wmf
'        Else
'            Return Nothing
'        End If
'
'        Try
'            bPic.Image.Save(path, format)
'            Dim tempBPic As New BPicture
'            tempBPic.index = bPic.index
'            tempBPic.PictureType = bPic.PictureType
'            tempBPic.sourceFullName = path
'            tempBPic.SourcePath = System.IO.path.GetDirectoryName(path)
'            tempBPic.SourceName = System.IO.path.GetFileName(path)
'            Return tempBPic
'        Catch ex As Exception
'            Debug.Print (ex.Message)
'            Return Nothing
'            'MsgBox("Unable to save. " & ex.Message)
'        End Try
'
'    End Function
Attribute VB_Name = "ProjectButton"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Text As String
Public Path As String
Public Order As Integer
Public ButtonName As String
Public imageMSO As String
Public Filter As Boolean
Public nodeList As String


Attribute VB_Name = "Registry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const HKEY_CURRENT_USER = &H80000001
Const strComputer As String = "."
Private winmgmts As Object

Private Function IsEmptyArray(a As Variant) As Boolean
    Dim bEmpty As Boolean
    bEmpty = True
    On Error Resume Next
    bEmpty = Not IsNumeric(UBound(a))
    On Error GoTo 0
    IsEmptyArray = bEmpty
    
End Function

Public Function ListKeys(strPath As String, ByRef aKeys() As Variant) As Boolean
    Dim ok As Boolean
    ok = True
    
    On Error GoTo Catch
    winmgmts.EnumKey HKEY_CURRENT_USER, strPath, aKeys
    If IsEmptyArray(aKeys) Then ok = False
    
Finally:
    ListKeys = ok
    Exit Function
Catch:
    ok = False
    Resume Finally
End Function

Public Function ListKeysAndValues(strPath As String, ByRef aKeys() As Variant, ByRef aValues() As Variant) As Boolean
    Dim ok As Boolean
    ok = True
    
    On Error GoTo Catch
    winmgmts.EnumValues HKEY_CURRENT_USER, strPath, aKeys, aValues
    If IsEmptyArray(aKeys) Then ok = False
    If IsEmptyArray(aValues) Then ok = False
    
Finally:
    ListKeysAndValues = ok
    Exit Function
Catch:
    ok = False
    Resume Finally
End Function

Public Function GetStringValue(ByVal strPath As String, ByVal strKey As String, ByRef strValue As String) As Boolean
    Dim result As Long
    
    result = winmgmts.GetStringValue(HKEY_CURRENT_USER, strPath, strKey, strValue)
    If result = 0 Then
        GetStringValue = True
    Else
        GetStringValue = False
    End If
    
End Function

Private Sub Class_Initialize()
    Set winmgmts = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & strComputer & "\root\default:StdRegProv")
End Sub

Attribute VB_Name = "RevisionHistoryForm"
Attribute VB_Base = "0{82282358-70AF-4F51-9F5E-B02C98954B61}{22FBB2B9-E180-4F1E-8727-7B5CBDAC3862}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public CalledFrom As MainForm
Public SelectedIndex As Integer
Public RevCount As Integer
Private aRevHist() As String
Public Init As Boolean

Public Sub Display()
    ' Actual initialize
    aRevHist = CalledFrom.GetRevisionHistory
    ListBoxRevisions.List = aRevHist
    RevCount = CalledFrom.RevCount
    SelectedIndex = RevCount - 1
    ListBoxRevisions.listIndex = SelectedIndex
    
    If ActiveDocument.ReadOnly Then
        Dim ctrl As control
        For Each ctrl In Me.Controls
            ctrl.enabled = False
        Next
        CommandButtonCancel.enabled = True
    End If
    Me.show
    
End Sub

Public Sub Update()
    Dim i As Integer
    aRevHist = OrderRevisionHistory(aRevHist)
    For i = 0 To RevCount - 1
        If aRevHist(i, 0) = TextBoxRevNo.Text And aRevHist(i, 1) = TextBoxRevDate.Text And aRevHist(i, 2) = TextBoxRevAuthor.Text And aRevHist(i, 3) = TextBoxRevDescription.Text Then
            SelectedIndex = i
            Exit For
        End If
    Next
    ListBoxRevisions.List = aRevHist
    ListBoxRevisions.listIndex = SelectedIndex
End Sub

Private Sub UpdateTextboxes()
    Init = True
    TextBoxRevNo.Text = ListBoxRevisions.List(SelectedIndex, 0)
    TextBoxRevDate.Text = ListBoxRevisions.List(SelectedIndex, 1)
    TextBoxRevAuthor.Text = ListBoxRevisions.List(SelectedIndex, 2)
    TextBoxRevDescription.Text = ListBoxRevisions.List(SelectedIndex, 3)
    Init = False
End Sub

Private Sub UpdateRevisionList()
    aRevHist(SelectedIndex, 0) = TextBoxRevNo.Text
    aRevHist(SelectedIndex, 1) = TextBoxRevDate.Text
    aRevHist(SelectedIndex, 2) = TextBoxRevAuthor.Text
    aRevHist(SelectedIndex, 3) = TextBoxRevDescription.Text
    Init = True
    Update
    Init = False
End Sub

Private Sub CommandButtonCancel_Click()
    DoCancel
End Sub

Private Sub CommandButtonDelete_Click()
    If RevCount = 1 Then
        DeleteAll
    Else
        Dim i As Integer
    
        For i = SelectedIndex + 1 To RevCount - 1
            aRevHist(i - 1, 0) = aRevHist(i, 0)
            aRevHist(i - 1, 1) = aRevHist(i, 1)
            aRevHist(i - 1, 2) = aRevHist(i, 2)
            aRevHist(i - 1, 3) = aRevHist(i, 3)
        Next
        ReDimPreserve aRevHist, RevCount - 2, 4
        RevCount = RevCount - 1
        If SelectedIndex > RevCount - 1 Then SelectedIndex = RevCount - 1
        Update
    End If
End Sub

Private Sub CommandButtonDeleteAll_Click()
    DeleteAll
End Sub

Private Sub DeleteAll()
    Init = True
    ReDim aRevHist(0, 4)
    RevCount = 1
    SelectedIndex = 0
    aRevHist(SelectedIndex, 0) = GetNewMajor("")
    aRevHist(SelectedIndex, 1) = Format(Now, "YYYY-MM-DD")
    aRevHist(SelectedIndex, 2) = UserName
    If Not UserName = "" Then
        Me.TextBoxRevDescription.SetFocus
    Else
        Me.TextBoxRevAuthor.SetFocus
    End If
    ListBoxRevisions.List = aRevHist
    ListBoxRevisions.listIndex = SelectedIndex
    UpdateTextboxes
    Init = False
End Sub


Private Sub CommandButtonNewMajor_Click()
    AddRevision "Major"
End Sub

Private Sub CommandButtonNewMinor_Click()
    AddRevision "Minor"
End Sub

Private Sub AddRevision(MinorOrMajor As String)
    Dim newRev As String
    Init = True
    aRevHist(SelectedIndex, 0) = Me.TextBoxRevNo.Text
    aRevHist(SelectedIndex, 1) = Me.TextBoxRevDate.Text
    aRevHist(SelectedIndex, 2) = Me.TextBoxRevAuthor.Text
    aRevHist(SelectedIndex, 3) = Me.TextBoxRevDescription.Text
    ReDimPreserve aRevHist, RevCount, 4
    RevCount = RevCount + 1
    SelectedIndex = RevCount - 1
    If MinorOrMajor = "Minor" Then
        newRev = GetNewMinor(aRevHist(SelectedIndex - 1, 0))
    Else
        newRev = GetNewMajor(aRevHist(SelectedIndex - 1, 0))
    End If
    aRevHist(SelectedIndex, 0) = newRev
    aRevHist(SelectedIndex, 1) = Format(Now, "YYYY-MM-DD")
    aRevHist(SelectedIndex, 2) = UserName
    aRevHist(SelectedIndex, 3) = ""
    If Not UserName = "" Then
        Me.TextBoxRevDescription.SetFocus
    Else
        Me.TextBoxRevAuthor.SetFocus
    End If
    TextBoxRevNo.Text = aRevHist(SelectedIndex, 0)
    TextBoxRevDate.Text = aRevHist(SelectedIndex, 1)
    TextBoxRevAuthor.Text = aRevHist(SelectedIndex, 2)
    TextBoxRevDescription.Text = aRevHist(SelectedIndex, 3)
    Update
    Init = False
End Sub

Private Sub CommandButtonOk_Click()
    DoOk
End Sub

Private Sub ListBoxRevisions_Change()
    If Not Init Then
        SelectedIndex = ListBoxRevisions.listIndex
        UpdateTextboxes
    End If
End Sub

Private Sub TextBoxRevAuthor_Change()
    If Not Init Then UpdateRevisionList
End Sub

Private Sub TextBoxRevDate_Change()
    If Not Init Then UpdateRevisionList
End Sub

Private Sub TextBoxRevDescription_Change()
    If Not Init Then UpdateRevisionList
End Sub

Private Sub TextBoxRevNo_Change()
    If Not Init Then UpdateRevisionList
End Sub

Public Sub DoOk()
    CalledFrom.SetRevisionHistory aRevHist, RevCount
    Unload Me
End Sub

Public Sub DoCancel()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
    Set CalledFrom = Nothing
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub
Attribute VB_Name = "SiteButton"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Text As String
Public Path As String
Public Order As Integer
Public ButtonName As String


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Document_BuildingBlockInsert(ByVal Range As Range, ByVal name As String, ByVal Category As String, ByVal BlockType As String, ByVal Template As String)
    ''!!!LogDebug "Document_BuildingBlockInsert", ActiveDocument.fullName
End Sub

Private Sub Document_ContentControlAfterAdd(ByVal NewContentControl As ContentControl, ByVal InUndoRedo As Boolean)
    ''!!!LogDebug "Document_ContentControlAfterAdd", ActiveDocument.fullName
End Sub

Private Sub Document_Close()
    ' '!!!LogDebug "Entering", "ThisDoc.Document_Close"
End Sub

Private Sub Document_New()
    ''!!!LogDebug "Document_New", ActiveDocument.fullName
End Sub

Private Sub Document_Open()
    ' '!!!LogDebug "Entering", "ThisDoc.Document_Open"
End Sub

Private Sub Document_XMLAfterInsert(ByVal NewXMLNode As XMLNode, ByVal InUndoRedo As Boolean)
    ''!!!LogDebug "Document_XMLAfterInsert", ActiveDocument.fullName
End Sub
Attribute VB_Name = "UpdateForm"
Attribute VB_Base = "0{27A5BC2A-2233-4E48-9138-2A848E11133A}{BAA89D2C-173B-4A54-8E85-CFDC015A715A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public bgd As BGDoc
Private ToDo As String

Public Sub WriteLog(str As String)
    '!!!LogDebug str, "WriteLog"
    Me.TextBoxLog.Text = Me.TextBoxLog.Text & vbCrLf & Format(Now, "HH:mm:ss") & vbTab & str ' & ", " & Application.screenUpdating
    Me.Repaint
    DoEvents
End Sub

Public Sub Init(useBGD As BGDoc, run As String)
    Set bgd = useBGD
    ToDo = run
End Sub

Private Sub UserForm_Activate()
    Me.BorderStyle = fmBorderStyleNone
    Select Case ToDo
    Case "UpdateDocument"
        ToDo = ""
        bgd.UpdateDocument
    Case "ConvertDocument"
        ToDo = ""
        bgd.ConvertDocument
    End Select
    '!!!LogDebug "Unload form"
    Unload Me
    '!!!LogDebug "Unloaded form"

End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        Cancel = True
    End If
End Sub
Attribute VB_Name = "bg_Application"
Option Explicit

Public DocRibbon As IRibbonUI
Public BGDocs As Scripting.Dictionary
Public Manager As BGDocManager
Public OpenMode As String

'Public Sub FileSaveAs()
'    MsgBox "SaveAs"
'End Sub
'
'Public Sub FileSave()
'    On Error GoTo Catch
'    Dim IsSaved As New Scripting.Dictionary
'    Dim doc As Document
'    Dim fullName As String
'
'    '!!!LogDebug "Entering", "FileSave"
'
'    fullName = ActiveDocument.fullName
'
'    For Each doc In Documents
'        If doc.fullName <> fullName Then
'            IsSaved.Add doc.fullName, doc.Saved
'            doc.Saved = True
'        End If
'    Next
'
'    Documents.Save False
'
'Finally:
'    On Error GoTo 0
'
'    Dim key As Variant
'    For Each key In IsSaved.Keys
'        Set doc = Documents(key)
'        doc.Saved = IsSaved(key)
'    Next
'
'    Set IsSaved = Nothing
'    Set doc = Nothing
'    Exit Sub
'Catch:
'    '!!!LogError "Error: " & Err.Description, "BG_Application_FileSave"
'    'Stop
'    Resume Finally
'
'End Sub

Public Function GetManager(Optional fromMethod As String = "") As BGDocManager
    If Manager Is Nothing Then
        '!!!If fromMethod <> "" Then LogDebug "Create Manager", fromMethod
        Set Manager = New BGDocManager
    Else
        '!!If fromMethod <> "" Then LogDebug "Use existing Manager", "AutoNew"
    End If
    Set GetManager = Manager
End Function

Public Sub AutoNew()
    GetManager "AutoNew"

    If ActiveDocument.fullName = ActiveDocument.attachedTemplate.fullName Then Exit Sub
'    If ActiveDocument.ReadOnly Then Exit Sub
    
    If DocRibbon Is Nothing Then
        OpenMode = "NewWithNoRibbon"
    Else
        OpenMode = "NewWithRibbon"
    End If
    '!!!LogDebug OpenMode, "modApplication_AutoNew"
    If DocRibbon Is Nothing Then Exit Sub
    
    DoBGDoc ActiveDocument
End Sub

Public Sub AutoOpen()
    GetManager "AutoOpen"
    
    If ActiveDocument.fullName = ActiveDocument.attachedTemplate.fullName Then Exit Sub
'    If ActiveDocument.ReadOnly Then Exit Sub

    If DocRibbon Is Nothing Then
        OpenMode = "OpenWithNoRibbon"
    Else
        OpenMode = "OpenWithRibbon"
    End If
    '!!!LogDebug OpenMode, "modApplication_AutoOpen"
    If DocRibbon Is Nothing Then Exit Sub
    
    DoBGDoc ActiveDocument
End Sub

Public Sub BGdoc_onLoad(ribbon As IRibbonUI)
    On Error Resume Next
    Set DocRibbon = ribbon
    On Error GoTo 0
    If DocRibbon Is Nothing Then Stop
    
    GetManager "BGdoc_onLoad"
    
    If ActiveDocument.fullName = ActiveDocument.attachedTemplate.fullName Then Exit Sub
    If ActiveDocument.ReadOnly Then Exit Sub
    
    If OpenMode Like "*Open*" Then
        OpenMode = "OpenWithRibbon"
    ElseIf OpenMode Like "*New*" Then
        OpenMode = "NewWithRibbon"
    Else
        OpenMode = "NoAutoNewOrAutoOpen"
    End If
    
    '!!!LogDebug OpenMode, "BGdoc_onLoad"
    If OpenMode = "NoAutoNewOrAutoOpen" Then
        'Stop
        'Exit Sub
    End If
    
    DoBGDoc ActiveDocument
    

''    'Xebug.Print Now, "BGdoc_onLoad"
''    Dim i As Integer
''    i = 0
''    On Error GoTo RibbonNotReady
''SetRibbon:
''    i = i + 1
''    If i = 100 Then
''        Exit Sub
''    End If
''    Do While Documents.Count = 0
''      DoEvents
''      Sleep 10
''      DoEvents
''    Loop
''
''HasFoundDocument:
''    On Error GoTo 0
''    Set DocRibbon = ribbon
''    On Error Resume Next
''    DocRibbon.ActivateTab "documentTab"
''    On Error GoTo 0
''
''    Exit Sub
''RibbonNotReady:
'''    Stop
''    Resume SetRibbon
''
End Sub

Public Sub DoBGDoc(doc As Document)
    '!!!LogDebug OpenMode, "DoBGDoc"
    
    Dim DocState As BGDocState
    DocState = IIf(OpenMode Like "*Open*", dsAutoOpen, dsAutoNew)
    
    GetManager "DoBGDoc"
    
    OpenMode = ""
    '!!ExSubToCall = "NewBGDoc"
    '!!DocumentState = DocState
    '!!Set TimerDoc = doc
    '!!ExLoops = 0
    '!!ExMaxLoops = 1

    '!!ExStartTimer 150
End Sub


'Public Function GetManager(Optional reset As Boolean = False) As BGDocManager
'    Dim testApp As Application
'    On Error Resume Next
'    Set testApp = GetManager.App
'    On Error GoTo Catch
'
'    If testApp Is Nothing Then
'        Set Manager = New BGDocManager
'    Else
'        If reset Then
'            Set GetManager.App = Nothing
'            Set Manager = Nothing
'            Set Manager = New BGDocManager
'        End If
'    End If
'    Set GetManager = Manager
'    Exit Function
'
'NoManager:
'    On Error GoTo 0
'    Set GetManager = Nothing
'    Exit Function
'
'Catch:
'    Dim e As New BGError
'    e.OnError
'    Resume NoManager
'End Function

'Public Sub AutoClose()
'     '!!!LogDebug "Entering AutoClose", "bg_Application.AutoClose"
'     Dim bgd As BGDoc
'     If Not Manager Is Nothing Then
'        If Not GetManager.GetBGDocFromDoc(ActiveDocument) Is Nothing Then
'            '!!!LogDebug "SaveAction: " & GetManager.GetBGDocFromDoc(ActiveDocument).SaveAction, "bg_Application.AutoClose"
'        End If
'     End If
'
''    Dim m As String
''    Dim doc As Document
''    Dim bgd As BGDoc
''    Set doc = ActiveDocument
''
''    If Manager Is Nothing Then
''        If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
''        m = InputBox("Manager is Nothing. How?", "bg_Applicaion.AutoClose")
''        LogWarn "Manager Is Nothing. How: " & m, "bg_Applicaion.AutoClose"
''    Else
''        Set bgd = GetManager.GetBGDocFromDoc(doc)
''        If bgd Is Nothing Then
''            If doc.fullName = doc.attachedTemplate.fullName Then Exit Sub
''            m = InputBox("BGD is Nothing. How?", "bg_Applicaion.AutoClose")
''            LogWarn "AutoClose. BGD is Nothing. How: " & m, "bg_Applicaion.AutoClose"
''        Else
''            If bgd.DocumentBeforeClose Then
''                m = InputBox("DocumentBeforeClose. How?", "bg_Applicaion.AutoClose")
''                LogInfo "DocumentBeforeClose, SaveAsUI is" & bgd.SaveAsUI & " How: " & m, "bg_Applicaion.AutoClose"
''                bgd.DocumentBeforeClose = False
''                bgd.DocumentBeforeSave = False
''                bgd.SaveAsUI = False
''            ElseIf bgd.DocumentBeforeSave Then
''                m = InputBox("DocumentBeforeSave. How?", "bg_Applicaion.AutoClose")
''                LogInfo "AutoClose. How: " & m, "bg_Applicaion.AutoClose"
''                bgd.DocumentBeforeClose = False
''                bgd.DocumentBeforeSave = False
''                bgd.SaveAsUI = False
''            Else
''
''            End If
''        End If
''    End If
'End Sub


'    Xebug.Print Now, "AutoClose"
'    'GetManager.Init "AutoClose", ActiveDocument.fullName
'    Application.OnTime Now + TimeValue("00:00:01"), "bg_Support.AfterAutoClose"
'End Sub
'
'Public Sub AutoExec()
'    Xebug.Print Now, "AutoExec"
'End Sub
'
'Public Sub AutoExit()
'    Xebug.Print Now, "AutoExit"
'End Sub

Public Sub ReadTemplate()
    Dim i As Integer
    Dim j As Integer
    Dim t As Integer
    Dim aTables() As String
    Dim table As String
    Dim values() As String
    Dim rows As Integer
    Dim cols As Integer
    Dim aRow() As String
    Dim re As Object
    Dim matches As Object
    
    aTables = Split(ThisDocument.BuiltInDocumentProperties("Comments"), vbCr + "|||")
    For t = 1 To UBound(aTables) - 1 Step 2
        table = aTables(t)
        values = Split(aTables(t + 1), vbCr)
        Select Case table
        Case "DocumentTypes"
            rows = UBound(values)
            cols = UBound(Split(values(0), vbTab))
            ReDim aDocumentTypes(rows, cols)
            For i = 0 To rows
                aRow = Split(values(i), vbTab)
                For j = 0 To cols
                    aDocumentTypes(i, j) = aRow(j)
                Next
            Next
        Case "Terms"
            rows = UBound(values)
            cols = UBound(Split(values(0), vbTab))
            ReDim aTerms(cols - 1, rows + 1)
            
            Set re = CreateObject("vbscript.regexp")
            With re
                .IgnoreCase = True
                .Global = True
                .Pattern = "([^ |fffd||fffd|]+)([|fffd|||fffd|]?)" ' Must match the other one
            
                For i = 0 To rows
                    aRow = Split(values(i), vbTab)
                    For j = 1 To cols
                        aTerms(j - 1, i) = Trim(aRow(j))
                    Next
                Next
                For j = 0 To cols - 1
                    If .Test(aTerms(j, 1)) Then
                       Set matches = .Execute(aTerms(j, 1))
                       aTerms(j, rows + 1) = matches.Count
                    Else
                       aTerms(j, rows + 1) = 1
                    End If
                Next
            End With
            
            QuickSortArray aTerms, , , CLng(rows + 1)
'                ' Create term regular expression
'                rows = UBound(aTerms, 1)
'                ' (?:^|\W)(CrisBag(?:\W||fffd|||fffd||$)
'                TermReg = "("
'                For i = 0 To rows
'                    TermReg = TermReg & "(?:^|\W)(" & aTerms(i, 0) & "(?:\W||fffd|||fffd||$|"
'                Next
'                TermReg = Left(TermReg, Len(TermReg) - 1) & ")"
'                Stop
            
        Case "Languages"
            Set Months = New Scripting.Dictionary
            Set TableRevNames = New Scripting.Dictionary
            rows = UBound(values)
            cols = UBound(Split(values(0), vbTab))
            ReDim LanguageFieldIndexes(cols)
            ReDim aLanguages(rows - 1, cols + 1)
            aRow = Split(values(0), vbTab)
            For j = 0 To cols
                LanguageFieldIndexes(j) = aRow(j)
            Next
            For i = 1 To rows
                aRow = Split(values(i), vbTab)
                aLanguages(i - 1, 0) = aRow(0)
                aLanguages(i - 1, 1) = aRow(1) '& " - " & aRow(3)
                For j = 1 To cols
                    aLanguages(i - 1, j + 1) = aRow(j)
                    If LanguageFieldIndexes(j) = "DocumentLabel-Revision" _
                    Or LanguageFieldIndexes(j) = "RevisionNameInTable" Then
                        If aRow(j) > "" Then
                            RevNames = RevNames & "|" & LCase(aRow(j))
                        End If
                    End If
                    If LanguageFieldIndexes(j) = "DocumentLabel-RevisionHistory-Revision" Then
                        If aRow(j) > "" And Not TableRevNames.exists(LCase(Replace(aRow(j), ".", ""))) Then
                            TableRevNames.Add LCase(Replace(aRow(j), ".", "")), LCase(Replace(aRow(j), ".", ""))
                        End If
                    End If
                    If LanguageFieldIndexes(j) Like "Month##" Then
                        If aRow(j) > "" And Not Months.exists(LCase(aRow(j))) Then
                            Months.Add aRow(j), Right(LanguageFieldIndexes(j), 2)
                            If UCase(aRow(j)) <> aRow(j) Then Months.Add UCase(aRow(j)), Right(LanguageFieldIndexes(j), 2)
                            If LCase(aRow(j)) <> aRow(j) Then Months.Add LCase(aRow(j)), Right(LanguageFieldIndexes(j), 2)
                        End If
                    End If
                Next
            Next
            QuickSortArray aLanguages, , , 1
        End Select
    Next
    LanguageFields = Array("DocumentLabel-FigureCaption", "DocumentLabel-TableCaption", "DocumentLabel-Author", "DocumentLabel-Copyright", "DocumentLabel-Date", "DocumentLabel-DocumentInformation", "DocumentLabel-FileName", "DocumentLabel-Front", "DocumentLabel-IntentionallyLeftBlank", "DocumentLabel-Page", "DocumentLabel-ProjectNo", "DocumentLabel-Revision", "DocumentLabel-RevisionHistory", "DocumentLabel-RevisionHistory-Author", "DocumentLabel-RevisionHistory-Date", "DocumentLabel-RevisionHistory-Description", "DocumentLabel-RevisionHistory-Revision", "DocumentLabel-SupplierFileName", "DocumentLabel-TOC", "DocumentLabel-TOF", "DocumentLabel-TOT", "DocumentInfo-Copyright", "DocumentInfo-Disclaimer")
    PathLanguageFields = Array("/DocumentLabel/DocumentLabel-FigureCaption", "/DocumentLabel/DocumentLabel-TableCaption", "/DocumentLabel/DocumentLabel-Author", "/DocumentLabel/DocumentLabel-Copyright", "/DocumentLabel/DocumentLabel-Date", "/DocumentLabel/DocumentLabel-DocumentInformation", "/DocumentLabel/DocumentLabel-FileName", "/DocumentLabel/DocumentLabel-Front", _
    "/DocumentLabel/DocumentLabel-IntentionallyLeftBlank", "/DocumentLabel/DocumentLabel-Page", "/DocumentLabel/DocumentLabel-ProjectNo", "/DocumentLabel/DocumentLabel-Revision", "/DocumentLabel/DocumentLabel-RevisionHistory", "/DocumentLabel/DocumentLabel-RevisionHistory-Author", "/DocumentLabel/DocumentLabel-RevisionHistory-Date", "/DocumentLabel/DocumentLabel-RevisionHistory-Description", "/DocumentLabel/DocumentLabel-RevisionHistory-Revision", "/DocumentLabel/DocumentLabel-SupplierFileName", "/DocumentLabel/DocumentLabel-TOC", "/DocumentLabel/DocumentLabel-TOF", "/DocumentLabel/DocumentLabel-TOT", "/DocumentInfo/DocumentInfo-Copyright", "/DocumentInfo/DocumentInfo-Disclaimer")
    
Conv437Unicode = Array( _

&H7F, &HC7, &HFC, &HE9, &HE2, &HE4, &HE0, &HE5, &HE7, &HEA, &HEB, &HE8, &HEF, &HEE, &HEC, &HC4, &HC5, &HC9, &HE6, &HC6, &HF4, &HF6, &HF2, &HFB, &HF9, &HFF, &HD6, &HDC, &HA2, &HA3, &HA5, &H20A7, &H192, &HE1, &HED, &HF3, &HFA, &HF1, &HD1, &HAA, &HBA, &HBF, &H2310, &HAC, &HBD, &HBC, &HA1, &HAB, &HBB, &H2591, &H2592, &H2593, &H2502, &H2524, &H2561, &H2562, &H2556, &H2555, &H2563, &H2551, &H2557, &H255D, &H255C, &H255B, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &H255E, &H255F, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &H2567, &H2568, &H2564, &H2565, &H2559, &H2558, &H2552, &H2553, &H256B, &H256A, &H2518, &H250C, &H2588, &H2584, &H258C, &H2590, &H2580, &H3B1, &HDF, &H393, &H3C0, &H3A3, &H3C3, &HB5, &H3C4, &H3A6, &H398, &H3A9, &H3B4, &H221E, &H3C6, &H3B5, &H2229, &H2261, &HB1, &H2265, &H2264, &H2320, &H2321, &HF7, &H2248, &HB0, &H2219, &HB7, &H221A, &H207F, &HB2, _
&H25A0, &HA0)
    
Conv850Unicode = Array( _

&H7D, &H7E, &H7F, &HC7, &HFC, &HE9, &HE2, &HE4, &HE0, &HE5, &HE7, &HEA, &HEB, &HE8, &HEF, &HEE, &HEC, &HC4, &HC5, &HC9, &HE6, &HC6, &HF4, &HF6, &HF2, &HFB, &HF9, &HFF, &HD6, &HDC, &HF8, &HA3, &HD8, &HD7, &H192, &HE1, &HED, &HF3, &HFA, &HF1, &HD1, &HAA, &HBA, &HBF, &HAE, _
&HAC, &HBD, &HBC, &HA1, &HAB, &HBB, &H2591, &H2592, &H2593, &H2502, &H2524, &HC1, &HC2, &HC0, &HA9, &H2563, &H2551, &H2557, &H255D, &HA2, &HA5, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &HE3, &HC3, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &HA4, &HF0, &HD0, &HCA, &HCB, &HC8, &H131, &HCD, &HCE, &HCF, &H2518, &H250C, &H2588, &H2584, &HA6, &HCC, &H2580, &HD3, &HDF, &HD4, &HD2, &HF5, &HD5, &HB5, &HFE, &HDE, &HDA, &HDB, &HD9, &HFD, &HDD, &HAF, &HB4, &HAD, &HB1, &H2017, &HBE, &HB6, &HA7, &HF7, &HB8, &HB0, &HA8, &HB7, &HB9, &HB3, &HB2, &H25A0, &HA0)
    
    
Conv863Unicode = Array( _
&H0, &H1, &H2, &H3, &H4, &H5, &H6, &H7, &H8, &H9, &HA, &HB, &HC, &HD, &HE, &HF, &H10, &H11, &H12, &H13, &H14, &H15, &H16, &H17, &H18, &H19, &H1A, &H1B, &H1C, &H1D, &H1E, &H1F, &H20, &H21, &H22, &H23, &H24, &H25, &H26, &H27, &H28, &H29, &H2A, &H2B, &H2C, &H2D, &H2E, &H2F, &H30, &H31, &H32, &H33, &H34, &H35, &H36, &H37, &H38, &H39, &H3A, &H3B, &H3C, &H3D, &H3E, &H3F, &H40, &H41, &H42, &H43, &H44, &H45, &H46, &H47, &H48, &H49, &H4A, &H4B, &H4C, &H4D, &H4E, &H4F, &H50, &H51, &H52, &H53, &H54, &H55, &H56, &H57, _

&H2591, &H2592, &H2593, &H2502, &H2524, &H2561, &H2562, &H2556, &H2555, &H2563, &H2551, &H2557, &H255D, &H255C, &H255B, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &H255E, &H255F, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &H2567, &H2568, &H2564, &H2565, &H2559, &H2558, &H2552, &H2553, &H256B, _
&H256A, &H2518, &H250C, &H2588, &H2584, &H258C, &H2590, &H2580, &H3B1, &HDF, &H393, &H3C0, &H3A3, &H3C3, &HB5, &H3C4, &H3A6, &H398, &H3A9, &H3B4, &H221E, &H3C6, &H3B5, &H2229, &H2261, &HB1, &H2265, &H2264, &H2320, &H2321, &HF7, &H2248, &HB0, &H2219, &HB7, &H221A, &H207F, &HB2, &H25A0, &HA0)

    
    ReadTemplateComments = True
End Sub

Public Sub GetUserNameAndDeleteOldFiles()
    UserName = GetUserFullName
    FoundUserName = True
    ' Delete old temp files
    DeleteOldFiles UserTemp() & "\BGdoc\PDF", 14
    DeleteOldFiles UserTemp() & "\BGdoc", 14
    DeleteOldFiles UserTemp() & "\Draft", 14
    DeleteOldFiles UserTemp() & "\Conversion", 14
End Sub


Attribute VB_Name = "bg_Backstage"
Option Explicit


Const REG_SZ = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY = 3
Const REG_DWORD = 4
Const REG_MULTI_SZ = 7

Public MRUButtons As Scripting.Dictionary
Public Projects As Scripting.Dictionary
Public ProjectButtons As Scripting.Dictionary
Public DriveButtons As Scripting.Dictionary

Public Sites As Scripting.Dictionary
Public SiteButtons As Scripting.Dictionary

Public CheckControls As Scripting.Dictionary

Public FoundButtons As Scripting.Dictionary
Public SelectedButtons As Scripting.Dictionary

Public SiteSearch As String
Public EditBoxFileName As String
Public EditBoxFolder As String

Dim iPinned As Integer
Dim iToday As Integer
Dim iYesterday As Integer
Dim iThisWeek As Integer
Dim iLastWeek As Integer
Dim iOlder As Integer
    
'<button id="BackstageButtonWithCode" onAction="BackstageButtonWithCode_Click" getVisible="BackstageVisible" getLabel="BackstageLabel"/>

Sub EditBoxOnChange(control As IRibbonControl, strText As String)
    ' Callback onChange
    Select Case control.id
        Case "EditProject", "SiteSearch"
                SiteSearch = strText
        Case "FileName"
                EditBoxFileName = strText
    End Select
End Sub

'Callback for FileName getText
Sub EditBoxGetText(control As IRibbonControl, ByRef returnedVal)
    Select Case control.id
        Case "FileName"
           returnedVal = EditBoxFileName
    End Select
End Sub

Public Sub BGSaveAs(doc As Word.Document, openFolder As String, openFileName As String)
    Dim fullnameToUse As String
    If openFolder = "" Then
        fullnameToUse = openFileName
    ElseIf openFolder Like "*/*" Then
        If Right(openFolder, 1) = "/" Then
            fullnameToUse = openFolder & openFileName
        Else
            fullnameToUse = openFolder & "/" & openFileName
        End If
    Else
        If Right(openFolder, 1) = "\" Then
            fullnameToUse = openFolder & openFileName
        Else
            fullnameToUse = openFolder & "\" & openFileName
        End If
    End If
   
    Application.FileDialog(msoFileDialogSaveAs).InitialFileName = fullnameToUse
    Application.FileDialog(msoFileDialogSaveAs).title = ""
    Application.FileDialog(msoFileDialogSaveAs).ButtonName = ""
    Application.FileDialog(msoFileDialogSaveAs).FilterIndex = 1

    Dim choice As Integer
    choice = Application.FileDialog(msoFileDialogSaveAs).show
    If choice = 0 Then 'Don't save
        Exit Sub
    Else
        fullnameToUse = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
        If fullnameToUse = "" Then
            Exit Sub
        Else
            fullnameToUse = FixPath(fullnameToUse, False)
        End If
    End If
    
    ' Save
    Dim bgd As BGDoc
    Set bgd = GetManager.GetBGDocFromDoc(ActiveDocument)
    If Not bgd Is Nothing Then
        bgd.DoSave fullnameToUse
    Else
        Stop
    End If

End Sub

Function MyComputer() As Variant

    Dim objShell As Object, objFolder As Object

    Set objShell = CreateObject("Shell.Application")
    Set objFolder = objShell.Namespace(&H11&)
    MyComputer = objFolder.self.Path
    Set objShell = Nothing
    Set objFolder = Nothing

End Function

Public Sub ButtonBGdocCloneAs_Click(control As IRibbonControl)
     On Error Resume Next
     CloneAs
     On Error GoTo 0
End Sub



Public Sub ButtonSearch_Click(control As IRibbonControl)
    GetSPSite Trim(SiteSearch)
    Dim i As Integer
    For i = 1 To 20
        DocRibbon.InvalidateControl "btnFound_" & i
    Next
    For i = 1 To 20
        DocRibbon.InvalidateControl "btnSelected_" & i
    Next

End Sub

Public Sub ButtonBGdocSaveCurrent_Click(control As IRibbonControl)
    BGSaveAs ActiveDocument, EditBoxFolder, EditBoxFileName
End Sub

Public Sub ButtonBGdocSaveAs_Click(control As IRibbonControl)
    Dim i As Integer
    Dim openFolder As String
    Dim openFileName As String
    Dim btnName As String
    
    Dim pb As ProjectButton
    Dim db As DriveButton
    Dim m As MRUButton
    
    Dim WshShell As Object
    Set WshShell = CreateObject("WScript.Shell")
    openFileName = EditBoxFileName
    openFolder = EditBoxFolder
   
    If control.id Like "btnDrive_*" Then
        Set db = DriveButtons(control.id)
        openFolder = db.Path
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id Like "btnSelected_*" Then
        Set pb = SelectedButtons(control.id)
        openFolder = pb.Path
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id Like "btnFound_*" Then
        Set pb = FoundButtons(control.id)
        If pb.Filter Then
            FilterFound pb
        Else
            openFolder = pb.Path
            BGSaveAs ActiveDocument, openFolder, openFileName
        End If
    ElseIf control.id Like "btnProject_*" Then
        i = Split(control.id, "_")(1)
        btnName = GetManager.LatestProject & ":" & (i - 1)
        If ProjectButtons.exists(btnName) Then
            Set pb = ProjectButtons(btnName)
            openFolder = pb.Path
            BGSaveAs ActiveDocument, openFolder, openFileName
        Else
            Stop
        End If
    ElseIf control.id = "btnECN" Then
        openFolder = "https://connect.beumer.com/business/global-business-functions/engineering/cpdesignchanges/Lists/EN_test"
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnCurrent" Then
        openFolder = ActiveDocument.Path
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnThisPC" Then
        openFolder = MyComputer ' "Computer " & Environ$("computername")   'WshShell.SpecialFolders("MyDocuments") & "\.."
        openFileName = ""
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnDesktop" Then
        openFolder = WshShell.SpecialFolders("Desktop")
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnMyDocuments" Then
        openFolder = WshShell.SpecialFolders("MyDocuments")
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnDefault" Then
        openFolder = Options.DefaultFilePath(wdDocumentsPath)
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id = "btnBrowse" Then
        openFolder = ""
        BGSaveAs ActiveDocument, openFolder, openFileName
    ElseIf control.id Like "btnPinned*" _
    Or control.id Like "btnToday*" _
    Or control.id Like "btnYesterday*" _
    Or control.id Like "btnThisWeek*" _
    Or control.id Like "btnLastWeek*" _
    Or control.id Like "btnOlder*" Then
        If MRUButtons.exists(control.id) Then
            Set m = MRUButtons(control.id)
            openFolder = m.Path
            BGSaveAs ActiveDocument, openFolder, openFileName
        Else
            Stop
        End If
    Else
        MsgBox "ButtonBGdocSaveAs_Click: " & control.id
    End If
    Exit Sub
    
'    Dim bgd As BGDoc
'    Dim ByRefCancel As Boolean
'    Dim ByRefSaveAsUI As Boolean
'    ByRefCancel = False
'    ByRefSaveAsUI = True
'    If Not Manager Is Nothing Then
'        Set bgd = GetManager.GetBGDocFromDoc(ActiveDocument)
'        If Not bgd Is Nothing Then
'            bgd.HandleSave "DocumentBeforeSave", ByRefCancel, ByRefSaveAsUI
'        Else
'        End If
'    Else
'    End If
    
End Sub

Public Sub ButtonBGdocSave_Click(control As IRibbonControl)
    Dim hwnd As Long
    If ActiveDocument.name = ActiveDocument.fullName Then
        DoEvents
            
        '!!!LogDebug "Save started"
        '!!ExStopTimer
        '!!ExDone = True
        '!!ExSubToCall = "WaitAndSaveAs"

        '!!!LogDebug "Run WaitAndSaveAs"
        '!!Set TimerDoc = ActiveDocument
        '!!ExLoops = 0
        '!!ExMaxLoops = 1
        '!!ExDone = False
        '!!ExStartTimer 500
    Else
        GetManager.GetBGDocFromDoc(ActiveDocument).DoSave ActiveDocument.fullName
    End If
End Sub

Public Sub BackstageButtonWithCode_Click(control As IRibbonControl)
    MsgBox "BackstageButtonWithCode_Click:" & control.id
    Exit Sub
End Sub

Public Sub InitiateMRUsAndProjects()
    If MRUButtons Is Nothing Then
        GetLocalMRU
    End If
    
    If DriveButtons Is Nothing Then
        GetDrives
    End If
    
    If Projects Is Nothing Then
        Set Projects = New Scripting.Dictionary
        Set ProjectButtons = New Scripting.Dictionary
    End If
    
    Dim project As String
    Dim dx As docXML
    Set dx = GetManager.GetDX
    project = ""
    If Not dx Is Nothing Then
        On Error Resume Next
        project = dx.ReadText("/DocumentInfo/DocumentInfo-ProjectNo")
        On Error GoTo 0
    End If
    If project <> GetManager.LatestProject Then
        GetSPProject project
    End If
    GetManager.LatestProject = project

    If FoundButtons Is Nothing Then
        Set FoundButtons = New Scripting.Dictionary
        Set SelectedButtons = New Scripting.Dictionary
    End If

End Sub

Public Sub RefreshBackstage()
    Dim key As Variant
    Dim btnName As String
    Dim prjButtonName As String
    
    InitiateMRUsAndProjects
    
    
    If Not DocRibbon Is Nothing Then
    Dim i As Integer
        For i = 1 To 20
            btnName = "btnProject_" & i
            DocRibbon.InvalidateControl (btnName)
        Next i
    
        DocRibbon.InvalidateControl ("grpSave")
        DocRibbon.InvalidateControl ("grpProject")
        DocRibbon.InvalidateControl ("tskProject")
        DocRibbon.InvalidateControl ("btnProject")
        DocRibbon.InvalidateControl ("btnCurrent")
        DocRibbon.InvalidateControl ("btnThisPC")
        DocRibbon.InvalidateControl ("btnMyDocuments")
        DocRibbon.InvalidateControl ("btnDesktop")
        DocRibbon.InvalidateControl ("btnDefault")
        DocRibbon.InvalidateControl ("btnThisPC")
        DocRibbon.InvalidateControl ("btnSave")
        DocRibbon.InvalidateControl "FileName"
        
        For Each key In MRUButtons.Keys
            DocRibbon.InvalidateControl (key)
        Next
        
    End If
    Set GetManager.LatestDoc = ActiveDocument

End Sub

Public Sub BackstageButtonRefresh_Click(control As IRibbonControl)
    RefreshBackstage
End Sub

Public Sub OnBackstageShow(ByVal contextObject As Object)
    'Debug.Print "OnBackstageShow"
    Exit Sub
End Sub

Private Sub InitMRUsAndCheckCollection(ctrl As String)
    If CheckControls Is Nothing Then
        Set CheckControls = New Scripting.Dictionary
    End If
    If Not CheckControls.exists(ctrl) Then CheckControls.Add ctrl, 1

    InitiateMRUsAndProjects

End Sub

Public Sub BackstageVisible(control As IRibbonControl, ByRef visible)
    If control.id = "btnCurrent" Then
        If ActiveDocument.fullName = ActiveDocument.name Then
            visible = False
        Else
            visible = True
        End If
    ElseIf control.id Like "btnDrive_*" Then
        If DriveButtons.exists(control.id) Then
            visible = True
        Else
            visible = False
        End If
    ElseIf control.id Like "btnFound_*" Then
        If FoundButtons.exists(control.id) Then
            visible = True
        Else
            visible = False
        End If
    ElseIf control.id Like "btnSelected_*" Then
        If SelectedButtons.exists(control.id) Then
            visible = True
        Else
            visible = False
        End If
    Else
        visible = True
    End If
End Sub

Public Sub BackstageEnabled(control As IRibbonControl, ByRef enabled)
    InitiateMRUsAndProjects
    
    Select Case control.id
    Case "tskProject"
        If GetManager.LatestProject = "" Then
            enabled = False
        Else
            If IsEmpty(ProjectButtons(GetManager.LatestProject & ":0")) Then
                enabled = False
            Else
                enabled = True
            End If
        End If
    Case "btnSave"
        If ActiveDocument.fullName = ActiveDocument.name Then
            enabled = True 'False
        Else
            enabled = True
        End If
    Case Else
        enabled = True
    End Select
End Sub

Public Sub BackstageImage(control As IRibbonControl, ByRef image)
    InitiateMRUsAndProjects
    
    If control.id Like "btnDrive_*" Then
        If DriveButtons.exists(control.id) Then
            image = DriveButtons(control.id).imageMSO
        Else
            image = "OpenFolder"
        End If
    ElseIf control.id Like "btnFound_*" Then
        If FoundButtons.exists(control.id) Then
            image = FoundButtons(control.id).imageMSO
        Else
            image = "OpenFolder"
        End If
    Else
        image = "OpenFolder"
    End If
End Sub

Public Sub BackstageDescription(control As IRibbonControl, ByRef label)
    InitiateMRUsAndProjects
    
    Select Case control.id
    Case "tskProject"
        If GetManager.LatestProject = "" Then
            label = "Enter project number in 'BG Documentation' Form"
        Else
            If IsEmpty(ProjectButtons(GetManager.LatestProject & ":0")) Then
                label = "Unable to find Project: " & GetManager.LatestProject
            Else
                label = Mid(Split(ProjectButtons(GetManager.LatestProject & ":0").Text, " ", 2)(1), 2, Len(Split(ProjectButtons(GetManager.LatestProject & ":0").Text, " ", 2)(1)) - 2)
            End If
        End If
    Case Else
        label = "BackstageDescription:" & control.id
    End Select
End Sub

Public Sub BackstageLabel(control As IRibbonControl, ByRef label)
    InitiateMRUsAndProjects
    
    Select Case control.id
    Case "grpProject"
        If GetManager.LatestProject = "" Then
            label = "Main Site"
        Else
            label = "Main Site" ' ProjectButtons(GetManager.LatestProject & ":0").Text
        End If
    Case "grpSubProjects"
        If GetManager.LatestProject = "" Then
            label = "Other Sites"
        Else
            label = "Other Sites"
        End If
    Case "btnCurrent"
        label = "Current folder"
    Case "btnThisPC"
        label = "This PC"
    Case "btnDesktop"
        label = "Desktop"
    Case "btnMyDocuments"
        label = "My Documents"
    Case "btnDefault"
        label = "Default Word document folder"
    Case "btnBrowse"
        label = "Browse"
    Case "tskProject"
        If GetManager.LatestProject > "" Then
            label = "Project: " & GetManager.LatestProject
        Else
            label = "No project"
        End If
    Case Else
        If control.id Like "btnDrive_*" Then
           If DriveButtons.exists(control.id) Then
                label = DriveButtons(control.id).Text
            Else
                label = "BackstageMRULabel:" & control.id & ", " & ActiveDocument.name
            End If
        ElseIf control.id Like "btnFound_*" Then
           If FoundButtons.exists(control.id) Then
                label = FoundButtons(control.id).Text
            Else
                label = "BackstageMRULabel:" & control.id & ", " & ActiveDocument.name
            End If
        ElseIf control.id Like "btnSelected_*" Then
           If SelectedButtons.exists(control.id) Then
                label = SelectedButtons(control.id).Text
            Else
                label = "BackstageMRULabel:" & control.id & ", " & ActiveDocument.name
            End If
        Else
            label = "BackstageMRULabel:" & control.id & ", " & ActiveDocument.name
        End If
    End Select
End Sub

Public Sub BackstageMRUHeadingVisible(control As IRibbonControl, ByRef visible)
    InitMRUsAndCheckCollection control.id
    
    If (iPinned > 0 And control.id = "grpPinned") _
    Or (iToday > 0 And control.id = "grpToday") _
    Or (iYesterday > 0 And control.id = "grpYesterday") _
    Or (iThisWeek > 0 And control.id = "grpThisWeek") _
    Or (iLastWeek > 0 And control.id = "grpLastWeek") _
    Or (iOlder > 0 And control.id = "grpOlder") Then
        visible = True
    Else
        visible = False
    End If
End Sub

Public Sub BackstageMRUVisible(control As IRibbonControl, ByRef visible)
    InitMRUsAndCheckCollection control.id
    
    If MRUButtons.exists(control.id) Then
        visible = True
    ElseIf CheckControls.exists(control.id) Then
        visible = False
    Else
        visible = True
    End If
End Sub

Public Sub BackstageMRUEnabled(control As IRibbonControl, ByRef enabled)
    InitMRUsAndCheckCollection control.id
    enabled = True
        
End Sub

Public Sub BackstageMRULabel(control As IRibbonControl, ByRef label)
    InitMRUsAndCheckCollection control.id
    
    If MRUButtons.exists(control.id) Then
        Dim m As MRUButton
        Set m = MRUButtons(control.id)
        label = m.Path
    End If
End Sub

Public Sub BackstageProjectVisible(control As IRibbonControl, ByRef visible)
    InitiateMRUsAndProjects
    Dim i As Integer
    If control.id Like "btnProject*" Then
        i = Split(control.id, "_")(1)
        If ProjectButtons.exists(GetManager.LatestProject & ":" & (i - 1)) Then
            visible = True
        Else
            visible = False
        End If
    Else
        visible = False
    End If
End Sub

Public Sub BackstageProjectEnabled(control As IRibbonControl, ByRef enabled)
    enabled = True
End Sub

Public Sub BackstageProjectLabel(control As IRibbonControl, ByRef label)
    InitiateMRUsAndProjects

    Dim i As Integer
    If control.id Like "btnProject*" Then
        i = Split(control.id, "_")(1)
        If ProjectButtons.exists(GetManager.LatestProject & ":" & i - 1) Then
            If IsEmpty(ProjectButtons(GetManager.LatestProject & ":" & i - 1)) Then
                label = "Project " & ProjectButtons(GetManager.LatestProject) & " not found?"
            Else
                label = ProjectButtons(GetManager.LatestProject & ":" & i - 1).Text
            End If
        Else
            label = "BackstageProjectLabel:" & control.id
        End If
    Else
        label = "BackstageProjectLabel:" & control.id
    End If
End Sub

Public Sub GetHelperText(control As IRibbonControl, ByRef label)
    Select Case control.id
    Case "grpSave"
        label = Replace(EditBoxFolder, "%20", " ") & vbCrLf & vbCrLf & Replace(ActiveDocument.name, "%20", " ")
    Case "grpSharePointSearchGroup"
        label = "Searches the portals defined in Portal Overview" & vbCrLf
    Case Else
        label = control.id & " - Not found in code"
    End Select
End Sub

Public Sub BGDocSave(control As IRibbonControl, ByRef cancelDefault)
    Dim hwnd As Long
    If ActiveDocument.name = ActiveDocument.fullName Then
        DoEvents
'        Dim WshShell As Object
'        Set WshShell = CreateObject("WScript.Shell")
'
'            hwnd = FindWindowWild("* - " & Application.caption)
'            Call PostMessage(hwnd, WM_ACTIVATE, 1, ByVal 0)
'
'            Sleep 100
'
'            WshShell.SendKeys "%fa{ESCAPE}", True '"%F%A{ESCAPE}"
            
        '!!!LogDebug "Save started"
        '!!ExStopTimer
        '!!ExDone = True
        '!!ExSubToCall = "WaitAndSaveAs"

        '!!!LogDebug "Run WaitAndSaveAs"
        '!!Set TimerDoc = ActiveDocument
        '!!ExLoops = 0
        '!!ExMaxLoops = 1
        '!!ExDone = False
        '!!ExStartTimer 500
    Else
        Dim bgd As BGDoc
        Set bgd = GetManager.GetBGDocFromDoc(ActiveDocument)
        bgd.DoSave ActiveDocument.fullName
    End If
End Sub

Private Function UnixToTime(secs As Long) As Date
    Dim days As Integer
 
    days = secs \ 86400
 
    UnixToTime = (DateSerial(1970, 1, 1) + days)
End Function

Public Function HexToVBDate(dtText As Variant) As Date
    HexToVBDate = CVDate(CStr((Hex2Dec(dtText)) / 864000000000#) - 109205#)
End Function

Function Hex2Dec(hexString As Variant) As Variant
    Dim myHex2Dec As Variant
    'cut off "&h" if present
    If Left(hexString, 2) = "&h" Or Left(hexString, 2) = "&H" Then hexString = Mid(hexString, 3)

    'cut off leading zeros
    While Left(hexString, 1) = "0"
        hexString = Mid(hexString, 2)
    Wend

    myHex2Dec = CDec("&h" & hexString)
    'correct value for 8 digits onle
    If myHex2Dec < 0 And Len(hexString) = 8 Then
        myHex2Dec = CDec("&h1" & hexString) - 4294967296#
    'cause overflow for 16 digits
    ElseIf myHex2Dec < 0 Then
        Error (6) 'overflow
    End If

    Hex2Dec = myHex2Dec
End Function

Sub GetLocalMRU()
    Dim reg As New Registry
    Dim ok As Boolean
    
    Set MRUButtons = New Scripting.Dictionary
    
    Dim strRegKey As String
    Dim strKey As Variant
    Dim strRootKey As String
    Dim strSubKey As String
    Dim strValue As String
    Dim hasValue As Boolean
    Dim dtNow As Date
    dtNow = Date
    
    Dim aKeys() As Variant
    Dim aSubKeys() As Variant
    Dim aValues() As Variant
    Dim i As Integer
    
    iPinned = 0
    iToday = 0
    iYesterday = 0
    iThisWeek = 0
    iLastWeek = 0
    iOlder = 0
    
    strRootKey = "Software\Microsoft\Office\17.0\Word\User MRU"
    ok = reg.ListKeys(strRootKey, aKeys)
    If Not ok Then
        strRootKey = "Software\Microsoft\Office\16.0\Word\User MRU"
        ok = reg.ListKeys(strRootKey, aKeys)
    End If
    
    
    If ok Then
        strRegKey = strRootKey & "\" & aKeys(0) & "\" & "Place MRU"
        'Debug.Print strRegKey
        ok = reg.ListKeysAndValues(strRegKey, aSubKeys, aValues)
        If ok Then
            For i = 0 To UBound(aSubKeys)
                'Debug.Print "Value Name: " & aSubKeys(i)
                Select Case aValues(i)
                    Case REG_SZ
                        hasValue = reg.GetStringValue(strRegKey, aSubKeys(i), strValue)
                        If hasValue Then
                            'Debug.Print "Data Type: String", strValue
                            Dim m As MRUButton
                            Set m = New MRUButton
                            Dim aMRU() As String
                            aMRU = Split(strValue, "][")
                            m.Text = strValue
                            m.IsPinned = (Right(aMRU(0), 1) = "1")
                            m.Path = Split(aMRU(2), "*", 2)(1)
                            Dim dtText As Variant
                            dtText = Mid(aMRU(1), 2)
                            m.TimeText = dtText
                            m.DateAndTime = HexToVBDate(dtText)
                            Dim dt As Date
                            dt = DateValue(m.DateAndTime)
                            m.DateOnly = dt
                            If m.IsPinned Then
                                m.DateGroup = 0 ' Pinned
                                iPinned = iPinned + 1
                                m.ButtonName = "btnPinned_" & iPinned
                            ElseIf dt = dtNow Then
                                m.DateGroup = 1 ' Today
                                iToday = iToday + 1
                                m.ButtonName = "btnToday_" & iToday
                            ElseIf dt - 1 = dtNow Then
                                m.DateGroup = 2 ' Yesterday
                                iYesterday = iYesterday + 1
                                m.ButtonName = "btnYesterday_" & iYesterday
                            ElseIf dt > dtNow - 7 And DatePart("ww", dt) = DatePart("ww", dtNow) Then
                                m.DateGroup = 3 ' This Week
                                iThisWeek = iThisWeek + 1
                                m.ButtonName = "btnThisWeek_" & iThisWeek
                            ElseIf dt > dtNow - 14 And DatePart("ww", dt) = DatePart("ww", dtNow) - 1 Then
                                m.DateGroup = 4 ' Last week
                                iLastWeek = iLastWeek + 1
                                m.ButtonName = "btnLastWeek_" & iLastWeek
                            ElseIf dt > dtNow - 14 And DatePart("ww", dt) = 1 And DatePart("ww", dtNow) >= 52 Then
                                m.DateGroup = 5 ' Last week (Not always ok)
                                iLastWeek = iLastWeek + 1
                                m.ButtonName = "btnLastWeek_" & iLastWeek
                            Else
                                m.DateGroup = 6 ' Older
                                iOlder = iOlder + 1
                                m.ButtonName = "btnOlder_" & iOlder
                            End If
                            'Debug.Print m.IsPinned, Hex2Dec(dtText), m.DateAndTime, m.DateOnly, m.DateGroup, m.ButtonName, m.Path
                            MRUButtons.Add m.ButtonName, m
                        Else
                            'Debug.Print "Data Type: String", "No value?"
                        End If
                    Case REG_EXPAND_SZ
                        'Debug.Print "Data Type: Expanded String"
                    Case REG_BINARY
                        'Debug.Print "Data Type: Binary"
                    Case REG_DWORD
                        'Debug.Print "Data Type: DWORD"
                    Case REG_MULTI_SZ
                        'Debug.Print "Data Type: Multi String"
                End Select
            Next
        End If
    End If
    
    Set reg = Nothing
    
End Sub

Public Sub TestGetSPProject()
    If Projects Is Nothing Then Set Projects = New Scripting.Dictionary
    If ProjectButtons Is Nothing Then Set ProjectButtons = New Scripting.Dictionary
    
    Set Projects = New Scripting.Dictionary
    Set ProjectButtons = New Scripting.Dictionary
    GetSPProject "12356"
    ' GetSPProject "12665"

End Sub

Public Sub GetSPProject(title As String, Optional timeOut As Single = 30, Optional viewFields As String = "", Optional stopAfterMetaInfo As Boolean = True)
    If Projects.exists(title) Then Exit Sub
    Projects.Add title, Now
    
    Dim listUrl As String
    Dim Site As String
    Dim listName As String
    Dim listId As String
    Dim where As String
    Dim fileRef As String
    Dim strXML As String
    Dim res As String
    Dim i As Integer
    i = 1
  
    listUrl = "http://crisnet/project/spteam/PortalOverview/Lists/ProjectPortals"
    
    Site = GetSite(listUrl, timeOut)

    If LCase(Site) Like "http*" Then
        listName = Mid(listUrl, Len(Site) + 2)
        If listName Like "Lists/*" Then
            listName = Mid(listName, 7)
        End If
        listId = GetListGUID(Site, listName)
        
        'where = "<Contains><FieldRef Name=""Link""/><Value Type=""URL"">" & title & "</Value></Contains>"
        where = "<Contains><FieldRef Name=""SiteSearch""/><Value Type=""Text"">|" & title & "|</Value></Contains>"
        strXML = GetItems(Site & "/_vti_bin/Lists.asmx", listId, where, timeOut, viewFields)
  
        If strXML Like "Error:*" Or strXML Like "*ItemCount=""0""*" Then
            where = "<Contains><FieldRef Name=""SiteSearch""/><Value Type=""Text"">" & title & "</Value></Contains>"
            strXML = GetItems(Site & "/_vti_bin/Lists.asmx", listId, where, timeOut, viewFields)

        End If
        
        If Not strXML Like "Error:*" And Not strXML Like "*ItemCount=""0""*" Then
            Dim docXML As New DOMDocument60
            strXML = GetXPathSoap(strXML, "//z:row", False, vbCrLf)
            docXML.LoadXML "<root>" & strXML & "</root>"
            docXML.SetProperty "SelectionLanguage", "XPath"
            
            Dim nodes As IXMLDOMNodeList
            Dim node As IXMLDOMNode
            Dim att As IXMLDOMAttribute
            
        '        Set nodes = docXML.SelectNodes("//row")
        '            For Each node In nodes
        '                Debug.Print node.XML
        '            Next
            Dim xPathFilter As String
            'xPathFilter = "//row[substring(@FileDirRef,string-length(@FileDirRef) -string-length('Reports/" & docId & "') +1) = 'Reports/" & docId & "']"
            xPathFilter = "//row"
        '        Debug.Print xPathFilter
            Set nodes = docXML.SelectNodes(xPathFilter)
            
            If nodes.length = 0 Then
            ElseIf nodes.length = 1 Then
                Dim SiteSearch As String
                Dim siteList() As String
                Dim urlAndNo() As String
                Dim name As String
                
                For Each att In nodes(0).Attributes
                    If att.BaseName = "Title" Then name = att.NodeValue
                    If att.BaseName = "SiteSearch" Then SiteSearch = att.NodeValue
                    If att.BaseName = "SiteList" Then siteList = Split(att.NodeValue, vbLf)
                    If att.BaseName = "Link" Then urlAndNo = Split(att.NodeValue, ", ")
                Next
                
                Dim pb As ProjectButton
                
                Set pb = New ProjectButton
                pb.ButtonName = "btnButton_0"
                pb.Order = 0
                pb.Path = urlAndNo(0)
                pb.Path = Replace(Replace(Replace(pb.Path, "default.aspx", "", , , vbTextCompare), "sitepages/home.aspx", "", , , vbTextCompare), "/_layouts/15/start.aspx#", "", , , vbTextCompare)
                If Right(pb.Path, 1) = "/" Then
                    pb.Path = Left(pb.Path, Len(pb.Path) - 1)
                End If
                pb.Text = urlAndNo(1) & " (" & name & ")"
                
                ProjectButtons.Add title & ":" & 0, pb
                
                Dim siteCount As Integer
                siteCount = -1
                On Error Resume Next
                siteCount = UBound(siteList)
                On Error GoTo 0
                If siteCount > -1 Then
                    For i = 0 To siteCount
                        Set pb = New ProjectButton
                        pb.ButtonName = "btnButton_" & (i + 1)
                        pb.Order = i + 1
                        pb.Path = Split(siteList(i), "|")(1)
                        pb.Text = Split(siteList(i), "|")(0)
                        
                        ProjectButtons.Add title & ":" & (i + 1), pb
                    Next
                End If
            Else
            End If
        Else
        End If
    Else
    
    End If

End Sub

Public Sub GetSPSite(title As String, Optional timeOut As Single = 30, Optional viewFields As String = "", Optional stopAfterMetaInfo As Boolean = True)
    Dim listUrl As String
    Dim Site As String
    Dim listName As String
    Dim listId As String
    Dim where As String
    Dim fileRef As String
    Dim strXML As String
    Dim res As String
    Dim i As Integer
    i = 1
  
    Set FoundButtons = New Scripting.Dictionary
    Set SelectedButtons = New Scripting.Dictionary
  
    listUrl = "http://crisnet/project/spteam/PortalOverview/Lists/Internal Portals"
    
    Site = GetSite(listUrl, timeOut)

    If LCase(Site) Like "http*" Then
        listName = Mid(listUrl, Len(Site) + 2)
        If listName Like "Lists/*" Then
            listName = Mid(listName, 7)
        End If
        listId = GetListGUID(Site, listName)
        
        'where = "<Contains><FieldRef Name=""Link""/><Value Type=""URL"">" & title & "</Value></Contains>"
        where = "<Contains><FieldRef Name=""SiteSearch""/><Value Type=""Text"">|" & title & "|</Value></Contains>"
        strXML = GetItems(Site & "/_vti_bin/Lists.asmx", listId, where, timeOut, viewFields)
  
        If strXML Like "Error:*" Or strXML Like "*ItemCount=""0""*" Then
            where = "<Contains><FieldRef Name=""SiteSearch""/><Value Type=""Text"">" & title & "</Value></Contains>"
            strXML = GetItems(Site & "/_vti_bin/Lists.asmx", listId, where, timeOut, viewFields)

        End If
        
        If Not strXML Like "Error:*" And Not strXML Like "*ItemCount=""0""*" Then
            Dim docXML As New DOMDocument60
            strXML = GetXPathSoap(strXML, "//z:row", False, vbCrLf)
            docXML.LoadXML "<root>" & strXML & "</root>"
            docXML.SetProperty "SelectionLanguage", "XPath"
            
            Dim nodes As IXMLDOMNodeList
            Dim node As IXMLDOMNode
            Dim att As IXMLDOMAttribute
            
        '        Set nodes = docXML.SelectNodes("//row")
        '            For Each node In nodes
        '                Debug.Print node.XML
        '            Next
            Dim xPathFilter As String
            'xPathFilter = "//row[substring(@FileDirRef,string-length(@FileDirRef) -string-length('Reports/" & docId & "') +1) = 'Reports/" & docId & "']"
            xPathFilter = "//row"
        '        Debug.Print xPathFilter
            Set nodes = docXML.SelectNodes(xPathFilter)
            
            Dim iMax As Integer
            Dim SiteSearch As String
            Dim siteList() As String
            Dim urlAndNo() As String
            Dim name As String
            Dim FB As ProjectButton
            Dim SB As ProjectButton
            Dim j As Integer
            Dim siteCount As Integer
            Dim isFirst As Boolean
            Dim hasSiteList As Boolean
            Dim n As Integer
            Dim nodeList As String
        
            iMax = 20
            n = 0
            isFirst = True
            For i = 1 To iMax - 1
                n = n + 1
                nodeList = ""
                hasSiteList = False
                If n > nodes.length Then
                Else
                    For Each att In nodes(n - 1).Attributes
                        If att.BaseName = "Title" Then name = att.NodeValue
                        If att.BaseName = "SiteSearch" Then SiteSearch = att.NodeValue
                        If att.BaseName = "SiteList" Then
                            nodeList = att.NodeValue
                            siteList = Split(att.NodeValue, vbLf)
                            hasSiteList = True
                        End If
                        If att.BaseName = "Link" Then urlAndNo = Split(att.NodeValue, ", ")
                    Next
                    
                    siteCount = -1
                    If hasSiteList Then
                        On Error Resume Next
                        siteCount = UBound(siteList)
                        On Error GoTo 0
                    End If
                    
                    If siteCount > -1 Then
                        If i Mod 2 = 1 Then
                            i = i + 1
                        End If
                    Else
                        If i Mod 2 = 0 Then
                            i = i + 1
                        End If
                    End If
                    
                    Set FB = New ProjectButton
                    FB.imageMSO = "OpenFolder"
                    FB.ButtonName = "btnFound_" & i
                    FB.Order = n
                    FB.Filter = False
                    FB.Path = urlAndNo(0)
                    FB.nodeList = nodeList
                    FB.Path = Replace(Replace(FB.Path, "default.aspx", "", , , vbTextCompare), "home.aspx", "", , , vbTextCompare)
                    If Right(FB.Path, 1) = "/" Then
                        FB.Path = Left(FB.Path, Len(FB.Path) - 1)
                    End If
                    FB.Text = urlAndNo(1) & " (" & name & ")"
                    
                    FoundButtons.Add FB.ButtonName, FB
                    
                    If isFirst Then
                        SelectedButtons.Add "btnSelected_" & n, FB
                        If siteCount > -1 Then
                            FB.imageMSO = "Filters"
                            FB.Filter = True
                            FB.Text = FB.Text & " (" & (siteCount + 1) & ")"
                            For j = 0 To siteCount
                                Set SB = New ProjectButton
                                SB.ButtonName = "btnSelected_" & (j + 2)
                                SB.Order = j + 2
                                SB.Path = Split(siteList(j), "|")(1)
                                SB.Text = Split(siteList(j), "|")(0)
                                SelectedButtons.Add SB.ButtonName, SB
                            Next
                        End If
                    Else
                        If siteCount > -1 Then
                            FB.imageMSO = "Filters"
                            FB.Filter = True
                            FB.Text = FB.Text & " (" & (siteCount + 1) & ")"
                        End If
                   End If
                   isFirst = False
                End If
             Next
        Else
        End If
    Else
    End If
End Sub

Public Sub FilterFound(pb As ProjectButton)
    Dim siteList() As String
    Dim siteCount As Integer
    Dim j As Integer
    Dim SB As ProjectButton
    Dim i As Integer
    
    Set SelectedButtons = New Scripting.Dictionary
    siteList = Split(pb.nodeList, vbLf)
    siteCount = -1
    On Error Resume Next
    siteCount = UBound(siteList)
    On Error GoTo 0
    SelectedButtons.Add "btnSelected_" & 1, pb
    If siteCount > -1 Then
        For j = 0 To siteCount
            Set SB = New ProjectButton
            SB.ButtonName = "btnSelected_" & (j + 2)
            SB.Order = j + 2
            SB.Path = Split(siteList(j), "|")(1)
            SB.Text = Split(siteList(j), "|")(0)
            SelectedButtons.Add SB.ButtonName, SB
        Next
    End If

    For i = 1 To 20
        DocRibbon.InvalidateControl "btnSelected_" & i
    Next
End Sub

Public Sub GetDrives()
    Dim fso As New Scripting.FileSystemObject
    Dim t As String
    Dim d As Drive
    Dim dummy As Variant
    Dim db As DriveButton
    Dim i As Integer
    Dim folder As String
    Dim parentPath As String
    Dim image As String
    
    i = 1
    
    Set DriveButtons = New Scripting.Dictionary
    
    Dim DoList As Boolean
    For Each d In fso.Drives
        DoList = True
        If True Then
            Select Case d.DriveType
                Case 0: t = "Unknown"
                    image = "SaveItem"
                Case 1: t = "Removable"
                    On Error Resume Next
                    dummy = d.TotalSize
                    If Err.Number <> 0 Then DoList = False
                    On Error GoTo 0
                    image = "TableRowsInsertWord"
                Case 2: t = "Fixed"
                    image = "ShapeEffectsMenu"
                Case 3: t = "Network"
                    On Error Resume Next
                    DoList = d.IsReady
                    If Err.Number <> 0 Then
                        DoList = False
                    End If
                    On Error GoTo 0
                    image = "ShowFields"
                Case 4: t = "CD-ROM"
                    image = "FilePackageForCD"
                Case 5: t = "RAM Disk"
                    image = "TimeIntervalConfigure"
            End Select
            If DoList Then
                If t = "Fixed" Or t = "Removable" Then
                    folder = d.VolumeName
                    parentPath = ""
                ElseIf InStrRev(d.ShareName, "\") > 0 Then
                    folder = Mid(d.ShareName, InStrRev(d.ShareName, "\") + 1)
                    parentPath = Left(d.ShareName, Len(d.ShareName) - Len(folder) - 1)
                Else
                    folder = d.Path
                    parentPath = ""
                End If
                Set db = New DriveButton
                db.ButtonName = "btnDrive_" & CStr(i)
                db.Path = CStr(d)
                db.DriveType = t
                db.imageMSO = image
                If parentPath = "" Then
                    db.Text = "(" & d & ")  " & folder
                Else
                    db.Text = "(" & d & ")  " & folder & "  " & "[" & parentPath & "]"
                End If
                DriveButtons.Add db.ButtonName, db
                On Error Resume Next
                ' Debug.Print d, d.ShareName, d.Path, d.DriveType, t  ', d.VolumeName
                'Debug.Print db.ButtonName, " ", db.DriveType, db.Path, db.imageMSO; vbCrLf; db.Text
                On Error GoTo 0
                i = i + 1
            End If
        End If
        'ShowDriveInfo (d)
    Next
    
    Set fso = Nothing
End Sub

Public Sub CloneAs()
    Dim saved As Boolean
    Dim clone As Integer
    Dim RegExpObj As Object
    Dim matches As Object
    Dim found As Boolean
    Dim foundText As String
    
    saved = ActiveDocument.saved
    If saved Then
        clone = MsgBox("Are you sure you want to clone '" & ActiveDocument.name & "' as a new document?" & vbCrLf & vbCrLf & _
            "A temporary file will be created, revision history updated to show that the document is based on this document and references to headings and figures will be made unique." _
            , vbInformation + vbYesNo + vbDefaultButton1, "Clone document")
        If Not clone = vbYes Then Exit Sub
    Else
        MsgBox "Cannot clone an unsaved document", vbInformation + vbOKOnly, "Clone document"
        Exit Sub
    End If

    ' Save filenames
    Dim bgd As BGDoc
    Set bgd = GetManager.GetBGDocFromDoc(ActiveDocument)
    bgd.SetSaveFileName ActiveDocument.name
    bgd.SetSaveFolder ActiveDocument.Path
    ' Save temporary
    
    On Error Resume Next
    MkDir UserTemp() & "\BGdoc"
    On Error GoTo 0
    
    Dim SaveAsTempFullName As String
    SaveAsTempFullName = ActiveDocument.name
    
    found = False
    foundText = ""
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Global = True
        .Pattern = "( \d{4}-\d{2}-\d{2} \d{2}\.\d{2}\.\d{2})"
        If .Test(SaveAsTempFullName) Then
            found = True
        End If
        If found Then
            Set matches = .Execute(SaveAsTempFullName)
            foundText = matches(0).SubMatches(0)
        End If
    End With
    If foundText > "" Then
        SaveAsTempFullName = Replace(SaveAsTempFullName, foundText, "")
    End If
    
    SaveAsTempFullName = UserTemp() & "\BGdoc\" & Mid(SaveAsTempFullName, 1, InStrRev(SaveAsTempFullName, ".") - 1) & " " & Format(Now, "yyyy-mm-dd HH.nn.ss") & ".docx"
    
    On Error Resume Next
    ActiveDocument.SaveAs2 SaveAsTempFullName, , , , False
    On Error GoTo 0
    If LCase(ActiveDocument.fullName) = LCase(SaveAsTempFullName) Then
        ' Update references
        RefreshBookmarksAndReferences
        
        GetManager.GetBGDocFromDoc(ActiveDocument).Init ActiveDocument, dsAutoNew
    Else
        MsgBox "Clone failed to save document!" & vbCrLf & vbCrLf & "Document will be closed.", vbCritical + vbOKOnly, "Clone document"
        ActiveDocument.Close wdDoNotSaveChanges
    End If

End Sub

Attribute VB_Name = "bg_BookmarksAndReferences"
Option Explicit
Option Compare Text

Public Sub RefreshBookmarksAndReferences()
    Dim rng As Range
    Set rng = ActiveDocument.Range
    Dim fld As field
    Dim book As Bookmark
    
    Dim bookFromTo As New Scripting.Dictionary
    Dim bookToFrom As New Scripting.Dictionary
    Dim showHiddenBookmarks As Boolean
    
    showHiddenBookmarks = ActiveDocument.Bookmarks.ShowHidden
    ActiveDocument.Bookmarks.ShowHidden = True
    
    Dim objUndo As UndoRecord
    Set objUndo = Application.UndoRecord
    objUndo.StartCustomRecord "Change Bookmarks"

    For Each book In rng.Bookmarks
        If LCase(book.name) Like LCase("*_Ref*") Then
            If Not bookToFrom.exists(book.name) Then
                Dim bookName As String
                Dim newbookName As String
                Dim bookRange As Range
                Dim rndNumber As Long
                
                
                Set bookRange = book.Range
                bookName = book.name
                rndNumber = GetRndNo(800000000, 899999999)
                newbookName = "_Ref" & rndNumber
                
                bookFromTo.Add LCase(bookName), newbookName
                bookToFrom.Add newbookName, bookName
                
                'book.Select
                Debug.Print "BOOK => "; bookName, newbookName, book.start, book.End, book.Range.Text
                book.Delete
                Dim bookNew As Bookmark
                Set bookNew = ActiveDocument.Bookmarks.Add(newbookName, bookRange)
            End If
        End If
    Next
    
    For Each fld In rng.fields
'        If fld.Type = wdFieldSequence And fld.Result.End < 300 Then
'            Debug.Print "SEQ  => "; fld.Code, fld.Result, fld.Result.Start, fld.Result.End
'            fld.Select
'        End If
    
        If LCase(fld.code.Text) Like LCase("*_Ref*") Then
            'fld.Select
            Debug.Print "REF  => "; fld.code, fld.result, fld.result.start, fld.result.End, fld.Type
            Dim aRef() As String
            aRef = Split(fld.code.Text, " ")
            
            Dim i As Integer
            For i = 0 To UBound(aRef)
                If LCase(aRef(i)) Like LCase("_Ref*") Then
                    Dim ref As String
                    ref = LCase(Trim(aRef(i)))
                    If bookFromTo.exists(ref) Then
                        fld.code.Text = Replace(fld.code.Text, ref, bookFromTo(ref), , , vbTextCompare)
                        fld.Update
                    End If
                End If
            Next
            'Debug.Print fld.Code, fld.Result
        End If
    Next
    objUndo.EndCustomRecord
    
    ActiveDocument.Bookmarks.ShowHidden = showHiddenBookmarks

End Sub

Function GetRndNo(ByVal lLowerVal As Long, ByVal lUpperVal As Long, _
                  Optional bInclVals As Boolean = True) As Long
    On Error GoTo Error_Handler
    Dim lTmp                  As Long
 
    'Swap the lLowerVal and lUpperVal values, if they were inversed in the originating
    '   function call
    If lLowerVal > lUpperVal Then
        lTmp = lLowerVal
        lLowerVal = lUpperVal
        lUpperVal = lTmp
    End If
 
    'Adjust the boundary values should the user specify to exclude them from the
    '   possible returned values
    If bInclVals = False Then
        lLowerVal = lLowerVal + 1
        lUpperVal = lUpperVal - 1
    End If
 
    'Calculate our random number!
    Randomize
    GetRndNo = Int((lUpperVal - lLowerVal + 1) * Rnd + lLowerVal)
 
Error_Handler_Exit:
    On Error Resume Next
    Exit Function
 
Error_Handler:
    ''!!!LogError Err.Number, Err.Description, sModName & "\GetRndNo", , True, Erl
    MsgBox "The following error has occured" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Error Source: GetRndNo" & vbCrLf & _
           "Error Description: " & Err.Description & _
           Switch(Erl = 0, "", Erl <> 0, vbCrLf & "Line No: " & Erl) _
           , vbOKOnly + vbCritical, "An Error has Occured!"
    Resume Error_Handler_Exit
End Function

Public Sub CourierNewToMSLineDraw(rng As Range)
    Dim lng As Long
    Dim i As Long
    Dim a As Long
    
    lng = rng.Characters.Count
    For i = 1 To lng
        a = AscW(rng.Characters(i))
        Select Case a
            Case 196: rng.Characters(i) = ChrW(9472)
            Case 179: rng.Characters(i) = ChrW(9474)
            Case 218: rng.Characters(i) = ChrW(9484)
            Case 191: rng.Characters(i) = ChrW(9488)
            Case 192: rng.Characters(i) = ChrW(9492)
            Case 217: rng.Characters(i) = ChrW(9496)
            Case 195: rng.Characters(i) = ChrW(9500)
            Case 180: rng.Characters(i) = ChrW(9508)
            Case 194: rng.Characters(i) = ChrW(9516)
            Case 193: rng.Characters(i) = ChrW(9524)
            Case 197: rng.Characters(i) = ChrW(9532)
            Case 205: rng.Characters(i) = ChrW(9552)
            Case 186: rng.Characters(i) = ChrW(9553)
            Case 201: rng.Characters(i) = ChrW(9556)
            Case 187: rng.Characters(i) = ChrW(9559)
            Case 200: rng.Characters(i) = ChrW(9562)
            Case 188: rng.Characters(i) = ChrW(9565)
            Case 204: rng.Characters(i) = ChrW(9568)
            Case 185: rng.Characters(i) = ChrW(9571)
            Case 203: rng.Characters(i) = ChrW(9574)
            Case 202: rng.Characters(i) = ChrW(9577)
            Case 206: rng.Characters(i) = ChrW(9580)
            Case 219: rng.Characters(i) = ChrW(9608)
            Case 177: rng.Characters(i) = ChrW(9618)
        End Select
    Next
    
End Sub


Public Sub CourierNewToMSLineDrawAll()
    Application.ScreenUpdating = False
    Dim p As Paragraph
    Dim sty As Style
    
    Dim rng As Range
    Dim lng As Long
    Dim i As Long
    Dim a As Long
    Debug.Print Now
    lng = ActiveDocument.Paragraphs.Count
    For i = lng To 1 Step -1
        DoEvents
        Set p = ActiveDocument.Paragraphs(i)
        Set sty = p.Style
        If sty.NameLocal Like "LineDraw*" Or sty.NameLocal Like "*courier*" Then
            ' Debug.Print i, sty.NameLocal, sty.BuiltIn
            CourierNewToMSLineDraw p.Range
        End If
    Next
    Debug.Print Now
    Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "bg_CI"
Option Explicit
Option Compare Text

Public Sub QuickSortArray(ByRef SortArray As Variant, Optional lngMin As Long = -1, Optional lngMax As Long = -1, Optional lngColumn As Long = 0)
    On Error Resume Next

    'Sort a 2-Dimensional array

    ' SampleUsage: sort arrData by the contents of column 3
    '
    '   QuickSortArray arrData, , , 3

    '
    'Posted by Jim Rech 10/20/98 Excel.Programming

    'Modifications, Nigel Heffernan:

    '       ' Escape failed comparison with empty variant
    '       ' Defensive coding: check inputs

    Dim i As Long
    Dim j As Long
    Dim varMid As Variant
    Dim arrRowTemp As Variant
    Dim lngColTemp As Long

    If IsEmpty(SortArray) Then
        Exit Sub
    End If
    If InStr(TypeName(SortArray), "()") < 1 Then  'IsArray() is somewhat broken: Look for brackets in the type name
        Exit Sub
    End If
    If lngMin = -1 Then
        lngMin = LBound(SortArray, 1)
    End If
    If lngMax = -1 Then
        lngMax = UBound(SortArray, 1)
    End If
    If lngMin >= lngMax Then    ' no sorting required
        Exit Sub
    End If

    i = lngMin
    j = lngMax

    varMid = Empty
    varMid = SortArray((lngMin + lngMax) \ 2, lngColumn)

    ' We  send 'Empty' and invalid data items to the end of the list:
    If IsObject(varMid) Then  ' note that we don't check isObject(SortArray(n)) - varMid *might* pick up a valid default member or property
        i = lngMax
        j = lngMin
    ElseIf IsEmpty(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf IsNull(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf varMid = "" Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) = vbError Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) > 17 Then
        i = lngMax
        j = lngMin
    End If

    While i <= j
        While SortArray(i, lngColumn) < varMid And i < lngMax
            i = i + 1
        Wend
        While varMid < SortArray(j, lngColumn) And j > lngMin
            j = j - 1
        Wend

        If i <= j Then
            ' Swap the rows
            ReDim arrRowTemp(LBound(SortArray, 2) To UBound(SortArray, 2))
            For lngColTemp = LBound(SortArray, 2) To UBound(SortArray, 2)
                arrRowTemp(lngColTemp) = SortArray(i, lngColTemp)
                SortArray(i, lngColTemp) = SortArray(j, lngColTemp)
                SortArray(j, lngColTemp) = arrRowTemp(lngColTemp)
            Next lngColTemp
            Erase arrRowTemp

            i = i + 1
            j = j - 1
        End If
    Wend

    If (lngMin < j) Then Call QuickSortArray(SortArray, lngMin, j, lngColumn)
    If (i < lngMax) Then Call QuickSortArray(SortArray, i, lngMax, lngColumn)

End Sub
Attribute VB_Name = "bg_Callbacks"
Option Explicit

Public ActiveWindowHandle As LongPtr

Public Sub ActivateDocumentTab()
    If Not DocRibbon Is Nothing Then
        DoEvents
        '!!!Sleep 10
        On Error Resume Next
        DocRibbon.ActivateTab "documentTab"
        On Error GoTo 0
        DoEvents
    End If
End Sub

Public Sub ButtonInsertProperty_Click(control As IRibbonControl)
    If Not IsLocked Then
        Dim dx As New docXML
        Dim shortId As String
        shortId = Replace(control.id, "ButtonInsertProperty", "")
        shortId = "[[" & shortId & "]]"
        dx.InsertCalculatedCC shortId
        Set dx = Nothing
    End If
    
End Sub

Sub ButtonMarkAsForm_Click(control As IRibbonControl)
    If Not ActiveDocument.ReadOnly Then
        Dim frm As New MarkAsForm
        frm.show
    End If
End Sub

Sub ButtonConvertToBGDoc_Click(control As IRibbonControl)
    Dim doc As Document
    Dim fromDoc As Document
    Set doc = Application.Documents.Add(ActiveDocument.attachedTemplate.fullName, , , False)
    
    Dim fromDocFullName As String
    fromDocFullName = OpenConvertFileDialog()
    If fromDocFullName > "" Then
        On Error Resume Next
        Set fromDoc = Application.Documents(fromDocFullName)
        On Error GoTo 0
        If fromDoc Is Nothing Then
            On Error Resume Next
            Set fromDoc = Application.Documents.Open(fromDocFullName, False, True, False, , , , , , , , True)
            On Error GoTo 0
            If fromDoc Is Nothing Then
                MsgBox "Unable to open '" & fromDocFullName & "'. Not allowed due to Trust Center settibgs?", vbExclamation & vbOKOnly, "Cannot convert document"
                Exit Sub
            End If
            If fromDoc.CanCheckin Then
                MsgBox "Document must be checked in to be converted '" & fromDocFullName & "'", vbExclamation & vbOKOnly, "Cannot convert document"
                Exit Sub
            End If
            If LCase(fromDoc.fullName) Like "http*" Then
                Dim notOk As String
                notOk = CanMoveSharePointFile(fromDoc.fullName)
                If notOk > "" Then
                    If LCase(notOk) Like "*heckout*" Then
                        MsgBox "Document must be checked in to be converted '" & fromDocFullName & "'." & vbCrLf & vbCrLf & notOk, vbExclamation & vbOKOnly, "Cannot convert document"
                        Exit Sub
                    ElseIf notOk Like "*404*" Then ' Modern site
                        'MsgBox "Document must be checked in to be converted '" & fromDocFullName & "'." & vbCrLf & vbCrLf & notOk, vbExclamation & vbOKOnly, "Cannot convert document"
                    Else
                        MsgBox "Converting '" & fromDocFullName & "' is not possible." & vbCrLf & vbCrLf & notOk, vbExclamation & vbOKOnly, "Cannot convert document"
                        Exit Sub
                    End If
  
                End If
            End If
        End If
        doc.Activate
        ConvertDocumentToBGDoc fromDocFullName, doc.fullName
        ActivateDocumentTab
    End If
End Sub

'Private Sub ConvertDocumentToBGDocFromDoc()
'    Dim language As String
'    Dim DX  As New DOCXML
'    DX.Init
'    language = DX.ReadText("/DocumentInfo/DocumentInfo-Language")
'    Set DX = Nothing
'    If language = "" Then
'        ConvertDocumentCommand
'    Else
'        If vbOK = MsgBox("The current document is not empty. Do you really want to replace the existing content?", vbOKCancel + vbCritical + vbApplicationModal, "Import Document") Then
'            ConvertDocumentCommand
'        End If
'    End If
'
'End Sub

Public Sub SetStartBookmark()
    If Not ActiveDocument.Bookmarks.exists("Start") Then
        Dim rng As Range
        Set rng = Selection.Range
        rng.Collapse wdCollapseEnd
        ActiveDocument.Bookmarks.Add "Start", rng
    End If
End Sub

Public Sub JumpToStartBookmark()
    If ActiveDocument.Bookmarks.exists("Start") Then
        Selection.GoTo What:=wdGoToBookmark, name:="Start"
        ActiveDocument.Bookmarks("Start").Delete
        ActiveWindow.ScrollIntoView Selection.Range, True
    End If
End Sub

Sub ButtonDocumentForm_Click(control As IRibbonControl)
    SetStartBookmark
    GetManager.GetBGDocFromDoc(ActiveDocument).Update "Form"
    JumpToStartBookmark
End Sub

Sub ButtonRefreshDocument_Click(control As IRibbonControl)
    SetStartBookmark
    GetManager.GetBGDocFromDoc(ActiveDocument).Update "Refresh"
    JumpToStartBookmark
End Sub

'Sub ButtonCloneDocument_Click(control As IRibbonControl)
'    MsgBox "Clone Document"
'End Sub

Sub ButtonInsertCalculatedField_Click(control As IRibbonControl)
    If Not IsLocked Then
        Dim frm As New InsertCalculatedField
        frm.show
    End If
End Sub

Sub ButtonPDFDraft_Click(control As IRibbonControl)
    Dim frm As frmCreatePDF

    If Not ActiveDocument.saved Then
        MsgBox "Can only create PDF for a saved document. Please save.", vbCritical + vbOKOnly, "Create PDF"
        Exit Sub
    End If
    Set frm = New frmCreatePDF
    frm.show
    Set frm = Nothing
End Sub

'Sub ButtonPDFDraft_Click(control As IRibbonControl)
'    Dim ok As Boolean
'    Dim fileName As String
'    Dim showPDF As Boolean
'    Dim Addin As Object
'    Dim NoAddIn As Boolean
'    Dim pdfFileName As String
'
'    Set Addin = GetAutomationObject
'    NoAddIn = (Addin Is Nothing)
'
'    showPDF = False
'
'    fileName = ActiveDocument.name
'    If InStr(fileName, ".") = 0 Then
'        fileName = fileName & ".pdf"
'    Else
'        fileName = Mid(fileName, 1, InStrRev(fileName, ".")) & "pdf"
'    End If
'
'    On Error Resume Next
'    MkDir UserTemp() & "\BGdoc"
'    MkDir UserTemp() & "\BGdoc\PDF"
'    On Error GoTo 0
'
'    If ActiveDocument.name = ActiveDocument.FullName Or GetManager.GetBGDocFromDoc(ActiveDocument).SaveAsTempFullName > "" Then ' TODO:Never call GetManager like this
'        pdfFileName = UserTemp() & "\BGdoc\PDF\Draft " & fileName
'        On Error Resume Next
'        ActiveDocument.ExportAsFixedFormat OutputFileName:= _
'            pdfFileName, ExportFormat:= _
'            wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
'            wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
'            Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
'            CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
'            BitmapMissingFonts:=True, UseISO19005_1:=False
'
'            showPDF = True
'
'        On Error GoTo 0
'    Else
'        Dim FileSaveAsSetting As String
'        FileSaveAsSetting = ActiveDocument.path
'
'        If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
'            FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
'        End If
'
'        Dim dlg As FileDialog
'        Set dlg = Application.FileDialog(msoFileDialogSaveAs)
'
'        With Application.FileDialog(msoFileDialogSaveAs)
'            .Title = "Save Copy as PDF"
'            .AllowMultiSelect = False
'            .ButtonName = "Save PDF"
'            .FilterIndex = 7
'            .InitialFileName = FileSaveAsSetting & fileName
'        End With
'        Dim choice As Integer
'        choice = Application.FileDialog(msoFileDialogSaveAs).show
'        If choice <> 0 Then
'            pdfFileName = FixPath(dlg.SelectedItems(1))
'            dlg.Title = ""
'            dlg.ButtonName = ""
'            dlg.FilterIndex = 1
'            Set dlg = Nothing
'            ok = (pdfFileName > "")
''            ok = (Len(GetFileName(pdfFilename)) = 0)
''            If Not ok Then
''                ok = (vbOK = MsgBox("Overwrite file? ", vbCritical + vbOKCancel, "Save Copy as PDF"))
''            End If
'
'            If ok Then
'                ActiveDocument.ExportAsFixedFormat OutputFileName:= _
'                    pdfFileName, ExportFormat:= _
'                    wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
'                    wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
'                    Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
'                    CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
'                    BitmapMissingFonts:=True, UseISO19005_1:=False
'
'                    showPDF = True
'
'                On Error GoTo 0
'            End If
'        Else
'            ok = (vbOK = MsgBox("Open temporary draft? ", vbCritical + vbOKCancel, "Save Copy as PDF"))
'            If ok Then
'                pdfFileName = UserTemp() & "\BGdoc\PDF\Draft " & fileName
'                On Error Resume Next
'                ActiveDocument.ExportAsFixedFormat OutputFileName:= _
'                    pdfFileName, ExportFormat:= _
'                    wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
'                    wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
'                    Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
'                    CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
'                    BitmapMissingFonts:=True, UseISO19005_1:=False
'
'                    showPDF = True
'
'                On Error GoTo 0
'            End If
'        End If
'
'    End If
'
'    If Not NoAddIn And showPDF Then
'        Dim DocType As String
'        Dim pdfLayout As String
'        Dim DX As docXML
'        Set DX = GetManager.GetDX
'        pdfLayout = DX.ReadText("/DocumentInfo/DocumentInfo-PDFLayout")
'
'        Addin.ModifyPDF pdfFileName, pdfLayout
'        Shell "explorer.exe """ & pdfFileName & """"
'    End If
'
'End Sub

'Sub ButtonTranslateDocument_Click(control As IRibbonControl)
'    ' MsgBox "Translate in Across"
'    Dim DX As New DOCXML
'    DX.Init
'
'    DX.LanguageUpdated = True
'    'DX.StructureUpdated = True
'    DX.FieldsUpdated = True
'    DX.WriteText "/DocumentInfo/DocumentInfo-FrontMatter", "Translate"
'    DX.UpdateDocument
'    Set DX = Nothing
'End Sub


Sub ButtonFigNumberPartList_Click(control As IRibbonControl)
    ' Obsolete
    MsgBox "Please call me on this one: Fig Number Part List"
    'CpFigRes.Main
    'Rewrite
End Sub

Sub ButtonChangePaperFormatA4Letter_Click(control As IRibbonControl)
    ' Obsolete
    MsgBox "ButtonChangePaperFormatA4Letter - Remove"
    'ChangePaperformatA4OrLetter
    'Rewrite
End Sub

Sub ButtonSetVisibleStyles_Click(control As IRibbonControl)
    ' Obsolete
    'MsgBox "ButtonSetVisibleStyles"
    SetVisibleStyles
End Sub

Sub ButtonComposeMasterFromFile_Click(control As IRibbonControl)
    'MsgBox "ButtonComposeMasterFromFile"
    'ComposeMasterFromFile.MAIN
    NewComposeMaster
    'Keep for now
End Sub

Sub ButtonFigureNumber_Click(control As IRibbonControl)
    FigureNumber
End Sub

Sub ButtonFigureItemList_Click(control As IRibbonControl)
    PosListTable
End Sub

Sub InsertTodaysDate()
    
    Dim updated As Boolean
    updated = True
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert Todays Date", False
        On Error GoTo UpdatedFalse
            Selection.Collapse wdCollapseEnd
            Selection.Text = Format(Now, "YYYY-MM-DD") & " "
            Selection.Collapse wdCollapseEnd
        On Error GoTo 0
ExitSub:
        dx.updated = updated
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
    
UpdatedFalse:
    updated = False
    Resume ExitSub
    
End Sub

Public Sub FigureNumber()
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert Figure Caption"
        dx.updated = InsertNumber(dx, "Figure")
        dx.Epilog
        Set dx = Nothing
    End If
End Sub

Public Sub TableNumber()
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert Table Caption"
        dx.updated = InsertNumber(dx, "Table")
        dx.Epilog
        Set dx = Nothing
    End If
End Sub

Sub ButtonTableNumber_Click(control As IRibbonControl)
    TableNumber
End Sub

Public Function InsertNumber(dx As docXML, tableOrFigure As String) As Boolean
    Dim CaptionHeading As String
    Dim FigureCaption As String
    Dim TableCaption As String
    Dim para As Paragraph
    Dim Path As String
    Dim aTag() As String
    Dim startPos As Long
    Dim endPos As Long
    Dim rngText As Range
    Dim search As String
    Dim no As Integer
    Dim i As Integer
    Dim j As Integer
    Dim rng As Range
    Dim again As Boolean
    Dim first As Boolean
    Dim fldSeq As field
    Dim rngFound As Range
    
    startPos = Selection.Range.start
    Dim cc As ContentControl
    
    CaptionHeading = dx.ReadText("/DocumentInfo/DocumentInfo-CaptionHeading")
    FigureCaption = dx.ReadText("/DocumentLabel/DocumentLabel-FigureCaption")
    TableCaption = dx.ReadText("/DocumentLabel/DocumentLabel-TableCaption")
    
    On Error Resume Next
    Selection.Paragraphs(1).Range.Select
    Selection.Collapse wdCollapseStart

    ActiveDocument.attachedTemplate.BuildingBlockEntries("zz" & tableOrFigure & "Caption").Insert where:=Selection.Range, RichText:=True
    If Err.Number <> 0 Then
    On Error GoTo 0
        MsgBox "Cannot insert caption here!", vbCritical + vbOKOnly, "Insert Caption Error"
        InsertNumber = False
        Exit Function
    End If
    On Error GoTo 0
    
    Set para = Selection.Paragraphs(Selection.Paragraphs.Count)
    Set cc = para.Range.ContentControls(1)
    
    aTag = Split(cc.tag, ":")
    Path = "/" & Split(aTag(0), "-")(0) & "/" & aTag(0)
    If Path = "/DocumentLabel/DocumentLabel-FigureCaption" Then
        cc.Range.Text = FigureCaption
    ElseIf Path = "/DocumentLabel/DocumentLabel-TableCaption" Then
        cc.Range.Text = TableCaption
    End If
    
    Dim fld As field
    Set fld = para.Range.fields(1)
    
    If CaptionHeading = "none" Then
        Dim rngFld As Range
        Set rngFld = fld.result.Duplicate
        fld.Delete
        rngFld.MoveEnd
        rngFld.Text = ""
    Else
        fld.code.Text = "STYLEREF """ & CaptionHeading & """ \n"
    End If
    
    para.Style = IIf(tableOrFigure = "Figure", ActiveDocument.Styles(WdBuiltinStyle.wdStyleCaption), ActiveDocument.Styles("CaptionTable"))
    para.Range.fields.Update
    
    dx.SetCaptions tableOrFigure
    InsertNumber = True

End Function

Sub ButtonInsertCaution_Click(control As IRibbonControl)
    InsertCaution
End Sub

Sub ButtonInsertNotice_Click(control As IRibbonControl)
    InsertNotice
End Sub

Sub ButtonInsertHint_Click(control As IRibbonControl)
    InsertHint
End Sub

Sub ButtonInsertWarning_Click(control As IRibbonControl)
    InsertWarning
End Sub

Sub InsertCaution()
    InsertBlock "Caution"
End Sub

Sub InsertNotice()
    InsertBlock "Notice"
End Sub

Sub InsertWarning()
    InsertBlock "Warning"
End Sub

Sub InsertHint()
    InsertBlock "Hint"
End Sub


Sub InsertBlock(block As String)
    Dim updated As Boolean
    updated = True
    
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert " & block
        
        On Error GoTo UpdatedFalse
        ActiveDocument.attachedTemplate.BuildingBlockEntries("zz" & block).Insert where:=Selection.Range, RichText:=True
        Selection.MoveUp Unit:=wdLine, Count:=3
        Selection.MoveRight Unit:=wdCell
        On Error GoTo 0
ExitSub:
        dx.updated = updated
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
    
UpdatedFalse:
    updated = False
    Resume ExitSub
End Sub


Sub ButtonInsertPictureFromMenu_Click(control As IRibbonControl)
    BGInsertPicture
End Sub

Sub ButtonInsertPictureWithFormatting_Click(control As IRibbonControl)
    BGInsertPictureWithFormatting
End Sub

Sub ButtonShowwdDialogFormatParagraphTabTextFlow_Click(control As IRibbonControl)
    ShowDialogFormatParagraphTabTextFlow
End Sub

Public Sub ShowDialogFormatParagraphTabTextFlow()
    On Error GoTo ExitSub
    With Application.Dialogs.Item(wdDialogFormatParagraph)
        .DefaultTab = wdDialogFormatParagraphTabTextFlow
        .show
    End With
ExitSub:
    On Error GoTo 0
    Exit Sub
    
End Sub

Sub ButtonKeepWithNext_Click(control As IRibbonControl)
    KeepWithNext
End Sub

Public Sub KeepWithNext()
    If Not IsLocked Then
        On Error GoTo ExitSub
        Application.Selection.ParagraphFormat.KeepWithNext = Not Application.Selection.ParagraphFormat.KeepWithNext
ExitSub:
        On Error GoTo 0
    End If
End Sub

Sub ButtonKeepLinesTogether_Click(control As IRibbonControl)
    KeepLinesTogether
End Sub

Public Sub KeepLinesTogether()
    If Not IsLocked Then
        On Error GoTo ExitSub
        Application.Selection.ParagraphFormat.KeepTogether = Not Application.Selection.ParagraphFormat.KeepTogether
ExitSub:
        On Error GoTo 0
    End If
End Sub

Sub ButtonPageBreakBefore_Click(control As IRibbonControl)
    PageBreakBefore
End Sub

Public Sub PageBreakBefore()
    If Not IsLocked Then
        On Error GoTo ExitSub
        Application.Selection.ParagraphFormat.PageBreakBefore = Not Application.Selection.ParagraphFormat.PageBreakBefore
ExitSub:
        On Error GoTo 0
    End If
End Sub

Sub ButtonNoRowSplit_Click(control As IRibbonControl)
    NoRowSplit
End Sub

Public Sub NoRowSplit()
    If Not IsLocked Then
        On Error GoTo ExitSub
        Application.Selection.rows.AllowBreakAcrossPages = Not Application.Selection.rows.AllowBreakAcrossPages
ExitSub:
        On Error GoTo 0
    End If
End Sub

Sub ButtonJustifyTable_Click(control As IRibbonControl)
    JustifyTable
End Sub

Public Sub JustifyTable()
    If Not IsLocked Then
        On Error GoTo ExitSub
            Dim sty As Style
            Set sty = ActiveDocument.Styles(wdStyleNormal)
            If sty.ParagraphFormat.LeftIndent > 63 Then
                If sty.ParagraphFormat.LeftIndent < 65 Then
                    With Application.Selection.Tables(1)
                        .TopPadding = Application.CentimetersToPoints(0)
                        .BottomPadding = Application.CentimetersToPoints(0)
                        .LeftPadding = Application.CentimetersToPoints(0.1)
                        .RightPadding = Application.CentimetersToPoints(0.1)
                        .Spacing = 0
                        .AllowPageBreaks = True
                        .AllowAutoFit = False
                        .rows.LeftIndent = Application.CentimetersToPoints(2.26)
                        .PreferredWidthType = WdPreferredWidthType.wdPreferredWidthPercent
                        .PreferredWidth = 86
                    End With
                Else
                    Selection.Tables(1).AutoFitBehavior (Word.WdAutoFitBehavior.wdAutoFitWindow)
                End If
            Else
                Selection.Tables(1).AutoFitBehavior (Word.WdAutoFitBehavior.wdAutoFitWindow)
            End If
ExitSub:
        On Error GoTo 0
    End If
End Sub

Sub ButtonPrintCurrentPage_Click(control As IRibbonControl)
    PrintCurrentPage
End Sub

Public Sub PrintCurrentPage()
    On Error GoTo ExitSub
    ActiveDocument.PrintOut background:=True, Append:=False, _
                           Range:=Word.WdPrintOutRange.wdPrintCurrentPage, _
                           Item:=Word.WdPrintOutItem.wdPrintDocumentContent, _
                           Copies:="1", Pages:="1", PageType:=Word.WdPrintOutPages.wdPrintAllPages, _
                           PrintToFile:=False, Collate:=True, ManualDuplexPrint:=False
ExitSub:
    On Error GoTo 0
    Exit Sub
End Sub

  
Public Sub PosListTable()
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert Parts List"
    
On Error GoTo Failed
        ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:= _
            4, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
            wdAutoFitFixed
        ActiveWindow.View.TableGridlines = Not ActiveWindow.View.TableGridlines
        Selection.Tables(1).Select
        SetStyle "PosListeTable", dx
        Selection.Tables(1).PreferredWidthType = wdPreferredWidthPoints
        Selection.Tables(1).PreferredWidth = CentimetersToPoints(14)
        Selection.Tables(1).rows.LeftIndent = CentimetersToPoints(2.26)
        Selection.rows.AllowBreakAcrossPages = False
        Selection.Borders(wdBorderTop).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderRight).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderVertical).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderDiagonalDown).LineStyle = wdLineStyleNone
        Selection.Borders(wdBorderDiagonalUp).LineStyle = wdLineStyleNone
        Selection.Tables(1).Select
        Selection.SelectColumn
        Selection.MoveLeft Unit:=wdCharacter, Count:=3, Extend:=wdExtend
        Selection.SelectColumn
        Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
        Selection.Columns.PreferredWidth = CentimetersToPoints(0.6)
        Selection.Move Unit:=wdColumn, Count:=1
        Selection.SelectColumn
        Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
        Selection.Columns.PreferredWidth = CentimetersToPoints(7)
        Selection.Move Unit:=wdColumn, Count:=1
        Selection.SelectColumn
        Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
        Selection.Columns.PreferredWidth = CentimetersToPoints(0.6)
        Selection.Move Unit:=wdColumn, Count:=1
        Selection.SelectColumn
        Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
        Selection.Columns.PreferredWidth = CentimetersToPoints(7)
        Selection.rows.AllowBreakAcrossPages = False
        Selection.Tables(1).Select
        With Selection.Tables(1)
            .TopPadding = CentimetersToPoints(0)
            .BottomPadding = CentimetersToPoints(0)
            .LeftPadding = CentimetersToPoints(0.1)
            .RightPadding = CentimetersToPoints(0.1)
            .Spacing = 0
            .AllowPageBreaks = True
            .AllowAutoFit = True
            Selection.MoveLeft Unit:=wdCharacter, Count:=1
            Selection.MoveRight Unit:=wdCell, Count:=1
            .Cell(1, 1).Range.Text = "1."
            .Cell(1, 3).Range.Text = "2."
        End With
        dx.updated = True
        
        
ExitFunction:
    
        On Error GoTo 0
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
Failed:
    dx.updated = False
    Resume ExitFunction
End Sub
        
        
Public Sub BGInsertNormalNum()
    InsertSequenceNumber "NormalNum", "NormalNum"
End Sub

Public Sub BGInsertSeqNum()
    InsertSequenceNumber "SeqNum", "NormalNum"
End Sub

Public Sub BGInsertSeqNum2()
    InsertSequenceNumber "SeqNum2", "NormalNum"
End Sub

Public Sub BGInsertSeqNum3()
    InsertSequenceNumber "SeqNum3", "NormalNum"
End Sub

Public Sub BGInsertSeqNum4()
    InsertSequenceNumber "SeqNum4", "NormalNum"
End Sub

Public Sub InsertSequenceNumber(styleName As String, seqName As String)
    If Not IsLocked Then
        Dim fld As field
        Dim oldStyle As String
        Dim rng As Range
        
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog styleName
        LeaveContentControl
        oldStyle = Selection.Paragraphs(1).Range.Style.NameLocal
        If (oldStyle Like "Seq*" Or oldStyle Like "NormalNum*") And Selection.Paragraphs(1).Range.fields.Count >= 1 Then
            SetStyle styleName, dx
            Set fld = Selection.Paragraphs(1).Range.fields(1)
            If styleName = "NormalNum" And oldStyle Like "Seq*" Then
                Set rng = fld.result
                rng.Collapse wdCollapseEnd
                rng.Delete wdCharacter, 1
                Set rng = Selection.Paragraphs(1).Range
                rng.Collapse wdCollapseStart
                rng.InsertBefore "."
            ElseIf oldStyle = "NormalNum" And styleName Like "Seq*" Then
                Set rng = fld.result
                rng.MoveEnd wdCharacter, 1
                rng.Collapse wdCollapseEnd
                rng.InsertAfter "."
                Set rng = Selection.Paragraphs(1).Range
                rng.Collapse wdCollapseStart
                rng.Delete wdCharacter, 1
            End If
        Else
            SetStyle styleName, dx
            Selection.Paragraphs(1).Range.Select
            Selection.Collapse wdCollapseStart
            LeaveContentControl
            If Not styleName Like "Seq*" Then Selection.TypeText "."
            Selection.Paragraphs(1).Range.Select
            Selection.Collapse wdCollapseStart
            Selection.Text = ""
            Selection.Collapse wdCollapseEnd
            If Not styleName Like "Seq*" Then Selection.Move wdCharacter, 1
            Set fld = Selection.fields.Add(Range:=Selection.Range, Type:=wdFieldSequence, Text:=seqName, PreserveFormatting:=False)
            fld.Select
            Selection.Collapse wdCollapseEnd
            If styleName Like "Seq*" Then Selection.TypeText "."
            Selection.TypeText Text:=vbTab
            Selection.Paragraphs(1).Range.Select
            Selection.MoveEnd wdCharacter, -1
            Selection.Collapse wdCollapseEnd
        End If
        dx.updated = True
        dx.Epilog
        Set dx = Nothing
    End If
End Sub

Public Sub BGResetNormalNum()
    Dim rng As Range
    Dim fld As field
    Dim updated As Boolean
    updated = True
    
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Reset NormalNum"
        
        Set rng = Selection.Paragraphs(1).Range
        If rng.fields.Count > 0 Then
            Set fld = rng.fields(1)
            If Trim(LCase(fld.code.Text)) Like "seq normalnum*" Then
                Dim strValue As String
                strValue = Replace(Replace(InputBox("Enter new start number:", "Reset numbering", "1"), ".", "x"), ",", "x")
                If IsNumeric(strValue) Then
                    If Abs(Int(strValue)) = strValue Then
                        fld.code.Text = "SEQ NormalNum " & "\r" & strValue & " \* MERGEFORMAT"
                        ActiveDocument.Range(rng.start, ActiveDocument.Range.End).fields.Update
                    Else
                        updated = False
                        MsgBox "Not a valid number", vbOKOnly, "Cannot Reset Number"
                    End If
                Else
                    updated = False
                    MsgBox "Not a valid number", vbOKOnly, "Cannot Reset Number"
                End If
            End If
        Else
            updated = False
            MsgBox "Insert a number field first", vbOKOnly, "Cannot Reset Number"
        End If
        
        dx.updated = updated
        dx.Epilog
        Set dx = Nothing
        
    End If
End Sub

Public Function NextImage(rng As Range) As Boolean
    Dim inl As InlineShape
    Dim shp As Shape
    Dim i As Integer
    
    If rng.End >= ActiveDocument.Content.End Then
        NextImage = False
        Exit Function
    End If
    
    rng.SetRange rng.End, ActiveDocument.Content.End
    If rng.InlineShapes.Count > 0 Then
        For i = 1 To rng.InlineShapes.Count
            Set inl = rng.InlineShapes(i)
            If InlineIsPictureOrObject(inl) Then
                Exit For
            End If
        Next
        If i > rng.InlineShapes.Count Then
            Set inl = Nothing
        End If
    End If
    If rng.ShapeRange.Count > 0 Then
        For i = 1 To rng.ShapeRange.Count
            Set shp = rng.ShapeRange(i)
            If ShapeIsPictureOrObject(shp) Then
                Exit For
            End If
        Next
        If i > rng.ShapeRange.Count Then
            Set shp = Nothing
        End If
    End If
    If inl Is Nothing And shp Is Nothing Then
        NextImage = False
    ElseIf Not inl Is Nothing Then
        If shp Is Nothing Then
            inl.Select
            ActiveWindow.ScrollIntoView inl
        Else
            If shp.Anchor.start < inl.Range.start Then
                shp.Select
                ActiveWindow.ScrollIntoView shp
            Else
                inl.Select
                ActiveWindow.ScrollIntoView inl
            End If
        End If
        NextImage = True
    Else
        shp.Select
        ActiveWindow.ScrollIntoView shp
            NextImage = True
    End If
End Function

Public Function PreviousImage(rng As Range) As Boolean
    Dim inl As InlineShape
    Dim shp As Shape
    Dim i As Integer
    
    If rng.start <= ActiveDocument.Content.start Then
        PreviousImage = False
        Exit Function
    End If
    
    rng.SetRange ActiveDocument.Content.start, rng.start
    If rng.InlineShapes.Count > 0 Then
        For i = rng.InlineShapes.Count To 1 Step -1
            Set inl = rng.InlineShapes(i)
            If InlineIsPictureOrObject(inl) Then
                Exit For
            End If
        Next
        If i = 0 Then
            Set inl = Nothing
        End If
    End If
    If rng.ShapeRange.Count > 0 Then
        For i = rng.ShapeRange.Count To 1 Step -1
            Set shp = rng.ShapeRange(i)
            If ShapeIsPictureOrObject(shp) Then
                Exit For
            End If
        Next
        If i = 0 Then
            Set shp = Nothing
        End If
    End If
    If inl Is Nothing And shp Is Nothing Then
        PreviousImage = False
    ElseIf Not inl Is Nothing Then
        If shp Is Nothing Then
            inl.Select
            ActiveWindow.ScrollIntoView inl
        Else
            If shp.Anchor.start > inl.Range.start Then
                shp.Select
                ActiveWindow.ScrollIntoView shp
            Else
                inl.Select
                ActiveWindow.ScrollIntoView inl
            End If
        End If
        PreviousImage = True
    Else
        shp.Select
        ActiveWindow.ScrollIntoView shp
        PreviousImage = True
    End If
End Function


Public Sub ButtonNextImage_Click(control As IRibbonControl)
    NextImage Selection.Range

End Sub

Public Sub ButtonFirstImage_Click(control As IRibbonControl)
    
    Selection.HomeKey Unit:=wdStory
    NextImage Selection.Range
End Sub

Public Sub ButtonLastImage_Click(control As IRibbonControl)
    
    Selection.EndKey Unit:=wdStory
    PreviousImage Selection.Range
   
End Sub

Public Sub ButtonPreviousImage_Click(control As IRibbonControl)
    PreviousImage Selection.Range

End Sub

Public Sub ButtonCheckPictures_Click(control As IRibbonControl)
    '!!!ActiveWindowHandle = GetActiveWindow
    System.Cursor = wdCursorWait
    DoEvents
    Dim frm As New PictureTool
    frm.show vbModal
End Sub

Public Sub ButtonRefreshPictureFromDisk_Click(control As IRibbonControl)
    RefreshPictureFromDisk
End Sub

Public Sub RefreshPictureFromDisk()
    If Not IsLocked Then
    
On Error GoTo Failed
        Dim dx As docXML
        Dim rng As Range
        Set rng = Selection.Range
        If rng.InlineShapes.Count + rng.ShapeRange.Count = 1 Then
            Set dx = GetManager.GetDX
            dx.Prolog "Refresh Picture From Disk"

            Dim inlSelect As InlineShape
            Dim shpSelect As Shape
            Dim idxSelect As Integer

            If rng.InlineShapes.Count = 1 Then
                Set inlSelect = rng.InlineShapes(1)
                If Not inlSelect.LinkFormat Is Nothing Then
                    inlSelect.LinkFormat.Update
                End If
            Else
                Set shpSelect = rng.ShapeRange(1)
                If Not shpSelect.LinkFormat Is Nothing Then
                    shpSelect.LinkFormat.Update
                End If
            End If

            dx.updated = True
        Else
            MsgBox ("Select a single picture")
            Exit Sub
        End If
ExitSub:
        On Error GoTo 0
        If Not dx Is Nothing Then
            dx.Epilog
            Set dx = Nothing
        End If
    End If
    
    Exit Sub
Failed:
    If Not dx Is Nothing Then dx.updated = False
    Resume ExitSub
End Sub
            
Public Sub ButtonH1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading1
End Sub

Public Sub ButtonH2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading2
End Sub

Public Sub ButtonH3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading3
End Sub

Public Sub ButtonH4_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading4
End Sub

Public Sub ButtonH5_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading5
End Sub

Public Sub ButtonH6_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading6
End Sub

Public Sub ButtonH7_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading7
End Sub

Public Sub ButtonH8_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleHeading8
End Sub

Public Sub ButtonH9_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "ParmHead"
End Sub

Sub ButtonNormal_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle wdStyleNormal
End Sub

Sub ButtonNormalNum_Click(control As IRibbonControl)
    BGInsertNormalNum
End Sub

Sub ButtonResetNum_Click(control As IRibbonControl)
    BGResetNormalNum
End Sub

Sub ButtonBullet1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "BulletList"
End Sub

Sub ButtonBullet2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "BulletList 2"
End Sub

Sub ButtonBullet3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "BulletList 3"
End Sub

Sub ButtonNumList1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "NumList"
End Sub

Sub ButtonNumList2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "NumList 2"
End Sub

Sub ButtonNumList3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "NumList 3"
End Sub

Sub ButtonNumListA_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "NumListAlpha"
End Sub

Sub ButtonSeqNum1_Click(control As IRibbonControl)
    BGInsertSeqNum
End Sub

Sub ButtonSeqNum2_Click(control As IRibbonControl)
    BGInsertSeqNum2
End Sub

Sub ButtonSeqNum3_Click(control As IRibbonControl)
    BGInsertSeqNum3
End Sub

Sub ButtonSeqNum4_Click(control As IRibbonControl)
    BGInsertSeqNum4
End Sub

Sub ButtonSeqNumR_Click(control As IRibbonControl)
    BGResetNormalNum
End Sub

Sub ButtonIndent1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Indent"
End Sub

Sub ButtonIndent2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Indent 2"
End Sub

Sub ButtonIndent3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Indent 3"
End Sub

Sub ButtonHangingIndent1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent"
End Sub

Sub ButtonHangingIndent2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent 2"
End Sub

Sub ButtonHangingIndent3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent 3"
End Sub

Sub ButtonHangingIndentI1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent i1"
End Sub

Sub ButtonHangingIndentI2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent i2"
End Sub

Sub ButtonHangingIndentI3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent i3"
End Sub

Sub ButtonHangingIndentII1_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent ii1"
End Sub

Sub ButtonHangingIndentII2_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent ii2"
End Sub

Sub ButtonHangingIndentII3_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent ii3"
End Sub

Sub ButtonHangingIndentNo_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Hanging Indent No."
End Sub

Sub ButtonTableNormalHeader_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header"
End Sub

Sub ButtonTableNormalHeaderCenter_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header Center"
End Sub

Sub ButtonTableNormalHeaderRight_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header Right"
End Sub

Sub ButtonTableNormalText_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Text"
End Sub

Sub ButtonTableNormalTextCenter_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Text center"
End Sub

Sub ButtonTableNormalTextRight_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Text right"
End Sub

Sub ButtonTableNormalBulletList_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "TableBulletList"
End Sub

Sub ButtonTableNormalNumList_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "TableNumList"
End Sub

Sub ButtonTableNormalIndent_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Indent"
End Sub

Sub ButtonTableSmallHeader_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header Small"
End Sub

Sub ButtonTableSmallHeaderCenter_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header Small C"
End Sub

Sub ButtonTableSmallHeaderRight_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Header Small R"
End Sub

Sub ButtonTableSmallText_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Small"
End Sub

Sub ButtonTableSmallTextCenter_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Small Center"
End Sub

Sub ButtonTableSmallTextRight_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Small Right"
End Sub

Sub ButtonTableSmallBulletList_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "TableBulletListSmall"
End Sub

Sub ButtonTableSmallNumList_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "TableNumListSmall"
End Sub

Sub ButtonTableSmallIndent_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Table Indent Small"
End Sub

Sub ButtonBold_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "NormalBold"
End Sub

Sub ButtonBGDocQuickGuide_Click(control As IRibbonControl)
    Dim myShell As Object
    Set myShell = CreateObject("WScript.Shell")
    myShell.run "http://extranet.crisplant.com/site/SoftwareProducts/Shared%20Documents/Documentation/BGdoc%20Template/BGdoc_QuickGuide_EN.pdf"
End Sub

Sub ButtonBGdocUserGuide_Click(control As IRibbonControl)
    Dim myShell As Object
    Set myShell = CreateObject("WScript.Shell")
    myShell.run "http://extranet.crisplant.com/site/SoftwareProducts/Shared%20Documents/Documentation/BGdoc%20Template/BGdoc_UserGuide_EN.pdf"
End Sub

Sub ButtonInsertPictureFrame_Click(control As IRibbonControl)
    If Not IsLocked Then SetStyle "Figur"
End Sub

Sub ButtonUpdateStyles_Click(control As IRibbonControl)
    If Not ActiveDocument.ReadOnly Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Reload Template Styles"
        dx.updated = dx.ReloadTemplateStyles
        dx.Epilog
        Set dx = Nothing
    End If
End Sub

Sub ButtonInsertDate_Click(control As IRibbonControl)
    Dim updated As Boolean
    updated = True
    
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        dx.Prolog "Insert Date"
        On Error GoTo UpdatedFalse
        LeaveContentControl
        Dim cc As ContentControl
        Set cc = Selection.Range.ContentControls.Add(wdContentControlDate)
        cc.DateDisplayFormat = "yyyy-MM-dd"
        cc.SetPlaceholderText , , " Enter a Date "
        
        On Error GoTo 0
ExitSub:
        dx.updated = updated
        dx.Epilog
        Set dx = Nothing
    End If
    
    Exit Sub
    
UpdatedFalse:
    updated = False
    Resume ExitSub

End Sub

Sub KeepSiegling()
'
' KeepSiegling Macro
' Macroen fjerner alle linjer m|fffd|rket med [VAR270] (Ammeraal belts)
'
    If Not ActiveDocument.ReadOnly Then
        Selection.HomeKey Unit:=wdStory
        Selection.find.ClearFormatting
        With Selection.find
            .Text = "[VAR270]"
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = False
            .MatchWholeWord = False
            .MatchByte = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        Selection.find.Execute
        While Selection.find.found
        Selection.SelectRow
        Selection.rows.Delete
            Selection.find.Execute
        Wend
        
        Selection.HomeKey Unit:=wdStory
        Selection.find.ClearFormatting
        Selection.find.Replacement.ClearFormatting
        With Selection.find
            .Text = "[VAR0]"
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = False
            .MatchWholeWord = False
            .MatchByte = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        Selection.find.Execute Replace:=wdReplaceAll
    End If
End Sub
Sub KeepAmmeraal()
'
' KeepAmmeraal Macro
' Macroen fjerner alle linjer m|fffd|rket med [VAR270] (Ammeraal belts)
'
    If Not ActiveDocument.ReadOnly Then
        Selection.HomeKey Unit:=wdStory
        Selection.find.ClearFormatting
        With Selection.find
            .Text = "[VAR0]"
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = False
            .MatchWholeWord = False
            .MatchByte = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        Selection.find.Execute
        While Selection.find.found
        Selection.SelectRow
        Selection.rows.Delete
            Selection.find.Execute
        Wend
        
        
        Selection.HomeKey Unit:=wdStory
        Selection.find.ClearFormatting
        Selection.find.Replacement.ClearFormatting
        With Selection.find
            .Text = "[VAR270]"
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .Format = False
            .MatchCase = False
            .MatchWholeWord = False
            .MatchByte = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
        End With
        Selection.find.Execute Replace:=wdReplaceAll
    End If
End Sub

Sub ButtonKeepAmmeraal_Click(control As IRibbonControl)
    If Not IsLocked Then KeepAmmeraal
End Sub

Sub ButtonKeepSiegling_Click(control As IRibbonControl)
    If Not IsLocked Then KeepSiegling
End Sub

Sub ButtonFullUpdate_Click(control As IRibbonControl)
    'Obsolete
    'GetManager.GetBGDocFromDoc(ActiveDocument).Update "Full"
End Sub

Public Sub CompareWithConversionBase(frm As MainForm)
    frm.DoCancel
    Dim fullName As String
    Dim OldDoc As Document
    
    Dim dx As docXML
    Set dx = GetManager.GetDX
    Dim oNode As CustomXMLNode
    Set oNode = dx.ReadNode("/DocumentInfo/Conversion/Conversion-FromDoc")
    'ConversionFrom - Deleted
    'If oNode Is Nothing Then Set oNode = DX.ReadNode("/DocumentInfo/Conversion/Conversion-FromDoc")
    If Not oNode Is Nothing Then
        fullName = FixPath(oNode.Text)
        On Error Resume Next
        Set OldDoc = Application.Documents.Open(fullName, , False, False)
        On Error GoTo 0
        If Not OldDoc Is Nothing Then
            OldDoc.Activate
            ActiveWindow.ActivePane.View.Zoom.PageFit = wdPageFitFullPage
            Selection.HomeKey Unit:=wdStory
            dx.ThisDoc.Activate
            ActiveWindow.ActivePane.View.Zoom.PageFit = wdPageFitFullPage
            Selection.HomeKey Unit:=wdStory
            DoEvents
            dx.ThisDoc.Activate
            Selection.HomeKey Unit:=wdStory
            DoEvents
            If OldDoc.CompatibilityMode < WdCompatibilityMode.wdWord2013 Then
                OldDoc.Convert
                OldDoc.saved = True
                MsgBox "Old document was in Compatibility Mode. Updated to current format. Do not save the old version since it may have lost some information.", vbOKOnly + vbExclamation, "Compare with old version"
            End If
            ' OldDoc.Convert
            dx.ThisDoc.windows.CompareSideBySideWith OldDoc
            dx.ThisDoc.windows.ResetPositionsSideBySide
            dx.ThisDoc.windows.SyncScrollingSideBySide = False
        End If
    End If
    Set dx = Nothing
End Sub

Attribute VB_Name = "bg_Convert"
Option Explicit

Public Sub ConvertDocumentToBGDoc(fromFullName As Variant, toFullName As Variant)
    '!!!LogDebug fromFullName & ", " & toFullName, "ConvertDocumentToBGDoc"
    Dim bdoc As BGDoc
    
    Set bdoc = GetManager.NewBGDoc(ActiveDocument, dsNoAutoNew)
'    Application.Documents(toFullName).ActiveWindow.visible = True

'    If GetManager.GetBGDocFromFullName(CStr(toFullName)) Is Nothing Then
'        Set bdoc = GetManager.NewBGDoc(Application.Documents(CStr(toFullName)), dsAutoOpen)
'    Else
'        Set bdoc = GetManager.GetBGDocFromFullName(CStr(toFullName))
'    End If
    bdoc.ConvertToBGDoc CStr(fromFullName)
    ActivateDocumentTab
End Sub

Public Function BatchConvertDocumentToBGDoc(fromFullName As Variant, toFullName As Variant, workflowLabel As Variant, image As Variant, projectNo As Variant, docTo As Word.Document) As String
    GetManager.GetBGDocFromDoc(docTo).BatchConvertToBGDoc CStr(fromFullName), CStr(toFullName), workflowLabel, image, projectNo
End Function

Public Function UsesOldDocumentationTemplate(Template As String, altTemplate As String) As Boolean
    Dim templates() As Variant
    Template = LCase(Template)
    altTemplate = LCase(altTemplate)
    Dim found As Boolean
    found = False
    Dim i As Integer
    
    
    templates = Array("cpdoc1_0.dot", "cpdoc2_0.dot", "cpdoc2000.dot", "cpdoc2003.dot", "cpdoc2010.dotm", _
                                               "cpir2002.dot", "cpmap2000.dot", "cpmap2003.dot", "fki_chronopost_w2000.dot", _
                                               "fki_sd_11038.dot", "fki_solystic_w2000.dot", "fki_spia_doc2003.dot", "fki_spia_doc2003_zh.dot", "fkidoc2003.dot", _
                                               "fkiirdoc2000.dot", "fkiirdoc2003.dot", "mechanica_2003.dot", "mod|fffd|leword.dot", "motion06_2003.dot", _
                                               "t_aena_doc2003.dot", "t_changi_doc2003.dot", "t_cp-doha_2003.dot", "t_fki-doha_2003.dot", "vi_fki_cdg1.dot", "wcldocustyle.dot")
        
    For i = 1 To UBound(templates)
        If Template = templates(i) Then
            found = True
            Exit For
        End If
    Next
    If Not found Then
        For i = 1 To UBound(templates)
            If altTemplate = templates(i) Then
                found = True
                Exit For
            End If
        Next
    End If
    UsesOldDocumentationTemplate = found
End Function

Public Function ReadCaptionTOCTOFTOT(doc As Document, dx As docXML) As Boolean
    Dim showFrontMatter As Boolean
    Dim rng As Range
    Dim tocs As TablesOfContents
    Dim toc As TableOfContents
    Dim tofs As TablesOfFigures
    Dim tof As TableOfFigures
    Dim hs As HeadingStyle
    dx.WriteText "/DocumentInfo/DocumentInfo-TOC", ""
    dx.WriteText "/DocumentInfo/DocumentInfo-TOF", ""
    dx.WriteText "/DocumentInfo/DocumentInfo-TOT", ""
    
    Set tocs = doc.TablesOfContents
    
    'Xebug.Print "TOCS"
    If tocs.Count > 0 Then
        showFrontMatter = True
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC", "Standard"
        Set toc = tocs(1)
        Set rng = toc.Range
        'Xebug.Print rng.fields(1).code
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC", "Standard"
        If dx.docType = "O & M Spare Parts Catalogue" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-TOC-HeadingLevels", "1"
        Else
            dx.WriteText "/DocumentInfo/DocumentInfo-TOC-HeadingLevels", toc.LowerHeadingLevel
        End If
        dx.WriteText "/DocumentInfo/DocumentInfo-TOC-Headings", IIf(toc.HeadingStyles.Count > 0, "Include Parm Head", "")
    End If
   
    'Xebug.Print "TOFS"
    Set tofs = doc.TablesOfFigures
    For Each tof In tofs
        showFrontMatter = True
        Set rng = tof.Range
        'Xebug.Print rng.fields(1).code
        If LCase(tof.caption) = "figure" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-TOF", "Standard"
        ElseIf LCase(tof.caption) = "table" Then
            dx.WriteText "/DocumentInfo/DocumentInfo-TOT", "Standard"
        ElseIf LCase(tof.HeadingStyles(1)) = "caption" Then
                dx.WriteText "/DocumentInfo/DocumentInfo-TOF", "Standard"
        ElseIf LCase(tof.HeadingStyles(1)) = "captiontable" Then
                dx.WriteText "/DocumentInfo/DocumentInfo-TOT", "Standard"
        End If
    Next
    
    'Fields
    dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", "none"
    Dim fld As field
    Dim foundTableOrFigure As Boolean
    foundTableOrFigure = False
    For Each fld In doc.fields
        If fld.Type = wdFieldStyleRef Then
            'Xebug.Print fld.code
            If LCase(fld.code) Like "*""1""*" Or LCase(fld.code) Like "* 1 *" Or LCase(fld.code) Like "*heading 1*" Then
                dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", "1"
                Exit For
            End If
            If LCase(fld.code) Like "*""2""*" Or LCase(fld.code) Like "* 2 *" Or LCase(fld.code) Like "*heading 2*" Then
                dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", "2"
                Exit For
            End If
            If LCase(fld.code) Like "*""3""*" Or LCase(fld.code) Like "* 3 *" Or LCase(fld.code) Like "*heading 3*" Then
                dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", "3"
                Exit For
            End If
        ElseIf fld.Type = wdFieldSequence Then
            If LCase(fld.code.Text) Like "*table*" Or LCase(fld.code.Text) Like "*figure*" Then
                foundTableOrFigure = True
            End If
        End If
    Next
    If dx.ReadText("/DocumentInfo/DocumentInfo-CaptionHeading") = "none" And Not foundTableOrFigure Then
        dx.WriteText "/DocumentInfo/DocumentInfo-CaptionHeading", "1"
    End If
    ReadCaptionTOCTOFTOT = showFrontMatter
End Function

Public Sub ReadFrontPage(doc As Document, file As CPDocFile)
    Dim rngFP As Word.Range
    Dim rngCP As Word.Range
    Dim aValue() As String
    Dim rngData As Word.Range
    Dim value As String
    
    If doc.Bookmarks.exists("FPTitlePosition") Or doc.Bookmarks.exists("FPTitlePos") Then
        file.Frontpage = True
        Set rngFP = Nothing
        If doc.Bookmarks.exists("FPTitlePosition") Then
            Set rngFP = doc.Bookmarks("FPTitlePosition").Range
        Else
            Set rngFP = doc.Bookmarks("FPTitlePos").Range
        End If
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine1 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine2 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine3 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine4 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine5 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))
        rngFP.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngFP.Expand (WdUnits.wdParagraph)
        file.FPLine6 = Trim(Replace(Replace(rngFP.Text, vbCr, ""), vbTab, ""))

        If file.FPLine4 = "" Then
            If LCase(file.FPLine3) = LCase(file.HFLine4) Then
                file.FPLine4 = file.FPLine3
                file.FPLine3 = ""
            End If
        End If
        If file.FPLine3 = "" Then
            If LCase(file.FPLine2) = LCase(file.HFLine3) Then
                file.FPLine3 = file.FPLine2
                file.FPLine2 = ""
            End If
        End If
        If file.FPLine2 = "" Then
            If LCase(file.FPLine1) = LCase(file.HFLine2) Then
                file.FPLine2 = file.FPLine1
                file.FPLine1 = ""
            End If
        End If
    End If

    If doc.Bookmarks.exists("CCrisplantText") Then
        Set rngCP = doc.Bookmarks("CCrisplantText").Range
        rngCP.Expand (WdUnits.wdParagraph)
        file.FPCopyright = Trim(Replace(Replace(rngCP.Text, vbCr, ""), vbTab, ""))
    End If
    If doc.Bookmarks.exists("FPCopyrightText") Then
        Set rngCP = doc.Bookmarks("FPCopyrightText").Range
        rngCP.Expand (WdUnits.wdParagraph)
        file.FPDisclaimer = Trim(Replace(Replace(Replace(Replace(rngCP.Text, vbCr, ""), vbTab, ""), vbLf, ""), Chr(7), ""))
    End If
    If doc.Bookmarks.exists("FPDocDataPos") Then
        Set rngData = doc.Bookmarks("FPDocDataPos").Range

        rngData.Expand (WdUnits.wdParagraph)
        value = Trim(rngData.Text)
        If value = vbCr Then
            rngData.Collapse (WdCollapseDirection.wdCollapseEnd)
            rngData.Expand (WdUnits.wdParagraph)
            value = Trim(rngData.Text)
        End If
        If Not value = vbCr And value > "" Then
            If rngData.fields.Count = 1 Then
                file.FPJournal = rngData.fields(1).result.Text
                aValue = Split(value, vbTab)
                file.FPJournalExtra = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
                If Len(file.FPJournalExtra) > Len(file.FPJournal) Then
                    file.FPJournalExtra = Trim(Mid(file.FPJournalExtra, Len(file.FPJournal) + 1))
                Else
                    file.FPJournalExtra = ""
                End If
            Else
                aValue = Split(value, vbTab)
                file.FPJournal = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
            End If
        End If
        rngData.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngData.Expand (WdUnits.wdParagraph)
        value = Trim(rngData.Text)
        If value > "" Then
            aValue = Split(value, vbTab)
            file.FPDateCP = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
            file.FPDate = GetDateFromCrisplantDate(file.FPDateCP, Format(Now, "YYYY-MM-DD"))
        End If
        rngData.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngData.Expand (WdUnits.wdParagraph)
        value = Trim(rngData.Text)
        If value > "" Then
            aValue = Split(value, vbTab)
            file.FPRevision = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
        End If
        rngData.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngData.Expand (WdUnits.wdParagraph)
        value = Trim(rngData.Text)
        If value > "" Then
            aValue = Split(value, vbTab)
            file.FPPages = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
        End If
        rngData.Collapse (WdCollapseDirection.wdCollapseEnd)
        rngData.Expand (WdUnits.wdParagraph)
        value = Trim(rngData.Text)
        If value > "" Then
            aValue = Split(value, vbTab)
            file.FPInitials = Trim(Replace(aValue(UBound(aValue)), vbCr, ""))
        End If
    End If

End Sub

Public Sub ReadLanguageFromDocument(doc As Document, file As CPDocFile)
    Dim i As Integer
    Randomize
    
    file.Pages = doc.ComputeStatistics(WdStatistic.wdStatisticPages)
    file.Paragraphs = doc.ComputeStatistics(WdStatistic.wdStatisticParagraphs)
    If file.Paragraphs > 0 Then
        Dim LanguageCodes As New Collection
        Dim LCIDs As New Collection
        Dim lookups As Integer
        lookups = file.Pages * 5
        If lookups > 50 Then lookups = 50
        For i = 1 To lookups
            Dim pNo As Integer
            pNo = CInt(Int((file.Paragraphs - 1 + 1) * Rnd())) + 1
            Dim para As Word.Paragraph
            Set para = doc.Paragraphs(pNo)
            Dim langId As String
            langId = CStr(para.Range.LanguageId)
            If Not Contains(LanguageCodes, langId) Then
                LanguageCodes.Add 1, langId
                LCIDs.Add langId
            Else
                Dim c As Integer
                c = LanguageCodes(langId)
                LanguageCodes.Remove langId
                LanguageCodes.Add c + 1, langId
            End If
        Next
        Dim max As Integer
        Dim maxKey As String
        Dim key As Variant
        maxKey = "0"
        For Each key In LCIDs
            If key <> "9999999" And LanguageCodes(key) > max Then
                maxKey = key
                max = LanguageCodes(key)
            End If
        Next
        If maxKey = "0" Then
            maxKey = "2057"
        End If
        file.LanguageId = CInt(maxKey)
        If file.LanguageId = 1033 Then file.LanguageId = 2057
        file.LanguageFromPara = UCase(GetLanguageCode2CharFromLCID(maxKey))
    Else
        file.LanguageId = 2057
        file.LanguageFromPara = "EN"
    End If
End Sub

Public Sub GetVariablesFromDocumentCPdoc1_0(ByRef Head1, ByRef Head2, ByRef Head3, ByRef Head4, ByRef DateText, ByRef IniText, ByRef Section, ByRef Copyright)
    Dim Line As Integer
    Dim lines As Integer
    Dim para As Paragraph
    Dim aText() As String
    
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    lines = Selection.Paragraphs.Count
    For Line = 1 To lines
        Set para = Selection.Paragraphs(Line)
        aText = Split(Replace(para.Range.Text, vbCr, ""), vbTab)
        Select Case Line
            Case 1
                If UBound(aText) = 2 Then
                    Head1 = aText(1)
                    DateText = aText(2)
                End If
            Case 2
                If UBound(aText) = 1 Then
                    Head2 = aText(1)
                End If
            Case 3
                If UBound(aText) = 2 Then
                    If Head2 = "" Then
                        Head2 = aText(1)
                    End If
                    Section = aText(2)
                    Dim aSection() As String
                    aSection = Split(Section, " ", 2)
                    If UBound(aSection) = 1 Then
                        Section = aSection(1)
                    End If
                End If
            
            Case 4
                If UBound(aText) = 1 Then
                    Head3 = aText(1)
                End If
            
            Case 5
                If UBound(aText) = 2 Then
                    Head4 = aText(1)
                End If
        End Select
    Next
    
End Sub


Public Sub GetVariablesFromDocument(ByRef Head1, ByRef Head2, ByRef Head3, ByRef Head4, ByRef DateText, ByRef IniText, ByRef Section, ByRef Copyright)
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If Not ActiveWindow.ActivePane.View.Type = wdPrintView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    If LCase(ActiveDocument.attachedTemplate.name) = LCase("CPDOC1_0.DOT") Or LCase(ActiveDocument.BuiltInDocumentProperties("Template")) = LCase("CPDOC1_0.DOT") Then
        GetVariablesFromDocumentCPdoc1_0 Head1, Head2, Head3, Head4, DateText, IniText, Section, Copyright
        Exit Sub
    End If
    On Error Resume Next
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    On Error GoTo 0
    Head1 = Selection.Text
    If Asc(Head1) = 13 Then
        Head1 = ""
    Else
        Selection.MoveRight Unit:=wdCharacter, Count:=1
    End If
'
    Selection.MoveDown Unit:=wdLine, Count:=1
    Selection.HomeKey Unit:=wdLine, Extend:=wdExtend
    Head2 = Selection.Text
    If Not Head2 = "" Then
        If Asc(Head2) = 13 Or Head2 = "|fffd|" Then
            Head2 = ""
        End If
    End If
    
    ' New Method
    On Error GoTo SkipHF
    Dim line1 As String
    line1 = ""
    Dim line2 As String
    line2 = ""
    Selection.WholeStory
    line1 = Selection.Paragraphs(1).Range.Text
    If Not line1 = "" Then
        If Asc(line1) = 13 Or line1 = "|fffd|" Then
            line1 = ""
        Else
            line1 = Left(line1, Len(line1) - 1)
        End If
    End If

    line2 = Selection.Paragraphs(2).Range.Text
    If Not line2 = "" Then
        If Asc(line2) = 13 Or line2 = "|fffd|" Then
            line2 = ""
        Else
            line2 = Left(line2, Len(line2) - 1)
        End If
    End If
    If Len(line1) > Len(Head1) Then
        Head1 = line1
    End If
    If Len(line2) > Len(Head2) Then
        Head2 = line2
    End If
SkipHF:
    On Error GoTo 0
    
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    DoEvents
    '!!!Sleep 1
    DoEvents
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    Copyright = Selection.Text
    Selection.HomeKey Unit:=wdLine
    Selection.MoveDown Unit:=wdLine, Count:=1

'
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    Dim Footer1 As String
    Footer1 = Selection.Text
    Dim aFooter1() As String
    aFooter1 = Split(Footer1, vbTab)
    If UBound(aFooter1) = 2 Then
        DateText = aFooter1(0)
        Head3 = aFooter1(1)
        Section = aFooter1(2)
    End If
    
    Selection.MoveLeft Unit:=wdCharacter, Count:=1
    Selection.MoveDown Unit:=wdLine, Count:=1
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    
    Dim Footer2 As String
    Footer2 = Selection.Text
    Dim aFooter2() As String
    aFooter2 = Split(Footer2, vbTab)
    If UBound(aFooter2) = 2 Then
        IniText = aFooter2(0)
        Head4 = aFooter2(1)
    ElseIf UBound(aFooter2) = 3 Then
        IniText = aFooter2(0)
        Head4 = aFooter2(1)
        Section = aFooter2(2)
    End If
    
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If Not ActiveWindow.ActivePane.View.Type = wdPrintView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If

End Sub

Sub DeleteSectionBreaks()
    Selection.find.ClearFormatting
    Selection.find.Replacement.ClearFormatting
     With Selection.find
        .Text = "^b"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchByte = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = False
        .MatchFuzzy = False
    End With
    Selection.find.Execute Replace:=wdReplaceAll
 End Sub

'Public Sub ConvertDocumentCommand()
'    Dim Doc As Document
'    Set Doc = ActiveDocument
'
'    Dim DX As New DOCXML
'    DX.Init Doc
'
'    Dim bgDocFullName As String
'    Dim testDocumentFullName As String
'    testDocumentFullName = ""
'
'    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\Testrapport_BGdoc_20160916_1.doc"
'    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\A1_UK2_0.doc"
'    bgDocFullName = ActiveDocument.AttachedTemplate.FullName ' "D:\_DocumentationDemo 2015-09-23\BGdoc.dotm"
'
'    If testDocumentFullName > "" Then
'        Dim docFrom As Document
'        On Error Resume Next
'        Set docFrom = Application.Documents(testDocumentFullName)
'        On Error GoTo 0
'        If docFrom Is Nothing Then
'            Set docFrom = Application.Documents.Open(testDocumentFullName, False, True, False, , , , , , , , True)
'        End If
'        Doc.Activate
'        Set DX.FromDoc = docFrom
'        Set TimerForm = New Update
'        TimerForm.Init DX, "ConvertDocument"
'        TimerForm.show vbModeless
'    Else
'        Set TimerForm = New Update
'        TimerForm.Init DX, "ConvertDocument"
'        TimerForm.show vbModeless
'    End If
'
''    Doc.Activate
''    Set frm = New MainForm
''    frm.Show
'
'End Sub


Public Sub ConvertWPSDumpFontLine(para As Paragraph)
    Dim str As String
    Dim rng As Range
    Dim ch As String
    Dim val As Long
    Dim newVal As Long
    Dim strOut As String
    Set rng = para.Range.Duplicate
    rng.End = rng.End - 1
    
    Dim i As Long
    Dim length As Long
    str = rng.Text
    For i = 1 To Len(str)
        ch = Mid(str, i, 1)
        val = AscW(ch) And &HFFFF&
        If val > 255 Then
            newVal = 32 'Xebug.Print val
        Else
            newVal = Conv437Unicode(val)
        End If
        strOut = strOut & ChrW(newVal)
    Next
    rng.Text = strOut
End Sub

Public Sub GConvertWPSDumpFont()
    Dim doc As Document
    Dim para As Paragraph
    Dim rng As Range
    Dim lineNo As Long
    Dim str As String
    Conv437Unicode = Array( _

 &H7F, &HC7, &HFC, &HE9, &HE2, &HE4, &HE0, &HE5, &HE7, &HEA, &HEB, &HE8, &HEF, &HEE, &HEC, &HC4, &HC5, &HC9, &HE6, &HC6, &HF4, &HF6, &HF2, &HFB, &HF9, &HFF, &HD6, &HDC, &HA2, &HA3, &HA5, &H20A7, &H192, &HE1, &HED, &HF3, &HFA, &HF1, &HD1, &HAA, &HBA, &HBF, &H2310, &HAC, &HBD, &HBC, &HA1, &HAB, &HBB, &H2591, &H2592, &H2593, &H2502, &H2524, &H2561, &H2562, &H2556, &H2555, &H2563, &H2551, &H2557, &H255D, &H255C, &H255B, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &H255E, &H255F, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &H2567, &H2568, &H2564, &H2565, &H2559, &H2558, &H2552, &H2553, &H256B, &H256A, &H2518, &H250C, &H2588, &H2584, &H258C, &H2590, &H2580, &H3B1, &HDF, &H393, &H3C0, &H3A3, &H3C3, &HB5, &H3C4, &H3A6, &H398, &H3A9, &H3B4, &H221E, &H3C6, &H3B5, &H2229, &H2261, &HB1, &H2265, &H2264, &H2320, &H2321, &HF7, &H2248, &HB0, &H2219, &HB7, &H221A, &H207F, &HB2, _
 &H25A0, &HA0)
 
    Conv850Unicode = Array( _
 &H0, &H1, &H2, &H3, &H4, &H5, &H6, &H7, &H8, &H9, &HA, &HB, &HC, &HD, &HE, &HF, &H10, &H11, &H12, &H13, &H14, &H15, &H16, &H17, &H18, &H19, &H1A, &H1B, &H1C, &H1D, &H1E, &H1F, &H20, &H21, &H22, &H23, &H24, &H25, &H26, &H27, &H28, &H29, &H2A, &H2B, &H2C, &H2D, &H2E, &H2F, &H30, &H31, &H32, &H33, &H34, &H35, &H36, &H37, &H38, &H39, &H3A, &H3B, &H3C, &H3D, &H3E, &H3F, &H40, &H41, &H42, &H43, &H44, &H45, &H46, &H47, &H48, &H49, &H4A, &H4B, &H4C, &H4D, &H4E, &H4F, &H50, &H51, &H52, &H53, &H54, &H55, &H56, &H57, &H58, &H59, &H5A, &H5B, &H5C, &H5D, &H5E, &H5F, &H60, &H61, &H62, &H63, &H64, &H65, &H66, &H67, &H68, &H69, &H6A, &H6B, &H6C, &H6D, &H6E, &H6F, &H70, &H71, &H72, &H73, &H74, &H75, &H76, &H77, &H78, &H79, &H7A, &H7B, &H7C, _
 &H7D, &H7E, &H7F, &HC7, &HFC, &HE9, &HE2, &HE4, &HE0, &HE5, &HE7, &HEA, &HEB, &HE8, &HEF, &HEE, &HEC, &HC4, &HC5, &HC9, &HE6, &HC6, &HF4, &HF6, &HF2, &HFB, &HF9, &HFF, &HD6, &HDC, &HF8, &HA3, &HD8, &HD7, &H192, &HE1, &HED, &HF3, &HFA, &HF1, &HD1, &HAA, &HBA, &HBF, &HAE, _
 &HAC, &HBD, &HBC, &HA1, &HAB, &HBB, &H2591, &H2592, &H2593, &H2502, &H2524, &HC1, &HC2, &HC0, &HA9, &H2563, &H2551, &H2557, &H255D, &HA2, &HA5, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &HE3, &HC3, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &HA4, &HF0, &HD0, &HCA, &HCB, &HC8, &H131, &HCD, &HCE, &HCF, &H2518, &H250C, &H2588, &H2584, &HA6, &HCC, &H2580, &HD3, &HDF, &HD4, &HD2, &HF5, &HD5, &HB5, &HFE, &HDE, &HDA, &HDB, &HD9, &HFD, &HDD, &HAF, &HB4, &HAD, &HB1, &H2017, &HBE, &HB6, &HA7, &HF7, &HB8, &HB0, &HA8, &HB7, &HB9, &HB3, &HB2, &H25A0, &HA0)
        
    Conv863Unicode = Array( _
&H0, &H1, &H2, &H3, &H4, &H5, &H6, &H7, &H8, &H9, &HA, &HB, &HC, &HD, &HE, &HF, &H10, &H11, &H12, &H13, &H14, &H15, &H16, &H17, &H18, &H19, &H1A, &H1B, &H1C, &H1D, &H1E, &H1F, &H20, &H21, &H22, &H23, &H24, &H25, &H26, &H27, &H28, &H29, &H2A, &H2B, &H2C, &H2D, &H2E, &H2F, &H30, &H31, &H32, &H33, &H34, &H35, &H36, &H37, &H38, &H39, &H3A, &H3B, &H3C, &H3D, &H3E, &H3F, &H40, &H41, &H42, &H43, &H44, &H45, &H46, &H47, &H48, &H49, &H4A, &H4B, &H4C, &H4D, &H4E, &H4F, &H50, &H51, &H52, &H53, &H54, &H55, &H56, &H57, _

&H2591, &H2592, &H2593, &H2502, &H2524, &H2561, &H2562, &H2556, &H2555, &H2563, &H2551, &H2557, &H255D, &H255C, &H255B, &H2510, &H2514, &H2534, &H252C, &H251C, &H2500, &H253C, &H255E, &H255F, &H255A, &H2554, &H2569, &H2566, &H2560, &H2550, &H256C, &H2567, &H2568, &H2564, &H2565, &H2559, &H2558, &H2552, &H2553, &H256B, _
&H256A, &H2518, &H250C, &H2588, &H2584, &H258C, &H2590, &H2580, &H3B1, &HDF, &H393, &H3C0, &H3A3, &H3C3, &HB5, &H3C4, &H3A6, &H398, &H3A9, &H3B4, &H221E, &H3C6, &H3B5, &H2229, &H2261, &HB1, &H2265, &H2264, &H2320, &H2321, &HF7, &H2248, &HB0, &H2219, &HB7, &H221A, &H207F, &HB2, &H25A0, &HA0)
    
 
    Set doc = ActiveDocument
    For Each para In doc.Range.Paragraphs
        lineNo = lineNo + 1
        If para.Style = "wpsDumps" Then
            If lineNo >= 1 Then
                ConvertWPSDumpFontLine para
'                ActiveDocument.Characters.Last.Select
'                Selection.Collapse
'                Selection.text = str
            End If
        Else
            lineNo = 0
        End If
    Next
    
End Sub
Attribute VB_Name = "bg_FormTimers"
Option Explicit

Public Reschedule  As Boolean
Public StopTimer  As Boolean
Public TimerForm As Object

' Never Use B from here

Public Sub PictureToolOnTimer()
    On Error GoTo CloseIt
    If Not TimerForm Is Nothing Then TimerForm.OnTimer
    On Error GoTo 0
ExitSub:

    Exit Sub
CloseIt:
    Set TimerForm = Nothing
    Resume ExitSub
End Sub
Attribute VB_Name = "bg_SharePoint"
Option Explicit

Public Function MoveSP(docFromUrl As String, docToUrl As String)
' Returns 'OK' if OK
    Dim id As String
    Dim listName As String
    Dim listId As String
    Dim Site As String
    Dim result As String
    
    Dim fromLocalUrl As String
    Dim toLocalUrl As String
        
    Site = GetSite(docFromUrl)
    listName = Mid(docFromUrl, Len(Site) + 2)
    listName = Split(listName, "/")(0)
    listId = GetListGUID(Site, listName)
    listId = Mid(listId, 2, Len(listId) - 2)

    Dim dict As New Scripting.Dictionary
    Set dict = GetItem(docFromUrl, , "ID, CheckoutUser")
    id = dict("ID")
    
    If Not id = "" Then
        Dim checkedOut As Boolean
        checkedOut = Not IsEmpty(dict("CheckoutUser"))
        If checkedOut Then
            MoveSP = "Error: " & "File must be checked in"
            Exit Function
        End If
        
        fromLocalUrl = Mid(Replace(docFromUrl, Site, "", , , vbTextCompare), 2)
        toLocalUrl = Mid(Replace(docToUrl, Site, "", , , vbTextCompare), 2)
        
        If LCase(docFromUrl) Like "*//crisnet/*" Or LCase(docFromUrl) Like "*//extranet.crisplant.com/*" Then
            Dim moveResult As String
            'checkout docToUrl
            moveResult = MoveSharePointFile(docFromUrl, docToUrl)
            If LCase(moveResult) = LCase(docToUrl) Then
                MoveSP = "OK"
            Else
                MoveSP = "Error: " & "SP 2007, MoveSharePointFile" & vbCrLf & moveResult
            End If
        Else
            Dim batch As String
            batch = "<Batch OnError='Return' ListVersion='1'>" & vbCrLf & _
            "   <Method ID='1' Cmd='Move'>" & vbCrLf & _
            "     <Field Name='ID'>" & id & "</Field>" & vbCrLf & _
            "     <Field Name='FileRef'>" & fromLocalUrl & "</Field>" & vbCrLf & _
            "     <Field Name='MoveNewUrl'>" & toLocalUrl & "</Field>" & vbCrLf & _
            "   </Method>" & vbCrLf & _
            "</Batch>"
            'Debug.Print batch
            result = SPMicrosoft(Site & "/_vti_bin/Lists.asmx", "UpdateListItems", 30, "listName", listId, "updates", batch)
            MoveSP = result
        End If
    Else
        MoveSP = "Error: " & "Item not found"
    End If
End Function

Public Sub TestMoveSharePoint()
    Dim docUrl As String
    Dim newDocUrl As String
    
'    docUrl = "https://teams.beumer.com/sites/CSHotline-102/HotlineInfo/Hotline/PLY-Backup/PLY-NY/sub-supplier.docx"
'    newDocUrl = "https://teams.beumer.com/sites/CSHotline-102/HotlineInfo/Hotline/PLY-Backup/PLY-NY/sub-supplier.doc"
    
    docUrl = "http://crisnet/Project/90010/Project/00_Sales/Test.doc"
    newDocUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"
    
    Debug.Print MoveSP(docUrl, newDocUrl)
End Sub
Attribute VB_Name = "bg_Test"
'Option Explicit
'
'
'Public Sub RaiseRegistered()
'    Dim Head1 As String
'    Dim Head2 As String
'    Dim Head3 As String
'    Dim Head4 As String
'
'    Head1 = WordBasic.[GetDocumentVar$]("Head1")
'    Head2 = WordBasic.[GetDocumentVar$]("Head2")
'    Head3 = WordBasic.[GetDocumentVar$]("Head3")
'    Head4 = WordBasic.[GetDocumentVar$]("Head4")
'
'    If InStr(Head1, "|fffd|") > 0 Or InStr(Head2, "|fffd|") > 0 Then
'        ActiveDocument.StoryRanges(wdPrimaryHeaderStory).Select
'        Selection.find.Font.Superscript = False
'        Selection.find.Replacement.Font.Superscript = True
'        With Selection.find
'            .text = "|fffd|"
'            .Replacement.text = "|fffd|"
'            .Wrap = wdFindContinue
'            .Format = True
'            .MatchCase = False
'            .MatchWholeWord = False
'            .MatchWildcards = True
'            .MatchSoundsLike = False
'            .MatchAllWordForms = False
'        End With
'        Selection.find.Execute Replace:=wdReplaceAll
'    End If
'
'    If InStr(Head3, "|fffd|") > 0 Or InStr(Head4, "|fffd|") > 0 Then
'        ActiveDocument.StoryRanges(wdPrimaryFooterStory).Select
'        Selection.find.Font.Superscript = False
'        Selection.find.Replacement.Font.Superscript = True
'        With Selection.find
'            .text = "|fffd|"
'            .Replacement.text = "|fffd|"
'            .Wrap = wdFindContinue
'            .Format = True
'            .MatchCase = False
'            .MatchWholeWord = False
'            .MatchWildcards = True
'            .MatchSoundsLike = False
'            .MatchAllWordForms = False
'        End With
'        Selection.find.Execute Replace:=wdReplaceAll
'    End If
'
'    If InStr(Head1, "|fffd|") > 0 Or InStr(Head2, "|fffd|") > 0 _
'    Or InStr(Head3, "|fffd|") > 0 Or InStr(Head4, "|fffd|") > 0 Then
'        Selection.find.ClearFormatting
'        Selection.find.Replacement.ClearFormatting
'        With Selection.find
'            .text = ""
'            .Replacement.text = ""
'            .Forward = True
'            .Wrap = wdFindContinue
'            .Format = False
'            .MatchCase = False
'            .MatchWholeWord = False
'            .MatchWildcards = False
'            .MatchSoundsLike = False
'            .MatchAllWordForms = False
'        End With
'    End If
'
'    Selection.Collapse wdCollapseStart
'    On Error Resume Next
'    ActiveWindow.ActivePane.Close
'    ActiveWindow.ActivePane.View = wdPrintView
'    On Error GoTo 0
'
'
'End Sub
'
'Sub ListVisibleStyles()
'    Dim oSty As Style
'    Dim oLoopSty As Style
'    Dim oArray As Variant
'    Dim i As Long
'    Dim str As String
'
'
'    For Each oSty In ActiveDocument.Styles
'        If oSty.Visibility = False Then
'            'Xebug.Print oSty.NameLocal, oSty.Type, oSty.QuickStyle, oSty.BuiltIn
'            If oSty.BuiltIn Then
'                For i = -1 To -1000 Step -1
'                    Set oLoopSty = ActiveDocument.Styles(i)
'                    If oLoopSty.NameLocal = oSty.NameLocal Then
'                        str = str & i & ", "
'                        Exit For
'                   End If
'               Next
'            Else
'                str = str & oSty.NameLocal & ", "
'            End If
'        End If
'    Next
'    Xebug.Print str
'
''    str = "1, 2, 5, BoxText, BoxTextCenter, BulletList, BulletList 2, BulletList 3, 24, CaptionRes, CaptionTable, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, Figur, FigurRes, Front, Hanging Indent, Hanging Indent 2, Hanging Indent 3, Hanging Indent i1, Hanging Indent i2, Hanging Indent i3, Hanging Indent ii1, Hanging Indent ii2, Hanging Indent ii3, Hanging Indent No., 98, 99, 100, 101, 102, 103, 104, 105, HeadingFrontPage, HeadingPart, Indent, Indent 2, Indent 3, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, LineDraw, LineDraw2, LineDrawDumps, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, MotorUnit, 241, NormalBold, NormalNum, NumList, NumList 2, NumList 3, NumListAlpha,"
''    str = str & "ParmHead , pos1, PosListe, PosListeTable, Qty, Qty1, SeqNum, SeqNum2, SeqNum3, SeqNum4, SubjectRes, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, Table Header, Table Header Center, Table Header Right, Table Header Small, Table Header Small C, Table Header Small R, Table Indent, Table Indent Small, 310, 311, 312, 313, 314, 315, 316, 317, Table of FiguresCP, 322, 323, 324, 325, Table Small, Table Small Center, Table Small Right, 329, 330, Table Text, Table text Center, Table text Right, 334, 335, 336, 337, TableBulletList, TableBulletListSmall, TableNumList, TableNumListSmall, TegnText, TegnTextRight, Toc Head, Toc Title, Toc Title Fig, Toc Title Res, TOC1cp, TOC2cp, TOC3cp, TOC4cp, TOC5cp, TOC6cp, TOC7cp, TOC8cp, TOC9cp, TOC9cpRes, TOC9Res, TOCHeadChapt, TocHeadChapt, TocTitleRes, wps format, wpsDumps"
'
'
' End Sub
'
'Public Sub InsertShape()
'    Dim cc As ContentControl
'    Dim rng As Range
'    Selection.SelectCell
'    Set cc = Selection.Range.ContentControls(1)
'    Xebug.Print cc.tag
'    cc.Range.text = "Here"
'    Set rng = cc.Range
'    ActiveDocument.Shapes.AddPicture "\\beumer.com\public\HomeDirs\Sub\Denmark\AAR\ply\My Pictures\Chronopost.gif", False, True, 0, 0, 200, 48, rng
'    Xebug.Print cc.tag
'End Sub
'
'Sub GetActiveStyles()
'    Application.ScreenUpdating = False
'    Dim RngStory As Range, oSty As Style, StrType As String, StrStyles As String
'    With ActiveDocument
'        For Each oSty In .Styles
'            For Each RngStory In .StoryRanges
'                With RngStory.find
'                    .ClearFormatting
'                    .text = ""
'                    .Replacement.text = ""
'                    .Style = oSty.NameLocal
'                    .Forward = True
'                    .Wrap = wdFindStop
'                    .Format = True
'                    .Execute
'                    If .found Then
'                        Select Case oSty.Type
'                        Case wdStyleTypeCharacter: StrType = "Character"
'                        Case wdStyleTypeList: StrType = "list"
'                        Case wdStyleTypeParagraph: StrType = "Paragraph"
'                        Case wdStyleTypeTable: StrType = "Table"
'                        End Select
'                        StrStyles = StrStyles & oSty.NameLocal & " (" & StrType & ")" & vbCr
'                        Exit For
'                    End If
'                End With
'            Next RngStory
'        Next oSty
'    End With
'    Xebug.Print StrStyles
'    Application.ScreenUpdating = True
'End Sub
'
'
'Public Sub TestUpdateCaptions()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Update Captions"
'    DX.UpdateCaptions = True
'    DX.SetCaptions "Figure"
'    DX.SetCaptions "Table"
'    DX.UpdateCaptions = False
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestPrologEpilog()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Undo"
'    Selection.text = "Undo Test"
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestSetLanguage()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Set Language"
'    DX.SetLanguage
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'
'End Sub
'
'Public Sub XButtonNextImage_Click(control As IRibbonControl)
'    Dim Addin As COMAddIn
'    Dim automationObject As Object
'    On Error Resume Next
'    Set Addin = Application.COMAddIns("Word BGOA")
'    On Error GoTo 0
'    If Not Addin Is Nothing Then
'        Set automationObject = Addin.Object
'        automationObject.OpenTemplate Application, "C:\BEUMERGroup\Office2007\WorkgroupTemplates\Standard\Standard Sheet.dot"
'    End If
'End Sub
'
'Public Sub tt()
'    Dim cc As ContentControl
'    Set cc = ActiveDocument.ContentControls(1)
'    cc.Range.Select
'    Dim rng As Range
'    Set rng = cc.Range
'    rng.Select
'    rng.Collapse wdCollapseEnd
'    rng.Select
'    rng.MoveStart wdCharacter, -1
'    rng.Select
'    rng.Delete
'End Sub
'
'Public Sub ListAllContentControls()
'    Dim cc As ContentControl
'    Dim stry As Range
'    For Each stry In ActiveDocument.StoryRanges
'        Debug.Print stry.StoryType
'        For Each cc In stry.ContentControls
'            If Not cc.PlaceholderText Is Nothing Then
'                If cc.tag Like "*Line2*" Or cc.PlaceholderText Like "*Line2*" Then
'                    Debug.Print cc.tag, cc.PlaceholderText
'                End If
'            Else
'                cc.Range.Select
'                cc.SetPlaceholderText , , " "
'                Debug.Print cc.tag, "Nothing"
'            End If
'          cc.SetPlaceholderText , , cc.tag
'        Next
'
'    Next
'End Sub
'
'
'Sub Demo()
'Dim fldSeq As field
'Dim rngText As Range
'Dim rng As Range
'Dim i As Integer
'Dim first As Boolean
'    first = True
'Dim endPos As Long
'Set rngText = ActiveDocument.Range
'endPos = rngText.End
'With rngText
'  With .find
'    .ClearFormatting
'    .text = "Table 1.2"
'    .Forward = True
'    .Style = ActiveDocument.Styles(WdBuiltinStyle.wdStyleCaption)
'    .Format = True
'    .Execute
'  End With
'  Do While .find.found
'    i = i + 1
'    If i > 100 Then Stop
'    Set rng = .Duplicate
'    rng.SetRange .start + 1, endPos
'    Set fldSeq = rng.fields(2)
'    If first Then
'        Debug.Print "First", .start, .End, .text ', .Information(wdWithInTable)
'        first = False
'        If Not LCase(fldSeq.code.text) Like "*\r*" Then
'            fldSeq.code.text = fldSeq.code.text & " \r 1"
'        End If
'        fldSeq.Update
'    Else
'        If LCase(fldSeq.code.text) Like "*\r*" Then
'            fldSeq.code.text = Replace(fldSeq.code.text, "\r 1", "")
'        End If
'        fldSeq.Update
'        Debug.Print .start, .End, .text ' , .Information(wdWithInTable)
'    End If
'    .End = .End + 1
'    .Collapse wdCollapseEnd
'    .find.Execute
'  Loop
'End With
'Xebug.Print i & " ranges found."
'End Sub
'
'Public Sub ListContentControlsInSelection()
'    Dim cc As ContentControl
'    Dim ccs As ContentControls
'    Dim rng As Range
'
'    Dim cmt As Comment
'    Set cmt = Selection.comments.Add(Selection.Range, "DeleteAgain")
'    cmt.Delete
'    Xebug.Print Selection.start, Selection.End
'
'    Set ccs = Selection.Range.ContentControls
'    If ccs.Count > 0 Then
'        Debug.Print ccs.Count
'        If Selection.Range.InRange(ccs(1).Range) Then
'            Debug.Print "InRange"
'        ElseIf (Selection.Range.start > ccs(1).Range.start And Selection.Range.start < ccs(1).Range.End) _
'        Or (Selection.Range.End < ccs(1).Range.End And Selection.Range.End > ccs(1).Range.start) Then
'            Debug.Print "Intersect"
'        End If
'    Else
'        If Selection.Tables.Count > 0 Then
'            Set rng = Selection.Cells(1).Range ' Tables(Selection.Tables.Count).Range
'            rng.End = Selection.Range.start
'        Else
'            Set rng = ActiveDocument.Range(1, Selection.Range.start)
'        End If
'
'        'rng.Select
'        Set ccs = rng.ContentControls
'        If ccs.Count > 0 Then
'            Debug.Print ccs.Count
'            Dim i As Integer
''            For i = 1 To ccs.Count
''                Debug.Print ccs(i).tag, ccs(i).Range.Start, ccs(i).Range.End
''            Next
'            Set cc = ccs(ccs.Count)
'        ElseIf ActiveDocument.ContentControls.Count > 0 Then
'            Set cc = ActiveDocument.ContentControls(1)
'        End If
'        If Not cc Is Nothing Then
'            If cc.Range.End < Selection.Range.start Then
'                If ccs.Count < ActiveDocument.ContentControls.Count Then
'                    Set cc = ccs(ccs.Count + 1)
'                End If
'            End If
'            Debug.Print cc.tag, cc.Range.start, cc.Range.End, cc.LockContents
'        End If
'        If (Selection.Range.start > cc.Range.start And Selection.Range.start < cc.Range.End) _
'        Or (Selection.Range.End < cc.Range.End And Selection.Range.End > cc.Range.start) Then
'            Debug.Print "Intersect"
'        End If
'    End If
'
'End Sub
'
'Public Sub aaIsLocked()
'    'ActiveDocument.ContentControls(1).LockContents = True
'    Dim cc As ContentControl
'    Dim ccs As ContentControls
'
'    Dim locked As Boolean
'    locked = False
'    Dim rng As Range
'    Set rng = Selection.Range.Duplicate
'    Dim rngTest As Range
'
'    Set ccs = rng.ContentControls
'
'    If ccs.Count > 0 Then
'        For Each cc In ccs
'            If cc.LockContents = True Then
'                locked = True
'                Exit For
'            End If
'        Next
'    End If
'
'    Set rngTest = rng.Duplicate
'
'    If locked = False Then
'        rngTest.SetRange rng.start, rng.start
'        On Error GoTo StyleFail
'        rngTest.Style = rng.Style ' ActiveDocument.Styles(wdStyleNormal)
'        On Error GoTo 0
'    End If
'
'    If locked = False Then
'        rngTest.SetRange rng.End, rng.End
'        On Error GoTo StyleFail
'        rngTest.Style = rng.Style ' ActiveDocument.Styles(wdStyleNormal)
'        On Error GoTo 0
'    End If
'
'
'ExitIsLocked:
'    Xebug.Print locked
'    Exit Sub
'StyleFail:
'    locked = True
'    Resume ExitIsLocked
'End Sub
'
'
'Public Sub AddTableCCs()
'    Dim stry As Range
'    Dim rng As Range
'    Dim tbl As table
'    Dim cc As ContentControl
'    Dim ccs As Collection
'
'
'    Set stry = ActiveDocument.StoryRanges(wdFirstPageHeaderStory)
'    Set tbl = stry.Tables(1)
'    Set ccs = UnlockContentControls(tbl.Range)
'    Set cc = stry.ContentControls.Add(wdContentControlRichText, tbl.Range)
'    cc.tag = "Container:FirstPageHeader"
'    LockContentControls ccs
'    cc.LockContents = True
'
'    Set stry = ActiveDocument.StoryRanges(wdFirstPageFooterStory)
'    Set tbl = stry.Tables(1)
'    Set ccs = UnlockContentControls(tbl.Range)
'    Set cc = stry.ContentControls.Add(wdContentControlRichText, tbl.Range)
'    cc.tag = "Container:FirstPageFooter"
'    LockContentControls ccs
'    cc.LockContents = True
'
'    Set stry = ActiveDocument.StoryRanges(wdPrimaryHeaderStory)
'    Set tbl = stry.Tables(1)
'    Set ccs = UnlockContentControls(tbl.Range)
'    Set cc = stry.ContentControls.Add(wdContentControlRichText, tbl.Range)
'    cc.tag = "Container:PrimaryHeader"
'    LockContentControls ccs
'    cc.LockContents = True
'
'    Set stry = ActiveDocument.StoryRanges(wdPrimaryFooterStory)
'    Set tbl = stry.Tables(1)
'    Set ccs = UnlockContentControls(tbl.Range)
'    Set cc = stry.ContentControls.Add(wdContentControlRichText, tbl.Range)
'    cc.tag = "Container:PrimaryFooter"
'    LockContentControls ccs
'    cc.LockContents = True
'
'End Sub
'
'
'Public Sub TestInsertPic()
'    Dim rng As Range
'    Dim rngPic As Range
'    Dim inl As InlineShape
'    Set rng = Selection.Range
'    Set rngPic = ActiveDocument.StoryRanges(wdMainTextStory).Duplicate
'    rngPic.Collapse wdCollapseEnd
'    Set inl = rngPic.InlineShapes.AddPicture("\\crisnet\project\spteam\Pictures\Vancouver Airport.png", False, True, rngPic)
'    inl.Select
'    'inl.Range.CopyAsPicture
'End Sub
'
'Sub FigureCaption()
'    Dim d As Word.Dialog
'    Set d = Word.Dialogs(wdDialogInsertCrossReference)
'    d.referencetype = "Figure"
'    d.show
'    Set d = Nothing
'End Sub
'
'
'Sub TableCaption()
'    Dim varTables As Variant
'    varTables = ActiveDocument.GetCrossReferenceItems("Figure")
'
'    Dim d As Word.Dialog
'    Set d = Word.Dialogs(wdDialogInsertCrossReference)
'    d.referencetype = "Table"
'    Xebug.Print d.ReferenceKind
'    d.ReferenceKind = 32 'wdOnlyLabelAndNumber
'    d.InsertAsHyperlink = 1
'    d.InsertPosition = 0
'    d.show
'    Set d = Nothing
'End Sub
'
'Public Sub TestReadReadCaptionTOCTOFTOT()
'    Dim DX As New DOCXML
'    DX.Init
'    ReadCaptionTOCTOFTOT ActiveDocument, DX
'    Set DX = Nothing
'End Sub
'
'Public Sub TestRead()
'    Dim DX As New DOCXML
'    Dim file As New CPDocFile
'    DX.Init
'    ReadLanguageFromDocument ActiveDocument, file
'    Set DX = Nothing
'End Sub
'
''Public Sub TestReadPictures()
''    Dim doc As Document
''    Set doc = ActiveDocument
''
''    Application.DisplayAlerts = wdAlertsNone
''    Dim ok As Boolean
''    Dim bgp As BGPicture
''    Dim coll As Collection
''
''    Dim BGPM As New BGPictureManager
''
''    Dim testDocumentFullName As String
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\A1_UK2_0.doc" ' Missing file on user desktop
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\A31UK6_2.doc" ' All found directly
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\G1_UK1_0.DOC" ' Object has been deleted. Still found
''    testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\F3_US1_0.doc"  ' 3 pictures, all found directly
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\F1_US1_0.doc"  ' 6 pictures, all found directly
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\F1_UK2_0.doc"  ' 24 pictures, one AutoShape
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\H2000CUK__00.doc"  ' 11 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\U_CB5923_EN_00.docx"  ' 15 pictures, all found when force
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\CBAG_H04_EN.doc"  'No pictures, ok
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\TMPUK2000_3_0_EXT.doc"  'internal pictures only, (Older user guide)
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\U_CB5310-_EN_01.doc"  'Many pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\U0500_UK__05NS.doc"  'Many pictures, all found, except one user
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\U0500_UK__05NS.doc"  'Many pictures, all found, except one user
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\H0500CDK__00.doc"  '6 pictures, all found, used to fail resize
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\3A_F1_UK3_0.doc"  '30 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\U1000_UK__01NS.doc"  '8 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\3A_F1_UK3_0.docx"  'old V: mapping, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\3A_B__UK2_0.doc"  '../../ files found in _Pictures, _Grafik
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\H3052_UK__00.docx"  '7 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\0501ou130_ZH.doc"  'Chinese, All  internal
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\OPNL_C02_UK.docx"  '3 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\CBAG_G01_03_EN.docx"  '8 pictures, all found
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\SORT2H02____UK.doc"  '14 pictures, one deleted
''    'testDocumentFullName = "D:\_DocumentationDemo 2015-09-23\SORT2H02____UK - BreakTest.doc"  '14 pictures, one deleted
''
''    Dim docFrom As Document
''    On Error Resume Next
''    Set docFrom = Application.Documents(testDocumentFullName)
''    On Error GoTo 0
''    If docFrom Is Nothing Then
''        Set docFrom = Application.Documents.Open(testDocumentFullName, False, True, False, , , , , , , , True)
''    End If
''
'''    Set bgp = New BGPicture
'''    Xebug.Print "Contains 22", BGPM.Contains("22")
'''    ok = BGPM.Add(bgp, "22")
'''    Xebug.Print "Add 22", ok
'''    ok = BGPM.Add(bgp, "22")
'''    Xebug.Print "Add 22", ok
'''    ok = BGPM.Add(bgp, "22", True)
'''    Xebug.Print "Add 22 Force", ok
'''    Xebug.Print "Contains 22", BGPM.Contains("22")
'''    ok = BGPM.Remove("22")
'''    Xebug.Print "Remove 22", ok
'''    Xebug.Print "Contains 22", BGPM.Contains("22")
''
''    ok = BGPM.ReadRange(docFrom.Content)
''    If ok Then
''        ok = BGPM.ReadInfo(DX, True)
''        If ok Then
''            ok = BGPM.BreakBrokenLinks
''        End If
''        Set coll = BGPM.GetBGPictures
''        Dim i As Integer
''        i = 0
''        For Each bgp In coll
''            i = i + 1
''            If bgp.sourceFullName > "" Then
''                If bgp.FoundFile = "" Then
''                    Debug.Print i, bgp.TypeOfPicture, "Not Found", bgp.sourceFullName
''                Else
''                    Debug.Print i, bgp.TypeOfPicture, "Found    ", bgp.sourceFullName, bgp.FoundFile
''                End If
''            Else
''                If bgp.FoundFile = "" Then
''                    Debug.Print i, bgp.TypeOfPicture, "Internal, not found", bgp.sourceFullName
''                Else
''                    Debug.Print i, bgp.TypeOfPicture, "Internal, found    ", bgp.sourceFullName, bgp.FoundFile
''                End If
''            End If
''        Next
''        Application.DisplayAlerts = wdAlertsAll
''    End If
''
''    doc.Activate
''End Sub
'
'Public Sub TestRemoveR0Field()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Remove R0 Fields"
'    DX.updated = DX.RemoveR0Fields
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'
'Public Sub TestMoveTextBoxes()
'    Dim doc As Document
'    Set doc = ActiveDocument
'    Dim txt As TextBox
'    Dim shp As Shape
'    Dim i As Integer
'
'    Dim rng As Range
'    Set rng = doc.Range
'    rng.SetRange 0, 0
'    rng.Select
'    rng.End = Selection.bookMarks("\Page").Range.End
'
'    Selection.EndKey Unit:=wdStory
'    Selection.InsertBreak Type:=wdPageBreak
'    Selection.InsertAfter "LastPage - Delete Again"
'
'    For i = rng.ShapeRange.Count To 1 Step -1
'        Set shp = rng.ShapeRange(i)
'        If shp.Type = msoTextBox Then
'            shp.LockAnchor = False
'            shp.Select
'            Selection.copy
'            doc.Paragraphs.Last.Range.Select
'            Selection.Collapse wdCollapseEnd
'            Selection.PasteAndFormat wdPasteDefault
'        End If
'    Next
'
'    doc.Content.Paragraphs.first.Range.Select
'    Selection.bookMarks("\Page").Range.Select
'    Selection.Delete
'
'    doc.Content.Paragraphs.Last.Range.Select
'    'Selection.Collapse wdCollapseStart
'    'Selection.Bookmarks("\Page").Range.Select
'    Set rng = Selection.Range
'    For i = rng.ShapeRange.Count To 1 Step -1
'        Set shp = rng.ShapeRange(i)
'        If shp.Type = msoTextBox Then
'            shp.LockAnchor = False
'            shp.Select
'            Selection.Cut
'            doc.Paragraphs.first.Range.Select
'            Selection.Collapse wdCollapseStart
'            Selection.PasteAndFormat wdPasteDefault
'        End If
'    Next
'    doc.Content.Paragraphs.Last.Range.Select
'    Selection.Delete
'
'End Sub
'
'
'Public Sub StartHeading(heading As WdBuiltinStyle, Optional hidden As Boolean = False)
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Start Heading"
'    Selection.Paragraphs(1).Range.Select
'    Selection.Collapse wdCollapseStart
'    Selection.Style = ActiveDocument.Styles(heading)
'    With Selection.ParagraphFormat
'        If heading = wdStyleHeading1 Then
'            .SpaceBefore = 24
'            .SpaceAfter = 3
'        Else
'            .SpaceBefore = 15
'            .SpaceAfter = 3
'        End If
'        .FirstLineIndent = -64.05
'        .TabStops.ClearAll
'        .TabStops.Add 64.05
'    End With
'    Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
'    With Selection.Paragraphs(1).Range.Font
'        If Not hidden Then
'            .Size = 12
'            .Bold = True
'        Else
'            .Size = 1
'            .ColorIndex = wdWhite
'        End If
'
'    End With
'    If Not Selection.Paragraphs(1).Range.Characters(1) = vbTab Then Selection.text = vbTab
'
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'End Sub
'
'Public Sub TestStyling()
'    StartHeading WdBuiltinStyle.wdStyleHeading1, False
'End Sub
'
'Public Sub TestUnlockAll()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Unlock All"
'    UnlockAllContentControls DX.ThisDoc
'    DX.LockMainContentControls False
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestNewContents()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Unlock All", True
'    UnlockAllContentControls DX.ThisDoc
'
'    Dim ccTOC As ContentControl
'    Dim ccFrontPage As ContentControl
'    Dim ccDocumentInformation As ContentControl
'    Dim ccRevisions As ContentControl
'
'    Set ccTOC = DX.GetFirstContentControlByTag("DocumentInfo-TOC:DocumentInformation")
'
'    Set ccFrontPage = DX.GetFirstContentControlByTag("DocumentInfo-FrontPage:FrontPage")
'    Set ccDocumentInformation = DX.GetFirstContentControlByTag("DocumentInfo-DocumentInformation:DocumentInformation")
'    Set ccRevisions = DX.GetFirstContentControlByTag("DocumentInfo-Revisions:DocumentInformation")
'
'    Dim rng As Range
'
'    Set rng = ccTOC.Range.Paragraphs(3).Range
'    rng.Collapse wdCollapseStart
'    rng.Select
'
'    ' Delete Front link
'    If Not ccFrontPage Is Nothing Then
'        Selection.Move wdCharacter, 1
'        Selection.MoveEnd WdUnits.wdParagraph, 1
'        Selection.TypeBackspace
'    End If
'    ' Keep Document Information
'    If Not ccDocumentInformation Is Nothing Then
'        Selection.MoveDown wdLine, 1
'    Else
'        With ccTOC.Range.Paragraphs(2).Range.ParagraphFormat
'            .SpaceBefore = 4
'            .SpaceAfter = 4
'        End With
'    End If
'
'    ' Delete Contents
'    Selection.Move wdCharacter, 1
'    Selection.MoveEnd WdUnits.wdParagraph, 1
'    Selection.TypeBackspace
'
'
'    ' Delete Revisions
'    If Not ccRevisions Is Nothing Then
'        Selection.Move wdCharacter, 1
'        Selection.MoveEnd WdUnits.wdParagraph, 1
'        Selection.TypeBackspace
'    End If
'
'
''    rng.MoveEnd WdUnits.wdParagraph, 1
''    rng.MoveEnd wdCharacter, -1
''    rng.Select
''    Selection.Delete Unit:=wdCharacter, Count:=1
''    Selection.MoveDown wdLine, 1
''    Selection.TypeBackspace
''    Selection.MoveDown wdLine, 1
''    Selection.MoveRight Unit:=wdCharacter, Count:=1
''    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
''    Selection.Delete Unit:=wdCharacter, Count:=1
''    If False Then
''        Selection.MoveDown wdLine, 1
''        Selection.MoveRight Unit:=wdCharacter, Count:=1
''        Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
''        Selection.Delete Unit:=wdCharacter, Count:=1
''    End If
'''    Selection.MoveRight Unit:=wdCharacter, Count:=1
''    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
''    Selection.TypeBackspace
''    Selection.TypeBackspace
'''    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
'''    Selection.Delete Unit:=wdCharacter, Count:=1
'''    Selection.TypeBackspace
''    'Selection.MoveLeft Unit:=wdCharacter, Count:=1
''    'Selection.Delete Unit:=wdCharacter, Count:=1
'
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Function GetPageRange(intpagenum As Integer) As Variant
'Dim intPageCount As Integer
'
'    Set GetPageRange = Nothing
'    For intPageCount = 1 To Selection.Information(wdNumberOfPagesInDocument)
'        If intPageCount = intpagenum Then
'            Set GetPageRange = ActiveDocument.bookMarks("\Page").Range
'            GetPageRange.Select
'            Exit For
'        End If
'    Next
'
'End Function
'
'Sub getapage()
'Dim rng As Variant
'Dim intpagenum As Integer
'
'    intpagenum = -3
'    Set rng = GetPageRange(intpagenum)
'    If TypeName(rng) = "Range" Then
'        Debug.Print rng.start & " " & rng.End
'    Else
'        Debug.Print "page number " & intpagenum & " NOT found"
'    End If
'
'End Sub
'
'Sub GetPageRange2()
'     Dim rng As Range
'     Dim p As Integer
'
'     p = 22
'     Set rng = ActiveDocument.Range
'     Selection.GoTo wdGoToPage, wdGoToAbsolute, p
'     rng.start = Selection.start
'     Selection.GoTo wdGoToPage, wdGoToNext
'     If Selection.start > rng.start Then
'         rng.End = Selection.start
'     Else
'         rng.End = ActiveDocument.Range.End
'     End If
'     rng.Select
'
' End Sub
'
'Public Sub TestSpeed()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Speed", False
'
'    Dim i As Integer
'    Dim inl As InlineShape
'    Dim fld As field
'    Dim str As String
'    Dim para As Paragraph
'    Dim guard As Integer
'    Dim rng As Range
'    Dim rngAll As Range
'    Set rngAll = DX.GetDocumentRange
'    Dim start As Long
'    Dim book As Bookmark
'    Dim cc As ContentControl
'    Dim cross As String
'    Dim c As Integer
'    Dim aCross() As String
'    Dim shp As Shape
'    Dim current As Long
'    Dim objects() As Object
'
'
'    Dim loops As Integer
'    loops = 10
'
''    For i = DX.ThisDoc.InlineShapes.Count To 1 Step -1
''        Set inl = DX.ThisDoc.InlineShapes(i)
''        inl.Delete
''    Next
'
'
'    Xebug.Print "Start", Format(Now, "HH:mm:ss")
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'
'        Dim intPageCount As Integer
'        Dim intpage As Integer
'        intPageCount = DX.ThisDoc.BuiltInDocumentProperties("Number of Pages")
'        For intpage = 1 To intPageCount  'To 1 Step -1
'            Set rng = Selection.GoTo(What:=wdGoToPage, Which:=wdGoToAbsolute, name:=CStr(intpage))
'            Set rng = DX.ThisDoc.bookMarks("\page").Range
'            str = rng.start & rng.End
'            'If i = 1 Then Debug.Print str
'        Next
'    Next
'    Xebug.Print "Pages", Format(Now, "HH:mm:ss")
'
''    For i = 1 To loops
''        aCross = DX.ThisDoc.GetCrossReferenceItems(wdRefTypeHeading)
''        For c = 1 To UBound(aCross)
''            str = c & aCross(c)
''            'Xebug.Print c, aCross(c)
''        Next
''    Next
''    Xebug.Print "Cross Headings", format(Now, "HH:mm:ss")
''
''    For i = 1 To loops
''        aCross = DX.ThisDoc.GetCrossReferenceItems(wdRefTypeBookmark)
''        For c = 1 To UBound(aCross)
''            str = c & aCross(c)
''            'Xebug.Print c, aCross(c)
''        Next
''    Next
''    Xebug.Print "Cross Bookmark", format(Now, "HH:mm:ss")
''
''    For i = 1 To loops
''        aCross = DX.ThisDoc.GetCrossReferenceItems(wdRefTypeNumberedItem)
''        For c = 1 To UBound(aCross)
''            str = c & aCross(c)
''            'Xebug.Print c, aCross(c)
''        Next
''    Next
''    Xebug.Print "Cross Numbered", format(Now, "HH:mm:ss")
'
'
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        rng.bookMarks.ShowHidden = True
'        For Each book In rng.bookMarks
'            str = book.name & book.start & book.End
''            On Error Resume Next
''            Debug.Print book.Name, book.start, book.End, book.Range.Style, DX.ThisDoc.Styles(book.Range.Style).ListLevelNumber, book.Range.Text
''            On Error GoTo 0
'        Next
'        rng.bookMarks.ShowHidden = False
'    Next
'
'    Xebug.Print "Book", Format(Now, "HH:mm:ss")
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        For Each cc In rng.ContentControls
'            str = cc.Title & cc.tag & cc.Range.start & cc.Range.End
'            'Xebug.Print cc.Range.Paragraphs.first.Range.Text
'        Next
'    Next
'    Xebug.Print "CC", Format(Now, "HH:mm:ss")
'
'    Dim aStyles() As Variant
'    aStyles = Array("wpsDumps", "CaptionRes", "HeadingPart", "ParmHead")
'    'aStyles = Array(wdStyleHeading1, wdStyleHeading2, wdStyleHeading3, wdStyleHeading4, wdStyleHeading5, wdStyleHeading6, wdStyleHeading7, wdStyleHeading8, wdStyleHeading9, "wpsDumps", "CaptionRes", "HeadingPart", "ParmHead")
'    For i = 1 To loops
'        Dim styNo As Integer
'        Dim sty As Variant
'        For styNo = 0 To UBound(aStyles)
'            sty = aStyles(styNo)
'            Set rng = rngAll.Duplicate
'            start = rngAll.start - 1
'            guard = 1000
'            With rng.find
'                .ClearFormatting
'                .Style = sty
'                .Forward = True
'                .Format = True
'                .Wrap = wdFindContinue
'                .Execute
'                Do While .found And guard > 0
'                    If rng.start <= start Then Exit Do
'                    guard = guard - 1
'                    'Xebug.Print guard
'                    start = rng.start
'                    str = rng.text & rng.start & rng.End
'                    .Execute
'                Loop
'            End With
'        Next
'    Next
'    Xebug.Print "Styles", Format(Now, "HH:mm:ss")
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        rng.start = 0
'        rng.End = 0
'        Do
'            current = rng.start
'            Set rng = rng.GoTo(What:=wdGoToHeading, Which:=wdGoToNext)
'            If rng.start = current Then
'                ' We haven't moved because there are no more headings
'                Exit Do
'            End If
'            str = rng.Paragraphs.first.Range.text & rng.Style.NameLocal & rng.start & rng.End
'
''        If heading.Paragraphs(1).OutlineLevel = wdOutlineLevel4 Then
''
''            ' Now this is a level 4 heading. Let's do something with it.
''            ' heading.Expand Unit:=wdParagraph
''            ' Debug.Print heading.Text
''
''        End If
'        Loop
'    Next
'
'    Xebug.Print "Headings", Format(Now, "HH:mm:ss")
'
''
''    For i = 1 To loops
''        Set rng = rngAll.Duplicate
''        Dim paras As Paragraphs
''        Set paras = rng.Paragraphs
''        For Each para In paras
''            Set rng = para.Range
''            str = rng.text & para.Style.NameLocal & rng.start & rng.End
''    '        If fld.Type <> 3 And fld.Type <> 10 And fld.Type <> 12 And fld.Type <> 37 And fld.Type <> 58 And fld.Type <> 84 Then
''    '            Debug.Print fld.Type
''    '        End If
''    '        If fld.Type = 3 Then
''    '            fld.Update
''    '            Debug.Print fld.code, fld.Result
''    '        End If
''        Next
''    Next
''    Xebug.Print "Paragraphs", format(Now, "HH:mm:ss")
''
''    For i = 1 To loops
''        Set rng = rngAll.Duplicate
''        Dim paraNext As Paragraph
''        Set para = rng.Paragraphs.first
''        Do While Not para Is Nothing
''            Set paraNext = para.Next
''        'If para.Style = doc.Styles(wdStyleHeading1) Then
''            Set rng = para.Range
''            str = rng.text & para.Style.NameLocal & rng.start & rng.End
''             'para.Range.HighlightColorIndex = wdBrightGreen
''        'End If
''            Set para = paraNext
''        Loop
''    Next
''    Xebug.Print "Paragraphs (NEXT)", format(Now, "HH:mm:ss")
''
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        Dim paraPrevious As Paragraph
'        Set para = rng.Paragraphs.Last
'        Do While Not para Is Nothing
'            Set paraPrevious = para.Previous
'        'If para.Style = doc.Styles(wdStyleHeading1) Then
'            Set rng = para.Range
'            'str = rng.text & rng.start & rng.End
'            str = rng.text & para.Style.NameLocal & rng.start & rng.End
'             'para.Range.HighlightColorIndex = wdBrightGreen
'        'End If
'            Set para = paraPrevious
'        Loop
'    Next
'    Xebug.Print "Paragraphs (Previous)", Format(Now, "HH:mm:ss")
'
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        For Each fld In rng.fields
'            str = fld.Type & fld.result.text & fld.code.text & fld.result.start & fld.result.End & fld.code.start & fld.code.End
'    '        If fld.Type <> 3 And fld.Type <> 10 And fld.Type <> 12 And fld.Type <> 37 And fld.Type <> 58 And fld.Type <> 84 Then
'    '            Debug.Print fld.Type
'    '        End If
'    '        If fld.Type = 3 Then
'    '            fld.Update
'    '            Debug.Print fld.code, fld.Result
'    '        End If
'        Next
'    Next
'    Xebug.Print "Field", Format(Now, "HH:mm:ss")
'
'    Dim fldPrev As field
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        Set fld = rng.fields(rng.fields.Count)
'        Do While Not fld Is Nothing
'            Set fldPrev = fld.Previous
'            str = fld.Type & fld.result.text & fld.code.text & fld.result.start & fld.result.End & fld.code.start & fld.code.End
'            Set fld = fldPrev
'        Loop
'    Next
'    Xebug.Print "Field (Previous)", Format(Now, "HH:mm:ss")
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        For Each inl In rng.InlineShapes
'            str = inl.Range.start & inl.Range.End & inl.Height & inl.Width
'        Next
'    Next
'    Xebug.Print "Inline", Format(Now, "HH:mm:ss")
'
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        For Each shp In rng.ShapeRange
'            str = shp.Anchor.start & shp.Anchor.End & shp.Height & shp.Width
'        Next
'    Next
'    Xebug.Print "Shape", Format(Now, "HH:mm:ss")
'    Xebug.Print "--------------------------------------------"
'
'
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'
''
''Public Sub FixBookmarks()
''    Dim rng As Range
''    Dim book As Bookmark
''    Dim fld As Field
''    Dim Str As String
''
''    Dim books As New Scripting.Dictionary
''    Dim refs As New Scripting.Dictionary
''    Dim failrefs As New Scripting.Dictionary
''
''    books.CompareMode = TextCompare
''    refs.CompareMode = TextCompare
''    failrefs.CompareMode = TextCompare
''
''    Set rng = ActiveDocument.Range
''    rng.Bookmarks.ShowHidden = True
''    Xebug.Print rng.Bookmarks.count
''    For Each book In rng.Bookmarks
''        books.Add book.name, book
''
''        Str = book.name & book.start & book.End
''        If Not book.Range.Style Is Nothing Then
''       ' On Error Resume Next
'''            Debug.Print book.name, book.start, book.End, book.Range.Style, book.Range.Text ', DX.ThisDoc.Styles(book.Range.Style).ListLevelNumber
''        Else
'''            Debug.Print book.name, book.start, book.End, "-", book.Range.Text ', DX.ThisDoc.Styles(book.Range.Style).ListLevelNumber
''        End If
''        'On Error GoTo 0
''    Next
''    rng.Bookmarks.ShowHidden = False
''
''    Set rng = ActiveDocument.Range
''    'Xebug.Print rng.fields.count
''
''    Dim RegExpObj As Object
''    Dim matches As Object
''    Set RegExpObj = CreateObject("vbscript.regexp")
''    With RegExpObj
''        .IgnoreCase = True
'''        .Global = True
''        .Pattern = "(_(?:REF|TOC|HLT|PAGEREF)\d*)"
''        For Each fld In rng.fields
''            Str = fld.code.text
''            If .Test(fld.code.text) Then
''                Set matches = .Execute(fld.code.text)
''                Debug.Print Str, matches(0)
''                Str = CStr(matches(0))
''                If books.Exists(Str) Then
''                    books.Remove Str
''                    If Not refs.Exists(Str) Then
''                        refs.Add Str, fld
''                    End If
''                Else
''                    If Not refs.Exists(Str) Then
''                        If Not failrefs.Exists(Str) Then
''                            failrefs.Add Str, fld
''                        End If
''                    End If
''                End If
''            End If
''        Next
''    End With
''    Dim f As Variant
''    For Each f In failrefs
''        Debug.Print f
''    Next
''    Dim V As Variant
''    For Each V In books
''        'Xebug.Print ActiveDocument.Bookmarks(V).name
''        ActiveDocument.Bookmarks(V).Delete
''    Next
''
''        'str = fld.Result.Text & fld.code.Text & fld.Result.start & fld.Result.End & fld.code.start & fld.code.End
'''        If fld.Type <> 3 And fld.Type <> 10 And fld.Type <> 12 And fld.Type <> 37 And fld.Type <> 58 And fld.Type <> 84 Then
'''            Debug.Print fld.Type
'''        End If
'''        If fld.Type = 3 Then
'''            fld.Update
'''            If LCase(fld.code) Like LCase("*_REF*") Then Debug.Print fld.code, fld.Result
'''        End If
''
''End Sub
'
'Sub ClearBookmarks()
'     Dim intNumBookmarks As Integer
'     Dim i As Integer
'     Dim d As Integer
'     Dim name As String
'
'
'     Dim ToDelete() As String
'
'     ActiveDocument.bookMarks.ShowHidden = True
'     intNumBookmarks = ActiveDocument.bookMarks.Count
'
'     ReDim ToDelete(intNumBookmarks)
'
'     ActiveWindow.View.ShowFieldCodes = True
'
'     For i = 1 To intNumBookmarks
'         name = ActiveDocument.bookMarks(i).name
'         Selection.HomeKey Unit:=wdStory
'         Selection.find.ClearFormatting
'         With Selection.find
'            .text = name
'            .Replacement.text = ""
'            .Forward = True
'            .Wrap = wdFindAsk
'            .Format = False
'            .MatchCase = False
'            .MatchWholeWord = False
'            .MatchKashida = False
'            .MatchDiacritics = False
'            .MatchAlefHamza = False
'            .MatchControl = False
'            .MatchWildcards = False
'            .MatchSoundsLike = False
'            .MatchAllWordForms = False
'         End With
'         If Not Selection.find.Execute Then
'             d = d + 1
'             ToDelete(d) = name
'         End If
'     Next i
'     If d > 0 Then
'        For i = d To 1 Step -1
'            ActiveDocument.bookMarks(ToDelete(i)).Delete
'        Next i
'     End If
'     ActiveDocument.bookMarks.ShowHidden = True
'     ActiveWindow.View.ShowFieldCodes = False
' End Sub
'
'
'Public Sub TestMoveSharePointViaBGOA()
'    Dim docUrl As String
'    Dim newDocUrl As String
'    Dim user As String
'
'    Dim Addin As Object
'
'    docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"
'    newDocUrl = "http://crisnet/project/90010/Project/00_Sales/Test.doc"
'    user = "matrix\adminply"
'
'    Set Addin = GetAutomationObject
'    If Not Addin Is Nothing Then
'        Dim res As String
'        res = Addin.HelloWorld
'        Debug.Print res
'        res = Addin.MoveFileInSharePoint(docUrl, newDocUrl, user)
'        Debug.Print res
'    End If
'End Sub
'
'Sub TestInlinqWebServiceUpgrade()
'
'    Dim WebRequest As New XMLHTTP60
'    Dim strRequest As String
'    Dim docResponse As New DOMDocument60
'
'    Const urlRef As String = "http://crisnet/_vti_bin/SharePointPortalManagement.WebServices.asmx"
'
'    strRequest = _
'        "<?xml version='1.0' encoding='utf-8'?> " & _
'        "<soap12:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap12='http://www.w3.org/2003/05/soap-envelope'> " & _
'        "  <soap12:Body> " & _
'        "    <UpgradeDocument xmlns='http://beumergroup.com/' >" & _
'        "       <url>http://crisnet/project/90010/Project/00_Sales/Test.doc</url>" & _
'        "       <newUrl>http://crisnet/project/90010/Project/00_Sales/Test.docx</newUrl>" & _
'        "       <user>matrix\adminply</user>" & _
'        "    </UpgradeDocument>" & _
'        "  </soap12:Body> " & _
'        "</soap12:Envelope>"
'
'    WebRequest.Open "POST", urlRef, False
'    'WebRequest.setRequestHeader "Content-Type", "application/soap+xml; charset=utf-8"
'    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
'    'WebRequest.setRequestHeader "Content-Length", "length"
'    'WebRequest.setRequestHeader "Content-Length", Len(strRequest)
'    WebRequest.setRequestHeader "HOST", "crisnet"
'    WebRequest.setRequestHeader "SOAPAction", "http://beumergroup.com/UpgradeDocument"
'
'    WebRequest.send strRequest
'
'    Set docResponse = WebRequest.responseXML
'    Xebug.Print docResponse.text
'    docResponse.setProperty "SelectionNamespaces", "xmlns:x='http://schemas.microsoft.com/sharepoint/soap/'"
'
'    Xebug.Print docResponse.SelectNodes("//x:_sList").length ' >>> Now it Works!!
'End Sub
'
'Sub TestHelloWorldWebService()
'    Dim docUrl As String
'    Dim newDocUrl As String
'    Dim user As String
'
'    docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"
'    newDocUrl = "http://crisnet/project/90010/Project/00_Sales/Test.doc"
'    user = "matrix\adminply"
'
'
'Const urlRef As String = "http://crisnet/project/90010/_vti_bin/SharePointPortalManagement.WebServices.asmx"
'Dim WebRequest As New XMLHTTP60, strRequest As String
'WebRequest.Open "POST", urlRef, False
'WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
'WebRequest.setRequestHeader "Content-Length", "length"
'WebRequest.setRequestHeader "SOAPAction", "http://beumergroup.com/HelloWorld"
'strRequest = _
'    "<?xml version='1.0' encoding='utf-8'?> " & _
'    "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'> " & _
'    "  <soap:Body> " & _
'    "    <HelloWorld xmlns='http://tempuri.org/' />" & _
'    "  </soap:Body> " & _
'    "</soap:Envelope>"
'
''    "    <UpgradeDocument xmlns='http://tempuri.org/' >" & _
''    "       <url>http://crisnet/project/90010/Project/00_Sales/Test.doc</url>" & _
''    "       <newUrl>http://crisnet/project/90010/Project/00_Sales/Test.docx</newUrl>" & _
''    "       <user>matrix\adminply</user>" & _
'
'
'WebRequest.send strRequest
'
'Dim docResponse As New DOMDocument60
'Set docResponse = WebRequest.responseXML
'Xebug.Print docResponse.text
'docResponse.setProperty "SelectionNamespaces", "xmlns:x='http://schemas.microsoft.com/sharepoint/soap/'"
'
'Xebug.Print docResponse.SelectNodes("//x:_sList").length ' >>> Now it Works!!
'End Sub
'
'
'Public Sub TestMoveTextBoxesToFirstPage()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "TestMoveTextBoxesToFirstPage", True
'
'    DX.MoveTextBoxesToFirstPage
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'End Sub
'
'Public Sub TestFixBookmarks()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Fix Bookmarks", True
'    DX.FixBookmarks
'    DX.FixOldCaptions
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'End Sub
'
'
'Public Sub HighlightCrossRefs()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Highlight bookmarks", True
'     ActiveDocument.bookMarks.ShowHidden = True
'     Dim bk As Bookmark
'     For Each bk In ActiveDocument.bookMarks
'         If LCase(Left(bk.name, 4)) = "_ref" Then
'             If bk.Range.HighlightColorIndex <> wdNoHighlight Then
'                bk.Range.HighlightColorIndex = wdTeal
'             Else
'                bk.Range.HighlightColorIndex = wdPink
'             End If
'         End If
'     Next
'     ActiveDocument.bookMarks.ShowHidden = True
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
' End Sub
'
'Public Sub BeforeBookmark()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Before Bookmark", True
'
'    Dim bk As Bookmark
'    Dim oOriginal As Range
'    Dim oRng As Range
'    Dim sText As String: sText = "toto"
'    Dim bkName As String
'    Dim i As Integer
'    For i = Selection.bookMarks.Count To 1 Step -1
'        Set bk = Selection.bookMarks(i)
'        bkName = bk.name
'        Debug.Print bk.name, bk.start, bk.End
'        If i > 1 Then
'            bk.Delete
'        Else
'            Set oRng = bk.Range
'            oRng.InsertBefore sText
'            oRng.MoveStart Count:=Len(sText)
''            oRng.MoveEnd count:=Len(sText)
'            'bk.Delete
'            oRng.bookMarks.Add bkName
'        End If
'    Next
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestRenameXML()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Before Bookmark", True
'    Dim oNode As CustomXMLNode
'    'Set oNode = DX.RenameNode("/DocumentInfo", "ConvertedFrom", "Conversion")
'    'Set oNode = DX.RenameNode("/DocumentInfo", "Conversion", "ConvertedFrom")
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestA()
'    Dim rng As Range
'    Dim p As Long
'    Dim i As Long
'    Dim para As Paragraph
'    Dim found As Boolean
'
'
'    If Selection.Range.ShapeRange.Count > 0 Then
'        For p = 1 To Selection.Paragraphs.Count
'            Set para = Selection.Paragraphs(p)
'            Set rng = para.Range
'            Dim rngCh As Range
'            For i = rng.start To rng.End
'                Set rngCh = rng.Duplicate
'                rngCh.start = i
'                rngCh.End = i + 1
'                Debug.Print i, "!" & rngCh.text & "!"
'                If rngCh.ShapeRange.Count > 0 Then
'                    Debug.Print "-----------------> " & rngCh.ShapeRange.Count & " " & rngCh.ShapeRange(1).name
'                    'found = True
'                    'Exit For
'                End If
'            Next
'            'If found Then Exit For
'        Next
'    '        rng.End = rng.End - 1
'    '        rng.Select
'    '        rng.text = "Changed"
'
'    End If
'End Sub
'
'
'Sub ResetPictureSizes()
'     Dim ILS As InlineShape
'     Dim shp As Shape
'     Dim i As Integer
'
'     For i = ActiveDocument.InlineShapes.Count To 1 Step -1
'     Set ILS = ActiveDocument.InlineShapes(i)
'        Set shp = ILS.ConvertToShape
'         shp.ScaleHeight Factor:=1, RelativeToOriginalSize:=msoTrue
'         shp.ScaleWidth Factor:=1, RelativeToOriginalSize:=msoTrue
'        Set ILS = shp.ConvertToInlineShape
'        ' ILS.Reset
'     Next
'
'     For Each shp In ActiveDocument.Shapes
'         shp.ScaleHeight Factor:=1, RelativeToOriginalSize:=msoTrue
'         shp.ScaleWidth Factor:=1, RelativeToOriginalSize:=msoTrue
'     Next
' End Sub
'
'Public Sub SaveImage()
'
''Dim ImageStream As Object
'Dim fileName As String
'Dim lWritePos As Long
'Dim vData() As Byte
'Dim prefix As String
'Dim inl As InlineShape
'Dim shp As Shape
'Dim inlNew As InlineShape
'Dim shpNew As Shape
'Dim doc As Document
'Dim newDoc As Document
'
'Set doc = ActiveDocument
'
'Dim ScreenUpdating As Boolean
'ScreenUpdating = Application.ScreenUpdating
'Application.ScreenUpdating = True
'
'If doc.InlineShapes.Count > 0 Then
'    prefix = "inl"
'ElseIf doc.Shapes.Count > 0 Then
'    prefix = "shp"
'End If
'
'If prefix > "" Then
'    Set newDoc = Application.Documents.Add(Visible:=False)
'End If
'
'If prefix = "inl" Then
'    Set inl = doc.InlineShapes(1)
'ElseIf prefix = "shp" Then
'    Set shp = doc.Shapes(1)
'    Set inl = shp.ConvertToInlineShape
'End If
'
'inl.Reset
'inl.LockAspectRatio = False
'inl.ScaleHeight = 100
'inl.ScaleWidth = 100
'inl.LockAspectRatio = True
'inl.Range.copy
'
'If prefix > "" Then
'    newDoc.Range.Paste
'    If newDoc.InlineShapes.Count > 0 Then
'        Set inlNew = newDoc.InlineShapes(1)
'        Set shpNew = inlNew.ConvertToShape
'    Else
'        Set shpNew = newDoc.Shapes(1)
'        Set inlNew = shpNew.ConvertToInlineShape
'        inlNew.Reset
'        Set shpNew = inlNew.ConvertToShape
'    End If
'
'    shpNew.LockAspectRatio = False
'    shpNew.ScaleHeight 1, msoCTrue
'    shpNew.ScaleWidth 1, msoCTrue
'    shpNew.line.Visible = msoFalse
'    shpNew.LockAspectRatio = True
'    vData = shpNew.Anchor.EnhMetaFileBits
'
'    fileName = GetTempFile(prefix, "emf")
'    Open fileName For Binary Access Write As #1
'    lWritePos = 1
'    Put #1, lWritePos, vData
'    Close #1
'
'    Set inlNew = shpNew.ConvertToInlineShape
'    vData = inlNew.Range.EnhMetaFileBits
'    fileName = GetTempFile(prefix, "emf")
'    Open fileName For Binary Access Write As #1
'    lWritePos = 1
'    Put #1, lWritePos, vData
'    Close #1
'
'    'newDoc.Close wdDoNotSaveChanges
'
'End If
'
'End Sub
'
'Public Sub ReadText()
'    Dim rng As Range
'    'Dim cc As ContentControl
'    'Set cc = ActiveDocument.ContentControls(1)
'
'    Set rng = Selection.Range.Paragraphs.first.Range.Characters(2)
'    'Xebug.Print rng.text & "!"; AscW(rng.text); rng.XML(True)
'    Dim doc As Document
'    Set doc = Application.Documents.Add()
'    doc.Range.InsertAfter Selection.XML
'    doc.Activate
'
'End Sub
'
'Public Sub BreakiLinks()
'    Dim fld As field
'    Dim rng As Range
'    Dim inl As InlineShape
'    Dim i As Integer
'
'    Set inl = ActiveDocument.InlineShapes(1)
'    Set rng = inl.Range
'    If rng.fields.Count > 0 Then
'        For i = rng.fields.Count To 1 Step -1
'        Set fld = rng.fields(i)
'            If LCase(Trim(fld.code)) Like "includepicture*" Then
'                Debug.Print fld.code
'                fld.Unlink
'            End If
'        Next
'    End If
'
'End Sub
'
'Public Sub SaveImage2()
'Dim fileName As String
'Dim lWritePos As Long
'Dim vData() As Byte
'Dim prefix As String
'Dim inl As InlineShape
'Dim shp As Shape
'Dim inlNew As InlineShape
'Dim shpNew As Shape
'Dim doc As Document
'Dim newDoc As Document
'
'Dim book As Bookmark
'    Set inlNew = ActiveDocument.InlineShapes(1)
'    'inlNew.Select
'    'Set book = ActiveDocument.Bookmarks.Add(Selection.Range)
'    vData = Selection.EnhMetaFileBits
'    fileName = GetTempFile(prefix, "emf")
'    Open fileName For Binary Access Write As #1
'    lWritePos = 1
'    Put #1, lWritePos, vData
'    Close #1
'End Sub
'
'
'Public Sub SaveImage3()
'
''Dim ImageStream As Object
'Dim fileName As String
'Dim filesFolder As String
'Dim lWritePos As Long
'Dim vData() As Byte
'Dim prefix As String
'Dim inl As InlineShape
'Dim shp As Shape
'Dim inlNew As InlineShape
'Dim shpNew As Shape
'Dim doc As Document
'Dim newDoc As Document
'
'Set doc = ActiveDocument
'
'Dim ScreenUpdating As Boolean
'ScreenUpdating = Application.ScreenUpdating
'Application.ScreenUpdating = True
'
'If doc.InlineShapes.Count > 0 Then
'    prefix = "inl"
'ElseIf doc.Shapes.Count > 0 Then
'    prefix = "shp"
'End If
'
'If prefix > "" Then
'    Set newDoc = Application.Documents.Add(Visible:=False)
'End If
'
'If prefix = "inl" Then
'    Set inl = doc.InlineShapes(1)
'ElseIf prefix = "shp" Then
'    Set shp = doc.Shapes(1)
'    Set inl = shp.ConvertToInlineShape
'End If
'
'inl.Reset
'inl.LockAspectRatio = False
'inl.ScaleHeight = 100
'inl.ScaleWidth = 100
'inl.LockAspectRatio = True
'
'inl.Range.copy
'
'If prefix > "" Then
'    newDoc.Range.Paste
'    If newDoc.InlineShapes.Count > 0 Then
'        Set inlNew = newDoc.InlineShapes(1)
'        Set shpNew = inlNew.ConvertToShape
'    Else
'        Set shpNew = newDoc.Shapes(1)
'        Set inlNew = shpNew.ConvertToInlineShape
'        inlNew.Reset
'        Set shpNew = inlNew.ConvertToShape
'    End If
'
'    shpNew.LockAspectRatio = False
'    shpNew.ScaleHeight 1, msoCTrue
'    shpNew.ScaleWidth 1, msoCTrue
'    shpNew.line.Visible = msoFalse
'    shpNew.LockAspectRatio = True
'
'    fileName = GetTempFile(prefix, "htm")
'    filesFolder = Replace(fileName, ".htm", "_files")
'    newDoc.SaveAs2 fileName, wdFormatHTML, , , False, , , , True
'    newDoc.Close wdDoNotSaveChanges
'
'    Dim StrFile As String
'    StrFile = Dir(filesFolder & "\image*")
'    Do While Len(StrFile) > 0
'        Debug.Print StrFile
'        StrFile = Dir
'    Loop
'    If StrFile > "" Then
'        Debug.Print StrFile
'    End If
'
'End If
'
'End Sub
'
'Sub IterateParasTheFastAndFlexibleWay()
' Dim doc As Document
' Dim para As Paragraph
' Dim paraNext As Paragraph
' Dim str As String
' Set doc = ActiveDocument
' Debug.Print Now
' Set para = doc.Paragraphs.first
' Do While Not para Is Nothing
' Set paraNext = para.Next
' 'If para.Style = doc.Styles(wdStyleHeading1) Then
'      str = para.Range.text & para.Style.NameLocal & para.Range.start & para.Range.End
'      'para.Range.HighlightColorIndex = wdBrightGreen
' 'End If
' Set para = paraNext
' Loop
' Debug.Print Now
'
' End Sub
'
'Public Sub TestContentTypeProperties()
'    Dim prop As MetaProperty
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test", False
'
'    For Each prop In ActiveDocument.ContentTypeProperties
'        Select Case prop.name
'        Case "Title Line 1"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-TitleLine1")
'        Case "Title Line 2"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-TitleLine2")
'        Case "Title Line 3"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-TitleLine3")
'        Case "Title Line 4"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-TitleLine4")
'        Case "Title Line 5"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-TitleLine5")
'        Case "Doc Type"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-DocType")
'        Case "Classification Label"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-ClassificationLabel")
'        Case "Project No."
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-ProjectNo")
'        Case "Workflow Label"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-WorkflowLabel")
'        Case "Additional ID"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-FrontPageInfo")
'        Case "Doc No."
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-DocNo")
'        Case "Supplier File Name"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-SupplierFileName")
'
'
'        'Revision
'        Case "Rev No."
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-Revision")
'        Case "Rev Date"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-Date")
'        Case "Rev Description"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-Description")
'        Case "Rev Author"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-Author")
'
'        ' Lookup
'        Case "Doc Main Type"
'            Dim docMainType As String
'            prop.value = "Project Document"
'            docMainType = DX.ReadText("/DocumentInfo/DocumentInfo-DocType")
'            Dim j As Integer
'            For j = 0 To UBound(aDocumentTypes, 1)
'                If aDocumentTypes(j, 0) = docMainType Then
'                    prop.value = aDocumentTypes(j, 1)
'                    Exit For
'                End If
'            Next
'        Case "Language"
'            Dim i As Integer
'            Dim lang As String
'            lang = DX.ReadText("/DocumentInfo/DocumentInfo-Language")
'            For i = 0 To UBound(aLanguages, 1)
'                If aLanguages(i, 0) = lang Then
'                    lang = aLanguages(i, 3)
'                    Exit For
'                End If
'            Next
'            If i > UBound(aLanguages, 1) Then
'                prop.value = ""
'            Else
'                prop.value = lang
'            End If
'
'        ' RegEx From DocNo
'        Case "Part"
'            Dim strPart As String
'            strPart = DX.ReadText("/DocumentInfo/DocumentInfo-DocNo")
'            If Not InStr(strPart, "/") > 0 Then
'                strPart = "-"
'            Else
'                strPart = Trim(Split(strPart, "/")(0))
'            End If
'            prop.value = strPart
'        Case "Section"
'            Dim strSection As String
'            strSection = DX.ReadText("/DocumentInfo/DocumentInfo-DocNo")
'            If Not InStr(strSection, "/") > 0 Then
'                strSection = "-"
'            Else
'                strSection = Trim(Split(strSection, "/")(1))
'            End If
'            prop.value = strSection
'        ' Calculate from ProjectNo + DocNo
'        Case "Doc Order"
'            Dim strDocOrder As String
'            Dim No1 As String
'            Dim No2 As String
'            Dim No3 As String
'            Dim No4 As String
'            Dim aNo() As String
'            strDocOrder = DX.ReadText("/DocumentInfo/DocumentInfo-DocNo")
'            If Not InStr(strDocOrder, "/") > 0 Then
'                strDocOrder = ""
'            Else
'                No1 = Trim(Split(strDocOrder, "/")(0))
'                No4 = Trim(Split(strDocOrder, "/")(1))
'                If No1 = "" Then
'                    No1 = "0000"
'                ElseIf Left(UCase(No1), 1) = "O" Then
'                    No1 = "35" & Right("00" & No1, 2)
'                ElseIf Left(UCase(No1), 1) = "M" Then
'                    No1 = "55" & Right("00" & Mid(No1, 2), 2)
'                Else
'                    No1 = "75" & Right("00" & Mid(No1, 2), 2)
'                End If
'                If No4 > "" Then
'                    No4 = Replace(No4, "-", "")
'                    No2 = Left(No4, 1)
'                    No3 = Mid(No4, 2)
'                    No4 = ""
'                End If
'                If No3 = "" Then
'                ElseIf InStr(No3, ".") > 0 Then
'                    aNo = Split(No3, ".")
'                    No3 = Right("00" & aNo(0), 2)
'                    No4 = Right("00" & aNo(1), 2)
'                Else
'                    No3 = "00" & No3
'                End If
'                strDocOrder = No1 & No2 & No3 & No4
'            End If
'            prop.value = strDocOrder
'
'        ' ????
'        Case "Description"
'            prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-Description")
'
'        'Formula
'        Case "Doc Search Title"
'            'prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-DocSearchTitle")
'        Case "Doc Title"
'            'prop.value = DX.ReadText("/DocumentInfo/DocumentInfo-DocTitle")
'
'
'        End Select
'        Debug.Print prop.name, prop.value 'If prop.value = "" Then
'        'Xebug.Print "Case """ & prop.name & """"
'        'Xebug.Print , "prop.Value = DX.ReadText(""/DocumentInfo/DocumentInfo-" & Replace(Replace(prop.name, "Title ", "Title"), " ", "") & """)"
'    Next
'
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'
'End Sub
'
'Public Sub TestMeta()
'    Dim prop As MetaProperty
'    Dim result As String
'
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test", False
'    Dim validate As Boolean
'
'    For Each prop In ActiveDocument.ContentTypeProperties
'        validate = False
'        Select Case prop.name
'        Case "Language"
'            validate = True
'            Dim i As Integer
'            Dim lang As String
'            lang = DX.ReadText("/DocumentInfo/DocumentInfo-Language")
'            For i = 0 To UBound(aLanguages, 1)
'                If aLanguages(i, 0) = lang Then
'                    lang = aLanguages(i, 3)
'                    Exit For
'                End If
'            Next
'            If i > UBound(aLanguages, 1) Then
'                prop.value = ""
'            Else
'                prop.value = lang
'                If prop.validate > "" Then ' Failed
'                    prop.value = UCase(lang)
'                End If
'                If prop.validate > "" Then ' Failed again
'                    prop.value = lang
'                End If
'            End If
'
'        Case "Part"
'            validate = True
'            Dim strPart As String
'            strPart = DX.ReadText("/DocumentInfo/DocumentInfo-DocNo")
'            If Not InStr(strPart, "/") > 0 Then
'                strPart = "-"
'            Else
'                strPart = Trim(Split(strPart, "/")(0))
'            End If
'            prop.value = strPart
'        Case "Status"
'            validate = True
'        End Select
'        If validate Then
'            result = prop.validate
'            Debug.Print prop.name, prop.value, Not (result > "")
'        End If
'    Next
'
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestDocType()
'    Dim d As New DocType
'    d.Init ("Standard Sheet")
'    Xebug.Print d.Index, d.GetValue("HeadingLayout")
'End Sub
'
'Public Sub TestPreviousParagraphSpeed()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test Speed", False
'
'    Dim i As Integer
'    Dim inl As InlineShape
'    Dim fld As field
'    Dim str As String
'    Dim strPara As String
'    Dim para As Paragraph
'    Dim guard As Integer
'    Dim rng As Range
'    Dim rngAll As Range
'    Set rngAll = DX.GetDocumentRange
'    Dim start As Long
'    Dim book As Bookmark
'    Dim cc As ContentControl
'    Dim cross As String
'    Dim c As Integer
'    Dim aCross() As String
'    Dim shp As Shape
'    Dim current As Long
'    Dim objects() As Object
'    Dim paraStart As Long
'    Dim paraEnd As Long
'
'
'    Dim loops As Integer
'    loops = 1
'
'    Xebug.Print "Start", Format(Now, "HH:mm:ss")
'    For i = 1 To loops
'        Set rng = rngAll.Duplicate
'        Dim paraPrevious As Paragraph
'        Set para = rng.Paragraphs.Last
'        Do While Not para Is Nothing
'            Set paraPrevious = para.Previous
'
'            Set rng = para.Range
'            paraStart = rng.start
'            paraEnd = rng.End
'
'            strPara = "------------ PARA, " & Replace(Replace(Replace(rng.text, vbCrLf, "|"), vbCr, "|"), vbLf, "|") & ", " & para.Style.NameLocal & ", " & paraStart & ", " & paraEnd
'
'            rng.bookMarks.ShowHidden = True
'            For Each book In rng.bookMarks
'                str = "Book, " & book.name & ", " & book.start & ", " & book.End & ", " & paraStart & ", " & paraEnd
'                If book.start < paraStart Or book.End > paraEnd Then
'                    Debug.Print strPara: strPara = ""
'                    Debug.Print str
'                End If
'            Next
'            rng.bookMarks.ShowHidden = False
'
'            For Each fld In rng.fields
'                str = "Field, " & fld.code.text & ", " & fld.result.text & ", " & fld.code.text & ", " & fld.result.start & ", " & fld.result.End & ", " & paraStart & ", " & paraEnd & ", " & fld.code.start & ", " & fld.code.End
'                If fld.result.start < paraStart Or fld.result.End > paraEnd Then
'                    Debug.Print strPara: strPara = ""
'                    Debug.Print str
'                End If
'            Next
'
'            For Each inl In rng.InlineShapes
'                str = "Inline, " & inl.Range.start & ", " & inl.Range.End & ", " & paraStart & ", " & paraEnd & ", " & inl.Height & ", " & inl.Width & inl.Type
'                If inl.Range.start < paraStart Or inl.Range.End > paraEnd Then
'                    Debug.Print strPara: strPara = ""
'                    Debug.Print str
'                End If
'            Next
'
'            For Each shp In rng.ShapeRange
'                str = "Shape, " & shp.Anchor.start & ", " & shp.Anchor.End & ", " & paraStart & ", " & paraEnd & ", " & shp.Height & ", " & shp.Width & ", " & shp.Type
'                If shp.Anchor.start < paraStart Or shp.Anchor.End > paraEnd Then
'                    Debug.Print strPara: strPara = ""
'                    Debug.Print str
'                End If
'            Next
'
'            For Each cc In rng.ContentControls
'                str = "CC, " & cc.Title & ", " & cc.tag & ", " & cc.Range.start & ", " & cc.Range.End & ", " & paraStart & ", " & paraEnd
'                If cc.Range.start < paraStart Or cc.Range.End > paraEnd Then
'                    Debug.Print strPara: strPara = ""
'                    Debug.Print str
'                End If
'            Next
'
'            Set para = paraPrevious
'        Loop
'    Next
'    Xebug.Print "Paragraphs (Previous)", Format(Now, "HH:mm:ss")
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'
'End Sub
'
'Public Sub TestFixOldCaptions()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Test"
'    UnlockAllContentControls DX.ThisDoc
'    DX.FixOldCaptions
'    DX.LockMainContentControls False
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Public Sub TestRefresh()
'    Update "Refresh"
'    Exit Sub
'
'    Application.ScreenUpdating = False
'    Dim toDX As DOCXML
'    Dim DX As New DOCXML
'    DX.Init
'    DX.WriteLog "Start"
'    Dim fromDocFullName As String
'    Dim toDoc As Document
'    Dim fromDoc As Document
'    Dim tmpFileName As String
'    Dim ok As Boolean
'    Dim bgpmTo As New BGPictureManager
'    Dim bgpmFrom As New BGPictureManager
'    fromDocFullName = "\\filer-dk1\documentation\Dokument\ATS\Master_OM\Maintenance\M2_SORT\C-1_(808492master)\SORT_C01_DA_work_version_do-not-use.doc"
'
'    'fromDocFullName = OpenConvertFileDialog()
'    If fromDocFullName > "" Then
'        On Error Resume Next
'        Set toDoc = Application.Documents(fromDocFullName)
'        On Error GoTo 0
'        If Not toDoc Is Nothing Then
'            toDoc.Close wdDoNotSaveChanges
'            Set toDoc = Nothing
'            On Error Resume Next
'            Set toDoc = Application.Documents(fromDocFullName)
'            On Error GoTo 0
'        End If
'        If toDoc Is Nothing Then
'            Set toDoc = Application.Documents.Open(fromDocFullName, False, True, False, , , , , , , , True)
'            fromDocFullName = toDoc.fullName
'        Else
'            MsgBox "Alraedy open. Cannot convert"
'            Exit Sub
'        End If
'    End If
'    DX.WriteLog "Opened"
'
'    On Error Resume Next
'    MkDir UserTemp() & "\Conversion"
'    On Error GoTo 0
'    If LCase(fromDocFullName) Like "*.doc" Then
'        tmpFileName = UserTemp() & "\Conversion\" & toDoc.name & "x"
'    Else
'        tmpFileName = UserTemp() & "\Conversion\" & toDoc.name
'    End If
'
'
'    toDoc.Convert
'    toDoc.Compatibility(wdDontUseHTMLParagraphAutoSpacing) = True
'    toDoc.SaveAs2 tmpFileName, WdSaveFormat.wdFormatXMLDocument, , , False, , , , , , , , , , , , False
'    DX.WriteLog "Saved temp"
'    toDoc.attachedTemplate = DX.ThisDoc.attachedTemplate
'    Set toDX = New DOCXML
'    toDX.Init toDoc
'
'    DX.WriteLog "Converted and saved"
'
'    Set fromDoc = Application.Documents.Open(fromDocFullName, False, True, False, , , , , , , , True)
'    ok = bgpmFrom.ReadRange(fromDoc.Content, DX, True)
'
'    DX.WriteLog "Reopened original"
'
'    If ok Then
'        ok = bgpmFrom.ReadOldFilename(toDX, True)
'        If ok Then
'            ok = bgpmFrom.ReadInfo(toDX, False)
'        End If
'        If ok Then
'            ok = bgpmFrom.Read(toDX, True, False, False)
'        End If
'    End If
'
'    DX.WriteLog "Read picures from original"
'
'
'    Dim bgpFrom As BGPicture
'    Dim bgpTo As BGPicture
'    Dim key As Variant
'
''    DX.WriteLog "Start checking files"
''    For Each key In bgpmFrom.GetBGPictures.Keys
''        Set bgpFrom = bgpmFrom.GetBGPictures(key)
''        On Error Resume Next
''        Set bgpTo = bgpmTo.GetBGPictures(key)
''        On Error GoTo 0
''        If bgpTo Is Nothing Then
''            'Xebug.Print key, bgpFrom.sourceFullName, "Not found.."
''        Else
''            bgpTo.Read toDX, True, False, False, False
''            'Xebug.Print key, bgpFrom.sourceFullName, bgpTo.FoundFile
''        End If
''    Next
'
'    ' Change Pictures to V
'    ok = bgpmTo.ReadRange(toDoc.Content, DX, False)
'    If ok Then
'        ok = bgpmTo.ReadInfo(toDX, False)
'        If ok Then
'            ok = bgpmTo.BreakBrokenLinks
'        End If
'        If ok Then
'            ok = bgpmTo.ChangePicturesToV(bgpmFrom)
'        End If
'    End If
'
'    DX.WriteLog "Updated pictures"
'
'    Application.ScreenUpdating = True
'
'
'    Stop
'
'End Sub
'
'Public Sub TestCheckParagraphs()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Check Paragraphs", False
'    'DX.FixBookmarks
'    DX.CheckParagraphs "Standard Document"
'    DX.updated = True
'    DX.Epilog
'    Set DX = Nothing
'End Sub
'
'Sub TestCheckOut()
'    Dim docUrl As String
'    Dim newDocUrl As String
'    Dim user As String
'
'    docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"
'
'    Const urlRef As String = "http://crisnet/project/90010/_vti_bin/Lists.asmx"
'    Dim WebRequest As New XMLHTTP60, strRequest As String
'    WebRequest.Open "POST", urlRef, False
'    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
'    WebRequest.setRequestHeader "Content-Length", "length"
'    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CheckOutFile"
'
'    strRequest = _
'    "<?xml version='1.0' encoding='utf-8'?>" & _
'    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
'    "  <soap:Body>" & _
'    "    <CheckOutFile xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
'    "      <pageUrl>" & docUrl & "</pageUrl>" & _
'    "      <checkoutToLocal>true</checkoutToLocal>" & _
'    "      <lastmodified/>" & _
'    "    </CheckOutFile>" & _
'    "  </soap:Body>" & _
'    "</soap:Envelope>"
'
'
'    WebRequest.send strRequest
'
'    Dim docResponse As New DOMDocument60
'    Set docResponse = WebRequest.responseXML
'    Xebug.Print docResponse.text
'End Sub
'
'
'Sub TestMoveSharePoint()
'    Dim docUrl As String
'    Dim newDocUrl As String
'    Dim user As String
'
'    docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"
'    'newDocUrl = "http://crisnet/project/90010/Documentation/Test.docx"
'    newDocUrl = "http://crisnet/project/90010/Project/00_Sales/Test.doc"
'    user = "matrix\adminply"
'    user = "beumer-de\khm"
'
'
'Const urlRef As String = "http://crisnet/project/90010/_vti_bin/SharePointPortalManagement.WebServices.asmx"
'Dim WebRequest As New XMLHTTP60, strRequest As String
'WebRequest.Open "POST", urlRef, False
'WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
'WebRequest.setRequestHeader "Content-Length", "length"
'WebRequest.setRequestHeader "SOAPAction", "http://beumergroup.com/UpgradeDocument"
'strRequest = _
'    "<?xml version='1.0' encoding='utf-8'?> " & _
'    "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'> " & _
'    "  <soap:Body> " & _
'    "    <UpgradeDocument xmlns='http://beumergroup.com/' >" & _
'    "       <url>" & docUrl & "</url>" & _
'    "       <newUrl>" & newDocUrl & "</newUrl>" & _
'    "       <user>" & user & "</user>" & _
'    "    </UpgradeDocument>" & _
'    "  </soap:Body> " & _
'    "</soap:Envelope>"
'
''    "    <UpgradeDocument xmlns='http://tempuri.org/' >" & _
''    "       <url>http://crisnet/project/90010/Project/00_Sales/Test.doc</url>" & _
''    "       <newUrl>http://crisnet/project/90010/Project/00_Sales/Test.docx</newUrl>" & _
''    "       <user>matrix\adminply</user>" & _
'
'
'WebRequest.send strRequest
'
'Dim docResponse As New DOMDocument60
'Set docResponse = WebRequest.responseXML
'Xebug.Print docResponse.text
'docResponse.setProperty "SelectionNamespaces", "xmlns:x='http://schemas.microsoft.com/sharepoint/soap/'"
'
'Xebug.Print docResponse.SelectNodes("//x:_sList").length ' >>> Now it Works!!
'End Sub
'
'Public Sub GetSPCatalog()
'
'    Xebug.Print Options.DefaultFilePath(wdDocumentsPath)
'    Xebug.Print Options.DefaultFilePath(wdCurrentFolderPath)
'
'
'    Dim dlgS As Dialog
'    Set dlgS = Application.Dialogs(wdDialogFileSaveAs)
'    Xebug.Print dlgS.name
'
'    Xebug.Print Options.DefaultFilePath(wdDocumentsPath)
'    Xebug.Print Options.DefaultFilePath(wdCurrentFolderPath)
'
'
''    Dim dlg As FileDialog
''    Set dlg = Application.FileDialog(msoFileDialogSaveAs)
''    Xebug.Print dlg.initialFilename
''    dlg.show
''    Xebug.Print dlg.initialFilename
''    Set dlg = Nothing
'
''            If SaveFolder Or (doc.fullName <> doc.name) Then
''                Application.FileDialog(msoFileDialogSaveAs).initialFilename = doc.fullName 'doc.path & IIf(InStr(doc.fullName, "\") > 0, "\", "/")
''            Else
''
''                Dim initialFilename As String
''                initialFilename = FixPath(DV(doc, "ConvertToFullName"))
''                If initialFilename > "" Then
''                    Application.FileDialog(msoFileDialogSaveAs).initialFilename = initialFilename
''                Else
''                    Dim FileSaveAsSetting As String
''                    FileSaveAsSetting = Dialogs(wdDialogToolsOptionsFileLocations).Setting
''                    If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
''                        FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
''                    End If
''
''                    Application.FileDialog(msoFileDialogSaveAs).initialFilename = FixPath(FileSaveAsSetting)
''                End If
''            End If
''
''            Application.FileDialog(msoFileDialogSaveAs).Title = ""
''            Application.FileDialog(msoFileDialogSaveAs).ButtonName = ""
''            Application.FileDialog(msoFileDialogSaveAs).FilterIndex = 1
''
''            Dim choice As Integer
''            choice = Application.FileDialog(msoFileDialogSaveAs).show
''
'End Sub
'
'    Sub EnumSEVars()
'        Dim strVar As String
'        Dim i As Long
'        For i = 1 To 255
'            strVar = Environ$(i)
'            If LenB(strVar) = 0& Then Exit For
'            Debug.Print strVar
'        Next
'    End Sub
'Sub Command_Line_Call()
'Dim strCmdText As String
'Dim aCmdData() As String
'strCmdText = Trim$(Command$)
'Xebug.Print strCmdText
'aCmdData = Split(strCmdText, ",")
'
'End Sub
'
'Public Sub AfterSaveLocal()
'    MsgBox "Saved Special"
'End Sub
'
'Public Sub TestOnTime()
'    Application.OnTime Now + TimeValue("00:00:02"), "bg_Test.AfterSaveLocal"
'    'Application.OnTime Now + TimeValue("00:00:02"), "BGdocProject.bg_Support.AfterSave"
'End Sub
'
'Public Sub TestUpdateContent()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.Prolog "Update Contents"
'
'    DX.UpdatePrepare
'    'DX.UpdateLayout
'    DX.UpdateContent
'    'DX.UpdateFinish
'
'    DX.updated = True
'    DX.Epilog
'    DX.WriteLog "----------Done-------------"
'    Set DX = Nothing
'End Sub
'
'Public Sub Test()
'    Dim DX As New DOCXML
'    DX.Init
'    DX.WriteLog "----------Start-------------"
'    DX.Prolog "HeaderFooter", True
'
'    DX.SetHeaderFooter True
'    DX.SpecialFirstHeaderFooter True
'
'    DX.updated = True
'    DX.Epilog
'    DX.WriteLog "----------Done-------------"
'    Set DX = Nothing
'End Sub
'
'Public Sub RiibonTest()
'    Dim app As Application
'    Set app = Application
'    Dim btn As CommandBarButton
'    Set btn = app.CommandBars.FindControl(msoControlButton, 113)
'    Xebug.Print btn.Enabled
'
'End Sub
'
'
'Public Sub ResetAllContentControls()
'    Dim cc As ContentControl
'    Dim rng As Range
'    Dim stry As Range
'    Dim aTag() As String
'    Dim path As String
'
'    ActiveDocument.Styles("Placeholder Text").Font.Size = 5
'
'    For Each stry In ActiveDocument.StoryRanges
'        Set rng = stry
'        Do
'            For Each cc In rng.ContentControls
'                If cc.tag Like "*Logo*" Or cc.tag Like "*Info*TOC*" Or cc.tag Like "*Info*TOF*" Or cc.tag Like "*Info*TOT*" _
'                Or cc.tag = "DocumentInfo-FrontPage" Or cc.tag = "DocumentInfo-Translation" Or cc.tag Like "*:Translation" Then
'                    ' Do Nothing
'                ElseIf cc.tag Like "*:Translation" Then
'                    cc.Range.text = ""
'                    cc.SetPlaceholderText , , cc.tag
'                ElseIf cc.tag = "DocumentLabel-Front:FrontPage" Then
'                    cc.Range.text = "<|"
'                ElseIf cc.tag = "DocumentInfo-Revisions:DocumentInformation" Then
'                    Dim tbl As table
'                    Dim row As Integer
'                    Set tbl = cc.Range.Tables(1)
'                    For row = tbl.rows.Count To 3 Step -1
'                        tbl.rows(row).Delete
'                    Next
'                    tbl.Cell(2, 1).Range.text = ""
'                    tbl.Cell(2, 2).Range.text = ""
'                    tbl.Cell(2, 3).Range.text = ""
'                    tbl.Cell(2, 4).Range.text = ""
'                    tbl.Cell(1, 1).LeftPadding = 0
'                    tbl.Cell(2, 1).LeftPadding = 0
'                    tbl.Cell(1, 4).RightPadding = 0
'                    tbl.Cell(2, 4).RightPadding = 0
'                Else
'                    cc.Range.text = ""
'                    cc.SetPlaceholderText , , cc.tag
'                End If
'                If cc.tag Like "DocumentInfo-WorkflowLabel:*" Then
'                    cc.Range.Font.TextColor = RGB(0, 157, 224)
'                End If
'
'            Next
'            Set rng = rng.NextStoryRange
'        Loop While Not rng Is Nothing
'    Next
'End Sub
'
'
'
Public Sub ListCC()
    Debug.Print "---"
    Dim cc As ContentControl
    For Each cc In ActiveDocument.Range.ContentControls
        Debug.Print cc.tag, cc.LockContents
    Next
End Sub

Public Sub FixLang()
    If ActiveDocument.Characters.Count <= 2 Then
        ActiveDocument.Range.Delete
        Dim p As Paragraph
        Set p = ActiveDocument.Paragraphs.Add(ActiveDocument.Range)
        p.Range.LanguageId = 1031
        p.Style = wdStyleHeading1
    End If
End Sub

Public Sub TestUnlockAll()
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Unlock All"
    dx.UnlockAllContentControls
    dx.LockMainContentControls False
    dx.updated = True
    dx.Epilog
    Set dx = Nothing
End Sub

Public Sub TestSetNode()
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.Prolog "Test Set Node"
    dx.SetNode "/DocumentInfo", "DocumentInfo-ShowFullName", "A"
    Debug.Print dx.ReadText("/DocumentInfo/DocumentInfo-ShowFullName")
    dx.SetNode "/DocumentInfo", "DocumentInfo-ShowFullName", "B"
    Debug.Print dx.ReadText("/DocumentInfo/DocumentInfo-ShowFullName")
    dx.DeleteNode "/DocumentInfo/DocumentInfo-ShowFullName"
    dx.updated = True
    dx.Epilog
    Set dx = Nothing
End Sub

Public Sub DeleteLastPage()
    Dim strt As Long
    Dim rng As Range
    strt = ActiveDocument.GoTo(wdGoToPage, wdGoToLast).start
    Set rng = ActiveDocument.Range(strt - 1, ActiveDocument.Range.End)
    If rng.End - rng.start = 2 Then
        rng.Delete
    End If
End Sub

Public Sub TestUpdateDocumentRangeFieldsPageRef()
    Debug.Print Now
    Application.ScreenUpdating = False
    Dim flds As fields
    Dim fld As field
    Dim fldPrev As field
    Set flds = TestGetDocumentRange(ActiveDocument).fields
    Dim fldCount As Integer
    fldCount = flds.Count
    Debug.Print Now, fldCount
    If Not fldCount = 0 Then
        Set fld = flds(fldCount)
        Do While Not fld Is Nothing
            Set fldPrev = fld.Previous
            If fld.Type = wdFieldPageRef Then
                fld.Update
            End If
            Set fld = fldPrev
        Loop
    End If
    Application.ScreenUpdating = True
    Debug.Print Now
End Sub

Public Function TestGetDocumentRange(doc As Document) As Range
    Dim rng As Range
    Dim ccFrontMatter As ContentControl
    Set ccFrontMatter = TestGetFirstContentControlByTag(doc, "DocumentInfo-FrontMatter:DocumentInformation")
    Set rng = doc.Range
    If Not ccFrontMatter Is Nothing Then
        rng.start = ccFrontMatter.Range.End + 1
    End If
    Set TestGetDocumentRange = rng
End Function

Public Function TestGetFirstContentControlByTag(doc As Document, tag As String) As ContentControl
    Dim ccs As ContentControls
    Set ccs = doc.SelectContentControlsByTag(tag)
    If ccs.Count = 0 Then
        Set TestGetFirstContentControlByTag = Nothing
    Else
        Set TestGetFirstContentControlByTag = ccs(1)
    End If
End Function

Public Sub TestUpdateAllFields(doc As Document)
'    Debug.Print Now
    Application.ScreenUpdating = False
    TestGetDocumentRange(doc).fields.Update
    Application.ScreenUpdating = True
'    Debug.Print Now
End Sub

Sub readParasUsingFor()
    Dim c As Long
    Dim j As Long
    Dim lng As Long
    Dim s As String
    Debug.Print Now()
    With ActiveDocument.Paragraphs
        c = .Count
        For lng = 0 To 25
            For j = 1 To 100
                s = .Item(lng * 100 + j).Range.Text
            Next
            DoEvents
            Debug.Print , Now()
        Next
        Debug.Print Now()
    End With
End Sub

Sub readParasUsingForEach()
    Dim p As Word.Paragraph
    Dim s As String
    Debug.Print Now()
    For Each p In ActiveDocument.Paragraphs
        s = p.Range.Text
    Next
    Debug.Print Now()
End Sub

Public Sub CheckParagraphs()  ' SLOW. Rewrite
    Application.ScreenUpdating = False
    ' Remove this when moved to DOCXML
    Dim FoundHeadingOrParmheadOrHeadingPart As Boolean
    Dim FoundCaptionRes As Boolean
    
    FoundHeadingOrParmheadOrHeadingPart = False
    FoundCaptionRes = False
    Dim breakBefore As Boolean
    Dim sty As Style
    Dim para As Paragraph
    ActiveDocument.Bookmarks.ShowHidden = True
    Dim i As Integer
    i = -1
    For Each para In TestGetDocumentRange(ActiveDocument).Paragraphs
        DoEvents
        i = i + 1
        If i Mod 100 = 0 Then
            Debug.Print i, Now
        End If
        If Not para.Range.Style Is Nothing Then
            If para.Range.Style >= ActiveDocument.Styles(wdStyleHeading1) And para.Range.Style <= ActiveDocument.Styles(wdStyleHeading9) Then
                If method = "Convert" Then breakBefore = para.Range.ParagraphFormat.PageBreakBefore
                para.Range.Style = para.Range.Style
                If method = "Convert" Then para.Range.ParagraphFormat.PageBreakBefore = breakBefore
                If para.Range.Style <= ActiveDocument.Styles(wdStyleHeading8) Then
                    FoundHeadingOrParmheadOrHeadingPart = True
                End If
            ElseIf para.Range.Style = "wpsDumps" Then
                ConvertWPSDumpFontLine para
            ElseIf para.Range.Style Like "LineDraw*" Then
                CourierNewToMSLineDraw para.Range
            ElseIf para.Range.Style = "CaptionRes" Then
                If para.Range.fields.Count > 0 Then
                    Dim rng As Range
                    Set rng = para.Range
                    Dim IsSeq As Boolean
                    Dim IsRef As Boolean
                    Dim strField As String
                    Dim strResult
                    strField = para.Range.fields(1).code
                    strResult = para.Range.fields(1).result
                    IsSeq = (LCase(strField) Like "*seq*")
                    IsRef = (LCase(strField) Like "*ref*" And Not LCase(strField) Like "*\r*")
                    Dim bk As Bookmark
                    Dim aBKName() As String
                    Dim bkName As String
                    Set bk = Nothing
                    Dim iBK As Integer
                    If rng.Bookmarks.Count > 0 Then
                        ReDim aBKName(1 To rng.Bookmarks.Count)
                        For iBK = UBound(aBKName) To 1 Step -1
                            Set bk = rng.Bookmarks(iBK)
                            aBKName(iBK) = bk.name
                            bk.Delete
                        Next
                    Else
                        Erase aBKName
                    End If
                    If IsSeq Then
                        FoundCaptionRes = True
                        rng.End = rng.End - 1
                        Do While rng.ShapeRange.Count > 0
                            rng.start = rng.start + 1
                        Loop
                        If InStr(rng.Text, vbTab) > 0 Then
                            rng.Text = Split(rng.Text, vbTab, 2)(1)
                        Else
                            rng.Text = Trim(Split(rng.Text, strResult, 2)(1))
                        End If
                        If (Not aBKName) = -1 Then
                        Else
                            For iBK = 1 To UBound(aBKName)
                                Set bk = ActiveDocument.Bookmarks.Add(aBKName(iBK), rng)
                            Next
                        End If
                        para.Range.Style = wdStyleHeading1
                        para.Range.ParagraphFormat.TabStops.ClearAll
                        para.Range.ParagraphFormat.TabStops.Add Position:=64.05, Alignment:=wdAlignTabLeft, Leader:=wdTabLeaderSpaces
                    ElseIf IsRef Then
                        Dim fieldNo As field
                        Set rng = para.Range
                        Do While rng.ShapeRange.Count > 0
                            rng.start = rng.start + 1
                        Loop
                        rng.End = rng.start
                        rng.Text = vbTab
                        rng.End = rng.start
                        Set fieldNo = rng.fields.Add(rng, wdFieldEmpty, Trim(strField) & " \r")
                        
                        If (Not aBKName) = -1 Then
                        Else
                            For iBK = 1 To UBound(aBKName)
                                Set bk = ActiveDocument.Bookmarks.Add(aBKName(iBK), rng)
                            Next
                        End If
                    End If
                End If
            ElseIf para.Range.Style = "ParmHead" Or para.Range.Style = "HeadingPart" Then
                FoundHeadingOrParmheadOrHeadingPart = True
            End If
        End If
    Next
    Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "bg_support"
Option Explicit

' ActiveWorkbook.SaveAs Filename:="D:\LangTable.txt", FileFormat:=xlUnicodeText

Public SaveDontSaveCancelAnswer As String
Public SaveDontSaveCancelMode As String
Public SaveDontSaveCancelFileName As String

Public UserName As String
Public CachedUserTemp As String

Public FoundUserName As Boolean
Public BatchSaveAsFullName As String
Public ConvertedFullName As String

Public ReadTemplateComments As Boolean

Public aLanguages() As String
Public aTerms() As String
Public aDocumentTypes() As String
Public aDocTypes() As String

Public LanguageFieldIndexes() As Variant
Public LanguageFields() As Variant
Public PathLanguageFields() As Variant
Public Months As Scripting.Dictionary
Public TableRevNames As Scripting.Dictionary
Public RevNames As String
Public Conv437Unicode() As Variant
Public Conv850Unicode() As Variant
Public Conv863Unicode() As Variant

Public Const rootV As String = "V:\Documentation\BDK"
Public Const rootL As String = "L:\Dokument"

Public Enum PictureType
    InlineType
    ShapeType
    EmbedType
End Enum

Public Enum BGDocState
    dsAutoNew
    dsAutoOpen
    dsNoAutoNew
    dsNoAutoOpen
    dsUseForm
    dsIsForm
    dsDocument
    dsTemplate
    dsNotBGDoc
End Enum

Private Type GUID_TYPE
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type

Private Declare PtrSafe Function CoCreateGuid Lib "ole32.dll" (guid As GUID_TYPE) As LongPtr
Private Declare PtrSafe Function StringFromGUID2 Lib "ole32.dll" (guid As GUID_TYPE, ByVal lpStrGuid As LongPtr, ByVal cbMax As Long) As LongPtr

Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal ms As LongPtr)

'Public Declare Function GetActiveWindow Lib "User32" () As Long
Public Declare PtrSafe Function GetActiveWindow Lib "user32" () As LongPtr

'Private Declare Function MakeSureDirectoryPathExists Lib "imagehlp.dll" (ByVal lpPath As String) As Long
 
'Public Sub MakeFullDir(strPath As String, IsDirectory As Boolean)
'    If IsDirectory Then
'        If Right(strPath, 1) <> "\" Then strPath = strPath & "\" 'Optional depending upon intent
'        MakeSureDirectoryPathExists strPath
'    Else
'        strPath = Left(strPath, InStrRev(strPath, "\"))
'        MakeSureDirectoryPathExists strPath
'    End If
'
'End Sub
'

Public Function OrderRevisionHistory(aRevHist() As String) As String()
    Dim i As Integer
    Dim singleLetter As Boolean
    singleLetter = True
    For i = 0 To UBound(aRevHist)
        If aRevHist(i, 0) <> Left(aRevHist(i, 0), 1) Then
            singleLetter = False
        End If
        Dim nums() As String
        nums = GetNums(aRevHist(i, 0))
        Dim j As Integer
        Dim str As String
        str = ""
        For j = 0 To UBound(nums)
            str = str & Right("000000000" & nums(j), 8) & "."
        Next
        aRevHist(i, 4) = str
    Next
    If singleLetter Then
    For i = 0 To UBound(aRevHist)
        aRevHist(i, 4) = aRevHist(i, 0)
    Next
    
    End If
    
    QuickSortArray aRevHist, , , 4
    OrderRevisionHistory = aRevHist
End Function


Public Sub ReDimPreserve(ByRef Arr() As String, ByVal size1 As Long, ByVal size2 As Long)
Dim arr2() As String
Dim x As Long, y As Long

'Check if it's an array first
If Not IsArray(Arr) Then Exit Sub

'create new array with initial start
ReDim arr2(LBound(Arr, 1) To size1, LBound(Arr, 2) To size2)

Dim copy As Integer
copy = UBound(Arr, 1)
If UBound(arr2, 1) < copy Then copy = UBound(arr2, 1)
'loop through first
For x = LBound(Arr, 1) To copy
    For y = LBound(Arr, 2) To UBound(Arr, 2)
        'if its in range, then append to new array the same way
        arr2(x, y) = Arr(x, y)
    Next
Next
'return byref
Arr = arr2
End Sub

Function GetNewMajor(revStr As String) As String
    If Len(revStr) = 1 Then
        GetNewMajor = GetNextSingle(revStr)
    Else
        Dim RegExpObj As Object
        Dim matches As Object
        Dim NewMajor As String
        Set RegExpObj = CreateObject("vbscript.regexp")
        With RegExpObj
            .Pattern = "([^\d]*)(\d+)([^\d]*)(\d+)+([^\d]?)(\d+)*(.*)"
            If .Test(revStr) Then
                Set matches = .Execute(revStr)
                NewMajor = matches(0).SubMatches(0) & CStr(CInt(matches(0).SubMatches(1)) + 1) & matches(0).SubMatches(2) & "0"
                If matches(0).SubMatches(4) <> "" Then
                    If IsEmpty(matches(0).SubMatches(5)) Then
                        NewMajor = NewMajor & matches(0).SubMatches(4) & matches(0).SubMatches(6)
                    ElseIf IsNumeric(matches(0).SubMatches(5)) Then
                        NewMajor = NewMajor & matches(0).SubMatches(4) & "0" & matches(0).SubMatches(6)
                    Else
                        NewMajor = NewMajor & matches(0).SubMatches(4) & "0" & matches(0).SubMatches(6)
                    End If
                Else
                    NewMajor = NewMajor & matches(0).SubMatches(4) & matches(0).SubMatches(5) & matches(0).SubMatches(6)
                End If
            Else
                NewMajor = "1_0"
            End If
        End With
        GetNewMajor = NewMajor
    End If
End Function


Function GetNewMinor(revStr As String) As String
    If Len(revStr) = 1 Then
        GetNewMinor = GetNextSingle(revStr)
    Else
        Dim RegExpObj As Object
        Dim matches As Object
        Dim NewMinor As String
        Set RegExpObj = CreateObject("vbscript.regexp")
        With RegExpObj
            .Pattern = "([^\d]*)(\d+)([^\d]*)(\d+)+([^\d]?)(\d+)*(.*)"
            If .Test(revStr) Then
                Set matches = .Execute(revStr)
                NewMinor = matches(0).SubMatches(0) & matches(0).SubMatches(1) & matches(0).SubMatches(2) & CStr(CInt(matches(0).SubMatches(3)) + 1) & matches(0).SubMatches(4) & IIf(Not IsEmpty(matches(0).SubMatches(5)), "0", "") & matches(0).SubMatches(6)
            Else
                NewMinor = "0_1"
            End If
        End With
        GetNewMinor = NewMinor
    End If
End Function

Function GetNextSingle(revStr As String) As String
    Dim newChar As String
    If Len(revStr) = 1 Then
        newChar = revStr
        Select Case newChar
        Case "9"
            newChar = "A"
        Case "Z"
            newChar = "a"
        Case Else
            newChar = Chr(Asc(newChar) + 1)
        End Select
        GetNextSingle = newChar
    Else
        GetNextSingle = "1_0"
    End If
End Function

Function GetNums(ByVal strIn As String) As Variant  'Array of numeric strings
    Dim RegExpObj As Object
    Dim NumStr As String

    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Global = True
        .Pattern = "[^\d]+"
        NumStr = .Replace(strIn, " ")
    End With

    GetNums = Split(Trim(NumStr), " ")
End Function

Public Sub BGInsertPictureWithFormatting()
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        
        dx.Prolog "Insert Picture with Frame"
        Dim fileName As String
    
        With Dialogs(wdDialogInsertPicture)
            .Display
            If .name <> "" Then
               fileName = .name
               fileName = FixPath(fileName)
               Selection.Style = ActiveDocument.Styles("Figur")
               Selection.InsertParagraph
               Selection.InlineShapes.AddPicture fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range
'               Application.screenUpdating = False
               With Selection
                    .Expand Unit:=wdParagraph
                    .InlineShapes(1).PictureFormat.ColorType = msoPictureAutomatic
                    If .InlineShapes(1).Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                        .InlineShapes(1).LockAspectRatio = msoTrue
                        .InlineShapes(1).Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
                    Else
                        .InlineShapes(1).LockAspectRatio = msoTrue
                    End If
                    If Selection.Information(wdWithInTable) Then
                        Selection.ParagraphFormat.LeftIndent = 0
                        If .InlineShapes(1).Width > Selection.Cells(1).Width Then
                            .InlineShapes(1).LockAspectRatio = msoTrue
                            .InlineShapes(1).Width = Selection.Cells(1).Width
                        End If
                    End If
                    .InlineShapes(1).AlternativeText = UpdateAlternativeText(.InlineShapes(1).AlternativeText, "Updated")
                    .Collapse Direction:=wdCollapseEnd
                    .Collapse Direction:=wdCollapseEnd
                    .Style = ActiveDocument.Styles(wdStyleCaption).NameLocal
               End With
'               Application.screenUpdating = True
            End If
        End With
        dx.updated = True
        dx.Epilog
    End If
End Sub

Public Sub BGInsertPicture()
    If Not IsLocked Then
        Dim dx As docXML
        Set dx = GetManager.GetDX
        
        dx.Prolog "Insert Picture"
        Dim fileName As String
        With Dialogs(wdDialogInsertPicture)
            .Display
            If .name <> "" Then
               fileName = .name
               fileName = FixPath(fileName)
               Selection.InlineShapes.AddPicture fileName:=fileName, LinkToFile:=True, SaveWithDocument:=True, Range:=Selection.Range
               With Selection
                    .Expand Unit:=wdParagraph
                    .InlineShapes(1).PictureFormat.ColorType = msoPictureAutomatic
                    If .InlineShapes(1).Width > Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06 Then
                        .InlineShapes(1).LockAspectRatio = msoTrue
                        .InlineShapes(1).Width = Selection.PageSetup.PageWidth - Selection.PageSetup.RightMargin - Selection.PageSetup.LeftMargin - 64.06
                    Else
                        .InlineShapes(1).LockAspectRatio = msoTrue
                    End If
                    If Selection.Information(wdWithInTable) Then
                        If .InlineShapes(1).Width > Selection.Cells(1).Width Then
                            .InlineShapes(1).LockAspectRatio = msoTrue
                            .InlineShapes(1).Width = Selection.Cells(1).Width
                        End If
                    End If
                    .InlineShapes(1).AlternativeText = UpdateAlternativeText(.InlineShapes(1).AlternativeText, "Updated")
                    .Collapse Direction:=wdCollapseEnd
               End With
            End If
        End With
        dx.updated = True
        dx.Epilog
   End If
    

End Sub

Sub SetVisibleStyles()
    Dim str As String
    Dim i As Long
    Dim strSty As String
    Dim oSty As Style
    
    str = "-110, -109, -111, BoxText, BoxTextCenter, BulletList, BulletList 2, BulletList 3, -35, CaptionRes, CaptionTable, -172, -190, -204, -218, -232, -246, -260, -171, -189, -203, -217, -231, -245, -259, -170, -188, -202, -216, -230, -244, -258, -169, -187, -201, -215, -229, -243, -257, Figur, FigurRes, Front, Hanging Indent, Hanging Indent 2, Hanging Indent 3, Hanging Indent i1, Hanging Indent i2, Hanging Indent i3, Hanging Indent ii1, Hanging Indent ii2, Hanging Indent ii3, Hanging Indent No., -2, -3, -4, -5, -6, -7, -8, -9, HeadingFrontPage, HeadingPart, Indent, Indent 2, Indent 3, -161, -175, -193, -207, -221, -235, -249, -160, -174, -192, -206, -220, -234, -248, -159, -173, -191, -205, -219, -233, -247, LineDraw, LineDraw2, LineDrawDumps, -166, -184, -198, -212, -226, -240, -254, -167, -185, -199, -213, -227, -241, -255, -168, -186, -200, -214, -228, -242, -256, -164, -178, -196, -210, -224, -238, -252, -165, -183, -197, -211, -225, -239, -253, -162, -176, -194, -208, -222, "
    str = str & "-236, -250, -163, -177, -195, -209, -223, -237, -251, MotorUnit, -1, NormalBold, NormalNum, NumList, NumList 2, NumList 3, NumListAlpha, ParmHead, pos1, PosListe, PosListeTable, Qty, Qty1, SeqNum, "
    str = str & "SeqNum2, SeqNum3, SeqNum4, SubjectRes, -143, -144, -145, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -146, -147, -155, -127, -128, -129, -130, -131, -132, -133, -134, Table Header, Table Header Center, Table Header Right, Table Header Small, Table Header Small C, Table Header Small R, Table Indent, Table Indent Small, -135, -136, -137, -138, -139, -140, -141, -142, Table of FiguresCP, -148, -112, -113, -114, Table Small, Table Small Center, Table Small Right, -149, -150, Table Text, Table text Center, Table text Right, -156, -151, -152, -153, TableBulletList, TableBulletListSmall, TableNumList, TableNumListSmall, TegnText, TegnTextRight, Toc Head, Toc Title, Toc Title Fig, Toc Title Res, TOC1cp, TOC2cp, TOC3cp, TOC4cp, TOC5cp, TOC6cp, TOC7cp, TOC8cp, TOC9cp, TOC9cpRes, TOC9Res, TOCHeadChapt, TocHeadChapt, TocTitleRes, wps format, wpsDumps"

'    str = "1, 2, 5, BoxText, BoxTextCenter, BulletList, BulletList 2, BulletList 3, 24, CaptionRes, CaptionTable, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, Figur, FigurRes, Front, Hanging Indent, Hanging Indent 2, Hanging Indent 3, Hanging Indent i1, Hanging Indent i2, Hanging Indent i3, Hanging Indent ii1, Hanging Indent ii2, Hanging Indent ii3, Hanging Indent No., 98, 99, 100, 101, 102, 103, 104, 105, HeadingFrontPage, HeadingPart, Indent, Indent 2, Indent 3, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, LineDraw, LineDraw2, LineDrawDumps, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, MotorUnit, 241, NormalBold, NormalNum, NumList, NumList 2, NumList 3, NumListAlpha, "
'    str = str & "ParmHead , pos1, PosListe, PosListeTable, Qty, Qty1, SeqNum, SeqNum2, SeqNum3, SeqNum4, SubjectRes, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, Table Header, Table Header Center, Table Header Right, Table Header Small, Table Header Small C, Table Header Small R, Table Indent, Table Indent Small, 310, 311, 312, 313, 314, 315, 316, 317, Table of FiguresCP, 322, 323, 324, 325, Table Small, Table Small Center, Table Small Right, 329, 330, Table Text, Table text Center, Table text Right, 334, 335, 336, 337, TableBulletList, TableBulletListSmall, TableNumList, TableNumListSmall, TegnText, TegnTextRight, Toc Head, Toc Title, Toc Title Fig, Toc Title Res, TOC1cp, TOC2cp, TOC3cp, TOC4cp, TOC5cp, TOC6cp, TOC7cp, TOC8cp, TOC9cp, TOC9cpRes, TOC9Res, TOCHeadChapt, TocHeadChapt, TocTitleRes, wpsFormat, wpsDumps"
   
    Dim aStr() As String
    aStr = Split(Replace(str, ", ", ","), ",")
    
    For Each oSty In ActiveDocument.Styles
        oSty.Visibility = True
    Next
    
    For i = 1 To UBound(aStr)
        strSty = Trim(aStr(i))
        ActiveDocument.Styles(strSty).Visibility = False
        'Xebug.Print strSty, ActiveDocument.Styles(strSty).NameLocal
    Next
    
    ActiveDocument.StyleSortMethod = wdStyleSortByName
    ActiveDocument.FormattingShowFilter = wdShowFilterStylesAvailable
End Sub

Public Function FixPath(fullName As String, Optional urlType As String = "") As String
' urlType: /, \,htpp,https
    Dim newFullName As String
    newFullName = URLDecode(fullName)
    If InStr(newFullName, "\") > 0 Then
        newFullName = Replace(newFullName, "\\com-dk2\documentation\Dokument", rootV, , , vbTextCompare)
        newFullName = Replace(newFullName, "V:\WorkDirs\Sub\Denmark\WorkAAR\Documentation\Dokument", rootV, , , vbTextCompare)
        newFullName = Replace(newFullName, "\\filer-dk1\Documentation\Dokument", rootV, , , vbTextCompare)
        newFullName = Replace(newFullName, rootL, rootV, , , vbTextCompare)
        newFullName = Replace(newFullName, "\CPInc\", "\ats\", , , vbTextCompare)
    End If
    If urlType = "/" Then
        newFullName = Replace(Replace(Replace(newFullName, "\", "/"), "http:", ""), "https:", "")
    ElseIf urlType = "\" Then
        newFullName = Replace(Replace(Replace(newFullName, "/", "\"), "http:", ""), "https:", "")
    ElseIf urlType = "http" Then
        newFullName = "http:" & Replace(Replace(Replace(newFullName, "\", "/"), "http:", ""), "https:", "")
    ElseIf urlType = "https" Then
        newFullName = "https:" & Replace(Replace(Replace(newFullName, "\", "/"), "http:", ""), "https:", "")
    ElseIf urlType = "ssl" Then
        newFullName = Replace(Replace(Replace(newFullName, "/", "\"), "http:", ""), "https:", "")
        If newFullName Like "\\*" Then
            If InStr(Mid(newFullName, 3), "\") > 0 Then
                newFullName = "\\" & Split(Mid(newFullName, 3), "\", 2)(0) & "@SSL\" & Split(Mid(newFullName, 3), "\", 2)(1)
            End If
        End If
    End If
    FixPath = newFullName
End Function



Public Function MakeFullUNC(fullName As String, Optional slashToBackslash As Boolean = True) As String
    Dim testFullname As String
    testFullname = URLDecode(fullName)
    If slashToBackslash Then testFullname = Replace(testFullname, "/", "\")
    testFullname = Replace(testFullname, "http:", "", , , vbTextCompare)
    testFullname = Replace(testFullname, "https:", "", , , vbTextCompare)
    testFullname = Replace(testFullname, "\\com-dk2\documentation\Dokument", rootV, , , vbTextCompare)
    testFullname = Replace(testFullname, "V:\WorkDirs\Sub\Denmark\WorkAAR\Documentation\Dokument", rootV, , , vbTextCompare)
    testFullname = Replace(testFullname, "\\filer-dk1\Documentation\Dokument", rootV, , , vbTextCompare)
    testFullname = Replace(testFullname, rootL, rootV, , , vbTextCompare)
    testFullname = Replace(testFullname, "\CPInc\", "\ats\", , , vbTextCompare)
    MakeFullUNC = testFullname
End Function

Public Function URLDecode(ByVal strEncodedURL As String) As String
   Dim str As String
   str = strEncodedURL
   If Len(str) > 0 Then
      str = Replace(str, "&amp", " & ")
      str = Replace(str, "&#03", Chr(39))
      str = Replace(str, "&quo", Chr(34))
      str = Replace(str, "+", " ")
      str = Replace(str, "%3A", ":")
      str = Replace(str, "%2A", "*")
      str = Replace(str, "%40", "@")
      str = Replace(str, "%2D", "-")
      str = Replace(str, "%5F", "_")
      str = Replace(str, "%2B", "+")
      str = Replace(str, "%2E", ".")
      str = Replace(str, "%2F", "/")

      URLDecode = str
  Else
    URLDecode = ""
  End If
End Function

Public Function HTMLEncode(ByVal strNotEncodedURL As String) As String
   Dim str As String
   str = strNotEncodedURL
   If Len(str) > 0 Then
      
      str = Replace(str, " ", "%20")
'      str = Replace(str, ":", "%3A")
      str = Replace(str, "*", "%2A")
      str = Replace(str, "@", "%40")
      str = Replace(str, "-", "%2D")
      str = Replace(str, "_", "%5F")
'      str = Replace(str, "+", "%2B")
'      str = Replace(str, ".", "%2E")
'      str = Replace(str, "/", "%2F")

      str = Replace(str, Chr(34), "&quo")
      str = Replace(str, Chr(39), "&#03")
      str = Replace(str, " & ", "&amp")

      HTMLEncode = str
  Else
    HTMLEncode = ""
  End If
End Function


'Public Sub ReplaceInMainStories()
'    Dim stry As Range
'    For Each stry In ActiveDocument.StoryRanges
'        If stry.StoryType = wdMainTextStory _
'        Or stry.StoryType = wdTextFrameStory Then
'            stry.Select
'            ReplaceCompanySpecific
'        End If
'    Next
'End Sub
'

'Public Sub ReplaceRegisteredFrontPage()
'    Dim updateScreen As Boolean
'    updateScreen = Application.ScreenUpdating
'    Application.ScreenUpdating = False
'    On Error GoTo screenUpdate
'
'    Selection.HomeKey Unit:=wdStory
'    ActiveDocument.bookMarks("\Page").Range.Select
'    ReplaceCompanySpecific
'    RaiseRegistered
'screenUpdate:
'    On Error GoTo 0
'    If updateScreen Then Application.ScreenUpdating = True
'End Sub

'Public Sub ReplaceCompanySpecific()
'
'    ReplaceSingle "CrisBag", True
'    ReplaceSingle "CrisClaim", True
'    ReplaceSingle "CrisBelt", True
'    ReplaceSingle "RampMate", True
'    ReplaceSingle "CrisStore", True
'    ReplaceSingle "CrisCheck", True
'    ReplaceSingle "autover", True
'    ReplaceSingle "autoca", True
'    ReplaceSingle "Crisplant|fffd|", True
'    ReplaceSingle "BEUMER", False
'    ReplaceSingle "Cristoph Beumer", False
'
'    Selection.find.Font.Reset
'    With Selection.find
'        .text = "|fffd||fffd||fffd|"
'        .Replacement.text = "|fffd|"
'        .Wrap = wdFindContinue
'        .Format = True
'        .MatchCase = False
'        .MatchWholeWord = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'
'    Selection.find.Font.Reset
'    With Selection.find
'        .text = "|fffd||fffd|"
'        .Replacement.text = "|fffd|"
'        .Wrap = wdFindContinue
'        .Format = True
'        .MatchCase = False
'        .MatchWholeWord = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'
'    Selection.find.Font.Reset
'    With Selection.find
'        .text = "|fffd||fffd|"
'        .Replacement.text = "|fffd|"
'        .Wrap = wdFindContinue
'        .Format = True
'        .MatchCase = False
'        .MatchWholeWord = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'
'
'    Selection.find.Font.Superscript = False
'    Selection.find.Replacement.Font.Superscript = True
'    With Selection.find
'        .text = "|fffd|"
'        .Replacement.text = "|fffd|"
'        .Wrap = wdFindContinue
'        .Format = True
'        .MatchCase = False
'        .MatchWholeWord = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'
'
'    Selection.find.ClearFormatting
'    Selection.find.Replacement.ClearFormatting
'    With Selection.find
'        .text = ""
'        .Replacement.text = ""
'        .Forward = True
'        .Wrap = wdFindContinue
'        .Format = False
'        .MatchCase = False
'        .MatchWholeWord = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'
'End Sub
'
'Public Sub ReplaceSingle(str As String, Optional Registered As Boolean = False)
'    Dim repStr As String
'    repStr = str
'    Selection.find.ClearFormatting
'    Selection.find.Replacement.ClearFormatting
'    With Selection.find
'        .text = UCase(str)
'        .Replacement.text = LCase(str)
'        .Forward = True
'        .Wrap = wdFindContinue
'        .Format = False
'        .MatchCase = True
'        .MatchWholeWord = True
'        .MatchByte = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'
'    If Registered Then repStr = str & "|fffd|"
'
'    Selection.find.ClearFormatting
'    Selection.find.Replacement.ClearFormatting
'    With Selection.find
'        .text = str
'        .Replacement.text = repStr
'        .Forward = True
'        .Wrap = wdFindContinue
'        .Format = False
'        .MatchCase = False
'        .MatchWholeWord = True
'        .MatchByte = False
'        .MatchWildcards = False
'        .MatchSoundsLike = False
'        .MatchAllWordForms = False
'    End With
'    Selection.find.Execute Replace:=wdReplaceAll
'End Sub

Function GetUserFullName() As String
    Dim objWin32NLP As Object
    Dim objItem As Object
    Dim strName As String
    strName = ""
    On Error Resume Next
    ' Win32_NetworkLoginProfile class  https://msdn.microsoft.com/en-us/library/aa394221%28v=vs.85%29.aspx
    Set objWin32NLP = GetObject("WinMgmts:").InstancesOf("Win32_NetworkLoginProfile")
    If Err.Number <> 0 Then
      strName = Environ$("UserName")
    Else
        For Each objItem In objWin32NLP
            If objItem.flags > 0 Then
                strName = objItem.fullName
                If InStr(strName, ",") > 0 Then
                    Dim aStrName() As String
                    aStrName = Split(strName, ",", 2)
                    strName = Trim(aStrName(1)) & " " & Trim(aStrName(0))
                End If
            End If
        Next
    End If
    GetUserFullName = strName
End Function

'Public Function IsLockedOld() As Boolean
'    Dim firstParaRange As Range
'    Dim lastParaRange As Range
'    Dim rngParas As Range
'    Dim cc As ContentControl
'    Dim ccs As ContentControls
'    Dim rng As Range
'    Dim locked As Boolean
'    locked = False
'
'    Set firstParaRange = Selection.Range.Paragraphs.first.Range
'    Set lastParaRange = Selection.Range.Paragraphs.Last.Range
'
'    Set rngParas = Selection.Range.Duplicate
'    rngParas.start = firstParaRange.start
'    rngParas.End = lastParaRange.End
'    Set ccs = rngParas.ContentControls
'    If ccs.Count > 0 Then
'        For Each cc In ccs
'            If cc.LockContents = True Then
'                locked = True
'                Exit For
'            End If
'        Next
'    End If
'    IsLockedOld = locked
'
'End Function

'Public Function IsLocked() As Boolean
'    Dim ScreenUpdating As Boolean
'    ScreenUpdating = Application.ScreenUpdating
'    If ScreenUpdating = True Then Application.ScreenUpdating = False
'    Dim cc As ContentControl
'    Dim ccs As ContentControls
'
'    Dim locked As Boolean
'    locked = False
'    Dim rng As Range
'    Dim rngTest As Range
'
'    Set rng = Selection.Range.Duplicate
'    Set ccs = rng.ContentControls
'
'    If ccs.Count > 0 Then
'        For Each cc In ccs
'            If cc.LockContents = True Then
'                locked = True
'                Exit For
'            End If
'        Next
'    End If
'
'    Set rngTest = rng.Duplicate
'
'    Dim objUndo As UndoRecord
'    Set objUndo = Application.UndoRecord
'    objUndo.StartCustomRecord "IsLocked"
'    If locked = False Then
'        rngTest.SetRange rng.start, rng.start
'        On Error GoTo StyleFail
'        rngTest.Style = rng.Style ' ActiveDocument.Styles(wdStyleNormal)
'        On Error GoTo 0
'    End If
'
'    If locked = False Then
'        rngTest.SetRange rng.End, rng.End
'        On Error GoTo StyleFail
'        rngTest.Style = rng.Style ' ActiveDocument.Styles(wdStyleNormal)
'        On Error GoTo 0
'    End If
'
'ExitIsLocked:
'    DV ActiveDocument, "IsLocked", ""
'    DV ActiveDocument, "IsLocked", "True"
'    objUndo.EndCustomRecord
'    ActiveDocument.Undo
'    rng.Select
'    IsLocked = locked
'    If ScreenUpdating <> Application.ScreenUpdating Then Application.ScreenUpdating = ScreenUpdating
'    Exit Function
'StyleFail:
'    locked = True
'    Resume ExitIsLocked
'
'End Function

Public Function IsLocked()
    IsLocked = Not CommandBars.FindControl(msoControlButton, 113).enabled Or ActiveDocument.ReadOnly
End Function


Public Function OpenConvertFileDialog() As String
   Dim fullName As String
   fullName = ""
   Dim fd As Office.FileDialog
   Set fd = Application.FileDialog(msoFileDialogOpen)

   With fd
        .AllowMultiSelect = False
        Dim FileSaveAsSetting As String
        FileSaveAsSetting = Dialogs(wdDialogToolsOptionsFileLocations).Setting
        If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
            FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
        End If
        .InitialFileName = FileSaveAsSetting
        ' Set the title of the dialog box.
        .title = "Please select the file to import"
        
        .Filters.Clear
        .Filters.Add "Word", "*.doc, *.docx"
        .Filters.Add "All Files", "*.*"
        
        If .show = True Then
          fullName = .SelectedItems(1)
        End If
        .title = ""
        .Filters.Clear
   End With
   Set fd = Nothing
   OpenConvertFileDialog = fullName
End Function

Public Function GetLanguageCode2CharFromLCID(ByVal lang2Char As String) As String
    Dim val As String
        
    Select Case LCase(lang2Char)
    Case "1025"
        val = "ar"
    Case "1026"
        val = "bg"
    Case "1027"
        val = "ca"
    Case "1028"
        val = "zh"
    Case "1029"
        val = "cs"
    Case "1030"
        val = "da"
    Case "1031"
        val = "de"
    Case "1032"
        val = "el"
    Case "1033"
        val = "en"
    Case "1034", "3082"
        val = "es"
    Case "1035"
        val = "fi"
    Case "1036"
        val = "fr"
    Case "1037"
        val = "he"
    Case "1038"
        val = "hu"
    Case "1039"
        val = "is"
    Case "1040"
        val = "it"
    Case "1041"
        val = "ja"
    Case "1042"
        val = "ko"
    Case "1043"
        val = "nl"
    Case "1044"
        val = "nb"
    Case "1045"
        val = "pl"
    Case "1046"
        val = "pt"
    Case "1047"
        val = "rm"
    Case "1048"
        val = "ro"
    Case "1049"
        val = "ru"
    Case "1050"
        val = "hr"
    Case "1051"
        val = "sk"
    Case "1052"
        val = "sq"
    Case "1053"
        val = "sv"
    Case "1054"
        val = "th"
    Case "1055"
        val = "tr"
    Case "1056"
        val = "ur"
    Case "1057"
        val = "id"
    Case "1058"
        val = "uk"
    Case "1059"
        val = "be"
    Case "1060"
        val = "sl"
    Case "1061"
        val = "et"
    Case "1062"
        val = "lv"
    Case "1063"
        val = "lt"
    Case "1064"
        val = "tg"
    Case "1065"
        val = "fa"
    Case "1066"
        val = "vi"
    Case "1067"
        val = "hy"
    Case "1068"
        val = "az"
    Case "1069"
        val = "eu"
    Case "1070"
        val = "sb"
    Case "1071"
        val = "mk"
    Case "1072"
        val = ""
    Case "1073"
        val = "ts"
    Case "1074"
        val = "tn"
    Case "1075"
        val = ""
    Case "1076"
        val = "xh"
    Case "1077"
        val = "zu"
    Case "1078"
        val = "af"
    Case "1079"
        val = "ka"
    Case "1080"
        val = "fo"
    Case "1081"
        val = "hi"
    Case "1082"
        val = "mt"
    Case "1083"
        val = ""
    Case "1084"
        val = "gd"
    Case "1085"
        val = "yi"
    Case "1086"
        val = "ms"
    Case "1087"
        val = "kk"
    Case "1088"
        val = ""
    Case "1089"
        val = "sw"
    Case "1090"
        val = "tk"
    Case "1091"
        val = "uz"
    Case "1092"
        val = "tt"
    Case "1093"
        val = "bn"
    Case "1094"
        val = "pa"
    Case "1095"
        val = "gu"
    Case "1096"
        val = "or"
    Case "1097"
        val = "ta"
    Case "1098"
        val = "te"
    Case "1099"
        val = "kn"
    Case "1100"
        val = "ml"
    Case "1101"
        val = "as"
    Case "1102"
        val = "mr"
    Case "1103"
        val = "sa"
    Case "1104"
        val = "mn"
    Case "1105"
        val = "bo"
    Case "1106"
        val = "cy"
    Case "1107"
        val = "km"
    Case "1108"
        val = "lo"
    Case "1109"
        val = "my"
    Case "1110"
        val = "gl"
    Case "1111"
        val = ""
    Case "1112"
        val = ""
    Case "1113"
        val = "sd"
    Case "1114"
        val = ""
    Case "1115"
        val = "si"
    Case "1118"
        val = "am"
    Case "1120"
        val = "ks"
    Case "1121"
        val = "ne"
    Case "1122"
        val = ""
    Case "1124"
        val = ""
    Case "1125"
        val = "dv"
    Case "1126"
        val = ""
    Case "1136"
        val = ""
    Case "1140"
        val = "gn"
    Case "1142"
        val = "la"
    Case "1143"
        val = "so"
    Case "1153"
        val = "mi"
    Case "1279"
        val = ""
    Case "2049"
        val = "ar"
    Case "2052"
        val = "zh"
    Case "2055"
        val = "de"
    Case "2057"
        val = "en"
    Case "2058"
        val = "es"
    Case "2060"
        val = "fr"
    Case "2064"
        val = "it"
    Case "2067"
        val = "nl"
    Case "2068"
        val = "nn"
    Case "2070"
        val = "pt"
    Case "2072"
        val = "ro"
    Case "2073"
        val = "ru"
    Case "2074"
        val = "sr"
    Case "2077"
        val = "sv"
    Case "2092"
        val = "az"
    Case "2108"
        val = "gd"
    Case "2110"
        val = "ms"
    Case "2115"
        val = "uz"
    Case "2117"
        val = "bn"
    Case "2128"
        val = "mn"
    Case "3073"
        val = "ar"
    Case "3076"
        val = "zh"
    Case "3079"
        val = "de"
    Case "3081"
        val = "en"
    Case "3084"
        val = "fr"
    Case "3098"
        val = "sr"
    Case "4097"
        val = "ar"
    Case "4100"
        val = "zh"
    Case "4103"
        val = "de"
    Case "4105"
        val = "en"
    Case "4106"
        val = "es"
    Case "4108"
        val = "fr"
    Case "5121"
        val = "ar"
    Case "5124"
        val = "zh"
    Case "5127"
        val = "de"
    Case "5129"
        val = "en"
    Case "5130"
        val = "es"
    Case "5132"
        val = "fr"
    Case "5146"
        val = "bs"
    Case "6145"
        val = "ar"
    Case "6153"
        val = "en"
    Case "6154"
        val = "es"
    Case "6156"
        val = "fr"
    Case "7169"
        val = "ar"
    Case "7177"
        val = "en"
    Case "7178"
        val = "es"
    Case "7180"
        val = "fr"
    Case "8193"
        val = "ar"
    Case "8201"
        val = "en"
    Case "8202"
        val = "es"
    Case "9217"
        val = "ar"
    Case "9225"
        val = "en"
    Case "9226"
        val = "es"
    Case "9228"
        val = "fr"
    Case "10241"
        val = "ar"
    Case "10249"
        val = "en"
    Case "10250"
        val = "es"
    Case "10252"
        val = "fr"
    Case "11265"
        val = "ar"
    Case "11273"
        val = "en"
    Case "11274"
        val = "es"
    Case "11276"
        val = "fr"
    Case "12289"
        val = "ar"
    Case "12297"
        val = "en"
    Case "12298"
        val = "es"
    Case "12300"
        val = "fr"
    Case "13313"
        val = "ar"
    Case "13321"
        val = "en"
    Case "13322"
        val = "es"
    Case "13324"
        val = "fr"
    Case "14337"
        val = "ar"
    Case "14346"
        val = "es"
    Case "14348"
        val = "fr"
    Case "15361"
        val = "ar"
    Case "15370"
        val = "es"
    Case "16385"
        val = "ar"
    Case "16393"
        val = "en"
    Case "16394"
        val = "es"
    Case "17418"
        val = "es"
    Case "18442"
        val = "es"
    Case "19466"
        val = "es"
    Case "20490"
        val = "es"
    Case Else
        val = "2057"
    End Select
    GetLanguageCode2CharFromLCID = val
End Function


Public Function GetDateFromCrisplantDate(ByVal CrisplantDate As String, Optional defaultDate As String = "YYYY-MM-DD") As String
    Dim aCrisplantDate() As String
    Dim i As Integer
    Dim reps As Integer
    
    Dim Day As String
    Dim Month As String
    Dim Year As String
    
    
    CrisplantDate = Replace(Replace(Replace(Replace(Replace(Replace(CrisplantDate, ChrW(26376), "-"), ChrW(24180), "-"), ChrW(26085), ""), ChrW(-20156), "-"), ChrW(-14636), "-"), ChrW(-14468), "")
    
    If CrisplantDate Like "####[!0-9]##[!0-9]##*" Or CrisplantDate Like "####[!0-9]#[!0-9]##*" Or CrisplantDate Like "####[!0-9]##[!0-9]#*" Or CrisplantDate Like "####[!0-9]#[!0-9]#*" Then
        reps = 0
        For i = 1 To Len(CrisplantDate)
            If AscW(Mid(CrisplantDate, i, 1)) < 48 Or AscW(Mid(CrisplantDate, i, 1)) > 57 Then
                reps = reps + 1
                Mid(CrisplantDate, i, 1) = "-"
            End If
        Next
        If reps > 2 Then
            i = InStr(CrisplantDate, "-")
            i = InStr(i + 1, CrisplantDate, "-")
            i = InStr(i + 1, CrisplantDate, "-")
            CrisplantDate = Left(CrisplantDate, i - 1)
        End If
        GetDateFromCrisplantDate = CrisplantDate
    Else
        If CrisplantDate Like "* de *" Then
            CrisplantDate = Replace(CrisplantDate, " de ", " ")
        End If
        aCrisplantDate() = Split(Replace(Replace(Replace(Replace(CrisplantDate, Chr(160), " "), ".", ""), ",", ""), "-", " "), " ")
        For i = 0 To UBound(aCrisplantDate)
             If i > 2 Then
             Else
                 If IsNumeric(aCrisplantDate(i)) Then
                    If Len(aCrisplantDate(i)) > 2 Or aCrisplantDate(i) > 31 Then
                        Year = Right("19" & aCrisplantDate(i), 4)
                    Else
                        Day = Right("00" & aCrisplantDate(i), 2)
                    End If
                 Else
                    If Months.exists(aCrisplantDate(i)) Then
                        Month = Months(aCrisplantDate(i))
                    ElseIf Months.exists(UCase(aCrisplantDate(i))) Then
                        Month = Months(UCase(aCrisplantDate(i)))
                    ElseIf Months.exists(LCase(aCrisplantDate(i))) Then
                        Month = Months(LCase(aCrisplantDate(i)))
                    Else
                        Select Case LCase(aCrisplantDate(i))
                           Case "jan"
                               Month = 1
                           Case "feb"
                               Month = 2
                           Case "mar"
                               Month = 3
                           Case "apr"
                               Month = 4
                           Case "maj"
                               Month = 5
                           Case "jun"
                               Month = 6
                           Case "jul"
                               Month = 7
                           Case "aug"
                               Month = 8
                           Case "sep"
                               Month = 9
                           Case "okt"
                               Month = 10
                           Case "nov"
                               Month = 11
                           Case "dec"
                               Month = 12
                           Case "m|fffd|r"
                               Month = 3
                           Case "mai"
                               Month = 5
                           Case "dez"
                               Month = 12
                           Case "f|fffd|v"
                               Month = 2
                           Case "avr"
                               Month = 4
                           Case "juin"
                               Month = 6
                           Case "juil"
                               Month = 7
                           Case "ao|fffd|t"
                               Month = 8
                           Case "oct"
                               Month = 10
                           Case "d|fffd|c"
                               Month = 12
                           Case "ene"
                               Month = 1
                           Case "abr"
                               Month = 4
                           Case "may"
                               Month = 5
                           Case "ago"
                               Month = 8
                           Case "dic"
                               Month = 12
                           Case "fev"
                               Month = 2
                           Case "set"
                               Month = 9
                           Case "Out"
                               Month = 10
                           Case "sept"
                               Month = 9
                            ' Italian
                            Case "gen"
                                Month = 1
                            Case "feb"
                                Month = 2
                            Case "mar"
                                Month = 3
                            Case "apr"
                                Month = 4
                            Case "mag"
                                Month = 5
                            Case "giu"
                                Month = 6
                            Case "lug"
                                Month = 7
                            Case "ago"
                                Month = 8
                            Case "set"
                                Month = 9
                            Case "ott"
                                Month = 10
                            Case "nov"
                                Month = 11
                            Case "dic"
                                Month = 12
                           Case Else
                               Month = "  "
                        End Select
                        Month = Right("00" & Month, 2)
                    End If
                End If
            End If
        Next
        If Month = "  " And Year > "" And Day > "" Then
            GetDateFromCrisplantDate = Year & "-" & "01" & "-" & Day
        Else
            GetDateFromCrisplantDate = IIf(Year & "-" & Month & "-" & Day = "-  -", defaultDate, Year & "-" & Month & "-" & Day)
        End If
    End If
 End Function
    
Public Function GetPaperFormatFromPageSetup(doc As Document) As String
    Dim paperFormat As String
    With doc.PageSetup
        
        If Abs(.pageHeight - 842) < 0.1 Then
            If .pageHeight < .PageWidth Then
                paperFormat = "A3 - Landscape"
            Else
                paperFormat = "A4 - Portrait"
            End If
        ElseIf Abs(.PageWidth - 842) < 0.1 Then
            If .pageHeight < .PageWidth Then
                paperFormat = "A4 - Landscape"
            Else
                paperFormat = "A3 - Portrait"
            End If
        ElseIf Abs(.pageHeight - 792) < 0.1 Then
            If .pageHeight < .PageWidth Then
                paperFormat = "Tabloid/Ledger - Landscape"
            Else
                paperFormat = "Letter - Portrait"
            End If
        ElseIf Abs(.PageWidth - 792) < 0.1 Then
            If .pageHeight < .PageWidth Then
                paperFormat = "Letter - Portrait"
            Else
                paperFormat = "Tabloid/Ledger - Landscape"
            End If
        End If
    End With
    GetPaperFormatFromPageSetup = paperFormat
    
End Function

Public Function Contains(col As Collection, key As Variant) As Boolean
    On Error Resume Next
    col (key)
    Contains = (Err.Number = 0)
    Err.Clear
End Function

Public Function findFile(sourceFullName As String) As String
    On Error GoTo Failed
    Dim ok As Boolean
    
    Dim FoundFile As String
    Dim strFindFile As String
    
    FoundFile = ""
    strFindFile = FixPath(sourceFullName)
    If strFindFile = "" Then
        FoundFile = ""
    ElseIf GetFileName(strFindFile) <> "" Then
        FoundFile = strFindFile
    Else
        FoundFile = ""
    End If
    ok = (FoundFile > "")
ExitIt:
    On Error GoTo 0
    If ok Then
        findFile = FoundFile
    End If
    Exit Function

Failed:
    Select Case Err.Number
    Case 52 'Bad file name or number
        ok = False
        Resume ExitIt
    Case Else
        Debug.Print "Case " & Err.Number & " '" & Err.Description
        Stop
        Resume Next
        ok = False
        Resume ExitIt
    End Select
    
End Function

Public Function GetFileName(strFile As String, Optional urlType As String = "") As String
    Dim strFound As String
    strFound = ""
    On Error Resume Next
    strFound = Dir(FixPath(strFile, urlType))
    On Error GoTo 0
    GetFileName = strFound
End Function

Public Function GetFileDate(strFile As String, Optional urlType As String = "") As Date
    Dim dtFile As Date
    If InStr(strFile, "/") > 0 Then ' Get date from web
        dtFile = GetURLDate(strFile, 5)
    Else
        On Error Resume Next
        dtFile = FileDateTime(FixPath(strFile, urlType))
        On Error GoTo 0
    End If

    GetFileDate = dtFile
End Function

Public Function FindDocumentationFile(sourceFullName As String, docPath As String) As String
    Dim FoundFile As String
    Dim findFile As String
    Dim FindPath As String
    Dim aFullname() As String
    Dim i As Integer
    Dim Path As String
    Dim testFile As String
    
    FoundFile = ""
    findFile = FixPath(sourceFullName)
    FindPath = FixPath(docPath)
    If findFile = "" Then
        FoundFile = ""
    ElseIf GetFileName(findFile) <> "" Then
        FoundFile = findFile
    Else
        Path = ""
        aFullname = Split(findFile, "\")
        
        For i = UBound(aFullname) To 2 Step -1
            Path = "\" & aFullname(i) & Path
            testFile = rootV & Path
            'If testFile = "L:\Dokument\ats\_Pictures\LS-4000\05 LSM\05A034_03.jpg" Then Stop
            If GetFileName(testFile) <> "" Then
                Debug.Print "*"; testFile
                FoundFile = testFile
                Exit For
            End If
        Next
    End If
    If FoundFile = "" Then
        If LCase(sourceFullName) Like LCase("*\_Pictures\*") Then
            testFile = rootV & "\ATS" & Mid(sourceFullName, InStr(1, sourceFullName, "\_Pictures\", vbTextCompare))
            If GetFileName(testFile) <> "" Then
                FoundFile = testFile
            End If
        End If
    End If
    If FoundFile = "" Then
        If LCase(sourceFullName) Like LCase("*\_Grafik\*") Then
            testFile = rootV & "\ATS" & Mid(sourceFullName, InStr(1, sourceFullName, "\_Grafik\", vbTextCompare))
            If GetFileName(testFile) <> "" Then
                FoundFile = testFile
            End If
        End If
    End If
    
    FindDocumentationFile = FoundFile
End Function

Public Function GetFileNameFromCode(fldCode As String) As String
    Dim RegExpObj As Object
    Dim str As String
    str = Replace(Replace(fldCode, "\\", "|"), "/", "#")
    Dim matches As Object
    Dim fileName As String
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .IgnoreCase = True
        .Pattern = "(INCLUDEPICTURE|EMBED) ([^\\$]*)"
        If .Test(str) Then
            Set matches = .Execute(str)
            fileName = Replace(Replace(Trim(matches(0).SubMatches(1)), "#", "/"), "|", "\")
        Else
            fileName = ""
        End If
    End With
    GetFileNameFromCode = fileName
End Function

Public Function GetClipBoardText() As String
   Dim str As String
   Dim DataObj As MSForms.DataObject
   Set DataObj = New MSForms.DataObject '<~~ Amended as per jp's suggestion

   On Error GoTo Whoa

   '~~> Get data from the clipboard.
   DataObj.GetFromClipboard

   '~~> Get clipboard contents
   str = DataObj.GetText(1)
   GetClipBoardText = str

ExitIt:
   Exit Function
   
Whoa:
   GetClipBoardText = ""
   Resume ExitIt
End Function

Function FileExists(ByVal FileToTest As String, Optional urlType As String = "") As Boolean
   FileExists = (GetFileName(FileToTest, urlType) <> "")
End Function

Sub DeleteFile(ByVal FileToDelete As String)
   If FileExists(FileToDelete) Then 'See above
      SetAttr FileToDelete, vbNormal
      Kill FileToDelete
   End If
End Sub

Public Function InlineIsPictureOrObject(shp As Word.InlineShape) As Boolean
     If shp.Type >= 1 And shp.Type <= 5 Then
         If ((shp.Width < 40 And shp.Height < 25) Or (shp.Width < 30 And shp.Height < 30)) _
         And shp.Range.Style.NameLocal = "Table Text" And shp.LinkFormat Is Nothing Then
             InlineIsPictureOrObject = False
         Else
             InlineIsPictureOrObject = True
         End If
     Else
         InlineIsPictureOrObject = False
     End If
 End Function

 Public Function ShapeIsPictureOrObject(shp As Word.Shape) As Boolean
     If shp.Type = 7 Or shp.Type = 10 Or shp.Type = 11 Or shp.Type = 12 Or shp.Type = 13 Then
         If ((shp.Width < 40 And shp.Height < 25) Or (shp.Width < 30 And shp.Height < 30)) _
         And shp.Anchor.Style.NameLocal = "Table Text" And shp.LinkFormat Is Nothing Then
             ShapeIsPictureOrObject = False
         Else
             ShapeIsPictureOrObject = True
         End If
     Else
         ShapeIsPictureOrObject = False
     End If
 End Function

Public Function GetAutomationObject() As Object
    Dim Addin As COMAddIn
    Set Addin = Nothing
    On Error Resume Next
    Dim i As Integer
    For i = 1 To Application.COMAddIns.Count
        If Application.COMAddIns(i).ProgID Like "*BGOA*" Then
            Set Addin = Application.COMAddIns(i)
            Exit For
        End If
    Next
    On Error GoTo 0
    If Addin Is Nothing Then
        Set GetAutomationObject = Nothing
    Else
        Set GetAutomationObject = Addin.Object
    End If
End Function

Public Function UpdateAlternativeText(Text As String, action As String, Optional atTime As Date = #12:00:00 AM#) As String
    Dim RegExpObj As Object
    Dim matches As Object
    Dim lang As String
    Dim code As String
    Dim found As Boolean
    found = False
    '!!If atTime = #12:00:00 AM# Then atTime = UTCTime(Now)
    
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Global = True
        .Pattern = "(\[" & action & ":(\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2})\])"
        If .Test(Text) Then
            found = True
        End If
        If found Then
            Text = RegExpObj.Replace(Text, "[" & action & ":" & atTime & "]")
        Else
            Text = "[" & action & ":" & atTime & "]" & IIf(Text = "", "", vbCrLf) & Text ', "YYYY-MM-DD HH:mm:ss") & "]"
        End If
    End With
    UpdateAlternativeText = Text
End Function

Public Function GetTime(Text As String, action As String) As Date
    Dim RegExpObj As Object
    Dim matches As Object
    Dim lang As String
    Dim code As String
    Dim found As Boolean
    Dim dt As Date
    
    found = False
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Global = True
        .Pattern = "(\[" & action & ":(\d{2})-(\d{2})-(\d{4}) (\d{2}:\d{2}:\d{2})\])"
        If .Test(Text) Then
            found = True
        End If
        If found Then
            Set matches = .Execute(Text)
            '!!dt = LocalTime(CDate(matches(0).SubMatches(3) & "-" & matches(0).SubMatches(2) & "-" & matches(0).SubMatches(1) & " " & matches(0).SubMatches(4)))
        Else
            dt = #12:00:00 PM#
        End If
    End With
    GetTime = dt
End Function

Public Function CalculateMultiLineTitle(formula As String, Optional dx As docXML = Nothing, Optional KeepLineFeeds As Boolean = False) As String
    Dim aFormula() As String
    Dim str As Variant
    Dim result As String
    Dim part As String
    
    aFormula = Split(formula, vbCrLf)
    For Each str In aFormula
        If Not IsEmpty(str) Then
            part = CalculateTitle(CStr(str), dx, KeepLineFeeds)
            If part > "" Then
                result = result & IIf(result > "", vbCrLf, "") & CalculateTitle(CStr(str), dx, KeepLineFeeds)
            End If
        End If
    Next
    CalculateMultiLineTitle = result
End Function


Public Function CalculateTitle(formula As String, Optional dx As docXML = Nothing, Optional KeepLineFeeds As Boolean = False) As String
    If dx Is Nothing Then
        Set dx = GetManager.GetDX
    End If
    On Error GoTo ErrorCalculate
        
    Dim i As Integer
    Dim re As Object
    Dim matches As Object
    Dim match As Object
    Dim strFixed As String
    Dim strLookup As String
    Dim strValue As String
    Dim aResult() As String
    Dim strResult As String
    strResult = ""
    Dim strDivider As String
    strDivider = ""
    Dim HighestDivider As Integer
    HighestDivider = -1
    Dim CurrentDivider As Integer
    CurrentDivider = -1
    Dim strCurrentDivider As String
    strCurrentDivider = ""
    Dim HasFirst As Boolean
    HasFirst = False
    
    Dim reProj As Object
    Dim matchesProj As Object
    
    
    Const More = 2
    Const Fixed = 1
    Const Calc = 0
    
    Dim m As Integer
    Dim aMatch() As String
    
    Set re = CreateObject("vbscript.regexp")
    With re
         .IgnoreCase = True
         .Global = True
         .Pattern = ".+?(?=\[\[)|\[\[.*"
         If .Test(formula) Then
             Set matches = .Execute(formula)
             ReDim aResult(matches.Count - 1, 3)
             For m = 0 To matches.Count - 1
                 Set match = matches(m)
                 aMatch = Split(match, "]]")
                 If UBound(aMatch) = 1 Then
                    strLookup = Mid(aMatch(0), 3)
                    aResult(m, Fixed) = aMatch(1)
                 Else
                    strLookup = ""
                    aResult(m, Fixed) = aMatch(0)
                    If m = 0 Then HasFirst = True
                 End If
                 If strLookup > "" Then
                    'Calculate. Remember LanguageCode
                    Dim tryRead As String
                    If strLookup = "Language" Then
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-Language", tryRead) Then
                            For i = 0 To UBound(aLanguages, 1)
                                If aLanguages(i, 0) = tryRead Then
                                    aResult(m, Calc) = aLanguages(i, 2)
                                    Exit For
                                End If
                            Next
                        End If
                    ElseIf strLookup = "FormName" Then
                        If dx.ThisBGD.FormName > "" Then
                             aResult(m, Calc) = dx.ThisBGD.FormName
                        Else
                             aResult(m, Calc) = ""
                        End If
                    ElseIf strLookup = "MainProjectNo" Then
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-ProjectNo", tryRead) Then
                            If tryRead = "" Then
                                aResult(m, Calc) = ""
                            Else
                                Set reProj = CreateObject("vbscript.regexp")
                                With reProj
                                    .IgnoreCase = True
                                    .Global = True
                                    .Pattern = "^(?:[sS]|)([\d|-]*).*$"
                                    If .Test(tryRead) Then
                                        Set matchesProj = .Execute(tryRead)
                                        aResult(m, Calc) = matchesProj(0).SubMatches(0)
                                    End If
                                End With
                            End If
                        End If
                    ElseIf strLookup = "LanguageCode" Then
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-Language", tryRead) Then
                            For i = 0 To UBound(aLanguages, 1)
                                If aLanguages(i, 0) = tryRead Then
                                    aResult(m, Calc) = aLanguages(i, 3)
                                    Exit For
                                End If
                            Next
                        End If
                    ElseIf strLookup = "Date" Then
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-Date", tryRead) Then
                            aResult(m, Calc) = Left(tryRead, 10)
                        End If
                    ElseIf strLookup Like "Line*" Then
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-Title" & strLookup, tryRead) Then
                            aResult(m, Calc) = tryRead
                        End If
                    Else
                        If dx.TryReadText("/DocumentInfo/DocumentInfo-" & strLookup, tryRead) Then
                            aResult(m, Calc) = tryRead
                        End If
                    End If
                 End If
             Next
             For m = matches.Count - 2 To 0 Step -1
                 If aResult(m + 1, Calc) > "" Or aResult(m + 1, More) > "" Then
                    aResult(m, More) = "More"
                 End If
                 'Xebug.Print matches(m), aResult(m, Calc), aResult(m, Fixed), aResult(m, More)
             Next
             Dim mStart As Integer
             mStart = 0
             If HasFirst And aResult(0, More) > "" Then
                mStart = 1
             End If
                         
             For m = mStart To matches.Count - 1
                If aResult(m, Calc) > "" Then
                    If strResult > "" And strDivider > "" Then
                        strResult = strResult & strDivider
                        strDivider = ""
                        HighestDivider = -1
                    End If
                    strResult = strResult & aResult(m, Calc)
                End If
                
                strCurrentDivider = aResult(m, Fixed)
                If strCurrentDivider > "" Then
                    'If m = 0 Then
                        'CurrentDivider = 99
                    If m = matches.Count - 1 Then
                        CurrentDivider = 98
                    ElseIf Len(Trim(strCurrentDivider)) > 1 Then
                        CurrentDivider = 5
                    ElseIf InStr(strCurrentDivider, ":") > 0 Then
                        CurrentDivider = 4
                    ElseIf InStr(strCurrentDivider, ",") > 0 Then
                        CurrentDivider = 3
                    ElseIf InStr(strCurrentDivider, "-") > 0 Then
                        CurrentDivider = 2
                    ElseIf Len(Trim(strCurrentDivider)) = 1 Then
                        CurrentDivider = 1
                    ElseIf InStr(strCurrentDivider, " ") > 0 Then
                        CurrentDivider = 0
                    Else
                        CurrentDivider = -1
                    End If
                End If
                If CurrentDivider >= HighestDivider Then
                    HighestDivider = CurrentDivider
                    strDivider = strCurrentDivider
                End If
                
                If strResult > "" And HighestDivider = 98 Then ' Last
                    strResult = strResult & strDivider
                End If
             Next
             If HasFirst And strResult > "" Then
                strResult = aResult(0, Fixed) & strResult
             End If
         Else
            strResult = formula
         End If
         
    End With
    
    On Error GoTo 0
    If KeepLineFeeds Then
        CalculateTitle = strResult
    Else
        CalculateTitle = Replace(Replace(Replace(strResult, vbCr, ". "), vbLf, ". "), ".. ", ". ")
    End If
    Exit Function
ResumeErrorCalculate:
    CalculateTitle = "Error in formula!"
    Exit Function
    
ErrorCalculate:
    Resume ResumeErrorCalculate
End Function

Public Function IsMatch(str As String, reg As String) As Boolean
    Dim ok As Boolean
    Dim re As Object
    Dim matches As Object
    Dim match As Object
    
    ok = False
    
    Set re = CreateObject("vbscript.regexp")
    With re
         .IgnoreCase = True
         .Global = True
         .Pattern = reg
         If .Test(str) Then
            ok = True
         End If
    End With
    
    IsMatch = ok
End Function

Public Function GetDocType(DocNo As String) As String
    Dim docType As String
    
    If IsMatch(DocNo, "^.*\/.*$") Then
        docType = "O & M Document"
    ElseIf IsMatch(DocNo, "^(F)(?:[0-9])+.*$") Then
        docType = "Functional Description"
    ElseIf IsMatch(DocNo, "^(E)_CB(?:[0-9])?.*$") Then
        docType = "Element Description"
    ElseIf IsMatch(DocNo, "^(H)(?:[0-9])+.*$") Then
        docType = "Hardware Description"
    ElseIf IsMatch(DocNo, "^[0-9]+(?:_(M)_)+.*$|^(M)(?:_CB|_|)?(?:[0-9])+.*$") Then
        docType = "Installation Instruction"
    ElseIf IsMatch(DocNo, "^(P)(?:[0-9])+.*$") Then
        docType = "Design rules"
    ElseIf IsMatch(DocNo, "^(R)(?:_CB|_|)?(?:[0-9])+.*$") Then
        docType = "Spare Parts List"
    ElseIf IsMatch(DocNo, "^(RE)(?:[0-9])+.*$") Then
        docType = "Retrofit Instruction"
    ElseIf IsMatch(DocNo, "^(T)(?:_CB|_|)?.*([0-9]{2,})+.*$") Then
        docType = "Preventive Maintenance"
    ElseIf IsMatch(DocNo, "^(U)(?:_CB|_|)?(?:[0-9])+.*$") Then
        docType = "Replacement Instruction"
    ElseIf IsMatch(DocNo, "^(O)(?:_CB|_|).*$") Then
        docType = "Operator Instruction"
    Else
        docType = ""
    End If
    GetDocType = docType
    
End Function

Public Sub NewComposeMaster()
    Dim rng As Range
    Dim sgmFile As String
    Dim FileSaveAsSetting As String
    Dim NextLine As String
    Dim styH As Style
  
    Dim Paper As String
    Dim SaveTheFile As Boolean
    Dim PrintTheFile As Boolean
    Dim MakeFileFilter As String
    Dim SecBreak As Boolean
    Dim MakeFileDir As String
    Dim MakeFileName As String
    Dim tagName As String
    Dim tagText As String
    Dim GoToBye As Boolean
    Dim currentDir As String
    Dim IncludeResult As Boolean
    Dim DocFileName As String
    Dim firstFile As Boolean
    
    Dim dx As docXML
    Set dx = GetManager.GetDX
    dx.method = "Update"
    dx.Prolog "Compose Master"
    
    firstFile = True
    
    With Application.FileDialog(msoFileDialogFilePicker)
        .Filters.Clear
        .AllowMultiSelect = False
        .ButtonName = "Load SGM file"
        .title = "Select an SGM file"
        .Filters.Add "SGM File", "*.sgm", 1
        .FilterIndex = 1
        .Filters.Add "All files", "*.*", 2
        .InitialView = msoFileDialogViewLargeIcons
        FileSaveAsSetting = Dialogs(wdDialogToolsOptionsFileLocations).Setting
        If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
            FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
        End If
        .InitialFileName = FileSaveAsSetting
        If .show = -1 Then
            sgmFile = .SelectedItems(1)
            .Filters.Clear
        Else
            .Filters.Clear
            GoTo ExitSub
        End If
    End With
    sgmFile = FixPath(sgmFile)
    If Dir(sgmFile) > "" Then
        On Error Resume Next
        Close
        On Error GoTo 0

        Open sgmFile For Input As 1
        While Not EOF(1)
            Line Input #1, NextLine
            NextLine = Trim(NextLine)
            ExtractParaTag NextLine, tagName, tagText
            tagName = UCase(tagName)
            Select Case tagName
            Case "CHDIR"
                currentDir = tagText
            Case "CHDIR2"
                'Skip
                'currentDir = tagText
            Case "SECBREAK ON"
                SecBreak = True
            Case "SECBREAK OFF"
                SecBreak = False
            Case "INCL"
                tagText = currentDir & IIf(InStr(currentDir, "\") > 0, "\", "/") & tagText
                If firstFile Then
                    Set styH = ActiveDocument.Paragraphs.Last.Style
                    If styH = ActiveDocument.Styles(-2).NameLocal Then
                        If ActiveDocument.Paragraphs.Last.Range.Text = vbCr Then
                        ActiveDocument.Paragraphs.Last.Range.Delete
                        End If
                    End If
                    Selection.MoveEnd wdStory
                    Selection.Collapse wdCollapseEnd
                    Selection.InsertParagraphAfter
                    Selection.MoveEnd wdStory
                    Selection.Collapse wdCollapseEnd
                End If
                
                If False And firstFile Then
                    Dim FileDoesExist As Boolean
                    FileDoesExist = FileExists(tagText)
                    If FileDoesExist Then
                        firstFile = False
                        Dim doc As Document
                        Dim attachedTemplate As Template
                        Set attachedTemplate = ActiveDocument.attachedTemplate
                        Set doc = Application.Documents.Add(tagText, , , False)
                        If Not doc.attachedTemplate = attachedTemplate Then
                            doc.attachedTemplate = attachedTemplate.fullName
                        End If
                        doc.ActiveWindow.visible = True
                        doc.Activate
                        If dx.ReadText("/DocumentInfo/DocumentInfo-DocType") = "" Then
                            Dim docType As String
                            Dim aDocType() As String
                            docType = Replace(tagText, "/", "\")
                            If InStr(docType, "\") > 0 Then
                                docType = Mid(docType, InStrRev(docType, "\") + 1)
                            End If
                            docType = GetDocType(docType)
                            If docType = "" Then
                                docType = "Project Document"
                            End If
                            dx.docType = docType
                            dx.WriteText "/DocumentInfo/DocumentInfo-DocType", docType
                        End If
                        Set styH = ActiveDocument.Paragraphs.Last.Style
                        If styH = ActiveDocument.Styles(-2).NameLocal Then
                            If ActiveDocument.Paragraphs.Last.Range.Text = vbCr Then
                            ActiveDocument.Paragraphs.Last.Range.Delete
                            End If
                        End If
                        Selection.MoveEnd wdStory
                        Selection.Collapse wdCollapseEnd
                    Else
                        GoToBye = True
                    End If
                Else
                    IncludeResult = IncludeTheFile(tagText, SecBreak)
                    If IncludeResult = False Then
                        GoToBye = True
                    End If
                End If
            Case "SAVE"
                SaveTheFile = True
                DocFileName = tagText
            Case "PRINT"
                PrintTheFile = True
                Case Else
                Rem Nothing
            End Select
            If GoToBye = True Then GoTo Bye
        Wend
Bye:
        Close
        
        dx.UpdateDocument
        dx.updated = True
        dx.Epilog
        Set dx = Nothing
    End If

ExitSub:
    Exit Sub
ErrorSub:
    
    dx.updated = False
    dx.Epilog
    Set dx = Nothing
    
    Resume ExitSub
End Sub

Private Function IncludeTheFile(file As String, SecBreak As Boolean)
    Dim FileDoesExist As Boolean
    Dim ShallWeGoOn As Boolean
    FileDoesExist = FileExists(file)
    If FileDoesExist Then
        If False And SecBreak = True Then
    '        WordBasic.InsertBreak Type:=2
    '        WordBasic.InsertField "INCLUDETEXT " + Current + "\\" + File
    '        WordBasic.ViewHeader
    '        WordBasic.ToggleHeaderFooterLink
    '        WordBasic.GoToHeaderFooter
    '        WordBasic.ToggleHeaderFooterLink
    '        WordBasic.ToggleHeaderFooterLink
    '        WordBasic.EndOfDocument
    '        WordBasic.StartOfLine 1
    '        WordBasic.FormatFont AllCaps:=1
    '        WordBasic.Insert "(" + WordBasic.[DefaultDir](0) + "\" + File + ")"
    '        WordBasic.CloseViewHeaderFooter
    '        IncludeTheFile = -1
    '        WordBasic.EndOfDocument
        Else
            Selection.InsertFile file
            IncludeTheFile = True
            Selection.EndKey Unit:=wdStory
        End If
    Else
        ShallWeGoOn = MsgBox("Include File: " + file + " not found! Continue?", "Make File Error", 4 + 32)
        If ShallWeGoOn Then
            IncludeTheFile = True
          Else
            IncludeTheFile = False
        End If
    End If
End Function

Private Sub ExtractParaTag(Text As String, ByRef tagName As String, ByRef tagText As String)
    Dim StartTagBegin As Long
    Dim StartTagEnd As Long
    tagName = ""
    tagText = Text
    StartTagBegin = InStr(Text, "<")
    StartTagEnd = InStr(Text, ">")
    If StartTagBegin = 1 And StartTagEnd > 1 Then
        tagName = Mid(Text, StartTagBegin + 1, StartTagEnd - StartTagBegin - 1)
        If StartTagEnd < Len(Text) Then
        tagText = Mid(Text, StartTagEnd + 1, Len(Text) - StartTagEnd + 1)
        Else
            tagText = ""
        End If
    End If
    tagName = Trim(tagName)
    tagText = Trim(tagText)
End Sub

Public Sub SetHeadingListTemplateColor(color As Long)
    Dim headStyle As Style
    Dim templ As ListTemplate
    Dim i As Integer
    
    Set headStyle = ActiveDocument.Styles(wdStyleHeading1)
    Set templ = headStyle.ListTemplate
    For i = 1 To 8
        templ.ListLevels(i).Font.color = color ' wdColorBlack
    Next
End Sub

Public Function CDP(doc As Word.Document, strProperty As String, Optional mdpType As MsoDocProperties = msoPropertyTypeString, Optional varValue As Variant = Null, Optional blnForce As Boolean = False) As Object
' CustomDocumentProperty
' Empty string deletes property
' ? CDP(ActiveDocument, "Palle", msoPropertyTypeString, "aString").Value 'V|fffd|rdien
' ? CDP(ActiveDocument, "Palle", msoPropertyTypeBoolean, True, True) 'datatype changed
' ? CDP(ActiveDocument, "Palle")
' ? CDP(ActiveDocument, "Palle",,"") 'property deleted
    
    Dim prp As Object 'DocumentProperty
    
    Set prp = Nothing
    On Error Resume Next
    Set prp = doc.CustomDocumentProperties(strProperty)
    On Error GoTo 0
    If prp Is Nothing Then
        If Not IsNull(varValue) And varValue <> "" Then
            On Error Resume Next
            doc.CustomDocumentProperties.Add _
                name:=strProperty, LinkToContent:=False, value:=varValue, Type:=mdpType
            Set prp = doc.CustomDocumentProperties(strProperty)
            On Error GoTo 0
        End If
    Else
        If Not IsNull(varValue) Then
            If varValue = "" Then ' DELETE PROPERTY!
                prp.Delete
                Set prp = Nothing
            Else
                If prp.Type = mdpType Then
                    On Error Resume Next
                    prp.value = varValue
                    On Error GoTo 0
                    If Not prp.value = varValue Then
                        Set prp = Nothing
                    End If
                Else
                    If blnForce Then ' Change type of this property
                        On Error Resume Next
                        prp.Delete
                        doc.CustomDocumentProperties.Add _
                            name:=strProperty, LinkToContent:=False, value:=varValue, Type:=mdpType
                            Set prp = Nothing
                            Set prp = doc.CustomDocumentProperties(strProperty)
                        On Error GoTo 0
                    Else
                        Set prp = Nothing
                    End If
                End If
            End If
        End If
    End If
    Set CDP = prp
End Function

Public Function BDP(doc As Word.Document, strProperty As String, Optional varValue As Variant = Null) As Object
' BuiltInDocumentProperty
' Empty string clears property
' ? BDP(ActiveDocument, "Subject").Value 'V|fffd|rdien
' ? BDP(ActiveDocument, "Subject","aNewValue") 'V|fffd|rdien
' ? BDP(ActiveDocument, "Subject","") 'Clear

    Dim prp As Object 'DocumentProperty
    Set prp = Nothing
    On Error Resume Next
    Set prp = doc.BuiltInDocumentProperties(strProperty)
    On Error GoTo 0
    If Not IsNull(varValue) Then
        On Error Resume Next
        prp.value = varValue
        On Error GoTo 0
        If Not prp.value = varValue Then
            Set prp = Nothing
        End If
    End If
    Set BDP = prp
End Function

Public Sub ClearVariables(doc As Word.Document)
    Dim i As Integer
    Dim v As Variable
    For i = doc.Variables.Count To 1 Step -1
        Set v = doc.Variables(i)
        v.Delete
    Next
End Sub

Public Function DV(doc As Word.Document, strProperty As String, Optional varValue As Variant = Null) As Variant
' Document Variable
' Empty string clears variable
' ? DV(ActiveDocument, "AVariable").Value 'Get value
' ? DV(ActiveDocument, "AVariable","aNewValue") 'Set value
' ? DV(ActiveDocument, "AVariable","") 'Clear variable
    Dim v As Variable
    For Each v In doc.Variables
        If v.name = strProperty Then
            Exit For
        End If
    Next
    If Not v Is Nothing Then
        If Not v.name = strProperty Then Set v = Nothing
    End If
    
    If Not IsNull(varValue) Then
        If varValue = "" Then
            If Not v Is Nothing Then
                v.Delete
                Set v = Nothing
                DV = ""
            Else
                DV = ""
            End If
        Else
            If v Is Nothing Then
                Set v = doc.Variables.Add(strProperty, varValue)
            Else
                v.value = varValue
            End If
            Set DV = v
        End If
    Else
        If v Is Nothing Then
            DV = ""
        Else
            DV = v.value
        End If
    End If
End Function


Public Function CheckOutFunc(docUrl As String) As String
    Dim Site As String
    Dim user As String
    Site = GetSite(docUrl)
    
    If Site Like "Error:*" Then
        CheckOutFunc = Site
        Exit Function
    End If
    
    ' docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"

    Dim urlRef As String
    urlRef = Site & "/_vti_bin/Lists.asmx"
    
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", urlRef, False
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CheckOutFile"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <CheckOutFile xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <pageUrl>" & docUrl & "</pageUrl>" & _
    "      <checkoutToLocal>false</checkoutToLocal>" & _
    "      <lastmodified/>" & _
    "    </CheckOutFile>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"

    WebRequest.send strRequest

    Dim docResponse As New DOMDocument60
    Set docResponse = WebRequest.responseXML
    CheckOutFunc = docResponse.Text
    
End Function

Public Sub checkout(docUrl As String, Optional OpenAgain As Boolean = False)
    Dim Site As String
    Dim user As String
    Site = GetSite(docUrl)
    
    ' docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"

    Dim urlRef As String
    urlRef = Site & "/_vti_bin/Lists.asmx"
    
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", urlRef, False
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CheckOutFile"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <CheckOutFile xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <pageUrl>" & docUrl & "</pageUrl>" & _
    "      <checkoutToLocal>true</checkoutToLocal>" & _
    "      <lastmodified/>" & _
    "    </CheckOutFile>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"

    WebRequest.send strRequest

    Dim docResponse As New DOMDocument60
    Set docResponse = WebRequest.responseXML
    Debug.Print docResponse.Text
    
    If OpenAgain Then
        Application.Documents.Open docUrl, , , True
    End If
End Sub

Public Function CombinePaths(strFirst As String, strLast As String, Optional defaultDivider As String = "\") As String
    Dim divider As String
    If InStr(strFirst, "/") > 0 Then
        divider = "/"
        strLast = Replace(strLast, "\", "/")
    Else
        divider = "\"
        strLast = Replace(strLast, "/", "\")
    End If
    If divider = "" Then
        If InStr(strLast, "/") > 0 Then
            divider = "/"
        Else
            divider = "\"
        End If
    End If
    If divider = "" Then divider = defaultDivider
    If Right(strFirst, 1) = divider Then
        strFirst = Mid(strFirst, 1, Len(strFirst) - 1)
    End If
    If Left(strLast, 1) = divider Then
        strLast = Mid(strLast, 2)
    End If
    CombinePaths = strFirst & divider & strLast
    
End Function

Public Sub AfterSave()
    Dim doc As Document
    If ConvertedFullName > "" Then
        Set doc = ActiveDocument
        'GetManager.Init(doc).AddDoc doc, dsDocument
        If doc.CanCheckin Then
            On Error Resume Next
            doc.CheckInWithVersion True, "Converted to BGdoc document format", True, WdCheckInVersionType.wdCheckInMinorVersion
            'doc.CheckIn True, "Converted to BGdoc document format", False 'Checkin as Major
            On Error GoTo 0
'            On Error Resume Next
'            If Documents.CanCheckOut(ConvertedFullName) Then
'                Documents.CheckOut (ConvertedFullName)
'            End If
'            On Error GoTo 0
            ConvertedFullName = ""
        End If
    Else
'        Stop
'        GetManager.Init
  End If
End Sub

Public Sub AfterAutoClose()
Stop
'    Set Manager = GetManager.Init
End Sub


Public Function DeleteOldFiles(strPathToFiles As String, intDays As Integer)
    Dim fso As New Scripting.FileSystemObject
    Dim file As Scripting.file
     
    If fso.FolderExists(strPathToFiles) Then 'Check that the folder exists
        For Each file In fso.GetFolder(strPathToFiles).Files
            If DateDiff("d", file.DateLastModified, Now) > intDays Then
                On Error Resume Next
                file.Delete
                On Error GoTo 0
            End If
        Next
    End If
End Function

Public Function FolderExists(strFolderPath As String) As Boolean
    On Error Resume Next
    FolderExists = (GetAttr(strFolderPath) And vbDirectory) = vbDirectory
    On Error GoTo 0
End Function


Public Function UserTemp() As String
    If CachedUserTemp = "" Then
        Dim strTemp As String
        strTemp = ""
        On Error Resume Next
        strTemp = Environ("LocalAppData") & "\Temp"
        On Error GoTo 0
        If strTemp > "" Then
            On Error Resume Next
            MkDir strTemp
            On Error GoTo 0
            If Not FolderExists(strTemp) Then
                On Error Resume Next
                strTemp = Environ("Temp")
                On Error GoTo 0
            End If
        Else
            On Error Resume Next
            strTemp = Environ("Temp")
            On Error GoTo 0
        End If
        CachedUserTemp = strTemp
    End If
    UserTemp = CachedUserTemp
    
End Function

Public Sub SetStyle(styNameOrNo As Variant, Optional dx As docXML = Nothing)
    Dim sty As Style
    Set sty = ActiveDocument.Styles(styNameOrNo)
    Dim WithUndo As Boolean
    If dx Is Nothing Then
        Set dx = GetManager.GetDX
        dx.Prolog sty.NameLocal
        dx.updated = dx.SetStyle(sty)
        dx.Epilog
        Set dx = Nothing
    Else
        dx.SetStyle sty
    End If

End Sub

Public Function GetTempFile(Optional sPrefix As String = "", Optional fileType As String = "tmp") As String
    Dim s As String * 8 'fixed length string with 8 characters
    Dim n As Integer
    Dim ch As Integer 'the character
    
    Randomize
    For n = 1 To Len(s) 'don't hardcode the length twice
        Do
            ch = Rnd() * 127 'This could be more efficient.
            '48 is '0', 57 is '9', 65 is 'A', 90 is 'Z', 97 is 'a', 122 is 'z'.
        Loop While ch < 48 Or ch > 57 And ch < 65 Or ch > 90 And ch < 97 Or ch > 122
        Mid(s, n, 1) = Chr(ch) 'bit more efficient than concatenation
    Next
    
    GetTempFile = UserTemp & "\" & sPrefix & s & "." & fileType
End Function

Public Sub LeaveContentControl()
    Dim rng As Range
    Dim rngPara As Range
    
    Set rng = Selection.Range.Duplicate
    Set rngPara = rng.Paragraphs(1).Range
    
    If rng.ContentControls.Count = 0 And rngPara.ContentControls.Count > 0 Then
        rngPara.Select
        rngPara.Collapse wdCollapseStart
        rngPara.Select
    End If
End Sub

'Function GetHeader(sURL As String) As String
'    ' ? GetHeader("https://extranet.crisplant.com/Project/90010/21/From_BG_to_PLYTest/Project Document 2017-04-30 00.24.04.docx")
'    Dim WebRequest As Object
'    Set WebRequest = CreateObject("MSXML2.XMLHTTP")
'
'    WebRequest.Open "HEAD", sURL, False
'    WebRequest.send
'    GetHeader = WebRequest.getAllResponseHeaders()
'
'End Function

'Public Function MakeWebRequest(method, url, post_data) As String
'    ' ? MakeWebRequest("HEAD", "https://extranet.crisplant.com/Project/90010/21/From_BG_to_PLYTest/Project Document 2017-04-30 00.24.04.docx", "")
'
'    ' make sure to include the Microsoft WinHTTP Services in the project
'    ' tools -> references -> Microsoft WinHTTP Services, version 5.1
'    ' http://www.808.dk/?code-simplewinhttprequest
'    ' http://msdn.microsoft.com/en-us/library/windows/desktop/aa384106(v=vs.85).aspx
'    ' http://www.neilstuff.com/winhttp/
'
'    ' create the request object
'    Dim req As New WinHttpRequest
'    'Set req = CreateObject("WinHttp.WinHttpRequest.5.1")
'
'    ' set timeouts
'    ' http://msdn.microsoft.com/en-us/library/windows/desktop/aa384061(v=vs.85).aspx
'    ' SetTimeouts(resolveTimeout, ConnectTimeout, SendTimeout, ReceiveTimeout)
'    req.setTimeouts 5000, 5000, 5000, 5000
'    'req.setTimeouts 50000, 50000, 50000, 50000
'
'    ' make the request, http verb (method), url, false to force syncronous
'    ' open(http method, absolute uri to request, async (true: async, false: sync)
'    req.Open method, url, False
'    req.SetAutoLogonPolicy 0
'
'    ' handle post content type
'    If method = "POST" Then
'        req.setRequestHeader "Content-type", "application/x-www-form-urlencoded"
'    End If
'
'
'    ' set WinHttpRequestOption enumerations
'    ' http://msdn.microsoft.com/en-us/library/windows/desktop/aa384108(v=vs.85).aspx
'
'    ' set user agent
'    ' req.Option(0) = "Echovoice VBA HTTP Bot v0.1"
'
'    ' set ssl ignore errors
'    '   13056: ignore errors
'    '   0: break on errors
'    req.Option(4) = 13056
'
'    ' set redirects
'    req.Option(6) = False
'
'    ' allow http to redirect to https
'    req.Option(12) = False
'
'    ' send request
'    ' send post data, should be blank for a get request
'    req.send post_data
'    Dim str As String
'    str = req.getAllResponseHeaders
'    Xebug.Print str
'    ' read response and return
'    MakeWebRequest = req.getResponseHeader("Connection") 'req.ResponseText
'
'End Function

'Function GetDataFromURL(strURL, strMethod, strPostData)
'' ? GetDataFromURL("http://www.808.dk/", "GET", "")
'  Dim lngTimeout
'  Dim strUserAgentString
'  Dim intSslErrorIgnoreFlags
'  Dim blnEnableRedirects
'  Dim blnEnableHttpsToHttpRedirects
'  Dim strHostOverride
'  Dim strLogin
'  Dim strPassword
'  Dim strResponseText
'  Dim objWinHttp
'  lngTimeout = 5000
'  strUserAgentString = "http_requester/0.1"
'  intSslErrorIgnoreFlags = 13056 ' 13056: ignore all err, 0: accept no err
'  blnEnableRedirects = True 'True
'  blnEnableHttpsToHttpRedirects = True
'  strHostOverride = ""
'  strLogin = ""
'  strPassword = ""
'  Set objWinHttp = CreateObject("WinHttp.WinHttpRequest.5.1")
'  objWinHttp.setTimeouts lngTimeout, lngTimeout, lngTimeout, lngTimeout
'  objWinHttp.Open strMethod, strURL
'  If strMethod = "POST" Then
'    objWinHttp.setRequestHeader "Content-type", _
'      "application/x-www-form-urlencoded"
'  End If
'  If strHostOverride <> "" Then
'    objWinHttp.setRequestHeader "Host", strHostOverride
'  End If
'  objWinHttp.Option(0) = strUserAgentString
'  objWinHttp.Option(4) = intSslErrorIgnoreFlags
'  objWinHttp.Option(6) = blnEnableRedirects
'  objWinHttp.Option(12) = blnEnableHttpsToHttpRedirects
'  If (strLogin <> "") And (strPassword <> "") Then
'    objWinHttp.SetCredentials strLogin, strPassword, 0
'  End If
'  On Error Resume Next
'  objWinHttp.send (strPostData)
'  If Err.Number = 0 Then
'    If objWinHttp.Status = "200" Then
'      GetDataFromURL = objWinHttp.responseText
'    Else
'      GetDataFromURL = "HTTP " & objWinHttp.Status & " " & _
'        objWinHttp.StatusText
'    End If
'  Else
'    GetDataFromURL = "Error " & Err.Number & " " & Err.source & " " & _
'      Err.Description
'  End If
'  On Error GoTo 0
'  Set objWinHttp = Nothing
'End Function

'Function GetStatusFromURL(strURL)
'' ? GetDataFromURL("http://www.808.dk/", "GET", "")
'  Dim lngTimeout
'  Dim strUserAgentString
'  Dim intSslErrorIgnoreFlags
'  Dim blnEnableRedirects
'  Dim blnEnableHttpsToHttpRedirects
'  Dim strHostOverride
'  Dim strLogin
'  Dim strPassword
'  Dim strResponseText
'  Dim objWinHttp
'  lngTimeout = 5000
'  strUserAgentString = "http_requester/0.1"
'  intSslErrorIgnoreFlags = 13056 ' 13056: ignore all err, 0: accept no err
'  blnEnableRedirects = True 'True
'  blnEnableHttpsToHttpRedirects = True
'  strHostOverride = ""
'  strLogin = ""
'  strPassword = ""
'  Set objWinHttp = CreateObject("WinHttp.WinHttpRequest.5.1")
'  objWinHttp.SetAutoLogonPolicy 0
'
'  objWinHttp.setTimeouts lngTimeout, lngTimeout, lngTimeout, lngTimeout
'  objWinHttp.Open "HEAD", strURL
'  If strHostOverride <> "" Then
'    objWinHttp.setRequestHeader "Host", strHostOverride
'  End If
'  objWinHttp.Option(0) = strUserAgentString
'  objWinHttp.Option(4) = intSslErrorIgnoreFlags
'  objWinHttp.Option(6) = blnEnableRedirects
'  objWinHttp.Option(12) = blnEnableHttpsToHttpRedirects
'  On Error Resume Next
'  objWinHttp.send ""
'  If Err.Number = 0 Then
'    GetStatusFromURL = Trim(objWinHttp.Status)
'  Else
'    GetStatusFromURL = "499"
'  End If
'  On Error GoTo 0
'  Set objWinHttp = Nothing
'End Function

Public Function MoveSharePointFile(docUrl As String, newDocUrl As String, Optional timeOut As Single = 30) As String
    ' ? MoveSharePointFile("https://extranet.crisplant.com/Project/90010/21/Shared Documents/PLY/G1_UK1_0.doc", "https://extranet.crisplant.com/Project/90010/21/Shared Documents/PLY/G1_UK1_0.docx")
    On Error GoTo Catch
    
    Dim user As String
    Dim Site As String
    Dim result As String
    
    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Site = GetSite(docUrl, timeOut)
    If Not Site Like "http*" Then
        MoveSharePointFile = Site
        Exit Function
    End If
    user = GetSPUser(docUrl, timeOut)

    Dim urlRef As String
    Dim Retries As Integer
    Retries = 0
    urlRef = CombinePaths(Site, "/_vti_bin/SharePointPortalManagement.WebServices.asmx")
    
    
RetryMove:
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://beumergroup.com/UpgradeDocument"
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?> " & _
    "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'> " & _
    "  <soap:Body> " & _
    "    <UpgradeDocument xmlns='http://beumergroup.com/' >" & _
    "       <url>" & docUrl & "</url>" & _
    "       <newUrl>" & newDocUrl & "</newUrl>" & _
    "       <user>" & user & "</user>" & _
    "    </UpgradeDocument>" & _
    "  </soap:Body> " & _
    "</soap:Envelope>"
    WebRequest.send strRequest
        
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.Text
        If result Like "*is not checked out.*" And Retries = 0 Then
            result = newDocUrl
            Retries = Retries + 1
            'checkout docUrl
            'GoTo RetryMove
        End If
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
Finally:
    On Error GoTo 0
    MoveSharePointFile = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Function CanMoveSharePointFile(docUrl As String, Optional timeOut As Single = 30) As String
    ' ? CanMoveSharePointFile("https://extranet.crisplant.com/Project/90010/21/Shared Documents/PLY/G1_UK1_0.doc")
    On Error GoTo Catch

    Dim Site As String
    Dim user As String
    Dim result As String
    
    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Site = GetSite(docUrl, timeOut)
    If Not Site Like "http*" Then
        CanMoveSharePointFile = Site
        Exit Function
    End If
    user = GetSPUser(docUrl, timeOut)

    Dim urlRef As String
    urlRef = CombinePaths(Site, "/_vti_bin/SharePointPortalManagement.WebServices.asmx")
    
    Dim WebRequest As New XMLHTTP60
    Dim strRequest As String

    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://beumergroup.com/CanUpgradeDocument"
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?> " & _
    "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'> " & _
    "  <soap:Body> " & _
    "    <CanUpgradeDocument xmlns='http://beumergroup.com/' >" & _
    "       <url>" & docUrl & "</url>" & _
    "       <user>" & user & "</user>" & _
    "    </CanUpgradeDocument>" & _
    "  </soap:Body> " & _
    "</soap:Envelope>"

    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.Text
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
Finally:
    On Error GoTo 0
    CanMoveSharePointFile = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Function ConvertHttpDate(strDate As String) As Date
    Dim MyMonth As Integer
   
    Select Case UCase(Mid(strDate, 4, 3))
        Case "JAN": MyMonth = 1
        Case "FEB": MyMonth = 2
        Case "MAR": MyMonth = 3
        Case "APR": MyMonth = 4
        Case "MAY": MyMonth = 5
        Case "JUN": MyMonth = 6
        Case "JUL": MyMonth = 7
        Case "AUG": MyMonth = 8
        Case "SEP": MyMonth = 9
        Case "OCT": MyMonth = 10
        Case "NOV": MyMonth = 11
        Case "DEC": MyMonth = 12
    End Select
   
    ConvertHttpDate = DateValue(Right(strDate, 4) & "/" & MyMonth & "/" & Left(strDate, 2))
End Function


'Public Function GetSiteOld(docPath As String, Optional http As String = "http:") As String
'    Dim lastBS As Integer
'    Dim aspx As String
'    Do While True
'        aspx = ""
'        If InStrRev(docPath, "/") > 0 Then
'            docPath = Left(docPath, InStrRev(docPath, "/") - 1)
'            On Error Resume Next
'            aspx = Dir(docPath & "/*.aspx")
'            On Error GoTo 0
'            If aspx > "" Then
'                GetSite = http & docPath
'                Exit Do
'            End If
'        Else
'            GetSite = ""
'            Exit Do
'        End If
'    Loop
'End Function

Public Function GetUrlProtocol(url As String, protocol As String, Optional timeOut As Single = 30) As String
    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    WebRequest.Open IIf(protocol = "STATUS", "HEAD", protocol), url, True
    WebRequest.send
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        If protocol = "HEAD" Then
            result = "Found:" & WebRequest.getAllResponseHeaders
        ElseIf protocol = "STATUS" Then
            result = WebRequest.Status
        Else
            result = "Found:" & WebRequest.responseText
        End If
    Else
        If protocol = "HEAD" Then
            result = "NotFound:" & WebRequest.Status
        ElseIf protocol = "STATUS" Then
            result = WebRequest.Status
        Else
            result = "NotFound:" & WebRequest.Status
        End If
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetUrlProtocol = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Function GetURLHead(url As String, Optional timeOut As Single = 30) As String
'Print GetURLHead("https://extranet.crisplant.com/Project/90010/21/Shared Documents/Test.docx")
'Print GetURLHead("https://extranet.crisplant.com/Project/90010/21/Shared Documents")
'Print GetURLHead("https://extranet.crisplant.com/Project/90010/21")
'Print GetURLHead("https://extranet.crisplant.com/Project/90010/21/_vti_bin/Discovery.asmx")
    GetURLHead = GetUrlProtocol(url, "HEAD", timeOut)
End Function

Public Function GetURLStatus(url As String, Optional timeOut As Single = 30) As String
'Print GetURLStatus("https://extranet.crisplant.com/Project/90010/21/Shared Documents/Test.docx")
'Print GetURLStatus("https://extranet.crisplant.com/Project/90010/21/Shared Documents")
'Print GetURLStatus("https://extranet.crisplant.com/Project/90010/21")
'Print GetURLStatus("https://extranet.crisplant.com/Project/90010/21/_vti_bin/Discovery.asmx")
' Print GetURLStatus("https://extranet.crisplant.com/Project/90010/21/Shared Documents/Test.docxx")
    GetURLStatus = GetUrlProtocol(url, "STATUS", timeOut)
End Function

Public Function GetURLPage(url As String, Optional timeOut As Single = 30) As String
'Print GetURLPage("https://extranet.crisplant.com/Project/90010/21/Shared Documents/Test.docx")
'Print GetURLPage("https://extranet.crisplant.com/Project/90010/21/Shared Documents")
'Print GetURLPage("https://extranet.crisplant.com/Project/90010/21")
'Print GetURLPage("https://extranet.crisplant.com/Project/90010/21/_vti_bin/Discovery.asmx")

    GetURLPage = GetUrlProtocol(url, "GET", timeOut)
End Function

Public Function GetURLDate(url As String, Optional timeOut As Single = 30) As Date
    Dim head As String
    Dim NetDate As String
    Dim NetTime As Date
    Dim LocDate As Date
    
    head = GetURLHead(url, timeOut)
    
    If head Like "Found:*" Then
        Dim aResult() As String
        aResult = Split(Mid(head, 7), vbCrLf)
        Dim i As Integer
        Dim res As String
        For i = 0 To UBound(aResult)
            res = aResult(i)
            If res Like "Last-Modified:*" Then
                res = Mid(res, 21, Len(res) - 24)
            
                NetDate = Left(res, Len(res) - 9) '30 Sep 2013
                NetTime = Right(res, 8) '18:33:23
                LocDate = ConvertHttpDate(NetDate)
                '!!GetURLDate = LocalTime(LocDate + NetTime)
                Exit Function
            End If
        Next
        GetURLDate = #12:00:00 PM#
    Else
        GetURLDate = #12:00:00 PM#
    End If
    
End Function

'Public Function GetSiteOld(docUrl As String) As String
'    Dim head As String
'    Do While True
'        head = GetURLHead(docUrl) '  & "/_vti_bin/Discovery.asmx"
'        If head Like "Found:*" Then
'            Dim aResult() As String
'            aResult = Split(Mid(head, 7), vbCrLf)
'            Dim i As Integer
'            Dim res As String
'            For i = 0 To UBound(aResult)
'                res = aResult(i)
'                If res Like "Set-Cookie:*/_vti_bin/Discovery.asmx*" Then
'                    GetSiteOld = URLDecode(Mid(res, 13, InStr(res, "%2FDiscovery") - 13))
'                    Exit Do
'                End If
'            Next
'            GetSiteOld = "NotFound:CookieMissing"
'            Exit Do
'        ElseIf head Like "NotFound:440" Then
'            GetSiteOld = head
'            Exit Do
'        End If
'        If InStrRev(docUrl, "/") > 0 Then
'            docUrl = Left(docUrl, InStrRev(docUrl, "/") - 1)
'        Else
'            GetSiteOld = "NotFound:WrongPath"
'            Exit Do
'        End If
'    Loop
'End Function

Function GetSPUser(docUrl As String, Optional timeOut As Single = 30) As String
' FieldInternalName="Name".*?-->\s*([^&]*)

    Dim Site As String
    Dim aspx As String
    Dim re As Object
    Dim matches As Object
    
    Site = GetSite(docUrl)
    If Not Site Like "http*" Then
        GetSPUser = Site
        Exit Function
    End If
    aspx = GetURLPage(Site & "/_layouts/userdisp.aspx?Force=True&" & CStr(Now), timeOut)
    
    Set re = CreateObject("vbscript.regexp")
    With re
        .IgnoreCase = True
        .Global = True
        .Pattern = "FieldInternalName=""Name""[^>]*>\s*([^&]*)"
        If .Test(aspx) Then
           Set matches = .Execute(aspx)
           GetSPUser = matches(0).SubMatches(0)
        Else
           GetSPUser = "NoUser:" & aspx
        End If
    End With
End Function

'Public Function GetSite(docUrl As String) As String
'    Dim aspx As String
'    Do While True
'        Debug.Print docUrl
'        aspx = GetURLPage(docUrl & "/_vti_bin/Webs.asmx")
'        If aspx Like "Found:*" Then
'            Dim start As Long
'            start = InStr(aspx, "WebUrlFromPageUrl")
'            If start > 0 Then
'                GetSite = Mid(aspx, start, 2000)
'                Exit Do
'            Else
'                'GetSite = "NotFound:WebUrlFromPageUrlMissing"
'                'Exit Do
'            End If
'        ElseIf aspx Like "NotFound:440" Then
'            GetSite = aspx
'            Exit Do
'        End If
'        If InStrRev(docUrl, "/") > 0 Then
'            docUrl = Left(docUrl, InStrRev(docUrl, "/") - 1)
'        Else
'            GetSite = "NotFound:WrongPath"
'            Exit Do
'        End If
'    Loop
'End Function
' ? GetUrlProtocol("https://extranet.crisplant.com/Project/90010/21" & "/_vti_bin/Webs.asmx", "HEAD")
'https://extranet.crisplant.com/Project/90010/21/Shared Documents

'Public Function GetSiteNoTimeout(docUrl As String) As String
'    ' Rewrite with Timeout!!!
'    Dim site As String
'
'    Dim urlRef As String
'    urlRef = docUrl & "/_vti_bin/Webs.asmx"
'
'    Dim WebRequest As New XMLHTTP60
'    Dim strRequest As String
'    WebRequest.Open "POST", urlRef, False
'    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
'    WebRequest.setRequestHeader "Content-Length", "length"
'    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/WebUrlFromPageUrl"
'
'    strRequest = _
'    "<?xml version='1.0' encoding='utf-8'?>" & _
'    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
'    "  <soap:Body>" & _
'    "    <WebUrlFromPageUrl xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
'    "      <pageUrl>" & docUrl & "</pageUrl>" & _
'    "    </WebUrlFromPageUrl>" & _
'    "  </soap:Body>" & _
'    "</soap:Envelope>"
'
'    WebRequest.send strRequest
'
'    Dim docResponse As New DOMDocument60
'    Set docResponse = WebRequest.responseXML
'    GetSiteNoTimeout = docResponse.text
'End Function


Public Function GetSite(docUrl As String, Optional timeOut As Single = 30) As String
    ' ? GetSite("https://extranet.crisplant.com/Project/90010/21/Shared Documents/Test.docx")

    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim urlRef As String
    urlRef = docUrl & "/_vti_bin/Webs.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/WebUrlFromPageUrl"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <WebUrlFromPageUrl xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <pageUrl>" & docUrl & "</pageUrl>" & _
    "    </WebUrlFromPageUrl>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.Text
        If result = "" Then
            result = GetURLHead(docUrl, timeOut)
        End If
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetSite = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Function IsValidFileName(fileName As String) As Boolean
' /^(?!\.)(?!com[0-9]$)(?!con$)(?!lpt[0-9]$)(?!nul$)(?!prn$)[^\|\*\?\\:<>/$"]*[^\.\|\*\?\\:<>/$"]+$/
    Dim RegExpObj As Object
    Dim matches As Object
    Dim NewMajor As String
    Set RegExpObj = CreateObject("vbscript.regexp")
    With RegExpObj
        .Pattern = "[\\\/:\*\?""<>\|]"
        If .Test(fileName) Then
            IsValidFileName = False
        Else
            IsValidFileName = True
        End If
    End With
End Function

Public Sub CenterUserForm(frm As Object)

'  frm.StartUpPosition = 0
'  frm.Left = Application.Left + (0.5 * Application.Width) - (0.5 * frm.Width)
'  frm.Top = Application.Top + (0.5 * Application.Height) - (0.5 * frm.Height) - 5

    frm.StartUpPosition = 0
    frm.Left = Application.Left + (0.5 * Application.Width) - (0.5 * frm.Width)
    frm.Top = Application.Top + (0.5 * Application.Height) - (0.5 * frm.Height)
    If frm.Top + frm.Height > Application.Height Then
        frm.Top = (Application.Height - frm.Height) / 2
    End If
    If frm.Left < Application.Width And frm.Left + frm.Width > Application.Width Then
        frm.Left = (Application.Width - frm.Width) / 2
    End If

End Sub

Function CreateGuid()
    Dim guid As GUID_TYPE
    Dim strGuid As String
    Dim retValue As LongPtr
    Const guidLength As Long = 39 'registry GUID format with null terminator {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}

    '!!!retValue = CoCreateGuid(guid)
    If retValue = 0 Then
        strGuid = String$(guidLength, vbNullChar)
        '!!!retValue = StringFromGUID2(guid, StrPtr(strGuid), guidLength)
        If retValue = guidLength Then
            ' valid GUID as a string
            CreateGuid = strGuid
        End If
    End If
End Function

Public Sub SaveDontSaveCancel(mode As String, fileName As String)
    Dim frm As frmSaveDontSaveCancel
    SaveDontSaveCancelMode = mode
    SaveDontSaveCancelFileName = fileName
    Set frm = New frmSaveDontSaveCancel
    frm.show
    Set frm = Nothing
End Sub

Public Sub TestSaveDontSaveCancel()
    SaveDontSaveCancel "OpenClose", ActiveDocument.name
    Debug.Print SaveDontSaveCancelAnswer
End Sub

Attribute VB_Name = "frmCreatePDF"
Attribute VB_Base = "0{C99F4205-EEEF-47FB-9A54-A578567FD934}{798A965B-5B13-4FEB-8780-D308967F69BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private BrowsedFileName As String
Private SourceSite As String
Private SourceList As String
Private PDFVersioning As String
Private PDFLoginName As String
Private PDFLoginID As String
Private PDFCheckOutLoginName As String
Private PDFCheckOutLoginID As String
Private PDFMode As String

Private IsSaved As Boolean

Private PDFSite As String
Private PDFList As String

Public Sub DoOk()
'    cmbGC.SetFocus

    Dim pdfFileName  As String
    pdfFileName = txtPath.value
    Dim ok As Boolean
    ok = True
    Dim exists As Boolean
    exists = False
    If pdfFileName Like "*\*" Then
        exists = (Dir(pdfFileName) > "")
    ElseIf LCase(pdfFileName) Like "http*" Then
        exists = (GetURLStatus(pdfFileName) = "200")
    End If
    
    If pdfFileName <> BrowsedFileName And exists And (Not pdfFileName Like "*\*" And PDFVersioning = "None") Then
        ok = (vbYes = MsgBox("PDF file alraedy exists. Overwrite?", vbCritical + vbYesNo, "Create PDF"))
    End If
    
    If ok Then
    
        Dim pdfLayout As String
        pdfLayout = "Standard"
        
        If optSparePartsCatalog.value Then
            pdfLayout = "SparePartsCatalog"
        End If
        
        Dim CheckInMode As String
        If optCheckInMajor.value And optCheckInMajor.visible Then
            CheckInMode = "Major"
        ElseIf optCheckInMinor.value And optCheckInMinor.visible Then
            CheckInMode = "Minor"
        Else
            CheckInMode = "None"
        End If
        
        Dim fields As String
        
        If SourceSite <> "" And SourceList <> "" And SourceSite = PDFSite And SourceList = PDFList Then
            fields = GetFields(ActiveDocument.fullName)
        End If
        
        CreatePDF ActiveDocument, pdfFileName, pdfLayout, chkShowPDF.value, PDFMode, CheckInMode, txtVersionComment.Text, fields

        ActiveDocument.saved = IsSaved
        Unload Me

    End If
    ActiveDocument.saved = IsSaved
   
End Sub

Public Sub DoCancel()
    ActiveDocument.saved = IsSaved
    Unload Me
    ActiveDocument.saved = IsSaved
End Sub

Private Sub cmdBrowse_Click()
    On Error GoTo Catch
    
    Dim dlg As FileDialog
    Set dlg = Application.FileDialog(msoFileDialogSaveAs)
    
    With Application.FileDialog(msoFileDialogSaveAs)
        .title = "Create PDF"
        .AllowMultiSelect = False
        .ButtonName = "Select PDF Path"
        .FilterIndex = 7
        .InitialFileName = txtPath.value
    End With
    
    Dim choice As Integer
    choice = Application.FileDialog(msoFileDialogSaveAs).show
    If choice <> 0 Then
        txtPath = FixPath(dlg.SelectedItems(1))
        BrowsedFileName = txtPath.Text
    End If
    
Finally:
    If Not dlg Is Nothing Then
        dlg.title = ""
        dlg.ButtonName = ""
        dlg.FilterIndex = 1
        Set dlg = Nothing
    End If
    Exit Sub
    
Catch:
    MsgBox "Error: " & Err.Description & "Browse for PDF filename" & vbCrLf & vbCrLf & "Please check if Path contains a valid filename.", vbCritical + vbOKOnly, "Browse for PDF filename"
    Resume Finally
            
End Sub

Private Sub optCheckInMajor_Change()
    txtVersionComment.visible = (optCheckInMajor.value = True)
    lblVersionComment.visible = txtVersionComment.visible
End Sub

Private Sub optCheckInMinor_Change()
    txtVersionComment.visible = (optCheckInMinor.value = True)
    lblVersionComment.visible = txtVersionComment.visible
End Sub

Private Sub optKeepCheckedOut_Change()
    txtVersionComment.visible = (optKeepCheckedOut.value = False)
    lblVersionComment.visible = txtVersionComment.visible
End Sub

Private Sub txtPath_Change()
    Dim pdfPath As String
Repeat:
    pdfPath = Trim(txtPath.value)
    DoEvents
    If LCase(pdfPath) Like "http*" Then
        lblHttp.visible = True
        optCheckInMajor.visible = True
        optCheckInMinor.visible = True
        optKeepCheckedOut.visible = True
        lblVersionComment.visible = True
        txtVersionComment.visible = True
        
        PDFSite = GetSite(pdfPath)
        If LCase(PDFSite) Like "http*" Then
            PDFList = Mid(pdfPath, Len(PDFSite) + 2)
            If PDFList > "" Then
                PDFList = Split(PDFList, "/")(0)
                PDFVersioning = GetVersioning(PDFSite, PDFList)
                If Not PDFVersioning Like "NotFound*" Then
                    PDFLoginName = GetSPUser(PDFSite)
                    Dim dic As Scripting.Dictionary
                    Set dic = GetUserInfo(PDFSite, PDFLoginName)
                    If Not IsEmpty(dic("ID")) Then
                        PDFLoginID = dic("ID")
                        Set dic = GetItem(pdfPath, 30, "Modified,CheckoutUser,Modified_x0020_By")
                        If Not IsEmpty(dic("Modified")) Then
                            Debug.Print DictionaryToString(dic)
                            If Not IsEmpty(dic("CheckoutUser")) Then
                                PDFCheckOutLoginID = Split(dic("CheckoutUser"), ";#")(0)
                                PDFCheckOutLoginName = Split(dic("CheckoutUser"), ";#")(1)
                                If PDFCheckOutLoginID = PDFLoginID Then
                                    ' Checked out to this user
                                    PDFMode = "Checked out to you"
                                Else
                                    ' Checked out to another user
                                    PDFMode = "Checked out to another user"
                                End If
                            Else
                                ' A new version of existing PDF file will be created
                                PDFMode = "A new version of existing PDF file will be created"
                            End If
                            Set dic = Nothing
                        Else
                            ' Not an existing file
                            PDFMode = "Save as new SharePoint PDF file"
                        
                        End If
                        
                    Else
                        ' No access to this site ?
                        PDFMode = "No access to this SharePoint site"
                    
                    End If
                Else
                    ' Not an existing list
                    PDFMode = "Not an existing SharePoint list or no access"
                    
                End If
            End If
        Else
            ' Not a SharePoint site
            PDFMode = "Not a SharePoint site or no access"
        End If
    Else
        PDFMode = "Local file"
        PDFSite = ""
        PDFList = ""
        PDFLoginName = ""
        PDFCheckOutLoginID = ""
        PDFCheckOutLoginName = ""
        PDFVersioning = ""
        
        lblHttp.visible = False
        optCheckInMajor.visible = False
        optCheckInMinor.visible = False
        optKeepCheckedOut.visible = False
        lblVersionComment.visible = False
        txtVersionComment.visible = False
    End If
    
    lblHttp.caption = PDFMode
    optCheckInMajor.caption = "Check in MAJOR version"
    cmdOK.enabled = True
    
    
    Select Case PDFMode
    Case "Checked out to you"
        If PDFVersioning = "None" Then
            lblHttp.caption = PDFMode & ". PDF file will be replaced"
        ElseIf PDFVersioning = "Major" Or PDFVersioning = "Minor" Then
            lblHttp.caption = PDFMode & ". Checked out version of PDF file will be replaced"
        End If
    Case "Checked out to another user"
        lblHttp.caption = "Checked out to '" & PDFCheckOutLoginName & "'"
        cmdOK.enabled = False
    Case "A new version of existing PDF file will be created"
        If PDFVersioning = "None" Then
            lblHttp.caption = "Existing PDF file will be replaced"
        End If
    Case "Save as new SharePoint PDF file"
        optKeepCheckedOut.visible = False
    Case "No access to this SharePoint site"
        cmdOK.enabled = False
    Case "Not an existing SharePoint list or no access"
        cmdOK.enabled = False
    Case "Not a SharePoint site or no access"
        cmdOK.enabled = False
    Case "Local file"
    Case Else
        MsgBox "Unknown error", vbCritical + vbOKOnly, "Unable to safe PDF here"
        cmdOK.enabled = False
    End Select
    
    Select Case PDFMode
    Case "Checked out to you", "A new version of existing PDF file will be created", "Save as new SharePoint PDF file"
        Select Case PDFVersioning
        Case "Major"
            optCheckInMinor.visible = False
            optCheckInMajor.value = True
        Case "Minor"
            optCheckInMinor.value = True
        Case "None"
            optCheckInMinor.visible = False
            optCheckInMajor.visible = True
            optCheckInMajor.value = True
            optKeepCheckedOut.visible = True
            optCheckInMajor.caption = "Check in"
        End Select
    End Select
    DoEvents
    If LCase(Trim(txtPath.value)) <> LCase(pdfPath) Then
        GoTo Repeat
    End If
    
End Sub

Private Sub UserForm_Initialize()
    CenterUserForm Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub

Private Sub cmdCancel_Click()
    DoCancel
End Sub

Private Sub cmdOK_Click()
    DoOk
End Sub

Private Sub UserForm_Activate()
    IsSaved = ActiveDocument.saved
    
    Dim objControl As control
    Dim fullName As String
    
    BrowsedFileName = ""
    
    fullName = ActiveDocument.fullName
    Dim dot As Integer
    dot = InStrRev(fullName, ".")
    
    If dot > 0 Then
        fullName = Left(fullName, dot - 1) & ".pdf"
    Else
        fullName = fullName & ".pdf"
    End If
    
        
    SourceSite = ""
    SourceList = ""
    If LCase(fullName) Like "http:*" Then
        SourceSite = GetSite(fullName)
        If LCase(SourceSite) Like "http:*" Then
            SourceList = Mid(fullName, Len(SourceSite) + 2)
            SourceList = Split(SourceList, "/")(0)
        Else
            SourceSite = ""
        End If
    End If
        
    If IsSparePartsCatalog(ActiveDocument) Then
        optSparePartsCatalog.value = True
    Else
        optStandard.value = True
    End If
        
    
    Set objControl = Nothing
    
    txtPath.Text = fullName
    
End Sub








Attribute VB_Name = "frmSaveDontSaveCancel"
Attribute VB_Base = "0{2FA33E2B-D0BC-481C-99C9-B1793E9D33A7}{017652AD-575B-465F-87FB-9BB43BD8443A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub SetMode(mode As String, fileName As String)
End Sub

Private Sub cmdSaveAs_Click()
    SaveDontSaveCancelAnswer = "SaveAs"
    Unload Me
End Sub

Private Sub cmdSaveTemp_Click()
    SaveDontSaveCancelAnswer = "SaveTemp"
    Unload Me
End Sub

Public Sub DoSave()
    SaveDontSaveCancelAnswer = "Save"
    Unload Me
End Sub

Public Sub DoDontSave()
    SaveDontSaveCancelAnswer = "DontSave"
    Unload Me
End Sub

Public Sub DoCancel()
    SaveDontSaveCancelAnswer = "Cancel"
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    SaveDontSaveCancelAnswer = ""
    
    If SaveDontSaveCancelMode = "NewClose" Then
        cmdSave.visible = False
        cmdSaveAs.Default = True
    ElseIf SaveDontSaveCancelMode = "OpenClose" Then
        cmdSave.visible = True
        cmdSave.Default = True
    End If
    
    With lblQuestion
        .caption = Replace(.caption, "[[Document]]", SaveDontSaveCancelFileName)
    End With
    
    CenterUserForm Me

End Sub

Private Sub cmdCancel_Click()
    DoCancel
End Sub

Private Sub cmdSave_Click()
    DoSave
End Sub

Private Sub cmdDontSave_Click()
    DoDontSave
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then 'Red X
        DoCancel
    End If
End Sub
Attribute VB_Name = "modPDF"
Option Explicit

Public CachedUserTemp As String

Public Function Unlink(docUrl As String)
    Dim id As String
    Dim listName As String
    Dim listId As String
    Dim Site As String
    Dim result As String
        
    Site = GetSite(docUrl)
    listName = Mid(docUrl, Len(Site) + 2)
    listName = Split(listName, "/")(0)
    listId = GetListGUID(Site, listName)
    listId = Mid(listId, 2, Len(listId) - 2)

    id = GetItem(docUrl, , "ID")("ID")
    
    '"     <Field Name='Title'>Updated again</Field>" & vbCrLf & _

    Dim batch As String
    batch = "<Batch OnError='Return' ListVersion='1'>" & vbCrLf & _
    "   <Method ID='1' Cmd='Update'>" & vbCrLf & _
    "     <Field Name='ID'>" & id & "</Field>" & vbCrLf & _
    "     <Field Name='MetaInfo' Property='_CopySource'></Field>" & vbCrLf & _
    "   </Method>" & vbCrLf & _
    "</Batch>"
    'Debug.Print batch
    result = SPMicrosoft(Site & "/_vti_bin/Lists.asmx", "UpdateListItems", 30, "listName", listId, "updates", batch)
    Unlink = result
End Function



Public Sub CreatePDF(doc As Document, pdfFileName As String, pdfLayout As String, showPDF As Boolean, PDFMode As String, PDFVersioning As String, VersionComment As String, fields As String, Optional PDFA As Boolean = False)
    On Error GoTo Catch
    Dim objUndo As UndoRecord
    Dim chkout As String
    Dim tmpFileName As String
    tmpFileName = ""
    
    Set objUndo = Application.UndoRecord
    objUndo.StartCustomRecord ("Create PDF")
    
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
     
    Dim ok As Boolean
    Dim Addin As Object
    Dim NoAddIn As Boolean
    Dim progress As String
 
    Set Addin = GetAutomationObject
    NoAddIn = (Addin Is Nothing)
    
    progress = "Style"
    
    LoopStyle doc, "Front"
    LoopStyle doc, "Toc Title"
    LoopStyle doc, "Toc Title Fig"
    If pdfLayout = "SparePartsCatalog" Then
        LoopHeadingPart doc
    End If

    progress = "Save"
    
    Dim dx As docXML
    Dim ccs As Collection
    
    Set dx = GetManager.GetDX
    Set ccs = dx.UnlockAllContentControls
    
    Dim toc As TableOfContents
    Dim tof As TableOfFigures
    
    For Each toc In doc.TablesOfContents
        toc.UpdatePageNumbers
    Next
    
    For Each tof In doc.TablesOfFigures
        tof.UpdatePageNumbers
    Next
    
    dx.LockAllContentControls ccs
    Set ccs = Nothing
    Set dx = Nothing
    
    Application.ScreenUpdating = True
    
    chkout = True
    If LCase(pdfFileName) Like "http*" Then
        Select Case PDFMode
        Case "A new version of existing PDF file will be created"
            chkout = CheckOutFunc(pdfFileName)
        End Select
        
        tmpFileName = UserTemp() & "\" & doc.name & ".pdf"
        ActiveDocument.ExportAsFixedFormat OutputFileName:= _
            tmpFileName, ExportFormat:=wdExportFormatPDF, _
            OpenAfterExport:=NoAddIn, OptimizeFor:= _
            wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
            Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
            CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
            BitmapMissingFonts:=True, UseISO19005_1:=PDFA
    Else
        ActiveDocument.ExportAsFixedFormat OutputFileName:= _
            pdfFileName, ExportFormat:=wdExportFormatPDF, _
            OpenAfterExport:=NoAddIn, OptimizeFor:= _
            wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
            Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
            CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
            BitmapMissingFonts:=True, UseISO19005_1:=PDFA
    End If
       
    progress = "AfterSave"
    
    If Not NoAddIn Then
        Dim pdfLayoutParameter As String
        pdfLayoutParameter = pdfLayout
        If pdfLayout = "SparePartsCatalog" Then
            pdfLayoutParameter = "TwoPageRight"
        End If
        pdfLayoutParameter = pdfLayoutParameter & ",," & Replace(doc.BuiltInDocumentProperties("Title"), ",", Asc(222))
        Dim modify As Boolean
        If LCase(pdfFileName) Like "http*" Then
            modify = Addin.ModifyPDF(tmpFileName, pdfLayoutParameter)
        Else
            modify = Addin.ModifyPDF(pdfFileName, pdfLayoutParameter)
        End If
    End If
    
    Dim uploaded As String
    Dim checkedIn As String
    Dim checkedOut As Boolean
    
    checkedIn = ""
    uploaded = ""
    
    If tmpFileName > "" Then
        If Dir(tmpFileName) <> "" Then
            uploaded = UploadFile(tmpFileName, pdfFileName, IIf(LCase(ActiveDocument.fullName) Like "http*", ActiveDocument.fullName, "-"), fields, 30)
            
            If uploaded Like "NotFound:*" Or Not uploaded Like "*ErrorCode=""Success""*" Then
                uploaded = "Error:Upload failed"
            ElseIf PDFVersioning <> "None" Then
                checkedOut = Not IsEmpty(GetItem(pdfFileName, 30, "CheckoutUser")("CheckoutUser"))
                If checkedOut = False And PDFVersioning = "Major" Then
                    CheckOutFunc (pdfFileName)
                    Unlink pdfFileName
                    checkedIn = CheckIn(pdfFileName, IIf(PDFVersioning = "Minor", "0", "1"), VersionComment)
                    checkedOut = Not IsEmpty(GetItem(pdfFileName, 30, "CheckoutUser")("CheckoutUser"))
                    If checkedOut Then
                        uploaded = "Error:Check in failed"
                    End If
                ElseIf checkedOut = False And PDFVersioning = "Minor" Then
                    CheckOutFunc (pdfFileName)
                    Unlink pdfFileName
                    checkedIn = CheckIn(pdfFileName, "2", VersionComment)
                    checkedOut = Not IsEmpty(GetItem(pdfFileName, 30, "CheckoutUser")("CheckoutUser"))
                    If checkedOut Then
                        uploaded = "Error:Check in failed"
                    End If
                ElseIf checkedOut = True Then
                    Unlink pdfFileName
                    checkedIn = CheckIn(pdfFileName, IIf(PDFVersioning = "Minor", "0", "1"), VersionComment)
                    checkedOut = Not IsEmpty(GetItem(pdfFileName, 30, "CheckoutUser")("CheckoutUser"))
                    If checkedOut Then
                        uploaded = "Error:Check in failed"
                    End If
                End If
            ElseIf PDFVersioning = "None" And PDFMode = "Save as new SharePoint PDF file" Then
                CheckOutFunc (pdfFileName)
                Unlink pdfFileName
            End If
        End If
    End If
    
    doc.saved = True
    
    If uploaded Like "Error:Check in failed" Then
        MsgBox "Check in failed." & vbCrLf & vbCrLf & "Upload succeeded. Missing required properties?", vbInformation + vbOKOnly, "Create PDF"
        uploaded = ""
    End If
    
    If showPDF Then
        If uploaded Like "Error:*" And tmpFileName > "" Then
            MsgBox "Upload failed. Opening temporary file." & vbCrLf & vbCrLf & "Missing access rights?", vbInformation + vbOKOnly, "Create PDF"
            Shell "explorer.exe """ & tmpFileName & """"
        Else
            Shell "explorer.exe """ & pdfFileName & """"
        End If
    Else
    
    End If
    
    
Finally:
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    objUndo.EndCustomRecord
    ActiveDocument.Undo
    
    If tmpFileName > "" And Not uploaded Like "Error:*" Then
        On Error Resume Next
        Kill tmpFileName
        On Error GoTo 0
    End If
    
    Exit Sub

Catch:
    Select Case progress
    Case "Style"
        Debug.Print Err.Description
    Case "Save"
        Debug.Print Err.Description
    Case "AfterSave"
        Debug.Print Err.Description
    End Select
    
    Resume Finally


End Sub


Public Sub PDFDraft()
    Dim ok As Boolean
    Dim fileName As String
    Dim showPDF As Boolean
    Dim Addin As Object
    Dim NoAddIn As Boolean
    Dim pdfFileName As String
    
    Dim objUndo As UndoRecord

    Set objUndo = Application.UndoRecord
    objUndo.StartCustomRecord ("Create PDF")
 
    LoopStyle ActiveDocument, "Front"
    LoopStyle ActiveDocument, "Toc Title"
    LoopStyle ActiveDocument, "Toc Title Fig"
    LoopHeadingPart ActiveDocument


    
    Set Addin = GetAutomationObject
    NoAddIn = (Addin Is Nothing)
    
    showPDF = False
    
    fileName = ActiveDocument.name
    If InStr(fileName, ".") = 0 Then
        fileName = fileName & ".pdf"
    Else
        fileName = Mid(fileName, 1, InStrRev(fileName, ".")) & "pdf"
    End If
    
    On Error Resume Next
    MkDir UserTemp() & "\BGdoc"
    MkDir UserTemp() & "\BGdoc\PDF"
    On Error GoTo 0
    
    If ActiveDocument.name = ActiveDocument.fullName Then
        pdfFileName = UserTemp() & "\BGdoc\PDF\Draft " & fileName
        On Error Resume Next
        ActiveDocument.ExportAsFixedFormat OutputFileName:= _
            pdfFileName, ExportFormat:= _
            wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
            wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
            Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
            CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
            BitmapMissingFonts:=True, UseISO19005_1:=False
            
            showPDF = True
            
        On Error GoTo 0
    Else
        Dim FileSaveAsSetting As String
        FileSaveAsSetting = ActiveDocument.Path
        
        If Not Right$(FileSaveAsSetting, 1) = "\" And Not Right$(FileSaveAsSetting, 1) = "/" Then
            FileSaveAsSetting = FileSaveAsSetting + IIf(InStr(FileSaveAsSetting, "\") > 0, "\", "/")
        End If
        
        Dim dlg As FileDialog
        Set dlg = Application.FileDialog(msoFileDialogSaveAs)
        
        With Application.FileDialog(msoFileDialogSaveAs)
            .title = "Create PDF"
            .AllowMultiSelect = False
            .ButtonName = "Save PDF"
            .FilterIndex = 7
            .InitialFileName = FileSaveAsSetting & fileName
        End With
        Dim choice As Integer
        choice = Application.FileDialog(msoFileDialogSaveAs).show
        If choice <> 0 Then
            pdfFileName = FixPath(dlg.SelectedItems(1))
            dlg.title = ""
            dlg.ButtonName = ""
            dlg.FilterIndex = 1
            Set dlg = Nothing
            ok = (pdfFileName > "")
'            ok = (Len(GetFileName(pdfFilename)) = 0)
'            If Not ok Then
'                ok = (vbOK = MsgBox("Overwrite file? ", vbCritical + vbOKCancel, "Create PDF"))
'            End If

            If ok Then
                ActiveDocument.ExportAsFixedFormat OutputFileName:= _
                    pdfFileName, ExportFormat:= _
                    wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
                    wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
                    Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
                    CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
                    BitmapMissingFonts:=True, UseISO19005_1:=False
                
                    showPDF = True
                
                On Error GoTo 0
            End If
        Else
            ok = (vbOK = MsgBox("Open temporary draft? ", vbCritical + vbOKCancel, "Create PDF"))
            If ok Then
                pdfFileName = UserTemp() & "\BGdoc\PDF\Draft " & fileName
                On Error Resume Next
                ActiveDocument.ExportAsFixedFormat OutputFileName:= _
                    pdfFileName, ExportFormat:= _
                    wdExportFormatPDF, OpenAfterExport:=NoAddIn, OptimizeFor:= _
                    wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
                    Item:=wdExportDocumentContent, IncludeDocProps:=True, KeepIRM:=True, _
                    CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=False, _
                    BitmapMissingFonts:=True, UseISO19005_1:=False
                
                    showPDF = True
                
                On Error GoTo 0
            End If
        End If
        
    End If
    
    If Not NoAddIn And showPDF Then
        Dim pdfLayout As String
        pdfLayout = "Two Page Right" '"Standard" '
        pdfLayout = pdfLayout & ",," & Replace(ActiveDocument.BuiltInDocumentProperties("Title"), ",", Asc(222))
   
        Addin.ModifyPDF pdfFileName, pdfLayout
        Shell "explorer.exe """ & pdfFileName & """"
    End If
    
    objUndo.EndCustomRecord
    
    ActiveDocument.Undo
 
End Sub


Public Function FolderExists(strFolderPath As String) As Boolean
    On Error Resume Next
    FolderExists = (GetAttr(strFolderPath) And vbDirectory) = vbDirectory
    On Error GoTo 0
End Function

Public Function URLDecode(ByVal strEncodedURL As String) As String
   Dim str As String
   str = strEncodedURL
   If Len(str) > 0 Then
      str = Replace(str, "&amp", " & ")
      str = Replace(str, "&#03", Chr(39))
      str = Replace(str, "&quo", Chr(34))
      str = Replace(str, "+", " ")
      str = Replace(str, "%3A", ":")
      str = Replace(str, "%2A", "*")
      str = Replace(str, "%40", "@")
      str = Replace(str, "%2D", "-")
      str = Replace(str, "%5F", "_")
      str = Replace(str, "%2B", "+")
      str = Replace(str, "%2E", ".")
      str = Replace(str, "%2F", "/")

      URLDecode = str
  Else
    URLDecode = ""
  End If
End Function

Public Sub UpdateHeadingPart(c As Cell)
    Dim tbl As table
    Dim r As row
    Dim rng As Range
    Dim p As Paragraph
    Dim cLoop As Cell
    
    
    Dim iCell As Integer
    Dim txt As String
    
    Set tbl = c.Range.Tables(1)
    txt = c.Range.Text
    txt = Left(txt, Len(txt) - 2)
    
    
    For iCell = 1 To 10
        Set cLoop = Nothing
        On Error Resume Next
        Set cLoop = tbl.Cell(1, iCell)
        If Not cLoop Is Nothing Then
            Set p = cLoop.Range.Paragraphs(1)
            If p.PageBreakBefore Then
                p.PageBreakBefore = False
            End If
            If p.SpaceBefore = 3 Then
                p.SpaceBefore = 2
            End If
        End If
    Next
    
    
    tbl.Cell(1, 1).Range.Select
    Selection.InsertRowsAbove 1
    tbl.Cell(2, 1).Range.Select
    Selection.SplitTable
    
    Set c = tbl.Cell(1, 1)
    Set rng = c.Range
    rng.Collapse wdLeft
    rng.Move WdUnits.wdTable, -1
    rng.Select
    rng.Tables(1).Delete
    rng.InsertAfter txt
    rng.Style = "Paragraph1"
    rng.ParagraphFormat.OutlineLevel = wdOutlineLevel1
    rng.ParagraphFormat.PageBreakBefore = True
    rng.Paragraphs(1).Range.Font.StrikeThrough = True
    rng.Paragraphs(1).Range.Font.color = wdColorWhite
    Debug.Print txt
    
End Sub


Public Sub LoopStyle(doc As Document, styleName As String)
    Dim sty As Style
    Set sty = Nothing
    On Error Resume Next
    Set sty = doc.Styles(styleName)
    On Error GoTo 0
    If sty Is Nothing Then Exit Sub
    
    Dim start As Long
    Dim rng As Range
    Set rng = doc.Range(0, 0)
    'rng.Collapse wdCollapseStart
    Debug.Print doc.name, rng.start, rng.End
    start = 999999999
    With rng.find
         .ClearFormatting
         .Style = styleName
         '.Format = True
         .Forward = False
         .Wrap = wdFindContinue
         '.Text = ""
         While .Execute
            If rng.start >= start Then GoTo ExitLoop
            start = rng.start
            Debug.Print start, rng.start, rng.Text
            If styleName = "Front" Then
                If rng.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then rng.ParagraphFormat.OutlineLevel = wdOutlineLevel1
            ElseIf styleName Like "Toc Title*" Then
                If rng.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then rng.ParagraphFormat.OutlineLevel = wdOutlineLevel1
            End If
            rng.Collapse wdCollapseStart
            DoEvents
         Wend
ExitLoop:
    End With
End Sub

Public Sub TestLoopStyle()
    PDFDraft
End Sub

Public Sub TestLoopTables()
    LoopHeadingPart ActiveDocument
    
End Sub

Public Sub LoopHeadingPart(doc As Document)
    Dim tbl As table
    Dim r As row
    Dim i As Integer
    Dim c As Cell
    
    For i = doc.Tables.Count To 1 Step -1
        Set tbl = doc.Tables(i)
        Set c = Nothing
        On Error Resume Next
        Set c = tbl.Cell(1, 2)
        On Error GoTo 0
        If c Is Nothing Then GoTo NextTable
        If c.Range.Style Is Nothing Then GoTo NextTable
        If c.Range.Style.NameLocal <> "HeadingPart" Then GoTo NextTable
        
        'Debug.Print c.Range.Text
        UpdateHeadingPart c
        
NextTable:
    Next
End Sub

Public Function IsSparePartsCatalog(doc As Document) As Boolean
On Error GoTo Catch
    
    Dim tbl As table
    Dim r As row
    Dim i As Integer
    Dim c As Cell
    Dim found As Boolean
    Dim sty As Style
    found = False
    
    For i = doc.Tables.Count To 1 Step -1
        Set tbl = doc.Tables(i)
        Set c = Nothing
        On Error Resume Next
        Set c = tbl.Cell(1, 2)
        On Error GoTo Catch
        If c Is Nothing Then GoTo NextTable
        Set sty = Nothing
        On Error Resume Next
        Set sty = c.Range.Style
        On Error GoTo 0
        If sty Is Nothing Then
            On Error Resume Next
            Set sty = c.Range.Paragraphs(1).Style
            On Error GoTo Catch
            If sty Is Nothing Then GoTo NextTable
            If sty.NameLocal <> "HeadingPart" Then
                GoTo NextTable
            End If
        Else
            If sty.NameLocal <> "HeadingPart" Then GoTo NextTable
        End If
        
        found = True
        Exit For
        
NextTable:
    Next
    
Finally:
    IsSparePartsCatalog = found
    Exit Function

Catch:
    MsgBox "Unable to correctly detect type of docuemnt", vbCritical + vbOKOnly, "Is Spare Parts Catalogue"
    Resume Finally
    
    
End Function

Public Sub AttachDocumentationTemplate(doc As Document, Template As String, Language As String, Company As String, Optional UpdateStyles As Boolean = False)
    On Error GoTo OnError
    'Application.ScreenUpdating = False

    Dim stSave As Range
    Set stSave = Nothing
    Set stSave = Application.Selection.Range

    Dim blnUpdateStylesOnOpen As Boolean
    blnUpdateStylesOnOpen = doc.UpdateStylesOnOpen
    doc.UpdateStylesOnOpen = False ' dlgDT.chkUpdateStyles.Value
    AttachTemplate doc, Template

    If UpdateStyles Then
        doc.PageSetup.LeftMargin = 70.9
        doc.PageSetup.RightMargin = 70.9
        doc.PageSetup.TopMargin = 99.25
        doc.PageSetup.BottomMargin = 44.5
        doc.PageSetup.HeaderDistance = 31.2
        doc.PageSetup.FooterDistance = 17.85
        doc.CopyStylesFromTemplate (doc.attachedTemplate.fullName)
    End If
    
    SetVariable doc, "DocLang", Language
    SetVariable doc, "DocCompany", Company
    
    Dim DocDate As String
    DocDate = ""
    On Error Resume Next
    DocDate = doc.Variables("Date").value
    On Error GoTo OnError

    If DocDate = "" Then doc.Variables("Date").value = CrisplantDate(Language)
    Dim st As Range

    Select Case Language
        Case "German"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdGerman
        Case "Danish"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdDanish
        Case "French"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdFrench
        Case "Spanish"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdSpanish
        Case "English (UK)"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdEnglishUK
        Case "English (US)"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdEnglishUS
        Case "Brazilian Portuguese"
            doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId = WdLanguageID.wdPortugueseBrazil
    End Select


    For Each st In doc.StoryRanges
        st.Select
        Select Case Language
            Case "German"
                st.LanguageId = WdLanguageID.wdGerman
            Case "Danish"
                st.LanguageId = WdLanguageID.wdDanish
            Case "French"
                st.LanguageId = WdLanguageID.wdFrench
            Case "Spanish"
                st.LanguageId = WdLanguageID.wdSpanish
            Case "English (UK)"
                st.LanguageId = WdLanguageID.wdEnglishUK
            Case "English (US)"
                st.LanguageId = WdLanguageID.wdEnglishUS
            Case "Brazilian Portuguese"
                st.LanguageId = WdLanguageID.wdPortugueseBrazil
        End Select
        Application.Selection.Collapse (WdCollapseDirection.wdCollapseStart)
    Next

    If doc.Paragraphs.Count > 0 Then
        doc.Paragraphs(1).Style.LanguageId = doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId
    End If

    On Error Resume Next

    Application.ActiveWindow.ActivePane.Close
    Application.ActiveWindow.ActivePane.View.Type = WdViewType.wdPrintView
    SetVariable doc, "HeaderName", "AS"
    SetVariable doc, "CopyR", Company & " " & Format(Date, "yyyy")
    
    If doc.PageSetup.PaperSize = WdPaperSize.wdPaperLetter Then
        SetVariable doc, "Paper", "Letter"
    Else
        SetVariable doc, "Paper", "A4"
    End If
    Application.run ("cpHeaderSetting")

    On Error GoTo OnError

DoExit:
    stSave.Select
    doc.UpdateStylesOnOpen = blnUpdateStylesOnOpen
    Application.ScreenUpdating = True
    Exit Sub

OnError:
    Resume DoExit
End Sub

Public Sub AttachTemplate(doc As Document, TemplateFullName As String)
On Error GoTo Catch

    Dim saved As Boolean
    If Not TemplateFullName = "" Then
        Dim TryUnprotect As Boolean
        TryUnprotect = False
        saved = doc.saved
        
        On Error Resume Next
        doc.attachedTemplate = TemplateFullName
        On Error GoTo Catch
        
        If doc.attachedTemplate.fullName <> TemplateFullName Then
            TryUnprotect = True
        End If
        
        
        If TryUnprotect Then
            Dim DocTemplate As Word.Document
            Set DocTemplate = Application.Documents.Open(TemplateFullName, True, True, False, , , , , , , , False)
            Dim TemplateProtection As WdProtectionType
            TemplateProtection = DocTemplate.ProtectionType
            If DocTemplate.ProtectionType <> Word.WdProtectionType.wdNoProtection Then
                DocTemplate.Unprotect
            End If
            On Error Resume Next
            doc.attachedTemplate = TemplateFullName
            On Error GoTo Catch
            DocTemplate.Close Word.WdSaveOptions.wdDoNotSaveChanges
            
            If doc.attachedTemplate.fullName <> TemplateFullName Then
                GoTo Finally
            End If
            
            If doc.ProtectionType <> TemplateProtection Then
                doc.Protect TemplateProtection
            End If

        End If
Finally:
        doc.saved = saved
    End If
    Exit Sub
    
Catch:
    MsgBox "Unable to attach template" & vbCrLf & vbCrLf & Err.Description, vbCritical + vbOKOnly, "AttachTemplate"
    Resume Finally
    
End Sub


Public Function CrisplantDate(ByVal strLanguage As String, Optional ByVal cnvDate As String = "") As String
     'This function returns todays date - in Crisplant format based on the passed language code.
     'If the optional parameter cnvDate is passed, this date is used insted of todays date.

     On Error GoTo err_FKILogistexDate

     Dim strYear As String
     Dim strMonth As String
     Dim strDay As String
     Dim tmpDate As String
     Dim strDate As String

     Dim strNameOfMonth(12) As String
     strDate = cnvDate
     If strDate = "" Then
         tmpDate = Format(Date, "yyyy-mm-dd")
     Else
         tmpDate = strDate
     End If
     

     If IsDate(tmpDate) Then
         Select Case LCase(strLanguage)

             Case "german", "deutsch", "de", "german"
                 strNameOfMonth(1) = "Jan"
                 strNameOfMonth(2) = "Feb"
                 strNameOfMonth(3) = "M|fffd|r"
                 strNameOfMonth(4) = "Apr"
                 strNameOfMonth(5) = "Mai"
                 strNameOfMonth(6) = "Jun"
                 strNameOfMonth(7) = "Jul"
                 strNameOfMonth(8) = "Aug"
                 strNameOfMonth(9) = "Sep"
                 strNameOfMonth(10) = "Okt"
                 strNameOfMonth(11) = "Nov"
                 strNameOfMonth(12) = "Dez"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strDay & ". " & strMonth & " " & strYear

             Case "danish", "dansk", "dk", "danish", "da"
                 strNameOfMonth(1) = "jan"
                 strNameOfMonth(2) = "feb"
                 strNameOfMonth(3) = "mar"
                 strNameOfMonth(4) = "apr"
                 strNameOfMonth(5) = "maj"
                 strNameOfMonth(6) = "jun"
                 strNameOfMonth(7) = "jul"
                 strNameOfMonth(8) = "aug"
                 strNameOfMonth(9) = "sep"
                 strNameOfMonth(10) = "okt"
                 strNameOfMonth(11) = "nov"
                 strNameOfMonth(12) = "dec"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strDay & ". " & strMonth & " " & strYear

             Case "french", "fran|fffd|ais", "fr", "french"
                 strNameOfMonth(1) = "jan"
                 strNameOfMonth(2) = "f|fffd|v"
                 strNameOfMonth(3) = "mar"
                 strNameOfMonth(4) = "avr"
                 strNameOfMonth(5) = "mai"
                 strNameOfMonth(6) = "juin"
                 strNameOfMonth(7) = "juil"
                 strNameOfMonth(8) = "ao|fffd|t"
                 strNameOfMonth(9) = "sep"
                 strNameOfMonth(10) = "oct"
                 strNameOfMonth(11) = "nov"
                 strNameOfMonth(12) = "d|fffd|c"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 'If strDay = "1" Then
                 '    strDay = "1er"
                 'End If
                 CrisplantDate = strDay & " " & strMonth + " " + strYear

             Case "spanish", "espa|fffd|ol", "sp", "spanish"
                 strNameOfMonth(1) = "ene"
                 strNameOfMonth(2) = "feb"
                 strNameOfMonth(3) = "mar"
                 strNameOfMonth(4) = "abr"
                 strNameOfMonth(5) = "may"
                 strNameOfMonth(6) = "jun"
                 strNameOfMonth(7) = "jul"
                 strNameOfMonth(8) = "ago"
                 strNameOfMonth(9) = "sep"
                 strNameOfMonth(10) = "oct"
                 strNameOfMonth(11) = "nov"
                 strNameOfMonth(12) = "dic"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strDay & " " & strMonth & " " & strYear

             Case "portuguese", "portuguise", "portugu|fffd|s (br)", "br", "brazilian portuguese"
                 strNameOfMonth(1) = "Jan"
                 strNameOfMonth(2) = "Fev"
                 strNameOfMonth(3) = "Mar"
                 strNameOfMonth(4) = "Abr"
                 strNameOfMonth(5) = "Mai"
                 strNameOfMonth(6) = "Jun"
                 strNameOfMonth(7) = "Jul"
                 strNameOfMonth(8) = "Ago"
                 strNameOfMonth(9) = "Set"
                 strNameOfMonth(10) = "Out"
                 strNameOfMonth(11) = "Nov"
                 strNameOfMonth(12) = "Dez"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strDay & " " & strMonth & " " & strYear

             Case "us", "english (us)"
                 strNameOfMonth(1) = "Jan"
                 strNameOfMonth(2) = "Feb"
                 strNameOfMonth(3) = "Mar"
                 strNameOfMonth(4) = "Apr"
                 strNameOfMonth(5) = "May"
                 strNameOfMonth(6) = "Jun"
                 strNameOfMonth(7) = "Jul"
                 strNameOfMonth(8) = "Aug"
                 strNameOfMonth(9) = "Sept"
                 strNameOfMonth(10) = "Oct"
                 strNameOfMonth(11) = "Nov"
                 strNameOfMonth(12) = "Dec"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strMonth & ". " & strDay & ", " & strYear

             Case Else   'Default English
                 strNameOfMonth(1) = "Jan"
                 strNameOfMonth(2) = "Feb"
                 strNameOfMonth(3) = "Mar"
                 strNameOfMonth(4) = "Apr"
                 strNameOfMonth(5) = "May"
                 strNameOfMonth(6) = "Jun"
                 strNameOfMonth(7) = "Jul"
                 strNameOfMonth(8) = "Aug"
                 strNameOfMonth(9) = "Sep"
                 strNameOfMonth(10) = "Oct"
                 strNameOfMonth(11) = "Nov"
                 strNameOfMonth(12) = "Dec"
                 strYear = Year(tmpDate)
                 strMonth = strNameOfMonth(Month(tmpDate))
                 strDay = DatePart("d", tmpDate)
                 CrisplantDate = strDay & " " & strMonth & " " & strYear
         End Select
     Else
         CrisplantDate = tmpDate
     End If

ExitHere:
     Exit Function

err_FKILogistexDate:
     CrisplantDate = "Error converting date"

 End Function


Public Function DetectLanguage(doc As Document) As String
     On Error GoTo Catch
     
     Dim strLanguage As String
     Dim LanguageId As WdLanguageID
     Dim lname As String
     
     strLanguage = ""
     lname = LCase(doc.name)
     
     If lname Like LCase("*_FR_*") Or lname Like LCase("*_FR.doc*") Then
        strLanguage = "French"
     ElseIf lname Like LCase("*_DE_*") Or lname Like LCase("*_DE.doc*") Then
        strLanguage = "German"
     ElseIf lname Like LCase("*_DA_*") Or lname Like LCase("*_DA.doc*") Then
        strLanguage = "Danish"
     ElseIf lname Like LCase("*_DK_*") Or lname Like LCase("*_DK.doc*") Then
        strLanguage = "Danish"
     ElseIf lname Like LCase("*_EN_*") Or lname Like LCase("*_EN.doc*") Then
        strLanguage = "English (UK)"
     ElseIf lname Like LCase("*_UK_*") Or lname Like LCase("*_UK.doc*") Then
        strLanguage = "English (UK)"
     ElseIf lname Like LCase("*_US_*") Or lname Like LCase("*_US.doc*") Then
        strLanguage = "English (US)"
     ElseIf lname Like LCase("*_SP_*") Or lname Like LCase("*_SP.doc*") Then
        strLanguage = "Spanish"
     ElseIf lname Like LCase("*_ES_*") Or lname Like LCase("*_ES.doc*") Then
        strLanguage = "Spanish"
     ElseIf lname Like LCase("*_BR_*") Or lname Like LCase("*_BR.doc*") Then
        strLanguage = "Brazilian Portuguese"
     End If
     
     If strLanguage > "" Then
        DetectLanguage = strLanguage
        Exit Function
     End If
     
     On Error Resume Next
     strLanguage = doc.Variables("DocLang").value
     On Error GoTo Catch
     
     If strLanguage > "" Then
        DetectLanguage = strLanguage
        Exit Function
     End If
     If Not doc.LanguageDetected Then
         doc.DetectLanguage
     End If
     
     LanguageId = doc.Styles(WdBuiltinStyle.wdStyleNormal).LanguageId
     strLanguage = GetLanguageFromID(LanguageId)
Finally:

     DetectLanguage = strLanguage
     Exit Function
Catch:
    strLanguage = "English (UK)"
    Resume Finally

 End Function

 Public Function GetLanguageFromID(LanguageId As WdLanguageID) As String
     Select Case LanguageId
         Case WdLanguageID.wdEnglishUK
             GetLanguageFromID = "English (UK)"
         Case WdLanguageID.wdGerman
             GetLanguageFromID = "German"
         Case WdLanguageID.wdDanish
             GetLanguageFromID = "Danish"
         Case WdLanguageID.wdFrench
             GetLanguageFromID = "French"
         Case WdLanguageID.wdSpanish
             GetLanguageFromID = "Spanish"
         Case WdLanguageID.wdEnglishUS
             GetLanguageFromID = "English (US)"
         Case WdLanguageID.wdPortugueseBrazil
             GetLanguageFromID = "Brazilian Portuguese"
         Case Else
             GetLanguageFromID = "English (UK)"
     End Select
 End Function
 
Public Function SetVariable(doc As Document, name As String, value As String)
    On Error Resume Next
    doc.Variables.Add name, value
    doc.Variables(name).value = value
    On Error GoTo 0
End Function

Public Function GetUrlProtocol(url As String, protocol As String, Optional timeOut As Single = 30) As String
    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    WebRequest.Open IIf(protocol = "STATUS", "HEAD", protocol), url, True
    WebRequest.send
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        If protocol = "HEAD" Then
            result = "Found:" & WebRequest.getAllResponseHeaders
        ElseIf protocol = "STATUS" Then
            result = WebRequest.Status
        Else
            result = "Found:" & WebRequest.responseText
        End If
    Else
        If protocol = "HEAD" Then
            result = "NotFound:" & WebRequest.Status
        ElseIf protocol = "STATUS" Then
            result = WebRequest.Status
        Else
            result = "NotFound:" & WebRequest.Status
        End If
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetUrlProtocol = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function


Public Function CheckIn(docUrl As String, checkinType As String, comments As String) As String
' ? CheckIn("http://crisnet/Project/90006/O and M/OnCPDoc2003.pdf","1","My comment") ' 0 Minor, 1 Major, 2 Overwrite
    Dim Site As String
    Dim user As String
    Site = GetSite(docUrl)
    
    If Site Like "Error:*" Then
        CheckIn = Site
        Exit Function
    End If
    
    ' docUrl = "http://crisnet/project/90010/Project/00_Sales/Test.docx"

    Dim urlRef As String
    urlRef = Site & "/_vti_bin/Lists.asmx"
    
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", urlRef, False
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CheckInFile"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <CheckInFile xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <pageUrl>" & docUrl & "</pageUrl>" & _
    "      <comment>" & comments & "</comment>" & _
    "      <CheckinType>" & checkinType & "</CheckinType>" & _
    "    </CheckInFile>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"

    WebRequest.send strRequest

    Dim docResponse As New DOMDocument60
    Set docResponse = WebRequest.responseXML
    CheckIn = docResponse.Text
    
End Function

Public Function GetVersioning(siteUrl As String, listName As String, Optional timeOut As Single = 30) As String
    Dim result As String
    result = GetList(siteUrl, listName, timeOut)
    If result Like "NotFound*" Then
        
    ElseIf InStr(result, "EnableMinorVersion=""True""") > 0 Then
        result = "Minor"
    ElseIf InStr(result, "EnableVersioning=""True""") > 0 Then
        result = "Major"
    Else
        result = "None"
    End If
    GetVersioning = result
End Function

Public Function GetListGUID(siteUrl As String, listName As String, Optional timeOut As Single = 30) As String
    ' ? GetList("http://crisnet/Project/90006", "O and M")

    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim urlRef As String
    urlRef = siteUrl & "/_vti_bin/Lists.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetListCollection"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <GetListCollection xmlns='http://schemas.microsoft.com/sharepoint/soap/' />" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.XML
        Dim docXML As New DOMDocument60
        Dim strXML As String
        strXML = result
        Dim posBegin As Long
        Dim posEnd As Long
        
        posBegin = InStr(1, strXML, "<Lists>", vbTextCompare)
        If posBegin > 0 Then
            posEnd = InStr(posBegin, strXML, "</Lists>")
            If posEnd > 0 Then
                strXML = Mid(strXML, posBegin, posEnd - posBegin + Len("</Lists>"))
            Else
                strXML = "Error:</Lists> not found"
            End If
        Else
            strXML = "Error:<Lists> not found"
        End If
        If Not strXML Like "Error:*" Then
            docXML.LoadXML strXML
            docXML.SetProperty "SelectionLanguage", "XPath"
            
            Dim nodes As IXMLDOMNodeList
            Dim node As IXMLDOMNode
            Dim att As IXMLDOMAttribute
            
            Dim xPathFilter As String
            xPathFilter = "//List"
        '        Debug.Print xPathFilter
            Set nodes = docXML.SelectNodes(xPathFilter)
            
            If nodes.length = 0 Then
                strXML = "Error:NotFound"
            Else
                For Each node In nodes
                    Set att = node.SelectSingleNode("@DefaultViewUrl")
                    If Not att Is Nothing Then
                        If att.Text Like "*/" & listName & "/Forms/*" Then
                            strXML = node.SelectSingleNode("@ID").Text
                            Exit For
                        ElseIf att.Text Like "*/Lists/" & listName & "/*" Then
                            strXML = node.SelectSingleNode("@ID").Text
                            Exit For
                        End If
                    End If
                Next
            End If
            result = strXML
        Else
            strXML = "Error:List not found"
        End If
    Else
        result = "Error:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetListGUID = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function


Public Function GetList(siteUrl As String, listName As String, Optional timeOut As Single = 30) As String
    ' ? GetList("http://crisnet/Project/90006", "O and M")

    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim result As String
    Dim listId As String
    
    listId = GetListGUID(siteUrl, listName)
    If listId Like "Error:*" Then
        result = "NotFound:" & listId
        GoTo Finally
    End If

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim urlRef As String
    urlRef = siteUrl & "/_vti_bin/Lists.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetList"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <GetList xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <listName>" & listId & "</listName>" & _
    "    </GetList>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.XML
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetList = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Function GetSPUserID(siteUrl As String, Optional timeOut As Single = 30) As String
    Dim aspx As String
    Dim posBegin As Long
    Dim posEnd As Long
    
    aspx = GetURLPage(siteUrl & "/_layouts/userdisp.aspx?Force=True&" & CStr(Now), timeOut)
    
    posBegin = InStr(1, aspx, "_spUserId=", vbTextCompare)
    If posBegin > 0 Then
        posEnd = InStr(posBegin, aspx, ";")
        If posEnd > 0 Then
            GetSPUserID = Mid(aspx, posBegin + Len("_spUserId="), posEnd - posBegin - Len("_spUserId="))
        Else
            GetSPUserID = -1
        End If
    Else
        GetSPUserID = -1
    End If
End Function

Public Function DictionaryToString(dic As Scripting.Dictionary) As String
    Dim v As Variant
    Dim res As String
    res = ""
    For Each v In dic.Keys
        res = IIf(res = "", "", res & vbCrLf) & v & "=>" & dic(v)
    Next
    DictionaryToString = res
    
End Function

Public Function GetUserInfo(docUrl As String, loginName As String, Optional timeOut As Single = 30) As Scripting.Dictionary
    ' ? GetUserInfo("http://crisnet/Project/90006", "MATRIX\adminply")

    On Error GoTo Catch

    Dim WebRequest As New XMLHTTP60
    Dim strXML As String
    Dim dic As New Scripting.Dictionary

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim urlRef As String
    urlRef = docUrl & "/_vti_bin/UserGroup.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/directory/GetUserInfo"
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <GetUserInfo xmlns='http://schemas.microsoft.com/sharepoint/soap/directory/'>" & _
    "      <userLoginName>" & loginName & "</userLoginName>" & _
    "    </GetUserInfo>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            strXML = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        strXML = WebRequest.responseXML.XML
        If Not strXML Like "Error:*" Then
            Dim docXML As New DOMDocument60
            
            Dim posBegin As Long
            Dim posEnd As Long
            
            posBegin = InStr(1, strXML, "<GetUserInfo>", vbTextCompare)
            If posBegin > 0 Then
                posEnd = InStr(posBegin, strXML, "</GetUserInfo>")
                If posEnd > 0 Then
                    strXML = Mid(strXML, posBegin + Len("<GetUserInfo>"), posEnd - posBegin - Len("<GetUserInfo>"))
                Else
                    strXML = "Error:</GetUserInfo> not found"
                End If
            Else
                strXML = "Error:<GetUserInfo> not found"
            End If
            If Not strXML Like "Error:*" Then
                docXML.LoadXML strXML
                docXML.SetProperty "SelectionLanguage", "XPath"
                
                Dim nodes As IXMLDOMNodeList
                Dim node As IXMLDOMNode
                Dim att As IXMLDOMAttribute
                
                Dim xPathFilter As String
                xPathFilter = "/User"
            '        Debug.Print xPathFilter
                Set nodes = docXML.SelectNodes(xPathFilter)
                
                If nodes.length = 0 Then
                    dic.Add "Error", "Error:NotFound"
                ElseIf nodes.length = 1 Then
                    For Each att In nodes(0).Attributes
                        dic.Add att.name, att.value
                    Next
                Else
                    dic.Add "Error", "Error:More than one"
                End If
            Else
                dic.Add "Error", strXML
            End If
        Else
            dic.Add "Error", strXML
        End If
    Else
        dic.Add "Error", "NotFound:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    Set GetUserInfo = dic
    Exit Function
    
Catch:
ErrorExit:
    strXML = "Error:" & Err.Description
    Resume Finally
End Function

Public Function GetItem(docUrl As String, Optional timeOut As Single = 30, Optional viewFields As String = "", Optional stopAfterMetaInfo As Boolean = True) As Scripting.Dictionary
    Dim Site As String
    Dim listName As String
    Dim listId As String
    Dim where As String
    Dim fileRef As String
    Dim strXML As String
    Dim user As String
    Dim res As String
    Dim dic As New Scripting.Dictionary
    
    
    Site = GetSite(docUrl, timeOut)

    If LCase(Site) Like "http*" Then
        user = GetSPUser(docUrl, timeOut)
        listName = Mid(docUrl, Len(Site) + 2)
        listName = Split(listName, "/")(0)
        listId = GetListGUID(Site, listName)
        
        fileRef = Split(docUrl, "/", 4)(3)
        
        where = "<Eq><FieldRef Name=""FileRef""/><Value Type=""Text"">" & fileRef & "</Value></Eq>"
        strXML = GetItems(Site & "/_vti_bin/Lists.asmx", listId, where, timeOut, viewFields)
  
        If Not strXML Like "Error:*" Then
            Dim docXML As New DOMDocument60
            strXML = GetXPathSoap(strXML, "//z:row", False, vbCrLf)
            docXML.LoadXML "<root>" & strXML & "</root>"
            docXML.SetProperty "SelectionLanguage", "XPath"
            
            Dim nodes As IXMLDOMNodeList
            Dim node As IXMLDOMNode
            Dim att As IXMLDOMAttribute
            
        '        Set nodes = docXML.SelectNodes("//row")
        '            For Each node In nodes
        '                Debug.Print node.XML
        '            Next
            Dim xPathFilter As String
            'xPathFilter = "//row[substring(@FileDirRef,string-length(@FileDirRef) -string-length('Reports/" & docId & "') +1) = 'Reports/" & docId & "']"
            xPathFilter = "//row"
        '        Debug.Print xPathFilter
            Set nodes = docXML.SelectNodes(xPathFilter)
            
            If nodes.length = 0 Then
                dic.Add "Error", "Error:NotFound"
            ElseIf nodes.length = 1 Then
                For Each att In nodes(0).Attributes
                    If att.name = "MetaInfo" Then
                        If stopAfterMetaInfo Then Exit For
                    End If
                    dic.Add att.name, att.value
                Next
                dic.Add "CurrentUser", user
            Else
                dic.Add "Error", "Error:More than one"
            End If
        Else
            dic.Add "Error", strXML
        End If
    Else
        dic.Add "Error", "Not SharePoint"
    End If
    
    Set GetItem = dic
End Function

Public Function GetItems(url As String, listName As String, where As String, Optional timeOut As Single = 30, Optional viewFields As String = "") As String
    On Error GoTo Catch
    If timeOut <= 0 Then timeOut = 30

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    Dim result As String
    Dim strViewfields As String
    Dim strQueryOptions As String
    
    If viewFields > "" Then
        Dim astrFields() As String
        Dim fld As Variant
        astrFields = Split(viewFields, ",")
        For Each fld In astrFields
            strViewfields = strViewfields & "<FieldRef Name='" & Trim(CStr(fld)) & "' />"
        Next
        strViewfields = "<ViewFields>" & strViewfields & "</ViewFields>"
        strQueryOptions = "<IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns><ViewFieldsOnly>TRUE</ViewFieldsOnly>"
    Else
        strViewfields = "<ViewFields></ViewFields>"
        strQueryOptions = ""
    End If
     
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", url, True 'False Async
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/" & "GetListItems"
    
    
strRequest = "<?xml version=""1.0"" encoding=""utf-8""?>" & _
        "<soap:Envelope " & _
            "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" " & _
            "xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" " & _
            "xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">" & _
            "<soap:Body>" & _
                "<GetListItems xmlns=""http://schemas.microsoft.com/sharepoint/soap/"">" & _
                "<listName>" & listName & "</listName>" & _
                "<query><Query>" & _
                    "<Where>" & where & "</Where>" & _
                    "</Query></query>" & _
                    "<viewFields>" & strViewfields & "</viewFields><queryOptions><QueryOptions>" & strQueryOptions & "<ViewAttributes Scope=""Recursive"" /></QueryOptions></queryOptions>" & _
                    "<rowLimit>100000</rowLimit>" & _
                "</GetListItems>" & _
            "</soap:Body>" & _
        "</soap:Envelope>"

    WebRequest.send strRequest

    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Debug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop

    Dim docResponse As New DOMDocument60
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        Set docResponse = WebRequest.responseXML
        If docResponse.XML <> "" Then
            result = docResponse.XML
        Else
            result = "Error:Empty XML returned"
        End If
    Else
        result = "Error:HTTP Status:" & WebRequest.Status
    End If
    
Finally:
    On Error GoTo 0
    GetItems = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
    
End Function


Public Function GetItemID(docId As String, Optional timeOut As Single = 30, Optional viewFields As String = "ID,FileLeafRef,FileDirRef") As String
    Dim strXML As String
    Dim aID() As String
    Dim where As String
    where = "<And><Eq><FieldRef Name=""DocID""/><Value Type=""Text"">" & docId & "</Value></Eq>" & _
            "<Contains><FieldRef Name=""FileDirRef""/><Value Type=""Text"">Reports/" & docId & "</Value></Contains></And>"
    'where = "<Eq><FieldRef Name=""DocID""/><Value Type=""Text"">" & DocID & "</Value></Eq>"
'    where = "<And><And><Eq><FieldRef Name=""DocID""/><Value Type=""Text"">" & DocID & "</Value></Eq>" & _
'            "<Eq><FieldRef Name=""Sidebar""/><Value Type=""Text"">#" & DocID & "</Value></Eq></And>" & _
'            "<Contains><FieldRef Name=""FileDirRef""/><Value Type=""Text"">Reports/" & DocID & "</Value></Contains></And>"
    
    
'    where = "<And><Eq><FieldRef Name=""DocID""/><Value Type=""Text"">" & DocID & "</Value></Eq>" & _
'            "<Eq><FieldRef Name=""Sidebar""/><Value Type=""Text"">#" & DocID & "</Value></Eq></And>"
            
    strXML = GetItems("http://ncr/_vti_bin/Lists.asmx", "Reports", where, timeOut, viewFields)
    
    If Not strXML Like "Error:*" Then
        Dim docXML As New DOMDocument60
        strXML = GetXPathSoap(strXML, "//z:row", False, vbCrLf)
        docXML.LoadXML "<root>" & strXML & "</root>"
        docXML.SetProperty "SelectionLanguage", "XPath"
        
        Dim nodes As IXMLDOMNodeList
        Dim node As IXMLDOMNode
'        Set nodes = docXML.SelectNodes("//row")
'            For Each node In nodes
'                Debug.Print node.XML
'            Next
        Dim xPathFilter As String
        xPathFilter = "//row[substring(@FileDirRef,string-length(@FileDirRef) -string-length('Reports/" & docId & "') +1) = 'Reports/" & docId & "']"
'        Debug.Print xPathFilter
        Set nodes = docXML.SelectNodes(xPathFilter)
        
        If nodes.length = 0 Then
            GetItemID = "Error:NotFound"
        ElseIf nodes.length = 1 Then
            GetItemID = nodes(0).Attributes(0).Text
        Else
            Dim strNodes  As String
            strNodes = "Error:More than one"
            For Each node In nodes
                'Debug.Print node.XML
                'Debug.Print node.Attributes(0).Text, node.Attributes(1).Text, node.Attributes(2).Text
                strNodes = strNodes & vbCrLf & node.Attributes(0).Text & vbTab & node.Attributes(1).Text & vbTab & node.Attributes(2).Text
            Next
            GetItemID = strNodes
        End If
    Else
        GetItemID = strXML
    End If
End Function

Public Function GetXPathSoap(strXML As String, xpath As String, Optional textOnly As Boolean = True, Optional divider As String = vbTab) As String
    If Left(strXML, 6) = "Error:" Then
        GetXPathSoap = strXML
        Exit Function
    End If
    On Error GoTo Catch
    Dim docXML As New DOMDocument60
    docXML.LoadXML strXML
    docXML.SetProperty "SelectionLanguage", "XPath"
    docXML.SetProperty "SelectionNamespaces", "xmlns:z='#RowsetSchema' xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:sp='http://schemas.microsoft.com/sharepoint/soap/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'"
    
    Dim nodes As IXMLDOMNodeList
    Dim node As IXMLDOMNode
    Set nodes = docXML.SelectNodes(xpath)
    If nodes.length > 0 Then
        Dim result As String
        For Each node In nodes
            If textOnly Then
                result = result & IIf(result > "", divider, "") & node.Text
            Else
                result = result & IIf(result > "", divider, "") & Replace(Replace(Replace(Replace(node.XML, " xmlns=""http://schemas.microsoft.com/sharepoint/soap/""", ""), " xmlns:z=""#RowsetSchema""", ""), "<z:row ", "<row "), " ows_", " ")
            End If
        Next
    Else
        result = ""
    End If
    
Finally:
    On Error GoTo 0
    GetXPathSoap = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Private Function EncodeBase64(bytes) As String

    Dim objXML As MSXML2.DOMDocument60
    Dim objNode As MSXML2.IXMLDOMElement


    Set objXML = New MSXML2.DOMDocument60
    Set objNode = objXML.createElement("b64")

    objNode.dataType = "bin.base64"
    objNode.nodeTypedValue = bytes
    EncodeBase64 = objNode.Text

    Set objNode = Nothing
    Set objXML = Nothing
End Function

Public Function ReadFileBinary64(sFile As String) As Byte()
    Dim bytes, b64
    With CreateObject("ADODB.Stream")
        .Open
        .Type = ADODB.adTypeBinary
        .LoadFromFile sFile
        bytes = .Read
        .Close
        If Not IsNull(bytes) Then
            b64 = EncodeBase64(bytes)
        Else
        Dim arr_byte() As Byte
        arr_byte = ""
            b64 = arr_byte
        End If
    End With
    ReadFileBinary64 = b64
End Function

Public Function UploadFile(sourceUrl As String, destinationUrl As String, Optional basedOnUrl As String = "-", Optional fields As String = "", Optional timeOut As Single = 30) As String
    ' UploadFile("C:\Users\ply\AppData\Local\Temp\OnCPDoc2003.docx.pdf", "http://crisnet/Project/90006/O and M/OnCPDoc2003.docx.pdf", "<FieldInformation Type=""Text"" DisplayName=""Doc Title"" Value=""From Fields"" />")

    On Error GoTo Catch
    
    Dim Site As String
    
    Site = GetSite(destinationUrl, timeOut)
    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim base64Binary As String
    base64Binary = ReadFileBinary64(sourceUrl)
    
    Dim urlRef As String
    urlRef = Site & "/_vti_bin/Copy.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CopyIntoItems"
    
    '"      <SourceUrl>" & sourceUrl & "</SourceUrl>" & _

'    If basedOnUrl <> "-" Then
'        fields = GetFields(basedOnUrl)
'    End If
    
    Dim sourceURLLine As String
    sourceURLLine = "      <SourceUrl>" & basedOnUrl & "</SourceUrl>"
    If basedOnUrl = "-" Then
        sourceURLLine = "      <SourceUrl>" & destinationUrl & "</SourceUrl>"
    End If
    'sourceURLLine = "      <SourceUrl>" & " " & "</SourceUrl>"

    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <CopyIntoItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    sourceURLLine & _
    "      <DestinationUrls>" & _
    "           <string>" & destinationUrl & "</string>" & _
    "      </DestinationUrls>" & _
    "      <Fields>" & fields & "</Fields>" & _
    "      <Stream>" & base64Binary & "</Stream>" & _
    "    </CopyIntoItems>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.XML
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    UploadFile = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Function GetFields(sourceUrl As String, Optional timeOut As Single = 30) As String
    ' ? GetFields("http://crisnet/Project/90006/O and M/OnCPDoc2003.docx.pdf")

    On Error GoTo Catch
    
    Dim Site As String
    
    Site = GetSite(sourceUrl, timeOut)
    Dim WebRequest As New XMLHTTP60
    Dim result As String

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    
    Dim urlRef As String
    urlRef = Site & "/_vti_bin/Copy.asmx"
    
    Dim strRequest As String
    WebRequest.Open "POST", urlRef, True
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetItem"
    
    '"      <SourceUrl>" & sourceUrl & "</SourceUrl>" & _

    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & _
    "<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "  <soap:Body>" & _
    "    <GetItem xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & _
    "      <Url>" & sourceUrl & "</Url>" & _
    "    </GetItem>" & _
    "  </soap:Body>" & _
    "</soap:Envelope>"
    
    WebRequest.send strRequest
    
    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Xebug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop
    
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        result = WebRequest.responseXML.XML
        
        Dim posBegin As Long
        Dim posEnd As Long

        posBegin = InStr(1, result, "<Fields>", vbTextCompare)
        If posBegin > 0 Then
            posEnd = InStr(posBegin, result, "</Fields>")
            If posEnd > 0 Then
                result = Replace(Mid(result, posBegin, posEnd - posBegin + Len("</Fields>")), "/>", "/>" + vbCrLf)
                result = Split(result, "InternalName=""ID""")(0)
                result = Mid(result, 9, InStrRev(result, "<FieldInformation ") - 10)
            Else
                result = "Error:</Fields> not found"
            End If
        Else
            result = "Error:<Fields> not found"
        End If
        
    Else
        result = "NotFound:" & WebRequest.Status
    End If
    
'    Xebug.Print url
'    Xebug.Print "--------------------------------------------------------------------------------"
'    Xebug.Print WebRequest.getAllResponseHeaders

Finally:
    On Error GoTo 0
    GetFields = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
End Function

Public Sub TestSPActionChangeProp()
    Dim id As String
    Dim docUrl As String
    Dim listName As String
    Dim listId As String
    Dim Site As String
    
        
    docUrl = "http://crisnet/Project/12536/O and M/3 Chutes/12536_CHU_SPARES_EN_v3.pdf"
    Site = GetSite(docUrl)
    listName = Mid(docUrl, Len(Site) + 2)
    listName = Split(listName, "/")(0)
    listId = GetListGUID(Site, listName)
    listId = Mid(listId, 2, Len(listId) - 2)

    id = GetItem(docUrl, , "ID")("ID")

    
    '"     <Field Name='Title'>Updated again</Field>" & vbCrLf & _

    Dim batch As String
    batch = "<Batch OnError='Return' ListVersion='1'>" & vbCrLf & _
    "   <Method ID='1' Cmd='Update'>" & vbCrLf & _
    "     <Field Name='ID'>" & id & "</Field>" & vbCrLf & _
    "     <Field Name='MetaInfo' Property='_CopySource'></Field>" & vbCrLf & _
    "   </Method>" & vbCrLf & _
    "</Batch>"
    'Debug.Print batch
    Debug.Print SPMicrosoft(Site & "/_vti_bin/Lists.asmx", "UpdateListItems", 30, "listName", listId, "updates", batch)

End Sub


Public Function SPMicrosoft(url As String, method As String, timeOut As Single, ParamArray parms()) As String
    On Error GoTo Catch
    If timeOut <= 0 Then timeOut = 30

    Dim StartTime As Single, TimeElapsed As Single
    Dim StartDate As Date
    StartDate = Date
    StartTime = Timer
    Dim result As String
     
    Dim WebRequest As New XMLHTTP60, strRequest As String
    WebRequest.Open "POST", url, True 'False Async
    WebRequest.setRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WebRequest.setRequestHeader "Content-Length", "length"
    WebRequest.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/" & method
    
    Dim p As Variant
    Dim i As Integer
    Dim allTags As String
    Dim tag As String
    Dim val As String
    i = 0
    For Each p In parms
       If i Mod 2 = 0 Then
            tag = CStr(p)
       Else
            val = CStr(p)
            allTags = allTags & "<" & tag & ">" & val & "</" & tag & ">"
       End If
       i = i + 1
    Next p
    
    strRequest = _
    "<?xml version='1.0' encoding='utf-8'?>" & vbCrLf & _
    "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'>" & vbCrLf & _
    "  <soap:Body>" & vbCrLf & _
    "    <" & method & " xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" & vbCrLf & _
    allTags & vbCrLf & _
    "    </" & method & ">" & vbCrLf & _
    "  </soap:Body>" & vbCrLf & _
    "</soap:Envelope>"

    'Debug.Print strRequest
    WebRequest.send strRequest

    Do While WebRequest.readyState <> 4
        DoEvents
        TimeElapsed = 86400 * (Date - StartDate) + Timer - StartTime
        'Debug.Print "Waiting.." & TimeElapsed
        If TimeElapsed > timeOut Then
            result = "TimedOut:" & CStr(timeOut)
            GoTo Finally
        End If
    Loop

    Dim docResponse As New DOMDocument60
    If WebRequest.Status >= "200" And WebRequest.Status < "300" Then
        Set docResponse = WebRequest.responseXML
        If docResponse.XML <> "" Then
            result = (docResponse.XML Like "*<ErrorCode>0x00000000</ErrorCode>*")
            If result = "True" Then
                result = "OK"
            Else
                result = "Error:" & docResponse.XML
            End If
        Else
            result = "Error:Empty XML returned"
        End If
    Else
        result = "Error:HTTP Status:" & WebRequest.Status & vbCrLf & WebRequest.responseXML.XML
    End If
    
Finally:
    On Error GoTo 0
    SPMicrosoft = result
    Exit Function
    
Catch:
ErrorExit:
    result = "Error:" & Err.Description
    Resume Finally
    
End Function


Attribute VB_Name = "modWindows"
Option Explicit

' tphrs1500m000
Const cEmployee As Long = 10
Const cPeriod As Long = 14
Const cYear As Long = 15

' cttstps0105
Const cttstps0105Error As Long = 1
Const cttstps0105Ok As Long = 2
' tphrst0004
Const ctphrst0004Error As Long = 1
Const ctphrst0004Ok As Long = 2

' tphrs1100s000
Const cSequence As Long = 35
Const cWage As Long = 37
Const cProject As Long = 41
Const cElement As Long = 44
Const cActivity As Long = 47
Const cCost As Long = 51
Const cMon As Long = 63
Const cTue As Long = 64
Const cWed As Long = 65
Const cThu As Long = 66
Const cFri As Long = 67
Const cSat As Long = 68
Const cSun As Long = 69
Const cClose As Long = 76
Const cSave As Long = 77
Const cNo As Long = 3
Const cCheckEmployee As Long = 33
Const cCheckPeriod As Long = 32
Const cCheckYear As Long = 31


Private Declare PtrSafe Function GetActiveWindow Lib "user32" () As Integer
Private Declare PtrSafe Function GetForegroundWindow Lib "user32" () As Integer
Private Declare PtrSafe Function EnumWindows& Lib "user32" (ByVal lpEnumFunc As Long, ByVal lParam As Long)
Private Declare PtrSafe Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long
Private Declare PtrSafe Function IsWindowVisible& Lib "user32" (ByVal hwnd As Long)
Private Declare PtrSafe Function GetParent& Lib "user32" (ByVal hwnd As Long)
Private Declare PtrSafe Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal hwnd As Long) As Long
Private Declare PtrSafe Function EnumChildWindows Lib "user32.dll" (ByVal hWndParent As Long, ByVal lpEnumFunc As Long, ByVal lParam As Long) As Long
Private Declare PtrSafe Function GetDlgCtrlID Lib "user32" (ByVal hwnd As Long) As Long

'!!!Public Declare PtrSafe Function GetDlgItem Lib "user32" (ByVal hDlg As Long, ByVal nIDDlgItem As Long) As Long
Private Declare PtrSafe Function SendMessageByString Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As String) As Long
'!!!Public Declare PtrSafe Function PostMessage Lib "user32" _
    Alias "PostMessageA" (ByVal hwnd As Long, _
    ByVal wMsg As Long, ByVal wParam As Long, _
    ByVal lParam As Long) As Long

Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" _
(ByVal lpClassName As String, _
ByVal lpWindowName As String) As Long

'!!!Public Declare PtrSafe Function ShowWindow Lib "user32" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long
Private Declare Function GetMenu Lib "user32" _
  (ByVal hwnd As Long) As Long

Private Declare PtrSafe Function GetSubMenu Lib "user32" _
  (ByVal hMenu As Long, ByVal nPos As Long) As Long

Private Declare PtrSafe Function GetMenuItemCount Lib "user32" _
  (ByVal hMenu As Long) As Long

Private Declare PtrSafe Function GetMenuState Lib "user32" _
  (ByVal hMenu As Long, ByVal wID As Long, _
   ByVal wFlags As Long) As Long

Private Declare PtrSafe Function GetMenuString Lib "user32" _
   Alias "GetMenuStringA" (ByVal hMenu As Long, _
   ByVal wIDItem As Long, ByVal lpString As String, _
   ByVal nMaxCount As Long, ByVal wFlag As Long) As Long

'!!!Public Declare PtrSafe Function GetMenuItemID Lib "user32" (ByVal hMenu As Long, ByVal nPos As Long) As Long


Private Declare PtrSafe Function GetClassName Lib "user32" _
    Alias "GetClassNameA" _
   (ByVal hwnd As Long, _
    ByVal lpClassName As String, _
    ByVal nMaxCount As Long) As Long

Private Declare PtrSafe Function FindWindowEx Lib "user32" Alias "FindWindowExA" _
    (ByVal hWnd1 As Long, _
    ByVal hWnd2 As Long, _
    ByVal lpsz1 As String, _
    ByVal lpsz2 As String) As Long

Private Const KEYEVENTF_KEYUP = &H2
Private Const MAP_VKTOSCAN = 0
Public Enum eSpecialKeys
  evkAlt = 1
  evkShift = 2
  evkCtrl = 4
  evkEnter = 8
End Enum

Public Enum wWindows
  wVisibleParent = 1
  wHiddenParent = 2
  wVisibleChild = 4
  wHiddenChild = 8
  wParent = 3
  wChild = 12
  wVisible = 5
  wHidden = 10
  wAll = 15
End Enum

Private Declare PtrSafe Function MapVirtualKey Lib "user32" Alias "MapVirtualKeyA" _
  (ByVal wCode As Long, ByVal wMapType As Long) As Long
Private Declare PtrSafe Sub keybd_event Lib "user32" (ByVal lVKey As Long, _
  ByVal bScan As Long, ByVal dwFlags As Long, _
  ByVal dwExtraInfo As Long)
Private Declare PtrSafe Function VkKeyScan Lib "user32" Alias "VkKeyScanA" _
  (ByVal intChar As Integer) As Integer

Public Const MF_BYPOSITION = &H400&
Public Const MF_HILITE = &H80&
Public Const WM_MENUSELECT = &H11F
Public Const WM_SETFOCUS = &O7
Public Const WM_SETTEXT = &HC
Public Const WM_GETTEXT = &HD
Public Const WM_GETTEXTLENGTH = &HE
Public Const BM_SETSTATE = &HF3
Public Const WM_LBUTTONDOWN = &H201
Public Const WM_LBUTTONUP = &H202
Public Const WM_KEYDOWN = &H100
Public Const WM_KEYUP = &H101
Public Const WM_CHAR = &H102
Public Const WM_ACTIVATE = &H6
Public Const WM_CLOSE = &H10
Public Const SW_HIDE = 0
Public Const WM_COMMAND = &H111
Public Const BM_CLICK = &HF5

Public Const VK_ADD = &H6B
Public Const VK_ATTN = &HF6
Public Const VK_BACK = &H8
Public Const VK_CANCEL = &H3
Public Const VK_CAPITAL = &H14
Public Const VK_CLEAR = &HC
Public Const VK_CONTROL = &H11 '"Alt" Button
Public Const VK_CRSEL = &HF7
Public Const VK_DECIMAL = &H6E
Public Const VK_DELETE = &H2E
Public Const VK_DIVIDE = &H6F
Public Const VK_DOWN = &H28
Public Const VK_END = &H23
Public Const VK_EREOF = &HF9
Public Const VK_ESCAPE = &H1B
Public Const VK_EXECUTE = &H2B
Public Const VK_EXSEL = &HF8
Public Const VK_F1 = &H70
Public Const VK_F10 = &H79
Public Const VK_F11 = &H7A
Public Const VK_F12 = &H7B
Public Const VK_F13 = &H7C
Public Const VK_F14 = &H7D
Public Const VK_F16 = &H7F
Public Const VK_F17 = &H80
Public Const VK_F18 = &H81
Public Const VK_F19 = &H82
Public Const VK_F2 = &H71
Public Const VK_F20 = &H83
Public Const VK_F15 = &H7E
Public Const VK_F21 = &H84
Public Const VK_F22 = &H85
Public Const VK_F23 = &H86
Public Const VK_F24 = &H87
Public Const VK_F3 = &H72
Public Const VK_F4 = &H73
Public Const VK_F5 = &H74
Public Const VK_F6 = &H75
Public Const VK_F7 = &H76
Public Const VK_F8 = &H77
Public Const VK_F9 = &H78
Public Const VK_HELP = &H2F
Public Const VK_HOME = &H24
Public Const VK_INSERT = &H2D
Public Const VK_LBUTTON = &H1
Public Const VK_LCONTROL = &HA2
Public Const VK_LEFT = &H25
Public Const VK_LMENU = &HA4
Public Const VK_LSHIFT = &HA0
Public Const VK_MBUTTON = &H4
Public Const VK_MENU = &H12
Public Const VK_MULTIPLY = &H6A
Public Const VK_NEXT = &H22
Public Const VK_NONAME = &HFC
Public Const VK_NUMLOCK = &H90
Public Const VK_NUMPAD0 = &H60
Public Const VK_NUMPAD1 = &H61
Public Const VK_NUMPAD2 = &H62
Public Const VK_NUMPAD3 = &H63
Public Const VK_NUMPAD4 = &H64
Public Const VK_NUMPAD5 = &H65
Public Const VK_NUMPAD6 = &H66
Public Const VK_NUMPAD7 = &H67
Public Const VK_NUMPAD8 = &H68
Public Const VK_NUMPAD9 = &H69
Public Const VK_OEM_CLEAR = &HFE
Public Const VK_PA1 = &HFD
Public Const VK_PAUSE = &H13
Public Const VK_PLAY = &HFA
Public Const VK_PRINT = &H2A
Public Const VK_PRIOR = &H21
Public Const VK_RBUTTON = &H2
Public Const VK_RCONTROL = &HA3
Public Const VK_RETURN = &HD 'AKA "Enter"
Public Const VK_RIGHT = &H27
Public Const VK_RMENU = &HA5
Public Const VK_RSHIFT = &HA1
Public Const VK_SCROLL = &H91
Public Const VK_SELECT = &H29
Public Const VK_SEPARATOR = &H6C
Public Const VK_SHIFT = &H10
Public Const VK_SNAPSHOT = &H2C
Public Const VK_SPACE = &H20
Public Const VK_SUBTRACT = &H6D
Public Const VK_TAB = &H9
Public Const VK_UP = &H26
Public Const VK_ZOOM = &HFB

'   Private Declare PtrSafe Function PostMessage Lib "user32.dll" _
'        Alias "PostMessageA" ( _
'        ByVal hwnd As LongPtr, _
'        ByVal wMsg As Long, _
'        ByVal wParam As LongPtr, _
'        ByVal lParam As LongPtr) As LongPtr   ' MAYBE Long

'!!!Public Declare PtrSafe Function SendMessage Lib "user32" _
    Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, _
    ByVal wParam As Long, lParam As Any) As Long

Private Declare PtrSafe Function lstrlenW Lib "kernel32" _
  (ByVal lpString As Long) As Long

Dim sPattern As Variant, hFind As Long
Dim lngNo As Long, lngLoopNo As Long, hCtrl As Long
Global ahFind() As Long, ahFindText() As String
Dim gwWindowType As wWindows

Const WM_KILLFOCUS As Long = &H8

Const BM_STATETRUE As Long = &H1
Const KILLFOCUS As Long = &H1A04B6

Dim dtControls As Date
Dim strControlsWindow As String
Dim lngNoControls As Long
Dim address As String


Public Sub ClickWild(strWindowWildOrHandle As Variant, strLabel As String, Optional msec As Long = 0)
    Dim dlghWnd As Long
    Dim buthWnd As Long
    
    If IsNumeric(strWindowWildOrHandle) Then
        dlghWnd = strWindowWildOrHandle
    Else
        dlghWnd = FindWindowWild(CStr(strWindowWildOrHandle))
    End If
'    Do Until dlghWnd <> 0
'        dlghWnd = FindWindowWild(strWindowWild)
'        Sleep (10)
'        DoEvents
'    Loop
    If dlghWnd = 0 And msec > 0 Then
        Sleep msec
        If IsNumeric(strWindowWildOrHandle) Then
            dlghWnd = strWindowWildOrHandle
        Else
            dlghWnd = FindWindowWild(CStr(strWindowWildOrHandle))
        End If
    End If
'    buthWnd = FindWindowEx(dlghWnd, 0&, vbNullString, strLabel)
    If dlghWnd <> 0 Then
        buthWnd = FindWindowEx(dlghWnd, 0&, vbNullString, strLabel)
        If buthWnd <> 0 Then
            Click buthWnd
        End If
    End If
    'SendMessage buthWnd, BM_SETSTATE, BM_STATETRUE, 0&
    'SendMessage buthWnd, WM_KILLFOCUS, KILLFOCUS, 0&
    
End Sub

Public Sub CloseWindow(hwnd As Long)
    '!!!SendMessage hwnd, WM_CLOSE, 0&, ByVal 0&
End Sub

Public Sub Escape(hwnd As Long)
    SendKey hwnd, VK_ESCAPE
End Sub

Function EnumWinProc(ByVal hwnd As Long, ByVal lParam As Long) As Long
    Dim k As Long, sName As String
    If IsNumeric(sPattern) Then
        If hwnd = CLng(sPattern) Then
            hFind = hwnd
            EnumWinProc = 0
            Exit Function
        End If
    End If
    sName = Space$(128)
    k = GetWindowText(hwnd, sName, 128)
    If k > 0 Then
       sName = Left$(sName, k)
       If lParam = 0 Then sName = UCase(sName)
       If sName Like sPattern Then
          hFind = hwnd
          EnumWinProc = 0
          Exit Function
       End If
    End If
    EnumWinProc = 1
End Function

Function EnumWinListProc(ByVal hwnd As Long, ByVal lParam As Long) As Long
  Dim k As Long, sName As String
'  If IsWindowVisible(hwnd) And GetParent(hwnd) = 0 Then
'  If IsWindowVisible(hwnd) Then
     sName = Space$(128)
     k = GetWindowText(hwnd, sName, 128)
     If k > 0 Then
        sName = Left$(sName, k)
        If lParam = 0 Then sName = UCase(sName)
        If sName Like sPattern Then
            Dim StrWinText As String * 255
            Dim LngResult As Long

            ReDim Preserve ahFind(UBound(ahFind) + 1)
            ahFind(UBound(ahFind) - 1) = hwnd
            ReDim Preserve ahFindText(UBound(ahFindText) + 1)
            LngResult = GetWindowText(hwnd, StrWinText, 255)
            If LngResult = 0 Then
                ahFindText(UBound(ahFindText) - 1) = ""
            Else
                ahFindText(UBound(ahFindText) - 1) = Left(StrWinText, LngResult)
            End If
           EnumWinListProc = 1
           Exit Function
        End If
     End If
'  End If
  EnumWinListProc = 1
End Function

Public Function FindWindowWild(sWild As Variant, Optional bMatchCase As Boolean = False, Optional wWindowType As wWindows = wAll) As Long
    hFind = 0
    gwWindowType = wWindowType
    sPattern = sWild
    Dim wFound As wWindows
    '  If IsWindowVisible(hwnd) And GetParent(hwnd) = 0 Then
      
    If Not bMatchCase Then sPattern = UCase(sPattern)
    EnumWindows AddressOf EnumWinProc, bMatchCase
    If hFind <> 0 Then
        wFound = wVisibleParent
        If ((GetParent(hFind)) = 0) Then wFound = wFound * 4
        If IsWindowVisible(hFind) = 0 Then wFound = wFound * 2
        If ((gwWindowType And wFound) <> 0) Then
            FindWindowWild = hFind
        Else
            FindWindowWild = 0
        End If
    Else
        FindWindowWild = 0
    End If
End Function

Public Function FindWindowList(Optional sWild As String = "*", Optional bMatchCase As Boolean = False) As Long()
  ReDim ahFind(0)
  ReDim ahFindText(0)
  sPattern = sWild
  If Not bMatchCase Then sPattern = UCase(sPattern)
  EnumWindows AddressOf EnumWinListProc, bMatchCase
  FindWindowList = ahFind
  ReDim Preserve ahFind(UBound(ahFind) - 1)
  ReDim Preserve ahFindText(UBound(ahFindText) - 1)
End Function

Function ActiveWindowTitle() As String
   Dim LngResult As Long
   Dim StrWinText As String * 255

   LngResult = GetWindowText(GetForegroundWindow(), StrWinText, 255)
   ActiveWindowTitle = Left(StrWinText, LngResult)
End Function

Function FindWindowTitle(sWild As String, Optional bMatchCase As Boolean = False) As String
    Dim LngResult As Long
    Dim StrWinText As String * 255
    
    LngResult = GetWindowText(FindWindowWild(sWild, bMatchCase), StrWinText, 255)
    If LngResult = 0 Then
        FindWindowTitle = ""
    Else
        FindWindowTitle = Left(StrWinText, LngResult)
    End If
End Function

Public Function IsActive(varWindow As Variant) As Boolean
    Dim blnActive As Boolean
    blnActive = False
    If IsNumeric(varWindow) Then
        If varWindow = GetForegroundWindow Then
            blnActive = True
        End If
    Else
        If FindWindowTitle(CStr(varWindow)) = ActiveWindowTitle Then
            blnActive = True
        End If
    End If
    IsActive = blnActive
End Function

Public Function EnumChildwindow(ByVal hwnd As Long, ByVal lParam As Long) As Long
    Dim strString As String
    
    If GetWindowTextLength(hwnd) > 0 Then '/// make sure we get no blanks.
        strString = String(GetWindowTextLength(hwnd) + 1, 0) '/// buffer to hold the name.
    End If
    
    GetWindowText hwnd, strString, Len(strString) '///get the name.
    If strString <> "" Then
        'Debug.Print strString
        If strString Like "Address:*" Then
            address = Trim(Replace(strString, "Address:", ""))
            If address > "" Then
                If AscW(Right(address, 1)) = 0 Then
                    address = Left(address, Len(address) - 1)
                End If
            End If
        End If
    End If
    
    EnumChildwindow = 1
End Function

Public Function EnumChildWindowsOfSaveAs(hwnd As Long) As String
    address = ""
    EnumChildWindows hwnd, AddressOf EnumChildwindow, 0 '/// get active childwindows of the desktop.

    EnumChildWindowsOfSaveAs = address
End Function

Private Sub ListChildWindows()
    EnumChildWindows FindWindowWild("*Save as*"), AddressOf EnumChildwindow, 0 '/// get active childwindows of the desktop.
End Sub

Public Function ProjectHoursLoadPLY(Dato As Date, Empl As String, WageComponent As String, project As String, _
                                    Element As String, Activity As String, CostObject As String, Extension As String, _
                                    CostComp As String, Hours As Double) As Boolean
    FindWindowList
    EnumChildWindows FindWindowWild("*tphrs1500m000*"), AddressOf EnumChildProcRecordset, 0 '/// get active childwindows of the desktop.
    EnumChildWindows FindWindowWild("*tphrs1100s000*"), AddressOf EnumChildProcRecordset, 0 '/// get active childwindows of the desktop.
End Function


Public Function EnumChildProcRecordset(ByVal hwnd As Long, _
                              ByVal lParam As Long) As Long

     Dim sTitle As String
     Dim sClass As String
     Dim sIDType As String
    
    'get the window title / class name
     sTitle = GetWindowIdentification(hwnd, sClass)
    
    'add to the list
     Debug.Print hwnd & _
                         vbTab & vbTab & _
                         sTitle & vbTab & _
                         vbTab & sClass & _
                         vbTab & GetDlgCtrlID(hwnd) & _
                         vbTab & GetText(hwnd)
     EnumChildProcRecordset = 1

End Function

Private Function TrimNull(startstr As String) As String

   TrimNull = Left$(startstr, lstrlenW(StrPtr(startstr)))

End Function

Public Function GetWindowIdentification(ByVal hwnd As Long, _
                                         sClass As String) As String

   Dim nSize As Long
   Dim sTitle As String
    Dim nLen As Long
  'get the size of the string required
  'to hold the window title
   nSize = GetWindowTextLength(hwnd)
    
  'if the return is 0, there is no title
   If nSize > 0 Then

      sTitle = Space$(nSize + 1)
      nLen = GetWindowText(hwnd, sTitle, nSize + 1)
      sClass = Space$(64)
      Call GetClassName(hwnd, sClass, 64)

   Else

     'no title, so get the class name instead
      sTitle = Space$(64)
      nLen = GetClassName(hwnd, sTitle, 64)
      sClass = sTitle

   End If
   sClass = Trim(sClass)
   GetWindowIdentification = TrimNull(sTitle)

End Function

Public Sub CreateChildWindowRecordset(strWindow As String)
    Dim hwnd As Long
'    strWindow = "*expl*"
'    Call EnumChildWindows(FindWindowWild("*notepad*"), AddressOf EnumChildProcRecordset, &H0)
'    EnumChildWindows FindWindowWild("*tphrs1500m000*"), AddressOf EnumChildProcRecordset, 0 '/// get active childwindows of the desktop.
    
    
    dtControls = Now
    strControlsWindow = FindWindowTitle(strWindow)
    lngNoControls = 1
    Call EnumChildWindows(FindWindowWild(strWindow), AddressOf EnumChildProcRecordset, &H0)
    
End Sub


Public Function GetText(ByVal hwnd As Long) As String
    Dim sBuf As String
    Dim lCharsReturned As Long
    Dim lMaxBuf As Long
    Dim lRet As Long
    
    lMaxBuf = 10240
    sBuf = String$(lMaxBuf, vbNullChar)
    lCharsReturned = SendMessageByString(hwnd, WM_GETTEXT, lMaxBuf, sBuf)
    DoEvents
    GetText = Left$(sBuf, lCharsReturned)
End Function

Public Function SetText(ByVal hwnd As Long, s As String, Optional hwndNext As Long) As String
    Dim lRet As Long
    '!!!lRet = SendMessage(hwnd, WM_SETFOCUS, 0&, Null)
    Sleep 100
    '!!!lRet = SendMessage(hwnd, WM_SETTEXT, 0&, ByVal s)
    Sleep 100
    '!!!SendMessage hwnd, WM_KILLFOCUS, KILLFOCUS, 0&
    If hwndNext <> 0 Then
        '!!!lRet = SendMessage(hwndNext, WM_SETFOCUS, 0&, Null)
    End If
    Sleep 100
    SetText = GetText(hwnd)
End Function

Public Function Click(ByVal hwnd As Long) As Boolean
    On Error GoTo Error_Click
        
'!!!    Call SendMessage(hwnd, WM_LBUTTONDOWN, 0, ByVal 0&)
'!!!    Call SendMessage(hwnd, WM_LBUTTONUP, 0, ByVal 0&)
'!!!    Call SendMessage(hwnd, BM_SETSTATE, 1, ByVal 0&)
    Click = True
Exit_Click:
    Exit Function
Error_Click:
    Click = False
    Resume Exit_Click

End Function

Public Sub Fill()
    Call SetText(199102, "10007")
'!!!    Call SendMessage(199006, WM_SETFOCUS, 0&, Null)
    Call SetText(199108, "840000")
'!!!    Call SendMessage(199112, WM_SETFOCUS, 0&, Null)
    Call SetText(199114, "511000")
'!!!    Call SendMessage(199118, WM_SETFOCUS, 0&, Null)
'!!!    Call SendMessage(264534, WM_SETFOCUS, 0&, Null)
End Sub

Public Function SendKey(ByVal hwnd As Long, ByVal key As Long) As Boolean
    On Error GoTo Error_SendKey
        
'    SendMessage hWnd, WM_SETFOCUS, 0&, Null
'!!!    Call SendMessage(hwnd, WM_CHAR, key, ByVal 0&)
    SendKey = True
Exit_SendKey:
    Exit Function
Error_SendKey:
    SendKey = False
    Resume Exit_SendKey

End Function

Public Sub SkrivNotepad()
    Dim lRet As Long
    Dim s As String
    Dim hwnd As Long
    Dim hwndN As Long
    s = String(90, "X")
    Dim sRet As String
    
    hwnd = FindWindowWild("* - notepad*")
    If hwnd = 0 Then
        Shell "notepad.exe", vbHide
        hwnd = FindWindowWild("* - notepad*")
    End If
    '!!!hwndN = GetDlgItem(hwnd, 15)
    sRet = SetText(hwndN, s)
    Debug.Print "WM_SETTEXT: " & sRet
    
    '!!!lRet = SendMessage(hwnd, WM_GETTEXTLENGTH, 0&, ByVal 0&)
    Debug.Print "WM_GETTEXTLENGTH: " & lRet
    
    '!!!lRet = SendMessage(hwnd, WM_GETTEXT, 0&, ByVal 0&)
    Debug.Print "WM_GETTEXT: " & sRet
    
'    SendKey hwndN, VK_SPACE
'    SendKey hwndN, VK_LEFT + VK_CONTROL
'    HelloPrint hwnd, hwndN
    '!!!Call PostMessage(hwndN, WM_ACTIVATE, 1, ByVal 0)
    '!!!Call PostMessage(hwndN, WM_CHAR, ByVal CLng(Asc("A")), ByVal 0)

'    SendMessage hwnd, WM_CLOSE, 0&, ByVal 0&
    ClickMenu hwnd, "E&xit"
    ClickWild "Notepad", "&Yes", 10
    Sleep 200
    '!!!SetText GetDlgItem(FindWindowWild("Save As"), 1152), "C:\test" & Format(Now, "yyyymmddhhnnss") & ".txt"
    '!!!ClickButton GetDlgItem(FindWindowWild("Save as"), 1)
End Sub


Public Sub HelloPrint(hWnd1 As Long, hWnd2 As Long)
    Dim pausetime As Long
    Dim start As Long
    
    'Activate the edit control
'    Call PostMessage(hwnd1, WM_ACTIVATE, 1, ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_ACTIVATE, 1, ByVal 0)
    'Type "Hello" and a carriage return
    '!!!Call PostMessage(hWnd2, WM_CHAR, ByVal CLng(Asc("H")), ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_CHAR, ByVal CLng(Asc("e")), ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_CHAR, ByVal CLng(Asc("l")), ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_CHAR, ByVal CLng(Asc("l")), ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_CHAR, ByVal CLng(Asc("o")), ByVal 0)
    'Wait .2 seconds
    '!!!Call PostMessage(hWnd2, WM_KEYDOWN, VK_RETURN, ByVal 0)
    '!!!Call PostMessage(hWnd2, WM_KEYUP, VK_RETURN, ByVal 0)
    Sleep 200
    'Choose Print form the file menu
    'Activate the Edit control before trying the menu
    '!!!Call PostMessage(hWnd2, WM_ACTIVATE, 1, ByVal 0)
    'F10 for Menu, Requires KeyUp as well
    '!!!Call PostMessage(hWnd1, WM_KEYDOWN, VK_F10, ByVal 0)
    '!!!Call PostMessage(hWnd1, WM_KEYUP, VK_F10, ByVal 0)
    Sleep 200

    'Use VK_DOWN to stay in the File menu,
    'You could use VK_RIGHT to move to the Edit menu,
    'or VK_RIGHT twice to move to the Format menu
    '!!!Call PostMessage(hWnd1, WM_KEYDOWN, VK_DOWN, ByVal 0)
    '!!!Call PostMessage(hWnd1, WM_KEYUP, VK_DOWN, ByVal 0)
    Sleep 200
    'Chose Print from the file menu
    '!!!Call PostMessage(hWnd1, WM_KEYDOWN, ByVal CLng(Asc("P")), ByVal 0)
    '!!!Call PostMessage(hWnd1, WM_KEYUP, ByVal CLng(Asc("P")), ByVal 0)
    Sleep 200
    '!!!Call PostMessage(hWnd1, WM_KEYDOWN, VK_RETURN, ByVal 0)
    '!!!Call PostMessage(hWnd1, WM_KEYUP, VK_RETURN, ByVal 0)

End Sub
Public Sub PressKey(ByVal KeyValue As String, _
    Optional ByVal PushKey As Boolean = True, _
    Optional ByVal ReleaseKey As Boolean = True)
    
    Dim lVKey As Long
    Dim lScan As Long ' scan code
    lVKey = VkKeyScan(Asc(Left$(KeyValue, 1))) ' get virtual key code
    lScan = MapVirtualKey(lVKey, MAP_VKTOSCAN) ' get OEM scan code
    If PushKey Then keybd_event lVKey, lScan, 0, 0 ' key down
    If ReleaseKey Then keybd_event lVKey, lScan, KEYEVENTF_KEYUP, 0 ' key up
End Sub

Public Sub PressSpecialKey(ByVal KeyCodes As eSpecialKeys, _
    Optional ByVal PushKey As Boolean = True, _
    Optional ByVal ReleaseKey As Boolean = True)
    
    Static lShift As Long ' scancode for shift
    Static lCtrl As Long ' scancode for control
    Static lAlt As Long ' scancode for Alt
    Static lEnter As Long
    If lShift = 0 Then lShift = MapVirtualKey(VK_SHIFT, MAP_VKTOSCAN)
    If lCtrl = 0 Then lCtrl = MapVirtualKey(VK_CONTROL, MAP_VKTOSCAN)
    If lAlt = 0 Then lAlt = MapVirtualKey(VK_MENU, MAP_VKTOSCAN)
    If lEnter = 0 Then lEnter = MapVirtualKey(VK_RETURN, MAP_VKTOSCAN)
    If PushKey Then
      If KeyCodes And evkAlt Then keybd_event VK_MENU, lAlt, 0, 0 ' ALT key down
      If KeyCodes And evkCtrl Then keybd_event VK_CONTROL, lCtrl, 0, 0 ' Ctrl Key down
      If KeyCodes And evkShift Then keybd_event VK_SHIFT, lShift, 0, 0 ' Shift Key down
      If KeyCodes And evkEnter Then keybd_event VK_RETURN, lEnter, 0, 0 ' Enter Key down
    End If
    If ReleaseKey Then
      If KeyCodes And evkAlt Then keybd_event VK_MENU, lAlt, KEYEVENTF_KEYUP, 0
    ' ALT key up
      If KeyCodes And evkCtrl Then keybd_event VK_CONTROL, lCtrl, KEYEVENTF_KEYUP, 0 ' Ctrl key up
      If KeyCodes And evkShift Then keybd_event VK_SHIFT, lShift, KEYEVENTF_KEYUP, 0 ' Shift key up
      If KeyCodes And evkEnter Then keybd_event VK_RETURN, lEnter, KEYEVENTF_KEYUP, 0 ' Enter key up
    End If
End Sub


Private Function WalkSubMenu(hwnd As Long, hSubMenu As Long, strMenu As String) As Long
    Dim i As Long
    Dim MenuItems As Long
    Dim hSubSubMenu As Long
    Dim buffer As String
    Dim result As Long
    Dim lngFound As Long
    'Get the count of menu items in this menu.
    MenuItems = GetMenuItemCount(hSubMenu)
    WalkSubMenu = 0
    'Loop through all the items on the menu.
    For i = 0 To MenuItems - 1
        'Determine whether this item is highlighted.
'        If GetMenuState(hSubMenu, i, MF_BYPOSITION) And _
'               MF_HILITE Then
            'Attempt to get a submenu for each menu item.
            hSubSubMenu = GetSubMenu(hSubMenu, i)

            'Check for a submenu with something selected on it.
            If hSubSubMenu Then 'And AnyLit(hSubSubMenu) Then
                'There is a submenu with a selection so walk it.
                lngFound = WalkSubMenu(hwnd, hSubSubMenu, strMenu)
                If lngFound > 0 Then
                    WalkSubMenu = lngFound
                    Exit Function
                End If
            Else    'This is it.
                'Set buffer size.
                buffer = Space(255)

                'Call the API to get the caption for the menu item.
                result = GetMenuString(hSubMenu, i, buffer, Len(buffer), MF_BYPOSITION)

                'Trim the buffer of extra characters.
                buffer = Left$(buffer, result)

                'Set the caption of the form to a description of the
                'menu item.
                If buffer Like strMenu Then
                    WalkSubMenu = 1
                    '!!!SendMessage hwnd, WM_COMMAND, GetMenuItemID(hSubMenu, i), ByVal 0&
                    Exit Function
                End If
            End If
'        End If
    Next i
End Function

Function AnyLit(hSubSubMenu As Long) As Long
    Dim i As Long
    Dim MenuCount As Long

    'Get the number of items in the menu.
    MenuCount = GetMenuItemCount(hSubSubMenu)

    'Loop through the menu items.
    For i = 0 To MenuCount - 1
        'Check whether this item is highlighted.
        If GetMenuState(hSubSubMenu, i, MF_BYPOSITION) And _
               MF_HILITE Then
            AnyLit = True
            Exit Function
        End If
    Next i

    'Return FALSE, no items highlighted.
    AnyLit = False
End Function

Public Sub ClickMenu(hwnd As Long, Menu As String)
    Dim lngMainMenu As Long
    Dim lngMenuItem As Long
    lngMainMenu = GetMenu(hwnd)
    lngMenuItem = WalkSubMenu(hwnd, lngMainMenu, Menu)
End Sub

Public Sub ClickButton(hWndButton As Long)
    '!!!SendMessage hWndButton, WM_LBUTTONDOWN, 0, ByVal 0&
    '!!!SendMessage hWndButton, BM_CLICK, 0, ByVal 0&
    '!!!SendMessage hWndButton, WM_LBUTTONUP, 0, ByVal 0&
End Sub

Public Sub notepad()
    Dim app As Long
    app = Shell("notepad", 1)
    Do Until FindWindowWild("*notepad*") <> 0
        Sleep 1000
    Loop
'    Debug.Print ProjectHoursLoadPLY(#5/3/2001#, "LPO", "10", "06612", "009300", "100000", "370", "", "080", 2.3)
    CreateChildWindowRecordset "*notepad*"
'    If FindWindowWild("*word*") Then
'        If Not IsActive(FindWindowWild("*word*")) Then
'            AppActivate FindWindowTitle("*word*"), True
'        End If
'    End If
'    Debug.Print ActiveWindowTitle
End Sub


Public Sub aaa()
    Dim strError As String

    Dim strTo As String
    Dim h1500 As Long
    Dim hMessage As Long
    
    Dim str As String
    Dim dtDato As Date
    Dim strEmployee As String
    Dim h1100 As Long
'    dtDato = #3/1/2001#
'    strEmployee = "LPO"
    dtDato = #9/1/2004#
    strEmployee = "lpo"
    
    strTo = "PLY" ' Servicedesk
    
    h1500 = FindWindowWild("tphrs1500m000*")
    If h1500 = 0 Then
        Call Shell("C:\Program Files\Baan\bin\bw tphrs1500m000", 1)
        h1500 = WaitWindowWild("tphrs1500m000*", , , 10000, 100)
    End If

    If h1500 = 0 Then
        Stop
    End If
'    ShowWindow h1500, SW_HIDE
    Sleep 2000 ' Pause er n|fffd|dvendig
    ClickMenu h1500, "*CTRL+G*" 'Start ny gruppe
    Sleep 2000 ' Pause er n|fffd|dvendig

'    Call SetText(hwndControl(h1500, cYear), Format(YEARweek(dtDato), "0000"))
'    Call SetText(hwndControl(h1500, cPeriod), Format(WEEKyear(dtDato), "00"))
'    Call SetText(hwndControl(h1500, cEmployee), strEmployee)
    ' Extra SetText to force employee validation
'    Call SetText(hwndControl(h1500, cYear), Format(YEARweek(dtDato), "0000"))
'    Debug.Print Now
    hMessage = WaitWindowWild("ttstps0105*", , , 3000, 10)
'    Debug.Print Now
'    MsgBox ActiveWindowTitle
    If hMessage <> 0 Then ' Error found
        Sleep 2000 'Pause n|fffd|dvendig
        strError = GetText(hwndControl(hMessage, cttstps0105Error))
        Debug.Print strError, , "ttstps0105"
        ClickButton hwndControl(hMessage, cttstps0105Ok)
        hMessage = FindWindowWild("ttstps0105*")
        If hMessage <> 0 Then
        End If
    Else
        Sleep 2000 ' Pause er n|fffd|dvendig
        ClickMenu h1500, "*CTRL+N*" 'Start Ny
        
        h1100 = WaitWindowWild("tphrs1100s000*", , , 10000, 100)
        If h1100 = 0 Then
            hMessage = FindWindowWild("tphrst0004*")
            If hMessage <> 0 Then
                strError = GetText(hwndControl(hMessage, ctphrst0004Error))
                Debug.Print strError, , "tphrst0004"
                ClickButton hwndControl(hMessage, ctphrst0004Ok)
                hMessage = FindWindowWild("tphrst0004*")
                If hMessage <> 0 Then
                End If
            Else
                Stop
            End If
        Else
        '    ShowWindow h1100, SW_HIDE
            
        '    CreateChildWindowRecordset "tphrs1100s000*"
            Sleep 2000 ' Pause er n|fffd|dvendig
             
            str = GetText(hwndControl(h1100, cSequence))
            ' Check person og periode
'            If Not ( _
'                GetText(hwndControl(h1100, cCheckEmployee)) = strEmployee _
'            And GetText(hwndControl(h1100, cCheckPeriod)) = Format(WEEKyear(dtDato), "00") _
'            And GetText(hwndControl(h1100, cCheckYear)) = Format(YEARweek(dtDato), "0000")) Then
'                SendAlarmMail strTo, "Error in tphrs1100s000." & vbCrLf & "Please check Helpdesk PC.", "tCardBaanLoad unable to load right person"
'            End If
            Sleep 1000 ' Pause er n|fffd|dvendig
            ' Cancel 1100
            ClickButton hwndControl(h1100, cClose)
            
            Dim h0109c As Long
            h0109c = WaitWindowWild("ttstpq0109c*")
            ClickButton hwndControl(h0109c, cNo)
        End If
    End If
    Sleep 2000
    If h1500 > 0 Then
        ClickMenu h1500, "*ALT+F4*" 'Luk Baan
    End If
    MsgBox IIf(strError > "", strError, str)
'    Debug.Print ProjectHoursLoadPLY(#5/3/2001#, "LPO", "10", "06612", "009300", "100000", "370", "", "080", 2.3)
'    CreateChildWindowRecordset "tphrs1500m000*"
'    If FindWindowWild("*word*") Then
'        If Not IsActive(FindWindowWild("*word*")) Then
'            AppActivate FindWindowTitle("*word*"), True
'        End If
'    End If
'    Debug.Print ActiveWindowTitle
End Sub

Public Function EnumChildProcNo(ByVal hwnd As Long, _
                              ByVal lParam As Long) As Long
    lngLoopNo = lngLoopNo + 1
    If lngLoopNo = lngNo Then
        hCtrl = hwnd
    End If
    
    EnumChildProcNo = 1

End Function

Public Function hwndControl(varWindow As Variant, lngControl As Long) As Long
    lngNo = lngControl
    lngLoopNo = 0
    Call EnumChildWindows(FindWindowWild(varWindow), AddressOf EnumChildProcNo, &H0)
    hwndControl = hCtrl
End Function


Public Function WaitWindowWild(sWild As Variant, _
                                Optional bMatchCase As Boolean = False, _
                                Optional wWindowType As wWindows = wAll, _
                                Optional msWait As Long = 1000, _
                                Optional msStep As Long = 10 _
                                ) As Long
    Dim hwnd As Long
    Dim msCount As Long
    
    Do
        hwnd = FindWindowWild(sWild, bMatchCase, wWindowType)
        msCount = msCount + msStep
        Sleep msStep
    Loop While hwnd = 0 And msCount <= msWait
    WaitWindowWild = hwnd
End Function



' InQuest injected base64 decoded content
' YMjg
' Kjx.j
' Ryhr@%
' ^:WE
' ,>'-
' h>'-
' z{Ki
' %F'!M
' $Ryhr@
' 1"w%
' BjW.
' LjwZ
' w!jx
' -V+"nW
' ?.+-
' ?.+-
' j{%j
' z{H#
' e"w^
' rJ'^
' Kjx.j
' jZ "{
' -"yb
' zS(u
' /j)ZnW
' z+xYZ
' zjej

INQUEST-PP=macro
