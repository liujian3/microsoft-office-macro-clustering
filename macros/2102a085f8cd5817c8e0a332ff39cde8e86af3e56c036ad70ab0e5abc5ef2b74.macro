Attribute VB_Name = "Module1"
Option Explicit

'''''''''''Monthly Data USERFORM'''''''''''''''''''''''
Sub Show_form()
'Clear Old Result
On Error Resume Next
If Worksheets("Monthly").AutoFilterMode = True Then
    Worksheets("Monthly").AutoFilterMode = False
End If


    Worksheets("Monthly").ShowAllData
  On Error GoTo 0


On Error Resume Next
With Worksheets("DBI")
    Rows("9:" & .Rows.Count).ClearContents
End With


Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft

UserForm1.Show

End Sub


Sub clear_results()
On Error Resume Next
With Worksheets("DBI")
    Rows("9:" & .Rows.Count).ClearContents
End With

'Clear Charts
Worksheets("DBI").ChartObjects.Delete
Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft
End Sub



Sub Save_Monthly_Results()

Dim ws As Worksheet
Dim wb As Workbook

Dim lastrow
Dim lastcolumn As Long
Dim myCols As String
Dim rng100 As Range
Dim startCol As String
Dim startrow
Dim answer As Integer

'Turn off screen updating until filter is finished
Application.ScreenUpdating = False

Set ws = ThisWorkbook.Worksheets("DBI")


 If Worksheets("DBI").Cells(9, 1) = "" Then
        MsgBox "Please Click the Button: Disease Based Price Indexes: Monthly Data", , "Bureau of Labor Statistics"
        Exit Sub
End If

answer = MsgBox("Would you like to save the results?", vbYesNo, "Bureau of Labor Statistics")
    If answer = vbYes Then
    
        With ws
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
            lastcolumn = .Cells(8, Columns.Count).End(xlToLeft).Column
            startrow = 8
            startCol = "A"
            myCols = GetColumnLetter(lastcolumn)
           Set rng100 = .Range(startCol & startrow & ":" & myCols & lastrow)
        End With


        Set wb = Workbooks.Add

        With wb
            rng100.Copy
    
            wb.Worksheets(1).Range("A1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
            Columns.AutoFit
        End With
        
    ElseIf answer = vbNo Then
                    Exit Sub
        Else: Exit Sub
    End If


'Clear memory
Set rng100 = Nothing
Set wb = Nothing
Set ws = Nothing


Application.CutCopyMode = False




End Sub




''''''''''End Monthly'''''''''''''''''''''''''''




''''''YEARLY USERFORM ''''''''''''''''''''''''''
Sub Show_form_year()
'Clear Old Result
On Error Resume Next
If Worksheets("Yearly").AutoFilterMode = True Then
    Worksheets("Yearly").AutoFilterMode = False
End If


Worksheets("Yearly").ShowAllData
On Error GoTo 0


On Error Resume Next
With Worksheets("DBI_Year")
    Rows("9:" & .Rows.Count).ClearContents
End With


Worksheets("DBI_Year").ChartObjects.Delete
Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft

UserForm2.Show

End Sub


Sub clear_results_year()
On Error Resume Next
With Worksheets("DBI_Year")
    Rows("9:" & .Rows.Count).ClearContents
End With

'Clear Charts
Worksheets("DBI_Year").ChartObjects.Delete
Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft
End Sub



Sub Save_Yearly_Results()

Dim ws As Worksheet
Dim wb As Workbook

Dim lastrow
Dim lastcolumn As Long
Dim myCols As String
Dim rng100 As Range
Dim startCol As String
Dim startrow
Dim answer As Integer

'Turn off screen updating until filter is finished
Application.ScreenUpdating = False

Set ws = ThisWorkbook.Worksheets("DBI_Year")

 If Worksheets("DBI_Year").Cells(9, 1) = "" Then
        MsgBox "Please Click the Button: Disease Based Price Indexes: Yearly Data", , "Bureau of Labor Statistics"
        Exit Sub
End If


answer = MsgBox("Would you like to save the results?", vbYesNo, "Bureau of Labor Statistics")
      If answer = vbYes Then
        With ws
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
            lastcolumn = .Cells(8, Columns.Count).End(xlToLeft).Column
            startrow = 8
            startCol = "A"
            myCols = GetColumnLetter(lastcolumn)
           Set rng100 = .Range(startCol & startrow & ":" & myCols & lastrow)
        End With

Set wb = Workbooks.Add

With wb
    rng100.Copy
     wb.Worksheets(1).Range("A1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False

Columns.AutoFit
End With

                ElseIf answer = vbNo Then
                    Exit Sub
                Else:
        End If

Set rng100 = Nothing
Set wb = Nothing
Set ws = Nothing

Application.CutCopyMode = False

End Sub







'''''''''End Yearly'''''''''''''''''''''''





''''''''VBA Functions'''''''''''''''''''''


'Used to Find Letter of Last Column
Function GetColumnLetter(colNum As Long) As String
Dim vArr
    vArr = Split(Cells(1, colNum).Address(True, False), "$")
      GetColumnLetter = vArr(0)

End Function
    
'Used to find range address
Function RngAddress(Rng As Range) As String
RngAddress = Rng.Address
End Function



Attribute VB_Name = "Module2"
Sub Month_Data_Copy()

Dim ws As Worksheet
Dim lastrow
Dim lastcolumn As Long
Dim myCols1 As String, myCols As String
Dim date_range As Range
Dim startCol As String, startcol1 As String
Dim startrow, startrow1
Dim New_Month As Worksheet
Dim rng10 As Range
Dim Results As Range
Dim i As Long
Dim Cellx As Range
'Turn off screen updating until filter is finished
Application.ScreenUpdating = False

Set New_Month = ThisWorkbook.Worksheets("Monthly")

'Clear Contents of Monthly Data WorkSheet
    With New_Month
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
            startrow1 = 2
            startcol1 = "A"
            myCols = GetColumnLetter(lastcolumn)
           .Range(startcol1 & startrow1 & ":" & myCols & lastrow).Clear
End With

'Copy the Monthly Values - ***ADD WS NAMES FOR YEARLY DATA
For Each ws In ThisWorkbook.Worksheets
    If ws.Name <> "DBI" And ws.Name <> "Monthly" And ws.Name <> "DBI_Year" And _
    ws.Name <> "Y_USmooth_Dental_Sep_with_Co" And ws.Name <> "Y_Smooth_Dental_Sep_with_Co" And ws.Name <> "Y_Smooth_Dental_Sep_Wout_Co" And _
    ws.Name <> "Y_USmooth_Dental_Sep_Wout_Co" And ws.Name <> "Y_USmooth_Dental_Com_with_Co" And ws.Name <> "Y_Smooth_Dental_Com_with_Co" And _
    ws.Name <> "Y_Smooth_Dental_Com_Wout_Co" And ws.Name <> "Y_USmooth_Dental_Com_Wout_Co" And ws.Name <> "Yearly" Then

        With ws
    'Find Last Row
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row

    'Find Last Column
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
            startrow1 = 2
            startcol1 = "A"
            myCols1 = GetColumnLetter(lastcolumn)
            Set Results = .Range(startcol1 & startrow1 & ":" & myCols1 & lastrow)
            
    'Copy Data to newSheet
            Results.Copy
            New_Month.Range("A" & Rows.Count).End(xlUp).Offset(1, 0).PasteSpecial xlPasteValues, Transpose:=False
        End With
    End If
Next ws


'Remove Leading Numbers and White Space from Disease Types and trailing whitespace

Dim UR As Range
Dim lastrow2
Dim x()
Dim objRegex As Object
Dim lngRow As Long
Dim lngCol As Long

    
lastrow2 = New_Month.Range("A" & Rows.Count).End(xlUp).Row
Set UR = New_Month.Range("A2:A" & lastrow2)
    

x = UR
Set objRegex = CreateObject("vbscript.regexp")
    With objRegex
        .Pattern = "[^A-Z]+"
        .ignorecase = True
            For lngRow = 1 To UBound(x, 1)
                For lngCol = 1 To UBound(x, 2)
                    x(lngRow, lngCol) = .Replace(x(lngRow, lngCol), vbNullString)
                Next lngCol
            Next lngRow
    End With

[A2].Resize(UBound(x, 1), UBound(x, 2)).Value = x


For Each Cellx In UR
Cellx.Value = Trim(Cellx.Value)
Next Cellx



'Copy Date Range to Worksheet Monthly
For Each ws In ThisWorkbook.Worksheets
    If ws.Name = "Smooth_Dental_Com_with_Co" Then
        With ws
'Find Last Row
'            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
    'Find Last Column
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
'            startrow1 = 1
            startcol1 = "K"
            myCols1 = GetColumnLetter(lastcolumn)
            Set Results = .Range(startcol1 & 1 & ":" & myCols1 & 1)
    'Copy Data to newSheet
            Results.Copy
            New_Month.Range("K1").PasteSpecial xlPasteValues, Transpose:=False
        End With
    End If
Next ws



New_Month.Range("A1").Value = "Disease Selected"



Dim celly As Range
Dim adj, adjj
Dim util, ulowe

adj = "Utilization Adjusted"

adjj = "Utilization Adjusted (Disease Based Indexes)"

util = "Unadjusted (Lowe) Index"
ulowe = "Utilization Unadjusted (Lowe Indexes)"



For Each celly In New_Month.Range("A2:A" & lastrow2)
    If celly.Value = adj Then
    celly.Value = adjj
    
    ElseIf celly.Value = util Then
    celly.Value = ulowe
    
    End If
Next celly



Application.CutCopyMode = False
Application.ScreenUpdating = True

End Sub









Attribute VB_Name = "Module3"

Sub check_chart()
'Checks to see if there is data to plot
'If there is, then it calls the chart sub


Dim ws As Worksheet
Dim FindString As String
Dim FindOther As String
Dim i As Integer
Dim cello As Range
Dim cumul_val As Integer
Dim dis_val As Integer
Dim answer As Integer

FindString = "Cumulative Disease Index"
FindOther = "Disease Indexes"


Set ws = ThisWorkbook.Worksheets("DBI")

With ws
        lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
        Set rng1 = .Range("B9:B" & lastrow) 'Disease Names
End With


cumul_val = 0
dis_val = 0

 If Worksheets("DBI").Cells(9, 1) = "" Then
        MsgBox "Please Click the Button: Retrieve Monthly Data", , "Bureau of Labor Statistics"
        Exit Sub
End If


For Each cello In rng1
    If cello.Value = FindString Then
    cumul_val = cumul_val + 1
ElseIf cello.Value = FindOther Then
    dis_val = dis_val + 1
End If
Next

If cumul_val >= 1 And dis_val >= 1 Then
        answer = MsgBox("Please Reconsider: Cumulative Disease Indexes are Not Comparable to Disease Indexes. Would you like to continue?", vbYesNo, "Bureau of Labor Statistics")
            If answer = vbYes Then
                Call chart_Series
                ElseIf answer = vbNo Then
                    Exit Sub
            End If
 Else: Call chart_Series
End If


End Sub


Sub chart_Series()
   
Dim lastrow
Dim lastcolumn As Long
Dim myCols As String
Dim startCol As String
Dim DBI_Sheet As Worksheet
Dim rng10 As Range
    
Dim rng1 As Range
Dim rng2 As Range
Dim fullrng As Range
Dim Dest As Range

Dim ShName As String 'Sheet name
Dim series_name As String
Dim series_name2 As String
Dim minVal As Double
Dim maxVal As Double

Dim e() As Variant
Dim arr() As Variant
Dim i As Integer, j As Integer, x As Integer, R As Integer

  'Charting Userform Data
      
 Application.ScreenUpdating = False
    
Set DBI_Sheet = ThisWorkbook.Worksheets("DBI")

With DBI_Sheet
        lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
        lastcolumn = .Cells(8, Columns.Count).End(xlToLeft).Column
        startrow = 9
        startCol = "G"
        myCols = GetColumnLetter(lastcolumn)
        Set rng1 = .Range("A9:A" & lastrow) 'Disease Names
        Set rng2 = .Range(startCol & startrow & ":" & myCols & lastrow) 'Data Values
End With


'Concatenate Disease Names with Methods
x = WorksheetFunction.CountA(rng1)

ReDim e(9 To lastrow)

For i = 9 To lastrow
    e(i) = Cells(i, 1).Value & "_" & Cells(i, 2).Value & "_" & Cells(i, 3).Value _
& "_" & Cells(i, 4).Value & "_" & Cells(i, 5).Value & "_" & Cells(i, 6).Value
Next i

' add below for loop to print out result
For j = 9 To lastrow
Debug.Print e(j)
Next


'Place data values into Array
'arr = rng2


With DBI_Sheet
Set Dest = DBI_Sheet.Range("A9")
'.Cells(Rows.Count, 1).End(xlUp).Offset(1, 0) <- Use if you dont want to replace Disease Names
Set Dest = Dest.Resize(x, 1)
Dest.Value = Application.Transpose(e)
Set fullrng = Application.Union(rng1, rng2) ' Set Range that needs to be charted
'Set rng3 = .Range("C8:C" & lastrow & ", D8:D" & lastrow & ",K8:K" & lastrow)
ShName = .Name
minVal = Application.WorksheetFunction.RoundDown(Application.WorksheetFunction.Min(fullrng), 1)
maxVal = Application.WorksheetFunction.Round(Application.WorksheetFunction.Max(fullrng), 1)
End With

Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft


    Charts.Add

    With ActiveChart
        .ChartType = xlLine
        .HasTitle = False
        .HasLegend = True
        .SetSourceData Source:=fullrng
        .Location Where:=xlLocationAsObject, Name:=ShName
    End With
'Sets X Values for Chart
With ActiveChart.SeriesCollection(1)
    startrow = 8
    startCol = "G"
    .XValues = DBI_Sheet.Range(startCol & startrow & ":" & myCols & startrow)
End With



With Application.ActiveChart.Axes(xlValue, xlPrimary)
    .MinimumScale = minVal - 0.1
    .MaximumScale = maxVal + 0.1
    .HasMajorGridlines = False
    .HasMinorGridlines = False
End With


ActiveChart.SetElement (msoElementLegendBottom)


 Dim cht As ChartObject
  For Each cht In ActiveSheet.ChartObjects
    cht.Height = Application.InchesToPoints(8)
    cht.Width = Application.InchesToPoints(10)
  Next

Cells(7, 1).Select

End Sub

Attribute VB_Name = "Module4"
Sub Year_Data_Copy()

Dim ws As Worksheet
Dim lastrow
Dim lastcolumn As Long
Dim myCols1 As String, myCols As String
Dim date_range As Range
Dim startCol As String, startcol1 As String
Dim startrow, startrow1
Dim New_Year As Worksheet
Dim rng10 As Range
Dim Results As Range
Dim i As Long
Dim Cellx As Range
'Turn off screen updating until filter is finished
Application.ScreenUpdating = False

Set New_Year = ThisWorkbook.Worksheets("Yearly")

'Clear Contents of Monthly Data WorkSheet
    With New_Year
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
            startrow1 = 2
            startcol1 = "A"
            myCols = GetColumnLetter(lastcolumn)
           .Range(startcol1 & startrow1 & ":" & myCols & lastrow).Clear
End With

'Copy the Yearly Values -
For Each ws In ThisWorkbook.Worksheets
    If ws.Name <> "DBI" And ws.Name <> "Monthly" And ws.Name <> "DBI_Year" And ws.Name <> "Yearly" And _
    ws.Name <> "USmooth_Dental_Sep_without_Co" And ws.Name <> "USmooth_Dental_Sep_with_Co" And ws.Name <> "Smooth_Dental_Sep_without_Co" And _
    ws.Name <> "Smooth_Dental_Sep_with_Co" And ws.Name <> "Smooth_Dental_Com_with_Co" And ws.Name <> "Smooth_Dental_Com_without_Co" And _
    ws.Name <> "USmooth_Dental_Com_without_Co" And ws.Name <> "USmooth_Dental_Com_with_Co" Then

        With ws
    'Find Last Row
            lastrow = .Range("A" & .Rows.Count).End(xlUp).Row

    'Find Last Column
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
            startrow1 = 2
            startcol1 = "A"
            myCols1 = GetColumnLetter(lastcolumn)
            Set Results = .Range(startcol1 & startrow1 & ":" & myCols1 & lastrow)
            
    'Copy Data to newSheet
            Results.Copy
            New_Year.Range("A" & Rows.Count).End(xlUp).Offset(1, 0).PasteSpecial xlPasteValues, Transpose:=False
        End With
    End If
Next ws


'Remove Leading Numbers and White Space from Disease Types

Dim UR As Range
Dim lastrow2
Dim x()
Dim objRegex As Object
Dim lngRow As Long
Dim lngCol As Long



    
lastrow2 = New_Year.Range("A" & Rows.Count).End(xlUp).Row
Set UR = New_Year.Range("A2:A" & lastrow2)
    
x = UR
Set objRegex = CreateObject("vbscript.regexp")
    With objRegex
        .Pattern = "[^A-Z]+"
        .ignorecase = True
            For lngRow = 1 To UBound(x, 1)
                For lngCol = 1 To UBound(x, 2)
                    x(lngRow, lngCol) = .Replace(x(lngRow, lngCol), vbNullString)
                Next lngCol
            Next lngRow
    End With

[A2].Resize(UBound(x, 1), UBound(x, 2)).Value = x

For Each Cellx In UR
Cellx.Value = Trim(Cellx.Value)
Next Cellx


'Copy Date Range to Worksheet Monthly
For Each ws In ThisWorkbook.Worksheets
    If ws.Name = "Y_Smooth_Dental_Sep_with_Co" Then
        With ws
    'Find Last Column
            lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
            startcol1 = "K"
            myCols1 = GetColumnLetter(lastcolumn)
            Set Results = .Range(startcol1 & 1 & ":" & myCols1 & 1)
    'Copy Data to newSheet
            Results.Copy
            New_Year.Range("K1").PasteSpecial xlPasteValues, Transpose:=False
        End With
    End If
Next ws

New_Year.Range("A1").Value = "Disease Selected"





Dim celly As Range
Dim adj, adjj
Dim util, ulowe

adj = "Utilization Adjusted"

adjj = "Utilization Adjusted (Disease Based Indexes)"

util = "Unadjusted (Lowe) Index"
ulowe = "Utilization Unadjusted (Lowe Indexes)"



For Each celly In New_Year.Range("A2:A" & lastrow2)
    If celly.Value = adj Then
    celly.Value = adjj
    
    ElseIf celly.Value = util Then
    celly.Value = ulowe
    
    End If
Next celly





Application.CutCopyMode = False
Application.ScreenUpdating = True

End Sub



Attribute VB_Name = "Module5"
Sub check_chart_year()
'Checks to see if there is data to plot
'If there is, then it calls the chart sub


Dim ws As Worksheet
Dim FindString As String
Dim FindOther As String
Dim i As Integer
Dim cello As Range
Dim cumul_val As Integer
Dim exp_val As Integer
Dim answer As Integer

FindString = "Cumulative Disease Index"
FindOther = "Expenditure"


Set ws = ThisWorkbook.Worksheets("DBI_Year")

With ws
        lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
        Set rng1 = .Range("B9:B" & lastrow) 'Disease Names
End With


cumul_val = 0
exp_val = 0

 If Worksheets("DBI_Year").Cells(9, 1) = "" Then
        MsgBox "Please Click the Button: Retrieve Yearly Data", , "Bureau of Labor Statistics"
        Exit Sub
End If


For Each cello In rng1
    If cello.Value = FindString Then
    cumul_val = cumul_val + 1
ElseIf cello.Value = FindOther Then
    exp_val = exp_val + 1
End If
Next

If cumul_val >= 1 And exp_val >= 1 Then
        answer = MsgBox("Please Reconsider: Expenditure Indexes and Cumulative Indexes are not Comparable. Would you like to continue?", vbYesNo, "Bureau of Labor Statistics")
            If answer = vbYes Then
                Call chart_Series_year
                ElseIf answer = vbNo Then
                    Exit Sub
            End If
 Else: Call chart_Series_year
End If


End Sub


Sub chart_Series_year()
   
Dim lastrow
Dim lastcolumn As Long
Dim myCols As String
Dim startCol As String
Dim DBI_Sheet As Worksheet
Dim rng10 As Range
    
Dim rng1 As Range
Dim rng2 As Range
Dim fullrng As Range
Dim Dest As Range

Dim ShName As String 'Sheet name
Dim series_name As String
Dim series_name2 As String
Dim minVal As Double
Dim maxVal As Double

Dim e() As Variant
Dim arr() As Variant
Dim i As Integer, j As Integer, x As Integer, R As Integer

  'Charting Userform Data
      
 Application.ScreenUpdating = False
    
Set DBI_Sheet = ThisWorkbook.Worksheets("DBI_Year")

With DBI_Sheet
        lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
        lastcolumn = .Cells(8, Columns.Count).End(xlToLeft).Column
        startrow = 9
        startCol = "G"
        myCols = GetColumnLetter(lastcolumn)
        Set rng1 = .Range("A9:A" & lastrow) 'Disease Names
        Set rng2 = .Range(startCol & startrow & ":" & myCols & lastrow) 'Data Values
End With


'Concatenate Disease Names with Methods
x = WorksheetFunction.CountA(rng1)

ReDim e(9 To lastrow)

For i = 9 To lastrow
    e(i) = Cells(i, 1).Value & "_" & Cells(i, 2).Value & "_" & Cells(i, 3).Value _
& "_" & Cells(i, 4).Value & "_" & Cells(i, 5).Value & "_" & Cells(i, 6).Value
Next i

' add below for loop to print out result
For j = 9 To lastrow
Debug.Print e(j)
Next


'Place data values into Array
'arr = rng2


With DBI_Sheet
Set Dest = DBI_Sheet.Range("A9")
'.Cells(Rows.Count, 1).End(xlUp).Offset(1, 0) <- Use if you dont want to replace Disease Names
Set Dest = Dest.Resize(x, 1)
Dest.Value = Application.Transpose(e)
Set fullrng = Application.Union(rng1, rng2) ' Set Range that needs to be charted

ShName = .Name
minVal = Application.WorksheetFunction.Min(fullrng)
maxVal = Application.WorksheetFunction.Max(fullrng)
End With

Columns.AutoFit
Columns(1).HorizontalAlignment = xlLeft


    Charts.Add

    With ActiveChart
        .ChartType = xlLine
        .HasTitle = False
        .HasLegend = True
        .SetSourceData Source:=fullrng
        .Location Where:=xlLocationAsObject, Name:=ShName
    End With
'Sets X Values for Chart
With ActiveChart.SeriesCollection(1)
    startrow = 8
    startCol = "G"
    .XValues = DBI_Sheet.Range(startCol & startrow & ":" & myCols & startrow)
End With



With Application.ActiveChart.Axes(xlValue, xlPrimary)
    .MinimumScale = minVal - 0.1
    .MaximumScale = maxVal + 0.1
    .HasMajorGridlines = False
    .HasMinorGridlines = False
End With


ActiveChart.SetElement (msoElementLegendBottom)


 Dim cht As ChartObject
  For Each cht In ActiveSheet.ChartObjects
    cht.Height = Application.InchesToPoints(8)
    cht.Width = Application.InchesToPoints(8)
  Next


Cells(7, 1).Select

End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{15544019-ED03-4850-BC91-F9B722F6B52E}{3E04A88B-566A-4832-8497-BF25A96EC97B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
'Retrieve data based on user specification
Dim disease As Variant
Dim iMethod As Variant
Dim quantAdj As Variant
Dim DentAdj As Variant
Dim CoAdj As Variant
Dim smoothAdj As Variant
Dim lastrow
Dim lastcolumn As Long
Dim ws As Worksheet
Dim rng10 As Range
Dim i As Integer
Dim Results As Worksheet
Dim range1 As Range
Dim range2 As Range
Dim Range3 As Range
Dim Range4 As Range
Dim Range5 As Range
Dim Range6 As Range
Dim Range7 As Range
Dim head_rng As Range
Dim date_range As Range
Dim myCol As String, myCols1 As String
Dim startCol As String, startcol1 As String
Dim startrow, startrow1


'Turn off screen updating until filter is finished
Application.ScreenUpdating = False


ReDim disease(0)
ReDim iMethod(0)
ReDim quantAdj(0)
ReDim DentAdj(0)
ReDim CoAdj(0)
ReDim smoothAdj(0)


Set Results = Worksheets("DBI")
Set ws = Worksheets("Monthly")


With ws

    'Find Last Row
    lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
    
    'Find Last Column
    
    lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
    'Set rng10 = .Range(.Cells(lastrow, 1), .Cells(lastrow, lastcolumn))
    
    startrow1 = 1
    startcol1 = "A"
    
    myCols1 = GetColumnLetter(lastcolumn)
    Set rng10 = .Range(startcol1 & startrow1 & ":" & myCols1 & lastrow)
  

'Disease Listbox Value

            For i = 0 To ListBox1.ListCount - 1
                If ListBox1.Selected(i) Then
                    disease(UBound(disease)) = ListBox1.List(i)
                    ReDim Preserve disease(UBound(disease) + 1)
                End If
            Next i

'Index Method Value
        For i = 0 To ListBox2.ListCount - 1
                If ListBox2.Selected(i) Then
                    iMethod(UBound(iMethod)) = ListBox2.List(i)
                    ReDim Preserve iMethod(UBound(iMethod) + 1)
                End If
        Next i


'Fixed Quantities or Adjusted Quantites
   For i = 0 To ListBox3.ListCount - 1
                If ListBox3.Selected(i) Then
                    quantAdj(UBound(quantAdj)) = ListBox3.List(i)
                    ReDim Preserve quantAdj(UBound(quantAdj) + 1)
                End If
        Next i


'Dental Adjustment
   For i = 0 To ListBox4.ListCount - 1
                If ListBox4.Selected(i) Then
                    DentAdj(UBound(DentAdj)) = ListBox4.List(i)
                    ReDim Preserve DentAdj(UBound(DentAdj) + 1)
                End If
        Next i


'Comorbidity Adjustment
   For i = 0 To ListBox5.ListCount - 1
                If ListBox5.Selected(i) Then
                    CoAdj(UBound(CoAdj)) = ListBox5.List(i)
                    ReDim Preserve CoAdj(UBound(CoAdj) + 1)
                End If
        Next i


'Smoothing Adjustment

   For i = 0 To ListBox6.ListCount - 1
                If ListBox6.Selected(i) Then
                    smoothAdj(UBound(smoothAdj)) = ListBox6.List(i)
                    ReDim Preserve smoothAdj(UBound(smoothAdj) + 1)
                End If
        Next i




'Filter on Selected Values
'Disease 1
rng10.AutoFilter Field:=1, Criteria1:=disease, Operator:=xlFilterValues

'Index method 1
rng10.AutoFilter Field:=2, Criteria1:=iMethod, Operator:=xlFilterValues


'Quantity Adjustment
rng10.AutoFilter Field:=4, Criteria1:=quantAdj, Operator:=xlFilterValues



'Dental Adjustment
rng10.AutoFilter Field:=6, Criteria1:=DentAdj, Operator:=xlFilterValues



'Comorbidity Adjustment
rng10.AutoFilter Field:=8, Criteria1:=CoAdj, Operator:=xlFilterValues


'Smoothing Adjustment
rng10.AutoFilter Field:=10, Criteria1:=smoothAdj, Operator:=xlFilterValues


''''''''''''''
'End filtering
''''''''''''''


    startrow = 2
    startCol = "K"
    
    myCol = GetColumnLetter(lastcolumn)

    Set range1 = Sheets("Monthly").Range("A2:A" & lastrow)
    Set range2 = Sheets("Monthly").Range(startCol & startrow & ":" & myCol & lastrow)
    
    'Set Column Header Ranges
    'Index method Header
    Set Range3 = Sheets("Monthly").Range("B2:B" & lastrow)
    'Quantity Adjustment Header
    Set Range4 = Sheets("Monthly").Range("D2:D" & lastrow)
    'Dental Adjustment Header
    Set Range5 = Sheets("Monthly").Range("F2:F" & lastrow)
    'Comorbidity Adjustment Header
    Set Range6 = Sheets("Monthly").Range("H2:H" & lastrow)
    'Smoothing Header
    Set Range7 = Sheets("Monthly").Range("J2:J" & lastrow)
    
    'Set union of Data ranges
    Set head_rng = Application.Union(range1, Range3, Range4, Range5, Range6, Range7, range2)
    
    'Date Headers
    
    Set date_range = Sheets("Monthly").Range(startCol & 1 & ":" & myCol & 1)


    
'Copy Main Data
    head_rng.Copy Destination:=Worksheets("DBI").Range("A" & Rows.Count).End(xlUp).Offset(1, 0)
    
'Set Data Copy
    date_range.Copy Destination:=Worksheets("DBI").Range("G8")

'Add Sort by Disease Selected


'Format Filtered Data
    With Sheets("DBI")
        Range("A:J").HorizontalAlignment = xlCenter
        Range("A:J").Columns.AutoFit
    End With
  
End With


On Error Resume Next
If Worksheets("Monthly").AutoFilterMode = True Then
    Worksheets("Monthly").AutoFilterMode = False
End If
  On Error GoTo 0

Application.CutCopyMode = False
'Turning back on  ScreenUpdating



Application.ScreenUpdating = True



'Closes Userform
'Unload Me



End Sub








'Remove Duplicates in ListBoxes
Private Sub UserForm_Initialize()


'Calls Sub Clear Results
clear_results


Dim ws As Worksheet
Dim lastrow As Long


Set ws = Worksheets("Monthly")
With ws
    lastrow = Sheets("Monthly").Range("A" & Rows.Count).End(xlUp).Row
End With

'Remove Duplicates from Disease Boxes
Dim z, f
    With ws.Range("A2:A" & lastrow)
        z = .Value
    End With
    

With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each f In z
        If Not .exists(f) Then .Add f, Nothing
    Next
    If .Count Then Me.ListBox1.List = Application.Transpose(.keys)
    'If .Count Then Me.ListBox3.List = Application.Transpose(.keys)
End With

'Remove Duplicates in Index Type
Dim x, e
    With ws.Range("B2:B" & lastrow)
        x = .Value
    End With

With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each e In x
        If Not .exists(e) Then .Add e, Nothing
    Next
    If .Count Then Me.ListBox2.List = Application.Transpose(.keys)
End With


'Remove Duplicates in Fixed or Adjusted Quantities
Dim y, q
    With ws.Range("D2:D" & lastrow)
        y = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each q In y
        If Not .exists(q) Then .Add q, Nothing
    Next
    If .Count Then Me.ListBox3.List = Application.Transpose(.keys)
End With



'Remove Duplicates in Dental Adjustment

Dim S, B
    With ws.Range("F2:F" & lastrow)
        S = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each B In S
        If Not .exists(B) Then .Add B, Nothing
    Next
    If .Count Then Me.ListBox4.List = Application.Transpose(.keys)
End With



'Remove Duplicates in CoMorbidity  Adjustment

Dim T, c
    With ws.Range("H2:H" & lastrow)
        T = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each c In T
        If Not .exists(c) Then .Add c, Nothing
    Next
    If .Count Then Me.ListBox5.List = Application.Transpose(.keys)
End With


'Remove Duplicates in Smoothing Adjustment

Dim R, k
    With ws.Range("J2:J" & lastrow)
        R = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each k In R
        If Not .exists(k) Then .Add k, Nothing
    Next
    If .Count Then Me.ListBox6.List = Application.Transpose(.keys)
End With


'Set Initial Values of Userform
Me.ListBox1.ListIndex = 0
Me.ListBox2.ListIndex = 0
Me.ListBox3.ListIndex = 0
Me.ListBox4.ListIndex = 0
Me.ListBox5.ListIndex = 0
Me.ListBox6.ListIndex = 0



End Sub


Private Sub ListBox1_Click()
Dim util As String
Dim lowe As String
Dim CUMUL As String
Dim DIS As String
Dim AllD As String
Dim adj As String
Dim fixer As String
Dim dental As String
Dim sep As String
Dim Com As String
'Error Checking

util = "Utilization Adjusted (Disease Based Indexes)"
lowe = "Utilization Unadjusted (Lowe Indexes)"
AllD = "All Disease"
CUMUL = "Cumulative Disease Index"
DIS = "Disease Indexes"
adj = "Adjusted"
fixer = "Fixed"
dental = "Dental Diseases"
sep = "Separated"
Com = "Combined"

If (UserForm1.ListBox1.Value <> util Or UserForm1.ListBox1.Value <> lowe) Then
            With UserForm1.ListBox2
                UserForm1.ListBox2.Clear
                .AddItem CUMUL
                .AddItem DIS
                .ListIndex = 0
            End With
            
            With UserForm1.ListBox3
                UserForm1.ListBox3.Clear
                .AddItem adj
                .AddItem fixer
                .ListIndex = 0
            End With
End If



If UserForm1.ListBox1.Value = util Then
            With UserForm1.ListBox2
                UserForm1.ListBox2.Clear
                .AddItem AllD
                .ListIndex = 0
            End With
            
            With UserForm1.ListBox3
                UserForm1.ListBox3.Clear
                .AddItem adj
                .ListIndex = 0
            End With
          
End If


If UserForm1.ListBox1.Value = lowe Then
            With UserForm1.ListBox2
                UserForm1.ListBox2.Clear
                .AddItem AllD
                .ListIndex = 0
            End With

            With UserForm1.ListBox3
                UserForm1.ListBox3.Clear
                .AddItem fixer
                .ListIndex = 0
            End With
End If

If UserForm1.ListBox1.Value = dental Then
            With UserForm1.ListBox4
                 UserForm1.ListBox4.Clear
                .AddItem sep
                .ListIndex = 0
            End With
            
        ElseIf UserForm1.ListBox1.Value <> dental Then
            With UserForm1.ListBox4
                 UserForm1.ListBox4.Clear
                .AddItem Com
                .AddItem sep
                .ListIndex = 0
            End With
            
                  
End If






End Sub





'Exit form
Private Sub CommandButton2_Click()
Unload Me

End Sub














Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{BF5BB35D-9E24-4BC1-8FBA-FB375AB2B62A}{B7990BCD-E134-4FCF-9FED-607E22BCD4E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()


'Retrieve data based on user specification
Dim disease As Variant
Dim iMethod As Variant
Dim quantAdj As Variant
Dim DentAdj As Variant
Dim CoAdj As Variant
Dim smoothAdj As Variant
Dim lastrow
Dim lastcolumn As Long
Dim ws As Worksheet
Dim rng10 As Range
Dim i As Integer
Dim Results As Worksheet
Dim range1 As Range
Dim range2 As Range
Dim Range3 As Range
Dim Range4 As Range
Dim Range5 As Range
Dim Range6 As Range
Dim Range7 As Range
Dim head_rng As Range
Dim date_range As Range
Dim myCol As String, myCols1 As String
Dim startCol As String, startcol1 As String
Dim startrow, startrow1


'Turn off screen updating until filter is finished
Application.ScreenUpdating = False


ReDim disease(0)
ReDim iMethod(0)
ReDim quantAdj(0)
ReDim DentAdj(0)
ReDim CoAdj(0)
ReDim smoothAdj(0)


Set Results = Worksheets("DBI_Year")
Set ws = Worksheets("Yearly")


With ws

    'Find Last Row
    lastrow = .Range("A" & .Rows.Count).End(xlUp).Row
    
    'Find Last Column
    
    lastcolumn = .Cells(2, Columns.Count).End(xlToLeft).Column
    'Set rng10 = .Range(.Cells(lastrow, 1), .Cells(lastrow, lastcolumn))
    
    startrow1 = 1
    startcol1 = "A"
    
    myCols1 = GetColumnLetter(lastcolumn)
    Set rng10 = .Range(startcol1 & startrow1 & ":" & myCols1 & lastrow)
  

'Disease Listbox Value

            For i = 0 To ListBox1.ListCount - 1
                If ListBox1.Selected(i) Then
                    disease(UBound(disease)) = ListBox1.List(i)
                    ReDim Preserve disease(UBound(disease) + 1)
                End If
            Next i

'Index Method Value
        For i = 0 To ListBox2.ListCount - 1
                If ListBox2.Selected(i) Then
                    iMethod(UBound(iMethod)) = ListBox2.List(i)
                    ReDim Preserve iMethod(UBound(iMethod) + 1)
                End If
        Next i


'Fixed Quantities or Adjusted Quantites
   For i = 0 To ListBox3.ListCount - 1
                If ListBox3.Selected(i) Then
                    quantAdj(UBound(quantAdj)) = ListBox3.List(i)
                    ReDim Preserve quantAdj(UBound(quantAdj) + 1)
                End If
        Next i


'Dental Adjustment
   For i = 0 To ListBox4.ListCount - 1
                If ListBox4.Selected(i) Then
                    DentAdj(UBound(DentAdj)) = ListBox4.List(i)
                    ReDim Preserve DentAdj(UBound(DentAdj) + 1)
                End If
        Next i


'Comorbidity Adjustment
   For i = 0 To ListBox5.ListCount - 1
                If ListBox5.Selected(i) Then
                    CoAdj(UBound(CoAdj)) = ListBox5.List(i)
                    ReDim Preserve CoAdj(UBound(CoAdj) + 1)
                End If
        Next i


'Smoothing Adjustment

   For i = 0 To ListBox6.ListCount - 1
                If ListBox6.Selected(i) Then
                    smoothAdj(UBound(smoothAdj)) = ListBox6.List(i)
                    ReDim Preserve smoothAdj(UBound(smoothAdj) + 1)
                End If
        Next i




'Filter on Selected Values
'Disease 1
rng10.AutoFilter Field:=1, Criteria1:=disease, Operator:=xlFilterValues

'Index method 1
rng10.AutoFilter Field:=2, Criteria1:=iMethod, Operator:=xlFilterValues


'Quantity Adjustment
rng10.AutoFilter Field:=4, Criteria1:=quantAdj, Operator:=xlFilterValues



'Dental Adjustment
rng10.AutoFilter Field:=6, Criteria1:=DentAdj, Operator:=xlFilterValues



'Comorbidity Adjustment
rng10.AutoFilter Field:=8, Criteria1:=CoAdj, Operator:=xlFilterValues


'Smoothing Adjustment
rng10.AutoFilter Field:=10, Criteria1:=smoothAdj, Operator:=xlFilterValues


''''''''''''''
'End filtering
''''''''''''''


    startrow = 2
    startCol = "K"
    
    myCol = GetColumnLetter(lastcolumn)

    Set range1 = Sheets("Yearly").Range("A2:A" & lastrow)
    Set range2 = Sheets("Yearly").Range(startCol & startrow & ":" & myCol & lastrow)
    
    'Set Column Header Ranges
    'Index method Header
    Set Range3 = Sheets("Yearly").Range("B2:B" & lastrow)
    'Quantity Adjustment Header
    Set Range4 = Sheets("Yearly").Range("D2:D" & lastrow)
    'Dental Adjustment Header
    Set Range5 = Sheets("Yearly").Range("F2:F" & lastrow)
    'Comorbidity Adjustment Header
    Set Range6 = Sheets("Yearly").Range("H2:H" & lastrow)
    'Smoothing Header
    Set Range7 = Sheets("Yearly").Range("J2:J" & lastrow)
    
    'Set union of Data ranges
    Set head_rng = Application.Union(range1, Range3, Range4, Range5, Range6, Range7, range2)
    
    'Date Headers
    
    Set date_range = Sheets("Yearly").Range(startCol & 1 & ":" & myCol & 1)


    
'Copy Main Data
    head_rng.Copy Destination:=Worksheets("DBI_Year").Range("A" & Rows.Count).End(xlUp).Offset(1, 0)
    
'Set Date Copy
    date_range.Copy Destination:=Worksheets("DBI_Year").Range("G8")

'Add Sort by Disease Selected


'Format Filtered Data
    With Sheets("DBI_Year")
        Range("A:J").HorizontalAlignment = xlCenter
        Range("A:J").Columns.AutoFit
    End With
  
End With


On Error Resume Next
If Worksheets("Yearly").AutoFilterMode = True Then
    Worksheets("Yearly").AutoFilterMode = False
End If
  On Error GoTo 0

Application.CutCopyMode = False
'Turning back on  ScreenUpdating



Application.ScreenUpdating = True



'Closes Userform
'Unload Me



End Sub


















'Remove Duplicates in ListBoxes
Private Sub UserForm_Initialize()

'Calls Sub Clear Results
'clear_results2


Dim ws As Worksheet
Dim lastrow As Long


Set ws = Worksheets("Yearly")
With ws
    lastrow = Sheets("Yearly").Range("A" & Rows.Count).End(xlUp).Row
End With

'Remove Duplicates from Disease Boxes
Dim z, f
    With ws.Range("A2:A" & lastrow)
        z = .Value
    End With
    

With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each f In z
        If Not .exists(f) Then .Add f, Nothing
    Next
    If .Count Then Me.ListBox1.List = Application.Transpose(.keys)
    'If .Count Then Me.ListBox3.List = Application.Transpose(.keys)
End With

'Remove Duplicates in Index Type
Dim x, e
    With ws.Range("B2:B" & lastrow)
        x = .Value
    End With

With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each e In x
        If Not .exists(e) Then .Add e, Nothing
    Next
    If .Count Then Me.ListBox2.List = Application.Transpose(.keys)
End With


'Remove Duplicates in Fixed or Adjusted Quantities
Dim y, q
    With ws.Range("D2:D" & lastrow)
        y = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each q In y
        If Not .exists(q) Then .Add q, Nothing
    Next
    If .Count Then Me.ListBox3.List = Application.Transpose(.keys)
End With



'Remove Duplicates in Dental Adjustment

Dim S, B
    With ws.Range("F2:F" & lastrow)
        S = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each B In S
        If Not .exists(B) Then .Add B, Nothing
    Next
    If .Count Then Me.ListBox4.List = Application.Transpose(.keys)
End With



'Remove Duplicates in CoMorbidity  Adjustment

Dim T, c
    With ws.Range("H2:H" & lastrow)
        T = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each c In T
        If Not .exists(c) Then .Add c, Nothing
    Next
    If .Count Then Me.ListBox5.List = Application.Transpose(.keys)
End With


'Remove Duplicates in Smoothing Adjustment

Dim R, k
    With ws.Range("J2:J" & lastrow)
        R = .Value
    End With
    
With CreateObject("scripting.dictionary")
    .comparemode = 1
    For Each k In R
        If Not .exists(k) Then .Add k, Nothing
    Next
    If .Count Then Me.ListBox6.List = Application.Transpose(.keys)
End With


'Set Initial Values of Userform
Me.ListBox1.ListIndex = 0
Me.ListBox2.ListIndex = 0
Me.ListBox3.ListIndex = 0
Me.ListBox4.ListIndex = 0
Me.ListBox5.ListIndex = 0
Me.ListBox6.ListIndex = 0

End Sub

Private Sub ListBox1_Click()


Dim util As String
Dim lowe As String
Dim CUMUL As String
Dim DIS As String
Dim AllD As String
Dim adj As String
Dim fixer As String
Dim dental As String
Dim sep As String
Dim Exp As String
Dim NotA As String
Dim Com As String
'Error Checking

util = "Utilization Adjusted (Disease Based Indexes)"
lowe = "Utilization Unadjusted (Lowe Indexes)"
AllD = "All Disease"
CUMUL = "Cumulative Disease Index"
DIS = "Disease Indexes"
adj = "Adjusted"
fixer = "Fixed"
dental = "Dental Diseases"
sep = "Separated"
Exp = "Expenditure"
NotA = "NA"
Com = "Combined"


If (UserForm2.ListBox1.Value <> util Or UserForm2.ListBox1.Value <> lowe) Then
        With UserForm2.ListBox2
                UserForm2.ListBox2.Clear
                .AddItem CUMUL
                '.AddItem Exp
                .ListIndex = 0
        End With
            
        With UserForm2.ListBox3
                If UserForm2.ListBox2.Value <> Exp Then
                UserForm2.ListBox3.Clear
                .AddItem adj
                .AddItem fixer
                .ListIndex = 0
                End If
        End With
        
 End If

If UserForm2.ListBox1.Value = util Then
            With UserForm2.ListBox2
                UserForm2.ListBox2.Clear
                .AddItem AllD
                .ListIndex = 0
            End With
            
            With UserForm2.ListBox3
                UserForm2.ListBox3.Clear
                .AddItem adj
                .ListIndex = 0
            End With
          
End If


If UserForm2.ListBox1.Value = lowe Then
            With UserForm2.ListBox2
                UserForm2.ListBox2.Clear
                .AddItem AllD
                .ListIndex = 0
            End With

            With UserForm2.ListBox3
                UserForm2.ListBox3.Clear
                .AddItem fixer
                .ListIndex = 0
            End With
End If

If UserForm2.ListBox1.Value = dental Then
            With UserForm2.ListBox4
                 UserForm2.ListBox4.Clear
                .AddItem sep
                .ListIndex = 0
            End With
            
            ElseIf UserForm2.ListBox1.Value <> dental Then
                With UserForm2.ListBox4
                 UserForm2.ListBox4.Clear
                .AddItem Com
                .AddItem sep
                .ListIndex = 0
                End With
            
End If




End Sub


Private Sub ListBox2_Click()

''Click Event For Expenditure

Dim NotA As String
Dim Exp As String
Dim adj As String
Dim fixer As String
Dim NoAdj As String
Dim Adjustment As String
Dim smooth As String
Dim unsmooth As String






NotA = "NA"
Exp = "Expenditure"
adj = "Adjusted"
fixer = "Fixed"
NoAdj = "No Adjustment"
Adjustment = "Adjustment"
smooth = "Smooth"
unsmooth = "UnSmooth"


If UserForm2.ListBox2.Value <> Exp Then

                'Comorbid Adjustment
                    With UserForm2.ListBox5
                        UserForm2.ListBox5.Clear
                        .AddItem Adjustment
                        .AddItem NoAdj
                        .ListIndex = 0
                    End With
                'Smoothing
                    With UserForm2.ListBox6
                        UserForm2.ListBox6.Clear
                        .AddItem smooth
                        .AddItem unsmooth
                        .ListIndex = 0
                    End With
                                             
End If


End Sub



'If UserForm2.ListBox2.Value = Exp Then
'            With UserForm2.ListBox3
'                 UserForm2.ListBox3.Clear
'                .AddItem NotA
'                .ListIndex = 0
'            End With
'
'            'Comorbid Adjustment
'            With UserForm2.ListBox5
'                 UserForm2.ListBox5.Clear
'                 .AddItem NotA
'                 .ListIndex = 0
'            End With
'
'            'Smoothing
'            With UserForm2.ListBox6
'                 UserForm2.ListBox6.Clear
'                 .AddItem NotA
'                 .ListIndex = 0
'            End With
'
'                ElseIf UserForm2.ListBox2.Value <> Exp Then
'
'                    With UserForm2.ListBox3
'                        UserForm2.ListBox3.Clear
'                        .AddItem adj
'                        .AddItem fixer
'                        .ListIndex = 0
'                    End With
'                'Comorbid Adjustment
'                    With UserForm2.ListBox5
'                        UserForm2.ListBox5.Clear
'                        .AddItem Adjustment
'                        .AddItem NoAdj
'                        .ListIndex = 0
'                    End With
'                'Smoothing
'                    With UserForm2.ListBox6
'                        UserForm2.ListBox6.Clear
'                        .AddItem smooth
'                        .AddItem unsmooth
'                        .ListIndex = 0
'                    End With
'
'End If







'Exit form
Private Sub CommandButton2_Click()
Unload Me

End Sub










































INQUEST-PP=macro
