Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public maxproducts As Double
Public maxcategories As Double
Public daylimit As Boolean



' Option Explicit
' hier die ben|fffd|tigten API-Deklarationen

#If VBA7 Then
Private Declare PtrSafe Sub CopyMem Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
#Else
Private Declare Sub CopyMem Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
#End If


#If Win64 Then

Private Declare PtrSafe Function CloseHandle Lib "kernel32" _
  (ByVal hObject As Long) As Long
 

        
Private Declare PtrSafe Function OpenProcess Lib "kernel32" _
  (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As _
   Long, ByVal dwProcessId As Long) As Long

Private Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" _
  (ByVal hProcess As Long, lpExitCode As Long) As Long
        
Private Declare PtrSafe Function TerminateProcess Lib "kernel32" _
  (ByVal hProcess As Long, ByVal uExitCode As Long) As Long


#Else

Private Declare Function CloseHandle Lib "kernel32" _
  (ByVal hObject As Long) As Long
  
        
Private Declare Function OpenProcess Lib "kernel32" _
  (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As _
   Long, ByVal dwProcessId As Long) As Long

Private Declare Function GetExitCodeProcess Lib "kernel32" _
  (ByVal hProcess As Long, lpExitCode As Long) As Long
        
Private Declare Function TerminateProcess Lib "kernel32" _
  (ByVal hProcess As Long, ByVal uExitCode As Long) As Long

#End If






Const STILL_ACTIVE = &H103
Const PROCESS_ALL_ACCESS = &H1F0FFF
Const PROCESS_TERMINATE = &H1

' Pr|fffd|fen, ob ein Task mit einer bestimmten
' TaskID noch aktiv ist
Public Function IsTaskActive(lTaskID As Long) As Boolean
  Dim lhwnd As Long
  Dim lExitCode As Long
  
  lhwnd = OpenProcess(PROCESS_ALL_ACCESS, False, lTaskID)
  Call GetExitCodeProcess(lhwnd, lExitCode)
  Call CloseHandle(lhwnd)
    
  IsTaskActive = (lExitCode = STILL_ACTIVE)
End Function

' Task beenden
Public Sub TerminateTask(lTaskID As Long)
  Dim lhwnd As Long
  Dim lResult As Long
  
  lhwnd = OpenProcess(PROCESS_TERMINATE, 0&, lTaskID)
  lResult = TerminateProcess(lhwnd, 1&)
  lResult = CloseHandle(lhwnd)
End Sub
Public Function check_serial() As Boolean
Dim licencekey As String, rueckgabe As Boolean, I As Integer

Dim ar_serial(33) As Variant
ar_serial(0) = "0000000000000"


rueckgabe = False
maxproducts = 100
maxcategories = 50

licencekey = GetSetting("SBC", "SBCEXCEL", "LICENCEKEY", "")

If licencekey = "" Then
    rueckgabe = False
    maxproducts = 100
    maxcategories = 50
    ThisWorkbook.Sheets(1).Cells(1, 1) = "BMEcatConverter 2.0 - Demoversion"
End If

For I = 0 To 32
    If licencekey = ar_serial(I) Then
        rueckgabe = True
        maxproducts = 200000
        maxcategories = 5000
        ThisWorkbook.Sheets(1).Cells(1, 1) = "BMEcatConverter 2.0 - Vollversion"
     End If
Next I

If Not rueckgabe Then
   SaveSetting "SBC", "SBCEXCEL", "LICENCEKEY", ""
End If



check_serial = rueckgabe

End Function


Public Function check_firstuse()
Dim datum As Date, checkdate As String, n As String, ok As Boolean
datum = VBA.Now
n = Chr(13) & Chr(10)
ok = True
    
If check_serial = False Then

    checkdate = GetSetting("SBC", "SBCEXCEL", "FIRSTUSE", "")
    
    If checkdate = "" Then
          SaveSetting "SBC", "SBCEXCEL", "FIRSTUSE", datum
    Else
          datum = checkdate
          If (VBA.Now - 30) > datum Then
              MsgBox "Ihre 30 Tage Demo-Lizenz ist abgelaufen." & n & "Bitte erwerben Sie eine Lizenz." & n & n & "Kontakt per Telefon: 0049 211 5141962" & n & n & "oder" & n & n & "Mail an: info@sepia.de"
              ok = False
          End If
    End If

End If


check_firstuse = ok

End Function

Sub export(Dateiname As String, Datenblatt As Integer, Spalten As Integer, ErsteSpalte As Integer, Zeilen As Double, ErsteZeile As Integer)
Dim Text As Variant, Zeile As Variant, emptyRows As Integer
Datei = FreeFile
emptyRows = 0

'Open Dateiname For Output As #Datei
Set fs = CreateObject("Scripting.FileSystemObject")
Set a = fs.CreateTextFile(Dateiname, True, True)

For y = ErsteZeile To Zeilen
    Zeile = ""
    For x = ErsteSpalte To Spalten
         Text = Sheets(Datenblatt).Cells(y, x)
         Text = brake_killer(Text, "<!NL>")
         Zeile = Zeile & Text & Chr(9)
         If (IsEmpty(Text)) And x = 1 Then
                emptyRows = emptyRows + 1
            If emptyRows = 1 Then
                GoTo ende1
            End If
        End If
    Next
   'Print #Datei, Trim(Zeile)
  a.WriteLine (Trim(Zeile))
Next
ende1:
'Close #Datei
a.Close
End Sub
Function isEmptyRow(sheet As String, ByRef row, start As Integer, ende As Integer) As Boolean
    Dim ret As Boolean
    Dim Text As Variant
    
    ret = True
    For x = start To ende
        Text = Sheets(sheet).Cells(row, x)
        If Not IsEmpty(Text) Then ret = False
    Next
    isEmptyRow = ret
End Function

Sub export_12()
export_all ("12")
End Sub

Sub export_2005()
export_all ("2005")
End Sub

Sub export_all(bmecatversion As String)
Dim verzeichnis As String, Fehlertext As String, TaskID As Long, ErrorLog As String
    
        maxproducts = 50000
        maxcategories = 5000
   

' If check_firstuse = False Then GoTo Fehler2



Application.Cursor = xlWait

On Error GoTo Fehler
verzeichnis = Application.ActiveWorkbook.Path

For x = 27 To 39
Sheets(1).Cells(x, 1) = ""
Next


Sheets(1).Cells(27, 1) = "Basic Information: started!"
Call export(verzeichnis & "\tmp\general_conv16.txt", 1, 4, 2, 25, 4)
Sheets(1).Cells(27, 1) = "Basic Information: finished."

Sheets(1).Cells(27, 1) = "Supplier: started."
Call export(verzeichnis & "\tmp\sup_conv16.txt", 2, 4, 2, 25, 4)
Sheets(1).Cells(27, 1) = "Supplier: finished."

Sheets(1).Cells(27, 1) = "Buyer: started."
Call export(verzeichnis & "\tmp\buy_conv16.txt", 3, 4, 2, 25, 4)
Sheets(1).Cells(27, 1) = "Buyer: finished."

'Auf 35 Zeilen begrenzt f|fffd|r Demo-Version

Sheets(1).Cells(27, 1) = "Categories: started."
Call export(verzeichnis & "\tmp\cat_conv16.txt", 4, 15, 1, maxcategories, 4)
Sheets(1).Cells(27, 1) = "Categories: finished."

'Auf 80 Zeilen begrenzt f|fffd|r Demo-Version
'ARTIKEL_FEATURES k|fffd|nnen beliebig erweitert werden, indem man 50 + 3 + 3 ... hinzuf|fffd|gt.

Sheets(1).Cells(27, 1) = "Products: started."
Call export(verzeichnis & "\tmp\prod_conv16.txt", 5, 234, 1, maxproducts, 4)




'Debug.Print "maxproducts:" & maxproducts
' Debug.Print "maxcategories:" & maxcategories
' Debug.Print "daylimit:" & daylimit

Debug.Print verzeichnis

'Enconding der tempor|fffd|ren Dateien von UTF-16 auf UTF-8 konvertieren

makecatalog = verzeichnis + "\makecatalog" & bmecatversion & ".bat"



'TaskID = Shell("" & makecatalog & "", vbHide)
TaskID = Shell(Chr(34) & makecatalog & Chr(34), vbHide)



'  Sheets(1).Cells(9, 6) = "Task: " & TaskID

While IsTaskActive(TaskID)
x = x + 1
Wend

Sheets(1).Cells(27, 1) = "Products: finished."

If Not FileExists(verzeichnis & "\tmp\error.log") Then

    Sheets(1).Cells(27, 1) = "The generated BMEcat Catalog is here - Der generierte BMEcat-Katalog befindet sich in: " & Chr(10) & verzeichnis & "\export\ "
        


Else:  GoTo Fehler

End If

Application.Cursor = xlDefault



Exit Sub

Fehler:
  
    Application.Cursor = xlDefault
    ErrorLog = verzeichnis & "\tmp\error.log"
    
    If FileSize(ErrorLog) < 5000 Then
        ErrorDatei = FreeFile
        Open ErrorLog For Input As ErrorDatei
        Fehlertext = Input$(LOF(ErrorDatei), ErrorDatei)
        Close ErrorDatei
    
    Sheets(1).Cells(27, 1) = "Beim Erstellen des BMEcat-Katalogs ist folgender Fehler aufgetreten: " & Chr(10) & Fehlertext
  '  Sheets(1).Cells(27, 1) = ""
        
    Else
      Sheets(1).Cells(27, 1) = "Fehler beim Generieren des Katalogs. Error-Log-Datei: " & Chr(10) & ErrorLog
    End If
        
' Fehler2:


End Sub


Function FileExists(Datei As String) As Boolean
FileExists = Dir(Datei) <> ""
'FileExists = System.IO.File.Exists(Datei)
End Function


Public Function brake_killer(ByRef x, freizeichen As String)
Dim gut_text As String, s As String, pos As Long
Dim y As String
s = Chr(13) + Chr(10)
pos = InStr(x, s)
If pos <> 0 Then
    Do Until pos = 0
        y = Len(x)
        x = Left(x, pos - 1) & freizeichen & Mid(x, pos + 2, y)
        pos = InStr(x, s)
     Loop
End If
' Zeilenumbruch UNIX entfernen
s = Chr(13)
pos = InStr(x, s)
If pos <> 0 Then
    Do Until pos = 0
        y = Len(x)
        x = Left(x, pos - 1) & freizeichen & Mid(x, pos + 1, y)
        pos = InStr(x, s)
     Loop
End If
' Zeilenumbruch MAC entfernen
s = Chr(10)
pos = InStr(x, s)
If pos <> 0 Then
    Do Until pos = 0
        y = Len(x)
        x = Left(x, pos - 1) & freizeichen & Mid(x, pos + 1, y)
        pos = InStr(x, s)
     Loop
End If
brake_killer = x
End Function

Private Sub Workbook_Open()
'If check_serial = False Then
  '  UserForm1.Show
'End If
End Sub


Function FileSize(File As String) As Long
    Dim Size As Long
    Size = FileLen(File)
    FileSize = IIf(Err = 0, Size, -1)
End Function

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{82E2C51C-8878-41F1-A5CD-17475BFD2139}{9482E8A1-AFE0-458D-8335-94B0A6D325F3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
SaveSetting "SBC", "SBCEXCEL", "LICENCEKEY", Me.TextBox1.Text
If ThisWorkbook.check_serial = False Then
    Me.TextBox1.Text = ""
    MsgBox "Lizenzschl|fffd|ssel nicht korrekt. Bitte erneut eingeben oder Demo-Modus w|fffd|hlen.", vbCritical
Else
    Me.Hide
End If

End Sub

Private Sub CommandButton2_Click()
Dim status As Boolean
status = ThisWorkbook.check_firstuse
Me.Hide
End Sub





INQUEST-PP=macro
