Attribute VB_Name = "BuyinDescriptionForm"
Attribute VB_Base = "0{AAA7DC6A-5E1A-4BC2-95AA-90582C2C7561}{53561C55-2216-43F0-BD2F-A047182DEFC3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub OKButton_Click()

' Close form
Unload Me

' Display status form
With MoproProgressForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub

Private Sub OptionDescription_Click()

' Set buyinfield value
buyinFields = "DESC"

End Sub

Private Sub OptionTSC_Click()

' Set buyinfield value
buyinFields = "TSC"

End Sub

Private Sub UserForm_Initialize()

' Set default option
BuyinDescriptionForm.OptionTSC.Value = True
buyinFields = "TSC"

' Set focus on OK button
OKButton.SetFocus

End Sub
Attribute VB_Name = "Config"
' Global variables
Public ConfigQuoteLineNum As Integer
Public templateVersion As String
Public webServicesURL As String
Public authInput As String
Public xlsDownloadLink As String
Public buyinFields As String

Sub LoadConfig()

' XLSQUOTEAPI Configuration

' Spreadsheet Version - This needs to be updated each release!
templateVersion = "1.3"

' API Key
Dim apiKey As String
apiKey = "xLJm1PCcFTbUTaB"

' API URL
Dim apiURL As String
apiURL = "https://xlsquote.int.bgwgroup.com.au/api.php"

' Dont change below
webServicesURL = apiURL & "?key=" & apiKey & Format(Now, "YYYYMMDD")

End Sub

Attribute VB_Name = "DisplayInfo"
Sub ShowInfo_Click()

' Display info
With InfoForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub

Attribute VB_Name = "EmailPDF"

Sub SendPDFQuote_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetPDF "customer_quote", "quote"
    
End Sub

Sub SendPDFExpeditor_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetPDF "expeditor", "expeditor worksheet"
    
End Sub

Sub SendPDFLeadTimes_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetPDF "lead_times", "lead times"
    
End Sub

Sub AttachActiveSheetPDF(sourceWorksheet As String, typeOfWorksheet As String)

' Check value worksheet vs quotation
If QuoteValueOut() = 2 Then
    MsgBox "Quote is missing information!", 0, "Error!"
    Exit Sub
End If
If QuoteValueOut() = 1 Then
    ' Prompt user
    intMessage = MsgBox("The difference between worksheet and quotation is over $10!" & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

' Check for freight
If CheckForFreight() = False Then
    ' Prompt user
    intMessage = MsgBox("Cannot see a line for Freight." & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

Dim IsCreated As Boolean
Dim i As Long
Dim PdfFile As String
Dim OutlApp As Object
Dim statusMsg As String
 
' Define PDF filename
PdfFile = Range("B6").Value & "_" & UCase(typeOfWorksheet) & "_" & Range("P10").Value
i = InStrRev(PdfFile, ".")
If i > 1 Then PdfFile = Left(PdfFile, i - 1)
PdfFile = Application.ActiveWorkbook.Path & "\" & PdfFile & ".pdf"
 
' Export activesheet as PDF
With ActiveSheet
    .PageSetup.PrintArea = sourceWorksheet
    .PageSetup.Zoom = False
    .PageSetup.FitToPagesTall = False
    .PageSetup.FitToPagesWide = 1
    .ExportAsFixedFormat Type:=xlTypePDF, Filename:=PdfFile, Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
End With

' Use already open Outlook if possible
On Error Resume Next
Set OutlApp = GetObject(, "Outlook.Application")
If err Then
    Set OutlApp = CreateObject("Outlook.Application")
    IsCreated = True
End If
OutlApp.Visible = True
On Error GoTo 0
    
' Prepare e-mail with PDF attachment
With OutlApp.CreateItem(0)
    .Subject = Range("H15").Value & " - " & UCase(typeOfWorksheet)
    .Body = "Hi " & Range("B12").Value & "," & vbLf & vbLf _
             & "Please see attached PDF " & typeOfWorksheet & "." & vbLf & vbLf _
             & "Kind Regards," & vbLf & vbLf _
             & Application.UserName & vbLf & vbLf _
             & Range("K4") & vbLf _
             & "P: " & Range("K6").Value & vbLf _
             & "F: " & Range("K7").Value & vbLf _
             & "A: " & Range("K8").Value & vbLf
    .Attachments.Add PdfFile
      
    ' Try to display email
    On Error Resume Next
    .Display
    Application.Visible = True
    If err Then
        MsgBox "Error trying to compose e-mail in outlook.", vbExclamation
    End If
    On Error GoTo 0
End With

' Delete PDF file
Kill PdfFile
    
' Release memory
Set OutlApp = Nothing
 
End Sub
Attribute VB_Name = "EmailWorksheet"

Sub SendXLSQuote_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetXLS "customer_quote", "quote"
    
End Sub

Sub SendXLSExpeditor_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetXLS "expeditor", "expeditor worksheet"
    
End Sub

Sub SendXLSLeadTimes_Click()

' Save file first
ActiveWorkbook.Save
' Send as PDF
AttachActiveSheetXLS "lead_times", "lead times"
    
End Sub

Sub AttachActiveSheetXLS(sourceWorksheet As String, typeOfWorksheet As String)

' Check value worksheet vs quotation
If QuoteValueOut() = 2 Then
    MsgBox "Quote is missing information!", 0, "Error!"
    Exit Sub
End If
If QuoteValueOut() = 1 Then
    ' Prompt user
    intMessage = MsgBox("The difference between worksheet and quotation is over $10!" & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

' Check for freight
If CheckForFreight() = False Then
    ' Prompt user
    intMessage = MsgBox("Cannot see a line for Freight." & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

Dim IsCreated As Boolean
Dim i As Long
Dim PdfFile As String
Dim OutlApp As Object
Dim statusMsg As String
Dim SourceSheet As Worksheet
Dim Source As Range
Dim Dest As Workbook
 
' Define XLS filename
If Val(Application.Version) < 12 Then
    'You use Excel 97-2003
    FileExtStr = ".xls": FileFormatNum = -4143
Else
    'You use Excel 2007-2016
    FileExtStr = ".xlsx": FileFormatNum = 51
End If
XlsFile = Range("B6").Value & "_" & UCase(typeOfWorksheet) & "_" & Range("P10").Value & FileExtStr

Application.CutCopyMode = False

Set SourceSheet = ActiveSheet
ActiveSheet.PageSetup.PrintArea = sourceWorksheet
Set Source = Range(ActiveSheet.PageSetup.PrintArea)
Set Dest = Workbooks.Add(xlWBATWorksheet)

' Copy over content
Source.SpecialCells(xlCellTypeVisible).Copy
With Dest.Sheets(1)
    .Cells(1).PasteSpecial Paste:=8
    .Cells(1).PasteSpecial Paste:=xlPasteValues
    .Cells(1).PasteSpecial Paste:=xlPasteFormats
    .Cells(1).Select
End With

' Copy over logo image
If SourceSheet.Pictures.Count > 0 Then
    SourceSheet.Pictures("Picture 1").CopyPicture
    Dest.Sheets(1).Range("E1").Select
    Dest.Sheets(1).Paste
    
    ' Wait 1 sec, so status form displays content properly
    Application.Wait (Now + TimeValue("0:00:01"))
    
    ' Resize Logo Image
    Dim logoImage As Picture
    Dim logoImageRng As Range
    Set logoImage = Dest.Sheets(1).Pictures("Picture 1")
    Set logoImageRng = Dest.Sheets(1).Range("E1:F7")
    With logoImage
        .ShapeRange.LockAspectRatio = msoTrue
        .Width = logoImageRng.Width
        .Height = logoImageRng.Height * 0.95
        .Top = logoImageRng.Top + (logoImageRng.Height - .Height) / 2
        .Left = logoImageRng.Left + (logoImageRng.Width - .Width) / 2
    End With
    
End If

' Save XLS File
Dest.SaveAs XlsFile
Dest.Close

' Use already open Outlook if possible
On Error Resume Next
Set OutlApp = GetObject(, "Outlook.Application")
If err Then
    Set OutlApp = CreateObject("Outlook.Application")
    IsCreated = True
End If
OutlApp.Visible = True
On Error GoTo 0
    
' Prepare e-mail with XLS attachment
With OutlApp.CreateItem(0)
    .Subject = Range("H15").Value & " - " & UCase(typeOfWorksheet)
    .Body = "Hi " & Range("B12").Value & "," & vbLf & vbLf _
             & "Please see attached XLS " & typeOfWorksheet & "." & vbLf & vbLf _
             & "Kind Regards," & vbLf & vbLf _
             & Application.UserName & vbLf & vbLf _
             & Range("K4") & vbLf _
             & "P: " & Range("K6").Value & vbLf _
             & "F: " & Range("K7").Value & vbLf _
             & "A: " & Range("K8").Value & vbLf
    .Attachments.Add XlsFile
      
    ' Try to display email
    On Error Resume Next
    .Display
    Application.Visible = True
    If err Then
        MsgBox "Error trying to compose e-mail in outlook.", vbExclamation
    End If
    On Error GoTo 0
End With

' Delete XLS file
Kill XlsFile
    
' Release memory
Set OutlApp = Nothing
 
End Sub
Attribute VB_Name = "GeneralFunctions"

Public Function ADUserDetail(myattrib As String)

Set rootDSE = GetObject("LDAP://RootDSE")
Base = "<LDAP://" & rootDSE.Get("defaultNamingContext") & ">"

fltr = "(&(objectClass=user)(objectCategory=Person)"
fltr = fltr & "(sAMAccountName=" & Environ("username") & "))"

Set conn = CreateObject("ADODB.Connection")
conn.Provider = "ADsDSOObject"
conn.Open "Active Directory Provider"

Set cmd = CreateObject("ADODB.Command")
Set cmd.ActiveConnection = conn
cmd.CommandText = Base & ";" & fltr & ";" & myattrib & ";" & "subtree"

Set rs = cmd.Execute

If Not rs.EOF Then
    For Each f In rs.Fields
        Debug.Print f.Name & ": " & f.Value
    Next f
    ADUserDetail = rs.Fields(myattrib).Value
End If

rs.Close
conn.Close

End Function

Function GetNumeric(CellRef As String)

Dim StringLength As Integer
StringLength = Len(CellRef)
    
For i = 1 To StringLength
    If IsNumeric(Mid(CellRef, i, 1)) Then Result = Result & Mid(CellRef, i, 1)
Next i
    
GetNumeric = Result
    
End Function

Function QuoteValueOut() As Integer

Dim rowNum As Integer, finalRow As Integer, totalRows As Integer, checkRow As Integer
' Quote lines start at row 19
rowNum = 19
        
    Do While Range("A" & rowNum).Value <> ""
        rowNum = rowNum + 1
    Loop
        
    finalRow = rowNum
    rowNum = 19
    totalRows = finalRow - rowNum
    checkRow = totalRows + 250
    
    If IsError(Range("O" & checkRow)) Then
        QuoteValueOut = 2
    ElseIf Range("O" & checkRow).Value > 10 Then
        QuoteValueOut = 1
    Else
        QuoteValueOut = 0
    End If
        
End Function

Function CheckForFreight() As Boolean

    Dim rowNum As Integer, finalRow As Integer, foundCodes As Integer
    ' Quote lines start at row 19
    rowNum = 19
        
    Do While Range("A" & rowNum).Value <> ""
        rowNum = rowNum + 1
    Loop
        
    finalRow = rowNum
    rowNum = 19
    
    ' Check Mopro part code range for FREIGHT string
    foundCodes = Application.CountIf(Range("$D$" & rowNum & ":$D$" & finalRow), "*FREIGHT*")

    If foundCodes > 0 Then
        CheckForFreight = True
    Else
        CheckForFreight = False
    End If

End Function
Attribute VB_Name = "InfoForm"
Attribute VB_Base = "0{63CE36D5-B7D1-4605-9A02-7B1BBDCDB79B}{3D7A2DFE-B730-4F83-B2B1-4A0F6D543765}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub DownloadButton_Click()

' Download file
Set objShell = CreateObject("Wscript.Shell")
objShell.Run (xlsDownloadLink)
Set objShell = Nothing

End Sub

Private Sub OKButton_Click()

' Close form
Unload Me

End Sub

Private Sub UserForm_Initialize()

On Error GoTo CleanExit

' Load config
Call LoadConfig

' Set version
InfoForm.VersionText.Caption = templateVersion

' Check the web for updates
Dim http As Object, JSON As Object
Set http = CreateObject("MSXML2.XMLHTTP")
http.Open "GET", webServicesURL & "&reqtype=checkversion", False
http.setRequestHeader "Cache-Control", "no-cache"
http.setRequestHeader "Pragma", "no-cache"
http.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
http.Send
Set JSON = ParseJson(http.responseText)

If JSON("changelog") <> "" Then
    InfoForm.ChangeLogText.Value = Replace(JSON("changelog"), "CRLF", vbNewLine)
Else
    InfoForm.ChangeLogText.Value = "Error: Could not contact quote web service! Ensure you have a network connection established with the company network."
End If

' Compare JSON response with version, show download option if required
If JSON("version") <> "" And JSON("version") <> templateVersion Then
    InfoForm.VersionText.Caption = templateVersion & "    (Note: Version " & JSON("version") & " is available for download)"
    InfoForm.DownloadButton.Visible = True
    xlsDownloadLink = JSON("downloadlink")
End If

CleanExit:
    Set http = Nothing
    Set JSON = Nothing

' Setting focus will display scroll bar if required on load
InfoForm.ChangeLogText.SetFocus
InfoForm.ChangeLogText.SelStart = 0

End Sub
Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v2.3.0
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' === VBA-UTC Headers
#If Mac Then

#If VBA7 Then

' 64-bit Mac (2016)
Private Declare PtrSafe Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As LongPtr
Private Declare PtrSafe Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As LongPtr, ByVal utc_Number As LongPtr, ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As LongPtr) As LongPtr

#Else

' 32-bit Mac
Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#End If

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

#If VBA7 Then
Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As LongPtr
End Type

#Else

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#End If

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal JsonString As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    JsonString = VBA.Replace(VBA.Replace(VBA.Replace(JsonString, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")

    json_SkipSpaces JsonString, json_Index
    Select Case VBA.Mid$(JsonString, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(JsonString, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(JsonString, json_Index)
    Case Else
        ' Error: Invalid JSON string
        err.Raise 10001, "JSONConverter", json_ParseErrorMessage(JsonString, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} JsonValue (Dictionary, Collection, or Array)
' @param {Integer|String} Whitespace "Pretty" print json with given number of spaces per indentation (Integer) or given string
' @return {String}
''
Public Function ConvertToJson(ByVal JsonValue As Variant, Optional ByVal Whitespace As Variant, Optional ByVal json_CurrentIndentation As Long = 0) As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    Dim json_Converted As String
    Dim json_SkipItem As Boolean
    Dim json_PrettyPrint As Boolean
    Dim json_Indentation As String
    Dim json_InnerIndentation As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True
    json_PrettyPrint = Not IsMissing(Whitespace)

    Select Case VBA.VarType(JsonValue)
    Case VBA.vbNull
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(JsonValue))

        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(JsonValue) Then
            ConvertToJson = JsonValue
        Else
            ConvertToJson = """" & json_Encode(JsonValue) & """"
        End If
    Case VBA.vbBoolean
        If JsonValue Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
                json_InnerIndentation = VBA.String$(json_CurrentIndentation + 2, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
                json_InnerIndentation = VBA.Space$((json_CurrentIndentation + 2) * Whitespace)
            End If
        End If

        ' Array
        json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(JsonValue, 1)
        json_UBound = UBound(JsonValue, 1)
        json_LBound2D = LBound(JsonValue, 2)
        json_UBound2D = UBound(JsonValue, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    ' Append comma to previous line
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    ' 2D Array
                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If
                    json_BufferAppend json_Buffer, json_Indentation & "[", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                        End If

                        json_Converted = ConvertToJson(JsonValue(json_Index, json_Index2D), Whitespace, json_CurrentIndentation + 2)

                        ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                        If json_Converted = "" Then
                            ' (nest to only check if converted = "")
                            If json_IsUndefined(JsonValue(json_Index, json_Index2D)) Then
                                json_Converted = "null"
                            End If
                        End If

                        If json_PrettyPrint Then
                            json_Converted = vbNewLine & json_InnerIndentation & json_Converted
                        End If

                        json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If

                    json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    ' 1D Array
                    json_Converted = ConvertToJson(JsonValue(json_Index), Whitespace, json_CurrentIndentation + 1)

                    ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                    If json_Converted = "" Then
                        ' (nest to only check if converted = "")
                        If json_IsUndefined(JsonValue(json_Index)) Then
                            json_Converted = "null"
                        End If
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        If json_PrettyPrint Then
            json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
            Else
                json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
            End If
        End If

        json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)

    ' Dictionary or Collection
    Case VBA.vbObject
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
            End If
        End If

        ' Dictionary
        If VBA.TypeName(JsonValue) = "Dictionary" Then
            json_BufferAppend json_Buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In JsonValue.Keys
                ' For Objects, undefined (Empty/Nothing) is not added to object
                json_Converted = ConvertToJson(JsonValue(json_Key), Whitespace, json_CurrentIndentation + 1)
                If json_Converted = "" Then
                    json_SkipItem = json_IsUndefined(JsonValue(json_Key))
                Else
                    json_SkipItem = False
                End If

                If Not json_SkipItem Then
                    If json_IsFirstItem Then
                        json_IsFirstItem = False
                    Else
                        json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & """" & json_Key & """: " & json_Converted
                    Else
                        json_Converted = """" & json_Key & """:" & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Key

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "}", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(JsonValue) = "Collection" Then
            json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In JsonValue
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_Converted = ConvertToJson(json_Value, Whitespace, json_CurrentIndentation + 1)

                ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                If json_Converted = "" Then
                    ' (nest to only check if converted = "")
                    If json_IsUndefined(json_Value) Then
                        json_Converted = "null"
                    End If
                End If

                If json_PrettyPrint Then
                    json_Converted = vbNewLine & json_Indentation & json_Converted
                End If

                json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
            Next json_Value

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)
    Case VBA.vbInteger, VBA.vbLong, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency, VBA.vbDecimal
        ' Number (use decimals for numbers)
        ConvertToJson = VBA.Replace(JsonValue, ",", ".")
    Case Else
        ' vbEmpty, vbError, vbDataObject, vbByte, vbUserDefinedType
        ' Use VBA's built-in to-string
        On Error Resume Next
        ConvertToJson = JsonValue
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.Add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_Buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_Buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_Buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_Buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_Buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_Buffer, VBA.ChrW(VBA.Val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_Buffer, json_BufferPosition)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    Dim json_IsLargeNumber As Boolean

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15/16 characters containing only numbers and decimal points -> Number
            ' (decimal doesn't factor into significant digit count, so if present check for 15 digits + decimal = 16)
            json_IsLargeNumber = IIf(InStr(json_Value, "."), Len(json_Value) >= 17, Len(json_Value) >= 16)
            If Not JsonOptions.UseDoubleForLargeNumbers And json_IsLargeNumber Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.Val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_IsUndefined(ByVal json_Value As Variant) As Boolean
    ' Empty / Nothing -> undefined
    Select Case VBA.VarType(json_Value)
    Case VBA.vbEmpty
        json_IsUndefined = True
    Case VBA.vbObject
        Select Case VBA.TypeName(json_Value)
        Case "Empty", "Nothing"
            json_IsUndefined = True
        End Select
    End Select
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, ", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_Buffer, json_BufferPosition)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_Buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Put "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp
    '
    ' and clsStringAppend from Philip Swannell
    ' https://github.com/VBA-tools/VBA-JSON/pull/82

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.Len(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunk
        ' (double buffer length or append length, whichever is bigger)
        Dim json_AddedLength As Long
        json_AddedLength = IIf(json_AppendLength > json_BufferLength, json_AppendLength, json_BufferLength)

        json_Buffer = json_Buffer & VBA.Space$(json_AddedLength)
        json_BufferLength = json_BufferLength + json_AddedLength
    End If

    ' Note: Namespacing with VBA.Mid$ doesn't work properly here, throwing compile error:
    ' Function call on left-hand side of assignment must return Variant or Object
    Mid$(json_Buffer, json_BufferPosition + 1, json_AppendLength) = CStr(json_Append)
    json_BufferPosition = json_BufferPosition + json_AppendLength
End Sub

Private Function json_BufferToString(ByRef json_Buffer As String, ByVal json_BufferPosition As Long) As String
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_Buffer, json_BufferPosition)
    End If
End Function

''
' VBA-UTC v1.0.5
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & err.Number & " - " & err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & err.Number & " - " & err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), Int(VBA.Val(utc_OffsetParts(2))))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), Int(VBA.Val(utc_TimeParts(2))))
        End Select

        ParseIso = ParseUtc(ParseIso)

        If utc_HasOffset Then
            ParseIso = ParseIso - utc_Offset
        End If
    End If

    Exit Function

utc_ErrorHandling:
    err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & err.Number & " - " & err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")

    Exit Function

utc_ErrorHandling:
    err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & err.Number & " - " & err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = "" Then
        err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
#If VBA7 Then
    Dim utc_File As LongPtr
    Dim utc_Read As LongPtr
#Else
    Dim utc_File As Long
    Dim utc_Read As Long
#End If

    Dim utc_Chunk As String

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = CLng(utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File))
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, CLng(utc_Read))
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = CLng(utc_pclose(utc_File))
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.Year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If
Attribute VB_Name = "LoginForm"
Attribute VB_Base = "0{166A13CC-6747-4C61-8A4E-075CD99A2D77}{E8204B53-888D-4196-B11F-C43487EE14CF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CancelButton_Click()

' Close form
Unload Me

End Sub

Private Sub LoginOKButton_Click()

' Create authInput
authInput = PasswordTextBox.Value

' Close form
Unload Me

End Sub

Private Sub PasswordTextBox_Change()

' Enable OK button when password entered
Me.LoginOKButton.Enabled = Me.PasswordTextBox.Value <> ""

End Sub

Private Sub UserForm_Initialize()

' Reset authInput variable
authInput = ""

' Show current username
LoginForm.UsernameText.Caption = Environ("username")

End Sub
Attribute VB_Name = "MomentumPro"
Sub UploadToMopro_Click()

' Check if quote already uploaded to Mopro
If Range("P12").Value <> "" Then
    intMessage = MsgBox("It appears this quote has already been uploaded " & vbCr _
            & "to Momentum Pro (See Quote No: " & Range("P12").Value & ")" & vbCr _
            & vbCr _
            & "Re-uploading the quote will create a new quote." & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

' Check for required quote header detail
If Range("B8").Value = "" Then
    ActiveSheet.Range("B8").Select
    MsgBox "Cannot submit to Mopro." & vbCr & "- Missing customer acc no", 0, "Missing Data"
    Exit Sub
End If
If Range("H15").Value = "" Then
    ActiveSheet.Range("H15").Select
    MsgBox "Cannot submit to Mopro." & vbCr & "- Project Name/Reference", 0, "Missing Data"
    Exit Sub
End If

' Check for freight
If CheckForFreight() = False Then
    intMessage = MsgBox("Cannot see a line for Freight." & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

' Display buyin format form
With BuyinDescriptionForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub

Sub PushQuoteToMopro()

On Error GoTo CleanExit

' Load global config
Call LoadConfig

' Save file first
ActiveWorkbook.Save

' Find how many item rows in quote
Dim rowNum As Integer, finalRow As Integer, totalRows As Integer, pctCompl As Single

' Quote lines start at row 19
rowNum = 19
    
Do While Range("A" & rowNum).Value <> ""
    rowNum = rowNum + 1
Loop
    
finalRow = rowNum
rowNum = 19
totalRows = finalRow - rowNum

' Create quote header JSON
Dim newQuote As New Collection, quoteItem As New Dictionary, quoteSubItem As New Collection, quoteSubItemItems As New Dictionary
quoteItem("QuoteID") = Range("P10").Value
quoteItem("CustomerID") = Range("B8").Value
quoteItem("Reference") = Range("H15").Value
quoteItem("NumLines") = totalRows
quoteItem("Contact") = Range("B12").Value
quoteItem.Add "QuoteLine", quoteSubItem

' Check quote row data
Dim dataRequired As String
Dim lineDetail As String

Do While rowNum <> finalRow
    ' Check for Line Number
    If Range("B" & rowNum).Value = "" Then
        dataRequired = dataRequired & vbCr & "- Item Number"
        lineDetail = "spreadsheet row: " & rowNum
    End If
    ' Check for Mopro code
    If Range("D" & rowNum).Value = "" Then
        dataRequired = dataRequired & vbCr & "- Mopro Part Code"
    End If
    ' Check for Quantity
    If Range("E" & rowNum).Value = "" Then
        dataRequired = dataRequired & vbCr & "- Qty"
    End If
    ' Check for Description
    If buyinFields = "DESC" Then
        If Range("H" & rowNum).Value = "" Then
            dataRequired = dataRequired & vbCr & "- Description"
        End If
    Else
        If Range("C" & rowNum).Value = "" Then
            dataRequired = dataRequired & vbCr & "- Type"
        End If
        If Range("F" & rowNum).Value = "" Then
            dataRequired = dataRequired & vbCr & "- Supplier"
        End If
        If Range("G" & rowNum).Value = "" Then
            dataRequired = dataRequired & vbCr & "- Catalogue Number"
        End If
    End If
    ' Check for Per Unit
    If Range("J" & rowNum).Value = "" Then
        dataRequired = dataRequired & vbCr & "- Per Unit"
    End If
    ' Check for Unit Sell
    If Range("M" & rowNum).Value = "" Then
        dataRequired = dataRequired & vbCr & "- Unit Sell ExGst"
    End If
        
    ' If missing data, prompt user to fix and exit
    If dataRequired <> "" Then
        ' Close progress bar window
        Unload MoproProgressForm
        
        Rows(rowNum).Select
        If lineDetail = "" Then
            lineDetail = "quote item: " & Range("B" & rowNum).Value
        End If
        dataRequired = "Cannot submit to Mopro. Please review" & vbCr & lineDetail & vbCr & vbCr & "Missing the following:" & vbCr & dataRequired
        MsgBox dataRequired, 0, "Missing Data"
        Exit Sub
    Else
        ' Add quote line to JSON
        quoteSubItemItems("LineNumber") = Range("B" & rowNum).Value
        quoteSubItemItems("ProductID") = Range("D" & rowNum).Value
        quoteSubItemItems("Quantity") = Range("E" & rowNum).Value
        If buyinFields = "DESC" Then
            quoteSubItemItems("Description") = Application.Clean(Range("H" & rowNum).Value)
        Else
            quoteSubItemItems("Description") = Application.Clean(Range("C" & rowNum).Value & "-" & Range("F" & rowNum).Value & "-" & Range("G" & rowNum).Value)
        End If
        quoteSubItemItems("UnitCode") = Range("J" & rowNum).Value
        quoteSubItemItems("Price") = Range("M" & rowNum).Value
        quoteSubItem.Add quoteSubItemItems
        Set quoteSubItemItems = Nothing
    End If
      
    ' Update progress bar
    pctCompl = Application.RoundUp((100 / totalRows) * Range("B" & rowNum).Value, 0)
    ProgressWindow pctCompl
    
    ' Next row
    rowNum = rowNum + 1
Loop

' Close progress bar window
Unload MoproProgressForm

' Check value worksheet vs quotation
If QuoteValueOut() = 2 Then
    MsgBox "Quote is missing information!", 0, "Error!"
    Exit Sub
End If
If QuoteValueOut() = 1 Then
    intMessage = MsgBox("Difference between worksheet and quotation is over $10!" & vbCr _
            & vbCr _
            & "Do you want to continue?", _
            vbYesNo, "Warning!")
    
    If intMessage = vbNo Then
        Exit Sub
    End If
End If

' Display login form
With LoginForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

' Check we have auth content
If authInput = "" Then
    Exit Sub
End If

' Add hash to JSON
quoteItem("Auth") = authInput

' Write JSON
newQuote.Add quoteItem
Dim quoteJSON As String
quoteJSON = ConvertToJson(newQuote, Whitespace:=2)

' Send to API
Dim http As Object, responseJSON As Object
Set http = CreateObject("MSXML2.XMLHTTP")
http.Open "POST", webServicesURL & "&reqtype=addquote&userid=" & ADUserDetail("mail"), False
http.setRequestHeader "Content-type", "application/json"
http.setRequestHeader "Accept", "application/json"
http.Send (quoteJSON)
Set responseJSON = ParseJson(http.responseText)

' Check API JSON response
If responseJSON("success") = False Then
    MsgBox ("Quote failed to import into Mopro!" & vbCrLf & vbCrLf & "Reason: (" & responseJSON("error")("code") & ") " & responseJSON("error")("message")), 0, "Quote Web Service"
    Exit Sub
Else
    ' Update quote number
    Range("P12").Value = responseJSON("quotenumber")
    ' Save file again
    ActiveWorkbook.Save
    MsgBox ("Quote successfully imported into Mopro." & vbCrLf & vbCrLf & "MoPro Quote: " & responseJSON("quotenumber")), 0, "Quote Web Service"
End If

CleanExit:
    Unload MoproProgressForm
    Unload LoginForm
    Exit Sub
    
CleanFail:
    Unload MoproProgressForm
    Unload LoginForm
    MsgBox ("A runtime error occurred." & vbCrLf & "Please contact IT Systems Support"), 0, "Runtime Error"
    Exit Sub

End Sub

Sub ProgressWindow(pctCompl As Single)

MoproProgressForm.Text.Caption = pctCompl & "% Completed"
MoproProgressForm.Bar.Width = pctCompl * 2

DoEvents

End Sub

Attribute VB_Name = "MoproProgressForm"
Attribute VB_Base = "0{909092C0-0010-4CA4-988C-84ED782A4287}{7CE42AB8-0D9A-4BD8-B13C-3380399CB535}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

PushQuoteToMopro

End Sub
Attribute VB_Name = "PrintPreview"
Sub PrintInternalWorksheet_Click()

ActiveSheet.PageSetup.PrintArea = "worksheet"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True
    
End Sub


Sub PreviewInternalWorksheet_Click()

ActiveSheet.PageSetup.PrintArea = "worksheet"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveSheet.PrintPreview
    
End Sub

Sub PrintCustomerQuote_Click()

ActiveSheet.PageSetup.PrintArea = "customer_quote"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True
    
End Sub

Sub PreviewCustomerQuote_Click()

ActiveSheet.PageSetup.PrintArea = "customer_quote"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveSheet.PrintPreview
    
End Sub

Sub PrintExpeditorWorksheet_Click()
Attribute PrintExpeditorWorksheet_Click.VB_Description = "Macro recorded 6/03/2007 by Chris Dredge"
Attribute PrintExpeditorWorksheet_Click.VB_ProcData.VB_Invoke_Func = " \n14"

ActiveSheet.PageSetup.PrintArea = "expeditor"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True
    
End Sub

Sub PreviewExpeditorWorksheet_Click()

ActiveSheet.PageSetup.PrintArea = "expeditor"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveSheet.PrintPreview
    
End Sub

Sub PrintLeadTimes_Click()
Attribute PrintLeadTimes_Click.VB_Description = "Macro recorded 6/03/2007 by Chris Dredge"
Attribute PrintLeadTimes_Click.VB_ProcData.VB_Invoke_Func = " \n14"

ActiveSheet.PageSetup.PrintArea = "lead_times"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True
    
End Sub

Sub PreviewLeadTimes_Click()
    
ActiveSheet.PageSetup.PrintArea = "lead_times"
ActiveSheet.PageSetup.Zoom = False
ActiveSheet.PageSetup.FitToPagesTall = False
ActiveSheet.PageSetup.FitToPagesWide = 1
ActiveSheet.PrintPreview
    
End Sub
Attribute VB_Name = "QuoteLines"
Sub AddNewRow(rowNum)
  
' Insert new row below
Rows(rowNum + 1 & ":" & rowNum + 1).Insert Shift:=xlDown
    
' Copy & paste from original row
Rows(rowNum & ":" & rowNum).Copy
With Range("A" & rowNum + 1)
    .PasteSpecial xlPasteFormats
    .PasteSpecial xlPasteFormulas
End With

' Clear row content, but keep formulas
Range(rowNum + 1 & ":" & rowNum + 1).SpecialCells(xlCellTypeConstants).ClearContents
    
' Put default values
Range("I" & rowNum + 1).Value = "Y"
Range("J" & rowNum + 1).Value = "1"
    
' Copy "AddRow" hyperlink to new row
Range("A" & rowNum + 1).ClearContents
Range("A" & rowNum).Copy Range("A" & rowNum + 1)

End Sub

Sub ResetRows()

' Quote lines start at row 19
Dim rowNum As Integer
rowNum = 19
    
' Delete lines
Do While Range("A" & rowNum).Value <> ""
    rowNum = rowNum + 1
Loop
rowNum = rowNum - 1
If rowNum <> 19 Then
    Rows("20:" & rowNum).Delete
End If
    
' Insert new lines from first line
rowNum = 19
    
' Number of lines required
Dim rowsRequired As Integer
rowsRequired = ConfigQuoteLineNum
Dim finalRow As Integer
finalRow = rowNum + rowsRequired

' Insert new rows below
Rows(rowNum + 1 & ":" & rowNum + rowsRequired).Insert Shift:=xlDown
        
' Copy & paste from original row 19 to new rows
Rows(rowNum & ":" & rowNum).Copy
With Rows(rowNum + 1 & ":" & rowNum + rowsRequired)
    .PasteSpecial xlPasteFormats
    .PasteSpecial xlPasteFormulas
End With
    
' Clear row content, but keep formulas
Rows(rowNum + 1 & ":" & rowNum + rowsRequired).SpecialCells(xlCellTypeConstants).ClearContents
        
' Put default values
Range("I" & rowNum + 1 & ":" & "I" & rowNum + rowsRequired).Value = "Y"
Range("J" & rowNum + 1 & ":" & "J" & rowNum + rowsRequired).Value = "1"
        
' Copy "AddRow" hyperlink to new row
Range("A" & rowNum + 1 & ":" & "A" & finalRow).ClearContents
Do While rowNum <> finalRow
    Range("A" & rowNum).Copy Range("A" & rowNum + 1)
    rowNum = rowNum + 1
Loop
    
' Delete original row
Rows("19").Delete
    
End Sub

Attribute VB_Name = "ResetInputForm"
Attribute VB_Base = "0{D8E1FF18-2049-444B-8B4E-03F580B35185}{154D14C7-2EEE-4DEE-B3C8-70E752229609}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub AccountTextBox_Change()

' Only allow numeric input
If Not IsNumeric(AccountTextBox.Value) Then
    AccountTextBox.Value = ""
End If

End Sub

Private Sub AttentionTextBox_Change()

' Force uppercase
AttentionTextBox.Text = UCase(AttentionTextBox.Text)
    
End Sub

Private Sub CancelButton_Click()

' Close form
Unload Me

End Sub

Private Sub ClearButton_Click()

' Clear current data
CustomerTextBox.Value = ""
AccountTextBox.Value = ""
AttentionTextBox.Value = ""
ReferenceTextBox.Value = ""
QuoteNoTextBox.Value = ""
QuoteLinesTextBox = 10
DaysValidTextBox.Value = 30

End Sub

Private Sub CustomerTextBox_Change()

' Force uppercase
CustomerTextBox.Text = UCase(CustomerTextBox.Text)
    
End Sub

Private Sub DaysValidTextBox_Change()

' Validate quote days entered
If IsNumeric(DaysValidTextBox.Value) Then
    If DaysValidTextBox.Value > 90 Then
        DaysValidTextBox.Value = 90
    End If
Else
    DaysValidTextBox.Value = ""
End If

End Sub


Private Sub OKButton_Click()

' Set cell values
Range("B6").Value = CustomerTextBox.Value
Range("B8").Value = AccountTextBox.Value
Range("B12").Value = AttentionTextBox.Value
Range("H15").Value = ReferenceTextBox.Value
Range("P10").Value = QuoteNoTextBox.Value

' Days Valid is mandatory, if nothing default to 30
If DaysValidTextBox.Value = "" Then
    DaysValidTextBox.Value = 30
End If
Range("H11").Value = DaysValidTextBox.Value & " Days"

' Quote Lines is mandatory, if nothing default to 10
If QuoteLinesTextBox.Value = "" Then
    QuoteLinesTextBox.Value = 10
End If
ConfigQuoteLineNum = QuoteLinesTextBox.Value

' Close form
Unload Me

' Display status form
With ResetStatusForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub

Private Sub QuoteLinesTextBox_Change()

' Validate quote lines entered
If IsNumeric(QuoteLinesTextBox.Value) Then
    If QuoteLinesTextBox.Value > 1000 Then
        QuoteLinesTextBox.Value = 1000
    End If
    If QuoteLinesTextBox.Value < 0 Then
        QuoteLinesTextBox.Value = QuoteLinesTextBox.Value * -1
    End If
    If QuoteLinesTextBox.Value = 0 Then
        QuoteLinesTextBox.Value = 10
    End If
Else
    QuoteLinesTextBox.Value = ""
End If

End Sub

Private Sub QuoteNoTextBox_Change()

' Force uppercase
QuoteNoTextBox.Text = UCase(QuoteNoTextBox.Text)
    
End Sub

Private Sub ReferenceTextBox_Change()

' Force uppercase
ReferenceTextBox.Text = UCase(ReferenceTextBox.Text)
    
End Sub

Private Sub UserForm_Initialize()

' Preload with current data
CustomerTextBox.Value = Range("B6").Value
AccountTextBox.Value = Range("B8").Value
AttentionTextBox.Value = Range("B12").Value
ReferenceTextBox.Value = Range("H15").Value
QuoteNoTextBox.Value = Range("P10").Value

' Check for new sheet flag
If Range("A1").Value <> "" Then
    ResetInputForm.CancelButton.Visible = False
End If

'Set Focus
CustomerTextBox.SetFocus

End Sub
Attribute VB_Name = "ResetSheet"
Sub ResetWorksheet_Click()

' Display status form
With ResetInputForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub

Sub ResetWorksheetMain()

On Error GoTo CleanFail

' Load global config
Call LoadConfig

' Reset Quote Lines
Dim statusMsg As String
statusMsg = "Setting Quote Lines..."
statuswindow statusMsg
Call ResetRows

' Check if AD lookup returned data
statusMsg = "Connecting to Active Directory..."
statuswindow statusMsg
If ADUserDetail("mail") = "" Then
    Unload ResetStatusForm
    MsgBox ("Error: Unable to determine user details" & vbCrLf & "Please contact IT Systems Support"), 0, "AD User Detail"
    Exit Sub
Else
    ' Hit up API for details
    statusMsg = "Connecting to web service..."
    statuswindow statusMsg
    Dim http As Object, JSON As Object
    Set http = CreateObject("MSXML2.XMLHTTP")
    http.Open "GET", webServicesURL & "&reqtype=userdetail&userid=" & ADUserDetail("mail"), False
    http.setRequestHeader "Cache-Control", "no-cache"
    http.setRequestHeader "Pragma", "no-cache"
    http.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
    http.Send
    Set JSON = ParseJson(http.responseText)
End If

' Check API JSON response
If JSON("success") = False Then
    Unload ResetStatusForm
    MsgBox ("Error: (" & JSON("error")("code") & ") " & JSON("error")("message") & vbCrLf & "Please contact IT Systems Support"), 0, "Quote Web Service"
    Exit Sub
End If

' Update logos
statusMsg = "Attemping to update logos..."
statuswindow statusMsg
ActiveSheet.Pictures.Delete
Dim logoImage As Picture
Dim logoImageRng As Range
Dim logoCell(1 To 4) As String
logoCell(1) = "BB3:BC9"
logoCell(2) = "AL3:AM9"
logoCell(3) = "Z3:AA9"
logoCell(4) = "G3:H9"
For i = 1 To 4
    Set logoImageRng = ActiveSheet.Range(logoCell(i))
    logoImageRng.Select
    Set logoImage = ActiveSheet.Pictures.Insert(JSON("logo"))
    With logoImage
        .ShapeRange.LockAspectRatio = msoTrue
        .Width = logoImageRng.Width
        .Height = logoImageRng.Height * 0.95
        .Top = logoImageRng.Top + (logoImageRng.Height - .Height) / 2
        .Left = logoImageRng.Left + (logoImageRng.Width - .Width) / 2
    End With
Next i

' Update user & branch details
statusMsg = "Updating branch details..."
statuswindow statusMsg
Range("K4").Value = JSON("branch_name")
Range("K5").Value = ADUserDetail("displayName")
Range("K6").Value = JSON("branch_phone")
Range("K7").Value = JSON("branch_fax")
Range("K9").Value = JSON("branch_email")
Range("P12").Value = ""

' Construct branch address
Dim branchAddress As String
branchAddress = ""
If JSON("branch_address1") <> "" Then
    branchAddress = JSON("branch_address1")
End If
If JSON("branch_address2") <> "" Then
    If branchAddress <> "" Then
        branchAddress = branchAddress & ", " & JSON("branch_address2")
    Else
        branchAddress = JSON("branch_address2")
    End If
End If
If JSON("branch_city") <> "" Then
    If branchAddress <> "" Then
        branchAddress = branchAddress & ", " & JSON("branch_city")
    Else
        branchAddress = JSON("branch_city")
    End If
End If
If JSON("branch_state") <> "" Then
    If branchAddress <> "" Then
        branchAddress = branchAddress & ", " & JSON("branch_state")
    Else
        branchAddress = JSON("branch_state")
    End If
End If
If JSON("branch_postcode") <> "" Then
    If branchAddress <> "" Then
        branchAddress = branchAddress & " " & JSON("branch_postcode")
    Else
        branchAddress = JSON("branch_postcode")
    End If
End If
Range("K8").Value = branchAddress

' Set focus to customer field
ActiveSheet.Range("B6").Select
Unload ResetStatusForm

' Clear new sheet flag
Range("A1").Value = ""

CleanExit:
    Unload ResetStatusForm
    Exit Sub
    
CleanFail:
    Unload ResetStatusForm
    MsgBox ("A runtime error occurred." & vbCrLf & "Please contact IT Systems Support"), 0, "Runtime Error"
    Exit Sub
    
End Sub

Sub statuswindow(statusMsg As String)

' Update status form text
ResetStatusForm.StatusText.Caption = statusMsg

DoEvents

End Sub

Attribute VB_Name = "ResetStatusForm"
Attribute VB_Base = "0{15F174A3-C848-417D-B151-4C7A799C3355}{19FFEC83-63A3-47B7-938F-5F294CF14B31}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

ResetWorksheetMain

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

    Call AddNewRow(Target.Range.Row)
    
End Sub
Attribute VB_Name = "StartupCheck"
Sub StartupCheckMain()

On Error GoTo CleanExit

' Check if using on company computer, if not exit (some basic form of protection)
Set wshNetwork = CreateObject("WScript.Network")
If wshNetwork.UserDomain <> "INTBGW" Then
    Application.DisplayAlerts = False
    ThisWorkbook.Saved = False
    Application.Quit
End If

' Wait 1 sec, so status form displays content properly
Application.Wait (Now + TimeValue("0:00:01"))

' Check the web for updates
Dim http As Object, JSON As Object
Set http = CreateObject("MSXML2.XMLHTTP")
http.Open "GET", webServicesURL & "&reqtype=checkversion", False
http.setRequestHeader "Cache-Control", "no-cache"
http.setRequestHeader "Pragma", "no-cache"
http.setRequestHeader "If-Modified-Since", "Sat, 1 Jan 2000 00:00:00 GMT"
http.Send
Set JSON = ParseJson(http.responseText)

' Close status form
Unload StartupStatusForm

' Compare JSON response with version, prompt for update if required
If JSON("version") <> "" And JSON("version") <> templateVersion Then
    intMessage = MsgBox("This spreadsheet is out-of-date" & vbCr _
            & vbCr _
            & "Would you like to download the new version?", _
            vbYesNo, "New Version Available!")
    
    If intMessage = vbYes Then
        Set objShell = CreateObject("Wscript.Shell")
        objShell.Run (JSON("downloadlink"))
        Set objShell = Nothing
    End If
End If

CleanExit:
    Unload StartupStatusForm
    Set http = Nothing
    Set JSON = Nothing
    Set wshNetwork = Nothing

If Range("A1").Value <> "" Then
    Call ResetWorksheet_Click
End If

End Sub
Attribute VB_Name = "StartupStatusForm"
Attribute VB_Base = "0{C87F9C6D-AD31-429B-BF35-1B9F32153903}{D533D15D-6E56-4750-B67E-61852000C0A4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

StartupCheckMain

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

' Lock worksheet
'ActiveWorkbook.Protect Password:="abc123", Structure:=True

' Load global config
Call LoadConfig

' Display status form
With StartupStatusForm
  .StartUpPosition = 0
  .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
  .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
  .Show
End With

End Sub


' InQuest injected base64 decoded content
' K+-zd
' xZ+-

INQUEST-PP=macro
