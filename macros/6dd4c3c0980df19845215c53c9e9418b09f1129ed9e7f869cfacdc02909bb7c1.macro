Attribute VB_Name = "ColumnWidthAdjust"
Option Explicit

Public c1Width As Integer, c2Width As Integer, c3Width As Integer, c4Width As Integer, c5Width As Integer
Public lstBoxWdth As Integer
Dim i As Integer
Public xmove As Single, x As Single
Public colSize(1 To 5) '---->change last number to match total number of columns
Public UF As UserForm, LB As Control

Public Sub setWidths()
    With LB
        .Width = lstBoxWdth
    '---->add or subtract columns as needed
        .ColumnWidths = colSize(1) & ";" & colSize(2) & ";" & colSize(3) & ";" & colSize(4) & ";" & colSize(5)
    End With
End Sub

Public Sub adjWidth(xmove As Single, x As Single, c As Integer)
With UF
'Left mouse button pressed, moved right
    If xmove < x And .Controls("c" & UBound(colSize)).Left < LB.Width + LB.Left Then
    'move labels right
        For i = c To UBound(colSize) - 1   'target column to last column
            .Controls("WdthAdj" & i).Left = .Controls("WdthAdj" & i).Left + 1
            .Controls("c" & i + 1).Left = .Controls("c" & i + 1).Left + 1
        Next i
    'increase width of label for target column
        .Controls("c" & c).Width = .Controls("c" & c).Width + 1
    'keep last column label from running off form
        If .Controls("c" & UBound(colSize)).Width > 1 Then .Controls("c" & UBound(colSize)).Width = LB.Width + LB.Left - .Controls("c" & UBound(colSize)).Left
    'reset column widths
        colSize(c) = colSize(c) + 1
        If .Controls("c" & UBound(colSize)).Width <= 1 Then
            colSize(UBound(colSize)) = 0
        Else: colSize(UBound(colSize)) = colSize(UBound(colSize)) - 1
        End If
        setWidths
    End If

'Left mouse button pressed, moved left
    If xmove > x And .Controls("c" & c).Width > 0 Then
  'move labels left
        For i = c To UBound(colSize) - 1   'target column to last column
            .Controls("WdthAdj" & i).Left = .Controls("WdthAdj" & i).Left - 1
            .Controls("c" & i + 1).Left = .Controls("c" & i + 1).Left - 1
        Next i
    'decrease width of label for target column
        .Controls("c" & c).Width = .Controls("c" & c).Width - 1
    'keep last column label from running off form
        If .Controls("c" & UBound(colSize)).Width > 0 Then .Controls("c" & UBound(colSize)).Width = LB.Width + LB.Left - .Controls("c" & UBound(colSize)).Left
    'reset column widths
        colSize(c) = colSize(c) - 1
        colSize(UBound(colSize)) = colSize(UBound(colSize)) + 1
        setWidths
    End If
End With
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{F358FFB9-0144-45FC-8EBC-6E5F53F78D2E}{9C678D53-7436-4567-9A6E-7893CC0143B9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim i As Integer

Sub Userform_Initialize()

Set LB = Me.ListBox1 '---->change to final listbox name
Set UF = Me
    
    With LB
        .RowSource = "A1: E16" '---->delete or modify as needed
        .ColumnCount = UBound(colSize)
        lstBoxWdth = .Width
        c1.Left = .Left
    End With
    
'---->add or subtract columns and adjust initial widths as needed
    colSize(1) = 40
    colSize(2) = 51
    colSize(3) = 51
    colSize(4) = 51
    colSize(5) = 51
    
'set column label widths to match column widths
    For i = LBound(colSize) To UBound(colSize)
        Controls("c" & i).Width = colSize(i)
        If i < UBound(colSize) Then
            Controls("WdthAdj" & i).Left = Controls("c" & i).Left + Controls("c" & i).Width - 4
            Controls("c" & i + 1).Left = Controls("c" & i).Left + Controls("c" & i).Width
        End If
    Next i
    
    Controls("c" & UBound(colSize)).Width = LB.Width + LB.Left - Controls("c" & UBound(colSize)).Left
    
    setWidths
    
End Sub

'---->add or subtract subs to match number of adjustable columns in listbox

Private Sub WdthAdj1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single) 'Adjust column 1 width
'Left mouse button pressed
    If Button = 1 Then
        adjWidth xmove, x, 1 '---->change number to match adjustable column number
    End If
End Sub

Private Sub WdthAdj2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single) 'Adjust column 2 width
'Left mouse button pressed
    If Button = 1 Then
        adjWidth xmove, x, 2 '---->change number to match adjustable column number
    End If
End Sub

Private Sub WdthAdj3_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single) 'Adjust column 3 width
'Left mouse button pressed
    If Button = 1 Then
        adjWidth xmove, x, 3 '---->change number to match adjustable column number
    End If
End Sub

Private Sub WdthAdj4_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single) 'Adjust column 4 width
'Left mouse button pressed
    If Button = 1 Then
        adjWidth xmove, x, 4 '---->change number to match adjustable column number
    End If
End Sub




INQUEST-PP=macro
