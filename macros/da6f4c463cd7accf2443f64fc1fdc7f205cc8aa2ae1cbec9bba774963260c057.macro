Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim oWS

Sub ShowAll()

    '------------------------------------
    '   This module
    '       Unprotects the workbook and
    '       Unprotects all worksheet
    '       Makes each worksheet visible
    '       And ends up on the 52723 tab
    '------------------------------------
    'Call AssignSheetReferences
    
    ActiveWorkbook.Unprotect (strPSWD)
    For Each oWS In ActiveWorkbook.Worksheets
        If oWS.Name <> "Blank" Then
            oWS.Unprotect (strPSWD)
            oWS.Visible = True
        End If
    Next
    o52723.Unprotect (strPSWD)
    o52723.Select
    
End Sub

Private Sub Workbook_Open()
    
    '----------------------------
    '   Added 2012-03-20
    '----------------------------
    With Sheets("52723")
        .Unprotect strPSWD
        .Cells.Locked = True
        .CBoxAmps.Enabled = True
        .Protect strPSWD
    End With
       
    '------------------------------------------
    '   Runs EVERY time this workbook is opened
    '------------------------------------------
    Call SetUpOnOpen
    Application.ScreenUpdating = True
    Call DisableMenusCommandBars
End Sub

Sub SetUpOnOpen()
    
    '------------------------------------------------------------
    '   Since this workbook can be either the 'web' based file or
    '   a user created PHA file, we call AssignSheetReferences.
    '   This determines the type of tool and defines strWebOrNot.
    '------------------------------------------------------------
    
    Application.ScreenUpdating = False
    Call AssignSheetReferences
    
    blnSkipUpdate = False
    bCloseWorkbook = False
    
    Dim intLRPHA As Integer
    Dim intLR As Integer

     If strWebOrNot = "PHA" Then
        '----------------------------------------------------
        '   Added 2012-11-01 - Comment out the 'Stop' Command
        '
'        Stop
        '----------------------------------------------------
        
        '-----------------------------------------------
        '   We have to get the Last Row (intLR) in
        '   the PrePop sheet so we can define the range.
        '-----------------------------------------------
        intLR = oPrePop.Cells(10000, 1).End(xlUp).Row
        oPrePop.Range("C1:C" & intLR + 1).Name = "DDAMP"
                
        '-------------------------------------------------------------
        '   Added 2012-11-01
        '   Have to unprotect the workbook before unhiding a worksheet
        ActiveWorkbook.Unprotect strPSWD
        '-------------------------------------------------------------
        
        With o52723
            .Unprotect (strPSWD)
            .Visible = True
            .Activate
            .Range("A1").Select
            .OLEObjects("CBoxAmps").ListFillRange = "DDAMP"
            .Protect (strPSWD)
        End With
        
        '---------------------------------
        '   Added 2012-01-23
        '   GsellSoftwareConsulting
        ActiveWorkbook.Unprotect (strPSWD)
        '---------------------------------
        For Each oWS In ActiveWorkbook.Worksheets
            If oWS.Name <> "52723" Then
                oWS.Visible = xlVeryHidden
            End If
        Next
        oBlank.Visible = xlSheetVeryHidden
        '---------------------------------
        '   Added 2012-01-23
        '   GsellSoftwareConsulting
        ActiveWorkbook.Protect (strPSWD)
        '---------------------------------
        Call GetDefaultsOnFileOpen
        Application.ScreenUpdating = True
        
        '--------------------------------------------------------------
    Else
        oBlank.Visible = xlSheetVisible
        '--------------------------------------------------
        '   Just to be safe, we'll reset the .ListFillRange
        '   of the 52723 CBoxAmps drop down to 'nothing'
        '--------------------------------------------------
        
        o52723.OLEObjects("CBoxAmps").ListFillRange = vbNullString
'        Sheet1.Unprotect (strPSWD)
'        Sheet1.Visible = xlSheetVisible
'        oMaster.Visible = True
        oRef.Unprotect (strPSWD)
        oMaster.Range("A:B").Copy Destination:=oRef.Range("O1")

        With oRef
            .Unprotect (strPSWD)
'            .Activate
            '-----------------------------------------------------------
            '   As stated above, we use the Data/Filter/Advanced
            '   functionality to generate a list of unique PHA's.
            '   This list 'feeds' the UserForm1.ComboBoxPHA.RecordSource
            '-----------------------------------------------------------
            .Range("Q1") = .Range("O1")
            .Range("R1") = .Range("P1")
    
            .Range("S1") = .Range("O1")
            .Range("T1") = .Range("P1")
            
            Application.CutCopyMode = False
    
            Application.DisplayAlerts = False
            .Unprotect (strPSWD)
            .Range("O:P").AdvancedFilter Action:=xlFilterCopy, CriteriaRange:= _
                .Range("Q1:R2"), CopyToRange:=.Range("S1:T2"), Unique:=True
            Application.DisplayAlerts = True

            .Columns("O:R").Clear
            .Range("F3:G10000").Clear
            
            intLRPHA = .Range("S10000").End(xlUp).Row
            .Range("S2:T" & intLRPHA).Copy Destination:=.Range("F3")
    
            Application.CutCopyMode = False
            .Columns("O:T").Clear
            .Range("F3:F" & intLRPHA + 1).Name = "PHARANGE"
            .Protect (strPSWD)
        End With

        With UserForm1.ComboBoxPHA
            .RowSource = vbNullString
            .RowSource = "PHARANGE"
            .Value = vbNullString
        End With

        UserForm1.LabelTodayIs = Range("LatestVersion")

        oBlank.Unprotect (strPSWD)
        oBlank.Visible = True
        oBlank.Activate
        oBlank.Range("A1").Select
        oBlank.Protect (strPSWD)
        '---------------------------------
        '   Added 2012-01-23
        '   GsellSoftwareConsulting
        ActiveWorkbook.Unprotect (strPSWD)
        '---------------------------------
        For Each oWS In ActiveWorkbook.Worksheets
            If oWS.Name <> "Blank" Then
                oWS.Visible = xlVeryHidden
            End If
        Next
        '---------------------------------
        '   Added 2012-01-23
        '   GsellSoftwareConsulting
        ActiveWorkbook.Protect (strPSWD)
        '---------------------------------
        
        Call GetDefaultsOnFileOpen
       
        UserForm1.Show
        
    End If
    
End Sub

Sub GetDefaultsOnFileOpen()

    '---------------------------------
    '   Added 2012-01-23
    '   GsellSoftwareConsulting
    '---------------------------------
    
    '----------------------------------------------------
    '   Capture the initial values and store in (1) - (4)
    '----------------------------------------------------
    aStartUpSettings(1) = Application.ScreenUpdating
    aStartUpSettings(2) = Application.DisplayFormulaBar
    aStartUpSettings(3) = Application.DisplayAlerts
    aStartUpSettings(4) = Application.Calculation
    
    '---------------------------------------------------------
    '   These are the values we want for this workbook
    '   "True"/"False" will be interpreted as boolean by Excel
    '---------------------------------------------------------
    aStartUpSettings(5) = "True"
    aStartUpSettings(6) = "False"
    aStartUpSettings(7) = "True"
    aStartUpSettings(8) = xlCalculationAutomatic
    
    '-------------------------------------
    '   Update the vaules for this session
    '-------------------------------------
    Application.ScreenUpdating = aStartUpSettings(5)
    Application.DisplayFormulaBar = aStartUpSettings(6)
    Application.DisplayAlerts = aStartUpSettings(7)
    Application.Calculation = aStartUpSettings(8)

End Sub

Sub SetDefaultsOnFileClose()

    '---------------------------------
    '   Added 2012-01-23
    '   GsellSoftwareConsulting
    '---------------------------------
    '----------------------------------------------------
    '   Restore the initial values, stored in (1) - (4)
    '----------------------------------------------------
    Application.ScreenUpdating = True
    Application.DisplayFormulaBar = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
     
     '-----------------------------------------------------------
     '  Every time we close this workbook, we want to ensure that
     '  If it is Web based, only the 'Blank' Sheet is visible
     '  If it is PHA based, only the 52723 sheet is visible
     '-----------------------------------------------------------
     bCloseWorkbook = True
     Call SetDefaultsOnFileClose
     Call HideAll
        Call RestoreMenusCommandBars
End Sub

Sub HideAll()

    Dim oWS As Worksheet
    Dim strShow As String
    
    If strWebOrNot = "PHA" Then
        strShow = "52723"
    Else
        strShow = "Blank"
    End If
    
    ActiveWorkbook.Unprotect (strPSWD)
    Sheets(strShow).Visible = True
    For Each oWS In ActiveWorkbook.Worksheets
        If oWS.Name <> strShow Then oWS.Visible = xlSheetVeryHidden
    Next
    ActiveWorkbook.Protect (strPSWD)

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
'Stop
    With Sheets("Web Prepop")
        .Unprotect (strPSWD)
        .Visible = True
        .Select
    End With
    
    ActiveWindow.DisplayHeadings = True
    ActiveWindow.DisplayGridlines = True
        
    Application.ScreenUpdating = True


End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CmdSubmit, 26, 2, MSForms, CommandButton"
Attribute VB_Control = "CBoxAmps, 17, 3, MSForms, ComboBox"
Attribute VB_Control = "CBLOM, 14, 4, MSForms, CheckBox"
Attribute VB_Control = "CBFOM, 13, 5, MSForms, CheckBox"
Attribute VB_Control = "chkCFR990, 12, 6, MSForms, CheckBox"
Attribute VB_Control = "chk0930, 11, 7, MSForms, CheckBox"
Attribute VB_Control = "chk0630, 10, 8, MSForms, CheckBox"
Attribute VB_Control = "chk0331, 9, 9, MSForms, CheckBox"
Attribute VB_Control = "chk1231, 8, 10, MSForms, CheckBox"
Attribute VB_Control = "chkRev, 7, 11, MSForms, CheckBox"
Attribute VB_Control = "chkOrig, 6, 12, MSForms, CheckBox"
Attribute VB_Control = "chkMgmtFee, 5, 13, MSForms, CheckBox"
Attribute VB_Control = "chkUSC, 4, 14, MSForms, CheckBox"
Attribute VB_Control = "chkCFR190, 3, 15, MSForms, CheckBox"
Attribute VB_Control = "chkCFR215, 2, 16, MSForms, CheckBox"
Attribute VB_Control = "CmdSave, 18, 17, MSForms, CommandButton"
Attribute VB_Control = "chkResidentUtilities, 30, 18, MSForms, CheckBox"
Option Explicit

Public gbllngOldUnitMonths As Long
Dim gbllngOldValues(1 To 25) As Single
Public bln250 As Boolean
Public bln400 As Boolean
Public blnAMFee As Boolean
Public blnFOLO As Boolean
Public blnZero As Boolean
Public blnIgnoreUpdate As Boolean
Public bClose As Boolean
Public bStop As Boolean

Public intLR As Integer
Public intFirstAmp As Integer
Public intLastAmp As Integer
Public intAmpA As Integer
Public intAmpZ As Integer
Public intAmps As Integer
Dim intAmpRow As Integer

Public strPHA As String
Public strFirstAmp As String
Public strLastAmp As String
Public CurrentWorkBookName As String
Public strPHASelected As String
Public strSaveWebToolTo As String
Public strAMP As String

'Public oMaster As Worksheet
'Public oPrePop As Worksheet
'Public o52723 As Worksheet

Dim lngeum2 As Integer
Dim FirstRow As Integer
Dim intRow As Integer
Dim intNR As Long

Dim o52 As Worksheet
Dim o521 As Worksheet
Dim oPP As Worksheet
Dim oMs As Worksheet
Dim strReason As String
Dim strPPN As String
Dim strHACode As String
Dim strAWBN As String
Dim intoPP As Integer
Dim strRL As String
Public strPHAName As String
Public blnReCalc As Boolean


'=======================================
'   For development purposes
'   Gets hidden in production
'   Const blnShowPrePop As Boolean = True
   Const blnShowPrePop As Boolean = False
'=======================================


Const sglFactor1 As Single = 0.95
Const sglFactor2 As Single = 0.5
Public intCurrRow As Long
Public blnSaveCompletedFlag As Boolean

Sub SetDefault()

    Sheets("52723").chkRev.Enabled = False
    Sheets("52723").chkOrig.Enabled = False

End Sub

Sub EEA()

Application.EnableEvents = True

End Sub

'=====================================
'   WorkSheet Activate Event
'=====================================
Private Sub Worksheet_Activate()

    Application.EnableEvents = False
    
    Call SetUp
    OnFileOpen52723
  
    Application.DisplayFormulaBar = False
    Range("A1").Select
    Application.GoTo Reference:="R4C1", Scroll:=True
    
    Me.chkMgmtFee.Value = False
    Call GetLines
    
    With Me
        .CmdSave.Enabled = False
        .CmdSubmit.Enabled = False
    End With
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
    '----------------------------
    '   Added 2012-03-20
    '----------------------------
    ActiveSheet.Unprotect strPSWD

    Cells.Locked = True
    
    Me.CBoxAmps.Enabled = True
    ActiveSheet.Protect strPSWD
        
    Call P5

    '
    '   Added 2013-03-11 to ensure that top of form is displayed
    '
    Application.ScreenUpdating = False
    With Me
        Application.EnableEvents = False
        .Unprotect strPSWD
        ActiveWindow.FreezePanes = False
        .Rows("9:9").Select
        ActiveWindow.FreezePanes = True
        .Range("A1").Select
        .Rows("3:8").EntireRow.Hidden = True
        .Protect strPSWD
    End With
    Application.EnableEvents = True
End Sub

Private Sub CmdSubmit_Click()

    Dim intLVRow As Integer
    Dim strAMP As String
    
    If blnIgnoreUpdate = True Then Exit Sub
    Call UP5

    intAmpRow = Me.CBoxAmps.ListIndex + 1

    If intAmpRow <= 1 Then
        With Me
            .CmdSave.Enabled = False
            .CmdSubmit.Enabled = False
            Exit Sub
        End With
    End If
        
    Call PrePop52723(intAmpRow)
'    Call UP5
    
    Call GetLines
 '   Call UP5

    With Me
        .CmdSave.Enabled = Not False
        .CBoxAmps.Enabled = False
        .CmdSubmit.Enabled = False
        '========================================
        '   Added 2012-08-22 to correct access to last year uel
        '
        .ScrollArea = "a8:j152"
        '========================================
        
    End With
    
End Sub

'=====================================
'   Sheet Control Events
'=====================================

Private Sub CBoxAmps_Change()

    If blnIgnoreUpdate = True Then Exit Sub

    Dim lngWait As Long
    Dim lngCntr As Long
    
    lngWait = 10000
    For lngCntr = 1 To lngWait
    DoEvents
    Next
    UP5
    If Left(CBoxAmps.Value, 6) = "Please" Then
'        MsgBox CBoxAmps.Value & vbCr & "Exit - No amp selected"
        P5
    Else
'        MsgBox CBoxAmps.Value & vbCr & "Good - Amp selected"
        Call P5
        With Me
            .CmdSave.Enabled = False
            .CmdSubmit.Enabled = Not False
        End With
    End If
'    Call P5
    'Application.WorksheetFunction.Match
    
End Sub

Private Sub CBoxAmps_GotFocus()

    ActiveSheet.Unprotect (strPSWD)
    Me.Range("A1").Locked = False
    ActiveSheet.Protect (strPSWD)
    
'    Call UP5
'    With Me
'        .CmdSave.Enabled = False
'        .CmdSubmit.Enabled = Not False
'    End With

End Sub

Private Sub CmdSave_Click()
    
    If Range("PPN").Value = "" Then
        MsgBox "Please load a Project first"
        Exit Sub
    Else
        blnSaveCompletedFlag = True
        
        Call ReSubmit
'        MsgBox blnSaveCompletedFlag

        If blnSaveCompletedFlag = False Then Exit Sub
        If bStop = True Then Exit Sub
        
    End If

    With Me
        .CmdSave.Enabled = False
        .CBoxAmps.Enabled = True
        .CmdSubmit.Enabled = Not False
    End With
                      
    Me.Unprotect strPSWD
    Me.Cells.Locked = True
    Me.Protect strPSWD
                     
                      
End Sub

Private Sub CBFOM_Click()

    If CBFOM = True Then
        blnFOLO = True
        CBLOM = False
        Call PopulateEomBom(True)
    
    Else
        blnFOLO = False
        CBLOM = True
    End If

End Sub

Private Sub CBLOM_Click()

    If CBLOM = True Then
        blnFOLO = False
        CBFOM = False
        Call PopulateEomBom(False)
    
    Else
        blnFOLO = True
        CBFOM = True
    End If

End Sub

Private Sub chk0331_Click()
   '
   UP5
   If chk0331.Value = True Then
      Sheets("52723").Range("M2").Value = "03/31"
      chk1231.Value = False
      chk0630.Value = False
      chk0930.Value = False
   End If
   P5
   '
End Sub

Private Sub chk0630_Click()
   '
   UP5
   If chk0630.Value = True Then
      Sheets("52723").Range("M2").Value = "06/30"
      chk1231.Value = False
      chk0331.Value = False
      chk0930.Value = False
   End If
   P5
   '
End Sub

Private Sub chk0930_Click()
   '
   UP5
   If chk0930.Value = True Then
      Sheets("52723").Range("M2").Value = "09/30"
      chk1231.Value = False
      chk0331.Value = False
      chk0630.Value = False
   End If
   P5
   '
End Sub

Private Sub chk1231_Click()
   '
   UP5
   If chk1231.Value = True Then
      Sheets("52723").Range("M2").Value = "12/31"
      chk0331.Value = False
      chk0630.Value = False
      chk0930.Value = False
   End If
   P5
   '
End Sub

Private Sub chkCFR990_Click()
    UP5
    If chkCFR990 = True Then
        bln250 = True
    Else
        bln250 = False
    End If
    P5
End Sub

Private Sub chkMgmtFee_Click()

    If Me.chkMgmtFee = True Then
        blnAMFee = True
    Else
        Me.chkMgmtFee = False
        blnAMFee = False
    End If
    
End Sub

Private Sub chkOrig_Click()
   '
   UP5
   If chkOrig.Value = True Then
      chkRev.Value = False
      Sheets("52723").Range("RevNum").Value = ""
   End If
   P5
   '
End Sub

Private Sub chkRev_Click()
   
    '--------------------------------------------------------------------------------
    '   Stephen Gsell
    '   Added 2011-10-03 to resolve qc issue.  Eliminates populating Rev No with PPN
    '   Cause unknown.  But this Exit Sub avoids it
    '--------------------------------------------------------------------------------
    Exit Sub
    '--------------------------------------------------------------------------------
    
    '
    UP5
    If chkRev.Value = True Then
        chkOrig.Value = False
        Sheets("52723").Range("RevNum").Select
    End If
    P5
    '
End Sub

Private Sub chkResidentUtilities_Click()

    Dim CRU
    Dim strMsg As String
    Dim strTitle As String
    
    strMsg = "Pursuant to the guidelines provided in the 2012 Operating Subsidy website, please provide required documentation."
    strTitle = "Resident Paid Utilities Incentive"
    
    If intAmpRow = 0 Then Exit Sub
    
    If Sheets("PrePop").Cells(intAmpRow, 165) = True Then Exit Sub
    
    CRU = Me.chkResidentUtilities.Value
    If CRU = True Then
        MsgBox strMsg, vbOKOnly, strTitle
        Exit Sub
    End If
        
End Sub

'=====================================
'   WorkSheet Change Events
'=====================================
Private Sub Worksheet_Change(ByVal Target As Range)
        
''Exit Sub

    If Target.Address = "$G$53" Then Stop
    
    If blnIgnoreUpdate = True Then Exit Sub
    Dim lngTotUnits As Long, lngEUM As Long
    Dim strTitle As String
    Dim strMsg As String
    Dim intPct As Integer, intColon As Integer
    Dim sglPUM As Single
    Dim Ans, Cell
    Dim strLines As String
    Dim intPct2 As Integer
    Dim intInstr As Integer
    Dim sglPct3 As Single
    Dim blnZeroNum As Boolean
    Dim blnZeroDen As Boolean
    
    Dim intDot As Integer
    Dim intLenInput As Integer
    Dim lDecimals As Long
    Dim strInputMessage As String
    
    
    
    strLines = "39,48,51,52,53,54,55,56"
     

    If bUELChanged = True And Target.Address = Range("P_A05") Then
        bUELChanged = False
        Exit Sub
    ElseIf bFIChanged = True And Target.Address = Range("P_B01") Then
        bFIChanged = False
        Exit Sub
    End If


     'Check Total ACC units, they cannot be negative
     If Range("P_UnitsTot") < 0 Then
          strTitle = "ACC Units on 6/30"
          strMsg = "ACC Units on 6/30 cannot be negative"
          strMsg = strMsg & vbCr & "Please review your entries for ACC units"
          Range(Target.Address).Select
'          Range("P_UnitsTot").Select
          MsgBox strMsg, vbOKOnly, strTitle
          Exit Sub
     End If
    
    If Target.Address = Range("P_Units").Address Then GoTo PUNITS
    If Target.Address = Range("PL_06").Address Then GoTo SPL6
    If Target.Address = Range("PL_06a").Address Then GoTo SPL6A
    If Target.Address = Range("PL_10").Address Then GoTo CMC
    If Target.Row < 58 And Target.Row > 34 Then GoTo SP_Validation1
'Stop
'Stop
    If Target.Address = Range("P_A05").Address Then GoTo UELPUM
    If Target.Address = Range("P_A14").Address Then GoTo ARF
    If Target.Address = Range("G83:H83").Address Then GoTo PUMFI
    If Target.Address = Range("G83").Address Then GoTo PUMFI
    If Target.Address = Range("P_C01").Address Then GoTo MTW
'MsgBox Target.Address & Range("P_B01").Address

'& vbCr & ">>" & Target.Value & "<"
    Exit Sub
     
PUNITS:

    '   =======================================================
    '   Treats all changes
    '   =======================================================
'    strMsg = "The number of ACC Units on 7/1 will change from " & gbllngOldValues(25) & " to " & Target.Value & "."
 '   strMsg = strMsg & vbCr & "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
     
'    If MsgBox(strMsg, vbOKCancel, strTitle1) = vbCancel Then
'        Application.EnableEvents = False
'        Target.Value = gbllngOldValues(25)
'        Application.EnableEvents = True
'        Range(Target.Address).Select
'    End If
'    gbllngOldValues(25) = Target.Value
    Exit Sub
     
     
     
'   ==================================================
SP_Validation1:
'   ==================================================
    
    '   ===============================================================
    '   Determine if this row should be excluded.  Should never happen because of cell locking
    '   ===============================================================
    intInstr = InStr(1, strLines, Target.Row)
    If Target.Row = 37 Or Target.Row = 38 Then Exit Sub
    If intInstr > 0 Then
        Target.Value = gbllngOldValues(Target.Row - 34)
        Exit Sub
    End If
    
    '   ==========================
    '   Set value of Pct variation
    '   ==========================
    If Target.Value = Empty Then
        Application.EnableEvents = False
        Target.Value = 0
        Application.EnableEvents = True
    End If
'MsgBox ">>" & Target, Value & "<<"
    
    intPct2 = 0
    If Target.Row = 35 Then
        intPct2 = 10
    ElseIf Target.Row = 40 Then
        intPct2 = 20
    Else
        '   =================
        '   Room to add more tests
        '   =================
    End If
    
    '   ======================================================
    '   We'll use the Absolute value of the delta, not +/-
    '   Next we'll test to see if either the existing value or the value or both are Zero
    '   ======================================================
'    lngeum2 = Abs(Target.Value - gbllngOldValues(Target.Row - 34))
    
    If Target.Value = 0 Then
        blnZeroNum = True
    Else
        blnZeroNum = False
    End If

    If gbllngOldValues(Target.Row - 34) = 0 Then
        blnZeroDen = True
    Else
        blnZeroDen = False
    End If

    '   =================================================
    '   If both new and old > 0 then we can calculate a % variation/change
    '   This will be used in the pop-up message/alert
    '   =================================================
    Const strMessageLine1 As String = "The number of unit months will change from "
    Const strMessageLine2 As String = "This change excedes the recommended variation of "
    Const strMessageFooter As String = "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
  
    Const strTitle1 As String = "EUM Validation"
    strMsg = ""
    
    If blnZeroNum = False And blnZeroDen = False Then
        '   ===================
        '   Neither new nor old is Zero
        '   ===================
        sglPct3 = Round(Abs(Target.Value - gbllngOldValues(Target.Row - 34)) / gbllngOldValues(Target.Row - 34) * 100, 2)
        If Abs(sglPct3) > intPct2 Then
            If intPct2 > 0 Then
                '   =======================================================
                '   Only treats changes where there is a pre-defined limit and neither one is Zero
                '   =======================================================
                strMsg = strMessageLine1 & gbllngOldValues(Target.Row - 34) & " to " & Target.Value & "."
                strMsg = strMsg & vbCr & "This is a variation of " & sglPct3 & "%, which is more than the recommended limit of " & intPct2 & "%."
                strMsg = strMsg & vbCr & "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
            ElseIf intPct = 0 Then
                '   =======================================================
                '   Treats changes where there is NO pre-defined limit and neither one is Zero
                '   =======================================================
                strMsg = strMessageLine1 & gbllngOldValues(Target.Row - 34) & " to " & Target.Value
                strMsg = strMsg & vbCr & "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
            End If
        End If
    ElseIf blnZeroNum = True And blnZeroDen = False Then
        strMsg = "You are replacing " & gbllngOldValues(Target.Row - 34) & " with a 0." & vbCr _
                    & "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
    ElseIf blnZeroDen = True And blnZeroNum = False Then
        strMsg = "You are replacing a 0 with " & Target.Value & "." & vbCr _
                    & "If you wish to accept this change, press 'OK' and provide documentation in Section 4."
    End If
    If strMsg = "" Then Exit Sub
    If MsgBox(strMsg, vbOKCancel, strTitle1) = vbCancel Then
        Application.EnableEvents = False
        Target.Value = gbllngOldValues(Target.Row - 34)
        Application.EnableEvents = True
        Range(Target.Address).Select
    End If
    gbllngOldValues(Target.Row - 34) = Target.Value
    
    Exit Sub
         
'   ==================================================
SPL6:
'   ==================================================
     '    Check for Special Use Units, PL_06
     If Not IsEmpty(Range("PL_06")) And Range("PL_06") > 0 Then
          strTitle = "Special Use Units"
          strMsg = "Reminder: Special Use units are limited to 2 per 100 ACC units."
          Range("PL_06").Select
          MsgBox strMsg, vbOKOnly, strTitle
     End If
     Exit Sub
     
'   ==================================================
SPL6A:
'   ==================================================
     '    Check for Special Use Units/Police, PL_06a
     If Range("PL_06a") > Range("PL_02") Then
          strTitle = "Special Use Units"
          strMsg = "Police special use units (Line 06) should not exceed occupied dwelling units (Line 02)."
          Range("PL_06a").Select
          MsgBox strMsg, vbOKOnly, strTitle
     End If
     Exit Sub

'   ==================================================
CMC:
'   ==================================================
     '    Check for Changing Market Conditions, PL_10
     If Target.Value > 0 Then
          strTitle = "Changing Market Conditions"
          strMsg = "Reminder: PHA should have an approved appeal or should have requested an appeal."
          Range("PL_10").Select
          MsgBox strMsg, vbOKOnly, strTitle
     End If
     Exit Sub

'   ==================================================
UELPUM:
'   ==================================================
'    Check for UEL/PUM, P_A05
    Dim strYear As String
    Dim intYear As Integer
    
    strYear = Trim(Me.Range("Funding_Period"))
    intYear = Right(strYear, 4) - 1
    '---------------------------------------------------------------------------------------------
    '   Added 2012-01-23
    '   Test for decimal > 2 places
    intDot = InStr(1, Target.Value2, ".")
    If intDot > 0 Then
        intLenInput = Len(Target.Value2)
        lDecimals = Right(Target.Value2, intLenInput - intDot)
        If lDecimals > 99 Then
            strInputMessage = "The UEL value entered '" _
                                & Target.Value2 _
                                & "' contains more than 2 decimals." & vbCr & _
                                "Please re-enter this value with no more " & _
                                "than 2 decimal places."
            MsgBox strInputMessage, , "UEL Validation Process"
            Range("P_A05").Select
            ActiveCell = ""
            bUELChanged = True
            Exit Sub
        End If
    End If
    
    '--------------------------------------------------------------------
    '   Process revised 2012-09-07 (VA)
    '   do not exit this section just because the prepop uel is blank
    '   If prepop UEL is blank and new UEL > 300 then show '>300' message
    '   For all other cases show */- 20% and > 300 as appropriate
    '--------------------------------------------------------------------
     
    strMsg = ""
    '   Test 1, check for blank prepop uel and then test for >300
    If IsEmpty(Range("L68")) Then
        '   This is a 'new' amp with no prepop from last year
        If Target.Value <= 300 Then
            '   The current uel <=300
            Exit Sub
        ElseIf Target.Value > 300 Then
            '   The current uel >300
            '   There is NO +/- 20% test
            strMsg = "The UEL exceeds $300 PUM."
            GoSub SHOWMESSAGE
            Exit Sub
        End If
    ElseIf Target.Value > 300 Then
        '   This amp has a prepop uel >=0 (blank prepop was treated above)
        strMsg = "The UEL exceeds $300 PUM."
    End If
     
    intPct = 20
     '    Test for +/- 20%
    If Range("L68") >= 0 Then
         sglPUM = Range("L68").Value
         '    Check if the newly entered UEL is with +/- 'intPct' pct of the prepopulated value (Cell M68)
        If Target.Value > sglPUM * (1 + (intPct / 100)) _
            Or Target.Value < sglPUM * (1 - (intPct / 100)) Then
            
            If strMsg = "" Then
                strMsg = "The UEL is greater than +/- " & intPct & "% of the " & intYear & " UEL."
            Else
                strMsg = strMsg & vbCr & "The UEL is greater than +/- " & intPct & "% of the " & intYear & " UEL."
            End If
        End If
        GoSub SHOWMESSAGE
    End If
    Exit Sub
    
SHOWMESSAGE:
    If strMsg <> "" Then
          strTitle = "UEL"
          strMsg = strMsg & vbCr & "Please provide an explanation in the Comments section"
          strMsg = strMsg & vbCr & "Do not include COCC's utilities"
          Range("P_A05").Select
          MsgBox strMsg, vbOKOnly, strTitle
          Return
    Else
        Return
    End If
    Exit Sub

'   ==================================================
ARF:
'   ==================================================
     '    Check for Asset repositioning fee and corresponding units on Line 12
     If (Range("PL_12") = 0 Or IsEmpty(Range("PL_12"))) Then
          strTitle = "Asset Repositioning Fee"
          strMsg = "You are claiming an Asset Repositioning Fee but have no units" & vbCr & _
                         "on Line 12 (Units eligible for Asset Repositioning Fee)."
          Range("PL_12").Select
          MsgBox strMsg, vbOKOnly, strTitle
     End If
     Exit Sub
     
'   ======================================================================
PUMFI:
'   ======================================================================
    
    '---------------------------------------------------------------------------------------------
    '   Added 2012-01-23
    '   Test for decimal > 2 places
    intDot = InStr(1, Target.Value2, ".")
    If intDot > 0 Then
        intLenInput = Len(Target.Value2)
        lDecimals = Right(Target.Value2, intLenInput - intDot)
        If lDecimals > 99 Then
            strInputMessage = "The PUM Formula Income value entered '" _
                                & Target.Value2 _
                                & "' contains more than 2 decimals." & vbCr & _
                                "Please re-enter this value with no more than 2 decimal places."
            MsgBox strInputMessage, , "PUM Formula Income Validation Process"
            Range("P_B01").Select
            ActiveCell = ""
            bFIChanged = True
            Exit Sub
        End If
    End If
    '---------------------------------------------------------------------------------------------
       
    On Error GoTo MAKEZERO
    Dim TargetValue
    
    TargetValue = Target.Value
    If TargetValue = "" Then TargetValue = 0
    If TargetValue = gbllngOldValues(24) Then Exit Sub
    strTitle = "PUM Formula Income Test"
    lngeum2 = Abs(Target.Value - gbllngOldValues(24))
    strMsg = ""
        
    strMsg = "The PUM Formula Income will change from " & gbllngOldValues(24) & " to " & TargetValue
    strMsg = strMsg & vbCr & "If you wish to accept this change, press 'OK'."
    strMsg = strMsg & vbCr & "Please provide documentation in Section 4."
        
    If MsgBox(strMsg, vbOKCancel, strTitle) = vbCancel Then
        Application.EnableEvents = False
        Target.Value = gbllngOldValues(24)
        Application.EnableEvents = True
        Range(Target.Address).Select
    Else
        gbllngOldValues(24) = TargetValue
    End If
    
    Exit Sub
MAKEZERO:
    Err.Clear
    Application.EnableEvents = False
    TargetValue = 0
    Application.EnableEvents = True
    Resume Next
    Stop
          
'   ==================================================
MTW:
'   ==================================================
     '    Check for MTW
     If Target.Value > 0 Then
          strTitle = "MTW"
          strMsg = "Line C1 is allowed only for MTW PHA's with alternative subsidy calculations."
          Range("P_C01").Select
          MsgBox strMsg, vbOKOnly, strTitle
     End If
     Exit Sub
     
End Sub

'=====================================
'   Normal Sheet Subs and Functions
'=====================================

Sub SetUp()

    Application.EnableEvents = False
    Call AssignSheetReferences
    Application.EnableEvents = False

    o52723.Select
  
    
    With ActiveWindow
        .DisplayGridlines = False
        .DisplayHeadings = False
    End With
    
    If strWebOrNot = "Web" Then
'        Exit Sub
    End If
    
    intLR = oPrePop.Cells(10000, 1).End(xlUp).Row
    
    ActiveWorkbook.Names.Add Name:="DDAMP", RefersToR1C1:= _
        "=PrePop!R1C3:R" & intLR & "C3"
    
    Me.CBoxAmps.ListFillRange = "DDAMP"
    Me.CBoxAmps.ListIndex = 0
    Me.ScrollArea = "a8:j152"
       
    Call Clear52723
    Application.DisplayFormulaBar = False

End Sub

Sub CreatePHAList()
    
    Dim intLRPHA As Integer
    
    Call SetUp

    With oPrePop
        
        .Range("A2:A" & intLR).Copy Destination:=.Range("EA2")
        .Range("EB2") = Range("EA2")
        .Range("EC2") = Range("EA2")
        Application.CutCopyMode = False

        Application.DisplayAlerts = False
        .Range("EA2:EA" & intLR).AdvancedFilter Action:=xlFilterCopy, CriteriaRange:= _
            Range("EB2:EB3"), CopyToRange:=Range("EC2:EC3"), Unique:=True
        Application.DisplayAlerts = True

        .Columns("EA:EB").Clear
        intLRPHA = Range("EC10000").End(xlUp).Row
        .Range("EC2:EC" & intLRPHA).Copy Destination:=.Range("CU2")
      
        Application.CutCopyMode = False
        .Columns("EC:EC").Clear
        
        ActiveWorkbook.Names.Add Name:="PHARANGE", RefersToR1C1:= _
            "=PrePop!R3C99:R" & intLRPHA & "C99"
           
    End With
    
    o52723.OLEObjects("ComboBox1").ListFillRange = "PHARANGE"
    o52723.OLEObjects("ComboBox1").LinkedCell = "AMP"

End Sub



Sub GetLines()

    Dim c1 As Integer
    Dim strAns As String

     c1 = 1
     While c1 <= 23
        gbllngOldValues(c1) = Worksheets("52723").Cells(c1 + 34, 5)
        If c1 = 8 Or c1 = 23 Then
            gbllngOldValues(c1) = Worksheets("52723").Cells(c1 + 34, 7)
        End If
        strAns = strAns & vbCr & c1 & " - " & c1 + 34 & " > " & gbllngOldValues(c1)
        c1 = c1 + 1
     Wend
     
     gbllngOldValues(c1) = Worksheets("52723").Cells(83, 7)
End Sub

'==========================================================
'   Sheet Data Load, Re-Submit and Clear Subs and Functions
'==========================================================
Function PrePop52723(FirstRow As Integer)

    blnIgnoreUpdate = True
    Dim oPP As Worksheet
    Dim N As Integer
    N = 69
    Set oPP = Worksheets("PrePop")
    
    Call Clear52723
    Call UP5
    strPPN = Right(oPP.Cells(FirstRow, 3).Value, 11)
''    MsgBox "The PPN is: " & strPPN
     Dim intMonth As Integer
     oPP.Unprotect (strPSWD)
  '   Range("PPN").Locked = False
     
     Range("PPN") = oPP.Cells(FirstRow, 3).Value
     Range("PPN") = Replace(Range("PPN"), "@", "")
 '    Range("PPN").Locked = True
     
     Range("HA_Name") = oPP.Cells(FirstRow, 2).Value
     Range("Address") = oPP.Cells(FirstRow, 4).Value
     Range("CityZip") = oPP.Cells(FirstRow, 5).Value
     Range("ACC") = "'" & oPP.Cells(FirstRow, 8).Value
     Range("DUNS") = oPP.Cells(FirstRow, 10).Value
     Range("ROFO") = oPP.Cells(FirstRow, 11).Value
     Range("DUNS").NumberFormat = "000000000"
     Range("ROFO").NumberFormat = "0000"
    

     'Force a reset of all FYE dates
     Sheets("52723").chk0331.Value = False
     Sheets("52723").chk0630.Value = False
     Sheets("52723").chk0930.Value = False
     Sheets("52723").chk1231.Value = False
     intMonth = Month(oPP.Cells(FirstRow, 9))
     If intMonth = 3 Then Sheets("52723").chk0331.Value = True
     If intMonth = 6 Then Sheets("52723").chk0630.Value = True
     If intMonth = 9 Then Sheets("52723").chk0930.Value = True
     If intMonth = 12 Then Sheets("52723").chk1231.Value = True
    
    UP5
    With ActiveSheet
        .Cells.Locked = True
        ' Modified 2012-06-13 to keep ACC B22:C22 locked
        .Range("J15,B24:C24,E24:F24").Locked = False
        .Range("D28:H28,E35:E38,E40:E41,G42,E43:E47,E49:E50,G57").Locked = False
        .Range("G68:H68,G72:H74,G78:H78,G83:H83,G88:H88,L68,A108:J139").Locked = False
        .Range("A142:A148,M1:M20").Locked = False
        .Protect (strPSWD)
    End With
        
     
     
     
     
     Range("P_Units") = oPP.Cells(FirstRow, 18 + N).Value
     Range("P_UnitsPl") = oPP.Cells(FirstRow, 19 + N).Value
     Range("P_UnitsMi") = oPP.Cells(FirstRow, 20 + N).Value
     Range("HA_Unit_Total") = oPP.Cells(FirstRow, 157).Value
     
     Range("PL_01") = oPP.Cells(FirstRow, 22 + N).Value
     Range("PL_02") = oPP.Cells(FirstRow, 23 + N).Value
     Range("PL_03") = oPP.Cells(FirstRow, 24 + N).Value
     Range("PL_04") = oPP.Cells(FirstRow, 25 + N).Value
     Range("PL_05") = oPP.Cells(FirstRow, 26 + N).Value
     Range("PL_06") = oPP.Cells(FirstRow, 27 + N).Value
     Range("PL_07") = oPP.Cells(FirstRow, 28 + N).Value
     Range("PL_08") = oPP.Cells(FirstRow, 29 + N).Value
     Range("PL_09") = oPP.Cells(FirstRow, 30 + N).Value
     Range("PL_10") = oPP.Cells(FirstRow, 31 + N).Value
     Range("PL_11") = oPP.Cells(FirstRow, 32 + N).Value
     Range("PL_12") = oPP.Cells(FirstRow, 33 + N).Value
     Range("PL_13") = oPP.Cells(FirstRow, 34 + N).Value
     Range("PL_06a") = oPP.Cells(FirstRow, 41 + N).Value

     Range("PL_17") = oPP.Cells(FirstRow, 48 + N).Value
Call UP5
     
    Call LimitedVacancies2014
     
     Range("P_A01") = oPP.Cells(FirstRow, 55 + N).Value
     Range("P_A02") = oPP.Cells(FirstRow, 56 + N).Value
     Range("P_A03").FormulaR1C1 = "=ROUND(P_A01*P_A02,2)"
     Range("P_A05") = oPP.Cells(FirstRow, 59 + N).Value
'===========================================================
'   ADJUST FOR SELF SUFFICIENCY
'===========================================================
'    MsgBox oPP.Cells(FirstRow, 164)
    Application.EnableEvents = True
    
    ActiveSheet.Unprotect (strPSWD)
    If UCase(oPP.Cells(FirstRow, 164)) = "YES" Then
        '   ========================
        '   Enable Self Suffucicency entries
        '   ========================
        With ActiveSheet.Range("G71:H71")
            .Locked = False
            .Interior.Color = 10092543
            Application.EnableEvents = False
            .Value = oPP.Cells(FirstRow, 61 + N).Value
            .NumberFormat = "$#,##0"
            Application.EnableEvents = True
        End With
    
    Else

        '   ========================
        '   Disable Self Suffucicency entries
        '   ========================
        With ActiveSheet.Range("G71:H71")
            .Locked = False
            .UnMerge
            .Interior.Color = 10079487
            .Merge
            .Value = vbNullString
            .Locked = True
            
            ActiveSheet.Protect (strPSWD)
        End With
    End If
    ActiveSheet.Protect (strPSWD)
    
    'Application.EnableEvents = False
    
    Range("P_A08") = oPP.Cells(FirstRow, 62 + N).Value
    Range("P_A09") = oPP.Cells(FirstRow, 63 + N).Value
    Range("P_A10") = oPP.Cells(FirstRow, 64 + N).Value
    Range("P_A14") = oPP.Cells(FirstRow, 68 + N).Value
    '          Range("P_A15") = oPP.Cells(FirstRow, 69 + N).Value
    
    Range("P_B01") = oPP.Cells(FirstRow, 72 + N).Value
    '          Range("P_B02") = oPP.Cells(FirstRow, 73 + N).Value
 
     Range("P_C01") = oPP.Cells(FirstRow, 76 + N).Value
     UP5
     Range("P_C02TF") = Round(oPP.Cells(FirstRow, 89 + N).Value, 2)
    
'          Range("P_C03") = oPP.Cells(FirstRow, 78 + N).Value

     Range("M3") = False
     Range("M8") = False
     Range("M9") = oPP.Cells(FirstRow, 152)
     Range("M2") = ""
     Range("M1") = strAWBN
'=============++++++++++++++++++++++++++++++++++++++++++++++
     'UEL/PUM Prior Year
     Range("L68") = oPP.Cells(FirstRow, 160).Value
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'     Stop
'    Application.ScreenUpdating = True
    
        If oPP.Cells(FirstRow, 155).Value = True Then
            Sheets("52723").chkUSC.Value = True
          Else
            Sheets("52723").chkUSC.Value = False
          End If
'
          If oPP.Cells(FirstRow, 153).Value = True Then
            Sheets("52723").chkCFR215.Value = True
          Else
            Sheets("52723").chkCFR215.Value = False
          End If
'
          If oPP.Cells(FirstRow, 154).Value = True Then
            Sheets("52723").chkCFR190.Value = True
          Else
            Sheets("52723").chkCFR190.Value = False
          End If
          
          If oPP.Cells(FirstRow, 162).Value = True Then
            Sheets("52723").chkCFR990.Value = True
          Else
            Sheets("52723").chkCFR990.Value = False
          End If
        
        '
        '   Added 2011-10-19 to include BOM
        '
        If UCase(oPP.Cells(FirstRow, 163)) = "TRUE" Then
            CBFOM.Value = True
        ElseIf UCase(oPP.Cells(FirstRow, 163)) = "FALSE" Then
            CBFOM.Value = False
        Else
            CBFOM.Value = True
        End If
                    

                    
                    
    Me.chkResidentUtilities.Value = oPP.Cells(FirstRow, 165)
    Range("Comments") = oPP.Cells(FirstRow, 166)

    '----------------------------------------------------------------------------------
    '   Added 2012-08-17 to ensure that default is BOM and that all units are populated
    '
     If oPP.Cells(FirstRow, 163) = "" Then PopulateEomBom (True)
    '----------------------------------------------------------------------------------
    
    
    '
    '   Modified 2012-04-19
    '   GSC
    '   To re 'lock' unlocked cells based on 2013 rules
    '   HA_TOTAL_UNITS(J15),Lines 01-02(E35-E37),Lines 05-09(E40:E45)
    '   Lines 11(E47) and 13(E50)
    With ActiveSheet
        .Unprotect (strPSWD)
        'Modified 2013-05-10 to also Lock Lines 10 and 12 (E46 and E49)
        'Had to structure the Lock this way to make it work...E40:E47 failed
        .Range("J15,E35:E36,E40:E47,E49:E50").Locked = True
        
'        .Range("J15,E35:E36,E40:E45,E47,E50").Locked = True
'        .Range("E46,E49").Locked = True
        
        
        .Protect (strPSWD)
    End With




'     oPP.Cells(FirstRow, 90).Value = "Done"
'     oPP.Cells(FirstRow, 91).Value = Format(Now(), "MM-DD-YYYY hh:mm")
    Application.EnableEvents = True
    
     P5
    blnIgnoreUpdate = False
              
              
'        Range("G71:H71").Locked = False
             
End Function

Public Sub Clear52723()
    
    Application.EnableEvents = False
'    On Error Resume Next
    With Me
        UP5
        
        .Range("B18:F18").ClearContents
        .Range("B19:F19").ClearContents
        .Range("B20:F20").ClearContents
        .Range("B22:C22").ClearContents
        .Range("B24:C24").ClearContents
        .Range("E24:F24").ClearContents
        .Range("H22:I22").ClearContents
        .Range("D28").ClearContents
        .Range("E28:F28").ClearContents
        .Range("G28:H28").ClearContents
        .Range("E35").ClearContents
        .Range("E36").ClearContents
        .Range("E37").ClearContents
        .Range("E38").ClearContents
        .Range("E40").ClearContents
        .Range("E41").ClearContents
        .Range("G42").ClearContents
        .Range("E43").ClearContents
        .Range("E44").ClearContents
        .Range("E45").ClearContents
        .Range("E46").ClearContents
        .Range("E47").ClearContents
        .Range("E49").ClearContents
        .Range("E50").ClearContents
        .Range("G57").ClearContents
        
        .Range("G63:H63").ClearContents
        .Range("G64:H64").ClearContents
        
        .Range("L68").ClearContents
        
        .Range("G68:H68").ClearContents
        .Range("G71:H71").ClearContents
        .Range("G72:H72").ClearContents
        .Range("G73:H73").ClearContents
        .Range("G74:H74").ClearContents
        .Range("G78:H78").ClearContents
        .Range("G83:H83").ClearContents
        .Range("G88:H88").ClearContents
        .Range("E89:F89").ClearContents
    
    
        .chkOrig.Value = True
        .chkRev.Value = False
        .Range("RevNum").ClearContents
        .chk0331.Value = False
        .chk0630.Value = False
        .chk0930.Value = False
        .chk1231.Value = False
        .chkMgmtFee.Value = False
        UP5
        .Range("ASSETMGMT") = ""
        .Range("Comments") = ""
        .Range("HA_Unit_Total") = 0
        
        .chkCFR215 = False
        .chkCFR190 = False
        .chkCFR990 = False
        .chkUSC = False
UP5
        .Range("M3") = False
        .Range("M8") = False
        .Range("M9") = False
        .Range("M2") = ""
        .Range("M1") = ""
P5
'        blnIgnoreUpdate = True
'        .CBoxAmps.Value = ""
'        blnIgnoreUpdate = False
        
        P5
    
    End With
    Application.EnableEvents = True
    

End Sub

Sub ReSubmit()
   
'    '==================================================
'    Call CheckFYE
'    Call CheckForCerts
'    TestAMFee
'
'    '    Check for Section 3, Line B1 Equal to Zero or blank
'    If IsEmpty(Range("P_B01")) Then
'         strTitle = "PUM Formula Income"
'         strMsg = "You left PUM Formula Income blank."
'         strMsg = strMsg & vbCr & "Press 'Cancel' to return to the Form and update this cell, or 'OK' to quit with the 'blank' value."
'
'         Ans = MsgBox(strMsg, vbOKCancel + vbDefaultButton2, strTitle)
'         If Ans = vbCancel Then
'              Range("P_B01").Select
'              Cancel = True
'              Exit Sub
'         End If
'    End If
        
    '================
    '    Refind the 1st row
    '================
    Dim intX As Integer
    Dim strAMP As String
    Dim intResp As Integer
      
    Set o52723 = Worksheets("52723")
    Set oPrePop = Worksheets("PrePop")
    strAMP = Range("PPN")
    intX = 2
    Do
        If Right(oPrePop.Cells(intX, 3), 11) = strAMP Then
            Exit Do
        End If
        intX = intX + 1
    Loop
    FirstRow = intX


    Call CheckAmpBeforeSave
    If bStop = True Then Exit Sub

    If bClose = False Then
        blnSaveCompletedFlag = False
'        MsgBox "Data not saved.  Please make requested updates."
        Exit Sub
    End If

'    Stop
      
    '-----------------------------------------------
    '   Ask for confirmation of overwrite old record
    '   Commented out 2011-09-27
    '   Requested by Rahul and Vibha
    '-----------------------------------------------
'    'Ask for confirmation of overwrite old record
'    intResp = MsgBox("Overwrite old " & strAMP & " record?", 4, "FORM HUD-52723")
'    If intResp = 7 Then
'        End
'    End If
   
    
    blnIgnoreUpdate = True
    
'   oPrePop.Cells(FirstRow, 1) = strHACode
    oPrePop.Cells(FirstRow, 2) = Range("HA_Name")
    oPrePop.Cells(FirstRow, 3) = Range("PPN")
    oPrePop.Cells(FirstRow, 4) = Range("Address")
    oPrePop.Cells(FirstRow, 5) = Range("CityZip")
    oPrePop.Cells(FirstRow, 8) = Range("ACC")
    
    If chk1231.Value = True Then
      oPrePop.Cells(FirstRow, 9) = "12/31"
      oPrePop.Cells(FirstRow, 156).Value = 12
    ElseIf chk0331.Value = True Then
      oPrePop.Cells(FirstRow, 9) = "03/31"
      oPrePop.Cells(FirstRow, 156) = 3
    ElseIf chk0630.Value = True Then
      oPrePop.Cells(FirstRow, 9) = "06/30"
      oPrePop.Cells(FirstRow, 156) = 6
    ElseIf chk0930.Value = True Then
      oPrePop.Cells(FirstRow, 9) = "09/30"
      oPrePop.Cells(FirstRow, 156) = 9
    End If

    
    
    oPrePop.Range("J" & CStr(FirstRow)).NumberFormat = "000000000"
    oPrePop.Range("K" & CStr(FirstRow)).NumberFormat = "0000"
    oPrePop.Cells(FirstRow, 10) = Range("DUNS")
    oPrePop.Cells(FirstRow, 11) = Range("ROFO")
    oPrePop.Range("J" & CStr(FirstRow)).NumberFormat = "000000000"
    oPrePop.Range("K" & CStr(FirstRow)).NumberFormat = "0000"
'=====================================================

'    P_ColA5 P_ColA6 P_ColA7 P_ColA8 P_ColA9 P_ColA10    P_ColA11    P_ColA12    P_ColA13    P_ColA15

    oPrePop.Cells(FirstRow, 87) = Range("D28") 'P_Unit
    oPrePop.Cells(FirstRow, 88) = Range("E28") 'P_Unit_+
    oPrePop.Cells(FirstRow, 89) = Range("G28") 'P_Unit_-
    oPrePop.Cells(FirstRow, 90) = Range("I28") 'P_Unit_total
    
    oPrePop.Cells(FirstRow, 91) = Range("E35") 'P_ColA1
    oPrePop.Cells(FirstRow, 92) = Range("E36") 'P_ColA2
    oPrePop.Cells(FirstRow, 93) = Range("E37") 'P_ColA3
    oPrePop.Cells(FirstRow, 94) = Range("E38") 'P_ColA4
     
    oPrePop.Cells(FirstRow, 95) = Range("E40") 'P_ColA5
    oPrePop.Cells(FirstRow, 96) = Range("E41") 'P_ColA6
    oPrePop.Cells(FirstRow, 97) = Range("E43") 'P_ColA7
    oPrePop.Cells(FirstRow, 98) = Range("E44") 'P_ColA8
    oPrePop.Cells(FirstRow, 99) = Range("E45") 'P_ColA9
    oPrePop.Cells(FirstRow, 100) = Range("E46") 'P_ColA10
    oPrePop.Cells(FirstRow, 101) = Range("E47") 'P_ColA11
    
    oPrePop.Cells(FirstRow, 102) = Range("E49") 'P_ColA12
    oPrePop.Cells(FirstRow, 103) = Range("E50") 'P_ColA13
    oPrePop.Cells(FirstRow, 104) = Range("E54") 'P_ColA15
'=====================================================

    oPrePop.Cells(FirstRow, 105) = Range("G35") 'P_ColB1
    oPrePop.Cells(FirstRow, 106) = Range("G37") 'P_ColB3
    oPrePop.Cells(FirstRow, 107) = Range("G38") 'P_ColB4
'=====================================================
    oPrePop.Cells(FirstRow, 108) = Range("G40") 'P_ColB5
    oPrePop.Cells(FirstRow, 109) = Range("G41") 'P_ColB6
    oPrePop.Cells(FirstRow, 110) = Range("G42") 'P_ColB6a
    oPrePop.Cells(FirstRow, 111) = Range("G43") 'P_ColB7
   
'=====================================================
    oPrePop.Cells(FirstRow, 112) = Range("G44") 'P_ColB8
    oPrePop.Cells(FirstRow, 113) = Range("G45") 'P_ColB9
    oPrePop.Cells(FirstRow, 114) = Range("G46") 'P_ColB10
    oPrePop.Cells(FirstRow, 115) = Range("G53") 'P_ColB14
'=====================================================
    oPrePop.Cells(FirstRow, 116) = Range("G54") 'P_ColB15
    oPrePop.Cells(FirstRow, 117) = Range("G57") 'P_ColB17
'=====================================================
    oPrePop.Cells(FirstRow, 118) = Range("I35") 'P_ColC1
    oPrePop.Cells(FirstRow, 119) = Range("I36") 'P_ColC2
    oPrePop.Cells(FirstRow, 120) = Range("I37") 'P_ColC3
    oPrePop.Cells(FirstRow, 121) = Range("I38") 'P_ColC4
'======================================================
    oPrePop.Cells(FirstRow, 122) = Range("I54") 'P_ColC15
    oPrePop.Cells(FirstRow, 123) = Range("I55") 'P_ColC16
     
    oPrePop.Cells(FirstRow, 124) = Range("G63") 'P_A1
    oPrePop.Cells(FirstRow, 125) = Range("G64") 'P_A2
    oPrePop.Cells(FirstRow, 126) = Range("G65") 'P_A3
    oPrePop.Cells(FirstRow, 127) = Range("G66") 'P_A4
    
    oPrePop.Cells(FirstRow, 128) = Range("G68") 'P_A5
    oPrePop.Cells(FirstRow, 129) = Range("G69") 'P_A6
    
    oPrePop.Cells(FirstRow, 130) = Range("G71") 'P_A7
    oPrePop.Cells(FirstRow, 131) = Range("G72") 'P_A8
    oPrePop.Cells(FirstRow, 132) = Range("G73") 'P_A9
    oPrePop.Cells(FirstRow, 133) = Range("G74") 'P_A10
    oPrePop.Cells(FirstRow, 134) = Range("G75") 'P_A11
    oPrePop.Cells(FirstRow, 135) = Range("G76") 'P_A12
    oPrePop.Cells(FirstRow, 136) = Range("G77") 'P_A13
    oPrePop.Cells(FirstRow, 137) = Range("G78") 'P_A14
    oPrePop.Cells(FirstRow, 138) = Range("G79") 'P_A15
    oPrePop.Cells(FirstRow, 139) = Range("G80") 'P_A16
    oPrePop.Cells(FirstRow, 140) = Range("G81") 'P_A17
    
    oPrePop.Cells(FirstRow, 141) = Range("G83") 'P_B1
    oPrePop.Cells(FirstRow, 142) = Range("G84") 'P_B2
    oPrePop.Cells(FirstRow, 143) = Range("G85") 'P_B3
    oPrePop.Cells(FirstRow, 144) = Range("G86") 'P_B4
    
    oPrePop.Cells(FirstRow, 145) = Range("G88") 'P_C1
    oPrePop.Cells(FirstRow, 146) = Range("G89") 'P_C2
    oPrePop.Cells(FirstRow, 147) = Range("G90") 'P_C3
    oPrePop.Cells(FirstRow, 148) = Range("G91") 'P_C4
    
    oPrePop.Cells(FirstRow, 149) = Range("G93") 'P_D1
    oPrePop.Cells(FirstRow, 150) = Range("G94") 'P_D2
    oPrePop.Cells(FirstRow, 151) = Range("G95") 'P_D3
    
'=====================================================
    UP5
    If chkMgmtFee.Value = True Then
        Range("ASSETMGMT") = True
        oPrePop.Cells(FirstRow, 152) = True
    Else
        Range("ASSETMGMT") = False
        oPrePop.Cells(FirstRow, 152) = False
    End If
'=====================================================
    If chkCFR215.Value = True Then
        oPrePop.Cells(FirstRow, 153) = True
    Else
        oPrePop.Cells(FirstRow, 153) = False
    End If
'=====================================================
    If chkCFR190.Value = True Then
        oPrePop.Cells(FirstRow, 154).Value = True
    Else
        oPrePop.Cells(FirstRow, 154).Value = False
    End If
'=====================================================
    If chkUSC.Value = True Then
        oPrePop.Cells(FirstRow, 155).Value = True
    Else
        oPrePop.Cells(FirstRow, 155).Value = False
    End If

'=============================================
'   FYE - 156 taken care of during header info
'   ActiveCell.Offset(0, 156) is part of cell(FirstRow,9)
'=============================================

    oPrePop.Cells(FirstRow, 157) = Range("HA_Unit_Total")
'Stop
'*******************************************************************************
'   ActiveCells C2Fact *158*, HUDUNITS *159*, PUMUEL *160*, PUMFFI *161*
'   and H_A7 *164* are not refreshed or editable and they are skipped during update
'*******************************************************************************
    
    
    '======================================
    '   Update new certification 3
    '   Update Beginning of month
    '   EOM will be the negation of the BOM
    '======================================

    If chkCFR990.Value = True Then
        oPrePop.Cells(FirstRow, 162) = True
    Else
        oPrePop.Cells(FirstRow, 162) = False
    End If

    If CBFOM.Value = True Then
        oPrePop.Cells(FirstRow, 163) = True
    Else
        oPrePop.Cells(FirstRow, 163) = False
    End If

   
    oPrePop.Cells(FirstRow, 165) = Me.chkResidentUtilities.Value
    
    Dim mRange As Excel.Range, sReturnString As String
    Set mRange = ActiveSheet.Range("Comments")
    oPrePop.Cells(FirstRow, 166) = mRange.Cells(1, 1).Value
    


    '   If total HUD units>400, set AM check box to true
    '===================================================
    If o52723.Range("HA_Unit_Total") > 400 Then
        o52723.Range("M4") = True
    Else
        o52723.Range("M4") = False
    End If
        
    blnIgnoreUpdate = False
     
    Call Clear52723

    ActiveWorkbook.Save

    ActiveWindow.ScrollRow = 1
    ActiveSheet.Range("A2").Activate
    
    '-----------------------------------------------
    '   Resubmission message
    '   Commented out 2011-09-27
    '   Requested by Rahul and Vibha
    '-----------------------------------------------
'    MsgBox strAMP & " Re-submission complete.", , "HUD FORM 52723"
       
    ActiveWorkbook.Save
    Call UP5
    Sheets("52723").Columns("L").ClearContents
    ActiveWindow.DisplayGridlines = False
    
    Call P5

End Sub

Public Sub InfoCheck()
    '====================================================|
    'Check fields that must have data before submitting. |
    '====================================================|
    '
    Sheets("52723").Select
    '
    'Check no Section 1 information missing
    If Range("HA_Name") = "" Then
        MsgBox "Please fill in PHA name before submitting", , "FORM HUD-52723"
        End
    ElseIf Range("Address") = "" Then
        MsgBox "Please fill in PHA street address before submitting", , "FORM HUD-52723"
        End
    ElseIf Range("CityZip") = "" Then
        MsgBox "Please fill in PHA City and Zip before submitting", , "FORM HUD-52723"
        End
    End If
    '
    'Check ACC and DUNS
    '   Modified 2012-06-13 to eliminate test for ACC # since field is locked
    If Range("DUNS") = "" Then
        MsgBox "Please fill in DUNS number before submitting.", , "FORM HUD-52723"
        End
    End If
   '
'   Modified 06-10-08 to permit entry of special  situation AMP's
'   By Stephen Gsell per Rahul Jain -NOVAD
   'Check Units information
    If Range("UnitsTot").Value = "" Or Range("UnitsTot").Value = 0 Then
        Dim strReply As String
        Dim strMsg1 As String
        strMsg1 = "Total Units for this Project (" _
                  & ActiveSheet.Range("PPN") _
                  & ") as of 6/30 is either 0 or blank"
        strMsg1 = strMsg1 & vbCr & vbCr & _
                  "If this is correct, please press OK" & vbCr _
                  & "If not, please press Cancel."
        strReply = MsgBox(strMsg1, vbCritical _
                  + vbExclamation + vbOKCancel, "FORM HUD-52723")
        If strReply = vbCancel Then blnZero = True
    End If
    
    '
    'Check status of Checkboxes
    With ActiveSheet
        If .chk1231.Value = False And _
            .chk0331.Value = False And _
            .chk0630.Value = False And _
            .chk0930.Value = False Then
           MsgBox "Please fill in PHA fiscal year information in Section 1. 5" _
                , , "FORM HUD-52723"
           End
        End If
        '
        If (.chkCFR215.Value = False) Or (.chkUSC.Value = False) Then
           Application.GoTo Reference:=Range("A136"), Scroll:=True
           Range("A148").Select
           MsgBox "Please check relevant Certification Check Boxes in Section 5 before submitting.", , "FORM HUD-52723"
           End
        End If
        
        If (.chkCFR190.Value = False) And _
            .chkMgmtFee = True And _
            .Range("HA_Unit_Total") <= 400 Then
           Application.GoTo Reference:=Range("A136"), Scroll:=True
           Range("A144").Select
           MsgBox "Please check Certification Check Box in Section 5 before submitting.", , "FORM HUD-52723"
           End
        End If
        
        If (.chkCFR990.Value = False) And _
            .chkMgmtFee = True And _
            .Range("HA_Unit_Total") >= 250 Then
           Application.GoTo Reference:=Range("A136"), Scroll:=True
           Range("A146").Select
           MsgBox "Please check Certification Check Box in Section 5 before submitting.", , "FORM HUD-52723"
           End
        End If
        
    End With
   '
End Sub

Sub OpenUp()

    '=========================================
    '   Unprotects and displays all worksheets
    '   Restores all menu command bars
    '==========================================
    Unprotect
    RestoreMenusCommandBars

End Sub
 
Sub ProtectMe()
   
    '=====================================================|
    'Position to 52723 sheet, protect and hide worksheets |
    'Modified Feb 07 to use looping
    '=====================================================|
    
    Application.ScreenUpdating = False
    Unprotect
    
    Dim oWS 'As Worksheets
    Dim oW
    
    Sheets("52723-1").Activate
    Range("A1").Select
    Set oWS = ActiveWorkbook.Worksheets
        
    Sheets(oPP.Name).Visible = False
    Sheets("52723-1").Activate
    Range("A1").Select
    
    ActiveWindow.DisplayHeadings = False
    ActiveWorkbook.Protect Password:=strPSWD
      
End Sub

Sub UnprotectMe()
    
    '================================|
    'Unprotect/unhide all worksheets |
    'Modified Feb 07 to use looping
    '================================|
    
On Error Resume Next
ActiveWorkbook.Unprotect Password:=strPSWD
    Sheets("52723").Unprotect Password:=strPSWD
    Sheets("52723-1").Unprotect Password:=strPSWD
    Sheets("PrePop").Unprotect Password:=strPSWD
    Sheets("PrePop").Visible = True
    ActiveWindow.DisplayHeadings = True

'    ActiveWindow.DisplayHeadings = False
    ActiveWindow.DisplayGridlines = False
    ActiveWorkbook.Protect Password:=strPSWD

End Sub


Sub OnFileOpen52723()

    Dim c1 As Integer
    Dim strAns As String
    
    Call UP5
    Application.EnableEvents = True
    ActiveWindow.Zoom = 75
    Worksheets("52723").ScrollArea = "A1:J152"
    
    c1 = 1
    While c1 <= 23
        gbllngOldValues(c1) = Worksheets("52723").Cells(c1 + 34, 5)
        If c1 = 8 Or c1 = 23 Then
            gbllngOldValues(c1) = Worksheets("52723").Cells(c1 + 34, 7)
        End If
        strAns = strAns & vbCr & c1 & " - " & c1 + 34 & " > " & gbllngOldValues(c1)
        c1 = c1 + 1
    Wend
    
    gbllngOldValues(24) = Worksheets("52723").Cells(83, 7)
    gbllngOldValues(25) = Worksheets("52723").Range("P_Units")
    
    Application.GoTo Reference:="R1C1"
    Application.GoTo Reference:="HA_Unit_Total"
    Worksheets("52723").Unprotect (strPSWD)
    
    Worksheets("52723").Range("M9") = False
    If blnShowPrePop = True Then
        Sheets("PrePop").Visible = True
    Else
        Sheets("PrePop").Visible = False
    End If
    Call Clear52723

    Call UP5
    Range("A4:J4").Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
    ActiveWindow.DisplayHeadings = False
    ActiveWindow.DisplayGridlines = False
    Range("A1").Select
    Application.GoTo Reference:="R4C1"
    
    '-------------------------
    '   Added 2012-01-23
    o52723.Cells.Locked = True
    '-------------------------
    
    Call P5
End Sub

Sub CheckAmpBeforeSave()
     
    Dim strTitle As String
    Dim strMsg As String
    Dim Ans As String
    bClose = False
    bStop = False
    
'    bClose1 = True: bClose2 = True
    '==========================
    '    Check for FYE selected
    '==========================
    Call CheckFYE
'    Stop
    If bClose = False Then Exit Sub

    '    Check for Certification 1 and 3 checked
    Call CheckForCerts
' Stop
    If bClose = False Then
        Call UP5
        Exit Sub
    End If
'    ===============================
'    Added May 2011 to test for >250 and <400
'    ===============================

    '==================================================
    '   Added 2012-03-19
    '   Verify that Total ACC Units > 0 (P_UnitsTot >0)
    '   Commented out 2012-04-04 per RJ.  AMP could have zero ending units
    '==================================================

'    If Range("P_UnitsTot") > 0 Then
'        '   Do nothing
'    Else
'        strTitle = "Total ACC Units Test"
'        strMsg = "You cannot have Zero (0) total ACC Units."
'        strMsg = strMsg & vbCr & _
'            "Please press 'OK' to return to the Form and update this value."
'
'        MsgBox strMsg, vbOKOnly, strTitle
'
'        bStop = True
'        Application.EnableEvents = False
'        Range("P_Units").Select
'        Application.EnableEvents = True
'
'        Exit Sub
'    End If


'    Check for Section 3, Line B1 Equal to Zero or blank
    If IsEmpty(Range("P_B01")) Then
        strTitle = "PUM Formula Income"
        strMsg = "You left PUM Formula Income blank."
        strMsg = strMsg & vbCr & _
            "Press 'Cancel' to return to the Form and update this cell, or 'OK'" & _
            " to quit with the 'blank' value."
        
        Ans = MsgBox(strMsg, vbOKCancel + vbDefaultButton2, strTitle)
        If Ans = vbCancel Then
            bStop = True
            
            Range("P_B01").Select
            Exit Sub
        ElseIf Ans = vbOK Then
            bStop = False
            Exit Sub
        
        End If
    End If

       
    Application.DisplayAlerts = True
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.DisplayHeadings = False
    Application.Calculation = xlCalculationAutomatic
              
End Sub

Sub CheckFYE()

     Dim strAns As String, strPrompt As String, strTitle As String
     Dim strReply As String
     bClose = True
     strAns = "FYE not specified"
    
    With Me
    
        If .chk0331.Value = True Then
             strAns = "03"
        ElseIf .chk0630.Value = True Then strAns = "06"
        ElseIf .chk0930.Value = True Then strAns = "09"
        ElseIf .chk1231.Value = True Then strAns = "12"
        End If
    
     If Len(strAns) > 2 Then
          bClose = False
          strTitle = "Fiscal Year End"
          strPrompt = "Please select a Fiscal Year End in Section 1, Item #5"
          strReply = MsgBox(strPrompt, vbCritical + vbExclamation + vbOKOnly, strTitle)
          Call UP5
          Me.Range("D21").Select
          Call P5
          Exit Sub
     End If
    End With
          
End Sub

'Sub CheckForCerts()
'
'     Dim strAns As String, strPrompt As String, strTitle As String
'     Dim strReply As String
'     bClose = True
'     strAns = "Section 5 - Certifications"
'
'     If Me.chkUSC.Value = False Or Me.chkCFR215.Value = False Then
'          bClose = False
'          strTitle = strAns
'          strPrompt = "Please update your Certifications in Section 5."
'          strReply = MsgBox(strPrompt, vbCritical + vbExclamation + vbOKOnly, strTitle)
'          Me.Range("A141").Select
'          Exit Sub
'     End If
'
'End Sub

Sub CheckForAM()

    If TestAMFee = False Then
        Exit Sub
    Else
        Dim strAns As String, strPrompt As String, strTitle As String
        strAns = "Section 5 - Certifications"
    
        If Me.Range("HA_Unit_Total") Or Me.Range("UnitsTot") > intAM Then Me.chkMgmtFee = True
    End If

End Sub

Sub CheckForCerts()

    Dim strMsg As String
    Dim strReply As String
    Const strAns As String = "Section 5 - Certifications"
    Const int1 As Integer = 142
    Const int2 As Integer = 144
    Const int3 As Integer = 146
    Const int4 As Integer = 148
    Dim int0 As Integer
    Dim int9 As Integer
    Dim strCell As String
    strMsg = ""
    strCell = ""

    If Sheets("52723").Range("M9") = True Then
        '   ================================================================
        '   Section 3, Line 12 Eligible for Asset Management is checked
        '   Everything hinges on the status of the Asset Management check box
        '   on Section 3/Line 12
        '   ================================================================
        If Range("HA_Unit_Total") > 249 And Range("HA_Unit_Total") < 400 Then
            '   ======================================
            '   Scenario 1 - PHA Units >=250 and <= 400
            '   Both certifications 2 and 3 required
            '   If either certification is not checked, send a message
            '   ======================================
            If Me.chkCFR190.Value = False Or Me.chkCFR990.Value = False Then
                strMsg = "Please ensure that both Certification's 2 & 3 are checked."
                strCell = "A" & int3 & ",A" & int2
                int0 = int2
                int9 = int3
            Else
                '   ================================
                '   There is no Else, if both are already checked
                '   ================================
            End If
        ElseIf Range("HA_Unit_Total") >= 400 Then
            '   ======================================
            '   Scenario 2 - PHA Units > 400
            '   Only certification 3 (>250) required
            '   If certification is not checked, send a message
            '   ======================================
            If Me.chkCFR990.Value = False Then
                strMsg = "Please ensure that Certification 3 is checked."
                strCell = "A" & int3
                int0 = int3
                int9 = int3
                'Stop
            Else
                '   ================================
                '   There is no Else
                '   ================================
            End If
        ElseIf Range("HA_Unit_Total") <= 250 Then
            '   ======================================
            '   Scenario 3 - PHA Units <250
            '   Only certification 2 (<400) required
            '   If certification is not checked, send a message
            '   ======================================
            If Me.chkCFR190.Value = False Then
                strMsg = "Please ensure that Certification 2 is checked."
                strCell = "A" & int2
                int0 = int2
                int9 = int2
            Else
                '   ================================
                '   There is no Else
                '   ================================
            End If
        End If

    Else

        '
        '   Section 3, Line 12 AM not checked
        '
'        If Range("HA_Unit_Total") >= 400 Then
'            '   ======================================
'            '   Scenario 5 - PHA Must select AM but has not
'            '   ======================================
'            If Me.chkCFR990.Value = False Then
'                strMsg = "Please ensure that Certification 3 is checked."
'                '& vbCr & _
'                         "Please also check Section 3, Line 12 (Eligible for an Asset Management Fee)"
'                strCell = "A" & int3
'                int0 = int3
'                int9 = int3
'            Else
'                '   ================================
'                '   There is no Else
'                '   ================================
'            End If
'        End If

'        If Me.chkCFR190.Value = True Or Me.chkCFR990.Value = True Then
'            '   ======================================
'            '   Scenario 5 - PHA Must select AM but has not
'            '   ======================================
'            strMsg = "Please also check Section 3, Line 12 (Eligible for an Asset Management Fee)"
'            strCell = 1
'        End If

    End If

    If Me.chkCFR215.Value = 0 And Me.chkUSC.Value = 0 Then
        int0 = int1
        int9 = int4
        If Len(strCell) = 0 Then
            strCell = "A" & int1 & ",A" & int4
        Else
            strCell = strCell & ",A" & int1 & ",A" & int4
        End If
        strMsg = "Please ensure that both Certification's 1 & 4 are checked." & vbCr & strMsg
    ElseIf Me.chkCFR215.Value = 0 Then
        int0 = int1
        If int9 = 0 Then int9 = int0
        If Len(strCell) = 0 Then
            strCell = "A" & int1 & strCell
        Else
            strCell = strCell & ",A" & int1
        End If
        strMsg = "Please ensure that Certification 1 is checked." & vbCr & strMsg
    ElseIf Me.chkUSC.Value = 0 Then
        int9 = int4
        If int0 = 0 Then int0 = int9
        If Len(strCell) = 0 Then
            strCell = "A" & int1 & strCell
        Else
            strCell = strCell & ",A" & int1
        End If
        strMsg = "Please ensure that Certification 4 is checked." & vbCr & strMsg
    End If
    
    
    If Len(strCell) > 0 Or Len(strMsg) > 0 Then
        Dim strPrompt As String, strTitle As String
        bClose = False
        If Len(strCell) > 0 Then
            Application.EnableEvents = False
            Me.Range(strCell).Select
            Range("A" & int0).Activate
            Application.EnableEvents = True
        Else
            Application.EnableEvents = False
            Me.Range("D76:F76").Select
            Application.EnableEvents = True
        End If
        strReply = MsgBox(strMsg, vbCritical + vbExclamation + vbOKOnly, strAns)
    End If
        
'         Range("A146,A142,A148,A144").Select
'         Range("A144").Activate
   
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    
    Static blnCommentsFlag As Boolean

    If Target.Address = Range("Comments").Address And Len(Range("PPN")) > 0 Then
        blnCommentsFlag = True
        UP5
    Else
        If blnCommentsFlag Then
            blnCommentsFlag = False
            Call P5
        End If
    End If
    
End Sub


Sub GetlastYear()

    Dim strYear As String
    Dim intYear As Integer
     
    strYear = Trim(Me.Range("Funding_Period"))
    intYear = Right(strYear, 4) - 1
    
End Sub

Function TestBeforeSave() As String

    TestBeforeSave = vbNullString
    Dim strReply As String
    '----------------------------------
    '   Test for Section 1- Header Data
    '   FYE, DUNS, ACC, ROFO
    '----------------------------------
    strReply = vbNullString
    
    '   Test for FYE
    strReply = TestForFYE
    If Len(strReply) <> 0 Then
        TestBeforeSave = strReply
    
    '   Test for DUNS
    strReply = TestForDUNS
    If Len(strReply) <> 0 Then
        If Len(TestBeforeSave) = 0 Then
            TestBeforeSave = strReply
        Else
            TestBeforeSave = TestBeforeSave & vbCr & strReply
        End If
    End If

    '   Test for ROFO
    strReply = TestForROFO
    If Len(strReply) <> 0 Then
        If Len(TestBeforeSave) = 0 Then
            TestBeforeSave = strReply
        Else
            TestBeforeSave = TestBeforeSave & vbCr & strReply
        End If
    End If

    '   Test for ACC
    strReply = TestForACC
    If Len(strReply) <> 0 Then
        If Len(TestBeforeSave) = 0 Then
            TestBeforeSave = strReply
        Else
            TestBeforeSave = TestBeforeSave & vbCr & strReply
        End If
    End If


End Function

'==================================================================
Sub TestAmpBeforeSave()
     
    Dim strTitle As String
    Dim strMsg As String
    Dim Ans As String
    bClose = False
    bStop = False
    
'    bClose1 = True: bClose2 = True
    '==========================
    '    Check for FYE selected
    '==========================
    Call CheckFYE
'    Stop
    If bClose = False Then Exit Sub

    '    Check for Certification 1 and 3 checked
    Call CheckForCerts
' Stop
    If bClose = False Then
        Call UP5
        Exit Sub
    End If
'    ===============================
'    Added May 2011 to test for >250 and <400
'    ===============================

'  blnAMFee = True
    If TestAMFee = True Then Exit Sub

    '==================================================
    '   Added 2012-03-19
    '   Verify that Total ACC Units > 0 (P_UnitsTot >0)
    '==================================================

    If Range("P_UnitsTot") > 0 Then
        '   Do nothing
    Else
        strTitle = "Total ACC Units Test"
        strMsg = "You cannot have Zero (0) total ACC Units."
        strMsg = strMsg & vbCr & _
            "Please press 'OK' to return to the Form and update this value."
        
        MsgBox strMsg, vbOKOnly, strTitle
        
        bStop = True
        Application.EnableEvents = False
        Range("P_Units").Select
        Application.EnableEvents = True
        
        Exit Sub
    End If


'    Check for Section 3, Line B1 Equal to Zero or blank
    If IsEmpty(Range("P_B01")) Then
        strTitle = "PUM Formula Income"
        strMsg = "You left PUM Formula Income blank."
        strMsg = strMsg & vbCr & _
            "Press 'Cancel' to return to the Form and update this cell, or 'OK'" & _
            " to quit with the 'blank' value."
        
        Ans = MsgBox(strMsg, vbOKCancel + vbDefaultButton2, strTitle)
        If Ans = vbCancel Then
            bStop = True
            
            Range("P_B01").Select
            Exit Sub
        ElseIf Ans = vbOK Then
            bStop = False
            Exit Sub
        
        End If
    End If

       
    Application.DisplayAlerts = True
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.DisplayHeadings = False
    Application.Calculation = xlCalculationAutomatic
              
End Sub

Sub TestForCerts()

     Dim strAns As String, strPrompt As String, strTitle As String
     Dim strReply As String
     bClose = True
     strAns = "Section 5 - Certifications"
    
     If Me.chkUSC.Value = False Or Me.chkCFR215.Value = False Then
          bClose = False
          strTitle = strAns
          strPrompt = "Please update your Certifications in Section 5."
          strReply = MsgBox(strPrompt, vbCritical + vbExclamation + vbOKOnly, strTitle)
          Me.Range("A141").Select
          Exit Sub
     End If

End Sub

Sub TestForAM()

    If TestAMFee = False Then
        Exit Sub
    Else
        Dim strAns As String, strPrompt As String, strTitle As String
        strAns = "Section 5 - Certifications"
    
        If Me.Range("HA_Unit_Total") Or Me.Range("UnitsTot") > intAM Then Me.chkMgmtFee = True
    End If

End Sub

Function TestForAMFee() As Boolean

    TestAMFee = False
    Dim strMsg As String
    Dim strReply As String
    Const strAns As String = "Section 5 - Certifications"
    Const int2 As Integer = 144
    Const int3 As Integer = 146
    Dim strCell As String
    strMsg = ""
    strCell = ""

    If Sheets("52723").Range("M9") = True Then
        '   ================================================================
        '   Everything hinges on the status of the Asset Management check box on Sectio 3/LIne 12
        '   ================================================================
        If Range("HA_Unit_Total") > 249 And Range("HA_Unit_Total") < 400 Then
            '   ======================================
            '   Scenario 1 - PHA Units >=250 and <= 400
            '   Both certifications 2 and 3 required
            '   If either certification is not checked, send a message
            '   ======================================
            If Me.chkCFR190.Value = False Or Me.chkCFR990.Value = False Then
                strMsg = "Please ensure that both Certification's 2 & 3 are checked."
                strCell = "A" & int3 & ":A" & int2
            Else
                '   ================================
                '   There is no Else, if both are already checked
                '   ================================
            End If
        ElseIf Range("HA_Unit_Total") > 400 Then
            '   ======================================
            '   Scenario 2 - PHA Units > 400
            '   Only certification 3 (>250) required
            '   If certification is not checked, send a message
            '   ======================================
            If Me.chkCFR990.Value = False Then
                strMsg = "Please ensure that Certification 3 is checked."
                strCell = "A" & int3
                'Stop
            Else
                '   ================================
                '   There is no Else
                '   ================================
            End If
        ElseIf Range("HA_Unit_Total") < 250 Then
            '   ======================================
            '   Scenario 3 - PHA Units <250
            '   Only certification 2 (<400) required
            '   If certification is not checked, send a message
            '   ======================================
            If Me.chkCFR190.Value = False Then
                strMsg = "Please ensure that Certification 2 is checked."
                strCell = "A" & int2
            Else
                '   ================================
                '   There is no Else
                '   ================================
            End If
        End If

        If strMsg = "" Then
            TestAMFee = False
            bClose = True
            Exit Function
        End If

        bClose = False
        TestAMFee = True
        
        Range(strCell).Select
        strReply = MsgBox(strMsg, vbCritical + vbExclamation + vbOKOnly, strAns)
        
        Application.GoTo Reference:="R" & int3 & "C1", Scroll:=True
        Me.Range(strCell).Select
        
    End If

End Function

Function TestForFYE() As String

    Dim strAns As String, strPrompt As String, strTitle As String
    Dim strReply As String
    
    TestForFYE = vbNullString
    
    bClose = True
    strAns = "FYE not specified"
    
    With Me
        If .chk0331.Value = True Then
             strAns = "03"
        ElseIf .chk0630.Value = True Then strAns = "06"
        ElseIf .chk0930.Value = True Then strAns = "09"
        ElseIf .chk1231.Value = True Then strAns = "12"
        End If
    
        If Len(strAns) > 2 Then
            bClose = False
            TestForFYE = "Fiscal Year End is missing"
            Exit Function
        End If
    End With
          
End Function

Function TestForROFO() As String

    TestForROFO = vbNullString
    If Range("ROFO") = vbNullString Then
        TestForROFO = "ROFO code is missing"
    End If
    
End Function

Function TestForDUNS() As String

    TestForDUNS = vbNullString
    If Range("DUNS") = vbNullString Then
        TestForDUNS = "DUNS code is missing"
    End If
    
End Function

Function TestForACC() As String

    TestForACC = vbNullString
    If Range("ACC") = vbNullString Then
        TestForACC = "ACC code is missing"
    End If
    
End Function

Sub testPIC()

'    Application.EnableEvents = False
'    Range("PPN") = ""
    Me.Unprotect strPSWD
    Range("PPN") = "MA002002136"
 '   Application.EnableEvents = True
    
    Call PopulateEomBom(True)

End Sub

Function PopulateEomBom(blnEOM As Boolean)

    If Len(Range("PPN")) = 0 Then Exit Function
    Dim oBom As Worksheet
    Dim lngLR As Long
    Dim lngBOM As Long
    Dim strPPNEOM As String
    Dim lngCol As Long
    
    strPPNEOM = Range("PPN")
    Set oBom = Sheet6
    '
    '   Find the amp in the BOM_EOM sheet
    '
    lngBOM = 2
    lngLR = 0
    Do
        If oBom.Cells(lngBOM, 1) = "" Then Exit Do
        If oBom.Cells(lngBOM, 1) = strPPNEOM Then
            lngLR = lngBOM
            Exit Do
        End If
        lngBOM = lngBOM + 1
    Loop

    If blnEOM Then
        lngCol = 2
    Else
        lngCol = 14
    End If

    Application.EnableEvents = False
    
    '
    '   Modified 2012-04-19
    '   GSC
    '   To re 'lock' unlocked cells based on 2013 rules
    '   HA_TOTAL_UNITS(J15),Lines 01-02(E35-E37),Lines 05-09(E40:E45)
    '   Lines 11(E47) and 13(E50)
    
    With ActiveSheet
        .Unprotect (strPSWD)
        'Modified 2013-05-10 to also Lock Lines 10 and 12 (E46 and E49)
        'Had to structure the Lock this way to make it work...E40:E47 failed
        .Range("J15,E35:E36,E40:E47,E49:E50").Locked = False
        .Protect (strPSWD)
    End With
    
    Range("HA_UNIT_TOTAL") = oBom.Cells(lngBOM, lngCol + 0)
    Range("PL_01") = oBom.Cells(lngBOM, lngCol + 1)
    Range("PL_02") = oBom.Cells(lngBOM, lngCol + 2)
    Range("PL_05") = oBom.Cells(lngBOM, lngCol + 3)
    Range("PL_06") = oBom.Cells(lngBOM, lngCol + 4)
    
    '
    '   2012-08-17  Modified during testing to correct mapping errors
    '
    Range("PL_07") = oBom.Cells(lngBOM, lngCol + 5)
    Range("PL_08") = oBom.Cells(lngBOM, lngCol + 6)
    Range("PL_09") = oBom.Cells(lngBOM, lngCol + 7)
    Range("PL_10") = oBom.Cells(lngBOM, lngCol + 8)
    Range("PL_11") = oBom.Cells(lngBOM, lngCol + 9)
    Range("PL_12") = oBom.Cells(lngBOM, lngCol + 10)
    Range("PL_13") = oBom.Cells(lngBOM, lngCol + 11)

    With ActiveSheet
        .Unprotect (strPSWD)
        .Range("J15,E35:E36,E40:E47,E49:E50").Locked = True
        .Protect (strPSWD)
    End With
    Application.EnableEvents = True

End Function


Sub ClearScrollArea()

End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Mod00_Document_VBA_Code"
Option Explicit

Sub CreateCodeDocumentation()
    
    Dim SourceNum As Integer
    Dim DestNum As Integer
    Dim Temp As String
    Dim strTarget As String
    Dim strSource As String
    Dim intX As Integer
    Dim strModName As String
    
    strTarget = ActiveWorkbook.Path & "\VBA Documentation\Consolidate VBA Code.txt"
    If Dir(strTarget) <> "" Then
        Kill (strTarget)
    End If
    
    For intX = 1 To 255
        Close #intX
    Next
    Call ListModules

    ' If an error occurs, close the files and end the macro.
    On Error GoTo ErrHandler
    strTarget = ActiveWorkbook.Path & "\VBA Documentation\Consolidate VBA Code.txt"
    ' Open the destination text file.
    DestNum = FreeFile()
    Open strTarget For Append As DestNum
    For intX = 1 To 17
        If intX = 1 Then
            strSource = "ThisWorkbook"
        ElseIf intX = 2 Then
            strSource = "Sheet1"
        ElseIf intX = 3 Then
            strSource = "Sheet2"
        ElseIf intX = 4 Then
            strSource = "Sheet3"
        ElseIf intX = 5 Then
            strSource = "Sheet4"
        ElseIf intX = 6 Then
            strSource = "Sheet7"
        ElseIf intX = 7 Then
            strSource = "UserForm1"
        ElseIf intX = 8 Then
            strSource = "OpenMeUp"
        ElseIf intX = 9 Then
            strSource = "MoveDataII"
        ElseIf intX = 10 Then
            strSource = "GlobalVariables"
        ElseIf intX = 11 Then
            strSource = "Mod09_RestoreMenuBars"
        ElseIf intX = 12 Then
            strSource = "Mod20_AMFeeLogic"
        ElseIf intX = 13 Then
            strSource = "GlobalVariables"
        ElseIf intX = 14 Then
            strSource = "Mod99_OpenMeUp"
        ElseIf intX = 15 Then
            strSource = "Mod99_RangeNames"
        ElseIf intX = 16 Then
            strSource = "Mod20_ReadWriteToVBE"
        ElseIf intX = 17 Then
        End If
        strModName = strSource

        strSource = ActiveWorkbook.Path & "\VBA Documentation\" & strSource & "-PHA Tool VBA.txt"
        
        ' Open the source text file.
        SourceNum = FreeFile()
        Open strSource For Input As SourceNum
    
        ' Include the following line if the first line of the source
        ' file is a header row that you do now want to append to the
        ' destination file:
        ' Line Input #SourceNum, Temp
        
        ' Read each line of the source file and append it to the
        ' destination file.
        
        Print #DestNum, "********************************"
        Print #DestNum, strModName
        Print #DestNum, "********************************"
        Do While Not EOF(SourceNum)
            Line Input #SourceNum, Temp
            Print #DestNum, Temp
        Loop
        Close #SourceNum
    Next
CloseFiles:
    
    ' Close the destination file and the source file.
    Close #DestNum
    Call KillTextFiles
    
    Exit Sub
    
ErrHandler:
    MsgBox "Error # " & Err & ": " & Error(Err) & ": " & strModName
    Resume CloseFiles

End Sub

'Listing All Modules In A Project
'This code will list all the modules and their types in the workbook, starting the listing in cell A1.

Sub ListModules()
    Dim VBProj As VBIDE.VBProject
    Dim VBComp As VBIDE.VBComponent
    Dim WS As Worksheet
    Dim Rng As Range
    
    Dim strPath As String
    Dim strFileName As String
    
    Set VBProj = ActiveWorkbook.VBProject
    Set WS = ActiveWorkbook.Worksheets("Sheet2")
    Set Rng = WS.Range("A1")
    
    strPath = ActiveWorkbook.Path & "\VBA Documentation\"
    On Error Resume Next
    MkDir (strPath)
    On Error GoTo 0
    Call KillTextFiles
    On Error Resume Next
    For Each VBComp In VBProj.VBComponents
        Kill (strPath & VBComp.Name & "-PHA Tool VBA.txt")
        Call ExportVBComponent(VBComp, strPath, VBComp.Name & "-PHA Tool VBA.txt")

'            Rng(1, 1).Value = VBComp.Name
'            Rng(1, 2).Value = ComponentTypeToString(VBComp.Type)
'            Set Rng = Rng(2, 1)
    Next VBComp
    On Error GoTo 0
End Sub

Sub KillTextFiles()

    Dim VBProj As VBIDE.VBProject
    Dim VBComp As VBIDE.VBComponent
    Dim strTarget As String
    Dim strPath As String
    Dim strFileName As String
    
    Set VBProj = ActiveWorkbook.VBProject
    strPath = ActiveWorkbook.Path & "\VBA Documentation\"
    
    For Each VBComp In VBProj.VBComponents
        If Dir((strPath & VBComp.Name & "-PHA Tool VBA.txt")) <> "" Then
            Kill (strPath & VBComp.Name & "-PHA Tool VBA.txt")
        Else
'            MsgBox (strPath & VBComp.Name & "-PHA Tool VBA.txt does not exist")
        End If
        
    Next VBComp

End Sub
'You can export an existing VBComponent CodeModule to a text file.
'This can be useful if you are archiving modules to create a library
'of useful module to be used in other projects.

Public Function ExportVBComponent(VBComp As VBIDE.VBComponent, _
                FolderName As String, _
                Optional FileName As String, _
                Optional OverwriteExisting As Boolean = True) As Boolean
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' This function exports the code module of a VBComponent to a text
    ' file. If FileName is missing, the code will be exported to
    ' a file with the same name as the VBComponent followed by the
    ' appropriate extension.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Dim Extension As String
    Dim FName As String
    Extension = GetFileExtension(VBComp:=VBComp)
    If Trim(FileName) = vbNullString Then
        FName = VBComp.Name & Extension
    Else
        FName = FileName
        If InStr(1, FName, ".", vbBinaryCompare) = 0 Then
            FName = FName & Extension
        End If
    End If
    
    If StrComp(Right(FolderName, 1), "\", vbBinaryCompare) = 0 Then
        FName = FolderName & FName
    Else
        FName = FolderName & "\" & FName
    End If
    
    If Dir(FName, vbNormal + vbHidden + vbSystem) <> vbNullString Then
        If OverwriteExisting = True Then
            Kill FName
        Else
            ExportVBComponent = False
            Exit Function
        End If
    End If
'    MsgBox FName
    VBComp.Export FileName:=FName
    ExportVBComponent = True
    
    End Function
    
    Public Function GetFileExtension(VBComp As VBIDE.VBComponent) As String
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' This returns the appropriate file extension based on the Type of
    ' the VBComponent.
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Select Case VBComp.Type
            Case vbext_ct_ClassModule
                GetFileExtension = ".cls"
            Case vbext_ct_Document
                GetFileExtension = ".cls"
            Case vbext_ct_MSForm
                GetFileExtension = ".frm"
            Case vbext_ct_StdModule
                GetFileExtension = ".bas"
            Case Else
                GetFileExtension = ".bas"
        End Select
        
    End Function
    
    Function ComponentTypeToString(ComponentType As VBIDE.vbext_ComponentType) As String
        Select Case ComponentType
            Case vbext_ct_ActiveXDesigner
                ComponentTypeToString = "ActiveX Designer"
            Case vbext_ct_ClassModule
                ComponentTypeToString = "Class Module"
            Case vbext_ct_Document
                ComponentTypeToString = "Document Module"
            Case vbext_ct_MSForm
                ComponentTypeToString = "UserForm"
            Case vbext_ct_StdModule
                ComponentTypeToString = "Code Module"
            Case Else
                ComponentTypeToString = "Unknown Type: " & CStr(ComponentType)
        End Select
    End Function
    
'Listing All Procedures In A Module
'This code will list all the procedures in Module1, beginning the listing in cell A1.

    Sub ListProcedures()
        Dim VBProj As VBIDE.VBProject
        Dim VBComp As VBIDE.VBComponent
        Dim CodeMod As VBIDE.CodeModule
        Dim LineNum As Long
        Dim NumLines As Long
        Dim WS As Worksheet
        Dim Rng As Range
        Dim ProcName As String
        Dim ProcKind As VBIDE.vbext_ProcKind
        
        Set VBProj = ActiveWorkbook.VBProject
        Set VBComp = VBProj.VBComponents("Module1")
        Set CodeMod = VBComp.CodeModule
        
        Set WS = ActiveWorkbook.Worksheets("Sheet1")
        Set Rng = WS.Range("A1")
        With CodeMod
            LineNum = .CountOfDeclarationLines + 1
            Do Until LineNum >= .CountOfLines
                ProcName = .ProcOfLine(LineNum, ProcKind)
                Rng.Value = ProcName
                Rng(1, 2).Value = ProcKindString(ProcKind)
                LineNum = .ProcStartLine(ProcName, ProcKind) + _
                        .ProcCountLines(ProcName, ProcKind) + 1
                Set Rng = Rng(2, 1)
            Loop
        End With

    End Sub
    
    
    Function ProcKindString(ProcKind As VBIDE.vbext_ProcKind) As String
        Select Case ProcKind
            Case vbext_pk_Get
                ProcKindString = "Property Get"
            Case vbext_pk_Let
                ProcKindString = "Property Let"
            Case vbext_pk_Set
                ProcKindString = "Property Set"
            Case vbext_pk_Proc
                ProcKindString = "Sub Or Function"
            Case Else
                ProcKindString = "Unknown Type: " & CStr(ProcKind)
        End Select
    End Function


SectionBreak

'General Infomation About A Procedure

'The code below returns the following information about a procedure in a module,
'loaded into the ProcInfo Type. The function ProcedureInfo takes as input then
'name of the procedure, a VBIDE.vbext_ProcKind procedure type, and a reference to
'the CodeModule object containing the procedure.

    Public Enum ProcScope
        ScopePrivate = 1
        ScopePublic = 2
        ScopeFriend = 3
        ScopeDefault = 4
    End Enum
    
    Public Enum LineSplits
        LineSplitRemove = 0
        LineSplitKeep = 1
        LineSplitConvert = 2
    End Enum
    
    Public Type ProcInfo
        ProcName As String
        ProcKind As VBIDE.vbext_ProcKind
        ProcStartLine As Long
        ProcBodyLine As Long
        ProcCountLines As Long
        ProcScope As ProcScope
        ProcDeclaration As String
    End Type

'    Function ProcedureInfo(ProcName As String, ProcKind As VBIDE.vbext_ProcKind, _
'        CodeMod As VBIDE.CodeModule) As ProcInfo
'
'        Dim PInfo As ProcInfo
'        Dim BodyLine As Long
'        Dim Declaration As String
'        Dim FirstLine As String
'
'
'        BodyLine = CodeMod.ProcStartLine(ProcName, ProcKind)
'        If BodyLine > 0 Then
'            With CodeMod
'                PInfo.ProcName = ProcName
'                PInfo.ProcKind = ProcKind
'                PInfo.ProcBodyLine = .ProcBodyLine(ProcName, ProcKind)
'                PInfo.ProcCountLines = .ProcCountLines(ProcName, ProcKind)
'                PInfo.ProcStartLine = .ProcStartLine(ProcName, ProcKind)
'
'                FirstLine = .Lines(PInfo.ProcBodyLine, 1)
'                If StrComp(Left(FirstLine, Len("Public")), "Public", vbBinaryCompare) = 0 Then
'                    PInfo.ProcScope = ScopePublic
'                ElseIf StrComp(Left(FirstLine, Len("Private")), "Private", vbBinaryCompare) = 0 Then
'                    PInfo.ProcScope = ScopePrivate
'                ElseIf StrComp(Left(FirstLine, Len("Friend")), "Friend", vbBinaryCompare) = 0 Then
'                    PInfo.ProcScope = ScopeFriend
'                Else
'                    PInfo.ProcScope = ScopeDefault
'                End If
'                PInfo.ProcDeclaration = GetProcedureDeclaration(CodeMod, ProcName, ProcKind, LineSplitKeep)
'            End With
'        End If
'
'        ProcedureInfo = PInfo
'
'    End Function
    
    
'Public Function GetProcedureDeclaration(CodeMod As VBIDE.CodeModule, _
'        ProcName As String, ProcKind As VBIDE.vbext_ProcKind, _
'        Optional LineSplitBehavior As LineSplits = LineSplitRemove)
'    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'    ' GetProcedureDeclaration
'    ' This return the procedure declaration of ProcName in CodeMod. The LineSplitBehavior
'    ' determines what to do with procedure declaration that span more than one line using
'    ' the "_" line continuation character. If LineSplitBehavior is LineSplitRemove, the
'    ' entire procedure declaration is converted to a single line of text. If
'    ' LineSplitBehavior is LineSplitKeep the "_" characters are retained and the
'    ' declaration is split with vbNewLine into multiple lines. If LineSplitBehavior is
'    ' LineSplitConvert, the "_" characters are removed and replaced with vbNewLine.
'    ' The function returns vbNullString if the procedure could not be found.
'    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'        Dim LineNum As Long
'        Dim S As String
'        Dim Declaration As String
'
'        On Error Resume Next
'        LineNum = CodeMod.ProcBodyLine(ProcName, ProcKind)
'        If Err.Number <> 0 Then
'            Exit Function
'        End If
'        S = CodeMod.Lines(LineNum, 1)
'        Do While Right(S, 1) = "_"
'            Select Case True
'                Case LineSplitBehavior = LineSplitConvert
'                    S = Left(S, Len(S) - 1) & vbNewLine
'                Case LineSplitBehavior = LineSplitKeep
'                    S = S & vbNewLine
'                Case LineSplitBehavior = LineSplitRemove
'                    S = Left(S, Len(S) - 1) & " "
'            End Select
'            Declaration = Declaration & S
'            LineNum = LineNum + 1
'            S = CodeMod.Lines(LineNum, 1)
'        Loop
'        Declaration = SingleSpace(Declaration & S)
'        GetProcedureDeclaration = Declaration
'
'
'    End Function
    
    Private Function SingleSpace(ByVal Text As String) As String
        Dim Pos As String
        Pos = InStr(1, Text, Space(2), vbBinaryCompare)
        Do Until Pos = 0
            Text = Replace(Text, Space(2), Space(1))
            Pos = InStr(1, Text, Space(2), vbBinaryCompare)
        Loop
        SingleSpace = Text
    End Function


'You can call the ProcedureInfo function using code like the following:

    Sub ShowProcedureInfo()
        Dim VBProj As VBIDE.VBProject
        Dim VBComp As VBIDE.VBComponent
        Dim CodeMod As VBIDE.CodeModule
        Dim CompName As String
        Dim ProcName As String
        Dim ProcKind As VBIDE.vbext_ProcKind
        Dim PInfo As ProcInfo
        
        CompName = "modVBECode"
        ProcName = "ProcedureInfo"
        ProcKind = vbext_pk_Proc
        
        Set VBProj = ActiveWorkbook.VBProject
        Set VBComp = VBProj.VBComponents(CompName)
        Set CodeMod = VBComp.CodeModule
        
        PInfo = ProcedureInfo(ProcName, ProcKind, CodeMod)
        
        Debug.Print "ProcName: " & PInfo.ProcName
        Debug.Print "ProcKind: " & CStr(PInfo.ProcKind)
        Debug.Print "ProcStartLine: " & CStr(PInfo.ProcStartLine)
        Debug.Print "ProcBodyLine: " & CStr(PInfo.ProcBodyLine)
        Debug.Print "ProcCountLines: " & CStr(PInfo.ProcCountLines)
        Debug.Print "ProcScope: " & CStr(PInfo.ProcScope)
        Debug.Print "ProcDeclaration: " & PInfo.ProcDeclaration
    End Sub

Sub CombineTextFiles()

    'Mod00_GlobalVaariables
    'Mod09_RestoreMenuBars
    'Mod20_AMFeeLogic
    
    Dim strPaath As String
    Dim FreeFile As Integer
    Dim strTextFile As String
    Dim myVar
    FileNumber = FreeFile    ' Get unused file number.
    

    strPath = ActiveWorkbook.Path & "\VBA Documentation\"
    strPath = strPath & "Mod09_RestoreMenuBars" & "-PHA Tool VBA.txt"
    'Mod09_RestoreMenuBars-PHA Tool VBA
    strTextFile = strPath
    MsgBox strTextFile
    
    Open strTextFile For Input As #5 'FreeFile
    myVar = Input$(LOF(5), 5) 'reads whole file
    Close
    
    strPath = ActiveWorkbook.Path & "\VBA Documentation\Consolidated.txt"
    
    Open strPath For Binary As #6    ' Create file name.
    Put #6, , myVar 'writes whole of A to file
    Close
    
    



''===============
'Open MyFile For Input As #1
'myVar = Input$(10000, 1) 'reads 10000 chars   OR
'myVar = Input$(LOF(1), 1) 'reads whole file
'
''To read/write delimited data instantly between a file and a memory array, try this (Excel 8 only, sorry).
'
''to write the data
''dimension and fill array A, then ....
'Open "c:\temp\test.txt" For Binary As #1
'Put #1, , A 'writes whole of A to file
'Close
'
''to read it back
'Dim A(30, 10) As Single
'Open "c:\temp\test.txt" For Binary As #1
'Get #1, , A 'reads whole of A
'Close




'================





End Sub



' InQuest injected base64 decoded content
' jwAj
' jwAj

INQUEST-PP=macro
