Attribute VB_Name = "Module1"
' PlanCAD Automation Sample

Option Explicit

Private Declare Function GetActiveWindow Lib "User32" () As Long
 
' recognize plan
Sub RecognizePlan()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  ' recognize plan automatically
  ptApp.RecognizeAuto
  
  ' recognize objects in specified location
  'Dim pnt(2) As Double
  'pnt(0) = 10
  'pnt(1) = 10
  'ptApp.RecognizeWall pnt
  'ptApp.RecognizeObject pnt
  
  ' release application
  Set ptApp = Nothing
End Sub

' imports all plan objects
Sub ImportPTObjects()
  ' import parameters
  GetPTParameters
  
  ' import templates
  GetPTTemplates
  
  ' clear "vectors" sheet
  With Worksheets("Vectors")
    Dim row As Integer
    row = 2
    While .Cells(row, 1).Formula <> ""
      Range(.Cells(row, 1), .Cells(row, 9)).ClearContents
      row = row + 1
    Wend
  End With

  ' import objects
  ImportPTObjectsByType (ptObjTypeWall)
  ImportPTObjectsByType (ptObjTypeColumn)
  ImportPTObjectsByType (ptObjTypeWindow)
  ImportPTObjectsByType (ptObjTypeDoor)
  ImportPTObjectsByType (ptObjTypeUserObject)
  ImportPTObjectsByType (ptObjTypeWallObject)
  ImportPTObjectsByType (ptObjTypeStair)
  ImportPTObjectsByType (ptObjTypeRoom)
  ImportPTObjectsByType (ptObjTypeFlat)
  ImportPTObjectsByType (ptObjTypeLand)
  ImportPTObjectsByType (ptObjTypeLandPart)
  ImportPTObjectsByType (ptObjTypeBuildingPart)
End Sub

' exports all plan objects
Sub ExportPTObjects()
  ' try load templates library
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  ptApp.LoadTemplates (Worksheets("Templates").Cells(2, 2).Formula)
  Set ptApp = Nothing
  
  ' update templates
  GetPTTemplates
    
  ' export objects
  ExportPTObjectsByType (ptObjTypeWall)
  ExportPTObjectsByType (ptObjTypeColumn)
  ExportPTObjectsByType (ptObjTypeWindow)
  ExportPTObjectsByType (ptObjTypeDoor)
  ExportPTObjectsByType (ptObjTypeUserObject)
  ExportPTObjectsByType (ptObjTypeWallObject)
  ExportPTObjectsByType (ptObjTypeStair)
  ExportPTObjectsByType (ptObjTypeFlat)
  ExportPTObjectsByType (ptObjTypeRoom)
  ExportPTObjectsByType (ptObjTypeLand)
  ExportPTObjectsByType (ptObjTypeLandPart)
  ExportPTObjectsByType (ptObjTypeBuildingPart)
End Sub

' gets parameters
Sub GetPTParameters()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  With Worksheets("Parameters")
    Dim row As Integer
    row = 2
    While .Cells(row, 1).Formula <> ""
      .Cells(row, 2).Formula = ptApp.Parameter(.Cells(row, 1).Formula)
      row = row + 1
    Wend
  End With

End Sub

' sets parameters
Sub SetPTParameters()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  With Worksheets("Parameters")
    Dim row As Integer
    row = 2
    While .Cells(row, 1).Formula <> ""
      ptApp.Parameter(.Cells(row, 1).Formula) = .Cells(row, 2).Formula
      row = row + 1
    Wend
  End With
 
  ' gets parameters
  GetPTParameters
End Sub

' show parameters dialog
Sub EditPTParameters()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  ptApp.ShowParametersDlg (GetActiveWindow())
  ' gets parameters
  GetPTParameters
End Sub

' gets templates
Sub GetPTTemplates()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  ' get library filename
  Worksheets("Templates").Cells(2, 2).Formula = ptApp.TemplatesLibrary
   
  Dim row As Integer
  Dim pnt As Variant
  Dim ptTpl As PTTemplate
  With Worksheets("Templates")
    row = 4
    For Each ptTpl In ptApp.Templates
      .Cells(row, 1).Formula = ptTpl.Name
      .Cells(row, 2).Formula = CBool(ptTpl.Active)
      .Cells(row, 3).Formula = PTType2Str(ptTpl.Type)
      .Cells(row, 4).Formula = ptTpl.Replace
      pnt = ptTpl.Origin
      .Cells(row, 5).Formula = Point2String((pnt(0)), (pnt(1)))
      .Cells(row, 6).Formula = ptTpl.WallWidth
      .Cells(row, 7).Formula = CBool(ptTpl.CanOverlap)
      .Cells(row, 8).Formula = CBool(ptTpl.SearchMirror)
      row = row + 1
    Next
    
    ' clear last records
    While .Cells(row, 1).Formula <> ""
      Range(.Cells(row, 1), .Cells(row, 10)).ClearContents
      row = row + 1
    Wend
  End With
  
  ' release application
  Set ptApp = Nothing
End Sub

' shows templates dialog
Sub EditPTTemplates()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  ptApp.ShowTemplatesDlg (GetActiveWindow())
  ' gets templates
  GetPTTemplates
  ' release application
  Set ptApp = Nothing
End Sub

' removes template
Sub RemovePTTemplate()
  If (ActiveCell.row >= 4) Then
    ' get the plan model
    Dim ptApp As PTApplication
    Set ptApp = GetPlanModel
    
    Dim Template As PTTemplate
    Dim TemplatesCol As PTTemplates
    Set TemplatesCol = ptApp.Templates
    Set Template = TemplatesCol(Cells(ActiveCell.row, 1).Formula)
    TemplatesCol.Remove Template
    Range(Cells(ActiveCell.row, 1), Cells(ActiveCell.row, 10)).Delete
    ' release application
    Set ptApp = Nothing
  End If
End Sub

' creates new object
Sub CreatePTObject()
  CreatePTObjectByType WSName2PTType(ActiveCell.Worksheet.Name)
End Sub

' removes object
Sub RemovePTObject()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  Dim handle
  handle = ActiveCell.Worksheet.Cells(ActiveCell.row, 1)
  
  On Error Resume Next
  ptApp.Objects(handle).Erase
  If Err <> 0 Then
    MsgBox ("Can't remove object!")
  Else
    Range(Cells(ActiveCell.row, 1), Cells(ActiveCell.row, 10)).Delete
  End If
  On Error GoTo 0
     
  ' release application
  Set ptApp = Nothing
End Sub

' show edit dialog
Sub EditPTObject()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  ' get object by it's objectId
  Dim ptObj As IPTObject
  Dim objectId As String 'Long
  
  objectId = ActiveCell.Worksheet.Cells(ActiveCell.row, 1).Value
  On Error Resume Next
  Set ptObj = ptApp.Objects(objectId)
  If Err <> 0 Then
    On Error GoTo 0
    MsgBox ("Can't get object for editing!")
  Else
    On Error GoTo 0
    ptObj.ShowEditDlg (GetActiveWindow())
    ImportPTObject ptObj, Range(Cells(ActiveCell.row, 1), Cells(ActiveCell.row, 10))
  End If
   
  ' release application
  Set ptApp = Nothing
End Sub

' export object
Sub ExportActivePTObject()
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  ' get object by it's objectId
  Dim ptObj As IPTObject
  Dim ptObjects As IPTObjects
  Dim objectId As String
  objectId = ActiveCell.Worksheet.Cells(ActiveCell.row, 1).Value
  On Error Resume Next
  Set ptObjects = ptApp.Objects
  Set ptObj = ptObjects(objectId)
  If Err <> 0 Then
    ' create object
    On Error GoTo 0
    Set ptObj = ptObjects.Create(WSName2PTType(ActiveCell.Worksheet.Name))
  End If
  On Error GoTo 0
  
  ExportPTObject ptObj, Range(Cells(ActiveCell.row, 1), Cells(ActiveCell.row, 10))
  ImportPTObject ptObj, Range(Cells(ActiveCell.row, 1), Cells(ActiveCell.row, 10))
   
  ' release application
  Set ptApp = Nothing
End Sub

' imports plan objects
Sub ImportActivePTObjects()
  ImportPTObjectsByType (WSName2PTType(ActiveCell.Worksheet.Name))
End Sub

' exports objects to plan
Sub ExportActivePTObjects()
  ExportPTObjectsByType (WSName2PTType(ActiveCell.Worksheet.Name))
End Sub

' imports objects from plan
Sub ImportPTObjectsByType(objType As PTObjectType)
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  ' get plan objects
  Dim ptObjs As ptObjects
  Set ptObjs = ptApp.ObjectsByType(objType)
  
  Dim i, row As Integer
  Dim ptObj As IPTObject
  With Worksheets(PTType2WSName(objType))
    row = 2
    For Each ptObj In ptObjs
      If ImportPTObject(ptObj, Range(.Cells(row, 1), .Cells(row, 10))) Then row = row + 1
    Next
    
    ' clear last records
    While .Cells(row, 1).Formula <> ""
      Range(.Cells(row, 1), .Cells(row, 8)).ClearContents
      row = row + 1
    Wend
  End With
  
  ' release objects
  Set ptObjs = Nothing
  Set ptApp = Nothing
End Sub

' export objects
Sub ExportPTObjectsByType(objType As PTObjectType)
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  ' get plan objects
  Dim ptObjs As ptObjects
  Set ptObjs = ptApp.ObjectsByType(objType)
  
  Dim i As Integer, row As Integer
  Dim ptObj As IPTObject
  Dim handle As String, new_handle As String
  Dim bNewObject As Boolean
  With Worksheets(PTType2WSName(objType))
    row = 2
    While .Cells(row, 1).Formula <> ""
      handle = .Cells(row, 1).Formula
      
      ' try get object
      Set ptObj = Nothing
      bNewObject = True
      If handle <> "" Then
        On Error Resume Next
        Set ptObj = ptObjs.Item(handle)
        If Err = 0 Then bNewObject = False
        On Error GoTo 0
      End If
      
      ' create object
      If bNewObject Then
        Set ptObj = ptApp.Objects.Create(objType)
      End If
      
      ' update "owner" property for vectors
      If objType = ptObjTypeRoom Or objType = ptObjTypeFlat Then
        UpdateObjectHandle handle, ptObj.handle, Worksheets("Vectors"), 1
      End If
      
      ExportPTObject ptObj, Range(.Cells(row, 1), .Cells(row, 10))
      ImportPTObject ptObj, Range(.Cells(row, 1), .Cells(row, 10))
      new_handle = ptObj.handle
      
      ' update "wall" property for wall objects
      If objType = ptObjTypeWall Then
        UpdateObjectHandle handle, new_handle, Worksheets(PTType2WSName(ptObjTypeWindow)), 6
        UpdateObjectHandle handle, new_handle, Worksheets(PTType2WSName(ptObjTypeDoor)), 6
        UpdateObjectHandle handle, new_handle, Worksheets(PTType2WSName(ptObjTypeWallObject)), 6
      End If
      
      ' update "flat" property for rooms
      If objType = ptObjTypeFlat Then
        UpdateObjectHandle handle, new_handle, Worksheets("Rooms"), 8
      End If
     
      Set ptObj = Nothing
      row = row + 1
    Wend
  End With
  
  ' release objects
  Set ptObjs = Nothing
  Set ptApp = Nothing
End Sub

' update wall property for wall objects
Sub UpdateObjectWalls(objectId As Long, new_objectId As Long, objType As PTObjectType)
  ' update "wall" property for new objectId
  If objectId <> 0 And new_objectId <> objectId Then
    ' update wall objectId
    With Worksheets(PTType2WSName(objType))
      Dim row As Integer
      row = 2
      While .Cells(row, 1).Formula <> ""
        If .Cells(row, 6).Formula <> "" And val(.Cells(row, 6).Formula) = objectId Then
          .Cells(row, 6).Formula = str$(new_objectId)
        End If
        row = row + 1
      Wend
    End With
  End If
End Sub

' create new object
Sub CreatePTObjectByType(objType As PTObjectType)
  ' get the plan model
  Dim ptApp As PTApplication
  Set ptApp = GetPlanModel
  
  ' seek last object
  Dim i As Integer, row As Integer
  row = 2
  While Cells(row, 1).Formula <> ""
    row = row + 1
  Wend
  
  ' create new object
  Dim ptObj As IPTObject
  Dim pt_Objects As IPTObjects
  Set pt_Objects = ptApp.Objects
  Set ptObj = pt_Objects.Create(objType)
  ImportPTObject ptObj, Range(Cells(row, 1), Cells(row, 10))
  Set ptObj = Nothing
  
  ' release application
  Set ptApp = Nothing
End Sub

' get object from plan
Function ImportPTObject(ptObj As Object, r As Range) As Boolean
  Dim pnt As Variant
  Dim Wall As PTWall
  
  Range(r.Cells(1, 1), r.Cells(1, 10)).ClearContents
  
  Select Case ptObj.Type
  ' wall
  Case ptObjTypeWall
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.WallType
    pnt = ptObj.StartPoint
    r.Cells(1, 4).Formula = Point2String((pnt(0)), (pnt(1)))
    pnt = ptObj.EndPoint
    r.Cells(1, 5).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 6).Formula = ptObj.Width
    r.Cells(1, 7).Formula = ptObj.Bulge
    r.Cells(1, 8).Formula = ptObj.Objects.Count
    ImportPTObject = True
    
  ' column
  Case ptObjTypeColumn
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    pnt = ptObj.InsertionPoint
    r.Cells(1, 3).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 4).Formula = ptObj.Angle
    r.Cells(1, 5).Formula = ptObj.ScaleX
    r.Cells(1, 6).Formula = ptObj.ScaleY
    r.Cells(1, 7).Formula = ptObj.Width
    ImportPTObject = True
    
  ' window
  Case ptObjTypeWindow
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    pnt = ptObj.InsertionPoint
    r.Cells(1, 3).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 4).Formula = ptObj.Angle
    r.Cells(1, 5).Formula = ptObj.ScaleX
    r.Cells(1, 6).Formula = ptObj.ScaleY
    
    Set Wall = ptObj.Wall
    If Not Wall Is Nothing Then
        r.Cells(1, 7).Formula = Wall.handle
    End If
    ImportPTObject = True
    
  ' door
  Case ptObjTypeDoor
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    pnt = ptObj.InsertionPoint
    r.Cells(1, 3).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 4).Formula = ptObj.Angle
    r.Cells(1, 5).Formula = ptObj.ScaleX
    r.Cells(1, 6).Formula = ptObj.ScaleY
    
    Set Wall = ptObj.Wall
    If Not Wall Is Nothing Then
        r.Cells(1, 7).Formula = Wall.handle
    End If
    ImportPTObject = True
    
  ' user object
  Case ptObjTypeUserObject
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    pnt = ptObj.InsertionPoint
    r.Cells(1, 3).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 4).Formula = ptObj.Angle
    r.Cells(1, 5).Formula = ptObj.ScaleX
    r.Cells(1, 6).Formula = ptObj.ScaleY
    ImportPTObject = True
    
  ' wall object
  Case ptObjTypeWallObject
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    pnt = ptObj.InsertionPoint
    r.Cells(1, 3).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 4).Formula = ptObj.Angle
    r.Cells(1, 5).Formula = ptObj.ScaleX
    r.Cells(1, 6).Formula = ptObj.ScaleY
    
    Set Wall = ptObj.Wall
    If Not Wall Is Nothing Then
        r.Cells(1, 7).Formula = Wall.handle
    End If
    ImportPTObject = True
    
  ' stair
  Case ptObjTypeStair
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.StairType
    pnt = ptObj.StartPoint
    r.Cells(1, 4).Formula = Point2String((pnt(0)), (pnt(1)))
    pnt = ptObj.EndPoint
    r.Cells(1, 5).Formula = Point2String((pnt(0)), (pnt(1)))
    r.Cells(1, 6).Formula = ptObj.Width
    r.Cells(1, 7).Formula = ptObj.Step
    ImportPTObject = True
    
  ' room
  Case ptObjTypeRoom
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.RoomId
    r.Cells(1, 4).Formula = ptObj.FlatId
    r.Cells(1, 5).Formula = ptObj.Description
    r.Cells(1, 6).Formula = ptObj.Height
    r.Cells(1, 7).Formula = ptObj.Area
    
    Dim Flat As ptFlat
    Set Flat = ptObj.Flat
    If Not Flat Is Nothing Then
        r.Cells(1, 8).Formula = Flat.handle
    End If
    SavePTObjectVectors ptObj
    ImportPTObject = True
    
  ' flat
  Case ptObjTypeFlat
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.FlatId
    r.Cells(1, 4).Formula = ptObj.Description
    r.Cells(1, 5).Formula = ptObj.Height
    r.Cells(1, 6).Formula = ptObj.Area
    r.Cells(1, 7).Formula = ptObj.Objects.Count
    SavePTObjectVectors ptObj
    ImportPTObject = True
 
 ' Land
  Case ptObjTypeLand
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.Description
    r.Cells(1, 5).Formula = ptObj.DocumentedArea
    
    SavePTObjectVectors ptObj
    ImportPTObject = True
    
  ' LandPart
  Case ptObjTypeLandPart
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.Litera
    r.Cells(1, 3).Formula = ptObj.Description
    r.Cells(1, 4).Formula = ptObj.CleaningArea
    
    SavePTObjectVectors ptObj
    ImportPTObject = True

    ' BuildingPart
  Case ptObjTypeBuildingPart
    r.Cells(1, 1).Formula = ptObj.handle
    r.Cells(1, 2).Formula = ptObj.TemplateName
    r.Cells(1, 3).Formula = ptObj.Description
    r.Cells(1, 4).Formula = ptObj.Litera
    r.Cells(1, 5).Formula = ptObj.BuildingCategory
        
    SavePTObjectVectors ptObj
    ImportPTObject = True
    
  ' unknow object
  Case Else
    ImportPTObject = False
    
  End Select
      
End Function

' put object to plan
Function ExportPTObject(ptObj As Object, r As Range) As Boolean
  Dim pnt As Variant
  Dim Walls As ptObjects
  Dim Wall As PTWall
  Dim ptApp As PTApplication
    
  Select Case ptObj.Type
  ' wall
  Case ptObjTypeWall
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.WallType = r.Cells(1, 3).Formula
    ptObj.StartPoint = String2Point(r.Cells(1, 4).Formula)
    ptObj.EndPoint = String2Point(r.Cells(1, 5).Formula)
    ptObj.Width = val(r.Cells(1, 6).Formula)
    ptObj.Bulge = val(r.Cells(1, 7).Formula)
    ExportPTObject = True
    
  ' column
  Case ptObjTypeColumn
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.InsertionPoint = String2Point(r.Cells(1, 3).Formula)
    ptObj.Angle = val(r.Cells(1, 4).Formula)
    ptObj.ScaleX = val(r.Cells(1, 5).Formula)
    ptObj.ScaleY = val(r.Cells(1, 6).Formula)
    ptObj.Width = val(r.Cells(1, 7).Formula)
    ExportPTObject = True
    
  ' window
  Case ptObjTypeWindow
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.InsertionPoint = String2Point(r.Cells(1, 3).Formula)
    ptObj.Angle = val(r.Cells(1, 4).Formula)
    
    ptObj.ScaleX = val(r.Cells(1, 5).Formula)
    ptObj.ScaleY = val(r.Cells(1, 6).Formula)
    
    Set ptApp = GetPlanModel
    Set Walls = ptApp.ObjectsByType(ptObjTypeWall)
    Set Wall = Walls.Item(r.Cells(1, 7).Formula)
    
    If Not Wall Is Nothing Then
        ptObj.Wall = Wall
    End If
    ExportPTObject = True
    
  ' door
  Case ptObjTypeDoor
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.InsertionPoint = String2Point(r.Cells(1, 3).Formula)
    ptObj.Angle = val(r.Cells(1, 4).Formula)
    ptObj.ScaleX = val(r.Cells(1, 5).Formula)
    ptObj.ScaleY = val(r.Cells(1, 6).Formula)
  
    Set ptApp = GetPlanModel
    Set Walls = ptApp.ObjectsByType(ptObjTypeWall)
    Set Wall = Walls.Item(r.Cells(1, 7).Formula)
    
    If Not Wall Is Nothing Then
        ptObj.Wall = Wall
    End If
    ExportPTObject = True
    
  ' user object
  Case ptObjTypeUserObject
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.InsertionPoint = String2Point(r.Cells(1, 3).Formula)
    ptObj.Angle = val(r.Cells(1, 4).Formula)
    ptObj.ScaleX = val(r.Cells(1, 5).Formula)
    ptObj.ScaleY = val(r.Cells(1, 6).Formula)
    ExportPTObject = True
    
  ' wall object
  Case ptObjTypeWallObject
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.InsertionPoint = String2Point(r.Cells(1, 3).Formula)
    ptObj.Angle = val(r.Cells(1, 4).Formula)
    ptObj.ScaleX = val(r.Cells(1, 5).Formula)
    ptObj.ScaleY = val(r.Cells(1, 6).Formula)
    
    Set ptApp = GetPlanModel
    Set Walls = ptApp.ObjectsByType(ptObjTypeWall)
    Set Wall = Walls.Item(r.Cells(1, 7).Formula)
    If Not Wall Is Nothing Then
        ptObj.Wall = Wall
    End If
    ExportPTObject = True
    
  ' stair
  Case ptObjTypeStair
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.StairType = val(r.Cells(1, 3).Formula)
    ptObj.StartPoint = String2Point(r.Cells(1, 4).Formula)
    ptObj.EndPoint = String2Point(r.Cells(1, 5).Formula)
    ptObj.Width = val(r.Cells(1, 6).Formula)
    ptObj.Step = val(r.Cells(1, 7).Formula)
    ExportPTObject = True
    
  ' room
  Case ptObjTypeRoom
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.RoomId = r.Cells(1, 3).Formula
    ptObj.FlatId = r.Cells(1, 4).Formula
    ptObj.Description = r.Cells(1, 5).Formula
    ptObj.Height = val(r.Cells(1, 6).Formula)
    
    Dim ptAreaRoom As IPTArea
    Set ptAreaRoom = ptObj.UserArea
    ptAreaRoom.Value = val(r.Cells(1, 7).Formula)
    ptAreaRoom.Active = True
    
    Dim Flat As IPTFlat
    Set Flat = ptObj.Flat
    If Not Flat Is Nothing Then
        Dim FlatArea As IPTArea
        Set FlatArea = Flat.UserArea
        FlatArea.Value = val(r.Cells(1, 8).Formula)
        FlatArea.Active = True
    End If
         
    LoadPTObjectVectors ptObj
    ExportPTObject = True
    
 ' flat
  Case ptObjTypeFlat
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.FlatId = r.Cells(1, 3).Formula
    ptObj.Description = r.Cells(1, 4).Formula
    ptObj.Height = val(r.Cells(1, 5).Formula)
    Dim ptUserArea As PTArea
    Set ptUserArea = ptObj.UserArea
    ptUserArea.Value = val(r.Cells(1, 6).Formula)
    ptUserArea.Active = True
    LoadPTObjectVectors ptObj
    ExportPTObject = True
    
 'Land
  Case ptObjTypeLand
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.Description = r.Cells(1, 3).Formula
    ptObj.DocumentedArea = val(r.Cells(1, 4).Formula)

 'LandPart
  Case ptObjTypeLandPart
    ptObj.Litera = r.Cells(1, 2).Formula
    ptObj.Description = r.Cells(1, 3).Formula
  
  'BuildingPart
  Case ptObjTypeBuildingPart
    ptObj.TemplateName = r.Cells(1, 2).Formula
    ptObj.Description = r.Cells(1, 3).Formula
    ptObj.Litera = r.Cells(1, 4).Formula
    ptObj.BuildingCategory = r.Cells(1, 5).Formula
    
  ' unknow object
  Case Else
    ExportPTObject = False
    
  End Select
  
End Function

' open document
Sub OpenDocument()
 ' Get Open Dialog
 
 Dim openSt
 openSt = Application.GetOpenFilename("PlanCAD (*.pws),*.pws, Autocad (*dwg),*.dwg, All Files,*.*", 3, "Open", , False)

 If openSt = False Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 Else
    Dim app
    Set app = CreateObject("PlanCad.Application")
    app.Visible = True
    app.Documents.Open (openSt)
 End If
End Sub

' save document
Sub SaveDocument()
' Get Save Dialog
 Dim SaveSt
 SaveSt = Application.GetSaveAsFilename(, "PlanCAD (*.pws), *.pws")
 
 If SaveSt <> False Then
    Dim app
    Set app = CreateObject("PlanCad.Application")
    app.Visible = True
    app.Documents.SaveActiveDocument (SaveSt)
 End If
End Sub

' save object vectors
Function SavePTObjectVectors(ptObj As IPTObject) As Boolean
  With Worksheets("Vectors")
    
    ' seek first empty row
    Dim row As Integer
    row = 2
    While .Cells(row, 1).Formula <> "" And .Cells(row, 1).Formula <> ptObj.handle
      row = row + 1
    Wend
    
    ' get vectors
    Dim pnt As Variant
    Dim vector As PTVector
    For Each vector In ptObj.vectors
      .Cells(row, 1).Formula = ptObj.handle
      .Cells(row, 2).Formula = vector.Type
      pnt = vector.StartPoint
      .Cells(row, 3).Formula = Point2String((pnt(0)), (pnt(1)))
      pnt = vector.EndPoint
      .Cells(row, 4).Formula = Point2String((pnt(0)), (pnt(1)))
      pnt = vector.CenterPoint
      .Cells(row, 5).Formula = Point2String((pnt(0)), (pnt(1)))
      .Cells(row, 6).Formula = vector.Radius
      .Cells(row, 7).Formula = vector.Bulge
      .Cells(row, 8).Formula = vector.Color
      .Cells(row, 9).Formula = vector.Width
      row = row + 1
    Next
  
  End With
  
  SavePTObjectVectors = True
  
End Function

' load object vectors
Function LoadPTObjectVectors(ptObj As IPTObject) As Boolean
  With Worksheets("Vectors")
    
    ' seek object vectors
    Dim row As Integer
    row = 2
    While .Cells(row, 1).Formula <> ptObj.handle And .Cells(row, 1).Formula <> ""
      row = row + 1
    Wend
    
    ' get vectors
    Dim pnt As Variant
    Dim vector As PTVector
    Dim vectors As ptVectors
    Set vectors = ptObj.vectors
        
    'While .Cells(row, 1).Formula = ptObj.handle
    '  Set vector = vectors.Create 'NOT IMPL
    '  vector.Type = .Cells(row, 2).Formula
    '  vector.StartPoint = String2Point(.Cells(row, 3).Formula)
    '  vector.EndPoint = String2Point(.Cells(row, 4).Formula)
    '  vector.CenterPoint = String2Point(.Cells(row, 5).Formula)
    '  vector.Radius = .Cells(row, 6).Formula
    '  vector.Bulge = .Cells(row, 7).Formula
    '  vector.Color = .Cells(row, 8).Formula
    '  vector.Width = .Cells(row, 9).Formula
    '  row = row + 1
    'Wend
    'Set vectors = ptObj.vectors
        
    ' set object vectors
  End With
  
  LoadPTObjectVectors = True
  
End Function

' update object handle
Sub UpdateObjectHandle(handle As String, new_handle As String, ws As Worksheet, column As Long)
  If handle <> "" And new_handle <> "" Then
    With ws
      Dim row As Integer
      row = 2
      While .Cells(row, 1).Formula <> ""
        If .Cells(row, column).Formula <> "" And .Cells(row, column).Formula = handle Then
          .Cells(row, column).Formula = new_handle
        End If
        row = row + 1
      Wend
    End With
  End If
End Sub

' convert PT object type to objects name
Function PTType2Str(objType As PTObjectType) As String
 Select Case objType
  Case ptObjTypeWall
    PTType2Str = "Wall"
  Case ptObjTypeColumn
    PTType2Str = "Column"
  Case ptObjTypeWindow
    PTType2Str = "Window"
  Case ptObjTypeDoor
    PTType2Str = "Door"
  Case ptObjTypeUserObject
    PTType2Str = "UserObject"
  Case ptObjTypeWallObject
    PTType2Str = "WallObject"
  Case ptObjTypeStair
    PTType2Str = "Stair"
  Case ptObjTypeRoom
    PTType2Str = "Room"
  Case ptObjTypeFlat
    PTType2Str = "Flat"
  Case ptObjTypeFlat
    PTType2Str = "Flat"
  Case ptObjTypeLand
    PTType2Str = "Land"
  Case ptObjTypeLandPart
    PTType2Str = "LandPart"
  Case ptObjTypeBuildingPart
    PTType2Str = "BuildingPart"
  Case Else
    PTType2Str = ""
  End Select
End Function

' convert objects name to PT object type
Function Str2PTType(s As String) As PTObjectType
 Select Case s
  Case "Wall"
    Str2PTType = ptObjTypeWall
  Case "Column"
    Str2PTType = ptObjTypeColumn
  Case "Window"
    Str2PTType = ptObjTypeWindow
  Case "Door"
    Str2PTType = ptObjTypeDoor
  Case "UserObject"
    Str2PTType = ptObjTypeUserObject
  Case "WallObject"
    Str2PTType = ptObjTypeWallObject
  Case "Stair"
    Str2PTType = ptObjTypeStair
  Case "Room"
    Str2PTType = ptObjTypeRoom
  Case "Flat"
    Str2PTType = ptObjTypeFlat
  Case "Land"
    Str2PTType = ptObjTypeLand
  Case "LandPart"
    Str2PTType = ptObjTypeLandPart
  Case "BuildingPart"
    Str2PTType = ptObjTypeBuildingPart
  Case Else
    Str2PTType = 0
  End Select
End Function

' convert PT object type to sheet name
Function PTType2WSName(objType As PTObjectType) As String
  Dim s As String
  s = PTType2Str(objType)
  If Len(s) > 0 Then s = s + "s"
  PTType2WSName = s
End Function

' convert objects name to PT object type
Function WSName2PTType(s As String) As PTObjectType
  If Len(s) > 0 Then s = Left$(s, Len(s) - 1)
  WSName2PTType = Str2PTType(s)
End Function


' convert point to string
Function Point2String(x As Double, y As Double) As String
  Point2String = "(" + str$(x) + ";" + str$(y) + ")"
End Function

' convert string to point
Function String2Point(str As String) As Variant
  Dim pnt(2) As Double
  If str <> "" Then
    pnt(0) = val(Mid$(str, 2, InStr(str, ";") - 2))
    pnt(1) = val(Mid$(str, InStr(str, ";") + 1))
  End If
  String2Point = pnt
End Function

' convert point to command string
Function Point2ComString(x As Variant, y As Variant) As String
  Point2ComString = Num2ComStr(x) + "," + Num2ComStr(y) + " "
End Function

' convert number to command string
Function Num2ComStr(val As Variant) As String
  Num2ComStr = LTrim(str(val))
  If InStr("E", Num2ComStr) <> 0 Then Num2ComStr = "0"
End Function

' returns the plan model
Function GetPlanModel() As PTApplication
  Dim app
  Set app = CreateObject("PlanCad.Application")
  app.Visible = True
  Set GetPlanModel = app.Documents.ActivePlanModel
End Function


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "|fffd||fffd||fffd||fffd|13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "|fffd||fffd||fffd||fffd|15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "|fffd||fffd||fffd||fffd|9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



INQUEST-PP=macro
