Attribute VB_Name = "GwxTools"
Option Explicit

' GraphWorX32 usefull routines
' ----------------------------

'
' Parse and compose custom data string
'

' Get all parameters from CustomData field as one string
'
'   The parameters should be in following formar: "... Parameters=<custom_parameters> ..."
'
Function CustomData_GetParameters(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String
    
    RetVal = ""
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If
    
    CustomData_GetParameters = RetVal
End Function

' Replace "... Parameters=<custom_parameters> ..." custom_parameters by custom data
'
'   The parameters should be in following format: "... Parameters=<custom_parameters> ..."
'
Function CustomData_SetParameters(ByRef strCustomData As String, ByRef strNewPar As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = left(strCustomData, posBeg)
                strOut = strOut + strNewPar
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)
                
                strCustomData = strOut
            End If
        End If
    End If
    CustomData_SetParameters = strCustomData
End Function

'''
Attribute VB_Name = "GwxTools_"
Option Explicit

'-------------------------------------------------------------------------------
' GraphWorX32 public routines to parse and compose parameters from/to CustomData
' (Inserted automatically by Script Wizard when necessary)
'-------------------------------------------------------------------------------

' Get parameters from CustomData in one string. We assume the parameters
' are in following format: "... Parameters=<custom_parameters> ..."
Function GetParametersFromCustomData(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String

    RetVal = ""
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If

    GetParametersFromCustomData = RetVal
End Function

' Compose new CustomData from given parameters and return as a string.
' This string can be used to assign new value to UserCustomData property.
Function GetCustomDataFromParameters(ByRef strCustomData As String, _
        ByRef strParameters As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String

    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = left(strCustomData, posBeg)
                strOut = strOut + strParameters
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)

                strCustomData = strOut
            End If
        End If
    End If
    GetCustomDataFromParameters = strCustomData
End Function



' Giving a string with all parameters, return number of parameters
' The delimitier is <space><comma>: ', '
Function GetNumberOfParameters(ByRef strParameters As String) As Integer
    Dim n As Integer, pos As Integer, strDelimit As String

    If Len(strParameters) = 0 Then GetNumberOfParameters = 0 ' return

    strDelimit = ", "
    n = 1
    pos = 0

    Do
        pos = InStr(pos + 1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then n = n + 1
    Loop While pos > 0

    GetNumberOfParameters = n
End Function

' From a string with all parameters return a parameter on given position.
Function GetParameterByIndex(ByVal strParameters As String, index As Integer) As String
    Dim i As Integer, n As Integer, pos As Integer, strDelimit As String
    Dim lenDelimit As Integer

    If Len(strParameters) = 0 Then GetParameterByIndex = Empty ' return

    strDelimit = ", "
    lenDelimit = Len(strDelimit)
    pos = 0

    ' Find begin of the parameter
    While i < index
        i = i + 1
        pos = InStr(1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then
            strParameters = Right(strParameters, Len(strParameters) - pos - 1)
        Else
            GetParameterByIndex = strParameters             ' return
        End If
    Wend

    ' find end of the parameter
    pos = InStr(1, strParameters, strDelimit, vbTextCompare)
    If pos > 0 Then
        GetParameterByIndex = left(strParameters, pos - 1)  ' return
    Else
        GetParameterByIndex = strParameters                 ' return
    End If

End Function























Attribute VB_Name = "Kvitir"
Option Explicit

'Private Declare Function Sleep Lib "Kernel32.dll" (ByVal timeout As Long) As Long

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetOPCValue
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function GetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SetOPCValue
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendTU
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 0. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendTU Lib "OPCDualSource.dll" (ByRef a_pvOTUName As Variant, ByRef a_pvTUName As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| WaitValue - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function WaitValue Lib "OPCDualSource.dll" (ByRef a_pvTagName As Variant, ByRef a_pvValue As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendAlarm
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".SeverityAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_dwSeverity
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".On_MessAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_pvText
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ON:
'    |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| On |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| OFF |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DescriptionAlm = ""
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SeverityAlm |fffd| On_MessAlm |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
'        |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendAlarm Lib "OPCDualSource.dll" (ByRef a_pvAlmTagName As Variant, ByRef a_pvText As Variant, ByVal a_dwSeverity As Long) As Long

Public Const S_OK As Long = 0
Public rAlias As String
Public theCurrentUser As String
Public theCompName As String

Public Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" _
(ByVal lpBuffer As String, nSize As Long) As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Function ComputerName() As String
    Dim szName As String
    Dim nSize As Long
    Dim lpResult As Long
        nSize = 255
        szName = Space$(nSize)
        lpResult = GetComputerName(ByVal szName, nSize)
        szName = left$(szName, nSize)
        ComputerName = szName
End Function

Public Function CurrentUser(SECServer As SECDual, Name As String) As Boolean
    CurrentUser = False
    On Error GoTo catch
    SECServer.Node = ComputerName()
    Name = SECServer.LoggedIn
    If Name = "" Then
        Name = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    End If
    CurrentUser = True
    Exit Function
catch:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Sub Kvit_All()
Dim x, z, numvisies, koll_f As Integer
Dim vis_ob As Object
Dim dd As GwxDisplay
Dim SECServer As SECDual
Dim iRet As Long
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
  
  koll_f = ThisDisplay.GetOpenPopupCount
  theCompName = ComputerName()
  Set SECServer = New SECDual
  isLoggedOn = CurrentUser(SECServer, TheCurrentUserName)
  Set SECServer = Nothing
  If isLoggedOn Then theCurrentUser = TheCurrentUserName
  For z = 1 To koll_f
    Set dd = ThisDisplay.GetOpenPopupByIndex(z - 1)
    numvisies = dd.GetNumberOfTopLevelVisibles
    For x = 1 To numvisies
      Set vis_ob = dd.GetVisibleObjectFromIndex(x - 1)
      If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
        Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
        If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
      End If
    Next
  Next
  numvisies = ThisDisplay.GetNumberOfTopLevelVisibles
  For x = 1 To numvisies
    Set vis_ob = ThisDisplay.GetVisibleObjectFromIndex(x - 1)
    If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
      Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
      If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
    End If
  Next
End Sub

Sub Kvit(o As GwxPick)
Dim SECServer As SECDual
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
    
    theCompName = ComputerName()
    Set SECServer = New SECDual
    isLoggedOn = CurrentUser(SECServer, TheCurrentUserName)
    Set SECServer = Nothing
    If isLoggedOn Then theCurrentUser = TheCurrentUserName
    Call Get_tags(o.GetVisibleObject)
End Sub

Public Sub Get_tags(ByRef v_object As Object)
Dim x, y, ndyn, MyPos As Integer
Dim iRet As Double
Dim nTimeout As Long
Dim dyn_obj, sub_dyn As Object
Dim Newval, Point, szDesc, PointVal, szDescVal, Alm As Variant
Dim RaliasVal As String
    nTimeout = 100
    ndyn = v_object.GetNumberOfDynamics
    For x = 1 To ndyn
        Set dyn_obj = v_object.GetDynamicObjectFromIndex(x - 1)
        If dyn_obj.dataSource <> "" Then
            rAlias = LCase(dyn_obj.dataSource)
            MyPos = InStr(1, rAlias, ".flash")
            If MyPos <> 0 Then
                iRet = GetOPCValue(rAlias, szDesc)
                Point = rAlias
                Newval = 0
                RaliasVal = left(rAlias, MyPos - 1)
                iRet = GetOPCValue(RaliasVal, szDescVal)
                If szDesc <> 0 Then
                    RaliasVal = left(rAlias, MyPos - 1)
                    iRet = GetOPCValue(RaliasVal, szDescVal)
                    iRet = SetOPCValue(Point, 0)   '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Point = rAlias
                    iRet = WaitValue(Point, Newval, nTimeout)
                    If iRet <> S_OK Then
                        rAlias = left(rAlias, MyPos - 1)
                        Point = rAlias + ".Description"
                        iRet = GetOPCValue(Point, szDesc)
                        If Len(szDesc) < 2 Then szDesc = Point
                        Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                        If iRet = 0 Then
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                        End If
                    End If
                    rAlias = left(rAlias, MyPos - 1)
                    Point = rAlias + ".Description"
                    iRet = GetOPCValue(Point, szDesc)
                    If Len(szDesc) < 2 Then szDesc = Point
                    Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + theCurrentUser + " !!! |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + theCompName + ". |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|.=" + str(szDescVal)
                    iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                    If iRet = 0 Then
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                    End If
                End If
            End If
        End If
        Set dyn_obj = Nothing
    Next x
End Sub


Attribute VB_Name = "Main"
Option Explicit
'version 2.5 (31/10/2013)

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Sub SetVisBtHistoryPlayer()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(GetSysDisk + HistoryPlayerPass + "HPPanel.exe") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~visHistoryPlayer~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd|
Sub SetVisBtReport()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(ThisDisplay.GetWorkingDirectory + "\rp\report.exe") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~ExistsReport~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Sub SetVisBtHydro()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(GetSysDir + "\HydrouklonProj.ocx") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~visHydrouklon~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Sub SetAgregatView()
Dim LocalVar As GwxPoint
    
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~ShowMiniLayer~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(NPS_RegPath, "AgregatView")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/...)
Sub SetTankView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(RP_RegPath, "TypeParams")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetHView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 0
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetQView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 1
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 2
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetHVView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 3
        Set LocalVar = Nothing
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVisFlash()
Dim LocalVar As GwxPoint
  
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~Flash~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashView")
        Set LocalVar = Nothing
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVisFlashTI()
Dim LocalVar As GwxPoint
  
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~FlashTI~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashViewTI")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub LU_Setup()
  
On Error GoTo ErrorHandler
    LU_Setup_Form.Show
    Exit Sub
ErrorHandler:
    LU_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Public Sub NPS_Setup()
  
On Error GoTo ErrorHandler
    NPS_Setup_Form.Show
    Exit Sub
ErrorHandler:
    NPS_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub RP_Setup()
  
On Error GoTo ErrorHandler
    RP_Setup_Form.Show
    Exit Sub
ErrorHandler:
    RP_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub OBJ_Setup(o As GwxPick)
  
On Error GoTo ErrorHandler
    OBJ_Setup_Form.Show
    Exit Sub
ErrorHandler:
    OBJ_Setup_Form.Show
End Sub
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub Unit_Setup(o As GwxPick)
  
On Error GoTo ErrorHandler
    Unit_Setup_Form.Show
    Exit Sub
ErrorHandler:
    Unit_Setup_Form.Show
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetSecurity(Optional nameParamTU As String, Optional nameParamTR As String, Optional nameParamUST As String, Optional TAG As String)
Dim lvParam As GwxPoint
Dim visTU As Boolean, visTR As Boolean, visUST As Boolean

    Call GetSecurity(visTU, visTR, visUST, TAG)
    If Len(nameParamTU) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamTU)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visTU
            Set lvParam = Nothing
        End If
    End If
    If Len(nameParamTR) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamTR)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visTR
            Set lvParam = Nothing
        End If
    End If
    If Len(nameParamUST) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamUST)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visUST
            Set lvParam = Nothing
        End If
    End If
End Sub

Attribute VB_Name = "RP_Main"
Option Explicit

Public Const Tank_PathLoad = "http://bmn/sdku/popup\bmn_tank.gdf"
Public Const RP_RegPath = "Software\SDKUGWX\RP"

'new
Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Sub Tank_LoadPopup(o As GwxPick)
Dim aCommon As String
Dim vis As Object
Dim visNum As Object
Dim visNumText As Object
Dim dyn As Object
'Dim nPopupCnt As Integer
Dim gfxPopup As GwxDisplay
Dim sAliasCmd As String
Dim FlResize As Boolean
Dim TypePrarams As Integer
Dim tmWaitStart As Single

On Error GoTo TermProc
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
aCommon = ""
Set vis = o.GetVisibleObject
If IsObjOK(vis) Then
  Set visNum = vis.GetVisibleObjectFromName("NumberTank")
  If IsObjOK(visNum) Then
    Set visNumText = visNum.GetVisibleObjectFromName("NumberTankText")
    If IsObjOK(visNumText) Then
      Set dyn = visNumText.GetDynamicObjectFromName("DynamicNumberTankText")
      aCommon = dyn.dataSource
    End If
  End If
End If
If aCommon = "" Then Exit Sub
aCommon = Mid$(aCommon, 1, InStr(aCommon, ".Name")) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
sAliasCmd = "TANK" + Chr(9) + aCommon + Chr(13) + Chr(10) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GWX

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

'nPopupCnt = ThisDisplay.GetOpenPopupCount ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If nPopupCnt > 0 Then
   Set gfxPopup = ThisDisplay.GetOpenPopupWithTitle("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   If IsObjOK(gfxPopup) Then
      gfxPopup.SetAliases (sAliasCmd) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      FlResize = IniReg.RegReadNum(RP_RegPath, "ReSizeOn") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Else
     'Set gfxPopup = ThisDisplay.OpenPopupWinSetAliases(Tank_PathLoad, False, False, True, 2, sAliasCmd)
     Set gfxPopup = ThisDisplay.OpenPopupWindow(Tank_PathLoad, False, True, True)
     Call gfxPopup.SetAliasDefinition("TANK", aCommon)

     FlResize = True
   End If
'Else
'End If

'On Error GoTo 0
If IsObjOK(gfxPopup) And FlResize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Call Tank_SetPopUpPosWindow(gfxPopup, o)
   gfxPopup.ViewFitToWindow
   gfxPopup.ShowWindow
   gfxPopup.ViewShowWholeDisplay ' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ViewFitToWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If

TermProc:

Set gfxPopup = Nothing
Set visNum = Nothing
Set visNumText = Nothing
Set dyn = Nothing

End Sub


Private Sub Tank_SetPopUpPosWindow(objPopup As GwxDisplay, objPick As Object)
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nW0 As Long, nH0 As Long
Dim nL As Long, nT As Long
Dim nCorell As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim objVis As Object
Dim TypePrarams As Integer
Dim TypePos As Integer, TypeSize As Integer
Dim SizePrc As Integer

On Error GoTo TermProc

TypePos = IniReg.RegReadNum(RP_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(RP_RegPath, "TypeSize")
SizePrc = IniReg.RegReadNum(RP_RegPath, "SizePrc")

Call objPopup.GetWindowDimensionsPixels(nLeft, nTop, nW, nH) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
nCorell = nW / nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call ThisDisplay.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  Set objVis = objPick.GetVisibleObject
  Call objVis.GetObjectDimensions(rLeft, rTop, rW, rH)
  Set objVis = Nothing
  nVisLeft = rLeft
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisLeft, nVisTop)
  nVisRight = rLeft + rW
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisRight, nVisTop)
  nL = nVisRight + 2  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then
     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 2
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Popup
  
  Call objPopup.SetWindowDimensionsPixels(nL, nT, nW, nH)
  'Print #1, "objPopup.GetWindowDimensionsPixels: nLeft " + Str(nLeft) + "  nTop" + Str(nTop) + "  nW" + Str(nW) + "  nH" + Str(nH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'msgbox "ThisDisplay.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
  'msgbox "objVis.GetObjectDimensions: rLeft " + Str(rLeft) + "  rTop" + Str(rTop) + "  rW" + Str(rW) + "  rH" + Str(rH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'Print #1, "objPopup.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
TermProc:

Set objVis = Nothing
  
End Sub

Sub SetHView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 0
End Sub

Sub SetQView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 1
End Sub

Sub SetVView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 2
End Sub

Sub SetHVView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 3
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Sub Tank_Setup()
  Tank_Setup_Form.Show
End Sub


Public Sub TI_Setup()
  TI_Setup_Form.Show
End Sub

Attribute VB_Name = "RP_Setup_Form"
Attribute VB_Base = "0{A7A82FEB-38A2-41EC-98D5-9ED1DD683EA7}{24806911-65CC-4017-97BD-C3C63E94AE22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Option Explicit
'version 1.0

Private Sub btn_Apply_Click()
Dim iRet As Long
Dim LocalVar As GwxPoint

Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
If TypeParams_0.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 0)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 0
ElseIf TypeParams_1.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 1)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 1
ElseIf TypeParams_2.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 2)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 2
ElseIf TypeParams_3.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 3)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 3
End If
Set LocalVar = Nothing

If ckbFlashView.Value Then
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashView", 1)
Else
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashView", 0)
End If
Set LocalVar = ThisDisplay.GetPointObjectFromName("~~Flash~~")
If Not (LocalVar Is Nothing) Then LocalVar.Value = ckbFlashView.Value
Set LocalVar = Nothing

If ckbFlashViewTI.Value Then
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashViewTI", 1)
Else
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashViewTI", 0)
End If
Set LocalVar = ThisDisplay.GetPointObjectFromName("~~FlashTI~~")
If Not (LocalVar Is Nothing) Then LocalVar.Value = ckbFlashViewTI.Value
Set LocalVar = Nothing

RP_Setup_Form.Hide
End Sub

Private Sub Btn_Cancel_Click()

RP_Setup_Form.Hide
End Sub

Private Sub UserForm_Activate()
Dim TypeParams As Byte

TypeParams = IniReg.RegReadNum(RP_RegPath, "TypeParams")
Select Case TypeParams
  Case 0
    TypeParams_0.Value = True
  Case 1
    TypeParams_1.Value = True
  Case 2
    TypeParams_2.Value = True
  Case 3
    TypeParams_3.Value = True
End Select
ckbFlashView.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashView")
ckbFlashViewTI.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashViewTI")
End Sub
Attribute VB_Name = "ThisDisplay"
Attribute VB_Base = "0{CA84D600-E21C-11CE-97DA-00608CB87A7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Trend"
Option Explicit

Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" _
    (ByVal lpString As Long, ByVal lpString As String) As Long
Private Declare Function PostMessage Lib "user32" Alias "PostMessageA" _
    (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam _
    As Long) As Long

Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type
Private Type STARTUPINFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Long
    hStdInput As Long
    hStdOutput As Long
    hStdError As Long
End Type

Private Declare Function CreateProcess Lib "kernel32" Alias "CreateProcessA" _
    (ByVal lpApplicationName As String, _
    ByVal lpCommandLine As String, _
    lpProcessAttributes As Any, _
    lpThreadAttributes As Any, _
    ByVal bInheritHandles As Long, _
    ByVal dwCreationFlags As Long, _
    lpEnvironment As Any, _
    ByVal lpCurrentDriectory As String, _
    lpStartupInfo As STARTUPINFO, _
    lpProcessInformation As PROCESS_INFORMATION) As Long

Const NORMAL_PRIORITY_CLASS = &H20&
Const WM_QUIT = &H12
Const S_OK As Long = 0

Public RetTrendForm As Boolean

Function TrendViewSignal(SStr As String)
  Dim RetID As Long
  Dim PathTrendFile As String
  
  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Output As #1
  Print #1, SStr
  Close #1
  RetID = StartTrend(PathTrendFile)

End Function

Sub TrendViewOne(o As GwxPick)
  Dim SStr As String
  Dim OBJ_dyn As Object
  Dim pc As Long
  Dim RetID As Long
  
  Set OBJ_dyn = GetDynamicFromPick(o)
  SStr = OBJ_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  RetID = TrendViewSignal(SStr)

End Sub

Sub TrendViewAdd(o As GwxPick)
  Dim SStr As String
  Dim OBJ_dyn As Object
  Dim pc As Long
  Dim PathTrendFile As String
  Dim RetID As Long
  Dim i As Integer
  
  Set OBJ_dyn = GetDynamicFromPick(o)
  SStr = OBJ_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Append As #1
  Print #1, SStr
  Close #1
  
  Trend_MainForm.LB_Signals.Clear
  Open PathTrendFile For Input As #1
  While Not EOF(1)
    Input #1, SStr
    Trend_MainForm.LB_Signals.AddItem SStr
  Wend
  Close #1
  Trend_MainForm.Show
  Open PathTrendFile For Output As #1
  For i = 0 To Trend_MainForm.LB_Signals.ListCount - 1
    Print #1, Trend_MainForm.LB_Signals.List(i, 0)
  Next i
  Close #1
  If RetTrendForm Then
    RetID = StartTrend(PathTrendFile)
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| WebTrend-|fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetWebTrendFileName() As String
  
  GetWebTrendFileName = IniFile.INIReadStr(ThisDisplay.GetWorkingDirectory + "\PROJECT.INI", "Trend", "WebTrend")
  If GetWebTrendFileName = "" Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  ElseIf Not FileExists(GetWebTrendFileName) Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd|! (" + GetWebTrendFileName + ")", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InfinityTrend|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function StartTrend(PathTrendFile As String) As Long
  Dim pInfo As PROCESS_INFORMATION
  Dim sInfo As STARTUPINFO
  Dim Comstr As String
  'Dim sTitle As String
  Dim iHwnd As Long
  Dim PathWebWrend As String
  
  StartTrend = 0
  PathWebWrend = GetWebTrendFileName()
  If PathWebWrend <> "" Then
    'sTitle = "InfinityTrends"
    'iHwnd = FindWindow(0&, sTitle)
    'If iHwnd <> 0 Then iReturn = PostMessage(iHwnd, WM_QUIT, 0&, 0&)
    'Sleep 100
    'RetID = Shell(PathWebWrend + " File=" + PathTrendFile, vbNormalFocus)
    Comstr = PathWebWrend + " File=" + PathTrendFile
    sInfo.cb = Len(sInfo)
    StartTrend = CreateProcess(vbNullString, Comstr, ByVal 0&, ByVal 0&, 0&, NORMAL_PRIORITY_CLASS, ByVal 0&, vbNullString, sInfo, pInfo)
  End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
Private Function GetDynamicFromPick(o As Object) As Object
  Dim OBJ_vis As Object
  Dim OBJ_dyn As Object
  Dim i As Integer, num_dyn As Integer
  
  Set OBJ_vis = o.GetVisibleObject
  num_dyn = OBJ_vis.GetNumberOfDynamics
  i = 0
  Do
    Set OBJ_dyn = OBJ_vis.GetDynamicObjectFromIndex(i)
    If OBJ_dyn.GetObjectTypeName = "GwxProcessPoint" Then Exit Do
    i = i + 1
  Loop While i < num_dyn
  
  If i >= num_dyn Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| GwxProcessPoint."
  
  Set GetDynamicFromPick = OBJ_dyn
End Function

Public Function FileExists(strFile As String) As Boolean

    On Error GoTo ErrorHandler
    FileExists = (Len(Dir(strFile)) > 0)
    Exit Function
ErrorHandler:
    FileExists = False
End Function

Attribute VB_Name = "Trend_MainForm"
Attribute VB_Base = "0{ADC33990-9B3B-40C4-962A-B91B19042893}{258A98A4-41D9-46F1-A03A-BC492C8CD744}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit

Private Sub Btn_Clear_Click()
  LB_Signals.Clear
End Sub

Private Sub CB_Close_Click()
  Trend.RetTrendForm = False
  Hide
End Sub

Private Sub CB_Delete_Click()
  If LB_Signals.ListIndex > -1 Then LB_Signals.RemoveItem LB_Signals.ListIndex
End Sub

Private Sub CB_toTrendView_Click()
  Trend.RetTrendForm = True
  Hide
End Sub

Attribute VB_Name = "analog_Main"
Option Explicit

Public Const TI_PathLoad = "http://bmn/sdku/PopUp/bmn_TI.gdf"
Public Const TI_RegPath = "Software\SDKUGWX\analog"
Public Const P_RegPath = "Software\SDKUGWX\analog\P"

Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Sub TI_LoadPopup(o As GwxPick)
Dim aCommon As String
Dim vis As Object
Dim visNum As Object
Dim visNumText As Object
Dim dyn As Object
'Dim nPopupCnt As Integer
Dim gfxPopup As GwxDisplay
Dim sAliasCmd As String
Dim FlResize As Boolean
Dim TypePrarams As Integer
Dim tmWaitStart As Single

On Error GoTo TermProc

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
aCommon = o.GetVisibleObject.GetDynamicObjectFromIndex(0).dataSource
If aCommon = "" Then Exit Sub
'aCommon = Mid$(aCommon, 1, InStr(aCommon, ".Name")) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
sAliasCmd = "DS" + Chr(9) + aCommon + Chr(13) + Chr(10) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GWX

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

'nPopupCnt = ThisDisplay.GetOpenPopupCount ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If nPopupCnt > 0 Then
   Set gfxPopup = ThisDisplay.GetOpenPopupWithTitle("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   If IsObjOK(gfxPopup) Then
      gfxPopup.SetAliases (sAliasCmd) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      FlResize = IniReg.RegReadNum(TI_RegPath, "ReSizeOn") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Else
     'Set gfxPopup = ThisDisplay.OpenPopupWinSetAliases(TI_PathLoad, False, False, True, 2, sAliasCmd)
     Set gfxPopup = ThisDisplay.OpenPopupWindow(TI_PathLoad, False, True, True)
     Call gfxPopup.SetAliasDefinition("DS", aCommon)

     FlResize = True
   End If
'Else
'End If

'On Error GoTo 0
If IsObjOK(gfxPopup) And FlResize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Call TI_SetPopUpPosWindow(gfxPopup, o)
   gfxPopup.ViewFitToWindow
   gfxPopup.ShowWindow
   gfxPopup.ViewShowWholeDisplay ' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ViewFitToWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If

TermProc:

Set gfxPopup = Nothing
Set visNum = Nothing
Set visNumText = Nothing
Set dyn = Nothing

End Sub


Private Sub TI_SetPopUpPosWindow(objPopup As GwxDisplay, objPick As Object)
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nW0 As Long, nH0 As Long
Dim nL As Long, nT As Long
Dim nCorell As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim objVis As Object
Dim TypePrarams As Integer
Dim TypePos As Integer, TypeSize As Integer
Dim SizePrc As Integer

On Error GoTo TermProc

TypePos = IniReg.RegReadNum(TI_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(TI_RegPath, "TypeSize")
SizePrc = IniReg.RegReadNum(TI_RegPath, "SizePrc")

Call objPopup.GetWindowDimensionsPixels(nLeft, nTop, nW, nH) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
nCorell = nW / nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call ThisDisplay.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  Set objVis = objPick.GetVisibleObject
  Call objVis.GetObjectDimensions(rLeft, rTop, rW, rH)
  Set objVis = Nothing
  nVisLeft = rLeft
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisLeft, nVisTop)
  nVisRight = rLeft + rW
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisRight, nVisTop)
  nL = nVisRight + 2  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then
     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 2
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Popup
  
  Call objPopup.SetWindowDimensionsPixels(nL, nT, nW, nH)
  'Print #1, "objPopup.GetWindowDimensionsPixels: nLeft " + Str(nLeft) + "  nTop" + Str(nTop) + "  nW" + Str(nW) + "  nH" + Str(nH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'msgbox "ThisDisplay.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
  'msgbox "objVis.GetObjectDimensions: rLeft " + Str(rLeft) + "  rTop" + Str(rTop) + "  rW" + Str(rW) + "  rH" + Str(rH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'Print #1, "objPopup.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
TermProc:

Set objVis = Nothing
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Sub TI_Setup()
  TI_Setup_Form.Show
End Sub


Public Sub P_Setup()
  P_Setup_Form.Show
End Sub

Sub P_Change(P_val As Long)
Dim iP As GwxPoint

Call IniReg.RegWriteNum(P_RegPath, "Type", P_val)
'P_val = IniReg.RegReadNum(P_RegPath, "Type")
Set iP = ThisDisplay.GetPointObjectFromName("~~P~~")

iP.Value = P_val
Set iP = Nothing

End Sub



INQUEST-PP=macro
