Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim strSaveAs
    Dim fname As String
    If SaveAsUI = True And Me.FileFormat <> xlTemplate Then
        Cancel = True
        Application.EnableEvents = False
        'Office 2007
        'fname = "MMP_Pb." & Me.Sheets(1).Cells(2, 1).Value & "_" & Me.Sheets(1).Cells(4, 1).Value & ".xls"
        'strSaveAs = Application.GetSaveAsFilename _
        '            (InitialFileName:=fname, _
        '             FileFilter:="Excel Files (*.xls), *.xls")
        'Office 2010
        fname = "Messung_Pr|fffd|flos_" & Me.Sheets(1).Cells(2, 1).Value & "_" & Me.Sheets(1).Cells(4, 1).Value & ".xlsm"
        strSaveAs = Application.GetSaveAsFilename _
                    (InitialFileName:=fname, _
                     FileFilter:=" Excel Macro Enabled Workbook (*.xlsm), *.xlsm, Excel Macro Enabled Template (*.xltm), *.xltm,")
        If strSaveAs <> False Then
            FileFormatValue = 52
            Me.SaveAs strSaveAs, FileFormat:=FileFormatValue, CreateBackup:=False
        End If
        Application.EnableEvents = True
    End If
End Sub
Attribute VB_Name = "Modul1"
'Offset between link "Tabelle_1" and first data row
Public Const offsetY As Integer = 8

Sub switchToEnglish()
    Call switchGermanEnglisch(1, 2)
End Sub

Sub switchToGerman()
    Call switchGermanEnglisch(2, 1)
End Sub

Sub switchGermanEnglisch(fromIndex As Integer, toIndex As Integer)
    'Start der Datentabelle ermitteln
    Dim startY As Integer
    startY = ActiveWorkbook.Names("Tabelle_1").RefersToRange.row
    Dim startX As Integer
    startX = ActiveWorkbook.Names("Tabelle_1").RefersToRange.Column + 1

    Dim toReplace As String
    Dim i As Integer
    Dim mz As Integer
    Dim break As Boolean
    
    'Merkmalsnamen
    Dim row As Integer
    row = startY + 2
    cx = startX
    While Cells(row, cx).Value <> ""
        'Merkmal
        toReplace = Trim(Cells(row, cx).Value)
        If toReplace <> "" Then
            If InStr(toReplace, "! ") = 1 Then
                toReplace = Mid(toReplace, 3)
            End If
            mz = 5
            break = False
            While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex).Value <> ""
                Dim test As String
                test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex).Value
                If StrComp(toReplace, test, vbTextCompare) = 0 Then
                    Cells(row, cx).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex).Value
                    break = True
                End If
                mz = mz + 1
            Wend
        End If
        cx = cx + 1
        
    Wend
    '1 Spalte in der Datentabelle komplett uebersetzen bis 2 aufeinanderfolgende leere zellen kommen
    Dim emptyCells As Integer
    emptyCells = 0
    Dim cr As Integer
    cr = startY
    While emptyCells < 2
        toReplace = Trim(Cells(cr, 1).Value)
        If toReplace <> "" Then
            mz = 5
            break = False
            While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value <> ""
                test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value
                If StrComp(toReplace, test, vbTextCompare) = 0 Then
                    Cells(cr, 1).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 6).Value
                    break = True
                End If
                mz = mz + 1
            Wend
        Else
            emptyCells = emptyCells + 1
        End If
        cr = cr + 1
    Wend
    'Feldbeschriftungen im Pruefberichtskopf, Uebersetzung jeder 2. Zeile
    Dim y As Integer
    y = 1
    While y <= startY
        For i = 1 To 18
            toReplace = Trim(Cells(y, i).Value)
            If toReplace <> "" Then
                mz = 5
                break = False
                While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value <> ""
                    test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value
                    If StrComp(toReplace, test, vbTextCompare) = 0 Then
                        Cells(y, i).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 6).Value
                        break = True
                    End If
                    mz = mz + 1
                Wend
            End If
        Next i
        y = y + 2
    Wend
    'Auswertungen uebersetzen
    If ActiveSheet.Name = "Auswertung" Then
        For i = 8 To 13
            toReplace = Trim(Cells(i, 8).Value)
            If toReplace <> "" Then
                mz = 5
                break = False
                While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value <> ""
                    test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value
                    If StrComp(toReplace, test, vbTextCompare) = 0 Then
                        Cells(i, 8).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 6).Value
                        break = True
                    End If
                    mz = mz + 1
                Wend
            End If
            toReplace = Trim(Cells(i, 16).Value)
            If toReplace <> "" Then
                mz = 5
                break = False
                While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value <> ""
                    test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 6).Value
                    If StrComp(toReplace, test, vbTextCompare) = 0 Then
                        Cells(i, 16).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 6).Value
                        break = True
                    End If
                    mz = mz + 1
                Wend
            End If
        Next i
    End If
    'Bewertung und Ergebnis uebersetzen
On Error GoTo bewertung
    toReplace = Trim(ActiveWorkbook.Names("ergebnis").RefersToRange.Value)
    mz = 5
    break = False
    While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 12).Value <> ""
        test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 12).Value
        If StrComp(toReplace, test, vbTextCompare) = 0 Then
            ActiveWorkbook.Names("ergebnis").RefersToRange.Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 12).Value
            break = True
        End If
        mz = mz + 1
    Wend
bewertung:
On Error GoTo replaceFields
    toReplace = Trim(ActiveWorkbook.Names("wertung").RefersToRange.Value)
    mz = 5
    break = False
    While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 12).Value <> ""
        test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 12).Value
        If StrComp(toReplace, test, vbTextCompare) = 0 Then
            ActiveWorkbook.Names("wertung").RefersToRange.Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 12).Value
            break = True
        End If
        mz = mz + 1
    Wend
replaceFields:
    'Uebersetzen der "i.O" und "n.i.O" Ergebnisse
    Dim countDims As Integer
    countDims = getCountDims(startY, startX)
    If countDims > 0 Then
        
        Dim cy As Integer
        For cx = startX To startX + countDims - 1
            cy = startY + offsetY
            While Cells(cy, cx).Value <> ""
                toReplace = Trim(Cells(cy, cx).Value)
                mz = 5
                break = False
                While break = False And ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 9).Value <> ""
                    test = ActiveWorkbook.Sheets("Merkmale").Cells(mz, fromIndex + 9).Value
                    If StrComp(toReplace, test, vbTextCompare) = 0 Then
                        Cells(cy, cx).Value = ActiveWorkbook.Sheets("Merkmale").Cells(mz, toIndex + 9).Value
                        break = True
                    End If
                    mz = mz + 1
                Wend
                cy = cy + 1
            Wend
        Next cx
    End If
End Sub

Function getCountDims(startY As Integer, startX As Integer)
    'Zaehlen der Merkmale
    Dim countDims As Integer
    countDims = 0
    While Cells(startY + 2, startX + countDims).Value <> ""
        countDims = countDims + 1
    Wend
    getCountDims = countDims
End Function

Function getCountMaxValues(startY As Integer, startX As Integer, countDims As Integer)
    'Zaehlen der Messwerte
    Dim countMaxValues As Integer
    countMaxValues = 0
    If countDims > 0 Then
        For i = 1 To startX + countDims - 1
            y = startY + offsetY
            While Cells(y, i).Value <> ""
                If y - startY - offsetY + 1 > countMaxValues Then
                    countMaxValues = y - startY - offsetY + 1
                End If
                y = y + 1
            Wend
        Next i
    End If
    getCountMaxValues = countMaxValues
End Function

Sub formatTable()
    Dim startY As Integer
    startY = ActiveWorkbook.Names("Tabelle_1").RefersToRange.row
    Dim countValues As Integer
    Dim startX As Integer
    startX = ActiveWorkbook.Names("Tabelle_1").RefersToRange.Column + 1
    Dim countDims As Integer
    countDims = getCountDims(startY, startX)
    countValues = getCountMaxValues(startY, startX, countDims)
    Dim oldRange As Range
    Set oldRange = Selection
    'Rahmen loeschen
    Range(Cells(startY, 1), Cells(startY + 1000, startX + 50)).Select
    Call clearTableBorders
    Selection.FormatConditions.Delete
    If Cells(startY + 2, startX) <> "" Then
        Worksheets("Auswertung").EnableCalculation = False
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        'Nummerieren der Zeilen mit der Pruefnummer
        'For i = 1 To countValues
            'Cells(i + startY - 1 + offsetY, 1).Value = i
            'Cells(i + startY - 1 + offsetY, 1).NumberFormat = "#,##0"
        'Next i
        'Markieren des Bereichs
        Dim minCols As Integer
        If ActiveSheet.PageSetup.Orientation = xlLandscape Then
            minCols = 26
        Else
            minCols = 17
        End If
        Dim selectX As Integer
        If countDims < minCols Then
            selectX = minCols
        Else
            selectX = countDims
        End If
        'Tabellenkopf waehlen
        Range(Cells(startY, 1), Cells(startY + 2, startX + selectX - 1)).Select
        Call formatTableBorders(True)
        'Nennmass, Toleranzgrenzen, Masseinheit waehlen
        Range(Cells(startY + 3, 1), Cells(startY + 7, startX + selectX - 1)).Select
        Call formatTableBorders(True)
        'Messwerte waehlen
        Range(Cells(startY + offsetY, 1), Cells(startY + offsetY + countValues - 1, startX + selectX - 1)).Select
        Call formatTableBorders(True)
        'ZahlenFormat anpassen
        For i = startX To startX + countDims - 1
            'Bezugsgr|fffd||fffd|e f|fffd|r Zahlenformat ermitteln: Toleranzbreite, sonst einseitiger Toleranz, sonst Nennwert
            Dim numberF As Double
            numberF = 2 / 100
            If (Cells(startY + 3, i).Value <> "") And (Cells(startY + 3, i).Value <> 0) And _
               (Cells(startY + 4, i).Value <> "") And (Cells(startY + 4, i).Value <> 0) And _
               (Cells(startY + 5, i).Value <> "") And (Cells(startY + 5, i).Value <> 0) Then
                'Nenwert + OGW + UGW vorhanden
                numberF = Abs((Cells(startY + 3, i).Value + Cells(startY + 4, i).Value) - (Cells(startY + 3, i).Value + Cells(startY + 5, i).Value))
                numberF = numberF * 0.9 / 20
            End If
            
            'Formatierung
            Dim nullerS As String
            nullerS = ""
            While (numberF > 0) And (numberF <= 1)
                nullerS = nullerS & "0"
                numberF = numberF * 10
            Wend
            'MsgBox Cells(startY + 3, i).Value & " / " & nullerS
            
            'MsgBox i & " aft " & numberF & " : " & nullerS
            If Len(nullerS) > 0 Then
                nullerS = "." & nullerS
            End If
            nullerS = "#,##0" & nullerS
            'MsgBox i & " /" & numberF & " / " & nullerS
            'Nennma|fffd|
            Range(Cells(startY + 3, i), Cells(startY + 3, i)).Select
            Selection.NumberFormat = nullerS
            'Werte
            Range(Cells(startY + offsetY, i), Cells(startY + offsetY + countValues - 1 + 5, i)).Select
            Selection.NumberFormat = nullerS
            'MsgBox "anzahl" & countValues
            'Toleranzgrenzen mit vorangestelltem + oder -
            nullerS = "+" & nullerS & ";-" & nullerS
            Range(Cells(startY + 4, i), Cells(startY + 5, i)).Select
            Selection.NumberFormat = nullerS
        Next i
        Dim drawResults As Integer
        drawResults = 0
        'Auswertung
        For cx = startX To startX + countDims - 1
            drawResults = 4
            'Mittelwert
            '"=IF(COUNT(R[-4]C:R[-2]C)>0, AVERAGE(R[-4]C:R[-2]C),"""")"
            Cells(startY + offsetY + countValues + 1, cx).FormulaR1C1 = "=IF(COUNT(R[-" + CStr(countValues + 1) + "]C:R[-2]C)>0, AVERAGE(R[-" + CStr(countValues + 1) + "]C:R[-2]C),"""")"
            Cells(startY + offsetY + countValues + 1, 1).Value = "Mittelwert"
            'Minimum
            Cells(startY + offsetY + countValues + 2, cx).FormulaR1C1 = "=IF(COUNT(R[-" + CStr(countValues + 1) + "]C:R[-2]C)>0, MIN(R[-" + CStr(countValues + 2) + "]C:R[-3]C),"""")"
            Cells(startY + offsetY + countValues + 2, 1).Value = "Minimum"
            'Maximum
            Cells(startY + offsetY + countValues + 3, cx).FormulaR1C1 = "=IF(COUNT(R[-" + CStr(countValues + 1) + "]C:R[-2]C)>0, MAX(R[-" + CStr(countValues + 3) + "]C:R[-4]C),"""")"
            Cells(startY + offsetY + countValues + 3, 1).Value = "Maximum"
            'StdDev
            Cells(startY + offsetY + countValues + 4, cx).FormulaR1C1 = "=IF(COUNT(R[-" + CStr(countValues + 4) + "]C:R[-5]C) > 1, STDEV(R[-" + CStr(countValues + 4) + "]C:R[-5]C), """")"
            Cells(startY + offsetY + countValues + 4, 1).Value = "s"
            Cells(startY + offsetY + countValues + 4, cx).NumberFormat = "General"
            'cmk
            minCountValues = 16
            Cells(startY + offsetY + countValues + 5, cx).FormulaR1C1 = "=IF(AND(COUNT(R[-" + CStr(countValues + 5) + "]C:R[-6]C) >= " + CStr(minCountValues) + ", OR(R[-" + CStr(countValues + offsetY + 1) + "]C <>"""", R[-" + CStr(countValues + offsetY) + "]C <>"""")), MIN(IF(R[-" + CStr(countValues + offsetY) + "]C <> """", (R[-4]C-R[-" + CStr(countValues + offsetY + 2) + "]C-R[-" + CStr(countValues + offsetY) + "]C)/(3*R[-1]C), 2000000), IF(R[-" + CStr(countValues + offsetY + 1) + "]C <> """", (R[-" + CStr(countValues + offsetY + 2) + "]C+R[-" + CStr(countValues + offsetY + 1) + "]C-R[-4]C)/(3*R[-1]C), 2000000)), """")"
            'Cells(startY + offsetY + countValues + 5, cx).FormulaR1C1 = "=IF(AND(COUNT(R[-16]C:R[-6]C) > 4, OR(R[-19]C <>"""", R[-18]C <>"""")), MIN(IF(R[-18]C <> """", (R[-4]C-R[-20]C-R[-18]C)/(3*R[-1]C), 2000000), IF(R[-19]C <> """", (R[-20]C+R[-19]C-R[-4]C)/(3*R[-1]C), 2000000)), """")"
            Cells(startY + offsetY + countValues + 5, 1).Value = "cmk"
            Cells(startY + offsetY + countValues + 5, cx).NumberFormat = "#,##0.00"
            'Auswertungskaestchen einrahmen
            Range(Cells(startY + offsetY + countValues + 1, 1), Cells(startY + offsetY + countValues + 5, startX + selectX - 1)).Select
            Call formatTableBorders(True)
        Next cx
        
        'Bedingte Formatierung fuer Messwerte, Mittelwert, Min und Max
        formula_1 = getLocalizedFormula(Cells(startY + offsetY, startX), "=AND(RC<>"""", ISNUMBER(RC), R" + CStr(startY + 3) + "C <> """", OR(R" + CStr(startY + 4) + "C <> """", R" + CStr(startY + 5) + "C <> """"), OR(IF(R" + CStr(startY + 4) + "C <> """", RC > R" + CStr(startY + 3) + "C+R" + CStr(startY + 4) + "C, FALSE), IF(R" + CStr(startY + 5) + "C <> """", RC < R" + CStr(startY + 3) + "C+R" + CStr(startY + 5) + "C, FALSE)))")
        formula_2 = getLocalizedFormula(Cells(startY + offsetY, startX), "=AND(RC<>"""", ISTEXT(RC), RC<>"""", RC<>""ok"", RC<>""i.O"")")
        Call formatRed(Range(Cells(startY + offsetY, startX), Cells(startY + offsetY + countValues - 1, startX + selectX - 1)), formula_1, formula_2)
        'Bedingte Formatierung cmk
        If drawResults > 0 Then
            'Formeln uebersetzen
            formula_1 = getLocalizedFormula(Cells(startY + offsetY + countValues - 1 + drawResults + 2, startX), "=AND(RC<>"""", RC<1.00)")
            formula_2 = getLocalizedFormula(Cells(startY + offsetY + countValues - 1 + drawResults + 2, startX), "=AND(RC<>"""", RC<1.33)")
            Call formatCpk(Range(Cells(startY + offsetY + countValues - 1 + drawResults + 2, startX), Cells(startY + offsetY + countValues - 1 + drawResults + 2, startX + selectX - 1)), formula_1, formula_2)
        End If
        'Selektierte Bereiche entfernen
        If oldRange Is Nothing Then
            Cells(1, 1).Select
        Else
            oldRange.Select
        End If
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        Worksheets("Auswertung").EnableCalculation = True
    End If
    ActiveSheet.EnableFormatConditionsCalculation = False
    ActiveSheet.EnableFormatConditionsCalculation = True
End Sub

Sub formatTableButtonClick()
    Application.ScreenUpdating = False
    formatTable
    Application.ScreenUpdating = True
End Sub

Sub addNewLine()
    Application.ScreenUpdating = False
    Dim startY As Integer
    startY = ActiveWorkbook.Names("Tabelle_1").RefersToRange.row
    Dim countValues As Integer
    Dim startX As Integer
    startX = ActiveWorkbook.Names("Tabelle_1").RefersToRange.Column + 1
    Dim countDims As Integer
    countDims = getCountDims(startY, startX)
    countValues = getCountMaxValues(startY, startX, countDims)
    'Zeile w|fffd|hlen
    Rows(startY + offsetY + countValues).Insert Shift:=xlDown
    'Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    'Range(Cells(startY, 1), Cells(startY + 1000, startX + 50)).Select
    If countValues > 0 And IsNumeric(Cells(startY + offsetY + countValues - 1, 1).Value) Then
        Cells(startY + offsetY + countValues, 1).Value = Cells(startY + offsetY + countValues - 1, 1).Value + 1
    Else
        Cells(startY + offsetY + countValues, 1).Value = countValues + 1
    End If
    
    formatTable
    Application.ScreenUpdating = True
End Sub

Sub removeMarkedLines()
    If (Selection.Rows.Count > 0) And (Selection.Columns.Count = ActiveSheet.Columns.Count) Then
        If MsgBox("Sollen die markierten Zeilen wirklich gel|fffd|scht werden?", vbYesNo, "Confirm") = vbYes Then
            Application.ScreenUpdating = False
            Selection.Delete Shift:=xlUp
            formatTable
            Application.ScreenUpdating = True
        End If
    Else
        MsgBox "Bitte eine Zeile zum Entfernen markieren"
    End If
End Sub

Attribute VB_Name = "Modul2"
Sub CharacteristicBox_Bei|fffd|nderung()
    Worksheets("Auswertung").EnableCalculation = False
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim startY As Integer
    startY = ActiveWorkbook.Names("Tabelle_1").RefersToRange.row
    'Alte Daten loeschen
    Dim i As Integer
    i = startY + offsetY
    While Cells(i, 1).Value <> ""
        Cells(i, 1).Value = ""
        Cells(i, 2).Value = ""
        Cells(i, 2).FormatConditions.Delete
        i = i + 1
    Wend
    Range(Cells(startY + offsetY, 1), Cells(1000, 2)).Select
    Call clearTableBorders
    'Werte aus Messprotokoll uebernehmen
    i = Cells(16, 9).Value
    If (i > 0) Then
        Dim startX As Integer
        startX = ActiveWorkbook.Names("Tabelle_1").RefersToRange.Column + 1
        Dim cy As Integer
        cy = startY + offsetY
        While Worksheets("Messprotokoll").Cells(cy, startX + i - 1).Value <> ""
            Cells(cy, 1).FormulaR1C1 = "=Messprotokoll!RC"
            Cells(cy, 2).FormulaR1C1 = "=Messprotokoll!RC[" + CStr(startX + i - 3) + "]"
            cy = cy + 1
        Wend
        Range(Cells(startY + offsetY, 1), Cells(cy - 1, 2)).Select
        Call formatTableBorders(True)
        'Bedingte Formatierung fuer Messwerte
        formula_1 = getLocalizedFormula(Cells(startY + offsetY, 2), "=AND(RC<>"""", ISNUMBER(RC), R" + CStr(startY + 3) + "C <> """", OR(R" + CStr(startY + 4) + "C <> """", R" + CStr(startY + 5) + "C <> """"), OR(IF(R" + CStr(startY + 4) + "C <> """", RC > R" + CStr(startY + 3) + "C+R" + CStr(startY + 4) + "C, FALSE), IF(R" + CStr(startY + 5) + "C <> """", RC < R" + CStr(startY + 3) + "C+R" + CStr(startY + 5) + "C, FALSE)))")
        formula_2 = getLocalizedFormula(Cells(startY + offsetY, 2), "=AND(RC<>"""", ISTEXT(RC), RC<>"""", RC<>""ok"", RC<>""i.O"")")
        Call formatRed(Range(Cells(startY + offsetY, 2), Cells(cy - 1, 2)), formula_1, formula_2)
        'Bedingte Formatierung fuer Mittelwert, Min und Max
        formula_1 = getLocalizedFormula(Cells(10, 9), "=AND(RC<>"""", ISNUMBER(RC), R10C2 <> """", OR(R11C2 <> """", R12C2 <> """"), OR(IF(R11C2 <> """", RC > R10C2+R11C2, FALSE), IF(R12C2 <> """", RC < R10C2+R12C2, FALSE)))")
        formula_2 = getLocalizedFormula(Cells(10, 9), "=AND(RC<>"""", ISTEXT(RC), RC<>"""", RC<>""ok"", RC<>""i.O"")")
        Call formatRed(Range(Cells(10, 9), Cells(12, 9)), formula_1, formula_2)
        'Bedingte Formatierung fuer cpk und Vertrauensbereich
        'Formeln uebersetzen
        formula_1 = getLocalizedFormula(Cells(10, 17), "=AND(RC<>"""", RC<1.00)")
        formula_2 = getLocalizedFormula(Cells(10, 17), "=AND(RC<>"""", RC<1.33)")
        Call formatCpk(Cells(10, 17), formula_1, formula_2)
        formula_1 = getLocalizedFormula(Cells(12, 17), "=AND(RC<>"""", RC<1.00)")
        formula_2 = getLocalizedFormula(Cells(12, 17), "=AND(RC<>"""", RC<1.33)")
        Call formatCpk(Range(Cells(12, 17), Cells(13, 18)), formula_1, formula_2)
    End If
    'Diagramm Rahmen
    Range(Cells(14, 3), Cells(48, 18)).Select
    Call formatTableBorders(False)
    'Markierungen entfernen
    Cells(1, 1).Select
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Worksheets("Auswertung").EnableCalculation = True
    
End Sub

Attribute VB_Name = "Modul3"
'Verschiedene Formatroutienen

Function getLocalizedFormula(cell_0, formula_0)
    cell_0.Select
    With Selection
        tFormula = .formula
        .formula = formula_0
        getLocalizedFormula = .FormulaLocal
        .formula = tFormula
    End With
End Function

Sub formatRed(range_0, formula_1, formula_2)
    range_0.Select
    With Selection
        .FormatConditions.Delete
        .FormatConditions.Add Type:=xlExpression, formula1:=formula_2
        With .FormatConditions(1).Font
            .Bold = True
            .Italic = False
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
        End With
        With .FormatConditions(1).Interior
            .PatternColorIndex = xlAutomatic
            .Color = 255
            .TintAndShade = 0
        End With
        .FormatConditions(1).StopIfTrue = True
        'Messwert
        .FormatConditions.Add Type:=xlExpression, formula1:=formula_1
        With .FormatConditions(2).Font
            .Bold = True
            .Italic = False
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
        End With
        With .FormatConditions(2).Interior
            .PatternColorIndex = xlAutomatic
            .Color = 255
            .TintAndShade = 0
        End With
        .FormatConditions(2).StopIfTrue = True
    End With
End Sub

Sub formatCpk(range_0, formula_1, formula_2)
    range_0.Select
    With Selection
        .FormatConditions.Delete
        .FormatConditions.Add Type:=xlExpression, formula1:=formula_1
        With .FormatConditions(1).Font
            .Bold = True
            .Italic = False
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
        End With
        With .FormatConditions(1).Interior
            .PatternColorIndex = xlAutomatic
            .Color = 255
            .TintAndShade = 0
        End With
        .FormatConditions(1).StopIfTrue = True
        .FormatConditions.Add Type:=xlExpression, formula1:=formula_2
        With .FormatConditions(2).Interior
            .PatternColorIndex = xlAutomatic
            .Color = 49407
            .TintAndShade = 0
        End With
        .FormatConditions(2).StopIfTrue = True
    End With
End Sub

Sub formatTableBorders(formatInside)
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    If formatInside = True Then
        With Selection.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ThemeColor = 1
            .TintAndShade = -0.14996795556505
            .Weight = xlThin
        End With
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ThemeColor = 1
            .TintAndShade = -0.14996795556505
            .Weight = xlThin
        End With
    End If
End Sub

Sub clearTableBorders()
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim lastCell As Range
Const characterRow As Integer = 9

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not lastCell Is Nothing Then
        If lastCell.Value <> "" Then
            Application.ScreenUpdating = False
            formatTable
            Application.ScreenUpdating = True
        End If
    End If
    Set lastCell = Nothing
    If Target.Cells.Count = 1 Then
        If Target.row = characterRow And Target.Value = "" Then
            Set lastCell = Target
        End If
    End If
End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
