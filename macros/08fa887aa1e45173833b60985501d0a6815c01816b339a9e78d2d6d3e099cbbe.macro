Attribute VB_Name = "AdminTask"
Sub Admin()
Attribute Admin.VB_ProcData.VB_Invoke_Func = "p\n14"
'
' Admin Macro
'
' Keyboard Shortcut: Ctrl+p
'
shData.Visible = xlSheetVisible
End Sub
Attribute VB_Name = "BillingEntity"
'************************************************************************************
'* Billing Entity procedures                                                        *
'* Shows the list of related products per category that are predefined for client   *
'* 7/1/2015                                                                         *
'************************************************************************************

Option Explicit
Sub bill_Med_Click()
    Call bill_RegularProd("Medical", "DP", "DQ", "DR")
End Sub
Sub bill_Dent_Click()
    Call bill_RegularProd("Dental", "DS", "DT", "DU")
End Sub
Sub bill_Vis_Click()
    Call bill_RegularProd("Vision", "DV", "DW", "DX")
End Sub
Sub bill_FSA_Click()
    Call bill_RegularProd("FSA", "NH", "NI", "NJ")
End Sub
Sub bill_Supplemental_Click()
    Call bill_RegularProd("Supplemental", "NQ", "NR", "NS")
End Sub
Sub btn_STD_Click()
    Call bill_SpecialtyProd("Short Term Disability", "DY", "DZ", "EA")
End Sub
Sub btn_LTD_Click()
    Call bill_SpecialtyProd("Long Term Disability", "DY", "DZ", "EA")
End Sub
Sub btn_VSTD_Click()
    Call bill_SpecialtyProd("Voluntary STD", "DY", "DZ", "EA")
End Sub
Sub btn_VLTD_Click()
    Call bill_SpecialtyProd("Voluntary LTD", "DY", "DZ", "EA")
End Sub
Sub btn_BULTD_Click()
    Call bill_SpecialtyProd("Buy-Up LTD", "DY", "DZ", "EA")
End Sub
Sub btn_BL_Click()
    Call bill_SpecialtyProd("Basic Life", "EB", "EC", "ED")
End Sub
Sub btn_OL_Click()
    Call bill_SpecialtyProd("Optional Life", "EB", "EC", "ED")
End Sub
Sub btn_VL_Click()
    Call bill_SpecialtyProd("Voluntary Life", "EB", "EC", "ED")
End Sub
Sub btn_BDL_Click()
    Call bill_SpecialtyProd("Basic Dep Life", "EB", "EC", "ED")
End Sub
Sub btn_ODL_Click()
    Call bill_SpecialtyProd("Optional Dep Life", "EB", "EC", "ED")
End Sub
Sub btn_VDL_Click()
    Call bill_SpecialtyProd("Voluntary Dep Life", "EB", "EC", "ED")
End Sub
Sub btn_BA_Click()
    Call bill_SpecialtyProd("Basic AD&D", "EE", "EF", "EG")
End Sub
Sub btn_OA_Click()
    Call bill_SpecialtyProd("Optional AD&D", "EE", "EF", "EG")
End Sub
Sub btn_VA_Click()
    Call bill_SpecialtyProd("Voluntary AD&D", "EE", "EF", "EG")
End Sub
Sub btn_BDA_Click()
    Call bill_SpecialtyProd("Basic Dep AD&D", "EE", "EF", "EG")
End Sub
Sub btn_ODA_Click()
    Call bill_SpecialtyProd("Optional Dep AD&D", "EE", "EF", "EG")
End Sub
Sub btn_VDA_Click()
    Call bill_SpecialtyProd("Voluntary Dep AD&D", "EE", "EF", "EG")
End Sub

Sub bill_RegularProd(ByVal prodName As String, ByVal col1 As String, ByVal col2 As String, ByVal col3 As String)
    Dim str As String: str = ""
    Dim lr As Long: lr = shData.Range(col1 & Rows.Count).End(xlUp).row
    Dim i As Long
    If lr < 3 Then
        str = "No " & prodName & " Suffixes are created"
    Else
        For i = 3 To lr
            str = str & "|fffd| " & shData.Range(col1 & i).Value & " - " & shData.Range(col2 & i).Value & vbLf
        Next i
    End If
    MsgBox str, vbInformation, "List of Suffixes"
End Sub

Sub bill_SpecialtyProd(ByVal prodName As String, ByVal col1 As String, ByVal col2 As String, ByVal col3 As String)
    Dim str As String: str = ""
    Dim lr As Long: lr = shData.Range(col1 & Rows.Count).End(xlUp).row
    Dim i As Long
    If lr < 3 Then
        str = "No " & prodName & " Suffixes are created"
    Else
        For i = 3 To lr
            If InStr(1, shData.Range(col1 & i).Value, prodName, vbTextCompare) <> 0 Then
                str = str & "|fffd| " & shData.Range(col1 & i).Value & " - " & shData.Range(col2 & i).Value & vbLf
            End If
        Next i
    End If
    If str = "" Then
        MsgBox "No " & prodName & " Suffixes are created"
    Else
        MsgBox str, vbInformation, "List of Suffixes"
    End If
End Sub

Sub bill_All()
    Dim str As String: str = ""
    Dim i As Long
    Dim colMed1 As String: colMed1 = "DP"
    Dim colMed2 As String: colMed2 = "DQ"
    Dim colMed3 As String: colMed3 = "DR"
    Dim colDent1 As String: colDent1 = "DS"
    Dim colDent2 As String: colDent2 = "DT"
    Dim colDent3 As String: colDent3 = "DU"
    Dim colVis1 As String: colVis1 = "DV"
    Dim colVis2 As String: colVis2 = "DW"
    Dim colVis3 As String: colVis3 = "DX"
    Dim colDis1 As String: colDis1 = "DY"
    Dim colDis2 As String: colDis2 = "DZ"
    Dim colDis3 As String: colDis3 = "EA"
    Dim colLife1 As String: colLife1 = "EB"
    Dim colLife2 As String: colLife2 = "EC"
    Dim colLife3 As String: colLife3 = "ED"
    Dim colADD1 As String: colADD1 = "EE"
    Dim colADD2 As String: colADD2 = "EF"
    Dim colADD3 As String: colADD3 = "EG"
    Dim lrMed As Long: lrMed = shData.Range(colMed1 & Rows.Count).End(xlUp).row
    Dim lrDent As Long: lrDent = shData.Range(colDent1 & Rows.Count).End(xlUp).row
    Dim lrVis As Long: lrVis = shData.Range(colVis1 & Rows.Count).End(xlUp).row
    Dim lrDis As Long: lrDis = shData.Range(colDis1 & Rows.Count).End(xlUp).row
    Dim lrLife As Long: lrLife = shData.Range(colLife1 & Rows.Count).End(xlUp).row
    Dim lrADD As Long: lrADD = shData.Range(colADD1 & Rows.Count).End(xlUp).row
    
    If lrMed > 2 Then
        For i = 3 To lrMed
            str = str & "|fffd| " & shData.Range(colMed1 & i).Value & " - " & shData.Range(colMed2 & i).Value & vbLf
        Next i
    End If
    If lrDent > 2 Then
        For i = 3 To lrDent
            str = str & "|fffd| " & shData.Range(colDent1 & i).Value & " - " & shData.Range(colDent2 & i).Value & vbLf
        Next i
    End If
    If lrVis > 2 Then
        For i = 3 To lrVis
            str = str & "|fffd| " & shData.Range(colVis1 & i).Value & " - " & shData.Range(colVis2 & i).Value & vbLf
        Next i
    End If
    If lrDis > 2 Then
        For i = 3 To lrDis
            str = str & "|fffd| " & shData.Range(colDis1 & i).Value & " - " & shData.Range(colDis2 & i).Value & vbLf
        Next i
    End If
    If lrLife > 2 Then
        For i = 3 To lrLife
            str = str & "|fffd| " & shData.Range(colLife1 & i).Value & " - " & shData.Range(colLife2 & i).Value & vbLf
        Next i
    End If
    If lrADD > 2 Then
        For i = 3 To lrADD
            str = str & "|fffd| " & shData.Range(colADD1 & i).Value & " - " & shData.Range(colADD2 & i).Value & vbLf
        Next i
    End If
    
    If str = "" Then
        MsgBox "No Suffixes are created for any products"
    Else
        MsgBox str, vbInformation, "List of Suffixes"
    End If
End Sub
Attribute VB_Name = "Byte1000"
Option Explicit
Sub btn_1kbyte_Click()
    Dim response, caseNo, effDate
        caseNo = shOUO.Range("B6").Value
        effDate = Format(shOUO.Range("B4").Value, "YYYYMMDD")
    If caseNo = vbNullString Or effDate = vbNullString Then
        MsgBox "The Case Number and Effective Date are Missing and are Required in the Admin Page, Please update them and run the 1k byte file again", vbCritical, "REQUIRED FIELDS MISSING!"
    End If
    If shData.Range("H80").Value <> True And shData.Range("I80").Value <> True Then
        response = MsgBox("Data Validation is not complete." & vbLf & "Both 'Enrollments' and 'Terminations' tabs have errors." & vbLf & "Are you sure you want to create a 1000 byte file?", vbOKCancel, "Are you sure?")
        If response = vbOK Then
            Call Export1kFile
        End If
    ElseIf shData.Range("H80").Value <> True And shData.Range("I80").Value = True Then
        response = MsgBox("Data Validation is not complete." & vbLf & "'Enrollments' tab has errors." & vbLf & "Are you sure you want to create a 1000 byte file?", vbOKCancel, "Are you sure?")
        If response = vbOK Then
            Call Export1kFile
        End If
    ElseIf shData.Range("H80").Value = True And shData.Range("I80").Value <> True Then
        response = MsgBox("Data Validation is not complete." & vbLf & "'Terminations' tab has errors." & vbLf & "Are you sure you want to create a 1000 byte file?", vbOKCancel, "Are you sure?")
        If response = vbOK Then
            Call Export1kFile
        End If
    Else
        Call Export1kFile
    End If
End Sub

Sub Export1kFile()
    Dim rel As Byte
    Dim i As Long, lrS As Long, lrT As Long, recCount As Long
    Dim Fs As Object, file As Object
    Dim sPath As String, sPathBU As String, HeaderRecord As String, TrailerRecord As String
    Dim caseNo As String * 10
    Dim effDate As String * 8, FileCreateDt As String * 8
    Dim strRecCount As String * 7
    Dim dk As Integer
    Dim fileName As String
    Dim gaFile As String
    Dim minLmt As Integer: minLmt = 0
    Dim maxLmt As Integer: maxLmt = 0
    
    If shData.Range("grp").Value = "Large" Then
        Select Case shData.Range("state").Value
            Case "CALIFORNIA" ' 1
                minLmt = 0
                maxLmt = 47
                '48-49 = IN 50-51 = KY 52 = MO 53 = WI 56-57 = NH 58-59 = ME - Reassinged clients
            Case "CONNECTICUT" ' 2
                minLmt = 54
                maxLmt = 55
            Case "COLORADO"
                minLmt = 0
                maxLmt = 15
            Case "NEVADA"
                minLmt = 16
                maxLmt = 20
            Case "NEW YORK"
                minLmt = 1
                maxLmt = 40
            Case "INDIANA"
                minLmt = 1
                maxLmt = 2
            Case "KENTUCKY"
                minLmt = 3
                maxLmt = 4
            Case "MISSOURI"
                minLmt = 5
                maxLmt = 6
            Case "OHIO"
                minLmt = 7
                maxLmt = 8
            Case "WISCONSIN"
                minLmt = 9
                maxLmt = 10
            Case "VIRGINIA"
                minLmt = 11
                maxLmt = 17
            Case "NEW HAMPSHIRE" '2 clients New
                minLmt = 56
                maxLmt = 57
            Case "MAINE" '2 clients New
                minLmt = 58
                maxLmt = 59
        End Select
        If shData.Range("B2").Value = True Or shData.Range("B8").Value Or shData.Range("B14").Value Or shData.Range("B15").Value = True Then 'CA or CT or ME or NH
          fileName = "internal_ak3s_k3s_elig_"
        ElseIf shData.Range("B3").Value = True Or shData.Range("B4").Value = True Then 'CO or NV
            fileName = "internal_am1e_m1e_elig_"
        ElseIf shData.Range("B5").Value = True Then 'GA
            fileName = "internal_ga_n1"
        ElseIf shData.Range("B6").Value = True Then 'NY
            fileName = "census_newyork_elig_"
        ElseIf shData.Range("B7").Value Or shData.Range("B9").Value Or shData.Range("B10").Value Or shData.Range("B11").Value Or shData.Range("B12").Value Or shData.Range("B13").Value Then
            fileName = "census_centralstates_elig_"
        Else
            Exit Sub
        End If
    ElseIf shData.Range("grp").Value = "Small" Then
        Select Case shData.Range("state").Value
            Case "CALIFORNIA"
                minLmt = 0
                maxLmt = 29
            Case "CONNECTICUT"
                minLmt = 30
                maxLmt = 31
            Case "COLORADO"
                minLmt = 21
                maxLmt = 49
            Case "NEVADA"
                minLmt = 50
                maxLmt = 59
            Case "NEW YORK"
                minLmt = 32
                maxLmt = 38
            Case "INDIANA"
                minLmt = 39
                maxLmt = 40
            Case "KENTUCKY"
                minLmt = 41
                maxLmt = 42
            Case "MISSOURI"
                minLmt = 43
                maxLmt = 44
            Case "OHIO"
                minLmt = 45
                maxLmt = 51
            Case "WISCONSIN"
                minLmt = 52
                maxLmt = 53
            Case "VIRGINIA"
                minLmt = 54
                maxLmt = 55
            Case "NEW HAMPSHIRE"
                minLmt = 56
                maxLmt = 57
            Case "MAINE"
                minLmt = 58
                maxLmt = 59
          End Select
          If (shData.Range("state").Value = "COLORADO" Or shData.Range("state").Value = "NEVADA") Then
                fileName = "internal_am1e_m1e_elig_"
          Else
                fileName = "internal_smgrp_p6v_elig_"
          End If
    End If
    lrS = shSL.Cells(Rows.Count, ColumnPerName("CASE")).End(xlUp).row
    lrT = shTerm.Cells(Rows.Count, ColumnPerName4Term("CASE")).End(xlUp).row
    If lrS > 6 Or lrT > 6 Then
       
        'sPath = "C:\ReportDownload\"
        sPath = "\\np01ana001\sgmembership\Census\"
        sPathBU = "\\np01ana001\sgmembership\Census_Offshore\"
        If Not FolderExists(sPath) Or Not FolderExists(sPathBU) Then
            MsgBox "you do not have access to at least of the following shared folders:" & vbLf & sPath & vbLf & sPathBU & vbLf & vbLf & _
                    "Please request Read/Write/Delete access to the files mentioned above via Request IT", vbOKCancel, "No Access!"
            Exit Sub
        End If
        Set Fs = CreateObject("Scripting.FileSystemObject")
        
        If shData.Range("B2").Value Or shData.Range("B3").Value Or shData.Range("B4").Value Or _
            shData.Range("B6").Value Or shData.Range("B7").Value Or shData.Range("B8").Value Or _
            shData.Range("B9").Value Or shData.Range("B10").Value Or shData.Range("B11").Value Or _
            shData.Range("B12").Value Or shData.Range("B13").Value Or shData.Range("B14").Value Or shData.Range("B15").Value Then
            On Error Resume Next
            
            dk = -1
            If shData.Range("grp").Value = "Large" And shData.Range("State").Value = "OHIO" Then
                dk = InputBox("Please enter a value between " & minLmt & " to " & maxLmt & vbNewLine & " Or Between 18 to 20")
            Else
                dk = InputBox("Please enter a value between " & minLmt & " to " & maxLmt)
            End If
            '48-49 = IN 50-51 = KY 52 = MO 53 = WI
            If shData.Range("grp").Value = "Large" And shData.Range("State").Value = "OHIO" Then
                If Not dk >= minLmt Or Not dk <= maxLmt _
                And Not dk >= 18 Or Not dk <= 20 Then
                    MsgBox "Invalid entry." & vbLf & "Please try again later."
                    Exit Sub
                End If
            Else
                If Not dk >= minLmt Or Not dk <= maxLmt Then
                    MsgBox "Invalid entry." & vbLf & "Please try again later."
                    Exit Sub
                End If
            End If
            Set file = Fs.CreateTextFile(sPath & fileName & Format(dk, "00") & ".txt", True)
        ElseIf shData.Range("B5").Value Then 'GA
            On Error Resume Next
            gaFile = ""
            gaFile = InputBox("Please enter a value between g and p")
            If LCase(gaFile) < "g" Or LCase(gaFile) > "p" Then
                MsgBox "Invalid entry." & vbLf & "Please try again later."
                Exit Sub
            End If
            Set file = Fs.CreateTextFile(sPath & fileName & LCase(gaFile) & "_elig.txt", True)
        End If
        
        recCount = 0
    
        caseNo = shOUO.Range("B6").Value
        effDate = Format(shOUO.Range("B4").Value, "YYYYMMDD")
        FileCreateDt = Format(Date, "YYYYMMDD")
        
        HeaderRecord = s__(9) & caseNo & s__(12) & "0" & effDate & FileCreateDt & "C" & s__(951)
        file.WriteLine (HeaderRecord)
        
        If lrS > 6 Then
            For i = 7 To lrS
                Select Case shSL.Cells(i, ColumnPerName("RELATIONSHIP CODE")).Value
                    Case "SUB"
                        rel = 1
                    Case "SPS", "DOM"
                        rel = 2
                    Case "CHD"
                        rel = 3
                    Case "STU"
                        rel = 4
                    Case "HCH"
                        rel = 5
                End Select
                
                If Trim(shSL.Cells(i, ColumnPerName("MEDICAL PRODUCT")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("MEDICAL PRODUCT")).Value), i, rel, file, recCount, True) 'Medical
                If Trim(shSL.Cells(i, ColumnPerName("DENTAL PRODUCT")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("DENTAL PRODUCT")).Value), i, rel, file, recCount, , True) 'Dental
                If Trim(shSL.Cells(i, ColumnPerName("VISION PRODUCT")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VISION PRODUCT")).Value), i, rel, file, recCount) 'Vision
                If Trim(shSL.Cells(i, ColumnPerName("FULL HEALTHCARE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("FULL HEALTHCARE")).Value), i, rel, file, recCount) 'FSA 1
                If Trim(shSL.Cells(i, ColumnPerName("LIMITED PURPOSE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("LIMITED PURPOSE")).Value), i, rel, file, recCount) 'FSA 2
                If Trim(shSL.Cells(i, ColumnPerName("DEPENDENT CARE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("DEPENDENT CARE")).Value), i, rel, file, recCount) 'FSA 3
                If Trim(shSL.Cells(i, ColumnPerName("COMMUTER TRANSIT")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("COMMUTER TRANSIT")).Value), i, rel, file, recCount) 'FSA 4
                If Trim(shSL.Cells(i, ColumnPerName("COMMUTER PARKING")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("COMMUTER PARKING")).Value), i, rel, file, recCount) 'FSA 5
                If Trim(shSL.Cells(i, ColumnPerName("Critical Illness Voluntary")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Critical Illness Voluntary")).Value), i, rel, file, recCount) 'Supplemental 1
                If Trim(shSL.Cells(i, ColumnPerName("Critical Illness Employer paid")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Critical Illness Employer paid")).Value), i, rel, file, recCount) 'Supplemental 2
                If Trim(shSL.Cells(i, ColumnPerName("Accident Voluntary")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Accident Voluntary")).Value), i, rel, file, recCount) 'Supplemental 3
                If Trim(shSL.Cells(i, ColumnPerName("Accident Employer paid")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Accident Employer paid")).Value), i, rel, file, recCount) 'Supplemental 4
                If Trim(shSL.Cells(i, ColumnPerName("Hospital Indemnity Voluntary")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Hospital Indemnity Voluntary")).Value), i, rel, file, recCount) 'Supplemental 5
                If Trim(shSL.Cells(i, ColumnPerName("Hospital Indemnity Employer paid")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("Hospital Indemnity Employer paid")).Value), i, rel, file, recCount) 'Supplemental 6
                If rel = 1 Then
                    If Trim(shSL.Cells(i, ColumnPerName("STD")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("STD")).Value), i, rel, file, recCount, , , "STD") 'STD
                    If Trim(shSL.Cells(i, ColumnPerName("LTD")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("LTD")).Value), i, rel, file, recCount, , , "LTD") 'LTD
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY STD")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY STD")).Value), i, rel, file, recCount, , , "VOLUNTARY STD") 'Voluntay STD
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY LTD")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY LTD")).Value), i, rel, file, recCount, , , "STD") 'Voluntay LTD
                    If Trim(shSL.Cells(i, ColumnPerName("BUY-UP LTD")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("BUY-UP LTD")).Value), i, rel, file, recCount, , , "BUY-UP LTD") 'Buy-up LTD
                    If Trim(shSL.Cells(i, ColumnPerName("BASIC LIFE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC LIFE")).Value), i, rel, file, recCount, , , "BASIC") 'Basic Life
                    If Trim(shSL.Cells(i, ColumnPerName("OPTIONAL LIFE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL LIFE")).Value), i, rel, file, recCount, , , "OPTIONAL") 'Optional Life
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY LIFE")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY LIFE")).Value), i, rel, file, recCount, , , "VOLUNTARY") 'Voluntary Life
                    If Trim(shSL.Cells(i, ColumnPerName("BASIC AD&D")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC AD&D")).Value), i, rel, file, recCount, , , "AD&D BASIC") 'Basic AD&D
                    If Trim(shSL.Cells(i, ColumnPerName("OPTIONAL AD&D")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL AD&D")).Value), i, rel, file, recCount, , , "AD&D OPTIONAL") 'Optional AD&D
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY AD&D")).Value) <> "" Then Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY AD&D")).Value), i, rel, file, recCount, , , "AD&D VOLUNTARY") 'Voluntary AD&D
                    If Trim(shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value) <> "" Then 'Basic Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value), i, rel, file, recCount, "BASIC")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value), i, rel, file, recCount, , , "BASIC DEP")
                    End If
                    If Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value) <> "" Then 'Optional Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value), i, rel, file, recCount, "OPTIONAL")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value), i, rel, file, recCount, , , "OPTIONAL DEP")
                    End If
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value) <> "" Then 'Voluntary Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value), i, rel, file, recCount, "VOLUNTARY")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value), i, rel, file, recCount, , , "VOLUNTARY DEP")
                    End If
                    If Trim(shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value) <> "" Then 'Basic Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value), i, rel, file, recCount, "AD&D BASIC")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value), i, rel, file, recCount, , , "AD&D BASIC DEP")
                    End If
                    If Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value) <> "" Then 'Basic Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value), i, rel, file, recCount, "AD&D OPTIONAL")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value), i, rel, file, recCount, , , "AD&D OPTIONAL DEP")
                    End If
                    If Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value) <> "" Then 'Basic Dep Life
                        Call DependentRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value), i, rel, file, recCount, "AD&D VOLUNTARY")
                        Call MemberRecord(Trim(shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value), i, rel, file, recCount, , , "AD&D VOLUNTARY DEP")
                    End If
                End If
            Next i
        End If
        
        If lrT > 6 Then
            For i = 7 To lrT
                Select Case shTerm.Cells(i, ColumnPerName4Term("RELATIONSHIP CODE")).Value
                    Case "SUB"
                        rel = 1
                    Case "SPS", "DOM"
                        rel = 2
                    Case "CHD"
                        rel = 3
                    Case "STU"
                        rel = 4
                    Case "HCH"
                        rel = 5
                End Select
                
                If Trim(shTerm.Cells(i, ColumnPerName4Term("GROUP NUMBER")).Value) <> "" Then Call MemberRecord4Term(Trim(shTerm.Cells(i, ColumnPerName4Term("GROUP NUMBER")).Value), i, rel, file, recCount)
            Next i
        End If
        strRecCount = Format(recCount, "0000000")
        
        TrailerRecord = s__(31) & "9" & strRecCount & s__(961)
        file.WriteLine (TrailerRecord)
        file.Close
        
        If shData.Range("B5").Value Then 'GA
            FileCopy sPath & fileName & LCase(gaFile) & "_elig.txt", sPathBU & Trim(shOUO.Range("B6").Value) & "-" & Format(DateTime.Now, "YYYYMMDD") & "-" & Replace(Range("version").Value, ".", "") & "-" & fileName & LCase(gaFile) & "_elig.txt"
        Else
            FileCopy sPath & fileName & Format(dk, "00") & ".txt", sPathBU & Trim(shOUO.Range("B6").Value) & "-" & Format(DateTime.Now, "YYYYMMDD") & "-" & Replace(Range("version").Value, ".", "") & "-" & fileName & Format(dk, "00") & ".txt"
        End If
        
        MsgBox "Export has completed" & vbLf & sPath & fileName & Format(dk, "00") & ".txt"
    Else
        MsgBox "No data found to produce 1000 byte file."
    End If
End Sub

Sub MemberRecord(ByVal grpNo As String, ByVal i As Long, ByVal rel As Byte, ByRef file As Object, ByRef recCount As Long, Optional ByVal isMedical As Boolean, Optional ByVal isDental As Boolean, Optional ByVal lifeStr As String)
    Dim empSSN As String * 9: empSSN = s__(9)
    Dim grpLeftFive As String * 10: grpLeftFive = s__(10)
    Dim grpRightFive As String * 10: grpRightFive = s__(10)
    Dim actionCode As String * 1: actionCode = "C"
    Dim relInd As Byte
    Dim recType As Byte: recType = 1
    Dim DOB As String * 8: DOB = s__(8)
    Dim FN As String * 12: FN = s__(12)
    Dim MI As String * 1: MI = s__(1)
    Dim ln As String * 16: ln = s__(16)
    Dim gender As String * 1: gender = s__(1)
    Dim relCod As String * 3: relCod = s__(3)
    Dim effDt As String * 8: effDt = s__(8)
    Dim DOH As String * 8: DOH = s__(8)
    Dim lang As String * 3: lang = s__(3)
    Dim memSSN As String * 9: memSSN = s__(9)
    Dim adrs As String * 25: adrs = s__(25)
    Dim city As String * 13: city = s__(13)
    Dim st As String * 2: st = s__(2)
    Dim zip As String * 5: zip = s__(5)
    Dim adrs2 As String * 24: adrs2 = s__(24)
    Dim phone As String * 10: phone = "0000000000"
    Dim country As String * 2: country = "US"
    Dim IPA As String * 9: IPA = s__(9)
    Dim existingPatient As String * 1: existingPatient = s__(1)
    Dim depNo As String * 10: depNo = s__(10)
    Dim empNo As String * 10: empNo = s__(10)
    Dim caseNo As String * 10: caseNo = s__(10)
    Dim salary As String * 11
    Dim salaryMult As String * 5: salaryMult = s__(5)
    Dim salaryCvgAmt As String * 11
    Dim isDisabled As String * 1: isDisabled = s__(1)
    Dim cobInd As String * 1: cobInd = s__(1)
    Dim cobBeginDt As String * 8: cobBeginDt = s__(8)
    Dim cobEndDt As String * 8: cobEndDt = ""
    Dim cobEventCode As String * 2: cobEventCode = s__(2)
    Dim medicPartAInd As String * 1: medicPartAInd = s__(1)
    Dim medicPartADt As String * 8: medicPartADt = s__(8)
    Dim medicPartBInd As String * 1: medicPartBInd = s__(1)
    Dim medicPartBDt As String * 8: medicPartBDt = s__(8)
    Dim medicHIB As String * 12: medicHIB = s__(12)
    Dim VIP As String * 1: VIP = "N"
    Dim HCID As String * 20: HCID = s__(20)
    Dim email As String * 106: email = s__(106)
    Dim memRecord As String * 1000: memRecord = Space(1000)
    Dim COB As String * 1: COB = s__(1)
    Dim DOM As Boolean: DOM = False
    Dim DOMspace As String * 3: DOMspace = s__(3)
    
    empSSN = Format(shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000")
    grpLeftFive = Left(grpNo, 5)
    If 5 - (10 - Len(grpNo)) > 0 Then
        grpRightFive = Right(grpNo, 5 - (10 - Len(grpNo)))
    End If
    relInd = rel
    DOB = Format(shSL.Cells(i, ColumnPerName("DOB")).Value, "YYYYMMDD")
    FN = shSL.Cells(i, ColumnPerName("FIRST NAME")).Value
    MI = shSL.Cells(i, ColumnPerName("MIDDLE INITIAL")).Value
    ln = shSL.Cells(i, ColumnPerName("LAST NAME")).Value
    gender = shSL.Cells(i, ColumnPerName("GENDER")).Value
    relCod = shSL.Cells(i, ColumnPerName("RELATIONSHIP CODE")).Value
    If relCod = "DOM" Then
        relCod = "SPS"
        DOM = True
    End If
    effDt = Format(shSL.Cells(i, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "YYYYMMDD")
    DOH = Format(shSL.Cells(i, ColumnPerName("DATE OF HIRE")).Value, "YYYYMMDD")
    memSSN = Format(shSL.Cells(i, ColumnPerName("MEMBER SSN")).Value, "000000000")
    If Trim(memSSN) <> "" Then
        memSSN = Format(shSL.Cells(i, ColumnPerName("MEMBER SSN")).Value, "000000000")
    Else
        memSSN = "000000000"
    End If
    If Trim(shSL.Cells(i, ColumnPerName("LANGUAGE")).Value) = "" Then
        lang = "ENG"
    Else
        lang = Trim(shSL.Cells(i, ColumnPerName("LANGUAGE")).Value)
    End If
    adrs = shSL.Cells(i, ColumnPerName("ADDRESS")).Value
    city = shSL.Cells(i, ColumnPerName("CITY")).Value
    st = shSL.Cells(i, ColumnPerName("STATE")).Value
    zip = Format(shSL.Cells(i, ColumnPerName("ZIP CODE")).Value, "00000")
    adrs2 = shSL.Cells(i, ColumnPerName("SECOND ADDRESS FIELD")).Value
    phone = shSL.Cells(i, ColumnPerName("PHONE NUMBER")).Value
    If Trim(phone) = "" Then phone = "0000000000"
    depNo = shSL.Cells(i, ColumnPerName("DEPARTMENT NUMBER")).Value
    empNo = shSL.Cells(i, ColumnPerName("EMPLOYEE NUMBER")).Value
    caseNo = shSL.Cells(i, ColumnPerName("CASE")).Value
    If lifeStr = "BASIC" Or lifeStr = "OPTIONAL" Or lifeStr = "VOLUNTARY" Or lifeStr = "AD&D BASIC" Or lifeStr = "AD&D OPTIONAL" Or lifeStr = "AD&D VOLUNTARY" Then
        salary = Replace(CStr(Format(shSL.Cells(i, ColumnPerName("SALARY")).Value, "0.00")), ".", "") 'CStr(shSL.Cells(i, ColumnPerName("SALARY")).Value)
        salaryMult = Replace(CStr(Format(shSL.Cells(i, ColumnPerName(lifeStr & " MULTIPLIER")).Value, "00.000")), ".", "") 'CStr(shSL.Cells(i, ColumnPerName(lifeStr & " MULTIPLIER")).Value)
        salaryCvgAmt = Trim(shSL.Cells(i, ColumnPerName(lifeStr & " VOLUME")).Value2)
    ElseIf lifeStr = "BASIC DEP" Or lifeStr = "OPTIONAL DEP" Or lifeStr = "VOLUNTARY DEP" Or lifeStr = "AD&D BASIC DEP" Or lifeStr = "AD&D OPTIONAL DEP" Or lifeStr = "AD&D VOLUNTARY DEP" Then
        salary = Replace(CStr(Format(shSL.Cells(i, ColumnPerName("SALARY")).Value, "0.00")), ".", "") 'CStr(shSL.Cells(i, ColumnPerName("SALARY")).Value)
        salaryCvgAmt = shSL.Cells(i, ColumnPerName(Left(lifeStr, Len(lifeStr) - 4) & " SUB VOLUME")).Value
    ElseIf lifeStr = "LTD" Or lifeStr = "STD" Or lifeStr = "VOLUNTARY STD" Or lifeStr = "VOLUNTARY LTD" Or lifeStr = "BUY-UP LTD" Then
        salary = Replace(CStr(Format(shSL.Cells(i, ColumnPerName("SALARY")).Value, "0.00")), ".", "")
    End If
    If isMedical Then
        IPA = shSL.Cells(i, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value
    ElseIf isDental Then
        IPA = shSL.Cells(i, ColumnPerName("DENTAL OFFICE")).Value
    End If
    existingPatient = Trim(shSL.Cells(i, ColumnPerName("CURRENT PCP")).Value)
    If Trim(existingPatient) = "" Then existingPatient = "N"
    isDisabled = "N"
    If relCod = "HCH" Then isDisabled = "Y"
    COB = Left(Trim(shSL.Cells(i, ColumnPerName("COB")).Value), 1)
    cobInd = "N"
    If Trim(shSL.Cells(i, ColumnPerName("COBRA START DATE")).Value) <> "" Then cobInd = "Y"
    If cobInd = "Y" Then
        cobEventCode = shSL.Cells(i, ColumnPerName("COBRA QUALIFYING EVENT")).Value
        cobBeginDt = Format(shSL.Cells(i, ColumnPerName("COBRA START DATE")).Value, "YYYYMMDD")
    End If
    medicPartAInd = "N"
    If Trim(shSL.Cells(i, ColumnPerName("MEDICARE PART A EFF DATE")).Value) <> "" Then medicPartAInd = "Y"
    medicPartADt = Format(shSL.Cells(i, ColumnPerName("MEDICARE PART A EFF DATE")).Value, "YYYYMMDD")
    medicPartBInd = "N"
    If Trim(shSL.Cells(i, ColumnPerName("MEDICARE PART B EFF DATE")).Value) <> "" Then medicPartBInd = "Y"
    medicPartBDt = Format(shSL.Cells(i, ColumnPerName("MEDICARE PART B EFF DATE")).Value, "YYYYMMDD")
    medicHIB = shSL.Cells(i, ColumnPerName("MEDICARE HIB ID")).Value
    HCID = shSL.Cells(i, ColumnPerName("HCID")).Value
    email = shSL.Cells(i, ColumnPerName("EMAIL")).Value
    
    salaryCvgAmt = Format(salaryCvgAmt, "00000000000")
    salary = Format(salary, "00000000000")
    If DOM Then
        DOMspace = "DOM"
    Else
        DOMspace = s__(3)
    End If
        memRecord = empSSN & grpLeftFive & grpRightFive & s__(1) & relInd & recType & DOB & FN & MI & ln & gender & relCod & s__(45) & effDt & s__(10) & _
                DOH & s__(31) & s__(1) & memSSN & s__(10) & adrs & city & st & zip & s__(6) & adrs2 & phone & s__(4) & _
                country & s__(33) & IPA & s__(18) & existingPatient & s__(1) & depNo & empNo & s__(41) & _
                caseNo & s__(10) & "A" & Right(s__(11) & (CStr(salary)), 11) & Right(s__(5) & (CStr(salaryMult)), 5) & salaryCvgAmt & s__(41) & _
                COB & isDisabled & cobInd & cobBeginDt & cobEndDt & cobEventCode & medicPartAInd & medicPartADt & medicPartBInd & medicPartBDt & _
                medicHIB & VIP & s__(4) & DOMspace & HCID & s__(137) & lang & lang & s__(114) & email & s__(60)
   
    file.WriteLine (memRecord)
    recCount = recCount + 1
End Sub

Sub MemberRecord4Term(ByVal grpNo As String, ByVal i As Long, ByVal rel As Byte, ByRef file As Object, ByRef recCount As Long)
    Dim empSSN As String * 9: empSSN = s__(9)
    Dim grpLeftFive As String * 10: grpLeftFive = s__(10)
    Dim grpRightFive As String * 10: grpRightFive = s__(10)
    Dim actionCode As String * 1: actionCode = "C"
    Dim relInd As Byte: relInd = 0
    Dim recType As Byte: recType = 1
    Dim DOB As String * 8: DOB = s__(8)
    Dim FN As String * 12: FN = s__(12)
    Dim MI As String * 1: MI = s__(1)
    Dim ln As String * 16: ln = s__(16)
    Dim gender As String * 1: gender = s__(1)
    Dim relCod As String * 3: relCod = s__(3)
    Dim effDt As String * 8: effDt = s__(8)
    Dim termDt As String * 8: termDt = s__(8)
    Dim termCd As String * 2: termCd = "28"
    Dim DOH As String * 8: DOH = s__(8)
    Dim lang As String * 3: lang = s__(3)
    Dim memSSN As String * 9: memSSN = s__(9)
    Dim adrs As String * 25: adrs = s__(25)
    Dim city As String * 13: city = s__(13)
    Dim st As String * 2: st = s__(2)
    Dim zip As String * 5: zip = s__(5)
    Dim adrs2 As String * 24: adrs2 = s__(24)
    Dim phone As String * 10: phone = "0000000000"
    Dim country As String * 2: country = "US"
    Dim IPA As String * 9: IPA = s__(9)
    Dim existingPatient As String * 1: existingPatient = s__(1)
    Dim depNo As String * 10: depNo = s__(10)
    Dim empNo As String * 10: empNo = s__(10)
    Dim caseNo As String * 10: caseNo = s__(10)
    Dim salary As String * 11: salary = s__(11)
    Dim salaryMult As String * 5: salaryMult = s__(5)
    Dim salaryCvgAmt As String * 11: salaryCvgAmt = s__(11)
    Dim isDisabled As String * 1: isDisabled = s__(1)
    Dim cobInd As String * 1: cobInd = s__(1)
    Dim cobBeginDt As String * 8: cobBeginDt = s__(8)
    Dim cobEndDt As String * 8: cobEndDt = s__(8)
    Dim cobEventCode As String * 2: cobEventCode = s__(2)
    Dim medicPartAInd As String * 1: medicPartAInd = s__(1)
    Dim medicPartADt As String * 8: medicPartADt = s__(8)
    Dim medicPartBInd As String * 1: medicPartBInd = s__(1)
    Dim medicPartBDt As String * 8: medicPartBDt = s__(8)
    Dim medicHIB As String * 12: medicHIB = s__(12)
    Dim VIP As String * 1: VIP = "N"
    Dim HCID As String * 20: HCID = s__(20)
    Dim email As String * 106: email = s__(106)
    Dim memRecord As String * 1000: memRecord = s__(1000)
    Dim COB As String * 1: COB = s__(1)
    Dim DOM As Boolean: DOM = False
    Dim DOMspace As String * 3: DOMspace = s__(3)
    
    empSSN = Format(shTerm.Cells(i, ColumnPerName4Term("EMPLOYEES SOCIAL")).Value, "000000000")
    grpLeftFive = Left(grpNo, 5)
    If 5 - (10 - Len(grpNo)) > 0 Then
        grpRightFive = Right(grpNo, 5 - (10 - Len(grpNo)))
    End If
    relInd = rel
    DOB = Format(shTerm.Cells(i, ColumnPerName4Term("DOB")).Value, "YYYYMMDD")
    FN = shTerm.Cells(i, ColumnPerName4Term("FIRST NAME")).Value
    ln = shTerm.Cells(i, ColumnPerName4Term("LAST NAME")).Value
    gender = shTerm.Cells(i, ColumnPerName4Term("GENDER")).Value
    relCod = shTerm.Cells(i, ColumnPerName4Term("RELATIONSHIP CODE")).Value
    If relCod = "DOM" Then
        relCod = "SPS"
        DOM = True
    End If
    effDt = Format(shTerm.Cells(i, ColumnPerName4Term("EFFECTIVE DATE FOR COVERAGE")).Value, "YYYYMMDD")
    termDt = Format(shTerm.Cells(i, ColumnPerName4Term("TERMINATION DATE")).Value, "YYYYMMDD")

    If memSSN <> "" Then
        memSSN = Format(shTerm.Cells(i, ColumnPerName4Term("MEMBER SSN")).Value, "000000000")
    Else
        memSSN = "000000000"
    End If
    If Trim(shTerm.Cells(i, ColumnPerName4Term("LANGUAGE")).Value) = "" Then
        lang = "ENG"
    Else
        lang = Trim(shTerm.Cells(i, ColumnPerName4Term("LANGUAGE")).Value)
    End If
    adrs = shTerm.Cells(i, ColumnPerName4Term("ADDRESS")).Value
    city = shTerm.Cells(i, ColumnPerName4Term("CITY")).Value
    st = shTerm.Cells(i, ColumnPerName4Term("STATE")).Value
    zip = Format(shTerm.Cells(i, ColumnPerName4Term("ZIP CODE")).Value, "00000")
    caseNo = shTerm.Cells(i, ColumnPerName4Term("CASE")).Value
    existingPatient = Trim(shTerm.Cells(i, ColumnPerName4Term("CURRENT PCP")).Value)
    If Trim(existingPatient) = "" Then existingPatient = "N"
    isDisabled = "N"
    If relCod = "HCH" Then isDisabled = "Y"
    If DOM Then
        DOMspace = "DOM"
    Else
        DOMspace = s__(3)
    End If
    
'    memRecord = empSSN & grpLeftFive & grpRightFive & actionCode & relInd & recType & DOB & FN & MI & LN & gender & relCod & Space(45) & effDt & termDt & termCd & _
'                DOH & Space(31) & Space(1) & memSSN & Space(10) & adrs & city & st & zip & Space(6) & adrs2 & phone & Space(4) & _
'                country & Space(33) & IPA & Space(18) & existingPatient & Space(1) & depNo & empNo & Space(41) & _
'                caseNo & Space(11) & Right(Space(11) & Trim(CStr(salary)), 11) & Right(Space(5) & Trim(CStr(salaryMult)), 5) & Right(Space(11) & Trim(CStr(salaryCvgAmt)), 11) & Space(41) & _
'                COB & isDisabled & cobInd & cobBeginDt & cobEndDt & cobEventCode & medicPartAInd & medicPartADt & medicPartBInd & medicPartBDt & _
'                medicHIB & VIP & Space(4) & DOMspace & HCID & Space(137) & lang & lang & Space(114) & email & Space(60)
'
    memRecord = empSSN & grpLeftFive & grpRightFive & s__(1) & relInd & recType & DOB & FN & MI & ln & gender & relCod & s__(45) & effDt & termDt & termCd & _
                DOH & s__(31) & s__(1) & memSSN & s__(10) & adrs & city & st & zip & s__(6) & adrs2 & phone & s__(4) & _
                country & s__(33) & IPA & s__(18) & existingPatient & s__(1) & depNo & empNo & s__(41) & _
                caseNo & s__(11) & Right(s__(11) & CStr(salary), 11) & Right(s__(5) & CStr(salaryMult), 5) & Right(s__(11) & CStr(salaryCvgAmt), 11) & s__(41) & _
                COB & isDisabled & cobInd & cobBeginDt & cobEndDt & cobEventCode & medicPartAInd & medicPartADt & medicPartBInd & medicPartBDt & _
                medicHIB & VIP & s__(4) & DOMspace & HCID & s__(137) & lang & lang & s__(114) & email & s__(60)
            
    file.WriteLine (memRecord)
    recCount = recCount + 1
End Sub

Sub DependentRecord(ByVal grpNo As String, ByVal i As Long, ByVal rel As Byte, ByRef file As Object, ByRef recCount As Long, ByVal lifeStr As String)
    Dim empSSN As String * 9: empSSN = s__(9)
    Dim grpLeftFive As String * 10: grpLeftFive = s__(10)
    Dim grpRightFive As String * 10: grpRightFive = s__(10)
    Dim relInd As String * 1: relInd = s__(1)
    Dim recType As Byte: recType = 5
    Dim DOB As String * 8: DOB = s__(8)
    Dim FN As String * 12: FN = s__(12)
    Dim MI As String * 1: MI = s__(1)
    Dim ln As String * 16: ln = s__(16)
    Dim gender As String * 1: gender = s__(1)
    Dim effDt As String * 8: effDt = s__(8)
    Dim spsCovAmt As String * 11
    Dim strSpsCov As String * 11: strSpsCov = s__(11)
    Dim chdCovAmt As String * 11
    Dim strChdCov As String * 11: strChdCov = s__(11)
    Dim memRecord As String * 1000: memRecord = s__(1000)
    
    empSSN = Format(shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000")
    grpLeftFive = Left(grpNo, 5)
    grpRightFive = Right(grpNo, 5 - (10 - Len(grpNo)))
    relInd = CStr(rel)
    DOB = Format(shSL.Cells(i, ColumnPerName("DOB")).Value, "YYYYMMDD")
    FN = shSL.Cells(i, ColumnPerName("FIRST NAME")).Value
    MI = shSL.Cells(i, ColumnPerName("MIDDLE INITIAL")).Value
    ln = shSL.Cells(i, ColumnPerName("LAST NAME")).Value
    gender = shSL.Cells(i, ColumnPerName("GENDER")).Value
    effDt = Format(shSL.Cells(i, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "YYYYMMDD")
    
    spsCovAmt = shSL.Cells(i, ColumnPerName(lifeStr & " SPOUSE VOLUME")).Value
    'strSpsCov = Right(s__(11) & CStr(spsCovAmt), 11) 'Right justified
    spsCovAmt = Format(spsCovAmt, "00000000000")
    chdCovAmt = shSL.Cells(i, ColumnPerName(lifeStr & " CHILD(REN) VOLUME")).Value
    chdCovAmt = Format(chdCovAmt, "00000000000")
    'strChdCov = Right(s__(11) & CStr(chdCovAmt), 11) 'Right justified
    
    
    
    memRecord = empSSN & grpLeftFive & grpRightFive & s__(1) & relInd & recType & DOB & FN & MI & ln & gender & effDt & s__(5) & spsCovAmt & chdCovAmt & s__(895)
   
    file.WriteLine (memRecord)
    recCount = recCount + 1
End Sub






Attribute VB_Name = "Clear"
'************************************************************************************
'* Clear procedures                                                                 *
'* Clears the Admin and Client page depending on the ran procedure                  *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Option Explicit
Sub ClearOfficeUseOnlyAll()
    Dim response As Variant
    response = MsgBox("You are about to clear the entire data on this page." & vbLf & "Do you want to continue?", vbYesNo, "Are you sure?")
    If response = vbYes Then
    Call ClearOfficeUseOnly
    Call ClearFreeFormOnOUO
    Else
    End If
End Sub
Sub ClearOfficeUseOnly()
    Dim i As Integer
    shOUO.Unprotect
    Dim myState As String: myState = shData.Range("G7").Value
        shData.Range("B2:B15").Value = False
        Select Case myState
            Case "CALIFORNIA"
                shData.Range("B2").Value = True
            Case "COLORADO"
                shData.Range("B3").Value = True
            Case "NEVADA"
                shData.Range("B4").Value = True
            Case "GEORGIA"
                shData.Range("B5").Value = True
            Case "NEW YORK"
                shData.Range("B6").Value = True
            Case "VIGINIA"
                shData.Range("B7").Value = True
            Case "CONNECTICUT"
                shData.Range("B8").Value = True
            Case "INDIANA"
                shData.Range("B9").Value = True
            Case "KENTUCKY"
                shData.Range("B10").Value = True
            Case "MISSOURI"
                shData.Range("B11").Value = True
            Case "OHIO"
                shData.Range("B12").Value = True
            Case "WISCONSIN"
                shData.Range("B13").Value = True
            Case "NEW HAMPSHIRE"
                shData.Range("B14").Value = True
            Case "MAINE"
                shData.Range("B15").Value = True
        End Select
        If shOUO.Shapes("ddState").ControlFormat.Value <> Empty Then shOUO.Shapes("ddState").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddState"), shData.Range("G5").Value)
        shData.Range("G7").ClearContents
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    With shOUO

'Clear data
        'Sold Options
        .Range("D6:D30").ClearContents
        .Range("F6:F30").ClearContents
        .Range("J6:J30").ClearContents
        .Range("L6:L30").ClearContents
        .Range("N6:N30").ClearContents
        .Range("Q6:Q30").ClearContents
        .Range("S6:S30").ClearContents
    
        'Volumes
        .Range("FVL").ClearContents
        .Range("FVA").ClearContents
        .Range("FVBDL").ClearContents
        .Range("FVBDA").ClearContents
        .Range("FVODL").ClearContents
        .Range("FVODA").ClearContents
        .Range("FVVDL").ClearContents
        .Range("FVVDA").ClearContents
        .Range("IVL").ClearContents
        .Range("IVA").ClearContents
        .Range("IVBDL").ClearContents
        .Range("IVBDA").ClearContents
        .Range("IVODL").ClearContents
        .Range("IVODA").ClearContents
        .Range("IVVDL").ClearContents
        .Range("IVVDA").ClearContents
        
        
        'Department Codes
        Dim lr As Long:
        lr = shOUO.Range("B" & Rows.Count).End(xlUp).row
        If lr < 18 Then lr = 18
        .Range("B18:B" & lr).ClearContents
        
        'Sub Groups
        .Range("H6:H45").ClearContents
        
'Clear shapes
        'Decare Platform
        .Shapes.Range(Array("shapeDecarePlatform")).Visible = msoFalse
        'network
        .Shapes.Range(Array("shapeGrpNetwork")).Visible = msoFalse
        Call ClearLifeShapesOnOUO
        
        'Level 3 flag
        shOUO.Shapes.Range(Array("cbLvl3")).Visible = msoFalse
        
        'Default values in shapes
        Call populateDDL
        
'Hiding columns
      
        .Columns("D:N").EntireColumn.Hidden = True
        .Columns("Q:Q").EntireColumn.Hidden = True
        .Columns("R:R").EntireColumn.Hidden = True
        .Columns("S:S").EntireColumn.Hidden = True
        .Range("FV_Section").EntireColumn.Hidden = True
        .Range("IV_Section").EntireColumn.Hidden = True
    End With

'Clear data in shapes
    With shData
        'Sold product types
        .Range("E2:E10").ClearContents
        Call ShapeMacros.EnableDisableProductsSold
        .Range("HG2:HG5").ClearContents
        'Prev State
        .Range("G7").ClearContents
        
'Clear data in Data sheet
        'Subscriber List groupings
        .Range("BE3:BE10").ClearContents
        
        'Selected plans
        .Range("AJ3:AK30").ClearContents 'Medical
        .Range("AM3:AN30").ClearContents 'Dental
        .Range("AP3:AQ30").ClearContents 'Vision
        .Range("NE3:NF30").ClearContents 'FSA
        .Range("AS3:AU30").ClearContents 'Disability
        .Range("AV3:AW30").ClearContents 'Life
        .Range("AY3:AZ30").ClearContents 'AD&D
        .Range("NN3:NO30").ClearContents 'Supplemental
        .Range("II2:IJ1000").ClearContents 'Combined for Term
        
        'Full list of suffixes
        .Range("DP3:DR" & Rows.Count).ClearContents 'Medical
        .Range("DS3:DU" & Rows.Count).ClearContents 'Dental
        .Range("DV3:DX" & Rows.Count).ClearContents 'Vision
        .Range("NH3:NJ" & Rows.Count).ClearContents 'FSA
        .Range("NQ3:NS" & Rows.Count).ClearContents 'Supplemental
        .Range("DY3:EA" & Rows.Count).ClearContents 'Disability
        .Range("EB3:ED" & Rows.Count).ClearContents 'Life
        .Range("EE3:EG" & Rows.Count).ClearContents 'AD&D
        
        'Full list of Names
        .Range("ME3:MI" & Rows.Count).ClearContents 'Disability
        .Range("MK3:MP" & Rows.Count).ClearContents 'Life
        .Range("MR3:MW" & Rows.Count).ClearContents 'AD&D
        
        'Suffixes per Specialty products
        .Range("EH3:EL" & Rows.Count).ClearContents 'Disability
        .Range("EN3:ES" & Rows.Count).ClearContents 'Life
        .Range("EU3:EZ" & Rows.Count).ClearContents 'AD&D
        
        'Match Suffix Driver
        .Range("BH2:BI8").ClearContents
        
        'Match Suffix Currently Running
        .Range("G76").ClearContents
        
        'DeCare Platform
        .Range("H73:J73").ClearContents
        
        'Dynamic Life list
        .Range("BK2:BL" & Rows.Count).ClearContents
        'Dynamic Disability list
        .Range("FM2:FN" & Rows.Count).ClearContents
        
        'Bundles
        .Range("BP2:BP7").ClearContents
        
        'LIFE / AD&D OPTIONS
        .Range("BV3:BV98").ClearContents
        
        'Multi Class - Flat Amount
        .Range("CE4:CP9").ClearContents
        
        'Multi Class - Salary Based
        .Range("CS4:DD9").ClearContents
        
        'Validation complete
        .Range("G80").ClearContents
        .Range("H80").ClearContents
        
        'Last Selected Life
        .Range("G84").ClearContents
        
        'Validation form position
        .Range("FC3:FE4").ClearContents
        
        'Bundle List
        .Range("FH3:FK" & Rows.Count).ClearContents
        
        'Terms
        .Range("FP3:FR" & Rows.Count).ClearContents
        
        'Flat incremental volumes
        .Range("GE2:GE3").ClearContents
        .Range("GG4:HD" & Rows.Count).ClearContents
        
        'SG Medical List
        .Range("HI3:HI500").ClearContents
        '.Range("HO3:HO500").ClearContents
        '.Range("HU3:HU500").ClearContents
        
        'Import
        .Range("IP2:IP5").ClearContents
        
        'Mapping
        .Range("IR3:IT" & Rows.Count).ClearContents
        
        'External Suffix Counter
        .Range("esc").Value = 0
        
        'Complicated Life Flag
        .Range("level3").Value = ""
        
    End With

'Clear Suffix tab
    With shSfx
        Dim lrSuffix As Long: lrSuffix = .Range("A" & Rows.Count).End(xlUp).row
        
        If lrSuffix > 1 Then
            .Range("A2:D" & lrSuffix).ClearContents
        End If
        .Range("F1").ClearContents
    End With
    shOUO.Activate
    shOUO.Range("A1").Select
    shOUO.Range("C2").Font.ThemeColor = xlThemeColorDark1
    shOUO.Range("C2").Font.TintAndShade = -0.249977111117893
    Application.EnableEvents = True
    shOUO.Protect
    ClearDecare
End Sub

Sub ClearSubscriberList()
    shSL.Unprotect
    shSL.Range("A7:JU" & Rows.Count).ClearContents
    shSL.Protect AllowFormattingColumns:=True
    ValidateSubscriberList
End Sub

Sub ClearTermination()
    shTerm.Unprotect
    shTerm.Range("A7:AA" & Rows.Count).ClearContents
    shTerm.Protect AllowFormattingColumns:=True
End Sub

Sub ClearDecare()
    shDE.Range("A11:T" & Rows.Count).Clear
End Sub

Sub ClearFreeFormOnOUO()
    Application.EnableEvents = False
    With shOUO
        .Unprotect
        If shData.Range("grp").Value = "Small" Then
            .Range("B3:B6").ClearContents
            .Range("B10:B11").ClearContents
            .Range("B14").ClearContents
        Else
            .Range("B3:B15").ClearContents
        End If
        .Protect
    End With
    Application.EnableEvents = True
End Sub

Sub ClearLifeShapesOnOUO()
    Dim i As Long
    With shOUO
        'Life products
        .Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
        .Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        .Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        .Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        .Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
        'Life product checkboxes
        .CheckBoxes("cbFlat").Value = xlOff
        .CheckBoxes("cbClass").Value = xlOff
        .CheckBoxes("cbSalary").Value = xlOff
        .CheckBoxes("cbFlatSCFA").Value = xlOff
        .CheckBoxes("cbFlatFI").Value = xlOff
        .CheckBoxes("cbClassMCFA").Value = xlOff
        .CheckBoxes("cbClassMCSB").Value = xlOff
        .CheckBoxes("cbSalarySB").Value = xlOff
        .CheckBoxes("cbSalarySI").Value = xlOff
        .CheckBoxes("cbDepSubFA").Value = xlOff
        .CheckBoxes("cbDepSubFI").Value = xlOff
        .CheckBoxes("cbDepSubSB").Value = xlOff
        .CheckBoxes("cbDepSpsFA").Value = xlOff
        .CheckBoxes("cbDepSpsFI").Value = xlOff
        .CheckBoxes("cbDepChdFA").Value = xlOff
        .CheckBoxes("cbDepChdFI").Value = xlOff
        
        'Flat Amount Form
        For i = 1 To 6
            .Shapes.Range(Array("tbClassDesc0" & i)).Visible = msoFalse
            .Shapes.Range(Array("tbAmount0" & i)).Visible = msoFalse
        Next i
        .Shapes.Range(Array("frameFAform")).Visible = msoFalse
        .Shapes.Range(Array("lblDescTitle")).Visible = msoFalse
        .Shapes.Range(Array("lblAmountTitle")).Visible = msoFalse
        .Shapes.Range(Array("btnSaveFlatAmount")).Visible = msoFalse
        
        'Salary Based Form
        For i = 1 To 6
            .Shapes.Range(Array("tbMult0" & i)).Visible = msoFalse
            .Shapes.Range(Array("tbClassName0" & i)).Visible = msoFalse
        Next i
        .Shapes.Range(Array("frameSBform")).Visible = msoFalse
        .Shapes.Range(Array("lblMultiplier")).Visible = msoFalse
        .Shapes.Range(Array("lblClassName")).Visible = msoFalse
        .Shapes.Range(Array("btnSaveSalaryBased")).Visible = msoFalse
    End With
End Sub
Sub Data_ClearAll()
    Application.EnableEvents = False
    shData.Range("G2:H2").ClearContents
    shData.Range("G80:I80").ClearContents
    shData.Range("B2:B15").Value = False
    'shData.Range("G76").Value = False
    shOUO.Unprotect
    If shOUO.Shapes("ddState").ControlFormat.Value <> Empty Then shOUO.Shapes("ddState").ControlFormat.Value = Empty
    Call ClearOfficeUseOnlyAll
    shData.Visible = xlSheetVeryHidden
    ClearSubscriberList
    ClearDecare
    ClearTermination
    Application.EnableEvents = True
End Sub
Sub ClearSL()
    shSL.Unprotect
    shSL.Range("A7:ZZ" & Rows.Count).ClearContents
    shSL.Protect
End Sub

Sub ClearAsFirstTime()
    shData.Range("G2:H2").ClearContents
End Sub
Attribute VB_Name = "DCN"
'************************************************************************************
'* DCN procedures                                                                   *
'* Updates the DCN code. This is setup for the Memb05 profile                       *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Sub UpdateDCN()

    Dim objAccess As Object
    Dim objExcel As Object
    Dim System As Object
     
    Dim Sess0 As Object
    Set Sess0 = GetObject("C:\Users\ad37580\Desktop\ISM.edp")
         
    With Sess0.Screen
        Sud
        vDCN = InputBox("Please enter DCN:", "DCN Number")
        If Trim(vDCN) = "" Then
            MsgBox "No value entered." & vbLf & "Macro Stopped.", vbExclamation
        End If
        lr = Range("B" & Rows.Count).End(xlUp).row
        
        If Trim(.getstring(2, 30, 14)) <> "MEMB05 PROFILE" Then
            MsgBox "You are not on the Main Menu of WGS." & vbLf & "Macro Stopped.", vbExclamation
            Exit Sub
        End If
        
        .putstring "C1", 5, 22
        .SendKeys ("<Enter>")
        Sud
        
        For i = 7 To lr
            .putstring "         ", 3, 47
            .putstring Format(Range("B" & i).Value, "000000000"), 3, 47
            .putstring "CH", 5, 22
            .SendKeys ("<Enter>")
            Sud
            
            If .getstring(2, 21, 29) = "SUBSCRIBER/DEPENDENT - CHANGE" Then
                If .getstring(23, 2, 21) = "*** ACCESS DENIED ***" Or _
                    .getstring(23, 2, 26) = "ID IS NOT FOUND IN KEYS DB" Then
                        'Do nothing - skip this SSN
                Else
                    rowCounter = 9
                    grpNo = ReturnGroupNumber(i)
                    If grpNo <> "" Then
                        Do While Trim(.getstring(rowCounter, 1, 2)) <> ""
                            If Trim(.getstring(rowCounter, 15, 10)) = Trim(grpNo) And _
                                Trim(.getstring(rowCounter, 67, 8)) = "" Then
                                .putstring .getstring(rowCounter, 1, 2), 6, 17
                                .SendKeys ("<Enter>")
                                Sud
                                
                                If .getstring(23, 2, 25) = "ID IN USE BY SOMEONE ELSE" Then
                                    .SendKeys ("<PF3>")
                                    Sud
                                    Exit Do
                                End If
                                
                                If .getstring(2, 21, 23) = "MEMBER PROFILE - CHANGE" Then
                                    .SendKeys ("<PF9>")
                                    Sud
                                    
                                    If .getstring(2, 22, 28) = "SUBSCRIBER ELIGIBILITY - CHG" Then
                                        .putstring "                ", 6, 26
                                        .putstring vDCN, , 6, 26
                                        .putstring " ", 6, 51
                                        .putstring "E", 6, 51
                                        
                                        prodCounter = 13
                                        updatable = False
                                        Do While Trim(.getstring(prodCounter, 3, 63)) <> ""
                                            If .getstring(prodCounter, 3, 1) = "_" Then
                                                .putstring "S", prodCounter, 3
                                                updatable = True
                                            End If
                                            prodCoutner = prodCounter + 1
                                            If prodCounter = 23 Then
                                                prodCounter = 13
                                                .SendKeys ("<PF8>")
                                                Sud
                                            End If
                                        Loop
                                        If updatable Then
                                            .SendKeys ("<PF10>")
                                            Sud
                                            .SendKeys ("<PF10>")
                                            Sud
                                        End If
                                        updatable = False
                                    End If
                                    Exit Do 'if record found no need to continue
                                End If
                            End If
                            rowCounter = rowCounter + 1
                            If rowCounter = 23 Then
                                rowCounter = 9
                                .SendKeys ("<PF8>")
                                Sud
                            End If
                        Loop
                    End If
                End If
            ElseIf .getstring(2, 21, 23) = "MEMBER PROFILE - CHANGE" Then
                .SendKeys ("<PF9>")
                Sud
                
                If .getstring(2, 22, 28) = "SUBSCRIBER ELIGIBILITY - CHG" Then
                    .putstring "                ", 6, 26
                    .putstring vDCN, , 6, 26
                    .putstring " ", 6, 51
                    .putstring "E", 6, 51
                    
                    prodCounter = 13
                    updatable = False
                    Do While Trim(.getstring(prodCounter, 3, 63)) <> ""
                        If .getstring(prodCounter, 3, 1) = "_" Then
                            .putstring "S", prodCounter, 3
                            updatable = True
                        End If
                        prodCoutner = prodCounter + 1
                        If prodCounter = 23 Then
                            prodCounter = 13
                            .SendKeys ("<PF8>")
                            Sud
                        End If
                    Loop
                    If updatable Then
                        .SendKeys ("<PF10>")
                        Sud
                        .SendKeys ("<PF10>")
                        Sud
                    End If
                    updatable = False
                End If
            End If
        Next i
    End With
End Sub



Function ReturnGroupNumber(ByVal i As Long) As String
    Dim grpSfx As String: grpSfx = ""
    If shSL.Cells(i, ColumnPerName("MEDICAL PRODUCT")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("MEDICAL PRODUCT")).Value
    ElseIf shSL.Cells(i, ColumnPerName("DENTAL PRODUCT")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("DENTAL PRODUCT")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VISION PRODUCT")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VISION PRODUCT")).Value
    ElseIf shSL.Cells(i, ColumnPerName("STD")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("STD")).Value
    ElseIf shSL.Cells(i, ColumnPerName("LTD")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("LTD")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY STD")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY STD")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY LTD")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY LTD")).Value
    ElseIf shSL.Cells(i, ColumnPerName("BUY-UP LTD")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("BUY-UP LTD")).Value
    ElseIf shSL.Cells(i, ColumnPerName("BASIC LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("BASIC LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("OPTIONAL LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("OPTIONAL LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value
    ElseIf shSL.Cells(i, ColumnPerName("BASIC AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("BASIC AD&D")).Value
    ElseIf shSL.Cells(i, ColumnPerName("OPTIONAL AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("OPTIONAL AD&D")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY AD&D")).Value
    ElseIf shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value
    ElseIf shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value
    ElseIf shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value <> "" Then
        grpSfx = shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value
    End If
    
    ReturnGroupNumber = grpSfx
End Function


Attribute VB_Name = "DataValidationDropDown"
'************************************************************************************
'* Data Validation procedures                                                       *
'* Creates the dropdown lists on the Client page per field                          *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Sub DataValidationDriver()
Dim PlanLn1, PlanLn2, PlanLn3, PlanLn4, PlanLn5, PlanLn6 As Variant
    shSL.Unprotect
    shTerm.Unprotect
    'Demographic
    'Gender
    Call DataValidation("GENDER", "M, F")
    Call DataValidation4Term("GENDER", "M, F")
    'Relationship Code
    If shData.Range("state").Value = "CALIFORNIA" Then
        Call DataValidation("RELATIONSHIP CODE", "Subscriber, Spouse, Child, Handicapped, Student, Domestic Partner")
        Call DataValidation4Term("RELATIONSHIP CODE", "Subscriber, Spouse, Child, Handicapped, Student, Domestic Partner")
    Else
        Call DataValidation("RELATIONSHIP CODE", "Subscriber, Spouse, Child, Handicapped, Domestic Partner")
        Call DataValidation4Term("RELATIONSHIP CODE", "Subscriber, Spouse, Child, Handicapped, Domestic Partner")
    End If
    'Group Type
    Call DataValidation("GROUP TYPE", "Active, Cobra, Retiree")
     
    'State
    Call DataValidation("STATE", "=Data!$G$10:$G$60")
    Call DataValidation4Term("STATE", "=Data!$G$10:$G$60")
    'Language
    Call DataValidation("LANGUAGE", "English, Spanish, Chinese, Korean, Vietnamese, Tagalog, Other")
    Call DataValidation4Term("LANGUAGE", "English, Spanish, Chinese, Korean, Vietnamese, Tagalog, Other")
    'COB
    Call DataValidation("COB", "Y, N")
    'Department Number
    lr = shOUO.Range("B" & Rows.Count).End(xlUp).row
    If lr < 18 Then lr = 18
    Call DataValidation("DEPARTMENT NUMBER", "='Office Use Only'!$B$18:$B$" & lr)
    
    'Medical
    'Medical Product
    lr = shData.Range("DP" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("MEDICAL PRODUCT", "='Data'!$DP$3:$DP$" & lr)
    'Current PCP
    Call DataValidation("CURRENT PCP", "Y, N")
    Call DataValidation4Term("CURRENT PCP", "Y, N")
    
    'Dental
    'Dental Product
    lr = shData.Range("DS" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("DENTAL PRODUCT", "='Data'!$DS$3:$DS$" & lr)
    'Prime/Complete Sub Groups
    lr = shOUO.Range("H" & Rows.Count).End(xlUp).row
    If lr < 6 Then lr = 6
    Call DataValidation("SUB GROUP (PRIME/COMPLETE)", "='Office Use Only'!$H$6:$H$" & lr)
    
    'Vision
    'Vision Product
    lr = shData.Range("DV" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VISION PRODUCT", "='Data'!$DV$3:$DV$" & lr)
    
    'FSA
    'FSA Products
    lr = shData.Range("NH" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
        'FSA 1
      startln = 0
      For x = 3 To lr
        PlanLn1 = UCase(shData.Range("NH" & x & ":NH" & x))
        If InStr(1, PlanLn1, "FULL HEALTHCARE FSA") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("FULL HEALTHCARE", "='Data'!$NH$" & startln & ":$NH$" & Endln)
      
        'FSA 2
        startln = 0
      For x = 3 To lr
        PlanLn1 = UCase(shData.Range("NH" & x & ":NH" & x))
        If InStr(1, PlanLn1, "LIMITED PURPOSE FSA") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("LIMITED PURPOSE", "='Data'!$NH$" & startln & ":$NH$" & Endln)
        
        'FSA 3
        startln = 0
      For x = 3 To lr
        PlanLn1 = UCase(shData.Range("NH" & x & ":NH" & x))
        If InStr(1, PlanLn1, "DEPENDENT CARE FSA") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("DEPENDENT CARE", "='Data'!$NH$" & startln & ":$NH$" & Endln)
       
        'FSA 4
        startln = 0
      For x = 3 To lr
        PlanLn1 = UCase(shData.Range("NH" & x & ":NH" & x))
        If InStr(1, PlanLn1, "COMMUTER TRANSIT") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("COMMUTER TRANSIT", "='Data'!$NH$" & startln & ":$NH$" & Endln)
        
        'FSA 5
        startln = 0
      For x = 3 To lr
        PlanLn1 = UCase(shData.Range("NH" & x & ":NH" & x))
        If InStr(1, PlanLn1, "COMMUTER PARKING") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("COMMUTER PARKING", "='Data'!$NH$" & startln & ":$NH$" & Endln)
        
    'Supplemental
    'Supplemental Products
    lr = shData.Range("NQ" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
        'Supplemental 1 "Critical Illness Voluntary"
        startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Critical Illness Voluntary") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Critical Illness Voluntary", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
        
        'Supplemental 2 "Critical Illness Employer paid"
      startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Critical Illness Employer paid") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Critical Illness Employer paid", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
        'Supplemental 3 "Accident Voluntary"
      startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Accident Voluntary") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Accident Voluntary", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
        'Supplemental 4 "Accident Employer paid"
     startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Accident Employer paid") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Accident Employer paid", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
        'Supplemental 5 "Hospital Indemnity Voluntary"
      startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Hospital Indemnity Voluntary") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Hospital Indemnity Voluntary", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
        'Supplemental 6 "Hospital Indemnity Employer paid"
      startln = 0
      For x = 3 To lr
        PlanLn1 = shData.Range("NQ" & x & ":NQ" & x)
        If InStr(1, PlanLn1, "Hospital Indemnity Employer paid") > 0 Then
            If startln = 0 Then startln = x
            Endln = x
        End If
      Next
      If startln > 0 Then Call DataValidation("Hospital Indemnity Employer paid", "='Data'!$NQ$" & startln & ":$NQ$" & Endln)
    'Disability
    'STD
    lr = shData.Range("ME" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("STD", "='Data'!$ME$3:$ME$" & lr)
    'LTD
    lr = shData.Range("EI" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("LTD", "='Data'!$MF$3:$MF$" & lr)
    'VSTD
    lr = shData.Range("MG" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY STD", "='Data'!$MG$3:$MG$" & lr)
    'VLTD
    lr = shData.Range("MH" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY LTD", "='Data'!$MH$3:$MH$" & lr)
    'BULTD
    lr = shData.Range("MI" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("BUY-UP LTD", "='Data'!$MI$3:$MI$" & lr)
    
    'Life
    'Basic Life
    lr = shData.Range("MK" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("BASIC LIFE", "='Data'!$MK$3:$MK$" & lr)
    'Optional Life
    lr = shData.Range("ML" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("OPTIONAL LIFE", "='Data'!$ML$3:$ML$" & lr)
    'Voluntary Life
    lr = shData.Range("MM" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY LIFE", "='Data'!$MM$3:$MM$" & lr)
    'Basic Dep Life
    lr = shData.Range("MN" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("BASIC DEP LIFE", "='Data'!$MN$3:$MN$" & lr)
    'Optional Dep Life
    lr = shData.Range("MO" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("OPTIONAL DEP LIFE", "='Data'!$MO$3:$MO$" & lr)
    'Voluntary Dep Life
    lr = shData.Range("MP" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY DEP LIFE", "='Data'!$MP$3:$MP$" & lr)
    
    'AD&D
    'Basic AD&D
    lr = shData.Range("MR" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("BASIC AD&D", "='Data'!$MR$3:$MR$" & lr)
    'Optional AD&D
    lr = shData.Range("MS" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("OPTIONAL AD&D", "='Data'!$MS$3:$MS$" & lr)
    'Voluntary AD&D
    lr = shData.Range("MT" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY AD&D", "='Data'!$MT$3:$MT$" & lr)
    'Basic Dep AD&D
    lr = shData.Range("MU" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("BASIC DEP AD&D", "='Data'!$MU$3:$MU$" & lr)
    'Optional Dep AD&D
    lr = shData.Range("MV" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("OPTIONAL DEP AD&D", "='Data'!$MV$3:$MV$" & lr)
    'Voluntary Dep AD&D
    lr = shData.Range("MW" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call DataValidation("VOLUNTARY DEP AD&D", "='Data'!$MW$3:$MW$" & lr)
    
    'Cobra
    'Qualifying Event
    lr = shData.Range("DH" & Rows.Count).End(xlUp).row
    If lr < 2 Then lr = 2
    Call DataValidation("COBRA QUALIFYING EVENT", "='Data'!$DH$2:$DH$" & lr)
    
'    'Medicare
'    'Qualifying Event
'    lr = shData.Range("FD" & Rows.Count).End(xlUp).Row
'    If lr < 2 Then lr = 2
'    Call DataValidation("MEDICARE QUALIFYING EVENT REASON", "='Data'!$FD$2:$FD$" & lr)
    
    If shData.Range("level3").Value = "" Then shData.Range("level3").Value = False
    If shData.Range("level3").Value <> True Then
        'Life Volumes
        lr = shData.Range("CE" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("BASIC VOLUME", "='Data'!$CE$4:$CE$" & lr)
        ElseIf shData.Range("GG4").Value <> "" Then
            dataLR = shData.Range("GG" & Rows.Count).End(xlUp).row
            Call DataValidation("BASIC VOLUME", "='Data'!$GG$4:$GG$" & dataLR)
        End If
        lr = shData.Range("CG" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D BASIC VOLUME", "='Data'!$CG$4:$CG$" & lr)
        ElseIf shData.Range("GJ4").Value <> "" Then
            dataLR = shData.Range("GJ" & Rows.Count).End(xlUp).row
            Call DataValidation("AD&D BASIC VOLUME", "='Data'!$GJ$4:$GJ$" & dataLR)
        End If
        lr = shData.Range("CI" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("OPTIONAL VOLUME", "='Data'!$CI$4:$CI$" & lr)
        ElseIf shData.Range("GH4").Value <> "" Then
            dataLR = shData.Range("GH" & Rows.Count).End(xlUp).row
            Call DataValidation("OPTIONAL VOLUME", "='Data'!$GH$4:$GH$" & dataLR)
        End If
        lr = shData.Range("CK" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D OPTIONAL VOLUME", "='Data'!$CK$4:$CK$" & lr)
        ElseIf shData.Range("GK4").Value <> "" Then
            dataLR = shData.Range("GK" & Rows.Count).End(xlUp).row
            Call DataValidation("AD&D OPTIONAL VOLUME", "='Data'!$GK$4:$GK$" & dataLR)
        End If
        lr = shData.Range("CM" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("VOLUNTARY VOLUME", "='Data'!$CM$4:$CM$" & lr)
        ElseIf shData.Range("GI4").Value <> "" Then
            dataLR = shData.Range("GI" & Rows.Count).End(xlUp).row
            Call DataValidation("VOLUNTARY VOLUME", "='Data'!$GI$4:$GI$" & dataLR)
        End If
        lr = shData.Range("CO" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D VOLUNTARY VOLUME", "='Data'!$CO$4:$CO$" & lr)
        ElseIf shData.Range("GL4").Value <> "" Then
            dataLR = shData.Range("GL" & Rows.Count).End(xlUp).row
            Call DataValidation("AD&D VOLUNTARY VOLUME", "='Data'!$GL$4:$GL$" & dataLR)
        End If
        
        Call DepDataValidation("GM", "BASIC SUB VOLUME")
        Call DepDataValidation("GN", "BASIC SPOUSE VOLUME")
        Call DepDataValidation("GO", "BASIC CHILD(REN) VOLUME")
        Call DepDataValidation("GP", "OPTIONAL SUB VOLUME")
        Call DepDataValidation("GQ", "OPTIONAL SPOUSE VOLUME")
        Call DepDataValidation("GR", "OPTIONAL CHILD(REN) VOLUME")
        Call DepDataValidation("GS", "VOLUNTARY SUB VOLUME")
        Call DepDataValidation("GT", "VOLUNTARY SPOUSE VOLUME")
        Call DepDataValidation("GU", "VOLUNTARY CHILD(REN) VOLUME")
        Call DepDataValidation("GV", "AD&D BASIC SUB VOLUME")
        Call DepDataValidation("GW", "AD&D BASIC SPOUSE VOLUME")
        Call DepDataValidation("GX", "AD&D BASIC CHILD(REN) VOLUME")
        Call DepDataValidation("GY", "AD&D OPTIONAL SUB VOLUME")
        Call DepDataValidation("GZ", "AD&D OPTIONAL SPOUSE VOLUME")
        Call DepDataValidation("HA", "AD&D OPTIONAL CHILD(REN) VOLUME")
        Call DepDataValidation("HB", "AD&D VOLUNTARY SUB VOLUME")
        Call DepDataValidation("HC", "AD&D VOLUNTARY SPOUSE VOLUME")
        Call DepDataValidation("HD", "AD&D VOLUNTARY CHILD(REN) VOLUME")
        
        
        'Life Multipliers
        lr = shData.Range("CT" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("BASIC MULTIPLIER", "='Data'!$CT$4:$CT$" & lr)
        End If
        lr = shData.Range("CV" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D BASIC MULTIPLIER", "='Data'!$CV$4:$CV$" & lr)
        End If
        lr = shData.Range("CX" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("OPTIONAL MULTIPLIER", "='Data'!$CX$4:$CX$" & lr)
        End If
        lr = shData.Range("CZ" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D OPTIONAL MULTIPLIER", "='Data'!$CZ$4:$CZ$" & lr)
        End If
        lr = shData.Range("DB" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("VOLUNTARY MULTIPLIER", "='Data'!$DB$4:$DB$" & lr)
        End If
        lr = shData.Range("DD" & Rows.Count).End(xlUp).row
        If lr > 3 Then
            Call DataValidation("AD&D VOLUNTARY MULTIPLIER", "='Data'!$DD$4:$DD$" & lr)
        End If
    Else
        Call DeleteDataValidation("BASIC VOLUME")
        Call DeleteDataValidation("AD&D BASIC VOLUME")
        Call DeleteDataValidation("OPTIONAL VOLUME")
        Call DeleteDataValidation("AD&D OPTIONAL VOLUME")
        Call DeleteDataValidation("VOLUNTARY VOLUME")
        Call DeleteDataValidation("AD&D VOLUNTARY VOLUME")
        Call DeleteDataValidation("BASIC MULTIPLIER")
        Call DeleteDataValidation("AD&D BASIC MULTIPLIER")
        Call DeleteDataValidation("OPTIONAL MULTIPLIER")
        Call DeleteDataValidation("AD&D OPTIONAL MULTIPLIER")
        Call DeleteDataValidation("VOLUNTARY MULTIPLIER")
        Call DeleteDataValidation("AD&D VOLUNTARY MULTIPLIER")
        Call DeleteDataValidation("BASIC SUB VOLUME")
        Call DeleteDataValidation("BASIC SPOUSE VOLUME")
        Call DeleteDataValidation("BASIC CHILD(REN) VOLUME")
        Call DeleteDataValidation("OPTIONAL SUB VOLUME")
        Call DeleteDataValidation("OPTIONAL SPOUSE VOLUME")
        Call DeleteDataValidation("OPTIONAL CHILD(REN) VOLUME")
        Call DeleteDataValidation("VOLUNTARY SUB VOLUME")
        Call DeleteDataValidation("VOLUNTARY SPOUSE VOLUME")
        Call DeleteDataValidation("VOLUNTARY CHILD(REN) VOLUME")
        Call DeleteDataValidation("AD&D BASIC SUB VOLUME")
        Call DeleteDataValidation("AD&D BASIC SPOUSE VOLUME")
        Call DeleteDataValidation("AD&D BASIC CHILD(REN) VOLUME")
        Call DeleteDataValidation("AD&D OPTIONAL SUB VOLUME")
        Call DeleteDataValidation("AD&D OPTIONAL SPOUSE VOLUME")
        Call DeleteDataValidation("AD&D OPTIONAL CHILD(REN) VOLUME")
        Call DeleteDataValidation("AD&D VOLUNTARY SUB VOLUME")
        Call DeleteDataValidation("AD&D VOLUNTARY SPOUSE VOLUME")
        Call DeleteDataValidation("AD&D VOLUNTARY CHILD(REN) VOLUME")
    End If
    
    'Group Number
    lr = shData.Range("II" & Rows.Count).End(xlUp).row
    If lr > 1 Then Call DataValidation4Term("GROUP NUMBER", "=Data!$II$2:$II$" & lr)
    
    shSL.Protect AllowFormattingColumns:=True
    shTerm.Protect AllowFormattingColumns:=True
End Sub

Sub DataValidation(ByVal Fieldname As String, ByVal strFormula As String)
    col = ColumnPerName(Fieldname)
    'On Error Resume Next
    With shSL.Range(shSL.Cells(7, col), shSL.Cells(Rows.Count, col)).vALIDATION
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=strFormula
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Sub DeleteDataValidation(ByVal Fieldname As String)
    col = ColumnPerName(Fieldname)
    On Error Resume Next
    With shSL.Range(shSL.Cells(7, col), shSL.Cells(Rows.Count, col)).vALIDATION
        .Delete
    End With
End Sub

Sub DataValidation4Term(ByVal Fieldname As String, ByVal strFormula As String)
    col = ColumnPerName4Term(Fieldname)
    On Error Resume Next
    With shTerm.Range(shTerm.Cells(7, col), shTerm.Cells(Rows.Count, col)).vALIDATION
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=strFormula
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Sub DepDataValidation(ByVal col As String, ByVal field As String)
    If shData.Range(col & "4").Value <> "" Then
        dataLR = shData.Range(col & Rows.Count).End(xlUp).row
        Call DataValidation(field, "='Data'!$" & col & "$4:$" & col & "$" & dataLR)
    End If
End Sub
Attribute VB_Name = "DeCareExport"
Option Explicit
Private Const startrow As Long = 7
Private Const DecareRow As Long = 11

Sub ExportDecareData()
    Dim lr As Long, lrDE As Long
    Dim colFTS As Long
    Dim colSubGrp As Long
    Dim colCovType As Long
    Dim counter As Long
    Application.ScreenUpdating = False
    shDE.Visible = xlSheetVisible
    shDE.Range("A" & DecareRow & ":T" & Rows.Count).Clear
    shDE.Range("A" & DecareRow & ":T" & Rows.Count).NumberFormat = "@"
    
    colFTS = ColumnPerName("FTS (PRIME/COMPLETE)")
    colSubGrp = ColumnPerName("SUB GROUP (PRIME/COMPLETE)")
    colCovType = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")

    lr = shSL.Cells(Rows.Count, colFTS).End(xlUp).row
    If lr <= shSL.Cells(Rows.Count, colSubGrp).End(xlUp).row Then
        lr = shSL.Cells(Rows.Count, colSubGrp).End(xlUp).row
    End If
    If lr <= shSL.Cells(Rows.Count, colCovType).End(xlUp).row Then
        lr = shSL.Cells(Rows.Count, colCovType).End(xlUp).row
    End If
    
    For counter = startrow To lr
        If Trim(shSL.Cells(counter, colFTS).Value) <> "" Or _
        Trim(shSL.Cells(counter, colSubGrp).Value) <> "" Or _
        Trim(shSL.Cells(counter, colCovType).Value) <> "" Then
            lrDE = shDE.Range("A" & Rows.Count).End(xlUp).row + 1
            Select Case shSL.Cells(counter, ColumnPerName("RELATIONSHIP CODE")).Value
                Case "SUB"
                    shDE.Range("A" & lrDE).Value = "ADD"
                    shDE.Range("I" & lrDE).Value = 1
                Case "SPS"
                    shDE.Range("A" & lrDE).Value = "ADEP"
                    shDE.Range("I" & lrDE).Value = 2
                Case "CHD"
                    shDE.Range("A" & lrDE).Value = "ADEP"
                    Select Case shSL.Cells(counter, ColumnPerName("GENDER")).Value
                        Case "F"
                            shDE.Range("I" & lrDE).Value = 3
                        Case "M"
                            shDE.Range("I" & lrDE).Value = 4
                    End Select
                Case Else
            End Select
            
            shDE.Range("B" & lrDE).Value = shSL.Cells(counter, ColumnPerName("EMPLOYEES SOCIAL")).Value
            shDE.Range("C" & lrDE).Value = shSL.Cells(counter, ColumnPerName("FIRST NAME")).Value
            shDE.Range("D" & lrDE).Value = shSL.Cells(counter, ColumnPerName("MIDDLE INITIAL")).Value
            shDE.Range("E" & lrDE).Value = shSL.Cells(counter, ColumnPerName("LAST NAME")).Value
            shDE.Range("G" & lrDE).Value = shSL.Cells(counter, ColumnPerName("DOB")).Value
            shDE.Range("H" & lrDE).Value = shSL.Cells(counter, ColumnPerName("GENDER")).Value
            shDE.Range("J" & lrDE).Value = shSL.Cells(counter, ColumnPerName("ADDRESS")).Value
            If Trim(shSL.Cells(counter, ColumnPerName("SECOND ADDRESS FIELD")).Value) <> "" Then
                shDE.Range("J" & lrDE).Value = shDE.Range("J" & lrDE).Value & " " & shSL.Cells(counter, ColumnPerName("SECOND ADDRESS FIELD")).Value
            End If
            shDE.Range("K" & lrDE).Value = shSL.Cells(counter, ColumnPerName("CITY")).Value
            shDE.Range("L" & lrDE).Value = shSL.Cells(counter, ColumnPerName("STATE")).Value
            shDE.Range("M" & lrDE).Value = shSL.Cells(counter, ColumnPerName("ZIP CODE")).Value
            shDE.Range("N" & lrDE).Value = shSL.Cells(counter, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value
            shDE.Range("P" & lrDE).Value = shSL.Cells(counter, colCovType).Value
            shDE.Range("Q" & lrDE).Value = shSL.Cells(counter, ColumnPerName("DATE OF HIRE")).Value
            shDE.Range("R" & lrDE).Value = shSL.Cells(counter, colSubGrp).Value
            shDE.Range("S" & lrDE).Value = 2 'QE
            shDE.Range("T" & lrDE).Value = shSL.Cells(counter, colFTS).Value
        End If
    Next counter
        
    shDE.Range("A" & DecareRow & ":T" & Rows.Count).NumberFormat = "0"
    shDE.Activate
End Sub
Attribute VB_Name = "DeCarePlatform"
'************************************************************************************
'* DeCare Platform procedures                                                       *
'* Hides and clears OR Unhides DeCare Sub Groups based on the platform selection    *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Sub WGS_Sel_Click()
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    shData.Range("I73").Value = False
    shOUO.Range("H6:H45").ClearContents
    shOUO.Unprotect
    shOUO.Columns("H:I").EntireColumn.Hidden = True
    Application.EnableEvents = True
    shOUO.Protect
End Sub
Sub DeCare_Sel_Click()
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    shData.Range("H73").Value = False
    shOUO.Unprotect
    shOUO.Columns("H:I").EntireColumn.Hidden = False
    If shData.Range("I73").Value = False Then
        shOUO.Range("H6:H45").ClearContents
        shOUO.Unprotect
        shOUO.Columns("H:I").EntireColumn.Hidden = True
    End If
    Application.EnableEvents = True
    shOUO.Protect
End Sub

Attribute VB_Name = "External"
Option Explicit
Sub CopyProdToDataForExternal(ByVal oCol As String, ByVal dCol As String)
    Dim lr As Long: lr = shOUO.Range(oCol & Rows.Count).End(xlUp).row
    If lr <= 5 Then Exit Sub
    shOUO.Range(oCol & "6:" & oCol & lr).Copy
    shData.Range(dCol & 3).PasteSpecial xlPasteValues
End Sub

Sub CopyLifeToDataForExternal()
    Dim lr As Long: lr = shOUO.Range("N" & Rows.Count).End(xlUp).row
    Dim counterL As Long: counterL = 3
    Dim counterA As Long: counterA = 3
    Dim i As Long
    
    For i = 6 To lr
        If InStr(1, shOUO.Range("N" & i).Value, "Life") > 0 Then
            shData.Range("AV" & counterL).Value = shOUO.Range("N" & i).Value
            counterL = counterL + 1
        ElseIf InStr(1, shOUO.Range("N" & i).Value, "AD&D") > 0 Then
            shData.Range("AY" & counterL).Value = shOUO.Range("N" & i).Value
            counterA = counterA + 1
        End If
    Next i
End Sub

Sub PopulatePlaceHolderSuffix()
    Call PopulatePlaceHolderSuffixSubProcedure("AJ") 'Medical
    Call PopulatePlaceHolderSuffixSubProcedure("AM") 'Dental
    Call PopulatePlaceHolderSuffixSubProcedure("AP") 'Vision
    Call PopulatePlaceHolderSuffixSubProcedure("NE") 'FSA
    Call PopulatePlaceHolderSuffixSubProcedure("AS") 'Disability
    Call PopulatePlaceHolderSuffixSubProcedure("AV") 'Life
    Call PopulatePlaceHolderSuffixSubProcedure("AY") 'AD&D
    Call CreateExternalMapping
End Sub


Sub PopulatePlaceHolderSuffixSubProcedure(ByVal nameCol As String)
    Dim lr As Long, i As Long, counter As Long
    Application.EnableEvents = False
    counter = shData.Range("esc").Value
    lr = shData.Range(nameCol & Rows.Count).End(xlUp).row
    For i = 3 To lr
        counter = counter + 1
        If shData.Range(nameCol & i).Offset(0, 1).Value = "" Then
            shData.Range(nameCol & i).Offset(0, 1).Value = shOUO.Range("B6").Value & "XX" & Format(counter, "00")
        End If
    Next i
    shData.Range("esc").Value = counter
    Application.EnableEvents = True
End Sub

Sub CreateExternalMapping()
    Application.EnableEvents = False
    shData.Range("IR3:IT" & Rows.Count).ClearContents
    Dim counter As Long: counter = 3
    Call CreateExternalMappingSubProcedure("AJ", counter) 'Medical
    Call CreateExternalMappingSubProcedure("AM", counter) 'Dental
    Call CreateExternalMappingSubProcedure("AP", counter) 'Vision
    Call CreateExternalMappingSubProcedure("NE", counter) 'FSA
    Call CreateExternalMappingSubProcedure("AS", counter) 'Disability
    Call CreateExternalMappingSubProcedure("AV", counter) 'Life
    Call CreateExternalMappingSubProcedure("AY", counter) 'AD&D
    Application.EnableEvents = True
End Sub

Sub CreateExternalMappingSubProcedure(ByVal nameCol As String, ByRef counter As Long)
    Dim lr As Long, i As Long
    Application.EnableEvents = False
    lr = shData.Range(nameCol & Rows.Count).End(xlUp).row
    For i = 3 To lr
        If shData.Range(nameCol & i).Offset(0, 1).Value <> "" And shData.Range(nameCol & i).Offset(0, 1).Value <> "Multiple" Then
            shData.Range("IR" & counter).Value = shData.Range(nameCol & i).Value
            shData.Range("IS" & counter).Value = shData.Range(nameCol & i).Offset(0, 1).Value
            counter = counter + 1
        End If
    Next i
    Application.EnableEvents = True
End Sub

Sub CreateInternalMapping()
    Call CreateInternalMappingSubProcedure("AJ")
    Call CreateInternalMappingSubProcedure("AM")
    Call CreateInternalMappingSubProcedure("AP")
    Call CreateInternalMappingSubProcedure("AS")
    Call CreateInternalMappingSubProcedure("AV")
    Call CreateInternalMappingSubProcedure("AY")
    
    Dim i As Long, lr As Long
    lr = shData.Range("IR" & Rows.Count).End(xlUp).row
    For i = 3 To lr
        If shData.Range("IS" & i).Value <> "" And shData.Range("IT" & i).Value <> "" Then
            Call FindReplaceAllInSLandTerm(shData.Range("IS" & i).Value, shData.Range("IT" & i).Value)
        End If
    Next i
End Sub

Sub CreateInternalMappingSubProcedure(ByVal nameCol As String)
    Dim i As Long, j As Long, iLR As Long, jLR As Long
    jLR = shData.Range("IR" & Rows.Count).End(xlUp).row
    iLR = shData.Range(nameCol & Rows.Count).End(xlUp).row
    Application.EnableEvents = False
    For i = 3 To iLR
        For j = 3 To jLR
            If shData.Range(nameCol & i).Value = shData.Range("IR" & j).Value And shData.Range(nameCol & i).Offset(0, 1).Value <> shData.Range("IS" & j).Value Then
                shData.Range("IT" & j).Value = shData.Range(nameCol & i).Offset(0, 1).Value
            End If
        Next j
    Next i
    Application.EnableEvents = False
End Sub

Attribute VB_Name = "FetchForAdmin"
Option Explicit
Sub Fetch()
    Dim caseNo As String: caseNo = shOUO.Range("B6").Value
    If Trim(caseNo) = "" Then
        MsgBox "Please enter a Case Number first.", vbExclamation, "Missing Case Number"
        Exit Sub
    End If
    StartMainframe
    Login "W"
    PE "AA", 5, 22
    PE "CA", 5, 22
    PE caseNo, 3, 8
    Dim effDt As String: effDt = G(12, 16, 8)
    shOUO.Range("B4").Value = Left(effDt, 2) & "/" & Mid(effDt, 3, 2) & "/" & Right(effDt, 4)
    If shData.Range("Grp").Value <> "Small" Then
        shOUO.Range("B8").Value = G(10, 6, 22)
        shOUO.Range("B9").Value = G(10, 31, 48)
    End If
    Logout
End Sub
Attribute VB_Name = "HideFieldsOnSL"
'*************************************************************************************************
'* Hide Fields On Client Page procedures                                                         *
'* Hides and/or Unhides fields on Client page, based on the product selections on the admin page *
'* by Iggy Darsa                                                                                 *
'* 7/1/2015                                                                                      *
'*************************************************************************************************

Option Explicit
Sub unhidefields()
    Application.ScreenUpdating = False
    shSL.Unprotect
        
    Dim colDemoStart As Long: colDemoStart = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colDemoEnd As Long: colDemoEnd = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
    
    Dim colMedicalStart As Long: colMedicalStart = ColumnPerName("MEDICAL PRODUCT")
    Dim colMedicalEnd As Long: colMedicalEnd = ColumnPerName("CURRENT PCP")
    
    Dim colDentalStart As Long: colDentalStart = ColumnPerName("DENTAL PRODUCT")
    Dim colDentalEnd As Long: colDentalEnd = ColumnPerName("DENTAL OFFICE")
    
    Dim colVisionStart As Long: colVisionStart = ColumnPerName("VISION PRODUCT")
    Dim colVisionEnd As Long: colVisionEnd = ColumnPerName("VISION PRODUCT NAME")
    
    Dim colFSAStart As Long: colFSAStart = ColumnPerName("FULL HEALTHCARE")
    Dim colFSAEnd As Long: colFSAEnd = ColumnPerName("COMMUTER PARKING")
    
    Dim colSupplementalStart As Long: colSupplementalStart = ColumnPerName("Critical Illness Voluntary")
    Dim colSupplementalEnd As Long: colSupplementalEnd = ColumnPerName("Hospital Indemnity Employer paid")
    
    Dim colDisabilityStart As Long: colDisabilityStart = ColumnPerName("STD")
    Dim colDisabilityEnd As Long: colDisabilityEnd = ColumnPerName("BUY-UP LTD")
    
    Dim colSalaryStart As Long: colSalaryStart = ColumnPerName("SALARY")
    Dim colSalaryEnd As Long: colSalaryEnd = colSalaryStart
    
    Dim colLifeStart As Long: colLifeStart = ColumnPerName("BASIC LIFE")
    Dim colLifeEnd As Long: colLifeEnd = ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")
    
    Dim colADDStart As Long: colADDStart = ColumnPerName("BASIC AD&D")
    Dim colADDEnd As Long: colADDEnd = ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")
    
    Dim colCobraStart As Long: colCobraStart = ColumnPerName("COBRA START DATE")
    Dim colCobraEnd As Long: colCobraEnd = ColumnPerName("COBRA QUALIFYING EVENT")
    
    Dim colMedicareStart As Long: colMedicareStart = ColumnPerName("MEDICARE HIB ID")
    Dim colMedicareEnd As Long: colMedicareEnd = ColumnPerName("MEDICARE PART B EFF DATE")
    
    Dim colPrimeCompleteStart As Long: colPrimeCompleteStart = ColumnPerName("FTS (PRIME/COMPLETE)")
    Dim colPrimeCompleteEnd As Long: colPrimeCompleteEnd = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
    
    shSL.Range(shSL.Cells(1, colDemoStart), shSL.Cells(1, colDemoEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colMedicalStart), shSL.Cells(1, colMedicalEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colDentalStart), shSL.Cells(1, colDentalEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colVisionStart), shSL.Cells(1, colVisionEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colFSAStart), shSL.Cells(1, colFSAEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colSupplementalStart), shSL.Cells(1, colSupplementalEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colSalaryStart), shSL.Cells(1, colSalaryEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colDisabilityStart), shSL.Cells(1, colDisabilityEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colLifeStart), shSL.Cells(1, colLifeEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colADDStart), shSL.Cells(1, colADDEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colCobraStart), shSL.Cells(1, colCobraEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colMedicareStart), shSL.Cells(1, colMedicareEnd)).EntireColumn.Hidden = False
    shSL.Range(shSL.Cells(1, colPrimeCompleteStart), shSL.Cells(1, colPrimeCompleteEnd)).EntireColumn.Hidden = False
    shSL.Protect AllowFormattingColumns:=True
End Sub

Sub HideFields()
    Application.ScreenUpdating = False
    Call unhidefields
    shSL.Unprotect
    
    'Declare variables
    Dim i As Long
    Dim found As Boolean
        
    'Declare Medical
    Dim colMedicalStart As Long: colMedicalStart = ColumnPerName("MEDICAL PRODUCT")
    Dim colMedicalEnd As Long: colMedicalEnd = ColumnPerName("CURRENT PCP")
    'Declare Dental
    Dim colDentalStart As Long: colDentalStart = ColumnPerName("DENTAL PRODUCT")
    Dim colDentalEnd As Long: colDentalEnd = ColumnPerName("DENTAL OFFICE")
    'Declare Vision
    Dim colVisionStart As Long: colVisionStart = ColumnPerName("VISION PRODUCT")
    Dim colVisionEnd As Long: colVisionEnd = ColumnPerName("VISION PRODUCT NAME")
    'Declare FSA
    Dim colFSAStart As Long: colFSAStart = ColumnPerName("FULL HEALTHCARE")
    Dim colFSAEnd As Long: colFSAEnd = ColumnPerName("COMMUTER PARKING")
    Dim ColFSA1 As Long: ColFSA1 = ColumnPerName("FULL HEALTHCARE")
    Dim ColFSA2 As Long: ColFSA2 = ColumnPerName("LIMITED PURPOSE")
    Dim ColFSA3 As Long: ColFSA3 = ColumnPerName("DEPENDENT CARE")
    Dim ColFSA4 As Long: ColFSA4 = ColumnPerName("COMMUTER TRANSIT")
    Dim ColFSA5 As Long: ColFSA5 = ColumnPerName("COMMUTER PARKING")
    'Declare Supplemental
    Dim colSupplementalStart As Long: colSupplementalStart = ColumnPerName("Critical Illness Voluntary")
    Dim colSupplementalEnd As Long: colSupplementalEnd = ColumnPerName("Hospital Indemnity Employer paid")
    Dim ColSupplemental1 As Long: ColSupplemental1 = ColumnPerName("Critical Illness Voluntary")
    Dim ColSupplemental2 As Long: ColSupplemental2 = ColumnPerName("Critical Illness Employer paid")
    Dim ColSupplemental3 As Long: ColSupplemental3 = ColumnPerName("Accident Voluntary")
    Dim ColSupplemental4 As Long: ColSupplemental4 = ColumnPerName("Accident Employer paid")
    Dim ColSupplemental5 As Long: ColSupplemental5 = ColumnPerName("Hospital Indemnity Voluntary")
    Dim ColSupplemental6 As Long: ColSupplemental6 = ColumnPerName("Hospital Indemnity Employer paid")
    'Declare Disability
    Dim colDisabilitySTD As Long: colDisabilitySTD = ColumnPerName("STD")
    Dim colDisabilityLTD As Long: colDisabilityLTD = ColumnPerName("LTD")
    Dim colDisabilityVSTD As Long: colDisabilityVSTD = ColumnPerName("VOLUNTARY STD")
    Dim colDisabilityVLTD As Long: colDisabilityVLTD = ColumnPerName("VOLUNTARY LTD")
    Dim colDisabilityBULTD As Long: colDisabilityBULTD = ColumnPerName("BUY-UP LTD")
    Dim colDisabilityJob As Long: colDisabilityJob = ColumnPerName("JOB TITLE")
    Dim colDisabilityStart As Long: colDisabilityStart = colDisabilitySTD
    Dim colDisabilityEnd As Long: colDisabilityEnd = colDisabilityBULTD
    'Declare Salary
    Dim colSalaryStart As Long: colSalaryStart = ColumnPerName("SALARY")
    Dim colSalaryEnd As Long: colSalaryEnd = colSalaryStart
    'Declare Life
    Dim colLifeBL As Long: colLifeBL = ColumnPerName("BASIC LIFE")
    Dim colLifeOL As Long: colLifeOL = ColumnPerName("OPTIONAL LIFE")
    Dim colLifeVL As Long: colLifeVL = ColumnPerName("VOLUNTARY LIFE")
    Dim colLifeBDL As Long: colLifeBDL = ColumnPerName("BASIC DEP LIFE")
    Dim colLifeODL As Long: colLifeODL = ColumnPerName("OPTIONAL DEP LIFE")
    Dim colLifeVDL As Long: colLifeVDL = ColumnPerName("VOLUNTARY DEP LIFE")
    Dim colBasicStart As Long: colBasicStart = ColumnPerName("BASIC VOLUME")
    Dim colBasicEnd As Long: colBasicEnd = ColumnPerName("BASIC VOLUME")
    Dim colOptionalStart As Long: colOptionalStart = ColumnPerName("OPTIONAL VOLUME")
    Dim colOptionalEnd As Long: colOptionalEnd = ColumnPerName("OPTIONAL VOLUME")
    Dim colVoluntaryStart As Long: colVoluntaryStart = ColumnPerName("VOLUNTARY VOLUME")
    Dim colVoluntaryEnd As Long: colVoluntaryEnd = ColumnPerName("VOLUNTARY VOLUME")
    Dim colBasicSub As Long: colBasicSub = ColumnPerName("BASIC SUB VOLUME")
    Dim colBasicSps As Long: colBasicSps = ColumnPerName("BASIC SPOUSE VOLUME")
    Dim colBasicChd As Long: colBasicChd = ColumnPerName("BASIC CHILD(REN) VOLUME")
    Dim colBasicDepStart As Long: colBasicDepStart = colBasicSub
    Dim colBasicDepEnd As Long: colBasicDepEnd = colBasicChd
    Dim colOptionalSub As Long: colOptionalSub = ColumnPerName("OPTIONAL SUB VOLUME")
    Dim colOptionalSps As Long: colOptionalSps = ColumnPerName("OPTIONAL SPOUSE VOLUME")
    Dim colOptionalChd As Long: colOptionalChd = ColumnPerName("OPTIONAL CHILD(REN) VOLUME")
    Dim colOptionalDepStart As Long: colOptionalDepStart = colOptionalSub
    Dim colOptionalDepEnd As Long: colOptionalDepEnd = colOptionalChd
    Dim colVoluntarySub As Long: colVoluntarySub = ColumnPerName("VOLUNTARY SUB VOLUME")
    Dim colVoluntarySps As Long: colVoluntarySps = ColumnPerName("VOLUNTARY SPOUSE VOLUME")
    Dim colVoluntaryChd As Long: colVoluntaryChd = ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")
    Dim colVoluntaryDepStart As Long: colVoluntaryDepStart = colVoluntarySub
    Dim colVoluntaryDepEnd As Long: colVoluntaryDepEnd = colVoluntaryChd
    Dim colBasicMult As Long: colBasicMult = ColumnPerName("BASIC MULTIPLIER")
    Dim colOptionalMult As Long: colOptionalMult = ColumnPerName("OPTIONAL MULTIPLIER")
    Dim colVoluntaryMult As Long: colVoluntaryMult = ColumnPerName("VOLUNTARY MULTIPLIER")
    Dim colLifeStart As Long: colLifeStart = colLifeBL
    Dim colLifeEnd As Long: colLifeEnd = colVoluntaryMult
    'Declare AD&D
    Dim colLifeBA As Long: colLifeBA = ColumnPerName("BASIC AD&D")
    Dim colLifeOA As Long: colLifeOA = ColumnPerName("OPTIONAL AD&D")
    Dim colLifeVA As Long: colLifeVA = ColumnPerName("VOLUNTARY AD&D")
    Dim colLifeBDA As Long: colLifeBDA = ColumnPerName("BASIC DEP AD&D")
    Dim colLifeODA As Long: colLifeODA = ColumnPerName("OPTIONAL DEP AD&D")
    Dim colLifeVDA As Long: colLifeVDA = ColumnPerName("VOLUNTARY DEP AD&D")
    Dim colBasicAStart As Long: colBasicAStart = ColumnPerName("AD&D BASIC VOLUME")
    Dim colBasicAEnd As Long: colBasicAEnd = ColumnPerName("AD&D BASIC VOLUME")
    Dim colOptionalAStart As Long: colOptionalAStart = ColumnPerName("AD&D OPTIONAL VOLUME")
    Dim colOptionalAEnd As Long: colOptionalAEnd = ColumnPerName("AD&D OPTIONAL VOLUME")
    Dim colVoluntaryAStart As Long: colVoluntaryAStart = ColumnPerName("AD&D VOLUNTARY VOLUME")
    Dim colVoluntaryAEnd As Long: colVoluntaryAEnd = ColumnPerName("AD&D VOLUNTARY VOLUME")
    Dim colBasicASub As Long: colBasicASub = ColumnPerName("AD&D BASIC SUB VOLUME")
    Dim colBasicASps As Long: colBasicASps = ColumnPerName("AD&D BASIC SPOUSE VOLUME")
    Dim colBasicAChd As Long: colBasicAChd = ColumnPerName("AD&D BASIC CHILD(REN) VOLUME")
    Dim colBasicDepAStart As Long: colBasicDepAStart = colBasicASub
    Dim colBasicDepAEnd As Long: colBasicDepAEnd = colBasicAChd
    Dim colOptionalASub As Long: colOptionalASub = ColumnPerName("AD&D OPTIONAL SUB VOLUME")
    Dim colOptionalASps As Long: colOptionalASps = ColumnPerName("AD&D OPTIONAL SPOUSE VOLUME")
    Dim colOptionalAChd As Long: colOptionalAChd = ColumnPerName("AD&D OPTIONAL CHILD(REN) VOLUME")
    Dim colOptionalDepAStart As Long: colOptionalDepAStart = colOptionalASub
    Dim colOptionalDepAEnd As Long: colOptionalDepAEnd = colOptionalAChd
    Dim colVoluntaryASub As Long: colVoluntaryASub = ColumnPerName("AD&D VOLUNTARY SUB VOLUME")
    Dim colVoluntaryASps As Long: colVoluntaryASps = ColumnPerName("AD&D VOLUNTARY SPOUSE VOLUME")
    Dim colVoluntaryAChd As Long: colVoluntaryAChd = ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")
    Dim colVoluntaryDepAStart As Long: colVoluntaryDepAStart = colVoluntaryASub
    Dim colVoluntaryDepAEnd As Long: colVoluntaryDepAEnd = colVoluntaryAChd
    Dim colBasicMultA As Long: colBasicMultA = ColumnPerName("AD&D BASIC MULTIPLIER")
    Dim colOptionalMultA As Long: colOptionalMultA = ColumnPerName("AD&D OPTIONAL MULTIPLIER")
    Dim colVoluntaryMultA As Long: colVoluntaryMultA = ColumnPerName("AD&D VOLUNTARY MULTIPLIER")
    Dim colADDStart As Long: colADDStart = colLifeBA
    Dim colADDEnd As Long: colADDEnd = colVoluntaryMultA
    'Declare Cobra
    Dim colCobraStart As Long: colCobraStart = ColumnPerName("COBRA START DATE")
    Dim colCobraEnd As Long: colCobraEnd = ColumnPerName("COBRA QUALIFYING EVENT")
    'Declare Medicare
    Dim colMedicareStart As Long: colMedicareStart = ColumnPerName("MEDICARE HIB ID")
    Dim colMedicareEnd As Long: colMedicareEnd = ColumnPerName("MEDICARE PART B EFF DATE")
    'Declare Prime/Complete
    Dim colPrimeCompleteStart As Long: colPrimeCompleteStart = ColumnPerName("FTS (PRIME/COMPLETE)")
    Dim colPrimeCompleteEnd As Long: colPrimeCompleteEnd = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
    
    'Hide Medical
    If shData.Range("E2").Value <> True Then
        'Medical product
        Call HidingRange(colMedicalStart, colMedicalEnd)
        'Medicare
        Call HidingRange(colMedicareStart, colMedicareEnd)
    End If
    
    'Hide Dental
    If shData.Range("E3").Value <> True Then
        'Dental product
        Call HidingRange(colDentalStart, colDentalEnd)
        'Prime/Complete
        Call HidingRange(colPrimeCompleteStart, colPrimeCompleteEnd)
    Else
        'Prime/Complete
        For i = 3 To 30
            If (InStr(1, shData.Range("AM" & i).Value, "Prime", vbTextCompare) > 0 Or _
                InStr(1, shData.Range("AM" & i).Value, "Complete", vbTextCompare) > 0) And _
                shData.Range("I73").Value = True Then
                    found = True
                    Exit For
            End If
        Next i
        If Not found Then
            Call HidingRange(colPrimeCompleteStart, colPrimeCompleteEnd)
        End If
        'Dental product
'        found = False
'        For i = 3 To 30
'            If shData.Range("H73").Value = True Or _
'                (shData.Range("AM" & i).Value <> "Prime" And _
'                shData.Range("AM" & i).Value <> "Complete" And _
'                shData.Range("AM" & i).Value <> "Voluntary Prime" And _
'                shData.Range("AM" & i).Value <> "Voluntary Complete" And _
'                shData.Range("AM" & i).Value <> "") Then
'                    found = True
'                    Exit For
'            End If
'        Next i
'        If Not found Then
'            Call HidingRange(colDentalStart, colDentalEnd)
'        End If
    End If
    
    'Hide Vision
    If shData.Range("E4").Value <> True Then
        'Vision product
        Call HidingRange(colVisionStart, colVisionEnd)
    End If
    
    'Hide FSA
    Dim fsa1found As Boolean: fsa1found = False
    Dim fsa2found As Boolean: fsa2found = False
    Dim fsa3found As Boolean: fsa3found = False
    Dim fsa4found As Boolean: fsa4found = False
    Dim fsa5found As Boolean: fsa5found = False
    If Not (shData.Range("E7").Value) Then
        'FSA product
        Call HidingRange(colFSAStart, colFSAEnd)
    Else
        For i = 3 To 30
            Select Case UCase(shData.Range("NE" & i).Value)
                Case "FULL HEALTHCARE FSA"
                    fsa1found = True
                Case "LIMITED PURPOSE FSA"
                    fsa2found = True
                Case "DEPENDENT CARE FSA"
                    fsa3found = True
                Case "COMMUTER TRANSIT"
                    fsa4found = True
                Case "COMMUTER PARKING"
                    fsa5found = True
                Case Empty:
                    i = 30
            End Select
        Next i
    End If
    If Not fsa1found Then HidingRange (ColFSA1)
    If Not fsa2found Then HidingRange (ColFSA2)
    If Not fsa3found Then HidingRange (ColFSA3)
    If Not fsa4found Then HidingRange (ColFSA4)
    If Not fsa5found Then HidingRange (ColFSA5)
    
     'Hide Supplemental
    Dim Supplemental1found As Boolean: Supplemental1found = False
    Dim Supplemental2found As Boolean: Supplemental2found = False
    Dim Supplemental3found As Boolean: Supplemental3found = False
    Dim Supplemental4found As Boolean: Supplemental4found = False
    Dim Supplemental5found As Boolean: Supplemental5found = False
    Dim Supplemental6found As Boolean: Supplemental6found = False
    If Not (shData.Range("E8").Value) Then
        'Supplemental product
        Call HidingRange(colSupplementalStart, colSupplementalEnd)
    Else
        For i = 3 To 30
            Select Case (shData.Range("NN" & i).Value)
                Case "Critical Illness Voluntary"
                    Supplemental1found = True
                Case "Critical Illness Employer paid"
                    Supplemental2found = True
                Case "Accident Voluntary"
                    Supplemental3found = True
                Case "Accident Employer paid"
                    Supplemental4found = True
                Case "Hospital Indemnity Voluntary"
                    Supplemental5found = True
                Case "Hospital Indemnity Employer paid"
                    Supplemental6found = True
                Case Empty:
                    i = 30
            End Select
        Next i
    End If
    If Not Supplemental1found Then HidingRange (ColSupplemental1)
    If Not Supplemental2found Then HidingRange (ColSupplemental2)
    If Not Supplemental3found Then HidingRange (ColSupplemental3)
    If Not Supplemental4found Then HidingRange (ColSupplemental4)
    If Not Supplemental5found Then HidingRange (ColSupplemental5)
    If Not Supplemental6found Then HidingRange (ColSupplemental6)
    
    'Hide Cobra
    If shData.Range("E2").Value <> True And _
        shData.Range("E3").Value <> True And _
        shData.Range("E4").Value <> True Then
            Call HidingRange(colCobraStart, colCobraEnd)
    End If
    
    'Hide Disability
    Dim stdFound As Boolean: stdFound = False
    Dim ltdFound As Boolean: ltdFound = False
    Dim vstdFound As Boolean: vstdFound = False
    Dim vltdFound As Boolean: vltdFound = False
    Dim bultdFound As Boolean: bultdFound = False
    If shData.Range("E6").Value <> True Then
        Call HidingRange(colDisabilityStart, colDisabilityEnd)
    Else
        For i = 3 To 30
            Select Case shData.Range("AS" & i).Value
                Case "Short Term Disability"
                    stdFound = True
                Case "Long Term Disability"
                    ltdFound = True
                Case "Voluntary STD"
                    vstdFound = True
                Case "Voluntary LTD"
                    vltdFound = True
                Case "Buy-Up LTD"
                    bultdFound = True
            End Select
        Next i
    End If
    If Not stdFound Then HidingRange (colDisabilitySTD)
    If Not ltdFound Then HidingRange (colDisabilityLTD)
    If Not vstdFound Then HidingRange (colDisabilityVSTD)
    If Not vltdFound Then HidingRange (colDisabilityVLTD)
    If Not bultdFound Then HidingRange (colDisabilityBULTD)
    
    If Not bultdFound And Not vltdFound And Not ltdFound And shData.Range("grp").Value = "Large" Then HidingRange (colDisabilityJob)
    
    'Hide Salary (Hides if neither Disability nor Life is selected
    If shData.Range("E5").Value <> True And shData.Range("E6").Value <> True Then
        Call HidingRange(colSalaryStart, colSalaryEnd)
    'Else
    '    shSL.Range(shSL.Cells(1, colSalaryStart), shSL.Cells(1, colSalaryEnd)).EntireColumn.Hidden = False
    End If
    
    'Hide Life
    Dim bl As Boolean: bl = False
    Dim ol As Boolean: ol = False
    Dim vl As Boolean: vl = False
    Dim bdl As Boolean: bdl = False
    Dim odl As Boolean: odl = False
    Dim vdl As Boolean: vdl = False
    If shData.Range("E5").Value <> True Then
        Call HidingRange(colLifeStart, colLifeEnd)
    Else
        For i = 3 To 30
            Select Case shData.Range("AV" & i).Value
                Case "Basic Life"
                    bl = True
                Case "Optional Life"
                    ol = True
                Case "Voluntary Life"
                    vl = True
                Case "Basic Dep Life"
                    bdl = True
                Case "Optional Dep Life"
                    odl = True
                Case "Voluntary Dep Life"
                    vdl = True
            End Select
        Next i
    End If
    
    If Not bl Then
        Call HidingRange(colLifeBL)
        Call HidingRange(colBasicStart, colBasicEnd)
        Call HidingRange(colBasicMult)
    End If
    If Not ol Then
        Call HidingRange(colLifeOL)
        Call HidingRange(colOptionalStart, colOptionalEnd)
        Call HidingRange(colOptionalMult)
    End If
    If Not vl Then
        Call HidingRange(colLifeVL)
        Call HidingRange(colVoluntaryStart, colVoluntaryEnd)
        Call HidingRange(colVoluntaryMult)
    End If
    
    If shData.Range("level3").Value <> True Then
        '=COUNTIFS(BS:BS, "Basic Dep Life",BT:BT, "Sub",BV:BV, TRUE)
        Dim bsub As Boolean: bsub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim bsps As Boolean: bsps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim bchd As Boolean: bchd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim osub As Boolean: osub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim osps As Boolean: osps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim ochd As Boolean: ochd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim vsub As Boolean: vsub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim vsps As Boolean: vsps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        Dim vchd As Boolean: vchd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep Life", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
    End If
    
    If Not bdl Then
        Call HidingRange(colLifeBDL)
        Call HidingRange(colBasicDepStart, colBasicDepEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not bsub Then Call HidingRange(colBasicSub)
            If Not bsps Then Call HidingRange(colBasicSps)
            If Not bchd Then Call HidingRange(colBasicChd)
        End If
    End If
    If Not odl Then
        Call HidingRange(colLifeODL)
        Call HidingRange(colOptionalDepStart, colOptionalDepEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not osub Then Call HidingRange(colOptionalSub)
            If Not osps Then Call HidingRange(colOptionalSps)
            If Not ochd Then Call HidingRange(colOptionalChd)
        End If
    End If
    If Not vdl Then
        Call HidingRange(colLifeVDL)
        Call HidingRange(colVoluntaryDepStart, colVoluntaryDepEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not vsub Then Call HidingRange(colVoluntarySub)
            If Not vsps Then Call HidingRange(colVoluntarySps)
            If Not vchd Then Call HidingRange(colVoluntaryChd)
        End If
    End If
    
    'Hide AD&D
    bl = False
    ol = False
    vl = False
    bdl = False
    odl = False
    vdl = False
    If shData.Range("E5").Value <> True Then
        Call HidingRange(colADDStart, colADDEnd)
    Else
        For i = 3 To 30
            Select Case shData.Range("AY" & i).Value
                Case "Basic AD&D"
                    bl = True
                Case "Optional AD&D"
                    ol = True
                Case "Voluntary AD&D"
                    vl = True
                Case "Basic Dep AD&D"
                    bdl = True
                Case "Optional Dep AD&D"
                    odl = True
                Case "Voluntary Dep AD&D"
                    vdl = True
            End Select
        Next i
    End If
    If Not bl Then
        Call HidingRange(colLifeBA)
        Call HidingRange(colBasicAStart, colBasicAEnd)
        Call HidingRange(colBasicMultA)
    End If
    If Not ol Then
        Call HidingRange(colLifeOA)
        Call HidingRange(colOptionalAStart, colOptionalAEnd)
        Call HidingRange(colOptionalMultA)
    End If
    If Not vl Then
        Call HidingRange(colLifeVA)
        Call HidingRange(colVoluntaryAStart, colVoluntaryAEnd)
        Call HidingRange(colVoluntaryMultA)
    End If
    
    If shData.Range("level3").Value <> True Then
        '=COUNTIFS(BS:BS, "Basic Dep Life",BT:BT, "Sub",BV:BV, TRUE)
        bsub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        bsps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        bchd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Basic Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        osub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        osps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        ochd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Optional Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        vsub = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Sub", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        vsps = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Spouse", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
        vchd = WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Amount", shData.Range("BV:BV"), True) > 0 Or WorksheetFunction.CountIfs(shData.Range("BS:BS"), "Voluntary Dep AD&D", shData.Range("BT:BT"), "Child", shData.Range("BU:BU"), "Flat Incremental", shData.Range("BV:BV"), True) > 0
    End If
    
    If Not bdl Then
        Call HidingRange(colLifeBDA)
        Call HidingRange(colBasicDepAStart, colBasicDepAEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not bsub Then Call HidingRange(colBasicASub)
            If Not bsps Then Call HidingRange(colBasicASps)
            If Not bchd Then Call HidingRange(colBasicAChd)
        End If
    End If
    If Not odl Then
        Call HidingRange(colLifeODA)
        Call HidingRange(colOptionalDepAStart, colOptionalDepAEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not osub Then Call HidingRange(colOptionalASub)
            If Not osps Then Call HidingRange(colOptionalASps)
            If Not ochd Then Call HidingRange(colOptionalAChd)
        End If
    End If
    If Not vdl Then
        Call HidingRange(colLifeVDA)
        Call HidingRange(colVoluntaryDepAStart, colVoluntaryDepAEnd)
    Else
        If shData.Range("level3").Value <> True Then
            If Not vsub Then Call HidingRange(colVoluntaryASub)
            If Not vsps Then Call HidingRange(colVoluntaryASps)
            If Not vchd Then Call HidingRange(colVoluntaryAChd)
        End If
    End If
    
    If shData.Range("level3").Value <> True Then
        'Volumes
        If shData.Range("BV29") <> True And shData.Range("BV30") <> True And shData.Range("BV31") <> True Then Call HideSingleColumn("BASIC VOLUME")
        If shData.Range("BV61") <> True And shData.Range("BV62") <> True And shData.Range("BV63") <> True Then Call HideSingleColumn("OPTIONAL VOLUME")
        If shData.Range("BV93") <> True And shData.Range("BV94") <> True And shData.Range("BV95") <> True Then Call HideSingleColumn("VOLUNTARY VOLUME")
        If shData.Range("BV6") <> True And shData.Range("BV7") <> True And shData.Range("BV8") <> True Then Call HideSingleColumn("AD&D BASIC VOLUME")
        If shData.Range("BV38") <> True And shData.Range("BV39") <> True And shData.Range("BV40") <> True Then Call HideSingleColumn("AD&D OPTIONAL VOLUME")
        If shData.Range("BV70") <> True And shData.Range("BV71") <> True And shData.Range("BV72") <> True Then Call HideSingleColumn("AD&D VOLUNTARY VOLUME")
        'Multipliers
        If shData.Range("BV32") <> True Then Call HideSingleColumn("BASIC MULTIPLIER")
        If shData.Range("BV64") <> True Then Call HideSingleColumn("OPTIONAL MULTIPLIER")
        If shData.Range("BV96") <> True Then Call HideSingleColumn("VOLUNTARY MULTIPLIER")
        If shData.Range("BV9") <> True Then Call HideSingleColumn("AD&D BASIC MULTIPLIER")
        If shData.Range("BV41") <> True Then Call HideSingleColumn("AD&D OPTIONAL MULTIPLIER")
        If shData.Range("BV73") <> True Then Call HideSingleColumn("AD&D VOLUNTARY MULTIPLIER")
        'Spouse
        If shData.Range("BV22") <> True And shData.Range("BV23") <> True Then Call HideSingleColumn("BASIC SPOUSE VOLUME")
        If shData.Range("BV54") <> True And shData.Range("BV55") <> True Then Call HideSingleColumn("OPTIONAL SPOUSE VOLUME")
        If shData.Range("BV86") <> True And shData.Range("BV87") <> True Then Call HideSingleColumn("VOLUNTARY SPOUSE VOLUME")
        If shData.Range("BV15") <> True And shData.Range("BV16") <> True Then Call HideSingleColumn("AD&D BASIC SPOUSE VOLUME")
        If shData.Range("BV47") <> True And shData.Range("BV48") <> True Then Call HideSingleColumn("AD&D OPTIONAL SPOUSE VOLUME")
        If shData.Range("BV79") <> True And shData.Range("BV80") <> True Then Call HideSingleColumn("AD&D VOLUNTARY SPOUSE VOLUME")
        'Child(ren)
        If shData.Range("BV24") <> True And shData.Range("BV25") <> True Then Call HideSingleColumn("BASIC CHILD(REN) VOLUME")
        If shData.Range("BV56") <> True And shData.Range("BV57") <> True Then Call HideSingleColumn("OPTIONAL CHILD(REN) VOLUME")
        If shData.Range("BV88") <> True And shData.Range("BV89") <> True Then Call HideSingleColumn("VOLUNTARY CHILD(REN) VOLUME")
        If shData.Range("BV17") <> True And shData.Range("BV18") <> True Then Call HideSingleColumn("AD&D BASIC CHILD(REN) VOLUME")
        If shData.Range("BV49") <> True And shData.Range("BV50") <> True Then Call HideSingleColumn("AD&D OPTIONAL CHILD(REN) VOLUME")
        If shData.Range("BV81") <> True And shData.Range("BV82") <> True Then Call HideSingleColumn("AD&D VOLUNTARY CHILD(REN) VOLUME")
    End If
    
    'Group specific fields
    If shData.Range("grp").Value = "Small" Then
        Call HideLGSpecificFields
    ElseIf shData.Range("grp").Value = "Large" Then
        Call HideSGSpecificFields
    End If
    
    shSL.Protect AllowFormattingColumns:=True
End Sub

Sub HideSGSpecificFields()
    'Call HideSingleColumn("LANGUAGE")
    'Call HideSingleColumn("COB")
End Sub

Sub HideLGSpecificFields()
    'Call HideSingleColumn("DEPARTMENT NUMBER")
    'Call HideSingleColumn("EMPLOYEE NUMBER")
    'Call HideSingleColumn("HCID")
    
End Sub

Sub HidingRange(ByVal startRng As Long, Optional ByVal endRng As Long)
    If endRng = 0 Then endRng = startRng
    shSL.Range(shSL.Cells(1, startRng), shSL.Cells(1, endRng)).EntireColumn.Hidden = True
End Sub

Sub HideSingleColumn(ByVal colName As String)
    shSL.Range(shSL.Cells(1, ColumnPerName(colName)), shSL.Cells(1, ColumnPerName(colName))).EntireColumn.Hidden = True
End Sub
Sub UnHideSingleColumn(ByVal colName As String)
    shSL.Range(shSL.Cells(1, ColumnPerName(colName)), shSL.Cells(1, ColumnPerName(colName))).EntireColumn.Hidden = False
End Sub
Attribute VB_Name = "Import"
Option Explicit

Sub Importdata_Click()
    Dim importFileExists As Boolean
    Dim isCancelled As Boolean: isCancelled = False
    importFileExists = doesFileExist(isCancelled)
    If importFileExists = True Then frmSheetName.Show
    If Not importFileExists Then If Not isCancelled Then MsgBox ("The desired sheet does not exist on the source workbook.")
End Sub

Function doesFileExist(ByRef isCancelled As Boolean) As Boolean
    Dim customerWorkbook As Workbook, ws As Worksheet, targetWB As Workbook
    Dim customerFilename As String, filter As String, caption As String, Author As String
     
    
    shData.Range("IP2:IP5").ClearContents
    
    Set targetWB = ThisWorkbook
    
    filter = "Text files (*.xls*),*.xls*"
    caption = "Please Select an input file "
    customerFilename = Application.GetOpenFilename(filter, , caption)
    targetWB.Worksheets(shData.Name).Range("IP2").Value = customerFilename
     
    
   
    If customerFilename = "False" Then
        MsgBox ("Cancel was selected during the file selection, Please close the Import tool form and Click Return Button."), vbOKOnly
        isCancelled = True
        doesFileExist = False
    Else
        doesFileExist = True
    End If
    
End Function

Function doesImportExist(ByRef isCancelled As Boolean) As Boolean
    Dim shFound As Boolean: shFound = False
    Dim customerWorkbook As Workbook
    Dim ws As Worksheet
    Dim customerFilename As String
    Dim filter As String
    Dim caption As String
    Dim targetWB As Workbook
    Dim inputSheetName As String
    
    shData.Range("IP2:IP3").ClearContents
    
    Set targetWB = ThisWorkbook
    
    filter = "Text files (*.xls*),*.xls*"
    caption = "Please Select an input file "
    customerFilename = Application.GetOpenFilename(filter, , caption)
    targetWB.Worksheets(shData.Name).Range("IP2").Value = customerFilename
    If customerFilename = "False" Then
        MsgBox ("Cancel was selected during the file selection, Please close the Import tool form and Click Return Button."), vbOKOnly
        isCancelled = True
        doesImportExist = False
        Exit Function
    Else
        Set customerWorkbook = Application.Workbooks.Open(customerFilename)
        
    End If
    
    On Error Resume Next
    
    frmSheetName.Show
    
    inputSheetName = InputBox("Please type the sheet name you would like to import", "Import Sheet Name")
    
    If inputSheetName = "" Then
        doesImportExist = False
        Application.DisplayAlerts = False
        customerWorkbook.Close (False)
        Application.DisplayAlerts = True
        Exit Function
    End If
    
    For Each ws In customerWorkbook.Worksheets
        If Trim(UCase(ws.Name)) = Trim(UCase(inputSheetName)) Then
            shFound = True
            targetWB.Worksheets(shData.Name).Range("IP3").Value = ws.Name
            Exit For
        End If
    Next ws
    customerWorkbook.Close
    doesImportExist = shFound
End Function

Sub InternalImport()
    Dim lc As Long
    Dim lr As Long
    Dim i As Long
    Application.EnableEvents = False
    ClearSL
    lc = shSB.Range("A5").End(xlToRight).Column
    For i = 1 To lc
        lr = shSB.Cells(Rows.Count, i).End(xlUp).row
        If lr < startrow Then lr = startrow
        On Error Resume Next
        If Not shSB.Range(shSB.Cells(startrow, i), shSB.Cells(lr, i)).Value = "" Then
            shSB.Range(shSB.Cells(startrow, i), shSB.Cells(lr, i)).Copy shSL.Cells(startrow, ColumnPerName(shSB.Cells(5, i).Value))
        End If
    Next i
    Application.EnableEvents = True
    shSL.Activate
    CoreValidation
End Sub

Attribute VB_Name = "KeyDown"
'*************************************************************************************************
'* Key Down procedures                                                                           *
'* Sets up Tab and Enter properties for Life>Class options in order to navigate through the form *
'* by Iggy Darsa                                                                                 *
'* 7/1/2015                                                                                      *
'*************************************************************************************************
'
'Option Explicit
'Sub tbClassDesc01_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc01")
'End Sub
'Sub tbClassDesc02_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc02")
'End Sub
'Sub tbClassDesc03_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc03")
'End Sub
'Sub tbClassDesc04_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc04")
'End Sub
'Sub tbClassDesc05_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc05")
'End Sub
'Sub tbClassDesc06_Click()
'    Call OnKeyDownOnTextBox("tbClassDesc06")
'End Sub
'
'Sub tbAmount01_Click()
'    Call OnKeyDownOnTextBox("tbAmount01")
'End Sub
'Sub tbAmount02_Click()
'    Call OnKeyDownOnTextBox("tbAmount02")
'End Sub
'Sub tbAmount03_Click()
'    Call OnKeyDownOnTextBox("tbAmount03")
'End Sub
'Sub tbAmount04_Click()
'    Call OnKeyDownOnTextBox("tbAmount04")
'End Sub
'Sub tbAmount05_Click()
'    Call OnKeyDownOnTextBox("tbAmount05")
'End Sub
'Sub tbAmount06_Click()
'    Call OnKeyDownOnTextBox("tbAmount06")
'End Sub
'
'Sub tbMult01_Click()
'    Call OnKeyDownOnTextBox("tbMult01")
'End Sub
'Sub tbMult02_Click()
'    Call OnKeyDownOnTextBox("tbMult02")
'End Sub
'Sub tbMult03_Click()
'    Call OnKeyDownOnTextBox("tbMult03")
'End Sub
'Sub tbMult04_Click()
'    Call OnKeyDownOnTextBox("tbMult04")
'End Sub
'Sub tbMult05_Click()
'    Call OnKeyDownOnTextBox("tbMult05")
'End Sub
'Sub tbMult06_Click()
'    Call OnKeyDownOnTextBox("tbMult06")
'End Sub
'
'Sub tbClassName01_Click()
'    Call OnKeyDownOnTextBox("tbClassName01")
'End Sub
'Sub tbClassName02_Click()
'    Call OnKeyDownOnTextBox("tbClassName02")
'End Sub
'Sub tbClassName03_Click()
'    Call OnKeyDownOnTextBox("tbClassName03")
'End Sub
'Sub tbClassName04_Click()
'    Call OnKeyDownOnTextBox("tbClassName04")
'End Sub
'Sub tbClassName05_Click()
'    Call OnKeyDownOnTextBox("tbClassName05")
'End Sub
'Sub tbClassName06_Click()
'    Call OnKeyDownOnTextBox("tbClassName06")
'End Sub

'Sub OnKeyDownDefault()
'    If Len(Application.OperatingSystem) >= 7 Then
'        If Left(Application.OperatingSystem, 7) = "Windows" Then
'            Application.OnKey "{TAB}"
'            Application.OnKey "{ENTER}"
'            Application.OnKey "~"
'        End If
'    End If
'End Sub


'Sub OnKeyDownOnTextBox(ByVal str As String)
'    If Len(Application.OperatingSystem) >= 7 Then
'        If Left(Application.OperatingSystem, 7) = "Windows" Then
'            shOUO.Shapes.Range(Array(str)).Select
'            Dim proc As String: proc = "'jump """ & str & """'"
'            Application.OnKey "{TAB}", proc
'            Application.OnKey "{ENTER}", proc
'            Application.OnKey "~", proc
'        End If
'    End If
'End Sub

'Sub jump(ByVal str As String)
'    Dim tbName As String: tbName = Left(str, Len(str) - 2)
'    Dim tbNo As Integer: tbNo = Right(str, 2)
'    Dim tbNextName As String
'    Dim proc As String
'
'    Select Case tbName
'        Case "tbClassDesc"
'            tbNextName = "tbAmount" & Format(tbNo, "00")
'            proc = "'jump """ & tbNextName & """'"
'        Case "tbMult"
'            tbNextName = "tbClassName" & Format(tbNo, "00")
'            proc = "'jump """ & tbNextName & """'"
'        Case "tbAmount"
'            If tbNo = 6 Then tbNo = 0
'            tbNextName = "tbClassDesc" & Format(tbNo + 1, "00")
'            proc = "'jump """ & tbNextName & """'"
'        Case "tbClassName"
'            If tbNo = 6 Then tbNo = 0
'            tbNextName = "tbMult" & Format(tbNo + 1, "00")
'            proc = "'jump """ & tbNextName & """'"
'    End Select
'    If Len(Application.OperatingSystem) >= 7 Then
'        If Left(Application.OperatingSystem, 7) = "Windows" Then
'            shOUO.Shapes.Range(Array(tbNextName)).Select
'            Application.OnKey "{TAB}", proc
'            Application.OnKey "{ENTER}", proc
'            Application.OnKey "~", proc
'        End If
'    End If
'End Sub
Attribute VB_Name = "Life_Options"
'****************************************************************************************************
'* Life Options procedures                                                                          *
'* Based on the Life selections, the sub forms are executed and the data is populated in Data sheet *
'* by Iggy Darsa                                                                                    *
'* 7/1/2015                                                                                         *
'****************************************************************************************************

Sub cbFlat_Click()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV26", "BV27", "BV28", msoTrue, msoFalse, msoFalse, "BV26", "shapeGrpLifeFlatOptions", Selection, "BV29:BV34") ', shData.Range("BP2").Value)
        Case "Basic AD&D"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV3", "BV4", "BV5", msoTrue, msoFalse, msoFalse, "BV3", "shapeGrpLifeFlatOptions", Selection, "BV6:BV11") ', shData.Range("BP3").Value)
        Case "Optional Life"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV58", "BV59", "BV60", msoTrue, msoFalse, msoFalse, "BV58", "shapeGrpLifeFlatOptions", Selection, "BV61:BV66") ', shData.Range("BP4").Value)
        Case "Optional AD&D"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV35", "BV36", "BV37", msoTrue, msoFalse, msoFalse, "BV35", "shapeGrpLifeFlatOptions", Selection, "BV38:BV43") ', shData.Range("BP5").Value)
        Case "Voluntary Life"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV90", "BV91", "BV92", msoTrue, msoFalse, msoFalse, "BV90", "shapeGrpLifeFlatOptions", Selection, "BV93:BV98") ', shData.Range("BP6").Value)
        Case "Voluntary AD&D"
            Call ParentLifeOptions("cbFlat", xlOn, xlOff, xlOff, True, False, False, "BV67", "BV68", "BV69", msoTrue, msoFalse, msoFalse, "BV67", "shapeGrpLifeFlatOptions", Selection, "BV70:BV75") ', shData.Range("BP7").Value)
    End Select
End Sub

Sub cbClass_Click()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV26", "BV27", "BV28", msoFalse, msoTrue, msoFalse, "BV27", "shapeGrpLifeClassOptions", Selection, "BV29:BV34") ', shData.Range("BP2").Value)
        Case "Basic AD&D"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV3", "BV4", "BV5", msoFalse, msoTrue, msoFalse, "BV4", "shapeGrpLifeClassOptions", Selection, "BV6:BV11") ', shData.Range("BP3").Value)
        Case "Optional Life"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV58", "BV59", "BV60", msoFalse, msoTrue, msoFalse, "BV59", "shapeGrpLifeClassOptions", Selection, "BV61:BV66") ', shData.Range("BP3").Value)
        Case "Optional AD&D"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV35", "BV36", "BV37", msoFalse, msoTrue, msoFalse, "BV36", "shapeGrpLifeClassOptions", Selection, "BV38:BV43") ', shData.Range("BP5").Value)
        Case "Voluntary Life"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV90", "BV91", "BV92", msoFalse, msoTrue, msoFalse, "BV91", "shapeGrpLifeClassOptions", Selection, "BV93:BV98") ', shData.Range("BP6").Value)
        Case "Voluntary AD&D"
            Call ParentLifeOptions("cbClass", xlOff, xlOn, xlOff, False, True, False, "BV67", "BV68", "BV69", msoFalse, msoTrue, msoFalse, "BV68", "shapeGrpLifeClassOptions", Selection, "BV70:BV75") ', shData.Range("BP7").Value)
    End Select
End Sub

Sub cbSalary_Click()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV26", "BV27", "BV28", msoFalse, msoFalse, msoTrue, "BV28", "shapeGrpLifeSalaryOptions", Selection, "BV29:BV34") ', shData.Range("BP2").Value)
        Case "Basic AD&D"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV3", "BV4", "BV5", msoFalse, msoFalse, msoTrue, "BV5", "shapeGrpLifeSalaryOptions", Selection, "BV6:BV11") ', shData.Range("BP3").Value)
        Case "Optional Life"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV58", "BV59", "BV60", msoFalse, msoFalse, msoTrue, "BV60", "shapeGrpLifeSalaryOptions", Selection, "BV61:BV66") ', shData.Range("BP3").Value)
        Case "Optional AD&D"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV35", "BV36", "BV37", msoFalse, msoFalse, msoTrue, "BV37", "shapeGrpLifeSalaryOptions", Selection, "BV38:BV43") ', shData.Range("BP5").Value)
        Case "Voluntary Life"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV90", "BV91", "BV92", msoFalse, msoFalse, msoTrue, "BV92", "shapeGrpLifeSalaryOptions", Selection, "BV93:BV98") ', shData.Range("BP6").Value)
        Case "Voluntary AD&D"
            Call ParentLifeOptions("cbSalary", xlOff, xlOff, xlOn, False, False, True, "BV67", "BV68", "BV69", msoFalse, msoFalse, msoTrue, "BV69", "shapeGrpLifeSalaryOptions", Selection, "BV70:BV75") ', shData.Range("BP7").Value)
    End Select
End Sub

Private Sub ParentLifeOptions(ByVal cbName As String, _
                                ByVal OnOrOff1 As Variant, ByVal OnOrOff2 As Variant, ByVal OnOrOff3 As Variant, _
                                ByVal TF1 As Boolean, ByVal TF2 As Boolean, ByVal TF3 As Boolean, _
                                ByVal rng1 As String, ByVal rng2 As String, ByVal rng3 As String, _
                                ByVal mso1 As Variant, ByVal mso2 As Variant, ByVal mso3 As Variant, _
                                ByVal dataAdrs As String, ByVal shpName As String, ByRef rng As Range, _
                                ByVal chdRng As String) ', ByVal isBundled As Boolean)
    Application.ScreenUpdating = False
    shOUO.CheckBoxes("cbFlatSCFA").Value = xlOff
    shOUO.CheckBoxes("cbFlatFI").Value = xlOff
    shOUO.CheckBoxes("cbClassMCFA").Value = xlOff
    shOUO.CheckBoxes("cbClassMCSB").Value = xlOff
    shOUO.CheckBoxes("cbSalarySB").Value = xlOff
    shOUO.CheckBoxes("cbSalarySI").Value = xlOff
    shData.Range(chdRng).Value = False
    If shOUO.CheckBoxes(cbName).Value = xlOn Then
        shData.Range(rng1).Value = TF1
        shData.Range(rng2).Value = TF2
        shData.Range(rng3).Value = TF3
        shOUO.CheckBoxes("cbFlat").Value = OnOrOff1
        shOUO.CheckBoxes("cbClass").Value = OnOrOff2
        shOUO.CheckBoxes("cbSalary").Value = OnOrOff3
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = mso1
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = mso2
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = mso3
        
        'Name the subcategory frame
        If mso1 = True Then
            shOUO.Shapes.Range(Array("frameFlatOptions")).Select
            Selection.Characters.text = rng.Value & " Flat Options"
            rng.Select
        ElseIf mso2 = True Then
            shOUO.Shapes.Range(Array("frameClassOptions")).Select
            Selection.Characters.text = rng.Value & " Class Options"
            rng.Select
        ElseIf mso3 = True Then
            shOUO.Shapes.Range(Array("frameSalaryOptions")).Select
            Selection.Characters.text = rng.Value & " Salary Options"
            rng.Select
        End If
    Else
        shData.Range(dataAdrs).Value = False
        shOUO.Shapes.Range(Array(shpName)).Visible = msoFalse
    End If
    
    If cbName <> "cbClass" Then
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
        Call ClearFlatAmountFormData
        Call ClearSalaryBasedFormData
    End If
End Sub


Sub cbFlatSCFA_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbFlatSCFA", "BV29", "BV6", "BV61", "BV38", "BV93", "BV70")
End Sub

Sub cbFlatFI_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbFlatFI", "BV30", "BV7", "BV62", "BV39", "BV94", "BV71")
End Sub

Sub cbClassMCFA_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbClassMCFA", "BV31", "BV8", "BV63", "BV40", "BV95", "BV72")
End Sub

Sub cbClassMCSB_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbClassMCSB", "BV32", "BV9", "BV64", "BV41", "BV96", "BV73")
End Sub

Sub cbSalarySB_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbSalarySB", "BV33", "BV10", "BV65", "BV42", "BV97", "BV74")
End Sub

Sub cbSalarySI_Click()
    Application.ScreenUpdating = False
    Call ChildLifeOptions("cbSalarySI", "BV34", "BV11", "BV66", "BV43", "BV98", "BV75")
End Sub

Private Sub ChildLifeOptions(ByVal cbName As String, ByVal rng1 As String, ByVal rng2 As String, ByVal rng3 As String, ByVal rng4 As String, ByVal rng5 As String, ByVal rng6 As String)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If shOUO.CheckBoxes(cbName).Value = xlOn Then
        shOUO.CheckBoxes("cbFlatSCFA").Value = xlOff
        shOUO.CheckBoxes("cbFlatFI").Value = xlOff
        shOUO.CheckBoxes("cbClassMCFA").Value = xlOff
        shOUO.CheckBoxes("cbClassMCSB").Value = xlOff
        shOUO.CheckBoxes("cbSalarySB").Value = xlOff
        shOUO.CheckBoxes("cbSalarySI").Value = xlOff
        shOUO.CheckBoxes(cbName).Value = xlOn
        
        Select Case shData.Range("G84").Value
            Case "Basic Life"
                shData.Range("BV29:BV34").Value = False
                shData.Range(rng1).Value = True
            Case "Basic AD&D"
                shData.Range("BV6:BV11").Value = False
                shData.Range(rng2).Value = True
            Case "Optional Life"
                shData.Range("BV61:BV66").Value = False
                shData.Range(rng3).Value = True
            Case "Optional AD&D"
                shData.Range("BV38:BV43").Value = False
                shData.Range(rng4).Value = True
            Case "Voluntary Life"
                shData.Range("BV93:BV98").Value = False
                shData.Range(rng5).Value = True
            Case "Voluntary AD&D"
                shData.Range("BV70:BV75").Value = False
                shData.Range(rng6).Value = True
        End Select
        
        If cbName = "cbFlatSCFA" Then
            Call GetVolume
        Else
            Call RemoveVolume
        End If
        
        If cbName = "cbFlatFI" Then
            frmIncrement.Show
            Call GetVolume4Incremental
        Else
            Call RemoveVolume4Incremental
        End If
        
        
        If cbName = "cbClassMCFA" Then
            Call ShowFlatAmountForm
            Call HideSalaryBasedForm
            Call ClearSalaryBasedFormData
        ElseIf cbName = "cbClassMCSB" Then
            Call ShowSalaryBasedForm
            Call HideFlatAmountForm
            Call ClearFlatAmountFormData
        Else
            Call HideFlatAmountForm
            Call HideSalaryBasedForm
        End If
    Else
        Select Case shData.Range("G84").Value
            Case "Basic Life"
                shData.Range(rng1).Value = False
            Case "Basic AD&D"
                shData.Range(rng2).Value = False
            Case "Optional Life"
                shData.Range(rng3).Value = False
            Case "Optional AD&D"
                shData.Range(rng4).Value = False
            Case "Voluntary Life"
                shData.Range(rng5).Value = False
            Case "Voluntary AD&D"
                shData.Range(rng6).Value = False
        End Select
        Call HideFlatAmountForm
        Call ClearFlatAmountFormData
        Call HideSalaryBasedForm
        Call ClearSalaryBasedFormData
        If cbName = "cbFlatSCFA" Then Call RemoveVolume
        If cbName = "cbFlatFI" Then Call RemoveVolume4Incremental
    End If
    Application.EnableEvents = True
End Sub

Sub cbDepSubFA_Click()
    Application.ScreenUpdating = False
    Call DepSubOptions("cbDepSubFA", "BV19", "BV12", "BV51", "BV44", "BV83", "BV76")
End Sub
Sub cbDepSubFI_Click()
    Application.ScreenUpdating = False
    Call DepSubOptions("cbDepSubFI", "BV20", "BV13", "BV52", "BV45", "BV84", "BV77")
    Call HideUnhideIncremental
End Sub
Sub cbDepSubSB_Click()
    Application.ScreenUpdating = False
    Call DepSubOptions("cbDepSubSB", "BV21", "BV14", "BV53", "BV46", "BV85", "BV78")
End Sub

Private Sub DepSubOptions(ByVal cbName As String, ByVal rng1 As String, ByVal rng2 As String, ByVal rng3 As String, ByVal rng4 As String, ByVal rng5 As String, ByVal rng6 As String)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    If shOUO.CheckBoxes(cbName).Value = xlOn Then
        shOUO.CheckBoxes("cbDepSubFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSubFI").Value = xlOff
        shOUO.CheckBoxes("cbDepSubSB").Value = xlOff
        shOUO.CheckBoxes(cbName).Value = xlOn
        
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range("BV19:BV21").Value = False
                shData.Range(rng1).Value = True
            Case "Basic Dep AD&D"
                shData.Range("BV12:BV14").Value = False
                shData.Range(rng2).Value = True
            Case "Optional Dep Life"
                shData.Range("BV51:BV53").Value = False
                shData.Range(rng3).Value = True
            Case "Optional Dep AD&D"
                shData.Range("BV44:BV46").Value = False
                shData.Range(rng4).Value = True
            Case "Voluntary Dep Life"
                shData.Range("BV83:BV85").Value = False
                shData.Range(rng5).Value = True
            Case "Voluntary Dep AD&D"
                shData.Range("BV76:BV78").Value = False
                shData.Range(rng6).Value = True
        End Select
        If cbName = "cbDepSubFA" Then
            Call GetDepVolume(1)
        Else
            Call RemoveDepVolume(1)
        End If
        If cbName = "cbDepSubFI" Then
            frmIncrement.Show
            Call GetDepVolume4Incremental("SUB")
        Else
            Call RemoveDepVolume4Incremental("SUB")
        End If
        
    Else
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range(rng1).Value = False
            Case "Basic Dep AD&D"
                shData.Range(rng2).Value = False
            Case "Optional Dep Life"
                shData.Range(rng3).Value = False
            Case "Optional Dep AD&D"
                shData.Range(rng4).Value = False
            Case "Voluntary Dep Life"
                shData.Range(rng5).Value = False
            Case "Voluntary Dep AD&D"
                shData.Range(rng6).Value = False
        End Select
        If cbName = "cbDepSubFA" Then
            Call RemoveDepVolume(1)
        End If
    End If
    Application.EnableEvents = True
End Sub

Sub cbDepSpsFA_Click()
    Application.ScreenUpdating = False
    Call DepSpsOptions("cbDepSpsFA", "BV22", "BV15", "BV54", "BV47", "BV86", "BV79")
End Sub
Sub cbDepSpsFI_Click()
    Application.ScreenUpdating = False
    Call DepSpsOptions("cbDepSpsFI", "BV23", "BV16", "BV55", "BV48", "BV87", "BV80")
    Call HideUnhideIncremental
End Sub

Private Sub DepSpsOptions(ByVal cbName As String, ByVal rng1 As String, ByVal rng2 As String, ByVal rng3 As String, ByVal rng4 As String, ByVal rng5 As String, ByVal rng6 As String)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If shOUO.CheckBoxes(cbName).Value = xlOn Then
        shOUO.CheckBoxes("cbDepSpsFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSpsFI").Value = xlOff
        shOUO.CheckBoxes(cbName).Value = xlOn
        
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range("BV22:BV23").Value = False
                shData.Range(rng1).Value = True
            Case "Basic Dep AD&D"
                shData.Range("BV15:BV16").Value = False
                shData.Range(rng2).Value = True
            Case "Optional Dep Life"
                shData.Range("BV54:BV55").Value = False
                shData.Range(rng3).Value = True
            Case "Optional Dep AD&D"
                shData.Range("BV47:BV48").Value = False
                shData.Range(rng4).Value = True
            Case "Voluntary Dep Life"
                shData.Range("BV86:BV87").Value = False
                shData.Range(rng5).Value = True
            Case "Voluntary Dep AD&D"
                shData.Range("BV79:BV80").Value = False
                shData.Range(rng6).Value = True
        End Select
        If cbName = "cbDepSpsFA" Then
            Call GetDepVolume(2)
        Else
            Call RemoveDepVolume(2)
        End If
        
        If cbName = "cbDepSpsFI" Then
            frmIncrement.Show
            Call GetDepVolume4Incremental("SPS")
        Else
            Call RemoveDepVolume4Incremental("SPS")
        End If
        
    Else
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range(rng1).Value = False
            Case "Basic Dep AD&D"
                shData.Range(rng2).Value = False
            Case "Optional Dep Life"
                shData.Range(rng3).Value = False
            Case "Optional Dep AD&D"
                shData.Range(rng4).Value = False
            Case "Voluntary Dep Life"
                shData.Range(rng5).Value = False
            Case "Voluntary Dep AD&D"
                shData.Range(rng6).Value = False
        End Select
        If cbName = "cbDepSpsFA" Then
            Call RemoveDepVolume(2)
        End If
    End If
    Application.EnableEvents = True
End Sub

Sub cbDepChdFA_Click()
    Application.ScreenUpdating = False
    Call DepChdOptions("cbDepChdFA", "BV24", "BV17", "BV56", "BV49", "BV88", "BV81")
End Sub
Sub cbDepChdFI_Click()
    Application.ScreenUpdating = False
    Call DepChdOptions("cbDepChdFI", "BV25", "BV18", "BV57", "BV50", "BV89", "BV82")
    Call HideUnhideIncremental
End Sub

Private Sub DepChdOptions(ByVal cbName As String, ByVal rng1 As String, ByVal rng2 As String, ByVal rng3 As String, ByVal rng4 As String, ByVal rng5 As String, ByVal rng6 As String)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If shOUO.CheckBoxes(cbName).Value = xlOn Then
        shOUO.CheckBoxes("cbDepChdFA").Value = xlOff
        shOUO.CheckBoxes("cbDepChdFI").Value = xlOff
        shOUO.CheckBoxes(cbName).Value = xlOn
        
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range("BV24:BV25").Value = False
                shData.Range(rng1).Value = True
            Case "Basic Dep AD&D"
                shData.Range("BV17:BV18").Value = False
                shData.Range(rng2).Value = True
            Case "Optional Dep Life"
                shData.Range("BV56:BV57").Value = False
                shData.Range(rng3).Value = True
            Case "Optional Dep AD&D"
                shData.Range("BV49:BV50").Value = False
                shData.Range(rng4).Value = True
            Case "Voluntary Dep Life"
                shData.Range("BV88:BV89").Value = False
                shData.Range(rng5).Value = True
            Case "Voluntary Dep AD&D"
                shData.Range("BV81:BV82").Value = False
                shData.Range(rng6).Value = True
        End Select
        If cbName = "cbDepChdFA" Then
            Call GetDepVolume(3)
        Else
            Call RemoveDepVolume(3)
        End If
        
        If cbName = "cbDepChdFI" Then
            frmIncrement.Show
            Call GetDepVolume4Incremental("CHD")
        Else
            Call RemoveDepVolume4Incremental("CHD")
        End If
    Else
        Select Case shData.Range("G84").Value
            Case "Basic Dep Life"
                shData.Range(rng1).Value = False
            Case "Basic Dep AD&D"
                shData.Range(rng2).Value = False
            Case "Optional Dep Life"
                shData.Range(rng3).Value = False
            Case "Optional Dep AD&D"
                shData.Range(rng4).Value = False
            Case "Voluntary Dep Life"
                shData.Range(rng5).Value = False
            Case "Voluntary Dep AD&D"
                shData.Range(rng6).Value = False
        End Select
        If cbName = "cbDepChdFA" Then
            Call RemoveDepVolume(3)
        End If
    End If
    Application.EnableEvents = True
End Sub

Private Sub GetVolume()
    Application.ScreenUpdating = False
    vol = Application.InputBox("Enter Volume for Flat Amount", "", 0)
    If vol = False Then vol = 0
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            shOUO.Range("FVBL").Value = vol
        Case "Basic AD&D"
            shOUO.Range("FVBA").Value = vol
        Case "Optional Life"
            shOUO.Range("FVOL").Value = vol
        Case "Optional AD&D"
            shOUO.Range("FVOA").Value = vol
        Case "Voluntary Life"
            shOUO.Range("FVVL").Value = vol
        Case "Voluntary AD&D"
            shOUO.Range("FVVA").Value = vol
    End Select
    Call HideUnhideVolume
End Sub

Private Sub RemoveVolume()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            shOUO.Range("FVBL").Value = ""
        Case "Basic AD&D"
            shOUO.Range("FVBA").Value = ""
        Case "Optional Life"
            shOUO.Range("FVOL").Value = ""
        Case "Optional AD&D"
            shOUO.Range("FVOA").Value = ""
        Case "Voluntary Life"
            shOUO.Range("FVVL").Value = ""
        Case "Voluntary AD&D"
            shOUO.Range("FVVA").Value = ""
    End Select
    Call HideUnhideVolume
End Sub

Public Sub GetVolume4Incremental()
    Application.ScreenUpdating = False
    vol = shData.Range("GE2").Value
    vmx = shData.Range("GE3").Value
    If vol = False Or vol = "" Then vol = 0
    If vmx = False Or vmx = "" Then vmx = 0
    Dim ddCol As Long: ddCol = ColumnPerNameData(shData.Range("G84").Value)
    Dim eeCol As String: eeCol = Col_Letter(ddCol)
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            shOUO.Range("IVBLI").Value = vol
            shOUO.Range("IVBLM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Basic AD&D"
            shOUO.Range("IVBAI").Value = vol
            shOUO.Range("IVBAM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Optional Life"
            shOUO.Range("IVOLI").Value = vol
            shOUO.Range("IVOLM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Optional AD&D"
            shOUO.Range("IVOAI").Value = vol
            shOUO.Range("IVOAM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Voluntary Life"
            shOUO.Range("IVVLI").Value = vol
            shOUO.Range("IVVLM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Voluntary AD&D"
            shOUO.Range("IVVAI").Value = vol
            shOUO.Range("IVVAM").Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
    End Select
    Call HideUnhideIncremental
End Sub



Private Sub RemoveVolume4Incremental()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            shOUO.Range("IVBLI").Value = ""
            shOUO.Range("IVBLM").Value = ""
            lr = shData.Range("GG" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GG4:GG" & lr).ClearContents
        Case "Basic AD&D"
            shOUO.Range("IVBAI").Value = ""
            shOUO.Range("IVBAM").Value = ""
            lr = shData.Range("GJ" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GJ4:GJ" & lr).ClearContents
        Case "Optional Life"
            shOUO.Range("IVOLI").Value = ""
            shOUO.Range("IVOLM").Value = ""
            lr = shData.Range("GH" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GH4:GH" & lr).ClearContents
        Case "Optional AD&D"
            shOUO.Range("IVOAI").Value = ""
            shOUO.Range("IVOAM").Value = ""
            lr = shData.Range("GK" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GK4:GK" & lr).ClearContents
        Case "Voluntary Life"
            shOUO.Range("IVVLI").Value = ""
            shOUO.Range("IVVLM").Value = ""
            lr = shData.Range("GI" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GI4:GI" & lr).ClearContents
        Case "Voluntary AD&D"
            shOUO.Range("IVVAI").Value = ""
            shOUO.Range("IVVAM").Value = ""
            lr = shData.Range("GL" & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range("GL4:GL" & lr).ClearContents
    End Select
    Call HideUnhideIncremental
End Sub

Private Sub HideUnhideVolume()
    shOUO.Unprotect
    Application.ScreenUpdating = False
    If shOUO.Range("FVBL").Value = "" And _
        shOUO.Range("FVOL").Value = "" And _
        shOUO.Range("FVVL").Value = "" And _
        shOUO.Range("FVBA").Value = "" And _
        shOUO.Range("FVOA").Value = "" And _
        shOUO.Range("FVVA").Value = "" And _
        shOUO.Range("FVBDL1").Value = "" And _
        shOUO.Range("FVBDL2").Value = "" And _
        shOUO.Range("FVBDL3").Value = "" And _
        shOUO.Range("FVBDA1").Value = "" And _
        shOUO.Range("FVBDA2").Value = "" And _
        shOUO.Range("FVBDA3").Value = "" And _
        shOUO.Range("FVODL1").Value = "" And _
        shOUO.Range("FVODL2").Value = "" And _
        shOUO.Range("FVODL3").Value = "" And _
        shOUO.Range("FVODA1").Value = "" And _
        shOUO.Range("FVODA2").Value = "" And _
        shOUO.Range("FVODA3").Value = "" And _
        shOUO.Range("FVVDL1").Value = "" And _
        shOUO.Range("FVVDL2").Value = "" And _
        shOUO.Range("FVVDL3").Value = "" And _
        shOUO.Range("FVVDA1").Value = "" And _
        shOUO.Range("FVVDA2").Value = "" And _
        shOUO.Range("FVVDA3").Value = "" Then
        
        shOUO.Range("FV_Section").EntireColumn.Hidden = True
    Else
        shOUO.Range("FV_Section").EntireColumn.Hidden = False
    End If
    shOUO.Protect
End Sub

Public Sub HideUnhideIncrementalFromOutside()
    Call HideUnhideIncremental
End Sub

Private Sub HideUnhideIncremental()
    shOUO.Unprotect
    Application.ScreenUpdating = False
    If (shOUO.Range("IVBLI").Value = "" Or shOUO.Range("IVBLI").Value = 0) And (shOUO.Range("IVBLM").Value = "" Or shOUO.Range("IVBLM").Value = 0) And (shOUO.Range("IVOLI").Value = "" Or shOUO.Range("IVOLI").Value = 0) And (shOUO.Range("IVOLM").Value = "" Or shOUO.Range("IVOLM").Value = 0) And (shOUO.Range("IVVLI").Value = "" Or shOUO.Range("IVVLI").Value = 0) And (shOUO.Range("IVVLM").Value = "" Or shOUO.Range("IVVLM").Value = 0) And _
        (shOUO.Range("IVBAI").Value = "" Or shOUO.Range("IVBAI").Value = 0) And (shOUO.Range("IVBAM").Value = "" Or shOUO.Range("IVBAM").Value = 0) And (shOUO.Range("IVOAI").Value = "" Or shOUO.Range("IVOAI").Value = 0) And (shOUO.Range("IVOAM").Value = "" Or shOUO.Range("IVOAM").Value = 0) And (shOUO.Range("IVVAI").Value = "" Or shOUO.Range("IVVAI").Value = 0) And (shOUO.Range("IVVAM").Value = "" Or shOUO.Range("IVVAM").Value = 0) And _
        (shOUO.Range("IVBDLI1").Value = "" Or shOUO.Range("IVBDLI1").Value = 0) And (shOUO.Range("IVBDLM1").Value = "" Or shOUO.Range("IVBDLM1").Value = 0) And (shOUO.Range("IVBDLI2").Value = "" Or shOUO.Range("IVBDLI2").Value = 0) And (shOUO.Range("IVBDLM2").Value = "" Or shOUO.Range("IVBDLM2").Value = 0) And (shOUO.Range("IVBDLI3").Value = "" Or shOUO.Range("IVBDLI3").Value = 0) And (shOUO.Range("IVBDLM3").Value = "" Or shOUO.Range("IVBDLM3").Value = 0) And _
        (shOUO.Range("IVBDAI1").Value = "" Or shOUO.Range("IVBDAI1").Value = 0) And (shOUO.Range("IVBDAM1").Value = "" Or shOUO.Range("IVBDAM1").Value = 0) And (shOUO.Range("IVBDAI2").Value = "" Or shOUO.Range("IVBDAI2").Value = 0) And (shOUO.Range("IVBDAM2").Value = "" Or shOUO.Range("IVBDAM2").Value = 0) And (shOUO.Range("IVBDAI3").Value = "" Or shOUO.Range("IVBDAI3").Value = 0) And (shOUO.Range("IVBDAM3").Value = "" Or shOUO.Range("IVBDAM3").Value = 0) And _
        (shOUO.Range("IVODLI1").Value = "" Or shOUO.Range("IVODLI1").Value = 0) And (shOUO.Range("IVODLM1").Value = "" Or shOUO.Range("IVODLM1").Value = 0) And (shOUO.Range("IVODLI2").Value = "" Or shOUO.Range("IVODLI2").Value = 0) And (shOUO.Range("IVODLM2").Value = "" Or shOUO.Range("IVODLM2").Value = 0) And (shOUO.Range("IVODLI3").Value = "" Or shOUO.Range("IVODLI3").Value = 0) And (shOUO.Range("IVODLM3").Value = "" Or shOUO.Range("IVODLM3").Value = 0) And _
        (shOUO.Range("IVODAI1").Value = "" Or shOUO.Range("IVODAI1").Value = 0) And (shOUO.Range("IVODAM1").Value = "" Or shOUO.Range("IVODAM1").Value = 0) And (shOUO.Range("IVODAI2").Value = "" Or shOUO.Range("IVODAI2").Value = 0) And (shOUO.Range("IVODAM2").Value = "" Or shOUO.Range("IVODAM2").Value = 0) And (shOUO.Range("IVODAI3").Value = "" Or shOUO.Range("IVODAI3").Value = 0) And (shOUO.Range("IVODAM3").Value = "" Or shOUO.Range("IVODAM3").Value = 0) And _
        (shOUO.Range("IVVDLI1").Value = "" Or shOUO.Range("IVVDLI1").Value = 0) And (shOUO.Range("IVVDLM1").Value = "" Or shOUO.Range("IVVDLM1").Value = 0) And (shOUO.Range("IVVDLI2").Value = "" Or shOUO.Range("IVVDLI2").Value = 0) And (shOUO.Range("IVVDLM2").Value = "" Or shOUO.Range("IVVDLM2").Value = 0) And (shOUO.Range("IVVDLI3").Value = "" Or shOUO.Range("IVVDLI3").Value = 0) And (shOUO.Range("IVVDLM3").Value = "" Or shOUO.Range("IVVDLM3").Value = 0) And _
        (shOUO.Range("IVVDAI1").Value = "" Or shOUO.Range("IVVDAI1").Value = 0) And (shOUO.Range("IVVDAM1").Value = "" Or shOUO.Range("IVVDAM1").Value = 0) And (shOUO.Range("IVVDAI2").Value = "" Or shOUO.Range("IVVDAI2").Value = 0) And (shOUO.Range("IVVDAM2").Value = "" Or shOUO.Range("IVVDAM2").Value = 0) And (shOUO.Range("IVVDAI3").Value = "" Or shOUO.Range("IVVDAI3").Value = 0) And (shOUO.Range("IVVDAM3").Value = "" Or shOUO.Range("IVVDAM3").Value = 0) Then
        
        shOUO.Range("IV_Section").EntireColumn.Hidden = True
    Else
        shOUO.Range("IV_Section").EntireColumn.Hidden = False
    End If
    shOUO.Protect
End Sub

Private Sub GetDepVolume(ByVal row As Integer)
    Application.ScreenUpdating = False
    vol = Application.InputBox("Enter Volume for Flat Amount", "", 0)
    If vol = False Then vol = 0
    Select Case shData.Range("G84").Value
        Case "Basic Dep Life"
            shOUO.Range("FVBDL" & row).Value = vol
        Case "Basic Dep AD&D"
            shOUO.Range("FVBDA" & row).Value = vol
        Case "Optional Dep Life"
            shOUO.Range("FVODL" & row).Value = vol
        Case "Optional Dep AD&D"
            shOUO.Range("FVODA" & row).Value = vol
        Case "Voluntary Dep Life"
            shOUO.Range("FVVDL" & row).Value = vol
        Case "Voluntary Dep AD&D"
            shOUO.Range("FVVDA" & row).Value = vol
    End Select
    Call HideUnhideVolume
End Sub

Private Sub RemoveDepVolume(ByVal row As Integer)
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Dep Life"
            shOUO.Range("FVBDL" & row).Value = vol
        Case "Basic Dep AD&D"
            shOUO.Range("FVBDA" & row).Value = vol
        Case "Optional Dep Life"
            shOUO.Range("FVODL" & row).Value = vol
        Case "Optional Dep AD&D"
            shOUO.Range("FVODA" & row).Value = vol
        Case "Voluntary Dep Life"
            shOUO.Range("FVVDL" & row).Value = vol
        Case "Voluntary Dep AD&D"
            shOUO.Range("FVVDA" & row).Value = vol
    End Select
    Call HideUnhideVolume
End Sub

Public Sub GetDepVolume4Incremental(ByVal cbName As String)
Dim row As Long
    Application.ScreenUpdating = False
    vol = shData.Range("GE2").Value
    vmx = shData.Range("GE3").Value
    
    If vol = False Or vol = "" Then vol = 0
    If vmx = False Or vmx = "" Then vmx = 0
    Dim ddCol As Long: ddCol = ColumnPerNameData(shData.Range("G84").Value)
    Select Case cbName
        Case "SUB":
            ddCol = ddCol
            row = 1
        Case "SPS":
            ddCol = ddCol + 1
            row = 2
        Case "CHD":
            ddCol = ddCol + 2
            row = 3
    End Select
    Dim eeCol As String: eeCol = Col_Letter(ddCol)
    Select Case shData.Range("G84").Value
        Case "Basic Dep Life"
            shOUO.Range("IVBDLI" & row).Value = vol
            shOUO.Range("IVBDLM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Basic Dep AD&D"
            shOUO.Range("IVBDAI" & row).Value = vol
            shOUO.Range("IVBDAM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Optional Dep Life"
            shOUO.Range("IVODLI" & row).Value = vol
            shOUO.Range("IVODLM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Optional Dep AD&D"
            shOUO.Range("IVODAI" & row).Value = vol
            shOUO.Range("IVODAM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Voluntary Dep Life"
            shOUO.Range("IVVDLI" & row).Value = vol
            shOUO.Range("IVVDLM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
        Case "Voluntary Dep AD&D"
            shOUO.Range("IVVDAI" & row).Value = vol
            shOUO.Range("IVVDAM" & row).Value = vmx
            Call PopulateIncrementalDropDown(ddCol, eeCol, vol, vmx)
    End Select
    Call HideUnhideIncremental
    shData.Range("GE2").ClearContents
    shData.Range("GE3").ClearContents
End Sub

Private Sub PopulateIncrementalDropDown(ByVal col As Long, ByVal colx As String, ByVal vol As Long, ByVal vmx As Long)
    lr = shData.Range(colx & Rows.Count).End(xlUp).row
    If lr > 3 Then shData.Range(colx & "4:" & colx & lr).ClearContents
    i = 4
    
    sumVol = 0 ' sub pass
    Do
        sumVol = sumVol + vol
        If sumVol > vmx Then sumVol = vmx
        shData.Range(colx & i).Value = sumVol
        i = i + 1
    Loop While sumVol < vmx
    
End Sub

Private Sub RemoveDepVolume4Incremental(ByVal cbName As String)
    Application.ScreenUpdating = False
    Dim ddCol As Long: ddCol = ColumnPerNameData(shData.Range("G84").Value)
    Select Case cbName
        Case "SUB": ddCol = ddCol
        Case "SPS": ddCol = ddCol + 1
        Case "Chd": ddCol = ddCol + 2
    End Select
    Dim eeCol As String: eeCol = Col_Letter(ddCol)
    Select Case shData.Range("G84").Value
        Case "Basic Dep Life"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
            If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
        Case "Basic Dep AD&D"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
             If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
        Case "Optional Dep Life"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
             If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
        Case "Optional Dep AD&D"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
             If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
        Case "Voluntary Dep Life"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
             If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
        Case "Voluntary Dep AD&D"
            lr = shData.Range(eeCol & Rows.Count).End(xlUp).row
             If lr > 3 Then shData.Range(eeCol & "4:" & eeCol & lr).ClearContents
    End Select
    Call HideUnhideIncremental
    shData.Range("GE2").ClearContents
    shData.Range("GE3").ClearContents
End Sub

Sub PopulateFlatAmountData()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call FlatAmountDataSubProcedure(shData.Range("CE4"))
        Case "Basic AD&D"
            Call FlatAmountDataSubProcedure(shData.Range("CG4"))
        Case "Optional Life"
            Call FlatAmountDataSubProcedure(shData.Range("CI4"))
        Case "Optional AD&D"
            Call FlatAmountDataSubProcedure(shData.Range("CK4"))
        Case "Voluntary Life"
            Call FlatAmountDataSubProcedure(shData.Range("CM4"))
        Case "Voluntary AD&D"
            Call FlatAmountDataSubProcedure(shData.Range("CO4"))
    End Select
    MsgBox "Flat Amount data is saved successfully.", , "Success"
End Sub

Private Sub FlatAmountDataSubProcedure(ByRef rng As Range)
    Application.ScreenUpdating = False
    For i = 1 To 6
        rng.Offset(i - 1, 0).Value = shOUO.Shapes.Range(Array("tbClassDesc0" & i)).TextFrame2.TextRange.Characters.text
    Next i
    For i = 1 To 6
        rng.Offset(i - 1, 1).Value = shOUO.Shapes.Range(Array("tbAmount0" & i)).TextFrame2.TextRange.Characters.text
    Next i
    
    shData.Sort.SortFields.Clear
    shData.Sort.SortFields.Add Key:=rng, SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shData.Sort
        .SetRange rng.Resize(6, 2)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
                      
    Call LoadFlatAmountDataToForm(rng)
            
End Sub

Sub PopulateSalaryBasedData()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call SalaryBasedSubProcedure(shData.Range("CS4"))
        Case "Basic AD&D"
            Call SalaryBasedSubProcedure(shData.Range("CU4"))
        Case "Optional Life"
            Call SalaryBasedSubProcedure(shData.Range("CW4"))
        Case "Optional AD&D"
            Call SalaryBasedSubProcedure(shData.Range("CY4"))
        Case "Voluntary Life"
            Call SalaryBasedSubProcedure(shData.Range("DA4"))
        Case "Voluntary AD&D"
            Call SalaryBasedSubProcedure(shData.Range("DC4"))
    End Select
    MsgBox "Salary Based data is saved successfully.", , "Success"
End Sub

Private Sub SalaryBasedSubProcedure(ByRef rng As Range)
    Application.ScreenUpdating = False
    For i = 1 To 6
        rng.Offset(i - 1, 0).Value = shOUO.Shapes.Range(Array("tbMult0" & i)).TextFrame2.TextRange.Characters.text
    Next i
    For i = 1 To 6
        rng.Offset(i - 1, 1).Value = shOUO.Shapes.Range(Array("tbClassName0" & i)).TextFrame2.TextRange.Characters.text
    Next i
    
    shData.Sort.SortFields.Clear
    shData.Sort.SortFields.Add Key:=rng.Offset(0, 1), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shData.Sort
        .SetRange rng.Resize(6, 2)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
                      
    Call LoadSalaryBasedDataToForm(rng)
            
End Sub

Private Sub ClearFlatAmountFormData()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call ClearSixByTwo(shData.Range("CE4"))
        Case "Basic AD&D"
            Call ClearSixByTwo(shData.Range("CG4"))
        Case "Optional Life"
            Call ClearSixByTwo(shData.Range("CI4"))
        Case "Optional AD&D"
            Call ClearSixByTwo(shData.Range("CK4"))
        Case "Voluntary Life"
            Call ClearSixByTwo(shData.Range("CM4"))
        Case "Voluntary AD&D"
            Call ClearSixByTwo(shData.Range("CO4"))
    End Select
End Sub

Private Sub ClearSalaryBasedFormData()
    Application.ScreenUpdating = False
    Select Case shData.Range("G84").Value
        Case "Basic Life"
            Call ClearSixByTwo(shData.Range("CS4"))
        Case "Basic AD&D"
            Call ClearSixByTwo(shData.Range("CU4"))
        Case "Optional Life"
            Call ClearSixByTwo(shData.Range("CW4"))
        Case "Optional AD&D"
            Call ClearSixByTwo(shData.Range("CY4"))
        Case "Voluntary Life"
            Call ClearSixByTwo(shData.Range("DA4"))
        Case "Voluntary AD&D"
            Call ClearSixByTwo(shData.Range("DC4"))
    End Select
End Sub

Private Sub ClearSixByTwo(ByRef rng As Range)
    Application.ScreenUpdating = False
    rng.Resize(6, 2).ClearContents
End Sub


Attribute VB_Name = "MatchSuffix"
'************************************************************************************
'* Match Suffix procedures                                                          *
'************************************************************************************

Const prodListSize As Integer = 25
Sub Match_Suffix_Click()
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    'Flag if the product type is selected
    shData.Range("BH2:BH8").Value = shData.Range("E2:E8").Value
    'show how many product are selected per category
    shData.Range("BI2").Value = Application.WorksheetFunction.CountA(shOUO.Range("D6:D30"))
    shData.Range("BI3").Value = Application.WorksheetFunction.CountA(shOUO.Range("F6:F30"))
    shData.Range("BI4").Value = Application.WorksheetFunction.CountA(shOUO.Range("J6:J30"))
    shData.Range("BI7").Value = Application.WorksheetFunction.CountA(shOUO.Range("Q6:Q30"))
    shData.Range("BI6").Value = Application.WorksheetFunction.CountA(shOUO.Range("L6:L30"))
    shData.Range("BI5").Value = Application.WorksheetFunction.CountA(shOUO.Range("N6:N30"))
    shData.Range("BI8").Value = Application.WorksheetFunction.CountA(shOUO.Range("S6:S30"))
    For i = 2 To 8
        If shData.Range("BH" & i).Value = True Then
            State = shData.Range("state").Value
            prod = Trim(shData.Range("BG" & i).Value)
            frmMatchSuffix.lblStateAndProd.caption = UCase(State & " " & prod & " selection")
            Select Case prod
                Case "Medical"
                    Call InitializeMedical
                Case "Dental"
                    Call InitializeDental
                Case "Vision"
                    Call InitializeVision
                Case "FSA"
                    Call InitializeFSA
                Case "Supplemental"
                    Call InitializeSupplemental
                Case "Life"
                    Call InitializeLife
                Case "Disability"
                    Call InitializeDisability
            End Select
        End If
        Call CarryoverSuffixesSubProcedure(prod)
        If prod = "Life" Then CarryoverSuffixesADD
    Next i
    Application.EnableEvents = True
End Sub

Sub InitializeMedical()
    Call InitializeProduct("BI2", "D")
End Sub

Sub InitializeDental()
    Call InitializeProduct("BI3", "F")
End Sub

Sub InitializeVision()
    Call InitializeProduct("BI4", "J")
End Sub

Sub InitializeFSA()
    Call InitializeProduct("BI7", "Q")
End Sub

Sub InitializeSupplemental()
    Call InitializeProduct("BI8", "S")
End Sub

Sub InitializeLife()
    Call InitializeProduct("BI5", "N")
End Sub

Sub InitializeDisability()
    Call InitializeProduct("BI6", "L")
End Sub

'Top of buttons = 80
'Height of buttons = 25
Sub InitializeProduct(ByVal rngBI As String, ByVal colInOUO As String)
    Application.ScreenUpdating = False
    If shData.Range(rngBI).Value > 0 Then
        shData.Range(rngBI).Offset(0, -1).Value = "OPENED"
        
        Dim prodCount As Integer: prodCount = shData.Range(rngBI).Value
        
        Select Case rngBI
            Case "BI2"
                shData.Range("G76").Value = "Medical"
            Case "BI3"
                shData.Range("G76").Value = "Dental"
            Case "BI4"
                shData.Range("G76").Value = "Vision"
            Case "BI5"
                shData.Range("G76").Value = "Life"
            Case "BI6"
                shData.Range("G76").Value = "Disability"
            Case "BI7"
                shData.Range("G76").Value = "FSA"
            Case "BI8"
                shData.Range("G76").Value = "Supplemental"
        End Select
            
        Dim labelArray(25) As Object
        Dim txtboxArray(25) As Object
        Dim cmdbtnArray(25) As Object
        Dim eraseBtnArray(25) As Object
        Dim showBtnArray(25) As Object
        Dim TopOfSubmitButton As Long
        Dim HeightOfForm As Long
        
        Call PopulateArrays(labelArray, txtboxArray, cmdbtnArray, eraseBtnArray, showBtnArray)
        
        For i = 1 To prodCount
            labelArray(i).Visible = True
            txtboxArray(i).Visible = True
            cmdbtnArray(i).Visible = True
            eraseBtnArray(i).Visible = True
            showBtnArray(i).Visible = True
            labelArray(i).caption = Trim(shOUO.Range(colInOUO & i + 5).Value)
            Call PopulateTextbox(labelArray(i), txtboxArray, i)
            
        Next i
        For i = prodCount + 1 To prodListSize
            labelArray(i).Visible = False
            txtboxArray(i).Visible = False
            cmdbtnArray(i).Visible = False
            eraseBtnArray(i).Visible = False
            showBtnArray(i).Visible = False
        Next i
        
        'Resize the form
        TopOfSubmitButton = (prodCount * 25) + 105
        HeightOfForm = TopOfSubmitButton + 65
        frmMatchSuffix.cmdSubmutSuffix.Top = TopOfSubmitButton
        frmMatchSuffix.Height = HeightOfForm
        
        frmMatchSuffix.Show
    End If
End Sub

Private Sub PopulateArrays(ByRef la() As Object, ByRef ta() As Object, ByRef ca() As Object, ByRef ea() As Object, ByRef sa() As Object)
'Label Array
    Set la(1) = frmMatchSuffix.lblSfx01
    Set la(2) = frmMatchSuffix.lblSfx02
    Set la(3) = frmMatchSuffix.lblSfx03
    Set la(4) = frmMatchSuffix.lblSfx04
    Set la(5) = frmMatchSuffix.lblSfx05
    Set la(6) = frmMatchSuffix.lblSfx06
    Set la(7) = frmMatchSuffix.lblSfx07
    Set la(8) = frmMatchSuffix.lblSfx08
    Set la(9) = frmMatchSuffix.lblSfx09
    Set la(10) = frmMatchSuffix.lblSfx10
    Set la(11) = frmMatchSuffix.lblSfx11
    Set la(12) = frmMatchSuffix.lblSfx12
    Set la(13) = frmMatchSuffix.lblSfx13
    Set la(14) = frmMatchSuffix.lblSfx14
    Set la(15) = frmMatchSuffix.lblSfx15
    Set la(16) = frmMatchSuffix.lblSfx16
    Set la(17) = frmMatchSuffix.lblSfx17
    Set la(18) = frmMatchSuffix.lblSfx18
    Set la(19) = frmMatchSuffix.lblSfx19
    Set la(20) = frmMatchSuffix.lblSfx20
    Set la(21) = frmMatchSuffix.lblSfx21
    Set la(22) = frmMatchSuffix.lblSfx22
    Set la(23) = frmMatchSuffix.lblSfx23
    Set la(24) = frmMatchSuffix.lblSfx24
    Set la(25) = frmMatchSuffix.lblSfx25
    
'Textbox Array
    Set ta(1) = frmMatchSuffix.tbSfx01
    Set ta(2) = frmMatchSuffix.tbSfx02
    Set ta(3) = frmMatchSuffix.tbSfx03
    Set ta(4) = frmMatchSuffix.tbSfx04
    Set ta(5) = frmMatchSuffix.tbSfx05
    Set ta(6) = frmMatchSuffix.tbSfx06
    Set ta(7) = frmMatchSuffix.tbSfx07
    Set ta(8) = frmMatchSuffix.tbSfx08
    Set ta(9) = frmMatchSuffix.tbSfx09
    Set ta(10) = frmMatchSuffix.tbSfx10
    Set ta(11) = frmMatchSuffix.tbSfx11
    Set ta(12) = frmMatchSuffix.tbSfx12
    Set ta(13) = frmMatchSuffix.tbSfx13
    Set ta(14) = frmMatchSuffix.tbSfx14
    Set ta(15) = frmMatchSuffix.tbSfx15
    Set ta(16) = frmMatchSuffix.tbSfx16
    Set ta(17) = frmMatchSuffix.tbSfx17
    Set ta(18) = frmMatchSuffix.tbSfx18
    Set ta(19) = frmMatchSuffix.tbSfx19
    Set ta(20) = frmMatchSuffix.tbSfx20
    Set ta(21) = frmMatchSuffix.tbSfx21
    Set ta(22) = frmMatchSuffix.tbSfx22
    Set ta(23) = frmMatchSuffix.tbSfx23
    Set ta(24) = frmMatchSuffix.tbSfx24
    Set ta(25) = frmMatchSuffix.tbSfx25
    
'CommandButton Suffix Array
    Set ca(1) = frmMatchSuffix.cmdMultiSuffix01
    Set ca(2) = frmMatchSuffix.cmdMultiSuffix02
    Set ca(3) = frmMatchSuffix.cmdMultiSuffix03
    Set ca(4) = frmMatchSuffix.cmdMultiSuffix04
    Set ca(5) = frmMatchSuffix.cmdMultiSuffix05
    Set ca(6) = frmMatchSuffix.cmdMultiSuffix06
    Set ca(7) = frmMatchSuffix.cmdMultiSuffix07
    Set ca(8) = frmMatchSuffix.cmdMultiSuffix08
    Set ca(9) = frmMatchSuffix.cmdMultiSuffix09
    Set ca(10) = frmMatchSuffix.cmdMultiSuffix10
    Set ca(11) = frmMatchSuffix.cmdMultiSuffix11
    Set ca(12) = frmMatchSuffix.cmdMultiSuffix12
    Set ca(13) = frmMatchSuffix.cmdMultiSuffix13
    Set ca(14) = frmMatchSuffix.cmdMultiSuffix14
    Set ca(15) = frmMatchSuffix.cmdMultiSuffix15
    Set ca(16) = frmMatchSuffix.cmdMultiSuffix16
    Set ca(17) = frmMatchSuffix.cmdMultiSuffix17
    Set ca(18) = frmMatchSuffix.cmdMultiSuffix18
    Set ca(19) = frmMatchSuffix.cmdMultiSuffix19
    Set ca(20) = frmMatchSuffix.cmdMultiSuffix20
    Set ca(21) = frmMatchSuffix.cmdMultiSuffix21
    Set ca(22) = frmMatchSuffix.cmdMultiSuffix22
    Set ca(23) = frmMatchSuffix.cmdMultiSuffix23
    Set ca(24) = frmMatchSuffix.cmdMultiSuffix24
    Set ca(25) = frmMatchSuffix.cmdMultiSuffix25
    
'CommandButton Clear Array
    Set ea(1) = frmMatchSuffix.cmdMultiClear01
    Set ea(2) = frmMatchSuffix.cmdMultiClear02
    Set ea(3) = frmMatchSuffix.cmdMultiClear03
    Set ea(4) = frmMatchSuffix.cmdMultiClear04
    Set ea(5) = frmMatchSuffix.cmdMultiClear05
    Set ea(6) = frmMatchSuffix.cmdMultiClear06
    Set ea(7) = frmMatchSuffix.cmdMultiClear07
    Set ea(8) = frmMatchSuffix.cmdMultiClear08
    Set ea(9) = frmMatchSuffix.cmdMultiClear09
    Set ea(10) = frmMatchSuffix.cmdMultiClear10
    Set ea(11) = frmMatchSuffix.cmdMultiClear11
    Set ea(12) = frmMatchSuffix.cmdMultiClear12
    Set ea(13) = frmMatchSuffix.cmdMultiClear13
    Set ea(14) = frmMatchSuffix.cmdMultiClear14
    Set ea(15) = frmMatchSuffix.cmdMultiClear15
    Set ea(16) = frmMatchSuffix.cmdMultiClear16
    Set ea(17) = frmMatchSuffix.cmdMultiClear17
    Set ea(18) = frmMatchSuffix.cmdMultiClear18
    Set ea(19) = frmMatchSuffix.cmdMultiClear19
    Set ea(20) = frmMatchSuffix.cmdMultiClear20
    Set ea(21) = frmMatchSuffix.cmdMultiClear21
    Set ea(22) = frmMatchSuffix.cmdMultiClear22
    Set ea(23) = frmMatchSuffix.cmdMultiClear23
    Set ea(24) = frmMatchSuffix.cmdMultiClear24
    Set ea(25) = frmMatchSuffix.cmdMultiClear25
    
    'CommandButton Show Suffix Array
    Set sa(1) = frmMatchSuffix.cmdMultiShow01
    Set sa(2) = frmMatchSuffix.cmdMultiShow02
    Set sa(3) = frmMatchSuffix.cmdMultiShow03
    Set sa(4) = frmMatchSuffix.cmdMultiShow04
    Set sa(5) = frmMatchSuffix.cmdMultiShow05
    Set sa(6) = frmMatchSuffix.cmdMultiShow06
    Set sa(7) = frmMatchSuffix.cmdMultiShow07
    Set sa(8) = frmMatchSuffix.cmdMultiShow08
    Set sa(9) = frmMatchSuffix.cmdMultiShow09
    Set sa(10) = frmMatchSuffix.cmdMultiShow10
    Set sa(11) = frmMatchSuffix.cmdMultiShow11
    Set sa(12) = frmMatchSuffix.cmdMultiShow12
    Set sa(13) = frmMatchSuffix.cmdMultiShow13
    Set sa(14) = frmMatchSuffix.cmdMultiShow14
    Set sa(15) = frmMatchSuffix.cmdMultiShow15
    Set sa(16) = frmMatchSuffix.cmdMultiShow16
    Set sa(17) = frmMatchSuffix.cmdMultiShow17
    Set sa(18) = frmMatchSuffix.cmdMultiShow18
    Set sa(19) = frmMatchSuffix.cmdMultiShow19
    Set sa(20) = frmMatchSuffix.cmdMultiShow20
    Set sa(21) = frmMatchSuffix.cmdMultiShow21
    Set sa(22) = frmMatchSuffix.cmdMultiShow22
    Set sa(23) = frmMatchSuffix.cmdMultiShow23
    Set sa(24) = frmMatchSuffix.cmdMultiShow24
    Set sa(25) = frmMatchSuffix.cmdMultiShow25
End Sub

Private Sub PopulateTextbox(ByVal lbl As String, ByRef tb() As Object, ByVal i As Integer)
    Application.ScreenUpdating = False
    Dim rng As String: rng = ""
    Select Case shData.Range("G76").Value
        Case "Medical"
            rng = "AJ:AK"
        Case "Dental"
            rng = "AM:AN"
        Case "Vision"
            rng = "AP:AQ"
        Case "FSA"
            rng = "NE:NF"
       Case "Supplemental"
            rng = "NN:NO"
        Case "Disability"
            rng = "AS:AT"
    End Select
    
    On Error Resume Next
    If rng <> "" Then
        tb(i).text = WorksheetFunction.VLookup(Trim(lbl), shData.Range(rng), 2, 0)
        If tb(i).text = "Multiple" Then
            tb(i).Enabled = False
        Else
            tb(i).Enabled = True
            'MsgBox tb(i).Text
        End If
    Else 'Life or AD&D
        'Life
        tb(i).text = WorksheetFunction.VLookup(Trim(lbl), shData.Range("AV:AW"), 2, 0)
        If tb(i).text = "Multiple" Then
            tb(i).Enabled = False
        Else
            tb(i).Enabled = True
        End If
        If tb(i).text = "" Then 'AD&D
            tb(i).text = WorksheetFunction.VLookup(Trim(lbl), shData.Range("AY:AZ"), 2, 0)
            If tb(i).text = "Multiple" Then
                tb(i).Enabled = False
            Else
                tb(i).Enabled = True
            End If
        End If
    End If
End Sub
Sub CarryoverSuffixesADD()
    Call CarryoverSuffixesSubProcedure("AD&D")
End Sub
Sub CarryoverSuffixes()
    shData.Range("DP3:EG" & Rows.Count).ClearContents
    
    Call CarryoverSuffixesSubProcedure("Medical")
    Call CarryoverSuffixesSubProcedure("Dental")
    Call CarryoverSuffixesSubProcedure("Vision")
    Call CarryoverSuffixesSubProcedure("FSA")
    Call CarryoverSuffixesSubProcedure("Disability")
    Call CarryoverSuffixesSubProcedure("Life")
    Call CarryoverSuffixesSubProcedure("AD&D")
End Sub

Sub CarryoverSuffixesSubProcedure(ByVal prod As String)
    Select Case prod
        Case "Medical"
            shData.Range("DP3:DR" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AJ", "AK", "DP", "DQ", "DR")
        Case "Dental"
            shData.Range("DS3:DU" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AM", "AN", "DS", "DT", "DU")
        Case "Vision"
            shData.Range("DV3:DX" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AP", "AQ", "DV", "DW", "DX")
        Case "FSA"
            shData.Range("NH3:NJ" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "NE", "NF", "NH", "NI", "NJ")
        Case "Supplemental"
            shData.Range("NQ3:NS" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "NN", "NO", "NQ", "NR", "NS")
        Case "Disability"
            shData.Range("DY3:EA" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AS", "AT", "DY", "DZ", "EA")
        Case "Life"
            shData.Range("EB3:ED" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AV", "AW", "EB", "EC", "ED")
        Case "AD&D"
            shData.Range("EE3:EG" & Rows.Count).ClearContents
            Call CarryoverSuffixesPerProduct(prod, "AY", "AZ", "EE", "EF", "EG")
    End Select
End Sub


Sub CarryoverSuffixesPerProduct(ByVal prod As String, ByVal colSrcPlan As String, ByVal colSrcSfx As String, ByVal colDestPlan As String, ByVal colDestSfx As String, ByVal colDestBill As String)
    lrSuffix = shSfx.Range("A" & Rows.Count).End(xlUp).row
    lrDataSrc = shData.Range(colSrcPlan & Rows.Count).End(xlUp).row
    lrDataDst = shData.Range(colDestPlan & Rows.Count).End(xlUp).row + 1
    For i = 3 To lrDataSrc
        If shData.Range(colSrcSfx & i).Value <> "Multiple" And shData.Range(colSrcSfx & i).Value <> "" Then
            shData.Range(colDestPlan & lrDataDst).Value = shData.Range(colSrcPlan & i).Value
            shData.Range(colDestSfx & lrDataDst).Value = shData.Range(colSrcSfx & i).Value
            lrDataDst = lrDataDst + 1
        End If
    Next i
    For i = 2 To lrSuffix
        If shSfx.Range("A" & i).Value = prod Then
            shData.Range(colDestPlan & lrDataDst).Value = shSfx.Range("B" & i).Value & " (" & shSfx.Range("D" & i).Value & ")"
            shData.Range(colDestSfx & lrDataDst).Value = shSfx.Range("C" & i).Value
            shData.Range(colDestBill & lrDataDst).Value = shSfx.Range("D" & i).Value
            lrDataDst = lrDataDst + 1
        End If
    Next i
    
    shData.Sort.SortFields.Clear
    shData.Sort.SortFields.Add Key:=Range(colDestPlan & "3"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shData.Sort
        .SetRange Range(colDestPlan & "3:" & colDestBill & "30")
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Attribute VB_Name = "Module1"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    shOUO.Unprotect
    shOUO.Range("C2").Font.ThemeColor = xlThemeColorDark1
    shOUO.Range("C2").Font.TintAndShade = -0.249977111117893
    
    
    shOUO.Unprotect
    shOUO.Range("C2").Font.Color = -16776961
    shOUO.Range("C2").Font.TintAndShade = 0
    
End Sub
Attribute VB_Name = "Network"
'*************************************************************************************************************************************
'* Network procedures                                                                                                                *
'* If the selection is SG Medical, it stores the selected HMO and PPO network and does the necessary filtering for the admin page.   *
'* by Iggy Darsa                                                                                                                     *
'* 9/28/2015                                                                                                                         *
'*************************************************************************************************************************************
Option Explicit
Sub PopulateHMOPPOinData()
    Application.ScreenUpdating = False
    If shData.Range("E2").Value <> True Then 'If medical is not selected
        MsgBox "Please select the 'Medical' option first", vbCritical, "Step missed!"
        Call populateDDL
        Exit Sub
    End If
    
    'Inform the medical products will be cleared
    If shOUO.Range("D6").Value <> "" Then 'if there is any medical product selected
        Dim response As Variant
        response = MsgBox("Changing the networks will clear the selected medical plans." & vbLf & "Do you want to continue?", vbYesNo, "Are You Sure?")
        
        If response = vbYes Then
            shOUO.Range("D6:D30").ClearContents
        Else
            shOUO.Shapes("ddHMO").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddHMO"), shData.Range("HG2").Value)
            shOUO.Shapes("ddHMO2").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddHMO2"), shData.Range("HG3").Value)
            shOUO.Shapes("ddPPO").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddPPO"), shData.Range("HG4").Value)
            'shOUO.Shapes("ddPPO2").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddPPO2"), shData.Range("HG4").Value)
        End If
    End If

    'Save the selected values to Data sheet
    With shOUO.Shapes("ddHMO").ControlFormat
        If .Value <> 0 Then
            shData.Range("HG2").Value = .list(.Value)
        End If
    End With
    With shOUO.Shapes("ddHMO2").ControlFormat
        If .Value <> 0 Then
            shData.Range("HG3").Value = .list(.Value)
        End If
    End With
    With shOUO.Shapes("ddPPO").ControlFormat
        If .Value <> 0 Then
            shData.Range("HG4").Value = .list(.Value)
        End If
    End With
'    With shOUO.Shapes("ddPPO2").ControlFormat
'        If .Value <> 0 Then
'            shData.Range("HG5").Value = .list(.Value)
'        End If
'    End With
    'Filter medical product based on network selection and transfer it to Data sheet
    Dim filterHMO As String: filterHMO = shData.Range("HG2").Value
    Dim filterHMO2 As String: filterHMO2 = shData.Range("HG3").Value
    Dim filterPPO As String: filterPPO = shData.Range("HG4").Value
    Dim filterPPO2 As String: filterPPO2 = shData.Range("HG5").Value
    Dim shName As String
    Select Case shData.Range("state").Value
        Case "CALIFORNIA":
            Call FilterTransferRename("SG CA Medical", filterHMO, filterHMO2, filterPPO, filterPPO2, "HI", "217")
    End Select
End Sub

Sub FilterTransferRename(ByVal shName As String, ByVal crit1 As String, ByVal crit2 As String, ByVal crit3 As String, ByVal crit4 As String, ByVal dest As String, ByVal Rcol As String)
    'Filter
    'Worksheets(shName).Range("$A$1:$F$500").AutoFilter field:=1, Criteria1:="=" & crit1, Operator:=xlOr, Criteria2:="=" & crit2
    Dim nlr As Long: nlr = Worksheets(shName).Range("D" & Rows.Count).End(xlUp).row
    'Worksheets(shName).Visible = xlSheetVisible
    Worksheets(shName).Range("$A$1:$F" & nlr).AutoFilter field:=1, Criteria1:=Array(crit1, crit2, crit3, crit4), Operator:=xlFilterValues
    'Transfer
    shData.Range(dest & "3:" & dest & shData.Range(dest & "3").End(xlDown).row).ClearContents
    Worksheets(shName).Range("D2:D" & nlr).SpecialCells(xlCellTypeVisible).Copy
    shData.Range(dest & "3").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'Rename
    Dim lr As Long: lr = shData.Range(dest & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    ActiveWorkbook.Names(shData.Range("J2").Value).RefersToR1C1 = "=Data!R3C" & Rcol & ":R" & lr & "C" & Rcol
End Sub

Attribute VB_Name = "ProductCategorySelection"
'************************************************************************************
'* Prodcut Selection on Admin Page procedures                                       *
'* Hides or unhides selected products that are sold on the Admin page               *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Sub Medical_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Medical_Sel").Enabled = False Then
        MsgBox "Please select a state first"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J2"), shData.Range("BE3"))
    'Call HideOrUnhide(1)
    Call HideOrUnhideOUO("E2")
    If shData.Range("state").Value = "CALIFORNIA" And shData.Range("grp") = "Small" Then
        Call populateDDL
    End If
End Sub

Sub Dental_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Dental_Sel").Enabled = False Then
        MsgBox "Please select a state first"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J3"), shData.Range("BE4"))
    'Call HideOrUnhide(1)
    Call HideOrUnhideOUO("E3")
End Sub

Sub Vision_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Vision_Sel").Enabled = False Then
        MsgBox "Please select a state first"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J4"), shData.Range("BE5"))
    'Call HideOrUnhide(1)
    Call HideOrUnhideOUO("E4")
End Sub

Sub FSA_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("FSA_Sel").Enabled = False Then
        MsgBox "Please select a state that this product group is offered"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J7"), shData.Range("BE10"))
    'Call HideOrUnhide(1)
    Call HideOrUnhideOUO("E7")
End Sub
Sub Sup_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Sup_Sel").Enabled = False Then
        MsgBox "Please select a state that this product group is offered"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J8"), shData.Range("BE11"))
    'Call HideOrUnhide(1)
    Call HideOrUnhideOUO("E8")
End Sub
Sub Disability_Sel_Click()
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Disability_Sel").Enabled = False Then
        If shData.Range("grp").Value = "Small" Then
            MsgBox "Disability is not offered in Small Group"
        Else
            MsgBox "Please select a state that this product group is offered"
        End If
        Exit Sub
    End If
    
    lr = shData.Range("FM" & Rows.Count).End(xlUp).row
    If lr > 1 Then
        shData.Range("FM2:FN" & lr).ClearContents
    End If
    If Not shData.Range("J6").Value = vbNullString Then
        shPlans.Range(shData.Range("J6").Value).Copy shData.Range("FM2")
        shPlans.Range(shData.Range("J6").Value).Copy shData.Range("FN2")
    End If
    Call AssignSelected(shData.Range("J6"), shData.Range("BE6"))
    'Call HideOrUnhide(2)
    Call HideOrUnhideOUO("E6")
    'Call Life_Options.Disability_Selection
    
    Dim colDisForState As String
    If shData.Range("E6").Value Then
        colDisForState = Col_Letter(ColumnPerNamePlans(shData.Range("J6").Value))
        Call PopulateDynamicDisability(colDisForState)
    Else
        shData.Range("FM2:FN" & Rows.Count).ClearContents
    End If
End Sub

Sub Life_Sel_Click()
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    If shOUO.CheckBoxes("Life_Sel").Enabled = False Then
        If shData.Range("grp").Value = "Small" Then
            MsgBox "Life and AD&D have not been implemented for Small Group yet." & vbLf & "Work in progress", vbOKOnly, "In Progress"
        Else
            MsgBox "Please select a state that this product group is offered"
        End If
        Exit Sub
    End If
    
    If shOUO.CheckBoxes("Life_Sel").Enabled = False Then
        MsgBox "Please select a state first"
        Exit Sub
    End If
    Call AssignSelected(shData.Range("J5"), shData.Range("BE7"))
    Call AssignSelected(shData.Range("J5"), shData.Range("BE8"))
    'Call HideOrUnhide(3)
    Call HideOrUnhideOUO("E5")
    'Call Life_Options.Life_Selection
    
    Dim colLifeForState As String
    If shData.Range("E5").Value = True Then
                colLifeForState = Col_Letter(ColumnPerNamePlans(shData.Range("J5").Value))
                
        If shData.Range("usr").Value = "Internal" Then shOUO.Shapes.Range(Array("cbLvl3")).Visible = msoTrue
        Call PopulateDynamicLife(colLifeForState)
    Else
        shData.Range("BK2:BL" & Rows.Count).ClearContents
        shData.Range("BP2:BP7").ClearContents
        shOUO.Shapes.Range(Array("cbLvl3")).Visible = msoFalse
        shData.Range("level3").Value = False
    End If
    Application.EnableEvents = True
End Sub

Sub cbLvl3_Click()
    Call ClearLifeShapesOnOUO
End Sub

Sub AssignSelected(ByRef rng1 As Range, ByRef rng2 As Range)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If rng1.Value <> "" Then
        rng2.Value = "X"
    Else
        rng2.Value = ""
    End If
    Application.EnableEvents = True
End Sub

Sub HideOrUnhide(ByVal prodType As Byte)
    Application.ScreenUpdating = False
    'prodType:
    '   1 --> Medical, Dental, Vision, FSA
    '   2 --> Disability
    '   3 --> Life, AD&D
    
    shSL.Unprotect
    
    Select Case prodType
    
        Case 1
            'Medical, Dental, and Vision
            For i = 3 To 5
                If Trim(shData.Range("BE" & i).Value) = "X" Then
                    shSL.Range(shData.Range("BC" & i).Value & ":" & shData.Range("BD" & i).Value).EntireColumn.Hidden = False
                Else
                    shSL.Range(shData.Range("BC" & i).Value & ":" & shData.Range("BD" & i).Value).EntireColumn.Hidden = True
                End If
            Next i
            For i = 10 To 10 'FSA
                If Trim(shData.Range("BE" & i).Value) = "X" Then
                    shSL.Range(shData.Range("BC" & i).Value & ":" & shData.Range("BD" & i).Value).EntireColumn.Hidden = False
                Else
                    shSL.Range(shData.Range("BC" & i).Value & ":" & shData.Range("BD" & i).Value).EntireColumn.Hidden = True
                End If
            Next i
            
        Case 2
            'Disability
            counter = HideOrUnhideSpecialtyAndReturnCount(81, 86, 6, "A", 5)

        Case 3
            shSL.Range(shData.Range("BC7").Value & ":" & shData.Range("BD7").Value).EntireColumn.Hidden = False
            shSL.Range(shData.Range("BC8").Value & ":" & shData.Range("BD8").Value).EntireColumn.Hidden = False
            
            Dim colBasicType As Long: colBasicType = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicVol As Long: colBasicVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptType As Long: colOptType = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colOptVol As Long: colOptVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolType As Long: colVolType = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colVolVol As Long: colVolVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicSubVol As Long: colBasicSubVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicSpsVol As Long: colBasicSpsVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicChdVol As Long: colBasicChdVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptSubVol As Long: colOptSubVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptSpsVol As Long: colOptSpsVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptChdVol As Long: colOptChdVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolSubVol As Long: colVolSubVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolSpsVol As Long: colVolSpsVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolChdVol As Long: colVolChdVol = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicMult As Long: colBasicMult = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("BASIC MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colOptMult As Long: colOptMult = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("OPTIONAL  MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colVolMult As Long: colVolMult = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("VOLUNTARY MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colGrand As Long: colGrand = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("GRANDFATHERED LIFE", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicTypeA As Long: colBasicTypeA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicVolA As Long: colBasicVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptTypeA As Long: colOptTypeA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colOptVolA As Long: colOptVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolTypeA As Long: colVolTypeA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY TYPE", shSL.Range("A5:ZZ5"), 0))
            Dim colVolVolA As Long: colVolVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicSubVolA As Long: colBasicSubVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicSpsVolA As Long: colBasicSpsVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicChdVolA As Long: colBasicChdVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptSubVolA As Long: colOptSubVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptSpsVolA As Long: colOptSpsVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colOptChdVolA As Long: colOptChdVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL  CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolSubVolA As Long: colVolSubVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY SUB VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolSpsVolA As Long: colVolSpsVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY SPOUSE VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colVolChdVolA As Long: colVolChdVolA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY CHILD(REN) VOLUME", shSL.Range("A5:ZZ5"), 0))
            Dim colBasicMultA As Long: colBasicMultA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D BASIC MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colOptMultA As Long: colOptMultA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D OPTIONAL MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colVolMultA As Long: colVolMultA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("AD&D VOLUNTARY MULTIPLIER", shSL.Range("A5:ZZ5"), 0))
            Dim colGrandA As Long: colGrandA = Application.WorksheetFunction.Index(shSL.Range("A4:ZZ4"), Application.WorksheetFunction.Match("GRANDFATHERED ADD", shSL.Range("A5:ZZ5"), 0))
            
            'Life
            counter = HideOrUnhideSpecialtyAndReturnCount(71, 78, 7, "A", 6)
            If counter > 0 And Trim(shData.Range("BE7").Value) = "X" Then
                shSL.Range(shData.Range("BC11").Value & ":" & shData.Range("BD11").Value).EntireColumn.Hidden = True
                shSL.Cells(1, colGrand).EntireColumn.Hidden = False
                For i = 71 To 78
                    Select Case shData.Range("A" & i).Value
                        Case "Basic Life"
                            shSL.Cells(1, colBasicType).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicMult).EntireColumn.Hidden = False
                        Case "Optional Life"
                            shSL.Cells(1, colOptType).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptMult).EntireColumn.Hidden = False
                        Case "Voluntary Life"
                            shSL.Cells(1, colVolType).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolMult).EntireColumn.Hidden = False
                        Case "Basic Dep Life"
                            shSL.Cells(1, colBasicSubVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicSpsVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicChdVol).EntireColumn.Hidden = False
                        Case "Optional Dep Life"
                            shSL.Cells(1, colOptSubVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptSpsVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptChdVol).EntireColumn.Hidden = False
                        Case "Voluntary Dep Life"
                            shSL.Cells(1, colVolSubVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolSpsVol).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolChdVol).EntireColumn.Hidden = False
                    End Select
                Next i
            End If
            
            'AD&D
            counter = HideOrUnhideSpecialtyAndReturnCount(71, 78, 8, "D", 6)
            For i = 71 To 78
                If Trim(shData.Range("D" & i).Value) <> "" Then counter = counter + 1
            Next i
            If counter > 0 And Trim(shData.Range("BE8").Value) = "X" Then
                shSL.Range(shData.Range("BC12").Value & ":" & shData.Range("BD12").Value).EntireColumn.Hidden = True
                shSL.Cells(1, colGrandA).EntireColumn.Hidden = False
                For i = 71 To 78
                    Select Case shData.Range("D" & i).Value
                        Case "Basic AD&D"
                            shSL.Cells(1, colBasicTypeA).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicMultA).EntireColumn.Hidden = False
                        Case "Optional AD&D"
                            shSL.Cells(1, colOptTypeA).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptMultA).EntireColumn.Hidden = False
                        Case "Voluntary AD&D"
                            shSL.Cells(1, colVolTypeA).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolMultA).EntireColumn.Hidden = False
                        Case "Basic Dep AD&D"
                            shSL.Cells(1, colBasicSubVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicSpsVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colBasicChdVolA).EntireColumn.Hidden = False
                        Case "Optional Dep AD&D"
                            shSL.Cells(1, colOptSubVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptSpsVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colOptChdVolA).EntireColumn.Hidden = False
                        Case "Voluntary Dep AD&D"
                            shSL.Cells(1, colVolSubVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolSpsVolA).EntireColumn.Hidden = False
                            shSL.Cells(1, colVolChdVolA).EntireColumn.Hidden = False
                    End Select
                Next i
            End If
            
    End Select
    
    shSL.Protect AllowFormattingColumns:=True
End Sub

Function HideOrUnhideSpecialtyAndReturnCount(ByVal startI As Long, ByVal endI As Long, ByVal indirectRow As Long, ByVal rngLetter As String, ByVal countLimit As Integer) As Integer
    Application.ScreenUpdating = False
    counter = 0
    For i = startI To endI
        If Trim(shData.Range(rngLetter & i).Value) <> "" Then counter = counter + 1
    Next i
    If counter = 0 Or Trim(shData.Range("BE" & indirectRow).Value) <> "X" Then
        shSL.Range(shData.Range("BC" & indirectRow).Value & ":" & shData.Range("BD" & indirectRow).Value).EntireColumn.Hidden = True
    Else
        shSL.Range(shData.Range("BC" & indirectRow).Value & ":" & shData.Range("BD" & indirectRow).Value).EntireColumn.Hidden = False
        If counter < countLimit Then
            For i = 1 To countLimit - counter
                shSL.Range(shData.Range("BC" & indirectRow).Value).Offset(0, counter + i - 1).EntireColumn.Hidden = True
            Next i
        End If
    End If
    HideOrUnhideSpecialtyAndReturnCount = counter
End Function

Private Sub HideOrUnhideOUO(ByVal adrs As String)
    shOUO.Unprotect
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Select Case adrs
        Case "E2" 'Medical
            If shData.Range(adrs).Value = True Then
                shData.Range("AJ3:AK30").ClearContents
                shData.Range("DP3:DR" & Rows.Count).ClearContents
                shOUO.Columns("D").EntireColumn.Hidden = False
            Else
                shOUO.Columns("D").EntireColumn.Hidden = True
                shOUO.Range("D6:D30").ClearContents
                shData.Range("AJ3:AK30").ClearContents
                shData.Range("DP3:DR" & Rows.Count).ClearContents
                Call RemoveSuffix("Medical")
            End If
        Case "E3" 'Dental
            If shData.Range(adrs).Value = True Then
                shData.Range("AM3:AN30").ClearContents
                shData.Range("DS3:DU" & Rows.Count).ClearContents
                shOUO.Columns("F").EntireColumn.Hidden = False
            Else
                shOUO.Columns("F").EntireColumn.Hidden = True
                shOUO.Range("F6:F30").ClearContents
                shOUO.Range("H6:H45").ClearContents
                shData.Range("AM3:AN30").ClearContents
                shData.Range("DS3:DU" & Rows.Count).ClearContents
                Call RemoveSuffix("Dental")
            End If
        Case "E4" 'Vision
            If shData.Range(adrs).Value = True Then
                shData.Range("AP3:AQ30").ClearContents
                shData.Range("DV3:DX" & Rows.Count).ClearContents
                shOUO.Columns("J").EntireColumn.Hidden = False
            Else
                shOUO.Columns("J").EntireColumn.Hidden = True
                shOUO.Range("J6:J30").ClearContents
                shData.Range("AP3:AQ30").ClearContents
                shData.Range("DV3:DX" & Rows.Count).ClearContents
                Call RemoveSuffix("Vision")
            End If
        Case "E5" 'Life
            If shData.Range(adrs).Value = True Then
                shData.Range("AV3:AW30").ClearContents
                shData.Range("AY3:AZ30").ClearContents
                shData.Range("EB3:EG" & Rows.Count).ClearContents
                shData.Range("EN3:ES" & Rows.Count).ClearContents
                shData.Range("EU3:EZ" & Rows.Count).ClearContents
                shData.Range("FH3:FK" & Rows.Count).ClearContents
                shOUO.Columns("N:O").EntireColumn.Hidden = False
            Else
                shOUO.Columns("N:O").EntireColumn.Hidden = True
                shOUO.Range("N6:N30").ClearContents
                shOUO.Range("FVL").ClearContents
                shOUO.Range("FVA").ClearContents
                shData.Range("AV3:AW30").ClearContents
                shData.Range("AY3:AZ30").ClearContents
                shData.Range("EB3:EG" & Rows.Count).ClearContents
                shData.Range("EN3:ES" & Rows.Count).ClearContents
                shData.Range("EU3:EZ" & Rows.Count).ClearContents
                shData.Range("FH3:FK" & Rows.Count).ClearContents
                shOUO.Range("FVBDL").ClearContents
                shOUO.Range("FVBDA").ClearContents
                shOUO.Range("FVODL").ClearContents
                shOUO.Range("FVODA").ClearContents
                shOUO.Range("FVVDL").ClearContents
                shOUO.Range("IVL").ClearContents
                shOUO.Range("IVA").ClearContents
                shOUO.Range("IVBDL").ClearContents
                shOUO.Range("IVBDA").ClearContents
                shOUO.Range("IVODL").ClearContents
                shOUO.Range("IVODA").ClearContents
                shOUO.Range("IVVDL").ClearContents
                shOUO.Range("IVVDA").ClearContents
                Call RemoveSuffix("Life")
                Call RemoveSuffix("AD&D")
            End If
        Case "E6" 'Disability
            If shData.Range(adrs).Value Then
                shData.Range("AS3:AT30").ClearContents
                shData.Range("DY3:EA" & Rows.Count).ClearContents
                shData.Range("EH3:EL" & Rows.Count).ClearContents
                shOUO.Columns("L").EntireColumn.Hidden = False
            Else
                shOUO.Columns("L").EntireColumn.Hidden = True
                shOUO.Range("L6:L30").ClearContents
                shData.Range("AS3:AT30").ClearContents
                shData.Range("DY3:EA" & Rows.Count).ClearContents
                shData.Range("EH3:EL" & Rows.Count).ClearContents
                Call RemoveSuffix("Disability")
            End If
        Case "E7" 'FSA
            If shData.Range(adrs).Value = True Then
                shData.Range("NE3:NF30").ClearContents
                shData.Range("NH3:NJ" & Rows.Count).ClearContents
                shOUO.Columns("Q").EntireColumn.Hidden = False
            Else
                shOUO.Columns("Q").EntireColumn.Hidden = True
                shOUO.Range("Q6:Q30").ClearContents
                shData.Range("NE3:NF30").ClearContents
                shData.Range("NH3:NJ" & Rows.Count).ClearContents
                Call RemoveSuffix("FSA")
            End If
         Case "E8" 'Supplemental
            If shData.Range(adrs).Value = True Then
                shData.Range("NN3:NO30").ClearContents
                shData.Range("NQ3:NS" & Rows.Count).ClearContents
                shOUO.Columns("S").EntireColumn.Hidden = False
            Else
                shOUO.Columns("S").EntireColumn.Hidden = True
                shOUO.Range("S6:S30").ClearContents
                shData.Range("NN3:NO30").ClearContents
                shData.Range("NQ3:NS" & Rows.Count).ClearContents
                Call RemoveSuffix("Supplemental")
            End If
    End Select
    Application.EnableEvents = True
    shOUO.Protect
End Sub

Private Sub PopulateDynamicLife(ByVal col As String)
    Application.ScreenUpdating = False
    On Error Resume Next
    lr = shPlans.Cells(Rows.Count, col).End(xlUp).row
    shData.Range("BK2:BK" & lr - 1).Value = shPlans.Range(col & "3:" & col & lr).Value
    shData.Range("BL2:BL" & lr - 1).Value = shPlans.Range(col & "3:" & col & lr).Value
    lr = shData.Range("BL" & Rows.Count).End(xlUp).row
    If lr < 2 Then lr = 2
    ActiveWorkbook.Names("DYN_LIFE").RefersToR1C1 = "=Data!R2C64:R" & lr & "C64"
End Sub

Private Sub PopulateDynamicDisability(ByVal col As String)
    Application.ScreenUpdating = False
    On Error Resume Next
    lr = shData.Cells(Rows.Count, col).End(xlUp).row
    shData.Range("FM2:FM" & lr - 1).Value = shPlans.Range(col & "3:" & col & lr).Value
    shData.Range("FN2:FN" & lr - 1).Value = shPlans.Range(col & "3:" & col & lr).Value
    lr = shData.Range("FN" & Rows.Count).End(xlUp).row
    If lr < 2 Then lr = 2
    ActiveWorkbook.Names("DYN_DIS").RefersToR1C1 = "=Data!R2C170:R" & lr & "C170"
End Sub


Private Sub RemoveSuffix(ByVal prod As String)
    lr = shSfx.Range("A" & Rows.Count).End(xlUp).row
    
    For i = lr To 2 Step -1
        If shSfx.Range("A" & i).Value = prod Then
            shSfx.Range("A" & i & ":D" & i).Delete (xlUp)
        End If
    Next i
End Sub
Attribute VB_Name = "SGMacro"
Global g_HostSettleTime%

Sub BrokenSGMacroDriver()
Attribute BrokenSGMacroDriver.VB_ProcData.VB_Invoke_Func = "S\n14"
StartOver:
    response = InputBox("Enter the row number you'd like to start processing")
    If IsNumeric(response) Then
        SGMacroDriver CLng(response)
    Else
       MsgBox "The value has to be a number", vbExclamation, "Error!"
       GoTo StartOver
    End If
End Sub

Sub MainSGMacroDriver()
Attribute MainSGMacroDriver.VB_ProcData.VB_Invoke_Func = "R\n14"
    SGMacroDriver
End Sub

Sub SGMacroDriver(Optional ByVal shExtCnt As Long)
Attribute SGMacroDriver.VB_ProcData.VB_Invoke_Func = "R\n14"
    Dim System As Object
    Dim Sess0 As Object
    Dim mfPath As String
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("EMPLOYEES SOCIAL")).End(xlUp).row
'    If lr < 9 Then
'        MsgBox "There are not enough records to process. Please proceed with the enrollment manually.", vbInformation, "Not enough records!"
'        Exit Sub
'    ElseIf lr > 26 Then
'        MsgBox "There are too many records to process. Please proceed with the enrollment via 1000 byte file.", vbInformation, "Too many records!"
'        Exit Sub
'    End If
    If shData.Range("E5").Value = True Or shData.Range("E6").Value = True Then
        response = MsgBox("Specialy products cannot be run via macro." & vbLf & "Do you want to continue with the regular products?", vbInformation + vbYesNo, "Specialty Product Exception!")
        If response = vbNo Then Exit Sub
    End If
'    response = MsgBox("Please make sure the mainframe (EXTRA System) is open." & vbLf & "Once the mainframe is open, click OK.", vbOKCancel, "Mainframe")
'    If reponse = vbCancel Then Exit Sub
    Call GetShore
    If Trim(UCase(Range("mfShore").Value)) = "ACC" Then 'Or UCase(Environ("username")) = "AD82952" Or IsIggy Then 'Lisa Ullrey
        Set System = CreateObject("EXTRA.System")
        Set Sessions = System.Sessions
        'Set Sess0 = GetObject("\\va10pavflectx.us.ad.wellpoint.com\tsusers$\" & Environ("username") & "\appcompat\Attachmate\sessions\eBiz\CA-Mainframe.edp")
        Set Sess0 = GetObject("Q:\appcompat\Attachmate\sessions\eBiz\CA-Mainframe.edp")
    Else
        mfPath = "\\np01ana001\sgmembership\Census_Offshore\session\SGmf4census.edp"
        ActiveWorkbook.FollowHyperlink mfPath, NewWindow:=True
        Application.Wait Now + TimeValue("00:00:05")
        
        Set System = CreateObject("EXTRA.System")
        If (System Is Nothing) Then
            MsgBox "Could not create the EXTRA System object. Stopping macro."
            Exit Sub
        End If
    
        Set Sess0 = System.ActiveSession
        If (Sess0 Is Nothing) Then
            MsgBox "Could not create the Session object. Stopping macro."
            Exit Sub
        End If
    End If
    
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud
    
    With Sess0.Screen
        'Call GetPwd
        PE "ISM", 23, 48
        WaitTill 14, 4, 6, "Userid"
        P Range("mfUsrID").Value, 14, 20
        PE Range("mfPwd").Value, 15, 20
        Application.Wait Now + TimeValue("00:00:01")
SearchAgain1:
        ln = FindIMSPLine()
        If ln = 0 Then GoTo SearchAgain1
        WaitTill ln, 28, 4, "===>"
        Application.Wait Now + TimeValue("00:00:01")
        PE "IMSP", ln, 33
        Application.Wait Now + TimeValue("00:00:01")
        .SendKeys ("<Clear>")
        Sud
        Application.Wait Now + TimeValue("00:00:01")
        PE "memb05 ", 1, 1
        Application.Wait Now + TimeValue("00:00:01")
        WaitTill 2, 30, 14, "MEMB05 PROFILE"
        PE "C1", 5, 22
        WaitTill 2, 25, 22, "SUBSCRIBER / DEPENDENT"
        shRow = 7
        If Not IsMissing(shExtCnt) And shExtCnt <> 0 Then shRow = shExtCnt
        lr = shSL.Cells(Rows.Count, ColumnPerName("EMPLOYEES SOCIAL")).End(xlUp).row
        'lr = 16
        For i = shRow To lr
            exist = False
            dep = False
            If shSL.Cells(i, ColumnPerName("RELATIONSHIP CODE")).Value = "SUB" Then
                P Format(shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000"), 3, 47
                PE "IN", 5, 22
                'If Trim(G(9, 1, 2)) <> "" And Trim(G(9, 4, 6)) <> "PURGED" Then exist = True
                If Trim(G(9, 1, 2)) <> "" Then
                    exist = True
                    GoTo SubExists
                End If
                .SendKeys ("<PF2>")
                Sud
                If Trim(shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value) = Trim(shSL.Cells(i + 1, ColumnPerName("EMPLOYEES SOCIAL")).Value) Then dep = True

                If Not dep Then
                    Call UpdateSGNonExistingSUBOnly(i)
                Else
                    Call UpdateSGNonExistingFamily(i)
                End If
                shSL.Cells(i, ColumnPerName("ANTHEM COMMENTS")).Value = "Macro Success." & vbLf & shSL.Cells(i, ColumnPerName("ANTHEM COMMENTS")).Value
                GoTo EndFor
            End If
SubExists:
            shSL.Cells(i, ColumnPerName("ANTHEM COMMENTS")).Value = "Macro does not allow existing members." & vbLf & shSL.Cells(i, ColumnPerName("ANTHEM COMMENTS")).Value
EndFor:
        Next i
        'Logout from mainframe
        .SendKeys ("<Pa1>"): Sud
SearchAgain2:
        ln = FindIMSPLine()
        If ln = 0 Then GoTo SearchAgain2
        WaitTill ln, 28, 4, "===>"
        .SendKeys ("<PF3>"): Sud
    End With
    UpdateToolTraker ""
    MsgBox "Macro had finished."
End Sub

Function FindIMSPLine() As Integer
    Dim ln As Integer: ln = 0
    Dim i As Integer
    For i = 1 To 27
        If G(i, 28, 4) = "===>" Then
            ln = i
            Exit For
        End If
    Next i
    FindIMSPLine = ln
End Function

Sub Sud()
    Dim Sessions As Object
    Dim System As Object
    Dim XOIA As Object
    Dim Sess0 As Object
    Dim Scrn1 As Object

    Set System = CreateObject("EXTRA.System")

    Set Sessions = System.Sessions
    Set Sess0 = System.ActiveSession
    Set Scrn1 = Sess0.Screen
    Set XOIA = Scrn1.OIA

Sud:
    If XOIA.xstatus = 5 Then
        GoTo Sud
    End If
End Sub

Sub WaitTill(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s As String)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        tm = Now + TimeValue("00:00:20")
        Do Until .getstring(r, c, l) = s
            If Now >= tm Then
                MsgBox "An error occured." & vbLf & "Please click on CTRL+SHIFT+S to start over to continue where it left off.", vbExclamation, "Error!"
                End
            End If
            Sud
        Loop
    End With
End Sub

Sub WaitTillOR(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s1 As String, ByVal s2 As String)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        tm = Now + TimeValue("00:00:20")
        Do Until .getstring(r, c, l) = s1 Or .getstring(r, c, l) = s2
            If Now >= tm Then
                MsgBox "An error occured." & vbLf & "Please click on CTRL+SHIFT+S to start over to continue where it left off.", vbExclamation, "Error!"
                End
            End If
            Sud
        Loop
    End With
End Sub

Sub P(ByVal s As String, ByVal r As Long, ByVal c As Long)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        .putstring s, r, c
    End With
End Sub

Sub PE(ByVal s As String, ByVal r As Long, ByVal c As Long)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        P s, r, c
        .SendKeys ("<ENTER>")
        Sud
    End With
End Sub

Function G(ByVal r As Long, ByVal c As Long, ByVal l As Long) As String
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        G = Trim(.getstring(r, c, l))
    End With
End Function


Sub SelectSuffixes(ByVal shRow As Long)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        medSfx = Trim(shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value)
        denSfx = Trim(shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value)
        visSfx = Trim(shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value)
        fsaSfx = Trim(shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value)
        mfRow = 13
        tm = Now + TimeValue("00:00:20")
        While mfRow <> 23 Or G(23, 3, 9) <> "LAST PAGE"
            If Now >= tm Then
                Stop
            End If
            If mfRow = 23 Then
                mfRow = 13
                .SendKeys ("<PF8>")
                Sud
            End If
            If G(mfRow, 19, 10) = medSfx Then
                P "S", mfRow, 3
                If Trim(shSL.Cells(shRow, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value) <> "" Then
                    If G(mfRow + 1, 19, 9) = "" Then P Trim(shSL.Cells(shRow, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value), mfRow + 1, 19
                End If
            ElseIf G(mfRow, 19, 10) = denSfx Then
                P "S", mfRow, 3
                If Trim(shSL.Cells(shRow, ColumnPerName("DENTAL OFFICE")).Value) <> "" Then
                    If G(mfRow + 1, 19, 9) = "" Then P Trim(shSL.Cells(shRow, ColumnPerName("DENTAL OFFICE")).Value), mfRow + 1, 19
                End If
            ElseIf G(mfRow, 19, 10) = visSfx Then
                P "S", mfRow, 3
            ElseIf G(mfRow, 19, 10) = fsaSfx Then
                P "S", mfRow, 3
            End If
            mfRow = mfRow + 1
        Wend
        .SendKeys ("<Enter>")
        Sud
        .SendKeys ("<PF10>")
        Sud
        .SendKeys ("<PF10>")
        Sud
    End With
End Sub


Sub UpdateSGExistingSUBOnly(ByVal shRow As Long)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud

    With Sess0.Screen
        shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value = shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value & " [ESO]"
        .SendKeys ("<Clear>")
        Sud
        PE "memb05 ", 1, 1
        WaitTill 2, 30, 14, "MEMB05 PROFILE"
        PE "C1", 5, 22
        WaitTill 2, 25, 22, "SUBSCRIBER / DEPENDENT"

        If shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value <> shSL.Cells(shRow - 1, ColumnPerName("EMPLOYEES SOCIAL")).Value Then
            P shOUO.Range("B6").Value, 3, 8
            If Trim(shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value, 3, 31
            End If

            P Format(shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000"), 3, 47
            PE "AD", 5, 22

            WaitTillOR 1, 3, 8, "WGMMBRLU", "WGMPROFA"
            
            If G(1, 3, 8) = "WGMMBRLU" Then PE "01", 6, 17
            
            emailExists = "Y"
            If Trim(shSL.Cells(shRow, ColumnPerName("EMAIL")).Value) = "" Then emailExists = "N"
            If Trim(G(7, 71, 1)) = "" Then
                PE emailExists, 7, 71
            End If
                
            P Format(shSL.Cells(shRow, ColumnPerName("MEMBER SSN")).Value, "000000000"), 8, 13
            Grptype = shSL.Cells(shRow, ColumnPerName("GROUP TYPE")).Value
            P Grptype, 8, 49
            If Grptype = "C" Then
                P "Y", 18, 6
                P shSL.Cells(shRow, ColumnPerName("COBRA QUALIFYING EVENT")).Value, 18, 19
                '*** Cobra Eff Date  'P shSL.Cells(shRow, ColumnPerName("COBRA START DATE")).Value, 18, X
            End If
            COB = shSL.Cells(shRow, ColumnPerName("COB")).Value
            If Trim(G(23, 3, 21)) = "INVALID COB INDICATOR" Or Trim(G(19, 6, 1)) = "" Then
                If COB = "Y" Then
                    P COB, 19, 6
                Else
                    P "N", 19, 6
                End If
            End If
            
            .SendKeys ("<ENTER>")
            Sud
            

            If shSL.Cells(shRow, ColumnPerName("RELATIONSHIP CODE")).Value = "SUB" Then
                WaitTillOR 2, 21, 30, "SUBSCRIBER ELIG - ADD COVERAGE", " SUBSCRIBER ELIGIBILITY - ADD "
                P Format(shSL.Cells(shRow, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "mmddyyyy"), 7, 26
                P Format(shSL.Cells(shRow, ColumnPerName("DATE OF HIRE")).Value, "mmddyyyy"), 8, 26
                Call SelectSuffixes(shRow)
            End If
            
            If G(2, 24, 24) = "MEMBER ELIGIBILITY - ADD" Then
                tm = Now + TimeValue("00:00:20")
                While G(2, 34, 15) <> "LANGUAGE CHANGE"
                    If Now >= tm Then
                        Stop
                    End If
                    .SendKeys ("<PF10>")
                    Sud
                Wend
            End If
            
            If G(2, 34, 15) = "LANGUAGE CHANGE" Then
                lng = "ENG"
                If Trim(shSL.Cells(shRow, ColumnPerName("LANGUAGE")).Value) <> "" Then
                    lng = shSL.Cells(shRow, ColumnPerName("LANGUAGE")).Value
                End If
                mfRow = 10
                tm = Now + TimeValue("00:00:20")
                While G(mfRow, 61, 3) <> ""
                    If Now >= tm Then
                        Stop
                    End If
                    P lng, mfRow, 61
                    P lng, mfRow, 71
                    mfRow = mfRow + 1
                Wend
                For i = 1 To 2
                    .SendKeys ("<PF10>")
                    Sud
                Next i
            End If
        End If
    End With
End Sub


Sub UpdateSGNonExistingSUBOnly(ByVal shRow As Long)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud
    With Sess0.Screen
        shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value = shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value & " [NESO]"
        .SendKeys ("<Clear>")
        Sud
        PE "memb05 ", 1, 1
        WaitTill 2, 30, 14, "MEMB05 PROFILE"
        PE "C1", 5, 22
        WaitTill 2, 25, 22, "SUBSCRIBER / DEPENDENT"

        If shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value <> shSL.Cells(shRow - 1, ColumnPerName("EMPLOYEES SOCIAL")).Value Then
            P shOUO.Range("B6").Value, 3, 8
            If Trim(shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value, 3, 31
            End If

            P Format(shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000"), 3, 47
            PE "AD", 5, 22

            WaitTill 1, 3, 8, "WGMPROFA"

            dblKey = 0

DoubleKey:
            dblKey = dblKey + 1
            P s__(16), 6, 13
            P s__(12), 6, 52
            P shSL.Cells(shRow, ColumnPerName("LAST NAME")).Value, 6, 13
            P shSL.Cells(shRow, ColumnPerName("FIRST NAME")).Value, 6, 52
            If Trim(shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value, 6, 71
            Else
                P "_", 6, 71
            End If
            P shSL.Cells(shRow, ColumnPerName("GENDER")).Value, 7, 7
            P shSL.Cells(shRow, ColumnPerName("RELATIONSHIP CODE")).Value, 7, 18
            P Format(shSL.Cells(shRow, ColumnPerName("DOB")).Value, "mm-dd-yyyy"), 7, 52
            If Trim(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value) <> "" Then
                P s__(3), 9, 13
                P s__(3), 9, 19
                P s__(4), 9, 25
                P Format(Left(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 3), "000"), 9, 13
                P Format(Mid(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4, 3), "000"), 9, 19
                P Format(Right(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4), "0000"), 9, 25
            End If
            P s__(25), 10, 13
            P shSL.Cells(shRow, ColumnPerName("ADDRESS")).Value, 10, 13
            If Trim(shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value) <> "" Then
                P s__(24), 12, 13
                P shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value, 12, 13
            End If
            P s__(5), 10, 49
            P shSL.Cells(shRow, ColumnPerName("ZIP CODE")).Value, 10, 49

            emailExists = "Y"
            If Trim(shSL.Cells(shRow, ColumnPerName("EMAIL")).Value) = "" Then emailExists = "N"
            P emailExists, 7, 71
            P Format(shSL.Cells(shRow, ColumnPerName("MEMBER SSN")).Value, "000000000"), 8, 13
            Grptype = shSL.Cells(shRow, ColumnPerName("GROUP TYPE")).Value
            P Grptype, 8, 49
            If Grptype = "C" Then
                P "Y", 18, 6
                P shSL.Cells(shRow, ColumnPerName("COBRA QUALIFYING EVENT")).Value, 18, 19
                '*** Cobra Eff Date  'P shSL.Cells(shRow, ColumnPerName("COBRA START DATE")).Value, 18, X
            End If
            COB = shSL.Cells(shRow, ColumnPerName("COB")).Value
            If COB = "Y" Then
                P COB, 19, 6
            Else
                P "N", 19, 6
            End If

            .SendKeys ("<PF6>")
            Sud
            If dblKey = 1 Then GoTo DoubleKey

            If emailExists = "Y" Then
                If emailExists = "Y" Then
                    WaitTill 2, 26, 20, "MEMBER ADDRESS - ADD"
                    PE shSL.Cells(shRow, ColumnPerName("EMAIL")).Value, 12, 16
                    WaitTill 23, 3, 29, "PLEASE RE-ENTER EMAIL ADDRESS"
                    PE shSL.Cells(shRow, ColumnPerName("EMAIL")).Value, 12, 16
                    WaitTill 23, 3, 37, "SELECT UPDATE PF10 TO CONFIRM REQUEST"
                    .SendKeys ("<PF10>")
                    Sud
                End If
            End If

            P Format(shSL.Cells(shRow, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "mmddyyyy"), 7, 26
            P Format(shSL.Cells(shRow, ColumnPerName("DATE OF HIRE")).Value, "mmddyyyy"), 8, 26
            Call SelectSuffixes(shRow)
            
            WaitTill 2, 34, 15, "LANGUAGE CHANGE"
            lng = "ENG"
            If Trim(shSL.Cells(shRow, ColumnPerName("LANGUAGE")).Value) <> "" Then
                lng = shSL.Cells(shRow, ColumnPerName("LANGUAGE")).Value
            End If
            mfRow = 10
            tm = Now + TimeValue("00:00:20")
            While G(mfRow, 61, 3) <> ""
                If Now >= tm Then
                    Stop
                End If
                P lng, mfRow, 61
                P lng, mfRow, 71
                mfRow = mfRow + 1
            Wend
            For i = 1 To 2
                .SendKeys ("<PF10>")
                Sud
            Next i
        End If
    End With
End Sub

Sub UpdateSGNonExistingFamily(ByVal shRow As Long)
    firstRow = shRow
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud

    'setup family matrix
    Dim memCnt As Long: memCnt = 0
    While shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value = shSL.Cells(firstRow, ColumnPerName("EMPLOYEES SOCIAL")).Value
        memCnt = memCnt + 1
        shRow = shRow + 1
    Wend
    
    LastRow = shRow - 1
    shRow = firstRow

    ReDim mtx(1 To memCnt, 1 To 6) As String 'dob, relCode, med, dent, vis, lang

    For i = 1 To memCnt
        mtx(i, 1) = shSL.Cells(shRow - 1 + i, ColumnPerName("DOB")).Value
        mtx(i, 2) = shSL.Cells(shRow - 1 + i, ColumnPerName("RELATIONSHIP CODE")).Value
        mtx(i, 3) = shSL.Cells(shRow - 1 + i, ColumnPerName("MEDICAL PRODUCT")).Value
        mtx(i, 4) = shSL.Cells(shRow - 1 + i, ColumnPerName("DENTAL PRODUCT")).Value
        mtx(i, 5) = shSL.Cells(shRow - 1 + i, ColumnPerName("VISION PRODUCT")).Value
        mtx(i, 6) = shSL.Cells(shRow - 1 + i, ColumnPerName("LANGUAGE")).Value
    Next i
    
    With Sess0.Screen
        shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value = shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value & " [NEF]"
        .SendKeys ("<Clear>")
        Sud
        PE "memb05 ", 1, 1
        WaitTill 2, 30, 14, "MEMB05 PROFILE"
        PE "C1", 5, 22
        WaitTill 2, 25, 22, "SUBSCRIBER / DEPENDENT"
        lr = shSL.Cells(Rows.Count, ColumnPerName("EMPLOYEES SOCIAL")).End(xlUp).row
        If shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value <> shSL.Cells(shRow - 1, ColumnPerName("EMPLOYEES SOCIAL")).Value Then
            P shOUO.Range("B6").Value, 3, 8
            If Trim(shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value, 3, 31
            End If

            P Format(shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000"), 3, 47
            PE "AD", 5, 22

            WaitTill 1, 3, 8, "WGMPROFA"
StartOver:
            dblKey = 0

DoubleKey:
            dblKey = dblKey + 1
            
            P "                ", 6, 13
            P shSL.Cells(shRow, ColumnPerName("LAST NAME")).Value, 6, 13
            P "            ", 6, 52
            P shSL.Cells(shRow, ColumnPerName("FIRST NAME")).Value, 6, 52
            If Trim(shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value, 6, 71
            Else
                P "_", 6, 71
            End If
            P shSL.Cells(shRow, ColumnPerName("GENDER")).Value, 7, 7
            P shSL.Cells(shRow, ColumnPerName("RELATIONSHIP CODE")).Value, 7, 18
            P Format(shSL.Cells(shRow, ColumnPerName("DOB")).Value, "mm-dd-yyyy"), 7, 52
            P "   ", 9, 13
            P "   ", 9, 19
            P "    ", 9, 25
            If Trim(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value) <> "" Then
                P Format(Left(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 3), "000"), 9, 13
                P Format(Mid(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4, 3), "000"), 9, 19
                P Format(Right(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4), "0000"), 9, 25
            End If
            P "                         ", 10, 13
            P shSL.Cells(shRow, ColumnPerName("ADDRESS")).Value, 10, 13
            P "                        ", 12, 13
            If Trim(shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value) <> "" Then P shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value, 12, 13
            P "     ", 10, 49
            P shSL.Cells(shRow, ColumnPerName("ZIP CODE")).Value, 10, 49
           
            emailExists = "Y"
            If Trim(shSL.Cells(shRow, ColumnPerName("EMAIL")).Value) = "" Then emailExists = "N"
            P emailExists, 7, 71
            P Format(shSL.Cells(shRow, ColumnPerName("MEMBER SSN")).Value, "000000000"), 8, 13
            Grptype = shSL.Cells(shRow, ColumnPerName("GROUP TYPE")).Value
            P Grptype, 8, 49
            If Grptype = "C" Then
                P "Y", 18, 6
                P shSL.Cells(shRow, ColumnPerName("COBRA QUALIFYING EVENT")).Value, 18, 19
                '*** Cobra Eff Date  'P shSL.Cells(shRow, ColumnPerName("COBRA START DATE")).Value, 18, X
            End If
            COB = shSL.Cells(shRow, ColumnPerName("COB")).Value
            If COB = "Y" Then
                P COB, 19, 6
            Else
                P "N", 19, 6
            End If
            
            
            .SendKeys ("<ENTER>")
            Sud
            If dblKey = 1 Then GoTo DoubleKey
                
            If shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value = shSL.Cells(shRow + 1, ColumnPerName("EMPLOYEES SOCIAL")).Value Then
                shRow = shRow + 1
                GoTo StartOver
            Else
                LastRow = shRow
                .SendKeys ("<PF6>")
                Sud
                firstEmail = True
                If Trim(shSL.Cells(firstRow, ColumnPerName("EMAIL")).Value) = "" Then firstEmail = False
                If firstEmail Then
                    WaitTill 2, 26, 20, "MEMBER ADDRESS - ADD"
                    PE shSL.Cells(firstRow, ColumnPerName("EMAIL")).Value, 12, 16
                    WaitTill 23, 3, 29, "PLEASE RE-ENTER EMAIL ADDRESS"
                    PE shSL.Cells(firstRow, ColumnPerName("EMAIL")).Value, 12, 16
                    WaitTill 23, 3, 37, "SELECT UPDATE PF10 TO CONFIRM REQUEST"
                    .SendKeys ("<PF10>")
                    Sud
                End If
                                    
'                If shSL.Cells(firstRow, ColumnPerName("RELATIONSHIP CODE")).Value = "SUB" Then
'                    WaitTillOR 2, 21, 30, "SUBSCRIBER ELIG - ADD COVERAGE", " SUBSCRIBER ELIGIBILITY - ADD "
'                    P Format(shSL.Cells(firstRow, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "mmddyyyy"), 7, 26
'                    P Format(shSL.Cells(firstRow, ColumnPerName("DATE OF HIRE")).Value, "mmddyyyy"), 8, 26
'                    Call SelectSuffixes(firstRow)
'                End If
                
                'SUB
                '**********CHECK IF WORKING************
                WaitTillOR 2, 21, 30, "SUBSCRIBER ELIG - ADD COVERAGE", " SUBSCRIBER ELIGIBILITY - ADD "
                P Format(shSL.Cells(shRow, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "mmddyyyy"), 7, 26
                P Format(shSL.Cells(shRow, ColumnPerName("DATE OF HIRE")).Value, "mmddyyyy"), 8, 26
                Call SelectSuffixes(shRow)
                
                'DEPs
                tm = Now + TimeValue("00:00:20")
                While G(23, 2, 22) <> "LAST PRODUCT DISPLAYED"
                    If Now >= tm Then
                        Stop
                    End If
                    For i = 1 To UBound(mtx)
                        If mtx(i, 3) = Trim(G(9, 13, 10)) Or mtx(i, 4) = Trim(G(9, 13, 10)) Or mtx(i, 5) = Trim(G(9, 13, 10)) Then
                            mfRow = 12
                            tm2 = Now + TimeValue("00:00:20")
                            While mfRow < 22 And Trim(G(mfRow, 4, 1)) <> ""
                                If Now >= tm2 Then
                                    Stop
                                End If
                                If mtx(i, 3) = Trim(G(9, 13, 10)) Then
                                    If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                        P "S", mfRow, 2
                                    End If
                                End If
                                If mtx(i, 4) = Trim(G(9, 13, 10)) Then
                                    If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                        P "S", mfRow, 2
                                    End If
                                End If
                                If mtx(i, 5) = Trim(G(9, 13, 10)) Then
                                    If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                        P "S", mfRow, 2
                                    End If
                                End If
                                mfRow = mfRow + 1
                            Wend
                        End If
                    Next i
                    .SendKeys ("<PF5>")
                    Sud
                Wend
                '*****************************************
                
                .SendKeys ("<PF10>")
                Sud
                .SendKeys ("<PF10>")
                Sud
                
                WaitTill 2, 34, 15, "LANGUAGE CHANGE"
                lng = "ENG"
                If Trim(shSL.Cells(firstRow, ColumnPerName("LANGUAGE")).Value) <> "" Then
                    lng = shSL.Cells(firstRow, ColumnPerName("LANGUAGE")).Value
                End If
                mfRow = 10
                tm = Now + TimeValue("00:00:20")
                While G(mfRow, 61, 3) <> ""
                    If Now >= tm Then
                        Stop
                    End If
                    P lng, mfRow, 61
                    P lng, mfRow, 71
                    mfRow = mfRow + 1
                Wend
                For i = 1 To 2
                    .SendKeys ("<PF10>")
                    Sud
                Next i
            End If
        End If
    End With
End Sub

Sub UpdateSGExistingFamily(ByVal shRow As Long)
    firstRow = shRow
    
    'setup family matrix
    Dim memCnt As Long: memCnt = 0
    While shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value = shSL.Cells(firstRow, ColumnPerName("EMPLOYEES SOCIAL")).Value
        memCnt = memCnt + 1
        shRow = shRow + 1
    Wend
    LastRow = shRow - 1
    shRow = firstRow

    ReDim mtx(1 To memCnt, 1 To 6) As String 'dob, relCode, med, dent, vis, lang

    For i = 1 To memCnt
        mtx(i, 1) = shSL.Cells(shRow - 1 + i, ColumnPerName("DOB")).Value
        mtx(i, 2) = shSL.Cells(shRow - 1 + i, ColumnPerName("RELATIONSHIP CODE")).Value
        mtx(i, 3) = shSL.Cells(shRow - 1 + i, ColumnPerName("MEDICAL PRODUCT")).Value
        mtx(i, 4) = shSL.Cells(shRow - 1 + i, ColumnPerName("DENTAL PRODUCT")).Value
        mtx(i, 5) = shSL.Cells(shRow - 1 + i, ColumnPerName("VISION PRODUCT")).Value
        mtx(i, 6) = shSL.Cells(shRow - 1 + i, ColumnPerName("LANGUAGE")).Value
    Next i
    
    
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud

    With Sess0.Screen
        shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value = shSL.Cells(shRow, ColumnPerName("ANTHEM COMMENTS")).Value & " [EF]"
        .SendKeys ("<Clear>")
        Sud
        PE "memb05 ", 1, 1
        WaitTill 2, 30, 14, "MEMB05 PROFILE"
        PE "C1", 5, 22
        WaitTill 2, 25, 22, "SUBSCRIBER / DEPENDENT"
        lr = shSL.Cells(Rows.Count, ColumnPerName("EMPLOYEES SOCIAL")).End(xlUp).row
        If shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value <> shSL.Cells(shRow - 1, ColumnPerName("EMPLOYEES SOCIAL")).Value Then
            P shOUO.Range("B6").Value, 3, 8
            If Trim(shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MEDICAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("DENTAL PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("VISION PRODUCT")).Value, 3, 31
            ElseIf Trim(shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("FSA PRODUCT")).Value, 3, 31
            End If

            P Format(shSL.Cells(shRow, ColumnPerName("EMPLOYEES SOCIAL")).Value, "000000000"), 3, 47
            PE "AD", 5, 22

            WaitTillOR 1, 3, 8, "WGMMBRLU", "WGMPROFA"
            
            If G(1, 3, 8) = "WGMMBRLU" Then PE "01", 6, 17
            
StartOver:
            P "                ", 6, 13
            P shSL.Cells(shRow, ColumnPerName("LAST NAME")).Value, 6, 13
            P "            ", 6, 52
            P shSL.Cells(shRow, ColumnPerName("FIRST NAME")).Value, 6, 52
            If Trim(shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value) <> "" Then
                P shSL.Cells(shRow, ColumnPerName("MIDDLE INITIAL")).Value, 6, 71
            Else
                P "_", 6, 71
            End If
            P shSL.Cells(shRow, ColumnPerName("GENDER")).Value, 7, 7
            P shSL.Cells(shRow, ColumnPerName("RELATIONSHIP CODE")).Value, 7, 18
            P Format(shSL.Cells(shRow, ColumnPerName("DOB")).Value, "mm-dd-yyyy"), 7, 52
            P "   ", 9, 13
            P "   ", 9, 19
            P "    ", 9, 25
            If Trim(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value) <> "" Then
                P Format(Left(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 3), "000"), 9, 13
                P Format(Mid(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4, 3), "000"), 9, 19
                P Format(Right(shSL.Cells(shRow, ColumnPerName("PHONE NUMBER")).Value, 4), "0000"), 9, 25
            End If
            P "                         ", 10, 13
            P shSL.Cells(shRow, ColumnPerName("ADDRESS")).Value, 10, 13
            P "                        ", 12, 13
            If Trim(shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value) <> "" Then P shSL.Cells(shRow, ColumnPerName("SECOND ADDRESS FIELD")).Value, 12, 13
            P "     ", 10, 49
            P shSL.Cells(shRow, ColumnPerName("ZIP CODE")).Value, 10, 49
           
            emailExists = "Y"
            If Trim(shSL.Cells(shRow, ColumnPerName("EMAIL")).Value) = "" Then emailExists = "N"
            P emailExists, 7, 71
            P Format(shSL.Cells(shRow, ColumnPerName("MEMBER SSN")).Value, "000000000"), 8, 13
            Grptype = shSL.Cells(shRow, ColumnPerName("GROUP TYPE")).Value
            P Grptype, 8, 49
            If Grptype = "C" Then
                P "Y", 18, 6
                P shSL.Cells(shRow, ColumnPerName("COBRA QUALIFYING EVENT")).Value, 18, 19
                '*** Cobra Eff Date  'P shSL.Cells(shRow, ColumnPerName("COBRA START DATE")).Value, 18, X
            End If
            COB = shSL.Cells(shRow, ColumnPerName("COB")).Value
            If COB = "Y" Then
                P COB, 19, 6
            Else
                P "N", 19, 6
            End If
            
            
            .SendKeys ("<ENTER>")
            Sud
                

            'SUB
            WaitTill 2, 21, 30, "SUBSCRIBER ELIG - ADD COVERAGE"
            P Format(shSL.Cells(shRow, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value, "mmddyyyy"), 7, 26
            P Format(shSL.Cells(shRow, ColumnPerName("DATE OF HIRE")).Value, "mmddyyyy"), 8, 26
            Call SelectSuffixes(shRow)
            
            'DEPs
            tm = Now + TimeValue("00:00:20")
            While G(23, 2, 22) <> "LAST PRODUCT DISPLAYED"
                If Now >= tm Then
                    Stop
                End If
                For i = 1 To UBound(mtx)
                    If mtx(i, 3) = Trim(G(9, 13, 10)) Or mtx(i, 4) = Trim(G(9, 13, 10)) Or mtx(i, 5) = Trim(G(9, 13, 10)) Then
                        mfRow = 12
                        tm2 = Now + TimeValue("00:00:20")
                        While mfRow < 22 And Trim(G(mfRow, 4, 1)) <> ""
                            If Now >= tm2 Then
                                Stop
                            End If
                            If mtx(i, 3) = Trim(G(9, 13, 10)) Then
                                If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                    P "S", mfRow, 2
                                End If
                            End If
                            If mtx(i, 4) = Trim(G(9, 13, 10)) Then
                                If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                    P "S", mfRow, 2
                                End If
                            End If
                            If mtx(i, 5) = Trim(G(9, 13, 10)) Then
                                If Format(mtx(i, 1), "mmddyyyy") = G(mfRow, 57, 8) And mtx(i, 2) = G(mfRow, 66, 3) Then
                                    P "S", mfRow, 2
                                End If
                            End If
                            mfRow = mfRow + 1
                        Wend
                    End If
                Next i
                .SendKeys ("<PF5>")
                Sud
            Wend

            .SendKeys ("<PF10>")
            Sud
            .SendKeys ("<PF10>")
            Sud
            
            
            
            'Lang
            For i = 1 To UBound(mtx)
                For j = 10 To 22
                    If Trim(G(j, 29, 8)) = "" Then Exit For
                    If Format(mtx(i, 1), "mmddyyyy") = G(j, 29, 8) Then
                        If mtx(i, 6) = "" Then lng = "ENG" Else: lng = mtx(i, 6)
                        P lng, j, 61
                        P lng, j, 71
                    End If
                Next j
            Next i
            .SendKeys ("<PF10>")
            Sud
            .SendKeys ("<PF10>")
            Sud
        End If
    End With
End Sub

Sub GetPwd()
    Set SQLconn = CreateObject("ADODB.Connection")
    SQLconn.Open "Provider=SQLOLEDB.1;Password=" & shData.Range("SQLPwd").Value & ";Persist Security Info=True;User ID=" & shData.Range("SQLUsrID").Value & ";Initial Catalog=WlpLgData;Data Source=VA10PWVSQL354\CON01,20001;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=L8PNZ6R1;Use Encryption for Data=False;Tag with column collation when possible=False"
    Set SQLdata = CreateObject("ADODB.Recordset")
    With SQLdata
        .ActiveConnection = SQLconn
        .Open "SELECT TOP 1 pw FROM [WlpLgData].[dbo].[internal] WHERE un='AF07901'"
        shData.Range("mfPwd").CopyFromRecordset SQLdata
         .Close
    End With
    SQLconn.Close
    Set SQLdata = Nothing
    Set SQLconn = Nothing
End Sub
Attribute VB_Name = "ShapeMacros"
'*********************************************************************************************
'* Shape procedures                                                                          *
'* These procedures controls the behaviors of the shapes that are designed on the Admin page *
'* by Iggy Darsa                                                                             *
'* 7/1/2015                                                                                  *
'*********************************************************************************************

Sub EnableDisableCheckbox(ByVal shpName As String, ByVal val As Boolean)
    Application.ScreenUpdating = False
    shOUO.CheckBoxes(shpName).Enabled = val
    If val Then
        shOUO.CheckBoxes(shpName).Interior.Color = RGB(0, 176, 80)
    Else
        shOUO.CheckBoxes(shpName).Interior.Color = RGB(128, 128, 128)
    End If
End Sub

Sub EnableDisableProductsSold()
    Application.ScreenUpdating = False
    Select Case shData.Range("Grp").Value
        Case "Large"
          If shData.Range("State").Value = vbNullString Then
            Call EnableDisableCheckbox("Medical_Sel", False)
            Call EnableDisableCheckbox("Dental_Sel", False)
            Call EnableDisableCheckbox("Vision_Sel", False)
            Call EnableDisableCheckbox("FSA_Sel", False)
            Call EnableDisableCheckbox("Sup_Sel", False)
            Call EnableDisableCheckbox("Disability_Sel", False)
            Call EnableDisableCheckbox("Life_Sel", False)
          Else
            Call EnableDisableCheckbox("Medical_Sel", True)
            Call EnableDisableCheckbox("Dental_Sel", True)
            Call EnableDisableCheckbox("Vision_Sel", True)
            Call EnableDisableCheckbox("FSA_Sel", True)
            Call EnableDisableCheckbox("Sup_Sel", True)
            Call EnableDisableCheckbox("Disability_Sel", True)
            Call EnableDisableCheckbox("Life_Sel", True)
          End If
        Case "Small"
            If shData.Range("State").Value = vbNullString Then
                Call EnableDisableCheckbox("Medical_Sel", False)
                Call EnableDisableCheckbox("Dental_Sel", False)
                Call EnableDisableCheckbox("Vision_Sel", False)
                Call EnableDisableCheckbox("FSA_Sel", False)
                Call EnableDisableCheckbox("Sup_Sel", False)
                Call EnableDisableCheckbox("Disability_Sel", False)
                Call EnableDisableCheckbox("Life_Sel", False)
            Else
                Call EnableDisableCheckbox("Medical_Sel", True)
                Call EnableDisableCheckbox("Dental_Sel", True)
                Call EnableDisableCheckbox("Vision_Sel", True)
                Call EnableDisableCheckbox("FSA_Sel", False)
                Call EnableDisableCheckbox("Sup_Sel", False)
                Call EnableDisableCheckbox("Disability_Sel", True)
                Call EnableDisableCheckbox("Life_Sel", True)
            End If
        Case Else
                Call EnableDisableCheckbox("Medical_Sel", False)
                Call EnableDisableCheckbox("Dental_Sel", False)
                Call EnableDisableCheckbox("Vision_Sel", False)
                Call EnableDisableCheckbox("FSA_Sel", False)
                Call EnableDisableCheckbox("Sup_Sel", False)
                Call EnableDisableCheckbox("Disability_Sel", False)
                Call EnableDisableCheckbox("Life_Sel", False)
    End Select
End Sub

Sub ShowFlatAmountForm()
    Application.ScreenUpdating = False
    'Display the form
    With shOUO
        For i = 1 To 6
            .Shapes.Range(Array("tbClassDesc0" & i)).Visible = msoTrue
            .Shapes.Range(Array("tbAmount0" & i)).Visible = msoTrue
        Next i
        .Shapes.Range(Array("frameFAform")).Visible = msoTrue
        .Shapes.Range(Array("lblDescTitle")).Visible = msoTrue
        .Shapes.Range(Array("lblAmountTitle")).Visible = msoTrue
        .Shapes.Range(Array("btnSaveFlatAmount")).Visible = msoTrue
    End With
    
    'Load the data
    Select Case Selection
        Case "Basic Life"
            Call LoadFlatAmountDataToForm(shData.Range("CE4"))
        Case "Basic AD&D"
            Call LoadFlatAmountDataToForm(shData.Range("CG4"))
        Case "Optional Life"
            Call LoadFlatAmountDataToForm(shData.Range("CI4"))
        Case "Optional AD&D"
            Call LoadFlatAmountDataToForm(shData.Range("CK4"))
        Case "Voluntary Life"
            Call LoadFlatAmountDataToForm(shData.Range("CM4"))
        Case "Voluntary AD&D"
            Call LoadFlatAmountDataToForm(shData.Range("CO4"))
    End Select
End Sub

Sub HideFlatAmountForm()
    Application.ScreenUpdating = False
    With shOUO
        For i = 1 To 6
            .Shapes.Range(Array("tbClassDesc0" & i)).Visible = msoFalse
            .Shapes.Range(Array("tbAmount0" & i)).Visible = msoFalse
        Next i
        .Shapes.Range(Array("frameFAform")).Visible = msoFalse
        .Shapes.Range(Array("lblDescTitle")).Visible = msoFalse
        .Shapes.Range(Array("lblAmountTitle")).Visible = msoFalse
        .Shapes.Range(Array("btnSaveFlatAmount")).Visible = msoFalse
    End With
End Sub

Sub LoadFlatAmountDataToForm(ByRef rng As Range)
    Application.ScreenUpdating = False
    For i = 1 To 6
        shOUO.Shapes.Range(Array("tbClassDesc0" & i)).TextFrame2.TextRange.Characters.text = rng.Offset(i - 1, 0).Value
    Next i
    For i = 1 To 6
        shOUO.Shapes.Range(Array("tbAmount0" & i)).TextFrame2.TextRange.Characters.text = rng.Offset(i - 1, 1).Value
    Next i
End Sub

Sub ShowSalaryBasedForm()
    Application.ScreenUpdating = False
    'Display the form
    With shOUO
        For i = 1 To 6
            .Shapes.Range(Array("tbMult0" & i)).Visible = msoTrue
            .Shapes.Range(Array("tbClassName0" & i)).Visible = msoTrue
        Next i
        .Shapes.Range(Array("frameSBform")).Visible = msoTrue
        .Shapes.Range(Array("lblMultiplier")).Visible = msoTrue
        .Shapes.Range(Array("lblClassName")).Visible = msoTrue
        .Shapes.Range(Array("btnSaveSalaryBased")).Visible = msoTrue
    End With
    
    'Load the data
    Select Case Selection
        Case "Basic Life"
            Call LoadSalaryBasedDataToForm(shData.Range("CS4"))
        Case "Basic AD&D"
            Call LoadSalaryBasedDataToForm(shData.Range("CU4"))
        Case "Optional Life"
            Call LoadSalaryBasedDataToForm(shData.Range("CW4"))
        Case "Optional AD&D"
            Call LoadSalaryBasedDataToForm(shData.Range("CY4"))
        Case "Voluntary Life"
            Call LoadSalaryBasedDataToForm(shData.Range("DA4"))
        Case "Voluntary AD&D"
            Call LoadSalaryBasedDataToForm(shData.Range("DC4"))
    End Select
End Sub

Sub HideSalaryBasedForm()
    Application.ScreenUpdating = False
    With shOUO
        For i = 1 To 6
            .Shapes.Range(Array("tbMult0" & i)).Visible = msoFalse
            .Shapes.Range(Array("tbClassName0" & i)).Visible = msoFalse
        Next i
        .Shapes.Range(Array("frameSBform")).Visible = msoFalse
        .Shapes.Range(Array("lblMultiplier")).Visible = msoFalse
        .Shapes.Range(Array("lblClassName")).Visible = msoFalse
        .Shapes.Range(Array("btnSaveSalaryBased")).Visible = msoFalse
    End With
End Sub

Sub LoadSalaryBasedDataToForm(ByRef rng As Range)
    Application.ScreenUpdating = False
    For i = 1 To 6
        shOUO.Shapes.Range(Array("tbMult0" & i)).TextFrame2.TextRange.Characters.text = rng.Offset(i - 1, 0).Value
    Next i
    For i = 1 To 6
        shOUO.Shapes.Range(Array("tbClassName0" & i)).TextFrame2.TextRange.Characters.text = rng.Offset(i - 1, 1).Value
    Next i
End Sub

Sub populateDDL()
    Dim ddlHMO As Shape: Set ddlHMO = shOUO.Shapes("ddHMO")
    Dim ddlHMO2 As Shape: Set ddlHMO2 = shOUO.Shapes("ddHMO2")
    Dim ddlPPO As Shape: Set ddlPPO = shOUO.Shapes("ddPPO")
    'Dim ddlPPO2 As Shape: Set ddlPPO2 = shOUO.Shapes("ddPPO2")
    
    ddlHMO.ControlFormat.RemoveAllItems
    ddlHMO2.ControlFormat.RemoveAllItems
    ddlPPO.ControlFormat.RemoveAllItems
    'ddlPPO2.ControlFormat.RemoveAllItems
    
    '=INDEX(A2:A5,MATCH(TRUE,B2:B5,0))
    On Error Resume Next
    State = WorksheetFunction.Index(shData.Range("A:A"), WorksheetFunction.Match(True, shData.Range("B:B"), 0))
    
    For i = 2 To shNW.Range("A" & Rows.Count).End(xlUp).row
        If shNW.Range("A" & i).Value = State Then
            If shNW.Range("C" & i).Value = "HMO" Then
                ddlHMO.ControlFormat.AddItem (shNW.Range("B" & i).Value)
                ddlHMO2.ControlFormat.AddItem (shNW.Range("B" & i).Value)
            ElseIf shNW.Range("C" & i).Value = "PPO" Then
                ddlPPO.ControlFormat.AddItem (shNW.Range("B" & i).Value)
                'ddlPPO2.ControlFormat.AddItem (shNW.Range("B" & i).Value)
            End If
        End If
    Next i
    'shData.Visible = xlSheetVisible
End Sub

Sub PopulateStateDDL()
    Dim ddState As Shape: Set ddState = shOUO.Shapes("ddState")
    
    ddState.ControlFormat.RemoveAllItems
    
    If shData.Range("Grp").Value = "Large" Then
        For Each cl In shData.Range("LGState")
            ddState.ControlFormat.AddItem (cl.Value)
        Next cl
    ElseIf shData.Range("Grp").Value = "Small" Then
        For Each cl In shData.Range("SGState")
            ddState.ControlFormat.AddItem (cl.Value)
        Next cl
    Else
        Exit Sub
    End If
    shOUO.Shapes("ddState").ControlFormat.Value = DropDownIndex(shOUO.Shapes("ddState"), shData.Range("G5").Value)
End Sub
Attribute VB_Name = "StandAlone"
'*****************************************************************************************************
'* Stand Alone procedures                                                                            *
'* These procedures that are independant functions that is not necessarily tied with other functions *
'*****************************************************************************************************
Public Const startrow As Long = 7

Sub ShowHelp()
    frmHelp.Show 0
End Sub

Sub btn_AdminPage_Click()
    frmPassword.Show
End Sub

Function IsOutlookOpen() As Boolean
    Dim oOutlook As Object

    On Error Resume Next
    Set oOutlook = GetObject(, "Outlook.Application")
    On Error GoTo 0

    If oOutlook Is Nothing Then
        IsOutlookOpen = False
    Else
        IsOutlookOpen = True
    End If
End Function

'Function IsOutlookOpen2() As Boolean
'IsOutlookOpen2 = False
'End Function

Sub SendEmail()
    Call CoreValidation
    If ErrorCount > 0 Then
        response = MsgBox("There are at least " & ErrorCount & " errors." & vbLf & "Existing errors will delay the submission process." & _
            vbLf & vbLf & "Do you still want to email the file?" & vbLf & "YES: Submit anyway." & vbLf & "NO: Go back to Census.", vbYesNo, "Errors found")
        If response = vbNo Then Exit Sub
    End If
    Dim ToEmail As String: ToEmail = ""
    
    If shData.Range("grp").Value = "Large" Then
        If shData.Range("B2").Value = True Then 'California
            ToEmail = "Anthem.electronicenrollment@anthem.com"
        ElseIf shData.Range("B3").Value = True Or shData.Range("B4").Value = True Then 'Colorado & Nevada
            ToEmail = "Anthem.electronicenrollment@anthem.com"
        ElseIf shData.Range("B5").Value = True Then 'Georgia
            ToEmail = "Anthem.electronicenrollment@anthem.com"
        ElseIf shData.Range("B6").Value = True Then 'New York
            ToEmail = "NYCensusDentalMigration@anthem.com"
        ElseIf shData.Range("B7").Value Then ' Virginia
            ToEmail = "va-wgscensustool@anthem.com"
        ElseIf shData.Range("B8").Value = True Or shData.Range("B9").Value = True Or shData.Range("B10").Value = True Or shData.Range("B11").Value = True Or shData.Range("B12").Value = True Or shData.Range("B13").Value = True Or shData.Range("B14").Value = True Or shData.Range("B15").Value = True Then
            ToEmail = "crwgseetinquiries@anthem.com"
        End If
    Else
        If shData.Range("B2").Value = True Or shData.Range("B8").Value = True Then 'California & Connecticut
            ToEmail = "NEWSGUWCA@ANTHEM.COM"
            If Trim(shOUO.Range("B14").Value) <> "" Then ToEmail = ToEmail & "; " & Trim(shOUO.Range("B14").Value)
        ElseIf shData.Range("B3").Value = True Then 'Colorado
            ToEmail = "cosmallgroupnew@anthem.com; SGNewGroups@anthem.com"
            If Trim(shOUO.Range("B14").Value) <> "" Then ToEmail = ToEmail & "; " & Trim(shOUO.Range("B14").Value)
        ElseIf shData.Range("B4").Value = True Then 'Nevada
            ToEmail = "NVSGBroker@Anthem.com; David.McDuffie@anthem.com; SGNewGroups@anthem.com"
            If Trim(shOUO.Range("B14").Value) <> "" Then ToEmail = ToEmail & "; " & Trim(shOUO.Range("B14").Value)
        End If
    End If
    
    If IsOutlookOpen Then
        'Prepare file
        If Len(Dir("C:\ReportDownload", vbDirectory)) = 0 Then
           MkDir "C:\ReportDownload"
        End If
        
        xlsPath = "C:\ReportDownload\" & shOUO.Range("B6").Value & "_" & ActiveWorkbook.Name
        ActiveWorkbook.SaveCopyAs fileName:=xlsPath

        Dim ccEmail As String: ccEmail = ""
        Dim OutApp As Object
        Dim OutMail As Object
        Set OutApp = CreateObject("Outlook.Application")
        Dim subj As String: subj = "Census file - Case# " & shOUO.Range("B6").Value
        On Error GoTo cleanup
        Set OutMail = OutApp.CreateItem(0)
        On Error Resume Next
        If Trim(shOUO.Range("B11").Value) <> "" And Trim(shOUO.Range("B11").Value) <> "N/A" Then ccEmail = ccEmail & Trim(shOUO.Range("B11").Value) & "; "
        If Trim(shOUO.Range("B12").Value) <> "" And Trim(shOUO.Range("B12").Value) <> "N/A" Then ccEmail = ccEmail & Trim(shOUO.Range("B12").Value) & "; "
        If Trim(shOUO.Range("B13").Value) <> "" And Trim(shOUO.Range("B13").Value) <> "N/A" Then ccEmail = ccEmail & Trim(shOUO.Range("B13").Value) & "; "
        If shData.Range("grp").Value = "Large" Then
            If Trim(shOUO.Range("B14").Value) <> "" And Trim(shOUO.Range("B14").Value) <> "N/A" Then ccEmail = ccEmail & Trim(shOUO.Range("B14").Value) & "; "
        End If
        If Trim(shOUO.Range("B15").Value) <> "" And Trim(shOUO.Range("B15").Value) <> "N/A" Then ccEmail = ccEmail & Trim(shOUO.Range("B15").Value)
        With OutMail
            .To = ToEmail
            .CC = ccEmail
            .Subject = subj
            .Body = "This email is not necessarily secured. Please take necessary actions before sending." & vbLf & vbLf & _
                    "Case Name: " & shOUO.Range("B5").Value & vbLf & _
                    "Case Number: " & shOUO.Range("B6").Value
                    
            .Attachments.Add xlsPath
'            path1000 = "C:\ReportDownload\internal_ak3s_k3s_elig_00.txt"
'            If ErrorCount = 0 Then
'                Call Export1kFile
'                If Dir(path1000) <> "" Then .Attachments.Add path1000
'            End If
            .display
        End With
        On Error GoTo 0
        Set OutMail = Nothing
cleanup:
        Set OutApp = Nothing
        Application.ScreenUpdating = True
    Else
        If ccEmail <> "" Then
            MsgBox "Your Outlook application is not open or it does not exist." & vbLf & "Please use your email client to send the census to " & ToEmail & " and CC to " & Trim(shOUO.Range("B15").Value), vbExclamation, "Outlook is not accessible"
        Else
            MsgBox "Your Outlook application is not open or it does not exist." & vbLf & "Please use your email client to send the census to " & ToEmail, vbExclamation, "Outlook is not accessible"
        End If
    End If
End Sub

Sub ShowBundleForm()
    If shData.Range("E5") = True Then
        frmBundle.Show 0
    Else
        MsgBox "Please first select ""Life / AD&D"" from the Products Sold section."
    End If
End Sub


Sub ExportError()
    Dim ErrorWB As Workbook
    Dim thisWB As Workbook: Set thisWB = ThisWorkbook
    Dim lr As Long: lr = shSL.Range("B" & Rows.Count).End(xlUp).row
    Dim i As Long, j As Long
    Dim destRow As Long: destRow = 2
    Dim missInfo As String
    Dim errorInRow As Boolean: errorInRow = False
    Dim sh As Worksheet
    
    'Create the file
    Set ErrorWB = Workbooks.Add
    thisWB.Activate
    
    'Populate the file
    With ErrorWB.Worksheets("Sheet1")
        .Range("A1").Value = "Date"
        .Range("B1").Value = "Emp Name"
        .Range("C1").Value = "SSN"
        .Range("D1").Value = "Missing Info"
        
        For i = 7 To lr 'Rows
            errorInRow = False
            missInfo = ""
            For j = 2 To 300 'Columns
                If Cells(i, j).Interior.ColorIndex = 3 And Not Columns(j).Hidden Then
                    errorInRow = True
                    missInfo = missInfo & Cells(5, j).Value & vbLf
                End If
            Next j
            If errorInRow Then
                .Range("A" & destRow).Value = Format(DateTime.Now, "mm/dd/yyyy")
                .Range("B" & destRow).Value = Range("D" & i).Value & " " & Range("C" & i).Value
                .Range("C" & destRow).Value = Format(Range("B" & i).Value, "000-00-0000")
                .Range("D" & destRow).Value = missInfo
                destRow = destRow + 1
            End If
        Next i
        'Final touch
        .Range("A1:D1").Font.Bold = True
        .Range("A:D").VerticalAlignment = xlTop
        .Columns("A:D").ColumnWidth = 40
        .Columns("A:D").EntireColumn.AutoFit
        .Rows("2:" & destRow).EntireRow.AutoFit
    End With

    'Delete unnecessary sheets
    Application.DisplayAlerts = False
    For Each sh In ErrorWB.Worksheets
        If sh.Name <> "Sheet1" Then
            sh.Delete
        End If
    Next sh

    ErrorWB.Activate
    MsgBox "Done"
End Sub

Sub DuplicateMemberForDep()
Attribute DuplicateMemberForDep.VB_ProcData.VB_Invoke_Func = "k\n14"
    lr = AreaLastRow
    If lr >= 7 Then
        shSL.Unprotect
        shSL.Cells(lr + 1, ColumnPerName("CASE")).Value = shSL.Cells(lr, ColumnPerName("CASE")).Value
        shSL.Cells(lr + 1, ColumnPerName("EMPLOYEES SOCIAL")).Value = shSL.Cells(lr, ColumnPerName("EMPLOYEES SOCIAL")).Value
        shSL.Cells(lr + 1, ColumnPerName("EMAIL")).Value = shSL.Cells(lr, ColumnPerName("EMAIL")).Value
        shSL.Cells(lr + 1, ColumnPerName("GROUP TYPE")).Value = shSL.Cells(lr, ColumnPerName("GROUP TYPE")).Value
        shSL.Cells(lr + 1, ColumnPerName("PHONE NUMBER")).Value = shSL.Cells(lr, ColumnPerName("PHONE NUMBER")).Value
        shSL.Cells(lr + 1, ColumnPerName("ADDRESS")).Value = shSL.Cells(lr, ColumnPerName("ADDRESS")).Value
        shSL.Cells(lr + 1, ColumnPerName("CITY")).Value = shSL.Cells(lr, ColumnPerName("CITY")).Value
        shSL.Cells(lr + 1, ColumnPerName("STATE")).Value = shSL.Cells(lr, ColumnPerName("STATE")).Value
        shSL.Cells(lr + 1, ColumnPerName("ZIP CODE")).Value = shSL.Cells(lr, ColumnPerName("ZIP CODE")).Value
        shSL.Cells(lr + 1, ColumnPerName("SECOND ADDRESS FIELD")).Value = shSL.Cells(lr, ColumnPerName("SECOND ADDRESS FIELD")).Value
        shSL.Cells(lr + 1, ColumnPerName("LANGUAGE")).Value = shSL.Cells(lr, ColumnPerName("LANGUAGE")).Value
        shSL.Cells(lr + 1, ColumnPerName("JOB TITLE")).Value = shSL.Cells(lr, ColumnPerName("JOB TITLE")).Value
        shSL.Cells(lr + 1, ColumnPerName("COB")).Value = shSL.Cells(lr, ColumnPerName("COB")).Value
        shSL.Cells(lr + 1, ColumnPerName("DATE OF HIRE")).Value = shSL.Cells(lr, ColumnPerName("DATE OF HIRE")).Value
        shSL.Cells(lr + 1, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value = shSL.Cells(lr, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value
        shSL.Cells(lr + 1, ColumnPerName("COBRA START DATE")).Value = shSL.Cells(lr, ColumnPerName("COBRA START DATE")).Value
        shSL.Protect
    End If
End Sub

Sub PCPcomment()
    'Default gray comment for PCP
    shSL.Unprotect
    Call EventDisable
    shSL.Cells(6, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value = "Alphanumeric" & vbLf & "if product is HMO"
    If shData.Range("grp").Value = "Small" And shData.Range("state").Value = "CALIFORNIA" Then
        shSL.Cells(6, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value = "Alphanumeric"
    End If
    Call EventEnable
    shSL.Protect
End Sub
Attribute VB_Name = "StateSelection"
'**************************************************************************************
'* State driven procedures                                                            *
'* Based on the state selection on the Admin page, the list if products are populated *
'* by Iggy Darsa                                                                      *
'* 7/1/2015                                                                           *
'**************************************************************************************

Sub ddState_Selection()
    Dim rng As Range
    
    Select Case shOUO.Shapes("ddState").ControlFormat.list(shOUO.Shapes("ddState").ControlFormat.Value)
        Case "California"
            Set rng = shData.Range("B2")
            Call SetStateToTrue(rng)
            Call CA_Selection_Click
        Case "Colorado"
            Set rng = shData.Range("B3")
            Call CO_Selection_Click
        Case "Nevada"
            Set rng = shData.Range("B4")
            Call NV_Selection_Click
        Case "Georgia"
            Set rng = shData.Range("B5")
            Call GA_Selection_Click
        Case "New York"
            Set rng = shData.Range("B6")
        Case "Virginia"
            Set rng = shData.Range("B7")
        Case "Connecticut"
            Set rng = shData.Range("B8")
            Call CT_Selection_Click
        Case "Indiana"
            Set rng = shData.Range("B9")
        Case "Kentucky"
            Set rng = shData.Range("B10")
        Case "Missouri"
            Set rng = shData.Range("B11")
        Case "Ohio"
            Set rng = shData.Range("B12")
        Case "Wisconsin"
            Set rng = shData.Range("B13")
        Case "New Hampshire"
            Set rng = shData.Range("B14")
        Case "Maine"
            Set rng = shData.Range("B15")
            Call ME_Selection_Click
    End Select
     If shData.Range("state").Value = vbNullString Then Call HidePRoductsIfNoStateSelected
    Call SetStateToTrue(rng)
    Call EnableDisableProductsSold
    Call PopulateStateDDL
End Sub

Sub CA_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
    If shData.Range("grp").Value = "Small" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoTrue
        
        Call populateDDL
    End If
End Sub
Sub CO_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
    If shData.Range("grp").Value = "Small" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
End Sub

Sub CT_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
    If shData.Range("grp").Value = "Small" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
End Sub

Sub ME_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
    If shData.Range("grp").Value = "Small" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
End Sub

Sub NV_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
    If shData.Range("grp").Value = "Small" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
End Sub
Sub GA_Selection_Click()
    shData.Range("G7").Value = shData.Range("state").Value
End Sub

Sub HidePRoductsIfNoStateSelected()
    Application.ScreenUpdating = False
    Clear.ClearOfficeUseOnly
End Sub

Sub SetStateToTrue(ByVal rng As Range)
    lr = shData.Range("B" & Rows.Count).End(xlUp).row
    shData.Range("B2:B" & lr).Value = False
    If Not rng Is Nothing Then rng.Value = True
End Sub
Attribute VB_Name = "Suffix"
Sub Button1_Click()
    shSfx.Visible = xlSheetVeryHidden
    shOUO.Activate
    Call Match_Suffix_Click
End Sub
Attribute VB_Name = "SuffixPerProduct"
'*********************************************************************************************
'* Specialty product preperation procedures                                                  *
'* Specialty products are reorgnized and prepared in Admin page for the usage of Client Page *
'* by Iggy Darsa                                                                             *
'* 7/1/2015                                                                                  *
'*********************************************************************************************

Sub DisabilityPerProduct()
    Call DisabilityPerProductSubProcedure("EH", "ME") 'STD
    Call DisabilityPerProductSubProcedure("EI", "MF") 'LTD
    Call DisabilityPerProductSubProcedure("EJ", "MG") 'VSTD
    Call DisabilityPerProductSubProcedure("EK", "MH") 'VLTD
    Call DisabilityPerProductSubProcedure("EL", "MI") 'Buy-Up
End Sub


Sub DisabilityPerProductSubProcedure(ByVal col As String, ByVal col2 As String)
    lrSrc = shData.Range("DY" & Rows.Count).End(xlUp).row
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    shData.Range(col & "3:" & col & lrDst).ClearContents
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    For i = 3 To lrSrc
        If InStr(1, shData.Range("DY" & i).Value, shData.Range(col & "2").Value, vbTextCompare) > 0 Then
        'If shData.Range("DY" & i).Value = shData.Range(col & "2").Value Then
            shData.Range(col & lrDst).Value = shData.Range("DZ" & i).Value
            shData.Range(col2 & lrDst).Value = shData.Range("DY" & i).Value
            lrDst = lrDst + 1
        End If
    Next i
End Sub


Sub LifePerProduct()
    Call LifePerProductSubProcedure("EN", "MK") 'Basic
    Call LifePerProductSubProcedure("EO", "ML") 'Optional
    Call LifePerProductSubProcedure("EP", "MM") 'Voluntary
    Call LifePerProductSubProcedure("EQ", "MN") 'Basic Dep
    Call LifePerProductSubProcedure("ER", "MO") 'Optional Dep
    Call LifePerProductSubProcedure("ES", "MP") 'Voluntary Dep
End Sub


Sub LifePerProductSubProcedure(ByVal col As String, ByVal col2 As String)
    lrSrc = shData.Range("EB" & Rows.Count).End(xlUp).row
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    shData.Range(col & "3:" & col & lrDst).ClearContents
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    For i = 3 To lrSrc
        If InStr(1, shData.Range("EB" & i).Value, shData.Range(col & "2").Value, vbTextCompare) > 0 Then
        'If shData.Range("EB" & i).Value = shData.Range(col & "2").Value Then
            shData.Range(col & lrDst).Value = shData.Range("EC" & i).Value
            shData.Range(col2 & lrDst).Value = shData.Range("EB" & i).Value
            lrDst = lrDst + 1
        End If
    Next i
End Sub

Sub ADDPerProduct()
    Call ADDPerProductSubProcedure("EU", "MR") 'Basic
    Call ADDPerProductSubProcedure("EV", "MS") 'Optional
    Call ADDPerProductSubProcedure("EW", "MT") 'Voluntary
    Call ADDPerProductSubProcedure("EX", "MU") 'Basic Dep
    Call ADDPerProductSubProcedure("EY", "MV") 'Optional Dep
    Call ADDPerProductSubProcedure("EZ", "MW") 'Voluntary Dep
End Sub


Sub ADDPerProductSubProcedure(ByVal col As String, ByVal col2 As String)
    lrSrc = shData.Range("EE" & Rows.Count).End(xlUp).row
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    shData.Range(col & "3:" & col & lrDst).ClearContents
    lrDst = shData.Range(col & Rows.Count).End(xlUp).row + 1
    For i = 3 To lrSrc
        If InStr(1, shData.Range("EE" & i).Value, shData.Range(col & "2").Value, vbTextCompare) > 0 Then
        'If shData.Range("EE" & i).Value = shData.Range(col & "2").Value Then
            shData.Range(col & lrDst).Value = shData.Range("EF" & i).Value
            shData.Range(col2 & lrDst).Value = shData.Range("EE" & i).Value
            lrDst = lrDst + 1
        End If
    Next i
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Activate()
    If Environ("userdomain") = shData.Range("domain").Value Or Environ("userdomain") = shData.Range("domainNY").Value Then
        shSL.Shapes("btn_AdminPage").Visible = msoTrue
        shSL.Shapes("btn_DCN").Visible = msoTrue
        shSL.Shapes("btn_ExpErr").Visible = msoTrue
        shSL.Shapes("btn_1000").Visible = msoTrue
        shSL.Shapes("gb_FIUO").Visible = msoTrue
        shSL.Shapes("btn_YYYYMMDD").Visible = msoTrue
        'shSL.Shapes("btn_Import").Visible = msoTrue
        If shData.Range("I73").Value = True Then 'If DeCare
            shSL.Shapes("btn_DeCareExport").Visible = msoTrue
            shSL.Shapes("gb_FIUO").Width = 750
        Else
            shSL.Shapes("btn_DeCareExport").Visible = msoFalse
            shSL.Shapes("gb_FIUO").Width = 610
        End If
    Else
        shSL.Shapes("btn_AdminPage").Visible = msoFalse
        shSL.Shapes("btn_DCN").Visible = msoFalse
        shSL.Shapes("btn_ExpErr").Visible = msoFalse
        shSL.Shapes("btn_1000").Visible = msoFalse
        shSL.Shapes("gb_FIUO").Visible = msoFalse
        shSL.Shapes("btn_YYYYMMDD").Visible = msoFalse
        'shSL.Shapes("btn_Import").Visible = msoFalse
        shSL.Shapes("btn_DeCareExport").Visible = msoFalse
    End If

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    response = MsgBox("Unsaved data will be lost." & vbLf & "Do you want to continue with exiting?", vbYesNo, "Are you sure?")
    If response = vbNo Then
        Cancel = True
    Else
        ThisWorkbook.Saved = True
    End If
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If shData.Range("G80").Value <> True Then
        response = MsgBox("You have not completed the validation." & vbLf & "The client will not be able to see the 'New Enrollments & Renewals' and 'Terminations' tab without the validation" & vbLf & _
            "Would you like to save anyways?" & vbLf & vbLf & "YES: Save anyways." & vbLf & _
            "NO: Go back to the Census Tool", vbYesNo, "Please Validate!")
        If response = vbNo Then
            Cancel = True
        End If
    End If
    
    'Force to save as XLSB
    Dim txtFileName As String
    '1. Check of Save As was used.
    If SaveAsUI = True Then
        Cancel = True
    '2. Call up your own dialog box.  Cancel out if user Cancels in the dialog box.
        txtFileName = Application.GetSaveAsFilename("", "Excel Binary Workbook (*.xlsb), *.xlsb, " & _
                                                        "Excel Macro Enabled Workbook (*.xlsm), *.xlsm", , "Save As XLSB or XLSM file")
        If txtFileName = "False" Then
            MsgBox "Action Cancelled", vbOKOnly
            Cancel = True
            Exit Sub
        End If
    '3. Save the file.
        Application.EnableEvents = False
        ThisWorkbook.SaveAs fileName:=txtFileName ', FileFormat:=xlOpenXMLWorkbookMacroEnabled
        Application.EnableEvents = True
    End If
End Sub

Private Sub Workbook_NewSheet(ByVal sh As Object)
    Application.DisplayAlerts = False
    sh.Delete
    Application.DisplayAlerts = True
End Sub

Private Sub Workbook_Open()
    
    On Error Resume Next
    'Call OnKeyDownDefault 'Defaults behavior
    
    If shSL.Visible = xlSheetVisible And CurrentUserDomain <> shData.Range("domain").Value And CurrentUserDomain <> shData.Range("domainNY").Value Then
        frmTerms.Show
    ElseIf shSL.Visible <> xlSheetVisible And Trim(shData.Range("grp").Value) = "" Then
        frmGrpUsr.Show
    End If
    
    'Assign Macro to Network ComboBoxes
    shOUO.Shapes("ddHMO").OnAction = "PopulateHMOPPOinData"
    shOUO.Shapes("ddHMO2").OnAction = "PopulateHMOPPOinData"
    shOUO.Shapes("ddPPO").OnAction = "PopulateHMOPPOinData"
    shOUO.Shapes("ddPPO2").OnAction = "PopulateHMOPPOinData"
    
    'Default gray comment for PCP
    shSL.Unprotect
    Application.EnableEvents = False
    shSL.Cells(6, ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")).Value = "Alphanumeric" & vbLf & "if product is HMO"
    Application.EnableEvents = True
    shSL.Protect
    
    'Inform internal user if an external party filled the admin page
    If (CurrentUserDomain = shData.Range("domain").Value Or CurrentUserDomain = shData.Range("domainNY").Value) And shData.Range("usr").Value = "External" And shSL.Visible = xlSheetVisible Then
        MsgBox "Admin page is filled by an External User." & vbLf & "Please correct the suffixes by clicking on the 'Match Suffix' button on Admin page before continuing.", vbCritical, "Attention"
        shOUO.Shapes("Match_Suffix").Visible = msoTrue
    End If
    
End Sub
Attribute VB_Name = "Utilities"
'************************************************************************************
'* Utilities procedures                                                             *
'* Commonly used procedures to make the coders' job easier are gathered here        *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************
Global userName As String
Global pwd As String
Global sFolder As String
Global sDFile As String
Global shr As String 'On=Onshore, Acc=Accenture, Cog=Cognizant, Unk=Unknown
Function ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, MyRange)
    If lastusedrow >= startrow Then
        On Error Resume Next
        For i = startrow To lastusedrow
            If Not Trim(shSL.Cells(i, ProdCol).Value) = "" Then
                shSL.Cells(i, ProdCol).Value = WorksheetFunction.VLookup(shSL.Cells(i, ProdColName).Value, shData.Range(MyRange), 2, False)
            End If
        Next i
    End If
End Function
Function ColumnPerName(ByVal Fieldname As String) As Long
    On Error Resume Next
    ColumnPerName = Application.WorksheetFunction.Match(Fieldname, shSL.Range("A5:ZZ5"), 0)
End Function
Function ColumnPerNamePlans(ByVal Fieldname As String) As Long
    On Error Resume Next
    ColumnPerNamePlans = Application.WorksheetFunction.Match(Fieldname, shPlans.Range("A2:EJ2"), 0)
End Function
Function ColumnPerNameData(ByVal Fieldname As String) As Long
    On Error Resume Next
    ColumnPerNameData = Application.WorksheetFunction.Match(Fieldname, shData.Range("GG2:HB2"), 0)
    ColumnPerNameData = ColumnPerNameData + 188
End Function
Function ColumnPerNameSB(ByVal Fieldname As String) As Long
    On Error Resume Next
    ColumnPerNameSB = Application.WorksheetFunction.Match(Fieldname, shSB.Range("A5:ZZ5"), 0)
End Function

Function ColumnPerName4Term(ByVal Fieldname As String) As Long
    On Error Resume Next
    ColumnPerName4Term = Application.WorksheetFunction.Match(Fieldname, shTerm.Range("A5:ZZ5"), 0)
End Function

Function IsLetterOrSpace(ByVal strValue As String) As Boolean
    Dim intPos As Integer
    For intPos = 1 To Len(strValue)
        Select Case Asc(Mid(strValue, intPos, 1))
            ' 65-90 --> A-Z
            ' 97-122 --> a-z
            ' 44-47 --> ,-./
            ' 32 --> space
            ' 39 --> '
            Case 32, 65 To 90, 97 To 122
                IsLetterOrSpace = True
            Case Else
                IsLetterOrSpace = False
                Exit For
        End Select
    Next
End Function

Function RemoveSpecialChar(ByVal strValue As String, ByVal SpecialCharacters As String, ByVal spaceOK As Boolean)
    Dim newString As String: newString = strValue
    
    For Each char In Split(SpecialCharacters, " ")
        newString = Replace(newString, char, "")
    Next char
    If Not spaceOK Then
        newString = Replace(newString, " ", "")
    End If
    RemoveSpecialChar = newString
End Function

Function ChangeSpecialCharToSpace(ByVal strValue As String, ByVal SpecialCharacters As String)
    Dim newString As String: newString = strValue
    
    For Each char In Split(SpecialCharacters, " ")
        newString = Replace(newString, char, " ")
    Next char
    newString = Replace(newString, "  ", " ")
    ChangeSpecialCharToSpace = newString
End Function

Sub ErrorHighlight(ByRef rng As Range)
'    On Error Resume Next
    rng.Interior.Color = 255
    shData.Range("H80").Value = False
End Sub

'   If there are any cells that are highlighted in red, removes it as an initial step.
Sub ClearErrorHighlights()
'    On Error Resume Next
    shSL.Range(shSL.Cells(7, 1), shSL.Cells(Rows.Count, Columns.Count)).Interior.Pattern = xlNone
End Sub

Sub ClearErrorHighlights4Term()
'    On Error Resume Next
    shTerm.Range(shTerm.Cells(7, 1), shTerm.Cells(Rows.Count, Columns.Count)).Interior.Pattern = xlNone
End Sub

Function AreaLastColumn() As Long
    AreaLastColumn = ColumnPerName("ANTHEM COMMENTS")
End Function

Function AreaLastColumn4Term() As Long
    AreaLastColumn4Term = ColumnPerName4Term("CURRENT PCP")
End Function

Function AreaLastRow() As Long
    lc = AreaLastColumn
    lr = shSL.Cells(Rows.Count, 1).End(xlUp).row
    For i = 2 To lc
        If shSL.Cells(Rows.Count, i).End(xlUp).row > lr Then
            lr = shSL.Cells(Rows.Count, i).End(xlUp).row
        End If
    Next i
    AreaLastRow = lr
End Function

Function AreaLastRow4Term() As Long
    lc = AreaLastColumn4Term
    lr = shTerm.Cells(Rows.Count, 1).End(xlUp).row
    For i = 2 To lc
        If shTerm.Cells(Rows.Count, i).End(xlUp).row > lr Then
            lr = shTerm.Cells(Rows.Count, i).End(xlUp).row
        End If
    Next i
    AreaLastRow4Term = lr
End Function
Function ErrorCount() As Long
    lc = AreaLastColumn
    lr = AreaLastRow
    counter = 0
    For Each cl In shSL.Range(shSL.Cells(7, 1), shSL.Cells(lr, lc))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    If counter > 0 Then
        shData.Range("H80").Value = False
    Else
        shData.Range("H80").Value = True
    End If
    ErrorCount = counter
End Function

Function ErrorCount4Term() As Long
    lc = AreaLastColumn4Term
    lr = AreaLastRow4Term
    counter = 0
    For Each cl In shTerm.Range(shTerm.Cells(7, 1), shTerm.Cells(lr, lc))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    If counter > 0 Then
        shData.Range("I80").Value = False
    Else
        shData.Range("I80").Value = True
    End If
    ErrorCount4Term = counter
End Function

Function ErrorCountPerRecord(ByVal r As Long) As Long
    lc = AreaLastColumn
    counter = 0
    For Each cl In shSL.Range(shSL.Cells(r, 1), shSL.Cells(r, lc))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    ErrorCountPerRecord = counter
End Function

Function ErrorCountPerRecord4Term(ByVal r As Long) As Long
    lc = AreaLastColumn4Term
    counter = 0
    For Each cl In shTerm.Range(shTerm.Cells(r, 1), shTerm.Cells(r, lc))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    ErrorCountPerRecord4Term = counter
End Function

Function ErrorCountPerSection(ByVal r As Long, ByVal colStart As Long, ByVal colEnd As Long) As Long
    counter = 0
    For Each cl In shSL.Range(shSL.Cells(r, colStart), shSL.Cells(r, colEnd))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    ErrorCountPerSection = counter
End Function

Function ErrorCountPerSection4Term(ByVal r As Long, ByVal colStart As Long, ByVal colEnd As Long) As Long
    counter = 0
    For Each cl In shTerm.Range(shTerm.Cells(r, colStart), shTerm.Cells(r, colEnd))
        If cl.Interior.Color = 255 Then counter = counter + 1
    Next cl
    ErrorCountPerSection4Term = counter
End Function

Function MemberCount() As Long
    MemberCount = AreaLastRow - 6
End Function

Function MemberCount4Term() As Long
    MemberCount4Term = AreaLastRow4Term - 6
End Function

Function BadMemberCount() As Long
    Count = 0
    For i = 1 To MemberCount
        If ErrorCountPerRecord(i + 6) > 0 Then
            Count = Count + 1
        End If
    Next i
    BadMemberCount = Count
End Function

Function BadMemberCount4Term() As Long
    Count = 0
    For i = 1 To MemberCount4Term
        If ErrorCountPerRecord4Term(i + 6) > 0 Then
            Count = Count + 1
        End If
    Next i
    BadMemberCount4Term = Count
End Function

Function GoodMemberCount() As Long
    GoodMemberCount = MemberCount - BadMemberCount
End Function

Function GoodMemberCount4Term() As Long
    GoodMemberCount4Term = MemberCount4Term - BadMemberCount4Term
End Function

Function GoodPercent() As Double
    If MemberCount > 0 Then
        GoodPercent = GoodMemberCount / MemberCount
    Else
        GoodPercent = 0
    End If
End Function

Function GoodPercent4Term() As Double
    If MemberCount4Term > 0 Then
        GoodPercent4Term = GoodMemberCount4Term / MemberCount4Term
    Else
        GoodPercent4Term = 0
    End If
End Function

Function BadPercent() As Double
    If MemberCount > 0 Then
        BadPercent = BadMemberCount / MemberCount
    Else
        BadPercent = 0
    End If
End Function

Function BadPercent4Term() As Double
    If MemberCount4Term > 0 Then
        BadPercent4Term = BadMemberCount4Term / MemberCount4Term
    Else
        BadPercent4Term = 0
    End If
End Function

Function startCol(ByVal str As String) As Long
    col = 0
    Select Case str
        Case "DEMO", "DEMOGRAPHIC", "DEMOGRAPHICS"
           col = ColumnPerName("CASE")
        Case "MED", "MEDICAL"
            col = ColumnPerName("MEDICAL PRODUCT")
        Case "DEN", "DENT", "DENTAL"
            col = ColumnPerName("DENTAL PRODUCT")
        Case "VIS", "VISION"
            col = ColumnPerName("VISION PRODUCT")
        Case "FSA"
            col = ColumnPerName("FSA PRODUCT")
        Case "DIS", "DISABILITY"
            col = ColumnPerName("STD")
        Case "LIF", "LIFE"
            col = ColumnPerName("BASIC LIFE")
        Case "ADD", "AD&D"
            col = ColumnPerName("BASIC AD&D")
        Case "COB", "COBRA"
            col = ColumnPerName("COBRA START DATE")
        Case "MEDI", "MEDICARE"
            col = ColumnPerName("MEDICARE HIB ID")
        Case "PRIME", "COMPLETE", "PRIME/COMPLETE", "PRIME / COMPLETE", "P/C", "PC"
            col = ColumnPerName("FTS (PRIME/COMPLETE)")
    End Select
    startCol = col
End Function

Function endCol(ByVal str As String) As Long
    col = 0
    Select Case str
        Case "DEMO", "DEMOGRAPHIC", "DEMOGRAPHICS"
           col = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
        Case "MED", "MEDICAL"
            col = ColumnPerName("CURRENT PCP")
        Case "DEN", "DENT", "DENTAL"
            col = ColumnPerName("DENTAL OFFICE")
        Case "VIS", "VISION"
            col = ColumnPerName("VISION PRODUCT NAME")
        Case "FSA"
            col = ColumnPerName("FSA PRODUCT NAME")
        Case "DIS", "DISABILITY"
            col = ColumnPerName("BUY-UP LTD")
        Case "LIF", "LIFE"
            col = ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")
        Case "ADD", "AD&D"
            col = ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")
        Case "COB", "COBRA"
            col = ColumnPerName("COBRA QUALIFYING EVENT")
        Case "MEDI", "MEDICARE"
            col = ColumnPerName("MEDICARE PART B EFF DATE")
        Case "PRIME", "COMPLETE", "PRIME/COMPLETE", "PRIME / COMPLETE", "P/C", "PC"
            col = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
    End Select
    endCol = col
End Function

Sub RemoveGapsOnOUO(ByVal col As Long)
    lr = shOUO.Cells(Rows.Count, col).End(xlUp).row
    For i = 6 To lr
        For j = 6 To lr
            If shOUO.Cells(j, col).Value = "" Then
                blankRow = j
                Exit For
            End If
        Next j
        If Not IsEmpty(blankRow) Then
            If i > blankRow And shOUO.Cells(i, col).Value <> "" Then
                Application.EnableEvents = False
                shOUO.Cells(blankRow, col).Value = shOUO.Cells(i, col).Value
                shOUO.Cells(i, col).Value = ""
                Application.EnableEvents = True
            End If
        End If
    Next i
End Sub

Function nn() As String 'returns the current minute
    nn = Format(Now, "nn") '00 - 59
End Function

Sub YYYYMMDD_To_MMDDYYYY()
    shSL.Unprotect
    Application.EnableEvents = False
    Dim rng As Range
    Set rng = Selection
    For Each cl In rng
        sDate = CStr(cl.Value)
        cl.Value = DateSerial(Left(sDate, 4), Mid(sDate, 5, 2), Right(sDate, 2))
    Next cl
    Application.EnableEvents = True
    shSL.Protect
End Sub

Sub EventEnable()
    Application.EnableEvents = True
End Sub
Sub EventDisable()
    Application.EnableEvents = False
End Sub

Function DropDownIndex(ByVal obj As Object, ByVal lookupStr As String)
    retVal = 0
    For i = 1 To obj.ControlFormat.ListCount
        If UCase(obj.ControlFormat.list(i)) = UCase(lookupStr) Then
            retVal = i
            Exit For
        End If
    Next i
    DropDownIndex = retVal
End Function

Sub Clear0sOnSL(ByVal startR As Long, ByVal endR As Long, ByVal col As Long)
    For i = startR To endR
        If shSL.Cells(i, col).Value = 0 Then shSL.Cells(i, col).ClearContents
    Next i
End Sub

Sub Clear0sOnTerm(ByVal startR As Long, ByVal endR As Long, ByVal col As Long)
    For i = startR To endR
        If shTerm.Cells(i, col).Value = 0 Then shTerm.Cells(i, col).ClearContents
    Next i
End Sub

Sub MakeAsteriskRed(ByRef rng As Range)
    startPosition = InStr(rng.Value, "*")
    If startPosition <> 0 Then
        With rng.Characters(Start:=startPosition, Length:=1).Font
            .Color = vbRed
        End With
    End If
End Sub

Function LoopLookup(ByVal lookupVal As String, ByVal lookupTable As Range, ByVal lookupIndex As Long)
    'Sample: LoopLookup(shData.Range("DS4").Value, shData.Range("DP:DP"), 1)
    retVal = lookupVal
    For Each cl In lookupTable
        If cl.Value = "" Then Exit For
        If cl.Value = lookupVal Then
            retVal = cl.Offset(, lookupIndex).Value
            Exit For
        End If
    Next cl
    LoopLookup = retVal
End Function

Function Col_Letter(lngCol As Long) As String
    Dim vArr
    vArr = Split(Cells(1, lngCol).Address(True, False), "$")
    Col_Letter = vArr(0)
End Function

Function IsIggy() As Boolean
    IsIggy = (UCase(Environ("username")) = "AD37580")
End Function

Function CurrentUserDomain() As String
    CurrentUserDomain = UCase(Environ("userdomain"))
End Function

Sub FindReplaceAllInSLandTerm(ByVal oldText As String, ByVal newText As String)
    shSL.Cells.Replace What:=oldText, Replacement:=newText, LookAt:=xlPart, SearchOrder:=xlByRows
    shTerm.Cells.Replace What:=oldText, Replacement:=newText, LookAt:=xlPart, SearchOrder:=xlByRows
End Sub



Function FolderExists(ByVal Path As String) As Boolean
    fe = False
    On Error Resume Next
    fe = Dir(Path, vbDirectory) <> ""
    
    FolderExists = fe
End Function

Sub GetPwd()
    Set SQLconn = CreateObject("ADODB.Connection")
    SQLconn.Open "Provider=SQLOLEDB.1;Password=" & shData.Range("SQLPwd").Value & ";Persist Security Info=True;User ID=" & shData.Range("SQLUsrID").Value & ";Initial Catalog=WlpLgData;Data Source=VA10PWVSQL354\CON01,20001;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=L8PNZ6R1;Use Encryption for Data=False;Tag with column collation when possible=False"
    Set SQLdata = CreateObject("ADODB.Recordset")
    With SQLdata
        .ActiveConnection = SQLconn
        .Open "SELECT TOP 1 pw FROM [WlpLgData].[dbo].[internal] WHERE un='" & shData.Range("mfUsrID").Value & "'"
        shData.Range("mfPwd").CopyFromRecordset SQLdata
        .Close
    End With
    SQLconn.Close
    Set SQLdata = Nothing
    Set SQLconn = Nothing
End Sub

Sub UpdateToolTraker(ByVal desc As String)
    desc = "Case: " & shOUO.Range("B6").Value & " - Version: " & shData.Range("Version").Value
    Set SQLconn = CreateObject("ADODB.Connection")
    SQLconn.Open "Provider=SQLOLEDB.1;Password=" & shData.Range("SQLPwd").Value & ";Persist Security Info=True;User ID=" & shData.Range("SQLUsrID").Value & ";Initial Catalog=WlpLgData;Data Source=VA10PWVSQL354\CON01,20001;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=L8PNZ6R1;Use Encryption for Data=False;Tag with column collation when possible=False"
    If Trim(shSL.Range("A" & Rows.Count).End(xlUp).Value) = "" Then slCnt = 0 Else: slCnt = shSL.Range("A" & Rows.Count).End(xlUp).row - 6
    If Trim(shTerm.Range("A" & Rows.Count).End(xlUp).Value) = "" Then termCnt = 0 Else: termCnt = shTerm.Range("A" & Rows.Count).End(xlUp).row - 6
    sqlStr = Trim("Insert Into [WlpLgData].[dbo].[tbl_ToolTracker] (UserID, TimeStamp, ToolName, Description, RecCount) Values ('" & Environ("username") & "', '" & Now() & "', 'Census', '" & shData.Range("version").Value & " - " & shData.Range("state").Value & " - " & shData.Range("grp").Value & " Group " & desc & "', " & slCnt + termCnt & ")")
    SQLconn.Execute sqlStr, adCmdText
    SQLconn.Close
    Set SQLconn = Nothing
End Sub

Sub GetShore()
    Set SQLconn = CreateObject("ADODB.Connection")
    SQLconn.Open "Provider=SQLOLEDB.1;Password=" & shData.Range("SQLPwd").Value & ";Persist Security Info=True;User ID=" & shData.Range("SQLUsrID").Value & ";Initial Catalog=WlpLgData;Data Source=VA10PWVSQL354\CON01,20001;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=L8PNZ6R1;Use Encryption for Data=False;Tag with column collation when possible=False"
    Set SQLdata = CreateObject("ADODB.Recordset")
    With SQLdata
        .ActiveConnection = SQLconn
        .Open "SELECT Shore FROM [WlpLgData].[dbo].[tbl_UserIDs] where UserID = '" & Environ("username") & "'"
        shData.Range("mfShore").CopyFromRecordset SQLdata
        .Close
    End With
    SQLconn.Close
    Set SQLdata = Nothing
    Set SQLconn = Nothing
End Sub
 

Sub Login(ByVal platform As String)
    Dim ln As Integer
    SK "Pa1"
    Application.Wait Now + TimeValue("00:00:02")
    PF 3
    
    If G(1, 6, 20) = "UNSUPPORTED FUNCTION" Then
        PE "ISM", 10, 10
        WT 14, 4, 6, "Userid"
    ElseIf G(3, 27, 17) = "ANTHEM BLUE CROSS" Then
        PE "ISM", 23, 48
        WT 14, 4, 6, "Userid"
    End If
        
    
    If G(14, 4, 6) = "Userid" Then
        userName = "CETOOL"
        pwd = "CEN$US16"
        P userName, 14, 20
        PE pwd, 15, 20
        Application.Wait Now + TimeValue("00:00:01")
SearchAgain:
        ln = FindIMSPLine()
        If ln = 0 Then GoTo SearchAgain
        WT ln, 28, 4, "===>"
        Application.Wait Now + TimeValue("00:00:01")
        PE "IMSP", ln, 33
        Application.Wait Now + TimeValue("00:00:01")
        SK "Clear"
        Application.Wait Now + TimeValue("00:00:01")
        Select Case platform
            Case "WGS", "W", "LG"
                PE "memb05 ", 1, 1
                Application.Wait Now + TimeValue("00:00:01")
                WT 2, 30, 14, "MEMB05 PROFILE"
            Case "ISG", "I", "SG"
                PE "starmm04 ", 1, 1
                Application.Wait Now + TimeValue("00:00:01")
                WT 2, 23, 26, "SMALL GROUP AND INDIV MENU"
            Case Else
                MsgBox "Invalid platform"
                End
        End Select
    End If
End Sub

Function FindIMSPLine() As Integer
    Dim ln As Integer: ln = 0
    Dim i As Integer
    For i = 1 To 27
        If G(i, 28, 4) = "===>" Then
            ln = i
            Exit For
        End If
    Next i
    FindIMSPLine = ln
End Function

'Logs out from the mainframe and closes the mainframe window
Sub Logout()
    Dim ln As Integer
    SK "Pa1"
SearchAgain:
    ln = FindIMSPLine()
    If ln = 0 Then GoTo SearchAgain
    WT ln, 28, 4, "===>"
    PF 3
    WT 23, 12, 10, "PF3:Logoff"
    PF 3
    CloseMainframe
    DeleteSessionFile
End Sub


'Starts up the mainframe. Used before Login
Sub StartMainframe()
    Dim System As Object
    Dim Sess0 As Object
    CopySessionFile
    Dim mfPath As String: mfPath = sFolder & sDFile
    
    ActiveWorkbook.FollowHyperlink mfPath, NewWindow:=True
    Application.Wait Now + TimeValue("00:00:05")
    
    Set System = CreateObject("EXTRA.System")
    If (System Is Nothing) Then
        MsgBox "Could not create the EXTRA System object. Stopping macro."
        End
    End If

    Set Sess0 = System.ActiveSession
    If (Sess0 Is Nothing) Then
        MsgBox "Could not create the Session object. Stopping macro."
        End
    End If
    If Not Sess0.Visible Then Sess0.Visible = True
    Sud
End Sub

'Closes the mainframe window
Sub CloseMainframe()
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    System.Application.Quit
End Sub

Sub CopySessionFile()
    Dim FSO
    Dim sSFile As String
    sSFile = "SGmf4census.edp"
    sFolder = "\\np01ana001\sgmembership\Census_Offshore\session\"
    sDFile = "temp_" & Format(Now, "YYYYMMDDHHMMSS") & ".edp"
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If Not FSO.FileExists(sFolder & sSFile) Then
        MsgBox "SGmf4census File Not Found Under Shared Folder", vbInformation, "Not Found!"
    Else
        FSO.CopyFile (sFolder & sSFile), sFolder & sDFile, True
    End If
End Sub

'Deletes the temporary session when it is done being used
Sub DeleteSessionFile()
    If sFolder = "" And sDFile = "" Then Exit Sub
    If Dir(sFolder & sDFile) <> "" Then
        SetAttr sFolder & sDFile, vbNormal
        Kill sFolder & sDFile
    End If
End Sub

Sub SK(ByVal s As String) 'SendKey
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        .SendKeys ("<" & s & ">")
        Sud
    End With
End Sub

Sub PF(ByVal s As Integer)
    Dim System As Object
    Dim Sess0 As Object
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        SK "PF" & CStr(s)
        Sud
    End With
End Sub

Sub WaitTill(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s As String)
    Dim System As Object
    Dim Sess0 As Object
    Dim tm As Date
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        tm = Now + TimeValue("00:00:20")
        Do Until G(r, c, l) = s
            If Now >= tm Then
                MsgBox "An error occured on WaitTill function." & vbLf & "Cannot find " & s & " on location " & r & ", " & c, vbExclamation, "Error!"
                End
            End If
            Sud
        Loop
    End With
End Sub

'Shortcut for WaitTill procedure
'Parameters:
'   r = row of the string on the mainframe
'   c = starting column position of string on the mainframe
'   l = length of the string on the mainframe
'   s = searched string on the mainframe
Sub WT(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s As String)
    WaitTill r, c, l, s
End Sub

'Shortcut for WaitTillOR procedure
Sub WTo(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s1 As String, ByVal s2 As String)
    WaitTillOR r, c, l, s1, s2
End Sub

'Waits until one of the two searched string appears on the mainframe.
'It waits for 20 seconds and errors out if one of the strings doesn't exist.
'Parameters:
'   r = row of the string on the mainframe
'   c = starting column position of string on the mainframe
'   l = length of the string on the mainframe
'   s1 = one of the searched strings on the mainframe
'   s2 = one of the searched strings on the mainframe
Sub WaitTillOR(ByVal r As Long, ByVal c As Long, ByVal l As Long, ByVal s1 As String, ByVal s2 As String)
    Dim System As Object
    Dim Sess0 As Object
    Dim tm As Date
    Set System = CreateObject("EXTRA.System")
    Set Sess0 = System.ActiveSession
    With Sess0.Screen
        tm = Now + TimeValue("00:00:20")
        Do Until G(r, c, l) = s1 Or G(r, c, l) = s2
            If Now >= tm Then
                MsgBox "An error occured on WaitTill function." & vbLf & "Cannot find " & s1 & " or " & s2 & " on location " & r & ", " & c, vbExclamation, "Error!"
                End
            End If
            Sud
        Loop
    End With
End Sub

Function s__(ByVal i As Long) As String
    Dim val As String: val = ""
    If i > 0 Then
        For A = 1 To i
            val = val & " "
        Next A
    End If
    s__ = val
End Function

Sub UpdateVersion()
Attribute UpdateVersion.VB_ProcData.VB_Invoke_Func = "U\n14"
    If IsIggy Then
        ver = shData.Range("version").Value
        shData.Range("version").Value = InputBox("Enter new version", "Current version: " & shData.Range("version").Value)
        If Trim(shData.Range("version").Value) = "" Then
            shData.Range("version").Value = ver
        Else
            shData.Range("version").Offset(1).Value = Now
        End If
    End If
End Sub
Function CentralState()
Dim IsCentral As Long
    IsCentral = shData.Range("B9").Value + shData.Range("B7").Value + shData.Range("B10").Value + shData.Range("B11").Value + shData.Range("B12").Value + shData.Range("B13").Value
    If IsCentral Then
        CentralState = True
    Else
        CentralState = False
    End If
End Function
Sub SaveModules()
  Const Modulepath As String = "\\np01ana001\sgmembership\Census_Offshore\FIX\Modules\"
  Const Formspath As String = "\\np01ana001\sgmembership\Census_Offshore\FIX\Forms\"
  Const Classpath As String = "\\np01ana001\sgmembership\Census_Offshore\FIX\Classes\"
  With ThisWorkbook.VBProject
        For x = .VBComponents.Count To 1 Step -1
            Dim CName As String: CName = .VBComponents(x).Name
            Dim tpe As String: tpe = .VBComponents(x).Type
            Select Case tpe
            Case "1":
                .VBComponents(x).Export (Modulepath & CName & ".bas")
            Case "100":
                .VBComponents(x).Export (Classpath & CName & ".cls")
            Case "13":
                .VBComponents(x).Export (Formspath & CName & ".frm")
            End Select
        Next
    End With
End Sub
Attribute VB_Name = "frmBundle"
Attribute VB_Base = "0{D01D2191-C7E7-451C-97B5-5D0D20669124}{CDD1F5D6-D9D5-4D26-A4D6-7B7BE66DDFF1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub cmbBundleADD_Change()
    If WorksheetFunction.CountIf(shData.Range("FJ:FJ"), cmbBundleADD.Value) > 0 Then
        cmbBundleLife.Value = WorksheetFunction.Index(shData.Range("FH:FH"), WorksheetFunction.Match(cmbBundleADD.Value, shData.Range("FJ:FJ"), 0))
    End If
End Sub
Private Sub cmbBundleLife_Change()
    If WorksheetFunction.CountIf(shData.Range("FH:FH"), cmbBundleLife.Value) > 0 Then
        cmbBundleADD.Value = WorksheetFunction.VLookup(cmbBundleLife.Value, shData.Range("FH:FJ"), 3, False)
    End If
End Sub

Private Sub cmdBundle_Click()
    Dim lr As Long: lr = shData.Range("FH" & Rows.Count).End(xlUp).row + 1
    
    If cmbBundleLife.Value <> "" And cmbBundleADD.Value <> "" Then
        If WorksheetFunction.CountIf(shData.Range("FH:FH"), cmbBundleLife.Value) > 0 Then
            Dim addStr As String
            addStr = WorksheetFunction.VLookup(cmbBundleLife.Value, shData.Range("FH:FJ"), 3, False)
            MsgBox cmbBundleLife.Value & " has already been bundled with " & addStr & "."
        ElseIf WorksheetFunction.CountIf(shData.Range("FJ:FJ"), cmbBundleADD.Value) > 0 Then
            Dim lifStr As String
            lifStr = WorksheetFunction.Index(shData.Range("FH:FH"), WorksheetFunction.Match(cmbBundleADD.Value, shData.Range("FJ:FJ"), 0))
            MsgBox cmbBundleADD.Value & " has already been bundled with " & lifStr & "."
        Else
            shData.Range("FH" & lr).Value = cmbBundleLife.Value
            shData.Range("FI" & lr).Value = WorksheetFunction.VLookup(cmbBundleLife.Value, shData.Range("EB:EC"), 2, False)
            shData.Range("FJ" & lr).Value = cmbBundleADD.Value
            shData.Range("FK" & lr).Value = WorksheetFunction.VLookup(cmbBundleADD.Value, shData.Range("EE:EF"), 2, False)
            MsgBox "The bundle for " & cmbBundleLife.Value & " and " & cmbBundleADD.Value & " has been created."
        End If
    End If
End Sub

Private Sub cmdBundleClose_Click()
    Unload Me
End Sub

Private Sub cmdBundleShow_Click()
    Dim lr As Long: lr = shData.Range("FH" & Rows.Count).End(xlUp).row
    Dim i As Long
    Dim str As String: str = ""
    
    If lr > 2 Then
        For i = 3 To lr
            str = str & "|fffd|" & shData.Range("FH" & i).Value & " (" & shData.Range("FI" & i).Value & ") - " & shData.Range("FJ" & i).Value & " (" & shData.Range("FK" & i).Value & ")" & vbLf
        Next i
        MsgBox str, , "Bundle List"
    Else
        MsgBox "There are no bundles.", , "Bundle List"
    End If
    
End Sub

Private Sub cmdUnbundle_Click()
    Dim lr As Long: lr = shData.Range("FH" & Rows.Count).End(xlUp).row
    Dim i As Long
    Dim found As Boolean: found = False
    Dim response
    
    If lr > 2 Then
        For i = 3 To lr
            If shData.Range("FH" & i).Value = cmbBundleLife.Value And shData.Range("FJ" & i).Value = cmbBundleADD.Value Then
                found = True
                response = MsgBox("You are about to remove the bundle for " & cmbBundleLife.Value & " and " & cmbBundleADD.Value & "." & vbLf & vbLf & "Are you sure?", vbYesNo, "Are you sure?")
                If response = vbYes Then shData.Range("FH" & i & ":FK" & i).ClearContents
                If i < lr Then 'Remove gaps
                    shData.Range("FH" & i & ":FK" & i).Value = shData.Range("FH" & lr & ":FK" & lr).Value
                    shData.Range("FH" & lr & ":FK" & lr).ClearContents
                End If
                If found Then Exit For
            End If
        Next i
        If Not found Then MsgBox "No bundle found for " & cmbBundleLife.Value & " and " & cmbBundleADD.Value
    Else
        MsgBox "No bundle found for " & cmbBundleLife.Value & " and " & cmbBundleADD.Value
    End If
End Sub

Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
    Dim lrLife As Long: lrLife = shData.Range("EB" & Rows.Count).End(xlUp).row
    Dim lrADD As Long: lrADD = shData.Range("EE" & Rows.Count).End(xlUp).row
    Dim i As Long
    
    For i = 3 To lrLife
        cmbBundleLife.AddItem (shData.Range("EB" & i).Value)
    Next i
    For i = 3 To lrADD
        cmbBundleADD.AddItem (shData.Range("EE" & i).Value)
    Next i
End Sub
Attribute VB_Name = "frmGroup"
Attribute VB_Base = "0{E21CD5A6-25E6-4CF4-B432-F2FF1874F037}{71CC3C56-F573-4D7A-989D-4EAC4020CC65}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cbLG_Click()
    Call EventDisable
    shData.Range("grp").Value = "Large"
    Call EnableDisableProductsSold
    shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    shOUO.Visible = xlSheetVisible
    
    shOUO.Unprotect
    shData.Range("IB4:IB34").Copy shOUO.Range("B17")
    shData.Range("IE4:IE16").Copy shOUO.Range("B3")
    shOUO.Range("B3:B15").Locked = False
    
    shOUO.Range("A4").Value = "Plan Effective Date"
    shOUO.Range("A5").Value = "Case Name"
    shOUO.Range("A14").Value = "Sales Support Email"
    shOUO.Range("A15").Value = "Case Implementation Email *"
    Call MakeAsteriskRed(shOUO.Range("A15"))
    
    'shOUO.CheckBoxes("GA_Selection").Interior.Color = RGB(0, 176, 80)
    
    shOUO.Protect
    
    Unload frmGroup
    Call EventEnable
End Sub

Private Sub cbSG_Click()
    Call EventDisable
    shData.Range("grp").Value = "Small"
    Call EnableDisableProductsSold
    If shData.Range("state").Value = "CALIFORNIA" Then
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoTrue
    Else
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
    Call populateDDL
    shOUO.Visible = xlSheetVisible
    
    shOUO.Unprotect
    shData.Range("IC4:IC34").Copy shOUO.Range("B17")
    shData.Range("IG4:IG16").Copy shOUO.Range("B3")
    shOUO.Range("B7:B9").Locked = True
    shOUO.Range("B12:B13").Locked = True
    shOUO.Range("B15").Locked = True
    
    shOUO.Range("A4").Value = "Plan Effective Date *"
    Call MakeAsteriskRed(shOUO.Range("A4"))
    shOUO.Range("A5").Value = "Case Name *"
    Call MakeAsteriskRed(shOUO.Range("A5"))
    shOUO.Range("A14").Value = "Sales Support Email *"
    Call MakeAsteriskRed(shOUO.Range("A14"))
    shOUO.Range("A15").Value = "Case Implementation Email"
    
    'shOUO.CheckBoxes("GA_Selection").Interior.Color = RGB(128, 128, 128)
    
    shOUO.Protect
    
    Unload frmGroup
    Call EventEnable
End Sub



Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
End Sub
Attribute VB_Name = "frmGrpUsr"
Attribute VB_Base = "0{C8756EB3-1958-476E-8342-22FC2AD0D145}{C1FF990C-C31C-4683-A5EB-3630365D633C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdSubmit_Click()
    If UCase(shData.Range("grp").Value) = UCase("Small") Then  'And UCase(Range("state")) = UCase("California")
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoTrue
    Else
        shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    End If
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
    If Environ("userdomain") = shData.Range("domain").Value Or Environ("userdomain") = shData.Range("domainNY").Value Then
        radInt.Value = True
    Else
        radExt.Value = True
    End If
End Sub


Private Sub cbLG()
   Application.EnableEvents = False
    shData.Range("grp").Value = "Large"
    Call EnableDisableProductsSold
    shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoFalse
    shOUO.Visible = xlSheetVisible
    
    shOUO.Unprotect
    shData.Range("IB4:IB54").Copy shOUO.Range("B17")
    shOUO.Range("B18:B67").NumberFormat = "@"
    shData.Range("IE4:IE16").Copy shOUO.Range("B3")
    shOUO.Range("B3:B15").Locked = False
    
    shOUO.Range("A4").Value = "Plan Effective Date *"
    shOUO.Range("A5").Value = "Case Name"
    shOUO.Range("A14").Value = "Sales Support Email"
    shOUO.Range("A15").Value = "Case Implementation Email"
    Call MakeAsteriskRed(shOUO.Range("A4"))
    
    'shOUO.CheckBoxes("GA_Selection").Interior.Color = RGB(0, 176, 80)
    
    shOUO.Protect
    
    'Unload frmGroup
    Application.EnableEvents = True
End Sub

Private Sub cbSG()
    Application.EnableEvents = False
    shData.Range("grp").Value = "Small"
    Call EnableDisableProductsSold
    'shOUO.Shapes.Range(Array("ShapeGrpNetwork")).Visible = msoTrue
    'Call populateDDL
    shOUO.Visible = xlSheetVisible
    
    shOUO.Unprotect
    shData.Range("IC4:IC54").Copy shOUO.Range("B17")
    shData.Range("IG4:IG16").Copy shOUO.Range("B3")
    shOUO.Range("B7:B9").Locked = True
    shOUO.Range("B12:B13").Locked = True
    shOUO.Range("B15").Locked = True
    
    shOUO.Range("A4").Value = "Plan Effective Date *"
    Call MakeAsteriskRed(shOUO.Range("A4"))
    shOUO.Range("A5").Value = "Case Name"
'    Call MakeAsteriskRed(shOUO.Range("A5"))
    shOUO.Range("A14").Value = "Sales Support Email"
'    Call MakeAsteriskRed(shOUO.Range("A14"))
    shOUO.Range("A15").Value = "Case Implementation Email"
    
    'shOUO.CheckBoxes("GA_Selection").Interior.Color = RGB(128, 128, 128)
    
    shOUO.Protect
    
    'Unload frmGroup
    Application.EnableEvents = True
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If radLG = False And radSG = False Then
        MsgBox "Please select a group", vbOKOnly, "Group"
        Cancel = True
        Exit Sub
    End If
    If radInt = False And radExt = False Then
        MsgBox "Please select a user type", vbOKOnly, "User Type"
        Cancel = True
        Exit Sub
    End If
    
    If radLG Then
        Call cbLG
    ElseIf radSG Then
        Call cbSG
    End If
    
    If radExt Then
        Call ExternalSetup
    ElseIf radInt Then
        Call InternalSetup
    End If
    
    Call PopulateStateDDL
End Sub

Sub InternalSetup()
    shData.Range("H2").Value = "Internal"
    Application.EnableEvents = False
    shOUO.Range("B6").Value = ""
    shOUO.Unprotect
    shOUO.Range("A5").Value = "Case Name"
    shOUO.Range("A10").Value = "Agent/Broker Contact Name"
    shOUO.Range("A11").Value = "Agent/Broker Email"
    shOUO.Shapes("Match_Suffix").Visible = msoTrue
    shOUO.Protect
    Application.EnableEvents = True
End Sub

Sub ExternalSetup()
    Application.EnableEvents = False
    shData.Range("H2").Value = "External"
    shOUO.Range("B6").Value = "999999"
    shOUO.Unprotect
    shOUO.Range("A5").Value = "Case Name *"
    shOUO.Range("A10").Value = "Agent/Broker Contact Name *"
    shOUO.Range("A11").Value = "Agent/Broker Email *"
    Call MakeAsteriskRed(shOUO.Range("A5"))
    Call MakeAsteriskRed(shOUO.Range("A10"))
    Call MakeAsteriskRed(shOUO.Range("A11"))
    shOUO.Shapes("Match_Suffix").Visible = msoFalse
    shOUO.Protect
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "frmHelp"
Attribute VB_Base = "0{1A19570E-2653-4446-B3D7-22C174E2D09C}{C9EDD74C-B367-472A-B45B-D62764E89CAB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub EFlink1_Click()
    Call OpenLink("https://www.anthem.com/ca/health-insurance/customer-care/forms-library")
End Sub

Private Sub EFlink2_Click()
    Call OpenLink("https://www.anthem.com/health-insurance/customer-care/forms-library")
End Sub

Private Sub EFlink3_Click()
    Call OpenLink("https://www.anthem.com/health-insurance/customer-care/forms-library")
End Sub

Private Sub Label1_Click()
    Call OpenLink("http://mmpappsprd1.anthem.com/MMP_Intake/Uploads/11-2-2015_11-02-2015_1321430_54476CABENABC_Large_Group_Census_How_To_Guide_DB_11_15.pdf")
End Sub

Private Sub Label2_Click()
    Call OpenLink("http://mmpappsprd1.anthem.com/MMP_Intake/Uploads/11-2-2015_11-02-2015_What_New__In_The_Census_Tool_DB_11_15.pdf")
End Sub

Private Sub Label3_Click()
    Call OpenLink("http://mmpappsprd1.anthem.com/MMP_Intake/Uploads/11-2-2015_11-02-2015_1321430_54476CABENABC_Large_Group_Census_FAQ_External_DB_11_15.pdf")
End Sub

Private Sub Label4_Click()
    Call OpenLink("http://mmpappsprd1.anthem.com/MMP_Intake/Uploads/10-5-2015_1318330_54401CABENABC_Census_Interactive_Demo_DD_07_15.pdf")
End Sub

Private Sub Label7_Click()
    Call OpenLink("mailto:yigal.darsa@anthem.com")
End Sub

Private Sub Label6_Click()
    Call OpenLink("mailto:anna.allen@anthem.com")
End Sub

Private Sub UserForm_Initialize()
     Me.Top = 200
    Me.Left = 400
    lblver.caption = "Version: " & shData.Range("FU2").Value
End Sub

Sub PopulateComboFromString(ByVal field As Object, ByVal list As String)
    Dim char As Variant
    For Each char In Split(list, ",")
        field.AddItem (char)
    Next char
End Sub

Sub OpenLink(ByVal link As String)
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=link, NewWindow:=True
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & link
End Sub

Attribute VB_Name = "frmImport"
Attribute VB_Base = "0{5D3933A2-6D28-41C4-9472-582BCA847385}{A85E13FB-942A-4D67-ADA9-852A2D38E4BE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Const startrow As Long = 7

Private Sub cmdClear_Click()
    Call ClearImportForm
End Sub

Private Sub cmdFill_Click()
    impRow.Value = "7"
    Call GetLetter(impCase, "CASE")
    Call GetLetter(impEmpSSN, "EMPLOYEES SOCIAL")
    Call GetLetter(impHCID, "HCID")
    Call GetLetter(impLN, "LAST NAME")
    Call GetLetter(impFN, "FIRST NAME")
    Call GetLetter(impMI, "MIDDLE INITIAL")
    Call GetLetter(impGender, "GENDER")
    Call GetLetter(impRelCod, "RELATIONSHIP CODE")
    Call GetLetter(impDOB, "DOB")
    Call GetLetter(impEmail, "EMAIL")
    Call GetLetter(impMemSSN, "MEMBER SSN")
    Call GetLetter(impGrpType, "GROUP TYPE")
    Call GetLetter(impPhone, "PHONE NUMBER")
    Call GetLetter(impAdrs, "ADDRESS")
    Call GetLetter(impAdrs2, "SECOND ADDRESS FIELD")
    Call GetLetter(impCity, "CITY")
    Call GetLetter(impState, "STATE")
    Call GetLetter(impZip, "ZIP CODE")
    Call GetLetter(impLang, "LANGUAGE")
    Call GetLetter(impJob, "JOB TITLE")
    Call GetLetter(impCOB, "COB")
    Call GetLetter(impDOH, "DATE OF HIRE")
    Call GetLetter(impDepNo, "DEPARTMENT NUMBER")
    Call GetLetter(impEmpNo, "EMPLOYEE NUMBER")
    Call GetLetter(impEffDt, "EFFECTIVE DATE FOR COVERAGE")
    Call GetLetter(impMedProd, "MEDICAL PRODUCT")
    Call GetLetter(impPCP, "PRIMARY CARE PHYSICIAN ID (PCP)")
    Call GetLetter(impCurrentPCP, "CURRENT PCP")
    Call GetLetter(impDentProd, "DENTAL PRODUCT")
    Call GetLetter(impDentOfc, "DENTAL OFFICE")
    Call GetLetter(impVisProd, "VISION PRODUCT")
    Call GetLetter(impSTD, "STD")
    Call GetLetter(impLTD, "LTD")
    Call GetLetter(impVSTD, "VOLUNTARY STD")
    Call GetLetter(impVLTD, "VOLUNTARY LTD")
    Call GetLetter(impBULTD, "BUY-UP LTD")
    Call GetLetter(impSalary, "SALARY")
    Call GetLetter(impBL, "BASIC LIFE")
    Call GetLetter(impBasVol, "BASIC VOLUME")
    Call GetLetter(impBasMult, "BASIC MULTIPLIER")
    Call GetLetter(impOL, "OPTIONAL LIFE")
    Call GetLetter(impOptVol, "OPTIONAL VOLUME")
    Call GetLetter(impOptMult, "OPTIONAL MULTIPLIER")
    Call GetLetter(impVL, "VOLUNTARY LIFE")
    Call GetLetter(impVolVol, "VOLUNTARY VOLUME")
    Call GetLetter(impVolMult, "VOLUNTARY MULTIPLIER")
    Call GetLetter(impBDL, "BASIC DEP LIFE")
    Call GetLetter(impBasSubVol, "BASIC SUB VOLUME")
    Call GetLetter(impBasSpsVol, "BASIC SPOUSE VOLUME")
    Call GetLetter(impBasChdVol, "BASIC CHILD(REN) VOLUME")
    Call GetLetter(impODL, "OPTIONAL DEP LIFE")
    Call GetLetter(impOptSubVol, "OPTIONAL SUB VOLUME")
    Call GetLetter(impOptSpsVol, "OPTIONAL SPOUSE VOLUME")
    Call GetLetter(impOptChdVol, "OPTIONAL CHILD(REN) VOLUME")
    Call GetLetter(impVDL, "VOLUNTARY DEP LIFE")
    Call GetLetter(impVolSubVol, "VOLUNTARY SUB VOLUME")
    Call GetLetter(impVolSpsVol, "VOLUNTARY SPOUSE VOLUME")
    Call GetLetter(impVolChdVol, "VOLUNTARY CHILD(REN) VOLUME")
    Call GetLetter(impVolChdVolA, "AD&D VOLUNTARY CHILD(REN) VOLUME")
    Call GetLetter(impBA, "BASIC AD&D")
    Call GetLetter(impBasVolA, "AD&D BASIC VOLUME")
    Call GetLetter(impBasMultA, "AD&D BASIC MULTIPLIER")
    Call GetLetter(impOA, "OPTIONAL AD&D")
    Call GetLetter(impOptVolA, "AD&D OPTIONAL VOLUME")
    Call GetLetter(impOptMultA, "AD&D OPTIONAL MULTIPLIER")
    Call GetLetter(impVA, "VOLUNTARY AD&D")
    Call GetLetter(impVolVolA, "AD&D VOLUNTARY VOLUME")
    Call GetLetter(impVolMultA, "AD&D VOLUNTARY MULTIPLIER")
    Call GetLetter(impBDA, "BASIC DEP AD&D")
    Call GetLetter(impBasSubVolA, "AD&D BASIC SUB VOLUME")
    Call GetLetter(impBasSpsVolA, "AD&D BASIC SPOUSE VOLUME")
    Call GetLetter(impBasChdVolA, "AD&D BASIC CHILD(REN) VOLUME")
    Call GetLetter(impODA, "OPTIONAL DEP AD&D")
    Call GetLetter(impOptSubVolA, "AD&D OPTIONAL SUB VOLUME")
    Call GetLetter(impOptSpsVolA, "AD&D OPTIONAL SPOUSE VOLUME")
    Call GetLetter(impOptChdVolA, "AD&D OPTIONAL CHILD(REN) VOLUME")
    Call GetLetter(impVDA, "VOLUNTARY DEP AD&D")
    Call GetLetter(impVolSubVolA, "AD&D VOLUNTARY SUB VOLUME")
    Call GetLetter(impVolSpsVolA, "AD&D VOLUNTARY SPOUSE VOLUME")
    Call GetLetter(impCobStartDt, "COBRA START DATE")
    Call GetLetter(impQualEvent, "COBRA QUALIFYING EVENT")
    Call GetLetter(impMediHIB, "MEDICARE HIB ID")
    Call GetLetter(impPartA, "MEDICARE PART A EFF DATE")
    Call GetLetter(impPartB, "MEDICARE PART B EFF DATE")
    Call GetLetter(impFTS, "FTS (PRIME/COMPLETE)")
    Call GetLetter(impSubGrp, "SUB GROUP (PRIME/COMPLETE)")
    Call GetLetter(impCovType, "COVERAGE TYPE (PRIME/COMPLETE)")
    Call GetLetter(impFSAFH, "FULL HEALTHCARE")
    Call GetLetter(impFSALP, "LIMITED PURPOSE")
    Call GetLetter(impFSADC, "DEPENDENT CARE")
    Call GetLetter(impFSACT, "COMMUTER TRANSIT")
    Call GetLetter(impFSACP, "COMMUTER PARKING")
    Call GetLetter(impCIV, "Critical Illness Voluntary")
    Call GetLetter(impCIEP, "Critical Illness Employer paid")
    Call GetLetter(impAV, "Accident Voluntary")
    Call GetLetter(impAEP, "Accident Employer paid")
    Call GetLetter(impHIV, "Hospital Indemnity Voluntary")
    Call GetLetter(impHIEP, "Hospital Indemnity Employer paid")
    
End Sub

Private Sub cmdImport_Click()
    If impRow.Value = "" Or IsNumeric(impRow.Value) = False Then
        MsgBox "Please enter a valid Row number"
        Exit Sub
    End If
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    shSL.Unprotect
    
    Dim sourceWB As Workbook
    Dim targetWB As Workbook
    Dim sourcePath As String
    Dim sourcesheet As Worksheet
    Dim sourceLR As Long
    
    Set targetWB = ThisWorkbook
    sourcePath = shData.Range("IP2").Value
    Set sourceWB = Application.Workbooks.Open(sourcePath)
    Set sourcesheet = sourceWB.Worksheets(targetWB.Worksheets(shData.Name).Range("IP3").Value)
    
    Call ImportField(impCase.Value, impRow.Value, "CASE", sourcesheet)
    Call ImportField(impEmpSSN.Value, impRow.Value, "EMPLOYEES SOCIAL", sourcesheet)
    Call ImportField(impHCID.Value, impRow.Value, "HCID", sourcesheet)
    Call ImportField(impLN.Value, impRow.Value, "LAST NAME", sourcesheet)
    Call ImportField(impFN.Value, impRow.Value, "FIRST NAME", sourcesheet)
    Call ImportField(impMI.Value, impRow.Value, "MIDDLE INITIAL", sourcesheet)
    Call ImportField(impGender.Value, impRow.Value, "GENDER", sourcesheet)
    Call CorrectImportedField(impGender.Value, impRow.Value, "GENDER", sourcesheet)
    Call ImportField(impRelCod.Value, impRow.Value, "RELATIONSHIP CODE", sourcesheet)
    Call CorrectImportedField(impRelCod.Value, impRow.Value, "RELATIONSHIP CODE", sourcesheet)
    Call ImportField(impDOB.Value, impRow.Value, "DOB", sourcesheet)
    Call ImportField(impEmail.Value, impRow.Value, "EMAIL", sourcesheet)
    Call ImportField(impMemSSN.Value, impRow.Value, "MEMBER SSN", sourcesheet)
    Call ImportField(impGrpType.Value, impRow.Value, "GROUP TYPE", sourcesheet)
    Call CorrectImportedField(impGrpType.Value, impRow.Value, "GROUP TYPE", sourcesheet)
    Call ImportField(impPhone.Value, impRow.Value, "PHONE NUMBER", sourcesheet)
    Call ImportField(impAdrs.Value, impRow.Value, "ADDRESS", sourcesheet)
    Call ImportField(impAdrs2.Value, impRow.Value, "SECOND ADDRESS FIELD", sourcesheet)
    Call ImportField(impCity.Value, impRow.Value, "CITY", sourcesheet)
    Call ImportField(impState.Value, impRow.Value, "STATE", sourcesheet)
    Call ImportField(impZip.Value, impRow.Value, "ZIP CODE", sourcesheet)
    Call ImportField(impLang.Value, impRow.Value, "LANGUAGE", sourcesheet)
    Call ImportField(impJob.Value, impRow.Value, "JOB TITLE", sourcesheet)
    Call ImportField(impCOB.Value, impRow.Value, "COB", sourcesheet)
    Call ImportField(impDOH.Value, impRow.Value, "DATE OF HIRE", sourcesheet)
    Call ImportField(impDepNo.Value, impRow.Value, "DEPARTMENT NUMBER", sourcesheet)
    Call ImportField(impEmpNo.Value, impRow.Value, "EMPLOYEE NUMBER", sourcesheet)
    Call ImportField(impEffDt.Value, impRow.Value, "EFFECTIVE DATE FOR COVERAGE", sourcesheet)
    Call ImportField(impMedProd.Value, impRow.Value, "MEDICAL PRODUCT", sourcesheet)
    Call ImportField(impPCP.Value, impRow.Value, "PRIMARY CARE PHYSICIAN ID (PCP)", sourcesheet)
    Call ImportField(impCurrentPCP.Value, impRow.Value, "CURRENT PCP", sourcesheet)
    Call ImportField(impDentProd.Value, impRow.Value, "DENTAL PRODUCT", sourcesheet)
    Call ImportField(impDentOfc.Value, impRow.Value, "DENTAL OFFICE", sourcesheet)
    Call ImportField(impVisProd.Value, impRow.Value, "VISION PRODUCT", sourcesheet)
    Call ImportField(impSTD.Value, impRow.Value, "STD", sourcesheet)
    Call ImportField(impLTD.Value, impRow.Value, "LTD", sourcesheet)
    Call ImportField(impVSTD.Value, impRow.Value, "VOLUNTARY STD", sourcesheet)
    Call ImportField(impVLTD.Value, impRow.Value, "VOLUNTARY LTD", sourcesheet)
    Call ImportField(impBULTD.Value, impRow.Value, "BUY-UP LTD", sourcesheet)
    Call ImportField(impSalary.Value, impRow.Value, "SALARY", sourcesheet)
    Call ImportField(impBL.Value, impRow.Value, "BASIC LIFE", sourcesheet)
    Call ImportField(impBasVol.Value, impRow.Value, "BASIC VOLUME", sourcesheet)
    Call ImportField(impBasMult.Value, impRow.Value, "BASIC MULTIPLIER", sourcesheet)
    Call ImportField(impOL.Value, impRow.Value, "OPTIONAL LIFE", sourcesheet)
    Call ImportField(impOptVol.Value, impRow.Value, "OPTIONAL VOLUME", sourcesheet)
    Call ImportField(impOptMult.Value, impRow.Value, "OPTIONAL MULTIPLIER", sourcesheet)
    Call ImportField(impVL.Value, impRow.Value, "VOLUNTARY LIFE", sourcesheet)
    Call ImportField(impVolVol.Value, impRow.Value, "VOLUNTARY VOLUME", sourcesheet)
    Call ImportField(impVolMult.Value, impRow.Value, "VOLUNTARY MULTIPLIER", sourcesheet)
    Call ImportField(impBDL.Value, impRow.Value, "BASIC DEP LIFE", sourcesheet)
    Call ImportField(impBasSubVol.Value, impRow.Value, "BASIC SUB VOLUME", sourcesheet)
    Call ImportField(impBasSpsVol.Value, impRow.Value, "BASIC SPOUSE VOLUME", sourcesheet)
    Call ImportField(impBasChdVol.Value, impRow.Value, "BASIC CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impODL.Value, impRow.Value, "OPTIONAL DEP LIFE", sourcesheet)
    Call ImportField(impOptSubVol.Value, impRow.Value, "OPTIONAL SUB VOLUME", sourcesheet)
    Call ImportField(impOptSpsVol.Value, impRow.Value, "OPTIONAL SPOUSE VOLUME", sourcesheet)
    Call ImportField(impOptChdVol.Value, impRow.Value, "OPTIONAL CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impVDL.Value, impRow.Value, "VOLUNTARY DEP LIFE", sourcesheet)
    Call ImportField(impVolSubVol.Value, impRow.Value, "VOLUNTARY SUB VOLUME", sourcesheet)
    Call ImportField(impVolSpsVol.Value, impRow.Value, "VOLUNTARY SPOUSE VOLUME", sourcesheet)
    Call ImportField(impVolChdVol.Value, impRow.Value, "VOLUNTARY CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impVolChdVolA.Value, impRow.Value, "AD&D VOLUNTARY CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impBA.Value, impRow.Value, "BASIC AD&D", sourcesheet)
    Call ImportField(impBasVolA.Value, impRow.Value, "AD&D BASIC VOLUME", sourcesheet)
    Call ImportField(impBasMultA.Value, impRow.Value, "AD&D BASIC MULTIPLIER", sourcesheet)
    Call ImportField(impOA.Value, impRow.Value, "OPTIONAL AD&D", sourcesheet)
    Call ImportField(impOptVolA.Value, impRow.Value, "AD&D OPTIONAL VOLUME", sourcesheet)
    Call ImportField(impOptMultA.Value, impRow.Value, "AD&D OPTIONAL MULTIPLIER", sourcesheet)
    Call ImportField(impVA.Value, impRow.Value, "VOLUNTARY AD&D", sourcesheet)
    Call ImportField(impVolVolA.Value, impRow.Value, "AD&D VOLUNTARY VOLUME", sourcesheet)
    Call ImportField(impVolMultA.Value, impRow.Value, "AD&D VOLUNTARY MULTIPLIER", sourcesheet)
    Call ImportField(impBDA.Value, impRow.Value, "BASIC DEP AD&D", sourcesheet)
    Call ImportField(impBasSubVolA.Value, impRow.Value, "AD&D BASIC SUB VOLUME", sourcesheet)
    Call ImportField(impBasSpsVolA.Value, impRow.Value, "AD&D BASIC SPOUSE VOLUME", sourcesheet)
    Call ImportField(impBasChdVolA.Value, impRow.Value, "AD&D BASIC CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impODA.Value, impRow.Value, "OPTIONAL DEP AD&D", sourcesheet)
    Call ImportField(impOptSubVolA.Value, impRow.Value, "AD&D OPTIONAL SUB VOLUME", sourcesheet)
    Call ImportField(impOptSpsVolA.Value, impRow.Value, "AD&D OPTIONAL SPOUSE VOLUME", sourcesheet)
    Call ImportField(impOptChdVolA.Value, impRow.Value, "AD&D OPTIONAL CHILD(REN) VOLUME", sourcesheet)
    Call ImportField(impVDA.Value, impRow.Value, "VOLUNTARY DEP AD&D", sourcesheet)
    Call ImportField(impVolSubVolA.Value, impRow.Value, "AD&D VOLUNTARY SUB VOLUME", sourcesheet)
    Call ImportField(impVolSpsVolA.Value, impRow.Value, "AD&D VOLUNTARY SPOUSE VOLUME", sourcesheet)
    Call ImportField(impCobStartDt.Value, impRow.Value, "COBRA START DATE", sourcesheet)
    Call ImportField(impQualEvent.Value, impRow.Value, "COBRA QUALIFYING EVENT", sourcesheet)
    Call ImportField(impMediHIB.Value, impRow.Value, "MEDICARE HIB ID", sourcesheet)
    Call ImportField(impPartA.Value, impRow.Value, "MEDICARE PART A EFF DATE", sourcesheet)
    Call ImportField(impPartB.Value, impRow.Value, "MEDICARE PART B EFF DATE", sourcesheet)
    Call ImportField(impFTS.Value, impRow.Value, "FTS (PRIME/COMPLETE)", sourcesheet)
    Call ImportField(impSubGrp.Value, impRow.Value, "SUB GROUP (PRIME/COMPLETE)", sourcesheet)
    Call ImportField(impCovType.Value, impRow.Value, "COVERAGE TYPE (PRIME/COMPLETE)", sourcesheet)
    Call ImportField(impFSAFH.Value, impRow.Value, "FULL HEALTHCARE", sourcesheet)
    Call ImportField(impFSALP.Value, impRow.Value, "LIMITED PURPOSE", sourcesheet)
    Call ImportField(impFSADC.Value, impRow.Value, "DEPENDENT CARE", sourcesheet)
    Call ImportField(impFSACT.Value, impRow.Value, "COMMUTER TRANSIT", sourcesheet)
    Call ImportField(impFSACP.Value, impRow.Value, "COMMUTER PARKING", sourcesheet)
    Call ImportField(impCIV.Value, impRow.Value, "Critical Illness Voluntary", sourcesheet)
    Call ImportField(impCIEP.Value, impRow.Value, "Critical Illness Employer paid", sourcesheet)
    Call ImportField(impAV.Value, impRow.Value, "Accident Voluntary", sourcesheet)
    Call ImportField(impAEP.Value, impRow.Value, "Accident Employer paid", sourcesheet)
    Call ImportField(impHIV.Value, impRow.Value, "Hospital Indemnity Voluntary", sourcesheet)
    Call ImportField(impHIEP.Value, impRow.Value, "Hospital Indemnity Employer paid", sourcesheet)
    
    sourceWB.Close (False)
    
    Unload Me
    If shData.Range("impAuthor").Value = "Apache POI" And shData.Range("impStatus").Value = "Initialized" Then
       shData.Range("impStatus").Value = "Imported"
       lr = shSL.Range("B" & Rows.Count).End(xlUp).row
       shSL.Unprotect
       shSL.Range("A7:Y" & lr).RemoveDuplicates Columns:=Array(2, 3, 4, 5, 7, 8, 9), Header:=xlNo
       Call SortMembers
    End If
    If shData.Range("ImpAuthor").Value = "Anthem Insurance Inc." And shData.Range("ImpStatus").Value = "Initialized" Or _
       Trim(shData.Range("ImpCheck").Value) = "Group Name:" And shData.Range("ImpStatus").Value = "Initialized" Then
       shData.Range("impStatus").Value = "Imported"
       'lr = shSL.Range("B" & Rows.Count).End(xlUp).row
       'shSL.Unprotect
       'shSL.Range("A7:Y" & lr).RemoveDuplicates Columns:=Array(2, 3, 4, 5, 7, 8, 9), Header:=xlNo
       'Call SortMembers
    End If
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    response = MsgBox("Importing process has finished." & vbLf & "Would you like to validate the data?", vbYesNo, "Validate?")
    If response = vbYes Then
        Call CoreValidation
    End If
End Sub
Sub sbRemoveDuplicates()
    Cells.RemoveDuplicates Columns:=Array(1)
End Sub
Private Sub CorrectImportedField(ByVal oField As String, ByVal oRow As String, ByVal Fieldname As String, ByRef sourcesheet As Worksheet)
    If shData.Range("impAuthor").Value = "Apache POI" And Fieldname = "GENDER" Then
            lr = shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & Rows.Count).End(xlUp).row
            For x = startrow To lr
RESL:
                Gendertype = Left(shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value, 1)
                If Gendertype = "1" Or Gendertype = "3" Or Gendertype = "5" Then
                    shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "M"
                ElseIf Gendertype = "2" Or Gendertype = "4" Or Gendertype = "7" Then
                    shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "F"
                ElseIf Gendertype = "9" Then
                    shSL.Unprotect
                    Application.EnableEvents = False
                    shSL.Rows(x).Delete
                    GoTo RESL
                End If
            Next
    End If
    If shData.Range("ImpAuthor").Value = "Anthem Insurance Inc." And Fieldname = "RELATIONSHIP CODE" Or Trim(shData.Range("ImpCheck").Value) = "Group Name:" And Fieldname = "RELATIONSHIP CODE" Then
            lr = shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & Rows.Count).End(xlUp).row
            For x = startrow To lr
                Reltype = Left(shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value, 1)
                If Reltype = "M" Then shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "SUB"
                If Reltype = "H" Or Reltype = "W" Then shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "SPS"
                If Reltype = "S" Or Reltype = "D" Then shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "CHD"
                
            Next
    End If
    If shData.Range("ImpAuthor").Value = "Anthem Insurance Inc." And Fieldname = "GROUP TYPE" Then
            lr = shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & Rows.Count).End(xlUp).row
            For x = startrow To lr
                Grptype = Trim(shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value)
                If Grptype = "SL" Then shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "A"
                If Grptype = "CB" Then shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & x).Value = "C"
            Next
    End If
End Sub
Private Sub ImportField(ByVal oField As String, ByVal oRow As String, ByVal Fieldname As String, ByRef sourcesheet As Worksheet)
    If oField <> "" Then
        sourceLR = sourcesheet.Range(oField & Rows.Count).End(xlUp).row
        If sourceLR >= CLng(oRow) Then
            sourcesheet.Range(oField & oRow & ":" & oField & sourceLR).Copy
            shSL.Range(Col_Letter(ColumnPerName(Fieldname)) & startrow).PasteSpecial (xlPasteValues)
        End If
    End If
End Sub

Private Sub impCase_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCase, "CASE")
End Sub
Private Sub impEmpSSN_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impEmpSSN, "EMPLOYEES SOCIAL")
End Sub
Private Sub impHCID_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impHCID, "HCID")
End Sub
Private Sub impLN_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impLN, "LAST NAME")
End Sub
Private Sub impFN_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impFN, "FIRST NAME")
End Sub
Private Sub impMI_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impMI, "MIDDLE INITIAL")
End Sub
Private Sub impGender_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impGender, "GENDER")
End Sub
Private Sub impRelCod_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impRelCod, "RELATIONSHIP CODE")
End Sub
Private Sub impDOB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impDOB, "DOB")
End Sub
Private Sub impEmail_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impEmail, "EMAIL")
End Sub
Private Sub impMemSSN_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impMemSSN, "MEMBER SSN")
End Sub
Private Sub impGrpType_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impGrpType, "GROUP TYPE")
End Sub
Private Sub impPhone_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impPhone, "PHONE NUMBER")
End Sub
Private Sub impAdrs_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impAdrs, "ADDRESS")
End Sub
Private Sub impAdrs2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impAdrs2, "SECOND ADDRESS FIELD")
End Sub
Private Sub impCity_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCity, "CITY")
End Sub
Private Sub impState_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impState, "STATE")
End Sub
Private Sub impZip_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impZip, "ZIP CODE")
End Sub
Private Sub impLang_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impLang, "LANGUAGE")
End Sub
Private Sub impJob_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impJob, "JOB TITLE")
End Sub
Private Sub impCOB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCOB, "COB")
End Sub
Private Sub impDOH_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impDOH, "DATE OF HIRE")
End Sub
Private Sub impDepNo_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impDepNo, "DEPARTMENT NUMBER")
End Sub
Private Sub impEmpNo_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impEmpNo, "EMPLOYEE NUMBER")
End Sub
Private Sub impEffDt_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impEffDt, "EFFECTIVE DATE FOR COVERAGE")
End Sub
Private Sub impMedProd_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impMedProd, "MEDICAL PRODUCT")
End Sub
Private Sub impPCP_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impPCP, "PRIMARY CARE PHYSICIAN ID (PCP)")
End Sub
Private Sub impCurrentPCP_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCurrentPCP, "CURRENT PCP")
End Sub
Private Sub impDentProd_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impDentProd, "DENTAL PRODUCT")
End Sub
Private Sub impDentOfc_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impDentOfc, "DENTAL OFFICE")
End Sub
Private Sub impVisProd_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVisProd, "VISION PRODUCT")
End Sub
Private Sub impSTD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impSTD, "STD")
End Sub
Private Sub impLTD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impLTD, "LTD")
End Sub
Private Sub impVSTD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVSTD, "VOLUNTARY STD")
End Sub
Private Sub impVLTD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVLTD, "VOLUNTARY LTD")
End Sub
Private Sub impBULTD_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBULTD, "BUY-UP LTD")
End Sub
Private Sub impSalary_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impSalary, "SALARY")
End Sub
Private Sub impBL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBL, "BASIC LIFE")
End Sub
Private Sub impBasVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasVol, "BASIC VOLUME")
End Sub
Private Sub impBasMult_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasMult, "BASIC MULTIPLIER")
End Sub
Private Sub impOL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOL, "OPTIONAL LIFE")
End Sub
Private Sub impOptVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptVol, "OPTIONAL VOLUME")
End Sub
Private Sub impOptMult_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptMult, "OPTIONAL MULTIPLIER")
End Sub
Private Sub impVL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVL, "VOLUNTARY LIFE")
End Sub
Private Sub impVolVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolVol, "VOLUNTARY VOLUME")
End Sub
Private Sub impVolMult_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolMult, "VOLUNTARY MULTIPLIER")
End Sub
Private Sub impBDL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBDL, "BASIC DEP LIFE")
End Sub
Private Sub impBasSubVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasSubVol, "BASIC SUB VOLUME")
End Sub
Private Sub impBasSpsVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasSpsVol, "BASIC SPOUSE VOLUME")
End Sub
Private Sub impBasChdVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasChdVol, "BASIC CHILD(REN) VOLUME")
End Sub
Private Sub impODL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impODL, "OPTIONAL DEP LIFE")
End Sub
Private Sub impOptSubVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptSubVol, "OPTIONAL SUB VOLUME")
End Sub
Private Sub impOptSpsVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptSpsVol, "OPTIONAL SPOUSE VOLUME")
End Sub
Private Sub impOptChdVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptChdVol, "OPTIONAL CHILD(REN) VOLUME")
End Sub
Private Sub impVDL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVDL, "VOLUNTARY DEP LIFE")
End Sub
Private Sub impVolSubVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolSubVol, "VOLUNTARY SUB VOLUME")
End Sub
Private Sub impVolSpsVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolSpsVol, "VOLUNTARY SPOUSE VOLUME")
End Sub
Private Sub impVolChdVol_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolChdVol, "VOLUNTARY CHILD(REN) VOLUME")
End Sub
Private Sub impVolChdVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolChdVolA, "AD&D VOLUNTARY CHILD(REN) VOLUME")
End Sub
Private Sub impBA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBA, "BASIC AD&D")
End Sub
Private Sub impBasVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasVolA, "AD&D BASIC VOLUME")
End Sub
Private Sub impBasMultA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasMultA, "AD&D BASIC MULTIPLIER")
End Sub
Private Sub impOA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOA, "OPTIONAL AD&D")
End Sub
Private Sub impOptVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptVolA, "AD&D OPTIONAL VOLUME")
End Sub
Private Sub impOptMultA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptMultA, "AD&D OPTIONAL MULTIPLIER")
End Sub
Private Sub impVA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVA, "VOLUNTARY AD&D")
End Sub
Private Sub impVolVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolVolA, "AD&D VOLUNTARY VOLUME")
End Sub
Private Sub impVolMultA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolMultA, "AD&D VOLUNTARY MULTIPLIER")
End Sub
Private Sub impBDA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBDA, "BASIC DEP AD&D")
End Sub
Private Sub impBasSubVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasSubVolA, "AD&D BASIC SUB VOLUME")
End Sub
Private Sub impBasSpsVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasSpsVolA, "AD&D BASIC SPOUSE VOLUME")
End Sub
Private Sub impBasChdVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impBasChdVolA, "AD&D BASIC CHILD(REN) VOLUME")
End Sub
Private Sub impODA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impODA, "OPTIONAL DEP AD&D")
End Sub
Private Sub impOptSubVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptSubVolA, "AD&D OPTIONAL SUB VOLUME")
End Sub
Private Sub impOptSpsVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptSpsVolA, "AD&D OPTIONAL SPOUSE VOLUME")
End Sub
Private Sub impOptChdVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impOptChdVolA, "AD&D OPTIONAL CHILD(REN) VOLUME")
End Sub
Private Sub impVDA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVDA, "VOLUNTARY DEP AD&D")
End Sub
Private Sub impVolSubVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolSubVolA, "AD&D VOLUNTARY SUB VOLUME")
End Sub
Private Sub impVolSpsVolA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impVolSpsVolA, "AD&D VOLUNTARY SPOUSE VOLUME")
End Sub
Private Sub impCobStartDt_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCobStartDt, "COBRA START DATE")
End Sub
Private Sub impQualEvent_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impQualEvent, "COBRA QUALIFYING EVENT")
End Sub
Private Sub impMediHIB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impMediHIB, "MEDICARE HIB ID")
End Sub
Private Sub impPartA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impPartA, "MEDICARE PART A EFF DATE")
End Sub
Private Sub impPartB_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impPartB, "MEDICARE PART B EFF DATE")
End Sub
Private Sub impFTS_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impFTS, "FTS (PRIME/COMPLETE)")
End Sub
Private Sub impSubGrp_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impSubGrp, "SUB GROUP (PRIME/COMPLETE)")
End Sub
Private Sub impCovType_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call GetLetter(impCovType, "COVERAGE TYPE (PRIME/COMPLETE)")
End Sub


Private Sub impRow_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    impRow.Value = "7"
End Sub

Private Sub GetLetter(ByVal obj As Object, ByVal str As String)
    obj.Value = Col_Letter(ColumnPerName(str))
End Sub

Private Sub ClearImportForm()
    For Each c In frmImport.Controls
        If TypeName(c) = "TextBox" Then
            c.Value = ""
        End If
    Next c
End Sub

Private Sub UserForm_Initialize()
    Me.Top = 200
    Me.Left = 400
    Call ClearImportForm
    If shData.Range("ImpAuthor").Value = "Apache POI" And shData.Range("ImpStatus").Value = "Initialized" Then
        impRow.Value = "2"
        frmImport.impEmpSSN.Value = "A"
        frmImport.impHCID.Value = "AG"
        frmImport.impLN.Value = "B"
        frmImport.impFN.Value = "C"
        frmImport.impMI.Value = "D"
        frmImport.impDOB.Value = "E"
        frmImport.impGender.Value = "G"
        frmImport.impDepNo.Value = "P"
        frmImport.impDOH.Value = "K"
        frmImport.impAdrs.Value = "U"
        frmImport.impAdrs2.Value = "T"
        frmImport.impCity.Value = "V"
        frmImport.impState.Value = "W"
        frmImport.impZip.Value = "X"
        frmImport.impCase.Value = "AH"
        frmImport.impRelCod.Value = "AK"
        frmImport.impMemSSN.Value = "AM"
        frmImport.impEmpNo.Value = "O"
        frmImport.BROSTERMESS.Visible = True
    End If
    If shData.Range("ImpAuthor").Value = "Anthem Insurance Inc." And shData.Range("ImpStatus").Value = "Initialized" Or _
       Trim(shData.Range("ImpCheck").Value) = "Group Name:" And shData.Range("ImpStatus").Value = "Initialized" Then
        impRow.Value = "6"
        frmImport.impEmpSSN.Value = "A"
        frmImport.impLN.Value = "AH"
        frmImport.impFN.Value = "AI"
        frmImport.impMI.Value = "AJ"
        frmImport.impDOB.Value = "AN"
        frmImport.impGender.Value = "AM"
        frmImport.impDOH.Value = "I"
        frmImport.impAdrs.Value = "K"
        frmImport.impAdrs2.Value = "L"
        frmImport.impCity.Value = "N"
        frmImport.impState.Value = "O"
        frmImport.impZip.Value = "P"
        frmImport.impRelCod.Value = "AG"
        frmImport.impMemSSN.Value = "AL"
        frmImport.impPhone.Value = "R"
        frmImport.impGrpType.Value = "U"
        frmImport.impEffDt.Value = "T"
        frmImport.impMedProd.Value = "V"
        frmImport.impDentProd.Value = "X"
        frmImport.impVisProd.Value = "Z"
        frmImport.IM01MESS.Visible = True
    End If
End Sub

Attribute VB_Name = "frmIncrement"
Attribute VB_Base = "0{12E85829-E219-4C87-A9F5-89D30E72E074}{B4A81C25-20E4-464A-A280-65CC37586EEB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdIncCancel_Click()
    shData.Range("GE2").Clear
    shData.Range("GE3").Clear
    Unload frmIncrement
    Call HideUnhideIncrementalFromOutside
End Sub

Private Sub cmdIncOK_Click()
    shData.Range("GE2").Clear
    shData.Range("GE3").Clear
    vol = tbIncr.text
    vmx = tbIncMax.text
    
    If Not IsNumeric(vol) Then
        MsgBox "Incremental value should be numeric." & vbLf & "Please try again."
        Exit Sub
    End If
    If Not IsNumeric(vmx) Then
        MsgBox "Maximum value should be numeric." & vbLf & "Please try again."
        Exit Sub
    End If
    If CLng(vol) >= CLng(vmx) Then
        MsgBox "Incremental value should be less than the max value." & vbLf & "Please try again."
        Exit Sub
    End If
    If CLng(vol) = 0 Then
        MsgBox "Incremental value cannot be 0." & vbLf & "Please try again."
        Exit Sub
    End If
    
    shData.Range("GE2").Value = CLng(vol)
    shData.Range("GE3").Value = CLng(vmx)
    
    Unload frmIncrement
End Sub



Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
End Sub
Attribute VB_Name = "frmMatchSuffix"
Attribute VB_Base = "0{805D9CCC-8CDE-4E13-B954-68B81B39E188}{3998D26C-10DD-4EA9-9712-0A892953061D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdMultiShow01_Click()
    Call tbSfxShowSubProcedure("01")
End Sub
Private Sub cmdMultiShow02_Click()
    Call tbSfxShowSubProcedure("02")
End Sub
Private Sub cmdMultiShow03_Click()
    Call tbSfxShowSubProcedure("03")
End Sub
Private Sub cmdMultiShow04_Click()
    Call tbSfxShowSubProcedure("04")
End Sub
Private Sub cmdMultiShow05_Click()
    Call tbSfxShowSubProcedure("05")
End Sub
Private Sub cmdMultiShow06_Click()
    Call tbSfxShowSubProcedure("06")
End Sub
Private Sub cmdMultiShow07_Click()
    Call tbSfxShowSubProcedure("07")
End Sub
Private Sub cmdMultiShow08_Click()
    Call tbSfxShowSubProcedure("08")
End Sub
Private Sub cmdMultiShow09_Click()
    Call tbSfxShowSubProcedure("09")
End Sub
Private Sub cmdMultiShow10_Click()
    Call tbSfxShowSubProcedure("10")
End Sub
Private Sub cmdMultiShow11_Click()
    Call tbSfxShowSubProcedure("11")
End Sub
Private Sub cmdMultiShow12_Click()
    Call tbSfxShowSubProcedure("12")
End Sub
Private Sub cmdMultiShow13_Click()
    Call tbSfxShowSubProcedure("13")
End Sub
Private Sub cmdMultiShow14_Click()
    Call tbSfxShowSubProcedure("14")
End Sub
Private Sub cmdMultiShow15_Click()
    Call tbSfxShowSubProcedure("15")
End Sub
Private Sub cmdMultiShow16_Click()
    Call tbSfxShowSubProcedure("16")
End Sub
Private Sub cmdMultiShow17_Click()
    Call tbSfxShowSubProcedure("17")
End Sub
Private Sub cmdMultiShow18_Click()
    Call tbSfxShowSubProcedure("18")
End Sub
Private Sub cmdMultiShow19_Click()
    Call tbSfxShowSubProcedure("19")
End Sub
Private Sub cmdMultiShow20_Click()
    Call tbSfxShowSubProcedure("20")
End Sub
Private Sub cmdMultiShow21_Click()
    Call tbSfxShowSubProcedure("21")
End Sub
Private Sub cmdMultiShow22_Click()
    Call tbSfxShowSubProcedure("22")
End Sub
Private Sub cmdMultiShow23_Click()
    Call tbSfxShowSubProcedure("23")
End Sub
Private Sub cmdMultiShow24_Click()
    Call tbSfxShowSubProcedure("24")
End Sub
Private Sub cmdMultiShow25_Click()
    Call tbSfxShowSubProcedure("25")
End Sub

Private Sub cmdSubmutSuffix_Click()

    Dim lifeCounter As Long: lifeCounter = 3
    Dim addCounter As Long: addCounter = 3
    Dim labelArray(25) As Object
    Dim txtboxArray(25) As Object
    
    Call PopulateArrays(labelArray, txtboxArray)
    
    For i = 1 To 25
        If txtboxArray(i).text <> "" And Len(txtboxArray(i).text) <> 6 And Len(txtboxArray(i).text) <> 10 And txtboxArray(i).text <> "Multiple" Then
            MsgBox "You have entered invalid suffix. Suffixes can be either 6 or 10 digits."
            Exit Sub
        End If
    Next i
    
    If shData.Range("grp").Value = "Large" And (shData.Range("state").Value = "CALIFORNIA" Or shData.Range("grp").Value = "Large" And shData.Range("state").Value = "COLORADO" Or shData.Range("grp").Value = "Large" And shData.Range("state").Value = "NEVADA") Then
        found = False
        For i = 1 To 25
            If txtboxArray(i).text <> "" And Len(txtboxArray(i).text) = 10 And Left(txtboxArray(i).text, 6) <> CStr(shOUO.Range("B6").Value) Then
                found = True
                Exit For
            End If
        Next i
        If found Then
            response = MsgBox("Found a group number that the first 6 digits did not match the case number." & vbLf & _
                                "Would you like to continue?", vbYesNo + vbExclamation, "Are you sure?")
            If response = vbNo Then Exit Sub
        End If
    End If
    
    Select Case shData.Range("G76").Value
        Case "Medical"
            Call PopulateSelectedPlanInData("AJ", "AK", labelArray, txtboxArray)
        Case "Dental"
            Call PopulateSelectedPlanInData("AM", "AN", labelArray, txtboxArray)
        Case "Vision"
            Call PopulateSelectedPlanInData("AP", "AQ", labelArray, txtboxArray)
        Case "FSA"
            Call PopulateSelectedPlanInData("NE", "NF", labelArray, txtboxArray)
        Case "Supplemental"
            Call PopulateSelectedPlanInData("NN", "NO", labelArray, txtboxArray)
        Case "Disability"
            Call PopulateSelectedPlanInData("AS", "AT", labelArray, txtboxArray)
        Case "Life"
            shData.Range("AV3:AW30").ClearContents
            shData.Range("AY3:AZ30").ClearContents
            
            For i = 1 To 25
                If Trim(labelArray(i).caption) <> "" And InStr(1, labelArray(i).caption, "Life") > 0 Then
                    shData.Range("AV" & lifeCounter).Value = labelArray(i).caption
                    shData.Range("AW" & lifeCounter).Value = txtboxArray(i).text
                    lifeCounter = lifeCounter + 1
                ElseIf Trim(labelArray(i).caption) <> "" And InStr(1, labelArray(i).caption, "AD&D") > 0 Then
                    shData.Range("AY" & addCounter).Value = labelArray(i).caption
                    shData.Range("AZ" & addCounter).Value = txtboxArray(i).text
                    addCounter = addCounter + 1
                End If
            Next i
    Call CarryoverSuffixes
    End Select
    
    Unload Me
End Sub

Private Sub PopulateSelectedPlanInData(ByVal colTitle As String, ByVal colValue As String, ByRef la() As Object, ByRef ta() As Object)
    shData.Range(colTitle & "3:" & colValue & "30").ClearContents
    For i = 1 To 25
        If Trim(la(i).caption) <> "" Then
            shData.Range(colTitle & i + 2).Value = la(i).caption
            shData.Range(colValue & i + 2).Value = ta(i).text
        End If
    Next i
End Sub
Private Sub PopulateArrays(ByRef la() As Object, ByRef ta() As Object)
'Label Array
    Set la(1) = frmMatchSuffix.lblSfx01
    Set la(2) = frmMatchSuffix.lblSfx02
    Set la(3) = frmMatchSuffix.lblSfx03
    Set la(4) = frmMatchSuffix.lblSfx04
    Set la(5) = frmMatchSuffix.lblSfx05
    Set la(6) = frmMatchSuffix.lblSfx06
    Set la(7) = frmMatchSuffix.lblSfx07
    Set la(8) = frmMatchSuffix.lblSfx08
    Set la(9) = frmMatchSuffix.lblSfx09
    Set la(10) = frmMatchSuffix.lblSfx10
    Set la(11) = frmMatchSuffix.lblSfx11
    Set la(12) = frmMatchSuffix.lblSfx12
    Set la(13) = frmMatchSuffix.lblSfx13
    Set la(14) = frmMatchSuffix.lblSfx14
    Set la(15) = frmMatchSuffix.lblSfx15
    Set la(16) = frmMatchSuffix.lblSfx16
    Set la(17) = frmMatchSuffix.lblSfx17
    Set la(18) = frmMatchSuffix.lblSfx18
    Set la(19) = frmMatchSuffix.lblSfx19
    Set la(20) = frmMatchSuffix.lblSfx20
    Set la(21) = frmMatchSuffix.lblSfx21
    Set la(22) = frmMatchSuffix.lblSfx22
    Set la(23) = frmMatchSuffix.lblSfx23
    Set la(24) = frmMatchSuffix.lblSfx24
    Set la(25) = frmMatchSuffix.lblSfx25
    
'Textbox Array
    Set ta(1) = frmMatchSuffix.tbSfx01
    Set ta(2) = frmMatchSuffix.tbSfx02
    Set ta(3) = frmMatchSuffix.tbSfx03
    Set ta(4) = frmMatchSuffix.tbSfx04
    Set ta(5) = frmMatchSuffix.tbSfx05
    Set ta(6) = frmMatchSuffix.tbSfx06
    Set ta(7) = frmMatchSuffix.tbSfx07
    Set ta(8) = frmMatchSuffix.tbSfx08
    Set ta(9) = frmMatchSuffix.tbSfx09
    Set ta(10) = frmMatchSuffix.tbSfx10
    Set ta(11) = frmMatchSuffix.tbSfx11
    Set ta(12) = frmMatchSuffix.tbSfx12
    Set ta(13) = frmMatchSuffix.tbSfx13
    Set ta(14) = frmMatchSuffix.tbSfx14
    Set ta(15) = frmMatchSuffix.tbSfx15
    Set ta(16) = frmMatchSuffix.tbSfx16
    Set ta(17) = frmMatchSuffix.tbSfx17
    Set ta(18) = frmMatchSuffix.tbSfx18
    Set ta(19) = frmMatchSuffix.tbSfx19
    Set ta(20) = frmMatchSuffix.tbSfx20
    Set ta(21) = frmMatchSuffix.tbSfx21
    Set ta(22) = frmMatchSuffix.tbSfx22
    Set ta(23) = frmMatchSuffix.tbSfx23
    Set ta(24) = frmMatchSuffix.tbSfx24
    Set ta(25) = frmMatchSuffix.tbSfx25
End Sub

Private Sub CommandButton1_Click()
    shSfx.Visible = xlSheetVisible
    shSfx.Activate
    Unload Me
End Sub

Private Sub lblSfx01_Click()
    Call getname(lblSfx01, 1)
End Sub

Private Sub lblSfx02_Click()
    Call getname(lblSfx02, 2)
End Sub

Private Sub lblSfx03_Click()
    Call getname(lblSfx03, 3)
End Sub

Private Sub lblSfx04_Click()
    Call getname(lblSfx04, 4)
End Sub

Private Sub lblSfx05_Click()
    Call getname(lblSfx05, 5)
End Sub

Private Sub lblSfx06_Click()
    Call getname(lblSfx06, 6)
End Sub

Private Sub lblSfx07_Click()
    Call getname(lblSfx07, 7)
End Sub

Private Sub lblSfx08_Click()
    Call getname(lblSfx08, 8)
End Sub

Private Sub lblSfx09_Click()
    Call getname(lblSfx09, 9)
End Sub

Private Sub lblSfx10_Click()
    Call getname(lblSfx10, 10)
End Sub

Private Sub lblSfx11_Click()
    Call getname(lblSfx11, 11)
End Sub

Private Sub lblSfx12_Click()
    Call getname(lblSfx12, 12)
End Sub

Private Sub lblSfx13_Click()
    Call getname(lblSfx13, 13)
End Sub

Private Sub lblSfx14_Click()
    Call getname(lblSfx14, 14)
End Sub

Private Sub lblSfx15_Click()
    Call getname(lblSfx15, 15)
End Sub

Private Sub lblSfx16_Click()
    Call getname(lblSfx16, 16)
End Sub

Private Sub lblSfx17_Click()
    Call getname(lblSfx17, 17)
End Sub

Private Sub lblSfx18_Click()
    Call getname(lblSfx18, 18)
End Sub

Private Sub lblSfx19_Click()
    Call getname(lblSfx19, 19)
End Sub

Private Sub lblSfx20_Click()
    Call getname(lblSfx20, 20)
End Sub

Private Sub lblSfx21_Click()
    Call getname(lblSfx21, 21)
End Sub

Private Sub lblSfx22_Click()
    Call getname(lblSfx22, 22)
End Sub

Private Sub lblSfx23_Click()
    Call getname(lblSfx23, 23)
End Sub

Private Sub lblSfx24_Click()
    Call getname(lblSfx24, 24)
End Sub

Private Sub lblSfx25_Click()
    Call getname(lblSfx25, 25)
End Sub

Private Sub getname(ByRef lbl As Object, ByVal r As Long)
    Select Case shData.Range("G76").Value
        Case "Medical"
            c = "D"
        Case "Dental"
            c = "F"
        Case "Vision"
            c = "J"
        'Case "FSA"
         '   c = "Q"
        Case Else
            Exit Sub
    End Select
    Application.EnableEvents = False
    newName = InputBox("Enter a new name:", "Change Name", lbl.caption)
    If newName = vbNullString Then
    Else
    lbl.caption = newName
    shOUO.Range(c & r + 5).Value = newName
    End If
    Application.EnableEvents = True
End Sub

Private Sub cmdMultiSuffix01_Click()
    Call cmdMultiSuffixProcedure(1)
End Sub

Private Sub cmdMultiSuffix02_Click()
    Call cmdMultiSuffixProcedure(2)
End Sub

Private Sub cmdMultiSuffix03_Click()
    Call cmdMultiSuffixProcedure(3)
End Sub

Private Sub cmdMultiSuffix04_Click()
    Call cmdMultiSuffixProcedure(4)
End Sub

Private Sub cmdMultiSuffix05_Click()
    Call cmdMultiSuffixProcedure(5)
End Sub

Private Sub cmdMultiSuffix06_Click()
    Call cmdMultiSuffixProcedure(6)
End Sub

Private Sub cmdMultiSuffix07_Click()
    Call cmdMultiSuffixProcedure(7)
End Sub

Private Sub cmdMultiSuffix08_Click()
    Call cmdMultiSuffixProcedure(8)
End Sub

Private Sub cmdMultiSuffix09_Click()
    Call cmdMultiSuffixProcedure(9)
End Sub

Private Sub cmdMultiSuffix10_Click()
    Call cmdMultiSuffixProcedure(10)
End Sub

Private Sub cmdMultiSuffix11_Click()
    Call cmdMultiSuffixProcedure(11)
End Sub

Private Sub cmdMultiSuffix12_Click()
    Call cmdMultiSuffixProcedure(12)
End Sub

Private Sub cmdMultiSuffix13_Click()
    Call cmdMultiSuffixProcedure(13)
End Sub

Private Sub cmdMultiSuffix14_Click()
    Call cmdMultiSuffixProcedure(14)
End Sub

Private Sub cmdMultiSuffix15_Click()
    Call cmdMultiSuffixProcedure(15)
End Sub

Private Sub cmdMultiSuffix16_Click()
    Call cmdMultiSuffixProcedure(16)
End Sub

Private Sub cmdMultiSuffix17_Click()
    Call cmdMultiSuffixProcedure(17)
End Sub

Private Sub cmdMultiSuffix18_Click()
    Call cmdMultiSuffixProcedure(18)
End Sub

Private Sub cmdMultiSuffix19_Click()
    Call cmdMultiSuffixProcedure(19)
End Sub

Private Sub cmdMultiSuffix20_Click()
    Call cmdMultiSuffixProcedure(20)
End Sub

Private Sub cmdMultiSuffix21_Click()
    Call cmdMultiSuffixProcedure(21)
End Sub

Private Sub cmdMultiSuffix22_Click()
    Call cmdMultiSuffixProcedure(22)
End Sub

Private Sub cmdMultiSuffix23_Click()
    Call cmdMultiSuffixProcedure(23)
End Sub

Private Sub cmdMultiSuffix24_Click()
    Call cmdMultiSuffixProcedure(24)
End Sub

Private Sub cmdMultiSuffix25_Click()
    Call cmdMultiSuffixProcedure(25)
End Sub

Private Sub cmdMultiClear01_Click()
    Call cmdMultiClearProcedure(1)
End Sub

Private Sub cmdMultiClear02_Click()
    Call cmdMultiClearProcedure(2)
End Sub

Private Sub cmdMultiClear03_Click()
    Call cmdMultiClearProcedure(3)
End Sub

Private Sub cmdMultiClear04_Click()
    Call cmdMultiClearProcedure(4)
End Sub

Private Sub cmdMultiClear05_Click()
    Call cmdMultiClearProcedure(5)
End Sub

Private Sub cmdMultiClear06_Click()
    Call cmdMultiClearProcedure(6)
End Sub

Private Sub cmdMultiClear07_Click()
    Call cmdMultiClearProcedure(7)
End Sub

Private Sub cmdMultiClear08_Click()
    Call cmdMultiClearProcedure(8)
End Sub

Private Sub cmdMultiClear09_Click()
    Call cmdMultiClearProcedure(9)
End Sub

Private Sub cmdMultiClear10_Click()
    Call cmdMultiClearProcedure(10)
End Sub

Private Sub cmdMultiClear11_Click()
    Call cmdMultiClearProcedure(11)
End Sub

Private Sub cmdMultiClear12_Click()
    Call cmdMultiClearProcedure(12)
End Sub

Private Sub cmdMultiClear13_Click()
    Call cmdMultiClearProcedure(13)
End Sub

Private Sub cmdMultiClear14_Click()
    Call cmdMultiClearProcedure(14)
End Sub

Private Sub cmdMultiClear15_Click()
    Call cmdMultiClearProcedure(15)
End Sub

Private Sub cmdMultiClear16_Click()
    Call cmdMultiClearProcedure(16)
End Sub

Private Sub cmdMultiClear17_Click()
    Call cmdMultiClearProcedure(17)
End Sub

Private Sub cmdMultiClear18_Click()
    Call cmdMultiClearProcedure(18)
End Sub

Private Sub cmdMultiClear19_Click()
    Call cmdMultiClearProcedure(19)
End Sub

Private Sub cmdMultiClear20_Click()
    Call cmdMultiClearProcedure(20)
End Sub

Private Sub cmdMultiClear21_Click()
    Call cmdMultiClearProcedure(21)
End Sub

Private Sub cmdMultiClear22_Click()
    Call cmdMultiClearProcedure(22)
End Sub

Private Sub cmdMultiClear23_Click()
    Call cmdMultiClearProcedure(23)
End Sub

Private Sub cmdMultiClear24_Click()
    Call cmdMultiClearProcedure(24)
End Sub

Private Sub cmdMultiClear25_Click()
    Call cmdMultiClearProcedure(25)
End Sub


Private Sub cmdMultiSuffixProcedure(ByVal i As Integer)
    frmMatchSuffixMulti.lblMatchSuffixMulti.caption = frmMatchSuffix.Controls("lblSfx" & Format(i, "00")).caption
    shSfx.Range("F1").Value = i
    frmMatchSuffix.Controls("tbSfx" & Format(i, "00")).text = "Multiple"
    frmMatchSuffix.Controls("tbSfx" & Format(i, "00")).Enabled = False
    frmMatchSuffixMulti.Show
End Sub

Private Sub cmdMultiClearProcedure(ByVal i As Integer)
    shSfx.Range("F1").Value = i
    frmMatchSuffix.Controls("tbSfx" & Format(i, "00")).text = ""
    frmMatchSuffix.Controls("tbSfx" & Format(i, "00")).Enabled = True
    
    lr = shSfx.Range("A" & Rows.Count).End(xlUp).row
    prod = shData.Range("G76").Value
    opt = frmMatchSuffix.Controls("lblSfx" & Format(i, "00")).caption
    If prod <> "" Then
        For K = lr To 2 Step -1
            If shSfx.Range("A" & K).Value = prod And shSfx.Range("B" & K).Value = opt Then
                shSfx.Range("A" & K & ":D" & K).Delete (xlUp)
            ElseIf prod = "Life" And shSfx.Range("A" & K).Value = "AD&D" And shSfx.Range("B" & K).Value = opt Then
                shSfx.Range("A" & K & ":D" & K).Delete (xlUp)
            End If
        Next K
    End If
End Sub

Private Sub tbSfxShowSubProcedure(ByVal no As String)
    Dim sfxList As String: sfxList = ""
    Dim lr As Long: lr = shSfx.Range("B" & Rows.Count).End(xlUp).row
    Dim i As Long
    If lr > 1 Then
        For i = 2 To lr
            If frmMatchSuffix.Controls("lblSfx" & no).caption = shSfx.Range("B" & i).Value Then
                sfxList = sfxList & shSfx.Range("D" & i).Value & " - " & shSfx.Range("C" & i).Value & vbLf
            End If
        Next i
    End If
    If sfxList <> "" Then
        MsgBox sfxList
    Else
        MsgBox "There are no multiple billing entities or suffixes entered for " & frmMatchSuffix.Controls("lblSfx" & no).caption & "."
    End If
End Sub

Private Sub tbSfx01_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(1)
End Sub
Private Sub tbSfx02_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(2)
End Sub
Private Sub tbSfx03_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(3)
End Sub
Private Sub tbSfx04_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(4)
End Sub
Private Sub tbSfx05_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(5)
End Sub
Private Sub tbSfx06_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(6)
End Sub
Private Sub tbSfx07_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(7)
End Sub
Private Sub tbSfx08_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(8)
End Sub
Private Sub tbSfx09_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(9)
End Sub
Private Sub tbSfx10_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(10)
End Sub
Private Sub tbSfx11_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(11)
End Sub
Private Sub tbSfx12_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(12)
End Sub
Private Sub tbSfx13_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(13)
End Sub
Private Sub tbSfx14_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(14)
End Sub
Private Sub tbSfx15_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(15)
End Sub
Private Sub tbSfx16_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(16)
End Sub
Private Sub tbSfx17_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(17)
End Sub
Private Sub tbSfx18_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(18)
End Sub
Private Sub tbSfx19_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(19)
End Sub
Private Sub tbSfx20_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(20)
End Sub
Private Sub tbSfx21_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(21)
End Sub
Private Sub tbSfx22_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(22)
End Sub
Private Sub tbSfx23_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(23)
End Sub
Private Sub tbSfx24_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(24)
End Sub
Private Sub tbSfx25_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(25)
End Sub

Private Sub PopulateWithCase(ByVal no As Long)
    If frmMatchSuffix.Controls("tbSfx" & Format(no, "00")).text = "" Then
        frmMatchSuffix.Controls("tbSfx" & Format(no, "00")).text = Trim(shOUO.Range("B6").Value)
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.Top = 200
    Me.Left = 400
    If shData.Range("G2").Value = "Small" Then
        lblDblClkMsg.Visible = False
    Else
        lblDblClkMsg.Visible = True
    End If
End Sub
Attribute VB_Name = "frmMatchSuffixMulti"
Attribute VB_Base = "0{01480FEF-2888-4AE5-A73A-8648D94BE062}{BB799C8E-A893-4610-A28A-8A66424444D0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdMatchSuffixMulti_Click()
    lr = shSfx.Range("A" & Rows.Count).End(xlUp).row + 1
    prodType = shData.Range("G76").Value
    prodName = Trim(frmMatchSuffix.Controls("lblSfx" & Format(shSfx.Range("F1").Value, "00")).caption)
    If prodType = "Life" Then
        prodType = Trim(Right(prodName, 4))
    End If
    
    Dim Suffix As String: Suffix = ""
    For i = 1 To 10
        Suffix = Trim(frmMatchSuffixMulti.Controls("tbMatchSuffixMulti" & Format(i, "00")).text)
        If Suffix <> "" And Len(Suffix) <> 6 And Len(Suffix) <> 10 Then
            MsgBox "You have entered invalid suffix. Suffixes can be either 6 or 10 digits."
            Exit Sub
        End If
    Next i
    
    Suffix = ""
    For i = 1 To 10
        Suffix = Trim(frmMatchSuffixMulti.Controls("tbMatchSuffixMulti" & Format(i, "00")).text)
        sfxName = Trim(frmMatchSuffixMulti.Controls("tbNameMulti" & Format(i, "00")).text)
        If Suffix <> "" And sfxName <> "" Then
            shSfx.Range("A" & lr).Value = prodType
            shSfx.Range("B" & lr).Value = prodName
            shSfx.Range("C" & lr).Value = Suffix
            shSfx.Range("D" & lr).Value = sfxName
            lr = lr + 1
        End If
    Next i
    Call SortSuffix(lr)
    Unload Me
End Sub

Private Sub SortSuffix(ByVal lr As Long)
    'sort by ProdName first (col B)
    shSfx.Sort.SortFields.Clear
    shSfx.Sort.SortFields.Add Key:=shSfx.Cells(2, 2), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shSfx.Sort
        .SetRange shSfx.Range("A2:D" & lr)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    'sort by ProdType second (col A)
    shSfx.Sort.SortFields.Clear
    shSfx.Sort.SortFields.Add Key:=shSfx.Cells(2, 1), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shSfx.Sort
        .SetRange shSfx.Range("A2:D" & lr)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Private Sub tbMatchSuffixMulti01_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(1)
End Sub
Private Sub tbMatchSuffixMulti02_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(2)
End Sub
Private Sub tbMatchSuffixMulti03_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(3)
End Sub
Private Sub tbMatchSuffixMulti04_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(4)
End Sub
Private Sub tbMatchSuffixMulti05_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(5)
End Sub
Private Sub tbMatchSuffixMulti06_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(6)
End Sub
Private Sub tbMatchSuffixMulti07_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(7)
End Sub
Private Sub tbMatchSuffixMulti08_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(8)
End Sub
Private Sub tbMatchSuffixMulti09_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(9)
End Sub
Private Sub tbMatchSuffixMulti10_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call PopulateWithCase(10)
End Sub

Sub PopulateWithCase(ByVal no As Long)
    If frmMatchSuffixMulti.Controls("tbMatchSuffixMulti" & Format(no, "00")).text = "" Then
        frmMatchSuffixMulti.Controls("tbMatchSuffixMulti" & Format(no, "00")).text = Trim(shOUO.Range("B6").Value)
    End If
End Sub


Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
End Sub
Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{B07154D5-A813-4866-9775-0873975C89C0}{0F9CAE90-0F3C-48A7-96AF-973965F00196}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    If tbPassword.text = "s!mple" Then
        shOUO.Visible = xlSheetVisible
        shSL.Visible = xlSheetVeryHidden
        shTerm.Visible = xlSheetVeryHidden
        shSB.Visible = xlSheetVeryHidden
        Unload Me
    Else
        MsgBox "Wrong password!" & vbLf & "Try again."
    End If
    
End Sub

Private Sub UserForm_Initialize()
     Me.Top = 200
    Me.Left = 400
End Sub
Attribute VB_Name = "frmSheetName"
Attribute VB_Base = "0{E66E1521-22D9-4F35-8CAE-DF3062199CA8}{C389CD1E-3572-4895-B78E-F83E1A12FCA0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdShNameOK_Click()
    Dim custWB As Workbook
    Dim targetWB As Workbook: Set targetWB = ThisWorkbook
    Dim ws As Worksheet
    Dim shFound As Boolean: shFound = False
    
    Set custWB = Application.Workbooks.Open(shData.Range("IP2").Value)
    
    For Each ws In custWB.Worksheets
        If Trim(UCase(ws.Name)) = Trim(UCase(ddShName.Value)) Then
            shFound = True
            targetWB.Worksheets(shData.Name).Range("IP3").Value = ws.Name
            Exit For
        End If
    Next ws
    
    If shFound Then custWB.Close False: frmImport.Show
    If shFound = False Then MsgBox "Wrong Sheet name, please make sure the are no spelling errors.", vbOKOnly, "Error!"
    Unload Me
    
End Sub

Private Sub UserForm_Initialize()
 Me.Top = 200
 Me.Left = 400
    Dim Author As String
    Dim fCheck As String
    Dim customerWorkbook As Workbook
    Dim ws As Worksheet
    
    
    Set customerWorkbook = Application.Workbooks.Open(shData.Range("IP2").Value)
    
    Author = customerWorkbook.BuiltinDocumentProperties("Author").Value
    fCheck = customerWorkbook.ActiveSheet.Range("A1").Value
    shData.Range("impAuthor").Value = Author
    shData.Range("impCheck").Value = fCheck
    shData.Range("impStatus").Value = "Initialized"
    
        For Each ws In customerWorkbook.Worksheets
            ddShName.AddItem (ws.Name)
        Next ws
    customerWorkbook.Close False
End Sub
Attribute VB_Name = "frmTerms"
Attribute VB_Base = "0{5BA1C67E-59E5-4DD5-97EF-D5E054BDF928}{C2DD2D80-BAC7-4C3E-8F8D-715ABC790A9F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cbAccept_Click()
    If Trim(tbUserName.Value) = "" Then
        MsgBox "Please enter your Name.", vbCritical
    ElseIf Trim(tblTitle.Value) = "" Then
        MsgBox "Please enter your Title.", vbCritical
    ElseIf Trim(tbPassword.Value) <> "Anthem1secure" Or Trim(tbPassword.Value) = "" Then
        MsgBox "Please enter a Valid Password.", vbCritical, "This workbook is protected"
    Else
        lr = shData.Range("FP" & Rows.Count).End(xlUp).row + 1
        shData.Range("FP" & lr).Value = DateTime.Now
        shData.Range("FQ" & lr).Value = Trim(tbUserName.Value)
        shData.Range("FR" & lr).Value = Trim(tblTitle.Value)
        Unload Me
    End If
End Sub

Private Sub cbDecline_Click()
    ThisWorkbook.Close SaveChanges:=False
End Sub


Private Sub UserForm_Initialize()
    Me.Top = 200
    Me.Left = 400
    lbPass.Visible = False
    tbPassword.Visible = False
    tbPassword.Value = "Anthem1secure"
'    If shData.Range("grp").Value = "Small" And shData.Range("usr").Value = "Internal" And shData.Range("B2").Value = True Then
'        lbPass.Visible = True
'        tbPassword.Visible = True
'        tbPassword.Value = ""
'    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        Cancel = True
        MsgBox "The X is disabled, please use a button on the form.", vbCritical
    End If
End Sub

Attribute VB_Name = "frmValidation"
Attribute VB_Base = "0{36C6AEB1-03DA-4329-B684-8385CAD3CFCD}{8302CFCE-7E0E-4ABA-8D1E-86F56E9D1D11}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private Sub cmbBDL_Change()
    Call DependentComboChange(cmbBDL, cmbBasSubVol, cmbBasSpsVol, cmbBasChdVol, shData.Range("BZ7"))
End Sub
Private Sub cmbBDA_Change()
    Call DependentComboChange(cmbBDA, cmbBasSubVolA, cmbBasSpsVolA, cmbBasChdVolA, shData.Range("BZ9"))
End Sub

Private Sub cmbODL_Change()
    Call DependentComboChange(cmbODL, cmbOptSubVol, cmbOptSpsVol, cmbOptChdVol, shData.Range("BZ11"))
End Sub
Private Sub cmbODA_Change()
    Call DependentComboChange(cmbODA, cmbOptSubVolA, cmbOptSpsVolA, cmbOptChdVolA, shData.Range("BZ13"))
End Sub
Private Sub cmbVDL_Change()
    Call DependentComboChange(cmbVDL, cmbVolSubVol, cmbVolSpsVol, cmbVolChdVol, shData.Range("BZ15"))
End Sub
Private Sub cmbVDA_Change()
    Call DependentComboChange(cmbVDA, cmbVolSubVolA, cmbVolSpsVolA, cmbVolChdVolA, shData.Range("BZ17"))
End Sub

Private Sub DependentComboChange(ByRef objLife As Object, ByRef objSub As Object, ByRef objSps As Object, ByRef objChd As Object, ByVal rng As Range)
    objSub.Value = ""
    objSps.Value = ""
    objChd.Value = ""
    If objLife.Value <> "" Then
        If rng.Offset(0, 0).Value <> 0 Then objSub.Value = rng.Offset(0, 0).Value
        If rng.Offset(0, 1).Value <> 0 Then objSps.Value = rng.Offset(0, 1).Value
        If rng.Offset(0, 2).Value <> 0 Then objChd.Value = rng.Offset(0, 2).Value
    End If
End Sub

Private Sub cmdNext_Click()
    cmdPrev.Enabled = True
    If shData.Range("FE3").Value <> "" Then
        cmdNext.Enabled = True
        shData.Range("FD3").Value = shData.Range("FE3").Value
        Call SetPointer
    Else
        cmdNext.Enabled = False
    End If
    Call FillForm
    Call ShowValidationStats
    Call ImageDisplay
End Sub

Private Sub cmdPrev_Click()
    cmdNext.Enabled = True
    If shData.Range("FC3").Value <> "" Then
        cmdPrev.Enabled = True
        shData.Range("FD3").Value = shData.Range("FC3").Value
        Call SetPointer
    Else
        cmdPrev.Enabled = False
    End If
    Call FillForm
    Call ShowValidationStats
    Call ImageDisplay
End Sub

Private Sub cmdValidate_Click()
    Call SaveForm
    Call CoreValidation
    Call FillForm
    Call VolumeCheck
    Call MultiplierCheck
    Call ShowValidationStats
    Call ImageDisplay
End Sub


Private Sub UserForm_Initialize()
    Dim ctlMyControl As Control
    Me.Top = 200
    Me.Left = 400
    'Populate comboboxes
    Call PopulateGender
    Call PopulateRelCod
    Call PopulateGrpType
    Call PopulateState
    Call PopulateLanguage
    Call PopulateCOB
    Call PopulateDeptNo
    Call PopulateMedProd
    Call PopulateCurrentPCP
    Call PopulateDentProd
    Call PopulateSubGrp
    Call PopulateVisProd
    Call PopulateSTD
    Call PopulateLTD
    Call PopulateVSTD
    Call PopulateVLTD
    Call PopulateBULTD
    Call PopulateBasLife
    Call PopulateOptLife
    Call PopulateVolLife
    Call PopulateBasDepLife
    Call PopulateOptDepLife
    Call PopulateVolDepLife
    Call PopulateBasADD
    Call PopulateOptADD
    Call PopulateVolADD
    Call PopulateBasDepADD
    Call PopulateOptDepADD
    Call PopulateVolDepADD
    Call PopulateCobraQual
    Call PopulateBasVol
    Call PopulateOptVol
    Call PopulateVolVol
    Call PopulateBasVolA
    Call PopulateOptVolA
    Call PopulateVolVolA
    Call PopulateBasMult
    Call PopulateOptMult
    Call PopulateVolMult
    Call PopulateBasMultA
    Call PopulateOptMultA
    Call PopulateVolMultA
    Call PopulateDepVolume(cmbBasSubVol, "BZ7", "GM")
    Call PopulateDepVolume(cmbBasSpsVol, "CA7", "GN")
    Call PopulateDepVolume(cmbBasChdVol, "CB7", "GO")
    Call PopulateDepVolume(cmbOptSubVol, "BZ7", "GP")
    Call PopulateDepVolume(cmbOptSpsVol, "CA7", "GQ")
    Call PopulateDepVolume(cmbOptChdVol, "CB7", "GR")
    Call PopulateDepVolume(cmbVolSubVol, "BZ7", "GS")
    Call PopulateDepVolume(cmbVolSpsVol, "CA7", "GT")
    Call PopulateDepVolume(cmbVolChdVol, "CB7", "GU")
    Call PopulateDepVolume(cmbBasSubVolA, "BZ7", "GV")
    Call PopulateDepVolume(cmbBasSpsVolA, "CA7", "GW")
    Call PopulateDepVolume(cmbBasChdVolA, "CB7", "GX")
    Call PopulateDepVolume(cmbOptSubVolA, "BZ7", "GY")
    Call PopulateDepVolume(cmbOptSpsVolA, "CA7", "GZ")
    Call PopulateDepVolume(cmbOptChdVolA, "CB7", "HA")
    Call PopulateDepVolume(cmbVolSubVolA, "BZ7", "HB")
    Call PopulateDepVolume(cmbVolSpsVolA, "CA7", "HC")
    Call PopulateDepVolume(cmbVolChdVolA, "CB7", "HD")
    
    
'***************ENABLING AND DISABLING THE HIDDEN FIELDS ON FORM***********************
    'Enable all fields - except Case#
    Dim pg As Object
    Dim ctrl As Object
    For Each pg In Me.mpValidation.Pages
        For Each ctrl In pg.Controls
            If InStr(1, ctrl.Name, "SubVol", vbTextCompare) = 0 And InStr(1, ctrl.Name, "SpsVol", vbTextCompare) = 0 And InStr(1, ctrl.Name, "ChdVol", vbTextCompare) = 0 Then
                ctrl.Enabled = True
            End If
        Next ctrl
    Next pg
    tbCase.Enabled = False
    
    'Disable hidden fields
    'Hide SG specific fields if LG is selected
    If shData.Range("grp").Value = "Large" Then
        cmbLang.Enabled = False
        cmbCOB.Enabled = False
    'Hide LG specific fields if SG is selected
    ElseIf shData.Range("grp").Value = "Small" Then
        tbHCID.Enabled = False
        cmbDepNo.Enabled = False
        tbEmpNo.Enabled = False
    End If
    
    'Hide Medical and Medicare if Medical is not selected at all
    If shData.Range("E2").Value <> True Then
        mpValidation.Pages("pgMed").Enabled = False
        mpValidation.Pages("pgMedicare").Enabled = False
    End If
    'Hide Dental and Prime/Complete if Dental is not selected at all
    If shData.Range("E3").Value <> True Then
        mpValidation.Pages("pgDent").Enabled = False
        mpValidation.Pages("pgPrime").Enabled = False
    Else
        'Hide Prime/Complete if Dental selected but platform is not DeCare
        If shData.Range("G73").Value <> "DeCare" Then
            mpValidation.Pages("pgPrime").Enabled = False
        End If
    End If
    'Hide Vision if Vision is not selected at all
    If shData.Range("E4").Value <> True Then
        mpValidation.Pages("pgVis").Enabled = False
    End If
    'Hide Disability if Disability is not selected at all
    If shData.Range("E6").Value <> True And shData.Range("E5").Value <> True Then
        mpValidation.Pages("pgDis").Enabled = False
    Else
        If Trim(shData.Range("EH3").Value) = "" Then cmbSTD.Enabled = False 'STD
        If Trim(shData.Range("EI3").Value) = "" Then cmbLTD.Enabled = False 'LTD
        If Trim(shData.Range("EJ3").Value) = "" Then cmbVSTD.Enabled = False 'Voluntary STD
        If Trim(shData.Range("EK3").Value) = "" Then cmbVLTD.Enabled = False 'Voluntary LTD
        If Trim(shData.Range("EL3").Value) = "" Then cmbBULTD.Enabled = False 'Buy-Up LTD
        If Trim(shData.Range("EI3").Value) = "" And Trim(shData.Range("EK3").Value) = "" And Trim(shData.Range("EL3").Value) = "" Then tbJob.Enabled = False
    End If
    'Hide Life and AD&D if Life is not selected at all
    If shData.Range("E5").Value <> True Then
        mpValidation.Pages("pgLife").Enabled = False
        mpValidation.Pages("pgADD").Enabled = False
    Else
        Call HideRegularLife(26, cmbBL, cmbBasVol, cmbBasMult) 'Basic Life
        Call HideRegularLife(58, cmbOL, cmbOptVol, cmbOptMult) 'Optional Life
        Call HideRegularLife(90, cmbVL, cmbVolVol, cmbVolMult) 'Voluntary Life
        Call HideRegularLife(3, cmbBA, cmbBasVolA, cmbBasMultA) 'Basic AD&D
        Call HideRegularLife(35, cmbOA, cmbOptVolA, cmbOptMultA) 'Optional AD&D
        Call HideRegularLife(67, cmbVA, cmbVolVolA, cmbVolMultA) 'Voluntary AD&D
        Call HideDependentLife(19, cmbBDL, cmbBasSubVol, cmbBasSpsVol, cmbBasChdVol)  'Basic Dep Life
        Call HideDependentLife(51, cmbODL, cmbOptSubVol, cmbOptSpsVol, cmbOptChdVol) 'Optional Dep Life
        Call HideDependentLife(83, cmbVDL, cmbVolSubVol, cmbVolSpsVol, cmbVolChdVol) 'Voluntary Dep Life
        Call HideDependentLife(12, cmbBDA, cmbBasSubVolA, cmbBasSpsVolA, cmbBasChdVolA) 'Basic Dep AD&D
        Call HideDependentLife(44, cmbODA, cmbOptSubVolA, cmbOptSpsVolA, cmbOptChdVolA) 'Optional Dep AD&D
        Call HideDependentLife(76, cmbVDA, cmbVolSubVolA, cmbVolSpsVolA, cmbVolChdVolA) 'Voluntary Dep AD&D
    End If
'**************************************************************************************

    'Prepare pointers
    Dim i As Long, j As Long
    For i = 7 To AreaLastRow
        If ErrorCountPerRecord(i) > 0 Then
            shData.Range("FD3").Value = i
            For j = i + 1 To AreaLastRow
                If ErrorCountPerRecord(j) > 0 Then
                    shData.Range("FE3").Value = j
                    Exit For
                End If
            Next j
            Exit For
        End If
    Next i
    
    Call ShowValidationStats
    Call FillForm
    Call ImageDisplay
End Sub

Sub ShowValidationStats()
    Dim totalError As Long: totalError = ErrorCount
    Dim lr As Long: lr = AreaLastRow
    Dim recError As Long: recError = ErrorCountPerRecord(shData.Range("FD3").Value)
    Dim member As String
    If totalError < 2 Then
        lblTotalError.caption = "There is total of " & totalError & " error."
    Else
        lblTotalError.caption = "There are total of " & totalError & " errors."
    End If
    If recError < 2 Then
        lblRecError.caption = "There is " & recError & " error for this record."
    Else
        lblRecError.caption = "There are " & recError & " errors for this record."
    End If
    
    frmValidation.Bar.Width = GoodPercent * 400
    If GoodMemberCount < 2 Then
        member = "member"
    Else
        member = "members"
    End If
    lblCompletedPerc.caption = GoodMemberCount & " " & member & " completed." & vbLf & Format(GoodPercent * 100, "00.00") & "%"
    If BadMemberCount < 2 Then
        member = "member"
    Else
        member = "members"
    End If
    lblRemainPerc.caption = BadMemberCount & " " & member & " remaining." & vbLf & Format(BadPercent * 100, "00.00") & "%"
End Sub

Sub FillForm()
    'Dim r As Long: r = shData.Range("FD3").Value
    Call FillField(tbCase, "CASE")
    Call FillField(tbEmpSSN, "EMPLOYEES SOCIAL")
    Call FillField(tbHCID, "HCID")
    Call FillField(tbLN, "LAST NAME")
    Call FillField(tbFN, "FIRST NAME")
    Call FillField(tbMI, "MIDDLE INITIAL")
    Call FillField(cmbGender, "GENDER")
    Call FillField(cmbRelCod, "RELATIONSHIP CODE")
    Call FillField(tbDOB, "DOB")
    Call FillField(tbEmail, "EMAIL")
    Call FillField(tbMemSSN, "MEMBER SSN")
    Call FillField(cmbGrpType, "GROUP TYPE")
    Call FillField(tbPhone, "PHONE NUMBER")
    Call FillField(tbAdrs, "ADDRESS")
    Call FillField(tbCity, "CITY")
    Call FillField(cmbState, "STATE")
    Call FillField(tbZip, "ZIP CODE")
    Call FillField(tbAdrs2, "SECOND ADDRESS FIELD")
    Call FillField(cmbLang, "LANGUAGE")
    Call FillField(cmbCOB, "COB")
    Call FillField(tbDOH, "DATE OF HIRE")
    Call FillField(cmbDepNo, "DEPARTMENT NUMBER")
    Call FillField(tbEmpNo, "EMPLOYEE NUMBER")
    Call FillField(tbEffDt, "EFFECTIVE DATE FOR COVERAGE")
    Call FillField(cmbMedProd, "MEDICAL PRODUCT")
    Call FillField(tbPCP, "PRIMARY CARE PHYSICIAN ID (PCP)")
    Call FillField(cmbCurrentPCP, "CURRENT PCP")
    Call FillField(cmbDentProd, "DENTAL PRODUCT")
    Call FillField(tbDentOfc, "DENTAL OFFICE")
    Call FillField(cmbVisProd, "VISION PRODUCT")
    Call FillField(cmbSTD, "STD")
    Call FillField(cmbLTD, "LTD")
    Call FillField(cmbVSTD, "VOLUNTARY STD")
    Call FillField(cmbVLTD, "VOLUNTARY LTD")
    Call FillField(cmbBULTD, "BUY-UP LTD")
    Call FillField(tbJob, "JOB TITLE")
    Call FillField(tbSalary, "SALARY")
    Call FillField(cmbBL, "BASIC LIFE")
    Call FillField(cmbOL, "OPTIONAL LIFE")
    Call FillField(cmbVL, "VOLUNTARY LIFE")
    Call FillField(cmbBDL, "BASIC DEP LIFE")
    Call FillField(cmbODL, "OPTIONAL DEP LIFE")
    Call FillField(cmbVDL, "VOLUNTARY DEP LIFE")
    Call FillField(cmbBasVol, "BASIC VOLUME")
    Call FillField(cmbOptVol, "OPTIONAL VOLUME")
    Call FillField(cmbVolVol, "VOLUNTARY VOLUME")
    Call FillField(cmbBasSubVol, "BASIC SUB VOLUME")
    Call FillField(cmbBasSpsVol, "BASIC SPOUSE VOLUME")
    Call FillField(cmbBasChdVol, "BASIC CHILD(REN) VOLUME")
    Call FillField(cmbOptSubVol, "OPTIONAL SUB VOLUME")
    Call FillField(cmbOptSpsVol, "OPTIONAL SPOUSE VOLUME")
    Call FillField(cmbOptChdVol, "OPTIONAL CHILD(REN) VOLUME")
    Call FillField(cmbVolSubVol, "VOLUNTARY SUB VOLUME")
    Call FillField(cmbVolSpsVol, "VOLUNTARY SPOUSE VOLUME")
    Call FillField(cmbVolChdVol, "VOLUNTARY CHILD(REN) VOLUME")
    Call FillField(cmbBasMult, "BASIC MULTIPLIER")
    Call FillField(cmbOptMult, "OPTIONAL MULTIPLIER")
    Call FillField(cmbVolMult, "VOLUNTARY MULTIPLIER")
    Call FillField(cmbBA, "BASIC AD&D")
    Call FillField(cmbOA, "OPTIONAL AD&D")
    Call FillField(cmbVA, "VOLUNTARY AD&D")
    Call FillField(cmbBDA, "BASIC DEP AD&D")
    Call FillField(cmbODA, "OPTIONAL DEP AD&D")
    Call FillField(cmbVDA, "VOLUNTARY DEP AD&D")
    Call FillField(cmbBasVolA, "AD&D BASIC VOLUME")
    Call FillField(cmbOptVolA, "AD&D OPTIONAL VOLUME")
    Call FillField(cmbVolVolA, "AD&D VOLUNTARY VOLUME")
    Call FillField(cmbBasSubVolA, "AD&D BASIC SUB VOLUME")
    Call FillField(cmbBasSpsVolA, "AD&D BASIC SPOUSE VOLUME")
    Call FillField(cmbBasChdVolA, "AD&D BASIC CHILD(REN) VOLUME")
    Call FillField(cmbOptSubVolA, "AD&D OPTIONAL SUB VOLUME")
    Call FillField(cmbOptSpsVolA, "AD&D OPTIONAL SPOUSE VOLUME")
    Call FillField(cmbOptChdVolA, "AD&D OPTIONAL CHILD(REN) VOLUME")
    Call FillField(cmbVolSubVolA, "AD&D VOLUNTARY SUB VOLUME")
    Call FillField(cmbVolSpsVolA, "AD&D VOLUNTARY SPOUSE VOLUME")
    Call FillField(cmbVolChdVolA, "AD&D VOLUNTARY CHILD(REN) VOLUME")
    Call FillField(cmbBasMultA, "AD&D BASIC MULTIPLIER")
    Call FillField(cmbOptMultA, "AD&D OPTIONAL MULTIPLIER")
    Call FillField(cmbVolMultA, "AD&D VOLUNTARY MULTIPLIER")
    Call FillField(tbCobStartDt, "COBRA START DATE")
    Call FillField(cmbQualEvent, "COBRA QUALIFYING EVENT")
    Call FillField(tbMediHIB, "MEDICARE HIB ID")
    Call FillField(tbPartA, "MEDICARE PART A EFF DATE")
    Call FillField(tbPartB, "MEDICARE PART B EFF DATE")
    Call FillField(tbFTS, "FTS (PRIME/COMPLETE)")
    Call FillField(cmbSubGrp, "SUB GROUP (PRIME/COMPLETE)")
    Call FillField(tbCovType, "COVERAGE TYPE (PRIME/COMPLETE)")
End Sub

Sub FillField(ByRef tb As Object, ByVal fldName As String)
    Dim r As Long: r = shData.Range("FD3").Value
    tb.text = shSL.Cells(r, ColumnPerName(fldName)).Value
    If shSL.Cells(r, ColumnPerName(fldName)).Interior.Color = 255 Then
        tb.BackColor = vbRed
    Else
        tb.BackColor = vbWhite
    End If
End Sub

Sub SaveForm()
    Application.EnableEvents = False
    Call SaveField(tbCase, "CASE")
    Call SaveField(tbEmpSSN, "EMPLOYEES SOCIAL")
    Call SaveField(tbHCID, "HCID")
    Call SaveField(tbLN, "LAST NAME")
    Call SaveField(tbFN, "FIRST NAME")
    Call SaveField(tbMI, "MIDDLE INITIAL")
    Call SaveField(cmbGender, "GENDER")
    Call SaveField(cmbRelCod, "RELATIONSHIP CODE")
    Call SaveField(tbDOB, "DOB")
    Call SaveField(tbEmail, "EMAIL")
    Call SaveField(tbMemSSN, "MEMBER SSN")
    Call SaveField(cmbGrpType, "GROUP TYPE")
    Call SaveField(tbPhone, "PHONE NUMBER")
    Call SaveField(tbAdrs, "ADDRESS")
    Call SaveField(tbCity, "CITY")
    Call SaveField(cmbState, "STATE")
    Call SaveField(tbZip, "ZIP CODE")
    Call SaveField(tbAdrs2, "SECOND ADDRESS FIELD")
    Call SaveField(cmbLang, "LANGUAGE")
    Call SaveField(cmbCOB, "COB")
    Call SaveField(tbDOH, "DATE OF HIRE")
    Call SaveField(cmbDepNo, "DEPARTMENT NUMBER")
    Call SaveField(tbEmpNo, "EMPLOYEE NUMBER")
    Call SaveField(tbEffDt, "EFFECTIVE DATE FOR COVERAGE")
    Call SaveField(cmbMedProd, "MEDICAL PRODUCT")
    Call SaveField(tbPCP, "PRIMARY CARE PHYSICIAN ID (PCP)")
    Call SaveField(cmbCurrentPCP, "CURRENT PCP")
    Call SaveField(cmbDentProd, "DENTAL PRODUCT")
    Call SaveField(tbDentOfc, "DENTAL OFFICE")
    Call SaveField(cmbVisProd, "VISION PRODUCT")
    Call SaveField(cmbSTD, "STD")
    Call SaveField(cmbLTD, "LTD")
    Call SaveField(cmbVSTD, "VOLUNTARY STD")
    Call SaveField(cmbVLTD, "VOLUNTARY LTD")
    Call SaveField(cmbBULTD, "BUY-UP LTD")
    Call SaveField(tbJob, "JOB TITLE")
    Call SaveField(tbSalary, "SALARY")
    Call SaveField(cmbBL, "BASIC LIFE")
    Call SaveField(cmbOL, "OPTIONAL LIFE")
    Call SaveField(cmbVL, "VOLUNTARY LIFE")
    Call SaveField(cmbBDL, "BASIC DEP LIFE")
    Call SaveField(cmbODL, "OPTIONAL DEP LIFE")
    Call SaveField(cmbVDL, "VOLUNTARY DEP LIFE")
    Call SaveField(cmbBasVol, "BASIC VOLUME")
    Call SaveField(cmbOptVol, "OPTIONAL VOLUME")
    Call SaveField(cmbVolVol, "VOLUNTARY VOLUME")
    Call SaveField(cmbBasSubVol, "BASIC SUB VOLUME")
    Call SaveField(cmbBasSpsVol, "BASIC SPOUSE VOLUME")
    Call SaveField(cmbBasChdVol, "BASIC CHILD(REN) VOLUME")
    Call SaveField(cmbOptSubVol, "OPTIONAL SUB VOLUME")
    Call SaveField(cmbOptSpsVol, "OPTIONAL SPOUSE VOLUME")
    Call SaveField(cmbOptChdVol, "OPTIONAL CHILD(REN) VOLUME")
    Call SaveField(cmbVolSubVol, "VOLUNTARY SUB VOLUME")
    Call SaveField(cmbVolSpsVol, "VOLUNTARY SPOUSE VOLUME")
    Call SaveField(cmbVolChdVol, "VOLUNTARY CHILD(REN) VOLUME")
    Call SaveField(cmbBasMult, "BASIC MULTIPLIER")
    Call SaveField(cmbOptMult, "OPTIONAL MULTIPLIER")
    Call SaveField(cmbVolMult, "VOLUNTARY MULTIPLIER")
    Call SaveField(cmbBA, "BASIC AD&D")
    Call SaveField(cmbOA, "OPTIONAL AD&D")
    Call SaveField(cmbVA, "VOLUNTARY AD&D")
    Call SaveField(cmbBDA, "BASIC DEP AD&D")
    Call SaveField(cmbODA, "OPTIONAL DEP AD&D")
    Call SaveField(cmbVDA, "VOLUNTARY DEP AD&D")
    Call SaveField(cmbBasVolA, "AD&D BASIC VOLUME")
    Call SaveField(cmbOptVolA, "AD&D OPTIONAL VOLUME")
    Call SaveField(cmbVolVolA, "AD&D VOLUNTARY VOLUME")
    Call SaveField(cmbBasSubVolA, "AD&D BASIC SUB VOLUME")
    Call SaveField(cmbBasSpsVolA, "AD&D BASIC SPOUSE VOLUME")
    Call SaveField(cmbBasChdVolA, "AD&D BASIC CHILD(REN) VOLUME")
    Call SaveField(cmbOptSubVolA, "AD&D OPTIONAL SUB VOLUME")
    Call SaveField(cmbOptSpsVolA, "AD&D OPTIONAL SPOUSE VOLUME")
    Call SaveField(cmbOptChdVolA, "AD&D OPTIONAL CHILD(REN) VOLUME")
    Call SaveField(cmbVolSubVolA, "AD&D VOLUNTARY SUB VOLUME")
    Call SaveField(cmbVolSpsVolA, "AD&D VOLUNTARY SPOUSE VOLUME")
    Call SaveField(cmbVolChdVolA, "AD&D VOLUNTARY CHILD(REN) VOLUME")
    Call SaveField(cmbBasMultA, "AD&D BASIC MULTIPLIER")
    Call SaveField(cmbOptMultA, "AD&D OPTIONAL MULTIPLIER")
    Call SaveField(cmbVolMultA, "AD&D VOLUNTARY MULTIPLIER")
    Call SaveField(tbCobStartDt, "COBRA START DATE")
    Call SaveField(cmbQualEvent, "COBRA QUALIFYING EVENT")
    Call SaveField(tbMediHIB, "MEDICARE HIB ID")
    Call SaveField(tbPartA, "MEDICARE PART A EFF DATE")
    Call SaveField(tbPartB, "MEDICARE PART B EFF DATE")
    Call SaveField(tbFTS, "FTS (PRIME/COMPLETE)")
    Call SaveField(cmbSubGrp, "SUB GROUP (PRIME/COMPLETE)")
    Call SaveField(tbCovType, "COVERAGE TYPE (PRIME/COMPLETE)")
    Application.EnableEvents = True
End Sub

Sub SaveField(ByRef tb As Object, ByVal fldName As String)
    shSL.Unprotect
    Dim r As Long: r = shData.Range("FD3").Value
    shSL.Cells(r, ColumnPerName(fldName)).Value = tb.text
    shSL.Protect AllowFormattingColumns:=True
End Sub

Sub SetPointer()
    shData.Range("FC3").Value = ""
    shData.Range("FE3").Value = ""
    Dim i As Long
    
    'Find Next
    For i = shData.Range("FD3").Value + 1 To AreaLastRow
        If ErrorCountPerRecord(i) > 0 Then
            shData.Range("FE3").Value = i
            Exit For
        End If
    Next i
    'Find Prev
    For i = shData.Range("FD3").Value - 1 To 7 Step -1
        If ErrorCountPerRecord(i) > 0 Then
            shData.Range("FC3").Value = i
            Exit For
        End If
    Next i
End Sub

Sub ImageDisplay()
    Call ImagePerSection("DEMO", "imgDemo", "pgDemo")
    Call ImagePerSection("MED", "imgMed", "pgMed")
    Call ImagePerSection("DENT", "imgDent", "pgDent")
    Call ImagePerSection("VIS", "imgVis", "pgVis")
    Call ImagePerSection("DIS", "imgDis", "pgDis")
    Call ImagePerSection("LIFE", "imgLife", "pgLife")
    Call ImagePerSection("ADD", "imgADD", "pgADD")
    Call ImagePerSection("COB", "imgCob", "pgCobra")
    Call ImagePerSection("MEDI", "imgMedic", "pgMedicare")
    Call ImagePerSection("P/C", "imgPrime", "pgPrime")
End Sub

Sub ImagePerSection(ByVal sectionName As String, ByVal imgName As String, ByVal pgName As String)
    If mpValidation.Pages(pgName).Enabled = False Then
        Controls(imgName & "X").Visible = False
        Controls(imgName & "C").Visible = False
        Controls(imgName & "G").Visible = True
    ElseIf ErrorCountPerSection(shData.Range("FD3").Value, startCol(sectionName), endCol(sectionName)) > 0 Then
        Controls(imgName & "X").Visible = True
        Controls(imgName & "C").Visible = False
        Controls(imgName & "G").Visible = False
    ElseIf sectionName = "DIS" And ErrorCountPerSection(shData.Range("FD3").Value, startCol(sectionName), ColumnPerName("SALARY")) > 0 Then
        Controls(imgName & "X").Visible = True
        Controls(imgName & "C").Visible = False
        Controls(imgName & "G").Visible = False
    Else
        Controls(imgName & "X").Visible = False
        Controls(imgName & "C").Visible = True
        Controls(imgName & "G").Visible = False
    End If
End Sub

Sub PopulateGender()
    Call PopulateComboFromString(cmbGender, "M,F")
End Sub
Sub PopulateRelCod()
    Call PopulateComboFromString(cmbRelCod, "SUB,SPS,CHD,HCH,STU,DOM")
End Sub
Sub PopulateGrpType()
    Call PopulateComboFromString(cmbGrpType, "A,C,R")
End Sub
Sub PopulateCurrentPCP()
    Call PopulateComboFromString(cmbCurrentPCP, "Y,N")
End Sub
Sub PopulateState()
    Call PopulateComboFromList(cmbState, shData.Range("G10:G60"))
End Sub
Sub PopulateLanguage()
    Call PopulateComboFromString(cmbLang, "ENG,SPA,ZHO,KOR,VIE,TGL,W09")
End Sub
Sub PopulateCOB()
    Call PopulateComboFromString(cmbCOB, "Y,N")
End Sub
Sub PopulateDeptNo()
    Dim lr As Long: lr = shOUO.Range("B" & Rows.Count).End(xlUp).row
    If lr < 18 Then lr = 18
    Call PopulateComboFromList(cmbDepNo, shOUO.Range("B18:B" & lr))
End Sub
Sub PopulateMedProd()
    Dim lr As Long: lr = shData.Range("DP" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbMedProd, shData.Range("DP3:DP" & lr))
End Sub
Sub PopulateDentProd()
    Dim lr As Long: lr = shData.Range("DS" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbDentProd, shData.Range("DS3:DS" & lr))
End Sub
Sub PopulateSubGrp()
    Dim lr As Long: lr = shOUO.Range("H" & Rows.Count).End(xlUp).row
    If lr < 6 Then lr = 6
    Call PopulateComboFromList(cmbSubGrp, shOUO.Range("H6:H" & lr))
End Sub
Sub PopulateVisProd()
    Dim lr As Long: lr = shData.Range("DV" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVisProd, shData.Range("DV3:DV" & lr))
End Sub
Sub PopulateSTD()
    Dim lr As Long: lr = shData.Range("EH" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbSTD, shData.Range("EH3:EH" & lr))
End Sub
Sub PopulateLTD()
    Dim lr As Long: lr = shData.Range("EI" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbLTD, shData.Range("EI3:EI" & lr))
End Sub
Sub PopulateVSTD()
    Dim lr As Long: lr = shData.Range("EJ" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVSTD, shData.Range("EJ3:EJ" & lr))
End Sub
Sub PopulateVLTD()
    Dim lr As Long: lr = shData.Range("EK" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVLTD, shData.Range("EK3:EK" & lr))
End Sub
Sub PopulateBULTD()
    Dim lr As Long: lr = shData.Range("EL" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbBULTD, shData.Range("EL3:EL" & lr))
End Sub
Sub PopulateBasLife()
    Dim lr As Long: lr = shData.Range("EN" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbBL, shData.Range("EN3:EN" & lr))
End Sub
Sub PopulateOptLife()
    Dim lr As Long: lr = shData.Range("EO" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbOL, shData.Range("EO3:EO" & lr))
End Sub
Sub PopulateVolLife()
    Dim lr As Long: lr = shData.Range("EP" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVL, shData.Range("EP3:EP" & lr))
End Sub
Sub PopulateBasDepLife()
    Dim lr As Long: lr = shData.Range("EQ" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbBDL, shData.Range("EQ3:EQ" & lr))
End Sub
Sub PopulateOptDepLife()
    Dim lr As Long: lr = shData.Range("ER" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbODL, shData.Range("ER3:ER" & lr))
End Sub
Sub PopulateVolDepLife()
    Dim lr As Long: lr = shData.Range("ES" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVDL, shData.Range("ES3:ES" & lr))
End Sub
Sub PopulateBasADD()
    Dim lr As Long: lr = shData.Range("EU" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbBA, shData.Range("EU3:EU" & lr))
End Sub
Sub PopulateOptADD()
    Dim lr As Long: lr = shData.Range("EV" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbOA, shData.Range("EV3:EV" & lr))
End Sub
Sub PopulateVolADD()
    Dim lr As Long: lr = shData.Range("EW" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVA, shData.Range("EW3:EW" & lr))
End Sub
Sub PopulateBasDepADD()
    Dim lr As Long: lr = shData.Range("EX" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbBDA, shData.Range("EX3:EX" & lr))
End Sub
Sub PopulateOptDepADD()
    Dim lr As Long: lr = shData.Range("EY" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbODA, shData.Range("EY3:EY" & lr))
End Sub
Sub PopulateVolDepADD()
    Dim lr As Long: lr = shData.Range("EZ" & Rows.Count).End(xlUp).row
    If lr < 3 Then lr = 3
    Call PopulateComboFromList(cmbVDA, shData.Range("EZ3:EZ" & lr))
End Sub
Sub PopulateCobraQual()
    Dim lr As Long: lr = shData.Range("DH" & Rows.Count).End(xlUp).row
    If lr < 2 Then lr = 2
    Call PopulateComboFromList(cmbQualEvent, shData.Range("DH2:DH" & lr))
End Sub
Sub PopulateBasVol()
    Dim lr As Long: lr = shData.Range("CE" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbBasVol, shData.Range("CE4:CE" & lr))
    Else
        lr = shData.Range("GG" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbBasVol, shData.Range("GG4:GG" & lr))
        Else
            Call PopulateComboFromList(cmbBasVol, shData.Range("BZ3"))
        End If
    End If
End Sub
Sub PopulateOptVol()
    Dim lr As Long: lr = shData.Range("CI" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbOptVol, shData.Range("CI4:CI" & lr))
    Else
        lr = shData.Range("GH" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbOptVol, shData.Range("GH4:GH" & lr))
        Else
            Call PopulateComboFromList(cmbOptVol, shData.Range("CA3"))
        End If
    End If
End Sub
Sub PopulateVolVol()
    Dim lr As Long: lr = shData.Range("CM" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbVolVol, shData.Range("CM4:CM" & lr))
    Else
        lr = shData.Range("GI" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbVolVol, shData.Range("GI4:GI" & lr))
        Else
            Call PopulateComboFromList(cmbVolVol, shData.Range("CB3"))
        End If
    End If
End Sub
Sub PopulateBasVolA()
    Dim lr As Long: lr = shData.Range("CG" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbBasVolA, shData.Range("CG4:CG" & lr))
    Else
        lr = shData.Range("GJ" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbBasVolA, shData.Range("GJ4:GJ" & lr))
        Else
            Call PopulateComboFromList(cmbBasVolA, shData.Range("BZ5"))
        End If
    End If
End Sub
Sub PopulateOptVolA()
    Dim lr As Long: lr = shData.Range("CK" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbOptVolA, shData.Range("CK4:CK" & lr))
    Else
        lr = shData.Range("GK" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbOptVolA, shData.Range("GK4:GK" & lr))
        Else
            Call PopulateComboFromList(cmbOptVolA, shData.Range("CA5"))
        End If
    End If
End Sub
Sub PopulateVolVolA()
    Dim lr As Long: lr = shData.Range("CO" & Rows.Count).End(xlUp).row
    If lr >= 4 Then
        Call PopulateComboFromList(cmbVolVolA, shData.Range("CO4:CO" & lr))
    Else
        lr = shData.Range("GL" & Rows.Count).End(xlUp).row
        If lr >= 4 Then
            Call PopulateComboFromList(cmbVolVolA, shData.Range("GL4:GL" & lr))
        Else
            Call PopulateComboFromList(cmbVolVolA, shData.Range("CB5"))
        End If
    End If
End Sub
Sub PopulateBasMult()
    Dim lr As Long: lr = shData.Range("CT" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbBasMult, shData.Range("CT4:CT" & lr))
End Sub
Sub PopulateOptMult()
    Dim lr As Long: lr = shData.Range("CX" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbOptMult, shData.Range("CX4:CX" & lr))
End Sub
Sub PopulateVolMult()
    Dim lr As Long: lr = shData.Range("DB" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbVolMult, shData.Range("DB4:DB" & lr))
End Sub
Sub PopulateBasMultA()
    Dim lr As Long: lr = shData.Range("CV" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbBasMultA, shData.Range("CV4:CV" & lr))
End Sub
Sub PopulateOptMultA()
    Dim lr As Long: lr = shData.Range("CZ" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbOptMultA, shData.Range("CZ4:CZ" & lr))
End Sub
Sub PopulateVolMultA()
    Dim lr As Long: lr = shData.Range("DD" & Rows.Count).End(xlUp).row
    If lr < 4 Then lr = 4
    Call PopulateComboFromList(cmbVolMultA, shData.Range("DD4:DD" & lr))
End Sub

Sub PopulateDepVolume(ByVal field As Object, ByVal flatAmtAdrs As String, ByVal colFlatInc As String)
    If shData.Range(flatAmtAdrs).Value = 0 And shData.Range(colFlatInc & "4").Value <> "" Then
        Dim lr As Long: lr = shData.Range(colFlatInc & Rows.Count).End(xlUp).row
        Call PopulateComboFromList(field, shData.Range(colFlatInc & "4:" & colFlatInc & lr))
    End If
End Sub


Sub PopulateComboFromString(ByVal field As Object, ByVal list As String)
    Dim char As Variant
    For Each char In Split(list, ",")
        field.AddItem (char)
    Next char
End Sub

Sub PopulateComboFromList(ByVal field As Object, ByVal rng As Range)
    Dim cl As Range
    For Each cl In rng
        field.AddItem (cl.Value)
    Next cl
End Sub

'Sub DisablePerPage(ByVal pgName As String)
'    Dim ctrl As Object
'    For Each ctrl In Me.mpValidation.Pages(pgName).Controls
'        ctrl.Enabled = False
'    Next ctrl
'End Sub

Sub HideRegularLife(ByVal myRow As Long, ByRef objLife As Object, ByRef objVol As Object, ByRef objMult As Object)
    If shData.Range("BV" & myRow).Value <> True And shData.Range("BV" & myRow + 1).Value <> True And shData.Range("BV" & myRow + 2).Value <> True Then
        objLife.Enabled = False
        objVol.Enabled = False
        objMult.Enabled = False
    Else
        If shData.Range("BV" & myRow + 3).Value <> True And shData.Range("BV" & myRow + 4).Value <> True And shData.Range("BV" & myRow + 5).Value <> True Then objVol.Enabled = False
        If shData.Range("BV" & myRow + 6).Value <> True Then objMult.Enabled = False
    End If
End Sub

Sub HideDependentLife(ByVal myRow As Long, ByRef objLife As Object, ByRef objSub As Object, ByRef objSps As Object, objChd As Object)
    If WorksheetFunction.CountIf(shData.Range("BV" & myRow & ":BV" & myRow + 6), False) = 7 Then
        objLife.Enabled = False
        objSub.Enabled = False
        objSps.Enabled = False
        objChd.Enabled = False
    Else
        If WorksheetFunction.CountIf(shData.Range("BV" & myRow & ":BV" & myRow + 2), False) = 3 Then objSub.Enabled = False
        If WorksheetFunction.CountIf(shData.Range("BV" & myRow + 3 & ":BV" & myRow + 4), False) = 2 Then objSps.Enabled = False
        If WorksheetFunction.CountIf(shData.Range("BV" & myRow + 5 & ":BV" & myRow + 6), False) = 2 Then objChd.Enabled = False
    End If
End Sub

Sub VolumeCheck()
    Call VolumeCheckRegularLife(cmbBL, cmbBasVol, "CF", shData.Range("BZ3"), shData.Range("FW4"), "BASIC VOLUME")  'Basic Volume
    Call VolumeCheckRegularLife(cmbBA, cmbBasVolA, "CH", shData.Range("BZ5"), shData.Range("FW7"), "AD&D BASIC VOLUME") 'AD&D Basic Volume
    Call VolumeCheckRegularLife(cmbOL, cmbOptVol, "CJ", shData.Range("CA3"), shData.Range("FY4"), "OPTIONAL VOLUME") 'Optional Volume
    Call VolumeCheckRegularLife(cmbOA, cmbOptVolA, "CL", shData.Range("CA5"), shData.Range("FY7"), "AD&D OPTIONAL VOLUME") 'AD&D Optional Volume
    Call VolumeCheckRegularLife(cmbVL, cmbVolVol, "CN", shData.Range("CB3"), shData.Range("GA4"), "VOLUNTARY VOLUME") 'Voluntary Volume
    Call VolumeCheckRegularLife(cmbVA, cmbVolVolA, "CP", shData.Range("CB5"), shData.Range("GA7"), "AD&D VOLUNTARY VOLUME") 'AD&D Voluntary Volume
End Sub

Sub MultiplierCheck()
    Call MultiplierCheckRegularLife(cmbBL, cmbBasMult, "CS", "BASIC VOLUME") 'Basic Multiplier
    Call MultiplierCheckRegularLife(cmbOL, cmbOptMult, "CW", "OPTIONAL VOLUME") 'Optional Multiplier
    Call MultiplierCheckRegularLife(cmbVL, cmbVolMult, "DA", "VOLUNTARY VOLUME") 'Voluntary Multiplier
    Call MultiplierCheckRegularLife(cmbBA, cmbBasMultA, "CU", "AD&D BASIC VOLUME") 'AD&D Basic Multiplier
    Call MultiplierCheckRegularLife(cmbOA, cmbOptMultA, "CY", "AD&D OPTIONAL VOLUME") 'AD&D Optional Multiplier
    Call MultiplierCheckRegularLife(cmbVA, cmbVolMultA, "DC", "AD&D VOLUNTARY VOLUME") 'AD&D Voluntary Multiplier
End Sub

Sub VolumeCheckRegularLife(ByRef objLife As Object, ByRef objVol As Object, ByVal multCol As String, ByVal singleRng As Range, ByVal incRng As Range, ByVal colName As String)
    shSL.Unprotect
    Dim found As Boolean: found = False
    Dim i As Long
    Dim col As Long: col = ColumnPerName(colName)
    Dim rw As Long: rw = shData.Range("FD3").Value
    
    If objLife.Value = "" Then Exit Sub
    If incRng <> 0 Then Exit Sub
    
    If objVol.Enabled = True Then
        If Not IsNumeric(objVol.Value) Then
            ErrorHighlight (shSL.Cells(rw, col))
            objVol.BackColor = vbRed
            Exit Sub
        End If
        If WorksheetFunction.CountA(shData.Range(multCol & "4:" & multCol & "10")) > 0 Then 'Multi class
            For i = 4 To 10
                If CDbl(objVol.Value) = shData.Range(multCol & i).Value Then
                    found = True
                    Exit For
                End If
            Next i
            If Not found Then
                ErrorHighlight (shSL.Cells(rw, col))
                objVol.BackColor = vbRed
            Else
                shSL.Cells(rw, col).Interior.Pattern = xlNone
                objVol.BackColor = vbWhite
            End If
        Else 'Single class
            If CDbl(objVol.Value) <> singleRng.Value Then
                ErrorHighlight (shSL.Cells(rw, col))
                objVol.BackColor = vbRed
            Else
                shSL.Cells(rw, col).Interior.Pattern = xlNone
                objVol.BackColor = vbWhite
            End If
        End If
    End If
    shSL.Protect AllowFormattingColumns:=True
End Sub

Sub MultiplierCheckRegularLife(ByRef objLife As Object, ByRef objMult As Object, ByVal multCol As String, ByVal colName As String)
    shSL.Unprotect
    Dim found As Boolean: found = False
    Dim i As Long
    Dim col As Long: col = ColumnPerName(colName)
    Dim rw As Long: rw = shData.Range("FD3").Value
    
    If objLife.Value = "" Then Exit Sub
    
    If objMult.Enabled = True Then
        If Not IsNumeric(objMult.Value) Then
            ErrorHighlight (shSL.Cells(rw, col))
            objMult.BackColor = vbRed
            Exit Sub
        End If
        If WorksheetFunction.CountA(shData.Range(multCol & "4:" & multCol & "10")) > 0 Then
            For i = 4 To 10
                If CDbl(objMult.Value) = shData.Range(multCol & i).Value Then
                    found = True
                    Exit For
                End If
            Next i
            If Not found Then
                ErrorHighlight (shSL.Cells(rw, col))
                objMult.BackColor = vbRed
            Else
                shSL.Cells(rw, col).Interior.Pattern = xlNone
                objMult.BackColor = vbWhite
            End If
        End If
    End If
    shSL.Protect AllowFormattingColumns:=True
End Sub

Attribute VB_Name = "frmValidation4Term"
Attribute VB_Base = "0{D1C149DA-AB9D-4271-B291-4CF2CC30EFBC}{B4007A61-CC0A-4713-8656-0014F34ED69A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdNext4T_Click()
    cmdPrev4T.Enabled = True
    If shData.Range("FE4").Value <> "" Then
        cmdNext4T.Enabled = True
        shData.Range("FD4").Value = shData.Range("FE4").Value
        Call SetPointer4Term
    Else
        cmdNext4T.Enabled = False
    End If
    Call FillForm4Term
    Call ShowValidationStats4Term
End Sub

Private Sub cmdPrev4T_Click()
    cmdNext4T.Enabled = True
    If shData.Range("FC4").Value <> "" Then
        cmdPrev4T.Enabled = True
        shData.Range("FD4").Value = shData.Range("FC4").Value
        Call SetPointer4Term
    Else
        cmdPrev4T.Enabled = False
    End If
    Call FillForm4Term
    Call ShowValidationStats4Term
End Sub

Sub SetPointer4Term()
    shData.Range("FC4").Value = ""
    shData.Range("FE4").Value = ""
    Dim i As Long
    
    'Find Next
    For i = shData.Range("FD4").Value + 1 To AreaLastRow4Term
        If ErrorCountPerRecord4Term(i) > 0 Then
            shData.Range("FE4").Value = i
            Exit For
        End If
    Next i
    'Find Prev
    For i = shData.Range("FD4").Value - 1 To 7 Step -1
        If ErrorCountPerRecord4Term(i) > 0 Then
            shData.Range("FC4").Value = i
            Exit For
        End If
    Next i
End Sub

Private Sub cmdValidate4T_Click()
    Call SaveForm4Term
    Call TermValidation
    Call FillForm4Term
    Call ShowValidationStats4Term
End Sub

'Private Sub cmbGrpNo4T_Change()
'    Dim lr As Long: lr = shData.Range("II" & Rows.Count).End(xlUp).Row
'    If lr < 2 Then lr = 2
'    On Error Resume Next
'    cmbGrpNo4T.Value = WorksheetFunction.VLookup(cmbGrpNo4T.Value, shData.Range("II2:IJ" & lr), 2, 0)
'End Sub
'
'

Private Sub UserForm_Initialize()
 Me.Top = 200
    Me.Left = 400
    Call PopulateGender4Term
    Call PopulateRelCod4Term
    Call PopulateState4Term
    Call PopulateLanguage4Term
    Call PopulateGroupNo4Term
    Call PopulateCurrentPCP4Term
    
    'Prepare pointers
    Dim i As Long, j As Long
    For i = 7 To AreaLastRow4Term
        If ErrorCountPerRecord4Term(i) > 0 Then
            shData.Range("FD4").Value = i
            For j = i + 1 To AreaLastRow4Term
                If ErrorCountPerRecord4Term(j) > 0 Then
                    shData.Range("FE4").Value = j
                    Exit For
                End If
            Next j
            Exit For
        End If
    Next i
    
    Call FillForm4Term
    Call ShowValidationStats4Term
End Sub

Sub PopulateGender4Term()
    Call PopulateComboFromString4Term(cmbGender4T, "M,F")
End Sub

Sub PopulateRelCod4Term()
    Call PopulateComboFromString4Term(cmbRelCod4T, "SUB,SPS,CHD,HCH,STU,DOM")
End Sub

Sub PopulateState4Term()
    Call PopulateComboFromList4Term(cmbState4T, shData.Range("G10:G60"))
End Sub

Sub PopulateLanguage4Term()
    Call PopulateComboFromString4Term(cmbLang4T, "ENG,SPA,ZHO,KOR,VIE,TGL,W09")
End Sub

Sub PopulateGroupNo4Term()
    Dim lr As Long: lr = shData.Range("II" & Rows.Count).End(xlUp).row
    If lr < 2 Then lr = 2
    Call PopulateComboFromList4Term(cmbGrpNo4T, shData.Range("II2:II" & lr))
End Sub

Sub PopulateCurrentPCP4Term()
    Call PopulateComboFromString4Term(cmbCurrentPCP4T, "Y,N")
End Sub

Sub PopulateComboFromString4Term(ByVal field As Object, ByVal list As String)
    Dim char As Variant
    For Each char In Split(list, ",")
        field.AddItem (char)
    Next char
End Sub

Sub PopulateComboFromList4Term(ByVal field As Object, ByVal rng As Range)
    Dim cl As Range
    For Each cl In rng
        field.AddItem (cl.Value)
    Next cl
End Sub

Sub SaveForm4Term()
    Application.EnableEvents = False
    Call SaveField4Term(tbCase4T, "CASE")
    Call SaveField4Term(tbEmpSSN4T, "EMPLOYEES SOCIAL")
    Call SaveField4Term(tbLN4T, "LAST NAME")
    Call SaveField4Term(tbFN4T, "FIRST NAME")
    Call SaveField4Term(cmbGender4T, "GENDER")
    Call SaveField4Term(cmbRelCod4T, "RELATIONSHIP CODE")
    Call SaveField4Term(tbDOB4T, "DOB")
    Call SaveField4Term(tbMemSSN4T, "MEMBER SSN")
    Call SaveField4Term(tbAdrs4T, "ADDRESS")
    Call SaveField4Term(tbCity4T, "CITY")
    Call SaveField4Term(cmbState4T, "STATE")
    Call SaveField4Term(tbZip4T, "ZIP CODE")
    Call SaveField4Term(cmbLang4T, "LANGUAGE")
    Call SaveField4Term(tbEffDt4T, "EFFECTIVE DATE FOR COVERAGE")
    Call SaveField4Term(tbTermDt4T, "TERMINATION DATE")
    Call SaveField4Term(cmbGrpNo4T, "GROUP NUMBER")
    Call SaveField4Term(tbPCP4T, "PRIMARY CARE PHYSICIAN ID (PCP)")
    Call SaveField4Term(cmbCurrentPCP4T, "CURRENT PCP")
    Application.EnableEvents = True
End Sub

Sub SaveField4Term(ByRef tb As Object, ByVal fldName As String)
    shTerm.Unprotect
    Dim r As Long: r = shData.Range("FD4").Value
    shTerm.Cells(r, ColumnPerName4Term(fldName)).Value = tb.text
    shTerm.Protect AllowFormattingColumns:=True
End Sub

Sub FillForm4Term()
    Call FillField4Term(tbCase4T, "CASE")
    Call FillField4Term(tbEmpSSN4T, "EMPLOYEES SOCIAL")
    Call FillField4Term(tbLN4T, "LAST NAME")
    Call FillField4Term(tbFN4T, "FIRST NAME")
    Call FillField4Term(cmbGender4T, "GENDER")
    Call FillField4Term(cmbRelCod4T, "RELATIONSHIP CODE")
    Call FillField4Term(tbDOB4T, "DOB")
    Call FillField4Term(tbMemSSN4T, "MEMBER SSN")
    Call FillField4Term(tbAdrs4T, "ADDRESS")
    Call FillField4Term(tbCity4T, "CITY")
    Call FillField4Term(cmbState4T, "STATE")
    Call FillField4Term(tbZip4T, "ZIP CODE")
    Call FillField4Term(cmbLang4T, "LANGUAGE")
    Call FillField4Term(tbEffDt4T, "EFFECTIVE DATE FOR COVERAGE")
    Call FillField4Term(tbTermDt4T, "TERMINATION DATE")
    Call FillField4Term(cmbGrpNo4T, "GROUP NUMBER")
    Call FillField4Term(tbPCP4T, "PRIMARY CARE PHYSICIAN ID (PCP)")
    Call FillField4Term(cmbCurrentPCP4T, "CURRENT PCP")
End Sub

Sub FillField4Term(ByRef tb As Object, ByVal fldName As String)
    Dim r As Long: r = shData.Range("FD4").Value
    tb.text = shTerm.Cells(r, ColumnPerName4Term(fldName)).Value
    If shTerm.Cells(r, ColumnPerName4Term(fldName)).Interior.Color = 255 Then
        tb.BackColor = vbRed
    Else
        tb.BackColor = vbWhite
    End If
End Sub

Sub ShowValidationStats4Term()
    Dim totalError As Long: totalError = ErrorCount4Term
    Dim lr As Long: lr = AreaLastRow4Term
    Dim recError As Long: recError = ErrorCountPerRecord4Term(shData.Range("FD4").Value)
    Dim member As String
    If totalError < 2 Then
        lblTotalError.caption = "There is total of " & totalError & " error."
    Else
        lblTotalError.caption = "There are total of " & totalError & " errors."
    End If
    If recError < 2 Then
        lblRecError.caption = "There is " & recError & " error for this record."
    Else
        lblRecError.caption = "There are " & recError & " errors for this record."
    End If
    
    frmValidation4Term.Bar.Width = GoodPercent4Term * 400
    If GoodMemberCount4Term < 2 Then
        member = "member"
    Else
        member = "members"
    End If
    lblCompletedPerc.caption = GoodMemberCount4Term & " " & member & " completed." & vbLf & Format(GoodPercent4Term * 100, "00.00") & "%"
    If BadMemberCount4Term < 2 Then
        member = "member"
    Else
        member = "members"
    End If
    lblRemainPerc.caption = BadMemberCount4Term & " " & member & " remaining." & vbLf & Format(BadPercent4Term * 100, "00.00") & "%"
End Sub
Attribute VB_Name = "shDE"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.row = shData.Range("version").row And Target.Column = shData.Range("version").Column Then
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        shOUO.Unprotect
        shOUO.Range("AG1").Value = shData.Range("version").Value
        shData.Range("FU3").Value = Date
        shOUO.Protect
        Application.ScreenUpdating = True
        Application.EnableEvents = True
    End If
End Sub

Attribute VB_Name = "shNW"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shOUO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub msg_off_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If shOUO.Shapes("cbLvl3").Visible Then shOUO.Shapes("Level3_help").Visible = msoFalse
End Sub
Private Sub msg_on_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If shOUO.Shapes("cbLvl3").Visible Then shOUO.Shapes("Level3_help").Visible = msoTrue
End Sub

Private Sub Worksheet_Activate()
'***Disable Products if no State is selected***********************************************************************************
    Application.ScreenUpdating = False
    Call PopulateStateDDL
    Call EnableDisableProductsSold
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    shOUO.Unprotect
    Application.ScreenUpdating = False
    tc = Target.Column
    Tr = Target.row
    tv = Target.Value
   
    Application.EnableEvents = False
    If tc = 2 And Tr = 6 Then
        shOUO.Cells(Tr, tc).NumberFormat = "@"
        shOUO.Cells(Tr, tc).Value = Trim(shOUO.Cells(Tr, tc).Value)
    ElseIf tc = 2 And Tr >= 18 And Tr <= 67 Then
        shOUO.Cells(Tr, tc).NumberFormat = "@"
        shOUO.Cells(Tr, tc).Value = Trim(shOUO.Cells(Tr, tc).Value)
    End If
    
    If tc > 4 Then
        Application.Undo
        oldvalue = Target.Value
        Target.Value = tv
        'If SUB GROUPS are being entered for Prime/Complete, dont bring back up the cursor
        If tc = 8 Then
            shOUO.Cells(Tr + 1, tc).Select
        End If
    End If
    Application.EnableEvents = True
    'MsgBox oldValue
    
    'Department codes are not applicable in SG
    If shData.Range("grp").Value = "Small" And tc = 2 And Tr >= 18 Then
        dclr = shOUO.Range("B" & Rows.Count).End(xlUp).row
        If dclr >= 18 Then
            Application.EnableEvents = False
            shOUO.Range("B18:B" & dclr).ClearContents
            Application.EnableEvents = True
        End If
        MsgBox "Small Group does not use Department Codes."
    End If
    
    If tc = 14 And Tr >= 6 And Tr <= 30 Then
        shData.Range("G84").Value = tv
        Application.EnableEvents = False
        shOUO.Cells(1, 1).Select
        Application.EnableEvents = True
        Target.Select
    End If
    
    
'***Validation required after each change**************************************************************************************
    Application.EnableEvents = False
    shData.Range("G80").Value = False
    Application.EnableEvents = True
'***Avoid blanks between options***********************************************************************************************
    If tc = 4 Or tc = 6 Or tc = 10 Or tc = 12 Or tc = 14 Or tc = 17 Or tc = 19 Then
        Call RemoveGapsOnOUO(tc)
        On Error Resume Next
        For i = 6 To 30
            If shOUO.Cells(i, tc).Value = tv Then
                shOUO.Cells(i, tc).Select
                Exit For
            End If
        Next i
    End If

'***DeCare Platform************************************************************************************************************
    On Error Resume Next
    If tc = 6 And Tr <= 30 And Tr >= 6 Then
        found = False
        For i = 6 To 30
            If InStr(1, shOUO.Range("F" & i).Value, "Complete", vbTextCompare) > 0 Or _
                InStr(1, shOUO.Range("F" & i).Value, "Prime", vbTextCompare) > 0 Then
                found = True
                Exit For
            End If
        Next i
        If found = True And Not CentralState Then
            shOUO.Shapes.Range(Array("shapeDecarePlatform")).Visible = msoTrue
            If shData.Range("J73").Value = False Then
                'MsgBox "You selected Prime or Complete for Dental Plan." & vbLf & "Please select the platform from above the dental options."
                shData.Range("J73").Value = True
                'shOUO.Columns("H:I").EntireColumn.Hidden = False
            End If
            If shData.Range("state").Value = "CALIFORNIA" And shData.Range("grp") = "SMALL" Then
                shData.Range("H73").Value = True
            End If
        Else
            shOUO.Shapes.Range(Array("shapeDecarePlatform")).Visible = msoFalse
            shData.Range("H73:J73").Value = False
            shOUO.Columns("H:I").EntireColumn.Hidden = True
        End If

    End If
    
'***Setup and modify Dynamic Life list on the fly******************************************************************************
    If tc = 14 And Tr >= 6 And Tr <= 30 Then
        Application.ScreenUpdating = False
        lr = shData.Range("BK" & Rows.Count).End(xlUp).row
        shData.Range("BL2:BL" & lr).Value = shData.Range("BK2:BK" & lr).Value
        For i = 6 To 30
            For j = 2 To lr
                If shOUO.Range("N" & i).Value <> "" And shOUO.Range("N" & i).Value = shData.Range("BL" & j).Value Then
                    shData.Range("BL" & j).ClearContents
                End If
            Next j
        Next i
        
        shData.Sort.SortFields.Clear
        shData.Sort.SortFields.Add Key:=Range("BL2"), _
            SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With shData.Sort
            .SetRange Range("BL2:BL" & lr)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
        lr = shData.Range("BL" & Rows.Count).End(xlUp).row
        If lr < 2 Then lr = 2
        ActiveWorkbook.Names("DYN_LIFE").RefersToR1C1 = "=Data!R2C64:R" & lr & "C64"
    End If
    
'***Setup and modify Dynamic Disability list on the fly******************************************************************************
    If tc = 12 And Tr >= 6 And Tr <= 30 Then
        Application.ScreenUpdating = False
        lr = shData.Range("FM" & Rows.Count).End(xlUp).row
        shData.Range("FN2:FN" & lr).Value = shData.Range("FM2:FM" & lr).Value
        For i = 6 To 30
            For j = 2 To lr
                If shOUO.Range("L" & i).Value <> "" And shOUO.Range("L" & i).Value = shData.Range("FN" & j).Value Then
                    shData.Range("FN" & j).ClearContents
                End If
            Next j
        Next i
        
        shData.Sort.SortFields.Clear
        shData.Sort.SortFields.Add Key:=Range("FN2"), _
            SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With shData.Sort
            .SetRange Range("FN2:FN" & lr)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
        lr = shData.Range("FN" & Rows.Count).End(xlUp).row
        If lr < 2 Then lr = 2
        ActiveWorkbook.Names("DYN_DIS").RefersToR1C1 = "=Data!R2C170:R" & lr & "C170"
    End If
    
'***Bundles********************************************************************************************************************
    If tc = 14 And Tr >= 6 And Tr <= 30 Then
        Application.ScreenUpdating = False
'

'*******Loop and find what is missing and remove it from data tab**************************************************************
        If oldvalue <> "" Then
            Call ClearIfLifeNotExist("Basic Life")
            Call ClearIfLifeNotExist("Basic AD&D")
            Call ClearIfLifeNotExist("Optional Life")
            Call ClearIfLifeNotExist("Optional AD&D")
            Call ClearIfLifeNotExist("Voluntary Life")
            Call ClearIfLifeNotExist("Voluntary AD&D")
            Call ClearIfLifeNotExist("Basic Dep Life")
            Call ClearIfLifeNotExist("Basic Dep AD&D")
            Call ClearIfLifeNotExist("Optional Dep Life")
            Call ClearIfLifeNotExist("Optional Dep AD&D")
            Call ClearIfLifeNotExist("Voluntary Dep Life")
            Call ClearIfLifeNotExist("Voluntary Dep AD&D")
            Call ClearIfLifeNotExist("Group Term Life")
            Call ClearIfLifeNotExist("Group Term AD&D")
        End If
        Call ClearFalsePositives
    End If
    
'***Product removal************************************************************************************************************
    If Tr >= 6 And Tr <= 30 Then
        Application.ScreenUpdating = False
        Call ProductRemoval("AJ", "AK", "D") 'Medical
        Call ProductRemoval("AM", "AN", "F") 'Dental
        Call ProductRemoval("AP", "AQ", "J") 'Vision
        Call ProductRemoval("NE", "NF", "Q") 'FSA
        Call ProductRemoval("NN", "NO", "S") 'Supplemental
        Call ProductRemoval("AS", "AT", "L") 'Disability
        Call ProductRemoval("AV", "AW", "N") 'Life
        Call ProductRemoval("AY", "AZ", "N") 'AD&D
    End If
    
'***Disable Products if no State is selected***********************************************************************************
    Call EnableDisableProductsSold
    
'***Display or Hide Volumes****************************************************************************************************
    If Application.WorksheetFunction.CountA(shOUO.Range("FVL"), _
                                                shOUO.Range("FVA"), _
                                                shOUO.Range("FVBDL"), _
                                                shOUO.Range("FVBDA"), _
                                                shOUO.Range("FVODL"), _
                                                shOUO.Range("FVODA"), _
                                                shOUO.Range("FVVDL"), _
                                                shOUO.Range("FVVDA")) = 0 Then
        shOUO.Range("FV_Section").EntireColumn.Hidden = True
    Else
        shOUO.Range("FV_Section").EntireColumn.Hidden = False
    End If
    
    If Application.WorksheetFunction.CountA(shOUO.Range("IVL"), _
                                                shOUO.Range("IVA"), _
                                                shOUO.Range("IVBDL"), _
                                                shOUO.Range("IVBDA"), _
                                                shOUO.Range("IVODL"), _
                                                shOUO.Range("IVODA"), _
                                                shOUO.Range("IVVDL"), _
                                                shOUO.Range("IVVDA")) = 0 Then
        shOUO.Range("IV_Section").EntireColumn.Hidden = True
    Else
        shOUO.Range("IV_Section").EntireColumn.Hidden = False
    End If
    
'***Popup Life/AD&D options****************************************************************************************************
    If tc = 14 And Tr >= 6 And Tr <= 30 Then
        If shData.Range("level3").Value <> True Then
            shOUS.Columns("O:O").Hidden = False
            On Error Resume Next
            Select Case tv
                Case "Basic Life"
                    Call RegularLifeProcedure(Target, tv, "BV26", "BV27", "BV28", "BV29", "BV30", "BV31", "BV32", "BV33", "BV34")
                Case "Basic AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV3", "BV4", "BV5", "BV6", "BV7", "BV8", "BV9", "BV10", "BV11")
                Case "Optional Life"
                    Call RegularLifeProcedure(Target, tv, "BV58", "BV59", "BV60", "BV61", "BV62", "BV63", "BV64", "BV65", "BV66")
                Case "Optional AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV35", "BV36", "BV37", "BV38", "BV39", "BV40", "BV41", "BV42", "BV43")
                Case "Voluntary Life"
                    Call RegularLifeProcedure(Target, tv, "BV90", "BV91", "BV92", "BV93", "BV94", "BV95", "BV96", "BV97", "BV98")
                Case "Voluntary AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV67", "BV68", "BV69", "BV70", "BV71", "BV72", "BV73", "BV74", "BV75")
                Case "Basic Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV19", "BV20", "BV21", "BV22", "BV23", "BV24", "BV25")
                Case "Basic Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV12", "BV13", "BV14", "BV15", "BV16", "BV17", "BV18")
                Case "Optional Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV51", "BV52", "BV53", "BV54", "BV55", "BV56", "BV57")
                Case "Optional Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV44", "BV45", "BV46", "BV47", "BV48", "BV49", "BV50")
                Case "Voluntary Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV83", "BV84", "BV85", "BV86", "BV87", "BV88", "BV89")
                Case "Voluntary Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV76", "BV77", "BV78", "BV79", "BV80", "BV81", "BV82")
                Case "Group Term Life"
                    Call RegularLifeProcedure(Target, tv, "BV99", "BV100", "BV101", "BV102", "BV103", "BV104", "BV105", "BV106", "BV107")
                Case "Group Term AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV108", "BV109", "BV110", "BV111", "BV112", "BV113", "BV114", "BV115", "BV116")
                Case ""
                    'Parent box visibility
                     shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
                    'Child box visibility
                    shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
                    shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
                    shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
                    'Dependent box visibility
                    shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
                    Call HideFlatAmountForm
                    Call HideSalaryBasedForm
            End Select
        End If
    Else
        'Parent box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        'Dependegfdnt box visibility
        shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
    End If
    
'***Highlight the last entered life product************************************************************************************
    'This procedure should be always at the end of the Change event
    If tc > 4 And tc <> 8 Then
        For i = 6 To 30
            If Cells(i, tc).Value = tv Then
                Cells(i, tc).Select
                Exit For
            End If
        Next i
    End If
   ' If tc >= 18 And tc <= 20 Then
    '    If Tr = 7 And tc = 18 Then
    '        Call HighlightLife("Basic Life")
    '    ElseIf Tr = 7 And tc = 19 Then
    '        Call HighlightLife("Optional Life")
     '   ElseIf Tr = 7 And tc = 20 Then
    '        Call HighlightLife("Voluntary Life")
   '     ElseIf Tr = 9 And tc = 18 Then
   '         Call HighlightLife("Basic AD&D")
   '     ElseIf Tr = 9 And tc = 19 Then
   '         Call HighlightLife("Optional AD&D")
   '     ElseIf Tr = 9 And tc = 20 Then
   '         Call HighlightLife("Voluntary AD&D")
   '     ElseIf Tr = 11 Then
   '         Call HighlightLife("Basic Dep Life")
   '     ElseIf Tr = 13 Then
   '         Call HighlightLife("Basic Dep AD&D")
   '     ElseIf Tr = 15 Then
   '         Call HighlightLife("Optional Dep Life")
   '     ElseIf Tr = 17 Then
    '        Call HighlightLife("Optional Dep AD&D")
   '     ElseIf Tr = 19 Then
   '         Call HighlightLife("Voluntary Dep Life")
    '    ElseIf Tr = 21 Then
    '        Call HighlightLife("Voluntary Dep AD&D")
    '    End If
   ' End If
    shOUO.Range("C2").Font.Color = -16776961
    shOUO.Range("C2").Font.TintAndShade = 0
    shOUO.Protect
End Sub

Private Sub HighlightLife(ByVal str As String)
    Application.ScreenUpdating = False
    For i = 6 To 30
        If shOUO.Range("N" & i).Value = str Then
            shOUO.Range("N" & i).Select
            Exit For
        End If
    Next i
End Sub

Private Sub ProductRemoval(ByVal colDataStart As String, ByVal colDataEnd As String, ByVal colUOU As String)
'Removes the product from Data sheet if it is deleted from Office Use Only
    Application.ScreenUpdating = False
    For i = 3 To 30
        If shData.Range(colDataStart & i).Value <> "" Then
            found = False
            For j = 6 To 30
                If shOUO.Range(colUOU & j).Value <> "" Then
                    If Trim(shOUO.Range(colUOU & j).Value) = Trim(shData.Range(colDataStart & i).Value) Then
                        found = True
                        Exit For
                    End If
                End If
            Next j
            If found = False Then
                opt = shData.Range(colDataStart & i).Value
                shData.Range(colDataStart & i & ":" & colDataEnd & i).ClearContents
                lr = shSfx.Range("A" & Rows.Count).End(xlUp).row
                prod = ""
                Select Case colDataStart
                    Case "AJ"
                        prod = "Medical"
                    Case "AM"
                        prod = "Dental"
                    Case "AP"
                        prod = "Vision"
                    Case "NE"
                        prod = "FSA"
                    Case "AS"
                        prod = "Disability"
                    Case "AV", "AY"
                        prod = "Life"
                End Select
                If prod <> "" Then
                    For K = lr To 2 Step -1
                        If shSfx.Range("A" & K).Value = prod And shSfx.Range("B" & K).Value = opt Then
                            shSfx.Range("A" & K & ":D" & K).Delete (xlUp)
                        End If
                    Next K
                End If
            End If
        End If
    Next i
    shData.Sort.SortFields.Clear
    shData.Sort.SortFields.Add Key:=Range(colDataStart & "3"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With shData.Sort
        .SetRange Range(colDataStart & "3:" & colDataEnd & "30")
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Private Sub Worksheet_Deactivate()
    'Call OnKeyDownDefault 'Defaults behavior
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    'Call OnKeyDownDefault 'Defaults behavior
    
    shOUO.Unprotect
    Application.ScreenUpdating = False
    tc = Target.Column
    Tr = Target.row
    On Error Resume Next
    tv = Target.Value
    
    If tv <> "" Then
        If tc = 14 And Tr >= 6 And Tr <= 30 Then
            shData.Range("G84").Value = tv
        End If
    End If
    
    If tc = 14 Then
        For i = 6 To 30
            If shOUO.Cells(i, 14).Value = shData.Range("G84").Value Then
                Tr = i
                Exit For
            End If
        Next i
    End If
    
'    If tc = 14 And tr >= 6 And tr <= 30 And tv <> "" Then
'        shData.Range("G84").Value = tv
'        Application.EnableEvents = False
'        shOUO.Cells(1, 1).Select
'        Application.EnableEvents = True
'        Target.Select
'    End If
'***Popup Life/AD&D options****************************************************************************************************
    If tc = 14 And Tr >= 6 And Tr <= 30 Then
        If shData.Range("level3").Value <> True Then
            On Error Resume Next
            Select Case tv
                Case "Basic Life"
                    Call RegularLifeProcedure(Target, tv, "BV26", "BV27", "BV28", "BV29", "BV30", "BV31", "BV32", "BV33", "BV34")
                Case "Basic AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV3", "BV4", "BV5", "BV6", "BV7", "BV8", "BV9", "BV10", "BV11")
                Case "Optional Life"
                    Call RegularLifeProcedure(Target, tv, "BV58", "BV59", "BV60", "BV61", "BV62", "BV63", "BV64", "BV65", "BV66")
                Case "Optional AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV35", "BV36", "BV37", "BV38", "BV39", "BV40", "BV41", "BV42", "BV43")
                Case "Voluntary Life"
                    Call RegularLifeProcedure(Target, tv, "BV90", "BV91", "BV92", "BV93", "BV94", "BV95", "BV96", "BV97", "BV98")
                Case "Voluntary AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV67", "BV68", "BV69", "BV70", "BV71", "BV72", "BV73", "BV74", "BV75")
                Case "Basic Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV19", "BV20", "BV21", "BV22", "BV23", "BV24", "BV25")
                Case "Basic Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV12", "BV13", "BV14", "BV15", "BV16", "BV17", "BV18")
                Case "Optional Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV51", "BV52", "BV53", "BV54", "BV55", "BV56", "BV57")
                Case "Optional Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV44", "BV45", "BV46", "BV47", "BV48", "BV49", "BV50")
                Case "Voluntary Dep Life"
                    Call DependentLifeProcedure(Target, tv, "BV83", "BV84", "BV85", "BV86", "BV87", "BV88", "BV89")
                Case "Voluntary Dep AD&D"
                    Call DependentLifeProcedure(Target, tv, "BV76", "BV77", "BV78", "BV79", "BV80", "BV81", "BV82")
                Case "Group Term Life"
                    Call RegularLifeProcedure(Target, tv, "BV99", "BV100", "BV101", "BV102", "BV103", "BV104", "BV105", "BV106", "BV107")
                Case "Group AD&D"
                    Call RegularLifeProcedure(Target, tv, "BV108", "BV109", "BV110", "BV111", "BV112", "BV113", "BV114", "BV115", "BV116")
                Case ""
                    'Parent box visibility
                    shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
                    'Child box visibility
                    shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
                    shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
                    shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
                    Call HideFlatAmountForm
                    Call HideSalaryBasedForm
                    'Dependent box visibility
                    shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
            End Select
        End If
    Else
        'Parent box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
        'Dependent box visibility
        shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
    End If
    shOUO.Protect
End Sub

Private Sub DependentLifeProcedure(ByRef Target As Range, ByVal frameName As String, ByVal subFA As String, ByVal subFI As String, ByVal subSB As String, _
                                    ByVal spsFA As String, ByVal spsFI As String, ByVal chdFA As String, ByVal chdFI As String)
    Application.ScreenUpdating = False
    shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoTrue
    shOUO.Shapes.Range(Array("frameDepOptions")).Select
    Selection.Characters.text = UCase(frameName) & " OPTIONS"
    Target.Select
    'Parent box visibility
    shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoFalse
    'Child box visibility
    shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
    shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
    shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
    Call HideFlatAmountForm
    Call HideSalaryBasedForm
    
    'Sub
    If shData.Range(subFA).Value = True Then 'Sub Flat Amount
        shOUO.CheckBoxes("cbDepSubFA").Value = xlOn
        shOUO.CheckBoxes("cbDepSubFI").Value = xlOff
        shOUO.CheckBoxes("cbDepSubSB").Value = xlOff
        shData.Range(subFI).Value = False
        shData.Range(subSB).Value = False
    ElseIf shData.Range(subFI).Value = True Then 'Sub Flat Incremental
        shOUO.CheckBoxes("cbDepSubFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSubFI").Value = xlOn
        shOUO.CheckBoxes("cbDepSubSB").Value = xlOff
        shData.Range(subFA).Value = False
        shData.Range(subSB).Value = False
    ElseIf shData.Range(subSB).Value = True Then 'Sub Salary Based
        shOUO.CheckBoxes("cbDepSubFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSubFI").Value = xlOff
        shOUO.CheckBoxes("cbDepSubSB").Value = xlOn
        shData.Range(subFA).Value = False
        shData.Range(subFI).Value = False
    Else
        shOUO.CheckBoxes("cbDepSubFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSubFI").Value = xlOff
        shOUO.CheckBoxes("cbDepSubSB").Value = xlOff
        shData.Range(subFA).Value = False
        shData.Range(subFI).Value = False
        shData.Range(subSB).Value = False
    End If
    
    'Sps
    If shData.Range(spsFA).Value = True Then 'Sps Flat Amount
        shOUO.CheckBoxes("cbDepSpsFA").Value = xlOn
        shOUO.CheckBoxes("cbDepSpsFI").Value = xlOff
        shData.Range(spsFI).Value = False
    ElseIf shData.Range(spsFI).Value = True Then 'Sps Flat Incremental
        shOUO.CheckBoxes("cbDepSpsFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSpsFI").Value = xlOn
        shData.Range(spsFA).Value = False
    Else
        shOUO.CheckBoxes("cbDepSpsFA").Value = xlOff
        shOUO.CheckBoxes("cbDepSpsFI").Value = xlOff
        shData.Range(spsFA).Value = False
        shData.Range(spsFI).Value = False
    End If
    
    'Chd
    If shData.Range(chdFA).Value = True Then 'Sps Flat Amount
        shOUO.CheckBoxes("cbDepChdFA").Value = xlOn
        shOUO.CheckBoxes("cbDepChdFI").Value = xlOff
        shData.Range(chdFI).Value = False
    ElseIf shData.Range(chdFI).Value = True Then 'Sps Flat Incremental
        shOUO.CheckBoxes("cbDepChdFA").Value = xlOff
        shOUO.CheckBoxes("cbDepChdFI").Value = xlOn
        shData.Range(chdFA).Value = False
    Else
        shOUO.CheckBoxes("cbDepChdFA").Value = xlOff
        shOUO.CheckBoxes("cbDepChdFI").Value = xlOff
        shData.Range(chdFA).Value = False
        shData.Range(chdFI).Value = False
    End If
End Sub

Private Sub RegularLifeProcedure(ByRef Target As Range, ByVal frameName As String, ByVal rngF As String, ByVal rngC As String, ByVal rngS As String, _
                                ByVal rngF1 As String, ByVal rngF2 As String, ByVal rngC1 As String, ByVal rngC2 As String, ByVal rngS1 As String, ByVal rngS2 As String)
    Application.ScreenUpdating = False
    Tr = Target.row
    shOUO.Shapes.Range(Array("shapeGrpLifeOptions")).Visible = msoTrue
    shOUO.Shapes.Range(Array("frameLifeOptions")).Select
    Selection.Characters.text = UCase(frameName) & " OPTIONS"
    Target.Select
    shOUO.Shapes.Range(Array("shapeGrpDep")).Visible = msoFalse
    
    If shData.Range(rngF).Value = True Then 'FLAT
        'Parent box visibility
        shOUO.CheckBoxes("cbFlat").Value = xlOn
        shOUO.CheckBoxes("cbClass").Value = xlOff
        shOUO.CheckBoxes("cbSalary").Value = xlOff
        'turning off the unselected
        shData.Range(rngC).Value = False
        shData.Range(rngS).Value = False
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoTrue
        shOUO.Shapes.Range(Array("frameFlatOptions")).Select
        Selection.Characters.text = frameName & " Flat Options"
        Target.Select
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        
        If shData.Range(rngF1).Value = True Then 'Single Class, Flat Amount
            shData.Range(rngF2).Value = False
            shOUO.CheckBoxes("cbFlatSCFA").Value = xlOn
            shOUO.CheckBoxes("cbFlatFI").Value = xlOff
        ElseIf shData.Range(rngF2).Value = True Then 'Flat Incremental
            shData.Range(rngF1).Value = False
            shOUO.CheckBoxes("cbFlatFI").Value = xlOn
            shOUO.CheckBoxes("cbFlatSCFA").Value = xlOff
        Else
            shOUO.CheckBoxes("cbFlatFI").Value = xlOff
            shOUO.CheckBoxes("cbFlatSCFA").Value = xlOff
            shData.Range(rngF1).Value = False
            shData.Range(rngF2).Value = False
        End If
        
    ElseIf shData.Range(rngC).Value = True Then 'CLASS
        'Parent box visibility
        shOUO.CheckBoxes("cbFlat").Value = xlOff
        shOUO.CheckBoxes("cbClass").Value = xlOn
        shOUO.CheckBoxes("cbSalary").Value = xlOff
        'turning off the unselected
        shData.Range(rngF).Value = False
        shData.Range(rngS).Value = False
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoTrue
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
        shOUO.Shapes.Range(Array("frameClassOptions")).Select
        Selection.Characters.text = frameName & " Class Options"
        Target.Select
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        
        If shData.Range(rngC1).Value = True Then 'Multiple Class, Flat Amount
            shData.Range(rngC2).Value = False
            shOUO.CheckBoxes("cbClassMCFA").Value = xlOn
            shOUO.CheckBoxes("cbClassMCSB").Value = xlOff
            Call ShowFlatAmountForm
            Call HideSalaryBasedForm
        ElseIf shData.Range(rngC2).Value = True Then 'Multiple Class Salary Based
            shData.Range(rngC1).Value = False
            shOUO.CheckBoxes("cbClassMCSB").Value = xlOn
            shOUO.CheckBoxes("cbClassMCFA").Value = xlOff
            Call HideFlatAmountForm
            Call ShowSalaryBasedForm
        Else
            shOUO.CheckBoxes("cbClassMCSB").Value = xlOff
            shOUO.CheckBoxes("cbClassMCFA").Value = xlOff
            shData.Range(rngC1).Value = False
            shData.Range(rngC2).Value = False
            Call HideFlatAmountForm
            Call HideSalaryBasedForm
        End If
        
    ElseIf shData.Range(rngS).Value = True Then 'SALARY
        'Parent box visibility
        shOUO.CheckBoxes("cbFlat").Value = xlOff
        shOUO.CheckBoxes("cbClass").Value = xlOff
        shOUO.CheckBoxes("cbSalary").Value = xlOn
        'turning off the unselected
        shData.Range(rngF).Value = False
        shData.Range(rngC).Value = False
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoTrue
        shOUO.Shapes.Range(Array("frameSalaryOptions")).Select
        Selection.Characters.text = frameName & " Salary Options"
        Target.Select
        
        If shData.Range(rngS1).Value = True Then 'Salary Based
            shData.Range(rngS2).Value = False
            shOUO.CheckBoxes("cbSalarySB").Value = xlOn
            shOUO.CheckBoxes("cbSalarySI").Value = xlOff
        ElseIf shData.Range(rngS2).Value = True Then 'Salary Incremental
            shData.Range(rngS1).Value = False
            shOUO.CheckBoxes("cbSalarySI").Value = xlOn
            shOUO.CheckBoxes("cbSalarySB").Value = xlOff
        Else
            shOUO.CheckBoxes("cbSalarySI").Value = xlOff
            shOUO.CheckBoxes("cbSalarySB").Value = xlOff
            shData.Range(rngS1).Value = False
            shData.Range(rngS2).Value = False
        End If
    
    Else
        'Parent box visibility
        shOUO.CheckBoxes("cbFlat").Value = xlOff
        shOUO.CheckBoxes("cbClass").Value = xlOff
        shOUO.CheckBoxes("cbSalary").Value = xlOff
        'turning off the unselected
        shData.Range(rngF).Value = False
        shData.Range(rngC).Value = False
        shData.Range(rngS).Value = False
        'turnning of subcategories
        shData.Range(rngF1).Value = False
        shData.Range(rngF2).Value = False
        shData.Range(rngC1).Value = False
        shData.Range(rngC2).Value = False
        shData.Range(rngS1).Value = False
        shData.Range(rngS2).Value = False
        'Child box visibility
        shOUO.Shapes.Range(Array("shapeGrpLifeFlatOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeClassOptions")).Visible = msoFalse
        shOUO.Shapes.Range(Array("shapeGrpLifeSalaryOptions")).Visible = msoFalse
        Call HideFlatAmountForm
        Call HideSalaryBasedForm
    End If
End Sub

Private Sub ClearFalsePositives()
    Application.ScreenUpdating = False
    If shData.Range("BV3") <> True Then shData.Range("BV6:BV7").Value = False
    If shData.Range("BV4") <> True Then shData.Range("BV8:BV9").Value = False
    If shData.Range("BV5") <> True Then shData.Range("BV10:BV11").Value = False
    If shData.Range("BV26") <> True Then shData.Range("BV29:BV30").Value = False
    If shData.Range("BV27") <> True Then shData.Range("BV31:BV32").Value = False
    If shData.Range("BV28") <> True Then shData.Range("BV33:BV34").Value = False
    If shData.Range("BV35") <> True Then shData.Range("BV38:BV39").Value = False
    If shData.Range("BV36") <> True Then shData.Range("BV40:BV41").Value = False
    If shData.Range("BV37") <> True Then shData.Range("BV42:BV43").Value = False
    If shData.Range("BV58") <> True Then shData.Range("BV61:BV62").Value = False
    If shData.Range("BV59") <> True Then shData.Range("BV63:BV64").Value = False
    If shData.Range("BV60") <> True Then shData.Range("BV65:BV66").Value = False
    If shData.Range("BV67") <> True Then shData.Range("BV70:BV71").Value = False
    If shData.Range("BV68") <> True Then shData.Range("BV72:BV73").Value = False
    If shData.Range("BV69") <> True Then shData.Range("BV74:BV75").Value = False
    If shData.Range("BV90") <> True Then shData.Range("BV93:BV94").Value = False
    If shData.Range("BV91") <> True Then shData.Range("BV95:BV96").Value = False
    If shData.Range("BV92") <> True Then shData.Range("BV97:BV98").Value = False
End Sub

Private Sub ClearIfLifeNotExist(ByVal str As String)
    Dim found As Boolean: found = False
    For i = 6 To 30
        If shOUO.Cells(i, 14).Value = str Then
            found = True
        End If
    Next i
    If Not found Then
        Application.EnableEvents = False
        Select Case str
            Case "Basic Life"
                shData.Range("BV26:BV34").Value = False
                shOUO.Range("FVBL").Value = ""
                shData.Range("CE4:CF9").ClearContents
                shData.Range("CS4:CT9").ClearContents
            Case "Basic AD&D"
                shData.Range("BV3:BV11").Value = False
                shOUO.Range("FVBA").Value = ""
                shData.Range("CG4:CH9").ClearContents
                shData.Range("CU4:CV9").ClearContents
            Case "Optional Life"
                shData.Range("BV58:BV66").Value = False
                shOUO.Range("FVOL").Value = ""
                shData.Range("CI4:CJ9").ClearContents
                shData.Range("CW4:CX9").ClearContents
            Case "Optional AD&D"
                shData.Range("BV35:BV43").Value = False
                shOUO.Range("FVOA").Value = ""
                shData.Range("CK4:CL9").ClearContents
                shData.Range("CY4:CZ9").ClearContents
            Case "Voluntary Life"
                shData.Range("BV90:BV98").Value = False
                shOUO.Range("FVVL").Value = ""
                shData.Range("CM4:CN9").ClearContents
                shData.Range("DA4:DB9").ClearContents
            Case "Voluntary AD&D"
                shData.Range("BV67:BV75").Value = False
                shOUO.Range("FVVA").Value = ""
                shData.Range("CO4:CP9").ClearContents
                shData.Range("DC4:DD9").ClearContents
            Case "Basic Dep Life"
                shData.Range("BV19:BV25").Value = False
                shOUO.Range("FVBDL").Value = ""
            Case "Basic Dep AD&D"
                shData.Range("BV12:BV18").Value = False
                shOUO.Range("FVBDA").Value = ""
            Case "Optional Dep Life"
                shData.Range("BV51:BV57").Value = False
                shOUO.Range("FVODL").Value = ""
            Case "Optional Dep AD&D"
                shData.Range("BV44:BV50").Value = False
                shOUO.Range("FVODA").Value = ""
            Case "Voluntary Dep Life"
                shData.Range("BV83:BV89").Value = False
                shOUO.Range("FVVDL").Value = ""
            Case "Voluntary Dep AD&D"
                shData.Range("BV76:BV82").Value = False
                shOUO.Range("FVVDA").Value = ""
        End Select
        Application.EnableEvents = True
    End If
End Sub


Attribute VB_Name = "shPlans"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim x, lst As Long
On Error Resume Next
For x = 1 To 140
    ActiveWorkbook.Names(Cells(2, x).Value).Delete
    Cells(3, x).Select
    If Cells(4, x).Value = vbNullString Then
        lst = 3
    Else
        lst = Selection.End(xlDown).row
    End If
    ActiveWorkbook.Names.Add Name:=(Cells(2, x).Value), RefersToR1C1:="=Plans!R3C" & x & ":R" & lst & "C" & x
Next
End Sub

Attribute VB_Name = "shSB"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.row = 5 Then
        response = MsgBox("If you change the column name it will not be able to find matching columns on 'New Enrollment & Renewals' tab and will not be able to transfer the data." & vbLf & "Do you like to continue with changing the name?", vbExclamation + vbYesNo, "Are you sure?")
        If response = vbNo Then
            Application.EnableEvents = False
            Application.Undo
            Application.EnableEvents = True
        End If
    End If
End Sub

Attribute VB_Name = "shSF"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSGCAmed"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSGCOmed"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSGNVmed"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSL"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Const startrow As Long = 7

Private Sub Worksheet_Activate()
    Application.EnableEvents = False
    If shData.Range("E2").Value Then 'MEDICAL
        ProdCol = ColumnPerName("MEDICAL PRODUCT")
        ProdColName = ColumnPerName("MEDICAL PRODUCT NAME")
        lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
        Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "DP:DQ")
    End If
    If shData.Range("E3").Value Then 'DENTAL
        ProdCol = ColumnPerName("DENTAL PRODUCT")
        ProdColName = ColumnPerName("DENTAL PRODUCT NAME")
        lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
        Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "DS:DT")
    End If
    If shData.Range("E4").Value Then 'VISION
        ProdCol = ColumnPerName("VISION PRODUCT")
        ProdColName = ColumnPerName("VISION PRODUCT NAME")
        lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
        Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "DV:DW")
    End If
    If shData.Range("E5").Value Then 'Life
        For x = 1 To 6
            Select Case x
            Case 1:
                ProdCol = ColumnPerName("BASIC LIFE")
                Call PRODFIXLIFE(ProdCol)
            Case 2:
                ProdCol = ColumnPerName("OPTIONAL LIFE")
                Call PRODFIXLIFE(ProdCol)
            Case 3:
                ProdCol = ColumnPerName("VOLUNTARY LIFE")
                Call PRODFIXLIFE(ProdCol)
            Case 4:
                ProdCol = ColumnPerName("BASIC DEP LIFE")
                Call PRODFIXLIFE(ProdCol)
            Case 5:
                ProdCol = ColumnPerName("OPTIONAL DEP LIFE")
                Call PRODFIXLIFE(ProdCol)
            Case 6:
                ProdCol = ColumnPerName("VOLUNTARY DEP LIFE")
                Call PRODFIXLIFE(ProdCol)
            End Select
        Next x
        For A = 1 To 6
            Select Case A
            Case 1:
                ProdCol = ColumnPerName("BASIC AD&D")
                Call PRODFIXADD(ProdCol)
            Case 2:
                ProdCol = ColumnPerName("OPTIONAL AD&D")
                Call PRODFIXADD(ProdCol)
            Case 3:
                ProdCol = ColumnPerName("VOLUNTARY AD&D")
                Call PRODFIXADD(ProdCol)
            Case 4:
                ProdCol = ColumnPerName("BASIC DEP AD&D")
                Call PRODFIXADD(ProdCol)
            Case 5:
                ProdCol = ColumnPerName("OPTIONAL DEP AD&D")
                Call PRODFIXADD(ProdCol)
            Case 6:
                ProdCol = ColumnPerName("VOLUNTARY DEP AD&D")
                Call PRODFIXADD(ProdCol)
            End Select
        Next A
    End If
    If shData.Range("E6").Value Then 'Disability
        For D = 1 To 5
            Select Case D
            Case 1:
                ProdCol = ColumnPerName("STD")
                Call PRODFIXDIS(ProdCol)
            Case 2:
                ProdCol = ColumnPerName("LTD")
                Call PRODFIXDIS(ProdCol)
            Case 3:
                ProdCol = ColumnPerName("VOLUNTARY STD")
                Call PRODFIXDIS(ProdCol)
            Case 4:
                ProdCol = ColumnPerName("VOLUNTARY LTD")
                Call PRODFIXDIS(ProdCol)
            Case 5:
                ProdCol = ColumnPerName("BUY-UP LTD")
                Call PRODFIXDIS(ProdCol)
            End Select
        Next D
    End If
    If shData.Range("E7").Value Then 'FSA
        For F = 1 To 5
            Select Case F
            Case 1:
                ProdCol = ColumnPerName("FULL HEALTHCARE")
                Call PRODFIXFSA(ProdCol)
            Case 2:
                ProdCol = ColumnPerName("LIMITED PURPOSE")
                Call PRODFIXFSA(ProdCol)
            Case 3:
                ProdCol = ColumnPerName("DEPENDENT CARE")
                Call PRODFIXFSA(ProdCol)
            Case 4:
                ProdCol = ColumnPerName("COMMUTER TRANSIT")
                Call PRODFIXFSA(ProdCol)
            Case 5:
                ProdCol = ColumnPerName("COMMUTER PARKING")
                Call PRODFIXFSA(ProdCol)
            End Select
        Next F
    End If
    If shData.Range("E8").Value Then 'Supplemental
        For F = 1 To 6
            Select Case F
            Case 1:
                ProdCol = ColumnPerName("Critical Illness Voluntary")
                Call PRODFIXSupplemental(ProdCol)
            Case 2:
                ProdCol = ColumnPerName("Critical Illness Employer paid")
                Call PRODFIXSupplemental(ProdCol)
            Case 3:
                ProdCol = ColumnPerName("Accident Voluntary")
                Call PRODFIXSupplemental(ProdCol)
            Case 4:
                ProdCol = ColumnPerName("Accident Employer paid")
                Call PRODFIXSupplemental(ProdCol)
            Case 5:
                ProdCol = ColumnPerName("Hospital Indemnity Voluntary")
                Call PRODFIXSupplemental(ProdCol)
            Case 6:
                ProdCol = ColumnPerName("Hospital Indemnity Employer paid")
                Call PRODFIXSupplemental(ProdCol)
            End Select
        Next F
    End If
    FormatDepartment
    shSL.Unprotect
    shSL.Range(shSL.Cells(startrow, "B"), shSL.Cells(5000, AreaLastColumn)).Locked = False
   Application.EnableEvents = True
End Sub
Private Sub PRODFIXFSA(ProdCol)
    If Not shSL.Columns(ProdCol).Hidden Then
            ProdColName = ProdCol
            lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
            Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "NH:NI")
        End If
End Sub
Private Sub PRODFIXSupplemental(ProdCol)
    If Not shSL.Columns(ProdCol).Hidden Then
            ProdColName = ProdCol
            lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
            Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "NQ:NR")
        End If
End Sub
Private Sub PRODFIXLIFE(ProdCol)
    If Not shSL.Columns(ProdCol).Hidden Then
            ProdColName = ProdCol
            lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
            Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "EB:EC")
        End If
End Sub
Private Sub PRODFIXADD(ProdCol)
    If Not shSL.Columns(ProdCol).Hidden Then
            ProdColName = ProdCol
            lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
            Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "EE:EF")
        End If
End Sub
Private Sub PRODFIXDIS(ProdCol)
    If Not shSL.Columns(ProdCol).Hidden Then
            ProdColName = ProdCol
            lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
            Call ProductNameFix(startrow, lastusedrow, ProdCol, ProdColName, "DY:DZ")
        End If
End Sub
Sub FormatDepartment()
    shSL.Unprotect
    ProdCol = ColumnPerName("DEPARTMENT NUMBER")
    lastusedrow = shSL.Cells(Rows.Count, ProdCol).End(xlUp).row
    shSL.Range(shSL.Cells(startrow, ProdCol), shSL.Cells(lastusedrow, ProdCol)).NumberFormat = "@"
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    'Call OnKeyDownDefault 'Defaults behavior
    On Error Resume Next
    Application.ScreenUpdating = False
    shSL.Unprotect
    shSL.Range(shSL.Cells(startrow, "B"), shSL.Cells(AreaLastRow, AreaLastColumn)).Locked = False
    shSL.Unprotect
    shSL.Range(shSL.Cells(1, "B"), shSL.Cells(startrow - 1, AreaLastColumn)).Locked = True
    
    tv = Target.Value
    Tr = Target.row
    tc = Target.Column
    
    'Fill casenumber
    If tc = ColumnPerName("EMPLOYEES SOCIAL") Then
        Application.EnableEvents = False
        If Trim(tv) <> "" Then
            Call PopulateCaseNumbersPerRecord(Tr, Tr)
            If shSL.Cells(Tr, ColumnPerName("EMPLOYEES SOCIAL")).Value <> "" And Trim(shSL.Cells(Tr, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value) = "" And shOUO.Range("EffDt").Value <> "" Then
                shSL.Cells(Tr, ColumnPerName("EFFECTIVE DATE FOR COVERAGE")).Value = shOUO.Range("EffDt").Value
            End If
        Else
            shSL.Cells(Tr, tc).Value = ""
        End If
        Application.EnableEvents = True
    End If
    'DropDown correction
    'Medical Product
    If tc = ColumnPerName("MEDICAL PRODUCT") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Offset(0, 1).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("DP:DQ"), 2, False)
        Application.EnableEvents = True
    End If
    'Dental Product
    If tc = ColumnPerName("DENTAL PRODUCT") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Offset(0, 1).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("DS:DT"), 2, False)
        Application.EnableEvents = True
    End If
    'Vision Product
    If tc = ColumnPerName("VISION PRODUCT") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Offset(0, 1).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("DV:DW"), 2, False)
        Application.EnableEvents = True
    End If
    'FSA Product
    If tc = ColumnPerName("FULL HEALTHCARE") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NH:NI"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("LIMITED PURPOSE") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NH:NI"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("DEPENDENT CARE") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NH:NI"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("COMMUTER TRANSIT") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NH:NI"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("COMMUTER PARKING") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NH:NI"), 2, False)
        Application.EnableEvents = True
    End If
    'Supplemental Product
    If tc = ColumnPerName("Critical Illness Voluntary") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("Critical Illness Employer paid") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("Accident Voluntary") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("Accident Employer paid") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("Hospital Indemnity Voluntary") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    If tc = ColumnPerName("Hospital Indemnity Employer paid") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = shSL.Cells(Tr, tc).Value
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("NQ:NR"), 2, False)
        Application.EnableEvents = True
    End If
    'Diasbility
    If tc = ColumnPerName("STD") Or tc = ColumnPerName("LTD") Or tc = ColumnPerName("VOLUNTARY STD") Or tc = ColumnPerName("VOLUNTARY LTD") Or tc = ColumnPerName("BUY-UP LTD") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("DY:DZ"), 2, False)
        Application.EnableEvents = True
    End If
    'Life
    If tc = ColumnPerName("BASIC LIFE") Or tc = ColumnPerName("OPTIONAL LIFE") Or tc = ColumnPerName("VOLUNTARY LIFE") Or tc = ColumnPerName("BASIC DEP LIFE") Or tc = ColumnPerName("OPTIONAL DEP LIFE") Or tc = ColumnPerName("VOLUNTARY DEP LIFE") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("EB:EC"), 2, False)
        Application.EnableEvents = True
    End If
    'AD&D
    If tc = ColumnPerName("BASIC AD&D") Or tc = ColumnPerName("OPTIONAL AD&D") Or tc = ColumnPerName("VOLUNTARY AD&D") Or tc = ColumnPerName("BASIC DEP AD&D") Or tc = ColumnPerName("OPTIONAL DEP AD&D") Or tc = ColumnPerName("VOLUNTARY DEP AD&D") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("EE:EF"), 2, False)
        Application.EnableEvents = True
    End If
    'Cobra Qualifying Event
    If tc = ColumnPerName("COBRA QUALIFYING EVENT") Then
        Application.EnableEvents = False
        shSL.Cells(Tr, tc).Value = WorksheetFunction.Index(shData.Range("DG:DG"), WorksheetFunction.Match(tv, shData.Range("DH:DH"), 0))
        Application.EnableEvents = True
    End If
    'Relationship Code
    If tc = ColumnPerName("RELATIONSHIP CODE") Then
        If Target.Cells.Count = 1 Then
            Application.EnableEvents = False
            Select Case tv
                Case "Subscriber", "SUB", "Employee"
                    Target.Value = "SUB"
                Case "Spouse", "SPS"
                    Target.Value = "SPS"
                Case "Child", "CHD"
                    Target.Value = "CHD"
                Case "Handicapped", "HCH"
                    Target.Value = "HCH"
                Case "Student", "STU"
                    Target.Value = "STU"
                Case "Domestic Partner", "DOM"
                    Target.Value = "DOM"
            End Select
            Application.EnableEvents = True
        End If
    End If
    
    'Languages ("English, Spanish, Chinese, Korean, Vietnamese, Tagalog, Other")
    If tc = ColumnPerName("LANGUAGE") Then
        If Target.Cells.Count = 1 Then
            Application.EnableEvents = False
            Select Case tv
                Case "English", "ENG", "E"
                    Target.Value = "ENG"
                Case "Spanish", "SPA", "S"
                    Target.Value = "SPA"
                Case "Chinese", "Mandarin", "ZHO", "ZHOX", "C/M", "CHI", "CHN", "C", "M"
                    Target.Value = "ZHO"
                Case "Korean", "Korea", "KOR", "K"
                    Target.Value = "KOR"
                Case "Vietnamese", "Vietnam", "VIET", "VIE", "V"
                    Target.Value = "VIE"
                Case "Tagalog", "Philipines", "Philipine", "Tag", "TGL", "T"
                    Target.Value = "TGL"
                Case "Other", "W09", "O"
                    Target.Value = "W09"
            End Select
            Application.EnableEvents = True
        End If
    End If
    
    'Group Type
    If tc = ColumnPerName("GROUP TYPE") Then
        If Target.Cells.Count = 1 Then
            Application.EnableEvents = False
            Select Case tv
                Case "Active", "A"
                    Target.Value = "A"
                Case "Cobra", "C"
                    Target.Value = "C"
                Case "Retiree", "R"
                    Target.Value = "R"
            End Select
            Application.EnableEvents = True
        End If
    End If
    
    'Multipliers
    Application.EnableEvents = False
    Select Case tc
        Case ColumnPerName("BASIC MULTIPLIER")
            Call CorrectMultipliers(Target, "CS", "CT")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("AD&D BASIC MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("BASIC MULTIPLIER")).Value
            End If
        Case ColumnPerName("AD&D BASIC MULTIPLIER")
            Call CorrectMultipliers(Target, "CU", "CV")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("BASIC MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("AD&D BASIC MULTIPLIER")).Value
            End If
        Case ColumnPerName("OPTIONAL MULTIPLIER")
            Call CorrectMultipliers(Target, "CW", "CX")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("OPTIONAL MULTIPLIER")).Value
            End If
        Case ColumnPerName("AD&D OPTIONAL MULTIPLIER")
            Call CorrectMultipliers(Target, "CY", "CZ")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("OPTIONAL MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL MULTIPLIER")).Value
            End If
        Case ColumnPerName("VOLUNTARY MULTIPLIER")
            Call CorrectMultipliers(Target, "DA", "DB")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("VOLUNTARY MULTIPLIER")).Value
            End If
        Case ColumnPerName("AD&D VOLUNTARY MULTIPLIER")
            Call CorrectMultipliers(Target, "DC", "DD")
            If IsBundle(Target.Offset(0, -2).Value) Then
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY MULTIPLIER")).Value = shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY MULTIPLIER")).Value
            End If
    End Select
    Application.EnableEvents = True
    
    'Life product selection options
    If tc = ColumnPerName("BASIC LIFE") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "BASIC LIFE", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value = shData.Range("BZ3").Value
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("BASIC AD&D")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value = shData.Range("BZ5").Value
                End If
                Application.EnableEvents = True
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("BASIC AD&D")).Value = OtherBundle
                End If
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("BASIC AD&D")).Value = ""
                shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    ElseIf tc = ColumnPerName("OPTIONAL LIFE") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "OPTIONAL LIFE", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value = shData.Range("CA3").Value
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL AD&D")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value = shData.Range("CA5").Value
                End If
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL AD&D")).Value = OtherBundle
                End If
                Application.EnableEvents = True
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("OPTIONAL AD&D")).Value = ""
                shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    ElseIf tc = ColumnPerName("VOLUNTARY LIFE") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "VOLUNTARY LIFE", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value = shData.Range("CB3").Value
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY AD&D")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value = shData.Range("CB5").Value
                End If
                Application.EnableEvents = True
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = LifeBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY AD&D")).Value = OtherBundle
                End If
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY AD&D")).Value = ""
                shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    ElseIf tc = ColumnPerName("BASIC AD&D") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "BASIC AD&D", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value = shData.Range("BZ5").Value
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("BASIC LIFE")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value = shData.Range("BZ3").Value
                End If
                Application.EnableEvents = True
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("BASIC LIFE")).Value = OtherBundle
                End If
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("BASIC LIFE")).Value = ""
                shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    ElseIf tc = ColumnPerName("OPTIONAL AD&D") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "OPTIONAL AD&D", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value = shData.Range("CA5").Value
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL LIFE")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value = shData.Range("CA3").Value
                End If
                Application.EnableEvents = True
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL LIFE")).Value = OtherBundle
                End If
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("OPTIONAL LIFE")).Value = ""
                shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    ElseIf tc = ColumnPerName("VOLUNTARY AD&D") Then
        If tv <> "" Then
            If WorksheetFunction.CountIfs(shData.Range("BS:BS"), "VOLUNTARY AD&D", shData.Range("BU:BU"), "Single Class, Flat Amount", shData.Range("BV:BV"), True) > 0 Then
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value = shData.Range("CB5").Value
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY LIFE")).Value = OtherBundle
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value = shData.Range("CB3").Value
                End If
                Application.EnableEvents = True
            Else
                Application.EnableEvents = False
                If IsBundle(tv) Then
                    OtherBundle = ADDBundle(tv)
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY LIFE")).Value = OtherBundle
                End If
                Application.EnableEvents = True
            End If
        Else
            Application.EnableEvents = False
            shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value = ""
            If IsBundle(tv) Then
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY LIFE")).Value = ""
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value = ""
            End If
            Application.EnableEvents = True
        End If
    End If
    
    'Volumes
    Application.EnableEvents = False
    Select Case tc
        Case ColumnPerName("BASIC VOLUME")
            Call PopulateVolume(Target, "CE:CF")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")), "CG:CH")
                shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value
            End If
        Case ColumnPerName("AD&D BASIC VOLUME")
            Call PopulateVolume(Target, "CG:CH")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")), "CE:CF")
                shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Value
            End If
        Case ColumnPerName("OPTIONAL VOLUME")
            Call PopulateVolume(Target, "CI:CJ")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")), "CK:CL")
                shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value
            End If
        Case ColumnPerName("AD&D OPTIONAL VOLUME")
            Call PopulateVolume(Target, "CK:CL")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")), "CI:CJ")
                shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Value
            End If
        Case ColumnPerName("VOLUNTARY VOLUME")
            Call PopulateVolume(Target, "CM:CN")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")), "CO:CP")
                shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value
            End If
        Case ColumnPerName("AD&D VOLUNTARY VOLUME")
            Call PopulateVolume(Target, "CO:CP")
            If IsBundle(Target.Offset(0, -1).Value) Then
                Call PopulateVolume(shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")), "CM:CN")
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Value = shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Value
            End If
    End Select
    Application.EnableEvents = True
    
    'Dependent Volumes
    Application.EnableEvents = False
    Select Case tc
        Case ColumnPerName("BASIC DEP LIFE")
            Call PopulateSubSpsChd(Target, 7, "BASIC")
            If IsBundle(tv) Then
                OtherBundle = LifeBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("BASIC DEP AD&D")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("BASIC DEP AD&D")), 9, "AD&D BASIC")
            End If
        Case ColumnPerName("OPTIONAL DEP LIFE")
            Call PopulateSubSpsChd(Target, 11, "OPTIONAL")
            If IsBundle(tv) Then
                OtherBundle = LifeBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP AD&D")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP AD&D")), 13, "AD&D OPTIONAL")
            End If
        Case ColumnPerName("VOLUNTARY DEP LIFE")
            Call PopulateSubSpsChd(Target, 15, "VOLUNTARY")
            If IsBundle(tv) Then
                OtherBundle = LifeBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP AD&D")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP AD&D")), 17, "AD&D VOLUNTARY")
            End If
        Case ColumnPerName("BASIC DEP AD&D")
            Call PopulateSubSpsChd(Target, 9, "AD&D BASIC")
            If IsBundle(tv) Then
                OtherBundle = ADDBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("BASIC DEP LIFE")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("BASIC DEP LIFE")), 7, "BASIC")
            End If
        Case ColumnPerName("OPTIONAL DEP AD&D")
            Call PopulateSubSpsChd(Target, 13, "AD&D OPTIONAL")
            If IsBundle(tv) Then
                OtherBundle = ADDBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP LIFE")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP LIFE")), 11, "OPTIONAL")
            End If
        Case ColumnPerName("VOLUNTARY DEP AD&D")
            Call PopulateSubSpsChd(Target, 17, "AD&D VOLUNTARY")
            If IsBundle(tv) Then
                OtherBundle = ADDBundle(tv)
                Application.EnableEvents = False
                shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP LIFE")).Value = OtherBundle
                Call PopulateSubSpsChd(shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP LIFE")), 15, "VOLUNTARY")
            End If
    End Select
    Application.EnableEvents = True
    
    'Validation on the fly
    If Tr >= startrow Then
        Application.EnableEvents = False
        Select Case tc
            Case ColumnPerName("EMPLOYEES SOCIAL")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectEmpSSNPerProduct(Tr, Tr)
                Call ValidateEmpSSNPerRecord(Tr, Tr)
                If shSL.Cells(Tr, ColumnPerName("RELATIONSHIP CODE")).Value = "SUB" Then
                    shSL.Cells(Tr, ColumnPerName("MEMBER SSN")).Value = shSL.Cells(Tr, tc).Value
                    Call ValidateMemSSNPerRecord(Tr, Tr)
                End If
            Case ColumnPerName("HCID")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectHCIDPerRecord(Tr, Tr)
                Call ValidateHCIDPerRecord(Tr, Tr)
            Case ColumnPerName("LAST NAME")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectNamePerRecord("LAST NAME", Tr, Tr)
                Call ValidateNamePerRecord("LAST NAME", Tr, Tr)
            Case ColumnPerName("FIRST NAME")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectNamePerRecord("FIRST NAME", Tr, Tr)
                Call ValidateNamePerRecord("FIRST NAME", Tr, Tr)
            Case ColumnPerName("MIDDLE INITIAL")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectMIPerRecord(Tr, Tr)
                Call ValidateMIPerRecord(Tr, Tr)
            Case ColumnPerName("GENDER")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectGenderPerRecord(Tr, Tr)
                Call ValidateGenderPerRecord(Tr, Tr)
            Case ColumnPerName("RELATIONSHIP CODE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectRelCodePerRecord(Tr, Tr)
                shSL.Cells(Tr, ColumnPerName("DATE OF HIRE")).Interior.Pattern = xlNone
                Call ValidateDOHPerRecord(Tr, Tr)
                If shSL.Cells(Tr, tc).Value = "SUB" And Trim(shSL.Cells(Tr, ColumnPerName("EMPLOYEES SOCIAL")).Value) <> "" Then
                    shSL.Cells(Tr, ColumnPerName("MEMBER SSN")).Value = shSL.Cells(Tr, ColumnPerName("EMPLOYEES SOCIAL")).Value
 '                   Call ValidateMemSSNPerRecord(tr, tr)
                End If
                Call ValidateEmpSSNPerRecord(Tr, Tr)
                Call ValidateRelCodePerRecord(Tr, Tr)
                Call ValidateMemSSNPerRecord(Tr, Tr)
            Case ColumnPerName("DOB")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDOBPerRecord(Tr, Tr)
            Case ColumnPerName("EMAIL")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateEmailPerRecord(Tr, Tr)
            Case ColumnPerName("MEMBER SSN")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectMemSSNPerRecord(Tr, Tr)
                Call ValidateMemSSNPerRecord(Tr, Tr)
                Call ValidateEmpSSNPerRecord(Tr, Tr)
            Case ColumnPerName("GROUP TYPE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectGroupTypePerRecord(Tr, Tr)
                Call ValidateGroupTypePerRecord(Tr, Tr)
                Call ValidateCobraPerRecord(Tr, Tr)
            Case ColumnPerName("PHONE NUMBER")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectPhonePerRecord(Tr, Tr)
                Call ValidatePhonePerRecord(Tr, Tr)
            Case ColumnPerName("ADDRESS")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectAddressPerRecord("ADDRESS", Tr, Tr)
                Call ValidateAddressPerRecord(Tr, Tr)
            Case ColumnPerName("CITY")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectCityPerRecord(Tr, Tr)
                Call ValidateCityPerRecord(Tr, Tr)
            Case ColumnPerName("STATE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectStatePerRecord(Tr, Tr)
                Call ValidateStatePerRecord(Tr, Tr)
            Case ColumnPerName("ZIP CODE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateZipPerRecord(Tr, Tr)
            Case ColumnPerName("SECOND ADDRESS FIELD")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectAddressPerRecord("SECOND ADDRESS FIELD", Tr, Tr)
            Case ColumnPerName("LANGUAGE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectLanguagePerRecord(Tr, Tr)
                Call ValidateLanguagePerRecord(Tr, Tr)
            Case ColumnPerName("COB")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectCOBPerRecord(Tr, Tr)
                Call ValidateCOBPerRecord(Tr, Tr)
            Case ColumnPerName("DATE OF HIRE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDOHPerRecord(Tr, Tr)
            Case ColumnPerName("DEPARTMENT NUMBER")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectDepNoPerRecord(Tr, Tr)
                Call ValidateDepNoPerRecord(Tr, Tr)
            Case ColumnPerName("EMPLOYEE NUMBER")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectEmpNoPerRecord(Tr, Tr)
                Call ValidateEmpNoPerRecord(Tr, Tr)
            Case ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateEffDatePerRecord(Tr, Tr)
            Case ColumnPerName("MEDICAL PRODUCT")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateMedicalProductPerRecord(Tr, Tr)
            Case ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidatePCPPerRecord(Tr, Tr)
            Case ColumnPerName("CURRENT PCP")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectCurrentPCPPerRecord(Tr, Tr)
                Call ValidateCurrentPCPPerRecord(Tr, Tr)
            Case ColumnPerName("DENTAL PRODUCT")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDentalProductPerRecord(Tr, Tr)
            Case ColumnPerName("DENTAL OFFICE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDentalOfficePerRecord(Tr, Tr)
            Case ColumnPerName("VISION PRODUCT")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateVisionProductPerRecord(Tr, Tr)
            Case ColumnPerName("FSA PRODUCT")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                'Call ValidateFSAProductPerRecord(tr, tr)
            Case ColumnPerName("STD"), ColumnPerName("LTD"), ColumnPerName("VOLUNTARY STD"), ColumnPerName("VOLUNTARY LTD"), ColumnPerName("BUY-UP LTD"), ColumnPerName("JOB TITLE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDisabilityProductsPerRecord(Tr, Tr)
                Call ValidateDisabilityJobTitlePerRecord(Tr, Tr)
            Case ColumnPerName("SALARY")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDisabilitySalaryPerRecord(Tr, Tr)
            Case ColumnPerName("COBRA START DATE"), ColumnPerName("COBRA QUALIFYING EVENT")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateCobraPerRecord(Tr, Tr)
                Call ValidateCobraStartDatePerRecord(Tr, Tr)
                Call CorrectQualifyingEventPerRecord(Tr, Tr)
                Call ValidateQualifyingEventPerRecord(Tr, Tr)
            Case ColumnPerName("MEDICARE HIB ID"), ColumnPerName("MEDICARE PART A EFF DATE")
                shSL.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateMedicarePerRecord(Tr, Tr)
            Case ColumnPerName("FTS (PRIME/COMPLETE)"), ColumnPerName("SUB GROUP (PRIME/COMPLETE)"), ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
                shSL.Cells(Tr, ColumnPerName("FTS (PRIME/COMPLETE)")).Interior.Pattern = xlNone
                shSL.Cells(Tr, ColumnPerName("SUB GROUP (PRIME/COMPLETE)")).Interior.Pattern = xlNone
                shSL.Cells(Tr, ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")).Interior.Pattern = xlNone
                Call ValidatePrimeCompletePerRecord(Tr, Tr)
        End Select
    End If
    If shData.Range("level3").Value <> True Then
        If Tr >= startrow Then
            Application.EnableEvents = False
            Select Case tc
                Case ColumnPerName("BASIC LIFE"), ColumnPerName("BASIC VOLUME"), ColumnPerName("BASIC MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("BASIC LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("BASIC VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("BASIC MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("BASIC LIFE", "EN", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("BASIC VOLUME", "BASIC LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("BASIC MULTIPLIER", "BASIC LIFE", Tr, Tr)
                Case ColumnPerName("OPTIONAL LIFE"), ColumnPerName("OPTIONAL VOLUME"), ColumnPerName("OPTIONAL MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("OPTIONAL LIFE", "EO", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("OPTIONAL VOLUME", "OPTIONAL LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("OPTIONAL MULTIPLIER", "OPTIONAL LIFE", Tr, Tr)
                Case ColumnPerName("VOLUNTARY LIFE"), ColumnPerName("VOLUNTARY VOLUME"), ColumnPerName("VOLUNTARY MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("VOLUNTARY LIFE", "EP", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("VOLUNTARY VOLUME", "VOLUNTARY LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("VOLUNTARY MULTIPLIER", "VOLUNTARY LIFE", Tr, Tr)
                Case ColumnPerName("BASIC DEP LIFE"), ColumnPerName("BASIC SUB VOLUME"), ColumnPerName("BASIC SPOUSE VOLUME"), ColumnPerName("BASIC CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("BASIC DEP LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("BASIC SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("BASIC SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("BASIC CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("BASIC DEP LIFE", "EQ", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("BASIC SUB VOLUME", "BASIC DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("BASIC SPOUSE VOLUME", "BASIC DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("BASIC CHILD(REN) VOLUME", "BASIC DEP LIFE", Tr, Tr)
                    'Call CorrectDepLifePerRecord("BASIC", Tr, Tr)
                Case ColumnPerName("OPTIONAL DEP LIFE"), ColumnPerName("OPTIONAL SUB VOLUME"), ColumnPerName("OPTIONAL SPOUSE VOLUME"), ColumnPerName("OPTIONAL CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("OPTIONAL DEP LIFE", "ER", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("OPTIONAL SUB VOLUME", "OPTIONAL DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("OPTIONAL SPOUSE VOLUME", "OPTIONAL DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("OPTIONAL CHILD(REN) VOLUME", "OPTIONAL DEP LIFE", Tr, Tr)
                    'Call CorrectDepLifePerRecord("OPTIONAL", Tr, Tr)
                Case ColumnPerName("VOLUNTARY DEP LIFE"), ColumnPerName("VOLUNTARY SUB VOLUME"), ColumnPerName("VOLUNTARY SPOUSE VOLUME"), ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP LIFE")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("VOLUNTARY DEP LIFE", "ES", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("VOLUNTARY SUB VOLUME", "VOLUNTARY DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("VOLUNTARY SPOUSE VOLUME", "VOLUNTARY DEP LIFE", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("VOLUNTARY CHILD(REN) VOLUME", "VOLUNTARY DEP LIFE", Tr, Tr)
                    'Call CorrectDepLifePerRecord("VOLUNTARY", Tr, Tr)
                Case ColumnPerName("BASIC AD&D"), ColumnPerName("AD&D BASIC VOLUME"), ColumnPerName("AD&D BASIC MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("BASIC AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("BASIC AD&D", "EU", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D BASIC VOLUME", "BASIC AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D BASIC MULTIPLIER", "BASIC AD&D", Tr, Tr)
                Case ColumnPerName("OPTIONAL AD&D"), ColumnPerName("AD&D OPTIONAL VOLUME"), ColumnPerName("AD&D OPTIONAL MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("OPTIONAL AD&D", "EV", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D OPTIONAL VOLUME", "OPTIONAL AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D OPTIONAL MULTIPLIER", "OPTIONAL AD&D", Tr, Tr)
                Case ColumnPerName("VOLUNTARY AD&D"), ColumnPerName("AD&D VOLUNTARY VOLUME"), ColumnPerName("AD&D VOLUNTARY MULTIPLIER")
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY MULTIPLIER")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("VOLUNTARY AD&D", "EW", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D VOLUNTARY VOLUME", "VOLUNTARY AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D VOLUNTARY MULTIPLIER", "VOLUNTARY AD&D", Tr, Tr)
                Case ColumnPerName("BASIC DEP AD&D"), ColumnPerName("AD&D BASIC SUB VOLUME"), ColumnPerName("AD&D BASIC SPOUSE VOLUME"), ColumnPerName("AD&D BASIC CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("BASIC DEP AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D BASIC CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("BASIC DEP AD&D", "EX", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D BASIC SUB VOLUME", "BASIC DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D BASIC SPOUSE VOLUME", "BASIC DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D BASIC CHILD(REN) VOLUME", "BASIC DEP AD&D", Tr, Tr)
                    'Call CorrectDepLifePerRecord("AD&D BASIC", Tr, Tr)
                Case ColumnPerName("OPTIONAL DEP AD&D"), ColumnPerName("AD&D OPTIONAL SUB VOLUME"), ColumnPerName("AD&D OPTIONAL SPOUSE VOLUME"), ColumnPerName("AD&D OPTIONAL CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("OPTIONAL DEP AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D OPTIONAL CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("OPTIONAL DEP AD&D", "EY", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D OPTIONAL SUB VOLUME", "OPTIONAL DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D OPTIONAL SPOUSE VOLUME", "OPTIONAL DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D OPTIONAL CHILD(REN) VOLUME", "OPTIONAL DEP AD&D", Tr, Tr)
                    'Call CorrectDepLifePerRecord("AD&D OPTIONAL", Tr, Tr)
                Case ColumnPerName("VOLUNTARY DEP AD&D"), ColumnPerName("AD&D VOLUNTARY SUB VOLUME"), ColumnPerName("AD&D VOLUNTARY SPOUSE VOLUME"), ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")
                    shSL.Cells(Tr, ColumnPerName("VOLUNTARY DEP AD&D")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY SUB VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY SPOUSE VOLUME")).Interior.Pattern = xlNone
                    shSL.Cells(Tr, ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")).Interior.Pattern = xlNone
                    Call ValidateLifePerRecord("VOLUNTARY DEP AD&D", "EZ", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D VOLUNTARY SUB VOLUME", "VOLUNTARY DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D VOLUNTARY SPOUSE VOLUME", "VOLUNTARY DEP AD&D", Tr, Tr)
                    Call ValidateVolumeAndMultiplierPerRecord("AD&D VOLUNTARY CHILD(REN) VOLUME", "VOLUNTARY DEP AD&D", Tr, Tr)
                    'Call CorrectDepLifePerRecord("AD&D VOLUNTARY", Tr, Tr)
            End Select
        End If
    End If
    shSL.Protect AllowFormattingColumns:=True
    Application.EnableEvents = True
End Sub

Sub PopulateSubSpsChd(ByVal trg As Range, ByVal r As Long, ByVal str As String)
    Application.ScreenUpdating = False
    If trg.Value <> "" Then
        If shData.Range("BZ" & r).Value <> 0 Then
            Application.EnableEvents = False
            shSL.Cells(trg.row, ColumnPerName(str & " SUB VOLUME")).Value = shData.Range("BZ" & r).Value
            'Application.EnableEvents = True
        End If
        If shData.Range("CA" & r).Value <> 0 Then
            Application.EnableEvents = False
            shSL.Cells(trg.row, ColumnPerName(str & " SPOUSE VOLUME")).Value = shData.Range("CA" & r).Value
            'Application.EnableEvents = True
        End If
        If shData.Range("CB" & r).Value <> 0 Then
            Application.EnableEvents = False
            shSL.Cells(trg.row, ColumnPerName(str & " CHILD(REN) VOLUME")).Value = shData.Range("CB" & r).Value
            'Application.EnableEvents = True
        End If
    Else
        Application.EnableEvents = False
        shSL.Cells(trg.row, ColumnPerName(str & " SUB VOLUME")).Value = ""
        shSL.Cells(trg.row, ColumnPerName(str & " SPOUSE VOLUME")).Value = ""
        shSL.Cells(trg.row, ColumnPerName(str & " CHILD(REN) VOLUME")).Value = ""
        'Application.EnableEvents = True
    End If
End Sub

Sub PopulateVolume(ByVal trg As Range, ByVal str As String)
    If trg.Value <> "" Then
        Application.EnableEvents = False
        shSL.Cells(trg.row, trg.Column).Value = WorksheetFunction.VLookup(trg.Value, shData.Range(str), 2, False)
        Application.EnableEvents = True
    Else
        Application.EnableEvents = False
        shSL.Cells(trg.row, trg.Column).Value = ""
        Application.EnableEvents = True
    End If
End Sub

Sub CorrectMultipliers(ByVal trg As Range, ByVal colVal As String, ByVal colLookup As String)
    If shData.Range(colLookup & Rows.Count).End(xlUp).row > 3 Then
        shSL.Cells(trg.row, trg.Column).Value = WorksheetFunction.Index(shData.Range(colVal & ":" & colVal), WorksheetFunction.Match(trg.Value, shData.Range(colLookup & ":" & colLookup), 0))
    End If
End Sub

Function IsBundle(ByVal tv As String) As Boolean
    bndl = False
    If Not tv = "" Then
        If WorksheetFunction.CountIf(shData.Range("FH:FI"), tv) + WorksheetFunction.CountIf(shData.Range("FJ:FK"), tv) > 0 Then
            bndl = True
        End If
    End If
    IsBundle = bndl
End Function

Function LifeBundle(ByVal tv As Variant) As String
    LifeBundle = WorksheetFunction.VLookup(tv, shData.Range("FH:FK"), 4, False)
End Function
Function ADDBundle(ByVal tv As Variant) As String
    ADDBundle = WorksheetFunction.Index(shData.Range("FI:FI"), WorksheetFunction.Match(tv, shData.Range("FK:FK"), 0))
End Function

Attribute VB_Name = "shSfx"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shTerm"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Const startrow As Long = 7
Private Sub Worksheet_Change(ByVal Target As Range)
    'Call OnKeyDownDefault 'Defaults behavior
    
    Application.ScreenUpdating = False
    shTerm.Unprotect
    shTerm.Range(shTerm.Cells(startrow, "B"), shTerm.Cells(AreaLastRow, AreaLastColumn)).Locked = False
    shTerm.Range(shTerm.Cells(1, "B"), shTerm.Cells(startrow - 1, AreaLastColumn)).Locked = True
    On Error Resume Next
    tv = Target.Value
    Tr = Target.row
    tc = Target.Column
    
    'Fill casenumber
    If tc = ColumnPerName4Term("EMPLOYEES SOCIAL") Then
        Application.EnableEvents = False
        If Trim(tv) <> "" Then
            Call PopulateCaseNumbers4TermPerRecord(Tr, Tr)
            If shData.Range("grp").Value = "Small" Then 'If SG, populate Eff Date automatically
                shTerm.Cells(Tr, ColumnPerName4Term("EFFECTIVE DATE FOR COVERAGE")).Value = shOUO.Range("B4").Value
            End If
        Else
            shTerm.Cells(Tr, tc).Value = ""
        End If
        Application.EnableEvents = True
    End If
    
    'DropDown correction
    'Relationship Code
    If tc = ColumnPerName4Term("RELATIONSHIP CODE") Then
        If Target.Cells.Count = 1 Then
            Application.EnableEvents = False
            Select Case tv
                Case "Subscriber", "SUB"
                    Target.Value = "SUB"
                Case "Spouse", "SPS"
                    Target.Value = "SPS"
                Case "Child", "CHD"
                    Target.Value = "CHD"
                Case "Handicapped", "HCH"
                    Target.Value = "HCH"
                Case "Student", "STU"
                    Target.Value = "STU"
                Case "Domestic Partner", "DOM"
                    Target.Value = "DOM"
            End Select
            Application.EnableEvents = True
        End If
    End If
    
    'Languages ("English, Spanish, Chinese, Korean, Vietnamese, Tagalog, Other")
    If tc = ColumnPerName4Term("LANGUAGE") Then
        If Target.Cells.Count = 1 Then
            Application.EnableEvents = False
            Select Case tv
                Case "English", "ENG", "E"
                    Target.Value = "ENG"
                Case "Spanish", "SPA", "S"
                    Target.Value = "SPA"
                Case "Chinese", "Mandarin", "ZHO", "ZHOX", "C/M", "CHI", "CHN", "C", "M"
                    Target.Value = "ZHO"
                Case "Korean", "Korea", "KOR", "K"
                    Target.Value = "KOR"
                Case "Vietnamese", "Vietnam", "VIET", "VIE", "V"
                    Target.Value = "VIE"
                Case "Tagalog", "Philipines", "Philipine", "Tag", "TGL", "T"
                    Target.Value = "TGL"
                Case "Other", "W09", "O"
                    Target.Value = "W09"
            End Select
            Application.EnableEvents = True
        End If
    End If
    
    'Group Number
    If tc = ColumnPerName4Term("GROUP NUMBER") Then
        Application.EnableEvents = False
        shTerm.Cells(Tr, tc).Value = WorksheetFunction.VLookup(tv, shData.Range("II:IJ"), 2, False)
        Application.EnableEvents = True
    End If
    

    'Validation on the fly
    If Tr >= startrow Then
        Application.EnableEvents = False
        Select Case tc
            Case ColumnPerName4Term("EMPLOYEES SOCIAL")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectEmpSSN4TermPerProduct(Tr, Tr)
                Call ValidateEmpSSN4TermPerRecord(Tr, Tr)
                If shTerm.Cells(Tr, ColumnPerName4Term("RELATIONSHIP CODE")).Value = "SUB" Then
                    shTerm.Cells(Tr, ColumnPerName4Term("MEMBER SSN")).Value = shTerm.Cells(Tr, tc).Value
                    Call ValidateMemSSN4TermPerRecord(Tr, Tr)
                End If
            Case ColumnPerName4Term("LAST NAME")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectName4TermPerRecord("LAST NAME", Tr, Tr)
                Call ValidateName4TermPerRecord("LAST NAME", Tr, Tr)
            Case ColumnPerName4Term("FIRST NAME")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectName4TermPerRecord("FIRST NAME", Tr, Tr)
                Call ValidateName4TermPerRecord("FIRST NAME", Tr, Tr)
            Case ColumnPerName4Term("GENDER")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectGender4TermPerRecord(Tr, Tr)
                Call ValidateGender4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("RELATIONSHIP CODE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectRelCode4TermPerRecord(Tr, Tr)
                Call ValidateRelCode4TermPerRecord(Tr, Tr)
                If shTerm.Cells(Tr, tc).Value = "SUB" And Trim(shTerm.Cells(Tr, ColumnPerName4Term("EMPLOYEES SOCIAL")).Value) <> "" Then
                    shTerm.Cells(Tr, ColumnPerName4Term("MEMBER SSN")).Value = shTerm.Cells(Tr, ColumnPerName4Term("EMPLOYEES SOCIAL")).Value
                    Call ValidateMemSSN4TermPerRecord(Tr, Tr)
                End If
            Case ColumnPerName4Term("DOB")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateDOB4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("MEMBER SSN")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectMemSSN4TermPerRecord(Tr, Tr)
                Call ValidateMemSSN4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("ADDRESS")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectAddress4TermPerRecord("ADDRESS", Tr, Tr)
                Call ValidateAddress4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("CITY")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectCity4TermPerRecord(Tr, Tr)
                Call ValidateCity4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("STATE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectState4TermPerRecord(Tr, Tr)
                Call ValidateState4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("ZIP CODE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateZip4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("LANGUAGE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectLanguage4TermPerRecord(Tr, Tr)
                Call ValidateLanguage4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("EFFECTIVE DATE FOR COVERAGE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateEffDate4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("TERMINATION DATE")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidateTerminationDate4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("GROUP NUMBER")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                'Call ValidateGroupNumber4Term
                Call ValidateGroupNo4Term
            Case ColumnPerName4Term("PRIMARY CARE PHYSICIAN ID (PCP)")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call ValidatePCP4TermPerRecord(Tr, Tr)
            Case ColumnPerName4Term("CURRENT PCP")
                shTerm.Cells(Tr, tc).Interior.Pattern = xlNone
                Call CorrectCurrentPCP4TermPerRecord(Tr, Tr)
                Call ValidateCurrentPCP4TermPerRecord(Tr, Tr)
        End Select
        shTerm.Protect AllowFormattingColumns:=True
        Application.EnableEvents = True
    End If
End Sub


Attribute VB_Name = "test"
'************************************************************************************
'* test procedures                                                                  *
'* Playground                                                                       *
'* by Iggy Darsa                                                                    *
'* 7/1/2015                                                                         *
'************************************************************************************

Sub movefile()
    If shData.Range("B2").Value = True Or shData.Range("B8").Value = True Then 'CA or CT
        fileName = "internal_ak3s_k3s_elig_"
    ElseIf shData.Range("B3").Value = True Or shData.Range("B4").Value = True Then 'CO or NV
        fileName = "internal_am1e_m1e_elig_"
    ElseIf shData.Range("B5").Value = True Then 'GA
        fileName = "internal_ga_n1"
    Else
        Exit Sub
    End If
    dk = 3
    sPath = "\\np01ana001\sgmembership\Census\"
    sPathBU = "\\np01ana001\sgmembership\Census_Offshore\"
        
    If shData.Range("B2").Value = True Or shData.Range("B3").Value = True Or shData.Range("B4").Value = True Or shData.Range("B8").Value = True Then 'CA, CO, NV, or CT
        FileCopy sPath & fileName & Format(dk, "00") & ".txt", sPathBU & Trim(shOUO.Range("B6").Value) & "-" & Format(DateTime.Now, "YYYYMMDD") & "-" & fileName & Format(dk, "00") & ".txt"
    ElseIf shData.Range("B5").Value = True Then 'GA
        FileCopy sPath & fileName & LCase(gaFile) & "_elig.txt", sPathBU & Trim(shOUO.Range("B6").Value) & "-" & Format(DateTime.Now, "YYYYMMDD") & "-" & fileName & LCase(gaFile) & "_elig.txt"
    End If
End Sub
Sub msgtest()
 If CurrentUserDomain = shData.Range("domain").Value Then
        shOUO.Shapes("Match_Suffix").Visible = msoTrue
    Else
        shOUO.Shapes("Match_Suffix").Visible = msoFalse
    End If
End Sub

Sub controlcount()
Application.OnKey "{F8}"
End Sub

Sub IsSheetProtected()
    If shSL.ProtectContents = True Then
        MsgBox "protected"
    Else
        MsgBox "not"
    End If
End Sub



Sub Clear_TextBox()
With Worksheets("Office Use Only")
For Each tbx In .OLEObjects
    If Left(tbx.Name, 12) = "tbClassDesc0" Or Left(tbx.Name, 9) = "tbAmount0" Then
        tbx.Object.text = ""
        tbx.Visible = True
    End If
Next
.Shapes.Range(Array("frameFAform")).Visible = msoTrue
.Shapes.Range(Array("lblDescTitle")).Visible = msoTrue
.Shapes.Range(Array("lblAmountTitle")).Visible = msoTrue
.Shapes.Range(Array("btnSaveFlatAmount")).Visible = msoFalse
End With
End Sub

Sub SelectAllBlanks()
    ActiveSheet.UsedRange.SpecialCells _
     (xlCellTypeBlanks).Select
End Sub

Sub ReturnAsc()
    MsgBox Asc("'")
End Sub

Sub daqa()
    MsgBox Format(Now, "nn")
End Sub

Sub NameAdress()
    shOUO.Range("FV_Section").EntireColumn.Hidden = True
End Sub

Sub testpad()
MsgBox Right("00000000000" & 25000, 11)
End Sub

Sub admingreenoncb()
    shOUO.CheckBoxes("GA_Selection").Interior.Color = RGB(0, 176, 80)
End Sub
Sub admingrayoncb()
    shOUO.CheckBoxes("GA_Slection").Interior.Color = RGB(128, 128, 128)
End Sub
Sub deleteallobjects()
    ActiveSheet.DrawingObjects.Delete

End Sub
Sub unhidefields()
    shSL.Columns(ColumnPerName("VOLUNTARY LIFE")).EntireColumn.Hidden = True
End Sub
Attribute VB_Name = "vALIDATION"
Option Explicit
Const startrow As Long = 7
Sub AdminValidation()
    Dim errMsg As String: errMsg = "Following error(s) found:" & vbLf & vbLf
    Dim errFound As Boolean: errFound = False
    Dim adminMedCount As Integer: adminMedCount = 0
    Dim dataMedCount As Integer: dataMedCount = 0
    Dim adminDentCount As Integer: adminDentCount = 0
    Dim dataDentCount As Integer: dataDentCount = 0
    Dim adminVisCount As Integer: adminVisCount = 0
    Dim dataVisCount As Integer: dataVisCount = 0
    Dim adminFSACount As Integer: adminFSACount = 0
    Dim dataFSACount As Integer: dataFSACount = 0
    Dim adminsupplementalCount As Integer: adminsupplementalCount = 0
    Dim datasupplementalCount As Integer: datasupplementalCount = 0
    Dim adminDisCount As Integer: adminDisCount = 0
    Dim dataDisCount As Integer: dataDisCount = 0
    Dim adminLifeCount As Integer: adminLifeCount = 0
    Dim dataLifeCount As Integer: dataLifeCount = 0
'    Dim singleEmail As Variant
'    Dim errEmail As Boolean
    
    shData.Range("G80").Value = False

    'Free form format
    If Trim(shOUO.Range("B3").Value) <> "" And IsDate(shOUO.Range("B3").Value) = False Then
        errFound = True
        errMsg = errMsg & "- ""Date of Sale"" should be in a date format." & vbLf
    End If
    If Trim(shOUO.Range("B4").Value) <> "" And IsDate(shOUO.Range("B4").Value) = False Then
        errFound = True
        errMsg = errMsg & "- ""Plan Effective Date"" should be in a date format." & vbLf
    End If
    
    If shData.Range("grp").Value <> "Small" Then
        If AdminEmailValidation(shOUO.Range("B9").Value, "Client Email") <> "" Then
            errFound = True
            errMsg = errMsg & AdminEmailValidation(shOUO.Range("B9").Value, "Client Email")
        End If
    End If
    
    If AdminEmailValidation(shOUO.Range("B11").Value, "Agent/Broker Email") <> "" Then
        errFound = True
        errMsg = errMsg & AdminEmailValidation(shOUO.Range("B11").Value, "Agent/Broker Email")
    End If
    
    If shData.Range("grp").Value <> "Small" Then
        If AdminEmailValidation(shOUO.Range("B12").Value, "SAE/AME Email") <> "" Then
            errFound = True
            errMsg = errMsg & AdminEmailValidation(shOUO.Range("B12").Value, "SAE/AME Email")
        End If
        
        If AdminEmailValidation(shOUO.Range("B13").Value, "SAR Email") <> "" Then
            errFound = True
            errMsg = errMsg & AdminEmailValidation(shOUO.Range("B13").Value, "SAR Email")
        End If
    End If
    
    If AdminEmailValidation(shOUO.Range("B14").Value, "Sales Support Email") <> "" Then
        errFound = True
        errMsg = errMsg & AdminEmailValidation(shOUO.Range("B14").Value, "Sales Support Email")
    End If
    
    If shData.Range("grp").Value <> "Small" Then
        If AdminEmailValidation(shOUO.Range("B15").Value, "Case Implementation Email") <> "" Then
            errFound = True
            errMsg = errMsg & AdminEmailValidation(shOUO.Range("B15").Value, "Case Implementation Email")
        End If
        
        If Trim(shOUO.Range("B15").Value) <> "" And Not (shOUO.Range("B15").Value Like "?*@?*.?*") Then
            errFound = True
            errMsg = errMsg & "- ""Case Implementation"" should be in an email format." & vbLf
        End If
    End If
    
    'Required fields for the free form
    'Always Required
    If Trim(shOUO.Range("B6").Value) = "" Then
        errFound = True
        errMsg = errMsg & "- Enter a value for Case Number." & vbLf
    ElseIf Len(Trim(shOUO.Range("B6").Value)) <> 6 Then
        errFound = True
        errMsg = errMsg & "- ""Case Number"" has to be 6 digits." & vbLf
    End If
    If Trim(shOUO.Range("B4").Value) = "" Then
        errFound = True
        errMsg = errMsg & "- Enter Plan Effective Date." & vbLf
    End If
    'Required for External
    If shData.Range("usr").Value = "External" Then
        If Trim(shOUO.Range("B5").Value) = "" Then
            errFound = True
            errMsg = errMsg & "- Case Name." & vbLf
        End If
        If Trim(shOUO.Range("B10").Value) = "" Then
            errFound = True
            errMsg = errMsg & "- Agent/Broker Contact Name." & vbLf
        End If
        If Trim(shOUO.Range("B11").Value) = "" Then
            errFound = True
            errMsg = errMsg & "- Agent/Broker Email." & vbLf
        End If
    End If
    
'    'Required for SG
'    If shData.Range("grp").Value = "Small" Then
'        If Trim(shOUO.Range("B5").Value) = "" Then
'            errFound = True
'            errMsg = errMsg & "- Enter the Case Name." & vbLf
'        End If
'        If Trim(shOUO.Range("B14").Value) = "" Then
'            errFound = True
'            errMsg = errMsg & "- Enter an email address for ""Sales Support Email""." & vbLf
'        End If
'    'Required for LG
'    Else
'        If Trim(shOUO.Range("B15").Value) = "" Then
'            errFound = True
'            errMsg = errMsg & "- Enter an email address for ""Case Implementation""." & vbLf
'        End If
'    End If
    
    '*************************************************************************************************
    ' If user is External, run the side code to populate with placeholder suffixes (999999XX01) here *
    '*************************************************************************************************
    If shData.Range("H2").Value = "External" Then
        Call CopyProdToDataForExternal("D", "AJ") 'Medical
        Call CopyProdToDataForExternal("F", "AM") 'Dental
        Call CopyProdToDataForExternal("J", "AP") 'Vision
        Call CopyProdToDataForExternal("Q", "NE") 'FSA
        Call CopyProdToDataForExternal("S", "NN") 'Supplemental
        Call CopyProdToDataForExternal("L", "AS") 'Disability
        Call CopyLifeToDataForExternal
        Call PopulatePlaceHolderSuffix
        Call CarryoverSuffixes
    ElseIf shData.Range("H2").Value = "Internal" Or CurrentUserDomain = shData.Range("domain").Value Or CurrentUserDomain = shData.Range("domainNY").Value Then
        'Check if any products exist that doesnt have a suffix
        If shData.Range("E2").Value = True Then
            adminMedCount = WorksheetFunction.CountA(shOUO.Range("D6:D30"))
            dataMedCount = WorksheetFunction.CountA(shData.Range("AK3:AK30"))
            If adminMedCount <> dataMedCount Then
                errFound = True
                errMsg = errMsg & "- " & adminMedCount - dataMedCount & " Medical product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E3").Value = True Then
            adminDentCount = WorksheetFunction.CountA(shOUO.Range("F6:F30"))
            dataDentCount = WorksheetFunction.CountA(shData.Range("AN3:AN30"))
            If adminDentCount <> dataDentCount Then
                errFound = True
                errMsg = errMsg & "- " & adminDentCount - dataDentCount & " Dental product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E4").Value = True Then
            adminVisCount = WorksheetFunction.CountA(shOUO.Range("J6:J30"))
            dataVisCount = WorksheetFunction.CountA(shData.Range("AQ3:AQ30"))
            If adminVisCount <> dataVisCount Then
                errFound = True
                errMsg = errMsg & "- " & adminVisCount - dataVisCount & " Vision product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E6").Value = True Then
            adminDisCount = WorksheetFunction.CountA(shOUO.Range("L6:L30"))
            dataDisCount = WorksheetFunction.CountA(shData.Range("AT3:AT30"))
            If adminDisCount <> dataDisCount Then
                errFound = True
                errMsg = errMsg & "- " & adminDisCount - dataDisCount & " Disability product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E5").Value = True Then
            adminLifeCount = WorksheetFunction.CountA(shOUO.Range("N6:N30"))
            dataLifeCount = WorksheetFunction.CountA(shData.Range("AW3:AW30")) + WorksheetFunction.CountA(shData.Range("AZ3:AZ30"))
            If adminLifeCount <> dataLifeCount Then
                errFound = True
                errMsg = errMsg & "- " & adminLifeCount - dataLifeCount & " Life/AD&D product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E7").Value = True Then
            adminFSACount = WorksheetFunction.CountA(shOUO.Range("Q6:Q30"))
            dataFSACount = WorksheetFunction.CountA(shData.Range("NF3:NF30"))
            If adminFSACount <> dataFSACount Then
                errFound = True
                errMsg = errMsg & "- " & adminFSACount - dataFSACount & " FSA product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
        If shData.Range("E8").Value = True Then
            adminsupplementalCount = WorksheetFunction.CountA(shOUO.Range("S6:S30"))
            datasupplementalCount = WorksheetFunction.CountA(shData.Range("NO3:NO30"))
            If adminsupplementalCount <> datasupplementalCount Then
                errFound = True
                errMsg = errMsg & "- " & adminsupplementalCount - datasupplementalCount & " Supplemental product(s) does not have matched suffix. Click on ""Match Suffix""." & vbLf
            End If
        End If
    End If
    
    'Dental Platform
    Dim i As Long
    For i = 6 To 30
        If InStr(1, shOUO.Range("F" & i).Value, "Prime", vbTextCompare) > 0 Or _
            InStr(1, shOUO.Range("F" & i).Value, "Complete", vbTextCompare) > 0 Then
            If Trim(shData.Range("G73").Value) = "" And Not CentralState Then
                errFound = True
                errMsg = errMsg & "- Prime and/or Complete detected for Dental products. Platform has to be selected." & vbLf
            End If
        End If
    Next i
    
    
    'Life Products
    If shData.Range("level3").Value <> True Then
        For i = 6 To 30
            Select Case shOUO.Range("N" & i).Value
                Case "Basic Life"
                    Call LifeLayer1(shData.Range("BV26"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Basic AD&D"
                    Call LifeLayer1(shData.Range("BV3"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Optional Life"
                    Call LifeLayer1(shData.Range("BV58"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Optional AD&D"
                    Call LifeLayer1(shData.Range("BV35"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Voluntary Life"
                    Call LifeLayer1(shData.Range("BV90"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Voluntary AD&D"
                    Call LifeLayer1(shData.Range("BV67"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Basic Dep Life"
                    Call DepLayer1(shData.Range("BV19"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Basic Dep AD&D"
                    Call DepLayer1(shData.Range("BV12"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Optional Dep Life"
                    Call DepLayer1(shData.Range("BV51"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Optional Dep AD&D"
                    Call DepLayer1(shData.Range("BV44"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Voluntary Dep Life"
                    Call DepLayer1(shData.Range("BV83"), errFound, errMsg, shOUO.Range("N" & i).Value)
                Case "Voluntary Dep AD&D"
                    Call DepLayer1(shData.Range("BV76"), errFound, errMsg, shOUO.Range("N" & i).Value)
            End Select
        Next i
    End If
    'Remove spaces from Department Codes
    Dim depCodeStartRow As Long: depCodeStartRow = 17
    Dim depCodeEndRow As Long
    Dim depCodeCounter As Long
    
    depCodeEndRow = shOUO.Range("B" & Rows.Count).End(xlUp).row
    If depCodeEndRow > depCodeStartRow Then
        For depCodeCounter = depCodeStartRow + 1 To depCodeEndRow
            shOUO.Unprotect
            shOUO.Range(shOUO.Cells(depCodeStartRow, "B"), shOUO.Cells(depCodeEndRow, "B")).NumberFormat = "@"
            shOUO.Range("B" & depCodeCounter).Value = Replace(shOUO.Range("B" & depCodeCounter).Value, " ", "")
             shOUO.Protect
        Next depCodeCounter
    End If
    
    'Store data if validation ran
    If errFound = False Then shData.Range("G80").Value = True
    
    'If no error and suffix is done by internal, map it
    If errFound = False And (shData.Range("H2").Value = "Internal" Or CurrentUserDomain = shData.Range("domain").Value Or CurrentUserDomain = shData.Range("domainNY").Value) Then
        Call CreateInternalMapping
    End If
    
    Call DisabilityPerProduct
    Call LifePerProduct
    Call ADDPerProduct
    Call CollectSuffixes
    Call DataValidationDriver
    Call HideFields
    
    
    If errFound = True Then
        MsgBox errMsg, vbExclamation, "WARNING!"
    Else
        Dim response As Variant
        response = MsgBox("Successful validation!" & vbLf & vbLf & "Would you like to hide the admin page?" & vbLf & vbLf & "YES: Hides admin page, opens client page." & vbLf & "NO: Returns to the admin page", vbYesNo, "SUCCESS")
        If response = vbYes Then
            shSL.Visible = xlSheetVisible
            shSB.Visible = xlSheetVisible
            shTerm.Visible = xlSheetVisible
            shOUO.Visible = xlSheetVeryHidden
            shSfx.Visible = xlSheetVeryHidden
            If shData.Range("usr").Value = "External" And CurrentUserDomain <> shData.Range("domain").Value And CurrentUserDomain = shData.Range("domainNY").Value Then
                frmTerms.Show
            End If
            Application.EnableEvents = True
            shSL.Activate
        Else
            shSL.Visible = xlSheetVeryHidden
            shSB.Visible = xlSheetVeryHidden
            shTerm.Visible = xlSheetVeryHidden
            shOUO.Visible = xlSheetVisible
            shSfx.Visible = xlSheetVeryHidden
        End If
    End If
    
    'PCP gray comment
    Call PCPcomment
End Sub

Private Function AdminEmailValidation(ByVal originalStr As String, ByVal fieldTitle As String) As String
    Dim errString As String: errString = ""
    Dim errEmail As Boolean
    Dim singleEmail As Variant
    
    If Trim(originalStr) <> "" Then
        errEmail = False
        For Each singleEmail In Split(originalStr, ";")
            If errEmail Then Exit For
            If Trim(singleEmail) <> "" And Not singleEmail Like "?*@?*.?*" Then
                errEmail = True
                errString = "- """ & fieldTitle & """ should be in an email format." & vbLf
            End If
        Next singleEmail
    End If
    AdminEmailValidation = errString
End Function
Sub SortMembers()
Dim rowcnt As Long
'
' Sort_members Macro
'
    shSL.Activate
    shSL.Range("B7").Select
    rowcnt = Selection.End(xlDown).row
    shSL.Sort.SortFields.Clear
    shSL.Sort.SortFields.Add Key:=Range("C7:C" & rowcnt), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    shSL.Sort.SortFields.Add Key:=Range("H7:H" & rowcnt), SortOn:=xlSortOnValues, Order:=xlAscending, CustomOrder:="SUB,SPS,DOM,CHD,HCH,LGD", DataOption:=xlSortNormal
    With shSL.Sort
        .SetRange Range("A7:CV" & rowcnt)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Private Sub LifeLayer1(ByVal rng As Range, ByRef errFound As Boolean, ByRef errMsg As String, ByVal prodName As String)
    If rng.Value <> True And rng.Offset(1, 0).Value <> True And rng.Offset(2, 0).Value <> True Then
        errFound = True
        errMsg = errMsg & "- No options selected for """ & prodName & """." & vbLf
    Else
        Call LifeLayer2(rng, errFound, errMsg, prodName)
    End If
End Sub

Private Sub LifeLayer2(ByVal rng As Range, ByRef errFound As Boolean, ByRef errMsg As String, ByVal prodName As String)
    If rng.Value = True Then
        If rng.Offset(3, 0).Value <> True And rng.Offset(4, 0).Value <> True Then
            errFound = True
            errMsg = errMsg & "- No sub-option selected for """ & prodName & """ - Flat option." & vbLf
        Else
            Call LifeLayer3Flat(rng, errFound, errMsg, prodName)
        End If
    ElseIf rng.Offset(1, 0).Value = True Then
        If rng.Offset(5, 0).Value <> True And rng.Offset(6, 0).Value <> True Then
            errFound = True
            errMsg = errMsg & "- No sub-option selected for """ & prodName & """ - Class option." & vbLf
        Else
            Call LifeLayer3Class(rng, errFound, errMsg, prodName)
        End If
    ElseIf rng.Offset(2, 0).Value = True Then
        If rng.Offset(7, 0).Value <> True And rng.Offset(8, 0).Value <> True Then
            errFound = True
            errMsg = errMsg & "- No sub-option selected for """ & prodName & """ - Salary option." & vbLf
        End If
    End If
End Sub

Private Sub LifeLayer3Flat(ByVal rng As Range, ByRef errFound As Boolean, ByRef errMsg As String, ByVal prodName As String)
    If rng.Offset(3, 0).Value = True Then
        Select Case prodName
            Case "Basic Life"
                If Trim(shOUO.Range("FVBL").Value) = "" Or shOUO.Range("FVBL").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
            Case "Basic AD&D"
                If Trim(shOUO.Range("FVBA").Value) = "" Or shOUO.Range("FVBA").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
            Case "Optional Life"
                If Trim(shOUO.Range("FVOL").Value) = "" Or shOUO.Range("FVOL").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
            Case "Optional AD&D"
                If Trim(shOUO.Range("FVOA").Value) = "" Or shOUO.Range("FVOA").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
            Case "Voluntary Life"
                If Trim(shOUO.Range("FVVL").Value) = "" Or shOUO.Range("FVVL").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
            Case "Voluntary AD&D"
                If Trim(shOUO.Range("FVVA").Value) = "" Or shOUO.Range("FVVA").Value = 0 Then
                    errFound = True
                    errMsg = errMsg & "- No Flat Amount is entered for """ & prodName & """ - Flat option." & vbLf
                End If
        End Select
    End If
End Sub

Private Sub LifeLayer3Class(ByVal rng As Range, ByRef errFound As Boolean, ByRef errMsg As String, ByVal prodName As String)
    If rng.Offset(5, 0).Value = True Then
        Select Case prodName
            Case "Basic Life"
                If Trim(shData.Range("CE4").Value) = "" Or Trim(shData.Range("CF4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Basic AD&D"
                If Trim(shData.Range("CG4").Value) = "" Or Trim(shData.Range("CH4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Optional Life"
                If Trim(shData.Range("CI4").Value) = "" Or Trim(shData.Range("CJ4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Optional AD&D"
                If Trim(shData.Range("CK4").Value) = "" Or Trim(shData.Range("CL4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Voluntary Life"
                If Trim(shData.Range("CM4").Value) = "" Or Trim(shData.Range("CN4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Voluntary AD&D"
                If Trim(shData.Range("CO4").Value) = "" Or Trim(shData.Range("CP4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Description and/or Amount is entered for """ & prodName & """ - Class option." & vbLf
                End If
        End Select
    ElseIf rng.Offset(6, 0).Value = True Then
        Select Case prodName
            Case "Basic Life"
                If Trim(shData.Range("CS4").Value) = "" Or Trim(shData.Range("CT4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Basic AD&D"
                If Trim(shData.Range("CU4").Value) = "" Or Trim(shData.Range("CV4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Optional Life"
                If Trim(shData.Range("CW4").Value) = "" Or Trim(shData.Range("CX4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Optional AD&D"
                If Trim(shData.Range("CY4").Value) = "" Or Trim(shData.Range("CZ4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Voluntary Life"
                If Trim(shData.Range("DA4").Value) = "" Or Trim(shData.Range("DB4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
            Case "Voluntary AD&D"
                If Trim(shData.Range("DC4").Value) = "" Or Trim(shData.Range("DD4").Value) = "" Then
                    errFound = True
                    errMsg = errMsg & "- No Multiplier and/or Class Name is entered for """ & prodName & """ - Class option." & vbLf
                End If
        End Select
    End If
End Sub

Private Sub DepLayer1(ByVal rng As Range, ByRef errFound As Boolean, ByRef errMsg As String, ByVal prodName As String)
    Dim i As Integer
    Dim valueFound As Boolean: valueFound = False
    Dim volRng As String
    
    For i = 1 To 7
        If rng.Offset(i - 1, 0).Value = True Then
            valueFound = True
            Exit For
        End If
    Next i
        
    If valueFound = False Then
        errFound = True
        errMsg = errMsg & "- No options selected for """ & prodName & """." & vbLf
    Else
         If rng.Value = True Then 'Sub
            Select Case prodName
                Case "Basic Dep Life"
                    volRng = "FVBDL1"
                Case "Basic Dep AD&D"
                    volRng = "FVBDA1"
                Case "Optional Dep Life"
                    volRng = "FVODL1"
                Case "Optional Dep AD&D"
                    volRng = "FVODA1"
                Case "Voluntary Dep Life"
                    volRng = "FVVDL1"
                Case "Voluntary Dep AD&D"
                    volRng = "FVVDA1"
            End Select
            If shOUO.Range(volRng).Value = 0 Or shOUO.Range(volRng).Value = "" Then
                errFound = True
                errMsg = errMsg & "- No volume entered for """ & prodName & """ - Sub Flat Amount." & vbLf
            End If
        End If
        
        If rng.Offset(3, 0).Value = True Then 'Spouse
            Select Case prodName
                Case "Basic Dep Life"
                    volRng = "FVBDL2"
                Case "Basic Dep AD&D"
                    volRng = "FVBDA2"
                Case "Optional Dep Life"
                    volRng = "FVODL2"
                Case "Optional Dep AD&D"
                    volRng = "FVODA2"
                Case "Voluntary Dep Life"
                    volRng = "FVVDL2"
                Case "Voluntary Dep AD&D"
                    volRng = "FVVDA2"
            End Select
            If shOUO.Range(volRng).Value = 0 Or shOUO.Range(volRng).Value = "" Then
                errFound = True
                errMsg = errMsg & "- No volume entered for """ & prodName & """ - Spouse Flat Amount." & vbLf
            End If
        End If
        
        If rng.Offset(5, 0).Value = True Then 'Child
            Select Case prodName
                Case "Basic Dep Life"
                    volRng = "FVBDL3"
                Case "Basic Dep AD&D"
                    volRng = "FVBDA3"
                Case "Optional Dep Life"
                    volRng = "FVODL3"
                Case "Optional Dep AD&D"
                    volRng = "FVODA3"
                Case "Voluntary Dep Life"
                    volRng = "FVVDL3"
                Case "Voluntary Dep AD&D"
                    volRng = "FVVDA3"
            End Select
            If shOUO.Range(volRng).Value = 0 Or shOUO.Range(volRng).Value = "" Then
                errFound = True
                errMsg = errMsg & "- No volume entered for """ & prodName & """ - Child Flat Amount." & vbLf
            End If
        End If
    End If
End Sub

Sub ValidateSubscriberList()
    Dim errMsg As String
    MsgBox "Validation process can take a few minutes." & vbLf & "Please don't close the application during the process." & vbLf & "Click OK to start the validation.", vbExclamation
    Call CoreValidation
    Call DataValidationDriver
    Call TermValidation
    'Call SortMembers '''commenting per intake 1458
    
    If ErrorCount = 0 And ErrorCount4Term = 0 Then
        MsgBox "Validation has completed successfully!", vbInformation
    ElseIf ErrorCount = 0 And ErrorCount4Term > 0 Then
        MsgBox "Validation has completed with errors on 'Terminations' tab!", vbExclamation
        shTerm.Activate
    ElseIf ErrorCount > 0 And ErrorCount4Term = 0 Then
        MsgBox "Validation has completed with errors on 'New Enrollments & Renewals' tab!", vbExclamation
    ElseIf ErrorCount > 0 And ErrorCount4Term > 0 Then
        MsgBox "Validation has completed with errors on both 'New Enrollments & Renewals' and 'Terminations' tabs!", vbExclamation
    End If
    
    If ErrorCount > 0 And shSL.Shapes("cbOnForm").OLEFormat.Object.Value = xlOn Then
        frmValidation.Show
    ElseIf ErrorCount4Term > 0 And shTerm.Shapes("cbOnForm4T").OLEFormat.Object.Value = xlOn Then
        frmValidation4Term.Show
    End If
    
End Sub

Sub CollectSuffixes()
    Dim lrSfx As Long: lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row
    Dim lrTemp As Long
    
    If lrSfx > 1 Then shData.Range("II2:IJ" & lrSfx).ClearContents
    lrSfx = 2
    
    lrTemp = shData.Range("DP" & Rows.Count).End(xlUp).row 'Medical
    If lrTemp > 2 Then
        shData.Range("DP3:DQ" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("DS" & Rows.Count).End(xlUp).row 'Dental
    If lrTemp > 2 Then
        shData.Range("DS3:DT" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("DV" & Rows.Count).End(xlUp).row 'Vision
    If lrTemp > 2 Then
        shData.Range("DV3:DW" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("NH" & Rows.Count).End(xlUp).row 'FSA
    If lrTemp > 2 Then
        shData.Range("NH3:NI" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("NQ" & Rows.Count).End(xlUp).row 'Supplemental
    If lrTemp > 2 Then
        shData.Range("NQ3:NR" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("DY" & Rows.Count).End(xlUp).row 'Disability
    If lrTemp > 2 Then
        shData.Range("DY3:DZ" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("EB" & Rows.Count).End(xlUp).row 'Life
    If lrTemp > 2 Then
        shData.Range("EB3:EC" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
    
    lrTemp = shData.Range("EE" & Rows.Count).End(xlUp).row 'AD&D
    If lrTemp > 2 Then
        shData.Range("EE3:EF" & lrTemp).Copy shData.Range("II" & lrSfx)
        lrSfx = shData.Range("II" & Rows.Count).End(xlUp).row + 1
    End If
End Sub

Sub CoreValidation()
    shSL.Unprotect
    Application.EnableEvents = False
    Call ClearErrorHighlights
    Call PopulateCaseNumbers
    Call ConvertDate("DOB")
    Call ConvertDate("DATE OF HIRE")
    Call ConvertDate("EFFECTIVE DATE FOR COVERAGE")
    Call CorrectEmpSSN
    Call CorrectMemSSN
    Call ValidateEmpSSN
    Call ValidateMemSSN
    Call CorrectHCID
    Call ValidateHCID
    Call CorrectName("LAST NAME")
    Call CorrectName("FIRST NAME")
    Call ValidateName("LAST NAME")
    Call ValidateName("FIRST NAME")
    Call CorrectMI
    Call ValidateMI
    Call CorrectGender
    Call ValidateGender
    Call CorrectRelCode
    Call ValidateRelCode
    Call ValidateDOB
    Call ValidateEmail
    Call CorrectGroupType
    Call ValidateGroupType
    Call CorrectPhone
    Call ValidatePhone
    Call CorrectAddress("ADDRESS")
    Call ValidateAddress
    Call CorrectCity
    Call ValidateCity
    Call CorrectState
    Call ValidateState
    Call ValidateZip
    Call CorrectAddress("SECOND ADDRESS FIELD")
    'Call ValidateDependentAddress
    Call CorrectLanguage
    Call ValidateLanguage
    Call CorrectCOB
    Call ValidateCOB
    Call ValidateDOH
    Call CorrectDepNo
    Call ValidateDepNo
    Call CorrectEmpNo
    Call ValidateEmpNo
    Call CorrectEffDate
    Call ValidateEffDate
    Call ValidateMedicalProduct
    Call ValidatePCP
    Call CorrectCurrentPCP
    Call ValidateCurrentPCP
    Call ValidateDentalProduct
    Call ValidateDentalOffice
    Call ValidateVisionProduct
    Call ValidateFSAProduct
    Call ValidateDisabilityProducts
    Call ValidateDisabilityJobTitle
    Call ValidateDisabilitySalary
    
    If shData.Range("level3").Value <> True Then
        Call CorrectLifeADDSuffixes
        Call ValidateBasicLife
        Call ValidateOptionalLife
        Call ValidateVoluntaryLife
        Call ValidateBasicDepLife
        Call ValidateOptionalDepLife
        Call ValidateVoluntaryDepLife
        Call ValidateBasicADD
        Call ValidateOptionalADD
        Call ValidateVoluntaryADD
        Call ValidateBasicDepADD
        Call ValidateOptionalDepADD
        Call ValidateVoluntaryDepADD
        Call CorrectDepLife
        Call ValidateVolumes
        Call ValidateMultipliers
    End If
    
    Call ValidateCobra
    Call ValidateCobraStartDate
    Call CorrectQualifyingEvent
    Call ValidateQualifyingEvent
    Call ValidateMedicare
    Call ValidatePrimeComplete
    Call ValidateSuffixPerProduct("MEDICAL PRODUCT", "DQ")
    Call ValidateSuffixPerProduct("DENTAL PRODUCT", "DT")
    Call ValidateSuffixPerProduct("VISION PRODUCT", "DW")
    'Call ValidateSuffixPerProduct("FSA PRODUCT", "NI")
    Call ValidateSuffixPerProduct("STD", "EH")
    Call ValidateSuffixPerProduct("LTD", "EI")
    Call ValidateSuffixPerProduct("VOLUNTARY STD", "EJ")
    Call ValidateSuffixPerProduct("VOLUNTARY LTD", "EK")
    Call ValidateSuffixPerProduct("BUY-UP LTD", "EL")
    
    If shData.Range("level3").Value <> True Then
        Call ValidateSuffixPerProduct("BASIC LIFE", "EN")
        Call ValidateSuffixPerProduct("OPTIONAL LIFE", "EO")
        Call ValidateSuffixPerProduct("VOLUNTARY LIFE", "EP")
        Call ValidateSuffixPerProduct("BASIC DEP LIFE", "EQ")
        Call ValidateSuffixPerProduct("OPTIONAL DEP LIFE", "ER")
        Call ValidateSuffixPerProduct("VOLUNTARY DEP LIFE", "ES")
        Call ValidateSuffixPerProduct("BASIC AD&D", "EU")
        Call ValidateSuffixPerProduct("OPTIONAL AD&D", "EV")
        Call ValidateSuffixPerProduct("VOLUNTARY AD&D", "EW")
        Call ValidateSuffixPerProduct("BASIC DEP AD&D", "EX")
        Call ValidateSuffixPerProduct("OPTIONAL DEP AD&D", "EY")
        Call ValidateSuffixPerProduct("VOLUNTARY DEP AD&D", "EZ")
    End If
    
    Application.EnableEvents = True
    shSL.Protect AllowFormattingColumns:=True
End Sub

'   Used for "DOB", "DOH", and "Effective Date For Coverage" fields and converts the text to date datatype.
Sub ConvertDate(ByVal dateName)
    On Error Resume Next
    Dim colDate As Long: colDate = ColumnPerName(dateName)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDate).End(xlUp).row
    Dim i As Long
    For i = startrow To lr
        shSL.Cells(i, colDate).Value = CDate(shSL.Cells(i, colDate).Value)
    Next i
    Call Clear0sOnSL(startrow, lr, colDate)
End Sub

Sub CorrectSSN(ByVal ssn As String)
    Dim colSSN As Long: colSSN = ColumnPerName(ssn)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colSSN).End(xlUp).row
    Call CorrectSSNPerRecord(colSSN, startrow, lr)
End Sub

Sub CorrectSSNPerRecord(ByVal colSSN As Long, ByVal startR As Long, ByVal endR As Long)
    'Dim colSSN As Long: colSSN = ColumnPerName(ssn)
    Dim i As Long
    Dim lr As Long: lr = endR
    If lr >= startR Then
        For i = startR To endR
            shSL.Cells(i, colSSN).Value = WorksheetFunction.Substitute(shSL.Cells(i, colSSN).Value, "-", "")
            shSL.Cells(i, colSSN).Value = WorksheetFunction.Substitute(shSL.Cells(i, colSSN).Value, " ", "")
            If Trim(shSL.Cells(i, colSSN).Value) <> "" Then
                On Error Resume Next
                shSL.Cells(i, colSSN).Value = shSL.Cells(i, colSSN).Value * 1
                shSL.Cells(i, colSSN).NumberFormat = "000-00-0000"
            End If
        Next i
    End If
End Sub

'   Puts the Case number on the hidden column "A" if any value is detected on "Employee Social" column.
Sub PopulateCaseNumbers()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call PopulateCaseNumbersPerRecord(startrow, lr)
End Sub

Sub PopulateCaseNumbersPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCase As Long: colCase = ColumnPerName("CASE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    If lr >= startrow Then
        shSL.Cells(startR, colCase).Formula = "=IF(" & shSL.Cells(startR, colEmpSSN).Address(0, 0) & "<>"""", 'Office Use Only'!$B$6, """")"
        shSL.Cells(startR, colCase).Copy shSL.Range(shSL.Cells(startR, colCase), shSL.Cells(lr, colCase))
    End If
End Sub

'   Removes dashes and spaces that are typed in by the user and converts to "000-00-0000" format.
Sub CorrectEmpSSN()
    Call CorrectSSN("EMPLOYEES SOCIAL")
End Sub

Sub CorrectEmpSSNPerProduct(ByVal startR As Long, ByVal endR As Long)
    Call CorrectSSNPerRecord("EMPLOYEES SOCIAL", startR, endR)
End Sub

'   Highlights the "Employee Social" field in red if any of the following errors found:
'       If data is not numeric
'       If the value is not between 1 and 999999999
'       If the value is not a whole number
'       If the "Relationship Code" is SUB and yet "Employee Social" and "Member SSN" does not match. (if the relationship code is SUB then Emp SSN has to be same as Member SSN.)
Sub ValidateEmpSSN()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call ValidateEmpSSNPerRecord(startrow, lr)
End Sub

Sub ValidateEmpSSNPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colMemSSN As Long: colMemSSN = ColumnPerName("MEMBER SSN")
    Dim colRelCd  As Long: colRelCd = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colEmpSSN).Interior.Pattern = xlNone
            If Not IsNumeric(shSL.Cells(i, colEmpSSN).Value) Or _
                shSL.Cells(i, colEmpSSN).Value < 1 Or _
                shSL.Cells(i, colEmpSSN).Value > 999999999 Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
            If IsNumeric(shSL.Cells(i, colEmpSSN).Value) Then
                If shSL.Cells(i, colEmpSSN).Value - Int(shSL.Cells(i, colEmpSSN).Value) <> 0 Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
            End If
            If shSL.Cells(i, colRelCd).Value = "SUB" And shSL.Cells(i, colMemSSN).Value <> shSL.Cells(i, colEmpSSN).Value Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
                ErrorHighlight (shSL.Cells(i, colMemSSN))
            End If
        Next i
    End If
End Sub

'   Removes the following special characters:
'       - , . ' _ ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : " / < > ? ` ~ and space
Sub CorrectHCID()
    Dim colHCID As Long: colHCID = ColumnPerName("HCID")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colHCID).End(xlUp).row
    Call CorrectHCIDPerRecord(startrow, lr)
End Sub

Sub CorrectHCIDPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colHCID As Long: colHCID = ColumnPerName("HCID")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colHCID).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colHCID).Value, "- , . ' _ ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : "" / < > ? ` ~", False))
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateHCID()
    Call ValidateAgainstSSN("HCID")
End Sub

Sub ValidateHCIDPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("HCID", startR, endR)
End Sub

'   Used for "First Name" and "Last Name" fields.
'   It converts the following special characters to space
'   - , . ' _
'   It removes the following special characters:
'   ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : " / < > ? ` ~ and numbers
Sub CorrectName(ByVal Fieldname As String)
    Dim colName As Long: colName = ColumnPerName(Fieldname)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colName).End(xlUp).row
    Call CorrectNamePerRecord(Fieldname, startrow, lr)
End Sub

Sub CorrectNamePerRecord(ByVal Fieldname As String, ByVal startR As Long, ByVal endR As Long)
    Dim colName As Long: colName = ColumnPerName(Fieldname)
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colName).Value = Trim(ChangeSpecialCharToSpace(shSL.Cells(i, colName).Value, "- , . ' _"))
            shSL.Cells(i, colName).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colName).Value, "0 1 2 3 4 5 6 7 8 9 ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : "" / < > ? ` ~", True))
        Next i
    End If
End Sub

'   Used for "First Name" and "Last Name" fields.
'   If there is a name and "Employee Social" is blank, then highlights the "Employee Social" field.
'   If the "Employee Social" field has a value and the name field is blank, then highlights the name field.
Sub ValidateName(ByVal Fieldname As String)
    Dim colName As Long: colName = ColumnPerName(Fieldname)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colName).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateNamePerRecord(Fieldname, startrow, lr)
End Sub

Sub ValidateNamePerRecord(ByVal Fieldname As String, ByVal startR As Long, ByVal endR As Long)
    Dim colName As Long: colName = ColumnPerName(Fieldname)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colEmpSSN).Value <> "" And shSL.Cells(i, colName).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colName))
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" And shSL.Cells(i, colName).Value <> "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   If more than 1 character entered, takes the first character and capitalizes.
Sub CorrectMI()
    Dim colMI As Long: colMI = ColumnPerName("MIDDLE INITIAL")
    Call CorrectName("MIDDLE INITIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colMI).End(xlUp).row
    Call CorrectMIPerRecord(startrow, lr)
End Sub

Sub CorrectMIPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colMI As Long: colMI = ColumnPerName("MIDDLE INITIAL")
    Call CorrectNamePerRecord("MIDDLE INITIAL", startR, endR)
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Len(shSL.Cells(i, colMI).Value) > 1 Then
                shSL.Cells(i, colMI).Value = UCase(Left(shSL.Cells(i, colMI).Value, 1))
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateMI()
    Call ValidateAgainstSSN("MIDDLE INITIAL")
End Sub

Sub ValidateMIPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("MIDDLE INITIAL", startR, endR)
End Sub

'   Converts "Male" to "M" and "Female" to "F"
Sub CorrectGender()
    Dim colGender As Long: colGender = ColumnPerName("GENDER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colGender).End(xlUp).row
    Call CorrectGenderPerRecord(startrow, lr)
End Sub

Sub CorrectGenderPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGender As Long: colGender = ColumnPerName("GENDER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shSL.Cells(i, colGender).Value
                Case "Male"
                    shSL.Cells(i, colGender).Value = "M"
                Case "Female"
                    shSL.Cells(i, colGender).Value = "F"
            End Select
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   If any value detected other than "M" or "F", highlights the field.
Sub ValidateGender()
    Dim colGender As Long: colGender = ColumnPerName("GENDER")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colGender).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateGenderPerRecord(startrow, lr)
End Sub

Sub ValidateGenderPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGender As Long: colGender = ColumnPerName("GENDER")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colGender).Value <> "M" And shSL.Cells(i, colGender).Value <> "F" Then
                ErrorHighlight (shSL.Cells(i, colGender))
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   Converts commonly used and yet not allowed "Relationship Code" values to proper one:
'       Subscriber   ' SUB
'       Spouse, Wife, Husband, SPO   ' SPS
'       Child, Children, Child(ren), CHL   ' CHD
'       Student, STUD   ' STU
'       Handicap, Handicapped   ' HCH
'       Domestic Partner, Dom Partner, Domestic ' DOM
Sub CorrectRelCode()
    Dim colRelCode As Long: colRelCode = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colRelCode).End(xlUp).row
    Call CorrectRelCodePerRecord(startrow, lr)
End Sub

Sub CorrectRelCodePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colRelCode As Long: colRelCode = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shSL.Cells(i, colRelCode).Value
                Case "Subscriber"
                    shSL.Cells(i, colRelCode).Value = "SUB"
                Case "Spouse", "Wife", "Husband", "SPO"
                    shSL.Cells(i, colRelCode).Value = "SPS"
                Case "Child", "Children", "Child(ren)", "CHL"
                    shSL.Cells(i, colRelCode).Value = "CHD"
                Case "Student", "STUD"
                    shSL.Cells(i, colRelCode).Value = "STU"
                Case "Handicap", "Handicapped"
                    shSL.Cells(i, colRelCode).Value = "HCH"
                Case "Domestic Partner", "Dom Partner", "Domestic"
                    shSL.Cells(i, colRelCode).Value = "DOM"
            End Select
        Next i
    End If
End Sub

'   Highlights the "Employee Social" field in red if any of the following errors found:
'       If there is a value for "Relationship Code" and "Employee Social" is empty.
'       If "Relationship Code" is SUB but "Employee Social" does not match "Member SSN".
'   Highlights the "Member SSN" field in red the following error found:
'       If "Relationship Code" is SUB but "Employee Social" does not match "Member SSN".
'   Highlights the "Employee Social" field in red if any of the following errors found:
'       If "Relationship Code" is anything other than SUB, SPS, CHD, STU, HCH, or DOM.
'       If "Relationship Code" is STU but no Dental or Vision product is selected.
Sub ValidateRelCode()
    Dim colRelCode As Long: colRelCode = ColumnPerName("RELATIONSHIP CODE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colRelCode).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateRelCodePerRecord(startrow, lr)
End Sub

Sub ValidateRelCodePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colRelCode As Long: colRelCode = ColumnPerName("RELATIONSHIP CODE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colMemSSN As Long: colMemSSN = ColumnPerName("MEMBER SSN")
    Dim colDent As Long: colDent = ColumnPerName("DENTAL PRODUCT")
    Dim colVis As Long: colVis = ColumnPerName("VISION PRODUCT")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colRelCode).Value <> "SUB" And _
                shSL.Cells(i, colRelCode).Value <> "SPS" And _
                shSL.Cells(i, colRelCode).Value <> "CHD" And _
                shSL.Cells(i, colRelCode).Value <> "STU" And _
                shSL.Cells(i, colRelCode).Value <> "HCH" And _
                shSL.Cells(i, colRelCode).Value <> "DOM" Then
                ErrorHighlight (shSL.Cells(i, colRelCode))
            ElseIf shSL.Cells(i, colRelCode).Value = "STU" And shSL.Cells(i, colDent).Value = "" And shSL.Cells(i, colVis).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colRelCode))
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
            If shSL.Cells(i, colRelCode).Value = "SUB" And shSL.Cells(i, colMemSSN).Value <> shSL.Cells(i, colEmpSSN).Value Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
                ErrorHighlight (shSL.Cells(i, colMemSSN))
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights the "DOB" field if the value is blank or not between 1/1/1900 and <Today>'s date.
Sub ValidateDOB()
    Dim colDate As Long: colDate = ColumnPerName("DOB")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDate).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateDOBPerRecord(startrow, lr)
End Sub

Sub ValidateDOBPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDate As Long: colDate = ColumnPerName("DOB")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colDate).NumberFormat = "@" Then shSL.Cells(i, colDate).NumberFormat = "m/d/yyyy": shSL.Cells(i, colDate).Value = shSL.Cells(i, colDate).Value
            If shSL.Cells(i, colDate).Value = "" Then ErrorHighlight (shSL.Cells(i, colDate))
            If shSL.Cells(i, colDate).Value > Date Then ErrorHighlight (shSL.Cells(i, colDate))
            If shSL.Cells(i, colDate).Value <= DateValue("1/1/1900") Then ErrorHighlight (shSL.Cells(i, colDate))
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights the "Email" field if it is not in an email format (?*@?*.?*)
Sub ValidateEmail()
    Dim colEmail As Long: colEmail = ColumnPerName("EMAIL")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmail).End(xlUp).row
    Call ValidateEmailPerRecord(startrow, lr)
End Sub

Sub ValidateEmailPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmail As Long: colEmail = ColumnPerName("EMAIL")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Not (shSL.Cells(i, colEmail).Value Like "?*@?*.?*" Or shSL.Cells(i, colEmail).Value = "") Then
                ErrorHighlight (shSL.Cells(i, colEmail))
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   Removes dashes and spaces that are typed in by the user and converts to "000-00-0000" format.
Sub CorrectMemSSN()
    Call CorrectSSN("MEMBER SSN")
End Sub

Sub CorrectMemSSNPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call CorrectSSNPerRecord("MEMBER SSN", startR, endR)
End Sub

'   It highlights Member SSN if
'       Effective date is before 1/1/16 and the age of the member is 45 or older and "Member SSN" is missing.
'       Effective date is 1/1/16 or later and "Member SSN" is missing.
'       If "Member SSN" is not numeric.
'       If "Member SSN" not in between 1 and 999999999
'       If "Member SSN" is not a whole number
'       If the value in "Member SSN" exists on more than one user.
'   "Employer Social" is highlighted if "Member SSN" has value and "Employer Social" does not.
'   Both "Employee Social" and "Member SSN" highlighted if
'       Member is a SUB but Employee Social and Member SSN does NOT match.
'       Member is not a SUB but Employee Social and Member SSN matches.
Sub ValidateMemSSN()
    Dim colMemSSN As Long: colMemSSN = ColumnPerName("MEMBER SSN")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colMemSSN).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call ValidateMemSSNPerRecord(startrow, lr)
End Sub

Sub ValidateMemSSNPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colMemSSN As Long: colMemSSN = ColumnPerName("MEMBER SSN")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colDOB As Long: colDOB = ColumnPerName("DOB")
    Dim colRelCd As Long: colRelCd = ColumnPerName("RELATIONSHIP CODE")
    Dim colEffDt As Long: colEffDt = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
    Dim age As Integer: age = 0
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colMemSSN).Interior.Pattern = xlNone
            If shSL.Cells(i, colMemSSN).Value = "" Then
                If IsDate(shSL.Cells(i, colDOB).Value) Then
                    age = DateDiff("yyyy", DateValue(shSL.Cells(i, colDOB).Value), Now)
                    If DateSerial(Year(Now), Month(DateValue(shSL.Cells(i, colDOB).Value)), Day(DateValue(shSL.Cells(i, colDOB).Value))) > shSL.Cells(i, colDOB).Value Then
                        age = age - 1
                    End If
                    If age >= 45 Then
                        ErrorHighlight (shSL.Cells(i, colMemSSN))
                    End If
                End If
                If shSL.Cells(i, colEffDt).Value >= DateValue("1/1/2016") Then
                    ErrorHighlight (shSL.Cells(i, colMemSSN))
                End If
            Else
                If Not IsNumeric(shSL.Cells(i, colMemSSN).Value) Or _
                    shSL.Cells(i, colMemSSN).Value < 1 Or _
                    shSL.Cells(i, colMemSSN).Value > 999999999 Then
                        ErrorHighlight (shSL.Cells(i, colMemSSN))
                End If
                If IsNumeric(shSL.Cells(i, colMemSSN).Value) Then
                    If shSL.Cells(i, colMemSSN).Value - Int(shSL.Cells(i, colMemSSN).Value) <> 0 Then
                        ErrorHighlight (shSL.Cells(i, colMemSSN))
                    End If
                End If
                If shSL.Cells(i, colMemSSN).Value <> "" And shSL.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
               ' If WorksheetFunction.CountIf(shSL.Range(shSL.Cells(startrow, colMemSSN), shSL.Cells(Rows.Count, colMemSSN)), shSL.Cells(i, colMemSSN).Value) > 1 Then
               '     ErrorHighlight (shSL.Cells(i, colMemSSN))
              '  End If
                If shSL.Cells(i, colRelCd).Value = "SUB" And shSL.Cells(i, colMemSSN).Value <> shSL.Cells(i, colEmpSSN).Value Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                    ErrorHighlight (shSL.Cells(i, colMemSSN))
                ElseIf shSL.Cells(i, colRelCd).Value <> "SUB" And shSL.Cells(i, colMemSSN).Value = shSL.Cells(i, colEmpSSN).Value Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                    ErrorHighlight (shSL.Cells(i, colMemSSN))
                End If
            End If
        Next i
    End If
End Sub

'   Converts commonly used and yet not allowed "Group Type" values to proper one:
'       Active, ACT   ' A
'       Cobra, COB   ' C
'       Retiree, Retire, Ret   ' R
Sub CorrectGroupType()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call CorrectGroupTypePerRecord(startrow, lr)
End Sub

Sub CorrectGroupTypePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shSL.Cells(i, colGrpType).Value
                Case "Active", "ACT", "A"
                    shSL.Cells(i, colGrpType).Value = "A"
                Case "Cobra", "Cob", "C"
                    shSL.Cells(i, colGrpType).Value = "C"
                Case "Retiree", "Retire", "Ret", "R"
                    shSL.Cells(i, colGrpType).Value = "R"
            End Select
            If shData.Range("impAuthor").Value = "Apache POI" Then shSL.Cells(i, colGrpType).Value = "A"
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Group Type" if the value is not "A", "C", or "R"
Sub ValidateGroupType()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colGrpType).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateGroupTypePerRecord(startrow, lr)
End Sub

Sub ValidateGroupTypePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colGrpType).Value <> "A" And _
                shSL.Cells(i, colGrpType).Value <> "C" And _
                shSL.Cells(i, colGrpType).Value <> "R" Then
                    ErrorHighlight (shSL.Cells(i, colGrpType))
            End If
        Next i
    End If
End Sub

'   It removes the following special characters:
'       ! @ # $ % ^ & * ( ) - _ = + [ ] { } \ | ; ' : " , . / < > ? ` ~ and space
Sub CorrectPhone()
    Dim colPhone As Long: colPhone = ColumnPerName("PHONE NUMBER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colPhone).End(xlUp).row
    Call CorrectPhonePerRecord(startrow, lr)
End Sub

Sub CorrectPhonePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colPhone As Long: colPhone = ColumnPerName("PHONE NUMBER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colPhone).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colPhone).Value, "! @ # $ % ^ & * ( ) - _ = + [ ] { } \ | ; ' : "" , . / < > ? ` ~", False))
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights the "Phone" field if
'       The data is not numeric
'       Not between 1000000 and 19999999999
Sub ValidatePhone()
    Dim colPhone As Long: colPhone = ColumnPerName("PHONE NUMBER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colPhone).End(xlUp).row
    Call ValidatePhonePerRecord(startrow, lr)
End Sub

Sub ValidatePhonePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colPhone As Long: colPhone = ColumnPerName("PHONE NUMBER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Not IsNumeric(shSL.Cells(i, colPhone).Value) And shSL.Cells(i, colPhone).Value <> "" Then
                ErrorHighlight (shSL.Cells(i, colPhone))
            Else
                If shSL.Cells(i, colPhone).Value <> "" Then
                    If shSL.Cells(i, colPhone).Value < 1000000 Or shSL.Cells(i, colPhone).Value > 19999999999# Then
                        ErrorHighlight (shSL.Cells(i, colPhone))
                    End If
                End If
            End If
        Next i
    End If
End Sub

'   It is used for both "Address" and "Second Address Field" fields.
'   Converts the following special characters to space:
'       ! @ # $ % ^ & * ( ) - _ = + [ ] { } \ | ; ' : " , . < > ? ` ~
'   If "Address" field's length is over 25, it transfers the excess data to "Second Address Field" field.
'   If "Second Address Field" field is over 24 characters, it drops the excess data.
Sub CorrectAddress(ByVal adrs As String)
    Dim colAdrs As Long: colAdrs = ColumnPerName(adrs)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colAdrs).End(xlUp).row
    Call CorrectAddressPerRecord(adrs, startrow, lr)
End Sub

Sub CorrectAddressPerRecord(ByVal adrs As String, ByVal startR As Long, ByVal endR As Long)
    Dim colAdrs As Long: colAdrs = ColumnPerName(adrs)
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colAdrs).Value = Trim(ChangeSpecialCharToSpace(shSL.Cells(i, colAdrs).Value, "! @ # $ % ^ & * ( ) - _ = + [ ] { } \ | ; ' : "" , . < > ? ` ~"))
            If adrs = "ADDRESS" And Len(shSL.Cells(i, colAdrs).Value) > 25 Then
                Dim colAdrs2 As Long: colAdrs2 = ColumnPerName("SECOND ADDRESS FIELD")
                shSL.Cells(i, colAdrs2).Value = Trim(Mid(shSL.Cells(i, colAdrs).Value, 26)) & " " & Trim(shSL.Cells(i, colAdrs2).Value)
                shSL.Cells(i, colAdrs).Value = Left(shSL.Cells(i, colAdrs).Value, 25)
                shSL.Cells(i, colAdrs2).Value = Left(shSL.Cells(i, colAdrs2).Value, 24)
            ElseIf adrs = "SECOND ADDRESS FIELD" And Len(shSL.Cells(i, colAdrs).Value) > 24 Then
                shSL.Cells(i, colAdrs).Value = Left(shSL.Cells(i, colAdrs).Value, 24)
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "DOH" if the member is a SUB and the Date of Hire is not a date format.
Sub ValidateDOH()
    Dim colDate As Long: colDate = ColumnPerName("DATE OF HIRE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colRelCd As Long: colRelCd = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    
    Call ValidateDOHPerRecord(startrow, lr, colDate, colRelCd)
End Sub

Sub ValidateDOHPerRecord(ByVal startR As Long, ByVal endR As Long, Optional colDate As Long, Optional colRelCd As Long)
    
    Dim numericdate As Long
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colDate).NumberFormat = "@" Then shSL.Cells(i, colDate).NumberFormat = "m/d/yyyy": shSL.Cells(i, colDate).Value = shSL.Cells(i, colDate).Value
            If shSL.Cells(i, colDate).NumberFormat = "h:mm:ss AM/PM" Then shSL.Cells(i, colDate).NumberFormat = "General": shSL.Cells(i, colDate).Value = ""
            If shSL.Cells(i, colRelCd).Value = "SUB" Then
                If Not IsDate(shSL.Cells(i, colDate).Value) Then ErrorHighlight (shSL.Cells(i, colDate))
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Address" field if left blank.
Sub ValidateAddress()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colAdrs As Long: colAdrs = ColumnPerName("ADDRESS")
    Dim colRel As Long: colRel = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colAdrs).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateAddressPerRecord(startrow, lr, colEmpSSN, colAdrs, colRel)
End Sub

Sub ValidateAddressPerRecord(ByVal startR As Long, ByVal endR As Long, Optional ByVal colEmpSSN As Long, Optional ByVal colAdrs As Long, Optional ByVal colRel As Long)
    'Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    'Dim colAdrs As Long: colAdrs = ColumnPerName("ADDRESS")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Trim(shSL.Cells(i, colAdrs).Value) = "" And Trim(shSL.Cells(i, colRel).Value = "SUB") Then
                ErrorHighlight (shSL.Cells(i, colAdrs))
            End If
        Next i
    End If
End Sub

Sub ValidateDependentAddress()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colRelCode As Long: colRelCode = ColumnPerName("RELATIONSHIP CODE")
    Dim colAdrs As Long: colAdrs = ColumnPerName("ADDRESS")
    Dim colCity As Long: colCity = ColumnPerName("CITY")
    Dim colState As Long: colState = ColumnPerName("STATE")
    Dim colZip As Long: colZip = ColumnPerName("ZIP CODE")
    Dim colAdrs2 As Long: colAdrs2 = ColumnPerName("SECOND ADDRESS FIELD")
    Dim r1 As Long, r2 As Long
    Dim found As Boolean: found = False
    
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colAdrs).End(xlUp).row
    If shSL.Cells(Rows.Count, colCity).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colCity).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colState).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colState).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colZip).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colZip).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colAdrs2).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colAdrs2).End(xlUp).row
    End If
    
    For r2 = startrow To lr
        If shSL.Cells(r2, colRelCode).Value = "SPS" Or shSL.Cells(r2, colRelCode).Value = "CHD" Or shSL.Cells(r2, colRelCode).Value = "HCH" Or shSL.Cells(r2, colRelCode).Value = "STU" Or shSL.Cells(r2, colRelCode).Value = "DOM" Then
            found = False
            For r1 = startrow To lr
                If shSL.Cells(r1, colRelCode).Value = "SUB" And shSL.Cells(r2, colEmpSSN).Value = shSL.Cells(r1, colEmpSSN).Value Then
                    found = True
                End If
                If found Then
                    If Trim(shSL.Cells(r2, colAdrs).Value) <> Trim(shSL.Cells(r1, colAdrs).Value) Then ErrorHighlight (shSL.Cells(r2, colAdrs))
                    If Trim(shSL.Cells(r2, colCity).Value) <> Trim(shSL.Cells(r1, colCity).Value) Then ErrorHighlight (shSL.Cells(r2, colCity))
                    If Trim(shSL.Cells(r2, colState).Value) <> Trim(shSL.Cells(r1, colState).Value) Then ErrorHighlight (shSL.Cells(r2, colState))
                    If Trim(shSL.Cells(r2, colZip).Value) <> Trim(shSL.Cells(r1, colZip).Value) Then ErrorHighlight (shSL.Cells(r2, colZip))
                    If Trim(shSL.Cells(r2, colAdrs2).Value) <> Trim(shSL.Cells(r1, colAdrs2).Value) Then ErrorHighlight (shSL.Cells(r2, colAdrs2))
                    Exit For
                End If
            Next r1
        End If
    Next r2
    
End Sub

'   Converts commonly used and yet not allowed "Language" values to proper one:
'       English, E   ' ENG
'       Spanish, s   ' SPA
'       Chinese, Mandarin, ZHOX, c / M, CHI, CHN, c, M ' ZHO
'       Korean, Korea, K   ' KOR
'       Vietnamese, Vietnam, VIET, V   ' VIE
'       Tagalog, Philipines, Philipine, Tag, T   ' TGL
'       Other, O   ' W09
Sub CorrectLanguage()
    Dim colLang As Long: colLang = ColumnPerName("LANGUAGE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colLang).End(xlUp).row
    Call CorrectLanguagePerRecord(startrow, lr)
End Sub

Sub CorrectLanguagePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colLang As Long: colLang = ColumnPerName("LANGUAGE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shSL.Cells(i, colLang).Value
                Case "English", "ENG", "E"
                    shSL.Cells(i, colLang).Value = "ENG"
                Case "Spanish", "SPA", "S"
                    shSL.Cells(i, colLang).Value = "SPA"
                Case "Chinese", "Mandarin", "ZHO", "ZHOX", "C/M", "CHI", "CHN", "C", "M"
                    shSL.Cells(i, colLang).Value = "ZHO"
                Case "Korean", "Korea", "KOR", "K"
                    shSL.Cells(i, colLang).Value = "KOR"
                Case "Vietnamese", "Vietnam", "VIET", "VIE", "V"
                    shSL.Cells(i, colLang).Value = "VIE"
                Case "Tagalog", "Philipines", "Philipine", "Tag", "TGL", "T"
                    shSL.Cells(i, colLang).Value = "TGL"
                Case "Other", "W09", "O"
                    shSL.Cells(i, colLang).Value = "W09"
            End Select
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Language" if the value is not "ENG", "SPA", "ZHO", "KOR", "VIE", "TGL", or "W09".
Sub ValidateLanguage()
    Dim colLang As Long: colLang = ColumnPerName("LANGUAGE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colLang).End(xlUp).row
    Call ValidateLanguagePerRecord(startrow, lr)
End Sub

Sub ValidateLanguagePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colLang As Long: colLang = ColumnPerName("LANGUAGE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colLang).Value <> "" And shSL.Cells(i, colLang).Value <> "ENG" And shSL.Cells(i, colLang).Value <> "SPA" And shSL.Cells(i, colLang).Value <> "ZHO" And _
                shSL.Cells(i, colLang).Value <> "KOR" And shSL.Cells(i, colLang).Value <> "VIE" And shSL.Cells(i, colLang).Value <> "TGL" And shSL.Cells(i, colLang).Value <> "W09" Then
                ErrorHighlight (shSL.Cells(i, colLang))
            End If
            If shSL.Cells(i, colLang).Value <> "" And shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   Converts commonly used and yet not allowed "COB" values to proper one:
'       Yes   ' Y
'       no   ' N
Sub CorrectCOB()
    Dim colCOB As Long: colCOB = ColumnPerName("COB")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCOB).End(xlUp).row
    Call CorrectCOBPerRecord(startrow, lr)
End Sub

Sub CorrectCOBPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCOB As Long: colCOB = ColumnPerName("COB")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case UCase(shSL.Cells(i, colCOB).Value)
                Case "YES", "Y"
                    shSL.Cells(i, colCOB).Value = "Y"
                Case "NO", "N"
                    shSL.Cells(i, colCOB).Value = "N"
            End Select
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "COB" if the value is not "Y", "N" or blank.
Sub ValidateCOB()
    Dim colCOB As Long: colCOB = ColumnPerName("COB")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCOB).End(xlUp).row
    Call ValidateCOBPerRecord(startrow, lr)
End Sub

Sub ValidateCOBPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colCOB As Long: colCOB = ColumnPerName("COB")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colCOB).Value <> "" And shSL.Cells(i, colCOB).Value <> "Y" And shSL.Cells(i, colCOB).Value <> "N" Then
                ErrorHighlight (shSL.Cells(i, colCOB))
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   Converts the following special characters to space:
'       ! @ # $ % ^ & * ( ) - _ = + [ ] { } \ / | ; ' : " , . < > ? ` ~
Sub CorrectCity()
    Dim colCity As Long: colCity = ColumnPerName("CITY")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCity).End(xlUp).row
    Call CorrectCityPerRecord(startrow, lr)
End Sub

Sub CorrectCityPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCity As Long: colCity = ColumnPerName("CITY")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colCity).Value = Trim(ChangeSpecialCharToSpace(shSL.Cells(i, colCity).Value, "! @ # $ % ^ & * ( ) - _ = + [ ] { } \ / | ; ' : "" , . < > ? ` ~"))
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "City" if any character found in the string other than letters or space
Sub ValidateCity()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colCity As Long: colCity = ColumnPerName("CITY")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCity).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateCityPerRecord(startrow, lr)
End Sub

Sub ValidateCityPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colCity As Long: colCity = ColumnPerName("CITY")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colCity).Value <> "" Then
                If Not IsLetterOrSpace((shSL.Cells(i, colCity).Value)) Then
                    ErrorHighlight (shSL.Cells(i, colCity))
                End If
                If shSL.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
            End If
        Next i
    End If
End Sub

'   Does a lookup on data sheet and converts the full state name to abbreviation.
Sub CorrectState()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName("STATE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colState).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call CorrectStatePerRecord(startrow, lr)
End Sub

Sub CorrectStatePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName("STATE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If WorksheetFunction.CountIf(shData.Range(shData.Cells(10, 8), shData.Cells(60, 8)), Trim(shSL.Cells(i, colState).Value)) > 0 Then
                shSL.Cells(i, colState).Value = WorksheetFunction.Index(shData.Range(shData.Cells(10, 7), shData.Cells(60, 7)), WorksheetFunction.Match(Trim(shSL.Cells(i, colState).Value), shData.Range(shData.Cells(10, 8), shData.Cells(60, 8)), 0))
            Else
                shSL.Cells(i, colState).Value = Trim(shSL.Cells(i, colState).Value)
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   If State abbreviation is not found on the data sheet, the "State" field is highlighted.
Sub ValidateState()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName("STATE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colState).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateStatePerRecord(startrow, lr)
End Sub

Sub ValidateStatePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName("STATE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colState).Value <> "" Then
                If WorksheetFunction.CountIf(shData.Range(shData.Cells(10, 7), shData.Cells(60, 7)), shSL.Cells(i, colState).Value) = 0 Then
                    ErrorHighlight (shSL.Cells(i, colState))
                End If
                If shSL.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Zip Code" if
'       Left blank
'       Not numeric
'       Not a whole number
'       Not between 1 and 99999
Sub ValidateZip()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colZip As Long: colZip = ColumnPerName("ZIP CODE")
    Dim colRel As Long: colRel = ColumnPerName("RELATIONSHIP CODE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colZip).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateZipPerRecord(startrow, lr, colZip, colRel)
End Sub


Sub ValidateZipPerRecord(ByVal startR As Long, ByVal endR As Long, Optional ByVal colZip As Long, Optional ByVal colRel As Long)
    'Dim colZip As Long: colZip = ColumnPerName("ZIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colRel).Value = "SUB" Then
            Dim valZip As Variant: valZip = shSL.Cells(i, colZip).Value
            If Trim(valZip) = "" Or Not IsNumeric(valZip) Or valZip < 1 Or valZip > 99999 Then
                ErrorHighlight (shSL.Cells(i, colZip))
            ElseIf IsNumeric(valZip) Then
                If valZip - Int(valZip) <> 0 Then
                    ErrorHighlight (shSL.Cells(i, colZip))
                End If
            End If
            End If
        Next i
    End If
End Sub

'   It removes the following special characters:
'       ! @ # $ % ^ & * ( ) _ = + [ ] { } \ / | ; ' : " , . < > ? ` ~ and space
Sub CorrectDepNo()
    Dim colDepNo As Long: colDepNo = ColumnPerName("DEPARTMENT NUMBER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDepNo).End(xlUp).row
    Call CorrectDepNoPerRecord(startrow, lr)
End Sub

Sub CorrectDepNoPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDepNo As Long: colDepNo = ColumnPerName("DEPARTMENT NUMBER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colDepNo).NumberFormat = "@"
            shSL.Cells(i, colDepNo).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colDepNo).Value, "! @ # $ % ^ & * ( ) _ = + [ ] { } \ / | ; ' : "" , . < > ? ` ~", False))
             
        Next i
    End If
End Sub

Sub ValidateDepNo()
    Dim colDepNo As Long: colDepNo = ColumnPerName("DEPARTMENT NUMBER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDepNo).End(xlUp).row
    Call ValidateDepNoPerRecord(startrow, lr)
End Sub

Sub ValidateDepNoPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colDepNo As Long: colDepNo = ColumnPerName("DEPARTMENT NUMBER")
    Dim lr As Long: lr = endR
    Dim i As Long
    Dim j As Long
    Dim found As Boolean
    If lr >= startR Then
        For i = startR To lr
            For j = 18 To 47
                found = False
                If shSL.Cells(i, colDepNo).Value = "" Then
                    found = True
                    Exit For
                End If
                If shSL.Cells(i, colDepNo).Value <> "" And shSL.Cells(i, colDepNo).Value = shOUO.Range("B" & j).Value Then
                    found = True
                End If
                If found Then Exit For
            Next j
            If Not found Then ErrorHighlight (shSL.Cells(i, colDepNo))
        Next i
    End If
End Sub

'   It removes the following special characters:
'       ! @ # $ % ^ & * ( ) _ = + [ ] { } \ / | ; ' : " , . < > ? ` ~ and space
Sub CorrectEmpNo()
    Dim colEmpNo As Long: colEmpNo = ColumnPerName("EMPLOYEE NUMBER")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colEmpNo).End(xlUp).row
    Call CorrectEmpNoPerRecord(startrow, lr)
End Sub

Sub CorrectEmpNoPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpNo As Long: colEmpNo = ColumnPerName("EMPLOYEE NUMBER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colEmpNo).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colEmpNo).Value, "! @ # $ % ^ & * ( ) _ = + [ ] { } \ / | ; ' : "" , . < > ? ` ~", False))
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateEmpNo()
    Call ValidateAgainstSSN("EMPLOYEE NUMBER")
End Sub

Sub ValidateEmpNoPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("EMPLOYEE NUMBER", startR, endR)
End Sub
Sub CorrectEffDate()
    Dim colDate As Long: colDate = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDate).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Dim i As Long
     For i = startrow To lr
        If Trim(shSL.Cells(i, colDate).Value) = "" Then shSL.Cells(i, colDate).Value = shOUO.Range("B4").Value
     Next
End Sub
'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Member SSN" if Member SSN is blank and "Effective Date for Coverage" is 1/1/16 or later.
'   Highlights "Effective Date for Coverage" if
'       It is earlier than "DOH".
'       Not a date format.
Sub ValidateEffDate()
    Dim colDate As Long: colDate = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDate).End(xlUp).row
    If shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateEffDatePerRecord(startrow, lr)
End Sub

Sub ValidateEffDatePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDate As Long: colDate = ColumnPerName("EFFECTIVE DATE FOR COVERAGE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim colDOH As Long: colDOH = ColumnPerName("DATE OF HIRE")
    Dim colMemSSN As Long: colMemSSN = ColumnPerName("MEMBER SSN")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            On Error Resume Next
            If Not IsDate(shSL.Cells(i, colDate).Value) Then
                ErrorHighlight (shSL.Cells(i, colDate))
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateMedicalProduct()
    Dim colMed As Long: colMed = ColumnPerName("MEDICAL PRODUCT")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colMed).End(xlUp).row
    If lr >= startrow Then
        Call ValidateMedicalProductPerRecord(startrow, lr)
    End If
End Sub

Sub ValidateMedicalProductPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colMed As Long: colMed = ColumnPerName("MEDICAL PRODUCT")
    Dim i As Long
    For i = startR To endR
        shSL.Cells(i, colMed).Value = Trim(shSL.Cells(i, colMed).Value)
        On Error GoTo EndCheck
        shSL.Cells(i, colMed).Value = WorksheetFunction.VLookup(shSL.Cells(i, colMed).Value, shData.Range("DP:DQ"), 2, False)
        
        '    Check Single vs Family for CA SG
        If UCase(shData.Range("grp").Value) = "SMALL" And UCase(shData.Range("State").Value) = "CALIFORNIA" Then
            If WorksheetFunction.VLookup(Left(shSL.Cells(i, colMed).Offset(, 1).Value, 4), shSF.Range("A:B"), 2, False) = "S" Then 'And _
                'WorksheetFunction.CountIf(shSL.Range(Col_Letter(ColumnPerName("EMPLOYEES SOCIAL")) & ":" & Col_Letter(ColumnPerName("EMPLOYEES SOCIAL"))), shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value) > 1 Then
                ErrorHighlight (shSL.Cells(i, colMed))
            ElseIf WorksheetFunction.VLookup(Left(shSL.Cells(i, colMed).Offset(, 1).Value, 4), shSF.Range("A:B"), 2, False) = "F" And _
                WorksheetFunction.CountIf(shSL.Range(Col_Letter(ColumnPerName("EMPLOYEES SOCIAL")) & ":" & Col_Letter(ColumnPerName("EMPLOYEES SOCIAL"))), shSL.Cells(i, ColumnPerName("EMPLOYEES SOCIAL")).Value) <= 1 Then
                ErrorHighlight (shSL.Cells(i, colMed))
            End If
        End If
    Next i
EndCheck:
    Call ValidateAgainstSSNPerRecord("MEDICAL PRODUCT", startR, endR)

End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   If the census is not for CO SG then highlights "Primary Care Physician" field if
'       Medical product is blank and PCP has value.
'       The product name does not have HMO and PCP has value.
Sub ValidatePCP()
    Dim colMedProd As Long: colMedProd = ColumnPerName("MEDICAL PRODUCT")
    Dim colPCP As Long: colPCP = ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colMedProd).End(xlUp).row
    If shSL.Cells(Rows.Count, colPCP).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colPCP).End(xlUp).row
    End If
    Call ValidatePCPPerRecord(startrow, lr)
End Sub

Sub ValidatePCPPerRecord(ByVal startR As Long, ByVal endR As Long)
    If Not (shData.Range("Grp").Value = "Small" And shData.Range("state").Value = "COLORADO") Then
        Dim colMedProd As Long: colMedProd = ColumnPerName("MEDICAL PRODUCT")
        Dim colPCP As Long: colPCP = ColumnPerName("PRIMARY CARE PHYSICIAN ID (PCP)")
        Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
        Dim lr As Long: lr = endR
        Dim i As Long
        Dim str As String
        If lr >= startR Then
            For i = startR To lr
                If shSL.Cells(i, colMedProd).Value = "" Then
                    If shSL.Cells(i, colPCP).Value <> "" Then
                        ErrorHighlight (shSL.Cells(i, colPCP))
                    End If
                Else
                    On Error Resume Next
                    str = WorksheetFunction.Index(shData.Range("DP:DP"), WorksheetFunction.Match(shSL.Cells(i, colMedProd).Value, shData.Range("DQ:DQ"), 0))
                    If InStr(1, str, "HMO", vbTextCompare) = 0 And shSL.Cells(i, colPCP).Value <> "" Then
                        ErrorHighlight (shSL.Cells(i, colPCP))
                    ElseIf InStr(1, str, "HMO", vbTextCompare) > 0 Then
                        If Len(shSL.Cells(i, colPCP).Value) <> 3 And Len(shSL.Cells(i, colPCP).Value) <> 6 Then
                            ErrorHighlight (shSL.Cells(i, colPCP))
                        ElseIf InStr(1, shSL.Cells(i, colPCP).Value, "O", vbTextCompare) > 0 Then
                            ErrorHighlight (shSL.Cells(i, colPCP))
                        End If
                        If Len(shSL.Cells(i, colPCP).Value) = 6 Then
                            If Not IsNumeric(Right(shSL.Cells(i, colPCP).Value, 3)) Then ErrorHighlight (shSL.Cells(i, colPCP))
                        End If
                    End If
                End If
                If shSL.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
            Next i
        End If
    End If
End Sub

'   Converts commonly used and yet not allowed "Current PCP" values to proper one:
'       Yes   ' Y
'       no   ' N
Sub CorrectCurrentPCP()
    Dim colPCP As Long: colPCP = ColumnPerName("CURRENT PCP")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colPCP).End(xlUp).row
    Call CorrectCurrentPCPPerRecord(startrow, lr)
End Sub

Sub CorrectCurrentPCPPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colPCP As Long: colPCP = ColumnPerName("CURRENT PCP")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colPCP).Value = "Yes" Then
                shSL.Cells(i, colPCP).Value = "Y"
            ElseIf shSL.Cells(i, colPCP).Value = "No" Then
                shSL.Cells(i, colPCP).Value = "N"
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   If the census is not for CO SG then highlights "Current PCP" field if
'       Medical product is blank and Current PCP has value.
'       The product name does not have HMO and Current PCP has value.
'       The product name has "HMO" but the Current PCP is anything other than "Y", "N", or space.
Sub ValidateCurrentPCP()
    Dim colMedProd As Long: colMedProd = ColumnPerName("MEDICAL PRODUCT")
    Dim colPCP As Long: colPCP = ColumnPerName("CURRENT PCP")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colMedProd).End(xlUp).row
    If shSL.Cells(Rows.Count, colPCP).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colPCP).End(xlUp).row
    End If
    Call ValidateCurrentPCPPerRecord(startrow, lr)
End Sub

Sub ValidateCurrentPCPPerRecord(ByVal startR As Long, ByVal endR As Long)
    If Not (shData.Range("Grp").Value = "Small" And shData.Range("state").Value = "COLORADO") Then
        Dim colMedProd As Long: colMedProd = ColumnPerName("MEDICAL PRODUCT")
        Dim colPCP As Long: colPCP = ColumnPerName("CURRENT PCP")
        Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
        Dim lr As Long: lr = endR
        Dim i As Long
        Dim str As String
        If lr >= startR Then
            For i = startR To lr
                If shSL.Cells(i, colMedProd).Value = "" Then
                    If shSL.Cells(i, colPCP).Value <> "" Then
                        ErrorHighlight (shSL.Cells(i, colPCP))
                    End If
                Else
                    On Error Resume Next
                    str = WorksheetFunction.Index(shData.Range("DP:DP"), WorksheetFunction.Match(shSL.Cells(i, colMedProd).Value, shData.Range("DQ:DQ"), 0))
                    If InStr(1, str, "HMO", vbTextCompare) = 0 And shSL.Cells(i, colPCP).Value <> "" Then
                        ErrorHighlight (shSL.Cells(i, colPCP))
                    ElseIf InStr(1, str, "HMO", vbTextCompare) > 0 And shSL.Cells(i, colPCP).Value <> "" And _
                            shSL.Cells(i, colPCP).Value <> "Y" And shSL.Cells(i, colPCP).Value <> "N" Then
                        ErrorHighlight (shSL.Cells(i, colPCP))
                    End If
                End If
                If shSL.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colEmpSSN))
                End If
            Next i
        End If
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateDentalProduct()
    Dim ColProd As Long: ColProd = ColumnPerName("DENTAL PRODUCT")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateDentalProductPerRecord(startrow, lr)
    End If
End Sub

Sub ValidateDentalProductPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim ColProd As Long: ColProd = ColumnPerName("DENTAL PRODUCT")
    Dim i As Long
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        On Error Resume Next
        shSL.Cells(i, ColProd).Value = WorksheetFunction.VLookup(shSL.Cells(i, ColProd).Value, shData.Range("DS:DT"), 2, False)
    Next i
    Call ValidateAgainstSSNPerRecord("DENTAL PRODUCT", startR, endR)
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'   Highlights "Dental Office" field if
'       Dental product is blank and Dental Office has value.
'       The product name does not have HMO and Dental Office has value.
Sub ValidateDentalOffice()
    Dim colDentProd As Long: colDentProd = ColumnPerName("DENTAL PRODUCT")
    Dim colDentOfc As Long: colDentOfc = ColumnPerName("DENTAL OFFICE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colDentProd).End(xlUp).row
    If shSL.Cells(Rows.Count, colDentOfc).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colDentOfc).End(xlUp).row
    End If
    Call ValidateDentalOfficePerRecord(startrow, lr)
End Sub

Sub ValidateDentalOfficePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDentProd As Long: colDentProd = ColumnPerName("DENTAL PRODUCT")
    Dim colDentOfc As Long: colDentOfc = ColumnPerName("DENTAL OFFICE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    Dim str As String
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colDentProd).Value = "" Then
                If shSL.Cells(i, colDentOfc).Value <> "" Then
                    ErrorHighlight (shSL.Cells(i, colDentOfc))
                End If
            Else
                On Error Resume Next
                str = WorksheetFunction.Index(shData.Range("DS:DS"), WorksheetFunction.Match(shSL.Cells(i, colDentProd).Value, shData.Range("DT:DT"), 0))
                If InStr(1, str, "HMO", vbTextCompare) = 0 And shSL.Cells(i, colDentOfc).Value <> "" Then
                    ErrorHighlight (shSL.Cells(i, colDentOfc))
                End If
            End If
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateVisionProduct()
    Dim ColProd As Long: ColProd = ColumnPerName("VISION PRODUCT")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateVisionProductPerRecord(startrow, lr)
    End If
End Sub

Sub ValidateVisionProductPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim ColProd As Long: ColProd = ColumnPerName("VISION PRODUCT")
    Dim i As Long
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        On Error Resume Next
        shSL.Cells(i, ColProd).Value = WorksheetFunction.VLookup(shSL.Cells(i, ColProd).Value, shData.Range("DV:DW"), 2, False)
    Next i
    Call ValidateAgainstSSNPerRecord("VISION PRODUCT", startR, endR)
End Sub


'   If data is entered, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
Sub ValidateFSAProduct()
Dim ColProd As Long
Dim lr As Long
    'FSA 1
    ColProd = ColumnPerName("FULL HEALTHCARE")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateFSAProductPerRecord(startrow, lr, ColProd)
    End If
    'FSA 2
    ColProd = ColumnPerName("LIMITED PURPOSE")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateFSAProductPerRecord(startrow, lr, ColProd)
    End If
    'FSA 3
     ColProd = ColumnPerName("DEPENDENT CARE")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateFSAProductPerRecord(startrow, lr, ColProd)
    End If
    'FSA 4
    ColProd = ColumnPerName("COMMUTER TRANSIT")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateFSAProductPerRecord(startrow, lr, ColProd)
    End If
    'FSA 5
    ColProd = ColumnPerName("COMMUTER PARKING")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        Call ValidateFSAProductPerRecord(startrow, lr, ColProd)
    End If
End Sub

Sub ValidateFSAProductPerRecord(ByVal startR As Long, ByVal endR As Long, ByVal ColProd As Long)
    
    Dim i As Long
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        On Error Resume Next
        shSL.Cells(i, ColProd).Value = WorksheetFunction.VLookup(shSL.Cells(i, ColProd).Value, shData.Range("NH:NI"), 2, False)
    Next i
    Call ValidateAgainstSSNPerRecord("FSA PRODUCT", startR, endR)
End Sub


'   If data is entered on any of the following fields, checks if "Employee Social" has a value. If "Employee Social" is blank, it highlights the "Employee Social" field.
'       "STD"
'       "LTD"
'       "Voluntary STD"
'       "Voluntary LTD"
'       "Buy-Up LTD"
'       "Job Title"
'       "Salary"
Sub ValidateDisabilityProducts()
    Dim ColProd As Long: ColProd = ColumnPerName("STD")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    Dim i As Long
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If
    
    ColProd = ColumnPerName("LTD")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If

    ColProd = ColumnPerName("VOLUNTARY STD")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If

    ColProd = ColumnPerName("VOLUNTARY LTD")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If

    ColProd = ColumnPerName("BUY-UP LTD")
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If
    
    Call ValidateAgainstSSN("STD")
    Call ValidateAgainstSSN("LTD")
    Call ValidateAgainstSSN("VOLUNTARY STD")
    Call ValidateAgainstSSN("VOLUNTARY LTD")
    Call ValidateAgainstSSN("BUY-UP LTD")
    Call ValidateAgainstSSN("JOB TITLE")
    Call ValidateAgainstSSN("SALARY")
End Sub

Sub ValidateDisabilityProductsPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim i As Long
    Dim ColProd As Long: ColProd = ColumnPerName("STD")
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
    Next i
    
    ColProd = ColumnPerName("LTD")
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
    Next i
    
    ColProd = ColumnPerName("VOLUNTARY STD")
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
    Next i
    
    ColProd = ColumnPerName("VOLUNTARY LTD")
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
    Next i
    
    ColProd = ColumnPerName("BUY-UP LTD")
    For i = startR To endR
        shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
    Next i
    
    Call ValidateAgainstSSNPerRecord("STD", startR, endR)
    Call ValidateAgainstSSNPerRecord("LTD", startR, endR)
    Call ValidateAgainstSSNPerRecord("VOLUNTARY STD", startR, endR)
    Call ValidateAgainstSSNPerRecord("VOLUNTARY LTD", startR, endR)
    Call ValidateAgainstSSNPerRecord("BUY-UP LTD", startR, endR)
    Call ValidateAgainstSSNPerRecord("JOB TITLE", startR, endR)
    Call ValidateAgainstSSNPerRecord("SALARY", startR, endR)
End Sub

'   Highlights "Job Title" field if
'       "LTD" has value and "Job Title" is blank.
'       "Voluntary LTD" has value and "Job Title" is blank.
'       "Buy-Up LTD" has value and "Job Title" is blank.
Sub ValidateDisabilityJobTitle()
    Dim colLTD As Long: colLTD = ColumnPerName("LTD")
    Dim colVLTD As Long: colVLTD = ColumnPerName("VOLUNTARY LTD")
    Dim colBULTD As Long: colBULTD = ColumnPerName("BUY-UP LTD")
    Dim colJob As Long: colJob = ColumnPerName("JOB TITLE")
    
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colLTD).End(xlUp).row
    If shSL.Cells(Rows.Count, colVLTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colVLTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colBULTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colBULTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colJob).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colJob).End(xlUp).row
    End If
    Call ValidateDisabilityJobTitlePerRecord(startrow, lr)
End Sub

Sub ValidateDisabilityJobTitlePerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colLTD As Long: colLTD = ColumnPerName("LTD")
    Dim colVLTD As Long: colVLTD = ColumnPerName("VOLUNTARY LTD")
    Dim colBULTD As Long: colBULTD = ColumnPerName("BUY-UP LTD")
    Dim colJob As Long: colJob = ColumnPerName("JOB TITLE")
    
    Dim lr As Long: lr = endR
    
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If (shSL.Cells(i, colLTD).Value <> "" Or _
                shSL.Cells(i, colVLTD).Value <> "" Or _
                shSL.Cells(i, colBULTD).Value <> "") _
                And _
                shSL.Cells(i, colJob).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colJob))
            End If
        Next i
    End If
End Sub

'   It removes the following special characters:
'       - , ' _ ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : " / < > ? ` ~ and space
'   Highlights "Salary" field, if any of the disability selected and Salary is not numeric or blank.
Sub ValidateDisabilitySalary()
    Dim colSTD As Long: colSTD = ColumnPerName("STD")
    Dim colLTD As Long: colLTD = ColumnPerName("LTD")
    Dim colVSTD As Long: colVSTD = ColumnPerName("VOLUNTARY STD")
    Dim colVLTD As Long: colVLTD = ColumnPerName("VOLUNTARY LTD")
    Dim colBULTD As Long: colBULTD = ColumnPerName("BUY-UP LTD")
    Dim colSalary As Long: colSalary = ColumnPerName("SALARY")
    
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colSTD).End(xlUp).row
    If shSL.Cells(Rows.Count, colLTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colLTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colVSTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colVSTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colVLTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colVLTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colBULTD).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colBULTD).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colSalary).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colSalary).End(xlUp).row
    End If
    Call ValidateDisabilitySalaryPerRecord(startrow, lr)
End Sub

Sub ValidateDisabilitySalaryPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colSTD As Long: colSTD = ColumnPerName("STD")
    Dim colLTD As Long: colLTD = ColumnPerName("LTD")
    Dim colVSTD As Long: colVSTD = ColumnPerName("VOLUNTARY STD")
    Dim colVLTD As Long: colVLTD = ColumnPerName("VOLUNTARY LTD")
    Dim colBULTD As Long: colBULTD = ColumnPerName("BUY-UP LTD")
    Dim colSalary As Long: colSalary = ColumnPerName("SALARY")
    
    Dim lr As Long: lr = endR
    
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shSL.Cells(i, colSalary).Value = Trim(RemoveSpecialChar(shSL.Cells(i, colSalary).Value, "- , ' _ ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : "" / < > ? ` ~", False))
            If (shSL.Cells(i, colSTD).Value <> "" Or _
                shSL.Cells(i, colLTD).Value <> "" Or _
                shSL.Cells(i, colVSTD).Value <> "" Or _
                shSL.Cells(i, colVLTD).Value <> "" Or _
                shSL.Cells(i, colBULTD).Value <> "") _
                And _
                (Not IsNumeric(shSL.Cells(i, colSalary).Value) Or _
                shSL.Cells(i, colSalary).Value = "") Then
                    ErrorHighlight (shSL.Cells(i, colSalary))
'            ElseIf (shSL.Cells(i, colSTD).Value = "" And _
'                shSL.Cells(i, colLTD).Value = "" And _
'                shSL.Cells(i, colVSTD).Value = "" And _
'                shSL.Cells(i, colVLTD).Value = "" And _
'                shSL.Cells(i, colBULTD).Value = "") _
'                And _
'                Trim(shSL.Cells(i, colSalary).Value) <> "" Then
'                    ErrorHighlight (shSL.Cells(i, colSalary))
            End If
        Next i
    End If
End Sub

'   If "Group Type" is "C" then highlights
'       "Cobra Start Date" if left blank
'       "Cobra Qualifying Event" if left blank.
'   If "Group Type" is not "C" then highlights
'       "Cobra Start Date" if not blank
'       "Cobra Qualifying Event" if not blank.
Sub ValidateCobra()
    Dim colCSD As Long: colCSD = ColumnPerName("COBRA START DATE")
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCSD).End(xlUp).row
    If shSL.Cells(Rows.Count, colCQE).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colCQE).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colGrpType).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colGrpType).End(xlUp).row
    End If
    Call ValidateCobraPerRecord(startrow, lr)
End Sub

Sub ValidateCobraPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCSD As Long: colCSD = ColumnPerName("COBRA START DATE")
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim lr As Long: lr = endR
    
    Dim i As Long
    If lr >= startR Then
        On Error Resume Next
        For i = startR To lr
            If shSL.Cells(i, colGrpType).Value = "C" Then
                If shSL.Cells(i, colCSD).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colCSD))
                End If
                If shSL.Cells(i, colCQE).Value = "" Then
                    ErrorHighlight (shSL.Cells(i, colCQE))
                End If
            Else
                If shSL.Cells(i, colCSD).Value <> "" Then
                    ErrorHighlight (shSL.Cells(i, colCSD))
                End If
                If shSL.Cells(i, colCQE).Value <> "" Then
                    ErrorHighlight (shSL.Cells(i, colCQE))
                End If
            End If
        Next i
    End If
End Sub

'   Highlights "Cobra Start Date", if "Group Type" is "C", "Cobra Start Date" is not blank and not in a date format.
Sub ValidateCobraStartDate()
    Dim colCSD As Long: colCSD = ColumnPerName("COBRA START DATE")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCSD).End(xlUp).row
    Call ValidateCobraStartDatePerRecord(startrow, lr)
End Sub

Sub ValidateCobraStartDatePerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("COBRA START DATE", startR, endR)
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim colCSD As Long: colCSD = ColumnPerName("COBRA START DATE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colGrpType).Value = "C" Then
                On Error Resume Next
                If shSL.Cells(i, colCSD).Value <> "" And Not IsDate(shSL.Cells(i, colCSD).Value) Then
                    ErrorHighlight (shSL.Cells(i, colCSD))
                End If
            End If
        Next i
    End If
End Sub

'   Maps selected "Cobra Qualifying Event" code and the description
Sub CorrectQualifyingEvent()
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCQE).End(xlUp).row
    Call CorrectQualifyingEventPerRecord(startrow, lr)
End Sub

Sub CorrectQualifyingEventPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            On Error Resume Next
            shSL.Cells(i, colCQE) = WorksheetFunction.Index(shData.Range("DG:DG"), WorksheetFunction.Match(shSL.Cells(i, colCQE), shData.Range("DH:DH"), 0))
        Next i
    End If
End Sub

'   Highlights "Cobra Qualifying Event", if "Group Type" is "C", "Cobra Qualifying Event" is not blank and no match found on the mapping.
Sub ValidateQualifyingEvent()
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colCQE).End(xlUp).row
End Sub

Sub ValidateQualifyingEventPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("COBRA QUALIFYING EVENT", startR, endR)
    Dim colGrpType As Long: colGrpType = ColumnPerName("GROUP TYPE")
    Dim colCQE As Long: colCQE = ColumnPerName("COBRA QUALIFYING EVENT")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colGrpType).Value = "C" And shSL.Cells(i, colCQE).Value <> "" Then
                On Error Resume Next
                If WorksheetFunction.IsNA(WorksheetFunction.VLookup(shSL.Cells(i, colCQE), shData.Range("DG:DG"), 1, False)) <> False Then
                    ErrorHighlight (shSL.Cells(i, colCQE))
                End If
            End If
        Next i
    End If
End Sub

'   Checks if all three medicare fields ("Medicare HIB ID", "Part A Effective date", and "Part B Effective date) have values or none of them. If only some of them have values and some are blank then it highlights the all three fields.
'   Highlights "Medicare Part A Effective Date" if not a in a date format.
'   Highlights "Medicare Part B Effective Date" if not a in a date format.
Sub ValidateMedicare()
    Dim colHIB As Long: colHIB = ColumnPerName("MEDICARE HIB ID")
    Dim colPartA As Long: colPartA = ColumnPerName("MEDICARE PART A EFF DATE")
    'Dim colPartB As Long: colPartB = ColumnPerName("MEDICARE PART B EFF DATE")
    
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colHIB).End(xlUp).row
    If shSL.Cells(Rows.Count, colPartA).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colPartA).End(xlUp).row
    End If
    If shSL.Cells(Rows.Count, colPartA).End(xlUp).row > lr Then
        lr = shSL.Cells(Rows.Count, colPartA).End(xlUp).row
    End If
    Call ValidateMedicarePerRecord(startrow, lr)
End Sub

Sub ValidateMedicarePerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("MEDICARE HIB ID", startR, endR)
    Call ValidateAgainstSSNPerRecord("MEDICARE PART A EFF DATE", startR, endR)
    'Call ValidateAgainstSSNPerRecord("MEDICARE PART B EFF DATE", startR, endR)
    Dim colHIB As Long: colHIB = ColumnPerName("MEDICARE HIB ID")
    Dim colPartA As Long: colPartA = ColumnPerName("MEDICARE PART A EFF DATE")
    'Dim colPartB As Long: colPartB = ColumnPerName("MEDICARE PART B EFF DATE")
    Dim i As Long
    
    Dim lr As Long: lr = endR
    
    If lr >= startR Then
        For i = startR To lr
            If WorksheetFunction.CountA(shSL.Cells(i, colHIB), shSL.Cells(i, colPartA), shSL.Cells(i, colPartA)) <> 0 And _
               WorksheetFunction.CountA(shSL.Cells(i, colHIB), shSL.Cells(i, colPartA), shSL.Cells(i, colPartA)) <> 3 Then
                    ErrorHighlight (shSL.Cells(i, colHIB))
                    ErrorHighlight (shSL.Cells(i, colPartA))
                    'ErrorHighlight (shSL.Cells(i, colPartB))
            Else
                shSL.Cells(i, colHIB).Interior.Pattern = xlNone
                shSL.Cells(i, colPartA).Interior.Pattern = xlNone
                'shSL.Cells(i, colPartA).Interior.Pattern = xlNone
            End If
            
            If Not IsDate(shSL.Cells(i, colPartA)) And Not shSL.Cells(i, colPartA) = "" Then
                ErrorHighlight (shSL.Cells(i, colPartA))
            End If
            'If Not IsDate(shSL.Cells(i, colPartB)) And Not shSL.Cells(i, colPartB) = "" Then
                'ErrorHighlight (shSL.Cells(i, colPartB))
           ' End If
        Next i
    End If
End Sub

Sub CorrectLifeADDSuffixes()
    Call CorrectLifeADDSuffixesSubProcedure("BASIC LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("OPTIONAL LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("VOLUNTARY LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("BASIC DEP LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("OPTIONAL DEP LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("VOLUNTARY DEP LIFE")
    Call CorrectLifeADDSuffixesSubProcedure("BASIC AD&D")
    Call CorrectLifeADDSuffixesSubProcedure("OPTIONAL AD&D")
    Call CorrectLifeADDSuffixesSubProcedure("VOLUNTARY AD&D")
    Call CorrectLifeADDSuffixesSubProcedure("BASIC DEP AD&D")
    Call CorrectLifeADDSuffixesSubProcedure("OPTIONAL DEP AD&D")
    Call CorrectLifeADDSuffixesSubProcedure("VOLUNTARY DEP AD&D")
End Sub

Sub CorrectLifeADDSuffixesSubProcedure(ByVal prodName As String)
    Dim i As Long, lr As Long
    Dim ColProd As Long: ColProd = ColumnPerName(prodName)
    lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    If lr >= startrow Then
        For i = startrow To lr
            shSL.Cells(i, ColProd).Value = Trim(shSL.Cells(i, ColProd).Value)
        Next i
    End If
End Sub

Sub ValidateBasicLife()
    Call ValidateLife("BASIC LIFE", "EN")
End Sub
Sub ValidateOptionalLife()
    Call ValidateLife("OPTIONAL LIFE", "EO")
End Sub
Sub ValidateVoluntaryLife()
    Call ValidateLife("VOLUNTARY LIFE", "EP")
End Sub
Sub ValidateBasicDepLife()
    Call ValidateLife("BASIC DEP LIFE", "EQ")
End Sub
Sub ValidateOptionalDepLife()
    Call ValidateLife("OPTIONAL DEP LIFE", "ER")
End Sub
Sub ValidateVoluntaryDepLife()
    Call ValidateLife("VOLUNTARY DEP LIFE", "ES")
End Sub

Sub ValidateBasicADD()
    Call ValidateLife("BASIC AD&D", "EU")
End Sub
Sub ValidateOptionalADD()
    Call ValidateLife("OPTIONAL AD&D", "EV")
End Sub
Sub ValidateVoluntaryADD()
    Call ValidateLife("VOLUNTARY AD&D", "EW")
End Sub
Sub ValidateBasicDepADD()
    Call ValidateLife("BASIC DEP AD&D", "EX")
End Sub
Sub ValidateOptionalDepADD()
    Call ValidateLife("OPTIONAL DEP AD&D", "EY")
End Sub
Sub ValidateVoluntaryDepADD()
    Call ValidateLife("VOLUNTARY DEP AD&D", "EZ")
End Sub

Sub ValidateLife(ByVal prod As String, ByVal adrs As String)
    Call ValidateAgainstSSN(prod)
    Dim colLife As Long: colLife = ColumnPerName(prod)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colLife).End(xlUp).row
    Dim lrLife As Long: lrLife = shData.Range(adrs & Rows.Count).End(xlUp).row
    Dim i As Long, j As Long
    Dim found As Boolean: found = False
    If lr >= startrow Then
        For i = startrow To lr
            found = False
            If shSL.Cells(i, colLife).Value <> "" Then
                For j = 3 To lrLife
                    On Error Resume Next
                    If shSL.Cells(i, colLife).Value = shData.Range(adrs & j).Value Then
                        found = True
                        Exit For
                    End If
                Next j
            End If
            If shSL.Cells(i, colLife).Value <> "" And Not found Then
                ErrorHighlight (shSL.Cells(i, colLife))
            End If
        Next i
    End If
End Sub

Sub ValidateLifePerRecord(ByVal prod As String, ByVal adrs As String, ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord(prod, startR, endR)
    Dim colLife As Long: colLife = ColumnPerName(prod)
    Dim lr As Long: lr = endR
    Dim lrLife As Long: lrLife = shData.Range(adrs & Rows.Count).End(xlUp).row
    Dim i As Long, j As Long
    Dim found As Boolean: found = False
    If lr >= startR Then
        For i = startR To lr
            found = False
            If shSL.Cells(i, colLife).Value <> "" Then
                For j = 3 To lrLife
                    On Error Resume Next
                    If shSL.Cells(i, colLife).Value = shData.Range(adrs & j).Value Then
                        found = True
                        Exit For
                    End If
                Next j
            End If
            If shSL.Cells(i, colLife).Value <> "" And Not found Then
                ErrorHighlight (shSL.Cells(i, colLife))
            End If
        Next i
    End If
End Sub

Sub ValidateVolumes()
    Call ValidateVolumeAndMultiplier("BASIC VOLUME", "BASIC LIFE")
    Call ValidateVolumeAndMultiplier("OPTIONAL VOLUME", "OPTIONAL LIFE")
    Call ValidateVolumeAndMultiplier("VOLUNTARY VOLUME", "VOLUNTARY LIFE")
    Call ValidateVolumeAndMultiplier("AD&D BASIC VOLUME", "BASIC AD&D")
    Call ValidateVolumeAndMultiplier("AD&D OPTIONAL VOLUME", "OPTIONAL AD&D")
    Call ValidateVolumeAndMultiplier("AD&D VOLUNTARY VOLUME", "VOLUNTARY AD&D")
    Call ValidateVolumeAndMultiplier("BASIC SUB VOLUME", "BASIC DEP LIFE")
    Call ValidateVolumeAndMultiplier("BASIC SPOUSE VOLUME", "BASIC DEP LIFE")
    Call ValidateVolumeAndMultiplier("BASIC CHILD(REN) VOLUME", "BASIC DEP LIFE")
    Call ValidateVolumeAndMultiplier("OPTIONAL SUB VOLUME", "OPTIONAL DEP LIFE")
    Call ValidateVolumeAndMultiplier("OPTIONAL SPOUSE VOLUME", "OPTIONAL DEP LIFE")
    Call ValidateVolumeAndMultiplier("OPTIONAL CHILD(REN) VOLUME", "OPTIONAL DEP LIFE")
    Call ValidateVolumeAndMultiplier("VOLUNTARY SUB VOLUME", "VOLUNTARY DEP LIFE")
    Call ValidateVolumeAndMultiplier("VOLUNTARY SPOUSE VOLUME", "VOLUNTARY DEP LIFE")
    Call ValidateVolumeAndMultiplier("VOLUNTARY CHILD(REN) VOLUME", "VOLUNTARY DEP LIFE")
    Call ValidateVolumeAndMultiplier("AD&D BASIC SUB VOLUME", "BASIC DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D BASIC SPOUSE VOLUME", "BASIC DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D BASIC CHILD(REN) VOLUME", "BASIC DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D OPTIONAL SUB VOLUME", "OPTIONAL DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D OPTIONAL SPOUSE VOLUME", "OPTIONAL DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D OPTIONAL CHILD(REN) VOLUME", "OPTIONAL DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D VOLUNTARY SUB VOLUME", "VOLUNTARY DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D VOLUNTARY SPOUSE VOLUME", "VOLUNTARY DEP AD&D")
    Call ValidateVolumeAndMultiplier("AD&D VOLUNTARY CHILD(REN) VOLUME", "VOLUNTARY DEP AD&D")
End Sub

Sub ValidateMultipliers()
    Call ValidateVolumeAndMultiplier("BASIC MULTIPLIER", "BASIC LIFE")
    Call ValidateVolumeAndMultiplier("OPTIONAL MULTIPLIER", "OPTIONAL LIFE")
    Call ValidateVolumeAndMultiplier("VOLUNTARY MULTIPLIER", "VOLUNTARY LIFE")
    Call ValidateVolumeAndMultiplier("AD&D BASIC MULTIPLIER", "BASIC AD&D")
    Call ValidateVolumeAndMultiplier("AD&D OPTIONAL MULTIPLIER", "OPTIONAL AD&D")
    Call ValidateVolumeAndMultiplier("AD&D VOLUNTARY MULTIPLIER", "VOLUNTARY AD&D")
End Sub

Sub ValidateVolumeAndMultiplier(ByVal vol As String, ByVal life As String)
    Call ValidateAgainstSSN(vol)
    Dim colVol As Long: colVol = ColumnPerName(vol)
    Dim colLife As Long: colLife = ColumnPerName(life)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colVol).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, colLife).End(xlUp).row Then lr = shSL.Cells(Rows.Count, colLife).End(xlUp).row
    Dim i As Long, j As Long
    Dim found As Boolean: found = False
    Dim lookupCol As String: lookupCol = FindLookupColOnDataSheet(vol)
    If lr >= startrow Then
        For i = startrow To lr
            If shSL.Cells(i, colVol).Value <> "" Then
                If shSL.Cells(i, colLife).Value = "" Or Not IsNumeric(shSL.Cells(i, colVol).Value) Then ErrorHighlight (shSL.Cells(i, colVol))
            ElseIf shSL.Cells(i, colLife).Value <> "" And shSL.Cells(i, colVol).Value <> "" Then
                If lookupCol <> "" Then
                    For j = 4 To 10
                        If shSL.Cells(i, colVol).Value = shData.Range(lookupCol & j).Value Then
                            found = True
                            Exit For
                        End If
                    Next j
                    If Not found Then
                        If life = "BASIC LIFE" And vol = "BASIC VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("BZ3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FW4").Value And shSL.Cells(i, colVol).Value <= shData.Range("FX4").Value)) Then found = True
                        If life = "OPTIONAL LIFE" And vol = "OPTIONAL VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CA3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FY4").Value And shSL.Cells(i, colVol).Value <= shData.Range("FZ4").Value)) Then found = True
                        If life = "VOLUNTARY LIFE" And vol = "VOLUNTARY VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CB3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("GA4").Value And shSL.Cells(i, colVol).Value <= shData.Range("GB4").Value)) Then found = True
                        If life = "BASIC AD&D" And vol = "AD&D BASIC VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("BZ5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FW7").Value And shSL.Cells(i, colVol).Value <= shData.Range("FX7").Value)) Then found = True
                        If life = "OPTIONAL AD&D" And vol = "AD&D OPTIONAL VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CA5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FY7").Value And shSL.Cells(i, colVol).Value <= shData.Range("FZ7").Value)) Then found = True
                        If life = "VOLUNTARY AD&D" And vol = "AD&D VOLUNTARY VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CB5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("GA7").Value And shSL.Cells(i, colVol).Value <= shData.Range("GB7").Value)) Then found = True
                    End If
                    If Not found Then
                        ErrorHighlight (shSL.Cells(i, colVol))
                    End If
                End If
            End If
        Next i
    End If
End Sub

Sub ValidateVolumeAndMultiplierPerRecord(ByVal vol As String, ByVal life As String, ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord(vol, startR, endR)
    Dim colVol As Long: colVol = ColumnPerName(vol)
    Dim colLife As Long: colLife = ColumnPerName(life)
    Dim lr As Long: lr = endR
    Dim i As Long, j As Long
    Dim found As Boolean: found = False
    Dim lookupCol As String: lookupCol = FindLookupColOnDataSheet(vol)
    shSL.Range(shSL.Cells(startR, colVol), shSL.Cells(endR, colVol)).Interior.Pattern = xlNone
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colVol).Value <> "" Then
                If shSL.Cells(i, colLife).Value = "" Or Not IsNumeric(shSL.Cells(i, colVol).Value) Then ErrorHighlight (shSL.Cells(i, colVol))
            ElseIf shSL.Cells(i, colLife).Value <> "" And shSL.Cells(i, colVol).Value <> "" Then
                If lookupCol <> "" Then
                    For j = 4 To 10
                        If shSL.Cells(i, colVol).Value = shData.Range(lookupCol & j).Value Then
                            found = True
                            Exit For
                        End If
                    Next j
                    If Not found Then
                        If life = "BASIC LIFE" And vol = "BASIC VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("BZ3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FW4").Value And shSL.Cells(i, colVol).Value <= shData.Range("FX4").Value)) Then found = True
                        If life = "OPTIONAL LIFE" And vol = "OPTIONAL VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CA3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FY4").Value And shSL.Cells(i, colVol).Value <= shData.Range("FZ4").Value)) Then found = True
                        If life = "VOLUNTARY LIFE" And vol = "VOLUNTARY VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CB3").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("GA4").Value And shSL.Cells(i, colVol).Value <= shData.Range("GB4").Value)) Then found = True
                        If life = "BASIC AD&D" And vol = "AD&D BASIC VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("BZ5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FW7").Value And shSL.Cells(i, colVol).Value <= shData.Range("FX7").Value)) Then found = True
                        If life = "OPTIONAL AD&D" And vol = "AD&D OPTIONAL VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CA5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("FY7").Value And shSL.Cells(i, colVol).Value <= shData.Range("FZ7").Value)) Then found = True
                        If life = "VOLUNTARY AD&D" And vol = "AD&D VOLUNTARY VOLUME" And (shSL.Cells(i, colVol).Value = shData.Range("CB5").Value Or (shSL.Cells(i, colVol).Value >= shData.Range("GA7").Value And shSL.Cells(i, colVol).Value <= shData.Range("GB7").Value)) Then found = True
                    End If
                    If Not found Then
                        ErrorHighlight (shSL.Cells(i, colVol))
                    End If
                End If
            End If
        Next i
    End If
End Sub

Sub CorrectDepLife()
    Dim lr As Long:
    lr = shSL.Cells(Rows.Count, ColumnPerName("BASIC DEP LIFE")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("BASIC SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("BASIC SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("BASIC SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("BASIC SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("BASIC CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("BASIC CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("BASIC", startrow, lr)
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL DEP LIFE")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("OPTIONAL", startrow, lr)
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY DEP LIFE")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("VOLUNTARY", startrow, lr)
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("BASIC DEP AD&D")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D BASIC CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("AD&D BASIC", startrow, lr)
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("OPTIONAL DEP AD&D")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D OPTIONAL CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("AD&D OPTIONAL", startrow, lr)
    
    lr = shSL.Cells(Rows.Count, ColumnPerName("VOLUNTARY DEP AD&D")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY SUB VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY SUB VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY SPOUSE VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY SPOUSE VOLUME")).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")).End(xlUp).row Then lr = shSL.Cells(Rows.Count, ColumnPerName("AD&D VOLUNTARY CHILD(REN) VOLUME")).End(xlUp).row
    Call CorrectDepLifePerRecord("AD&D VOLUNTARY", startrow, lr)
End Sub

Sub CorrectDepLifePerRecord(ByVal life As String, ByVal startR As Long, ByVal endR As Long)
    Dim colSub As Long: colSub = ColumnPerName(life & " SUB VOLUME")
    Dim colSps As Long: colSps = ColumnPerName(life & " SPOUSE VOLUME")
    Dim colChd As Long: colChd = ColumnPerName(life & " CHILD(REN) VOLUME")
    Dim i As Long
    
    For i = startR To endR
        Select Case life
            Case "BASIC"
                If shSL.Cells(i, ColumnPerName("BASIC DEP LIFE")).Value <> "" Then
                    If shData.Range("BZ7").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ7").Value
                    ElseIf shData.Range("FW10").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV21").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSub).Value = ""
                        ErrorHighlight (shSL.Cells(i, colSub))
                    End If
                    If shData.Range("CA7").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA7").Value
                    ElseIf shData.Range("FY10").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB7").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB7").Value
                    ElseIf shData.Range("GA10").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
            Case "OPTIONAL"
                If shSL.Cells(i, ColumnPerName("OPTIONAL DEP LIFE")).Value <> "" Then
                    If shData.Range("BZ11").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ11").Value
                    ElseIf shData.Range("FW16").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV53").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSub).Value = ""
                        ErrorHighlight (shSL.Cells(i, colSub))
                    End If
                    If shData.Range("CA11").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA11").Value
                    ElseIf shData.Range("FY16").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB11").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB11").Value
                    ElseIf shData.Range("GA16").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
            Case "VOLUNTARY"
                If shSL.Cells(i, ColumnPerName("VOLUNTARY DEP LIFE")).Value <> "" Then
                    If shData.Range("BZ15").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ15").Value
                    ElseIf shData.Range("FW22").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV85").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSub).Value = ""
                        ErrorHighlight (shSL.Cells(i, colSub))
                    End If
                    If shData.Range("CA15").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA15").Value
                    ElseIf shData.Range("FY22").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB15").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB15").Value
                    ElseIf shData.Range("GA22").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
            Case "AD&D BASIC"
                If shSL.Cells(i, ColumnPerName("BASIC DEP AD&D")).Value <> "" Then
                    If shData.Range("BZ9").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ9").Value
                    ElseIf shData.Range("FW13").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV14").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        If Not shSL.Columns(colSub).Hidden Then
                            shSL.Cells(i, colSub).Value = ""
                            ErrorHighlight (shSL.Cells(i, colSub))
                        End If
                    End If
                    If shData.Range("CA9").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA9").Value
                    ElseIf shData.Range("FY13").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB9").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB9").Value
                    ElseIf shData.Range("GA13").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
            Case "AD&D OPTIONAL"
                If shSL.Cells(i, ColumnPerName("OPTIONAL DEP AD&D")).Value <> "" Then
                    If shData.Range("BZ13").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ13").Value
                    ElseIf shData.Range("FW19").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV46").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSub).Value = ""
                        ErrorHighlight (shSL.Cells(i, colSub))
                    End If
                    If shData.Range("CA13").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA13").Value
                    ElseIf shData.Range("FY19").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB13").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB13").Value
                    ElseIf shData.Range("GA19").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
            Case "AD&D VOLUNTARY"
                If shSL.Cells(i, ColumnPerName("VOLUNTARY DEP AD&D")).Value <> "" Then
                    If shData.Range("BZ17").Value <> 0 Then
                        shSL.Cells(i, colSub).Value = shData.Range("BZ17").Value
                    ElseIf shData.Range("FW25").Value <> 0 Then
                        If shSL.Cells(i, colSub).Value = "" Then ErrorHighlight (shSL.Cells(i, colSub))
                    ElseIf shData.Range("BV78").Value = True And shSL.Cells(i, colSub).Value = "" Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSub).Value = ""
                        ErrorHighlight (shSL.Cells(i, colSub))
                    End If
                    If shData.Range("CA17").Value <> 0 Then
                        shSL.Cells(i, colSps).Value = shData.Range("CA17").Value
                    ElseIf shData.Range("FY25").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colSps).Value = ""
                    End If
                    If shData.Range("CB17").Value <> 0 Then
                        shSL.Cells(i, colChd).Value = shData.Range("CB17").Value
                    ElseIf shData.Range("GA25").Value <> 0 Then
                        'do nothing
                    Else
                        shSL.Cells(i, colChd).Value = ""
                    End If
                Else
                    shSL.Cells(i, colSub).Value = ""
                    shSL.Cells(i, colSps).Value = ""
                    shSL.Cells(i, colChd).Value = ""
                End If
        End Select
    Next i
End Sub

Sub ValidatePrimeComplete()
    Dim colFTS As Long: colFTS = ColumnPerName("FTS (PRIME/COMPLETE)")
    Dim colSubGrp As Long: colSubGrp = ColumnPerName("SUB GROUP (PRIME/COMPLETE)")
    Dim colCovType As Long: colCovType = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
    Dim lr As Long: lr = shSL.Cells(Rows.Count, colFTS).End(xlUp).row
    If lr < shSL.Cells(Rows.Count, colSubGrp).End(xlUp).row Then
        lr = shSL.Cells(Rows.Count, colSubGrp).End(xlUp).row
    End If
    If lr < shSL.Cells(Rows.Count, colCovType).End(xlUp).row Then
        lr = shSL.Cells(Rows.Count, colCovType).End(xlUp).row
    End If
    Call ValidatePrimeCompletePerRecord(startrow, lr)
End Sub

Sub ValidatePrimeCompletePerRecord(ByVal startR As Long, ByVal endR As Long)
    Call ValidateAgainstSSNPerRecord("FTS (PRIME/COMPLETE)", startR, endR)
    Call ValidateAgainstSSNPerRecord("SUB GROUP (PRIME/COMPLETE)", startR, endR)
    Call ValidateAgainstSSNPerRecord("COVERAGE TYPE (PRIME/COMPLETE)", startR, endR)
    Dim colFTS As Long: colFTS = ColumnPerName("FTS (PRIME/COMPLETE)")
    Dim colSubGrp As Long: colSubGrp = ColumnPerName("SUB GROUP (PRIME/COMPLETE)")
    Dim colCovType As Long: colCovType = ColumnPerName("COVERAGE TYPE (PRIME/COMPLETE)")
    Dim colDent As Long: colDent = ColumnPerName("DENTAL PRODUCT")
    Dim strDent As String
    Dim isPrime As Boolean: isPrime = False
    Dim lr As Long: lr = endR
    
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            On Error Resume Next
            strDent = ""
            strDent = WorksheetFunction.Index(shData.Range("AM:AM"), WorksheetFunction.Match(shSL.Cells(i, colDent), shData.Range("AN:AN"), 0))
            If (InStr(1, strDent, "Prime", vbTextCompare) > 0 Or InStr(1, strDent, "Complete", vbTextCompare) > 0) And _
                shData.Range("G73").Value = "DeCare" Then
                If shSL.Cells(i, colFTS).Value = "" Then ErrorHighlight (shSL.Cells(i, colFTS))
                If shSL.Cells(i, colSubGrp).Value = "" Then ErrorHighlight (shSL.Cells(i, colSubGrp))
                If shSL.Cells(i, colCovType).Value = "" Then ErrorHighlight (shSL.Cells(i, colCovType))
            Else
                If shSL.Cells(i, colFTS).Value <> "" Then ErrorHighlight (shSL.Cells(i, colFTS))
                If shSL.Cells(i, colSubGrp).Value <> "" Then ErrorHighlight (shSL.Cells(i, colSubGrp))
                If shSL.Cells(i, colCovType).Value <> "" Then ErrorHighlight (shSL.Cells(i, colCovType))
            End If
        Next i
    End If
End Sub

Sub ValidateAgainstSSN(ByVal str As String)
    Dim ColProd As Long: ColProd = ColumnPerName(str)
    Dim lr As Long: lr = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    Call ValidateAgainstSSNPerRecord(str, startrow, lr)
End Sub

Sub ValidateAgainstSSNPerRecord(ByVal str As String, ByVal startR As Long, ByVal endR As Long)
    Dim ColProd As Long: ColProd = ColumnPerName(str)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shSL.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shSL.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub ShowValidationForm()
    frmValidation.Show
End Sub

Sub cbOnSheetClick()
    If shSL.Shapes("cbOnSheet").OLEFormat.Object.Value = xlOn Then
        shSL.Shapes("cbOnForm").OLEFormat.Object.Value = xlOff
    Else
        shSL.Shapes("cbOnForm").OLEFormat.Object.Value = xlOn
    End If
End Sub

Sub cbOnSheet4TClick()
    If shTerm.Shapes("cbOnSheet4T").OLEFormat.Object.Value = xlOn Then
        shTerm.Shapes("cbOnForm4T").OLEFormat.Object.Value = xlOff
    Else
        shTerm.Shapes("cbOnForm4T").OLEFormat.Object.Value = xlOn
    End If
End Sub

Sub cbOnFormClick()
    If shSL.Shapes("cbOnForm").OLEFormat.Object.Value = xlOn Then
        shSL.Shapes("cbOnSheet").OLEFormat.Object.Value = xlOff
    Else
        shSL.Shapes("cbOnSheet").OLEFormat.Object.Value = xlOn
    End If
End Sub

Sub cbOnForm4TClick()
    If shTerm.Shapes("cbOnForm4T").OLEFormat.Object.Value = xlOn Then
        shTerm.Shapes("cbOnSheet4T").OLEFormat.Object.Value = xlOff
    Else
        shTerm.Shapes("cbOnSheet4T").OLEFormat.Object.Value = xlOn
    End If
End Sub

Function FindLookupColOnDataSheet(ByVal Fieldname As String) As String
    Dim returnVal As String
    Select Case Fieldname
        Case "BASIC VOLUME"
            returnVal = "CF"
        Case "OPTIONAL VOLUME"
            returnVal = "CJ"
        Case "VOLUNTARY VOLUME"
            returnVal = "CN"
        Case "AD&D BASIC VOLUME"
            returnVal = "CH"
        Case "AD&D OPTIONAL VOLUME"
            returnVal = "CL"
        Case "AD&D VOLUNTARY VOLUME"
            returnVal = "CP"
        Case "BASIC MULTIPLIER"
            returnVal = "CS"
        Case "OPTIONAL MULTIPLIER"
            returnVal = "CW"
        Case "VOLUNTARY MULTIPLIER"
            returnVal = "DA"
        Case "AD&D BASIC MULTIPLIER"
            returnVal = "CU"
        Case "AD&D OPTIONAL MULTIPLIER"
            returnVal = "CY"
        Case "AD&D VOLUNTARY MULTIPLIER"
            returnVal = "DC"
        Case Else
            returnVal = ""
    End Select
    FindLookupColOnDataSheet = returnVal
End Function

'   Checks if any "Waive" or "Waiver" is entered and converts to blank
'   Checks the Medical, Dental, Vision, and Disability products and highlights it if the group suffix is not found on the data sheet.
'   Similar thing is done for the Life products by calling following functions:
'       ValidateBasicDepLife
'       ValidateOptionalDepLife
'       ValidateVoluntaryDepLife
'       ValidateBasicDepADD
'       ValidateOptionalDepADD
'       ValidateVoluntaryDepADD
Sub ValidateSuffixPerProduct(ByVal prodName As String, ByVal col As String)
    Dim ColProd As Long: ColProd = ColumnPerName(prodName)
    Dim i As Long
    Dim lrSL As Long: lrSL = shSL.Cells(Rows.Count, ColProd).End(xlUp).row
    Dim lrData As Long: lrData = shData.Range(col & Rows.Count).End(xlUp).row
    For i = startrow To lrSL
        If Trim(shSL.Cells(i, ColProd).Value) = "WAIVE" Or Trim(shSL.Cells(i, ColProd).Value) = "WAIVER" Then shSL.Cells(i, ColProd).Value = ""
        If Trim(shSL.Cells(i, ColProd).Value) <> "" Then
            If IsError(Application.Match(shSL.Cells(i, ColProd).Value, shData.Range(col & "2:" & col & lrData), 0)) Then
                ErrorHighlight (shSL.Cells(i, ColProd))
            End If
        End If
    Next i
End Sub

Sub TermValidation()
    shTerm.Unprotect
    Application.EnableEvents = False
    Call ClearErrorHighlights4Term
    Call PopulateCaseNumbers4Term
    Call ConvertDate4Term("DOB")
    Call ConvertDate4Term("EFFECTIVE DATE FOR COVERAGE")
    Call CorrectEmpSSN4Term
    Call ValidateEmpSSN4Term
    Call CorrectName4Term("LAST NAME")
    Call CorrectName4Term("FIRST NAME")
    Call ValidateName4Term("LAST NAME")
    Call ValidateName4Term("FIRST NAME")
    Call CorrectGender4Term
    Call ValidateGender4Term
    Call CorrectRelCode4Term
    Call ValidateRelCode4Term
    Call ValidateDOB4Term
    Call CorrectMemSSN4Term
    Call ValidateMemSSN4Term
    Call CorrectAddress4Term("ADDRESS")
    Call ValidateAddress4Term
    Call CorrectCity4Term
    Call ValidateCity4Term
    Call CorrectState4Term
    Call ValidateState4Term
    Call ValidateZip4Term
    'Call ValidateDependentAddress4Term
    Call CorrectLanguage4Term
    Call ValidateLanguage4Term
    Call ValidateEffDate4Term
    Call ValidateTerminationDate4Term
    Call ValidatePCP4Term
    Call CorrectCurrentPCP4Term
    Call ValidateCurrentPCP4Term
    'Call ValidateGroupNumber4Term
    Call ValidateGroupNo4Term
    Application.EnableEvents = True
    shTerm.Protect AllowFormattingColumns:=True
End Sub

Sub PopulateCaseNumbers4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call PopulateCaseNumbers4TermPerRecord(startrow, lr)
End Sub

Sub PopulateCaseNumbers4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCase As Long: colCase = ColumnPerName4Term("CASE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    If lr >= startrow Then
        shTerm.Cells(startR, colCase).Formula = "=IF(" & shTerm.Cells(startR, colEmpSSN).Address(0, 0) & "<>"""", 'Office Use Only'!$B$6, """")"
        shTerm.Cells(startR, colCase).Copy shTerm.Range(shTerm.Cells(startR, colCase), shTerm.Cells(lr, colCase))
    End If
End Sub

Sub ConvertDate4Term(ByVal dateName)
    On Error Resume Next
    Dim colDate As Long: colDate = ColumnPerName4Term(dateName)
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colDate).End(xlUp).row
    Dim i As Long
    For i = startrow To lr
        shTerm.Cells(i, colDate).Value = CDate(shTerm.Cells(i, colDate).Value)
    Next i
    Call Clear0sOnTerm(startrow, lr, colDate)
End Sub

Sub CorrectSSN4Term(ByVal ssn As String)
    Dim colSSN As Long: colSSN = ColumnPerName4Term(ssn)
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colSSN).End(xlUp).row
    Call CorrectSSN4TermPerRecord(ssn, startrow, lr)
End Sub

Sub CorrectSSN4TermPerRecord(ByVal ssn As String, ByVal startR As Long, ByVal endR As Long)
    Dim colSSN As Long: colSSN = ColumnPerName4Term(ssn)
    Dim i As Long
    Dim lr As Long: lr = endR
    If lr >= startR Then
        For i = startR To endR
            shTerm.Cells(i, colSSN).Value = WorksheetFunction.Substitute(shTerm.Cells(i, colSSN).Value, "-", "")
            shTerm.Cells(i, colSSN).Value = WorksheetFunction.Substitute(shTerm.Cells(i, colSSN).Value, " ", "")
            If Trim(shTerm.Cells(i, colSSN).Value) <> "" Then
                On Error Resume Next
                shTerm.Cells(i, colSSN).Value = shTerm.Cells(i, colSSN).Value * 1
                shTerm.Cells(i, colSSN).NumberFormat = "000-00-0000"
            End If
        Next i
    End If
End Sub

Sub CorrectEmpSSN4Term()
    Call CorrectSSN4Term("EMPLOYEES SOCIAL")
End Sub

Sub CorrectEmpSSN4TermPerProduct(ByVal startR As Long, ByVal endR As Long)
    Call CorrectSSN4TermPerRecord("EMPLOYEES SOCIAL", startR, endR)
End Sub

Sub ValidateEmpSSN4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    Call ValidateEmpSSN4TermPerRecord(startrow, lr)
End Sub

Sub ValidateEmpSSN4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colMemSSN As Long: colMemSSN = ColumnPerName4Term("MEMBER SSN")
    Dim colRelCd  As Long: colRelCd = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Not IsNumeric(shTerm.Cells(i, colEmpSSN).Value) Or _
                shTerm.Cells(i, colEmpSSN).Value < 1 Or _
                shTerm.Cells(i, colEmpSSN).Value > 999999999 Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
            If IsNumeric(shTerm.Cells(i, colEmpSSN).Value) Then
                If shTerm.Cells(i, colEmpSSN).Value - Int(shTerm.Cells(i, colEmpSSN).Value) <> 0 Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                End If
            End If
            If shTerm.Cells(i, colRelCd).Value = "SUB" And shTerm.Cells(i, colMemSSN).Value <> shTerm.Cells(i, colEmpSSN).Value Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                ErrorHighlight (shTerm.Cells(i, colMemSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectName4Term(ByVal Fieldname As String)
    Dim colName As Long: colName = ColumnPerName4Term(Fieldname)
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colName).End(xlUp).row
    Call CorrectName4TermPerRecord(Fieldname, startrow, lr)
End Sub

Sub CorrectName4TermPerRecord(ByVal Fieldname As String, ByVal startR As Long, ByVal endR As Long)
    Dim colName As Long: colName = ColumnPerName4Term(Fieldname)
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shTerm.Cells(i, colName).Value = Trim(ChangeSpecialCharToSpace(shTerm.Cells(i, colName).Value, "- , . ' _"))
            shTerm.Cells(i, colName).Value = Trim(RemoveSpecialChar(shTerm.Cells(i, colName).Value, "0 1 2 3 4 5 6 7 8 9 ! @ # $ % ^ & * ( ) = + [ ] { } \ | ; : "" / < > ? ` ~", True))
        Next i
    End If
End Sub

Sub ValidateName4Term(ByVal Fieldname As String)
    Dim colName As Long: colName = ColumnPerName4Term(Fieldname)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colName).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateName4TermPerRecord(Fieldname, startrow, lr)
End Sub

Sub ValidateName4TermPerRecord(ByVal Fieldname As String, ByVal startR As Long, ByVal endR As Long)
    Dim colName As Long: colName = ColumnPerName4Term(Fieldname)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colEmpSSN).Value <> "" And shTerm.Cells(i, colName).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colName))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" And shTerm.Cells(i, colName).Value <> "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectGender4Term()
    Dim colGender As Long: colGender = ColumnPerName4Term("GENDER")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colGender).End(xlUp).row
    Call CorrectGender4TermPerRecord(startrow, lr)
End Sub

Sub CorrectGender4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGender As Long: colGender = ColumnPerName4Term("GENDER")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shTerm.Cells(i, colGender).Value
                Case "Male"
                    shTerm.Cells(i, colGender).Value = "M"
                Case "Female"
                    shTerm.Cells(i, colGender).Value = "F"
            End Select
        Next i
    End If
End Sub

Sub ValidateGender4Term()
    Dim colGender As Long: colGender = ColumnPerName4Term("GENDER")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colGender).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateGender4TermPerRecord(startrow, lr)
End Sub

Sub ValidateGender4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGender As Long: colGender = ColumnPerName4Term("GENDER")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colGender).Value <> "M" And shTerm.Cells(i, colGender).Value <> "F" Then
                ErrorHighlight (shTerm.Cells(i, colGender))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectRelCode4Term()
    Dim colRelCode As Long: colRelCode = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colRelCode).End(xlUp).row
    Call CorrectRelCode4TermPerRecord(startrow, lr)
End Sub

Sub CorrectRelCode4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colRelCode As Long: colRelCode = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shTerm.Cells(i, colRelCode).Value
                Case "Subscriber"
                    shTerm.Cells(i, colRelCode).Value = "SUB"
                Case "Spouse", "Wife", "Husband", "SPO"
                    shTerm.Cells(i, colRelCode).Value = "SPS"
                Case "Child", "Children", "Child(ren)", "CHL"
                    shTerm.Cells(i, colRelCode).Value = "CHD"
                Case "Student", "STUD"
                    shTerm.Cells(i, colRelCode).Value = "STU"
                Case "Handicap", "Handicapped"
                    shTerm.Cells(i, colRelCode).Value = "HCH"
                Case "Domestic Partner", "Dom Partner", "Domestic"
                    shTerm.Cells(i, colRelCode).Value = "DOM"
            End Select
        Next i
    End If
End Sub

Sub ValidateRelCode4Term()
    Dim colRelCode As Long: colRelCode = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colRelCode).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateRelCode4TermPerRecord(startrow, lr)
End Sub

Sub ValidateRelCode4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colRelCode As Long: colRelCode = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colMemSSN As Long: colMemSSN = ColumnPerName4Term("MEMBER SSN")
    Dim colDent As Long: colDent = ColumnPerName4Term("DENTAL PRODUCT")
    Dim colVis As Long: colVis = ColumnPerName4Term("VISION PRODUCT")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colRelCode).Value <> "SUB" And _
                shTerm.Cells(i, colRelCode).Value <> "SPS" And _
                shTerm.Cells(i, colRelCode).Value <> "CHD" And _
                shTerm.Cells(i, colRelCode).Value <> "STU" And _
                shTerm.Cells(i, colRelCode).Value <> "DOM" And _
                shTerm.Cells(i, colRelCode).Value <> "HCH" Then
                ErrorHighlight (shTerm.Cells(i, colRelCode))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
            If shTerm.Cells(i, colRelCode).Value = "SUB" And shTerm.Cells(i, colMemSSN).Value <> shTerm.Cells(i, colEmpSSN).Value Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                ErrorHighlight (shTerm.Cells(i, colMemSSN))
            End If
        Next i
    End If
End Sub

Sub ValidateDOB4Term()
    Dim colDate As Long: colDate = ColumnPerName4Term("DOB")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colDate).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateDOB4TermPerRecord(startrow, lr)
End Sub

Sub ValidateDOB4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDate As Long: colDate = ColumnPerName4Term("DOB")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colDate).NumberFormat = "@" Then shTerm.Cells(i, colDate).NumberFormat = "m/d/yyyy": shTerm.Cells(i, colDate).Value = shTerm.Cells(i, colDate).Value
            If shTerm.Cells(i, colDate).Value = "" Or _
                shTerm.Cells(i, colDate).Value > Date Or _
                shTerm.Cells(i, colDate).Value <= DateValue("1/1/1900") Then
                ErrorHighlight (shTerm.Cells(i, colDate))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectMemSSN4Term()
    Call CorrectSSN4Term("MEMBER SSN")
End Sub

Sub CorrectMemSSN4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Call CorrectSSN4TermPerRecord("MEMBER SSN", startR, endR)
End Sub

Sub ValidateMemSSN4Term()
    Dim colMemSSN As Long: colMemSSN = ColumnPerName4Term("MEMBER SSN")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colMemSSN).End(xlUp).row
    Call ValidateMemSSN4TermPerRecord(startrow, lr)
End Sub

Sub ValidateMemSSN4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colMemSSN As Long: colMemSSN = ColumnPerName4Term("MEMBER SSN")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colDOB As Long: colDOB = ColumnPerName4Term("DOB")
    Dim colRelCd As Long: colRelCd = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim age As Integer: age = 0
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colMemSSN).Value = "" Then
                If IsDate(shTerm.Cells(i, colDOB).Value) Then
                    age = DateDiff("yyyy", DateValue(shTerm.Cells(i, colDOB).Value), Now)
                    If DateSerial(Year(Now), Month(DateValue(shTerm.Cells(i, colDOB).Value)), Day(DateValue(shTerm.Cells(i, colDOB).Value))) > shTerm.Cells(i, colDOB).Value Then
                        age = age - 1
                    End If
                    If age >= 45 Then
                        ErrorHighlight (shTerm.Cells(i, colMemSSN))
                    End If
                End If
            Else
                If Not IsNumeric(shTerm.Cells(i, colMemSSN).Value) Or _
                    shTerm.Cells(i, colMemSSN).Value < 1 Or _
                    shTerm.Cells(i, colMemSSN).Value > 999999999 Then
                        ErrorHighlight (shTerm.Cells(i, colMemSSN))
                End If
                If IsNumeric(shTerm.Cells(i, colMemSSN).Value) Then
                    If shTerm.Cells(i, colMemSSN).Value - Int(shTerm.Cells(i, colMemSSN).Value) <> 0 Then
                        ErrorHighlight (shTerm.Cells(i, colMemSSN))
                    End If
                End If
                If shTerm.Cells(i, colMemSSN).Value <> "" And shTerm.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                End If
                
                If WorksheetFunction.CountIf(shTerm.Range(shTerm.Cells(startrow, colMemSSN), shTerm.Cells(Rows.Count, colMemSSN)), shTerm.Cells(i, colMemSSN).Value) > 1 Then
                    'ErrorHighlight (shTerm.Cells(i, colMemSSN))
                End If
                If shTerm.Cells(i, colRelCd).Value = "SUB" And shTerm.Cells(i, colMemSSN).Value <> shTerm.Cells(i, colEmpSSN).Value Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                    ErrorHighlight (shTerm.Cells(i, colMemSSN))
                ElseIf shTerm.Cells(i, colRelCd).Value <> "SUB" And shTerm.Cells(i, colMemSSN).Value = shTerm.Cells(i, colEmpSSN).Value Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                    ErrorHighlight (shTerm.Cells(i, colMemSSN))
                End If
            End If
        Next i
    End If
End Sub

Sub CorrectAddress4Term(ByVal adrs As String)
    Dim colAdrs As Long: colAdrs = ColumnPerName4Term(adrs)
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colAdrs).End(xlUp).row
    Call CorrectAddress4TermPerRecord(adrs, startrow, lr)
End Sub

Sub CorrectAddress4TermPerRecord(ByVal adrs As String, ByVal startR As Long, ByVal endR As Long)
    Dim colAdrs As Long: colAdrs = ColumnPerName4Term(adrs)
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shTerm.Cells(i, colAdrs).Value = Trim(ChangeSpecialCharToSpace(shTerm.Cells(i, colAdrs).Value, "! @ # $ % ^ & * ( ) - _ = + [ ] { } \ | ; ' : "" , . < > ? ` ~"))
            If adrs = "ADDRESS" And Len(shTerm.Cells(i, colAdrs).Value) > 25 Then
                shTerm.Cells(i, colAdrs).Value = Left(shTerm.Cells(i, colAdrs).Value, 25)
            End If
        Next i
    End If
End Sub

Sub ValidateAddress4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colAdrs As Long: colAdrs = ColumnPerName4Term("ADDRESS")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colAdrs).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateAddress4TermPerRecord(startrow, lr)
End Sub

Sub ValidateAddress4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colAdrs As Long: colAdrs = ColumnPerName4Term("ADDRESS")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If Trim(shTerm.Cells(i, colAdrs).Value) = "" Then
                ErrorHighlight (shTerm.Cells(i, colAdrs))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub ValidateDependentAddress4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colRelCode As Long: colRelCode = ColumnPerName4Term("RELATIONSHIP CODE")
    Dim colAdrs As Long: colAdrs = ColumnPerName4Term("ADDRESS")
    Dim colCity As Long: colCity = ColumnPerName4Term("CITY")
    Dim colState As Long: colState = ColumnPerName4Term("STATE")
    Dim colZip As Long: colZip = ColumnPerName4Term("ZIP CODE")
    Dim r1 As Long, r2 As Long
    Dim found As Boolean: found = False
    
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colAdrs).End(xlUp).row
    If shTerm.Cells(Rows.Count, colCity).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colCity).End(xlUp).row
    End If
    If shTerm.Cells(Rows.Count, colState).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colState).End(xlUp).row
    End If
    If shTerm.Cells(Rows.Count, colZip).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colZip).End(xlUp).row
    End If
    
    For r2 = startrow To lr
        If shTerm.Cells(r2, colRelCode).Value = "SPS" Or shTerm.Cells(r2, colRelCode).Value = "CHD" Or shTerm.Cells(r2, colRelCode).Value = "HCH" Or shTerm.Cells(r2, colRelCode).Value = "STU" Or shTerm.Cells(r2, colRelCode).Value = "DOM" Then
            found = False
            For r1 = startrow To lr
                If shTerm.Cells(r1, colRelCode).Value = "SUB" And shTerm.Cells(r2, colEmpSSN).Value = shTerm.Cells(r1, colEmpSSN).Value Then
                    found = True
                End If
                If found Then
                    If Trim(shTerm.Cells(r2, colAdrs).Value) <> Trim(shTerm.Cells(r1, colAdrs).Value) Then ErrorHighlight (shTerm.Cells(r2, colAdrs))
                    If Trim(shTerm.Cells(r2, colCity).Value) <> Trim(shTerm.Cells(r1, colCity).Value) Then ErrorHighlight (shTerm.Cells(r2, colCity))
                    If Trim(shTerm.Cells(r2, colState).Value) <> Trim(shTerm.Cells(r1, colState).Value) Then ErrorHighlight (shTerm.Cells(r2, colState))
                    If Trim(shTerm.Cells(r2, colZip).Value) <> Trim(shTerm.Cells(r1, colZip).Value) Then ErrorHighlight (shTerm.Cells(r2, colZip))
                    Exit For
                End If
            Next r1
        End If
    Next r2
End Sub

Sub CorrectCity4Term()
    Dim colCity As Long: colCity = ColumnPerName4Term("CITY")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colCity).End(xlUp).row
    Call CorrectCity4TermPerRecord(startrow, lr)
End Sub

Sub CorrectCity4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colCity As Long: colCity = ColumnPerName4Term("CITY")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            shTerm.Cells(i, colCity).Value = Trim(ChangeSpecialCharToSpace(shTerm.Cells(i, colCity).Value, "! @ # $ % ^ & * ( ) - _ = + [ ] { } \ / | ; ' : "" , . < > ? ` ~"))
        Next i
    End If
End Sub

Sub ValidateCity4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colCity As Long: colCity = ColumnPerName4Term("CITY")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colCity).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateCity4TermPerRecord(startrow, lr)
End Sub

Sub ValidateCity4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colCity As Long: colCity = ColumnPerName4Term("CITY")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colCity).Value <> "" Then
                If Not IsLetterOrSpace((shTerm.Cells(i, colCity).Value)) Then
                    ErrorHighlight (shTerm.Cells(i, colCity))
                End If
                If shTerm.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                End If
            End If
        Next i
    End If
End Sub

Sub CorrectState4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName4Term("STATE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colState).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call CorrectState4TermPerRecord(startrow, lr)
End Sub

Sub CorrectState4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName4Term("STATE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If WorksheetFunction.CountIf(shData.Range(shData.Cells(10, 8), shData.Cells(60, 8)), shTerm.Cells(i, colState).Value) > 0 Then
                shTerm.Cells(i, colState).Value = WorksheetFunction.Index(shData.Range(shData.Cells(10, 7), shData.Cells(60, 7)), WorksheetFunction.Match(shTerm.Cells(i, colState).Value, shData.Range(shData.Cells(10, 8), shData.Cells(60, 8)), 0))
            End If
        Next i
    End If
End Sub

Sub ValidateState4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName4Term("STATE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colState).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateState4TermPerRecord(startrow, lr)
End Sub

Sub ValidateState4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colState As Long: colState = ColumnPerName4Term("STATE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colState).Value <> "" Then
                If WorksheetFunction.CountIf(shData.Range(shData.Cells(10, 7), shData.Cells(60, 7)), shTerm.Cells(i, colState).Value) = 0 Then
                    ErrorHighlight (shTerm.Cells(i, colState))
                End If
                If shTerm.Cells(i, colEmpSSN).Value = "" Then
                    ErrorHighlight (shTerm.Cells(i, colEmpSSN))
                End If
            End If
        Next i
    End If
End Sub

Sub ValidateZip4Term()
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colZip As Long: colZip = ColumnPerName4Term("ZIP CODE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colZip).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateZip4TermPerRecord(startrow, lr)
End Sub


Sub ValidateZip4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colZip As Long: colZip = ColumnPerName4Term("ZIP CODE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Dim valZip As Variant: valZip = shTerm.Cells(i, colZip).Value
            If Trim(valZip) = "" Or Not IsNumeric(valZip) Or valZip < 1 Or valZip > 99999 Then
                ErrorHighlight (shTerm.Cells(i, colZip))
            ElseIf IsNumeric(valZip) Then
                If valZip - Int(valZip) <> 0 Then
                    ErrorHighlight (shTerm.Cells(i, colZip))
                End If
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectLanguage4Term()
    Dim colLang As Long: colLang = ColumnPerName4Term("LANGUAGE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colLang).End(xlUp).row
    Call CorrectLanguage4TermPerRecord(startrow, lr)
End Sub

Sub CorrectLanguage4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colLang As Long: colLang = ColumnPerName4Term("LANGUAGE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            Select Case shTerm.Cells(i, colLang).Value
                Case "English", "ENG", "E"
                    shTerm.Cells(i, colLang).Value = "ENG"
                Case "Spanish", "SPA", "S"
                    shTerm.Cells(i, colLang).Value = "SPA"
                Case "Chinese", "Mandarin", "ZHO", "ZHOX", "C/M", "CHI", "CHN", "C", "M"
                    shTerm.Cells(i, colLang).Value = "ZHO"
                Case "Korean", "Korea", "KOR", "K"
                    shTerm.Cells(i, colLang).Value = "KOR"
                Case "Vietnamese", "Vietnam", "VIET", "VIE", "V"
                    shTerm.Cells(i, colLang).Value = "VIE"
                Case "Tagalog", "Philipines", "Philipine", "Tag", "TGL", "T"
                    shTerm.Cells(i, colLang).Value = "TGL"
                Case "Other", "W09", "O"
                    shTerm.Cells(i, colLang).Value = "W09"
            End Select
        Next i
    End If
End Sub

Sub ValidateLanguage4Term()
    Dim colLang As Long: colLang = ColumnPerName4Term("LANGUAGE")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colLang).End(xlUp).row
    Call ValidateLanguage4TermPerRecord(startrow, lr)
End Sub

Sub ValidateLanguage4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim colLang As Long: colLang = ColumnPerName4Term("LANGUAGE")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colLang).Value <> "" And shTerm.Cells(i, colLang).Value <> "ENG" And shTerm.Cells(i, colLang).Value <> "SPA" And shTerm.Cells(i, colLang).Value <> "ZHO" And _
                shTerm.Cells(i, colLang).Value <> "KOR" And shTerm.Cells(i, colLang).Value <> "VIE" And shTerm.Cells(i, colLang).Value <> "TGL" And shTerm.Cells(i, colLang).Value <> "W09" Then
                ErrorHighlight (shTerm.Cells(i, colLang))
            End If
            If shTerm.Cells(i, colLang).Value <> "" And shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub ValidateEffDate4Term()
    Dim colDate As Long: colDate = ColumnPerName4Term("EFFECTIVE DATE FOR COVERAGE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colDate).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateEffDate4TermPerRecord(startrow, lr)
End Sub

Sub ValidateEffDate4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDate As Long: colDate = ColumnPerName4Term("EFFECTIVE DATE FOR COVERAGE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            On Error Resume Next
            If Not IsDate(shTerm.Cells(i, colDate).Value) Then
                ErrorHighlight (shTerm.Cells(i, colDate))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub ValidatePCP4Term()
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim colPCP As Long: colPCP = ColumnPerName4Term("PRIMARY CARE PHYSICIAN ID (PCP)")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colGrpNo).End(xlUp).row
    If shTerm.Cells(Rows.Count, colPCP).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colPCP).End(xlUp).row
    End If
    Call ValidatePCP4TermPerRecord(startrow, lr)
End Sub

Sub ValidatePCP4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim colPCP As Long: colPCP = ColumnPerName4Term("PRIMARY CARE PHYSICIAN ID (PCP)")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    Dim str As String
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colGrpNo).Value = "" Then
                If shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
            Else
                On Error Resume Next
                str = WorksheetFunction.Index(shData.Range("DP:DP"), WorksheetFunction.Match(shTerm.Cells(i, colGrpNo).Value, shData.Range("DQ:DQ"), 0))
                If InStr(1, str, "HMO", vbTextCompare) = 0 And shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
                On Error Resume Next
                str = WorksheetFunction.Index(shData.Range("DS:DS"), WorksheetFunction.Match(shTerm.Cells(i, colGrpNo).Value, shData.Range("DT:DT"), 0))
                If InStr(1, str, "HMO", vbTextCompare) = 0 And shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub CorrectCurrentPCP4Term()
    Dim colPCP As Long: colPCP = ColumnPerName4Term("CURRENT PCP")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colPCP).End(xlUp).row
    Call CorrectCurrentPCPPerRecord(startrow, lr)
End Sub

Sub CorrectCurrentPCP4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colPCP As Long: colPCP = ColumnPerName4Term("CURRENT PCP")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colPCP).Value = "Yes" Then
                shTerm.Cells(i, colPCP).Value = "Y"
            ElseIf shTerm.Cells(i, colPCP).Value = "No" Then
                shTerm.Cells(i, colPCP).Value = "N"
            End If
        Next i
    End If
End Sub

Sub ValidateCurrentPCP4Term()
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim colPCP As Long: colPCP = ColumnPerName4Term("CURRENT PCP")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colGrpNo).End(xlUp).row
    If shTerm.Cells(Rows.Count, colPCP).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colPCP).End(xlUp).row
    End If
    Call ValidateCurrentPCP4TermPerRecord(startrow, lr)
End Sub

Sub ValidateCurrentPCP4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim colPCP As Long: colPCP = ColumnPerName4Term("CURRENT PCP")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    Dim str As String
    If lr >= startR Then
        For i = startR To lr
            If shTerm.Cells(i, colGrpNo).Value = "" Then
                If shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
            Else
                On Error Resume Next
                str = WorksheetFunction.Index(shData.Range("DP:DP"), WorksheetFunction.Match(shTerm.Cells(i, colGrpNo).Value, shData.Range("DQ:DQ"), 0))
                If InStr(1, str, "HMO", vbTextCompare) = 0 And shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                ElseIf InStr(1, str, "HMO", vbTextCompare) > 0 And shTerm.Cells(i, colPCP).Value <> "" And _
                    shTerm.Cells(i, colPCP).Value <> "Y" And shTerm.Cells(i, colPCP).Value <> "N" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
                On Error Resume Next
                str = WorksheetFunction.Index(shData.Range("DS:DS"), WorksheetFunction.Match(shTerm.Cells(i, colGrpNo).Value, shData.Range("DT:DT"), 0))
                If InStr(1, str, "HMO", vbTextCompare) = 0 And shTerm.Cells(i, colPCP).Value <> "" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                ElseIf InStr(1, str, "HMO", vbTextCompare) > 0 And shTerm.Cells(i, colPCP).Value <> "" And _
                    shTerm.Cells(i, colPCP).Value <> "Y" And shTerm.Cells(i, colPCP).Value <> "N" Then
                    ErrorHighlight (shTerm.Cells(i, colPCP))
                End If
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

'Sub ValidateGroupNumber4Term()
'    Dim colProd As Long: colProd = ColumnPerName4Term("GROUP NUMBER")
'    Dim i As Long
'    Dim lrSL As Long: lrSL = shTerm.Cells(Rows.Count, colProd).End(xlUp).Row
'    Dim lrData As Long: lrData = shData.Range("IJ" & Rows.Count).End(xlUp).Row
'    For i = StartRow To lrSL
'        If Trim(shTerm.Cells(i, colProd).Value) <> "" Then
'            If IsError(Application.Match(shTerm.Cells(i, colProd).Value, shData.Range("IJ2:IJ" & lrData), 0)) Then
'                ErrorHighlight (shTerm.Cells(i, colProd))
'            End If
'        End If
'    Next i
'End Sub

Sub ValidateTerminationDate4Term()
    Dim colDate As Long: colDate = ColumnPerName4Term("TERMINATION DATE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colDate).End(xlUp).row
    If shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row > lr Then
        lr = shTerm.Cells(Rows.Count, colEmpSSN).End(xlUp).row
    End If
    Call ValidateTerminationDate4TermPerRecord(startrow, lr)
End Sub

Sub ValidateTerminationDate4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colDate As Long: colDate = ColumnPerName4Term("TERMINATION DATE")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim lr As Long: lr = endR
    Dim i As Long
    If lr >= startR Then
        For i = startR To lr
            On Error Resume Next
            If Not IsDate(shTerm.Cells(i, colDate).Value) Then
                ErrorHighlight (shTerm.Cells(i, colDate))
            End If
            If shTerm.Cells(i, colEmpSSN).Value = "" Then
                ErrorHighlight (shTerm.Cells(i, colEmpSSN))
            End If
        Next i
    End If
End Sub

Sub ValidateGroupNo4Term()
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim lr As Long: lr = shTerm.Cells(Rows.Count, colGrpNo).End(xlUp).row
    If lr >= startrow Then
        Call ValidateGroupNo4TermPerRecord(startrow, lr)
    End If
End Sub

Sub ValidateGroupNo4TermPerRecord(ByVal startR As Long, ByVal endR As Long)
    Dim colGrpNo As Long: colGrpNo = ColumnPerName4Term("GROUP NUMBER")
    Dim colEmpSSN As Long: colEmpSSN = ColumnPerName4Term("EMPLOYEES SOCIAL")
    Dim i As Long
    For i = startR To endR
        shTerm.Cells(i, colGrpNo).Value = Trim(shTerm.Cells(i, colGrpNo).Value)
        If shTerm.Cells(i, colGrpNo).Value <> "" And shTerm.Cells(i, colEmpSSN).Value = "" Then
            ErrorHighlight (shTerm.Cells(i, colEmpSSN))
        End If
        On Error Resume Next
        shTerm.Cells(i, colGrpNo).Value = WorksheetFunction.VLookup(shTerm.Cells(i, colGrpNo).Value, shData.Range("II:IJ"), 2, False)
    Next i
End Sub




' InQuest injected base64 decoded content
' "w+zg
' ^"w+zg
' '^Rxbu
' Fzw^
' Kjx.j
' ^V+"
' "hm8
' /z{Oz
' Fzw^
' "hm8

INQUEST-PP=macro
