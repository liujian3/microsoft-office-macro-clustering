Attribute VB_Name = "Module1"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FillSubdomains()
    Dim cel As Range
    Dim VAL As String
    Dim lastRow As Integer
    Dim options As Collection
    
    Set options = ReadOptions()

    lastRow = Range("A1").SpecialCells(xlCellTypeLastCell).Row
    
    'If options("subdomainsFromQ1") Then
    '    Set queriesRow = Range("C2", "C" & lastRow)
    'Else
    '    Set queriesRow = Range("E2", "E" & lastRow)
    'End If
    
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(12, 2).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" Then
        Set queriesRow = Range("C2", "C" & lastRow)
    End If
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(12, 2).Value) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        Set queriesRow = Range("G2", "G" & lastRow)
    End If
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(12, 2).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" Then
        Set queriesRow = Range("I2", "I" & lastRow)
    End If

    For Each cel In queriesRow.Cells
        VAL = LCase(cel.Value)
        If options("removeDomainBrand") Then
            VAL = DeleteWords(VAL, options("brandVariants"))
        End If
        If (options.Item("translitSubdomain")) Then
            VAL = Transliterate(VAL)
        Else
            VAL = ReplaceWords(VAL, options("replaceWords"))
        End If
        VAL = Replace(VAL, " ", "-")
        Range("S" & cel.Row).Value = VAL
    Next cel
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1
Public Sub FillQueries1()
    Dim cel As Range
    Dim lastRow As Integer
    Dim options As Collection
    
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate

    lastRow = Range("A1").SpecialCells(xlCellTypeLastCell).Row
    Set rawQueriesRow = Range("A2", "A" & lastRow)
    Set options = ReadOptions()

    Application.EnableEvents = False
    For Each cel In rawQueriesRow.Cells
        If cel.Value = "" Then Exit For
        Dim proccessed As String
        proccessed = ProccessCase(LCase(cel.Value), options.Item("capslocked"), options.Item("uppercaseLetter"))
        Range("C" & cel.Row).Value = proccessed ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Next cel
    Application.EnableEvents = True
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2
Public Sub FillQueries2()
    Dim cel As Range
    Dim lastRow As Integer
    Dim options As Collection
    Dim VAL As String
    
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim City1() As String, City2() As String
    Dim i As Integer
    For i = 2 To ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(Rows.Count, 17).End(xlUp).Row Step 1
       ReDim Preserve City1(i - 2)
       City1(i - 2) = ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(i, 17)
    Next i
    For i = 2 To ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(Rows.Count, 18).End(xlUp).Row Step 1
       ReDim Preserve City2(i - 2)
       City2(i - 2) = ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(i, 18)
    Next i
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate

    lastRow = Range("A1").SpecialCells(xlCellTypeLastCell).Row
    Set queriesRow = Range("C2", "C" & lastRow)
    Set options = ReadOptions()

    Application.EnableEvents = False
    For Each cel In queriesRow.Cells
        If cel.Value = "" Then Exit For
        Dim proccessed As String
        proccessed = ProccessCase(LCase(cel.Value), options.Item("capslocked"), options.Item("uppercaseLetter"))
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(15, 2).Value) = "SEO" Then
            proccessed = DeleteWords(proccessed, City1)
            proccessed = DeleteWords(proccessed, City2)
        End If
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        proccessed = DeleteWords(proccessed, options.Item("verbs")) ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Range("G" & cel.Row).Value = proccessed
        Call ColorizeLong(Range("G" & cel.Row))
    Next cel
    Application.EnableEvents = True
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| url'|fffd||fffd|
Public Sub FillUrls()
    Call MakeUrls("U", "Yandex")
    Call MakeUrls("W", "Google")
    Call MakeUrls("Y", "Website")
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FillCases()
    Dim sheet As Worksheet
    Dim queries As Variant
    Dim altQueries(1 To 5) As String
    Dim cases() As String
    Dim i As Integer
    Dim STR As String
    Dim strShort1 As String
    Dim strShort2 As String
    Dim protectedStr As String
    Dim caseStr As String
    
    Set sheet = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd|")
    
    Set options = ReadOptions()
    
    cases = Split("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ",")
    
    queries = GetHeadedColumn("G", Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    queriesShort1 = GetHeadedColumn("I", Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), True)
    queriesShort2 = GetHeadedColumn("K", Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), True)
    For i = LBound(queries) To UBound(queries)
        STR = queries(i)
        fallback = STR
        For j = 1 To 5
            altQueries(j) = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(i + 1, 7 + j * 2).Value
            If altQueries(j) = "" Then
                altQueries(j) = fallback
            End If
            fallback = altQueries(j)
        Next j
        
        Dim addedBrand As String
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If options("addBrand") <> "" Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            If Len(STR) = Len(DeleteWords(LCase(STR), options("brandVariants"))) Then
                ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                If Len(STR) + Len(options("addBrand")) + 1 <= options("maxlength") Then
                    addedBrand = " " & options("addBrand")
                End If
            End If
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If options("addFragment") Then
            Dim remainingSpace As Integer
            Dim fragment As String
            remainingSpace = options("maxlength") - Len(STR) - Len(addedBrand)
            fragment = GetFragmentForSpace(remainingSpace, options("fragments"))
            If fragment <> "" Then
                Select Case options("fragmentPosition")
                    Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
                        STR = fragment & " " & STR & addedBrand
                    Case "|fffd||fffd||fffd||fffd||fffd|"
                        STR = STR & addedBrand & " " & fragment
                    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        STR = STR & " " & fragment & addedBrand
                End Select
            End If
        Else
            STR = STR & addedBrand
        End If
        
        Dim k As Integer
        For k = LBound(cases) To UBound(cases)
            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If k = 0 Then
                caseStr = LCase(STR)
            Else
                'protectedStr = ProtectWords(LCase(str), options("immutable"))
                caseStr = MakeCase(cases(k), STR, options("immutable"))
                'caseStr = Application.Run(cases(k), LCase(str)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| xll |fffd||fffd| morpher.ru
                'caseStr = UnprotectWords(caseStr, options("immutable"))
            End If
            sheet.Cells(i + 1, k * 2 + 1).Value = ProccessCase(caseStr, options.Item("capslocked"), options.Item("uppercaseLetter"))
            If sheet.Cells(i + 1, k * 2 + 1).Value = "" Then
                sheet.Cells(i + 1, k * 2 + 1).Value = STR
            End If
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For j = 1 To 5
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1
                If k = 0 Then
                    caseStr = altQueries(j)
                Else
                    'protectedStr = ProtectWords(LCase(strShort1), options("immutable"))
                    caseStr = MakeCase(cases(k), altQueries(j), options("immutable"))
                    'caseStr = Application.Run(cases(k), LCase(strShort1)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| xll |fffd||fffd| morpher.ru
                    'caseStr = UnprotectWords(caseStr, options("immutable"))
                End If
                sheet.Cells(i + 1, k * 2 + j * 12).Value = ProccessCase(caseStr, options.Item("capslocked"), options.Item("uppercaseLetter"))
                'If sheet.Cells(i + 1, k * 2 + 1 + 11).Value = "" Then
                '    sheet.Cells(i + 1, k * 2 + 1 + 11).Value = altQueries(j)
                'End If
            Next j
        Next k
    Next i
    
End Sub

Function MakeCase(case_ As String, ByVal STR As String, immutables As Variant) As String
    Dim caseStr As String
    Dim immutableCase As String
    Dim i As Integer
    Dim specialWord As String
    
    specialWord = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    If IsLatin(STR) Then
        STR = specialWord & " " & STR
    End If
    caseStr = Application.Run(case_, LCase(STR)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| xll |fffd||fffd| morpher.ru
    
    For i = LBound(immutables) To UBound(immutables)
        immutableCase = Application.Run(case_, LCase(immutables(i)))
        caseStr = Replace(caseStr, immutableCase, immutables(i))
    Next i
    caseStr = Trim(Replace(caseStr, Application.Run(case_, specialWord), ""))
    MakeCase = caseStr
End Function

Function IsLatin(STR As String) As Boolean
    Dim charCode As Integer
    charCode = Asc(STR)
    IsLatin = (charCode >= 65 And charCode <= 90) Or (charCode >= 97 And charCode <= 122)
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetFragmentForSpace(space As Integer, words As Variant) As String
    Dim i As Integer
    Dim word As String
    Dim wordLength As Integer
    
    word = ""
    If space >= 0 Then
        For i = LBound(words) To UBound(words)
            wordLength = Len(words(i))
            If wordLength + 1 <= space Then
                word = words(i)
                Exit For
            End If
        Next i
    End If
    
    GetFragmentForSpace = word
End Function

Public Function UrlEncode(STR As String)
    UrlEncode = LCase(Replace(STR, " ", "-"))
End Function

Function BuildUrlQuery(ByRef params As Collection) As String
    For Each param In params
        If BuildUrlQuery = "" Then
            BuildUrlQuery = param
        Else
            BuildUrlQuery = BuildUrlQuery & "&" & param
        End If
    Next param
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub MakeUrls(col As String, target As String)
    Dim rawQ As Variant
    Dim urls As New Collection
    Dim i As Integer
    Dim query As New Collection '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim VAL As String
    Dim options As Collection
    Dim urlParams As New Collection
    Dim adOptions As New Collection
    Dim domain As String
    Dim subdomain As String
    Dim prefix As String
    
    Set options = ReadOptions()
    
    domain = options.Item("domain")
    
    prefix = IIf(options("https"), "https", "http")
    
    'If options("urlsFromQ1") Then
    '    rawQ = GetHeadedColumn("C", ActiveSheet)
    'Else
    '    rawQ = GetHeadedColumn("E", ActiveSheet)
    'End If
    
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(13, 2).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" Then
        rawQ = GetHeadedColumn("C", ActiveSheet)
    End If
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(13, 2).Value) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        rawQ = GetHeadedColumn("G", ActiveSheet)
    End If
    If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(13, 2).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" Then
        rawQ = GetHeadedColumn("I", ActiveSheet)
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| UTM-|fffd||fffd||fffd||fffd||fffd|
    Select Case target
        Case "Yandex"
            Set adOptions = options("YandexOptions")
        Case "Google"
            Set adOptions = options("GoogleOptions")
    End Select
    
    If target <> "Website" Then
        urlParams.Add "utm_source=" & adOptions("utm_source")
        urlParams.Add "utm_medium=" & adOptions("utm_medium")
        urlParams.Add "utm_campaign=" & UrlEncode(Transliterate(adOptions("utm_campaign")))
        If adOptions("utm_term") <> "[|fffd||fffd||fffd||fffd||fffd||fffd|]" Then
            urlParams.Add "utm_term=" & adOptions("utm_term")
        End If
    End If
            
    Select Case target
        Case "Yandex"
            urlParams.Add "type=" & "{source_type}"
            urlParams.Add "source=" & "{source}"
            urlParams.Add "block=" & "{position_type}"
            urlParams.Add "position=" & "{position}"
        Case "Google"
            urlParams.Add "network=" & "{network}"
            urlParams.Add "placement=" & "{placement}"
            urlParams.Add "adposition=" & "{adposition}"
    End Select
    
    
    For i = LBound(rawQ) To UBound(rawQ)
        VAL = LCase(rawQ(i))
        
        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If target = "Website" Then
            subdomain = ""
        Else
            subdomain = Cells(i + 1, 19).Value
        End If
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(i + 1, 6).Value) = "" Then
            If (subdomain <> "") Then
                VAL = prefix & "://" & subdomain & "." & domain & "/"
            Else
                VAL = prefix & "://" & domain & "/"
            End If
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If (options("urlEnding") <> "") Then
                VAL = VAL & options("urlEnding")
            End If
            
            If target <> "Website" Then
            q = BuildUrlQuery(urlParams)
            If adOptions("utm_term") = "[|fffd||fffd||fffd||fffd||fffd||fffd|]" Then
                q = q & "&utm_term=" & UrlEncode(Transliterate(LCase(Range("A" & i + 1).Value)))
            End If
                VAL = VAL & "?" & q
            End If
            GoTo NXi
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If (options("translitUrls")) Then
            VAL = Transliterate(VAL)
        Else
            VAL = ReplaceWords(VAL, options("replaceWords"))
        End If
    
        VAL = UrlEncode(VAL)
        
        '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL /|fffd||fffd||fffd||fffd||fffd||fffd|/
        If Exists(query, LCase(rawQ(i))) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If query(LCase(rawQ(i))) <> 1 Then VAL = VAL & "-" & query(LCase(rawQ(i))) '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Else
            If Exists(urls, VAL) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| url |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| url
                n = urls(VAL) + 1
                urls.Remove VAL
                urls.Add n, VAL
                query.Add n, LCase(rawQ(i)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                VAL = VAL & "-" & n
            Else
                urls.Add 1, VAL
                query.Add 1, LCase(rawQ(i)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        End If
        '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL /|fffd||fffd||fffd||fffd||fffd|/
        
        '' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| url
        'If Exists(urls, val) Then
        '    n = urls(val) + 1
        '    urls.Remove val
        '    urls.Add n, val
        '    val = val & "-" & n
        'Else
        '    urls.Add 1, val
        'End If
        
        '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/
        If (CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(15, 2).Value) = "SEO") And _
            (CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(19, 2).Value) = "|fffd||fffd|") Then
            VAL = Replace(VAL, "-", " ")
            VAL = DeleteWords(VAL, options("brandVariants"))
            VAL = Replace(VAL, " ", "-")
        End If
        '--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/
            
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If (subdomain <> "") Then
            VAL = prefix & "://" & subdomain & "." & domain & "/" & VAL
        Else
            VAL = prefix & "://" & domain & "/" & VAL
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If (options("urlEnding") <> "") Then
            VAL = VAL & options("urlEnding")
        End If
        
        
        If target <> "Website" Then
        q = BuildUrlQuery(urlParams)
        If adOptions("utm_term") = "[|fffd||fffd||fffd||fffd||fffd||fffd|]" Then
            q = q & "&utm_term=" & UrlEncode(Transliterate(LCase(Range("A" & i + 1).Value)))
        End If
            VAL = VAL & "?" & q
        End If
        
NXi:
        Range(col & i + 1).Value = VAL
    Next i
    
End Sub

Function ReplaceWords(STR As String, wordPairs As Variant)
    Dim i As Integer
    Dim word As String
    Dim replacement As String
    For i = LBound(wordPairs) To UBound(wordPairs)
        word = Split(wordPairs(i), "=")(0)
        replacement = Split(wordPairs(i), "=")(1)
        STR = Replace(STR, word, replacement)
    Next i
    ReplaceWords = STR
End Function

Function DeleteWords(STR As String, words As Variant)
    Dim i As Integer
    Dim word As String
    For i = LBound(words) To UBound(words)
        word = words(i)
        STR = Trim(Replace(Replace(STR, word, ""), "  ", " "))
    Next i
    DeleteWords = STR
End Function

Function CalcWordCount(STR As String, pretexts As Collection) As Integer
    Dim words() As String
    words = Split(STR, " ")
    For Each word In words
        If Not Exists(pretexts, word) Then
            CalcWordCount = CalcWordCount + 1
        End If
    Next word
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Exists(ByVal oCol As Collection, ByVal vKey As Variant) As Boolean
    On Error Resume Next
    oCol.Item vKey
    Exists = (Err.Number = 0)
    Err.Clear
End Function

Function UCaseFirst(STR As String)
    UCaseFirst = UCase(Left(STR, 1)) & Right(STR, Len(STR) - 1)
End Function


Function ProccessCase(STR As String, capslocked As Variant, uppercaseLetter As Variant) As String
    Dim i As Integer
    Dim word As String
    For i = LBound(capslocked) To UBound(capslocked)
        word = capslocked(i)
        STR = Replace(STR, word, UCase(word))
    Next i
    For i = LBound(uppercaseLetter) To UBound(uppercaseLetter)
        word = uppercaseLetter(i)
        STR = Replace(STR, word, UCaseFirst(word))
    Next i
    ProccessCase = STR
End Function

Function ReadOptions() As Collection
    Dim i As Integer
    
    Dim sheet As Worksheet
    Dim options As New Collection
    Dim domain As String
    Dim https As Boolean
    Dim translitSubdomain As Boolean
    Dim translitUrl As Boolean
    Dim urlEnding As String
    Dim verbs As Variant
    Dim immutable As Variant
    Dim brandVariants As Variant ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim fragments As Variant ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim ReplaceWords As Variant ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim pretextsArray As Variant
    Dim pretexts As New Collection
    Dim maxlength As Integer ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim addFragment As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim fragmentPosition As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim addBrand As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim removeDomainBrand As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim subdomainsFromQ1 As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim urlsFromQ1 As Boolean ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim altWordCount As Integer
    
    
    Dim YandexOptions As New Collection
    Dim GoogleOptions As New Collection
    Dim adParams As Variant
    
    Set sheet = Worksheets("|fffd||fffd||fffd||fffd||fffd|")
    
    domain = sheet.Range("B2").Value
    https = sheet.Range("B3").Value = "|fffd||fffd|"
    translitSubdomain = sheet.Range("B4").Value = "|fffd||fffd|"
    translitUrls = sheet.Range("B5").Value = "|fffd||fffd|"
    urlEnding = sheet.Range("B6").Value
    maxlength = sheet.Range("B7").Value
    
    
    addFragment = sheet.Range("B8").Value = "|fffd||fffd|"
    fragmentPosition = sheet.Range("B9").Value
    addBrand = sheet.Range("B10").Value
    removeDomainBrand = sheet.Range("B11").Value = "|fffd||fffd|"
    subdomainsFromQ1 = sheet.Range("B12").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    urlsFromQ1 = sheet.Range("B13").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    altWordCount = sheet.Range("B14").Value
    
    verbs = GetHeadedColumn("D", sheet)
    capslocked = GetHeadedColumn("E", sheet)
    uppercaseLetter = GetHeadedColumn("F", sheet)
    fragments = GetHeadedColumn("G", sheet)
    brandVariants = GetHeadedColumn("H", sheet)
    ReplaceWords = GetHeadedColumn("I", sheet)
    immutable = GetHeadedColumn("J", sheet)
    
    pretextsArray = GetHeadedColumn("P", sheet)
    For i = LBound(pretextsArray) To UBound(pretextsArray)
        pretexts.Add True, Key:=pretextsArray(i)
    Next i
    
    ' |fffd||fffd||fffd||fffd||fffd| utm-|fffd||fffd||fffd||fffd||fffd|
    adParams = GetHeadedColumn("L", sheet)
    For i = LBound(adParams) To UBound(adParams)
        YandexOptions.Add sheet.Range("M" & i + 1).Value, Key:=adParams(i)
        GoogleOptions.Add sheet.Range("N" & i + 1).Value, Key:=adParams(i)
    Next i
    
    
    
    options.Add domain, Key:="domain"
    options.Add https, Key:="https"
    options.Add translitSubdomain, Key:="translitSubdomain"
    options.Add translitUrls, Key:="translitUrls"
    options.Add urlEnding, Key:="urlEnding"
    options.Add maxlength, Key:="maxlength"
    options.Add verbs, Key:="verbs"
    options.Add capslocked, Key:="capslocked"
    options.Add uppercaseLetter, Key:="uppercaseLetter"
    options.Add immutable, Key:="immutable"
    options.Add fragments, Key:="fragments"
    options.Add brandVariants, Key:="brandVariants"
    options.Add ReplaceWords, Key:="replaceWords"
    options.Add addFragment, Key:="addFragment"
    options.Add fragmentPosition, Key:="fragmentPosition"
    options.Add addBrand, Key:="addBrand"
    options.Add removeDomainBrand, Key:="removeDomainBrand"
    options.Add subdomainsFromQ1, Key:="subdomainsFromQ1"
    options.Add urlsFromQ1, Key:="urlsFromQ1"
    options.Add altWordCount, Key:="altWordCount"
    
    
    options.Add pretexts, Key:="pretexts"
    
    
    options.Add YandexOptions, Key:="YandexOptions"
    options.Add GoogleOptions, Key:="GoogleOptions"

    Set ReadOptions = options
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetHeadedColumn(Letter As String, sheet As Worksheet, Optional AllowEmpty As Boolean = False) As Variant
    Dim lastRow As Integer
    Dim valuesRange As Range
    Dim Result() As String
    lastRow = sheet.Range(Letter & "1").SpecialCells(xlCellTypeLastCell).Row
    Set valuesRange = sheet.Range(Letter & "2", Letter & lastRow)
    
    Dim i As Integer
    ReDim Result(1 To lastRow + 1) As String
    
    For i = 1 To lastRow + 1
        If AllowEmpty Or valuesRange.Cells(i, 1).Value <> "" Then
            Result(i) = valuesRange.Cells(i, 1).Value
        Else
            ReDim Preserve Result(1 To i - 1)
            Exit For
        End If
    Next i
    GetHeadedColumn = Result
End Function


Function Transliterate(ByRef Txt As String, Optional Reverse = False) As String
    Dim Rus As Variant
    Rus = Array("|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
    "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
    "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
 
    Dim Eng As Variant
    Eng = Array("a", "b", "v", "g", "d", "e", "jo", "zh", "z", "i", "j", _
    "k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "ch", _
    "sh", "sch", "", "y", "", "e", "yu", "ya")
    
    If Reverse Then
        Tmp = Rus
        Rus = Eng
        Eng = Tmp
    End If
     
    For i = 1 To Len(Txt)
        |fffd| = Mid(Txt, i, 1)
     
        flag = 0
        For j = 0 To 32
            If Rus(j) = |fffd| Then
                outchr = Eng(j)
                flag = 1
                Exit For
            End If
        Next j
        If flag Then outstr = outstr & outchr Else outstr = outstr & |fffd|
    Next i

    Transliterate = outstr
End Function

Public Sub ColorizeLong(cell As Range)
    Dim options As Collection
    
    Set options = ReadOptions()
    
    If Len(cell.Value) > options("maxlength") Then
        cell.Interior.ColorIndex = 38
    Else
        cell.Interior.ColorIndex = xlColorIndexAutomatic
    End If

End Sub

Attribute VB_Name = "Module2"
Option Explicit
Option Base 1

Sub Mode1()
Dim i As Long, q As Long, p As Long
Dim QueryEx As Boolean
Dim DataSh As Worksheet
Dim PArr() As String     '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim QueryArr() As String '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim VAL As Integer, Op1 As Byte, Op2 As Byte
Dim ChangeCol As Integer, RowCount As Long
Dim STR As String, STRLen As Integer
Dim FWORD As String

Set DataSh = ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
q = 0
For i = 2 To ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(Rows.Count, 16).End(xlUp).Row
    q = q + 1
    ReDim Preserve PArr(q)
    PArr(q) = StringTrim(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(i, 16).Value)
Next i

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
q = 0
For i = 2 To DataSh.Cells(Rows.Count, 7).End(xlUp).Row
    QueryEx = False
    If q > 0 Then
        For p = 1 To q
            If QueryArr(2, p) = StringTrim(LCase(DataSh.Cells(i, 7).Value)) Then
                QueryEx = True
                GoTo Ex1
            End If
        Next p
    End If
Ex1:
    If QueryEx = False Then
        q = q + 1
        ReDim Preserve QueryArr(6, q)
        QueryArr(1, q) = StringTrim(DataSh.Cells(i, 7).Value) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        QueryArr(2, q) = LCase(StringTrim(DataSh.Cells(i, 7).Value)) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        QueryArr(3, q) = StringTrim(LCase(DeleteWords(DataSh.Cells(i, 7).Value, PArr))) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        QueryArr(4, q) = WordsCount(QueryArr(3, q)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        QueryArr(5, q) = CStr(Len(QueryArr(1, q))) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        QueryArr(6, q) = DataSh.Cells(i, 5).Value '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
Next i

If CInt(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(16, 2).Value) = 1 Then Op1 = 1
If CInt(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(16, 2).Value) = 2 Then Op1 = 2
If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(17, 2).Value) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
    Op2 = 1
    VAL = CInt(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(14, 2).Value)
End If
If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(17, 2).Value) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    Op2 = 2
    VAL = CInt(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(7, 2).Value)
End If

ChangeCol = 9
RowCount = DataSh.Cells(Rows.Count, ChangeCol).End(xlUp).Row

DataSh.Range("I2", "I" & RowCount).Interior.ColorIndex = xlColorIndexAutomatic
DataSh.Range("K2", "K" & RowCount).Clear
DataSh.Range("M2", "M" & RowCount).Clear
DataSh.Range("O2", "O" & RowCount).Clear
DataSh.Range("Q2", "Q" & RowCount).Clear


For i = 2 To RowCount Step 1
    DataSh.Cells(i, ChangeCol).Value = DataSh.Cells(i, 7).Value
Next i

If Op1 = 1 Then
    If Op2 = 1 Then
        For i = 2 To RowCount Step 1
            STR = StringTrim(LCase(DeleteWords(DataSh.Cells(i, ChangeCol), PArr)))
            STRLen = WordsCount(STR)
            If STRLen > VAL Then
                FWORD = QueryFind1(STR, VAL, QueryArr)
                If FWORD = "" Then
                    DataSh.Cells(i, ChangeCol).Interior.Color = 11513855
                Else
                    DataSh.Cells(i, ChangeCol) = FWORD
                End If
            End If
            'If STRLen > VAL Then DataSh.Cells(i, ChangeCol) = QueryFind1(STR, VAL, QueryArr)
        Next i
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
    
    If Op2 = 2 Then
        For i = 2 To RowCount Step 1
            STR = LCase(StringTrim(DataSh.Cells(i, ChangeCol)))
            STRLen = Len(STR)
            STR = DeleteWords(STR, PArr)
            If STRLen > VAL Then
                FWORD = QueryFind3(STR, VAL, QueryArr)
                If FWORD = "" Then
                    DataSh.Cells(i, ChangeCol).Interior.Color = 11513855
                Else
                    DataSh.Cells(i, ChangeCol) = FWORD
                End If
            End If
            'If STRLen > VAL Then DataSh.Cells(i, ChangeCol) = QueryFind3(STR, VAL, QueryArr)
        Next i
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
End If

If Op1 = 2 Then
    If Op2 = 1 Then
        For i = 2 To RowCount Step 1
            STR = StringTrim(LCase(DeleteWords(DataSh.Cells(i, ChangeCol), PArr)))
            STRLen = WordsCount(STR)
            If STRLen <> VAL Then
                FWORD = QueryFind2(STR, VAL, QueryArr)
                If FWORD = "" Then
                    DataSh.Cells(i, ChangeCol).Interior.Color = 11513855
                Else
                    DataSh.Cells(i, ChangeCol) = FWORD
                End If
            End If
            'If STRLen <> VAL Then DataSh.Cells(i, ChangeCol) = QueryFind2(STR, VAL, QueryArr)
        Next i
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
    
    If Op2 = 2 Then
        For i = 2 To RowCount Step 1
            STR = LCase(StringTrim(DataSh.Cells(i, ChangeCol)))
            STRLen = Len(STR)
            STR = DeleteWords(STR, PArr)
            If STRLen <> VAL Then
                FWORD = QueryFind4(STR, VAL, STRLen, QueryArr)
                If FWORD = "" Then
                    DataSh.Cells(i, ChangeCol).Interior.Color = 11513855
                Else
                    DataSh.Cells(i, ChangeCol) = FWORD
                End If
            End If
            'If STRLen <> VAL Then DataSh.Cells(i, ChangeCol) = QueryFind4(STR, VAL, STRLen, QueryArr)
        Next i
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
End If

End Sub

Function StringTrim(ByVal S As String) As String
Dim e As Boolean
S = Trim(S)
e = True
Do While e = True
    If StrComp(S, Replace(S, "  ", " ", 1, -1, vbBinaryCompare), vbBinaryCompare) = 0 Then
        e = False
    Else
        S = Replace(S, "  ", " ", 1, -1, vbBinaryCompare)
    End If
Loop
StringTrim = S
End Function

Function DeleteWords(ByVal S As String, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim q As Integer, i As Integer, p As Integer
Dim FirstArr() As String
Dim e As Boolean
Dim F As String
e = True
q = 1
i = 0
Do While e = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        e = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

For q = UBound(FirstArr) To 1 Step -1
    For i = 1 To UBound(a) Step 1
        If FirstArr(q) = a(i) Then
           If q < UBound(FirstArr) Then
                For p = q To (UBound(FirstArr) - 1)
                    FirstArr(p) = FirstArr(p + 1)
                Next p
           End If
           FirstArr(UBound(FirstArr)) = ""
           ReDim Preserve FirstArr(UBound(FirstArr) - 1)
        End If
    Next i
NXq:
Next q

F = ""
For q = 1 To UBound(FirstArr) Step 1
    If q = 1 Then
        F = FirstArr(q)
    Else
        F = F & " " & FirstArr(q)
    End If
Next q
DeleteWords = F
End Function

Function WordsCount(ByVal S As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim q As Integer, i As Integer, p As Integer
Dim FirstArr() As String
Dim e As Boolean
Dim F As String
e = True
q = 1
i = 0
Do While e = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        e = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

WordsCount = CStr(UBound(FirstArr))
End Function

Function QueryFind1(ByVal S As String, WORDSFIND As Integer, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim TMParr() As String
Dim i As Long, q As Long, e As Long, p As Long
Dim TMPS As String
Dim FirstArr() As String
Dim SecondArr() As String
Dim x As Boolean

ReDim Preserve TMParr(6, UBound(a, 2))
For i = 1 To UBound(a, 2) Step 1
    For q = 1 To 6 Step 1
        TMParr(q, i) = a(q, i)
    Next q
Next i
TMParr = a
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = (UBound(TMParr, 2) - 1) To 1 Step -1
   For q = 1 To i
      If CInt(TMParr(6, q + 1)) < CInt(TMParr(6, q)) Then
            For e = 1 To 6 Step 1
            TMPS = TMParr(e, q)
            TMParr(e, q) = TMParr(e, q + 1)
            TMParr(e, q + 1) = TMPS
            Next e
      End If
   Next q
Next i

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
x = True
q = 1
i = 0
Do While x = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        x = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For e = UBound(TMParr, 2) To 1 Step -1
    If CInt(TMParr(4, e)) = WORDSFIND Then
        x = True
        q = 1
        i = 0
        Do While x = True
            If InStr(q, TMParr(3, e), " ", vbBinaryCompare) = 0 Then
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, Len(TMParr(3, e)) - q + 1)
                x = False
            Else
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, (InStr(q, TMParr(3, e), " ", vbBinaryCompare) - q))
                q = InStr(q, TMParr(3, e), " ", vbBinaryCompare) + 1
            End If
        Loop
        p = 0
        For i = 1 To UBound(SecondArr) Step 1
            For q = 1 To UBound(FirstArr) Step 1
                If SecondArr(i) = FirstArr(q) Then
                    p = p + 1
                    GoTo NXi
                End If
            Next q
NXi:
        Next i
        If p = UBound(SecondArr) Then
            QueryFind1 = TMParr(1, e)
            GoTo Done
        End If
    End If
Next e
QueryFind1 = ""
Done:
End Function

Function QueryFind2(ByVal S As String, WORDSFIND As Integer, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim TMParr() As String
Dim i As Long, q As Long, e As Long, p As Long
Dim TMPS As String
Dim FirstArr() As String
Dim SecondArr() As String
Dim x As Boolean

ReDim Preserve TMParr(6, UBound(a, 2))
For i = 1 To UBound(a, 2) Step 1
    For q = 1 To 6 Step 1
        TMParr(q, i) = a(q, i)
    Next q
Next i
TMParr = a
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = (UBound(TMParr, 2) - 1) To 1 Step -1
   For q = 1 To i
      If CInt(TMParr(6, q + 1)) < CInt(TMParr(6, q)) Then
            For e = 1 To 6 Step 1
            TMPS = TMParr(e, q)
            TMParr(e, q) = TMParr(e, q + 1)
            TMParr(e, q + 1) = TMPS
            Next e
      End If
   Next q
Next i

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
x = True
q = 1
i = 0
Do While x = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        x = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For e = UBound(TMParr, 2) To 1 Step -1
    If CInt(TMParr(4, e)) = WORDSFIND Then
        x = True
        q = 1
        i = 0
        Do While x = True
            If InStr(q, TMParr(3, e), " ", vbBinaryCompare) = 0 Then
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, Len(TMParr(3, e)) - q + 1)
                x = False
            Else
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, (InStr(q, TMParr(3, e), " ", vbBinaryCompare) - q))
                q = InStr(q, TMParr(3, e), " ", vbBinaryCompare) + 1
            End If
        Loop
        If UBound(FirstArr) > WORDSFIND Then
            p = 0
            For i = 1 To UBound(SecondArr) Step 1
                For q = 1 To UBound(FirstArr) Step 1
                    If SecondArr(i) = FirstArr(q) Then
                        p = p + 1
                        GoTo NXi1
                    End If
                Next q
NXi1:
            Next i
            If p = UBound(SecondArr) Then
                QueryFind2 = TMParr(1, e)
                GoTo Done
            End If
        End If
        If UBound(FirstArr) < WORDSFIND Then
            p = 0
            For i = 1 To UBound(FirstArr) Step 1
                For q = 1 To UBound(SecondArr) Step 1
                    If SecondArr(q) = FirstArr(i) Then
                        p = p + 1
                        GoTo NXi2
                    End If
                Next q
NXi2:
            Next i
            If p = UBound(FirstArr) Then
                QueryFind2 = TMParr(1, e)
                GoTo Done
            End If
        End If
    End If
Next e
QueryFind2 = ""
Done:
End Function

Function QueryFind3(ByVal S As String, STRFind As Integer, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim TMParr() As String
Dim i As Long, q As Long, e As Long, p As Long
Dim TMPS As String
Dim FirstArr() As String
Dim SecondArr() As String
Dim x As Boolean

ReDim Preserve TMParr(6, UBound(a, 2))
For i = 1 To UBound(a, 2) Step 1
    For q = 1 To 6 Step 1
        TMParr(q, i) = a(q, i)
    Next q
Next i
TMParr = a
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = (UBound(TMParr, 2) - 1) To 1 Step -1
   For q = 1 To i
      If CInt(TMParr(5, q + 1)) < CInt(TMParr(5, q)) Then
            For e = 1 To 6 Step 1
            TMPS = TMParr(e, q)
            TMParr(e, q) = TMParr(e, q + 1)
            TMParr(e, q + 1) = TMPS
            Next e
      End If
   Next q
Next i

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
x = True
q = 1
i = 0
Do While x = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        x = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For e = UBound(TMParr, 2) To 1 Step -1
    If CInt(TMParr(5, e)) <= STRFind Then
        x = True
        q = 1
        i = 0
        Do While x = True
            If InStr(q, TMParr(3, e), " ", vbBinaryCompare) = 0 Then
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, Len(TMParr(3, e)) - q + 1)
                x = False
            Else
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, (InStr(q, TMParr(3, e), " ", vbBinaryCompare) - q))
                q = InStr(q, TMParr(3, e), " ", vbBinaryCompare) + 1
            End If
        Loop
        p = 0
        For i = 1 To UBound(SecondArr) Step 1
            For q = 1 To UBound(FirstArr) Step 1
                If SecondArr(i) = FirstArr(q) Then
                    p = p + 1
                    GoTo NXi
                End If
            Next q
NXi:
        Next i
        'MsgBox (S & " | " & TMParr(3, e) & " | " & CStr(p) & "-" & CStr(UBound(SecondArr)))
        If p = UBound(SecondArr) Then
            QueryFind3 = TMParr(1, e)
            GoTo Done
        End If
    End If
Next e
QueryFind3 = ""
Done:
End Function

Function QueryFind4(ByVal S As String, STRFind As Integer, STRLen As Integer, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim TMParr() As String
Dim i As Long, q As Long, e As Long, p As Long
Dim TMPS As String
Dim FirstArr() As String
Dim SecondArr() As String
Dim x As Boolean

ReDim Preserve TMParr(6, UBound(a, 2))
For i = 1 To UBound(a, 2) Step 1
    For q = 1 To 6 Step 1
        TMParr(q, i) = a(q, i)
    Next q
Next i
TMParr = a
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = (UBound(TMParr, 2) - 1) To 1 Step -1
   For q = 1 To i
      If CInt(TMParr(5, q + 1)) < CInt(TMParr(5, q)) Then
            For e = 1 To 6 Step 1
            TMPS = TMParr(e, q)
            TMParr(e, q) = TMParr(e, q + 1)
            TMParr(e, q + 1) = TMPS
            Next e
      End If
   Next q
Next i

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
x = True
q = 1
i = 0
Do While x = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        x = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For e = UBound(TMParr, 2) To 1 Step -1
    If CInt(TMParr(5, e)) <= STRFind Then
        x = True
        q = 1
        i = 0
        Do While x = True
            If InStr(q, TMParr(3, e), " ", vbBinaryCompare) = 0 Then
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, Len(TMParr(3, e)) - q + 1)
                x = False
            Else
                i = i + 1
                ReDim Preserve SecondArr(i)
                SecondArr(i) = Mid(TMParr(3, e), q, (InStr(q, TMParr(3, e), " ", vbBinaryCompare) - q))
                q = InStr(q, TMParr(3, e), " ", vbBinaryCompare) + 1
            End If
        Loop
        If STRLen > STRFind Then
            p = 0
            For i = 1 To UBound(SecondArr) Step 1
                For q = 1 To UBound(FirstArr) Step 1
                    If SecondArr(i) = FirstArr(q) Then
                        p = p + 1
                        GoTo NXi1
                    End If
                Next q
NXi1:
            Next i
            If p = UBound(SecondArr) Then
                QueryFind4 = TMParr(1, e)
                GoTo Done
            End If
        End If
        If STRLen < STRFind Then
            p = 0
            For i = 1 To UBound(FirstArr) Step 1
                For q = 1 To UBound(SecondArr) Step 1
                    If SecondArr(q) = FirstArr(i) Then
                        p = p + 1
                        GoTo NXi2
                    End If
                Next q
NXi2:
            Next i
            If p = UBound(FirstArr) Then
                QueryFind4 = TMParr(1, e)
                GoTo Done
            End If
        End If
    End If
Next e
QueryFind4 = ""
Done:
End Function

Attribute VB_Name = "Module3"
Option Explicit
Option Base 1

Public i1 As Byte, i2 As Byte, i3 As Byte, i4 As Byte, i5 As Byte, i6 As Byte, i7 As Byte
Public i8 As Byte, i9 As Byte, i10 As Byte, i11 As Byte, i12 As Byte, i13 As Byte, i14 As Byte
Public i15 As Byte, i16 As Byte, i17 As Byte, i18 As Byte, i19 As Byte, i20 As Byte, i21 As Byte

Sub Mode2()
Dim RowCount As Long
Dim DataArr() As String, PArr() As String
Dim DataSh As Worksheet, ResultSh As Worksheet
Dim i As Long, p As Long, q As Long

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
q = 0
For i = 2 To ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(Rows.Count, 16).End(xlUp).Row
    q = q + 1
    ReDim Preserve PArr(q)
    PArr(q) = StringTrim(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(i, 16).Value)
Next i

Set DataSh = ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
RowCount = DataSh.Cells(Rows.Count, 7).End(xlUp).Row
i1 = 1 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i2 = 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i3 = 3 '|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i4 = 4 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i5 = 5 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i8 = 6 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i9 = 7 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i7 = 8 '7-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i10 = 9 '6-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i11 = 10 '5-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i12 = 11 '4-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i13 = 12 '3-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i14 = 13 '2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
i15 = 14 '1-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

DataSh.Range("I2", "I" & RowCount).Interior.ColorIndex = xlColorIndexAutomatic
DataSh.Range("K2", "K" & RowCount).Clear
DataSh.Range("M2", "M" & RowCount).Clear
DataSh.Range("O2", "O" & RowCount).Clear
DataSh.Range("Q2", "Q" & RowCount).Clear

p = 0
For i = 2 To RowCount Step 1
    If p > 0 Then
        For q = 1 To p Step 1
            If DataArr(i1, q) = StringTrim(DataSh.Cells(i, 7)) Then
                If CLng(DataArr(i2, q)) < CLng(StringTrim(DataSh.Cells(i, 5))) Then DataArr(i2, q) = StringTrim(DataSh.Cells(i, 5))
                GoTo NXi
            End If
        Next q
    End If
    p = p + 1
    ReDim Preserve DataArr(14, p)
    DataArr(i1, p) = StringTrim(DataSh.Cells(i, 7))
    DataArr(i2, p) = StringTrim(DataSh.Cells(i, 5))
    DataArr(i3, p) = StringTrim(DataSh.Cells(i, 6))
    DataArr(i4, p) = DeleteWords(DataArr(i1, p), PArr)
    DataArr(i5, p) = WordsCount(DataArr(i4, p))
    DataArr(i8, p) = "0"
    DataArr(i9, p) = "0"
NXi:
Next i

Call FirstSort(DataArr, i5, i2)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(18, 2).Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Call Processing("STAT", DataArr)
If ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(18, 2).Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" Then Call Processing("WORDS", DataArr)
If ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(18, 2).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Call Processing("COMB", DataArr)

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To RowCount Step 1
    For q = 1 To UBound(DataArr, 2) Step 1
        If StringTrim(DataSh.Cells(i, 7)) = DataArr(i1, q) Then
            If DataArr(i11, q) <> "" Then DataSh.Cells(i, 11).Value = DataArr(i1, CLng(DataArr(i11, q)))
            If DataArr(i12, q) <> "" Then DataSh.Cells(i, 13) = DataArr(i1, CInt(DataArr(i12, q)))
            If DataArr(i13, q) <> "" Then DataSh.Cells(i, 15) = DataArr(i1, CInt(DataArr(i13, q)))
            If DataArr(i14, q) <> "" Then DataSh.Cells(i, 17) = DataArr(i1, CInt(DataArr(i14, q)))
            If CLng(DataArr(i9, q)) = 0 Then
                DataSh.Cells(i, 9) = DataArr(i1, q)
                GoTo Done
            Else
                If DataArr(i7, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i7, q)))
                    GoTo Done
                End If
                If DataArr(i10, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i10, q)))
                    GoTo Done
                End If
                If DataArr(i11, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i11, q)))
                    GoTo Done
                End If
                If DataArr(i12, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i12, q)))
                    GoTo Done
                End If
                If DataArr(i13, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i13, q)))
                    GoTo Done
                End If
                If DataArr(i14, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i14, q)))
                    GoTo Done
                End If
                If DataArr(i15, q) <> "" Then
                    DataSh.Cells(i, 9) = DataArr(i1, CInt(DataArr(i15, q)))
                    GoTo Done
                End If
            End If
        End If
    Next q
Done:
Next i

MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd|!")
End Sub
Function CheckQuery(FindType As String, ByRef CurQ() As String, ByRef FindQ() As String) As Boolean
Dim g As Long, i As Long, q As Long, Z As Long

If FindType = "STAT" Then
    g = 0
    For i = 1 To UBound(FindQ) Step 1
        For q = 1 To UBound(CurQ) Step 1
            If FindQ(i) = CurQ(q) Then
                g = g + 1
                GoTo NXi
            End If
        Next q
NXi:
    Next i
    If g = UBound(FindQ) Then
        CheckQuery = True
    Else
        CheckQuery = False
    End If
End If

If FindType = "WORDS" Then
    If UBound(FindQ) > 1 Then
        Z = UBound(CurQ) - UBound(FindQ)
        
        g = 0
        For i = 1 To UBound(FindQ) Step 1
            If FindQ(i) = CurQ(i) Then g = g + 1
        Next i
        
        If g = UBound(FindQ) Then
            CheckQuery = True
            Exit Function
        End If
        
        g = 0
        For i = 1 To UBound(FindQ) Step 1
            If FindQ(i) = CurQ(i + Z) Then g = g + 1
        Next i
        
        If g = UBound(FindQ) Then
            CheckQuery = True
        Else
            CheckQuery = False
        End If
    End If
    If UBound(FindQ) = 1 Then
        g = 0
        For q = 1 To UBound(CurQ) Step 1
            If FindQ(1) = CurQ(q) Then
                g = g + 1
                GoTo Done
            End If
        Next q
Done:
        If g = UBound(FindQ) Then
            CheckQuery = True
        Else
            CheckQuery = False
        End If
    End If
End If

End Function


Function StringTrim(ByVal S As String) As String
Dim e As Boolean
S = Trim(S)
e = True
Do While e = True
    If StrComp(S, Replace(S, "  ", " ", 1, -1, vbBinaryCompare), vbBinaryCompare) = 0 Then
        e = False
    Else
        S = Replace(S, "  ", " ", 1, -1, vbBinaryCompare)
    End If
Loop
StringTrim = S
End Function

Function DeleteWords(ByVal S As String, ByRef a() As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim q As Integer, i As Integer, p As Integer
Dim FirstArr() As String
Dim e As Boolean
Dim F As String
e = True
q = 1
i = 0
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Do While e = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        e = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For q = UBound(FirstArr) To 1 Step -1
    For i = 1 To UBound(a) Step 1
        If FirstArr(q) = a(i) Then
           If q < UBound(FirstArr) Then
                For p = q To (UBound(FirstArr) - 1)
                    FirstArr(p) = FirstArr(p + 1)
                Next p
           End If
           FirstArr(UBound(FirstArr)) = ""
           ReDim Preserve FirstArr(UBound(FirstArr) - 1)
        End If
    Next i
NXq:
Next q

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
F = ""
For q = 1 To UBound(FirstArr) Step 1
    If q = 1 Then
        F = FirstArr(q)
    Else
        F = F & " " & FirstArr(q)
    End If
Next q
DeleteWords = F
End Function

Function WordsCount(ByVal S As String) As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim q As Integer, i As Integer, p As Integer
Dim FirstArr() As String
Dim e As Boolean
Dim F As String
e = True
q = 1
i = 0
Do While e = True
    If InStr(q, S, " ", vbBinaryCompare) = 0 Then
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, Len(S) - q + 1)
        e = False
    Else
        i = i + 1
        ReDim Preserve FirstArr(i)
        FirstArr(i) = Mid(S, q, (InStr(q, S, " ", vbBinaryCompare) - q))
        q = InStr(q, S, " ", vbBinaryCompare) + 1
    End If
Loop

WordsCount = CStr(UBound(FirstArr))
End Function

Private Sub FirstSort(ByRef a() As String, ByVal Field1 As Byte, ByVal Field2 As Byte) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Dim i As Long, q As Long, p As Long, First As Long, Last As Long
Dim TMPS As String

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = (UBound(a, 2) - 1) To 1 Step -1
    For q = 1 To i Step 1
        If CInt(a(Field1, q + 1)) > CInt(a(Field1, q)) Then
            For p = 1 To UBound(a, 1) Step 1
                TMPS = a(p, q)
                a(p, q) = a(p, q + 1)
                a(p, q + 1) = TMPS
            Next p
        End If
    Next q
Next i
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
First = 1
Do While First <= UBound(a, 2)
    For i = First To UBound(a, 2) Step 1
        If i = UBound(a, 2) Then GoTo Done2
        If CByte(a(Field1, i + 1)) <> CByte(a(Field1, i)) Then
            Last = i
            GoTo Done1
        End If
    Next i
Done2:
Last = UBound(a, 2)
Done1:
For i = (Last - 1) To First Step -1
    For q = First To i Step 1
        If CInt(a(Field2, q + 1)) > CInt(a(Field2, q)) Then
            For p = 1 To UBound(a, 1) Step 1
                TMPS = a(p, q)
                a(p, q) = a(p, q + 1)
                a(p, q + 1) = TMPS
            Next p
        End If
    Next q
Next i
First = Last + 1
Loop
End Sub

Private Sub TakeWords(ByRef a() As String, ByVal STR As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim WordsDone As Boolean
Dim q As Long, p As Long
Erase a '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
WordsDone = True
    q = 1
    p = 0
    Do While WordsDone = True
        If InStr(q, STR, " ", vbBinaryCompare) = 0 Then
            p = p + 1
            ReDim Preserve a(p)
            a(p) = Mid(STR, q, Len(STR) - q + 1)
            WordsDone = False
        Else
            p = p + 1
            ReDim Preserve a(p)
            a(p) = Mid(STR, q, (InStr(q, STR, " ", vbBinaryCompare) - q))
            q = InStr(q, STR, " ", vbBinaryCompare) + 1
        End If
    Loop
End Sub

Private Sub FindLowQuery(FindType As String, ByRef a() As String, ByVal CurrentIndex As Long, ByRef b() As String, ByVal WordsCount As Byte)
Dim k As Long, q As Long, e As Long
Dim First As Long, Last As Long, FindedWord As Long
Dim CanUse As Boolean, WORDSFIND As Boolean, COMBTYPE As Boolean
Dim FindWordsArr() As String

If CurrentIndex = UBound(a, 2) Then Exit Sub '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

For k = (WordsCount - 1) To 1 Step -1 '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| = k
    For q = CurrentIndex + 1 To UBound(a, 2) Step 1
        If CByte(a(i5, q)) = k Then
            First = q
            GoTo Done1
        End If
    Next q
    Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Done1:
    For q = First To UBound(a, 2) Step 1
        If q = UBound(a, 2) Then GoTo Done2:
        If CByte(a(i5, q)) > CByte(a(i5, q + 1)) Then
            Last = q
            GoTo Done3
        End If
    Next q
Done2:
    Last = UBound(a, 2)
Done3:
    COMBTYPE = False
    If FindType = "COMB" Then
        FindType = "WORDS"
        WORDSFIND = False
        COMBTYPE = True
    End If
    CanUse = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FindedWord = 0
    For e = First To Last Step 1
        Call TakeWords(FindWordsArr, a(i4, e)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If CheckQuery(FindType, b, FindWordsArr) = True Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CLng(a(i8, e)) = 0 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                CanUse = True
                a(i9, e) = CStr(CurrentIndex)
            End If
            If (CanUse = False) And (FindedWord > 0) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If CLng(a(i8, e)) < CLng(a(i8, FindedWord)) Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
            If CanUse = True Then
                If k = 6 Then a(i10, CurrentIndex) = CStr(e)
                If k = 5 Then a(i11, CurrentIndex) = CStr(e)
                If k = 4 Then a(i12, CurrentIndex) = CStr(e)
                If k = 3 Then a(i13, CurrentIndex) = CStr(e)
                If k = 2 Then a(i14, CurrentIndex) = CStr(e)
                If k = 1 Then a(i15, CurrentIndex) = CStr(e)
                a(i8, e) = CStr(CInt(a(i8, e)) + 1)
                WORDSFIND = True
                GoTo NXk
            End If
            If (CanUse = False) And (FindedWord = 0) Then FindedWord = e '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If
    Next e
    If FindedWord > 0 Then
        If k = 6 Then a(i10, CurrentIndex) = CStr(FindedWord)
        If k = 5 Then a(i11, CurrentIndex) = CStr(FindedWord)
        If k = 4 Then a(i12, CurrentIndex) = CStr(FindedWord)
        If k = 3 Then a(i13, CurrentIndex) = CStr(FindedWord)
        If k = 2 Then a(i14, CurrentIndex) = CStr(FindedWord)
        If k = 1 Then a(i15, CurrentIndex) = CStr(FindedWord)
        a(i8, FindedWord) = CStr(CInt(a(i8, FindedWord)) + 1)
        WORDSFIND = True
    End If
    If COMBTYPE = True Then
        FindType = "STAT"
        CanUse = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        FindedWord = 0
        For e = First To Last Step 1
            Call TakeWords(FindWordsArr, a(i4, e)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CheckQuery(FindType, b, FindWordsArr) = True Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If CLng(a(i8, e)) = 0 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    CanUse = True
                    a(i9, e) = CStr(CurrentIndex)
                End If
                If (CanUse = False) And (FindedWord > 0) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If CLng(a(i8, e)) < CLng(a(i8, FindedWord)) Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End If
                If CanUse = True Then
                    If k = 6 Then a(i10, CurrentIndex) = CStr(e)
                    If k = 5 Then a(i11, CurrentIndex) = CStr(e)
                    If k = 4 Then a(i12, CurrentIndex) = CStr(e)
                    If k = 3 Then a(i13, CurrentIndex) = CStr(e)
                    If k = 2 Then a(i14, CurrentIndex) = CStr(e)
                    If k = 1 Then a(i15, CurrentIndex) = CStr(e)
                    a(i8, e) = CStr(CInt(a(i8, e)) + 1)
                    WORDSFIND = True
                    GoTo NXk
                End If
                If (CanUse = False) And (FindedWord = 0) Then FindedWord = e '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        Next e
        If FindedWord > 0 Then
            If k = 6 Then a(i10, CurrentIndex) = CStr(FindedWord)
            If k = 5 Then a(i11, CurrentIndex) = CStr(FindedWord)
            If k = 4 Then a(i12, CurrentIndex) = CStr(FindedWord)
            If k = 3 Then a(i13, CurrentIndex) = CStr(FindedWord)
            If k = 2 Then a(i14, CurrentIndex) = CStr(FindedWord)
            If k = 1 Then a(i15, CurrentIndex) = CStr(FindedWord)
            a(i8, FindedWord) = CStr(CInt(a(i8, FindedWord)) + 1)
            WORDSFIND = True
        End If
        FindType = "COMB"
    End If
NXk:
Next k
End Sub

Private Sub FindHighQuery(FindType As String, ByRef a() As String, ByVal CurrentIndex As Long, ByRef b() As String, ByVal WordsCount As Byte)
Dim k As Long, q As Long, e As Long
Dim First As Long, Last As Long, FindedWord As Long
Dim CanUse As Boolean, WORDSFIND As Boolean, COMBTYPE As Boolean
Dim FindWordsArr() As String

For k = (WordsCount + 1) To 7 Step 1 '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| = k
    For q = (CurrentIndex - 1) To LBound(a, 2) Step -1
        If CByte(a(i5, q)) = k Then
            Last = q
            GoTo Done1
        End If
    Next q
    Exit Sub '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -> |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Done1:
    For q = Last To LBound(a, 2) Step -1
        If q = LBound(a, 2) Then GoTo Done2:
        If CByte(a(i5, q)) < CByte(a(i5, q - 1)) Then
            First = q
            GoTo Done3
        End If
    Next q
Done2:
    First = LBound(a, 2)
Done3:
    COMBTYPE = False
    If FindType = "COMB" Then
        FindType = "WORDS"
        WORDSFIND = False
        COMBTYPE = True
    End If
    CanUse = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FindedWord = 0
    For e = First To Last Step 1
        Call TakeWords(FindWordsArr, a(i4, e)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If CheckQuery(FindType, FindWordsArr, b) = True Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CLng(a(i8, e)) = 0 Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If (CanUse = False) And (FindedWord > 0) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If CLng(a(i8, e)) < CLng(a(i8, FindedWord)) Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
            If CanUse = True Then
                If k = 7 Then a(i7, CurrentIndex) = CStr(e)
                If k = 6 Then a(i10, CurrentIndex) = CStr(e)
                If k = 5 Then a(i11, CurrentIndex) = CStr(e)
                If k = 4 Then a(i12, CurrentIndex) = CStr(e)
                If k = 3 Then a(i13, CurrentIndex) = CStr(e)
                If k = 2 Then a(i14, CurrentIndex) = CStr(e)
                a(i8, e) = CStr(CInt(a(i8, e)) + 1)
                GoTo NXk
            End If
            If (CanUse = False) And (FindedWord = 0) Then FindedWord = e '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End If
    Next e
    If FindedWord > 0 Then
        If k = 7 Then a(i7, CurrentIndex) = CStr(FindedWord)
        If k = 6 Then a(i10, CurrentIndex) = CStr(FindedWord)
        If k = 5 Then a(i11, CurrentIndex) = CStr(FindedWord)
        If k = 4 Then a(i12, CurrentIndex) = CStr(FindedWord)
        If k = 3 Then a(i13, CurrentIndex) = CStr(FindedWord)
        If k = 2 Then a(i14, CurrentIndex) = CStr(FindedWord)
        a(i8, FindedWord) = CStr(CInt(a(i8, FindedWord)) + 1)
    End If
    If COMBTYPE = True Then
        FindType = "STAT"
        CanUse = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        FindedWord = 0
        For e = First To Last Step 1
            Call TakeWords(FindWordsArr, a(i4, e)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CheckQuery(FindType, FindWordsArr, b) = True Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If CLng(a(i8, e)) = 0 Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If (CanUse = False) And (FindedWord > 0) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If CLng(a(i8, e)) < CLng(a(i8, FindedWord)) Then CanUse = True '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End If
                If CanUse = True Then
                    If k = 7 Then a(i7, CurrentIndex) = CStr(e)
                    If k = 6 Then a(i10, CurrentIndex) = CStr(e)
                    If k = 5 Then a(i11, CurrentIndex) = CStr(e)
                    If k = 4 Then a(i12, CurrentIndex) = CStr(e)
                    If k = 3 Then a(i13, CurrentIndex) = CStr(e)
                    If k = 2 Then a(i14, CurrentIndex) = CStr(e)
                    a(i8, e) = CStr(CInt(a(i8, e)) + 1)
                    GoTo NXk
                End If
                If (CanUse = False) And (FindedWord = 0) Then FindedWord = e '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        Next e
        If FindedWord > 0 Then
            If k = 7 Then a(i7, CurrentIndex) = CStr(FindedWord)
            If k = 6 Then a(i10, CurrentIndex) = CStr(FindedWord)
            If k = 5 Then a(i11, CurrentIndex) = CStr(FindedWord)
            If k = 4 Then a(i12, CurrentIndex) = CStr(FindedWord)
            If k = 3 Then a(i13, CurrentIndex) = CStr(FindedWord)
            If k = 2 Then a(i14, CurrentIndex) = CStr(FindedWord)
            a(i8, FindedWord) = CStr(CInt(a(i8, FindedWord)) + 1)
        End If
        FindType = "COMB"
    End If
NXk:
Next k
End Sub

Private Sub Processing(FindType As String, ByRef a() As String) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim i As Long
Dim MAXWords As Byte, CurWordsCount As Byte
Dim CurWordsArr() As String

MAXWords = a(i5, 1)
For i = 1 To UBound(a, 2) Step 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If a(i3, i) = "" Then
        a(i8, i) = CStr(CInt(a(i8, i)) + 1)
        GoTo NXi
    End If
    If CLng(a(i8, i)) > 0 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        a(i7, i) = a(i7, CLng(a(i9, i)))
        a(i10, i) = a(i10, CLng(a(i9, i)))
        a(i11, i) = a(i11, CLng(a(i9, i)))
        a(i12, i) = a(i12, CLng(a(i9, i)))
        a(i13, i) = a(i13, CLng(a(i9, i)))
        a(i14, i) = a(i14, CLng(a(i9, i)))
        a(i15, i) = a(i15, CLng(a(i9, i)))
        GoTo NXi '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    CurWordsCount = a(i5, i) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| X-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If CurWordsCount = 7 Then a(i7, i) = CStr(i)
    If CurWordsCount = 6 Then a(i10, i) = CStr(i)
    If CurWordsCount = 5 Then a(i11, i) = CStr(i)
    If CurWordsCount = 4 Then a(i12, i) = CStr(i)
    If CurWordsCount = 3 Then a(i13, i) = CStr(i)
    If CurWordsCount = 2 Then a(i14, i) = CStr(i)
    If CurWordsCount = 1 Then a(i15, i) = CStr(i)
    Call TakeWords(CurWordsArr, a(i4, i)) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If CurWordsCount > 1 Then Call FindLowQuery(FindType, a, i, CurWordsArr, CurWordsCount) '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If CurWordsCount < MAXWords Then Call FindHighQuery(FindType, a, i, CurWordsArr, CurWordsCount) '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
NXi:
Next i
End Sub

Attribute VB_Name = "Module4"
Option Explicit
Option Base 1

Sub FindQuery()

Call FillQueries2
If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(15, 2).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then Call Mode1
If CStr(ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd|").Cells(15, 2).Value) = "SEO" Then Call Mode2

End Sub

Sub ClearSubDomains()
Dim RowCount As Long
RowCount = ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(Rows.Count, 19).End(xlUp).Row
ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("S2", "S" & RowCount).Clear
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal target As Range)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not Intersect(target, Range("C1", "C10000")) Is Nothing Then
        target.Value = Trim(Replace(target.Value, "  ", " "))
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not Intersect(target, Range("E1", "E10000")) Is Nothing Then
        Call ColorizeLong(target)
    End If
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
