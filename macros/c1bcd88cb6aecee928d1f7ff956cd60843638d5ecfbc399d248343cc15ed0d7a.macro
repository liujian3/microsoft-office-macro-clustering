Attribute VB_Name = "A_Center"
Option Explicit

#If Mac Then

#Else
  #If VBA7 Then
    Private Declare PtrSafe Function getTickCount Lib "kernel32" Alias "GetTickCount" () As Long
    Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
         ByVal hwnd As LongPtr, _
         ByVal lpOperation As String, _
         ByVal lpFile As String, _
         ByVal lpParameters As String, _
         ByVal lpDirectory As String, _
         ByVal lpShowCmd As Long) As Long
    Public Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
    (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
    ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
  #Else
    Public Declare  Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
    (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
    ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
         ByVal hwnd As Long, _
         ByVal lpOperation As String, _
         ByVal lpFile As String, _
         ByVal lpParameters As String, _
         ByVal lpDirectory As String, _
         ByVal lpShowCmd As Long) As Long
    Private Declare Function GetTickCount Lib "kernel32" () As Long
  #End If
  #If VBA7 Then
    Public Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Public Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Public Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
    ByVal dwBytes As LongPtr) As LongPtr
    Public Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
    Public Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As LongPtr) As LongPtr
    Public Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
    Public Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
    ByVal lpString2 As Any) As LongPtr
    Public Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat _
    As Long, ByVal hMem As LongPtr) As LongPtr
    Public Declare PtrSafe Function GetCurrentProcessId Lib "kernel32" () As Long
  #Else
    Public Declare Function GetCurrentProcessId Lib "kernel32" () As Long
    Public Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
    Public Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
    Public Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
    ByVal dwBytes As Long) As Long
    Public Declare Function CloseClipboard Lib "user32" () As Long
    Public Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
    Public Declare Function EmptyClipboard Lib "user32" () As Long
    Public Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
    ByVal lpString2 As Any) As Long
    Public Declare Function SetClipboardData Lib "user32" (ByVal wFormat _
    As Long, ByVal hMem As Long) As Long
  #End If
#End If
Public Const FileUpload = "https://www.giaiphapexcel.com/diendan/threads/110725/"
'Object Global ============================
Public Glb_oShell As Object
Public Glb_FSO As Object
'==========================================
Public OnAlertMienPhi As Boolean
Public WS_AlertMienPhi$
Public Const DelayDoubleClick# = 0.95
Public HasSpeed As Boolean

'Move Scroll =================================
Public AllowAutoScroll As Boolean
Public AllowTurnSheet As Boolean
Public TimeAutoScroll%
Public CallerAutoScroll$

Public ScrollDown%, ScrollToRight%
'=================================
Public MoveWS%, DMoveWS As Date
Public Const RangeCK_VCBs = "B2"
Public SelectedSheets(4)
Public cmdBar_SelectSheet As CommandBar
Public Const TextShape_AlertMienPhi = "btn_Alert_MienPhi"
'=================================================================================
'                                 ClipBoard
'=================================================================================

Private Sub test_TextToClipBoard()
  TextToClipBoard "Hello"
End Sub
Function TextToClipBoard(ByVal Text$) As String
  #If Mac Then
    With New MSForms.DataObject
      .SetText Text: .PutInClipboard
    End With
  #Else
    #If VBA7 Then
      Dim hGlobalMemory     As LongPtr
      Dim hClipMemory       As LongPtr
      Dim lpGlobalMemory    As LongPtr
    #Else
      Dim hGlobalMemory     As Long
      Dim hClipMemory       As Long
      Dim lpGlobalMemory    As Long
    #End If
    Dim X                     As Long
    hGlobalMemory = GlobalAlloc(&H42, Len(Text) + 1)
    lpGlobalMemory = GlobalLock(hGlobalMemory)
    lpGlobalMemory = lstrcpy(lpGlobalMemory, Text)
    If GlobalUnlock(hGlobalMemory) <> 0 Then
      TextToClipBoard = "Could not unlock memory location. Copy aborted."
      GoTo PrepareToClose
    End If
    If OpenClipboard(0&) = 0 Then
      TextToClipBoard = "Could not open the Clipboard. Copy aborted."
      Exit Function
    End If
    X = EmptyClipboard()
    hClipMemory = SetClipboardData(1, hGlobalMemory)
PrepareToClose:
    If CloseClipboard() = 0 Then
      TextToClipBoard = "Could not close Clipboard."
    End If
  #End If
End Function

Sub ExitProject()
  ThisWorkbook.Close False
End Sub

Sub DelayMSec(Optional ByVal MiliSecond% = 1000, _
              Optional ByVal IsDoEvent As Boolean = True)
  #If Not Mac Then
    Dim Start&, Check&
    Start = getTickCount&()
    Do
      Check = getTickCount&()
      If Check < Start Or Check > Start + MiliSecond Then Exit Do
      If IsDoEvent Then DoEvents
    Loop
  #End If
End Sub
'-------------------------------------------------------------------
Public Sub Center_Control()
  On Error Resume Next
  ThisWorkbook.ActiveSheet.Shapes("GroupCenter").Placement = 3
  Application.ActiveWindow.ScrollRow = 1
  Application.ActiveWindow.ScrollColumn = 1
  On Error GoTo 0
End Sub
' Move ========================================
Sub btn_Center_Control()
  If TypeName(Application.Caller(1)) <> "String" Then Exit Sub
  Dim S$, Row&, Col%, sRow&, sCol%: S = Application.Caller(1)
  Const NumberMoveRow = 10, NumberMoveCol = 5
  If CallerAutoScroll <> S Then Call UnMoveNumber: AllowTurnSheet = False
  GoSub GetClick
  SetUsedRangeLimit Row&, Col%
  sRow = Application.ActiveWindow.ScrollColumn
  sCol = Application.ActiveWindow.ScrollRow
  Select Case S
    Case "btn_PreviousSheet", "btn_NextSheet"
      If MoveWS >= 1 Then AllowTurnSheet = True
      GoSub AutoSheet
    Case "btn_MoveCenter"
      If MoveWS >= 1 Then SelectSheet
      If AllowAutoScroll Then
        AllowAutoScroll = False
      Else
        Center_Control
      End If
    Case Else
      If CallerAutoScroll <> S Then AllowAutoScroll = False
      If MoveWS >= 1 Then AllowAutoScroll = True
      Select Case S
        Case "btn_MoveLeft": ScrollDown = 0: ScrollToRight = -NumberMoveCol
        Case "btn_MoveTop": ScrollDown = -NumberMoveRow: ScrollToRight = 0
        Case "btn_MoveRight": ScrollDown = 0: ScrollToRight = NumberMoveCol
        Case "btn_MoveBottom": ScrollDown = NumberMoveRow: ScrollToRight = 0
      End Select
      GoSub DoScroll
  End Select
  If MoveWS >= 1 Then Call UnMoveNumber
  CallerAutoScroll = S
Exit Sub
DoScroll:
  If (ScrollToRight > 0 And sCol > Col) Or (ScrollDown > 0 And sRow > Row) Then Call UnMoveNumber: Exit Sub
  If TimeAutoScroll < 150 Then TimeAutoScroll = 150
  If AllowAutoScroll Then
    Do Until Not AllowAutoScroll
      DelayMSec TimeAutoScroll: GoSub Scroll: DoEvents
    Loop
  Else
    GoSub Scroll
  End If
Return
Scroll:
  With Application
    If (ScrollDown > 0 And .ActiveWindow.ScrollRow > Row) _
    Or (ScrollDown < 0 And .ActiveWindow.ScrollRow < 12) _
    Or (ScrollToRight > 0 And .ActiveWindow.ScrollColumn > Col) _
    Or (ScrollToRight < 0 And .ActiveWindow.ScrollColumn < 7) Then AllowAutoScroll = False
    .ActiveWindow.SmallScroll Down:=ScrollDown, ToRight:=ScrollToRight
  End With
Return
AutoSheet:
  On Error Resume Next
  If AllowTurnSheet Then
    Do Until Not AllowTurnSheet
      GoSub turnSheet
      AllowTurnSheet = Err.Number <> 91
      DelayMSec 400: DoEvents
    Loop
  Else
    GoSub turnSheet
  End If
  On Error GoTo 0
Return
GetClick:
  If DMoveWS = 0 Then
    MoveWS = 0: DMoveWS = Now + 1 / 24 / 60 / 60 * DelayDoubleClick
  Else: MoveWS = MoveWS + 1:
    If Now > DMoveWS Then Call UnMoveNumber
  End If
Return
turnSheet:
  If "btn_NextSheet" = S Then
    ThisWorkbook.ActiveSheet.Next.Select
  Else
    ThisWorkbook.ActiveSheet.Previous.Select
  End If
Return
End Sub
Sub UnMoveNumber(): MoveWS = 0: DMoveWS = 0: End Sub


Sub BackupProject()
  Dim FSO As Object, S$, L%
  On Error Resume Next
  Set FSO = Glb_FSO
  If FSO Is Nothing Then Set FSO = CreateObject("Scripting.FileSystemObject")
  S = ThisWorkbook.Name: L = InStrRev(S, ".")
  FSO.CopyFile ThisWorkbook.FullName, ThisWorkbook.Path & "\" & Left(S, L - 1) & "-v" & CK_Version & Mid(S, L, Len(S) - L + 1), True
  ShowExr
  On Error GoTo 0
End Sub

Private Sub test_ShowExr()
  ShowExr
End Sub
Sub ShowExr( _
  Optional ByVal ToPath$, _
  Optional ByVal Inside As Boolean, _
  Optional ByVal IsMaximize As Boolean)
    ToPath = IIf(ToPath = "", ThisWorkbook.FullName, ToPath)
    Dim str$: str = IIf(Inside, "explorer.exe ", "explorer.exe /select,")
    On Error Resume Next
    Shell str & Chr(34) & ToPath & Chr(34), IIf(IsMaximize, vbMaximizedFocus, vbNormalFocus)
End Sub

Private Sub test_Alert()
  Alert "D|fffd|uwx|fffd| l|fffd|eej|fffd|u ch|fffd|ir|fffd| l|fffd|aas|fffd|y t|fffd|uwf|fffd| VNDirect" & vbNewLine & _
           "|fffd|DD|fffd||fffd|eer|fffd| l|fffd|aas|fffd|y t|fffd|uwf|fffd| trang kh|fffd|as|fffd|c " & vbNewLine & _
           "Vui l|fffd|of|fffd|ng li|fffd|n h|fffd|eej|fffd| HeSanbi!"
End Sub
Sub Alert(Optional ByVal Prompt, _
                    Optional ByVal Buttons As VbMsgBoxStyle = vbOKOnly, _
                    Optional ByVal Title$ = "Th|fffd|ng b|fffd|o", _
                    Optional ByVal Ti% = 1, _
                    Optional ByVal isUni As Boolean = True)
    If IsMissing(Prompt) Then Exit Sub
    If CStr(Prompt) = vbNullString Then Exit Sub
    Select Case CreateObject("WScript.Shell") _
      .Popup(IIf(isUni, UniMethod(Prompt), Prompt), Ti, Title, 0)
        Case 1, -1
            Exit Sub
    End Select

End Sub



Function RemoveSign$(ByVal Text$, Optional ByVal DefaultSign$, Optional ByVal JoinSign$)
  If Text = vbNullString Then Exit Function
  Dim enChar&, oText$, Tmp$, K&
  RemoveSign = AscW(Text)
  For K = 1 To Len(Text)
    oText = Mid$(Text, K, 1): enChar = AscW(oText)
    Select Case enChar
      Case 224, 225, 226, 227, 259, 7841, 7843, 7845, 7847, 7849, 7851, 7853, 7855, 7857, 7859, 7861, 7863: Tmp = Tmp & "a"
      Case 192, 193, 194, 195, 258, 7840, 7842, 7844, 7846, 7848, 7850, 7852, 7854, 7856, 7858, 7860, 7862: Tmp = Tmp & "A"
      Case 232, 233, 234, 7865, 7867, 7869, 7871, 7873, 7875, 7877, 7879: Tmp = Tmp & "e"
      Case 200, 201, 202, 7864, 7866, 7868, 7870, 7872, 7874, 7876, 7878: Tmp = Tmp & "E"
      Case 236, 237, 297, 7881, 7883: Tmp = Tmp & "i"
      Case 204, 205, 296, 7880, 7882: Tmp = Tmp & "I"
      Case 242, 243, 244, 245, 417, 7885, 7887, 7889, 7891, 7893, 7895, 7897, 7899, 7901, 7903, 7905, 7907: Tmp = Tmp & "o"
      Case 210, 212, 213, 416, 7884, 7886, 7888, 7890, 7892, 7894, 7896, 7898, 7900, 7902, 7904, 7906: Tmp = Tmp & "O"
      Case 249, 250, 361, 432, 7909, 7911, 7913, 7915, 7917, 7919, 7921: Tmp = Tmp & "u"
      Case 217, 218, 360, 431, 7908, 7910, 7912, 7914, 7916, 7918, 7920: Tmp = Tmp & "U"
      Case 253, 7923, 7925, 7927, 7929: Tmp = Tmp & "y"
      Case 221, 7922, 7924, 7926, 7928: Tmp = Tmp & "Y"
      Case 272: Tmp = Tmp & "D"
      Case 273: Tmp = Tmp & "d"
      Case Else: Tmp = Tmp & oText
    End Select
    DoEvents
  Next
  RemoveSign = Replace$(Tmp, DefaultSign, JoinSign)
End Function
Sub UniMethod_Sign(): TextToClipBoard "UniMethod(""|fffd||fffd|"")": Debug.Print "UniMethod(""|fffd||fffd|"")": End Sub
Function UniMethod(ByVal Text$, _
      Optional ByVal Decode As Boolean = True) As String
  Dim Telex_Type, CharCode, I&, Ls$, ch$
  Telex_Type = Array("aws", "awf", "awr", "awx", "awj", "aas", "aaf", "aar", "aax", "aaj", "ees", _
      "eef", "eer", "eex", "eej", "oos", "oof", "oor", "oox", "ooj", "ows", "owf", "owr", "owx", _
      "owj", "uws", "uwf", "uwr", "uwx", "uwj", "as", "af", "ar", "ax", "aj", "aw", "aa", "dd", _
      "es", "ef", "er", "ex", "ej", "ee", "is", "if", "ir", "ix", "ij", "os", "of", "or", "ox", _
      "oj", "oo", "ow", "us", "uf", "ur", "ux", "uj", "uw", "ys", "yf", "yr", "yx", "yj")
  CharCode = Array(7855, 7857, 7859, 7861, 7863, 7845, 7847, 7849, 7851, 7853, 7871, 7873, 7875, 7877, 7879, _
            7889, 7891, 7893, 7895, 7897, 7899, 7901, 7903, 7905, 7907, 7913, 7915, 7917, 7919, 7921, 225, _
            224, 7843, 227, 7841, 259, 226, 273, 233, 232, 7867, 7869, 7865, 234, 237, 236, 7881, 297, 7883, _
            243, 242, 7887, 245, 7885, 244, 417, 250, 249, 7911, 361, 7909, 432, 253, 7923, 7927, 7929, 7925)
  For I = 0 To UBound(CharCode)
    ch = ChrW(CharCode(I)): Ls = "|fffd|" & Telex_Type(I) & "|fffd|"  '|fffd||fffd|
    Text = Replace$(Text, IIf(Decode, Ls, ch), IIf(Decode, ch, Ls))
    Text = Replace$(Text, IIf(Decode, UCase$(Ls), UCase$(ch)), IIf(Decode, UCase$(ch), UCase$(Ls)))
    DoEvents
  Next I
  UniMethod = Text
End Function

Sub Test_GetPostGPE()
  Debug.Print GetPostGPE("HeSanbi", "P061090qq")
End Sub

Function GetPostGPE&(Account$, Pass$)
  On Error Resume Next
  Dim Obj As Object
  Dim IE As Object, DD, T$
  Const Url = "https://www.giaiphapexcel.com/diendan/account/account-details"
  Set IE = CreateObject("InternetExplorer.Application")
  IE.Visible = True
  IE.Navigate Url
  Do Until IE.readyState = 4: DoEvents: Loop
  Application.Wait (Now + TimeSerial(0, 0, 1))
  Do Until IE.readyState = 4: DoEvents: Loop

  Set Obj = IE.document.getElementsByClassName("p-body-pageContent")(0).getElementsByClassName("input")
  If Not Obj Is Nothing Then
    'Obj(0).Value = Account
    'Obj(1).Value = Pass
    IE.document.all.login.Value = Account
    IE.document.all.Password.Value = Pass
    IE.document.forms(0).submit
    'IE.document.getElementsByClassName("button button--primary button--icon button--icon--login")(0).Click
    Application.Wait (Now + TimeSerial(0, 0, 2))
  End If
  For Each DD In IE.document.getElementsByTagName("a")
    T = LCase$(DD.className)
    If T = LCase$("fauxBlockLink-linkRow u-concealed") Then
      GetPostGPE = CLng(DD.innerText): GoTo Ends
    End If
  Next DD
Ends:
  IE.Quit: Set IE = Nothing: Set DD = IE: Set Obj = IE:
End Function


Function TransArr(ByVal DataArray)

  Dim Total(), Arr, I&, J&, LB&, UB&, LB2&, UB2&
  Arr = DataArray
  LB = LBound(DataArray, 1): UB = UBound(DataArray, 1)
  LB2 = LBound(DataArray, 2): UB2 = UBound(DataArray, 2)
  ReDim Total(LB2 To UB2, LB To UB)
  For I = LB2 To UB2
    For J = LB To UB
      Total(I, J) = Arr(J, I)
  Next J, I
  TransArr = Total
End Function
Public Sub SetUsedRangeLimit(ByRef LastRow&, ByRef LastCol%, ParamArray Args())
    Dim Arg
    DoEvents
    On Error Resume Next
    With ThisWorkbook.ActiveSheet
      For Each Arg In Args
        If LCase$(.Name) = LCase$(Arg) Then Exit Sub
      Next
      Err.Clear
      LastRow = .Cells.Find("*", After:=.Cells(1), _
                  LookIn:=xlFormulas, LookAt:=xlWhole, _
                  SearchDirection:=xlPrevious, _
                  SearchOrder:=xlByRows).Row
      LastCol = .Cells.Find("*", After:=.Cells(1), _
                  LookIn:=xlFormulas, LookAt:=xlWhole, _
                  SearchDirection:=xlPrevious, _
                  SearchOrder:=xlByColumns).Column
    End With
    On Error GoTo 0
End Sub
Function MultiBoolean(ByVal Agrs, _
                      ByVal iBoolean, _
                      Optional ByVal Pattern$ = "=", _
                      Optional ByRef iCount&) As Boolean
  Dim Agr: MultiBoolean = True
  For Each Agr In Agrs
    Select Case Pattern
      Case "=": If Agr <> iBoolean Then MultiBoolean = False Else iCount = iCount + 1
      Case "<>": If Agr = iBoolean Then MultiBoolean = False Else iCount = iCount + 1
    End Select
  Next
End Function

Private Sub test_DelShapes()
  DelShapes ThisWorkbook.ActiveSheet, TextShape_AlertMienPhi
End Sub
Sub DelShapes(ByVal WS As Worksheet, ParamArray Shapes())
  Dim S
  On Error Resume Next
  For Each S In Shapes
    WS.Shapes(S).Delete: DoEvents
  Next S
  On Error GoTo 0
End Sub

Function TextToCode(ByVal Text$) As String
  Dim SP$(), I%
  I = IIf(Text Like "*" & Chr(10) & "*", 10, 13)
  SP = Split(Text, Chr(I))
  For I = 0 To UBound(SP)
     SP(I) = """" & UniMethod(SP(I)) & """"
  Next
  TextToCode = Join(SP, " & vbNewLine & _" & vbNewLine)
End Function

Private Sub test_CloseAppDevice()
  Call CloseAppDevice("iexplore")
End Sub
Sub CloseAppDevice(Optional ByVal AppName$)
    If Not LCase$(AppName) Like "*.exe" Then AppName = AppName & ".exe"
    Dim objProcess As Object, intError&
    For Each objProcess In GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2") _
                .ExecQuery("select * from win32_process where Name='" & AppName & "'")
        On Error Resume Next
        intError = objProcess.Terminate
        If intError <> 0 Then Exit For
        DoEvents
    Next
End Sub
Function SortArray1D(ByRef MyArray As Variant, Optional ByVal ZtoA As Boolean) As Variant
  Dim I As Long, J As Long, Temp, Arr
  Arr = MyArray
  If Not IsArray(Arr) Then
rResult:
    SortArray1D = MyArray: Exit Function
  End If
  On Error GoTo rResult
  For I = LBound(Arr) To UBound(Arr) - 1
    For J = I + 1 To UBound(Arr)
      If (Not ZtoA And Arr(I) > Arr(J)) _
      Or (ZtoA And Arr(I) < Arr(J)) Then
        Temp = Arr(J): Arr(J) = Arr(I): Arr(I) = Temp
      End If
    Next J
  Next I
  SortArray1D = Arr
End Function
Public Sub SpeedOn()
  With Application
    .Calculation = xlCalculationManual
    .CalculateBeforeSave = False
    .ScreenUpdating = False
    .EnableEvents = False
    .DisplayAlerts = False
    .Cursor = xlWait
    .StatusBar = True
    .EnableCancelKey = xlErrorHandler
  End With
  'ThisWorkbook.ActiveSheet.DisplayPageBreaks = False
End Sub
Public Sub SpeedOff()
  With Application
    .Calculation = xlAutomatic
    .ScreenUpdating = True
    .EnableEvents = True
    .DisplayAlerts = True
    .CalculateBeforeSave = True
    .Cursor = xlDefault
    .StatusBar = False
    .EnableCancelKey = xlInterrupt
  End With
  'ThisWorkbook.ActiveSheet.DisplayPageBreaks = False
  'ThisWorkbook.ActiveSheet.PageSetup.Zoom = 100
End Sub
Sub OpenSite(Site$)
  #If Not Mac Then
    ShellExecute 0, "open", Site$, "", "", 1
  #End If
End Sub

Function MainRegExp(str$, ReG$, _
            Optional ByVal bMatch As Boolean = False, _
            Optional ByVal bReplace As Boolean = False, _
            Optional ByVal bEval As Boolean = False, _
            Optional ByVal bTest As Boolean = False, _
            Optional ByVal bGlobal As Boolean = True, _
            Optional ByVal bIgCase As Boolean = False, _
            Optional ByVal bMulLine As Boolean = False, _
            Optional ByVal RepStr As String = "", _
            Optional ByVal bWall As String = "<>", _
            Optional ByRef ArrRE As Variant) As Variant
  If str = vbNullString Or ReG = vbNullString Then MainRegExp = "": Exit Function
  Dim Match, Matches, Arr(), Bool As Boolean, K: K = 0
  With CreateObject("VbScript.RegExp")
    .Global = bGlobal
    .IgnoreCase = bIgCase
    .MultiLine = bMulLine
    .Pattern = ReG
    Set Matches = .Execute(str)
    If bMatch Then
      For Each Match In Matches
        ReDim Preserve Arr(K)
        If Len(Match) > 1 Then Bool = True
        Arr(K) = Match
        K = K + 1
      Next
      ArrRE = Arr
      MainRegExp = Arr
      'MainRegExp = IIf(Bool, Join(Arr, bWall), Join(Arr, RepStr))
    ElseIf bReplace Then
      MainRegExp = .Replace(str, RepStr)
    ElseIf bEval Then
      MainRegExp = Evaluate(.Replace(str, ""))
    ElseIf bTest Then
      MainRegExp = .Test(str)
    End If
  End With
End Function
' Select Sheet ===================================================

Private Sub test_RecordSelectedSheet()
  RecordSelectedSheet SelectedSheets, ThisWorkbook.ActiveSheet.Name, "HOME"
End Sub
Sub RecordSelectedSheet(ByRef SelectedSheets, ByVal nWorksheet$, ParamArray ExceptSheets())
  Dim I%, S, LB%, UB%
  DoEvents
  For Each S In ExceptSheets
    If nWorksheet = S Then Exit Sub
  Next S
  LB = LBound(SelectedSheets): UB = UBound(SelectedSheets)
  If nWorksheet = vbNullString Then Exit Sub
  For I = LB To UB
   If SelectedSheets(I) = nWorksheet Then Exit Sub
  Next I
  For I = UB To LB + 1 Step -1
   SelectedSheets(I) = SelectedSheets(I - 1)
  Next I
  SelectedSheets(0) = nWorksheet
End Sub

Private Sub test_SetKey_SelectSheet()
  Call SetKey_SelectSheet
End Sub
Sub SetKey_SelectSheet(Optional ByVal H As Boolean)
  Application.OnKey "+^q", IIf(H, "", "SelectSheet")
End Sub
Sub SelectSheet()
  Dim A, CapA$, CapB$, Act$, sht As Worksheet, K%, tK&, Gr As Boolean
  Dim MenuItem As CommandBarPopup, Obj As Object
  Const FaceID = 70
  RegDel_cmdBar

  Set cmdBar_SelectSheet = Application.CommandBars.Add("Active Sheet", msoBarPopup, , True)
  Act = "'" & ThisWorkbook.Name & "'!" & "GotoWorkbook"
  CapA = UniMethod("S|fffd|OOR|fffd| L|fffd|M VI|fffd|EEJ|fffd|C KH|fffd|C")
  For Each A In Application.Windows
    CapB = A.Caption: GoSub AddMenus: GoSub AddButton
  Next A
  Set MenuItem = Nothing: Set Obj = cmdBar_SelectSheet
  Act = "'" & ThisWorkbook.Name & "'!" & "GotoSheet"
  tK = 18843: Gr = True: CapB = UniMethod("V|fffd|EEF|fffd| TRANG CH|fffd|NH"): GoSub AddButton
  For Each A In SelectedSheets
    If A <> vbNullString Then
      K = K + 1: tK = K + FaceID: CapB = A: If K = 1 Then Gr = True
      GoSub AddButton
    End If
  Next A
  tK = 0: K = 0
  CapA = "TRANG T|fffd|NH KH|fffd|C"
  For Each sht In ThisWorkbook.Worksheets
    CapB = sht.Name
    If CapB <> "HOME" Then
      K = K + 1
      If K = 1 Then
        Gr = True
      Else
        If K > 20 Then GoSub AddMenus
        GoSub AddButton
      End If
    End If
  Next sht
  cmdBar_SelectSheet.ShowPopup
  Exit Sub
AddButton:
  With Obj.Controls.Add
    If CapB <> vbNullString Then .Caption = CapB
    .Style = IIf(tK > 0, msoButtonIconAndCaption, msoButtonCaption)
    .OnAction = Act
    If tK > 0 Then .FaceID = tK: tK = 0
    .BeginGroup = Gr: Gr = False
  End With
Return
AddMenus:
  If MenuItem Is Nothing Then
    Set MenuItem = cmdBar_SelectSheet.Controls.Add(Type:=msoControlPopup)
    MenuItem.Caption = CapA
    Set Obj = MenuItem
  End If
Return
End Sub

Sub GotoSheet()
  On Error Resume Next
  Dim S$, I%, I2%, K%, KK, Obj As Object
  For I = LBound(SelectedSheets) To UBound(SelectedSheets)
    If SelectedSheets(I) <> "" Then K = K + 1
  Next I
  I = Application.Caller(1)
  I2 = Application.Caller(2)
  If I2 >= 25 + K Then
    S = cmdBar_SelectSheet.Controls.item(I2 - 3).Controls.item(I).Caption
    ThisWorkbook.Worksheets(S).Activate
  Else
    If I >= 3 Then If K = 0 Then I = I - 2 Else _
    If I > K + 4 Then I = I - 3 Else I = I - 2
    S = cmdBar_SelectSheet.Controls(I).Caption
    ThisWorkbook.Worksheets(IIf(I < 3, "HOME", S)).Activate
  End If
  For I = LBound(SelectedSheets) To UBound(SelectedSheets)
   If SelectedSheets(I) = S Then SelectedSheets(I) = vbNullString
  Next I
  RegDel_cmdBar
End Sub
Sub GotoWorkbook()
  On Error Resume Next
  Dim I, I2
  I = Application.Caller(1)
  I2 = Application.Caller(2)
  Debug.Print I, I2
  Windows(cmdBar_SelectSheet.Controls.item(1).Controls.item(Application.Caller(1)).Caption).Activate

End Sub
Sub RegDel_cmdBar()
  On Error Resume Next
  Application.CommandBars("Active Sheet").Delete
  Set cmdBar_SelectSheet = Nothing
  On Error GoTo 0
End Sub


Function GetTBX_Separator$(ByVal Text$)
  Dim T$, L%: T = Text
  L = InStrRev(T, ",")
  If L > 0 Then GetTBX_Separator = Left(T, L)
End Function
'============ Author ============================


Function Text_AlertMienPhi(Optional ByVal Ver$, Optional ByVal I As Boolean) As String
  Text_AlertMienPhi = UniMethod( _
  vbNewLine & "    |fffd|UWS|fffd|ng d|fffd|uj|fffd|ng ho|fffd|af|fffd|n to|fffd|af|fffd|n mi|fffd|eex|fffd|n ph|fffd|is|fffd|" & vbNewLine & _
              "    ------------------------------------------------------------------------------------------" & vbNewLine & _
              "    Facebook Messenger: m.me/he.sanbi" & vbNewLine & _
              "    D|fffd|af|fffd|nh cho nh|fffd|af|fffd| h|fffd|ar|fffd|o t|fffd|aa|fffd|m t|fffd|af|fffd|i tr|fffd|owj|fffd|:" & vbNewLine & _
              "    VCB: 0061001003794 - VO TRUONG ANH TUAN" & vbNewLine & _
              "    ------------------------------------------------------------------------------------------" & vbNewLine & _
              "    " & IIf(I, "Phi|fffd|n b|fffd|ar|fffd|n m|fffd|ows|fffd|i: v" & Ver & " - ""|fffd|i t|fffd|ows|fffd|i Website"" |fffd|dd|fffd||fffd|eer|fffd| t|fffd|ar|fffd|i!", _
              "B|fffd|aj|fffd|n |fffd|dd|fffd|ang s|fffd|uwr|fffd| d|fffd|uj|fffd|ng phi|fffd|n b|fffd|ar|fffd|n m|fffd|ows|fffd|i nh|fffd|aas|fffd|t!"))
End Function

Sub AlertMienPhi()
  If OnAlertMienPhi Then Exit Sub
  OnAlertMienPhi = True
  DelShapeAlertMienPhi
    Dim Ver$, I As Boolean, Size, Color&, Text$
    Ver = CK_Version
    If CK_Version_Cover <> vbNullString Then
      I = CK_Version_Cover > CK_Version
      Ver = CK_Version_Cover
    Else
      I = GetVersion_VCBs(Ver)
      CK_Version_Cover = Ver
    End If
    Text = Text_AlertMienPhi(Ver, I)
    With ThisWorkbook.ActiveSheet.Shapes.AddShape(msoShapeRectangle, 100, 100, 400, 160)
      .ShapeStyle = msoShapeStylePreset26
      .TextFrame.Characters.Font.Size = 16
      .TextFrame.Characters.Text = Text
      With .Fill
        .Visible = msoTrue
        .Forecolor.RGB = RGB(192, 0, 0)
        .Solid
      End With
 
      With .TextFrame2.TextRange.Font.Fill
        .Visible = msoTrue
        .Forecolor.RGB = vbWhite
        .Solid
      End With
      'Top--------------------------------------------
    Dim St%, Le%, B&, SP$(), SP2$(), aSP, LL%, LLe%
    SP = Split(Text, vbNewLine)
    Size = 12
    For Each aSP In SP
      LLe = Len(aSP)
      If aSP Like "*:*" Then
        SP2 = Split(aSP, ":")
        Color = vbYellow
        St = LL + 1: Le = Len(SP2(0)): GoSub chColor
        Color = vbWhite
        If Len(SP2(0)) > 0 Then
          St = LL + 1 + Len(SP2(0)): Le = Len(SP2(1)) + 1: GoSub chColor
        End If
        Erase SP2
      ElseIf aSP Like "*-*" Then
        Color = vbWhite
        St = LL + 1: Le = Len(aSP) + 1: GoSub chColor
      End If
      LL = LL + LLe + 1
    Next aSP

    .Name = TextShape_AlertMienPhi
    .OnAction = "'" & ThisWorkbook.Name & "'!" & TextShape_btnAll
    
    Dim L%, T%, W%, S$, SS$: SS = "Copy": W = 43
    L = 420: T = 178: S = "btn_Copy_LienHe_Bank": GoSub AddBtn
    L = 390: T = 152: W = 90: S = "btn_Copy_LienHe_Messenger": SS = UniMethod("M|fffd|owr|fffd| Messenger"): GoSub AddBtn
    L = 265: T = 233: W = 90: S = "btn_Copy_LienHe_GPE": SS = UniMethod("|fffd|i t|fffd|ows|fffd|i Website"): GoSub AddBtn
    Exit Sub
AddBtn:
    With ThisWorkbook.ActiveSheet.Shapes.AddShape(msoShapeRectangle, L, T, W, 16)
      .ShapeStyle = msoShapeStylePreset26
      .TextFrame.Characters.Text = SS
      .Name = S
      .OnAction = "'" & ThisWorkbook.Name & "'!" & TextShape_btnAll
    End With
    WS_AlertMienPhi = ThisWorkbook.ActiveSheet.Name
    Application.OnTime Now + TimeSerial(0, 0, 10), "DelShapeAlertMienPhi", , True
Return
chColor:
    With .TextFrame2.TextRange.Characters(St, Le).Font
      .Bold = B
      .Size = Size
      .Fill.Forecolor.RGB = Color
      .Fill.Solid
    End With
Return
chFormat:
    With .TextFrame2.TextRange.Characters(St, Le).ParagraphFormat
      .FirstLineIndent = 0
      .Alignment = msoAlignLeft
    End With
Return
  End With
End Sub

Private Sub test_TextShape_AlertMienPhi()
  Debug.Print UniMethod(ActiveSheet.Shapes(TextShape_AlertMienPhi).TextFrame2.TextRange.Characters.Text, 0)
End Sub
Sub DelShapeAlertMienPhi()
  Dim WS As Worksheet
  On Error Resume Next
  Set WS = ThisWorkbook.Worksheets(WS_AlertMienPhi)
  If WS Is Nothing Then Set WS = ThisWorkbook.ActiveSheet
  DelShapes WS, "btn_Copy_LienHe_Messenger", _
              "btn_Copy_LienHe_Bank", _
              "btn_Copy_LienHe_Phone", _
              "btn_Copy_LienHe_DT", _
              "btn_Copy_LienHe_GPE", _
              TextShape_AlertMienPhi
  Set WS = Nothing
  OnAlertMienPhi = False
End Sub

Private Sub test_JSDateToVBA()
  Debug.Print JSDateToVBA("/Date(1568086206000)/")
End Sub
Function JSDateToVBA(ByVal TextDate$) As Date
  Dim SC As Object, S$
  Set SC = CreateObject("ScriptControl")
  SC.Language = "JScript"
  With SC
    .AddCode "function x(a) {" & _
                "cdate = new Date(parseFloat(a.match(/\d+/g)*1));" & _
                "var fdate = cdate.getDate() + '/' + (cdate.getMonth() + 1) + '/' + cdate.getFullYear() + ' '" & _
                " + cdate.getHours() + ':' + cdate.getMinutes() + ':' + cdate.getSeconds();" & _
                "return fdate;" & _
              "}"
    S = .Run("x", TextDate)
    JSDateToVBA = CDate(S)
  End With
  Set SC = Nothing
End Function

Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v2.3.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' === VBA-UTC Headers
#If Mac Then

#If VBA7 Then

' 64-bit Mac (2016)
Private Declare PtrSafe Function utc_popen Lib "/usr/lib/libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As LongPtr
Private Declare PtrSafe Function utc_pclose Lib "/usr/lib/libc.dylib" Alias "pclose" _
    (ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_fread Lib "/usr/lib/libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As LongPtr, ByVal utc_Number As LongPtr, ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_feof Lib "/usr/lib/libc.dylib" Alias "feof" _
    (ByVal utc_File As LongPtr) As LongPtr

#Else

' 32-bit Mac
Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#End If

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

#If VBA7 Then
Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As LongPtr
End Type

#Else

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#End If

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal JsonString As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    JsonString = VBA.Replace(VBA.Replace(VBA.Replace(JsonString, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")

    json_SkipSpaces JsonString, json_Index
    Select Case VBA.Mid$(JsonString, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(JsonString, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(JsonString, json_Index)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(JsonString, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} JsonValue (Dictionary, Collection, or Array)
' @param {Integer|String} Whitespace "Pretty" print json with given number of spaces per indentation (Integer) or given string
' @return {String}
''
Public Function ConvertToJson(ByVal JsonValue As Variant, Optional ByVal Whitespace As Variant, Optional ByVal json_CurrentIndentation As Long = 0) As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    Dim json_Converted As String
    Dim json_SkipItem As Boolean
    Dim json_PrettyPrint As Boolean
    Dim json_Indentation As String
    Dim json_InnerIndentation As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True
    json_PrettyPrint = Not IsMissing(Whitespace)

    Select Case VBA.VarType(JsonValue)
    Case VBA.vbNull
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(JsonValue))

        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(JsonValue) Then
            ConvertToJson = JsonValue
        Else
            ConvertToJson = """" & json_Encode(JsonValue) & """"
        End If
    Case VBA.vbBoolean
        If JsonValue Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
                json_InnerIndentation = VBA.String$(json_CurrentIndentation + 2, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
                json_InnerIndentation = VBA.Space$((json_CurrentIndentation + 2) * Whitespace)
            End If
        End If

        ' Array
        json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(JsonValue, 1)
        json_UBound = UBound(JsonValue, 1)
        json_LBound2D = LBound(JsonValue, 2)
        json_UBound2D = UBound(JsonValue, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    ' Append comma to previous line
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    ' 2D Array
                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If
                    json_BufferAppend json_Buffer, json_Indentation & "[", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                        End If

                        json_Converted = ConvertToJson(JsonValue(json_Index, json_Index2D), Whitespace, json_CurrentIndentation + 2)

                        ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                        If json_Converted = "" Then
                            ' (nest to only check if converted = "")
                            If json_IsUndefined(JsonValue(json_Index, json_Index2D)) Then
                                json_Converted = "null"
                            End If
                        End If

                        If json_PrettyPrint Then
                            json_Converted = vbNewLine & json_InnerIndentation & json_Converted
                        End If

                        json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If

                    json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    ' 1D Array
                    json_Converted = ConvertToJson(JsonValue(json_Index), Whitespace, json_CurrentIndentation + 1)

                    ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                    If json_Converted = "" Then
                        ' (nest to only check if converted = "")
                        If json_IsUndefined(JsonValue(json_Index)) Then
                            json_Converted = "null"
                        End If
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        If json_PrettyPrint Then
            json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
            Else
                json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
            End If
        End If

        json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)

    ' Dictionary or Collection
    Case VBA.vbObject
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
            End If
        End If

        ' Dictionary
        If VBA.TypeName(JsonValue) = "Dictionary" Then
            json_BufferAppend json_Buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In JsonValue.Keys
                ' For Objects, undefined (Empty/Nothing) is not added to object
                json_Converted = ConvertToJson(JsonValue(json_Key), Whitespace, json_CurrentIndentation + 1)
                If json_Converted = "" Then
                    json_SkipItem = json_IsUndefined(JsonValue(json_Key))
                Else
                    json_SkipItem = False
                End If

                If Not json_SkipItem Then
                    If json_IsFirstItem Then
                        json_IsFirstItem = False
                    Else
                        json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & """" & json_Key & """: " & json_Converted
                    Else
                        json_Converted = """" & json_Key & """:" & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Key

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "}", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(JsonValue) = "Collection" Then
            json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In JsonValue
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_Converted = ConvertToJson(json_Value, Whitespace, json_CurrentIndentation + 1)

                ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                If json_Converted = "" Then
                    ' (nest to only check if converted = "")
                    If json_IsUndefined(json_Value) Then
                        json_Converted = "null"
                    End If
                End If

                If json_PrettyPrint Then
                    json_Converted = vbNewLine & json_Indentation & json_Converted
                End If

                json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
            Next json_Value

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)
    Case VBA.vbInteger, VBA.vbLong, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency, VBA.vbDecimal
        ' Number (use decimals for numbers)
        ConvertToJson = VBA.Replace(JsonValue, ",", ".")
    Case Else
        ' vbEmpty, vbError, vbDataObject, vbByte, vbUserDefinedType
        ' Use VBA's built-in to-string
        On Error Resume Next
        ConvertToJson = JsonValue
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Object 'Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = CreateObject("Scripting.Dictionary") 'New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.Add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_Buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_Buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_Buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_Buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_Buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_Buffer, VBA.ChrW(VBA.val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_Buffer, json_BufferPosition)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    Dim json_IsLargeNumber As Boolean

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15/16 characters containing only numbers and decimal points -> Number
            ' (decimal doesn't factor into significant digit count, so if present check for 15 digits + decimal = 16)
            json_IsLargeNumber = IIf(InStr(json_Value, "."), Len(json_Value) >= 17, Len(json_Value) >= 16)
            If Not JsonOptions.UseDoubleForLargeNumbers And json_IsLargeNumber Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_IsUndefined(ByVal json_Value As Variant) As Boolean
    ' Empty / Nothing -> undefined
    Select Case VBA.VarType(json_Value)
    Case VBA.vbEmpty
        json_IsUndefined = True
    Case VBA.vbObject
        Select Case VBA.TypeName(json_Value)
        Case "Empty", "Nothing"
            json_IsUndefined = True
        End Select
    End Select
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, ", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_Buffer, json_BufferPosition)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_Buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Put "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp
    '
    ' and clsStringAppend from Philip Swannell
    ' https://github.com/VBA-tools/VBA-JSON/pull/82

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.Len(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunk
        ' (double buffer length or append length, whichever is bigger)
        Dim json_AddedLength As Long
        json_AddedLength = IIf(json_AppendLength > json_BufferLength, json_AppendLength, json_BufferLength)

        json_Buffer = json_Buffer & VBA.Space$(json_AddedLength)
        json_BufferLength = json_BufferLength + json_AddedLength
    End If

    ' Note: Namespacing with VBA.Mid$ doesn't work properly here, throwing compile error:
    ' Function call on left-hand side of assignment must return Variant or Object
    Mid$(json_Buffer, json_BufferPosition + 1, json_AppendLength) = CStr(json_Append)
    json_BufferPosition = json_BufferPosition + json_AppendLength
End Sub

Private Function json_BufferToString(ByRef json_Buffer As String, ByVal json_BufferPosition As Long) As String
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_Buffer, json_BufferPosition)
    End If
End Function

''
' VBA-UTC v1.0.6
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), Int(VBA.val(utc_OffsetParts(2))))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), Int(VBA.val(utc_TimeParts(2))))
        End Select

        ParseIso = ParseUtc(ParseIso)

        If utc_HasOffset Then
            ParseIso = ParseIso - utc_Offset
        End If
    End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")

    Exit Function

utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
#If VBA7 Then
    Dim utc_File As LongPtr
    Dim utc_Read As LongPtr
#Else
    Dim utc_File As Long
    Dim utc_Read As Long
#End If

    Dim utc_Chunk As String

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = CLng(utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File))
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, CLng(utc_Read))
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = CLng(utc_pclose(utc_File))
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If


Attribute VB_Name = "Module1"
Attribute VB_Name = "Sheet001"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "LBX_CPTuChon, 4, 2, MSForms, ListBox"
Attribute VB_Control = "CBX_CPTuChon, 7, 3, MSForms, ComboBox"
Option Explicit
Option Compare Text
Dim MainData
Dim cData(2), iBack As Boolean

Private Sub CBX_CPTuChon_GotFocus()
  Center_Control
  Dim Tmp$: Tmp = oCBX_CPTuChon.Value
  If Not IsArray(cData(0)) Then
    oCBX_CPTuChon.Value = UniMethod("|fffd|ang Load Data!")
    oCBX_CPTuChon.Visible = True
    oLBX_CPTuChon.Visible = False
    oCBX_CPTuChon.Enabled = False
    Application.Cursor = xlWait
    cData(0) = DataCodeCTY
    WriteToLBX cData(0), oLBX_CPTuChon
    oCBX_CPTuChon.Value = Tmp
    oCBX_CPTuChon.Enabled = True
    Application.Cursor = xlDefault
  End If
  
  
  If Text = vbNullString Or right(Text, 1) = "," Then
    oLBX_CPTuChon.List = cData(0)
    oLBX_CPTuChon True, rCPTC_VCBs(1, 2).Left + 1, rCPTC_VCBs(1, 2).Top + 1
  End If
End Sub





Private Sub LBX_CPTuChon_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
    Case 13
      If oLBX_CPTuChon.ListIndex > 0 Then
        Dim T$, T2$: T = oLBX_CPTuChon.List(oLBX_CPTuChon.ListIndex)
        T2 = Text
        If Not T2 Like "*" & T & ",*" Then
          oCBX_CPTuChon.Value = GetTBX_Separator(Text) & T
        End If
        If right(T2, 1) = "," Then
          oCBX_CPTuChon.Value = Left(T2, Len(T2) - 1)
        End If
      End If
      Call HideSearch
    Case vbKeyEscape: Call HideSearch
  End Select
End Sub
Private Sub LBX_CPTuChon_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  Dim T$: T = oLBX_CPTuChon.List(oLBX_CPTuChon.ListIndex)
  If Not Text Like "*" & T & ",*" Then
    oCBX_CPTuChon.Value = GetTBX_Separator(Text) & T & ","
  End If
  oLBX_CPTuChon.Clear
  oLBX_CPTuChon.List = cData(0)
End Sub
Private Sub CBX_CPTuChon_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  Dim T$: T = CBX_CPTuChon.Value
  If T <> vbNullString Then
    CBX_CPTuChon.SelStart = Len(T)
  End If
End Sub
Private Sub CBX_CPTuChon_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
    Case vbKeyBack
      If Len(Text) > 0 Then
        If iBack Then
          cData(2) = FindLBX(Text, cData(0), oLBX_CPTuChon)
        Else
          cData(2) = cData(1)
          WriteToLBX cData(1), oLBX_CPTuChon
        End If
        iBack = True
      End If
    Case vbKey0 To vbKey9, vbKeyA To vbKeyZ
      If Len(Text) > 1 Then cData(1) = cData(2) Else cData(1) = cData(0)
      cData(2) = FindLBX(Text, cData(1), oLBX_CPTuChon)
      iBack = False
    Case Else: iBack = False
  End Select
End Sub

Private Sub CBX_CPTuChon_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If Not IsArray(cData(0)) Then Exit Sub
  Dim T$
  Select Case KeyCode
    Case vbKeyDelete: oCBX_CPTuChon.Value = "": KeyCode = 0: iBack = False
    Case vbKeyTab
      T = oLBX_CPTuChon.List(0)
      If Not Text Like "*" & T & ",*" Then
        oCBX_CPTuChon.Value = UCase$(GetTBX_Separator(Text)) & oLBX_CPTuChon.List(0) _
            & IIf(Text <> "" And _
                right(Text, 1) <> ",", ",", "")
      End If
      oLBX_CPTuChon.Visible = True
      oLBX_CPTuChon.List = cData(0): iBack = False
    Case 188
      T = UCase$(Text)
      If right(T, 1) = "," Then KeyCode = 0
      oCBX_CPTuChon.Value = T
      oLBX_CPTuChon.Visible = True
      oLBX_CPTuChon.List = cData(0): iBack = False
    Case 13
      T = UCase$(Text)
      oCBX_CPTuChon.Value = T
      If right(T, 1) = "," Then
        oCBX_CPTuChon.Value = Left(T, Len(T) - 1)
      End If
      oLBX_CPTuChon.Clear: oLBX_CPTuChon.Visible = False: iBack = False
    Case vbKeyEscape: Call HideSearch
  End Select
End Sub


Private Function Text$()
  Text = oCBX_CPTuChon.Value
End Function
Private Sub HideSearch()
  oLBX_CPTuChon.Visible = False
  oLBX_CPTuChon.Clear
  iBack = False
End Sub
Attribute VB_Name = "Sheet02_10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet02_3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02_9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03_1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBX_Search_MaCK, 2, 0, MSForms, ComboBox"
Attribute VB_Control = "LBX_Search_MaCK, 1, 1, MSForms, ListBox"
Option Explicit

Dim MainData
Dim cData(2), tData, iBack As Boolean

Private Sub CBX_Search_MaCK_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  Call HideSearch
  [A1].Select
End Sub



Private Sub CBX_Search_MaCK_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  oCBX_TaiChinh.Value = vbNullString
End Sub

Private Sub LBX_Search_MaCK_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
   Case 13
    If Text <> vbNullString Then
      rTT_VCBs.Value = UCase$(Text)
      SearchMaCK
    End If
    Call HideSearch
   Case vbKeyEscape: Call HideSearch
  End Select
End Sub

Private Sub LBX_Search_MaCK_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  On Error Resume Next
  oCBX_TaiChinh.Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex)
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  Dim S$: S = Target.Address(0, 0)
  If S <> Cells.Address(0, 0) Then
    Select Case S
      Case rTT_VCBs.Address(0, 0), rTT_VCBs(1, 0).Address(0, 0)

      Case rTT_VCBs(5, 7).Address(0, 0)
        If rTT_VCBs(5, 7).Value <> "" Then
          OpenSite rTT_VCBs(5, 7).Value
        End If
      Case Else
'        If oCBX_TaiChinh.Visible = True Then
'
'          oCBX_TaiChinh.Visible = False
'          oLBX_TaiChinh.Visible = False
'          oLBX_TaiChinh.Clear
'        End If
    End Select
  End If
End Sub


Private Sub CBX_Search_MaCK_GotFocus()
  Center_Control
  If Not IsArray(cData(0)) Then cData(0) = DataCodeCTY
End Sub

Private Sub LBX_Search_MaCK_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  If oLBX_TaiChinh.ListIndex > 0 Then
    rTT_VCBs.Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex)
    Dim Rng As Range: Set Rng = rTT_VCBs(1, 3)
    Rng(1, 3).Resize(6).ClearContents
    Rng.Resize(6).ClearContents
    Rng(1, 5).Resize(6).ClearContents
    Rng(1, 1).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 1)
    Rng(3, 1).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 4)
    Rng(4, 1).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 3)
    Rng(5, 1).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 0)
    Rng(6, 1).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 7)
    Rng(2, 3).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 2)
    Rng(3, 3).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 8)
    Rng(4, 3).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 11)
    Rng(5, 3).Value = oLBX_TaiChinh.List(oLBX_TaiChinh.ListIndex, 6)
    'VCBs_HoSoDoanhNghiep Rng
  End If
  oCBX_TaiChinh.Visible = False
  oLBX_TaiChinh.Visible = False
  oLBX_TaiChinh.Clear
  [A1].Select
  
End Sub
Private Sub CBX_Search_MaCK_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
    Case vbKeyBack
      If Len(Text) > 0 Then
        If iBack Then
          cData(2) = FindLBX(Text, cData(0), oLBX_TaiChinh)
        Else
          cData(2) = cData(1)
          WriteToLBX cData(1), oLBX_TaiChinh
        End If
        iBack = True
      End If
    Case vbKey0 To vbKey9, vbKeyA To vbKeyZ
      If Len(Text) > 1 Then cData(1) = cData(2) Else cData(1) = cData(0)
      cData(2) = FindLBX(Text, cData(1), oLBX_TaiChinh)
      iBack = False
    Case Else: iBack = False
  End Select
End Sub
Private Sub CBX_Search_MaCK_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  Select Case KeyCode
    Case vbKeyEscape: Call HideSearch
    Case vbKeyDelete: oCBX_TaiChinh.Value = "": KeyCode = 0: iBack = False
    Case vbKeyTab
      KeyCode = 0: iBack = False
      rTT_VCBs.Value = IIf(KeyCode = vbKeyTab, oLBX_TaiChinh.List(0), UCase$(Text))
      If rTT_VCBs.Value <> vbNullString Then SearchMaCK
      Call HideSearch
    Case 13
      If Text <> vbNullString Then
        rTT_VCBs.Value = UCase$(Text)
        SearchMaCK
      End If
      Call HideSearch
  End Select
End Sub
Private Sub HideSearch()
  oLBX_TaiChinh.Visible = False
  oLBX_TaiChinh.Clear
  oCBX_TaiChinh.Visible = False
  iBack = False
End Sub
Private Function Text$()
  Text = oCBX_TaiChinh.Value
End Function
Attribute VB_Name = "Sheet03_2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03_3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03_4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03_5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03_6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05_1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




Attribute VB_Name = "Sheet05_10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet05_2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet05_3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05_4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05_6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet05_7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet05_8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet05_9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  oTerminate
  Call SetKey_SelectSheet(True)
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
  Call SetKey_SelectSheet
  Call SpeedOff
End Sub

Private Sub Workbook_Open()
  On Error Resume Next
  Call SpeedOff
  AddVLDT
  Dim Arr: Arr = DanhMuc_VCBs
  If IsArray(Arr) Then
    oCBX_CPTuChon.List = Arr
  End If
  Dim WS As Worksheet
  Set WS = ThisWorkbook.Worksheets("HOME")
  If Not WS Is Nothing Then
    WS.ScrollArea = "H17"
    Application.Goto WS.[H17]
  End If
  AlertMienPhi
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
  Select Case Sh.Name
    Case nWS_SGD: Sh.ScrollArea = "A1:L26"
    Case nWS_BDCP: Sh.ScrollArea = "A1:N27"
  End Select
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
'  Select Case Sh.Name
'    Case "HOSE", "HNX", "UPCOM", "CP theo ng|fffd|nh", _
'         UniMethod("Ph|fffd|as|fffd|i sinh"), _
'         UniMethod("Ch|fffd|uws|fffd|ng quy|fffd|eef|fffd|n")
'      If Target.Address(0, 0) = "B2" Then
'        If IE_GroupCK_VCBs(Target.Value) Then
'          'Get_BangGia_VCBs Sh.[A6], , IE_VCBs
'        End If
'      End If
'  End Select
End Sub

Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
  On Error Resume Next
  AllowAutoScroll = False
  DelShapes Sh, TextShape_AlertMienPhi
  RecordSelectedSheet SelectedSheets, Sh.Name, "HOME"
End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
  Application.EnableEvents = False
  If bGlobalRealtime And Now > tGlobalRealtime Then
    Call GlobalRealtime
  End If
  AllowTurnSheet = False
  'On Error Resume Next
  Dim sTarget$: sTarget = Target.Address(0, 0)
  Dim iCells As Boolean: iCells = sTarget = Cells.Address(0, 0)
  Select Case Sh.Name
  Case "HOSE", "HNX", "UPCOM", "CP theo ng|fffd|nh", _
       UniMethod("Ph|fffd|as|fffd|i sinh"), _
       UniMethod("Ch|fffd|uws|fffd|ng quy|fffd|eef|fffd|n")
    If Not iCells Then
      If Target.Cells.Count = 1 Then
        Dim Rng As Range
        Dim LR&
        Set Rng = rAct_VCBs(0, 1, xlToRight)
        LR = Rng(1, 1)(Rows.Count - Rng.Row, 1).End(xlUp).Row - Rng(1, 1).Row
        If LR > 5 And Not Intersect(Rng, Target) Is Nothing Then
          Del_Shape_VCBs "MuiTenFill"
          VCBs_Sort Target.Resize(LR + 1), Rng.Resize(LR + 1): Target(2, 1).Select
        End If
      End If
    End If
  Case nWS_BCDKT
'      If bReturn And Not iCells Then
'        If sTarget <> rTT_VCBs.Address(0, 0) Then
'          bReturn = False: Application.Goto wsReturn.[A1]
'        End If
'      End If
    Select Case sTarget
    Case rBCDKT_VCBs(0, 1).Address(0, 0)
      OpenSite VCBs_Finance & "0?stocksymbol=" & rTT_VCBs.Value
      [A1].Select
    Case rTT_VCBs.Address(0, 0): Call ShowSearchMaCK_TC
    End Select
  Case nWS_bcKQKD, nWS_bcLCTT, nWS_BCDKT_Q, nWS_bcKQKD_Q, nWS_bcLCTT_Q
'      Select Case sTarget
'        Case rTT_VCBs.Address(0, 0): bReturn = True: Set wsReturn = Target.Parent: Application.Goto rTT_VCBs
'        Case rKQKD_VCBs(0, 1).Address(0, 0)
'          OpenSite VCBs_Finance & "0?stocksymbol=" & rTT_VCBs.Value
'          [A1].Select
'        Case rKQKD_VCBs(-1, 1).Address(0, 0)
'          Application.Goto oWS_BCDKT.[A1]
'      End Select
  Case nWS_CSTC
    If sTarget = rData_CSTC(1, 2).Address(0, 0) Then
      Target.Value = IIf(Target.Value Like "*Theo n*m*", _
        UniMethod("Theo qu|fffd|ys|fffd|"), UniMethod("Theo n|fffd|aw|fffd|m"))
      [A1].Select
    ElseIf sTarget = rData_CSTC(3, 2).Address(0, 0) Then
      OpenSite "https://finance.vietstock.vn/" & rTT_VCBs.Value & "/tai-chinh.htm?tab=CSTC"
      [A1].Select
    End If
  Case nWS_Realtime1
    If sTarget = rD_Realtime1(0, 1).Address(0, 0) Then
      'bReturn = True: Set wsReturn = Target.Parent: Application.Goto rTT_VCBs
    ElseIf sTarget = rD_Realtime1(0, 8).Address(0, 0) Then
      OpenSite "https://finance.vietstock.vn/" & rTT_VCBs.Value & "/tai-chinh.htm?tab=CSTC"
      [A1].Select
    End If
  End Select
  Application.EnableEvents = True
End Sub
Attribute VB_Name = "fTimKiemMaCK"
Attribute VB_Base = "0{5A220135-0D4A-45B4-825A-B5D22DDC18B4}{41D3A108-B5E0-444F-8E3B-2182EED6547E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub BTN_Select_Click()
  'Debug.Print TypeName(Application.Caller)
End Sub

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  Unload Me
End Sub
Attribute VB_Name = "mdDanhMuc"
Option Explicit

Private Sub test_DanhMuc_VCBs()
  Dim A, I%, U%
  A = GetAllSettings(AppName_VCBs, Section_VCBs)
  If Not IsArray(A) Then Exit Sub
  U = UBound(A)
  For I = 0 To 0 Step -1
    Debug.Print A(I, 0), A(I, 1)
  Next
End Sub

Private Sub test_DanhMuc_VCBs2()
  Debug.Print IsArray(DanhMuc_VCBs)
End Sub
Function DanhMuc_VCBs() As Variant
Attribute DanhMuc_VCBs.VB_ProcData.VB_Invoke_Func = " \n14"
  Dim A, I%, B(), U%
  A = GetAllSettings(AppName_VCBs, Section_VCBs)
  If Not IsArray(A) Then Exit Function
  U = UBound(A): ReDim B(U): For I = 0 To U: B(I) = A(I, 1): Next
  DanhMuc_VCBs = B
End Function

Sub ThemDanhMuc_VCBs()
  Dim A, I%, E As Boolean, DanhMuc$
  With oCBX_CPTuChon:
    DanhMuc$ = .Value
    If DanhMuc = vbNullString Then Exit Sub
  End With
  A = GetAllSettings(AppName_VCBs, Section_VCBs)
  If Not IsArray(A) Then GoTo Ends
  For I = 0 To UBound(A)
    If UCase$(DanhMuc) = UCase$(A(I, 1)) Then E = True
  Next
Ends:
If Not E Then
  SaveSetting AppName_VCBs, Section_VCBs, DanhMuc, DanhMuc
End If
End Sub


Sub XoaDanhMuc_VCBs()
  On Error Resume Next
  Dim A, I%, DanhMuc$
  
  With oCBX_CPTuChon:
    DanhMuc$ = .Value
    If DanhMuc = vbNullString Then Exit Sub
    .Value = ""
  End With
  A = GetAllSettings(AppName_VCBs, Section_VCBs)
  If IsArray(A) Then
    For I = 0 To UBound(A)
      If UCase$(DanhMuc) = UCase$(A(I, 1)) Then
        DeleteSetting AppName_VCBs, Section_VCBs, A(I, 0)
      End If
    Next
  End If
  
End Sub



Sub XoaHetDanhMuc_VCBs()
  Dim A, I%
  A = GetAllSettings(AppName_VCBs, Section_VCBs)
  If IsArray(A) Then
    For I = UBound(A) To 0 Step -1
      DeleteSetting AppName_VCBs, Section_VCBs, A(I, 0)
    Next
  End If
  With oCBX_CPTuChon: .Clear: .Value = "": End With
  rCPTC_VCBs.Resize(1000, 29).ClearContents
End Sub


Function CPTuChon_CapNhat(Optional ByVal nWS$) As Boolean
  CPTuChon_CapNhat = ChBx_Realtime(nWS$).Value = 1
End Function


Sub btn_CPTuChon_TaoDanhMuc()
  oCBX_CPTuChon.Value = ""
End Sub
Sub btn_CPTuChon_ThemDanhMuc()
  If oCBX_CPTuChon.Value <> vbNullString Then
    ThemDanhMuc_VCBs
    Dim I%
    For I = 0 To oCBX_CPTuChon.ListCount - 1
      If UCase(oCBX_CPTuChon.List(I, 0)) = UCase$(oCBX_CPTuChon.Value) Then
        Exit Sub
      ElseIf UCase$(oCBX_CPTuChon.Value) Like UCase(oCBX_CPTuChon.List(I, 0)) & "*" Then
        oCBX_CPTuChon.List(I, 0) = oCBX_CPTuChon.Value
        Exit Sub
      End If
    Next
    oCBX_CPTuChon.AddItem oCBX_CPTuChon.Value, 0
  End If
End Sub
Sub btn_CPTuChon_XoaDanhMuc()
  Dim DM$
  DM = oCBX_CPTuChon.Value
  If DM = vbNullString Then Exit Sub
  oCBX_CPTuChon.RemoveItem oCBX_CPTuChon.ListIndex
  oCBX_CPTuChon.Value = vbNullString
End Sub


Attribute VB_Name = "mdFPTs_"
Option Explicit
Public Const A = "http://ezsearch.fpts.com.vn/Services/EzData/default2.aspx?s=215"
Function FPTs_TTDN(ByVal MaID&)
  FPTs_TTDN = "http://ezsearch.fpts.com.vn/Services/EzData/ProcessLoadRuntime.aspx?s=" & _
       MaID & "&cGroup=Overview&cPath=Services/EzData/OverviewProfile"
End Function

Attribute VB_Name = "mdInitObject"
Option Explicit
Public Const CK_Name = "CK_VCBs"
Public Const CK_Version = "1.0.1"
Public CK_PortInSite$
Public CK_Version_Cover$
Private Sub test_CheckVerIE()
  Alert CheckVerIE
End Sub
Function CheckVerIE() As Boolean
  Dim FSO As Object, S$(), PathIE$
  On Error Resume Next
  Set FSO = Glb_FSO
  If FSO Is Nothing Then Set FSO = CreateObject("Scripting.FileSystemObject")
  Set Glb_FSO = FSO
  PathIE = "C:\Program Files\Internet Explorer\iexplore.exe"
  GoSub Check
  PathIE = "C:\Program Files (x86)\Internet Explorer\iexplore.exe"
  GoSub Check
Ends: Set FSO = Nothing
Exit Function
Check:
  If FSO.FileExists(PathIE) Then
    S = Split(FSO.GetFileVersion(PathIE), ".")
    CheckVerIE = CInt(S(0)) >= 9: GoTo Ends
  End If
Return
End Function
Function SetIEbyURL(Optional ByVal cURL$, _
                    Optional ByVal oURL$, _
                    Optional ByRef IE As Object, _
                    Optional ByVal iVisible As Boolean = True, _
                    Optional ByVal iNewTab As Boolean, _
                    Optional ByVal iWait As Boolean, _
                    Optional ByVal ieOld As Boolean, _
                    Optional ByVal iRefresh As Boolean, _
                    Optional ByRef Index% = 1, _
                    Optional ByRef Glb_Shell As Object) As Boolean
  If cURL = vbNullString Then Exit Function
  Dim TmpURL$, cShlWs%, K%
  Dim Win, tIE As Object
  On Error Resume Next
  If Glb_Shell Is Nothing Then Set Glb_Shell = CreateObject("Shell.Application")
  Err.Clear
  Set IE = Nothing: GoSub GetWinIE
  SetIEbyURL = K < Index: Index = K + 1
  If oURL = vbNullString Then oURL = cURL
  If tIE Is Nothing Or Not ieOld Then
    GoSub Navigate2
  Else
    Set IE = tIE: GoSub Navigate
  End If
Ends:
  If iWait Then Call WaitIE(IE)
  IE.Visible = iVisible
  Set tIE = Nothing: Set Win = Nothing
Exit Function
Navigate:
  If iNewTab Then
    If SetIEbyURL Or Not TmpURL Like "*" & LCase$(oURL) & "*" Then
      IE.Navigate oURL, 1: GoSub GetWinIE
    End If
  Else
    If iRefresh Or Not TmpURL Like "*" & LCase$(oURL) & "*" Then IE.Navigate oURL
  End If
Return
Navigate2:
  Set IE = CreateObject("InternetExplorer.Application")
  IE.Navigate oURL
Return
GetWinIE:
  K = 0
  For Each Win In Glb_Shell.Windows()
    On Error Resume Next
    If (Win.Name = "Internet Explorer") Then
      If tIE Is Nothing Then Set tIE = Win
      TmpURL = LCase$(Win.LocationURL)
      If TmpURL Like "*" & LCase$(cURL) & "*" Then
        K = K + 1: If K = Index Then Set IE = Win: GoTo Ends
      End If
    End If
    On Error GoTo 0
    DoEvents
  Next
Return
End Function
 
Sub CloseIEbyURL(ByVal Url$)
  If Url = "" Then Exit Sub
  Dim oShell As Object, Win
  Set oShell = CreateObject("Shell.Application")
  On Error Resume Next
  If Err.Number <> 0 Then Exit Sub
  For Each Win In oShell.Windows()
    If Win.Name = "Internet Explorer" Then
      If (LCase$(Win.LocationURL) Like "*" & LCase$(Url) & "*") Then Win.Quit
    End If
    DoEvents
  Next
  Set oShell = Nothing: Set Win = Nothing
End Sub

Function WaitIE(ByRef IE As Object, _
       Optional ByVal LimitSecond% = 10)
  Dim Time As Date: Time = Now + TimeSerial(0, 0, LimitSecond)
  While IE.Busy Or IE.readyState <> 4:
    If Now < Time Then DoEvents Else Set IE = Nothing: Exit Function
  Wend
  WaitIE = True
End Function

Function HTMLNode(ByVal HDoc As Object, ParamArray ArrayNodes()) As Object
  Dim Node, K%
  For Each Node In ArrayNodes
    On Error Resume Next
    K = K + 1
    Set HDoc = HDoc.ChildNodes(Node)
    If Err.Number <> 0 Then
      On Error GoTo 0
      Err.Raise 50501, , "Error Node: " & K & "(" & Node & ")"
    End If
    DoEvents
  Next
  Set HTMLNode = HDoc
Ends: Set Node = Nothing
End Function
Function GetOClassname(clsName$, tagName$, oDoc As Object) As Object
  Static oClass As Object
  For Each oClass In oDoc.getElementsByTagName(tagName)
    If LCase$(oClass.className) = LCase$(clsName) Then
      Set GetOClassname = oClass: Exit For
    End If
    DoEvents
  Next
End Function

Private Sub test_GetVersion_VCBs()
  GetVersion_VCBs
End Sub
Function GetVersion_VCBs(Optional ByRef Ver$) As Boolean

  Dim D, I&, art, T$, Obj As Object, Tmp$
  Set D = ResponseHTML(FileUpload)
  Set art = D.getElementsByTagName("a")
  On Error Resume Next
  For I = art.Length - 1 To 0 Step -1
    T = LCase$(art(I).innerText)
    Err.Clear
    If T Like "*" & LCase(CK_Name) & "*v[0-9].[0-9].[0-9]*" Then GoSub eParent
  Next I
Ends:
  Set D = Nothing: Set Obj = D: Set art = D
Exit Function
Final:
  I = InStr(T, LCase(CK_Name))
  T = Mid(T, I + 2 + Len(CK_Name), Len(CK_Version))
  Ver = T: GetVersion_VCBs = T > CK_Version
  GoTo Ends
Return
eParent:
  Set Obj = art(I)
  Do
    Set Obj = Obj.parentElement
    Tmp = LCase(Obj.innerhtml)
    If LCase(Obj.innerhtml) Like "*data-lb-caption-desc=*hesanbi*" Then
      CK_PortInSite = MainRegExp(Left(Tmp, 100), "post-\d+", True)(0)
      GoSub Final
    End If
  Loop
Return
End Function
  




Function ResponseHTML(Url$) As Object
  On Error Resume Next
  Dim oHttp As Object, Doc As Object
  Set Doc = CreateObject("HTMLFile")
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    .Open "GET", Url, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send ""
    If .Status = 200 Then
      Doc.body.innerhtml = .responseText
      Set ResponseHTML = Doc
    End If
    Set Doc = Nothing
  End With
  Set oHttp = Nothing
End Function


Attribute VB_Name = "mdSyncCall"
Option Explicit
Public bGlobalRealtime As Boolean
Public fGlobalRealtime As Boolean
Public tGlobalRealtime As Date
Public Call_Glb(5)
Private CP As String

Public Lock_BTN_TaiChinh As Boolean

Sub GlobalRealtime()
  Dim I%, reCall As Boolean, nWS$
  If fGlobalRealtime Then Exit Sub
  fGlobalRealtime = True
  For I = 0 To UBound(Call_Glb)
    If Call_Glb(I) <> vbNullString Then
      Call getGroupCK_VCBs(Call_Glb(I), , , nWS)
      If Not CPTuChon_CapNhat(nWS) Then
        Call_Glb(I) = vbNullString
      Else
        reCall = True
        Get_BangGia_VCBs Call_Glb(I)
      End If
    End If
    DoEvents
  Next I
  fGlobalRealtime = False
  If reCall Then
    bGlobalRealtime = True
    tGlobalRealtime = Now + TimeSerial(0, 0, 4)
    Application.OnTime tGlobalRealtime, "GlobalRealtime", , True
  End If
End Sub
Private Sub CPRealtime()

End Sub
Sub ShowSearchMaCK_CP()
  Call Center_Control
  Dim T$: T = oCBX_CPTuChon.Value
  If T = vbNullString Or right(T, 1) = "," Then
    oLBX_CPTuChon True, rCPTC_VCBs(1, 2).Left + 1, rCPTC_VCBs(1, 2).Top + 1
  End If
End Sub
Sub ShowSearchMaCK_TC()

  DoEvents
  Lock_BTN_TaiChinh = True
  oWS_BCDKT.Activate
  Center_Control
  Application.Cursor = xlWait
  oCBX_TaiChinh.Value = UniMethod("|fffd|ang Load Data!")
  oCBX_TaiChinh.Enabled = False
  oCBX_TaiChinh True, rTT_VCBs.Left, rTT_VCBs.Top - 2
  oLBX_TaiChinh.List = DataCodeCTY
  oLBX_TaiChinh True, , rTT_VCBs.Top + 5 + rTT_VCBs.Height
  oCBX_TaiChinh.Value = ""
  oCBX_TaiChinh.Enabled = True
  oCBX_TaiChinh.Activate
  Application.Cursor = xlDefault
  Lock_BTN_TaiChinh = False
End Sub

' Home - Button ================================================
Sub home_btn_TaiChinh()
  bReturn = False
  If Lock_BTN_TaiChinh Then Exit Sub
  If TypeName(Application.Caller(1)) <> "String" Then Exit Sub
  Dim T#, Tmp$: T = Timer
  Dim WS As Worksheet, Idx%, nWS$
  Set WS = ThisWorkbook.ActiveSheet: nWS = WS.Name
  Select Case Application.Caller(1)
    Case "btn_TimKiemMaCK":
      If nWS = nWS_CPTC Then
        Call ShowSearchMaCK_CP
      ElseIf nWS = nWS_BCDKT Then
        Call ShowSearchMaCK_TC
      End If
    Case "btn_Refresh"
      Select Case nWS
        Case nWS_SGD: Call GetData_SGD
      End Select
    Case "btnViewData"
      Tmp = WS.[B2].Value
      Select Case nWS
        Case nWS_bgQM: Get_bgQuyMo_VCBs
        Case "HOSE", "HNX", "UPCOM", nWS_CPTN
          Call getGroupCK_VCBs(Tmp, , Idx)
          If CPTuChon_CapNhat(nWS) Then
            Arr_Glb(Idx) = Tmp
          Else
            Get_BangGia_VCBs Tmp
          End If
          Call GlobalRealtime
        Case UniMethod("Ph|fffd|as|fffd|i sinh"), _
             UniMethod("Ch|fffd|uws|fffd|ng quy|fffd|eef|fffd|n")
             Get_BangGia_VCBs Tmp
        Case nWS_Realtime1: btn_RealtimeCP_VS
        Case "Realtime 2"
        Case nWS_CSTC: btn_ChiSoTaiChinh_VS
        Case nWS_SKQ: btn_SuKienQuyen_VNDirect
      End Select
    Case "btn_Data_CPTuChon":
      oLBX_CPTuChon.Visible = False
      If oCBX_CPTuChon.Value <> "" Then
        btn_CPTuChon_ThemDanhMuc
        ClearAddItem_User_VCBs oCBX_CPTuChon.Value
        btn_GetData_CPTC
      End If
    Case "btn_DanhMuc": oCBX_CPTuChon.Value = ""
    Case "btn_ThemDanhMuc": oLBX_CPTuChon.Visible = False: Call btn_CPTuChon_ThemDanhMuc
    Case "btn_XoaDanhMuc": Call XoaDanhMuc_VCBs
    Case "btn_XoaHetDanhMuc": Call XoaHetDanhMuc_VCBs
    Case "btn_XoaDuLieu_CPTC": rCPTC_VCBs.Resize(1000, 29).ClearContents
    Case "btnData_TaiChinh"
      If FindMaCK(rTT_VCBs.Value) Then
        AlertAction "Running...", "", "btnData_TaiChinh", 0, _
                  nWS_BCDKT, nWS_bcKQKD, nWS_bcLCTT, nWS_BCDKT_Q, nWS_bcKQKD_Q, nWS_bcLCTT_Q
        Call ClearData_TaiChinh
        getDatas_TaiChinh False: getDatas_TaiChinh True
        AlertAction Text_XemDuLieu, Round(Timer - T, 0) & " Gi|fffd|y", "btnData_TaiChinh", 1000, _
                  nWS_BCDKT, nWS_bcKQKD, nWS_bcLCTT, nWS_BCDKT_Q, nWS_bcKQKD_Q, nWS_bcLCTT_Q
      Else
        AlertAction Text_XemDuLieu, Text_SaiMaCK, "btnData_TaiChinh", 1000, _
                  nWS_BCDKT, nWS_bcKQKD, nWS_bcLCTT, nWS_BCDKT_Q, nWS_bcKQKD_Q, nWS_bcLCTT_Q
      End If
    Case TextShape_AlertMienPhi: DelShapeAlertMienPhi
    Case "btn_Copy_LienHe_Messenger"
      OpenSite "https://m.me/he.sanbi": DelShapeAlertMienPhi
    Case "btn_Copy_LienHe_Bank"
      TextToClipBoard "0061001003794": DelShapeAlertMienPhi
    Case "btn_Copy_LienHe_Phone"
      TextToClipBoard "0382266388": DelShapeAlertMienPhi
    Case "btn_Copy_LienHe_DT": OpenSite "https://playerduo.com/sanbi": DelShapeAlertMienPhi
    Case "btn_Copy_LienHe_GPE"
      OpenSite "https://www.giaiphapexcel.com/diendan/threads/110725/" & CK_PortInSite: DelShapeAlertMienPhi
    Case "btn_ClearData": Call ClearData
    Case "btn_BCDKT":  Application.Goto oWS_BCDKT.Range("A1")
    Case "btn_BCDKT_Q": Application.Goto oWS_BCDKT_Q.Range(RangeCK_VCBs)
    Case "btn_BCKQKD": Application.Goto oWS_bcKQKD.Range(RangeCK_VCBs)
    Case "btn_BCKQKD_Q": Application.Goto oWS_bcKQKD_Q.Range(RangeCK_VCBs)
    Case "btn_BCLCTT": Application.Goto oWS_bcLCTT.Range(RangeCK_VCBs)
    Case "btn_BCLCTT_Q": Application.Goto oWS_bcLCTT_Q.Range(RangeCK_VCBs)
    Case "btn_HOSE": Application.Goto oWS_HOSE.Range(RangeCK_VCBs)
    Case "btn_HNX": Application.Goto oWS_HNX.Range(RangeCK_VCBs)
    Case "btn_UPCOM": Application.Goto oWS_UPCOM.Range(RangeCK_VCBs)
    Case "btn_CPTheoNganh": Application.Goto oWS_CPTN.Range(RangeCK_VCBs)
    Case "btn_GDTT": Application.Goto oWS_GDTT.Range(RangeCK_VCBs)
    Case "btn_bgQuyMo": Application.Goto oWS_bgQM.Range(RangeCK_VCBs)
    Case "btn_bgPhaiSinh": Application.Goto oWS_bgPS.Range(RangeCK_VCBs)
    Case "btn_ChungQuyen": Application.Goto oWS_CQ.Range(RangeCK_VCBs)
    Case "btn_WS_CSTC": Application.Goto oWS_CSTC.Range(RangeCK_VCBs)
    Case "btn_WS_SGD": Application.Goto oWS_SGD.Range(RangeCK_VCBs)
    Case "btn_WS_SKQ": Application.Goto oWS_SKQ.Range(RangeCK_VCBs)
    Case "btn_WS_CoPhieu": Application.Goto oWS_CoPhieu.Range(RangeCK_VCBs)
    Case "btn_WS_Realtime1": Application.Goto oWS_Realtime1.Range(RangeCK_VCBs)
    Case "btn_WS_Realtime2": Application.Goto oWS_Realtime2.Range(RangeCK_VCBs)
    Case "btn_ResetUngDung":
      ClearAllData
      Call oTerminate
      Tmp = IIf(Environ$("tmp") <> "", Environ$("tmp"), Environ$("temp"))
      Tmp = Tmp & "\" & "stocks.json"
      On Error Resume Next
      Kill Tmp
    Case "btn_ClearAllData": ClearAllData
    Case "btn_LienHe": AlertMienPhi
  End Select
  Set WS = Nothing
End Sub

' Button None Code ================================================
Sub btn_shape_NoneCode(): End Sub


Sub FindFormulaLinkSheet()
  Call ClearFMC_FormulaLinkSheet
  Dim WS As Worksheet, R, Tmp$, Rng As Range, tRng As Range, I As Boolean
  Dim RegExp As Object
  Set RegExp = CreateObject("VbScript.RegExp")
  Set WS = ThisWorkbook.ActiveSheet
  On Error Resume Next
  Set Rng = WS.Cells.SpecialCells(xlCellTypeFormulas)
  If Rng Is Nothing Then Exit Sub
  For Each R In Rng
    Tmp = R.Formula: GoSub Test
    If I Then
      If tRng Is Nothing Then
        Set tRng = R
      Else
        Set tRng = Union(R, tRng)
      End If
    End If
  Next
  If Not tRng Is Nothing Then
    With tRng
      .FormatConditions.Add _
          Type:=xlExpression, _
          Formula1:="=True"
      With .FormatConditions(.FormatConditions.Count)
        .SetFirstPriority
        With .Interior
          .Color = vbYellow
        End With
        .StopIfTrue = True
        .Font.Color = vbBlack
      End With
    End With
  End If
  Set RegExp = Nothing
  WS_FormulaLinkSheet = WS.Name
  TFormulaLinkSheet = Now + TimeSerial(0, 0, 15)
  Application.OnTime TFormulaLinkSheet, "ClearFMC_FormulaLinkSheet", , True
  Exit Sub
Test:
  I = False
  With RegExp
      .Global = True
      .IgnoreCase = True
      .Pattern = "(\[.{2,200}\])?\'?.{2,200}\'?\!{1}\$?\w{1,3}\$?\d{1,7}(\:\$?\w{1,3}\$?\d{1,7})?"
      I = .Test(Tmp)
  End With
Return
End Sub
Sub ClearFMC_FormulaLinkSheet()
  Dim WS As Worksheet, R, Tmp$, Rng As Range, tRng As Range, I As Boolean
  On Error Resume Next
  Application.OnTime TFormulaLinkSheet, "ClearFMC_FormulaLinkSheet", , False
  Set WS = ThisWorkbook.Worksheets(WS_FormulaLinkSheet)
  If WS Is Nothing Then Set WS = ThisWorkbook.ActiveSheet
  Set Rng = WS.Cells.SpecialCells(xlCellTypeAllFormatConditions)
  If Rng Is Nothing Then Exit Sub
  For Each R In Rng.FormatConditions
    If R.Formula = "=True" Then R.Delete
  Next
  WS_FormulaLinkSheet = ""
End Sub

Private Sub test_AddFMC_CellNewValue()
  'AddFMC_CellNewValue [A6:A7]
  WS_Name_FMC = ThisWorkbook.ActiveSheet.Name
  Call ClearFMC_CellNewValue
End Sub
Sub AddFMC_CellNewValue(ByVal Rng As Range, _
               Optional ByVal Bgr& = 39372, _
               Optional ByVal Forecolor&, _
               Optional ByRef WS_Name$)
  If Rng Is Nothing Then Exit Sub
  With Rng
    .FormatConditions.Add Type:=xlExpression, Formula1:="=True"
    With .FormatConditions(.FormatConditions.Count)
      .SetFirstPriority
      .Interior.Color = Bgr
      .Font.Color = Forecolor
      .StopIfTrue = True
    End With
    WS_Name = .Parent.Name
  End With
End Sub
Sub ClearFMC_CellNewValue()
  Dim R, Tmp$, Rng As Range, WS As Worksheet
  On Error Resume Next
  Application.OnTime T_FMC, "ClearFMC_CellNewValue", , False
  Set WS = ThisWorkbook.Worksheets(WS_Name_FMC)
  If WS Is Nothing Then Set WS = ThisWorkbook.ActiveSheet
  Set Rng = WS.Cells.SpecialCells(xlCellTypeAllFormatConditions)
  If Rng Is Nothing Then Exit Sub
  For Each R In Rng.FormatConditions
    If R.Formula = "=True" Then R.Delete
  Next
End Sub
Sub btn_Realtime_CPTuChon()
  Dim A&, B$, C As Date, Rng As Range, Arr, NameCTY$
  Set Rng = rD_Realtime1

  If Rng(-1, 2).Value > 0 Then
    If Rng(3, 1).Value > Rng(9, 1).Value Or (Rng(9, 1).Value = "" And Rng(3, 1).Value <> "") Then
      If Rng(9, 1).Value <> "" Then GoSub InsertDT
    End If
    timeAutoLoop = Now + TimeSerial(0, 0, Rng(-1, 2).Value)
    Application.OnTime timeAutoLoop, "btn_RealtimeCP_VS", , True
  Else
    On Error Resume Next
    Application.OnTime timeAutoLoop, "btn_RealtimeCP_VS", , False
    Call btn_RealtimeCP_VS
  End If
  Exit Sub
InsertDT:
  Dim LrData_Realtime&, T$()
  LrData_Realtime = Rng(9, 1)(Rows.Count - Rng(8, 1).Row, 1).End(xlUp).Row
  Rng(10, 1).Resize(LrData_Realtime, LcData2).Value = Rng(9, 1).Resize(LrData_Realtime, LcData2).Value
  Rng(9, 1).Resize(1, LcData2).ClearContents
  Rng(9, 1).Value = Rng(3, 1).Value: Rng(9, 2).Value = Rng.Value
  T = Split(Rng(2, 1).Value, " ")
  Rng(9, 3).Value = T(0): If UBound(T) >= 1 Then Rng(9, 4).Value = T(1)
  Rng(9, 5).Resize(1, 20).Value = dtRealTime
Return
End Sub

Attribute VB_Name = "mdSyncDeclare"
Option Explicit
Public Const IEVisible As Boolean = False
Public IE_Global(5) As Object 'SHDocVw.InternetExplorer
Public Arr_Glb(5)

'===============================
Public timeLoop_CPTC As Date
Public WS_FormulaLinkSheet$, TFormulaLinkSheet As Date
Public WS_Name_FMC$, T_FMC As Date

' VCBs===============================
Public Const AppName_VCBs$ = "DataStock_VCBs"
Public Const Section_VCBs$ = "DanhMucTuChon"
' VCBs===============================
Public Const VCBs_Quotes = "http://quotes.vcbs.com.vn"
Public Const VCBs_CTY = "http://quotes.vcbs.com.vn/PriceBoard/Acc/AT"
Public Const VCBs_AMW = "http://quotes.vcbs.com.vn/PriceBoard/Acc/amw"
Public Const VCBs_HOSE = "http://quotes.vcbs.com.vn/priceboard"
Public Const VCBs_Finance = "https://vcbs.com.vn/vn/Research/FinancialReports/"
Public Const VCBs_LogoGreen = "https://vcbs.com.vn/Static/img/logo.png"
Public Const VCBs_LogoWhite = "https://vcbs.com.vn/PriceBoard/Content/ImagesVCBS/logoc.png"
Public Const VCBs_Company = "https://vcbs.com.vn/vn/Research/Company?stocksymbol="
Public Const VCBs_bgQuyMo = "http://quotes.vcbs.com.vn/ccqm/"
' VNDirect ===============================
Public Const MainUrl$ = "https://www.vndirect.com.vn/portal/"
Public Const RequestURL$ = "https://www.vndirect.com.vn/portal/ajax/listed/SearchIncomeStatement.shtml"
Public Const siteSKQ = "https://www.vndirect.com.vn/portal/su-kien-quyen.shtml"
' Vietstock ===============================
Public Const siteVietStock = "https://finance.vietstock.vn/data/getderivativedealdetail"
Public Const siteVietStockDT = "https://finance.vietstock.vn/data/financeinfo"
Public Const VS_PhaiSinh = "https://finance.vietstock.vn/chung-khoan-phai-sinh/VN30F1M/hop-dong-tuong-lai.htm"
'====================================
Public VCBs_Order%, LcData2%
Public bGetOnly As Boolean
Public HisSite As Object
Public aDataCodeCTY, bDataCodeCTY, OldSGD, OldCpTuChon, dtRealTime(19)
Public wsReturn As Worksheet, bReturn As Boolean
Public Const op_ID1 = "fIncomeStatement_MoneyUnit"
Public Const op_ID2 = "fIncomeStatement_fiscalQuarter"
Public Const op_ID3 = "fIncomeStatement_fiscalYear"
Public Const op_ID4 = "fIncomeStatement_numberTerm"
Public Const Btn_Xem = "fIncomeStatement_View"
Public NoneData%
Public Const Shape_Front_ViewData = "btnViewData"
Public Const Shape_ChBx_Realtime = "btn_ChBx_Realtime"
Public Const TextShape_btnAll = "home_btn_TaiChinh"
Public timeAutoLoop As Date
Function Glb_WSs(ByVal WS$) As Worksheet: Set Glb_WSs = ThisWorkbook.Worksheets(WS): End Function

'IE.document.parentWindow.execScript "window.open('http://www.google.com','_blank');", "javascript"
Sub oInitialize()
  Set Glb_FSO = CreateObject("Scripting.FileSystemObject")
  Set Glb_oShell = CreateObject("Shell.Application")
  DataCodeCTY
End Sub
Sub oTerminate()
  Dim A, I%
  On Error Resume Next
  For I = 0 To UBound(IE_Global)
    If Not IE_Global(I) Is Nothing Then
      IE_Global(I).Quit: Set IE_Global(I) = Nothing
    End If
  Next I
  If Not HisSite Is Nothing Then
    If HisSite.Count > 0 Then
      For Each A In HisSite.Keys
        CloseIEbyURL A
      Next
    End If
  End If
  If IsArray(aDataCodeCTY) Then Erase aDataCodeCTY
  Set wsReturn = Nothing
  Set HisSite = Nothing
  Set Glb_oShell = Nothing
  On Error GoTo 0
End Sub

'Sheet - Form =========================================================
Function oCBX_CPTuChon() As MSForms.ComboBox
  Set oCBX_CPTuChon = ThisWorkbook.Worksheets(nWS_CPTC) _
        .CBX_CPTuChon
End Function
Function oLBX_CPTuChon(Optional ByVal Visible As Boolean, _
                       Optional ByVal Left% = 50, _
                       Optional ByVal Top% = 50, _
                       Optional ByVal Width% = 700, _
                       Optional ByVal Height% = 400) As MSForms.ListBox
  Set oLBX_CPTuChon = ThisWorkbook.Worksheets(nWS_CPTC) _
        .LBX_CPTuChon
  If Visible Then
    With oLBX_CPTuChon
      .Visible = True
      .Width = Width
      .Height = Height
      .Top = Top
      .Left = Left
    End With
  End If
End Function

Function oCBX_TaiChinh(Optional ByVal Visible As Boolean, _
                       Optional ByVal Left% = 50, _
                       Optional ByVal Top% = 50, _
                       Optional ByVal Width% = 300, _
                       Optional ByVal Height% = 20) As MSForms.ComboBox
  Set oCBX_TaiChinh = ThisWorkbook.Worksheets(nWS_BCDKT) _
        .CBX_Search_MaCK
  If Visible Then
    With oCBX_TaiChinh
      .Visible = True
      .Width = Width
      .Height = Height
      .Top = Top
      .Left = Left
    End With
  End If
End Function
Function oLBX_TaiChinh(Optional ByVal Visible As Boolean, _
                       Optional ByVal Left% = 50, _
                       Optional ByVal Top% = 50, _
                       Optional ByVal Width% = 700, _
                       Optional ByVal Height% = 400) As MSForms.ListBox
  Set oLBX_TaiChinh = ThisWorkbook.Worksheets(nWS_BCDKT) _
        .LBX_Search_MaCK
  If Visible Then
    With oLBX_TaiChinh
      .Visible = True
      .Width = Width
      .Height = Height
      .Top = Top
      .Left = Left
    End With
  End If
End Function
Function ChBx_Realtime(Optional ByVal nWS$) As Object
  If nWS = vbNullString Then
    Set ChBx_Realtime = ThisWorkbook.ActiveSheet.CheckBoxes(Shape_ChBx_Realtime)
  Else
    Set ChBx_Realtime = ThisWorkbook.Worksheets(nWS).CheckBoxes(Shape_ChBx_Realtime)
  End If
End Function
Function oShape_ChBx_Realtime(Optional ByVal WS As Worksheet) As Shape
  If WS Is Nothing Then Set WS = ThisWorkbook.ActiveSheet
  Set oShape_ChBx_Realtime = WS.Shapes(Shape_ChBx_Realtime)
End Function
'Sheet Object =========================================================
Function oWS_SGD() As Worksheet:          Set oWS_SGD = Glb_WSs(nWS_SGD): End Function
Function oWS_CPTC() As Worksheet:         Set oWS_CPTC = Glb_WSs(nWS_CPTC): End Function
Function oWS_HOSE() As Worksheet:         Set oWS_HOSE = Glb_WSs("HOSE"): End Function
Function oWS_HNX() As Worksheet:          Set oWS_HNX = Glb_WSs("HNX"): End Function
Function oWS_UPCOM() As Worksheet:        Set oWS_UPCOM = Glb_WSs("UPCOM"): End Function
Function oWS_CPTN() As Worksheet:         Set oWS_CPTN = Glb_WSs(nWS_CPTN): End Function
Function oWS_GDTT() As Worksheet:         Set oWS_GDTT = Glb_WSs(nWS_GDTT): End Function
Function oWS_bgQM() As Worksheet:         Set oWS_bgQM = Glb_WSs(nWS_bgQM): End Function
Function oWS_bgPS() As Worksheet:         Set oWS_bgPS = Glb_WSs(nWS_bgPS): End Function
Function oWS_CQ() As Worksheet:           Set oWS_CQ = Glb_WSs(nWS_CQ): End Function
Function oWS_BCDKT() As Worksheet:        Set oWS_BCDKT = Glb_WSs(nWS_BCDKT): End Function
Function oWS_BCDKT_Q() As Worksheet:      Set oWS_BCDKT_Q = Glb_WSs(nWS_BCDKT_Q): End Function
Function oWS_bcKQKD() As Worksheet:       Set oWS_bcKQKD = Glb_WSs(nWS_bcKQKD): End Function
Function oWS_bcKQKD_Q() As Worksheet:     Set oWS_bcKQKD_Q = Glb_WSs(nWS_bcKQKD_Q): End Function
Function oWS_bcLCTT() As Worksheet:       Set oWS_bcLCTT = Glb_WSs(nWS_bcLCTT): End Function
Function oWS_bcLCTT_Q() As Worksheet:     Set oWS_bcLCTT_Q = Glb_WSs(nWS_bcLCTT_Q): End Function
Function oWS_CSTC() As Worksheet:         Set oWS_CSTC = Glb_WSs(nWS_CSTC): End Function
Function oWS_SKQ() As Worksheet:          Set oWS_SKQ = Glb_WSs(nWS_SKQ): End Function
Function oWS_CoPhieu() As Worksheet:      Set oWS_CoPhieu = Glb_WSs(nWS_CoPhieu): End Function
Function oWS_Realtime1() As Worksheet:    Set oWS_Realtime1 = Glb_WSs(nWS_Realtime1): End Function
Function oWS_Realtime2() As Worksheet:    Set oWS_Realtime2 = Glb_WSs("Realtime 2"): End Function
'Range Object =========================================================
Function rAct_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  Set rAct_VCBs = Range("A6")(Row, Col)
  Select Case EndXL
    Case -4162, -4121, -4161, -4159
      Set rAct_VCBs = Range(rAct_VCBs, rAct_VCBs.End(EndXL))
  End Select
End Function
Function rSGD_VCBs() As Range:      Set rSGD_VCBs = oWS_SGD.Range("B6"):    End Function
'Range T|fffd|i Ch|fffd|nh ---------------------------------------
Function rTT_VCBs() As Range:       Set rTT_VCBs = oWS_BCDKT.Range("C2"):             End Function
Function rBCDKT_VCBs() As Range:    Set rBCDKT_VCBs = oWS_BCDKT.Range("B9"):          End Function
Function rBCDKT_Q_VCBs() As Range:  Set rBCDKT_Q_VCBs = oWS_BCDKT_Q.Range("B4"):      End Function
Function rKQKD_VCBs() As Range:     Set rKQKD_VCBs = oWS_bcKQKD.Range("B4"):          End Function
Function rKQKD_Q_VCBs() As Range:   Set rKQKD_Q_VCBs = oWS_bcKQKD_Q.Range("B4"):      End Function
Function rLCTT_VCBs() As Range:     Set rLCTT_VCBs = oWS_bcLCTT.Range("B4"):          End Function
Function rLCTT_Q_VCBs() As Range:   Set rLCTT_Q_VCBs = oWS_bcLCTT_Q.Range("B4"):      End Function
Function rData_CSTC() As Range:     Set rData_CSTC = oWS_CSTC.Range("B2"):  End Function
Function rTT_SKQ() As Range:        Set rTT_SKQ = oWS_SKQ.Range("E3"):      End Function
Function rData_SKQ() As Range:      Set rData_SKQ = oWS_SKQ.Range("B10"):   End Function
'---------------------------------------

Function rCPTC_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_CPTC
    Set rCPTC_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rCPTC_VCBs = .Range(rCPTC_VCBs, rCPTC_VCBs.End(EndXL))
    End Select
  End With
End Function

Function rHOSE_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_HOSE
    Set rHOSE_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rHOSE_VCBs = .Range(rHOSE_VCBs, rHOSE_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rHNX_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_HNX
    Set rHNX_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rHNX_VCBs = .Range(rHNX_VCBs, rHNX_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rUPCOM_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_UPCOM
    Set rUPCOM_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rUPCOM_VCBs = .Range(rUPCOM_VCBs, rUPCOM_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rCPTN_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_CPTN
    Set rCPTN_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rCPTN_VCBs = .Range(rCPTN_VCBs, rCPTN_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rGDTT_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_GDTT
    Set rGDTT_VCBs = .Range("D6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rGDTT_VCBs = .Range(rGDTT_VCBs, rGDTT_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rBgQM_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_bgQM
    Set rBgQM_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rBgQM_VCBs = .Range(rBgQM_VCBs, rBgQM_VCBs.End(EndXL))
    End Select
  End With
End Function
Function rBgPS_VCBs(Optional Row& = 1, Optional Col% = 1, Optional EndXL&) As Range
  With oWS_bgPS
    Set rBgPS_VCBs = .Range("A6")(Row, Col)
    Select Case EndXL
      Case -4162, -4121, -4161, -4159
        Set rBgPS_VCBs = .Range(rBgPS_VCBs, rBgPS_VCBs.End(EndXL))
    End Select
  End With
End Function
'=========================================================
Function rD_Realtime1(Optional ByVal Row& = 1, Optional ByVal Col% = 1, Optional EndXL&) As Range
  Dim Rng As Range: With oWS_Realtime1: Set Rng = .Range("B4")(Row, Col)
  Select Case EndXL: Case xlUp, xlDown, xlToRight, xlToLeft
    Set Rng = .Range(Rng, Rng(IIf(EndXL = xlUp, Rows.Count - Rng.Row, 1), _
      IIf(EndXL = xlToLeft, Columns.Count - Rng.Column, 1)).End(EndXL))
  End Select: End With: Set rD_Realtime1 = Rng
End Function
Function rD_Realtime2(Optional ByVal Row& = 1, Optional ByVal Col% = 1, Optional EndXL&) As Range
  Dim Rng As Range: With oWS_Realtime2: Set Rng = .Range("B13")(Row, Col)
  Select Case EndXL: Case xlUp, xlDown, xlToRight, xlToLeft
    Set Rng = .Range(Rng, Rng(IIf(EndXL = xlUp, Rows.Count - Rng.Row, 1), _
      IIf(EndXL = xlToLeft, Columns.Count - Rng.Column, 1)).End(EndXL))
  End Select: End With: Set rD_Realtime2 = Rng
End Function

Private Sub test_RGlb()
  Debug.Print RGlb(1, 1, , xlToLeft).Address(0, 0)
End Sub
Function RGlb(Optional ByVal Row& = 1, _
              Optional ByVal Col% = 1, _
              Optional ByVal Range$ = "A1", _
              Optional ByVal EndXL&, _
              Optional ByVal Sheet As Worksheet) As Range
  If Sheet Is Nothing Then Set Sheet = ThisWorkbook.ActiveSheet
  Dim Rng As Range: Set Rng = Sheet.Range(Range)(Row, Col)
  Select Case EndXL: Case xlUp, xlDown, xlToRight, xlToLeft
    Set Rng = Sheet.Range(Rng, Rng(IIf(EndXL = xlUp, Rows.Count - Rng.Row, 1), _
      IIf(EndXL = xlToLeft, Columns.Count - Rng.Column, 1)).End(EndXL))
  End Select: Set RGlb = Rng: Set Rng = Nothing
End Function

Private Sub test_RsGlb()
  Dim Rng As Range
  Set Rng = RsGlb(1, 1, , xlUp, xlToLeft)
  If Not Rng Is Nothing Then Debug.Print Rng.Address(0, 0)
End Sub
Function RsGlb(Optional ByVal Row& = 1, _
              Optional ByVal Col% = 1, _
              Optional ByVal Range = "A1", _
              Optional ByVal EndXL&, _
              Optional ByVal EndXL2&, _
              Optional ByVal Sheet As Worksheet) As Range
              
  If Sheet Is Nothing Then Set Sheet = ThisWorkbook.ActiveSheet
  Dim Rng As Range: Set Rng = Sheet.Range(Range)(Row, Col)
  Dim Rng2 As Range: Set Rng2 = Rng
  Dim tRng As Range
  Select Case EndXL:
    Case xlUp, xlDown, xlToRight, xlToLeft
      Set tRng = Rng(IIf(EndXL = xlUp, Rows.Count - Rng.Row, 1), _
        IIf(EndXL = xlToLeft, Columns.Count - Rng.Column, 1)).End(EndXL)
      If tRng.Row < Rng.Row Or tRng.Column < Rng.Column Then Exit Function
      Set Rng = Sheet.Range(Rng, tRng)
      Select Case EndXL
        Case xlUp, xlDown
          Select Case EndXL2
            Case xlToRight, xlToLeft
              Set tRng = Rng2(1, IIf(EndXL2 = xlToLeft, Columns.Count - Rng2.Column, 1)).End(EndXL2)
              If tRng.Column < Rng2.Column Then Exit Function
              Set Rng = Sheet.Range(Rng, tRng)
            Case Else: If EndXL2 > 0 Then Set Rng = Rng.Resize(, EndXL2)
          End Select
        Case xlToRight, xlToLeft
          Select Case EndXL2
            Case xlUp, xlDown
              Set tRng = Rng2(IIf(EndXL = xlUp, Rows.Count - Rng2.Row, 1), 1).End(EndXL2)
              If tRng.Row < Rng2.Row Then Exit Function
              Set Rng = Sheet.Range(Rng, tRng)
            Case Else: If EndXL2 > 0 Then Set Rng = Rng.Resize(EndXL2)
          End Select
      End Select
  End Select
  Set RsGlb = Rng
  Set Rng = Nothing: Set Rng2 = Nothing
End Function
'=========================================================

Sub URLs_IE(Url$)
  If HisSite Is Nothing Then Set HisSite = CreateObject("scripting.Dictionary")
  If Not HisSite.Exists(Url) Then HisSite.Add Url, ""
End Sub

Sub AddVLDT()
  Dim I%, Tmp$, Rng As Range:
  For I = 0 To 19
    Tmp = IIf(Tmp = vbNullString, "", Tmp & ",") & year(Now) - I
  Next
  Set Rng = rTT_VCBs(2, 1): GoSub SetVLDT
    Rng.Value = year(Now)
Exit Sub
SetVLDT:
  With Rng.Validation
    .Delete
    .Add Type:=xlValidateList, _
      AlertStyle:=xlValidAlertStop, _
      Operator:=xlBetween, _
      Formula1:=Tmp
    .IgnoreBlank = True
    .InCellDropdown = True
    .InputTitle = ""
    .ErrorTitle = ""
    .InputMessage = ""
    .ErrorMessage = ""
    .ShowInput = True
    .ShowError = True
  End With
Return
End Sub
'Format =========================================================

Sub FormatAllSV()
  On Error Resume Next
  Dim Arr, A
  Arr = Array("HNX", "UPCOM", "CP theo ng|fffd|nh")
  For Each A In Arr
    Application.CutCopyMode = False
    ThisWorkbook.Worksheets("HOSE").Cells.Copy
    ThisWorkbook.Worksheets(A).Activate
    Cells.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
    SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = True
    [A1].Select
  Next
End Sub

Sub FormatColumnSV()
  On Error Resume Next
  With ThisWorkbook.Worksheets("HOSE")
    Dim Rng As Range: Set Rng = .Range("A6")
    Rng(1, 2).Resize(500, 4).NumberFormat = "General"
    Rng(1, 7).Resize(500, 1).NumberFormat = "General"
    Rng(1, 9).Resize(500, 1).NumberFormat = "General"
    Rng(1, 11).Resize(500, 1).NumberFormat = "General"
    Rng(1, 13).Resize(500, 1).NumberFormat = "General"
    Rng(1, 15).Resize(500, 1).NumberFormat = "General"
    Rng(1, 17).Resize(500, 1).NumberFormat = "General"
    Rng(1, 19).Resize(500, 1).NumberFormat = "General"
    Rng(1, 22).Resize(500, 3).NumberFormat = "General"
  End With
End Sub
Sub FormatColumnSV2()
  On Error Resume Next
  Dim Arr, A
  Arr = Array("Ph|fffd|i sinh", nWS_CQ)
  For Each A In Arr
    With ThisWorkbook.Worksheets(A)
      Dim Rng As Range: Set Rng = .Range("A6")
      Rng(1, 3).Resize(500, 3).NumberFormat = "General"
      Rng(1, 7).Resize(500, 1).NumberFormat = "General"
      Rng(1, 9).Resize(500, 1).NumberFormat = "General"
      Rng(1, 11).Resize(500, 1).NumberFormat = "General"
      Rng(1, 13).Resize(500, 1).NumberFormat = "General"
      Rng(1, 15).Resize(500, 1).NumberFormat = "General"
      Rng(1, 17).Resize(500, 1).NumberFormat = "General"
      Rng(1, 19).Resize(500, 1).NumberFormat = "General"
      Rng(1, 21).Resize(500, 1).NumberFormat = "General"
      Rng(1, 24).Resize(500, 3).NumberFormat = "General"
    End With
  Next
End Sub
Sub AlertAction(Text$, TextWait$, Shape$, WaitMiliseconds%, ParamArray Sheets())
  On Error Resume Next
  If UBound(Sheets) < 0 Then Exit Sub
  Dim Agr, T$
  If WaitMiliseconds > 0 Then
    T = TextWait: GoSub aText
    DelayMSec WaitMiliseconds
  End If
  T = Text: GoSub aText
  Set Agr = Nothing
  Exit Sub
aText:
  For Each Agr In Sheets
    With ThisWorkbook.Worksheets(Agr).Shapes(Shape)
      .TextFrame.Characters.Text = T
    End With
  Next
Return
End Sub
Attribute VB_Name = "mdSyncUni"
Option Explicit

Function Text_CapNhatLienTuc() As String
  Text_CapNhatLienTuc = UniMethod("C|fffd|aaj|fffd|p nh|fffd|aaj|fffd|t li|fffd|n t|fffd|uj|fffd|c")
End Function
Function Text_XemDuLieu$(): Text_XemDuLieu = UniMethod("Xem D|fffd|uwx|fffd| Li|fffd|eej|fffd|u"): End Function
Function Text_SaiMaCK$(): Text_SaiMaCK = UniMethod("Sai M|fffd|ax|fffd| CK"): End Function
'Name Unicode =================================================================
Function Arr_CPTheoNganh() As Variant
  Arr_CPTheoNganh = Array(UniMethod("D|fffd|aaf|fffd|u kh|fffd|is|fffd|"), _
    UniMethod("C|fffd|oo|fffd|ng nghi|fffd|eej|fffd|p"), _
    UniMethod("D|fffd|uw|fffd||fffd|owj|fffd|c ph|fffd|aar|fffd|m v|fffd|af|fffd| Y t|fffd|ees|fffd|"), _
    UniMethod("Vi|fffd|eex|fffd|n Th|fffd|oo|fffd|ng"), _
    UniMethod("T|fffd|af|fffd|i ch|fffd|is|fffd|nh"), _
    UniMethod("C|fffd|oo|fffd|ng ngh|fffd|eej|fffd| Th|fffd|oo|fffd|ng tin"), _
    UniMethod("Nguy|fffd|ee|fffd|n v|fffd|aaj|fffd|t li|fffd|eej|fffd|u"), _
    UniMethod("H|fffd|af|fffd|ng Ti|fffd|ee|fffd|u d|fffd|uf|fffd|ng"), _
    UniMethod("D|fffd|ij|fffd|ch v|fffd|uj|fffd| Ti|fffd|ee|fffd|u d|fffd|uf|fffd|ng"), _
    UniMethod("Ti|fffd|eej|fffd|n |fffd|is|fffd|ch C|fffd|ooj|fffd|ng |fffd|dd|fffd||fffd|oof|fffd|ng"), _
    UniMethod("Ng|fffd|aa|fffd|n h|fffd|af|fffd|ng"))
End Function

'Name Unicode - Worksheet =================================================================
Function nWS_HOSE$(): nWS_HOSE = "HOSE": End Function
Function nWS_HNX$(): nWS_HNX = "HNX": End Function
Function nWS_UPCOM$(): nWS_UPCOM = "UPCOM": End Function
Function nWS_SGD$(): nWS_SGD = UniMethod("S|fffd|AF|fffd|N GIAO D|fffd|IJ|fffd|CH"): End Function
Function nWS_CPTC$(): nWS_CPTC = UniMethod("CP T|fffd|uwj|fffd| Ch|fffd|oj|fffd|n"): End Function
Function nWS_CPTN$(): nWS_CPTN = UniMethod("CP Theo Ng|fffd|af|fffd|nh"): End Function
Function nWS_GDTT$(): nWS_GDTT = UniMethod("Giao D|fffd|ij|fffd|ch Th|fffd|or|fffd|a Thu|fffd|aaj|fffd|n"): End Function
Function nWS_bgQM$(): nWS_bgQM = UniMethod("Qu|fffd|yx|fffd| M|fffd|owr|fffd|"): End Function
Function nWS_bgPS$(): nWS_bgPS = UniMethod("Ph|fffd|as|fffd|i Sinh"): End Function
Function nWS_CQ$(): nWS_CQ = UniMethod("Ch|fffd|uws|fffd|ng Quy|fffd|eef|fffd|n"): End Function
Function nWS_BCDKT$(): nWS_BCDKT = UniMethod("B|fffd|ar|fffd|ng C|fffd|aa|fffd|n |fffd|DD|fffd||fffd|oos|fffd|i K|fffd|ees|fffd| To|fffd|as|fffd|n"): End Function
Function nWS_BCDKT_Q$(): nWS_BCDKT_Q = UniMethod("B|fffd|ar|fffd|ng C|fffd|aa|fffd|n |fffd|DD|fffd||fffd|oos|fffd|i K|fffd|ees|fffd| To|fffd|as|fffd|n - Qu|fffd|ys|fffd|"): End Function
Function nWS_bcKQKD$(): nWS_bcKQKD = UniMethod("BC K|fffd|ees|fffd|t Qu|fffd|ar|fffd| Kinh Doanh"): End Function
Function nWS_bcKQKD_Q$(): nWS_bcKQKD_Q = UniMethod("BC K|fffd|ees|fffd|t Qu|fffd|ar|fffd| Kinh Doanh - Qu|fffd|ys|fffd|"): End Function
Function nWS_bcLCTT$():   nWS_bcLCTT = UniMethod("BC L|fffd|uw|fffd|u Chuy|fffd|eer|fffd|n Ti|fffd|eef|fffd|n T|fffd|eej|fffd|"): End Function
Function nWS_bcLCTT_Q$():   nWS_bcLCTT_Q = UniMethod("BC L|fffd|uw|fffd|u Chuy|fffd|eer|fffd|n Ti|fffd|eef|fffd|n T|fffd|eej|fffd| - Qu|fffd|ys|fffd|"): End Function
Function nWS_CSTC$(): nWS_CSTC = UniMethod("Ch|fffd|ir|fffd| S|fffd|oos|fffd| T|fffd|af|fffd|i Ch|fffd|is|fffd|nh"): End Function
Function nWS_SKQ$(): nWS_SKQ = UniMethod("S|fffd|uwj|fffd| Ki|fffd|eej|fffd|n Quy|fffd|eef|fffd|n"): End Function
Function nWS_CoPhieu$(): nWS_CoPhieu = UniMethod("C|fffd|oor|fffd| Phi|fffd|ees|fffd|u"): End Function
Function nWS_BDCP$(): nWS_BDCP = UniMethod("Bi|fffd|ees|fffd|n |fffd|DD|fffd||fffd|ooj|fffd|ng C|fffd|oor|fffd| Phi|fffd|ees|fffd|u"): End Function
Function nWS_Realtime1$(): nWS_Realtime1 = UniMethod("C|fffd|OOR|fffd| PHI|fffd|EES|fffd|U - Realtime"): End Function

Attribute VB_Name = "mdVCBS_BGTT"
Option Explicit

Private Sub test_getGroupCK_VCBs()
  Dim BangGia$, Gr$, Idx%, nWS$, iTab As Boolean
  BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| PH|fffd|AS|fffd|I SINH")
  BangGia = UCase$(UniMethod("Vi|fffd|eex|fffd|n Th|fffd|oo|fffd|ng"))
  BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| QU|fffd|YX|fffd| M|fffd|OWR|fffd|")
  BangGia = "GDTT HOSE"
  Call getGroupCK_VCBs(BangGia$, Gr$, Idx%, nWS$, iTab)
  
  Debug.Print BangGia$, Gr$, Idx%, nWS$, iTab
End Sub
Function getGroupCK_VCBs(ByVal BangGia$, _
                Optional ByRef Group$, _
                Optional ByRef Idx%, _
                Optional ByRef nSheet$, _
                Optional ByRef iTab As Boolean) As Boolean
  BangGia = UCase$(BangGia)
  Idx = -1
  Select Case True
    Case BangGia = "GDTT HOSE", BangGia = "GDTT HNX", BangGia = "GDTT UPCOM"
      Group = Split(BangGia, " ")(1) & "_Group":
      iTab = True: Idx = 0: nSheet = nWS_GDTT
    Case BangGia = UCase$(nWS_CPTC): Group = "tabli1": Idx = 1: nSheet = nWS_CPTC
    Case BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| HOSE"), BangGia Like "*VN30", BangGia Like "*VNXALL", _
         BangGia Like "*HSX100", BangGia Like "*HSXALL", BangGia Like "*HSXMID", _
         BangGia Like "*HSXSML", BangGia Like "*VNX50", BangGia Like "*VNSI"
      Group = "HOSE_Group": iTab = True: Idx = 2: nSheet = "HOSE"
    Case BangGia Like UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| HNX*")
      Group = "HNX_Group": iTab = True: Idx = 3: nSheet = "HNX"
    Case BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| UPCOM")
      Group = "UPCOM_Group": iTab = True: Idx = 4: nSheet = "UPCOM"
    Case BangGia = UCase$(UniMethod("D|fffd|aaf|fffd|u kh|fffd|is|fffd|")), _
         BangGia = UCase$(UniMethod("C|fffd|oo|fffd|ng nghi|fffd|eej|fffd|p")), _
         BangGia = UCase$(UniMethod("D|fffd|uw|fffd||fffd|owj|fffd|c ph|fffd|aar|fffd|m v|fffd|af|fffd| Y t|fffd|ees|fffd|")), _
         BangGia = UCase$(UniMethod("Vi|fffd|eex|fffd|n Th|fffd|oo|fffd|ng")), _
         BangGia = UCase$(UniMethod("T|fffd|af|fffd|i ch|fffd|is|fffd|nh")), _
         BangGia = UCase$(UniMethod("C|fffd|oo|fffd|ng ngh|fffd|eej|fffd| Th|fffd|oo|fffd|ng tin")), _
         BangGia = UCase$(UniMethod("Nguy|fffd|ee|fffd|n v|fffd|aaj|fffd|t li|fffd|eej|fffd|u")), _
         BangGia = UCase$(UniMethod("H|fffd|af|fffd|ng Ti|fffd|ee|fffd|u d|fffd|uf|fffd|ng")), _
         BangGia = UCase$(UniMethod("D|fffd|ij|fffd|ch v|fffd|uj|fffd| Ti|fffd|ee|fffd|u d|fffd|uf|fffd|ng")), _
         BangGia = UCase$(UniMethod("Ti|fffd|eej|fffd|n |fffd|is|fffd|ch C|fffd|ooj|fffd|ng |fffd|dd|fffd||fffd|oof|fffd|ng")), _
         BangGia = UCase$(UniMethod("Ng|fffd|aa|fffd|n h|fffd|af|fffd|ng"))
      Group = "tabli11": iTab = True: Idx = 5:: nSheet = nWS_CPTN
    Case BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| PH|fffd|AS|fffd|I SINH"): Group = "tabli14": Idx = 0: nSheet = nWS_bgPS
    Case BangGia = UCase$(UniMethod("Ch|fffd|uws|fffd|ng quy|fffd|eef|fffd|n")): Group = "tabli15": Idx = 0: nSheet = nWS_CQ
    Case BangGia = UCase$(UniMethod("Tr|fffd|as|fffd|i phi|fffd|ees|fffd|u doanh nghi|fffd|eej|fffd|p")): Group = "tabli16": Idx = 0: nSheet = nWS_CQ
    Case Else
      Exit Function
  End Select
  getGroupCK_VCBs = True
End Function

Private Sub test_IE_GroupCK_VCBs()
  Dim BangGia$
  
  BangGia = UCase$(UniMethod("Ch|fffd|uws|fffd|ng quy|fffd|eef|fffd|n"))
  BangGia = UCase$(UniMethod("Nguy|fffd|ee|fffd|n v|fffd|aaj|fffd|t li|fffd|eej|fffd|u"))
  BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| UPCOM")
  BangGia = UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| PH|fffd|AS|fffd|I SINH")
  BangGia = UCase$(UniMethod("Vi|fffd|eex|fffd|n Th|fffd|oo|fffd|ng"))
  Debug.Print IE_GroupCK_VCBs(BangGia)
End Sub
Function IE_GroupCK_VCBs(ByVal BangGia$, Optional ByRef Idx%, Optional ByRef nSheet$) As Boolean
  If BangGia = vbNullString Then: Exit Function
  BangGia = UCase$(BangGia): Idx = 0
  Dim oGroup, Doc, Div, li, li2
  Dim WF As WorksheetFunction
  Dim Group$, tGroup$, I%, Rows%, K%
  Dim iTab As Boolean, iGrp As Boolean, iT As Boolean, Tmp As Boolean
  If Not getGroupCK_VCBs(BangGia, Group, Idx, nSheet, iTab) Then Exit Function
  Set WF = Application.WorksheetFunction
  For I = 1 To UBound(IE_Global) + 1
    DoEvents
    If SetIEbyURL(VCBs_HOSE, , IE_Global(Idx), IEVisible, False, True, False, False, I, Glb_oShell) Then
      GoSub Wait: GoSub nGroup: Exit For
    End If
    GoSub iGroup: If iGrp = True Then GoTo Final
  Next I
Final:
  If Err.Number <> 0 Then GoTo Ends
  IE_GroupCK_VCBs = True
Ends:
  Set li = Nothing: Set oGroup = li: Set Div = li: Set li2 = li: Set WF = li
Exit Function
iGroup:
  Set oGroup = IE_Global(Idx).document.getElementById(Group)
  If Not iTab Then
    If oGroup.className <> "li_select" Then
      oGroup.getElementsByTagName("a")(0).Click: GoSub Wait
      
      If Idx = 1 Then
        On Error Resume Next: K = 0
          Do Until Tmp
            Tmp = oGroup.getElementsByTagName("a")(0).className = "selected" _
              And oGroup.className = "li_select"
            IE_Global(Idx).document.parentWindow.execScript TextScript_TabUser
            K = K + 1: If K > 30 Then Exit Do
            DelayMSec 200: DoEvents
          Loop
          oGroup.getElementsByClassName("add")(0).getElementsByTagName("input")(0).setAttribute "value", nWS_CPTC
          oGroup.getElementsByClassName("add")(0).getElementsByTagName("button")(0).Click
        On Error GoTo 0
      End If
    End If
    GoTo Final
  End If
  If oGroup.className <> "li_select" Then Return
  GoSub nGroup
  iGrp = True
Return
nGroup:
  
  Set oGroup = IE_Global(Idx).document.getElementById(Group)
  For Each li2 In oGroup.getElementsByTagName("ul")(0) _
                  .getElementsByTagName("li")
    tGroup = UCase$(Trim$(WF.Clean(li2.innerText)))
    If tGroup Like BangGia Then
      If Group = "tabli11" Then
        If li2.getElementsByTagName("a")(0).getAttribute("style") Like "*background-color: inherit*" Then
          li2.getElementsByTagName("a")(0).Click: GoSub Wait
        End If
      Else
        If li2.getElementsByTagName("a")(0).className <> "TabGroupSelect selected" Then
          li2.getElementsByTagName("a")(0).Click: GoSub Wait
        End If
      End If
      Exit For
    End If
    DoEvents
  Next
Return

Wait:
  On Error Resume Next
  K = 0
  Do Until IE_Global(Idx).document.getElementById("priceboardContentTableBody").Rows.Length > 3
    DelayMSec 200: DoEvents
    K = K + 1: If K > 30 Then Exit Do
  Loop
  On Error GoTo 0
Return
End Function



'9650 tang
'9660 giam
Sub btn_GetData_CPTC()
  Dim nSheet$
  Call getGroupCK_VCBs(nWS_CPTC, , , nSheet)
  If CPTuChon_CapNhat(nSheet) Then
    timeLoop_CPTC = Now + TimeSerial(0, 0, 5)
    Application.OnTime timeLoop_CPTC, "btn_GetData_CPTC", , True
  Else
    On Error Resume Next
    Application.OnTime timeLoop_CPTC, "btn_GetData_CPTC", , False
  End If
  Get_BangGia_VCBs nWS_CPTC
  Debug.Print "End"
End Sub

Private Sub test_Get_BangGia_VCBs()
  'Get_BangGia_VCBs UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| UPCOM")
  Get_BangGia_VCBs UCase$(UniMethod("Vi|fffd|eex|fffd|n Th|fffd|oo|fffd|ng"))
  'Get_BangGia_VCBs UniMethod("B|fffd|AR|fffd|NG GI|fffd|AS|fffd| PH|fffd|AS|fffd|I SINH")
End Sub
Sub Get_BangGia_VCBs(ByVal BangGia$)
  If BangGia = vbNullString Then Exit Sub
  Dim T#: T = Timer
  On Error Resume Next
  Dim IE As Object
  Dim Rng As Range, IdxA%, nSheet$
  Dim iA As Boolean, Arr As Variant
  Dim HTML As Object
  Set HTML = CreateObject("HTMLFile")
  Call IE_GroupCK_VCBs(BangGia, IdxA, nSheet)
  
  If nSheet = vbNullString Or IdxA = -1 Then GoTo Ends
  Arr = Arr_Glb(IdxA): Set IE = IE_Global(IdxA)
  Application.ScreenUpdating = False
  Set Rng = ThisWorkbook.Worksheets(nSheet).Range("A6")
  Rng.Resize(1000, 29).ClearContents
  WS_Name_FMC = Rng.Parent.Name: Call ClearFMC_CellNewValue

  Dim Rows, cRows%, Row%, Col%, Cols, cCols%, Tmp$, LTmp%
  Dim Cell, Doc, Tbl, Node, className$, Color&, Bgr&
  Dim RngFont(5) As Range, Colors(5), Total(), K%
  Dim RngB As Range
  Colors(0) = vbWhite: Colors(1) = vbYellow: Colors(2) = vbRed
  Colors(3) = vbGreen: Colors(4) = 13382655: Colors(5) = 16763904

  Set Doc = IE.document
  HTML.body.innerhtml = Doc.getElementById("priceBoardView").innerhtml
  Set Tbl = HTML.getElementsByTagName("tbody")(0)

  Set Rows = Tbl.ChildNodes:  cRows = Rows.Length
  Set Cols = Rows(3).Cells:   cCols = Cols.Length
  
  If Not Rows(3).Cells(0).getElementsByTagName("input")(0) Is Nothing Then K = 1
  If IsArray(Arr) Then
    iA = (UBound(Arr) = cRows - 2) And (UBound(Arr, 2) = cCols - K)
  End If
  
  ReDim Total(1 To cRows - 2, 1 To cCols - K)
  For Row = 4 To cRows
    Set Cols = Rows(Row - 1).Cells
    For Col = 1 + K To cCols
      Err.Clear
      If Len(Cols(Col - 1).className) > 1 Then
        If Err.Number = 0 Then _
        className = LCase(Cols(Col - 1).className): GoSub RngColor
      End If
      Tmp = Cols(Col - 1).innerText: LTmp = Len(Tmp)
      If LTmp >= 3 Then If LTmp - InStrRev(Tmp, ",") = 2 Then Tmp = Tmp & 0
      Total(Row - 3, Col - K) = Tmp
      If iA Then
        If Total(Row - 3, Col - K) <> Arr(Row - 3, Col - K) Then
            GoSub RngBGR
        End If
      End If
      DoEvents
    Next
  Next
  Dim I: For I = 0 To 5
    If Not RngFont(I) Is Nothing Then RngFont(I).Font.Color = Colors(I)
    DoEvents
  Next
  If Not RngB Is Nothing Then AddFMC_CellNewValue RngB
  Rng.Resize(cRows - 3, cCols - K).Value = Total
  Arr_Glb(IdxA) = Total
Ends:
  Application.ScreenUpdating = True
  Exit Sub
RM: Node.ParentNode.RemoveChild Node: Return
RngColor:
  Dim Idx%
  Select Case True
    Case className Like "*no_cl*":    Idx = 0
    Case className Like "*unchange*": Idx = 1
    Case className Like "*loser*":    Idx = 2
    Case className Like "*gainer*":   Idx = 3
    Case className Like "*hitceil*":  Idx = 4
    Case className Like "*hitfloor*": Idx = 5
  End Select
  Set RngFont(Idx) = UnionA(RngFont(Idx), Rng(Row - 3, Col - K))
Return
RngBGR:
  Set RngB = UnionA(RngB, Rng(Row - 3, Col - K))
Return
End Sub

Sub Get_bgQuyMo_VCBs()
  Dim T#: T = Timer
  On Error Resume Next
  Dim Rng As Range, IdxA%
  Dim HTML As Object, oHttp As Object
  Dim iA As Boolean, Arr As Variant

  Application.ScreenUpdating = False
  Set Rng = oWS_bgQM.Range("A6")
  Rng.Resize(100, 13).ClearContents

  Dim Rows, cRows%, Row%, Col%, Cols, cCols%, Tmp$, LTmp%
  Dim Cell, Doc, Tbl, Node, className$, Color&, Bgr&
  Dim RngFont(5) As Range, Colors(5), Total(), K%
  Dim RngB As Range
  Colors(0) = vbWhite: Colors(1) = vbYellow: Colors(2) = vbRed: Colors(3) = vbGreen
  GoSub SubHttp
  Set Tbl = HTML.getElementsByTagName("tbody")(1)

  Set Rows = Tbl.ChildNodes:  cRows = Rows.Length
  Set Cols = Rows(2).Cells:   cCols = Cols.Length
  
  ReDim Total(1 To cRows - 2, 1 To cCols)
  For Row = 3 To cRows
    If Rows(Row - 1).Cells(0).innerText = Rows(Row - 2).Cells(0).innerText Then
      Row = Row + 1: K = K + 1
    End If
    Set Cols = Rows(Row - 1).Cells
      For Col = 1 To cCols
        Err.Clear
        className = LCase(Cols(Col - 1).className): GoSub RngColor
        Tmp = Cols(Col - 1).innerText
        Tmp = Replace(Tmp, "%%", "%")
        Total(Row - 2 - K, Col) = Tmp
        DoEvents
      Next
  Next
  For Row = 0 To 3
    If Not RngFont(Row) Is Nothing Then RngFont(Row).Font.Color = Colors(Row)
    DoEvents
  Next
  Rng.Resize(cRows - 2 - K, cCols).Value = Total

Ends:
  Application.ScreenUpdating = True
  Exit Sub
RngColor:
  Dim Idx%
  Select Case className
    Case "s0":    Idx = 0
    Case "n": Idx = 1
    Case "r":    Idx = 2
    Case "g":   Idx = 3
  End Select
  Set RngFont(Idx) = UnionA(RngFont(Idx), Rng(Row - 2 - K, Col))
Return
RngBGR:
  Set RngB = UnionA(RngB, Rng(Row - 2 - K, Col))
Return
'
SubHttp:
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    .Open "GET", VCBs_bgQuyMo, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send ""
    If .Status <> 200 Then Return
    Set HTML = CreateObject("HTMLFile")
    HTML.body.innerhtml = .responseText
  End With
Return
End Sub

Private Sub test_Get_GDTT_VCBs()
  Get_GDTT_VCBs "GDTT HOSE"
End Sub
Sub Get_GDTT_VCBs(BangGia$)
  If BangGia = vbNullString Then Exit Sub
  Dim T#: T = Timer
  'On Error Resume Next
  Dim IE As Object
  Dim Rng As Range, IdxA%, nSheet$

  Dim HTML As Object
  Set HTML = CreateObject("HTMLFile")

  Call IE_GroupCK_VCBs(BangGia, IdxA, nSheet)
  
  If nSheet = vbNullString Or IdxA = -1 Then GoTo Ends
  Set IE = IE_Global(IdxA)
  Application.ScreenUpdating = False
  Set Rng = ThisWorkbook.Worksheets(nSheet).Range("B6")
  Rng.Resize(1000, 15).ClearContents

  Dim Rows, cRows%, Row%, Col%, Cols, cCols%, Tmp$, LTmp%
  Dim Cell, Doc, Tbl, Node, className$, Color&, Bgr&
  Dim RngFont(5) As Range, Colors(5), Total(), K%
  Dim RngB As Range, tbID, I%
  tbID = Array(0, "tl1", "tl3", "tl2")
  
  Colors(0) = vbWhite: Colors(1) = vbYellow: Colors(2) = vbRed
  Colors(3) = vbGreen: Colors(4) = 13382655: Colors(5) = 16763904
  Set Doc = IE.document
  Dim tRng As Range
  For I = 1 To 3
    Set tRng = Rng(1, (I - 1) * 5 + 1)
    GoSub GetTB
    tRng.Resize(cRows - 2, cCols).Value = Total
  Next
  For Row = 0 To 5
    If Not RngFont(Row) Is Nothing Then RngFont(Row).Font.Color = Colors(Row)
    DoEvents
  Next
  
Ends:
  Application.ScreenUpdating = True
Exit Sub
GetTB:
  Set Tbl = Doc.getElementById(tbID(I))
  Set Rows = Tbl.Rows:  cRows = Rows.Length
  Set Cols = Rows(3).Cells:   cCols = Cols.Length
  If IsArray(Total) Then Erase Total
  ReDim Total(1 To cRows - 2, 1 To cCols)
  For Row = 3 To cRows
    Set Cols = Rows(Row - 1).Cells
    For Col = 1 To cCols
      Err.Clear
      className = LCase(Cols(Col - 1).className): GoSub RngColor
      Total(Row - 2, Col) = Cols(Col - 1).innerText
      DoEvents
    Next
  Next
Return
RngColor:
  Dim Idx%
  Select Case True
    Case className Like "*none_col*":    Idx = 0
    Case className Like "*unchange*": Idx = 1
    Case className Like "*loser*":    Idx = 2
    Case className Like "*gainer*":   Idx = 3
    Case className Like "*hitceil*":  Idx = 4
    Case className Like "*hitfloor*": Idx = 5
  End Select
  Set RngFont(Idx) = UnionA(RngFont(Idx), tRng(Row - 2, Col))
Return
End Sub



Function UnionA(RngA As Range, RngB As Range) As Range
  If RngA Is Nothing And Not RngB Is Nothing Then
    Set UnionA = RngB
  ElseIf RngB Is Nothing Then
    Set UnionA = RngA
  Else
    Set UnionA = Union(RngA, RngB)
  End If
End Function

Private Sub test_VCBs_Sort()
  VCBs_Sort [C5:C389], [C5:AC389]
End Sub
Sub VCBs_Sort(Rng As Range, Optional Rngs As Range)
  Dim Order%, Cell As Range, MuiTenFill, L%, T%
  Set Cell = Rng(1, 1)

  Order = IIf(VCBs_Order = 2, 1, 2)
  If Rngs Is Nothing Then Set Rngs = Rng
  With Rng.Parent
    .Sort.SortFields.Clear
    .Sort.SortFields.Add2 Key:=Rng, _
          SortOn:=xlSortOnValues, _
          Order:=Order, _
          DataOption:=xlSortNormal
    .Sort.SetRange Rngs
    With .Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
  End With
  Shape_VCBs Cell, Order
  VCBs_Order = Order
End Sub
Sub btn_SortVCBs()

End Sub
Private Sub test_Shape_VCBs()
  Shape_VCBs [C5], 1
End Sub
Sub Shape_VCBs(Rng As Range, Optional Order%)
  Dim MuiTenFill As Shape, L%, T%
  Const W% = 6, H% = 8
  L = Rng.Left + Rng.Width - W - 4
  T = Rng.Top + Rng.Height - H - 3
  With Rng.Parent
    On Error Resume Next
    Set MuiTenFill = .Shapes("MuiTenFill")
    If Err.Number <> 0 Then _
    Set MuiTenFill = .Shapes.AddShape(36, L, T, W, H)
    With MuiTenFill
      .Rotation = IIf(Order = 1, 0, 180)
      .ShapeStyle = 33
      .Left = L: .Top = T: .Width = W: .Height = H
      .Visible = -1
      .OnAction = "btn_SortVCBs"
      .Name = "MuiTenFill"
    End With
  End With
End Sub
Sub Del_Shape_VCBs(ShapeName$, Optional WS As Worksheet)
  If WS Is Nothing Then Set WS = ThisWorkbook.ActiveSheet
  On Error Resume Next
  WS.Shapes(ShapeName).Delete
End Sub
Attribute VB_Name = "mdVCBS_TaiChinh"
Option Explicit


Sub getDatas_TaiChinh(Optional ByVal Quy As Boolean)
  Dim MaCK$, tYear&, Quarter%, ReportType%, DanhMuc%, Rng As Range, nYear&
  Dim TrucTiep As Boolean, TomTac As Boolean
  Select Case rTT_VCBs(3, 1).Value
    Case UniMethod("T|fffd|os|fffd|m t|fffd|aws|fffd|c - Tr|fffd|uwj|fffd|c ti|fffd|ees|fffd|p"): TomTac = True: TrucTiep = True
    Case UniMethod("T|fffd|os|fffd|m t|fffd|aws|fffd|c - Gi|fffd|as|fffd|n ti|fffd|ees|fffd|p"): TomTac = True: TrucTiep = False
    Case UniMethod("Chi ti|fffd|ees|fffd|t - Tr|fffd|uwj|fffd|c ti|fffd|ees|fffd|p"): TomTac = False: TrucTiep = True
    Case UniMethod("Chi ti|fffd|ees|fffd|t - Gi|fffd|as|fffd|n ti|fffd|ees|fffd|p"): TomTac = False: TrucTiep = False
  End Select
  MaCK = rTT_VCBs.Value
  tYear = rTT_VCBs(2, 1).Value
GetBCDKT:
  DanhMuc = 0: ReportType = IIf(TomTac, 1, 2): Quarter = IIf(Quy, 4, 5)
  If Quy Then Set Rng = rBCDKT_Q_VCBs Else Set Rng = rBCDKT_VCBs
  GoSub Data
GetBC_KQKD:
  DanhMuc = 1: ReportType = IIf(TomTac, 3, 4): Quarter = IIf(Quy, 4, 5)
  If Quy Then Set Rng = rKQKD_Q_VCBs Else Set Rng = rKQKD_VCBs
  GoSub Data
GetBC_LCTT:
  DanhMuc = 2: ReportType = IIf(TrucTiep, 5, 6): Quarter = IIf(Quy, 4, 5)
  If Quy Then Set Rng = rLCTT_Q_VCBs Else Set Rng = rLCTT_VCBs
  GoSub Data
  Exit Sub
Data:
  Call getData_TaiChinh(MaCK:=MaCK, _
                      tYear:=tYear, _
                      Quarter:=Quarter, _
                      Periods:=5, _
                      ReportType:=ReportType, _
                      DanhMuc:=DanhMuc, _
                      Rng:=Rng)
Return
End Sub


Private Sub test_getData_TaiChinh()
  Call getData_TaiChinh(MaCK:="AAA", _
                      tYear:=2019, _
                      Quarter:=4, _
                      Periods:=5, _
                      ReportType:=6, _
                      DanhMuc:=2, _
                      Rng:=rLCTT_Q_VCBs)
End Sub

Sub getData_TaiChinh(ByVal MaCK$, _
                     ByVal tYear&, _
                     ByVal Quarter%, _
                     Optional ByVal Periods% = 5, _
                     Optional ByVal ReportType% = 2, _
                     Optional ByVal DanhMuc% = 0, _
                     Optional ByVal Rng As Range)
  Dim oHttp, HDoc, Url$, nYear&
  Dim cRows%, Row%, Col%, Cols, cCols%, ek%, ekn%, eki%, K%, M%, TM%
  Dim Rows, Cell, Tbl, Node, className$, ChiMuc(), Total(), aSup()
  Dim hsup As Boolean
  Dim bSup(), Sup, tSup$, QY$(), tH$
  If tYear > year(Now) Then tYear = year(Now)
  'Rng.Resize(1000, 75).ClearContents
  TM = IIf(Quarter = 5, 3, 13)
  nYear = tYear
  
  For M = 0 To TM
    GoSub SubHttp: GoSub SubTotal: GoSub GetYear
    DoEvents
  Next

  
  If ek > 0 Then
    Rng.Resize(cRows, 1).Value = ChiMuc
    Rng(1, 2).Resize(cRows, ek).Value = Total
    For Row = 1 To ek
      If aSup(Row) <> vbNullString Then
        With Rng(1, Row + 1)
          .Value = .Value & aSup(Row)
          With .Characters(Start:=Len(Rng(1, Row + 1).Value) - 1, Length:=2).Font
            .Subscript = True
            .Color = vbRed
          End With
        End With
      End If
    Next
  End If
Exit Sub
SubTotal:
  For Each Tbl In HDoc.getElementsByTagName("div")
    If Tbl.className = "vcbs_financial" Then
      Set Tbl = Tbl.ChildNodes(2).getElementsByTagName("tbody")(0)
      Exit For
    End If
    Set Tbl = Nothing
  Next
  If Tbl Is Nothing Then Return
  On Error Resume Next
  Set Rows = Tbl.ChildNodes:  cRows = Rows.Length
  Set Cols = Rows(1).Cells:   cCols = Cols.Length
  ReDim ChiMuc(1 To cRows, 1 To 1)
  
  K = 0: eki = 0
  For Row = 1 To cRows
    Set Cols = Rows(Row - 1).Cells
    For Col = 1 To cCols
      If Col = 1 Then
        ChiMuc(Row, 1) = Cols(Col - 1).innerText
      Else
        tH = Cols(Col - 1).innerText
        If Row = 1 Then
          tSup = vbNullString
          tSup = Cols(Col - 1).getElementsByTagName("sup")(0).innerText
          
          If Rows(1).Cells(Col - 1).innerText <> vbNullString Or ek > 0 Then
            ek = ek + 1: eki = eki + 1
            ReDim Preserve bSup(1 To eki): bSup(eki) = Col
            ReDim Preserve aSup(1 To ek): aSup(ek) = tSup
            ReDim Preserve Total(1 To cRows, 1 To ek)
            tH = Replace$(tH, tSup, "")
            If tH Like "*-*" Then
              QY = Split(tH, "-")
              Quarter = CLng(right$(QY(0), 2))
              
              tYear = CLng(Left$(QY(1), 5))
            Else
              tYear = CLng(tH)
            End If
            Total(1, Col - K - 1 + ekn) = Replace$(tH, " - ", "/")
            Debug.Print tH, Total(1, Col - K - 1 + ekn), Col - K - 1 + ekn
          Else
            If ek = 0 Then K = K + 1
          End If
        Else
          If eki > 0 Then
            For Each Sup In bSup
              If Col = Sup Then
                tH = Replace$(tH, ",", "|fffd|")
                tH = Replace$(tH, ".", ",")
                tH = Replace$(tH, "|fffd|", ",")
                Total(Row, Col - K - 1 + ekn) = tH
                Exit For
              End If
              DoEvents
            Next
          End If
        End If
      End If
    Next
  Next
  
  ekn = ekn + cCols - 1 - K
  Erase bSup
  On Error GoTo 0
Return
SubHttp:
  Set HDoc = Nothing: Set oHttp = Nothing
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    Url = VCBs_Finance & DanhMuc & "?stocksymbol=" & MaCK
    .Open "POST", Url, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send "Periods=" & Periods & _
    "&Quarter=" & Quarter & _
    "&ReportType=" & ReportType & _
    "&Year=" & nYear
    If .Status <> 200 Then Return
    Set HDoc = CreateObject("HTMLFile")
    HDoc.body.innerhtml = .responseText
  End With
Return
GetYear:
  If Quarter = 5 Then
    nYear = tYear - 1
  Else
    If (Quarter = 1) Then
      Quarter = 4: nYear = tYear - 1
    Else
      Quarter = Quarter - 1: nYear = tYear
    End If
  End If
Return
End Sub

Sub ClearData_TaiChinh()
  Const R% = 500, C% = 75
  rBCDKT_VCBs.Resize(R, C).ClearContents
  rBCDKT_Q_VCBs.Resize(R, C).ClearContents
  rKQKD_VCBs.Resize(R, C).ClearContents
  rKQKD_Q_VCBs.Resize(R, C).ClearContents
  rLCTT_VCBs.Resize(R, C).ClearContents
  rLCTT_Q_VCBs.Resize(R, C).ClearContents
End Sub
Attribute VB_Name = "mdVCBs_Drive"
Option Explicit
Public Const TextScript_TabUser = "selectTabUserCategory();"

Function TextScript_StockDelete(ByVal MaCK$) As String
  TextScript_StockDelete = "deleteStocksFormCurrentPbFavGroup('" & MaCK & "');"
End Function
Function TextScript_selectTab(ID_1%, ID_2%, ID_3%) As String
  TextScript_selectTab = "selectTab(" & ID_1 & "," & ID_2 & "," & ID_3 & "); return false;"
End Function

Sub btn_ScriptIE_VCBs()
  'Connect_IE_CPTC_VCBs
 Call IE_GroupCK_VCBs(nWS_CPTC)
 Debug.Print ScriptIE_VCBs(TextScript_StockDelete("BBC"), IE_Global(1))
End Sub
Function ScriptIE_VCBs(TextScript$, ByVal IE As Object) As Boolean
  On Error Resume Next
  IE.document.parentWindow.execScript TextScript
  ScriptIE_VCBs = Err.Number = 0
Ends: On Error GoTo 0
End Function
Sub Connect_IE_CPTC_VCBs()
  If Not IE_Global(1) Is Nothing Then Exit Sub
  #If EarlyBinding Then
    Dim IE As SHDocVw.InternetExplorer
  #Else
    Dim IE As Object
  #End If

  Dim ID_USE As Object, Tmp As Boolean, Rows%, K%, Index%
  For Index = 1 To 20
    If SetIEbyURL(VCBs_HOSE, , IE, IEVisible, True, True, False, False, Index, Glb_oShell) Then Exit For
    GoSub cSelect: If Tmp = True Then GoTo Ends
  Next
  On Error Resume Next
  Do Until Rows > 3
    Rows = IE.document.getElementById("priceboardContentTableBody").Rows.Length
    DelayMSec 200: DoEvents
    K = K + 1: If K > 30 Then Exit Do
  Loop
  K = 0
  If Rows > 3 Then
    Do Until Tmp
      GoSub cSelect
      IE.document.parentWindow.execScript TextScript_TabUser
      K = K + 1: If K > 30 Then Exit Do
      DelayMSec 200: DoEvents
    Loop
    ID_USE.getElementsByClassName("add")(0).getElementsByTagName("input")(0).setAttribute "value", nWS_CPTC
    ID_USE.getElementsByClassName("add")(0).getElementsByTagName("button")(0).Click
  End If
Ends:
  Set IE_Global(1) = IE: Set ID_USE = Nothing: Set IE = Nothing
  Exit Sub
cSelect:
  Set ID_USE = IE.document.getElementById("tabli1")
  Tmp = ID_USE.getElementsByTagName("a")(0).className = "selected" _
    And ID_USE.className = "li_select"
Return
End Sub




Private Sub test_Item_User_VCBs()
  Debug.Print Item_User_VCBs("AAA")
End Sub
Function Item_User_VCBs(ByVal MaCK$) As Boolean
  On Error Resume Next
  Dim Tbl, Rows, cRows%, Row%, Col%, Cols, Tmp$, K%
  Call IE_GroupCK_VCBs(nWS_CPTC)
  Set Tbl = IE_Global(1).document _
            .getElementById("priceboardContentTableBody")
  Set Rows = Tbl.Rows:  cRows = Rows.Length
  For Row = 3 To cRows
    Set Cols = Rows(Row - 1).Cells
    If Not Cols(0).getElementsByTagName("input")(0) Is Nothing Then Col = 1 Else Col = 0
    Tmp = UCase(Trim(Cols(Col).innerText))
    If UCase(MaCK) = Tmp Then Item_User_VCBs = True: GoTo Ends
  Next
Ends:
  Set Tbl = Nothing: Set Rows = Nothing: Set Cols = Nothing
End Function
Sub ClearAllItem_User_VCBs()
  On Error Resume Next
  ScriptIE_VCBs TextScript_TabUser, IE_Global(1)
  Dim Tbl, Rows, cRows%, Row%, Col%, Cols, Tmp$, K%
  Call IE_GroupCK_VCBs(nWS_CPTC)
  Set Tbl = IE_Global(1).document _
            .getElementById("priceboardContentTableBody")
  Set Rows = Tbl.Rows:  cRows = Rows.Length
  If cRows < 3 Then GoTo Ends
  For Row = cRows To 3 Step -1
    Set Cols = Rows(Row - 1).Cells
    If Not Cols(0).getElementsByTagName("input")(0) Is Nothing Then Col = 1 Else Col = 0
    Tmp = UCase(Trim(Cols(Col).innerText))
    ScriptIE_VCBs TextScript_StockDelete(Tmp), IE_Global(1)
  Next
Ends:
  Set Tbl = Nothing: Set Rows = Nothing: Set Cols = Nothing
End Sub

Private Sub test_ClearAddItem_User_VCBs()
  'ClearAddItem_User_VCBs "AAA,VCB"
  ClearAddItem_User_VCBs "VCB,BXT,MTC"
End Sub
Sub ClearAddItem_User_VCBs(ByVal CacMaCK$)
  Dim A, Arr: Arr = GetItem_User_VCBs
  If CacMaCK = vbNullString Then Exit Sub
  If Not IsArray(Arr) Then Arr = Array("Null")
  Dim S, Symbols$(), H As Boolean
  Call IE_GroupCK_VCBs(nWS_CPTC)
  Symbols = Split(CacMaCK, ",")
  ScriptIE_VCBs TextScript_TabUser, IE_Global(1)
  For Each A In Arr
    H = False
    For Each S In Symbols
      If UCase(A) = UCase(S) Then H = True
    Next
    If Not H Then
      ScriptIE_VCBs TextScript_StockDelete(A), IE_Global(1)
    End If
    DoEvents
  Next
  For Each A In Symbols
    H = False
    For Each S In Arr
      If UCase(A) = UCase(S) Then H = True
    Next
    If Not H Then
      IE_Global(1).document.getElementById("SearchSymbol").Value = A: DelayMSec 500
      IE_Global(1).document.getElementById("btnPlus").Click: DelayMSec 200
    End If
    DoEvents
  Next
End Sub

Function GetItem_User_VCBs() As Variant
  On Error Resume Next
  Dim Tbl, Rows, cRows%, Row%, Col%, Cols, Tmp$, K%, Total()
  Call IE_GroupCK_VCBs(nWS_CPTC)
  Set Tbl = IE_Global(1).document _
            .getElementById("priceboardContentTableBody")
  Set Rows = Tbl.Rows:  cRows = Rows.Length
  If cRows < 3 Then GoTo Ends
  ReDim Total(cRows - 3)
  For Row = 3 To cRows
    Set Cols = Rows(Row - 1).Cells
    If Not Cols(0).getElementsByTagName("input")(0) Is Nothing Then Col = 1 Else Col = 0
    Total(Row - 3) = UCase(Trim(Cols(Col).innerText))
  Next
  GetItem_User_VCBs = Total
Ends:
  Set Tbl = Nothing: Set Rows = Nothing: Set Cols = Nothing
End Function

Attribute VB_Name = "mdVCBs_SGD"
Option Explicit

Sub GetData_SGD()
  Dim js$, R%, C%, Arr, oJson As Object, Doc As Object, O, E, OE, oHttp As Object
  js = "{""selectedStocks"":"""",""criteriaId"":""-11"",""marketId"":0,""lastSeq"":0,""isReqTL"":false,""isReqMK"":false,""tlSymbol"":"""",""pthMktId"":""""}"
  GoSub SubHttp
  If oJson Is Nothing Then Exit Sub
  ReDim Total(1 To 20, 1 To 9)
  For Each O In oJson("mi")
    For Each E In O
      R = R + 1: C = 0
      For Each OE In E
        If OE Like "[e-m]" Then
          C = C + 1
          If E(OE) <> "" Then
          Total(R, C) = Replace(E(OE), "up", UniMethod("T|fffd|aw|fffd|ng"))
          Total(R, C) = Replace(Total(R, C), "down", UniMethod("Gi|fffd|ar|fffd|m"))
          Total(R, C) = Replace(Total(R, C), "noChange", "")
          Total(R, C) = Replace(Total(R, C), UniMethod(" T|fffd|yr|fffd|"), "")
          End If
        End If
      Next OE
    Next E
  Next O
  rSGD_VCBs(1, 2).Resize(20, 9).Value = Total
  Set O = Nothing: Set E = O: Set OE = O: Set oHttp = O
  Set oJson = O: Set Doc = O
Exit Sub
SubHttp:
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    .Open "POST", VCBs_AMW, False
    .setRequestHeader "Content-Type", "application/json"
    .send js
    If .Status <> 200 Then Return
    Set oJson = JsonConverter.ParseJson(.responseText)
  End With
  Set oHttp = Nothing
Return
End Sub

Attribute VB_Name = "mdVNDirect_data"
Option Explicit

Sub btn_SuKienQuyen_VNDirect()

  If rTT_SKQ.Value = "" Then Exit Sub
  Dim eT$, Arr, I%, Date1$, Date2$
  Arr = eventTypeB
  If IsDate(rTT_SKQ(3, 1).Value) Then Date1 = DateValue(rTT_SKQ(3, 1).Value)
  If IsDate(rTT_SKQ(4, 1).Value) Then Date2 = DateValue(rTT_SKQ(4, 1).Value)
  For I = 0 To UBound(Arr)
    If rTT_SKQ(5, 1).Value = Arr(I) Then eT = eventTypeA(I)
  Next
  SuKienQuyen_VNDirect rData_SKQ, rTT_SKQ.Value, , , eT, Date1, Date2
End Sub
Sub SuKienQuyen_VNDirect( _
    Optional ByVal Rng As Range, _
    Optional ByVal Code$ = "VCB", _
    Optional ByVal email$, _
    Optional ByVal feedback$, _
    Optional ByVal eventType$, _
    Optional ByVal strDate1$, _
    Optional ByVal strDate2$, _
    Optional ByVal indexPage$ = 1, _
    Optional ByVal srtRightsDate$, _
    Optional ByVal UB%, _
    Optional ByVal UB2%)
  Dim HDoc As Object
  Dim oHttp As Object
  Dim Arr, Total(), tagB%
  Dim I%, K%, L%, Ltb%, cPage%
  Dim clsName$, tagName$, Page$, Tmp$
  Dim rTB, oClass, oO, TBs, oDoc, tA
  Page = indexPage: GoSub Req
NextPage:
  Set oDoc = HDoc: clsName = "paging": tagName = "div": GoSub GetClass
  If Not oClass Is Nothing Then
    Set oO = oClass
    If oO.getElementsByTagName("a") Is Nothing Then
      Rng.Value = UniMethod("Kh|fffd|ng c|fffd| d|fffd|uwx|fffd| li|fffd|eejs|fffd|u!"): GoTo Ends
    Else
      tagB = 0
      For Each tA In oO.getElementsByTagName("a")
        If Not tA.getElementsByTagName("b")(0) Is Nothing Then
          tagB = CInt(tA.innerText): GoSub FindE
        Else
          If tagB > 0 Then
            If IsNumeric(tA.innerText) Then
              Page = CInt(tA.innerText)
              If Page = tagB + 1 Then GoSub Req: GoTo NextPage
  End If: Exit For: End If: End If: Next: End If: End If
Ends:
  If K > 0 Then
    UB = K: UB2 = L + 4: Arr = TransArr(Total)
    If Not Rng Is Nothing Then
      Rng(2, 0).Resize(10000, UB2).ClearContents
      Rng(2, 0).Resize(UB, UB2).Value = Arr
  End If: End If
  Set HDoc = Nothing: Set oHttp = Nothing: Set oClass = Nothing
  Exit Sub
GetClass:
  For Each oClass In oDoc.getElementsByTagName(tagName)
    If oClass.className = clsName Then Exit For
    Set oClass = Nothing
  Next
Return
FindE:
  Set oDoc = HDoc: clsName = "box_lichsukien": tagName = "div": GoSub GetClass
  If oClass Is Nothing Then GoTo Ends Else GoSub Parse
Return

Req:
  Set HDoc = Nothing
  Set HDoc = CreateObject("HTMLFile")
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    .Open "POST", siteSKQ, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "cache-control", "no-cache"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send IIf(email = "", "", "email=" & email) & _
          IIf(feedback = "", "", "&feedback=" & feedback) & _
          IIf(eventType = "", "", "&ifoMarketCalendar.eventType=" & eventType) & _
          IIf(strDate1 = "", "", "&ifoMarketCalendar.strCreated=" & Application.EncodeURL(strDate1)) & _
          IIf(strDate2 = "", "", "&ifoMarketCalendar.strCreated=" & Application.EncodeURL(strDate2)) & _
          IIf(Code = "", "", "&ifoMarketCalendar.symbol=" & Code) & _
          IIf(indexPage = "", "", "&pagingInfo.indexPage=" & Page) & _
          IIf(srtRightsDate = "", "", "&srtRightsDate=" & srtRightsDate)
    If .Status <> 200 Then Exit Sub
    HDoc.body.innerhtml = .responseText
  End With
Return
Parse:
  On Error Resume Next
  Set TBs = oClass.getElementsByTagName("tbody")(0).getElementsByTagName("tr")
  L = TBs(0).ChildNodes.Length
  Dim Hd As Boolean: Hd = False
  
  For Each oClass In TBs
    If Not Hd Then Hd = True: GoTo NextF
    Tmp = oClass.ChildNodes(0).innerText
    K = K + 1
    ReDim Preserve Total(1 To L + 4, 1 To K)
    Total(1, K) = K
    For I = 0 To L - 1
      Total(I + 2, K) = Trim$(Application.Clean(oClass.ChildNodes(I).innerText))
      If Len(Total(I + 2, K)) = 10 And Total(I + 2, K) Like "*/*/*" Then
        Total(I + 2, K) = DateValue(Total(I + 2, K))
      End If
      If I = L - 1 Then
        Dim lT$: lT = LCase$(Total(I + 2, K))
        Total(I + 3, K) = Replace$(CStr(MainRegExp(lT, "([0-9]+)\:([0-9]+(\.[0-9]+)?)", True)(0)), ":", "/")
        Total(I + 4, K) = Replace$(MainRegExp(lT, "([0-9]+)(\.[0-9]+)?(?=\s((vnd)|\u0110|\u0111)\/(cp|share))", True)(0), ".", ",")
        Total(I + 5, K) = MainRegExp(lT, "(((vnd)|\u0110|\u0111)\/(cp|share))", True)(0)
      End If
    Next
NextF:
  Next
  On Error GoTo 0
Return
End Sub

Attribute VB_Name = "mdVietsotck_Realtime"
Option Explicit
Public Const VS_TradingInfo = "https://finance.vietstock.vn/company/tradinginfo"
'"https://finance.vietstock.vn/derivatives/tradinginfo"
Public Const VS_gettradingresult = "https://finance.vietstock.vn/data/gettradingresult"
    'Code: LIX
    'OrderBy:
    'OrderDirection: desc
    'PageIndex: 1
    'PageSize: 10
    'FromDate: 2019-09-25
    'ToDate: 2019-10-02
    'ExportType: Default
    'Cols: TKLGD , TGTGD, VHTT, GD3, TGG, TGPTG, BQM, BQB, KLGDKL, GTGDKL
    'ExchangeID: 1
Public Const VS_Detail2 = "https://finance.vietstock.vn/data/getstockdealdetail"
  'code:   LIX
  'seq: 0
Public Const VS_Detail = "https://finance.vietstock.vn/data/getderivativedealdetail"

  Public Const VS_Statistic = "https://finance.vietstock.vn/data/statisticmqy"
  'code: LIX
  'type: 1
Public Const VS_TKGD = "https://finance.vietstock.vn/VS_TKGD/thong-ke-giao-dich.htm"
'-------------------------------------------------------------------------------
Public aRealtimeCP_First_VS(1)
Public VS_seq%
Public VS_timeAutoLoop

Function aVS_PhaiSinh()
  aVS_PhaiSinh = Array("VN30F1M", "VN30F2M", "VN30F1909", "VN30F1910", "VN30F1912", "VN30F2003")
End Function


Sub test_Vietstock_Detail()
  Const Code = "VN30F1M"
  Dim A&, B$, C As Date, Rng As Range, Arr, NameCTY$, LcData2
  Set Rng = rD_Realtime2
  Arr = Vietstock_Detail(Code, VS_seq)
  If Not IsArray(Arr) Then GoTo Ends
  LcData2 = UBound(Arr) + 1
  If (Arr(0) > Rng.Value) And (Rng.Value <> "") Then GoSub InsertDT
  Rng.Resize(1, LcData2).Value = Arr
  If CPTuChon_CapNhat("Realtime 2") Then
    VS_timeAutoLoop = Now + TimeSerial(0, 0, 5)
    Application.OnTime VS_timeAutoLoop, "test_Vietstock_Detail", , True
  Else
    On Error Resume Next
    Application.OnTime VS_timeAutoLoop, "test_Vietstock_Detail", , False
  End If
Ends:
  Exit Sub
InsertDT:
  Dim LrData&, T$()
  LrData = Rng(Rows.Count - Rng.Row, 1).End(xlUp).Row
  Rng(2, 1).Resize(LrData, LcData2).Value = Rng.Resize(LrData, LcData2).Value
  Rng.Resize(1, LcData2).ClearContents
Return
End Sub

Function Vietstock_Detail(ByVal Code$, Optional ByRef seq%) As Variant
  On Error Resume Next
  Dim oHttp, oJson
  GoSub SubHttp: If oJson Is Nothing Then GoTo Ends
  Dim Stockcode$: Stockcode = oJson(1)("Stockcode")
  If Stockcode = vbNullString Then GoTo Ends
  Dim Package%: Package = CInt(oJson(1)("Package"))
  Dim TradingDate As Date: TradingDate = JSDateToVBA(oJson(1)("TradingDate"))
  Dim Price#: Price = oJson(1)("Price")
  Dim Vol#: Vol = oJson(1)("Vol")
  Dim TotalVol#: TotalVol = oJson(1)("TotalVol")
  Dim TotalVal#: TotalVal = oJson(1)("TotalVal")
  Dim Change#: Change = oJson(1)("Change")
  Dim PerChange#: PerChange = oJson(1)("PerChange")

  VS_seq = Package + IIf(Package > 0, 1, 0)
  Vietstock_Detail = Array(TradingDate, Price, Change, PerChange, Vol, TotalVol, VBA.Round((Vol / TotalVol) * 100, 2))
Ends:
  Set oHttp = Nothing: Set oJson = Nothing
Exit Function
SubHttp:
  Set oHttp = Nothing
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.XMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.XMLHTTP")
  #End If
  With oHttp
    .Open "POST", VS_Detail, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send "code=" & Code & _
    "&seq=" & seq
    If .Status <> 200 Then Return
    Set oJson = JsonConverter.ParseJson(.responseText)
  End With
Return
    
End Function





Function oJson_Assest_VS() As Object
  Dim sjs$
       sjs = "{'LastPrice': [1 , 1, 'Sanbi']," & _
              "'Change': [1 , 2, 'A']," & _
              "'PerChange': [1 , 3, 'A']," & _
              "'TradingTime': [1 , 4, 'A']," & _
              "'MarketStatusName': [1 , 5, 'A'],"
  sjs = sjs & "'OpenPrice': [2 , 1, 'M|fffd|owr|fffd| c|fffd|uwr|fffd|a']," & _
              "'HighestPrice': [2 , 2, 'Cao nh|fffd|aas|fffd|t']," & _
              "'LowestPrice': [2 , 3, 'Th|fffd|aas|fffd|p nh|fffd|aas|fffd|t']," & _
              "'TotalVol': [2 , 4, 'KLGD']," & _
              "'TotalOIVol': [2 , 5, 'OI']," & _
              "'': [2 , 6, 'Basic'],"
  sjs = sjs & "'ForeignBuyVol': [3 , 1, 'NN mua']," & _
              "'ForeignSellVol': [3 , 2, 'NN b|fffd|as|fffd|n']," & _
              "'': [3 , 3, 'Cao nh|fffd|aas|fffd|t NY']," & _
              "'': [3 , 4, 'Th|fffd|aas|fffd|p nh|fffd|aas|fffd|t NY']," & _
              "'': [3 , 5, 'KLBQ NY']," & _
              "'': [3 , 6, 'Beta']}"
  Set oJson_Assest_VS = JsonConverter.ParseJson(UniMethod(sjs))

'1. OpenPrice: 885.8

'AssestCode: "VN30"
'BasicPrice: 886
'CatID: 11
'CeilingPrice: 948
'Change: -3.4
'CloseIndex: 883.04
'ClosePrice: 0
'ColorID: -1
'FirstTradingDate: "/Date(1547744400000)/"
'FloorPrice: 824
'ForeignBuyVol: 61
'ForeignSellVol: 149
'HighestPrice: 886.4
'LastPaymentDate: "/Date(1568912400000)/"
'LastPrice: 882.6
'LastTradingDate: "/Date(1568826000000)/"
'LastVol: 3082
'LowestPrice: 882.5
'MarketStatus: 0
'MarketStatusName: "K?t th|fffd|c phi|fffd|n"
'MaturityMonth: "/Date(1567270800000)/"

'PaymentPrice: 0
'PerChange: -0.38
'PostUpdate: "/Date(1547744400000)/"
'StatusID: 1
'StockCode: "VN30F1M"
'StockID: 24
'StockName: "H|fffd|TL ch? s? VN30 01 th|fffd|ng"
'StockNameEn: "VN30 Index Futures 01 month"
'TotalOIVol: 0
'TotalVol: 44570
'TradingDate: "/Date(1568048400000)/"
'TradingTime: "/Date(1568102526000)/"


End Function


Sub btn_RealtimeCP_VS()
  
  Dim Rng As Range, Arr
  Dim T%: T = Minute(Now) + Hour(Now) * 60
  Set Rng = rD_Realtime1
  Call RealtimeCP_VS(rTT_VCBs.Value, Rng)
  Call RealtimeCP_Detail_VS(rTT_VCBs.Value, Rng(9, 1), True, True)
  ': Rng.Value = A: Rng(2, 1).Value = B: Rng(3, 1).Value = C
  Rng(-1, 1).Value = UniMethod("C|fffd|aaj|fffd|p nh|fffd|aaj|fffd|t: ") & Format(Now, "hh:mm:ss dd/mm")
  If CPTuChon_CapNhat(nWS_Realtime1) And T > 8.9 * 60 And T < 15.1 * 60 Then
    timeAutoLoop = Now + TimeSerial(0, 0, 7)
    Application.OnTime timeAutoLoop, "btn_RealtimeCP_VS", , True
  Else
    On Error Resume Next
    Application.OnTime timeAutoLoop, "btn_RealtimeCP_VS", , False
  End If
End Sub


Sub RealtimeCP_VS(ByVal Code$, _
                  ByVal Rng As Range, _
              Optional ByVal rRng As Range)

  Dim T%, Temp$: T = Minute(Now) + Hour(Now) * 60
  If T < 8.9 * 60 And T > 15.1 * 60 Then
    Temp = UniMethod("K|fffd|ees|fffd|t th|fffd|us|fffd|c phi|fffd|een|fffd|")
    If Temp <> Rng(5, 1).Value Then Rng(5, 1).Value = Temp
    Exit Sub
  ElseIf T > 11.31 * 60 And T < 13.29 * 60 Then
    Temp = UniMethod("Ngh|fffd|ir|fffd| tr|fffd|uw|fffd|a")
    If Temp <> Rng(5, 1).Value Then Rng(5, 1).Value = Temp
    Exit Sub
  End If
  
  If Len(Code) < 3 Then Exit Sub
  Code = UCase(Code)
  If Rng Is Nothing Then
    Alert UniMethod("Trang t|fffd|is|fffd|nh: " & nWS_Realtime1 & " - kh|fffd|oo|fffd|ng t|fffd|oof|fffd| t|fffd|aj|fffd|i!")
    Exit Sub
  End If
  RealtimeCP_First_VS Code, Rng
  
  On Error Resume Next
  Dim oHttp, oJson, oJson_Info, TDate$
  Set oJson_Info = oJson_Info_VS
  GoSub SubHttp: If oJson Is Nothing Then GoTo Ends
  Dim item
  If oJson.Count < oJson_Info.Count Then Exit Sub

  ReDim Total(1 To 5, 1 To 9)
  For Each item In oJson_Info_VS
    If item = "TradingDate" Then
      Total(oJson_Info(item)(1), oJson_Info(item)(2)) = JSDateToVBA(oJson(item))
    Else
      Total(oJson_Info(item)(1), oJson_Info(item)(2)) = oJson(item)
    End If
    If oJson_Info(item)(2) > 1 Then
      Total(oJson_Info(item)(1), oJson_Info(item)(2) - 1) = oJson_Info(item)(3)
    End If
  Next item
  Rng.Resize(5, 9).Value = Total
Ends:
  Set oHttp = Nothing: Set oJson = Nothing
Exit Sub
SubHttp:
  Set oHttp = Nothing
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.XMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.XMLHTTP")
  #End If
  With oHttp
    .Open "POST", VS_TradingInfo, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send "code=" & Code & "&s=0"
    If .Status <> 200 Then Return
    Set oJson = JsonConverter.ParseJson(.responseText)
  End With
Return
    
End Sub

Private Sub test_RealtimeCP_Detail_VS()
  RealtimeCP_Detail_VS "VCB", rD_Realtime1(9, 1), True, True
End Sub

Sub RealtimeCP_Detail_VS(ByVal Code$, _
                         ByVal Rng As Range, _
                Optional ByVal iRealtime As Boolean, _
                Optional ByVal iInsert As Boolean)
  If Len(Code) < 3 Then Exit Sub
  Code = UCase(Code)
  On Error Resume Next
  Dim oHttp, oJson, LR&, UB%, R%, Total()
  GoSub SubHttp
  UB = oJson.Count
  If UB < 1 Then GoTo Ends
  Const mCol = 7
  R = 1: ReDim Total(1 To UB, 1 To mCol)
  If oJson(R).Count < 5 Then GoTo Ends
  If oJson(R)("Stockcode") <> Code Then GoTo Ends
  GoSub DataRow

  If iRealtime Then
    If Not IsDate(Rng.Value) Then
      GoSub iClear: GoSub LoopRow
    Else
      If JSDateToVBA(oJson(R)("TradingDate")) = Rng.Value Then GoTo Ends
      If Day(JSDateToVBA(oJson(R)("TradingDate"))) <> Day(Rng.Value) Then
        GoSub iClear: GoSub LoopRow
      Else
        GoSub InsertData
      End If
    End If
  End If
  Rng.Resize(R, mCol).Value = Total
  'oJson("IsBuy")
Ends:
  Set oHttp = Nothing: Set oJson = Nothing
Exit Sub

InsertData:
  If Not iInsert Then Return
  LR = Rng(Rows.Count - Rng.Row, 1).End(3).Row - Rng.Row + 1
  If LR <= 0 Then Return
  Rng(2, 1).Resize(LR, mCol).Value = Rng.Resize(LR, mCol).Value
Return
iClear:
  LR = Rng(Rows.Count - Rng.Row, 1).End(3).Row - Rng.Row + 1
  If LR <= 0 Then Return
  Rng.Resize(LR, mCol).ClearContents
Return
LoopRow: If iInsert Then For R = 1 To UB: GoSub DataRow: Next R
Return
DataRow:
  Total(R, 1) = JSDateToVBA(oJson(R)("TradingDate"))
  Total(R, 2) = oJson(R)("Price")
  Total(R, 3) = oJson(R)("Change")
  Total(R, 4) = oJson(R)("PerChange")
  Total(R, 5) = oJson(R)("Vol")
  Total(R, 6) = oJson(R)("TotalVol")
  Total(R, 7) = VBA.Round(Total(R, 5) / Total(R, 6) * 100, 2)
Return

SubHttp:
  Set oHttp = Nothing
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.XMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.XMLHTTP")
  #End If
  With oHttp
    .Open "POST", VS_Detail2, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send "code=" & Code & "&seq=0"
    If .Status <> 200 Then GoTo Ends
    Set oJson = JsonConverter.ParseJson(.responseText)
    If oJson Is Nothing Then GoTo Ends
  End With
Return
    
End Sub

Sub RealtimeCP_First_VS(Optional ByVal MaCK$ = "VCB", _
                        Optional ByVal Rng As Range)
  If aRealtimeCP_First_VS(0) = MaCK Then _
    If aRealtimeCP_First_VS(1) = True Then _
      If Not Rng Is Nothing Then _
        If Rng(0, 1).Value <> vbNullString Then Exit Sub

  Dim Url$, HDoc As Object, StockPriceInfo
  Url = "https://finance.vietstock.vn/" & MaCK & "/tai-chinh.htm?tab=CSTC"
  On Error Resume Next
  Set HDoc = ResponseHTML(Url)

  If HDoc Is Nothing Or HDoc.getElementById("stockprice") Is Nothing Then Exit Sub
  
  '----------------------------------------------------------------
  'StockPrice = CLng(Replace$(HDoc.getElementById("stockprice").innerText, ",", ""))
  'StockChange = HDoc.getElementById("stockchange").innerText
  'TradeDate = CDate(HDoc.getElementById("tradedate").innerText)
  
  Set StockPriceInfo = GetOClassname("row stock-row", "div", HDoc)
  If Not StockPriceInfo Is Nothing Then
    If Not Rng Is Nothing Then Rng(0, 1).Value = HTMLNode(StockPriceInfo, 0, 0, 0).innerText
  End If
  '----------------------------------------------------------------
'  Dim oData, t_oData, I%, J%, TM%, lData%, dCol%, TMP1$, TMP2$
'  For Each StockPriceInfo In HDoc.getElementById("page-content") _
'                                 .getElementsByTagName("div")
'    If StockPriceInfo.className = "row stock-price-info" Then Exit For
'    Set StockPriceInfo = Nothing
'  Next
'  If StockPriceInfo Is Nothing Then GoTo Ends
  '----------------------------------------------------------------
'  Set oData = StockPriceInfo.ChildNodes
'  lData = oData.Length - 1
'  dCol = oData(1).getElementsByTagName("p").Length
'  ReDim Total(1 To dCol, 1 To lData * 2)
'  For I = 1 To lData
'    Set t_oData = oData(I).getElementsByTagName("p")
'    For J = 0 To dCol - 1
'      TMP1 = t_oData(J).innerText
'      TMP2 = vbNullString
'      If Not t_oData(J).getElementsByTagName("b")(0) Is Nothing Then
'        TMP2 = t_oData(J).getElementsByTagName("b")(0).innerText
'      End If
'      Total(J + 1, (I - 1) * 2 + 1) = Replace$(TMP1, TMP2, "")
'      Total(J + 1, (I - 1) * 2 + 2) = TMP2
'      dtRealTime(TM) = TMP2: TM = TM + 1
'    Next
'  Next
  If Not Rng Is Nothing Then
    'Rng(1, 1).Resize(dCol, lData * 2).Value = Total
    aRealtimeCP_First_VS(0) = MaCK
    aRealtimeCP_First_VS(1) = True
  End If
Ends:
  Set HDoc = Nothing
End Sub

Private Sub test_oJson_Info_VS()
  Dim O: Set O = oJson_Info_VS
  Debug.Print O(1)
  Debug.Print O("LastPrice")(3)
  Dim item
  For Each item In O
    Debug.Print item 'oJson(oJson_Info(K))
    'Rng() = oJson(oJson_Info(K))
  Next item
End Sub
Function oJson_Info_VS() As Object
  Dim sjs$
       sjs = "{'LastPrice': [1, 1,  '']," & _
              "'Change': [2, 1, '']," & _
              "'PerChange': [3, 1, '']," & _
              "'TradingDate': [4, 1, '']," & _
              "'StatusName': [5, 1, ''],"
  sjs = sjs & "'OpenPrice': [1, 3, 'M|fffd|owr|fffd| c|fffd|uwr|fffd|a']," & _
              "'HighestPrice': [2, 3, 'Cao nh|fffd|aas|fffd|t']," & _
              "'LowestPrice': [3, 3, 'Th|fffd|aas|fffd|p nh|fffd|aas|fffd|t']," & _
              "'TotalVol': [4, 3, 'KLGD']," & _
              "'MarketCapital': [5, 3, 'V|fffd|oos|fffd|n h|fffd|os|fffd|a'],"
  sjs = sjs & "'OutstandingBuy': [1, 5, 'D|fffd|uw|fffd| mua']," & _
              "'OutstandingSell': [2, 5, 'D|fffd|uw|fffd| b|fffd|as|fffd|n']," & _
              "'Max52W': [3, 5, 'Cao 52T']," & _
              "'Min52W': [4, 5, 'Th|fffd|aas|fffd|p 52T']," & _
              "'Vol52W': [5, 5, 'KLBQ 52T'],"
  sjs = sjs & "'F_BuyVol': [1, 7, 'NN mua']," & _
              "'OwnedRatio': [2, 7, '% NN s|fffd|owr|fffd| h|fffd|uwx|fffd|u']," & _
              "'Dividend': [3, 7, 'C|fffd|oor|fffd| t|fffd|uws|fffd|c']," & _
              "'a____': [4, 7, 'T/S c|fffd|oor|fffd| t|fffd|uws|fffd|c']," & _
              "'Beta': [5, 7, 'Beta'],"
  sjs = sjs & "'EPS': [1, 9, 'EPS*']," & _
              "'PE': [2, 9, 'P/E']," & _
              "'FEPS': [3, 9, 'F P/E']," & _
              "'BVPS': [4, 9, 'BVPS']," & _
              "'PB': [5, 9, 'P/B']}"
  Set oJson_Info_VS = JsonConverter.ParseJson(UniMethod(sjs))
  'AvrPrice: 38200
  'CeilingPrice: 40750
  'ColorId: 0
  'CurrRoom: 913610921
  'F_BuyPutVal: 0
  'F_BuyPutVol: 0
  'F_BuyVal: 4994398740
  'F_SellPutVal: 0
  'F_SellPutVol: 0
  'F_SellVal: 3318138860
  'F_SellVol: 86860
  'FloorPrice: 35450
  'KLCPLH: 3418715334
  'KLCPNY: 3418715334
  'MarketStatus: 1
  'PriorClosePrice: 38100
  'RemainRoom: 26.72
  'StockCode: "BID"
  'StockStatus: ""
  'TotalRoom: 1025614600
  'TotalVal: 25024000000
  'Yield: 0.03
End Function

Attribute VB_Name = "mdVietstock_TaiChinh"
Option Explicit

Function eventTypeA()
  eventTypeA = Array("", "ISSUE", "STOCKDIV", "DIVIDEND", "KINDDIV")
End Function
Function eventTypeB()
  eventTypeB = Array(UniMethod("Ch|fffd|oj|fffd|n t|fffd|aas|fffd|t c|fffd|ar|fffd|"), _
                     UniMethod("B|fffd|as|fffd|n |fffd|uw|fffd|u |fffd|dd|fffd||fffd|ax|fffd|i"), _
                     UniMethod("C|fffd|oor|fffd| t|fffd|uws|fffd|c b|fffd|awf|fffd|ng c|fffd|oor|fffd| phi|fffd|ees|fffd|u"), _
                     UniMethod("C|fffd|oor|fffd| t|fffd|uws|fffd|c b|fffd|awf|fffd|ng ti|fffd|eef|fffd|n"), _
                     UniMethod("Th|fffd|uw|fffd||fffd|owr|fffd|ng c|fffd|oor|fffd| phi|fffd|ees|fffd|u"))
End Function

Sub btn_ChiSoTaiChinh_VS()
  Application.CutCopyMode = False
  Application.ScreenUpdating = False
  Dim R1 As Range, R2 As Range, A%, fmArr
  rData_CSTC(4, 1).Resize(200, 5).ClearContents
  Set R1 = rData_CSTC(5, 1): Set R2 = R1.Resize(200, 5): GoSub Format
  Dim Total, UB%, UB2%, I%
  Call ChiSoTaiChinh_VS(rTT_VCBs.Value, UB:=UB, UB2:=UB2, ReportTermType:=IIf(rData_CSTC(1, 2).Value Like "*n*m*", 1, 2), Rng:=rData_CSTC(4, 1), fmArr:=fmArr)
  
  Set R1 = rData_CSTC(4, 1)
  For A = 2 To UBound(fmArr)
    Set R2 = rData_CSTC(fmArr(A) + 3, 1).Resize(1, UB2)
    GoSub Format
  Next
  Set R1 = Nothing: Set R2 = Nothing: Application.Goto rData_CSTC
  Application.ScreenUpdating = True
  Application.CutCopyMode = True
  Exit Sub
Format:
  R1.Copy
  R2.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
  SkipBlanks:=False, Transpose:=False
Return
End Sub
Private Sub test_ChiSoTaiChinh_VS()
  Dim PhuThuoc$, Arr, UB%, UB2%
  Arr = ChiSoTaiChinh_VS(Rng:=rData_CSTC(4, 1))
End Sub

Function ChiSoTaiChinh_VS( _
    Optional ByVal Code$ = "VCB", _
    Optional ByVal ReportTermType% = 1, _
    Optional ByVal ReportType$ = "CSTC", _
    Optional ByVal Unit& = 1000000, _
    Optional ByRef UB%, _
    Optional ByRef UB2%, _
    Optional ByVal Rng As Range, _
    Optional ByRef fmArr)
  UB = 0
  Dim Page%: Page = IIf(ReportTermType = 1, 4, 12)
  Const PageSize = 4
  Dim oHttp As Object, iA As Boolean
  Dim Total(), Title(), fArr(), Arr, L%
  Dim oJson, I%, J, V, JV, tJV, K%, KK%, KKK%, KKKK%, C%, C2%, tK%
  For I = Page To 1 Step -1
    GoSub Http: If L = 0 Then GoSub GetL
    GoSub MakeArr
  Next I
  UB = L: fmArr = fArr: UB2 = PageSize * KKK
  If Not Rng Is Nothing Then
    Rng(1, 1).Resize(50, 75).ClearContents
    Rng(1, 1).Resize(L).Value = Application.Transpose(Title)
    Rng(1, 2).Resize(L, UB2).Value = Total
  Else
    ChiSoTaiChinh_VS = Total
  End If
Ends:
Exit Function

MakeArr:
  KKK = KKK + 1: K = 0: C = 0
  ReDim Preserve Total(1 To L, 1 To PageSize * KKK)
  KKKK = PageSize * (KKK - 1)
  For Each J In oJson
    For Each V In J
      Select Case TypeName(V)
        Case "String"
          K = K + 1
          For Each JV In J(V)
            K = K + 1: C2 = 0
            For Each tJV In JV
              If TypeName(tJV) = "String" Then
                If tJV Like "Value*" Then C2 = C2 + 1: Total(K, C2 + KKKK) = JV(tJV)
              End If
            Next
          Next
        Case "Dictionary"
          C = C + 1
          If ReportTermType = 1 Then
            Total(1, C + KKKK) = V("YearPeriod")
          Else
            Total(1, C + KKKK) = Left$(V("TermName"), 1) & right$(V("TermName"), 1) & "/" & V("YearPeriod")
          End If
      End Select
    Next
  Next
Return

Http:
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.XMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.XMLHTTP")
  #End If
  With oHttp
    .Open "POST", siteVietStockDT, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "cache-control", "no-cache"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send "code=" & UCase$(Code) & _
    "&Page=" & I & _
    "&PageSize=" & PageSize & _
    "&ReportTermType=" & ReportTermType & _
    "&ReportType=" & ReportType & _
    "&Unit=" & CStr(Unit)
    If .Status <> 200 Then GoTo Ends
    Set oJson = JsonConverter.ParseJson(.responseText)
  End With
  Set oHttp = Nothing
Return
GetL:
  For Each J In oJson
    For Each V In J
      Select Case TypeName(V)
        Case "String"
          K = K + 1: ReDim Preserve Title(1 To K)
          KK = KK + 1: ReDim Preserve fArr(1 To KK): fArr(KK) = K
          Title(K) = V
          For Each JV In J(V)
            K = K + 1
            ReDim Preserve Title(1 To K)
            Title(K) = JV("Name") & IIf(JV("Unit") = "", "", " (" & JV("Unit") & ")")
          Next
      End Select
    Next
  Next
  L = K
Return

End Function







Attribute VB_Name = "mdZClearData"
Option Explicit
Sub ClearAllData()
  SpeedOn
  rCPTC_VCBs.Resize(1000, 29).ClearContents
  rHOSE_VCBs.Resize(1000, 29).ClearContents
  rHNX_VCBs.Resize(1000, 29).ClearContents
  rUPCOM_VCBs.Resize(1000, 29).ClearContents
  rCPTN_VCBs.Resize(1000, 29).ClearContents
  rBgQM_VCBs.Resize(100, 13).ClearContents
  rBCDKT_VCBs.Resize(500, 75).ClearContents
  rKQKD_VCBs.Resize(500, 75).ClearContents
  rLCTT_VCBs.Resize(500, 75).ClearContents
  rBCDKT_Q_VCBs.Resize(500, 75).ClearContents
  rKQKD_Q_VCBs.Resize(500, 75).ClearContents
  rLCTT_Q_VCBs.Resize(500, 75).ClearContents
  rData_CSTC.Resize(500, 75).ClearContents
  rData_SKQ.Resize(500, 75).ClearContents
  rSGD_VCBs.Resize(1, 2)(20, 9).ClearContents
  SpeedOff
End Sub
Sub ClearData()
  Select Case ThisWorkbook.ActiveSheet.Name
    Case nWS_CPTC, "HOSE", "HNX", "UPCOM", nWS_CPTN, nWS_bgPS, nWS_CQ, nWS_bgQM, nWS_GDTT
      rAct_VCBs.Resize(1000, 29).ClearContents
    Case nWS_SGD
      rSGD_VCBs(1, 2).Resize(20, 9).ClearContents
    Case nWS_BCDKT: Call ClearTaiChinh
    Case nWS_Realtime1: Call ClearData_Realtime1
  End Select
End Sub
Sub ClearData_Realtime1()
  rD_Realtime1(0, 1).Resize(6).ClearContents
  rD_Realtime1(1, 3).Resize(5).ClearContents
  rD_Realtime1(1, 5).Resize(5).ClearContents
  rD_Realtime1(1, 7).Resize(5).ClearContents
  rD_Realtime1(1, 9).Resize(5).ClearContents
  rD_Realtime1(9, 1).Resize(5000, 7).ClearContents
End Sub

Sub ClearTaiChinh()
  rBCDKT_VCBs.Resize(500, 75).ClearContents
  rKQKD_VCBs.Resize(500, 75).ClearContents
  rLCTT_VCBs.Resize(500, 75).ClearContents
  rBCDKT_Q_VCBs.Resize(500, 75).ClearContents
  rKQKD_Q_VCBs.Resize(500, 75).ClearContents
  rLCTT_Q_VCBs.Resize(500, 75).ClearContents
  rData_CSTC.Resize(500, 75).ClearContents
  rData_SKQ.Resize(500, 75).ClearContents
End Sub
Attribute VB_Name = "mdZSearch"
Option Explicit

Sub WriteToLBX(ByVal aData, ByVal ListBox As MSForms.ListBox)
  If Not IsArray(aData) Then Exit Sub
  With ListBox: .Clear: .AddItem: .List = aData: End With
End Sub

Private Sub test_DataCodeCTY()
  Call DataCodeCTY
End Sub
Function DataCodeCTY() As Variant
  If IsArray(aDataCodeCTY) Then DataCodeCTY = aDataCodeCTY: Exit Function
  Const Col = 12
  Dim FSO As Object, Path$, eURL$
  Dim oFile As Object, oJsonData As Object, Text$
  On Error Resume Next
  Set FSO = Glb_FSO
  If FSO Is Nothing Then Set FSO = CreateObject("Scripting.FileSystemObject")
  Set Glb_FSO = FSO
  Path = IIf(Environ$("tmp") <> "", Environ$("tmp"), Environ$("temp"))
  Path = Path & "\" & "stocks.json"
  If FSO.FileExists(Path) Then
    GoSub Read
  Else
    On Error Resume Next
    eURL = "https://finfo-api.vndirect.com.vn/stocks?status=all"
    If URLDownloadToFile(0, eURL, Path, 0, 0) = 0 Then GoSub Read
    On Error GoTo 0
  End If
  If Not oJsonData Is Nothing Then GoSub GetData
Ends:
  Set FSO = Nothing: Set oFile = Nothing
Exit Function
GetData:
  Dim oJ, oD, K%, Total(), tTotal()
  Set oD = oJsonData("data")
  For Each oJ In oD
    K = K + 1
    ReDim Preserve tTotal(1 To Col, 1 To K)
    tTotal(1, K) = oJ("symbol")         'Ma CK
    tTotal(2, K) = oJ("company")        'Ten CTY
    tTotal(3, K) = oJ("floor")          'Ng|fffd|nh
    tTotal(4, K) = oJ("shortName")      'T|fffd|n Ngan
    tTotal(5, K) = oJ("industryName")   '
    tTotal(6, K) = oJ("companyName")    '
    tTotal(7, K) = oJ("indexCode")
    tTotal(8, K) = oJ("companyNameEng") 'Ten Tieng Anh
    tTotal(9, K) = oJ("listedDate")     'Ng|fffd|y L|fffd|n S|fffd|n
    tTotal(10, K) = oJ("status")
    tTotal(11, K) = UCase(tTotal(1, K))
    tTotal(12, K) = UCase(RemoveSign(tTotal(2, K)))
  Next
  If K > 0 Then GoSub Trans: aDataCodeCTY = Total: DataCodeCTY = Total
  Set oD = Nothing: Set oJ = Nothing
Return
Trans:
  Dim I%, J%
  ReDim Total(1 To K, 1 To Col)
  For I = 1 To K: For J = 1 To Col: Total(I, J) = tTotal(J, I): Next J, I
Return
Read:
  With CreateObject("ADODB.Stream")
    .Charset = "utf-8": .Open: .LoadFromFile (Path): Text = .ReadText(): .Close
  End With
  Set oJsonData = JsonConverter.ParseJson(Text)
Return
End Function

Private Sub test_ThuatToanTimKiem()
  Dim Arr
  Arr = ThuatToanTimKiem(DataCodeCTY, 0.1)
  'dbprint Arr, Ti:=0
  Debug.Print DataCodeCTY(172, 1)
  
End Sub
Function ThuatToanTimKiem(ByVal MainArr, ByVal Tile!)
  Dim I%, J%, aI%, tK%, iTile%
  Dim UB1&, UB2%, LB1%, LB2%, Md%, T&
  LB1 = LBound(MainArr): LB2 = LBound(MainArr, 2)
  UB1 = UBound(MainArr): UB2 = UBound(MainArr, 2)
  iTile = (Tile * 100): Md = UB1 Mod iTile
  aI = (UB1 - Md) / iTile: tK = 1
  ReDim bTotal(1 To iTile, 1 To 2)
  ReDim Total(LB1 To UB1, LB2 To UB2)
  For I = LB1 To UB1
    If I > tK * aI Then
      T = IIf(UB1 < tK * aI + aI, Md, 0)
      bTotal(tK, 1) = MainArr(I + T - 1, LB2)
      bTotal(tK, 2) = T + I - 1
      tK = tK + 1
    End If
  Next I
  If tK > iTile / 3 Then
    ThuatToanTimKiem = bTotal
  End If
End Function



Sub SearchMaCK()

  Dim Rng As Range
  Set Rng = rTT_VCBs(1, 3)
  Rng(1, 1).Resize(6).ClearContents
  Rng(2, 3).Resize(5).ClearContents
  Rng(2, 5).Resize(5).ClearContents
  Dim Data: Data = DataCodeCTY
  If Not IsArray(Data) Then Exit Sub
  Dim I&, J%, UB&, UB2%, T$
  UB = UBound(Data): T = rTT_VCBs.Value
  If T = vbNullString Then Exit Sub
  For I = 1 To UB
    If LCase$(T) = LCase$(Data(I, 1)) _
    Or LCase$(T) = LCase$(Data(I, 3)) Then
      Rng(1, 1).Value = Data(I, 2)
      Rng(3, 1).Value = Data(I, 5)
      Rng(4, 1).Value = Data(I, 4)
      Rng(5, 1).Value = Data(I, 1)
      Rng(6, 1).Value = Data(I, 8)
      Rng(2, 3).Value = Data(I, 3)
      Rng(3, 3).Value = Data(I, 9)
      Rng(4, 3).Value = Data(I, 10)
      Rng(5, 3).Value = Data(I, 7)
      Rng.Value = UCase(Rng.Value)
      'VCBs_HoSoDoanhNghiep Rng
      Exit Sub
    End If
  Next
  rTT_VCBs.Value = ""
  Rng.Value = UniMethod("Kh|fffd|ng t|fffd|if|fffd|m th|fffd|aas|fffd|y!")
End Sub

Function FindLBX(ByVal strSearchTxt$, _
                  ByVal ArrList, _
         Optional ByVal ListBox As MSForms.ListBox)
  If Not IsArray(ArrList) Then Exit Function
  Dim I&, J%, tL%, R&, Result(), Arr, MaxRow&, MaxCol%, Text, TempArr, Tmp$
  strSearchTxt = UCase$(RemoveSign(strSearchTxt))
  Dim SP$(): SP = Split(strSearchTxt, ",")
  If UBound(SP) > 0 Then
    Text = SP(UBound(SP))
    Erase SP
  Else
    Text = strSearchTxt
  End If
  SP = Split(Text, " ")
  If UBound(SP) > 0 Then Text = Join(SP, "*")
  Text = "*" & Text & "*"
  
  If Len(Text) < 1 Then GoTo Ends
  Arr = ArrList
  If Not IsArray(Arr) Then Exit Function
  MaxRow = UBound(Arr): MaxCol = UBound(Arr, 2)
  ReDim TempArr(1 To MaxRow, 1 To MaxCol)
  For I = 1 To MaxRow
    For J = 11 To 12
      If Arr(I, J) Like Text Then GoTo AddArr
    Next
    If False Then
AddArr: R = R + 1: For J = 1 To MaxCol: TempArr(R, J) = Arr(I, J): Next
    End If
  Next
  If R = 0 Then GoTo Ends
  ReDim Result(1 To R, 1 To MaxCol)
  For I = 1 To R: For J = 1 To MaxCol: Result(I, J) = TempArr(I, J): Next J, I
  WriteToLBX Result, ListBox
  ListBox.Visible = True
  FindLBX = Result
Ends:
End Function


Function FindMaCK(ByVal MaCK$) As Boolean
  If MaCK = vbNullString Then Exit Function
  Dim Data: Data = DataCodeCTY
  If Not IsArray(Data) Then Exit Function
  Dim I&, UB&
  UB = UBound(Data)
  For I = 1 To UB
    If LCase$(MaCK) = LCase$(Data(I, 1)) Then
      FindMaCK = True: Exit Function
    End If
  Next
End Function

Sub VCBs_HoSoDoanhNghiep(ByVal Rng As Range)
  On Error Resume Next
  Dim HDoc, oHttp, TTLH, Url$
  GoSub SubHttp
  Set TTLH = HDoc.getElementById("thong_tin_lien_he")
  Set TTLH = TTLH.getElementsByTagName("tbody")(0).Rows
  Rng(2, 1).Value = TTLH(7).Cells(1).innerText
  Rng(2, 5).Value = TTLH(3).Cells(1).innerText
  Rng(3, 5).Value = TTLH(4).Cells(1).innerText
  Rng(4, 5).Value = TTLH(5).Cells(1).innerText
  Rng(5, 5).Value = TTLH(6).Cells(1).innerText
  Exit Sub
SubHttp:
  Set HDoc = Nothing: Set oHttp = Nothing
  #If Win64 Then
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
  #Else
    Set oHttp = CreateObject("MSXML2.ServerXMLHTTP")
  #End If
  With oHttp
    Url = VCBs_Company & rTT_VCBs.Value
    .Open "GET", Url, False
    .setRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"
    .setRequestHeader "Content-type", "application/x-www-form-urlencoded"
    .send ""
    If .Status <> 200 Then Return
    Set HDoc = CreateObject("HTMLFile")
    HDoc.body.innerhtml = .responseText
  End With
Return
End Sub


' InQuest injected base64 decoded content
' K+-zd
' xZ+-
' !"w(

INQUEST-PP=macro
