Attribute VB_Name = "Module1"
Sub RiskReport()

Application.ScreenUpdating = False
Application.EnableEvents = False

'--------INPUT FRONT SHEET DETAILS----------
Dim customer As Range
Set customer = Sheets("PJD").Range("Customer")
Dim program As Range
Set program = Sheets("PJD").Range("Program")
Dim authoriser As Range
Set authoriser = Sheets("PJD").Range("Authoriser")
Dim user As String
user = Application.UserName
Dim DocRef As String
DocRef = Sheets("PJD").Range("Doc_No").Value & " issue " & Sheets("PJD").Range("Doc_Issue").Value

Dim wdApp As Object
Set wdApp = CreateObject("word.application")
Dim wdDoc As Object
Set wdDoc = wdApp.Documents.Open("J:\NPI Tool Template\PJD Template.dotx")

wdApp.Visible = True

wdDoc.Bookmarks("Customer").Range.Text = customer
wdDoc.Bookmarks("Programme").Range.Text = program
wdDoc.Bookmarks("Authorisor").Range.Text = authoriser
wdDoc.Bookmarks("Customer2").Range.Text = customer
wdDoc.Bookmarks("DocDate").Range.Text = Sheets("PJD").Range("Doc_Date")
wdDoc.Bookmarks("DocRef").Range.Text = DocRef

'-------END FRONT SHEET INPUT-----------


'-------ADD MATRIX TO DOCUMENT----------

'unmerge cells before copy
Sheets("PJD").Range("F8:L8").MergeCells = False

'Copy Range from Excel
 numrow = Sheets("PJD").Range("B99999").End(xlUp).Row
 Set tbl = Range("B8:W" & numrow)

'Copy Excel Table Range
  tbl.Copy

'Paste Table into MS Word
  wdDoc.Bookmarks("Matrix").Range.PasteExcelTable _
    LinkedToExcel:=False, _
    WordFormatting:=True, _
    RTF:=False

'remerge cells before copy
Sheets("PJD").Range("F8:L8").MergeCells = True

'delete unwanted columns
  Set WordTable = wdDoc.Tables(3)
  With WordTable
    .Columns(13).Delete
    .Columns(12).Delete
    .Columns(11).Delete
    .Columns(10).Delete
    .Columns(9).Delete
    .Columns(8).Delete
    .Columns(7).Delete
    .Columns(6).Delete
    .Columns(5).Delete
    .Columns(4).Delete
    .Columns(3).Delete
 End With

'Autofit Table so it fits inside Word Document
  WordTable.AutoFitBehavior (wdAutoFitWindow)
  
'format table
 With WordTable
  .Style = "Moog"
  .ApplyStyleHeadingRows = True
  .ApplyStyleLastRow = False
  .ApplyStyleFirstColumn = False
  .ApplyStyleLastColumn = False
  .rows.HeightRule = wdRowHeightAuto
 End With
 
'-----------END TABLE INPUT------------


Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub




Attribute VB_Name = "PrintVersion_M"
Option Explicit

Function FileExist(FilePath As String) As Boolean
'PURPOSE: Test to see if a file exists or not

Dim TestStr As String

'Test File Path (ie "C:\Users\Chris\Desktop\Test\book1.xlsm")
  On Error Resume Next
    TestStr = Dir(FilePath)
  On Error GoTo 0

'Determine if File exists
  If TestStr = "" Then
    FileExist = False
  Else
    FileExist = True
  End If

End Function

Sub SaveSheet(sheetname As String)
'PURPOSE: Save file, if already exists add a new version indicator to filename

Dim TestStr As String
Dim ToolPath As String
Dim FolderPath As String
Dim myPath As String
Dim myFileName As String
Dim SaveName As String
Dim SaveExt As String
Dim myArray() As String
Dim VersionExt As String
Dim Saved As Boolean
Dim x As Long
Dim i As Integer
Dim ErrMsg As String

For i = 6 To 16
    If IsEmpty(Range("C" & i).Value) Then
        ErrMsg = MsgBox("Basic information at the top of the sheet must be completed before printing", vbCritical, "Print Failed")
        Exit Sub
    End If
Next

TestStr = ""
Saved = False
x = 2

 'make new workbook with sheet
  Sheets(sheetname).Range("E3") = Now()
  ToolPath = Application.ActiveWorkbook.Path
  ThisWorkbook.Sheets(sheetname).Copy

'Version Indicator (change to liking)
  VersionExt = "_v"

'Pull info about file
  On Error GoTo NotSavedYet
    myPath = ToolPath & "\" & sheetname & "_v1.xlsm"
    myFileName = Mid(myPath, InStrRev(myPath, "\") + 1, InStrRev(myPath, ".") - InStrRev(myPath, "\") - 1)
    FolderPath = Left(myPath, InStrRev(myPath, "\"))
    SaveExt = "." & Right(myPath, Len(myPath) - InStrRev(myPath, "."))
  On Error GoTo 0

'Determine Base File Name
  If InStr(1, myFileName, VersionExt) > 1 Then
    myArray = Split(myFileName, VersionExt)
    SaveName = myArray(0)
  Else
    SaveName = myFileName
  End If
    
'Test to see if file name already exists
  If FileExist(FolderPath & SaveName & "_v1" & SaveExt) = False Then
    Sheets(sheetname).Range("E5") = SaveName & "_v1"
    ActiveWorkbook.SaveAs FolderPath & SaveName & "_v1" & SaveExt, FileFormat:=52
    ActiveWorkbook.Close
    MsgBox (sheetname & " has been saved to " & FolderPath & SaveName & SaveExt)
    Sheets(sheetname).Range("E5") = SaveName & "_v1"
    Sheets(sheetname).Range("C15") = "1"
    Exit Sub
  End If
      
'Need a new version made
  Do While Saved = False
    If FileExist(FolderPath & SaveName & VersionExt & x & SaveExt) = False Then
      Sheets(sheetname).Range("E5") = SaveName & VersionExt
      ActiveWorkbook.SaveAs FolderPath & SaveName & VersionExt & x & SaveExt, FileFormat:=52
      Saved = True
      ActiveWorkbook.Close
      MsgBox (sheetname & " has been saved to " & FolderPath & SaveName & VersionExt & x & SaveExt)
      Sheets(sheetname).Range("E5") = SaveName & VersionExt & x
      Sheets(sheetname).Range("C15") = x
    Else
      x = x + 1
    End If
  Loop

Exit Sub

'Error Handler
NotSavedYet:
  MsgBox "This file has not been initially saved. " & _
    "Cannot save a new version!", vbCritical, "Not Saved To Computer"

End Sub


Sub SaveDFMEA()

Call SaveSheet("DFMEA")

End Sub

Sub SavePFMEA()

Call SaveSheet("PFMEA")

End Sub


Attribute VB_Name = "RPN_Calc_M"
Option Explicit

Sub RPNCalc(Wksht As String)

Application.ScreenUpdating = False
Application.EnableEvents = False

Dim N, LastRow As Integer
Dim Top, Bottom As Integer

LastRow = Sheets(Wksht).Range("B9999").End(xlUp).Row

For N = 19 To LastRow

    'Sheets(Wksht).Range("M" & N).Offset(0, -6).MergeArea.Select
    Top = Sheets(Wksht).Range("M" & N).Offset(0, -6).MergeArea.Row
    Bottom = Sheets(Wksht).Range("M" & N).Offset(0, -6).MergeArea.rows.Count + Top - 1
    Sheets(Wksht).Range("M" & N).Formula = "=G" & Top & "*L" & N & "*MAX(J" & Top & ":J" & Bottom & ")"
    
    'Sheets(Wksht).Range("U" & N).Offset(0, -3).MergeArea.Select
    Top = Sheets(Wksht).Range("U" & N).Offset(0, -3).MergeArea.Row
    Bottom = Sheets(Wksht).Range("U" & N).Offset(0, -3).MergeArea.rows.Count + Top - 1
    Sheets(Wksht).Range("U" & N).Formula = "=R" & Top & "*T" & N & "*MAX(S" & Top & ":S" & Bottom & ")"

Next

Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub

Sub DFMEA_RPNs()

Call RPNCalc("DFMEA")

End Sub

Sub PFMEA_RPNs()

Call RPNCalc("PFMEA")

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim sOldAddress As String
Dim vOldValue As Variant
Dim sOldFormula As String
 
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

'Dim SaveMsg As String
'Dim SaveMsgBox As String
'Dim i As Integer

'SaveMsg = "Save was unsuccessful due to:"

'If Sheets("Saving").Range("C2").Value > 0 Then

   ' For i = 4 To 30
       ' If Sheets("Saving").Range("C" & i).Value > 0 Then
        '    SaveMsg = SaveMsg & vbNewLine & vbNewLine & Sheets("Saving").Range("D" & i).Value
      '  End If
   ' Next
    
   ' SaveMsgBox = MsgBox(SaveMsg, vbCritical, "SAVE FAILED")
   ' Cancel = True
'
'End If


End Sub



Private Sub Workbook_TrackChange(Cancel As Boolean)
    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        sh.PageSetup.LeftFooter = "&06" & ActiveWorkbook.FullName & vbLf & "&A"
    Next sh
End Sub
 
Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)
     
    Dim wSheet As Worksheet
    Dim wActSheet As Worksheet
    Dim iCol As Integer
    Set wActSheet = ActiveSheet
     
     'Precursor Exits
     'Other conditions that you do not want to tracke could be added here
    If vOldValue = "" Then Exit Sub 'If you comment out this line *every* entry will be recorded
     
     'Continue
     
    On Error Resume Next ' This Error-Resume-Next is only to allow the creation of the tracker sheet.
    Set wSheet = Sheets("Tracker")
     '**** Add the tracker Sheet if it does not exist ****
     
    If wSheet Is Nothing Then
        Set wActSheet = ActiveSheet
        Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "Tracker"
    End If
    On Error GoTo 0
     '**** End of specific error resume next
     
    On Error GoTo ErrorHandler
    With Application
        .ScreenUpdating = False
        .EnableEvents = False
    End With
     
    With Sheets("Tracker")
         '******** This bit of code moves the tracker over a column when the first columns are full**'
        If .Cells(1, 1) = "" Then '
            iCol = 1 '
        Else '
            iCol = .Cells(1, 256).End(xlToLeft).Column - 7 '
            If Not .Cells(65536, iCol) = "" Then '
                iCol = .Cells(1, 256).End(xlToLeft).Column + 1 '
            End If '
        End If '
         '********* END *****************************************************************************'
        .Unprotect Password:="Secret"
         
         '******** Sets the Column Headers **********************************************************
        If LenB(.Cells(1, iCol).Value) = 0 Then
            .Range(.Cells(1, iCol), .Cells(1, iCol + 7)) = Array("Cell Changed", "Old Value", _
            "New Value", "Old Formula", "New Formula", "Time of Change", "Date of Change", "User")
            .Cells.Columns.AutoFit
        End If
         
        With .Cells(.rows.Count, iCol).End(xlUp).Offset(1)
             
            .Value = sOldAddress
             
            .Offset(0, 1).Value = vOldValue
            .Offset(0, 3).Value = sOldFormula
             
            If Target.Count = 1 Then
                .Offset(0, 2).Value = Target.Value
                If Target.HasFormula Then .Offset(0, 4).Value = "'" & Target.Formula
            End If
             
            .Offset(0, 5) = Time
            .Offset(0, 6) = Date
            .Offset(0, 7) = Application.UserName
            .Offset(0, 7).Borders(xlEdgeRight).LineStyle = xlContinuous
        End With
         
         '.Protect Password:="Secret"  'Uncomment to protect the "tracker tab"
         
    End With
ErrorExit:
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
    End With
     
    wActSheet.Activate
    Exit Sub
     
ErrorHandler:
     'any error handling you want
     'Debug.Print "We have an error"
    Resume ErrorExit
     
End Sub
 
Private Sub Workbook_SheetSelectionChange(ByVal sh As Object, ByVal Target As Range)
     
    With Target
        sOldAddress = .Address(external:=True)
         
        On Error Resume Next
        If .Count > 1 Then
             
            vOldValue = "Multiple Cell Select"
            sOldFormula = vbNullString
             
        Else
             
            vOldValue = .Value
            If .HasFormula Then
                sOldFormula = "'" & Target.Formula
            Else
                sOldFormula = vbNullString
            End If
        End If
    End With
End Sub







Attribute VB_Name = "WordDocBig"
Sub CreateWordDoc2()

Application.ScreenUpdating = False
Application.EnableEvents = False

'--------INPUT FRONT SHEET DETAILS----------
Dim customer As Range
Set customer = Sheets("PJD").Range("Customer")
Dim program As Range
Set program = Sheets("PJD").Range("Program")
Dim authoriser As Range
Set authoriser = Sheets("PJD").Range("Authoriser")
Dim user As String
user = Application.UserName
Dim DocRef As String
DocRef = Sheets("PJD").Range("Doc_No").Value & " issue " & Sheets("PJD").Range("Doc_Issue").Value

Dim wdApp As Object
Set wdApp = CreateObject("word.application")
Dim wdDoc As Object
Set wdDoc = wdApp.Documents.Open("J:\NPI Tool Template\PJD Template.dotx")

wdApp.Visible = True

wdDoc.Bookmarks("Customer").Range.Text = customer
wdDoc.Bookmarks("Programme").Range.Text = program
wdDoc.Bookmarks("Authorisor").Range.Text = authoriser
wdDoc.Bookmarks("Customer2").Range.Text = customer
wdDoc.Bookmarks("DocDate").Range.Text = Sheets("PJD").Range("Doc_Date")
wdDoc.Bookmarks("DocRef").Range.Text = DocRef

'-------END FRONT SHEET INPUT-----------


'-------ADD MATRIX TO DOCUMENT----------

'Copy Range from Excel
 numrow = Sheets("PJD").Range("B99999").End(xlUp).Row
 Set tbl = Range("B8:M" & numrow)

'Copy Excel Table Range
  tbl.Copy

'Paste Table into MS Word
  wdDoc.Bookmarks("Matrix").Range.PasteExcelTable _
    LinkedToExcel:=False, _
    WordFormatting:=True, _
    RTF:=False

'Autofit Table so it fits inside Word Document
  Set WordTable = wdDoc.Tables(3)
  WordTable.AutoFitBehavior (wdAutoFitWindow)
  
'format table
 With WordTable
  .Style = "Moog"
  .ApplyStyleHeadingRows = True
  .ApplyStyleLastRow = False
  .ApplyStyleFirstColumn = False
  .ApplyStyleLastColumn = False
 End With
 
'colour second header row
 With WordTable
 For i = 5 To 11
    .Cell(2, i).Shading.BackgroundPatternColorIndex = wdGray25
    .Cell(2, i).Range.Bold = wdToggle
 Next
 End With

 
'-----------END TABLE INPUT------------


Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub


Attribute VB_Name = "WordDocSmall"
Sub CreateWordDoc()

Application.ScreenUpdating = False
Application.EnableEvents = False

'--------INPUT FRONT SHEET DETAILS----------
Dim customer As Range
Set customer = Sheets("PJD").Range("Customer")
Dim program As Range
Set program = Sheets("PJD").Range("Program")
Dim authoriser As Range
Set authoriser = Sheets("PJD").Range("Authoriser")
Dim user As String
user = Application.UserName
Dim DocRef As String
DocRef = Sheets("PJD").Range("Doc_No").Value & " issue " & Sheets("PJD").Range("Doc_Issue").Value

Dim wdApp As Object
Set wdApp = CreateObject("word.application")
Dim wdDoc As Object
Set wdDoc = wdApp.Documents.Open("J:\NPI Tool Template\PJD Template.dotx")

wdApp.Visible = True

wdDoc.Bookmarks("Customer").Range.Text = customer
wdDoc.Bookmarks("Programme").Range.Text = program
wdDoc.Bookmarks("Authorisor").Range.Text = authoriser
wdDoc.Bookmarks("Customer2").Range.Text = customer
wdDoc.Bookmarks("DocDate").Range.Text = Sheets("PJD").Range("Doc_Date")
wdDoc.Bookmarks("DocRef").Range.Text = DocRef

'-------END FRONT SHEET INPUT-----------


'-------ADD MATRIX TO DOCUMENT----------

'Copy Range from Excel
 numrow = Sheets("PJD").Range("B99999").End(xlUp).Row
 Set tbl = Range("B8:E" & numrow)

'Copy Excel Table Range
  tbl.Copy

'Paste Table into MS Word
  wdDoc.Bookmarks("Matrix").Range.PasteExcelTable _
    LinkedToExcel:=False, _
    WordFormatting:=True, _
    RTF:=False

'Autofit Table so it fits inside Word Document
  Set WordTable = wdDoc.Tables(3)
  WordTable.AutoFitBehavior (wdAutoFitWindow)
  
'format table
 With WordTable
  .Style = "Moog"
  .ApplyStyleHeadingRows = True
  .ApplyStyleLastRow = False
  .ApplyStyleFirstColumn = False
  .ApplyStyleLastColumn = False
  .rows.HeightRule = wdRowHeightAuto
 End With
 
'-----------END TABLE INPUT------------


Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub


INQUEST-PP=macro
