Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "System-1"


















'------------------>>> Spezielle Visual Basic-Beispiele<<<------------------
'   Weitere Informationen |fffd|ber eine Eigenschaft, eine Methode, eine
'   Anweisung oder andere Schl|fffd|sselw|fffd|rter erhalten Sie, indem Sie das
'   Schl|fffd|sselwort markieren und F1 dr|fffd|cken. Die |fffd|quivalenten Microsoft
'   Excel 4.0-Makros f|fffd|r diese Prozeduren finden Sie im Tabellenblatt
'   "Spezial" in dieser Arbeitsmappe.
'------------------------------------------------------------------------------

'   Zur eindeutigen Definition von Variablen sollte die Anweisung
'   "Option Explizit" verwendet werden. Dies ist nicht zwingend erforder-
'   lich, erh|fffd|ht jedoch die Effizienz und Eindeutigkeit.
    Option Explicit

'   Konstante Zeichenfolge (nur f|fffd|r Word 6.0 f|fffd|r Windows/OLE2-Prozeduren)
Const szIntFilter1 = "Microsoft Word Programm (Winword.exe),WINWORD.EXE"
Const szIntTitle1 = "Wo ist Word installiert?"
Const szIntFilter2 = "Programm-Dateien (*.exe),*.EXE, Treiber und" & _
     " Bibliotheken(*.DRV;*.DLL),*.DRV;*.DLL"
Const szIntTitle2 = "Versionskatalog"
Const szIntFilter3 = "Microsoft Word-Dokument (*.DOC), *.doc,Nur Text" & _
     " (*.txt),*.txt,Visual Basic-Modul (*.bas),*.bas,Alle Dateien(*.*),*.*"
Const szIntTitle3 = "Word Schnelldruck"


Public Function VB_Wegstrecke(X1 As Double, Y1 As Double, _
                    X2 As Double, Y2 As Double)
Attribute VB_Wegstrecke.VB_ProcData.VB_Invoke_Func = " \n14"
'   > F|fffd|hren Sie diese Funktion in einem beliebigen Blatt oder in
'     einer beliebigen Prozedur aus.
'   Berechnet die Entfernung zwischen zwei Koordinatenpunkten.

    VB_Wegstrecke = Sqr((X2 - X1) ^ 2 + (Y2 - Y1) ^ 2)
End Function
    

Sub VB_Verzweigung_Beispiel()
Attribute VB_Verzweigung_Beispiel.VB_ProcData.VB_Invoke_Func = " \n14"
'   Ruft nach W|fffd|hlen der Schaltfl|fffd|che "OK" den Microsoft Excel 4.0-Makro
'   Verzweigung_Beispiel (im Register "Spezial") auf.
'   > F|fffd|hren Sie diesen Makro in einem beliebigen Blatt aus.
'   Fragt den Benutzer, ob der Makro aufgerufen werden soll und f|fffd|hrt
'   ihn aus, nachdem "OK" gew|fffd|hlt wurde.
    If MsgBox("Status: Ausf|fffd|hrung von VB-Prozedur. " & _
        " XLM-Code aufrufen?", 1, "VB-Meldungsdialolg") = 1 Then
            Run ([Spezial!Verzweigung_Beispiel])
    End If
End Sub



'---------------->>>Anwendungs|fffd|bergreifende Code-Beispiele<<<---------------------
'   Als Benutzer der im folgenden Abschnitt dargestellten Beispiele
'   sollten Sie |fffd|ber tiefergreifende Erfahrung mit Microsoft Excel,
'   Windows und/oder Visual Basic verf|fffd|gen.
'------------------------------------------------------------------------


Sub VB_MS_Query_Fetch()
Attribute VB_MS_Query_Fetch.VB_ProcData.VB_Invoke_Func = " \n14"
'   Startet Microsoft Query, f|fffd|hrt eine Abfrage durch und gibt die Daten
'   an Microsoft Excel zur|fffd|ck. Weitere Informationen |fffd|ber Microsoft Query
'   finden Sie im Microsoft Query Benutzerhandbuch.
'   Zur Ausf|fffd|hrung dieses Makros mu|fffd| im Rahmen des Microsoft Excel
'   Setup-Programms Microsoft Query und ein dBase-Treiber installiert
'   werden. Die Beispieldatei MITARBEI.DBF wird automatisch mit Microsoft
'   Query installiert.
'   F|fffd|hren Sie diesen Makro in einem beliebigen Tabellenblatt aus. Ein
'   Ausgabeblatt wird automatisch durch einen Makro in die Arbeitsmappe
'   eingef|fffd|gt.

    Dim Chan, fetchaddress$
    Dim x As String, MSQueryPfad As String, SQL As String, _
        Qt_Verz As String, iRow, iCol, Wks As Object

'   Die Funktion VB_GetWindowsDirectory startet automatisch Microsoft Query
'   (s.a. die Win31 API und OLE2 Automatisierungsbeispiele weiter unten).
    MSQueryPfad = VB_GetWindowsDirectory & "\msapps\msquery\"
    Shell PathName:=MSQueryPfad & "msquery.exe"
    SQL = "[open('select * from " & MSQueryPfad & "mitarbei.dbf" & _
            " where ORT ='Hamburg'')]"
    AppActivate Application.Caption
'   Gestatten Sie Microsoft Query etwas Zeit, um f|fffd|r eine DDE-Verkn|fffd|pfung
'   verf|fffd|gbar zu werden.
    Application.Wait Now + TimeValue("00:00:02")
    Chan = DDEInitiate("MSQuery", "System")
'   Greift auf die dBASE-Beispieldateien zu.
    DDEExecute Channel:=Chan, String:="[logon('dBase Files')]"
    DDEExecute Channel:=Chan, String:=SQL
'   Jede DDE-Anfrage gibt eine Informations-Zeichenfolge zur|fffd|ck.
    iRow = DDERequest(Chan, "numrows")
    iCol = DDERequest(Chan, "numcols")
'   Setzt die "Wks"-Variable in das eingef|fffd|gte Blatt ein, so da|fffd| darauf in
'   der nachstehenden DDE-Ausf|fffd|hrung verwiesen werden kann.
    Set Wks = Worksheets.Add
    fetchaddress$ = "[" + ThisWorkbook.Name + "]" + Wks.Name
    DDEExecute Channel:=Chan, String:= _
    "[fetch('excel','" & fetchaddress$ & "','Z1S1:z" & iRow(1) _
        & "s" & iCol(1) & "','all')]"
    DDEExecute Channel:=Chan, String:="[close()]"
    DDETerminate Chan
    ActiveSheet.Name = ">> Abfrage-Ergebnis<<"
End Sub


Sub VB_Datei_aufrufen()
Attribute VB_Datei_aufrufen.VB_ProcData.VB_Invoke_Func = " \n14"
'   Ruft "kernel" auf, um mit Hilfe einer Abfrage zu ermitteln, welche
'   Datei als letzte ge|fffd|ffnet wurde, (gespeichert in der Datei EXCEL5.ini)
'   und zeigt das Ergebnis (inkl. Pfad) in dem Dialogfeld an.
'   > F|fffd|hren Sie diese Prozedur in einem beliebigen Tabellenblatt aus.

    Dim msg, Erfolg
    Dim Filename As String, Range As String, _
        Schl|fffd|sselwort As String, Ergebnis As String * 128
'   Fragt nach der letzten in Microsoft Excel ge|fffd|ffneten Datei.
'   Dieser Code kann so ver|fffd|ndert werden, da|fffd| diese Abfrage f|fffd|r die Datei
'   Windows.INI erfolgt.
    Filename = "Excel5.ini"
    Range = "Recent File List"
    Schl|fffd|sselwort = "File1"
'   Ruft den GetPrivateProfileString auf, der am Anfang dieses Moduls
'   deklariert wurde.
    Erfolg = GetPrivateProfileString(Range, Schl|fffd|sselwort, "", _
        Ergebnis, Len(Ergebnis), Filename)
'   Blendet ein Ergebnis ein, falls eines gefunden werden konnte.
    If Erfolg Then
       MsgBox UCase(Ergebnis)
    Else
       MsgBox "Nicht gefunden."
    End If
End Sub

    
Sub VB_API_Rufe_Wiedergeben_WAV_Datei()
Attribute VB_API_Rufe_Wiedergeben_WAV_Datei.VB_ProcData.VB_Invoke_Func = " \n14"
'   Spielt die Sound-Datei (wav.-Format) ab, die durch die Funktion AUFRUFEN
'   spezifiziert wird (DING.WAV).
'   > F|fffd|hren Sie diesen Makro in einem beliebigen Blatt aus, und h|fffd|ren
'   Sie zu. Ein Sound-Treiber ist erforderlich.
    Call sndPlaySound("Ding.wav", 1)
End Sub


'----------->>> ZUS|fffd|TZLICHE VISUAL BASIC CODE-BEISPIELE <<<----------------
Sub VB_Redimension()
Attribute VB_Redimension.VB_ProcData.VB_Invoke_Func = " \n14"
'   Erweitert ein Datenfeld durch Erh|fffd|hung der Anzahl der definierten
'   Elemente unter Beibehaltung schon vorhandener Daten.
'   > F|fffd|hren Sie diesen Makro in einem beliebigen Blatt aus.
    Dim Z|fffd|hler As Integer
    ReDim Reis(2) As String
    Reis(1) = "Wei|fffd|"
    Reis(2) = "Braun"
'   Redimensioniert das Datenfeld "Reis" unter Beibehaltung der schon
'   definierten Elemente "wei|fffd|" und "braun".
    ReDim Preserve Reis(3)
    Reis(3) = "Wild"
    For Z|fffd|hler = 1 To UBound(Reis)
    MsgBox (Reis(Z|fffd|hler))
    Next
End Sub


Sub VB_GotoSamplesSheet(Schaltfl|fffd|cheNr As Integer)
Attribute VB_GotoSamplesSheet.VB_ProcData.VB_Invoke_Func = " \n14"


'------->>> Microsoft Excel 5.0 Bildschirmprozedur-Beispiele  <<<-----------

'   Diese einzeilige Prozedur wird den Schaltfl|fffd|chen auf dem Tabellen-
'   blatt "Inhalt" in dieser Arbeitsmappe zugewiesen. Um die den
'   jeweiligen Schaltfl|fffd|chen zugewiesenen Makros anzuzeigen, heben Sie
'   zun|fffd|chst den Blattschutz auf, indem Sie aus dem Men|fffd| "Extras" den
'   Befehl "Dokument sch|fffd|tzen" und dann den Befehl "Blattschutz aufheben"
'   w|fffd|hlen. W|fffd|hlen Sie dann eine Schaltfl|fffd|che, indem Sie STRG dr|fffd|cken,
'   w|fffd|hrend Sie mit der Maus auf die Schaltfl|fffd|che klicken. W|fffd|hlen Sie
'   aus dem Men|fffd| "Extras" den Befehl "Makro zuweisen", oder klicken Sie
'   mit der rechten Maustaste, und w|fffd|hlen Sie "Makro zuweisen" aus dem
'   Kontextmen|fffd|. Jede der Schaltfl|fffd|chen gibt eine unterschiedliche Zahl
'   an die Prozedur unten weiter. Diese Zahl wird als Indexwert f|fffd|r die
'   Funktion "Wahl" verwendet, die wiederum eine Textzeichenfolge zur|fffd|ck-
'   gibt.  Die Textzeichenfolge gibt an, welches Blatt in der Arbeitsmappe
'   aktiviert werden soll.
'------------------------------------------------------------------------------
'       > Aufzurufen von den Schaltfl|fffd|chen auf dem Blatt "Eingabe"
'         in dieser Arbeitsmappe.

        Sheets(Application.Choose(Schaltfl|fffd|cheNr, "Startseite", "Info", _
            "Projekt", "r-Kostra", "r-15-Rhld", "RR-Kostra", "RR-Rhld", "RR-Erg-Kostra", _
            "RR-Erg-Rhld", "MR-Kostra", "MR-Rhld", "MR-Erg-Kostra", "MR-Erg-Rhld", _
            "SPR-Kostra", "SPR-Rhld", "M-Kostra", "M-Rhld", "Speicherdaten", "RWB", "r-a", "kf", _
            "Vertretungen", "Lochblende", "Prantl", "Rohrtypen", "Schachtpreise", "Schacht", _
            "Becken", "Programmverkn|fffd|pfungen")).Activate
End Sub


'---------------->>> Win31 API und OLE2 Automatisierungsbeispiele <<<----------------
'   Alle externen Deklarationen sind im Blatt "VB-Deklarationen" deklariert.
Function VB_GetWindowsDirectory() As String
Attribute VB_GetWindowsDirectory.VB_ProcData.VB_Invoke_Func = " \n14"
'   Diese Funktion gibt den vollst|fffd|ndigen Pfad zum Windows-Verzeichnis auf
'   dem Computer, von dem sie aufgerufen wurde, zur|fffd|ck. Der Windows
'   API-Aufruf, der diese Informationen erh|fffd|lt, ist im Modul VB-Deklarationen
'   deklariert. Das Windows-Verzeichnis kann dazu verwendet werden, auf
'   Dateien, die sich im Windows-Pfad befinden (z.B. eine INI-Datei), Bezug
'   zu nehmen.
'   > Rufen Sie diese Funktion von einem beliebigen Blatt bzw. aus einer
'   beliebigen Funktion auf.
    Dim Gwdvar As String, Gwdvar_L|fffd|nge As Integer
    Gwdvar = Space(255) 'reserviert einen Platz f|fffd|r Ergebnisse im Speicher.
'   Ruft die Funktion "GetWindowsDirectory" auf (deklariert im n|fffd|chsten
'   Modul), die die L|fffd|nge des Windows-Verzeichnisses zur|fffd|ckgibt und den
'   Text in den Namen "Gwdvar" einsetzt.
    Gwdvar_L|fffd|nge = GetWindowsDirectory(lpbuffer:=Gwdvar, nsize:=255)
    VB_GetWindowsDirectory = Left(Gwdvar, Gwdvar_L|fffd|nge)      'eliminiert
'|fffd|berfl|fffd|ssige Zeichen
End Function


Sub VB_Word_Schnelldruck()
Attribute VB_Word_Schnelldruck.VB_ProcData.VB_Invoke_Func = " \n14"
'   Startet Word f|fffd|r Windows, |fffd|ffnet und druckt ein vom Benutzer im
'   Dialogfeld "Word Schnelldruck" angegebenes Dokument und schlie|fffd|t
'   dann Word.
'   > F|fffd|hren Sie diese Prozedur von einem beliebigen Blatt aus. Sie k|fffd|nnen
'   diese Prozedur entweder mit Word 2.0 oder Word 6.0 f|fffd|r Windows verwenden.
    Dim szFile, szFilter, szTitle, szDirApp As String, Word, ddechannel
    Dim InitialisiereWord As Variant
    szFilter = szIntFilter3
    szTitle = szIntTitle3
'   W|fffd|hlen Sie die zu druckende Datei unter Verwendung eines normalen
'   Dialogs aus.
    szFile = Application.GetOpenFilename(FileFilter:=szFilter, _
        Title:=szTitle)
    If szFile = False Then Exit Sub 'Prozedur bei Abbrechen verlassen.
    
'   Es gibt zwei M|fffd|glichkeiten, Word zu aktivieren. Wird Word bereits
'   ausgef|fffd|hrt, k|fffd|nnen Sie die folgende ActivateMicrosoftApp-Methode
'   verwenden, um zu Word zu wechseln. Wird Word noch nicht ausgef|fffd|hrt,
'   oder Sie m|fffd|chten sicherstellen, da|fffd| Word ausgef|fffd|hrt wird, verwenden Sie
'   "InitialisiereWord" und VB_Starten_Word_API (unten).
'
'   Anwendung.MicrosoftAnwAktivieren Index:=xlMicrosoftWord
'   VB_Starten_Word_API() gibt WAHR zur|fffd|ck, wenn Word gestartet ist.
    InitialisiereWord = VB_Starten_Word_API()
    If InitialisiereWord = vbCancel Then Exit Sub
        On Error GoTo Word2      'Wenn die OLE-Automation fehlschl|fffd|gt,
'       gehen Sie von der Annahme aus, da|fffd| Word 2.0 ausgef|fffd|hrt wird.
        Set Word = CreateObject("Word.Basic")
        AppActivate Application.Caption
        
        Word.Datei|fffd|ffnen Name:=(szFile), UmwandlungBest|fffd|tigen:=0, _
            ZuletztBearbErweitern:=0
             
        Word.DateiDruckenStandard
        Word.DateiSchlie|fffd|en 2
        If InitialisiereWord = vbOK Then Word.DateiBeenden
        Set Word = Nothing
    
        Exit Sub

Word2:
'       Word 2 gefunden.  Verwenden Sie zu diesem Zweck DDE.
        ddechannel = Application.DDEInitiate("Winword", "System")
        Application.DDEExecute ddechannel, _
         "[Datei|fffd|ffnen .Name = """ & szFile & """][DateiDruckenStandard][DateiSchlie|fffd|en 2]"
        If InitialisiereWord = vbOK _
            Then Application.DDEExecute ddechannel, "[DateiBeenden]"
        Application.DDETerminate ddechannel
   
End Sub


Public Function VB_Starten_Word_API(Optional ByVal AnwPfad)
Attribute VB_Starten_Word_API.VB_ProcData.VB_Invoke_Func = " \n14"
'   Stellt fest, ob Word ausgef|fffd|hrt wird, und startet Word, falls
'   dies nicht der Fall ist. Der R|fffd|ckgabewert ist WAHR, wenn die Anwendung
'   zum ersten Mal gestartet wird. Wird Word bereits
'   ausgef|fffd|hrt, verwenden Sie die Methode ActivateMicrosoftApp,
'   die weiter oben in diesem Modul beschrieben wird. Dieses Beispiel
'   zeigt au|fffd|erdem einige der neuen VBA-Merkmale, zum Beispiel optionale
'   Parameter. Diese Prozedur kann au|fffd|erdem adaptiert werden, um
'   ein beliebiges anderes Windows-Produkt zu starten.
'
'   Alle externen Deklarationen werden im Modul VB-Deklarationen
'   deklariert.
'   > Diese Funktion wird von der Prozedur "Word Schnelldruck"
'   oben aufgerufen.
'   Deklaration der Variablen.
    Dim strFilter As String, strFile As String, _
        strTitle As String, szDirApp As String
    Dim hWnd As Integer, Channum%
    Const AnwWord = "WINWORD.EXE"
    On Error Resume Next
    
'   "AnwWord" ist als Konstante definiert, die sich auf Microsoft Word
'   bezieht. "AnwPfad" ist ein optionaler Parameter. "IstFehlend" testet,
'   ob "AnwPfad" verwendet wird oder nicht, wenn diese Funktion aufgerufen
'   wird. "/w" schaltet alle automatischen Makros oder Assistenten aus,
'   die beim Starten von Microsoft Word ausgef|fffd|hrt werden k|fffd|nnten.
    If IsMissing(AnwPfad) Then AnwPfad = AnwWord & " /w"
    
    szDirApp = String$(255, Chr$(0)) 'Initialisiert Leerzeichen
'   |fffd|berpr|fffd|fen Sie, ob AnwWord gerade ausgef|fffd|hrt wird.
    hWnd = GetModuleHandle(AnwWord)
    
'   Wenn AnwWord nicht ausgef|fffd|hrt wird, jetzt starten.
    If hWnd = 0 Then
        hWnd = Shell(AnwPfad, 1)
'       Signalisiert, da|fffd| Word von dieser
'       Prozedur gestartet wurde.
        If hWnd = 0 Then
'           Anzeigen eines konventionellen "Datei |fffd|ffne"-Dialogs.
            strFile = Application.GetOpenFilename _
                (FileFilter:=szIntFilter1, Title:=szIntTitle1)
            If strFile = False Then 'Wiederholter Versuch
                VB_Starten_Word_API = vbCancel '(Word nicht gefunden.)
                Exit Function
            Else
                VB_Starten_Word_API = VB_Starten_Word_API(strFile & " /w")
                Exit Function
            End If
        End If
        VB_Starten_Word_API = vbOK  'Diese Prozedur hat Word gestartet,
        '   schlie|fffd|en sie AnwWord, wenn diese Prozedur beendet ist.
    Else
    
'       Eventuell wird AnwWord bereits ausgef|fffd|hrt, so da|fffd| es nicht beendet
'       werden mu|fffd|.
        VB_Starten_Word_API = vbNormal
    End If
   
End Function

Sub VB_VersionBrowser()
Attribute VB_VersionBrowser.VB_ProcData.VB_Invoke_Func = " \n14"
'   F|fffd|hrt die Funktion VB_GetVerInfo vor.
'   > F|fffd|hren Sie diese Prozedur in einem beliebigen Blatt aus.

Dim szFilter, szTitle, szFile
    szFilter = szIntFilter2
    szTitle = szIntTitle2
'   Anzeigen eines benutzerdefinierten "Datei |fffd|ffne"-Dialogs.
    szFile = Application.GetOpenFilename(FileFilter:=szFilter, _
        Title:=szTitle)
    If szFile <> False Then
        MsgBox Prompt:=VB_GetVerInfo(szFile), Title:=szTitle
    End If
End Sub


Public Function VB_GetVerInfo(ByVal sFileName As String) _
    As String
Attribute VB_GetVerInfo.VB_ProcData.VB_Invoke_Func = " \n14"
'   Gibt s|fffd|mtliche in einer Programm- oder Bibliothek-Datei gespeicherten
'   Informationen zur Version zur|fffd|ck. Die modifizierte Version dieser
'   Funktion wird verwendet, um die Funktion VB_Launch_Word_API aufzurufen
'   (siehe oben).  Zum Verst|fffd|ndnis dieser Funktion werden fundierte
'   Kenntnisse des Windows-Systems vorausgesetzt.
'
'   Alle externen Deklarationen finden Sie im Modulblatt VB-Deklarationen.

'   > Diese Funktion wird aus der Prozedur "Word Schnelldruck"
'   (s.o.) aufgerufen.

    Dim Log$
    Dim dwVerHnd As Long
    Dim dwVerInfoSize As Long
    Dim lpstrVffInfo As Long
    Dim szGetName As String
    Dim wVerLen As Long
    Dim iLen%, lpreturn&, lpVer As Long
    Dim bRetCode As Integer
    Dim szTemp$, InfoHeader, Infoheaders, szInfo As String
    Dim stVffinfo As VS_Version

    Log$ = Chr$(13) + Chr$(10) 'Wagenr|fffd|cklaufzeichen und neue Zeile.

'   Funktion GetFileVersionInfoSize kommt aus der Bibliothek-Datei "VER.DLL".
    dwVerInfoSize = GetFileVersionInfoSize(sFileName, dwVerHnd)
    If dwVerInfoSize Then
        lpstrVffInfo = GetPointer(stVffinfo, stVffinfo)

        szGetName = "\StringFileInfo\040904E4\"

'       Funktion GetFileVersionInfo (ebenfalls in der Bibliothek-Datei
'       "VER.DLL"), gibt den Wert WAHR zur|fffd|ck, wenn Informationen zur Version
'       gefunden werden.
        If GetFileVersionInfo(sFileName, 0&, dwVerInfoSize, lpstrVffInfo) _
         Then
            Infoheaders = Array("Comments", "CompanyName", _
                "FileDescription", "FileVersion", "InternalName", _
                "LegalCopyright", "LegalTrademarks", _
                "OriginalFilename", "PrivateBuild", "ProductName", _
                "ProductVersion", "SpecialBuild")
            For Each InfoHeader In Infoheaders

                wVerLen = 0
                lpVer = 0

                bRetCode = VerQueryValue(lpstrVffInfo, _
                    szGetName & InfoHeader, lpVer, wVerLen)
'               Auf g|fffd|ltige Informationen |fffd|berpr|fffd|fen.
                If (bRetCode <> 0) And (wVerLen <> 0) And (lpVer <> 0) Then
'                   Aus dem Pufferspeicher extrahieren.
                    szTemp$ = String$(wVerLen + 1, Chr$(0))
'                   Von externem Speicher kopieren.
                    lpreturn& = lstrcpy(szTemp$, lpVer)
'                   Auf g|fffd|ltige Informationen |fffd|berpr|fffd|fen.
                    iLen% = InStr(szTemp$, Chr$(0))
                    If iLen% Then
'                       Extra Zeichen abschneiden.
                        szInfo = szInfo + Mid$(szTemp$, 1, iLen% - 1) _
                        + Log$
                    End If
                End If
            Next

            If GetFileVersionInfoS(sFileName, 0&, dwVerInfoSize, _
             stVffinfo) Then
                szInfo = szInfo + "File Ver:" + Str$ _
                    (stVffinfo.vffInfo.dwFileVerMSh) + "." + _
                    Mid$(Str$(stVffinfo.vffInfo.dwFileVerMS), 2 _
 _
                    ) + "." _
                    + Mid$(Str$(stVffinfo.vffInfo.dwFileVerLSh), 2) + "." + Mid$(Str$(stVffinfo.vffInfo.dwFileVerLS), 2) + Log$
                szInfo = szInfo + "Prod Ver:" + Str$ _
                    (stVffinfo.vffInfo.dwProdVerMSh) + "." + Mid$ _
                    (Str$(stVffinfo.vffInfo.dwProdVerMS), 2 _
 _
                    ) + "." + Mid$(Str$(stVffinfo.vffInfo.dwProdVerLSh), 2) + "." + Mid$(Str$(stVffinfo.vffInfo.dwProdVerLS), 2)
            End If

        End If
        VB_GetVerInfo = szInfo
    End If

End Function


'------------->>>Anwendungs|fffd|bergreifendes Programmierbeispiel<<<----------------
'   F|fffd|r dieses Beispiel ben|fffd|tigen Sie ein Word 6.0-Vorlagenformular. Sie
'   k|fffd|nnen eines der Beispielformulare aus Word 6.0 verwenden(Rechnung,
'   Bestell, Arbzeit).
'
'   So k|fffd|nnen Sie das Beispiel ausprobieren:
'   1. |fffd|ffnen Sie ein Formular in Word 6.0 f|fffd|r Windows.
'      W|fffd|hlen Sie beispielsweise Neu aus dem Men|fffd| "Datei",
'      und w|fffd|hlen Sie dann "Rechnung".
'   2. F|fffd|llen Sie das Formular aus. Das Formular mu|fffd| als aktives Dokument
'      in Microsoft Word bestehen bleiben.
'   3. W|fffd|hlen Sie in einem Tabellenblatt in Microsoft Excel den Befehl "Makro"
'      im Men|fffd| "Extras".
'   4. W|fffd|hlen Sie "VB_ExtrahiereWord" und dann die Schaltfl|fffd|che
'      Ausf|fffd|hren.
'      Ein neues Blatt namens "Daten von Microsoft Word" wird in die
'      Arbeitsmappe eingef|fffd|gt.
'      Das Blatt enth|fffd|lt Spaltenk|fffd|pfe und die Daten, die im aktiven
'      Microsoft Word-Formular eingegeben wurden.
'
'H|fffd|herer Automatisierungsgrad:
'   1. Erstellen Sie ein Formular und speichern Sie es als Vorlage.
'   2. Kopieren Sie den WordBasic-Makro, und weisen Sie ihn einem
'      Tastatur-Shortcut unter Verwendung von Anpassen
'      im Men|fffd| "Extras" zu.
'   3. Kopieren Sie Rufe_Extrahiere() und ExtrahiereWord() in
'      eine neue Arbeitsmappe, und speichern Sie diese als Add-In-Makro
'      (mit der Erweiterung .XLA).
'   4. |fffd|ffnen Sie das Word-Formular und f|fffd|llen Sie es aus.
'   5. F|fffd|hren Sie den Word-Makro mit dem zugewiesenen Tastatur-Shortcut
'      aus.
'
'   Microsoft Excel 5.0 mu|fffd| ausgef|fffd|hrt werden, um Microsoft Word 6.0
'   aufrufen zu k|fffd|nnen.
'   Der folgende Microsoft Word 6.0-Makro veranla|fffd|t Microsoft Excel,
'   Microsoft Word 6.0 aufzurufen. Kopieren Sie den folgenden WordBasic-Makro,
'   f|fffd|gen Sie ihn im WordBasic-Makrofenster ein, und speichern Sie ihn dann
'   mit der Vorlage.
'
'   |fffd|ndern Sie die Variablen szfullfilename$ und szfilename$ zu der
'   Datei, in der die Daten st|fffd|ndig gespeichert werden.
'
'Sub Haupt()
'    wordWin$ = "Microsoft Word - " + WindowName$()
'    Q$ = Chr$(34)
'    szCmd$ = "[Run(" + Q$ + "VB_Rufe_Extrahiere" + Q$ + ")]"
'    Kmt Einsetzen Name der Datei in nachstehenden Anf|fffd|hrungszeichen
'    (gesamter Verzeichnispfad):
'    szfullfilename$ = "c:\Dokument\vb_Anfang\Buch2.xls"
'    Kmt Einsetzen Name der Datei (ohne Verzeichnispfad):
'    szfilename$ = "Buch2.xls"
'
'    szcmd2$ = "[|fffd|ffnen(" + Q$ + szfullfilename$ + Q$ + ")]"
'
'    Wenn AnwIsRunning("Microsoft Excel") = 0 Dann
'       Starte "EXCEL.EXE"
'        AktiviereAnw wordWin$, 1
'    Ende Wenn
'    Kanal = DDEKanal|fffd|ffnen("Excel", "System")
'    Wenn szfilename$ <> "" Dann
'        |fffd|berschriften$ = DDEAbfragen$(Kanal, "|fffd|berschriften")
'        Wenn InZnF(|fffd|berschriften$, UCase$(szfilename$)) = 0 Dann
'            DDEAusf|fffd|hren Kanal, szcmd2$
'            DDEAusf|fffd|hren Kanal, szCmd$
'            DDEKanalSchliessen Kanal
'        Sonst
'Mu|fffd| Tabellenblatt so aktivieren, da|fffd| es zuoberst liegt.
'            DDEAusf|fffd|hren Kanal, szCmd$
'            DDEKanalSchliessen Kanal
'       Ende Wenn
'       Sonst
'        DDEAusf|fffd|hren Kanal, szCmd$
'        DDEKanalSchliessen Kanal
'
'   Ende Wenn
'
' Ende Sub


Public Sub VB_Rufe_Extrahiere()
Attribute VB_Rufe_Extrahiere.VB_ProcData.VB_Invoke_Func = " \n14"
'   Erm|fffd|glicht es Word, die Prozedur "VB_ExtrahiereWord" in
'   Microsoft Excel zu starten. Stellt den korrekten |fffd|bergang
'   zwischen den Anwendungen sicher.
    Application.OnTime EarliestTime:=Now + TimeValue("00:00:01"), _
        Procedure:="VB_ExtrahiereWord", Schedule:=True
End Sub


Public Sub VB_ExtrahiereWord()
Attribute VB_ExtrahiereWord.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim szField$, szResult$, Wks As Worksheet, Word As Object
    Dim iRow, Count As Integer
  
    On Error GoTo TabellenblattEinf|fffd|gen      'Wenn ein Blatt namens "Daten
'       von Microsoft Word" nicht vorhanden ist, wird eines erstellt.
    Set Wks = Worksheets("Daten von Microsoft Word")
    On Error GoTo 0          'Fehlerauffang ausgeschaltet.
    
'    Zeilenz|fffd|hler setzen.
    iRow = Wks.Cells.SpecialCells(xlLastCell).Row + 1
   
'   Erstellt das WordBasic-Objekt, das Zugriff auf Microsoft Word-Methoden
'   und Eigenschaften erm|fffd|glicht.
    Set Word = CreateObject("Word.Basic")

'   Schleife durch alle Textmarken in Microsoft Word.
    For Count = 0 To Word.Z|fffd|hlenTextmarken() - 1
'       Word-Anweisungen, die ein Dollarzeichen enthalten, m|fffd|ssen in
'       eckige Klammern eingeschlossen sein.
        szField$ = Word.[TextmarkeName$](Count + 1)
        szResult$ = Word.[AbrufenTextmarke$](szField$)
'       Wenn die Textmarke zum Formular geh|fffd|rt, Daten extrahieren.
        If InStr(szResult$, "FORM") = 2 Then
'           Erste Zeile als Spaltenk|fffd|pfe verwenden, dann die folgenden
'           Informationen aus den Textmarken-Namen herausziehen.
            If Wks.Cells(Count + 1) <> szField$ Then _
                Wks.Cells(Count + 1) = szField$
'       Daten unten an bestehende Daten anh|fffd|ngen.
            Wks.Cells(iRow, Count + 1) = _
                Word.[AbrufenFormularFeldergebnis$](szField$)
        End If
    Next
    Cells.Select
    Cells.EntireColumn.AutoFit
    
    Exit Sub
TabellenblattEinf|fffd|gen:
'   Wenn kein Blatt namens 'Daten' vorhanden ist, folgendes ausf|fffd|hren.
    Set Wks = Worksheets.Add
    Wks.Name = "Daten von Microsoft Word"
    Resume Next 'Zur|fffd|ck zur Zeile nach dem Fehler.
    
End Sub


Attribute VB_Name = "System-2"


















'------------>>>VISUAL BASIC-DEKLARATIONEN F|fffd|R BEISPIELE<<<------------------
'   Deklarationen stehen normalerweise am Anfang des Moduls, das sie
'   verwendet. Die Deklarationen f|fffd|r die Module in dieser Arbeitsmappe
'   wurden zur besseren |fffd|bersichtlichkeit in separate Module plaziert.
'
'   Genauere Informationen zu diesen und anderen Bibliothek-Routinen
'   finden Sie im Microsoft Windows Software Development Kit
'   (Microsoft Windows SDK). Um das Microsoft Windows SDK anzufordern,
'   wenden Sie sich an die Microsoft Niederlassung in Ihrer N|fffd|he.
'------------------------------------------------------------------------------

'Verwenden Sie die Anweisung "Option Explizit", um die explizite
'Deklaration von Variablen sicherzustellen. Dies ist nicht zwingend
'erforderlich, sollte jedoch aus definitorischen Gr|fffd|nden erfolgen.
Option Explicit

'Deklaration, um den Windows-Pfad zu erhalten.
Public Declare Function GetWindowsDirectory Lib "KERNEL" _
    (ByVal lpbuffer As String, ByVal nsize As Integer) As Integer
Attribute GetWindowsDirectory.VB_ProcData.VB_Invoke_Func = " \n14"


'Deklaration, um die Einstellungen der INI-Datei zu erhalten.
Public Declare Function GetPrivateProfileString Lib "KERNEL" _
    (ByVal lpApplicationName As String, ByVal lpKeyName As Any, _
    ByVal lpDefault As String, ByVal lpReturnedString As String, _
    ByVal nsize As Integer, ByVal lpFileName As String) As Integer
Attribute GetPrivateProfileString.VB_ProcData.VB_Invoke_Func = " \n14"

'Deklaration, um Audio-Dateien (WAV) abzuspielen.
Public Declare Sub sndPlaySound Lib "MMSYSTEM" (ByVal WavFile _
    As String, ByVal wFlags As Integer)
Attribute sndPlaySound.VB_ProcData.VB_Invoke_Func = " \n14"

'Andere Deklarationen f|fffd|r Funktionen in externen Bibliotheken.
Public Declare Function GetModuleHandle Lib "KERNEL" _
    (ByVal App As String) As Integer
Attribute GetModuleHandle.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function GetModuleFileName Lib "KERNEL" _
    (ByVal hinst As Integer, ByVal lpszFilename As String, _
    ByVal cbFileName As Integer) As Integer
Attribute GetModuleFileName.VB_ProcData.VB_Invoke_Func = " \n14"

Public Declare Function lstrcpy Lib "KERNEL" _
    (ByVal lpszString$, ByVal LpStr As Long) As Long
Attribute lstrcpy.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function GetPointer Lib "KERNEL" _
    Alias "LSTRCPY" (scr As Any, dest As Any) As Long
Attribute GetPointer.VB_ProcData.VB_Invoke_Func = " \n14"

Public Declare Function GetFileVersionInfoSize Lib "VER.DLL" _
    (ByVal szFile$, dwVerHnd&) As Long
Attribute GetFileVersionInfoSize.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function GetFileVersionInfo Lib "VER.DLL" _
    (ByVal szFile$, ByVal handle&, ByVal cbBuf&, ByVal lpvData&) _
    As Integer
Attribute GetFileVersionInfo.VB_ProcData.VB_Invoke_Func = " \n14"

'Hier wird ein Alias von GetFileVersionInfo dazu verwendet, Typenstrukturen
'an die gleiche Bibliothek-Routine weiterzugeben.
Public Declare Function GetFileVersionInfoS Lib "VER.DLL" _
    Alias "GETFILEVERSIONINFO" (ByVal szFile$, ByVal handle&, _
    ByVal cbBuf&, lpvData As Any) As Integer
Attribute GetFileVersionInfoS.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function VerQueryValue Lib "VER.DLL" _
    (ByVal lpvBlock&, ByVal lpszSubBlock$, lplpBuf&, lpcb&) As Integer
Attribute VerQueryValue.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function VerLanguageName Lib "VER.DLL" _
    (ByVal uLang%, ByVal lpszLang$, ByVal cbLang%) As Integer
Attribute VerLanguageName.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function VerQueryFixInfo Lib "VER.DLL" _
    Alias "VERQUERYVALUE" (ByVal lpvBlock&, ByVal lpszSubBlock$, _
    lplpBuf As Any, lpcb&) As Integer
Attribute VerQueryFixInfo.VB_ProcData.VB_Invoke_Func = " \n14"


'-------------------------------------------------------
'Strukturen, die von der Versionsbibliothek (VER.DLL) verwendet werden
'Version-Informationsstruktur
Public Type VS_FIXEDFILEINFO
    dwSignature As Long
    dwFileVerMS As Integer
    dwFileVerMSh As Integer
    dwFileVerLS As Integer
    dwFileVerLSh As Integer
    dwProdVerMS As Integer
    dwProdVerMSh As Integer
    dwProdVerLS As Integer
    dwProdVerLSh As Integer
    dwFileFlagsMask As Integer
    dwFileFlags As Long
    dwFileOS As Long
    dwFileType As Long
    dwFielSubtype As Long
    dwFileDateMS As Long
    dwFileDateLS As Long
End Type


Public Type VS_Version
    wTotLen As Long
    wValLen As Long
    szSig As String * 16
    vffInfo As VS_FIXEDFILEINFO
    szBuff As String * 1024
End Type

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle110"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle122"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12221"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Tabelle52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub


INQUEST-PP=macro
