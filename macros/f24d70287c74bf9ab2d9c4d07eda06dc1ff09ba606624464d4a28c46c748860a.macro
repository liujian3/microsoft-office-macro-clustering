Attribute VB_Name = "PwCDeselectWarning"
Attribute VB_Base = "0{6C760E6E-5E17-4729-B7CB-BA0BB6D35871}{91887C49-D899-42E5-9983-9DE1F53820D7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub PwCYes1_Click()

PwCDeselectWarning.Tag = 1
PwCDeselectWarning.Hide

End Sub

Private Sub PwCNo1_Click()

PwCDeselectWarning.Tag = 0
PwCDeselectWarning.Hide

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

        If CloseMode = 0 Then Cancel = True
        PwCDeselectWarning.Tag = 0
        PwCDeselectWarning.Hide

End Sub
Attribute VB_Name = "PwCTabDelete"
Attribute VB_Base = "0{887B55D7-D7AA-4463-B0B7-C70116508961}{22C29A96-1866-4D5A-B463-49EC4B11DD22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False










Private Sub CommandButton1_Click()

Unload PwCTabDelete

End Sub

Private Sub Label1_Click()

End Sub
Attribute VB_Name = "PwCWarningSL"
Attribute VB_Base = "0{B637B9FD-41C7-435B-BD9E-0AE07FA4047D}{706936EB-41FF-4ADB-8BD6-9E7444CE9DE3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub CommandButton1_Click()

Unload PwCWarningSL

End Sub
Attribute VB_Name = "SharedFunctions"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''v2.2 Spellcheck Code'''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub Special_Spellcheck()

ActiveSheet.Unprotect Password:="pwc123lite"
    Dim WorkRange As Range
    Dim FoundCells As Range
    Dim Cell As Range
    Dim rng As Range
    Dim Lastrow As Long
    Dim Linksrow As Long
    Dim LinksColumn As Long
    Dim CellRow As Long
    
Lastrow = ActiveSheet.UsedRange.Rows(UBound(ActiveSheet.UsedRange.Value)).Row
  
Set rng = Cells.Find(What:="Links", After:=ActiveCell, LookIn:=xlFormulas, _
    LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
    False, SearchFormat:=False)

  Linksrow = rng.Row
  LinksColumn = rng.Column

If Not rng Is Nothing Then
  For CellRow = Linksrow To Lastrow Step 1
    
  If Cells(CellRow, LinksColumn).Locked = True Then
  If Cells(CellRow, LinksColumn).Hyperlinks.Count > 0 Then
  Cells(CellRow, LinksColumn).Locked = False
  End If
  End If


  Next CellRow

End If
  
ActiveSheet.Buttons("Spellcheck").Caption = "Spell Check"
ActiveSheet.Buttons("Spellcheck").Font.Bold = True
ActiveSheet.Buttons("Spellcheck").Font.Color = RGB(0, 0, 0)
ActiveSheet.Buttons("Spellcheck").Font.Size = 8
ActiveSheet.Buttons("Spellcheck").Height = 17
ActiveSheet.Buttons("Spellcheck").Width = 74
'ActiveSheet.Columns("i:i").EntireColumn.Locked = True

    
    Set WorkRange = ActiveSheet.UsedRange
    
    For Each Cell In WorkRange
        If Cell.Locked = False Then
            If Cell.EntireRow.Hidden = False And Cell.EntireColumn.Hidden = False Then
                If FoundCells Is Nothing Then
                    Set FoundCells = Cell
                Else
                    Set FoundCells = Union(FoundCells, Cell)
                End If
            End If
        End If
    Next Cell
    If FoundCells Is Nothing Then
        MsgBox "All cells are locked."
    Else
        FoundCells.CheckSpelling CustomDictionary:="CUSTOM.DIC", IgnoreUppercase:=False, AlwaysSuggest:=True
    End If
    
ActiveSheet.Protect Password:="pwc123lite", DrawingObjects:=False, Contents:=True, Scenarios:= _
        True, AllowFormattingColumns:=True, AllowFormattingRows:=True, _
        AllowInsertingHyperlinks:=True
        
    MsgBox "Spell check complete.", vbExclamation, "Check Spelling"

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'  Locomotive Code Version 2.0 - Updated 09/29/2016                                                 '
'   -Added DeleteWarningCount coded to all code below (and including) Sub ManualProcedure           '
'    -Code prevents RemoveText warning from appearing multiple times when using subprocedure code   '                                                                                                 '
'   -Added Public variable at top of code (above ManualProcedureList code                           '
'       -IterationCount sets # of checkboxes code will look for during loops                        '
'       (20 = each loop will look for 20 subcheckboxes)                                             '
'   -Updated all instances of "Range().Value" to "Activesheet.Range().Value                         '
'       -Previously, multiple tabs with Locomotive code could face issues if each had a worksheet   '                                                                                         '
'       scoped version of the same named range                                                      '
'       (i.e. Library Procedures!CBvalue01.01 and Scoping!CBValue01.01 might cause errors)          '
'                                                                                                   '
'                                                                                                   '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                   '
'                 Code v2.1 to fix sizing issue of Requirements button                              '
'                                 Chaged width from 124 to 110                                      '
'                                                                                                   '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                   '
'                 Code v2.2 to fix "Hyperlink in Subprocess of Calling Checkbox" issue              '
'                                                                                                   '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                   '
'         Code v3.0 to for xlListSeparator issue for Global Regions using LOCO Templates            '
'                                                                                                   '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''Search for the word "Conductor" to skip to sections where you may need to make manual updates'''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit
Public IterationCount As Integer
Public TabCountCheck As Integer
Public DeleteWarningCount As Integer


Private Sub PublicCountResets()
    IterationCount = 10
    ''''DO NOT EDIT DeleteWarningCount'''''''
    DeleteWarningCount = 0
    '''''''''''''''''''''''''''''''''''''''''
End Sub

'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Private Sub ManualProcedureList(CallingShapeName)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This sub is used to hide/unhide procedures that don't fall within the normal 3 tier system.
'This is generally used for procedure steps that are populated by a chocie in a completely different procedure.
'This sub cycles through each named range in a worksheet and compares tests to see if it falls within the borders of a defined subprocedure.
'If a named range falls within the the defined borders (rows), each named range is store in a type specific list.
'All type specific lists are then sent to the sub "ManualProcedure".
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim nm As name
Dim RangeName As String
Dim SPFirstRow As Integer
Dim SPLastRow As Integer
Dim SPRows As String
Dim NamedRangeRow As Integer
Dim TabSeparationPoint As Integer

Dim tfValue As Range
Dim i As Integer
Dim x As Integer
Dim y As Integer


Dim HoldingVar As String
Dim CBList As String
Dim DocList As String
Dim RowsList As String
Dim HyperlinkList As String
Dim PMDocList As String
Dim PMRowsList As String
Dim PMShapeNumberList As String

Dim SPArray As Variant
Dim SPList As String

Application.ScreenUpdating = False

On Error GoTo Errhandler


'''''''''''SubprocessShortcut - Checkbox Subprocess Functionality - Copy and paste IF statement below (BEFORE "Exit Sub" statement.  Update as noted'''''''''''''''''''''''''''''

'''''''''Conductor''''''''''''''Enter name of Checkbox that will call the ManualProcedure subprocess between these quotes. (Example: CB01.01)'''''''''''''''''''
If CallingShapeName = "CB06.02" Then
    '''''Enter name of subprocedure range between quotes below. (Example: SP01.01)'''''''''''''''
    SPRows = "SP06.02"
    '''''Enter CBValue name of calling checkbox between quotes below. (Example: CBValue1.01)''''''''''
    CBList = "CBValue06.02"
    '''''If applicable, enter name of documentation box related to calling Checkbox between quotes below. (Example: CB01.01 would be CBDoc01.01)'''''''''''
    DocList = ""
    GoTo ListCreation:
End If

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Copy text from above this line to below this line'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''DON"T delete this exit sub statement'''''''''''''
Exit Sub
'''''''''''DON"T delete this exit sub statement'''''''''''''




ListCreation:

'Debug.Print Activesheet.range(SPRows).Address


SPList = ActiveSheet.Range(SPRows).Address

SPArray = Split(SPList, ",")

Dim SPTopRow(1 To 5) As Integer
Dim SPBottomRow(1 To 5) As Integer

Debug.Print SPList


For x = LBound(SPArray) To UBound(SPArray)
    y = x + 1
    SPTopRow(y) = ActiveSheet.Range(SPArray(x)).Cells(1, 1).Row
    SPBottomRow(y) = SPTopRow(y) + ActiveSheet.Range(SPArray(x)).Rows.Count - 1
Next x

    
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''LOCOv3.0 Update to fix XLListseparator Global Error issue'''''''''''''''''''''''''
''''''''''''''''''''''''''''Resets ReferTo range for ME and SP subprocedures''''''''''''''''''''''''''''''
''''''''''''''''''''Issue was due to Excel using commas differently in global regions'''''''''''''''''''''
'''Resetting named ranges each time sets range to be stored in correct manner for the region using it'''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim GlobalString As String
Dim GlobalRange As Range

 
    For Each nm In ActiveSheet.Names
    
        RangeName = nm.name
        
            TabSeparationPoint = InStr(1, RangeName, "!", vbTextCompare)
            HoldingVar = Right(RangeName, Len(RangeName) - TabSeparationPoint)
            
            If Left(HoldingVar, 2) = "ME" Or Left(HoldingVar, 2) = "SP" Then
                 GlobalString = nm.RefersTo

                ActiveSheet.Names(nm.name).Delete
                ActiveSheet.Names.Add HoldingVar, RefersTo:=GlobalString
                Debug.Print GlobalString
                
                           
            End If

          
            
            If Left(HoldingVar, 2) = "ME" Or Left(HoldingVar, 2) = "SP" Then
                    NamedRangeRow = ActiveSheet.Range(HoldingVar).Cells(1, 1).Row

            Else
                    NamedRangeRow = ActiveSheet.Range(nm).Cells(1, 1).Row
            End If
            
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''LOCOv3.0 Update to fix XLListseparator global Error issue'''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        
        If (NamedRangeRow >= SPTopRow(1) And NamedRangeRow <= SPBottomRow(1)) Or (NamedRangeRow >= SPTopRow(2) And NamedRangeRow <= SPBottomRow(2)) Or _
        (NamedRangeRow >= SPTopRow(3) And NamedRangeRow <= SPBottomRow(3)) Or (NamedRangeRow >= SPTopRow(4) And NamedRangeRow <= SPBottomRow(4)) Or _
        (NamedRangeRow >= SPTopRow(5) And NamedRangeRow <= SPBottomRow(5)) Then
            
            If Left(HoldingVar, 5) = "CBDoc" Then
                If DocList = "" Then
                    DocList = RangeName
                Else
                    DocList = DocList & "," & RangeName
                End If
            End If
            
            If Left(HoldingVar, 5) = "CBRow" Then
                If RowsList = "" Then
                    RowsList = RangeName
                Else
                    RowsList = RowsList & "," & RangeName
                End If
            End If
            
            If Left(HoldingVar, 9) = "Hyperlink" Then
                If HyperlinkList = "" Then
                    HyperlinkList = RangeName
                Else
                    HyperlinkList = HyperlinkList & "," & RangeName
                End If
            End If

            If Left(HoldingVar, 5) = "PMDoc" Then
                If PMDocList = "" Then
                    PMDocList = RangeName
                    
                    PMShapeNumberList = Right(RangeName, 2)
                Else
                    PMDocList = PMDocList & "," & RangeName
                    PMShapeNumberList = PMShapeNumberList & "," & Right(RangeName, 2)
                End If
            End If
            
            If Left(HoldingVar, 6) = "PMRows" Then
                If PMRowsList = "" Then
                    PMRowsList = RangeName
                Else
                    PMRowsList = PMRowsList & "," & RangeName
                End If
            End If
            
            
        End If
          
    Next nm

'Debug.Print CBList
'Debug.Print DocList
'Debug.Print PMDocList
'Debug.Print PMRowsList
'Debug.Print PMShapeNumberList

Call ManualProcedure(CallingShapeName, SPRows, CBList, RowsList, DocList, HyperlinkList, PMDocList, PMRowsList, PMShapeNumberList, SPArray)

Exit Sub

Errhandler:
    Call Errhandler
    
End Sub
Private Sub TabExpandCaller(CallingShapeName, MasterTabHoldingName)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This sub is used to declare when a tab should be populated from a hidden master tab.           '
'This sub then calls the "Tab_Expand" macro to populate a copy of the hidden tab into the EGA.  '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim TabCreationName As String

On Error GoTo Errhandler



''''''''''''''Conductor'''''''''''''''''''TabShortcut - Copy and paste IF statement below to make additional Tab creation functionality.  Update as noted''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''On the worksheet, you will need to create a named range where a where the hyperlink will populate.
'''''''''''''''''''''''''''The named range must be "Hyperlink" followed by the same variable as the MasterTabHoldingName from below.
'''''''''''''''''''''''''''Example: If MasterTabHoldingName is RT1Tab, the Hyperlink named range must be "HyperlinkRT1Tab".
'''''''''''''''''''''''''''Note: When tab population is connected to a Level 2 or 3 checkbox, you must use the Subprocedure code instead of CBRows.
'''''''''''''''''''''''''''''''' Delete the CBRows named range and instead connect the CB to an SP named range.

If MasterTabHoldingName = "Update tab First Master sheet name here.  Tab name should be short and followed by the word Tab.  This tab name should appear as part of the checkbox name after a hypen(-)." Then
    TabCreationName = "Update tab visible sheet name here. Can be maximum 31 characters."
    Call Tab_Expand(CallingShapeName, MasterTabHoldingName, TabCreationName)


    '''''''''''''''''''''Delete this section if there is only one tab populated by the checkbox.  Paste additional copies of below code into IF statement for further additional populating tabs''''''''''''''''''''''''''''''''
    MasterTabHoldingName = "Update tab any additional Master sheet name here.  Tab name should be short and followed by the word Tab and a single/double digit number.  This is not attached to any checkbox name."
    TabCreationName = "Update tab visible sheet name here. Can be maximum 31 characters. Must be different from any other tabs populated.  Best practice is to number the same as above."
    Call Tab_Expand(CallingShapeName, MasterTabHoldingName, TabCreationName)
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End If
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Errhandler:
    Call Errhandler

End Sub


Private Sub ManualProcedure(CallingShapeName, SPRows, CBList, RowsList, DocList, HyperlinkList, PMDocList, PMRowsList, PMShapeNumberList, SPArray)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro is the bulk of the functionality of the "subprocedure" process.                                                                         '
'This macro takes the lists created in the "ManualProcedureList" macro and tests them.                                                              '
'Each list is separated into individual values.  Each value is then tested based on type.                                                           '
'Rows will hide/unhide, documentation boxes will clear, sub checkboxes will uncheck, and additional documenation boxes will reset if necessary.     '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim tfValue As Range
Dim CBNameStart As String
Dim CBNameEnd As String
Dim CBValueName As String

Dim CBArray As Variant
Dim RowsArray As Variant
Dim DocArray As Variant
Dim HyperlinkArray As Variant
Dim PMDocArray As Variant
Dim PMRowsArray As Variant
Dim PMShapeNumberArray As Variant
Dim x As Integer
Dim y As Integer
Dim i As Integer
Dim ForLoopTest As Boolean
Dim DocLoopTest As Boolean

'On Error GoTo Errhandler

CBArray = Split(CBList, ",")
RowsArray = Split(RowsList, ",")
DocArray = Split(DocList, ",")
HyperlinkArray = Split(HyperlinkList, ",")
PMDocArray = Split(PMDocList, ",")
PMRowsArray = Split(PMRowsList, ",")
PMShapeNumberArray = Split(PMShapeNumberList, ",")

CBNameStart = Left(CallingShapeName, 2)
CBNameEnd = Right(CallingShapeName, Len(CallingShapeName) - 2)
CBValueName = CBNameStart & "Value" & CBNameEnd

ForLoopTest = False
DocLoopTest = False
            
For y = LBound(CBArray) To UBound(CBArray)

    If ActiveSheet.Range(CBArray(y)).Value = True Then
        ForLoopTest = True
    
    ElseIf ActiveSheet.Range(CBArray(y)).Value = False Then
    
    End If

Next y

If ForLoopTest = True Then

    ActiveSheet.Range(SPRows).EntireRow.Hidden = False
    
    For x = LBound(RowsArray) To UBound(RowsArray)
        ActiveSheet.Range(RowsArray(x)).EntireRow.Hidden = True
    Next x
    
    For x = LBound(PMRowsArray) To UBound(PMRowsArray)
        ActiveSheet.Range(PMRowsArray(x)).EntireRow.Hidden = True
    Next x
    
Else

    For x = LBound(DocArray) To UBound(DocArray)
       
        If ActiveSheet.Range(DocArray(x)).Value <> "" Then
            Call pwcRemoveText
            DocLoopTest = True
            If PwCDeselectWarning.Tag = 1 Then
                
                For i = LBound(DocArray) To UBound(DocArray)
                    ActiveSheet.Range(DocArray(i)) = ""
                Next i
                
                For i = LBound(PMDocArray) To UBound(PMDocArray)
                    ActiveSheet.Range(PMDocArray(i)) = ""
                Next i
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                DeleteWarningCount = 1
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                
                Unload PwCDeselectWarning
            
            ElseIf PwCDeselectWarning.Tag = 0 Then
                
                ActiveSheet.Range(CBValueName) = True
                Application.ScreenUpdating = True
                End
            
            End If
        End If
    Next x
    
    If DocLoopTest = False Then
        For x = LBound(PMDocArray) To UBound(PMDocArray)
           
            If ActiveSheet.Range(PMDocArray(x)).Value <> "" Then
                Call pwcRemoveText
                If PwCDeselectWarning.Tag = 1 Then
                    For i = LBound(PMDocArray) To UBound(PMDocArray)
                        ActiveSheet.Range(PMDocArray(i)) = ""
                    Next i
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    DeleteWarningCount = 1
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    Unload PwCDeselectWarning
                ElseIf PwCDeselectWarning.Tag = 0 Then
                    ActiveSheet.Range(CBValueName) = True
                    Application.ScreenUpdating = True
                    End
                End If
            End If
        Next x
    End If
  
    For x = LBound(PMShapeNumberArray) To UBound(PMShapeNumberArray)
        ActiveSheet.Shapes("Minus" & PMShapeNumberArray(x)).Visible = False
        ActiveSheet.Shapes("Plus" & PMShapeNumberArray(x)).Visible = True
    Next x
    
    For x = LBound(HyperlinkArray) To UBound(HyperlinkArray)
        If ActiveSheet.Range(HyperlinkArray(x)).Value <> "" Then

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''Added for VERSION 2.2'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            TabCountCheck = TabCountCheck + 1
''''''''''''''''''''''''''''''''''''''''''''Added for VERSION 2.2''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        
            Call pwcTabDeleteWarning
            For i = LBound(HyperlinkArray) To UBound(HyperlinkArray)
                ActiveSheet.Range(HyperlinkArray(i)).Value = ""
            Next i
            Exit For
        End If
    
    Next x
    
    
    For x = LBound(SPArray) To UBound(SPArray)
    ''''''''''''''''''''''''Conductor - may need to manually update L:L reference if template does not have the standard number of columns'''''''''''''''''''''''''''''''''''''
    ''''''''''''''''''''''''''''''''''''You will need to update L:L to be whatever column contains all of the True/False values''''''''''''''''''''''''''''''''''''''''''''''''
        For Each tfValue In ActiveSheet.Range(SPArray(x)).Columns("K:K").Cells
            If tfValue = True Then tfValue = False
        Next
    Next x
    
    
    ActiveSheet.Range(SPRows).EntireRow.Hidden = True
    
End If

'Errhandler:
'    Call Errhandler

End Sub

Public Sub CallChoice()

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This is the main macro that determines which other macros to call.                                                                                             '
'The determination of which macros to call is based on the name of the checkboxs that calls this macro.                                                         '
'This macro is what is attached to EVERY checkbox in the EGA.  No other macro should be attached to checkboxes.                                                 '
'Any non-standard coding in the EGA can be completed in the "ManualProcedureList" macro.                                                                        '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Application.ScreenUpdating = False

'''''''''''''''Declaring all variables''''''''''''''''''''''

'''''''Naming Convention Variables'''''''''''''

Dim CallingShapeName As String
Dim CBFullTree As String
Dim CBDepth As Integer
Dim CBProcNum As String
Dim CBLevel1 As String
Dim CBLevel2 As String
Dim CBLevel3 As String
Dim CBValueHold As Boolean
Dim HoldingShapeName As String
Dim MasterTabHoldingName As String
Dim TabSeparationPoint As Integer



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Call PublicCountResets
'''''''''''''''''''''''''''ADDED CODE HERE FOR VERSION 2.0'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''Moved from beginning of Sub TabExpandCaller FOR VERSION 2.2'''''''''''''''''''''''''''''
TabCountCheck = 0
'''''''''''''''''''''''''''Moved from beginning of Sub TabExpandCaller FOR VERSION 2.2'''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


CallingShapeName = ActiveSheet.Shapes(Application.Caller).name

If Right(CallingShapeName, 3) = "Tab" Then
    HoldingShapeName = CallingShapeName
    TabSeparationPoint = InStr(1, CallingShapeName, "-", vbTextCompare)
    CallingShapeName = Left(CallingShapeName, TabSeparationPoint - 1)
End If


''''''''''''''''''''''''''''Determining depth of checkbox variables'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
CBDepth = Len(CallingShapeName)
CBFullTree = Right(CallingShapeName, CBDepth - 2)
CBProcNum = Mid(CallingShapeName, 3, 2)
CBValueHold = ActiveSheet.Range("CBValue" & CBFullTree).Value


'''''''''''''Setting variables based on depth/length of calling Checkbox''''''''
If CBDepth = 13 Then
    CBLevel1 = Mid(CallingShapeName, 6, 2)
    CBLevel2 = Mid(CallingShapeName, 9, 2)
    CBLevel3 = Mid(CallingShapeName, 12, 2)
    
ElseIf CBDepth = 10 Then
    CBLevel1 = Mid(CallingShapeName, 6, 2)
    CBLevel2 = Mid(CallingShapeName, 9, 2)
    CBLevel3 = 0
ElseIf CBDepth = 7 Then
    CBLevel1 = Mid(CallingShapeName, 6, 2)
    CBLevel2 = 0
    CBLevel3 = 0
End If


''''''''''''''''''''Mutual Exclusivity Check'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

If CBValueHold = True Then
    Call MutualExclusivityTest(CallingShapeName, CBFullTree)
End If

Call ManualProcedureList(CallingShapeName)

'''''''''''''''''Testing to see if checkbox needs to run all of the other macros'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim RowCheck As String
Dim DocCheck As String
RowCheck = "CBRows" & CBFullTree
DocCheck = "CBDoc" & CBFullTree

If TypeName(Evaluate(RowCheck)) = "Error" And TypeName(Evaluate(DocCheck)) = "Error" Then
    GoTo SkipCallChoice
End If


'''''''''''''''''''''''''''''''''''''''''''''Determines if calling Checkbox has a documentation section''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim CBDocCheck As Boolean
Dim CBDocExists As Range

On Error Resume Next

Set CBDocExists = ActiveSheet.Range("CBDoc" & CBFullTree)
CBDocCheck = True
If CBDocExists Is Nothing Then
    CBDocCheck = False
End If


On Error GoTo 0

''''''''''''''''''''''''''''''''''''''''''''''''''This determines what subprocedures to run based on the calling checkbox'''''''''''''''''''''''''''''''''''''''''''''''''

If CBLevel3 > 0 Then
    
    ''''''''''''''''''''''''''''''''THIS IS FINISHED''''''''''''''''''''''''''''''''''''''''''''''
    'This calls a simple procedure if the box being checked is lvl3 (i.e. there are no further subgroups)
    Call CBNoSubgroupsExpand(CallingShapeName, CBFullTree, CBDocCheck)
    
ElseIf CBLevel2 > 0 Then
    ''''''''''''''''''''''''''''''''THIS IS FINISHED''''''''''''''''''''''''''''''''''''''''''''''
    Call CBLevel2Expand(CallingShapeName, CBFullTree, CBLevel1, CBLevel2, CBLevel3, CBDocCheck)
    'This will run a version previous code that was created in original vesion of this Independence coding
    
        'There will only ever be one more subgroup under this
Else
    Call CBLevel1Expand(CallingShapeName, CBFullTree, CBLevel1, CBLevel2, CBLevel3, CBDocCheck, CBProcNum, CBDocExists)
    
End If


On Error GoTo 0

'''''''''''''''Skipping Point to avoid running unnecessary macros'''''''''''''''''''''''''''
SkipCallChoice:

MasterTabHoldingName = Right(HoldingShapeName, Len(HoldingShapeName) - TabSeparationPoint)

If Right(HoldingShapeName, 3) = "Tab" Then
    Call TabExpandCaller(CallingShapeName, MasterTabHoldingName)
End If

''''''''''''''''''''''Procedure Renumbering Macro Called''''''''''''''''''''''''''''''''''''
Call ProcRenumber

Application.ScreenUpdating = True

End Sub


Private Sub CBNoSubgroupsExpand(CallingShapeName, CBFullTree, CBDocCheck)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro runs when when the calling checkbox has no sub checkboxes.        '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


If ActiveSheet.Range("CBValue" & CBFullTree).Value = False And CBDocCheck = True Then
    'If there is text in the documentation range for this CB and the user is UNCHECKING it, this calls in warning boxes to verify and inform the user
    'that the text will disappear if they uncheck the CB.
    If IsEmpty(ActiveSheet.Range("CBDoc" & CBFullTree).Value) = False Then
    
    
    
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
        If DeleteWarningCount <> 0 Then
        
        Else
        
            Call pwcRemoveText
            If PwCDeselectWarning.Tag = 1 Then
                Unload PwCDeselectWarning
            ElseIf PwCDeselectWarning.Tag = 0 Then
                ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                Unload PwCDeselectWarning
                Exit Sub
            End If
            
        End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
    
    End If
    ActiveSheet.Range("CBDoc" & CBFullTree).MergeArea.ClearContents
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
ElseIf ActiveSheet.Range("CBValue" & CBFullTree).Value = False Then
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
ElseIf ActiveSheet.Range("CBValue" & CBFullTree).Value = True Then
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = False
Else
    Exit Sub
End If

End Sub


Private Sub CBLevel2Expand(CallingShapeName, CBFullTree, CBLevel1, CBLevel2, CBLevel3, CBDocCheck)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro runs when the calling checkbox is a 2nd level checkbox.                                                   '
'This macro runs the generic functionality but only for the one sublevel below it.                                    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim AlreadyAnsweredTest As Boolean
Dim CBSubCheck As String
Dim CBSubRange As String
Dim CBSubDocCheck As String
Dim SubDocExists As Variant
Dim SubDocArrayCount As Integer
Dim SubDocArrayList() As Variant
Dim CBLevel2Check As String
Dim CBArrayofSubs() As Variant
Dim RangeExistsTest As Variant
Dim ArrayItemsCount As Integer
Dim i As Integer
Dim x As Integer
Dim y As Integer

On Error Resume Next

CBLevel2Check = CallingShapeName



'''''''''''''''''''''''Creates an Array of all the Subgroup Checkboxes under current leve Checbox''''''''''''''''''''''''''''''''''''''''''''
For i = 1 To IterationCount
    CBSubCheck = CallingShapeName & ".0" & i
    RangeExistsTest = Evaluate(CBSubCheck)
    If TypeName(RangeExistsTest) = "Error" Then
    
    Else
        ReDim Preserve CBArrayofSubs(ArrayItemsCount)
        CBArrayofSubs(ArrayItemsCount) = CBSubCheck
        ArrayItemsCount = ArrayItemsCount + 1
    End If
Next i


On Error GoTo 0

''''''''''''''''''''''''This will run the simple expand code if there are no subgroups for the Level1 Checkbox''''''''''''''''''''''''''''''''''
If ArrayItemsCount < 1 Then
    
    Call CBNoSubgroupsExpand(CallingShapeName, CBFullTree, CBDocCheck)
    Exit Sub
    
End If

'Loop to create array of Subgroup Checkboxes that have documentation areas.
On Error Resume Next

For x = LBound(CBArrayofSubs) To UBound(CBArrayofSubs)
    CBSubDocCheck = "CBDoc" & Right(CBArrayofSubs(x), Len(CBArrayofSubs(x)) - 2)
    SubDocExists = Evaluate(CBSubDocCheck)
    If TypeName(SubDocExists) = "Error" Then
    Else
        ReDim Preserve SubDocArrayList(SubDocArrayCount)
        SubDocArrayList(SubDocArrayCount) = CBSubDocCheck
        SubDocArrayCount = SubDocArrayCount + 1
    End If
Next x

On Error GoTo 0


On Error GoTo Errhandler


If ActiveSheet.Range("CBValue" & CBFullTree).Value = False And CBDocCheck = True Then
    If IsEmpty(ActiveSheet.Range("CBDoc" & CBFullTree).Value) = False Then


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
        If DeleteWarningCount <> 0 Then
        
        Else
        
            Call pwcRemoveText
            If PwCDeselectWarning.Tag = 1 Then
                Unload PwCDeselectWarning
                'If the user answers "Yes" to deselection option and erasing text once, procedure will procede to
                'erasing all text from current Level CB Documentation and all subgroup level documentation
                GoTo AlreadyAnsweredExit:
            ElseIf PwCDeselectWarning.Tag = 0 Then
                ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                Unload PwCDeselectWarning
                Exit Sub
            End If
            
        End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    ElseIf IsEmpty(ActiveSheet.Range("CBDoc" & CBFullTree).Value) = True Then
        'Exits If Statement when current Level CB doesn't have text in Doc cells and thus doesn't need it to be erased
        GoTo TestSubDocs
    End If
        ActiveSheet.Range("CBDoc" & CBFullTree).MergeArea.ClearContents
        ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
ElseIf ActiveSheet.Range("CBValue" & CBFullTree).Value = False And Len(Join(CBArrayofSubs)) > 0 Then
TestSubDocs:
    AlreadyAnsweredTest = False
    
    'Loop to check all ubgroup Doc cells for text.  If user answers "Yes" once, procedure will skip to removing all text
    'from all subgroup Doc.
    
    If Len(Join(SubDocArrayList)) = 0 Then
    
    Else
    
    For y = LBound(SubDocArrayList) To UBound(SubDocArrayList)
        If IsEmpty(Range(SubDocArrayList(y)).Value) = False Then
        

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
        If DeleteWarningCount <> 0 Then
        
        Else
        
            Call pwcRemoveText
            If PwCDeselectWarning.Tag = 1 Then
                Unload PwCDeselectWarning
                GoTo AlreadyAnsweredExit
            ElseIf PwCDeselectWarning.Tag = 0 Then
                ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                Unload PwCDeselectWarning
            Exit Sub
            End If
            
        End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

        End If
    Next y
    
    
    End If
    
'Loop to clear Doc sections, update value, and hide rows of all Level 2 subgroups
AlreadyAnsweredExit:
    On Error Resume Next
    For x = LBound(CBArrayofSubs) To UBound(CBArrayofSubs)
        CBSubRange = Right(CBArrayofSubs(x), Len(CBArrayofSubs(x)) - 2)
        ActiveSheet.Range("CBDoc" & CBSubRange).MergeArea.ClearContents
        ActiveSheet.Range("CBValue" & CBSubRange) = False
        ActiveSheet.Range("CBRows" & CBSubRange).EntireRow.Hidden = True
    Next x
    ActiveSheet.Range("CBDoc" & CBFullTree).MergeArea.ClearContents
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
    On Error GoTo 0
ElseIf ActiveSheet.Range("CBValue" & CBFullTree).Value = False Then
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
'Loop to open Level 1 rows and hide Level 2 rows when checking a Level 1 CB
ElseIf ActiveSheet.Range("CBValue" & CBFullTree).Value = True Then
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = False
    On Error Resume Next
    For x = LBound(CBArrayofSubs) To UBound(CBArrayofSubs)
        CBSubRange = Right(CBArrayofSubs(x), Len(CBArrayofSubs(x)) - 2)
        ActiveSheet.Range("CBRows" & CBSubRange).EntireRow.Hidden = True
    Next x
    On Error GoTo 0
Else
    Exit Sub
End If

Errhandler:
    Call Errhandler

End Sub

Private Sub CBLevel1Expand(CallingShapeName, CBFullTree, CBLevel1, CBLevel2, CBLevel3, CBDocCheck, CBProcNum, CBDocExists)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro runs for if the level 1 checkbox has sub checkboxes.
'This macro works in the following steps:
'1. Cycles up to the IterationCount number to determine which level 2 checkboxes exist.
'2. Creates a dictionary key for each level 2 checkbox.
'3. For each dictionary key created, cycles up to the IterationCount number to determine which level 3 checkboxes exist.
'4. Each level 3 checkbox that exists is added to an array that is attached as the dictionary item for the level 2 checkbox key
'5. Standard hide/unhide, remove text, and uncheck chexkbox procedures are run for each key and item in the attached arrays.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Dim ArrayDict As Object 'This is the Dictionary object that will allow all of thhe third subgroup to be creates
Dim ArrayItemsCount As Integer
Dim KeysArray() As String
Dim CurrentCBValue As Boolean
Dim CBLevel2Temp As String
Dim RangeExistsTest As Variant
Dim CBLevel3Array() As String
Dim CBLevel2Check As String
Dim CBLevel3Check As String
Dim i As Integer
Dim x As Integer
Dim k As Variant




'''''''''''''''''''''''''''''''''Variables for subgroup check'''''''''''''''''''''''''''''''''''''''''''

Dim AlreadyAnsweredTest As Boolean
Dim CBSubCheck As String
Dim CBSubRange As String
Dim CBSubDocCheck As String
Dim CBSubDocTFCheck As Boolean
Dim SubDocExists As Variant
Dim SubDocArrayCount As Integer
Dim SubDocArrayList() As Variant
Dim CBArrayofSubs() As Variant
Dim TempString As String
Dim TempArray() As String
Dim CBTempTree As String
Dim y As Variant


CurrentCBValue = ActiveSheet.Range("CBValue" & CBFullTree).Value


Set ArrayDict = CreateObject("scripting.Dictionary")

ArrayDict.comparemode = vbTextCompare

'''''''''''''''''''''''''''''''Creating Dictionary to hold list of Level 2 Checkboxes (as keys) and Level 3 Checkboxes (as array item) checkboxes'''''''''''''''''''''''''''''''''''''

On Error Resume Next

For i = 1 To IterationCount

    If i < 10 Then
        CBLevel2Check = CallingShapeName & ".0" & i
    Else
        CBLevel2Check = CallingShapeName & "." & i
    End If
    
    RangeExistsTest = Evaluate(CBLevel2Check)
    
    If TypeName(RangeExistsTest) = "Error" Then
    
    Else
        
        Erase CBLevel3Array
        ArrayItemsCount = 0
        
        For x = 1 To IterationCount
        
            If x < 10 Then
                CBLevel3Check = CBLevel2Check & ".0" & x
            Else
                CBLevel3Check = CBLevel2Check & "." & x
            End If
            
            RangeExistsTest = Evaluate(CBLevel3Check)
            
            If TypeName(RangeExistsTest) = "Error" Then
            Else
                ReDim Preserve CBLevel3Array(ArrayItemsCount)
                CBLevel3Array(ArrayItemsCount) = CBLevel3Check
                ArrayItemsCount = ArrayItemsCount + 1
                
            End If
        
        Next x
        
        If ArrayItemsCount = 0 Then
            ArrayDict.Add CBLevel2Check, "NoSubgroups"
        Else
            ArrayDict.Add CBLevel2Check, CBLevel3Array
        End If
        'Debug.Print ArrayDict.Item(CBLevel2Check)
        'Debug.Print Join(ArrayDict.Item(CBLevel2Check), " - ")
        'Debug.Print UBound(ArrayDict.Item(CBLevel2Check))
    
    End If

Next i


On Error GoTo 0

''''''''''''''''''''This checks if there are any subgroups.  If not, it calls the simple expand procedure and exits sub'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


If ArrayDict.Count = 0 Then
    Call CBNoSubgroupsExpand(CallingShapeName, CBFullTree, CBDocCheck)
    Exit Sub
End If




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'First If statement checks in we are checking the checkbox.  If so, it does a simple expand procedure and hides all Level2 Checkboxes
If CurrentCBValue = True Then
    
    ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = False

    On Error Resume Next
    
    For Each k In ArrayDict.Keys
    
        CBTempTree = Right(k, Len(k) - 2)
        
        ActiveSheet.Range("CBRows" & CBTempTree).EntireRow.Hidden = True
        ActiveSheet.Range("CBValue" & CBTempTree).EntireRow.Hidden = False
    
    Next k
        
    On Error GoTo 0
   
'This code will be run if the user is trying to unselect the box.  It will check for text in Documentation section of ALL subgroups
ElseIf CurrentCBValue = False Then
    
    On Error Resume Next
    
    Set CBDocExists = ActiveSheet.Range("CBDoc" & CBFullTree)
    CBDocCheck = True
    
    If CBDocExists Is Nothing Then
        
        CBDocCheck = False
    
    End If
    
    On Error GoTo 0

    'If there is a documentation section for the Level 1 Checkbox
    If CBDocCheck = True Then
    
        If IsEmpty(ActiveSheet.Range("CBDoc" & CBFullTree).Value) = False Then
        
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
        If DeleteWarningCount <> 0 Then
        
        Else
        
            Call pwcRemoveText
            
            If PwCDeselectWarning.Tag = 1 Then
                
                Unload PwCDeselectWarning
                'If the user answers "Yes" to deselection option and erasing text once, procedure will procede to
                'erasing all text from current Level CB Documentation and all subgroup level documentation
                GoTo AlreadyAnsweredExit:
            
            ElseIf PwCDeselectWarning.Tag = 0 Then
                
                ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                Unload PwCDeselectWarning
                Exit Sub
            
            End If
            
        End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            

            
            
        ElseIf IsEmpty(ActiveSheet.Range("CBDoc" & CBFullTree).Value) = True Then
            
            'Exits If Statement when current Level CB doesn't have text in Doc cells and thus doesn't need it to be erased
            GoTo TestSubDocs
        
        End If
        
        ActiveSheet.Range("CBDoc" & CBFullTree).MergeArea.ClearContents
        ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True
    
    ElseIf CBDocCheck = False Then
        
'Testing if subgroups (Level 2 and 3) have documentation sections and if there is text in them
TestSubDocs:

        On Error Resume Next
        
        For Each k In ArrayDict.Keys
            
            CBTempTree = Right(k, Len(k) - 2)
            Set CBDocExists = Nothing
            Set CBDocExists = ActiveSheet.Range("CBDoc" & CBTempTree)
            If CBDocExists Is Nothing Then
                
                CBDocCheck = False
            Else
                CBDocCheck = True
            
            End If
            
            'Debug.Print CBDocCheck
          
            If CBDocCheck = True Then
                
                If IsEmpty(ActiveSheet.Range("CBDoc" & CBTempTree).Value) = False Then
                
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
                    If DeleteWarningCount <> 0 Then
                    
                    Else
                    
                        Call pwcRemoveText
                    
                        If PwCDeselectWarning.Tag = 1 Then
                            Unload PwCDeselectWarning
                            'If the user answers "Yes" to deselection option and erasing text once, procedure will procede to
                            'erasing all text from current Level CB Documentation and all subgroup level documentation
                            GoTo AlreadyAnsweredExit:
                        
                        ElseIf PwCDeselectWarning.Tag = 0 Then
                            
                            ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                            Unload PwCDeselectWarning
                            Exit Sub
                            
                        End If
                    End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                   

                    
                End If
            Else
            End If
            
        Next k
      
        For Each k In ArrayDict.Keys
            
            TempString = Join(ArrayDict.Item(k), " - ")
            TempArray = Split(TempString, " - ")
                
            If TempString = "Nosubgroups" Then
                
            Else
                
                For y = 0 To UBound(TempArray)
                    
                    CBTempTree = Right(TempArray(y), Len(TempArray(y)) - 2)
                    Set CBDocExists = Nothing
                    Set CBDocExists = ActiveSheet.Range("CBDoc" & CBTempTree)
                    CBDocCheck = True
                        
                    If CBDocExists Is Nothing Then
                            
                        CBDocCheck = False
                    
                    Else
                        CBDocCheck = True
                                    
                    End If
                      
                    If CBDocCheck = True Then
                        If IsEmpty(ActiveSheet.Range("CBDoc" & CBTempTree).Value) = False Then
                        
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                                                                                                                 '
'                                                                                                                 '
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''
                            If DeleteWarningCount <> 0 Then
                            
                            Else
                            
                                    Call pwcRemoveText
                                        
                                    If PwCDeselectWarning.Tag = 1 Then
                                            
                                        Unload PwCDeselectWarning
                                        'If the user answers "Yes" to deselection option and erasing text once, procedure will procede to
                                        'erasing all text from current Level CB Documentation and all subgroup level documentation
                                        GoTo AlreadyAnsweredExit:
                                        
                                    ElseIf PwCDeselectWarning.Tag = 0 Then
                                            
                                        ActiveSheet.Range("CBValue" & CBFullTree).Value = True
                                        Unload PwCDeselectWarning
                                        Exit Sub
                                        
                                    End If
                            End If
''''''''''''''Updated CODE HERE FOR VERSION 2.0 - Copy and replace old code in this area''''''''''''''''''''''''''''                                                                                                                '
'                                                                                                                 '
'                                                                                                                 '                                                                                                                '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
           
                        End If
                    Else
                    End If
                        
                Next y
            
            End If
                        
        Next k
              
        End If
            
        On Error GoTo 0

'Loop to clear Doc sections, update value, and hide rows of all Level 2 subgroups
AlreadyAnsweredExit:

On Error Resume Next

        ActiveSheet.Range("CBDoc" & CBFullTree).MergeArea.ClearContents
        ActiveSheet.Range("CBRows" & CBFullTree).EntireRow.Hidden = True


        For Each k In ArrayDict.Keys
            
            CBTempTree = Right(k, Len(k) - 2)
            ActiveSheet.Range("CBDoc" & CBTempTree).MergeArea.ClearContents
            ActiveSheet.Range("CBValue" & CBTempTree) = False
            ActiveSheet.Range("CBRows" & CBTempTree).EntireRow.Hidden = True
            
        Next k

        For Each k In ArrayDict.Keys
            
            TempString = Join(ArrayDict.Item(k), " - ")
            TempArray = Split(TempString, " - ")
            
            If TempString = "Nosubgroups" Then
                
            Else
            
                For y = 0 To UBound(TempArray)
                        
                    CBTempTree = Right(TempArray(y), Len(TempArray(y)) - 2)
                    
                    ActiveSheet.Range("CBDoc" & CBTempTree).MergeArea.ClearContents
                    ActiveSheet.Range("CBValue" & CBTempTree) = False
                    ActiveSheet.Range("CBRows" & CBTempTree).EntireRow.Hidden = True
                    
                Next y
                
             End If
            
        Next k
        
        

On Error GoTo 0

End If

End Sub

Private Sub MutualExclusivityTest(CallingShapeName, CBFullTree)

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro checks to see if the calling checkbox is part of a mutually exclusive relationship.
'If it is, and the other mutually exclusive box is already selected, this checkbox stops  the calling checkbox from being selected.
'This allows runs a 'None of the above' macro if the ME named range ends in "NONE"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim i As Integer
Dim RangeExistsTest As Variant

Dim ProcedureNumber As String
Dim MEStringBase As String
Dim MEStringCheck As String
Dim MEString As String
Dim MEArrayString As String
Dim MENoneArrayString As String
Dim MENameArray() As String
Dim MENoneNameArray() As String
Dim MEAddressString As String
Dim MEAddressArray() As String
Dim x As Integer
Dim METest As Integer
Dim CBValueReset As String
Dim MeNoneRowTest As Integer
Dim MeNoneRowTestRange As Integer
Dim MeLevel1Num As String
Dim MeLevel1Base As String
Dim MeLevel2Num As String
Dim MeLevel2Base As String
Dim MENoneofAboveCB As String
Dim MeLevel3Num As String
Dim MeLevel3Base As String


On Error Resume Next

ProcedureNumber = Mid(CallingShapeName, 3, 2)
MEStringBase = "ME" & ProcedureNumber
CBValueReset = "CBValue" & CBFullTree

'Creating two arrays for the procedure.  One for regular ME and one for None of the Above ME.  These arrays include only ME named ranges that exist.
'The IF/ElseIf is to determine whether the Mutual exclusion is in the Level 1 checkboxes or the Level 2 (subgroup) checkboxes


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''This will run through the Mutually exclusive code if a Level 3 checkbox was selected'''''''''''''''''''''''''''''''''''
If Len(CallingShapeName) = 13 Then
    
    MeLevel3Num = Right(CallingShapeName, 2)
    MeLevel3Base = "ME" & Mid(CallingShapeName, 3, 8)
    
    'This is the Mutually exclusive array creation for regular mutual exclusions
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel3Base & ".0" & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel3Base & "." & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
    
    'This is the Mutually exclusive array creation for "None of the above"
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel3Base & ".0" & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel3Base & "." & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
        
    
    MENameArray = Split(MEArrayString, ",")
    MENoneNameArray = Split(MENoneArrayString, ",")

    'Loop to test all regular mutual exclusion groups for conflicts

    For x = LBound(MENameArray) To UBound(MENameArray) - 1
        
        METest = 0
        MEAddressString = ActiveSheet.Range(MENameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
            
            For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                    METest = METest + 1
                    If METest > 1 Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                    End If
                End If
            Next i
    
    Next x
    
    
    'Loop to test all "None of the Above" mutual exclusion groups for conflicts
    
    For x = LBound(MENoneNameArray) To UBound(MENoneNameArray) - 1
        
        METest = 0
        MeNoneRowTest = 0
        MEAddressString = ActiveSheet.Range(MENoneNameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
        'Check for bottom CB by range (in case named ranged was not created in top to bottom order)
        For i = LBound(MEAddressArray) To UBound(MEAddressArray)
            MeNoneRowTestRange = ActiveSheet.Range(MEAddressArray(i)).Row
            'Debug.Print MeNoneRowTestRange
            If MeNoneRowTestRange > MeNoneRowTest Then
                MeNoneRowTest = MeNoneRowTestRange
                MENoneofAboveCB = i
            End If
        Next i
        
        If ActiveSheet.Range(MEAddressArray(MENoneofAboveCB)).Value = True Then
                For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If i = MENoneofAboveCB Then
                ElseIf ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                End If
            Next i
        End If
            
    Next x

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''This will run through the Mutually exclusive code if a Level 2 checkbox was selected'''''''''''''''''''''''''''''''''''
ElseIf Len(CallingShapeName) = 10 Then

    MeLevel2Num = Right(CallingShapeName, 2)
    MeLevel2Base = "ME" & Mid(CallingShapeName, 3, 5)
    
    'This is the Mutually exclusive array creation for regular mutual exclusions
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel2Base & ".0" & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel2Base & "." & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
    
    'This is the Mutually exclusive array creation for "None of the above"
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel2Base & ".0" & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel2Base & "." & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
        
    
    MENameArray = Split(MEArrayString, ",")
    MENoneNameArray = Split(MENoneArrayString, ",")

    'Loop to test all regular mutual exclusion groups for conflicts

    For x = LBound(MENameArray) To UBound(MENameArray) - 1
        
        METest = 0
        MEAddressString = ActiveSheet.Range(MENameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
            
            For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                    METest = METest + 1
                    If METest > 1 Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                    End If
                End If
            Next i
    
    Next x
    
    
    'Loop to test all "None of the Above" mutual exclusion groups for conflicts
    
    For x = LBound(MENoneNameArray) To UBound(MENoneNameArray) - 1
        
        METest = 0
        MeNoneRowTest = 0
        MEAddressString = ActiveSheet.Range(MENoneNameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
        'Check for bottom CB by range (in case named ranged was not created in top to bottom order)
        For i = LBound(MEAddressArray) To UBound(MEAddressArray)
            MeNoneRowTestRange = ActiveSheet.Range(MEAddressArray(i)).Row
            'Debug.Print MeNoneRowTestRange
            If MeNoneRowTestRange > MeNoneRowTest Then
                MeNoneRowTest = MeNoneRowTestRange
                MENoneofAboveCB = i
            End If
        Next i
        
        If ActiveSheet.Range(MEAddressArray(MENoneofAboveCB)).Value = True Then
                For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If i = MENoneofAboveCB Then
                ElseIf ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                End If
            Next i
        End If
            
    Next x
    
    
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''This will run through the Mutually exclusive code if a Level 1 checkbox was selected'''''''''''''''''''''''''''''''''''
ElseIf Len(CallingShapeName) = 7 Then
    
    MeLevel1Num = Right(CallingShapeName, 2)
    MeLevel1Base = "ME" & Mid(CallingShapeName, 3, 2)
    
    'This is the Mutually exclusive array creation for regular mutual exclusions
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel1Base & ".0" & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel1Base & "." & i
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MEArrayString = MEArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
    
    'This is the Mutually exclusive array creation for "None of the above"
    For i = 1 To IterationCount
    
        If i < 10 Then
        
            MEStringCheck = MeLevel1Base & ".0" & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
            
        ElseIf i > 9 Then
        
            MEStringCheck = MeLevel1Base & "." & i & "None"
            RangeExistsTest = Evaluate(MEStringCheck)
            
            If TypeName(RangeExistsTest) = "Error" Then
            
            Else
            
                MENoneArrayString = MENoneArrayString & MEStringCheck & ","
                
            End If
        
        End If
        
        
    Next i
        
    
    MENameArray = Split(MEArrayString, ",")
    MENoneNameArray = Split(MENoneArrayString, ",")

    'Loop to test all regular mutual exclusion groups for conflicts

    For x = LBound(MENameArray) To UBound(MENameArray) - 1
        
        METest = 0
        MEAddressString = ActiveSheet.Range(MENameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
            
            For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                    METest = METest + 1
                    If METest > 1 Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                    End If
                End If
            Next i
    
    Next x
    
    
    'Loop to test all "None of the Above" mutual exclusion groups for conflicts
    
    For x = LBound(MENoneNameArray) To UBound(MENoneNameArray) - 1
        
        METest = 0
        MeNoneRowTest = 0
        MEAddressString = ActiveSheet.Range(MENoneNameArray(x)).Address
        MEAddressArray = Split(MEAddressString, ",")
        'Check for bottom CB by range (in case named ranged was not created in top to bottom order)
        For i = LBound(MEAddressArray) To UBound(MEAddressArray)
            MeNoneRowTestRange = ActiveSheet.Range(MEAddressArray(i)).Row
            'Debug.Print MeNoneRowTestRange
            If MeNoneRowTestRange > MeNoneRowTest Then
                MeNoneRowTest = MeNoneRowTestRange
                MENoneofAboveCB = i
            End If
        Next i
        
        If ActiveSheet.Range(MEAddressArray(MENoneofAboveCB)).Value = True Then
                For i = LBound(MEAddressArray) To UBound(MEAddressArray)
                If i = MENoneofAboveCB Then
                ElseIf ActiveSheet.Range(MEAddressArray(i)).Value = True Then
                        Call pwcErrorMsg
                        ActiveSheet.Range(CBValueReset).Value = False
                        End
                End If
            Next i
        End If
            
    Next x
                
End If

On Error GoTo 0


End Sub

Private Sub PlusMinus()


''''''''''''''This uses the same code as the previous SmartDoc Lite.  Added the functionality to use the naming convention to run the macro''''''''''''''''''''''
''''''''''''''Will hide/unhide additional documentation section''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''This will also check if their is a documentation box in the PlusMinus section and return a warning if there is text present''''''''''''''''''''''''

Dim PMNum As String
Dim CallingShapeName As String
Dim PMDocCheck As Boolean
Dim PMDocExists As Range
Dim PMTop As Integer
Dim PMLeft As Integer


Application.ScreenUpdating = False


'identify shape
CallingShapeName = ActiveSheet.Shapes(Application.Caller).name

'identify process number
PMNum = Right(CallingShapeName, 2)


'Test to see if the targeted PlusMinus section includes an AddInfo Box
On Error Resume Next

Set PMDocExists = ActiveSheet.Range("PMDoc" & PMNum)
PMDocCheck = True
If PMDocExists Is Nothing Then
    PMDocCheck = False
End If

On Error GoTo 0

On Error GoTo Errhandler:

If ActiveSheet.Range("PMValue" & PMNum) = False Then
        ActiveSheet.Range("PMValue" & PMNum) = True
        ActiveSheet.Range("PMRows" & PMNum).EntireRow.Hidden = False
        PMTop = ActiveSheet.Range("PMValue" & PMNum).Top + 2
        PMLeft = ActiveSheet.Range("B1").Left + 3
        With ActiveSheet.Shapes("Minus" & PMNum)
            .Visible = True
            .Height = 11
            .Width = 11
            .Top = PMTop
            .Left = PMLeft
        End With
        ActiveSheet.Shapes("Plus" & PMNum).Visible = False
        
ElseIf ActiveSheet.Range("PMValue" & PMNum) = True And PMDocCheck = True Then
    
    If ActiveSheet.Range("PMValue" & PMNum) = True And IsEmpty(ActiveSheet.Range("PMDoc" & PMNum).Value) = False Then
        Call pwcRemoveText
        If PwCDeselectWarning.Tag = 1 Then
            ActiveSheet.Range("PMDoc" & PMNum) = ""
            Unload PwCDeselectWarning
        ElseIf PwCDeselectWarning.Tag = 0 Then
            ActiveSheet.Range("PMValue" & PMNum) = True
            Exit Sub
        End If
    End If
    ActiveSheet.Range("PMValue" & PMNum) = False
    ActiveSheet.Range("PMRows" & PMNum).EntireRow.Hidden = True
    
    
    PMTop = ActiveSheet.Range("PMValue" & PMNum).Top + 2
    PMLeft = ActiveSheet.Range("B1").Left + 3
        
    With ActiveSheet.Shapes("Plus" & PMNum)
        .Visible = True
        .Height = 11
        .Width = 11
        .Top = PMTop
        .Left = PMLeft
    End With
    ActiveSheet.Shapes("Minus" & PMNum).Visible = False
    
Else
    If ActiveSheet.Range("PMValue" & PMNum) = True And PMDocCheck = False Then
        ActiveSheet.Range("PMValue" & PMNum) = False
        ActiveSheet.Range("PMRows" & PMNum).EntireRow.Hidden = True
    
    
        PMTop = ActiveSheet.Range("PMValue" & PMNum).Top + 2
        PMLeft = ActiveSheet.Range("B1").Left + 3
        
        With ActiveSheet.Shapes("Plus" & PMNum)
            .Visible = True
            .Height = 11
            .Width = 11
            .Top = PMTop
            .Left = PMLeft
        End With
        ActiveSheet.Shapes("Minus" & PMNum).Visible = False
    
    End If
End If

Errhandler:
      Call Errhandler

Application.ScreenUpdating = True

End Sub


Private Sub Tab_Expand(CallingShapeName, MasterTabHoldingName, TabCreationTest)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro is called by the TabExpandCaller Macro.
'This is where Master tabs are populated by a checkbox click.
'This also creates or removes the hyperlink that connects to the newly created tab.
'If the tab to be created already exists, a new copy of the tab is not created.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    Dim Src As Worksheet
    Dim newName As String
    Dim Current_Selection As String
    Dim OriginalStatus As Variant
    Dim CallingWorksheet As Worksheet
    Dim TabCount As Integer

    Set CallingWorksheet = ActiveSheet
    
    TabCount = ThisWorkbook.Worksheets.Count
    
'ActiveSheet.Unprotect Password:="aura"

'Tab population
    If ActiveSheet.Range("CBValue" & Mid(CallingShapeName, 3, Len(CallingShapeName) - 2)) = True Then


    If CheckIfSheetExists(TabCreationTest) = False Then 'Change Variable Partial acquisition
        Set Src = ThisWorkbook.Worksheets(MasterTabHoldingName) 'Change Variable Master Partial acquisition
        OriginalStatus = Src.Visible
        Src.Visible = True
        Src.Copy After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)
        newName = TabCreationTest 'Change Variable Partial acquisition
        If CheckIfSheetExists(newName) = False Then
            ActiveSheet.name = newName
        End If
        ActiveWindow.ScrollColumn = 1
        ActiveWindow.ScrollRow = 1
        
        
        If Not MasterTabHoldingName Like "********Tab#" Or Not MasterTabHoldingName Like "********Tab##" Then
              
            CallingWorksheet.Activate
            ActiveSheet.Range("Hyperlink" & MasterTabHoldingName).Select 'Change Variable HyperlinkCurtailments
            ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
            "'" & TabCreationTest & "'!A1", TextToDisplay:=TabCreationTest & " tab"  'Change Variable Partial acquisition & Partial acquisition tab
'            Activesheet.range("Hyperlink" & MasterTabHoldingName).Font.name = "Georgia"
'            Activesheet.range("Hyperlink" & MasterTabHoldingName).Font.Size = 10
        
        End If
        
        Sheets(TabCreationTest).Move After:=Sheets(TabCount)
        Src.Visible = OriginalStatus
        CallingWorksheet.Select
        

    Else
        CallingWorksheet.Activate
        ActiveSheet.Range("Hyperlink" & MasterTabHoldingName).Select 'Change Variable HyperlinkCurtailments
        ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", SubAddress:= _
        "'" & TabCreationTest & "'!A1", TextToDisplay:=TabCreationTest & " tab" 'Change Curtailments
'        Activesheet.range("Hyperlink" & MasterTabHoldingName).Font.name = "Georgia"
'        Activesheet.range("Hyperlink" & MasterTabHoldingName).Font.Size = 10
    End If
    
End If

'Delete the Hyperlink and prompt to delete tab when box unchecked and tab remains
If ActiveSheet.Range("CBValue" & Mid(CallingShapeName, 3, Len(CallingShapeName) - 2)) = False And CheckIfSheetExists(TabCreationTest) = True Then
        ActiveSheet.Range("Hyperlink" & MasterTabHoldingName) = ""
        If TabCountCheck = 0 Then
            TabCountCheck = TabCountCheck + 1
            Call pwcTabDeleteWarning
        End If

        
        
'        If Not MasterTabHoldingName Like "********Tab#" Or MasterTabHoldingName Like "********Tab##" Then
'            Call pwcTabDeleteWarning
'        End If
End If

'Delete the Hyperlink when box unchecked and tab deleted
If ActiveSheet.Range("CBValue" & Mid(CallingShapeName, 3, Len(CallingShapeName) - 2)) = False And CheckIfSheetExists(TabCreationTest) = False Then
        ActiveSheet.Range("Hyperlink" & MasterTabHoldingName) = ""
End If


'ActiveSheet.Protect Password:="aura", AllowFormattingRows:=True, AllowFormattingColumns:=True, AllowInsertingColumns:=True, AllowInsertingHyperlinks:=True

End Sub

Private Function CheckIfSheetExists(ByVal name As String) As Boolean

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function is used to check if the a sheet being created by the TabExpand macro already exists.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    Dim ws As Worksheet
    
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets(name)
    On Error GoTo 0
    If Not ws Is Nothing Then
         CheckIfSheetExists = True
    Else
        CheckIfSheetExists = False
    End If
End Function

Private Sub ProcRenumber()

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro updates the procedure number based on whether a "Proc" named range is hidden or unhidden.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim ProcNum As Integer
Dim ProcCount As String
Dim p As Integer

ProcCount = 1

For ProcNum = 1 To 50
    On Error GoTo ProcLoopExit:
    If ActiveSheet.Range("Proc" & ProcNum).EntireRow.Hidden = False Then
        ActiveSheet.Range("Proc" & ProcNum) = "'" & ProcCount & "."
        ProcCount = ProcCount + 1
        Else
        ActiveSheet.Range("Proc" & ProcNum) = ""
    End If
Next ProcNum

ProcLoopExit:

On Error GoTo 0

End Sub

Private Sub GuidanceExpand()

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro is a legacy from when Guidance buttons were included at the bottom of the templates.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Application.ScreenUpdating = False
'ActiveSheet.Unprotect Password:="aura"

    If ActiveSheet.Range("Guidance").EntireRow.Hidden = False Then
        ActiveSheet.Range("Guidance").EntireRow.Hidden = True
        ActiveSheet.Buttons("Guidance Button").Caption = "Expand Guidance"
        ActiveSheet.Buttons("Guidance Button").Font.Bold = True
        ActiveSheet.Buttons("Guidance Button").Font.Color = RGB(122, 24, 24)
    Else
        ActiveSheet.Range("Guidance").EntireRow.Hidden = False
        ActiveSheet.Buttons("Guidance Button").Caption = "Collapse Guidance"
        ActiveSheet.Buttons("Guidance Button").Font.Bold = False
        ActiveSheet.Buttons("Guidance Button").Font.Color = RGB(0, 0, 0)
    End If
    
Application.ScreenUpdating = True
    
'ActiveSheet.Protect Password:="aura", AllowFormattingRows:=True, AllowFormattingColumns:=True, AllowInsertingColumns:=True, AllowInsertingHyperlinks:=True
    
End Sub


Public Sub RequirementsExpand()

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This macro hide/unhides the Techincal References section on the template.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Application.ScreenUpdating = False
'ActiveSheet.Unprotect Password:="aura"

    ActiveSheet.Buttons("Requirements Button").Caption = "View/Hide References"
    ActiveSheet.Buttons("Requirements Button").Font.Bold = True
    ActiveSheet.Buttons("Requirements Button").Font.Color = RGB(0, 0, 0)
    ActiveSheet.Buttons("Requirements Button").Font.Size = 8
    ActiveSheet.Buttons("Requirements Button").Height = 17
    
    ''''''''''''''''''''''v2.1 Requirements button width fix''''''''''''''''''''''''''''''
    ActiveSheet.Buttons("Requirements Button").Width = 110
    ''''''''''''''''''''''v2.1 Requirements button width fix''''''''''''''''''''''''''''''
    
    If ActiveSheet.Range("Requirements").EntireColumn.Hidden = False Then
        ActiveSheet.Range("Requirements").EntireColumn.Hidden = True

    Else
        ActiveSheet.Range("Requirements").EntireColumn.Hidden = False
        ActiveSheet.Range("Requirements").Columns.AutoFit

    End If
    
Application.ScreenUpdating = True
    
'ActiveSheet.Protect Password:="aura", AllowFormattingRows:=True, AllowFormattingColumns:=True, AllowInsertingColumns:=True, AllowInsertingHyperlinks:=True
    
End Sub

Private Sub pwcRemoveText()

    Call CenterPwCDeselectWarning
    PwCDeselectWarning.Show

End Sub
Private Sub CenterPwCDeselectWarning()

    With PwCDeselectWarning
      .StartUpPosition = 0
      .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
      .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With
    
End Sub



Private Sub pwcErrorMsg()

Call CenterPwCWarningSL
PwCWarningSL.Show


End Sub
Private Sub CenterPwCWarningSL()

    With PwCWarningSL
      .StartUpPosition = 0
      .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
      .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With

End Sub

Private Sub pwcTabDeleteWarning()

Call CenterPwCTabDelete
PwCTabDelete.Show

End Sub

Private Sub CenterPwCTabDelete()

    With PwCTabDelete
      .StartUpPosition = 0
      .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
      .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    End With

End Sub
Private Sub Errhandler()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    If Err.Number <> 0 Then
        MsgBox "Error " & Err.Number & " found in Excel " _
        & vbCrLf & Err.Description _
        & vbCrLf & Err.Source
    End If
    On Error GoTo 0
    Application.ScreenUpdating = False
End Sub


















Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
