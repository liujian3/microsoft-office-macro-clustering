Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modCust6"
Option Explicit

Sub OptionButton73_Click()

'Range is set to cell with white text to hide
'When copying to another sheet cell must be amended to more appropriate position
Dim sht
Application.Calculation = xlCalculationManual
For Each sht In ActiveWorkbook.Worksheets
    If Range("A75").Value = True Then
        sht.PageSetup.PaperSize = xlPaperLetter
    Else
        sht.PageSetup.PaperSize = xlPaperA4
    End If
Next sht
Application.Calculation = xlCalculationAutomatic

End Sub
Sub OptionButton74_Click()

'Range is set to cell with white text to hide
'When copying to another sheet cell must be amended to more appropriate position
Dim sht
Application.Calculation = xlCalculationManual
For Each sht In ActiveWorkbook.Worksheets
    If Range("A75").Value = True Then
        sht.PageSetup.PaperSize = xlPaperA4
    Else
        sht.PageSetup.PaperSize = xlPaperLetter
    End If
Next sht
Application.Calculation = xlCalculationAutomatic

End Sub

Attribute VB_Name = "modCustPrint"
Option Explicit
Public Sub custPrintTables()
    Dim ws                              As Worksheet
    Dim msgResult As VbMsgBoxResult
    
    On Error GoTo errHandler
    Set ws = ActiveSheet
    
    msgResult = MsgBox("If you want to print the current sheet press " & Chr(34) & "Yes" & Chr(34) & " or for entire workbook press " & Chr(34) & "No" & Chr(34), vbYesNoCancel, "Print")
    
    If msgResult = vbNo Then
        Worksheets(Array("Summary", "Summary Aggs", "Profitability & Valuation", "Mix & Ratios", _
                     "Growth Rates", "Aggregates", "Per Share", "Performance Charts")).Select
        ActiveWindow.SelectedSheets.PrintOut Collate:=True
        ws.Activate
        
    ElseIf msgResult = vbYes Then
        ws.PrintOut Collate:=True
        
    End If
    
errHandler:
    Set ws = Nothing
End Sub

Public Sub GoToCharts()
    shtValuationChartsNew.Range("BackToSheet").Value = ActiveSheet.Name
    shtValuationChartsNew.Activate
End Sub

Public Sub BackTo()
    ThisWorkbook.Worksheets(shtValuationChartsNew.Range("BackToSheet").Value).Activate
End Sub

Public Sub PrintAdjustments1()
    shtmixRatios3.PrintOut
End Sub

Public Sub PrintAdjustments2()
    
    Range("dcpage1").PrintOut Copies:=1, Collate:=True
    Range("dcpage2").PrintOut Copies:=1, Collate:=True
    Range("dcpage3").PrintOut Copies:=1, Collate:=True
    Range("dcpage4").PrintOut Copies:=1, Collate:=True
    Range("dcpage5").PrintOut Copies:=1, Collate:=True
    Range("dcpage6").PrintOut Copies:=1, Collate:=True
    Range("dcpage7").PrintOut Copies:=1, Collate:=True
    
    'Range("AQ2").Select
End Sub

Sub ClearChart()
    With shtValuationChartsNew
        .Range("SelCountry").ClearContents
        .Range("SelFocus").ClearContents
        .Range("CountryAvgs").ClearContents
        .Range("SectorAvgs").ClearContents
    End With
End Sub


'Private Sub PrintMacro(intnumberofcopies As Integer)
'
'    Worksheets(Array("Summary", "Summary Aggregates", "ProfitabilityValuations", "MixRatios", _
'                     "GrowthRates", "Aggregates", "Per Share", "Performance Charts")).Select
'
'    ActiveWindow.SelectedSheets.PrintOut Copies:=intnumberofcopies, Collate:=True
'
'End Sub

'Sub ChangeMyView()
'
'Dim wb As Workbook
'Dim ws As Worksheet
'Dim rngView As Range
'
'Set wb = ThisWorkbook
'
'For Each ws In wb.Worksheets
'Set rngView = ws.Range("A:A").Find("View 1")
'
'If Not rngView Is Nothing Then
'Set rngView = Nothing
'Set rngView = ws.Range("A:A").Find("View 2")
'
'If Not rngView Is Nothing Then
'
'Call ChangeToView1(ws)
'
'End If
'End If
'
'
'Next

'End Sub

Function ChangeToView1(ws1 As Worksheet, lngChk1 As Integer, mycol As Long, colNum As Long)
Dim rng  As Range
Dim rngViewBool As Range
Dim newRange As Range


Set rng = ws1.Range("MyNewPage").EntireColumn.Find("View " & lngChk1)

Set rngViewBool = ws1.Range(rng.Row & ":" & rng.Row)

For Each newRange In rngViewBool.Cells
If newRange.Column > colNum Then
newRange.EntireColumn.Hidden = False


If newRange.Column > mycol Then Exit For
If newRange.Value = "False" Then
newRange.EntireColumn.Hidden = True

End If


End If

Next
If InStr(LCase(ThisWorkbook.Path), "c:\datacentral\droid\working\") > 0 Then Call ChangeHeader(ws1, lngChk1)

End Function

Function ChangeHeader(ws2 As Worksheet, lngChk As Integer)


If ws2.Name = shtmixRatios2.Name And lngChk = 0 Then

shtAllHeaders.Range("Summary_Norman").Copy ws2.Range("Summary_HeadStart")

ElseIf ws2.Name = shtmixRatios2.Name Then
shtAllHeaders.Range("Summary_v" & lngChk).Copy ws2.Range("Summary_HeadStart")


ElseIf ws2.Name = shtmixRatios.Name And lngChk = 0 Then

shtAllHeaders.Range("SummaryAggs_normal").Copy ws2.Range("SummaryAggs_HeadStart")

ElseIf ws2.Name = shtmixRatios.Name Then
shtAllHeaders.Range("SummaryAggs_v" & lngChk).Copy ws2.Range("SummaryAggs_HeadStart")




ElseIf ws2.Name = shtmixRatios6.Name And lngChk = 0 Then
shtAllHeaders.Range("Profitability_normal").Copy ws2.Range("PV_HeadStart1")
shtAllHeaders.Range("Profitability_normal").Copy ws2.Range("PV_HeadStart2")



ElseIf ws2.Name = shtmixRatios6.Name Then
shtAllHeaders.Range("Profitability_v" & lngChk).Copy ws2.Range("PV_HeadStart1")
shtAllHeaders.Range("Profitability_v" & lngChk).Copy ws2.Range("PV_HeadStart2")





ElseIf ws2.Name = shtmixRatios4.Name And lngChk = 0 Then
shtAllHeaders.Range("MR_normal").Copy ws2.Range("MR_HeadStart1")
shtAllHeaders.Range("MR_normal").Copy ws2.Range("MR_HeadStart2")


ElseIf ws2.Name = shtmixRatios4.Name Then
shtAllHeaders.Range("MR_v" & lngChk).Copy ws2.Range("MR_HeadStart1")
shtAllHeaders.Range("MR_v" & lngChk).Copy ws2.Range("MR_HeadStart2")



ElseIf ws2.Name = shtmixRatios5.Name And lngChk = 0 Then
shtAllHeaders.Range("GR_normal").Copy ws2.Range("GR_HeadStart1")

ElseIf ws2.Name = shtmixRatios5.Name Then
shtAllHeaders.Range("GR_v" & lngChk).Copy ws2.Range("GR_HeadStart1")


ElseIf ws2.Name = shtmixRatios1.Name And lngChk = 0 Then
shtAllHeaders.Range("PerShare_normal").Copy ws2.Range("PerShare_HeadStart1")

ElseIf ws2.Name = shtmixRatios1.Name Then
shtAllHeaders.Range("PerShare_v" & lngChk).Copy ws2.Range("PerShare_HeadStart1")








End If

End Function

Function ChangeToNormalView(ws1 As Worksheet, lngChk1 As Integer, mycol As Long, colnum1 As Long)

Dim rng  As Range
Dim rngViewBool As Range
Dim newRange As Range
Set rng = ws1.Range("MyNewPage").EntireColumn.Find("View " & lngChk1)
Set rngViewBool = ws1.Range("1:1")

For Each newRange In rngViewBool.Cells
If newRange.Column > colnum1 Then
newRange.EntireColumn.Hidden = False

If newRange.Column > mycol Then Exit For

End If

Next
Call ChangeHeader(ws1, lngChk1)

End Function


Function checkSheets()
Dim wsChk As Worksheet
checkSheets = 0

For Each wsChk In ActiveWorkbook.Worksheets
If wsChk.Name = "customisation" Then
checkSheets = 1
Exit For
End If

Next

End Function
Sub Atstart()
Dim sht As Worksheet

For Each sht In ActiveWorkbook.Sheets

    If sht.Name = shtmixRatios.Name Then
        Call ChangeToView1(sht, 1, Range("mylastcol1").Column, 14)
   ElseIf sht.Name = shtmixRatios2.Name Then
    Call ChangeToView1(sht, 1, Range("mylastcolNew").Column, 14)

     ElseIf sht.Name = shtmixRatios2.Name Then
    Call ChangeToView1(sht, 1, Range("mylastcolNew").Column, 14)

         ElseIf sht.Name = shtmixRatios4.Name Then
   Call ChangeToView1(sht, 1, Range("mylastcol3New").Column, 14)
             ElseIf sht.Name = shtmixRatios5.Name Then
   Call ChangeToView1(sht, 1, Range("mylastcol4New").Column, 14)
                ElseIf sht.Name = shtmixRatios6.Name Then
 Call ChangeToView1(sht, 1, Range("mylastcol2New").Column, 14)
                 ElseIf sht.Name = shtmixRatios1.Name Then
 Call ChangeToView1(sht, 1, Range("mylastcol5").Column, 14)
End If

Next
'shtAllHeaders.Range("MyDebug").Value = "Debugging"
End Sub
Attribute VB_Name = "modcust2"
Option Explicit
Sub Auto_Open()
    On Error Resume Next
    If Not SheetExists("Control") Then
        Application.Calculation = xlCalculationAutomatic
    End If
    If Err <> 0 Then Err.Clear

End Sub
Public Function SheetExists(wsname As String) As Boolean
    On Error GoTo errHandler
    SheetExists = False
    Dim ws                              As Worksheet

    Set ws = ThisWorkbook.Sheets(wsname)
    SheetExists = True
errHandler:

End Function
Sub allclear()
Range("csel").Value = False
Application.Run "ctryselect"
Range("allflag").Value = False
Range("allclearflag").Value = True
End Sub
Sub allselect()
Range("caflag").Value = False
Range("saflag").Value = False
Range("ssel").Value = False
Range("csel").Value = True
Application.Run "ctryselect"
Range("allflag").Value = True
End Sub


Sub sctselect()
'
' Macro1 Macro
' Macro recorded 18/01/2001 by Dennis V Ischenko
'

'
On Error GoTo errHandler
Application.ScreenUpdating = False
Application.EnableEvents = False

Range("caflag").Value = False
Range("saflag").Value = False
Range("allclearflag").Value = False

Range("csel").Value = False
Range("allflag").Value = False


'If Range("sflag").Value = False Then
 '   Application.Run "allselect"
 '   Exit Sub
'End If

    Range("startc").Select
    Selection.Copy
    
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -1).Resize(1, 1)) = True Then Exit Do
        ActiveSheet.Paste
    Loop
    
    Range("startc").Select
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -1).Resize(1, 1)) = True Then Exit Do
        If Selection.Offset(0, -1).Resize(1, 1).Value = False Then Selection.ClearContents
    Loop
    Call Set_ChartOptions("Valuation_Chart")
errHandler:
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub


Sub ctryselect()
'
' Macro1 Macro
' Macro recorded 18/01/2001 by Dennis V Ischenko
'

'
On Error GoTo errHandler
Application.ScreenUpdating = False
Application.EnableEvents = False
Range("caflag").Value = False
Range("saflag").Value = False
Range("allclearflag").Value = False

Range("ssel").Value = False
Range("allflag").Value = False

'If Range("cflag").Value = False Then
'    Application.Run "allselect"
 '   Exit Sub
'End If

    Range("startc").Select
    Selection.Copy
    
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -2).Resize(1, 1)) = True Then Exit Do
        ActiveSheet.Paste
    Loop
    
    Range("startc").Select
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -2).Resize(1, 1)) = True Then Exit Do
        If Selection.Offset(0, -2).Resize(1, 1).Value = False Then Selection.ClearContents
    Loop
    Call Set_ChartOptions("Valuation_Chart")
errHandler:
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub

Sub avgselect()
'
' Macro1 Macro
' Macro recorded 18/01/2001 by Dennis V Ischenko
'

'
On Error GoTo errHandler
Application.ScreenUpdating = False
Application.EnableEvents = False

Range("ssel").Value = False
Range("csel").Value = False
Range("allflag").Value = False
Range("allclearflag").Value = False


'If Range("casaflag").Value = False Then
 '   Application.Run "allselect"
  '  Exit Sub
'End If

    Range("startc").Select
    Selection.Copy
    
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -2).Resize(1, 1)) = True Then Exit Do
        ActiveSheet.Paste
    Loop
    
    Range("startc").Select
    Do
        Selection.Offset(1, 0).Select
        If IsEmpty(Selection.Offset(0, -2).Resize(1, 1)) = True Then Exit Do
        If Selection.Offset(0, -2).Resize(1, 1).Value = False Then Selection.ClearContents
    Loop
        Call Set_ChartOptions("Valuation_Chart")
errHandler:
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub

Public Sub Set_ChartOptions(strSector As String)
On Error GoTo errHandler
    Dim ColNo                           As Long
    Dim k                               As Long
    Dim varCellValue                    As Variant
    Dim strNumber                       As String
    Dim chrtObject                      As ChartObject
    Dim aSeries                         As Series
    Dim i                               As Long
    Dim strLabelsRange                  As String
    Dim strLabelsPosition               As String
    Dim lngLabelPosition                As XlDataLabelPosition
    Dim wsoutput                        As Worksheet
    
    Set wsoutput = ThisWorkbook.Sheets("Valuation Charts")
    Application.StatusBar = "Updating charts. Please wait..... Now updating chart " & strSector
    Set chrtObject = wsoutput.ChartObjects(CStr(strSector))
                For i = 1 To chrtObject.Chart.SeriesCollection.Count
                    'varCellValue = TPGetValfromControlWorksheet(wsControl, "Series" & Format(i, "00") & "LabelsRange" & strNumber, ERRORVALUE, , ColNo)
                    varCellValue = "Scatter_companies"
                    'If varCellValue <> ERRORVALUE Then
                        strLabelsRange = CStr(varCellValue)
                        'varCellValue = TPGetValfromControlWorksheet(wsControl, "Series" & Format(i, "00") & "LabelsPosition" & strNumber, "Above", , ColNo)
                        varCellValue = "Right"
                        strLabelsPosition = varCellValue
                        Select Case strLabelsPosition
                            Case "Below"
                                lngLabelPosition = xlLabelPositionBelow
                            Case "Left"
                                lngLabelPosition = xlLabelPositionLeft
                            Case "Right"
                                lngLabelPosition = xlLabelPositionRight
                            Case "Center"
                                lngLabelPosition = xlLabelPositionCenter
                            Case Else
                                lngLabelPosition = xlLabelPositionAbove
                        End Select
                        Call CustLabelChartSeries(chrtObject.Chart.SeriesCollection(i), ThisWorkbook.Sheets("Valuation Charts").Range(strLabelsRange), lngLabelPosition)
                    'End If
                Next
errHandler:
Application.StatusBar = ""
If Err <> 0 Then Err.Clear
End Sub
Public Function CustLabelChartSeries(ByRef srsSeriesToLabel As Excel.Series, ByRef rngLabelText As Excel.Range, ByVal uLabelPosition As Excel.XlDataLabelPosition)

'Const szSOURCE As String = "LabelChartSeries()"
    Dim lblDataLabel                    As Excel.DataLabel
    Dim pntDataPoint                    As Excel.Point
    Dim rngArea                         As Excel.Range
    Dim rngCell                         As Excel.Range
    Dim lCount                          As Long
    Dim szLabelPrefix                   As String
    Dim intcolorindex As Integer
    intcolorindex = 1
    On Error GoTo errHandler

    ''' Assume success until an error is encountered.

    srsSeriesToLabel.ApplyDataLabels
    lCount = 1
    szLabelPrefix = "=" & "'" & rngLabelText.Parent.Name & "'" & "!"

    ''' This is necessary to handle chart series with empty cells plotted in their ranges.
    On Error Resume Next

    If rngLabelText.Areas.Count > 1 Then              ''' The user selected a discontiguous range.
        For Each rngArea In rngLabelText.Areas
            For Each rngCell In rngArea
                ''' Ignore hidden cells.
                If Not (rngCell.EntireRow.Hidden Or rngCell.EntireColumn.Hidden) Then
                    Set pntDataPoint = srsSeriesToLabel.Points(lCount)
                    'Err.Clear
                    pntDataPoint.HasDataLabel = True
                    ''' This is required to handle data points plotted from empty cell ranges.
                    If Err.Number = 0 Then
                        ''' Add the data label and position it if necessary.

                        If Trim(rngCell.Offset(0, -6).Text) <> "" Then
                        'intcolorindex = WorksheetFunction.Match(rngCell.Offset(0, -6), shtValCharts.Range("Countries"), 0)
                        'If intcolorindex = 2 Or intcolorindex = 6 Then intcolorindex = WorksheetFunction.CountA(shtValCharts.Range("Countries")) + intcolorindex
                        Else
                        intcolorindex = 1
                        End If
                        
                        pntDataPoint.MarkerBackgroundColorIndex = intcolorindex
                        pntDataPoint.MarkerForegroundColorIndex = intcolorindex
                        'pntDataPoint.MarkerStyle = xlDiamond
                        'pntDataPoint.MarkerSize = 5
                        'pntDataPoint.Shadow = False
                        'Debug.Print rngCell.Text & "---" & intcolorindex

                        Set lblDataLabel = pntDataPoint.DataLabel
                        lblDataLabel.Text = szLabelPrefix & rngCell.Address(ReferenceStyle:=xlR1C1)
                        lblDataLabel.NumberFormatLinked = True
                        CustSetTextAttributes lblDataLabel.Characters.Font, rngCell.Font
                        If uLabelPosition <> -99999 Then lblDataLabel.Position = uLabelPosition
                    Else
                        Err.Clear
                    End If
                    lCount = lCount + 1
                End If                                ''' If Not (rngCell.EntireRow.Hidden Or rngCell.EntireColumn.Hidden) Then
            Next rngCell
        Next rngArea
    Else                                              ''' The user selected a continuous range.
        For Each rngCell In rngLabelText
            ''' Ignore hidden cells.
            If Not (rngCell.EntireRow.Hidden Or rngCell.EntireColumn.Hidden) Then
                Set pntDataPoint = srsSeriesToLabel.Points(lCount)
                'Err.Clear
                pntDataPoint.HasDataLabel = True
                ''' This is required to handle data points plotted from empty cell ranges.
                If Err.Number = 0 Then
                    ''' Add the data label and position it if necessary.
                        If Trim(rngCell.Offset(0, -6).Text) <> "" Then
                        'intcolorindex = WorksheetFunction.Match(rngCell.Offset(0, -6), shtValCharts.Range("Countries"), 0)
                        'If intcolorindex = 2 Or intcolorindex = 6 Then intcolorindex = WorksheetFunction.CountA(shtValCharts.Range("Countries")) + intcolorindex
                        Else
                        intcolorindex = 1
                        End If
                        
                        pntDataPoint.MarkerBackgroundColorIndex = intcolorindex
                        pntDataPoint.MarkerForegroundColorIndex = intcolorindex
                        'pntDataPoint.MarkerStyle = xlDiamond
                        'pntDataPoint.MarkerSize = 5
                        'pntDataPoint.Shadow = False
                        'Debug.Print rngCell.Text & "---" & intcolorindex

                    Set lblDataLabel = pntDataPoint.DataLabel
                    lblDataLabel.Text = szLabelPrefix & rngCell.Address(ReferenceStyle:=xlR1C1)
                    CustSetTextAttributes lblDataLabel.Characters.Font, rngLabelText.Cells(2, 1).Font
                    lblDataLabel.NumberFormatLinked = True
                    If uLabelPosition <> -99999 Then lblDataLabel.Position = uLabelPosition
                Else
                    Err.Clear
                End If
                lCount = lCount + 1
            End If
        Next rngCell
    End If
errHandler:

    On Error Resume Next
    Set lblDataLabel = Nothing
    Set pntDataPoint = Nothing
    Set rngArea = Nothing
    Set rngCell = Nothing

    On Error GoTo 0

End Function

Public Sub CustSetTextAttributes(ByRef fntLabelFont As Excel.Font, ByRef fntRangeFont As Excel.Font)
    On Error Resume Next
    fntLabelFont.Name = fntRangeFont.Name
    fntLabelFont.FontStyle = fntRangeFont.FontStyle
    fntLabelFont.Size = fntRangeFont.Size
    fntLabelFont.ColorIndex = fntRangeFont.ColorIndex
    fntLabelFont.Strikethrough = fntRangeFont.Strikethrough
    fntLabelFont.Bold = False
End Sub
Attribute VB_Name = "modcust3"
Option Explicit
Function DWA(parameters, weights, types, criterion)

' Function created 11/11/99 by Dennis Ischenko

'check selection configuration'
Dim rws, numer, denom, i
If parameters.Columns.Count > 1 Or weights.Columns.Count > 1 Or parameters.Rows.Count <> weights.Rows.Count Or parameters.Rows.Count <> types.Rows.Count Then
    DWA = "incorrect ranges"
Else

rws = parameters.Rows.Count
numer = 0
denom = 0

For i = 1 To rws
    If criterion = "" Then
    If IsNumeric(parameters(i)) = True And IsNumeric(weights(i)) = True Then
        numer = numer + parameters(i) * weights(i)
        denom = denom + weights(i)
    End If
    Else
    If types(i) = criterion And IsNumeric(parameters(i)) = True And IsNumeric(weights(i)) = True Then
        numer = numer + parameters(i) * weights(i)
        denom = denom + weights(i)
    End If
    End If
Next i
    If denom = 0 Then
        DWA = "na"
    Else
        DWA = numer / denom
    End If
End If
End Function

Function DSM(parameters, types, criterion)

' Function created 11/11/99 by Dennis Ischenko

'check selection configuration'
Dim rws, i
If parameters.Columns.Count > 1 Or types.Columns.Count > 1 Or parameters.Rows.Count <> types.Rows.Count Then
    DSM = "incorrect ranges"
Else

rws = parameters.Rows.Count
DSM = 0

For i = 1 To rws
    If criterion = "" Then
    If IsNumeric(parameters(i)) = True Then
        DSM = DSM + parameters(i)
    End If
    Else
    If types(i) = criterion And IsNumeric(parameters(i)) = True Then
        DSM = DSM + parameters(i)
    End If
    End If
Next i
End If
End Function

Function DCT(list, criterion)

' Function created 11/11/99 by Dennis Ischenko

'check selection configuration'
Dim rws, i
If list.Columns.Count > 1 Then
    DCT = "incorrect inputs"
Else

rws = list.Rows.Count
DCT = 0

For i = 1 To rws
    If criterion = "" Then
        DCT = rws
    End If
    If list(i) = criterion Then
        DCT = DCT + 1
    End If
Next i
End If
End Function



Function DSUMPRODUCT(column1, column2, types, criterion)

' Function created in dec 2003 by Dennis Ischenko

'check selection configuration'
Dim rws, i, numer
If column1.Columns.Count > 1 Or column2.Columns.Count > 1 Or column1.Rows.Count <> column2.Rows.Count Or column1.Rows.Count <> types.Rows.Count Then
    DSUMPRODUCT = "incorrect ranges"
Else

rws = column1.Rows.Count
numer = 0
'denom = 0

For i = 1 To rws
    If criterion = "" Then
    If IsNumeric(column1(i)) = True And IsNumeric(column2(i)) = True Then
        numer = numer + column1(i) * column2(i)
        'denom = denom + weights(i)
    End If
    Else
    If types(i) = criterion And IsNumeric(column1(i)) = True And IsNumeric(column2(i)) = True Then
        numer = numer + column1(i) * column2(i)
        'denom = denom + weights(i)
    End If
    End If
Next i
    
    DSUMPRODUCT = numer

End If
End Function


Attribute VB_Name = "modcust9"
Option Explicit
Dim summaryflag                         As Byte

Sub sort_summary_desc()
    summaryflag = 1
    Call sort_desc
End Sub

Sub sort_summary_asc()
    summaryflag = 1
    Call sort_asc
End Sub
Sub sort_summary_reset()
    summaryflag = 1
    Call sort_orig
End Sub

Sub sort_nonsummary_desc()
    summaryflag = 0
    Call sort_desc
End Sub

Sub sort_nonsummary_asc()
    summaryflag = 0
    Call sort_asc
End Sub

Sub sort_nonsummary_reset()
    summaryflag = 0
    Call sort_orig
End Sub

Sub sort_desc()
    Dim ws                              As Worksheet
    Dim sort_col                        As Long
    Dim start_row                       As Long
    Dim start_col                       As Long
    Dim last_row                        As Long
    Dim last_col                        As Long
    Dim i                               As Long
    Dim color_flag                      As Byte
    Dim cell                            As Range

    On Error GoTo errHandler
    sort_col = ActiveCell.Column
    Set ws = ActiveSheet
    Application.ScreenUpdating = False
    'Application.Calculation = xlCalculationManual
    start_row = ws.Range("FinalSortRng").Cells(1).Row
    start_col = ws.Range("FinalSortRng").Cells(1).Column
    If summaryflag = 1 Then
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row
    Else
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row - 2
    End If
    last_col = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Column

    If sort_col > last_col Then
        MsgBox "Please select any cell containg data and try again"
        Exit Sub
    End If

    ws.Range(start_row & ":" & last_row).Sort _
            Key1:=ws.Range("Sort_Col1"), _
            order1:=xlAscending, header:=xlYes, Key2:=ActiveCell, Order2:=xlDescending

    color_flag = 0
    For i = start_row + 1 To last_row
        If i <> start_row + 1 Then ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Borders(xlEdgeTop).LineStyle = xlNone

        If ws.Cells(i, ws.Range("Sort_Col1").Column).Value = 0 Then
            If color_flag = 0 Then
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 2
                color_flag = 1
            Else
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 15
                color_flag = 0
            End If
        Else
            ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 48
        End If
    Next i

    ws.Range(ws.Cells(start_row + 1, sort_col), ws.Cells(last_row, sort_col)).Interior.ColorIndex = 48

errHandler:
    Application.ScreenUpdating = True
End Sub

Sub sort_asc()
    Dim ws                              As Worksheet
    Dim sort_col                        As Long
    Dim start_row                       As Long
    Dim start_col                       As Long
    Dim last_row                        As Long
    Dim last_col                        As Long
    Dim i                               As Long
    Dim color_flag                      As Byte
    Dim cell                            As Range

    On Error GoTo errHandler
    sort_col = ActiveCell.Column
    Set ws = ActiveSheet
    Application.ScreenUpdating = False
    'Application.Calculation = xlCalculationManual
    start_row = ws.Range("FinalSortRng").Cells(1).Row
    start_col = ws.Range("FinalSortRng").Cells(1).Column
    If summaryflag = 1 Then
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row
    Else
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row - 2
    End If
    last_col = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Column

    If sort_col > last_col Then
        MsgBox "Please select any cell containg data and try again"
        Exit Sub
    End If

    ws.Range(start_row & ":" & last_row).Sort _
            Key1:=ws.Range("Sort_Col1"), _
            order1:=xlAscending, header:=xlYes, Key2:=ActiveCell, Order2:=xlAscending

    color_flag = 0
    For i = start_row + 1 To last_row
        If i <> start_row + 1 Then ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Borders(xlEdgeTop).LineStyle = xlNone
        If ws.Cells(i, ws.Range("Sort_Col1").Column).Value = 0 Then
            If color_flag = 0 Then
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 2
                color_flag = 1
            Else
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 15
                color_flag = 0
            End If
        Else
            ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 48
        End If
    Next i
    ws.Range(ws.Cells(start_row + 1, sort_col), ws.Cells(last_row, sort_col)).Interior.ColorIndex = 48

errHandler:
    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub

Sub sort_orig()
    Dim ws                              As Worksheet
    Dim sort_col                        As Long
    Dim start_row                       As Long
    Dim start_col                       As Long
    Dim last_row                        As Long
    Dim last_col                        As Long
    Dim i                               As Long
    Dim color_flag                      As Byte
    Dim cell                            As Range

    On Error GoTo errHandler
    sort_col = ActiveCell.Column
    Set ws = ActiveSheet
    Application.ScreenUpdating = False
    'Application.Calculation = xlCalculationManual
    start_row = ws.Range("FinalSortRng").Cells(1).Row
    start_col = ws.Range("FinalSortRng").Cells(1).Column
    If summaryflag = 1 Then
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row
    Else
        last_row = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Row - 2
    End If

    last_col = ws.Range("FinalSortRng").Cells(ws.Range("FinalSortRng").Cells.Count).Column


    If sort_col > last_col Then
        MsgBox "Please select any cell containg data and try again"
        Exit Sub
    End If

    ws.Range(start_row & ":" & last_row).Sort _
            Key1:=ws.Range("Sort_Col1").Offset(0, 1), _
            order1:=xlAscending, header:=xlYes

    color_flag = 0
    For i = start_row + 1 To last_row
        If ws.Cells(i, ws.Range("Sort_Col1").Column).Value = 0 Then
            If i <> start_row + 1 Then ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Borders(xlEdgeTop).LineStyle = xlNone
            If color_flag = 0 Then
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 2
                color_flag = 1
            Else
                ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 15
                color_flag = 0
            End If
        Else
            ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Interior.ColorIndex = 48
            With ws.Range(Cells(i, start_col).Address & ":" & Cells(i, last_col).Address).SpecialCells(xlCellTypeVisible).Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            color_flag = 0
        End If
    Next i

    'If summaryflag = 0 Then
    With ws.Range(Cells(last_row + 1, start_col).Address & ":" & Cells(last_row + 1, last_col).Address).SpecialCells(xlCellTypeVisible).Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    'End If
errHandler:
    'Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "modcust_email"
Option Explicit
Dim wbk                                 As Workbook
Dim MailFilePath                        As String

Sub send_emails()
    Dim iAnswer, wkday
    Dim rwcnt                           As Long
    Dim i                               As Integer
    Dim s_today                         As String
    Dim recipient_names                 As Variant

    s_today = UCase(Format(Now(), "dddd"))

    On Error GoTo errHandler
    If Application.MailSystem = xlNoMailSystem Then
        MsgBox "You dont have Mail System installed on your machine...", vbInformation
        GoTo errHandler
    End If

    Workbooks.Open MailFilePath
    Set wbk = ActiveWorkbook
    rwcnt = wbk.ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row
    If rwcnt = 1 Then
        MsgBox "Email file does not contain any data.", vbCritical
        GoTo errHandler
    End If

    For i = 2 To rwcnt
        If Len(Trim(wbk.ActiveSheet.Cells(i, 1))) > 0 And UCase(Trim(wbk.ActiveSheet.Cells(i, 4))) = "Y" Then
            If InStr(1, UCase(ActiveSheet.Cells(i, 3)), s_today, vbTextCompare) > 0 Then
                Application.StatusBar = "Sending Mail to " & ActiveSheet.Cells(i, 1)
                recipient_names = Split(wbk.ActiveSheet.Cells(i, 2), ";")
                ThisWorkbook.SendMail Recipients:=Array(recipient_names), Subject:="Citigroup European Banks Valuations"
            End If
        End If
    Next i

errHandler:
    If IsNull(rwcnt) = False Then
        wbk.Close savechanges:=False
    End If

    If Err <> 0 Then
        If Err.Number = 1004 Then
            MsgBox "Mailbox Error: Your mailbox may be full. Please clear some space and run the macro again.", vbCritical, "Email Error"
        Else
            MsgBox Err.Number & ": " & Err.Description
        End If
    End If
    Application.StatusBar = False
End Sub


Sub proc_del_unwanted_data()
    Dim bank_file                       As String
    Dim sht_rw                          As Long
    Dim bank_file_name                  As String
    Dim wbk_flag                        As Byte
    Dim i                               As Long
    Dim sht                             As Worksheet
    Dim rng                             As Range
    Dim cell                            As Range

    Dim TotRng                          As Range
    Dim new_rng                         As Range
    Dim rngdel                          As Range
    Dim yes_no                          As Variant

    On Error GoTo errHandler

    MailFilePath = Trim(email_sheet.Range("email_file").Value)

    If Len(MailFilePath) = 0 Then
        MsgBox "Email file name can not be blank...", vbCritical
        GoTo errHandler
    End If

    If Dir(MailFilePath) = "" Then
        MsgBox "Email file does not exist. Kindly check the path.", vbCritical
        GoTo errHandler
    End If

    Application.DisplayAlerts = False
    Application.EnableEvents = False
    'Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    sht_rw = email_sheet.Cells(65000, 2).End(xlUp).Row
    ThisWorkbook.SaveAs ThisWorkbook.Path & "\SSSB_EBK.xls", , , , True

    For Each sht In ThisWorkbook.Worksheets
        If Application.WorksheetFunction.CountIf(email_sheet.Range("B:B"), sht.Name) > 0 Then
            sht.Delete
        End If
    Next

    '    If sht_rw - 1 = ThisWorkbook.Sheets.Count Then
    '        MsgBox "No of sheets specified in Customization sheet can not be same as not of sheets present in the workbook...", vbInformation
    '        GoTo errHandler
    '    End If

    '    For i = 2 To sht_rw
    '        On Error Resume Next
    '        If UCase(email_sheet.Cells(i, 2)) <> UCase(email_sheet.Name) Then
    '            ThisWorkbook.Sheets(email_sheet.Cells(i, 2)).Delete
    '        End If
    '        Err.Clear
    '    Next i

    For Each sht In ThisWorkbook.Worksheets
        sht.Activate
        sht.Outline.ShowLevels 2, 2
        sht.Columns.Hidden = False
        sht.Rows.Hidden = False
        Set TotRng = sht.Range("A1:" & sht.Cells.SpecialCells(xlCellTypeLastCell).Address)
        On Error Resume Next

        Application.StatusBar = "Deleting unwanted columns from sheet " & sht.Name
        Do
            Set new_rng = TotRng.Find(What:="|custdeletecol|", LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
            new_rng.EntireColumn.Delete
        Loop Until Err <> 0
        Err.Clear

        Application.StatusBar = "Deleting unwanted rows from sheet " & sht.Name
        Do
            Set new_rng = TotRng.Find(What:="|custdeleterow|", LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
            new_rng.EntireRow.Delete
        Loop Until Err <> 0
        Err.Clear

        If Not sht.Range("deleterowsrng") Is Nothing Then
            If Err <> 0 Then
                sht.Rows(Range("deleterowsrng").Cells(1).Row & ":" & Range("deleterowsrng").Cells(Range("deleterowsrng").Cells.Count).Row).Delete shift:=xlUp
            End If
        End If
        Err.Clear
        
        If UCase(sht.Name) = "DISCLAIMER" Then
            With sht
            .PageSetup.PaperSize = xlPaperA4
            .DisplayAutomaticPageBreaks = False
            End With
        End If
        
        On Error GoTo errHandler
        Application.StatusBar = "Pasting values in sheet " & sht.Name
        If UCase(sht.Name) <> "SUMMARY" And UCase(sht.Name) <> "SUMMARY AGGS" And UCase(sht.Name) <> "VALUATION CHARTS" And UCase(sht.Name) <> "VALUATIONCHARTS NEW" Then
            sht.Activate
            sht.Cells.Copy
            sht.Cells.PasteSpecial Paste:=xlPasteValues
            sht.Cells(1, 1).Select
        ElseIf UCase(sht.Name) = "VALUATION CHARTS" Or UCase(sht.Name) = "VALUATIONCHARTS NEW" Then

        Else
            Debug.Print sht.Name
            Set rng = sht.Range("A1:" & sht.Cells.SpecialCells(xlCellTypeLastCell).Address)

            For Each cell In rng
                If Not IsError(cell) Then
                    If cell.HasFormula Then
                        If InStr(1, UCase(cell.Formula), "OFFSET", vbTextCompare) = 0 Then
                            cell = cell.Value
                        End If
                    End If
                End If
            Next
        End If
        sht.Outline.ShowLevels 1, 1
        'sht.Range("A1").Select
        Application.GoTo sht.Range("A1"), True
    
    
    
    
    If sht.Name = shtmixRatios.Name Then
        Call ChangeToView1(sht, 1, Range("mylastcol1").Column, 0)
   ElseIf sht.Name = shtmixRatios2.Name Then
    Call ChangeToView1(sht, 1, Range("mylastcolNew").Column, 0)
   
     ElseIf sht.Name = shtmixRatios2.Name Then
    Call ChangeToView1(sht, 1, Range("mylastcolNew").Column, 0)
    
         ElseIf sht.Name = shtmixRatios4.Name Then
   Call ChangeToView1(sht, 1, Range("mylastcol3New").Column, 0)
             ElseIf sht.Name = shtmixRatios5.Name Then
   Call ChangeToView1(sht, 1, Range("mylastcol4New").Column, 0)
                ElseIf sht.Name = shtmixRatios6.Name Then
 Call ChangeToView1(sht, 1, Range("mylastcol2New").Column, 0)
                 ElseIf sht.Name = shtmixRatios1.Name Then
 Call ChangeToView1(sht, 1, Range("mylastcol5").Column, 0)
    
    End If
    
    
    
    Next

    email_sheet.Delete
    ThisWorkbook.Sheets(1).Activate
    ThisWorkbook.Save
    Application.StatusBar = "Sending mails..."
    yes_no = MsgBox("Do you want to send Email?", vbQuestion + vbYesNo)
    If yes_no = vbYes Then
        Call send_emails
    End If
    MsgBox "Done"
errHandler:

    If Err <> 0 Then
        MsgBox Err.Number & ": " & Err.Description
    End If
    Application.StatusBar = False
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    'Application.ScreenUpdating = True
shtAllHeaders.Visible = xlSheetHidden
Application.Calculation = xlCalculationAutomatic
End Sub
Attribute VB_Name = "shtAllHeaders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtPerformanceCharts"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custShowCharts, 37, 0, MSForms, CommandButton"
Attribute VB_Control = "custPT, 38, 1, MSForms, CommandButton"
Option Explicit
Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub custShowCharts_Click()
    Call GoToCharts
End Sub


'Private Sub CommandButton1_Click()
'    Call GoToCharts
'End Sub
'
'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub
'
'Private Sub CommandButton2_Click()
'    Call custPrintTables
'End Sub
Attribute VB_Name = "shtValuationChartsNew"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custClearAll, 83, 1, MSForms, CommandButton"
Attribute VB_Control = "custPT, 82, 2, MSForms, CommandButton"
Attribute VB_Control = "custBackToTbls, 81, 3, MSForms, CommandButton"
Attribute VB_Control = "lstCountry, 63, 4, MSForms, ListBox"
Attribute VB_Control = "lstFocus, 64, 5, MSForms, ListBox"
Option Explicit

Private Sub custBackToTbls_Click()
    Call BackTo
End Sub

Private Sub custClearAll_Click()
    Call ClearChart
End Sub

Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub lstCountry_Change()
     shtValuationChartsNew.Range("SelCountry").Value = getListCSV(lstCountry)
End Sub

Function getListCSV(lstBox As MSForms.ListBox) As String
    Dim strList               As String
    Dim i                     As Long

    With lstBox
        If .Selected(0) Then
            strList = "All"
        Else
            For i = 1 To .ListCount - 1
                If .Selected(i) = True Then
                    strList = strList & .list(i, 0) & ","
                End If
            Next
        End If
    End With
    
    getListCSV = strList
End Function

Private Sub lstFocus_Change()
    shtValuationChartsNew.Range("SelFocus").Value = getListCSV(lstFocus)
End Sub

Attribute VB_Name = "shtmixRatios"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custShowCharts, 41, 0, MSForms, CommandButton"
Attribute VB_Control = "custPT, 42, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView1, 60, 2, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll1, 61, 3, MSForms, CommandButton"
Option Explicit

'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub
Private Sub custcmdDataView1_Click()

Application.ScreenUpdating = False
'If custcmdDataView1.Caption = shtmixRatios.Range("Myview1").Value Then
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol1").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol1").Column, 0)
End If



End Sub

Private Sub custcmdDataViewAll1_Click()
Application.ScreenUpdating = False


If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol1").Column, 14)
Else
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol1").Column, 0)
End If



End Sub
Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub custShowCharts_Click()
    Call GoToCharts
End Sub

Attribute VB_Name = "shtmixRatios1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custPT, 46, 0, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView5, 51, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll5, 52, 2, MSForms, CommandButton"
Option Explicit

Private Sub custcmdDataView5_Click()
Application.ScreenUpdating = False
'If custcmdDataView5.Caption = shtmixRatios.Range("Myview1").Value Then
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol5").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol5").Column, 0)
End If


End Sub

Private Sub custcmdDataViewAll5_Click()
Application.ScreenUpdating = False
If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol5").Column, 14)
Else
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol5").Column, 0)
End If


End Sub











Private Sub custPT_Click()
    Call custPrintTables
End Sub

'Private Sub CommandButton1_Click()
'    Call custPrintTables
'End Sub
'
'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub

Attribute VB_Name = "shtmixRatios2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custShowCharts, 117, 0, MSForms, CommandButton"
Attribute VB_Control = "custPT, 118, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView, 166, 2, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll, 274, 4, MSForms, CommandButton"
Option Explicit

'Private Sub custCharts_Click()
'    Sheets("Valuation Charts").Select
'End Sub
'
'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub




Private Sub custcmdDataView_Click()

Application.ScreenUpdating = False
'If custcmdDataView.Caption = shtmixRatios.Range("Myview1").Value Then

'custcmdDataView.Caption = shtmixRatios.Range("Myview2").Value
'Else
'Call ChangeToView1(ActiveSheet, 2, Range("mylastcol").Column)
'custcmdDataView.Caption = shtmixRatios.Range("Myview1").Value
'End If
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcolNew").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcolNew").Column, 0)
End If



End Sub

Private Sub custcmdDataViewAll_Click()
Application.ScreenUpdating = False
If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcolNew").Column, 14)
Else
 Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcolNew").Column, 0)
End If

End Sub
Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub custShowCharts_Click()
    Call GoToCharts
End Sub
Attribute VB_Name = "shtmixRatios3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custPAS, 393, 0, MSForms, CommandButton"
Attribute VB_Control = "custPAS2, 394, 1, MSForms, CommandButton"
Attribute VB_Control = "custShowCharts, 395, 2, MSForms, CommandButton"
Attribute VB_Control = "custPAS3, 396, 3, MSForms, CommandButton"

Private Sub custPrint3_Click()

    Range("dcpage1").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage2").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage3").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage4").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage5").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage6").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("dcpage7").Select
    Selection.PrintOut Copies:=1, Collate:=True

    Range("AQ2").Select
End Sub


Private Sub custPrint_Click()
    Sheets("Adjustments").Select
    ActiveWindow.SelectedSheets.PrintOut Copies:=1
End Sub


Private Sub custPrint2_Click()
    Sheets("Adjustments").Select
    ActiveWindow.SelectedSheets.PrintOut Copies:=1
End Sub

Private Sub custPAS_Click()
    Call PrintAdjustments1
End Sub

Private Sub custPAS2_Click()
    Call PrintAdjustments1
End Sub

Private Sub custPAS3_Click()
    Call PrintAdjustments2
End Sub

Private Sub custShowCharts_Click()
    Call GoToCharts
End Sub
Attribute VB_Name = "shtmixRatios4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custPT, 147, 0, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView3, 170, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll3, 171, 2, MSForms, CommandButton"
Option Explicit

'Private Sub CommandButton1_Click()
'    Call custPrintTables
'End Sub
'
'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub
Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub custcmdDataView3_Click()

Application.ScreenUpdating = False
'If custcmdDataView3.Caption = shtmixRatios.Range("Myview1").Value Then
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol3New").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol3New").Column, 0)
End If

End Sub

Private Sub custcmdDataViewAll3_Click()
Application.ScreenUpdating = False


If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol3New").Column, 14)
Else
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol3New").Column, 0)
End If

End Sub
Attribute VB_Name = "shtmixRatios5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custPT, 61, 0, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView4, 169, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll4, 170, 3, MSForms, CommandButton"
Option Explicit

Private Sub custPT_Click()
    Call custPrintTables
End Sub


'Private Sub CommandButton1_Click()
'    Call custPrintTables
'End Sub
'
'Private Sub custPrint_Click()
'    Dim intnumberofcopies               As Integer
'    Dim i                               As Integer
'    Dim ws                              As Worksheet
'    Set ws = ActiveSheet
'
'    intnumberofcopies = InputBox("No. of copies?", "Print", "1")
'    If intnumberofcopies = 0 Then GoTo Err1
'    If Not Application.WorksheetFunction.IsNumber(intnumberofcopies) Then GoTo Err1
'    'For i = 1 To intnumberofcopies
'    Application.Run "PrintMacro", intnumberofcopies
'    'Next
'    ws.Activate
'
'Err1:
'End Sub
Private Sub custcmdDataView4_Click()

Application.ScreenUpdating = False
'If custcmdDataView4.Caption = shtmixRatios.Range("Myview1").Value Then
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol4New").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol4New").Column, 0)
End If

End Sub

Private Sub custcmdDataViewAll4_Click()
Application.ScreenUpdating = False


If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol4New").Column, 14)
Else
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol4New").Column, 0)
End If


End Sub
Attribute VB_Name = "shtmixRatios6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "custPT, 58, 0, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataView2, 77, 1, MSForms, CommandButton"
Attribute VB_Control = "custcmdDataViewAll2, 78, 2, MSForms, CommandButton"
Option Explicit

Private Sub CommandButton2_Click()

End Sub

Private Sub custPT_Click()
    Call custPrintTables
End Sub

Private Sub custcmdDataView2_Click()

Application.ScreenUpdating = False
'If custcmdDataView2.Caption = shtmixRatios.Range("Myview1").Value Then
'End If
If checkSheets = 1 Then
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol2New").Column, 14)
Else
Call ChangeToView1(ActiveSheet, 1, Range("mylastcol2New").Column, 0)
End If


End Sub

Private Sub custcmdDataViewAll2_Click()
Application.ScreenUpdating = False

If checkSheets = 1 Then
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol2New").Column, 14)
Else
Call ChangeToNormalView(ActiveSheet, 0, Range("mylastcol2New").Column, 0)
End If

End Sub


' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
