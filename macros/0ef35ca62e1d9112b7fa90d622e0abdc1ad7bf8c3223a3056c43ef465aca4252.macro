Attribute VB_Name = "Module1"
Sub Email_Report()
' Some of this code was copied from the following web page:
' http://support.microsoft.com/default.aspx?scid=kb;en-us;Q159493
    Dim OutApp As Object
    Dim OutMail As Object

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    'In event of an error, the EHandler will go to message box
    On Error GoTo EHandler
    
    Dim DataRange As Range
    Dim c As Range
    Dim count As Integer
    
    ActiveSheet.Unprotect "ds"
    
    'Circle the invalid data
    ActiveSheet.CircleInvalid

    'Set an object variable to all of the cells on the active
    'sheet that have data validation
    Set DataRange = Cells.SpecialCells(xlCellTypeAllValidation)

    'Initialize the count variable
    count = 0

    'Loop through each cell that has data validation
    For Each c In DataRange

       'If the validation value for the cell is false, then
       'display a message and highlight the cell.
       If Not c.Validation.Value Then
            MsgBox ("This report form contains invalid data.  Please re-input data cells circled in RED.")
            c.Select
            ActiveSheet.Protect "ds"
            Exit Sub
       End If
    Next
    
    ActiveSheet.Protect "ds"
     
    'If the program got to this point, then all values are valid.
    'After ".Show", the arguments are: To, Subject
'    Application.Dialogs(xlDialogSendMail).Show "admsoc405x@dss.ca.gov", "SOC405X" & " " & ActiveSheet.Range("z5").Value & " " & ActiveSheet.Range("z6").Text & " " & ActiveSheet.Range("z7").Text & " " & ActiveSheet.Range("z8") & " " & ActiveSheet.Range("L88").Text & "" & ActiveSheet.Range("L87")
 On Error Resume Next
    With OutMail
        .To = Sheets("Report Form").Range("F6").Value
        .CC = ""
        .BCC = ""
        .Subject = Sheets("CDSS Only").Range("A59").Value
        .Body = ""
         ActiveWorkbook.Save
        .Attachments.Add ActiveWorkbook.FullName
        .Display   'or use .Send
    End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing
    Exit Sub
    
EHandler:
    answer = MsgBox("An ERROR has occurred because Microsoft Outlook or Outlook Express is not your default email system. Please email this file as an attachment and submit this report to CDSS using the information below:" & Chr(10) & Chr(10) & _
        "To: " & Sheets("Report Form").Range("F6") & Chr(10) & "Subject: " & Sheets("CDSS Only").Range("A59").Value)
End Sub

Sub CountyByCountClick()

    Dim DataRange As Range
    Dim c As Range
    Dim count As Integer
    Dim MyCheck As VbMsgBoxResult
    
    Sheets("Report Form").Select
    Range("B2").Select
    
    ActiveSheet.Unprotect "ds"
    
    'Circle the invalid data
    ActiveSheet.CircleInvalid

    'Set an object variable to all of the cells on the active
    'sheet that have data validation
    Set DataRange = Cells.SpecialCells(xlCellTypeAllValidation)

    'Initialize the count variable
    count = 0

    'Loop through each cell that has data validation
    For Each c In DataRange

       'If the validation value for the cell is false, then
       'display a message and highlight the cell.
       If Not c.Validation.Value Then
            MyCheck = MsgBox("The Report Form contains invalid data.  Do you wish to continue?", vbYesNo)
                If MyCheck = vbYes Then
                ActiveSheet.ClearCircles
                Exit For
                End If
            c.Select
            ActiveSheet.Protect "ds"
            Exit Sub
       End If
       
    Next
    ActiveSheet.Protect "ds"
    ThisWorkbook.Unprotect "ds"
    Sheets("CDSS ONLY").Visible = xlSheetVisible
    Sheets("CDSS ONLY").Activate
    Range("A6").Select
    ActiveWindow.DisplayHeadings = True
    
    Exit Sub
End Sub

Sub CircleInvalidClick()

Dim DataRange As Range
Dim c As Range
Dim count As Integer
 
ActiveSheet.Unprotect "ds"
ActiveSheet.CircleInvalid
Set DataRange = Cells.SpecialCells(xlCellTypeAllValidation)
 count = 0
 For Each c In DataRange
   If Not c.Validation.Value Then
            c.Select
            ActiveSheet.Protect "ds"
            Exit Sub
       End If
    Next
ActiveSheet.Protect "ds"
MsgBox ("Data cells have been checked and are valid.")

End Sub

Sub ClearCirclesClick()

ActiveSheet.Unprotect "ds"

ActiveSheet.ClearCircles

ActiveSheet.Protect "ds"

End Sub

Attribute VB_Name = "Module2"
'RDAs DO NOT NEED TO MODIFY THIS MODULE
'Validations table and worksheet MUST be named 'Validations'

Sub FilterValidationTable()
Attribute FilterValidationTable.VB_Description = "Filters validation table"
Attribute FilterValidationTable.VB_ProcData.VB_Invoke_Func = "F\n14"
'
' FilterValidationTable Macro
' Filters validation table
'
' Keyboard Shortcut: Ctrl+Shift+F
'
 Sheets("Validations").Activate
 ActiveSheet.Range("a1").Select
 Sheets("Validations").Unprotect "ds"
    Sheets("Validations").ListObjects("Validations").Range.AutoFilter Field:=4, Criteria1:="FALSE"
 Sheets("Validations").Protect "ds"
End Sub
Attribute VB_Name = "Refresh"
Sub Refresh()

Application.ScreenUpdating = False
Application.EnableEvents = False

Sheets("Report Form").Unprotect "ds"

Dim FindCell, CellCount As Long, x As Long

Sheets("Report Form").Activate

For x = 1 To 300

        With Range("J:J")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With

    If FindCell Is Nothing Then
        With Range("L:L")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
    End If

    If FindCell Is Nothing Then
        With Range("N:N")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
    End If

    If FindCell Is Nothing Then
        With Range("P:P")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
    End If

    If FindCell Is Nothing Then
        With Range("R:R")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
    End If

    If Cells(FindCell.Row, FindCell.Column + 1).Locked = True Then GoTo NextX
    Cells(FindCell.Row, FindCell.Column + 1).ClearContents

NextX:
Next x

Range("F11") = "Select County Name"
Range("I11") = "Select Report"
Range("J11") = "Initial"
Range("L11") = "Select Quarter"
Range("P11") = "Select Year"
Range("F79:S79").ClearContents
Range("F81:S81").ClearContents
Range("F83:S83").ClearContents
Range("F85:S85").ClearContents
Range("F87:S87").ClearContents
Range("F89:S89").ClearContents
Range("P91:S91").ClearContents

Application.ScreenUpdating = True
Application.EnableEvents = True

Sheets("Report Form").Protect "ds"

End Sub




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'RDAs NEED TO CHANGE AREAS HIGHLIGHTED BY GREEN COMMENTS IN THIS CODE.

Private Sub Worksheet_Change(ByVal Target As Range)

    'J11 is the left most cell that contains the Report Version Dropdown
    If Not Intersect(Target, Range("J11")) Is Nothing Then
        If IsEmpty(Target) Then Exit Sub
        'J11 is the left most cell that contains the Report Version Dropdown
        If Range("J11").Value = "Revised" Then
            Application.EnableEvents = False
            'Q60:S60 is the range of the Date Submitted space
            Range("P91:S91").ClearContents
            'F50 is the left most cell of the Revised Report Explanation box
            MsgBox ("Enter the reason for report revision (including what changes were made) in the Revised Report Explanation box.")
            Application.EnableEvents = True
            Exit Sub
        End If
    End If
    
    If Not Intersect(Target, Range("I11")) Is Nothing Then
        If Left(ActiveSheet.Range("I11"), 3) <> "SOC" Then
        ActiveSheet.Unprotect "ds"
        Application.EnableEvents = False
            Range("E1").Value = "Effective with the April - June 2015 report quarter, this is the automated form for CDSS's SOC405X and SOC405XP reports (updated " & Format(Sheets("CDSS Only").Range("A57"), "MMMM DD, YYYY") & ").  Press tab to cycle through the cells that require data entry.  Automatically calculated cells will be skipped when tabbing through the form.  " & _
    "Questions about the form or instructions can be sent to " & _
    "Technical support questions can be sent to admDSSDCWTS@dss.ca.gov.  Report instructions can be found on the Quick Links worksheet."
                        Application.EnableEvents = True
            ActiveSheet.Protect "ds"
            Exit Sub
        End If
        ActiveSheet.Unprotect "ds"
        Application.EnableEvents = False
    Range("E1").Value = "Effective with the April - June 2015 report quarter, this is the automated form for CDSS's " & Range("I11") & " report (updated " & Format(Sheets("CDSS Only").Range("A57"), "MMMM DD, YYYY") & ").  Press tab to cycle through the cells that require data entry.  Automatically calculated cells will be skipped when tabbing through the form.  " & _
    "Questions about the form or instructions can be sent to " & _
    Range("F6").Value & ".  Technical support questions can be sent to admDSSDCWTS@dss.ca.gov.  Report instructions can be found on the Quick Links worksheet."
            Application.EnableEvents = True
            ActiveSheet.Protect "ds"
            Exit Sub
        End If
 
'    'J11 is the left most cell that contains the Report Version Dropdown
'    If Not Intersect(Target, Range("L56")) Is Nothing Then
'        If IsEmpty(Target) Then Exit Sub
'        'J11 is the left most cell that contains the Report Version Dropdown
'        If Range("L56").Value = Range("L52").Value Then
'            'F50 is the left most cell of the Revised Report Explanation box
'            MsgBox ("The entry for the Supervisor's telephone number matches the entry for the Contact Person's telephone number.  Be sure to complete the Extension fields for both phone numbers.  If the Extension fields are not completed or the entries are identical, the form will mark the Telephone and Extensions as errors.")
'            Application.EnableEvents = True
'            Exit Sub
'        End If
'    End If
    
   'Q60 is the left most cell containing the date submitted
   If Not Intersect(Target, Range("P91")) Is Nothing Then
        If IsEmpty(Target) Then Exit Sub
        ActiveSheet.Unprotect "ds"
        Application.EnableEvents = False
        ActiveSheet.CircleInvalid
        Set DataRange = Cells.SpecialCells(xlCellTypeAllValidation)
        count = 0
        For Each c In DataRange
           If Not c.Validation.Value Then
                answer = MsgBox("This Report Form contains invalid data.  Please correct data cells circled in RED. Would you like to go to the Validations sheet to identify data validation errors?", vbYesNo)
                If answer = vbYes Then
                    Call Module2.FilterValidationTable
                    'Q60:S60 is the range of the Date Submitted space
                    Range("P91:S91").ClearContents
                    Application.EnableEvents = True
                    ActiveSheet.Protect "ds"
                    Exit Sub
                End If
                c.Select
                'Q60:S60 is the range of the Date Submitted space
                Range("P91:S91").ClearContents
                Application.EnableEvents = True
                ActiveSheet.Protect "ds"
                Exit Sub
           End If
        Next
        Application.EnableEvents = True
        answer = MsgBox("Data cells have been checked and are valid. Submit " & Sheets("CDSS Only").Range("A54") & " County's " & Sheets("CDSS ONLY").Range("A52") & " " & Sheets("CDSS ONLY").Range("A53") & " report to CDSS?", vbYesNo)
        If answer = vbYes Then Call Module1.Email_Report
    End If


End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

Dim OutApp As Object, OutMail As Object, NoErrors As Boolean

    'F6 contains the fake hyperlink to the report inbox
    If Not Intersect(Target, Range("F6")) Is Nothing Then
        'AG1 is the Cell that indicates all cells are filled out and there are no validation errors
        If Left(Sheets("Report Form").Range("I11"), 3) <> "SOC" Then
            MsgBox ("Please select report.")
            Exit Sub
        End If
        
        If Sheets("Report Form").Range("AS1") = False Then
            NoErrors = False
            On Error GoTo ErrorData
            Set OutApp = CreateObject("Outlook.Application")
            Set OutMail = OutApp.CreateItem(0)
            With OutMail
                .To = Sheets("Report Form").Range("F6").Value
                .CC = ""
                .BCC = ""
                .Subject = Sheets("Report Form").Range("I11") & " Form or Instructions Inquiry"
                .Body = ""
                 ActiveWorkbook.Save
                .Attachments.Add ActiveWorkbook.FullName
                .Display
            End With
            On Error GoTo 0
            Set OutMail = Nothing
            Set OutApp = Nothing
        Else
            Call Module1.Email_Report
        End If
    End If
    
    'F9 contains the fake hyperlink to the unit's tech support inbox
    If Not Intersect(Target, Range("F9")) Is Nothing Then
        If Left(Sheets("Report Form").Range("I11"), 3) <> "SOC" Then
            MsgBox ("Please select report.")
            Exit Sub
        End If
        On Error GoTo ErrorTech
            Set OutApp = CreateObject("Outlook.Application")
        Set OutMail = OutApp.CreateItem(0)
        With OutMail
            'Unit's tech support inbox: admdssdcwts@dss.ca.gov, admdssdcfts@dss.ca.gov, or admdssdachts@dss.ca.gov
            .To = "admdssdachts@dss.ca.gov"
            .CC = ""
            .BCC = ""
            'Change report name below
            .Subject = Sheets("Report Form").Range("I11") & " Technical Support Inquiry"
            .Body = ""
             ActiveWorkbook.Save
            .Attachments.Add ActiveWorkbook.FullName
            .Display   'or use .Send
        End With
        On Error GoTo 0
        Set OutMail = Nothing
        Set OutApp = Nothing
    End If
    Exit Sub
    
ErrorTech:
    ThisWorkbook.Save
    'Verify report name and tech support inbox 2 lines below
    MsgBox ("An ERROR has occurred because Microsoft Outlook or Outlook Express is not your default email system. Please email this file as an attachment and submit this report to CDSS using the information below:" & Chr(10) & Chr(10) & _
    "To: admdssdachts@dss.ca.gov" & Chr(10) & "Subject: " & Sheets("Report Form").Range("I11") & " Technical Support Inquiry")
    Exit Sub
    
ErrorData:
    ThisWorkbook.Save
    If NoErrors = False Then
        'Verify report name and tech support inbox 2 lines below
        MsgBox ("An ERROR has occurred because Microsoft Outlook or Outlook Express is not your default email system. Please email this file as an attachment and submit this report to CDSS using the information below:" & Chr(10) & Chr(10) & _
        "To: " & Sheets("Report Form").Range("F6") & Chr(10) & "Subject: " & Sheets("Report Form").Range("I11") & " Form or Instructions Inquiry")
    Else
        'Verify report name and tech support inbox 2 lines below
        MsgBox ("An ERROR has occurred because Microsoft Outlook or Outlook Express is not your default email system. Please email this file as an attachment and submit this report to CDSS using the information below:" & Chr(10) & Chr(10) & _
        "To: " & Sheets("Report Form").Range("F6") & Chr(10) & "Subject: " & Sheets("CDSS Only").Range("A59").Value)
    End If
    Exit Sub

End Sub







Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'RDAs DO NOT NEED TO CHANGE ANYTHING IN THIS CODE.
'Validations table and worksheet MUST be named 'Validations'
'Left column header of Validation Table MUST be 'Validation Rules'
'Right column header of Validation Table MUST be 'Validity'

Private Sub Worksheet_Activate()
ActiveSheet.Range("a1").Select
Application.EnableEvents = True
End Sub

Private Sub Worksheet_Deactivate()

Application.ScreenUpdating = False
 Sheets("Validations").Unprotect "ds"
    ActiveWorkbook.Worksheets("Validations").ListObjects("Validations").Range.AutoFilter Field:=4


    ActiveWorkbook.Worksheets("Validations").ListObjects("Validations").Sort. _
        SortFields.Clear
    ActiveWorkbook.Worksheets("Validations").ListObjects("Validations").Sort. _
        SortFields.Add2 Key:=Range("Validations[Cell]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortTextAsNumbers
    ActiveWorkbook.Worksheets("Validations").ListObjects("Validations").Sort. _
        SortFields.Add2 Key:=Range("Validations[Part]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Validations").ListObjects("Validations").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
     Sheets("Validations").Protect "ds"
     Application.ScreenUpdating = True
End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'RDAs DO NOT NEED TO CHANGE ANYTHING IN THIS CODE.

Private Sub Worksheet_Activate()
    ActiveSheet.Range("a1").Select
End Sub





Attribute VB_Name = "TechTeam"
'RDAs NEED TO CHANGE AREAS HIGHLIGHTED BY GREEN COMMENTS IN THIS CODE.

Sub FinalizeChanges()
Attribute FinalizeChanges.VB_ProcData.VB_Invoke_Func = "D\n14"
'
' Macro2 Macro
'
' Keyboard Shortcut: Ctrl+Shift+D
'
Dim ws As Worksheet
Dim FormVersion As String, ReportName As String, shtName As String, strFooter As String, strTopCorner As String
Dim answer

    If ActiveSheet.ProtectContents = True Then Exit Sub
    
    Application.ScreenUpdating = False
    
    Sheets("Report Form").Activate
    
    'Fix Report Name and effective date in the line below. Item 2E (Cell 8) should be relevant to current form (two lines below). Check email addresses three lines below.
    strTopCorner = "Effective with the April - June 2015 report quarter, this is the automated form for CDSS's SOC405X and SOC405XP reports (updated " & Format(Sheets("CDSS Only").Range("A57"), "MMMM DD, YYYY") & ").  Press tab to cycle through the cells that require data entry.  Automatically calculated cells will be skipped when tabbing through the form.  " & _
    "Questions about the form or instructions can be sent to " & _
    "Technical support questions can be sent to admDSSDCWTS@dss.ca.gov.  Report instructions can be found on the Quick Links worksheet."
    'E1 is the top left cell visible on the report form
    Sheets("Report Form").Range("E1").Value = strTopCorner
    For Each ws In ThisWorkbook.Sheets
        If ws.Name Like "CDSS*" Then
            shtName = ws.Name
            Sheets(shtName).Range("A57").Value = Now()
            GoTo LockReport
        End If
    Next ws
LockReport:
    For Each ws In ThisWorkbook.Sheets
        If Left(ws.Name, 5) = "Sheet" Then ws.Visible = xlSheetVeryHidden
        ws.Activate
        ws.Protect "ds"
        ActiveWindow.DisplayGridlines = False
        ActiveWindow.DisplayHeadings = False
    Next ws
    Sheets("CDSS Only").Visible = xlSheetHidden
    Sheets("Report Form").Activate
    Application.PrintCommunication = True
    ActiveWindow.View = xlNormalView
    ActiveWindow.FreezePanes = False
    'E1 is the top left cell visible on the report form
    Application.GoTo Reference:=Range("e1"), Scroll:=True
    With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 2
    End With
    ActiveWindow.FreezePanes = True: Application.EnableEvents = True: Application.ScreenUpdating = True
    ThisWorkbook.Protect "ds", True
    answer = MsgBox("Would you like to refresh the form?", vbYesNo)
    If answer = vbYes Then Call Refresh.Refresh
    ThisWorkbook.Save
    MsgBox ("Automated form ready for analyst testing.")

End Sub

Sub DeveloperMode()
Attribute DeveloperMode.VB_ProcData.VB_Invoke_Func = "A\n14"
'
' TechUnitQuickUnlock Macro
'
' Keyboard Shortcut: Ctrl+Shift+A
'
Dim answer
Dim ws As Worksheet

    ThisWorkbook.Protect "ds", False
    Application.ScreenUpdating = False
    If Environ("USERNAME") = "ctai" Or Environ("USERNAME") = "etuisku" Or Environ("USERNAME") = "hahmed" Or Environ("USERNAME") = "kchang" Then GoTo Authorized
EnterPassword:
    answer = InputBox("Enter Data Automation Team Password:")
    If answer = "ds" Then
        GoTo Authorized
    Else
        answer = MsgBox("Incorrect password. Would you like to try again?", vbYesNo)
        If answer = vbYes Then
            GoTo EnterPassword
        Else
            Exit Sub
        End If
    End If
Authorized:
    For Each ws In ThisWorkbook.Sheets
        ws.Visible = xlSheetVisible
        ws.Activate
        ws.Unprotect "ds"
        ActiveWindow.DisplayGridlines = True
        ActiveWindow.DisplayHeadings = True
        ActiveWindow.DisplayWorkbookTabs = True
    Next ws
    Application.EnableEvents = False
    Sheets("Report Form").Activate
    'E1 is the top left cell visible on the report form
    Application.GoTo Reference:=Range("e1"), Scroll:=True
    Application.ScreenUpdating = True
    MsgBox ("Automated Form placed into edit mode.")
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'RDAs NEED TO CHANGE AREAS HIGHLIGHTED BY GREEN COMMENTS IN THIS CODE.

Private Sub Workbook_Open()
    Application.Calculation = xlCalculationAutomatic
    ThisWorkbook.UpdateLinks = xlUpdateLinksNever
    
    Application.EnableEvents = True
    ActiveWindow.DisplayHeadings = False
    ActiveWindow.DisplayWorkbookTabs = True
    'E1 is the top most cell of the report form sheet
    Application.GoTo Reference:=Range("E1"), Scroll:=True
End Sub

Private Sub Workbook_Activate()
    'Application.CellDragAndDrop = False
    Application.CutCopyMode = False
    Application.EnableAutoComplete = False
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Application.EnableAutoComplete = True
    Application.CellDragAndDrop = True
End Sub


Attribute VB_Name = "Tools"
'This module is used for initial development of the automated form. The RDA MAY need to modify it.

Option Private Module

Sub LinkBackPage()
'THIS SUBROUTINE WILL NEED ADDITIONAL MODIFICATION FOR REPORTS WITH MULTIPLE ROWS ON THE CDSS ONLY SHEET!
Dim FindCell, CellCount As Long, x As Long

    Application.ScreenUpdating = False

    Sheets("CDSS Only").Activate
    'There are 64 cells in this report
    For x = 1 To 64
        Sheets("Report Form").Activate
        'This report has multiple columns of data cells. The cell numbers are located in Columns J, L, N, P, and R
        With Range("J:J")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
        '''If the report only has one column of data cells, the RDA can hide the sections below until the next set of '''
        If FindCell Is Nothing Then
            With Range("L:L")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("N:N")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("P:P")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("R:R")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        strAddress = Cells(FindCell.Row, FindCell.Column + 1).Address
        Sheets("CDSS Only").Activate
        '5 indicates the row that the actual cell number is found in
        Cells(5, (1 + x)).Formula = "=if('Report Form'!" & strAddress & "=" & Chr(34) & Chr(34) & "," & Chr(34) & "BLANK" & Chr(34) & ",'Report Form'!" & strAddress & ")"
    Next x
    Application.ScreenUpdating = True

End Sub

Sub InputMessage_Form()

Dim cellvalue As String, strAddress As String, strMsg As String
Dim FindAddress

    Application.ScreenUpdating = False
    Sheets("Sheet1").Activate

    'This report has 64 cells
    For Each cell In Range("A1:A300")                                                                                             'CHANGE
        cell.Select
        x = cell.Value
        'Input messages are in Column 4 of "Sheet1"
        strMsg = Cells(cell.Row, 5)
        Sheets("Report Form").Activate
        'This report has multiple columns of data cells. The cell numbers are located in Columns J, L, N, P, and R
        With Range("J:J")
            Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        End With
        '''If the report only has one column of data cells, the RDA can hide the sections below until the next set of '''
        If FindCell Is Nothing Then
            With Range("L:L")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("N:N")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("P:P")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        If FindCell Is Nothing Then
            With Range("R:R")
                Set FindCell = .Find(What:=x, LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
            End With
        End If
        FindAddress = FindCell.Address
        Cells(FindCell.Row, FindCell.Column + 1).Select
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "Cell " & cell.Value
            .ErrorTitle = ""
            .InputMessage = strMsg
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = False
        End With
        Sheets("Sheet1").Activate
    Next cell

End Sub

Sub InputMessage_Validations()

Dim cellvalue As String, strAddress As String, strMsg As String
Dim LastRow As Long

    Application.ScreenUpdating = False
    LastRow = Range("D20").End(xlDown).Row
    For Each cell In Range(Cells(21, 5), Cells(LastRow, 5))
        cell.Select
        strMsg = Cells(cell.Row, 4).Value
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
            :=xlBetween
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = strMsg
            .ErrorMessage = ""
            .ShowInput = False                           'MAKE FALSE FOR FINAL VERSION
            .ShowError = False
        End With
    Next cell

End Sub





INQUEST-PP=macro
