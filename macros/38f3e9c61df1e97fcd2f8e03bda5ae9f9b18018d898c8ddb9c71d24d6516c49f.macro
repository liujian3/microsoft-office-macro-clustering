Attribute VB_Name = "Edit"
Option Explicit
'*********************
' CONSTANTS
'*********************
Public Const RDP_EDIT_TITLE = "Fluency Dispatch Edit"
'Public Const LOCKPASS = "RDP123RDP123" 'Password to unlock document if mbProtect = True.
'*********************
' ENUMS
'*********************
Public Enum RDPAuditCode
    rdpAuditGeneral
    rdpAuditImportedJob
    rdpAuditImportedJobEdit
    rdpAuditImportRejectedJobEditLocked
    rdpAuditImportRejectedJobNewerVersionExists
    rdpAuditJobNote
    rdpAuditRoutingNoRulesMatched
    rdpAuditRoutingExcludedByRule
    rdpAuditRoutingUsingDefaultRule
    rdpAuditRoutingRuleApplied
    rdpAuditExportExcludedByRule
    rdpAuditExportedJob
    rdpAuditPrinted
    rdpAuditPrintingFailed
    rdpAuditFaxCreateFailed
    rdpAuditFaxSubmitted
    rdpAuditFaxSubmitFailed
    rdpAuditFaxJobCompleted
    rdpAuditFaxJobFailed
    rdpAuditFaxJobFailedPrintSubmitted
    rdpAuditUploadJobStatus
    rdpAuditJobArchivedDocument
    rdpAuditJobExtracted
    rdpAuditUserViewedRTF
    rdpAuditUserViewedXML
    rdpAuditUserPrinted
    rdpAuditUserFaxedOnDemand
    rdpAuditUserEdited
    rdpAuditUserOpenedForEdit
    rdpAuditUserDeletedJob
    rdpAuditUserPrintStatusReset
    rdpAuditUserExportStatusReset
    rdpAuditUserExportStatusSetOriginal
    rdpAuditUserBatchPrintInitiated
    rdpAuditUserRemovedJobFromQueue
    rdpAuditUserResubmittedJobToQueue
    rdpAuditUserClearedQAStatus
    rdpAuditUserCanceledEdit
    rdpAuditUserMatchedADT
    rdpAuditUserClearedJobNote
End Enum
'*********************
' PUBLIC DATA MEMBERS
'*********************
Public gbNormalExit As Boolean 'False if edit has been cancelled by closing Word w/control box.
'Call the "RDP.Edit.AllowPrint" macro to enable printing.
Public gbAllowPrint As Boolean 'False by default which does not allow printing from edit module.
'*********************
' PRIVATE DATA MEMBERS
'*********************
Private moWord As New EventClass
Private moRDPEdit As Object 'RDP.Edit
Private mstrSQLServer As String
Private mstrXMLDataFilePath As String
Private mstrEditUser As String
Private mstrUserListCompanyId As String
Private mbShowBookmarks As Boolean
Private mbTesting As Boolean
Private mbDebug As Boolean
Private mbRepaginateOnPrint As Boolean
Private mlngSessionTimeout As Long
Private mbWordCreateBackup As Boolean
Private mbWordShowBookmarks As Boolean

' EXECUTE THIS MACRO TO INITIALIZE A LOADED DOCUMENT FOR TESTING ADT LOOKUP.
Private Sub ADTInitTest()
    mbTesting = True
    InitSettings "127.0.0.1", True, False, ActiveDocument.Path & Application.PathSeparator & Replace(LCase$(ActiveDocument.Name), ".rtf", ".xml"), "derek", mlngSessionTimeout
    InitEdit
End Sub

' FIRST, THIS MACRO IS CALLED BY RDP/RDV TO INITIALIZE VARIABLES AND SETTINGS.
Public Sub InitSettings(ByVal strSQLServer As String, ByVal bShowBookmarks As Boolean, _
 ByVal bDebug As Boolean, ByVal strXMLDataFilePath As String, ByVal strEditUser As String, _
 ByVal lngSessionTimeout As Long)
    On Error Resume Next
    mstrSQLServer = strSQLServer
    mbShowBookmarks = bShowBookmarks
    mbDebug = bDebug
    mstrXMLDataFilePath = strXMLDataFilePath
    mstrEditUser = strEditUser
    mlngSessionTimeout = lngSessionTimeout
End Sub

' SECOND, THIS MACRO IS CALLED BY RDP/RDV TO INITIALIZE EDITING OBJECTS.
Public Sub InitEdit()
    On Error Resume Next
    
    'Setup Word application WithEvents.
    Set moWord.App = Word.Application
    
    If Len(mstrSQLServer) = 0 Then  ' FATAL
        MsgBox "SQLServer name or IP not specified! Please contact the vendor for assistance.", vbExclamation, RDP_EDIT_TITLE
        Application.Quit wdDoNotSaveChanges
    ElseIf Len(mstrEditUser) = 0 Then ' FATAL
        MsgBox "User name not specified! Please contact the vendor for assistance.", vbExclamation, RDP_EDIT_TITLE
        Application.Quit wdDoNotSaveChanges
    Else
        If moRDPEdit Is Nothing Then
            'Set moRDPEdit = New RDP.Edit
            #If VBA7 And Win64 Then
                Set moRDPEdit = CreateObject("RDPx64.Edit")
            #Else
                Set moRDPEdit = CreateObject("RDP.Edit")
            #End If
        End If
        If Err.Number <> 0 Then
            Debug.Print Err.Description
            MsgBox "Unable to load RDP.dll, make sure this dll is in the application path and properly registered. Click Start->Run and type: regsvr32 RDP.dll to register this component. " & Err.Description, vbCritical + vbApplicationModal, RDP_EDIT_TITLE
            Application.Quit wdDoNotSaveChanges
            Exit Sub
        End If
        Debug.Print moRDPEdit.LastStatus
        
        'Load the ADT UserListCompanyID.
        GetADTCompany
        
        With moRDPEdit
            If Not .LoadJobInfo(mstrSQLServer, mstrXMLDataFilePath, mstrEditUser, Application) Then
                MsgBox "Unable to load job," & .LastStatus, vbCritical + vbApplicationModal, RDP_EDIT_TITLE
                Set moRDPEdit = Nothing
                Application.Quit wdDoNotSaveChanges
                Exit Sub
            End If
            If mbTesting Then
                If Not .LockEdit() Then
                    MsgBox "Unable to lock edit, " & .LastStatus, vbExclamation
                End If
            End If
        End With
    End If
    'Debug.Print moRDPEdit.LastStatus
    
    'Create an AutoClose macro to prevent prompt to save file on close.
    CreateAutoCloseMacro
    If mbShowBookmarks = True Then
        'Remap the backspace key.
        DeactivateBackspace
    End If
    'Disable context menu.
    
    'Store current Word settings.
    mbWordShowBookmarks = ActiveWindow.View.ShowBookmarks
    mbWordCreateBackup = Options.CreateBackup
    
    ActiveWindow.View.ShowBookmarks = mbShowBookmarks
    With Options
        .CreateBackup = False
    End With
    
    'Automatically cancel the edit and close Word if 45 minutes elapses.
    'No dialog or prompt - time limit expired, period.
    EstablishTimeout
    
    If mbDebug Then MsgBox "[Word " & Application.Version & "], SQLServer=" & mstrSQLServer & ", ShowBookmarks = " & mbShowBookmarks & ", DataFile = " & mstrXMLDataFilePath, RDP_EDIT_TITLE
    'Reset saved status so Word doesn't think the user changed anything.
    ActiveDocument.Saved = True
    If Err.Number > 0 Then Err.Clear
End Sub

' THIS METHOD IS CALLED FROM THE WORD RDP MENU TO SAVE A JOB EDIT.
Public Sub SaveAndExit()
    On Error GoTo Err_Handler
    If Not moRDPEdit Is Nothing Then
        ' WORD WILL BE CLOSED
        gbNormalExit = True
        If Not moRDPEdit.SaveJob(Application.ActiveWindow.Caption & " - " & Application.Caption) Then
            ' WORD WILL BE REOPENED
            gbNormalExit = False
        End If
    Else
        MsgBox "Editing is not properly intialized!", vbExclamation
    End If
    Exit Sub
    
Err_Handler:
    MsgBox "Unable to load job information!" & vbCrLf & Err.Description, vbCritical, RDP_EDIT_TITLE
    Debug.Print "Error (Edit.SaveAndExit): " & Err.Description
    Err.Clear
End Sub

' THIS METHOD INVOKES THE RDP.DLL AND LOADS THE JOB INFORMATION FORM.
Sub EditJobInformation()
    On Error GoTo Err_Handler
    
    If Application.Documents.Count < 1 Then
        Err.Raise -99, , "There are no active documents."
        Exit Sub
    End If
    
    If Len(mstrXMLDataFilePath) = 0 Then
        Err.Raise -99, , "Empty data file path."
        Exit Sub
    End If
    
    If moRDPEdit Is Nothing Then
        Exit Sub
    End If
    
    DoEvents
    If LCase$(Right$(ActiveDocument.Name, 3)) = "rtf" Then
        If Not moRDPEdit.ShowJobInfo() Then
            MsgBox "Failed to load job information, " & moRDPEdit.LastStatus, vbExclamation, RDP_EDIT_TITLE
        End If
    Else
        Err.Raise -99, , "Unknown document format - not a DEP document."
    End If
    Exit Sub

Err_Handler:
    MsgBox "Unable to load job information!" & vbCrLf & Err.Description, vbCritical, RDP_EDIT_TITLE
    Debug.Print "Error (Edit.EditJobInformation): " & Err.Description
    Err.Clear
End Sub

' THIS METHOD INVOKES THE RDP.DLL AND LOADS THE JOB NOTE FORM.
Sub JobNote()
    On Error Resume Next
    If Not moRDPEdit Is Nothing Then
        If Not moRDPEdit.ShowJobNote() Then
            MsgBox "Failed to display job note, " & moRDPEdit.LastStatus, vbExclamation, RDP_EDIT_TITLE
        End If
    End If
End Sub

' THIS METHOD IS AUTOMATICALLY CALLED BY WORD WHEN A DOCUMENT IS CLOSED.
Sub AutoClose()
    On Error Resume Next
    'Clear saved settings from old versions of edit.dot
    ResetWordSettings
    NormalTemplate.Save
    If Not ActiveDocument.Saved Then
        'No dialog here since the time limit has expired for this edit.
        'MsgBox "This document has been modified! All changes will be discarded?", vbInformation + vbOKOnly,  RDP_EDIT_TITLE
        ActiveDocument.Saved = True
    End If
    'Set moRDPEdit = Nothing
End Sub

' THIS METHOD IS AUTOMATICALLY CALLED BY WORD WHEN WORD IS CLOSED.
Sub AutoExit()
    On Error Resume Next
    Set moRDPEdit = Nothing
End Sub

' RESET WORD SETTINGS TO STANDARD DEFAULTS.
Private Function ResetWordSettings()
    On Error Resume Next
    ActiveWindow.View.ShowBookmarks = mbWordShowBookmarks
    'ActiveWindow.View.ShowHiddenText = False
    With Options
        .CreateBackup = mbWordCreateBackup
    End With
    Err.Clear
End Function

' THIS METHOD IS CALLED BY RDP/RDV WHEN A USER HAS PRINT RIGHTS FOR THIS JOB.
Sub AllowPrinting()
    On Error Resume Next
    'Document can be printed from within Word editing module.
    gbAllowPrint = True
End Sub

' THIS METHOD IS CALLED BY RDP/RDV WHEN THE RDP IS CONFIGURED TO REPAGINATE DOCUMENTS ON EDIT.
Sub RepaginateOnPrint()
    On Error Resume Next
    'Document should be repaginated upon printing.
    mbRepaginateOnPrint = True
End Sub

' THIS METHOD IS CALLED FROM THE WORD RDP MENU TO ADJUST PAGINATION FOR SIG BLOCK.
Sub RepaginateForSigBlock()
    On Error Resume Next
    'Called from RDP menu.
    AdjustSigBlockForPrint True
End Sub

' ONLY APPLIED TO WORD 97.
Sub CreateAutoCloseMacro()
    On Error Resume Next
    Dim objModule As Object 'VBComponent
    If Left$(Application.Version, 1) = "8" Then
        'Remove all modules - for Word 97 only.
        For Each objModule In ActiveDocument.VBProject.VBComponents
            'Debug.Print objModule.Name
            If objModule.Name <> "ThisDocument" Then
                ActiveDocument.VBProject.VBComponents.Remove objModule
            End If
            DoEvents
        Next objModule
        Set objModule = ActiveDocument.VBProject.VBComponents.Add(1)
        objModule.CodeModule.AddFromString ("Sub AutoClose" & vbCrLf & _
                                          "ActiveDocument.Saved = True" & vbCrLf & _
                                          "End Sub")
        Set objModule = Nothing
    End If
End Sub

' THIS METHOD IS USED TO DISABLE THE BACKSPACE AND INSERT KEYS.
' THIS IS DONE TO PREVENT A USER FROM INADVERTANTLY DELETING A BOOKMARK.
Sub DeactivateBackspace()
    On Error Resume Next
    Application.CustomizationContext = ActiveDocument
    KeyBindings.Add KeyCategory:=wdKeyCategoryMacro, Command:="TypeBackspace", KeyCode:=vbKeyBack
    'Also disable the overtype (insert) key.
    'MsgBox FindKey(BuildKeyCode(Arg1:=wdKeyInsert)).Command
    KeyBindings.Add KeyCategory:=wdKeyCategoryDisable, Command:="", KeyCode:=vbKeyInsert
End Sub

' THIS METHOD IS CALLED FROM THE WORD RDP MENU TO CANCEL EDITING.
Public Sub CancelEdit()
    On Error Resume Next
    If Application.Documents.Count > 0 Then
        If Not ActiveDocument.Saved Then
            If MsgBox("This document has been modified. Are you sure you want to cancel and lose all changes?", vbYesNo + vbExclamation, RDP_EDIT_TITLE & " - Cancel Edit") = vbNo Then
                Exit Sub
            End If
        End If
        AuditCancelEdit
        gbNormalExit = True
    End If
    ResetWordSettings
    Application.Quit wdDoNotSaveChanges
End Sub

' THIS METHOD IS CALLED BY THE TIMER IF THE ALLOTED TIMEOUT EXPIRES DURING AN EDIT.
Public Sub CancelExpiredEdit()
    On Error Resume Next
    AuditCancelEdit True
    gbNormalExit = True
    ResetWordSettings
    Application.Quit wdDoNotSaveChanges
End Sub

' THIS METHOD IS CALLED TO AUDIT THE JOB EDIT WAS CANCELED.
Public Sub AuditCancelEdit(Optional ByVal bExpired As Boolean = False)
    On Error Resume Next
    'bExpired indicates that the maximum edit time has elasped since the document was opened.
    If Not ActiveDocument.Saved Then ActiveDocument.Saved = True
    gbNormalExit = True
    If Not moRDPEdit Is Nothing Then
        If Not moRDPEdit.CancelEdit Then
            MsgBox "Failed to cancel edit lock, " & moRDPEdit.LastStatus, vbExclamation, RDP_EDIT_TITLE
        End If
    Else
        MsgBox "Unable to cancel lock for job, the edit object reference was lost!", vbExclamation
    End If
End Sub

' THIS METHOD IS USED TO WRITE TO THE AUDIT HISTORY.
Public Function AuditEvent(ByVal sDocumentName As String, ByVal iAuditCode As RDPAuditCode, ByVal sMsg As String) As Boolean
    On Error Resume Next
    If Not moRDPEdit Is Nothing Then
        AuditEvent = moRDPEdit.AuditEvent(iAuditCode, sMsg)
        If AuditEvent = False Then
            MsgBox "Failed to write to audit history, " & moRDPEdit.LastStatus, vbExclamation, RDP_EDIT_TITLE
        End If
    End If
End Function

Public Sub ToggleBold()
    On Error Resume Next
    FormatSelection
End Sub

Public Sub ToggleItalic()
    On Error Resume Next
    FormatSelection 1
End Sub

Public Sub ToggleUnderline()
    On Error Resume Next
    FormatSelection 2
End Sub

Public Sub ToggleSuperscript()
    On Error Resume Next
    FormatSelection 3
End Sub

Public Sub ToggleSubscript()
    On Error Resume Next
    FormatSelection 4
End Sub

Public Sub ToggleStrikethrough()
    On Error Resume Next
    FormatSelection 5
End Sub

Public Sub InsertSpace()
    On Error Resume Next
    FormatSelection 6
End Sub

Public Sub DeleteCharacter()
    On Error Resume Next
    FormatSelection 7
End Sub

Public Sub InsertParagraph()
    On Error Resume Next
    FormatSelection 8
End Sub

Public Sub InsertHardPage()
    On Error Resume Next
    FormatSelection 9
End Sub

Public Sub TypeBackSpace()
    On Error Resume Next
    FormatSelection 10
End Sub

Public Sub InsertText()
    On Error Resume Next
    FormatSelection 11
End Sub

Public Sub DeleteWord()
    On Error Resume Next
    FormatSelection 14
End Sub

Private Sub FormatSelection(Optional ByVal iFormat As Integer = 0)
    'Function used to perform some formatting when the document is otherwise locked.
    On Error GoTo Err_FormatSelection
    Dim sText As String
    
    If Application.Documents.Count < 1 Then
        MsgBox "There are no active documents!", vbExclamation, RDP_EDIT_TITLE
        Exit Sub
    End If
    
'    If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'        ActiveDocument.Unprotect LOCKPASS
'    End If
    
    Select Case iFormat
        Case 0 'Bold.
            If Selection.Range.Bold Then
                Selection.Range.Bold = False
            Else
                Selection.Range.Bold = True
            End If
        Case 1 'Italic.
            If Selection.Range.Italic Then
                Selection.Range.Italic = False
            Else
                Selection.Range.Italic = True
            End If
        Case 2 'Underline.
            If Selection.Range.Underline Then
                Selection.Range.Underline = False
            Else
                Selection.Range.Underline = True
            End If
        Case 3 'Superscript.
            If Selection.Range.Font.Superscript Then
                Selection.Range.Font.Superscript = False
            Else
                Selection.Range.Font.Superscript = True
            End If
        Case 4 'Subscript.
            If Selection.Range.Font.Subscript Then
                Selection.Range.Font.Subscript = False
            Else
                Selection.Range.Font.Subscript = True
            End If
        Case 5 'Strikethrough.
            If Selection.Range.Font.StrikeThrough Then
                Selection.Range.Font.StrikeThrough = False
            Else
                Selection.Range.Font.StrikeThrough = True
            End If
        Case 6 'Insert space.
            Selection.TypeText " "
        Case 7 'Delete character.
            If Selection.Bookmarks.Count > 1 Then
                MsgBox "You have selected text spanning multiple sections for deletion. Please modify your selection to only include one section to prevent accidental deletion of a document section. Thank you.", vbInformation, "Multiple Section Deletion"
                Exit Sub
            End If
            sText = GetBookmarkName
            'Make sure the cursor is not in a bookmark.
            If Len(sText) < 1 Then
                If Selection.Bookmarks.Count < 1 Then
                    Selection.Delete unit:=wdCharacter, Count:=1
                Else
                    MsgBox "You have selected text that includes a section and template data. Please modify your selection to only include the section or the template data to prevent accidental deletion of a document section. Thank you.", vbInformation, "Section/Template Data Deletion"
                    Exit Sub
                End If
            Else 'In a bookmarked section.
                If Len(ActiveDocument.Bookmarks(sText).Range.Text) > 1 Then
                    Selection.Delete unit:=wdCharacter, Count:=1
                    If GetBookmarkName <> sText Then 'Bookmark could be gone.
                        Selection.MoveLeft unit:=wdCharacter, Count:=1
                        If GetBookmarkName <> sText Then 'Bookmark is gone.
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                            If ActiveDocument.Undo Then
                                MsgBox "Deleting this text could remove a critical bookmarked section from this document. Please add text to this section before removing this selection.", vbInformation, "Delete Pressed"
                            Else
                                MsgBox "Deleting this text removed a critical bookmarked section from this document and the action could not be undone. Proceeding with this edit could cause this document to be out of sync. If this document is pending upload after editing then you should cancel the edit and start over.", vbExclamation, "Delete Pressed"
                            End If
                        Else
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                        End If
                    End If
                Else
                    MsgBox "Deleting this text could remove a critical bookmarked section. Please type the text to replace this section before removing this selection. Thank you.", vbInformation, "Delete Pressed"
                End If
            End If
        Case 8 'Insert Paragraph.
            Selection.TypeParagraph
        Case 9 'Insert hard page break.
            Selection.InsertBreak Type:=wdPageBreak
        Case 10 'Backspace.
            If Selection.Bookmarks.Count > 1 Then
                MsgBox "You have selected text spanning multiple sections for deletion. Please modify your selection to only include one section to prevent accidental deletion of a document section. Thank you.", vbInformation, "Multiple Section Deletion"
                Exit Sub
            End If
            Selection.MoveLeft unit:=wdCharacter, Count:=1
            sText = GetBookmarkName
            Selection.MoveRight unit:=wdCharacter, Count:=1
            If Len(sText) > 0 Then 'Character in a bookmarked section.
                If Len(ActiveDocument.Bookmarks(sText).Range.Text) > 1 Then
                    'If Len(Selection.Range.Text) > 1 Then
                    '    MsgBox "Please delete a single character at a time to prevent accidental bookmark deletion. Thank you.", vbInformation, "Backspace Pressed"
                    'Else
                        Selection.TypeBackSpace
                        If GetBookmarkName <> sText Then 'Bookmark could be gone.
                            Selection.MoveLeft unit:=wdCharacter, Count:=1
                            If GetBookmarkName <> sText Then 'Bookmark is gone.
                                Selection.MoveRight unit:=wdCharacter, Count:=1
                                If ActiveDocument.Undo Then
                                    MsgBox "Deleting this text could remove a critical bookmarked section from this document. Please add text to this section before removing this selection.", vbInformation, "Backspace Pressed"
                                Else
                                    MsgBox "Deleting this text removed a critical bookmarked section from this document and the action could not be undone. Proceeding with this edit could cause this document to be out of sync. If this document is pending upload after editing then you should cancel the edit and start over.", vbExclamation, "Backspace Pressed"
                                End If
                            Else
                                Selection.MoveRight unit:=wdCharacter, Count:=1
                            End If
                        End If
                    'End If
                Else
                    MsgBox "Deleting this text could remove a critical bookmarked section. Please type the text to replace this section before removing this selection. Thank you.", vbInformation, "Backspace Pressed"
                End If
            Else 'Character not in a bookmarked section.
                Selection.TypeBackSpace
            End If
        Case 11
            sText = InputBox$("Enter text to insert.", "Insert Text")
            If Len(sText) > 0 Then
                Selection.TypeText sText
            End If
        Case 12 'Undo.
            ActiveDocument.Undo
        Case 13 'Redo
            ActiveDocument.Redo
        Case 14 'Delete word.
            If Selection.Bookmarks.Count > 1 Then
                MsgBox "You have selected text spanning multiple sections for deletion. Please modify your selection to only include one section to prevent accidental deletion of a document section. Thank you.", vbInformation, "Multiple Section Deletion"
                Exit Sub
            End If
            sText = GetBookmarkName
            If Len(sText) < 1 Then 'Make sure the cursor is not in a bookmark.
                If Selection.Bookmarks.Count < 1 Then
                    Selection.Delete unit:=wdWord, Count:=1
                Else
                    MsgBox "You have selected text that includes a section and template data. Please modify your selection to only include the section or the template data to prevent accidental deletion of a document section. Thank you.", vbInformation, "Section/Template Data Deletion"
                    Exit Sub
                End If
            Else 'In a bookmarked section.
                'If Len(Selection.Range.Text) > 1 Then
                '    MsgBox "Please delete a single word at a time to prevent accidental bookmark deletion. Thank you.", vbInformation, "Delete Word Pressed"
                'Else
                    Selection.Delete unit:=wdWord, Count:=1
                    If GetBookmarkName <> sText Then
                        Selection.MoveLeft unit:=wdCharacter, Count:=1
                        If GetBookmarkName <> sText Then
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                            If ActiveDocument.Undo Then
                                MsgBox "Deleting this text could remove a critical bookmarked section from this document. Please add text to this section before removing this selection.", vbInformation, "Delete Word Pressed"
                            Else
                                MsgBox "Deleting this text removed a critical bookmarked section from this document and the action could not be undone. Proceeding with this edit could cause this document to be out of sync. If this document is pending upload after editing then you should cancel the edit and start over.", vbExclamation, "Delete Word Pressed"
                            End If
                        Else
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                        End If
                    End If
                'End If
            End If
    End Select
    
Exit_FormatSelection:
    On Error Resume Next
'    If mbProtect And ActiveDocument.ProtectionType <> wdAllowOnlyComments Then
'        ActiveDocument.Protect wdAllowOnlyComments, , LOCKPASS
'    End If
    Exit Sub
    
Err_FormatSelection:
    MsgBox "Error in format selection - FormatSelection(): #" & Err.Number & " - " & Err.Description, vbCritical + vbApplicationModal, RDP_EDIT_TITLE & " - Format Selection"
    Resume Exit_FormatSelection
    
End Sub
'Override the default functionality(ONLY APPLIED TO WORD 2010.).
Sub printpreviewandprint()
    FilePrint
End Sub
'Override the default functionality.
'Word 2010 does not fire the FilePrint() event.
Sub FilePrint()
    On Error Resume Next
    If Not gbAllowPrint Then
        MsgBox "You are not authorized to print this document locally!", vbExclamation, , RDP_EDIT_TITLE & " - Document Security"
    Else
        If WordCustomPropExists("PrintedByUser") Then
            ActiveDocument.CustomDocumentProperties("PrintedByUser") = mstrEditUser & " "
            UpdateFields
        End If
        If mbRepaginateOnPrint Then
            AdjustSigBlockForPrint
        End If
        If Application.Dialogs(wdDialogFilePrint).Show(60000) = -1 Then 'OK was pressed.
            'Word 97 does not fire the App_DocumentBeforePrint() event.
            'AuditEvent ActiveDocument.Name, rdpAuditUserPrinted, "printed to [" & Application.ActivePrinter & "] from edit module"
            AuditEvent ActiveDocument.Name, rdpAuditUserPrinted, "[" & Application.ActivePrinter & "] from edit module"
        End If
        If WordCustomPropExists("PrintedByUser") Then
            ActiveDocument.CustomDocumentProperties("PrintedByUser") = " "
            UpdateFields
        End If
    End If
End Sub

'Override the default functionality.
Sub FileSave()
    On Error Resume Next
    If Application.Documents.Count > 0 Then
        If Not ActiveDocument.Saved Then ActiveDocument.Saved = True
    End If
    MsgBox "You are not authorized to save this document locally!", vbExclamation, , RDP_EDIT_TITLE & " - Document Security"
End Sub

'Override the default functionality.
Sub FileSaveAs()
    On Error Resume Next
    If Application.Documents.Count > 0 Then
        If Not ActiveDocument.Saved Then ActiveDocument.Saved = True
    End If
    MsgBox "You are not authorized to save this document locally!", vbExclamation, , RDP_EDIT_TITLE & " - Document Security"
End Sub

'Override the default functionality.
Sub DocClose()
' DocClose Macro
' Prompts to save the document and then closes the active window
    'WordBasic.DocClose
    If Application.Documents.Count > 0 Then
        If Not ActiveDocument.Saved Then ActiveDocument.Saved = True
    End If
End Sub

'Override the default functionality.
Sub ToolsEnvelopesAndLabels()
    On Error GoTo Err_Handler
    Dim dlg As Word.Dialog
    
    If ActiveDocument.Bookmarks.Exists("ADDRESS") Then
        ActiveDocument.Bookmarks("ADDRESS").Select
    ElseIf ActiveDocument.Bookmarks.Exists("ADDRESSEE") Then
        ActiveDocument.Bookmarks("ADDRESSEE").Select
    End If
    
    Set dlg = Dialogs(wdDialogToolsEnvelopesAndLabels)
    With dlg
         .DefaultTab = wdDialogToolsEnvelopesAndLabelsTabEnvelopes
        .ExtractAddress = True
        .Show (0)
    End With
    
Exit_Handler:
    Selection.Collapse wdCollapseStart
    Set dlg = Nothing
    Exit Sub
    
Err_Handler:
    MsgBox "Error displaying Envelopes and Labels dialog, " & Err.Description, vbExclamation
    Resume Exit_Handler
    
End Sub

Public Function GetBookmarkName() As String
    On Error Resume Next
    'If the current selection is within a valid bookmark then return the bookmark name.
    'If Selection.BookmarkID <> 0 Then
'        If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'            ActiveDocument.Unprotect LOCKPASS
'        End If
        
        'Trap an error where BookmarkID appears to be valid but isn't.
        GetBookmarkName = Selection.Bookmarks.Item(1).Name
        If Err.Number <> 0 Then
            Err.Clear
            GetBookmarkName = ""
        End If
    'End If
End Function

Sub MoveSectionUp()
    On Error Resume Next
    Dim sCurrent As String
    Dim sPrevious As String
    Dim bFound As Boolean
    
    'If the current selection is within a valid bookmark then attempt to move it.
    If Selection.BookmarkID <> 0 Then
'        If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'            ActiveDocument.Unprotect LOCKPASS
'        End If
        
        'Trap an error where BookmarkID appears to be valid but isn't.
        sCurrent = Selection.Bookmarks(1).Name
        If Err.Number <> 0 Then
            Err.Clear
            Beep
            MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, , RDP_EDIT_TITLE & " - Move Section Up"
        Else
            ActiveDocument.Bookmarks(sCurrent).Select
            ActiveDocument.Bookmarks(sCurrent).Range.Collapse wdCollapseStart
            Do While Selection.MoveLeft(unit:=wdCharacter, Count:=1) > 0
                If GetBookmarkName <> sCurrent Then
                    Exit Do
                End If
                DoEvents
            Loop
            Do While Selection.MoveLeft(unit:=wdCharacter, Count:=1) > 0
                If Selection.BookmarkID <> 0 Then
                    sPrevious = GetBookmarkName
                    If Len(sPrevious) > 0 Then
                        bFound = True
                        Exit Do
                    End If
                End If
                DoEvents
            Loop
            If bFound Then
                Do While Selection.MoveLeft(unit:=wdCharacter, Count:=1) > 0
                    If sPrevious <> GetBookmarkName Then
                        bFound = True
                        Exit Do
                    End If
                    DoEvents
                Loop
            End If
            If bFound Then
                ActiveDocument.Bookmarks(sCurrent).Range.Cut
                Selection.Paste
                ActiveDocument.Bookmarks(sCurrent).Range.Select
            Else
                Beep
                MsgBox "A previous bookmarked section was not found in this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Up"
            End If
        End If
'        If mbProtect And ActiveDocument.ProtectionType <> wdAllowOnlyComments Then
'            ActiveDocument.Protect wdAllowOnlyComments, , LOCKPASS
'        End If
    Else
        MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Up"
    End If
End Sub

Sub MoveSectionDown()
    On Error Resume Next
    Dim sCurrent As String
    Dim sNext As String
    Dim bFound As Boolean
    
    'If the current selection is within a valid bookmark then attempt to move it.
    If Selection.BookmarkID <> 0 Then
'        If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'            ActiveDocument.Unprotect LOCKPASS
'        End If
        
        'Trap an error where BookmarkID appears to be valid but isn't.
        sCurrent = Selection.Bookmarks(1).Name
        If Err.Number <> 0 Then
            Err.Clear
            Beep
            MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Down"
        Else
            ActiveDocument.Bookmarks(sCurrent).Select
            ActiveDocument.Bookmarks(sCurrent).Range.Collapse wdCollapseEnd
            Do While Selection.MoveRight(unit:=wdCharacter, Count:=1) > 0
                If GetBookmarkName <> sCurrent Then
                    Exit Do
                End If
                DoEvents
            Loop
            Do While Selection.MoveRight(unit:=wdCharacter, Count:=1) > 0
                If Selection.BookmarkID <> 0 Then
                    sNext = GetBookmarkName
                    If Len(sNext) > 0 Then
                        bFound = True
                        Exit Do
                    End If
                End If
                DoEvents
            Loop
            If bFound Then
                Do While Selection.MoveRight(unit:=wdCharacter, Count:=1) > 0
                    If sNext <> GetBookmarkName Then
                        bFound = True
                        Exit Do
                    End If
                    DoEvents
                Loop
            End If
            If bFound Then
                'Now move down and home to get to the next line past the previous.
                Selection.MoveDown unit:=wdLine, Count:=1
                Selection.HomeKey unit:=wdLine
                Do While Len(GetBookmarkName) > 0
                    If Selection.MoveLeft(unit:=wdCharacter, Count:=1) < 1 Then
                        Exit Do
                    End If
                    DoEvents
                Loop
                ActiveDocument.Bookmarks(sCurrent).Range.Cut
                Selection.Paste
                ActiveDocument.Bookmarks(sCurrent).Range.Select
            Else
                Beep
                MsgBox "No bookmarked sections were found below this section.", vbInformation, RDP_EDIT_TITLE & " - Move Section Down"
            End If
        End If
'        If mbProtect And ActiveDocument.ProtectionType <> wdAllowOnlyComments Then
'            ActiveDocument.Protect wdAllowOnlyComments, , LOCKPASS
'        End If
    Else
        MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Down"
    End If
End Sub

Sub SectionCut()
    On Error Resume Next
    Dim sCurrent As String
    
    'If the current selection is within a valid bookmark then attempt to cut it.
    If Selection.BookmarkID <> 0 Then
'        If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'            ActiveDocument.Unprotect LOCKPASS
'        End If
        
        'Trap an error where BookmarkID appears to be valid but isn't.
        sCurrent = Selection.Bookmarks(1).Name
        If Err.Number <> 0 Then
            Err.Clear
            Beep
            MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Up"
        Else
            ActiveDocument.Bookmarks(sCurrent).Select
            Selection.Cut
        End If
        
'        If mbProtect And ActiveDocument.ProtectionType <> wdAllowOnlyComments Then
'            ActiveDocument.Protect wdAllowOnlyComments, , LOCKPASS
'        End If
    Else
        MsgBox "The cursor is not within a bookmarked section of this document.", vbInformation, RDP_EDIT_TITLE & " - Move Section Up"
    End If
End Sub

Sub SectionPaste()
    On Error Resume Next
    Dim sCurrent As String
    
    'If the current selection is within a valid bookmark then attempt to cut it.
    If Selection.BookmarkID = 0 Then
'        If ActiveDocument.ProtectionType = wdAllowOnlyComments Then
'            ActiveDocument.Unprotect LOCKPASS
'        End If
        Selection.Paste
'        If mbProtect And ActiveDocument.ProtectionType <> wdAllowOnlyComments Then
'            ActiveDocument.Protect wdAllowOnlyComments, , LOCKPASS
'        End If
    Else
        MsgBox "The cursor is within a bookmarked section which cannot have another section pasted within it.", vbInformation, RDP_EDIT_TITLE & " - Move Section Up"
    End If
End Sub

Sub SectionUndo()
    On Error Resume Next
    FormatSelection 12
End Sub

Sub SectionRedo()
    On Error Resume Next
    FormatSelection 13
End Sub

Sub BackspaceWord()
    On Error Resume Next
    Dim sText As String
    
    If Selection.Bookmarks.Count > 1 Then
        MsgBox "You have selected text spanning multiple sections for deletion. Please modify your selection to only include one section to prevent accidental deletion of a document section. Thank you.", vbInformation, RDP_EDIT_TITLE & " - Multiple Section Deletion"
        Exit Sub
    End If
    sText = GetBookmarkName
    If Len(sText) < 1 Then 'Make sure the cursor is not in a bookmark.
        Selection.MoveLeft unit:=wdCharacter, Count:=1
        sText = GetBookmarkName
        Selection.MoveRight unit:=wdCharacter, Count:=1
        If Len(sText) > 0 Then
            If Len(ActiveDocument.Bookmarks(sText).Range.Text) > 1 Then
                If Len(Selection.Range.Text) > 1 Then
                    MsgBox "Please delete a single word at a time to prevent accidental bookmark deletion. Thank you.", vbInformation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
                Else
                    Selection.Delete unit:=wdWord, Count:=-1
                    If GetBookmarkName <> sText Then
                        Selection.MoveLeft unit:=wdCharacter, Count:=1
                        If GetBookmarkName <> sText Then
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                            If ActiveDocument.Undo Then
                                MsgBox "Deleting this word could remove a critical bookmarked section from this document. Please add text to this section before removing this word.", vbInformation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
                            Else
                                MsgBox "Deleting this word removed a critical bookmarked section from this document and the action could not be undone. Proceeding with this edit could cause this document to be out of sync. If this document is pending upload after editing then you should cancel the edit and start over.", vbExclamation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
                            End If
                        Else
                            Selection.MoveRight unit:=wdCharacter, Count:=1
                        End If
                    End If
                End If
            Else
                MsgBox "Deleting this word could remove a critical bookmarked section. Please type the text to replace this section before removing this character. Thank you.", vbInformation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
            End If
        Else
            Selection.Delete unit:=wdWord, Count:=-1
        End If
    Else 'In a bookmarked section.
        If Len(Selection.Range.Text) > 1 Then
            MsgBox "Please delete a single word at a time to prevent accidental bookmark deletion. Thank you.", vbInformation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
        Else
            Selection.Delete unit:=wdWord, Count:=-1
            If GetBookmarkName <> sText Then
                Selection.MoveLeft unit:=wdCharacter, Count:=1
                If GetBookmarkName <> sText Then
                    Selection.MoveRight unit:=wdCharacter, Count:=1
                    If ActiveDocument.Undo Then
                        MsgBox "Deleting this word could remove a critical bookmarked section from this document. Please add text to this section before removing this word.", vbInformation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
                    Else
                        MsgBox "Deleting this word removed a critical bookmarked section from this document and the action could not be undone. Proceeding with this edit could cause this document to be out of sync. If this document is pending upload after editing then you should cancel the edit and start over.", vbExclamation, RDP_EDIT_TITLE & " - Backspace Word Pressed"
                    End If
                Else
                    Selection.MoveRight unit:=wdCharacter, Count:=1
                End If
            End If
        End If
    End If
End Sub

' THIS METHOD IS USED TO CHECK FOR THE EXISTANCE OF A CUSTOM DOCUMENT PROPERTY.
Public Function WordCustomPropExists(sFieldName As String) As Boolean
    On Error GoTo Err_WordCustomPropExists
    Dim sValue As String

    sValue = Trim$(ActiveDocument.CustomDocumentProperties(sFieldName).Value)
    WordCustomPropExists = True
    Exit Function

Err_WordCustomPropExists:
    WordCustomPropExists = False

End Function

' THIS METHOD IS CALLED FROM THE RDP MENU TO ALLOW PRINTING DOCUMENTS WITH COPY TEXT.
Public Sub PrintWithCopyText()
    On Error Resume Next
    Dim sText As String
    
    If Not gbAllowPrint Then
        MsgBox "You have not been granted privileges to print this document! Contact the vendor to obtain assistance.", vbExclamation, RDP_EDIT_TITLE
    Else
        If WordCustomPropExists("CopyText") Then
            sText = InputBox$("Type the number (1-5) corresponding to the copy text to insert or type the desired text in the box:" & vbCrLf & vbCrLf & _
                "1: ORIGINAL" & vbCrLf & _
                "2: CHART COPY" & vbCrLf & _
                "3: PHYSICIAN COPY" & vbCrLf & _
                "4: ATTENDING COPY" & vbCrLf & _
                "5: EXTRA COPY" & vbCrLf, "Print With Copy Text", "1")
            If Len(sText) > 0 Then
                Select Case sText
                    Case "1"
                        sText = "ORIGINAL"
                    Case "2"
                        sText = "CHART COPY"
                    Case "3"
                        sText = "PHYSICIAN COPY"
                    Case "4"
                        sText = "ATTENDING COPY"
                    Case "5"
                        sText = "EXTRA COPY"
                End Select
                ActiveDocument.CustomDocumentProperties("CopyText") = sText & " "
                UpdateFields
                Application.PrintPreview = True
            Else
                ActiveDocument.CustomDocumentProperties("CopyText") = " "
            End If
        Else
            MsgBox "The copy text document marker does not exist in this document. Please contact the vendor to have this added to the document template.", vbInformation, RDP_EDIT_TITLE & " - Print With Copy Text"
        End If
    End If
End Sub

' THIS METHOD IS USED TO UPDATE WORD FIELDS.
Public Sub UpdateFields()
    On Error Resume Next
    Dim oRange As Range
    Dim oSection As Section

    If Application.Documents.Count > 0 Then
        ActiveDocument.Fields.Update
        For Each oRange In ActiveDocument.StoryRanges
            For Each oSection In oRange
                oRange.Fields.Update
                DoEvents
            Next oSection
            DoEvents
        Next oRange
    End If
    Set oRange = Nothing
    Set oSection = Nothing
End Sub

' THIS METHOD IS CALLED TO UPDATE THE PAGINATION BASED ON THE SIG BLOCK.
Public Sub AdjustSigBlockForPrint(Optional bInteractive As Boolean = False)
    'This routine will locate the signature block and determine if the pagination
    'needs to be adjusted to make sure the signature block is not orphaned and
    'to make sure at least 2 lines of text are carried to the last page if needed.
    'This is dependent on the active print driver in Word.
    On Error GoTo Err_AdjustSigBlockForPrint
    Dim i As Integer
    Dim iLines As Integer 'Consecutive lines that are not blank lines.
    Dim iTotalLines As Integer 'Total lines that are not blank lines.
    Dim bFound As Boolean
    
    If Application.Documents.Count < 1 Then
        If bInteractive Then MsgBox "There are no active documents!", vbExclamation, "Adjust Signature Block"
        Exit Sub
    End If
    
    If Selection.Information(wdNumberOfPagesInDocument) < 2 Then
        If mbDebug Then MsgBox "Adjust page breaking for sig block skipped - document is less than 2 pages", vbInformation, "Adjust Signature Block"
        Exit Sub
    End If
    
    'Prevent the screen from updating until done.
    Application.ScreenUpdating = False
    
    'Remove any previous "RDPSigBlock" bookmark - just to be safe.
    If ActiveDocument.Bookmarks.Exists("RDPSigBlock") Then
        ActiveDocument.Bookmarks("RDPSigBlock").Delete
    End If
    
    'Attempt to locate "RRStartSigBlock" bookmark which marks sig block start.
    If ActiveDocument.Bookmarks.Exists("RRStartSigBlock") Then
        If mbDebug Then MsgBox "Adjust page breaking for sig block - located 'RRStartSigBlock' bookmark (start of signature block)", vbInformation, "Adjust Signature Block"
        Selection.GoTo What:=wdGoToBookmark, Name:="RRStartSigBlock"
        bFound = True
    End If
    
    If Not bFound And WordStyleInUse("RRSigBlock") Then
        'Attempt to locate signature block (look for "RRSigBlock" paragraph style).
        If mbDebug Then MsgBox "Adjust page breaking for sig block - search for 'RRSigBlock' style (start of signature block)", vbInformation, "Adjust Signature Block"
        Selection.HomeKey unit:=wdStory, Extend:=wdMove
        With Selection.Find
            .ClearFormatting
            .Replacement.ClearFormatting
            .Style = Application.ActiveDocument.Styles("RRSigBlock")
            .Text = ""
            .Forward = True
            .Wrap = wdFindStop
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            .Execute
            If .Found Then
                bFound = True
            End If
            .ClearFormatting
        End With '.Selection.Find
    End If
    If Not bFound And WordStyleInUse("RRSigBlockStyle") Then
        'Attempt to locate signature block (look for "RRSigBlock" paragraph style).
        If mbDebug Then MsgBox "Adjust page breaking for sig block - search for 'RRSigBlockStyle' style (start of signature block)", vbInformation, "Adjust Signature Block"
        Selection.HomeKey unit:=wdStory, Extend:=wdMove
        With Selection.Find
            .ClearFormatting
            .Replacement.ClearFormatting
            .Style = Application.ActiveDocument.Styles("RRSigBlockStyle")
            .Text = ""
            .Forward = True
            .Wrap = wdFindStop
            .Format = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchWildcards = False
            .MatchSoundsLike = False
            .MatchAllWordForms = False
            .Execute
            If .Found Then
                bFound = True
            End If
            .ClearFormatting
        End With '.Selection.Find
    End If
    
    If Not bFound Then 'Search for signature line as a last resort.
        'If bInteractive Then MsgBox "Warning! Adjust page breaking to prevent orphaned signature - failed to locate a signature block in document", vbExclamation, "Adjust Signature Block"
        Selection.HomeKey unit:=wdStory, Extend:=wdMove
        Selection.Find.Execute "|" & String(20, "_"), False, False, False, False, False, True, wdFindStop, False
        If Selection.Find.Found Then
            bFound = True
            If mbDebug Then MsgBox "Adjust page breaking - located '|" & String(20, "_") & "', assumed to be signature block", vbInformation, "Adjust Signature Block"
        End If
    End If
    
    If bFound Then 'Signature block was found so check pagination.
        If mbDebug Then MsgBox "Signature block found, set bookmark then remove any existing hard page breaks", vbInformation, "Adjust Signature Block"
        Selection.Collapse wdCollapseStart
        ActiveDocument.Bookmarks.Add Name:="RDPSigBlock", Range:=Selection.Range
        
        'Remove any existing hard page breaks.
        If mbDebug Then Log "Removing any existing hard page breaks from document"
        Selection.HomeKey unit:=wdStory, Extend:=wdMove
        Selection.Find.ClearFormatting
        'Selection.Find.Execute "^p^m", False, False, False, False, False, True, wdFindStop, False, "", wdReplaceAll
        Selection.Find.Execute "^m", False, False, False, False, False, True, wdFindStop, False, "", wdReplaceAll
        ActiveDocument.Repaginate
        
        If mbDebug Then Log "Return to start of signature block"
        Selection.GoTo What:=wdGoToBookmark, Name:="RDPSigBlock"
        ActiveDocument.Bookmarks("RDPSigBlock").Delete
        Selection.Collapse wdCollapseStart
        
        'Move left and up until body text is found.
        Do While Selection.MoveUp(unit:=wdLine, Count:=1) > 0
            'Move up a line at a time to verify page breaking.
            Selection.HomeKey unit:=wdLine, Extend:=wdMove
            bFound = False
            If Selection.Range.Style <> "RRCCBlock" And Selection.Range.Style <> "RRSigBlock" And _
             Selection.Range.Style <> "RRCCBlockStyle" And Selection.Range.Style <> "RRSigBlockStyle" Then
                'If the selection is within a table that is not a CC or sig
                'style then do not try to deal with page breaking.
                If Selection.Information(wdWithInTable) Then
                    ActiveDocument.Undo 'Undo remove page breaks.
                    bFound = False
                    If bInteractive Then MsgBox "Error! Adjust page breaking - a table was encountered above the signature block, automated pagination cancelled!", vbCritical, "Adjust Signature Block"
                    Exit Do
                Else
                    For i = 1 To ActiveDocument.Bookmarks("\Line").Range.Characters.Count
                        Select Case Asc(ActiveDocument.Bookmarks("\Line").Range.Characters(i).Text)
                            Case 33 To 126 'Printable characters.
                                'Not a blank line.
                                iLines = iLines + 1
                                bFound = True
                                Exit For
                        End Select
                        DoEvents
                    Next i
                End If
            Else 'Skip this line.
                iTotalLines = 0
            End If
            If Not bFound Then
                'Prevent total lines being considered unless lines are not consecutive.
                iTotalLines = iTotalLines + iLines
                iLines = 0
            End If
            
            If iTotalLines >= 2 Or iLines > 3 Then
                bFound = True
                Exit Do
            End If
            DoEvents
        Loop
        
        If bFound Then
            If iTotalLines >= 2 Then
                Selection.MoveDown unit:=wdLine, Count:=1
            ElseIf iLines > 3 Then
                'Should be 4 lines at this point.
                Selection.MoveDown unit:=wdLine, Count:=2
            End If
            
            '.ActiveDocument.BuiltInDocumentProperties ("Number of pages")
            '.Selection.Information (wdNumberOfPagesInDocument)
            ActiveDocument.Repaginate
            If Selection.Information(wdActiveEndPageNumber) <> Selection.Information(wdNumberOfPagesInDocument) Then
                'The sig block is not on the same page with 2 or more lines of text.
                If mbDebug Then MsgBox "Adjust page breaking for sig block - inserting hard page break", vbInformation, "Adjust Signature Block"
                Selection.HomeKey unit:=wdLine, Extend:=wdMove
                If Selection.Bookmarks("\Para").Range.ListFormat.ListType <> 0 Then
                    'Paragraph is a numbered/bulleted list - hard page could adversely affect numbering.
                    Selection.Bookmarks("\Para").Range.Select
                    Selection.Collapse wdCollapseStart
                End If
                Selection.InsertBreak wdPageBreak
            End If
        End If
        ActiveDocument.Repaginate
    
    Else
        If bInteractive Then MsgBox "Error! Adjust page breaking - unable to locate signature block", vbCritical, "Adjust Signature Block"
    End If 'bFound
    
Exit_AdjustSigBlockForPrint:
    On Error Resume Next
    Selection.HomeKey unit:=wdStory, Extend:=wdMove
    Application.ScreenUpdating = False
    Exit Sub
    
Err_AdjustSigBlockForPrint:
    If bInteractive Then MsgBox "Error in AdjustSigBlockForPrint() was caused by " & Err.Source & ", error #" & Err.Number & _
        " - " & Err.Description
    Resume Exit_AdjustSigBlockForPrint
    
End Sub

' THIS METHOD CHECKS FOR THE EXISTANCE OF A WORD STYLE.
Private Function WordStyleInUse(ByVal sName As String) As Boolean
    On Error GoTo Err_WordStyleInUse
    ' Note: Character case is utilized with styles.
    ' For example, "mystyle" is different from "MYSTYLE".
    WordStyleInUse = ActiveDocument.Styles(sName).InUse
    Exit Function

Err_WordStyleInUse:
    WordStyleInUse = False

End Function

Public Sub RDPSessionExpired()
    On Error Resume Next
    SessionExpiredForm.Show
    Unload SessionExpiredForm
End Sub

Public Sub EstablishTimeout()
    On Error GoTo Err_Handler
    Dim iHours As Integer
    Dim iMins As Integer
    Dim strTimeValue As String
    
    If Not mbTesting Then
        If mlngSessionTimeout > 1440 Or mlngSessionTimeout < 5 Then
            strTimeValue = "00:45:00"
        Else
            If mlngSessionTimeout = 1440 Then
                strTimeValue = "23:59:59"
            ElseIf mlngSessionTimeout > 59 Then
                iHours = Int(mlngSessionTimeout / 60)
                iMins = Int(mlngSessionTimeout Mod 60)
                strTimeValue = CStr(iHours) & ":" & CStr(iMins) & ":00"
            Else
                strTimeValue = "00:" & CStr(mlngSessionTimeout) & ":00"
            End If
        End If
        Application.OnTime When:=Now() + TimeValue(strTimeValue), _
           Name:="DEPEdit.Edit.RDPSessionExpired", Tolerance:=0
    End If
    Exit Sub
    
Err_Handler:
    MsgBox "Unable to establish session timeout, " & Err.Description, vbExclamation
    Err.Clear
    
End Sub

Public Sub ExtendSession()
    On Error GoTo Err_Handler
    
    With moRDPEdit
        If Not moRDPEdit.LockEdit() Then
            MsgBox "Unable to lock edit, " & .LastStatus, vbExclamation
        Else
            SessionExpiredForm.Label2.Caption = "Your current session has been extended " & mlngSessionTimeout & " minutes."
            EstablishTimeout
        End If
    End With
    Exit Sub
    
Err_Handler:
    MsgBox "Unable to extend edit session [changes may be lost], " & Err.Description, vbExclamation
    Err.Clear
    
End Sub

' THIS METHOD INVOKES THE RDP.DLL AND LOADS THE PROVIDER LOOKUP FORM.
Public Sub ProviderLookup()
    On Error GoTo Err_Handler
    Dim oProviderLookup As Object 'RDP.ProviderLookup
    
    #If VBA7 And Win64 Then
        Set oProviderLookup = CreateObject("RDPx64.ProviderLookup")
    #Else
        Set oProviderLookup = CreateObject("RDP.ProviderLookup")
    #End If
    
    If oProviderLookup Is Nothing Then
        #If VBA7 And Win64 Then
            Set oProviderLookup = CreateObject("RDPx64.ProviderLookup")
        #Else
            Set oProviderLookup = CreateObject("RDP.ProviderLookup")
        #End If
    End If
    
    If oProviderLookup Is Nothing Then
        MsgBox "RDP Object Library could not be found on this system in the application path or could not be loaded! Contact the vendor for assistance.", vbExclamation
    Else
        With oProviderLookup
            If Len(mstrSQLServer) > 0 Then
                .SQLServer = mstrSQLServer
            Else
                .SQLServer = "127.0.0.1"
            End If
            If Len(mstrUserListCompanyId) > 0 Then
                .UserListCompanyId = mstrUserListCompanyId
            End If
            If .SelectProvider(Application.ActiveWindow.Caption & " - " & Application.Caption) Then
                If Not .Provider Is Nothing Then
                    Load ProviderForm
                    ProviderForm.Provider = .Provider
                    ProviderForm.Show
                    If Len(ProviderForm.txtInfo) > 0 Then
                        Selection.TypeText ProviderForm.txtInfo
                    End If
                    Unload ProviderForm
                Else
                    MsgBox "Unable to retrieve a provider! " & .ErrMsg, vbExclamation, RDP_EDIT_TITLE
                End If
            Else
                If Len(.ErrMsg) > 0 Then
                    MsgBox .ErrMsg, vbExclamation, RDP_EDIT_TITLE
                End If
            End If
        End With
    End If
    
Exit_Handler:
    Set oProviderLookup = Nothing
    Exit Sub
    
Err_Handler:
    MsgBox Err.Description, vbExclamation, RDP_EDIT_TITLE
    Resume Exit_Handler
    
End Sub

Private Sub GetADTCompany()
    On Error GoTo Err_Handler
    Dim oDocQmanageXML As Object 'RDP.DocQManageXML
    'Set oDocQmanageXML = New DocQManageXML
    
    If Len(mstrXMLDataFilePath) = 0 Then
        Err.Raise -99, , "Empty data file path."
        Exit Sub
    End If
    
    #If VBA7 And Win64 Then
        Set oDocQmanageXML = CreateObject("RDPx64.DocQManageXML")
    #Else
        Set oDocQmanageXML = CreateObject("RDP.DocQManageXML")
    #End If
    If oDocQmanageXML Is Nothing Then
        #If VBA7 And Win64 Then
            Set oDocQmanageXML = CreateObject("RDPx64.DocQManageXML")
        #Else
            Set oDocQmanageXML = CreateObject("RDP.DocQManageXML")
        #End If
    End If
    
    If oDocQmanageXML.Load(mstrXMLDataFilePath, True) Then
        mstrUserListCompanyId = oDocQmanageXML.ADTCompanyId
        oDocQmanageXML.Unload
    Else
        MsgBox "Unable to load XML file to retrieve ADT Company ID, " & oDocQmanageXML.ErrorMsg, vbExclamation, RDP_EDIT_TITLE
    End If

Exit_Handler:
    On Error Resume Next
    Set oDocQmanageXML = Nothing
    Exit Sub
    
Err_Handler:
    MsgBox "Unable to get ADT Company ID from data file, " & Err.Description, vbExclamation, RDP_EDIT_TITLE
    Resume Exit_Handler
    
End Sub
Attribute VB_Name = "EventClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WithEvents App As Word.Application
Attribute App.VB_VarHelpID = -1

'This event is not available in Word 97.
Private Sub App_DocumentBeforeClose(ByVal Doc As Document, Cancel As Boolean)
    On Error Resume Next
    
    'Prevent Word from displaying a dialog prompting user to save changes.
    If Not Doc Is Nothing Then
        If Not Doc.Saved Then
            If MsgBox("This document has been modified. Are you sure you want to cancel and lose all changes?", vbYesNo + vbExclamation, RDP_EDIT_TITLE & " - Cancel Edit") = vbNo Then
                Cancel = True
                Exit Sub
            End If
            Doc.Saved = True
        End If
        'If user quits Word using control box then audit the cancelled edit.
        If Not gbNormalExit Then AuditCancelEdit
    End If
    
End Sub

'This event is not available in Word 97.
Private Sub App_DocumentBeforePrint(ByVal Doc As Document, Cancel As Boolean)
    On Error Resume Next
    If Not Doc Is Nothing Then
        If Not gbAllowPrint Then
            Cancel = True
            MsgBox "You have not been granted privileges to print this document! Contact the vendor to obtain assistance.", vbExclamation, RDP_EDIT_TITLE
        'Else
        '    If gbRepaginateOnPrint Then
        '        AdjustSigBlockForPrint
        '    End If
        '    AuditEvent Doc.Name, rdpAuditUserPrinted, "printed to [" & Application.ActivePrinter & "] from edit module"
        End If
    End If
End Sub

''Word 2000 and later - prevent a user from saving while using view module.
'Private Sub App_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
'    On Error Resume Next
'    'Prevent Word from displaying a dialog prompting user to save changes.
'    If Not Doc.Saved Then Doc.Saved = True
'End Sub

'This event will fire in Word 97 on close but after doc close.
Private Sub App_Quit()
    On Error Resume Next
    'MsgBox "Quit Word event"
    'Prevent Word from displaying a dialog prompting user to save changes.
    If App.Documents.Count > 0 Then
        If Not App.ActiveDocument.Saved Then App.ActiveDocument.Saved = True
    End If
    'If user quits Word using control box then audit the cancelled edit.
    If Not gbNormalExit Then AuditCancelEdit
End Sub

Attribute VB_Name = "ProviderForm"
Attribute VB_Base = "0{6C5FB37A-6BD9-4BD5-942B-A3D3001E8EDB}{32C91ACB-1A11-4E74-9CC3-4C163B981BED}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

#If VBA7 And Win64 Then
    Dim moProvider As RDPx64.Provider
#Else
    Dim moProvider As RDP.Provider
#End If

#If VBA7 And Win64 Then
    Public Property Let Provider(objProvider As RDPx64.Provider)
        Set moProvider = objProvider
        LoadListview
        SetListiew
    End Property
#Else
    Public Property Let Provider(objProvider As RDP.Provider)
        Set moProvider = objProvider
        LoadListview
        SetListiew
    End Property
#End If

Private Sub cmdCancel_Click()
    txtInfo = ""
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    Me.Hide
End Sub

Private Sub SetListiew()
    If ListData.ListCount > 0 Then
        ListData.Selected(1) = True
    End If
End Sub

Private Sub LoadListview()
    On Error GoTo Err_Handler
    Dim strAddress As String
    
    With ListData
        .Enabled = False
        .Clear
        .ColumnCount = 3
        .ColumnWidths = "115; 545; 0"
    End With
    
    With moProvider
        If Len(.GetSigName) > 0 Then
            'Call ListData.ListItems.Add(, , "Signature").ListSubItems.Add(, , .GetSigName)
            Call ListDataAdd("Signature", .GetSigName)
        End If
            
        'Add most common entry - name and address.
        strAddress = strAddress & IIf(Len(.AddrLine1) > 0, vbLf & .AddrLine1, "")
        strAddress = strAddress & IIf(Len(.AddrLine2) > 0, vbLf & .AddrLine2, "")
        strAddress = strAddress & IIf(Len(.AddrLine3) > 0, vbLf & .AddrLine3, "")
        strAddress = strAddress & IIf(Len(.AddrLine4) > 0, vbLf & .AddrLine4, "")
        If Len(strAddress) > 0 Then
            strAddress = .GetSigName & strAddress
            ' ADD POSTAL CODE, IF NOT ALREADY INCLUDED WITHIN THE ADDRESS LINES
            If Len(.PostalCode) > 0 And Len(strAddress) > 0 Then
                If InStr(1, strAddress, .PostalCode) = 0 Then
                    strAddress = strAddress & " " & .PostalCode
                End If
            End If
            'Call ListData.ListItems.Add(, , "Name+Address").ListSubItems.Add(, , strAddress)
            Call ListDataAdd("Name+Address", strAddress)
        End If
        
        'Add name, address, and fax number.
        If Len(.FaxNo) > 0 Then
            strAddress = strAddress & vbLf & "FAX: " & .FaxNo
            'Call listData.ListItems.Add(, , "Name+Address+FaxNo").ListSubItems.Add(, , strAddress)
            Call ListDataAdd("Name+Address+FaxNo", strAddress)
        End If
        
        If Len(.GetNameLastFirst) > 0 Then
            'Call ListData.ListItems.Add(, , "Name - Last, First").ListSubItems.Add(, , .GetNameLastFirst)
            Call ListDataAdd("Name - Last, First", .GetNameLastFirst)
        End If
        If Len(.SigBlock) > 0 Then
            'Call ListData.ListItems.Add(, , "Signature Block").ListSubItems.Add(, , .SigBlock)
            Call ListDataAdd("Signature Block", .SigBlock)
        End If
        If Len(.AddrLine1) > 0 Then
            'Call ListData.ListItems.Add(, , "Address Line1").ListSubItems.Add(, , .AddrLine1)
            Call ListDataAdd("Address Line1", .AddrLine1)
        End If
        If Len(.AddrLine2) > 0 Then
            'Call ListData.ListItems.Add(, , "Address Line2").ListSubItems.Add(, , .AddrLine2)
            Call ListDataAdd("Address Line2", .AddrLine2)
        End If
        If Len(.AddrLine3) > 0 Then
            'Call ListData.ListItems.Add(, , "Address Line3").ListSubItems.Add(, , .AddrLine3)
            Call ListDataAdd("Address Line3", .AddrLine3)
        End If
        If Len(.AddrLine4) > 0 Then
            'Call ListData.ListItems.Add(, , "Address Line4").ListSubItems.Add(, , .AddrLine4)
            Call ListDataAdd("Address Line4", .AddrLine4)
        End If
        If Len(.PostalCode) > 0 Then
            'Call ListData.ListItems.Add(, , "Postal Code").ListSubItems.Add(, , .PostalCode)
            Call ListDataAdd("Postal Code", .PostalCode)
        End If
        If Len(.FaxNo) > 0 Then
            'Call ListData.ListItems.Add(, , "Fax Number").ListSubItems.Add(, , .FaxNo)
            Call ListDataAdd("Fax Number", .FaxNo)
        End If
        If Len(.PhoneNo) > 0 Then
            'Call ListData.ListItems.Add(, , "Phone Number").ListSubItems.Add(, , .PhoneNo)
            Call ListDataAdd("Phone Number", .PhoneNo)
        End If
        If Len(.Country) > 0 Then
            'Call ListData.ListItems.Add(, , "Country").ListSubItems.Add(, , .Country)
            Call ListDataAdd("Country", .Country)
        End If
        If Len(.Title) > 0 Then
            'Call ListData.ListItems.Add(, , "Title").ListSubItems.Add(, , .Title)
            Call ListDataAdd("Title", .Title)
        End If
        If Len(.FirstName) > 0 Then
            'Call ListData.ListItems.Add(, , "First Name").ListSubItems.Add(, , .FirstName)
            Call ListDataAdd("First Name", .FirstName)
        End If
        If Len(.MiddleInitial) > 0 Then
            'Call ListData.ListItems.Add(, , "Middle Initial").ListSubItems.Add(, , .MiddleInitial)
            Call ListDataAdd("Middle Initial", .MiddleInitial)
        End If
        If Len(.LastName) > 0 Then
            'Call ListData.ListItems.Add(, , "Last Name").ListSubItems.Add(, , .LastName)
            Call ListDataAdd("Last Name", .LastName)
        End If
        If Len(.Suffix) > 0 Then
            'Call ListData.ListItems.Add(, , "Suffix").ListSubItems.Add(, , .Suffix)
            Call ListDataAdd("Suffix", .Suffix)
        End If
        If Len(.Credentials) > 0 Then
            'Call ListData.ListItems.Add(, , "Credentials").ListSubItems.Add(, , .Credentials)
            Call ListDataAdd("Credentials", .Credentials)
        End If
        If Len(.GetInitials) > 0 Then
            'Call ListData.ListItems.Add(, , "Initials").ListSubItems.Add(, , .GetInitials)
            Call ListDataAdd("Initials", .GetInitials)
        End If
        If Len(.PUId) > 0 Then
            'Call ListData.ListItems.Add(, , "Access Code").ListSubItems.Add(, , .PUId)
            Call ListDataAdd("Access Code", .PUId)
        End If
        If Len(.CUC) > 0 Then
            'Call ListData.ListItems.Add(, , "Client User Code").ListSubItems.Add(, , .CUC)
            Call ListDataAdd("Client User Code", .CUC)
        End If
        If Len(.Mnemonic) > 0 Then
            'Call ListData.ListItems.Add(, , "Mnemonic").ListSubItems.Add(, , .Mnemonic)
            Call ListDataAdd("Mnemonic", .Mnemonic)
        End If
        If Len(.Department) > 0 Then
            'Call ListData.ListItems.Add(, , "Department").ListSubItems.Add(, , .Department)
            Call ListDataAdd("Department", .Department)
        End If
        If Len(.Email) > 0 Then
            'Call ListData.ListItems.Add(, , "Email").ListSubItems.Add(, , .Email)
            Call ListDataAdd("Email", .Email)
        End If
        If Len(.PrinterAddr) > 0 Then
            'Call ListData.ListItems.Add(, , "Printer Address").ListSubItems.Add(, , .PrinterAddr)
            Call ListDataAdd("Printer Address", .PrinterAddr)
        End If
        If Len(.AcctId) > 0 Then
            'Call ListData.ListItems.Add(, , "Account Id").ListSubItems.Add(, , .AcctId)
            Call ListDataAdd("Account Id", .AcctId)
        End If
        If .Id > 0 Then
            'Call ListData.ListItems.Add(, , "Id").ListSubItems.Add(, , .ID)
            Call ListDataAdd("Id", .Id)
        End If
        'Call ListData.ListItems.Add(, , "Resident Flag").ListSubItems.Add(, , IIf(.ResidentFlag, "True", "False"))
        Call ListDataAdd("Resident Flag", IIf(.ResidentFlag, "True", "False"))
        If .SMId > 0 Then
            'Call ListData.ListItems.Add(, , "SMId").ListSubItems.Add(, , .SMId)
            Call ListDataAdd("SMId", .SMId)
        End If
        If Len(.Specialty) > 0 Then
            'Call ListData.ListItems.Add(, , "Specialty").ListSubItems.Add(, , .Specialty)
            Call ListDataAdd("Specialty", .Specialty)
        End If
        
        Dim iCount As Integer
        #If VBA7 And Win64 Then
            Dim tUserGroups() As RDPx64.UserGroup
        #Else
            Dim tUserGroups() As RDP.UserGroup
        #End If
        
        tUserGroups = .UserGroups
        If IsArray(tUserGroups) Then
            For iCount = LBound(tUserGroups) To UBound(tUserGroups)
                If Len(tUserGroups(iCount).Type.Name) > 0 Then
                    'Call ListData.ListItems.Add(, , "User Group Type").ListSubItems.Add(, , tUserGroups(iCount).Type.Name)
                    Call ListDataAdd("User Group Type", tUserGroups(iCount).Type.Name)
                End If
                If Len(tUserGroups(iCount).Name) > 0 Then
                    'Call ListData.ListItems.Add(, , "User Group Name").ListSubItems.Add(, , tUserGroups(iCount).Name)
                    Call ListDataAdd("User Group Name", tUserGroups(iCount).Name)
                End If
            Next iCount
        End If
End With
    
Exit_Handler:
    ListData.Enabled = True
    Exit Sub
    
Err_Handler:
    MsgBox "Error loading listview, " & Err.Description, vbExclamation
    Resume Exit_Handler
    
End Sub

Private Sub ListDataAdd(strText As String, strText2 As String)
    Dim intListCount As Integer
    intListCount = ListData.ListCount
    ListData.AddItem strText
    ListData.List(intListCount, 1) = Replace(strText2, vbLf, " ")
    ListData.List(intListCount, 2) = strText2
End Sub

Private Sub ListData_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    If ListData.ListIndex = -1 Then Exit Sub
    txtInfo = txtInfo & ListData.List(ListData.ListIndex, 2) & vbCrLf
    txtInfo.SetFocus
    txtInfo.SelStart = Len(txtInfo)
End Sub

Private Sub ListData_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Or KeyCode = vbKeySpace Then
        Dim blnMSFRet As MSForms.ReturnBoolean
        ListData_DblClick blnMSFRet
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Set moProvider = Nothing
End Sub
Attribute VB_Name = "SessionExpiredForm"
Attribute VB_Base = "0{98413344-E9FE-42FB-80A5-97555C982F69}{7BAC5104-17B8-4176-9567-99875D75C13E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
#If VBA7 Then
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If
Private Enum SessionResult
    srDefault = 0
    srExtend
    srClose
End Enum
Private mSessionResult As SessionResult

Private Sub CloseSessionButton_Click()
    mSessionResult = srClose
End Sub

Private Sub ExtendSessionButton_Click()
    mSessionResult = srExtend
End Sub

Private Sub UserForm_Activate()
    On Error GoTo Err_Handler
    Const SESSIONDELAY = 120    'Seconds To Delay
    Dim lTimeLeft As Long
    Dim lCounter As Long
    
    Application.Activate
    Beep
    Do While lCounter < SESSIONDELAY * 10 And mSessionResult = srDefault
        lCounter = lCounter + 1
        If lCounter Mod 10 = 0 Then
            lTimeLeft = Int(SESSIONDELAY - lCounter / 10) + 1
            If lTimeLeft = 1 Then
                SessionExpiredForm.Label2.Caption = "This Window Will Close In " & lTimeLeft & " Second"
            Else
                SessionExpiredForm.Label2.Caption = "This Window Will Close In " & lTimeLeft & " Seconds"
            End If
        End If
        DoEvents
        Sleep 100
    Loop
    
    Select Case mSessionResult
        Case srClose
            DEPEdit.Edit.CancelEdit
        Case srExtend
            DEPEdit.Edit.ExtendSession
        Case Else 'srDefault
            DEPEdit.Edit.CancelExpiredEdit
    End Select
    Me.Hide
    Exit Sub
    
Err_Handler:
    MsgBox Err.Description, vbExclamation
    Me.Hide
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = vbFormControlMenu Then
        Cancel = 1
    End If
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

















' InQuest injected base64 decoded content
' hlGb
' hm+Z
' hrAh
' zZ)z
' jZ N
' zZ)z
' jZ N
' zZ)z

INQUEST-PP=macro
