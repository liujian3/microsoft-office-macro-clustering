Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Const tmp = "fbgvhlmknjhbgfvcghbnjmkmkbhujfz"
Private Sub Workbook_AfterXmlImport(ByVal Map As XmlMap, ByVal IsRefresh As Boolean, ByVal Result As XlXmlImportResult)
    DoStuff
End Sub
Attribute VB_Name = "Modul1"
Public Const offset = 16
Public Const rowoffset = 7
Public Const daywidth = 2
Public Const starttimecolumn = 7
Public Const endtimecolumn = 8
Public Const metadatacolumn = 4

Sub drawWeek(ByVal DS As Double, ByVal De As Double, ByVal row As Integer, ByVal Off As Integer, ByVal View As Integer)
    Dim days As Double, remaining As Double
    Dim width As Double
    Do
        
        days = 8
        remaining = days - Weekday(DS)
        If DS + remaining >= De Then
            remaining = (De - DS)
        End If
        
    
        With Range(Cells(row, Off), Cells(row, Off + remaining))
                .Merge
                .Value = "KW " + Format(DS, "ww", vbMonday, vbFirstFourDays)
                If View = 2 Then
                    Sheets(tmp).Cells(3, 3).Value = "KW " + Format(DS, "ww", vbMonday, vbFirstFourDays)
                    Sheets(tmp).Columns(3).AutoFit
                    .Columns.AutoFit
                    .ColumnWidth = Sheets(tmp).Columns(3).ColumnWidth / 10
                End If
                .HorizontalAlignment = xlCenter
                .Interior.Color = intercolor
                'Set border rigth
                setBorder Range(Cells(row, Off), Cells(row, Off + remaining))
        End With
            'If DS + remaining < De Then
            'drawWeek DS + remaining + 1, De, row, Off + remaining + 1, View
            'End If
            DS = DS + remaining + 1
            Off = Off + remaining + 1
    Loop While DS - 1 < De
End Sub



Sub insertDay(ByVal DS As Double, ByVal De As Double, ByVal row As Integer, ByVal Off As Integer)
    Do
    With Cells(row, Off)
            Dim dayname As String
            dayname = Left(WeekdayName(Weekday(DS - 1)), 1)
            .Value = dayname
            .HorizontalAlignment = xlCenter
            .Interior.Color = intercolor
            .ColumnWidth = daywidth
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            .Borders(xlEdgeLeft).LineStyle = xlNone
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            .Borders(xlInsideVertical).LineStyle = xlNone
            .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    'If DS < De Then
    '    insertDay DS + 1, De, row, Off + 1
    'End If
        DS = DS + 1
        Off = Off + 1
    Loop While DS - 1 < De
    
End Sub

Sub drawMonth(ByVal DS As Double, ByVal De As Double, ByVal row As Integer, ByVal Off As Integer, ByVal View As Integer)
    Dim days As Double, remaining As Double
    Dim mon As String
    Dim run As Boolean
    run = True
    
    Do
        days = DateSerial(Year(DS), Month(DS) + 1, 1) - DateSerial(Year(DS), Month(DS), 1)
        
        remaining = days - CInt(Format(DS, "dd"))
    
        
        Select Case View
            Case 3
                remaining = 0
                mon = Month(DS)
            Case Else
                If DS + remaining >= De Then
                    remaining = (De - DS)
                End If
                mon = MonthName(Month(DS))
        End Select
        
        
        With Range(Cells(row, Off), Cells(row, Off + remaining))
                .Merge
                .Value = mon
                If View = 3 Then
                    .Columns.AutoFit
                End If
                .HorizontalAlignment = xlCenter
                .Interior.Color = intercolor
                'Set border rigth
                setBorder Range(Cells(row, Off), Cells(row, Off + remaining))
        End With
   
    Select Case View
            Case 3
                remaining = 0
                If DS + days < De Then
                    DS = DS + days
                    Off = Off + 1
                    run = True
                Else
                    run = False
                End If

            Case Else
                If DS + remaining >= De Then
                    run = False
                    remaining = (De - DS)
                Else
                    DS = DS + remaining + 1
                    Off = Off + remaining + 1
                    run = True
                End If
        End Select
   
    Loop While run
End Sub

Sub drawYear(ByVal DS As Double, ByVal De As Double, ByVal row As Integer, ByVal Off As Integer, ByVal View As Integer)
    Dim days As Double, remaining As Double
    Dim run As Boolean
    run = True
    
    Do
        If Year(DS) Mod 4 = 0 And Year(DS) Mod 100 <> 0 Or Year(DS) Mod 4 = 0 Then
            days = 365
        Else
            days = 364
        End If
        Select Case View
            Case 3
                remaining = 12 - Month(DS) + 1
    
                If DS + days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) >= De Then
                    remaining = Month(De) - Month(DS) + 1
                    run = False
                    
                End If
                If DS + days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) < De Then
                    run = True
                    drawYear DS + days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) + 1, De, row, Off + remaining, View
                End If
            Case Else
    
                remaining = days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) + 1
                If DS + remaining >= De Then
                    remaining = (De - DS) + 1
                    run = False
                Else
                    run = True
                End If
        End Select
        
        
        With Range(Cells(row, Off), Cells(row, Off + remaining - 1))
                .Merge
                .Value = Format(DS, "yyyy")
                .HorizontalAlignment = xlCenter
                .Interior.Color = intercolor
                'Set border rigth
                setBorder Range(Cells(row, Off), Cells(row, Off + remaining - 1))
        End With
        
        Select Case View
            Case 3
                If DS + days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) < De Then
                    DS = DS + days - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) + 1
                    Off = Off + remaining
                End If
            Case Else
                If DS + remaining >= De Then
                    remaining = (De - DS) + 1
                Else
                    DS = DS + remaining
                    Off = Off + remaining
                End If
        End Select
        
    Loop While run
End Sub


Sub drawGantt(ByVal SoD As Double, ByVal EoD As Double, ByVal row As Integer, ByVal View As Integer)
    Dim lastrow As Long
    Dim startT As Double
    Dim endT As Double
    Dim days As Integer
    Dim process As Double
    lastrow = ActiveSheet.Cells(Rows.Count, starttimecolumn).End(xlUp).row
    Dim rgbv As Long, rgbd As Long
    For Each b In Range(Cells(row, starttimecolumn), Cells(lastrow, starttimecolumn))
        startT = b.Value
        endT = Cells(b.row, b.Column + 1).Value
        If Not (startT = 0 And endT = 0) Then
        
            If startT = 0 Then
                startT = endT
            End If

            If endT = 0 Then
                endT = startT
            End If
            
            days = endT - startT + 1
            process = startT + WorksheetFunction.RoundUp(days * Cells(b.row, endtimecolumn + 1).Value, 0)
            If process > endT Then process = endT
        
            'If (startT - (Weekday(startT) - 1) + 1 < SoD) Then
            '    startT = SoD
            'End If
            'If (endT - (Weekday(endT) - 1) + 1 > EoD) Then
            '    endT = EoD
            If (startT < SoD) Then
                startT = SoD
            End If
            If endT > EoD Then
                endT = EoD
            End If
            Dim pattern As String
            Dim fur As Integer, fuc As Integer
            pattern = Cells(b.row, 1).Value
            With Sheets("Konfiguration")
                Set Findrow = .Range("A:A").Find(What:=pattern, LookAt:=xlWhole, LookIn:=xlValues)
                If Not Findrow Is Nothing Then
                    fur = Findrow.row
                    fuc = Findrow.Column
                Else
                    fur = 1
                    fuc = 1
                End If
                Dim symbol As Shape
                For Each sh In .Shapes
                    Set symbol = sh
                    If Not Application.Intersect(sh.TopLeftCell, .Cells(fur, fuc + 1)) Is Nothing Then
                        'If sh.Type = msoPicture Then Debug.Print "Found Icon in", fur, fuc + 1
                        drawSymbolMark startT, SoD, b.row, symbol, View
                    Else
                        'Debug.Print startT, endT, process, SoD, EoD, days, Round(days * Cells(b.row, endtimecolumn + 1).Value)
                        If process >= SoD And process <= EoD And process <> startT Then
                            rgbd = .Cells(fur, fuc + 2).Interior.Color
                            drawSingleRow startT, process, SoD, b.row, rgbd, View
                            rgbv = .Cells(fur, fuc + 1).Interior.Color
                            drawSingleRow process + 1, endT, SoD, b.row, rgbv, View
                        Else
                            rgbv = .Cells(fur, fuc + 1).Interior.Color
                            drawSingleRow startT, endT, SoD, b.row, rgbv, View
                        End If
                    End If
                Next sh
            End With
        End If
    Next
End Sub

Sub drawSymbolMark(ByVal DS As Double, ByVal SoD As Double, ByVal row As Integer, ByVal symbol As Shape, ByVal View As Integer)
    Dim Off As Double
    Select Case View
        Case 1
            Off = DS - SoD + offset
        Case 2
            Off = DS - SoD + offset
            'Off = (DS - (Weekday(DS) - 1) + 1) - SoD + offset
        Case 3
            Off = Abs((Year(SoD) - Year(DS)) * 12 + Month(SoD) - Month(DS)) + offset
            'days = days(De - Weekday(De, vbUseSystemDayOfWeek) + 7) - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) + 1
    End Select
    Sheets("Gantt-Chart").Cells(row, Off).Value = ChrW(&H25C6)
    Sheets("Gantt-Chart").Cells(row, Off).Font.Color = rgb(46, 60, 125)
    Sheets("Gantt-Chart").Cells(row, Off).Font.Bold = True
    'symbol.Copy
    'Sheets("Gantt-Chart").Paste Sheets("Gantt-Chart").Cells(row, Off)
    'Sheets("Gantt-Chart").Cells(1, 1).Select
End Sub

Sub drawBackgroud(ByVal SoD As Double, ByVal EoD As Double, ByVal row As Integer, ByVal View As Integer)
    Dim lastrow As Long
    lastrow = ActiveSheet.Cells(Rows.Count, starttimecolumn).End(xlUp).row
    For Each b In Range(Cells(row, 4), Cells(lastrow, 4))
        colorSingleRowBackground SoD, EoD, b.row
        drawSandS SoD, EoD, b.row, row - 1
    Next
End Sub

Sub drawSandS(ByVal SoD As Double, ByVal EoD As Double, ByVal row As Integer, ByVal Rowdays As Integer)
    Dim remainning As Double
    remaining = EoD - SoD + 1
    Dim index As Integer
    For index = offset + 1 To offset + remaining
        If Cells(Rowdays, index).Value = "S" Then
            Cells(row, index).Interior.Color = rgb(230, 230, 230)
        End If
    Next
End Sub


Sub drawSingleRow(ByVal DS As Double, ByVal De As Double, ByVal SoD As Double, ByVal row As Integer, ByVal rgb As Long, ByVal View As Integer)
    Dim fday As Double, lday As Double
    Dim days As Double, remaining As Double
    Dim Off As Double
    
    Select Case View
        Case 1
            Off = DS - SoD + offset
            days = De - DS + 1
        Case 2
            Off = DS - SoD + offset
            days = De - DS + 1
            'Off = (DS - (Weekday(DS) - 1) + 1) - SoD + offset
            'days = (De - Weekday(De, vbUseSystemDayOfWeek) + 7) - (DS - (Weekday(DS) - 1) + 1) + 1
        Case 3
            Off = Abs((Year(SoD) - Year(DS)) * 12 + Month(SoD) - Month(DS)) + offset
            days = Abs((Year(DS) - Year(De)) * 12 + Month(DS) - Month(De)) + 1
            'days = days(De - Weekday(De, vbUseSystemDayOfWeek) + 7) - DateDiff("d", CDate("1/1/" & Year(DS)), CDate(DS)) + 1
    End Select
    If DS <> De And DS < De Or DS = De Then
        With Range(Cells(row, Off), Cells(row, days + Off - 1))
            .Interior.Color = rgb
            'setBorder Range(Cells(Row, Off), Cells(Row, days + Off - 1))
        End With
    End If
End Sub

Sub colorSingleRowBackground(ByVal SoD As Double, ByVal EoD As Double, ByVal row As Integer)
    Dim remainning As Double
    remaining = EoD - SoD
    With Range(Cells(row, offset), Cells(row, offset + remaining))
            .Interior.Color = rgb(245, 245, 245)
    End With
    setBorderBottom Range(Cells(row, offset), Cells(row, offset + remaining)), rgb(255, 255, 255)
End Sub

Sub simplyColor(ByVal DS As Double, ByVal De As Double, ByVal row As Integer, ByVal Off As Integer)
    Do
    With Cells(row, Off)
            .Interior.Color = intercolor
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            .Borders(xlEdgeLeft).LineStyle = xlNone
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            'With .Borders(xlEdgeBottom)
            '    .LineStyle = xlContinuous
            '    .ColorIndex = 0
            '    .TintAndShade = 0
            '    .Weight = xlThin
            'End With
            With .Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            .Borders(xlInsideVertical).LineStyle = xlNone
            .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    'If DS < De Then
    '    simplyColor DS + 1, De, row, Off + 1
    'End If
    DS = DS + 1
    Off = Off + 1
    Loop While DS - 1 < De
End Sub


Sub FormatHeading(ByVal SoD As Double, ByVal EoD As Double, ByVal View As Integer)
    Dim rng As Range
    Dim Number As Double
    Number = EoD - SoD
    Set rng = Range(Cells(1, offset), Cells(1, Number + offset))
    Dim days As Double, remaining As Double
    days = DateSerial(Year(DS), Month(DS) + 1, 1) - DateSerial(Year(DS), Month(DS), 1)
    With rng.Interior
        .pattern = xlPatternLinearGradient
        .Gradient.Degree = 90
        .Gradient.ColorStops.Clear
    End With
    With rng.Interior.Gradient.ColorStops.Add(0)
        .Color = 10066329
        .TintAndShade = 0
    End With
    With rng.Interior.Gradient.ColorStops.Add(1)
        .Color = 5592405
        .TintAndShade = 0
    End With
  
End Sub

Sub setBorder(Cell)
    'Set border rigth
    With Cell
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
End Sub

Sub setBorderBottom(ByVal Cell As Range, ByVal rgbs As Long)
    'Set border rigth
    With Cell
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbs
            .TintAndShade = 0
            .Weight = xlThin
        End With
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
End Sub
Attribute VB_Name = "Modul2"
Sub drawDiagram(Min As Date, Maximum As Date)
    Dim SoD As Double, EoD As Double
    Application.ScreenUpdating = False
    'Clean Document
    lColumn = Cells(1, Columns.Count).End(xlToRight).Column
    Range(Cells(1, offset), Cells(lastrow + 5, lColumn)).Delete
    'Clean all Milestone symbols
    Dim symbol As Shape
    For Each sh In Sheets("Konfiguration").Shapes
        Set symbol = sh
        If sh.Type = msoPicture Then
            For Each gsh In Sheets("Gantt-Chart").Shapes
                If gsh.Type = msoPicture And gsh.Height = sh.Height Then
                    gsh.Delete
                    Debug.Print "Deleted Icon"
                End If
            Next gsh
        End If
    Next sh
    'Document Clean end
    Dim View As Integer, viewstring As String
    View = getView()
    Dim i As Integer
    Select Case View
        Case 1
            Sheets.Add.Name = tmp
            Tabelle1.Activate
            SoD = (Min - (Weekday(Min) - 1)) + 1
            EoD = Maximum - Weekday(Maximum, vbUseSystemDayOfWeek) + 7
            FormatHeading SoD, EoD, View
            For i = rowoffset - 5 To 2 Step -1
                simplyColor SoD, EoD, i, offset
            Next i
            drawYear SoD, EoD, rowoffset - 4, offset, View
            drawMonth SoD, EoD, rowoffset - 3, offset, View
            drawWeek SoD, EoD, rowoffset - 2, offset, View
            insertDay SoD, EoD, rowoffset - 1, offset
            drawBackgroud SoD, EoD, rowoffset, View
            If lastrow >= rowoffset Then
                drawGantt SoD, EoD, rowoffset, View
            End If
            Application.DisplayAlerts = False
            Sheets(tmp).Delete
            Application.DisplayAlerts = True
        Case 2
            Sheets.Add.Name = tmp
            Tabelle1.Activate
            SoD = (Min - (Weekday(Min) - 1)) + 1
            EoD = Maximum - Weekday(Maximum, vbUseSystemDayOfWeek) + 7
            FormatHeading SoD, EoD, View
            For i = rowoffset - 4 To 2 Step -1
                simplyColor SoD, EoD, i, offset
            Next i
            drawYear SoD, EoD, rowoffset - 3, offset, View
            drawMonth SoD, EoD, rowoffset - 2, offset, View
            drawWeek SoD, EoD, rowoffset - 1, offset, View
            drawBackgroud SoD, EoD, rowoffset, View
            If lastrow >= rowoffset Then
                drawGantt SoD, EoD, rowoffset, View
            End If
            Application.DisplayAlerts = False
            Sheets(tmp).Delete
            Application.DisplayAlerts = True
        Case 3
            Sheets.Add.Name = tmp
            Tabelle1.Activate
            Dim De As Double
            SoD = DateSerial(Year(Min), Month(Min), 1)
            EoD = DateSerial(Year(Maximum), Month(Maximum) + 1, 0)
            De = SoD + ((Year(EoD) - Year(SoD)) * 12) + Month(EoD) - Month(SoD)
            FormatHeading SoD, De, View
            For i = rowoffset - 3 To 2 Step -1
                simplyColor SoD, De, i, offset
            Next i
            drawYear SoD, EoD, rowoffset - 2, offset, View
            drawMonth SoD, EoD, rowoffset - 1, offset, View
            drawBackgroud SoD, De, rowoffset, View
            If lastrow >= rowoffset Then
                drawGantt SoD, EoD, rowoffset, View
            End If
            Application.DisplayAlerts = False
            Sheets(tmp).Delete
            Application.DisplayAlerts = True
    End Select
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "Modul3"
Public Const tmp = "contact_tmp_table"
Public intercolor As Double
Public lastrow As Long
Public lColumn As Long
Public firstCall As Boolean
Public Sub DoStuff()

    Dim execute As Boolean
    execute = True
    Dim Maximum As Date
    Dim Min As Date
    formatDates
    intercolor = rgb(238, 238, 238)
    lastrow = ActiveSheet.Cells(Rows.Count, starttimecolumn).End(xlUp).row
    'If there are no entries and no time range was choosen the actual month will be entered as date
    If lastrow = rowoffset And (IsEmpty(Cells(4, metadatacolumn).Value) Or IsEmpty(Cells(3, metadatacolumn).Value)) Then
        Min = DateSerial(Year(Date), Month(Date), 1)
        Maximum = DateSerial(Year(Date), Month(Date) + 1, 0)
    End If
    'Get the Maximum value of the Viewable Range
    If IsEmpty(Cells(4, metadatacolumn).Value) Then
        Dim endtimerange As Range
        Set endtimerange = Tabelle1.Range(Cells(rowoffset, endtimecolumn), Cells(lastrow, endtimecolumn))

        Maximum = Application.WorksheetFunction.Max(endtimerange)
        Cells(4, metadatacolumn).Value = Maximum
    Else
        Maximum = CDate(Cells(4, metadatacolumn).Value)
    End If
    'Get the minimum value of the Viewable Range
    If IsEmpty(Cells(3, metadatacolumn).Value) Then
        Dim startTimeRange As Range
        Set startTimeRange = Range(Cells(rowoffset, starttimecolumn), Cells(lastrow, starttimecolumn))
        Min = Application.WorksheetFunction.Min(startTimeRange)
        Cells(3, metadatacolumn).Value = Min
    Else
        Min = CDate(Cells(3, metadatacolumn).Value)
    End If
    
    'Calculate amount of cells to be calculated
    Dim x As Long, y As Long, amount As Long
    x = Maximum - Min
    Dim View As Integer
    View = getView()
    If View = 3 Then
        x = x / 12
    End If
    y = lastrow - rowoffset
    amount = x * y
    Sheets("Konfiguration").Cells(23, 2).Value = amount
    If amount > Sheets("Konfiguration").Cells(21, 2).Value Then
        execute = False
        MsgBox "Der gew|fffd|hlte Datenbereich ist zu gro|fffd| und w|fffd|rde Excel |fffd|berlasten, bitte verringern Sie den ausgew|fffd|hlten Zeitraum."
    End If
    
    'if max and min are swapped Throw a message and do nothing
    If Min > Maximum Then
        MsgBox "Das von Gesammte Start-Datum liegt hinter dem Gesammten End-Datum, so kann keine Auswertung stattfinden |fffd|ndern Sie bitte das Beginn und/oder End Datum."
        execute = False
    End If
    If execute Then
        drawDiagram Min, Maximum
    End If
End Sub

Public Sub formatDates()
    Dim blub As String
    Dim formats As String
    formats = Replace(Replace(Sheets("Konfiguration").Cells(25, "B").NumberFormat, "J", "Y"), "T", "D")
    blub = Format(Sheets("Gantt-Chart").Range("D3"), formats)
    Sheets("Gantt-Chart").Range("D3").NumberFormat = Sheets("Konfiguration").Cells(25, "B").NumberFormat
    Sheets("Gantt-Chart").Range("D3").Value = blub
    
    blub = Format(Sheets("Gantt-Chart").Range("D4"), formats)
    Sheets("Gantt-Chart").Range("D4").NumberFormat = Sheets("Konfiguration").Cells(25, "B").NumberFormat
    
    Sheets("Gantt-Chart").Range("D4").Value = blub
    Dim dates As Range
    Dim lastrow As Integer
    lastrow = ActiveSheet.Cells(Rows.Count, starttimecolumn).End(xlUp).row
    Set dates = Sheets("Gantt-Chart").Range("G" & rowoffset & ":G" & lastrow)
    For Each c In dates
        c.NumberFormat = Sheets("Konfiguration").Cells(25, "B").NumberFormat
        Sheets("Gantt-Chart").Cells(c.row, c.Column + 1).NumberFormat = Sheets("Konfiguration").Cells(25, "B").NumberFormat
    Next
    
    
    
End Sub

Public Function getView() As Integer
    If Not firstCall Then
        Set vcell = Sheets("Gantt-Chart").Cells(5, metadatacolumn)
        viewnum = Sheets("Konfiguration").Cells(11, 1).Value
        Select Case viewnum
            Case 1
                viewstring = "Tagesansicht"
            Case 2
                viewstring = "Wochenansicht"
            Case 3
                viewstring = "Monatsansicht"
        End Select
        vcell.Value = viewstring
        getView = viewnum
        firstCall = True
        Exit Function
    End If
    Set vcell = Sheets("Gantt-Chart").Cells(5, metadatacolumn)
    Select Case vcell.Value
        Case "Tagesansicht"
            getView = 1
            Exit Function
        Case "Wochenansicht"
            getView = 2
            Exit Function
        Case "Monatsansicht"
            getView = 3
            Exit Function
        Case ""
            viewnum = Sheets("Konfiguration").Cells(11, 1).Value
            Select Case viewnum
                Case 1
                    viewstring = "Tagesansicht"
                Case 2
                    viewstring = "Wochenansicht"
                Case 3
                    viewstring = "Monatsansicht"
            End Select
            vcell.Value = viewstring
            getView = viewnum
            Exit Function
    End Select
    

    
End Function

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
