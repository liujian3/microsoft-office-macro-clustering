Attribute VB_Name = "Bearbeitungsschluessel"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Private Sub aufteilen()
    Dim i As Integer
    Dim str_Temp As String
    
    For i = 1 To WorksheetFunction.CountA(Bearbeitungsschluessel.Range("D1:D500"))
        If (Bearbeitungsschluessel.Cells(i, 4).Value <> "") Then
            str_Temp = Bearbeitungsschluessel.Cells(i, 4).Value
            Bearbeitungsschluessel.Cells(i, 5).Value = VBA.Right(VBA.Mid(str_Temp, 1, 14), 3)
            Bearbeitungsschluessel.Cells(i, 6).Value = VBA.Mid(VBA.Mid(str_Temp, 26, 4), 3, 2)
        End If
    Next i
End Sub


Attribute VB_Name = "LA_in_Tabelle"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "LVE_Tabelle"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
   Call Mdl_Workbook_Initialisierung.WB_StartUp
End Sub

Private Sub Workbook_Activate()
    Call Mdl_Workbook_Initialisierung.WB_Activate
End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
    Cancel = Mdl_Workbook_Initialisierung.WB_BeforePrint
End Sub

Private Sub Workbook_Deactivate()
   Call Mdl_Workbook_Initialisierung.WB_Deactivate
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Mdl_Workbook_Initialisierung.WB_ShutDown
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    If (Not Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(Sh)) Then Exit Sub
    
    If (Sh.visible) Then
        Call Mdl_Workbook_Initialisierung.WS_OnChange(Target)
    End If
End Sub
Attribute VB_Name = "Mdl_Backup"
Option Explicit

Public Function CreateBackupXlbDat()
    Dim str_Path As String
    Dim str_File As String
    Dim str_BackupFilePath As String
    Dim str_FullFilePath As String
    
    str_Path = VBA.Environ("APPDATA") & "\Microsoft\Excel\"
     
    If (Application.Version = "9.0") Then str_File = "Excel.xlb"        'Excel 2000
    If (Application.Version = "10.0") Then str_File = "Excel10.xlb"     'Excel 2002
    If (Application.Version = "11.0") Then str_File = "Excel11.xlb"     'Excel 2003
    
    str_BackupFilePath = str_Path & "Backup_" & str_File
    str_FullFilePath = str_Path & str_File
    
    On Error Resume Next
    If (VBA.Dir(str_BackupFilePath) = "") Then
        If VBA.Dir(str_FullFilePath) <> "" Then
            VBA.FileCopy str_FullFilePath, str_BackupFilePath
        End If
    End If
    On Error GoTo 0
End Function

Public Function ResetMenu() As Boolean
    Dim str_Path As String
    Dim str_File As String
    Dim str_BackupFilePath As String
    
    str_Path = VBA.Environ("APPDATA") & "\Microsoft\Excel\"
    
    If (Application.Version = "9.0") Then str_File = "Excel.xlb"        'Excel 2000
    If (Application.Version = "10.0") Then str_File = "Excel10.xlb"     'Excel 2002
    If (Application.Version = "11.0") Then str_File = "Excel11.xlb"     'Excel 2003
    
    str_BackupFilePath = str_Path & "Backup_" & str_File
    
    On Error Resume Next
    If Not VBA.Dir(str_BackupFilePath) = "" Then
        ResetMenu = True
        Workbooks.Open (str_BackupFilePath)
    Else
        ResetMenu = False
        'Keine Backupdatei der Benutzereinstellungen vorhanden
        MsgBox "Wichtiger Hinweis:" & vbCrLf & vbCrLf & _
               "Auf Ihrem Sytstem befindet sich keine Befehlsleistendatei: " & str_File & "." & vbCrLf & _
               "Daher k|fffd|nnen die Benutzereinstellungen nicht zur|fffd|ckgesetzt werden.", _
               vbInformation, _
               TOOL_HDR
        
    End If
    On Error GoTo 0
End Function

Attribute VB_Name = "Mdl_Dialogaktionen"
Option Explicit
Option Base 1

'Typdeklaration f|fffd|r LVE-interne Dialoge
Public Dialog_Logo As uf_Logo

Public Dialog_MA_kopieren As UF_Mitarbeiter_kopieren
Public Dialog_MA_entfernen As UF_Mitarbeiter_entfernen
Public Dialog_MA_sortieren As UF_Mitarbeiter_sortieren

Public Dialog_LA_hinzu As UF_Lohnarten_hinzu
Public Dialog_LA_entfernen As UF_Lohnarten_entfernen
Public Dialog_LA_sortieren As UF_Lohnarten_sortieren

Public Dialog_Input As UF_Input
Public Dialog_Abrechnungsmonate As UF_Abrechnungsmonate

Public Dialog_Email As UF_Email
Public Dialog_Emailvorlage As UF_Emailvorlage
Public Dialog_Export As UF_Export

'Typdeklaration f|fffd|r API-Dialog 'Verzeichnis ausw|fffd|hlen'
'Anpassungen f|fffd|r Excel 2010 64bit (31.07.2012 t23422a)
#If VBA7 Then
    'ab Excel 2010
    Private Type BrowseInfo
        hOwner          As LongPtr
        pidlRoot        As Long
        pszDisplayName  As String
        lpszTitle       As String
        ulFlags         As Long
        lpfn            As LongPtr
        lParam          As LongPtr
        iImage          As Long
    End Type

    Private Declare PtrSafe Function SHGetPathFromIDList Lib "shell32.dll" (ByVal pidl As Long, ByVal pszPath As String) As Long
    Private Declare PtrSafe Function SHBrowseForFolder Lib "shell32.dll" (lpBrowseInfo As BrowseInfo) As Long
#Else
    '|fffd|ltere Excel Versionen
    Private Type BrowseInfo
        hOwner          As Long
        pidlRoot        As Long
        pszDisplayName  As String
        lpszTitle       As String
        ulFlags         As Long
        lpfn            As Long
        lParam          As Long
        iImage          As Long
    End Type
    
    Private Declare Function SHGetPathFromIDList Lib "shell32.dll" (ByVal pidl As Long, ByVal pszPath As String) As Long
    Private Declare Function SHBrowseForFolder Lib "shell32.dll" (lpBrowseInfo As BrowseInfo) As Long
#End If

Public Sub Dialogwechsel(von As Dialog, zu As Dialog)
    Select Case zu
        Case Logo
            Call Dialog_Logo_zeigen(von)
        Case kein_Dialog
            Call Dialoge_entladen(von)
    End Select
End Sub

Private Sub Dialog_Logo_zeigen(von As Dialog)
    Select Case von
        Case kein_Dialog
            If Dialog_Logo Is Nothing Then
                Set Dialog_Logo = New uf_Logo
            End If
    End Select
    
    Dialog_Logo.cb_Einfuegen.SetFocus
    Dialog_Logo.Show False
End Sub

Public Function Dialog_Input_zeigen(ByVal str_Tabelle As String, ByVal bln_ist_Nachberechnung As Boolean) As String
    Dim str_AktDat As String
    Dim str_MK As String
    Dim str_Abrechnungsdatum As String
    Dim str_AbrDAT As String
    
    'Umwandlung Tabellenname in Monat und Jahr
    str_AktDat = VBA.Mid(Rueckwandlung_Abrechnungsmonat(str_Tabelle), 1, 7)
    
EINGABE:
    'Eingabedialog f|fffd|r den Abrechnungsmonat initialisieren
    If (Dialog_Input Is Nothing) Then Set Dialog_Input = New UF_Input
    Dialog_Input.bln_ist_Nachberechnung = bln_ist_Nachberechnung
    
    If (bln_ist_Nachberechnung) Then
        Dialog_Input.Caption = "Nachberechnungsmonat neu"
    Else
        Dialog_Input.Caption = "Abrechnungsmonat neu"
    End If
    
ZEIGEN:
    'Default Auswahl festlegen
    Call Dialog_Input.Defaultmonat_festlegen(str_Tabelle, bln_ist_Nachberechnung)
    
    'Dialog anzeigen
    Dialog_Input.Show
    
    'wenn Abbrechen gew|fffd|hlt wurde
    If (Dialog_Input.tag = "Cancel") Then
        If (Not Dialog_Input Is Nothing) Then Set Dialog_Input = Nothing
        Exit Function
    End If
    
      'Abrechnungszeitraum aus Eingabedialog holen und umwandeln
    str_Abrechnungsdatum = VBA.Mid(Rueckwandlung_Abrechnungsmonat(Dialog_Input.cbx_Monat.Text & " " & VBA.Mid(Dialog_Input.cbx_Jahr.Text, 3, 2) & "_0"), 1, 7)
    
    'ist Abrechnungsdatum im g|fffd|ltigen Format
    If (Not (Mdl_Pruefungen.Pr|fffd|feEingabeAbrechnungsmonat(str_Abrechnungsdatum, bln_ist_Nachberechnung, str_AktDat))) Then GoTo ZEIGEN
    
    'Abrechnungsdatum in interne Form umwandeln
    If (Not bln_ist_Nachberechnung) Then
        str_MK = "_0"
        str_AbrDAT = Abrechnungsmonat_umwandeln(str_Abrechnungsdatum) & str_MK
    Else
        str_MK = "_" & CStr(((CLng(VBA.Mid(str_Abrechnungsdatum, 4, 4)) * 12) + CLng(VBA.Mid(str_Abrechnungsdatum, 1, 2))) - ((CLng(VBA.Mid(str_AktDat, 4, 4)) * 12) + CLng(VBA.Mid(str_AktDat, 1, 2))))
        str_AbrDAT = Abrechnungsmonat_umwandeln(str_AktDat) & str_MK
    End If
    
    'Pr|fffd|fen, ob Abrechnungsmonat (Worksheet) bereits angelegt
    If (Mdl_Workbook_Initialisierung.WS_vorhanden(str_AbrDAT)) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Zum eingegebenen Abrechnungsdatum existiert bereits eine Erfassungstabelle." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Geben Sie ein noch nicht verwendetes Abrechnungsdatum im Auswahldialog an.", _
               vbInformation, _
               TOOL_HDR
               
        GoTo ZEIGEN
    End If
    
        
    'Dialog l|fffd|schen
    If (Not Dialog_Input Is Nothing) Then
        Dialog_Input.Hide
        Set Dialog_Input = Nothing
    End If
    
    Dialog_Input_zeigen = str_AbrDAT
End Function

Public Function Dialog_Abrechungsmonat_zeigen(ByRef str_ArrAbrMon() As String, istNachMonat As Boolean) As String
    Dim str_WSIndex As String
    Dim i As Integer
    
    'Pr|fffd|fe, ob Dialog bereits initialisert
    If (Not Dialog_Abrechnungsmonate Is Nothing) Then Set Dialog_Abrechnungsmonate = Nothing
    
    Set Dialog_Abrechnungsmonate = New UF_Abrechnungsmonate
    If (istNachMonat) Then
        Dialog_Abrechnungsmonate.Caption = "Nachberechnungsmonate"
        Dialog_Abrechnungsmonate.frm_Monatsauswahl.Caption = "L|fffd|schbare Nachberechnungsmonate"
    Else
        Dialog_Abrechnungsmonate.Caption = "Abrechnungsmonate"
        Dialog_Abrechnungsmonate.frm_Monatsauswahl.Caption = "L|fffd|schbare Abrechnungsmonate"
    End If
        
    'Setze die Auswahl der Monate
    Call Dialog_Abrechnungsmonate.Monatsauswahl_setzen(str_ArrAbrMon)
        
    'Dialog anzeigen
    Dialog_Abrechnungsmonate.Show
        
    If Dialog_Abrechnungsmonate Is Nothing Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es ist ein interner Fehler w|fffd|hrend des L|fffd|schvorgangs aufgetreten." & vbCrLf & _
               "Der L|fffd|schvorgang konnte nicht erfolgreich beendet werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Wiederholen Sie den L|fffd|schvorgang.", _
               vbInformation, _
               TOOL_HDR
               
        GoTo Beenden
    End If
    
    'Wert aus Auswahl holen (Multiselect nicht m|fffd|glich)
    'Wenn Auswahl getroffen wurde, dann Worksheetnamen des Nachberechnungsmonats ermitteln
    For i = 1 To UBound(str_ArrAbrMon)
        If (VBA.Left(str_ArrAbrMon(i), VBA.InStr(str_ArrAbrMon(i), "/") - 1) = Dialog_Abrechnungsmonate.lbx_Monatsauswahl.Value) Then
            str_WSIndex = VBA.Right(str_ArrAbrMon(i), Len(str_ArrAbrMon(i)) - VBA.InStr(str_ArrAbrMon(i), "/"))
            Exit For
        End If
    Next i
    
    '|fffd|berpr|fffd|fen, ob Bewegungsdaten bereits im Nachberechnungsmonat vorhanden sind
    If (str_WSIndex = "") Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Die Aktion wurde vom Anwender abgebrochen." & vbCrLf & _
               "Der L|fffd|schvorgang wird daher abgebrochen.", _
               vbInformation, _
               TOOL_HDR
               
        GoTo Beenden
    End If

Beenden:
    Dialog_Abrechungsmonat_zeigen = str_WSIndex
    Set Dialog_Abrechnungsmonate = Nothing
End Function

Public Sub Dialog_MAKopieren_anzeigen()
    Dim int_LZ As Integer
    Dim int_LS As Integer
    
    'Pr|fffd|fen, ob Variable Tabelle leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    'letzte Zeile bzw. Spalte in der aktiven Erfassungstabelle ermitteln
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Pr|fffd|fen, ob Mitarbeiter in der Tabelle enthalten sind.
    If (int_LZ < int_EZ) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "In der aktuellen Tabelle sind noch keine Mitarbeiter angelegt." & vbCrLf & _
               "Die Aktion 'Mittarbeiter kopieren' kann daher nicht ausgef|fffd|hrt werden.", _
               vbInformation, _
               TOOL_HDR
        Exit Sub
    End If
    
     'Pr|fffd|fen ob leere Mitarbeiterzeilen vorhanden sind
    If (Mdl_Pruefungen.existiert_PNr(Mdl_Workbook_Initialisierung.objTabellenblatt, int_LZ, int_LS) <> "OK") Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Die Personalnummer mindestens eines Mitarbeiters wurde noch nicht vergeben." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Vervollst|fffd|ndigen Sie bitte zuerst die fehlenden Angaben.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
    End If
    
    If (Not Dialog_MA_kopieren Is Nothing) Then
        Set Dialog_MA_kopieren = Nothing
    End If
    
    Set Dialog_MA_kopieren = New UF_Mitarbeiter_kopieren
    
    Dialog_MA_kopieren.lbx_Mitarbeiterauswahl.RowSource = _
    Mdl_Workbook_Initialisierung.objTabellenblatt.Range("C" & int_EZ & ":P" & int_LZ).Address
    
    Dialog_MA_kopieren.Show
    
    'erstes Bewegungsdatenfeld aktiv setzen
    Call Mdl_Workbook_Initialisierung.Erstes_Bewegungsdatenfeld_aktivieren
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Exit Sub
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
    End If
End Sub

Public Sub Dialog_MAEntfernen_anzeigen()
    Dim int_LZ As Integer
    Dim int_LS As Integer
    
    'Pr|fffd|fen, ob Variable objTabellenblatt leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    'letzte Zeile bzw. Spalte in der aktiven Erfassungstabelle ermitteln
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    On Error GoTo Fehlerbehandlung
    If (int_LZ < int_EZ) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Es k|fffd|nnen keine weiteren Mitarbeiter entfernt werden.", _
                   vbInformation, _
                   TOOL_HDR
         Exit Sub
    End If
    
    'Pr|fffd|fen ob leere Mitarbeiterzeilen vorhanden sind
    If (Mdl_Pruefungen.existiert_PNr(Mdl_Workbook_Initialisierung.objTabellenblatt, int_LZ, int_LS) <> "OK") Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Die Personalnummer mindestens eines Mitarbeiters wurde noch nicht vergeben." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Vervollst|fffd|ndigen Sie bitte zuerst die fehlenden Angaben.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
    End If
    
    If (Not Dialog_MA_entfernen Is Nothing) Then
        Set Dialog_MA_entfernen = Nothing
    End If

    Set Dialog_MA_entfernen = New UF_Mitarbeiter_entfernen
    
    Dialog_MA_entfernen.lbx_Mitarbeiterauswahl.RowSource = _
    Mdl_Workbook_Initialisierung.objTabellenblatt.Range("C" & int_EZ & ":P" & int_LZ).Address
    
    Dialog_MA_entfernen.Show
    
    'erstes Bewegungsdatenfeld aktiv setzen
    Call Mdl_Workbook_Initialisierung.Erstes_Bewegungsdatenfeld_aktivieren
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Exit Sub
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
    End If
End Sub

Public Sub Dialog_MASortieren_anzeigen()
    If (Not Dialog_MA_sortieren Is Nothing) Then
        Set Dialog_MA_sortieren = Nothing
    End If
    
    Set Dialog_MA_sortieren = New UF_Mitarbeiter_sortieren
    Dialog_MA_sortieren.Show
End Sub

Public Sub Dialoge_entladen(von)
    Select Case von
        Case Logo
            Dialog_Logo.Hide
            Set Dialog_Logo = Nothing
    End Select
End Sub

Public Sub Dialog_MA_sortieren_Abbruch() 'wenn im Dialog "Mitarbeitersortierung" Abbruch gew|fffd|hlt wurde
    Mdl_Dialogaktionen.Dialog_MA_sortieren.Hide
    Set Mdl_Dialogaktionen.Dialog_MA_sortieren = Nothing
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
End Sub

Public Sub Dialog_LA_Hinzu_Abbruch() 'wenn im Dialog "Lohnarten hinzuf|fffd|gen" Abbruch gew|fffd|hlt wurde
    Mdl_Dialogaktionen.Dialog_LA_hinzu.Hide
    Set Mdl_Dialogaktionen.Dialog_LA_hinzu = Nothing
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
End Sub

Public Sub Dialog_LA_Entfernen_Abbruch() 'wenn im Dialog "Lohnarten entfernen" Abbruch gew|fffd|hlt wurde
    Mdl_Dialogaktionen.Dialog_LA_entfernen.Hide
    Set Mdl_Dialogaktionen.Dialog_LA_entfernen = Nothing
    
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
End Sub

Public Sub Mitarbeiterzeile_hinzu()
    Dim int_LZ, int_LS, intNeueZeile, intZeileNeu, i As Integer
    Dim str_LS, strAnwenderEingabe As String
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    'Ermittle letzte Spalte und Zeile
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    intNeueZeile = int_LZ + 1

    strAnwenderEingabe = Application.InputBox("Bitte geben Sie ein, in welcher Zeile der neue Mitarbeiter hinzuf|fffd|gt werden soll." _
                                              & vbCrLf & "(Zul|fffd|ssige Werte: 1 - " & intNeueZeile - int_MAHDR & ")", _
                                              TOOL_HDR, _
                                              VBA.CStr(intNeueZeile - int_MAHDR), Type:=1)
    
    On Error GoTo Fehlerbehandlung
    
    If Not IsNumeric(strAnwenderEingabe) Then
        If strAnwenderEingabe = False Then
            Exit Sub
        End If
    End If
    
    If VBA.InStr(strAnwenderEingabe, ",") <> 0 Or VBA.CInt(strAnwenderEingabe) = 0 Or VBA.CInt(strAnwenderEingabe) < 1 Or VBA.CInt(strAnwenderEingabe) + int_MAHDR > intNeueZeile Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Der eingegebene Zeilenindex ist ung|fffd|ltig." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Bitte korrigieren Sie Ihre Eingabe.", _
               vbInformation, _
               TOOL_HDR
               
        Call Mitarbeiterzeile_hinzu
        Exit Sub
    End If
    
    intZeileNeu = int_MAHDR + VBA.CInt(strAnwenderEingabe)
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Eingabepr|fffd|fung deaktivieren
    'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
    
    'MA-Zeile anlegen
    If (int_LZ < int_EZ) Then
        '1.MA-Zeile anlegen, falls alle gel|fffd|scht sind
        Application.CutCopyMode = xlCopy
        With Mdl_Workbook_Initialisierung.objTabellenblatt
            .Range("A" & int_LZ & ":P" & int_LZ).Copy
            .Paste destination:=.Range("A" & intNeueZeile & ":P" & intNeueZeile)
        End With
        Application.CutCopyMode = False
    Else
        If intZeileNeu < int_LZ Then
            'Neue MA-Zeile einf|fffd|gen
            Application.CutCopyMode = xlCopy
            With Mdl_Workbook_Initialisierung.objTabellenblatt
                .Rows(intZeileNeu).Insert
                .Range("C" & intZeileNeu & ":" & str_LS & intZeileNeu).Clear
                .Range("C" & intZeileNeu + 2 & ":" & "Q" & intZeileNeu + 2).Copy
                .Paste destination:=.Range("C" & intZeileNeu & ":" & "Q" & intZeileNeu)
            End With
            Application.CutCopyMode = False
        Else
            'MA-Zeile am Ende der MA-Liste anlegen
            Application.CutCopyMode = xlCopy
            With Mdl_Workbook_Initialisierung.objTabellenblatt
                .Rows(intZeileNeu).Insert
                .Range("C" & intZeileNeu & ":" & str_LS & intZeileNeu).Clear
                .Range("C" & intZeileNeu - 1 & ":" & "Q" & intZeileNeu - 1).Copy
                .Paste destination:=.Range("C" & intZeileNeu & ":" & "Q" & intZeileNeu)
            End With
            Application.CutCopyMode = False
        End If
    End If
    
   'Anzahl Mitarbeiter in Verwaltungstabelle aktualisieren
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value = Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value + 1
    
    'Formatierungsanweisungen
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    Call Mdl_Fuellanweisungen.MA_Index_erstellen
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
     
    'Nacharbeiten
    Mdl_Workbook_Initialisierung.objTabellenblatt.Range("C" & VBA.CStr(intZeileNeu) & ":" & "Q" & VBA.CStr(intZeileNeu)).ClearContents
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(intZeileNeu, 3).Select

    'Hinweismeldung ausgeben
    MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
           "Bitte beachten Sie, dass der neue Mitarbeiter separat der lohnabrechnenden Stelle bekannt gemacht werden muss. Die Bewegungsdaten des neuen Mitarbeiters k|fffd|nnen andernfalls bei der Lohnabrechnung nicht ber|fffd|cksichtigt werden." & vbCrLf & _
           "Informieren Sie dazu die abrechnende Stelle.", _
           vbInformation, _
           TOOL_HDR
    
    'Eingabepr|fffd|fung aktivieren
    Application.EnableEvents = True     'nun kann man die Events wieder aktivieren
   
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
    Exit Sub

Fehlerbehandlung:
    MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
           "Der eingegebene Zeilenindex ist ung|fffd|ltig." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
           " Bitte korrigieren Sie Ihre Eingabe.", _
           vbInformation, _
           TOOL_HDR
           
    Call Mitarbeiterzeile_hinzu
End Sub

Public Sub Mitarbeiter_sortieren(Sortierkriterium As String, Reihenfolge As String)
    Dim intLetzteZeile As Integer, i As Integer
    Dim nummer_tmp As Long
    
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Vorbedingung
    intLetzteZeile = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE  'letzte Zeile
    If intLetzteZeile > Mdl_Fuellanweisungen.int_MAHDR + 1 Then     'nur wenn mehr als 1 Mitarbeiter vorhanden, ist etwas zu tun
        'Vorarbeiten
        Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
        For i = 11 To intLetzteZeile
            With Mdl_Workbook_Initialisierung.objTabellenblatt
                .Range("C" & i & ":D" & i).UnMerge
                .Range("E" & i & ":I" & i).UnMerge
                .Range("J" & i & ":N" & i).UnMerge
                .Range("O" & i & ":P" & i).UnMerge
            End With
        Next i
        Range("C" & Mdl_Fuellanweisungen.int_MAHDR + 1 & ":" & Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE) & intLetzteZeile).Select
        
        'Sortierung nach Personalnummer
        If Sortierkriterium = "PersNr" Then
            For i = 11 To intLetzteZeile
                With Mdl_Workbook_Initialisierung.objTabellenblatt
                    If IsNumeric(.Cells(i, 3)) And .Cells(i, 3) <> "" Then
                        nummer_tmp = CLng(.Cells(i, 3))
                        .Cells(i, 3).NumberFormat = "General"
                        .Cells(i, 3) = nummer_tmp
                    End If
                End With
            Next i
            If Reihenfolge = "aufsteigend" Then
                Selection.Sort Key1:=Range("C11"), Order1:=xlAscending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            ElseIf Reihenfolge = "absteigend" Then
                Selection.Sort Key1:=Range("C11"), Order1:=xlDescending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            End If
            For i = 11 To intLetzteZeile
                With Mdl_Workbook_Initialisierung.objTabellenblatt
                    If IsNumeric(.Cells(i, 3)) And .Cells(i, 3) <> "" Then
                        nummer_tmp = CLng(.Cells(i, 3))
                        .Cells(i, 3).NumberFormat = "@"
                        .Cells(i, 3) = CStr(nummer_tmp)
                    End If
                End With
            Next i
        End If
        
        'Sortierung nach Nachname
        If Sortierkriterium = "Name" Then
            If Reihenfolge = "aufsteigend" Then
                Selection.Sort Key1:=Range("E11"), Order1:=xlAscending, _
                    Key2:=Range("J11"), Order2:=xlAscending, _
                    Key3:=Range("C11"), Order3:=xlAscending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            ElseIf Reihenfolge = "absteigend" Then
                Selection.Sort Key1:=Range("E11"), Order1:=xlDescending, _
                    Key2:=Range("J11"), Order2:=xlDescending, _
                    Key3:=Range("C11"), Order3:=xlDescending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            End If
        End If
        
        'Sortierung nach Kostenstelle
        If Sortierkriterium = "Kostenstelle" Then
            For i = 11 To intLetzteZeile
                With Mdl_Workbook_Initialisierung.objTabellenblatt
                    If IsNumeric(.Cells(i, 15)) And .Cells(i, 15) <> "" Then
                        nummer_tmp = CLng(.Cells(i, 15))
                        .Cells(i, 15).NumberFormat = "General"
                        .Cells(i, 15) = nummer_tmp
                    End If
                End With
            Next i
            If Reihenfolge = "aufsteigend" Then
                Selection.Sort Key1:=Range("O11"), Order1:=xlAscending, _
                    Key2:=Range("C11"), Order3:=xlAscending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            ElseIf Reihenfolge = "absteigend" Then
                Selection.Sort Key1:=Range("O11"), Order1:=xlDescending, _
                    Key2:=Range("C11"), Order3:=xlDescending, _
                    OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            End If
            For i = 11 To intLetzteZeile
                With Mdl_Workbook_Initialisierung.objTabellenblatt
                    If IsNumeric(.Cells(i, 15)) And .Cells(i, 15) <> "" Then
                        nummer_tmp = CLng(.Cells(i, 15))
                        .Cells(i, 15).NumberFormat = "@"
                        .Cells(i, 15) = CStr(nummer_tmp)
                    End If
                End With
            Next i
        End If
        
        'Abschlussarbeiten
        For i = 11 To intLetzteZeile
            With Mdl_Workbook_Initialisierung.objTabellenblatt
                .Range("C" & i & ":D" & i).Merge
                .Range("E" & i & ":I" & i).Merge
                .Range("J" & i & ":N" & i).Merge
                .Range("O" & i & ":P" & i).Merge
            End With
        Next i
        
        Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
        Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    End If
    
    Mdl_Dialogaktionen.Dialog_MA_sortieren.Hide
    Set Mdl_Dialogaktionen.Dialog_MA_sortieren = Nothing
    
    'Monat und erste Zelle aktivieren
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_EZ, int_ES).Select
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
    
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
End Sub

Public Sub MA_kopieren()
    Dim arrMA() As Integer
    Dim bln_IsSelected As Boolean
    Dim int_LZ As Integer
    Dim int_LS As Integer               'Index der letzten Spalte
    Dim str_LS As String                'Spaltenbuchstabe der letzten Zeile
    Dim i, j As Integer
    
    bln_IsSelected = False
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '***************************************************
    
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'letzte Zeile der aktiven Erfassungstabelle ermittlen
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    
    'letzte Spalte der aktiven Erfassungstabelle ermitteln
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    'Werte aus Auswahl holen und in Array ablegen (Multiselect ist m|fffd|glich)
    j = 0
    For i = 0 To Dialog_MA_kopieren.lbx_Mitarbeiterauswahl.ListCount - 1
        If (Dialog_MA_kopieren.lbx_Mitarbeiterauswahl.Selected(i)) Then
           If (Dialog_MA_kopieren.lbx_Mitarbeiterauswahl.List(i) <> "") Then
               bln_IsSelected = True
               j = j + 1
               
               ReDim Preserve arrMA(j)
               arrMA(j) = i
           Else
               MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                      "Es existiert keine Mitarbeiternummer f|fffd|r die Auswahl." & vbCrLf & _
                      "Das Entfernen von Mitarbeitern wird aufgrund eines internen Fehlers abgebrochen.", _
                      vbCritical, _
                      TOOL_HDR
                GoTo FINISH
           End If
        End If
    Next i
    
    'Wenn kein Mitarbeiter ausgew|fffd|hlt wurde, soll nichts gemacht werden.
    If (Not bln_IsSelected) Then
         MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Die Aktion 'Mitarbeiter kopieren' kann nicht durchgef|fffd|hrt werden." & vbCrLf & _
               "Sie haben keine Mitarbeiter zum Kopieren ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " W|fffd|hlen Sie im Abwahldialog Mitarbeiter zum Kopieren aus.", _
               vbInformation, _
               TOOL_HDR
        GoTo FINISH
    End If
    
    'Pr|fffd|fen, ob die Auswahl das Excel Limit |fffd|berschreitet
    If (int_LZ + UBound(arrMA()) >= 35436) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben die maximale Zeilengrenze in Excel erreicht." & vbCrLf & _
               "Daher k|fffd|nnen keine weiteren Mitarbeiter hinzugef|fffd|gt werden.", _
               vbInformation, _
               TOOL_HDR
        GoTo FINISH
    End If
    
    'Ausgew|fffd|hlte Mitarbeiter l|fffd|schen
    Application.CutCopyMode = xlCopy
    
    Dim zIndex As Integer
    j = 0
    For i = 0 To UBound(arrMA()) - 1
        zIndex = int_EZ + arrMA(i + 1) + j
        
        'MA-Zeile Kopieren
        With Mdl_Workbook_Initialisierung.objTabellenblatt
            .Rows(zIndex + 1).Insert
            .Range("C" & zIndex + 1 & ":" & str_LS & zIndex + 1).Clear
            .Range("C" & zIndex & ":" & "Q" & zIndex).Copy
            .Paste destination:=.Range("C" & zIndex + 1 & ":" & "Q" & zIndex + 1)
        End With
        
        j = j + 1
    Next i
    
    Application.CutCopyMode = False
    
    'Neue Anzahl Mitarbeiter in Tabellenblatt speichern
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value = Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value + UBound(arrMA())
    
    'Abschlie|fffd|ende Formatierungsanweisungen
    'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
    
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    Call Mdl_Fuellanweisungen.MA_Index_erstellen
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    
    'nun kann man die Events wieder aktivieren
    Application.EnableEvents = True
    
    'erste kopierte MA-Zeile aktivieren
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(arrMA(1) + 1, 3).Select

FINISH:
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
End Sub

Public Sub MA_entfernen()
    Dim arrMA() As Integer
    Dim bln_IsSelected As Boolean
    Dim bln_BD_vorhanden As Boolean
    Dim int_LS As Integer
    Dim int_LZ As Integer
    Dim str_ES As String
    Dim str_LS As String
    Dim i, j As Integer
    
    bln_IsSelected = False
    bln_BD_vorhanden = False
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '***************************************************
    
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Werte aus Auswahl holen und in Array ablegen (Multiselect ist m|fffd|glich)
    j = 0
    For i = 0 To Dialog_MA_entfernen.lbx_Mitarbeiterauswahl.ListCount - 1
         If (Dialog_MA_entfernen.lbx_Mitarbeiterauswahl.Selected(i)) Then
            If (Dialog_MA_entfernen.lbx_Mitarbeiterauswahl.List(i) <> "") Then
                bln_IsSelected = True
                j = j + 1
                
                ReDim Preserve arrMA(j)
                arrMA(j) = i
            Else
                MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                       "Es existiert keine Mitarbeiternummer f|fffd|r die Auswahl." & vbCrLf & _
                       "Das Entfernen von Mitarbeitern wird aufgrund eines internen Fehlers abgebrochen.", _
                       vbCritical, _
                       TOOL_HDR
                 GoTo FINISH
            End If
         End If
    Next i
    
    'Wenn kein Mitarbeiter ausgew|fffd|hlt wurde, soll nichts gemacht werden.
    If (Not bln_IsSelected) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Die Aktion 'Mitarbeiter l|fffd|schen' kann nicht durchfgef|fffd|hrt werden." & vbCrLf & _
               "Sie haben keine Mitarbeiter zum L|fffd|schen ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                " W|fffd|hlen Sie im Abwahldialog Mitarbeiter zum Entfernen aus.", _
               vbInformation, _
               TOOL_HDR
        GoTo FINISH
    End If
    
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    str_ES = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_ES)
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    'Pr|fffd|fen, ob in den gew|fffd|hlten MA-Zeile bereits Vorerfassungswerte vorhanden sind
    Dim zIndex As Integer
    For i = 0 To UBound(arrMA()) - 1
        zIndex = arrMA(i + 1)
        
        Dim c As Range
        For Each c In Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_ES & int_EZ + zIndex & ":" & str_LS & int_EZ + zIndex)
            bln_BD_vorhanden = c.Value <> ""
            If (bln_BD_vorhanden) Then Exit For
        Next c
    Next i
    
    'Wenn gew|fffd|hlte MA-Zeilen bereits mit Bewegungsdaten gef|fffd|llt sind, dann Abfrage, ob wirklich l|fffd|schen oder neue Abwahl
    Dim str_Antwort As String
    If (bln_BD_vorhanden) Then
        str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                             "Es existieren f|fffd|r mindestens einen Mitarbeiter bereits Bewegungsdaten." & vbCrLf & vbCrLf & _
                             "Wollen Sie die Mitarbeiter wirklich l|fffd|schen?", _
                             vbYesNo + vbQuestion, _
                             TOOL_HDR)
                             
        'Wenn Antwort "Nein", dann Methode beenden, um eine Neue Auswahl der Mitarbeiter zu erm|fffd|glichen
        If (str_Antwort = vbNo) Then GoTo FINISH
    End If
    
    'Ausgew|fffd|hlte Mitarbeiter l|fffd|schen
    j = 0
    For i = 0 To UBound(arrMA()) - 1
        zIndex = arrMA(i + 1)
        
        Mdl_Workbook_Initialisierung.objTabellenblatt.Rows(int_EZ + zIndex - j).DELETE
        j = j + 1
    Next i
    
    'Neue Anzahl Mitarbeiter in Tabellenblatt speichern
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value = Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value - UBound(arrMA())
    
    'Wenn nach dem L|fffd|schen noch mindestens 1 MA-Zeile vorhanden ist , dann Formatierung durchf|fffd|hren
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    If (int_LZ > int_MAHDR) Then
        
        Call Mdl_Formatierungsanweisungen.MA_Header_formatieren
        Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
        Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
        Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
        Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
        
        'Zeilennummerierung neu anlegen
        Call Mdl_Fuellanweisungen.MA_Index_erstellen
    End If
    
FINISH:
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
End Sub

Public Sub Neue_LA_hinzuf|fffd|gen()
    Dim i As Integer
    Dim j As Integer
    Dim intInsertColumn As Integer
    Dim intLA_Zeile As Integer
    Dim str_VorhandeneLA As String
    Dim strLA_Nummer As String
    Dim strLA_Spalte As String
    Dim str_ErsteSpalte As String
    Dim var_Wert() As Variant
    Dim var_Vorhandene_LA() As Variant
    Dim bln_LA_Vorhanden As Boolean
    Dim bln_LA_gewaehlt As Boolean
    
    'Dialog Verstecken
    If (Not Dialog_LA_hinzu Is Nothing) Then Mdl_Dialogaktionen.Dialog_LA_hinzu.Hide
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Variablen initialisieren
    bln_LA_gewaehlt = False
    j = 0
    str_ErsteSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
    
    'Wert aus Auswahl holen und in Array ablegen(Multiselect ist m|fffd|glich)
    For i = 0 To Dialog_LA_hinzu.lbx_Lohnartenauswahl.ListCount - 1
        If (Dialog_LA_hinzu.lbx_Lohnartenauswahl.Selected(i) = True) Then
            If (Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.List(i) <> "") Then
                bln_LA_gewaehlt = True
                j = j + 1
                ReDim Preserve var_Wert(j)
                var_Wert(j) = Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.List(i)
            Else
                MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                       "Es existiert keine Lohnartennummer f|fffd|r die Auswahl." & vbCrLf & _
                       "Das Hinzuf|fffd|gen von Lohnarten wird aufgrund eines internen Fehlers abgebrochen.", _
                       vbCritical, _
                       TOOL_HDR
                Exit Sub
            End If
        End If
    Next i
    
    'Wenn keine LA ausgew|fffd|hlt wurde, dann soll wieder der LA-Auswahldialog angezeigt werden
    If (Not bln_LA_gewaehlt) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es wurden keine Lohnarten zum Hinzuf|fffd|gen ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " W|fffd|hlen Sie im Auswahldialog Lohnarten aus.", _
               vbInformation, _
               TOOL_HDR
        If (Not Dialog_LA_hinzu Is Nothing) Then
            Dialog_LA_hinzu.Show
            Exit Sub
        Else
            Set Mdl_Dialogaktionen.Dialog_LA_hinzu = New UF_Lohnarten_hinzu
            On Error GoTo Fehlerbehandlung
            Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.RowSource _
            = "AlleLohnarten!A2:B" & CStr(WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("A1:A10000")))
            Mdl_Dialogaktionen.Dialog_LA_hinzu.Show
            Exit Sub
        End If
    End If
    
    'Pr|fffd|fen, ob die gew|fffd|hlten Lohnarten bereits in der Vorerfassung vorhanden sind
    bln_LA_Vorhanden = False
    j = 0
    For i = 0 To UBound(var_Wert()) - 1
        If Mdl_Dialogaktionen.ist_LA_Nummer_vorhanden(var_Wert(i + 1)) Then
            j = j + 1
            ReDim Preserve var_Vorhandene_LA(j)
            var_Vorhandene_LA(j) = var_Wert(i + 1)
            bln_LA_Vorhanden = True
        End If
    Next i
    
    If (bln_LA_Vorhanden) Then
        If (UBound(var_Vorhandene_LA()) > 0) Then
            str_VorhandeneLA = ""
            For i = 0 To UBound(var_Vorhandene_LA()) - 1
                str_VorhandeneLA = str_VorhandeneLA & CStr(var_Vorhandene_LA(i + 1)) & "; "
            Next i
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Folgende Lohnart(en) ist (sind) bereits in der Bewegungsdatentabelle vorhanden:" & vbCrLf & _
                   str_VorhandeneLA & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " W|fffd|hlen Sie keine bereits hinzugef|fffd|gten Lohnarten aus.", _
                   vbInformation, _
                   TOOL_HDR
        End If
    End If

    'Wenn Lohnarten bereits vorhanden sind, dann soll wieder der LA-Auswahldialog angezeigt werden
    If (bln_LA_Vorhanden) Then
        If (Not Dialog_LA_hinzu Is Nothing) Then
            Dialog_LA_hinzu.Show
            Exit Sub
        Else
            Set Mdl_Dialogaktionen.Dialog_LA_hinzu = New UF_Lohnarten_hinzu
            On Error GoTo Fehlerbehandlung
            Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.RowSource _
            = "AlleLohnarten!A2:B" & CStr(WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("A1:A10000")))
            Mdl_Dialogaktionen.Dialog_LA_hinzu.Show
            Exit Sub
        End If
    End If
            
    'Lohnarten hinzuf|fffd|gen
    For i = 0 To UBound(var_Wert()) - 1
        'Dialog zerst|fffd|ren
        If (Not Mdl_Dialogaktionen.Dialog_LA_hinzu Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_LA_hinzu = Nothing
        
        'Neue Spalte ermitteln und einf|fffd|gen
        intInsertColumn = (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
        strLA_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(intInsertColumn)
        Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(intInsertColumn).Insert xlShiftToLeft
        
        'liefert die entsprechende Zeile in AlleLohnarten
        intLA_Zeile = Mdl_Dialogaktionen.LA_Nummer_ist_in_Zeile(CStr(var_Wert(i + 1)))
        
        'LA-Spalte mit neuer Lohnart bef|fffd|llen
        Call Mdl_Fuellanweisungen.LA_HINZU(strLA_Spalte, intLA_Zeile)
        
        'LA-Spalte formatieren und Hintergrund anpassen
        Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
        Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
        
        'Aussenbereiche formatieren
        Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    Next i
    
    'erstes Bewegungsdatenfeld aktiv setzen
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE > 17) Then .Range(str_ErsteSpalte & "11").Select
    End With
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************

Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub Neue_StatistikLA_hinzufuegen()
    Dim LA_Nummer As String
    Dim LA_Name As String
    Dim LA_BSNummer As String
    Dim LA_Spalte As String
    Dim int_InsertColumn As Integer
            
    If Dialog_LA_hinzu Is Nothing Then
        Exit Sub
    Else
        'Abbruchbedingung
        If Not (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
            Exit Sub
        Else
            Dialog_LA_hinzu.Hide
            LA_Nummer = "0000"
            LA_Name = VBA.Trim(Dialog_LA_hinzu.tb_NameStatistikLA.Text)
            LA_BSNummer = VBA.Left(Dialog_LA_hinzu.cbx_BS_Bezeichnung.Text, 2)
            Set Dialog_LA_hinzu = Nothing
        End If
    End If
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Neue Spalte ermitteln und einf|fffd|gen
    int_InsertColumn = (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
    LA_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_InsertColumn)
    Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(int_InsertColumn).Insert xlShiftToLeft
    
    'Statistiklohnart in neuangelegte Spalte einf|fffd|gen
    Call Mdl_Fuellanweisungen.Statistik_LA_HINZU(LA_Spalte, LA_Nummer, LA_Name, LA_BSNummer)
    
    'LA-Spalten sowie Hintergrundfarben formatieren
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    
    'Aussenbereiche formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    
    'erstes Bewegungsdatenfeld in neuer Spalte aktiv setzen
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE > 17) Then .Range(LA_Spalte & "11").Select
    End With

    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************
End Sub

Public Sub Neue_NettoLA_hinzuf|fffd|gen()
    Dim nettoNummer As String
    Dim nettoName As String
    Dim strLA_Spalte As String
    Dim intInsertColumn As Integer
            
    If Dialog_LA_hinzu Is Nothing Then
        Exit Sub
    Else
        Dialog_LA_hinzu.Hide
        nettoNummer = VBA.Trim(Dialog_LA_hinzu.tb_NummerNetto.Text)
        nettoName = VBA.Trim(Dialog_LA_hinzu.tb_NameNetto.Text)
        Set Dialog_LA_hinzu = Nothing
    End If
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Neue Spalte ermitteln und einf|fffd|gen
    intInsertColumn = (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
    strLA_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(intInsertColumn)
    Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(intInsertColumn).Insert xlShiftToLeft
    
    'Netto-Lohnart in neuangelegte Spalte einf|fffd|gen
    Call Mdl_Fuellanweisungen.NETTO_LA_HINZU(strLA_Spalte, nettoNummer, nettoName)
    
    'LA-Spalten sowie Hintergrundfarben formatieren
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren                            'LA-Spalten formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    
    'Aussenbereiche formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    
    'erstes Bewegungsdatenfeld in neuer Spalte aktiv setzen
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE > 17) Then .Range(strLA_Spalte & "11").Select
    End With
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************
End Sub

Public Sub LA_sortieren_befuellen(Optional int_Auswahl As Integer, Optional byt_Richtung As Byte)
    Dim i As Integer
    Dim intWSIndex As Integer
    Dim strSpalte1 As String
    Dim strSpalte2 As String
    
    On Error GoTo Fehlerbehandlung
    If ((Not Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE < int_ES + 1) And _
        (Not Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle < 3)) Then
        
        If Dialog_LA_sortieren Is Nothing Then
            Set Mdl_Dialogaktionen.Dialog_LA_sortieren = New UF_Lohnarten_sortieren
        End If
    
        intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
        strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
        strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
        
        Mdl_Dialogaktionen.Dialog_LA_sortieren.lbx_Lohnarten.RowSource _
        = "LA_in_Tabelle!" & strSpalte1 & "2:" & strSpalte2 & CStr(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle)
        
        If byt_Richtung = 1 Then
            Mdl_Dialogaktionen.Dialog_LA_sortieren.lbx_Lohnarten.Selected(int_Auswahl - 1) = True
        ElseIf byt_Richtung = 2 Then
            Mdl_Dialogaktionen.Dialog_LA_sortieren.lbx_Lohnarten.Selected(int_Auswahl + 1) = True
        End If
        
        Mdl_Dialogaktionen.Dialog_LA_sortieren.Show
    Else
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es sind nicht gen|fffd|gend Lohnarten zum Sortieren vorhanden.", _
               vbInformation, _
               TOOL_HDR
        Exit Sub
    End If
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung" & vbCrLf & _
                "und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
                
        Application.DisplayAlerts = False
        Worksheets("LA_in_Tabelle (2)").DELETE
        Worksheets(Mdl_Workbook_Initialisierung.objTabellenblatt.name & " (2)").DELETE
        Application.DisplayAlerts = True
        Exit Sub
    End If
End Sub

Public Sub LA_sortieren(int_Spalte As Integer, byt_Richtung As Byte)
    Dim str_Spalte As String
    Dim str_Spalte_Ziel As String
    Dim intWSIndex As Integer
    Dim strSpalte1 As String
    Dim strSpalte2 As String
    Dim int_Auswahl As Integer
    
    int_Auswahl = int_Spalte - 18
    
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
    strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
    
    If byt_Richtung = 1 Then
        'LA-Spalte in Bewegungsdatentabelle verschieben
        str_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte)
        str_Spalte_Ziel = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte - 1)
        Columns(str_Spalte & ":" & str_Spalte).Cut
        Columns(str_Spalte_Ziel & ":" & str_Spalte_Ziel).Insert Shift:=xlToRight
        'LA_in_Tabelle aktualisieren
        With ThisWorkbook.Worksheets("LA_in_Tabelle")
            .Range(strSpalte1 & int_Auswahl + 2 & ":" & strSpalte2 & int_Auswahl + 2).Cut
            .Range(strSpalte1 & int_Auswahl + 1 & ":" & strSpalte2 & int_Auswahl + 1).Insert Shift:=xlDown
        End With
    ElseIf byt_Richtung = 2 Then
        'LA-Spalte in Bewegungsdatentabelle verschieben
        str_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte)
        str_Spalte_Ziel = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte + 2)
        Columns(str_Spalte & ":" & str_Spalte).Cut
        Columns(str_Spalte_Ziel & ":" & str_Spalte_Ziel).Insert Shift:=xlToRight
        'LA_in_Tabelle aktualisieren
        With ThisWorkbook.Worksheets("LA_in_Tabelle")
            .Range(strSpalte1 & int_Auswahl + 2 & ":" & strSpalte2 & int_Auswahl + 2).Cut
            .Range(strSpalte1 & int_Auswahl + 4 & ":" & strSpalte2 & int_Auswahl + 4).Insert Shift:=xlDown
        End With
    End If

    Call Mdl_Dialogaktionen.LA_sortieren_befuellen(int_Auswahl, byt_Richtung)
End Sub

Public Sub LA_entfernen()
    Dim spaltenIndex As Integer
    Dim i, j As Integer
    Dim str_Antwort As String
    Dim str_BD_vorhanden, str_LA_Spalte As String
    Dim var_Wert() As Variant
    Dim var_BD_vorhanden() As Variant
    Dim bln_BD_vorhanden, bln_LA_gewaehlt, bln_BD_Array_gefuellt As Boolean
    Dim intWSIndex As Integer
    Dim strSpalte1, strSpalte2 As String
    Dim str_split() As String
    
    'Dialog Verstecken
    If (Not Dialog_LA_entfernen Is Nothing) Then Mdl_Dialogaktionen.Dialog_LA_entfernen.Hide
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Variablen initialisieren
    bln_LA_gewaehlt = False
    j = 0
    
    'Wert aus Auswahl holen und in Array ablegen(Multiselect ist m|fffd|glich)
    For i = 0 To Dialog_LA_entfernen.lbx_Lohnartenauswahl.ListCount - 1
        If (Dialog_LA_entfernen.lbx_Lohnartenauswahl.Selected(i) = True) Then
            If (Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.List(i) <> "") Then
                bln_LA_gewaehlt = True
                j = j + 1
                ReDim Preserve var_Wert(j)
                var_Wert(j) = Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.List(i) & "//" _
                              & Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.List(i, 1)
            Else
                MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                       "Es existiert keine Lohnartennummer f|fffd|r die Auswahl." & vbCrLf & _
                       "Das Entfernen von Lohnarten wird aufgrund eines internen Fehlers abgebrochen.", _
                       vbCritical, _
                       TOOL_HDR
                Exit Sub
            End If
        End If
    Next i
    
    'Wenn keine LA ausgew|fffd|hlt wurde, dann soll wieder der LA-Abwahldialog angezeigt werden
    If (Not bln_LA_gewaehlt) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es wurden keine Lohnarten zum Entfernen ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " W|fffd|hlen Sie im Abwahldialog Lohnarten zum Entfernen aus.", _
               vbInformation, _
               TOOL_HDR
        If (Not Dialog_LA_entfernen Is Nothing) Then
            Dialog_LA_entfernen.Show
            Exit Sub
        Else
            Set Mdl_Dialogaktionen.Dialog_LA_entfernen = New UF_Lohnarten_entfernen
            intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
            strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
            strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
            On Error GoTo Fehlerbehandlung
            Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.RowSource _
            = "LA_in_Tabelle!" & strSpalte1 & "2:" & strSpalte2 & CStr(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle)
            Mdl_Dialogaktionen.Dialog_LA_entfernen.Show
            Exit Sub
        End If
    End If
    
    'Pr|fffd|fen, ob in den gew|fffd|hlten Lohnartenspalten bereits Vorerfassungswerte vorhanden sind
    j = 0
    bln_BD_Array_gefuellt = False
    For i = 0 To UBound(var_Wert()) - 1
        str_split = Split(var_Wert(i + 1), "//")
        spaltenIndex = (Mdl_Dialogaktionen.liefere_Zeile_LA(str_split(1)) + 16)
        str_LA_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(spaltenIndex)
        Dim c As Range
        If (Not Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
            For Each c In Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_LA_Spalte & "11:" & str_LA_Spalte & CStr(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE))
                bln_BD_vorhanden = False
                If (c.Value <> "") Then
                    bln_BD_vorhanden = True
                    Exit For
                End If
            Next c
            If (bln_BD_vorhanden) Then
                j = j + 1
                ReDim Preserve var_BD_vorhanden(j)
                var_BD_vorhanden(j) = var_Wert(i + 1)
                bln_BD_Array_gefuellt = True
            End If
        End If
    Next i
    
    'Wenn Lohnartenspalten bereits mit Bewegungsdaten gef|fffd|llt sind, dann Abfrage, ob wirklich l|fffd|schen oder neue Abwahl
    If (bln_BD_Array_gefuellt) Then
        If (UBound(var_BD_vorhanden()) > 0) Then
            str_BD_vorhanden = ""
            For i = 0 To UBound(var_BD_vorhanden()) - 1
                str_split = Split(var_BD_vorhanden(i + 1), "//")
                str_BD_vorhanden = str_BD_vorhanden & str_split(1) & "; "
                If ((i + 1) Mod 4 = 0) Then str_BD_vorhanden = str_BD_vorhanden & vbCrLf
            Next i
            str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                                 "F|fffd|r folgende Lohnart(en) existieren bereits Bewegungsdaten:" & vbCrLf & vbCrLf & _
                                 str_BD_vorhanden & vbCrLf & vbCrLf & _
                                 "Wollen Sie die gew|fffd|hlten Lohnarten wirklich l|fffd|schen?", _
                                 vbYesNo + vbQuestion, _
                                 TOOL_HDR)
        End If
    End If
    
    'Wenn Abfrage mit "Nein" beantwortet wird, dann Abwahldialog aufrufen
    If (bln_BD_Array_gefuellt) Then
        If (str_Antwort = vbNo) Then
            If (Not Dialog_LA_entfernen Is Nothing) Then
                Dialog_LA_entfernen.Show
                Exit Sub
            Else
                Set Mdl_Dialogaktionen.Dialog_LA_entfernen = New UF_Lohnarten_entfernen
                intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
                strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
                strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
                On Error GoTo Fehlerbehandlung
                Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.RowSource _
                = "LA_in_Tabelle!" & strSpalte1 & "2:" & strSpalte2 & CStr(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle)
                Mdl_Dialogaktionen.Dialog_LA_entfernen.Show
                Exit Sub
            End If
        End If
    End If
    
    'Wenn Abfrage mit "Ja" beantwortet wird, dann LA-Spalten l|fffd|schen
    If (bln_BD_Array_gefuellt) Then
        If (str_Antwort = vbYes) Then
            If (Not Dialog_LA_entfernen Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_LA_entfernen = Nothing
            For i = 0 To UBound(var_Wert()) - 1
                str_split = Split(var_Wert(i + 1), "//")
                spaltenIndex = Mdl_Dialogaktionen.liefere_Zeile_LA(str_split(1)) + 16
                Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(spaltenIndex).DELETE
                Call Mdl_Dialogaktionen.loesche_Zeile_LA(str_split(1))
                'Formatierungen
                Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
                Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
                Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
                'erstes Bewegungsdatenfeld aktiv setzen
        If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE > 17) Then Mdl_Workbook_Initialisierung.objTabellenblatt.Range("R11").Select
            Next i
        End If
    Else
        If (bln_LA_gewaehlt) Then
            If (Not Dialog_LA_entfernen Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_LA_entfernen = Nothing
            For i = 0 To UBound(var_Wert()) - 1
                str_split = Split(var_Wert(i + 1), "//")
                spaltenIndex = Mdl_Dialogaktionen.liefere_Zeile_LA(str_split(1)) + 16
                Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(spaltenIndex).DELETE
                Call Mdl_Dialogaktionen.loesche_Zeile_LA(str_split(1))
                'Formatierungen
                Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
                Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
                Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
                'erstes Bewegungsdatenfeld aktiv setzen
                If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE > 17) Then Mdl_Workbook_Initialisierung.objTabellenblatt.Range("R11").Select
            Next i
        End If
    End If
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************

Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub EXPORT(ByRef Tabellen As Dictionary, bln_Email As Boolean, bln_BewegungsdatenFehlen As Boolean)
    Dim i As Integer
    Dim str_MK As String
    Dim str_AZR As String
    Dim str_Log As String
    Dim str_folder As String
    Dim str_Ausgabedatei As String
    Dim objFSO As Object
    Dim ws As Worksheet
    
    str_Log = ""
    Set ws = ActiveSheet
    
    '*******************************Erste Abbruchbedingungen,...**********************************************
    '...wenn Tabellenarray leer ist
    If Tabellen.count <= 0 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
               "Es ist ein Fehler beim Erstellen der Exportinformationen aufgetreten!" & vbCrLf & _
               "Die Exportdateien k|fffd|nnen nicht erstellt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " F|fffd|hren Sie den Export erneut durch.", _
               vbCritical, _
               TOOL_HDR
        Exit Sub        'Methode beenden
    End If
    
    '...wenn keine Mandantenstammdaten vorhanden sind
    If (Not Mdl_Pruefungen.Mandantenstammdaten_vorhanden) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es fehlen f|fffd|r den Export wichtige Mandantenstammdaten." & vbCrLf & _
               "Der Export wird daher abgebrochen.", _
               vbInformation, _
               TOOL_HDR
    End If
    
    '*********************************Pfad zur Ablage der Exportdateien festlegen****************************
    If bln_Email Then
        'tempor|fffd|ren Ordner f|fffd|r Anhang anlegen
        Set objFSO = CreateObject("Scripting.FileSystemObject")
        str_folder = Environ("TEMP") & "\LVETemp"
        If objFSO.FolderExists(str_folder) = False Then
            objFSO.CreateFolder str_folder
        End If
    Else
        str_folder = VerzeichnisW|fffd|hlen("Verzeichnis zum Ablegen der Exportdateien w|fffd|hlen")
        'bei Abbruch...
        If (str_folder = "") Then
            Exit Sub
        Else 'Log-Informationen schreiben
            str_Log = "Exportprotokoll vom: " & VBA.Date & " " & VBA.Time & vbCrLf & vbCrLf & _
            "Als Exportverzeichnis wurde " & str_folder & " gew|fffd|hlt." & vbCrLf & vbCrLf
        End If
    End If
    
    '*********************************Exportieren***********************************************************
    For i = 0 To Tabellen.count - 1
        If Tabellen.Keys()(i) <> "" Then
            Set Mdl_Workbook_Initialisierung.objTabellenblatt = Application.Worksheets(Tabellen.Keys()(i))
            str_Ausgabedatei = Tabellen.items()(i)
            
            'Schreibe Log f|fffd|r Erfassungstabelle
            With Mdl_Workbook_Initialisierung.objTabellenblatt
                If (VBA.Right(.name, 2) <> "_0") Then
                    'Nachberechnungsmonate
                    str_Log = str_Log & CStr(i + 1) & ": Export von Nachberechnung: " & Abrechungsmonat_aufloesen(.name) & _
                                                  " zu " & VBA.Mid(Rueckwandlung_Abrechnungsmonat(.name), 1, 2) & _
                                                  "/" & "20" & VBA.Mid(.name, VBA.InStr(.name, "_") - 2, 2) & vbCrLf
                    Else
                        'Abrechnungsmonate
                        str_Log = str_Log & CStr(i + 1) & ": Export von Abrechnungstabelle: " & VBA.Mid(.name, 1, VBA.InStr(.name, "_") - 1) & vbCrLf
                    End If
            End With
            
            'Schreibe in Datei
            Dim Speicherfehler As Boolean
            str_Log = str_Log & Mdl_Export.Bewegungsdaten_exportieren(Mdl_Workbook_Initialisierung.objTabellenblatt, str_folder, str_Ausgabedatei, bln_Email, Speicherfehler, bln_BewegungsdatenFehlen) & vbCrLf
            If Speicherfehler Then Exit Sub
        End If
    Next i
    
    'Aktuelles WB aktiv setzen (von wo aus Export aufgerufen wurde)
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ws
    
    'Header formatieren
    Call Mdl_Formatierungsanweisungen.MA_Header_formatieren
    
    'Abschlie|fffd|ender Sicherheitshinweis
    str_Log = str_Log & vbCrLf
    str_Log = str_Log & VBA.Chr$(187) & " Verwenden Sie zur Weitergabe der exportierten Daten eine gesicherte E-Mail-Kommunikation."
    MsgBox str_Log, vbOKOnly, TOOL_HDR 'Anzeigen des Exportprotokolls
End Sub

' Ermittelt Verzeichnisnamen und zeigt den Windows-Dialog an
Public Function VerzeichnisW|fffd|hlen(Optional DialogTitel) As String
    Dim StrukturVerzeichnisInfo As BrowseInfo
    Dim ListenNr As Long
    Dim Pfad As String
    
    With StrukturVerzeichnisInfo
        .lpszTitle = IIf(IsMissing(DialogTitel), "Exportpfad ausw|fffd|hlen", CStr(DialogTitel))
        .ulFlags = &H1 ' BIF_RETURNONLYFSDIRS
    End With
    
    ListenNr = SHBrowseForFolder(StrukturVerzeichnisInfo)
    Pfad = VBA.Space$(512)
    
    If SHGetPathFromIDList(ByVal ListenNr, ByVal Pfad) Then VerzeichnisW|fffd|hlen = Left(Pfad, InStr(Pfad, vbNullChar) - 1)
End Function

Public Function Datei_waehlen() As String
    Dim str_File As String
    Dim fso As FileSystemObject
    Dim fileSize
    Dim fil As Object
    Dim str As String
    
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = ""
        .ButtonName = ""
        .Filters.Add "Bilddateien", "*.bmp;*.gif;*.jpg"
        .InitialFileName = ThisWorkbook.Path & "\"
        .InitialView = msoFileDialogViewDetails
        
        If .Show = True Then
            str = .SelectedItems(1)
            Set fso = CreateObject("Scripting.FileSystemObject")
            Set fil = fso.GetFile(str)
            fileSize = fil.size
            If (fileSize > 100000) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Die ausgew|fffd|hlte Bildatei ist zu gro|fffd|." & vbCrLf & _
                       "Die Maximalgr|fffd||fffd|e betr|fffd|gt 100 KB.", _
                       vbInformation, _
                       TOOL_HDR
            str_File = ""
            Else
                str_File = .SelectedItems(1)
            End If
            
        Else
              str_File = ""
        End If
    End With
    
    Datei_waehlen = str_File
End Function

Public Function ist_LA_Nummer_vorhanden(ByVal strLA_Nummer As String) As Boolean 'Methode pr|fffd|ft, ob LA in aktiver Tabelle schon existiert
    Dim c As Range
    Dim blnWert As Boolean
    Dim intWSIndex As Integer
    Dim strSpalte As String
    
    'Variablen initialisieren
    blnWert = False
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
    
    'Such-Schleife
    For Each c In Worksheets("LA_in_Tabelle").Range(strSpalte & "1:" & strSpalte & "500")
        If c.Value = strLA_Nummer Then
            blnWert = True
            Exit For
        End If
    Next c
    
    ist_LA_Nummer_vorhanden = blnWert
End Function

Public Function ist_LA_Name_vorhanden(ByVal str_Name As String) As Boolean 'Methode pr|fffd|ft, ob LA in aktiver Tabelle schon existiert
    Dim c As Range
    Dim blnWert As Boolean
    Dim intWSIndex As Integer
    Dim strSpalte As String
    
    'Variablen initialisieren
    blnWert = False
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
    
    'Such-Schleife
    For Each c In Worksheets("LA_in_Tabelle").Range(strSpalte & "1:" & strSpalte & "500")
        If c.Value = str_Name Then
            blnWert = True
            Exit For
        End If
    Next c
    
    ist_LA_Name_vorhanden = blnWert
End Function

Public Function LA_Nummer_ist_in_Zeile(ByVal strLA_Nummer As String) As Integer 'Methode liefert Zeilenindex, wo LA-Nummer in der Tabelle "AlleLohnarten" steht
    Dim c As Range
    
    For Each c In ThisWorkbook.Worksheets("AlleLohnarten").Range("A1:A10000")
        If c = strLA_Nummer Then
            LA_Nummer_ist_in_Zeile = c.Row
            Exit For
        End If
    Next c
End Function

Private Function liefere_Zeile_LA(ByVal strLA_Name As String) As Integer 'Methode liefert Zeilenindex, wo LA-Name in der Tabelle "LA_in_Tabelle" steht
    Dim c As Range
    Dim intWSIndex As Integer
    Dim strSpalte As String
    
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
    
    For Each c In Worksheets("LA_in_Tabelle").Range(strSpalte & "1:" & strSpalte & "500")
        If c.Value = strLA_Name Then
            liefere_Zeile_LA = c.Row
            Exit For
        End If
    Next c
End Function

Private Sub loesche_Zeile_LA(ByVal strLA_Name As String) 'Methode l|fffd|scht eine LA-Zeile in der Tabelle "LA_in_Tabelle"
    Dim c As Range
    Dim intWSIndex, i As Integer
    Dim strSpalte1 As String
    Dim strSpalte2 As String
    Dim strSpalte3 As String
    
    i = 0
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
    strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
    strSpalte3 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 3)
    
    For Each c In Worksheets("LA_in_Tabelle").Range(strSpalte2 & "1:" & strSpalte2 & "250")
        i = i + 1
        If c.Value = strLA_Name Then
            Worksheets("LA_in_Tabelle").Range(strSpalte1 & CStr(i) & ":" & strSpalte3 & CStr(i)).DELETE Shift:=xlUp
            Exit For
        End If
    Next c
End Sub

Public Function ermittelSheetindexAbrechnungsmonat(ByVal Abrechnungstabelle As String) As Byte
    Dim j As Byte
    
    On Error Resume Next
    j = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0
    
    Do While (j >= 1)
        If (Mdl_Workbook_Initialisierung.Erfassungsblaetter(j) = Abrechnungstabelle) Then
            ermittelSheetindexAbrechnungsmonat = j
            Exit Do
        End If
        j = j - 1
    Loop
End Function
Attribute VB_Name = "Mdl_Druckausgabe"
Option Base 1 'Array bei 1 starten

Private Const zeilenstart As Integer = 7  'Merker f|fffd|r Startzeile mit Wertinhalt

Sub Druck_aufbereitet(ByVal strMK As String)
    Dim shp As Shape                                        'Alle Anzeigeelemente
    Dim str_Druck_TB As String                              'Name der zu druckenden Tabelle
    Dim str_Temp As String                                  'Puffer f|fffd|r Texte
    Dim max_r As Double                                     'Anzahl Reihen
    Dim max_sp As Double                                    'Anzahl Spalten
    Dim i As Integer                                        'Integerlaufz|fffd|hler 1
    Dim j As Integer                                        'Integerlaufz|fffd|hler 2
    Dim ic As Integer                                       'Integerz|fffd|hler
    Dim idel As Integer                                     'L|fffd|schz|fffd|hlerd
    Dim bRC As Boolean                                      'Returnvalue Boolean
    Dim emptyrowarray(65356) As Integer                     'Array f|fffd|r Reihen zum ausblenden
    Dim emptycolarray(256) As Integer                       'Array f|fffd|r Spalten zum ausblenden
    Dim bE As Boolean                                       'Merker ob leere Spalten oder Zeilen
    Dim str_MsgAntwort As String                            'Textpuffer f|fffd|r R|fffd|ckgaben aus Msgbox
    Dim x As Double                                         'Z|fffd|hler f|fffd|r Summierung 1
    Dim y As Double                                         'Z|fffd|hler f|fffd|r Summierung 2
    Dim temp As Double                                      'Zwischenspeicher f|fffd|r Summierungselemente
    Dim temp_einzuf_spalten As Integer                      'Zwischenspeicher f|fffd|r einzuf|fffd|gende Spalten jede Seite
    Dim Dialog_Druckeinstellungen As UF_Druckeinstellungen  'Objekt Dialog Druckeinstellungen
    Dim bDruckFN As Boolean                                 'Schalter f|fffd|r den Andruck des Familiennamens
    Dim bDruckVN As Boolean                                 'Schalter f|fffd|r den Andruck des Vornamens
    Dim bDruckKS As Boolean                                 'Schalter f|fffd|r den Andruck der Kostenstelle
    Dim spaltenstart As Integer                             'Merker f|fffd|r Startspalte mit Zeileninhalt
    Dim intSLAS As Integer                                  'sichtbare LA-Spaltenanzahl pro Seite (inklusive Summenspalte)
    Dim clrFarbeHintergrund As Long                         'Farbe f|fffd|r Headerbereich
    On Error GoTo 0 'Fehlerunterdr|fffd|ckung
    
    If (strMK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    
    '*******************************************************************************************
    'Initialisierung
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.ActiveSheet
    End If
    
    Mdl_Workbook_Initialisierung.DATEVprint = True
    bE = False
    Application.ScreenUpdating = False
    
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    '*******************************************************************************************
    'Sicherung des Monatsnamen das f|fffd|r den Druck aufbereitet werden soll
    str_Druck_TB = ActiveSheet.name
    
    '*******************************************************************************************
    'Anlage des Tempor|fffd|ren Druckblattes
    Call DruckblattLoeschen 'L|fffd|schen einer "alten" Drucktabelle
    
    Worksheets(str_Druck_TB).Copy after:=Sheets(Sheets.count)
    ActiveSheet.name = "Druck"
    
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(ThisWorkbook.Worksheets("Druck"))
    
    With Worksheets("Druck")
        .Columns("O:P").EntireColumn.Hidden = False 'Spalte f|fffd|r die Kostenstelle wieder einblenden falls ausgeblendet
        .Columns("M:N").ColumnWidth = 5
    End With
    
    '*******************************************************************************************
    'Dialog der Druckeinstellungen aufrufen
    On Error Resume Next
    If Not Dialog_Druckeinstellungen Is Nothing Then Set Dialog_Druckeinstellungen = Nothing
    On Error GoTo 0
    
    Set Dialog_Druckeinstellungen = New UF_Druckeinstellungen
    Dialog_Druckeinstellungen.Show
    
    '*******************************************************************************************
    'Abbruch durch Anwender im Druckeinstellungsdialog
    If Dialog_Druckeinstellungen.bAbbruch = True Then
        Set Dialog_Druckeinstellungen = Nothing
        
        Call DruckblattLoeschen 'L|fffd|schen der angelegten Drucktabelle
        Worksheets(str_Druck_TB).Activate
        Exit Sub
    End If
    
    '*******************************************************************************************
    'Druckeinstellungen |fffd|bernehmen (Personalnummer wird immer gedruckt)
    With Dialog_Druckeinstellungen
        If .cbx_Familienname.Value = True Then
            bDruckFN = True
        Else
            bDruckFN = False
        End If
        
        If .cbx_Vorname.Value = True Then
            bDruckVN = True
        Else
            bDruckVN = False
        End If
        
        If .cbx_Kostenstelle.Value = True Then
            bDruckKS = True
        Else
            bDruckKS = False
        End If
    End With
    
    Set Dialog_Druckeinstellungen = Nothing
    
    '*******************************************************************************************
    'L|fffd|schen bzw. umformatieren der nicht ben|fffd|tigten Spalten/Zeilen/OLE-Elemente
    Application.EnableEvents = False
    
    With ThisWorkbook.Worksheets("Druck")
        .Range("1:1, 7:9").DELETE
        If bDruckFN = False Then
            If bDruckVN = False Then
                If bDruckKS = False Then
                    .Range("A:B,E:I,J:N,O:P").DELETE 'PNR drucken
                    max_sp = 3 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 8
                    str_Temp = "C"
                    .Columns(1).ColumnWidth = 9
                    .Columns(2).ColumnWidth = 9
                    .Range("A1:C3").Merge
                    .Range("A4:C4").Merge
                    .Range("A5:C5").Merge
                    .Cells(6, 3).Clear
                    .Range("A1:C6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                Else
                    .Range("A:B,E:I,J:N").DELETE 'PNR/KS drucken
                    max_sp = 5 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 8
                    str_Temp = "E"
                    .Range("A1:E3").Merge
                    .Range("A4:E4").Merge
                    .Range("A5:E5").Merge
                    .Cells(6, 5).Clear
                    .Range("A1:E6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                End If
            Else
                If bDruckKS = False Then
                    .Range("A:B,E:I,O:P").DELETE 'PNR/VN drucken
                    max_sp = 8 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 7
                    str_Temp = "H"
                    .Range("A1:H3").Merge
                    .Range("A4:H4").Merge
                    .Range("A5:H5").Merge
                    .Cells(6, 8).Clear
                    .Range("A1:H6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                Else
                    .Range("A:B,E:I").DELETE 'PNR/VN/KS drucken
                    max_sp = 10 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 6
                    str_Temp = "J"
                    .Range("A1:J3").Merge
                    .Range("A4:J4").Merge
                    .Range("A5:J5").Merge
                    .Cells(6, 10).Clear
                    .Range("A1:J6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                End If
            End If
        Else
            If bDruckVN = False Then
                If bDruckKS = False Then
                    .Range("A:B,J:N,O:P").DELETE 'PNR/FM drucken
                    max_sp = 8 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 7
                    str_Temp = "H"
                    .Range("A1:H3").Merge
                    .Range("A4:H4").Merge
                    .Range("A5:H5").Merge
                    .Cells(6, 8).Clear
                    .Range("A1:H6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                Else
                    .Range("A:B,J:N").DELETE 'PNR/FM/KS drucken
                    max_sp = 10 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 6
                    str_Temp = "J"
                    .Range("A1:J3").Merge
                    .Range("A4:J4").Merge
                    .Range("A5:J5").Merge
                    .Cells(6, 10).Clear
                    .Range("A1:J6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                End If
            Else
                If bDruckKS = False Then
                    .Range("A:B,O:P").DELETE 'PNR/FM/VN drucken
                    max_sp = 13 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 5
                    str_Temp = "M"
                    .Range("A1:M3").Merge
                    .Range("A4:M4").Merge
                    .Range("A5:M5").Merge
                    .Cells(6, 13).Clear
                    .Range("A1:M6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                Else
                    .Range("A:B").DELETE 'PNR/FM/VN/KS drucken
                    max_sp = 15 'Letzte Spalte vor Beginn der Lohnarten zuweisen
                    intSLAS = 4
                    str_Temp = "O"
                    .Range("A1:O3").Merge
                    .Range("A4:O4").Merge
                    .Range("A5:O5").Merge
                    .Cells(6, 15).Clear
                    .Range("A1:O6").Interior.Color = clrFarbeHintergrund
                    .UsedRange.Borders.Color = clrHintergrundAB
                End If
            End If
        End If
        'eingebettete OLE-Elemente l|fffd|schen
        For Each shp In .Shapes
            shp.DELETE
        Next shp
    End With

    '*******************************************************************************************
    'Ermittlung der benutzten Zeilen (max_r)...
    max_r = 6 'letzte Zeile vor Erfassungsteil
    Do While max_r < 65357 And Cells(max_r + 1, 1).Value <> ""
        max_r = max_r + 1
    Loop
    '... und Spalten(max_sp)
    spaltenstart = max_sp + 1 'Beginn der Spalten mit Lohnarten
    Do While max_sp < 257 And Cells(1, max_sp + 1).Value <> ""
        max_sp = max_sp + 1
    Loop
    
    '*******************************************************************************************
    '|fffd|bernahme der Beschreibungen f|fffd|r den linken Kopfteil des Druckbereiches
    With ThisWorkbook.Worksheets("Druck")
        .Cells(1, 1).Value = Worksheets(str_Druck_TB).Cells(2, 12).Value 'Bezeichner LA
        .Cells(4, 1).Value = Worksheets(str_Druck_TB).Cells(5, 12).Value 'Bezeichner LA-Nummer
        .Cells(5, 1).Value = Worksheets(str_Druck_TB).Cells(6, 12).Value 'Bezeichner BS
    End With
    
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ThisWorkbook.Worksheets(str_Druck_TB))
    
    '*******************************************************************************************
    'Pr|fffd|fen, ob Leerzeilen oder -spalten vorhanden sind
    i = zeilenstart
    j = spaltenstart
    Do While j <= max_sp
        Do While i <= max_r
            If Cells(i, j).Value <> "" Then
                ic = ic + 1
            End If
            i = i + 1
        Loop
        
        If ic = 0 Then
            emptycolarray(j) = 1
            bE = True
        End If
        
        ic = 0
        j = j + 1
        i = zeilenstart
    Loop
    
    ic = 0
    i = zeilenstart
    j = spaltenstart
    Do While i <= max_r
        Do While j <= max_sp
            If Cells(i, j).Value <> "" Then
                ic = ic + 1
            End If
            j = j + 1
        Loop
        
        If ic = 0 Then
            emptyrowarray(i) = 1
            bE = True
        End If
        
        ic = 0
        i = i + 1
        j = spaltenstart
    Loop
    
    '*******************************************************************************************
    'Anwender befragen, ob Leerzeilen bzw. -spalten mit angedruckt werden sollen
    'ggf. L|fffd|schen der leeren Zeilen und Spalten
    With ThisWorkbook.Worksheets("Druck")
        If bE = True Then
            str_MsgAntwort = MsgBox("Wichtiger Hinweis:" & Chr(10) & Chr(10) & _
                                    "Es existieren Mitarbeiter und / oder Lohnarten ohne Werte, " & Chr(10) & _
                                    "wollen Sie diese mit ausgeben lassen?" & Chr(10), _
                                    vbYesNoCancel + vbQuestion, _
                                    TOOL_HDR)
        Else
            str_MsgAntwort = 6
        End If
        
        Select Case str_MsgAntwort
            Case 6 'Blende nichts aus
                bRC = True
            Case 7 'Blende Leerzeilen und Spalten aus
                idel = 0
                
                For r = zeilenstart To max_r
                    If emptyrowarray(r) = 1 Then
                        .Range(Cells((r - idel), 1), Cells((r - idel), max_sp)).DELETE
                        max_r = max_r - 1
                        idel = idel + 1
                    End If
                Next r
                
                If idel > 0 Then
                    ' max_r um 1 hochz|fffd|hlen, wenn Zeilen gel|fffd|scht wurden, sonst gibt es Konstellationen, in denen in f|fffd|r die letzte Zeile anstatt der erfassten Werte die Spaltensummen angedruckt werden
                    ' n|fffd|mlich dann, wenn vor der letzten erfassten Zeile eine leere Zeile steht.
                    max_r = max_r + 1
                End If
                
                idel = 0
                For c = spaltenstart To max_sp
                    If emptycolarray(c) = 1 Then
                        .Range(Cells(1, (c - idel)), Cells(max_r, (c - idel))).DELETE
                        max_sp = max_sp - 1
                        idel = idel + 1
                    End If
                Next c
                
                idel = 0
                bRC = True
            Case Else 'Kein Druck, da Abbruch
                bRC = False
        End Select
    End With
    
    '*******************************************************************************************
    'Blattsummen und Gesamtsummen anlegen
    If str_MsgAntwort > 5 Then
       With ThisWorkbook.Worksheets("Druck")
            temp_einzuf_spalten = (max_sp - spaltenstart) / intSLAS
            
            '1. Summenspalten f|fffd|r Zeilensummen (Mitarbeiter) pro Blatt einf|fffd|gen
            For o = spaltenstart To (max_sp + temp_einzuf_spalten)
                If (o - spaltenstart + 1) Mod intSLAS = 0 And max_sp > 10 And o > spaltenstart Then
                    .Columns(o).Insert Shift:=xlShiftToLeft
                    max_sp = max_sp + 1
                    .Range(Cells(1, o), Cells(zeilenstart - 1, o)).Merge
                    .Range(Cells(zeilenstart, o), Cells(max_r, o)).NumberFormat = "0.00"
                    Cells(1, o).Value = "Summe" & VBA.Chr(10) & "Mitarbeiter" & VBA.Chr(10) & "pro Blatt:"
                    o = o + 1
                End If
            Next o
            
            If (WorksheetFunction.CountA(.Range("A6:IV6")) - spaltenstart - 2) Mod 8 <> 0 Then
                .Columns(max_sp + spaltenstart).Insert
                max_sp = max_sp + 1
                .Range(Cells(zeilenstart, max_sp), Cells(max_r, max_sp)).NumberFormat = "0.00"
                .Range(Cells(1, max_sp), Cells(zeilenstart - 1, max_sp)).Merge
                .Range(Cells(1, max_sp), Cells(zeilenstart - 1, max_sp)).Interior.Color = clrFarbeHintergrund
                Cells(1, max_sp).Value = "Summe" & VBA.Chr(10) & "Mitarbeiter" & VBA.Chr(10) & "pro Blatt:"
            End If
            
            '2. Abschlusssummenspalte f|fffd|r Mitarbeiter einf|fffd|gen
            .Columns(max_sp + spaltenstart).Insert
            .Columns(max_sp + spaltenstart).Font.Italic = True
            max_sp = max_sp + 1
            .Range(Cells(1, max_sp), Cells(zeilenstart - 1, max_sp)).Merge
            .Range(Cells(1, max_sp), Cells(zeilenstart - 1, max_sp)).Interior.Color = clrFarbeHintergrund
            .Range(Cells(zeilenstart, max_sp), Cells(zeilenstart + max_r, max_sp)).NumberFormat = "0.00"
            Cells(1, max_sp).Value = "Summe" & VBA.Chr(10) & "Mitarbeiter" & VBA.Chr(10) & "gesamt:"
            Cells(1, max_sp).Font.Italic = True

            '3. Summenzeilen f|fffd|r LA_Summen pro Blatt einf|fffd|gen
            For p = 0 To (max_r + (max_r / 25) + 1)
                If p Mod 25 = 0 And max_r > 25 And p > 0 Then
                    .Rows(p + zeilenstart - 1).Insert
                    max_r = max_r + 1
                    .Range(Cells(p + zeilenstart - 1, 1), Cells(p + zeilenstart - 1, spaltenstart - 2)).Merge
                    .Range(Cells(p + zeilenstart - 1, spaltenstart), Cells(p + zeilenstart - 1, max_sp)).NumberFormat = "0.00"
                    Cells(p + zeilenstart - 1, 1).Value = "Summe LA pro Blatt:"
                    p = p + 1
                End If
            Next p
            
            If max_r Mod 25 <> 0 Then
                max_r = max_r + 1
                .Rows(max_r).Insert
                .Range(Cells(max_r, 1), Cells(max_r, spaltenstart - 2)).Merge
                .Range(Cells(max_r, spaltenstart), Cells(max_r, max_sp)).NumberFormat = "0.00"
                Cells(max_r, 1).Value = "Summe LA pro Blatt:"
            End If
            
            '4. Abschlusssummenzeilen einf|fffd|gen "Summe gesamt"
            max_r = max_r + 1 'Zeile f|fffd|r "Summe LA gesamt"
            .Rows(max_r).Insert
            .Rows(max_r).Font.Italic = True
            .Range(Cells(max_r, spaltenstart), Cells(max_r, max_sp)).NumberFormat = "0.00"
            .Range(Cells(max_r, 1), Cells(max_r, spaltenstart - 2)).Merge
            Cells(max_r, 1).Value = "Summe LA gesamt:"
            
            max_r = max_r + 1 'Zeile f|fffd|r "Summe gesamt"
            .Rows(max_r).Insert
            .Range(Cells(max_r, spaltenstart), Cells(max_r, max_sp)).NumberFormat = "0.00"
            .Range(Cells(max_r, 1), Cells(max_r, spaltenstart - 2)).Merge
            .Range(Cells(max_r, 1), Cells(max_r, spaltenstart - 2)).Font.Bold = True
            Cells(max_r, 1).Value = "Summe gesamt:"
            
            '5. Abschlussformatierung der Kopfzeilen 1-7
            .Range(Cells(1, 1), Cells(zeilenstart - 1, spaltenstart - 1)).HorizontalAlignment = xlLeft
            .Range(Cells(1, 1), Cells(zeilenstart - 1, spaltenstart - 1)).VerticalAlignment = xlTop
            .Range(Cells(1, spaltenstart), Cells(zeilenstart - 1, max_sp)).HorizontalAlignment = xlCenter
            .Range(Cells(1, spaltenstart), Cells(zeilenstart - 1, max_sp)).VerticalAlignment = xlTop
        End With

        '6. Summenberechnung
        
        '6a. Einzelsumme Mitarbeiter (Zeilensumme pro Blatt)
        x = zeilenstart
        y = spaltenstart
        temp = 0
        
        Do While x <= max_r 'Zeilendurchlauf
            Do While y <= max_sp 'Spaltendurchlauf
                If Cells(x, y).Value <> "" Then
                    temp = temp + CDbl(Cells(x, y).Value)
                End If
                
                'Zeilensummenwert an Summenspalte pro Blatt |fffd|bergeben
                If ((y - spaltenstart + 1) Mod intSLAS = 0) Or (y = max_sp - 1) Then
                    If temp = 0 Then
                        Cells(x, y).Value = ""
                    Else
                        Cells(x, y).Value = temp
                        Cells(x, y).Value = VBA.Format(Cells(x, y).Value, "#,##0.00")
                        Cells(x, y).HorizontalAlignment = xlRight
                    End If
                        temp = 0
                End If
                y = y + 1
            Loop
            
            'N|fffd|chste Zeile
            y = spaltenstart
            temp = 0
            x = x + 1
            If (x - zeilenstart + 1) Mod 25 = 0 Then
                x = x + 1
            End If
        Loop
        
        '6b. Einzelsumme Lohnart (Spaltensumme pro Blatt)
        temp = 0
        x = zeilenstart
        y = spaltenstart
        
        Do While y <= max_sp - 2 'Spaltendruchlauf
            Do While x <= max_r 'Zeilendurchlauf
                If Cells(x, y).Value <> "" Then
                    temp = temp + CDbl(Cells(x, y).Value)
                End If
                
                'Spaltensummenwert an Summenzeile pro Blatt |fffd|bergeben
                If ((x - zeilenstart + 1) Mod 25 = 0) Or (x = max_r - 2) Then
                    If temp = 0 Then
                        Cells(x, y).Value = ""
                    Else
                      Cells(x, y).Value = temp
                      Cells(x, y).Value = VBA.Format(Cells(x, y).Value, "#,##0.00")
                      Cells(x, y).HorizontalAlignment = xlRight
                    End If
                        temp = 0
                End If
                x = x + 1
            Loop
            
            'N|fffd|chste Spalte
            x = zeilenstart
            temp = 0
            y = y + 1
            If (y - spaltenstart + 1) Mod intSLAS = 0 Then
                y = y + 1
            End If
        Loop
        
        '6c. Gesamtsumme f|fffd|r die LA-Spalte erstellen
        temp = 0
        x = zeilenstart
        y = spaltenstart
        Do While y <= max_sp - 2
            Do While x <= max_r
                If (((x - zeilenstart + 1) Mod 25 = 0) And (x > zeilenstart)) Or (x = max_r - 2) Then
                    If Cells(x, y).Value <> "" Then
                        temp = temp + CDbl(Cells(x, y).Value)
                    End If
                End If
                x = x + 1
            Loop
            
            If temp = 0 Then
                Cells(max_r - 1, y).Value = ""
            Else
                Cells(max_r - 1, y).Value = temp
                Cells(max_r - 1, y).Value = VBA.Format(Cells(max_r - 1, y).Value, "#,##0.00")
                Cells(max_r - 1, y).HorizontalAlignment = xlRight
            End If
            
            'N|fffd|chste Spalte
            y = y + 1
            x = (zeilenstart)
            temp = 0
        Loop
        
        '6d. Gesamtsumme f|fffd|r die MA-Zeile (Bewegungsdaten) erstellen
        temp = 0
        x = zeilenstart
        y = spaltenstart
        
        Do While x <= max_r - 3
            Do While y <= max_sp
                If ((y - spaltenstart + 1) Mod intSLAS = 0 And y > spaltenstart) Or y = max_sp - 1 Then
                    If Cells(x, y).Value <> "" Then
                        temp = temp + CDbl(Cells(x, y).Value)
                    End If
                End If
                y = y + 1
            Loop
            
            If temp = 0 Then
                Cells(x, max_sp).Value = ""
            Else
                Cells(x, max_sp).Value = temp
                Cells(x, max_sp).Value = VBA.Format(Cells(x, max_sp).Value, "#,##0.00")
                Cells(x, max_sp).HorizontalAlignment = xlRight
            End If
            
            'N|fffd|chste Zeile
            temp = 0
            If (x - zeilenstart + 2) Mod 25 = 0 And x <> zeilenstart Then
                x = x + 1
            End If
            x = x + 1
            y = (spaltenstart)
        Loop
        
        '6e. Gesamtabschlusssumme erstellen
        x = zeilenstart
        y = spaltenstart
        temp = 0
        
        Do While x < max_r
            If Cells(x, max_sp).Value <> "" Then
                temp = temp + CDbl(Cells(x, max_sp).Value)
            End If
            x = x + 1
        Loop
        
        Cells(max_r, max_sp).Value = temp
        Cells(max_r, max_sp).Font.Bold = True
        Cells(max_r, max_sp).Value = VBA.Format(Cells(max_r, max_sp).Value, "#,##0.00")
        Cells(max_r, max_sp).HorizontalAlignment = xlRight
        temp = 0
        
        '7. Abschlie|fffd|ende Formatierung der Summenspalten
        With ThisWorkbook.Worksheets("Druck")
            .Range(Cells(max_r - 1, 1), Cells(max_r - 1, max_sp - 1)).Borders(xlEdgeTop).Color = vbBlack
            .Range(Cells(max_r - 1, 1), Cells(max_r - 1, max_sp)).Font.Italic = True
            .Range(Cells(max_r, 1), Cells(max_r, max_sp)).Borders(xlEdgeTop).LineStyle = xlDouble
            .Range(Cells(max_r, 1), Cells(max_r, max_sp)).Borders(xlEdgeTop).Color = vbBlack
            .Range(Cells(zeilenstart, max_sp), Cells(max_r - 2, max_sp)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Range(Cells(zeilenstart, max_sp), Cells(max_r - 2, max_sp)).Borders(xlEdgeLeft).Color = vbBlack
            .Range(Cells(zeilenstart, max_sp), Cells(max_r - 2, max_sp)).Font.Italic = True
            .Range(Cells(zeilenstart, spaltenstart - 1), Cells(zeilenstart, spaltenstart - 1)).Copy
            .Range(Cells(max_r - 3, spaltenstart - 1), Cells(max_r, spaltenstart - 1)).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
            .Range(Cells(max_r - 1, 1), Cells(max_r - 1, max_sp - 1)).Borders(xlEdgeTop).Color = vbBlack
            .Range(Cells(max_r, 1), Cells(max_r, max_sp)).Borders(xlEdgeTop).LineStyle = xlDouble
            .Range(Cells(max_r, 1), Cells(max_r, max_sp)).Borders(xlEdgeTop).Color = vbBlack
            .Range(Cells(1, max_sp), Cells(max_r - 2, max_sp)).Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Range(Cells(1, max_sp), Cells(max_r - 2, max_sp)).Borders(xlEdgeLeft).Color = vbBlack
        End With
    End If
    
    '*******************************************************************************************
    'Zeilenhinterlegung Wei|fffd|/Grau
    For m = zeilenstart To ActiveSheet.UsedRange.Rows.count Step 1
        ActiveSheet.Rows(m).Interior.ColorIndex = 0
    Next m
    
    For n = (zeilenstart + 1) To ActiveSheet.UsedRange.Rows.count Step 2
        ActiveSheet.Rows(n).Interior.Color = clrMaZeileGrau
    Next n

    '*******************************************************************************************
    'Zellenkontrolle aktivieren
    Application.EnableEvents = True
    
    '*******************************************************************************************
    'Sicherheitsabfrage vor Druckaufbereitung
    If (max_r < zeilenstart Or max_sp < spaltenstart) Then
        str_MsgAntwort = MsgBox("Wichtiger Hinweis:" & Chr(10) & Chr(10) & _
                                "Sie haben keine Werte erfasst und wollen Leerzeilen / -spalten ausblenden lassen, " & _
                                "es w|fffd|rde alles ausgeblendet werden." & Chr(10) & " Druck wurde deswegen abgebrochen!", _
                                vbOKOnly + vbExclamation, _
                                "Drucken")
        bRC = False
    Else
        With ThisWorkbook.Worksheets("Druck").PageSetup
            .PrintArea = Range(Cells(1, 1), Cells(max_r, max_sp)).Address
            .PrintTitleColumns = "$A:$" & str_Temp
            .PrintTitleRows = "$1:$6"
            .LeftHeader = TOOL_HDR
            
            If (VBA.Right(str_Druck_TB, VBA.Len(str_Druck_TB) - VBA.InStr(str_Druck_TB, "_")) <> "0") Then
            'Nachberechnungsmonat wird gedruckt
            .CenterHeader = VBA.Chr(10) & "&""Arial,Fett""&12" & Mdl_RibbonX.SelectedAbrMonat _
                            & " " & "Nachberechung: " & Mdl_RibbonX.SelectedNachMonat
            Else
            'Abrechnungsmonat wird gedruckt
            .CenterHeader = VBA.Chr(10) & "&""Arial,Fett""&12" & "Abrechnung: " & Mdl_RibbonX.SelectedAbrMonat
            End If
            
            .RightHeader = "Gedruckt am: " & Now
            .LeftFooter = "Seite &P von &N"
            
            If Dir("C:\Windows\Fonts\DATEV___.TTF") <> "" Or Dir("C:\Winnt\Fonts\DATEV___.TTF") <> "" Then
                .RightFooter = "&""DATEVLogo""&32" & "D"
            Else
                .RightFooter = "|fffd| DATEV eG"
            End If
            
            .Orientation = xlLandscape
        End With
    End If
    
    '*******************************************************************************************
    'Druck mit Vorschaufunktion
    If bRC = True Then
        Worksheets(str_Druck_TB).Activate
        Application.ScreenUpdating = True
        ThisWorkbook.Worksheets("Druck").PrintPreview
        Application.ScreenUpdating = False
    End If
    
    '*******************************************************************************************
    'Vernichtung der Drucktabelle und Abschlussarbeiten
    Application.DisplayAlerts = False
    ThisWorkbook.Worksheets("Druck").DELETE
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Mdl_Workbook_Initialisierung.DATEVprint = False
End Sub

'L|fffd|schen eines alten Druckblattes
Private Sub DruckblattLoeschen()
    Dim ws As Worksheet
    
    On Error GoTo 0 'Fehlerhandling
    
    For Each ws In Worksheets
        If ws.name = "Druck" Then
            Application.DisplayAlerts = False
            ws.DELETE
            Application.DisplayAlerts = True
            Exit For
        End If
    Next ws
End Sub
Attribute VB_Name = "Mdl_Eingabe_pruefen"
Option Explicit
Option Base 1

'Konstanten f|fffd|r die Ausgabe der Fehlermeldungen
Public Const PersNr_max_Zeichen = 5
Public Const Nachname_max_Zeichen = 30
Public Const Vorname_max_Zeichen = 30
Public Const Kostenstelle_max_Zeichen = 13
Public Const Zeile_BS = 5

Private VKS As Byte
Private NKS As Byte
Private bln_Fehler As Boolean

Public Function EingabeKontrolle(ByVal rng_AktiverRange As Range, ByVal str_Position As String, ByRef Tabelle As Object, bln_wbOpen As Boolean)
    Dim str_ZI() As String
    Dim PNR_tmp As Long
    Dim rng_AktiveZelle As Range
    Dim str_Antwort As String
    Dim str_Eingabe As String
    Dim str_Vorzeichen As String
    Dim i As Byte
    Dim PunktZaehler As Byte
    Dim KommaZaehler As Byte
    Dim LeerZaehler As Byte
    Dim bln_Lodas As Boolean
    Dim Spalte As String
    Dim BS_Wert As Byte
    Dim TZ_Punkt As Byte

    str_Vorzeichen = ""
    'Standard f|fffd|r LuG
    VKS = 5 'Anzahl der zul|fffd|ssigen Vorkommastellen
    NKS = 2 'Anzahl der zul|fffd|ssigen Nachkommastellen
    bln_Lodas = False
    
    If ((Verwaltungsdaten.Cells(5, 2).Value = "LODAS")) Then bln_Lodas = True
    
    'Hinweismeldung ausschalten, dass Zahlen ein Textformat besitzen
    On Error Resume Next
    Application.ErrorCheckingOptions.NumberAsText = False
    On Error GoTo 0

    For Each rng_AktiveZelle In rng_AktiverRange
        On Error Resume Next
        rng_AktiveZelle.NumberFormat = "@"
        On Error GoTo 0
        'Spaltenbuchstabe ermitteln
        Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(rng_AktiveZelle.Column)
        
        If (rng_AktiveZelle.Value <> "") Then
            'Pr|fffd|fen, ob Punkt als ung|fffd|ltiges Trennzeichen verwendet wird
            If bln_wbOpen = False Then
                If ((VBA.InStr(rng_AktiveZelle.Value, ".") > 0) And (rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column > 17)) Then
                    If (VBA.Len(rng_AktiveZelle.Value) - VBA.InStr(rng_AktiveZelle.Value, ".") < 3) Then
                        Call Fehlermeldungen(28)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
                End If
                If ((rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column > 17)) Then
                    PunktZaehler = 0
                    KommaZaehler = 0
                    LeerZaehler = 0
                    For i = 1 To Len(rng_AktiveZelle.Value)
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = "." Then PunktZaehler = PunktZaehler + 1
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = "," Then KommaZaehler = KommaZaehler + 1
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = " " Then LeerZaehler = LeerZaehler + 1
                    Next i
                    If ((PunktZaehler = 1 And KommaZaehler = 1) And ((VBA.InStr(rng_AktiveZelle.Value, ",")) - (VBA.InStr(rng_AktiveZelle.Value, ".")) <= 3)) Then
                        Call Fehlermeldungen(25)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
                    If (PunktZaehler > 1 Or KommaZaehler > 1) Then
                        Call Fehlermeldungen(29)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
                    If (LeerZaehler > 0) Then
                        Call Fehlermeldungen(30)
                        Call zelle_leeren(rng_AktiverRange)
                    End If
                End If
            Else
                If ((VBA.InStr(rng_AktiveZelle.Value, ".") > 0) And (rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column > 17)) Then
                    If (VBA.Len(rng_AktiveZelle.Value) - VBA.InStr(rng_AktiveZelle.Value, ".") < 3) Then
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                End If
                If ((rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column > 17)) Then
                    PunktZaehler = 0
                    KommaZaehler = 0
                    LeerZaehler = 0
                    For i = 1 To Len(rng_AktiveZelle.Value)
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = "." Then PunktZaehler = PunktZaehler + 1
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = "," Then KommaZaehler = KommaZaehler + 1
                        If VBA.Mid(rng_AktiveZelle.Value, i, 1) = " " Then LeerZaehler = LeerZaehler + 1
                    Next i
                    If ((PunktZaehler = 1 And KommaZaehler = 1) And ((VBA.InStr(rng_AktiveZelle.Value, ",")) - (VBA.InStr(rng_AktiveZelle.Value, ".")) <= 3)) Then
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                    If (PunktZaehler > 1 Or KommaZaehler > 1) Then
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                    If (LeerZaehler > 0) Then
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                End If
            End If
            
            'Eingabewert an der Trennstelle aufteilen
            If bln_wbOpen = False Then
                If (VBA.InStr(rng_AktiveZelle.Value, "-") = 1) Then
                    str_Vorzeichen = "-"
                    If (VBA.InStr(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), ",") = 0) Then
                        str_ZI = Split(VBA.Format(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), "#,##0.00"), ",")
                    Else
                        str_ZI = Split(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), ",")
                        If VBA.Len(str_ZI(0)) = 0 Then
                            Call Fehlermeldungen(25)
                            Call zelle_leeren(rng_AktiverRange)
                            Exit Function
                        End If
                    End If
                Else
                    If (VBA.InStr(rng_AktiveZelle.Value, ",") = 0) Then
                        str_ZI = Split(VBA.Format(rng_AktiveZelle.Value, "#,##0.00"), ",")
                    Else
                        str_ZI = Split(rng_AktiveZelle.Value, ",")
                    End If
                    If VBA.Len(str_ZI(0)) = 0 Then
                        Call Fehlermeldungen(25)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
                End If
            Else
                If (VBA.InStr(rng_AktiveZelle.Value, "-") = 1) Then
                    str_Vorzeichen = "-"
                    If (VBA.InStr(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), ",") = 0) Then
                        str_ZI = Split(VBA.Format(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), "#,##0.00"), ",")
                    Else
                        str_ZI = Split(VBA.Mid(rng_AktiveZelle.Value, 2, Len(rng_AktiveZelle.Value)), ",")
                        If VBA.Len(str_ZI(0)) = 0 Then
                            rng_AktiveZelle.Interior.Color = vbRed
                            bln_Fehler = True
                            GoTo NEXT_CELL
                        End If
                    End If
                Else
                    If (VBA.InStr(rng_AktiveZelle.Value, ",") = 0) Then
                        str_ZI = Split(VBA.Format(rng_AktiveZelle.Value, "#,##0.00"), ",")
                    Else
                        str_ZI = Split(rng_AktiveZelle.Value, ",")
                    End If
                    If VBA.Len(str_ZI(0)) = 0 Then
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                End If
            End If
        Else
            'Pr|fffd|fe, ob Bearbeitungsschl|fffd|ssel leer ist -> Gebe Hinweismeldung aus
            If ((bln_Lodas) And (rng_AktiveZelle.Row = 5) And (rng_AktiveZelle.Column > 17)) Then
                Call Fehlermeldungen(27)
                Call zelle_leeren(rng_AktiverRange)
                Exit Function
            Else
                'bei Range n|fffd|chste Zelle ausw|fffd|hlen
                GoTo NEXT_CELL
            End If
        End If
    
    '**********************Pr|fffd|fungen im Bereich der Mitarbeiterinformationen**************************************
        If ((rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column < 18)) Then
            If (Len(rng_AktiveZelle.Value) <> 0) Then
                Select Case rng_AktiveZelle.Column 'anhand der Spalte erkennen um was es sich handelt
                
                Case 3  'Spalte in welcher die Personalnummer steht
                    'PersNr |fffd|berpr|fffd|fen - max. 5 Ziffern
                    If IsNumeric(rng_AktiveZelle.Value) Then
                        If (Len(rng_AktiveZelle.Value) <= 5) Then
                            If (Not (VBA.Mid(rng_AktiveZelle.Value, 1, 1) = "-")) Then
                                If (PNR_vorhanden(rng_AktiveZelle.Value, rng_AktiveZelle.Row)) Then
                                    str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                                                         "Die angegebene Personalnummer existiert bereits." & vbCrLf & _
                                                         "Wollen Sie diese wirklich ein weiteres mal anlegen?", _
                                                         vbYesNo + vbQuestion, _
                                                         TOOL_HDR)
                                    If (str_Antwort = vbNo) Then
                                        'Call Fehlermeldungen(1)
                                        Call zelle_leeren(rng_AktiverRange)
                                        Exit Function
                                    End If
                                End If
                            Else
                                Call Fehlermeldungen(2)
                                Call zelle_leeren(rng_AktiverRange)
                                Exit Function
                            End If
                        Else
                            Call Fehlermeldungen(4)
                            Call zelle_leeren(rng_AktiverRange)
                            Exit Function
                        End If
                    Else
                        Call Fehlermeldungen(3)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
                    
                    'Personalnummer formatieren
                    Application.EnableEvents = False 'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
                    PNR_tmp = CLng(rng_AktiveZelle.Value)
                    rng_AktiveZelle.NumberFormat = "@"
                    rng_AktiveZelle.Value = PNR_tmp
                    Application.EnableEvents = True 'aktivieren
                            
                Case 5  'Spalte in welcher der Nachname steht
                    'Nachname |fffd|berpr|fffd|fen - max. 30 Buchstaben
                    If Not IsNumeric(rng_AktiveZelle.Value) Then
                        If (Len(rng_AktiveZelle.Value) > 30) Then
                            Call Fehlermeldungen(6)
                            Call zelle_leeren(rng_AktiverRange)
                            Exit Function
                        End If
                    Else
                        Call Fehlermeldungen(5)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
            
                Case 10 'Spalte in welcher der Vorname steht
                    'Vorname |fffd|berpr|fffd|fen - max. 30 Buchstaben
                    If Not IsNumeric(rng_AktiveZelle.Value) Then
                        If (Len(rng_AktiveZelle.Value) > 30) Then
                            Call Fehlermeldungen(9)
                            Call zelle_leeren(rng_AktiverRange)
                            Exit Function
                        End If
                    Else
                        Call Fehlermeldungen(8)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
            
                Case 15 'Spalte in welcher die Kostenstelle steht
                    'Kostenstelle |fffd|berpr|fffd|fen - max 8 alphanumerische Zeichen
                    If (Len(rng_AktiveZelle.Value)) > Kostenstelle_max_Zeichen Then
                        Call Fehlermeldungen(10)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If
            End Select
        Else 'Falls PNR leer ist (Mussfeld)
            If (rng_AktiveZelle.Column = 3) Then
                Call Fehlermeldungen(7)
                Call zelle_leeren(rng_AktiverRange)
                Exit Function
            End If
        End If
    
    '**********************Pr|fffd|fungen im Bereich der Lohninformationen*************************************
    
        'Bearbeitungsschl|fffd|ssel immer pr|fffd|fen(nur in LODAS)
        ElseIf ((bln_Lodas) And (rng_AktiveZelle.Column > 17)) Then
            If (Tabelle.Cells(Zeile_BS, rng_AktiveZelle.Column).Value <> "") Then
                BS_Wert = Tabelle.Cells(Zeile_BS, rng_AktiveZelle.Column).Value
            Else
                Call Fehlermeldungen(12)
                Tabelle.Cells(Zeile_BS, rng_AktiveZelle.Column).Select
                Exit Function
            End If
            ' Zuerst pr|fffd|fen, ob Wert numerisch ist)
            If (IsNumeric(BS_Wert)) Then
                ' zul|fffd|ssig sind keine Nachkommastellen
                If (VBA.InStr(BS_Wert, ",") = 0) Then
                    '|fffd|berpr|fffd|fen der L|fffd|nge des Wertes (maximal 2-stellig)
                    If (Len(BS_Wert) <= 2) Then
                        '|fffd|berpr|fffd|fen der Gr|fffd||fffd|e des Wertes
                        If ((CLng(BS_Wert) <= 96) And _
                            (CLng(BS_Wert) >= 1)) Then
                            '|fffd|berpr|fffd|fen, ob negativer Wert
                            If ((VBA.Mid(BS_Wert, 1, 1) = "-")) Then
                                Call Fehlermeldungen(11)
                                Call zelle_leeren(Spalte & CVar(Zeile_BS))
                                Exit Function
                            End If
                            'Vorkomma und Nachkommastellen festlegen
                            If ((BS_Wert = 1) Or (BS_Wert = 4) Or (BS_Wert = 5) Or (BS_Wert = 6) Or (BS_Wert = 7) Or _
                                (BS_Wert = 8) Or (BS_Wert = 9) Or _
                                (BS_Wert = 17) Or (BS_Wert = 18) Or (BS_Wert = 20) Or (BS_Wert = 22) Or (BS_Wert = 24) Or _
                                (BS_Wert = 25) Or (BS_Wert = 41) Or (BS_Wert = 42) Or (BS_Wert = 63) Or _
                                (BS_Wert = 66) Or (BS_Wert = 74) Or (BS_Wert = 75) Or (BS_Wert = 76) Or _
                                (BS_Wert = 77) Or (BS_Wert = 78) Or (BS_Wert = 79) Or (BS_Wert = 89) Or _
                                (BS_Wert = 93) Or (BS_Wert = 95)) Then
                                VKS = 3
                                NKS = 2
                            End If
                            If ((BS_Wert = 2) Or (BS_Wert = 51)) Then
                                VKS = 6
                                NKS = 2
                            End If
                            If ((BS_Wert = 3) Or (BS_Wert = 52) Or (BS_Wert = 92)) Then
                                VKS = 7
                                NKS = 2
                            End If
                            If ((BS_Wert = 10) Or (BS_Wert = 23) Or (BS_Wert = 70) Or (BS_Wert = 71) Or _
                                (BS_Wert = 72) Or (BS_Wert = 73)) Then
                                VKS = 2
                                NKS = 1
                            End If
                            If ((BS_Wert = 31) Or (BS_Wert = 32) Or (BS_Wert = 33) Or (BS_Wert = 34) Or _
                                (BS_Wert = 35) Or (BS_Wert = 36) Or (BS_Wert = 37) Or (BS_Wert = 38)) Then
                                VKS = 7
                                NKS = 0
                            End If
                            If ((BS_Wert = 39)) Then
                                VKS = 5
                                NKS = 2
                            End If
                            If ((BS_Wert = 11) Or (BS_Wert = 40)) Then
                                VKS = 4
                                NKS = 0
                            End If
                            If ((BS_Wert = 12) Or (BS_Wert = 13) Or (BS_Wert = 14) Or (BS_Wert = 15) Or _
                                (BS_Wert = 16) Or (BS_Wert = 47) Or _
                                (BS_Wert = 48) Or (BS_Wert = 49) Or (BS_Wert = 80) Or (BS_Wert = 81) Or _
                                (BS_Wert = 82) Or (BS_Wert = 83) Or (BS_Wert = 84) Or (BS_Wert = 85) Or _
                                (BS_Wert = 86) Or (BS_Wert = 87) Or (BS_Wert = 88)) Then
                                VKS = 2
                                NKS = 0
                            End If
                            If ((BS_Wert = 19) Or (BS_Wert = 21) Or (BS_Wert = 62)) Then
                                VKS = 2
                                NKS = 2
                            End If
                            If ((BS_Wert = 45) Or (BS_Wert = 46) Or (BS_Wert = 90) Or (BS_Wert = 91)) Then
                                VKS = 1
                                NKS = 0
                            End If
                            If ((BS_Wert = 64) Or (BS_Wert = 69) Or (BS_Wert = 94)) Then
                                VKS = 4
                                NKS = 2
                            End If
                            If ((BS_Wert = 43) Or (BS_Wert = 44) Or (BS_Wert = 67) Or (BS_Wert = 68)) Then
                                VKS = 11
                                NKS = 0
                            End If
                            'Unzul|fffd|ssige BS, da nicht mehr verwendet
                            If ((BS_Wert = 26) Or (BS_Wert = 27) Or (BS_Wert = 28) Or (BS_Wert = 29) Or _
                                (BS_Wert = 30) Or (BS_Wert = 50) Or (BS_Wert = 53) Or (BS_Wert = 54) Or _
                                (BS_Wert = 55) Or (BS_Wert = 56) Or (BS_Wert = 57) Or (BS_Wert = 58) Or _
                                (BS_Wert = 59) Or (BS_Wert = 60) Or (BS_Wert = 61) Or (BS_Wert = 65) Or _
                                (BS_Wert = 96) Or (BS_Wert = 97) Or (BS_Wert = 98) Or (BS_Wert = 99)) Then
                                Call Fehlermeldungen(32)
                                Call zelle_leeren(Spalte & CVar(Zeile_BS))
                                Exit Function
                            End If
                            GoTo BEWEGUNGSDATEN
                        Else
                            Call Fehlermeldungen(12)
                            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True     'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
                            Tabelle.Cells(Zeile_BS, rng_AktiveZelle.Column).Value = ""
                            Tabelle.Cells(Zeile_BS, rng_AktiveZelle.Column).Select
                            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False    'nun kann man die Events wieder aktivieren
                            Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
                            Exit Function
                        End If
                    Else
                        Call Fehlermeldungen(13)
                        Call zelle_leeren(Spalte & CVar(Zeile_BS))
                        Exit Function
                    End If
                Else
                    Call Fehlermeldungen(14)
                    Call zelle_leeren(Spalte & CVar(Zeile_BS))
                    Exit Function
                End If
            Else
                Call Fehlermeldungen(15)
                Call zelle_leeren(Spalte & CVar(Zeile_BS))
                Exit Function
            End If
            'Zahlenformat des BS in Tabelle anpassen (geht nur, wenn ein Wert vorhanden ist)
            If ((bln_Lodas) And (rng_AktiveZelle.Row = 5) And (rng_AktiveZelle.Column > 17)) Then
                rng_AktiveZelle.NumberFormat = "#,##0"
            End If
    '**********************Pr|fffd|fungen im Bereich der Bewegungsdatenerfassung**************************************
        Else
BEWEGUNGSDATEN:
            If ((rng_AktiveZelle.Row > int_MAHDR) And (rng_AktiveZelle.Column > 17)) Then
                If bln_wbOpen = False Then
                ' Zuerst pr|fffd|fen, ob Wert numerisch ist)
                If (IsNumeric(rng_AktiveZelle.Value)) Then
                    '|fffd|berpr|fffd|fen der Gr|fffd||fffd|e des Wertes
                    If (Len(VBA.Format(str_ZI(0), "#,##")) > 3) Then TZ_Punkt = 1
                    If (Len(VBA.Format(str_ZI(0), "#,##")) > 7) Then TZ_Punkt = 2
                    If (Len(VBA.Format(str_ZI(0), "#,##")) > 11) Then TZ_Punkt = 3
                    If (Len(VBA.Format(str_ZI(0), "#,##")) <= VKS + CInt(TZ_Punkt)) Then
                        ' zul|fffd|ssig sind keine, 1 oder 2 Nachkommastellen
                        If ((Len(str_ZI(1)) <= NKS) Or (str_ZI(1) = "00")) Then
                            '|fffd|berpr|fffd|fen auf negatives Vorzeichen des Wertes
                            'If (Not (VBA.Mid(rng_AktiveZelle.Value, 1, 1) = "-")) Then
                                'Ist Wert = 0,00
    '                            If (VBA.Format(rng_AktiveZelle.Value, "#,##0.00") = "0,00") Then
    '                                Call Fehlermeldungen(26)
    '                                Call zelle_leeren(rng_AktiverRange)
    '                                Exit Function
    '                            End If
                            'Else
                            '    Call Fehlermeldungen(22)
                            '    Call zelle_leeren(rng_AktiverRange)
                            '    Exit Function
                            'End If
                        Else
                            Call Fehlermeldungen(24)
                            Call zelle_leeren(rng_AktiverRange)
                            Exit Function
                        End If
                    Else
                        Call Fehlermeldungen(23)
                        Call zelle_leeren(rng_AktiverRange)
                        Exit Function
                    End If '
                Else
                    Call Fehlermeldungen(25)
                    Call zelle_leeren(rng_AktiverRange)
                    Exit Function
                End If
                Else
                    'Zuerst pr|fffd|fen, ob Wert numerisch ist)
                    If (IsNumeric(rng_AktiveZelle.Value)) Then
                        '|fffd|berpr|fffd|fen der Gr|fffd||fffd|e des Wertes
                        If (Len(VBA.Format(str_ZI(0), "#,##")) > 3) Then TZ_Punkt = 1
                        If (Len(VBA.Format(str_ZI(0), "#,##")) > 7) Then TZ_Punkt = 2
                        If (Len(VBA.Format(str_ZI(0), "#,##")) > 11) Then TZ_Punkt = 3
                        If (Len(VBA.Format(str_ZI(0), "#,##")) <= VKS + CInt(TZ_Punkt)) Then
                            ' zul|fffd|ssig sind keine, 1 oder 2 Nachkommastellen
                            If ((Len(str_ZI(1)) <= NKS) Or (str_ZI(1) = "00")) Then
                                '|fffd|berpr|fffd|fen auf negatives Vorzeichen des Wertes
                                'If (Not (VBA.Mid(rng_AktiveZelle.Value, 1, 1) = "-")) Then
                                    'Ist Wert = 0,00
                                    If (VBA.Format(rng_AktiveZelle.Value, "#,##0.00") = "0,00") Then
                                        rng_AktiveZelle.Interior.Color = vbRed
                                        bln_Fehler = True
                                        GoTo NEXT_CELL
                                    End If
                                'Else
                                '    Call Fehlermeldungen(22)
                                '    Call zelle_leeren(rng_AktiverRange)
                                '    Exit Function
                                'End If
                            Else
                                rng_AktiveZelle.Interior.Color = vbRed
                                bln_Fehler = True
                                GoTo NEXT_CELL
                            End If
                        Else
                            rng_AktiveZelle.Interior.Color = vbRed
                            bln_Fehler = True
                            GoTo NEXT_CELL
                        End If '
                    Else
                        rng_AktiveZelle.Interior.Color = vbRed
                        bln_Fehler = True
                        GoTo NEXT_CELL
                    End If
                End If
            'Zahlenformat in Tabelle anpassen (geht nur, wenn ein Wert vorhanden ist)
            On Error Resume Next
            If (rng_AktiveZelle.AllowEdit = False) Then Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Tabelle)
            rng_AktiveZelle.NumberFormat = "@"
            If VBA.Len(str_ZI(0)) > 3 And VBA.Mid(str_ZI(0), 1, 1) <> "0" Then str_ZI(0) = VBA.Format(str_ZI(0), "#,##")
            If VBA.Len(str_ZI(0)) > 3 And VBA.Mid(str_ZI(0), 1, 1) = "0" Then str_ZI(0) = VBA.Format(str_ZI(0), "#,#0")
            If VBA.Len(str_ZI(0)) <= 3 Then str_ZI(0) = VBA.Format(str_ZI(0), "#,#0")
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
            If (NKS = 2) Then
                If VBA.Len(str_ZI(1)) = 1 Then str_ZI(1) = str_ZI(1) & "0"
                If VBA.Len(str_ZI(1)) = 0 Then str_ZI(1) = str_ZI(1) & "00"
            End If
            If (NKS = 1) Then
                If VBA.Len(str_ZI(1)) = 0 Then str_ZI(1) = str_ZI(1) & "0"
                If VBA.Len(str_ZI(1)) > 1 Then str_ZI(1) = VBA.Left(str_ZI(1), 1)
            End If
            If (NKS = 0) Then
                str_ZI(1) = ""
                rng_AktiveZelle.Value = str_Vorzeichen & str_ZI(0)
            Else
                rng_AktiveZelle.Value = str_Vorzeichen & str_ZI(0) & "," & str_ZI(1)
            End If
            str_Vorzeichen = "" 'Vorzeichen zur|fffd|cksetzen
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
            Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Tabelle)
            On Error GoTo 0
            End If
        End If
    
    'N|fffd|chste Zelle
NEXT_CELL:
    Next rng_AktiveZelle

    'Format des Eingabebreiches anpassen, z.B. bei Einf|fffd|gen |fffd|ber Copy-Paste
    Application.EnableEvents = False 'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    
    If bln_wbOpen = False Then
        Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    End If
    
    Application.EnableEvents = True 'nun kann man die Events wieder aktivieren
    'zuletzt aktive Zelle wieder markieren
    
    On Error Resume Next
    If Not (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_Position).Select
    Else
        rng_AktiverRange.Select
    End If
    On Error GoTo 0
    'Blattschutz aktivieren
    On Error Resume Next
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    On Error GoTo 0
End Function

Public Function zelle_leeren(ByVal rng_Zelle As Range)
    On Error Resume Next
    If (rng_Zelle.AllowEdit = False) Then Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(ActiveSheet)
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True     'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    rng_Zelle.Value = ""                                        'w|fffd|hrend man die Zelle leert
    rng_Zelle.Select                                            'und selektiert
    
    'Notwendige Formatierungen durchf|fffd|hren
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    Call Mdl_Formatierungsanweisungen.Hintergrund_MA_Zeile_festlegen
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren

    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False    'nun kann man die Events wieder aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    rng_Zelle.Select
    On Error GoTo 0
End Function

Public Function Fehlermeldungen(error_id)
    Dim Message As String
    Dim str_NKS As String
    Dim str_VKS As String
    
    If (VKS = 1) Then
        str_VKS = "Zul|fffd|ssig ist maximal " & CStr(VKS) & " Vorkommastelle."
    Else
        str_VKS = "Zul|fffd|ssig sind maximal " & CStr(VKS) & " Vorkommastellen."
    End If
    
    If (NKS = 1) Then
        str_NKS = "Zul|fffd|ssig ist maximal " & CStr(NKS) & " Nachkommastelle."
    Else
        str_NKS = "Zul|fffd|ssig sind maximal " & CStr(NKS) & " Nachkommastellen."
    End If
  
    Select Case error_id
        Case 1  'PersNr Fehler - PersNr ist bereits vergeben
                Message = "Die Eingabe in dem Feld Personalnummer ist ung|fffd|ltig." & vbCrLf & _
                          "Die Personalnummer ist bereits vergeben."
        Case 2  'PersNr Fehler - ung|fffd|ltiges Vorzeichen
                Message = "Die Eingabe in dem Feld Personalnummer ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind keine negativen Vorzeichen zul|fffd|ssig."
        Case 3  'PersNr Fehler - ung|fffd|ltige Zeichen
                Message = "Die Eingabe in dem Feld Personalnummer ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur Ziffern."
        Case 4  'PersNr Fehler - zu viele Zeichen
                Message = "Die Eingabe in dem Feld Personalnummer ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur " & PersNr_max_Zeichen & " Ziffern."
        Case 5  'Nachname Fehler - ung|fffd|ltige Zeichen
                Message = "Die Eingabe in dem Feld Nachname ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur Buchstaben."
        Case 6  'Nachname Fehler - zu viele Zeichen
                Message = "Die Eingabe in dem Feld Nachname ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur " & Nachname_max_Zeichen & " Buchstaben."
        Case 7  'PersNr Fehler - PersNr ist bereits vergeben
                Message = "Keine Eingabe im Feld Personalnummer ist ung|fffd|ltig." & vbCrLf & _
                          "Die Personalnummer ist ein Mussfeld."
        Case 8  'Vorname Fehler - ung|fffd|ltige Zeichen
                Message = "Die Eingabe in dem Feld Vorname ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur Buchstaben."
        Case 9  'Vorname Fehler - zu viele Zeichen
                Message = "Die Eingabe in dem Feld Vorname ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind nur " & Vorname_max_Zeichen & " Buchstaben."
        Case 10 'Kostenstelle Fehler - zu viele Zeichen
                Message = "Die Eingabe in dem Feld Kostenstelle ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind maximal " & Kostenstelle_max_Zeichen & " Zeichen."
        Case 11 'BS Fehler - ung|fffd|ltiges Vorzeichen
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind keine negativen Vorzeichen zul|fffd|ssig."
        Case 12 'BS Fehler - ung|fffd|ltige Wertgr|fffd||fffd|e
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Es ist nur ein Wert zwischen 1 und 95 zul|fffd|ssig."
        Case 13 'BS Fehler - ung|fffd|ltige Wertl|fffd|nge
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind maximal 2-stellige Werte zul|fffd|ssig."
        Case 14 'BS Fehler - Nachkommawerte unzul|fffd|ssig
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind nur Ganzzahlen zul|fffd|ssig."
        Case 15 'BS Fehler - ung|fffd|ltige Zeichen
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind nur numerische Werte zul|fffd|ssig."
        Case 16 'Abw. Lohnver|fffd|nderung Fehler - Zu viele Vorkommastellen
                Message = "Das Feld Abweichende Lohnver|fffd|nderung enth|fffd|lt eine unzul|fffd|ssige Anzahl Vorkommastellen." & vbCrLf & _
                          "Zul|fffd|ssig sind maximal 3 Vorkommastellen."
        Case 17 'Abw. Lohnver|fffd|nderung Fehler - zu viele Nachkommastellen
                Message = "Die Eingabe in dem Feld Abweichende Lohnver|fffd|nderung ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind maximal 2 Nachkommastellen."
        Case 18 'Abw. Faktor Fehler - Zu viele Vorkommastellen
                Message = "Das Feld Abweichender Faktor enth|fffd|lt eine unzul|fffd|ssige Anzahl Vorkommastellen." & vbCrLf & _
                          "Zul|fffd|ssig sind maximal 5 Vorkommastellen."
        Case 19 'Abw. Faktor Fehler - ung|fffd|ltige Zeichen
                Message = "Das Feld Abweichender Faktor enth|fffd|lt einen unzul|fffd|ssigen Wert." & vbCrLf & _
                          "Zul|fffd|ssig sind nur numerische Werte."
        Case 20 'Abw. Faktor Fehler - zu viele Nachkommastellen
                Message = "Die Eingabe in dem Feld Abweichender Faktor ist ung|fffd|ltig." & vbCrLf & _
                          "Zul|fffd|ssig sind maximal 2 Nachkommastellen."
        Case 21 'Abw. Lohnver|fffd|nderung Fehler - ung|fffd|ltige Zeichen
                Message = "Das Feld Abweichende Lohnver|fffd|nderung enth|fffd|lt einen unzul|fffd|ssigen Wert." & vbCrLf & _
                          "Zul|fffd|ssig sind nur numerische Werte."
        Case 22 'BDWert Fehler - ung|fffd|ltiges Vorzeichen
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind keine negativen Vorzeichen zul|fffd|ssig."
        Case 23 'BDWert Fehler - ung|fffd|ltige Wertgr|fffd||fffd|e
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          str_VKS
        Case 24 'BDWert Fehler - zu viele Nachkommastellen1234
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          str_NKS
        Case 25 'BDWert Fehler - ung|fffd|ltige Zeichen
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Es sind nur numerische Werte zul|fffd|ssig."
        Case 26 'BDWert Fehler - ung|fffd|ltige Wert 0
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Eine Eingabe von 0 ist nicht zul|fffd|ssig."
        Case 27 'BS Fehler - kein BS vorhanden
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Ein leeres Feld Bearbeitungsschl|fffd|ssel ist nicht zul|fffd|ssig."
        Case 28 'BDWert Fehler - Punkt nicht als Trennzeichen erlaubt
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Ein Punkt als Trennzeichen ist nicht zul|fffd|ssig."
        Case 29 'BDWert Fehler - mehrfache Trennzeichen
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Die mehrfache Verwendung von Trennzeichen ist nicht zul|fffd|ssig."
        Case 30 'BDWert Fehler - Leerzeichen enthalten
                Message = "Die Eingabe in dem Erfassungsfeld f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Die Verwendung von Leerzeichen ist nicht zul|fffd|ssig."
        Case 31 'BDWert Fehler - Erfassung au|fffd|erhalb des g|fffd|ltigen Eingabebereichs
                Message = "Die Eingabe f|fffd|r Bewegungsdaten ist ung|fffd|ltig." & vbCrLf & _
                          "Die Anzahl der Bewegungsdaten geht |fffd|ber den zul|fffd|ssigen Erfassungsbereich hinaus."
        Case 32 'BS Fehler - alter Bearbeitungsschl|fffd|ssel
                Message = "Die Eingabe in dem Feld Bearbeitungsschl|fffd|ssel ist ung|fffd|ltig." & vbCrLf & _
                          "Der eingegebene Bearbeitungsschl|fffd|ssel ist nicht mehr zul|fffd|ssig."
    End Select
    
    'Hinweismeldung zusammensetzen
    MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
           Message & vbCrLf & vbCrLf & VBA.Chr$(187) & _
           " Korrigieren Sie Ihre Eingabe.", _
           vbInformation, _
           TOOL_HDR
End Function

Private Function PNR_vorhanden(ByVal str_PNR As String, intAktZeile As Integer) As Boolean
    Dim c As Range
    Dim intEZeile As Integer 'erste Zeile Mitarbeiter
    Dim i As Integer

    intEZeile = 11
    PNR_vorhanden = False
    
    If (intAktZeile >= intEZeile) Then
        i = 0
        For Each c In Mdl_Workbook_Initialisierung.objTabellenblatt.Range("C" & CStr(intEZeile) & ":C" & CStr(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE))
            If c = str_PNR Then
                i = i + 1
            End If
        Next c
        If (i > 1) Then
            PNR_vorhanden = True
        Else
            PNR_vorhanden = False
        End If
    End If
End Function
    
Public Function PruefeWerte() As Boolean
    Dim int_LetzteZeile As Integer
    Dim int_LetzteSpalte As Integer
    Dim i As Integer
    Dim rng_Pruefbereich As Range
    Dim wsBefore As Worksheet

    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    bln_Fehler = False
    
    'letzte Zeile und Spalte ermitteln
    int_LetzteZeile = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LetzteSpalte = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    Set wsBefore = ActiveSheet
    
    For i = LBound(Erfassungsblaetter) To UBound(Erfassungsblaetter)
        Worksheets(Erfassungsblaetter(i)).Activate
        
        If Mdl_Pruefungen.Bewegungdaten_vorhanden_Export(ActiveSheet, int_LetzteZeile, int_LetzteSpalte) = "OK" Then
            Set rng_Pruefbereich = Range(Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(18) & 11 & ":" & _
                                   Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(CStr(int_LetzteSpalte)) _
                                   & CStr(int_LetzteZeile))
            
            Dim bRetVal As Boolean
            bRetVal = Mdl_Eingabe_pruefen.EingabeKontrolle(rng_Pruefbereich, _
                      Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(CInt(ActiveCell.Column)) _
                      & CStr(ActiveCell.Row) & ":" & _
                      Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(CInt(ActiveCell.Column)) _
                      & CStr(ActiveCell.Row), ActiveSheet, True)
        End If
    Next i
    
    wsBefore.Activate
        
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
    
    If bln_Fehler = True Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Im Erfassungsfeld f|fffd|r Bewegungsdaten wurden ung|fffd|ltigte Werte gefunden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie die Werte in den rot hinterlegten Feldern.", _
               vbInformation, _
               TOOL_HDR
        PruefeWerte = False
    Else
        PruefeWerte = True
    End If
End Function
Attribute VB_Name = "Mdl_Email"
Option Explicit
Option Base 1

'Es wird eine Email mit Anhang erstellt
'Im Anhang befinden sich die zuvor erstellten Textdateien

Public Sub Email_erstellen(ByRef Anhang() As String, byt_Vorlage As Byte) 'Methode generiert Email f|fffd|r den Versand
    Const olMailItem = 0
    Const olByValue = 1
    
    Dim olApp As Object
    Dim objMail As Object
    Dim objFSO As Object
    Dim str As String
    Dim str_folder As String
    Dim i As Integer
    
    str = ActiveSheet.name
    
    On Error Resume Next
    Set olApp = CreateObject("Outlook.Application")
    Set objMail = olApp.CreateItem(olMailItem)
    If Not Err.Number = 0 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr E-Mail-Client wird von der Anwendung nicht unterst|fffd|tzt." & vbCrLf & _
               "Die Generierung der E-Mail ist daher nicht durchf|fffd|hrbar.", _
               vbInformation, _
               TOOL_HDR
        Exit Sub
    End If
    On Error GoTo 0

    'Email generieren*****************************************************************************************
    On Error GoTo Fehlermeldung
    If byt_Vorlage = 1 Then
        With objMail
            .Subject = "Aktuelle ASCII-Import-Dateien f|fffd|r den Bewegungsdatenimport von Mandant: " & Verwaltungsdaten.Cells(3, 2).Value
            .Body = "Sehr geehrte Damen und Herren," & vbCrLf & vbCrLf & _
                    "anbei erhalten Sie die aktuell erfassten Bewegungsdaten f|fffd|r den Mandanten: " & Verwaltungsdaten.Cells(3, 2).Value & "." & vbCrLf & _
                    "Wenn keine individuellen Namen f|fffd|r die Textdateien vergeben wurden, so ist der jeweilige Abrechnungs- oder Nachberechnungsmonat im Textdatei-Namen ersichtlich. Dies gilt auch f|fffd|r das entsprechende Personalwirtschaftssystem, in welches der Inhalt der Textdateien importiert werden kann." & vbCrLf & vbCrLf & _
                    "F|fffd|r den Import der Bewegungsdaten sollten Sie wie folgt vorgehen:" & vbCrLf & vbCrLf & _
                    "1. Legen Sie die Textdateien auf Ihrem PC in ein Verzeichnis Ihrer Wahl ab." & vbCrLf & _
                    "2. |fffd|ffnen Sie den Mandanten " & Verwaltungsdaten.Cells(3, 2).Value & " in Ihrem Personalwirtschaftssystem." & vbCrLf & _
                    "3. Importieren Sie die Bewegungsdaten |fffd|ber die jeweilige Schnittstelle Ihres Personalwirtschaftssystems." & vbCrLf & _
                    "   -> LODAS: Mandant\Daten |fffd|bernehmen\ASCII-Import... " & vbCrLf & _
                    "   -> Lohn und Gehalt: |fffd|bersicht\Daten|fffd|bernahme\Bewegungsdaten importieren oder Erfassen\Bewegungsdaten\Importieren" & vbCrLf & vbCrLf
            'Dateien werden angeh|fffd|ngt
            With .Attachments
                For i = 0 To UBound(Anhang)
                    If (Not Anhang(i) = "") Then .Add Anhang(i), olByValue, 9999
                Next i
            End With
            'Email anzeigen
            .Display
        End With
    ElseIf byt_Vorlage = 2 Then
        With objMail
            .Subject = Worksheets("Verwaltungsdaten").Cells(1, 13).Value
            .Body = Worksheets("Verwaltungsdaten").Cells(2, 13).Value & vbCrLf & vbCrLf
            'Dateien werden angeh|fffd|ngt
            With .Attachments
                For i = 0 To UBound(Anhang)
                    If (Not Anhang(i) = "") Then .Add Anhang(i), olByValue, 9999
                Next i
            End With
            'Email anzeigen
            .Display
        End With
    End If
    On Error GoTo 0
    
    Set olApp = Nothing
    Set objMail = Nothing
    
    Worksheets(str).Select
    
    'tempor|fffd|ren Ordner f|fffd|r Anhang wieder l|fffd|schen
    Tempordner_loeschen

    Exit Sub

Fehlermeldung:
    MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
        "Ihr E-Mail-Client ist f|fffd|r die automatische Mail-Generierung nicht korrekt konfiguriert." & vbCrLf & _
        "Die Generierung der E-Mail ist daher nicht durchf|fffd|hrbar und wird abgebrochen.", _
        vbInformation, _
        TOOL_HDR
End Sub

'tempor|fffd|ren Ordner f|fffd|r Anhang anlegen
Public Function Tempordner_erstellen() As String
    Dim objFSO As Object
    Dim str_folder As String
    
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    str_folder = Environ("TEMP") & "\LVETemp"
    
    If objFSO.FolderExists(str_folder) = False Then
        objFSO.CreateFolder str_folder
    End If

    Tempordner_erstellen = str_folder
End Function

'tempor|fffd|ren Ordner f|fffd|r Anhang l|fffd|schen
Public Function Tempordner_loeschen()
    Dim objFSO As Object
    Dim str_folder As String
    
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    str_folder = Environ("TEMP") & "\LVETemp"
    
    If Dir(str_folder & "\*.*") <> "" Then
        objFSO.DeleteFile str_folder & "\*.*"
    End If
End Function
Attribute VB_Name = "Mdl_Enums"
Option Explicit

Public Enum Dialog
    kein_Dialog
    Email
    EXPORT
    Export_Speichern_unter
    Logo
End Enum
Attribute VB_Name = "Mdl_Erfassungsblaetter"
Public Sub Erststart_einblenden(Optional ByVal showMessage As Boolean = False)
    On Error Resume Next
    If (showMessage) Then
        'Hinweistext einblenden
        tbl_Erststart.Range("D8:L40").Font.ColorIndex = 52
    Else
        'Hinweistext ausblenden
        tbl_Erststart.Range("D8:L40").Font.Color = 52
    End If
    On Error GoTo 0
    
    tbl_Erststart.visible = xlSheetVisible
    tbl_Erststart.Activate
End Sub

Public Sub Erststart_ausblenden()
    tbl_Erststart.visible = xlSheetHidden
End Sub

Public Function Monat_ermittlen(ByVal str_AbrMonat As String) As String
    Monat_ermittlen = VBA.Mid(str_AbrMonat, 1, VBA.InStr(str_AbrMonat, "_") - 1)
End Function
Public Function Monatskennung_ermitteln(ByVal str_AbrMonat As String) As String
    Monatskennung_ermitteln = VBA.Right(str_AbrMonat, VBA.Len(str_AbrMonat) - VBA.InStr(str_AbrMonat, "_"))
End Function

Attribute VB_Name = "Mdl_Export"
Option Explicit
Option Base 1

Public Function Bewegungsdaten_exportieren(ByRef Tabelle As Object, ByRef str_Pfad As String, ByRef str_Ausgabedatei As String, ByRef bln_Email As Boolean, ByRef bln_Speicherfehler As Boolean, ByRef bln_BewegungsdatenFehlen As Boolean) As String
    Dim bln_Lodas As Boolean
    Dim str_BerNr As String
    Dim str_MandNr As String
    Dim str_AktMonJahr As String
    Dim str_MK As String
    Dim str_AZR As String
    Dim str_Buchungszeitraum As String
    Dim var_Buchungszeitraum As Variant
    Dim str_Bezugszeitraum As String
    Dim var_Bezugszeitraum As Variant
    Dim str_File As String
    Dim str_Antwort As String
    Dim int_LetzteZeile As Integer
    Dim int_LetzteSpalte As Integer
    Dim int_ersteZeile_MA As Integer
    Dim int_Zeile_BS As Integer
    Dim int_Zeile_LA As Integer
    Dim int_Zeile_AF As Integer
    Dim int_Zeile_ALV As Integer
    Dim int_AktiveZeile As Integer
    Dim var_KostSt As Variant
    Dim var_PersNr As Variant
    Dim int_AktiveSpalte As Integer
    Dim var_LA As Variant
    Dim var_BS As Variant
    Dim var_AbwFaktor As Variant
    Dim var_AbwLohnV As Variant
    Dim var_Wert As Variant
    Dim int_AnzGeschrZeilen As Integer
    Dim str_arr() As String
    Dim str_Temp As String
    Dim str_Status As String
    
    bln_Speicherfehler = False
    bln_BewegungsdatenFehlen = False
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    'Pr|fffd|fung ob Variable Tabelle mit Tabellenobjekt gef|fffd|llt ist
    If (Tabelle Is Nothing) Then GoTo Fehlerbehandlung
    
    'letzte Zeile und Spalte ermitteln
    int_LetzteZeile = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LetzteSpalte = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    'Pr|fffd|fung, ob Bewegungsdaten vorhanden sind
    Bewegungsdaten_exportieren = Mdl_Pruefungen.Bewegungdaten_vorhanden_Export(Tabelle, int_LetzteZeile, int_LetzteSpalte)
    If (Bewegungsdaten_exportieren <> "OK") Then
        bln_BewegungsdatenFehlen = True
        Exit Function
    End If
    
    'Pr|fffd|fung, ob Tabelle schon exportiert wurde
    str_Temp = Exportdatum_vorhanden(Tabelle)
    If (str_Temp = "OK") Then str_Temp = ""
    
    '**********************************Variablen f|fffd|r Mandantenstammdaten f|fffd|llen********************************
    
    'Beraternummer
    str_BerNr = Verwaltungsdaten.Cells(2, 2).Value
    'Mandantennummer
    str_MandNr = Verwaltungsdaten.Cells(3, 2).Value
    'Monatskennung (zur Entscheidung, ob es sich um einen Nachberechnungsmonat handelt)
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Tabelle.name)
    'Abrechnungsteitraum, der sich auf die Exporttabelle bezieht
    str_AZR = VBA.Mid(Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(Mdl_Symbolleiste.Abrechungsmonat_aufloesen(Tabelle.name) & "_" & str_MK), 1, 7)
    'aktueller Abrechnungsmonat(wird f|fffd|r Zuordnung ben|fffd|tigt, falls AZR ein Nachberechnungsmonat ist)
    str_AktMonJahr = VBA.Mid(Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(Tabelle.name), 1, 7)
    
    'Pr|fffd|fung auf Abrechungssystem
    If (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
        bln_Lodas = True
    Else
        bln_Lodas = False
    End If
    
    'Dialog zur Pfad-/Namenswahl
    str_File = str_Pfad & "\" & str_Ausgabedatei
    
    If Not bln_Email Then
        'Pr|fffd|fung, ob Datei schon vorhanden ist
        str_arr = Split(str_File, "\")
        If (Dir(str_File, vbNormal) = str_arr(UBound(str_arr))) Then
            If Tabelle.Cells(10, 17).Value <> "" Then
                str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                                     "Die Exportdatei " & str_Ausgabedatei & " existiert bereits im Ausgabeverzeichnis." & vbCrLf & _
                                     "Sie wurde am " & CStr(Tabelle.Cells(10, 17).Value) & " angelegt." & vbCrLf & vbCrLf & _
                                     "Wollen Sie diese bestehende Datei |fffd|berschreiben?", _
                                     vbYesNo + vbQuestion, _
                                     TOOL_HDR)
            Else
                str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                                     "Die Exportdatei " & str_Ausgabedatei & " existiert bereits im Ausgabeverzeichnis." & vbCrLf & vbCrLf & _
                                     "Wollen Sie diese bestehende Datei |fffd|berschreiben?", _
                                     vbYesNo + vbQuestion, _
                                     TOOL_HDR)
            End If
            
            If (str_Antwort = vbNo) Then
                Bewegungsdaten_exportieren = str_Temp & _
                                             vbTab & "Hinweis: Eine |fffd|ltere Exportdatei zu dieser Tabelle existiert bereits im Export-" & vbCrLf & _
                                             vbTab & "verzeichnnis. Ein |fffd|berschreiben dieser Datei wurde vom Anwender abgelehnt." & vbCrLf & _
                                             vbTab & "Dateiname: " & str_Ausgabedatei
                Exit Function
            End If
        End If
    End If
    
    '***********************************Neue Exportdatei anlegen***********************************************
    
    On Error Resume Next
    Close #1
    On Error GoTo 0
    
    On Error GoTo FehlerbehandlungSpeichern
    Open str_File For Output As 1
    On Error GoTo 0
    
    'Pr|fffd|fung, ob Datei angelegt wurde
    str_Status = Mdl_Pruefungen.Exportdatei_existiert(str_File)
    If (str_Status <> "OK") Then
        Bewegungsdaten_exportieren = str_Temp & str_Status
        Exit Function 'Export abrechen
    End If
    '********************************Exportdatei-Header eintragen**********************************************
    
    If (bln_Lodas) Then
        'bei Lodas
        Print #1, "[Allgemein]"
        Print #1, "Ziel=" & Verwaltungsdaten.Cells(5, 2).Value
        Print #1, "Version_LVE=" & APP_VERSION
        Print #1, "BeraterNr=" & str_BerNr
        Print #1, "MandantenNr=" & str_MandNr
        Print #1, "[Satzbeschreibung]" 'Datenbankfelder in Bewegungsdatenerfassung in Lodas (Monatserfassung)
        If (str_MK = "0") Then
            Print #1, "1;u_lod_bwd_buchung_standard;abrechnung_zeitraum#bwd;bs_wert_butab#bwd;pnr#bwd;la_eigene#bwd;bs_nr#bwd;kostenstelle#bwd;abw_lohnfaktor#bwd;bemerkung#bwd;"
        Else
            Print #1, "1;u_lod_bwd_buchung_nachber;abrechnung_zeitraum#bwd;nb_datum_mm#bwd;pnr#bwd;bs_nr#bwd;bs_wert_butab#bwd;la_eigene#bwd;kostenstelle#bwd; abw_lohnfaktor#bwd; bemerkung#bwd;"
        End If
    Else 'bei Lohn und Gehalt
        Print #1, str_BerNr & VBA.Chr(9) _
                & str_MandNr & VBA.Chr(9) _
                & str_AZR & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9) & VBA.Chr(9)
    End If
    
    '*********************************Variablen f|fffd|r Bewegungsdaten f|fffd|llen*************************************
    
    If (bln_Lodas) Then Print #1, "[Bewegungsdaten]" 'bei LODAS
    
    'Zeilen festlegen
                                                                     int_ersteZeile_MA = 11  'erste Mitarbeiterzeile
                                                 If (bln_Lodas) Then int_Zeile_BS = 5        'Zeile Bearbeitungsschl|fffd|ssel
                                                                     int_Zeile_LA = 6        'Zeile LA_Nummer
                                                                    'int_Zeile_AF = 7        'Zeile Abw. Faktor
                                            'If (Not bln_LODAS) Then int_Zeile_ALV = 8       'Zeile Abw. Lohnver|fffd|nderung
    
    'Buchungszeitraum umwandeln (Datumsformat dd.mm.yyyy)
    str_Buchungszeitraum = "01." & VBA.Mid(str_AZR, 1, 2) & "." & VBA.Mid(str_AZR, 4, 4)
    var_Buchungszeitraum = VBA.Format(str_Buchungszeitraum, "dd.mm.yyyy")
    
    'Variable f|fffd|r geschriebene Zeilen anlegen
    int_AnzGeschrZeilen = 0
    
    'For-Schleife (Anzahl der Mitarbeiter)
    For int_AktiveZeile = int_ersteZeile_MA To int_LetzteZeile
        
        'Pr|fffd|fen, ob PersNr vorhanden ist und Wert der Variable zuweisen
        str_Status = Mdl_Pruefungen.existiert_PersNr(Tabelle, int_LetzteZeile, int_LetzteSpalte)
        If (str_Status <> "OK") Then
            Close #1        'Exportdatei schlie|fffd|en
            Kill str_File   'Exportdatei l|fffd|schen
            Bewegungsdaten_exportieren = str_Temp & str_Status
            Exit Function   'Methode beenden
        Else
            var_PersNr = VBA.Format(Tabelle.Cells(int_AktiveZeile, 3).Value, "00000")
        End If
        'Pr|fffd|fen, ob Kostenstelle vorhanden ist und Wert der Variable zuweisen
        If (Mdl_Pruefungen.existiert_Kostenstelle(Tabelle, int_AktiveZeile)) Then
            var_KostSt = Tabelle.Cells(int_AktiveZeile, 15).Value
        Else
            var_KostSt = ""
        End If
        'Erste Spalte R (18)
        int_AktiveSpalte = int_ES
        
        'While-Schleife (Anzahl der Lohnarten)
        Do While (int_AktiveSpalte < (int_LetzteSpalte + 1))
            
            'Pr|fffd|fen, ob LA_Nummer vorhanden ist und Wert der Variable zuweisen
            str_Status = Mdl_Pruefungen.existiert_LA_Nummer(Tabelle, int_AktiveSpalte)
            If (str_Status <> "OK") Then
                Close #1        'Exportdatei schlie|fffd|en
                Kill str_File   'Exportdatei l|fffd|schen
                Bewegungsdaten_exportieren = str_Temp & str_Status
                Exit Function   'Methode beenden
            Else
                If (bln_Lodas) Then
                    If Tabelle.Cells(int_Zeile_LA, int_AktiveSpalte).Value = "0" Then
                        var_LA = "" 'bei Statistiklohnarten
                    ElseIf VBA.IsNumeric(Tabelle.Cells(int_Zeile_BS, int_AktiveSpalte).Value) Then
                        If VBA.CLng(Tabelle.Cells(int_Zeile_BS, int_AktiveSpalte).Value) > 69 And _
                           VBA.CLng(Tabelle.Cells(int_Zeile_BS, int_AktiveSpalte).Value) < 80 Then
                            var_LA = "" 'bei Statistiklohnarten
                        Else
                            var_LA = VBA.Format(Tabelle.Cells(int_Zeile_LA, int_AktiveSpalte).Value, "0")
                        End If
                    Else
                        var_LA = VBA.Format(Tabelle.Cells(int_Zeile_LA, int_AktiveSpalte).Value, "0")
                    End If
                Else
                    var_LA = VBA.Format(Tabelle.Cells(int_Zeile_LA, int_AktiveSpalte).Value, "0")
                End If
            End If
            
            'Pr|fffd|fen, ob BS vorhanden ist und Wert der Variable zuweisen
            If (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
                str_Status = Mdl_Pruefungen.existiert_BS(Tabelle, int_AktiveZeile, int_AktiveSpalte)
                If (str_Status <> "OK") Then
                    Close #1        'Exportdatei schlie|fffd|en
                    Kill str_File   'Exportdatei l|fffd|schen
                    Bewegungsdaten_exportieren = str_Temp & str_Status
                    Exit Function   'Methode beenden
                Else
                    var_BS = VBA.Format(Tabelle.Cells(int_Zeile_BS, int_AktiveSpalte).Value, "0")
                End If
            End If
            
            'Pr|fffd|fen, ob Bewegungsdatenwert vorhanden ist und Wert der Variable zuweisen
            If (Mdl_Pruefungen.existiert_Wert(Tabelle, int_AktiveZeile, int_AktiveSpalte)) Then var_Wert = Tabelle.Cells(int_AktiveZeile, int_AktiveSpalte).Value
                
    '*********************************Besondere Anpassungen vor dem Schreiben *********************************
            'Wenn der Wert nicht Null ist
            If ((var_Wert <> 0) And (var_Wert <> "0,00") And (Mdl_Pruefungen.existiert_Wert(Tabelle, int_AktiveZeile, int_AktiveSpalte))) Then
                
                'Kommata in Punkte umwandeln (bei LuG)
                If (Verwaltungsdaten.Cells(5, 2).Value = "Lohn und Gehalt") Then
                    If InStr(1, CStr(var_Wert), ".") Then
                        str_arr = Split(CStr(var_Wert), ".")
                        var_Wert = str_arr(0) & str_arr(1)
                    End If
                    If Len(var_Wert) < 3 Then
                        GoTo Fehlerbehandlung
                        'Exit Function
                    End If
                    var_Wert = VBA.Mid(var_Wert, 1, Len(var_Wert) - 3) & "." & VBA.Mid(var_Wert, Len(var_Wert) - 1, 2)
                End If
                
    '*************************************Bewegungsdaten in Datei schreiben***********************************
                    
                'bei PWS = Lohn und Gehalt
                If (Verwaltungsdaten.Cells(5, 2).Value = "Lohn und Gehalt") Then
                    Print #1, VBA.Chr(9) _
                              & var_PersNr & VBA.Chr(9) _
                              & VBA.Chr(9) _
                              & var_LA & VBA.Chr(9) _
                              & var_Wert & VBA.Chr(9) _
                              & VBA.Chr(9) _
                              & VBA.Chr(9) _
                              & var_KostSt & VBA.Chr(9) _
                              & VBA.Chr(9) _
                              & var_AbwFaktor & VBA.Chr(9) _
                              & var_AbwLohnV
                    'Zeilenanzahl (geschriebene Zeilen) erh|fffd|hen
                    int_AnzGeschrZeilen = int_AnzGeschrZeilen + 1
                
                'bei PWS = LODAS und Abrechungsmonat
                ElseIf ((Verwaltungsdaten.Cells(5, 2).Value = "LODAS") And (str_MK = "0")) Then
                    Print #1, "1;" & _
                              var_Buchungszeitraum & ";" & _
                              VBA.Format(var_Wert, "0.00") & ";" & _
                              var_PersNr & ";" & _
                              var_LA & ";" & _
                              VBA.Format(var_BS, "00") & ";" & _
                              var_KostSt & ";" & _
                              var_AbwFaktor & ";" & _
                              "'Imp. LVE " & APP_VERSION & "'"
                    'Zeilenanzahl (geschriebene Zeilen) erh|fffd|hen
                    int_AnzGeschrZeilen = int_AnzGeschrZeilen + 1
                
                'bei PWS = LODAS und Nachberechnungsmonat
                ElseIf ((Verwaltungsdaten.Cells(5, 2).Value = "LODAS") And (str_MK <> "0")) Then
                    'Buchungszeitraum umwandeln (Datumsformat dd.mm.yyyy)
                    str_Bezugszeitraum = "01." & VBA.Mid(str_AktMonJahr, 1, 2) & "." & VBA.Mid(str_AktMonJahr, 4, 4)
                    var_Bezugszeitraum = VBA.Format(str_Bezugszeitraum, "dd.mm.yyyy")
                    Print #1, "1;" & _
                              var_Bezugszeitraum & ";" & _
                              var_Buchungszeitraum & ";" & _
                              var_PersNr & ";" & _
                              VBA.Format(var_BS, "00") & ";" & _
                              VBA.Format(var_Wert, "0.00") & ";" & _
                              var_LA & ";" & _
                              var_KostSt & ";" & _
                              var_AbwFaktor & ";" & _
                              "'Imp. LVE " & APP_VERSION & "'"
                    'Zeilenanzahl (geschriebene Zeilen) erh|fffd|hen
                    int_AnzGeschrZeilen = int_AnzGeschrZeilen + 1
                    
                'wenn, PWS nicht ermittelt werden kann
                Else
                    GoTo Fehlerbehandlung
                End If
                
            End If
            
            'Spalte h|fffd|chsetzen
            int_AktiveSpalte = int_AktiveSpalte + 1
            'N|fffd|chster Schleifendurchgang (Lohnart)
            Loop
            
    'N|fffd|chster Schleifendurchgang (Mitarbeiter)
    Next int_AktiveZeile
    
    '*************************************Bewegungsdatenexport abschlie|fffd|en************************************
    
    'Exportdatei schlie|fffd|en
    Close #1
    
    'Inhalt der Exportdatei auf Vollst|fffd|ndigkeit |fffd|berpr|fffd|fen(Anzahl der Zeilen)
    str_Status = Mdl_Pruefungen.Exportdatei_vollstaendig(str_File, int_AnzGeschrZeilen, bln_Lodas)
    If (str_Status <> "OK") Then
        Kill str_File   'Exportdatei l|fffd|schen
        Bewegungsdaten_exportieren = str_Temp & str_Status
        Exit Function   'Methode beenden
    End If
    
    'Exportdatum setzten
    If Not bln_Email Then
        Call Exportdatum_setzen(Tabelle)
    End If
    
    'Pfad speichern
    Call Export_Pfad_speichern(Tabelle, str_File)
    
    'Abschlussmitteilung
    Bewegungsdaten_exportieren = str_Temp & vbTab & "Bewegungsdatenexport erfolgreich." & vbCrLf
    
    '**Ende Geschwindigkeitsoptimierung****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
    Exit Function

FehlerbehandlungSpeichern:
    Close #1
    MsgBox "Fehler:" & vbCrLf & vbCrLf & _
        "Es ist ein Fehler beim Anlegen der Exportdatei aufgetreten!" & vbCrLf & _
        "Bitte |fffd|berpr|fffd|fen Sie, ob Sie Schreiberechte auf dem gew|fffd|hlten Laufwerk besitzen" & vbCrLf & _
        "und f|fffd|hren Sie den Export dieser Tabelle auf einem nicht Schreibgesch|fffd|tzten Laufwerk erneut durch.", _
        vbCritical, _
        TOOL_HDR
        bln_Speicherfehler = True
        Exit Function

Fehlerbehandlung:
    Close #1        'Exportdatei schlie|fffd|en
    Kill str_File   'Exportdatei l|fffd|schen
    Bewegungsdaten_exportieren = str_Temp & _
                                 vbTab & "Fehler: Es ist ein Fehler beim Erzeugen dieser Erfassungstabelle aufgetreten!" & vbCrLf & _
                                 vbTab & VBA.Chr$(187) & " F|fffd|hren Sie den Export dieser Tabelle erneut durch." & vbCrLf
End Function

Public Function Export_Dateiname_erstellen(ByRef Tabellenname As String) As String
    Dim str_BerNr As String
    Dim str_MandNr As String
    Dim str_MK As String
    Dim str_AZR As String
    Dim str_AktMonJahr As String
    Dim str_Ausgabedatei As String
    
    'Beraternummer
    str_BerNr = Verwaltungsdaten.Cells(2, 2).Value
    'Mandantennummer
    str_MandNr = Verwaltungsdaten.Cells(3, 2).Value
    'Monatskennung (zur Entscheidung, ob es sich um einen Nachberechnungsmonat handelt)
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Tabellenname)
    'Abrechnungsteitraum, der sich auf die Exporttabelle bezieht
    str_AZR = VBA.Mid(Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(Mdl_Symbolleiste.Abrechungsmonat_aufloesen(Tabellenname) & "_" & str_MK), 1, 7)
    'aktueller Abrechnungsmonat(wird f|fffd|r Zuordnung ben|fffd|tigt, falls AZR ein Nachberechnungsmonat ist)
    str_AktMonJahr = VBA.Mid(Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(Tabellenname), 1, 7)
    
    If (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
        'wenn PWS = LODAS
        If (str_MK = "0") Then str_Ausgabedatei = "LODAS_" & str_BerNr & "_" & str_MandNr & "_" & VBA.Mid(str_AktMonJahr, 1, 2) & "_" & VBA.Mid(str_AktMonJahr, 4, 4) & ".txt"
        If (str_MK <> "0") Then str_Ausgabedatei = "LODAS_" & str_BerNr & "_" & str_MandNr & "_NB_" & VBA.Mid(str_AZR, 1, 2) & "_" & VBA.Mid(str_AZR, 4, 4) & "_zu_" & VBA.Mid(str_AktMonJahr, 1, 2) & "_" & VBA.Mid(str_AktMonJahr, 4, 4) & ".txt"
    Else
        'wenn PWS = Lohn und Gehalt
        If (str_MK = "0") Then str_Ausgabedatei = "LuG_" & str_BerNr & "_" & str_MandNr & "_" & VBA.Mid(str_AktMonJahr, 1, 2) & "_" & VBA.Mid(str_AktMonJahr, 4, 4) & ".txt"
        If (str_MK <> "0") Then str_Ausgabedatei = "LuG_" & str_BerNr & "_" & str_MandNr & "_NB_" & VBA.Mid(str_AZR, 1, 2) & "_" & VBA.Mid(str_AZR, 4, 4) & "_zu_" & VBA.Mid(str_AktMonJahr, 1, 2) & "_" & VBA.Mid(str_AktMonJahr, 4, 4) & ".txt"
    End If
    
    'R|fffd|ckgabe des erstellten Dateinamens
    Export_Dateiname_erstellen = str_Ausgabedatei
End Function

Private Sub Exportdatum_setzen(Tabelle As Object)
    If Tabelle Is Nothing Then
        Exit Sub
    Else
        Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Tabelle)
        Tabelle.Cells(10, 17).Value = VBA.Date & " " & VBA.Time
        Tabelle.Cells(10, 17).Font.Color = clrHintergrundAB
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Tabelle)
    End If
End Sub

Private Sub Export_Pfad_speichern(Tabelle As Object, str_File As String)
    If Tabelle Is Nothing Then
        Exit Sub
    Else
        Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Tabelle)
        Tabelle.Cells(9, 17).Value = str_File
        Tabelle.Cells(9, 17).Font.Color = clrHintergrundAB
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Tabelle)
    End If
End Sub

Private Function Exportdatum_vorhanden(ByRef Tabelle As Object) As String
    If Tabelle Is Nothing Then
        Exportdatum_vorhanden = vbTab & "Fehler: Es ist ein Fehler beim Erzeugen dieser Erfassungstabelle aufgetreten!" & vbCrLf & _
                                vbTab & VBA.Chr$(187) & " F|fffd|hren Sie den Export dieser Tabelle erneut durch." & vbCrLf
        Exit Function
    Else
        If (Tabelle.Cells(10, 17).Value <> "") Then
            Exportdatum_vorhanden = vbTab & "Hinweis: Diese Tabelle wurde zuletzt am " & Tabelle.Cells(10, 17).Value & " exportiert." & vbCrLf & _
                                    vbTab & "Ein erneuter Export der Tabelle wurde vom Anwender veranlasst." & vbCrLf
            Exit Function
        Else
            'Tabelle wurde noch nicht exportiert, also exportieren
            Exportdatum_vorhanden = "OK"
            Exit Function
        End If
    End If
End Function
Attribute VB_Name = "Mdl_Formatierungsanweisungen"
Option Explicit
Option Base 1

Private Const TBLRand As Byte = 50
Private Const byt_CW As Byte = 15
Public Sub AbrMonatHeader_formatieren()
    Dim str_AbMonat As String
    Dim str_NbMonat As String
    Dim str_MK As String
    Dim clrFarbeHintergrund As Long
    
    Dim str_RangeAbrText As String
    str_RangeAbrText = "A2:F3"
    Dim str_RangeAbrWert As String
    str_RangeAbrWert = "A4:F6"
    Dim str_RangeNbText As String
    str_RangeNbText = "G2:K3"
    Dim str_RangeNbWert As String
    str_RangeNbWert = "G4:K6"
    Dim str_Alles As String
    str_Alles = "A2:K6"
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbMonat)
    
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_Alles)
        'Hintergrundfarbe
        .Interior.Color = clrFarbeHintergrund
    End With
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_RangeAbrText)
        .Merge
        'linker Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberer Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlNone
        
        'rechter Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlBottom
        
        'Text Formatieren
        .Font.ColorIndex = 52
        .Font.size = 12
        .Font.Bold = False
        .Font.name = "Segoe UI"

    End With
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_RangeAbrWert)
        .Merge
        'linker Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'rechter Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        'Text Formatieren
        .Font.ColorIndex = 52
        .Font.size = 16
        .Font.Bold = False
        .Font.name = "Segoe UI"
        
    End With
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_RangeNbText)
        .Merge
        'linker Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberer Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlNone
        
        'rechter Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThick
        .Borders(xlEdgeRight).Color = clrHintergrundAB
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlBottom
        
        'Text Formatieren
        .Font.ColorIndex = 52
        .Font.size = 12
        .Font.Bold = False
        .Font.name = "Segoe UI"

    End With
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_RangeNbWert)
        .Merge
        'linker Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'rechter Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThick
        .Borders(xlEdgeRight).Color = clrHintergrundAB
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        'Text Formatieren
        .Font.ColorIndex = 52
        .Font.size = 16
        .Font.Bold = False
        .Font.name = "Segoe UI"
    End With

End Sub
Public Sub MA_Header_formatieren()
    Dim isLogoSet As String
    Dim str_AbrMonat As String
    Dim str_MK As String
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim clrFarbeHintergrund As Long
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbrMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbrMonat)
    
    'Hintergrundfarbe f|fffd|r Header festlegen
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    
    'Tabellenenden ermittlen
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    

    
    'Header formatieren (Von Zeile A bis P)
    'Zeile B ist ausgeblendet
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("A" & int_MAHDR & ":P" & int_MAHDR)
        'linken Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlMedium
        .Borders(xlEdgeLeft).Color = clrHintergrundAB
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unteren Rahmen festlegen
        If (int_LZ > int_MAHDR) Then
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
        Else
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThick
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
        End If
        
        'Verticale Rahmen festlegen
        .Borders(xlInsideVertical).LineStyle = xlNone
        
        'Hintergrundfarbe
        .Interior.Color = clrFarbeHintergrund
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        .Font.name = "Segoe UI"
        
    End With
    
    'Rechtes |fffd|u|fffd|eres Feld formatieren (Spalte Q)
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("Q" & int_MAHDR)
        'linken Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlEdgeRight).Color = clrHintergrundAB
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Hintergrundfarbe
        .Interior.Color = clrFarbeHintergrund
        
        'Schriftfarbe
        .Font.Color = clrFarbeHintergrund
        
        .Font.name = "Segoe UI"
        
    End With
    
    'Speicherfelder formatieren
    Call Speicherfelder_formatieren
End Sub

Public Sub Speicherfelder_formatieren()
    Dim str_AbrMonat As String
    Dim str_MK As String
    Dim clrFarbeHintergrund As Long
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbrMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbrMonat)
    
    'Hintergrundfarbe f|fffd|r Header festlegen
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    With Mdl_Workbook_Initialisierung.objTabellenblatt
            .Cells(7, 17).Font.Color = clrFarbeHintergrund  'Zeile f|fffd|r die Anzahl der Mitarbeiter in der aktuellen Tabelle
            .Cells(8, 17).Font.Color = clrFarbeHintergrund  'Zeile f|fffd|r das Einblenden der Kostenstelle
            .Cells(9, 17).Font.Color = clrFarbeHintergrund  'Zeile f|fffd|r den Speicherort der Exportdatei
            .Cells(10, 17).Font.Color = clrFarbeHintergrund 'Zeile f|fffd|r das Erstelldatum der Exportdatei
    End With
End Sub

Public Sub MA_Zeilen_formatieren()
    Dim int_LZ As Integer
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Letzte Zeile der Mitarbeiterzeilen ermitteln
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    
    'Linken |fffd|u|fffd|eren Bereich formatieren (Spalte A)
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("A" & int_EZ & ":A" & int_LZ)
        'linken Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unteren Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlNone
        
        'horizontalen Rahmen festlegen
        If Not int_LZ < 12 Then
            .Borders(xlInsideHorizontal).LineStyle = xlNone
        End If
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
    
        .Font.name = "Segoe UI"
        
    End With
    
    'MA-Bereich formatieren (von Spalte B bis P)
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("B" & int_EZ & ":P" & int_LZ)
        'linken Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlNone
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unteren Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlNone
        
        'vertikalen Rahmen festlegen
        .Borders(xlInsideVertical).LineStyle = xlNone
        
        'horizontalen Rahmen festlegen
        If Not (int_LZ < 12) Then
            .Borders(xlInsideHorizontal).LineStyle = xlNone
        End If
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        .Font.name = "Segoe UI"
        
        'Feldschutz aufheben
        .Locked = False
    End With
    
    'Trennspalte Q formatieren
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("Q" & int_EZ & ":Q" & int_LZ)
        'linken Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlThick
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlNone
        
        'unteren Rahmen gestlegen
        .Borders(xlEdgeBottom).LineStyle = xlNone
        
        'horizontalen Rahmen festlegen
        If Not (int_LZ < 12) Then
            .Borders(xlInsideHorizontal).LineStyle = xlNone
        End If
        
        'diagonal unteren Rahmen festlegen
        .Borders(xlDiagonalDown).LineStyle = xlNone
        
        'diagonal oberen Rahmen festlegen
        .Borders(xlDiagonalUp).LineStyle = xlNone
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        .Font.name = "Segoe UI"
        
        'Feldschutz aufheben
        .Locked = True
    End With
    
    'Zeilenh|fffd|he und Spaltenbreiten festlegen
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        'Spaltenbreite festlegen
        .Columns("A").ColumnWidth = 4
        .Columns("B").ColumnWidth = 2
        .Columns("C:D").ColumnWidth = 3
        .Columns("E:K").ColumnWidth = 5
        .Columns("L").ColumnWidth = 1
        .Columns("M:P").ColumnWidth = 5
        .Columns("Q").ColumnWidth = 1
        
        'Zeilenh|fffd|he festlegen
        .Rows(int_MAHDR & ":" & int_LZ).RowHeight = 15
        
        'Spalte B ausblenden (Spalte enthielt die Checkbox zum Markieren der Mitarbeiter)
        .Columns("B").EntireColumn.Hidden = True
    End With
    
    'Spalte f|fffd|r die Kostenstelle ein- bzw. ausblenden
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If .Cells(8, 17).Value = 1 Then
            .Columns("O:P").EntireColumn.Hidden = True
            .Columns("M:N").ColumnWidth = 10.7
        ElseIf .Cells(8, 17).Value = 2 Then
            .Columns("O:P").EntireColumn.Hidden = False
            .Columns("M:N").ColumnWidth = 5
        End If
     End With
End Sub

Public Sub LA_Spalten_formatieren()
    Dim str_MK As String            'Monatskennung des aktiven Tabellenblatts
    Dim int_LS As Integer           'Spaltenindex
    Dim int_LZ As Integer           'Zeilenindex
    Dim str_ES As String            'Spaltenbuchstabe R
    Dim str_LS As String            'Spaltenbuchstabe
    Dim str_AbrMonat As String      'Abrechnungsmonat
    Dim str_PWS As String           'Personalwirtschaftssystem
    Dim str_Range As String         'Rangebereich
    Dim clrFarbeHintergrund As Long 'Hintergrundfarbe Header
    
    
    'Hole PWS aus Tabelle 'Verwaltungsdaten'
    str_PWS = Verwaltungsdaten.Cells(5, 2).Value
    
    str_AbrMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    'Ermittle Monatskennung des aktiven Tabellenblatts
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbrMonat)
    
    'Hintergrundfarbe f|fffd|r Header festlegen
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    
    'Tabellenenden der Mitarbeiter und der Lohnarten ermittlen
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    
    'Lohnartenbereich in Buchstaben umwandeln
    str_ES = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_ES)
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Range formatieren, falls keine Spalten vorhanden sind
    If (str_LS = "Q") Then
        'Hintergrund formatieren (olive 12 bei Abrechnungsmonaten, hellgelb (19) bei NB-Monaten)
        With Mdl_Workbook_Initialisierung.objTabellenblatt
                .Range("A1:R9").Interior.Color = clrHintergrundAB
                .Range(str_ES & int_MAHDR).Interior.Color = clrHintergrundAB
        End With
        
        If (int_LZ >= int_EZ) Then
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("Q" & int_EZ & ":Q" & int_LZ)
                'rechten Rahmen festlegen
                .Borders(xlEdgeRight).LineStyle = xlNone
            End With
        Else
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("Q" & int_LZ)
                .ClearFormats
                
                'linken Rahmen festlegen
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).Weight = xlMedium
                .Borders(xlEdgeLeft).Color = clrHintergrundAB
                
                'rechten Rahmen festlegen
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlEdgeRight).Weight = xlThin
                .Borders(xlEdgeRight).Color = clrHintergrundAB
                
                'unteren Rahmen festlegen
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).Weight = xlThin
                .Borders(xlEdgeBottom).Color = clrHintergrundAB
                
                'Hintergrund und Schriftfarbe formatieren (olive 12 bei Abrechnungsmonaten, hellgelb (19) bei NB-Monaten)
                .Interior.Color = clrHintergrundAB
                'Schriftfarbe festlegen, falls Exportdatum vorhanden
                .Font.Color = clrHintergrundAB
                

            End With
        End If
        
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("L1:Q8")
            .ClearFormats
            .ClearContents
            
            'Hintergrund formatieren (olive 12 bei Abrechnungsmonaten, hellgelb (19) bei NB-Monaten)
            .Interior.Color = clrHintergrundAB
        End With
        
        'Kommentare l|fffd|schen
        With Mdl_Workbook_Initialisierung.objTabellenblatt
            If (str_PWS = "LODAS") Then
                If (Not .Range("L5").Comment Is Nothing) Then
                    .Range("L5").Comment.DELETE
                End If
                If (Not .Range("L7").Comment Is Nothing) Then
                    .Range("L7").Comment.DELETE
                End If
            Else
                If (Not .Range("L7").Comment Is Nothing) Then
                    .Range("L7").Comment.DELETE
                End If
                If (Not .Range("L8").Comment Is Nothing) Then
                    .Range("L8").Comment.DELETE
                End If
            End If
        End With
    Else
        'Range f|fffd|r Lohnartenname
        If (str_PWS = "LODAS") Then
            str_Range = str_ES & "2:" & str_LS & "4"
        Else
            str_Range = str_ES & "2:" & str_LS & "5"
        End If
        
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_Range)
            'Feldschutz aufheben
            .Locked = False
            
            'linken Rahmen festlegen
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeLeft).Color = clrHintergrundAB
            
            'oberen Rahmen festlegen
            .Borders(xlEdgeTop).LineStyle = xlNone
            
            'rechten Rahmen festlegen
            .Borders(xlEdgeRight).LineStyle = xlNone
            
            'unteren Rahmen festlegen
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
            
            'veticale Rahmen festlegen
            If (Not int_LS < 19) Then
                .Borders(xlInsideVertical).LineStyle = xlContinuous
                .Borders(xlInsideVertical).Weight = xlThin
                .Borders(xlInsideVertical).Color = clrHintergrundAB
            End If
            
            'Text anordnen
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlTop
            
            'Zeilenumbruch erlauben
            .WrapText = True
            
            'Hintergrundfarbe
            .Interior.Color = clrFarbeHintergrund
            
            .Font.name = "Segoe UI"
            
            'Feld sch|fffd|tzen
            .Locked = True
        End With
        
        'Range f|fffd|r Bearbeitungsschl|fffd|ssel (LODAS)
        If (str_PWS = "LODAS") Then 'wenn LODAS
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_ES & "5:" & str_LS & "5")
                'Eingabeformat festlegen
                .NumberFormat = "#,##0"
                
                'linken Rahmen festlegen
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).Weight = xlThin
                .Borders(xlEdgeLeft).Color = clrHintergrundAB
                
                'oberen Rahmen festlegen
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeTop).Weight = xlThin
                .Borders(xlEdgeTop).Color = clrHintergrundAB
                
                'rechten Rahmen festlegen
                .Borders(xlEdgeRight).LineStyle = xlNone
                
                'unteren Rahmen festlegen
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).Weight = xlThin
                .Borders(xlEdgeBottom).Color = clrHintergrundAB
                
                'verticale Rahmen festlegen
                If (Not int_LS < 19) Then
                    .Borders(xlInsideVertical).LineStyle = xlContinuous
                    .Borders(xlInsideVertical).Weight = xlThin
                    .Borders(xlInsideVertical).Color = clrHintergrundAB
                End If
                
                'Text anordnen
                .HorizontalAlignment = xlRight
                .VerticalAlignment = xlTop
                
                'Hintergrundfarbe
                .Interior.ColorIndex = xlNone
                
                'Zur Bearbeitung freigeben
                .Locked = False
            End With
        End If
        
        'Range f|fffd|r Lohnartennummer
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_ES & "6:" & str_LS & "6")
            'Feldschutz aufheben
            .Locked = False
            
            'linken Rahmen festlegen
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeLeft).Color = clrHintergrundAB
            
            'oberen Rahmen festlegen
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeTop).Color = clrHintergrundAB
            
            'rechten Rahmen festlegen
            .Borders(xlEdgeRight).LineStyle = xlNone
            
            'unteren Rahmen festlegen
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlMedium
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
            
            'vetikale Rahmen festlegen
            If (Not int_LS < 19) Then
                .Borders(xlInsideVertical).LineStyle = xlContinuous
                .Borders(xlInsideVertical).Weight = xlThin
                .Borders(xlInsideVertical).Color = clrHintergrundAB
            End If
            
            'Text anordnen
            .HorizontalAlignment = xlRight
            .VerticalAlignment = xlTop
            
            'Hintergrundfarbe
            .Interior.Color = clrFarbeHintergrund
            
            'Feldschutz setzen
            .Locked = True
        End With
        
        'Range f|fffd|r Leerspalten |fffd|ber Erfassungsteil
        If (str_PWS = "LODAS") Then
            str_Range = str_ES & "7:" & str_LS & int_MAHDR
        Else
            str_Range = str_ES & "7:" & str_LS & int_MAHDR
        End If
        
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_Range)
            'Feldschutz aufheben
            .Locked = False
            
            'linken Rahmen festlegen
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeLeft).Color = clrHintergrundAB
            
            'oberen Rahmen festlegen
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeTop).Color = clrHintergrundAB
            
            'rechten Rahmen festlegen
            .Borders(xlEdgeRight).LineStyle = xlNone
            
            'unteren Rahmen festlegen
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
            
            'vertikale Rahmen festlegen
            If (Not int_LS < 19) Then
                .Borders(xlInsideVertical).LineStyle = xlContinuous
                .Borders(xlInsideVertical).Weight = xlThin
                .Borders(xlInsideVertical).Color = clrHintergrundAB
            End If
            
            'Hintergrundfarbe
            .Interior.Color = clrFarbeHintergrund
            
            'Feldschutz setzen
            .Locked = True
        End With
        
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("L2:Q6")
            'Hintergrundfarbe
            .Interior.Color = clrFarbeHintergrund
            .Locked = True
        End With

        
        'Range f|fffd|r Erfassungsteil
        If (int_LZ >= int_EZ) Then
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_ES & int_EZ & ":" & str_LS & int_LZ)
                'Formatvorlage f|fffd|r Erfassungteil kopieren
                Mdl_Workbook_Initialisierung.objTabellenblatt.Range("B" & int_EZ & ":B" & int_LZ).Copy
                'Formatvorlage f|fffd|r Hintergrundfarbe einf|fffd|gen
                .PasteSpecial xlPasteFormats
                Application.CutCopyMode = False
                
                'Eingabeformat festlegen
                .NumberFormat = "@"
                
                'linken Rahmen festlegen
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).Weight = xlThin
                .Borders(xlEdgeLeft).Color = clrHintergrundAB
                
                'oberen Rahmen festlegen
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeTop).Weight = xlThin
                .Borders(xlEdgeTop).Color = clrHintergrundAB
                
                'rechten Rahmen festlegen
                .Borders(xlEdgeRight).LineStyle = xlNone
                
                'unteren Rahmen festlegen
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).Weight = xlMedium
                .Borders(xlEdgeBottom).Color = clrHintergrundAB
                
                'vertikale Rahmen festlegen
                If (Not int_LS < 19) Then
                    .Borders(xlInsideVertical).LineStyle = xlContinuous
                    .Borders(xlInsideVertical).Weight = xlThin
                    .Borders(xlInsideVertical).Color = clrMaZeileTrennGrau
                End If
                
                'horizontale Rahmen festlegen
                If Not (int_LZ < 12) Then
                    .Borders(xlInsideHorizontal).LineStyle = xlNone
                End If
                
                'Text anordnen
                .HorizontalAlignment = xlRight
                .VerticalAlignment = xlTop
            End With
        End If
        
        'Spaltenbreite festlegen
        Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(str_ES & ":" & str_LS).ColumnWidth = byt_CW
    End If
End Sub

Public Sub Aussenbereiche_formatieren()
    Dim str_MK As String
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim str_LS As String
    Dim strAeussereSpalteRechts As String
    Dim strErsteUntereZeile As String
    Dim strF|fffd|llungRechts As String
    Dim intF|fffd|llungUnten As Integer
    
    'Ermittle Monatskennung des aktiven Tabellenblatts
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(ActiveSheet.name)
    
    'Tabellenenden der Mitarbeiter und der Lohnarten ermittlen
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    strAeussereSpalteRechts = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS + 1)
    
    strErsteUntereZeile = CStr(int_LZ + 1)
    intF|fffd|llungUnten = int_LZ + TBLRand
    strF|fffd|llungRechts = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS + TBLRand)
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    ActiveWindow.DisplayGridlines = False
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        'oberen Bereich formatieren
        .Rows(1).RowHeight = 65
        .Rows(1).Font.size = 17
        .Rows(1).Font.name = "Segoe UI"
        .Rows(1).Font.Bold = False
        .Rows(1).HorizontalAlignment = xlLeft
        .Rows(1).VerticalAlignment = xlBottom
        .Rows(1).WrapText = False
        .Rows(1).Interior.Color = clrHintergrundAB
        .Rows(1).Locked = True
        
        .Rows(7).EntireRow.Hidden = True
        .Rows(8).EntireRow.Hidden = True
        .Rows(9).EntireRow.Hidden = True
        
        'unteren Bereich formatieren (olive (12) bei Abrechnungsmonaten, hellgelb (19) bei NB-Monaten)
        With .Range("A" & strErsteUntereZeile & ":" & str_LS & intF|fffd|llungUnten)
            .Interior.Color = clrHintergrundAB
        End With

        'untere Kante formatieren
        With .Range("B" & strErsteUntereZeile & ":" & str_LS & strErsteUntereZeile)
            If (int_LZ >= int_EZ) Then
                'oberen Rahmen festlegen
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeTop).Weight = xlMedium
                .Borders(xlEdgeTop).Color = clrHintergrundAB
            ElseIf (Not str_LS = "Q") And (int_LZ = int_MAHDR) Then
                 'oberen Rahmen festlegen
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeTop).Weight = xlMedium
                .Borders(xlEdgeTop).Color = clrHintergrundAB
            End If
        End With
        
        'rechten Bereich formatieren
        With .Range(strAeussereSpalteRechts & "1:" & strF|fffd|llungRechts & intF|fffd|llungUnten)
            .Interior.Color = clrHintergrundAB
        End With
    End With
End Sub

Public Sub Hintergrund_MA_Zeile_festlegen()
    Dim int_LZ As Integer  'Index der letzten Zeile des Tabellenblatts
    Dim i As Integer       'Zeilenz|fffd|hlvariable
    
    i = int_EZ             'Zeilenindex der 1. MA-Zeile
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    
    Do While (i <= int_LZ)
        If (i Mod 2 = 1) Then
            Mdl_Workbook_Initialisierung.objTabellenblatt.Range("A" & i & ":Q" & i).Interior.ColorIndex = xlNone
        Else
            Mdl_Workbook_Initialisierung.objTabellenblatt.Range("A" & i & ":Q" & i).Interior.Color = clrMaZeileGrau
        End If
        
        i = i + 1
    Loop
End Sub

Public Sub KoSt_ausblenden()
    Dim str As String
    Dim i As Integer

    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Eingabepr|fffd|fung deaktivieren
    'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
            
    str = ActiveSheet.name
    'Pr|fffd|fen, ob Variable objTabellenblatt leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden

    If Mdl_Workbook_Initialisierung.objTabellenblatt.Columns("O:P").EntireColumn.Hidden = False Then
        For i = LBound(Erfassungsblaetter) To UBound(Erfassungsblaetter)
            Worksheets(Erfassungsblaetter(i)).Activate
            
            Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(ActiveSheet)
            
            With ActiveSheet
                .Cells(8, 17).Value = 1
                .Columns("O:P").EntireColumn.Hidden = True
                .Columns("M:N").ColumnWidth = 10.7
            End With
            
            Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
        Next i
    Else
        For i = LBound(Erfassungsblaetter) To UBound(Erfassungsblaetter)
            Worksheets(Erfassungsblaetter(i)).Activate
            
            Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(ActiveSheet)
            
            With ActiveSheet
                .Cells(8, 17).Value = 2
                .Columns("O:P").EntireColumn.Hidden = False
                .Columns("M:N").ColumnWidth = 5
            End With
            
            Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
        Next i
    End If
    
    'Monat und erste Zelle aktivieren
    Worksheets(str).Activate
    ActiveSheet.Cells(int_EZ, int_ES).Select
    
    'Blattschutz und Eingabepr|fffd|fung wieder aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    
    Application.EnableEvents = True
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
End Sub

Public Sub Logo_anpassen(Datei As String)
    Dim str As String
    Dim i As Integer

    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
        
    On Error GoTo Fehlerbehandlung
    Worksheets(WS_TEMPLATE).img_Logo.Picture = LoadPicture(Datei)
    ws_Logo.img_Eigenes_Logo.Picture = Worksheets(WS_TEMPLATE).img_Logo.Picture
    Verwaltungsdaten.Cells(15, 2).Value = "X"
    On Error GoTo 0
    
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    
    'Eingabepr|fffd|fung deaktivieren
    'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
    
    str = ActiveSheet.name
    
    For i = LBound(Erfassungsblaetter) To UBound(Erfassungsblaetter)
        Worksheets(Erfassungsblaetter(i)).Activate
        
        With ActiveSheet
            .img_Logo.Picture = Worksheets(WS_TEMPLATE).img_Logo.Picture
            .img_Logo.PictureSizeMode = 3
            .img_Logo.Left = 25
            .img_Logo.Top = 5
            .img_Logo.Height = 55
            .img_Logo.Width = 55
        End With
    Next i
    
     'Monat und erste Zelle aktivieren
    Worksheets(str).Activate
    ActiveSheet.Cells(int_EZ, int_ES).Select
    
    'Blattschutz und Eingabepr|fffd|fung wieder aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    
    'Eingabepr|fffd|fung aktivieren
    Application.EnableEvents = True
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
    Exit Sub
    
Fehlerbehandlung:
    MsgBox "Einf|fffd|gen des Logos fehlgeschlagen." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
           " Bitte |fffd|berpr|fffd|fen Sie die Spezifikationen der gew|fffd|hlten Bilddatei und versuchen es erneut.", _
           vbExclamation
    Exit Sub
End Sub
Public Sub Logo_formatieren()
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        .Shapes("img_Logo").Left = 25
        .Shapes("img_Logo").Top = 5
        .Shapes("img_Logo").Width = 55
        .Shapes("img_Logo").Height = 55
    End With
End Sub
Public Sub Datev_Logo_einfuegen()
    Dim str As String
    Dim i As Integer

    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    
    'Eingabepr|fffd|fung muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
    
    str = ActiveSheet.name
    
    Worksheets(WS_TEMPLATE).img_Logo.Picture = ws_Logo.img_DATEV_Logo.Picture
    Verwaltungsdaten.Cells(15, 2).Value = ""
    
    For i = LBound(Erfassungsblaetter) To UBound(Erfassungsblaetter)
        Worksheets(Erfassungsblaetter(i)).Activate
        With ActiveSheet
            .img_Logo.Picture = Worksheets(WS_TEMPLATE).img_Logo.Picture
        End With
    Next i
    
     'Monat und erste Zelle aktivieren
    Worksheets(str).Activate
    ActiveSheet.Cells(int_EZ, int_ES).Select
    
    'Blattschutz und Eingabepr|fffd|fung wieder aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    
    'Eingabepr|fffd|fung aktivieren
    Application.EnableEvents = True
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
End Sub
Attribute VB_Name = "Mdl_Fuellanweisungen"
Option Explicit
Option Base 1

Public Const int_MAHDR = 10             'Konstante: Headerzeile der Mitarbeitertabelle
Public Const int_LAHDR = 17             'Konstante: Headerzeile der Lohnartentabelle

Public Sub Init_Tabellenblatt()
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Tabellen Header anlegen
    Call Mdl_Fuellanweisungen.Tbl_Header_anlegen
    
    'Logo formatieren
    Call Mdl_Formatierungsanweisungen.Logo_formatieren
    
    'Mitarbeiter Header erstellen, f|fffd|llen und formatieren
    Call Mdl_Fuellanweisungen.MA_Header_anlegen
    Call Mdl_Formatierungsanweisungen.MA_Header_formatieren
    
    'Mitarbeiter Zeilen erstellen, f|fffd|llen und formatieren
    Call Mdl_Fuellanweisungen.MA_Zeilen_anlegen
    Call Mdl_Fuellanweisungen.MA_Zeilen_f|fffd|llen
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    
    'Lohnarten Spalten erstellen (wenn in Spaltenzuordnung vorhanden), f|fffd|llen und formatieren
    Call Mdl_Fuellanweisungen.LA_Header_anlegen
    Call Mdl_Fuellanweisungen.LA_Spalten_f|fffd|llen
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    
    'Au|fffd|enbereiche formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    
    'Abrechnungsmonat im Header einf|fffd|gen
    Call Mdl_Fuellanweisungen.AbrMonatHeader_fuellen
    Call Mdl_Formatierungsanweisungen.AbrMonatHeader_formatieren
    
    'Zeilennummerierung durchf|fffd|hren
    Call Mdl_Fuellanweisungen.MA_Index_erstellen
End Sub
Public Sub AbrMonatHeader_fuellen()
    Dim str_Monat, str_MK As String
    Dim str_Header As String
    Dim str_Mandant As String
    Dim str_NbMonat As String

    str_Mandant = "Mandant: " & Verwaltungsdaten.Cells(4, 2).Value & ", " & Verwaltungsdaten.Cells(3, 2).Value & vbLf
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        str_Monat = Mdl_Erfassungsblaetter.Monat_ermittlen(.name)
        str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(.name)
        
        If (str_MK <> 0) Then
            str_NbMonat = Mdl_Symbolleiste.Abrechungsmonat_aufloesen(.name)
        End If
        
        .Range("A" & 2 & ":F" & 3).Merge
        .Range("A" & 2 & ":F" & 3).Value = "Abrechnungsmonat"
        
        .Range("A" & 4 & ":F" & 6).Merge
        .Range("A" & 4 & ":F" & 6).NumberFormat = "@"
        .Range("A" & 4 & ":F" & 6).Value = str_Monat
        
        .Range("G" & 2 & ":K" & 3).Merge
          
        .Range("G" & 4 & ":K" & 6).Merge
        .Range("G" & 4 & ":K" & 6).NumberFormat = "@"
        
        If (str_MK <> 0) Then
            str_NbMonat = Mdl_Symbolleiste.Abrechungsmonat_aufloesen(.name)
            .Range("G" & 2 & ":K" & 3).Value = "Nachberechnungsmonat"
            .Range("G" & 4 & ":K" & 6).Value = str_NbMonat
        End If
    End With
End Sub
Public Sub Tbl_Header_anlegen()
    Dim str_Monat As String
    Dim str_Mandant As String
    
    str_Mandant = Verwaltungsdaten.Cells(4, 2).Value & ", " & Verwaltungsdaten.Cells(3, 2).Value & vbLf
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        str_Monat = Mdl_Erfassungsblaetter.Monat_ermittlen(.name)
              
        .Range("F" & 1 & ":Q" & 1).ClearContents
                
        .Range("F" & 1 & ":Q" & 1).Merge
        .Range("F" & 1 & ":Q" & 1).Value = str_Mandant
        .Range("F" & 1 & ":Q" & 1).Font.name = "Segoe UI"
        .Range("F" & 1 & ":Q" & 1).Font.Color = clrUeberschriftGruen
        .Range("F" & 1 & ":Q" & 1).Font.size = 17
        .Range("F" & 1 & ":Q" & 1).Font.Bold = False
        .Rows(1).RowHeight = 65
        .Rows(1).HorizontalAlignment = xlLeft
        .Rows(1).VerticalAlignment = xlBottom
        .Rows(1).Locked = True
        .Rows(1).WrapText = False
    End With
End Sub

Public Sub MA_Header_anlegen()
    Dim strSp1, strSp2, strSp3, strSp4 As String
    
    'Spaltenname aus Tabelle 'UebernommmeneMitarbeiter' holen
    With ThisWorkbook.Worksheets("UebernommeneMitarbeiter")
        strSp1 = .Cells(1, 1)   'Personalnummer
        strSp2 = .Cells(1, 2)   'Nachname
        strSp3 = .Cells(1, 3)   'Vorname
        strSp4 = .Cells(1, 5)   'Kostenstelle
    End With
    
    'Header anlegen und f|fffd|llen
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        .Range("B" & int_MAHDR & ":P" & int_MAHDR).ClearContents
        
        .Range("C" & int_MAHDR & ":D" & int_MAHDR).Merge
        .Range("C" & int_MAHDR & ":D" & int_MAHDR).Value = strSp1
        .Range("E" & int_MAHDR & ":I" & int_MAHDR).Merge
        .Range("E" & int_MAHDR & ":I" & int_MAHDR).Value = strSp2
        .Range("J" & int_MAHDR & ":N" & int_MAHDR).Merge
        .Range("J" & int_MAHDR & ":N" & int_MAHDR).Value = strSp3
        .Range("O" & int_MAHDR & ":P" & int_MAHDR).Merge
        .Range("O" & int_MAHDR & ":P" & int_MAHDR).Value = strSp4
        
        .Range("B" & int_MAHDR & ":P" & int_MAHDR).Locked = True
    End With
End Sub

Public Sub MA_Zeilen_anlegen()
    Dim intAktZeile As Integer
    Dim intAnzahlMA As Integer
    
    intAktZeile = int_MAHDR 'Headerzeile
    intAnzahlMA = Mdl_Fuellanweisungen.liefere_Anzahl_MA
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Schleife |fffd|ber die Anzahl der anzulegenden MA
    Do While intAnzahlMA > 0
        'Mitarbeiterzeile anlegen
        intAktZeile = intAktZeile + 1 'n|fffd|chste Mitarbeiterzeile
        
        'Headerzeile mit Formatierung kopieren
        With Mdl_Workbook_Initialisierung.objTabellenblatt
            .Range("A" & int_MAHDR & ":Q" & int_MAHDR).Copy
            .Range("A" & intAktZeile & ":Q" & intAktZeile).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
        End With
        
        'Z|fffd|hler |fffd|ndern
        intAnzahlMA = intAnzahlMA - 1
    Loop
End Sub

Public Sub MA_Zeilen_f|fffd|llen()
    Dim strSp1, strSp2, strSp3, strSp4 As String
    Dim int_AktZeile As Integer
    Dim int_Anzahl_MA As Integer
    Dim i As Integer
    
    int_AktZeile = int_MAHDR 'Headerzeile
    int_Anzahl_MA = Mdl_Fuellanweisungen.liefere_Anzahl_MA
    i = 2
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    Do While int_Anzahl_MA > 0
        int_AktZeile = int_AktZeile + 1 'n|fffd|chste Mitarbeiterzeile
        
        'Hole Werte aus Tabellen 'UebernommeneMitarbeiter'
        With ThisWorkbook.Worksheets("UebernommeneMitarbeiter")
            strSp1 = .Cells(i, 1).Value 'Personalnummer
            strSp2 = .Cells(i, 2).Value 'Nachname
            strSp3 = .Cells(i, 3).Value 'Vorname
            strSp4 = .Cells(i, 5).Value 'Kostenstelle
        End With
        
        With Mdl_Workbook_Initialisierung.objTabellenblatt
            'Werte setzen
            .Range("C" & int_AktZeile & ":D" & int_AktZeile).NumberFormat = "@"
            .Range("C" & int_AktZeile & ":D" & int_AktZeile).Value = strSp1
            .Range("C" & int_AktZeile & ":D" & int_AktZeile).Font.name = "Segoe UI"
            .Range("E" & int_AktZeile & ":I" & int_AktZeile).NumberFormat = "@"
            .Range("E" & int_AktZeile & ":I" & int_AktZeile).Value = strSp2
            .Range("E" & int_AktZeile & ":I" & int_AktZeile).Font.name = "Segoe UI"
            .Range("J" & int_AktZeile & ":N" & int_AktZeile).NumberFormat = "@"
            .Range("J" & int_AktZeile & ":N" & int_AktZeile).Value = strSp3
            .Range("O" & int_AktZeile & ":P" & int_AktZeile).NumberFormat = "@"
            .Range("O" & int_AktZeile & ":P" & int_AktZeile).Value = strSp4
            .Range("O" & int_AktZeile & ":P" & int_AktZeile).Font.name = "Segoe UI"
            
            'Hintergrundfarbe abwechselnd setzen
            If int_AktZeile Mod 2 = 1 Then
                .Range("A" & int_AktZeile & ":Q" & int_AktZeile).Interior.ColorIndex = xlNone
            Else
                .Range("A" & int_AktZeile & ":Q" & int_AktZeile).Interior.Color = clrMaZeileGrau
            End If
            
            'Bereich sperren
            .Range("A" & int_AktZeile & ":Q" & int_AktZeile).Locked = True
        End With
        
        i = i + 1
        int_Anzahl_MA = int_Anzahl_MA - 1
    Loop
End Sub

Public Sub MA_Index_erstellen()
    Dim int_LZ, i, x As Integer

    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    
    'Blattschutz und Eingabepr|fffd|fung deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Eingabepr|fffd|fung deaktivieren
    Application.EnableEvents = False
    
    i = 1
    For x = int_MAHDR + i To int_LZ
        Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_MAHDR + i, 1) = i
        i = i + 1
    Next x
    
    'Eingabepr|fffd|fung aktivieren
    Application.EnableEvents = True
End Sub

Public Sub LA_Header_anlegen()
    Dim str_PWS As String
    Dim str_Range As String
    Dim str_AbrMonat As String
    Dim str_MK As String
    Dim clrFarbeHintergrund As Long
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbrMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbrMonat)
    
    'Hintergrundfarbe f|fffd|r Header festlegen
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    'Hole PWS aus Tabelle 'Verwaltungsdaten'
    str_PWS = Verwaltungsdaten.Cells(5, 2).Value
    
    'Bezeichnungsfeld Lohnartenname anlegen
    If (str_PWS = "LODAS") Then
        str_Range = "L2:Q4"
    Else
        str_Range = "L2:Q5"
    End If
    
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_Range)
        'Zusammenfassen
        .Merge
        
        'linken Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThick
        .Borders(xlEdgeLeft).Color = clrHintergrundAB
        
        'oberen Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlNone
        
        'rechten Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThick
        .Borders(xlEdgeRight).Color = clrHintergrundAB
        
        'unteren Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        'Text festlegen
        .Value = " Lohnart:"
        
        'Hintergrundfarbe
        .Interior.Color = clrFarbeHintergrund
        
        'Feld sch|fffd|tzen
        .Locked = True
    End With
    
    'Bezeichnungsfeld Bearbeitungsschl|fffd|ssel (LODAS)
    If (str_PWS = "LODAS") Then
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("L5:Q5")
            'Zusammenfassen
            .Merge
            
            'linken Rahmen festlegen
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).Weight = xlThin
            .Borders(xlEdgeLeft).Color = clrHintergrundAB
            
            'oberen Rahmen festlegen
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeTop).Weight = xlThin
            .Borders(xlEdgeTop).Color = clrHintergrundAB
            
            'rechten Rahmen festlegen
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlEdgeRight).Weight = xlThick
            .Borders(xlEdgeRight).Color = clrHintergrundAB
            
            'unteren Rahmen festlegen
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlThin
            .Borders(xlEdgeBottom).Color = clrHintergrundAB
            
            'Text anordnen
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlTop
            
            'Text festlegen
            .Value = " Bearbeitungsschl|fffd|ssel:"
            
            'Hintergrundfarbe
            .Interior.Color = clrFarbeHintergrund
            
            'Feld sch|fffd|tzen
            .Locked = True
        End With
        
        'Bearbeitungsschl|fffd|ssel: Kommentar einf|fffd|gen
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("Q5")
            If (.Comment Is Nothing) Then
                .AddComment ("Bearbeitungsschl|fffd|ssel: Erforderliche Eingabe (maximal 2-stellig, numerisch)")
            End If
        End With
    End If
    
    'Bezeichnungsfeld Lohnartennummer
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range("L6:Q6")
        'Zusammenfassen
        .Merge
        
        'linker Rahmen festlegen
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).Weight = xlThick
        .Borders(xlEdgeLeft).Color = clrHintergrundAB
        
        'oberer Rahmen festlegen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeTop).Color = clrHintergrundAB
        
        'rechter Rahmen festlegen
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlEdgeRight).Color = clrHintergrundAB
        
        'unterer Rahmen festlegen
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeBottom).Color = clrHintergrundAB
        
        'Text anordnen
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        
        'Text festlegen
        .Value = " Lohnartennummer (LA):"
        
        'Hintergrundfarbe
        .Interior.Color = clrFarbeHintergrund
        
        'Feld sch|fffd|tzen
        .Locked = True
    End With
End Sub

'Wenn LA in Zuordnungstabelle vorhanden sind!
Public Sub LA_Spalten_f|fffd|llen()
    Dim str_PWS As String
    Dim int_Anzahl_LA As Integer    'Zeilenanzahl aus der Tabelle Spaltenzuornung (max 20 Eintr|fffd|ge)

    Dim intAktiveSpalte As Integer  'Index der zu f|fffd|llenden Spalte
    Dim strAktiveSpalte As String   'Spaltenbuchstabe der zu f|fffd|llenden Spalte
    Dim int_LAZeile As String       'Variable f|fffd|r Index der LA aus der Spaltenzuordnung
    Dim intTblIndex As Integer      'Sheetsindex der aktuellen Erfassungstabelle
    Dim i As Byte                   'Z|fffd|hler der While-Schleife
    
    Dim str_MsgAntwort As String    'R|fffd|ckgabewert zur Fehlermeldung

    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Anzahl der bereits durch den Assistenten zugeordneten Lohnarten (minus 1 wegen Spalten|fffd|berschrift)
    int_Anzahl_LA = WorksheetFunction.CountA(ThisWorkbook.Worksheets("Spaltenzuordnung").Range("B1:B500")) - 1
    
    'Wenn Werte in der Tabelle "tbl_Spaltenzuordnung" vorhanden sind
    If int_Anzahl_LA > 0 Then
        i = 1
        
        Do While (i <= int_Anzahl_LA)
            'N|fffd|chste zu f|fffd|llende Spalte ermitteln
            intAktiveSpalte = int_ES + (i - 1) 'Spalte R + index
            strAktiveSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(intAktiveSpalte)
            
            'Sheetindex der aktuellen Erfassungstabelle vorbelegen
            intTblIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
            'Spaltenindex wird in interner Tabelle 'LA_in_Tabelle' hinterlegt
            Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 3).Value = intAktiveSpalte
            'Zeile in der LA in der Tabelle "AlleLohnarten" steht
            int_LAZeile = ThisWorkbook.Worksheets("Spaltenzuordnung").Cells(i + 1, 4).Value
BEFUELLEN:
            'Personalwirtschaftssystem aus Tabelle Verwaltungsdaten holen
            str_PWS = Verwaltungsdaten.Cells(5, 2).Value
            
            '***********Spalten bef|fffd|llen, wenn PWS = LODAS***********************************************************
            If str_PWS = "LODAS" Then
                'Range f|fffd|r Lohnartenname
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "2:" & strAktiveSpalte & "4")
                    .Merge
                    .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LAZeile, 2)
                    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
                End With
                
                'Range f|fffd|r Bearbeitungsschl|fffd|ssel
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "5")
                    .Merge
                    .Font.name = "Segoe UI"
                    .Value = Mdl_Fuellanweisungen.liefere_BS(int_LAZeile)
                End With
                
                'Range f|fffd|r Lohnartennummer
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "6")
                    .Merge
                    .Font.ColorIndex = 0
                    .Font.name = "Segoe UI"
                    .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LAZeile, 1)
                    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
                End With
                
                'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "7:" & strAktiveSpalte & int_MAHDR)
                    .Merge
                End With
                
            '***********Spalten bef|fffd|llen, wenn PWS = LuG*************************************************************
            ElseIf str_PWS = "Lohn und Gehalt" Then
                'Range f|fffd|r Lohnartenname
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "2:" & strAktiveSpalte & "5")
                    .Merge
                    .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LAZeile, 2)
                    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
                End With
                
                'Range f|fffd|r Lohnartennummer
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "6")
                    .Merge
                    .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LAZeile, 1)
                    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
                End With
                
                'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
                With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strAktiveSpalte & "7:" & strAktiveSpalte & int_MAHDR)
                    .Merge
                End With
            '********** wenn kein PWS hinterlegt ist*****************************************************************
            Else
                str_MsgAntwort = MsgBox("Personalwirtschaftssystem nicht bekannt:" & vbCrLf & vbCrLf & _
                                        "Das Personalwirtschaftssystem Ihres Beraters konnte nicht ermittel werden." & vbCrLf & _
                                        "Wenn Sie wissen, dass Ihr Berater 'LODAS' einsetzt, dann best|fffd|tigen Sie die Meldung mit 'Ja'." & vbCrLf & _
                                        "Setzt Ihr Berater 'Lohn und Gehalt' ein, so best|fffd|tigen Sie die Meldung mit 'Nein'." & vbCrLf & vbCrLf & _
                                        "Durch 'Abbrechen' wird die Anwendung beendet. Bitte nicht speichern!", _
                                        vbYesNoCancel + vbQuestion, _
                                        TOOL_HDR)
                             
                'Setze Personalwirtschaftssystem in Tabelle 'Verwaltungsdaten'
                If (str_MsgAntwort = vbYes) Then
                    Verwaltungsdaten.Cells(5, 2).Value = "LODAS"
                    GoTo BEFUELLEN
                    Exit Sub
                ElseIf (str_MsgAntwort = vbNo) Then
                    Verwaltungsdaten.Cells(5, 2).Value = "Lohn und Gehalt"
                    GoTo BEFUELLEN
                    Exit Sub
                Else
                    ThisWorkbook.Close
                End If
            End If
            
            'Z|fffd|hler erh|fffd|hen
            i = i + 1
        Loop
    'wenn Lohnarten au|fffd|erhalb der Zuordnung vorhanden sind, dann manuelles F|fffd|llen |fffd|ber Dialog erm|fffd|glichen************
    ElseIf WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("B1:B10000")) > 1 Then
        str_MsgAntwort = MsgBox("Hinweis: " & vbCrLf & vbCrLf & _
                                "Es befinden sich derzeit keine Lohnarten in der Bewegungsdatenerfassung." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                                "Wollen Sie die ersten Lohnarten sofort zum Hinzuf|fffd|gen ausw|fffd|hlen?", _
                                vbYesNo + vbQuestion, _
                                TOOL_HDR)
                                
        If (str_MsgAntwort = vbYes) Then
            If (Not Dialog_LA_hinzu Is Nothing) Then Set Dialog_LA_hinzu = Nothing
            
            Set Mdl_Dialogaktionen.Dialog_LA_hinzu = New UF_Lohnarten_hinzu
            
            On Error GoTo Fehlerbehandlung
            Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.RowSource _
            = "AlleLohnarten!A2:B" & CStr(WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("B1:B10000")))
            
            Mdl_Dialogaktionen.Dialog_LA_hinzu.Show
        End If
    'wenn keine Lohnarten in die Anwendung |fffd|bernommen wurden*********************************************************
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Es k|fffd|nnen keine Lohnarten der aktiven Tabelle hinzugef|fffd|gt werden," & vbCrLf & _
               "da keine Lohnarten in Ihre Excel-Arbeitsmappe |fffd|bergeben wurden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Wenden Sie sich umgehend an Ihren Steuerberater.", _
               vbCritical, _
               TOOL_HDR
        Exit Sub
    End If
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub LA_HINZU(ByVal strLA_Spalte As String, ByVal intLA_Zeile As Integer)
    Dim str_PWS As String
    Dim str_LH As String            'H|fffd|ufigkeit des Vorkommens der hinzuzuf|fffd|genden Lohnart
    Dim str_MsgAntwort As String
    Dim intTblIndex As Integer
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Wenn LA in der Tabelle AlleLohnarten vorhanden sind!
    If (Not WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("B1:B10000")) = 0) Then 'aus Tabelle AlleLohnarten heraus
        'Index des aktuelles Sheet ermitteln
        intTblIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
        'Spaltenindex wird in interner Tabelle hinterlegt
        Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 3).Value = CStr(Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
        'Spaltenbreite vergeben
        Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(strLA_Spalte).ColumnWidth = 12
        
        'Vorkommen der hinzuzuf|fffd|genden Lohnart ermitteln
        str_LH = CStr(liefere_LH(intLA_Zeile, strLA_Spalte) + 1)
        If (str_LH = "1") Then
            str_LH = ""
        Else
            str_LH = " (" & str_LH & ")"
        End If
ANLEGEN:
        str_PWS = Verwaltungsdaten.Cells(5, 2).Value
        
        'LA-Spalte in der aktiven Tabelle anlegen und bef|fffd|llen
        If (str_PWS = "LODAS") Then
            'Range f|fffd|r Lohnartenname
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "2:" & strLA_Spalte & "4")
                .Merge
                .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(intLA_Zeile, 2).Value & str_LH
                Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
            End With
            
            'Range f|fffd|r Bearbeitungsschl|fffd|ssel
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "5")
                .Merge
                .Value = Mdl_Fuellanweisungen.liefere_BS(intLA_Zeile)
            End With
            
            'Range f|fffd|r Lohnartennummer
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "6")
                .Merge
                .Font.ColorIndex = 0
                .Font.name = "Segoe UI"
                .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(intLA_Zeile, 1).Value
                Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
            End With
            
            'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "7:" & strLA_Spalte & int_MAHDR)
                .Merge
            End With
       ElseIf (str_PWS = "Lohn und Gehalt") Then
            'Range f|fffd|r Lohnartenname
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "2:" & strLA_Spalte & "5")
                .Merge
                .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(intLA_Zeile, 2).Value & str_LH
                Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
            End With
            
            'Range f|fffd|r Lohnartennummer
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "6")
                .Merge
                .Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(intLA_Zeile, 1).Value
                Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
            End With
            
            'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
            With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "7:" & strLA_Spalte & int_MAHDR)
                .Merge
            End With
        Else ' wenn kein Personalwirtschaftssystem hinterlegt ist
            str_MsgAntwort = MsgBox("Personalwirtschaftssystem nicht bekannt: " & vbCrLf & vbCrLf & _
                                    "Das Personalwirtschaftssystem Ihres Beraters konnte nicht ermittel werden." & vbCrLf & _
                                    "Wenn Sie wissen, dass Ihr Berater 'LODAS' einsetzt, dann best|fffd|tigen Sie die Meldung mit 'Ja'." & vbCrLf & _
                                    "Setzt Ihr Berater 'Lohn und Gehalt' ein, so best|fffd|tigen Sie die Meldung mit 'Nein'." & vbCrLf & vbCrLf & _
                                    "Durch 'Abbrechen' wird die Anwendung beendet. Bitte nicht speichern.", _
                                    vbYesNoCancel + vbQuestion, _
                                    TOOL_HDR)
                                    
            If (str_MsgAntwort = vbYes) Then
                Verwaltungsdaten.Cells(5, 2).Value = "LODAS"
                GoTo ANLEGEN
                Exit Sub
            ElseIf (str_MsgAntwort = vbNo) Then
                Verwaltungsdaten.Cells(5, 2).Value = "Lohn und Gehalt"
                GoTo ANLEGEN
                Exit Sub
            Else
                ThisWorkbook.Close
            End If
        End If
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Es k|fffd|nnen keine Lohnarten der aktiven Tabelle hinzugef|fffd|gt werden," & vbCrLf & _
               "da keine Lohnarten in Ihre Excel-Arbeitsmappe |fffd|bergeben wurden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Wenden Sie sich umgehend an Ihren Steuerberater.", _
               vbCritical, _
               TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub Statistik_LA_HINZU(LA_Spalte As String, LA_Nummer As String, LA_Name As String, BS_Nummer As String)
    Dim str_PWS As String
    Dim intTblIndex As Integer
    
    Dim str_AbrMonat As String
    Dim str_MK As String
    Dim clrFarbeHintergrund As Long
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbrMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbrMonat)
    
    'Hintergrundfarbe f|fffd|r Header festlegen
    If (str_MK <> 0) Then
        clrFarbeHintergrund = clrHeaderBlau
    Else
        clrFarbeHintergrund = clrHeaderGruen
    End If
    
    str_PWS = Verwaltungsdaten.Cells(5, 2).Value
    
    'Abbruchbedingung
    If Not (str_PWS = "LODAS") Then Exit Sub
    
    'Vorarbeiten********************************************************************************************
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Index des aktuellen Worksheets ermitteln
    intTblIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    'Spaltenindex wird in interner Tabelle hinterlegt
    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 3).Value = CStr(Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
    'Spaltenbreite vergeben
    Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(LA_Spalte).ColumnWidth = 12
    
    'Statistiklohnart in Spalte anlegen*********************************************************************
    
    'Range f|fffd|r Lohnartenname
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(LA_Spalte & "2:" & LA_Spalte & "4")
        .Merge
        .Font.name = "Segoe UI"
        .Value = LA_Name
        Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
    End With
    
    'Range f|fffd|r Bearbeitungsschl|fffd|ssel
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(LA_Spalte & "5")
        .Merge
        .Font.name = "Segoe UI"
        .Value = BS_Nummer
    End With
    
    'Range f|fffd|r Lohnartennummer
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(LA_Spalte & "6")
        .Merge
        .Font.Color = clrFarbeHintergrund
        .Font.name = "Segoe UI"
        .Value = LA_Nummer
        Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
    End With
    
    'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
    With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(LA_Spalte & "7:" & LA_Spalte & int_MAHDR)
        .Merge
    End With
End Sub

Public Sub NETTO_LA_HINZU(strLA_Spalte As String, nummer As String, name As String)
    Dim str_PWS As String
    Dim i As Integer, intTblIndex As Integer
    Dim str_LH As String
    Dim c As Range
    Dim str_MsgAntwort As String
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Index des aktuelles Sheet ermitteln
    intTblIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    'Spaltenindex wird in interner Tabelle hinterlegt
    Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 3).Value = CStr(Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE + 1)
    'Spaltenbreite vergeben
    Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(strLA_Spalte).ColumnWidth = 12
    
    'internen Namen vergeben, wenn nichts vergeben wurde...
    If (name = "") Then name = "Nettobe- bzw. abzug"
    
    'Vorkommen der hinzuzuf|fffd|genden Lohnart ermitteln
    i = 0
    For Each c In Mdl_Workbook_Initialisierung.objTabellenblatt.Range("R2:" & strLA_Spalte & "2")
        If ((VBA.InStr(1, c.Value, " (") <> 0) And (VBA.Right(c.Value, 1) = ")")) Then
            If (VBA.Left(c.Value, (VBA.InStr(1, c.Value, " (")) - 1) = name) Then
                i = i + 1
            End If
        Else
            If (c.Value = name) Then
                i = i + 1
            End If
        End If
    Next c
    
    str_LH = CStr(i + 1)
    If (str_LH = "1") Then
        str_LH = ""
    Else
        str_LH = " (" & str_LH & ")"
    End If
    
ANLEGEN:
    str_PWS = Verwaltungsdaten.Cells(5, 2).Value
    
    'LA-Spalte in der aktiven Tabelle anlegen und bef|fffd|llen
    If (str_PWS = "LODAS") Then
        'Range f|fffd|r Lohnartenname
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "2:" & strLA_Spalte & "4")
            .Merge
            .Value = name & str_LH
            Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
        End With
        
        'Range f|fffd|r Bearbeitungsschl|fffd|ssel
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "5")
            .Merge
            .Value = 3
        End With
        
        'Range f|fffd|r Lohnartennummer
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "6")
            .Merge
            .Font.ColorIndex = 0
            .Font.name = "Segoe UI"
            .Value = nummer
            Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
        End With
        
        'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "7:" & strLA_Spalte & int_MAHDR)
            .Merge
        End With
    ElseIf (str_PWS = "Lohn und Gehalt") Then
        'Range f|fffd|r Lohnartenname
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "2:" & strLA_Spalte & "5")
            .Merge
            .Value = name & str_LH
            Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 2).Value = .Value ' |fffd|bernahme in interne Tabelle
        End With
        
        'Range f|fffd|r Lohnartennummer
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "6")
            .Merge
            .Value = nummer
            Worksheets("LA_in_Tabelle").Cells(Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle + 1, (intTblIndex * 3) + 1).Value = .Value ' |fffd|bernahme in interne Tabelle
        End With
        
        'Range f|fffd|r doppelte Leerzeile vor Eingabebereich
        With Mdl_Workbook_Initialisierung.objTabellenblatt.Range(strLA_Spalte & "7:" & strLA_Spalte & int_MAHDR)
            .Merge
        End With
    Else 'wenn kein Personalwirtschaftssystem hinterlegt ist
        str_MsgAntwort = MsgBox("Kein Personalwirtschaftssystem hinterlegt: " & vbCrLf & vbCrLf & _
                                "Das Personalwirtschaftssystem Ihres Beraters konnte nicht ermittel werden." & vbCrLf & _
                                "Wenn Sie wissen,dass Ihr Berater 'LODAS' einsetzt, dann best|fffd|tigen Sie die Meldung mit 'Ja'." & vbCrLf & _
                                "Setzt Ihr Berater 'Lohn und Gehalt' ein, so best|fffd|tigen Sie die Meldung mit 'Nein'." & vbCrLf & vbCrLf & _
                                "Durch 'Abbrechen' wird die Anwendung beendet. Bitte nicht speichern!", _
                                vbYesNoCancel + vbQuestion, _
                                TOOL_HDR)
                                
        If (str_MsgAntwort = vbYes) Then
            Verwaltungsdaten.Cells(5, 2).Value = "LODAS"
            GoTo ANLEGEN
            Exit Sub
        ElseIf (str_MsgAntwort = vbNo) Then
            Verwaltungsdaten.Cells(5, 2).Value = "Lohn und Gehalt"
            GoTo ANLEGEN
            Exit Sub
        Else
            ThisWorkbook.Close SaveChanges:=False
        End If
    End If
End Sub

Public Function liefere_letzte_Zeile_LVE() As Integer
'liefert den Index der letzen belegten Zeile der aktiven Tabelle
    liefere_letzte_Zeile_LVE = int_MAHDR + liefere_Anzahl_MA
End Function

Public Function liefere_letzte_Spalte_LVE() As Integer
'liefert die letzte belegte Spalte der aktiven Tabelle
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    Dim i As Integer
    i = 0
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        Do While (.Cells(2, int_ES + i).Value <> "" Or .Cells(6, int_ES + i).Value <> "")
            i = i + 1
        Loop
    End With
    
    liefere_letzte_Spalte_LVE = int_ES + i - 1
End Function

Public Function liefere_Anzahl_Bewegungsdaten() As Integer
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim str_ES As String
    Dim str_LS As String
    
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    str_ES = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_ES)
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    liefere_Anzahl_Bewegungsdaten = WorksheetFunction.CountA(Mdl_Workbook_Initialisierung.objTabellenblatt.Range(str_ES & int_EZ & ":" & str_LS & int_LZ))
End Function

Public Function liefere_letzte_Zeile_LA_in_Tabelle() As Integer 'liefert den Index der letzen belegten Zeile der Tabelle "LA_in_Tabelle"
    Dim intWSIndex As Integer
    Dim strSpalte As String
    
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    strSpalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
    
    liefere_letzte_Zeile_LA_in_Tabelle = WorksheetFunction.CountA(Worksheets("LA_in_Tabelle").Range(strSpalte & "1:" & strSpalte & "255"))
End Function

Public Function liefere_letzte_Spalte_LA_in_Tabelle() As Integer 'liefert den Index der letzen Spalte der Tabelle "LA_in_Tabelle"
    Dim i As Integer
    
    i = 1
    Do While (Worksheets("LA_in_Tabelle").Cells(1, i).Value <> "")
        i = i + 1
    Loop
    
    liefere_letzte_Spalte_LA_in_Tabelle = i - 1
End Function

Public Function liefere_Anzahl_MA() As Integer 'Funktion ermittelt die Anzahl der MA
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    If (Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value = "") Then
        If (ThisWorkbook.Worksheets("UebernommeneMitarbeiter").UsedRange.Rows.count - 1) > 0 Then
            Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value = ThisWorkbook.Worksheets("UebernommeneMitarbeiter").UsedRange.Rows.count - 1
        Else
            MsgBox "Fehler: " & vbCrLf & vbCrLf & _
                   "Es k|fffd|nnen keine Mitarbeiter der aktiven Tabelle hinzugef|fffd|gt werden," & vbCrLf & _
                   "da keine Mitarbeiter in Ihre Excel-Arbeitsmappe |fffd|bergeben wurden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Wenden Sie sich umgehend an Ihren Steuerberater.", _
                   vbCritical, _
                   TOOL_HDR
            Exit Function
        End If
    End If
    
    liefere_Anzahl_MA = CInt(Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(7, 17).Value)
End Function

Public Function liefere_Spaltenbuchstabe(ByVal spaltenIndex As Integer) As String
'Methode wandelt Spaltenindex in Buchstabe um
    Dim columnAdress As String
    Dim Spaltenbuchstabe As String
        
    columnAdress = Mdl_Workbook_Initialisierung.objTabellenblatt.Columns(spaltenIndex).Address
    Spaltenbuchstabe = VBA.Mid(columnAdress, 2, VBA.InStr(2, columnAdress, "$") - 3)
    
    liefere_Spaltenbuchstabe = Spaltenbuchstabe
End Function

'liefert den ben|fffd|tigten BS aus der Tabelle "Bearbeitungsschluessel"
Private Function liefere_BS(ByVal int_LA_Zeile As Integer) As String
    Dim str_SLA As String
    Dim str_Temp As String
    Dim int_BSZeile As Integer
    Dim c As Range
    Dim i As Integer
    
    On Error Resume Next
    If (ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LA_Zeile, 3).Value <> "") Then
        For Each c In Bearbeitungsschluessel.Range("C2:C440")
            If (c.Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LA_Zeile, 3).Value) Then
                str_Temp = c.Address
                int_BSZeile = CInt(VBA.Mid(str_Temp, 4, Len(str_Temp) - 3))
                Exit For
            End If
        Next c
        liefere_BS = Bearbeitungsschluessel.Cells(int_BSZeile, 4).Value
    Else
        liefere_BS = ""
    End If
    On Error GoTo 0
End Function

'liefere Lohnartenh|fffd|ufigkeit(H|fffd|ufigkeit einer LA in der aktiven Tabelle)
Private Function liefere_LH(ByVal int_LA_Zeile As Integer, ByVal str_Spalte As String) As Integer
    Dim c As Range
    
    liefere_LH = 0
    For Each c In Mdl_Workbook_Initialisierung.objTabellenblatt.Range("R6:" & str_Spalte & "6")
        If (c.Value = ThisWorkbook.Worksheets("AlleLohnarten").Cells(int_LA_Zeile, 1).Value) Then
            liefere_LH = liefere_LH + 1
        End If
    Next c
End Function

'Index des aktiven Sheets anhand der Reihenfolge, in der es nach dem InitialSheet eingef|fffd|gt wurde
Public Function liefere_SheetIndex() As Integer
    Dim i As Integer
    
    If Not Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing Then
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
        For i = 1 To UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
            If (Mdl_Workbook_Initialisierung.Erfassungsblaetter(i) = Mdl_Workbook_Initialisierung.objTabellenblatt.name) Then
                liefere_SheetIndex = i - 1 '-1 wegen interner Z|fffd|hlweise bei 0 = 1. Sheet
            End If
        Next i
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Interner Fehler wegen inkorrekter Objektzuordnung!" & vbCrLf & _
               "Der Index der aktiven Tabelle konnte nicht ermittelt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " F|fffd|hren Sie die Aktion erneut durch.", _
               vbCritical, _
               TOOL_HDR
        Exit Function
    End If
End Function

Public Function liefere_Range_zul|fffd|schendes_WS(ByVal strWSName As String) As String
    Dim ws As Range
    
    For Each ws In Verwaltungsdaten.Range("D1:D250")
        If (ws.Value = CVar(strWSName)) Then
            liefere_Range_zul|fffd|schendes_WS = "D" & ws.Row
            Exit For
        End If
    Next ws
    
    If (liefere_Range_zul|fffd|schendes_WS = "") Then
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "W|fffd|hrend des L|fffd|schvorgangs ist ein interner Fehler aufgetreten." & vbCrLf & _
               "Das zul|fffd|schende Worksheet befindet sich nicht in der internen Verwaltungstabelle." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Starten Sie die Anwendung ohne zu speichern neu.", _
               vbCritical, _
               TOOL_HDR
        Exit Function
    End If
End Function


Attribute VB_Name = "Mdl_Pruefungen"
Option Explicit
Option Base 1

'Funktion liefert True zur|fffd|ck, wenn alle Mandantenstammdaten in der LVE-Tabelle (Workbook) vorhanden sind.
Public Function Mandantenstammdaten_vorhanden() As Boolean
    Mandantenstammdaten_vorhanden = True
    
    If (Verwaltungsdaten.Cells(2, 2).Value = "") Then Mandantenstammdaten_vorhanden = False     'Beraternummer
    If (Verwaltungsdaten.Cells(3, 2).Value = "") Then Mandantenstammdaten_vorhanden = False     'Mandantennummer
    If (Verwaltungsdaten.Cells(5, 2).Value = "") Then Mandantenstammdaten_vorhanden = False     'Personalwirtschaftssystem
    If (Verwaltungsdaten.Cells(6, 2).Value = "") Then Mandantenstammdaten_vorhanden = False     'Abrechungsmonat
End Function

Public Function Tabellenblatt_ist_Abrechungsmonat(ByRef Tabelle As Object) As Boolean
    Dim str_Monat As String 'Monat (ausgeschrieben)
    Dim str_Jahr As String  'Jahr (JJ)
    Dim str_MK As String    'Monatskennung (0 bis -12)
    
    If (Tabelle Is Nothing) Then Tabellenblatt_ist_Abrechungsmonat = False
    
    On Error GoTo Fehlerbehandlung
    str_Monat = VBA.Mid(Tabelle.name, 1, VBA.InStr(Tabelle.name, " ") - 1)
    str_Jahr = VBA.Mid(Tabelle.name, VBA.InStr(Tabelle.name, " ") + 1, 2)
    str_MK = VBA.Mid(Tabelle.name, VBA.InStr(Tabelle.name, "_"), Len(Tabelle.name) - VBA.InStr(Tabelle.name, "_") + 1)
    
    Tabellenblatt_ist_Abrechungsmonat = ((Not str_Monat = "") And (Not str_Jahr = "") And (Not str_MK = ""))
    Exit Function
    
Fehlerbehandlung:
    Tabellenblatt_ist_Abrechungsmonat = False
End Function

Public Function Pr|fffd|feEingabeAbrechnungsmonat(ByVal Abrechnungsmonat As String, ByVal bln_ist_Nachberechnung As Boolean, ByVal str_AbrDAT As String) As Boolean
    Dim str_split_Neu() As String
    Dim str_split_Alt() As String
    Dim bool, blnWahr1, blnWahr2, blnWahr3, blnWahr4, blnWahr5, blnWahr6 As Boolean
    
    str_split_Neu = Split(Abrechnungsmonat, "/")
    str_split_Alt = Split(str_AbrDAT, "/")
    bool = True
    
    If Not UBound(str_split_Neu) = 1 Then
        bool = False
    Else
        If Not (Len(str_split_Neu(0)) = 2 Or Len(str_split_Neu(0)) = 1) Or Not Len(str_split_Neu(1)) = 4 Then
            bool = False
        Else
            If Not IsNumeric(str_split_Neu(0)) Or Not IsNumeric(str_split_Neu(1)) Then
                bool = False
            Else
                If Not Mdl_Pruefungen.Pr|fffd|fung_Nur_Ziffern(str_split_Neu(0)) Or Not Mdl_Pruefungen.Pr|fffd|fung_Nur_Ziffern(str_split_Neu(1)) Then
                    bool = False
                Else
                    If (Not (bln_ist_Nachberechnung)) Then
                        'Neuer Abrechnungsmonat
                        If Not CLng(str_split_Neu(1)) < CLng(str_split_Alt(1)) Then
                            If ((CLng(str_split_Neu(1)) = CLng(str_split_Alt(1))) And (CLng(str_split_Neu(0)) <= CLng(str_split_Alt(0)))) Then
                                blnWahr4 = True
                            End If
                        Else
                            blnWahr3 = True
                        End If
                    Else
                        'Neuer Nachberechnungsmonat
                        If CLng(str_split_Neu(1)) <= CLng(str_split_Alt(1)) Then
                            If (Not (CLng(str_split_Neu(1))) <= (CLng(str_split_Alt(1)) - 2)) Then
                                If (str_AbrDAT <> Abrechnungsmonat) Then
                                    If (CLng(str_split_Neu(0)) <= 12 Or CLng(str_split_Neu(0)) >= 0) Then
                                        If (str_split_Neu(1) = str_split_Alt(1)) Then
                                            If Not (CLng(str_split_Neu(0)) < CLng(str_split_Alt(0))) Then
                                                blnWahr6 = True
                                            End If
                                        End If
                                    Else
                                        blnWahr2 = True
                                    End If
                                Else
                                    blnWahr6 = True
                                End If
                            Else
                                blnWahr5 = True
                            End If
                        Else
                            blnWahr1 = True
                        End If
                    End If
                End If
            End If
        End If
    End If
    
    If Not bool Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
               "Ihr angegebener Abrechnungsmonat besitzt ein inkorrektes Format." & vbCrLf & _
               "Die Aktion wird aufgrund dieses internen Fehlers abgebrochen.", _
               vbCritical, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr1 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebenes Nachberechnungsjahr ist gr|fffd||fffd|er als das Jahr Ihres Abrechnungsmonats." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " |fffd|ndern Sie Ihr Abrechnungsjahr.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr2 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebener Abrechnungsmonat besitzt einen unzul|fffd|ssigen Wert." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Geben Sie einen Monat zwischen 01 und 12 ein.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr3 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebenes Abrechnungsjahr besitzt einen unzul|fffd|ssigen Wert." & vbCrLf & _
               "Das neue Abrechnungsjahr darf nicht kleiner als das aktuelle Abrechnungsjahr sein." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihr angegebenes Abrechnungsjahr im Auswahldialog.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr4 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebener Abrechnungsmonat besitzt einen unzul|fffd|ssigen Wert." & vbCrLf & _
               "Ihr angegebener Abrechnungsmonat muss gr|fffd||fffd|er als der aktuelle Abrechnungsmonat sein." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihren angegebenen Abrechnungmonat im Auswahldialog.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr5 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebener Nachberechnungsmonat besitzt einen unzul|fffd|ssigen Wert." & vbCrLf & _
               "Ihr angegebener Nachberechnungsmonat darf nicht mehr als 12 Monate vor dem aktuellen Abrechnungsmonat liegen." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihren angegebenen Nachberechnungmonat im Auswahldialog.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If blnWahr6 Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Ihr angegebener Nachberechnungsmonat besitzt einen unzul|fffd|ssigen Wert." & vbCrLf & _
               "Der neue Nachberechnungsmonat darf nicht gr|fffd||fffd|er oder gleich dem aktuellen Abrechnungsmonat sein." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihren angegebenen Nachberechnungmonat im Auswahldialog.", _
               vbInformation, _
               TOOL_HDR
               
        Pr|fffd|feEingabeAbrechnungsmonat = False
        Exit Function
    End If
    
    If (bool And Not blnWahr1 And Not blnWahr2 And Not blnWahr3 And Not blnWahr4 And Not blnWahr5 And Not blnWahr6) Then
        Pr|fffd|feEingabeAbrechnungsmonat = True
    End If
End Function

Public Function Bewegungdaten_vorhanden_DEL_AM(ByVal str_WS_Index As String) As Boolean
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim str_ES As String
    Dim str_LS As String
    
    Dim int_Anzahl As Integer
    Dim str_Temp As String
    Dim i As Integer
    
    Bewegungdaten_vorhanden_DEL_AM = False
    
    'Name des betroffenen Abrechnungsmonats ermitteln
    str_Temp = VBA.Mid(ThisWorkbook.Worksheets(CLng(str_WS_Index)).name, 1, VBA.InStr(ThisWorkbook.Worksheets(CLng(str_WS_Index)).name, "_") - 1)
    
    'jede betroffene Tabelle |fffd|berpr|fffd|fen
    For i = 1 To ThisWorkbook.Worksheets.count
        If (ThisWorkbook.Worksheets(i).visible = xlSheetVisible) Then
            If (VBA.Mid(ThisWorkbook.Worksheets(i).name, 1, VBA.InStr(ThisWorkbook.Worksheets(i).name, "_") - 1) = str_Temp) Then
                Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(i)
                
                int_Anzahl = Mdl_Fuellanweisungen.liefere_Anzahl_Bewegungsdaten
                If (int_Anzahl <> 0) Then Bewegungdaten_vorhanden_DEL_AM = True
            End If
        End If
    Next i
End Function

Public Function Bewegungdaten_vorhanden_DEL_NM(ByVal str_WS_Index As String) As Boolean
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim str_ES As String
    Dim str_LS As String
    
    Dim int_Anzahl As Integer
    Dim i As Integer
    
    Bewegungdaten_vorhanden_DEL_NM = False
    
    'jede betroffene Tabelle |fffd|berpr|fffd|fen
    For i = 1 To ThisWorkbook.Worksheets.count
        If (ThisWorkbook.Worksheets(i).visible = xlSheetVisible) Then
            If (ThisWorkbook.Worksheets(i).name = ThisWorkbook.Worksheets(CLng(str_WS_Index)).name) Then
                Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(i)
                
                int_Anzahl = Mdl_Fuellanweisungen.liefere_Anzahl_Bewegungsdaten
                If (int_Anzahl <> 0) Then Bewegungdaten_vorhanden_DEL_NM = True
            End If
        End If
    Next i
End Function

'Funktion liefert "OK" zur|fffd|ck, wenn sich Bewegungsdaten in der gerade aktiven Tabelle befinden.
Public Function Bewegungdaten_vorhanden_Export(ByRef Tabelle As Object, ByRef int_LZ, int_LS As Integer) As String
    Dim str_ES As String
    Dim str_LS As String
    
    str_ES = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_ES)
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    If (WorksheetFunction.CountA(Tabelle.Range(str_ES & int_EZ & ":" & str_LS & int_LZ)) = 0) Then
        Bewegungdaten_vorhanden_Export = vbTab & "Hinweis: Es sind keine Bewegungsdaten f|fffd|r den Export vorhanden." & vbCrLf & _
                                         vbTab & "Der Export dieser Erfassungstabelle wird daher abgebrochen." & vbCrLf & _
                                         vbTab & VBA.Chr$(187) & " Erfassen Sie f|fffd|r diesen Monat Bewegungsdaten." & vbCrLf
    Else
        Bewegungdaten_vorhanden_Export = "OK"
    End If
End Function

'Funktion liefert OK zur|fffd|ck, wenn die Exportdatei (str_FileName) existiert.
Public Function Exportdatei_existiert(ByRef str_FileName As String) As String
    If (Dir(str_FileName) <> "") Then
        Exportdatei_existiert = "OK"
    Else
        Exportdatei_existiert = vbTab & "Hinweis: Es ist ein Fehler beim Anlegen der Exportdatei aufgetreten." & vbCrLf & _
                                vbTab & "Der Export dieser Tabelle wurde daher abgebrochen." & vbCrLf & _
                                vbTab & VBA.Chr$(187) & " F|fffd|hren Sie den Export dieser Tabelle erneut durch." & vbCrLf
    End If
End Function

'Funktion liefert OK zur|fffd|ck, wenn alle Zeilen mit Bewegungsdaten in der Exportdatei vorhanden sind.
Public Function Exportdatei_vollstaendig(ByRef str_FileName As String, ByVal int_Zeilen As Integer, ByRef bln_Lodas As Boolean) As String
    If (Exportdatei_existiert(str_FileName) = "OK") Then
        Dim objFSO As Object
        Dim objFile As Object
        Dim i As Integer
        Dim str_ZI As String
        
        Set objFSO = CreateObject("Scripting.FileSystemObject")
        Set objFile = objFSO.OpenTextFile(str_FileName, 1, False, -2)
        
        i = 0
        With objFile
            On Error Resume Next
            Do Until (Err.Number = 62)
                str_ZI = objFile.ReadLine
                If (str_ZI <> "") Then i = i + 1
            Loop
            On Error GoTo 0
            objFile.Close
        End With
        
        Set objFSO = Nothing
        Set objFile = Nothing
        
        If (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
            If (int_Zeilen = i - 9) Then Exportdatei_vollstaendig = "OK"
        Else
            If (int_Zeilen = i - 2) Then Exportdatei_vollstaendig = "OK"
        End If
        
    Else
        Exportdatei_vollstaendig = vbTab & "Hinweis: Es ist ein Fehler beim Erzeugen der Exportdatei aufgetreten." & vbCrLf & _
                                   vbTab & "Die Exportdatei dieser Erfassungstabelle ist nicht vollst|fffd|ndig." & vbCrLf & _
                                   vbTab & VBA.Chr$(187) & " F|fffd|hren Sie den Export dieser Tabelle erneut durch." & vbCrLf
    End If
    
End Function

'Funktion liefert OK zur|fffd|ck, wenn alle Zeilen mit Bewegungsdaten auch eine Personalnummer besitzen.
Public Function existiert_PersNr(ByRef Tabelle As Object, ByRef int_LZ, int_LS As Integer) As String
    Dim str_ES As String
    Dim str_LS As String
    Dim c As Range
    
    existiert_PersNr = "OK"
    
    str_ES = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_ES)
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    For Each c In Tabelle.Range("C" & int_EZ & ":C" & int_LZ)
        If (c.Value = "") Then
            If (WorksheetFunction.CountA(Tabelle.Range(str_ES & c.Row & ":" & str_LS & c.Row)) <> 0) Then
                existiert_PersNr = vbTab & "Hinweis: Es ist ein Fehler bei der Erzeugung der Exportdatei aufgetreten." & vbCrLf & _
                                   vbTab & "Mindestens eine Personalnummer wurde in dieser Tabelle nicht vergeben." & vbCrLf & _
                                   vbTab & VBA.Chr$(187) & " Erfassen Sie fehlende Personalnummern und f|fffd|hren Sie den Export erneut durch." & vbCrLf
                Exit For
            End If
        End If
    Next c
End Function

'Funktion liefert OK zur|fffd|ck, wenn alle Mitarbeiterzeilen eine Personalnummer besitzen.
Public Function existiert_PNr(ByRef Tabelle As Object, ByRef int_LZ, int_LS As Integer) As String
    Dim c As Range
    
    existiert_PNr = "OK"
    
    For Each c In Tabelle.Range("C" & int_EZ & ":C" & int_LZ)
        If (c.Value = "") Then
            existiert_PNr = "FALSCH"
            Exit For
        End If
    Next c
End Function

'Funktion liefert True zur|fffd|ck, wenn in der entsprechenden Zeile eine Kostenstelle angegeben wurde.
Public Function existiert_Kostenstelle(ByRef Tabelle As Object, ByRef int_Zeile As Integer) As Boolean
    existiert_Kostenstelle = Tabelle.Cells(int_Zeile, 15).Value <> ""
End Function
   
'Funktion liefert OK zur|fffd|ck, wenn in der angegebenen Spalte der Wert f|fffd|r die Lohnart existiert
Public Function existiert_LA_Nummer(ByRef Tabelle As Object, ByRef int_Spalte As Integer) As String
    Dim str_Spalte As String
    
    str_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte)
    
    If (Tabelle.Range(str_Spalte & int_ZLAN).Value = "") Then
        existiert_LA_Nummer = vbTab & "Fehler: Die Lohnartennummer konnte intern nicht ermittelt werden." & vbCrLf & _
                              vbTab & "Der Export dieser Tabelle wird daher abgebrochen." & vbCrLf
    Else
        existiert_LA_Nummer = "OK"
    End If
End Function

'Funktion liefert OK zur|fffd|ck, wenn in der entsprechenden Spalte ein Bearbeitungsschl|fffd|ssel existiert.
Public Function existiert_BS(ByRef Tabelle As Object, ByRef int_Zeile, int_Spalte As Integer) As String
    Dim str_Spalte As String
    
    existiert_BS = "OK"
    
    str_Spalte = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_Spalte)
    
    If (existiert_Wert(Tabelle, int_Zeile, int_Spalte)) Then
        If (Tabelle.Range(str_Spalte & int_ZBS).Value = "") Then
            existiert_BS = vbTab & "Hinweis: Es ist ein Fehler bei der Erzeugung der Exportdatei aufgetreten." & _
                           vbTab & "Ein Bearbeitungsschl|fffd|ssel konnte in dieser Tabelle nicht ermittelt werden." & vbCrLf & _
                           vbTab & VBA.Chr$(187) & " Erfassen Sie fehlende Bearbeitungsschl|fffd|ssel." & vbCrLf
        End If
    End If
End Function

'Funktion liefert True zur|fffd|ck, wenn in der entsprechenden Zelle (Zeile/Spalte) ein Bewegungsdatenwert existiert.
Public Function existiert_Wert(ByRef Tabelle As Object, ByRef int_Zeile, int_Spalte As Integer) As Boolean
    existiert_Wert = Tabelle.Cells(int_Zeile, int_Spalte).Value <> ""
End Function

'Funktion pr|fffd|ft den Inhalt eines Strings auf Ziffern. Sind nummerische Werte enthalten, so gibt die Funktion FALSE zur|fffd|ck.
Public Function Pr|fffd|fung_Nur_Ziffern(ByVal str_Tmp As String) As Boolean
    Dim i As Long
    
    Pr|fffd|fung_Nur_Ziffern = True
    
    For i = 1 To Len(str_Tmp)
        If Not (VBA.Mid(str_Tmp, i, 1) = "0" _
                Or VBA.Mid(str_Tmp, i, 1) = "1" _
                Or VBA.Mid(str_Tmp, i, 1) = "2" _
                Or VBA.Mid(str_Tmp, i, 1) = "3" _
                Or VBA.Mid(str_Tmp, i, 1) = "4" _
                Or VBA.Mid(str_Tmp, i, 1) = "5" _
                Or VBA.Mid(str_Tmp, i, 1) = "6" _
                Or VBA.Mid(str_Tmp, i, 1) = "7" _
                Or VBA.Mid(str_Tmp, i, 1) = "8" _
                Or VBA.Mid(str_Tmp, i, 1) = "9") Then
            Pr|fffd|fung_Nur_Ziffern = False
            Exit For
        End If
    Next i
End Function
Attribute VB_Name = "Mdl_RibbonX"
Option Private Module
Option Explicit
Option Base 1

'64-bit compatability
#If VBA7 Then
    Public Declare PtrSafe Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" ( _
        ByRef destination As Any, _
        ByRef source As Any, _
        ByVal length As Long)
#Else
    Public Declare Sub CopyMemory Lib "kernel32.dll" Alias "RtlMoveMemory" ( _
        ByRef destination As Any, _
        ByRef source As Any, _
        ByVal length As Long)
#End If

Private Const NAMES_NAME = "Ribbon"

Private Const MENU_START_TAG = "<menu xmlns=""http://schemas.microsoft.com/office/2009/07/customui"">" & vbNewLine
Private Const MENU_END_TAG = "</menu>" & vbNewLine
Private Const SPLITBUTTON_END_TAG = "</splitButton>" & vbNewLine

Private Const DEFAULT_SELECTION = "keine Selektion"

Private str_AbrMonate() As String   'Auswahl der angelegten Abrechungsmonate
Private str_NachMonate() As String  'Auswahl der angelegten Nachberechungsmonate

Private bln_NachMonatEnabled As Boolean

Private muiRibbon As IRibbonUI

Public Property Get SelectedAbrMonat() As String
    SelectedAbrMonat = Verwaltungsdaten.Cells(17, 2).Value
End Property

Public Property Let SelectedAbrMonat(ByVal vNewValue As String)
    Verwaltungsdaten.Cells(17, 2).Value = vNewValue
End Property

Public Property Get SelectedNachMonat() As String
    SelectedNachMonat = Verwaltungsdaten.Cells(18, 2).Value
End Property

Public Property Let SelectedNachMonat(ByVal vNewValue As String)
    Verwaltungsdaten.Cells(18, 2).Value = vNewValue
End Property

'Diese Methode liefert setzt die Reference der Ribbonleiste neu, wenn sie
'durch "State loss events" verloren gegangen ist.
Sub GetRibbonReference()
    Dim objName As name
    
    For Each objName In ThisWorkbook.Names
        If objName.name = NAMES_NAME Then
            #If VBA7 Then
                Set muiRibbon = GetRibbon(CLngPtr(Mid$(objName.RefersTo, 2)))
            #Else
                Set muiRibbon = GetRibbon(CLng(Mid$(objName.RefersTo, 2)))
            #End If
            Exit For
        End If
    Next
    
    Set objName = Nothing
End Sub

#If VBA7 Then
Function GetRibbon(ByVal lRibbonPointer As LongPtr) As Object
#Else
Function GetRibbon(ByVal lRibbonPointer As Long) As Object
#End If
    Dim objRibbon As Object
    
    If (lRibbonPointer <> 0) Then
        'CopyMemory will crash Excel if lngRibPtr is invalid
        Call CopyMemory(objRibbon, lRibbonPointer, LenB(lRibbonPointer))
        Set GetRibbon = objRibbon
    Else
        MsgBox "RibbonOnLoad() failed to store a pointer to the IRibbonUI object." & _
                vbNewLine & _
                "The workbook needs to be closed and re-opened."
    End If
    
    Set objRibbon = Nothing
End Function

Private Sub SetControlDefaults()
    Dim str_TblName As String
    
    'Erfassungsbl|fffd|tter laden
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
    'Abrechung: Zuletzt angelegten Abrechungsmonat als Default festlegen
    str_TblName = Mdl_Workbook_Initialisierung.Erfassungsblaetter(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter))
    SelectedAbrMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(str_TblName)
    
    'Nachberechung: Auswahl der Nachberechungsmonats mit 'keine Selektion' vorbelegen.
    SelectedNachMonat = DEFAULT_SELECTION
    
    bln_NachMonatEnabled = True
End Sub

Private Sub AuswahlAbrMonate_laden()
    Dim str_TblName, str_Monat, str_MK As String
    Dim i, j As Integer
    
    j = 0
    
    On Error Resume Next
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0
        
    'Abrechnungsmonate aktualisieren
    Do While (i >= 1)
        str_TblName = Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)
        
        'Tabellenblattnamen zerlegen
        str_Monat = Mdl_Erfassungsblaetter.Monat_ermittlen(str_TblName)
        str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_TblName)
        
        'Wenn der Monat ein Abrechungsmonat ist, dann hinzuf|fffd|gen
        If (str_MK = "0") Then
            j = j + 1
            ReDim Preserve str_AbrMonate(j)
            str_AbrMonate(j) = str_Monat
        End If
        
        'N|fffd|chstes Element
        i = i - 1
    Loop
End Sub

Private Sub AuswahlNachMonate_laden()
    Dim str_TblName, str_TblNameAktiv, str_Monat, str_MK, str_Temp, str_MonatAktiv As String
    Dim i, j As Byte
    
    j = 0
    
    On Error Resume Next
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0
        
    bln_NachMonatEnabled = True
    
    'Eintrag zur Navigation zur|fffd|ck auf Abrechnungsmonat
    j = j + 1
    ReDim str_NachMonate(j) As String
    str_NachMonate(j) = DEFAULT_SELECTION
    
    Do While (i >= 1)
        str_TblName = Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)
        
        'Abrechungsmonat zerlegen
        str_Monat = Mdl_Erfassungsblaetter.Monat_ermittlen(str_TblName)
        str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_TblName)
        
        'Monat des aktuellen Tabellenblatts ermitteln
        If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(ActiveSheet)) Then
            str_MonatAktiv = Mdl_Erfassungsblaetter.Monat_ermittlen(ActiveSheet.name)
        Else
            str_MonatAktiv = SelectedAbrMonat
        End If
        
        If (str_Monat = str_MonatAktiv) Then
            'Ist aktuelles Tabellenblatt ein Nachberechnungsmonate => hinzuf|fffd|gen
            If (str_MK <> "0") Then
                'Nachberechungsmonat in den richtigen Abrechungsmonat aufl|fffd|sen
                str_Temp = Abrechungsmonat_aufloesen(str_TblName)
                
                'Abrechnungsmonat zur Auswahl hinzuf|fffd|gen
                j = j + 1
                ReDim Preserve str_NachMonate(j)
                str_NachMonate(j) = str_Temp
            End If
        End If
        
        i = i - 1
    Loop
End Sub

Public Sub Ribbon_aktualisieren()
    If muiRibbon Is Nothing Then GetRibbonReference
    If Not muiRibbon Is Nothing Then muiRibbon.Invalidate
End Sub

Public Sub RibbonControl_aktualisieren(ByVal id As String)
     If muiRibbon Is Nothing Then GetRibbonReference
     If Not muiRibbon Is Nothing Then muiRibbon.InvalidateControl (id)
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'CALLBACKS

'Callback for customUI.onLoad
Private Sub Ribbon_OnLoad(ByVal objRibbon As IRibbonUI)
    Dim objName As name
    
    Set muiRibbon = objRibbon
    
    'Pointer des Ribbon-Objekts als unsichtbaren Namen speichern
    ThisWorkbook.Names.Add name:=NAMES_NAME, RefersTo:=CStr(ObjPtr(objRibbon)), visible:=False

    'set default values of Ribbon controls
    SetControlDefaults
    
    muiRibbon.ActivateTab ("LVE")
End Sub

'Callback for LVE getVisible
Private Sub LVE_getVisible(control As IRibbonControl, ByRef visible)
    visible = Mdl_Pruefungen.Mandantenstammdaten_vorhanden
End Sub

'Callback for btn_Speichern onAction
Private Sub Speichern_OnAction(control As IRibbonControl)
    ThisWorkbook.Save
End Sub

'Callback for btn_Drucken onAction
Private Sub Drucken_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Drucken
End Sub

'Callback for btn_Logo onAction
Private Sub Logo_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Logo_einfuegen
End Sub

'Callback for btn_MDT_Informationen onAction
Private Sub MDT_Informationen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Mandanteninformationen_anzeigen
End Sub

'Callback for menu_AbrMonat getContent
Private Sub AbrMonat_GetContent(control As IRibbonControl, ByRef content)
    Dim strXML As String
    
    '---------------------------------------
    'F|fffd|r jeden Abrechungsmonat einen Button einf|fffd|gen:
    '---------------------------------------

    On Error GoTo Fehler
        strXML = MENU_START_TAG
        strXML = strXML & Men|fffd|_AbrMonat_erstellen
        strXML = strXML & MENU_END_TAG
        
        strXML = Replace(strXML, "&", "&amp;&amp;") 'Added to prevent error entries with "&"
        content = strXML                            'Men|fffd| abschicken
        
        Debug.Print strXML
    Exit Sub
    
Fehler:
  MsgBox "Fehler in: AbrMonat_GetContent" & vbLf & _
         Err.Description, vbCritical, "Fehler!"
End Sub

Private Sub NavAbrMonat_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.Tabellenblatt_wechseln(control.tag)
    
    Call RibbonControl_aktualisieren("cbxAbrMonat")
    Call RibbonControl_aktualisieren("cbxNachMonat")
End Sub

Private Sub AbrMon_anlegen_OnAction(control As IRibbonControl)
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    Call Mdl_Symbolleiste.cm_Abrechnungsmonat_anlegen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)), False)
End Sub

Private Sub AbrMon_entfernen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Abrechungsmonat_loeschen
End Sub

Private Sub NachMon_anlegen_OnAction(control As IRibbonControl)
    Dim str_AktivMonat As String    'Current Monat
    str_AktivMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(ActiveSheet.name) & "_0"
    Call Mdl_Symbolleiste.cm_Abrechnungsmonat_anlegen(str_AktivMonat, True)
End Sub

Private Sub NachMon_entfernen_OnAction(control As IRibbonControl)
    Dim str_AktivMonat As String    'Current Monat
    str_AktivMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(ActiveSheet.name)
     Call Mdl_Symbolleiste.cm_Nachberechungsmonat_loeschen(str_AktivMonat)
End Sub

'Callback for cbxAbrMonat getItemCount
Sub AbrMonat_getItemCount(control As IRibbonControl, ByRef count)
    Dim j As Integer
    
    Call AuswahlAbrMonate_laden
    j = UBound(str_AbrMonate)
    
    If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(ActiveSheet)) Then
        SelectedAbrMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(ActiveSheet.name)
    End If
        
    count = j
End Sub

'Callback for cbxAbrMonat getItemID
Sub AbrMonat_getItemID(control As IRibbonControl, index As Integer, ByRef id)
    id = "AbrMonat" & index + 1
End Sub

'Callback for cbxAbrMonat getItemLabel
Sub AbrMonat_getItemLabel(control As IRibbonControl, index As Integer, ByRef label)
    label = str_AbrMonate(index + 1)
End Sub

Sub AbrMonat_getSelectedItemIndex(control As IRibbonControl, index As Variant)
    Dim i As Integer
    Dim monat As String

    For i = 1 To UBound(str_AbrMonate)
        monat = str_AbrMonate(i)
        If (SelectedAbrMonat = monat) Then
            index = i - 1
            Exit Sub
        End If
    Next i
End Sub

'Callback for cbxAbrMonat onAction
Sub AbrMonat_onAction(control As IRibbonControl, id As String, index As Integer)
    Dim str_AktivMonat As String    'Current Monat
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    If (muiRibbon Is Nothing) Then
        Call AuswahlAbrMonate_laden
        Call AuswahlNachMonate_laden
    End If
    
    'Hole Monat aus ComboBox Text
    SelectedAbrMonat = str_AbrMonate(index + 1)
    'Hole Monat des Aktive Tabellenblatts
    str_AktivMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(ActiveSheet.name)
    
    'Tabellenblatt zuordnen und aktivieren
    If (SelectedAbrMonat <> "") And (str_AktivMonat <> SelectedAbrMonat) Then
        'Wechsel Tabellenblatt
        Mdl_Symbolleiste.Tabellenblatt_wechseln (SelectedAbrMonat & "_0")
    ElseIf (str_AktivMonat = SelectedAbrMonat) Then
        'erstes Bewegungsdatenfeld aktiv setzen
        ActiveSheet.Range("R11").Select
        
        'Blattschutz aktivieren
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    End If
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
    
    'Nachberechungs ComboBox aktualisieren
    RibbonControl_aktualisieren ("cbxNachMonat")
End Sub

'Callback for cbxNachMonat getItemCount
Sub NachMonat_getItemCount(control As IRibbonControl, ByRef count)
    Dim str_Temp, str_MKAktiv As String
    Dim j As Long
    
    Call AuswahlNachMonate_laden
    j = UBound(str_NachMonate)
    
    If (j <= 1) Then
        SelectedNachMonat = DEFAULT_SELECTION
        bln_NachMonatEnabled = False
    Else
        If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(ActiveSheet)) Then
            str_MKAktiv = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(ActiveSheet.name)
            If (str_MKAktiv <> "0") Then
                str_Temp = Abrechungsmonat_aufloesen(ActiveSheet.name)
                SelectedNachMonat = str_Temp
            Else
                SelectedNachMonat = DEFAULT_SELECTION
            End If
        Else
            SelectedNachMonat = DEFAULT_SELECTION
        End If
    End If
        
    count = j
End Sub

'Callback for cbxAbrMonat getItemID
Sub NachMonat_getItemID(control As IRibbonControl, index As Integer, ByRef id)
    id = "NachMonat" & index + 1
End Sub

'Callback for cbxNachMonat getItemLabel
Sub NachMonat_getItemLabel(control As IRibbonControl, index As Integer, ByRef label)
    label = str_NachMonate(index + 1)
End Sub

'Callback for cbxNachMonat getSelectedItemIndex
Sub NachMonat_getSelectedItemIndex(control As IRibbonControl, index As Variant)
    Dim i As Integer
    Dim monat As String

    If (UBound(str_NachMonate) > 1) Then
        For i = 1 To UBound(str_NachMonate)
            monat = str_NachMonate(i)
            If (SelectedNachMonat = monat) Then
                index = i - 1
                Exit Sub
            End If
        Next i
    End If
    
    index = 0
End Sub

Sub NachMonat_getEnabled(control As IRibbonControl, ByRef returnedVal)
    returnedVal = bln_NachMonatEnabled
End Sub

'Callback for cbxNachMonat onAction
Sub NachMonat_onAction(control As IRibbonControl, id As String, index As Integer)
    Dim tmp As String
    Dim sheetIndex As String
    Dim str_Monat As String
    
    If (muiRibbon Is Nothing) Then
        Call AuswahlAbrMonate_laden
        Call AuswahlNachMonate_laden
    End If
    
    SelectedNachMonat = str_NachMonate(index + 1)
    
    'Eingabepr|fffd|fung deaktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
    
    'Erfassungstabellen-Array laden
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    
    'Worksheetindex des Abrechnungsmonats ermitteln
    str_Monat = SelectedAbrMonat & "_0"
    sheetIndex = Mdl_Dialogaktionen.ermittelSheetindexAbrechnungsmonat(str_Monat)
    tmp = Mdl_Workbook_Initialisierung.Erfassungsblaetter(sheetIndex - index)
    
    If (tmp <> "") And (tmp <> ActiveSheet.name) Then
        Call Mdl_Symbolleiste.Tabellenblatt_wechseln(tmp)
    End If
End Sub

'Callback for btn_MA_hinzufuegen onAction
Private Sub MA_hinzufuegen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Mitarbeiter_hinzu
End Sub

'Callback for btn_MA_kopieren onAction
Private Sub MA_kopieren_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Mitarbeiter_kopieren
End Sub

'Callback for btn_MA_entfernen onAction
Private Sub MA_entfernen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Mitarbeiter_entfernen
End Sub

'Callback for btn_MA_sortieren onAction
Private Sub MA_sortieren_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Mitarbeiter_sortieren
End Sub

'Callback for btn_Kostenstelle onAction
Private Sub Kostenstelle_OnAction(control As IRibbonControl)
    Call KoSt_ausblenden
End Sub

'Callback for btn_LA_hinzufuegen onAction
Private Sub LA_hinzufuegen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Lohnart_hinzu
End Sub

'Callback for btn_LA_entfernen onAction
Private Sub LA_entfernen_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Lohnart_entfernen
End Sub

'Callback for btn_LA_sortieren onAction
Private Sub LA_sortieren_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Lohnart_sortieren
End Sub

'Callback for btn_Export onAction
Private Sub Export_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Export
End Sub

'Callback for btn_Email onAction
Private Sub Email_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Export_Email
End Sub

'Callback for btn_Impressum onAction
Private Sub Impressum_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Impressum_anzeigen
End Sub

'Callback for btn_Hilfe onAction
Private Sub Hilfe_OnAction(control As IRibbonControl)
    Call Mdl_Symbolleiste.cm_Hilfe_anzeigen
End Sub

Public Function XMLStrBuilder(ByRef strCtrlType As String, ByRef blnCloseTag As Boolean, Optional strID As String, Optional strIDMso As String, _
                              Optional strIDQ As String, Optional strIAMso As String, Optional strIBMso As String, _
                              Optional strIAQ As String, Optional strIBQ As String, Optional strSize As String, _
                              Optional strGetSize As String, Optional strKeytip As String, Optional strGetKeytip As String, _
                              Optional strVisible As String, Optional strGetVisible As String, Optional strLabel As String, _
                              Optional strGetLabel As String, Optional strShowLabel As String, Optional strGetShowLabel As String, _
                              Optional strImageMso As String, Optional strImage As String, Optional strGetImage As String, _
                              Optional strShowImage As String, Optional strGetShowImage As String, Optional strAction As String, _
                              Optional strContent As String, Optional strTag As String, Optional strTip As String, _
                              Optional strGetTip As String, Optional strSupertip As String, Optional strGetSupertip As String, _
                              Optional strOnChange As String, Optional strEnabled As String, Optional strGetEnabled As String, _
                              Optional strGetPressed As String, Optional strGetText As String, Optional strGetItemCount As String, _
                              Optional strGetItemID As String, Optional strGetItemImage As String, _
                              Optional strGetItemLabel As String, Optional strGetItemTip As String, _
                              Optional strGetItemSupertip As String, Optional strGetSelItemID As String, _
                              Optional strGetSelItemIndex As String, Optional strGetItemHeight As String, _
                              Optional strGetItemWidth As String, Optional strTitle As String, Optional strGetTitle As String, _
                              Optional strDescr As String, Optional strGetDescr As String) As String
    Dim strXML As String
    Dim arrAttributes() As String
    Dim arrAttributeValues() As String
    Dim S As String
    Dim i As Long

    'Build control type and ID attribute
    Select Case True
        Case Len(strID) > 0
            strXML = "<" & strCtrlType & " id=" & Chr(34) + strID + Chr(34)
        Case Len(strIDQ) > 0
            strXML = "<" & strCtrlType & " idQ=" & Chr(34) + strIDQ + Chr(34)
        Case Len(strIDMso) > 0
            strXML = "<" & strCtrlType & " idMso=" & Chr(34) + strID + Chr(34)
    End Select
  
    'Build additional attributes as passed
    S = ","
    arrAttributes = Split("insertAfterMso=,insertBeforeMso=,insertAfterQ=,insertBeforeQ=,size=,getSize=,keytip=,getKeytip=,label=,getLabel=," _
                        & "showLabel=,getShowLabel=,visible=,getVisible=,imageMso=,image=,getImage=,showImage=,getShowImage=,onAction=," _
                        & "getContent=,tag=,screentip=,getScreentip=,supertip=,getSupertip,onChange=,enabled=,getEnabeled=,getPressed=," _
                        & "getText=,getItemCount=,getItemID=,getItemImage=,getItemLabel=,getItemTip=,getItemSupertip=,getSelectedItemID=," _
                        & "getSelectedItemIndex,getItemHeight=,getItemWidth=,title=,getTitle=,description=,getDescription", ",")
                        
    arrAttributeValues = Split(strIAMso + S + strIBMso + S + strIAQ + S + strIBQ + S + strSize + S + strGetSize + S + strKeytip + S + strGetKeytip + S + strLabel + S _
                               + strGetLabel + S + strShowLabel + S + strGetShowLabel + S + strVisible + S + strGetVisible + S + strImageMso + S _
                               + strImage + S + strGetImage + S + strShowImage + S + strGetShowImage + S + strAction + S + strContent + S + strTag + S _
                               + strTip + S + strGetTip + S + strSupertip + S + strGetSupertip + S + strOnChange + S + strEnabled + S + strGetEnabled + S _
                               + strGetPressed + S + strGetText + S + strGetItemCount + S + strGetItemID + S + strGetItemImage + S + strGetItemLabel + S _
                               + strGetItemTip + S + strGetItemSupertip + S + strGetSelItemID + S + strGetSelItemIndex + S + strGetItemHeight + S _
                               + strGetItemWidth + S + strTitle + S + strGetTitle + S + strDescr + S + strGetDescr, ",")
                             
    For i = 0 To UBound(arrAttributeValues)
        If Len(arrAttributeValues(i)) > 0 Then strXML = strXML & vbNewLine + vbTab + arrAttributes(i) + Chr(34) + arrAttributeValues(i) + Chr(34)
    Next i
  
    If (blnCloseTag) Then
        XMLStrBuilder = strXML & " />" & vbNewLine
    Else
        XMLStrBuilder = strXML & ">" & vbNewLine
    End If
  
lbl_Function:
    Exit Function
End Function

Private Function Men|fffd|_AbrMonat_erstellen() As String
    Dim strXML              As String
    Dim str_MonatMenu       As String
    Dim str_MonatSicht      As String
    Dim str_MonatMenu_Last  As String
    Dim str_MK              As String
    Dim str_ID              As String
    Dim str_Label           As String
    Dim str_Tag             As String
    Dim str_MsoImage        As String
    Dim str_Action          As String
    Dim int_Monat_Counter   As Long
    Dim int_Sicht_Counter   As Long
    Dim int_NM_counter      As Long
    Dim i, j                As Long
    
    On Error Resume Next
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0

    int_Monat_Counter = 0
    Do While (i >= 1)
        str_MonatMenu = Mdl_Erfassungsblaetter.Monat_ermittlen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i))

         If (str_MonatMenu <> str_MonatMenu_Last) Then
            int_Monat_Counter = int_Monat_Counter + 1
            
            'Monat zum Men|fffd| hinzuf|fffd|gen (SplitButton)
            str_ID = "spBtn" & int_Monat_Counter
            strXML = strXML & XMLStrBuilder(strCtrlType:="splitButton", blnCloseTag:=False, _
                                            strID:=str_ID)
            
            str_ID = "btnMonatMenu" & int_Monat_Counter
            strXML = strXML & XMLStrBuilder(strCtrlType:="button", blnCloseTag:=True, _
                                            strID:=str_ID, _
                                            strLabel:=str_MonatMenu)

            'Untermen|fffd|: Men|fffd| der Monatssichten erzeugen (2. Ebene)
            strXML = strXML & MENU_START_TAG

            On Error Resume Next
            j = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
            On Error GoTo 0

            int_Sicht_Counter = 0
            int_NM_counter = 0
            Do While (j >= 1)
                str_MonatSicht = Mdl_Erfassungsblaetter.Monat_ermittlen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))
                int_Sicht_Counter = int_Sicht_Counter + 1

                If (str_MonatSicht = str_MonatMenu) Then
                    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))

                    If (str_MK = "0") Then
                        'Abrechnungsmonat
                        str_ID = "btn_AM" & int_Sicht_Counter
                        str_Label = "Abrechnung: " & str_MonatSicht
                    Else
                        'Nachberechnungsmonat
                        str_ID = "btn_NM" & int_Sicht_Counter
                        str_Label = "Nachberechnung: " & Abrechungsmonat_aufloesen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))

                        int_NM_counter = int_NM_counter + 1
                    End If
                    
                    str_Tag = Mdl_Workbook_Initialisierung.Erfassungsblaetter(j)
                    str_Action = "NavAbrMonat_OnAction"
                    
                    'Monatssicht zum Men|fffd| hinzuf|fffd|gen
                    strXML = strXML & XMLStrBuilder(strCtrlType:="button", _
                                                    blnCloseTag:=True, _
                                                    strID:=str_ID, _
                                                    strLabel:=str_Label, _
                                                    strTag:=str_Tag, _
                                                    strAction:=str_Action)
                End If
                j = j - 1
            Loop

            'Seperator einf|fffd|gen
            str_ID = "sepNM" & int_Monat_Counter
            strXML = strXML & XMLStrBuilder(strCtrlType:="menuSeparator", _
                                            blnCloseTag:=True, _
                                            strID:=str_ID)

            '"Nachberechnungsmonat neu" zum Men|fffd| hinzuf|fffd|gen
            str_ID = "btn_NM_Add" & int_Monat_Counter
            str_Label = "Nachberechnungsmonat neu"
            str_Tag = "NNM " & str_MonatMenu & "_0"
            str_MsoImage = "MasterDocumentCreateSubdocument"
            str_Action = "NachMon_anlegen_OnAction"
            
            strXML = strXML & XMLStrBuilder(strCtrlType:="button", _
                                            blnCloseTag:=True, _
                                            strID:=str_ID, _
                                            strLabel:=str_Label, _
                                            strTag:=str_Tag, _
                                            strImageMso:=str_MsoImage, _
                                            strAction:=str_Action)

            '"Nachberechnungsmonat l|fffd|schen" zum Men|fffd| hinzuf|fffd|gen
            If (int_NM_counter > 0) Then
                str_ID = "btn_NM_Del" & int_Monat_Counter
                str_Label = "Nachberechnungsmonat l|fffd|schen"
                str_Tag = "del " & str_MonatMenu
                str_MsoImage = "MasterDocumentUnlinkSubdocument"
                str_Action = "NachMon_entfernen_OnAction"
                
                strXML = strXML & XMLStrBuilder(strCtrlType:="button", _
                                                blnCloseTag:=True, _
                                                strID:=str_ID, _
                                                strLabel:=str_Label, _
                                                strTag:=str_Tag, _
                                                strImageMso:=str_MsoImage, _
                                                strAction:=str_Action)
            End If

            strXML = strXML & MENU_END_TAG
            strXML = strXML & SPLITBUTTON_END_TAG
        End If
                                        
        str_MonatMenu_Last = str_MonatMenu
        i = i - 1
    Loop
    
    'Seperator einf|fffd|gen
    strXML = strXML & XMLStrBuilder(strCtrlType:="menuSeparator", _
                                    blnCloseTag:=True, _
                                    strID:="sepAM")
                                    
    '"Abrechungsmonat neu" zum Men|fffd| hinzuf|fffd|gen
    str_ID = "btn_AM_Add"
    str_Label = "Abrechnungsmonat neu"
    str_MsoImage = "MasterDocumentCreateSubdocument"
    str_Action = "AbrMon_anlegen_OnAction"
    
    strXML = strXML & XMLStrBuilder(strCtrlType:="button", _
                                    blnCloseTag:=True, _
                                    strID:=str_ID, _
                                    strLabel:=str_Label, _
                                    strImageMso:=str_MsoImage, _
                                    strAction:=str_Action)
                                    
    '"Abrechungsmonat l|fffd|schen" zum Men|fffd| hinzuf|fffd|gen
    If (int_Monat_Counter > 1) Then
        str_ID = "btn_AM_Del"
        str_Label = "Abrechnungsmonat l|fffd|schen"
        str_Tag = "DEL"
        str_MsoImage = "MasterDocumentUnlinkSubdocument"
        str_Action = "AbrMon_entfernen_OnAction"
        
        strXML = strXML & XMLStrBuilder(strCtrlType:="button", _
                                        blnCloseTag:=True, _
                                        strID:=str_ID, _
                                        strLabel:=str_Label, _
                                        strTag:=str_Tag, _
                                        strImageMso:=str_MsoImage, _
                                        strAction:=str_Action)
    End If
    
    'Return XML content
    Men|fffd|_AbrMonat_erstellen = strXML
End Function
Attribute VB_Name = "Mdl_Symbolleiste"
Option Explicit
Option Private Module
Option Base 1

Public Const CBAR_NAME As String = "Lohn Vorerfassung" 'Name der Symbolleiste
Public Const IMPRESSUM_ADDRESS = "https://www.datev.de/web/de/m/ueber-datev/datev-im-web/impressum/"

Public Sub Excel_Symbolleisten_einblenden()
    ActiveWindow.DisplayHeadings = True         'Zeilen und Spaltenbk|fffd|pfe einblenden
    ActiveWindow.DisplayWorkbookTabs = True     'Tabellen Register einblenden
    Application.DisplayFormulaBar = True        'Formeleingabezeile einblenden
End Sub

Public Sub Excel_Symbolleisten_ausblenden()
    ActiveWindow.DisplayHeadings = False        'Zeilen und Spaltenbk|fffd|pfe ausblenden
    ActiveWindow.DisplayWorkbookTabs = False    'Tabellen Register ausblenden
    Application.DisplayFormulaBar = False       'Formeleingabezeile ausblenden
End Sub

'*************************************************************************************************************
'Late-Binding auf Microsoft Office X Object Library (mso.dll), damit keine Verweise genutzt werden m|fffd|ssen
'mso.dll befindet sich bei Office 2003 unter C:\Programme\Gemeinsame Dateien\Microsoft Shared\OFFICE11\mso.dll
'*************************************************************************************************************
Public Sub DATEV_Symbolleiste_erstellen()
'Symbolleiste erstellen
    Const msoBarTop = 1
    Const msoControlButton = 1
    Const msoControlPopup = 10
    
    'Controls
    Dim objCBar As Office.CommandBar
    Dim oCbx_AM As Object
    Dim oCbx_NM As Object
    
    Dim str_Bild As String
    Dim str_Monat_AM As String
    Dim str_Monat_NM As String
    Dim str_MK As String
    Dim shp As Shape
    Dim i As Integer
    Dim j As Integer
    Dim k As Byte
     
    'Symbolleiste l|fffd|schen
    Call DATEV_Symbolleiste_loeschen
    
    On Error GoTo err_CreateCommandBar
    
    'Symbolleiste estellen
    Set objCBar = Application.CommandBars.Add(name:=CBAR_NAME, Position:=msoBarTop)
    
    ' --- Controls hinzuf|fffd|gen ---
    
     'String f|fffd|r Bild setzen
    str_Bild = "Picture"
    
    With objCBar
        'Conrol: Bewegungsdaten speichern (Excel-Standard)
        With .Controls.Add(Type:=msoControlButton, id:=3)
             .Caption = "Bewegungsdaten speichern"
        End With
        
        'Control: Bewegungsdaten drucken
        With .Controls.Add(Type:=msoControlButton)
             .Caption = "aktuelle Tabelle drucken"
             .FaceId = 4
             .tag = "DRUCKEN"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Mandanteninformationen
        With .Controls.Add(Type:=msoControlButton)
             .BeginGroup = True 'Trennlinie einsetzen
             .Caption = "Mandanteninformationen"
             .FaceId = 487
             .tag = "MDTinfo"
             .OnAction = "Eventhandler"
        End With
            
        'CommandBarPopup: "Abrechnungsmonat"
        Set oCbx_AM = .Controls.Add(Type:=msoControlPopup)
        oCbx_AM.BeginGroup = True 'Trennlinie einf|fffd|gen
        oCbx_AM.Caption = "Abrechnungsmonat"
        
        'CommandBarPopup "Abrechnungsmonat": Untermen|fffd| 1. Ebene erzeugen
        On Error Resume Next
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
        On Error GoTo 0
        
        Do While (i >= 1)
            str_Monat_AM = Mdl_Erfassungsblaetter.Monat_ermittlen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i))
            
            If Not Control_vorhanden(str_Monat_AM) Then
                'Controls im Untermen|fffd| 1. Ebene anlegen (aktuellen Abrechnungsmonate)
                Set oCbx_NM = oCbx_AM.Controls.Add(Type:=msoControlPopup)
                oCbx_NM.Caption = str_Monat_AM
                oCbx_NM.tag = str_Monat_AM
                
                'CommandBarPopup "Abrechnungsmonat": Untermen|fffd| 2. Ebene erzeugen (Monatssichten)
                On Error Resume Next
                j = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
                On Error GoTo 0
                
                Do While (j >= 1)
                    str_Monat_NM = Mdl_Erfassungsblaetter.Monat_ermittlen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))
                    
                    If (str_Monat_NM = oCbx_NM.Caption) Then
                        With oCbx_NM.Controls.Add
                            str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))
                            
                            If (str_MK = "0") Then
                                'Abrechnungsmonat
                                .Caption = "Abrechnung: " & str_Monat_NM
                            Else
                                'Nachberechnungsmonat
                                .Caption = "Nachberechnung: " & Abrechungsmonat_aufloesen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(j))
                            End If
                            
                            .tag = Mdl_Workbook_Initialisierung.Erfassungsblaetter(j)
                            .OnAction = "Eventhandler"
                        End With
                    End If
                    j = j - 1
                Loop
                
                'Control: Nachberechnungsmonat Neu
                With oCbx_NM.Controls.Add
                     .Caption = "Nachberechnungsmonat neu"
                     .tag = "NNM " & oCbx_NM.tag & "_0"
                     .FaceId = 231
                     .OnAction = "Eventhandler"
                End With
                
                'Control: Nachberechnungsmonat l|fffd|schen
                If (oCbx_NM.Controls.count > 2) Then
                    'anlegen, falls mindestens ein NBM vorhanden ist
                    With oCbx_NM.Controls.Add
                         .Caption = "Nachberechnungsmonat l|fffd|schen"
                         .tag = "del " & oCbx_NM.tag
                         .FaceId = 232
                         .OnAction = "Eventhandler"
                    End With
                End If
            End If
            i = i - 1
        Loop
        
        'Control: Abrechnungsmonat neu
        With oCbx_AM.Controls.Add
             .Caption = "Abrechnungsmonat neu          "
             .tag = "Neuer Abrechnungsmonat"
             .FaceId = 231
             .OnAction = "Eventhandler"
        End With
        
        'Control: Abrechnungsmonat l|fffd|schen
        If (oCbx_AM.Controls.count > 2) Then
            'anlegen,falls mindestens ein AM vorhanden ist
            With oCbx_AM.Controls.Add
                 .Caption = "Abrechnungsmonat l|fffd|schen"
                 .tag = "DEL"
                 .FaceId = 232
                 .OnAction = "Eventhandler"
            End With
        End If
        
ReloadPictures:
        'Control: Mitarbeiter hinzuf|fffd|gen
        With .Controls.Add(Type:=msoControlButton)
            'Trennlinie einf|fffd|gen
            .BeginGroup = True
             
            'Bild aus Verwaltungsdaten holen
            On Error GoTo PictureErrorhandler
            For Each shp In Verwaltungsdaten.Shapes
               If VBA.Right(shp.name, 2) = "46" Then
                   shp.CopyPicture
                   Exit For
               End If
            Next shp
            
            'Bild als Symbol in Control hinzuf|fffd|gen
            On Error Resume Next
            For k = 1 To 10
               Err.Clear
               .PasteFace
               If Err.Number = 0 Then Exit For
               Application.Wait (Now + TimeValue("0:00:01"))
            Next k
            On Error GoTo 0
            
            .Caption = "Mitarbeiter hinzuf|fffd|gen"
            .tag = "MA+"
            .OnAction = "Eventhandler"
        End With
        
        'Control: Mitarbeiter kopieren
        With .Controls.Add(Type:=msoControlButton)
            'Bild aus Verwaltungsdaten holen
             On Error GoTo PictureErrorhandler
             For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "47" Then
                    shp.CopyPicture
                    Exit For
                End If
             Next shp
             
             'Bild als Symbol in Control hinzuf|fffd|gen
             On Error Resume Next
             For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
             Next k
             On Error GoTo 0
             
             .Caption = "Mitarbeiter kopieren"
             .tag = "MA++"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Mitarbeiter entfernen
        With .Controls.Add(Type:=msoControlButton)
            'Bild aus Verwaltungsdaten holen
            On Error GoTo PictureErrorhandler
            For Each shp In Verwaltungsdaten.Shapes
               If VBA.Right(shp.name, 2) = "48" Then
                   shp.CopyPicture
                   Exit For
               End If
            Next shp
            
            'Bild als Symbol in Control hinzuf|fffd|gen
            On Error Resume Next
            For k = 1 To 10
               Err.Clear
               .PasteFace
               If Err.Number = 0 Then Exit For
               Application.Wait (Now + TimeValue("0:00:01"))
            Next k
            On Error GoTo 0
            
            .Caption = "Mitarbeiter entfernen"
            .tag = "MA-"
            .OnAction = "Eventhandler"
        End With
        
        'Control: Mitarbeiter sortieren
        With .Controls.Add(Type:=msoControlButton)
            'Bild aus Verwaltungsdaten holen
            On Error GoTo PictureErrorhandler
            For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "49" Then
                    shp.CopyPicture
                    Exit For
                End If
            Next shp
            
            'Bild als Symbol in Control hinzuf|fffd|gen
            On Error Resume Next
            For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
            Next k
            On Error GoTo 0
            
            .Caption = "Mitarbeiter sortieren"
            .tag = "Sort_MA"
            .OnAction = "Eventhandler"
        End With
        
        'Control: Lohnart hinzuf|fffd|gen
        With .Controls.Add(Type:=msoControlButton)
             .BeginGroup = True 'Trennlinie einf|fffd|gen
             
             'Bild aus Verwaltungsdaten holen
             On Error GoTo PictureErrorhandler
             For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "50" Then
                    shp.CopyPicture
                    Exit For
                End If
             Next shp
             
             'Bild als Symbol in Control hinzuf|fffd|gen
             On Error Resume Next
             For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
             Next k
             On Error GoTo 0
             
             .Caption = "Lohnart hinzuf|fffd|gen"
             .tag = "LA+"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Lohnart entfernen
        With .Controls.Add(Type:=msoControlButton)
            'Bild aus Verwaltungsdaten holen
             On Error GoTo PictureErrorhandler
             For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "51" Then
                    shp.CopyPicture
                    Exit For
                End If
             Next shp
             
             'Bild als Symbol in Control hinzuf|fffd|gen
             On Error Resume Next
             For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
             Next k
             On Error GoTo 0
             
             .Caption = "Lohnart entfernen"
             .tag = "LA-"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Lohnarten sortieren
        With .Controls.Add(Type:=msoControlButton)
            'Bild aus Verwaltungsdaten holen
            On Error GoTo PictureErrorhandler
             For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "52" Then
                    shp.CopyPicture
                    Exit For
                End If
             Next shp
             
             'Bild als Symbol in Control hinzuf|fffd|gen
             On Error Resume Next
             For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
             Next k
             On Error GoTo 0
             
            .Caption = "Lohnarten sortieren"
            .tag = "Sort_LA"
            .OnAction = "Eventhandler"
        End With
        
        'Control: Bewegungsdaten exportieren
        With .Controls.Add(Type:=msoControlButton)
             .BeginGroup = True
             .FaceId = 144
             .Caption = "Exportdatei erstellen"
             .tag = "Export"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Email generieren
        With .Controls.Add(Type:=msoControlButton)
             .FaceId = 259
             .Caption = "E-Mail f|fffd|r den Versand generieren"
             .tag = "E-Mail"
             .OnAction = "Eventhandler"
        End With
        
        'Control: Kostenstelle ein- bzw. ausblenden
        With .Controls.Add(Type:=msoControlButton)
            .BeginGroup = True
            
            'Bild aus Verwaltungsdaten holen
            On Error GoTo PictureErrorhandler
            For Each shp In Verwaltungsdaten.Shapes
                If VBA.Right(shp.name, 2) = "54" Then
                    shp.CopyPicture
                    Exit For
                End If
             Next shp
             
             'Bild als Symbol in Control hinzuf|fffd|gen
             On Error Resume Next
             For k = 1 To 10
                Err.Clear
                .PasteFace
                If Err.Number = 0 Then Exit For
                Application.Wait (Now + TimeValue("0:00:01"))
             Next k
             On Error GoTo 0
             
            .Caption = "Kostenstelle ein- bzw. ausblenden"
            .tag = "KoSt"
            .OnAction = "Eventhandler"
        End With
        
        With .Controls.Add(Type:=msoControlButton)
            .BeginGroup = True
            .Style = msoButtonIcon
            .FaceId = 3021
            .tag = "Impressum"
            .TooltipText = "DATEV Startseite"
            .OnAction = "Eventhandler"
        End With
            
        'Control: Hilfe anzeigen
        With .Controls.Add(Type:=msoControlButton)
            .BeginGroup = True
            .FaceId = 984
            .Caption = "Hilfe"
            .tag = "Hilfe"
            .OnAction = "Eventhandler"
        End With
    End With
    
    'Eigenschaften der Symbolleiste zuweisen
    On Error Resume Next
    With objCBar
        'Symbolleiste einblenden
        .visible = True
    End With
    
exit_Sub:
    On Error Resume Next
    
  'Verweise (Speicher) freigeben
    Set objCBar = Nothing
    
    On Error GoTo 0
    Exit Sub

PictureErrorhandler:
    If Err.Number = 1004 Then
        If str_Bild = "Picture" Then
            str_Bild = "Bild"
            GoTo ReloadPictures
        Else
            GoTo err_CreateCommandBar
        End If
    Else
       GoTo err_CreateCommandBar
    End If
    
err_CreateCommandBar:
    MsgBox "Fehler:" & vbCrLf & vbCrLf & _
           "Die Symbolleiste konnte nicht erstellt werden.", _
           vbCritical, _
           TOOL_HDR
           
    DATEV_Symbolleiste_loeschen
    Resume exit_Sub
End Sub

Public Sub DATEV_Symbolleiste_einblenden()
'Symbolleiste einblenden
    On Error Resume Next
    Application.CommandBars(CBAR_NAME).visible = True
    On Error GoTo 0
End Sub

Public Sub DATEV_Symbolleiste_ausblenden()
'Symbolleiste ausblenden
    On Error Resume Next
    Application.CommandBars(CBAR_NAME).visible = False
    On Error GoTo 0
End Sub

Public Sub DATEV_Symbolleiste_loeschen()
'Symbolleiste l|fffd|schen
    On Error Resume Next
    Application.CommandBars(CBAR_NAME).DELETE
    On Error GoTo 0
End Sub

Private Sub Eventhandler()
    Dim i As Integer
    Dim j As Integer
    
    'Array Erfassungsblaetter |fffd|berpr|fffd|fen (ist Array leer)
    On Error Resume Next
    i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    If (Mdl_Workbook_Initialisierung.Erfassungsblaetter(i) < WorksheetFunction.CountA(Verwaltungsdaten.Range("D1:D1000"))) Then
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    End If
    If Err.Number = "9" Then
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        Err.Clear
    End If
    On Error GoTo 0
    
    'Pr|fffd|fen, ob Variable objTabellenblatt leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    '*******************************Command-Befehle***********************************************************
    
    'Pr|fffd|fen, ob Tag des Symbolleisten-Controls leer ist
    If (CommandBars.ActionControl.tag = "") Then Exit Sub
    
    'Wenn gedruckt werden soll***********************************************************************************
    If (CommandBars.ActionControl.tag = "DRUCKEN") Then
        Call cm_Drucken
        Exit Sub
    End If
    
    'Wenn das Logo ge|fffd|nadert werden soll ************************************************************************
    If (CommandBars.ActionControl.tag = "AddLogo") Then
        Call cm_Logo_einfuegen
        Exit Sub
    End If
    
    'Wenn die Mandanten-Informationen angezeigt werden sollen****************************************************
    If (CommandBars.ActionControl.tag = "MDTinfo") Then
        Call cm_Mandanteninformationen_anzeigen
        Exit Sub
    End If
    
    'Wenn ein neuer Abrechnungsmonat angelegt werden soll********************************************************
    If (CommandBars.ActionControl.tag = "Neuer Abrechnungsmonat") Then
        'Abrechnungsmonat ist die zuletzt angelegten Monatstabelle in der Verwaltungstabelle
        Call cm_Abrechnungsmonat_anlegen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)), False)
        Exit Sub
    End If
    
    'Wenn ein "neuer Nachberechnungsmonat" angelegt werden soll**************************************************
    If (VBA.Mid(CommandBars.ActionControl.tag, 1, 3) = "NNM") Then
        'Abrechungsmonat ist im Tag-Name des angeklickten Symbolleistenmen|fffd|s
        Call cm_Abrechnungsmonat_anlegen(VBA.Mid(CommandBars.ActionControl.tag, 5, Len(CommandBars.ActionControl.tag) - 4), True)
        Exit Sub
    End If
    
    'Wenn "Nachberechnungsmonat l|fffd|schen" gew|fffd|hlt wurde***********************************************************
    If (VBA.Mid(CommandBars.ActionControl.tag, 1, 3) = "del") Then
       Call cm_Nachberechungsmonat_loeschen(VBA.Mid(CommandBars.ActionControl.tag, 5, Len(CommandBars.ActionControl.tag) - 4))
       Exit Sub
    End If
    
    'Wenn "Abrechnungsmonat l|fffd|schen" gew|fffd|hlt wurde***************************************************************
    If (VBA.Mid(CommandBars.ActionControl.tag, 1, 3) = "DEL") Then
       Call cm_Abrechungsmonat_loeschen
       Exit Sub
    End If
    
    'Wenn MA hinzugef|fffd|gt werden soll*****************************************************************************
    If (CommandBars.ActionControl.tag = "MA+") Then
        Call cm_Mitarbeiter_hinzu
        Exit Sub
    End If
    
    'Wenn MA kopiert werden sollen*******************************************************************************
    If (CommandBars.ActionControl.tag = "MA++") Then
        Call cm_Mitarbeiter_kopieren
        Exit Sub
    End If
    
    'Wenn MA entfernt werden sollen******************************************************************************
    If (CommandBars.ActionControl.tag = "MA-") Then
        Call cm_Mitarbeiter_entfernen
        Exit Sub
    End If
    
    'Wenn Mitarbeiter sortiert werden sollen*********************************************************************
    If (CommandBars.ActionControl.tag = "Sort_MA") Then
        Call cm_Mitarbeiter_sortieren
        Exit Sub
    End If
    
    'Wenn LA hinzugef|fffd|gt werden sollen***************************************************************************
    If (CommandBars.ActionControl.tag = "LA+") Then
        Call cm_Lohnart_hinzu
        Exit Sub
    End If
    
    'Wenn LA entfernt werden sollen******************************************************************************
    If (CommandBars.ActionControl.tag = "LA-") Then
        Call cm_Lohnart_entfernen
        Exit Sub
    End If
    
    'Wenn Lohnarten sortiert werden sollen
    If (CommandBars.ActionControl.tag = "Sort_LA") Then
        Call cm_Lohnart_sortieren
        Exit Sub
    End If
    
    'Wenn Export durchgef|fffd|hrt werden soll************************************************************************
    If (CommandBars.ActionControl.tag = "Export") Then
        Call cm_Export
        Exit Sub
    End If
    
    'Wenn Email erstellt werden soll*****************************************************************************
    If (CommandBars.ActionControl.tag = "Email") Then
        Call cm_Export_Email
        Exit Sub
    End If
    
    'Wenn die Spalte f|fffd|r die Kostenstelle ein- bzw. ausgeblendet werden soll
    If (CommandBars.ActionControl.tag = "KoSt") Then
        Call KoSt_ausblenden
        Exit Sub
    End If
    
    'Wenn das Impressum angezeigt werden soll.
    If (CommandBars.ActionControl.tag = "Impressum") Then
        Call cm_Impressum_anzeigen
        Exit Sub
    End If
            
    'Wenn Hilfe angezeigt werden soll
    If (CommandBars.ActionControl.tag = "Hilfe") Then
        Call cm_Hilfe_anzeigen
        Exit Sub
    End If
    
    'Wenn ein Wechsel der Tabellenblattsicht durchgef|fffd|hrt werden soll********************************************
    Call Tabellenblatt_wechseln(CommandBars.ActionControl.tag)
End Sub

Public Sub cm_Drucken()
    Dim int_LZ As Integer
    Dim int_LS As Integer
    
    'Pr|fffd|fen, ob Variable objTabellenblatt leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.ActiveSheet
    End If
    
    'letzte Zeile bzw. Spalte in der aktiven Erfassungstabelle ermitteln
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    Dim str_AbMonat As String
    Dim str_MK As String
    'Monatskennung des aktive Tabellenblatts ermittlen
    str_AbMonat = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(str_AbMonat)
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Pr|fffd|fen ob leere Mitarbeiterzeilen vorhanden sind
    If (Mdl_Pruefungen.existiert_PNr(Mdl_Workbook_Initialisierung.objTabellenblatt, int_LZ, int_LS) <> "OK") Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Die Personalnummer mindestens eines Mitarbeiters wurde noch nicht vergeben." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Vervollst|fffd|ndigen Sie bitte zuerst die fehlenden Angaben.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
    Else
        'Druck anpassen
        Call Mdl_Druckausgabe.Druck_aufbereitet(str_MK)
    End If
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
End Sub

Public Sub cm_Logo_einfuegen()
    Call Mdl_Dialogaktionen.Dialogwechsel(kein_Dialog, Logo)
End Sub

Public Sub cm_Mandanteninformationen_anzeigen()
    Dim Dialog_Mandanteninfo As UF_Mandanteninformationen
    
    If (Not Dialog_Mandanteninfo Is Nothing) Then Set Dialog_Mandanteninfo = Nothing
    Set Dialog_Mandanteninfo = New UF_Mandanteninformationen
    
    With Dialog_Mandanteninfo
        .tbx_Beraternummer.Value = Verwaltungsdaten.Cells(2, 2).Value
        .tbx_Mandantennummer.Value = Verwaltungsdaten.Cells(3, 2).Value
        .tbx_Mandantenname.Value = Verwaltungsdaten.Cells(4, 2).Value
        .tbx_Abrechnungssystem.Value = Verwaltungsdaten.Cells(5, 2).Value
        .tbx_Abrechnungsmonat.Value = Verwaltungsdaten.Cells(6, 2).Value
    End With
    
    Dialog_Mandanteninfo.Show
    
    If (Not Dialog_Mandanteninfo Is Nothing) Then Set Dialog_Mandanteninfo = Nothing
End Sub

Public Sub cm_Abrechnungsmonat_anlegen(ByVal str_Tabelle As String, ByVal bln_ist_Nachberechnung As Boolean)
    Dim str_TblNameNeu As String
    Dim str_AktMonat As String
    Dim str_AktMonatDat As String
    Dim rangeBWD As Range
    
    Dim int_LZLA As Integer
    Dim int_LZ As Integer
    Dim int_LS As Integer
    Dim str_LS As String
    
    Dim strSpalte1Neu As String
    Dim strSpalte1Alt As String
    Dim strSpalte3Neu As String
    Dim strSpalte3Alt As String
    Dim str_SichtbareTabelle As String
    Dim int_Anzahl As Integer
    
    Dim str_MSGANW As String
    Dim int_SIDAlt As Integer
    Dim int_SIDNeu As Integer
    Dim i As Integer
      
    '|fffd|ber den Input Dialog den neuen Abrechungsmonat bestimmen
    str_TblNameNeu = Mdl_Dialogaktionen.Dialog_Input_zeigen(str_Tabelle, bln_ist_Nachberechnung)
    If (str_TblNameNeu = "") Then Exit Sub
    If (Not Mdl_Workbook_Initialisierung.WS_existiert(str_TblNameNeu)) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
            "Mit der aktuellen Version " & Mdl_Workbook_Initialisierung.APP_VERSION & " der Lohn-Vorerfassung " & _
            "k|fffd|nnen nur Bewegungsdaten f|fffd|r die Abrechnungsmonate " & _
            Mdl_Workbook_Initialisierung.MinAbrZeitraum & " bis " & Mdl_Workbook_Initialisierung.MaxAbrZeitraum & _
            " und die zugeh|fffd|rigen 3 Nachberechnungsmonate erfasst werden. ", _
            vbInformation, _
            TOOL_HDR
        Exit Sub
    End If
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    'Abrechungsmonat zum aktuellen Tabellenblatt ermitteln
    str_AktMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(str_Tabelle) & "_0"
    'Umwandlung aktiven Tabellenname in Monat und Jahr
    str_AktMonatDat = VBA.Mid(Rueckwandlung_Abrechnungsmonat(str_Tabelle), 1, 7)
    
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_AktMonat)
    int_LZLA = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle
    int_SIDAlt = Mdl_Fuellanweisungen.liefere_SheetIndex
    
    'Eingabepr|fffd|fung deaktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
            
    'Inhalt aus vorheriger Abrechnungsmonatstabelle in die Tabelle des neuen Abrechnungsmonats kopieren
    ThisWorkbook.Worksheets(str_AktMonat).UsedRange.Copy _
    destination:=ThisWorkbook.Worksheets(str_TblNameNeu).Range(ThisWorkbook.Worksheets(str_AktMonat).UsedRange.Address)
    ThisWorkbook.Worksheets(str_TblNameNeu).Shapes("img_Logo").DELETE

    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_TblNameNeu)
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    
    'Verwaltungsdaten f|fffd|r Tabellenblattindex anpassen/'Tabellenblattindex f|fffd|llen
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_neu_sortieren(str_TblNameNeu)
    
    'Tabellen Header einsetzen
    Call Mdl_Fuellanweisungen.Tbl_Header_anlegen
    
    'Abrechnungsmonat in Tabellenheader schreiben
    Call Mdl_Fuellanweisungen.AbrMonatHeader_fuellen
    Call Mdl_Formatierungsanweisungen.AbrMonatHeader_formatieren
    
    'Logo sicherheitshalber auf korrekte Gr|fffd||fffd|e bringen
    Call Mdl_Formatierungsanweisungen.Logo_formatieren
    
    'LA_in_Tabelle f|fffd|r neuen Abrechnungsmonat anpassen
    int_SIDNeu = Mdl_Fuellanweisungen.liefere_SheetIndex
    
    If (int_SIDNeu <= int_SIDAlt) Then
        strSpalte1Alt = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDAlt * 3) + 4)
        strSpalte3Alt = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDAlt * 3) + 6)
        strSpalte1Neu = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDNeu * 3) + 1)
        strSpalte3Neu = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDNeu * 3) + 3)
    Else
        strSpalte1Alt = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDAlt * 3) + 1)
        strSpalte3Alt = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDAlt * 3) + 3)
        strSpalte1Neu = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDNeu * 3) + 1)
        strSpalte3Neu = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((int_SIDNeu * 3) + 3)
    End If
    
    With Worksheets("LA_in_Tabelle")
        .Columns(strSpalte1Neu & ":" & strSpalte3Neu).Insert Shift:=xlToRight
        .Range(strSpalte1Alt & "1:" & strSpalte3Alt & int_LZLA).Copy
        .Paste destination:=.Range(strSpalte1Neu & "1:" & strSpalte3Neu & int_LZLA)
        Application.CutCopyMode = False
    End With
    
    'Pr|fffd|fen, ob Bewegungsdaten vorhanden sind
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    str_LS = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(int_LS)
    
    Set rangeBWD = Mdl_Workbook_Initialisierung.objTabellenblatt.Range("R" & int_EZ & ":" & str_LS & int_LZ)
    int_Anzahl = WorksheetFunction.CountA(rangeBWD)
    
    If (int_Anzahl > 0) Then
        If (bln_ist_Nachberechnung) Then
            'wenn NB, dann alle Bewegungsdaten l|fffd|schen
            Call rangeBWD.ClearContents
        Else
            str_MSGANW = MsgBox("F|fffd|r den aktuellsten Abrechnungsmonat: " & str_AktMonatDat & " wurden bereits Bewegungsdaten erfasst." & vbCrLf & vbCrLf & _
                                "Sollen diese f|fffd|r den neu angelegten Abrechnungsmonat |fffd|bernommen werden?", _
                                vbYesNo + vbQuestion, _
                                TOOL_HDR)
            'wenn Nein, dann Bewegungsdaten l|fffd|schen
            If (str_MSGANW = vbNo) Then
                Call rangeBWD.ClearContents
            End If
        End If
    End If
    
    'eventuell vorhandene Exportinformationen l|fffd|schen
    Application.EnableEvents = False
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(9, 17).Value = ""
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(10, 17).Value = ""
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Application.EnableEvents = True
    
    'Sichtbar machen
    Mdl_Workbook_Initialisierung.objTabellenblatt.visible = xlSheetVisible
    
    'Ribbon aktualisieren(neuen Monat hinzuf|fffd|gen)
    Call Mdl_RibbonX.Ribbon_aktualisieren
    
    Call Excel_Symbolleisten_ausblenden
    
    'Eingabepr|fffd|fung aktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False

    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************
    
    'Neues Tabellenblatt aktivieren
    Mdl_Workbook_Initialisierung.Abrechnungsmonat_wechseln (str_TblNameNeu)
      
    'Hinweismessage f|fffd|r die besondere Erfassung bei Nachberechnungen:
    If (bln_ist_Nachberechnung) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Erfassen Sie f|fffd|r die Nachberechnung nur Differenzen und nicht alle Bewegungsdaten.", _
               vbInformation, _
               TOOL_HDR
    End If
End Sub

Public Sub cm_Abrechungsmonat_loeschen()
    Dim Worksheet As Worksheet
    Dim str_ArrAbrMon() As String
    Dim str_MK As String
    Dim str_Monat As String
    Dim str_DelMonat As String
    Dim str_WSIndex As String
    Dim i As Integer, j As Integer
    Dim str_Antwort As String
       
    j = 0
    
    'Abrechnungsmonate ermitteln
    For i = 1 To ThisWorkbook.Worksheets.count
        Set Worksheet = ThisWorkbook.Worksheets(i)
        If (Worksheet.visible = xlSheetVisible) Then
            If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(Worksheet)) Then
                str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Worksheet.name)
                If (str_MK = "0") Then
                    j = j + 1
                    
                    '|fffd|bergebe Monatsname inkl. WS_Index an Array
                    ReDim Preserve str_ArrAbrMon(j)
                    str_ArrAbrMon(j) = VBA.Mid(Worksheet.name, 1, VBA.InStr(Worksheet.name, "_") - 1) & "/" & i
                End If
            End If
        End If
    Next i
    
     'Wenn mehrere Abrechnungsmonate vorhanden sind
    If (j > 1) Then
        str_WSIndex = Mdl_Dialogaktionen.Dialog_Abrechungsmonat_zeigen(str_ArrAbrMon, False)
        If (str_WSIndex = "") Then Exit Sub
        
        'Abrechnungsmonat l|fffd|schen (inkl. Nachberechnungsmonate)
        str_DelMonat = Mdl_Erfassungsblaetter.Monat_ermittlen(ThisWorkbook.Worksheets(CLng(str_WSIndex)).name)
DELETE:
        i = ThisWorkbook.Worksheets.count
        Do While (i >= 1)
            On Error Resume Next
            Set Worksheet = ThisWorkbook.Worksheets(i)
            
            If (Worksheet.visible = xlSheetVisible) Then
                If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(Worksheet)) Then
                    str_Monat = Mdl_Erfassungsblaetter.Monat_ermittlen(Worksheet.name)
                    If (str_Monat = str_DelMonat) Then
                        Call Tabellenblatt_loeschen(Worksheet.name, False)
                    End If
                End If
            End If
            
            If (Err.Number = "5") Then GoTo DELETE
            i = i - 1
        Loop
        
        'Zum Abschluss des L|fffd|schvorganges Meldung ausgeben
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Der Abrechnungsmonat " & str_DelMonat & " wurde inkl. seiner Nachberechnungsmonate erfolgreich gel|fffd|scht.", _
               vbInformation, _
               TOOL_HDR
               
        'Blattschutz aktivieren
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    End If
    
    'Wenn nur ein Abrechnungsmonat vorhanden ist
    If (j = 1) Then
        str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                             "Wollen Sie den Abrechnungsmonat " & VBA.Left(str_ArrAbrMon(j), VBA.InStr(str_ArrAbrMon(j), "/") - 1) & " wirklich l|fffd|schen?", _
                             vbYesNo + vbQuestion, _
                             TOOL_HDR)
                             
        If (str_Antwort = vbNo) Then Exit Sub

        'Worksheetindex des zu l|fffd|schenden Abrechnungsmonats ermitteln
        str_WSIndex = VBA.Right(str_ArrAbrMon(j), Len(str_ArrAbrMon(j)) - VBA.InStr(str_ArrAbrMon(j), "/"))
               
        'Abrechnungsmonat l|fffd|schen
        If (str_WSIndex <> "") Then
            Call Tabellenblatt_loeschen(ThisWorkbook.Worksheets(CLng(str_WSIndex)).name, True)
            
            'Blattschutz aktivieren
            Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
        Else
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Es ist ein interner Fehler w|fffd|hrend des L|fffd|schvorgangs aufgetreten." & vbCrLf & _
                   "Der L|fffd|schvorgang konnte nicht erfolgreich beendet werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Wiederholen Sie den L|fffd|schvorgang.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
        End If
    End If
End Sub

Public Sub cm_Nachberechungsmonat_loeschen(ByVal str_AbrMon As String)
    Dim str_ArrAbrMon() As String
    Dim Worksheet As Worksheet
    Dim str_Temp As String
    Dim str_MK As String
    Dim str_WSIndex As String
    Dim i As Integer, j As Integer
    Dim str_Antwort As String
    
    j = 0

    'Nachberechnungsmonate vom aktuellen Monat ermitteln
    For i = 1 To ThisWorkbook.Worksheets.count
        Set Worksheet = ThisWorkbook.Worksheets(i)
        
        If (Worksheet.visible = xlSheetVisible) Then
            If (Mdl_Pruefungen.Tabellenblatt_ist_Abrechungsmonat(Worksheet)) Then
            
                str_Temp = Mdl_Erfassungsblaetter.Monat_ermittlen(Worksheet.name)
                str_MK = Mdl_Erfassungsblaetter.Monatskennung_ermitteln(Worksheet.name)
                 
                If (str_Temp = str_AbrMon) And (str_MK <> "0") Then
                    j = j + 1
                     
                    'F|fffd|ge Nachberechungsmonat dem Array hinzu
                    ReDim Preserve str_ArrAbrMon(j)
                    str_ArrAbrMon(j) = Abrechungsmonat_aufloesen(Worksheet.name) & "/" & i
                End If
            End If
         End If
     Next i
     
     'Wenn mehrere Nachberechnungsmonate vorhanden sind
    If (j > 1) Then
       str_WSIndex = Mdl_Dialogaktionen.Dialog_Abrechungsmonat_zeigen(str_ArrAbrMon, True)
       If (str_WSIndex = "") Then Exit Sub
    End If
     
    'Wenn nur ein Nachberechnungsmonat vorhanden ist
    If (j = 1) Then
        str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                             "Wollen Sie den Nachberechnungsmonat " & VBA.Left(str_ArrAbrMon(j), VBA.InStr(str_ArrAbrMon(j), "/") - 1) & " wirklich l|fffd|schen?", _
                             vbYesNo + vbQuestion, _
                             TOOL_HDR)
                             
        If (str_Antwort = vbNo) Then Exit Sub
        
        'Worksheetindex des zu l|fffd|schenden Nachberechnungsmonats ermitteln
        str_WSIndex = VBA.Right(str_ArrAbrMon(j), Len(str_ArrAbrMon(j)) - VBA.InStr(str_ArrAbrMon(j), "/"))
    End If
    
    '|fffd|berpr|fffd|fen, ob Bewegungsdaten bereits im Nachberechnungsmonat vorhanden sind
    If (str_WSIndex <> "") Then
        If (Mdl_Pruefungen.Bewegungdaten_vorhanden_DEL_NM(str_WSIndex)) Then
            str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                                 "Es befinden sich in diesem Nachberechungsmonat bereits Bewegungsdaten." & vbCrLf & vbCrLf & _
                                 "Wollen Sie diesen Nachberechnungsmonat wirklich l|fffd|schen?", _
                                 vbYesNo + vbQuestion, _
                                 TOOL_HDR)
                                 
            If (str_Antwort = vbNo) Then Exit Sub
        End If
    End If
        
    'Nachberechnungsmonat l|fffd|schen
    If (str_WSIndex <> "") Then
        Call Tabellenblatt_loeschen(ThisWorkbook.Worksheets(CLng(str_WSIndex)).name, True)
        
        'Blattschutz aktivieren
        Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Else
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es ist ein interner Fehler w|fffd|hrend des L|fffd|schvorgangs aufgetreten." & vbCrLf & _
               "Der L|fffd|schvorgang konnte nicht erfolgreich beendet werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Wiederholen Sie den L|fffd|schvorgang.", _
               vbInformation, _
               TOOL_HDR
    End If
End Sub

Public Sub Tabellenblatt_wechseln(str_AbrMonat As String)
    Dim str_MK As String
        
    'Tabellenblatt wechseln
    Call Mdl_Workbook_Initialisierung.Abrechnungsmonat_wechseln(str_AbrMonat)
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    Call Excel_Symbolleisten_ausblenden
    
    'Hinweismessage f|fffd|r die besondere Erfassung bei Nachberechnungen:
    str_MK = VBA.Right(str_AbrMonat, (Len(str_AbrMonat) - VBA.InStr(str_AbrMonat, "_")))
    If (str_MK <> "0") Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Erfassen Sie f|fffd|r die Nachberechnung nur Differenzen und nicht alle Bewegungsdaten.", _
               vbInformation, _
               TOOL_HDR
    End If
End Sub

Private Sub Tabellenblatt_loeschen(ByVal str_AktMonat As String, ByVal bln_ist_Nachberechnungsmonat As Boolean)
    Dim strSpalte1 As String
    Dim strSpalte3 As String
    Dim str_Temp As String
    Dim intWSIndex As Integer
    
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
        
    'Index des zu l|fffd|schenden Sheets ermitteln
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_AktMonat)
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    
    intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
    
    If (Mdl_Workbook_Initialisierung.WS_vorhanden(str_AktMonat)) Then
        'Tabelle Verwaltungsdaten anpassen (Zelle mit WS-Name l|fffd|schen)
        Verwaltungsdaten.Range(liefere_Range_zul|fffd|schendes_WS(str_AktMonat)).DELETE Shift:=xlUp
        
        'Tabelle "LA_in_Tabelle" aktualisieren (Spalten l|fffd|schen)
        strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
        strSpalte3 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 3)
        Worksheets("LA_in_Tabelle").Columns(strSpalte1 & ":" & strSpalte3).DELETE
        
        'Array aktualisieren
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
        'Ribbon aktualisieren
        Call Mdl_RibbonX.Ribbon_aktualisieren
        
        'aktuellsten Abrechnungsmonat aktivieren
        str_Temp = Mdl_Workbook_Initialisierung.Erfassungsblaetter(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter))
        str_Temp = VBA.Mid(str_Temp, 1, VBA.InStr(str_Temp, "_") - 1)
        
        If (Mdl_Workbook_Initialisierung.WS_vorhanden(str_Temp & "_0")) Then
            Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_Temp & "_0")
            
            'Monat aktivieren
            Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
            Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_EZ, int_ES).Select
        End If
LOESCHEN:
        'Blattschutz aufheben
        Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(ThisWorkbook.Worksheets(str_AktMonat))
        ThisWorkbook.Worksheets(str_AktMonat).visible = xlSheetHidden
       
        'Inhalt des Tabellenblatts l|fffd|schen
'        ThisWorkbook.Worksheets(str_AktMonat).UsedRange.Clear
    End If
    
    If (Not Mdl_Workbook_Initialisierung.WS_vorhanden(str_AktMonat)) Then
        'Meldung ausgeben, ob der L|fffd|schvorgang bei Nachberechnungsmonaten erfolgreich war
        If (bln_ist_Nachberechnungsmonat) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Der Nachberechnungsmonat wurde erfolgreich gel|fffd|scht.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
        End If
    Else
        GoTo LOESCHEN
        Exit Sub
    End If
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '************************************************
End Sub

Public Sub cm_Mitarbeiter_hinzu()
    Dim int_LZ As Integer
    Dim int_LS As Integer
    
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.ActiveSheet
    End If
    
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If (Not (.Range("B" & int_LZ + 1).Interior.Color = clrHintergrundAB)) Then
            If Not (Mdl_Pruefungen.existiert_PNr(Mdl_Workbook_Initialisierung.objTabellenblatt, int_LZ, int_LS) = "OK") Then
                Exit Sub
            End If
            
            If (.Cells(int_LZ, 3) = "") Then
                MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Die Personalnummer mindestens eines Mitarbeiters wurde noch nicht vergeben." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                       " Vervollst|fffd|ndigen Sie bitte zuerst die fehlenden Angaben.", _
                       vbInformation, _
                       TOOL_HDR
                       
                Exit Sub
            End If
        End If
        
        If (int_LZ < 35436) Then
            Call Mdl_Dialogaktionen.Mitarbeiterzeile_hinzu
        Else
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Sie haben die maximale Zeilengrenze in Excel erreicht." & vbCrLf & _
                   "Daher k|fffd|nnen keine weiteren Mitarbeiter hinzugef|fffd|gt werden.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
        End If
    End With
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
End Sub

Public Sub cm_Mitarbeiter_kopieren()
    Call Mdl_Dialogaktionen.Dialog_MAKopieren_anzeigen
End Sub

Public Sub cm_Mitarbeiter_entfernen()
    Call Mdl_Dialogaktionen.Dialog_MAEntfernen_anzeigen
End Sub

Public Sub cm_Mitarbeiter_sortieren()
    Call Mdl_Dialogaktionen.Dialog_MASortieren_anzeigen
End Sub

Public Sub cm_Lohnart_hinzu()
    Dim int_LZ As Integer
    Dim int_LS As Integer
    
    'Pr|fffd|fen, ob Variable Tabelle leer ist
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    int_LZ = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LVE
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    
    'Blattschutz deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    On Error GoTo Fehlerbehandlung
    With Mdl_Workbook_Initialisierung.objTabellenblatt
        If (Not (.Range("B" & int_LZ + 1).Interior.Color = clrHintergrundAB)) Then
            If Not (Mdl_Pruefungen.existiert_PNr(Mdl_Workbook_Initialisierung.objTabellenblatt, int_LZ, int_LS) = "OK") Then
                Exit Sub
            End If
            
            If (.Cells(int_LZ, 3) = "") Then
                MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Die Personalnummer mindestens eines Mitarbeiters wurde noch nicht vergeben." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                       " Vervollst|fffd|ndigen Sie bitte zuerst die fehlenden Angaben.", _
                       vbInformation, _
                       TOOL_HDR
                Exit Sub
            End If
        End If
        
        If (int_LS <= 217) Then
            Set Mdl_Dialogaktionen.Dialog_LA_hinzu = New UF_Lohnarten_hinzu
            Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.RowSource _
            = "AlleLohnarten!A2:B" & CStr(WorksheetFunction.CountA(ThisWorkbook.Worksheets("AlleLohnarten").Range("A1:A10000")))
            Mdl_Dialogaktionen.Dialog_LA_hinzu.Show
        Else
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Sie haben die maximale Spaltengrenze in Excel erreicht." & vbCrLf & _
                   "Daher k|fffd|nnen keine weiteren Lohnarten hinzugef|fffd|gt werden.", _
                   vbInformation, _
                   TOOL_HDR
        End If
    End With
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    Exit Sub
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub cm_Lohnart_sortieren()
    'Beginn Geschwindigkeitsoptimierung **************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '************************************************
    
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.ActiveSheet
    End If
    
    'Blattschutz und Eingabepr|fffd|fung deaktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_aufheben(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'muss deaktiviert werden um ein unbeabsichtiges ausl|fffd|sen von z.b Worksheet_Change auszul|fffd|sen
    Application.EnableEvents = False
    
    Application.DisplayAlerts = False 'Hinweismeldung aus
    'Tabelle 'LA_in_Tabelle' kopieren
    Worksheets("LA_in_Tabelle").Copy after:=Worksheets("LA_in_Tabelle")
    Mdl_Workbook_Initialisierung.objTabellenblatt.Copy after:=Mdl_Workbook_Initialisierung.objTabellenblatt
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    Application.DisplayAlerts = True 'Hinweismeldung an
    
    'Dialog bef|fffd|llen
    Call LA_sortieren_befuellen
    
    Application.EnableEvents = True
    
    'Blattschutz und Eingabepr|fffd|fung wieder aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Ende Geschwindigkeitsoptimierung ******************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '***************************************************
End Sub

Public Sub cm_Lohnart_entfernen()
    Dim int_LS As Integer
    Dim int_LZinLA As Integer
    
    Dim intWSIndex As Integer
    Dim strSpalte1 As String
    Dim strSpalte2 As String
    
    int_LS = Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE
    int_LZinLA = Mdl_Fuellanweisungen.liefere_letzte_Zeile_LA_in_Tabelle
    
    On Error GoTo Fehlerbehandlung
    If (Not int_LS < int_ES And _
        Not int_LZinLA < 2) Then
        Set Mdl_Dialogaktionen.Dialog_LA_entfernen = New UF_Lohnarten_entfernen
        
        intWSIndex = Mdl_Fuellanweisungen.liefere_SheetIndex
        strSpalte1 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 1)
        strSpalte2 = Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe((intWSIndex * 3) + 2)
        
        Mdl_Dialogaktionen.Dialog_LA_entfernen.lbx_Lohnartenauswahl.RowSource _
        = "LA_in_Tabelle!" & strSpalte1 & "2:" & strSpalte2 & int_LZinLA
        
        Mdl_Dialogaktionen.Dialog_LA_entfernen.Show
    Else
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Es k|fffd|nnen keine weiteren Lohnarten entfernt werden.", _
               vbInformation, _
               TOOL_HDR
    End If
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    Exit Sub
    
Fehlerbehandlung:
    If Err.Number = -2147467259 Then
        MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler aufgetreten!" & vbCrLf & _
                "Bitte schlie|fffd|en Sie die Anwendung Lohn Vorerfassung |fffd|ber das EXCEL-Symbol" & vbCrLf & _
                "in der DATEV-Symbolleiste und |fffd|ffnen sie anschlie|fffd|end erneut.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
End Sub

Public Sub cm_Export()
    Dim str_Antwort As String
    Dim str_Ausgabedatei As String
    Dim j As Integer
    Dim i As Integer
    
    'Pr|fffd|fung der Werte erm|fffd|glichen'
    str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                         "Soll vor dem Export eine Pr|fffd|fung der erfassten Werte auf korrektes Format durchgef|fffd|hrt werden?" & vbCrLf & _
                         "(Kann bei gro|fffd|em Datenumfang einige Minuten in Anspruch nehmen.)", _
                         vbYesNoCancel + vbQuestion, _
                         TOOL_HDR)
                         
    If (str_Antwort = vbYes) Then
        If Not Mdl_Eingabe_pruefen.PruefeWerte Then Exit Sub
    ElseIf (str_Antwort = vbCancel) Then
        Exit Sub
    End If
    
    i = 0 'Z|fffd|hlvariable zur|fffd|cksetzen
    j = 0
    
    On Error Resume Next
    i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0
    
    'Abbruchbedingung, wenn Tabellenarray leer ist...
    If i <= 0 Then
         MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler beim Erstellen der Exportinformationen aufgetreten!" & vbCrLf & _
                "Die Exportdateien k|fffd|nnen nicht erstellt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                " F|fffd|hren Sie den Export erneut durch.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
    
    'Auswahldialog f|fffd|r Export initialisieren und bef|fffd|llen
    If (Mdl_Dialogaktionen.Dialog_Export Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_Export = New UF_Export
            
    'Bef|fffd|llen des Dialoges mit den vorhanden Erfassungstabellen |fffd|ber Schleife
    Do While i >= 1
        'Abrechungstabelle hinzuf|fffd|gen
        If (VBA.Right(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), 2) <> "_0") Then
            'Nachberechnungsmonate
            Mdl_Dialogaktionen.Dialog_Export.lbx_Monatsauswahl.AddItem "-> Nachberechnung: " & Abrechungsmonat_aufloesen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)) & _
                                                                           " zu " & VBA.Mid(Rueckwandlung_Abrechnungsmonat(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)), 1, 2) & _
                                                                           "/" & "20" & VBA.Mid(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), VBA.InStr(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), "_") - 2, 2)
        Else
            'Abrechnungsmonate
            Mdl_Dialogaktionen.Dialog_Export.lbx_Monatsauswahl.AddItem "Abrechnungstabelle: " & VBA.Mid(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), 1, VBA.InStr(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), "_") - 1)
        End If
        
        'Angabe, ob Abrechungstabelle schon exportiert wurde
        Mdl_Dialogaktionen.Dialog_Export.lbx_Monatsauswahl.List(j, 1) = ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)).Cells(10, 17).Value
        
        'Name der Ausgabedatei hinzuf|fffd|gen
        If (ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)).Cells(9, 17).Value = "") Then
            str_Ausgabedatei = Mdl_Export.Export_Dateiname_erstellen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i))
        Else
            str_Ausgabedatei = ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)).Cells(9, 17).Value
            str_Ausgabedatei = Right(str_Ausgabedatei, Len(str_Ausgabedatei) - InStrRev(str_Ausgabedatei, "\"))
        End If
        
        Mdl_Dialogaktionen.Dialog_Export.lbx_Monatsauswahl.List(j, 2) = str_Ausgabedatei
        
        i = i - 1
        j = j + 1
    Loop
    
    'Dialog anzeigen
    Mdl_Dialogaktionen.Dialog_Export.Show
    
    'Dialog zerst|fffd|ren
    If Not (Dialog_Export Is Nothing) Then Set Dialog_Export = Nothing
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
End Sub

Public Sub cm_Export_Email()
    Dim str_Antwort As String
    Dim str_Ausgabedatei As String
    Dim i As Integer
    Dim j As Integer
    
    'Pr|fffd|fung der Werte erm|fffd|glichen
    str_Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                  "Soll vor der Erstellung der E-Mail eine Pr|fffd|fung der erfassten Werte auf korrektes Format durchgef|fffd|hrt werden?" & vbCrLf & _
                  "(Kann bei gro|fffd|en Datenumfang einige Minuten in Anspruch nehmen.)", _
                  vbYesNoCancel + vbQuestion, _
                  TOOL_HDR)
                  
    If (str_Antwort = vbYes) Then
        If Not Mdl_Eingabe_pruefen.PruefeWerte Then Exit Sub
    ElseIf (str_Antwort = vbCancel) Then
        Exit Sub
    End If

    i = 0 'Z|fffd|hlvariable zur|fffd|cksetzen
    j = 0
    
    On Error Resume Next
    i = UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
    On Error GoTo 0
    
    'Abbruchbedingung, wenn Tabellenarray leer ist...
    If i <= 0 Then
         MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                "Es ist ein Fehler beim Erstellen der Exportinformationen aufgetreten!" & vbCrLf & _
                "Die Exportdateien k|fffd|nnen nicht erstellt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                " F|fffd|hren Sie den Export erneut durch.", _
                vbCritical, _
                TOOL_HDR
        Exit Sub
    End If
    
    'Auswahldialog f|fffd|r Anhang initialisieren und bef|fffd|llen
    If (Mdl_Dialogaktionen.Dialog_Email Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_Email = New UF_Email
    
    Mdl_Dialogaktionen.Dialog_Email.lbx_Monatsauswahl.ColumnWidths = "200;0"
    
    'bef|fffd|llen des Dialoges mit den vorhanden Erfassungstabellen |fffd|ber Schleife
    Do While i >= 1
        'Name der Ausgabedatei erstellen
        str_Ausgabedatei = Mdl_Export.Export_Dateiname_erstellen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i))
        
        'Abrechungstabelle hinzuf|fffd|gen
        If (VBA.Right(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), 2) <> "_0") Then
            'Nachberechnungsmonate
            Mdl_Dialogaktionen.Dialog_Email.lbx_Monatsauswahl.AddItem "-> Nachberechnung: " & Abrechungsmonat_aufloesen(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)) & _
                                                                           " zu " & VBA.Mid(Rueckwandlung_Abrechnungsmonat(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)), 1, 2) & _
                                                                           "/" & "20" & VBA.Mid(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), VBA.InStr(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), "_") - 2, 2)
        Else
            'Abrechnungsmonate
            Mdl_Dialogaktionen.Dialog_Email.lbx_Monatsauswahl.AddItem "Abrechnungstabelle: " & VBA.Mid(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), 1, VBA.InStr(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), "_") - 1)
        End If
        
         'Name der Ausgabedatei hinzuf|fffd|gen
        Mdl_Dialogaktionen.Dialog_Email.lbx_Monatsauswahl.List(j, 1) = str_Ausgabedatei
        
        i = i - 1
        j = j + 1
    Loop
    
    'Dialog anzeigen
    Mdl_Dialogaktionen.Dialog_Email.Show
    
    'Dialog zerst|fffd|ren
    If Not (Dialog_Email Is Nothing) Then Set Dialog_Email = Nothing
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
End Sub

Public Sub cm_Impressum_anzeigen()
    Call Mdl_WinApi.OpenLink(IMPRESSUM_ADDRESS)
End Sub

Public Sub cm_Hilfe_anzeigen()
    Dim str As String
    str = ActiveSheet.name
    
    On Error GoTo ERRORHANDLER
    Sheets("Verwaltungsdaten").OLEObjects(1).Verb Verb:=xlOpen
    On Error Resume Next
    Worksheets(str).Select
    Exit Sub
    
ERRORHANDLER:
    MsgBox "Fehler:" & vbCrLf & vbCrLf & _
           "Die Hilfedatei (MS WORD-Dokument) konnte nicht angezeigt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
           " |fffd|ffnen Sie zuerst ein leeres MS WORD-Dokument und " & vbCrLf & _
           "   rufen Sie anschlie|fffd|end erneut die Hilfe auf.", _
           vbCritical, _
           TOOL_HDR
           
    Worksheets(str).Select
    Application.ScreenUpdating = False
    
    Call Mdl_Symbolleiste.Excel_Symbolleisten_ausblenden
    
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
    End If
    
    'Text f|fffd|r Tabellensicht festlegen
    If (VBA.Right(ActiveSheet.name, (Len(ActiveSheet.name) - VBA.InStr(ActiveSheet.name, "_"))) <> "0") Then
        Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(1, 2).Value = "Monat: " & _
        Abrechungsmonat_aufloesen(ActiveSheet.name) & " (Nachberechnungsmonat von " & _
        VBA.Mid(Rueckwandlung_Abrechnungsmonat(ActiveSheet.name), 1, 2) & "/" & _
        "20" & VBA.Mid(ActiveSheet.name, VBA.InStr(ActiveSheet.name, "_") - 2, 2) & ")"
    Else
        Mdl_Workbook_Initialisierung.objTabellenblatt.Range("B1").Value = "Monat: " & _
        VBA.Mid(ActiveSheet.name, 1, VBA.InStr(ActiveSheet.name, "_") - 1)
    End If
    
    'Eingabepr|fffd|fung aktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
    
    'erstes Bewegungsdatenfeld aktiv setzen
    Call Mdl_Workbook_Initialisierung.Erstes_Bewegungsdatenfeld_aktivieren
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Hinweismessage f|fffd|r die besondere Erfassung bei Nachberechnungen:
    If (VBA.Right(ActiveSheet.name, (Len(ActiveSheet.name) - VBA.InStr(ActiveSheet.name, "_"))) <> "0") Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Erfassen Sie f|fffd|r die Nachberechnung nur Differenzen und nicht alle Bewegungsdaten.", _
               vbInformation, _
               TOOL_HDR
    End If
    
    Application.ScreenUpdating = True
End Sub

Public Function Abrechungsmonat_aufloesen(ByVal str_Tabellenblatt As String) As String
'L|fffd|st den Namen eines Tabellenblatts in den wirklichen Monat auf

    Dim str_Monat, str_Jahr, str_MK As String
    Dim str_tempMonat As String
    Dim str_Temp As String
    
    'Name des Tabellenblatts umwandeln und in seine Bestandteile zerlegen
    str_Monat = VBA.Mid(Rueckwandlung_Abrechnungsmonat(str_Tabellenblatt), 1, 2)
    str_Jahr = "20" & VBA.Mid(str_Tabellenblatt, VBA.InStr(str_Tabellenblatt, "_") - 2, 2)
    str_MK = VBA.Mid(str_Tabellenblatt, VBA.InStr(str_Tabellenblatt, "_") + 1, Len(str_Tabellenblatt) - VBA.InStr(str_Tabellenblatt, "_"))
    
    'Korrekten Abrechnungsmonat zusammensetzen
    If (CLng(str_MK) * -1) >= CLng(str_Monat) Then
        str_tempMonat = CStr(CLng(str_Monat) + CLng(str_MK) + 12)
        If Len(str_tempMonat) < 2 Then str_tempMonat = "0" & str_tempMonat
        str_Temp = str_tempMonat & "/" & CStr(CLng(str_Jahr) - 1)
    Else
        str_tempMonat = CStr(CLng(str_Monat) + CLng(str_MK))
        If Len(str_tempMonat) < 2 Then str_tempMonat = "0" & str_tempMonat
        str_Temp = str_tempMonat & "/" & str_Jahr
    End If
    
    Abrechungsmonat_aufloesen = Abrechnungsmonat_umwandeln(str_Temp)
End Function

Private Function Control_vorhanden(ByVal str_CmbP_Name) As Boolean
    Dim i As Integer
    
    Control_vorhanden = False
    
    With Application.CommandBars("Lohn Vorerfassung").Controls("Abrechnungsmonat")
        For i = 1 To .Controls.count
            If .Controls(i).Caption = str_CmbP_Name Then
                Control_vorhanden = True
                Exit For
            End If
        Next i
    End With
End Function

Public Function Abrechnungsmonat_umwandeln(ByVal Abrechnungsmonat As String) As String
    Dim str_split() As String
    
    str_split = Split(Abrechnungsmonat, "/")
    
    If Len(str_split(0)) = 1 Then
        str_split(0) = "0" & str_split(0)
    End If
    
    Select Case str_split(0)
        Case "01"
            str_split(0) = "Januar "
        Case "02"
            str_split(0) = "Februar "
        Case "03"
            str_split(0) = "M|fffd|rz "
        Case "04"
            str_split(0) = "April "
        Case "05"
            str_split(0) = "Mai "
        Case "06"
            str_split(0) = "Juni "
        Case "07"
            str_split(0) = "Juli "
        Case "08"
            str_split(0) = "August "
        Case "09"
            str_split(0) = "September "
        Case "10"
            str_split(0) = "Oktober "
         Case "11"
            str_split(0) = "November "
        Case "12"
            str_split(0) = "Dezember "
    End Select
    
    Abrechnungsmonat_umwandeln = str_split(0) & VBA.Mid(str_split(1), 3, 2)
End Function

Public Function Rueckwandlung_Abrechnungsmonat(ByVal Abrechnungsmonat As String) As String
    Dim str_Monat As String 'Monat (ausgeschrieben)
    Dim str_Jahr As String  'Jahr (JJ)
    Dim str_MK As String    'Monatskennung (0 bis -12)
    
    str_Monat = VBA.Mid(Abrechnungsmonat, 1, VBA.InStr(Abrechnungsmonat, " ") - 1)
    str_Jahr = "20" & VBA.Mid(Abrechnungsmonat, VBA.InStr(Abrechnungsmonat, " ") + 1, 2)
    str_MK = VBA.Mid(Abrechnungsmonat, VBA.InStr(Abrechnungsmonat, "_"), Len(Abrechnungsmonat) - VBA.InStr(Abrechnungsmonat, "_") + 1)
             
    Select Case str_Monat
        Case "Januar"
            str_Monat = "01"
        Case "Februar"
            str_Monat = "02"
        Case "M|fffd|rz"
            str_Monat = "03"
        Case "April"
            str_Monat = "04"
        Case "Mai"
            str_Monat = "05"
        Case "Juni"
            str_Monat = "06"
        Case "Juli"
            str_Monat = "07"
        Case "August"
            str_Monat = "08"
        Case "September"
            str_Monat = "09"
        Case "Oktober"
            str_Monat = "10"
         Case "November"
            str_Monat = "11"
        Case "Dezember"
            str_Monat = "12"
    End Select
    
    Rueckwandlung_Abrechnungsmonat = str_Monat & "/" & str_Jahr & str_MK
End Function

Private Function liefere_Index_aktives_Sheet() As Integer 'Index sichtbarer WS aus Workbook
    Dim i, j As Integer
    
    j = 0
    If (Not Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
       For i = 1 To (Application.Worksheets.count)
            If (ThisWorkbook.Worksheets(i).visible = xlSheetVisible) Then
                j = j + 1
                If (ThisWorkbook.Worksheets(i).name = Mdl_Workbook_Initialisierung.objTabellenblatt.name) Then
                    liefere_Index_aktives_Sheet = j
                End If
            End If
        Next i
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Interner Fehler wegen inkorrekter Objektzuordnung." & vbCrLf & _
               "Der Index der aktiven Monatstabelle konnte nicht ermittelt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Starten Sie die Anwendung ohne zu speichern neu.", _
               vbCritical, _
               TOOL_HDR
    End If
End Function

Private Function liefere_letzten_aktiven_WS_Index() As Integer 'Index des letzten, sichtbaren WS
    If (Not Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        liefere_letzten_aktiven_WS_Index = liefere_ersten_aktiven_WS_Index + UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter) - 1
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Interner Fehler wegen inkorrekter Objektzuordnung." & vbCrLf & _
               "Der Index der letzten Monatstabelle konnte nicht ermittelt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Starten Sie die Anwendung ohne zu speichern neu.", _
               vbCritical, _
               TOOL_HDR
    End If
End Function

Private Function liefere_ersten_aktiven_WS_Index() As Integer 'Index des ersten, sichtbaren WS
    Dim i As Integer
    
    If (Not Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then
        For i = 1 To (Application.Worksheets.count)
            If (ThisWorkbook.Worksheets(i).visible = xlSheetVisible) Then
                liefere_ersten_aktiven_WS_Index = i 'Index des 1. sichtbaren WS
                Exit For
            End If
        Next i
    Else
        MsgBox "Fehler: " & vbCrLf & vbCrLf & _
               "Interner Fehler wegen inkorrekter Objektzuordnung." & vbCrLf & _
               "Die fr|fffd|heste Monatstabelle konnte nicht ermittelt werden." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Starten Sie die Anwendung ohne zu speichern neu.", _
               vbCritical, _
               TOOL_HDR
    End If
End Function

Private Function liefere_Einfuegestelle_WS(ByVal Abrechnungsmonat As String) As Integer
    Dim i As Integer
    
    'Stelle des Abrechnungsmonats im Array Erfassungsblaetter finden
    For i = 1 To UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
        If (Abrechnungsmonat = Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)) Then
            Exit For
        End If
    Next i
    
    'Stelle des WS in Workbook festlegen
    liefere_Einfuegestelle_WS = (liefere_ersten_aktiven_WS_Index + CInt(i)) - 1
End Function
Attribute VB_Name = "Mdl_UmbenennenVonTblMaster"
Sub StartUmbenennen()
 Dim ZuErsetzendeZeichen As String
 Dim Ersatzzeichen As String
 
 'Benutzerabfrage welche Jahreszahl ersetzt werden soll.
 ZuErsetzendeZeichen = Application.InputBox(prompt:="Bitte die letzten beiden Ziffern der zu |fffd|ndernden Kernerfassungs-Jahreszahl angeben!", Title:="Jahr Ersetzen", Default:=0)
 
 'Benutzerabfrage durch welche Jahreszahl ersetzt werden soll.
 Ersatzzeichen = Application.InputBox(prompt:="Bitte die letzten beiden Ziffern der Kern-Ersatz-Jahreszahl angeben!", Title:="Jahr Ersetzen", Default:=0)
 
 'Aufruf der Ersetzungsfunktion
 Call Mdl_UmbenennenVonTblMaster(ZuErsetzendeZeichen, Ersatzzeichen)
End Sub



Sub Mdl_UmbenennenVonTblMaster(ByRef SearchChar As String, ByRef ReplaceChar As String)
Application.DisplayAlerts = False
    'Erzeugen der ben|fffd|tigten Variablen
    Dim sht As Worksheet
    
    Dim wrk As Workbook
    
    Set wrk = ThisWorkbook
    
    Dim SearchString As String
    
    Dim StringTextErsetzung As String
    
    Dim ErsteZahl As Integer
    Dim ZweiteZahl As Integer
    
    'Variablen f|fffd|r |fffd|nderung
    Dim AenderungsZahl As Integer
    Dim ErsatzZahl As Integer
    Dim DecremenIncrement As Integer
    
    'Z|fffd|hler f|fffd|r ver|fffd|nderte Tabellen.
    Dim CountOfExecutions As Integer
    CountOfExecutions = 0
    
    'Schleifenindex.
    Dim SchleifenIndex As Integer
    
    'Konvertierung der Zahlenstrings zu Integer um sie numerisch vergleichen zu k|fffd|nnen
    ErsteZahl = Val(SearchChar)
    ZweiteZahl = Val(ReplaceChar)
    
   'Eingaben|fffd|berpr|fffd|fung. Differenz muss 1 sein.
    If (Abs(ZweiteZahl - ErsteZahl) > 1) Then
        MsgBox "Die Differenz zwischen den Zahlen darf nicht gr|fffd||fffd|er 1 sein. Es wird keine |fffd|nderung durchgef|fffd|hrt."
        Exit Sub
     Else
        If ((Abs(ZweiteZahl - ErsteZahl) = 0)) Then
            MsgBox "Differenz zwischen den Zahlen ist 0. Es wird keine |fffd|nderung durchgef|fffd|hrt."
            Exit Sub
        End If
    End If
    
    
     '|fffd|berpr|fffd|fung welche Zahl gr|fffd||fffd|er ist um Verarbeitungsreihenfolge festzulegen wegen eventueller Namenskonflikte
    If ZweiteZahl > ErsteZahl Then
            ErsatzZahl = ZweiteZahl + 1
            AenderungsZahl = ZweiteZahl
            SearchChar = CInt(AenderungsZahl)
            ReplaceChar = CInt(ErsatzZahl)
            DecremenIncrement = -1
        Else
            If ZweiteZahl < ErsteZahl Then
                ErsatzZahl = ZweiteZahl - 1
                AenderungsZahl = ZweiteZahl
                SearchChar = CInt(AenderungsZahl)
                ReplaceChar = CInt(ErsatzZahl)
                DecremenIncrement = 1
            End If
    End If


    'Iteration |fffd|ber alle Tabellen |fffd|ber alle Jahreszahlen.
    For SchleifenIndex = 1 To 3
    
        For Each sht In wrk.Worksheets
        
            '|fffd|berpr|fffd|fung der Codenames.
            If sht.CodeName Like "tbl_Master*" Then
            
                '|fffd|berpr|fffd|fung ob Name die Jahreszahl enth|fffd|lt, wenn ja Ersatz durch Ersatzzahl.
                SearchString = sht.name
                TestPos = InStr(1, SearchString, SearchChar, CompareMethod.TextCompare)
                 On Error Resume Next
                If TestPos <> 0 Then
                    CountOfExecutions = CountOfExecutions + 1
                    StringTextErsetzung = Replace(SearchString, SearchChar, ReplaceChar)
                    
                    sht.name = StringTextErsetzung
                End If
                
            End If
                  
        Next
            'Update der Jahreszahl die ge|fffd|ndert wird.
            ErsatzZahl = ErsatzZahl + DecremenIncrement
            AenderungsZahl = AenderungsZahl + DecremenIncrement
            SearchChar = CInt(AenderungsZahl)
            ReplaceChar = CInt(ErsatzZahl)
    Next SchleifenIndex
    'Textausgaben wenn keine Tabellen verarbeitet wurden.
        If (CountOfExecutions = 0) Then
            MsgBox "Keine Tabellen zum |fffd|ndern gefunden."
            Exit Sub
        End If
        
     Application.DisplayAlerts = True
End Sub
Attribute VB_Name = "Mdl_WinApi"
Option Explicit

'API-Funktion zum Anzeigen der VB-fun-Startseite
Private Declare Function ShellExecute Lib "shell32.dll" Alias _
        "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation _
        As String, ByVal lpFile As String, ByVal lpParameters _
        As String, ByVal lpDirectory As String, ByVal nShowCmd _
        As Long) As Long
        
Public Sub OpenLink(str_Link As String)
    Dim nRetVal As Long
    
    If Len(str_Link) > 0 Then
        nRetVal = Mdl_WinApi.ShellExecute(0&, "open", str_Link, vbNullString, vbNullString, vbNormalFocus)
        
        If nRetVal < 32 Then
            MsgBox "Es ist ein Fehler aufgetreten!", _
                   vbInformation, TOOL_HDR
        End If
    End If
End Sub
Attribute VB_Name = "Mdl_Workbook_Initialisierung"
Option Explicit
Option Base 1

Public Const APP_NAME = "Lohn Vorerfassung"
Public Const APP_VERSION As String = "6.3"                 'Konstante: aktuelle Version der Lohn Vorerfassung
Public Const APP_VERSION_Next As String = "6.4"            'Konstante: n|fffd|chste Version der Lohn Vorerfassung
Public Const TOOL_HDR = APP_NAME & " " & APP_VERSION

Public Const WB_TEMPLATE = "LVE_Tabelle.xlsm"               'Konstante: Dateiname der LVE Tabellen Vorlage
Public Const WS_TEMPLATE = "Neue Tabelle"                   'Konstante: Tabellenname der Vorlage der Erfassungstabellen

Public Const MinAbrZeitraum As String = "November 2018"      'Konstante: Anfang des Abrechnungszeitraums
Public Const MaxAbrZeitraum As String = "Februar 2020"      'Konstante: Ende des Abrechnungszeitraums

Public Const int_EZ = 11                                    'Konstante: Erste Erfassungszeile in Bewegungsdatentabelle
Public Const int_ES = 18                                    'Konstante: Erste Erfassungsspalte in Bewegungsdatentabelle
Public Const int_ZBS = 5                                    'Konstante: Zeile in der sich der Bearbeitungsschl|fffd|ssel befindet (nur bei LODAS)
Public Const int_ZLAN = 6                                   'Konstante: Zeile in der sich die Lohnartennummer befindet

Public Erfassungsblaetter() As String                       'Arrayobject f|fffd|r die Reihenfolge der Erfassungstabellen (zeitlich geordnet)
Public objTabellenblatt As Object                           'Objektvariable f|fffd|r die jeweilige Erfassungstabelle

Public CheckNumberAsText As Boolean                         'Merkt sich die gew|fffd|hlte Excel-Option (Fehler|fffd|berpr|fffd|fung/Als Text gespeicherte Zahlen)
Public DATEVprint As Boolean
Public Check_WB As Boolean
Public blnErststart As Boolean                              'Variable gibt Auskunft dar|fffd|ber, ob die Anwendung zum ersten Mal gestartet wurde
Public blnEingabePr|fffd|fenAus As Boolean                       'Variable zum Aktivieren/Deaktivieren der Eingabepr|fffd|fung

Private Const WS_PASSWORD As String = "DATEVeGE532" 'Konstante: Passwort f|fffd|r den Passwortschutz der Erfassungstabellen
Public Property Get clrHintergrundAB() As Long
    clrHintergrundAB = RGB(251, 251, 250)
End Property

Public Property Get clrHeaderGruen() As Long
    clrHeaderGruen = RGB(144, 208, 51)
End Property
Public Property Get clrHeaderBlau() As Long
    clrHeaderBlau = RGB(140, 200, 233)
End Property
Public Property Get clrMaZeileGrau() As Long
    clrMaZeileGrau = RGB(203, 202, 201)
End Property
Public Property Get clrMaZeileTrennGrau() As Long
    clrMaZeileTrennGrau = RGB(101, 108, 106)
End Property
Public Property Get clrUeberschriftGruen() As Long
    clrUeberschriftGruen = RGB(3, 154, 154)
End Property
Public Sub WB_StartUp()
    If ThisWorkbook.name <> WB_TEMPLATE Then
        'Pr|fffd|fung, ob die LVE_Tabellen Vorlage ge|fffd|ffnet ist
        Check_WB = Check_Workbooks
        If Not Check_WB Then
            'Anwendung beenden
            Application.EnableEvents = False
            ThisWorkbook.Close SaveChanges:=False
        End If
        
        'Automatische Pr|fffd|ffunktion abschalten (Oberfl|fffd|chenhinweis, wenn Zahlen als Text formatiert sind)
        On Error Resume Next
        CheckNumberAsText = Application.ErrorCheckingOptions.NumberAsText
        On Error GoTo 0
        
        'Excel.xlb-Datei als Backup sichern (beinhaltet die aktuellen Symbol- ind Men|fffd|leisteninformationen)
        Call Mdl_Backup.CreateBackupXlbDat
    End If
    
    'Tabelle "Erststart" aktvieren und Hinweistext ausblenden
    Call Mdl_Erfassungsblaetter.Erststart_einblenden

    'Initialisierung starten
    Call Init
End Sub

Public Sub WB_Activate()
    'EXCEL-Symbolleisten deaktivieren
    Call Mdl_Symbolleiste.Excel_Symbolleisten_ausblenden
End Sub

Public Sub WB_Deactivate()
     If Check_WB Then
        'EXCEL-Symbolleiste aktivieren
        Call Mdl_Symbolleiste.Excel_Symbolleisten_einblenden
        
        'Bildschirmaktualisierung aktivieren
        Application.ScreenUpdating = True
    End If
End Sub

Public Sub WB_ShutDown()
    'Abschlusspr|fffd|fung, ob alle Tabellen intern angelegt wurden
    Call Mdl_Workbook_Initialisierung.Array_vergleichen
    
    'Fehlerpr|fffd|feinstellung zur|fffd|cksetzen
    On Error Resume Next
    Application.ErrorCheckingOptions.NumberAsText = Mdl_Workbook_Initialisierung.CheckNumberAsText
    On Error GoTo 0
    
    'Tabellenblatt-Objekt leeren
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = Nothing

    Application.DisplayAlerts = False
End Sub

Public Sub Mappe_Schliessen()
    Application.DisplayAlerts = False
    
    'Excel samt Anwendungsrahmen schlie|fffd|en
    Application.Quit
    Application.DisplayAlerts = True
End Sub

Private Sub Init()
    Dim str_Monat As String
    Dim str_AbrMonat As String
    Dim str_NachMonat As String
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    Dim strValue As String

    Select Case Val(Application.Version)
      Case 11
        strValue = "Die Lohn-Vorerfassung ist unter Excel 2003 nicht lauff|fffd|hig. Um die Anwendung nutzen zu k|fffd|nnen, verwenden Sie bitte eine Office-Installation in Version 2010 oder h|fffd|her."
        MsgBox strValue, vbInformation
        Exit Sub
      Case 12
        strValue = "Die Lohn-Vorerfassung ist unter Excel 2007 nicht lauff|fffd|hig. Um die Anwendung nutzen zu k|fffd|nnen, verwenden Sie bitte eine Office-Installation in Version 2010 oder h|fffd|her."
        MsgBox strValue, vbInformation
        Exit Sub
    End Select

    'Pr|fffd|fen, ob die Verwaltungsdaten |fffd|ber den Assistenten vorbelegt wurden
    If Mdl_Pruefungen.Mandantenstammdaten_vorhanden Then
        'ausgeschrieben Abrechnungsmonat aus Tabelle 'Verwaltungsdaten' holen
        str_Monat = Verwaltungsdaten.Cells(6, 3).Value
        
        'Wurde der Abrechungsmonat bereits initialisiert?
        If Mdl_Workbook_Initialisierung.WS_vorhanden(str_Monat & "_0") Then
            'Verwaltungsdaten anpassen f|fffd|r Tabellenindex
            Verwaltungsdaten.Columns("D").NumberFormat = "@" 'Spalte Textformat hinterlegen
            Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
            
            'Eingabpr|fffd|fung aktivieren
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
            
            'Es wurde kein Erstsstart durchgef|fffd|hrt
            Mdl_Workbook_Initialisierung.blnErststart = False
        Else
            'Eingabepr|fffd|fung deaktivieren
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
            
            'Tabelle Verwaltungsdaten nach Best|fffd|ckung durch Assistenten initialisieren
            Call Init_Tabelle_Verwaltung
            'Tabelle 'LA_in_Tabelle' zur|fffd|cksetzen
            Call Reset_Tabelle_LA_in_Tabelle
            
            '--------------------------------------------------------------------
            'Erstelle aktuellen Abrechungsmonat und dessen Nachberechnungsmonat
            '--------------------------------------------------------------------
            
            'ausgeschrieben Abrechnungsmonat aus Tabelle 'Verwaltungsdaten' holen
            str_Monat = Verwaltungsdaten.Cells(6, 3).Value
            
            str_AbrMonat = str_Monat & "_0"
            str_NachMonat = str_Monat & "_-1"
    
            Call Mdl_Workbook_Initialisierung.Abrechnungsmonat_erstellen(str_AbrMonat)
'            Call Mdl_Workbook_Initialisierung.Nachberechnungsmonat_erstellen(str_AbrMonat, str_NachMonat)
        
            'bereits im Abrechungsmonat integrierte Lohnarten |fffd|bernehmen f|fffd|r Nachberechnungsmonat
            With Worksheets("LA_in_Tabelle")
                Application.DisplayAlerts = False 'Hinweismeldung aus
                
                .Columns("A:C").Insert Shift:=Excel.XlDirection.xlToRight
                .Range("D1:F250").Copy
                .Paste destination:=.Range("A1:C250")
                
                Application.CutCopyMode = False
                Application.DisplayAlerts = True 'Hinweismeldung an
            End With
            
            'Eingabepr|fffd|fung aktivieren
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
            
            'Erstart wurde durchgef|fffd|hrt
            Mdl_Workbook_Initialisierung.blnErststart = True
        End If
        
        'Tabelle Erststart vestecken
        Call Erststart_ausblenden
        
        'aktuellsten Abrechnungsmonat aktivieren
        Call Aktuellen_Abrechnungsmonat_aktivieren
        
        'Men|fffd| und Symbolleisten anpassen
        Call Mdl_Symbolleiste.Excel_Symbolleisten_ausblenden
    Else
        Mdl_Workbook_Initialisierung.blnErststart = False
    End If
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(ActiveSheet)
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
End Sub

Private Sub Init_Tabelle_Verwaltung()
'Verwaltungstabelle nach Best|fffd|ckung durch Assistenten initilisieren
    Dim strErstDAT As String
    Dim strAbrDAT As String
    Dim strNachDAT As String
    
    strErstDAT = Verwaltungsdaten.Cells(6, 2).Value
    
    'Erstelldatum von Zahlenwert in Wortwert umwandeln (z.B. Von: 07/2016  Nach: Juli 16)
    strAbrDAT = Mdl_Symbolleiste.Abrechnungsmonat_umwandeln(strErstDAT)
    Verwaltungsdaten.Cells(6, 3).Value = strAbrDAT
    
    'Nachberechnungsmonat vom aktuellem Abrechungsmonat ermitteln
    strNachDAT = Mdl_Symbolleiste.Abrechungsmonat_aufloesen(strAbrDAT & "_-1")
    Verwaltungsdaten.Cells(7, 3).Value = strNachDAT
    
    'Nachberechnungsmonat von Wortwert in Zahlenwert umwandeln (z.B. Von: Juni 16 Nach: 06/2016)
    Verwaltungsdaten.Cells(7, 2).Value = VBA.Mid(Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(strNachDAT & "_-1"), 1, 7)
    
    'Aktve Tabellenbl|fffd|tter in Tabelle Verwaltungsdaten zur|fffd|cksetzen
    Verwaltungsdaten.Columns("D").ClearContents
    Verwaltungsdaten.Columns("D").NumberFormat = "@"
End Sub

Private Sub Reset_Tabelle_LA_in_Tabelle()
    'integrierte Lohnartentabelle "LA_in_Tabelle" anpassen
    With Worksheets("LA_in_Tabelle")
        .Columns("A:IV").ClearContents 'Inhalt l|fffd|schen
        .Cells(1, 1).Value = "Nummer"
        .Cells(1, 2).Value = "Name"
        .Cells(1, 3).Value = "Spalte"
    End With
End Sub

Public Sub Aktuellen_Abrechnungsmonat_aktivieren()
    Dim str_Temp As String
    Dim str_Monat As String
    
    If Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing Then
        'Verwaltungsdaten anpassen f|fffd|r Tabellenindex
        Verwaltungsdaten.Columns("D").NumberFormat = "@" 'Spalte Textformat hinterlegen
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
        'Hole letzten Abrechnungsmonat aus Tabelle
        str_Temp = Mdl_Workbook_Initialisierung.Erfassungsblaetter(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter))
        str_Monat = VBA.Mid(str_Temp, 1, VBA.InStr(str_Temp, "_") - 1)
        
        Call Abrechnungsmonat_wechseln(str_Monat & "_0")
    End If
End Sub

Public Sub Abrechnungsmonat_wechseln(str_Tabellenblatt As String)
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    'Eingabepr|fffd|fung deaktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
        
    If (Mdl_Workbook_Initialisierung.WS_vorhanden(str_Tabellenblatt)) Then
        'Tabellenblatt zuordnen und aktivieren
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_Tabellenblatt)
        Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
        
        'Tabelle formatieren
        Call Mdl_Formatierungsanweisungen.MA_Header_formatieren
        Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
        Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
        Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
        
        'erstes Bewegungsdatenfeld aktiv setzen, wenn LA vorhanden
        Call Mdl_Workbook_Initialisierung.Erstes_Bewegungsdatenfeld_aktivieren
    End If
    
    'Eingabepr|fffd|fung aktivieren
    Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
End Sub

Public Sub Erstes_Bewegungsdatenfeld_aktivieren()
    If (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE >= int_ES) Then
        Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_EZ, int_ES).Select
    End If
End Sub

Public Sub Abrechnungsmonat_erstellen(ByVal str_AbrMonat As String)

    'Aktuelles Tabellenblatt initialisieren
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_AbrMonat)
    
    'Tabellenblatt zu den vorhandnen Tabellenbl|fffd|ttern hinzuf|fffd|gen
    Mdl_Workbook_Initialisierung.Erfassungsblaetter_hinzufuegen (str_AbrMonat)
    
    'Abrechnungsmonat mit Daten aus dem Assistenten f|fffd|llen und formatieren
    Call Mdl_Fuellanweisungen.Init_Tabellenblatt
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
    'Sichtbar machen
    Mdl_Workbook_Initialisierung.objTabellenblatt.visible = xlSheetVisible
    
    'Variable objTabellenblatt leeren
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = Nothing
End Sub

Public Sub Nachberechnungsmonat_erstellen(ByVal str_AbrMonat As String, ByVal str_NachMonat As String)

    'Inhalte der Tabelle des Abrechnungsmonats in die Tabelle des Nachberechnungsmonats kopieren
    ThisWorkbook.Worksheets(str_AbrMonat).UsedRange.Copy _
    destination:=ThisWorkbook.Worksheets(str_NachMonat).Range(ThisWorkbook.Worksheets(str_AbrMonat).UsedRange.Address)

    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_NachMonat)
    
    'Verwaltungsdaten anpassen f|fffd|r Tabellenindex/Tabellenblattindex f|fffd|llen
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_neu_sortieren(str_NachMonat)
    
    Call Mdl_Fuellanweisungen.Tbl_Header_anlegen
    
    Call Mdl_Fuellanweisungen.AbrMonatHeader_fuellen
    
    'Kopierten Inhalt in der neuen Abrechungstabelle formatieren
    Call Mdl_Formatierungsanweisungen.MA_Header_formatieren
    Call Mdl_Formatierungsanweisungen.MA_Zeilen_formatieren
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    Call Mdl_Formatierungsanweisungen.Aussenbereiche_formatieren
    Call Mdl_Formatierungsanweisungen.AbrMonatHeader_formatieren
    Call Mdl_Formatierungsanweisungen.Logo_formatieren
    
    'Blattschutz aktivieren
    Call Mdl_Workbook_Initialisierung.Blattschutz_setzen(Mdl_Workbook_Initialisierung.objTabellenblatt)
    
     'Sichtbar machen
    Mdl_Workbook_Initialisierung.objTabellenblatt.visible = xlSheetVisible
    
    'Variable objTabellenblatt leeren
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = Nothing
End Sub

Public Function WB_BeforePrint() As Boolean
    If Not Mdl_Workbook_Initialisierung.DATEVprint Then
        MsgBox "Wichtiger Hinweis:" & vbCrLf & vbCrLf & _
               "Bitte drucken Sie die Lohn-Vorerfassungsdaten |fffd|ber die DATEV-Symbolleiste: ""aktuelle Tabelle drucken"" aus.", _
               vbInformation, TOOL_HDR
               
        WB_BeforePrint = True
    Else
        WB_BeforePrint = False
    End If
End Function

Public Sub Erfassungsblaetter_hinzufuegen(ByVal Abrechnungsmonat As String)
    Dim Range As Range
    Dim numRows As Integer
    Dim i As Integer
    
    Set Range = Verwaltungsdaten.Range("D1:D250")
    numRows = Application.WorksheetFunction.CountA(Range)
    
    If numRows = 0 Then
        ReDim Erfassungsblaetter(1)
        Erfassungsblaetter(1) = Abrechnungsmonat
    Else
        'Erfassungsbl|fffd|tter von Tabelle laden
        ReDim Erfassungsblaetter(numRows)
        For i = 1 To numRows
            Erfassungsblaetter(i) = Verwaltungsdaten.Cells(i, 4).Value
        Next i
        
        'Neuen Abrechnungsmonat hinzuf|fffd|gen
        ReDim Preserve Erfassungsblaetter(UBound(Erfassungsblaetter) + 1)
        Erfassungsblaetter(UBound(Erfassungsblaetter)) = Abrechnungsmonat
    End If
    
    'Zur|fffd|ckschreiben in Tabelle 'Verwaltungsdaten'
    Verwaltungsdaten.Columns("D").ClearContents
    For i = 1 To UBound(Erfassungsblaetter)
        Verwaltungsdaten.Cells(i, 4).Value = Erfassungsblaetter(i)
    Next i
End Sub

Public Sub Erfassungsblaetter_laden()
    Dim Range As Range
    Dim numRows As Integer
    Dim i As Integer
    
    Set Range = Verwaltungsdaten.Range("D1:D250")
    numRows = Application.WorksheetFunction.CountA(Range)
    
    If numRows > 0 Then
        ReDim Erfassungsblaetter(numRows)
        For i = 1 To numRows
            Erfassungsblaetter(i) = Verwaltungsdaten.Cells(i, 4).Value
        Next i
    End If
End Sub

Public Sub Array_vergleichen()
    Dim i As Integer
    
    If (Mdl_Workbook_Initialisierung.blnErststart And ThisWorkbook.Worksheets.count > 4) Then
        Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
        If (UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter) > 0) Then
            For i = 1 To UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
                If Not (Verwaltungsdaten.Cells(i, 4).Value = Mdl_Workbook_Initialisierung.Erfassungsblaetter(i)) Then
                    MsgBox "Fehler:" & vbCrLf & vbCrLf & _
                           "Die Liste der internen Bewegungsdatentabellen ist inkonsistent.", _
                           vbCritical, _
                           TOOL_HDR
                End If
            Next i
        End If
    End If
End Sub

Public Sub Erfassungsblaetter_neu_sortieren(ByVal str_AbrMonat As String)
    Dim Abrechnungsmonat As String
    Dim arr() As String
    Dim strDummy As String
    Dim year1 As String
    Dim year2 As String
    Dim monat1 As String
    Dim monat2 As String
    Dim MK1 As String
    Dim MK2 As String
    Dim str_AbrMonatAlph As String
    Dim str_MK As String
    Dim i, x As Byte
    
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    'Abrechungsmonat umwandeln
    Abrechnungsmonat = Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(str_AbrMonat)
    
    'Array anlegen
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    
    On Error Resume Next
    ReDim arr(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter))
    On Error GoTo 0
    
    For i = 1 To UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
        arr(i) = Mdl_Symbolleiste.Rueckwandlung_Abrechnungsmonat(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i))
    Next i
    
    'Neuen Abrechnungsmonat hinzuf|fffd|gen
    ReDim Preserve arr(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter) + 1)
    arr(UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter) + 1) = Abrechnungsmonat
    
    'Array sortieren nach Jahr
    For i = 1 To (UBound(arr) - 1)
        For x = i + 1 To UBound(arr)
            year1 = VBA.Mid(arr(i), 4, 4)
            year2 = VBA.Mid(arr(x), 4, 4)
            
            If (CLng(year1) > CLng(year2)) Then
                strDummy = arr(i)
                arr(i) = arr(x)
                arr(x) = strDummy
            End If
        Next x
    Next i
    
    'Array sortieren nach Monat
    For i = 1 To (UBound(arr) - 1)
        For x = i + 1 To UBound(arr)
            year1 = VBA.Mid(arr(i), 4, 4)
            year2 = VBA.Mid(arr(x), 4, 4)
            
            monat1 = VBA.Mid(arr(i), 1, 2)
            monat2 = VBA.Mid(arr(x), 1, 2)
            
            If (CLng(year1) = CLng(year2)) Then
                If (CLng(monat1) > CLng(monat2)) Then
                    strDummy = arr(i)
                    arr(i) = arr(x)
                    arr(x) = strDummy
                End If
            End If
        Next x
    Next i
    
    'Array sortieren nach Monatskennung
    For i = 1 To (UBound(arr) - 1)
        For x = i + 1 To UBound(arr)
            year1 = VBA.Mid(arr(i), 4, 4)
            year2 = VBA.Mid(arr(x), 4, 4)
            
            monat1 = VBA.Mid(arr(i), 1, 2)
            monat2 = VBA.Mid(arr(x), 1, 2)
            
            MK1 = VBA.Mid(arr(i), VBA.InStr(arr(i), "_") + 1, Len(arr(i)) - VBA.InStr(arr(i), "_") + 1)
            MK2 = VBA.Mid(arr(x), VBA.InStr(arr(x), "_") + 1, Len(arr(x)) - VBA.InStr(arr(x), "_") + 1)
            
            If (CLng(year1) = CLng(year2)) Then
                If (CLng(monat1) = CLng(monat2)) Then
                    If (CLng(MK1) > CLng(MK2)) Then
                        strDummy = arr(i)
                        arr(i) = arr(x)
                        arr(x) = strDummy
                    End If
                End If
            End If
        Next x
    Next i
    
    'Sortierten Array wegschreiben
    Verwaltungsdaten.Columns("D").ClearContents
    For i = 1 To UBound(arr)
        str_AbrMonatAlph = Mdl_Symbolleiste.Abrechnungsmonat_umwandeln(VBA.Mid(arr(i), 1, 7))
        str_MK = VBA.Mid(arr(i), 8, Len(arr(i)) - 7)
        Verwaltungsdaten.Cells(i, 4).Value = str_AbrMonatAlph & str_MK
    Next i
    
    'Array Erfassungsblaetter laden
    Call Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
        
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
End Sub


Public Sub Erfassungsblaetter_loeschen()
    Erase Erfassungsblaetter
End Sub

Public Sub Blattschutz_setzen(ByRef Tabelle As Object)
    With Tabelle
        'Wenn Office2K
        If (Application.Version = "9.0") Then
            .Protect _
            Password:=WS_PASSWORD, _
            DrawingObjects:=True, _
            Contents:=True, _
            Scenarios:=True
        Else 'Wenn OfficeXP oder Office2K3
            .Protect _
            Password:=WS_PASSWORD, _
            DrawingObjects:=True, _
            Contents:=True, _
            Scenarios:=True, _
            AllowFormattingCells:=True, _
            AllowFormattingColumns:=True, _
            AllowFormattingRows:=True, _
            AllowInsertingColumns:=True, _
            AllowInsertingRows:=True, _
            AllowInsertingHyperlinks:=True, _
            AllowDeletingColumns:=True, _
            AllowDeletingRows:=True, _
            AllowSorting:=True, _
            AllowFiltering:=True, _
            AllowUsingPivotTables:=True
        End If
        
        .EnableSelection = xlUnlockedCells
    End With
End Sub

Public Sub Blattschutz_aufheben(ByRef Tabelle As Object)
    On Error Resume Next
    With Tabelle
        .Unprotect (WS_PASSWORD)
    End With
    
    If Err.Number = 1004 Then
        Dim Answer As VbMsgBoxResult
        Answer = MsgBox("Zugriff durch weiteren Benutzer: " & vbCrLf & vbCrLf & _
                        "In der Erfassungstabelle ist im jetzigen Zustand noch ein weiterer Benutzer eingetragen," & vbCrLf & _
                        "der auf die Tabelle zugreift. Daher l|fffd|sst sich die Excel-Tabelle nicht automatisch bearbeiten." & vbCrLf & _
                        "Entfernen Sie im Excel-Men|fffd|punkt 'Extras | Arbeitsmappe freigeben' den weiteren Benutzer " & vbCrLf & _
                        "sowie den Haken 'Bearbeitung von mehreren Benutzern zur selben Zeit zulassen |fffd|'." & vbCrLf & vbCrLf & _
                        "Abschlie|fffd|end ist die Erfassungstabelle zu speichern und erneut zu starten.", vbCritical, TOOL_HDR)
        End If
    On Error GoTo 0
End Sub

Private Function Check_Workbooks() As Boolean
    Dim WB As Workbook
    Dim i As Integer
    
    i = 0
    Check_Workbooks = False
    
    'Pr|fffd|fung, ob die LVE_Tabellen Vorlage ge|fffd|ffnet ist.
    For Each WB In Application.Workbooks
        On Error Resume Next
        If (WB.name <> WB_TEMPLATE) Then
            If (WB.Worksheets(1).name = WS_TEMPLATE) Then i = i + 1
        End If
        
        If (i >= 2) Then Exit For
        On Error GoTo 0
    Next WB
    
    If (i <= 1) Then
        'Wenn nur eine LVE_Tabelle in der aktiven Excel-Instanz existiert
        Check_Workbooks = True
    Else
        'Wenn noch eine LVE_Tabelle ge|fffd|ffnet wurde.
        MsgBox "Wichtiger Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben bereits eine Erfassungstabelle in der aktiven EXCEL-Instanz ge|fffd|ffnet. " & _
               "Das |fffd|ffnen einer weiteren Erfassungstabelle ist" & vbCrLf & _
               "aus technischen Gr|fffd|nden nicht zul|fffd|ssig. " & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " |fffd|ffnen Sie die EXCEL-Datei " & ThisWorkbook.name & " in einer neuen EXCEL-Instanz.", _
               vbInformation, _
               TOOL_HDR
               
        Check_Workbooks = False
    End If
End Function

Public Function WS_existiert(ByVal strWSName As String) As Boolean
    Dim ws As Worksheet
    Dim blnWert As Boolean
    
    blnWert = False
        
    For Each ws In ThisWorkbook.Worksheets
        If (ws.name = strWSName) Then
            blnWert = True
        End If
    Next ws
    
    WS_existiert = blnWert
End Function

Public Sub WS_OnChange(ByVal Target As Excel.Range)
    'Beginn Geschwindigkeitsoptimierung ****************
    Dim calcMode As XlCalculation, updateMode As Boolean
    calcMode = Application.Calculation
    updateMode = Application.ScreenUpdating
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    '**************************************************
    
    On Error Resume Next
    If (Mdl_Workbook_Initialisierung.objTabellenblatt Is Nothing) Then _
        Set Mdl_Workbook_Initialisierung.objTabellenblatt = ActiveSheet
        
    If (Not Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus) Then
        Dim bRetVal As Boolean
        bRetVal = Mdl_Eingabe_pruefen.EingabeKontrolle(Target, _
                  Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(CInt(ActiveCell.Column)) _
                  & CStr(ActiveCell.Row) & ":" & _
                  Mdl_Fuellanweisungen.liefere_Spaltenbuchstabe(CInt(ActiveCell.Column)) _
                  & CStr(ActiveCell.Row), Mdl_Workbook_Initialisierung.objTabellenblatt, False)
    End If
    On Error GoTo 0
    
    'Ende Geschwindigkeitsoptimierung ****************
    Application.Calculation = calcMode
    Application.ScreenUpdating = updateMode
    Application.Calculate
    '**************************************************
End Sub

Public Function WS_vorhanden(ByVal strWSName As String) As Boolean
    Dim ws As Worksheet
    Dim blnWert As Boolean
    
    blnWert = False
    
    For Each ws In ThisWorkbook.Worksheets
        If ws.name = strWSName And ws.visible = Excel.XlSheetVisibility.xlSheetVisible Then
            blnWert = True
            Exit For
        End If
    Next ws
    
    WS_vorhanden = blnWert
End Function

'Hilfemethode, um alle Worksheet einzublenden
Public Function AlleWS_einblenden()
    Dim Ini As Long
    
    Application.ScreenUpdating = False
    
    For Ini = Sheets.count To 1 Step -1
        Sheets(Ini).visible = True
    Next Ini
    
    Application.ScreenUpdating = True
End Function
Attribute VB_Name = "UF_Abrechnungsmonate"
Attribute VB_Base = "0{33BEBFB5-1D81-438B-97DC-A214E37EFDC1}{CE2D2320-8124-4025-B8F0-0CE3A8B68B50}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cb_Auswahl_Click()
    Dim i As Integer
    Dim bln_Auswahl As Boolean
    
    bln_Auswahl = False
    For i = 0 To Me.lbx_Monatsauswahl.ListCount - 1
        If Me.lbx_Monatsauswahl.Selected(i) Then
            bln_Auswahl = True
            Exit For
        End If
    Next i
    
    'Wenn keine Auswahl getroffen wurde
    If Not bln_Auswahl Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben keinen Abrechnungsmonat ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihre Auswahl.", _
               vbInformation, _
               TOOL_HDR
    Else
        Me.Hide
    End If
End Sub

Private Sub cb_Abbrechen_Click()
    Call UserForm_Terminate
End Sub

Private Sub UserForm_Terminate()
    Unload Me
End Sub

Public Sub Monatsauswahl_setzen(ByRef str_ArrAbrMon() As String)
    Dim i As Integer
    
    i = UBound(str_ArrAbrMon)
    
    'Auswahl l|fffd|schen
    Me.lbx_Monatsauswahl.Clear
    
    'Auswahl mit Monaten f|fffd|llen
    Do While (i >= 1)
        Me.lbx_Monatsauswahl.AddItem (VBA.Left(str_ArrAbrMon(i), VBA.InStr(str_ArrAbrMon(i), "/") - 1))
        i = i - 1
    Loop
End Sub
Attribute VB_Name = "UF_Druckeinstellungen"
Attribute VB_Base = "0{47C853EA-3CC4-4A97-A6E4-0E55806DCF51}{0D3DFF08-E715-4551-A2F5-75B3353E0996}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public bAbbruch As Boolean

Private Sub UserForm_Initialize()
    Me.bAbbruch = False
    Me.cb_Uebernehmen.Enabled = False
    
    On Error Resume Next
    Me.tbx_aktiver_Drucker.Text = Application.ActivePrinter
    On Error GoTo 0
    
    Me.cbx_Personalnummer1.Value = True
    Me.cbx_Personalnummer1.Enabled = False
    
    If (Me.cbx_Personalnummer1.Value = True Or _
        Me.cbx_Familienname.Value = True Or _
        Me.cbx_Vorname.Value = True Or _
        Me.cbx_Kostenstelle.Value = True) And _
        Me.tbx_aktiver_Drucker.Text <> "" Then
        Me.cb_Uebernehmen.Enabled = True
    End If
End Sub

Private Sub cbx_Vorname_Click()
    If (Me.cbx_Personalnummer1.Value = True Or _
        Me.cbx_Familienname.Value = True Or _
        Me.cbx_Vorname.Value = True Or _
        Me.cbx_Kostenstelle.Value = True) And _
        Me.tbx_aktiver_Drucker.Text <> "" Then
        Me.cb_Uebernehmen.Enabled = True
    Else
        Me.cb_Uebernehmen.Enabled = False
    End If
End Sub

Private Sub cbx_Familienname_Click()
    If (Me.cbx_Personalnummer1.Value = True Or _
        Me.cbx_Familienname.Value = True Or _
        Me.cbx_Vorname.Value = True Or _
        Me.cbx_Kostenstelle.Value = True) And _
        Me.tbx_aktiver_Drucker.Text <> "" Then
        Me.cb_Uebernehmen.Enabled = True
    Else
        Me.cb_Uebernehmen.Enabled = False
    End If
End Sub

Private Sub cbx_Kostenstelle_Click()
    If (Me.cbx_Personalnummer1.Value = True Or _
        Me.cbx_Familienname.Value = True Or _
        Me.cbx_Vorname.Value = True Or _
        Me.cbx_Kostenstelle.Value = True) And _
        Me.tbx_aktiver_Drucker.Text <> "" Then
        Me.cb_Uebernehmen.Enabled = True
    Else
        Me.cb_Uebernehmen.Enabled = False
    End If
End Sub

Private Sub cmb_Drucker_aendern_Click()
    On Error Resume Next
    Application.Dialogs(xlDialogPrinterSetup).Show
    Me.tbx_aktiver_Drucker.Text = Application.ActivePrinter
    On Error GoTo 0
    
    If (Me.cbx_Personalnummer1.Value = True Or _
        Me.cbx_Familienname.Value = True Or _
        Me.cbx_Vorname.Value = True Or _
        Me.cbx_Kostenstelle.Value = True) And _
        Me.tbx_aktiver_Drucker.Text <> "" Then
        Me.cb_Uebernehmen.Enabled = True
    Else
        Me.cb_Uebernehmen.Enabled = False
    End If
End Sub

Private Sub cb_Uebernehmen_Click()
    Me.Hide
End Sub

Private Sub cb_Abbrechen_Click()
    Me.bAbbruch = True
    Call UserForm_Terminate
End Sub

Private Sub UserForm_Terminate()
    Unload Me
End Sub
Attribute VB_Name = "UF_Email"
Attribute VB_Base = "0{8DCB91CA-6134-4EE2-B4BE-2A422AFA44B8}{C9D072A8-5700-4679-85B5-920970C3E00E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cb_Email_erzeugen_Click()
    Dim byt_Vorlage As Byte
    Dim h As Integer
    Dim i As Integer
    Dim j As Integer
    Dim r As Integer
    Dim S As Integer
    Dim t As Integer
    Dim bln_Auswahl As Boolean
    Dim Tabellen As Dictionary
    Dim Anhang() As String
    
    If ob_Vorlage1 Then
        byt_Vorlage = 1
    ElseIf ob_Vorlage2 Then
        byt_Vorlage = 2
    End If
    
    bln_Auswahl = False
    'Auf Auswahl pr|fffd|fen
    For i = 0 To Me.lbx_Monatsauswahl.ListCount - 1
        If (Me.lbx_Monatsauswahl.Selected(i) = True) Then
            bln_Auswahl = True
            Exit For
        End If
    Next i
    
    'Wenn keine Auswahl getroffen wurde
    If (Not bln_Auswahl) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben keinen Abrechnungsmonat ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihre Auswahl.", _
               vbInformation, _
               TOOL_HDR
        Exit Sub
    Else
        'Wenn Tabellen zum Exportieren gew|fffd|hlt wurden, dann erzeuge eine Ergebnisliste (Array)
        i = Me.lbx_Monatsauswahl.ListCount - 1
        h = 1
        j = 0
        Set Tabellen = New Dictionary
        Do While i >= 0
            'Tabellenblattindex f|fffd|llen
            If (Me.lbx_Monatsauswahl.Selected(i) = True) Then
                If (ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(h)).Cells(9, 17).Value = "") Then
                    Tabellen.Add Mdl_Workbook_Initialisierung.Erfassungsblaetter(h), Me.lbx_Monatsauswahl.List(i, 1)
                Else
                    If Mdl_Pruefungen.Exportdatei_existiert(ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(h)).Cells(9, 17).Value) <> "OK" Then
                        Tabellen.Add Mdl_Workbook_Initialisierung.Erfassungsblaetter(h), Me.lbx_Monatsauswahl.List(i, 1)
                    End If
                End If
                j = j + 1
            End If
            i = i - 1
            h = h + 1
        Loop

        If (Tabellen.count > 0) Then
            Dim bln_BewegungsdatenFehlen As Boolean
            Call Mdl_Dialogaktionen.EXPORT(Tabellen, True, bln_BewegungsdatenFehlen)
            If (bln_BewegungsdatenFehlen = True) Then
                Exit Sub
            End If
        End If
        
        S = Me.lbx_Monatsauswahl.ListCount - 1
        r = 1
        t = 0
        Do While S >= 0
            If (Me.lbx_Monatsauswahl.Selected(S) = True) Then
                ReDim Preserve Anhang(t)
                Anhang(t) = ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(r)).Cells(9, 17).Value
                t = t + 1
            End If
            S = S - 1
            r = r + 1
        Loop
        
        Me.Hide
        If byt_Vorlage = 1 Then
            Call Email_erstellen(Anhang, byt_Vorlage)
        ElseIf byt_Vorlage = 2 Then
            If (Mdl_Dialogaktionen.Dialog_Emailvorlage Is Nothing) Then Set Mdl_Dialogaktionen.Dialog_Emailvorlage = New UF_Emailvorlage
            Mdl_Dialogaktionen.Dialog_Emailvorlage.Show
            
            If (Dialog_Emailvorlage.tag = "Cancel") Then
                Tempordner_loeschen
                Exit Sub
            Else
                Call Email_erstellen(Anhang, byt_Vorlage)
            End If
        End If
    End If
End Sub

Private Sub cb_Abbrechen_Click()
    Call UserForm_Terminate
End Sub

Private Sub UserForm_Terminate()
    Unload Me
End Sub
Attribute VB_Name = "UF_Emailvorlage"
Attribute VB_Base = "0{E79A3B8E-9027-4C78-9D35-83B55E29263C}{FF2C59F8-17C7-4002-B028-EF71EC0D0225}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Activate()
    Me.txt_Betreff.Text = Worksheets("Verwaltungsdaten").Cells(1, 13).Value
    Me.txt_Vorlage.Text = Worksheets("Verwaltungsdaten").Cells(2, 13).Value
End Sub

Private Sub cb_Verwenden_Click()
    Worksheets("Verwaltungsdaten").Cells(1, 13).Value = Me.txt_Betreff.Text
    Worksheets("Verwaltungsdaten").Cells(2, 13).Value = Me.txt_Vorlage.Text
    Me.tag = ""
    Me.Hide
End Sub

Private Sub cb_Abbrechen_Click()
    Call UserForm_Terminate
End Sub

Private Sub UserForm_Terminate()
    txt_Betreff.Text = ""
    txt_Vorlage.Text = ""
    Me.tag = "Cancel"
    Me.Hide
End Sub
Attribute VB_Name = "UF_Export"
Attribute VB_Base = "0{66BF5EC1-F60B-4486-B2C6-EDF89B909264}{9DCD71F4-3171-4043-BD1B-73BB2888A5AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub lbx_Monatsauswahl_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim str_KompDateiName As String, str_DateiName As String, str_DateiTyp As String, str_Result As String
    
    If (Me.lbx_Monatsauswahl.ListIndex > -1) Then
        str_KompDateiName = Me.lbx_Monatsauswahl.Column(2, Me.lbx_Monatsauswahl.ListIndex)
        
        str_DateiName = Left(str_KompDateiName, Application.WorksheetFunction.Find(".", str_KompDateiName) - 1)
        str_DateiTyp = Right(str_KompDateiName, Len(str_KompDateiName) - Application.WorksheetFunction.Find(".", str_KompDateiName))
        
        str_Result = Application.InputBox("Bitte geben Sie einen neuen Dateinamen ein.", _
                                          TOOL_HDR, str_DateiName)
                                          
        If (str_Result = "Falsch") Then Exit Sub
        Me.lbx_Monatsauswahl.Column(2, Me.lbx_Monatsauswahl.ListIndex) = str_Result & "." & str_DateiTyp
    End If
End Sub

Private Sub cb_Export_Click()
    Dim h As Integer
    Dim i As Integer
    Dim j As Integer
    Dim bln_Auswahl As Boolean
    Dim Tabellen As Dictionary
    Dim str_Exportiert As String
    Dim str_MsgAntwort As String
    
    bln_Auswahl = False
    'Auf Auswahl pr|fffd|fen
    For i = 0 To Me.lbx_Monatsauswahl.ListCount - 1
        If (Me.lbx_Monatsauswahl.Selected(i) = True) Then
            bln_Auswahl = True
            Exit For
        End If
    Next i
    
    'Wenn keine Auswahl getroffen wurde
    If (Not bln_Auswahl) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben keinen Abrechnungsmonat ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihre Auswahl.", _
               vbInformation, _
               TOOL_HDR
        Exit Sub
    Else
        'Wenn Tabellen zum Exportieren gew|fffd|hlt wurden, dann erzeuge eine Ergebnisliste (Array)
        i = Me.lbx_Monatsauswahl.ListCount - 1
        h = 1
        j = 0
        Set Tabellen = New Dictionary
        str_Exportiert = ""
        Do While i >= 0
            'Tabellenblattindex f|fffd|llen
            If (Me.lbx_Monatsauswahl.Selected(i) = True) Then
                'Tabellename im Workbook wird an Auswahlarray |fffd|bergeben
                Tabellen.Add Mdl_Workbook_Initialisierung.Erfassungsblaetter(h), Me.lbx_Monatsauswahl.List(i, 2)
                j = j + 1
                If (ThisWorkbook.Worksheets(Mdl_Workbook_Initialisierung.Erfassungsblaetter(h)).Cells(10, 17).Value <> "") _
                Then str_Exportiert = str_Exportiert & CStr(Me.lbx_Monatsauswahl.List(i)) & " am " & vbCrLf & _
                                      vbTab & CStr(Me.lbx_Monatsauswahl.List(i, 1)) & vbCrLf & vbCrLf
            End If
            i = i - 1
            h = h + 1
        Loop
        If (str_Exportiert <> "") Then
            str_MsgAntwort = MsgBox("Hinweis: " & vbCrLf & vbCrLf & _
                                    "Nachfolgende Erfassungstabellen wurden bereits exportiert:" & vbCrLf & vbCrLf & _
                                    str_Exportiert & vbCrLf & _
                                    "Wollen Sie diese Tabellen erneut exportieren?", _
                                    vbYesNo, _
                                    TOOL_HDR)
            If (str_MsgAntwort = vbNo) Then Exit Sub
        End If
        Me.Hide
        
        'Methode Export im Modul Dialogaktionen aufrufen
        Dim bln_BewegungsdatenFehlen As Boolean
        Call Mdl_Dialogaktionen.EXPORT(Tabellen, False, bln_BewegungsdatenFehlen)
    End If
End Sub

Private Sub cb_Abbrechen_Click()
    Call UserForm_Terminate
End Sub

Private Sub UserForm_Terminate()
    Unload Me
End Sub
Attribute VB_Name = "UF_Input"
Attribute VB_Base = "0{FA2A9E55-0219-4B3F-B30E-33710899CAC3}{75A54A27-BF77-4C5F-9610-2734F4F32784}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Public bln_ist_Nachberechnung As Boolean

Private Sub UserForm_Initialize()
    Dim i As Integer
    
    'Monate anlegen
    With Me.cbx_Monat
        .Clear
        .AddItem "Januar"
        .AddItem "Februar"
        .AddItem "M|fffd|rz"
        .AddItem "April"
        .AddItem "Mai"
        .AddItem "Juni"
        .AddItem "Juli"
        .AddItem "August"
        .AddItem "September"
        .AddItem "Oktober"
        .AddItem "November"
        .AddItem "Dezember"
    End With
    
    'Jahre anlegen
    With Me.cbx_Jahr
        .Clear
        For i = 0 To 49
            .AddItem CStr(2006 + i)
        Next i
    End With
    
    'Default-Fokus auf den Auswahl-Button setzen
    Me.cb_Auswahl.SetFocus
End Sub

Private Sub cbx_Jahr_Change()
    Dim str_split() As String
    Dim str_Jahr As String
    
    'Zerlegung des max. zul|fffd|ssigen Abrechnungszeitraumes in Monat und Jahr
    str_split = VBA.Split(Mdl_Workbook_Initialisierung.MaxAbrZeitraum, " ")
    str_Jahr = Me.cbx_Jahr.Value

    If (Not bln_ist_Nachberechnung) Then
        'Pr|fffd|fung, ob das aktuell ausgew|fffd|hlte Jahr gr|fffd||fffd|er als das max. Abrechnungsjahr ist.
        If (str_Jahr >= str_split(1)) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Mit der aktuellen Version " & Mdl_Workbook_Initialisierung.APP_VERSION & " der Lohn-Vorerfassung " & _
                   "k|fffd|nnen nur noch bis zum Abrechnungsmonat " & Mdl_Workbook_Initialisierung.MaxAbrZeitraum & " Bewegungsdaten erfasst werden." & vbCrLf & vbCrLf & _
                   "F|fffd|r eine Erfassungstabelle f|fffd|r das n|fffd|chste Kalenderjahr wenden sie sich bitte an die erstellende Stelle " & _
                   "(Steuerberater oder Gehaltsabrechner) und fordern eine mit der Lohn-Vorerfassung " & Mdl_Workbook_Initialisierung.APP_VERSION_Next & _
                   " erstellte Tabelle an.", _
                   vbInformation, _
                   TOOL_HDR
        End If
    End If
End Sub

Private Sub cb_Auswahl_Click()
    Dim str_Monat As String, str_Jahr As String
    
    'Lokale Variablen initialisieren
    str_Monat = Me.cbx_Monat.Text
    str_Jahr = Me.cbx_Jahr.Text
    
    'Pr|fffd|fung, ob Auswahl getroffen wurde
    If ((str_Monat = vbNullString) Or (str_Jahr = vbNullString)) Then
        MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
               "Sie haben den Abrechnungszeitraum nicht korrekt gew|fffd|hlt" & vbCrLf & vbCrLf & VBA.Chr$(187) & _
               " Korrigieren Sie Ihre Auswahl.", _
               vbInformation, _
               TOOL_HDR
        Call UserForm_Initialize
    End If
    Me.Hide
End Sub

Private Sub cb_Abbrechen_Click()
    Me.tag = "Cancel"
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Call cb_Abbrechen_Click
End Sub

Public Sub Defaultmonat_festlegen(ByVal str_Tabelle As String, ByVal bln_ist_Nachberechnung As Boolean)
    Dim str_split() As String
    Dim i As Integer
    Dim j As Integer
    Dim str_AktDat As String
    
    Mdl_Workbook_Initialisierung.Erfassungsblaetter_laden
    
    str_AktDat = VBA.Mid(Rueckwandlung_Abrechnungsmonat(str_Tabelle), 1, 7)
    str_split = VBA.Split(str_AktDat, "/")
    
    If (Not bln_ist_Nachberechnung) Then
        If (CLng(str_split(0)) Mod 12) = 0 Then
            str_split(0) = "01"
            str_split(1) = CStr(CLng(str_split(1)) + 1)
        Else
            str_split(0) = CStr(CLng(str_split(0)) + 1)
        End If
    Else
        'Pr|fffd|fung, wie viele Tabellen zum Abrechnungsmonat existieren
        For i = 1 To UBound(Mdl_Workbook_Initialisierung.Erfassungsblaetter)
            If (InStr(Mdl_Workbook_Initialisierung.Erfassungsblaetter(i), VBA.Mid(str_Tabelle, 1, VBA.InStr(str_Tabelle, "_") - 1)) > 0) Then
                j = j + 1
            End If
        Next i
        str_split(0) = CStr(CLng(str_split(0)) - j)
        'Das Jahr hat sich ge|fffd|ndert, falls der Monat unter 0 ist
        If (str_split(0) < 0) Then
            str_split(0) = str_split(0) + 12
            str_split(1) = CStr(CLng(str_split(1)) - 1)
        End If
    End If
    
    Me.cbx_Monat.Text = VBA.Format(VBA.DateSerial(Year:=CInt(str_split(1)), Month:=CInt(str_split(0)), Day:=1), "mmmm")
    Me.cbx_Jahr.Text = VBA.Format(VBA.DateSerial(Year:=CInt(str_split(1)), Month:=CInt(str_split(0)), Day:=1), "yyyy")
End Sub
Attribute VB_Name = "UF_Lohnarten_entfernen"
Attribute VB_Base = "0{1E2BE788-A52E-437B-89FB-4F7D2D3B71E4}{728839F8-A563-4A73-A128-AE3EEB0AA6AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cb_Auswahl_Click()
   'Eingabepr|fffd|fung deaktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
   
   Call Mdl_Dialogaktionen.LA_entfernen
   
   'Eingabepr|fffd|fung aktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
End Sub

Private Sub cb_Abbrechen_Click()
    Call Mdl_Dialogaktionen.Dialog_LA_Entfernen_Abbruch
End Sub
Attribute VB_Name = "UF_Lohnarten_hinzu"
Attribute VB_Base = "0{79A15B96-330E-452A-AAB2-0924BF3C9498}{638607EB-70E9-400B-A4D9-4C4DF5E7CA51}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1


Private Sub UserForm_Initialize()
    Dim i As Byte
    
    Me.lbx_Lohnartenauswahl.Enabled = True
    Me.lbx_Lohnartenauswahl.BackColor = &H80000005
    Me.tb_NummerNetto.BackColor = &H8000000F
    Me.tb_NummerNetto.Enabled = False
    Me.tb_NameNetto.BackColor = &H8000000F
    Me.tb_NameNetto.Enabled = False
    Me.tb_NameStatistikLA.Enabled = False
    Me.tb_NameStatistikLA.BackColor = &H8000000F
    Me.cbx_BS_Bezeichnung.Enabled = False
    Me.cbx_BS_Bezeichnung.BackColor = &H8000000F
    
    If (Verwaltungsdaten.Cells(5, 2).Value = "LODAS") Then
        Me.ob_StatistikHinzu.Enabled = True
        Me.cbx_BS_Bezeichnung.Clear
        For i = 69 To 78 Step 1
            With Bearbeitungsschluessel
            Me.cbx_BS_Bezeichnung.AddItem .Cells(i, 1).Value & " - " & .Cells(i, 2)
            End With
        Next i
    Else
        Me.ob_StatistikHinzu.Enabled = False
    End If
    
    Me.lbx_Lohnartenauswahl.SetFocus
End Sub

Private Sub ob_LAHinzu_Click()
    Me.lbx_Lohnartenauswahl.Enabled = True
    Me.lbx_Lohnartenauswahl.BackColor = &H80000005
    Me.tb_NummerNetto.BackColor = &H8000000F
    Me.tb_NummerNetto.Enabled = False
    Me.tb_NameNetto.BackColor = &H8000000F
    Me.tb_NameNetto.Enabled = False
    Me.tb_NameStatistikLA.Enabled = False
    Me.tb_NameStatistikLA.BackColor = &H8000000F
    Me.cbx_BS_Bezeichnung.Enabled = False
    Me.cbx_BS_Bezeichnung.BackColor = &H8000000F
End Sub

Private Sub ob_NettoHinzu_Click()
    Me.lbx_Lohnartenauswahl.Enabled = False
    Me.lbx_Lohnartenauswahl.BackColor = &H8000000F
    Me.tb_NummerNetto.BackColor = &H80000005
    Me.tb_NummerNetto.Enabled = True
    Me.tb_NameNetto.BackColor = &H80000005
    Me.tb_NameNetto.Enabled = True
    Me.tb_NameStatistikLA.Enabled = False
    Me.tb_NameStatistikLA.BackColor = &H8000000F
    Me.cbx_BS_Bezeichnung.Enabled = False
    Me.cbx_BS_Bezeichnung.BackColor = &H8000000F
    
    'Hinweismeldung ausgeben
    MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
           "Bitte beachten Sie, dass der hinzugef|fffd|gte Netto Be-/Abzug auch in den Mandantendaten des entsprechenden Personalwirtschaftssytems vorhanden sein muss, bevor diese Bewegungsdaten importiert werden." & vbCrLf & _
           "Informieren Sie dazu Ihren Steuerberater, oder die lohnabrechnende Abteilung.", _
           vbInformation, _
           TOOL_HDR
End Sub

Private Sub ob_StatistikHinzu_Click()
    Me.lbx_Lohnartenauswahl.Enabled = False
    Me.lbx_Lohnartenauswahl.BackColor = &H8000000F
    Me.tb_NummerNetto.BackColor = &H8000000F
    Me.tb_NummerNetto.Enabled = False
    Me.tb_NameNetto.BackColor = &H8000000F
    Me.tb_NameNetto.Enabled = False
    Me.tb_NameStatistikLA.Enabled = True
    Me.tb_NameStatistikLA.BackColor = &H80000005
    Me.cbx_BS_Bezeichnung.Enabled = True
    Me.cbx_BS_Bezeichnung.BackColor = &H80000005
End Sub

Private Sub cb_Auswahl_Click()
    Dim i As Integer
    Dim j As Integer
    Dim minNettoNummer As Long
    Dim maxNettoNummer As Long
    Dim int_FSp As Integer
    Dim Antwort As String
    
    '********Standard-Lohnarten****************************************************************************
    If Me.ob_LAHinzu.Value Then
        'Pr|fffd|fen, ab Anzahl der freien Spalten in Excel noch f|fffd|r gew|fffd|hlte LA ausreicht
        'Maximal d|fffd|rfen 200 LA angelegt werden
        j = 0
        For i = 0 To Me.lbx_Lohnartenauswahl.ListCount - 1
            If (Dialog_LA_hinzu.lbx_Lohnartenauswahl.Selected(i) = True) Then
                If (Mdl_Dialogaktionen.Dialog_LA_hinzu.lbx_Lohnartenauswahl.List(i) <> "") Then
                    j = j + 1
                End If
            End If
        Next i
        int_FSp = 200 - (Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE - 17)
        If (int_FSp < j) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                "Mit Ihrer Auswahl an Lohnarten wurde die maximale Anzahl von Spalten in Excel |fffd|berschritten. Sie k|fffd|nnen maximal" & vbCrLf & _
                "200 Lohnarten der aktuellen Vorerfassungstabelle zuordnen. Derzeit stehen Ihnen noch " & CStr(int_FSp) & " freie Spalten zur Verf|fffd|gung." _
                & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                " W|fffd|hlen Sie einige Lohnarten im Auswahldialog ab oder l|fffd|schen Sie unn|fffd|tige Lohnarten in der aktuellen Vorerfassungstabelle.", _
                vbInformation, _
                TOOL_HDR
            Exit Sub
        End If
        'Methode zum Hinzuf|fffd|gen aufrufen und dabei Eingabepr|fffd|fung umgehen
        Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
        Call Mdl_Dialogaktionen.Neue_LA_hinzuf|fffd|gen
        Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
        
    '****************Netto-be/-abz|fffd|ge**********************************************************************
    ElseIf Me.ob_NettoHinzu.Value Then
        If Me.tb_NummerNetto.Text = "" Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Es wurde keine Nummer f|fffd|r den Nettobe- bzw. abzug eingegeben." _
                   & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Geben Sie die Nummer des Nettobe- bzw. abzugs ein, den Sie hinzuf|fffd|gen wollen.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
        ElseIf Not Mdl_Pruefungen.Pr|fffd|fung_Nur_Ziffern(VBA.Trim(Me.tb_NummerNetto.Text)) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Ung|fffd|ltige Eingabe." _
                   & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " Geben Sie im Feld 'Nummer' die Nummer des Nettobe- bzw. abzugs ein, den Sie hinzuf|fffd|gen wollen.", _
                   vbInformation, _
                   TOOL_HDR
            Exit Sub
        Else
            If Verwaltungsdaten.Cells(5, 2) = "LODAS" Then
                i = 4
                minNettoNummer = 1
                maxNettoNummer = 9999
            Else
                i = 4
                minNettoNummer = 9000
                maxNettoNummer = 9999
            End If
            If Len(Me.tb_NummerNetto.Text) > i Then
                MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Ung|fffd|ltige Eingabe." _
                       & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                       " Geben Sie im Feld 'Nummer' die Nummer des Nettobe- bzw. abzugs ein, den Sie hinzuf|fffd|gen wollen." _
                       & vbCrLf & "Der Wertebereich f|fffd|r die Nummer einer Nettolohnart liegt zwischen " & minNettoNummer & " und " & maxNettoNummer & ".", _
                       vbInformation, _
                       TOOL_HDR
                Exit Sub
            End If
            If (Not Verwaltungsdaten.Cells(5, 2) = "LODAS") And (CLng(Me.tb_NummerNetto.Text) < 9000) Then
                MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Ung|fffd|ltige Eingabe." _
                       & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                       " Geben Sie im Feld 'Nummer' die Nummer des Nettobe- bzw. abzugs ein, den Sie hinzuf|fffd|gen wollen." _
                       & vbCrLf & "Der Wertebereich f|fffd|r die Nummer einer Nettolohnart liegt zwischen " & minNettoNummer & " und " & maxNettoNummer & ".", _
                       vbInformation, _
                       TOOL_HDR
                Exit Sub
            End If
        End If
        If (Not Verwaltungsdaten.Cells(5, 2) = "LODAS") Then
            If (Mdl_Dialogaktionen.ist_LA_Nummer_vorhanden(Me.tb_NummerNetto.Text)) Then
                MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                       "Ung|fffd|ltige Eingabe. Die Lohnartennummer existiert bereits in der Erfassungstabelle." _
                       & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                       " Geben Sie im Feld 'Nummer' die Nummer des Nettobe- bzw. abzugs ein, den Sie hinzuf|fffd|gen wollen.", _
                       vbInformation, _
                       TOOL_HDR
                Exit Sub
            End If
        End If
        'Methode zum Hinzuf|fffd|gen aufrufen und dabei Eingabepr|fffd|fung umgehen
        Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
        Call Mdl_Dialogaktionen.Neue_NettoLA_hinzuf|fffd|gen
        Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
    
    '****************Statistiklohnarten********************************************************************
    Else
        If Me.cbx_BS_Bezeichnung.Text = "" Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                   "Es wurde kein Bearbeitungsschl|fffd|ssel f|fffd|r die Statistiklohnart ausgew|fffd|hlt." _
                   & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                   " W|fffd|hlen Sie einen Bearbeitungsschl|fffd|ssel f|fffd|r die Statistiklohnart aus.", _
                   vbInformation, _
                   TOOL_HDR
            Me.cbx_BS_Bezeichnung.SetFocus
            Exit Sub
        End If
        If Me.tb_NameStatistikLA.Text = "" Then
            Me.tb_NameStatistikLA.Text = Bearbeitungsschluessel.Cells(CInt(VBA.Left(Me.cbx_BS_Bezeichnung.Text, 2)) - 1, 2).Value
            Antwort = MsgBox("Hinweis:" & vbCrLf & vbCrLf & _
                      "Es wurde kein Name f|fffd|r die Statistiklohnart eingegeben." & vbCrLf & _
                      "Soll die Bezeichnung des Bearbeitungsschl|fffd|ssels eingesetzt werden?", _
                      vbYesNo + vbQuestion, _
                      TOOL_HDR)
            If Antwort = vbNo Then
                Me.tb_NameStatistikLA.Text = ""
                Me.tb_NameStatistikLA.SetFocus
                Exit Sub
            End If
        End If
        If (Mdl_Dialogaktionen.ist_LA_Name_vorhanden(Me.tb_NameStatistikLA.Text)) Then
            MsgBox "Hinweis:" & vbCrLf & vbCrLf & _
                    "Ung|fffd|ltige Eingabe. Die Statistiklohnart existiert bereits in der Erfassungstabelle." _
                    & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                    " Geben Sie einen anderen Namen f|fffd|r die gew|fffd|nschte Statistiklohnart an.", _
                    vbInformation, _
                    TOOL_HDR
            Me.tb_NameStatistikLA.SetFocus
            Exit Sub
        Else
            'Methode zum Hinzuf|fffd|gen aufrufen und dabei Eingabepr|fffd|fung umgehen
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
            Call Mdl_Dialogaktionen.Neue_StatistikLA_hinzufuegen
            Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
        End If
    End If
End Sub

Private Sub cb_Abbrechen_Click()
    Call Mdl_Dialogaktionen.Dialog_LA_Hinzu_Abbruch
End Sub
Attribute VB_Name = "UF_Lohnarten_sortieren"
Attribute VB_Base = "0{DA1A80A9-BE25-4EBF-A9D0-C12352D0F8B7}{4ADD207C-3900-42EF-8794-20351FEFF365}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Private Sub UserForm_Initialize()
      'Notwendig f|fffd|r Office 2010 Anwender, sonst l|fffd|uft LVE beim zweiten Klick auf Neu auf
      'UF_Start in einen Fehler und Excel muss beendet werden. MS-Office-Bug:
      'http://social.msdn.microsoft.com/Forums/office/en-US/3f51cfdf-2cb2-4860-9b64-669d7d87e0a5/listbox-list-property-error-on-machines-that-have-excel-2010-installed?forum=exceldev
      'BoundColumn = 0 nur Workaround. Eigentlicher Fehler liegt in fm20.dll von Office 2010.
      lbx_Lohnarten.BoundColumn = 0
End Sub

Private Sub cb_Up_Click()
    Dim i As Integer
    Dim int_Spalte As Integer
    Dim byt_Richtung As Byte

    byt_Richtung = 1
    
    For i = 0 To Me.lbx_Lohnarten.ListCount - 1
        If (Me.lbx_Lohnarten.Selected(i) = True) Then
            Exit For
        End If
    Next i
    int_Spalte = i + 18
    
    If i < Me.lbx_Lohnarten.ListCount Then
        int_Spalte = i + 18
    Else
        Exit Sub
    End If

    If int_Spalte > 18 Then
        Call Mdl_Dialogaktionen.LA_sortieren(int_Spalte, byt_Richtung)
    Else
        Exit Sub
    End If
End Sub

Private Sub cb_Down_Click()
    Dim i As Integer
    Dim int_Spalte As Integer
    Dim byt_Richtung As Byte

    byt_Richtung = 2
    
    For i = 0 To Me.lbx_Lohnarten.ListCount - 1
        If (Me.lbx_Lohnarten.Selected(i) = True) Then
            Exit For
        End If
    Next i
    int_Spalte = i + 18

    If int_Spalte < Mdl_Fuellanweisungen.liefere_letzte_Spalte_LVE Then
        Call Mdl_Dialogaktionen.LA_sortieren(int_Spalte, byt_Richtung)
    Else
        Exit Sub
    End If
End Sub

Private Sub cb_Auswahl_Click()
    Application.DisplayAlerts = False 'Hinweismeldung aus
    Worksheets("LA_in_Tabelle (2)").DELETE
    Worksheets(Mdl_Workbook_Initialisierung.objTabellenblatt.name & " (2)").DELETE
    Application.DisplayAlerts = True 'Hinweismeldung an

    'Formatierungsanweisungen
    Call Mdl_Formatierungsanweisungen.LA_Spalten_formatieren
    
    'Monat und erste Zelle aktivieren
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_EZ, int_ES).Select
    
    Me.Hide
End Sub

Private Sub cb_Abbrechen_Click()
    Dim str_Temp As String

    str_Temp = Mdl_Workbook_Initialisierung.objTabellenblatt.name
    Set Mdl_Workbook_Initialisierung.objTabellenblatt = ThisWorkbook.Worksheets(str_Temp & " (2)")
    Mdl_Workbook_Initialisierung.objTabellenblatt.Activate
    
    Application.DisplayAlerts = False 'Hinweismeldung aus
    Worksheets("LA_in_Tabelle").DELETE
    Worksheets(str_Temp).DELETE
    Application.DisplayAlerts = True 'Hinweismeldung an
    
    Worksheets("LA_in_Tabelle (2)").name = "LA_in_Tabelle"
    Mdl_Workbook_Initialisierung.objTabellenblatt.name = str_Temp
    
    'erstes Bewegungsdatenfeld aktiv setzen
    Mdl_Workbook_Initialisierung.objTabellenblatt.Cells(int_EZ, int_ES).Select
    
    Me.Hide
End Sub
Attribute VB_Name = "UF_Mandanteninformationen"
Attribute VB_Base = "0{4C67313B-3D6F-4A7A-9345-45C87D6CCEE6}{BBE85D1B-C34A-437A-8321-ED491B06DF6D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Terminate()
    Unload Me
End Sub
Attribute VB_Name = "UF_Mitarbeiter_entfernen"
Attribute VB_Base = "0{FCCD71D9-8194-4E2E-BD40-0046F26A04C8}{04B85047-521B-4BF0-88DA-D5DC8DA4CB80}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Private Sub cb_Auswahl_Click()
    'Eingabepr|fffd|fung deaktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
   
   Call Mdl_Dialogaktionen.MA_entfernen
   
   'Eingabepr|fffd|fung aktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
   
   Unload Me
End Sub

Private Sub cb_Abbrechen_Click()
    Unload Me
End Sub
Attribute VB_Name = "UF_Mitarbeiter_kopieren"
Attribute VB_Base = "0{BB06805D-7ED1-4066-8A11-9BA5D235CD0E}{6DC03CC8-A5FD-403F-BC77-8C1A4CFE30D1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Private Sub cb_Auswahl_Click()
    'Eingabepr|fffd|fung deaktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = True
   
   Call Mdl_Dialogaktionen.MA_kopieren
   
   'Eingabepr|fffd|fung aktivieren
   Mdl_Workbook_Initialisierung.blnEingabePr|fffd|fenAus = False
   
   Unload Me
End Sub

Private Sub cb_Abbrechen_Click()
    Unload Me
End Sub
Attribute VB_Name = "UF_Mitarbeiter_sortieren"
Attribute VB_Base = "0{B328F4EA-D37D-48E8-9005-97721BD971E0}{74601170-8C2E-469A-987F-C5722DBF11A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cb_Auswahl_Click()
    Dim str1 As String, str2 As String
    
    If Me.ob_PersNr.Value Then
        str1 = "PersNr"
    Else
        If Me.ob_Nachname.Value Then
            str1 = "Name"
        Else
            str1 = "Kostenstelle"
        End If
    End If
    
    If ob_aufsteigend.Value Then
        str2 = "aufsteigend"
    Else
        str2 = "absteigend"
    End If
    
    Call Mdl_Dialogaktionen.Mitarbeiter_sortieren(str1, str2)
End Sub

Private Sub cb_Abbrechen_Click()
    Call Mdl_Dialogaktionen.Dialog_MA_sortieren_Abbruch
End Sub
Attribute VB_Name = "Verwaltungsdaten"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_AlleLA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "tbl_Erststart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master48"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master57"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master61"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master62"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master63"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master65"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Master9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_Spaltenzuordnung"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tbl_UebernommenMitarbeiter"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "uf_Logo"
Attribute VB_Base = "0{40303B69-FEBF-45BB-A881-A5D06E4D337F}{7D0D110D-B6BC-48BC-889D-F06AE124F52A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cb_Waehlen_Click()
    Me.tbx_Datei_waehlen = Mdl_Dialogaktionen.Datei_waehlen
End Sub

Private Sub cbx_Wiederherstellen_Change()
    If cbx_Wiederherstellen Then
        Me.tbx_Datei_waehlen.Value = ""
    End If
End Sub

Private Sub cb_Einfuegen_Click()
    If cbx_Wiederherstellen Then
        Call Mdl_Formatierungsanweisungen.Datev_Logo_einfuegen
    Else
        If Me.tbx_Datei_waehlen.Value = "" Then
            MsgBox "Es wurde keine Datei ausgew|fffd|hlt." & vbCrLf & vbCrLf & VBA.Chr$(187) & _
                    " Bitte w|fffd|hlen Sie ein Bilddatei.", _
                    vbExclamation
            Exit Sub
        End If
        
        Call Mdl_Formatierungsanweisungen.Logo_anpassen(Me.tbx_Datei_waehlen)
    End If
    
    Call Mdl_Dialogaktionen.Dialogwechsel(Logo, kein_Dialog)
End Sub

Private Sub cb_Abbrechen_Click()
    Call Mdl_Dialogaktionen.Dialogwechsel(Logo, kein_Dialog)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
    cb_Abbrechen_Click
End Sub
Attribute VB_Name = "ws_Logo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' v($z+l
' z{Zm

INQUEST-PP=macro
