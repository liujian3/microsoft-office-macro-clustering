Attribute VB_Name = "EventClassModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents App As Word.Application
Attribute App.VB_VarHelpID = -1

Private DEFAULT_NAME As String

Public Sub App_DefaultName(defaultName As String)
    DEFAULT_NAME = defaultName
End Sub

Private Sub App_DocumentBeforeSave _
 (ByVal Doc As Document, _
 SaveAsUI As Boolean, _
 Cancel As Boolean)

 Dim intResponse As Integer
 Dim sNameParts() As String
 Dim sDocName As String

 sNameParts = Split(ActiveDocument.Name, ".")
 sDocName = sNameParts(0)
    
 With Dialogs(wdDialogFileSaveAs)
     .Format = wdFormatXMLDocument
     .Name = "C:" & DEFAULT_NAME
'     .Name = "C:" & sDocName
'     .Name = Environ("userprofile") & "\" & sDocName
     .Show
 End With
    
 Cancel = True
 
End Sub




Attribute VB_Name = "NewMacros"
Option Explicit

Dim iDDEKanal As Long
Dim SOFTWARE_VERSION As String
Dim SOFTWARE_REVISION As String
Dim GERAET_NAME As String
Dim bDDEAktiv As Boolean

Dim sModulAlt As String, sModulNeu As String
Dim sBlockAlt As String, sBlockNeu As String
Dim sBlockAltVorPunkt As String, sBlockAltNachPunkt As String
Dim sBlockNeuVorPunkt As String, sBlockNeuNachPunkt As String
Dim bErsteZeile As Boolean
Dim X As New EventClassModule

Dim iNummer As Integer


Sub ZeileVerarbeiten(sZeile As String)

    Dim iPos As Integer
    Dim sParameter As String, sInhalt As String

    If bErsteZeile Then
        bErsteZeile = False
        ' Name des Datensatzes als Titel setzen, dann steht es auch in der Kopfzeile
        ActiveDocument.BuiltInDocumentProperties(1) = sZeile
        Exit Sub
    End If
    
    sModulAlt = sModulNeu
    sBlockAlt = sBlockNeu
    sBlockAltVorPunkt = sBlockNeuVorPunkt
    sBlockAltNachPunkt = sBlockNeuNachPunkt
    
    'sZeile auseinander nehmen (Trennzeichen ist Semikolon)
    'aufbau: modul;block[.block2.block3...];parameter;inhalt
    iPos = InStr(1, sZeile, ";", vbTextCompare)
    sModulNeu = Mid(sZeile, 1, iPos - 1)
    sZeile = Mid(sZeile, iPos + 1, Len(sZeile))
    iPos = InStr(1, sZeile, ";", vbTextCompare)
    sBlockNeu = Mid(sZeile, 1, iPos - 1)
    sZeile = Mid(sZeile, iPos + 1, Len(sZeile))
    iPos = InStr(1, sZeile, ";", vbTextCompare)
    sParameter = Mid(sZeile, 1, iPos - 1)
    sInhalt = Mid(sZeile, iPos + 1, Len(sZeile))
    ' jetzt noch innerhalb des Blockes: Hauptmodul (vorm Punkt) und untergeordnetes Modul
    ' (nach Punkt) trennen
    iPos = InStr(1, sBlockNeu, ".", vbTextCompare)
    If iPos <> 0 Then
        sBlockNeuVorPunkt = Mid(sBlockNeu, 1, iPos - 1)
        sBlockNeuNachPunkt = Mid(sBlockNeu, iPos + 1, Len(sBlockNeu))
    Else
        sBlockNeuVorPunkt = sBlockNeu
        sBlockNeuNachPunkt = ""
    End If
    
    'Neues Modul?
    If (sModulAlt <> sModulNeu) Then
        'wenn es nicht das erste Modul ist: Seitenwechsel
        If sModulAlt <> "" Then
            Selection.InsertBreak Type:=wdPageBreak
        End If
        Selection.TypeText (sModulNeu)
        Selection.Style = ActiveDocument.Styles("Modul")
        Selection.TypeParagraph
    End If
    'Neuer Block?
    If (sModulAlt <> sModulNeu) Or (sBlockAlt <> sBlockNeu) Then
        Selection.TypeParagraph
        ' Wenn innerhalb des Blocks ein Punkt enthalten ist: Hat sich der Text vorm Punkt
        ' auch ge|fffd|ndert? Dann ist es ein neuer Block auf der obersten Ebene. Gleiches gilt,
        ' wenn das Modul sich ge|fffd|ndert hat
        If (sModulAlt <> sModulNeu) Or (sBlockAltVorPunkt <> sBlockNeuVorPunkt) Then
            Selection.TypeParagraph
            Selection.TypeText (sBlockNeuVorPunkt)
            Selection.Style = ActiveDocument.Styles("Parameterblock")
            ' wenn der neue Block auf oberster Ebene direkt mit einem Unter-Block anf|fffd|ngt,
            ' noch den Unterblock-Eintrag erg|fffd|nzen
            If sBlockNeuNachPunkt <> "" Then
                Selection.TypeParagraph
                Selection.TypeText (sBlockNeuNachPunkt)
                Selection.Style = ActiveDocument.Styles("Parameterblock2")
            End If
        Else
            ' normalerweise ist das dann hier ein Unter-Block. Ausnahme: Der |fffd|bergeordnete
            ' Block geht nach einem eingeschobenen Unterblock wieder ohne Unterblock weiter
            ' (klingt abartig, gibt es aber!)
            If sBlockNeuNachPunkt = "" Then
                Selection.TypeParagraph
                Selection.TypeText (sBlockNeuVorPunkt)
                Selection.Style = ActiveDocument.Styles("Parameterblock")
            Else
                Selection.TypeText (sBlockNeuNachPunkt)
                Selection.Style = ActiveDocument.Styles("Parameterblock2")
            End If
        End If
        Selection.TypeParagraph
    End If
    'in jedem Fall: Parameter und Inhalt
    Selection.TypeText (sParameter + vbTab + sInhalt)
    Selection.TypeParagraph
End Sub


Sub DatenAnzeigen()

    Dim iDatei As Integer, iPos As Integer
    Dim sZeile As String, sGelesen As String, sDruckdatei As String
    Dim sHauptversion As String
            
    Set X.App = Word.Application

    ActiveWindow.View.ReadingLayout = False

    DDEVerbindungAufbauen
    
    'Office 97 wird nicht mehr unterst|fffd|tzt - Version muss mindestens 9.x sein
    sHauptversion = Application.Version
    iPos = InStr(1, sHauptversion, ".", vbTextCompare)
    If iPos <> 0 Then
      sHauptversion = Mid(sHauptversion, 1, iPos - 1)
    End If
    If sHauptversion <= 8 Then
        MsgBox "|fffd|lterere Word-Versionen als Office 2000 werden nicht unterst|fffd|tzt!", vbCritical
        Exit Sub
    End If
    
    iNummer = 1
    sModulNeu = ""
    sBlockNeu = ""
    sBlockNeuVorPunkt = ""
    sBlockNeuNachPunkt = ""
    sGelesen = ""
    bErsteZeile = True
        
    ' zu verarbeitende Datei hei|fffd|t immer druck.txt und liegt Temp-Verzeichnis
    Dim FSO As New FileSystemObject
    Dim Path As String
    
    Path = FSO.GetSpecialFolder(2)
    
    sDruckdatei = Path & "\druck.txt"
    
    iDatei = FreeFile
    Open sDruckdatei For Input As #iDatei
    
    ' Input-Anweisung geht nicht, weil nach Komma abgeschnitten
    ' wird - Komma ist aber Dezimaltrenner. Also wohl oder |fffd|bel
    ' die Zeilen selbst auseinander nehmen. Da man nicht abfragen kann,
    ' wie viele Zeichen noch in der Datei drin sind, zeichenweise lesen.
    Do While Not EOF(iDatei)
        sGelesen = Input(1, #iDatei)
        Do While (sGelesen <> vbCr) And (sGelesen <> vbLf)
            sZeile = sZeile + sGelesen
            sGelesen = Input(1, #iDatei)
        Loop
        If sZeile <> "" Then
            ZeileVerarbeiten sZeile
            sZeile = ""
        End If
    Loop
    ' evtl. noch den Rest der letzten Zeile verarbeiten
    If (sGelesen <> "") And (sGelesen <> vbCr) And (sGelesen <> vbLf) Then
        ZeileVerarbeiten sGelesen
    End If
    
    Close iDatei
    
    AnAnfangGehen
    DDEVerbindungSchliessen
    
End Sub





'********************************************************************************


'Hauptfunktion
Sub DatenHolen()

    Set X.App = Word.Application

    ActiveWindow.View.ReadingLayout = False

    DDEVerbindungAufbauen
    AlleTextmarkenAnfragen
    BesondereFelderFuellen
    
    'Variabler Teil
'    VariableTabelleErstellen (UMWERTUNG_1)
'    VariableTabelleErstellen (UMWERTUNG_2)
'    VariableTabelleErstellen (GASBESCHAFFENHEIT)
'    VariableTabelleErstellen (ARCHIVIERUNG)
    
    Dim fnr As String
    Dim FABRIK_NR As String
    
    fnr = InhaltAbfragen("BASISSYSTEM,ALLGEMEIN.FABRIKNR")
    If fnr <> "" Then
        FABRIK_NR = GERAET_NAME & "_" & fnr
    Else
        FABRIK_NR = GERAET_NAME
    End If

    X.App_DefaultName (FABRIK_NR)
    
    AnAnfangGehen
    DDEVerbindungSchliessen
    
End Sub

'stellt eine DDE-Verbindung zu GNETPARA.EXE her
Sub DDEVerbindungAufbauen()
    iDDEKanal = DDEInitiate("GNETPARA", "DDE_DRUCK")
    bDDEAktiv = True
End Sub


'beendet GNETPARA und schlie|fffd|t die Verbindung
Sub DDEVerbindungSchliessen()

    Dim sZeit As String
    Dim Start As Long
    
    If bDDEAktiv Then
        MakroSenden "PROGRAMM_SCHLIESSEN"
        DoEvents
        'Warten, bis GNetPara sich beendet hat (5 Sekunden)...
        Start = Timer   ' Anfangszeit setzen.
        Do While Timer < Start + 5
            DoEvents
        Loop
        'DDETerminate iDDEKanal
        DDETerminateAll
        bDDEAktiv = False
    End If
    
End Sub


'schickt ein Makro an GNETPARA
Sub MakroSenden(ByVal sMakro As String)
    
    'eckige Klammern um den Makrotext setzen
    sMakro = "[" + sMakro + "]"
    
    'Makro senden
    DDEExecute iDDEKanal, sMakro
    
End Sub


'geht alle definierten Textmarken durch und schickt je nach Name und aktuellem Inhalt der
'Textmarke Makros an GNETPARA
Sub AlleTextmarkenAnfragen()

    Dim tm As Bookmark
    Dim sName, sInhalt, sMakro, sErg, sBefehl As String
    Dim iPos As Integer
        
    SOFTWARE_VERSION = ""
    SOFTWARE_REVISION = ""
    GERAET_NAME = ""
'    KZAHL_MODUS = ""
    For Each tm In ThisDocument.Bookmarks
        If (InStr(1, tm.Name, "BEZEICHNUNG", vbTextCompare) = 1) Or _
           (InStr(1, tm.Name, "LANGEBEZEICHNUNG", vbTextCompare) = 1) Or _
           (InStr(1, tm.Name, "INHALT", vbTextCompare) = 1) Then
           tm.Select
           'Aufbau sName: (LANGE)BEZEICHNUNG_<freier Text> oder INHALT_<freier Text>
           sName = tm.Name
           iPos = InStr(1, sName, "_", vbTextCompare)
           If iPos <> 0 Then
                sMakro = "GET" + Left(sName, iPos - 1) + "("
                'Aufbau sInhalt: <Modulname>,<Parametername>
                sInhalt = Selection.Text
                sMakro = sMakro + sInhalt + ")"
                'Befehl merken: wird incl. Ergebnis zur|fffd|ckgemeldet
                sBefehl = "GET" + Left(sName, iPos - 1) + "," + sInhalt + ","
                MakroSenden sMakro
                DoEvents
                sErg = ErgebnisAuswerten(sBefehl)
                
                'Sonderfall: Parameter unbekannt. In Abh|fffd|ngigkeit der Textmarke
                'wird dieser Fall unterschiedlich behandelt
                If sErg = "<UNBEKANNTER PARAMETER>" Then
                    'E/A-Kan|fffd|le m|fffd|ssen nicht unbedingt da sein
                    If (sName = "INHALT_101") Or (sName = "INHALT_103") Or _
                       (sName = "INHALT_105") Or (sName = "INHALT_107") Or _
                       (sName = "INHALT_109") Or (sName = "INHALT_111") Or _
                       (sName = "INHALT_113") Or (sName = "INHALT_115") Or _
                       (sName = "INHALT_117") Or (sName = "INHALT_119") Or _
                       (sName = "INHALT_121") Or (sName = "INHALT_123") Or _
                       (sName = "INHALT_37") Or (sName = "INHALT_38") Or _
                       (sName = "INHALT_43") Then
                        sErg = ""
                    End If
                    ' EZW: Arbeitsweise fest angeben, kommt nicht aus den Parametern
                    If (sName = "INHALT_36") Then
                        sErg = InhaltAbfragen("BASISSYSTEM,EAKANAL_1_0.MAXKOMMFEHLER")
                        If sErg <> "<UNBEKANNTER PARAMETER>" Then
                            sErg = "C1-Z|fffd|hlwerk"
                        End If
                    End If
                End If
                Selection.Text = sErg
                'Sonderf|fffd|lle: bestimmte Infos werden sp|fffd|ter noch ben|fffd|tigt;
                'in den entsprechenden globalen Variablen merken
                If sName = "INHALT_VERSION" Then
                    SOFTWARE_VERSION = sErg
                End If
                If sName = "INHALT_REVISION" Then
                    SOFTWARE_REVISION = sErg
                End If
                If sName = "INHALT_25" Then
                  '  KZAHL_MODUS = sErg
                End If
                If sName = "INHALT_88" Then
                  '  GERAET_NAME = sErg
                End If
           End If
        End If
    Next tm

End Sub



'Wird nach Senden eines Makros aufgerufen, um per Request die Ergebnisse abzufragen
Function ErgebnisAuswerten(ByVal sBefehl As String) As String

    Dim sErg As String
    
    ErgebnisAuswerten = ""
    sErg = DDERequest(iDDEKanal, "Druckinhalt")
    
    If (sErg <> "") Then
        'Aufbau sErg: <Befehl>,<Modul>,<Parameter>,<Ergebnis>
        'Aufbau sBefehl: <Befehl>,<Modul>,<Parameter>,
        If InStr(1, sErg, sBefehl, vbTextCompare) = 1 Then
            sErg = Right(sErg, Len(sErg) - Len(sBefehl))
            'am Ende steht immer noch einmal #13, deshalb ein Zeichen mehr abschneiden
            ErgebnisAuswerten = Left(sErg, Len(sErg) - 1)
        End If
    End If

End Function


'Geht zum Start des Dokuments und hebt evtl. Selektionen auf; wird am Ende des
'Drucks verwendet. Au|fffd|erdem Kopf-/Fusszeilen-Ausschnitt schlie|fffd|en
Sub AnAnfangGehen()

'    ThisDocument.GoTo(gotoLine, wdGoToAbsolute, 1).Select
    If ActiveWindow.Panes.Count > 1 Then
        ActiveWindow.ActivePane.Close
    End If

End Sub


'Sonderbehandlungen nach Abruf der normalen Textmarken im Standard-Verfahren
Sub BesondereFelderFuellen()

    Dim sPruefsumme As String, sErg As String
    Dim GeneralpollingAnzeigen As Boolean
    Dim sTest1, sTest2 As String

    'Software-Version m|fffd|sste nach F|fffd|llen der Textmarken in globaler Variablen stehen;
    'Pr|fffd|fsumme anhand der Software-Version ermitteln
    sPruefsumme = ""
    'Z0 und Z1 haben immer die gleiche Pr|fffd|fsumme
    If ((SOFTWARE_VERSION = "2.00") And (GERAET_NAME = "gas-net Z0")) Or ((SOFTWARE_VERSION = "3.00") And (GERAET_NAME = "gas-net Z1")) Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "AE43BF9E"
        End If
    End If
    If ((SOFTWARE_VERSION = "2.01") And (GERAET_NAME = "gas-net Z0")) Or ((SOFTWARE_VERSION = "3.01") And (GERAET_NAME = "gas-net Z1")) Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "82BB0F34"
        End If
    End If
    'Z0+
    If (SOFTWARE_VERSION = "1.00") And (GERAET_NAME = "gas-net Z0+") Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "2E4B9882"
        End If
    End If
    If (SOFTWARE_VERSION = "1.01") And (GERAET_NAME = "gas-net Z0+") Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "9EE6934A"
        End If
    End If
    'Z1+
    If (SOFTWARE_VERSION = "1.00") And (GERAET_NAME = "gas-net Z1+") Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "66AF0BF4"
        End If
    End If
    If (SOFTWARE_VERSION = "1.01") And (GERAET_NAME = "gas-net Z1+") Then
        If (SOFTWARE_REVISION = "a") Then
            sPruefsumme = "B1C6D182"
        End If
    End If
    
    'Pr|fffd|fsumme eintragen
    ThisDocument.Bookmarks("TM_PRUEFSUMME").Select
    Selection.Text = sPruefsumme
    
    'Zweite Schiene l|fffd|schen, wenn Modul nicht vorhanden oder abgeschaltet
    sErg = InhaltAbfragen("E-MU2,ALLGEMEIN.UMWERTUNG_AKTIV")
    If sErg <> "Ja" Then
        Selection.GoTo What:=wdGoToBookmark, Name:="TM_SCHIENE2"
        Selection.Delete Unit:=wdCharacter, Count:=1
    End If
    
    'Abschnitt zum Gasbeschaffenheitsmessger|fffd|t l|fffd|schen, kein Z1+ mit Online-GBH
    sTest1 = InhaltAbfragen("E-MU1,UMWERTUNG.GASBESCHAFFENHEIT.LEBENDE_GBH")
    sTest2 = InhaltAbfragen("E-MU2,UMWERTUNG.GASBESCHAFFENHEIT.LEBENDE_GBH")
    If Not ((sTest1 = "Ja") Or (sTest2 = "Ja")) Then
        Selection.GoTo What:=wdGoToBookmark, Name:="TM_GBH_MESSGERAET"
        Selection.Delete Unit:=wdCharacter, Count:=1
    Else
        ' evtl. nur das zweite GBH-Messger|fffd|t l|fffd|schen
        sTest1 = InhaltAbfragen("GBH-COM,Gasqualitaet2.EADR1")
        sTest2 = InhaltAbfragen("GBH-COM,Gasqualitaet2.IMP_ORDNR")
        If (sTest1 = "<unbelegt>") And (sTest2 = "<unbelegt>") Then
            Selection.GoTo What:=wdGoToBookmark, Name:="TM_GBH_MESSGERAET_2"
            Selection.Delete Unit:=wdCharacter, Count:=1
        End If
    End If

End Sub



Function InhaltAbfragen(sInhalt As String) As String

    Dim sMakro As String
    
    sMakro = "GETINHALT(" + sInhalt + ")"
    MakroSenden sMakro
    DoEvents
    InhaltAbfragen = ErgebnisAuswerten("GETINHALT," + sInhalt + ",")

End Function


Sub LeerzeilenErstellen(iCount As Integer)
            
    Selection.Text = ""
    'eine Zeile weniger als gesamt, weil bereits eine Zeile existiert
    Selection.InsertRows iCount - 1
    Selection.HomeKey Unit:=wdLine

End Sub


Sub TextmarkenEinfuegen(ByVal sKarteNr As String, ByVal sKanalNr As String, ByVal sInhalt As String)
    
    'Bezeichnung
    Selection.Text = "BASISSYSTEM,EAKANAL_" + sKarteNr + "_" + sKanalNr + "." + sInhalt
    ThisDocument.Bookmarks.Add Name:="BEZEICHNUNG_EA_" + sKarteNr + "_" + sKanalNr + "_" + sInhalt, Range:=Selection.Range
    
    'Inhalt
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "BASISSYSTEM,EAKANAL_" + sKarteNr + "_" + sKanalNr + "." + sInhalt
    ThisDocument.Bookmarks.Add Name:="INHALT_EA_" + sKarteNr + "_" + sKanalNr + "_" + sInhalt, Range:=Selection.Range
    
End Sub


Sub NaechsteTabellenzeile()
    'n|fffd|chste Zeile, erste Zelle
    Selection.HomeKey Unit:=wdRow
    Selection.Move Unit:=wdRow
End Sub



Function getAnzahlWerte(iModulId As Integer) As Integer

    Dim sMakro As String
    Dim sErg As String
    
    sMakro = "GETANZAHLWERTE(" & iModulId & ")"
    MakroSenden sMakro
    DoEvents
    sErg = ErgebnisAuswerten("GETANZAHLWERTE," & iModulId & ",")
    
    If sErg <> "" Then
        getAnzahlWerte = sErg
    Else
        getAnzahlWerte = 0
    End If
    
End Function


Sub NaechsterWert(iModulId As Integer, iNummer As Integer, ByRef sBezeichnung As String, _
    ByRef sInhalt As String, ByRef bIsUeberschrift As Boolean)

    Dim sMakro As String
    Dim sErg As String
    Dim iPosTab As Integer

    bIsUeberschrift = False
    
    sMakro = "GETWERT(" & iModulId & "," & iNummer & ")"
    MakroSenden sMakro
    DoEvents
    sErg = ErgebnisAuswerten("GETWERT," & iModulId & "," & iNummer & ",")

    'Aufbau sErg: Bezeichnung TAB Inhalt. Wenn kein TAB drin: |fffd|berschriftszeile
    iPosTab = InStr(1, sErg, vbTab)
    If iPosTab > 0 Then
        sBezeichnung = Mid(sErg, 1, iPosTab - 1)
        sInhalt = Mid(sErg, iPosTab + 1, Len(sErg))
    Else
        sBezeichnung = sErg
        sInhalt = ""
        bIsUeberschrift = True
    End If

End Sub


'Holt nacheinander alle eichamtlichen Parameter vom Hauptprogramm ab und f|fffd|gt sie in
'die Variable Liste der Parameter ein
Sub VariableTabelleErstellen(iModulId As Integer)

    Dim iAnzahl As Integer, i As Integer
    Dim sBezeichnung As String, sInhalt As String
    Dim bIsUeberschrift As Boolean

    iAnzahl = getAnzahlWerte(iModulId)
    If iAnzahl = 0 Then
        'Modul nicht drin oder keine eichamtlichen Parameter im Modul: Abschnitt l|fffd|schen
        Selection.GoTo What:=wdGoToBookmark, Name:="TM_MODUL_" & iModulId
        Selection.Delete Unit:=wdCharacter, Count:=1
    Else
        Selection.GoTo What:=wdGoToBookmark, Name:="VARIABLE_TABELLE_" & iModulId
        If iAnzahl > 1 Then
            LeerzeilenErstellen iAnzahl
        End If
        For i = 0 To iAnzahl - 1
            NaechsterWert iModulId, i, sBezeichnung, sInhalt, bIsUeberschrift
            If bIsUeberschrift Then
                UeberschriftFormatieren sBezeichnung
            Else
                Selection.Text = sBezeichnung
                Selection.MoveRight Unit:=wdCell
                Selection.Text = sInhalt
            End If
            NaechsteTabellenzeile
        Next i
    End If
    
End Sub



Sub UeberschriftFormatieren(sUeberschrift As String)
Attribute UeberschriftFormatieren.VB_Description = "Makro aufgezeichnet am 24.09.03 von Sabine K|fffd|nig"
Attribute UeberschriftFormatieren.VB_ProcData.VB_Invoke_Func = "Project.NewMacros.UeberschriftFormatieren"

    Selection.SelectRow
    Selection.Cells.Merge
    Selection.MoveLeft Unit:=wdCharacter, Count:=1
    Selection.TypeText Text:=sUeberschrift
    Selection.SelectRow
    With Selection.Cells
        With .Shading
            .Texture = wdTexture10Percent
            .ForegroundPatternColorIndex = wdAuto
            .BackgroundPatternColorIndex = wdWhite
        End With
    End With
    
    'iSeiteAlt = Selection.Information(wdActiveEndPageNumber)
        
    '|fffd|berschriftszeile nicht als letztes auf einer Seite
    With Selection.ParagraphFormat
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = True
    End With
        
    Selection.MoveLeft Unit:=wdCharacter, Count:=1
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

Private Sub Document_Close()
    DDEVerbindungSchliessen
End Sub


' InQuest injected base64 decoded content
' zp'~

INQUEST-PP=macro
