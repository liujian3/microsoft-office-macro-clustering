Attribute VB_Name = "Email"
Option Explicit
Option Private Module
' 2016-12-09 to 12-23 revised for creating either Gmail or Outlook
' 2016-12-28 incorporated RSA email into this set of procedures

' String constant
Private Const vbDblQuote As String = """" ' from a comment on stackoverflow (yes,it is four double-quote characters; not three)
Private Const vbSngQuote As String = "'" ' from a comment on stackoverflow

' Color constants
Private Const lngLightGreen As Long = 12379095 '?rgb(215,227,188)
Private Const lngGreen As Long = 4232518  '?rgb(70,149,64)
Private Const lngWhite As Long = 16777215 '?rgb(255,255,255)
Private Const lngBlue As Long = 15773696 ' ?rgb(0,176,240), standard blue

' Google Email Config & Misc.
Private Const strSendUsing As String = "http://schemas.microsoft.com/cdo/configuration/sendusing" '= 2
Private Const intSendUsing As Integer = 2
Private Const strSMTPServer As String = "http://schemas.microsoft.com/cdo/configuration/smtpserver" '= "smtp.gmail.com"
Private Const strServer As String = "smtp.gmail.com"
Private Const strSMTPServerPort As String = "http://schemas.microsoft.com/cdo/configuration/smtpserverport" '= 587
Private Const intPort As Integer = 587
Private Const strSMTPAuthenticate As String = "http://schemas.microsoft.com/cdo/configuration/smtpauthenticate" ' = 1
Private Const intAuthenticate As Integer = 1
Private Const strSMTPUseSSL As String = "http://schemas.microsoft.com/cdo/configuration/smtpusessl" ' = True
Private Const strUseSSL As String = "True"
Private Const strSMTPConnectionTimeout As String = "http://schemas.microsoft.com/cdo/configuration/smtpconnectiontimeout" ') = 60
Private Const intTimeout As Integer = 60
Private Const strSendUsername As String = "http://schemas.microsoft.com/cdo/configuration/sendusername" ' ) = "qwang@hybridgedemo.com" '"sender's username"
Private Const strSendPassword As String = "http://schemas.microsoft.com/cdo/configuration/sendpassword" ') = "Welcome939!" '

Public strSenderAddress As String ' retrieved vis user-form input (typical)
Public strSenderPassword As String
Public strPersonalNote As String
Public strEmailType As String ' set after command button clicks
Private Const vbCadeEmail As String = "csimmons@midamerican.com"
Private Const vbChuckEmail As String = "cbrea@midamerican.com"
Private Const vbIPEmail As String = "ip@midamerican.com"

' Common HTML Attributes (copy this into a txt editor to edit)
Private Const vbHTMLSpanStyle As String = "<span style=" & vbSngQuote & "font-family:" & vbDblQuote & "Calibri" & vbDblQuote & "," & vbDblQuote & "sans-serif" & vbDblQuote & ";" & "font-size:11.0pt" & vbSngQuote & ">"

' HTML email bodies, note paragraph tags
Private Const vbDraftLettersBody As String = "<p>" & vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>" & "Please upload this TR to the Db, generate the applicable documents, and save to the Final folder.</span></p>"
Private Const vbSendToMECBody As String = "<p>" & vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>" & "I have completed my review of this project. It is ready to be sent to MEC.</span></p>"
Private Const vbMeterInfoBody As String = "<p>" & vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>" & "I need the following account/meter-related information for this site: </span></p>"
Private Const vbStalledBody As String = "<p>" & vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>" & "After a long delay, this project is now considered stalled. Please update the Db accordingly, generate the Stalled Letter, and save it to the Final folder.</span></p>"
Private Const vbLrgCustRebate1 As String = "<p>" & vbHTMLSpanStyle & "Tina/Amber:</span><br><br>" & "I am providing you visibility into the following custom project with an incentive " & ">" & "$100,000 that is ready to be sent to RSA for cost-effectiveness testing. In the absence of any response from you, we will send this project to RSA 24 hours after delivery of this email.</span></br>"
Private Const vbLrgCustRebate2 As String = "<p>" & vbHTMLSpanStyle & "Please do not hesitate to contact me with any questions regarding this project.</span></p>"
'Private Const vbRSABody = "<p>" & vbHTMLSpanStyle & "insert letter body here.</span></p>" 'not used b/c too complicated to define up here

' Plain text email bodies (all except $100k rebate letter)
Private Const vbDraftLettersBodyGmail As String = "Hello IP Admin," & vbCrLf & vbCrLf & "Please upload this TR to the Db, generate the applicable documents, and save to the Final folder."
Private Const vbSendToMECBodyGmail As String = "Hello IP Admin," & vbCrLf & vbCrLf & "I have completed my review of this project. It is ready to be sent to MEC."
Private Const vbMeterInfoBodyGmail As String = "Hello IP Admin," & vbCrLf & vbCrLf & "I need the following account/meter-related information for this site: "
Private Const vbStalledBodyGmail As String = "Hello IP Admin," & vbCrLf & vbCrLf & "After a long delay, this project is now considered stalled. Please update the Db accordingly, generate the Stalled Letter, and save it to the Final folder."
' Note: cant' render the LargeRebate letter in a Gmail body b/c some of the HTML formatting is lost for some reason

' Letter Type constants (Public b/c legacy code referenced by a caller on the 'Email'! sheet, which is effectively a distinct code module)
Public Const vbDraftLettersType As String = "Letter Generation"
Public Const vbSendToMECType As String = "Send to MEC"
Public Const vbMeterInfoType As String = "Meter Info"
Public Const vbStalledProjectType As String = "Stalled Project"
Public Const vbLargeCustomRebateType As String = "Large Custom Rebate"
Public Const vbRSAType As String = "RSA"

' Table Names and Ranges, Workbook names, Worksheet names
Private Const vbProjectName As String = "Project Name"
Private Const vbProjectNameRange As String = "A1:H5" 'note B:H are merged but RangeToHTML truncates text to actual col widths regardless of merge state
Private Const vbNarrative As String = "Project Narrative"
Private Const vbNarrativeRange As String = "A57:H65" 'note A:H are merged, but RangeToHTML truncates (see note above)
Private Const vbResults As String = "Project Results"
Private Const vbResultsRange As String = "A18:H47" 'none merged
Private Const vbWksEmail As String = "Email"

' Books, Sheets, and Ranges
Private wksEmail As Worksheet
Private wksTemp As Worksheet
Private rng1 As Range, rng2 As Range, rng3 As Range

' Variables
Public booRemote As Boolean
Public booRSAExists As Boolean
Public strEmailApp As String 'e.g., "gmail" or "outlook"; set in 'wksEmail'! sheet according to option buttons
Public varProjectInfo(1 To 10) As Variant 'Org-Bldg Name, AP#, Phase, ECM ID#, final path, project name, Deltek, MEC Due Date, Incentive Structure
Private strFeedback As String ' to report back to the user on the control screen
Private strRSACopyFileName As String

Private Sub StartDraftLetter()
' 2016-12-23 this runs when user clicks the "Draft Letters" envelope;

Debug.Print "Start StartDraftLetter"

strEmailType = vbDraftLettersType
Call Main(strEmailType)

Debug.Print "End StartDraftLetter"

End Sub
Private Sub StartSendToMEC()
' 2016-12-23 this runs when user clicks the "Send to MEC" envelope;


Debug.Print "Start StartSendToMEC"

strEmailType = vbSendToMECType
Call Main(strEmailType)

Debug.Print "End StartSendToMEC"

End Sub
Private Sub StartMeterInfo()
' 2016-12-23 this runs when user clicks the "Meter Info?" envelope;

Debug.Print "Start StartMeterInfo"

strEmailType = vbMeterInfoType
Call Main(strEmailType)

Debug.Print "End StartMeterInfo"
End Sub
Private Sub StartStalledProject()
' 2016-12-23 this runs when user clicks the "Stalled Project" envelope;


Debug.Print "Start StartStalledProject"

strEmailType = vbStalledProjectType
Call Main(strEmailType)

Debug.Print "End StartStalledProject"

End Sub
Private Sub StartLargeRebate()
' 2016-12-23 this runs when user clicks the ">$100k Rebate" envelope;

Debug.Print "Start StartLargeRebate"

strEmailType = vbLargeCustomRebateType
Call Main(strEmailType)

Debug.Print "End StartLargeRebate"

End Sub
Private Sub StartRSA()
' 2016-12-28 WN
' incorporated the RSA email into same procedures used to create wksEmail
' checks to see if the Information wks exists and sets public boolean accordingly
Debug.Print "Start StartRSA"
Dim RSACount As Integer
Dim RSAConfirm As Boolean

RSACount = InputBox("How many times have you sent testing email to RSA already (exculde this time)", "Email to RSA Count")
Select Case RSACount
        Case Is > 4
            MsgBox ("Please tell Admin that this project under current phase has been requested for RSA testing more than 4th")
            Exit Sub
        Case Is > 1
            RSAConfirm = MsgBox("Including this time, the RSA testing has been requested more than two times. Is the current resubmission approved by MEC?", vbYesNoCancel)
            If RSAConfirm <> True Then
                MsgBox ("Please get resubmission approval first before you send this email")
                Exit Sub
            Else
                MsgBox ("Don't forget to update DB to track this resubmission number " & RSACount + 1)
            End If

 End Select


strEmailType = vbRSAType
booRSAExists = False
If SheetExists("Information") Then booRSAExists = True

strEmailApp = ActiveSheet.Range("a1").Value ' in white font, set by option button click events
If strEmailApp = "gmail" Then
    ' make copy of workbook in order to attach it to Gmail msg
    strRSACopyFileName = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
    strRSACopyFileName = Replace(strRSACopyFileName, ".xlsm", "-Copy.xlsm")
    ActiveWorkbook.SaveCopyAs strRSACopyFileName
End If



Call Main(strEmailType)

Debug.Print "End StartRSA"

End Sub
Public Sub Main(strLetterType As String)
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: launch a series of procedures to create and draft IPAdmin emails
' Precedents: button cick events on the 'IPAdmin Emails'! sheet
' Arguments: letter type string
' Dependents: series of procedures to create and draft IPAdmin emails
' v2.0
' 2016-12-09 udpated for creating Gmail instead of Outlook
' 2016-12-20 moved calls to MakeEmail and LeaveFeedback subs to the form's Okay button Click event
' 2016-12-23 this is now called by a "starter sub" according to which envelope was clicked
' 2016-12-28 incorporated RSA emails

Debug.Print "Start Main"

If SheetExists(vbWksEmail) Then
    Set wksEmail = ActiveWorkbook.Sheets(vbWksEmail)
Else
    MsgBox "The active workbook does not have an Email worksheet."
    Exit Sub
End If

Application.StatusBar = "Getting Project Information"

Call GetProjectInfo(strLetterType) 'public mod level var set according to which button/envelop was clicked

strEmailApp = ActiveSheet.Range("a1").Value ' in white font, set by option button click events

'If strEmailApp = "outlook" Then
If strEmailApp = "outlook" Or strLetterType = vbLargeCustomRebateType Then
    CreateOutlookEmail (strLetterType) ' user may copy-all from Outlook body and paste into Gmail body
    LeaveFeedback (strLetterType)
    Application.StatusBar = False 'reset
    
ElseIf strLetterType = vbRSAType And Not booRSAExists Then ' refers to public boolean
    MsgBox "The Information sheet is missing. RSA email will not be sent."
    
Else
    '' Show form to get Personalize note; Deltek; Due Date; Gmail Addresss; Gmail Pswd;
    With Form_Email
    .Caption = strLetterType
    .TextBox_Path.SetFocus
    .TextBox_Note.ScrollBars = fmScrollBarsVertical
    .Show vbModeless
    End With
End If

Debug.Print "End Main"

End Sub 'Main
Public Sub ContinueMain(strLetterType As String)
' 2016-12-23
' called by form okay buttn's click event after project details acquired

Debug.Print "Start ContinueMain"

Call CreateGoogleEmail(strLetterType)

' clear public variables in case they are not cleared in preceeding sub as expected
strSenderAddress = "" ' for good form
strSenderPassword = "" ' for good form
booRSAExists = False

Call LeaveFeedback(strLetterType)
Application.StatusBar = False 'reset

Debug.Print "End ContinueMain"


End Sub
Private Sub GetProjectInfo(strLetterType As String)
'v1.0
'2016-03-21 by Willis Nessle
'Objective: collect the project information in a Module 1 private string array (10x1)
'Precedents: Main(), public variables for the string array, and the "local or remote?" boolean
'Arguments:
'Dependents: the array populated here is used for email subject and body; the boolean is used for the hyperlink
'Code notes:
'v1.1
'2016-04-12
'added error checking to make sure a "Final" folder actually exists before creating the path to it
'2016-05-11
'added 6th element to array to capture Project Name, required for LargeCustomRebate email.
'edited to make use of file system objects for more efficient code, and easier to interpret
'code note: the GetParentFolderName method returns the parent of the *folder in which the file resides, not parent of the file
' array now stores the Final folder path instead of the project path, which may be one in the same.

' 2016-12-19 v2.0 convert from Outlook to Gmail
' added parameter to define type of email in order to set up new User Form correctly
' added a FileDialog object to allow local Q drive users to select the Final folder path directly
' do not need to call MikeFilePathURL anymore since cannot paste links to network folder in gmail;
' got rid of logic to make Final Folder...b/c it's not particularly important but adds complexity
' 2016-12-28 added Incentive Structure to public variant array varProjInfo(9)

Dim strProjectPath As String, strFinalPath As String
Dim booInFinal As Boolean
Dim fso As Object, fd As Object

On Error GoTo myErrHandler
'On Error Resume Next

Set fso = CreateObject("Scripting.FileSystemObject")
Set fd = FileDialog(msoFileDialogFolderPicker)

Debug.Print "Start GetProjectInfo"

booRemote = False '** this is a mod level var
booInFinal = False
strProjectPath = ActiveWorkbook.Path ' mod private string variable

'Debug.Print "activeworkbook path is " & ActiveWorkbook.Path

With fso
    If .GetDriveName(strProjectPath) <> "Q:" Then booRemote = True
    If Not booRemote Then
        If .GetFolder(strProjectPath).Name = "Final" Then
            booInFinal = True
            strFinalPath = strProjectPath
            varProjectInfo(5) = strFinalPath
        End If ' folder name is Final
        If Not booInFinal Then
            With fd
                .InitialFileName = strProjectPath
                .Title = "Select the Final Folder"
                .Show
                If .slecteditems.Count = 0 Then
                    strFinalPath = strProjectPath ' just stick w/ the file path
                Else
                    strFinalPath = .SelectedItems(1)
                End If
                varProjectInfo(5) = strFinalPath
            End With
        End If ' Not InFinal
        Form_Email.TextBox_Path.Text = strFinalPath
    Else
        'this is remote, so user will need to paste final folder path into the text box on form
        Form_Email.TextBox_Path.Text = ""
    End If ' Not Remote
End With
    
' Populate mod level array with project info for use by other Subs
With ActiveWorkbook.Worksheets("Tech Review")
    varProjectInfo(1) = .Range("b3") ' Org-Bldg
    varProjectInfo(2) = .Range("b7") ' project #
    varProjectInfo(3) = .Range("e8") ' Phase
        If varProjectInfo(3) = "Preapproval" Then varProjectInfo(3) = "PS"
        If varProjectInfo(3) = "Installed" Then varProjectInfo(3) = "PIN"
    varProjectInfo(4) = .Range("e7") ' ECM ID #
    'varProjectInfo(5) = strFinalPath ' this is now set via the FileDialog above or User Form
    varProjectInfo(6) = .Range("b5") ' project name
End With

' get incentive structure if available
If booRSAExists Then varProjectInfo(9) = ActiveWorkbook.Worksheets("Information").Range("b20").Value

' Initialize a UserForm txt box to collect pertinent email and project details
Select Case strLetterType
    Case vbDraftLettersType
        Form_Email.TextBox_Note.Text = vbDraftLettersBodyGmail & vbCrLf
        
    Case vbSendToMECType
        Form_Email.TextBox_Note.Text = vbSendToMECBodyGmail & vbCrLf
    
    Case vbMeterInfoType
        Form_Email.TextBox_Note.Text = vbMeterInfoBodyGmail & vbCrLf
    
    Case vbStalledProjectType
        Form_Email.TextBox_Note.Text = vbStalledBodyGmail & vbCrLf

    Case vbLargeCustomRebateType
        ' do not initialize; this needs to be composed with HTML body;
        ' text box will be ignored
        
    Case vbRSAType
        If booRSAExists And strEmailApp = "gmail" Then
            Form_Email.TextBox_Note.Text = WriteRSATextBody( _
                                            incentStructure:=varProjectInfo(9), _
                                            projNum:=varProjectInfo(2), _
                                            projName:=varProjectInfo(6), _
                                            orgBldg:=varProjectInfo(1))
        End If
        
End Select
Exit Sub

myErrHandler:
Debug.Print "There was an error..."
    Debug.Print Err.Number & vbCrLf & Err.Description
    
    strFeedback = "There was an error collecting project info. "

Debug.Print "End GetProjectInfo"

End Sub 'GetProjectInfo

Private Sub CreateOutlookEmail(strLetterType As String)
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Create one of the four IPAdmin template emails.
' Precedents: called by Main
' Arguments: the email type is passed by the caller
' Dependents: calls functions to write the subject line and the email body

' Code notes:
'   The reviewing engineer must fill in any blanks, edit the body as needed, and send the msg.
'   The email body is HTML to allow for the hyperlink
'   ** Note, I've set a reference to M'soft Outlook Object Library in
'   Tools >> References. If this module is pasted into another wkb,
'   the reference must be set in that wkb.

' 2016-05-11 v1.1
' udpated to accomodate Stalled Project email to IPAdmin and LargeCustomRebate email to Bill.
' Stalled project is similar to other IPAdmin emails
' LargeCustomRebate email is different. A complex HTML string is constructed from text and Excel ranges. It goes to Bill not IPAdmin
' moved feedback to here from WriteBody

' 2016-12-09 find/replaced "CreateEmail" to "CreateOutlookEmail" in order to distinguish from new Gmail
' 2016-12-23 udpated call to WriteBody to WriteHTMLBody

' declare Outlook objects
Dim objOutlookApp As Outlook.Application, objOutlookMail As MailItem
Dim strBody As String

Debug.Print "Start CreateOutlookEmail"

Application.StatusBar = "Creating Outlook Message"

On Error GoTo myErrHandler
       
With Application
    .ScreenUpdating = False
    .EnableEvents = False
    .DisplayAlerts = False
End With

Set objOutlookApp = CreateObject("Outlook.Application")
Set objOutlookMail = objOutlookApp.CreateItem(0)

Select Case strLetterType
    Case vbLargeCustomRebateType
        With objOutlookMail
'            .To = "bschutten@nexant.com"
'            .CC = "ipadmin@nexant.com"
            
            'For Testing
            .To = strSenderAddress
            
            
            .Subject = WriteSubject(strLetterType)
            .HTMLBody = WriteLargeCustomRebateBody()
            .Display
        End With
        
    Case vbRSAType
        strBody = WriteRSAhtmlBody( _
                                incentStructure:=varProjectInfo(9), _
                                projNum:=varProjectInfo(2), _
                                projName:=varProjectInfo(6), _
                                orgBldg:=varProjectInfo(1))
        With objOutlookMail
'            .To = vbCadeEmail & ", " & vbChuckEmail
'            .CC = "ip@midamerican.com"
            
            'For Testing
            .To = strSenderAddress
            
            .Subject = WriteSubject(strLetterType)
            .HTMLBody = strBody
            .Attachments.Add (ActiveWorkbook.FullName)
            .Display
        End With
        
    Case Else
        strBody = WriteHTMLBody( _
                            strType:=strLetterType, _
                            varPath:=varProjectInfo(5), _
                            varID:=varProjectInfo(4))
        With objOutlookMail
'            .To = "IPAdmin@nexant.com"
            
            'For Testing
            .To = strSenderAddress
            
            .Subject = WriteSubject(strLetterType)
            .HTMLBody = strBody
            .Display
        End With
        
End Select

strFeedback = "The " & strLetterType & " Outlook message was created on " & Format(Now(), "mm/dd/yy")

Set objOutlookMail = Nothing
Set objOutlookApp = Nothing

With Application
    .ScreenUpdating = True
    .EnableEvents = True
    .DisplayAlerts = True
End With

Debug.Print "End CreateOutlookEmail"

Exit Sub

myErrHandler:

    Debug.Print "There was an error..."
    Debug.Print Err.Number & vbCrLf & Err.Description
    
    strFeedback = "The " & strLetterType & " Outlook mail failed"
    
    Set objOutlookMail = Nothing
    Set objOutlookApp = Nothing
    
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
    End With
    
    Debug.Print "End CreateOutlookEmail"

End Sub ' CreateOutlookEmail
Private Sub CreateGoogleEmail(strLetterType As String)
' v1.0
' 2016-03-21 by Willis Nessle (for Outlook email)
' Objective: Create one of the four IPAdmin template emails.
' Precedents: called by Main
' Arguments: the email type is passed by the caller
' Dependents: calls functions to write the subject line and the email body

' Code notes:
'   The reviewing engineer must fill in any blanks, edit the body as needed, and send the msg.
'   The email body is HTML to allow for the hyperlink
'   ** Note, I've set a reference to M'soft Outlook Object Library in
'   Tools >> References. If this module is pasted into another wkb,
'   the reference must be set in that wkb.

' v2.0 by WDN
' 2016-12-09 find/replaced "CreateEmail" to "CreateGoogleEmail" in order to distinguish from new Gmail


Dim cdoMsg As Object
Dim strSubject As String, strBody As String

Debug.Print "Start CreateGoogleEmail"
Application.StatusBar = "Creating Gmail Message"

On Error GoTo myErrHandler
              
With Application
    .ScreenUpdating = False
    .EnableEvents = False
    .DisplayAlerts = False
End With

Set cdoMsg = CreateObject("CDO.message")

With cdoMsg.Configuration.Fields
    .Item(strSendUsing) = intSendUsing ' 2
    .Item(strSMTPServer) = strServer ' "smtp.gmail.com"
    .Item(strSMTPServerPort) = 465 'intPort ' 587
    .Item(strSMTPAuthenticate) = intAuthenticate '1
    .Item(strSMTPUseSSL) = strUseSSL 'True
    .Item(strSMTPConnectionTimeout) = intTimeout ' 60
    .Item(strSendUsername) = strSenderAddress '"qwang@hybridgedemo.com" 'full email address in quotes
    .Item(strSendPassword) = strSenderPassword '"Welcome939!"
    .Update
End With

' build email parts
strSubject = WriteSubject(strLetterType)

Select Case strLetterType
    Case vbLargeCustomRebateType
        strBody = WriteLargeCustomRebateBody() ' as of 12-22-16 this case will not happen
        'Call Pause(1) ' doesn't help
        With cdoMsg
            .To = "bschutten@nexant.com"
            .CC = "ipadmin@nexant.com"
            .From = "bschutten@nexant.com" 'to debug use strSenderAddress
            
            'For Testing
'            .To = strSenderAddress
'            .From = strSenderAddress
            
            
            .Subject = strSubject
            .HTMLBody = strBody
            .Send
        End With
        
    Case vbRSAType
    
        With cdoMsg
           If (MsgBox("Did you attach you signature at the end fo email? If not, this email will be delivered to your gmail inbox, otherwise will be sent to RSA", vbYesNo) = vbYes) Then
                .To = vbCadeEmail & "," & vbChuckEmail '"wnessle@nexant.com, willis.nessle@gmail.com"
                .CC = "ipadmin@nexant.com"
                .From = strSenderAddress
                
                'For testing
'                .To = strSenderAddress
'                .From = strSenderAddress
            Else

                .To = strSenderAddress
                .From = strSenderAddress
            
            End If
                          
            .Subject = strSubject
            .TextBody = strPersonalNote ' value of the text box on user form
            .AddAttachment strRSACopyFileName 'note there is no equal sign here ' can't attach open wkb to gmail so made a copy at start of procedure
            .Send
        End With
        Kill strRSACopyFileName ' delete the temp wkb to avoid working version confusion
        
    Case Else
    
        
        strBody = WriteTextBody(strLetterType)
        With cdoMsg
            .To = "IPAdmin@nexant.com"
            .From = strSenderAddress
            
            'For Testing
'            .To = strSenderAddress
'            .From = strSenderAddress
            
            .Subject = strSubject
            .TextBody = strBody 'apparently .HTMLBody also works with plain text strings.
            .Send
        End With
        

        
        
End Select


strFeedback = "The " & strLetterType & " Gmail was sent on " & Format(Now(), "mm/dd/yy")

Set cdoMsg = Nothing
strSenderAddress = "" ' for good form
strSenderPassword = "" ' for good form

With Application
    .ScreenUpdating = True
    .EnableEvents = True
    .DisplayAlerts = True
End With

Debug.Print "End CreateGoogleEmail"

Exit Sub

myErrHandler:

    Debug.Print "There was an error..."
    Debug.Print Err.Number & vbCrLf & Err.Description
    
    strFeedback = "The " & strLetterType & " Gmail failed"
     
    MsgBox "The following error occurred in CreateGoogleEmail: " _
            & vbCrLf & Err.Number & vbCrLf & Err.Description
    
    Set cdoMsg = Nothing
    strSenderAddress = ""
    strSenderPassword = ""
    
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
    End With
    
    Debug.Print "End CreateGoogleEmail"

End Sub ' CreateGoogleEmail
Private Function WriteSubject(strType As String) As String
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Write the Subject line for the IPAdmin email.
' Precedents: public variant array declared in the IPAdmin Emails wks Event Handler
' Arguments: the email type is passed by the caller; it's a public constant string - see Declarations
' Dependents: Sub CreateGoogleEmail
' Code notes: this has to be separae from the WriteLetterGenerator b/c that is a function that returns one string;
'        One could return an array of strings but keep it simple
' 2015-05-11 v1.1
' added Stalled Project type
' added Large Custom Rebate type
' 2016-12-09 udpated subject string for large rebate letter to denote either "PS" or "PIN" phase
' 2016-12-23 removed deemed savings case b/c not used ever
' 2016-12-28 added RSA email

Dim strSubject As String

Debug.Print "Start WriteSubject"

Select Case strType
    Case vbDraftLettersType, vbSendToMECType, vbStalledProjectType
        'Org-Bldg-AP#-Phase- Letter Generation, or Send to MEC, or Stalled Project
        strSubject = varProjectInfo(1) & " - AP" & _
                    Str(varProjectInfo(2)) & " - " & _
                    varProjectInfo(3) & " - " & strType  '
    
    Case vbMeterInfoType
        'Org - Building - Meter Information
        strSubject = varProjectInfo(1) & " - " & strType  '
        
    Case vbLargeCustomRebateType
        strSubject = "Custom Project with Incentive >$100,000 - " & varProjectInfo(3) & " Phase - " _
                    & varProjectInfo(1) & " - " & varProjectInfo(2) _
                    & ", " & varProjectInfo(6)
    Case vbRSAType
        strSubject = varProjectInfo(1) & " - AP" & varProjectInfo(2) '

End Select

WriteSubject = strSubject

Debug.Print "End WriteSubject"

End Function 'WriteSubject

Private Function WriteTextBody(strType As String)
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Writes the "Letter Generation" template email body.
' Arguments: the email type is passed by the caller
' Precedents: public variant array declared in the IPAdmin Emails wks Event Handler
'               public boolean determines whether to insert hyperlink or not
' Dependents: Sub CreateOutlookEmail
' Code notes: refers to public constants for email bodies and double quotes
'             need a constant for double quotes to accomodate the quotes required for HTML syntax
'
'2016-12-19 v2.0 convert from Outlook to gmail;
' removed HTML tags; compose body via public string variable set via user form
' the form is pre-populated with the boilerplate string; will be "" if user cancels
'
'2016-12-28 added RSA email, boilerplate note set in separate function before loading into user form text box

Dim strBody As String
Dim strInfo As String

Debug.Print "Start WriteTextBody"

'Greeting
'strBody = strBody & "Hello IP Admin," & vbCrLf & vbCrLf

' & Request
Select Case strType
    Case vbDraftLettersType
        strBody = strBody & strPersonalNote & vbCrLf
    
    Case vbSendToMECType
        strBody = strBody & strPersonalNote & vbCrLf
    
    Case vbMeterInfoType
        strBody = strBody & strPersonalNote & vbCrLf
    
    Case vbStalledProjectType
        strBody = strBody & strPersonalNote & vbCrLf
        
    Case vbRSAType
        strBody = strPersonalNote & vbCrLf

End Select

' Project Info in a separate string
Select Case strType
    Case vbMeterInfoType
        strInfo = strInfo _
            & Chr(187) & Chr(32) & "Regional Rate Code: " & vbCrLf _
            & Chr(187) & Chr(32) & "Current account/meter number: " & vbCrLf _
            & Chr(187) & Chr(32) & "Other: " & vbCrLf
    
    Case vbStalledProjectType
        strInfo = "Link to Final folder: " & vbCrLf & varProjectInfo(5) & vbCrLf & vbCrLf _
                & "Deltek #: " & varProjectInfo(7) & vbCrLf _
                & "ECM ID#: " & Str(varProjectInfo(4)) & vbCrLf
                
    Case vbRSAType
        ' do nothing
    Case Else
        strInfo = "Link to Final folder:" & vbCrLf & varProjectInfo(5) & vbCrLf & vbCrLf _
                & "Deltek #: " & varProjectInfo(7) & vbCrLf _
                & "ECM ID#: " & Str(varProjectInfo(4)) & vbCrLf _
                & "MEC Due Date: " & varProjectInfo(8) & vbCrLf
End Select

' Combine Body & Info strings
strBody = strBody & strInfo & vbCrLf & "Thank you"
        
WriteTextBody = strBody

Debug.Print "End WriteTextBody"

End Function 'WriteTextBody
Private Function WriteHTMLBody(strType As String, varPath As Variant, varID As Variant)
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Writes the "Letter Generation" template email body.
' Arguments: the email type is passed by the caller
' Precedents: public variant array declared in the IPAdmin Emails wks Event Handler
'               public boolean determines whether to insert hyperlink or not
' Dependents: Sub CreateEmail
' Code notes: refers to public constants for email bodies and double quotes
'             need a constant for double quotes to accomodate the quotes required for HTML syntax
' 2016-12-23 changed name from "WriteBody"
' copied this function from "MakeOutlookEmails" module in order to enable either type of mail
' also removed deemed savings case b/c not used ever

Dim strBody As String
Dim strInfo As String

Debug.Print "Start WriteBody"

' HTML tags
strBody = "<html><body>"

' & Greeting
'strBody = strBody & _
'        vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>"

' & Request
Select Case strType
Case vbDraftLettersType
    strBody = strBody & vbDraftLettersBody

Case vbSendToMECType
    strBody = strBody & vbSendToMECBody

Case vbMeterInfoType
    strBody = strBody & vbMeterInfoBody

Case vbStalledProjectType
    strBody = strBody & vbStalledBody

End Select

' Project Info in a separate string
Select Case strType
Case vbMeterInfoType
    strInfo = "<ul style=" & vbDblQuote & "list-style-type:disc" & vbDblQuote & ">"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Regional Rate Code: </span>"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Current account/meter number: </span>"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Other: </span></ul>" ' don't need the closing list tag </li>

Case vbStalledProjectType
    If Not booRemote Then ' boolean was set in GetProjectInfo
        strInfo = vbHTMLSpanStyle & "Hyperlink to <A href=" & varPath & "\>Final</a> folder</span><br>"
    Else
        strInfo = vbHTMLSpanStyle & "Hyperlink to Final folder: </span><br>"
    End If
    strInfo = strInfo & vbHTMLSpanStyle & "Deltek #: </span><br>" '& varProjectInfo(2) & "<br>" ' Deltek # is not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "ECM ID#: " & Str(varID) & "</span><br>"

Case Else
    If Not booRemote Then ' boolean was set in GetProjectInfo
        strInfo = vbHTMLSpanStyle & "Hyperlink to <A href=" & varPath & "\>Final</a> folder</span><br>"
    Else
        strInfo = vbHTMLSpanStyle & "Hyperlink to Final folder: </span><br>"
        
    End If
    strInfo = strInfo & vbHTMLSpanStyle & "Deltek #: </span><br>" '& varProjectInfo(2) & "<br>" ' Deltek # is not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "ECM ID#: " & Str(varProjectInfo(4)) & "</span><br>"
    strInfo = strInfo & vbHTMLSpanStyle & "MEC Due Date: </span><br>" '& varProjectInfo(8) & "<br>" '' due date not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "Year Received: </span><br>" '& varProjectInfo(9) ' this is a temporary field, will go away so ignore it
End Select

' Combine Body & Info strings (*use <br> instead of <p> to avoid a blank line following "Thank you,")
strBody = strBody & strInfo & "<br>" & vbHTMLSpanStyle & _
        "Thank you,</span><br>" & _
        "</body></html>"
      
Debug.Print "Body: " & strBody

WriteHTMLBody = strBody

Debug.Print "End WriteHTMLBody"

End Function 'WriteHTMLBody
Private Sub LeaveFeedback(strType As String)
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: leave important messages after procedures run
'
' 2016-05-10 v1.1
' added Stalled Letter email to IPAdmin; and LargeCustomRebate email to Bill
' 2016-12-09 updated to for switch to Gmail; removed extra notes
'2016-12-23 added "stamped airmail" clip art to indicate that msg was sent
' 2016-12-28 revised from hardcoded worksheet to variable; see declarations

Dim rng As Range
Dim booShowClipArt As Boolean

Debug.Print "Start LeaveFeedback"

booShowClipArt = True
' check if mail was successful or failed.
If InStr(1, strFeedback, "failed") Then booShowClipArt = False

On Error Resume Next

Set rng = wksEmail.Range("e6") '
 
Select Case strType
    Case vbDraftLettersType
        rng.Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("Draft_Letters_Sent").Visible = True
        
    Case vbSendToMECType
        rng.Offset(3, 0).Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("Send_To_MEC_Sent").Visible = True
        
    Case vbMeterInfoType
        rng.Offset(6, 0).Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("Meter_Info_Sent").Visible = True
         
    Case vbStalledProjectType
        rng.Offset(9, 0).Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("Stalled_Project_Sent").Visible = True
    
    Case vbLargeCustomRebateType
        rng.Offset(12, 0).Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("Large_Rebate_Sent").Visible = True
        
    Case vbRSAType
        rng.Offset(15, 0).Value = strFeedback
        If booShowClipArt Then ActiveSheet.Shapes("RSA_Sent").Visible = True

End Select

Debug.Print "End LeaveFeedback"

End Sub 'LeaveFeedback
Private Function WriteLargeCustomRebateBody() As String
' 2016-05-11 v1.0 by wdn
' objective: construct an HTML string including an introduction and three excerpts from the TR table
' precedents: called by CreateMail()
'             refers to public constants for letter types and html snippets. See declararions
' dependents: another sub creates the email object for which this string is the HTMLBody
' notes:
' - concatenate intro, closing, and separator as html string
' - concatenate three tables, as HTML strings, including a blank line after each
'
' 2016-12-09 udpated for switch to Gmail
' called by CreateGoogleEMail()
' removed string argument which was not referred to in this procedure

Const vbWhiteSpace As String = "%20"
Dim strBody As String

Debug.Print "Start WriteLargeCustomRebateBody"
Application.StatusBar = "Converting the Excel Range to an HTML String"

On Error GoTo myErrHandler

' HTML tags
strBody = "<html><body>"

' & Greeting
'strBody = strBody & "<p>" & vbHTMLSpanStyle & "Tina/Amber:</span></p>"

' Introduction
strBody = strBody & vbLrgCustRebate1 _
            & vbHTMLSpanStyle & "</span><br>" _
            & vbLrgCustRebate2

' Closing (note, <br> instead of <p> avoids blank line following "Regards,")
strBody = strBody & vbHTMLSpanStyle & "Regards,</span><br>" _
                  & vbHTMLSpanStyle & "- Bill</span><br>"
        
' =================

strBody = strBody & String(24, "=") & "<br>"

' Range 1 - Bldg & Project Name
strBody = strBody & WriteRangeToHTMLString(vbProjectName) _
        & "<p>" & vbHTMLSpanStyle & "</span></p>"

' Range 2 - Narrative
strBody = strBody & WriteRangeToHTMLString(vbNarrative) _
        & "<p>" & vbHTMLSpanStyle & "</span></p>"

' Range 3 - Results
strBody = strBody & WriteRangeToHTMLString(vbResults) _
        & "<p>" & vbHTMLSpanStyle & "</span></p>"

' Test on separate .htm file
'strBody = strBody & WriteRangeToHTMLString("Test") _
'        & "<p>" & vbHTMLSpanStyle & "</span></p>"

strBody = strBody & "</body></html>"

WriteLargeCustomRebateBody = strBody

Debug.Print "End WriteLargeCustomRebateBody"

Exit Function
myErrHandler:
    
    Debug.Print "Error in WriteLargeCustomRebateBody: " & Err.Description
    MsgBox "An error occurred while concatenating the HTML string." _
            & vbCrLf & vbCrLf _
            & Err.Number & vbCrLf _
            & Err.Description, _
            vbOKOnly, _
            "Error in WriteLargeCustomRebateBody"
        
End Function 'WriteLargeCustomRebateBody
Private Function MakeTableForEmail(strTableName As String) As Range
' 2016-05-10 v1.0 by wdn
' Objective: Copy excerpts from the Tech Review table to a temp wks
' Arguments: a string indicating which table excerpt to create
' Precedents: refs Mod level private vars wksTemp and strings that identify required ranges,
' Dependents: called by WriteRangeToHTMLString()
' Return Val: a range (excerpt of the primary Tech Review table)
' code notes:
' - copy/paste required excerpt from the primary TR summary
' - (to do) reset the col widths as appropriate (e.g., length of Project Name string)
' 2016-11-17 v1.1 by wdn
' Fixed bug that abbreviated the table if an entire row (or col) was unexpectedly blank
' E.g., the range property "CurrentRegion" selects area bounded by first *empty rows and cols, so
' if a narrative row was blank, the "CurrentRegion" only extended to the row immediately preceding
' For the revision I removed "CurrentRegion" and defined the range with Activesheet.UsedRange instead
' Note 1, this only works b/c the tempWks is destroyed and recreated for each table,
' otherwise usedrange might be wrong if you followed a large table with a small table.
' Specifically, it would retain dims of large table!
' Note 2, During test I found that after I deleted a row and pasted range to a new location,
' the UsedRange was just the remaining rows in the new location, as expected. That is, it did not
' include the original cells before the paste and delete. However, if I just cleared the values,
' then the usedrange remained same dims, as expected.
' Note 3, If this fails, just use the brute-force method of using a utility function to find the
' last row and col of each range after the deletions. It's not complicated code; it just adds
' another function call before you can set the final range
'

Dim rng As Range
Dim wksSource As Worksheet

Debug.Print "Start MakeTableForEmail"

On Error GoTo myErrHandler

'booDeleteRow4 = False
Set wksSource = ActiveWorkbook.Worksheets("Tech Review")

Select Case strTableName
    Case vbProjectName
        Set rng = wksSource.Range(vbProjectNameRange) ' delete 4th row, note B:H are merged
    Case vbNarrative
        Set rng = wksSource.Range(vbNarrativeRange) ' note A:H are merged
    Case vbResults
        Set rng = wksSource.Range(vbResultsRange) ' none merged
        'Debug.Print " - before delete, num Results cols is: " & rng.Columns.Count
End Select

rng.Copy
' recall wksTemp is mod level variable
With wksTemp.Cells(1)
    .PasteSpecial Paste:=xlPasteValues
    .PasteSpecial Paste:=xlPasteFormats
    .PasteSpecial Paste:=xlPasteColumnWidths
    Application.CutCopyMode = False
    On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
    On Error GoTo 0
End With

' Reset range and get rid of unnecessary rows, cols
Set rng = Nothing
Select Case strTableName
    Case vbProjectName
        Set rng = wksTemp.UsedRange
        rng.EntireRow(4).Delete
    
    Case vbNarrative
        Set rng = wksTemp.UsedRange
        
    Case vbResults
        Set rng = wksTemp.UsedRange
        With rng
            .EntireColumn(8).Delete
            .EntireColumn(6).Delete
            .EntireColumn(4).Delete
            .EntireRow(29).Delete    ' row 46 on TR wks is for Vectren
        End With
End Select

Set MakeTableForEmail = rng

Debug.Print "End MakeTableForEmail"

Exit Function
myErrHandler:

    Debug.Print "Error in MakeTableForEmail: " & Err.Description
    MsgBox "An error occurred while making " & strTableName _
            & vbCrLf & vbCrLf _
            & Err.Number & vbCrLf _
            & Err.Description, _
            vbOKOnly, _
            "Error in MakeTableForEmail"
        
End Function 'MakeTableForEmail
Private Function FixRangeColors(strRangeName As String) As Boolean
' 2016-05-11 v1.0 by wdn
' objective: reset cell interior color properties to correct shades of green, white, or blue to counter the MEC theme color masking observed when written to email body
' called by WriteHTMLString
' argument: the name of the table that was just copied/pasted to the temp wks
' note: the table names, ranges, and colors have been specified as mod level constants. See declarations
' note: each table is created separately and pasted into a new instance of the temp wks, so the range is always "A1:XX", or simply the "currentregion"
' 2016-11-17 v1.1 by wdn
' eliminated "CurrentRegion" property which gives wrong area if one of the rows or cols is blank
' replaced with a UsedRange (which works b/c the tempWks is destroyed and recreated for each table)
'

Dim rng As Range
Dim i As Integer, intActivePhaseCol As Integer

On Error GoTo myErrHandler
Debug.Print "Start FixRangeColors"

Select Case strRangeName
    Case vbProjectName
        ' Building and Project Name (cols B to H are merged)
        Set rng = wksTemp.UsedRange 'Range("A1").CurrentRegion '("A1:H4") ' cols B:H are merged
        With rng
            .Range("A1:B1").Interior.Color = lngGreen
            .Range("A2:A4, B4").Interior.Color = lngLightGreen
            .Range("B2:B3").Interior.Color = lngWhite
        End With
        
    Case vbNarrative
        ' Narrative Table is only one column b/c cols A:H are merged in all rows.
        Set rng = ActiveSheet.UsedRange 'Range("A1").CurrentRegion '("A1:H9") ' cols A:H merged
        With rng
            .Cells(1).Interior.Color = lngGreen ' cell prop of range obj, using cell index (cell index incrments from L to R, top to bottom)
            .Range("A2:A9").Interior.Color = lngLightGreen ' range prop of range obj; span second to ninth rows
            ' rows 3,5,7, and 9 are white
            For i = 3 To .Rows.Count
                If i Mod 2 = 1 Then .Rows(i).Cells.Interior.Color = lngWhite 'range prop with a cell index argument (instead of "A1" style)
            Next
        End With

    Case vbResults
        ' Savings and Rebate Table, no merged cells
        ' rows 1,2,10,16, and 26 are green headers; others are light green, active phase cells are white, custom incentive row headers are blue
        ' query project info array to determine phase
        intActivePhaseCol = 5
        If varProjectInfo(3) = "PS" Then intActivePhaseCol = 4
        
        Set rng = ActiveSheet.UsedRange ' Range("A1").CurrentRegion '("A1:H30")
        With rng
            .Cells.Interior.Color = lngLightGreen
            For i = 1 To .Rows.Count
                Select Case i
                    Case 1, 2, 6, 10, 16, 26
                        .Rows(i).Cells.Interior.Color = lngGreen
                    Case Else
                        .Columns(intActivePhaseCol).Cells(i).Interior.Color = lngWhite
                End Select
            Next
            .Rows(23).Cells(1).Interior.Color = lngBlue
            .Rows(24).Cells(1).Interior.Color = lngBlue
        End With
    
End Select

Debug.Print "End FixRangeColors"

FixRangeColors = True

Exit Function

myErrHandler:

Debug.Print "Error in FixRangeColors: " & Err.Description
MsgBox "An error occurred while fixing the colors in the [specify which table]" _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in FixRangeColors"

End Function 'FixRangeColors
Private Function WriteRangeToHTMLString(strTableName As String) As String
' 2016-05-10 v.10 by wdn
' objective: capture an Excel range and convert it to HTML string to be written to outlook email
' precedents: refs mod private vars for temp wkb, wks, and ranges. See Declarations
' dependents: called three times by WriteLargeCustomRebateBody
' How does it work in a nutshell?
' - adds a temp wks (assigns to a mod level var)
' - calls MakeTableForEmail function to copy/paste a sub-table from Tech REview to a temp wks
' - calls FixRangeColors to correct interior colors (due to MEC wkb theme color issues)
' - calls key function RangeToHTML (by Ron deBruin) to create an html string, which represents the range and constitutes the email body
' - deletes temp wks
' note, screen updates were already turned off in CreateOutlookEmail
'

Dim strHTML As String
Dim rng As Range

Debug.Print "Start WriteRangeToHTMLString"

On Error GoTo myErrHandler

'' debug HTML Results table that loses formatting in Gmail body
'If strTableName = "Test" Then
'    WriteRangeToHTMLString = TestHTML
'    Debug.Print "End WriteRangeToHTMLString Test Mode"
'    Exit Function
'End If

' Note, screen udpates were already turned off in CreateMail
'add a temp sheet to TR wkb
Set wksTemp = ActiveWorkbook.Sheets.Add

Set rng = Nothing

Set rng = MakeTableForEmail(strTableName) '

If rng Is Nothing Then
    Debug.Print "MakeTableForEmail failed. Exit WriteRangeToHTML."
    GoTo myErrHandler
End If


If FixRangeColors(strTableName) Then
    'Call Pause(1) ' pause doesn't help
    strHTML = RangetoHTML(rng) ' *** This is the key Ron deBruin function
    'Call Pause(1)'doesn't help
    
Else
    MsgBox "The " & strTableName & " table was not written to HTML string."
    Debug.Print "Fail! The " & strTableName & " table was not written to HTML string."
    GoTo myErrHandler
End If

wksTemp.Delete

Debug.Print "End WriteRangeToHTMLString"

WriteRangeToHTMLString = strHTML

Exit Function
myErrHandler:
    
    Debug.Print "An error occurred while writing the " & strTableName & " table to an HTML string: " & Err.Description
    MsgBox "An error occurred while while writing the " & strTableName & " table to an HTML string." _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in WriteRangeToHTMLString"

    wksTemp.Delete
    WriteRangeToHTMLString = ""

End Function 'WriteRangeToHTMLString
Private Function RangetoHTML(rng As Range) As String
' Changed by Ron de Bruin 28-Oct-2006
' Working in Office 2000-2016
' 2016-05-03 WN pasted from http://www.rondebruin.nl/win/s1/outlook/bmail2.htm
' objective: allows for pasting a spreadsheet range into outlook body w/ formatting intact
' argument: a range object is passed by the caller
' Note, The original code adds a temp workbook and copies/pastes the range to it before reading in as a text stream.
'       It should be possible to eliminate those steps since I've already fixed up the range in a temp wks
'       in the same wkb
' how does it work?
' - (I deleted this section) copies/pastes range into separate wkb
' - uses the Publish object to write the contents of the temp wkb to an .htm file
' - creates a text stream (a file system object) to read in the .htm file to a string variable
'

 Dim fso As Object
 Dim ts As Object
 Dim TempFile As String
 
Dim poPublishObj As PublishObject

On Error GoTo myErrHandler
Debug.Print "Start RangeToHTML"

' make the ".htm" file
' "temp" is an environment variable (a folder) at this path: "C:\Users\wnessle\AppData\Local\Temp"
    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"
    
' ** WDN edited to change workbook ojbect from "TempWB." to activeworkbook.
    'Publish the sheet to a htm file
    
    Set poPublishObj = ActiveWorkbook.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=wksTemp.Name, _
         Source:=rng.Address, _
         HtmlType:=xlHtmlStatic) 'note xlHtmlCalc was deprecated in Excel 2007
        
    poPublishObj.Publish (True)
    
    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center", "align=left")
    
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing

 Debug.Print "End RangeToHTML"
 
 Exit Function

myErrHandler:
    
    Debug.Print "An error occurred while writing the range to an HTML string: " & Err.Description
    MsgBox "An error occurred while while writing the range to an HTML string." _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in RangeToHTML"
          
          
End Function 'RangeToHTML

Private Function WriteRSATextBody(incentStructure As Variant, projNum As Variant, projName As Variant, orgBldg As Variant) As String
' 2016-12-28 WN
' Objective: compose the plain text body for the form email to RSA;
' Called by WriteTextBody();
' Arguments: Incentive Strcture, Proj #, Proj Name, Org-Bldg;
' (Note the arguments are all available in a public variant array, populated by GetProjectInfo,
' but passing them is a better way for maintenance)
'
'strBody =="Hello Cade and Chuck,
'
'INCENTIVE ELIGIBILITY CRITERIA:
'----------------------------------------------------
'Incentive Structure: "&E8&"
'SOC Requirement: >=1.0
'----------------------------------------------------
'
'Attached please find Nexant's Technical Review (which includes RSA Cost Effectiveness spreadsheet) for AP "& 'Tech Review'!B7&", "&Information1!B27&" at "&Information1!B10&". Please conduct your cost-effectiveness tests based on the information provided. Thank you."

Dim strBody As String
Dim str50EmDashes As String ' dash is 45, underscore is 95, en-dash is 150, em-dash is 151

Debug.Print "Start WriteRSATextBody"
str50EmDashes = String(50, Chr(151))

strBody = "Hello Cade and Chuck," & vbCrLf
strBody = strBody & vbCrLf
'strBody = strBody & "INCENTIVE ELIGIBILITY CRITERIA:" & vbCrLf
'strBody = strBody & str50EmDashes & vbCrLf
'strBody = strBody & "Incentive Structure: " & incentStructure & vbCrLf
'strBody = strBody & "SOC Requirement: " & ">=1.0" & vbCrLf
'strBody = strBody & str50EmDashes & vbCrLf
'strBody = strBody & vbCrLf
strBody = strBody & "Attached please find Nexant's Technical Review (which " _
        & "includes RSA Cost Effectiveness spreadsheet) for AP " _
        & projNum & ", " & projName & " at " & orgBldg _
        & ". Please conduct your cost-effectiveness tests based on the " _
        & "information provided." & vbCrLf & vbCrLf _
        & "Thank you." & vbCrLf

WriteRSATextBody = strBody

Debug.Print "End WriteRSATextBody"

End Function 'WriteRSABody

Private Function WriteRSAhtmlBody(incentStructure As Variant, projNum As Variant, projName As Variant, orgBldg As Variant) As String
' 2016-12-28 WN
' Objective: compose the plain text body for the form email to RSA;
' Called by WriteTextBody();
' Arguments: Incentive Strcture, Proj #, Proj Name, Org-Bldg;
' (Note the arguments are all available in a public variant array, populated by GetProjectInfo,
' but passing them is a better way for maintenance)
'
'strBody =="Hello Cade and Chuck,
'
'INCENTIVE ELIGIBILITY CRITERIA:
'----------------------------------------------------
'Incentive Structure: "&E8&"
'SOC Requirement: >=1.0
'----------------------------------------------------
'
'Attached please find Nexant's Technical Review (which includes RSA Cost Effectiveness spreadsheet) for AP "& 'Tech Review'!B7&", "&Information1!B27&" at "&Information1!B10&". Please conduct your cost-effectiveness tests based on the information provided. Thank you."

Dim strBody As String
Dim str25EmDashes As String ' dash is 45, underscore is 95, en-dash is 150, em-dash is 151

Debug.Print "Start WriteRSAhtmlBody"
str25EmDashes = String(25, Chr(151))

' HTML tags
strBody = "<html><body>"

' & Greeting
strBody = strBody & _
        vbHTMLSpanStyle & "Hello Cade and Chuck,</span><br><br>"

'strBody = "Hello Cade and Chuck," & vbCrLf
'strBody = strBody & vbCrLf
'strBody = strBody & vbHTMLSpanStyle & "INCENTIVE ELIGIBILITY CRITERIA:</span><br>"
'strBody = strBody & vbHTMLSpanStyle & str25EmDashes & "</span><br>"
'strBody = strBody & vbHTMLSpanStyle & "Incentive Structure: " & incentStructure & "</span><br>"
'strBody = strBody & vbHTMLSpanStyle & "SOC Requirement: " & ">=1.0" & "</span><br>"
'strBody = strBody & vbHTMLSpanStyle & str25EmDashes & "</span><br><br>"

strBody = strBody & vbHTMLSpanStyle & "Attached please find Nexant's Technical Review (which " _
        & "includes RSA Cost Effectiveness spreadsheet) for AP " _
        & projNum & ", " & projName & " at " & orgBldg _
        & ". Please conduct your cost-effectiveness tests based on the " _
        & "information provided. <br><br> " _
        & "Thank you.</span><br>" _
        & "</body></html>"
        
WriteRSAhtmlBody = strBody

Debug.Print "End WriteRSAhtmlBody"

End Function 'WriteRSAhtmlBody

Private Function SheetExists(wksName As String) As Boolean
'2016-12-28 WN
' per John Walkenbach "Excel 2010 Power Programming with VBA"

Dim obWks As Object

On Error Resume Next
Set obWks = ActiveWorkbook.Sheets(wksName)
If Err.Number = 0 Then SheetExists = True _
Else SheetExists = False

End Function






Attribute VB_Name = "Form_Email"
Attribute VB_Base = "0{B24F4A22-A951-44C3-B09A-514C24669701}{65E1EEFC-CED9-46F4-8EB5-3EAAEE98116D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private intEscape As Integer ' to keep track of sender and password attempts


Private Sub Button_Cancel_Click()
'2016-12-09 WN
' clear the public variables, notify that no email will be sent, and close the form

strSenderAddress = ""
strSenderPassword = ""
'MsgBox "The email will be cancelled."

Unload Me

End Sub

Private Sub Button_Okay_Click()

'2016-12-09 WN
' try again or cancel if email input was not validated after 3 tries
' Sub sets public vars for: personal note, final path, deltek, due date,
' and email name & pswd (via function call)

Dim intResult As Integer
Dim booUnloadMe As Boolean, booRetry As Boolean

booRetry = False

If VerifyEmail(Me.TextBox_Sender, Me.TextBox_Pswd) Then
    'booUnloadMe = True
ElseIf intEscape = 3 Then
' continue
Else
    intResult = MsgBox("The G-Suite address was not recognized as a valid email address " _
            & "or the password is blank. Please check and resubmit or click cancel.", vbRetryCancel, "Invalid Entry")
    If intResult = vbRetry Then
        Me.TextBox_Sender.SetFocus
        intEscape = intEscape + 1
        'MsgBox "intEscape is: " & intEscape
        booRetry = True
    Else
        MsgBox "This email was cancelled."
        'booUnloadMe = True
    End If
End If

If intEscape = 3 Then ' important that this is first condition
    MsgBox "After three strikes, this email was cancelled."
ElseIf booRetry Then
    ' do nothing, wait for verified email
    Exit Sub
Else
    ' Set public vars and populate public array variable w/ project details
    strPersonalNote = Me.TextBox_Note.Text
    varProjectInfo(5) = Me.TextBox_Path.Text
    varProjectInfo(7) = Me.TextBox_Deltek.Text
    varProjectInfo(8) = Me.TextBox_Due.Text

    ' run remainder of procedure
    ' actually, send execution back to a sub in Email module instead of running from here
    'Application.Run "Email.CreateGoogleEmail", strEmailType ' arg is a public var set when button is clicked
    'Application.Run "Email.LeaveFeedback", strEmailType ' ditto
    Application.Run "Email.ContinueMain", strEmailType
    
End If

Unload Me

End Sub
Private Function VerifyEmail(strSender As String, strPswd As String) As Boolean

' 2016-12-09 WN
' check to make sure we have values for both sender name and pswd
' * this function sets public variables in "Email" module
' 2016-12-20 WN: other inputs will NOT be verified at this time

Dim booVerified As Boolean

If strSender <> "" Then
    ' validate email format by finding "@" and verifying a dot at position three chars from the end
    If InStr(strSender, "@") > 1 And InStrRev(strSender, ".") = Len(strSender) - 3 Then
        ' good
        booVerified = True
        strSenderAddress = strSender
    End If
End If

If booVerified Then
    If strPswd <> "" Then
        strSenderPassword = strPswd
    Else
        booVerified = False
    End If
End If

VerifyEmail = booVerified

End Function



Private Sub Frame2_Click()

End Sub

Private Sub TextBox_Deltek_Change()

End Sub

Private Sub TextBox_Note_Change()

End Sub

Private Sub UserForm_Initialize()
 
 intEscape = 0
 
End Sub
Attribute VB_Name = "IPAdminEmails"

' String constant
Private Const vbDblQuote As String = """" ' from a comment on stackoverflow (yes,it is four double-quote characters; not three)
Private Const vbSngQuote As String = "'" ' from a comment on stackoverflow

' Color constants
Private Const lngLightGreen As Long = 12379095 '?rgb(215,227,188)
Private Const lngGreen As Long = 4232518  '?rgb(70,149,64)
Private Const lngWhite As Long = 16777215 '?rgb(255,255,255)
Private Const lngBlue As Long = 15773696 ' ?rgb(0,176,240), standard blue

' Common HTML Attributes (copy this into a txt editor to edit)
Private Const vbHTMLSpanStyle As String = "<span style=" & vbSngQuote & "font-family:" & vbDblQuote & "Calibri" & vbDblQuote & "," & vbDblQuote & "sans-serif" & vbDblQuote & ";" & "font-size:11.0pt" & vbSngQuote & ">"

' HTML email bodies, note paragraph tags
Private Const vbLtrGenBody = "<p>" & vbHTMLSpanStyle & "Please upload this TR to the Db, generate the applicable documents, and save to the Final folder.</span></p>"
Private Const vbSendToMECBody = "<p>" & vbHTMLSpanStyle & "I have completed my review of this project. It is ready to be sent to MEC.</span></p>"
Private Const vbDeemedSavingsBody = "<p>" & vbHTMLSpanStyle & "I have completed my review of this streamlined prescriptive project. It is ready to be preliminarily entered into TrakSmart to determine the deemed savings and confirm the incentive amount.</span></p>"
Private Const vbMeterInfoBody = "<p>" & vbHTMLSpanStyle & "I need the following account/meter-related information for this site: </span></p>"
Private Const vbStalledBody = "<p>" & vbHTMLSpanStyle & "After a long delay, this project is now considered stalled. Please update the Db accordingly, generate the Stalled Letter, and save it to the Final folder.</span></p>"
Private Const vbLrgCustRebate1 = "<p>" & vbHTMLSpanStyle & "I am providing you visibility into the following custom project with an incentive " & ">" & "$100,000 that is ready to be sent to RSA for cost-effectiveness testing. In the absence of any response from you, we will send this project to RSA 24 hours after delivery of this email.</span></br>"
Private Const vbLrgCustRebate2 = "<p>" & vbHTMLSpanStyle & "Please do not hesitate to contact me with any questions regarding this project.</span></p>"

' Letter Type constants (must be Public b/c referenced by a caller on the 'IPAdmin Emails'! sheet, which is effectively a distinct code module)
Public Const vbLetterGenerationType As String = "Letter Generation"
Public Const vbSendToMECType As String = "Send to MEC"
Public Const vbDeemedSavingsType As String = "Deemed Savings"
Public Const vbMeterInfoType As String = "Meter Info"
Public Const vbStalledProjectType As String = "Stalled Project"
Public Const vbLargeCustomRebateType As String = "Large Custom Rebate"

' Table Names and Ranges
Private Const vbProjectName As String = "Project Name"
Private Const vbProjectNameRange As String = "A1:H5" 'note B:H are merged but RangeToHTML truncates text to actual col widths regardless of merge state

Private Const vbNarrative As String = "Project Narrative"
Private Const vbNarrativeRange As String = "A57:H65" 'note A:H are merged, but RangeToHTML truncates (see note above)

Private Const vbResults As String = "Project Results"
Private Const vbResultsRange As String = "A18:H47" 'none merged

' Books, Sheets, and Ranges
Private wkbTemp As Workbook
Private wksTemp As Worksheet
Private rng1 As Range, rng2 As Range, rng3 As Range

' Variables
Private varProjectInfo(1 To 10) As Variant 'e.g. Org-Bldg Name, AP#, ECM ID#, project folder path,...
Private strProjectPath As String
Private booRemote As Boolean ' to distinguish local Q:\\ files from remote files;
Private strFeedback As String ' to report back to the user on the control screen

Public Sub Main(strType As String)
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: launch a series of procedures to create and draft IPAdmin emails
' Precedents: button cick events on the 'IPAdmin Emails'! sheet
' Arguments: letter type string
' Dependents: series of procedures to create and draft IPAdmin emails

Debug.Print "Start Main"

Call GetProjectInfo

Call CreateEmail(strType)

Call LeaveFeedback(strType)

Debug.Print "End Main"

End Sub 'Main
Private Sub GetProjectInfo()
'v1.0
'2016-03-21 by Willis Nessle
'Objective: collect the project information in a Module 1 private string array (10x1)
'Precedents: Main(), public variables for the string array, and the "local or remote?" boolean
'Arguments:
'Dependents: the array populated here is used for email subject and body; the boolean is used for the hyperlink
'Code notes:
'v1.1
'2016-04-12
'added error checking to make sure a "Final" folder actually exists before creating the path to it
'2016-05-11
'added 6th element to array to capture Project Name, required for LargeCustomRebate email.
'edited to make use of file system objects for more efficient code, and easier to interpret
'code note: the GetParentFolderName method returns the parent of the *folder in which the file resides, not parent of the file
' array now stores the Final folder path instead of the project path, which may be one in the same.

Dim strFinalPath As String
Dim fso As FileSystemObject
Dim booInFinal As Boolean, booFinalExists As Boolean

Debug.Print "Start GetProjectInfo"

booRemote = False
booInFinal = False

strProjectPath = ActiveWorkbook.Path ' mod private string variable
Debug.Print "activeworkbook path is " & ActiveWorkbook.Path

' determine if workbook is on MSN's Q: drive
' If it's on Q:, determine if it's in Final folder;
' If it's not in Final, build a Final folder path and determine if a Final folder exists.
' If a Final folder does not exist, build the path and create the folder.

Set fso = CreateObject("Scripting.FileSystemObject")
With fso
    If .GetDriveName(strProjectPath) <> "Q:" Then booRemote = True
    If Not booRemote Then
        If .GetFolder(strProjectPath).Name = "Final" Then
            booInFinal = True
            strFinalPath = strProjectPath
        End If ' folder name is Final
        If Not booInFinal Then
            strFinalPath = .BuildPath(strProjectPath, "Final")
            If Not .FolderExists(strFinalPath) Then
                .CreateFolder (strFinalPath)
                Debug.Print "File was not in Final folder. Final folder did not exist. Created a Final folder"
            End If ' Not Exists
        End If ' Not InFinal
    End If ' Not Remote
End With

'debug
'Debug.Print "File is remote?" & booRemote
'Debug.Print "File is in Final folder?" & booInFinal

' Populate mod level array with project info for use by other Subs
With ActiveWorkbook.Worksheets("Tech Review")
    varProjectInfo(1) = .Range("b3") ' Org-Bldg
    varProjectInfo(2) = .Range("b7") ' project #
    varProjectInfo(3) = .Range("e8") ' Phase
        If varProjectInfo(3) = "Preapproval" Then varProjectInfo(3) = "PS"
        If varProjectInfo(3) = "Installed" Then varProjectInfo(3) = "PIN"
    varProjectInfo(4) = .Range("e7") ' ECM ID #
    varProjectInfo(5) = MakeFilePathURL(strFinalPath) ' Final folder path
    varProjectInfo(6) = .Range("b5") ' project name
End With

' debug array
'For i = 1 To UBound(varProjectInfo)
'    Debug.Print varProjectInfo(i)
'Next

Debug.Print "End GetProjectInfo"

End Sub 'GetProjectInfo
Private Function MakeFilePathURL(strPath As String)
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: Replace spaces in a file path with "%20".
' Precedents: GetProjectInfo, the public string array item 5 is the file path
' Arguments: the file path is passed by the caller
' Dependents: the file path is required to make a link in the email body (see WriteBody, CreateEmail)
' Code notes: apparently need to replaces spaces in the file path to make it a valid URL in HTML syntax

Const vbWhiteSpace As String = "%20"
Dim strTemp As String

Debug.Print "start MakeFilePathURL"
strTemp = Replace(strPath, " ", vbWhiteSpace)
'Debug.Print strTemp

Debug.Print "End MakeFilePathURL"

MakeFilePathURL = strTemp

End Function 'MakeFilePathURL
Private Sub CreateEmail(strLetterType As String)
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Create one of the four IPAdmin template emails.
' Precedents: called by Main
' Arguments: the email type is passed by the caller
' Dependents: calls functions to write the subject line and the email body

' Code notes:
'   The reviewing engineer must fill in any blanks, edit the body as needed, and send the msg.
'   The email body is HTML to allow for the hyperlink
'   ** Note, I've set a reference to M'soft Outlook Object Library in
'   Tools >> References. If this module is pasted into another wkb,
'   the reference must be set in that wkb.

' 2016-05-11 v1.1
' udpated to accomodate Stalled Project email to IPAdmin and LargeCustomRebate email to Bill.
' Stalled project is similar to other IPAdmin emails
' LargeCustomRebate email is different. A complex HTML string is constructed from text and Excel ranges. It goes to Bill not IPAdmin
' moved feedback to here from WriteBody

' declare Outlook objects
Dim objOutlookApp As Outlook.Application, objOutlookMail As MailItem

Debug.Print "Start CreateEmail"

On Error GoTo myErrHandler
       
With Application
    .ScreenUpdating = False
    .EnableEvents = False
    .DisplayAlerts = False
End With

Set objOutlookApp = CreateObject("Outlook.Application")
Set objOutlookMail = objOutlookApp.CreateItem(0)

Select Case strLetterType
    Case vbLargeCustomRebateType
        With objOutlookMail
            .To = "bschutten@nexant.com"
            .CC = "ipadmin@nexant.com"
            .Subject = WriteSubject(strLetterType)
            .HTMLBody = WriteLargeCustomRebateBody(strLetterType)
            .Display
        End With
        ' leave feedback
    Case Else
        With objOutlookMail
            .To = "IPAdmin@nexant.com"
            .Subject = WriteSubject(strLetterType)
            .HTMLBody = WriteBody(strLetterType)
            .Display
        End With
        
End Select

strFeedback = "The " & strLetterType & " email was created on " & Format(Now(), "mm/dd/yy")

Set objOutlookMail = Nothing
Set objOutlookApp = Nothing

With Application
    .ScreenUpdating = True
    .EnableEvents = True
    .DisplayAlerts = True
End With

Debug.Print "End CreateEmail"

Exit Sub

myErrHandler:

    Debug.Print "There was an error..."
    Debug.Print Err.Number & vbCrLf & Err.Description
    
    Set objOutlookMail = Nothing
    Set objOutlookApp = Nothing
    
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
    End With
    
    Debug.Print "End CreateEmail"

End Sub ' CreateEmail
Private Function WriteSubject(strType As String) As String
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Write the Subject line for the IPAdmin email.
' Precedents: public variant array declared in the IPAdmin Emails wks Event Handler
' Arguments: the email type is passed by the caller; it's a public constant string - see Declarations
' Dependents: Sub CreateEmail
' Code notes: this has to be separae from the WriteLetterGenerator b/c that is a function that returns one string;
'        One could return an array of strings but keep it simple
' 2015-05-11 v1.1
' added Stalled Project type
' added Large Custom Rebate type

Dim strSubject As String

Debug.Print "Start WriteSubject"

Select Case strType
    Case vbLetterGenerationType, vbSendToMECType, vbStalledProjectType
        'Org-Bldg-AP#-Phase- Letter Generation, or Send to MEC, or Stalled Project
        strSubject = varProjectInfo(1) & " - AP" & _
                    Str(varProjectInfo(2)) & " - " & _
                    varProjectInfo(3) & " - " & strType  '
    
    Case vbDeemedSavingsType
        'Org - Building - AP# - SPP - Deemed Savings
        strSubject = varProjectInfo(1) & " - AP" & _
                    Str(varProjectInfo(2)) & " - SPP - " & strType '
    
    Case vbMeterInfoType
        'Org - Building - Meter Information
        strSubject = varProjectInfo(1) & " - " & strType  '
        
    Case vbLargeCustomRebateType
        strSubject = "Custom Project with Incentive >$100,000 - PS Phase - " _
                    & varProjectInfo(1) & " - " & varProjectInfo(2) _
                    & ", " & varProjectInfo(6)
End Select

'Debug.Print "Subject: " & strSubject

WriteSubject = strSubject

Debug.Print "End WriteSubject"

End Function 'WriteSubject

Private Function WriteBody(strType As String)
' v1.0
' 2016-03-21 by Willis Nessle
' Objective: Writes the "Letter Generation" template email body.
' Arguments: the email type is passed by the caller
' Precedents: public variant array declared in the IPAdmin Emails wks Event Handler
'               public boolean determines whether to insert hyperlink or not
' Dependents: Sub CreateEmail
' Code notes: refers to public constants for email bodies and double quotes
'             need a constant for double quotes to accomodate the quotes required for HTML syntax
'

Dim strBody As String
Dim strInfo As String

Debug.Print "Start WriteBody"

' HTML tags
strBody = "<html><body>"

' & Greeting
strBody = strBody & _
        vbHTMLSpanStyle & "Hello IP Admin,</span><br><br>"

' & Request
Select Case strType
Case vbLetterGenerationType
    strBody = strBody & vbLtrGenBody

Case vbSendToMECType
    strBody = strBody & vbSendToMECBody

Case vbDeemedSavingsType
    strBody = strBody & vbDeemedSavingsBody

Case vbMeterInfoType
    strBody = strBody & vbMeterInfoBody

Case vbStalledProjectType
    strBody = strBody & vbStalledBody

End Select

' Project Info in a separate string
Select Case strType
Case vbMeterInfoType
    strInfo = "<ul style=" & vbDblQuote & "list-style-type:disc" & vbDblQuote & ">"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Regional Rate Code</span>"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Current account/meter number</span>"
    strInfo = strInfo & "<li>" & vbHTMLSpanStyle & "Other</span></ul>" ' don't need the closing list tag </li>

Case vbStalledProjectType
    If Not booRemote Then ' boolean was set in GetProjectInfo
        strInfo = vbHTMLSpanStyle & "Hyperlink to <A href=" & varProjectInfo(5) & "\>Final</a> folder</span><br>"
    Else
        strInfo = vbHTMLSpanStyle & "Hyperlink to Final folder</span><br>"
    End If
    strInfo = strInfo & vbHTMLSpanStyle & "Deltek #: </span><br>" '& varProjectInfo(2) & "<br>" ' Deltek # is not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "ECM ID#: " & Str(varProjectInfo(4)) & "</span><br>"

Case Else
    If Not booRemote Then ' boolean was set in GetProjectInfo
        strInfo = vbHTMLSpanStyle & "Hyperlink to <A href=" & varProjectInfo(5) & "\>Final</a> folder</span><br>"
    Else
        strInfo = vbHTMLSpanStyle & "Hyperlink to Final folder</span><br>"
        
    End If
    strInfo = strInfo & vbHTMLSpanStyle & "Deltek #: </span><br>" '& varProjectInfo(2) & "<br>" ' Deltek # is not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "ECM ID#: " & Str(varProjectInfo(4)) & "</span><br>"
    strInfo = strInfo & vbHTMLSpanStyle & "MEC Due Date: </span><br>" '& varProjectInfo(8) & "<br>" '' due date not available yet
    strInfo = strInfo & vbHTMLSpanStyle & "Year Received: </span><br>" '& varProjectInfo(9) ' this is a temporary field, will go away so ignore it
End Select

' Combine Body & Info strings (*use <br> instead of <p> to avoid a blank line following "Thank you,")
strBody = strBody & strInfo & "<br>" & vbHTMLSpanStyle & _
        "Thank you,</span><br>" & _
        "</body></html>"
      
Debug.Print "Body: " & strBody

WriteBody = strBody

Debug.Print "End WriteBody"

End Function 'WriteBody

Private Sub LeaveFeedback(strType As String)
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: leave important messages after procedures run
'
'2016-05-10 v1.1
' added Stalled Letter email to IPAdmin; and LargeCustomRebate email to Bill
'
Dim rng As Range

Debug.Print "Start LeaveFeedback"

On Error Resume Next

 Set rng = Worksheets("IPAdmin Emails").Range("d2")
 
Select Case strType
    Case vbLetterGenerationType
        rng.Value = strFeedback
    
    Case vbSendToMECType
        
         rng.Offset(3, 0).Value = strFeedback ' ("d5")
     
    'Case vbDeemedSavingsType ' not needed
    '    Set rng = Worksheets("IPAdmin Emails").Range("d10")
    '     rng.Value = strFeedback
    
    Case vbMeterInfoType
        Set rng = Worksheets("IPAdmin Emails").Range("d8")
         rng.Value = strFeedback
         
    Case vbStalledProjectType
        Set rng = Worksheets("IPAdmin Emails").Range("d11")
         rng.Value = strFeedback
    
    Case vbLargeCustomRebateType
        Set rng = Worksheets("IPAdmin Emails").Range("d14")
         rng.Value = strFeedback
End Select

' Extra notes
If strType = vbLetterGenerationType Or strType = vbSendToMECType Then
    rng.Offset(1, 0).Value = "Remember to fill in the Deltek # and Due Dates."
    If booRemote Then rng.Offset(2, 0).Value = "(and insert a hyperlink to the Final folder.)"
End If

Debug.Print "End LeaveFeedback"

End Sub 'LeaveFeedback
Private Function WriteLargeCustomRebateBody(strType As String) As String
' 2016-05-11 v1.0 by wdn
' objective: construct an HTML string including an introduction and three excerpts from the TR table
' precedents: called by CreateMail()
'             refers to public constants for letter types and html snippets. See declararions
' dependents: another sub creates the email object for which this string is the HTMLBody
' notes:
' - concatenate intro, closing, and separator as html string
' - concatenate three tables, as HTML strings, including a blank line after each


Const vbWhiteSpace As String = "%20"
Dim strBody As String

Debug.Print "Start WriteLargeCustomRebateBody"

On Error GoTo myErrHandler

' HTML tags
strBody = "<html><body>"

' & Greeting
strBody = strBody & "<p>" & vbHTMLSpanStyle & "Tina/Amber:</span></p>"

' Introduction
strBody = strBody & vbLrgCustRebate1 _
            & vbHTMLSpanStyle & "</span><br>" _
            & vbLrgCustRebate2

' Closing (note, <br> instead of <p> avoids blank line following "Regards,")
strBody = strBody & vbHTMLSpanStyle & "Regards,</span><br>" _
                  & vbHTMLSpanStyle & "- Bill</span><br>"
        
' =================

strBody = strBody & String(24, "=") & "<br>"

' Range 1 - Bldg & Project Name
strBody = strBody & WriteRangeToHTMLString(vbProjectName)
strBody = strBody & "<p>" & vbHTMLSpanStyle & "</span></p>"

' Range 2 - Narrative
strBody = strBody & WriteRangeToHTMLString(vbNarrative)
strBody = strBody & "<p>" & vbHTMLSpanStyle & "</span></p>"

' Range 3 - Results
strBody = strBody & WriteRangeToHTMLString(vbResults)
strBody = strBody & "<p>" & vbHTMLSpanStyle & "</span></p>" _
            & "</body></html>"

WriteLargeCustomRebateBody = strBody

Debug.Print "End WriteLargeCustomRebateBody"

Exit Function
myErrHandler:
    
    Debug.Print "Error in WriteLargeCustomRebateBody: " & Err.Description
    MsgBox "An error occurred while concatenating the HTML string." _
            & vbCrLf & vbCrLf _
            & Err.Number & vbCrLf _
            & Err.Description, _
            vbOKOnly, _
            "Error in WriteLargeCustomRebateBody"
        
End Function 'WriteLargeCustomRebateBody
Private Function MakeTableForEmail(strTableName As String) As Range
' 2016-05-10 v1.0 by wdn
' Objective: Copy excerpts from the Tech Review table to a temp wks
' Arguments: a string indicating which table excerpt to create
' Precedents: refs Mod level private vars wksTemp and strings that identify required ranges,
' Dependents: called by WriteRangeToHTMLString()
' Return Val: a range (excerpt of the primary Tech Review table)
' code notes:
' - copy/paste required excerpt from the primary TR summary
' - (to do) reset the col widths as appropriate (e.g., length of Project Name string)
' 2016-11-17 v1.1 by wdn
' Fixed bug that abbreviated the table if an entire row (or col) was unexpectedly blank
' E.g., the range property "CurrentRegion" selects area bounded by first *empty rows and cols, so
' if a narrative row was blank, the "CurrentRegion" only extended to the row immediately preceding
' For the revision I removed "CurrentRegion" and defined the range with Activesheet.UsedRange instead
' Note 1, this only works b/c the tempWks is destroyed and recreated for each table,
' otherwise usedrange might be wrong if you followed a large table with a small table.
' Specifically, it would retain dims of large table!
' Note 2, During test I found that after I deleted a row and pasted range to a new location,
' the UsedRange was just the remaining rows in the new location, as expected. That is, it did not
' include the original cells before the paste and delete. However, if I just cleared the values,
' then the usedrange remained same dims, as expected.
' Note 3, If this fails, just use the brute-force method of using a utility function to find the
' last row and col of each range after the deletions. It's not complicated code; it just adds
' another function call before you can set the final range

Dim rng As Range
Dim wksSource As Worksheet

Debug.Print "Start MakeTableForEmail"

On Error GoTo myErrHandler

booDeleteRow4 = False
Set wksSource = ActiveWorkbook.Worksheets("Tech Review")

Select Case strTableName
    Case vbProjectName
        Set rng = wksSource.Range(vbProjectNameRange) ' delete 4th row, note B:H are merged
    Case vbNarrative
        Set rng = wksSource.Range(vbNarrativeRange) ' note A:H are merged
    Case vbResults
        Set rng = wksSource.Range(vbResultsRange) ' none merged
        'Debug.Print " - before delete, num Results cols is: " & rng.Columns.Count
End Select

rng.Copy
' recall wksTemp is mod level variable
With wksTemp.Cells(1)
    .PasteSpecial Paste:=xlPasteValues
    .PasteSpecial Paste:=xlPasteFormats
    .PasteSpecial Paste:=xlPasteColumnWidths
    Application.CutCopyMode = False
    On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
    On Error GoTo 0
End With

' Reset range and get rid of unnecessary rows, cols
Set rng = Nothing
Select Case strTableName
    Case vbProjectName
        Set rng = wksTemp.UsedRange
        rng.EntireRow(4).Delete
    
    Case vbNarrative
        Set rng = wksTemp.UsedRange
        
    Case vbResults
        Set rng = wksTemp.UsedRange
        With rng
            .EntireColumn(8).Delete
            .EntireColumn(6).Delete
            .EntireColumn(4).Delete
            .EntireRow(29).Delete    ' row 46 on TR wks is for Vectren
        End With
End Select

Set MakeTableForEmail = rng

Debug.Print "End MakeTableForEmail"

Exit Function
myErrHandler:

    Debug.Print "Error in MakeTableForEmail: " & Err.Description
    MsgBox "An error occurred while making " & strTableName _
            & vbCrLf & vbCrLf _
            & Err.Number & vbCrLf _
            & Err.Description, _
            vbOKOnly, _
            "Error in MakeTableForEmail"
        
End Function 'MakeTableForEmail
Private Function FixRangeColors(strRangeName As String) As Boolean
' 2016-05-11 v1.0 by wdn
' objective: reset cell interior color properties to correct shades of green, white, or blue to counter the MEC theme color masking observed when written to email body
' called by MakeTableForEmail
' argument: the name of the table that was just copied/pasted to the temp wks
' note: the table names, ranges, and colors have been specified as mod level constants. See declarations
' note: each table is created separately and pasted into a new instance of the temp wks, so the range is always "A1:XX", or simply the "currentregion"
' 2016-11-17 v1.1 by wdn
' eliminated "CurrentRegion" property which gives wrong area if one of the rows or cols is blank
' replaced with a UsedRange (which works b/c the tempWks is destroyed and recreated for each table)

Dim rng As Range
Dim i As Integer, intActivePhaseCol As Integer

On Error GoTo myErrHandler
Debug.Print "Start FixRangeColors"

Select Case strRangeName
    Case vbProjectName
        ' Building and Project Name (cols B to H are merged)
        Set rng = wksTemp.UsedRange 'Range("A1").CurrentRegion '("A1:H4") ' cols B:H are merged
        With rng
            .Range("A1:B1").Interior.Color = lngGreen
            .Range("A2:A4, B4").Interior.Color = lngLightGreen
            .Range("B2:B3").Interior.Color = lngWhite
        End With
        
    Case vbNarrative
        ' Narrative Table is only one column b/c cols A:H are merged in all rows.
        Set rng = ActiveSheet.UsedRange 'Range("A1").CurrentRegion '("A1:H9") ' cols A:H merged
        With rng
            .Cells(1).Interior.Color = lngGreen ' cell prop of range obj, using cell index (cell index incrments from L to R, top to bottom)
            .Range("A2:A9").Interior.Color = lngLightGreen ' range prop of range obj; span second to ninth rows
            ' rows 3,5,7, and 9 are white
            For i = 3 To .Rows.Count
                If i Mod 2 = 1 Then .Rows(i).Cells.Interior.Color = lngWhite 'range prop with a cell index argument (instead of "A1" style)
            Next
        End With

    Case vbResults
        ' Savings and Rebate Table, no merged cells
        ' rows 1,2,10,16, and 26 are green headers; others are light green, active phase cells are white, custom incentive row headers are blue
        ' query project info array to determine phase
        intActivePhaseCol = 5
        If varProjectInfo(3) = "PS" Then intActivePhaseCol = 4
        
        Set rng = ActiveSheet.UsedRange ' Range("A1").CurrentRegion '("A1:H30")
        With rng
            .Cells.Interior.Color = lngLightGreen
            For i = 1 To .Rows.Count
                Select Case i
                    Case 1, 2, 6, 10, 16, 26
                        .Rows(i).Cells.Interior.Color = lngGreen
                    Case Else
                        .Columns(intActivePhaseCol).Cells(i).Interior.Color = lngWhite
                End Select
            Next
            .Rows(23).Cells(1).Interior.Color = lngBlue
            .Rows(24).Cells(1).Interior.Color = lngBlue
        End With
    
End Select

Debug.Print "End FixRangeColors"

FixRangeColors = True

Exit Function

myErrHandler:

Debug.Print "Error in FixRangeColors: " & Err.Description
MsgBox "An error occurred while fixing the colors in the [specify which table]" _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in FixRangeColors"

End Function 'FixRangeColors
Private Function WriteRangeToHTMLString(strTableName As String) As String
' 2016-05-10 v.10 by wdn
' objective: capture an Excel range and convert it to HTML string to be written to outlook email
' precedents: refs mod private vars for temp wkb, wks, and ranges. See Declarations
' dependents: called three times by WriteLargeCustomRebateBody
' How does it work in a nutshell?
' - adds a temp wks (assigns to a mod level var)
' - calls MakeTableForEmail function to copy/paste a sub-table from Tech REview to a temp wks
' - calls FixRangeColors to correct interior colors (due to MEC wkb theme color issues)
' - calls key function RangeToHTML (by Ron deBruin) to create an html string, which represents the range and constitutes the email body
' - deletes temp wks
' note, screen updates were already turned off in CreateEmail
'

Dim strHTML As String
Dim rng As Range

Debug.Print "Start WriteRangeToHTMLString"

On Error GoTo myErrHandler

' Note, screen udpates were already turned off in CreateMail

'add a temp sheet to TR wkb
Set wksTemp = ActiveWorkbook.Sheets.Add

Set rng = Nothing

Set rng = MakeTableForEmail(strTableName) '

If rng Is Nothing Then
    Debug.Print "MakeTableForEmail failed. Exit WriteRangeToHTML."
    GoTo myErrHandler
End If


If FixRangeColors(strTableName) Then
    strHTML = RangetoHTML(rng) ' *** This is the key Ron deBruin function
    'Debug.Print "Success! Wrote " & strTableName & " to HTML string."
Else
    MsgBox "The " & strTableName & " table was not written to HTML string."
    Debug.Print "Fail! The " & strTableName & " table was not written to HTML string."
    GoTo myErrHandler
End If

wksTemp.Delete

Debug.Print "End WriteRangeToHTMLString"

WriteRangeToHTMLString = strHTML

Exit Function
myErrHandler:
    
    Debug.Print "An error occurred while writing the " & strTableName & " table to an HTML string: " & Err.Description
    MsgBox "An error occurred while while writing the " & strTableName & " table to an HTML string." _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in WriteRangeToHTMLString"

    wksTemp.Delete
    WriteRangeToHTMLString = ""

End Function 'WriteRangeToHTMLString
Private Function RangetoHTML(rng As Range) As String
' Changed by Ron de Bruin 28-Oct-2006
' Working in Office 2000-2016
' 2016-05-03 WN pasted from http://www.rondebruin.nl/win/s1/outlook/bmail2.htm
' objective: allows for pasting a spreadsheet range into outlook body w/ formatting intact
' argument: a range object is passed by the caller
' Note, The original code adds a temp workbook and copies/pastes the range to it before reading in as a text stream.
'       It should be possible to eliminate those steps since I've already fixed up the range in a temp wks
'       in the same wkb
' how does it work?
' - (I deleted this section) copies/pastes range into separate wkb
' - uses the Publish object to write the contents of the temp wkb to an .htm file
' - creates a text stream (a file system object) to read in the .htm file to a string variable
' - replaces a left alignment command with a center alignment command

    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    'Dim TempWB As Workbook ' WN edited b/c not used in context of this module; edit back if using the fxn as a utility
    
   Dim poPublishObj As PublishObject

On Error GoTo myErrHandler
Debug.Print "Start RangeToHTML"

' make the ".htm" file
' "temp" is an environment variable (a folder) at this path: "C:\Users\wnessle\AppData\Local\Temp"
    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"
    'Debug.Print TempFile
    
' ** WDN edited to change workbook ojbect from "TempWB." to activeworkbook.
    'Publish the sheet to a htm file
    
    Set poPublishObj = ActiveWorkbook.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=wksTemp.Name, _
         Source:=rng.Address, _
         HtmlType:=xlHtmlStatic)
        
    poPublishObj.Publish (True)
    
    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")
    '2016-05-17 figure outhow to center the tables...the Ron deBruin code didn't work
    ' "align=center x:publishsource=" <- this string was not found in Notepad or VBA Replace function
    ' "div align=center" <- this string *was found in Notepad but not VBA Replace function (?)
    ' ignore this issue. The tables shall remain centered until we hear otherwise
'    Dim lngPosition As Long
'    Do
'        lngPosition = InStr(1, RangetoHTML, "div align=center")
'        Debug.Print "div align=center at position: " & lngPosition
'    Loop Until lngPosition = 0
'
' this is my edit based on the align command I found in the notepad text. Replace didn't find any instances (?)
'    RangetoHTML = Replace(RangetoHTML, "div align=center", _
'                          "div align=left")

' this is the original Ron deBruin code; the target string was not found when I pasted teh HTML into Notepad
''    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
''                          "align=left x:publishsource=")
''
'    'Close TempWB
'    TempWB.Close savechanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
 Debug.Print "End RangeToHTML"
 
 Exit Function

myErrHandler:
    
    Debug.Print "An error occurred while writing the range to an HTML string: " & Err.Description
    MsgBox "An error occurred while while writing the range to an HTML string." _
        & vbCrLf & vbCrLf _
        & Err.Number & vbCrLf _
        & Err.Description, _
        vbOKOnly, _
        "Error in RangeToHTML"
          
          
End Function 'RangeToHTML







Attribute VB_Name = "Module1"
Option Explicit
Global MECDBPath As String
Sub MergeElectricMeterData()
' By Will Nessle
' Date: 2015-01-14
' Purpose:
'   This procedure expands on the CombineJuly31andAugustData procedure below (which is not needed anymore).
'   If Iowa account, combine July 31 and Aug electric meter data
'   If Illinois account, combine Dec 31 and Jan data
' Calling:
'   Called by user (click Alt+F8 to open macro dialog)
' Arguments:
'   n/a
' Constraints:
'   Electricty data were pasted into Tech Review wks named "Electricity Data" in its current (crazy) format
'   Pertinent data range is A15:V39
'   for IA accounts, must be a row with date "7/31/2014"
'   for IL accounts, must be a row with date "12/31/2014"
'       '**WN: I did a review w/ IL meter data where the partial read was a diff date - in that case do it by hand
'   the pertinent "off cycle" data row must not be the first row in the data set. I.e., there must be a subsequent
'   meter read (at typical read date in August or January) with which to combine the off-cycle data.
' Method:
'   0) define range; convert text to number
'   1) Locate 7/31 or 12/31 reading
'   2) Copy/paste July 31 or 12/31 and subsequent month's data below the dataset
'   4) Sum Interval Days in col C (3)
'   5) Sum kWh in col I (9)
'   6) Max kW in col L (12)
'   7) Sum Taxes in col S (19)
'   8) Sum Franchise Fee in col T (20)
'   9) Sum Amt Billed in col V (22)
'   10) delete entire July 31 row
'   11) Color each adjusted field blue
' VBA Notes:
'   1) potential bug: ' if the string compare code used to identify the state proves buggy, try removing
'   the number sign (#) wildcards. Leave a single asterisk (*) after the state letters, e.g.: "*, IL*"
'   2) Related to revision (1), I can't figure out how to paste a range w/o first Selecting the paste destination cell
'      Also seems like Selection.Paste command requires that the target cell be on the ActiveSheet. That is,
'      if Sheet 1 is active but the destination cell is on Sheet 2, must first activate Sheet 2 then paste.  Why??
'
'Revisions:
'   1) 3/3/15 added code to allow the procedure to be called from any worksheet...not just the electricity data sheet;


Dim wksCallingSheet As Worksheet
Dim wksMeterData As Worksheet
Dim rngOffCycleCell As Range, rngOffCycleRow As Range, rngNextCycleRow As Range
Dim rngRow As Range, rngAllData As Range, rngTempRow As Range

Dim i As Integer
Dim varMyCalc As Variant
Dim strAddress As String, strState As String
Dim datSearchDate As Date
Dim booShowDialog As Boolean


Debug.Print "CALL MergeElectricMeterData"

On Error GoTo myErrMsg

' turn off updates, calcs, events to run fast
With Application
    .ScreenUpdating = False
    varMyCalc = .Calculation  ' capture the current calculation setting.
    .Calculation = xlCalculationManual
    .EnableEvents = False
    .DisplayAlerts = False
End With

' capture current active worksheet (b/c code will activate Electricity Data to copy/paste)
Set wksCallingSheet = ActiveWorkbook.ActiveSheet

' set data worksheet and range
Set wksMeterData = ActiveWorkbook.Worksheets("Electricity Data")
Set rngAllData = wksMeterData.Range("a15:v39")

' convert text values to number values
Call ConvertTexttoNumber(rngAllData)

' Delete extra rows
With rngAllData(1, 1)
    Do While Not IsEmpty(.Offset(rngAllData.Rows.Count, 0)) 'Range("a39"))
        .Offset(rngAllData.Rows.Count, 0).EntireRow.Delete
        i = i + 1
        If i = 100 Then Exit Do ' prevent infinite loop on error
    Loop
End With

' Determine the state, Iowa or Illinois by reading cell E7 in account meta-data at top of wks;
' if address is unclear ask user for input
strAddress = wksMeterData.Range("E7").Value
If strAddress Like "*, IA  #####*" Then
    strState = "IA"
ElseIf strAddress Like "*, IL  #####*" Then
    strState = "IL"
Else
    strState = "Unclear"
    booShowDialog = True
End If

Debug.Print "State is: " & strState

If booShowDialog Then
    Do
        strState = Application.InputBox(Prompt:="Which state?" & String(2, vbCrLf) & "Please enter ""IA"" for Iowa, or ""IL"" for Illinois.")
        If strState = "IA" Or strState = "IL" Then booShowDialog = False
        i = i + 1
        If i = 3 Then Exit Sub
    Loop Until booShowDialog = False
    Debug.Print "Input state is: " & strState
End If

Select Case strState
    Case "IA"
        datSearchDate = #7/31/2014# 'number signs connote a date data type
    Case "IL"
        datSearchDate = #12/31/2014#
End Select

' Find the partial data row (July 31 for IA or Dec 31 for IL)
Set rngOffCycleCell = rngAllData.Find(What:=datSearchDate, After:=rngAllData(1, 1), LookIn:=xlFormulas, _
    Lookat:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
    MatchCase:=False, SearchFormat:=False)
    Debug.Print "Found " & CStr(datSearchDate) & " in row: " & rngOffCycleCell.Row
Set rngOffCycleRow = rngOffCycleCell.EntireRow
    Debug.Print "Billed Amount on " & CStr(datSearchDate) & " row: " & rngOffCycleRow.Cells(1, 22).Value
Set rngNextCycleRow = rngOffCycleCell.Offset(-1, 0).EntireRow
    Debug.Print "Date of next billing cycle: " & rngNextCycleRow.Cells(1, 1).Value

' Copy and Paste original off-cycle billing data below table
' NOTE: this section throws error if code is called from sheet other than Electricity Data;
' Problem: it's difficult to copy & paste w/o using the activesheet object..

' save original working code (where "elecricity data" is activesheet)
'Set rngTempRow = ActiveSheet.Rows(rngAllData.Rows(1).Row + rngAllData.Rows.Count + 3)
'rngOffCycleRow.Rows(1).Copy
'rngTempRow.Select 'can't figure out how to paste w/o selecting...hmm
'ActiveSheet.Paste
'rngNextCycleRow.Rows(1).Copy
'rngTempRow.Offset(1, 0).Select
'ActiveSheet.Paste

'----------------------------------------
' new code 3/3/15
'----------------------------------------
wksMeterData.Activate '
Set rngTempRow = wksMeterData.Rows(rngAllData.Rows(1).Row + rngAllData.Rows.Count + 3)
rngOffCycleRow.Rows(1).Copy
rngTempRow.Select 'can't figure out how to paste w/o selecting...hmm
wksMeterData.Paste
rngNextCycleRow.Rows(1).Copy
rngTempRow.Offset(1, 0).Select
wksMeterData.Paste
'----------------------------------------
' end new code 3/3/15
'----------------------------------------
rngOffCycleCell.Select

' sums
With rngNextCycleRow
    .Cells(1, 3).Value = .Cells(1, 3).Value + rngOffCycleRow.Cells(1, 3).Value 'interval days
    .Cells(1, 9).Value = .Cells(1, 9).Value + rngOffCycleRow.Cells(1, 9).Value 'kWh
    .Cells(1, 19).Value = .Cells(1, 19).Value + rngOffCycleRow.Cells(1, 19).Value 'Taxes
    .Cells(1, 20).Value = .Cells(1, 20).Value + rngOffCycleRow.Cells(1, 20).Value 'Fees
    .Cells(1, 22).Value = .Cells(1, 22).Value + rngOffCycleRow.Cells(1, 22).Value 'Billed Amount
    ' now shade these cells
    .Cells(1, 3).Interior.Color = 15773696
    .Cells(1, 9).Interior.Color = 15773696
    .Cells(1, 19).Interior.Color = 15773696
    .Cells(1, 20).Interior.Color = 15773696
    .Cells(1, 22).Interior.Color = 15773696
End With

' max kW
With rngNextCycleRow.Cells(1, 12)
    If .Value < rngOffCycleRow.Cells(1, 12).Value Then
        .Value = rngOffCycleRow.Cells(1, 12).Value
        ' shade the cell
        .Interior.Color = 15773696
    End If
End With

' delete July31 row
rngOffCycleRow.EntireRow.Delete

wksCallingSheet.Activate

' turn on updates, etc.
With Application
    .ScreenUpdating = True
    .Calculation = varMyCalc ' reset to original calc setting
    .EnableEvents = True
    .DisplayAlerts = True
End With

Exit Sub

myErrMsg:
Dim strErrDef As String, myErrNote As String

strErrDef = Err.Number & ":" & vbTab & Err.Description
myErrNote = "An error occurred in the MergeElectricMeterData procedure. Check that the following constraints are satasfied: " & vbCrLf & _
            vbTab & "The Tech Review must be the active workbook." & vbCrLf & _
            vbTab & "The meter data sheet must be named ""Electricity Data""." & vbCrLf & _
            vbTab & "The meter data range must be A15:V39." & vbCrLf & _
            vbTab & "The meter data must include either a 7/31/2014 or 12/31/2014 date." & vbCrLf & _
            "If these ducks are in a row please tell Will his code stinks and go ahead and combine the data the old fashioned way. Sorry!" & vbCrLf & vbCrLf & _
            strErrDef
MsgBox myErrNote, vbOKOnly, "Ruh-roh!"

' turn on updates, etc.
With Application
    .ScreenUpdating = True
    .Calculation = varMyCalc ' reset to original calc setting
    .EnableEvents = True
    .DisplayAlerts = True
End With

End Sub 'MergeElectricMeterData

Private Sub ConvertTexttoNumber(rng As Range)
' By Will Nessle
' Date: 2015-01-02
' Purpose:
'   convert 24 rows of MEC electric meter export data from text to number to allow normal wks functions
' Calling:
'   Is called from another sub that combines July 31 data w/ following August data
'   Can not call independently b/c an argument is required; simple edits required to circumvent the argument.
' Arguments:
'   pass the full data range, see expected constraints below
' Constraints:
'   Active Workbook has a worksheet named "Electricity Data"
'   data range on "Electric Data" sheet is a15:v39
' Method:
'   select sheet and range;
'   select special cell types: constant and text;
'   multiply text value by 1 to convert to number value;
'   currency values treated separately to set format, see code;
' VBA Notes:
'   the "Val" function doesn't work on strings with a dollar sign;
'   when export data are pasted-in they are "General" type and, oddly, empty cells are recognized as text constants
'   simply setting the cell value to "General" or "Currency" numberformat did *not* change it from string type to number type, contrary to several suggestions by "excel VIPs" on m'soft forum;

Debug.Print "Start ConvertTexttoNumber"

Dim rngCell As Range
Dim varMyCalc As Variant

On Error GoTo myErrMsg

' turn off updates, calcs, events to run fast
With Application
    .ScreenUpdating = False
    varMyCalc = .Calculation ' capture the current calculation setting.
    .Calculation = xlCalculationManual
    .EnableEvents = False
    .DisplayAlerts = False
End With

' set data range to first 24 rows
For Each rngCell In rng.SpecialCells(xlCellTypeConstants, xlTextValues) ' selects all constant cells with text (but it also selects blank cells (?)
    If Not IsEmpty(rngCell) Then
        If IsNumeric(rngCell) Then
            If InStr(1, rngCell, "$") Then
                Debug.Print rngCell.Value & " has a $"
                rngCell.Value = rngCell.Value * 1
                rngCell.NumberFormat = "$#,##0.00" ' this changes format but excel still considers it a string..huh?
            Else
                rngCell.Value = rngCell.Value * 1
            End If ' has $
        End If ' numeric string
    End If ' not empty
Next ' rngCell

' turn on updates and calcs and events
With Application
    .ScreenUpdating = True
    .Calculation = varMyCalc ' reset to prior calc setting (alternative: =xlAutomatic)
    .EnableEvents = True
     .DisplayAlerts = True
End With

Debug.Print "End ConvertTexttoNumber"
Exit Sub

myErrMsg:
Debug.Print "Error in ConvertTexttoNumber: " & Err.Description & vbCrLf & Err.Source
MsgBox "There was an error in the ConvertTesttoNumber procedure. Check the results."

' turn on updates and calcs and events
With Application
    .ScreenUpdating = True
    .Calculation = varMyCalc ' reset to prior calc setting (alternative: =xlAutomatic)
    .EnableEvents = True
    .DisplayAlerts = True
End With

Debug.Print "End ConvertTexttoNumber due to error."

End Sub 'ConvertTexttoNumber

' display all name managers
Sub ShowAllNames()
Dim Item As Name
For Each Item In ThisWorkbook.Names
Item.Visible = True
Next Item
End Sub


'Reset excel sheets boundary
Sub Scroll_Reset()
    For Each sht In Sheets
        rst = Sheets(sht.Name).UsedRange.Rows.Count
    Next
End Sub


Attribute VB_Name = "QualityControl"
Option Explicit
Option Base 1 'first item in array will be index 1 instead of 0
Option Private Module

' 2017-01-17 WN
'
' Objective
' Alert reviewing engineer to non-standard results, such as >$100k rebate,
' omissions, such as the BC Test result, or possible mistakes
'
' Design
' One main procedure will execute upon action by user, e.g. button click;
' Code is generally hard-wired to the TR template and other "static" ranges
' such as the top of calc templates, RSA sheets, etc.
'
' Interface
' User shall trigger the main procedure by clicking a button, either floating
' on a sheet or on a custom ribbon, such as the "TR Tools" add-in (not widely adopted
' at this time). A temp worsheet will be inserted on which to list results
' of the scan. Perhaps the cell will be colored a bright color such as turquoise
'
'Sheet names & sheet objects
Private Const strTR As String = "Tech Review"
Private Const strRate As String = "Rate Calc"
Private Const strMV As String = "M&V"
Private Const strInfo As String = "Information"
Private Const strElectricLoad As String = "Electric Load"
Private Const strGasLoad As String = "Gas Load"

Private wksTR As Worksheet
Private wksCalc As Worksheet
Private wksRate As Worksheet
Private wksRSAInfo As Worksheet

' Static TR Sheet Row & Col Numbers
Private Const colWTCombined As Integer = 2 'col B
Private Const colWTCust As Integer = 21 'col U
Private Const colWTRx As Integer = 39 'col AM
Private Const colConCombined As Integer = 3
Private Const colConCust As Integer = 22
Private Const colConRx As Integer = 40
Private Const colPSCombined As Integer = 5
Private Const colPSCust As Integer = 24
Private Const colPSRx As Integer = 42
Private Const colPINCombined As Integer = 7
Private Const colPINCust As Integer = 26
Private Const colPINRx As Integer = 44
Private Const colOffsetCustom As Integer = 20
Private Const colOffsetRx As Integer = 38

Private Const rowkWhSvgs As Integer = 20
Private Const rowThermSvgs As Integer = 24
Private Const rowTotalRebate As Integer = 41
Private Const rowRebateStructure As Integer = 34
Private Const rowBCResult As Integer = 36
Private Const rowBestPayback As Integer = 47 'SPB w/ enhanced rebate, alert if capped at 2.0 or 1.0 years
Private Const rowSpaskW As Integer = 54 ' pertinent to custom Consult, PS, or PIN only
Private Const rowReviewedBy As Integer = 54
Private Const rowSpasTherms As Integer = 55 ' ditto
Private Const rowNarrScopeSubmitted As Integer = 59
Private Const rowNarrScopePS As Integer = 61
Private Const rowNarrScopePIN As Integer = 63
Private Const rowNarrRebate As Integer = 65
Private Const rowNarrInfluence As Integer = 67
Private Const rowNarrCalcPS As Integer = 70
Private Const rowNarrCalcPIN As Integer = 72

' Phase-Independent TR Sheet Address Strings
Private Const strProjectNumber As String = "B7"
Private Const strRebateType As String = "B9"
Private Const strPhase As String = "E8"
Private Const strEndUse As String = "E9"
Private Const strEligibleStatus As String = "G7"
Private Const strIneligibleReason As String = "G8"
Private Const strCanClaimSavings As String = "AA17"

' Phase-Independent TR Sheet Range Variables
Private rngProjNumber As Range 'B7
Private rngRebateType As Range 'B9
Private rngPhase As Range 'E8
Private rngEndUse As Range 'E9
Private rngEligibleStatus As Range 'G7
Private rngIneligibleReason As Range 'G8
Private rngCanClaimSavings As Range 'AA17

' Phase-Dependent TR Sheet Range Variables
Private rngTotalkWh As Range
Private rngTotalTherms As Range
Private rngTotalRebate As Range
Private rngRebateStructure As Range
Private rngBCResult As Range
Private rngSPASkW As Range
Private rngSPASTherms As Range
Private rngBestSPBCustom As Range
Private rngBestSPBRx As Range
Private rngReviewedBy As Range
 
' Phase-Independent Calc Sheet Address Strings
Private Const strCalcIncCost As String = "B5"
Private Const strCalcRxRebate As String = "B6"
Private Const strBldgConsumpt As String = "B10"
Private Const strBaseConsumpt As String = "B11"
Private Const strSvgsPercentofBase As String = "B16"
Private Const strBlendedRate As String = "B17"
Private Const strStdID As String = "F21"

' Phase-Independent Rate Calc Sheet Range Variable
Private Const strRCSimError As String = "V4:V15" ' alert if any value >6%

' Phase-Independent RSA Info Sheet Address Strings
Private Const strContactName As String = "B5"
Private Const strCustName As String = "B10"
Private Const strElectricAcct As String = "B13"
Private Const strGasAcct As String = "B14"
Private Const strRevisedSPAS As String = "B25"
Private Const strBaseDescrip As String = "B29"
Private Const strPropDescrip As String = "B34"

' Alert Messages
Private varMessages(50, 3) As Variant ' oversize it so don't need to "redim preserve" it (not used in v1)
'Private alerts As Collection ' instead of array
Private Const strEndUseMissing As String = "The end use is missing"
Private Const strBCResultMissing As String = "The BC Result is missing"
Private Const strIneligibleMissing As String = "The ineligibility reason is missing"
Private Const strClaimSvgsMissing As String = "The Claim Savings indicator is missing"
Private Const strHighCustomRebate As String = "The custom rebate is > $100k. Notify Bill."
Private Const strMVRequired As String = "The project requires Verification"
Private Const strSPASMissing As String = "The SPAS demand reduction value is missing"
Private Const strHighBaseConsumpt As String = "The baseline consumption is a high percentage of annual consumption"
Private Const strHighSvgsPercent As String = "The savings is a high percentage of the baseline consumption"
Private Const strHighBlendedRate As String = "The Blended Rate is more than $0.08/kWh"
Private Const strRCSimErrorMsg As String = "There is a high error in the Rate Calculator simulation"
Private Const strNarrativeMissing As String = "At least one narratives is blank"
Private Const strRebateIsCapped As String = "The rebate may be capped. If so, mention it in the narrative"
Private Const strCheckRSAInfo As String = "Check the fields on the RSA Information sheet"
Private Const strReviewedByMissing As String = "The Reviewer's name is missing on the TR"

Private Sub Main()
' 2017-01-17 WN
' refer to module-level declarations for nearly all variables cited in this script
'
' VBA Note: can't use Str function to convert the project number value to a sheet name b/c
' the Str function adds a leading whitespace to accomodate the + or - sign. Would need to
' use a Trim function to remove that space, or use Format function and define number format
'
'2017-01-24 WN update:
' 1) added incentive type parameter "custom" to SetDependentRange function
' for setting SPAS values (was looking at reviewer name)
' 2) added conditional check if gas savings > 0 before adding alert for missing SPAS therms
'    and before alert of missing gas account on RSA Information sheet
' 3) added alert for missing reviewer name
' 4) added error handling wrt checking contact name on RSA Information sheet (if reviewer name
'    is missing, the contact name value is an "#N/A" error value, which raises error for range.value property)
' 5) added positive confirmation wrt revised SPAS request (instead of just negative)
'
' WN misc update:
' 6) changed the button's "print" property to false

' 2017-02-24 WN update:
' 7) appended wks name and cell address string to each alert message string
' 8) edited caption on button from "...QC Flags" to "...TQC Flags"
'

Dim strProjectPhase As String, strIncentiveType As String, strSuffix As String
Dim booAddAlert As Boolean
 
Dim alertList As New Collection

On Error GoTo myErrHandler

' set worksheets and independent ranges
With ActiveWorkbook
    Set wksTR = .Worksheets(strTR)
    Set wksRate = .Worksheets(strRate)
    ' set calc wks below, after getting project number
End With

With wksTR
    Set rngProjNumber = .Range(strProjectNumber)
    Set rngPhase = .Range(strPhase)
    Set rngEndUse = .Range(strEndUse)
    Set rngRebateType = .Range(strRebateType)
    Set rngIneligibleReason = .Range(strIneligibleReason)
    Set rngCanClaimSavings = .Range(strCanClaimSavings)
    Set rngEligibleStatus = .Range(strEligibleStatus)
End With

Set wksCalc = ActiveWorkbook.Worksheets(Format(rngProjNumber.Value, "#0"))

strProjectPhase = rngPhase.Value
strIncentiveType = rngRebateType.Value

' check for missing fields at top of TR
If IsEmpty(rngEndUse) Then alertList.Add strEndUseMissing & ", at " & rngEndUse.Parent.Name & ", " & rngEndUse.Address
If rngEligibleStatus.Value = "Ineligible" Then
    If IsEmpty(rngIneligibleReason) Then alertList.Add strIneligibleMissing & ", at " & rngIneligibleReason.Parent.Name & ", " & rngIneligibleReason.Address
End If

' Set Dependent Ranges
Set rngTotalkWh = SetDependentRange(wksTR, rowkWhSvgs, strProjectPhase)
Set rngTotalTherms = SetDependentRange(wksTR, rowThermSvgs, strProjectPhase)
Set rngTotalRebate = SetDependentRange(wksTR, rowTotalRebate, strProjectPhase)
Set rngRebateStructure = SetDependentRange(wksTR, rowRebateStructure, strProjectPhase)
Set rngReviewedBy = SetDependentRange(wksTR, rowReviewedBy, strProjectPhase)

If strProjectPhase <> "Assessment" Then
    Set rngSPASkW = SetDependentRange(wksTR, rowSpaskW, strProjectPhase, "Custom")
    Set rngSPASTherms = SetDependentRange(wksTR, rowSpasTherms, strProjectPhase, "Custom")
End If

' Set BC Result and Payback
If strIncentiveType = "Custom" Then
    Set rngBCResult = SetDependentRange(wksTR, rowBCResult, strProjectPhase)
    Set rngBestSPBCustom = SetDependentRange(wksTR, rowBestPayback, strProjectPhase, strIncentiveType)
ElseIf strIncentiveType = "Blended" Then
    Set rngBCResult = SetDependentRange(wksTR, rowBCResult, strProjectPhase)
    Set rngBestSPBCustom = SetDependentRange(wksTR, rowBestPayback, strProjectPhase, strIncentiveType)
    Set rngBestSPBRx = rngBestSPBCustom.Offset(0, (colOffsetRx - colOffsetCustom)) ' Custom + 18 columns = Rx
Else
    Set rngBestSPBRx = SetDependentRange(wksTR, rowBestPayback, strProjectPhase, strIncentiveType)
End If

' check metrics on TR sheet
If rngTotalRebate.Value > 100000 Then alertList.Add strHighCustomRebate & ", at " & rngTotalRebate.Parent.Name & ", " & rngTotalRebate.Address
If rngTotalkWh.Value > 250000 Then alertList.Add strMVRequired & ", at " & rngTotalkWh.Parent.Name & ", " & rngTotalkWh.Address
If rngTotalTherms.Value > 10000 Then alertList.Add strMVRequired & ", at " & rngTotalTherms.Parent.Name & ", " & rngTotalTherms.Address
If rngTotalRebate.Value > 20000 Then alertList.Add strMVRequired & ", at " & rngTotalRebate.Parent.Name & ", " & rngTotalRebate.Address

' Check if Rebate capped based on SPB (might not be helpful)
If strIncentiveType = "Custom" Then
    If rngBestSPBCustom.Value = 1 Then alertList.Add strRebateIsCapped & ", at " & rngBestSPBCustom.Parent.Name & ", " & rngBestSPBCustom.Address
ElseIf strIncentiveType = "Blended" Then
    If rngBestSPBCustom.Value = 1 Then alertList.Add "(Custom aspect)" & strRebateIsCapped & ", at " & rngBestSPBCustom.Parent.Name & ", " & rngBestSPBCustom.Address
    If rngBestSPBRx.Value = 1 Then alertList.Add "(Prescriptive aspect)" & strRebateIsCapped & ", at " & rngBestSPBRx.Parent.Name & ", " & rngBestSPBRx.Address
Else
    If rngBestSPBRx.Value = 1 Then alertList.Add strRebateIsCapped & ", at " & rngBestSPBRx.Parent.Name & ", " & rngBestSPBRx.Address
End If

' check BC Reult and SPAS values
If strIncentiveType = "Custom" Or strIncentiveType = "Blended" Then
    If IsEmpty(rngCanClaimSavings) Then alertList.Add strClaimSvgsMissing & ", at " & rngCanClaimSavings.Parent.Name & ", " & rngCanClaimSavings.Address
    If IsEmpty(rngBCResult) Then alertList.Add strBCResultMissing & ", at " & rngBCResult.Parent.Name & ", " & rngBCResult.Address
    If IsEmpty(rngSPASkW) Then alertList.Add "(kW)" & strSPASMissing & ", at " & rngSPASkW.Parent.Name & ", " & rngSPASkW.Address
    If rngTotalTherms.Value > 0 Then If IsEmpty(rngSPASTherms) Then alertList.Add "(Therms)" & strSPASMissing & ", at " & rngTotalTherms.Parent.Name & ", " & rngSPASTherms.Address
End If

' check reviewer name
If IsEmpty(rngReviewedBy) Then alertList.Add strReviewedByMissing & ", at " & rngReviewedBy.Parent.Name & ", " & rngReviewedBy.Address

' check for blank narratives
strSuffix = ""
booAddAlert = False
With wksTR
    If .Cells(rowNarrScopeSubmitted, 1).Value = "" Then strSuffix = strSuffix & "Submitted Scope at " & .Name & ", " & .Cells(rowNarrScopeSubmitted, 1).Address & "; "
    If .Cells(rowNarrScopePS, 1).Value = "" Then strSuffix = strSuffix & "PS Scope Change at " & .Name & ", " & .Cells(rowNarrScopePS, 1).Address & "; "
    If .Cells(rowNarrScopePIN, 1).Value = "" Then strSuffix = strSuffix & "PIN Scope Change at " & .Name & ", " & .Cells(rowNarrScopePIN, 1).Address & "; "
    If .Cells(rowNarrRebate, 1).Value = "" Then strSuffix = strSuffix & "Rebate Note at " & .Name & ", " & .Cells(rowNarrRebate, 1).Address & "; "
    If .Cells(rowNarrCalcPS, 1).Value = "" Then strSuffix = strSuffix & "PS Calc at " & .Name & ", " & .Cells(rowNarrCalcPS, 1).Address & "; "
    If .Cells(rowNarrCalcPIN, 1).Value = "" Then strSuffix = strSuffix & "PIN Calc at " & .Name & ", " & .Cells(rowNarrCalcPIN, 1).Address & "; "
    If (strIncentiveType = "Custom" Or strIncentiveType = "Blended") And _
       rngEligibleStatus.Value = "Ineligible" And rngCanClaimSavings.Value = "Yes" Then
        If .Cells(rowNarrInfluence, 1).Value = "" Then strSuffix = strSuffix & "Influence Note at " & .Name & ", " & .Cells(rowNarrInfluence, 1).Address & "."
    End If
End With

If strSuffix <> "" Then alertList.Add strNarrativeMissing & ": " & strSuffix

' check metrics on calc summary
With wksCalc
    If .Range(strBaseConsumpt).Value / .Range(strBldgConsumpt).Value > 0.8 Then alertList.Add strHighBaseConsumpt & ", at  " & .Range(strBaseConsumpt).Parent.Name & ", " & .Range(strBaseConsumpt).Address
    If .Range(strSvgsPercentofBase).Value > 0.7 Then alertList.Add strHighSvgsPercent & ", at " & .Range(strSvgsPercentofBase).Parent.Name & ", " & .Range(strSvgsPercentofBase).Address
    If .Range(strBlendedRate).Value > 0.08 Then alertList.Add strHighBlendedRate & ", at " & .Range(strBlendedRate).Parent.Name & ", " & .Range(strBlendedRate).Address
End With

' check Rate Calc sheet for high simulated cost error
Dim oCell As Object
For Each oCell In wksRate.Range(strRCSimError)
    If oCell.Value > 0.1 Then booAddAlert = True
Next
If booAddAlert Then alertList.Add strRCSimErrorMsg & ", at " & wksRate.Name & ", " & wksRate.Range(strRCSimError).Address

' check RSA Sheets
strSuffix = ""
booAddAlert = False
If strIncentiveType = "Custom" Or strIncentiveType = "Blended" Then
    Set wksRSAInfo = ActiveWorkbook.Worksheets(strInfo)
    With wksRSAInfo
        On Error Resume Next ' if cell values are "#N/A", then Range.Value will raise type mismatch error
        If .Range(strContactName).Value = "" Then strSuffix = strSuffix & "Contact Name at cell " & .Range(strContactName).Address & "; "
        If .Range(strCustName).Value = "" Then strSuffix = strSuffix & "Customer Name at cell " & .Range(strCustName).Address & "; "
        If .Range(strElectricAcct).Value = "" Then strSuffix = strSuffix & "Electric Acct at cell " & .Range(strElectricAcct).Address & "; "
        If rngTotalTherms.Value > 0 Then If .Range(strGasAcct).Value = "" Then strSuffix = strSuffix & "Gas Acct at cell " & .Range(strGasAcct).Address & "; "
        If .Range(strRevisedSPAS).Value = "NO" Then
            strSuffix = strSuffix & "Confirm *not revised* SPAS at cell " & .Range(strRevisedSPAS).Address & "; "
        Else
            strSuffix = strSuffix & "Confirm *revised* SPAS at cell " & .Range(strRevisedSPAS).Address & "; "
        End If
        If .Range(strBaseDescrip).Value = "" Then strSuffix = strSuffix & "Baseline description at cell " & .Range(strBaseDescrip).Address & "; "
        If .Range(strPropDescrip).Value = "" Then strSuffix = strSuffix & "Upgrade description at cell " & .Range(strPropDescrip).Address & "."
        On Error GoTo myErrHandler
    End With
    If strSuffix <> "" Then alertList.Add strCheckRSAInfo & ": " & strSuffix
End If

''test
'Dim k As Integer
'For k = alertList.Count To 1 Step -1
'    alertList.Remove (k)
'Next
'' end test

' Print each Alert on a temp worksheet
If alertList.Count > 0 Then
    Dim wksTemp As Worksheet
    Set wksTemp = ActiveWorkbook.Worksheets.Add(Before:=wksTR)
    wksTemp.Name = wksTemp.Name & " QC Alerts"
    wksTemp.Tab.Color = vbRed
    
    Dim oAlert As Variant, i As Integer
    For Each oAlert In alertList
        i = i + 1
        wksTemp.Cells(i, 1).Value = oAlert
    Next
Else
    MsgBox "The key metrics were checked. Nice job!" & vbCrLf & "(Don't forget spell check)", , "Winner"
End If

Exit Sub
myErrHandler:

Debug.Print "In Main, there was an error: " & Err.Number & vbCrLf & Err.Description

' Print each Alert on a temp worksheet
Dim wksTempErr As Worksheet
Set wksTempErr = ActiveWorkbook.Worksheets.Add(Before:=wksTR)
wksTempErr.Name = wksTemp.Name & " QC Alerts-Err"
wksTempErr.Tab.Color = vbBlue

Dim oAlertErr As Variant, j As Integer
For Each oAlertErr In alertList
    j = j + 1
    wksTempErr.Cells(j, 1).Value = oAlertErr
Next

End Sub
Private Function SetDependentRange(theWks As Worksheet, theRow As Integer, thePhase As String, Optional theRebateType As String = "") As Range
' 2017-01-17 WN

Dim theCol As Integer

On Error GoTo myErrHandler

Select Case thePhase
    Case "Assessment"
        theCol = colWTCombined
    Case "Consultation"
        theCol = colConCombined
    Case "Preapproval"
        theCol = colPSCombined
    Case "Installed"
        theCol = colPINCombined
End Select

' for rebate-dependent items
Select Case theRebateType
    Case "", "Blended"
     ' pass b/c this type is ambiguous
     ' instead, set either the Custom or Rx range explicitly in the caller
    Case "Custom"
        theCol = theCol + colOffsetCustom
    Case "Prescriptive"
        theCol = theCol + colOffsetRx
End Select

Set SetDependentRange = theWks.Cells(theRow, theCol)

Exit Function

myErrHandler:

Debug.Print "In SetDependentRange, there was an error: " & Err.Number & vbCrLf & Err.Description
Set SetDependentRange = Nothing

End Function






Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbLargeCustomRebate, 5, 1, MSForms, CommandButton"
Attribute VB_Control = "cbStalledProject, 4, 2, MSForms, CommandButton"
Attribute VB_Control = "cbLetterGenerator, 7, 3, MSForms, CommandButton"
Attribute VB_Control = "cbSendToMEC, 8, 4, MSForms, CommandButton"
Attribute VB_Control = "cbMeterInfo, 9, 5, MSForms, CommandButton"


Private Sub cbLetterGenerator_Click()
' v1.0
' 2016-03-23 by Willis Nessle
' Objective: launch procedure to generate an email to IPAdmin
' Precedents: none
' Dependents: calls a Subprocedure which calls other subs and functions

Debug.Print "Start cbLetterGenerator_Click"

Call Main(vbLetterGenerationType)

Debug.Print "End cbLetterGenerator_Click"

End Sub

Private Sub cbMeterInfo_Click()
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: launch procedure to generate an email to IPAdmin
' Precedents: none
' Dependents: calls a Subprocedure which calls other subs and functions

Debug.Print "Start cbMeterInfo_Click"

Call Main(vbMeterInfoType)

Debug.Print "End cbMeterInfo_Click"

End Sub

Private Sub cbSendToMEC_Click()
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: launch procedure to generate an email to IPAdmin
' Precedents: none
' Dependents: calls a Subprocedure which calls other subs and functions

Debug.Print "Start cbSendToMEC_Click"

Call Main(vbSendToMECType)

Debug.Print "End cbSendToMEC_Click"
End Sub

Private Sub cbLargeCustomRebate_Click()
' 2016-05-10 v1.0 by wdn
' ActiveX control
' Objective: call Main to launch procedures to request the Stalled Project letter from IPAdmin
Debug.Print "Start cbLargeCustomRebate_Click"

Call Main(vbLargeCustomRebateType)

Debug.Print "End cbLargeCustomRebate_Click"

End Sub

Private Sub cbStalledProject_Click()
' 2016-05-10 v1.0 by wdn
' ActiveX control
' Objective: call Main to launch procedures to request the Stalled Project letter from IPAdmin
Debug.Print "Start cbStalledProject_Click"

Call Main(vbStalledProjectType)

Debug.Print "End cbStalledProject_Click"

End Sub
Private Sub Worksheet_Activate()
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: make the screen static to always keep buttons in view (and mimic a dashboard)
' Precedents: none
' Dependents: none

Me.ScrollArea = "A1:M20"


End Sub


Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cbReset, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "Option_Outlook, 2, 1, MSForms, OptionButton"
Attribute VB_Control = "Option_Gmail, 1, 2, MSForms, OptionButton"


Private Sub cbReset_Click()
' 2016-12-23 clears "stamped envelope" clip art and feedback messages
  
Me.Shapes("Draft_Letters_Sent").Visible = False
Me.Shapes("Send_To_MEC_Sent").Visible = False
Me.Shapes("Meter_Info_Sent").Visible = False
Me.Shapes("Stalled_Project_Sent").Visible = False
Me.Shapes("Large_Rebate_Sent").Visible = False
Me.Shapes("RSA_Sent").Visible = False

For i = 6 To 21 Step 3
    Cells(i, 5).Value = ""
Next
    
Range("b6").Select

End Sub



Private Sub Option_Gmail_Click()
'2016-12-23 sets public variable in Email module
'
strEmailApp = "gmail"
Range("a1").Value = "gmail"
Range("a1").Font.Color = vbWhite

End Sub

Private Sub Option_Outlook_Click()
'2016-12-23 sets public variable in Email module
'
strEmailApp = "outlook"
Range("a1").Value = "outlook"
Range("a1").Font.Color = vbWhite


End Sub

Private Sub Worksheet_Activate()
' v1.0
' 2016-03-24 by Willis Nessle
' Objective: make the screen static to always keep buttons in view (and mimic a dashboard)

Me.ScrollArea = "A1:J23"


End Sub


Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TechReview"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1046, 0, MSForms, CommandButton"
' Macros & Methods for the Tech Review worksheet
' Author: Alex Brown
' Date: 03/13/2012
' Edited by Capri Pearson 01/28/13
' Edited Again by Logan Brick 01/18/14
' Modified by Capri Pearson 02/18/14
' Property of Nexant, Inc.
'
' ** DIRECT REFERENCES TO CELLS ON THE WORKSHEET **
' If the worksheet design changes these references will need to be updated
' Track Changes in the Macro Updates tab
'
' 1. Project Phase Drop-Down Menu
'    Referenced as D8 in Worksheet_Change
'    Referenced as D8 in Worksheet_SelectionChange
'
' 2. Columns for data to be copied and pasted in place
'    Referenced as B20:52, D20:D52, F20:F52, G20:G30 in switchPhases()
'
' 3. Hidden Formulas used to write when phase changes
'    Referenced as H20:H61 in switchPhases()
'
' 4. The Drop-Down values in the Project Phase
'    Referenced as "Assessment", "Preapproval", "Installed", "M&V" in switchPhases()
'
' 5. The name of the program
'    Referenced as B2 specific values: Vectren, MEC EfficiencyPartners
'
' 6. Project Ineligible
'    Referenced at H7 in exportToVectren()
'
' 7. Reviewer and QCer IDs
'    Reference as H59 and H61 in exportToVectren()
'
' 8. ** TrakSmart Tab
'    Customer Considered: Commercial/Industrial B7
'
'
'
'
'

Dim oldPhase As String
Dim newPhase As String

'

Private Sub CommandButton1_Click()
' 2017-01-18 WN
' run the "Main" procedure in the "QualityControl" module

Application.Run "QualityControl.main"

End Sub
'
'Detects a worksheet change event
Private Sub Worksheet_Change(ByVal target As Range)
    'First Line - Do not move
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    'Detect a worksheet change (drop-down selection)
    If (Not Intersect(target, Me.Range("E8")) Is Nothing) Then
        newPhase = target.Value
        'If the old phase and new phase are equal then nothing should happen
        If (oldPhase <> newPhase) Then
            Call switchPhases(oldPhase, newPhase, target)
        End If
    End If
    
    'set Old Phase equal to the new phase, since it is now outdated. This also helps with error handling.
    'This helps if they keep changing selections without moving their cursor
    Call setOldPhase
    If (Not Intersect(target, Me.Range("B2")) Is Nothing) Then
'        If the old phase and new phase are equal then nothing should happen
'        Hide unnecessary rows
        If (Me.Range("B2") = "Vectren") Then
            Me.Range("34:34,36:37,41:42,47:52").Select
            Selection.EntireRow.Hidden = True
            Me.Range("4:4,46:46").Select
            Selection.EntireRow.Hidden = False
            Me.Range("B2").Select
        Else
            If (Me.Range("B2") = "MEC Standard Rebate Only") Then
            ' Reveal all rows first in the case of a Vectren-MEC Standard Rebate Only transfer, then hide unnecessary
                Me.Range("34:52").Select
                Selection.EntireRow.Hidden = False
                Me.Range("4:4,41:42,46:47").Select
                Selection.EntireRow.Hidden = True
                Me.Range("B2").Select
            Else
                Me.Range("34:52").Select
                Selection.EntireRow.Hidden = False
                Me.Range("4:4,46:46").Select
                Selection.EntireRow.Hidden = True
                Me.Range("B2").Select
            End If
        End If
        MsgBox ("Changing the Program will effect calculations in this workbook. Verify you have the correct Program selected.")
    End If
    
    
    If Intersect(target, Me.Range("B2, AA17, Z7")) Is Nothing Then
    Else
        If ((Me.Range("B2") = "MEC Standard Rebate Only") Or (Me.Range("B2") = "MEC Industrial Partners")) And (Me.Range("AA17") = "Yes") And (Me.Range("Z7") = "Ineligible") Then
                ' Reveal all rows first in the case of a Vectren-MEC Standard Rebate Only transfer, then hide unnecessary
                    Me.Range("66:67").Select
                    Selection.EntireRow.Hidden = False
                    Me.Range("B2").Select
        Else
                    Me.Range("66:67").Select
                    Selection.EntireRow.Hidden = True
                    Me.Range("B2").Select
        End If
    End If
            
           
    Application.ScreenUpdating = True
'   Last Line - Do not move
    Application.EnableEvents = True
End Sub

'Detects a selection change event on the worksheet
Private Sub Worksheet_SelectionChange(ByVal target As Range)
    Application.EnableEvents = False
    If (Not Intersect(target, Me.Range("E8")) Is Nothing) Then
        Call setOldPhase
    End If
    
    Application.EnableEvents = True
End Sub

Private Function getCurrentPhase() As String
    getCurrentPhase = Me.Range("E8").Value
End Function



'One place to define where the project phase is held
Public Sub setOldPhase()
    oldPhase = getCurrentPhase
End Sub

'Execute a phase switch
'All ranges for data to be copied is held here
'fromPhase - the previous phase you are moving away from
'toPhase - the new phase you are attempting to moving to
'target - the cause of the trigger (the dropdown box)
Private Function switchPhases(fromPhase As String, toPhase As String, target As Range)
    
  '** Range & Drop-Down Delcrations **
    Dim assessment As String
    Dim assessmentR As Range
    Dim assessmentR_C As Range
    Dim assessmentR_P As Range
    assessment = "Assessment"
    Set assessmentR = Me.Range("B20:B47")
    Set assessmentR_C = Me.Range("U20:U47")
    Set assessmentR_P = Me.Range("AM20:AM47")
    
    Dim consultation As String
    Dim consultationR As Range
    Dim consultationR_C As Range
    Dim consultationR_P As Range
    consultation = "Consultation"
    Set consultationR = Me.Range("C20:C50")
    Set consultationR_C = Me.Range("V20:V52")
    Set consultationR_P = Me.Range("AN20:AN50")
    
    Dim preapproval As String
    Dim preapprovalR As Range
    Dim preapprovalR_C As Range
    Dim preapprovalR_P As Range
    preapproval = "Preapproval"
    Set preapprovalR = Me.Range("E20:E50")
    Set preapprovalR_C = Me.Range("X20:X52")
    Set preapprovalR_P = Me.Range("AP20:AP50")
    
    Dim installed As String
    Dim installedR As Range
    Dim installedR_C As Range
    Dim installedR_P As Range
    installed = "Installed"
    Set installedR = Me.Range("G20:G52")
    Set installedR_C = Me.Range("Z20:Z52")
    Set installedR_P = Me.Range("AR20:AR50")
    
    Dim mv As String
    Dim mvR As Range
    Dim mvR_C As Range
    Dim mvR_P As Range
    mv = "M&V"
    Set mvR = Me.Range("H20:H32")
    Set mvR_C = Me.Range("AA20:AA32")
    Set mvR_P = Me.Range("AS20:AS32")
    
    Dim hiddenR As Range
    Dim hiddenR_C As Range
    Dim hiddenR_P As Range
    Set hiddenR = Me.Range("I20:I50")
    Set hiddenR_C = Me.Range("AB20:AB52")
    Set hiddenR_P = Me.Range("AT20:AT50")
    
    Dim hiddenRPIN As Range
    Dim hiddenRPIN_C As Range
    Dim hiddenRPIN_P As Range
    Set hiddenRPIN = Me.Range("I20:I52")
    Set hiddenRPIN_C = Me.Range("AB20:AB52")
    Set hiddenRPIN_P = Me.Range("AT20:AT50")
    
    Dim hiddenRmv As Range
    Dim hiddenRmv_C As Range
    Dim hiddenRmv_P As Range
    Set hiddenRmv = Me.Range("I20:I30")
    Set hiddenRmv_C = Me.Range("AB20:AB30")
    Set hiddenRmv_P = Me.Range("AT20:AT30")
  '**  **
    
    'Sheets("Tech Review").Unprotect "m"
    
  '*** Error Checking ***
    'Check for valid phases for toPhase
    If (fromPhase <> assessment And fromPhase <> consultation And fromPhase <> preapproval And fromPhase <> installed And fromPhase <> mv) Then
        MsgBox ("Invalid project phase: <" + fromPhase + "> If the drop-down changed, please update the code for the method switchPhases().")
        Exit Function
    End If
    
      
    'Check for valid phases for toPhase
    If (toPhase <> assessment And toPhase <> consultation And toPhase <> preapproval And toPhase <> installed And toPhase <> mv) Then
        MsgBox ("Invalid project phase: <" + toPhase + "> If the drop-down changed, please update the code for the method switchPhases().")
        'Set back the phase, there is something invalid going on with the new phase attempted that wasn't caught by data validation.
        target.Value = fromPhase
        Exit Function
    End If

    
  '**** Variable Declaration ****
    Dim rslt As VbMsgBoxResult
    
    
  '***** Primary Method *****
    '-- To Assessment Phase --
    If (toPhase = assessment) Then
       'Moving TO the assessment phase is never a valid move
       Call showBadMoveMsg(toPhase)
       Exit Function
    '-- To Preapproval Phase --
    ElseIf (toPhase = consultation) Then
        If (fromPhase = assessment) Then
            rslt = showGoodMoveMsg(fromPhase, toPhase)
            If (rslt = vbYes) Then
               Call columnFormulaCopy(assessmentR, consultationR, hiddenR)
               Call columnFormulaCopy(assessmentR_C, consultationR_C, hiddenR_C)
               Call columnFormulaCopy(assessmentR_P, consultationR_P, hiddenR_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        Else
          Call showBadMoveMsg(toPhase)
          End If
    ElseIf (toPhase = preapproval) Then
        'Check if move is good
        If (fromPhase = assessment) Then
            rslt = showGoodMoveMsg(fromPhase, toPhase)
            If (rslt = vbYes) Then
               Call columnFormulaCopy(assessmentR, preapprovalR, hiddenR)
               Call columnFormulaCopy(assessmentR_C, preapprovalR_C, hiddenR_C)
               Call columnFormulaCopy(assessmentR_P, preapprovalR_P, hiddenR_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = consultation) Then
            rslt = showGoodMoveMsg(fromPhase, toPhase)
            If (rslt = vbYes) Then
               Call columnFormulaCopy(consultationR, preapprovalR, hiddenR)
               Call columnFormulaCopy(consultationR_C, preapprovalR_C, hiddenR_C)
               Call columnFormulaCopy(consultationR_P, preapprovalR_P, hiddenR_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        Else
            'Bad move
            showBadMoveMsg (toPhase)
        End If
    '-- To Installed Phase --
    ElseIf (toPhase = installed) Then
        If (fromPhase = assessment) Then
            'OK but skipping phases
            rslt = showSkipMoveMsg(fromPhase, toPhase, " THIS WILL SKIP THE PREAPPROVAL PHASE.")
            If (rslt = vbYes) Then
               Call columnFormulaCopy(assessmentR, installedR, hiddenRPIN)
               Call columnFormulaCopy(assessmentR_C, installedR_C, hiddenRPIN_C)
               Call columnFormulaCopy(assessmentR_P, installedR_P, hiddenRPIN_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = consultation) Then
            'OK move
            rslt = showSkipMoveMsg(fromPhase, toPhase, " THIS WILL SKIP THE PREAPPROVAL PHASE.")
            If (rslt = vbYes) Then
               Call columnFormulaCopy(consultationR, installedR, hiddenRPIN)
               Call columnFormulaCopy(consultationR_C, installedR_C, hiddenRPIN_C)
               Call columnFormulaCopy(consultationR_P, installedR_P, hiddenRPIN_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = preapproval) Then
            'OK move
            rslt = showGoodMoveMsg(fromPhase, toPhase)
            If (rslt = vbYes) Then
               Call columnFormulaCopy(preapprovalR, installedR, hiddenRPIN)
               Call columnFormulaCopy(preapprovalR_C, installedR_C, hiddenRPIN_C)
               Call columnFormulaCopy(preapprovalR_P, installedR_P, hiddenRPIN_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        Else
            'Bad move
            showBadMoveMsg (toPhase)
        End If
    '-- To M&V Phase --
    ElseIf (toPhase = mv) Then
        If (fromPhase = assessment) Then
            'OK but skipping phases
            rslt = showSkipMoveMsg(fromPhase, toPhase, " THIS WILL SKIP THE PREAPPROVAL AND INSTALLATION PHASES.")
            If (rslt = vbYes) Then
               Call columnFormulaCopy(assessmentR, mvR, hiddenRmv)
               Call columnFormulaCopy(assessmentR_C, mvR_C, hiddenRmv_C)
               Call columnFormulaCopy(assessmentR_P, mvR_P, hiddenRmv_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = consultation) Then
            'OK but skipping phases
            rslt = showSkipMoveMsg(fromPhase, toPhase, " THIS WILL SKIP THE PREAPPROVAL AND INSTALLATION PHASE.")
            If (rslt = vbYes) Then
               Call columnFormulaCopy(consultationR, mvR, hiddenRmv)
               Call columnFormulaCopy(consultationR_C, mvR_C, hiddenRmv_C)
               Call columnFormulaCopy(consultationR_P, mvR_P, hiddenRmv_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = preapproval) Then
            'OK but skipping phases
            rslt = showSkipMoveMsg(fromPhase, toPhase, " THIS WILL SKIP THE INSTALLATION PHASE.")
            If (rslt = vbYes) Then
               Call columnFormulaCopy(preapprovalR, mvR, hiddenRmv)
               Call columnFormulaCopy(preapprovalR_C, mvR_C, hiddenRmv_C)
               Call columnFormulaCopy(preapprovalR_P, mvR_P, hiddenRmv_P)
            ElseIf rslt = vbNo Then
                'If no reset phase
                target.Value = fromPhase
            End If
        ElseIf (fromPhase = installed) Then
            'OK move
            rslt = showGoodMoveMsg(fromPhase, toPhase)
            If (rslt = vbYes) Then
               Call columnFormulaCopy(installedR, mvR, hiddenRmv)
               Call columnFormulaCopy(installedR_C, mvR_C, hiddenRmv_C)
               Call columnFormulaCopy(installedR_P, mvR_P, hiddenRmv_P)
            ElseIf rslt = vbNo Then
                target.Value = fromPhase
            End If
        Else
            'Bad move - shouldn't ever hit here
            showBadMoveMsg (toPhase)
        End If
    End If
    
    'Sheets("Tech Review").Protect "m"
    
End Function


'Copy the data in the inPlace range in place. Copy forumlas from the hiddenRange to the toRange
Private Function columnFormulaCopy(inPlace As Range, toRange As Range, hiddenRange As Range)
        Application.ScreenUpdating = False
        
        'Copy fromRange over itself to fix it in place
        'kjc changed fromRange to inPlace in the following two lines
        inPlace.Copy
        inPlace.PasteSpecial (xlPasteValues)
        
        'Copy the formulas from toRange
        hiddenRange.Copy
        toRange.PasteSpecial (xlPasteFormulas)
        
        'Clear the clipboard
        Application.CutCopyMode = False
        
        Application.ScreenUpdating = True
End Function

'Show a message box that moving backward won't actually do anything
Private Function showBadMoveMsg(toPhase As String)
    MsgBox ("Moving back to " + toPhase + ". This will not alter any formulas.")
End Function

'Show a message box that you can move forward but it is going to skip a phase. Return the answer.
Private Function showSkipMoveMsg(fromPhase As String, toPhase As String, skipText) As VbMsgBoxResult
    showSkipMoveMsg = MsgBox("Moving from " + fromPhase + " to " + toPhase + _
        ". This will cause values in " + fromPhase + " to lock." + skipText + " Ok to continue?", vbQuestion + vbYesNoCancel, "Phase Transition")
End Function

'Show a message box to confirm the move forward. Return the answer.
Private Function showGoodMoveMsg(fromPhase As String, toPhase As String) As VbMsgBoxResult
    showGoodMoveMsg = MsgBox("Moving from " + fromPhase + " to " + toPhase + _
        ". This will cause values in " + fromPhase + " to lock. Ok to continue?", vbQuestion + vbYesNoCancel, "Phase Transition")
End Function

'Runs the export to Access
Sub ExportToAccessDB_New()
    'FilePath to Databases
    Dim vectrenDBPath As String
    vectrenDBPath = "Q:\Direct Projects\Vectren\Tracking Database\Vectren Tracking DB.accdb"
    'vectrenDBPath = "C:\Users\qwang\Desktop\TR Testing\Vectren Tracking DB.accdb"
    'Dim MECDBPath As String
    
    Dim MECDBPath As String
    MECDBPath = "Q:\Direct Projects\MEC\Eff. Partners\Tracking Database\EfficiencyPartners Tracking DB.accdb"
    'MECDBPath = "C:\Users\qwang\Desktop\EfficiencyPartners Tracking DB.accdb"  'For testing Usage
    
    'Grab Information about what database it should go to
    Dim dbname As String
    dbname = Me.Range("B2").Value
    
    Dim rslt As Boolean
    
    If (dbname = "Vectren") Then
        rslt = exportToVectren(vectrenDBPath)
    ElseIf (Left(dbname, 3) = "MEC") Then
        Uploading_MEC_TR.Show
        'MECDBPath = Uploading_MEC_TR.MECDBPath.Text
        If MECDBPath = "Cancel" Then
            Exit Sub
        Else
            rslt = exportToMEC(MECDBPath)
        End If
    Else
        MsgBox ("Unrecognized Program Name in cell B2. Please contact a developer for assistance.")
        Exit Sub
    End If
    
    
    'Display box if success
    If (rslt) Then
        MsgBox ("Export Completed Successfully!")
        MECDBPath = ""
    End If
    
    
End Sub

Private Function exportToVectren(vectrenDBPath As String) As Boolean
    ' Exports data to ECM table in Vectren Tracking DB

On Error GoTo ErrHandler
    Dim DB As Database
    Dim rs As Recordset
    Dim fld(1 To 22) As String
    Dim rng(1 To 22) As String
    Dim n As Integer
    Dim ECM_ID As Variant
    
    Set DB = OpenDatabase(vectrenDBPath)
    Set rs = DB.OpenRecordset("ECM", dbOpenTable)
    
        
    For n = 1 To 22
        fld(n) = ""
        rng(n) = ""
    Next n
    
    
    If (getCurrentPhase = "Preapproval") Then
        ' Data matching definitions
        fld(1) = "Nexant CPA Reviewer Name ID" ' Field in ECM Table in Access
        rng(1) = "I54" ' Range in Excel
        fld(2) = "Nexant CPA QC Name ID"
        rng(2) = "I55"
        fld(3) = "kW Savings - CPA Submitted"
        rng(3) = "D21"
        fld(4) = "kWh Savings - CPA Submitted"
        rng(4) = "D20"
        fld(5) = "Pk Therm Savings - CPA Submitted"
        rng(5) = "D25"
        fld(6) = "Therm Savings - CPA Submitted"
        rng(6) = "D24"
        fld(7) = "kW Savings - CPA reviewed"
        rng(7) = "E21"
        fld(8) = "kWh Savings - CPA reviewed"
        rng(8) = "E20"
        fld(9) = ""
        rng(9) = ""
        fld(10) = "Therm Savings - CPA reviewed"
        rng(10) = "E24"
        fld(11) = "Electric Cost Savings - CPA reviewed"
        rng(11) = "E22"
        fld(12) = "Cost Savings - CPA reviewed"
        rng(12) = "E28"
        fld(13) = "Cost - CPA reviewed"
        rng(13) = "E29"
        fld(14) = "PreApproved Incentive Amount"
        rng(14) = "E40"
        fld(15) = "Project Ineligible"
        rng(15) = "I7"
        fld(16) = "Project B/C Ratio - CPA"
        rng(16) = "E46"
        fld(17) = "Simple Payback wo Incentive - CPA"
        rng(17) = "E44"
        fld(18) = "Simple Payback w Incentive - CPA"
        rng(18) = "E45"
        'Incremental cost(in DB) = considerate cost(in TR) for Vectren
        fld(19) = "Incremental Cost - CPA reviewed"
        rng(19) = "E32"
        fld(20) = "ECM Standard Measure Name ID"
        rng(20) = "G6"
        fld(21) = "PreApproved Electric Incentive"
        rng(21) = "E38"
        fld(22) = "PreApproved Gas Incentive"
        rng(22) = "E39"
    ElseIf (getCurrentPhase = "Installed") Then
        ' Data matching definitions
        fld(1) = "Nexant PIN Reviewer Name ID" ' Field in ECM Table in Access
        rng(1) = "I54" ' Range in Excel
        fld(2) = "Nexant PIN QC Name ID"
        rng(2) = "I55"
        fld(3) = "kW Savings - PIN Submitted"
        rng(3) = "F21"
        fld(4) = "kWh Savings - PIN Submitted"
        rng(4) = "F20"
        fld(5) = ""
        rng(5) = ""
        fld(6) = "Annual Therm Savings - PIN submitted"
        rng(6) = "F24"
        fld(7) = "kW Savings - PIN reviewed"
        rng(7) = "G21"
        fld(8) = "kWh Savings - PIN reviewed"
        rng(8) = "G20"
        fld(9) = ""
        rng(9) = ""
        fld(10) = "Annual Therm Savings - PIN reviewed"
        rng(10) = "G24"
        fld(11) = "Electric Cost Savings - PIN Reviewed"
        rng(11) = "G22"
        fld(12) = "Cost Savings - PIN reviewed"
        rng(12) = "G28"
        fld(13) = "Cost - PIN reviewed"
        rng(13) = "G29"
        fld(14) = "Final Installation Incentive Amount"
        rng(14) = "G40"
        fld(15) = "Project Ineligible"
        rng(15) = "I7"
        fld(16) = "Project B/C Ratio - PIN"
        rng(16) = "G46"
        fld(17) = "Simple Payback wo Incentive - PIN"
        rng(17) = "G44"
        fld(18) = "Simple Payback w Incentive - PIN"
        rng(18) = "G45"
        'Considered cost
        fld(19) = "Incremental Cost - PIN reviewed"
        rng(19) = "G32"
        fld(20) = "ECM Standard Measure Name ID"
        rng(20) = "G6"
        fld(21) = "Final Installation Electric Incentive"
        rng(21) = "G38"
        fld(22) = "Final Installation Gas Incentive"
        rng(22) = "G39"
    ElseIf (getCurrentPhase = "M&V") Then
        ' Data matching definitions
        fld(1) = "Nexant MV Reviewer Name ID" ' Field in ECM Table in Access
        rng(1) = "I54" ' Range in Excel
        fld(2) = "Nexant MV QC Name ID"
        rng(2) = "I55"
        fld(3) = "Therm Savings - MV"
        rng(3) = "H24"
        fld(5) = "kW Savings - MV"
        rng(5) = "H21"
        fld(6) = "kWh Savings - MV"
        rng(6) = "H20"
        fld(7) = "Electric Cost Savings - MV"
        rng(7) = "H22"
        fld(7) = "Cost Savings - MV"
        rng(7) = "H28"
        fld(8) = "Cost - MV"
        rng(8) = "H29"
        fld(10) = "Project Ineligible"
        rng(10) = "I7"
        'fld(11) = ""
        'fld(11) = "Life of Measure"
        'rng(11) = "K23"
        'Considered Cost
        fld(12) = "Incremental Cost - MV"
        rng(12) = "H32"
        fld(20) = "ECM Standard Measure Name ID"
        rng(20) = "G6"
    Else
        MsgBox ("Project Phase Not Found In Export Macro")
        Exit Function
    End If
    
    
    If Me.Range("E7") = "" Then ' Check if ECM ID field is empty
        ECM_ID = InputBox("Please enter ECM ID (From top of Measure Form) " _
        & "                                                                                              " _
        & "Please close ECM form before continuing!", "ECM ID")
        If ECM_ID = vbNullString Then
            Exit Function ' Cancel
        End If
        Me.Range("E7").Value = ECM_ID
    Else ' Normal operation - ECM ID field filled
        ECM_ID = Me.Range("E7").Value
    End If
    
    ' Send to Access
    With rs
        .Index = "PrimaryKey"
        .Seek "=", ECM_ID ' Find record by ECM ID
        If .NoMatch Then
            MsgBox ("ECM ID not found")
        Else
            .Edit
            For n = 1 To UBound(fld)
             If (fld(n) <> "") Then
                If Range(rng(n)) = "" Then
                    .Fields(fld(n)).Value = Null
                Else
                    .Fields(fld(n)).Value = Range(rng(n))
                End If
              End If
            Next
            .Update ' Stores data
        End If
    End With
    
    rs.Close
    Set rs = Nothing
    DB.Close
    Set DB = Nothing
    
    exportToVectren = True
    Exit Function
    
ErrHandler:
    rs.Close
    Set rs = Nothing
    DB.Close
    Set DB = Nothing
    'Show specific error for rounding error that sometimes occurs.
    If (Err.Number = 3759) Then
        MsgBox ("There was a data truncation error. You tried to upload a number that isn't" _
        + "rounded properly. Check cell " + rng(n) + " on the tech review tab for additional rounding.")
    ElseIf (Err.Number = 3421) Then
        MsgBox ("There was a data conversion type error. You tried to pull a field that doesn't match the expected" _
            + " database field. Check cell " + rng(n) + " on the tech review for additional information.")
    Else
    'Show error message for everything else
        MsgBox ("Error number " & CStr(Err.Number) & ". " & CStr(Err.Description))
    End If
    
    exportToVectren = False
    Exit Function
End Function


Private Function exportToMEC(MECDBPath As String) As Boolean
    On Error GoTo ErrHandler
    Dim DB As Database
    Dim rs As Recordset
    Dim fld(1 To 31) As String
    Dim rng(1 To 31) As String
    Dim n As Integer
    Dim ECM_ID As String
    Dim incentStructure As String
    
    
    
    
    Set DB = OpenDatabase(MECDBPath)
    Set rs = DB.OpenRecordset("ECM", dbOpenTable)
    
    If (getCurrentPhase = "Consultation") Then
        fld(1) = ""
        rng(1) = ""
        fld(3) = ""
        rng(3) = ""
        fld(4) = ""
        rng(4) = ""
        fld(5) = ""
        rng(5) = ""
        fld(6) = ""
        rng(6) = ""
        fld(7) = ""
        rng(7) = ""
        fld(8) = "kW Savings - Consultation reviewed"
        rng(8) = "C21"
        fld(9) = "kWh Savings - Consultation reviewed"
        rng(9) = "C20"
        fld(10) = "Therm Savings - Consultation reviewed"
        rng(10) = "C24"
        fld(11) = "Pk Therm Savings -Consultation reviewed"
        rng(11) = "C25"
        fld(12) = "Cost Savings - Consultation reviewed"
        rng(12) = "C28"
        fld(13) = "Cost - Consultation reviewed"
        rng(13) = "C32"
        fld(14) = "Full Cost - Consultation reviewed"
        rng(14) = "C29"
        fld(23) = "Electric Cost Saving - Consultation reviewed"
        rng(23) = "C22"
        fld(24) = ""
        rng(24) = ""
        'fld(25) = "Sent to QC Date - Consultation"     'Move all QC date to active project tool tracking
        'rng(25) = "C55"
        fld(26) = ""
        rng(26) = ""
        fld(27) = "Simple Payback wo Incentive - Consulation"
        rng(27) = "C44"
        fld(28) = "Simple Payback w Incentive - Consulation"
        rng(28) = "C47"
        fld(29) = "New Construction"
        rng(29) = "J9"
        fld(30) = "Prescriptive Rebate - consultation"
        rng(30) = "C37"

        ' Standard Incentive
        fld(15) = "Standard Incentive - Consultation reviewed"
        rng(15) = "C40"
        fld(2) = "Electric Incentive - Consulation reviewed"
        rng(2) = "C49"
        
        ' Enhanced Incentive or Uncapped Incentive
        fld(16) = "EPartners Incentive - Consultation reviewed"
        rng(16) = "C41"
        fld(31) = ""
        rng(31) = ""
              
                
        fld(17) = "Incentive Structure ID - Consultation"
        rng(17) = "J33"
        ' Prescriptive/Custom
        fld(18) = "Incentive Type - Consultation reviewed"
        rng(18) = "I9"
        ' Standard Measure ID
        fld(19) = "ECM Standard Measure Name ID"
        rng(19) = "G6"
        fld(20) = ""           'Ineligible is not applied to Consultation phase
        rng(20) = ""
        ' EUL
        fld(21) = "Life of Measure"
        rng(21) = "C35"
        'BC Ratio
        fld(22) = "BC Result - Consultation"
        rng(22) = "C36"
    
    ElseIf (getCurrentPhase = "Preapproval") Then
        ' Data matching definitions
'        fld(1) = "Nexant PS Reviewer Name ID" ' Field in ECM Table in Access
'        rng(1) = "I54"
'        fld(2) = "Nexant PS QC Name ID"
'        rng(2) = "I56"
        
        fld(1) = "" ' Field in ECM Table in Access
        rng(1) = ""
        fld(2) = "Requested Preapproval Length"
        rng(2) = "E57"
        fld(3) = "Requested DR Length"
        rng(3) = "E58"
        fld(4) = ""
        rng(4) = ""
        fld(5) = ""
        rng(5) = ""
        fld(6) = ""
        rng(6) = ""
        fld(8) = "kW Savings - PS reviewed"
        rng(8) = "E21"
        fld(9) = "kWh Savings - PS reviewed"
        rng(9) = "E20"
        fld(10) = "Therm Savings - PS reviewed"
        rng(10) = "E24"
        fld(11) = "Pk Therm Savings -PS reviewed"
        rng(11) = "E25"
        fld(12) = "Cost Savings - PS reviewed"
        rng(12) = "E28"
        fld(13) = "Cost - PS reviewed"
        rng(13) = "E32"
        fld(14) = "Full Cost - PS reviewed"
        rng(14) = "E29"
        fld(23) = "Electric Cost Savings - PS Reviewed"
        rng(23) = "E22"
        fld(24) = "Unclaimable Saving Checkbox"
        rng(24) = "I17"
        'fld(25) = "Sent to QC Date - PS"
        'rng(25) = "E55"
        fld(27) = "Simple Payback wo Incentive - PS"
        rng(27) = "E44"
        fld(28) = "Simple Payback w Incentive - PS"
        rng(28) = "E47"
        fld(29) = "New Construction"
        rng(29) = "J9"
        fld(30) = "Prescriptive Rebate - PS reviewed"
        rng(30) = "E37"
        
        ' Standard Incentive
        fld(15) = "Standard Incentive - PS reviewed"
        rng(15) = "E40"
        fld(7) = "Electric Incentive - PS reviewed"
        rng(7) = "E49"
        
        ' Enhanced Incentive or Uncapped Incentive
        incentStructure = Me.Range("E34").Value
        If (incentStructure = "2019 IA V2") Then
            fld(16) = "EPartners Incentive - PS reviewed"
            rng(16) = "E41"
            fld(31) = "Uncapped Incentive - PS reviewed"
            rng(31) = "E42"
        Else
            fld(16) = "EPartners Incentive - PS reviewed"
            rng(16) = "E41"
            fld(31) = ""
            rng(31) = ""
        End If

        
        fld(17) = "Incentive Structure ID - PS"
        rng(17) = "J33"
        ' Prescriptive/Custom
        fld(18) = "Incentive Type - PS reviewed"
        rng(18) = "I9"
        ' Standard Measure ID
        fld(19) = "ECM Standard Measure Name ID"
        rng(19) = "G6"
        fld(20) = "PS Ineligible"
        rng(20) = "I7"
        fld(26) = "PS Ineligible Reason"
        rng(26) = "J7"
        ' EUL
        fld(21) = "Life of Measure"
        rng(21) = "E35"
        ' BC Ratio
        fld(22) = "BC Result - PS"
        rng(22) = "E36"
    ElseIf (getCurrentPhase = "Installed") Then
        ' Data matching definitions
'        fld(1) = "Nexant PIN Reviewer Name ID" ' Field in ECM Table in Access
'        rng(1) = "I54" ' Range in Excel
'        fld(2) = "Nexant PIN QC Name ID"
'        rng(2) = "I56"
        fld(1) = "" ' Field in ECM Table in Access
        rng(1) = "" ' Range in Excel
        fld(2) = ""
        rng(2) = ""
        fld(4) = ""
        rng(4) = ""
        fld(5) = ""
        rng(5) = ""
        fld(6) = ""
        rng(6) = ""
        fld(7) = "kW Savings - PIN reviewed"
        rng(7) = "G21"
        fld(8) = "kWh Savings - PIN reviewed"
        rng(8) = "G20"
        fld(9) = "Annual Therm Savings - PIN reviewed"
        rng(9) = "G24"
        fld(10) = "Peak Therm Savings - PIN reviewed"
        rng(10) = "G25"
        fld(11) = "Cost Savings - PIN reviewed"
        rng(11) = "G28"
        fld(12) = "Cost - PIN reviewed"
        rng(12) = "G32"
        fld(13) = "Full Cost - PIN reviewed"
        rng(13) = "G29"
        fld(14) = ""
        rng(14) = ""
        fld(23) = "Electric Cost Saving - PIN reviewed"
        rng(23) = "G22"
        fld(24) = "Unclaimable Saving Checkbox"
        rng(24) = "I17"
        'fld(25) = "Sent to QC Date - PIN"
        'rng(25) = "G55"
        fld(27) = "Simple Payback wo Incentive - PIN"
        rng(27) = "G44"
        fld(28) = "Simple Payback w Incentive - PIN"
        rng(28) = "G47"
        fld(29) = "New Construction"
        rng(29) = "J9"
        fld(30) = "Prescriptive Rebate - PIN reviewed"
        rng(30) = "G37"

        ' Standard Incentive
        fld(15) = "Standard Incentive - PIN reviewed"
        rng(15) = "G40"
        fld(3) = "Electric Incentive - PIN reviewed"
        rng(3) = "G49"
        
        ' Enhanced Incentive or Uncapped Incentive
        incentStructure = Me.Range("G34").Value
        If (incentStructure = "2019 IA V2") Then
            fld(16) = "EPartners Incentive - PIN reviewed"
            rng(16) = "G41"
            fld(31) = "Uncapped Incentive - PIN reviewed"
            rng(31) = "G42"
        Else
            fld(16) = "EPartners Incentive - PIN reviewed"
            rng(16) = "G41"
            fld(31) = ""
            rng(31) = ""
        End If
        
        fld(17) = "Incentive Structure ID - PIN"
        rng(17) = "J33"
        ' Prescriptive/Custom
        fld(18) = "Incentive Type - PIN reviewed"
        rng(18) = "I9"
        ' Standard Measure ID
        fld(19) = "ECM Standard Measure Name ID"
        rng(19) = "G6"
        fld(20) = "PIN Ineligible"
        rng(20) = "I7"
        fld(26) = "PIN Ineligible Reason"
        rng(26) = "J7"
        ' EUL
        fld(21) = "Life of Measure"
        rng(21) = "G35"
        ' BC Ratio
        fld(22) = "BC Result - PIN"     'disabled at this moment
        rng(22) = "G36"
    ElseIf (getCurrentPhase = "M&V") Then
        ' Data matching definitions
'        fld(1) = "Nexant MV Reviewer Name ID" ' Field in ECM Table in Access
'        rng(1) = "I54" ' Range in Excel
'        fld(2) = "Nexant MV QC Name ID"
'        rng(2) = "I56"
        fld(1) = "" ' Field in ECM Table in Access
        rng(1) = "" ' Range in Excel
        fld(2) = ""
        rng(2) = ""
        fld(3) = ""
        rng(3) = ""
        fld(4) = ""
        rng(4) = ""
        fld(5) = ""
        rng(5) = ""
        fld(6) = ""
        rng(6) = ""
        fld(7) = "kW Savings - MV"
        rng(7) = "H21"
        fld(8) = "kWh Savings - MV"
        rng(8) = "H20"
        fld(9) = "Therm Savings - MV"
        rng(9) = "H24"
        fld(10) = "Pk Therm Savings - MV"
        rng(10) = "H25"
        fld(11) = "Cost Savings - MV"
        rng(11) = "H28"
        fld(12) = "Cost - MV"
        rng(12) = "H32"
        fld(13) = ""
        rng(13) = ""
        fld(14) = ""
        rng(14) = ""
        fld(15) = ""
        rng(15) = ""
        fld(16) = ""
        rng(16) = ""
        fld(17) = ""
        rng(17) = ""
        fld(18) = ""
        rng(18) = ""
        fld(19) = ""
        rng(19) = ""
        fld(20) = ""
        rng(20) = ""
        fld(21) = ""
        rng(21) = ""
        fld(22) = ""
        rng(22) = ""
        fld(23) = "Electric Cost Savings - MV"
        rng(23) = "H22"
        fld(24) = ""
        rng(24) = ""
        fld(25) = ""
        rng(25) = ""
        fld(26) = ""
        rng(26) = ""
        fld(29) = ""
        rng(29) = ""
        fld(30) = ""
        rng(30) = ""
        fld(31) = ""
        rng(31) = ""
    Else
        MsgBox ("Project Phase Not Found In Export Macro")
        Exit Function
    End If
    
    If Me.Range("E7") = "" Then ' Check if ECM ID field is empty
        ECM_ID = InputBox("Please enter ECM ID (From top of Measure Form) " _
        & "                                                                                              " _
        & "Please close ECM form before continuing!", "ECM ID")
        If ECM_ID = vbNullString Then
            Exit Function ' Cancel
        End If
        Me.Range("E7").Value = ECM_ID
    Else ' Normal operation - ECM ID field filled
        ECM_ID = Me.Range("E7").Value
    End If
    
    ' Send to Access
    With rs
        .Index = "PrimaryKey"
        .Seek "=", ECM_ID ' Find record by ECM ID
        If .NoMatch Then
            MsgBox ("ECM ID not found")
        Else
            .Edit
            For n = 1 To UBound(fld)
             If (fld(n) <> "") Then
                If (rng(n) = "G30" Or rng(n) = "H30" Or rng(n) = "E30" Or rng(n) = "C30") Then
                    If (Range(rng(n)).Value <> "N/A") Then
                        .Fields(fld(n)).Value = Range(rng(n))
                    End If
                ElseIf Range(rng(n)) = "" Then
                    .Fields(fld(n)).Value = Null
                Else
                    .Fields(fld(n)).Value = Range(rng(n))
                End If
              End If
            Next
            .Update ' Stores data
        End If
    End With

    rs.Close
    Set rs = Nothing
    DB.Close
    Set DB = Nothing
    MECDBPath = ""
    exportToMEC = True
    Exit Function
    
ErrHandler:
    rs.Close
    Set rs = Nothing
    DB.Close
    Set DB = Nothing
    MECDBPath = ""
    'Show specific error for rounding error that sometimes occurs.
    If (Err.Number = 3759) Then
        MsgBox ("There was a data truncation error. You tried to upload a number that isn't" _
        + "rounded properly. Check cell " + rng(n) + " on the tech review tab for additional rounding.")
    ElseIf (Err.Number = 3421) Then
        MsgBox ("There was a data conversion type error. You tried to pull a field that doesn't match the expected" _
            + " database field. Check cell " + rng(n) + " on the tech review for additional information.")
    Else
    'Show error message for everything else
        MsgBox ("Error number " & CStr(Err.Number) & ". " & CStr(Err.Description))
    End If
    
    exportToMEC = False
    Exit Function
End Function

Sub EmailSender()
'This subprogram is to Copy the Email sending information from tab "CE Test Email" to your outlook
    Dim Source(1 To 4) As String
    Dim ws As Worksheet
    Dim OutApp As Object
    Dim OutMail As Object
    'Dim RSACount As Integer

    
    
RSACount = InputBox("How many times have you sent testing email to RSA already (exculde this time)", "Email to RSA Count")
Select Case RSACount
        Case Is = Empty
            MsgBox ("Please try again and put a valid number starting from 0")
            Exit Sub
        Case Is > 4
            MsgBox ("Please tell Admin that this project under current phase has been requested for RSA testing more than 4th")
            Exit Sub
        Case Is > 1
            RSAConfirm = MsgBox("Including this time, the RSA testing has been requested more than two times. Is the current resubmission approved by MEC?", vbYesNoCancel)
            If RSAConfirm <> vbYes Then
                MsgBox ("Please get resubmission approval first before you send this email")
                Exit Sub
            Else
                MsgBox ("Don't forget to update DB to track this resubmission number " & RSACount + 1)
            End If

 End Select
            



    On Error Resume Next
    Source(1) = "B2"
    Source(2) = "B3"
    Source(3) = "B4"
    Source(5) = "B5"
    Source(4) = "A11"
    On Error GoTo 0

    With Application
        .ScreenUpdating = False
        .EnableEvents = False
    End With

    ThisWorkbook.Save
    
    Set ws = ActiveWorkbook.Sheets("CE Test Email")
    ws.Activate

    
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)


        With OutMail
            .To = ws.Range(Source(1)).Value
            .CC = ws.Range(Source(2)).Value
            .Subject = ws.Range(Source(3)).Value
            .Body = ws.Range(Source(4)).Value
            '.Body = "Testing"                  'just for testing usage, when Prj ID is not filled
            .Attachments.Add (ActiveWorkbook.FullName)
            'You can add other files also like this
            '.Attachments.Add ("C:\test.txt")
            
                With Application
                    .ScreenUpdating = True
                    .EnableEvents = True
                End With
            
            .Display    'Let Engineers Customize the email content if needed
            '.Send
        End With
        On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing

End Sub



'Sub test()
'    Dim path As String
'    path = "C:\Users\abrown\Desktop\EfficiencyPartners Tracking DB - KAM Update 2.accdb"
'    Dim ecmid As String
'    ecmid = "265939410"
'
'    Dim db As Database
'    Set db = OpenDatabase(path)
'
'    Call ImportToTrakSmartTabMEC(db, ecmid)
'
'End Sub


'Grab data from the database & import it to the TrakSmart tab
Function ImportToTrakSmartTabMEC(mecdb As Database, ECMID As String)

    On Error GoTo ErrHandler
    Dim DB As Database
    Dim rs As Recordset
    Set DB = mecdb
    
    Dim tsWS As Worksheet
    Set tsWS = ThisWorkbook.Sheets("TrakSmart")


    Set rs = DB.OpenRecordset("SELECT * FROM TechReview_TrakSmartQuery WHERE [ECM ID]=" & ECMID)

    If (rs.RecordCount > 0) Then
        With rs
            .MoveFirst

            Dim sector As String
            sector = .Fields("Customer Sector").Value
            If (sector = "I") Then
                sector = "Industrial"
            Else
                sector = "Commercial"
            End If
            tsWS.Range("B7").Value = sector

            Dim kaminfo As String
            kaminfo = .Fields("KAM Name").Value & "; " & .Fields("KAM Email").Value
            tsWS.Range("B10").Value = kaminfo
 
    

            Dim installerType As String
            installerType = .Fields("Installer").Value

            tsWS.Range("B14").Value = installerType
            
            'Contractor address
            If (installerType <> "Unassigned") Then
                Dim contractorAddress As String
                contractorAddress = .Fields("Contractor Street").Value
                contractorAddress = contractorAddress & " " & .Fields("Contractor City").Value
                contractorAddress = contractorAddress & " " & .Fields("Contractor State").Value
                contractorAddress = contractorAddress & " " & .Fields("Contractor Phone").Value
                tsWS.Range("B15").Value = contractorAddress
            End If
            
            tsWS.Range("B20").Value = .Fields("Install Date").Value
            
        End With
    End If
    
    On Error Resume Next
    rs.Close
    Set rs = Nothing

    
    Exit Function
    
ErrHandler:
    On Error Resume Next
    rs.Close
    Set rs = Nothing

    MsgBox ("Error Importing Data to TrakSmart Tab " & Err.Number & " " & Err.Description)
    
End Function

Sub DownloadfromDB()


Dim DB As Database
Dim rs As Recordset
Dim MECDBPath As String
Dim ECMID As Double
Dim Rng_exl(1 To 4) As String
Dim Fld_Acc(1 To 4) As String
Dim Answer As String

'Set DB path
MECDBPath = "Q:\Direct Projects\MEC\Eff. Partners\Tracking Database\EfficiencyPartners Tracking DB.accdb"
vectrenDBPath = "Q:\Direct Projects\Vectren\Tracking Database\Vectren Tracking DB.accdb"
ECMID = Range("E7") 'Grab ECM ID

For i = 1 To 4
    Rng_exl(i) = ""
    Fld_Acc(i) = ""
Next i

Answer = MsgBox("You are going to connecting to live database", vbYesNo)

If Answer = vbYes Then

    If Range("B2") = "Vectren" Then
        Set DB = OpenDatabase(vectrenDBPath)
        Set rs = DB.OpenRecordset("Tech_Review_Download_Custom", dbOpenSnapshot)
        
        'Define the download range and field
        Rng_exl(1) = "B3"
        Rng_exl(2) = "B4"
        Rng_exl(3) = "B7"
        Rng_exl(4) = ""
        
        Fld_Acc(1) = "Organization Name"
        Fld_Acc(2) = "Building Name"
        Fld_Acc(3) = "Project Number"
        Fld_Acc(4) = ""
            
        With rs
        .FindFirst "[ECM ID]=" & ECMID
        If .NoMatch Then
            MsgBox ("ECM ID " & ECMID & " cannot be found in the selected program. Downloading failed")
            GoTo Cleanup
        Else
            For i = 1 To 4
            If Rng_exl(i) <> "" And Fld_Acc(i) <> "" Then
                If Range(Rng_exl(i)) = "" Then
                Range(Rng_exl(i)) = .Fields(Fld_Acc(i))
                Else
                    If Range(Rng_exl(i)) <> .Fields(Fld_Acc(i)) Then
                        Answer = MsgBox("Replace tech review value '" & Range(Rng_exl(i)) & "' by '" & .Fields(Fld_Acc(i)) & "' ?", vbYesNo)
                    End If
                    If Answer = vbYes Then
                        Range(Rng_exl(i)) = .Fields(Fld_Acc(i))
                    End If
                End If
            End If
            Next i
        End If
        End With

    Else
        If Range("B2") = "MEC Industrial Partners" Or Range("B2") = "MEC Standard Rebate Only" Then
            Set DB = OpenDatabase(MECDBPath)
            Set rs = DB.OpenRecordset("Tech_Review_Download", dbOpenSnapshot)
            
            'Define the download range and field
            Rng_exl(1) = "B3"
            Rng_exl(2) = "B7"
            
            Fld_Acc(1) = "Organization Name"
            Fld_Acc(2) = "Project ID"
            
            With rs
            .FindFirst "[ECM ID]=" & ECMID
            If .NoMatch Then
                MsgBox ("ECM ID " & ECMID & "cannot be found in the selected program")
                GoTo Cleanup
            Else
                For i = 1 To 2
                If Rng_exl(i) <> "" And Fld_Acc(i) <> "" Then
                    Range(Rng_exl(i)) = .Fields(Fld_Acc(i))
                End If
                Next i
            End If
            End With
        
        Else
            MsgBox ("You need to select program before downloading")
            Exit Sub
        End If
    End If

Else
    Exit Sub
End If


Cleanup:
    rs.Close
    Set rs = Nothing
    Set DB = Nothing
    
End Sub










Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Application.StatusBar = "Checking for errors..."
    Call runErrorChecker
        
    Application.StatusBar = "Checking for Updates..."
    Call checkForUpdates
        
    Application.StatusBar = "Initializing VBA..."
    Call initialize
        
    'End of open workbook check
    Application.StatusBar = "Finished Loading!"
End Sub

'-- These might need to be held in modules so they can be updated if required
Private Sub runErrorChecker()
    'Check for multiple/missing instances of main sheets, BillCalculator, Calc, Tech Review
End Sub

Private Sub checkForUpdates()
    'Check external workbook for update code
    
    
    'Ask if they would like to update if updates are found
        
    'Execute updates
    Application.StatusBar = "Applying Updates..."
    
    
End Sub

Private Sub notifyChanges()
    'Notify the user of updates or errors
End Sub

'Initialize all global variables
Private Sub initialize()
    'Grab the current phase of the status, helps prevent errors
    Call TechReview.setOldPhase
End Sub

'Workbook close event
Private Sub Workbook_BeforeClose(Cancel As Boolean)
 On Error GoTo Err
    'Check for existing links and prompt with an error message to notify the user.
    Dim aLinks As Variant
    Dim response As VbMsgBoxResult
    aLinks = ActiveWorkbook.LinkSources
    If Not IsEmpty(aLinks) Then
       response = MsgBox("Links to external sources were found in this workbook. They can be viewed under Data -> Edit Links. " + _
       "It can be unsafe to save a workbook with links. Links are often auto-populated when copying tabs between workbooks. " & vbCrLf & vbCrLf & "Would you like" + _
       " to edit the workbook before closing to try and resolve this issue?", vbCritical + vbYesNo, "Links Found in the Workbook")
       If (response = vbYes) Then
            Cancel = True
       End If
    End If
Err:
    'If this doesn't work, who cares,
    'Better to skip then burden the end-users with additional errors
End Sub
Attribute VB_Name = "TrakSmart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Uploading_MEC_TR"
Attribute VB_Base = "0{1525E3EF-FADA-40AF-AD6D-54F78506DC73}{9103C3B9-7156-4107-A59A-94438DEC22FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub LocalDB_Click()
MsgBox ("Please Select Your Local Database")
    With Application.FileDialog(msoFileDialogFilePicker)
        .AllowMultiSelect = False
        .Title = "Select your local database location"
        If .Show Then
            Me.LocalDBPath.Value = .SelectedItems(1) '.SelectedItems(1) & "\" & "EfficiencyPartners Tracking DB.accdb"
        End If
    End With
End Sub

Private Sub Submit_Click()
Dim Answer As String

 If Me.LocalDB.Value = True Then
    If Me.LiveDB.Value = True Then
        Answer = MsgBox("You cannot select both options for uploading. Please move one of the option then try again", vbOK)
        MECDBPath = "Cancel"
        Exit Sub
    Else
       If IsEmpty(Me.LocalDBPath.Value) Or Me.LocalDBPath.Value = "" Or Me.LocalDBPath.Value = "Put Your Path Here" Then
           MsgBox ("Invalid Path. Exit Macro")
           MECDBPath = "Cancel"
           Exit Sub
       Else
           MECDBPath = Me.LocalDBPath.Value
       End If
    End If
Else
    If Me.LiveDB.Value = True Then
        MECDBPath = "Q:\Direct Projects\MEC\Eff. Partners\Tracking Database\EfficiencyPartners Tracking DB.accdb"
        'MECDBPath = "C:\Users\qwang\Desktop\EfficiencyPartners Tracking DB.accdb"  'For testing Usage
    Else
        MsgBox ("No option has been selected. Tech review will not upload")
        MECDBPath = "Cancel"
        Exit Sub
    End If
End If
Unload Uploading_MEC_TR
End Sub

Private Sub Cancel_Click()
    MECDBPath = "Cancel"
    Unload Uploading_MEC_TR
End Sub
Attribute VB_Name = "VectrenEDAUpload"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub EDA_Upload()
'For Vectren new construction program, one new construction application could include multiple custom measures.
'This macro and the tab this macro stays work similar to WT workbook "TO Access" macro. It grabs info from each TR tab, then upload to DB from here all in once.
'For Vectren, not only does the WT measures need to do on this way, PS and PIN for new consturction has also work the same way.

' Variables ***************************************************************************************************
Dim Num_Col As Integer   'The last column number where tab name is not blank
Dim Fld_exl() As String     'The uploading field name in excel
Dim Row_exl() As Integer    'Row of each uploading field in excel
Dim Rng_exl() As Range      'location/range of rach uploading field in excel
Dim Fld_Acc() As String     'Field name in access
Dim DB As Database          'Database object
Dim rs As Recordset         'Recordset object
Dim DBPath As String        'DB Path
Dim ECM As Variant          'ECM ID
Dim Msg(1 To 1) As String   'Warning message
Dim Ans(1 To 1) As String   'Response from user
Dim Num_Tab As String       'Count of tab where new project needs to be created in DB / ECM ID is missing
Dim EDA_ID As Long
Dim Building_ID As Long
Dim Phase As String

Dim Ct As Integer   'The uploading field number count
Ct = 19
ReDim Fld_exl(1 To Ct) As String
ReDim Row_exl(1 To Ct) As Integer
ReDim Rng_exl(1 To Ct) As Range
ReDim Fld_Acc(1 To Ct) As String


'Define Field name in exl and access********************************************************************
'Study ID or EDA ID and Phase
EDA_ID = Range("G2")
Phase = Range("H2")
Building_ID = Range("E2")

'In Excel
Fld_exl(1) = "Tab Name"
Fld_exl(2) = "ECM ID"
Fld_exl(3) = "Project Name"
Fld_exl(4) = "ECM Standard Measure ID"
Fld_exl(5) = "Ineligible?"
Fld_exl(6) = "kW Savings"
Fld_exl(7) = "kWh Savings"
Fld_exl(8) = "Electric Cost Savings"
Fld_exl(9) = "Therm Savings"
Fld_exl(10) = "Cost Savings ($)"
Fld_exl(11) = "Full Project Cost ($)"
Fld_exl(12) = "Eligible Project Cost ($)"
Fld_exl(13) = "Estimated Useful Life"
Fld_exl(14) = "Custom Electric Incentive ($)"
Fld_exl(15) = "Custom Gas Incentive ($)"
Fld_exl(16) = "Custom Total Incentive ($)"
Fld_exl(17) = "Simple Payback without Incentive (Considered Cost)"
Fld_exl(18) = "Simple Payback with Incentive (Considered Cost)"
Fld_exl(19) = "Benefit Cost Ratio (TRC)"

'In Access
        Fld_Acc(1) = ""
        Fld_Acc(2) = "ECM ID"
        Fld_Acc(3) = "ECM Name"
        Fld_Acc(4) = "ECM Standard Measure Name ID"
        Fld_Acc(5) = "Project Ineligible"
Select Case Phase
    Case "Assessment"
        Fld_Acc(6) = "kW Savings - Walk-Through"
        Fld_Acc(7) = "kWh Savings - Walk-Through"
        Fld_Acc(8) = "Electric Cost Savings - Walk-Through"
        Fld_Acc(9) = "Therm Savings - Walk-Through"
        Fld_Acc(10) = "Cost Savings - Walk-Through"
        Fld_Acc(11) = "Cost - Walk-Through"
        Fld_Acc(12) = "Incremental Cost - Walk-Through"
        Fld_Acc(13) = "Life of Measure"
        Fld_Acc(14) = "Electric Incentive - Walk-Through"
        Fld_Acc(15) = "Gas Incentive - Walk-Through"
        Fld_Acc(16) = "Incentive - Walk-Through"
        Fld_Acc(17) = "Simple Payback wo Incentive - Walk-Through"
        Fld_Acc(18) = "Simple Payback w Incentive - Walk-Through"
        Fld_Acc(19) = "Project B/C Ratio - Walk-Through"
    Case "Preapproval"
        Fld_Acc(6) = "kW Savings - CPA reviewed"
        Fld_Acc(7) = "kWh Savings - CPA reviewed"
        Fld_Acc(8) = "Electric Cost Savings - CPA reviewed"
        Fld_Acc(9) = "Therm Savings - CPA reviewed"
        Fld_Acc(10) = "Cost Savings - CPA reviewed"
        Fld_Acc(11) = "Cost - CPA reviewed"
        Fld_Acc(12) = "Incremental Cost - CPA reviewed"
        Fld_Acc(13) = "Life of Measure"
        Fld_Acc(14) = "PreApproved Electric Incentive"
        Fld_Acc(15) = "PreApproved Gas Incentive"
        Fld_Acc(16) = "PreApproved Incentive Amount"
        Fld_Acc(17) = "Simple Payback wo Incentive - CPA"
        Fld_Acc(18) = "Simple Payback w Incentive - CPA"
        Fld_Acc(19) = "Project B/C Ratio - CPA"
    Case "Installed"
        Fld_Acc(6) = "kW Savings - PIN reviewed"
        Fld_Acc(7) = "kWh Savings - PIN reviewed"
        Fld_Acc(8) = "Electric Cost Savings - PIN Reviewed"
        Fld_Acc(9) = "Annual Therm Savings - PIN reviewed"
        Fld_Acc(10) = "Cost Savings - PIN reviewed"
        Fld_Acc(11) = "Cost - PIN reviewed"
        Fld_Acc(12) = "Incremental Cost - PIN reviewed"
        Fld_Acc(13) = "Life of Measure"
        Fld_Acc(14) = "Final Installation Electric Incentive"
        Fld_Acc(15) = "Final Installation Gas Incentive"
        Fld_Acc(16) = "Final Installation Incentive Amount"
        Fld_Acc(17) = "Simple Payback wo Incentive - PIN"
        Fld_Acc(18) = "Simple Payback w Incentive - PIN"
        Fld_Acc(19) = "Project B/C Ratio - PIN"
End Select

'Set Parameters *****************************************************************************************************
'Find the correct row for uploading
'With ThisWorkbook.Sheets("To Access (Vectren EDA)")
For i = 1 To Ct
Row_exl(i) = Range("B:B").Find(What:=Fld_exl(i), LookIn:=xlValues, Lookat:=xlWhole).Row
Next i

' Detect the last column number where tab name is not blank
Num_Col = Cells(5, Columns.Count).End(xlToLeft).Column

'Find if there is new project needs to be created directly in DB from TR
For k = 3 To Num_Col
    Msg(1) = ""
    Num_Tab = 0
    Ans(1) = ""
    If Cells(Row_exl(2), k) = 0 Or Cells(Row_exl(2), k) = "" Then
        Msg(1) = Msg(1) & Cells(Row_exl(1), k) & ";"
        Num_Tab = Num_Tab + 1
    End If
Next k
'End With

'DB location
DBPath = "Q:\Direct Projects\Vectren\Tracking Database\Vectren Tracking DB.accdb"
'DBPath = "C:\Users\qwang\Desktop\Vectren Tracking DB.accdb"    'for testing
Set DB = OpenDatabase(DBPath)
Set rs = DB.OpenRecordset("ECM", dbOpenTable)

'Uploading Section *******************************************************************************************
With rs
'Ask what excel should do to handle those new projects if found any
If Num_Tab > 0 Then
    Msg(1) = "Tab " & Left(Msg(1), Len(Msg(1)) - 1) & " is(are) missing ECM ID, it(they) will be treated as new project(s) to be created in DB. Please confirm."
    Ans(1) = MsgBox(Msg(1), vbOKCancel, "New Project Creation Confimation")
    If Ans(1) = vbOK Then
    
        
        'Uploading method 1, creating project then uploading if ECM ID is missing

        For j = 3 To Num_Col
               
            If Cells(Row_exl(2), j) = 0 Or Cells(Row_exl(2), j) = "" Or IsEmpty(Cells(Row_exl(2), j)) Then  'If ECM ID is missing, then add new record
                 .AddNew
                 Cells(Row_exl(2), j) = .Fields(Fld_Acc(2)).Value
                 For i = 3 To Ct
                    .Fields(Fld_Acc(i)).Value = Cells(Row_exl(i), j)
                 Next i
                 .Fields("EDA ID") = EDA_ID   'Study ID
                 .Fields("ECM Program Election") = 2     'ECM Origin from study, the index for study is 2
                 .Fields("Project ID") = Building_ID    'Porject ID in ECM Table
                 .Update
            Else 'If ECM ID is given, then search for it in ECM table, then update record
                .Index = "PrimaryKey"
                .Seek "=", Cells(Row_exl(2), j)
                If .NoMatch Then 'If there is no match, skip uploading for this project
                    MsgBox ("ECM ID " & Cells(Row_exl(2), j) & ", Measure " & Cells(Row_exl(3), j) & " is not found, uploading will skip this project")
                Else
                    .Edit 'If found, start uploading
                    For i = 3 To Ct
                        .Fields(Fld_Acc(i)).Value = Cells(Row_exl(i), j)
                    Next i
                    .Fields("EDA ID") = Range("G2")   'Study ID
                    .Fields("ECM Program Election") = 2     'ECM Origin from study, the index for study is 2
                    .Fields("Project ID") = Building_ID    'Porject ID in ECM Table
                 End If
                 .Update
              End If
        Next j
        
    Else
        MsgBox ("Exit Uploading Process, no record is uploaded to DB")
    End If
End If

'Uploading Method 2, search ECM then update
        For j = 3 To Num_Col
            .Index = "PrimaryKey"
            .Seek "=", Cells(Row_exl(2), j)
            If .NoMatch Then 'If there is no match, skip uploading for this project
                MsgBox ("ECM ID " & Cells(Row_exl(2), j) & ", Measure " & Cells(Row_exl(3), j) & " is not found, uploading will skip this project")
            Else
                .Edit 'If found, start uploading
                For i = 3 To Ct
                    .Fields(Fld_Acc(i)).Value = Cells(Row_exl(i), j)
                Next i
                .Fields("EDA ID").Value = EDA_ID   'Study ID
                .Fields("ECM Program Election") = 4     'ECM Origin from study, the index for EDA study is 2
                .Fields("Project ID") = Building_ID    'Porject ID in ECM Table
                .Update
             End If
        Next j
End With

MsgBox ("Uploading Is Completed!")

End Sub

' InQuest injected base64 decoded content
' xI^r

INQUEST-PP=macro
