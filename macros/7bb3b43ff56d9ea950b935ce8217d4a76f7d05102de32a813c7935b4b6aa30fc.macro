Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCPINum, 20, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 21, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 82, 2, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean

Private Sub Resize(numCPIIndex As Integer)
    On Error GoTo errorHandler
    Dim asn$: asn = ActiveSheet.Name
    Dim modelMapping$: modelMapping = "NX_" & asn & "_M_ModelMapping"
    Range(modelMapping).Clear
    Range(Range(modelMapping).Cells(1, 1), Range(modelMapping).Cells(numCPIIndex, 3)).Select
    ActiveWorkbook.Names.Add Name:=modelMapping, RefersTo:=Selection
    Range("NX_" & asn & "_M_RealRateModels").ClearContents
    Range("NX_" & asn & "_M_CPIModels").ClearContents
    
    'Resize the Model tables
    Dim tempRange As Range: Set tempRange = Range(modelMapping)
    Call formatColorAndBorder(tempRange)
    Call addConditionalFormat(tempRange)
    
    Dim i%, j%
    For i = 1 To tempRange.Rows.Count
        For j = 1 To tempRange.Columns.Count
            Range(modelMapping).Cells(i, j) = "<LINK>"
        Next j
    Next i
    
    'Resize the Correlation Matrix
    Dim rngModelMapping As Range: Set rngModelMapping = Range(modelMapping)
    Dim domesticCurncyAddr$: domesticCurncyAddr = Range("NX_" & asn & "_M_DomesticCurrency").Address
    Dim anchor As Range: Set anchor = Range("NX_" & asn & "_M_CorrAnchor")
    Range("NX_" & asn & "_M_CorrAllData").Clear
    
    anchor.Offset(0, 1).Formula = "=" & domesticCurncyAddr
    anchor.Offset(1, 0).Formula = "=" & domesticCurncyAddr
    
    For i = 2 To numCPIIndex + 1
        anchor.Offset(0, i).Formula = "=" & rngModelMapping(i - 1, 1).Address
        anchor.Offset(i, 0).Formula = "=" & rngModelMapping(i - 1, 1).Address
    Next i
    
    For i = 1 To numCPIIndex
        anchor.Offset(0, i + numCPIIndex + 1).Formula = "=" & rngModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
        anchor.Offset(i + numCPIIndex + 1, 0).Formula = "=" & rngModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
    Next i
    
    'Fill in the default matrix data
    For i = 1 To 2 * numCPIIndex + 1
        anchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numCPIIndex + 1
            anchor.Offset(i, j) = 0
        Next j
    Next i
    
    Range(anchor.Offset(0, 0), anchor.Offset(numCPIIndex * 2 + 1, numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrAllData", RefersTo:=Selection
    'Column Headings
    Range(anchor.Offset(0, 1), anchor.Offset(0, numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrColHeader", RefersTo:=Selection
    Call formatHeader(Range("NX_" & asn & "_M_CorrColHeader"))
            
    'Row Headings
    Range(anchor.Offset(1, 0), anchor.Offset(numCPIIndex * 2 + 1, 0)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrRowHeader", RefersTo:=Selection
    Call formatHeader(Range("NX_" & asn & "_M_CorrRowHeader"))

    'Data Range
    Range(anchor.Offset(1, 1), anchor.Offset(numCPIIndex * 2 + 1, numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrData", RefersTo:=Selection
    Call formatColorAndBorder(Range(anchor.Offset(1, 1), anchor.Offset(numCPIIndex * 2 + 1, numCPIIndex * 2 + 1)))
    anchor.Formula = "=nxlibmatrix(NX_" & asn & "_M_CorrColHeader,NX_" & asn & "_M_CorrRowHeader,NX_" & asn & "_M_CorrData," & """" & asn & ".Corr" & """" & ")"
    
    Call formatColorAndBorder(anchor)
    Exit Sub
    
errorHandler:
    Exit Sub
End Sub


Private Sub CreateModel()
    On Error GoTo errorHandler
    Dim asn$: asn = ActiveSheet.Name
    Dim rngModelMapping As Range: Set rngModelMapping = Range("NX_" & asn & "_M_ModelMapping")
    Dim numCPIIndex%: numCPIIndex = rngModelMapping.Rows.Count
    
    Dim rngRealModel As Range: Set rngRealModel = Range("NX_" & asn & "_M_RealRateModels")
    Dim rngCPIModel As Range: Set rngCPIModel = Range("NX_" & asn & "_M_CPIModels")
    rngRealModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngModelMapping.Cells(1, 2), rngModelMapping.Cells(numCPIIndex, 2)).Address & "," & """" & "JYModel.RealRateModelsData" & """" & ")"
    rngCPIModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngModelMapping.Cells(1, 3), rngModelMapping.Cells(numCPIIndex, 3)).Address & "," & """" & "JYModel.CPIModelsData" & """" & ")"

cleanUP:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    Exit Sub

errorHandler:
    MsgBox ("Error when creating model")
    Resume cleanUP
End Sub



Private Sub CreateButton_Click()
    CreateModel
End Sub

Private Sub ResizeButton_Click()
    On Error GoTo cleanUP
    If hasBeenInitialised = False Then
        ComboBoxCPINum.Clear
        ComboBoxCPINum.AddItem ("1 CPI Index")
        ComboBoxCPINum.AddItem ("2 CPI Index")
        ComboBoxCPINum.AddItem ("3 CPI Index")
        ComboBoxCPINum.AddItem ("4 CPI Index")
        ComboBoxCPINum.AddItem ("5 CPI Index")
        ComboBoxCPINum.AddItem ("6 CPI Index")
        ComboBoxCPINum.AddItem ("7 CPI Index")
        ComboBoxCPINum.AddItem ("8 CPI Index")
        ComboBoxCPINum.AddItem ("9 CPI Index")
        ComboBoxCPINum.AddItem ("10 CPI Index")
        
        ComboBoxCPINum.Text = "1 CPI Index"
        hasBeenInitialised = True
    End If

    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxCPINum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error in ComboBox"
        GoTo cleanUP
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
cleanUP:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub

Private Sub Worksheet_Activate()
    On Error GoTo cleanUP
    ComboBoxCPINum.Clear
    ComboBoxCPINum.AddItem ("1 CPI Index")
    ComboBoxCPINum.AddItem ("2 CPI Index")
    ComboBoxCPINum.AddItem ("3 CPI Index")
    ComboBoxCPINum.AddItem ("4 CPI Index")
    ComboBoxCPINum.AddItem ("5 CPI Index")
    ComboBoxCPINum.AddItem ("6 CPI Index")
    ComboBoxCPINum.AddItem ("7 CPI Index")
    ComboBoxCPINum.AddItem ("8 CPI Index")
    ComboBoxCPINum.AddItem ("9 CPI Index")
    ComboBoxCPINum.AddItem ("10 CPI Index")
    ComboBoxCPINum.Text = "1 CPI Index"
    
    hasBeenInitialised = True

cleanUP:
    ActiveSheet.Calculate
End Sub


''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
    

End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With

    Cells(1, 1).Select

End Sub






Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableButton, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateInstrumentsButton, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Function IsValidFreq(x As String) As Boolean
    Dim y As String: y = UCase$(x)
    
    IsValidFreq = (y = "1M" Or y = "2M" Or y = "3M" _
                  Or y = "4M" Or y = "6M")
End Function

Private Function TenorInMonths(x As String) As Integer
    Dim y As String: y = UCase$(x)
    
    If y Like "##Y" Or y Like "#Y" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1)) * 12
    ElseIf y Like "###M" Or y Like "##M" Or y Like "#M" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1))
    Else
        Err.Raise 5
    End If
End Function


Private Sub GenerateCapletsSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, k As Integer, counter As Integer: counter = 0
    ClearCapletsSwaptions
    
    'Generate Caplets
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngInCaplets As Range: Set rngInCaplets = Range("NX_" & asn & "_M_CapletsSelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_InstrumentsDefs")
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    'Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue")      Model ID
    Dim ccyVal$: ccyVal = Range("NX_" & asn & "_M_CurrencyValue")
    Dim nameVal$: nameVal = Range("NX_" & asn & "_M_NameValue")
    Dim freqVal$: freqVal = Range("NX_" & asn & "_M_CapletsFreqValue")
    Dim startTenorVal$: startTenorVal = Range("NX_" & asn & "_M_CapletsTableStartTenor")
    Dim endTenorVal$: endTenorVal = Range("NX_" & asn & "_M_CapletsTableEndTenor")
    Dim freqMonths As Integer
    Dim startTenorMonths As Integer
    Dim endTenorMonths As Integer
    Dim CapletsID$
    
'    If IsValidFreq(freqVal) Then
'        freqMonths = TenorInMonths(freqVal)
'    Else
'        GoTo GenerateCaplets_BadFreq
'    End If
    On Error GoTo GenerateCaplets_BadTenor
    freqMonths = TenorInMonths(freqVal)
    startTenorMonths = TenorInMonths(startTenorVal)
    endTenorMonths = TenorInMonths(endTenorVal)
    On Error GoTo 0
    
    'The tenor last observed
    
   ' Dim prevMonths As Integer: prevMonths = startTenorMonths
    
    ' Fill in the caplets
    For j = 2 To rngInCaplets.Rows.Count
        On Error GoTo GenerateCaplets_BadTenor
        Dim nMonths As Integer: nMonths = TenorInMonths(rngInCaplets.Cells(j, 1))
        On Error GoTo 0
        
        For i = 1 To rngInCaplets.Columns.Count
            If rngInCaplets.Cells(j, i) = "Y" Then
                counter = counter + 1
                'rngOt.Cells(counter, 1) = CStr(prevMonths) & "M"
                rngOt.Cells(counter, 1) = rngInCaplets.Cells(j, 1)
                
                If j = rngInCaplets.Rows.Count Then
                    Dim kk As Integer
                    kk = CInt(TenorInMonths(rngInCaplets.Cells(j, 1))) + freqMonths
                    
                    If kk Mod 12 = 0 Then
                        rngOt.Cells(counter, 2) = CStr(kk / 12) & "Y"
                    Else
                        rngOt.Cells(counter, 2) = CStr(kk) & "M"
                    End If
                    
                Else
                    rngOt.Cells(counter, 2) = rngInCaplets.Cells(j + 1, 1)
                End If
                                
                rngOt.Cells(counter, 3) = rngInCaplets.Cells(1, i)
                
          '      If (nMonths - prevMonths > freqMonths) Then
          '          CapletsID = prefixVal & "." & nameVal & "." & ccyVal & ".Cap." & rngOt.Cells(counter, 1) & "." & rngOt.Cells(counter, 2) & "." & rngOt.Cells(counter, 3)
          '      Else
                    CapletsID = prefixVal & "." & nameVal & "." & ccyVal & "." & Range("NX_" & asn & "_M_CapletsFlavor") & "let." & rngOt.Cells(counter, 1) & "." & rngOt.Cells(counter, 2) & "." & rngOt.Cells(counter, 3)
          '      End If
                
                rngOt.Cells(counter, 4).Formula = "=nxInstrumentCapTenor(" & invCom & CapletsID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & "NX_" & asn & "_M_CapletsFlavor," _
                    & rngOt.Cells(counter, 1).Address & "," _
                    & rngOt.Cells(counter, 2).Address & "," _
                    & rngOt.Cells(counter, 3).Address & "," _
                    & "NX_" & asn & "_M_CapletsConventionValue," _
                    & "NX_" & asn & "_M_CapletsFreqValue," _
                    & "NX_" & asn & "_M_CapletsBasisValue," _
                    & "NX_" & asn & "_M_CapletsVolCurveID," _
                    & "NX_" & asn & "_M_CapletsNoticePeriodValue)" _

            End If
        Next
     
 '       prevMonths = nMonths
    Next
    
    
   'Fill in the Swaptions
    
    Dim rngInSwaptions As Range: Set rngInSwaptions = Range("NX_" & asn & "_M_SwaptionsSelectionGrid")
    Dim strikeVal$: strikeVal = Range("NX_" & asn & "_M_SwaptionsStrikeValue")
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_SwaptionsFlavor").Address
    Dim sptnVolIDAdd$: sptnVolIDAdd = Range("NX_" & asn & "_M_SwaptionsVolCurveID").Address
    Dim sptnConvAdd$: sptnConvAdd = Range("NX_" & asn & "_M_SwaptionsConventionValue").Address
    Dim sptnID$
    Debug.Print sptnID
    ' fill in the swaptions
    For j = 1 To rngInSwaptions.Rows.Count
        For i = 1 To rngInSwaptions.Columns.Count
           '  If rngInSwaptions.Cells(j, i) = "Y" Then
              If i <> 1 And j <> 1 And rngInSwaptions.Cells(j, i).Value <> vbNullString Then
                    If rngInSwaptions.Cells(j, i).Value = "y" Or rngInSwaptions.Cells(j, i).Value = "ATM" Then
                    
                        counter = counter + 1
                        rngOt.Cells(counter, 1) = rngInSwaptions.Cells(j, 1)
                        rngOt.Cells(counter, 2) = rngInSwaptions.Cells(1, i)
                        'get the Strike Price
                       ' rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                        rngOt.Cells(counter, 3).Value = strikeVal
                        sptnID = prefixVal & "." & nameVal & "." & ccyVal & ".Swaptions." & rngOt.Cells(counter, 1).Value & "." & rngOt.Cells(counter, 2).Value & "." & rngOt.Cells(counter, 3).Value
                        rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & invCom & sptnID & invCom _
                            & "," & CcyAdd & "," & flavourAdd _
                            & "," & rngOt.Cells(counter, 1).Address _
                            & "," & rngOt.Cells(counter, 2).Address _
                            & "," & rngOt.Cells(counter, 3).Address & "," _
                            & sptnVolIDAdd & "," _
                            & sptnConvAdd & ")"
                    
                    ElseIf InStr(rngInSwaptions.Cells(j, i).Value, ";") <> 0 Or IsNumeric(rngInSwaptions.Cells(j, i).Value) Then
                    'Multiple Strikes in one cell
                    
                        Dim multipleStrikes() As String
                        multipleStrikes = Split(Trim(rngInSwaptions.Cells(j, i).Value), ";")
                        
                        For k = LBound(multipleStrikes) To UBound(multipleStrikes)
                            counter = counter + 1
                            rngOt.Cells(counter, 1) = rngInSwaptions.Cells(j, 1)
                            rngOt.Cells(counter, 2) = rngInSwaptions.Cells(1, i)
                            rngOt.Cells(counter, 3) = multipleStrikes(k)
                            sptnID = prefixVal & "." & nameVal & "." & ccyVal & ".Swaptions." & rngOt.Cells(counter, 1).Value & "." & rngOt.Cells(counter, 2).Value & "." & rngOt.Cells(counter, 3).Value
                           rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTenor(" & invCom & sptnID & invCom _
                            & "," & CcyAdd & "," & flavourAdd _
                            & "," & rngOt.Cells(counter, 1).Address _
                            & "," & rngOt.Cells(counter, 2).Address _
                            & "," & rngOt.Cells(counter, 3).Address & "," _
                            & sptnVolIDAdd & "," _
                            & sptnConvAdd & ")"
                                            
                        Next
                   
                  
                    End If
     
            End If
        Next
    Next
   
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_InstrumentsDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" _
            & invCom & prefixVal & "." & nameVal & ".Collection" & invCom _
            & ",NX_" & asn & "_M_CurrencyValue," _
            & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
     
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO Caplets and Swaptions"
    End If
    
    Exit Sub
    
'GenerateCaplets_BadFreq:
'    MsgBox "Illegal frequency " & freqVal & "; Frequency must be 1M, 2M, 3M, 4M, 6M or 1y", _
'        vbExclamation, "Invalid Frequency"
'    Exit Sub
    
GenerateCaplets_BadTenor:
    MsgBox "Illegal tenor; Tenors must be of form ##M or ##Y.", _
        vbExclamation, "Invalid Tenor"
    Exit Sub

End Sub


Private Sub ClearCapletsSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_InstrumentsDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub






Private Sub ResizeCapletsTable()

    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_CapletsSelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_CapletsVolCurveID"))

    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadCapVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    Range("NX_" & Me.Name & "_M_CapletsSelectionGrid") = ""

    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0

    Dim freqVal$: freqVal = Range("NX_" & asn & "_M_CapletsFreqValue")
    Dim freqMonths As Integer: freqMonths = TenorInMonths(freqVal)
    
    Dim startTenorVal$: startTenorVal = Range("NX_" & asn & "_M_CapletsTableStartTenor")
    Dim startTenorMonths As Integer: startTenorMonths = TenorInMonths(startTenorVal)
    
    Dim endTenorVal$: endTenorVal = Range("NX_" & asn & "_M_CapletsTableEndTenor")
    Dim endTenorMonths As Integer: endTenorMonths = TenorInMonths(endTenorVal)

    For i = startTenorMonths To endTenorMonths Step freqMonths
        dateCounter = dateCounter + 1
        If i Mod 12 = 0 Then
            anchor.Offset(dateCounter, 0) = CStr(i / 12) & "Y"
        Else
            anchor.Offset(dateCounter, 0) = CStr(i) & "M"
        
        End If
                  
    Next
    

    strikeCounter = strikeCounter + 1
    anchor.Offset(0, strikeCounter) = "ATM"

    For i = 3 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_CapletsSelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

'ResizeTable_BadFreq:
'    MsgBox "Illegal frequency " & freqVal & "; Frequency must be 1M, 2M, 3M, 4M 6M or 1Y", _
'        vbExclamation, "Invalid Frequency"
'    Exit Sub

ResizeTable_BadCapVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"

End Sub

Private Sub ResizeSwaptionTable()
    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SwaptionsSelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", "Swaption." & Range("NX_" & asn & "_M_CurrencyValue") & ".DATA")
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadSwaptionVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
   
    On Error GoTo 0
    Range("NX_" & Me.Name & "_M_SwaptionsSelectionGrid") = ""
    
    Dim i As Integer
    For i = LBound(temp, 2) + 1 To UBound(temp, 2)
        anchor.Offset(0, i - 1) = temp(1, i)
    Next
    For i = LBound(temp) + 1 To UBound(temp)
        anchor.Offset(i - 1, 0) = temp(i, 1)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SwaptionsSelectionGrid", RefersTo:=Range(anchor, anchor.Offset(UBound(temp, 1) - 1, UBound(temp, 2) - 1))
    Exit Sub
ResizeTable_BadSwaptionVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"

End Sub




Private Sub CreateInstrumentsButton_Click()
    GenerateCapletsSwaptions
End Sub

Private Sub ResizeTableButton_Click()
    ResizeCapletsTable
    ResizeSwaptionTable
    

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 16, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 17, 1, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCPINum, 21, 2, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCurrencyNum, 22, 3, MSForms, ComboBox"
Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean


Private Sub CommandButton1_Click()
    On Error GoTo cleanUP
    If hasBeenInitialised = False Then
        ComboBoxCPINum.Clear
        ComboBoxCPINum.AddItem ("1 CPI Index")
        ComboBoxCPINum.AddItem ("2 CPI Index")
        ComboBoxCPINum.AddItem ("3 CPI Index")
        ComboBoxCPINum.AddItem ("4 CPI Index")
        ComboBoxCPINum.AddItem ("5 CPI Index")
        ComboBoxCPINum.AddItem ("6 CPI Index")
        ComboBoxCPINum.AddItem ("7 CPI Index")
        ComboBoxCPINum.AddItem ("8 CPI Index")
        ComboBoxCPINum.AddItem ("9 CPI Index")
        ComboBoxCPINum.AddItem ("10 CPI Index")
        ComboBoxCPINum.Text = "1 CPI Index"
        
        ComboBoxCurrencyNum.Clear
        ComboBoxCurrencyNum.AddItem ("1 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("2 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("3 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("4 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("5 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("6 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("7 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("8 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("9 Foreign Currency")
        ComboBoxCurrencyNum.AddItem ("10 Foreign Currency")
        ComboBoxCurrencyNum.Text = "1 Foreign Currency"
        
        hasBeenInitialised = True
    End If
    
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCPINum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCurrencyNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error in ComboBox"
        GoTo cleanUP
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
cleanUP:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton2_Click()
    CreateModel
End Sub




Private Sub Resize(numCPIIndex As Integer, numCurrency As Integer)
    On Error GoTo errorHandler
    Dim asn$: asn = ActiveSheet.Name
    
    Range("NX_" & asn & "_M_RealRateModels").ClearContents
    Range("NX_" & asn & "_M_CPIModels").ClearContents
    Range("NX_" & asn & "_M_ForeignNominalModels").ClearContents
    Range("NX_" & asn & "_M_FXModels").ClearContents
        
    Dim cpiModelMapping$: cpiModelMapping = "NX_" & asn & "_M_CPIModelMapping"
    Range(cpiModelMapping).Clear
    Range(Range(cpiModelMapping).Cells(1, 1), Range(cpiModelMapping).Cells(numCPIIndex, 3)).Select
    ActiveWorkbook.Names.Add Name:=cpiModelMapping, RefersTo:=Selection
    
    Dim FXModelMapping$: FXModelMapping = "NX_" & asn & "_M_FXModelMapping"
    Range(FXModelMapping).Clear
    Range(Range(FXModelMapping).Cells(1, 1), Range(FXModelMapping).Cells(numCurrency, 3)).Select
    ActiveWorkbook.Names.Add Name:=FXModelMapping, RefersTo:=Selection
   
    'Resize the CPI Model Mapping tables
    Dim tempRange As Range: Set tempRange = Range(cpiModelMapping)
    Call formatColorAndBorder(tempRange)
    Call addConditionalFormat(tempRange)
    
    Dim i%, j%
    For i = 1 To tempRange.Rows.Count
        For j = 1 To tempRange.Columns.Count
            Range(cpiModelMapping).Cells(i, j) = "<LINK>"
        Next j
    Next i
    
    'Resize the FX Model Mapping tables
    Set tempRange = Range(FXModelMapping)
    Call formatColorAndBorder(tempRange)
    Call addConditionalFormat(tempRange)
    
    For i = 1 To tempRange.Rows.Count
        For j = 1 To tempRange.Columns.Count
            Range(FXModelMapping).Cells(i, j) = "<LINK>"
        Next j
    Next i
    
    'Resize the Correlation Matrix
     Dim rngCPIModelMapping As Range: Set rngCPIModelMapping = Range(cpiModelMapping)
     Dim rngFXModelMapping As Range: Set rngFXModelMapping = Range(FXModelMapping)
     Dim domesticCurncyAddr$: domesticCurncyAddr = Range("NX_" & asn & "_M_DomesticCurrency").Address
     Dim anchor As Range: Set anchor = Range("NX_" & asn & "_M_CorrAnchor")
     Range("NX_" & asn & "_M_CorrAllData").Clear

     anchor.Offset(0, 1).Formula = "=" & domesticCurncyAddr
     anchor.Offset(1, 0).Formula = "=" & domesticCurncyAddr
     
    For i = 1 To numCurrency
        anchor.Offset(0, i + 1).Formula = "=" & rngFXModelMapping(i, 1).Address
        anchor.Offset(i + 1, 0).Formula = "=" & rngFXModelMapping(i, 1).Address
    Next i
    
    For i = 1 To numCurrency
        anchor.Offset(0, i + numCurrency + 1).Formula = "=" & rngFXModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
        anchor.Offset(i + numCurrency + 1, 0).Formula = "=" & rngFXModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
    Next i
    
    For i = 1 To numCPIIndex
        anchor.Offset(0, i + 2 * numCurrency + 1).Formula = "=" & rngCPIModelMapping(i, 1).Address
        anchor.Offset(i + 2 * numCurrency + 1, 0).Formula = "=" & rngCPIModelMapping(i, 1).Address
    Next i
    
    For i = 1 To numCPIIndex
        anchor.Offset(0, i + 2 * numCurrency + numCPIIndex + 1).Formula = "=" & rngCPIModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
        anchor.Offset(i + 2 * numCurrency + numCPIIndex + 1, 0).Formula = "=" & rngCPIModelMapping(i, 1).Address & "&" & """" & "/" & """" & "&" & domesticCurncyAddr
    Next i
     
    'Fill in the default matrix data
    For i = 1 To 2 * numCurrency + 2 * numCPIIndex + 1
        anchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numCurrency + 2 * numCPIIndex + 1
            anchor.Offset(i, j) = 0
        Next j
    Next i

    Range(anchor.Offset(0, 0), anchor.Offset(numCurrency * 2 + numCPIIndex * 2 + 1, numCurrency * 2 + numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrAllData", RefersTo:=Selection
    'Column Headings
    Range(anchor.Offset(0, 1), anchor.Offset(0, numCurrency * 2 + numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrColHeader", RefersTo:=Selection
    Call formatHeader(Range("NX_" & asn & "_M_CorrColHeader"))

    'Row Headings
    Range(anchor.Offset(1, 0), anchor.Offset(numCurrency * 2 + numCPIIndex * 2 + 1, 0)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrRowHeader", RefersTo:=Selection
    Call formatHeader(Range("NX_" & asn & "_M_CorrRowHeader"))

    'Data Range
    Range(anchor.Offset(1, 1), anchor.Offset(numCurrency * 2 + numCPIIndex * 2 + 1, numCurrency * 2 + numCPIIndex * 2 + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CorrData", RefersTo:=Selection
    Call formatColorAndBorder(Range(anchor.Offset(1, 1), anchor.Offset(numCurrency * 2 + numCPIIndex * 2 + 1, numCurrency * 2 + numCPIIndex * 2 + 1)))
    
    anchor.Formula = "=nxlibmatrix(NX_" & asn & "_M_CorrColHeader,NX_" & asn & "_M_CorrRowHeader,NX_" & asn & "_M_CorrData," & """" & asn & ".Corr" & """" & ")"
    Call formatColorAndBorder(anchor)
    
    Exit Sub
    
errorHandler:
    Exit Sub
End Sub


Private Sub CreateModel()
    On Error GoTo errorHandler
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCPIModelMapping As Range: Set rngCPIModelMapping = Range("NX_" & asn & "_M_CPIModelMapping")
    Dim rngFXModelMapping As Range: Set rngFXModelMapping = Range("NX_" & asn & "_M_FXModelMapping")
    Dim numCPIIndex%: numCPIIndex = rngCPIModelMapping.Rows.Count
    Dim numCurrency%: numCurrency = rngFXModelMapping.Rows.Count
    
    Dim rngRealModel As Range: Set rngRealModel = Range("NX_" & asn & "_M_RealRateModels")
    Dim rngCPIModel As Range: Set rngCPIModel = Range("NX_" & asn & "_M_CPIModels")
    Dim rngForeignNominalModel As Range: Set rngForeignNominalModel = Range("NX_" & asn & "_M_ForeignNominalModels")
    Dim rngFXModel As Range: Set rngFXModel = Range("NX_" & asn & "_M_FXModels")
    
    rngRealModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngCPIModelMapping.Cells(1, 2), rngCPIModelMapping.Cells(numCPIIndex, 2)).Address & "," & """" & "JYCCModel.RealRateModelsData" & """" & ")"
    rngCPIModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngCPIModelMapping.Cells(1, 3), rngCPIModelMapping.Cells(numCPIIndex, 3)).Address & "," & """" & "JYCCModel.CPIModelsData" & """" & ")"
    rngForeignNominalModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngFXModelMapping.Cells(1, 2), rngFXModelMapping.Cells(numCurrency, 2)).Address & "," & """" & "JYCCModel.ForeignNominalModelsData" & """" & ")"
    rngFXModel.Formula = "=nxlibdata(" & """" & "ID" & """" & "," & Range(rngFXModelMapping.Cells(1, 3), rngFXModelMapping.Cells(numCurrency, 3)).Address & "," & """" & "JYCCModel.FXModelsData" & """" & ")"

cleanUP:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    Exit Sub

errorHandler:
    MsgBox ("Error when creating model")
    Resume cleanUP
End Sub




Private Sub Worksheet_Activate()
    On Error GoTo cleanUP
    ComboBoxCPINum.Clear
    ComboBoxCPINum.AddItem ("1 CPI Index")
    ComboBoxCPINum.AddItem ("2 CPI Index")
    ComboBoxCPINum.AddItem ("3 CPI Index")
    ComboBoxCPINum.AddItem ("4 CPI Index")
    ComboBoxCPINum.AddItem ("5 CPI Index")
    ComboBoxCPINum.AddItem ("6 CPI Index")
    ComboBoxCPINum.AddItem ("7 CPI Index")
    ComboBoxCPINum.AddItem ("8 CPI Index")
    ComboBoxCPINum.AddItem ("9 CPI Index")
    ComboBoxCPINum.AddItem ("10 CPI Index")
    ComboBoxCPINum.Text = "1 CPI Index"
    
    ComboBoxCurrencyNum.Clear
    ComboBoxCurrencyNum.AddItem ("1 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("2 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("3 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("4 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("5 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("6 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("7 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("8 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("9 Foreign Currency")
    ComboBoxCurrencyNum.AddItem ("10 Foreign Currency")
    ComboBoxCurrencyNum.Text = "1 Foreign Currency"
    
    hasBeenInitialised = True

cleanUP:
    ActiveSheet.Calculate
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
    

End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With

    Cells(1, 1).Select

End Sub






Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' jS(u

INQUEST-PP=macro
