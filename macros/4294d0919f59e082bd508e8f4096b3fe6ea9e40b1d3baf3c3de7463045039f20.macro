Attribute VB_Name = "Mod1"
Public BotAcionado As Integer

'By Jim Rech (From Tom Ogilvy)
Private Const FO_DELETE = &H3&
Private Const FOF_ALLOWUNDO = &H40&
Private Const FOF_NOCONFIRMATION = &H10&

Private Type SHFILEOPSTRUCT
   hWnd As Long
   wFunc As Long
   pFrom As String
   pTo As String
   fFlags As Integer
   fAnyOperationsAborted As Long
   hNameMappings As Long
   lpszProgressTitle As String
End Type

Private Declare Function SHFileOperation Lib "Shell32.dll" Alias _
 "SHFileOperationA" (lpFileOp As Any) As Long

Function ShellDelete(SrcFile As String)
    Dim FileOp As SHFILEOPSTRUCT
    With FileOp
       .hWnd = 0
       .wFunc = FO_DELETE
       .pFrom = SrcFile
        .fFlags = FOF_NOCONFIRMATION + FOF_ALLOWUNDO '< recycle bin
        .lpszProgressTitle = "yyyyyyy"
    End With
    ShellDelete = SHFileOperation(FileOp)
End Function

Public Function FilesVba(directory_text As String)
   Dim ArrayFiles() As String
   Count = 0
   f = Dir(directory_text)
   Do While Len(f) > 0
      Count = Count + 1
      ReDim Preserve ArrayFiles(1 To Count)
      ArrayFiles(Count) = f
      f = Dir()
   Loop
   FilesVba = Application.Transpose(ArrayFiles())
End Function

Public Function fSalvarComo(vFilenameS As String)
Retry:
   vFilename = Application.GetSaveAsFilename(vFilenameS, "Arquivos (*.MDA), *.mda")
   If LCase(vFilename & "") = "false" Or LCase(vFilename & "") = "falso" Then
      fSalvarComo = False
      Exit Function
   End If
   vPath = CurDir()
   If Not Right(vPath, 1) = "\" Then vPath = vPath & "\"
   vFilename = Application.WorksheetFunction.Substitute(LCase(vFilename), LCase(vPath), "")
   i = InStr(1, vFilename, ".")
   If i > 0 Then vFilename = Left(vFilename, i) & "mda" Else vFilename = vFilename & ".mda"

   'Critica
   If Len(vFilename) > 12 Or InStr(1, vFilename, " ") > 0 Then
      MsgBox "Informe um nome com menos de oito caracteres e sem espa|fffd|os.", vbCritical, "Nome Inv|fffd|lido"
      GoTo Retry
   End If
   If Dir(vFilename) <> "" Then
      MsgBox "J|fffd| existe um arquivo com este nome. Tente outro.", vbCritical, "Nome Inv|fffd|lido"
      GoTo Retry
   End If
   On Error Resume Next
   FileCopy vFilenameS, vFilename

   If Dir(vFilename) = "" Then
      MsgBox "Houve falha ao salvar o novo arquivo. Verifique o espa|fffd|o no disco, os seus direitos de acesso na rede, problemas de conex|fffd|o etc.", vbCritical, "Falha ao Salvar Como"
      fSalvarComo = False
   Else
      fSalvarComo = vFilename
   End If
End Function


Public Function fRenomear(vFilenameS As String)
   vFilename = vFilenameS
   i = InStr(1, vFilename, ".")
   If i > 0 Then vFilename = Left(vFilename, i - 1) Else vFilename = vFilename
   Ch = Array(" ", ".", "'", "'", "/", "\", "[", "]", ":", ";", "|", "=", ",")
Retry:
   UserFormfRen.Caption = "Renomear " & vFilenameS
   UserFormfRen.Nome_Tb.Value = vFilename
   UserFormfRen.Nome_Tb.SetFocus
   UserFormfRen.Show
   If BotAcionado = 0 Then
      fRenomear = False
      Exit Function
   End If
   vFilename = UserFormfRen.Nome_Tb.Value

   'Critica
   For Each c In Ch
      If Len(vFilename) > 8 Or InStr(1, vFilename, c) > 0 Then
         MsgBox "Informe um nome com menos de nove caracteres e sem um dos seguintes caracteres: espa|fffd|o; ponto(.); aspas(''); barra (/); barra invertida (\); colchetes ([ ]); dois-pontos (:); ponto-e-v|fffd|rgula (;); barra vertical (|); sinal de igualdade (=); v|fffd|rgula (,). Tente outro.", vbCritical, "Nome Inv|fffd|lido"
         GoTo Retry
      End If
   Next

   If Dir(vFilename & ".mda") <> "" Then
      MsgBox "J|fffd| existe um arquivo com este nome. Tente outro.", vbCritical, "Nome Inv|fffd|lido"
      GoTo Retry
   End If

   On Error Resume Next
   Name vFilenameS As vFilename & ".mda"

   If Dir(vFilename & ".mda") = "" Then
      MsgBox "Houve falha ao salvar o novo arquivo. Verifique o espa|fffd|o no disco, os seus direitos de acesso na rede, problemas de conex|fffd|o etc.", vbCritical, "Falha ao Renomear"
      fRenomear = False
   Else
      fRenomear = vFilename & ".mda"
   End If
End Function

Public Function fFileCopy(vFilenameS As String, vFilenameD As String)
   fFileCopy = False
   On Error GoTo ErroHandler
   If Dir(vFilenameD) <> "" Then
      dS = FileDateTime(vFilenameS)
      dD = FileDateTime(vFilenameD)
      sS = Format(FileLen(vFilenameS) / 1000, "#,##0.00") & " Kb"
      sD = Format(FileLen(vFilenameD) / 1000, "#,##0.00") & " Kb"
      If MsgBox(vFilenameD & " j|fffd| existe!" & Chr(10) & Chr(10) & "Deseja substituir o arquivo existente" & Chr(10) & "     de " & sD & Chr(10) & "     modificado em " & dD & Chr(10) & Chr(10) & "por este?" & Chr(10) & "     de " & sS & Chr(10) & "     modificado em " & dS, vbQuestion + vbYesNo, "Confirmar Substitui|fffd||fffd|o de Arquivo") = vbNo Then Exit Function
   End If
   FileCopy vFilenameS, vFilenameD
   fFileCopy = True
   Exit Function
ErroHandler:
   Msg = "Disco n|fffd|o existe ou acesso n|fffd|o permitido!"
   If Err.Number = 61 Then Msg = "Disco cheio!"
   MsgBox Msg, vbCritical, "Falha ao Copiar"
End Function


Sub FileReadOnlyClear()
'No WinMe do Esmerino apareceram arquivos como somente leitura. Esta rotina
'|fffd| aplicada toda vez que for indexar para verificar e eliminar somente leitura
   Dim fso, f, f1, fc, fa, DirP, DirPs, DirBD
   DirP = ThisWorkbook.Path: DirBD = Application.Evaluate(ThisWorkbook.Names("DirBD").Value)
   On Error GoTo Fim
   For Each DirPs In Array(DirBD & "\Banco", DirP, DirBD & "\Avulso", DirBD & "\Areceber", DirBD & "\Exp_plan", DirBD & "\Tabelas")
      Set fso = CreateObject("Scripting.FileSystemObject")
      Set f = fso.GetFolder(DirPs)
      Set fc = f.Files
      For Each f1 In fc
         fa = f1.Attributes
         If Not (fa = 0 Or fa = 32) Then f1.Attributes = 0
      Next
   Next
Fim:
End Sub
Attribute VB_Name = "Mod2UFormStatusBar"
Option Explicit
Public Const GWL_HWNDPARENT As Long = -8
Private Const GWL_STYLE = (-16)
Private Const WS_THICKFRAME = &H40000
Private Const WS_MINIMIZEBOX = &H20000
Private Const WS_MAXIMIZEBOX = &H10000
Private Const GWL_EXSTYLE = (-20)
Public Const WS_CAPTION As Long = &HC00000
Public Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLongA Lib "user32" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
Public Declare Function SetWindowLongA Lib "user32" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hWnd As Long) As Long
Public Declare Function SetForegroundWindow Lib "user32" (ByVal hWnd As Long) As Long

'Public Const WS_BORDER = &H800000
'Public Const WS_DLGFRAME = &H400000
'Public Const WS_EX_CLIENTEDGE = &H200
'Public Const WS_EX_LAYERED = &H80000
'Public Const LWA_ALPHA = &H2&
'Public Const WS_EX_WINDOWEDGE = &H100
Public Const WS_EX_STATICEDGE = &H20000
Public Const WS_EX_APPWINDOW As Long = &H40000   'Show on taskbar
Public Const WS_EX_TOOLWINDOW As Long = &H80     'Tool Window (Small titlebar withoud any control except Close control)

Const bIsCOMAddin As Boolean = False
Public ApphWnd As Long 'No 2013 SDI, pode variar se janela clicada ent|fffd|o unload e load sobre o novo

Function UFormStatusBar(Optional sMsg As String) As Boolean
    Dim Form_hWnd As Long
    If ApphWnd = 0 Then ApphWnd = Application.hWnd Else If ApphWnd <> Application.hWnd Then Unload UserFormStatusBar: ApphWnd = Application.hWnd
    If sMsg <> "" Then
        With UserFormStatusBar
            .Label1.Caption = sMsg
            If Not .Visible Then
                .Width = Application.Width
                .Height = 28
                .Top = Application.Top + Application.Height - .Height
                .Left = Application.Left
                .Label1.Left = 4: .Label1.Top = 4: .Label1.Width = .Width: .Label1.Height = .Height
                .Caption = .Name & Now    'T|fffd|tulo |fffd|nico para um handle preciso
                Form_hWnd = FindWindowA(IIf(bIsCOMAddin, "ThunderRT6DFrame", "ThunderDFrame"), .Caption)
                If Form_hWnd = 0 Then Form_hWnd = FindWindowA(vbNullString, .Caption)
                formSizeble Form_hWnd, True
                .Show 0
                Application.Interactive = False
            End If
            .Repaint
        End With
    Else
        ApphWnd = 0: Application.Interactive = True
        Unload UserFormStatusBar
    End If
End Function

Sub test()
    UFormStatusBar "fil"
End Sub

Sub test1()
    UFormStatusBar "dodood   "
End Sub

Public Sub formSizeble(fhWnd As Long, bHideTitleBar As Boolean)
    Dim lStyle As Long
    'fhWnd = FindWindowA(IIf(bIsCOMAddin, "ThunderRT6DFrame", "ThunderDFrame"), sCaption)
    lStyle = GetWindowLongA(fhWnd, GWL_STYLE)
    lStyle = lStyle Or WS_THICKFRAME
    If bIsCOMAddin Then lStyle = lStyle And Not WS_MINIMIZEBOX
    If bIsCOMAddin Then lStyle = lStyle And Not WS_MAXIMIZEBOX
    If bHideTitleBar Then lStyle = lStyle And Not WS_CAPTION Else lStyle = lStyle Or WS_CAPTION
    lStyle = lStyle And Not WS_EX_TOOLWINDOW
    SetWindowLongA fhWnd, GWL_STYLE, lStyle

    lStyle = GetWindowLongA(fhWnd, GWL_EXSTYLE)
    lStyle = lStyle And Not WS_EX_APPWINDOW    'N|fffd|o exibir na barra de tarefa do Windows. S|fffd| |fffd| |fffd|til em COM add-in, mas n|fffd|o tem problema usar em xla
    lStyle = lStyle Or WS_EX_TOOLWINDOW    'Barra de t|fffd|tulo extreita sem controle exceto fechar
    SetWindowLongA fhWnd, GWL_EXSTYLE, lStyle

    DrawMenuBar fhWnd    'Atualizar barra
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True










Attribute VB_Name = "UserFormStatusBar"
Attribute VB_Base = "0{56529F57-AB1A-4D46-9436-E3B1452098E0}{AAFD5278-6996-4BBA-9E8C-650BE49A8F54}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Label1_Click()
    ApphWnd = 0: Application.Interactive = True
    Unload Me
End Sub
Attribute VB_Name = "UserFormfRen"
Attribute VB_Base = "0{A28C558A-3537-4FBB-BE90-D62569BA2B44}{11DCD0CC-5B16-4C73-A986-DA1EC716C448}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub OK_Bt_Click()
Hide
BotAcionado = 1
End Sub
Private Sub Cancelar_Bt_Click()
Hide
BotAcionado = 0
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
   BotAcionado = 0
End Sub


INQUEST-PP=macro
