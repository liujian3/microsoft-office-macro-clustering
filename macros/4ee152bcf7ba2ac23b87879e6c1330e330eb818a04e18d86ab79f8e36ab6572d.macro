Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Constants
Const STARTROW = 13
Const WORKSHEETFANAME = 2
Const PARAMDATA = 1

'Criteria labels
Const COMPANY = "A4"
Const DATE_1 = "L3"
Const GLACC = "L4"
Const ASSETGRP = "L5"
Const ASSETCODE = "L6"
Const DATE_2 = "P3"
Const BUDGET = "P4"
Const RATIO = "P5"
Const REPDATUM = "P6"

'Criteria values
Const VALDATE_1 = "N3"
Const VALGLACC = "N4"
Const VALASSETGRP = "N5"
Const VALASSETCODE = "N6"
Const VALDATE_2 = "R3"
Const VALBUDGET = "R4"
Const VALRATIO = "R5"
Const VALREPDATUM = "R6"

'Overall Header
Dim HLABEL_ASSET              As String
Dim HLABEL_DEPRECIATION       As String

'Header column labels
Dim HLABELASSET_CAT1          As String
Dim HLABELASSET_CAT2          As String
Dim HLABELASSET_CAT3          As String
Dim HLABELASSET_CAT4          As String
Dim HLABELASSET_CAT5          As String
Dim HLABELASSET_GLACCOUNT_BS  As String
Dim HLABELASSET_REFERENCE     As String
Dim HLABELASSET_DESCRIPTION   As String
Dim HLABELASSET_DATE          As String
Dim HLABELASSET_FINANCIALYEAR As String
Dim HLABELDEPRECIATION_METH   As String
Dim HLABELASSET_STARTDATE     As String
Dim HLABELASSET_PLUS          As String
Dim HLABELASSET_MINUS         As String
Dim HLABELASSET_ENDDATE       As String
Dim HLABELDEPR_STARTDATE      As String
Dim HLABELDEPR_PLUS           As String
Dim HLABELDEPR_MINUS          As String
Dim HLABELDEPR_P_L            As String
Dim HLABELDEPR_ENDDATE        As String
Dim HLABELVALUE_NET           As String
Dim HLABELRESIDUAL_VALUE      As String

'Term Strings
Dim gstrAssetDescription      As String
Dim gstrAssetReference        As String
Dim gstrAssetDate             As String
Dim gstrDepreciationMethode   As String
Dim gstrAsset_StartDate       As String
Dim gstrAsset_Plus            As String
Dim gstrAsset_Minus           As String
Dim gstrAsset_EndDate         As String
Dim gstrDepr_StartDate        As String
Dim gstrDepr_Plus             As String
Dim gstrDepr_Minus            As String
Dim gstrDepr_P_L              As String
Dim gstrDepr_EndDate          As String
Dim gstValue_Net              As String
Dim gstrResidual_Value        As String
'---
Dim gstrSheetNameFA As String
Dim gstrUniqueLocation As String

'Term label
Const SUBTOTAL = "B18"
Const TOTAL = "B19"
Const GRANDTOTAL = "B20"

'Color
Const COLOR_CHARTAREA = 38   'Also data
Const COLOR_COMP_COL = 39    'Also company name and column headers
Const COLOR_TITLE = 40  'Also Report title

'Objects/Variables declaration
Dim lLastRow As Long
Dim App As esl.Application
Dim goCompany As esl.COMPANY

Dim TrajectDate_All As Boolean
Dim GL_All As Integer
Dim Assetgroup_All As Integer
Dim Assetcode_All As Integer
Dim TrajectDate_From As String
Dim TrajectDate_To As String
Dim GLaccount_From As String
Dim GLaccount_To As String
Dim Assetgroup_From As String
Dim Assetgroup_To As String
Dim Assetcode_From As String
Dim Assetcode_To As String
Dim Traject As String
Dim YearFrom As String
Dim MonthFrom As String
Dim YearTo As String
Dim MonthTo As String
Dim DateFrom As String
Dim DateTo As String
Dim DateAll As String
Dim FinYear As String
Dim ShowInfo(0 To 9) As Integer
Dim mArray() As Integer
Dim AmtCol() As String
Dim Detailed As String
Dim Filter As Integer
Dim Unprocessed As String
Dim Coef1 As String
Dim Coef2 As String
Dim Repdate As String

'Contact Support - 14.977.971 - Start
Private Enum SubTotal_Fields
  SubTotal_Category1
  SubTotal_Category2
  SubTotal_Category3
  SubTotal_Category4
  SubTotal_Category5
  SubTotal_FinancialYear
  SubTotal_GLedger
End Enum
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Enum Subtotal_Functions
  SubTotal_Average = 1
  SubTotal_Count
  SubTotal_Counta
  SubTotal_Max
  SubTotal_Min
  SubTotal_Product
  SubTotal_Stdev
  SubTotal_Stdevp
  SubTotal_Sum
  SubTotal_Var
  SubTotal_Varp
End Enum
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Enum Show_Fields
  Show_Asset
  Show_DepreciationMethod
  Show_PurchaseDate
  Show_ResidualValue
  Show_GLAccount
  Show_GLAccountDescription
End Enum
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Enum Asset_Columns
  AssetCategory1 = 1
  AssetCategory2
  AssetCategory3
  AssetCategory4
  AssetCategory5
  AssetGeneralLedger
  AssetDescription
  AssetReference
  AssetDate
  AssetFinancialYear
  DepreciationMethod
  AssetBalanceStartDate
  AssetBalancePlus
  AssetBalanceMinus
  AssetBalanceEndDate
  DepreciationStartDate
  DepreciationPlus
  DepreciationMinus
  DepreciationProfitLost
  DepreciationEndDate
  AssetNetValue
  AssetResidualValue
  AssetDataRow
End Enum
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Enum SortBy_Fields
  SortBy_Reference
  SortBy_FinancialYear
End Enum
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Dim m_oColumns As Scripting.Dictionary
Dim m_oShowInfo As Scripting.Dictionary
Dim m_oSubTotal As Scripting.Dictionary
Dim m_lSortBy As SortBy_Fields
'Contact Support - 14.977.971 - End

Private Property Get Translator() As esl.ITranslator
  On Error Resume Next
  If Not App Is Nothing Then
    Set Translator = App.Term
  End If
End Property

Private Function Translate(ByVal plTermId As Long, ByVal psDefault As String) As String
  Translate = psDefault
  If Not Translator Is Nothing Then
    Translate = Translator.String(plTermId, psDefault)
  End If
End Function

Public Sub OnRefreshBeforeReports()
          
    Dim ldtmStart As Date
    Dim lstrStartDate As String
    Dim ldtmEnd As Date
    Dim lstrEndDate As String
    Dim lsqlQuery As EDL.EdlQuery
    Dim connect As EDL.EdlConnection
    
    Worksheets(gstrSheetNameFA).Activate
    
'    Debug.Assert False
    
    GetSlicData
    InitCol
    FillColor
        
    'Criteria or all
    With ThisWorkbook
        'Date
        If TrajectDate_All = "-1" Then
            Worksheets(gstrSheetNameFA).Range(VALDATE_1).Value = Translate(5614, "All")
        Else
            Worksheets(gstrSheetNameFA).Range(VALDATE_1).Value = TrajectDate_From & " - " & TrajectDate_To
        End If
        'General ledger account
        If GL_All = "-1" Then
            Worksheets(gstrSheetNameFA).Range(VALGLACC).Value = Translate(5614, "All")
        Else
            Worksheets(gstrSheetNameFA).Range(VALGLACC).Value = GLaccount_From & " - " & GLaccount_To
        End If
        'Asset group
        If Assetgroup_All = "-1" Then
            Worksheets(gstrSheetNameFA).Range(VALASSETGRP).Value = Translate(5614, "All")
        Else
            Worksheets(gstrSheetNameFA).Range(VALASSETGRP).Value = Assetgroup_From & " - " & Assetgroup_To
        End If
        'Asset code
        If Assetcode_All = "-1" Then
            Worksheets(gstrSheetNameFA).Range(VALASSETCODE).Value = Translate(5614, "All")
        Else
            Worksheets(gstrSheetNameFA).Range(VALASSETCODE).Value = Assetcode_From & " - " & Assetcode_To
        End If
        '----------
        'Date
        Select Case Traject
          Case "1"
            'Month
            Worksheets(gstrSheetNameFA).Range(VALDATE_2).Value = YearFrom & "/" & Format(MonthFrom, "00") & " - " & YearTo & "/" & Format(MonthTo, "00")
          Case "2"
            'Date
            If .Names("Date.All").RefersToRange.Value = "-1" Then
                Worksheets(gstrSheetNameFA).Range(VALDATE_2).Value = Translate(5614, "All")
            Else
                Worksheets(gstrSheetNameFA).Range(VALDATE_2).Value = DateFrom & " - " & DateTo
            End If
          Case "3"
            'Year
            Set connect = goCompany
            Set lsqlQuery = connect.OpenQuery("SELECT MIN(bgdatum) AS StartDate,MAX(eddatum) AS EndDate,bkjrcode As Code " & _
            "FROM perdat WHERE bkjrcode = '" & Trim(FinYear) & "' GROUP BY bkjrcode", edlForwardOnly, edlReadOnly, 0)
            Set connect = Nothing
            If Not lsqlQuery.EOF Then
                ldtmStart = lsqlQuery.Date("StartDate")
                lstrStartDate = DateSerial(Year(ldtmStart), Month(ldtmStart), Day(ldtmStart))
                ldtmEnd = lsqlQuery.Date("EndDate")
                lstrEndDate = DateSerial(Year(ldtmEnd), Month(ldtmEnd), Day(ldtmEnd))
            End If
            Worksheets(gstrSheetNameFA).Range(VALDATE_2).Value = lstrStartDate & " - " & lstrEndDate
          Case Else
            Worksheets(gstrSheetNameFA).Range(VALDATE_2).Value = "Empty" & " - " & "Empty"
        End Select
        'Budgettype
        Select Case Filter
          Case 1
            Worksheets(gstrSheetNameFA).Range(VALBUDGET).Value = Translate(56, "None")
          Case 2
            Worksheets(gstrSheetNameFA).Range(VALBUDGET).Value = Translate(6411, "Primary")
          Case 3
            Worksheets(gstrSheetNameFA).Range(VALBUDGET).Value = Translate(18029, "Simulation")
          Case 4
            Worksheets(gstrSheetNameFA).Range(VALBUDGET).Value = Translate(7529, "Secondary")
          Case Else
            Worksheets(gstrSheetNameFA).Range(VALBUDGET).Value = Translate(56, "None")
        End Select
        'Ratio
        Worksheets(gstrSheetNameFA).Range(VALRATIO).Value = "'" & Coef1 & " / " & Coef2
        'DocDate or not ?
        Select Case Repdate
          Case 0
            Worksheets(gstrSheetNameFA).Range(VALREPDATUM).Value = Translate(1015, "No")
          Case 1
            Worksheets(gstrSheetNameFA).Range(VALREPDATUM).Value = Translate(1014, "Yes")
          Case Else
            Worksheets(gstrSheetNameFA).Range(VALREPDATUM).Value = Translate(1015, "No")
        End Select

    End With
    
    Worksheets(gstrSheetNameFA).Range("A11").RowHeight = 13#
    
    'Generating SQL query dynamically
    Call GenerateSQLQuery(gstrSheetNameFA)
    
    With Worksheets(gstrSheetNameFA)
        
        'Start- & EndDate
        Select Case Traject
          Case "1"
            ldtmStart = DateSerial(YearFrom, MonthFrom, 1)
            lstrStartDate = CStr(ldtmStart)
            ldtmEnd = DateSerial(YearTo, MonthTo + 1, 1 - 1)
            lstrEndDate = CStr(ldtmEnd)
          Case "2"
            ldtmStart = DateSerial(VBA.Year(DateFrom), VBA.Month(DateFrom), VBA.Day(DateFrom))
            lstrStartDate = CStr(ldtmStart)
            ldtmEnd = DateSerial(VBA.Year(DateTo), VBA.Month(DateTo), VBA.Day(DateTo))
            lstrEndDate = CStr(ldtmEnd)
          Case "3"
            'lstrStartDate & lstrEndDate are already Filled in above !
          Case Else
            ldtmStart = DateSerial(1950, 1, 1)
            lstrStartDate = CStr(ldtmStart)
            ldtmEnd = DateSerial(2050, 12, 31)
            lstrEndDate = CStr(ldtmEnd)
        End Select
        
        'Define report header:
        .Range("A2").Value = Translate(8353, "Asset transactions")
        .Range(DATE_1).Value = Translate(8516, "Date")
        .Range(GLACC).Value = Translate(31660, "G/L account")
        .Range(ASSETGRP).Value = Translate(2560, "Group")
        .Range(ASSETCODE).Value = Translate(6057, "Serial number")
        .Range(DATE_2).Value = Translate(8516, "Date")
        .Range(BUDGET).Value = Translate(6227, "Budget version")
        .Range(RATIO).Value = "Ratio"
        .Range(REPDATUM).Value = Translate(15730, "Reporting Date")
        
        'Labels
        .Range(HLABEL_ASSET).Value = Translate(24467, "Asset")
        .Range(HLABEL_DEPRECIATION).Value = Translate(6269, "Depreciation")
        
        'Headers
        .Range(HLABELASSET_CAT1).Value = " " & Translate(13291, "Category1")
        .Range(HLABELASSET_CAT2).Value = " " & Translate(13292, "Category2")
        .Range(HLABELASSET_CAT3).Value = " " & Translate(13327, "Category3")
        .Range(HLABELASSET_CAT4).Value = " " & Translate(721, "Category4")
        .Range(HLABELASSET_CAT5).Value = " " & Translate(722, "Category5")
        .Range(HLABELASSET_GLACCOUNT_BS).Value = Translate(75, "G/L")
        .Range(HLABELASSET_DESCRIPTION).Value = Translate(4243, "Description")
        .Range(HLABELASSET_REFERENCE).Value = Translate(5961, "Reference")
        .Range(HLABELASSET_DATE).Value = Translate(8516, "Date")
        .Range(HLABELASSET_FINANCIALYEAR).Value = Translate(1193, "Financial Year")
        .Range(HLABELDEPRECIATION_METH).Value = Translate(6393, "Depreciation Method")
        .Range(HLABELASSET_STARTDATE).Value = "'< " & lstrStartDate
        .Range(HLABELASSET_PLUS).Value = Translate(1257, "Balance sheet") & " +"
        .Range(HLABELASSET_MINUS).Value = Translate(1257, "Balance sheet") & " -"
        .Range(HLABELASSET_ENDDATE).Value = "'" & lstrEndDate & " >"
        .Range(HLABELDEPR_STARTDATE).Value = "'< " & lstrStartDate
        .Range(HLABELDEPR_PLUS).Value = Translate(1257, "Balance sheet") & " +"
        .Range(HLABELDEPR_MINUS).Value = Translate(1257, "Balance sheet") & " -"
        .Range(HLABELDEPR_P_L).Value = Translate(5864, "P&L") & " +/-"
        .Range(HLABELDEPR_ENDDATE).Value = "'" & lstrEndDate & " >"
        .Range(HLABELVALUE_NET).Value = Translate(12232, "Net Value")
        .Range(HLABELRESIDUAL_VALUE).Value = Translate(2275, "Residual value")
    End With
            
    'Right alignment of the Value Headers
    Range("A11:V11").Select
    With Selection
        .HorizontalAlignment = xlRight
    End With
    
    Range("A12:V12").Select
    With Selection
        .HorizontalAlignment = xlCenter
    End With
    
    'Select the last used rows and columns
    Call DeleteCellValue(gstrSheetNameFA)
    
    Worksheets(gstrSheetNameFA).Range("A12:A" & lLastRow).NumberFormat = "@" 'G/L account
    
End Sub

'Contact Support - 14.977.971 - Start
'Contact Support - 14.977.971 - End

Sub InitCol()
    'Labels
    HLABEL_ASSET = "L11"
    HLABEL_DEPRECIATION = "P11"
    
    'Header labels
    HLABELASSET_CAT1 = "A12"
    HLABELASSET_CAT2 = "B12"
    HLABELASSET_CAT3 = "C12"
    HLABELASSET_CAT4 = "D12"
    HLABELASSET_CAT5 = "E12"
    
    HLABELASSET_GLACCOUNT_BS = "F12"
    'If Sorting = "1" Then
    If lSortBy() = SortBy_Reference Then
      HLABELASSET_REFERENCE = "G12"      'Reference
      HLABELASSET_FINANCIALYEAR = "H12"  'Financial year
    Else
      HLABELASSET_FINANCIALYEAR = "G12"  'Financial year
      HLABELASSET_REFERENCE = "H12"      'Reference
    End If
    HLABELASSET_DATE = "I12"
    HLABELASSET_DESCRIPTION = "J12"
    HLABELDEPRECIATION_METH = "K12"
    HLABELASSET_STARTDATE = "L12"
    HLABELASSET_PLUS = "M12"
    HLABELASSET_MINUS = "N12"
    HLABELASSET_ENDDATE = "O12"
    HLABELDEPR_STARTDATE = "P12"
    HLABELDEPR_PLUS = "Q12"
    HLABELDEPR_MINUS = "R12"
    HLABELDEPR_P_L = "S12"
    HLABELDEPR_ENDDATE = "T12"
    HLABELVALUE_NET = "U12"
    HLABELRESIDUAL_VALUE = "V12"
End Sub

Sub FillColor()
    Dim i As Integer
    
    Range("A2:V2").Select
    Selection.Interior.Color = RGB(255, 255, 255)
    
    Range("L11:T11").Select
    Selection.Interior.Color = RGB(200, 220, 225)
    
    Range("A12:V12").Select
    Selection.Interior.Color = RGB(173, 190, 201)
    
    For i = 1 To 2
        Range("A" & CStr(i) & ":V" & CStr(i)).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlBottom
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .ShrinkToFit = False
            .MergeCells = False
        End With
        'Selection.Merge
        With Selection.Interior
            If i = 1 Then
                .Color = RGB(173, 190, 201)
            Else
                .Color = RGB(200, 220, 225)
            End If
            .Pattern = xlSolid
        End With
    Next
    
End Sub

Public Sub OnRefreshInitialize(ByRef poCompany As Object)
    
    'Create instance
    Set App = New esl.Application
    
    ThisWorkbook.Worksheets(WORKSHEETFANAME).Name = Left(Translate(8353, "Asset transactions"), 30)
    gstrSheetNameFA = Left(Translate(8353, "Asset transactions"), 30)
    
    Set goCompany = New esl.COMPANY
    Debug.Assert Not poCompany Is Nothing
    Set goCompany = poCompany
End Sub

Public Sub OnRefreshAfterReports()
  Dim loWorksheet As Worksheet
  Dim lbScreenUpdating As Boolean
  
  'Remember ScreenUpdating
  lbScreenUpdating = Application.ScreenUpdating
  
  Set loWorksheet = Worksheets(gstrSheetNameFA)
  If Not loWorksheet Is Nothing Then
    'Check if resultset is empty
    If IsEmpty(loWorksheet.Range("A13").Value) Then
      
      App.Message 0, Translate(8075, "No data which meets the criteria entered"), Translate(32457, "Asset year end totals"), edlgInfo
      Application.DisplayAlerts = False
      Application.Quit
      Set App = Nothing
      Exit Sub
    
    Else
      
      loWorksheet.Activate
      
      With Application.ActiveWindow
        .DisplayWorkbookTabs = True
        .DisplayGridlines = False
        .FreezePanes = False
        .DisplayZeros = True
        .Zoom = 85
      End With
      
      With Application
        .DisplayFormulaBar = True
        .StatusBar = ""
      End With
      
      Application.ScreenUpdating = False
      
      'Format data columns
      FormatDataColumns loWorksheet
  
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      
      'Insert subtotal rows
      InsertSubtotalRows loWorksheet
    
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      
      'Format hidden columns
      FormatHiddenColumns loWorksheet
      
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      
      'Format Header
      FormatHeader loWorksheet

      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      
      'Page Setup
      With loWorksheet.PageSetup
        .LeftFooter = goCompany.Name
        .CenterFooter = "Page &P of &N"
        .RightFooter = "&D   &T"
      End With
    End If
  End If

  'Enable ScreenUpdating
  Application.ScreenUpdating = lbScreenUpdating
    
  'Sheet1 for DELOITTE
  'Debug.Assert False
  'Init Datasheet
  InitDataSheetFA App
  'Fill Datasheet
  FillDataSheetFA App
    
''''    '---------------------------------------------------------------------------
''''    'Gili25502 - Start
''''    On Error GoTo NotExists
''''    Sheets("Pivottable FA").Select
''''    ActiveSheet.PivotTables("PivotTable1").PivotCache.Refresh
''''    'Gili25502 - End
''''    '---------------------------------------------------------------------------
    Set App = Nothing
    'BR17.886.158 - Drop the Temporary Table
    DropTempTable
    'END - BR17.886.158
    Exit Sub

NotExists:
    'CreatePivotTable App
    Set App = Nothing
End Sub

'Contact Support - 14.977.971 - Start
Private Sub FormatHeader(ByRef poWorksheet As Worksheet)
  Dim lsColFrom As String
  Dim lsColTo As String
  Dim loRange As Range
  Dim lsRange As String
  If Not poWorksheet Is Nothing Then
    'Row 1
    lsRange = "[ColFrom]1:[ColTo]1"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetCategory1))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetDataRow))
    Set loRange = poWorksheet.Range(lsRange)
    If Not loRange Is Nothing Then
      With loRange
        .Merge
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .Font.Size = 16
        .Interior.Color = RGB(173, 190, 201)
      End With
    End If
    'Row 2
    lsRange = "[ColFrom]2:[ColTo]2"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetCategory1))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetDataRow))
    Set loRange = poWorksheet.Range(lsRange)
    If Not loRange Is Nothing Then
      With loRange
        .Merge
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .Font.Size = 16
      End With
    End If
    'Row N3 - N9 & R3 - R9
    Set loRange = poWorksheet.Range("N3:N9,R3:R9")
    If Not loRange Is Nothing Then
      With loRange
        .Font.Bold = True
      End With
    End If
    'Row 7 - 10
    Set loRange = poWorksheet.Range("7:10")
    If Not loRange Is Nothing Then
      With loRange
        .EntireRow.Hidden = True
      End With
    End If
    'Row 11 AssetBalanceStartDate - AssetBalanceEndDate
    lsRange = "[ColFrom]11:[ColTo]11"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetBalanceStartDate))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetBalanceEndDate))
    Set loRange = poWorksheet.Range(lsRange)
    If Not loRange Is Nothing Then
      With loRange
        .Merge
        .HorizontalAlignment = xlCenter
        'LineStyle
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlNone
        'Weight
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        'ColorIndex
        .Borders(xlEdgeLeft).ColorIndex = xlAutomatic
        .Borders(xlEdgeTop).ColorIndex = xlAutomatic
        .Borders(xlEdgeBottom).ColorIndex = xlAutomatic
        .Borders(xlEdgeRight).ColorIndex = xlAutomatic
      End With
    End If
    'Row 11 DepreciationStartDate - DepreciationEndDate
    lsRange = "[ColFrom]11:[ColTo]11"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(DepreciationStartDate))
    lsRange = Replace(lsRange, "[ColTo]", sCol(DepreciationEndDate))
    Set loRange = poWorksheet.Range(lsRange)
    If Not loRange Is Nothing Then
      With loRange
        .Merge
        .HorizontalAlignment = xlCenter
        'LineStyle
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlNone
        'Weight
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        'ColorIndex
        .Borders(xlEdgeLeft).ColorIndex = xlAutomatic
        .Borders(xlEdgeTop).ColorIndex = xlAutomatic
        .Borders(xlEdgeBottom).ColorIndex = xlAutomatic
        .Borders(xlEdgeRight).ColorIndex = xlAutomatic
      End With
    End If
    
    'Row 12
    lsRange = "[ColFrom]12:[ColTo]12"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetCategory1))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetDataRow))
    Set loRange = poWorksheet.Range(lsRange)
    If Not loRange Is Nothing Then
      With loRange
        .RowHeight = 13#
        'LineStyle
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        'Weight
        .Borders(xlEdgeLeft).Weight = xlThin
        .Borders(xlEdgeTop).Weight = xlThin
        .Borders(xlEdgeBottom).Weight = xlThin
        .Borders(xlEdgeRight).Weight = xlThin
        .Borders(xlInsideVertical).Weight = xlThin
        'ColorIndex
        .Borders(xlEdgeLeft).ColorIndex = xlAutomatic
        .Borders(xlEdgeTop).ColorIndex = xlAutomatic
        .Borders(xlEdgeBottom).ColorIndex = xlAutomatic
        .Borders(xlEdgeRight).ColorIndex = xlAutomatic
        .Borders(xlInsideVertical).ColorIndex = xlAutomatic
      End With
    End If
    'Row 13
    'Freeze the panes under A13
    Rows("13:13").Select
    ActiveWindow.FreezePanes = True
    Range("A1").Select
  End If

End Sub
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Sub FormatHiddenColumns(ByRef poWorksheet As Worksheet)
  On Error GoTo ErrHandler
  Debug.Print "FormatHiddenColumns - Start - " & Now
  Dim lbScreenUpdating As Boolean
  Dim llRow As Long
  Dim lsRange As String
  Dim loRange As Range
  
  'Remember ScreenUpdating
  lbScreenUpdating = Application.ScreenUpdating
  Application.ScreenUpdating = False
  
  If Not poWorksheet Is Nothing Then
    With poWorksheet
      For llRow = STARTROW To .UsedRange.Rows.Count
        If bDataRow(poWorksheet, llRow) Then
          'AssetCategory1 - AssetCategory5
          lsRange = "[ColFrom][Row]:[ColTo][Row]"
          lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetCategory1))
          lsRange = Replace(lsRange, "[ColTo]", sCol(AssetCategory5))
          lsRange = Replace(lsRange, "[Row]", llRow)
          Set loRange = .Range(lsRange)
          If Not loRange Is Nothing Then
            loRange.Value = Empty
          End If
          'AssetGeneralLedger
          If Not bShowInfo(Show_GLAccount) Then
            lsRange = "[Col][Row]"
            lsRange = Replace(lsRange, "[Col]", sCol(AssetGeneralLedger))
            lsRange = Replace(lsRange, "[Row]", llRow)
            Set loRange = .Range(lsRange)
            If Not loRange Is Nothing Then
              loRange.Value = Empty
            End If
          End If
        End If
      Next
    End With
  End If
  
  'Restore ScreenUpdating
  Application.ScreenUpdating = lbScreenUpdating
  
  Debug.Print "FormatHiddenColumns - End - " & Now
  Exit Sub
ErrHandler:
  Debug.Print "FormatHiddenColumns - Cancel - " & Now
End Sub
'Contact Support - 14.977.971 - End

'Sub ReTerm()
'    Dim i As Integer
'    With Worksheets(gstrSheetNameFA)
'        For i = 12 To lLastRow
'            If (Left(.Range("A" & i).Value, Len("Subtotal")) = "Subtotal") And _
'                (.Range("A" & i).Font.Bold = True) Then
'                .Range("A" & i).Value = Translate(7114, "Subtotal") & _
'                    " " & Mid(.Range("A" & i).Value, Len("Subtotal") + 1)
'            End If
'
'            If (Left(.Range("A" & i).Value, Len("Grand Total")) = "Grand Total") And _
'                (.Range("A" & i).Font.Bold = True) Then
'                .Range("A" & i).Value = Translate(29877, "Grand Total") & _
'                    " " & Mid(.Range("A" & i).Value, Len("Grand Total") + 1)
'            End If
'
'            If (Right(.Range("B" & i).Value, Len("Total")) = "Total") And _
'                (.Range("B" & i).Font.Bold = True) Then
'                .Range("B" & i).Value = Mid(.Range("B" & i).Value, 1, _
'                    Len(.Range("B" & i).Value) - Len("Total")) & _
'                    Translate(8904, "Total")
'            End If
'        Next
'    End With
'End Sub

Sub DeleteCellValue(sWorksheet)
    'Dim
    Dim sLastCell As String
    Dim lRealLastRow As Long 'Additional variable if you have 1 line returned by the SQL only
    
    On Error GoTo ErrHdl
    Worksheets(sWorksheet).Activate
    sLastCell = "V"
    
    With Worksheets(sWorksheet)
        'When no lines don't delete line 13
        lLastRow = .UsedRange.Rows.Count
        lRealLastRow = lLastRow
        
        If lLastRow <= 13 Then lLastRow = 14
        
        .Range("A13:" & sLastCell & "13").Select
        Selection.ClearContents
               
        .Range("A13:" & sLastCell & lLastRow).Select
        On Error Resume Next
        Selection.Rows.Ungroup
        Selection.Rows.Ungroup
        Selection.Rows.Ungroup
        Selection.Rows.Ungroup
        On Error GoTo ErrHdl
        'unbold all cell
        .Range("A13:" & sLastCell & lLastRow).Font.Bold = False
        
        .Range("A14").Select
        .Range("A14:" & sLastCell & lLastRow).Select
        Selection.Delete
        
        'Set focus back to cell
        .Range("A13").Select
        
        'Return RealLastrow
        If lRealLastRow < 13 Then lRealLastRow = 13
        lLastRow = lRealLastRow
    End With

Exit Sub
ErrHdl:
    With Worksheets(sWorksheet)
        'unbold all cell
        .Range("A13:" & sLastCell & lLastRow).Font.Bold = False
        
        'Set focus back to cell
        .Range("A14").Select
        .Range("A14:" & sLastCell & lLastRow).Select
        Selection.Delete
        
        'Set focus back to cell
        .Range("A13").Select
        
        'Return RealLastrow
        If lRealLastRow < 13 Then lRealLastRow = 13
        lLastRow = lRealLastRow
        
    End With

End Sub

'Contact Support - 14.977.971 - Start
Private Sub FormatDataColumns(ByRef poWorksheet As Worksheet)
  On Error GoTo ErrHandler
  Debug.Print "FormatDataColumns - Start - " & Now
  Dim lbScreenUpdating As Boolean
  Dim loRange As Range
  Dim lsRange As String
  'Disable ScreenUpdating
  lbScreenUpdating = Application.ScreenUpdating
  Application.ScreenUpdating = False
  If Not poWorksheet Is Nothing Then
    'AssetCategory1
    Set loRange = poWorksheet.Columns(sCol(AssetCategory1))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bSubTotal(SubTotal_Category1)
    End With
    'AssetCategory2
    Set loRange = poWorksheet.Columns(sCol(AssetCategory2))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bSubTotal(SubTotal_Category2)
    End With
    'AssetCategory3
    Set loRange = poWorksheet.Columns(sCol(AssetCategory3))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bSubTotal(SubTotal_Category3)
    End With
    'AssetCategory4
    Set loRange = poWorksheet.Columns(sCol(AssetCategory4))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bSubTotal(SubTotal_Category4)
    End With
    'AssetCategory5
    Set loRange = poWorksheet.Columns(sCol(AssetCategory5))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bSubTotal(SubTotal_Category5)
    End With
    'AssetGeneralLedger
    Set loRange = poWorksheet.Columns(sCol(AssetGeneralLedger))
    With loRange
      .ColumnWidth = IIf(bShowInfo(Show_GLAccount), IIf(bShowInfo(Show_GLAccountDescription), 40#, 10#), 1#)
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
    End With
    'AssetFinancialYear
    Set loRange = poWorksheet.Columns(sCol(AssetFinancialYear))
    With loRange
      .ColumnWidth = 10#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      '.Hidden = (lSortBy() <> SortBy_FinancialYear)
    End With
    'AssetReference
    Set loRange = poWorksheet.Columns(sCol(AssetReference))
    With loRange
      .ColumnWidth = 10#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
    End With
    'AssetDate
    Set loRange = poWorksheet.Columns(sCol(AssetDate))
    With loRange
      .ColumnWidth = 11#
      .NumberFormat = "dd/mm/yyyy"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bShowInfo(Show_PurchaseDate)
    End With
    'AssetDescription
    Set loRange = poWorksheet.Columns(sCol(AssetDescription))
    With loRange
      .ColumnWidth = 20#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bShowInfo(Show_Asset)
    End With
    'DepreciationMethod
    Set loRange = poWorksheet.Columns(sCol(DepreciationMethod))
    With loRange
      .ColumnWidth = 20#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bShowInfo(Show_DepreciationMethod)
    End With
    
    lsRange = "[ColFrom]:[ColTo]"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetBalanceStartDate))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetNetValue))
    'AssetBalanceStartDate - AssetResidualValue
    Set loRange = poWorksheet.Range(lsRange)
    With loRange
      .ColumnWidth = 13#
      .NumberFormat = "#,##0.00"
      .Font.Name = "Verdana"
      .Font.Size = 9
    End With
    'AssetResidualValue
    Set loRange = poWorksheet.Columns(sCol(AssetResidualValue))
    With loRange
      .ColumnWidth = 13#
      .NumberFormat = "#,##0.00"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = Not bShowInfo(Show_ResidualValue)
    End With
    'AssetDataRow
    Set loRange = poWorksheet.Columns(sCol(AssetDataRow))
    With loRange
      .ColumnWidth = 1#
      .NumberFormat = "@"
      .Font.Name = "Verdana"
      .Font.Size = 9
      .Hidden = True
    End With
  End If
  'Enable ScreenUpdating
  Application.ScreenUpdating = lbScreenUpdating
  Debug.Print "FormatDataColumns - End - " & Now
  Exit Sub
ErrHandler:
  Debug.Print "FormatDataColumns - Cancel - " & Now
End Sub
'Contact Support - 14.977.971 - End

'Sub RatioOnDepr(sWorksheet)
'  'Dim
'  Dim l As Long
'  l = STARTROW
'
'  'Lastrow
'  lLastRow = Worksheets(gstrSheetNameFA).UsedRange.Rows.Count
'
'  'Activate sheet
'  Worksheets(sWorksheet).Activate
'
'  'Check the
'  With Worksheets(sWorksheet)
'    Do While l <= lLastRow
'      'Ratio on Depr+
'      If Len(Trim(.Range("Q" & l).Value)) > "" Then
'        .Range("Q" & l).Value = (.Range("Q" & l).Value * Coef1) / Coef2
'      End If
'      l = l + 1
'    Loop
'  End With
'End Sub

'Contact Support - 14.977.971 - Start
Private Property Get SubTotalKey(ByRef poWorksheet As Worksheet, ByVal plSubTotal As SubTotal_Fields, ByVal plRow As Long) As String
  On Error GoTo ErrHandler
  If Not poWorksheet Is Nothing Then
    Select Case plSubTotal
    Case SubTotal_Category1
      SubTotalKey = poWorksheet.Range(sCol(AssetCategory1) & plRow).Value
    Case SubTotal_Category2
      SubTotalKey = poWorksheet.Range(sCol(AssetCategory2) & plRow).Value
    Case SubTotal_Category3
      SubTotalKey = poWorksheet.Range(sCol(AssetCategory3) & plRow).Value
    Case SubTotal_Category4
      SubTotalKey = poWorksheet.Range(sCol(AssetCategory4) & plRow).Value
    Case SubTotal_Category5
      SubTotalKey = poWorksheet.Range(sCol(AssetCategory5) & plRow).Value
    Case SubTotal_FinancialYear
      SubTotalKey = poWorksheet.Range(sCol(AssetFinancialYear) & plRow).Value
    Case SubTotal_GLedger
      SubTotalKey = poWorksheet.Range(sCol(AssetGeneralLedger) & plRow).Value
    Case Else
    End Select
  End If
  Exit Property
ErrHandler:
  Debug.Assert False
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Property Get FormulaSubtotal(ByRef poWorksheet As Worksheet, ByVal plSubTotalField As SubTotal_Fields, ByVal plCurrentRow As Long, ByVal psCol As String)
  Dim lbExitWhile As Boolean
  Dim llCurrentRow As Long
  Dim lsRowFrom As String
  Dim lsRowTo As String
  Dim lsFormula As String
  lsFormula = "=SUBTOTAL([function_num],[Col][RowFrom]:[Col][RowTo])"
  If Not poWorksheet Is Nothing Then
    llCurrentRow = plCurrentRow - 1
    While Not lbExitWhile
      If bDataRow(poWorksheet, llCurrentRow) Then
        If Len(lsRowTo) = 0 Then
          lsRowTo = llCurrentRow
        End If
        lsRowFrom = llCurrentRow
      Else
        lbExitWhile = Not Len(SubTotalKey(poWorksheet, plSubTotalField, llCurrentRow)) = 0
      End If
      llCurrentRow = llCurrentRow - 1
    Wend
    lsFormula = Replace(lsFormula, "[function_num]", SubTotal_Sum)
    lsFormula = Replace(lsFormula, "[RowFrom]", lsRowFrom)
    lsFormula = Replace(lsFormula, "[RowTo]", lsRowTo)
    lsFormula = Replace(lsFormula, "[Col]", psCol)
    FormulaSubtotal = lsFormula
  End If
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Sub FormatRangeTotal(ByRef poRange As Range, ByVal pvColorIndex As Variant, Optional ByVal pbGrandTotal As Boolean = False)
  With poRange
    .NumberFormat = "#,##0.00"
    .Font.Bold = True
    .Interior.ColorIndex = pvColorIndex
    .Interior.Pattern = xlSolid
    .Interior.PatternColorIndex = xlAutomatic
  End With
  If pbGrandTotal Then
    With poRange
      .Borders(xlEdgeTop).LineStyle = xlContinuous
      .Borders(xlEdgeTop).Weight = xlThin
      .Borders(xlEdgeTop).ColorIndex = xlAutomatic
      .Borders(xlEdgeBottom).LineStyle = xlDouble
      .Borders(xlEdgeBottom).Weight = xlThick
      .Borders(xlEdgeBottom).ColorIndex = xlAutomatic
    End With
  End If
End Sub
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Sub InsertGrandTotal(ByRef poWorksheet As Worksheet, ByRef plRow As Long)
  Debug.Print "InsertGrandTotal - Start - " & Now
  On Error GoTo ErrHandler
  Dim lvColorIndex As Variant
  Dim llColumn As Asset_Columns
  Dim lsFormulaSubtotal As String
  Dim llRowTo As Long
  Dim lbExitWhile As Boolean
  Dim loRange As Range
  Dim lsRange As String
  
  If Not poWorksheet Is Nothing Then
    If bSubTotal(SubTotal_Category1) Then
      Set loRange = poWorksheet.Range(sCol(AssetCategory1) & plRow)
    ElseIf bSubTotal(SubTotal_Category2) Then
      Set loRange = poWorksheet.Range(sCol(AssetCategory2) & plRow)
    ElseIf bSubTotal(SubTotal_Category3) Then
      Set loRange = poWorksheet.Range(sCol(AssetCategory3) & plRow)
    ElseIf bSubTotal(SubTotal_Category4) Then
      Set loRange = poWorksheet.Range(sCol(AssetCategory4) & plRow)
    ElseIf bSubTotal(SubTotal_Category5) Then
      Set loRange = poWorksheet.Range(sCol(AssetCategory5) & plRow)
    Else
      If lSortBy() = SortBy_Reference Then
        Set loRange = poWorksheet.Range(sCol(AssetFinancialYear) & plRow)
      Else
        Set loRange = poWorksheet.Range(sCol(AssetGeneralLedger) & plRow)
      End If
    End If
    If Not loRange Is Nothing Then
      loRange.Value = "Grand Total"
      loRange.Font.Name = "Verdana"
      loRange.Font.Size = 9
      loRange.Font.Bold = True
    End If
    
    lvColorIndex = 52
    lsRange = "[ColFrom][Row]:[ColTo][Row]"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetBalanceStartDate))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetResidualValue))
    lsRange = Replace(lsRange, "[Row]", plRow)
    FormatRangeTotal poWorksheet.Range(lsRange), lvColorIndex, True
  
    lsFormulaSubtotal = "=SUBTOTAL([function_num],[Col][RowFrom]:[Col][RowTo])"
    llRowTo = plRow
    While Not lbExitWhile
      If bDataRow(poWorksheet, llRowTo) Then
        lbExitWhile = True
      Else
        llRowTo = llRowTo - 1
      End If
    Wend
    lsFormulaSubtotal = Replace(lsFormulaSubtotal, "[function_num]", SubTotal_Sum)
    lsFormulaSubtotal = Replace(lsFormulaSubtotal, "[RowFrom]", STARTROW)
    lsFormulaSubtotal = Replace(lsFormulaSubtotal, "[RowTo]", llRowTo)
    lsFormulaSubtotal = Replace(lsFormulaSubtotal, "[Col]", "#")
  
    'HLABELASSET_STARTDATE = "L12"
    llColumn = AssetBalanceStartDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_PLUS = "M12"
    llColumn = AssetBalancePlus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_MINUS = "N12"
    llColumn = AssetBalanceMinus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_ENDDATE = "O12"
    llColumn = AssetBalanceEndDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_STARTDATE = "P12"
    llColumn = DepreciationStartDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_PLUS = "Q12"
    llColumn = DepreciationPlus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_MINUS = "R12"
    llColumn = DepreciationMinus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_P_L = "S12"
    llColumn = DepreciationProfitLost
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_ENDDATE = "T12"
    llColumn = DepreciationEndDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELVALUE_NET = "U12"
    llColumn = AssetNetValue
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELRESIDUAL_VALUE = "V12"
    llColumn = AssetResidualValue
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
  End If
  Debug.Print "InsertGrandTotal - End - " & Now
  Exit Sub
ErrHandler:
  Debug.Print "InsertGrandTotal - Cancel - " & Now
End Sub
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Sub InsertSubTotals(ByRef poWorksheet As Worksheet, ByVal plSubTotal As SubTotal_Fields, ByRef plRow As Long, ByVal psSubTotalKey As String)
  Debug.Print "InsertSubTotals - Start - " & Now
  On Error GoTo ErrHandler
  Dim loRange As Range
  Dim lvColorIndex As Variant
  Dim lsFormulaSubtotal As String
  Dim llColumn As Asset_Columns
  Dim lsRange As String
  If Not poWorksheet Is Nothing Then
    Set loRange = poWorksheet.Rows(plRow & ":" & plRow)
    If Not loRange Is Nothing Then
      loRange.Insert Shift:=xlDown
    End If
    Set loRange = poWorksheet.Rows(plRow & ":" & plRow)
    If Not loRange Is Nothing Then
      loRange.Font.Name = "Verdana"
      loRange.Font.Size = 9
      loRange.Font.Bold = True
    End If
    Select Case plSubTotal
    Case SubTotal_Category1
      poWorksheet.Range(sCol(AssetCategory1) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 39
    Case SubTotal_Category2
      poWorksheet.Range(sCol(AssetCategory2) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 39
    Case SubTotal_Category3
      poWorksheet.Range(sCol(AssetCategory3) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 39
    Case SubTotal_Category4
      poWorksheet.Range(sCol(AssetCategory4) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 39
    Case SubTotal_Category5
      poWorksheet.Range(sCol(AssetCategory5) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 39
    Case SubTotal_FinancialYear
      poWorksheet.Range(sCol(AssetFinancialYear) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 52
    Case SubTotal_GLedger
      poWorksheet.Range(sCol(AssetGeneralLedger) & plRow).Value = psSubTotalKey & " Total"
      lvColorIndex = 53
    Case Else
    End Select
    
    lsRange = "[ColFrom][Row]:[ColTo][Row]"
    lsRange = Replace(lsRange, "[ColFrom]", sCol(AssetBalanceStartDate))
    lsRange = Replace(lsRange, "[ColTo]", sCol(AssetResidualValue))
    lsRange = Replace(lsRange, "[Row]", plRow)
    FormatRangeTotal poWorksheet.Range(lsRange), lvColorIndex
    
    lsFormulaSubtotal = FormulaSubtotal(poWorksheet, plSubTotal, plRow, "#")
    'HLABELASSET_STARTDATE = "L12"
    llColumn = AssetBalanceStartDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_PLUS = "M12"
    llColumn = AssetBalancePlus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_MINUS = "N12"
    llColumn = AssetBalanceMinus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELASSET_ENDDATE = "O12"
    llColumn = AssetBalanceEndDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_STARTDATE = "P12"
    llColumn = DepreciationStartDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_PLUS = "Q12"
    llColumn = DepreciationPlus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_MINUS = "R12"
    llColumn = DepreciationMinus
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_P_L = "S12"
    llColumn = DepreciationProfitLost
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELDEPR_ENDDATE = "T12"
    llColumn = DepreciationEndDate
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELVALUE_NET = "U12"
    llColumn = AssetNetValue
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    'HLABELRESIDUAL_VALUE = "V12"
    llColumn = AssetResidualValue
    poWorksheet.Range(sCol(llColumn) & plRow).Formula = Replace(lsFormulaSubtotal, "#", sCol(llColumn))
    plRow = plRow + 1
  End If
  Debug.Print "InsertSubTotals - End - " & Now
  Exit Sub
ErrHandler:
  Debug.Print "InsertSubTotals - Cancel - " & Now
End Sub
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Property Get bDataRow(ByRef poWorksheet As Worksheet, ByVal plRow As Long) As Boolean
  If Not poWorksheet Is Nothing Then
    bDataRow = (poWorksheet.Range(sCol(AssetDataRow) & plRow).Value = "1")
  End If
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Sub InsertSubtotalRows(ByRef poWorksheet As Worksheet)
  Debug.Print "InsertSubtotalRows - Start - " & Now
  On Error GoTo ErrHandler
  Dim llCurrentRow As Long
  Dim lbExitWhile As Boolean
  Dim lsCategory1 As String
  Dim lsCategory2 As String
  Dim lsCategory3 As String
  Dim lsCategory4 As String
  Dim lsCategory5 As String
  Dim lsFinancialYear As String
  Dim lsGLedger As String
  Dim lbEnableCalculation As Boolean
  Dim lbScreenUpdating As Boolean
  
  If Not poWorksheet Is Nothing Then
    'Disable Calculation
    lbEnableCalculation = poWorksheet.EnableCalculation
    poWorksheet.EnableCalculation = False
    'Disable ScreenUpdating
    lbScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
  
    llCurrentRow = 13
    lsCategory1 = SubTotalKey(poWorksheet, SubTotal_Category1, llCurrentRow)
    lsCategory2 = SubTotalKey(poWorksheet, SubTotal_Category2, llCurrentRow)
    lsCategory3 = SubTotalKey(poWorksheet, SubTotal_Category3, llCurrentRow)
    lsCategory4 = SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow)
    lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
    lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
    lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
    While Not lbExitWhile
      llCurrentRow = llCurrentRow + 1
      If bSubTotal(SubTotal_Category1) And lsCategory1 <> SubTotalKey(poWorksheet, SubTotal_Category1, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
        'SubTotal_Category5
        If bSubTotal(SubTotal_Category5) Then
          InsertSubTotals poWorksheet, SubTotal_Category5, llCurrentRow, lsCategory5
        End If
        lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
        'SubTotal_Category4
        If bSubTotal(SubTotal_Category4) Then
          InsertSubTotals poWorksheet, SubTotal_Category4, llCurrentRow, lsCategory4
        End If
        lsCategory4 = SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow)
        'SubTotal_Category3
        If bSubTotal(SubTotal_Category3) Then
          InsertSubTotals poWorksheet, SubTotal_Category3, llCurrentRow, lsCategory3
        End If
        lsCategory3 = SubTotalKey(poWorksheet, SubTotal_Category3, llCurrentRow)
        'SubTotal_Category2
        If bSubTotal(SubTotal_Category2) Then
          InsertSubTotals poWorksheet, SubTotal_Category2, llCurrentRow, lsCategory2
        End If
        lsCategory2 = SubTotalKey(poWorksheet, SubTotal_Category2, llCurrentRow)
        'SubTotal_Category1
        If bSubTotal(SubTotal_Category1) Then
          InsertSubTotals poWorksheet, SubTotal_Category1, llCurrentRow, lsCategory1
        End If
        lsCategory1 = SubTotalKey(poWorksheet, SubTotal_Category1, llCurrentRow)
      ElseIf bSubTotal(SubTotal_Category2) And lsCategory2 <> SubTotalKey(poWorksheet, SubTotal_Category2, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
        'SubTotal_Category5
        If bSubTotal(SubTotal_Category5) Then
          InsertSubTotals poWorksheet, SubTotal_Category5, llCurrentRow, lsCategory5
        End If
        lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
        'SubTotal_Category4
        If bSubTotal(SubTotal_Category4) Then
          InsertSubTotals poWorksheet, SubTotal_Category4, llCurrentRow, lsCategory4
        End If
        lsCategory4 = SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow)
        'SubTotal_Category3
        If bSubTotal(SubTotal_Category3) Then
          InsertSubTotals poWorksheet, SubTotal_Category3, llCurrentRow, lsCategory3
        End If
        lsCategory3 = SubTotalKey(poWorksheet, SubTotal_Category3, llCurrentRow)
        'SubTotal_Category2
        If bSubTotal(SubTotal_Category2) Then
          InsertSubTotals poWorksheet, SubTotal_Category2, llCurrentRow, lsCategory2
        End If
        lsCategory2 = SubTotalKey(poWorksheet, SubTotal_Category2, llCurrentRow)
      ElseIf bSubTotal(SubTotal_Category3) And lsCategory3 <> SubTotalKey(poWorksheet, SubTotal_Category3, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
        'SubTotal_Category5
        If bSubTotal(SubTotal_Category5) Then
          InsertSubTotals poWorksheet, SubTotal_Category5, llCurrentRow, lsCategory5
        End If
        lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
        'SubTotal_Category4
        If bSubTotal(SubTotal_Category4) Then
          InsertSubTotals poWorksheet, SubTotal_Category4, llCurrentRow, lsCategory4
        End If
        lsCategory4 = SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow)
        'SubTotal_Category3
        If bSubTotal(SubTotal_Category3) Then
          InsertSubTotals poWorksheet, SubTotal_Category3, llCurrentRow, lsCategory3
        End If
        lsCategory3 = SubTotalKey(poWorksheet, SubTotal_Category3, llCurrentRow)
      ElseIf bSubTotal(SubTotal_Category4) And lsCategory4 <> SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
        'SubTotal_Category5
        If bSubTotal(SubTotal_Category5) Then
          InsertSubTotals poWorksheet, SubTotal_Category5, llCurrentRow, lsCategory5
        End If
        lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
        'SubTotal_Category4
        If bSubTotal(SubTotal_Category4) Then
          InsertSubTotals poWorksheet, SubTotal_Category4, llCurrentRow, lsCategory4
        End If
        lsCategory4 = SubTotalKey(poWorksheet, SubTotal_Category4, llCurrentRow)
      ElseIf bSubTotal(SubTotal_Category5) And lsCategory5 <> SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
        'SubTotal_Category5
        If bSubTotal(SubTotal_Category5) Then
          InsertSubTotals poWorksheet, SubTotal_Category5, llCurrentRow, lsCategory5
        End If
        lsCategory5 = SubTotalKey(poWorksheet, SubTotal_Category5, llCurrentRow)
      ElseIf bSubTotal(SubTotal_GLedger) And lsGLedger <> SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
        'SubTotal_GLedger
        If bSubTotal(SubTotal_GLedger) Then
          InsertSubTotals poWorksheet, SubTotal_GLedger, llCurrentRow, lsGLedger
          lsGLedger = SubTotalKey(poWorksheet, SubTotal_GLedger, llCurrentRow)
        End If
      ElseIf bSubTotal(SubTotal_FinancialYear) And lsFinancialYear <> SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow) Then
        'SubTotal_FinancialYear
        If bSubTotal(SubTotal_FinancialYear) Then
          InsertSubTotals poWorksheet, SubTotal_FinancialYear, llCurrentRow, lsFinancialYear
        End If
        lsFinancialYear = SubTotalKey(poWorksheet, SubTotal_FinancialYear, llCurrentRow)
      End If
      lbExitWhile = Not bDataRow(poWorksheet, llCurrentRow)
    Wend
    'Insert Grand Total
    InsertGrandTotal poWorksheet, llCurrentRow
    'Enable Calculation
    poWorksheet.EnableCalculation = lbEnableCalculation
    'Enable ScreenUpdating
    Application.ScreenUpdating = lbScreenUpdating
  End If
  Debug.Print "InsertSubtotalRows - End - " & Now
  Exit Sub
ErrHandler:
  Debug.Print "InsertSubtotalRows - Cancel - " & Now
End Sub
'Contact Support - 14.977.971 - End

'Sub ClearGT()
'  'GT in CAT1
'  If ShowInfo(5) = "-1" Then
'    If ShowInfo(6) = "-1" Then
'      ClearGrandTotals "B"
'    End If
'    ClearGrandTotals "C"
'    'If Sorting <> "1" Then
'    If lSortBy() <> SortBy_Reference Then
'      ClearGrandTotals "D"
'    End If
'    Exit Sub
'  End If
'  'GT in CAT2
'  If ShowInfo(6) = "-1" Then
'    ClearGrandTotals "A"
'    ClearGrandTotals "C"
'    'If Sorting <> "1" Then
'    If lSortBy() <> SortBy_Reference Then
'      ClearGrandTotals "D"
'    End If
'    Exit Sub
'  End If
'  'Sorting on Year
'  'If Sorting <> "1" Then
'  If lSortBy() <> SortBy_Reference Then
'    ClearGrandTotals "D"
'  End If
'End Sub
'
'Sub ClearGrandTotals(pstrCol As String)
'    Columns(pstrCol & ":" & pstrCol).Select
'    Selection.Find(What:="Grand Total", After:=ActiveCell, LookIn:=xlFormulas _
'        , LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
'        MatchCase:=False, SearchFormat:=False).Activate
'    ActiveSheet.Rows(ActiveCell.Row).Delete
'End Sub

'Function RetrieveGL(sGL As String) As String
'    Dim intPos As Integer
'
'    intPos = InStr(1, sGL, "Total")
'    RetrieveGL = Left(sGL, intPos - 2)
'
'End Function

'Sub Insertcolour(sRow As String, ClrIndex As Integer)
'    Range(sRow).Select
'    With Selection.Interior
'        .ColorIndex = ClrIndex
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
'End Sub

'Sub DrawLine(sRow As String)
'    Range(sRow).Select
'
'    With Selection.Borders(xlEdgeTop)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeBottom)
'        .LineStyle = xlDouble
'        .Weight = xlThick
'        .ColorIndex = xlAutomatic
'    End With
'End Sub

Sub GetSlicData()
    Dim i As Integer
    With ThisWorkbook
        TrajectDate_All = CBool(.Names("TrajectDate.All").RefersToRange.Value)
        TrajectDate_From = .Names("TrajectDate.From").RefersToRange.Value
        TrajectDate_To = .Names("TrajectDate.To").RefersToRange.Value
        GL_All = .Names("Gledger.All").RefersToRange.Value
        Assetgroup_All = .Names("Assetgroup.All").RefersToRange.Value
        Assetcode_All = .Names("Assetcode.All").RefersToRange.Value
        GLaccount_From = .Names("Gledger.From").RefersToRange.Value
        GLaccount_To = .Names("Gledger.To").RefersToRange.Value
        Assetgroup_From = .Names("Assetgroup.From").RefersToRange.Value
        Assetgroup_To = .Names("Assetgroup.To").RefersToRange.Value
        Assetcode_From = .Names("Assetcode.From").RefersToRange.Value
        Assetcode_To = .Names("Assetcode.To").RefersToRange.Value
        Traject = .Names("TrajectType").RefersToRange.Value
        YearFrom = .Names("YearFrom").RefersToRange.Value
        MonthFrom = .Names("MonthFrom").RefersToRange.Value
        YearTo = .Names("YearTo").RefersToRange.Value
        MonthTo = .Names("MonthTo").RefersToRange.Value
        DateFrom = .Names("Date.From").RefersToRange.Value
        DateTo = .Names("Date.To").RefersToRange.Value
        DateAll = .Names("Date.All").RefersToRange.Value
        FinYear = .Names("FinYear").RefersToRange.Value
        Filter = .Names("Filter").RefersToRange.Value
        Detailed = .Names("Detailed").RefersToRange.Value
        For i = 0 To 9
          ShowInfo(i) = .Names("Show" & CStr(i)).RefersToRange.Value
        Next
        'Contact Support - 14.977.971 - Start
        Select Case .Names("Sorting").RefersToRange.Value
        Case "1"
          m_lSortBy = SortBy_Reference
        Case "2"
          m_lSortBy = SortBy_FinancialYear
        End Select
        'Contact Support - 14.977.971 - End
        Unprocessed = .Names("Unprocessed").RefersToRange.Value
        Coef1 = .Names("Coef1").RefersToRange.Value
        Coef2 = .Names("Coef2").RefersToRange.Value
        Repdate = .Names("Repdate").RefersToRange.Value
    End With
End Sub

Private Property Get SqlStatement() As String
  Dim lsSql As String

  lsSql = lsSql & "SELECT * " & vbCrLf
  lsSql = lsSql & "INTO " & gstrUniqueLocation & " " & vbCrLf
  lsSql = lsSql & "FROM ( " & vbCrLf
  lsSql = lsSql & "SELECT " & vbCrLf
  lsSql = lsSql & "AssetGroup.GLAccount_BS_Class_01 + ' ' + ISNULL(AssetGroup.GLAccount_BS_Class_01_Description, '') AS Category1, " & vbCrLf
  lsSql = lsSql & "AssetGroup.GLAccount_BS_Class_02 + ' ' + ISNULL(AssetGroup.GLAccount_BS_Class_02_description, '') AS Category2," & vbCrLf
  lsSql = lsSql & "AssetGroup.GLAccount_BS_Class_03 + ' ' + ISNULL(AssetGroup.GLAccount_BS_Class_03_Description, '') AS Category3," & vbCrLf
  lsSql = lsSql & "AssetGroup.GLAccount_BS_Class_04 + ' ' + ISNULL(AssetGroup.GLAccount_BS_Class_04_description, '') AS Category4, " & vbCrLf
  lsSql = lsSql & "AssetGroup.GLAccount_BS_Class_05 + ' ' + ISNULL(AssetGroup.GLAccount_BS_Class_05_Description, '') AS Category5, " & vbCrLf
  lsSql = lsSql & "CASE @ShowDescription" & vbCrLf
  lsSql = lsSql & "  WHEN 0 THEN LTRIM(AssetGroup.Asset_GLAccount_BS_Code)" & vbCrLf
  lsSql = lsSql & "  WHEN 1 THEN LTRIM(AssetGroup.Asset_GLAccount_BS_Code) + ' ' + RTRIM(ISNULL(AssetGroup.Asset_GLAccount_BS_Description, ''))" & vbCrLf
  lsSql = lsSql & "END AS GL, " & vbCrLf
  lsSql = lsSql & "/* Show Order - Start */" & vbCrLf
  
  'If Sorting = "1" Then
  If lSortBy() = SortBy_Reference Then
    lsSql = lsSql & "Asset.Asset_Reference," & vbCrLf
    lsSql = lsSql & " '''' + Asset.FinancialYear AS FinancialYear," & vbCrLf
  Else
    lsSql = lsSql & " '''' + Asset.FinancialYear AS FinancialYear," & vbCrLf
    lsSql = lsSql & "Asset.Asset_Reference," & vbCrLf
  End If
  
  lsSql = lsSql & "/* Show Order - End */" & vbCrLf
  lsSql = lsSql & "Asset.Asset_Date," & vbCrLf
  lsSql = lsSql & "Asset.Asset_Description," & vbCrLf
  lsSql = lsSql & "Asset.Asset_Depreciation_PrimaryMethod," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Asset_StartPeriod," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Asset_Plus," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Asset_Minus," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Asset_EndPeriod," & vbCrLf
  'Bug Report Globe 2003/Synergy - 22.630.950 - Start
  lsSql = lsSql & "Asset_Summary.Depreciation_StartPeriod," & vbCrLf
  'lsSql = lsSql & "CASE  " & vbCrLf
  'lsSql = lsSql & "  WHEN Asset_Summary.Asset_StartPeriod = 0 THEN 0 " & vbCrLf
  'lsSql = lsSql & "  ELSE Asset_Summary.Depreciation_StartPeriod " & vbCrLf
  'lsSql = lsSql & "END AS Depreciation_StartPeriod, " & vbCrLf
  'Bug Report Globe 2003/Synergy - 22.630.950 - End
  lsSql = lsSql & "Asset_Summary.Depreciation_Plus," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Depreciation_Minus," & vbCrLf
  lsSql = lsSql & "Asset_Summary.Depreciation_PL," & vbCrLf
  'Bug Report Globe 2003/Synergy - 22.630.950 - Start
  lsSql = lsSql & "Asset_Summary.Depreciation_EndPeriod, " & vbCrLf
  'lsSql = lsSql & "Asset_Summary.Depreciation_EndPeriod -  " & vbCrLf
  'lsSql = lsSql & "CASE  " & vbCrLf
  'lsSql = lsSql & "  WHEN Asset_Summary.Asset_StartPeriod <> 0 THEN 0 " & vbCrLf
  'lsSql = lsSql & "  ELSE Asset_Summary.Depreciation_StartPeriod " & vbCrLf
  'lsSql = lsSql & "END AS Depreciation_EndPeriod, " & vbCrLf
  'Bug Report Globe 2003/Synergy - 22.630.950 - End
  'Bug Report Globe 2003/Synergy - 22.630.950 - Start
  lsSql = lsSql & "Asset_Summary.Asset_NetValue, " & vbCrLf
  'lsSql = lsSql & "Asset_Summary.Asset_NetValue +  " & vbCrLf
  'lsSql = lsSql & "CASE  " & vbCrLf
  'lsSql = lsSql & "  WHEN Asset_Summary.Asset_StartPeriod <> 0 THEN 0 " & vbCrLf
  'lsSql = lsSql & "  ELSE Asset_Summary.Depreciation_StartPeriod " & vbCrLf
  'lsSql = lsSql & "END AS Asset_NetValue, " & vbCrLf
  'Bug Report Globe 2003/Synergy - 22.630.950 - End
  lsSql = lsSql & "Asset.Asset_ResidualValue, " & vbCrLf
  lsSql = lsSql & "/* Not used any more - Start */" & vbCrLf
  lsSql = lsSql & "  -- Asset_Summary.Asset_Group, " & vbCrLf
  lsSql = lsSql & "  -- AssetGroup.Asset_GLAccount_BS_Code, " & vbCrLf
  lsSql = lsSql & "  -- AssetGroup.Asset_GLAccount_BS_Description," & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Item_Assortment_Code, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Item_Assortment_Description, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Item_Code, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Item_Description, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Supplier_Name, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Depreciation_PrimaryMethod_Percentage, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Depreciation_Days, " & vbCrLf
  lsSql = lsSql & "  -- Asset.FinancialYear_Depreciation_Days, " & vbCrLf
  lsSql = lsSql & "  -- Asset.Asset_Investment_Deduction, " & vbCrLf
  lsSql = lsSql & "/* Not used any more - End */" & vbCrLf
  'Contact Support - 14.977.971 - Start
  lsSql = lsSql & "1 AS DummyColumn" & vbCrLf
  'Contact Support - 14.977.971 - End
  lsSql = lsSql & "/* Asset */" & vbCrLf
  lsSql = lsSql & "FROM (" & vbCrLf
  lsSql = lsSql & "  SELECT" & vbCrLf
  lsSql = lsSql & "  ItemNumbers.Description AS Asset_Description," & vbCrLf
  lsSql = lsSql & "  ItemNumbers.Number AS Asset_Reference," & vbCrLf
  lsSql = lsSql & "  ItemNumbers.UserDate_03 AS Asset_Date," & vbCrLf
  lsSql = lsSql & "  ItemNumbers.ResidualValue AS Asset_ResidualValue," & vbCrLf
  lsSql = lsSql & "  cast(year(FinancialYear.EndDate) as CHAR(4)) + ' - ' + RIGHT(RTRIM(LTRIM(cast(month(FinancialYear.EndDate) AS CHAR(2)))),2) AS FinancialYear," & vbCrLf
  lsSql = lsSql & "  ItemNumbers.PrimaryMethod AS Asset_Depreciation_PrimaryMethod," & vbCrLf
  lsSql = lsSql & "  Items.Item_Assortment_Code AS Asset_Item_Assortment_Code, " & vbCrLf
  lsSql = lsSql & "  Items.Item_Assortment_Description AS Asset_Item_Assortment_Description, " & vbCrLf
  lsSql = lsSql & "  Items.Item_Code AS Asset_Item_Code, " & vbCrLf
  lsSql = lsSql & "  Items.Item_Description AS Asset_Item_Description, " & vbCrLf
  lsSql = lsSql & "  Supplier.Name AS Asset_Supplier_Name, " & vbCrLf
  lsSql = lsSql & "  PrimaryMethod.Percentage AS Asset_Depreciation_PrimaryMethod_Percentage, " & vbCrLf
  lsSql = lsSql & "  CASE " & vbCrLf
  lsSql = lsSql & "    WHEN FinancialYear.StartDate < ItemNumbers.UserDate_03 THEN DATEDIFF(DAY, ItemNumbers.UserDate_03, FinancialYear.EndDate) + 1" & vbCrLf
  lsSql = lsSql & "    WHEN ItemNumbers.UserDate_03 < FinancialYear.EndDate THEN DATEDIFF(DAY, FinancialYear.StartDate, FinancialYear.EndDate) + 1" & vbCrLf
  lsSql = lsSql & "    ELSE 0" & vbCrLf
  lsSql = lsSql & "  END AS Asset_Depreciation_Days, " & vbCrLf
  lsSql = lsSql & "  DATEDIFF(DAY, FinancialYear.StartDate, FinancialYear.EndDate) + 1 AS FinancialYear_Depreciation_Days, " & vbCrLf
  lsSql = lsSql & "  ISNULL(ItemNumbers.UserInteger_05, 0) AS Asset_Investment_Deduction, " & vbCrLf
  lsSql = lsSql & "  Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "  FROM ItemNumbers" & vbCrLf
  lsSql = lsSql & "  /* Items */" & vbCrLf
  lsSql = lsSql & "  INNER JOIN (" & vbCrLf
  lsSql = lsSql & "    SELECT" & vbCrLf
  lsSql = lsSql & "    Items.ItemCode AS Item_Code, " & vbCrLf
  lsSql = lsSql & "    Items.Description AS Item_Description, " & vbCrLf
  lsSql = lsSql & "    Items.Assortment AS Item_Assortment_Code, " & vbCrLf
  lsSql = lsSql & "    ItemAssortment.Description AS Item_Assortment_Description" & vbCrLf
  lsSql = lsSql & "    FROM Items" & vbCrLf
  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      ItemAssortment.Assortment, " & vbCrLf
  lsSql = lsSql & "      ItemAssortment.Description_0 AS Description " & vbCrLf
  lsSql = lsSql & "      FROM ItemAssortment " & vbCrLf
  lsSql = lsSql & "    ) ItemAssortment ON ItemAssortment.Assortment = Items.Assortment" & vbCrLf
  lsSql = lsSql & "  ) Items ON Items.Item_Code = ItemNumbers.ItemCode" & vbCrLf
  lsSql = lsSql & "  /* PrimaryMethod */" & vbCrLf
  lsSql = lsSql & "  LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "    SELECT " & vbCrLf
  lsSql = lsSql & "    deprmeth AS Method, " & vbCrLf
  lsSql = lsSql & "    percper AS Percentage" & vbCrLf
  lsSql = lsSql & "    FROM fadprm" & vbCrLf
  lsSql = lsSql & "  ) PrimaryMethod ON PrimaryMethod.Method = ItemNumbers.PrimaryMethod AND ItemNumbers.PrimaryMethod IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  /* FinancialYear */" & vbCrLf
  lsSql = lsSql & "  LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "    SELECT" & vbCrLf
  lsSql = lsSql & "    MIN(bgdatum) AS StartDate," & vbCrLf
  lsSql = lsSql & "    MAX(eddatum) AS EndDate," & vbCrLf
  lsSql = lsSql & "    bkjrcode As Code" & vbCrLf
  lsSql = lsSql & "    FROM perdat" & vbCrLf
  lsSql = lsSql & "    GROUP BY bkjrcode" & vbCrLf
  lsSql = lsSql & "  ) FinancialYear ON ItemNumbers.UserDate_03 BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate AND ItemNumbers.UserDate_03 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  /* Supplier */" & vbCrLf
  lsSql = lsSql & "  LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "    SELECT" & vbCrLf
  lsSql = lsSql & "    crdnr AS Code, " & vbCrLf
  lsSql = lsSql & "    cmp_name AS Name" & vbCrLf
  lsSql = lsSql & "    FROM Cicmpy" & vbCrLf
  lsSql = lsSql & "    WHERE crdnr IS NOT NULL" & vbCrLf
  lsSql = lsSql & "  ) Supplier ON ItemNumbers.SupplierNumber = Supplier.Code AND ItemNumbers.SupplierNumber IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  WHERE ItemNumbers.Classification = 'F'" & vbCrLf
  lsSql = lsSql & "  AND ItemNumbers.Status IN ('A','G','D','C','B','S','W')" & vbCrLf
  lsSql = lsSql & "  AND FinancialYear.code IS NOT NULL" & vbCrLf
  lsSql = lsSql & ") Asset" & vbCrLf
  lsSql = lsSql & "/* Asset_Summary */" & vbCrLf
  lsSql = lsSql & "INNER JOIN (" & vbCrLf
  lsSql = lsSql & "  SELECT" & vbCrLf
  lsSql = lsSql & "  Asset_Reference," & vbCrLf
  lsSql = lsSql & "  Asset_Group, " & vbCrLf
  lsSql = lsSql & "  SUM(Asset_StartPeriod) AS Asset_StartPeriod," & vbCrLf
  lsSql = lsSql & "  SUM(Asset_Plus) AS Asset_Plus," & vbCrLf
  lsSql = lsSql & "  SUM(Asset_Minus) AS Asset_Minus," & vbCrLf
  lsSql = lsSql & "  SUM(Asset_EndPeriod) AS Asset_EndPeriod," & vbCrLf
  lsSql = lsSql & "  SUM(Depreciation_StartPeriod) AS Depreciation_StartPeriod," & vbCrLf
  lsSql = lsSql & "  SUM(Depreciation_Plus) AS Depreciation_Plus," & vbCrLf
  lsSql = lsSql & "  SUM(Depreciation_Minus) AS Depreciation_Minus," & vbCrLf
  lsSql = lsSql & "  SUM(Depreciation_PL) AS Depreciation_PL," & vbCrLf
  lsSql = lsSql & "  SUM(Depreciation_EndPeriod) AS Depreciation_EndPeriod," & vbCrLf
  lsSql = lsSql & "  SUM(Asset_NetValue) As Asset_NetValue" & vbCrLf
  lsSql = lsSql & "  FROM (" & vbCrLf
  lsSql = lsSql & "    SELECT" & vbCrLf
  lsSql = lsSql & "    gbkmut.reknr," & vbCrLf
  lsSql = lsSql & "    CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl," & vbCrLf
  lsSql = lsSql & "    grtbk.bal_vw," & vbCrLf
  lsSql = lsSql & "    grtbk.bal_vw_Description," & vbCrLf
  lsSql = lsSql & "    gbkmut.TransType," & vbCrLf
  lsSql = lsSql & "    TransType_Description.Description AS TransType_Description," & vbCrLf
  lsSql = lsSql & "    gbkmut.TransSubType," & vbCrLf
  lsSql = lsSql & "    TransSubType_Description.Description AS TransSubType_Description," & vbCrLf
  lsSql = lsSql & "    gbkmut.facode AS Asset_Reference," & vbCrLf
  lsSql = lsSql & "    Asset.AssetGroup AS Asset_Group, " & vbCrLf
  lsSql = lsSql & "    Asset.AssetAC AS Asset_BL," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    /*-------------" & vbCrLf
  lsSql = lsSql & "    -- Net value --" & vbCrLf
  lsSql = lsSql & "    -------------*/" & vbCrLf
  lsSql = lsSql & "    -- Asset_EndPeriod" & vbCrLf
  lsSql = lsSql & "    (" & vbCrLf
  lsSql = lsSql & "      -- Asset_StartPeriod" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "      +    -- Asset_Plus" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "          END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "      -    -- Asset_Minus" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "          END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "    ) - (" & vbCrLf
  lsSql = lsSql & "      -- Depreciation_StartPeriod" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Depreciation - always actual - Not always actual for Deloitte " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */ THEN" & vbCrLf
  lsSql = lsSql & "          CASE " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.datum > ISNULL(Asset.UltimateDepreciation, gbkmut.datum-1)" & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "              AND " & vbCrLf
  lsSql = lsSql & "                (  " & vbCrLf
  lsSql = lsSql & "                  (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                  OR " & vbCrLf
  lsSql = lsSql & "                  ( " & vbCrLf
  lsSql = lsSql & "                    @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "                    AND ( " & vbCrLf
  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                      OR " & vbCrLf
  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                    ) " & vbCrLf
  lsSql = lsSql & "                  ) " & vbCrLf
  lsSql = lsSql & "                  OR " & vbCrLf
  lsSql = lsSql & "                  (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "                ) " & vbCrLf
  lsSql = lsSql & "              AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.datum < @DateFrom " & vbCrLf
  lsSql = lsSql & "              THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "              AND CASE " & vbCrLf
  lsSql = lsSql & "                WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "                WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "              END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "              AND CASE " & vbCrLf
'  lsSql = lsSql & "                WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "                WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "              END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "              THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "              AND CASE " & vbCrLf
  lsSql = lsSql & "                WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "                WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "              END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "              AND CASE " & vbCrLf
'  lsSql = lsSql & "                WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "                WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "              END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "              THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "            ELSE 0" & vbCrLf
  lsSql = lsSql & "          END" & vbCrLf
  
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "      +    -- Depreciation_Plus" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Depreciation - always actual" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "          AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  lsSql = lsSql & "          AND CASE " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
'  '*** Gili25502 *** 10.487.128 *** Start
'  'lsSql = lsSql & "          AND gbkmut.datum >= asset.transactiondatefrom " & vbCrLf
'  'lsSql = lsSql & "          AND gbkmut.datum < asset.transactiondateto " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum > asset.transactiondatefrom " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum <= asset.transactiondateto " & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** End
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "      -    -- Depreciation_Minus" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "          END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "      +    -- Depreciation_PL" & vbCrLf
  lsSql = lsSql & "      CASE" & vbCrLf
  lsSql = lsSql & "        -- Depreciation" & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprPL " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "          AND Depreciation.DeprBS = Asset.DeprBS " & vbCrLf
'  lsSql = lsSql & "          AND CASE " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          AND CASE " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "            WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "          END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "          THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "          THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber)" & vbCrLf
  lsSql = lsSql & "        -- Budget - Depreciation" & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */ " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "          AND " & vbCrLf
  lsSql = lsSql & "            (  " & vbCrLf
  lsSql = lsSql & "              (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "              OR " & vbCrLf
  lsSql = lsSql & "              ( " & vbCrLf
  lsSql = lsSql & "                @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "                AND ( " & vbCrLf
  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                  OR " & vbCrLf
  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                ) " & vbCrLf
  lsSql = lsSql & "              ) " & vbCrLf
  lsSql = lsSql & "              OR " & vbCrLf
  lsSql = lsSql & "              (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "            ) " & vbCrLf
  lsSql = lsSql & "          AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.datum BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "          THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "          THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
  lsSql = lsSql & "        ELSE 0" & vbCrLf
  lsSql = lsSql & "      END " & vbCrLf
  lsSql = lsSql & "    )" & vbCrLf
  lsSql = lsSql & "    AS Asset_NetValue, " & vbCrLf
  lsSql = lsSql & "  --------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    /*---------" & vbCrLf
  lsSql = lsSql & "    -- Asset --" & vbCrLf
  lsSql = lsSql & "    ---------*/" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Asset_StartPeriod," & vbCrLf
  lsSql = lsSql & "  --------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Asset_Plus," & vbCrLf
  lsSql = lsSql & "  --------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Asset_Minus," & vbCrLf
  lsSql = lsSql & "  --------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    -- Asset_StartPeriod" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    +    -- Asset_Plus" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Purchase & Revaluation" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType NOT IN ('I', 'V', 'N') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    -    -- Asset_Minus" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Disposal - Asset" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType IN ('N', 'V') AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    AS Asset_EndPeriod," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    /*----------------" & vbCrLf
  lsSql = lsSql & "    -- Depreciation --" & vbCrLf
  lsSql = lsSql & "    ----------------*/" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation - always actual - Not always actual for Deloitte" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ THEN" & vbCrLf
  lsSql = lsSql & "        CASE " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.datum > ISNULL(Asset.UltimateDepreciation, gbkmut.datum-1)" & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "            AND " & vbCrLf
  lsSql = lsSql & "              (  " & vbCrLf
  lsSql = lsSql & "                (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                ( " & vbCrLf
  lsSql = lsSql & "                  @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "                  AND ( " & vbCrLf
  lsSql = lsSql & "                    (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                    OR " & vbCrLf
  lsSql = lsSql & "                    (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                  ) " & vbCrLf
  lsSql = lsSql & "                ) " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "              ) " & vbCrLf
  lsSql = lsSql & "            AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.datum < @DateFrom " & vbCrLf
  lsSql = lsSql & "            THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "            AND CASE " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "            END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "            AND CASE " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "            END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "            THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "            AND CASE " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "            END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "            AND CASE " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "            THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          ELSE 0" & vbCrLf
  lsSql = lsSql & "        END" & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Depreciation_StartPeriod," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation - always actual" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('V') OR (gbkmut.TransSubType = 'N' AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) < 0))" & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "        AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
'  '*** Gili25502 *** 10.487.128 *** Start
'  'lsSql = lsSql & "        AND gbkmut.datum >= asset.transactiondatefrom " & vbCrLf
'  'lsSql = lsSql & "        AND gbkmut.datum < asset.transactiondateto " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.datum > asset.transactiondatefrom " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.datum <= asset.transactiondateto " & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** End
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Depreciation_Plus," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND (gbkmut.TransSubType IN ('I') OR (gbkmut.TransSubType = 'N' AND CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) > 0)) " & vbCrLf
  'lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Depreciation_Minus," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "--     gbkmut.datum, Asset.TransactionDateFrom, Asset.TransactionDateTo, gbkmut.bdr_hfl, " & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprPL " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "        AND Depreciation.DeprBS = Asset.DeprBS " & vbCrLf
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
'  lsSql = lsSql & "        AND gbkmut.datum > Asset.TransactionDateFrom " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.datum <= Asset.TransactionDateTo " & vbCrLf
'  lsSql = lsSql & "        AND CASE WHEN @DocDate = 0 THEN gbkmut.datum WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) END >= @DateFrom THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Budget - Depreciation" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "        AND " & vbCrLf
  lsSql = lsSql & "          (  " & vbCrLf
  lsSql = lsSql & "            (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "            OR " & vbCrLf
  lsSql = lsSql & "            ( " & vbCrLf
  lsSql = lsSql & "              @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "              AND ( " & vbCrLf
  lsSql = lsSql & "                (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "              ) " & vbCrLf
  lsSql = lsSql & "            ) " & vbCrLf
  lsSql = lsSql & "            OR " & vbCrLf
  lsSql = lsSql & "            (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "          ) " & vbCrLf
  lsSql = lsSql & "        AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.datum BETWEEN @DateFrom AND @DateTo "
  'lsSql = lsSql & "        THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
  lsSql = lsSql & "        THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END AS Depreciation_PL," & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    -- Depreciation_StartPeriod" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation - always actual - Not always actual for Deloitte" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ THEN" & vbCrLf
  lsSql = lsSql & "        CASE " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.datum > ISNULL(Asset.UltimateDepreciation, gbkmut.datum-1)" & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "            AND " & vbCrLf
  lsSql = lsSql & "              (  " & vbCrLf
  lsSql = lsSql & "                (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                ( " & vbCrLf
  lsSql = lsSql & "                  @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "                  AND ( " & vbCrLf
  lsSql = lsSql & "                    (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                    OR " & vbCrLf
  lsSql = lsSql & "                    (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "                  ) " & vbCrLf
  lsSql = lsSql & "                ) " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "              ) " & vbCrLf
  lsSql = lsSql & "            AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.datum < @DateFrom " & vbCrLf
  lsSql = lsSql & "            THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "            AND CASE " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "            END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "            AND CASE " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "            END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "            THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "            AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
  lsSql = lsSql & "            AND CASE " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "            END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "            AND CASE " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "              WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "            END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "            THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "          ELSE 0" & vbCrLf
  lsSql = lsSql & "        END" & vbCrLf
  
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    +    -- Depreciation_Plus" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation - always actual" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "        AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    -    -- Depreciation_Minus" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Disposal - Storno" & vbCrLf
  lsSql = lsSql & "      WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('I') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  'lsSql = lsSql & "        END >= @DateFrom " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "        THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    +    -- Depreciation_PL" & vbCrLf
  lsSql = lsSql & "    CASE" & vbCrLf
  lsSql = lsSql & "      -- Depreciation" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actual */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V', 'N') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = Asset.DeprPL " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "        AND Depreciation.DeprBS = Asset.DeprBS " & vbCrLf
'  lsSql = lsSql & "        AND CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN ISNULL(V.datum, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum)) " & vbCrLf
'  lsSql = lsSql & "        END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo " & vbCrLf
  ' Deloitte scenario 5 - End
'  lsSql = lsSql & "        AND gbkmut.datum > Asset.TransactionDateFrom " & vbCrLf
'  lsSql = lsSql & "        AND gbkmut.datum <= Asset.TransactionDateTo " & vbCrLf
  lsSql = lsSql & "        AND CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END BETWEEN @DateFrom AND @DateTo " & vbCrLf
  lsSql = lsSql & "        THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "      -- Budget - Depreciation" & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('B') " & vbCrLf
  lsSql = lsSql & "        AND " & vbCrLf
  lsSql = lsSql & "          (  " & vbCrLf
  lsSql = lsSql & "            (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "            OR " & vbCrLf
  lsSql = lsSql & "            ( " & vbCrLf
  lsSql = lsSql & "              @BudgetVersion = 'ASSET_3'  " & vbCrLf
  lsSql = lsSql & "              AND ( " & vbCrLf
  lsSql = lsSql & "                (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
  lsSql = lsSql & "                OR " & vbCrLf
  lsSql = lsSql & "                (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
  lsSql = lsSql & "              ) " & vbCrLf
  lsSql = lsSql & "            ) " & vbCrLf
  lsSql = lsSql & "            OR " & vbCrLf
  lsSql = lsSql & "            (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
  lsSql = lsSql & "          ) " & vbCrLf
  lsSql = lsSql & "        AND Asset.AssetActiveGroup = Asset.AssetGroup " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.datum BETWEEN @DateFrom AND @DateTo "
  lsSql = lsSql & "        THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
  'lsSql = lsSql & "        THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
  lsSql = lsSql & "      ELSE 0" & vbCrLf
  lsSql = lsSql & "    END " & vbCrLf
  lsSql = lsSql & "    As Depreciation_EndPeriod" & vbCrLf
  lsSql = lsSql & "--------------------------------------------------------      " & vbCrLf
  lsSql = lsSql & "    FROM gbkmut" & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "    LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "      SELECT T.ID, " & vbCrLf
  lsSql = lsSql & "      (" & vbCrLf
  'BR 38.700.087: Only 1 record is allowed, add TOP 1
  lsSql = lsSql & "        SELECT TOP 1 MAX(D.reknr)" & vbCrLf
  lsSql = lsSql & "        FROM gbkmut D" & vbCrLf
  lsSql = lsSql & "        INNER JOIN grtbk G ON G.reknr = D.reknr" & vbCrLf
  lsSql = lsSql & "        WHERE D.TransType IN ('N', 'C', 'P')" & vbCrLf
  lsSql = lsSql & "        AND D.TransSubType = 'V'" & vbCrLf
  lsSql = lsSql & "        AND D.EntryGUId = T.EntryGUId" & vbCrLf
  lsSql = lsSql & "        AND D.facode = T.facode" & vbCrLf
  lsSql = lsSql & "        AND G.bal_vw = 'B'" & vbCrLf
  lsSql = lsSql & "        GROUP BY D.reknr" & vbCrLf
  lsSql = lsSql & "        HAVING COUNT(*) = 1" & vbCrLf
  lsSql = lsSql & "      ) AS DeprBS" & vbCrLf
  lsSql = lsSql & "      FROM gbkmut T" & vbCrLf
  lsSql = lsSql & "    ) Depreciation ON Depreciation.ID = gbkmut.ID" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN ( " & vbCrLf
'  lsSql = lsSql & "      SELECT ID, " & vbCrLf
'  lsSql = lsSql & "      DATEADD(SECOND, 1, datum) AS datum, " & vbCrLf
'  lsSql = lsSql & "      DATEADD(SECOND, 1, docdate) AS docdate " & vbCrLf
'  lsSql = lsSql & "      FROM gbkmut V " & vbCrLf
'  lsSql = lsSql & "      WHERE transtype = 'N' " & vbCrLf
'  lsSql = lsSql & "      AND transsubtype = 'V' " & vbCrLf
'  lsSql = lsSql & "      AND EXISTS( " & vbCrLf
'  lsSql = lsSql & "        SELECT I.ID  " & vbCrLf
'  lsSql = lsSql & "        FROM gbkmut I  " & vbCrLf
'  lsSql = lsSql & "        WHERE I.entryguid = V.entryguid  " & vbCrLf
'  ' Localisation other markets - 13.930.753 - Start
'  lsSql = lsSql & "        AND I.facode = V.facode " & vbCrLf
'  ' Localisation other markets - 13.930.753 - End
'  lsSql = lsSql & "        AND I.transsubtype = 'I' " & vbCrLf
'  lsSql = lsSql & "      ) " & vbCrLf
'  lsSql = lsSql & "    ) V ON V.ID = gbkmut.ID " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "    /* Asset */" & vbCrLf
  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
  lsSql = lsSql & "      -- If two asset group have the same definition, only one is retained" & vbCrLf
  lsSql = lsSql & "      SELECT DISTINCT" & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Number, " & vbCrLf
  lsSql = lsSql & "      ISNULL(TransactionFrom.TransactionDateFrom, (SELECT MIN(bgdatum) FROM perdat)) TransactionDateFrom, " & vbCrLf
  lsSql = lsSql & "      ISNULL(TransactionTo.TransactionDateTo, (SELECT MAX(eddatum) FROM perdat)) TransactionDateTo, " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.TransactionGUId, " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.AssetGroup," & vbCrLf
'  lsSql = lsSql & "      UniqueAssetGroup.AssetGroup," & vbCrLf
  lsSql = lsSql & "      ItemNumbers.AssetActiveGroup, " & vbCrLf
  lsSql = lsSql & "      FaGrp.AssetAC," & vbCrLf
  lsSql = lsSql & "      FaGrp.DeprBS," & vbCrLf
  lsSql = lsSql & "      FaGrp.DeprPL, " & vbCrLf
  
  lsSql = lsSql & "      ( " & vbCrLf
  ' Modif Scenario 1 - Start
'  lsSql = lsSql & "        SELECT MAX(CASE @DocDate WHEN 0 THEN gbkmut.datum WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) END) " & vbCrLf
  lsSql = lsSql & "        SELECT MAX(gbkmut.datum) " & vbCrLf
  ' Modif Scenario 1 - End
  lsSql = lsSql & "        FROM gbkmut " & vbCrLf
  lsSql = lsSql & "        WHERE gbkmut.facode = ItemNumbers.Number " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.TransSubType IN ('V') " & vbCrLf
  lsSql = lsSql & "        AND gbkmut.reknr = FaGrp.DeprBS " & vbCrLf
  ' Modif Scenario 1 - Start
'  lsSql = lsSql & "        AND NOT EXISTS( " & vbCrLf
'  lsSql = lsSql & "          SELECT I.ID " & vbCrLf
'  lsSql = lsSql & "          FROM gbkmut I " & vbCrLf
'  lsSql = lsSql & "          WHERE I.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND I.TransSubType = 'I' " & vbCrLf
'  lsSql = lsSql & "          AND I.EntryGUId = gbkmut.EntryGUId " & vbCrLf
'  lsSql = lsSql & "        ) " & vbCrLf
  ' Modif Scenario 1 - End
  lsSql = lsSql & "      ) AS UltimateDepreciation, " & vbCrLf
  
  lsSql = lsSql & "      Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "      FROM (" & vbCrLf
  lsSql = lsSql & "        SELECT " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.Number, " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.TransactionGUId, " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.Classification, " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.Status, " & vbCrLf
  'lsSql = lsSql & "        CASE " & vbCrLf
  'lsSql = lsSql & "          WHEN @BudgetSimulation = 1 THEN ItemNumbers.AssetGroup" & vbCrLf
  'lsSql = lsSql & "          ELSE ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) " & vbCrLf
  'lsSql = lsSql & "        END AS AssetGroup," & vbCrLf
  lsSql = lsSql & "        ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup," & vbCrLf
  lsSql = lsSql & "        ItemNumbers.AssetGroup AS AssetActiveGroup, " & vbCrLf
  lsSql = lsSql & "        Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "        FROM ItemNumbers" & vbCrLf
  lsSql = lsSql & "        LEFT JOIN (" & vbCrLf
  lsSql = lsSql & "          -- Requery transfert history of the asset" & vbCrLf
  lsSql = lsSql & "          SELECT fatran.assetcode, fatran.olddataval AS assetgroup" & vbCrLf
  lsSql = lsSql & "          FROM fatran " & vbCrLf
  lsSql = lsSql & "          WHERE trantype = 'G'" & vbCrLf
  lsSql = lsSql & "          UNION" & vbCrLf
  lsSql = lsSql & "          SELECT fatran.assetcode, fatran.newdataval AS assetgroup" & vbCrLf
  lsSql = lsSql & "          FROM fatran " & vbCrLf
  lsSql = lsSql & "          WHERE trantype = 'G'" & vbCrLf
  lsSql = lsSql & "        ) fatran ON fatran.assetcode = ItemNumbers.Number" & vbCrLf
  lsSql = lsSql & "      ) ItemNumbers " & vbCrLf
  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
  lsSql = lsSql & "        SELECT" & vbCrLf
  lsSql = lsSql & "        assetgroup," & vbCrLf
  lsSql = lsSql & "        AssetAC," & vbCrLf
  lsSql = lsSql & "        DeprBS," & vbCrLf
  lsSql = lsSql & "        DeprPL, " & vbCrLf
  lsSql = lsSql & "        Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "        FROM FaGrp" & vbCrLf
  lsSql = lsSql & "      ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT" & vbCrLf
'  lsSql = lsSql & "        MIN(assetgroup) AS AssetGroup," & vbCrLf
'  lsSql = lsSql & "        AssetAC," & vbCrLf
'  lsSql = lsSql & "        DeprBS," & vbCrLf
'  lsSql = lsSql & "        DeprPL" & vbCrLf
'  lsSql = lsSql & "        FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "        GROUP BY AssetAC, DeprBS, DeprPL" & vbCrLf
'  lsSql = lsSql & "      ) UniqueAssetGroup ON UniqueAssetGroup.AssetAC = FaGrp.AssetAC AND UniqueAssetGroup.DeprBS = FaGrp.DeprBS AND UniqueAssetGroup.DeprPL = FaGrp.DeprPL" & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "        SELECT facode, reknr,  " & vbCrLf
  lsSql = lsSql & "        MAX( " & vbCrLf
  lsSql = lsSql & "          CASE  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 = 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END  " & vbCrLf
  lsSql = lsSql & "        ) AS TransactionDateTo " & vbCrLf
  lsSql = lsSql & "        FROM gbkmut " & vbCrLf
  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
  lsSql = lsSql & "          SELECT fatran.assetcode, fagrp.AssetAC" & vbCrLf
  lsSql = lsSql & "          FROM fatran " & vbCrLf
  lsSql = lsSql & "          INNER JOIN (" & vbCrLf
  lsSql = lsSql & "            SELECT AssetGroup, AssetAC " & vbCrLf
  lsSql = lsSql & "            FROM fagrp" & vbCrLf
  lsSql = lsSql & "          ) fagrp ON fagrp.AssetGroup = fatran.olddataval" & vbCrLf
  lsSql = lsSql & "          WHERE trantype = 'G'" & vbCrLf
  lsSql = lsSql & "        ) fatran ON gbkmut.facode = fatran.assetcode AND gbkmut.reknr = fatran.AssetAC" & vbCrLf
  lsSql = lsSql & "        WHERE TransSubType = 'I' " & vbCrLf
  lsSql = lsSql & "        GROUP BY facode, reknr" & vbCrLf
  lsSql = lsSql & "      ) TransactionTo ON TransactionTo.facode = ItemNumbers.Number AND TransactionTo.reknr = FaGrp.AssetAC AND ItemNumbers.Number IS NOT NULL AND FaGrp.AssetAC IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN (" & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** Start
'  'lsSql = lsSql & "        SELECT facode, reknr, MIN(datum) AS TransactionDateFrom" & vbCrLf
'  lsSql = lsSql & "        SELECT facode, reknr, MIN(datum)-1 AS TransactionDateFrom" & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** End
  lsSql = lsSql & "        SELECT facode, reknr,  " & vbCrLf
  lsSql = lsSql & "        DATEADD(SECOND, 1, MIN( " & vbCrLf
  lsSql = lsSql & "          CASE  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 = 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END  " & vbCrLf
  lsSql = lsSql & "        )) AS TransactionDateFrom " & vbCrLf
  lsSql = lsSql & "        FROM gbkmut " & vbCrLf
  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
  lsSql = lsSql & "          SELECT fatran.assetcode, fagrp.AssetAC" & vbCrLf
  lsSql = lsSql & "          FROM fatran " & vbCrLf
  lsSql = lsSql & "          INNER JOIN (" & vbCrLf
  lsSql = lsSql & "            SELECT AssetGroup, AssetAC " & vbCrLf
  lsSql = lsSql & "            FROM fagrp" & vbCrLf
  lsSql = lsSql & "          ) fagrp ON fagrp.AssetGroup = fatran.newdataval" & vbCrLf
  lsSql = lsSql & "          WHERE trantype = 'G'" & vbCrLf
  lsSql = lsSql & "        ) fatran ON gbkmut.facode = fatran.assetcode AND gbkmut.reknr = fatran.AssetAC" & vbCrLf
  lsSql = lsSql & "        GROUP BY facode, reknr" & vbCrLf
  lsSql = lsSql & "      ) TransactionFrom ON TransactionFrom.facode = ItemNumbers.Number AND TransactionFrom.reknr = FaGrp.AssetAC AND ItemNumbers.Number IS NOT NULL AND FaGrp.AssetAC IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      WHERE ItemNumbers.Classification = 'F'" & vbCrLf
  lsSql = lsSql & "      AND ItemNumbers.Status IN ('A','G','D','C','B','S','W')" & vbCrLf
  '*** Gili25502 - 15/03/2004 - 09.977.741 - Start ***
  'lsSql = lsSql & "    ) Asset ON Asset.Number = gbkmut.FACode AND Asset.AssetAC = gbkmut.reknr" & vbCrLf
  lsSql = lsSql & "    ) Asset ON Asset.Number = gbkmut.FACode " & vbCrLf
  '*** Gili25502 - 15/03/2004 - 09.977.741 - End ***
  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
  lsSql = lsSql & "      SELECT DatabaseChar, TermId, Description" & vbCrLf
  lsSql = lsSql & "      FROM DDTests" & vbCrLf
  lsSql = lsSql & "      WHERE TableName = 'gbkmut' AND FieldName = 'TransType'" & vbCrLf
  lsSql = lsSql & "    ) TransType_Description ON TransType_Description.DatabaseChar = gbkmut.transtype" & vbCrLf
  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
  lsSql = lsSql & "      SELECT DatabaseChar, TermId, Description" & vbCrLf
  lsSql = lsSql & "      FROM DDTests" & vbCrLf
  lsSql = lsSql & "      WHERE TableName = 'gbkmut' AND FieldName = 'TransSubType'" & vbCrLf
  lsSql = lsSql & "    ) TransSubType_Description ON TransSubType_Description.DatabaseChar = gbkmut.TransSubType" & vbCrLf
  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
  lsSql = lsSql & "      SELECT" & vbCrLf
  lsSql = lsSql & "      grtbk.reknr," & vbCrLf
  lsSql = lsSql & "      grtbk.omzrek," & vbCrLf
  lsSql = lsSql & "      omzrek_Description.TermId AS omzrek_TermId," & vbCrLf
  lsSql = lsSql & "      omzrek_Description.Description AS omzrek_Description," & vbCrLf
  lsSql = lsSql & "      grtbk.bal_vw," & vbCrLf
  lsSql = lsSql & "      bal_vw_Description.TermId AS bal_vw_TermId," & vbCrLf
  lsSql = lsSql & "      bal_vw_Description.Description AS bal_vw_Description" & vbCrLf
  lsSql = lsSql & "      FROM grtbk" & vbCrLf
  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description" & vbCrLf
  lsSql = lsSql & "        FROM DDTests" & vbCrLf
  lsSql = lsSql & "        WHERE TableName = 'grtbk' AND FieldName = 'omzrek'" & vbCrLf
  lsSql = lsSql & "      ) omzrek_Description ON omzrek_Description.DatabaseChar = grtbk.omzrek" & vbCrLf
  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description" & vbCrLf
  lsSql = lsSql & "        FROM DDTests" & vbCrLf
  lsSql = lsSql & "        WHERE TableName = 'grtbk' AND FieldName = 'bal_vw'" & vbCrLf
  lsSql = lsSql & "      ) bal_vw_Description ON bal_vw_Description.DatabaseChar = grtbk.bal_vw" & vbCrLf
  lsSql = lsSql & "-----------------------------------------------------------------------------" & vbCrLf
  lsSql = lsSql & "      WHERE grtbk.omzrek NOT IN ('C', 'D')" & vbCrLf
  lsSql = lsSql & "-----------------------------------------------------------------------------" & vbCrLf
  lsSql = lsSql & "    ) grtbk ON grtbk.reknr = gbkmut.reknr" & vbCrLf
  lsSql = lsSql & "    WHERE " & vbCrLf
  lsSql = lsSql & "    CASE " & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actuals */ THEN " & vbCrLf
  lsSql = lsSql & "        CASE " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
  lsSql = lsSql & "        END " & vbCrLf
  lsSql = lsSql & "      ELSE /* Budget */ gbkmut.datum " & vbCrLf
  lsSql = lsSql & "    END <= @DateTo" & vbCrLf
  'lsSql = lsSql & "    WHERE CASE WHEN @DocDate = 0 THEN gbkmut.datum WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) END <= @DateTo" & vbCrLf
  lsSql = lsSql & "--     AND gbkmut.facode = 'TRANSFERT' " & vbCrLf
  lsSql = lsSql & "  ) Asset_Transactions" & vbCrLf
  lsSql = lsSql & "  GROUP BY Asset_Transactions.Asset_Reference, Asset_Transactions.Asset_Group" & vbCrLf
  lsSql = lsSql & ") Asset_Summary ON Asset_Summary.Asset_Reference = Asset.Asset_Reference" & vbCrLf
  lsSql = lsSql & "/* AssetGroup */" & vbCrLf
  lsSql = lsSql & "INNER JOIN (" & vbCrLf
  lsSql = lsSql & "  SELECT" & vbCrLf
  lsSql = lsSql & "  assetgroup AS Asset_Group," & vbCrLf
  lsSql = lsSql & "  AssetAC AS Asset_GLAccount_BS_Code," & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Description AS Asset_GLAccount_BS_Description, " & vbCrLf
  lsSql = lsSql & "  DeprBS AS Depreciation_GLAccount_BS," & vbCrLf
  lsSql = lsSql & "  DeprPL As Depreciation_GLAccount_PL, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_01, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_01_Description, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_02, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_02_Description, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_03, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_03_Description, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_04, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_04_Description, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_05, " & vbCrLf
  lsSql = lsSql & "  Asset_GLAccount_BS.GLAccount_BS_Class_05_Description, " & vbCrLf
  lsSql = lsSql & "  Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "  FROM FaGrp" & vbCrLf
  lsSql = lsSql & "  LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "    SELECT" & vbCrLf
  lsSql = lsSql & "    grtbk.reknr AS GLAccount_BS_Code, " & vbCrLf
  lsSql = lsSql & "    grtbk.oms25_0 AS GLAccount_BS_Description, " & vbCrLf
  lsSql = lsSql & "    grtbk.Class_01 As GLAccount_BS_Class_01," & vbCrLf
  lsSql = lsSql & "    Class_01.Description_0 As GLAccount_BS_Class_01_Description," & vbCrLf
  lsSql = lsSql & "    grtbk.Class_02 As GLAccount_BS_Class_02," & vbCrLf
  lsSql = lsSql & "    Class_02.Description_0 As GLAccount_BS_Class_02_Description, " & vbCrLf
  lsSql = lsSql & "    grtbk.Class_03 As GLAccount_BS_Class_03," & vbCrLf
  lsSql = lsSql & "    Class_03.Description_0 As GLAccount_BS_Class_03_Description," & vbCrLf
  lsSql = lsSql & "    grtbk.Class_04 As GLAccount_BS_Class_04," & vbCrLf
  lsSql = lsSql & "    Class_04.Description_0 As GLAccount_BS_Class_04_Description, " & vbCrLf
  lsSql = lsSql & "    grtbk.Class_05 As GLAccount_BS_Class_05," & vbCrLf
  lsSql = lsSql & "    Class_05.Description_0 As GLAccount_BS_Class_05_Description," & vbCrLf
  lsSql = lsSql & "    Null AS DummyColumn" & vbCrLf
  lsSql = lsSql & "    FROM grtbk" & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN AccountClasses Class_01 ON Class_01.ClassId = 1 AND Class_01.AccountClassCode = grtbk.Class_01 AND grtbk.Class_01 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN AccountClasses Class_02 ON Class_02.ClassId = 2 AND Class_02.AccountClassCode = grtbk.Class_02 AND grtbk.Class_02 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN AccountClasses Class_03 ON Class_03.ClassId = 3 AND Class_03.AccountClassCode = grtbk.Class_03 AND grtbk.Class_03 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN AccountClasses Class_04 ON Class_04.ClassId = 4 AND Class_04.AccountClassCode = grtbk.Class_04 AND grtbk.Class_04 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN AccountClasses Class_05 ON Class_05.ClassId = 5 AND Class_05.AccountClassCode = grtbk.Class_05 AND grtbk.Class_05 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  ) Asset_GLAccount_BS ON Asset_GLAccount_BS.GLAccount_BS_Code = FaGrp.AssetAC AND FaGrp.AssetAC IS NOT NULL " & vbCrLf
  lsSql = lsSql & ") AssetGroup ON AssetGroup.Asset_Group = Asset_Summary.Asset_Group" & vbCrLf
  lsSql = lsSql & "WHERE NOT (Asset_Summary.Asset_StartPeriod = 0 " & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Asset_Plus, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Asset_Minus, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Asset_EndPeriod, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "AND ROUND(Asset_Summary.Depreciation_StartPeriod, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Depreciation_Plus, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Depreciation_Minus, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
  lsSql = lsSql & "AND ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "AND ROUND(Asset_Summary.Depreciation_EndPeriod, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "AND ROUND(Asset_Summary.Asset_NetValue,@DefaultCurrencyDecimalNumber) = 0)" & vbCrLf
  lsSql = lsSql & ")" & vbCrLf
  lsSql = lsSql & "/* Filter on purchase dates */" & vbCrLf
  lsSql = lsSql & "AND " & vbCrLf
  lsSql = lsSql & "(CASE " & vbCrLf
  lsSql = lsSql & "  WHEN @PurchaseDateAll = 1 THEN 1 " & vbCrLf
  lsSql = lsSql & "  WHEN @PurchaseDateAll = 0 AND Asset.Asset_Date >= @PurchaseDateFrom AND Asset.Asset_Date <= @PurchaseDateTo THEN 1" & vbCrLf
  lsSql = lsSql & "  ELSE 0" & vbCrLf
  lsSql = lsSql & "END = 1)" & vbCrLf
  lsSql = lsSql & "/* Filter on asset GL accounts BS */" & vbCrLf
  lsSql = lsSql & "AND " & vbCrLf
  lsSql = lsSql & "(CASE " & vbCrLf
  lsSql = lsSql & "  WHEN @GLAccountsAll = 1 THEN 1 " & vbCrLf
  lsSql = lsSql & "  WHEN @GLAccountsAll = 0 AND Assetgroup.Asset_GLAccount_BS_Code >= @GLAccountsFrom AND Assetgroup.Asset_GLAccount_BS_Code <= @GLAccountsTo THEN 1" & vbCrLf
  lsSql = lsSql & "  ELSE 0" & vbCrLf
  lsSql = lsSql & "END = 1)" & vbCrLf
  lsSql = lsSql & "/* Filter on asset groups */" & vbCrLf
  lsSql = lsSql & "AND " & vbCrLf
  lsSql = lsSql & "(CASE " & vbCrLf
  lsSql = lsSql & "  WHEN @AssetGroupAll = 1 THEN 1 " & vbCrLf
  lsSql = lsSql & "  WHEN @AssetGroupAll = 0 AND Assetgroup.Asset_Group >= @AssetGroupFrom AND Assetgroup.Asset_Group <= @AssetGroupTo THEN 1" & vbCrLf
  lsSql = lsSql & "  ELSE 0" & vbCrLf
  lsSql = lsSql & "END = 1)" & vbCrLf
  lsSql = lsSql & "/* Filter on asset codes */" & vbCrLf
  lsSql = lsSql & "AND " & vbCrLf
  lsSql = lsSql & "(CASE " & vbCrLf
  lsSql = lsSql & "  WHEN @AssetCodeAll = 1 THEN 1 " & vbCrLf
  lsSql = lsSql & "  WHEN @AssetCodeAll = 0 AND Asset.Asset_Reference >= @AssetCodeFrom AND Asset.Asset_Reference <= @AssetCodeTo THEN 1" & vbCrLf
  lsSql = lsSql & "  ELSE 0" & vbCrLf
  lsSql = lsSql & "END = 1)" & vbCrLf
'  lsSql = lsSql & "ORDER BY CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, CATEGORY5, GL, " & vbCrLf
'  lsSql = lsSql & "CASE @ShowOrder" & vbCrLf
'  lsSql = lsSql & "  WHEN 1 THEN Asset.Asset_Reference" & vbCrLf
'  lsSql = lsSql & "  ELSE Asset.FinancialYear" & vbCrLf
'  lsSql = lsSql & "END," & vbCrLf
'  lsSql = lsSql & "CASE @ShowOrder" & vbCrLf
'  lsSql = lsSql & "  WHEN 1 THEN Asset.FinancialYear" & vbCrLf
'  lsSql = lsSql & "  ELSE Asset.Asset_Reference" & vbCrLf
'  lsSql = lsSql & "END " & vbCrLf
  lsSql = lsSql & ") Q " & vbCrLf
    
  SqlStatement = lsSql
  
End Property

Sub GenerateSQLQuery(sWorksheet As String)
  On Error GoTo Failed
  Dim lsSql As String
  Dim ldtmStart As Date
  Dim lstrStartDate As String
  Dim lstrTrajectStartDate As String
  Dim ldtmEnd As Date
  Dim lstrEndDate As String
  Dim lstrTrajectEndDate As String
  Dim lintDepreciationSimulation As Integer
  Dim lstrBudget As String
  Dim lstrTypeDatum As String
  Dim loDB As esl.Database
  Dim loTransaction As esl.EDOTransaction
  Dim loCurrencyCalculator As ECurrency.CurrencyCalculator: Set loCurrencyCalculator = goCompany.CurrencyCalculator
  
  If Not TrajectDate_All Then
    'Start trajectdate
    ldtmStart = DateSerial(VBA.Year(TrajectDate_From), VBA.Month(TrajectDate_From), VBA.Day(TrajectDate_From))
    lstrTrajectStartDate = sqlDate(ldtmStart)
    'End trajectdate
    ldtmEnd = DateSerial(VBA.Year(TrajectDate_To), VBA.Month(TrajectDate_To), VBA.Day(TrajectDate_To))
    lstrTrajectEndDate = sqlDate(ldtmEnd)
  End If
  
  'Start- & EndDate mutatie
  Select Case Traject
    Case "1"
      ldtmStart = DateSerial(YearFrom, MonthFrom, 1)
      lstrStartDate = sqlDate(ldtmStart)
      ldtmEnd = DateSerial(YearTo, MonthTo + 1, 1 - 1)
      lstrEndDate = sqlDate(ldtmEnd)
    Case "2"
      ldtmStart = DateSerial(VBA.Year(DateFrom), VBA.Month(DateFrom), VBA.Day(DateFrom))
      lstrStartDate = sqlDate(ldtmStart)
      ldtmEnd = DateSerial(VBA.Year(DateTo), VBA.Month(DateTo), VBA.Day(DateTo))
      lstrEndDate = sqlDate(ldtmEnd)
    Case "3"
      Dim lsqlQuery As EDL.EdlQuery
      Dim connect As EDL.EdlConnection
      Set connect = goCompany
      Set lsqlQuery = connect.OpenQuery("SELECT MIN(bgdatum) AS StartDate,MAX(eddatum) AS EndDate,bkjrcode As Code " & _
      "FROM perdat WHERE bkjrcode = '" & Trim(FinYear) & "' GROUP BY bkjrcode", edlForwardOnly, edlReadOnly, 0)
      Set connect = Nothing
      If Not lsqlQuery.EOF Then
          ldtmStart = lsqlQuery.Date("StartDate")
          lstrStartDate = sqlDate(ldtmStart)
          ldtmEnd = lsqlQuery.Date("EndDate")
          lstrEndDate = sqlDate(ldtmEnd)
      End If
    Case Else
      lstrStartDate = sqlDate(DateSerial(1950, 1, 1))
      lstrEndDate = sqlDate(DateSerial(2050, 12, 31))
  End Select
  
  'Depr.Simulation + Method
  If Filter = "1" Then
    lintDepreciationSimulation = 0
    lstrBudget = ""
  Else
    lintDepreciationSimulation = 1
    Select Case Filter
      Case "2"  ' Primary
        lstrBudget = "MRP"
      Case "3"  ' Primary (trial)
        lstrBudget = "ASSET_3"
      Case "4"  ' Secondary
        lstrBudget = "ASSET_2"
    End Select
  End If
      
  'Type datum
  Select Case Repdate
    Case 0
      lstrTypeDatum = "gbkmut.datum"
    Case 1
      lstrTypeDatum = "gbkmut.DocDate"
    Case Else
      lstrTypeDatum = "gbkmut.datum"
  End Select
  
'  Debug.Assert False
  
  'Create a unique tablename
  gstrUniqueLocation = GetUniqueLocation
  
  lsSql = SqlStatement
  
  If Not loCurrencyCalculator Is Nothing Then
    lsSql = Replace(lsSql, "@DefaultCurrencyDecimalNumber", loCurrencyCalculator.CurrencyAmountPrecision(loCurrencyCalculator.DefaultCurrency))
  Else
    lsSql = Replace(lsSql, "@DefaultCurrencyDecimalNumber", 2)
  End If
    
  lsSql = Replace(lsSql, "@DateFrom", lstrStartDate)
  lsSql = Replace(lsSql, "@DateTo", lstrEndDate)
  lsSql = Replace(lsSql, "@BudgetSimulation", lintDepreciationSimulation)
  lsSql = Replace(lsSql, "@BudgetVersion", "'" & lstrBudget & "'")
  lsSql = Replace(lsSql, "@DocDate", Repdate)
  ' Task - 09.096.621 - Start
  'lsSql = Replace(lsSql, "@Ratio", Coef1 / Coef2)
  lsSql = Replace(lsSql, "@Ratio", Replace(CStr(Coef1 / Coef2), Format(0.1, "."), "."))
  ' Task - 09.096.621 - End
  'Date
  If TrajectDate_All Then
    lsSql = Replace(lsSql, "@PurchaseDateAll", 1)
    lsSql = Replace(lsSql, "@PurchaseDateFrom", "{d '1800-01-01'}")
    lsSql = Replace(lsSql, "@PurchaseDateTo", "{d '2299-12-31'}")
  Else
    lsSql = Replace(lsSql, "@PurchaseDateAll", 0)
    lsSql = Replace(lsSql, "@PurchaseDateFrom", lstrTrajectStartDate)
    lsSql = Replace(lsSql, "@PurchaseDateTo", lstrTrajectEndDate)
  End If
  'GL
  If GL_All Then
    lsSql = Replace(lsSql, "@GLAccountsAll", 1)
    lsSql = Replace(lsSql, "@GLAccountsFrom", "''")
    lsSql = Replace(lsSql, "@GLAccountsTo", "''")
  Else
    lsSql = Replace(lsSql, "@GLAccountsAll", 0)
    lsSql = Replace(lsSql, "@GLAccountsFrom", "'" & GLaccount_From & "'")
    lsSql = Replace(lsSql, "@GLAccountsTo", "'" & GLaccount_To & "'")
  End If
  'AssetGroup
  If Assetgroup_All Then
    lsSql = Replace(lsSql, "@AssetGroupAll", 1)
    lsSql = Replace(lsSql, "@AssetGroupFrom", "''")
    lsSql = Replace(lsSql, "@AssetGroupTo", "''")
  Else
    lsSql = Replace(lsSql, "@AssetGroupAll", 0)
    lsSql = Replace(lsSql, "@AssetGroupFrom", "'" & Assetgroup_From & "'")
    lsSql = Replace(lsSql, "@AssetGroupTo", "'" & Assetgroup_To & "'")
  End If
  'AssetCode
  If Assetcode_All Then
    lsSql = Replace(lsSql, "@AssetCodeAll", 1)
    lsSql = Replace(lsSql, "@AssetCodeFrom", "''")
    lsSql = Replace(lsSql, "@AssetCodeTo", "''")
  Else
    lsSql = Replace(lsSql, "@AssetCodeAll", 0)
    lsSql = Replace(lsSql, "@AssetCodeFrom", "'" & Assetcode_From & "'")
    lsSql = Replace(lsSql, "@AssetCodeTo", "'" & Assetcode_To & "'")
  End If
  If ShowInfo(9) = 0 Then
    lsSql = Replace(lsSql, "@ShowDescription", 0)
  Else
    lsSql = Replace(lsSql, "@ShowDescription", 1)
  End If
  
  Select Case lSortBy()
  Case SortBy_Reference
    lsSql = Replace(lsSql, "@ShowOrder", "1")
  Case SortBy_FinancialYear
    lsSql = Replace(lsSql, "@ShowOrder", "2")
  End Select
  
  '--------
  'Language
  '--------
  lsSql = Replace(lsSql, "oms25_0", "oms25_" & goCompany.MultiLang.DefaultIndex)
  lsSql = Replace(lsSql, "Description_0", "Description_" & goCompany.MultiLang.DefaultIndex)

  
   'Open connection
  Dim loEdlConnection As EDL.EdlConnection
  Set loEdlConnection = goCompany
  
 ' Open the explicit transaction
  Set loDB = goCompany
  Set loTransaction = loDB.OpenTransaction
  
  'Execute the sqlstatement
  loEdlConnection.Exec lsSql
  
  ' commit the transaction
  loTransaction.Commit
  
  'Set nothing
  Set loDB = Nothing
  Set loTransaction = Nothing
    
  lsSql = ""
  lsSql = lsSql & "SELECT * FROM " & gstrUniqueLocation & " " & vbCrLf
  lsSql = lsSql & "ORDER BY CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, CATEGORY5, GL, " & vbCrLf
  lsSql = lsSql & "CASE @ShowOrder" & vbCrLf
  lsSql = lsSql & "  WHEN 1 THEN Asset_Reference" & vbCrLf
  lsSql = lsSql & "  ELSE FinancialYear" & vbCrLf
  lsSql = lsSql & "END," & vbCrLf
  lsSql = lsSql & "CASE @ShowOrder" & vbCrLf
  lsSql = lsSql & "  WHEN 1 THEN FinancialYear" & vbCrLf
  lsSql = lsSql & "  ELSE Asset_Reference" & vbCrLf
  lsSql = lsSql & "END " & vbCrLf
  
  Select Case lSortBy()
  Case SortBy_Reference
    lsSql = Replace(lsSql, "@ShowOrder", "1")
  Case SortBy_FinancialYear
    lsSql = Replace(lsSql, "@ShowOrder", "2")
  End Select
  
  'Assign SQL query
  ThisWorkbook.Names("FACARD_Query").RefersToRange.Value = lsSql
  
  Exit Sub
    
Failed:
    App.Message 0, Translate(0, "Error occurred while creating SQL query!"), Translate(32457, "Asset year end totals"), edlgInfo
End Sub


'Function Lit(ByVal s) As String
'    'Can't get EDL connection, so DIY
'    Lit = "'" & Replace(s, "'", "''") & "'"
'End Function

Private Function sqlDate(ByVal pDate As Date) As String
    'Format a date so it that can be used for international SQL versions
    'A date should use ODBC datestamp format
    '{d'yyyy-mm-dd}
    'example {d'2002-10-06}
    
    sqlDate = "{d '" 'use ODBC date escape sequence
    sqlDate = sqlDate & PadL(VBA.Year(pDate), 4, "0") & "-" 'Year part
    sqlDate = sqlDate & PadL(Month(pDate), 2, "0") & "-" 'Month part
    sqlDate = sqlDate & PadL(Day(pDate), 2, "0") 'Day part
    sqlDate = sqlDate & "'}"
End Function

Private Function PadL(ByVal pString As String, ByVal pLen As Long, ByVal pCharacter As String) As String

    Dim lsPad As String
    Dim llCount As Long
    
    lsPad = ""
    
    For llCount = 1 To pLen
        lsPad = lsPad + pCharacter
    Next
    
    PadL = Right(lsPad & LTrim(pString), pLen)

End Function

Private Sub InitDataSheetFA(pApp As esl.Application)
  On Error GoTo fout
  With Worksheets("Sheet1")
    'Fill headers in DatasheetFA
    .Range("A1").Value = "Inv_Nr"                 'Translate(6057, "Serial number")
    .Range("B1").Value = "Inv_Year"               'Translate(1193, "Financial Year")
    .Range("C1").Value = "Header"                 'Translate(2563, "Item group code")
    .Range("D1").Value = "Descr_Header"           'Translate(11728, "Item group description")
    .Range("E1").Value = "SubHeader"              'Translate(1102, "Item code")
    .Range("F1").Value = "Descr_SubHeader"        'Translate(10883, "Item description")
    .Range("G1").Value = "Account"                'Translate(31660, "G/L account")
    .Range("H1").Value = "Descr_Account"          'Translate(11468, "General ledger account description")
    .Range("I1").Value = "Purch_Date"             'Translate(4411, "Purchase date")
    .Range("J1").Value = "Invoice_Nr"             'Translate(1053, "Invoice number")
    .Range("K1").Value = "Supplier"               'Translate(8504, "Creditor")
    .Range("L1").Value = "Descr_Inv"              'Translate(6562, "Asset") & " " & Translate(4243, "Description")
    .Range("M1").Value = "Descr_Art"              'Translate(6562, "Asset") & " " & Translate(4243, "Description")
    .Range("N1").Value = "Depr_Methode"           'Translate(6393, "Depreciation method")
    .Range("O1").Value = "Depr_Perc"              'Translate(31931, "Depreciation percentage")
    .Range("P1").Value = "Dur_Count"
    .Range("Q1").Value = "Dur_Denom"
    .Range("R1").Value = "Inv_Ded"                'Translate(15816, "Investment deduction")
    .Range("S1").Value = "Purch_Previous"
    .Range("T1").Value = "Purch_Sales"
    .Range("U1").Value = "Purch_Transfer"
    .Range("V1").Value = "Purch_New"
    .Range("W1").Value = "Purch_import"
    .Range("X1").Value = "Depr_Previous"
    .Range("Y1").Value = "Depr_Sales"
    .Range("Z1").Value = "Depr_Transfer"
    .Range("AA1").Value = "Depr_New"
    .Range("AB1").Value = "Depr_import"
    .Range("AC1").Value = "Sales_Inv"
    .Range("AD1").Value = "Sales_Line"
    .Range("AE1").Value = "Sales_Date"
    .Range("AF1").Value = "Sales_Amount"
    .Range("AG1").Value = "Sales_Descr"
    .Range("AH1").Value = "Pro_Rata"
    .Range("AI1").Value = "DUR_USE"
    .Range("AJ1").Value = "DUR_DEPR"
    'Localisation other markets - 15.008.739 - Start
    .Range("AK1").Value = "AJ"
    'Localisation other markets - 15.008.739 - End
  End With
  Exit Sub
fout:
  MsgBox Err & " " & Err.Description
End Sub

Private Sub FillDataSheetFA(pApp As esl.Application)
    'Dim
    Dim Query As EDL.EdlQuery
    Dim lbProrata As Boolean
    
    'Build recordset
    Set Query = OpenQuery
    
    If (Query.EOF) Then
        'No data - back out!!!
        Call MsgBox(Translate(6450, "No data found."), vbInformation)
        Exit Sub
    End If

    With Worksheets("Sheet1")
        Dim llngTeller As Long
        llngTeller = 2
        Do While (Not Query.EOF)
            .Range("A" & llngTeller).Value = "'" & Query.Char("SerialNumber")
            .Range("B" & llngTeller).Value = Query.Var("Inv_Year")
            .Range("C" & llngTeller).Value = Query.Var("Header")
            .Range("D" & llngTeller).Value = Query.Var("Descr_Header")
            .Range("E" & llngTeller).Value = Query.Var("SubHeader")
            .Range("F" & llngTeller).Value = Query.Var("Descr_SubHeader")
            .Range("G" & llngTeller).Value = Query.Var("GLAccount")
            .Range("H" & llngTeller).Value = Query.Var("GLAccount_Descr")
            .Range("I" & llngTeller).Value = Query.Var("PurchaseDate")
            .Range("J" & llngTeller).Value = Query.Var("Invoice_Nr")
            .Range("K" & llngTeller).Value = Query.Var("Supplier")
            .Range("L" & llngTeller).Value = "'" & Query.Char("Descr_Inv")
            .Range("M" & llngTeller).Value = "'" & Query.Char("Descr_Art")
            .Range("N" & llngTeller).Value = Query.Var("Depr_Methode")
            .Range("O" & llngTeller).Value = Query.Var("Depr_Perc")
            .Range("P" & llngTeller).Value = Query.Var("Dur_Count")
            .Range("Q" & llngTeller).Value = Query.Var("Dur_Denom")
            .Range("R" & llngTeller).Value = Query.Var("Inv_Ded")
            .Range("S" & llngTeller).Value = Query.Var("Purc_Prev")
            .Range("T" & llngTeller).Value = Query.Var("Purc_Sales")
            .Range("U" & llngTeller).Value = Query.Var("Purc_Transfer")
            .Range("V" & llngTeller).Value = Query.Var("Purc_New")
            .Range("W" & llngTeller).Value = Query.Var("Purc_Import")
            .Range("X" & llngTeller).Value = Query.Var("Depr_Previous")
            .Range("Y" & llngTeller).Value = Query.Var("Depr_Sales")
            .Range("Z" & llngTeller).Value = Query.Var("Depr_Transfert")
            .Range("AA" & llngTeller).Value = Query.Var("Depr_New")
            .Range("AB" & llngTeller).Value = Query.Var("Depr_Import")
            .Range("AC" & llngTeller).Value = Query.Var("Asset_SalesEntryNumber")
            .Range("AD" & llngTeller).Value = Query.Var("Sales_Line")
            .Range("AE" & llngTeller).Value = Query.Var("Asset_SalesDocDate")
            .Range("AF" & llngTeller).Value = Query.Var("Asset_SalesAmount")
            .Range("AG" & llngTeller).Value = Query.Var("Asset_SalesDescr")
            '.Range("AH" & llngTeller).Value = Query.Var("")
            .Range("AI" & llngTeller).Value = Query.Var("Asset_Numyears")
            .Range("AJ" & llngTeller).Value = Query.Var("Asset_Numyears_Depr")
            'Localisation other markets - 15.008.739 - Start
            .Range("AK" & llngTeller).Value = Query.Var("Asset_AJ")
            'Localisation other markets - 15.008.739 - End
            lbProrata = lbProrata Or (Query.Var("Pro_Rata") = "Y")
            
            llngTeller = llngTeller + 1
            Query.FetchNext
        Loop
    
        If lbProrata Then
          .Range("Ah2").Value = "Y"
        Else
          .Range("Ah2").Value = "N"
        End If
    
        'Format
        .UsedRange.Rows(1).Font.Bold = True
        .UsedRange.Columns.AutoFit
        
        'Change namedrange
        On Error Resume Next 'We don't care whether the name existed or not.
        .Parent.Names("Analytical.Range").Delete
        On Error GoTo 0 'We do care that the name can be created.
        .Parent.Names.Add "Analytical.Range", .UsedRange
    End With
    
End Sub

Private Property Get DropProcedureLDBEAssetMovements(ByVal psProcedureName As String) As String
  On Error GoTo Failed
  Dim lsSql As String
  
  lsSql = "IF EXISTS (SELECT name FROM sysobjects WHERE name = 'LDBEAssetMovements' and type = 'P')" & vbCrLf
  lsSql = lsSql & "  DROP PROCEDURE dbo.LDBEAssetMovements"
  
  lsSql = Replace(lsSql, "LDBEAssetMovements", psProcedureName)

  DropProcedureLDBEAssetMovements = lsSql

  Exit Property
Failed:
  App.Message 0, "DropProcedureLDBEAssetMovements", Translate(32457, "Asset year end totals"), edlgInfo
End Property

Private Property Get LDBEAssetMovementsProrata(palrsSetting() As String, lblnData As Boolean) As String
  On Error GoTo Failed
  Dim lsSql As String
  Dim i As Long
  '******************************************************************************************
  '* Fill temporary table with data retrieved from the setting("Deprcalc_Prorata_allround") *
  '******************************************************************************************
  lsSql = "/* Fill table #prorata */" & vbCrLf
  If lblnData Then
    For i = LBound(palrsSetting) To UBound(palrsSetting)
      lsSql = lsSql & "  INSERT INTO #prorata(bkjrcode, prorata) VALUES (" & Left(Trim("" & palrsSetting(i)), Len(Trim("" & palrsSetting(i))) - 2) & "," & Right(Trim("" & palrsSetting(i)), 1) & ")" & vbCrLf
    Next i
  End If

  LDBEAssetMovementsProrata = lsSql
  Exit Property
Failed:
  App.Message 0, "LDBEAssetMovementsProrata", Translate(32457, "Asset year end totals"), edlgInfo
End Property

Private Property Get LDBEAssetMovementsCriteria() As String
  On Error GoTo Failed
  Dim lsSql As String
  Dim ldtmStart As Date
  Dim lstrStartDate As String
  Dim ldtmEnd As Date
  Dim lstrEndDate As String
  Dim lstrTrajectStartDate As String
  Dim lstrTrajectEndDate As String
  Dim lintDepreciationSimulation As Integer
  Dim lstrBudget As String
  Dim lintTypeDatum As Integer
  Dim loCurrencyCalculator As ECurrency.CurrencyCalculator: Set loCurrencyCalculator = goCompany.CurrencyCalculator
  
  If Not TrajectDate_All Then
    'Start trajectdate
    ldtmStart = DateSerial(VBA.Year(TrajectDate_From), VBA.Month(TrajectDate_From), VBA.Day(TrajectDate_From))
    lstrTrajectStartDate = sqlDate(ldtmStart)
    'End trajectdate
    ldtmEnd = DateSerial(VBA.Year(TrajectDate_To), VBA.Month(TrajectDate_To), VBA.Day(TrajectDate_To))
    lstrTrajectEndDate = sqlDate(ldtmEnd)
  End If
  
  'Start- & EndDate mutatie
  Select Case Traject
    Case "1"
      ldtmStart = DateSerial(YearFrom, MonthFrom, 1)
      lstrStartDate = sqlDate(ldtmStart)
      ldtmEnd = DateSerial(YearTo, MonthTo + 1, 1 - 1)
      lstrEndDate = sqlDate(ldtmEnd)
    Case "2"
      ldtmStart = DateSerial(VBA.Year(DateFrom), VBA.Month(DateFrom), VBA.Day(DateFrom))
      lstrStartDate = sqlDate(ldtmStart)
      ldtmEnd = DateSerial(VBA.Year(DateTo), VBA.Month(DateTo), VBA.Day(DateTo))
      lstrEndDate = sqlDate(ldtmEnd)
    Case "3"
      Dim lsqlQuery As EDL.EdlQuery
      Dim connect As EDL.EdlConnection
      Set connect = goCompany
      Set lsqlQuery = connect.OpenQuery("SELECT MIN(bgdatum) AS StartDate,MAX(eddatum) AS EndDate,bkjrcode As Code " & _
      "FROM perdat WHERE bkjrcode = '" & Trim(FinYear) & "' GROUP BY bkjrcode", edlForwardOnly, edlReadOnly, 0)
      Set connect = Nothing
      If Not lsqlQuery.EOF Then
          ldtmStart = lsqlQuery.Date("StartDate")
          lstrStartDate = sqlDate(ldtmStart)
          ldtmEnd = lsqlQuery.Date("EndDate")
          lstrEndDate = sqlDate(ldtmEnd)
      End If
    Case Else
      lstrStartDate = sqlDate(DateSerial(1950, 1, 1))
      lstrEndDate = sqlDate(DateSerial(2050, 12, 31))
  End Select
  
  'Depr.Simulation + Method
  If Filter = "1" Then
    lintDepreciationSimulation = 0
    lstrBudget = ""
  Else
    lintDepreciationSimulation = 1
    Select Case Filter
      Case "2"
        lstrBudget = "MRP"
      Case "3"
        lstrBudget = "ASSET_3"
      Case "4"
        lstrBudget = "ASSET_2"
    End Select
  End If
      
  'Type datum
  If Repdate = 1 Then lintTypeDatum = 1 Else lintTypeDatum = 0
  
  '************
  '* Criteria *
  '************
  lsSql = lsSql & "  /* Initialization */" & vbCrLf
  lsSql = lsSql & Replace("  SET @DateFrom = [@DateFrom]", "[@DateFrom]", lstrStartDate) & vbCrLf
  lsSql = lsSql & Replace("  SET @DateTo = [@DateTo]", "[@DateTo]", lstrEndDate) & vbCrLf
  lsSql = lsSql & Replace("  SET @BudgetSimulation = [@BudgetSimulation]", "[@BudgetSimulation]", lintDepreciationSimulation) & vbCrLf
  lsSql = lsSql & Replace("  SET @BudgetVersion = '[@BudgetVersion]'", "[@BudgetVersion]", lstrBudget) & vbCrLf
  lsSql = lsSql & Replace("  SET @DocDate = [@DocDate]", "[@DocDate]", lintTypeDatum) & vbCrLf
  ' Task - 09.096.621 - Start
  'lsSql = lsSql & Replace("  SET @Ratio = [@Ratio]", "[@Ratio]", Coef1 / Coef2) & vbCrLf
  lsSql = lsSql & Replace("  SET @Ratio = [@Ratio]", "[@Ratio]", Replace(CStr(Coef1 / Coef2), Format(0.1, "."), ".")) & vbCrLf
  ' Task - 09.096.621 - End
  If TrajectDate_All Then
    lsSql = lsSql & Replace("  SET @PurchaseDateAll = [@PurchaseDateAll]", "[@PurchaseDateAll]", "1") & vbCrLf
    lsSql = lsSql & Replace("  SET @PurchaseDateFrom = [@PurchaseDateFrom]", "[@PurchaseDateFrom]", "{d '1870-01-01'}") & vbCrLf
    lsSql = lsSql & Replace("  SET @PurchaseDateTo = [@PurchaseDateTo]", "[@PurchaseDateTo]", "{d '1870-01-01'}") & vbCrLf
  Else
    lsSql = lsSql & Replace("  SET @PurchaseDateAll = [@PurchaseDateAll]", "[@PurchaseDateAll]", "0") & vbCrLf
    lsSql = lsSql & Replace("  SET @PurchaseDateFrom = [@PurchaseDateFrom]", "[@PurchaseDateFrom]", lstrTrajectStartDate) & vbCrLf
    lsSql = lsSql & Replace("  SET @PurchaseDateTo = [@PurchaseDateTo]", "[@PurchaseDateTo]", lstrTrajectEndDate) & vbCrLf
  End If
  'GLAccount
  If GL_All Then
    lsSql = lsSql & Replace("  SET @GLAccountsAll = [@GLAccountsAll]", "[@GLAccountsAll]", "1") & vbCrLf
    lsSql = lsSql & "  SET @GLAccountsFrom = ''" & vbCrLf
    lsSql = lsSql & "  SET @GLAccountsTo = ''" & vbCrLf
  Else
    lsSql = lsSql & Replace("  SET @GLAccountsAll = [@GLAccountsAll]", "[@GLAccountsAll]", "0") & vbCrLf
    lsSql = lsSql & Replace("  SET @GLAccountsFrom = '[@GLAccountsFrom]'", "[@GLAccountsFrom]", GLaccount_From) & vbCrLf
    lsSql = lsSql & Replace("  SET @GLAccountsTo = '[@GLAccountsTo]'", "[@GLAccountsTo]", GLaccount_To) & vbCrLf
  End If
  'AssetGroup
  If Assetgroup_All Then
    lsSql = lsSql & Replace("  SET @AssetGroupAll = [@AssetGroupAll]", "[@AssetGroupAll]", 1) & vbCrLf
    lsSql = lsSql & "  SET @AssetGroupFrom = ''" & vbCrLf
    lsSql = lsSql & "  SET @AssetGroupTo = ''" & vbCrLf
  Else
    lsSql = lsSql & Replace("  SET @AssetGroupAll = [@AssetGroupAll]", "[@AssetGroupAll]", 0) & vbCrLf
    lsSql = lsSql & Replace("  SET @AssetGroupFrom = '[@AssetGroupFrom]'", "[@AssetGroupFrom]", Assetgroup_From) & vbCrLf
    lsSql = lsSql & Replace("  SET @AssetGroupTo = '[@AssetGroupTo]'", "[@AssetGroupTo]", Assetgroup_To) & vbCrLf
  End If
  'AssetCode
  If Assetcode_All Then
    lsSql = lsSql & Replace("  SET @AssetCodeAll = [@AssetCodeAll]", "[@AssetCodeAll]", 1) & vbCrLf
    lsSql = lsSql & "  SET @AssetCodeFrom = ''" & vbCrLf
    lsSql = lsSql & "  SET @AssetCodeTo = ''" & vbCrLf
  Else
    lsSql = lsSql & Replace("  SET @AssetCodeAll = [@AssetCodeAll]", "[@AssetCodeAll]", 0) & vbCrLf
    lsSql = lsSql & Replace("  SET @AssetCodeFrom = '[@AssetCodeFrom]'", "[@AssetCodeFrom]", Assetcode_From) & vbCrLf
    lsSql = lsSql & Replace("  SET @AssetCodeTo = '[@AssetCodeTo]'", "[@AssetCodeTo]", Assetcode_To) & vbCrLf
  End If
  
  lsSql = lsSql & "  SET @SalesAccount = '700%'" & vbCrLf
  
  If Not loCurrencyCalculator Is Nothing Then
    lsSql = lsSql & Replace("  SET @DefaultCurrencyDecimalNumber = [DefaultCurrencyDecimalNumber]", "[DefaultCurrencyDecimalNumber]", loCurrencyCalculator.CurrencyAmountPrecision(loCurrencyCalculator.DefaultCurrency))
  Else
    lsSql = lsSql & Replace("  SET @DefaultCurrencyDecimalNumber = [DefaultCurrencyDecimalNumber]", "[DefaultCurrencyDecimalNumber]", 2)
  End If

  LDBEAssetMovementsCriteria = lsSql
  Exit Property
Failed:
  App.Message 0, "LDBEAssetMovementsCriteria", Translate(32457, "Asset year end totals"), edlgInfo
End Property

Private Property Get CreateProcedureLDBEAssetMovements(ByVal psProcedureName As String, palrsSetting() As String, lblnData As Boolean) As String
  On Error GoTo Failed
  Dim lsSql As String
  Dim i As Integer
  i = 0
 
  lsSql = lsSql & "CREATE PROCEDURE dbo.LDBEAssetMovements" & vbCrLf
  lsSql = lsSql & "AS" & vbCrLf
  
  lsSql = lsSql & "  DECLARE @DateFrom DATETIME  " & vbCrLf
  lsSql = lsSql & "  DECLARE @DateTo DATETIME  " & vbCrLf
  lsSql = lsSql & "  DECLARE @BudgetSimulation TINYINT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @BudgetVersion CHAR(8)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @DocDate BIT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @Ratio FLOAT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @PurchaseDateAll TINYINT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @PurchaseDateFrom DATETIME  " & vbCrLf
  lsSql = lsSql & "  DECLARE @PurchaseDateTo DATETIME  " & vbCrLf
  lsSql = lsSql & "  DECLARE @GLAccountsAll TINYINT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @GLAccountsFrom CHAR(9)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @GLAccountsTo CHAR(9)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetGroupAll TINYINT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetGroupFrom CHAR(20)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetGroupTo CHAR(20)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetCodeAll TINYINT  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetCodeFrom CHAR(30)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetCodeTo CHAR(30)  " & vbCrLf
  lsSql = lsSql & "  DECLARE @SalesAccount CHAR(4) " & vbCrLf
  lsSql = lsSql & "  DECLARE @DefaultCurrencyDecimalNumber INT " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  SET @DateFrom = {d '2003-07-01'} " & vbCrLf
  lsSql = lsSql & "  SET @DateTo = {d '2004-06-30'} " & vbCrLf
  lsSql = lsSql & "  SET @BudgetSimulation = 0 " & vbCrLf
  lsSql = lsSql & "  SET @BudgetVersion = 'MRP' " & vbCrLf
  lsSql = lsSql & "  SET @DocDate = 1 " & vbCrLf
  lsSql = lsSql & "  SET @Ratio = 1 " & vbCrLf
  lsSql = lsSql & "  SET @PurchaseDateAll = 1 " & vbCrLf
  lsSql = lsSql & "  SET @PurchaseDateFrom = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "  SET @PurchaseDateTo = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "  SET @GLAccountsAll = 1 " & vbCrLf
  lsSql = lsSql & "  SET @GLAccountsFrom = '' " & vbCrLf
  lsSql = lsSql & "  SET @GLAccountsTo = '' " & vbCrLf
  lsSql = lsSql & "  SET @AssetGroupAll = 1 " & vbCrLf
  lsSql = lsSql & "  SET @AssetGroupFrom = '' " & vbCrLf
  lsSql = lsSql & "  SET @AssetGroupTo = '' " & vbCrLf
  lsSql = lsSql & "  SET @AssetCodeAll = 1 " & vbCrLf
  lsSql = lsSql & "  SET @AssetCodeFrom = '' " & vbCrLf
  lsSql = lsSql & "  SET @AssetCodeTo = '' " & vbCrLf
  lsSql = lsSql & "  SET @SalesAccount = '700%' " & vbCrLf
  lsSql = lsSql & "  SET @DefaultCurrencyDecimalNumber = 2 " & vbCrLf
  lsSql = lsSql & "    /* Initialization */ " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  IF @DateFrom = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "    SELECT @DateFrom = MIN(bgdatum) FROM perdat " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  IF @DateTo = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "    SELECT @DateTo = MAX(eddatum) FROM perdat " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  IF @PurchaseDateFrom = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "    SELECT @PurchaseDateFrom = MIN(bgdatum) FROM perdat " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  IF @PurchaseDateTo = {d '1870-01-01'} " & vbCrLf
  lsSql = lsSql & "    SELECT @PurchaseDateTo = MAX(eddatum) FROM perdat " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  PRINT '' " & vbCrLf
  lsSql = lsSql & "  PRINT '*==================================================================*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* CreateViewLDBEAssetMovements                                     *' " & vbCrLf
  lsSql = lsSql & "  PRINT '*==================================================================*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @DateFrom         : ' + LEFT(CONVERT(CHAR(10), @DateFrom, 103) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @DateTo           : ' + LEFT(CONVERT(CHAR(10), @DateTo, 103) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @BudgetSimulation : ' + LEFT((CASE @BudgetSimulation WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @BudgetVersion    : ' + LEFT(@BudgetVersion + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @DocDate          : ' + LEFT((CASE @DocDate WHEN 0 THEN 'datum' WHEN 1 THEN 'DocDate' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @Ratio            : ' + LEFT(CAST(@Ratio AS CHAR(10)) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @PurchaseDateAll  : ' + LEFT((CASE @PurchaseDateAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @PurchaseDateFrom : ' + LEFT(CONVERT(CHAR(10), @PurchaseDateFrom, 103) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @PurchaseDateTo   : ' + LEFT(CONVERT(CHAR(10), @PurchaseDateTo, 103) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @GLAccountsAll    : ' + LEFT((CASE @GLAccountsAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @GLAccountsFrom   : ' + LEFT(@GLAccountsFrom + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @GLAccountsTo     : ' + LEFT(@GLAccountsTo + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetGroupAll    : ' + LEFT((CASE @AssetGroupAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetGroupFrom   : ' + LEFT(@AssetGroupFrom + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetGroupTo     : ' + LEFT(@AssetGroupTo + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetCodeAll     : ' + LEFT((CASE @AssetCodeAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetCodeFrom    : ' + LEFT(@AssetCodeFrom + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @AssetCodeTo      : ' + LEFT(@AssetCodeTo + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '* @SalesAccount      : ' + LEFT(@SalesAccount + SPACE(45), 45) + '*' " & vbCrLf
  lsSql = lsSql & "  PRINT '*==================================================================*' " & vbCrLf
  lsSql = lsSql & "   " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetCode AS CHAR(20) " & vbCrLf
  lsSql = lsSql & "  DECLARE @AssetAccount AS CHAR(9) " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  -- Create Temporary and fill it immediatly " & vbCrLf
  lsSql = lsSql & "  CREATE TABLE #prorata(bkjrcode SMALLINT, prorata TINYINT) " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  /* Fill table #prorata */ " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  /*----------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  /* Create tempory table for transactions solded */ " & vbCrLf
  lsSql = lsSql & "  /*----------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  -- Create Temporary Sold Transactions " & vbCrLf
  lsSql = lsSql & "  SELECT facode AS AssetCode, EntryGUId, docnumber, DocDate, CAST(bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl, oms25  " & vbCrLf
  lsSql = lsSql & "  INTO #AssetSoldEntryGUId  " & vbCrLf
  lsSql = lsSql & "  FROM gbkmut  " & vbCrLf
  lsSql = lsSql & "  WHERE 1 = 0 " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  -- Open cursor for Asset sold " & vbCrLf
  lsSql = lsSql & "  DECLARE AssetSold_Cursor CURSOR FOR  " & vbCrLf
  lsSql = lsSql & "    SELECT DISTINCT " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode,  " & vbCrLf
  lsSql = lsSql & "    FaGrp.AssetAC AS AssetAccount " & vbCrLf
  lsSql = lsSql & "    FROM ItemNumbers " & vbCrLf
  lsSql = lsSql & "    INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      assetgroup, " & vbCrLf
  lsSql = lsSql & "      AssetAC " & vbCrLf
  lsSql = lsSql & "      FROM FaGrp " & vbCrLf
  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup " & vbCrLf
  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F' " & vbCrLf
  lsSql = lsSql & "    AND ItemNumbers.Status = 'S' " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  OPEN AssetSold_Cursor " & vbCrLf
  lsSql = lsSql & "  FETCH NEXT FROM AssetSold_Cursor INTO @AssetCode, @AssetAccount " & vbCrLf
  lsSql = lsSql & "  WHILE @@FETCH_STATUS = 0 " & vbCrLf
  lsSql = lsSql & "  BEGIN " & vbCrLf
  lsSql = lsSql & "    -- Find the latest disposal entry guid which will be declared as sold transaction. " & vbCrLf
  lsSql = lsSql & "    -- AssetCode, EntryGUId, docnumber, DocDate, bdr_hfl, oms25  " & vbCrLf
  lsSql = lsSql & "    INSERT INTO #AssetSoldEntryGUId  " & vbCrLf
  lsSql = lsSql & "      SELECT TOP 1 gbkmut.facode AS AssetCode,  " & vbCrLf
  lsSql = lsSql & "      gbkmut.EntryGUId,  " & vbCrLf
  lsSql = lsSql & "      gbkmut.docnumber,  " & vbCrLf
  lsSql = lsSql & "      gbkmut.DocDate,  " & vbCrLf
  lsSql = lsSql & "      Sales.bdr_hfl,  " & vbCrLf
  lsSql = lsSql & "      gbkmut.oms25 " & vbCrLf
  lsSql = lsSql & "      FROM gbkmut  " & vbCrLf
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        SELECT EntryGUId, CAST(bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl  " & vbCrLf
  lsSql = lsSql & "        FROM gbkmut " & vbCrLf
  lsSql = lsSql & "        WHERE LTRIM(reknr) LIKE @SalesAccount  " & vbCrLf
  lsSql = lsSql & "      ) Sales ON Sales.EntryGUId = gbkmut.EntryGUId " & vbCrLf
  lsSql = lsSql & "      WHERE gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "      AND gbkmut.TransSubType = 'I'  " & vbCrLf
  lsSql = lsSql & "      AND gbkmut.FaCode = @AssetCode  " & vbCrLf
  lsSql = lsSql & "      AND gbkmut.reknr = @AssetAccount " & vbCrLf
  lsSql = lsSql & "      ORDER BY gbkmut.datum DESC " & vbCrLf
  lsSql = lsSql & "  " & vbCrLf
  lsSql = lsSql & "      IF @@ROWCOUNT = 0  " & vbCrLf
  lsSql = lsSql & "        INSERT INTO #AssetSoldEntryGUId   " & vbCrLf
  lsSql = lsSql & "          SELECT TOP 1 gbkmut.facode AS AssetCode,   " & vbCrLf
  lsSql = lsSql & "          gbkmut.EntryGUId,   " & vbCrLf
  lsSql = lsSql & "          gbkmut.docnumber,   " & vbCrLf
  lsSql = lsSql & "          gbkmut.DocDate,   " & vbCrLf
  lsSql = lsSql & "          - gbkmut.bdr_hfl,   " & vbCrLf
  lsSql = lsSql & "          gbkmut.oms25  " & vbCrLf
  lsSql = lsSql & "          FROM gbkmut   " & vbCrLf
  lsSql = lsSql & "          WHERE gbkmut.TransType IN ('N', 'C', 'P')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType = 'I'   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.FaCode = @AssetCode   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = @AssetAccount  " & vbCrLf
  lsSql = lsSql & "          ORDER BY gbkmut.datum DESC  " & vbCrLf
  lsSql = lsSql & "  " & vbCrLf
  lsSql = lsSql & "    FETCH NEXT FROM AssetSold_Cursor INTO @AssetCode, @AssetAccount " & vbCrLf
  lsSql = lsSql & "  END " & vbCrLf
  lsSql = lsSql & "  CLOSE AssetSold_Cursor " & vbCrLf
  lsSql = lsSql & "  DEALLOCATE AssetSold_Cursor " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  /*--------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  /* Create tempory table for transfered assets */ " & vbCrLf
  lsSql = lsSql & "  /*--------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  SELECT DISTINCT facode AS AssetCode, EntryGUId " & vbCrLf
  lsSql = lsSql & "  INTO #AssetTransferEntryGUId " & vbCrLf
  lsSql = lsSql & "  FROM gbkmut " & vbCrLf
  lsSql = lsSql & "  INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "    SELECT DISTINCT " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode,  " & vbCrLf
  lsSql = lsSql & "    FaGrp.AssetAC AS AssetAccount " & vbCrLf
  lsSql = lsSql & "    FROM ( " & vbCrLf
  lsSql = lsSql & "      SELECT  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Number,  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Classification,  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Status,  " & vbCrLf
  lsSql = lsSql & "      ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup " & vbCrLf
  lsSql = lsSql & "      FROM ItemNumbers " & vbCrLf
  lsSql = lsSql & "      LEFT JOIN ( " & vbCrLf
  lsSql = lsSql & "        -- Requery transfert history of the asset " & vbCrLf
  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.olddataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "        FROM fatran  " & vbCrLf
  lsSql = lsSql & "        WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "        UNION " & vbCrLf
  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.newdataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "        FROM fatran  " & vbCrLf
  lsSql = lsSql & "        WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "      ) fatran ON fatran.assetcode = ItemNumbers.Number " & vbCrLf
  lsSql = lsSql & "    ) ItemNumbers  " & vbCrLf
  lsSql = lsSql & "    INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      assetgroup, " & vbCrLf
  lsSql = lsSql & "      AssetAC " & vbCrLf
  lsSql = lsSql & "      FROM FaGrp " & vbCrLf
  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup " & vbCrLf
  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F' " & vbCrLf
  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S','W') " & vbCrLf
  lsSql = lsSql & "  ) Assets ON Assets.AssetCode = gbkmut.FaCode AND Assets.AssetAccount = gbkmut.reknr " & vbCrLf
  lsSql = lsSql & "  WHERE TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "  AND FaCode IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  AND EXISTS( " & vbCrLf
  lsSql = lsSql & "    SELECT EntryGUId  " & vbCrLf
  lsSql = lsSql & "    FROM gbkmut g2  " & vbCrLf
  lsSql = lsSql & "    WHERE TransSubType = 'I'  " & vbCrLf
  lsSql = lsSql & "    AND g2.EntryGUId = gbkmut.Entryguid  " & vbCrLf
  lsSql = lsSql & "    AND g2.FaCode = gbkmut.FaCode  " & vbCrLf
  lsSql = lsSql & "  ) " & vbCrLf
  lsSql = lsSql & "  AND NOT EXISTS( " & vbCrLf
  lsSql = lsSql & "    SELECT EntryGUId  " & vbCrLf
  lsSql = lsSql & "    FROM #AssetSoldEntryGUId  " & vbCrLf
  lsSql = lsSql & "    WHERE #AssetSoldEntryGUId.AssetCode = gbkmut.FaCode  " & vbCrLf
  lsSql = lsSql & "    AND #AssetSoldEntryGUId.EntryGUId = gbkmut.EntryGUId " & vbCrLf
  lsSql = lsSql & "  )  " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  /*---------------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  /* Create tempory table for transfered depreciations */ " & vbCrLf
  lsSql = lsSql & "  /*---------------------------------------------------*/ " & vbCrLf
  lsSql = lsSql & "  SELECT DISTINCT facode AS AssetCode, EntryGUId " & vbCrLf
  lsSql = lsSql & "  INTO #DepreciationTransferEntryGUId " & vbCrLf
  lsSql = lsSql & "  FROM gbkmut " & vbCrLf
  lsSql = lsSql & "  INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "    SELECT DISTINCT " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode,  " & vbCrLf
  lsSql = lsSql & "    FaGrp.DeprBS AS DepreciationAccount " & vbCrLf
  lsSql = lsSql & "    FROM ( " & vbCrLf
  lsSql = lsSql & "      SELECT  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Number,  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Classification,  " & vbCrLf
  lsSql = lsSql & "      ItemNumbers.Status,  " & vbCrLf
  lsSql = lsSql & "      ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup " & vbCrLf
  lsSql = lsSql & "      FROM ItemNumbers " & vbCrLf
  lsSql = lsSql & "      LEFT JOIN ( " & vbCrLf
  lsSql = lsSql & "        -- Requery transfert history of the asset " & vbCrLf
  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.olddataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "        FROM fatran  " & vbCrLf
  lsSql = lsSql & "        WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "        UNION " & vbCrLf
  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.newdataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "        FROM fatran  " & vbCrLf
  lsSql = lsSql & "        WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "      ) fatran ON fatran.assetcode = ItemNumbers.Number " & vbCrLf
  lsSql = lsSql & "    ) ItemNumbers  " & vbCrLf
  lsSql = lsSql & "    INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      assetgroup, " & vbCrLf
  lsSql = lsSql & "      DeprBS " & vbCrLf
  lsSql = lsSql & "      FROM FaGrp " & vbCrLf
  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup " & vbCrLf
  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F' " & vbCrLf
  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S','W') " & vbCrLf
  lsSql = lsSql & "  ) Assets ON Assets.AssetCode = gbkmut.FaCode AND Assets.DepreciationAccount = gbkmut.reknr " & vbCrLf
  lsSql = lsSql & "  WHERE TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "  AND FaCode IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  AND EXISTS( " & vbCrLf
  lsSql = lsSql & "    SELECT EntryGUId  " & vbCrLf
  lsSql = lsSql & "    FROM gbkmut g2  " & vbCrLf
  lsSql = lsSql & "    WHERE TransSubType = 'I'  " & vbCrLf
  lsSql = lsSql & "    AND g2.EntryGUId = gbkmut.Entryguid " & vbCrLf
  lsSql = lsSql & "    AND g2.FaCode = gbkmut.FaCode  " & vbCrLf
  lsSql = lsSql & "  ) " & vbCrLf
  lsSql = lsSql & "  AND NOT EXISTS( " & vbCrLf
  lsSql = lsSql & "    SELECT EntryGUId  " & vbCrLf
  lsSql = lsSql & "    FROM #AssetSoldEntryGUId  " & vbCrLf
  lsSql = lsSql & "    WHERE #AssetSoldEntryGUId.AssetCode = gbkmut.FaCode  " & vbCrLf
  lsSql = lsSql & "    AND #AssetSoldEntryGUId.EntryGUId = gbkmut.EntryGUId " & vbCrLf
  lsSql = lsSql & "  )  " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "--  SELECT * FROM #DepreciationTransferEntryGUId " & vbCrLf
  lsSql = lsSql & "--  SELECT * FROM #AssetTransferEntryGUId " & vbCrLf
  lsSql = lsSql & "--  SELECT * FROM #AssetSoldEntryGUId " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "  SELECT " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Reference AS SerialNumber, " & vbCrLf
  lsSql = lsSql & "  Asset.FinancialYear AS Inv_Year, " & vbCrLf
  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_03 AS Header,  " & vbCrLf
  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_03_Description AS Descr_Header,  " & vbCrLf
  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_04 AS SubHeader,  " & vbCrLf
  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_04_Description AS Descr_SubHeader,  " & vbCrLf
  lsSql = lsSql & "  AssetGroup.Asset_GLAccount_BS_Code AS GLAccount,  " & vbCrLf
  lsSql = lsSql & "  AssetGroup.Asset_GLAccount_BS_Description AS GLAccount_Descr, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Date AS PurchaseDate, " & vbCrLf
  lsSql = lsSql & "  Asset.docnumber AS Invoice_Nr, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Supplier_Name AS Supplier, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Description AS Descr_Inv, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Description AS Descr_Art, " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Depreciation_PL,  " & vbCrLf
  lsSql = lsSql & "  CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <> 0  " & vbCrLf
  lsSql = lsSql & "      AND ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <= ABS(ROUND((Asset_Depreciation_PrimaryMethod_LinearPercentage * @Ratio / 100) * Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber)) " & vbCrLf
  lsSql = lsSql & "      THEN 'l' " & vbCrLf
  lsSql = lsSql & "    WHEN Asset_Summary.Depreciation_PL = 0 AND Asset_Summary.Depreciation_StartPeriod <> 0 AND LEFT(Asset.Asset_Depreciation_PrimaryMethod, 1) = 'D' THEN 'l'" & vbCrLf
  lsSql = lsSql & "    ELSE " & vbCrLf
  lsSql = lsSql & "      LEFT(Asset.Asset_Depreciation_PrimaryMethod, 1)  " & vbCrLf
  lsSql = lsSql & "  END AS Depr_Methode, " & vbCrLf
  lsSql = lsSql & "  CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <> 0  " & vbCrLf
  lsSql = lsSql & "      AND ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <= ABS(ROUND((Asset_Depreciation_PrimaryMethod_LinearPercentage * @Ratio / 100) * Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber)) " & vbCrLf
  lsSql = lsSql & "      THEN Asset.Asset_Depreciation_PrimaryMethod_LinearPercentage " & vbCrLf
  lsSql = lsSql & "    WHEN Asset_Summary.Depreciation_PL = 0 AND Asset_Summary.Depreciation_StartPeriod <> 0 AND LEFT(Asset.Asset_Depreciation_PrimaryMethod, 1) = 'D' THEN Asset.Asset_Depreciation_PrimaryMethod_LinearPercentage" & vbCrLf
  lsSql = lsSql & "    ELSE " & vbCrLf
  lsSql = lsSql & "      Asset.Asset_Depreciation_PrimaryMethod_Percentage " & vbCrLf
  lsSql = lsSql & "  END AS Depr_Perc,  " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Depreciation_Days AS Dur_Count,  " & vbCrLf
  lsSql = lsSql & "  '365' AS Dur_Denom, " & vbCrLf
  lsSql = lsSql & "  CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN Asset.Asset_Investment_Deduction = 1 THEN 'O' " & vbCrLf
  lsSql = lsSql & "    WHEN Asset.Asset_Investment_Deduction = 2 THEN 'S' " & vbCrLf
  lsSql = lsSql & "    ELSE 'N' " & vbCrLf
  lsSql = lsSql & "  END AS Inv_Ded,  " & vbCrLf
  lsSql = lsSql & "  ----------- " & vbCrLf
  lsSql = lsSql & "  -- ASSET -- " & vbCrLf
  lsSql = lsSql & "  ----------- " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Asset_StartPeriod AS Purc_Prev, " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Asset_Minus_Sales AS Purc_Sales, " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Asset_Minus_Transfer + Asset_Summary.Asset_Plus_Transfer AS Purc_Transfer, " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Asset_Plus_New AS Purc_New, " & vbCrLf
  lsSql = lsSql & "  0 AS Purc_Import, " & vbCrLf
  lsSql = lsSql & "  ---------- " & vbCrLf
  lsSql = lsSql & "  -- DEPR -- " & vbCrLf
  lsSql = lsSql & "  ---------- " & vbCrLf
  lsSql = lsSql & "  CASE   " & vbCrLf
  lsSql = lsSql & "    WHEN Asset_Summary.Asset_StartPeriod = 0 THEN 0  " & vbCrLf
  lsSql = lsSql & "    ELSE Asset_Summary.Depreciation_StartPeriod   " & vbCrLf
  lsSql = lsSql & "  END AS Depr_Previous,  " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Depreciation_Minus_Sales AS Depr_Sales, " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Depreciation_Minus_Transfer + Asset_Summary.Depreciation_Plus AS Depr_Transfert,  " & vbCrLf
  lsSql = lsSql & "  Asset_Summary.Depreciation_PL AS Depr_New, " & vbCrLf
  lsSql = lsSql & "  0 AS Depr_Import,                                         ---===TODO===--- " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_SalesEntryNumber, " & vbCrLf
  lsSql = lsSql & "  0 as Sales_Line,                                          ---===TODO===--- " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_SalesDocDate, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_SalesAmount, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_SalesDescr, " & vbCrLf
  lsSql = lsSql & "  CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN Asset.prorata = 0 THEN 'N' " & vbCrLf
  lsSql = lsSql & "    WHEN Asset.prorata = 1 THEN 'Y' " & vbCrLf
  lsSql = lsSql & "    ELSE 'N' " & vbCrLf
  lsSql = lsSql & "  END AS Pro_Rata, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Numyears, " & vbCrLf
  lsSql = lsSql & "  Asset.Asset_Numyears_Depr, " & vbCrLf
  'Localisation other markets - 15.008.739 - Start
  lsSql = lsSql & "  Asset.Asset_AJ " & vbCrLf
  'Localisation other markets - 15.008.739 - End
  lsSql = lsSql & "  /* Asset */ " & vbCrLf
  lsSql = lsSql & "  FROM ( " & vbCrLf
  lsSql = lsSql & "    SELECT " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.Description AS Asset_Description, " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.Number AS Asset_Reference, " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.UserDate_03 AS Asset_Date, " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.ResidualValue AS Asset_ResidualValue, " & vbCrLf
  lsSql = lsSql & "    YEAR(FinancialYear.EndDate) AS FinancialYear, " & vbCrLf
  lsSql = lsSql & "    ItemNumbers.PrimaryMethod AS Asset_Depreciation_PrimaryMethod, " & vbCrLf
  lsSql = lsSql & "    Items.Item_Assortment_Code AS Asset_Item_Assortment_Code,  " & vbCrLf
  lsSql = lsSql & "    Items.Item_Assortment_Description AS Asset_Item_Assortment_Description,  " & vbCrLf
  lsSql = lsSql & "    Items.Item_Code AS Asset_Item_Code,  " & vbCrLf
  lsSql = lsSql & "    Items.Item_Description AS Asset_Item_Description,  " & vbCrLf
  lsSql = lsSql & "    Supplier.Name AS Asset_Supplier_Name,  " & vbCrLf
  lsSql = lsSql & "    CAST( CASE PrimaryMethod.DeprCode " & vbCrLf
  lsSql = lsSql & "      WHEN 'AB' /* Degressif */ THEN " & vbCrLf
  lsSql = lsSql & "        CASE  " & vbCrLf
  lsSql = lsSql & "          WHEN PrimaryMethod.LinearPercentage <> 0 THEN CEILING(100 / ( PrimaryMethod.LinearPercentage * " & vbCrLf
  lsSql = lsSql & "            CASE PrimaryMethod.calcbasis " & vbCrLf
  lsSql = lsSql & "              WHEN 'D' THEN 365 " & vbCrLf
  lsSql = lsSql & "              WHEN 'P' THEN 12 " & vbCrLf
  lsSql = lsSql & "              ELSE 1 " & vbCrLf
  lsSql = lsSql & "            END ) ) " & vbCrLf
  lsSql = lsSql & "          ELSE 0 " & vbCrLf
  lsSql = lsSql & "        END " & vbCrLf
  lsSql = lsSql & "      WHEN 'SA' /* Linear */ THEN " & vbCrLf
  lsSql = lsSql & "        CASE  " & vbCrLf
  lsSql = lsSql & "          WHEN PrimaryMethod.Percentage <> 0 THEN CEILING(100 / ( PrimaryMethod.Percentage * " & vbCrLf
  lsSql = lsSql & "            CASE PrimaryMethod.calcbasis " & vbCrLf
  lsSql = lsSql & "              WHEN 'D' THEN 365 " & vbCrLf
  lsSql = lsSql & "              WHEN 'P' THEN 12 " & vbCrLf
  lsSql = lsSql & "              ELSE 1 " & vbCrLf
  lsSql = lsSql & "            END ) ) " & vbCrLf
  lsSql = lsSql & "          ELSE 0 " & vbCrLf
  lsSql = lsSql & "        END " & vbCrLf
  lsSql = lsSql & "      ELSE /* Manual */ 0 " & vbCrLf
  lsSql = lsSql & "    END AS SMALLINT) AS Asset_Numyears, " & vbCrLf
  lsSql = lsSql & "    DATEDIFF(YEAR, ItemNumbers.DateStart, ItemNumbers.DateEnd) + 1 AS Asset_Numyears_Depr, " & vbCrLf
  lsSql = lsSql & "    CASE PrimaryMethod.calcbasis " & vbCrLf
  lsSql = lsSql & "      WHEN 'D' THEN 365 * PrimaryMethod.Percentage " & vbCrLf
  lsSql = lsSql & "      WHEN 'P' THEN 12 * PrimaryMethod.Percentage " & vbCrLf
  lsSql = lsSql & "      ELSE 1 * PrimaryMethod.Percentage " & vbCrLf
  lsSql = lsSql & "    END AS Asset_Depreciation_PrimaryMethod_Percentage,  " & vbCrLf
  lsSql = lsSql & "    CASE PrimaryMethod.calcbasis " & vbCrLf
  lsSql = lsSql & "      WHEN 'D' THEN 365 * PrimaryMethod.LinearPercentage " & vbCrLf
  lsSql = lsSql & "      WHEN 'P' THEN 12 * PrimaryMethod.LinearPercentage " & vbCrLf
  lsSql = lsSql & "      ELSE 1 * PrimaryMethod.LinearPercentage " & vbCrLf
  lsSql = lsSql & "    END AS Asset_Depreciation_PrimaryMethod_LinearPercentage,  " & vbCrLf
  lsSql = lsSql & "    CASE   " & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ THEN   " & vbCrLf
  lsSql = lsSql & "        CASE  " & vbCrLf
  lsSql = lsSql & "          WHEN ISNULL(#prorata.prorata, 0) = 1 THEN  " & vbCrLf
  lsSql = lsSql & "            CASE   " & vbCrLf
  lsSql = lsSql & "              WHEN @BudgetVersion = 'MRP' AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.DateStart, FinancialYear.EndDate) + 1   " & vbCrLf
  lsSql = lsSql & "              ELSE 365  " & vbCrLf
  lsSql = lsSql & "            END  " & vbCrLf
  lsSql = lsSql & "          ELSE  " & vbCrLf
  lsSql = lsSql & "            CASE   " & vbCrLf
  lsSql = lsSql & "              WHEN @BudgetVersion = 'ASSET_3' AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.UserDate_03, FinancialYear.EndDate) + 1   " & vbCrLf
  lsSql = lsSql & "              ELSE 365  " & vbCrLf
  lsSql = lsSql & "            END  " & vbCrLf
  lsSql = lsSql & "        END  " & vbCrLf
  lsSql = lsSql & "      ELSE  " & vbCrLf
  lsSql = lsSql & "        CASE   " & vbCrLf
  lsSql = lsSql & "          WHEN ISNULL(#prorata.prorata, 0) = 1 AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.DateStart, FinancialYear.EndDate) + 1   " & vbCrLf
  lsSql = lsSql & "          ELSE 365  " & vbCrLf
  lsSql = lsSql & "        END   " & vbCrLf
  lsSql = lsSql & "    END AS Asset_Depreciation_Days,   " & vbCrLf
  lsSql = lsSql & "    DATEDIFF(DAY, FinancialYear.StartDate, FinancialYear.EndDate) + 1 AS FinancialYear_Depreciation_Days,  " & vbCrLf
  lsSql = lsSql & "    ISNULL(ItemNumbers.UserInteger_05, 0) AS Asset_Investment_Deduction,  " & vbCrLf
  lsSql = lsSql & "    #AssetSoldEntryGUId.docnumber AS Asset_SalesEntryNumber, " & vbCrLf
  lsSql = lsSql & "    #AssetSoldEntryGUId.DocDate AS Asset_SalesDocDate, " & vbCrLf
  lsSql = lsSql & "    #AssetSoldEntryGUId.bdr_hfl AS Asset_SalesAmount, " & vbCrLf
  lsSql = lsSql & "    #AssetSoldEntryGUId.oms25 AS Asset_SalesDescr, " & vbCrLf
  lsSql = lsSql & "    gbkmutjoin.bkstnr as Docnumber, " & vbCrLf
  lsSql = lsSql & "    ISNULL(#prorata.prorata, 0) as prorata, " & vbCrLf
  'Localisation other markets - 15.008.739 - Start
  lsSql = lsSql & "    YEAR(DATEADD(d, 1, FinancialYear.EndDate)) AS Asset_AJ, " & vbCrLf
  'Localisation other markets - 15.008.739 - End
  lsSql = lsSql & "    '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "    FROM ItemNumbers " & vbCrLf
  lsSql = lsSql & "    /* Items */ " & vbCrLf
  lsSql = lsSql & "    INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      Items.ItemCode AS Item_Code,  " & vbCrLf
  lsSql = lsSql & "      Items.Description AS Item_Description,  " & vbCrLf
  lsSql = lsSql & "      Items.Assortment AS Item_Assortment_Code,  " & vbCrLf
  lsSql = lsSql & "      ItemAssortment.Description AS Item_Assortment_Description " & vbCrLf
  lsSql = lsSql & "      FROM Items " & vbCrLf
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        SELECT  " & vbCrLf
  lsSql = lsSql & "        ItemAssortment.Assortment,  " & vbCrLf
  lsSql = lsSql & "        ItemAssortment.Description_0 AS Description  " & vbCrLf
  lsSql = lsSql & "        FROM ItemAssortment  " & vbCrLf
  lsSql = lsSql & "      ) ItemAssortment ON ItemAssortment.Assortment = Items.Assortment " & vbCrLf
  lsSql = lsSql & "    ) Items ON Items.Item_Code = ItemNumbers.ItemCode " & vbCrLf
  lsSql = lsSql & "    /* PrimaryMethod */ " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT  " & vbCrLf
  lsSql = lsSql & "      deprCode AS DeprCode,  " & vbCrLf
  lsSql = lsSql & "      numyears AS Numyears,  " & vbCrLf
  lsSql = lsSql & "      deprmeth AS Method,  " & vbCrLf
  lsSql = lsSql & "      percper AS Percentage, " & vbCrLf
  lsSql = lsSql & "      percper2 AS LinearPercentage,  " & vbCrLf
  lsSql = lsSql & "      calcbasis " & vbCrLf
  lsSql = lsSql & "      FROM fadprm " & vbCrLf
  lsSql = lsSql & "    ) PrimaryMethod ON PrimaryMethod.Method = ItemNumbers.PrimaryMethod AND ItemNumbers.PrimaryMethod IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    /* FinancialYear */ " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      MIN(bgdatum) AS StartDate, " & vbCrLf
  lsSql = lsSql & "      MAX(eddatum) AS EndDate, " & vbCrLf
  lsSql = lsSql & "      bkjrcode As Code " & vbCrLf
  lsSql = lsSql & "      FROM perdat " & vbCrLf
  lsSql = lsSql & "      GROUP BY bkjrcode " & vbCrLf
  lsSql = lsSql & "    ) FinancialYear ON ItemNumbers.UserDate_03 BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate AND ItemNumbers.UserDate_03 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      crdnr AS Code,  " & vbCrLf
  lsSql = lsSql & "      CASE crdnr " & vbCrLf
  lsSql = lsSql & "        WHEN '000000' THEN '' " & vbCrLf
  lsSql = lsSql & "        ELSE cmp_name " & vbCrLf
  lsSql = lsSql & "      END As Name " & vbCrLf
  lsSql = lsSql & "      FROM Cicmpy " & vbCrLf
  lsSql = lsSql & "      WHERE crdnr IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    ) Supplier ON ItemNumbers.SupplierNumber = Supplier.Code AND ItemNumbers.SupplierNumber IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  -------------------------------------------------------------------------------------------------------------------------------------- " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN (SELECT bkstnr, transactionguid FROM gbkmut)gbkmutJoin ON ItemNumbers.transactionguid = gbkmutJoin.transactionguid " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN #AssetSoldEntryGUId ON ItemNumbers.Number = #AssetSoldEntryGUId.AssetCode " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN #prorata ON #prorata.bkjrcode = FinancialYear.Code " & vbCrLf
  lsSql = lsSql & "  -------------------------------------------------------------------------------------------------------------------------------------- " & vbCrLf
  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F' " & vbCrLf
  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S','W') " & vbCrLf
  lsSql = lsSql & "    AND FinancialYear.code IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  ) Asset " & vbCrLf
  lsSql = lsSql & "  /* Asset_Summary */ " & vbCrLf
  lsSql = lsSql & "  INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "    SELECT " & vbCrLf
  lsSql = lsSql & "    Asset_Reference, " & vbCrLf
  lsSql = lsSql & "    Asset_Group,  " & vbCrLf
  lsSql = lsSql & "    SUM(Asset_StartPeriod) AS Asset_StartPeriod, " & vbCrLf
  lsSql = lsSql & "    SUM(Asset_Plus_New) AS Asset_Plus_New, " & vbCrLf
  lsSql = lsSql & "    SUM(Asset_Plus_Transfer) AS Asset_Plus_Transfer, " & vbCrLf
  lsSql = lsSql & "    SUM(Asset_Minus_Sales) AS Asset_Minus_Sales, " & vbCrLf
  lsSql = lsSql & "    SUM(Asset_Minus_Transfer) AS Asset_Minus_Transfer, " & vbCrLf
  lsSql = lsSql & "    SUM(Depreciation_StartPeriod) AS Depreciation_StartPeriod, " & vbCrLf
  lsSql = lsSql & "    SUM(Depreciation_Plus) AS Depreciation_Plus, " & vbCrLf
  lsSql = lsSql & "    SUM(Depreciation_Minus_Sales) AS Depreciation_Minus_Sales, " & vbCrLf
  lsSql = lsSql & "    SUM(Depreciation_Minus_Transfer) AS Depreciation_Minus_Transfer, " & vbCrLf
  lsSql = lsSql & "    SUM(Depreciation_PL) AS Depreciation_PL " & vbCrLf
  lsSql = lsSql & "    FROM ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      TransSubType_Description.Description AS TransSubType_Description, " & vbCrLf
  lsSql = lsSql & "      gbkmut.TransType, " & vbCrLf
  lsSql = lsSql & "      TransType_Description.Description AS TransType_Description, " & vbCrLf
  lsSql = lsSql & "      grtbk.bal_vw, " & vbCrLf
  lsSql = lsSql & "      grtbk.bal_vw_Description, " & vbCrLf
  lsSql = lsSql & "      CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "        WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "        WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "      END AS TransactionDate,  " & vbCrLf
  lsSql = lsSql & "      gbkmut.reknr, " & vbCrLf
  lsSql = lsSql & "      CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl, " & vbCrLf
  lsSql = lsSql & "      gbkmut.TransSubType, " & vbCrLf
  lsSql = lsSql & "      gbkmut.facode AS Asset_Reference, " & vbCrLf
  lsSql = lsSql & "      Asset.AssetGroup AS Asset_Group,  " & vbCrLf
  lsSql = lsSql & "      Asset.AssetAC AS Asset_BL, " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "      /*--------- " & vbCrLf
  lsSql = lsSql & "      -- Asset -- " & vbCrLf
  lsSql = lsSql & "      ---------*/ " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Purchase & Revaluation " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Asset " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Asset_StartPeriod, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Purchase & Revaluation " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId NOT IN (SELECT EntryGUId FROM #AssetTransferEntryGUId) " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Asset_Plus_New, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Purchase & Revaluation " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #AssetTransferEntryGUId) " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Asset_Plus_Transfer, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Asset " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId = #AssetSoldEntryGUId.EntryGUId  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Asset_Minus_Sales, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Asset " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #AssetTransferEntryGUId) " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC  " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Asset_Minus_Transfer, " & vbCrLf
  lsSql = lsSql & "   " & vbCrLf
  lsSql = lsSql & "      /*---------------- " & vbCrLf
  lsSql = lsSql & "      -- Depreciation -- " & vbCrLf
  lsSql = lsSql & "      ----------------*/ " & vbCrLf
  lsSql = lsSql & "      CASE  " & vbCrLf
  lsSql = lsSql & "        -- Depreciation - always actual  " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS   " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN ISNULL(V.datum, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum))  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Storno  " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS   " & vbCrLf
  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "          END < @DateFrom  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */ THEN  " & vbCrLf
  lsSql = lsSql & "          CASE   " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.datum > ISNULL(Asset.UltimateDepreciation, gbkmut.datum-1) /* Budget */  " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransType IN ('B')   " & vbCrLf
  lsSql = lsSql & "              AND  " & vbCrLf
  lsSql = lsSql & "                (   " & vbCrLf
  lsSql = lsSql & "                  (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP')  " & vbCrLf
  lsSql = lsSql & "                  OR  " & vbCrLf
  lsSql = lsSql & "                  (  " & vbCrLf
  lsSql = lsSql & "                    @BudgetVersion = 'ASSET_3'   " & vbCrLf
  lsSql = lsSql & "                    AND (  " & vbCrLf
  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3')  " & vbCrLf
  lsSql = lsSql & "                      OR  " & vbCrLf
  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP')  " & vbCrLf
  lsSql = lsSql & "                    )  " & vbCrLf
  lsSql = lsSql & "                  )  " & vbCrLf
  lsSql = lsSql & "                  OR  " & vbCrLf
  lsSql = lsSql & "                  (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2')  " & vbCrLf
  lsSql = lsSql & "                )  " & vbCrLf
  lsSql = lsSql & "              AND Asset.AssetActiveGroup = Asset.AssetGroup  " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.datum < @DateFrom  " & vbCrLf
  lsSql = lsSql & "              THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') /* Actual */  " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('V', 'N')   " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS   " & vbCrLf
  lsSql = lsSql & "              AND CASE @DocDate   " & vbCrLf
  lsSql = lsSql & "                WHEN 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "                WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "              END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "              AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "                WHEN 0 THEN ISNULL(V.datum, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "                WHEN 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum))  " & vbCrLf
'  lsSql = lsSql & "              END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "              THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "            -- Disposal - Storno  " & vbCrLf
  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') /* Actual */  " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('I')   " & vbCrLf
  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS   " & vbCrLf
  lsSql = lsSql & "              AND CASE @DocDate   " & vbCrLf
  lsSql = lsSql & "                WHEN 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "                WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "              END < @DateFrom " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "              AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "                WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "                WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "              END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "              THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "            ELSE 0  " & vbCrLf
  lsSql = lsSql & "          END  " & vbCrLf
  lsSql = lsSql & "        ELSE 0  " & vbCrLf
  lsSql = lsSql & "      END AS Depreciation_StartPeriod,  " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Depreciation - always actual " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N')  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL)  " & vbCrLf
  lsSql = lsSql & "          AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN ISNULL(V.datum, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum))  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Depreciation_Plus, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Storno " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId = #AssetSoldEntryGUId.EntryGUId  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL)  " & vbCrLf
  lsSql = lsSql & "          AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Depreciation_Minus_Sales, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE " & vbCrLf
  lsSql = lsSql & "        -- Disposal - Storno " & vbCrLf
  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #DepreciationTransferEntryGUId WHERE #DepreciationTransferEntryGUId.AssetCode = gbkmut.facode) " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL)  " & vbCrLf
  lsSql = lsSql & "          AND (gbkmut.reknr = Asset.DeprBS OR (gbkmut.reknr = Asset.DeprPL AND Depreciation.DeprBS = Asset.DeprBS)) " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          AND CASE @DocDate  " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
  lsSql = lsSql & "        ELSE 0 " & vbCrLf
  lsSql = lsSql & "      END AS Depreciation_Minus_Transfer, " & vbCrLf
  lsSql = lsSql & "      ----------------------------------------------------------       " & vbCrLf
  lsSql = lsSql & "      CASE  " & vbCrLf
  lsSql = lsSql & "        -- Depreciation  " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V', 'N')   " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprPL   " & vbCrLf
  lsSql = lsSql & "          AND Depreciation.DeprBS = Asset.DeprBS " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "          END BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  ' Deloitte scenario 5 - Start
'  lsSql = lsSql & "          AND CASE @DocDate   " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN ISNULL(V.datum, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(ISNULL(V.DocDate, gbkmut.DocDate), ISNULL(V.datum, gbkmut.datum))  " & vbCrLf
'  lsSql = lsSql & "          END BETWEEN Asset.TransactionDateFrom AND Asset.TransactionDateTo  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "          THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "        -- Budget - Depreciation  " & vbCrLf
  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('B')   " & vbCrLf
  lsSql = lsSql & "          AND  " & vbCrLf
  lsSql = lsSql & "            (   " & vbCrLf
  lsSql = lsSql & "              (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP')  " & vbCrLf
  lsSql = lsSql & "              OR  " & vbCrLf
  lsSql = lsSql & "              (  " & vbCrLf
  lsSql = lsSql & "                @BudgetVersion = 'ASSET_3'   " & vbCrLf
  lsSql = lsSql & "                AND (  " & vbCrLf
  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3')  " & vbCrLf
  lsSql = lsSql & "                  OR  " & vbCrLf
  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP')  " & vbCrLf
  lsSql = lsSql & "                )  " & vbCrLf
  lsSql = lsSql & "              )  " & vbCrLf
  lsSql = lsSql & "              OR  " & vbCrLf
  lsSql = lsSql & "              (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2')  " & vbCrLf
  lsSql = lsSql & "            )  " & vbCrLf
  lsSql = lsSql & "          AND Asset.AssetActiveGroup = Asset.AssetGroup  " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.datum BETWEEN @DateFrom AND @DateTo  " & vbCrLf
  lsSql = lsSql & "          THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5))  " & vbCrLf
  lsSql = lsSql & "        ELSE 0  " & vbCrLf
  lsSql = lsSql & "      END AS Depreciation_PL  " & vbCrLf
  lsSql = lsSql & "      FROM gbkmut " & vbCrLf
  ' Deloitte scenario 5 - Start
  lsSql = lsSql & "      LEFT OUTER JOIN (" & vbCrLf
  lsSql = lsSql & "        SELECT T.ID, " & vbCrLf
  lsSql = lsSql & "        (" & vbCrLf
  'BR 38.700.087: Only 1 record is allowed, add TOP 1
  lsSql = lsSql & "          SELECT TOP 1 MAX(D.reknr)" & vbCrLf
  lsSql = lsSql & "          FROM gbkmut D" & vbCrLf
  lsSql = lsSql & "          INNER JOIN grtbk G ON G.reknr = D.reknr" & vbCrLf
  lsSql = lsSql & "          WHERE D.TransType IN ('N', 'C', 'P')" & vbCrLf
  lsSql = lsSql & "          AND D.TransSubType = 'V'" & vbCrLf
  lsSql = lsSql & "          AND D.EntryGUId = T.EntryGUId" & vbCrLf
  lsSql = lsSql & "          AND D.facode = T.facode" & vbCrLf
  lsSql = lsSql & "          AND G.bal_vw = 'B'" & vbCrLf
  lsSql = lsSql & "          GROUP BY D.reknr" & vbCrLf
  lsSql = lsSql & "          HAVING COUNT(*) = 1" & vbCrLf
  lsSql = lsSql & "        ) AS DeprBS" & vbCrLf
  lsSql = lsSql & "        FROM gbkmut T" & vbCrLf
  lsSql = lsSql & "      ) Depreciation ON Depreciation.ID = gbkmut.ID" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN (  " & vbCrLf
'  lsSql = lsSql & "        SELECT ID, datum + 1 AS datum, docdate + 1 AS docdate  " & vbCrLf
'  lsSql = lsSql & "        FROM gbkmut V  " & vbCrLf
'  lsSql = lsSql & "        WHERE transtype = 'N'  " & vbCrLf
'  lsSql = lsSql & "        AND transsubtype = 'V'  " & vbCrLf
'  lsSql = lsSql & "        AND EXISTS(  " & vbCrLf
'  lsSql = lsSql & "          SELECT I.ID   " & vbCrLf
'  lsSql = lsSql & "          FROM gbkmut I   " & vbCrLf
'  lsSql = lsSql & "          WHERE I.entryguid = V.entryguid   " & vbCrLf
'  ' Localisation other markets - 13.930.753 - Start
'  lsSql = lsSql & "          AND I.facode = V.facode " & vbCrLf
'  ' Localisation other markets - 13.930.753 - End
'  lsSql = lsSql & "          AND I.transsubtype = 'I'  " & vbCrLf
'  lsSql = lsSql & "        )  " & vbCrLf
'  lsSql = lsSql & "      ) V ON V.ID = gbkmut.ID  " & vbCrLf
  ' Deloitte scenario 5 - End
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        -- If two asset group have the same definition, only one is retained " & vbCrLf
  lsSql = lsSql & "        SELECT DISTINCT " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.Number,  " & vbCrLf
  lsSql = lsSql & "        ISNULL(transactionfrom.transactiondatefrom, (SELECT MIN(bgdatum) FROM perdat)) transactiondatefrom,  " & vbCrLf
  lsSql = lsSql & "        ISNULL(transactionto.transactiondateto, (SELECT MAX(eddatum) FROM perdat)) transactiondateto,  " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.TransactionGUId,  " & vbCrLf
  lsSql = lsSql & "        UniqueAssetGroup.AssetGroup, " & vbCrLf
  lsSql = lsSql & "        ItemNumbers.AssetActiveGroup,  " & vbCrLf
  lsSql = lsSql & "        FaGrp.AssetAC, " & vbCrLf
  lsSql = lsSql & "        FaGrp.DeprBS, " & vbCrLf
  lsSql = lsSql & "        FaGrp.DeprPL,  " & vbCrLf
  lsSql = lsSql & "        (   " & vbCrLf
  ' Deloitte scenario 1 - Start
'  lsSql = lsSql & "          SELECT MAX(CASE @DocDate WHEN 0 THEN gbkmut.datum WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) END)   " & vbCrLf
  lsSql = lsSql & "          SELECT MAX(gbkmut.datum)   " & vbCrLf
  ' Deloitte scenario 1 - End
  lsSql = lsSql & "          FROM gbkmut   " & vbCrLf
  lsSql = lsSql & "          WHERE gbkmut.facode = ItemNumbers.Number   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V')   " & vbCrLf
  lsSql = lsSql & "          AND gbkmut.reknr = FaGrp.DeprBS  " & vbCrLf
  ' Modif Scenario 1 - Start
'  lsSql = lsSql & "          AND NOT EXISTS(  " & vbCrLf
'  lsSql = lsSql & "            SELECT I.ID  " & vbCrLf
'  lsSql = lsSql & "            FROM gbkmut I  " & vbCrLf
'  lsSql = lsSql & "            WHERE I.TransType IN ('N', 'C', 'P')   " & vbCrLf
'  lsSql = lsSql & "            AND I.TransSubType = 'I'  " & vbCrLf
'  lsSql = lsSql & "            AND I.EntryGUId = gbkmut.EntryGUId  " & vbCrLf
'  lsSql = lsSql & "          )  " & vbCrLf
  ' Modif Scenario 1 - End
  lsSql = lsSql & "        ) AS UltimateDepreciation,   " & vbCrLf
  lsSql = lsSql & "        '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "        FROM ( " & vbCrLf
  lsSql = lsSql & "          SELECT  " & vbCrLf
  lsSql = lsSql & "          ItemNumbers.Number,  " & vbCrLf
  lsSql = lsSql & "          ItemNumbers.TransactionGUId,  " & vbCrLf
  lsSql = lsSql & "          ItemNumbers.Classification,  " & vbCrLf
  lsSql = lsSql & "          ItemNumbers.Status,  " & vbCrLf
  lsSql = lsSql & "          ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup, " & vbCrLf
  lsSql = lsSql & "          ItemNumbers.AssetGroup AS AssetActiveGroup,  " & vbCrLf
  lsSql = lsSql & "          '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "          FROM ItemNumbers " & vbCrLf
  lsSql = lsSql & "          LEFT JOIN ( " & vbCrLf
  lsSql = lsSql & "            -- Requery transfert history of the asset " & vbCrLf
  lsSql = lsSql & "            SELECT fatran.assetcode, fatran.olddataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "            FROM fatran  " & vbCrLf
  lsSql = lsSql & "            WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "            UNION " & vbCrLf
  lsSql = lsSql & "            SELECT fatran.assetcode, fatran.newdataval AS assetgroup " & vbCrLf
  lsSql = lsSql & "            FROM fatran  " & vbCrLf
  lsSql = lsSql & "            WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "          ) fatran ON fatran.assetcode = ItemNumbers.Number " & vbCrLf
  lsSql = lsSql & "        ) ItemNumbers  " & vbCrLf
  lsSql = lsSql & "        INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT " & vbCrLf
  lsSql = lsSql & "          assetgroup, " & vbCrLf
  lsSql = lsSql & "          AssetAC, " & vbCrLf
  lsSql = lsSql & "          DeprBS, " & vbCrLf
  lsSql = lsSql & "          DeprPL,  " & vbCrLf
  lsSql = lsSql & "          '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "          FROM FaGrp " & vbCrLf
  lsSql = lsSql & "        ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup " & vbCrLf
  lsSql = lsSql & "        INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT " & vbCrLf
  lsSql = lsSql & "          MIN(assetgroup) AS AssetGroup, " & vbCrLf
  lsSql = lsSql & "          AssetAC, " & vbCrLf
  lsSql = lsSql & "          DeprBS, " & vbCrLf
  lsSql = lsSql & "          DeprPL " & vbCrLf
  lsSql = lsSql & "          FROM FaGrp " & vbCrLf
  lsSql = lsSql & "          GROUP BY AssetAC, DeprBS, DeprPL " & vbCrLf
  lsSql = lsSql & "        ) UniqueAssetGroup ON UniqueAssetGroup.AssetAC = FaGrp.AssetAC AND UniqueAssetGroup.DeprBS = FaGrp.DeprBS AND UniqueAssetGroup.DeprPL = FaGrp.DeprPL " & vbCrLf
  lsSql = lsSql & "        LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT facode, reknr,   " & vbCrLf
  lsSql = lsSql & "          MAX(  " & vbCrLf
  lsSql = lsSql & "            CASE   " & vbCrLf
  lsSql = lsSql & "              WHEN 1 = 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "              WHEN 1 = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "            END   " & vbCrLf
  lsSql = lsSql & "          ) AS TransactionDateTo  " & vbCrLf
  lsSql = lsSql & "          FROM gbkmut  " & vbCrLf
  lsSql = lsSql & "          INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "            SELECT fatran.assetcode, fagrp.assetac " & vbCrLf
  lsSql = lsSql & "            FROM fatran  " & vbCrLf
  lsSql = lsSql & "            INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "              SELECT assetgroup, assetac  " & vbCrLf
  lsSql = lsSql & "              FROM fagrp " & vbCrLf
  lsSql = lsSql & "            ) fagrp ON fagrp.assetgroup = fatran.olddataval " & vbCrLf
  lsSql = lsSql & "            WHERE trantype = 'G' " & vbCrLf
  lsSql = lsSql & "          ) fatran ON gbkmut.facode = fatran.assetcode AND gbkmut.reknr = fatran.assetac " & vbCrLf
  lsSql = lsSql & "          WHERE transsubtype = 'I'  " & vbCrLf
  lsSql = lsSql & "          GROUP BY facode, reknr " & vbCrLf
  lsSql = lsSql & "        ) transactionto ON transactionto.facode = itemnumbers.number and transactionto.reknr = fagrp.assetac AND fagrp.assetac IS NOT NULL " & vbCrLf
  lsSql = lsSql & "        LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT facode, reknr,   " & vbCrLf
  lsSql = lsSql & "          MIN(  " & vbCrLf
  lsSql = lsSql & "            CASE   " & vbCrLf
  lsSql = lsSql & "              WHEN 1 = 0 THEN gbkmut.datum   " & vbCrLf
  lsSql = lsSql & "              WHEN 1 = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)   " & vbCrLf
  lsSql = lsSql & "            END   " & vbCrLf
  lsSql = lsSql & "          )+1 AS TransactionDateFrom  " & vbCrLf
  lsSql = lsSql & "          FROM gbkmut  " & vbCrLf
  lsSql = lsSql & "          INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "            SELECT fatran.assetcode, fagrp.assetac " & vbCrLf
  lsSql = lsSql & "            FROM fatran  " & vbCrLf
  lsSql = lsSql & "            INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "              SELECT assetgroup, assetac  " & vbCrLf
  lsSql = lsSql & "              FROM fagrp " & vbCrLf
  lsSql = lsSql & "            ) fagrp ON fagrp.assetgroup = fatran.newdataval " & vbCrLf
  lsSql = lsSql & "            WHERE trantype = 'g' " & vbCrLf
  lsSql = lsSql & "          ) fatran ON gbkmut.facode = fatran.assetcode and gbkmut.reknr = fatran.assetac " & vbCrLf
  lsSql = lsSql & "          GROUP BY facode, reknr " & vbCrLf
  lsSql = lsSql & "        ) transactionfrom ON transactionfrom.facode = itemnumbers.number and transactionfrom.reknr = fagrp.assetac " & vbCrLf
  lsSql = lsSql & "        WHERE ItemNumbers.Classification = 'F' " & vbCrLf
  lsSql = lsSql & "        AND ItemNumbers.Status IN ('A','G','D','C','B','S','W') " & vbCrLf
  lsSql = lsSql & "      ) Asset ON Asset.Number = gbkmut.FACode AND gbkmut.FACode IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description " & vbCrLf
  lsSql = lsSql & "        FROM DDTests " & vbCrLf
  lsSql = lsSql & "        WHERE TableName = 'gbkmut' AND FieldName = 'TransType' " & vbCrLf
  lsSql = lsSql & "      ) TransType_Description ON TransType_Description.DatabaseChar = gbkmut.transtype " & vbCrLf
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description " & vbCrLf
  lsSql = lsSql & "        FROM DDTests " & vbCrLf
  lsSql = lsSql & "        WHERE TableName = 'gbkmut' AND FieldName = 'TransSubType' " & vbCrLf
  lsSql = lsSql & "      ) TransSubType_Description ON TransSubType_Description.DatabaseChar = gbkmut.TransSubType " & vbCrLf
  lsSql = lsSql & "      INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "        SELECT " & vbCrLf
  lsSql = lsSql & "        grtbk.reknr, " & vbCrLf
  lsSql = lsSql & "        grtbk.omzrek, " & vbCrLf
  lsSql = lsSql & "        omzrek_Description.TermId AS omzrek_TermId, " & vbCrLf
  lsSql = lsSql & "        omzrek_Description.Description AS omzrek_Description, " & vbCrLf
  lsSql = lsSql & "        grtbk.bal_vw, " & vbCrLf
  lsSql = lsSql & "        bal_vw_Description.TermId AS bal_vw_TermId, " & vbCrLf
  lsSql = lsSql & "        bal_vw_Description.Description AS bal_vw_Description " & vbCrLf
  lsSql = lsSql & "        FROM grtbk " & vbCrLf
  lsSql = lsSql & "        INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT DatabaseChar, TermId, Description " & vbCrLf
  lsSql = lsSql & "          FROM DDTests " & vbCrLf
  lsSql = lsSql & "          WHERE TableName = 'grtbk' AND FieldName = 'omzrek' " & vbCrLf
  lsSql = lsSql & "        ) omzrek_Description ON omzrek_Description.DatabaseChar = grtbk.omzrek " & vbCrLf
  lsSql = lsSql & "        INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "          SELECT DatabaseChar, TermId, Description " & vbCrLf
  lsSql = lsSql & "          FROM DDTests " & vbCrLf
  lsSql = lsSql & "          WHERE TableName = 'grtbk' AND FieldName = 'bal_vw' " & vbCrLf
  lsSql = lsSql & "        ) bal_vw_Description ON bal_vw_Description.DatabaseChar = grtbk.bal_vw " & vbCrLf
  lsSql = lsSql & "        ------------------------------------ " & vbCrLf
  lsSql = lsSql & "        WHERE grtbk.omzrek NOT IN ('C', 'D') " & vbCrLf
  lsSql = lsSql & "        ------------------------------------ " & vbCrLf
  lsSql = lsSql & "      ) grtbk ON grtbk.reknr = gbkmut.reknr " & vbCrLf
  lsSql = lsSql & "      ------------------------------------------------------------------------------------ " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN #AssetSoldEntryGUId ON #AssetSoldEntryGUId.AssetCode = gbkmut.facode " & vbCrLf
  lsSql = lsSql & "      ------------------------------------------------------------------------------------ " & vbCrLf
  lsSql = lsSql & "    WHERE  " & vbCrLf
  lsSql = lsSql & "    CASE  " & vbCrLf
  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actuals */ THEN  " & vbCrLf
  lsSql = lsSql & "        CASE  " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
  lsSql = lsSql & "        END  " & vbCrLf
  lsSql = lsSql & "      ELSE /* Budget */ gbkmut.datum  " & vbCrLf
  lsSql = lsSql & "    END <= @DateTo " & vbCrLf
  lsSql = lsSql & "    ) Asset_Transactions " & vbCrLf
  lsSql = lsSql & "    GROUP BY Asset_Transactions.Asset_Reference, Asset_Transactions.Asset_Group " & vbCrLf
  lsSql = lsSql & "  ) Asset_Summary ON Asset_Summary.Asset_Reference = Asset.Asset_Reference " & vbCrLf
  lsSql = lsSql & "  /* AssetGroup */ " & vbCrLf
  lsSql = lsSql & "  INNER JOIN ( " & vbCrLf
  lsSql = lsSql & "    SELECT " & vbCrLf
  lsSql = lsSql & "    assetgroup AS Asset_Group, " & vbCrLf
  lsSql = lsSql & "    AssetAC AS Asset_GLAccount_BS_Code, " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Description AS Asset_GLAccount_BS_Description,  " & vbCrLf
  lsSql = lsSql & "    DeprBS AS Depreciation_GLAccount_BS, " & vbCrLf
  lsSql = lsSql & "    DeprPL As Depreciation_GLAccount_PL,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_01,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_01_Description,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_02,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_02_Description,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_03,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_03_Description,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_04,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_04_Description,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_05,  " & vbCrLf
  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_05_Description,  " & vbCrLf
  lsSql = lsSql & "    '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "    FROM FaGrp " & vbCrLf
  lsSql = lsSql & "    LEFT OUTER JOIN ( " & vbCrLf
  lsSql = lsSql & "      SELECT " & vbCrLf
  lsSql = lsSql & "      grtbk.reknr AS GLAccount_BS_Code,  " & vbCrLf
  lsSql = lsSql & "      grtbk.oms25_0 AS GLAccount_BS_Description,  " & vbCrLf
  lsSql = lsSql & "      grtbk.Class_01 As GLAccount_BS_Class_01, " & vbCrLf
  lsSql = lsSql & "      Class_01.Description_0 As GLAccount_BS_Class_01_Description, " & vbCrLf
  lsSql = lsSql & "      grtbk.Class_02 As GLAccount_BS_Class_02, " & vbCrLf
  lsSql = lsSql & "      Class_02.Description_0 As GLAccount_BS_Class_02_Description,  " & vbCrLf
  lsSql = lsSql & "      grtbk.Class_03 As GLAccount_BS_Class_03, " & vbCrLf
  lsSql = lsSql & "      Class_03.Description_0 As GLAccount_BS_Class_03_Description, " & vbCrLf
  lsSql = lsSql & "      grtbk.Class_04 As GLAccount_BS_Class_04, " & vbCrLf
  lsSql = lsSql & "      Class_04.Description_0 As GLAccount_BS_Class_04_Description,  " & vbCrLf
  lsSql = lsSql & "      grtbk.Class_05 As GLAccount_BS_Class_05, " & vbCrLf
  lsSql = lsSql & "      Class_05.Description_0 As GLAccount_BS_Class_05_Description, " & vbCrLf
  lsSql = lsSql & "      '' AS DummyColumn " & vbCrLf
  lsSql = lsSql & "      FROM grtbk " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_01 ON Class_01.ClassId = 1 AND Class_01.AccountClassCode = grtbk.Class_01 AND grtbk.Class_01 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_02 ON Class_02.ClassId = 2 AND Class_02.AccountClassCode = grtbk.Class_02 AND grtbk.Class_02 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_03 ON Class_03.ClassId = 3 AND Class_03.AccountClassCode = grtbk.Class_03 AND grtbk.Class_03 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_04 ON Class_04.ClassId = 4 AND Class_04.AccountClassCode = grtbk.Class_04 AND grtbk.Class_04 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_05 ON Class_05.ClassId = 5 AND Class_05.AccountClassCode = grtbk.Class_05 AND grtbk.Class_05 IS NOT NULL " & vbCrLf
  lsSql = lsSql & "    ) Asset_GLAccount_BS ON Asset_GLAccount_BS.GLAccount_BS_Code = FaGrp.AssetAC AND FaGrp.AssetAC IS NOT NULL " & vbCrLf
  lsSql = lsSql & "  ) AssetGroup ON AssetGroup.Asset_Group = Asset_Summary.Asset_Group " & vbCrLf
  lsSql = lsSql & "  WHERE NOT (ROUND(Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber) = 0  " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Plus_New, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Plus_Transfer, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Minus_Sales, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Minus_Transfer, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_StartPeriod, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Plus, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Minus_Sales, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Minus_Transfer, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
  lsSql = lsSql & "  ) " & vbCrLf
  lsSql = lsSql & "  -- Filter on purchase dates " & vbCrLf
  lsSql = lsSql & "  AND  " & vbCrLf
  lsSql = lsSql & "  (CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN @PurchaseDateAll = 1 THEN 1  " & vbCrLf
  lsSql = lsSql & "    WHEN @PurchaseDateAll = 0 AND Asset.Asset_Date >= @PurchaseDateFrom AND Asset.Asset_Date <= @PurchaseDateTo THEN 1 " & vbCrLf
  lsSql = lsSql & "    ELSE 0 " & vbCrLf
  lsSql = lsSql & "  END = 1) " & vbCrLf
  lsSql = lsSql & "  -- Filter on asset GL accounts BS " & vbCrLf
  lsSql = lsSql & "  AND  " & vbCrLf
  lsSql = lsSql & "  (CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN @GLAccountsAll = 1 THEN 1  " & vbCrLf
  lsSql = lsSql & "    WHEN @GLAccountsAll = 0 AND Assetgroup.Asset_GLAccount_BS_Code >= @GLAccountsFrom AND Assetgroup.Asset_GLAccount_BS_Code <= @GLAccountsTo THEN 1 " & vbCrLf
  lsSql = lsSql & "    ELSE 0 " & vbCrLf
  lsSql = lsSql & "  END = 1) " & vbCrLf
  lsSql = lsSql & "  -- Filter on asset groups " & vbCrLf
  lsSql = lsSql & "  AND  " & vbCrLf
  lsSql = lsSql & "  (CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN @AssetGroupAll = 1 THEN 1  " & vbCrLf
  lsSql = lsSql & "    WHEN @AssetGroupAll = 0 AND Assetgroup.Asset_Group >= @AssetGroupFrom AND Assetgroup.Asset_Group <= @AssetGroupTo THEN 1 " & vbCrLf
  lsSql = lsSql & "    ELSE 0 " & vbCrLf
  lsSql = lsSql & "  END = 1) " & vbCrLf
  lsSql = lsSql & "  -- Filter on asset codes " & vbCrLf
  lsSql = lsSql & "  AND  " & vbCrLf
  lsSql = lsSql & "  (CASE  " & vbCrLf
  lsSql = lsSql & "    WHEN @AssetCodeAll = 1 THEN 1  " & vbCrLf
  lsSql = lsSql & "    WHEN @AssetCodeAll = 0 AND Asset.Asset_Reference >= @AssetCodeFrom AND Asset.Asset_Reference <= @AssetCodeTo THEN 1 " & vbCrLf
  lsSql = lsSql & "    ELSE 0 " & vbCrLf
  lsSql = lsSql & "  END = 1) " & vbCrLf
  lsSql = lsSql & "  ORDER BY Asset.Asset_Reference " & vbCrLf
  lsSql = lsSql & " " & vbCrLf
  lsSql = lsSql & "DROP TABLE #prorata  " & vbCrLf
  lsSql = lsSql & "DROP TABLE #AssetSoldEntryGUId  " & vbCrLf
  lsSql = lsSql & "DROP TABLE #AssetTransferEntryGUId  " & vbCrLf
  lsSql = lsSql & "DROP TABLE #DepreciationTransferEntryGUId  " & vbCrLf
  
  
'  lsSql = lsSql & "  DECLARE @DateFrom DATETIME " & vbCrLf
'  lsSql = lsSql & "  DECLARE @DateTo DATETIME " & vbCrLf
'  lsSql = lsSql & "  DECLARE @BudgetSimulation TINYINT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @BudgetVersion CHAR(8) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @DocDate BIT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @Ratio FLOAT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @PurchaseDateAll TINYINT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @PurchaseDateFrom DATETIME " & vbCrLf
'  lsSql = lsSql & "  DECLARE @PurchaseDateTo DATETIME " & vbCrLf
'  lsSql = lsSql & "  DECLARE @GLAccountsAll TINYINT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @GLAccountsFrom CHAR(9) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @GLAccountsTo CHAR(9) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetGroupAll TINYINT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetGroupFrom CHAR(20) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetGroupTo CHAR(20) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetCodeAll TINYINT " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetCodeFrom CHAR(30) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetCodeTo CHAR(30) " & vbCrLf
'  lsSql = lsSql & "  DECLARE @SalesAccount CHAR(4)" & vbCrLf
'  lsSql = lsSql & "  DECLARE @DefaultCurrencyDecimalNumber INT" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  SET @DateFrom = {d '2003-07-01'}" & vbCrLf
'  lsSql = lsSql & "  SET @DateTo = {d '2004-06-30'}" & vbCrLf
'  lsSql = lsSql & "  SET @BudgetSimulation = 0" & vbCrLf
'  lsSql = lsSql & "  SET @BudgetVersion = 'MRP'" & vbCrLf
'  lsSql = lsSql & "  SET @DocDate = 1" & vbCrLf
'  lsSql = lsSql & "  SET @Ratio = 1" & vbCrLf
'  lsSql = lsSql & "  SET @PurchaseDateAll = 1" & vbCrLf
'  lsSql = lsSql & "  SET @PurchaseDateFrom = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "  SET @PurchaseDateTo = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "  SET @GLAccountsAll = 1" & vbCrLf
'  lsSql = lsSql & "  SET @GLAccountsFrom = ''" & vbCrLf
'  lsSql = lsSql & "  SET @GLAccountsTo = ''" & vbCrLf
'  lsSql = lsSql & "  SET @AssetGroupAll = 1" & vbCrLf
'  lsSql = lsSql & "  SET @AssetGroupFrom = ''" & vbCrLf
'  lsSql = lsSql & "  SET @AssetGroupTo = ''" & vbCrLf
'  lsSql = lsSql & "  SET @AssetCodeAll = 1" & vbCrLf
'  lsSql = lsSql & "  SET @AssetCodeFrom = ''" & vbCrLf
'  lsSql = lsSql & "  SET @AssetCodeTo = ''" & vbCrLf
'  lsSql = lsSql & "  SET @SalesAccount = '700%'" & vbCrLf
'  lsSql = lsSql & "  SET @DefaultCurrencyDecimalNumber = 2" & vbCrLf
'  lsSql = lsSql & "  /* Initialization */" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  IF @DateFrom = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "    SELECT @DateFrom = MIN(bgdatum) FROM perdat" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  IF @DateTo = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "    SELECT @DateTo = MAX(eddatum) FROM perdat" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  IF @PurchaseDateFrom = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "    SELECT @PurchaseDateFrom = MIN(bgdatum) FROM perdat" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  IF @PurchaseDateTo = {d '1870-01-01'}" & vbCrLf
'  lsSql = lsSql & "    SELECT @PurchaseDateTo = MAX(eddatum) FROM perdat" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  PRINT ''" & vbCrLf
'  lsSql = lsSql & "  PRINT '*==================================================================*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* CreateViewLDBEAssetMovements                                     *'" & vbCrLf
'  lsSql = lsSql & "  PRINT '*==================================================================*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @DateFrom         : ' + LEFT(CONVERT(CHAR(10), @DateFrom, 103) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @DateTo           : ' + LEFT(CONVERT(CHAR(10), @DateTo, 103) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @BudgetSimulation : ' + LEFT((CASE @BudgetSimulation WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @BudgetVersion    : ' + LEFT(@BudgetVersion + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @DocDate    : ' + LEFT((CASE @DocDate WHEN 0 THEN 'datum' WHEN 1 THEN 'DocDate' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @Ratio            : ' + LEFT(CAST(@Ratio AS CHAR(10)) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @PurchaseDateAll  : ' + LEFT((CASE @PurchaseDateAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @PurchaseDateFrom : ' + LEFT(CONVERT(CHAR(10), @PurchaseDateFrom, 103) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @PurchaseDateTo   : ' + LEFT(CONVERT(CHAR(10), @PurchaseDateTo, 103) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @GLAccountsAll    : ' + LEFT((CASE @GLAccountsAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @GLAccountsFrom   : ' + LEFT(@GLAccountsFrom + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @GLAccountsTo     : ' + LEFT(@GLAccountsTo + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetGroupAll    : ' + LEFT((CASE @AssetGroupAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetGroupFrom   : ' + LEFT(@AssetGroupFrom + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetGroupTo     : ' + LEFT(@AssetGroupTo + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetCodeAll     : ' + LEFT((CASE @AssetCodeAll WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END) + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetCodeFrom    : ' + LEFT(@AssetCodeFrom + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @AssetCodeTo      : ' + LEFT(@AssetCodeTo + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '* @SalesAccount      : ' + LEFT(@SalesAccount + SPACE(45), 45) + '*'" & vbCrLf
'  lsSql = lsSql & "  PRINT '*==================================================================*'" & vbCrLf
'  lsSql = lsSql & "  " & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetCode AS CHAR(20)" & vbCrLf
'  lsSql = lsSql & "  DECLARE @AssetAccount AS CHAR(9)" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  -- Create Temporary and fill it immediatly" & vbCrLf
'  lsSql = lsSql & "  CREATE TABLE #prorata(bkjrcode SMALLINT, prorata TINYINT)" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  /* Fill table #prorata */" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  /*----------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  /* Create tempory table for transactions solded */" & vbCrLf
'  lsSql = lsSql & "  /*----------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  -- Create Temporary Sold Transactions" & vbCrLf
'  lsSql = lsSql & "  SELECT facode AS AssetCode, EntryGUId, docnumber, DocDate, CAST(bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl, oms25 " & vbCrLf
'  lsSql = lsSql & "  INTO #AssetSoldEntryGUId " & vbCrLf
'  lsSql = lsSql & "  FROM gbkmut " & vbCrLf
'  lsSql = lsSql & "  WHERE 1 = 0" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  -- Open cursor for Asset sold" & vbCrLf
'  lsSql = lsSql & "  DECLARE AssetSold_Cursor CURSOR FOR " & vbCrLf
'  lsSql = lsSql & "    SELECT DISTINCT" & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode, " & vbCrLf
'  lsSql = lsSql & "    FaGrp.AssetAC AS AssetAccount" & vbCrLf
'  lsSql = lsSql & "    FROM ItemNumbers" & vbCrLf
'  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      assetgroup," & vbCrLf
'  lsSql = lsSql & "      AssetAC" & vbCrLf
'  lsSql = lsSql & "      FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
'  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'  lsSql = lsSql & "    AND ItemNumbers.Status = 'S'" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  OPEN AssetSold_Cursor" & vbCrLf
'  lsSql = lsSql & "  FETCH NEXT FROM AssetSold_Cursor INTO @AssetCode, @AssetAccount" & vbCrLf
'  lsSql = lsSql & "  WHILE @@FETCH_STATUS = 0" & vbCrLf
'  lsSql = lsSql & "  BEGIN" & vbCrLf
'  lsSql = lsSql & "    -- Find the latest disposal entry guid which will be declared as sold transaction." & vbCrLf
'  lsSql = lsSql & "    -- AssetCode, EntryGUId, docnumber, DocDate, bdr_hfl, oms25 " & vbCrLf
'  lsSql = lsSql & "    INSERT INTO #AssetSoldEntryGUId " & vbCrLf
'  lsSql = lsSql & "      SELECT TOP 1 gbkmut.facode AS AssetCode, " & vbCrLf
'  lsSql = lsSql & "      gbkmut.EntryGUId, " & vbCrLf
'  lsSql = lsSql & "      gbkmut.docnumber, " & vbCrLf
'  lsSql = lsSql & "      gbkmut.DocDate, " & vbCrLf
'  lsSql = lsSql & "      Sales.bdr_hfl, " & vbCrLf
'  lsSql = lsSql & "      gbkmut.oms25" & vbCrLf
'  lsSql = lsSql & "      FROM gbkmut " & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT EntryGUId, CAST(bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl " & vbCrLf
'  lsSql = lsSql & "        FROM gbkmut" & vbCrLf
'  lsSql = lsSql & "        WHERE LTRIM(reknr) LIKE @SalesAccount " & vbCrLf
'  lsSql = lsSql & "      ) Sales ON Sales.EntryGUId = gbkmut.EntryGUId" & vbCrLf
'  lsSql = lsSql & "      WHERE gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "      AND gbkmut.TransSubType = 'I' " & vbCrLf
'  lsSql = lsSql & "      AND gbkmut.FaCode = @AssetCode " & vbCrLf
'  lsSql = lsSql & "      AND gbkmut.reknr = @AssetAccount" & vbCrLf
'  lsSql = lsSql & "      ORDER BY gbkmut.datum DESC" & vbCrLf
'
'  lsSql = lsSql & " " & vbCrLf
'  lsSql = lsSql & "      IF @@ROWCOUNT = 0 " & vbCrLf
'  lsSql = lsSql & "        INSERT INTO #AssetSoldEntryGUId  " & vbCrLf
'  lsSql = lsSql & "          SELECT TOP 1 gbkmut.facode AS AssetCode,  " & vbCrLf
'  lsSql = lsSql & "          gbkmut.EntryGUId,  " & vbCrLf
'  lsSql = lsSql & "          gbkmut.docnumber,  " & vbCrLf
'  lsSql = lsSql & "          gbkmut.DocDate,  " & vbCrLf
'  lsSql = lsSql & "          - gbkmut.bdr_hfl,  " & vbCrLf
'  lsSql = lsSql & "          gbkmut.oms25 " & vbCrLf
'  lsSql = lsSql & "          FROM gbkmut  " & vbCrLf
'  lsSql = lsSql & "          WHERE gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType = 'I'  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.FaCode = @AssetCode  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = @AssetAccount " & vbCrLf
'  lsSql = lsSql & "          ORDER BY gbkmut.datum DESC " & vbCrLf
'  lsSql = lsSql & " " & vbCrLf
'
'  lsSql = lsSql & "    FETCH NEXT FROM AssetSold_Cursor INTO @AssetCode, @AssetAccount" & vbCrLf
'  lsSql = lsSql & "  END" & vbCrLf
'  lsSql = lsSql & "  CLOSE AssetSold_Cursor" & vbCrLf
'  lsSql = lsSql & "  DEALLOCATE AssetSold_Cursor" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  /*--------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  /* Create tempory table for transfered assets */" & vbCrLf
'  lsSql = lsSql & "  /*--------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  SELECT DISTINCT facode AS AssetCode, EntryGUId" & vbCrLf
'  lsSql = lsSql & "  INTO #AssetTransferEntryGUId" & vbCrLf
'  lsSql = lsSql & "  FROM gbkmut" & vbCrLf
'  lsSql = lsSql & "  INNER JOIN (" & vbCrLf
'
'  lsSql = lsSql & "    SELECT DISTINCT" & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode, " & vbCrLf
'  lsSql = lsSql & "    FaGrp.AssetAC AS AssetAccount" & vbCrLf
'  lsSql = lsSql & "    FROM (" & vbCrLf
'  lsSql = lsSql & "      SELECT " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Number, " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Classification, " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Status, " & vbCrLf
'  lsSql = lsSql & "      ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup" & vbCrLf
'  lsSql = lsSql & "      FROM ItemNumbers" & vbCrLf
'  lsSql = lsSql & "      LEFT JOIN (" & vbCrLf
'  lsSql = lsSql & "        -- Requery transfert history of the asset" & vbCrLf
'  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.olddataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "        FROM fatran " & vbCrLf
'  lsSql = lsSql & "        WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "        UNION" & vbCrLf
'  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.newdataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "        FROM fatran " & vbCrLf
'  lsSql = lsSql & "        WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "      ) fatran ON fatran.assetcode = ItemNumbers.Number" & vbCrLf
'  lsSql = lsSql & "    ) ItemNumbers " & vbCrLf
'  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      assetgroup," & vbCrLf
'  lsSql = lsSql & "      AssetAC" & vbCrLf
'  lsSql = lsSql & "      FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
'  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S')" & vbCrLf
'
''  lsSql = lsSql & "    SELECT DISTINCT" & vbCrLf
''  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode, " & vbCrLf
''  lsSql = lsSql & "    FaGrp.AssetAC AS AssetAccount" & vbCrLf
''  lsSql = lsSql & "    FROM ItemNumbers" & vbCrLf
''  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
''  lsSql = lsSql & "      SELECT" & vbCrLf
''  lsSql = lsSql & "      assetgroup," & vbCrLf
''  lsSql = lsSql & "      AssetAC" & vbCrLf
''  lsSql = lsSql & "      FROM FaGrp" & vbCrLf
''  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
''  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'
'  lsSql = lsSql & "  ) Assets ON Assets.AssetCode = gbkmut.FaCode AND Assets.AssetAccount = gbkmut.reknr" & vbCrLf
'  lsSql = lsSql & "  WHERE TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "  AND FaCode IS NOT NULL" & vbCrLf
'  lsSql = lsSql & "  AND EXISTS(" & vbCrLf
'  lsSql = lsSql & "    SELECT EntryGUId " & vbCrLf
'  lsSql = lsSql & "    FROM gbkmut g2 " & vbCrLf
'  lsSql = lsSql & "    WHERE TransSubType = 'I' " & vbCrLf
'  lsSql = lsSql & "    AND g2.EntryGUId = gbkmut.Entryguid " & vbCrLf
'  lsSql = lsSql & "    AND g2.FaCode = gbkmut.FaCode " & vbCrLf
'  lsSql = lsSql & "  )" & vbCrLf
'  lsSql = lsSql & "  AND NOT EXISTS(" & vbCrLf
'  lsSql = lsSql & "    SELECT EntryGUId " & vbCrLf
'  lsSql = lsSql & "    FROM #AssetSoldEntryGUId " & vbCrLf
'  lsSql = lsSql & "    WHERE #AssetSoldEntryGUId.AssetCode = gbkmut.FaCode " & vbCrLf
'  lsSql = lsSql & "    AND #AssetSoldEntryGUId.EntryGUId = gbkmut.EntryGUId" & vbCrLf
'  lsSql = lsSql & "  ) " & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  /*---------------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  /* Create tempory table for transfered depreciations */" & vbCrLf
'  lsSql = lsSql & "  /*---------------------------------------------------*/" & vbCrLf
'  lsSql = lsSql & "  SELECT DISTINCT facode AS AssetCode, EntryGUId" & vbCrLf
'  lsSql = lsSql & "  INTO #DepreciationTransferEntryGUId" & vbCrLf
'  lsSql = lsSql & "  FROM gbkmut" & vbCrLf
'  lsSql = lsSql & "  INNER JOIN (" & vbCrLf
'
'  lsSql = lsSql & "    SELECT DISTINCT" & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode, " & vbCrLf
'  lsSql = lsSql & "    FaGrp.DeprBS AS DepreciationAccount" & vbCrLf
'  lsSql = lsSql & "    FROM (" & vbCrLf
'  lsSql = lsSql & "      SELECT " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Number, " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Classification, " & vbCrLf
'  lsSql = lsSql & "      ItemNumbers.Status, " & vbCrLf
'  lsSql = lsSql & "      ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup" & vbCrLf
'  lsSql = lsSql & "      FROM ItemNumbers" & vbCrLf
'  lsSql = lsSql & "      LEFT JOIN (" & vbCrLf
'  lsSql = lsSql & "        -- Requery transfert history of the asset" & vbCrLf
'  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.olddataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "        FROM fatran " & vbCrLf
'  lsSql = lsSql & "        WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "        UNION" & vbCrLf
'  lsSql = lsSql & "        SELECT fatran.assetcode, fatran.newdataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "        FROM fatran " & vbCrLf
'  lsSql = lsSql & "        WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "      ) fatran ON fatran.assetcode = ItemNumbers.Number" & vbCrLf
'  lsSql = lsSql & "    ) ItemNumbers " & vbCrLf
'  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      assetgroup," & vbCrLf
'  lsSql = lsSql & "      DeprBS" & vbCrLf
'  lsSql = lsSql & "      FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
'  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S')" & vbCrLf
'
''  lsSql = lsSql & "    SELECT DISTINCT" & vbCrLf
''  lsSql = lsSql & "    ItemNumbers.Number AS AssetCode, " & vbCrLf
''  lsSql = lsSql & "    FaGrp.DeprBS AS DepreciationAccount" & vbCrLf
''  lsSql = lsSql & "    FROM ItemNumbers" & vbCrLf
''  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
''  lsSql = lsSql & "      SELECT" & vbCrLf
''  lsSql = lsSql & "      assetgroup," & vbCrLf
''  lsSql = lsSql & "      DeprBS" & vbCrLf
''  lsSql = lsSql & "      FROM FaGrp" & vbCrLf
''  lsSql = lsSql & "    ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
''  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'
'  lsSql = lsSql & "  ) Assets ON Assets.AssetCode = gbkmut.FaCode AND Assets.DepreciationAccount = gbkmut.reknr" & vbCrLf
'  lsSql = lsSql & "  WHERE TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "  AND FaCode IS NOT NULL" & vbCrLf
'  lsSql = lsSql & "  AND EXISTS(" & vbCrLf
'  lsSql = lsSql & "    SELECT EntryGUId " & vbCrLf
'  lsSql = lsSql & "    FROM gbkmut g2 " & vbCrLf
'  lsSql = lsSql & "    WHERE TransSubType = 'I' " & vbCrLf
'  lsSql = lsSql & "    AND g2.EntryGUId = gbkmut.Entryguid" & vbCrLf
'  lsSql = lsSql & "    AND g2.FaCode = gbkmut.FaCode " & vbCrLf
'  lsSql = lsSql & "  )" & vbCrLf
'  lsSql = lsSql & "  AND NOT EXISTS(" & vbCrLf
'  lsSql = lsSql & "    SELECT EntryGUId " & vbCrLf
'  lsSql = lsSql & "    FROM #AssetSoldEntryGUId " & vbCrLf
'  lsSql = lsSql & "    WHERE #AssetSoldEntryGUId.AssetCode = gbkmut.FaCode " & vbCrLf
'  lsSql = lsSql & "    AND #AssetSoldEntryGUId.EntryGUId = gbkmut.EntryGUId" & vbCrLf
'  lsSql = lsSql & "  ) " & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "--  SELECT * FROM #DepreciationTransferEntryGUId" & vbCrLf
'  lsSql = lsSql & "--  SELECT * FROM #AssetTransferEntryGUId" & vbCrLf
'  lsSql = lsSql & "--  SELECT * FROM #AssetSoldEntryGUId" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "  SELECT" & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Reference AS SerialNumber," & vbCrLf
'  lsSql = lsSql & "  Asset.FinancialYear AS Inv_Year," & vbCrLf
'  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_03 AS Header, " & vbCrLf
'  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_03_Description AS Descr_Header, " & vbCrLf
'  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_04 AS SubHeader, " & vbCrLf
'  lsSql = lsSql & "  AssetGroup.GLAccount_BS_Class_04_Description AS Descr_SubHeader, " & vbCrLf
'  lsSql = lsSql & "  AssetGroup.Asset_GLAccount_BS_Code AS GLAccount, " & vbCrLf
'  lsSql = lsSql & "  AssetGroup.Asset_GLAccount_BS_Description AS GLAccount_Descr," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Date AS PurchaseDate," & vbCrLf
'  lsSql = lsSql & "  Asset.docnumber AS Invoice_Nr," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Supplier_Name AS Supplier," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Description AS Descr_Inv," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Description AS Descr_Art," & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Depreciation_PL, " & vbCrLf
'  lsSql = lsSql & "  CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <> 0 " & vbCrLf
'  lsSql = lsSql & "      AND ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <= ABS(ROUND((Asset_Depreciation_PrimaryMethod_LinearPercentage * @Ratio / 100) * Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber))" & vbCrLf
'  lsSql = lsSql & "      THEN 'l'" & vbCrLf
'  lsSql = lsSql & "    ELSE" & vbCrLf
'  lsSql = lsSql & "      LEFT(Asset.Asset_Depreciation_PrimaryMethod, 1) " & vbCrLf
'  lsSql = lsSql & "  END AS Depr_Methode," & vbCrLf
'  lsSql = lsSql & "  CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <> 0 " & vbCrLf
'  lsSql = lsSql & "      AND ABS(ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber)) <= ABS(ROUND((Asset_Depreciation_PrimaryMethod_LinearPercentage * @Ratio / 100) * Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber))" & vbCrLf
'  lsSql = lsSql & "      THEN Asset.Asset_Depreciation_PrimaryMethod_LinearPercentage" & vbCrLf
'  lsSql = lsSql & "    ELSE" & vbCrLf
'  lsSql = lsSql & "      Asset.Asset_Depreciation_PrimaryMethod_Percentage" & vbCrLf
'  lsSql = lsSql & "  END AS Depr_Perc, " & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Depreciation_Days AS Dur_Count, " & vbCrLf
'  lsSql = lsSql & "  '365' AS Dur_Denom," & vbCrLf
'  lsSql = lsSql & "  CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN Asset.Asset_Investment_Deduction = 1 THEN 'O'" & vbCrLf
'  lsSql = lsSql & "    WHEN Asset.Asset_Investment_Deduction = 2 THEN 'S'" & vbCrLf
'  lsSql = lsSql & "    ELSE 'N'" & vbCrLf
'  lsSql = lsSql & "  END AS Inv_Ded, " & vbCrLf
'  lsSql = lsSql & "  -----------" & vbCrLf
'  lsSql = lsSql & "  -- ASSET --" & vbCrLf
'  lsSql = lsSql & "  -----------" & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Asset_StartPeriod AS Purc_Prev," & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Asset_Minus_Sales AS Purc_Sales," & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Asset_Minus_Transfer + Asset_Summary.Asset_Plus_Transfer AS Purc_Transfer," & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Asset_Plus_New AS Purc_New," & vbCrLf
'  lsSql = lsSql & "  0 AS Purc_Import," & vbCrLf
'  lsSql = lsSql & "  ----------" & vbCrLf
'  lsSql = lsSql & "  -- DEPR --" & vbCrLf
'  lsSql = lsSql & "  ----------" & vbCrLf
'  lsSql = lsSql & "  CASE  " & vbCrLf
'  lsSql = lsSql & "    WHEN Asset_Summary.Asset_StartPeriod = 0 THEN 0 " & vbCrLf
'  lsSql = lsSql & "    ELSE Asset_Summary.Depreciation_StartPeriod  " & vbCrLf
'  lsSql = lsSql & "  END AS Depr_Previous, " & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Depreciation_Minus_Sales AS Depr_Sales," & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Depreciation_Minus_Transfer + Asset_Summary.Depreciation_Plus AS Depr_Transfert, " & vbCrLf
'  lsSql = lsSql & "  Asset_Summary.Depreciation_PL AS Depr_New," & vbCrLf
'  lsSql = lsSql & "  0 AS Depr_Import,                                         ---===TODO===---" & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_SalesEntryNumber," & vbCrLf
'  lsSql = lsSql & "  0 as Sales_Line,                                          ---===TODO===---" & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_SalesDocDate," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_SalesAmount," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_SalesDescr," & vbCrLf
'  lsSql = lsSql & "  CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN Asset.prorata = 0 THEN 'N'" & vbCrLf
'  lsSql = lsSql & "    WHEN Asset.prorata = 1 THEN 'Y'" & vbCrLf
'  lsSql = lsSql & "    ELSE 'N'" & vbCrLf
'  lsSql = lsSql & "  END AS Pro_Rata," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Numyears," & vbCrLf
'  lsSql = lsSql & "  Asset.Asset_Numyears_Depr" & vbCrLf
'  lsSql = lsSql & "  /* Asset */" & vbCrLf
'  lsSql = lsSql & "  FROM (" & vbCrLf
'  lsSql = lsSql & "    SELECT" & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.Description AS Asset_Description," & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.Number AS Asset_Reference," & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.UserDate_03 AS Asset_Date," & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.ResidualValue AS Asset_ResidualValue," & vbCrLf
'  lsSql = lsSql & "    YEAR(FinancialYear.EndDate) AS FinancialYear," & vbCrLf
'  lsSql = lsSql & "    ItemNumbers.PrimaryMethod AS Asset_Depreciation_PrimaryMethod," & vbCrLf
'  lsSql = lsSql & "    Items.Item_Assortment_Code AS Asset_Item_Assortment_Code, " & vbCrLf
'  lsSql = lsSql & "    Items.Item_Assortment_Description AS Asset_Item_Assortment_Description, " & vbCrLf
'  lsSql = lsSql & "    Items.Item_Code AS Asset_Item_Code, " & vbCrLf
'  lsSql = lsSql & "    Items.Item_Description AS Asset_Item_Description, " & vbCrLf
'  lsSql = lsSql & "    Supplier.Name AS Asset_Supplier_Name, " & vbCrLf
'  lsSql = lsSql & "    CAST( CASE PrimaryMethod.DeprCode" & vbCrLf
'  lsSql = lsSql & "      WHEN 'AB' /* Degressif */ THEN" & vbCrLf
'  lsSql = lsSql & "        CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN PrimaryMethod.LinearPercentage <> 0 THEN CEILING(100 / ( PrimaryMethod.LinearPercentage *" & vbCrLf
'  lsSql = lsSql & "            CASE PrimaryMethod.calcbasis" & vbCrLf
'  lsSql = lsSql & "              WHEN 'D' THEN 365" & vbCrLf
'  lsSql = lsSql & "              WHEN 'P' THEN 12" & vbCrLf
'  lsSql = lsSql & "              ELSE 1" & vbCrLf
'  lsSql = lsSql & "            END ) )" & vbCrLf
'  lsSql = lsSql & "          ELSE 0" & vbCrLf
'  lsSql = lsSql & "        END" & vbCrLf
'  lsSql = lsSql & "      WHEN 'SA' /* Linear */ THEN" & vbCrLf
'  lsSql = lsSql & "        CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN PrimaryMethod.Percentage <> 0 THEN CEILING(100 / ( PrimaryMethod.Percentage *" & vbCrLf
'  lsSql = lsSql & "            CASE PrimaryMethod.calcbasis" & vbCrLf
'  lsSql = lsSql & "              WHEN 'D' THEN 365" & vbCrLf
'  lsSql = lsSql & "              WHEN 'P' THEN 12" & vbCrLf
'  lsSql = lsSql & "              ELSE 1" & vbCrLf
'  lsSql = lsSql & "            END ) )" & vbCrLf
'  lsSql = lsSql & "          ELSE 0" & vbCrLf
'  lsSql = lsSql & "        END" & vbCrLf
'  lsSql = lsSql & "      ELSE /* Manual */ 0" & vbCrLf
'  lsSql = lsSql & "    END AS SMALLINT) AS Asset_Numyears," & vbCrLf
'  lsSql = lsSql & "    DATEDIFF(YEAR, ItemNumbers.DateStart, ItemNumbers.DateEnd) + 1 AS Asset_Numyears_Depr," & vbCrLf
'  lsSql = lsSql & "    CASE PrimaryMethod.calcbasis" & vbCrLf
'  lsSql = lsSql & "      WHEN 'D' THEN 365 * PrimaryMethod.Percentage" & vbCrLf
'  lsSql = lsSql & "      WHEN 'P' THEN 12 * PrimaryMethod.Percentage" & vbCrLf
'  lsSql = lsSql & "      ELSE 1 * PrimaryMethod.Percentage" & vbCrLf
'  lsSql = lsSql & "    END AS Asset_Depreciation_PrimaryMethod_Percentage, " & vbCrLf
'  lsSql = lsSql & "    CASE PrimaryMethod.calcbasis" & vbCrLf
'  lsSql = lsSql & "      WHEN 'D' THEN 365 * PrimaryMethod.LinearPercentage" & vbCrLf
'  lsSql = lsSql & "      WHEN 'P' THEN 12 * PrimaryMethod.LinearPercentage" & vbCrLf
'  lsSql = lsSql & "      ELSE 1 * PrimaryMethod.LinearPercentage" & vbCrLf
'  lsSql = lsSql & "    END AS Asset_Depreciation_PrimaryMethod_LinearPercentage, " & vbCrLf
'
'  ' Localisation Globe 2003 - 12.822.502 - Start
'
'  lsSql = lsSql & "    CASE  " & vbCrLf
'  lsSql = lsSql & "      WHEN @BudgetSimulation = 1 /* Budget */ THEN  " & vbCrLf
'  lsSql = lsSql & "        CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN ISNULL(#prorata.prorata, 0) = 1 THEN " & vbCrLf
'  lsSql = lsSql & "            CASE  " & vbCrLf
'  lsSql = lsSql & "              WHEN @BudgetVersion = 'MRP' AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.DateStart, FinancialYear.EndDate) + 1  " & vbCrLf
'  lsSql = lsSql & "              ELSE 365 " & vbCrLf
'  lsSql = lsSql & "            END " & vbCrLf
'  lsSql = lsSql & "          ELSE " & vbCrLf
'  lsSql = lsSql & "            CASE  " & vbCrLf
'  lsSql = lsSql & "              WHEN @BudgetVersion = 'ASSET_3' AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.UserDate_03, FinancialYear.EndDate) + 1  " & vbCrLf
'  lsSql = lsSql & "              ELSE 365 " & vbCrLf
'  lsSql = lsSql & "            END " & vbCrLf
'  lsSql = lsSql & "        END " & vbCrLf
'  lsSql = lsSql & "      ELSE " & vbCrLf
'  lsSql = lsSql & "        CASE  " & vbCrLf
'  lsSql = lsSql & "          WHEN ISNULL(#prorata.prorata, 0) = 1 AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.DateStart, FinancialYear.EndDate) + 1  " & vbCrLf
'  lsSql = lsSql & "          ELSE 365 " & vbCrLf
'  lsSql = lsSql & "        END  " & vbCrLf
'  lsSql = lsSql & "    END AS Asset_Depreciation_Days,  " & vbCrLf
'
'  'lsSql = lsSql & "    CASE " & vbCrLf
'  'lsSql = lsSql & "      WHEN ISNULL(#prorata.prorata, 0) = 1 AND @DateFrom BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate THEN DATEDIFF(DAY, ItemNumbers.DateStart, FinancialYear.EndDate) + 1 " & vbCrLf
'  'lsSql = lsSql & "      ELSE 365" & vbCrLf
'  'lsSql = lsSql & "    END AS Asset_Depreciation_Days, " & vbCrLf
'
'  ' Localisation Globe 2003 - 12.822.502 - End
'
'  lsSql = lsSql & "    DATEDIFF(DAY, FinancialYear.StartDate, FinancialYear.EndDate) + 1 AS FinancialYear_Depreciation_Days, " & vbCrLf
'  lsSql = lsSql & "    ISNULL(ItemNumbers.UserInteger_05, 0) AS Asset_Investment_Deduction, " & vbCrLf
'  lsSql = lsSql & "    #AssetSoldEntryGUId.docnumber AS Asset_SalesEntryNumber," & vbCrLf
'  lsSql = lsSql & "    #AssetSoldEntryGUId.DocDate AS Asset_SalesDocDate," & vbCrLf
'  lsSql = lsSql & "    #AssetSoldEntryGUId.bdr_hfl AS Asset_SalesAmount," & vbCrLf
'  lsSql = lsSql & "    #AssetSoldEntryGUId.oms25 AS Asset_SalesDescr," & vbCrLf
'  lsSql = lsSql & "    gbkmutjoin.bkstnr as Docnumber," & vbCrLf
'  lsSql = lsSql & "    ISNULL(#prorata.prorata, 0) as prorata," & vbCrLf
'  lsSql = lsSql & "    '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "    FROM ItemNumbers" & vbCrLf
'  lsSql = lsSql & "    /* Items */" & vbCrLf
'  lsSql = lsSql & "    INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      Items.ItemCode AS Item_Code, " & vbCrLf
'  lsSql = lsSql & "      Items.Description AS Item_Description, " & vbCrLf
'  lsSql = lsSql & "      Items.Assortment AS Item_Assortment_Code, " & vbCrLf
'  lsSql = lsSql & "      ItemAssortment.Description AS Item_Assortment_Description" & vbCrLf
'  lsSql = lsSql & "      FROM Items" & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT " & vbCrLf
'  lsSql = lsSql & "        ItemAssortment.Assortment, " & vbCrLf
'  lsSql = lsSql & "        ItemAssortment.Description_0 AS Description " & vbCrLf
'  lsSql = lsSql & "        FROM ItemAssortment " & vbCrLf
'  lsSql = lsSql & "      ) ItemAssortment ON ItemAssortment.Assortment = Items.Assortment" & vbCrLf
'  lsSql = lsSql & "    ) Items ON Items.Item_Code = ItemNumbers.ItemCode" & vbCrLf
'  lsSql = lsSql & "    /* PrimaryMethod */" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT " & vbCrLf
'  lsSql = lsSql & "      deprCode AS DeprCode, " & vbCrLf
'  lsSql = lsSql & "      numyears AS Numyears, " & vbCrLf
'  lsSql = lsSql & "      deprmeth AS Method, " & vbCrLf
'  lsSql = lsSql & "      percper AS Percentage," & vbCrLf
'  lsSql = lsSql & "      percper2 AS LinearPercentage, " & vbCrLf
'  lsSql = lsSql & "      calcbasis" & vbCrLf
'  lsSql = lsSql & "      FROM fadprm" & vbCrLf
'  lsSql = lsSql & "    ) PrimaryMethod ON PrimaryMethod.Method = ItemNumbers.PrimaryMethod" & vbCrLf
'  lsSql = lsSql & "    /* FinancialYear */" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      MIN(bgdatum) AS StartDate," & vbCrLf
'  lsSql = lsSql & "      MAX(eddatum) AS EndDate," & vbCrLf
'  lsSql = lsSql & "      bkjrcode As Code" & vbCrLf
'  lsSql = lsSql & "      FROM perdat" & vbCrLf
'  lsSql = lsSql & "      GROUP BY bkjrcode" & vbCrLf
'  lsSql = lsSql & "    ) FinancialYear ON ItemNumbers.UserDate_03 BETWEEN FinancialYear.StartDate AND FinancialYear.EndDate" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      crdnr AS Code, " & vbCrLf
'  lsSql = lsSql & "      CASE crdnr" & vbCrLf
'  lsSql = lsSql & "        WHEN '000000' THEN ''" & vbCrLf
'  lsSql = lsSql & "        ELSE cmp_name" & vbCrLf
'  lsSql = lsSql & "      END As Name" & vbCrLf
'  lsSql = lsSql & "      FROM Cicmpy" & vbCrLf
'  lsSql = lsSql & "      WHERE crdnr IS NOT NULL" & vbCrLf
'  lsSql = lsSql & "    ) Supplier ON ItemNumbers.SupplierNumber = Supplier.Code" & vbCrLf
'  lsSql = lsSql & "  --------------------------------------------------------------------------------------------------------------------------------------" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN (SELECT bkstnr, transactionguid FROM gbkmut)gbkmutJoin ON ItemNumbers.transactionguid = gbkmutJoin.transactionguid" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN #AssetSoldEntryGUId ON ItemNumbers.Number = #AssetSoldEntryGUId.AssetCode" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN #prorata ON #prorata.bkjrcode = FinancialYear.Code" & vbCrLf
'  lsSql = lsSql & "  --------------------------------------------------------------------------------------------------------------------------------------" & vbCrLf
'  lsSql = lsSql & "    WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'  lsSql = lsSql & "    AND ItemNumbers.Status IN ('A','G','D','C','B','S')" & vbCrLf
'  lsSql = lsSql & "    AND FinancialYear.code IS NOT NULL" & vbCrLf
'  lsSql = lsSql & "  ) Asset" & vbCrLf
'  lsSql = lsSql & "  /* Asset_Summary */" & vbCrLf
'  lsSql = lsSql & "  INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "    SELECT" & vbCrLf
'  lsSql = lsSql & "    Asset_Reference," & vbCrLf
'  lsSql = lsSql & "    Asset_Group, " & vbCrLf
'  lsSql = lsSql & "    SUM(Asset_StartPeriod) AS Asset_StartPeriod," & vbCrLf
'  lsSql = lsSql & "    SUM(Asset_Plus_New) AS Asset_Plus_New," & vbCrLf
'  lsSql = lsSql & "    SUM(Asset_Plus_Transfer) AS Asset_Plus_Transfer," & vbCrLf
'  lsSql = lsSql & "    SUM(Asset_Minus_Sales) AS Asset_Minus_Sales," & vbCrLf
'  lsSql = lsSql & "    SUM(Asset_Minus_Transfer) AS Asset_Minus_Transfer," & vbCrLf
'  lsSql = lsSql & "    SUM(Depreciation_StartPeriod) AS Depreciation_StartPeriod," & vbCrLf
'  lsSql = lsSql & "    SUM(Depreciation_Plus) AS Depreciation_Plus," & vbCrLf
'  lsSql = lsSql & "    SUM(Depreciation_Minus_Sales) AS Depreciation_Minus_Sales," & vbCrLf
'  lsSql = lsSql & "    SUM(Depreciation_Minus_Transfer) AS Depreciation_Minus_Transfer," & vbCrLf
'  lsSql = lsSql & "    SUM(Depreciation_PL) AS Depreciation_PL" & vbCrLf
'  lsSql = lsSql & "    FROM (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      TransSubType_Description.Description AS TransSubType_Description," & vbCrLf
'  lsSql = lsSql & "      gbkmut.TransType," & vbCrLf
'  lsSql = lsSql & "      TransType_Description.Description AS TransType_Description," & vbCrLf
'  lsSql = lsSql & "      grtbk.bal_vw," & vbCrLf
'  lsSql = lsSql & "      grtbk.bal_vw_Description," & vbCrLf
'  lsSql = lsSql & "      CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "        WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "        WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "      END AS TransactionDate, " & vbCrLf
'  lsSql = lsSql & "      gbkmut.reknr," & vbCrLf
'  lsSql = lsSql & "      CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) AS bdr_hfl," & vbCrLf
'  lsSql = lsSql & "      gbkmut.TransSubType," & vbCrLf
'  lsSql = lsSql & "      gbkmut.facode AS Asset_Reference," & vbCrLf
'  lsSql = lsSql & "      Asset.AssetGroup AS Asset_Group, " & vbCrLf
'  lsSql = lsSql & "      Asset.AssetAC AS Asset_BL," & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "      /*---------" & vbCrLf
'  lsSql = lsSql & "      -- Asset --" & vbCrLf
'  lsSql = lsSql & "      ---------*/" & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Purchase & Revaluation" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END < @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Asset" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END < @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Asset_StartPeriod," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Purchase & Revaluation" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId NOT IN (SELECT EntryGUId FROM #AssetTransferEntryGUId)" & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Asset_Plus_New," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Purchase & Revaluation" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #AssetTransferEntryGUId)" & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType NOT IN ('I', 'V') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Asset_Plus_Transfer," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Asset" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId = #AssetSoldEntryGUId.EntryGUId " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Asset_Minus_Sales," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Asset" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #AssetTransferEntryGUId)" & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.AssetAC " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Asset_Minus_Transfer," & vbCrLf
'  lsSql = lsSql & "  " & vbCrLf
'
'  lsSql = lsSql & "      /*----------------" & vbCrLf
'  lsSql = lsSql & "      -- Depreciation --" & vbCrLf
'  lsSql = lsSql & "      ----------------*/" & vbCrLf
'  lsSql = lsSql & "      CASE " & vbCrLf
'  lsSql = lsSql & "        -- Depreciation - always actual " & vbCrLf
'  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS  " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate  " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END < @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Storno " & vbCrLf
'  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS  " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate  " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END < @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */ THEN " & vbCrLf
'  lsSql = lsSql & "          CASE  " & vbCrLf
'  lsSql = lsSql & "            WHEN gbkmut.datum > ISNULL(Asset.UltimateDepreciation, gbkmut.datum-1) /* Budget */ " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.TransType IN ('B')  " & vbCrLf
'  lsSql = lsSql & "              AND " & vbCrLf
'  lsSql = lsSql & "                (  " & vbCrLf
'  lsSql = lsSql & "                  (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
'  lsSql = lsSql & "                  OR " & vbCrLf
'  lsSql = lsSql & "                  ( " & vbCrLf
'  lsSql = lsSql & "                    @BudgetVersion = 'ASSET_3'  " & vbCrLf
'  lsSql = lsSql & "                    AND ( " & vbCrLf
'  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
'  lsSql = lsSql & "                      OR " & vbCrLf
'  lsSql = lsSql & "                      (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
'  lsSql = lsSql & "                    ) " & vbCrLf
'  lsSql = lsSql & "                  ) " & vbCrLf
'  lsSql = lsSql & "                  OR " & vbCrLf
'  lsSql = lsSql & "                  (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
'  lsSql = lsSql & "                ) " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.datum > asset.transactiondatefrom  " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.datum <= asset.transactiondateto  " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.datum < @DateFrom THEN CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') /* Actual */ " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('V')  " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS  " & vbCrLf
'  lsSql = lsSql & "              AND (CASE @DocDate  " & vbCrLf
'  lsSql = lsSql & "                WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "                WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "              END < @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "            -- Disposal - Storno " & vbCrLf
'  lsSql = lsSql & "            WHEN gbkmut.TransType IN ('N', 'C', 'P') /* Actual */ " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.TransSubType IN ('I')  " & vbCrLf
'  lsSql = lsSql & "              AND gbkmut.reknr = Asset.DeprBS  " & vbCrLf
'  lsSql = lsSql & "              AND (CASE @DocDate  " & vbCrLf
'  lsSql = lsSql & "                WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "                WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "              END < @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) " & vbCrLf
'  lsSql = lsSql & "            ELSE 0 " & vbCrLf
'  lsSql = lsSql & "          END " & vbCrLf
'  lsSql = lsSql & "        ELSE 0 " & vbCrLf
'  lsSql = lsSql & "      END AS Depreciation_StartPeriod, " & vbCrLf
'
''  lsSql = lsSql & "      CASE" & vbCrLf
''  lsSql = lsSql & "        -- Depreciation - always actual" & vbCrLf
''  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
''  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V') " & vbCrLf
''  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
''  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
''  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
''  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
''  lsSql = lsSql & "          END < @DateFrom) THEN -gbkmut.bdr_hfl" & vbCrLf
''  lsSql = lsSql & "        -- Disposal - Storno" & vbCrLf
''  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
''  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
''  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprBS " & vbCrLf
''  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
''  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
''  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
''  lsSql = lsSql & "          END < @DateFrom) THEN -gbkmut.bdr_hfl" & vbCrLf
''  lsSql = lsSql & "        ELSE 0" & vbCrLf
''  lsSql = lsSql & "      END AS Depreciation_StartPeriod," & vbCrLf
'
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Depreciation - always actual" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** Start
'  'lsSql = lsSql & "          AND gbkmut.datum >= asset.transactiondatefrom " & vbCrLf
'  'lsSql = lsSql & "          AND gbkmut.datum < asset.transactiondateto " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum > asset.transactiondatefrom " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum <= asset.transactiondateto " & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** End
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Depreciation_Plus," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Storno" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId = #AssetSoldEntryGUId.EntryGUId " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Depreciation_Minus_Sales," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'  lsSql = lsSql & "      CASE" & vbCrLf
'  lsSql = lsSql & "        -- Disposal - Storno" & vbCrLf
'  lsSql = lsSql & "        WHEN gbkmut.EntryGUId IN (SELECT EntryGUId FROM #DepreciationTransferEntryGUId WHERE #DepreciationTransferEntryGUId.AssetCode = gbkmut.facode)" & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('I') " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr IN (Asset.DeprBS, Asset.DeprPL) " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN -CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5))" & vbCrLf
'  lsSql = lsSql & "        ELSE 0" & vbCrLf
'  lsSql = lsSql & "      END AS Depreciation_Minus_Transfer," & vbCrLf
'  lsSql = lsSql & "      ----------------------------------------------------------      " & vbCrLf
'
'  lsSql = lsSql & "      CASE " & vbCrLf
'  lsSql = lsSql & "        -- Depreciation " & vbCrLf
'  lsSql = lsSql & "        WHEN @BudgetSimulation = 0 /* Actual */  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = Asset.DeprPL  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum > asset.transactiondatefrom  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum <= asset.transactiondateto  " & vbCrLf
'  lsSql = lsSql & "          AND (CASE @DocDate  " & vbCrLf
'  lsSql = lsSql & "            WHEN 0 THEN gbkmut.datum  " & vbCrLf
'  lsSql = lsSql & "            WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum)  " & vbCrLf
'  lsSql = lsSql & "          END >= @DateFrom) THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
''  lsSql = lsSql & "          END >= @DateFrom) THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
'  lsSql = lsSql & "        -- Budget - Depreciation " & vbCrLf
'  lsSql = lsSql & "        WHEN @BudgetSimulation = 1 /* Budget */  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('B')  " & vbCrLf
'  lsSql = lsSql & "          AND " & vbCrLf
'  lsSql = lsSql & "            (  " & vbCrLf
'  lsSql = lsSql & "              (@BudgetVersion = 'MRP' AND gbkmut.bud_vers = 'MRP') " & vbCrLf
'  lsSql = lsSql & "              OR " & vbCrLf
'  lsSql = lsSql & "              ( " & vbCrLf
'  lsSql = lsSql & "                @BudgetVersion = 'ASSET_3'  " & vbCrLf
'  lsSql = lsSql & "                AND ( " & vbCrLf
'  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NULL AND gbkmut.bud_vers = 'ASSET_3') " & vbCrLf
'  lsSql = lsSql & "                  OR " & vbCrLf
'  lsSql = lsSql & "                  (Asset.UltimateDepreciation IS NOT NULL AND gbkmut.bud_vers = 'MRP') " & vbCrLf
'  lsSql = lsSql & "                ) " & vbCrLf
'  lsSql = lsSql & "              ) " & vbCrLf
'  lsSql = lsSql & "              OR " & vbCrLf
'  lsSql = lsSql & "              (@BudgetVersion = 'ASSET_2' AND gbkmut.bud_vers = 'ASSET_2') " & vbCrLf
'  lsSql = lsSql & "            ) " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum > asset.transactiondatefrom  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum <= asset.transactiondateto  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.datum BETWEEN @DateFrom AND @DateTo THEN CAST(ROUND((gbkmut.bdr_hfl * @Ratio), @DefaultCurrencyDecimalNumber) AS DECIMAL(20, 5)) " & vbCrLf
''  lsSql = lsSql & "          AND gbkmut.datum BETWEEN @DateFrom AND @DateTo THEN ROUND((CAST(gbkmut.bdr_hfl AS DECIMAL(20, 5)) * @Ratio), @DefaultCurrencyDecimalNumber) " & vbCrLf
'  lsSql = lsSql & "        ELSE 0 " & vbCrLf
'  lsSql = lsSql & "      END AS Depreciation_PL " & vbCrLf
'
'  lsSql = lsSql & "      FROM gbkmut" & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        -- If two asset group have the same definition, only one is retained" & vbCrLf
'  lsSql = lsSql & "        SELECT DISTINCT" & vbCrLf
'  lsSql = lsSql & "        ItemNumbers.Number, " & vbCrLf
'  lsSql = lsSql & "        ISNULL(transactionfrom.transactiondatefrom, (SELECT MIN(bgdatum) FROM perdat)) transactiondatefrom, " & vbCrLf
'  lsSql = lsSql & "        ISNULL(transactionto.transactiondateto, (SELECT MAX(eddatum) FROM perdat)) transactiondateto, " & vbCrLf
'  lsSql = lsSql & "        ItemNumbers.TransactionGUId, " & vbCrLf
'  lsSql = lsSql & "        UniqueAssetGroup.AssetGroup," & vbCrLf
'  lsSql = lsSql & "        FaGrp.AssetAC," & vbCrLf
'  lsSql = lsSql & "        FaGrp.DeprBS," & vbCrLf
'  lsSql = lsSql & "        FaGrp.DeprPL, " & vbCrLf
'
'  lsSql = lsSql & "        (  " & vbCrLf
'  lsSql = lsSql & "          SELECT MAX(CASE @DocDate WHEN 0 THEN gbkmut.datum WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) END)  " & vbCrLf
'  lsSql = lsSql & "          FROM gbkmut  " & vbCrLf
'  lsSql = lsSql & "          WHERE gbkmut.facode = ItemNumbers.Number  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransType IN ('N', 'C', 'P')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.TransSubType IN ('V')  " & vbCrLf
'  lsSql = lsSql & "          AND gbkmut.reknr = FaGrp.DeprBS " & vbCrLf
'  lsSql = lsSql & "        ) AS UltimateDepreciation,  " & vbCrLf
'
'  lsSql = lsSql & "        '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "        FROM (" & vbCrLf
'  lsSql = lsSql & "          SELECT " & vbCrLf
'  lsSql = lsSql & "          ItemNumbers.Number, " & vbCrLf
'  lsSql = lsSql & "          ItemNumbers.TransactionGUId, " & vbCrLf
'  lsSql = lsSql & "          ItemNumbers.Classification, " & vbCrLf
'  lsSql = lsSql & "          ItemNumbers.Status, " & vbCrLf
'  lsSql = lsSql & "          ISNULL(fatran.AssetGroup, ItemNumbers.AssetGroup) AS AssetGroup," & vbCrLf
'  lsSql = lsSql & "          '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "          FROM ItemNumbers" & vbCrLf
'  lsSql = lsSql & "          LEFT JOIN (" & vbCrLf
'  lsSql = lsSql & "            -- Requery transfert history of the asset" & vbCrLf
'  lsSql = lsSql & "            SELECT fatran.assetcode, fatran.olddataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "            FROM fatran " & vbCrLf
'  lsSql = lsSql & "            WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "            UNION" & vbCrLf
'  lsSql = lsSql & "            SELECT fatran.assetcode, fatran.newdataval AS assetgroup" & vbCrLf
'  lsSql = lsSql & "            FROM fatran " & vbCrLf
'  lsSql = lsSql & "            WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "          ) fatran ON fatran.assetcode = ItemNumbers.Number" & vbCrLf
'  lsSql = lsSql & "        ) ItemNumbers " & vbCrLf
'  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "          SELECT" & vbCrLf
'  lsSql = lsSql & "          assetgroup," & vbCrLf
'  lsSql = lsSql & "          AssetAC," & vbCrLf
'  lsSql = lsSql & "          DeprBS," & vbCrLf
'  lsSql = lsSql & "          DeprPL, " & vbCrLf
'  lsSql = lsSql & "          '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "          FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "        ) FaGrp ON FaGrp.AssetGroup = ItemNumbers.AssetGroup" & vbCrLf
'  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "          SELECT" & vbCrLf
'  lsSql = lsSql & "          MIN(assetgroup) AS AssetGroup," & vbCrLf
'  lsSql = lsSql & "          AssetAC," & vbCrLf
'  lsSql = lsSql & "          DeprBS," & vbCrLf
'  lsSql = lsSql & "          DeprPL" & vbCrLf
'  lsSql = lsSql & "          FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "          GROUP BY AssetAC, DeprBS, DeprPL" & vbCrLf
'  lsSql = lsSql & "        ) UniqueAssetGroup ON UniqueAssetGroup.AssetAC = FaGrp.AssetAC AND UniqueAssetGroup.DeprBS = FaGrp.DeprBS AND UniqueAssetGroup.DeprPL = FaGrp.DeprPL" & vbCrLf
'  lsSql = lsSql & "        LEFT OUTER JOIN (" & vbCrLf
'  lsSql = lsSql & "          SELECT facode, reknr, MAX(datum) AS transactiondateto" & vbCrLf
'  lsSql = lsSql & "          FROM gbkmut " & vbCrLf
'  lsSql = lsSql & "          INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "            SELECT fatran.assetcode, fagrp.assetac" & vbCrLf
'  lsSql = lsSql & "            FROM fatran " & vbCrLf
'  lsSql = lsSql & "            INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "              SELECT assetgroup, assetac " & vbCrLf
'  lsSql = lsSql & "              FROM fagrp" & vbCrLf
'  lsSql = lsSql & "            ) fagrp ON fagrp.assetgroup = fatran.olddataval" & vbCrLf
'  lsSql = lsSql & "            WHERE trantype = 'G'" & vbCrLf
'  lsSql = lsSql & "          ) fatran ON gbkmut.facode = fatran.assetcode AND gbkmut.reknr = fatran.assetac" & vbCrLf
'  lsSql = lsSql & "          WHERE transsubtype = 'I' " & vbCrLf
'  lsSql = lsSql & "          GROUP BY facode, reknr" & vbCrLf
'  lsSql = lsSql & "        ) transactionto ON transactionto.facode = itemnumbers.number and transactionto.reknr = fagrp.assetac" & vbCrLf
'  lsSql = lsSql & "        LEFT OUTER JOIN (" & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** Start
'  'lsSql = lsSql & "          SELECT facode, reknr, MIN(datum) AS transactiondatefrom" & vbCrLf
'  lsSql = lsSql & "          SELECT facode, reknr, MIN(datum)-1 AS transactiondatefrom" & vbCrLf
'  '*** Gili25502 *** 10.487.128 *** End
'  lsSql = lsSql & "          FROM gbkmut " & vbCrLf
'  lsSql = lsSql & "          INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "            SELECT fatran.assetcode, fagrp.assetac" & vbCrLf
'  lsSql = lsSql & "            FROM fatran " & vbCrLf
'  lsSql = lsSql & "            INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "              SELECT assetgroup, assetac " & vbCrLf
'  lsSql = lsSql & "              FROM fagrp" & vbCrLf
'  lsSql = lsSql & "            ) fagrp ON fagrp.assetgroup = fatran.newdataval" & vbCrLf
'  lsSql = lsSql & "            WHERE trantype = 'g'" & vbCrLf
'  lsSql = lsSql & "          ) fatran ON gbkmut.facode = fatran.assetcode and gbkmut.reknr = fatran.assetac" & vbCrLf
'  lsSql = lsSql & "          GROUP BY facode, reknr" & vbCrLf
'  lsSql = lsSql & "        ) transactionfrom ON transactionfrom.facode = itemnumbers.number and transactionfrom.reknr = fagrp.assetac" & vbCrLf
'  lsSql = lsSql & "        WHERE ItemNumbers.Classification = 'F'" & vbCrLf
'  lsSql = lsSql & "        AND ItemNumbers.Status IN ('A','G','D','C','B','S')" & vbCrLf
'  lsSql = lsSql & "      ) Asset ON Asset.Number = gbkmut.FACode " & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description" & vbCrLf
'  lsSql = lsSql & "        FROM DDTests" & vbCrLf
'  lsSql = lsSql & "        WHERE TableName = 'gbkmut' AND FieldName = 'TransType'" & vbCrLf
'  lsSql = lsSql & "      ) TransType_Description ON TransType_Description.DatabaseChar = gbkmut.transtype" & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT DatabaseChar, TermId, Description" & vbCrLf
'  lsSql = lsSql & "        FROM DDTests" & vbCrLf
'  lsSql = lsSql & "        WHERE TableName = 'gbkmut' AND FieldName = 'TransSubType'" & vbCrLf
'  lsSql = lsSql & "      ) TransSubType_Description ON TransSubType_Description.DatabaseChar = gbkmut.TransSubType" & vbCrLf
'  lsSql = lsSql & "      INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "        SELECT" & vbCrLf
'  lsSql = lsSql & "        grtbk.reknr," & vbCrLf
'  lsSql = lsSql & "        grtbk.omzrek," & vbCrLf
'  lsSql = lsSql & "        omzrek_Description.TermId AS omzrek_TermId," & vbCrLf
'  lsSql = lsSql & "        omzrek_Description.Description AS omzrek_Description," & vbCrLf
'  lsSql = lsSql & "        grtbk.bal_vw," & vbCrLf
'  lsSql = lsSql & "        bal_vw_Description.TermId AS bal_vw_TermId," & vbCrLf
'  lsSql = lsSql & "        bal_vw_Description.Description AS bal_vw_Description" & vbCrLf
'  lsSql = lsSql & "        FROM grtbk" & vbCrLf
'  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "          SELECT DatabaseChar, TermId, Description" & vbCrLf
'  lsSql = lsSql & "          FROM DDTests" & vbCrLf
'  lsSql = lsSql & "          WHERE TableName = 'grtbk' AND FieldName = 'omzrek'" & vbCrLf
'  lsSql = lsSql & "        ) omzrek_Description ON omzrek_Description.DatabaseChar = grtbk.omzrek" & vbCrLf
'  lsSql = lsSql & "        INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "          SELECT DatabaseChar, TermId, Description" & vbCrLf
'  lsSql = lsSql & "          FROM DDTests" & vbCrLf
'  lsSql = lsSql & "          WHERE TableName = 'grtbk' AND FieldName = 'bal_vw'" & vbCrLf
'  lsSql = lsSql & "        ) bal_vw_Description ON bal_vw_Description.DatabaseChar = grtbk.bal_vw" & vbCrLf
'  lsSql = lsSql & "        ------------------------------------" & vbCrLf
'  lsSql = lsSql & "        WHERE grtbk.omzrek NOT IN ('C', 'D')" & vbCrLf
'  lsSql = lsSql & "        ------------------------------------" & vbCrLf
'  lsSql = lsSql & "      ) grtbk ON grtbk.reknr = gbkmut.reknr" & vbCrLf
'  lsSql = lsSql & "      ------------------------------------------------------------------------------------" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN #AssetSoldEntryGUId ON #AssetSoldEntryGUId.AssetCode = gbkmut.facode" & vbCrLf
'  lsSql = lsSql & "      ------------------------------------------------------------------------------------" & vbCrLf
'
'  lsSql = lsSql & "    WHERE " & vbCrLf
'  lsSql = lsSql & "    CASE " & vbCrLf
'  lsSql = lsSql & "      WHEN @BudgetSimulation = 0 /* Actuals */ THEN " & vbCrLf
'  lsSql = lsSql & "        CASE " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 0 THEN gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "          WHEN @DocDate = 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
'  lsSql = lsSql & "        END " & vbCrLf
'  lsSql = lsSql & "      ELSE /* Budget */ gbkmut.datum " & vbCrLf
'  lsSql = lsSql & "    END <= @DateTo" & vbCrLf
'
''  lsSql = lsSql & "      WHERE (CASE @DocDate " & vbCrLf
''  lsSql = lsSql & "        WHEN 0 THEN gbkmut.datum " & vbCrLf
''  lsSql = lsSql & "        WHEN 1 THEN ISNULL(gbkmut.DocDate, gbkmut.datum) " & vbCrLf
''  lsSql = lsSql & "      END <= @DateTo)" & vbCrLf
'
'  lsSql = lsSql & "    ) Asset_Transactions" & vbCrLf
'  lsSql = lsSql & "    GROUP BY Asset_Transactions.Asset_Reference, Asset_Transactions.Asset_Group" & vbCrLf
'  lsSql = lsSql & "  ) Asset_Summary ON Asset_Summary.Asset_Reference = Asset.Asset_Reference" & vbCrLf
'  lsSql = lsSql & "  /* AssetGroup */" & vbCrLf
'  lsSql = lsSql & "  INNER JOIN (" & vbCrLf
'  lsSql = lsSql & "    SELECT" & vbCrLf
'  lsSql = lsSql & "    assetgroup AS Asset_Group," & vbCrLf
'  lsSql = lsSql & "    AssetAC AS Asset_GLAccount_BS_Code," & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Description AS Asset_GLAccount_BS_Description, " & vbCrLf
'  lsSql = lsSql & "    DeprBS AS Depreciation_GLAccount_BS," & vbCrLf
'  lsSql = lsSql & "    DeprPL As Depreciation_GLAccount_PL, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_01, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_01_Description, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_02, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_02_Description, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_03, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_03_Description, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_04, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_04_Description, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_05, " & vbCrLf
'  lsSql = lsSql & "    Asset_GLAccount_BS.GLAccount_BS_Class_05_Description, " & vbCrLf
'  lsSql = lsSql & "    '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "    FROM FaGrp" & vbCrLf
'  lsSql = lsSql & "    LEFT OUTER JOIN (" & vbCrLf
'  lsSql = lsSql & "      SELECT" & vbCrLf
'  lsSql = lsSql & "      grtbk.reknr AS GLAccount_BS_Code, " & vbCrLf
'  lsSql = lsSql & "      grtbk.oms25_0 AS GLAccount_BS_Description, " & vbCrLf
'  lsSql = lsSql & "      grtbk.Class_01 As GLAccount_BS_Class_01," & vbCrLf
'  lsSql = lsSql & "      Class_01.Description_0 As GLAccount_BS_Class_01_Description," & vbCrLf
'  lsSql = lsSql & "      grtbk.Class_02 As GLAccount_BS_Class_02," & vbCrLf
'  lsSql = lsSql & "      Class_02.Description_0 As GLAccount_BS_Class_02_Description, " & vbCrLf
'  lsSql = lsSql & "      grtbk.Class_03 As GLAccount_BS_Class_03," & vbCrLf
'  lsSql = lsSql & "      Class_03.Description_0 As GLAccount_BS_Class_03_Description," & vbCrLf
'  lsSql = lsSql & "      grtbk.Class_04 As GLAccount_BS_Class_04," & vbCrLf
'  lsSql = lsSql & "      Class_04.Description_0 As GLAccount_BS_Class_04_Description, " & vbCrLf
'  lsSql = lsSql & "      grtbk.Class_05 As GLAccount_BS_Class_05," & vbCrLf
'  lsSql = lsSql & "      Class_05.Description_0 As GLAccount_BS_Class_05_Description," & vbCrLf
'  lsSql = lsSql & "      '' AS DummyColumn" & vbCrLf
'  lsSql = lsSql & "      FROM grtbk" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_01 ON Class_01.ClassId = 1 AND Class_01.AccountClassCode = grtbk.Class_01" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_02 ON Class_02.ClassId = 2 AND Class_02.AccountClassCode = grtbk.Class_02" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_03 ON Class_03.ClassId = 3 AND Class_03.AccountClassCode = grtbk.Class_03" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_04 ON Class_04.ClassId = 4 AND Class_04.AccountClassCode = grtbk.Class_04" & vbCrLf
'  lsSql = lsSql & "      LEFT OUTER JOIN AccountClasses Class_05 ON Class_05.ClassId = 5 AND Class_05.AccountClassCode = grtbk.Class_05" & vbCrLf
'  lsSql = lsSql & "    ) Asset_GLAccount_BS ON Asset_GLAccount_BS.GLAccount_BS_Code = FaGrp.AssetAC" & vbCrLf
'  lsSql = lsSql & "  ) AssetGroup ON AssetGroup.Asset_Group = Asset_Summary.Asset_Group" & vbCrLf
'  lsSql = lsSql & "  WHERE NOT (ROUND(Asset_Summary.Asset_StartPeriod, @DefaultCurrencyDecimalNumber) = 0 " & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Plus_New, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Plus_Transfer, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Minus_Sales, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Asset_Minus_Transfer, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_StartPeriod, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Plus, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Minus_Sales, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_Minus_Transfer, @DefaultCurrencyDecimalNumber) = 0" & vbCrLf
'  lsSql = lsSql & "  AND ROUND(Asset_Summary.Depreciation_PL, @DefaultCurrencyDecimalNumber) = 0)" & vbCrLf
'  lsSql = lsSql & "  -- Filter on purchase dates" & vbCrLf
'  lsSql = lsSql & "  AND " & vbCrLf
'  lsSql = lsSql & "  (CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN @PurchaseDateAll = 1 THEN 1 " & vbCrLf
'  lsSql = lsSql & "    WHEN @PurchaseDateAll = 0 AND Asset.Asset_Date >= @PurchaseDateFrom AND Asset.Asset_Date <= @PurchaseDateTo THEN 1" & vbCrLf
'  lsSql = lsSql & "    ELSE 0" & vbCrLf
'  lsSql = lsSql & "  END = 1)" & vbCrLf
'  lsSql = lsSql & "  -- Filter on asset GL accounts BS" & vbCrLf
'  lsSql = lsSql & "  AND " & vbCrLf
'  lsSql = lsSql & "  (CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN @GLAccountsAll = 1 THEN 1 " & vbCrLf
'  lsSql = lsSql & "    WHEN @GLAccountsAll = 0 AND Assetgroup.Asset_GLAccount_BS_Code >= @GLAccountsFrom AND Assetgroup.Asset_GLAccount_BS_Code <= @GLAccountsTo THEN 1" & vbCrLf
'  lsSql = lsSql & "    ELSE 0" & vbCrLf
'  lsSql = lsSql & "  END = 1)" & vbCrLf
'  lsSql = lsSql & "  -- Filter on asset groups" & vbCrLf
'  lsSql = lsSql & "  AND " & vbCrLf
'  lsSql = lsSql & "  (CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN @AssetGroupAll = 1 THEN 1 " & vbCrLf
'  lsSql = lsSql & "    WHEN @AssetGroupAll = 0 AND Assetgroup.Asset_Group >= @AssetGroupFrom AND Assetgroup.Asset_Group <= @AssetGroupTo THEN 1" & vbCrLf
'  lsSql = lsSql & "    ELSE 0" & vbCrLf
'  lsSql = lsSql & "  END = 1)" & vbCrLf
'  lsSql = lsSql & "  -- Filter on asset codes" & vbCrLf
'  lsSql = lsSql & "  AND " & vbCrLf
'  lsSql = lsSql & "  (CASE " & vbCrLf
'  lsSql = lsSql & "    WHEN @AssetCodeAll = 1 THEN 1 " & vbCrLf
'  lsSql = lsSql & "    WHEN @AssetCodeAll = 0 AND Asset.Asset_Reference >= @AssetCodeFrom AND Asset.Asset_Reference <= @AssetCodeTo THEN 1" & vbCrLf
'  lsSql = lsSql & "    ELSE 0" & vbCrLf
'  lsSql = lsSql & "  END = 1)" & vbCrLf
'  lsSql = lsSql & "  ORDER BY Asset.Asset_Reference" & vbCrLf
'  lsSql = lsSql & "" & vbCrLf
'  lsSql = lsSql & "DROP TABLE #prorata " & vbCrLf
'  lsSql = lsSql & "DROP TABLE #AssetSoldEntryGUId " & vbCrLf
'  lsSql = lsSql & "DROP TABLE #AssetTransferEntryGUId " & vbCrLf
'  lsSql = lsSql & "DROP TABLE #DepreciationTransferEntryGUId " & vbCrLf

  lsSql = Replace(lsSql, "LDBEAssetMovements", psProcedureName)
  lsSql = Replace(lsSql, "/* Initialization */", LDBEAssetMovementsCriteria)
  lsSql = Replace(lsSql, "/* Fill table #prorata */", LDBEAssetMovementsProrata(palrsSetting, lblnData))
  '--------
  'Language
  '--------
  lsSql = Replace(lsSql, "oms25_0", "oms25_" & goCompany.MultiLang.DefaultIndex)
  lsSql = Replace(lsSql, "Description_0", "Description_" & goCompany.MultiLang.DefaultIndex)
  
  CreateProcedureLDBEAssetMovements = lsSql
  
  Exit Property
Failed:
  App.Message 0, CreateProcedureLDBEAssetMovements, Translate(32457, "Asset year end totals"), edlgInfo
End Property

Public Function OpenQuery() As EDL.EdlQuery
  On Error GoTo Failed
  'Use the company-aggregated EDL database connection
  Dim conn As EDL.EdlConnection
  Dim lsSql As String
  Dim lsProcedureName As String
  
  
  Dim lrsSetting As EDL.EdlQuery
  Dim larrSetting() As String
  Dim lblnData As Boolean: lblnData = False
  
  'Debug.Assert False
  
  'Retrieve connection
  Set conn = goCompany
  
  '*** 12.369.361 *** Gili25502 *** 14/09/2004 *** Start
  'Retrieve setting prorata from BacoDiscussions
  Set lrsSetting = conn.OpenQuery("SELECT Body AS ProRataSetting FROM Bacodiscussions WHERE subject = 'Pro rata settings' AND Type = '2'", edlClientSnapshot, edlReadOnly, 0)
  '*** 12.369.361 *** Gili25502 *** 14/09/2004 *** End
  
  'Retrieve
  If lrsSetting.NumRows = 0 Then
    Set lrsSetting = conn.OpenQuery("SELECT stringvalue AS ProRataSetting FROM settings WHERE settingName = 'deprcalc_prorata_allowed'", edlClientSnapshot, edlReadOnly, 0)
  End If
  
  If Not lrsSetting.BOF And Not lrsSetting.EOF Then
    If Not ISNULL(lrsSetting.Var("ProRataSetting")) Then
      larrSetting = Split(lrsSetting.Var("ProRataSetting"), ";")
      lblnData = True
    End If
  End If
  
  lsProcedureName = "LDBEAssetMovements"
  conn.Exec DropProcedureLDBEAssetMovements(lsProcedureName)
  conn.Commit
  
  conn.Exec CreateProcedureLDBEAssetMovements(lsProcedureName, larrSetting, lblnData)
  conn.Commit
  
  Set OpenQuery = conn.OpenQuery("dbo." & lsProcedureName, edlClientSnapshot, edlReadOnly, 0)
  
  Set conn = Nothing
  Exit Function
Failed:
  App.Message 0, "OpenQuery", Translate(32457, "Asset year end totals"), edlgInfo
End Function

Public Function GenerateDatasheetSQL() As String
  On Error GoTo Failed
  Dim lsSql As String
    
    
  GenerateDatasheetSQL = lsSql
  Exit Function
Failed:
  App.Message 0, "GenerateDatasheetSQL", Translate(32457, "Asset year end totals"), edlgInfo
End Function

Public Sub CreatePivotTable(pApp As esl.Application)
''''
''''    On Error Resume Next
''''    Application.DisplayAlerts = False
''''    ThisWorkbook.Worksheets("Pivottable FA").Delete
''''    Application.DisplayAlerts = True
''''
''''    'Create pivottable
''''    Worksheets("Sheet1").Activate
''''    ActiveWorkbook.PivotCaches.Add(SourceType:=xlDatabase, SourceData:="Analytical.Range").CreatePivotTable TableDestination:="", TableName:="PivotTable1"
''''    ActiveSheet.PivotTableWizard TableDestination:=ActiveSheet.Cells(3, 1)
''''    ActiveSheet.Cells(3, 1).Select
''''    ActiveSheet.PivotTables("PivotTable1").SmallGrid = False
''''    ActiveSheet.Name = "Pivottable FA"
''''    ActiveSheet.PivotTables("PivotTable1").Format xlTable2
''''
''''    'Left Columns
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrGL)
''''        .Orientation = xlRowField
''''        .Position = 1
''''    End With
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrYearAssets)
''''        .Orientation = xlRowField
''''        .Position = 2
''''    End With
''''
''''    'Right Columns
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrInvestmentOpen)
''''        .Orientation = xlDataField
''''        .Position = 1
''''    End With
''''
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrInvestment)
''''        .Orientation = xlDataField
''''        .Position = 2
''''    End With
''''
''''    ActiveSheet.PivotTables("Pivottable1").CalculatedFields.Add gstrTotalInvest, "='" & gstrInvestmentOpen & "' + " & gstrInvestment
''''    ActiveSheet.PivotTables("Pivottable1").PivotFields(gstrTotalInvest).Orientation = xlDataField
''''
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrDepreciationOpen)
''''        .Orientation = xlDataField
''''        .Position = 4
''''    End With
''''
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrDepreciation)
''''        .Orientation = xlDataField
''''        .Position = 5
''''    End With
''''
''''    ActiveSheet.PivotTables("PivotTable1").CalculatedFields.Add gstrTotalDepr, "='" & gstrDepreciationOpen & "'+ " & gstrDepreciation
''''    ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrTotalDepr).Orientation = xlDataField
''''
''''    With ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrBookValueClose)
''''        .Orientation = xlDataField
''''        .Position = 7
''''    End With
''''
''''    'Formating headers
''''    Range("A3:B3").Font.Color = vbBlack
''''    Rows("3:3").Select
''''    With Selection
''''        .RowHeight = 30
''''        .VerticalAlignment = xlTop
''''        .WrapText = True
''''        .Orientation = 0
''''    End With
''''
''''    'Undo Totals for serialnumber
''''    ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrSN).Subtotals = _
''''    Array(False, False, False, False, False, False, False, False, False, False, False, False)
''''
''''    'Undo Totals for yearassets
''''    ActiveSheet.PivotTables("PivotTable1").PivotFields(gstrYearAssets).Subtotals = _
''''    Array(False, False, False, False, False, False, False, False, False, False, False, False)
''''
''''    'Numberformating
''''    ActiveSheet.Range("C:Z").NumberFormat = "0.00"
''''
''''    'Columns width
''''    Columns("A:A").ColumnWidth = 30
''''    Columns("B:B").ColumnWidth = 15
''''    Columns("D:D").ColumnWidth = 23
''''    Columns("E:E").ColumnWidth = 23
''''    Columns("F:F").ColumnWidth = 23
''''    Columns("G:G").ColumnWidth = 23
''''    Columns("H:H").ColumnWidth = 23
''''    Columns("I:I").ColumnWidth = 23
''''    Columns("J:J").ColumnWidth = 23
''''    Columns("K:K").ColumnWidth = 23
''''
''''    '---------------------------------------------------------------
''''    'Pagesetup landscape - print on 1 page !!!
''''    With ActiveSheet.PageSetup
''''        .Orientation = xlLandscape
''''        .PaperSize = xlPaperA4
''''        .Zoom = False
''''        .FitToPagesWide = 1
''''        .FitToPagesTall = False
''''    End With
''''    '---------------------------------------------------------------
''''
''''    'Select pivottablecell to show pivotmenubar!
''''    Range("A3").Select
End Sub

Private Sub Workbook_Open()

End Sub

Public Function GetUniqueLocation() As String
    On Error GoTo ErrHandler
    Dim ltTime
    ltTime = Time
    Randomize
    GetUniqueLocation = "LDBEMovement_Table_" & CStr(Hour(ltTime)) & CStr(Minute(ltTime)) & CStr(Second(ltTime)) & CStr(Int((6 * Rnd) + 1))
    Exit Function
ErrHandler:
    Debug.Print Err.Source & ".clsVatLinkViewBE.GetUniqueViewLocation() : " & Err.Description
    Resume Next
End Function

Private Sub DropTempTable()
  On Error GoTo ErrHandler
  Dim loEdlConnection As EDL.EdlConnection
  Dim lsSql As String
  Dim loDB As esl.Database
  Dim loTransaction As esl.EDOTransaction
  
  Set loEdlConnection = goCompany
    
  'Open the transaction
  Set loDB = goCompany  ' m_app.DefaultCompany
  Set loTransaction = loDB.OpenTransaction
  
  'Generate drop sqlstatement
  lsSql = "DROP TABLE " & gstrUniqueLocation
  If Not loEdlConnection Is Nothing Then
    loEdlConnection.Exec lsSql
  End If
  
  ' commit the transaction
  loTransaction.Commit
  
  'Nothing
  Set loEdlConnection = Nothing
  Set loDB = Nothing
  Set loTransaction = Nothing
  
  Exit Sub
ErrHandler:
  Resume Next
End Sub

'Contact Support - 14.977.971 - Start
Private Property Get lSortBy() As SortBy_Fields
  lSortBy = m_lSortBy
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Property Get bSubTotal(ByVal plSubTotal As SubTotal_Fields) As Boolean
  Dim loName As Name
  Dim llCategory As Long
  If m_oSubTotal Is Nothing Then
    Set m_oSubTotal = New Scripting.Dictionary
    If Not m_oSubTotal Is Nothing Then
      With m_oSubTotal
        'Default initialisation
        'SubTotal_Category1
        .Add CStr(SubTotal_Category1), False
        'SubTotal_Category2
        .Add CStr(SubTotal_Category2), False
        'SubTotal_Category3
        .Add CStr(SubTotal_Category3), False
        'SubTotal_Category4
        .Add CStr(SubTotal_Category4), False
        'SubTotal_Category5
        .Add CStr(SubTotal_Category5), False
        'SubTotal_FinancialYear
        .Add CStr(SubTotal_FinancialYear), False
        'SubTotal_GLedger
        .Add CStr(SubTotal_GLedger), True
        
        'Alter for Categories
        For llCategory = 1 To 10
          Set loName = ThisWorkbook.Names("Cat" & llCategory)
          If Not loName Is Nothing Then
            Select Case loName.RefersToRange.Value
            Case "A"
              .Item(CStr(SubTotal_Category1)) = True
            Case "B"
              .Item(CStr(SubTotal_Category2)) = True
            Case "C"
              .Item(CStr(SubTotal_Category3)) = True
            Case "D"
              .Item(CStr(SubTotal_Category4)) = True
            Case "E"
              .Item(CStr(SubTotal_Category5)) = True
            Case Else
            End Select
          End If
        Next
        
        'Alter for Financial Year
        If lSortBy() = SortBy_FinancialYear Then
          .Item(CStr(SubTotal_FinancialYear)) = True
        End If
        
      End With
      bSubTotal = m_oSubTotal.Item(CStr(plSubTotal))
    End If
  Else
    bSubTotal = m_oSubTotal.Item(CStr(plSubTotal))
  End If
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Property Get bShowInfo(ByVal plInfo As Show_Fields) As Boolean
  Dim loName As Name
  If m_oShowInfo Is Nothing Then
    Set m_oShowInfo = New Scripting.Dictionary
    If Not m_oShowInfo Is Nothing Then
      With m_oShowInfo
        'Show_Asset
        Set loName = ThisWorkbook.Names("Show1")
        If Not loName Is Nothing Then
          .Add CStr(Show_Asset), (loName.RefersToRange.Value = -1)
        Else
          .Add CStr(Show_Asset), False
        End If
        'Show_DepreciationMethod
        Set loName = ThisWorkbook.Names("Show3")
        If Not loName Is Nothing Then
          .Add CStr(Show_DepreciationMethod), CBool(loName.RefersToRange.Value)
        Else
          .Add CStr(Show_DepreciationMethod), False
        End If
        'Show_PurchaseDate
        Set loName = ThisWorkbook.Names("Show4")
        If Not loName Is Nothing Then
          .Add CStr(Show_PurchaseDate), CBool(loName.RefersToRange.Value)
        Else
          .Add CStr(Show_PurchaseDate), False
        End If
        'Show_ResidualValue
        Set loName = ThisWorkbook.Names("Show7")
        If Not loName Is Nothing Then
          .Add CStr(Show_ResidualValue), CBool(loName.RefersToRange.Value)
        Else
          .Add CStr(Show_ResidualValue), False
        End If
        'Show_GLAccount
        Set loName = ThisWorkbook.Names("Show8")
        If Not loName Is Nothing Then
          .Add CStr(Show_GLAccount), CBool(loName.RefersToRange.Value)
        Else
          .Add CStr(Show_GLAccount), False
        End If
        'Show_GLAccountDescription
        Set loName = ThisWorkbook.Names("Show9")
        If Not loName Is Nothing Then
          .Add CStr(Show_GLAccountDescription), CBool(loName.RefersToRange.Value)
        Else
          .Add CStr(Show_GLAccountDescription), False
        End If
      End With
      bShowInfo = m_oShowInfo.Item(CStr(plInfo))
    End If
  Else
    bShowInfo = m_oShowInfo.Item(CStr(plInfo))
  End If
End Property
'Contact Support - 14.977.971 - End

'Contact Support - 14.977.971 - Start
Private Property Get sCol(ByVal plColumn As Asset_Columns) As String
  If m_oColumns Is Nothing Then
    Set m_oColumns = New Scripting.Dictionary
    If Not m_oColumns Is Nothing Then
      With m_oColumns
        .Add CStr(AssetCategory1), "A"
        .Add CStr(AssetCategory2), "B"
        .Add CStr(AssetCategory3), "C"
        .Add CStr(AssetCategory4), "D"
        .Add CStr(AssetCategory5), "E"
        .Add CStr(AssetGeneralLedger), "F"
        Select Case lSortBy()
        Case SortBy_Reference
          .Add CStr(AssetReference), "G"
          .Add CStr(AssetFinancialYear), "H"
        Case SortBy_FinancialYear
          .Add CStr(AssetFinancialYear), "G"
          .Add CStr(AssetReference), "H"
        End Select
        .Add CStr(AssetDate), "I"
        .Add CStr(AssetDescription), "J"
        .Add CStr(DepreciationMethod), "K"
        .Add CStr(AssetBalanceStartDate), "L"
        .Add CStr(AssetBalancePlus), "M"
        .Add CStr(AssetBalanceMinus), "N"
        .Add CStr(AssetBalanceEndDate), "O"
        .Add CStr(DepreciationStartDate), "P"
        .Add CStr(DepreciationPlus), "Q"
        .Add CStr(DepreciationMinus), "R"
        .Add CStr(DepreciationProfitLost), "S"
        .Add CStr(DepreciationEndDate), "T"
        .Add CStr(AssetNetValue), "U"
        .Add CStr(AssetResidualValue), "V"
        .Add CStr(AssetDataRow), "W"
      End With
      sCol = m_oColumns.Item(CStr(plColumn))
    End If
  Else
    sCol = m_oColumns.Item(CStr(plColumn))
  End If
End Property
'Contact Support - 14.977.971 - End




' InQuest injected base64 decoded content
' :t^~
' *'J)

INQUEST-PP=macro
