Attribute VB_Name = "ADSensus"

Global Const ADC_Cell_MemCount As String = "K4"
Global Const ADC_Cell_EffDate As String = "K5"

Const msgTitle As String = "AD Census"

Public Function ddmmyyyyValidate(txt As String, Optional max As Date, Optional min As Date) As Boolean
Dim valid As Boolean
ReDim dt(1)
valid = True
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
            If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
                valid = False
            ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
                valid = False
            ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
                valid = False
            End If
        Else
            valid = False
        End If
        ddmmyyyyValidate = valid
        
End Function

Public Sub LoadInputs()
    Dim sht As Worksheet
    Dim headRowsCnt As Integer
    Dim colEffDate As String
    Set sht = Sheets("AD Census")
    
    headRowsCnt = IIf(GetCurrentSheetFormat = CUSTOMER, 2, 1)
    colEffDate = Switch(GetCurrentSheetFormat = CUSTOMER, COL_POLICYEFFECTIVEDATE, GetCurrentSheetFormat = DCTM, COL_POLICYEFFECTIVEDATE_DCTM, GetCurrentSheetFormat = PRODUCTION, COL_POLICYEFFECTIVEDATE_PROD)
    
    sht.Range(ADC_Cell_MemCount) = shtMemmber.Range("G65536").End(xlUp).Row - headRowsCnt
    sht.Range(ADC_Cell_EffDate) = shtMemmber.Cells((shtMemmber.Range("G65536").End(xlUp).Row), colEffDate).Text
End Sub
Sub clearAdCensus()
Dim shtADCensus As Worksheet
Set shtADCensus = Sheets("AD Census")
shtADCensus.Range("D9:H11") = "-"
shtADCensus.Range("K9:O11") = "-"

shtADCensus.Range("D15:H17") = "-"
shtADCensus.Range("K15:O17") = "-"
shtADCensus.Range("K21:O23") = "-"

shtADCensus.Range("D27:H29") = "-"
shtADCensus.Range("K27:O29") = "-"
shtADCensus.Range("K33:O35") = "-"
End Sub
Sub GenADCensus()

With frmProgress
    .Top = Int(((Application.Height / 2)) - (.Height / 2)) + Application.Top
    .Left = Int(((Application.Width / 2)) - (.Width / 2)) + Application.Left
    .Show 0
End With
'DECLARE LOCAL VARIBALE
Dim colDOB As String
Dim colMaritalStatus As String
Dim colRelation As String
Dim colGender As String
Dim firstRow

Dim rwOffSetSummary, rwOffSetDetails, colOffSetSummary, colOffSetDetails, cl, rw As Long
Dim errCnt As Long
colOffSetSummary = 3
colOffSetDetails = 10
Dim sht, shtADCensus As Worksheet
Set shtADCensus = Sheets("AD Census")
Set sht = Sheets("Member Details")
If val(shtADCensus.Range(ADC_Cell_MemCount)) = 0 Or Not ddmmyyyyValidate(shtADCensus.Range(ADC_Cell_EffDate)) Then
MsgBox "Invalid input values. please check member count or effective date", vbCritical, msgTitle
    Exit Sub
End If

sht.Unprotect ("itdaman")
    Application.EnableEvents = False

    sht.Range("A3:BP65536").ClearComments
    sht.Range("A3:BP65536").Interior.ColorIndex = xlColorIndexNone
    
    'SET/MAP COLUMNS BASED ON CURRENT SHEET MODE
    Select Case GetCurrentSheetFormat
        Case SheetFormat.CUSTOMER
            colDOB = COL_DATEOFBIRTH
            colGender = COL_GENDER_CSTMR
            colRelation = COL_RELATION_CSTMR
            colMaritalStatus = COL_MARITALSTATUS_CSTMR
            firstRow = 3
        Case SheetFormat.DCTM
            colDOB = COL_DATEOFBIRTH
            colGender = COL_GENDER_PROD
            colRelation = COL_RELATION_DCTM
            colMaritalStatus = COL_MARITALSTATUS_DCTM
            firstRow = 2
        Case SheetFormat.PRODUCTION
            colDOB = COL_DATEOFBIRTH
            colGender = COL_GENDER_PROD
            colRelation = COL_RELATION_DCTM
            colMaritalStatus = COL_MARITALSTATUS_DCTM
            firstRow = 2
    End Select

clearAdCensus
Dim lastRow As Long
lastRow = shtADCensus.Range(ADC_Cell_MemCount) + firstRow - 1
    For i = firstRow To lastRow
    
        If Not ddmmyyyyValidate(sht.Cells(i, colDOB)) Or sht.Cells(i, colDOB) = "" Then _
        sht.Cells(i, colDOB).Interior.ColorIndex = 46: errCnt = errCnt + 1: sht.Cells(i, colDOB).AddComment ("Invalid Date Format")
       
        mar = sht.Cells(i, colMaritalStatus).Text
        rel = sht.Cells(i, colRelation).Text
        gen = sht.Cells(i, colGender).Text
        
        If mar = "" Or (mar <> "S" And mar <> "M") Then _
        sht.Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: sht.Cells(i, colMaritalStatus).AddComment ("Invalid Marital Status")
        If rel = "" Or (rel <> "Principal" And rel <> "Spouse" And rel <> "Child" And rel <> "Other Spouse" And rel <> "Other Child") Then _
        sht.Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: sht.Cells(i, colRelation).AddComment ("Invalid Relation")
        If gen = "" Or (gen <> "M" And gen <> "F") Then _
        sht.Cells(i, colGender).Interior.ColorIndex = 46: errCnt = errCnt + 1: sht.Cells(i, colGender).AddComment ("Invalid Gender")
        
        If errCnt = 0 Then
            age = CalcAge(sht.Cells(i, colDOB), shtADCensus.Range(ADC_Cell_EffDate))
            Select Case age
                Case 0 To 17
                    cl = 1
                Case 18 To 40
                    cl = 2
                Case 41 To 50
                    cl = 3
                Case 51 To 59
                    cl = 4
                Case Else
                    cl = 5
            End Select
            Select Case gen
                Case "M"
                    rw = 1
                Case "F"
                    rw = Switch(mar = "M", 2, mar = "S", 3)
            End Select
            
            Select Case rel
                Case "Principal"
                    rwOffSetSummary = 8
                    rwOffSetDetails = 8
                Case "Spouse"
                    rwOffSetSummary = 14
                    rwOffSetDetails = 14
                Case "Child"
                    rwOffSetSummary = 14
                    rwOffSetDetails = 20
                Case "Other Spouse"
                    rwOffSetSummary = 26
                    rwOffSetDetails = 26
                Case "Other Child"
                    rwOffSetSummary = 26
                    rwOffSetDetails = 32
            End Select
            shtADCensus.Cells(rwOffSetSummary + rw, colOffSetSummary + cl) = val(shtADCensus.Cells(rwOffSetSummary + rw, colOffSetSummary + cl)) + 1
            shtADCensus.Cells(rwOffSetDetails + rw, colOffSetDetails + cl) = val(shtADCensus.Cells(rwOffSetDetails + rw, colOffSetDetails + cl)) + 1
        End If
        frmProgress.setPercentage ((i / lastRow) * 100)
    Next
    Unload frmProgress
    If errCnt > 0 Then
        clearAdCensus
        MsgBox "Validation errors found. Please check the cell comments at data sheet for details", vbCritical, msgTitle
    Else
        MsgBox "Population of census has been completed", vbInformation, msgTitle
    End If
    
    Application.EnableEvents = True

    sht.Protect password:="itdaman", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowFormattingCells:=True, AllowFormattingRows:=True, _
            AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
        Range("A3").Select
End Sub
Attribute VB_Name = "DamanGlobal"
Option Explicit

' COLUMN REFERENCES
Global Const COL_NATIONALIDTYPE As String = "e"
Global Const COL_NATIONALID As String = "F"
Global Const COL_DATEOFBIRTH As String = "g"
Global Const COL_POLICYEFFECTIVEDATE As String = "h"
Global Const COL_POLICYEFFECTIVEDATE_DCTM As String = "J"
Global Const COL_POLICYEFFECTIVEDATE_PROD As String = "J"
Global Const COL_MACRORUNSUCCESSFULLY_PROD As String = "BK"
Global Const COL_FIRSTNAME_PROD As String = "C"
Global Const COL_LASTNAME_PROD As String = "E"
Global Const COL_GENDER_CSTMR As String = "I"
Global Const COL_GENDER_PROD As String = "K"
Global Const COL_MEMBERREFNO_PROD As String = "B"
Global Const COL_SYS1_PROD As String = "CB"
Global Const COL_SYS2_PROD As String = "CC"
Global Const COL_RELATION_CSTMR As String = "J"
Global Const COL_RELATION_DCTM As String = "L"
Global Const COL_PLANCATEGORY As String = "m"
Global Const COL_PLAN_DCTM As String = "P"
Global Const COL_CITY_DCTM As String = "AN"
Global Const COL_CITY_CSTMR As String = "W"
Global Const COL_NATIONALITY_DCTM As String = "AG"
Global Const COL_OCCUPATION_CSTMR As String = "V"
Global Const COL_OCCUPATION_DCTM As String = "AJ"
Global Const COL_EMIRATE As String = "af"
Global Const COL_EMIRATE_DCTM As String = "BI"
Global Const COL_EMIRATE_PROD As String = "BJ"
Global Const COL_COUNTRYOFRESIDENCY_DCTM As String = "AI"
Global Const COL_ARABICFIRSTNAME As String = "o"
Global Const COL_ARABICMIDDLENAME As String = "p"
Global Const COL_ARABICLASTNAME As String = "q"
Global Const COL_PREVIOUSINSURANCECOVERAGE As String = "y"
Global Const COL_PLACEOFVISAISSUE As String = "z"
Global Const COL_VISAUNIFIEDNUMBER As String = "aa"
Global Const COL_GROSSSALARY As String = "ab"
Global Const COL_ACCOMMODATIONPROVIDED As String = "ac"
Global Const COL_COMMISSION As String = "ad"
Global Const COL_PASSPORTNO As String = "ae"
Global Const COL_RESINDENTIALLOC As String = "ag"
Global Const COL_RESINDENTIALLOC_DCTM As String = "BJ"
Global Const COL_RESINDENTIALLOC_PROD As String = "BV"
Global Const COL_WORKLOC As String = "ah"
Global Const COL_WORKLOC_DCTM As String = "BK"
Global Const COL_WORKLOC_PROD As String = "BW"
Global Const COL_EMAIL As String = "ai"
Global Const COL_EMAIL_DCTM As String = "BL"
Global Const COL_EMAIL_PROD As String = "BC"
Global Const COL_TELEPHONE1 As String = "aj"
Global Const COL_TELEPHONE1_DCTM As String = "U"
Global Const COL_HASGROSSSALARY As String = "bl"
Global Const COL_AGE As String = "bm"
Global Const COL_SALARYBAND As String = "AK"
Global Const COL_AD_PLAN As String = "bo"
Global Const COL_ISVALID As String = "AN"
Global Const COL_MARITALSTATUS_CSTMR As String = "N"
Global Const COL_MARITALSTATUS_DCTM As String = "Q"

Global selectedPlan As PlanType
Global Const EBP_MAX_INCOME_LIMIT As Integer = 4000
Global Const EP_MAX_INCOME_LIMIT As Integer = 4000
Global Const ADBP_MAX_INCOME_LIMIT As Integer = 5000
Global Const ADBP_MAX_INCOME_LIMIT_WITH_ACCO As Integer = 4000
Global Const ADBP_MATERNITY_PLAN_MIN_AGE_LIMIT As Integer = 1  ' AGE IN YEARS
Global Const EBP_ENH_MATERNITY_PLAN_MIN_AGE_LIMIT As Integer = 10  ' AGE IN YEARS

'Global shtMemmber As Worksheet
'Global shtListOfValues As Worksheet

Enum PlanType
    ADBP = 1
    EBP = 2
    EP = 3
End Enum


Enum SalaryBand
    LESS_THAN_4000 = 1
    ABOVE_4001_LESS_THAN_12000 = 2
    ABOVE_12000 = 3
    NO_SALARY = 4
End Enum

Enum SheetFormat
    UNKNOWN = 0
    CUSTOMER = 1
    DCTM = 2
    PRODUCTION = 3
End Enum
Public Sub resetplan()
Dim a As String
a = InputBox("secret passcode")
If a <> "9837" Then MsgBox "err": Exit Sub
protectSheet shtListOfValues, "D@m@nIT", False
    shtListOfValues.Range("SelectedPlanItem").Cells(1, 1) = ""
protectSheet shtListOfValues, "D@m@nIT", True
MsgBox "done"
End Sub

Function setAppTitle()
ActiveWorkbook.Unprotect password:="D@m@nIT"
Dim txt As String
Sheets("AD Census").Visible = False
    Select Case getCurrentSheetPlanType
    Case PlanType.ADBP
        txt = "Daman: Abu Dhabi Basic"
        Sheets("AD Census").Visible = True
    Case PlanType.EBP
        txt = "Daman: EBP"
    Case PlanType.EP
        txt = "Daman: Enhanced Plan"
    Case Else
        txt = "Daman"
    End Select
Application.Caption = txt
ActiveWorkbook.Protect Structure:=True, Windows:=False, password:="D@m@nIT"
End Function
Public Property Get msgTitle() As String
    msgTitle = "Daman Member Sheet"
End Property
Public Property Get getSheetVersion() As String
    getSheetVersion = "Version:MTT1607090200"
End Property
Public Property Get shtMemmber() As Worksheet
    Set shtMemmber = Sheets("Member Details")
End Property

Public Property Get shtListOfValues() As Worksheet
    Set shtListOfValues = Sheets("List Values")
End Property
Function showHideCommandBars()
 findCommandbarByName("Daman").Visible = GetCurrentSheetFormat <> PRODUCTION
 
findCommandbarByName("DamanProdMacro2015").Visible = (GetCurrentSheetFormat = PRODUCTION)
 
End Function
Function findCommandbarByName(name As String) As CommandBar
Dim i As Integer
    For i = 1 To Application.CommandBars.Count
        If Application.CommandBars(i).name = name Then
         Set findCommandbarByName = Application.CommandBars(i)
        Exit For
    End If
    Next
End Function
Public Function getMemberCount() As Long
    Select Case GetCurrentSheetFormat
        Case SheetFormat.CUSTOMER
            getMemberCount = shtMemmber.Range("A65536").End(xlUp).Row - 2
        Case SheetFormat.DCTM
            getMemberCount = shtMemmber.Range("B65536").End(xlUp).Row - 1
        Case SheetFormat.PRODUCTION
            getMemberCount = shtMemmber.Range("B65536").End(xlUp).Row - 1
    End Select
End Function

Public Function resetValidation()
protectSheet shtMemmber, "itdaman", False
Select Case GetCurrentSheetFormat
Case SheetFormat.CUSTOMER
    shtMemmber.Range(COL_ISVALID + ":" + COL_ISVALID).Resize(Range(COL_ISVALID + ":" + COL_ISVALID).Rows.Count - 2, Range(COL_ISVALID + ":" + COL_ISVALID).Columns.Count).offset(rowoffset:=2).ClearContents
Case SheetFormat.DCTM
    shtMemmber.Range("ax:ax").Resize(Range("ax:ax").Rows.Count - 1, Range("ax:ax").Columns.Count).offset(rowoffset:=1).ClearContents
End Select
protectSheet shtMemmber, "itdaman", True
End Function

Public Function CalcAge(ByVal dob As String, ByVal rdate As String) As Integer
Dim dt, rdt, errst As String
dt = Format(dob, "dd/MM/yyyy")
rdt = Format(rdate, "dd/MM/yyyy")
Dim age As Integer
                    age = DateDiff("yyyy", dt, rdt)
                    
                        If age < 0 Then errst = "err"
                        If Month(dt) > Month(rdt) Then
                            If age = 0 Then errst = "err"
                            age = age - 1
                        ElseIf Month(dt) < Month(rdt) Then
                            'yr = 0
                        ElseIf Day(dt) > Day(rdt) Then
                            If age = 0 Then errst = "err"
                        age = age - 1
                        Else
                    
                        End If
                            CalcAge = age
End Function

Public Function getCurrentSheetPlanType() As PlanType
    getCurrentSheetPlanType = shtListOfValues.Range("SelectedPlanItem").Cells(1, 1)
End Function

Public Function GetCurrentSheetFormat() As SheetFormat
    If (shtMemmber.Columns("A").Hidden) Then
        If shtMemmber.Cells(1, 1).Text = "External Policy Ref." Then
            GetCurrentSheetFormat = DCTM
        End If
    ElseIf shtMemmber.Cells(1, 1).Text = "External Policy Ref." Then
        GetCurrentSheetFormat = PRODUCTION
    Else
        GetCurrentSheetFormat = CUSTOMER
    End If
End Function


Public Sub AdjustPlanColumns(plan_Type As PlanType, SourceSheetFormat As SheetFormat, DestSheetFormat As SheetFormat)
    Dim isCurrentSheetInDCTMFormat As Boolean, planRange As Range, colPlanRangeIndex As String, tmpRange As Range
    
    'Dim currentSheetFormat As SheetFormat
   'currentSheetFormat = GetCurrentSheetFormat
    ' IDENTIFYING CONVERSION FORMAT
    'isCurrentSheetInDCTMFormat = False
            
    Call ConvertFormat(SourceSheetFormat, DestSheetFormat)
    
    If DestSheetFormat = CUSTOMER Then
        ' AFTER CONVERSION FROM CUSTOMER TO DCTM FORMAT, PLAN COLUMN WILL BE AT POSITION BO
        colPlanRangeIndex = "BO:BO"
        
        ' FOLLOWING COLUMNS SHOULD BE HIDDEN IF CONVERSION HAPPENED FROM DCTM TO CUSTOMER
        Select Case plan_Type
            Case EBP
                Set tmpRange = shtMemmber.Range(COL_ARABICFIRSTNAME & ":" & COL_ARABICLASTNAME)
                
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                'shtMemmber.Range(COL_ARABICFIRSTNAME & ":" & COL_ARABICLASTNAME).Columns.Resize(rowsize:=2).offset(rowoffset:=2).ClearContents
                
                Set tmpRange = shtMemmber.Range(COL_ACCOMMODATIONPROVIDED & ":" & COL_ACCOMMODATIONPROVIDED)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                'shtMemmber.Range(COL_ACCOMMODATIONPROVIDED & ":" & COL_ACCOMMODATIONPROVIDED).Columns.Resize(rowsize:=2).offset(rowoffset:=2).ClearContents
                
                ' SLO1383
                Set tmpRange = shtMemmber.Range(COL_GROSSSALARY & ":" & COL_GROSSSALARY)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("EBPlan")
            Case ADBP
                ' G-SEC CHANGES: PLAN COLUMN SHOULD BE VISIBLE FOR AD BASIC
                Set tmpRange = shtMemmber.Range(COL_PLANCATEGORY & ":" & COL_PLANCATEGORY)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                ' SLO1383: NATIONAL ID TYPE SHOULD ALSO BE VISILBLE IN EN/ADBP
                'Set tmpRange = shtMemmber.Range(COL_NATIONALIDTYPE & ":" & COL_NATIONALIDTYPE)
                'tmpRange.Columns.Hidden = True
                'tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                '''Range(COL_COMMISSION & ":" & COL_PASSPORTNO).Columns.Hidden = True
                Set tmpRange = shtMemmber.Range(COL_PREVIOUSINSURANCECOVERAGE & ":" & COL_PREVIOUSINSURANCECOVERAGE)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                '''Range(COL_VISAUNIFIEDNUMBER & ":" & COL_VISAUNIFIEDNUMBER).Columns.Hidden = True
                
                Set tmpRange = shtMemmber.Range(COL_OCCUPATION_CSTMR & ":" & COL_OCCUPATION_CSTMR)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                ' SLO1383
                Set tmpRange = shtMemmber.Range(COL_SALARYBAND & ":" & COL_SALARYBAND)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("ADBPlan")
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
            Case EP
                Set tmpRange = shtMemmber.Range(COL_ARABICFIRSTNAME & ":" & COL_ARABICLASTNAME)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                '''Range(COL_VISAUNIFIEDNUMBER & ":" & COL_VISAUNIFIEDNUMBER).Columns.Hidden = True
                ' SLO1383: NATIONAL ID TYPE SHOULD ALSO BE VISILBLE IN EN/ADBP
                'Set tmpRange = shtMemmber.Range(COL_NATIONALIDTYPE & ":" & COL_NATIONALIDTYPE)
                'tmpRange.Columns.Hidden = True
                'tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                
                Set tmpRange = shtMemmber.Range(COL_PREVIOUSINSURANCECOVERAGE & ":" & COL_PREVIOUSINSURANCECOVERAGE)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                Set tmpRange = shtMemmber.Range(COL_ACCOMMODATIONPROVIDED & ":" & COL_ACCOMMODATIONPROVIDED)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                Set tmpRange = shtMemmber.Range(COL_OCCUPATION_CSTMR & ":" & COL_OCCUPATION_CSTMR)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                ' SLO1383
                Set tmpRange = shtMemmber.Range(COL_GROSSSALARY & ":" & COL_GROSSSALARY)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("EPlan")
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
            
        End Select
    ElseIf DestSheetFormat = DCTM Then
        ' AFTER CONVERSION FROM CUSTOMER TO DCTM FORMAT, PLAN COLUMN WILL BE AT POSITION P
        colPlanRangeIndex = "P:P"
        
        ' FOLLOWING COLUMNS SHOULD BE HIDDEN IF CONVERSION HAPPENED FROM CUSTOMER TO DCTM
        Select Case plan_Type
            Case EBP
                Set tmpRange = shtMemmber.Range("AC:AE")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                Set tmpRange = shtMemmber.Range("BN:BN")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("EBPlan")
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
            Case ADBP
                ' SLO1383: NATIONAL ID TYPE SHOULD ALSO BE VISILBLE IN EN/ADBP
                'Set tmpRange = shtMemmber.Range("BC:BC")
                'tmpRange.Columns.Hidden = True
                'tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                Set tmpRange = shtMemmber.Range("BA:BA")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                 
                Set tmpRange = shtMemmber.Range(COL_OCCUPATION_DCTM & ":" & COL_OCCUPATION_DCTM)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("ADBPlan")
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
            Case EP
                Set tmpRange = shtMemmber.Range("AC:AE")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                ' SLO1383: NATIONAL ID TYPE SHOULD ALSO BE VISILBLE IN EN/ADBP
                'Set tmpRange = shtMemmber.Range("BC:BC")
                'tmpRange.Columns.Hidden = True
                'tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                Set tmpRange = shtMemmber.Range("BA:BA")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                Set tmpRange = shtMemmber.Range("BN:BN")
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 1)).offset(rowoffset:=1).ClearContents
                
                Set tmpRange = shtMemmber.Range(COL_OCCUPATION_DCTM & ":" & COL_OCCUPATION_DCTM)
                tmpRange.Columns.Hidden = True
                tmpRange.Resize(rowsize:=(tmpRange.Rows.Count - 2)).offset(rowoffset:=2).ClearContents
                
                'SET PLAN RANGE BASED ON USER PLAN SELECTION
                Set planRange = Range("EPlan")
                
                'RELEASE RESOURCE
                Set tmpRange = Nothing
        End Select
    Else
        colPlanRangeIndex = "P:P"
        Select Case plan_Type
            Case EBP
                Set planRange = Range("EBPlan")
            Case ADBP
                Set planRange = Range("ADBPlan")
            Case EP
                Set planRange = Range("EPlan")
        End Select
    End If
    
    'UPDATE REFERENCE OF PLANSLIST RANGE AS PER USER SELECTED PLAN
    Names.item("PlansList").RefersTo = planRange
    protectSheet shtMemmber, "itdaman", False
    'SETTING PLAN DROPDOWN LIST DATA VALIDATION
    With shtMemmber.Range(colPlanRangeIndex).Validation
        .Delete
        .Add Type:=xlValidateList, _
        AlertStyle:=xlValidAlertStop, _
        Formula1:="=PlansList"
        .InputTitle = "Plan"
        .ErrorTitle = "Invalid Plan"
        .InputMessage = ""
        .ErrorMessage = "Please select a valid plan from the list"
    End With
    
    'RELEASE RESOURCES
    Set planRange = Nothing
End Sub

Public Sub ConvertFormat(SourceFormat As SheetFormat, DestFormat As SheetFormat)
    Dim configTableName As String, configIdex As Integer, tblConfig As Variant
    Dim configColumnNo As Integer, headingRange As Range
    Dim isCustomerToDCTMFormat As Boolean
    ' FETCH CONFIGURATION TABLE BASED ON CONVERSION REQUEST
    ' CONVERT FROM CUSTOMER TO DCTM
    'If SourceFormat = CUSTOMER And DestFormat = DCTM Then
    '    isCustomerToDCTMFormat = True
    'ElseIf IsSourceDCTm = True And IsDestDCTM = False Then
    '    isCustomerToDCTMFormat = False
    'End If
    
    If SourceFormat = CUSTOMER And DestFormat = DCTM Then ' isCustomerToDCTMFormat Then
        configTableName = "tblDCTMColumnConfig"
        configColumnNo = 4
        
        shtMemmber.Range("A1").EntireRow.Delete
        
        Set headingRange = shtMemmber.Range("A1:CE1")
    ElseIf SourceFormat = DCTM And DestFormat = CUSTOMER Then ' isDCTMToCustomerFormat Then
        ' CONVERT FROM DCTM TO CUSTOMER
       configTableName = "tblCustomerColumnConfig"
       configColumnNo = 1
       
        'Inserting a Row at at Row 1
         shtMemmber.Range("A1").EntireRow.Insert
       
        With shtMemmber.Range("A1:CE1")
            .Font.Color = Cells(2, 1).Font.Color
            .Interior.ColorIndex = 12
            .Font.name = Cells(2, 1).Font.name
            .Font.Size = 8
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Locked = True
        End With
        
        Set headingRange = shtMemmber.Range("A2:CE2")
    ElseIf SourceFormat = CUSTOMER And DestFormat = CUSTOMER Then 'Customer to Customer Then
        ' CONVERT FROM DCTM TO CUSTOMER
        configTableName = "tblCustomerColumnConfig"
        configColumnNo = 4
       
        Set headingRange = shtMemmber.Range("A2:CE2")
    ElseIf SourceFormat = DCTM And DestFormat = DCTM Then ' DCTM to DCTM Then
        configTableName = "tblDCTMColumnConfig"
        configColumnNo = 1
       
        Set headingRange = shtMemmber.Range("A1:CE1")
    ElseIf SourceFormat = DCTM And DestFormat = PRODUCTION Then
        configTableName = "tblMednextColumnConfig"
        configColumnNo = 4
       
        Set headingRange = shtMemmber.Range("A1:CE1")
    ElseIf SourceFormat = PRODUCTION And DestFormat = DCTM Then
        configTableName = "tblDCTMColumnConfig"
        configColumnNo = 6
       
        Set headingRange = shtMemmber.Range("A1:CE1")
    ElseIf SourceFormat = PRODUCTION And DestFormat = PRODUCTION Then
        configTableName = "tblMednextColumnConfig"
        configColumnNo = 1
        Set headingRange = shtMemmber.Range("A1:CE1")
    End If
    headingRange.EntireColumn.AutoFit
    ' REARRANGE COLUMNS AS PER CUSTOMER VERSION
    Set tblConfig = shtListOfValues.ListObjects(configTableName)
    ' UNHIDE ALL COLUMNS
    'protectSheet shtMemmber, "itdaman", False
    shtMemmber.Range("A1:CE1").Columns.Hidden = False
    
    ' REARRANGE COLUMNS
    For configIdex = 1 To tblConfig.ListRows.Count
        Dim colPos As Integer
        Dim Head2bSearched, prefixForEPAndADBP As String
        prefixForEPAndADBP = ""
        
        Head2bSearched = tblConfig.DataBodyRange(configIdex, configColumnNo)
        
        If (SourceFormat = DCTM And DestFormat = CUSTOMER And _
             (getCurrentSheetPlanType = ADBP Or getCurrentSheetPlanType = EP) And _
            (configIdex = 25 Or configIdex = 64 Or configIdex = 5 Or configIdex = 27)) Or _
            (SourceFormat = DCTM And DestFormat = PRODUCTION And _
             (getCurrentSheetPlanType = ADBP Or getCurrentSheetPlanType = EP) And _
            (configIdex = 66 Or configIdex = 67 Or configIdex = 68 Or configIdex = 69)) Then _
            Head2bSearched = "." + Head2bSearched
            
            
        colPos = FindColByName(Head2bSearched, headingRange)
            
        
        ' RENAME
        ' MAIN COLUMN NAME SHOULD BE DISPLAYED DURING CUSTOMER TO DCTM FORMAT CONVERSION
        ' FRIENDLY COLUMN NAME SHOULD BE DISPLAYED DURING DCTM TO CUSTOMER CONVERSION
        If SourceFormat = CUSTOMER And DestFormat = DCTM Then
            ''' existing ebp custom field column names should not be used in EP or ADBP. so adding . prefix to these columns
            'If (shtMemmber.Columns(colPos).Cells(1, 1).Text = Head2bSearched) And (Head2bSearched <> tblConfig.DataBodyRange(configIdex, 1).Value) Then
                If (getCurrentSheetPlanType = ADBP Or getCurrentSheetPlanType = EP) And _
                (configIdex = 53 Or configIdex = 54 Or configIdex = 55 Or configIdex = 56) Then prefixForEPAndADBP = "." Else prefixForEPAndADBP = ""
                
            shtMemmber.Columns(colPos).Cells(1, 1) = prefixForEPAndADBP + tblConfig.DataBodyRange(configIdex, 1).Value
            'shtMemmber.Columns(colPos).Cells(1, 1) = tblConfig.DataBodyRange(configIdex, 1).Value
            'End If
            shtMemmber.Columns(colPos).ColumnWidth = tblConfig.DataBodyRange(configIdex, 5).Value
        ElseIf SourceFormat = DCTM And DestFormat = CUSTOMER Then
            'tblConfig.DataBodyRange(configIdex, 4).Value
            If shtMemmber.Columns(colPos).Cells(2, 1).Text <> tblConfig.DataBodyRange(configIdex, 4).Value Then
                shtMemmber.Columns(colPos).Cells(2, 1) = tblConfig.DataBodyRange(configIdex, 4).Value
            End If
            'protectSheet shtMemmber, "itdaman", False
            ' ADD COLUMN DESCRIPTION
            shtMemmber.Columns(colPos).Cells(1, 1) = tblConfig.DataBodyRange(configIdex, 5).Value
            
        ElseIf SourceFormat = DCTM And DestFormat = PRODUCTION Then
            If (shtMemmber.Columns(colPos).Cells(1, 1).Text = Head2bSearched) And (Head2bSearched <> tblConfig.DataBodyRange(configIdex, 1).Value) Then
                shtMemmber.Columns(colPos).Cells(1, 1) = tblConfig.DataBodyRange(configIdex, 1).Value
            End If
            shtMemmber.Columns(colPos).ColumnWidth = tblConfig.DataBodyRange(configIdex, 6).Value
        ElseIf SourceFormat = PRODUCTION And DestFormat = DCTM Then
            'If (shtMemmber.Columns(colPos).Cells(1, 1).Text = tblConfig.DataBodyRange(configIdex, 6).Value) And (tblConfig.DataBodyRange(configIdex, 6).Value <> tblConfig.DataBodyRange(configIdex, 1).Value) Then
            If (getCurrentSheetPlanType = ADBP Or getCurrentSheetPlanType = EP) And _
                (configIdex = 53 Or configIdex = 54 Or configIdex = 55 Or configIdex = 56) Then prefixForEPAndADBP = "." Else prefixForEPAndADBP = ""
                shtMemmber.Columns(colPos).Cells(1, 1) = prefixForEPAndADBP + tblConfig.DataBodyRange(configIdex, 1).Value
            'End If
            shtMemmber.Columns(colPos).ColumnWidth = tblConfig.DataBodyRange(configIdex, 5).Value
        End If
        
        If DestFormat = CUSTOMER Then shtMemmber.Columns(colPos).ColumnWidth = tblConfig.DataBodyRange(configIdex, 6).Value
        
        If colPos <> tblConfig.DataBodyRange(configIdex, 2) Then
            Call MoveColumn("Member Details", colPos, tblConfig.DataBodyRange(configIdex, 2))
        End If
        
    Next
    
    Dim offset As Integer
    If DestFormat = CUSTOMER Then
        offset = 2
    Else
        offset = 1
    End If
    
    ' HIDE COLUMNS1
    For configIdex = 1 To tblConfig.ListRows.Count
        shtMemmber.Columns(tblConfig.DataBodyRange(configIdex, 2)).Hidden = Not CBool(tblConfig.DataBodyRange(configIdex, 3))
        
        'BEFORE HIDING CONTENTST SHOULD BE CLEARED
        Dim strColumnAddress As String
        strColumnAddress = ""
        If (UCase(shtMemmber.Columns(tblConfig.DataBodyRange(configIdex, 2)).Cells(1, 1).Text) <> "PLAN CATEGORY") And Not CBool(tblConfig.DataBodyRange(configIdex, 3)) Then
            strColumnAddress = shtMemmber.Columns(tblConfig.DataBodyRange(configIdex, 2)).Address
            shtMemmber.Range(strColumnAddress).Resize(Range(strColumnAddress).Rows.Count - offset, Range(strColumnAddress).Columns.Count).offset(rowoffset:=offset).ClearContents
        End If
'        If Not CBool(tblConfig.DataBodyRange(configIdex, 3)) Then
'            shtMemmber.Columns(tblConfig.DataBodyRange(configIdex, 2)).Resize(rowsize:=offset).offset(rowoffset:=offset).ClearContents
'        End If
        
    Next
    
    If DestFormat = CUSTOMER Then
        shtMemmber.Rows(1).EntireRow.AutoFit
    End If
    headingRange.Interior.ColorIndex = 9

End Sub

Public Function GetSalaryBand(gSalary As String, pType As PlanType) As String
    Dim sBand As String
    sBand = ""
    
    ' SLO1383: SALARY BAND WORDING CHANGED AS BELOW:
    ' 1-4000          -->  Less than 4001
    ' 4001-12000      -->  Above 4000 Less than 12000
    ' 12000 and above -->  Above 12000
    'If (pType = PlanType.EBP) Or (pType = PlanType.EP) Then
        If gSalary <> "" And IsNumeric(gSalary) Then
            If gSalary > 0 Then
                If CLng(gSalary) <= 4000 Then
                    sBand = shtListOfValues.Range("SalaryBandList").Cells(1, 1).Text
                ElseIf CLng(gSalary) > 4000 And gSalary <= 12000 Then
                    sBand = shtListOfValues.Range("SalaryBandList").Cells(2, 1).Text
                ElseIf CLng(gSalary) > 12000 Then
                    sBand = shtListOfValues.Range("SalaryBandList").Cells(3, 1).Text
                Else
                    sBand = shtListOfValues.Range("SalaryBandList").Cells(4, 1).Text '"No salary"
                End If
            Else
                sBand = shtListOfValues.Range("SalaryBandList").Cells(4, 1).Text '"No salary"
            End If
        Else
            sBand = shtListOfValues.Range("SalaryBandList").Cells(4, 1).Text '"No salary"
        End If
    'End If
    
    GetSalaryBand = sBand
End Function

Public Sub AddNamedRangeItem(rangeName As String, item As String)
    Dim newEntry As Variant, rws As Long, adr As String
    newEntry = item
    
    rws = Range(rangeName).Rows.Count
    Range(rangeName).Cells(1, 1).offset(rws, _
        0).Value = newEntry
    
    With Range(rangeName).name
        adr = .RefersTo
        .Delete
    End With
    
    Range(adr).Resize(rws + 1, 1).name = rangeName
End Sub

Public Sub ResizeNamedRange(rangeName As String, isIncreaseReq As Boolean)
    'Dim rngCells As Range
    
    'Set rngCells = Range(rangeName)
    'For i = rngCells.Cells.Count To 1 Step -1
    '    If rngCells(i).Value = item Then
    '        rngCells(i, 1).Delete
    '    End If
    'Next i
    
    'FinalRow = Cells(Rows.Count, 2).End(xlUp).Row
    
    Dim rws As Long, adr As String, rowIdx As Integer
    rws = Range(rangeName).Rows.Count
    
    With Range(rangeName).name
        adr = .RefersTo
        .Delete
    End With
    
    If isIncreaseReq Then
        rowIdx = rws + 1
    Else
        rowIdx = rws - 1
    End If
    
    Range(adr).Resize(rowIdx, 1).name = rangeName
End Sub


Public Function ItemExistsInNamedRange(rangeName As String, item As String) As Boolean
    ItemExistsInNamedRange = Not (Range(rangeName).Find(what:=item, LookIn:=Excel.xlValues, lookat:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext) Is Nothing)
End Function

Public Function ItemExistsInNamedRange_MatchCase(rangeName As String, item As String) As Boolean
    ItemExistsInNamedRange_MatchCase = Not (Range(Replace(rangeName, " ", "")).Find(what:=item, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True) Is Nothing)
End Function


Public Sub MoveColumn(sheetName As String, colFromIndex As Integer, colToIndex As Integer)
    Dim sh As Worksheet
    Set sh = Sheets(sheetName)
     
    'sh.Columns.Hidden = False
    sh.Columns(colFromIndex).EntireColumn.Cut
    sh.Columns(colToIndex).Insert Shift:=xlToRight
    Application.CutCopyMode = False
    
    
End Sub

Function FindRowPosByVal(str As String, rng As Range) As Integer
    Dim c As Variant
    
    Set c = rng.Find(what:=str, LookIn:=xlValues, lookat:=xlWhole)
    
    If Not c Is Nothing Then
        FindRowPosByVal = c.Row
    End If
End Function

Function findAllfromRange(str As String, ByVal rng As Range, returnRangeStartCol As Integer, returnRangeEndCol As Integer) As Variant
Dim c As Variant
Dim sht As Worksheet
Dim retRange, foundCell, firstFound, lastFound As Range
Set sht = rng.Parent
    Set c = rng.Find(what:=str, LookIn:=xlValues, lookat:=xlWhole)
    
    If Not c Is Nothing Then
        Set firstFound = c
        Set foundCell = sht.Range(sht.Cells(c.Row, returnRangeStartCol), sht.Cells(c.Row, returnRangeEndCol))
        Set retRange = foundCell
        Do Until False
            Set c = rng.Find(what:=str, LookIn:=xlValues, lookat:=xlWhole, after:=c)
            If Not c Is Nothing Then
                If (c.Address = firstFound.Address) Then
                    Exit Do
                Else
                    Set foundCell = sht.Range(sht.Cells(c.Row, returnRangeStartCol), sht.Cells(c.Row, returnRangeEndCol))
                    Set retRange = Application.Union(retRange, foundCell)
                End If
            Else
                Exit Do
            End If
        Loop
    End If
    If IsEmpty(retRange) Then
        Set findAllfromRange = Nothing
    Else
        Set findAllfromRange = retRange
    End If
    
    
End Function


Function FindValFromRange(str As String, rng As Range, returnPos As Integer) As String
    Dim c As Variant
    
    Set c = rng.Find(what:=str, LookIn:=xlValues, lookat:=xlWhole)
    
    If Not c Is Nothing Then
        FindValFromRange = c.Cells(1, returnPos)
    End If
End Function


Function FindColByName(ByVal colName As String, rng As Range) As Integer

    'Dim rng As Range
    'Set rng = Sheets("Member Details").Range("A1:BP1")
    Dim stt As String
    Dim c As Variant
    
    Set c = rng.Find(what:=colName, LookIn:=xlValues, lookat:=xlWhole)
    
    If Not c Is Nothing Then
        FindColByName = c.Column
    End If
End Function

Public Sub AddRemoveDescriptionRow(isAddReq As Boolean)
    Dim rng As Range
    Set rng = shtMemmber.Range("A1:CE1")
    
   'Inserting a Row at at Row 2
    Range("A1").EntireRow.Insert
'
'Inserting 3 Rows from 3
Rows("3:5").EntireRow.Insert
End Sub
Sub setNewPassword()
    If checkPermission Then
                    
        Dim pswrd As String
        pswrd = InputBox("Enter new passcode", "Set Passcode")
        If StrPtr(pswrd) = 0 Then Exit Sub
        
        protectSheet shtListOfValues, "D@m@nIT", False
            shtListOfValues.Range("DA1") = pswrd
        protectSheet shtListOfValues, "D@m@nIT", True
        MsgBox "Passcode set successfully", vbInformation, msgTitle
    End If
End Sub
Function checkPermission() As Boolean
Dim pswrd As String
pswrd = InputBox("Enter current passcode", "Passcode")
If StrPtr(pswrd) = 0 Then Exit Function
If pswrd = shtListOfValues.Range("DA1").Text Then checkPermission = True Else checkPermission = False: MsgBox "Wrong passcode", vbCritical, msgTitle
End Function
Public Sub MapPlan()
If GetCurrentSheetFormat = DCTM Then
    If checkPermission Then frmCatPlanMapping.Show
Else
    MsgBox "This functionality is available only in DCTM format", vbInformation, msgTitle: Exit Sub
End If
End Sub
Public Sub DefinePlan()
    If GetCurrentSheetFormat = CUSTOMER Then
        If getCurrentSheetPlanType <> EP Then MsgBox "This functionality is avialble only for Enhanced plans", vbInformation, msgTitle: Exit Sub
        frmDefinePlanCats.Show
        resetValidation
    Else
        MsgBox "This functionality is avialble only in Customer format", vbInformation, msgTitle
    End If
End Sub
    
Sub SheetTypeSelection()
If GetCurrentSheetFormat <> CUSTOMER Then MsgBox "This functionality is avialble only in Customer format", vbInformation, msgTitle: Exit Sub
Application.EnableEvents = False
Application.ScreenUpdating = False
frmSheetTypeSelection.Show
Application.ScreenUpdating = True
Application.EnableEvents = True
If selectedPlan = EP Then frmDefinePlanCats.Show
resetValidation
End Sub
Sub ConverFormat()

Dim currentSheetFormat As SheetFormat
currentSheetFormat = GetCurrentSheetFormat

If currentSheetFormat = CUSTOMER Then If getMemberCount > Application.WorksheetFunction.CountIf(shtMemmber.Range(COL_ISVALID + ":" + COL_ISVALID), "Y") Then MsgBox "Validation is not done completly for all members" & vbNewLine & "Please run error check on all members", vbExclamation, msgTitle: Exit Sub

If Not checkPermission Then Exit Sub
Dim ans As VbMsgBoxResult
Application.EnableEvents = False
Application.ScreenUpdating = False
Call protectSheet(shtMemmber, "itdaman", False)
If currentSheetFormat = CUSTOMER Then
'FindRowPosByVal("N", shtMemmber.Range("AK:Ak")) > 0

ans = MsgBox("Currently sheet is in Customer format" & vbNewLine & "do you want to convert into DCTM format?", vbYesNo)
    If ans = vbYes Then
        frmCatPlanMapping.Convert = True
        frmCatPlanMapping.Show
    Else
        GoTo xxx
    End If
Else
ans = MsgBox("Currently sheet is in DCTM format" & vbNewLine & "do you want to convert into Customer format?", vbYesNo)
    If ans = vbYes Then
        Call AdjustPlanColumns(getCurrentSheetPlanType, DCTM, CUSTOMER)
    Else
        GoTo xxx
    End If
End If
shtMemmber.Range("B3").Select
resetValidation
showHideCommandBars
MsgBox "Conversion has been completed", vbInformation, msgTitle
xxx:
Call protectSheet(shtMemmber, "itdaman", True)
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub

Public Sub protectSheet(sht As Worksheet, password As String, isToProtect As Boolean)
If isToProtect Then
    sht.Protect password:=password, DrawingObjects:=True, Contents:=True, Scenarios:=True _
    , AllowFormattingCells:=True, AllowFormattingRows:=True, _
    AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
Else
    If sht.ProtectContents Then sht.Unprotect (password)
End If
End Sub

'SEARCHES IN CUSTOM TABLE AND RETURNS OUTPUT ROW AS RANGE
Public Function GetTableRow(ByVal tableName As String, ByVal columnNum As Long, ByVal key As Variant) As Range
    On Error Resume Next
     
    If IsNumeric(key) Then key = CLng(key)
     
    Set GetTableRow = Range(tableName) _
        .Rows(WorksheetFunction.Match(key, Range(tableName).Columns(columnNum), 0))
    If Err.number <> 0 Then
        Err.Clear
        Set GetTableRow = Nothing
    End If
End Function

' RETURNS TRUE IF ARRAY CONTAINS ITEM OTHERWISE FALSE
Public Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean
  IsInArray = (UBound(Filter(arr, stringToBeFound)) > -1)
End Function

' SLO1383 - CHILD CONTACT SHOULD BE SAME AS PRINCIPAL IF:
' AGE:  < 18: AGE REQUIREMENT HAS BEEN REMOVED AS OTHER CHILD ALSO BE CONSIDERED NOW FOR THIS AND OTHER CHILD WILL ALWAYS HAVE AGE >18
' RELATION: CHILD DEPENDENT
Public Sub GetContactNoForChild(ByVal principalRefNo As Long, ByVal relation As String, ByVal age As Integer, _
                                ByRef dependentContactNo As String, ByRef dependentCity As String, _
                                ByRef dependentEmirate As String, ByRef dependentResLoc As String, _
                                ByRef dependentWrkLoc As String, ByRef dependentEmail As String)
    
    'RESET REFERENCE PARAMS
    dependentContactNo = ""
    dependentCity = ""
    dependentEmirate = ""
    dependentResLoc = ""
    dependentWrkLoc = ""
    dependentEmail = ""
    
    ' INSTR FUNCTION WILL WORK FOR BOTH CHILD AND OTHER CHILD
    ' INSTR FUNCTION WILL WORK FOR BOTH SPOUSE AND OTHER SPOUSE
    If (InStr(UCase(Trim(relation)), "CHILD") > 0) Or _
        (InStr(UCase(Trim(relation)), "SPOUSE") > 0) Then
         
        Dim currSheetFormat As SheetFormat
        Dim colPrincipalRefNoIndex As Integer, rowIndex As Integer
        Dim colTelephone As String, colCity As String, colEmirate As String, colResLoc As String, colWrkLoc As String, _
            colEmail As String, colRelation As String, rangeToFindPrincipal As String
        
        currSheetFormat = GetCurrentSheetFormat
        If currSheetFormat = CUSTOMER Then
            rangeToFindPrincipal = "A:A"
            rowIndex = 3    'IN CASE OF CUSTOMER SHEET THERE WILL BE DECRIPTION ROW. DATA ROW WILL START FROM 3
            colRelation = COL_RELATION_CSTMR
            
            colTelephone = COL_TELEPHONE1
            colCity = COL_CITY_CSTMR
            colEmirate = COL_EMIRATE
            colResLoc = COL_RESINDENTIALLOC
            colWrkLoc = COL_WORKLOC
            colEmail = COL_EMAIL
            
        Else
            rangeToFindPrincipal = COL_MEMBERREFNO_PROD & ":" & COL_MEMBERREFNO_PROD
            rowIndex = 2
            
            'TELEPHONE AND CITY ARE AT SAME POSITION IN DCTM AND PROD SHEETS
            colTelephone = COL_TELEPHONE1_DCTM
            colCity = COL_CITY_DCTM
            colRelation = COL_RELATION_DCTM
            rangeToFindPrincipal = "B:B"
            
            If currSheetFormat = DCTM Then
                colEmirate = COL_EMIRATE_DCTM
                colResLoc = COL_RESINDENTIALLOC_DCTM
                colWrkLoc = COL_WORKLOC_DCTM
                colEmail = COL_EMAIL_DCTM
            Else
                colEmirate = COL_EMIRATE_PROD
                colResLoc = COL_RESINDENTIALLOC_PROD
                colWrkLoc = COL_WORKLOC_PROD
                colEmail = COL_EMAIL_PROD
            End If

        End If
        
        Dim rngFound As Range, cel As Range
        Dim wks As Worksheet
        Dim rng As Range
        Dim fads
        Set wks = ActiveSheet
        
        Dim totalRows As Integer
        With wks
            With Range(rangeToFindPrincipal)
                Set rngFound = Nothing
                
                Set rngFound = .Find(principalRefNo, LookIn:=xlValues, lookat:=xlWhole)
                If Not rngFound Is Nothing Then
                    fads = rngFound.Address
                    
                    Do While 1
                    If Not rngFound Is Nothing Then
                        If UCase(Trim(Cells(rngFound.Row, colRelation))) = "PRINCIPAL" Then
                            Exit Do
                        End If
                    End If
                    Set rngFound = .FindNext(rngFound)
                    If rngFound.Address = fads Then Exit Do
                    Loop
                End If
            End With
               
            If Not rngFound Is Nothing Then
                dependentContactNo = wks.Cells(rngFound.Row, colTelephone)
                dependentCity = wks.Cells(rngFound.Row, colCity)
                dependentEmirate = wks.Cells(rngFound.Row, colEmirate)
                dependentResLoc = wks.Cells(rngFound.Row, colResLoc)
                dependentWrkLoc = wks.Cells(rngFound.Row, colWrkLoc)
                dependentEmail = wks.Cells(rngFound.Row, colEmail)
            End If
        
        End With
    End If
       
End Sub

Public Sub ValidateAdditionalSpouse(ByVal principalRefNo As Long, ByRef errCnt As Long)

    Dim spouseText As String, childText As String, rngFound As Range, cel As Range
    Dim colRelationIndex As Integer, colPrincipalRefNoIndex As Integer
    Dim currSheetFormat As SheetFormat
    
    currSheetFormat = GetCurrentSheetFormat
    
    If currSheetFormat = CUSTOMER Then
        colRelationIndex = 10
        colPrincipalRefNoIndex = 11
    Else
        colRelationIndex = 12
        colPrincipalRefNoIndex = 14
    End If
    
    
    spouseText = "Spouse"
    childText = "Child"
    
    ActiveSheet.Unprotect ("itdaman")
    Application.EnableEvents = False
    
    Dim wks As Worksheet
    Dim rng As Range
    Set wks = ActiveSheet
    
    Dim totalRows As Integer
    With wks
        .AutoFilterMode = False
         
        ' AUTO FILTER FOR SPOUSE
        'always better to AutoFilter than Loop when you can!
        .UsedRange.AutoFilter colRelationIndex, spouseText
        .UsedRange.AutoFilter colPrincipalRefNoIndex, principalRefNo
    
        totalRows = wks.AutoFilter.Range.Columns(2).SpecialCells(xlCellTypeVisible).Cells.Count - 1
        Set rngFound = Intersect(.UsedRange, .Columns(colRelationIndex)).SpecialCells(xlCellTypeVisible)
       
        If Not rngFound Is Nothing And totalRows > 1 Then
            Dim spouseCount As Integer
            
            For Each cel In rngFound
                ' FIRST ROW WILL BE DISPLAYING DESCRIPTION COLUMN
                ' SECOND ROW WILL BE DISPLAYING FIRST SPOUSE
                ' THIRD AND ABOVE WILL BE DISPLAYING ADDITIONAL SPOUSES
                If spouseCount > 1 Then
                    cel.Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(cel, "Second Spouse and above must be selected as Other Spouse")
                End If
                
                spouseCount = spouseCount + 1
                'V = cel.Value
            Next
        End If
    
        .AutoFilterMode = False
        
        ' AUTO FILTER FOR CHILD
        'always better to AutoFilter than Loop when you can!
        .UsedRange.AutoFilter colRelationIndex, childText
        .UsedRange.AutoFilter colPrincipalRefNoIndex, principalRefNo
        
        totalRows = wks.AutoFilter.Range.Columns(2).SpecialCells(xlCellTypeVisible).Cells.Count - 1
        Set rngFound = Intersect(.UsedRange, .Columns(colRelationIndex)).SpecialCells(xlCellTypeVisible)
        
        If Not rngFound Is Nothing And totalRows > 3 Then
            Dim childCount As Integer
            
            For Each cel In rngFound
                ' FIRST ROW WILL BE DISPLAYING DESCRIPTION COLUMN
                ' SECOND ROW WILL BE DISPLAYING FIRST SPOUSE
                ' THIRD AND ABOVE WILL BE DISPLAYING ADDITIONAL SPOUSES
                If childCount > 3 Then
                    cel.Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(cel, "More than 3 children must be selected as Other Child")
                End If
                
                childCount = childCount + 1

            Next
        End If
        
        .AutoFilterMode = False
    End With

End Sub

Public Function IsPrincipal( _
                            ByVal colRelation As String, _
                            ByVal colMemberRefNo As String, _
                            ByVal colPrincipalRefNo As String, ByRef rowIdx As Long) As Boolean
    
    'REVERTING CHANGES AS PER PMG0000546
    If (UCase(Trim(Cells(rowIdx, colRelation).Text)) = "PRINCIPAL") Then
        IsPrincipal = True
    Else
        IsPrincipal = False
    End If
     
'    If (UCase(Trim(Cells(rowIdx, colRelation).Text)) = "PRINCIPAL") Or _
'        ((getCurrentSheetPlanType = ADBP) And (UCase(Trim(Cells(rowIdx, colMemberRefNo).Text)) = UCase(Trim(Cells(rowIdx, colPrincipalRefNo).Text)))) Then
'        IsPrincipal = True
'    Else
'        IsPrincipal = False
'    End If
    
End Function


Public Sub RemoveCensus()
Dim ws As Worksheet
Dim sht As Worksheet

'Set sht = Nothing
For Each ws In Sheets
    If ws.name = "AD Census" Then Set sht = Sheets("AD Census")
Next
If Not sht Is Nothing Then
    Dim ans
    ans = MsgBox("This action will remove the Census sheet forever from the file." & vbNewLine & "Do you want to proceed ?", vbYesNo + vbExclamation, msgTitle)
    If ans = vbYes Then
        ActiveWorkbook.Unprotect password:="D@m@nIT"
        sht.Delete
        ActiveWorkbook.Protect Structure:=True, Windows:=False, password:="D@m@nIT"
    End If
Else
    MsgBox "Census sheet not found!", vbExclamation, msgTitle
End If



Attribute VB_Name = "HelperFunctions"
Public Function IsValidEID(ByVal emiratesID As String) As Boolean
    Const allowedValue As String = "0123456789"
    Dim i As Integer
    Dim multiplier As Integer, digit As Integer, sum As Integer, total As Integer, isValid As Boolean
    total = 0
    isValid = False
    Dim number As String
     
    If IsNumeric(emiratesID) Then
        number = StrReverse(emiratesID)
        
        For i = 1 To Len(number)
            If InStr(allowedValue, Mid(number, i, 1)) >= 0 Then
                multiplier = 1 + (i Mod 2)
                digit = CInt(Mid(number, i, 1))
                sum = digit * multiplier
                
                If sum > 9 Then
                    sum = sum - 9
                End If
                total = total + sum
            End If
        Next i
        
        isValid = (total Mod 10 = 0)
    End If
    
    IsValidEID = isValid
End Function

Public Function Calculate(Luhn)
    Dim sum
    sum = 0
    
    For i = 1 To Len(Luhn) Step 1
        sum = sum + CInt(Mid(Luhn, i, 1))
    Next i
    
    Dim delta(0 To 10) As Integer
    delta(0) = 0
    delta(1) = 1
    delta(2) = 2
    delta(3) = 3
    delta(4) = 4
    delta(5) = -4
    delta(6) = -3
    delta(7) = -2
    delta(8) = -1
    delta(9) = 0
    
    For i = Len(Luhn) To 1 Step -2
        Dim deltaIndex, deltaValue
        
        deltaIndex = CInt(Mid(Luhn, i, 1))
        deltaValue = delta(deltaIndex)
        sum = sum + deltaValue
    Next i
    
    Dim mod10
    mod10 = sum Mod 10
    mod10 = 10 - mod10
    If mod10 = 10 Then
        mod10 = 0
    End If

    Calculate = mod10
End Function
    


Public Function ValidateEID(Luhn) As Boolean
    Dim LuhnDigit, LuhnLess
    Dim isValidEmirateID As Boolean
    isValidEmirateID = False
    
    If IsNumeric(Luhn) Then
        LuhnDigit = CInt(Mid(Luhn, Len(Luhn), 1))
    
        LuhnLess = Mid(Luhn, 1, Len(Luhn) - 1)
        If Calculate(LuhnLess) = CInt(LuhnDigit) Then
            isValidEmirateID = True
        End If
    End If
    
    
    ValidateEID = isValidEmirateID
End Function

        


Attribute VB_Name = "Module1"
Option Explicit

Private Sub lstofvls()
    If GetCurrentSheetFormat = CUSTOMER Then
        If Selection.Column = 19 Or Selection.Column = 21 Then
            UserForm3.Show
        End If
    Else
        If Selection.Column = 33 Or Selection.Column = 35 Then
            UserForm3.Show
        ElseIf Selection.Column = 16 Then
            UserForm2.Show
        End If
    End If
    
    
End Sub
Sub Error_Check()
frmErrCheck.Show
End Sub

Private Function CalcAge(ByVal dob As String, ByVal rdate As String) As Integer
Dim dt, rdt, errst As String
dt = Format(dob, "dd/MM/yyyy")
rdt = Format(rdate, "dd/MM/yyyy")
Dim age As Integer
                    age = DateDiff("yyyy", dt, rdt)
                    
                        If age < 0 Then errst = "err"
                        If Month(dt) > Month(rdt) Then
                            If age = 0 Then errst = "err"
                            age = age - 1
                        ElseIf Month(dt) < Month(rdt) Then
                            'yr = 0
                        ElseIf Day(dt) > Day(rdt) Then
                            If age = 0 Then errst = "err"
                        age = age - 1
                        Else
                    
                        End If
                            CalcAge = age
End Function


Sub UpperCase()
Dim i, j As Long
For i = 1 To Selection.Rows.Count
    For j = 1 To Selection.Columns.Count
        Selection.Cells(i, j) = UCase(Selection.Cells(i, j).Text)
    Next j
Next i
End Sub
Sub TrimCells()
Dim i, j As Long
For i = 1 To Selection.Rows.Count
    For j = 1 To Selection.Columns.Count
        Selection.Cells(i, j) = Trim(Selection.Cells(i, j).Text)
    Next j
Next i
End Sub
Public Sub addComm(ds As Range, Cmnt As String)
Dim tmpCmnt As String
If Not ds.Comment Is Nothing Then
    tmpCmnt = ds.Comment.Text
    ds.Comment.Delete
End If
If tmpCmnt <> "" And tmpCmnt <> Cmnt Then
    ds.AddComment (tmpCmnt & vbNewLine & Cmnt)
Else
    ds.AddComment (Cmnt)
End If
End Sub

Sub about()
MsgBox "Member Transaction Template version:" & DamanGlobal.getSheetVersion & vbNewLine & "Daman - National Health Insurance Company", , "Daman"
End Sub

Sub Find_Missing_Pictures()
Dim fll() As String
Dim flext() As String
Dim fndfls() As String
Dim mrn() As String
Dim fndmrn() As String
Dim rowcnt As Long

Dim shtcnt
Dim newsheet
    Dim fs, f, s, fn, opf, fls, sf, ff, z, totfls
    Dim savefilename
    Dim flen As Integer
    Dim fldrnm As String
    Dim flcnt, i, j As Long
    Dim farr() As String
    Dim nm


'************
nm = InputBox("Enter No: of members", "Number of members", getMemberCount)
If nm = "" Then Exit Sub
If val(nm) <= 0 Then MsgBox "Invalid Value": Exit Sub


savefilename = Application.GetOpenFilename("All Files (*.*), *.*")
If savefilename = False Then Exit Sub
'wrd = InputBox("Enter ....")
'If wrd = "" Then MsgBox "Invalid data": Exit Sub
Set fs = CreateObject("Scripting.FileSystemObject")

Set fn = fs.getfile(savefilename)
    flen = Len(fn.name) + 1
    fldrnm = Mid(savefilename, 1, Len(savefilename) - flen)
'************
    Set opf = fs.getfolder(fldrnm)
    Set fls = opf.Files
    flcnt = fls.Count
    rowcnt = nm
    
   ReDim fll(flcnt - 1)
   ReDim flext(flcnt - 1)
   ReDim fndfls(flcnt - 1)
   ReDim mrn(nm - 1)
   ReDim fndmrn(nm - 1)
   
   For i = 0 To flcnt - 1
    fndfls(i) = "False"
   Next i
   For i = 0 To nm - 1
    fndmrn(i) = "False"
   Next i
   
    Set sf = opf.SubFolders
    Set ff = opf.Files
    i = 0

i = 0
    
    For Each z In ff
        i = i + 1
        totfls = totfls + 1
        fll(i - 1) = fs.getbasename(z.name)
        flext(i - 1) = "." & fs.getextensionname(z.name)
        'Sheets("Missing Pictures").Cells(i + 1, 1) = z.Name
    Next
Dim memExtRefCol As String
Dim rowStartPos As Integer
If GetCurrentSheetFormat = CUSTOMER Then memExtRefCol = "a": rowStartPos = 2 Else memExtRefCol = "b": rowStartPos = 1


For i = rowStartPos To nm + rowStartPos - 1
        mrn(i - rowStartPos) = Cells(i + 1, memExtRefCol)
        For j = 0 To flcnt - 1
            If Cells(i + 1, memExtRefCol) = fll(j) Then
                fndfls(j) = "True"
                fndmrn(i - rowStartPos) = "True"
                If Cells(i + 1, memExtRefCol).Interior.ColorIndex = 36 Then Cells(i + 1, memExtRefCol).Interior.ColorIndex = xlColorIndexNone
                Exit For
            End If
        Next j
        'If j > flcnt - 1 Then Cells(i + 1, 2).Interior.ColorIndex = 36
Next i


shtcnt = Sheets.Count
ActiveWorkbook.Unprotect password:="D@m@nIT"
For i = 1 To Sheets.Count
    If Sheets(i).name = "Missing Pictures" Then
        Application.DisplayAlerts = False
        Sheets(i).Delete
        Application.DisplayAlerts = True
        Exit For
    End If
Next i
shtcnt = Sheets.Count


Sheets.Add after:=Sheets(shtcnt)
Sheets(shtcnt + 1).name = "Missing Pictures"
Sheets("Missing Pictures").Cells(1, 1) = "File Names"
Sheets("Missing Pictures").Cells(1, 2) = "Member Ref. Nos"
Sheets("Missing Pictures").Cells(1, 3) = "Files Matched"
Sheets("Missing Pictures").Cells(1, 4) = "Mem Ref Nos Matched"
Sheets("Missing Pictures").Cells(1, 6) = "Mem Ref Nos Not Matched"
Sheets("Missing Pictures").Cells(1, 5) = "Files Not Matched"
Sheets("Missing Pictures").Cells(1, 1).Interior.ColorIndex = 15
Sheets("Missing Pictures").Cells(1, 2).Interior.ColorIndex = 15
Sheets("Missing Pictures").Cells(1, 3).Interior.ColorIndex = 15
Sheets("Missing Pictures").Cells(1, 4).Interior.ColorIndex = 15
Sheets("Missing Pictures").Cells(1, 5).Interior.ColorIndex = 15
Sheets("Missing Pictures").Cells(1, 6).Interior.ColorIndex = 15

For i = 0 To flcnt - 1
      Sheets("Missing Pictures").Cells(i + 2, 1) = fll(i) & flext(i)
Next i
For i = 0 To rowcnt - 1
      Sheets("Missing Pictures").Cells(i + 2, 2) = mrn(i)
Next i

j = 2
For i = 0 To flcnt - 1
    If fndfls(i) = "True" Then Sheets("Missing Pictures").Cells(j, 3) = fll(i) & flext(i): j = j + 1
Next i


j = 2
For i = 0 To rowcnt - 1
    If fndmrn(i) = "True" Then Sheets("Missing Pictures").Cells(j, 4) = mrn(i): j = j + 1
Next i

j = 2
For i = 0 To flcnt - 1
    If fndfls(i) = "False" Then Sheets("Missing Pictures").Cells(j, 5) = fll(i) & flext(i): j = j + 1
Next i


j = 2
For i = 0 To rowcnt - 1
    If fndmrn(i) = "False" Then Sheets("Missing Pictures").Cells(j, 6) = mrn(i): j = j + 1
Next i

Cells(1, 1).Font.Bold = True
Cells(1, 2).Font.Bold = True
Cells(1, 3).Font.Bold = True
Cells(1, 4).Font.Bold = True
Cells(1, 5).Font.Bold = True
Cells(1, 6).Font.Bold = True

If flcnt > nm Then
    Range("A1:F" & flcnt + 1).Columns.AutoFit
Else
    Range("A1:F" & nm + 1).Columns.AutoFit
End If


    ActiveWorkbook.Protect Structure:=True, Windows:=False, password:="D@m@nIT"

End Sub

Private Function DateCheck(ByVal dtStr As String, Optional FutDate As Boolean = False) As Boolean
Dim isValidDate As Boolean
If IsDate(dtStr) Then
        Dim dt() As Integer
        Dim txt As String
        Dim cnt, a As Integer
        
        txt = Trim(dtStr)
    
        cnt = 0
        Do While (1)
            a = InStr(1, txt, "/")
            If a > 0 Then
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(Mid(txt, 1, a - 1))
                txt = Mid(txt, a + 1, Len(txt))
            Else
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(txt)
                Exit Do
            End If
        Loop
        
        If cnt = 3 Then
            If dt(0) = 0 Or dt(0) > 31 Then
                isValidDate = False
            ElseIf dt(1) = 0 Or dt(1) > 12 Then
                isValidDate = False
            ElseIf dt(2) < 1850 Or Len(Trim(str(dt(2)))) <> 4 Or (FutDate = False And dt(2) > Year(Date)) Then
                isValidDate = False
            Else
                Dim dtDate As Date
                dtDate = dtStr
                If DateDiff("d", Now, dtDate) > 0 And FutDate = False Then
                    isValidDate = False
                Else
                    isValidDate = True
                End If
            End If
        Else
            isValidDate = False
        End If
Else
    isValidDate = False
End If
DateCheck = isValidDate
End Function



Attribute VB_Name = "Module2"
Private Const mcGWL_STYLE = (-16)
Private Const mcWS_SYSMENU = &H80000

'Windows API calls to handle windows
#If VBA7 Then
    'Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#Else
    'Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
#End If

#If VBA7 Then
    'Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
#Else
    'Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
#End If

#If VBA7 Then
    'Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#Else
    'Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
#End If



'Private Declare PtrSafe Function DrawMenuBar Lib "User32" (ByVal hwnd As Long) As Long


Public Sub subRemoveCloseButton(frm As Object)
    Dim lngStyle As Long
    Dim lngHWnd As Long

    lngHWnd = FindWindow(vbNullString, frm.Caption)
    lngStyle = GetWindowLong(lngHWnd, mcGWL_STYLE)

    If lngStyle And mcWS_SYSMENU > 0 Then
        SetWindowLong lngHWnd, mcGWL_STYLE, (lngStyle And Not mcWS_SYSMENU)
    End If

End Sub

Sub RemoveTitleBar(frm As Object)
    Dim lStyle          As Long
    Dim hMenu           As Long
    Dim mhWndForm       As Long
     
    If val(Application.Version) < 9 Then
        mhWndForm = FindWindow("ThunderXFrame", frm.Caption) 'for Office 97 version
    Else
        mhWndForm = FindWindow("ThunderDFrame", frm.Caption) 'for office 2000 or above
    End If
    lStyle = GetWindowLong(mhWndForm, -16)
    lStyle = lStyle And Not &HC00000
    SetWindowLong mhWndForm, -16, lStyle
    DrawMenuBar mhWndForm
End Sub
Attribute VB_Name = "ProdModule"
Option Explicit
Public Const AppName = "Prod Macro 2015"
Sub ConvertDCTMtoProd()
If GetCurrentSheetFormat <> DCTM Then MsgBox "This functionality is available only in DCTM format", vbInformation, msgTitle: Exit Sub
If Not checkPermission Then Exit Sub
Dim currentSheetFormat As SheetFormat
currentSheetFormat = GetCurrentSheetFormat


Dim ans As VbMsgBoxResult
Application.EnableEvents = False
Application.ScreenUpdating = False
Call protectSheet(shtMemmber, "itdaman", False)
    
    ans = MsgBox("Currently sheet is in DCTM format" & vbNewLine & "do you want to convert into Production format?", vbYesNo)
    If ans = vbYes Then
        'frmCatPlanMapping.Convert = True
        'frmCatPlanMapping.Show
        Call AdjustPlanColumns(getCurrentSheetPlanType, DCTM, PRODUCTION)
    Else
        GoTo xxx
    End If

'resetValidation
showHideCommandBars
MsgBox "Conversion has been completed", vbInformation, msgTitle
xxx:
Call protectSheet(shtMemmber, "itdaman", True)
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub

Sub Unhide_Columns()
    If ActiveSheet.ProtectContents Then MsgBox "Sheet is protected !. Unprotect the sheet and try again...", vbInformation, AppName: Exit Sub
    Columns.Hidden = False
    Rows.Hidden = False
End Sub

Public Function AdjustSpace(customFieldCode As String) As String
    AdjustSpace = customFieldCode & Space((6 - Len(customFieldCode)))
End Function

Sub Update_Ext_Prnc_Ref_No()
If UCase(Trim(Cells(1, 4).Value)) <> "MIDDLE NAME" Or UCase(Trim(Cells(1, 40).Value)) <> "CITY" Then MsgBox "Wrong File Format", vbCritical, AppName: Exit Sub
Dim i As Long
Dim c, fads
Dim nm As String
nm = InputBox("Enter No: of members", "Number of members")
If nm = "" Then Exit Sub
If val(nm) <= 0 Then MsgBox "Invalid Value", , AppName: Exit Sub

For i = 2 To nm + 1
    Set c = Nothing
    If UCase(Trim(Cells(i, 12))) = "PRINCIPAL" Or UCase(Trim(Cells(i, 12))) = 1 Then
    
        Cells(i, 14).Value = Cells(i, 2).Value
    
        With Range("O2:O" & nm + 1)
            Set c = .Find(Cells(i, 15).Value, LookIn:=xlValues, lookat:=xlWhole)
             If Not c Is Nothing Then fads = c.Address
                 
            Do While 1
            If Not c Is Nothing Then
                If c.Row <> i And (UCase(Trim(Cells(c.Row, 12))) <> "PRINCIPAL" And UCase(Trim(Selection.Cells(c.Row, 12))) <> 1) Then
                    Cells(c.Row, 14) = Cells(i, 2)
                Else
                        If c.Row <> i And (UCase(Trim(Cells(c.Row, 12))) = "PRINCIPAL" Or UCase(Trim(Selection.Cells(c.Row, 12))) = 1) Then Cells(c.Row, 15).Interior.ColorIndex = 40
                End If
            End If
            Set c = .FindNext(c)
            If c.Address = fads Then Exit Do
            Loop
        End With
    End If
Next
End Sub

Sub Clear_formulas()
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("A2").Select
    Cells.Validation.Delete
    Application.CutCopyMode = False
End Sub

Sub Rmv_Needless_Chr()
Dim p, j, i As Long
Dim Strr As String
For p = 1 To Selection.Columns.Count
For j = 1 To Selection.Rows.Count
Strr = ""
For i = 1 To Len(Selection.Cells(j, p))

If Asc(Mid(Selection.Cells(j, p), i, 1)) <> 160 Then
Strr = Strr & Mid(Selection.Cells(j, p), i, 1)
Else

End If

Next
Selection.Cells(j, p) = Strr
Next
Next
End Sub

Sub Rename_Pic_Files()
    Dim fs, f, s, fn, opf, sf, ff, fl
    Dim savefilename
    Dim flen As Integer
    Dim fldrnm, wrd As String
    Dim flcnt As Long
    Dim farr() As String
    Dim i As Long
'************

savefilename = Application.GetOpenFilename("All Files (*.*), *.*")
If savefilename = False Then Exit Sub
wrd = InputBox("Enter Prefix")
If wrd = "" Then MsgBox "Invalid data", , AppName: Exit Sub
Set fs = CreateObject("Scripting.FileSystemObject")


Set fn = fs.getfile(savefilename)
    flen = Len(fn.name) + 1
    fldrnm = Mid(savefilename, 1, Len(savefilename) - flen)
'************
    Set opf = fs.getfolder(fldrnm)
    Set sf = opf.SubFolders
    Set ff = opf.Files
    flcnt = ff.Count
    i = 0
    Dim flarr() As String
    For Each fl In ff
         i = i + 1
         ReDim Preserve flarr(i)
         flarr(i) = fl.name
    Next
  
    
    For i = 1 To UBound(flarr)
        Set fn = fs.getfile(fldrnm & "\" & flarr(i))
        fn.name = wrd & fn.name
    Next i
MsgBox i & " files renamed successfully", vbInformation, AppName

End Sub


Sub Rename_Mmbr_Ref_No()
    Dim tmp, wrd As String
    Dim ttr As Long
    Dim ffr, tto, cp, i As Integer
    
If UCase(Trim(Cells(1, 4).Value)) <> "MIDDLE NAME" Or UCase(Trim(Cells(1, 40).Value)) <> "CITY" Then MsgBox "Wrong File Format", vbCritical, AppName: Exit Sub

Dim nm As String
nm = InputBox("Enter No: of members", "Number of members")
If nm = "" Then Exit Sub
cp = InStr(1, nm, ",")
If cp > 0 Then
    ffr = val(Mid(nm, 1, cp - 1))
    tto = val(Mid(nm, cp + 1, Len(nm) - cp))
    If ffr = 0 Then ffr = 2
    If tto = 0 Then MsgBox "Invalid Value ", , AppName: Exit Sub
Else
    If val(nm) <= 0 Then MsgBox "Invalid Value", , AppName: Exit Sub
    ffr = 2
    tto = nm + 1
End If

    wrd = InputBox("Enter the Prefix ", "Production Dept.")
    If wrd = "" Then MsgBox "Invalid data", , AppName: Exit Sub

ttr = Selection.Rows.Count + 1


For i = ffr To tto
tmp = Cells(i, 2).Text

Dim c, fads
With Range("N" & ffr & ":N" & tto)
    Set c = .Find(Cells(i, 2).Value, LookIn:=xlValues, lookat:=xlWhole)
    If Not c Is Nothing Then
        fads = c.Address
    
    Do While 1
    If Not c Is Nothing Then
        Cells(c.Row, 14).NumberFormat = "@"
       Cells(c.Row, 14).Value = wrd & Cells(c.Row, 14).Text
    Else
        Exit Do
    End If
    
    Set c = .FindNext(c)
    If c Is Nothing Then Exit Do
    If c.Address = fads Then Exit Do
    Loop
    
    End If
End With

Cells(i, 2).NumberFormat = "@"
Cells(i, 2).Value = wrd & tmp

Next
End Sub


Sub ProdErrorCheck()
frmProdErrCheck.Show
End Sub


Sub ConvertToOrFromProd()

Dim currentSheetFormat As SheetFormat
currentSheetFormat = GetCurrentSheetFormat

If currentSheetFormat = CUSTOMER Then MsgBox "This functionality is available on for DCTM or PRODUCTION format", vbInformation, msgTitle

'If currentSheetFormat = CUSTOMER Then If getMemberCount > Application.WorksheetFunction.CountIf(shtMemmber.Range("AK:Ak"), "Y") Then MsgBox "Validation is not done completly for all members" & vbNewLine & "Please run error check on all members", vbExclamation, MsgTitle: Exit Sub

'If Not checkPermission Then Exit Sub
Dim ans As VbMsgBoxResult
Application.EnableEvents = False
Application.ScreenUpdating = False
Call protectSheet(shtMemmber, "itdaman", False)
If currentSheetFormat = DCTM Then
'FindRowPosByVal("N", shtMemmber.Range("AK:Ak")) > 0

    ans = MsgBox("Currently sheet is in DCTM format" & vbNewLine & "do you want to convert into Production format?", vbYesNo)
    If ans = vbYes Then
        'frmCatPlanMapping.Convert = True
        'frmCatPlanMapping.Show
        Call AdjustPlanColumns(getCurrentSheetPlanType, DCTM, PRODUCTION)
    Else
        GoTo xxx
    End If
Else
    ans = MsgBox("Currently sheet is in Production format" & vbNewLine & "do you want to convert into DCTM format?", vbYesNo)
    If ans = vbYes Then
        Call AdjustPlanColumns(getCurrentSheetPlanType, PRODUCTION, DCTM)
    Else
        GoTo xxx
    End If
End If
'resetValidation
showHideCommandBars
MsgBox "Conversion has been completed", vbInformation, msgTitle
xxx:
Call protectSheet(shtMemmber, "itdaman", True)
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub VerifySheetModification(Target As Range)
    Dim firstChangedRow, lastChangedRow, currentRow As Long, sheetRange As Range, colMacroRunSuccessfully As String, currSheetFormat As SheetFormat
     
    currSheetFormat = GetCurrentSheetFormat
    
    If currSheetFormat = CUSTOMER Then
        Set sheetRange = shtMemmber.Range("A3:AJ65536")
        colMacroRunSuccessfully = COL_ISVALID
    ElseIf (currSheetFormat = PRODUCTION) Then
        Set sheetRange = shtMemmber.Range("B1:AW65536")
        colMacroRunSuccessfully = "AX"
'    ElseIf currSheetFormat = DCTM Then
'        sheetRange = "B2:BP65536"
'        colMacroRunSuccessfully = "AX"
    End If
    If sheetRange Is Nothing Then Exit Sub
    If (Not Intersect(Target, sheetRange) Is Nothing) Or Not Intersect(Target, Range("BA2:BP65536")) Is Nothing Then
        Set changedCells = Target
        firstChangedRow = changedCells.Row
        lastChangedRow = firstChangedRow + changedCells.Rows.Count - 1
        currentRow = firstChangedRow
        
        protectSheet shtMemmber, "itdaman", False
        
        For i = 1 To changedCells.Rows.Count
            'MsgBox currentRow
            Application.EnableEvents = False
            Cells(currentRow, colMacroRunSuccessfully).Value = "N"
            'Turn events back on
            Application.EnableEvents = True
            currentRow = currentRow + 1
        Next i
        
        protectSheet shtMemmber, "itdaman", True
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If GetCurrentSheetFormat <> PRODUCTION Then Call VerifySheetModification(Target)
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

Dim sht As Worksheet
Dim headRowsCnt As Integer
Dim colEffDate As String
Set sht = Sheets("AD Census")

headRowsCnt = IIf(GetCurrentSheetFormat = CUSTOMER, 2, 1)
colEffDate = Switch(GetCurrentSheetFormat = CUSTOMER, COL_POLICYEFFECTIVEDATE, GetCurrentSheetFormat = DCTM, COL_POLICYEFFECTIVEDATE_DCTM, GetCurrentSheetFormat = PRODUCTION, COL_POLICYEFFECTIVEDATE_PROD)

If sht.Range(ADC_Cell_MemCount) = "" Then
sht.Range(ADC_Cell_MemCount) = shtMemmber.Range("G65536").End(xlUp).Row - headRowsCnt
End If
If sht.Range(ADC_Cell_EffDate) = "" Then
sht.Range(ADC_Cell_EffDate) = shtMemmber.Cells((shtMemmber.Range("G65536").End(xlUp).Row), colEffDate).Text
End If

End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Workbook_BeforeClose(Cancel As Boolean)
On Error Resume Next
findCommandbarByName("Daman").Delete

On Error Resume Next
findCommandbarByName("DamanProdMacro2015").Delete

Application.Caption = ""
MsgBox "Thank you for choosing Daman", , "Daman"
End Sub

Private Sub Workbook_Open()

Dim crntShtPlan As PlanType
crntShtPlan = getCurrentSheetPlanType
If crntShtPlan = 0 And GetCurrentSheetFormat <> CUSTOMER Then MsgBox "Something went wrong!" & vbNewLine & "Sheet is corrupted. Please contact Daman", vbCritical, msgTitle: ActiveWorkbook.Close savechanges:=False: Exit Sub:

    'PMG1236 - NO NEED TO SHOW WELCOME DIALOG IF USER HAS ALREADY SELECTED A PLAN
    
    If crntShtPlan = 0 Then
        SheetTypeSelection
    Else
        frmSplash.Show
    End If

    showHideCommandBars
    
    setAppTitle

    Application.OnKey "{F9}", "lstofvls"

End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{F113EE1A-07B8-4963-A1FC-0EAF01C5E378}{5D84380E-0065-48BC-B97A-5B907F0BE72F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Dim ntnlts As Variant
Dim txtchng As String

Private Sub ComboBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then CommandButton1_Click
If KeyCode = 40 Or KeyCode = 38 Then ComboBox1.DropDown
If KeyCode = 27 Then Unload UserForm2
End Sub

Private Sub CommandButton1_Click()
'For i = 0 To ComboBox1.ListCount - 1
'    If Trim(UCase(TextBox1.Text)) = ComboBox1.List(i) Then Exit For
'Next i
'If i > ComboBox1.ListCount - 1 Then
'   MsgBox "Invalid selection": TextBox1.SetFocus
'Else
'    Cells(ActiveCell.Row, 33) = UCase(Trim(TextBox1.Text))
'    Unload UserForm2
'End If
'
For i = 0 To ComboBox1.ListCount - 1
    If Trim(UCase(ComboBox1.Text)) = UCase(ComboBox1.List(i)) Then Exit For
Next i
If i > ComboBox1.ListCount - 1 Then
    MsgBox "Invalid selection": ComboBox1.SetFocus
Else
    'Cells(ActiveCell.Row, 33) = Trim(UCase(ComboBox1.Text))
    Selection.Cells(1, 1) = Trim(UCase(ComboBox1.Text))
    Unload UserForm2
End If


End Sub




Private Sub ListBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then
    CommandButton1_Click

End If

End Sub

Private Sub TextBox1_Change()
If txtchng = "no" Then Exit Sub
ListBox1.Clear
For i = 0 To ComboBox1.ListCount - 1
    If Mid(ComboBox1.List(i), 1, Len(Trim(TextBox1.Text))) = UCase(Trim(TextBox1.Text)) Then
        ListBox1.AddItem ComboBox1.List(i)
    End If
Next i
End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then
    CommandButton1_Click
End If
If KeyCode = 40 Then
    If ListBox1.ListCount > 0 And ListBox1.ListIndex < ListBox1.ListCount - 1 Then
        ListBox1.ListIndex = ListBox1.ListIndex + 1
        If ListBox1.ListIndex < 0 Then ListBox1.ListIndex = 0
        txt = ListBox1.List(ListBox1.ListIndex)
        txtchng = "no"
        TextBox1.Text = txt
        txtchng = "yes"
        
    End If
    TextBox1.SetFocus
End If

If KeyCode = 38 Then
    If ListBox1.ListCount > 0 And ListBox1.ListIndex > 0 Then
        ListBox1.ListIndex = ListBox1.ListIndex - 1
        txt = ListBox1.List(ListBox1.ListIndex)
        TextBox1.Text = ""
        txtchng = "no"
        TextBox1.Text = txt
        txtchng = "yes"
        
    End If
    TextBox1.SetFocus
End If
End Sub

Private Sub UserForm_Activate()
'TextBox1.SetFocus
ComboBox1.DropDown
ComboBox1.SetFocus
End Sub

Private Sub UserForm_Initialize()
Dim i As Integer
Dim rng As Range
Set rng = Range("Planslist")
For i = 1 To rng.Rows.Count
ComboBox1.AddItem rng.Cells(i, 1).Text
Next
TextBox1_Change

End Sub
'++++++++++++++++++++
  
Private Sub listbox1_Click()
txtchng = "no"
TextBox1.Text = ListBox1.List(ListBox1.ListIndex)
txtchng = "yes"
TextBox1.SetFocus

End Sub

Private Sub UserForm_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 27 Then
    Unload UserForm2
End If
End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{1D47CDD7-9E4A-470B-BDA3-5B3B501EB278}{A50CADD5-7DF1-4076-8DFB-7E6EA50F3040}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Dim ntnlts As Variant
Dim txtchng As String

Private Sub ComboBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then CommandButton1_Click
If KeyCode = 40 Or KeyCode = 38 Then ComboBox1.DropDown
If KeyCode = 27 Then Unload UserForm3
End Sub

Private Sub CommandButton1_Click()
'For i = 0 To ComboBox1.ListCount - 1
'    If Trim(UCase(TextBox1.Text)) = ComboBox1.List(i) Then Exit For
'Next i
'If i > ComboBox1.ListCount - 1 Then
'   MsgBox "Invalid selection": TextBox1.SetFocus
'Else
'    Cells(ActiveCell.Row, 33) = UCase(Trim(TextBox1.Text))
'    Unload UserForm3
'End If
'
For i = 0 To ComboBox1.ListCount - 1
    If UCase(Trim(ComboBox1.Text)) = UCase(ComboBox1.List(i)) Then Exit For
Next i
If i > ComboBox1.ListCount - 1 Then
    MsgBox "Invalid selection": ComboBox1.SetFocus
Else
    'Cells(ActiveCell.Row, 33) = Trim(UCase(ComboBox1.Text))
    Selection.Cells(1, 1) = ComboBox1.List(i)
    Unload UserForm3
End If


End Sub




Private Sub ListBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then
    CommandButton1_Click

End If

End Sub

Private Sub TextBox1_Change()
If txtchng = "no" Then Exit Sub
ListBox1.Clear
For i = 0 To ComboBox1.ListCount - 1
    If Mid(ComboBox1.List(i), 1, Len(Trim(TextBox1.Text))) = UCase(Trim(TextBox1.Text)) Then
        ListBox1.AddItem ComboBox1.List(i)
    End If
Next i
End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 13 Then
    CommandButton1_Click
End If
If KeyCode = 40 Then
    If ListBox1.ListCount > 0 And ListBox1.ListIndex < ListBox1.ListCount - 1 Then
        ListBox1.ListIndex = ListBox1.ListIndex + 1
        If ListBox1.ListIndex < 0 Then ListBox1.ListIndex = 0
        txt = ListBox1.List(ListBox1.ListIndex)
        txtchng = "no"
        TextBox1.Text = txt
        txtchng = "yes"
        
    End If
    TextBox1.SetFocus
End If

If KeyCode = 38 Then
    If ListBox1.ListCount > 0 And ListBox1.ListIndex > 0 Then
        ListBox1.ListIndex = ListBox1.ListIndex - 1
        txt = ListBox1.List(ListBox1.ListIndex)
        TextBox1.Text = ""
        txtchng = "no"
        TextBox1.Text = txt
        txtchng = "yes"
        
    End If
    TextBox1.SetFocus
End If
End Sub

Private Sub UserForm_Activate()
'TextBox1.SetFocus
ComboBox1.DropDown
ComboBox1.SetFocus
End Sub

Private Sub UserForm_Initialize()
Dim i As Integer
Dim rng As Range
Set rng = Range("CountryList")
For i = 1 To rng.Rows.Count
ComboBox1.AddItem rng.Cells(i, 1).Text
Next

TextBox1_Change

End Sub
'++++++++++++++++++++
  
Private Sub listbox1_Click()
txtchng = "no"
TextBox1.Text = ListBox1.List(ListBox1.ListIndex)
txtchng = "yes"
TextBox1.SetFocus

End Sub

Private Sub UserForm_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
If KeyCode = 27 Then
    Unload UserForm3
End If
End Sub
Attribute VB_Name = "frmCatPlanMapping"
Attribute VB_Base = "0{6CBE106B-CD73-43EB-92CA-07206BFFC5BD}{D14A6B41-8F8E-468F-8422-8B815E44D0DA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim CntTxtPlanCategory As Integer
Public Convert As Boolean

Sub AddNewPlanCategory()
Dim txtPlanCat As Control
CntTxtPlanCategory = CntTxtPlanCategory + 1

Set txtPlanCat = pnlPlanCategories.Controls.Add("Forms.TextBox.1", txtPlanCategory, True)
With txtPlanCat
        .name = "txtPlanCategory" & CntTxtPlanCategory
        .Width = 150
        .Height = 20
        .Top = CntTxtPlanCategory * 25
        .Left = 10
        .Text = Range("plancategories").Cells(CntTxtPlanCategory, 1).Text
    End With
    txtPlanCat.SetFocus
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30
End Sub

Private Sub btnAddPlanCategory_Click()
AddNewPlanCategory
End Sub

Private Sub btnRemovePlanCategory_Click()
If CntTxtPlanCategory > 1 Then
    pnlPlanCategories.Controls.Remove "txtPlanCategory" & CntTxtPlanCategory
    CntTxtPlanCategory = CntTxtPlanCategory - 1
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30
End If
End Sub

Private Sub btnSavePlanCategory_Click()
Dim i As Integer, planCategoryCounter As Integer
    Dim ctrl As Control
    Dim CntrlCnt, cntPlan As Integer
    CntrlCnt = pnlPlanCategories.Controls.Count
    protectSheet shtListOfValues, "D@m@nIT", False
    Col = Range("PlanCategories").Column
    Range("PlanCategories").Cells.ClearContents
    shtListOfValues.Cells(1, Col) = " "
    For i = 0 To CntrlCnt - 1
        Set ctrl = pnlPlanCategories.Controls(i)
        If TypeName(ctrl) = "TextBox" Then
            If ctrl.Value <> "" Then
                cntPlan = cntPlan + 1
                ' KEEPING A COUNT OF TEXTBOXES WITH VALUES. SAME WILL BE USED TO INSERT VALUES IN HIDDEN SHEET IN SEQUENCE
                ' CANNOT USE LOOP COUNTER (i-e i) AS IT WILL BE INCREASING ON LABELS AND COMBXBOES
                'STORE SELECTED PLAN IN HIDDEN SHEET
                shtListOfValues.Cells(cntPlan, Range("PlanCategories").Column) = ctrl.Value
                Dim cmbPlanName As String
                cmbPlanName = "cmbPackageDesc_" & Mid(ctrl.name, InStr(1, ctrl.name, "_", vbTextCompare) + 1, Len(ctrl.name) - InStr(1, ctrl.name, "_", vbTextCompare))
                shtListOfValues.Cells(cntPlan, Range("PlanCategories").Column + 1) = pnlPlanCategories.Controls(cmbPlanName).Value
            End If
        End If
    Next i
    protectSheet shtListOfValues, "D@m@nIT", True
    Call protectSheet(shtMemmber, "itdaman", False)
    If Convert Then
        If GetCurrentSheetFormat = CUSTOMER Then
            '''Call ConvertFormat(CUSTOMER, DCTM)
            AdjustPlanColumns getCurrentSheetPlanType, CUSTOMER, DCTM
            populatePlansBasedOnCat
        Else
            '''Call ConvertFormat(DCTM, CUSTOMER)
            AdjustPlanColumns getCurrentSheetPlanType, DCTM, CUSTOMER
        End If
    Else
        populatePlansBasedOnCat
        MsgBox "Category Plan mapping has succeffully been updated", vbInformation
    End If
    'Range("A1:BP1").Columns.AutoFit
    Call protectSheet(shtMemmber, "itdaman", True)
    Unload Me
    'Load_PlanCat_controls
End Sub

Function GetCorrectPlan(currentSheetPlanType As PlanType, selectedPackage As String, relation As String, maritalStatus As String, gender As String, age As Integer) As String
Dim planId As String
Dim rngPlans, listOfPlans, rngPlanId, retPlans As Range

Set rngPlans = Range("PlansList")

planId = FindValFromRange(selectedPackage, Range("PlansList"), 2)
Set rngPlanId = rngPlans.offset(columnOffset:=1)

Set retPlans = findAllfromRange(planId, rngPlanId, rngPlanId.Cells(1, 1).Column - 1, rngPlanId.Cells(1, 1).Column + 1)

If retPlans.Rows.Count > 0 Then
If gender = "F" And maritalStatus = "M" And _
    ((currentSheetPlanType <> ADBP And age > EBP_ENH_MATERNITY_PLAN_MIN_AGE_LIMIT) Or _
    (currentSheetPlanType = ADBP And age > ADBP_MATERNITY_PLAN_MIN_AGE_LIMIT)) Then
    For i = 1 To retPlans.Rows.Count
        If InStr(1, retPlans.Rows(i).Cells(1, 3), "m", vbTextCompare) > 0 Then
            GetCorrectPlan = retPlans.Rows(i).Cells(1, 1).Text
            Exit For
        End If
    Next
Else
    For i = 1 To retPlans.Rows.Count
        If InStr(1, retPlans.Rows(i).Cells(1, 3), "n", vbTextCompare) > 0 Then
            GetCorrectPlan = retPlans.Rows(i).Cells(1, 1).Text
            Exit For
        End If
    Next
End If
End If
End Function


Sub populatePlansBasedOnCat()
Dim crntShtPlanType As PlanType
Dim crntShtFormat As SheetFormat
crntShtPlanType = getCurrentSheetPlanType
crntShtFormat = GetCurrentSheetFormat
If crntShtFormat = DCTM Then
    For i = 2 To val(txtMemCount.Text) + 1
        ' G-SEC CHANGES: AD BASIC WILL HAVE TWO SEPARATE PLAN (MATERYNITY & NON MATERNITY)
        If crntShtPlanType = ADBP Then
            ' AS THERE IS ONLY ONE CATEGORY FOR AD BASIC
            ' THEREFORE DIRECTLY SETTING FOR PLAN CATEGORY COLUMN
            ' TODO: LINE/CHECK SHOULD BE REMOVED IF AD BASIC HAS MORE THAN ONE PLANS(EXCLUDING MAT OR NO-MAT)
            shtMemmber.Cells(i, 68) = Range("PlanCategories").Cells(1, 1)
'            shtMemmber.Cells(i, 16) = Range("PlanCategories").Cells(1, 2)
        End If
'        Else
            Dim planMapped As String
            Dim age As Integer
            planMapped = FindValFromRange(shtMemmber.Cells(i, "bp").Text, Range("PlanCategories"), 2)
            age = CalcAge(Cells(i, "g").Text, Cells(i, "j").Text)
            shtMemmber.Cells(i, "p") = GetCorrectPlan(crntShtPlanType, planMapped, shtMemmber.Cells(i, "l").Text, shtMemmber.Cells(i, "q").Text, shtMemmber.Cells(i, "k").Text, age)
'        End If
    Next i
End If
End Sub


Sub clearPlans()
Dim cntrl As Control
For Each cntrl In pnlPlanCategories.Controls
    pnlPlanCategories.Controls.Remove cntrl.name
Next
End Sub


Sub Load_PlanCat_controls()
    
    MemCnt = getMemberCount

    txtMemCount.Text = MemCnt
    Dim pc_cnt As Integer
    pc_cnt = Range("PlanCategories").Count
    Dim txtPlanCat, cmbPackageDesc As Control
    
    For i = 1 To pc_cnt
        Set txtPlanCat = pnlPlanCategories.Controls.Add("Forms.TextBox.1", txtPlanCategory, True)
        With txtPlanCat
                .name = "txtPlanCategory_" & i
                .Width = 150
                .Height = 20
                .Top = i * 25
                .Left = 10
                .Text = Trim(Range("plancategories").Cells(i, 1).Text)
            End With
        
        Set cmbPackageDesc = pnlPlanCategories.Controls.Add("Forms.ComboBox.1", "cmbPlan1", True)
        
        With cmbPackageDesc
            .name = "cmbPackageDesc_" & i
            .Width = 250
            .Height = 20
            .Top = i * 25
            .Left = 160
            .RowSource = Names.item("PlansList")
            .Text = Range("plancategories").Cells(i, 2).Text
        End With
    Next
    
    If getCurrentSheetPlanType <> EP Then pnlPlanCategories.Enabled = False Else pnlPlanCategories.Enabled = True
    
    CntTxtPlanCategory = pc_cnt
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30

End Sub


Private Sub UserForm_Initialize()
Load_PlanCat_controls
End Sub




Attribute VB_Name = "frmDefinePlanCats"
Attribute VB_Base = "0{9523ED20-5E1B-4B30-87D4-6B517AD7F058}{4BD777B8-8FF2-47F7-9BDB-1EA83BFED894}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim CntTxtPlanCategory, CntPrevPlan As Integer
Dim showPrevPlan As Boolean




Sub AddNewPlanCategory()
Dim txtPlanCat As Control
CntTxtPlanCategory = CntTxtPlanCategory + 1

Set txtPlanCat = pnlPlanCategories.Controls.Add("Forms.TextBox.1", txtPlanCategory, True)
With txtPlanCat
        .name = "txtPlanCategory_" & CntTxtPlanCategory
        .Width = 200
        .Height = 20
        .Top = CntTxtPlanCategory * 25
        .Left = 10 + IIf(showPrevPlan, 210, 0)
        .Text = Range("plancategories").Cells(CntTxtPlanCategory, 1).Text
    End With
    txtPlanCat.SetFocus
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30
End Sub

Private Sub btnAddPlanCategory_Click()
AddNewPlanCategory
End Sub

Private Sub btnRemovePlanCategory_Click()
If CntTxtPlanCategory > IIf(showPrevPlan, CntPrevPlan, 1) Then
    pnlPlanCategories.Controls.Remove "txtPlanCategory_" & CntTxtPlanCategory
    CntTxtPlanCategory = CntTxtPlanCategory - 1
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30
End If
End Sub

Private Sub btnSavePlanCategory_Click()
    protectSheet shtListOfValues, "D@m@nIT", False
    
    Dim i As Integer, planCategoryCounter As Integer
    Dim ctrl As Control
    Dim CntrlCnt, cntPlan As Integer
    CntrlCnt = pnlPlanCategories.Controls.Count
    Col = Range("PlanCategories").Column
    Range("PlanCategories").Cells.ClearContents
    shtListOfValues.Cells(1, Col) = " "
    For i = 0 To CntrlCnt - 1
        Set ctrl = pnlPlanCategories.Controls(i)
        If TypeName(ctrl) = "TextBox" And Left(ctrl.name, 7) = "txtPlan" Then
            If ctrl.Value <> "" Then
                cntPlan = cntPlan + 1
                ' KEEPING A COUNT OF TEXTBOXES WITH VALUES. SAME WILL BE USED TO INSERT VALUES IN HIDDEN SHEET IN SEQUENCE
                ' CANNOT USE LOOP COUNTER (i-e i) AS IT WILL BE INCREASING ON LABELS AND COMBXBOES
                'STORE SELECTED PLAN IN HIDDEN SHEET
                shtListOfValues.Cells(cntPlan, Range("PlanCategories").Column) = ctrl.Value
            End If
                If showPrevPlan Then
                    Dim cmbPlanName As String, CtrlIndex As Integer
                    CtrlIndex = Mid(ctrl.name, InStr(1, ctrl.name, "_", vbTextCompare) + 1, Len(ctrl.name) - InStr(1, ctrl.name, "_", vbTextCompare))
                    If CtrlIndex <= CntPrevPlan Then
                        txtPrevPlan = "txtPrevPlanCategory_" & CtrlIndex
                        shtMemmber.Range("m:m").Replace what:=pnlPlanCategories.Controls(txtPrevPlan).Value, Replacement:=ctrl.Value, MatchCase:=True, lookat:=xlWhole
                    End If
                End If
        End If
    Next i
    
    protectSheet shtListOfValues, "D@m@nIT", True
    
    clearPlans
    Unload Me
End Sub


Sub clearPlans()
Dim cntrl As Control
For Each cntrl In pnlPlanCategories.Controls
    pnlPlanCategories.Controls.Remove cntrl.name
Next
End Sub


Sub Load_PlanCat_controls()
    Dim MemCnt As Integer
    MemCnt = getMemberCount
    txtMemCount.Text = MemCnt
    Dim pc_cnt As Integer
    pc_cnt = Range("PlanCategories").Count
    Dim txtPlanCat, txtPrevPlan As Control
    If Trim(Range("PlanCategories").Cells(1, 1).Text) <> "" Then
        showPrevPlan = True
        pnlPlanCategories.Width = 440
        Me.Width = 275 + 190
        btnAddPlanCategory.Left = btnAddPlanCategory.Left + 190
        btnRemovePlanCategory.Left = btnRemovePlanCategory.Left + 190
        btnSavePlanCategory.Left = btnSavePlanCategory.Left + 190
    End If
    For i = 1 To pc_cnt
    Set txtPrevPlan = pnlPlanCategories.Controls.Add("Forms.TextBox.1", txtPrevPlanCategory, True)
    With txtPrevPlan
            .name = "txtPrevPlanCategory_" & i
            .Width = 200
            .Height = 20
            .Top = i * 25
            .Left = 10
            .Text = Trim(Range("plancategories").Cells(i, 1).Text)
            .Enabled = False
    End With
    Set txtPlanCat = pnlPlanCategories.Controls.Add("Forms.TextBox.1", txtPlanCategory, True)
    With txtPlanCat
            .name = "txtPlanCategory_" & i
            .Width = 200
            .Height = 20
            .Top = i * 25
            .Left = 10 + IIf(showPrevPlan, 210, 0)
            .Text = Trim(Range("plancategories").Cells(i, 1).Text)
        End With
    Next
    
    CntTxtPlanCategory = pc_cnt
    CntPrevPlan = pc_cnt
    pnlPlanCategories.ScrollHeight = CntTxtPlanCategory * 30

End Sub

Private Sub UserForm_Initialize()
    Load_PlanCat_controls
End Sub


Attribute VB_Name = "frmErrCheck"
Attribute VB_Base = "0{0F221390-CE07-47AD-BCA2-EEBFA602C7E5}{AA4B8CE8-8726-4653-B7C8-EC7924C644BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private colGrossSalary As String, colCommission As String, colEmirate As String, colResidentialLoc As String, colWorkLoc As String, colPlaceOfVisaIssue As String, ColPassportNo As String, colPreviousInsCoverage As String, colNationalIdType As String, colVisaUnifiedNo As String, colSalaryBand As String, colPlanCategory As String, colAccommodationProvided As String, colDateOfBirth As String, colPolicyEffectiveDate As String, colAge As String, colMacroRunSuccessfully As String, colMemberRefNo As String, colFirstName As String, colMiddleName As String, colLastName As String, colArabicFirstName As String, colArabicMiddleName As String, colArabicLastName As String, colGender As String, colRelation As String, colPrincipalRefNo As String, colStaffNo As String, colMaritalStatus As String, colNationality As String, colCountryofResidency As String, colCity As String, colDepartment As String, colSys1 As String, colSys2 As String, colPlan As String, colNationalId As String, colOccupation As String, _
colHiddenGrossSalary As String, colTelephone1 As String, colEmail As String, colSponsorUIDType As String, colSponsorUID As String

Private Sub cmdClose_Click()
Unload Me
End Sub

Private Sub cmdGo_Click()
    ' SET ADDRESS VARIABLES BEFORE CALLING ERROR CHECK - SAME VARIABLES WILL BE USED FOR BOTH ERROR CHECKS
    'COMMON ADDRESSES
    Application.ScreenUpdating = False
    colDateOfBirth = COL_DATEOFBIRTH
    colNationalId = COL_NATIONALID
    resetValidation
    If chkMat.Visible Then
        'DCTM
        colMemberRefNo = "B"
        colFirstName = "C"
        colMiddleName = "D"
        colLastName = "E"
        colPolicyEffectiveDate = "J"
        colGender = "K"
        colRelation = "L"
        colPrincipalRefNo = "N"
        colStaffNo = "O"
        colPlan = "P"
        colMaritalStatus = "Q"
        colTelephone1 = "U"
        colArabicFirstName = "AC"
        colArabicMiddleName = "AD"
        colArabicLastName = "AE"
        colNationality = "AG"
        colDepartment = "AH"
        colCountryofResidency = "AI"
        colOccupation = "AJ"
        colCity = "AN"
        colMacroRunSuccessfully = "AX"
        colSys1 = "AY"
        colSys2 = "AZ"
        colPreviousInsCoverage = "BA"
        colNationalIdType = "BC"
        colVisaUnifiedNo = "BD"
        colGrossSalary = "BE"
        colCommission = "BF"
        colSalaryBand = "BG"
        ColPassportNo = "BH"
        colEmirate = "BI"
        colResidentialLoc = "BJ"
        colWorkLoc = "BK"
        colHiddenGrossSalary = "BB"
        colPlaceOfVisaIssue = "BM"
        colAccommodationProvided = "BN"
        colAge = "BO"
        colPlanCategory = "BP"
        colEmail = COL_EMAIL_DCTM
        colSponsorUIDType = "CD"
        colSponsorUID = "CE"
        
        Call ErrorCheck_DCTM
    Else
        'CUSTOMER
            
        colMemberRefNo = "A"
        colFirstName = "B"
        colMiddleName = "C"
        colLastName = "D"
        colNationalIdType = "E"
        colPolicyEffectiveDate = "H"
        colGender = "I"
        colRelation = "J"
        colPrincipalRefNo = "K"
        colStaffNo = "L"
        colPlanCategory = "M"
        colMaritalStatus = "N"
        colArabicFirstName = "O"
        colArabicMiddleName = "P"
        colArabicLastName = "Q"
        colNationality = "S"
        colDepartment = "T"
        colCountryofResidency = "U"
        colOccupation = "V"
        colCity = "W"
        colPreviousInsCoverage = "Y"
        colPlaceOfVisaIssue = "Z"
        colVisaUnifiedNo = "AA"
        colGrossSalary = "AB"
        colAccommodationProvided = "AC"
        colCommission = "AD"
        ColPassportNo = "AE"
        colEmirate = "AF"
        colResidentialLoc = "AG"
        colWorkLoc = "AH"
        colTelephone1 = "AJ"
        colMacroRunSuccessfully = "AN"
        colSys1 = "BK"
        colPlan = "BO"
        colSys2 = "BP"
        colHiddenGrossSalary = "BL"
        colAge = "BM"
        colSalaryBand = "AK"
        colEmail = COL_EMAIL
        colSponsorUIDType = "AL"
        colSponsorUID = "AM"
        
        Call ErrorCheck_Customer
    End If
    Application.ScreenUpdating = True
End Sub

Private Sub ErrorCheck_DCTM()
    Dim skipPlanChk As Boolean, sheetMemberDetails As Variant, rng As Range
    skipPlanChk = False ' ASSYST# 153533
    
    If UCase(Trim(Cells(1, colMiddleName).Value)) <> "MIDDLE NAME" Or UCase(Trim(Cells(1, colPlan).Value)) <> "PLAN" Then MsgBox "Wrong File Format", vbCritical: Exit Sub
    
    Dim i As Long, MemCnt, prevErrCnt, errCnt As Long, wrnCnt As Long
    Dim nm, c, D, fads
    Dim ans As String
    Dim femMat As Boolean
    Dim mat As String
    Dim MatPos, cp As Integer
    
    Dim StaffNoCorrection, StaffNoAutoFill, DeptAutoCorrection, PlanCorrection As Boolean
    StaffNoCorrection = chkSNAC.Value
    StaffNoAutoFill = chkSNAF.Value
    DeptAutoCorrection = chkDeptAC.Value
    PlanCorrection = chkPLNAC.Value
    
    Dim ErrStr As String
    nm = txtNoOfMembers.Text
    MemCnt = val(nm)
    If MemCnt <= 0 Then ErrStr = ErrStr + "Invalid Member Count entered"
    
    'pEffDate = txtEffDate.Text
'    If pEffDate = "" Or Not DateCheck(pEffDate, True) Then
'        If ErrStr <> "" Then ErrStr = ErrStr + vbNewLine
'      ErrStr = ErrStr + "Invalid policy effective date enetered"
'    End If
    
    If ErrStr <> "" Then MsgBox "Please correct the following errors" + vbNewLine + ErrStr, vbCritical: Exit Sub
    
    'Range("J2:J" & (MemCnt + 1)).Cells = pEffDate
    
    femMat = chkMat.Value
    
    Set sheetMemberDetails = Sheets("Member Details")
    
    ActiveSheet.Unprotect ("itdaman")
    Application.EnableEvents = False
    '**************************Clearing the "Macros passed successfully" column. modified by Khallil***********
    sheetMemberDetails.Range(colMacroRunSuccessfully & ":" & colMacroRunSuccessfully).Clear
    Range(colSys1 & "1:" & colSys2 & (MemCnt + 1)).Clear    ' 2 BLANK CELLS
    sheetMemberDetails.Cells(1, colSys1) = shtListOfValues.ListObjects("tblDCTMColumnConfig").DataBodyRange(51, 1)
    sheetMemberDetails.Cells(1, colSys2) = shtListOfValues.ListObjects("tblDCTMColumnConfig").DataBodyRange(52, 1)
    
    sheetMemberDetails.Cells(1, colMacroRunSuccessfully) = shtListOfValues.ListObjects("tblDCTMColumnConfig").DataBodyRange(50, 1)
    
    'SET COLOR CODING OF MACRO RUN SUCCESSFULLY, SYS1 AND SYS2
    Dim strTempRange As String: strTempRange = colMacroRunSuccessfully & "1:" & colSys2 & "1"
    
    sheetMemberDetails.Range(strTempRange).Font.Color = Cells(1, "AJ").Font.Color
    sheetMemberDetails.Range(strTempRange).Interior.ColorIndex = Cells(1, "AJ").Interior.ColorIndex
    sheetMemberDetails.Range(strTempRange).Font.name = Cells(1, "AJ").Font.name
    sheetMemberDetails.Range(strTempRange).VerticalAlignment = xlCenter

    If ActiveSheet.AutoFilterMode = True Then Selection.AutoFilter
    Range("A2:BP65536").ClearComments
    Range("A2:BP65536").Interior.ColorIndex = xlColorIndexNone
    
    Range("CD2:CE65536").ClearComments
    Range("CD2:CE65536").Interior.ColorIndex = xlColorIndexNone
    ''Range("BA3:BD65536").ClearComments
    ''Range("BA3:BD65536").Interior.ColorIndex = xlColorIndexNone
    
    Dim StaffNo As Integer
    Dim PrincipalRefHolder() As String
    ReDim Preserve PrincipalRefHolder(0)    'CREATING DYNAMIC ARRAY WITH 1 ITEM
    
    If StaffNoAutoFill Then StaffNoCorrection = True
    
    Application.EnableEvents = False
    For i = 2 To MemCnt + 1
    
    
    '************************** empty/invalid member reference number, first name, last name
    If Len(Trim(Cells(i, colMemberRefNo).Text)) = 0 Then Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Empty")
    If Len(Trim(Cells(i, colFirstName).Text)) = 0 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colFirstName), "Empty")
    If Len(Trim(Cells(i, colLastName).Text)) = 0 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colLastName), "Empty")
    'If Len(Trim(Cells(i, "j").Text)) = 0 Then Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "e"), "Empty")
    
    '************************** empty/invalid gender validation*****************************
    If Len(Trim(Cells(i, colGender).Text)) = 0 Then
        Cells(i, colGender).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Call addComm(Cells(i, colGender), "Empty")
    Else
        Cells(i, colGender) = UCase(Cells(i, colGender).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colGender).Text <> "M" And Cells(i, colGender).Text <> "F" Then
            Cells(i, colGender).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colGender), "Invalid Value")
        End If
    End If
    
    '************************** empty/invalid relation validation*****************************
    If Len(Trim(Cells(i, colRelation).Text)) = 0 Then
        Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Empty")
    Else
        Set rng = Range("Relationlist")
        Set c = rng.Find(what:=Cells(i, colRelation).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Invalid Value")
    End If
    
    '************************** empty principal reference validation*****************************
    If Len(Trim(Cells(i, colPrincipalRefNo).Text)) = 0 Then
        Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        
        Call addComm(Cells(i, colPrincipalRefNo), "Empty")
    ElseIf (getCurrentSheetPlanType = ADBP) And (Not IsInArray(Trim(Cells(i, colPrincipalRefNo).Text), PrincipalRefHolder)) Then
        ' VALIDATE ADDITIONAL SPOUSE & CHILDREN
        ' PRINCIPAL REF NO WILL BE DUPLICATE AND VALIDATION ADDITIONAL SPOUSE SHOULD BE CALLED ONCE FOR EACH PRINCIPAL
        ' THEREFORE CREATED TEMP CONTAINER TO HOLD UNIQUE PRINCIPAL REF (i-e PrincipalRefHolder)
        Call ValidateAdditionalSpouse(Trim(Cells(i, colPrincipalRefNo).Text), errCnt)
                
        PrincipalRefHolder(UBound(PrincipalRefHolder)) = Trim(Cells(i, colPrincipalRefNo).Text)
        
        ReDim Preserve PrincipalRefHolder((UBound(PrincipalRefHolder) + 1)) 'REDEFINE ARRAY WITH ONE MORE ITEM
    End If
    
    '************************** empty staff number validation*****************************
    If StaffNoAutoFill Then
        ' G-SEC CHANGES: IF PICTURE FILE NO. AND PRINCIPAL REF ARE SAME
        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL IF PLAN IS AD BASIC
        'If (Cells(i, colRelation).Text = "Principal") Then
        If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) Then
            StaffNo = StaffNo + 1
            Cells(i, colStaffNo) = StaffNo ': ActiveSheet.Unprotect ("itdaman")
        End If
    End If
    
    
    If Len(Trim(Cells(i, colStaffNo).Text)) = 0 Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colStaffNo), "Empty")
    
    
    '************** Plan field check ***************
    If Cells(i, colPlan).Interior.ColorIndex <> 46 Then
        If Len(Trim(Cells(i, colPlan).Text)) = 0 Then
            Cells(i, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Empty")
        Else
    
            Set rng = Range("PlansList")
            Dim stt As String
            Set c = rng.Find(what:=Cells(i, colPlan).Text, LookIn:=xlValues, lookat:=xlWhole)
            If c Is Nothing Then
               skipPlanChk = True  ' ASSYST# 153533
                'Cells(i, "p").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "p"), "Invalid Plan")
            Else
                skipPlanChk = False  ' ASSYST# 153533
    
                If c.Cells(1, 2).Text = "" Or c.Cells(1, 3).Text = "" Then
                    Cells(i, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Plan details not found")
                Else
                    Cells(i, colSys1) = c.Cells(1, 2).Text ': ActiveSheet.Unprotect ("itdaman")
                    Cells(i, colSys2) = c.Cells(1, 3).Text ': ActiveSheet.Unprotect ("itdaman")
                End If
            End If
        End If
    End If
    
    
    '***************** marital status *****************
    If Len(Trim(Cells(i, colMaritalStatus).Text)) = 0 Then
        Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Empty")
    Else
        Cells(i, colMaritalStatus) = UCase(Cells(i, colMaritalStatus).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colMaritalStatus).Text <> "M" And Cells(i, colMaritalStatus).Text <> "S" Then
            Cells(i, colMaritalStatus).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colMaritalStatus), "Invalid Value")
        ElseIf getCurrentSheetPlanType = ADBP Then
            If Cells(i, colGender).Text = "F" And Cells(i, colMaritalStatus).Text = "M" Then
                If CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) <= 18 Then
                    Cells(i, colMaritalStatus).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Warning!. Married female is less than or equal to 18 years")
                End If
            End If
        End If
    End If
    
    'If Len(Trim(Cells(i, "ac").Text)) = 0 Then Cells(i, "ac").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ac"), "Empty")
    'If Len(Trim(Cells(i, "ae").Text)) = 0 Then Cells(i, "ae").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ae"), "Empty")
    
    '******************* Nationality ****************
    If Len(Trim(Cells(i, colNationality).Text)) = 0 Then
        Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colNationality).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Invalid Nationality")
    End If
    
    '******************* Country of recidency ****************
    If Len(Trim(Cells(i, colCountryofResidency).Text)) = 0 Then
        Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colCountryofResidency).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Invalid Value")
    End If
    
    If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colFirstName)) > 15 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Length > 15")
    If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colMiddleName)) > 15 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Length > 15")
    If Cells(i, colLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colLastName)) > 30 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Length > 30")
    
    'ARABIC NAMES WILL BE HIDDEN FOR OTHER PLAN TYPES
    If getCurrentSheetPlanType = ADBP Then
        If Len(Trim(Cells(i, colArabicFirstName).Text)) = 0 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicFirstName), "Empty")
        If Len(Trim(Cells(i, colArabicLastName).Text)) = 0 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicLastName), "Empty")
        
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicFirstName)) > 15 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Length > 15")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicMiddleName)) > 15 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Length > 15")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicLastName)) > 30 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Length > 30")
        
        ' CHILD AGE SHOULD BE LESS THAN OR EQUAL TO 17 YEARS FOR ABU DHABI BASIC
        ' RELATION TYPE = CHILD
        If (Cells(i, colRelation).Interior.ColorIndex <> 46) And (UCase(Cells(i, colRelation).Text) = "CHILD") And (CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) >= 18) Then
            Cells(i, colRelation).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Cells(i, colRelation).AddComment ("Select 'Other Child' if age is 18 years or above")
        End If
    End If
    
    'English name total length 40
    If Len(Cells(i, colFirstName)) + Len(Cells(i, colMiddleName)) + Len(Cells(i, colLastName)) > 40 Then
        If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Total Name Length> 40")
        If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Total Name Length> 40")
        If Cells(i, colLastName).Interior.ColorIndex <> 46 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Total Name Length> 40")
    End If
    
    'Arabic name total length 60
    If Len(Cells(i, colArabicFirstName)) + Len(Cells(i, colArabicMiddleName)) + Len(Cells(i, colArabicLastName)) > 60 Then
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Total Name Length> 60")
    End If
        
    '********************* m.ref duplicates **************************
    If Cells(i, colMemberRefNo).Interior.ColorIndex <> 46 Then
        With Range(colMemberRefNo & "2:" & colMemberRefNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colMemberRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
             If Not c Is Nothing Then fads = c.Address
            
            Do While 1
            If Not c Is Nothing Then
                If c.Row <> i Then
                    Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1
                    Cells(i, colMemberRefNo).AddComment ("Duplicated - row#" & c.Row)
                    Exit Do
                End If
            End If
            Set c = .FindNext(c)
            If c.Address = fads Then Exit Do
            Loop
        End With
        Set c = Nothing
    End If
    
    '******************** DOB validations **************************
    If Len(Trim(Cells(i, colDateOfBirth).Text)) = 0 Then
        Cells(i, colDateOfBirth).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colDateOfBirth).AddComment ("Empty")
    Else
        Cells(i, colDateOfBirth) = Replace(Cells(i, colDateOfBirth).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colDateOfBirth).Text) Then Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
    End If
    
    
    If Cells(i, colDateOfBirth).Interior.ColorIndex <> 46 Then
    
        ReDim dt(1)
        Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colDateOfBirth).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
        If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date")
        Else
                    Dim dtDate As String
                    dtDate = Trim(Cells(i, colDateOfBirth).Text)
                    If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date. DOB is greater than the current system date")
                    Else
                        'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                        If val(dt(2)) < 1907 Then
                            Cells(i, colDateOfBirth).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colDateOfBirth).AddComment ("Warning!. too old date")
                        End If
                    End If
        End If
        Else
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        End If
    
    End If
    
    '************************************ Effective date validations ****************************
    If Len(Trim(Cells(i, colPolicyEffectiveDate).Text)) = 0 Then
        Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colPolicyEffectiveDate).AddComment ("Empty")
    Else
        Cells(i, colPolicyEffectiveDate) = Replace(Cells(i, colPolicyEffectiveDate).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colPolicyEffectiveDate).Text) Then Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
    End If
    
    If Cells(i, colPolicyEffectiveDate).Interior.ColorIndex <> 46 Then
        ReDim dt(1)
        'Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colPolicyEffectiveDate).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
            If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date")
            Else
                        
                        dtDate = Trim(Cells(i, colPolicyEffectiveDate).Text)
                        'If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        '    Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, "j").AddComment ("Invalid Date. DOB is greater than the current system date")
                        'Else
                            'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                            If val(dt(2)) < 1907 Then
                                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Warning!. too old date")
                            End If
                        'End If
            End If
        Else
            Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
        End If
    
    End If
    Dim age As Integer
    
    '****************** plan validation **********************
        
    If Cells(i, colGender).Interior.ColorIndex <> 46 And Cells(i, colPlan).Interior.ColorIndex <> 46 And _
        Cells(i, colPrincipalRefNo).Interior.ColorIndex <> 46 And Cells(i, colDateOfBirth).Interior.ColorIndex <> 46 And Cells(i, colMaritalStatus).Interior.ColorIndex <> 46 And Cells(i, colPolicyEffectiveDate).Interior.ColorIndex <> 46 Then
            ' ASSYST# 153533
            If Not skipPlanChk Then
    
                If Cells(i, colGender).Text = "M" Then
                    If InStr(1, Cells(i, colSys2).Text, "n", vbTextCompare) <= 0 Then errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is selected for male"): Cells(i, colPlan).Interior.ColorIndex = 46
                Else
    
                    age = CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate))
                    If Cells(i, colSys2).Text = "m" Then
                        If age < 10 Then _
                                    errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is not allowed for females If age < 10 ") _
                                    : Cells(i, colPlan).Interior.ColorIndex = 46
                    End If
                    If femMat And Cells(i, colMaritalStatus).Text = "M" Then
                        If InStr(1, Cells(i, colSys2).Text, "m", vbTextCompare) <= 0 Then
                            If (getCurrentSheetPlanType = ADBP And age > ADBP_MATERNITY_PLAN_MIN_AGE_LIMIT) Or _
                            (getCurrentSheetPlanType <> ADBP And age >= EBP_ENH_MATERNITY_PLAN_MIN_AGE_LIMIT And age <= 50) Then
                                errCnt = errCnt + 1
                                Call addComm(Cells(i, colPlan), "Non Maternity product is selected for a married female")
                                Cells(i, colPlan).Interior.ColorIndex = 46
                            End If
                        End If
                    ElseIf Cells(i, colMaritalStatus).Text <> "M" Then
                        If Cells(i, colSys2).Text = "m" Then _
                        errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is selected for unmarried female"): Cells(i, colPlan).Interior.ColorIndex = 46
                    End If
                End If
            End If
    End If
    
    '*******************************************  > 1 principal, wrong gender, wrong marital sts,(plan groups and mats) **********************
    Set c = Nothing

    Dim PlnCheckPrn, PlnCheckDep As Boolean
    
    'If femMat And Cells(i, "k").Interior.ColorIndex <> 40 And Cells(i, "p").Interior.ColorIndex <> 40 And _
    '    Cells(i, "n").Interior.ColorIndex <> 40 And Cells(i, "g").Interior.ColorIndex <> 40 And Cells(i, "q").Interior.ColorIndex <> 40 Then _
    '        PlnCheckPrn = True: PlnCheckDep = True Else PlnCheckPrn = False: PlnCheckDep = False
        
    ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
    ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
    ' FOR AD BASIC ONLY
    'If UCase(Trim(Cells(i, colRelation))) = "PRINCIPAL" Then
    If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) Then
        If Cells(i, colPrincipalRefNo).Interior.ColorIndex <> 46 Then
            
            With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
                Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
                If Not c Is Nothing Then fads = c.Address
                    Do While 1
                        If Not c Is Nothing Then
                            If c.Row <> i Then
                                
                                ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
                                ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
                                ' FOR AD BASIC ONLY
                                If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, c.Row) Then Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                    Call addComm(Cells(i, colRelation), "More than one Principal found; row#" & c.Row)
                            
'                                If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then Cells(i, colRelation).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: _
'                                    Call addComm(Cells(i, colRelation), "More than one Principal found; row#" & c.Row)
                                If UCase(Trim(Cells(c.Row, colRelation))) = "SPOUSE" Then
                                    If UCase(Trim(Cells(i, colMaritalStatus).Text)) <> "M" Then Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Wrong Marital Status")
                                    If UCase(Trim(Cells(c.Row, colMaritalStatus).Text)) <> "M" Then Cells(c.Row, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colMaritalStatus), "Wrong Marital Status")
                                    If Trim(Cells(i, colGender).Text) <> "" And UCase(Trim(Cells(i, colGender).Text)) = UCase(Trim(Cells(c.Row, colGender).Text)) Then Cells(i, colGender).Interior.ColorIndex = 46: Cells(c.Row, colGender).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                        Call addComm(Cells(i, colGender), "Wrong Gender"): Call addComm(Cells(c.Row, colGender), "Wrong Gender")
                                End If
                                If StaffNoCorrection = True And Cells(i, colStaffNo).Text <> "" Then
                                    Cells(c.Row, colStaffNo) = Cells(i, colStaffNo).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                If DeptAutoCorrection = True And Cells(i, colDepartment).Text <> "" Then
                                    Cells(c.Row, colDepartment) = Cells(i, colDepartment).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                '*********** plan group ***********
                                ' ASSYST# 153533
                                If Not skipPlanChk Then
                                    If PlanCorrection = False Then
                                        If Cells(c.Row, colSys1).Text = "" Then
                                            Set rng = Range("PlansList")
                                        
                                        
                                            For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 1).Text = Cells(c.Row, colPlan).Text Then
                                                        Cells(c.Row, colSys1) = rng.Cells(cp, 2).Text
                                                        Cells(c.Row, colSys2) = rng.Cells(cp, 3).Text
                                                        Exit For
                                                    End If
                                            Next
                                            If cp > rng.Rows.Count Then
                                                Cells(c.Row, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colPlan), "Invalid Plan")
                                            End If
                                        
                                        '    Set d = rng.Find(what:=Cells(c.Row, "p").Text, LookIn:=xlValues, lookat:=xlWhole)
                                        '    If d Is Nothing Then
                                        '        Cells(c.Row, "p").Interior.ColorIndex = 46': ActiveSheet.Unprotect ("itdaman"): errCnt = errCnt + 1: Call addComm(Cells(c.Row, "p"), "Invalid Plan")
                                        '    Else
                                        '        Cells(c.Row, "ay") = d.Cells(1, 2).Text': ActiveSheet.Unprotect ("itdaman")
                                        '        Cells(c.Row, "az") = d.Cells(1, 3).Text': ActiveSheet.Unprotect ("itdaman")
                                        '    End If
                                        End If
                                        If Cells(c.Row, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colSys1).Text <> Cells(i, colSys1).Text Then
                                              errCnt = errCnt + 1
                                              Call addComm(Cells(c.Row, colPlan), "Plan selected is different from the principal's plan ")
                                              Cells(c.Row, colPlan).Interior.ColorIndex = 46
                                        End If
                                    Else
                                        If Cells(i, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colGender).Interior.ColorIndex <> 46 _
                                            And Cells(c.Row, colMaritalStatus).Interior.ColorIndex <> 46 And DateCheck(Cells(c.Row, colDateOfBirth).Text, False) Then
                                            age = CalcAge(Cells(c.Row, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate))
                                            
                                            If Cells(c.Row, colGender).Text = "F" And Cells(c.Row, colMaritalStatus).Text = "M" And _
                                                age >= 10 And age <= 50 Then
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "m", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            Else
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "n", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            End If
                                        Else
                                            
                                        End If
                                               
                                    End If
                                End If
                                
                            End If
                        End If
                        Set c = .FindNext(c)
                        If c Is Nothing Then
                            Exit Do
                        Else
                           If c.Address = fads Then Exit Do
                        End If
                    Loop
            End With
        End If
    End If
    
    '*************Maternity validation********************************
   
    
    '********************************************* wrong memb ref no / external princ ref no **********************
    
    If UCase(Trim(Cells(i, colRelation).Text)) = "PRINCIPAL" Then
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Mem. Ref and Ext. Principal Ref. must be the same for Principals")
    'ElseIf getCurrentSheetPlanType <> ADBP Then
    Else
        ' REVERTING CHANGES AS PER PMG0000546
        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
        ' FOR AD BASIC ONLY
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) = UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Mem. Ref and Ext. Principal Ref. must not be the same for non-Principals")
    End If
    
    '********************************************* member without principal **********************
    
    Dim PrncFound As Boolean
    PrncFound = False
    Set c = Nothing
    If Cells(i, colRelation).Interior.ColorIndex <> 46 And UCase(Trim(Cells(i, colRelation).Text)) <> "PRINCIPAL" Then
        With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                    If Not c Is Nothing Then
                        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
                        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
                        'If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then PrncFound = True: Exit Do
                        If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, c.Row) Then
                            PrncFound = True
                            
                            Exit Do
                        End If
                    End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
            If PrncFound = False Then Cells(i, colMemberRefNo).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Warning!. Principal not found for this member")
        End With
    End If
    
    '*********************************** wrong/invalid staff no **************************************
    Set c = Nothing
            With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
                Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
                If Not c Is Nothing Then fads = c.Address
                    Do While 1
                        If Not c Is Nothing Then
                            If c.Row <> i And UCase(Trim(Cells(c.Row, colStaffNo).Text)) <> UCase(Trim(Cells(i, colStaffNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                Call addComm(Cells(i, colStaffNo), "Staff no should be the same for all members of a family; row#" & c.Row): Exit Do
                        End If
                        Set c = .FindNext(c)
                        If c.Address = fads Then Exit Do
                    Loop
            End With
    
    
    Set c = Nothing
    If Cells(i, colStaffNo).Interior.ColorIndex <> 46 Then
        With Range(colStaffNo & "2:" & colStaffNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colStaffNo).Text, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                If Not c Is Nothing Then
                    If UCase(Trim(Cells(c.Row, colPrincipalRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                        : Call addComm(Cells(i, colStaffNo), "Similar Staff No found in different families; row#" & c.Row): Exit Do
                   ' Selection.Cells(i, 14).NoteText (Selection.Cells(i, 14).NoteText & ", Similar Staff No. but Diff Prin. Ref. No.")
                End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
        End With
    End If
    
    '*************National Identity********************************
    ' CHECK HAS BEEN MOVED TO VALIDATEPLANFIELDS FUNCTION
    'If Trim(Cells(i, colNationalId).Text) = "" Then
    '    '''Cells(i, colNationalId) = "No National ID" ': ActiveSheet.Unprotect ("itdaman")
    '    Cells(i, colNationalId).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationalId), "Empty")
    'Else
    '   If Len(Cells(i, colNationalId).Value) > 30 Then Cells(i, colNationalId).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationalId), "Length > 30")
    'End If
    
    
    '********************** ucase names *****************
    Cells(i, colFirstName) = UCase(Cells(i, colFirstName)) ': ActiveSheet.Unprotect ("itdaman")
    Cells(i, colMiddleName) = UCase(Cells(i, colMiddleName)) ': ActiveSheet.Unprotect ("itdaman")
    Cells(i, colLastName) = UCase(Cells(i, colLastName)) ': ActiveSheet.Unprotect ("itdaman")
    
    
    '*************Department********************************
    If Len(Trim(Cells(i, colDepartment).Text)) = 0 Then
        'Cells(i, colDepartment) = "ND" ': ActiveSheet.Unprotect ("itdaman")
        Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Empty")
    Else
       If Len(Cells(i, colDepartment).Text) > 15 Then Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Length > 15")
    End If
    
    
    If getCurrentSheetPlanType = EBP Then
        '*************** Occupation validation ****************
        If Len(Trim(Cells(i, colOccupation).Text)) = 0 Then
          Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Empty")
        ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("OccupationList", Cells(i, colOccupation).Text) Then
            Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Invalid Occupation")
        End If
    End If
                
    '*************** Place of Visa Issuance Validation ****************
    If Len(Trim(Cells(i, colPlaceOfVisaIssue).Text)) = 0 Then
        Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlaceOfVisaIssue), "Empty")
    Else
        'Set rng = Range("PlaceOfVisaList")
        Set rng = Range("EmiratesList")
        Set c = rng.Find(what:=Cells(i, colPlaceOfVisaIssue).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
        If c Is Nothing Then
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance")
        ElseIf (getCurrentSheetPlanType = EBP) And (UCase(Cells(i, colPlaceOfVisaIssue).Text) <> "DUBAI") Then
            ' SLO1383 - Place of visa SHOULD BE DUBAI ONLY FOR EBP
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance. EBP is only for Dubai Emirate.")
        Else
            ' SLO1383
            ' IF CURRENT RECORD IS NOT PRINCIPAL THEN CHILD (<18) & SPOUSE
            ' CONTACT NUMBER, CITY, EMIRATE, RESIDENT LOC, WORK LOC & EMAIL
            ' SHOULD BE SAME AS PRINCIPAL IF IT'S EMPTY
            ' FOR EBP NO NEED TO CHECK PLACE OF VISA ISSUANCE AS EBP IS FOR DUBAI ONLY
            If Not IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) And _
                ((getCurrentSheetPlanType = EBP) Or (UCase(Cells(i, colPlaceOfVisaIssue).Text) = "DUBAI")) Then
                If (Len(Trim(Cells(i, colTelephone1).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colCity).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmirate).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colResidentialLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colWorkLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmail).Value)) = 0) Then
                    
                    Dim dependentContactNo As String, dependentCity As String, _
                        dependentEmirate As String, dependentResLoc As String, _
                        dependentWrkLoc As String, dependentEmail As String
                
                    Call GetContactNoForChild(Cells(i, colPrincipalRefNo).Text, _
                                                        Cells(i, colRelation).Text, _
                                                        CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate).Text), _
                                                        dependentContactNo, dependentCity, dependentEmirate, dependentResLoc, dependentWrkLoc, dependentEmail)
                    
                    ' SET PRINCIPAL'S PHONE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colTelephone1).Value)) = 0 Then
                        Cells(i, colTelephone1).Value = dependentContactNo
                    End If
                    
                    ' SET PRINCIPAL'S CITY IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colCity).Value)) = 0 Then
                        Cells(i, colCity).Value = dependentCity
                    End If
                    
                    ' SET PRINCIPAL'S EMIRATE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmirate).Value)) = 0 Then
                        Cells(i, colEmirate).Value = dependentEmirate
                    End If
                    
                    ' SET PRINCIPAL'S RESIDENTIAL LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colResidentialLoc).Value)) = 0 Then
                        Cells(i, colResidentialLoc).Value = dependentResLoc
                    End If
                    
                    ' SET PRINCIPAL'S WORK LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colWorkLoc).Value)) = 0 Then
                        Cells(i, colWorkLoc).Value = dependentWrkLoc
                    End If
                    
                    ' SET PRINCIPAL'S EMAIL IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmail).Value)) = 0 Then
                        Cells(i, colEmail).Value = dependentEmail
                    End If
                End If
            End If
        End If
    End If
    
    
    
    
    '******************* City ****************
    If Len(Trim(Cells(i, colCity).Text)) = 0 Then
        Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Empty")
    Else
        Set rng = Range("CityList")
        Set c = rng.Find(what:=Cells(i, colCity).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Invalid City")
    End If
    
    'PMG1236  - Previous Gross Salary column will be hidden always and will have default Y (yes) value
    'Ref: Shiyas - 30-08-2015
    Cells(i, colHiddenGrossSalary) = "Y"
    
    ' BELOW VALIDATION IS REQUIRED IF SELECTED PLAN IS EBP.
    ' FOR OTHER PLAN TYPES, FOLLOWING COLUMNS WILL BE HIDDEN
    ' Previous Insurance Coverage
    ' Has Gross Salary
    ' National Id Type
    ' Visa Number
    Call ValidatePlanFields(i, errCnt)
    
    
    '*************Wrong Nationality********************************
    'Commented as it is done in another place
    'If Cells(i, "ag").Interior.ColorIndex <> 40 Then
    '    With Range("CountryList")
    '        Set c = .Find(Cells(i, "ag").Value, LookIn:=xlValues, lookat:=xlWhole)
    '         If c Is Nothing Then
    '                Cells(i, "ag").Interior.ColorIndex = 46: errCnt = errCnt + 1
    '                Cells(i, "ag").AddComment ("Wrong Nationality")
    '        End If
    '        Set c = Nothing
    '    End With
    'End If
    '*************Updating the Column AK - THAT IS MACRO RUN SUCCESSFULLY************
        If (errCnt - prevErrCnt) > 0 Then
            Cells(i, colMacroRunSuccessfully).Value = "N"
        Else
            Cells(i, colMacroRunSuccessfully).Value = "Y"
        End If
    
    '********* Setting the previous error count to the current error count.*********
        prevErrCnt = errCnt
    
    Next i
    Application.EnableEvents = True
    ''Range("AY:AZ").Clear
    '************************************
        ActiveSheet.Protect password:="itdaman", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowFormattingCells:=True, AllowFormattingRows:=True, _
            AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
        Range("A3").Select
    MsgBox "Error check has been completed." & vbNewLine & errCnt & " error(s) and " & wrnCnt & " warning(s) found", , "Error Check"
    Unload Me
End Sub

Private Sub ErrorCheck_Customer()
    Dim skipPlanChk As Boolean, sheetMemberDetails As Variant
    skipPlanChk = False ' ASSYST# 153533
    
    If UCase(Trim(Cells(2, colMiddleName).Value)) <> "MIDDLE NAME" Or UCase(Trim(Cells(2, colStaffNo).Value)) <> "STAFF NUMBER" Then MsgBox "Wrong File Format", vbCritical: Exit Sub
    
    Dim i As Long, MemCnt, prevErrCnt, errCnt As Long, wrnCnt As Long
    Dim nm, c, D, fads
    Dim ans As String
    Dim femMat As Boolean
    Dim mat As String
    Dim MatPos, cp As Integer
    
    Dim StaffNoCorrection, StaffNoAutoFill, DeptAutoCorrection, PlanCorrection As Boolean
    StaffNoCorrection = chkSNAC.Value
    StaffNoAutoFill = chkSNAF.Value
    DeptAutoCorrection = chkDeptAC.Value
    PlanCorrection = chkPLNAC.Value
    
    Dim ErrStr As String
    nm = txtNoOfMembers.Text
    MemCnt = val(nm)
    If MemCnt <= 0 Then ErrStr = ErrStr + "Invalid Member Count entered"
    
'    pEffDate = txtEffDate.Text
'    If pEffDate = "" Or Not DateCheck(pEffDate, True) Then
'        If ErrStr <> "" Then ErrStr = ErrStr + vbNewLine
'      ErrStr = ErrStr + "Invalid policy effective date enetered"
'    End If
    
    If ErrStr <> "" Then MsgBox "Please correct the following errors" + vbNewLine + ErrStr, vbCritical: Exit Sub
    
    'Range(colPolicyEffectiveDate & "3:" & colPolicyEffectiveDate & (MemCnt + 2)).Cells = pEffDate
    
    femMat = chkMat.Value
    
    Set sheetMemberDetails = Sheets("Member Details")
    
    ActiveSheet.Unprotect ("itdaman")
    
    '**************************Clearing the "Macros passed successfully" column. modified by Khallil***********
'    sheetMemberDetails.Range(colMacroRunSuccessfully & ":" & colMacroRunSuccessfully).Clear
'    'Range("AY:AZ").Clear   ' 2 BLANK CELLS
'    sheetMemberDetails.Cells(1, colMacroRunSuccessfully) = shtListOfValues.ListObjects("tblCustomerColumnConfig").DataBodyRange(37, 5)
'    sheetMemberDetails.Cells(2, colMacroRunSuccessfully) = shtListOfValues.ListObjects("tblCustomerColumnConfig").DataBodyRange(37, 4)
'
'    Dim strTempRange As String: strTempRange = colMacroRunSuccessfully & "2:" & colMacroRunSuccessfully & "2"
'    sheetMemberDetails.Range(strTempRange).Font.Color = Cells(2, colFirstName).Font.Color
'    sheetMemberDetails.Range(strTempRange).Interior.ColorIndex = Cells(2, colFirstName).Interior.ColorIndex
'    sheetMemberDetails.Range(strTempRange).Font.name = Cells(2, colFirstName).Font.name
'    sheetMemberDetails.Range(strTempRange).VerticalAlignment = xlCenter
    
    
    
    If ActiveSheet.AutoFilterMode = True Then Selection.AutoFilter
    Range("A3:AN65536").ClearComments
    Range("A3:AN65536").Interior.ColorIndex = xlColorIndexNone
    
    Range("BA3:BN65536").ClearComments
    Range("BA3:BN65536").Interior.ColorIndex = xlColorIndexNone
    
    Dim StaffNo As Integer
    Dim PrincipalRefHolder() As String
    ReDim Preserve PrincipalRefHolder(0)    'CREATING DYNAMIC ARRAY WITH 1 ITEM
    
    If StaffNoAutoFill Then StaffNoCorrection = True
    
    Application.EnableEvents = False
    
    For i = 3 To MemCnt + 2
    
    
    '************************** empty/invalid picture file name, first name, last name
    
    If Len(Trim(Cells(i, colMemberRefNo).Text)) = 0 Then Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Empty")
    If Len(Trim(Cells(i, colFirstName).Text)) = 0 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colFirstName), "Empty")
    If Len(Trim(Cells(i, colLastName).Text)) = 0 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colLastName), "Empty")
    'If Len(Trim(Cells(i, "j").Text)) = 0 Then Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "e"), "Empty")
    
    If Len(Trim(Cells(i, colGender).Text)) = 0 Then
        Cells(i, colGender).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Call addComm(Cells(i, colGender), "Empty")
    Else
        Cells(i, colGender) = UCase(Cells(i, colGender).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colGender).Text <> "M" And Cells(i, colGender).Text <> "F" Then
            Cells(i, colGender).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colGender), "Invalid Value")
        End If
    End If
    
    'RELATION VALIDATION
    Dim rng As Range
    If Len(Trim(Cells(i, colRelation).Text)) = 0 Then
        Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Empty")
    Else
        Set rng = Range("Relationlist")
        Set c = rng.Find(what:=Cells(i, colRelation).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Invalid Value")
    End If
    
    If Len(Trim(Cells(i, colPrincipalRefNo).Text)) = 0 Then
        Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        
        Call addComm(Cells(i, colPrincipalRefNo), "Empty")
    ElseIf (getCurrentSheetPlanType = ADBP) And (Not IsInArray(Trim(Cells(i, colPrincipalRefNo).Text), PrincipalRefHolder)) Then
            
        ' VALIDATE ADDITIONAL SPOUSE & CHILDREN
        ' PRINCIPAL REF NO WILL BE DUPLICATE AND VALIDATION ADDITIONAL SPOUSE SHOULD BE CALLED ONCE FOR EACH PRINCIPAL
        ' THEREFORE CREATED TEMP CONTAINER TO HOLD UNIQUE PRINCIPAL REF (i-e PrincipalRefHolder)
        Call ValidateAdditionalSpouse(Trim(Cells(i, colPrincipalRefNo).Text), errCnt)
                
        PrincipalRefHolder(UBound(PrincipalRefHolder)) = Trim(Cells(i, colPrincipalRefNo).Text)
        
        ReDim Preserve PrincipalRefHolder((UBound(PrincipalRefHolder) + 1)) 'REDEFINE ARRAY WITH ONE MORE ITEM
    End If
    
    If StaffNoAutoFill Then
        ' G-SEC CHANGES: IF PICTURE FILE NO. AND PRINCIPAL REF ARE SAME
        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL IF PLAN IS AD BASIC
        'If Cells(i, colRelation).Text = "Principal" Then
        If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) Then
            StaffNo = StaffNo + 1
            Cells(i, colStaffNo) = StaffNo ': ActiveSheet.Unprotect ("itdaman")
        End If
    End If
    
    If Len(Trim(Cells(i, colStaffNo).Text)) = 0 Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colStaffNo), "Empty")
    
   '***************** marital status *****************
    
    If Len(Trim(Cells(i, colMaritalStatus).Text)) = 0 Then
        Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Empty")
    Else
        Cells(i, colMaritalStatus) = UCase(Cells(i, colMaritalStatus).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colMaritalStatus).Text <> "M" And Cells(i, colMaritalStatus).Text <> "S" Then
            Cells(i, colMaritalStatus).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colMaritalStatus), "Invalid Value")
        ElseIf getCurrentSheetPlanType = ADBP Then
            If Cells(i, colGender).Text = "F" And Cells(i, colMaritalStatus).Text = "M" Then
                If CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) <= 18 Then
                    Cells(i, colMaritalStatus).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Warning!. Married female is less than or equal to 18 years")
                End If
            End If
        End If
    End If
    
    'If Len(Trim(Cells(i, "ac").Text)) = 0 Then Cells(i, "ac").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ac"), "Empty")
    'If Len(Trim(Cells(i, "ae").Text)) = 0 Then Cells(i, "ae").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ae"), "Empty")
    
    '******************* Nationality ****************
    If Len(Trim(Cells(i, colNationality).Text)) = 0 Then
        Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colNationality).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Invalid Nationality")
    End If
    
    '******************* Country of recidency ****************
    If Len(Trim(Cells(i, colCountryofResidency).Text)) = 0 Then
        Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colCountryofResidency).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Invalid Value")
    End If
          
    
    If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colFirstName)) > 15 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Length > 15")
    If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colMiddleName)) > 15 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Length > 15")
    If Cells(i, colLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colLastName)) > 30 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Length > 30")
    
    'ARABIC NAMES WILL BE HIDDEN FOR OTHER PLAN TYPES
    If getCurrentSheetPlanType = ADBP Then
        If Len(Trim(Cells(i, colArabicFirstName).Text)) = 0 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicFirstName), "Empty")
        If Len(Trim(Cells(i, colArabicLastName).Text)) = 0 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicLastName), "Empty")
        
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicFirstName)) > 15 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Length > 15")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicMiddleName)) > 15 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Length > 15")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicLastName)) > 30 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Length > 30")
        
        ' CHILD AGE SHOULD BE LESS THAN OR EQUAL TO 17 YEARS FOR ABU DHABI BASIC
        ' RELATION TYPE = CHILD
        If (Cells(i, colRelation).Interior.ColorIndex <> 46) And (UCase(Cells(i, colRelation).Text) = "CHILD") And (CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) >= 18) Then
            Cells(i, colRelation).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Cells(i, colRelation).AddComment ("Select 'Other Child' if age is 18 years or above")
        End If
    End If
    
    'English name total length 40
    If Len(Cells(i, colFirstName)) + Len(Cells(i, colMiddleName)) + Len(Cells(i, "D")) > 40 Then
        If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Total Name Length> 40")
        If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Total Name Length> 40")
        If Cells(i, colLastName).Interior.ColorIndex <> 46 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Total Name Length> 40")
    End If
    
    'Arabic name total length 60
    If Len(Cells(i, colArabicFirstName)) + Len(Cells(i, colArabicMiddleName)) + Len(Cells(i, colArabicLastName)) > 60 Then
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Total Name Length> 60")
    End If
    
    
    '********************* m.ref duplicates **************************
    
    If Cells(i, colMemberRefNo).Interior.ColorIndex <> 46 Then
        With Range(colMemberRefNo & "3:" & colMemberRefNo & (MemCnt + 2))
            Set c = .Find(Cells(i, colMemberRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
             If Not c Is Nothing Then fads = c.Address
            
            Do While 1
            If Not c Is Nothing Then
                If c.Row <> i Then
                    Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1
                    Cells(i, colMemberRefNo).AddComment ("Duplicated - row#" & c.Row)
                    Exit Do
                End If
            End If
            Set c = .FindNext(c)
            If c.Address = fads Then Exit Do
            Loop
        End With
        Set c = Nothing
    End If
    
    '******************** DOB validations **************************
    If Len(Trim(Cells(i, colDateOfBirth).Text)) = 0 Then
        Cells(i, colDateOfBirth).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colDateOfBirth).AddComment ("Empty")
    Else
        Cells(i, colDateOfBirth) = Replace(Cells(i, colDateOfBirth).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colDateOfBirth).Text) Then Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
    End If
    
    If Cells(i, colDateOfBirth).Interior.ColorIndex <> 46 Then
    
        ReDim dt(1)
        Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colDateOfBirth).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
        If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date")
        Else
                    Dim dtDate As String
                    dtDate = Trim(Cells(i, colDateOfBirth).Text)
                    If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date. DOB is greater than the current system date")
                    Else
                        'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                        If val(dt(2)) < 1907 Then
                            Cells(i, colDateOfBirth).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colDateOfBirth).AddComment ("Warning!. too old date")
                        End If
                    End If
        End If
        Else
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        End If
    
    End If
    
    '************************************ Effective date validations ****************************
    If Len(Trim(Cells(i, colPolicyEffectiveDate).Text)) = 0 Then
        Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colPolicyEffectiveDate).AddComment ("Empty")
    Else
        Cells(i, colPolicyEffectiveDate) = Replace(Cells(i, colPolicyEffectiveDate).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colPolicyEffectiveDate).Text) Then Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
    End If
    
    If Cells(i, colPolicyEffectiveDate).Interior.ColorIndex <> 46 Then
        ReDim dt(1)
        'Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colPolicyEffectiveDate).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
            If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date")
            Else
                        
                        dtDate = Trim(Cells(i, colPolicyEffectiveDate).Text)
                        'If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        '    Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, "j").AddComment ("Invalid Date. DOB is greater than the current system date")
                        'Else
                            'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                            If val(dt(2)) < 1907 Then
                                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Warning!. too old date")
                            End If
                        'End If
            End If
        Else
            Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
        End If
    
    End If
    Dim age As Integer
    
    '****************** plan validation **********************
    'PMG1236: PLAN VALIDATION IS NOT REQUIRED AS CUSTOMERS WILL NOT BE SELECTING PLAN. THEY WILL BE SELECTING PLAN CATEGORIES
    skipPlanChk = True  'PMG1236
    ''If Cells(i, "k").Interior.ColorIndex <> 46 And Cells(i, "p").Interior.ColorIndex <> 46 And _
    ''    Cells(i, "n").Interior.ColorIndex <> 46 And Cells(i, "g").Interior.ColorIndex <> 46 And Cells(i, "q").Interior.ColorIndex <> 46 Then
    ''        ' ASSYST# 153533
    ''        If Not skipPlanChk Then
    ''
    ''            If Cells(i, "k").Text = "M" Then
    ''                If InStr(1, Cells(i, "az").Text, "n", vbTextCompare) <= 0 Then errCnt = errCnt + 1: Call addComm(Cells(i, "p"), "Maternity product is selected for male"): Cells(i, "p").Interior.ColorIndex = 46
    ''            Else
    ''
    ''                age = CalcAge(Cells(i, "g").Text, pEffDate)
    ''                If Cells(i, "az").Text = "m" Then
    ''                    If age < 10 Or age > 50 Then _
    ''                                errCnt = errCnt + 1: Call addComm(Cells(i, "p"), "Maternity product is not allowed for females If age < 10 Or age > 50 ") _
    ''                                : Cells(i, "p").Interior.ColorIndex = 46
    ''                End If
    ''                If femMat And Cells(i, "q").Text = "M" Then
    ''                    If InStr(1, Cells(i, "az").Text, "m", vbTextCompare) <= 0 Then
    ''                        If age >= 10 And age <= 50 Then
    ''                            errCnt = errCnt + 1
    ''                            Call addComm(Cells(i, "p"), "Non Maternity product is selected for a married female")
    ''                            Cells(i, "p").Interior.ColorIndex = 46
    ''                        End If
    ''                    End If
    ''                ElseIf Cells(i, "q").Text <> "M" Then
    ''                    If Cells(i, "az").Text = "m" Then _
    ''                    errCnt = errCnt + 1: Call addComm(Cells(i, "p"), "Maternity product is selected for unmarried female"): Cells(i, "p").Interior.ColorIndex = 46
    ''                End If
    ''            End If
    ''        End If
    ''End If
    
    '*******************************************  > 1 principal, wrong gender, wrong marital sts,(plan groups and mats) **********************
    Set c = Nothing
    
    Dim PlnCheckPrn, PlnCheckDep As Boolean
    
    'If femMat And Cells(i, "k").Interior.ColorIndex <> 40 And Cells(i, "p").Interior.ColorIndex <> 40 And _
    '    Cells(i, "n").Interior.ColorIndex <> 40 And Cells(i, "g").Interior.ColorIndex <> 40 And Cells(i, "q").Interior.ColorIndex <> 40 Then _
    '        PlnCheckPrn = True: PlnCheckDep = True Else PlnCheckPrn = False: PlnCheckDep = False
    
    ' G-SEC CHANGES: IF PICTURE FILE NO. AND PRINCIPAL REF ARE SAME
    ' THEN IT WILL BE CONSIDERED AS PRINCIPAL IF PLAN IS AD BASIC
    'If UCase(Trim(Cells(i, colRelation))) = "PRINCIPAL" Then
    If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) Then
        If Cells(i, colPrincipalRefNo).Interior.ColorIndex <> 46 Then
            
            With Range(colPrincipalRefNo & "3:" & colPrincipalRefNo & (MemCnt + 2))
                Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
                If Not c Is Nothing Then fads = c.Address
                    Do While 1
                        If Not c Is Nothing Then
                            If c.Row <> i Then
                                 
                                If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then Cells(i, colRelation).Interior.ColorIndex = 46: _
                                    errCnt = errCnt + 1: _
                                    Call addComm(Cells(i, colRelation), "More than one Principal found; row#" & c.Row)
                                If UCase(Trim(Cells(c.Row, colRelation))) = "SPOUSE" Then
                                    If UCase(Trim(Cells(i, colMaritalStatus).Text)) <> "M" Then Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Wrong Marital Status")
                                    If UCase(Trim(Cells(c.Row, colMaritalStatus).Text)) <> "M" Then Cells(c.Row, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colMaritalStatus), "Wrong Marital Status")
                                    If Trim(Cells(i, colGender).Text) <> "" And UCase(Trim(Cells(i, colGender).Text)) = UCase(Trim(Cells(c.Row, colGender).Text)) Then Cells(i, colGender).Interior.ColorIndex = 46: Cells(c.Row, colGender).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                        Call addComm(Cells(i, colGender), "Wrong Gender"): Call addComm(Cells(c.Row, colGender), "Wrong Gender")
                                End If
                                If StaffNoCorrection = True And Cells(i, colStaffNo).Text <> "" Then
                                    Cells(c.Row, colStaffNo) = Cells(i, colStaffNo).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                If DeptAutoCorrection = True And Cells(i, colDepartment).Text <> "" Then
                                    Cells(c.Row, colDepartment) = Cells(i, colDepartment).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                '*********** plan group ***********
                                ' ASSYST# 153533
                                If Not skipPlanChk Then
                                    If PlanCorrection = False Then
                                        If Cells(c.Row, colSys1).Text = "" Then
                                            Set rng = Range("PlansList")
                                        
                                        
                                            For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 1).Text = Cells(c.Row, colPlan).Text Then
                                                        Cells(c.Row, colSys1) = rng.Cells(cp, 2).Text
                                                        Cells(c.Row, colSys2) = rng.Cells(cp, 3).Text
                                                        Exit For
                                                    End If
                                            Next
                                            If cp > rng.Rows.Count Then
                                                Cells(c.Row, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colPlan), "Invalid Plan")
                                            End If
                                        
                                        '    Set d = rng.Find(what:=Cells(c.Row, "p").Text, LookIn:=xlValues, lookat:=xlWhole)
                                        '    If d Is Nothing Then
                                        '        Cells(c.Row, "p").Interior.ColorIndex = 46': ActiveSheet.Unprotect ("itdaman"): errCnt = errCnt + 1: Call addComm(Cells(c.Row, "p"), "Invalid Plan")
                                        '    Else
                                        '        Cells(c.Row, "ay") = d.Cells(1, 2).Text': ActiveSheet.Unprotect ("itdaman")
                                        '        Cells(c.Row, "az") = d.Cells(1, 3).Text': ActiveSheet.Unprotect ("itdaman")
                                        '    End If
                                        End If
                                        If Cells(c.Row, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colSys1).Text <> Cells(i, colSys1).Text Then
                                              errCnt = errCnt + 1
                                              Call addComm(Cells(c.Row, colPlan), "Plan selected is different from the principal's plan ")
                                              Cells(c.Row, colPlan).Interior.ColorIndex = 46
                                        End If
                                    Else
                                        If Cells(i, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colGender).Interior.ColorIndex <> 46 _
                                            And Cells(c.Row, colMaritalStatus).Interior.ColorIndex <> 46 And DateCheck(Cells(c.Row, colDateOfBirth).Text, False) Then
                                            age = CalcAge(Cells(c.Row, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate))
                                            
                                            If Cells(c.Row, colGender).Text = "F" And Cells(c.Row, colMaritalStatus).Text = "M" And _
                                                age >= 10 And age <= 50 Then
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "m", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            Else
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "n", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            End If
                                        Else
                                            
                                        End If
                                               
                                    End If
                                End If
                                
                            End If
                        End If
                        Set c = .FindNext(c)
                        If c Is Nothing Then
                            Exit Do
                        Else
                           If c.Address = fads Then Exit Do
                        End If
                    Loop
            End With
        End If
    End If
    
    '*************Maternity validation********************************
    
    
    '********************************************* wrong memb ref no / external princ ref no **********************
    
    If UCase(Trim(Cells(i, colRelation).Text)) = "PRINCIPAL" Then
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Picture file name and Principal Ref. must be the same for Principals")
    'ElseIf getCurrentSheetPlanType <> ADBP Then
    Else
        ' REVERTING CHANGES AS PER PMG0000546
        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
        ' FOR AD BASIC ONLY
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) = UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Picture file name and Principal Ref. must not be the same for non-Principals")
    End If
    
    '********************************************* member without principal **********************
    
    Dim PrncFound As Boolean
    PrncFound = False
    Set c = Nothing
    If Cells(i, colRelation).Interior.ColorIndex <> 46 And UCase(Trim(Cells(i, colRelation).Text)) <> "PRINCIPAL" Then
        With Range(colPrincipalRefNo & "3:" & colPrincipalRefNo & (MemCnt + 2))
            Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                    If Not c Is Nothing Then
                        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
                        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
                        ' FOR AD BASIC ONLY
                        ' REVERTING CHANGES AS PER PMG0000546
                        If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then PrncFound = True: Exit Do
'                        If (UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL") Or _
'                            ( _
'                             (getCurrentSheetPlanType = ADBP) And _
'                             (UCase(Trim(Cells(c.Row, colMemberRefNo).Text)) = UCase(Trim(Cells(c.Row, colPrincipalRefNo).Text))) _
'                            ) Then
'                            PrncFound = True
'
'                            Exit Do
'                        End If
                    End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
            If PrncFound = False Then Cells(i, colMemberRefNo).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Warning!. Principal not found for this member")
        End With
    End If
    
    '*********************************** wrong/invalid staff no **************************************
    
    Set c = Nothing
    With Range(colPrincipalRefNo & "3:" & colPrincipalRefNo & (MemCnt + 2))
        Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
        If Not c Is Nothing Then fads = c.Address
            Do While 1
                If Not c Is Nothing Then
                    If c.Row <> i And UCase(Trim(Cells(c.Row, colStaffNo).Text)) <> UCase(Trim(Cells(i, colStaffNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                        Call addComm(Cells(i, colStaffNo), "Staff no should be the same for all members of a family; row#" & c.Row): Exit Do
                End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
            Loop
    End With
    
    
    Set c = Nothing
    If Cells(i, colStaffNo).Interior.ColorIndex <> 46 Then
        With Range(colStaffNo & "3:" & colStaffNo & (MemCnt + 2))
            Set c = .Find(Cells(i, colStaffNo).Text, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                If Not c Is Nothing Then
                    If UCase(Trim(Cells(c.Row, colPrincipalRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                        : Call addComm(Cells(i, colStaffNo), "Similar Staff No found in different families; row#" & c.Row): Exit Do
                   ' Selection.Cells(i, 14).NoteText (Selection.Cells(i, 14).NoteText & ", Similar Staff No. but Diff Prin. Ref. No.")
                End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
        End With
    End If
    
    
    '********************** ucase names *****************
    Cells(i, colFirstName) = UCase(Cells(i, colFirstName))
    Cells(i, colMiddleName) = UCase(Cells(i, colMiddleName))
    Cells(i, colLastName) = UCase(Cells(i, colLastName))
    
    
    '*************Department********************************
    If Trim(Cells(i, colDepartment).Text) = "" Then
        'Cells(i, colDepartment) = "ND" ': ActiveSheet.Unprotect ("itdaman")
        Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Empty")
    Else
       If Len(Cells(i, colDepartment).Text) > 15 Then Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Length > 15")
    End If
    
    
    If getCurrentSheetPlanType = EBP Then
        '*************** Occupation validation ****************
        If Len(Trim(Cells(i, colOccupation).Text)) = 0 Then
          Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Empty")
        ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("OccupationList", Cells(i, colOccupation).Text) Then
            Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Invalid Occupation")
        End If
    End If
    
    
    '*************** Place of Visa Issuance Validation ****************
    If Len(Trim(Cells(i, colPlaceOfVisaIssue).Text)) = 0 Then
        Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlaceOfVisaIssue), "Empty")
    Else
        'Set rng = Range("PlaceOfVisaList")
        Set rng = Range("EmiratesList")
        Set c = rng.Find(what:=Cells(i, colPlaceOfVisaIssue).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
        If c Is Nothing Then
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance")
        ElseIf (getCurrentSheetPlanType = EBP) And (UCase(Cells(i, colPlaceOfVisaIssue).Text) <> "DUBAI") Then
            ' SLO1383 - Place of visa SHOULD BE DUBAI ONLY FOR EBP
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance. EBP is only for Dubai Emirate.")
        Else
            ' SLO1383
            ' IF CURRENT RECORD IS NOT PRINCIPAL THEN CHILD (<18) & SPOUSE
            ' CONTACT NUMBER, CITY, EMIRATE, RESIDENT LOC, WORK LOC & EMAIL
            ' SHOULD BE SAME AS PRINCIPAL IF IT'S EMPTY
            ' FOR EBP NO NEED TO CHECK PLACE OF VISA ISSUANCE AS EBP IS FOR DUBAI ONLY
            ' IF PLACE OF VISA ISSUANCE FIELD HAS ERROR THEN THIS LOGIC/CHECK SHOULD NOT BE EXECTURED
            If (Not IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i)) And _
                ((getCurrentSheetPlanType = EBP) Or (UCase(Cells(i, colPlaceOfVisaIssue).Text) = "DUBAI")) Then
                If (Len(Trim(Cells(i, colTelephone1).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colCity).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmirate).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colResidentialLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colWorkLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmail).Value)) = 0) Then
                    
                    Dim dependentContactNo As String, dependentCity As String, _
                        dependentEmirate As String, dependentResLoc As String, _
                        dependentWrkLoc As String, dependentEmail As String
                
                    Call GetContactNoForChild(Cells(i, colPrincipalRefNo).Text, _
                                                        Cells(i, colRelation).Text, _
                                                        CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate).Text), _
                                                        dependentContactNo, dependentCity, dependentEmirate, dependentResLoc, dependentWrkLoc, dependentEmail)
                    
                    ' SET PRINCIPAL'S PHONE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colTelephone1).Value)) = 0 Then
                        Cells(i, colTelephone1).Value = dependentContactNo
                    End If
                    
                    ' SET PRINCIPAL'S CITY IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colCity).Value)) = 0 Then
                        Cells(i, colCity).Value = dependentCity
                    End If
                    
                    ' SET PRINCIPAL'S EMIRATE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmirate).Value)) = 0 Then
                        Cells(i, colEmirate).Value = dependentEmirate
                    End If
                    
                    ' SET PRINCIPAL'S RESIDENTIAL LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colResidentialLoc).Value)) = 0 Then
                        Cells(i, colResidentialLoc).Value = dependentResLoc
                    End If
                    
                    ' SET PRINCIPAL'S WORK LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colWorkLoc).Value)) = 0 Then
                        Cells(i, colWorkLoc).Value = dependentWrkLoc
                    End If
                    
                    ' SET PRINCIPAL'S EMAIL IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmail).Value)) = 0 Then
                        Cells(i, colEmail).Value = dependentEmail
                    End If
                End If
                
            End If
        End If
    End If
    
    
    
    
    '******************* City ****************
    If Len(Trim(Cells(i, colCity).Text)) = 0 Then
        Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Empty")
    Else
        Set rng = Range("CityList")
        Set c = rng.Find(what:=Cells(i, colCity).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Invalid City")
    End If
    
    
    'PMG1236  - Previous Gross Salary column will be hidden always and will have default Y (yes) value
    'Ref: Shiyas - 30-08-2015
    Cells(i, colHiddenGrossSalary) = "Y"
    
    ' BELOW VALIDATION IS REQUIRED IF SELECTED PLAN IS EBP.
    ' FOR OTHER PLAN TYPES, FOLLOWING COLUMNS WILL BE HIDDEN
    ' Previous Insurance Coverage
    ' Has Gross Salary
    ' Visa Number
    Call ValidatePlanFields(i, errCnt)
    
    
    '*************Wrong Nationality********************************
    'Commented as it is done in another place
    'If Cells(i, "ag").Interior.ColorIndex <> 40 Then
    '    With Range("CountryList")
    '        Set c = .Find(Cells(i, "ag").Value, LookIn:=xlValues, lookat:=xlWhole)
    '         If c Is Nothing Then
    '                Cells(i, "ag").Interior.ColorIndex = 46: errCnt = errCnt + 1
    '                Cells(i, "ag").AddComment ("Wrong Nationality")
    '        End If
    '        Set c = Nothing
    '    End With
    'End If
    '*************Updating the Column AK - THAT IS MACRO RUN SUCCESSFULLY************
        If (errCnt - prevErrCnt) > 0 Then
            Cells(i, colMacroRunSuccessfully).Value = "N"
        Else
            Cells(i, colMacroRunSuccessfully).Value = "Y"
        End If
    
    '********* Setting the previous error count to the current error count.*********
        prevErrCnt = errCnt
    
    Next i
    Application.EnableEvents = True
    ''Range("AY:AZ").Clear
    '************************************
        ActiveSheet.Protect password:="itdaman", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowFormattingCells:=True, AllowFormattingRows:=True, _
            AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
        Range("A3").Select
    MsgBox "Error check has been completed." & vbNewLine & errCnt & " error(s) and " & wrnCnt & " warning(s) found", , "Error Check"
    Unload Me
End Sub

Private Function ValidatePlanFields(ByRef rowIndex As Long, ByRef errCnt As Long)
    Dim c, rng As Range
    
    Dim selectedEmirate As String, selectedPlaceOfVisaIssuance As String
    selectedEmirate = ""
    selectedPlaceOfVisaIssuance = ""
        
    ' G-SEC CHANGES: PLAN CATEGORY WILL BE VISIBLE NOW FOR ADBP ALSO
    ' THEREFORE MOVED BLOW CODE OUTSIDE AS IT'S COMMON FOR ALL NOW
    'VALIDATE PLAN CATEGORY - ONLY FOR CUSTOMER SHEET AS COLUMN WILL BE HIDDEN IN DCTM/PROD SHEET
'    If GetCurrentSheetFormat = CUSTOMER Then
'        If Len(Trim(Cells(rowIndex, colPlanCategory).Text)) = 0 Then
'            Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Empty")
'        Else
'            Set rng = Range("PlanCategories")
'            Set c = rng.Find(what:=Cells(rowIndex, colPlanCategory).Text, LookIn:=xlValues, lookat:=xlWhole)
'            If c Is Nothing Then Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Invalid plan category")
'        End If
'    End If

    ' FOR LUHN'S ALGORITHM BOTH ID-TYPE AND EMIRATES-ID COLUMNS SHOULD HAVE VALUES
    ' ID-TYPE COLUMN CAN HAVE EMIRATES ID OR APPLICATION NUMBER. ALGO SHOULD BE APPLIED IF ITS EMIRATES ID
    Dim emiratesIDHasError As Boolean
    emiratesIDHasError = False
    
    '*************** National Id Type validation ****************
    If Len(Trim(Cells(rowIndex, colNationalIdType).Text)) = 0 Then
      Cells(rowIndex, colNationalIdType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalIdType), "Empty")
      emiratesIDHasError = True
    ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("EIDType", Trim(Cells(rowIndex, colNationalIdType).Text)) Then
        Cells(rowIndex, colNationalIdType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalIdType), "Invalid National ID Type")
        emiratesIDHasError = True
    End If
    
    
    '*************National Identity********************************
    If Len(Trim(Cells(rowIndex, colNationalId).Text)) = 0 Then
        Cells(rowIndex, colNationalId).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalId), "Empty")
        emiratesIDHasError = True
    Else
        'FOR EMIRATES ID LENGTH SHOULD BE LESS THAN 15
        'FOR APPLICATION NUMBER LENGTH SHOULD BE LESS THAN 30
        If UCase(Trim(Cells(rowIndex, colNationalIdType).Text)) = "EMIRATES ID" Then
            
            If Len(Cells(rowIndex, colNationalId).Value) > 15 Then
                Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colNationalId), "Length > 15")
                
                emiratesIDHasError = True
            End If
        Else
            If Len(Cells(rowIndex, colNationalId).Value) > 30 Then
                Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colNationalId), "Length > 30")
                
                emiratesIDHasError = True
            End If
        End If
    End If
    
    ' APPLY LUHN'S ALGORITHM IF REQUIRED COLUMNS HAS PROPER VALUES
    If (Not emiratesIDHasError) And UCase(Trim(Cells(rowIndex, colNationalIdType).Text)) = "EMIRATES ID" Then
        If Not HelperFunctions.ValidateEID(Trim(Cells(rowIndex, colNationalId).Text)) Then
            Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(rowIndex, colNationalId), "Invalid Emirates ID")
        End If
    End If
    
    
    Select Case getCurrentSheetPlanType
        Case EBP
            
            '*************** Emirate validation ****************
            If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
            Else
                Set rng = Range("EmiratesList")
                Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then
                    Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                Else
                    selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                End If
            End If
                
                
            '*************** Residential Location validation ****************
            If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
            Else
                
                ' DISPLAY ERROR MESSAGE ON RESIDENTIAL LOCATION IF EMIRATE HAS ERROR
                ' AS BOTH ARE CASCADING DROPDOWNS
                If selectedEmirate = "" Then
                   Set rng = Nothing
                Else
                    Set rng = Range(selectedEmirate)
                End If
                
                
                If rng Is Nothing Then
                    Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                Else
                    Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                    If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                End If
            End If
           
                 
            'WORK LOCATION & COMMISSION SHOULD BE OPTIONAL FOR DEPENDENTS
            If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
            
                '*************** Work Location validation ****************
                If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                    Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                Else
                    Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                    If rng Is Nothing Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    Else
                        Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                    
                    'Set rng = Range("UAECityList")
                    'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                    'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                End If
                
                
                '***************** Commission Validation *****************
                If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                    Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                     Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                End If
            End If
            
        
            '************************** Empty Passport Number************
            If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
    
            'IN CASE OF DCTM ERROR CHECK, PLAN COLUMN SHOULD BE CHECKED FOR PREVIOUS INSURANCE COMPANY OTHERWISE
            'PLAN CATEGORY WILL BE USED FOR THE CHECKING OF PREVIOUS INSURANCE COMPANY AS PLAN WILL BE
            Dim tmpColIndex As String
            If chkMat.Visible Then
                tmpColIndex = colPlan
            Else
                tmpColIndex = colPlanCategory
            End If
            
            '*************** Previous Insurance Coverage validation ****************
            If Len(Trim(Cells(rowIndex, colPreviousInsCoverage).Text)) = 0 Then
                Cells(rowIndex, colPreviousInsCoverage).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colPreviousInsCoverage), "Empty")
            ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("YesNo", Cells(rowIndex, colPreviousInsCoverage).Text) Then
                Cells(rowIndex, colPreviousInsCoverage).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colPreviousInsCoverage), "Invalid Previous Insurance Coverage Value")
            ElseIf Trim(Cells(rowIndex, colPreviousInsCoverage).Text) = "Y" Then
                If InStr(1, Cells(rowIndex, tmpColIndex).Text, "WP") Then
                    Cells(rowIndex, tmpColIndex).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, tmpColIndex), "Waiting Period plan is selected for member with previous insurance")
                End If
            ElseIf Trim(Cells(rowIndex, colPreviousInsCoverage).Text) = "N" Then
                If InStr(1, Cells(rowIndex, tmpColIndex).Text, "WP") = False Then
                    Cells(rowIndex, tmpColIndex).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, tmpColIndex), "No Waiting Period plan is selected for member without previous insurance")
                End If
            End If
               
           'PMG1236  - Previous Gross Salary column will be hidden always and will have default Y (yes) value
           'Ref: Shiyas - 30-08-2015
            '*************** Gross Salary validation ****************
            'If Len(Trim(Cells(rowIndex, "bb").Text)) = 0 Then
            '    Cells(rowIndex, "bb").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, "bb"), "Empty")
            'ElseIf Cells(rowIndex, "bb") <> "Y" Then
            '     Cells(rowIndex, "bb").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, "bb"), "Only employees earning a gross (total) monthly salary of AED 4,000 or less are eligible for the Essential Benefits Plan.")
            'End If
            
            
            '*************** Visa Number validation ****************
            If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
              Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
            End If
            
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EBP)
            
            'G-SEC CHANGES: MOVED BELOW CHECK OUTSIDE SWITCH BLOCK AS ITS COMMON
            'VALIDATE PLAN CATEGORY - ONLY FOR CUSTOMER SHEET AS COLUMN WILL BE HIDDEN IN DCTM/PROD SHEET
            If GetCurrentSheetFormat = CUSTOMER Then
                If Len(Trim(Cells(rowIndex, colPlanCategory).Text)) = 0 Then
                    Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Empty")
                Else
                    Set rng = Range("PlanCategories")
                    Set c = rng.Find(what:=Cells(rowIndex, colPlanCategory).Text, LookIn:=xlValues, lookat:=xlWhole)
                    If c Is Nothing Then Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Invalid plan category")
                End If
            End If
            
            
            '************************** Empty Contact Number************
            If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colTelephone1), "Empty")
            
            'SLO1383: SALARY BAND WILL BE ENTERED MANUALLY IN CASE OF EBP & EP
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EBP)
            
            '*************** Salary Band validation ****************
            If Len(Trim(Cells(rowIndex, colSalaryBand).Text)) = 0 Then
                Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSalaryBand), "Empty")
            Else
                Set rng = Range("SalaryBandList")
                Set c = rng.Find(what:=Cells(rowIndex, colSalaryBand).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                
                If c Is Nothing Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                ElseIf IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) And _
                        (UCase(Trim(Cells(rowIndex, colSalaryBand).Text)) = "NO SALARY") Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                End If
            End If
            
            '*************** Sponsor UID Type validation ****************
            If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
            Else
                Set rng = Range("UIDTypeList")
                Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
            End If
            
            '*************** Sponsor UID validation ****************
            If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
            End If
            
        Case ADBP
            'VALIDATE COMMISSION/PASSPORT/SPONSOR UID TYPE/SPONSOR UID/EMIRATE/RESIDENT LOC/WORK LOC IF PLACE OF VISA ISSUANCE IS DUBAI ONLY
            'DUBAI --> dubai ARE TWO DIFFERENT VALUES
            If DamanGlobal.ItemExistsInNamedRange_MatchCase("PlaceOfVisaList", Cells(rowIndex, colPlaceOfVisaIssue).Text) Then
            
                If UCase(Cells(rowIndex, colPlaceOfVisaIssue).Text) = "DUBAI" Then
                
                    '*************** Emirate validation ****************
                    If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                        Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
                    Else
                        Set rng = Range("EmiratesList")
                        Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then
                            Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                            errCnt = errCnt + 1
                            Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                        Else
                            selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                        End If
                    End If
                    
                        
                    '*************** Residential Location validation ****************
                    If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                        Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
                    Else
                        
                        ' DISPLAY ERROR MESSAGE ON RESIDENTIAL LOCATION IF EMIRATE HAS ERROR
                        ' AS BOTH ARE CASCADING DROPDOWNS
                        If selectedEmirate = "" Then
                           Set rng = Nothing
                        Else
                            Set rng = Range(selectedEmirate)
                        End If
                        
                        If rng Is Nothing Then
                            Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        Else
                            Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                            If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        End If
                    End If
                    
                    'WORK LOCATION & COMMISSION SHOULD BE OPTIONAL FOR DEPENDENTS
                    If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                    
                        '*************** Work Location validation ****************
                        If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                            Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                        Else
                            Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                            If rng Is Nothing Then
                                Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            Else
                                Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                                If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            End If
                            
                            'Set rng = Range("UAECityList")
                            'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                            'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                        End If
                        
                        
                        '***************** Commission Validation *****************
                        If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                            Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                        ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                             Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                        End If
                    End If
                    
                    
                    '************************** Empty Passport Number************
                    If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
                    
                    '*************** Visa Number validation ****************
                    If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
                      Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
                    End If
                    
                    '************************** Empty Contact Number************
                    If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then
                        
                        Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46
                        errCnt = errCnt + 1
                        Call addComm(Cells(rowIndex, colTelephone1), "Empty")
                        
                    End If
                    
                    '*************** Sponsor UID Type validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
                    Else
                        Set rng = Range("UIDTypeList")
                        Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
                    End If
                    
                    '*************** Sponsor UID validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
                    End If
                    
                    ' CALCULATE SALARY BAND
                    'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, ADBP)
                ElseIf Len(Trim(Cells(rowIndex, colWorkLoc).Text)) > 0 Then
                    'REGARDLESS OF "PLACE OF VISA ISSUANCE" OR MANDATORY, IF WORK LOCATION HAS ANY VALUE THEN IT SHOULD BE VALID
                    If Not DamanGlobal.ItemExistsInNamedRange_MatchCase(Cells(rowIndex, colPlaceOfVisaIssue).Text, Cells(rowIndex, colWorkLoc).Text) Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                End If
            End If
            
            
            ' CALCULATE SALARY BAND
            Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, ADBP)
        
            'SLO1383: GROSS SALARY COLUMN WILL BE VISIBLE IN ADBP ONLY: CHECK HAS BEEN MOVED FROM GENERIC ERROR CHECK BLOCK TO ADBP BLOCK ONLY
            'GROSS SALARY IS OPTIONAL FOR DEPENDENTS
            'ACCOMMODATION VALIDATION SHOULD BE SKIPPED FOR DEPENDENTS
            If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                
                '************************** Gross Salary Validation************
                If Len(Trim(Cells(rowIndex, colGrossSalary).Text)) = 0 Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Empty")
                ElseIf Not IsNumeric(Trim(Cells(rowIndex, colGrossSalary).Text)) Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Invalid Value")
                ElseIf ((CLng(Trim(Cells(rowIndex, colGrossSalary).Text)) > ADBP_MAX_INCOME_LIMIT) Or ((CLng(Trim(Cells(rowIndex, colGrossSalary).Text)) > ADBP_MAX_INCOME_LIMIT_WITH_ACCO And UCase(Trim(Cells(rowIndex, colAccommodationProvided))) = "Y"))) Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Member is not eligible for Basic plan. Please remove from the list")
                End If
                
                '***************** Accommodation Provided Validation *****************
                If Len(Trim(Cells(rowIndex, colAccommodationProvided).Text)) = 0 Then
                    Cells(rowIndex, colAccommodationProvided).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colAccommodationProvided), "Empty")
                ElseIf Cells(rowIndex, colAccommodationProvided) <> "Y" And Cells(rowIndex, colAccommodationProvided) <> "N" Then
                     Cells(rowIndex, colAccommodationProvided).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colAccommodationProvided), "Invalid")
                End If
            End If
            
            'G-SEC CHANGES: VALIDATE MAT/NO-MAT CATEGORY FOR AD BASIC
'            If (Cells(rowIndex, colPlanCategory).Interior.ColorIndex <> 46) And _
'                (Cells(rowIndex, colDateOfBirth).Interior.ColorIndex <> 46) And _
'                (Cells(rowIndex, colPolicyEffectiveDate).Interior.ColorIndex <> 46) And _
'                (Cells(rowIndex, colMaritalStatus).Interior.ColorIndex <> 46) And _
'                (Cells(rowIndex, colGender).Interior.ColorIndex <> 46) Then
'
'                ' MATERNITY (M) OR NOT-MATERNITY (N)
'                Dim selectedPlanCategory As String
'                selectedPlanCategory = FindValFromRange(Cells(rowIndex, colPlanCategory).Text, Range("PlansList"), 3)
'
'                ' IF GENDER IS MALE
'                If Cells(rowIndex, colGender).Text = "M" Then
'                    ' MALE GENDER BLOCK
'
'                    ' RAISE ERROR IF GENDER IS MALE AND PLAN CATEGORY IS MATERNITY
'                    If selectedPlanCategory = "M" Then
'                        ErrCnt = ErrCnt + 1
'                        Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46
'
'                        Call addComm(Cells(rowIndex, colPlanCategory), "Maternity product is selected for male")
'                    End If
'                Else
'                    ' FEMALE GENDER BLOCK
'
'                    ' IF MARITAL STATUS IS SINGLE
'                    If Cells(rowIndex, colMaritalStatus).Text = "S" Then
'                        ' SINGLE FEMALE BLOCK
'
'                        ' IF PLAN CATEGORY IS MATERNITY (i-e M)
'                        If selectedPlanCategory = "M" Then
'                            ErrCnt = ErrCnt + 1
'                            Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46
'
'                            Call addComm(Cells(rowIndex, colPlanCategory), "Maternity product is selected for unmarried female")
'                        End If
'                    Else
'                        ' MARRIED FEMALE BLOCK
'
'                        ' AGE CALCULATION
'                        Dim femaleAge As Integer
'                        femaleAge = CalcAge(Cells(rowIndex, colDateOfBirth).Text, Cells(rowIndex, colPolicyEffectiveDate).Text)
'
'                        If femaleAge < 18 And selectedPlanCategory = "M" Then
'                            ErrCnt = ErrCnt + 1
'                            Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46
'
'                            Call addComm(Cells(rowIndex, colPlanCategory), "Maternity product is selected for female below 18 years old")
'                        End If
'                    End If
'                End If
'            End If
        Case EP
            'VALIDATE COMMISSION/PASSPORT/SPONSOR UID TYPE/SPONSOR UID/EMIRATE/RESIDENT LOC/WORK LOC IF PLACE OF VISA ISSUANCE IS DUBAI ONLY
            If DamanGlobal.ItemExistsInNamedRange_MatchCase("PlaceOfVisaList", Cells(rowIndex, colPlaceOfVisaIssue).Text) Then
                
                If UCase(Cells(rowIndex, colPlaceOfVisaIssue).Text) = "DUBAI" Then
                                
                    '*************** Emirate validation ****************
                    If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                        Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
                    Else
                        Set rng = Range("EmiratesList")
                        Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then
                            Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                            errCnt = errCnt + 1
                            Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                        Else
                            selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                        End If
                    End If
                    
                        
                    '*************** Residential Location validation ****************
                    If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                        Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
                    Else
                        ' DISPLAY ERROR MESSAGE ON RESIDENTIAL LOCATION IF EMIRATE HAS ERROR
                        ' AS BOTH ARE CASCADING DROPDOWNS
                        If selectedEmirate = "" Then
                           Set rng = Nothing
                        Else
                            Set rng = Range(selectedEmirate)
                        End If
                        
                        If rng Is Nothing Then
                            Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        Else
                            Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                            If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        End If
                    End If
                    
                    
                    'WORK LOCATION SHOULD BE OPTIONAL FOR DEPENDENTS
                    If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                        '*************** Work Location validation ****************
                        If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                            Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                        Else
                            Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                            If rng Is Nothing Then
                                Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            Else
                                Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                                If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            End If
                            
                            'Set rng = Range("UAECityList")
                            'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                            'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                        End If
                        
                        
                        '***************** Commission Validation *****************
                        If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                            Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                        ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                             Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                        End If
                    End If
                    
                    
                    '*************** Visa Number validation ****************
                    If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
                      Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
                    End If
                    
                    '************************** Empty Passport Number************
                    If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
                    
                    
                    '************************** Empty Contact Number************
                    If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then
    
                        Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46
                        errCnt = errCnt + 1
                        Call addComm(Cells(rowIndex, colTelephone1), "Empty")
                    Else
                        
                    End If
                    
                    '*************** Sponsor UID Type validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
                    Else
                        Set rng = Range("UIDTypeList")
                        Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
                    End If
                    
                    '*************** Sponsor UID validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
                    End If
                ElseIf Len(Trim(Cells(rowIndex, colWorkLoc).Text)) > 0 Then
                    
                    'REGARDLESS OF "PLACE OF VISA ISSUANCE" OR MANDATORY, IF WORK LOCATION HAS ANY VALUE THEN IT SHOULD BE VALID
                    If Not DamanGlobal.ItemExistsInNamedRange_MatchCase(Cells(rowIndex, colPlaceOfVisaIssue).Text, Cells(rowIndex, colWorkLoc).Text) Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                End If
                
                ' CALCULATE SALARY BAND
                'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EP)
            End If
            
                        
            If IsDate(Trim(Cells(rowIndex, colDateOfBirth).Text)) And IsDate(Trim(Cells(rowIndex, colPolicyEffectiveDate).Text)) Then
                Cells(rowIndex, colAge) = DateDiff("yyyy", CDate(Trim(Cells(rowIndex, colDateOfBirth).Text)), CDate(Trim(Cells(rowIndex, colPolicyEffectiveDate).Text)))
            End If
            
            
            ' SLO1383: SALARY BAND WILL BE ENTERED MANUALLY IN CASE OF EBP & EP
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EP)
            
            '*************** Salary Band validation ****************
            If Len(Trim(Cells(rowIndex, colSalaryBand).Text)) = 0 Then
                
                'No Salary - SHOULD BE SET AUTOMATICALLY FOR DEDEPENDENTS IN CASE IF IT IS EMPTY
                If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSalaryBand), "Empty")
                Else
                    Cells(rowIndex, colSalaryBand) = "No Salary"
                End If
                
            Else
                Set rng = Range("SalaryBandList")
                Set c = rng.Find(what:=Cells(rowIndex, colSalaryBand).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                ElseIf IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) And _
                        (UCase(Trim(Cells(rowIndex, colSalaryBand).Text)) = "NO SALARY") Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                End If
            End If
            
            'G-SEC CHANGES: MOVED CODE OUTSIDE SWITCH BLOCK AS ITS COMMON
            'VALIDATE PLAN CATEGORY - ONLY FOR CUSTOMER SHEET AS COLUMN WILL BE HIDDEN IN DCTM/PROD SHEET
            If GetCurrentSheetFormat = CUSTOMER Then
                If Len(Trim(Cells(rowIndex, colPlanCategory).Text)) = 0 Then
                    Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Empty")
                Else
                    Set rng = Range("PlanCategories")
                    Set c = rng.Find(what:=Cells(rowIndex, colPlanCategory).Text, LookIn:=xlValues, lookat:=xlWhole)
                    If c Is Nothing Then Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Invalid plan category")
                End If
            End If
    End Select
    
    
    
    Set rng = Nothing
    Set c = Nothing
End Function




Private Function CalcAge(ByVal dob As String, ByVal rdate As String) As Integer
Dim dt, rdt, errst As String
dt = Format(dob, "dd/MM/yyyy")
rdt = Format(rdate, "dd/MM/yyyy")
Dim age As Integer
                    age = DateDiff("yyyy", dt, rdt)
                    
                        If age < 0 Then errst = "err"
                        If Month(dt) > Month(rdt) Then
                            If age = 0 Then errst = "err"
                            age = age - 1
                        ElseIf Month(dt) < Month(rdt) Then
                            'yr = 0
                        ElseIf Day(dt) > Day(rdt) Then
                            If age = 0 Then errst = "err"
                        age = age - 1
                        Else
                    
                        End If
                            CalcAge = age
End Function

Private Sub addComm(ds As Range, Cmnt As String)
Dim tmpCmnt As String
If Not ds.Comment Is Nothing Then
    tmpCmnt = ds.Comment.Text
    ds.Comment.Delete
End If
If tmpCmnt <> "" And tmpCmnt <> Cmnt Then
    ds.AddComment (tmpCmnt & vbNewLine & Cmnt)
Else
    ds.AddComment (Cmnt)
End If
End Sub


Private Function DateCheck(ByVal dtStr As String, Optional FutDate As Boolean = False) As Boolean
Dim isValidDate As Boolean
If IsDate(dtStr) Then
        Dim dt() As Integer
        Dim txt As String
        Dim cnt, a As Integer
        
        txt = Trim(dtStr)
    
        cnt = 0
        Do While (1)
            a = InStr(1, txt, "/")
            If a > 0 Then
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(Mid(txt, 1, a - 1))
                txt = Mid(txt, a + 1, Len(txt))
            Else
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(txt)
                Exit Do
            End If
        Loop
        
        If cnt = 3 Then
            If dt(0) = 0 Or dt(0) > 31 Then
                isValidDate = False
            ElseIf dt(1) = 0 Or dt(1) > 12 Then
                isValidDate = False
            ElseIf dt(2) < 1850 Or Len(Trim(str(dt(2)))) <> 4 Or (FutDate = False And dt(2) > Year(Date)) Then
                isValidDate = False
            Else
                Dim dtDate As Date
                dtDate = dtStr
                If DateDiff("d", Now, dtDate) > 0 And FutDate = False Then
                    isValidDate = False
                Else
                    isValidDate = True
                End If
            End If
        Else
            isValidDate = False
        End If
Else
    isValidDate = False
End If
DateCheck = isValidDate
End Function


Private Sub UserForm_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal State As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)

End Sub

Private Sub UserForm_Initialize()
lblVersion.Caption = getSheetVersion
    Dim effDate As String
    Select Case GetCurrentSheetFormat
        Case SheetFormat.CUSTOMER
            chkMat.Visible = False
            chkPLNAC.Visible = False
            effDate = Cells((getMemberCount + 2), COL_POLICYEFFECTIVEDATE).Text
        Case SheetFormat.DCTM
            chkMat.Visible = True
            chkPLNAC.Visible = True
            effDate = Cells((getMemberCount + 1), COL_POLICYEFFECTIVEDATE_DCTM).Text
        Case SheetFormat.PRODUCTION
            chkMat.Visible = True
            chkPLNAC.Visible = True
            effDate = Cells((getMemberCount + 1), COL_POLICYEFFECTIVEDATE_DCTM).Text
    End Select
    

    'If DateCheck(effDate, True) Then txtEffDate = effDate
    txtNoOfMembers = getMemberCount
    txtNoOfMembers.SetFocus
End Sub







Attribute VB_Name = "frmProdErrCheck"
Attribute VB_Base = "0{0B954A7C-7942-4BAC-9FDD-C24BA5264808}{B7CF16E7-1392-474C-91A0-552E5175D575}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private colGrossSalary As String, colCommission As String, colEmirate As String, colResidentialLoc As String, colWorkLoc As String, colPlaceOfVisaIssue As String, ColPassportNo As String, colPreviousInsCoverage As String, colNationalIdType As String, colVisaUnifiedNo As String, colSalaryBand As String, colPlanCategory As String, colAccommodationProvided As String, colDateOfBirth As String, colPolicyEffectiveDate As String, colAge As String, colMacroRunSuccessfully As String, colMemberRefNo As String, colFirstName As String, colMiddleName As String, colLastName As String, colArabicFirstName As String, colArabicMiddleName As String, colArabicLastName As String, colGender As String, colRelation As String, colPrincipalRefNo As String, colStaffNo As String, colMaritalStatus As String, colNationality As String, colCountryofResidency As String, colCity As String, colDepartment As String, colSys1 As String, colSys2 As String, colPlan As String, colNationalId As String, colOccupation As String, _
colHiddenGrossSalary As String, colTelephone1 As String, colExternalRefNo_Prod As String, colEmail As String, colExternalPolicyRef As String, colSponsorUIDType As String, colSponsorUID As String

Private Sub cmdChangeFormat_Click()
'   Dim rng1 As Range
'    Set rng1 = GetTableRow("tblProdRelationList", 1, "Spouse")

    If UCase(Trim(shtMemmber.Cells(1, COL_LASTNAME_PROD).Value)) <> "LAST NAME" Or UCase(Trim(shtMemmber.Cells(1, "ag").Value)) <> "NATIONALITY" Then MsgBox "Wrong format", vbCritical: Exit Sub

    Dim MemCnt As Long
    MemCnt = val(txtNoOfMembers)
    If MemCnt <= 0 Then MsgBox ("Invalid Member Count entered"), vbCritical, AppName: Exit Sub
    Dim errCnt, SuccCnt As Long
    Dim rng As Range, i As Integer, c As Range, searchText As String, colPlanKeyIndex As Integer, colPlanValueIndex As Integer, colKeyIndex As Integer, colValueIndex

    ActiveSheet.Unprotect ("itdaman")
    Application.EnableEvents = False
    
    If rbtnDescToCode.Value Then
        colKeyIndex = 1
        colValueIndex = 2
        colPlanKeyIndex = 1
        colPlanValueIndex = 4
    Else
        colKeyIndex = 2
        colValueIndex = 1
        colPlanKeyIndex = 4
        colPlanValueIndex = 1
    End If

    For i = 2 To MemCnt + 1
    
        'REPLACE RELATION DESC WITH CODE
        Set c = GetTableRow("tblProdRelationList", colKeyIndex, shtMemmber.Cells(i, COL_RELATION_DCTM).Text)
        If Not c Is Nothing Then
                shtMemmber.Cells(i, COL_RELATION_DCTM) = c.Cells(1, colValueIndex).Text
                SuccCnt = SuccCnt + 1
        Else
           errCnt = errCnt + 1
        End If

        'REPLACE PLAN DESC WITH CODE
        Set c = GetTableRow("tblProdPlanList", colPlanKeyIndex, shtMemmber.Cells(i, COL_PLAN_DCTM).Text)
    
        If Not c Is Nothing Then
            shtMemmber.Cells(i, COL_PLAN_DCTM) = c.Cells(1, colPlanValueIndex).Text
            SuccCnt = SuccCnt + 1
        Else
            errCnt = errCnt + 1
        End If

        'REPLACE NATIONALITY DESC WITH CODE
        Set c = GetTableRow("tblCountryList", colKeyIndex, shtMemmber.Cells(i, COL_NATIONALITY_DCTM).Text)
        If Not c Is Nothing Then
                shtMemmber.Cells(i, COL_NATIONALITY_DCTM) = c.Cells(1, colValueIndex).Text
                SuccCnt = SuccCnt + 1
        Else
            errCnt = errCnt + 1
        End If

        'REPLACE COUNTRY OF RESIDENCE WITH CODE
        Set c = GetTableRow("tblCountryList", colKeyIndex, shtMemmber.Cells(i, COL_COUNTRYOFRESIDENCY_DCTM).Text)
        If Not c Is Nothing Then
                shtMemmber.Cells(i, COL_COUNTRYOFRESIDENCY_DCTM) = c.Cells(1, colValueIndex).Text
                SuccCnt = SuccCnt + 1
        Else
            errCnt = errCnt + 1
        End If

        'REPLACE CITY NAME WITH CODE
        Set c = GetTableRow("tblCityList", colKeyIndex, shtMemmber.Cells(i, COL_CITY_DCTM).Text)
        If Not c Is Nothing Then
                Cells(i, COL_CITY_DCTM) = c.Cells(1, colValueIndex).Text
                SuccCnt = SuccCnt + 1
        Else
            errCnt = errCnt + 1
        End If
        
        
        'REPLACE OCCUPATION WITH CODE
        'OCCUPUATION IS OPTIONAL NOW FOR ENHANCED AND ABUDHABI BASIC, THEREFORE SKIPPING THE CONVERSION IF ITS EMPTY
        If Trim(shtMemmber.Cells(i, COL_OCCUPATION_DCTM).Text) <> "" Then
            Set c = GetTableRow("tblOccupationList", colKeyIndex, shtMemmber.Cells(i, COL_OCCUPATION_DCTM).Text)
            If Not c Is Nothing Then
                    shtMemmber.Cells(i, COL_OCCUPATION_DCTM) = c.Cells(1, colValueIndex).Text
                    SuccCnt = SuccCnt + 1
            Else
                errCnt = errCnt + 1
            End If
        End If
        
    Next i
    

    Application.EnableEvents = True
    ActiveSheet.Protect password:="itdaman", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowFormattingCells:=True, AllowFormattingRows:=True, _
            AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
    'Sheets("Member Details").Range("A1:CE" & MemCnt).Rows.AutoFit

    If errCnt > 0 Then
        MsgBox "Formating was not completed successfully" & vbNewLine & errCnt & " conversion failed Out of " & SuccCnt + errCnt, vbCritical, AppName
    Else
        MsgBox "Formating completed successfull", vbInformation, AppName
    End If
End Sub

Private Sub cmdExportCustomFields_Click()
Dim strOut As String
strOut = CreateMemberCustomFile(True)
If strOut <> "" Then MsgBox "Export has been completed...", vbInformation, msgTitle
End Sub



Function WriteMemberFile(clm, MemCnt As Long, isOffline As Boolean) As String
   On Error GoTo errr
   ' Dimension variables to be used in this function.
   Dim CurFile As String
   Dim savefilename
   Dim CellText As String
   Dim RowNum As Long
   Dim ColNum As Long
   Dim FNum As Integer
   Dim totalRows As Double
   Dim TotalCols As Double
      
   
   ' Show Save As dialog box with the .TXT file name as the default.
   ' Test to see what kind of system this macro is being run on.
   If Left(Application.OperatingSystem, 3) = "Win" Then
      savefilename = Application.GetSaveAsFilename(CurFile, _
      "Text Delimited (*.txt), *.txt", , "Text Delimited Exporter")
   Else
       savefilename = Application.GetSaveAsFilename(CurFile, _
      "TEXT", , "Text Delimited Exporter")
   End If
   
   ' Check to see if Cancel was clicked.
      If savefilename = False Then
         WriteMemberFile = "Canceled"
         Exit Function
      End If
   ' Obtain the next free file number.
      FNum = FreeFile()
   
   ' Open the selected file name for data output.
      Open savefilename For Output As #FNum
   
   ' Store the total number of rows and columns to variables.
      totalRows = MemCnt + 1
      TotalCols = UBound(clm(0))
   
   ' Loop through every cell, from left to right and top to bottom.
      For RowNum = 2 To totalRows
         For ColNum = 0 To TotalCols
            Dim Xlcol As Integer
            Xlcol = clm(0)(ColNum)
            Dim txt As String
            If Not isOffline Then
                If (Xlcol = 1 Or Xlcol = 2 Or Xlcol = 21 Or Xlcol = 23 Or Xlcol = 25 Or Xlcol = 55 Or Xlcol = 62) Then
                    txt = shtMemmber.Cells(RowNum, Xlcol)
                Else
                    txt = ""
                End If
            Else
                txt = shtMemmber.Cells(RowNum, Xlcol)
            End If
            
            Dim ColWidth As Integer
            ColWidth = clm(1)(ColNum)
            
            ' Store the current cells contents to a variable.
            CellText = txt & Space(ColWidth - Len(txt))

            ' Write the contents to the file.
            ' With or without quotation marks around the cell information.
            Print #FNum, CellText;
            
            ' Update the status bar with the progress.
            Application.StatusBar = Format((((RowNum - 1) * TotalCols) _
               + ColNum) / (totalRows * TotalCols), "0%") & " Completed. " & RowNum & "-" & ColNum
            'DoEvents
        ' Loop to the next column.
         Next ColNum
        ' Add a linefeed character at the end of each row.
         If RowNum <> totalRows Then Print #FNum, ""
        ' Loop to the next row.
      Next RowNum
   
   ' Close the .prn file.
      Close #FNum
   
   ' Reset the status bar.
      Application.StatusBar = False
      WriteMemberFile = "Exported"
      GoTo errend
errr:

MsgBox "Error found at Col " & ColNum & ", Row " & RowNum & vbNewLine & Err.Description, vbCritical, AppName + "-Export Text"
WriteMemberFile = "Cancelled"
errend:
    Close #FNum
End Function

Private Sub cmdExportTextFile_Click()
Dim strOut As String
strOut = CreateMemberStandardFile(True)
If strOut <> "" Then MsgBox "Export has been completed...", vbInformation, msgTitle
End Sub


Private Sub cmdGo_Click()
    'DCTM
        colExternalPolicyRef = "A"
        colMemberRefNo = "B"
        colFirstName = "C"
        colMiddleName = "D"
        colLastName = "E"
        colNationalId = "F"
        colDateOfBirth = "G"
        colPolicyEffectiveDate = "J"
        colGender = "K"
        colRelation = "L"
        colPrincipalRefNo = "N"
        colStaffNo = "O"
        colPlan = "P"
        colMaritalStatus = "Q"
        colTelephone1 = "U"
        colArabicFirstName = "AC"
        colArabicMiddleName = "AD"
        colArabicLastName = "AE"
        colNationality = "AG"
        colDepartment = "AH"
        colCountryofResidency = "AI"
        colOccupation = "AJ"
        colCity = "AN"
        colMacroRunSuccessfully = "BK"
        colSys1 = "CB"
        colSys2 = "CC"
        colPreviousInsCoverage = "BN"
        colNationalIdType = "BP"
        colVisaUnifiedNo = "BQ"
        colGrossSalary = "BR"
        colCommission = "BS"
        colSalaryBand = "BT"
        ColPassportNo = "BU"
        colEmirate = "BJ"
        colResidentialLoc = "BV"
        colWorkLoc = "BW"
        colHiddenGrossSalary = "BO"
        colPlaceOfVisaIssue = "BX"
        colAccommodationProvided = "BY"
        colAge = "BZ"
        colPlanCategory = "CA"
        colSponsorUIDType = "CD"
        colSponsorUID = "CE"
        colEmail = COL_EMAIL_PROD
        
        Call ErrorCheck_DCTM
End Sub

Private Sub ErrorCheck_DCTM()
    Dim skipPlanChk As Boolean, sheetMemberDetails As Variant, rng As Range
    skipPlanChk = False ' ASSYST# 153533
    
    If UCase(Trim(Cells(1, colMiddleName).Value)) <> "MIDDLE NAME" Or UCase(Trim(Cells(1, colPlan).Value)) <> "PLAN" Then MsgBox "Wrong File Format", vbCritical: Exit Sub
    
    Dim i As Long, MemCnt, prevErrCnt, errCnt As Long, wrnCnt As Long
    Dim nm, c, D, fads
    Dim ans As String
    Dim femMat As Boolean
    Dim mat As String
    Dim MatPos, cp As Integer
    
    Dim StaffNoCorrection, StaffNoAutoFill, DeptAutoCorrection, PlanCorrection, ClassCorrection As Boolean
    StaffNoCorrection = chkSNAC.Value
    StaffNoAutoFill = chkSNAF.Value
    DeptAutoCorrection = chkDeptAC.Value
    PlanCorrection = chkPLNAC.Value
    ClassCorrection = chkClass.Value
    
    Dim ErrStr As String
    nm = txtNoOfMembers.Text
    MemCnt = val(nm)
    If MemCnt <= 0 Then ErrStr = ErrStr + "Invalid Member Count entered"
    
    'pEffDate = txtEffDate.Text
'    If pEffDate = "" Or Not DateCheck(pEffDate, True) Then
'        If ErrStr <> "" Then ErrStr = ErrStr + vbNewLine
'      ErrStr = ErrStr + "Invalid policy effective date enetered"
'    End If
    
    If ErrStr <> "" Then MsgBox "Please correct the following errors" + vbNewLine + ErrStr, vbCritical: Exit Sub
    
    'Range("J2:J" & (MemCnt + 1)).Cells = pEffDate
    
    femMat = chkMat.Value
    
    Set sheetMemberDetails = Sheets("Member Details")
    
    ActiveSheet.Unprotect ("itdaman")
    Application.EnableEvents = False
    '**************************Clearing the "Macros passed successfully" column. modified by Khallil***********
    sheetMemberDetails.Range(colMacroRunSuccessfully & ":" & colMacroRunSuccessfully).Clear
    Range(colSys1 & "1:" & colSys2 & (MemCnt + 1)).Clear    ' 2 BLANK CELLS
    sheetMemberDetails.Cells(1, colSys1) = shtListOfValues.ListObjects("tblMednextColumnConfig").DataBodyRange(80, 1)
    sheetMemberDetails.Cells(1, colSys2) = shtListOfValues.ListObjects("tblMednextColumnConfig").DataBodyRange(81, 1)
    
    sheetMemberDetails.Cells(1, colMacroRunSuccessfully) = shtListOfValues.ListObjects("tblMednextColumnConfig").DataBodyRange(63, 1)
    
    'SET COLOR CODING OF MACRO RUN SUCCESSFULLY, SYS1 AND SYS2
    Dim strTempRange As String: strTempRange = colMacroRunSuccessfully & "1:" & colSys2 & "1"
    
    sheetMemberDetails.Range(strTempRange).Font.Color = Cells(1, "AJ").Font.Color
    sheetMemberDetails.Range(strTempRange).Interior.ColorIndex = Cells(1, "AJ").Interior.ColorIndex
    sheetMemberDetails.Range(strTempRange).Font.name = Cells(1, "AJ").Font.name
    sheetMemberDetails.Range(strTempRange).VerticalAlignment = xlCenter

    If ActiveSheet.AutoFilterMode = True Then Selection.AutoFilter
    Range("A2:ce65536").ClearComments
    Range("A2:ce65536").Interior.ColorIndex = xlColorIndexNone
    
    ''Range("BA3:BD65536").ClearComments
    ''Range("BA3:BD65536").Interior.ColorIndex = xlColorIndexNone
    
    Dim StaffNo As Integer
    Dim PrincipalRefHolder() As String
    ReDim Preserve PrincipalRefHolder(0)    'CREATING DYNAMIC ARRAY WITH 1 ITEM
    
    If StaffNoAutoFill Then StaffNoCorrection = True
    
    Application.EnableEvents = False
    For i = 2 To MemCnt + 1
    
    '************************* empty external policy ref number ****************
    If Len(Trim(Cells(i, colExternalPolicyRef).Text)) = 0 Then Cells(i, colExternalPolicyRef).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colExternalPolicyRef), "Empty")
    
    '************************** empty/invalid member reference number, first name, last name
    If Len(Trim(Cells(i, colMemberRefNo).Text)) = 0 Then Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Empty")
    If Len(Trim(Cells(i, colFirstName).Text)) = 0 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colFirstName), "Empty")
    If Len(Trim(Cells(i, colLastName).Text)) = 0 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colLastName), "Empty")
    'If Len(Trim(Cells(i, "j").Text)) = 0 Then Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "e"), "Empty")
    
    '************************** empty/invalid gender validation*****************************
    If Len(Trim(Cells(i, colGender).Text)) = 0 Then
        Cells(i, colGender).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Call addComm(Cells(i, colGender), "Empty")
    Else
        Cells(i, colGender) = UCase(Cells(i, colGender).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colGender).Text <> "M" And Cells(i, colGender).Text <> "F" Then
            Cells(i, colGender).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colGender), "Invalid Value")
        End If
    End If
    
    '************************** empty/invalid relation validation*****************************
    If Len(Trim(Cells(i, colRelation).Text)) = 0 Then
        Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Empty")
    Else
        Set rng = Range("Relationlist")
        Set c = rng.Find(what:=Cells(i, colRelation).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colRelation), "Invalid Value")
    End If
    
    '************************** empty principal reference validation*****************************
    If Len(Trim(Cells(i, colPrincipalRefNo).Text)) = 0 Then
        Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        
        Call addComm(Cells(i, colPrincipalRefNo), "Empty")
    ElseIf (getCurrentSheetPlanType = ADBP) And (Not IsInArray(Trim(Cells(i, colPrincipalRefNo).Text), PrincipalRefHolder)) Then
        ' VALIDATE ADDITIONAL SPOUSE & CHILDREN
        ' PRINCIPAL REF NO WILL BE DUPLICATE AND VALIDATION ADDITIONAL SPOUSE SHOULD BE CALLED ONCE FOR EACH PRINCIPAL
        ' THEREFORE CREATED TEMP CONTAINER TO HOLD UNIQUE PRINCIPAL REF (i-e PrincipalRefHolder)
        Call ValidateAdditionalSpouse(Trim(Cells(i, colPrincipalRefNo).Text), errCnt)
                
        PrincipalRefHolder(UBound(PrincipalRefHolder)) = Trim(Cells(i, colPrincipalRefNo).Text)
        
        ReDim Preserve PrincipalRefHolder((UBound(PrincipalRefHolder) + 1)) 'REDEFINE ARRAY WITH ONE MORE ITEM
    End If
    
    '************************** empty staff number validation*****************************
    If StaffNoAutoFill Then
        If Cells(i, colRelation).Text = "Principal" Then StaffNo = StaffNo + 1: Cells(i, colStaffNo) = StaffNo ': ActiveSheet.Unprotect ("itdaman")
    End If
    If Len(Trim(Cells(i, colStaffNo).Text)) = 0 Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colStaffNo), "Empty")
    
    
    '************** Plan field check ***************
    If Cells(i, colPlan).Interior.ColorIndex <> 46 Then
        If Len(Trim(Cells(i, colPlan).Text)) = 0 Then
            Cells(i, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Empty")
        Else
    
            Set rng = Range("PlansList")
            Dim stt As String
            Set c = rng.Find(what:=Cells(i, colPlan).Text, LookIn:=xlValues, lookat:=xlWhole)
            If c Is Nothing Then
               skipPlanChk = True  ' ASSYST# 153533
                'Cells(i, "p").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "p"), "Invalid Plan")
            Else
                skipPlanChk = False  ' ASSYST# 153533
    
                If c.Cells(1, 2).Text = "" Or c.Cells(1, 3).Text = "" Then
                    Cells(i, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Plan details not found")
                Else
                    Cells(i, colSys1) = c.Cells(1, 2).Text ': ActiveSheet.Unprotect ("itdaman")
                    Cells(i, colSys2) = c.Cells(1, 3).Text ': ActiveSheet.Unprotect ("itdaman")
                End If
            End If
        End If
    End If
    
    
    '***************** marital status *****************
    If Len(Trim(Cells(i, colMaritalStatus).Text)) = 0 Then
        Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Empty")
    Else
        Cells(i, colMaritalStatus) = UCase(Cells(i, colMaritalStatus).Text) ': ActiveSheet.Unprotect ("itdaman")
        If Cells(i, colMaritalStatus).Text <> "M" And Cells(i, colMaritalStatus).Text <> "S" Then
            Cells(i, colMaritalStatus).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colMaritalStatus), "Invalid Value")
        ElseIf getCurrentSheetPlanType = ADBP Then
            If Cells(i, colGender).Text = "F" And Cells(i, colMaritalStatus).Text = "M" Then
                If CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) <= 18 Then
                    Cells(i, colMaritalStatus).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Warning!. Married female is less than or equal to 18 years")
                End If
            End If
        End If
    End If
    
    'If Len(Trim(Cells(i, "ac").Text)) = 0 Then Cells(i, "ac").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ac"), "Empty")
    'If Len(Trim(Cells(i, "ae").Text)) = 0 Then Cells(i, "ae").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "ae"), "Empty")
    
    '******************* Nationality ****************
    If Len(Trim(Cells(i, colNationality).Text)) = 0 Then
        Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colNationality).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colNationality).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colNationality), "Invalid Nationality")
    End If
    
    '******************* Country of recidency ****************
    If Len(Trim(Cells(i, colCountryofResidency).Text)) = 0 Then
        Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Empty")
    Else
        Set rng = Range("CountryList")
        Set c = rng.Find(what:=Cells(i, colCountryofResidency).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCountryofResidency).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCountryofResidency), "Invalid Value")
    End If
    
    
    If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colFirstName)) > 15 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Length > 15")
    If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colMiddleName)) > 15 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Length > 15")
    If Cells(i, colLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colLastName)) > 30 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Length > 30")
    
    'ARABIC NAMES WILL BE HIDDEN FOR OTHER PLAN TYPES
    If getCurrentSheetPlanType = ADBP Then
        If Len(Trim(Cells(i, colArabicFirstName).Text)) = 0 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicFirstName), "Empty")
        If Len(Trim(Cells(i, colArabicLastName).Text)) = 0 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colArabicLastName), "Empty")
        
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicFirstName)) > 15 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Length > 15")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicMiddleName)) > 15 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Length > 15")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then If Len(Cells(i, colArabicLastName)) > 30 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Length > 30")
        
        ' CHILD AGE SHOULD BE LESS THAN OR EQUAL TO 17 YEARS FOR ABU DHABI BASIC
        ' RELATION TYPE = CHILD
        If (Cells(i, colRelation).Interior.ColorIndex <> 46) And (UCase(Cells(i, colRelation).Text) = "CHILD") And (CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate)) >= 18) Then
            Cells(i, colRelation).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Cells(i, colRelation).AddComment ("Select 'Other Child' if age is 18 years or above")
        End If
    End If
    
    'English name total length 40
    If Len(Cells(i, colFirstName)) + Len(Cells(i, colMiddleName)) + Len(Cells(i, colLastName)) > 40 Then
        If Cells(i, colFirstName).Interior.ColorIndex <> 46 Then Cells(i, colFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colFirstName).AddComment ("Total Name Length> 40")
        If Cells(i, colMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colMiddleName).AddComment ("Total Name Length> 40")
        If Cells(i, colLastName).Interior.ColorIndex <> 46 Then Cells(i, colLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colLastName).AddComment ("Total Name Length> 40")
    End If
    
    'Arabic name total length 60
    If Len(Cells(i, colArabicFirstName)) + Len(Cells(i, colArabicMiddleName)) + Len(Cells(i, colArabicLastName)) > 60 Then
        If Cells(i, colArabicFirstName).Interior.ColorIndex <> 46 Then Cells(i, colArabicFirstName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicFirstName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicMiddleName).Interior.ColorIndex <> 46 Then Cells(i, colArabicMiddleName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicMiddleName).AddComment ("Total Name Length> 60")
        If Cells(i, colArabicLastName).Interior.ColorIndex <> 46 Then Cells(i, colArabicLastName).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colArabicLastName).AddComment ("Total Name Length> 60")
    End If
        
    '********************* m.ref duplicates **************************
    If Cells(i, colMemberRefNo).Interior.ColorIndex <> 46 Then
        With Range(colMemberRefNo & "2:" & colMemberRefNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colMemberRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
             If Not c Is Nothing Then fads = c.Address
            
            Do While 1
            If Not c Is Nothing Then
                If c.Row <> i Then
                    Cells(i, colMemberRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1
                    Cells(i, colMemberRefNo).AddComment ("Duplicated - row#" & c.Row)
                    Exit Do
                End If
            End If
            Set c = .FindNext(c)
            If c.Address = fads Then Exit Do
            Loop
        End With
        Set c = Nothing
    End If
    
    '******************** DOB validations **************************
    If Len(Trim(Cells(i, colDateOfBirth).Text)) = 0 Then
        Cells(i, colDateOfBirth).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colDateOfBirth).AddComment ("Empty")
    Else
        Cells(i, colDateOfBirth) = Replace(Cells(i, colDateOfBirth).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colDateOfBirth).Text) Then Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
    End If
    
    
    If Cells(i, colDateOfBirth).Interior.ColorIndex <> 46 Then
    
        ReDim dt(1)
        Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colDateOfBirth).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
        If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date")
        Else
                    Dim dtDate As String
                    dtDate = Trim(Cells(i, colDateOfBirth).Text)
                    If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date. DOB is greater than the current system date")
                    Else
                        'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                        If val(dt(2)) < 1907 Then
                            Cells(i, colDateOfBirth).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colDateOfBirth).AddComment ("Warning!. too old date")
                        End If
                    End If
        End If
        Else
            Cells(i, colDateOfBirth).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colDateOfBirth).AddComment ("Invalid Date Format")
        End If
    
    End If
    
    '************************************ Effective date validations ****************************
    If Len(Trim(Cells(i, colPolicyEffectiveDate).Text)) = 0 Then
        Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46
        errCnt = errCnt + 1
        Cells(i, colPolicyEffectiveDate).AddComment ("Empty")
    Else
        Cells(i, colPolicyEffectiveDate) = Replace(Cells(i, colPolicyEffectiveDate).Text, ".", "/", 1) ': ActiveSheet.Unprotect ("itdaman")
        If Not IsDate(Cells(i, colPolicyEffectiveDate).Text) Then Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
    End If
    
    If Cells(i, colPolicyEffectiveDate).Interior.ColorIndex <> 46 Then
        ReDim dt(1)
        'Dim txt, cnt, a, dtwrn
        
        txt = Cells(i, colPolicyEffectiveDate).Text
    
        cnt = 0
        Do While (1)
        a = InStr(1, txt, "/")
        If a > 0 Then
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = Mid(txt, 1, a - 1)
            txt = Mid(txt, a + 1, Len(txt))
        Else
            cnt = cnt + 1
            ReDim Preserve dt(cnt)
            dt(cnt - 1) = txt
            Exit Do
        End If
        Loop
        If cnt >= 3 Then
            If val(dt(0)) = 0 Or val(dt(0)) > 31 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(1)) = 0 Or val(dt(1)) > 12 Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
            ElseIf val(dt(2)) < 1850 Or Len(dt(2)) <> 4 Or val(dt(2)) > Year(Date) Then
                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date")
            Else
                        
                        dtDate = Trim(Cells(i, colPolicyEffectiveDate).Text)
                        'If DateDiff("d", Now, Format(dtDate, "dd/MM/yyyy")) > 0 Then
                        '    Cells(i, "j").Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, "j").AddComment ("Invalid Date. DOB is greater than the current system date")
                        'Else
                            'Cells(i, 7) = Format(dt(0), "00") + "/" + Format(dt(1), "00") + "/" + dt(2)
                            If val(dt(2)) < 1907 Then
                                Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 6: dtwrn = dtwrn + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Warning!. too old date")
                            End If
                        'End If
            End If
        Else
            Cells(i, colPolicyEffectiveDate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Cells(i, colPolicyEffectiveDate).AddComment ("Invalid Date Format")
        End If
    
    End If
    Dim age As Integer
    
    '****************** plan validation **********************
        
    If Cells(i, colGender).Interior.ColorIndex <> 46 And Cells(i, colPlan).Interior.ColorIndex <> 46 And _
        Cells(i, colPrincipalRefNo).Interior.ColorIndex <> 46 And Cells(i, colDateOfBirth).Interior.ColorIndex <> 46 And _
        Cells(i, colMaritalStatus).Interior.ColorIndex <> 46 And Cells(i, colPolicyEffectiveDate).Interior.ColorIndex <> 46 Then
            ' ASSYST# 153533
            If Not skipPlanChk Then
    
                If Cells(i, colGender).Text = "M" Then
                    If InStr(1, Cells(i, colSys2).Text, "n", vbTextCompare) <= 0 Then errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is selected for male"): Cells(i, colPlan).Interior.ColorIndex = 46
                Else
    
                    age = CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate))
                    If Cells(i, colSys2).Text = "m" Then
                        If age < 10 Then _
                                    errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is not allowed for females If age < 10 ") _
                                    : Cells(i, colPlan).Interior.ColorIndex = 46
                    End If
                    If femMat And Cells(i, colMaritalStatus).Text = "M" Then
                        If InStr(1, Cells(i, colSys2).Text, "m", vbTextCompare) <= 0 Then
                            If (getCurrentSheetPlanType = ADBP And age > ADBP_MATERNITY_PLAN_MIN_AGE_LIMIT) Or _
                                (getCurrentSheetPlanType <> ADBP And age >= EBP_ENH_MATERNITY_PLAN_MIN_AGE_LIMIT And age <= 50) Then
                                errCnt = errCnt + 1
                                Call addComm(Cells(i, colPlan), "Non Maternity product is selected for a married female")
                                Cells(i, colPlan).Interior.ColorIndex = 46
                            End If
                        End If
                    ElseIf Cells(i, colMaritalStatus).Text <> "M" Then
                        If Cells(i, colSys2).Text = "m" Then _
                        errCnt = errCnt + 1: Call addComm(Cells(i, colPlan), "Maternity product is selected for unmarried female"): Cells(i, colPlan).Interior.ColorIndex = 46
                    End If
                End If
            End If
    End If
    
    '*******************************************  > 1 principal, wrong gender, wrong marital sts,(plan groups and mats) **********************
    Set c = Nothing

    Dim PlnCheckPrn, PlnCheckDep As Boolean
    
    'If femMat And Cells(i, "k").Interior.ColorIndex <> 40 And Cells(i, "p").Interior.ColorIndex <> 40 And _
    '    Cells(i, "n").Interior.ColorIndex <> 40 And Cells(i, "g").Interior.ColorIndex <> 40 And Cells(i, "q").Interior.ColorIndex <> 40 Then _
    '        PlnCheckPrn = True: PlnCheckDep = True Else PlnCheckPrn = False: PlnCheckDep = False
        
    If UCase(Trim(Cells(i, colRelation))) = "PRINCIPAL" Then
        If Cells(i, colPrincipalRefNo).Interior.ColorIndex <> 46 Then
            
            With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
                Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
                If Not c Is Nothing Then fads = c.Address
                    Do While 1
                        If Not c Is Nothing Then
                            If c.Row <> i Then
                            
                                If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then Cells(i, colRelation).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                    Call addComm(Cells(i, colRelation), "More than one Principal found; row#" & c.Row)
                                If UCase(Trim(Cells(c.Row, colRelation))) = "SPOUSE" Then
                                    If UCase(Trim(Cells(i, colMaritalStatus).Text)) <> "M" Then Cells(i, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colMaritalStatus), "Wrong Marital Status")
                                    If UCase(Trim(Cells(c.Row, colMaritalStatus).Text)) <> "M" Then Cells(c.Row, colMaritalStatus).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colMaritalStatus), "Wrong Marital Status")
                                    If Trim(Cells(i, colGender).Text) <> "" And UCase(Trim(Cells(i, colGender).Text)) = UCase(Trim(Cells(c.Row, colGender).Text)) Then Cells(i, colGender).Interior.ColorIndex = 46: Cells(c.Row, colGender).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                        Call addComm(Cells(i, colGender), "Wrong Gender"): Call addComm(Cells(c.Row, colGender), "Wrong Gender")
                                End If
                                If StaffNoCorrection = True And Cells(i, colStaffNo).Text <> "" Then
                                    Cells(c.Row, colStaffNo) = Cells(i, colStaffNo).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                If DeptAutoCorrection = True And Cells(i, colDepartment).Text <> "" Then
                                    Cells(c.Row, colDepartment) = Cells(i, colDepartment).Text ': ActiveSheet.Unprotect ("itdaman")
                                End If
                                '*********** plan group ***********
                                ' ASSYST# 153533
                                If Not skipPlanChk Then
                                    If PlanCorrection = False Then
                                        If Cells(c.Row, colSys1).Text = "" Then
                                            Set rng = Range("PlansList")
                                        
                                        
                                            For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 1).Text = Cells(c.Row, colPlan).Text Then
                                                        Cells(c.Row, colSys1) = rng.Cells(cp, 2).Text
                                                        Cells(c.Row, colSys2) = rng.Cells(cp, 3).Text
                                                        Exit For
                                                    End If
                                            Next
                                            If cp > rng.Rows.Count Then
                                                Cells(c.Row, colPlan).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(c.Row, colPlan), "Invalid Plan")
                                            End If
                                        
                                        '    Set d = rng.Find(what:=Cells(c.Row, "p").Text, LookIn:=xlValues, lookat:=xlWhole)
                                        '    If d Is Nothing Then
                                        '        Cells(c.Row, "p").Interior.ColorIndex = 46': ActiveSheet.Unprotect ("itdaman"): errCnt = errCnt + 1: Call addComm(Cells(c.Row, "p"), "Invalid Plan")
                                        '    Else
                                        '        Cells(c.Row, "ay") = d.Cells(1, 2).Text': ActiveSheet.Unprotect ("itdaman")
                                        '        Cells(c.Row, "az") = d.Cells(1, 3).Text': ActiveSheet.Unprotect ("itdaman")
                                        '    End If
                                        End If
                                        If Cells(c.Row, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colSys1).Text <> Cells(i, colSys1).Text Then
                                              errCnt = errCnt + 1
                                              Call addComm(Cells(c.Row, colPlan), "Plan selected is different from the principal's plan ")
                                              Cells(c.Row, colPlan).Interior.ColorIndex = 46
                                        End If
                                    Else
                                        If Cells(i, colPlan).Interior.ColorIndex <> 46 And Cells(c.Row, colGender).Interior.ColorIndex <> 46 _
                                            And Cells(c.Row, colMaritalStatus).Interior.ColorIndex <> 46 And DateCheck(Cells(c.Row, colDateOfBirth).Text, False) Then
                                            age = CalcAge(Cells(c.Row, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate))
                                            
                                            If Cells(c.Row, colGender).Text = "F" And Cells(c.Row, colMaritalStatus).Text = "M" And _
                                                age >= 10 And age <= 50 Then
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "m", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            Else
                                                Set rng = Range("PlansList")
                                               
                                                For cp = 1 To rng.Rows.Count
                                                    If rng.Cells(cp, 2).Text = Cells(i, colSys1).Text And _
                                                        InStr(1, rng.Cells(cp, 3), "n", vbTextCompare) > 0 Then
                                                        Cells(c.Row, colPlan) = rng.Cells(cp, 1).Text
                                                    End If
                                                Next
                                            End If
                                        Else
                                            
                                        End If
                                               
                                    End If
                                End If
                                
                            End If
                        End If
                        Set c = .FindNext(c)
                        If c Is Nothing Then
                            Exit Do
                        Else
                           If c.Address = fads Then Exit Do
                        End If
                    Loop
            End With
        End If
    End If
    
    '*************Maternity validation********************************
   
    
    '********************************************* wrong memb ref no / external princ ref no **********************
    
    If UCase(Trim(Cells(i, colRelation).Text)) = "PRINCIPAL" Then
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Mem. Ref and Ext. Principal Ref. must be the same for Principals")
    'ElseIf getCurrentSheetPlanType <> ADBP Then
    Else
        ' REVERTING CHANGES AS PER PMG0000546
        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
        If UCase(Trim(Cells(i, colMemberRefNo).Text)) = UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colPrincipalRefNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPrincipalRefNo), "Mem. Ref and Ext. Principal Ref. must not be the same for non-Principals")
    End If
    
    '********************************************* member without principal **********************
    
    Dim PrncFound As Boolean
    PrncFound = False
    Set c = Nothing
    If Cells(i, colRelation).Interior.ColorIndex <> 46 And UCase(Trim(Cells(i, colRelation).Text)) <> "PRINCIPAL" Then
        With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                    If Not c Is Nothing Then
                        ' G-SEC CHANGES: IF PICTURE FILE NAME AND PRINCIPAL REF ARE SAME
                        ' THEN IT WILL BE CONSIDERED AS PRINCIPAL (REGARDLESS OF RELATION)
                        ' REVERTING CHANGES AS PER PMG0000546
                        If UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL" Then PrncFound = True: Exit Do
'                       If (UCase(Trim(Cells(c.Row, colRelation).Text)) = "PRINCIPAL") Or _
'                          ( _
'                            (getCurrentSheetPlanType = ADBP) And _
'                            (UCase(Trim(Cells(c.Row, colMemberRefNo).Text)) = UCase(Trim(Cells(c.Row, colPrincipalRefNo).Text))) _
'                          ) Then
'                            PrncFound = True
'
'                            Exit Do
'                        End If
                    End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
            If PrncFound = False Then Cells(i, colMemberRefNo).Interior.ColorIndex = 6: wrnCnt = wrnCnt + 1: Call addComm(Cells(i, colMemberRefNo), "Warning!. Principal not found for this member")
        End With
    End If
    
    '*********************************** wrong/invalid staff no **************************************
    Set c = Nothing
            With Range(colPrincipalRefNo & "2:" & colPrincipalRefNo & (MemCnt + 1))
                Set c = .Find(Cells(i, colPrincipalRefNo).Value, LookIn:=xlValues, lookat:=xlWhole)
                If Not c Is Nothing Then fads = c.Address
                    Do While 1
                        If Not c Is Nothing Then
                            If c.Row <> i And UCase(Trim(Cells(c.Row, colStaffNo).Text)) <> UCase(Trim(Cells(i, colStaffNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                                Call addComm(Cells(i, colStaffNo), "Staff no should be the same for all members of a family; row#" & c.Row): Exit Do
                        End If
                        Set c = .FindNext(c)
                        If c.Address = fads Then Exit Do
                    Loop
            End With
    
    
    Set c = Nothing
    If Cells(i, colStaffNo).Interior.ColorIndex <> 46 Then
        With Range(colStaffNo & "2:" & colStaffNo & (MemCnt + 1))
            Set c = .Find(Cells(i, colStaffNo).Text, LookIn:=xlValues, lookat:=xlWhole)
            If Not c Is Nothing Then fads = c.Address
                Do While 1
                If Not c Is Nothing Then
                    If UCase(Trim(Cells(c.Row, colPrincipalRefNo).Text)) <> UCase(Trim(Cells(i, colPrincipalRefNo).Text)) Then Cells(i, colStaffNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: _
                        : Call addComm(Cells(i, colStaffNo), "Similar Staff No found in different families; row#" & c.Row): Exit Do
                   ' Selection.Cells(i, 14).NoteText (Selection.Cells(i, 14).NoteText & ", Similar Staff No. but Diff Prin. Ref. No.")
                End If
                Set c = .FindNext(c)
                If c.Address = fads Then Exit Do
                Loop
        End With
    End If
    
    '********************** ucase names *****************
    Cells(i, colFirstName) = UCase(Cells(i, colFirstName))
    Cells(i, colMiddleName) = UCase(Cells(i, colMiddleName))
    Cells(i, colLastName) = UCase(Cells(i, colLastName))
    
    
    '*************Department********************************
    If Trim(Cells(i, colDepartment).Text) = "" Then
        'Cells(i, colDepartment) = "ND" ': ActiveSheet.Unprotect ("itdaman")
        Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Empty")
    Else
       If Len(Cells(i, colDepartment).Text) > 15 Then Cells(i, colDepartment).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colDepartment), "Length > 15")
    End If
    
    '*************** Class correction *************************************
    If ClassCorrection And Cells(i, "p").Interior.ColorIndex <> 46 Then
        Set c = GetTableRow("tblProdPlanList", 1, Cells(i, "p").Text)
        
        If Not c Is Nothing Then
                Cells(i, "m") = c.Cells(1, 5).Text
        End If
    End If
    
    '*************** Class validation *************************************
    If Len(Trim(Cells(i, "m").Text)) = 0 Then Cells(i, "m").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, "m"), "Empty")
    
    
    If getCurrentSheetPlanType = EBP Then
        '*************** Occupation validation ****************
        If Len(Trim(Cells(i, colOccupation).Text)) = 0 Then
          Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Empty")
        ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("OccupationList", Cells(i, colOccupation).Text) Then
            Cells(i, colOccupation).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colOccupation), "Invalid Occupation")
        End If
    End If

    '*************** Place of Visa Issuance Validation ****************
    If Len(Trim(Cells(i, colPlaceOfVisaIssue).Text)) = 0 Then
        Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colPlaceOfVisaIssue), "Empty")
    Else
        'Set rng = Range("PlaceOfVisaList")
        Set rng = Range("EmiratesList")
        Set c = rng.Find(what:=Cells(i, colPlaceOfVisaIssue).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
        If c Is Nothing Then
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance")
        ElseIf (getCurrentSheetPlanType = EBP) And (UCase(Cells(i, colPlaceOfVisaIssue).Text) <> "DUBAI") Then
            ' SLO1383 - Place of visa SHOULD BE DUBAI ONLY FOR EBP
            Cells(i, colPlaceOfVisaIssue).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            
            Call addComm(Cells(i, colPlaceOfVisaIssue), "Invalid Place of Visa Issuance. EBP is only for Dubai Emirate.")
        Else
            ' SLO1383
            ' IF CURRENT RECORD IS NOT PRINCIPAL THEN CHILD (<18) & SPOUSE
            ' CONTACT NUMBER, CITY, EMIRATE, RESIDENT LOC, WORK LOC & EMAIL
            ' SHOULD BE SAME AS PRINCIPAL IF IT'S EMPTY
            ' FOR EBP NO NEED TO CHECK PLACE OF VISA ISSUANCE AS EBP IS FOR DUBAI ONLY
            If Not IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, i) And _
                ((getCurrentSheetPlanType = EBP) Or (UCase(Cells(i, colPlaceOfVisaIssue).Text) = "DUBAI")) Then
                If (Len(Trim(Cells(i, colTelephone1).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colCity).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmirate).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colResidentialLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colWorkLoc).Value)) = 0) Or _
                    (Len(Trim(Cells(i, colEmail).Value)) = 0) Then
                    
                    Dim dependentContactNo As String, dependentCity As String, _
                        dependentEmirate As String, dependentResLoc As String, _
                        dependentWrkLoc As String, dependentEmail As String
                
                    Call GetContactNoForChild(Cells(i, colPrincipalRefNo).Text, _
                                                        Cells(i, colRelation).Text, _
                                                        CalcAge(Cells(i, colDateOfBirth).Text, Cells(i, colPolicyEffectiveDate).Text), _
                                                        dependentContactNo, dependentCity, dependentEmirate, dependentResLoc, dependentWrkLoc, dependentEmail)
                    
                    ' SET PRINCIPAL'S PHONE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colTelephone1).Value)) = 0 Then
                        Cells(i, colTelephone1).Value = dependentContactNo
                    End If
                    
                    ' SET PRINCIPAL'S CITY IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colCity).Value)) = 0 Then
                        Cells(i, colCity).Value = dependentCity
                    End If
                    
                    ' SET PRINCIPAL'S EMIRATE IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmirate).Value)) = 0 Then
                        Cells(i, colEmirate).Value = dependentEmirate
                    End If
                    
                    ' SET PRINCIPAL'S RESIDENTIAL LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colResidentialLoc).Value)) = 0 Then
                        Cells(i, colResidentialLoc).Value = dependentResLoc
                    End If
                    
                    ' SET PRINCIPAL'S WORK LOCATION IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colWorkLoc).Value)) = 0 Then
                        Cells(i, colWorkLoc).Value = dependentWrkLoc
                    End If
                    
                    ' SET PRINCIPAL'S EMAIL IF DEPENDENT'S IS EMPTY
                    If Len(Trim(Cells(i, colEmail).Value)) = 0 Then
                        Cells(i, colEmail).Value = dependentEmail
                    End If
                End If
                
            End If
        End If
    End If
    
    
    
    
    '******************* City ****************
    If Len(Trim(Cells(i, colCity).Text)) = 0 Then
        Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Empty")
    Else
        Set rng = Range("CityList")
        Set c = rng.Find(what:=Cells(i, colCity).Text, LookIn:=xlValues, lookat:=xlWhole)
        If c Is Nothing Then Cells(i, colCity).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(i, colCity), "Invalid City")
    End If
    
    'PMG1236  - Previous Gross Salary column will be hidden always and will have default Y (yes) value
    'Ref: Shiyas - 30-08-2015
    Cells(i, colHiddenGrossSalary) = "Y"
    
    ' BELOW VALIDATION IS REQUIRED IF SELECTED PLAN IS EBP.
    ' FOR OTHER PLAN TYPES, FOLLOWING COLUMNS WILL BE HIDDEN
    ' Previous Insurance Coverage
    ' Has Gross Salary
    ' National Id Type
    ' Visa Number
    Call ValidatePlanFields(i, errCnt)
    
    
    '*************Wrong Nationality********************************
    'Commented as it is done in another place
    'If Cells(i, "ag").Interior.ColorIndex <> 40 Then
    '    With Range("CountryList")
    '        Set c = .Find(Cells(i, "ag").Value, LookIn:=xlValues, lookat:=xlWhole)
    '         If c Is Nothing Then
    '                Cells(i, "ag").Interior.ColorIndex = 46: errCnt = errCnt + 1
    '                Cells(i, "ag").AddComment ("Wrong Nationality")
    '        End If
    '        Set c = Nothing
    '    End With
    'End If
    '*************Updating the Column AK - THAT IS MACRO RUN SUCCESSFULLY************
        If (errCnt - prevErrCnt) > 0 Then
            Cells(i, colMacroRunSuccessfully).Value = "N"
        Else
            Cells(i, colMacroRunSuccessfully).Value = "Y"
        End If
    
    '********* Setting the previous error count to the current error count.*********
        prevErrCnt = errCnt
    
    Next i
    Application.EnableEvents = True
    ''Range("AY:AZ").Clear
    '************************************
        ActiveSheet.Protect password:="itdaman", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowFormattingCells:=True, AllowFormattingRows:=True, _
            AllowInsertingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True
        Range("A3").Select
    MsgBox "Error check has been completed." & vbNewLine & errCnt & " error(s) and " & wrnCnt & " warning(s) found", , "Error Check"
    'Unload Me
End Sub

Private Function ValidatePlanFields(ByRef rowIndex As Long, ByRef errCnt As Long)
    Dim c, rng As Range
    
    Dim selectedEmirate As String
    selectedEmirate = ""
    
    ' FOR LUHN'S ALGORITHM BOTH ID-TYPE AND EMIRATES-ID COLUMNS SHOULD HAVE VALUES
    ' ID-TYPE COLUMN CAN HAVE EMIRATES ID OR APPLICATION NUMBER. ALGO SHOULD BE APPLIED IF ITS EMIRATES ID
    Dim emiratesIDHasError As Boolean
    emiratesIDHasError = False
    
    '*************** National Id Type validation ****************
    If Len(Trim(Cells(rowIndex, colNationalIdType).Text)) = 0 Then
      Cells(rowIndex, colNationalIdType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalIdType), "Empty")
      emiratesIDHasError = True
    ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("EIDType", Trim(Cells(rowIndex, colNationalIdType).Text)) Then
        Cells(rowIndex, colNationalIdType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalIdType), "Invalid National ID Type")
        emiratesIDHasError = True
    End If
    
    
    '*************National Identity********************************
    If Len(Trim(Cells(rowIndex, colNationalId).Text)) = 0 Then
        Cells(rowIndex, colNationalId).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colNationalId), "Empty")
        emiratesIDHasError = True
    Else
        'FOR EMIRATES ID LENGTH SHOULD BE LESS THAN 15
        'FOR APPLICATION NUMBER LENGTH SHOULD BE LESS THAN 30
        If UCase(Trim(Cells(rowIndex, colNationalIdType).Text)) = "EMIRATES ID" Then
            
            If Len(Cells(rowIndex, colNationalId).Value) > 15 Then
                Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colNationalId), "Length > 15")
                
                emiratesIDHasError = True
            End If
        Else
            If Len(Cells(rowIndex, colNationalId).Value) > 30 Then
                Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colNationalId), "Length > 30")
                
                emiratesIDHasError = True
            End If
        End If
    End If
    
    ' APPLY LUHN'S ALGORITHM IF REQUIRED COLUMNS HAS PROPER VALUES
    If (Not emiratesIDHasError) And UCase(Trim(Cells(rowIndex, colNationalIdType).Text)) = "EMIRATES ID" Then
        If Not HelperFunctions.ValidateEID(Trim(Cells(rowIndex, colNationalId).Text)) Then
            Cells(rowIndex, colNationalId).Interior.ColorIndex = 46
            errCnt = errCnt + 1
            Call addComm(Cells(rowIndex, colNationalId), "Invalid Emirates ID")
        End If
    End If
    
    Select Case getCurrentSheetPlanType
        Case EBP
        
            '*************** Emirate validation ****************
            If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
            Else
                Set rng = Range("EmiratesList")
                Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then
                    Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                Else
                    selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                End If
            End If
                
                
            '*************** Residential Location validation ****************
            If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
            Else
                
                If selectedEmirate = "" Then Set rng = Nothing Else Set rng = Range(selectedEmirate)
                If rng Is Nothing Then
                    Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                Else
                    Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                    If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                End If
            End If
           
                 
            'WORK LOCATION & COMMISSION SHOULD BE OPTIONAL FOR DEPENDENTS
            If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
            
                '*************** Work Location validation ****************
                If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                    Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                Else
                    Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                    If rng Is Nothing Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    Else
                        Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                    'Set rng = Range("UAECityList")
                    'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                    'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                End If
                
                '***************** Commission Validation *****************
                ''' only for principals. decision is pending from DHA
                'If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                    If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                        Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                    ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                         Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                    End If
                'End If
            End If
                        
        
            '************************** Empty Passport Number************
            If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
    
            'IN CASE OF DCTM ERROR CHECK, PLAN COLUMN SHOULD BE CHECKED FOR PREVIOUS INSURANCE COMPANY OTHERWISE
            'PLAN CATEGORY WILL BE USED FOR THE CHECKING OF PREVIOUS INSURANCE COMPANY AS PLAN WILL BE
            Dim tmpColIndex As String
            If chkMat.Visible Then
                tmpColIndex = colPlan
            Else
                tmpColIndex = colPlanCategory
            End If
            
            '*************** Previous Insurance Coverage validation ****************
            If Len(Trim(Cells(rowIndex, colPreviousInsCoverage).Text)) = 0 Then
                Cells(rowIndex, colPreviousInsCoverage).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colPreviousInsCoverage), "Empty")
            ElseIf Not DamanGlobal.ItemExistsInNamedRange_MatchCase("YesNo", Cells(rowIndex, colPreviousInsCoverage).Text) Then
                Cells(rowIndex, colPreviousInsCoverage).Interior.ColorIndex = 46
                errCnt = errCnt + 1
                Call addComm(Cells(rowIndex, colPreviousInsCoverage), "Invalid Previous Insurance Coverage Value")
            ElseIf Trim(Cells(rowIndex, colPreviousInsCoverage).Text) = "Y" Then
                If InStr(1, Cells(rowIndex, tmpColIndex).Text, "WP") Then
                    Cells(rowIndex, tmpColIndex).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, tmpColIndex), "Waiting Period plan is selected for member with previous insurance")
                End If
            ElseIf Trim(Cells(rowIndex, colPreviousInsCoverage).Text) = "N" Then
                If InStr(1, Cells(rowIndex, tmpColIndex).Text, "WP") = False Then
                    Cells(rowIndex, tmpColIndex).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, tmpColIndex), "No Waiting Period plan is selected for member without previous insurance")
                End If
            End If
               
           'PMG1236  - Previous Gross Salary column will be hidden always and will have default Y (yes) value
           'Ref: Shiyas - 30-08-2015
            '*************** Gross Salary validation ****************
            'If Len(Trim(Cells(rowIndex, "bb").Text)) = 0 Then
            '    Cells(rowIndex, "bb").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, "bb"), "Empty")
            'ElseIf Cells(rowIndex, "bb") <> "Y" Then
            '     Cells(rowIndex, "bb").Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, "bb"), "Only employees earning a gross (total) monthly salary of AED 4,000 or less are eligible for the Essential Benefits Plan.")
            'End If
            
            
            '*************** Visa Number validation ****************
            If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
              Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
            End If
            
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EBP)
            
'            'VALIDATE PLAN CATEGORY
'            If Len(Trim(Cells(rowIndex, colPlanCategory).Text)) = 0 Then
'                Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Empty")
'            Else
'                Set rng = Range("PlanCategories")
'                Set c = rng.Find(what:=Cells(rowIndex, colPlanCategory).Text, LookIn:=xlValues, lookat:=xlWhole)
'                If c Is Nothing Then Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Invalid plan category")
'            End If
            
            '************************** Empty Contact Number************
            If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colTelephone1), "Empty")
            
            'SLO1383: SALARY BAND WILL BE ENTERED MANUALLY IN CASE OF EBP & EP
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EBP)
            
            '*************** Salary Band validation ****************
            If Len(Trim(Cells(rowIndex, colSalaryBand).Text)) = 0 Then
                Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSalaryBand), "Empty")
            Else
                Set rng = Range("SalaryBandList")
                Set c = rng.Find(what:=Cells(rowIndex, colSalaryBand).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                ElseIf IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) And _
                        (UCase(Trim(Cells(rowIndex, colSalaryBand).Text)) = "NO SALARY") Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                End If
            End If
            
            '*************** Sponsor UID Type validation ****************
            If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
            Else
                Set rng = Range("UIDTypeList")
                Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
            End If
            
            '*************** Sponsor UID validation ****************
            If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
            End If
            
        Case ADBP
            'VALIDATE COMMISSION/PASSPORT/SPONSOR UID TYPE/SPONSOR UID/EMIRATE/RESIDENT LOC/WORK LOC IF PLACE OF VISA ISSUANCE IS DUBAI ONLY
            If DamanGlobal.ItemExistsInNamedRange_MatchCase("PlaceOfVisaList", Cells(rowIndex, colPlaceOfVisaIssue).Text) Then
            
                If UCase(Cells(rowIndex, colPlaceOfVisaIssue).Text) = "DUBAI" Then
                
                    '*************** Emirate validation ****************
                    If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                        Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
                    Else
                        Set rng = Range("EmiratesList")
                        Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then
                            Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                            errCnt = errCnt + 1
                            Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                        Else
                            selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                        End If
                    End If
                    
                        
                    '*************** Residential Location validation ****************
                    If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                        Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
                    Else
                        ' DISPLAY ERROR MESSAGE ON RESIDENTIAL LOCATION IF EMIRATE HAS ERROR
                        ' AS BOTH ARE CASCADING DROPDOWNS
                        If selectedEmirate = "" Then
                           Set rng = Nothing
                        Else
                            Set rng = Range(selectedEmirate)
                        End If
                        
                        If rng Is Nothing Then
                            Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        Else
                            Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                            If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        End If
                    End If
                    
                    
                    
                    'WORK LOCATION SHOULD BE OPTIONAL FOR DEPENDENTS
                    If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                    
                        '*************** Work Location validation ****************
                        If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                            Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                        Else
                            Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                            If rng Is Nothing Then
                                Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            Else
                                Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                                If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            End If
                            
                            'Set rng = Range("UAECityList")
                            'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                            'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                        End If
                        
                        '***************** Commission Validation *****************
                        If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                            Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                        ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                             Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                        End If
                    End If
                    
                    
                    '************************** Empty Passport Number************
                    If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
                    
                    '*************** Visa Number validation ****************
                    If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
                      Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
                    End If
                    
                    '************************** Empty Contact Number************
                    If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then
                        
                        Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46
                        errCnt = errCnt + 1
                        Call addComm(Cells(rowIndex, colTelephone1), "Empty")
                        
                    End If
                    
                    '*************** Sponsor UID Type validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
                    Else
                        Set rng = Range("UIDTypeList")
                        Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
                    End If
                    
                    '*************** Sponsor UID validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
                    End If
                    
                    ' CALCULATE SALARY BAND
                    'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, ADBP)
                ElseIf Len(Trim(Cells(rowIndex, colWorkLoc).Text)) > 0 Then
                    'REGARDLESS OF "PLACE OF VISA ISSUANCE" OR MANDATORY, IF WORK LOCATION HAS ANY VALUE THEN IT SHOULD BE VALID
                    If Not DamanGlobal.ItemExistsInNamedRange_MatchCase(Cells(rowIndex, colPlaceOfVisaIssue).Text, Cells(rowIndex, colWorkLoc).Text) Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                End If
            End If
            
            
            ' CALCULATE SALARY BAND
            Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, ADBP)
        
            ' SLO1383: GROSS SALARY COLUMN WILL BE VISIBLE IN ADBP ONLY: CHECK HAS BEEN MOVED FROM GENERIC ERROR CHECK BLOCK TO ADBP BLOCK ONLY
            ' GROSS SALARY IS OPTIONAL FOR DEPENDENTS
            ' ACCOMMODATION VALIDATION SHOULD BE SKIPPED FOR DEPENDENTS
            If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                
                 '************************** Gross Salary Validation************
                If Len(Trim(Cells(rowIndex, colGrossSalary).Text)) = 0 Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Empty")
                ElseIf Not IsNumeric(Trim(Cells(rowIndex, colGrossSalary).Text)) Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Invalid Value")
                ElseIf ((CLng(Trim(Cells(rowIndex, colGrossSalary).Text)) > ADBP_MAX_INCOME_LIMIT) Or ((CLng(Trim(Cells(rowIndex, colGrossSalary).Text)) > ADBP_MAX_INCOME_LIMIT_WITH_ACCO And UCase(Trim(Cells(rowIndex, colAccommodationProvided))) = "Y"))) Then
                    Cells(rowIndex, colGrossSalary).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colGrossSalary), "Member is not eligible for Basic plan. Please remove from the list")
                End If
                
                '***************** Accommodation Provided Validation *****************
                If Len(Trim(Cells(rowIndex, colAccommodationProvided).Text)) = 0 Then
                    Cells(rowIndex, colAccommodationProvided).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colAccommodationProvided), "Empty")
                ElseIf Cells(rowIndex, colAccommodationProvided) <> "Y" And Cells(rowIndex, colAccommodationProvided) <> "N" Then
                     Cells(rowIndex, colAccommodationProvided).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colAccommodationProvided), "Invalid")
                End If
            End If
        Case EP
            'VALIDATE COMMISSION/PASSPORT/SPONSOR UID TYPE/SPONSOR UID/EMIRATE/RESIDENT LOC/WORK LOC IF PLACE OF VISA ISSUANCE IS DUBAI ONLY
            If DamanGlobal.ItemExistsInNamedRange_MatchCase("PlaceOfVisaList", Cells(rowIndex, colPlaceOfVisaIssue).Text) Then
                
                If UCase(Cells(rowIndex, colPlaceOfVisaIssue).Text) = "DUBAI" Then
                
                    '*************** Emirate validation ****************
                    If Len(Trim(Cells(rowIndex, colEmirate).Text)) = 0 Then
                        Cells(rowIndex, colEmirate).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colEmirate), "Empty")
                    Else
                        Set rng = Range("EmiratesList")
                        Set c = rng.Find(what:=Cells(rowIndex, colEmirate).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then
                            Cells(rowIndex, colEmirate).Interior.ColorIndex = 46
                            errCnt = errCnt + 1
                            Call addComm(Cells(rowIndex, colEmirate), "Invalid Emirate")
                        Else
                            selectedEmirate = Replace(Trim(Cells(rowIndex, colEmirate).Text), " ", "")
                        End If
                    End If
                    
                        
                    '*************** Residential Location validation ****************
                    If Len(Trim(Cells(rowIndex, colResidentialLoc).Text)) = 0 Then
                        Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Empty")
                    Else
                        
                        ' DISPLAY ERROR MESSAGE ON RESIDENTIAL LOCATION IF EMIRATE HAS ERROR
                        ' AS BOTH ARE CASCADING DROPDOWNS
                        If selectedEmirate = "" Then
                           Set rng = Nothing
                        Else
                            Set rng = Range(selectedEmirate)
                        End If
                        
                        If rng Is Nothing Then
                            Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        Else
                            Set c = rng.Find(what:=Cells(rowIndex, colResidentialLoc).Text, LookIn:=xlValues, lookat:=xlWhole)
                            If c Is Nothing Then Cells(rowIndex, colResidentialLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colResidentialLoc), "Invalid Residential Location")
                        End If
                    End If
                    
                    
                    'WORK LOCATION SHOULD BE OPTIONAL FOR DEPENDENTS
                    If UCase(Trim(Cells(rowIndex, colRelation).Text)) = "PRINCIPAL" Then
                        '*************** Work Location validation ****************
                        If Len(Trim(Cells(rowIndex, colWorkLoc).Text)) = 0 Then
                            Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Empty")
                        Else
                            Set rng = Range(Replace(Cells(rowIndex, colPlaceOfVisaIssue).Text, " ", ""))
                            If rng Is Nothing Then
                                Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            Else
                                Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                                If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                            End If
                            
                            'Set rng = Range("UAECityList")
                            'Set c = rng.Find(what:=Cells(rowIndex, colWorkLoc).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                            'If c Is Nothing Then Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                        End If
                        
                        '***************** Commission Validation *****************
                        If Len(Trim(Cells(rowIndex, colCommission).Text)) = 0 Then
                            Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Empty")
                        ElseIf Cells(rowIndex, colCommission) <> "Y" And Cells(rowIndex, colCommission) <> "N" Then
                             Cells(rowIndex, colCommission).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colCommission), "Invalid")
                        End If
                    End If
                    
                    
                    
                    
                    '*************** Visa Number validation ****************
                    If Len(Trim(Cells(rowIndex, colVisaUnifiedNo).Text)) = 0 Then
                      Cells(rowIndex, colVisaUnifiedNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colVisaUnifiedNo), "Empty")
                    End If
                    
                    '************************** Empty Passport Number************
                    If (Len(Trim(Cells(rowIndex, ColPassportNo).Text)) = 0) Then Cells(rowIndex, ColPassportNo).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, ColPassportNo), "Empty")
                    
                    
                    '************************** Empty Contact Number************
                    If (Len(Trim(Cells(rowIndex, colTelephone1).Text)) = 0) Then
                        Cells(rowIndex, colTelephone1).Interior.ColorIndex = 46
                        errCnt = errCnt + 1
                        Call addComm(Cells(rowIndex, colTelephone1), "Empty")
                    End If
                    
                    '*************** Sponsor UID Type validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUIDType).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Empty")
                    Else
                        Set rng = Range("UIDTypeList")
                        Set c = rng.Find(what:=Cells(rowIndex, colSponsorUIDType).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                        If c Is Nothing Then Cells(rowIndex, colSponsorUIDType).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUIDType), "Invalid Sponsor UID Type")
                    End If
                    
                    '*************** Sponsor UID validation ****************
                    If Len(Trim(Cells(rowIndex, colSponsorUID).Text)) = 0 Then
                        Cells(rowIndex, colSponsorUID).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSponsorUID), "Empty")
                    End If
                ElseIf Len(Trim(Cells(rowIndex, colWorkLoc).Text)) > 0 Then
                    
                    'REGARDLESS OF "PLACE OF VISA ISSUANCE" OR MANDATORY, IF WORK LOCATION HAS ANY VALUE THEN IT SHOULD BE VALID
                    If Not DamanGlobal.ItemExistsInNamedRange_MatchCase(Cells(rowIndex, colPlaceOfVisaIssue).Text, Cells(rowIndex, colWorkLoc).Text) Then
                        Cells(rowIndex, colWorkLoc).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colWorkLoc), "Invalid Work Location")
                    End If
                End If
                
                ' CALCULATE SALARY BAND
                'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EP)
            End If
            
                        
            If IsDate(Trim(Cells(rowIndex, colDateOfBirth).Text)) And IsDate(Trim(Cells(rowIndex, colPolicyEffectiveDate).Text)) Then
                Cells(rowIndex, colAge) = DateDiff("yyyy", CDate(Trim(Cells(rowIndex, colDateOfBirth).Text)), CDate(Trim(Cells(rowIndex, colPolicyEffectiveDate).Text)))
            End If
            
            
            ' SLO1383: SALARY BAND WILL BE ENTERED MANUALLY IN CASE OF EBP & EP
            ' CALCULATE SALARY BAND
            'Cells(rowIndex, colSalaryBand) = DamanGlobal.GetSalaryBand(Cells(rowIndex, colGrossSalary).Text, EP)
            
            '*************** Salary Band validation ****************
            If Len(Trim(Cells(rowIndex, colSalaryBand).Text)) = 0 Then
                
                'No Salary - SHOULD BE SET AUTOMATICALLY FOR DEDEPENDENTS IN CASE IF IT IS EMPTY
                If IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46: errCnt = errCnt + 1: Call addComm(Cells(rowIndex, colSalaryBand), "Empty")
                Else
                    Cells(rowIndex, colSalaryBand) = "No Salary"
                End If
            Else
                Set rng = Range("SalaryBandList")
                Set c = rng.Find(what:=Cells(rowIndex, colSalaryBand).Text, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
                If c Is Nothing Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                ElseIf IsPrincipal(colRelation, colMemberRefNo, colPrincipalRefNo, rowIndex) And _
                        (UCase(Trim(Cells(rowIndex, colSalaryBand).Text)) = "NO SALARY") Then
                    Cells(rowIndex, colSalaryBand).Interior.ColorIndex = 46
                    errCnt = errCnt + 1
                    Call addComm(Cells(rowIndex, colSalaryBand), "Invalid Salary Band")
                End If
            End If
            
'            'VALIDATE PLAN CATEGORY
'            If Len(Trim(Cells(rowIndex, colPlanCategory).Text)) = 0 Then
'                Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Empty")
'            Else
'                Set rng = Range("PlanCategories")
'                Set c = rng.Find(what:=Cells(rowIndex, colPlanCategory).Text, LookIn:=xlValues, lookat:=xlWhole)
'                If c Is Nothing Then Cells(rowIndex, colPlanCategory).Interior.ColorIndex = 46: ErrCnt = ErrCnt + 1: Call addComm(Cells(rowIndex, colPlanCategory), "Invalid plan category")
'            End If
    End Select
    
    Set rng = Nothing
    Set c = Nothing
End Function

Private Function CalcAge(ByVal dob As String, ByVal rdate As String) As Integer
Dim dt, rdt, errst As String
dt = Format(dob, "dd/MM/yyyy")
rdt = Format(rdate, "dd/MM/yyyy")
Dim age As Integer
                    age = DateDiff("yyyy", dt, rdt)
                    
                        If age < 0 Then errst = "err"
                        If Month(dt) > Month(rdt) Then
                            If age = 0 Then errst = "err"
                            age = age - 1
                        ElseIf Month(dt) < Month(rdt) Then
                            'yr = 0
                        ElseIf Day(dt) > Day(rdt) Then
                            If age = 0 Then errst = "err"
                        age = age - 1
                        Else
                    
                        End If
                            CalcAge = age
End Function

Private Sub addComm(ds As Range, Cmnt As String)
Dim tmpCmnt As String
If Not ds.Comment Is Nothing Then
    tmpCmnt = ds.Comment.Text
    ds.Comment.Delete
End If
If tmpCmnt <> "" And tmpCmnt <> Cmnt Then
    ds.AddComment (tmpCmnt & vbNewLine & Cmnt)
Else
    ds.AddComment (Cmnt)
End If
End Sub


Private Function DateCheck(ByVal dtStr As String, Optional FutDate As Boolean = False) As Boolean
Dim isValidDate As Boolean
If IsDate(dtStr) Then
        Dim dt() As Integer
        Dim txt As String
        Dim cnt, a As Integer
        
        txt = Trim(dtStr)
    
        cnt = 0
        Do While (1)
            a = InStr(1, txt, "/")
            If a > 0 Then
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(Mid(txt, 1, a - 1))
                txt = Mid(txt, a + 1, Len(txt))
            Else
                cnt = cnt + 1
                ReDim Preserve dt(cnt)
                dt(cnt - 1) = val(txt)
                Exit Do
            End If
        Loop
        
        If cnt = 3 Then
            If dt(0) = 0 Or dt(0) > 31 Then
                isValidDate = False
            ElseIf dt(1) = 0 Or dt(1) > 12 Then
                isValidDate = False
            ElseIf dt(2) < 1850 Or Len(Trim(str(dt(2)))) <> 4 Or (FutDate = False And dt(2) > Year(Date)) Then
                isValidDate = False
            Else
                Dim dtDate As Date
                dtDate = dtStr
                If DateDiff("d", Now, dtDate) > 0 And FutDate = False Then
                    isValidDate = False
                Else
                    isValidDate = True
                End If
            End If
        Else
            isValidDate = False
        End If
Else
    isValidDate = False
End If
DateCheck = isValidDate
End Function


Private Sub cmdConvert_Click()
Dim MemCnt As Long
MemCnt = val(txtNoOfMembers)
If MemCnt <= 0 Then MsgBox ("Invalid Member Count entered"), vbCritical, AppName: Exit Sub
Application.EnableEvents = False
If rbtnUserToMed.Value Then
    If UCase(Trim(Cells(1, COL_LASTNAME_PROD).Value)) <> "LAST NAME" Or UCase(Trim(Cells(1, "ag").Value)) <> "NATIONALITY" Then MsgBox "Wrong format", vbCritical, AppName: Exit Sub
    Range("D2:D" & MemCnt + 1).Select
    Selection.Copy
    Range("AB2:AB" & MemCnt + 1).Select
    ActiveSheet.Paste
    Range("D1:D" & MemCnt + 1).Select
    Selection.Delete Shift:=xlToLeft
Else
    If UCase(Trim(Cells(1, "d").Value)) <> "LAST NAME" Or UCase(Trim(Cells(1, "af").Value)) <> "NATIONALITY" Then MsgBox "Wrong format", vbCritical, AppName: Exit Sub
    Range("AA1:AA" & MemCnt + 1).Select
    Selection.Copy
    Range("D1:D" & MemCnt + 1).Select
    Selection.Insert Shift:=xlToRight
End If
Range("D2:D2").Select
Cells.Columns.AutoFit
Application.EnableEvents = True
End Sub




Private Sub Frame1_Click()

End Sub

Private Sub UserForm_Initialize()
    lblAppVer.Caption = getSheetVersion
    'Set ParSht = ThisWorkbook.Sheets("list values")
    'If DateCheck(Cells(2, COL_POLICYEFFECTIVEDATE_PROD).Text, True) Then txtEffDate = Cells(2, COL_POLICYEFFECTIVEDATE_PROD).Text
    
    txtNoOfMembers.Text = getMemberCount
    txtNoOfMembers.SetFocus
End Sub


Private Sub btnDCTMExportCustomFields_Click()
Dim strOut As String
strOut = CreateMemberCustomFile(False)
If strOut <> "" Then MsgBox "Export has been completed...", vbInformation, msgTitle
End Sub

Private Sub btnDCTMExportMember_Click()
Dim strOut As String
strOut = CreateMemberStandardFile(False)
If strOut <> "" Then MsgBox "Export has been completed...", vbInformation, msgTitle
End Sub

Public Function CreateMemberStandardFile(isOffline As Boolean) As String

Dim clm
clm = Array(Array(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47), _
        Array(15, 15, 15, 30, 30, 10, 10, 10, 10, 6, 6, 6, 15, 10, 10, 6, 80, 15, 15, 15, 15, 6, 15, 10, 10, 6, 15, 15, 15, 30, 8, 6, 15, 6, 10, 25, 60, 6, 6, 15, 6, 15, 50, 25, 25, 6))

CreateMemberStandardFile = WriteMemberStandardFile(clm, val(txtNoOfMembers), isOffline)

End Function

Function CreateMemberCustomFile(isOffline As Boolean) As String

Dim plan As PlanType
plan = getCurrentSheetPlanType

Dim MemCnt As Long
MemCnt = getMemberCount

Dim clm

Select Case isOffline
Case False
    Select Case plan
        Case PlanType.EBP
            clm = Array(55, 62, 71, 72, 73, 74, 75, 76, 82, 83)
        Case PlanType.EP
            clm = Array(55, 62, 69, 71, 72, 73, 74, 75, 76, 82, 83)
        Case PlanType.ADBP
            clm = Array(55, 62, 69, 71, 72, 73, 74, 75, 76, 82, 83)
    End Select
Case True
    Select Case plan
        Case PlanType.EBP
            'clm = Array(55, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76)
            'AS PER ZEESHAN EMAIL (DATED:28-09-2015), REMOVED NATIONAL ID TYPE FROM EXPORT
            clm = Array(55, 62, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 82, 83)
        Case PlanType.EP
            clm = Array(55, 62, 69, 71, 72, 73, 74, 75, 76, 82, 83)
        Case PlanType.ADBP
            clm = Array(55, 62, 69, 71, 72, 73, 74, 75, 76, 82, 83)
    End Select
End Select

CreateMemberCustomFile = WriteMemberCustomFile(clm, MemCnt)
End Function
Function WriteMemberCustomFile(clm, MemCnt As Long) As String
   On Error GoTo errr
   ' Dimension variables to be used in this function.
   Dim CurFile As String
   Dim savefilename
   Dim CellText As String
   Dim RowNum As Long
   Dim ColNum As Long
   Dim FNum As Integer
   Dim totalRows As Double
   Dim TotalCols As Double
      
   
   ' Show Save As dialog box with the .TXT file name as the default.
   ' Test to see what kind of system this macro is being run on.
   If Left(Application.OperatingSystem, 3) = "Win" Then
      savefilename = Application.GetSaveAsFilename(CurFile, _
      "Text Delimited (*.txt), *.txt", , "Text Delimited Exporter")
   Else
       savefilename = Application.GetSaveAsFilename(CurFile, _
      "TEXT", , "Text Delimited Exporter")
   End If
   
   ' Check to see if Cancel was clicked.
      If savefilename = False Then
         WriteMemberCustomFile = "Canceled"
         Exit Function
      End If
   ' Obtain the next free file number.
      FNum = FreeFile()
   
   ' Open the selected file name for data output.
      Open savefilename For Output As #FNum
   
   ' Store the total number of rows and columns to variables.
      totalRows = MemCnt + 1
      TotalCols = UBound(clm)
   
   ' Loop through every cell, from left to right and top to bottom.
      For RowNum = 2 To totalRows
         For ColNum = 0 To TotalCols
            Dim CustomVal, CustomCode As String
            Dim Xlcol As Integer
            Xlcol = clm(ColNum)
            CustomVal = shtMemmber.Cells(RowNum, Xlcol)
            CustomCode = GetTableRow("tblCustomeFieldConfig", 9, Xlcol).Cells(1, 2)
            
            If CustomVal <> "" Then
            
                 Print #FNum, shtMemmber.Cells(RowNum, 1).Text & Space(15 - Len(shtMemmber.Cells(RowNum, 1).Text));
                 Print #FNum, shtMemmber.Cells(RowNum, 2).Text & Space(25 - Len(shtMemmber.Cells(RowNum, 2).Text));
                 Print #FNum, shtMemmber.Cells(RowNum, 23).Text & Space(6 - Len(shtMemmber.Cells(RowNum, 23).Text));
                 Print #FNum, shtMemmber.Cells(RowNum, 10).Text & Space(10 - Len(shtMemmber.Cells(RowNum, 10).Text));
                 Print #FNum, Space(15);
                 
                 
                 
                 
                ' Store the current cells contents to a variable.
                 ' Write the contents to the file.
                 ' With or without quotation marks around the cell information.
                 Print #FNum, CustomCode & Space(6 - Len(CustomCode));
                 Print #FNum, CustomVal & Space(300 - Len(CustomVal));
                 
                 ' Update the status bar with the progress.
                 Application.StatusBar = Format((((RowNum - 1) * TotalCols) _
                    + ColNum) / (totalRows * TotalCols), "0%") & " Completed. " & RowNum & "-" & ColNum
                 'DoEvents
                 If Not (RowNum = totalRows And ColNum = TotalCols) Then Print #FNum, ""
            End If
        ' Loop to the next column.
         Next ColNum
        ' Add a linefeed character at the end of each row.
         
        ' Loop to the next row.
      Next RowNum
   
   ' Close the .prn file.
      Close #FNum
   
   ' Reset the status bar.
      Application.StatusBar = False
      WriteMemberCustomFile = "Exported"
      GoTo errend
errr:

MsgBox "Error found at Col " & ColNum & ", Row " & RowNum & vbNewLine & Err.Description, vbCritical, AppName + "-Export Text"
WriteMemberCustomFile = "Cancelled"
errend:
    Close #FNum
End Function


Function WriteMemberStandardFile(clm, MemCnt As Long, isOffline As Boolean) As String
   On Error GoTo errr
   ' Dimension variables to be used in this function.
   Dim CurFile As String
   Dim savefilename
   Dim CellText As String
   Dim RowNum As Long
   Dim ColNum As Long
   Dim FNum As Integer
   Dim totalRows As Double
   Dim TotalCols As Double
      
   
   ' Show Save As dialog box with the .TXT file name as the default.
   ' Test to see what kind of system this macro is being run on.
   If Left(Application.OperatingSystem, 3) = "Win" Then
      savefilename = Application.GetSaveAsFilename(CurFile, _
      "Text Delimited (*.txt), *.txt", , "Text Delimited Exporter")
   Else
       savefilename = Application.GetSaveAsFilename(CurFile, _
      "TEXT", , "Text Delimited Exporter")
   End If
   
   ' Check to see if Cancel was clicked.
      If savefilename = False Then
         WriteMemberStandardFile = "Canceled"
         Exit Function
      End If
   ' Obtain the next free file number.
      FNum = FreeFile()
   
   ' Open the selected file name for data output.
      Open savefilename For Output As #FNum
   
   ' Store the total number of rows and columns to variables.
      totalRows = MemCnt + 1
      TotalCols = UBound(clm(0))
   
   ' Loop through every cell, from left to right and top to bottom.
      For RowNum = 2 To totalRows
         For ColNum = 0 To TotalCols
            Dim Xlcol As Integer
            Xlcol = clm(0)(ColNum)
            Dim txt As String
            If Xlcol = 36 Then
                txt = ""
            ElseIf Not isOffline Then
                If (Xlcol = 1 Or Xlcol = 2 Or Xlcol = 21 Or Xlcol = 23 Or Xlcol = 25) Then
                    txt = shtMemmber.Cells(RowNum, Xlcol)
                Else
                    txt = ""
                End If
            Else
                txt = shtMemmber.Cells(RowNum, Xlcol)
            End If
            
            Dim ColWidth As Integer
            ColWidth = clm(1)(ColNum)
            
            ' Store the current cells contents to a variable.
            CellText = txt & Space(ColWidth - Len(txt))

            ' Write the contents to the file.
            ' With or without quotation marks around the cell information.
            Print #FNum, CellText;
            
            ' Update the status bar with the progress.
            Application.StatusBar = Format((((RowNum - 1) * TotalCols) _
               + ColNum) / (totalRows * TotalCols), "0%") & " Completed. " & RowNum & "-" & ColNum
            'DoEvents
        ' Loop to the next column.
         Next ColNum
        ' Add a linefeed character at the end of each row.
         If RowNum <> totalRows Then Print #FNum, ""
        ' Loop to the next row.
      Next RowNum
   
   ' Close the .prn file.
      Close #FNum
   
   ' Reset the status bar.
      Application.StatusBar = False
      WriteMemberStandardFile = "Exported"
      GoTo errend
errr:

MsgBox "Error found at Col " & ColNum & ", Row " & RowNum & vbNewLine & Err.Description, vbCritical, AppName + "-Export Text"
WriteMemberStandardFile = "Cancelled"
errend:
    Close #FNum
End Function



Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{B0FE3B97-1E0C-4D48-9A2C-490532164078}{4D3BE654-9B03-49C9-964C-CCA54D43769B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
lblText = "0%"
lblBar.Height = Me.Height
lblBar.Top = 0
lblBar.Left = 0
lblBar.Width = 0
End Sub

Public Sub setPercentage(percentage As Integer)
lblText.Caption = percentage & "%"
lblBar.Width = (Me.Width / 100) * percentage
Me.Repaint
End Sub
Attribute VB_Name = "frmSheetTypeSelection"
Attribute VB_Base = "0{8D002499-08BF-4A42-96C7-DAB09A0A7D28}{2642BDD9-186A-465A-9378-5B230A9C43C5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
    ' DISPLAY ERROR MSG IF USER DOESN'T SELECT ANY PLAN
    If Not (obADBP.Value Or obEBP.Value Or obEP.Value) Then
        MsgBox "Please select a valid plan first", , "Plan Selection"
    Else
        'SET SELECTED PLAN VALUE
        Call SetPlan
        resetValidation
        setAppTitle
        Unload Me
    End If
End Sub


Private Sub Label2_Click()

End Sub

Private Sub UserForm_Initialize()
lblVersion.Caption = getSheetVersion
Select Case getCurrentSheetPlanType
Case PlanType.EBP
    obEBP.Value = True
Case PlanType.EP
    obEP.Value = True
Case PlanType.ADBP
    obADBP.Value = True
    End Select
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, _
  CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    If Not (obADBP.Value Or obEBP.Value Or obEP.Value) Then
        Cancel = False
        If getCurrentSheetPlanType = ADBP Or getCurrentSheetPlanType = EBP Or getCurrentSheetPlanType = EP Then
        Else
            Dim ans As String
            ans = MsgBox("Plan selection is mandatory" & vbNewLine & "Click Cancel to select a plan", vbQuestion + vbDefaultButton2 + vbOKCancel, msgTitle)
            If ans = vbCancel Then
                Cancel = True
            Else
                Application.EnableEvents = True
                ActiveWorkbook.Close savechanges:=False
            End If
        End If
    Else
        Cancel = False
        
        'SET SELECTED PLAN VALUE
        Call SetPlan
    End If
  End If
End Sub

Private Sub SetPlan()
    ' UNPROTECT THE SHEET
     protectSheet shtMemmber, "itdaman", False
    protectSheet shtListOfValues, "D@m@nIT", False
    
    Dim Col As Integer
    Col = Range("PlanCategories").Column
    
    'CLEAR PLAN CATEGORIES & PLAN CATEGORIES MAPPING COLUMNS
    'Range("PlanCategories").Cells.ClearContents
    shtListOfValues.Columns((Col + 1)).ClearContents
        
    If obADBP.Value Then
        'ALL RELATIONS SHOULD BE DISPLAY IF PLAN IS ABU DHABI/ENHANCED
        'shtListOfValues.Range("$B$1:$B$4")
        
        'G-SEC CHANGES: FOLLOWING UPDATED RELATIONS SHOULD BE DISPLAYED FOR ABU DHABI BASIC
        'CHANGING RELATIONS AS PER PMG0000546
        Names.item("RelationList").RefersTo = Names.item("ADBasicRelations").Value  'Names.item("ProdRelationList").Value
        
        selectedPlan = ADBP
        Range("PlanCategories").Cells.ClearContents
        shtMemmber.Range("M:M").Resize(Range("M:M").Rows.Count - 2, Range("M:M").Columns.Count).offset(rowoffset:=2).ClearContents
        
        'FOR ABU DHABI BASIC PLAN CATEGORY WILL BE "CATEGORY1". MAPPING WILL ALSO BE SET
        'G-SEC CHANGE. FOR ABU DHABI BASIC PLAN CATEGORY WILL BE "Abu Dhabi (I/O)/Mat" & "Abu Dhabi (I/O)/NoMat". MAPPING WILL ALSO BE SET
        shtListOfValues.Cells(1, Col) = "CATEGORY1"
        shtListOfValues.Cells(1, (Col + 1)) = shtListOfValues.Cells(3, 28) '"Abu Dhabi (I/O)/NoMat"
        
'        shtListOfValues.Cells(2, col) = "Abu Dhabi (I/O)/NoMat"
'        shtListOfValues.Cells(2, (col + 1)) = "Abu Dhabi (I/O)/NoMat"
    ElseIf obEBP.Value Then
        'ONLY PRINCIPAL SHOULD BE DISPLAY IF PLAN IS ABU DHABI/ENHANCED
        Names.item("RelationList").RefersTo = shtListOfValues.Range("$B$1:$B$1")
    
        selectedPlan = EBP
        Range("PlanCategories").Cells.ClearContents
        shtMemmber.Range("M:M").Resize(Range("M:M").Rows.Count - 2, Range("M:M").Columns.Count).offset(rowoffset:=2).ClearContents
        'PMG1236 - FOR EBP PLAN CATEGORIES WILL BE "EBP" AND "EBP WP". MAPPING WILL ALSO BE SET
        ' SETTING PLAN CATEGORIES & MAPPING
        shtListOfValues.Cells(1, Col) = "EBP"
        shtListOfValues.Cells(1, (Col + 1)) = "SP/Essential Benefits Plan/NoMat/0Ded/NoDental"
        
        shtListOfValues.Cells(2, Col) = "EBP WP"
        shtListOfValues.Cells(2, (Col + 1)) = "SP/Essential Benefits Plan/NoMat/0Ded/NoDental/WP"
    Else
        'ALL RELATIONS SHOULD BE DISPLAY IF PLAN IS ABU DHABI/ENHANCED
        Names.item("RelationList").RefersTo = shtListOfValues.Range("$B$1:$B$4")
        
        selectedPlan = EP
               
        ' FOR ENHANCED PLAN, CATEGORIES WILL BE DEFINED BY CUSTOMER
       If shtListOfValues.Cells(1, Col) = "EBP" Or shtListOfValues.Cells(1, Col) = "" Then
        Range("PlanCategories").Cells.ClearContents
        shtMemmber.Range("M:M").Resize(Range("M:M").Rows.Count - 2, Range("M:M").Columns.Count).offset(rowoffset:=2).ClearContents
        shtListOfValues.Cells(1, Col) = " "
       End If
    End If
    
    'STORE SELECTED PLAN IN HIDDEN SHEET
    shtListOfValues.Range("SelectedPlanItem").Cells(1, 1) = selectedPlan
    Dim currentSheetFormat As SheetFormat
    currentSheetFormat = GetCurrentSheetFormat

    Call AdjustPlanColumns(selectedPlan, currentSheetFormat, currentSheetFormat)

    'PROTECT SHEET
    protectSheet shtMemmber, "itdaman", True
    protectSheet shtListOfValues, "D@m@nIT", True

End Sub
Attribute VB_Name = "frmSplash"
Attribute VB_Base = "0{4B4D6AB1-F82E-4E9D-B3D1-98BC16E547E2}{F03E6AAE-E3D0-4843-AAB0-2FFBCE2DB915}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
Unload Me
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
lblAppVer.Caption = getSheetVersion
End Sub

' InQuest injected base64 decoded content
' *'~(
' Qzj/x7
' *'jT

INQUEST-PP=macro
