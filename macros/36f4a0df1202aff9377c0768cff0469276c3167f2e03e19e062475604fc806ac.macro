Attribute VB_Name = "DateiHandling"
Sub ZeigOptionen()

    Optionen.Show

End Sub
    
'-------------------------------------------------------------------------------------Pfad erzeugen f|fffd|r HolDateien ist hart--> C:\temp\Bom_Temp--------------------------------------------
    
'Routine zum Erzeugen von Pfaden. Wenn sie aus HolDateien kommt, sind viele Abfragen hier |fffd|berfl|fffd|ssig denn HolDateien |fffd|bergibt hart MachPfad ("c:\temp\BOM_TEMP") den Pfad
Sub MachPfad(pfad As String) 'Var Pfad kommnt schon mit c:\temp\bom_temp
'legt c:\temp\Bom_temp
    
Dim einzeln() As String
Dim anzahl, zeile, n As Integer

    ' Pr|fffd|fen ob Pfad am Ende ein Backslash enth|fffd|lt - wenn ja -> entfernen
    If Right(pfad, 1) = "\" Then pfad = Left(pfad, Len(pfad) - 1) 'Backslash am Ende des Pfades wird gel|fffd|scht
    
    ' Pfad in Einzelkomponenten zerlegen
    
    einzeln = Split(pfad, "\")
    anzahl = UBound(einzeln) 'Z|fffd|hlt die Dimensionen des Arrays; Pr|fffd|fung wieviele Ordner gleich anzulegen sind
    
    ' Pr|fffd|fen, ob es sich um ein ob es ein Netzwerkpfad ist.
    If Left(pfad, 2) = "\\" Then GoTo netzwerkpfad
    
    If UBound(einzeln) < 1 Then GoTo ende 'Wenn nur 0 dann ist es c:\; Ubound z|fffd|hlt die h|fffd|chste Dimension eines Arrays
    
    ' Pr|fffd|fen, ob die |fffd|bergeordneten Pfade schon existieren - wenn nicht werden diese angelegt.
    pfad = einzeln(0) & "\" '0 ist das Laufwerk
    For n = 1 To anzahl 'Pr|fffd|fung ob vorhanden
        pfad = pfad & einzeln(n) & "\"
        zeile = Dir(pfad, vbDirectory) 'Wenn es das c:\temp\ gibt wenn nicht leeren Ordner anlegen(MkDir); VbDir.. liefert Verzeichnisse zur|fffd|ck
        If zeile = "" Then 'Wenn Zeile = . dann gibt es das Dir
            MkDir (pfad)
        End If
    Next
    GoTo ende
    
netzwerkpfad:
       
    If anzahl < 3 Then GoTo ende ' Es k|fffd|nnen keine Root-Verzeichnisse auf den Servern ausgewertet werden.
    
    ' doppelten Leereintrag aus den Einzelkomponenten entfernen (enstanden bei Split durch "\\" am Pfadanfang)
    einzeln(0) = "\"
    For n = 1 To anzahl - 1
        einzeln(n) = einzeln(n + 1)
    Next
    
    pfad = einzeln(0) & "\" & einzeln(1) & "\"
    For n = 2 To anzahl - 1
        pfad = pfad & einzeln(n) & "\"
        zeile = Dir(pfad, vbDirectory)
        If zeile = "" Then
            MkDir (pfad)
        End If
    Next
      
       
ende:

End Sub

'-------------------------------------------------------------------------------------Kopieren von Dateien ins C:\temp\Bom_Temp--------------------------------------------
Sub HolDateien() 'aktiv doppeltangeklickte Zelle Spalte 2(DWG),3(TIFF) oder 4(PDF)

    
    Dim zeile As Double, n As Integer, viewer As String
    Dim meldung As Integer
    Dim ansage As String, datei As String, pfad As String
    Dim wshell As Object
    Dim Winfax As Boolean
    Dim DTyp
    DTyp = Array("", "", ".DWG", ".TIF", ".PDF")

    Set wshell = CreateObject("WScript.Shell") 'wird gebraucht um den Shell-Befehl aufzurufen

    'SheetSelect.Hide
    viewer = Dir("c:\windows\system32\shimgvw.dll") 'Standardviewer von Win wird festgelegt
    MachPfad ("c:\temp\BOM_TEMP") 'Sprung in die ReinerRoutine die Pfade erzeugt
    On Error Resume Next
    Kill ("c:\temp\BOM_TEMP\*.*")
    zeile = ActiveCell.Row 'gibt die Zeilennummer wieder auf der der Kursor steht
    Winfax = True
    For n = 1 To Cells(ActiveCell.Row, 5).Value 'Schleife fragt den Wert der Spalte E und damit Anzahl der Einzelbl|fffd|tter einer Zeichnung
        If ActiveCell.Column = 3 Then pfad = ActiveWorkbook.Path & "\TIFF\"
        If ActiveCell.Column = 2 Then pfad = ActiveWorkbook.Path & "\DWG\"
        If ActiveCell.Column = 4 Then pfad = ActiveWorkbook.Path & "\PDF\"
        datei = Cells(zeile, 15) & "B" & n & "_" & Cells(zeile, 16) & "_" & Cells(zeile, 17) & DTyp(ActiveCell.Column) 'z.B. 22505898B1_-_0.PDF
        FileCopy pfad & datei, "c:\temp\BOM_TEMP\" & datei
        
        'Im SpreadSheet "Optionen" wird der Wert gesetzt durch das Men|fffd| Add-Ins.St|fffd|li.Agile.Tiff-Betrachter w|fffd|hlen.Private Sub UserForm_Activate()
        If ActiveCell.Column = 4 And Sheets("Optionen").Cells(1, 2) <> 4 Then 'Der Wert wird nun aus SpreadSheet Optionen gibt an welcher Viewer benutzt werden soll 1=WinFaxviewer
            wshell.Run "c:\temp\BOM_TEMP\" & datei
            Winfax = False
            GoTo weiter
        End If
        If ActiveCell.Column = 2 And Sheets("Optionen").Cells(1, 2) <> 4 Then 'Wenn DWG doppelgeklickt
            'wshell.Run ("explorer.exe C:\temp\bom_temp\")
            Winfax = False
            GoTo weiter
        End If
        If Sheets("optionen").Cells(1, 2) = 4 Then
            Winfax = False
            GoTo weiter
        End If
        If (viewer = "" And Sheets("Optionen").Cells(1, 2) = 1) _
            Or Sheets("Optionen").Cells(1, 2) = 3 _
            Or (Dir("C:\Program Files\Common Files\Microsoft Shared\MODI\11.0\MSPVIEW.exe") = "" And Sheets("Optionen").Cells(1, 2) = 2) _
            Then
            wshell.Run "c:\temp\BOM_TEMP\" & datei
            Winfax = False
        ElseIf Sheets("Optionen").Cells(1, 2) = 2 And Dir("C:\Program Files\Common Files\Microsoft Shared\MODI\11.0\MSPVIEW.exe") <> "" Then
            meldung = Shell("C:\Program Files\Common Files\Microsoft Shared\MODI\11.0\mspview.exe c:\temp\bom_temp\" & datei, 1)
            Winfax = False
        End If
weiter:
        
    Next
    If Winfax Then wshell.Run ("c:\windows\system32\rundll32 shimgvw.dll,ImageView_Fullscreen c:\temp\BOM_TEMP\")
    If Sheets("optionen").Cells(1, 2) = 4 Or ActiveCell.Column = 2 Then wshell.Run ("explorer.exe C:\temp\bom_temp\")


End Sub
Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeClose(Cancel As Boolean)
        If Dir("c:\temp\bom_temp\") <> "" Then Kill ("c:\temp\BOM_TEMP\*.*")
End Sub

Private Sub Workbook_SheetCalculate___(ByVal Sh As Object) ' Sub wird nicht mehr gebraucht denn das einf|fffd|rben der Filter geht nicht mehr

Dim anzahl, startzeile, startspalte, _
    n As Integer

Dim wo As Variant
    
    If ActiveSheet.AutoFilterMode = True Then
        anzahl = ActiveSheet.AutoFilter.Filters.Count
        startzeile = ActiveSheet.AutoFilter.Range.Row
        startspalte = ActiveSheet.AutoFilter.Range.Column
    End If
    
    If ActiveSheet.AutoFilterMode = True Then
        For n = 1 To anzahl
            Cells(startzeile, startspalte + n - 1).Interior.ColorIndex = 44
            Cells(startzeile, startspalte + n - 1).Value = ""
        Next n
            
        For n = 1 To anzahl
            If ActiveSheet.AutoFilter.Filters(n).On Then
                
                Cells(startzeile, startspalte + n - 1).Interior.ColorIndex = 37
                Cells(startzeile, startspalte + n - 1).Value = "'" & ActiveSheet.AutoFilter.Filters(n).Criteria1
            End If
        Next n
        
    End If
    If Not ActiveSheet.FilterMode Then
        For n = 1 To anzahl
            Cells(startzeile, startspalte + n - 1).Interior.ColorIndex = 0
            Cells(startzeile, startspalte + n - 1).Value = ""
        Next n
        
    End If



End Sub


Private Sub menu_punkt(menu, button, makro As String, icon As Integer, Linie As Boolean)

n = Application.CommandBars.ActiveMenuBar.controls.Count
    For z = 1 To n
        If Application.CommandBars.ActiveMenuBar.controls(z).Caption = menu Then
            Menu_index = z
            GoTo check_button
        End If
    Next
    Set menupkt = Application.CommandBars.ActiveMenuBar.controls.Add _
                  (Type:=msoControlPopup, temporary:=True, before:=n)
    
    menupkt.Caption = menu
    Menu_index = menupkt.Index
        
check_button:
    
n = Application.CommandBars.ActiveMenuBar.controls(Menu_index).controls.Count
    
    For z = 1 To n
         Text = Application.CommandBars.ActiveMenuBar.controls(Menu_index).controls(z).Caption
         If Text = button Then Exit Sub
    Next
    
    Set befehlsbutton = Application.CommandBars.ActiveMenuBar.controls(Menu_index).controls.Add(Type:=msoControlButton)
    befehlsbutton.Caption = button
    befehlsbutton.OnAction = makro
    befehlsbutton.FaceId = icon
    befehlsbutton.BeginGroup = Linie

End Sub


Private Sub Workbook_Open()
    
    'Das Men|fffd| in AddIns-Ribbonbar wird aufgebaut.
    'Call menu_punkt("ST|fffd|LI-Agile", "Neue Abfrage starten", "Neue_Abfrage", 53, False)
    Call menu_punkt("ST|fffd|LI-Agile", "Nach Zeichnungen suchen", "Check_Existing_Files", 190, False)
    Call menu_punkt("ST|fffd|LI-Agile", "St|fffd|ckliste Gliedern", "gliederung", 192, False)
    Call menu_punkt("ST|fffd|LI-Agile", "St|fffd|ckliste aktualisieren", "date_it_up", 37, False)
    Call menu_punkt("ST|fffd|LI-Agile", "Info", "last_info", 1954, True)
    Call menu_punkt("ST|fffd|LI-Agile", "TIFF-Betrachter w|fffd|hlen", "ZeigOptionen", 1, True) 'Men|fffd| add-Ins-->ST|fffd|LI-AGILE-->Tif-Betrachter w|fffd|hlen
    
    'Abfrage mit welchem windowstool der User die Zeichnugen(TIF) |fffd|ffnen m|fffd|chte
    Select Case Sheets("Optionen").Cells(1, 2)
        Case 1
            Optionen.ViewerWinFax = True
        
        Case 3
            Optionen.ViewerStand = True
        Case 4
            Optionen.ViewerExpl = True
    End Select
    
    If Range("f9").Value = "" Then 'wenn die Zelle F9(Auftragsnummer) leer ist
        inordnung = False
        UserForm1.StartUpPosition = 2 'setzt das Formular in die Mitte des Fensters
        Load UserForm1 'Rufe aus Formulare UserForm1 auf
        UserForm1.Show
    End If

End Sub
Attribute VB_Name = "Infoboard"
Attribute VB_Base = "0{4C34EA00-27E0-4EEF-ACD1-8014D41C02C4}{4A565FB5-E380-4A87-B6B7-D5146CD72DFB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Label1_Click()

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "Modul1"
Public kennwort1 As String
Public kennwort2 As String

Sub date_it_up()

Dim a As Integer

    a = MsgBox("Daten aktualisieren (Dies kann einige Minuten dauern...)?", vbYesNo)
    If a = vbNo Then
    Exit Sub
    Else
        If ActiveSheet.AutoFilterMode Then ActiveSheet.AutoFilterMode = False
        Range("G11").Select
        Selection.QueryTable.Refresh BackgroundQuery:=False
        Rows("8:65536").Select
        Selection.AutoFilter
        Cells(4, 10).Value = Date & " - " & Time & " - " & Environ("Username")
        Cells(8, 7).Select
    End If
    

End Sub

'------------------------------------------------------- SQL-Abfrage zusammenbauen  ----------------------------------------------------------------

Sub Abfragestarten()

    
    'Cells(2, 7).Value = Format(Now(), "hh:mm:ss")
    
    
    If kennwort1 = "''" Then
       Exit Sub
    Else
        inordnung = True
'------------------------------------------------------- Alle Eintr|fffd|ge in der Tab l|fffd|schen  ----------------------------------------------------------------
        Rows("9:9").Select 'selektiert die Zeile 9 bis 9 es mu|fffd| ein Bereich angegeben werden auch wenn man nur eine Zeile selektieren will
        Range(Selection, Selection.End(xlDown)).Select 'erweitert den Bereich bis unten(was Excel kann)
        Selection.Delete Shift:=xlUp 'L|fffd|scht die selektierten Zeilen und auf die Frage von Excel wohin sollen die |fffd|berig gebliebenen geschoben werden. Antwort nach oben.
        Range("a2").Formula = "=SUBTOTAL(9,$a$9)" 'wird nicht mehr gebraucht
        Range("A9").Select
        
        'SQL String Aufbau die ersten Attribute
        FeldStrg1 = "V_SMS_EXCEL_STK_LIS1.BLATTANZAHL, " & _
                    "V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR, " & _
                    "V_SMS_EXCEL_STK_LIS1.SMS_KVP, " & _
                    "V_SMS_EXCEL_STK_LIS1.MASCHINE, " & _
                    "V_SMS_EXCEL_STK_LIS1.BEN1SPRACHE1, " & _
                    "V_SMS_EXCEL_STK_LIS1.BEN2SPRACHE1, " & _
                    "V_SMS_EXCEL_STK_LIS1.BEN1SPRACHE2, " & _
                    "V_SMS_EXCEL_STK_LIS1.BEN2SPRACHE2, " & _
                    "V_SMS_EXCEL_STK_LIS1.TYPABMESS, " & _
                    "V_SMS_EXCEL_STK_LIS1.LIEFERANT, " & _
                    "V_SMS_EXCEL_STK_LIS1.ARTIKELNR, " & _
                    "V_SMS_EXCEL_STK_LIS1.REVISION, " & _
                    "V_SMS_EXCEL_STK_LIS1.VERSION, " & _
                    "V_SMS_EXCEL_STK_LIS1.FORMAT, " & _
                    "V_SMS_EXCEL_STK_LIS1.ZFM"
                    
        FeldStrg2 = "V_SMS_EXCEL_STK_LIS1.MENGEPROMASCHINE, " & _
                    "V_SMS_EXCEL_STK_LIS1.MENGEPROEINHEIT, " & _
                    "V_SMS_EXCEL_STK_LIS1.KALKMENGE, " & _
                    "V_SMS_EXCEL_STK_LIS1.LAENGE, " & _
                    "V_SMS_EXCEL_STK_LIS1.BREITE, " & _
                    "V_SMS_EXCEL_STK_LIS1.GEWICHTPROMASCHINE, " & _
                    "V_SMS_EXCEL_STK_LIS1.GEWICHTPROEINHEIT, " & _
                    "V_SMS_EXCEL_STK_LIS1.EINHEIT, " & _
                    "V_SMS_EXCEL_STK_LIS1.STANDZEIT, " & _
                    "V_SMS_EXCEL_STK_LIS1.ZUSATZ"
    
        FeldStrg3 = "V_SMS_EXCEL_STK_LIS1.SMS_NORM, " & _
                    "V_SMS_EXCEL_STK_LIS1.SMS_DINNR, " & _
                    "V_SMS_EXCEL_STK_LIS1.WKSTBESCHR, " & _
                    "V_SMS_EXCEL_STK_LIS1.WKSTNUM, " & _
                    "V_SMS_EXCEL_STK_LIS1.WKSTNORM, " & _
                    "V_SMS_EXCEL_STK_LIS1.KUNDENZNR, " & _
                    "V_SMS_EXCEL_STK_LIS1.ABWARTPROD, " & _
                    "V_SMS_EXCEL_STK_LIS1.ABWKZ, " & _
                    "V_SMS_EXCEL_STK_LIS1.STORANL, " & _
                    "V_SMS_EXCEL_STK_LIS1.STORAE, " & _
                    "V_SMS_EXCEL_STK_LIS1.BESTNRMAT, " & _
                    "V_SMS_EXCEL_STK_LIS1.BESTPOSMAT, " & _
                    "V_SMS_EXCEL_STK_LIS1.LIEFNAMEMAT, " & _
                    "V_SMS_EXCEL_STK_LIS1.LIEFNRZWLAGER, " & _
                    "V_SMS_EXCEL_STK_LIS1.LIEFNRENDLAGER"
                    
                    
                
        FeldStrg4 = "V_SMS_EXCEL_STK_LIS1.PSESTATUS," & _
                    "V_SMS_EXCEL_STK_LIS1.ARTSTATUS, " & _
                    "V_SMS_EXCEL_STK_LIS1.TAG_NR ," & _
                    "V_SMS_EXCEL_STK_LIS1.VERSDAT ," & _
                    "V_SMS_EXCEL_STK_LIS1.KISTE, " & _
                    "V_SMS_EXCEL_STK_LIS1.LOT, " & _
                    "V_SMS_EXCEL_STK_LIS1.A_TEXT_GER, " & _
                    "V_SMS_EXCEL_STK_LIS1.B_TEXT_GER, " & _
                    "V_SMS_EXCEL_STK_LIS1.A_TEXT_ENG, " & _
                    "V_SMS_EXCEL_STK_LIS1.B_TEXT_ENG, " & _
                    "V_SMS_EXCEL_STK_LIS1.ETIKETT, " & _
                    "V_SMS_EXCEL_STK_LIS1.SMS_DOK_ART, " & _
                    "V_SMS_EXCEL_STK_LIS1.SMS_DOK_TYP, " & _
                    "T_PRO_DAT.SMS_EREC_FLAG, " & _
                    "T_PRO_DAT.EXP_CRTL_FLG"
    
           
        If kennwort2 <> "" Then 'Wenn AE ausgew|fffd|hlt
                   FromStrg = "  FROM PROD.V_SMS_EXCEL_STK_LIS1 V_SMS_EXCEL_STK_LIS1, PROD.T_PRO_DAT T_PRO_DAT  " & _
                       "WHERE (T_PRO_DAT.PROJ_ID = V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR) and (V_SMS_EXCEL_STK_LIS1.KENNWORT=" & kennwort1 & ") and (" & kennwort2 & ") and (T_PRO_DAT.LEV_IND<>'6080') " & _
                       "ORDER BY T_PRO_DAT.PROJ_ID"
                       
        ElseIf kennwort2 = "" And Left(kennwort1, 1) <> "*" Then 'Wenn keine Ae ausgew|fffd|hlt trotz Knopf Abfrage starten
                   FromStrg = "  FROM PROD.V_SMS_EXCEL_STK_LIS1 V_SMS_EXCEL_STK_LIS1, PROD.T_PRO_DAT T_PRO_DAT  " & _
                       "WHERE (T_PRO_DAT.PROJ_ID = V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR) and (V_SMS_EXCEL_STK_LIS1.KENNWORT=" & kennwort1 & ") and (T_PRO_DAT.LEV_IND<>'6080') " & _
                       "ORDER BY T_PRO_DAT.PROJ_ID"
                       
        ElseIf Left(kennwort1, 1) = "*" Then 'Wenn User PSE-direkteingabe gedr|fffd|ckt hat
                    kennwort1 = Mid(kennwort1, 2, Len(kennwort1) - 2) & "%'"
                    FromStrg = "  FROM PROD.V_SMS_EXCEL_STK_LIS1 V_SMS_EXCEL_STK_LIS1, PROD.T_PRO_DAT T_PRO_DAT  " & _
                       "WHERE (T_PRO_DAT.PROJ_ID = V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR) and (V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR LIKE " & kennwort1 & ") and (T_PRO_DAT.LEV_IND<>'6080') " & _
                       "ORDER BY T_PRO_DAT.PROJ_ID"
        End If
                       
        Debug.Print FromStrg
        
        'Daten werden wie bei Querry auf einmal ins Tabellenblatt geschrieben.
        With ActiveSheet.QueryTables.Add(Connection:= _
                "ODBC;DSN=ORAPRD35;UID=axareport;PWD=Report0;SERVER=oraprd35;", Destination:= _
                Range("e9"))
                .CommandText = "SELECT " & _
                    FeldStrg1 & ", " & _
                    FeldStrg2 & ", " & _
                    FeldStrg3 & ", " & _
                    FeldStrg4 & _
                    FromStrg
                    
                 'formatierung der Zelle
                .Name = Mid(kennwort1, 2, Len(kennwort1) - 2) & "_" & Format(Date, ("YYYY-MM-DD"))
                .FieldNames = False
                .RowNumbers = False
                .FillAdjacentFormulas = False
                .PreserveFormatting = True
                .RefreshOnFileOpen = False
                .BackgroundQuery = False
                .RefreshStyle = xlInsertDeleteCells
                .SavePassword = False
                .EnableEditing = False
                .SaveData = True
                .AdjustColumnWidth = False
                .RefreshPeriod = 0
                .PreserveColumnInfo = True
                .Refresh BackgroundQuery:=False
            End With
            
            
                       
            With Cells(2, 10)
                .Value = Mid(kennwort1, 2, Len(kennwort1) - 2) 'Apostrophe bei ProjNamen raus.
                .Font.Bold = True
                .Font.Size = 14
            End With
        End If
        
        If inordnung Then   'inordnung ist eine variable des boolean typ - Anweisung wird ausgef|fffd|hrt wenn inordnung wahr wird
            Rows("9:65536").Select 'Zeilen Selektieren
            Selection.Sort Key1:=Range("F9"), Order1:=xlAscending, Header:=xlNo, _
                OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
                DataOption1:=xlSortNormal 'dies ist der normale Sortierbefehl von Excel
            Cells(4, 10).Value = Date & " - " & Time & " - " & Environ("Username") 'Username des in Win angemeldeten Users wird oben im Sheet unterhalb des Ae-Namens eingepflegt
            If ActiveSheet.AutoFilterMode Then ActiveSheet.AutoFilterMode = False
            Rows("8:65536").Select
            Selection.AutoFilter
            Range("F8").Select 'Sprung nur damit der Kursor oben steht
            Range("A2").Formula = "=SUBTOTAL(9,A9)" 'Formel wird geschrieben um den Filter anzusto|fffd|en.
        End If
        
        dateiname = Environ("TEMP") & "\BOM_" & Mid(kennwort1, 2, Len(kennwort1) - 2) & "_" & Format(Date, ("YYYY-MM-DD")) & ".xls"  'Aufbau eines Dateinamens, der in den folgenden auskommentierten Zeilen zum speichern verwendet wird.
        On Error Resume Next
       ' MsgBox "Speichern unter wieder akitivieren!" 'Dies ist nur f|fffd|r den Workshop
        ActiveWorkbook.SaveAs Filename:=dateiname, FileFormat:=xlNormal, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False, CreateBackup:=False 'Speichern unter Befehl.
        UserForm1.Hide
        'meldung = MsgBox("> Save as wieder aktivieren < !!!", vbCritical)
        'Cells(3, 7).Value = Format(Now(), "hh:mm:ss")
        
    End Sub
    
'------------------------------------------------------- Zeichnungen suche & gefunden markieren --------------------------------------------------------------------------------------------------------------
    

Sub Check_Existing_Files() 'Men|fffd|punkt "St|fffd|li-Agile--> Nach Zeichnungen suchen" Kontrolle welche Tiffs PDFs und DWGs vorhanden sind.
'XLS Datei wird in Temp gespeichert dann wird geschaut ob es Tiff Dwg oder PDF Ordner gibt.

    Dim zeile, anzahl, n As Double
    Dim bereich As String
    Dim nil As Boolean
    Dim disk_drawing() As String 'Arraydeklaration
    
    'Set disk_drawing = Application.FileSearch
    verzeichnis = Application.ActiveWorkbook.Path
    
    If ActiveSheet.AutoFilterMode Then ActiveSheet.AutoFilterMode = False 'AuotFiler an?
    oldStatusBar = Application.DisplayStatusBar 'Statuszeile von excel wird gesichert
    Application.DisplayStatusBar = True 'Einschalten der Statusbar

    zeile = 9
    anzahl = 0
    zeilen = Sheets("St|fffd|ckliste").UsedRange.Rows.Count 'einlesen wieviele Zeilen in der Tab belegt sind
    Do While Cells(zeile, 6) <> "" 'z|fffd|hlt nochmal wieviele Zeilen die Excel-Tab hat
        anzahl = anzahl + 1
        zeile = zeile + 1
    Loop
    
    Range("a1:d1").Select 'Formeln von oben mit wei|fffd|en Text auf wei|fffd|en Hintergrund kopieren. Diese schauen nur nach Z-Teil und durch die Formeln schreiben zeichnungsnummer, DWG, TIFF,PDF
    Selection.Copy
    Range("a9:d" & anzahl + 9).Select 'Selektieren des Rages wo die Formeln von oben hinein kopiert werden sollen
    ActiveSheet.Paste 'Kopieren in den selektierten Range
    Selection.Copy 'dieser Rage wird in die Zwischenablage kopiert um nur noch die Werte und nicht die Formeln in den Zellen zu haben
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False 'Inhalte einf|fffd|gen mit Maskenweten
    Range("A9").Select
    Application.CutCopyMode = False 'Setzt den Kopiermodus in den Ursprungszustand zur|fffd|ck. Ist vielleicht unwichtig
    
'------------------------------------------------------- Tiff Zeichnungen suchen  --------------------------------------------------------------------------------------------------------------
    
tiff:
    
    Application.StatusBar = "Lese TIFF-Verzeichnis: " & verzeichnis & "\TIFF"
    
    datei = Dir(verzeichnis & "\tiff\*.tif") 'Tif-Ordner betreten; siehe Statusbar in Excel
    dzahl = 0
    Do While datei <> "" 'Dir gibt den aktuellen Dateinamens aus. Schleife solange bis keine Datei mehr im Dir ist.
        dzahl = dzahl + 1
        ReDim Preserve disk_drawing(dzahl) 'Re-dimenstioniert die Disk-Drawing Variable als Array. preserve beh|fffd|lt den alten Inhalt der Var
        disk_drawing(dzahl) = datei
        datei = Dir
    Loop
   
    If dzahl = 0 Then 'Wenn Verzeichnis nicht da oder dadrin keine Dateien
        bereich = "c9:c" & anzahl + 9
        Range(bereich).ClearContents 'Tiff-Eintr|fffd|ge aus Spalte C l|fffd|schen
        GoTo pdf 'wenn keine Tiff-Datei gefunden gehe in die Routine PDF
    End If
    
    zeile = 9
    Do While Cells(zeile, 6) <> "" 'Zeilenschleife
        'Application.StatusBar = "Pr|fffd|fe TIFF " & Zeile - 9 & " von " & anzahl
        antwort = Fortschritt(0, zeilen, zeile, True) 'Prozedursprung; Aufruf des Fortschrittsbalken in der Statuszeile von Excel
        Cells(zeile, 3).Select 'Sprung zum ersten blauen Tiff-Eintrag
        dateiname_sheet = Cells(zeile, 15) & "B1_" & Cells(zeile, 16) & "_" & Cells(zeile, 17) & ".TIF" 'Baut den Dateinamen auf
        nil = True
        If Cells(zeile, 19) = "Z" Then 'hier interessieren nur Z-Teil

            For n = 1 To dzahl 'Schleife mit Anzahl der Dateien im Verz Tiff
                dateiname_disk = UCase(disk_drawing(n)) 'umwandeln in Gro|fffd|buchstaben
                If dateiname_sheet = dateiname_disk Then 'Vergleicht Dateinamen mit dem aktuellen Zellenwert
                    nil = False 'Wenn Dateinamen gefunden nil(not in List) dann For-Schleife verlassen
                    Exit For
                End If
            Next n
            
            If nil Then Cells(zeile, 3).Value = Null 'Wenn keine Datei gefunden den Wert Tiff aus Spalte C entfernen
                
        End If
        zeile = zeile + 1
    Loop
    
'------------------------------------------------------- PDF Zeichnungen suchen  --------------------------------------------------------------------------------------------------------------

pdf: 'Routine ist eine Kopie der Tiff-Routine

    Application.StatusBar = "Lese PDF-Verzeichnis: " & verzeichnis & "\PDF" 'Meldung in der Statuszeile
    
    datei = Dir(verzeichnis & "\pdf\*.pdf")
    dzahl = 0
    Do While datei <> ""
        dzahl = dzahl + 1
        ReDim Preserve disk_drawing(dzahl)
        disk_drawing(dzahl) = datei
        datei = Dir
    Loop
   
    If dzahl = 0 Then
        bereich = "d9:d" & anzahl + 9
        Range(bereich).ClearContents
        GoTo dwg
    End If
    
    zeile = 9
    Do While Cells(zeile, 6) <> ""
        'Application.StatusBar = "Pr|fffd|fe TIFF " & Zeile - 9 & " von " & anzahl
        antwort = Fortschritt(0, zeilen, zeile, True)
        Cells(zeile, 4).Select
        dateiname_sheet = Cells(zeile, 15) & "B1_" & Cells(zeile, 16) & "_" & Cells(zeile, 17) & ".PDF"
        nil = True
        If Cells(zeile, 19) = "Z" Then

            For n = 1 To dzahl
                dateiname_disk = UCase(disk_drawing(n))
                If dateiname_sheet = dateiname_disk Then
                    nil = False
                    Exit For
                End If
            Next n
            
            If nil Then Cells(zeile, 4).Value = Null
                
        End If
        zeile = zeile + 1
    Loop
    
' Dateien werden in MicroSoft Excel Objekte.Tabelle1.Private Sub Worksheet_BeforeDoubleClick.. zusammengesucht und Sprung in Module.Dateihandling
    

'------------------------------------------------------- DWG Zeichnungen suchen  --------------------------------------------------------------------------------------------------------------


dwg: 'Routine ist eine Kopie der Tiff-Routine
    
    Application.StatusBar = "Lese DWG-Verzeichnis: " & verzeichnis & "\DWG"
    
    datei = Dir(verzeichnis & "\dwg\*.dwg")
    dzahl = 0
    Do While datei <> ""
        dzahl = dzahl + 1
        ReDim Preserve disk_drawing(dzahl)
        disk_drawing(dzahl) = datei
        datei = Dir
    Loop
    
     
    If dzahl = 0 Then
        bereich = "b9:b" & anzahl + 9
        Range(bereich).ClearContents
        GoTo ende 'springe am Ende in die Fehlerroutine ende:
    End If
    
    zeile = 9
    Do While Cells(zeile, 6) <> ""
        'Application.StatusBar = "Pr|fffd|fe TIFF " & Zeile - 9 & " von " & anzahl
        antwort = Fortschritt(0, zeilen, zeile, True)
        Cells(zeile, 2).Select
        dateiname_sheet = Cells(zeile, 15) & "B1_" & Cells(zeile, 16) & "_" & Cells(zeile, 17) & ".DWG"
        nil = True
        If Cells(zeile, 19) = "Z" Then

            For n = 1 To dzahl
                dateiname_disk = UCase(disk_drawing(n))
                If dateiname_sheet = dateiname_disk Then
                    nil = False
                    Exit For
                End If
            Next n
            
            If nil Then Cells(zeile, 2).Value = Null
                
        End If
        zeile = zeile + 1
    Loop

ende:

    Cells(9, 1).Select 'setzt den Kursor in die erste Zelle. Nice for user
    Application.StatusBar = False
    Application.DisplayStatusBar = oldStatusBar 'Statusbar auf den oben gespeicherten Wert zur|fffd|cksetzen.
    Rows("8:65536").Select 'Selektieren aller Zeilen f|fffd|r den Autofilter
    Selection.AutoFilter
    Range("G8").Select
    Range("A2").Formula = "=SUBTOTAL(9,A9)"
    
End Sub

'Men|fffd|punkt verworfen
Sub neue_Abfrage()

    Load UserForm1
    UserForm1.Show

End Sub



Sub gliederung() 'Gliederung und Farbe in die Tabelle bringen.

Dim n As Integer
Dim farbe(9) As Integer

farbe(1) = 41
farbe(2) = 42
farbe(3) = 40
farbe(4) = 39
farbe(5) = 38
farbe(6) = 37
farbe(7) = 36
farbe(8) = 35
farbe(9) = 34

    n = 9
    Do While Cells(n, 7) <> ""
        ActiveSheet.Rows(n).OutlineLevel = (Len(Cells(n, 6)) - 4) / 4 'Gliederungsstufe
        ActiveSheet.Rows(n).Interior.ColorIndex = farbe((Len(Cells(n, 6)) - 4) / 4) 'Hintergrundfarbe setzen
        Rows(n).Select
        n = n + 1
    Loop
     Cells(9, 6).Select
            
End Sub


Sub last_info()

    Infoboard.Show

End Sub


'------------------------------------------------------- Fortschrittsbalken in der Statuszeile --------------------------------------------------------------------------------------------------------------


Function Fortschritt(min, max, wert As Variant, AnAus As Boolean) As String
     
    Dim x               As Integer
    Dim Zahl            As Integer
    Dim zeile           As String
    Dim balken          As String
    
    If AnAus = False Then
        Application.StatusBar = False
        Fortschritt = "ausgeschaltet"
        Exit Function
    End If
    
    Select Case wert
        Case Is < min
            Fortschritt = "Wert < min"
            Exit Function
        Case Is > max
            Fortschritt = "Wert > max"
            Exit Function
    End Select
    
    Zahl = Round(((1 - (max - wert) / (max - min)) * 100), 0)
    balken = ""
    For x = 1 To Zahl
        balken = balken & "|"
    Next
    Do While Len(balken) < 100
        balken = balken & "-"
    Loop
    zeile = Zahl & " % " & balken
    Application.StatusBar = zeile
    DoEvents
          
End Function

Attribute VB_Name = "Modul3"
Option Explicit

Sub t()
Dim n As Integer

For n = 1 To 57

    Debug.Print Environ(n)
    
Next
End Sub


Attribute VB_Name = "Optionen"
Attribute VB_Base = "0{97A00004-2A9D-4002-B482-D824AE376FF0}{DB88F524-2B95-4B1F-9C74-72D2631AA59E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub Auswahl_Click() ' wird nicht verwendet
    Dim Anwendung As String
    Anwendung = Application.GetOpenFilename("Anwendungen, (*.exe)", , "Anwendung ausw|fffd|hlen")
    Sheets("Optionen").Cells(2, 2) = Anwendung
    Optionen.TextBox1.Value = Anwendung
End Sub

Private Sub CommandButton1_Click()
    Optionen.Hide
End Sub


Private Sub UserForm_Activate()     'mit der Aktivierung der Userform wird die gegenw|fffd|rtig gew|fffd|hlte Option im Auswahlkasten aktiviert
    
    Select Case Sheets("Optionen").Cells(1, 2) 'auslesen der Zelle B1 zur Bestimmung des Falls (case)
        Case 1
            Optionen.ViewerWinFax = True
        Case 3
            Optionen.ViewerStand = True
        Case 4
            Optionen.ViewerExpl = True
    End Select
End Sub

Private Sub ViewerWinFax_Click()
    If ViewerWinFax Then Sheets("Optionen").Cells(1, 2) = 1
End Sub

Private Sub ViewerImag_Click()
    If ViewerImag Then Sheets("Optionen").Cells(1, 2) = 2
End Sub

Private Sub ViewerStand_Click()
    If ViewerStand Then Sheets("Optionen").Cells(1, 2) = 3
End Sub


Private Sub ViewerExpl_Click()
    If ViewerExpl Then Sheets("Optionen").Cells(1, 2) = 4
End Sub
Attribute VB_Name = "SheetSelect"
Attribute VB_Base = "0{C0A278D0-45CE-4C4A-83D2-C8BE13A32DFC}{9C8A161F-09F9-47A4-9D56-D3EB8616D224}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public SView As Boolean



Private Sub AllButton_Click()
    Dim n As Integer
    For n = 1 To 40
        If SheetSelect.controls("CheckBox" & n).Visible Then SheetSelect.controls("CheckBox" & n) = True
    Next
End Sub

Private Sub CheckBox10_Click()

End Sub

'Wird nicht gebraucht. Sollte f|fffd|r die Zeichnungsblattauswahl sein. Wurde verworfen
Private Sub CheckBox32_Click()

End Sub

Private Sub ClearButton_Click()
    Dim n As Integer
    For n = 1 To 40
        If SheetSelect.controls("CheckBox" & n).Visible Then SheetSelect.controls("CheckBox" & n) = False
    Next
End Sub

Private Sub Label35_Click()

End Sub

Private Sub OpenButton_Click()
    Call HolDateien
End Sub

Private Sub UserForm_Activate()

Dim n As Integer
Dim hoehe As Integer
Dim anzahl As Integer

    anzahl = Cells(ActiveCell.Row, 5)

    For n = 1 To 40
        SheetSelect.controls("CheckBox" & n) = False
        SheetSelect.controls("CheckBox" & n).Visible = True
    Next
    For n = 1 To anzahl
        SheetSelect.controls("CheckBox" & n) = True
    Next
    For n = anzahl + 1 To 40
        SheetSelect.controls("CheckBox" & n).Visible = False
        'SheetSelect.controls("Label" & n).Visible = False
    Next
    SheetSelect.Height = 55 + WorksheetFunction.RoundUp(anzahl / 10, 0) * 23

End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

'------------------------------------------------------- Auf Doppelklick reagieren (Zeichnungsdateien holen)--------------------------------------------------------------------------------------------------------------


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    
    ActiveCell.Select
    If ActiveCell.Column = 3 And ActiveCell.Value = "TIFF" Then 'Wenn in Spalte 3 irgendwo Doppelgeklickt wurde und in dieser Zelle TIFF steht dann keine Zellenbearbeitung sondern Sprung in HolDateien
        Cancel = True 'geht mit Doppelklick nicht in Zellen bearbeiten(F2) sondern f|fffd|hrt
        Call HolDateien
    End If
    
    If ActiveCell.Column = 4 And ActiveCell.Value = "PDF" Then
        Cancel = True
        Call HolDateien 'Sprung in Module.Dateihandling
    End If
    
    If ActiveCell.Column = 2 And ActiveCell.Value = "DWG" Then
        Cancel = True
        Call HolDateien
    End If
    
End Sub

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{116BBF03-744A-4781-A397-67F421D0E426}{01C92D5C-BD35-4333-B513-7F675DD133DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public sortspalte As Integer

Private Sub Abbruch_Click()
    'end - funktioniert nich unter WIN7
    UserForm1.Hide
     
End Sub

Private Sub Auswahl_Click() 'Routine(Knopf Abfrage starten) in der man die Auswahl der Listbox2 auswertet und das SQL-Command schreibt; unter Kennwort2 ist das SQL-Command
    
    If ListBox1.ListIndex = -1 Then Exit Sub 'Wenn nichts ausgew|fffd|hlt ist und "Abfrage ausf|fffd|hren" gedr|fffd|ckt worden ist dann raus aus der ganzen Proc
    kennwort1 = "'" & ListBox1.Value & "'" 'aus 4712 ProjektB wird '4712 ProjektB'
    
    If ListBox2.ListCount = 0 Then 'Wenn listbox2 keine Zeilen hat (listcount z|fffd|hlt die Zeilen in der Box)
        kennwort2 = "" 'unter Kennwort2 ist das SQL-Command
        
    ElseIf ListBox2.ListCount = 1 Then 'Wenn ListCount nur eine Zeile z|fffd|hlt. Also sowieso nur 1 Zeile da ist allso ---Alle---
        kennwort2 = ""
        
    ElseIf ListBox2.ListCount > 1 Then 'Wenn Listbox 2 mehr als nur ----Alle--- hat
        erstes = False
        For i = 0 To ListBox2.ListCount - 1 ' i=0 ist der Wert ---Alle---; -1 da der Z|fffd|hler bei 0 anf|fffd|ngt; ListCount z|fffd|hlt die Zeilem
            If ListBox2.Selected(i) And Not erstes Then 'Ist eine AE selektiert und habe ich das erste schon hinter mir
                kennwort2 = ListBox2.List(i)
                If kennwort2 = "--- Alle ---" Then
                    kennwort2 = ""
                    Call Abfragestarten 'Sprung ins Modul1
                End If
                kennwort2 = "V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR like " & "'" & kennwort2 & "%'" 'Aufbau des SQL-Commands beim ersten Durchgang noch kein OR
                erstes = True
            
            ElseIf ListBox2.Selected(i) And erstes Then ' Wenn z.B. n=2 ist: also ist die 2 Zeile ausgew|fffd|hlt und die erste ausgew|fffd|hlte Zeile schon abgearbeitet wurde
                kennwort2 = kennwort2 & " or V_SMS_EXCEL_STK_LIS1.AUFTRAGSNR like " & "'" & ListBox2.List(i) & "%'"
            End If
        Next
    End If
    'MsgBox kennwort1
    'MsgBox kennwort2
    Call Abfragestarten 'Ruft Proc oder Func aus Modul1 auf
    End
    
End Sub

Private Sub CommandButton1_Click() 'Routine wenn die PSENummer manuell eingegeben wird mit dem Knopf "PSE Direkteingabe"

    UserForm1.Hide
    kennwort2 = ""
    kennwort1 = InputBox("|fffd|bergeordnetes PSE eingeben:", "PSE")
    If kennwort1 <> "" Then
        kennwort1 = "*'" & kennwort1 & "'"
    Else
        UserForm1.Show
        Exit Sub
    End If
    Call Abfragestarten
    
End Sub


Private Sub CommandButton2_Click() 'Pfeil f|fffd|r Sortierung f|fffd|r die 1Spalte
    sortspalte = 0
    Call sortLis2
End Sub

Private Sub CommandButton3_Click() 'Pfeil f|fffd|r Sortierung f|fffd|r die 2Spalte
    sortspalte = 1
    Call sortLis2
End Sub

Private Sub CommandButton4_Click() 'Pfeil f|fffd|r Sortierung f|fffd|r die 3Spalte die aber standardm|fffd||fffd|ig sowieso sortiert wird
    sortspalte = 2
    Call sortLis2
End Sub

Private Sub Image1_Click()

End Sub

Private Sub Label3_Click()

End Sub

Sub ListBox1_Change() 'Sprung hierhin nachdem ein Projekt in der ListBox1 ausgew|fffd|hlt wurde;
    Call sortLis2
    
End Sub

Private Sub ListBox1_Enter() ' Routine zum Einlesen der Projektnamen aus Datei PKWs_tab.txt; hinhin gesprungen aus DieseArbeitsmappe.Private Sub Workbook_Open()

Dim z As Integer
Dim text1, text2 As String
sortspalte = 2
    z = 3
   
    On Error GoTo raushier
    '******** Pfad anpassen *********************
    'Open "M:\alk_Alle\Vorlagen\St|fffd|cklisten aus AXALANT\ProDats\PKWs_tab.txt" For Input As #1   --> hart codierter Pfad ist in Wien nicht zu gebrauchen gewesen.
    
'-------------------------------------------------------Datei PKWs_tab.txt auslesen Routine------------------------------------------------------------------------------------
'Beispiel Datei PKWs_tab.txt
'4711 ProjektA
'4712 ProjektB
'4713 ProjektC


    Open ActiveWorkbook.Path & "\ProDats\PKWs_tab.txt" For Input As #1 'Pfad nicht hart codiert. Dateien werden gesucht im DIR wo dieses ExcelSheet liegt
    '******** Pfad anpassen *********************
    
        Do While Not EOF(1) 'liest aus Datei m:\alk_Alle\Vorlagen\St|fffd|cklisten aus AXALANT\BETA\ProDats\PKWs_tab.txt die Eintr|fffd|ge f|fffd|r die (linke Seite) Projektkennw|fffd|rter
            Line Input #1, zeile 'z.B.4711 ProjektA
            ListBox1.AddItem zeile
        Loop
    
    Close #1 'ge|fffd|ffnete Datei PKS.. wird wieder geschlossen
    Exit Sub 'nun wartet die Userform1 auf eine Aktion, also auf die Auswahl eines Projektes. Nach Auswahl Projektes Sprung in die Proc Sub ListBox1_Change() und dort Call Sortlis2

raushier:
    antwort = MsgBox("Datei PKWs_tab.txt nicht gefunden", vbCritical, "Abbruch")
    End
    
End Sub

'-------------------------------------------------------AEs_tab.txt wird gelesen & Listbox2 wird gef|fffd|llt-------------------------------------------------------------------
'
'
'aufgerufen durch anklicken eines projNamens in der Listbox1 damit ausgel|fffd|st Sub ListBox1_Change;  F|fffd|r die 3 Pfeile in Userform1;  Eintr|fffd|ge m|fffd|ssen sortiert werden
Sub sortLis2()

Dim hilf As String
Dim z, n As Integer
Dim liste(800, 2) As String 'Array mit 3 Spalten von 0-2
Dim zaehler As Integer

    
    kennwort1 = ListBox1.Value 'Projname aus Listbox1 also aus Datei PKWs_tab.txt
        
    'Einrichten der Listbox2 3Spalten und oben mit Dim liste(800, 2) 800 Zeilen(man hat die 800 gew|fffd|hlt weil es kein Proj gab mit sovielen AEs) neu w|fffd|rde man das mit Befehl Redim machen
    ListBox2.Clear
    ListBox2.ColumnCount = 3
    ListBox2.ColumnWidths = "3 cm; 4 cm; 10 cm"
    hilf = "--- Alle ---"
    ListBox2.MultiSelect = fmMultiSelectExtended 'Anwender hat die M|fffd|glichkeit mehrere AE's anzu|fffd|hlen
    liste(0, 0) = hilf 'an erste Zeile der Liste kommt der Inhalt von hilf
    z = 2
    n = 1 'wird auf 1 gestellt denn in der Listbox2 steht in der ersten Zeile die --- Alle ---
    

'-------------------------------------------------------Datei AEs_tab.txt auslesen Routine--------------------------------------------------------------
'Beispiel f|fffd|r AEs_tab.txt
'4711 ProjektA   001    AE_001_ProjektA    Benenn2    Artikel_ProjA_AE001
'4712 ProjektB   001    AE_001_ProjektB    Benenn2    Artikel_ProjB_AE001
'4712 ProjektB   002    AE_002_ProjektB    Benenn2    Artikel_ProjB_AE002

    On Error GoTo raushier
    '*********** Pfad anpassen *****************
    'Open "M:\alk_Alle\Vorlagen\St|fffd|cklisten aus AXALANT\ProDats\AEs_tab.txt" For Input As #1
    Open ActiveWorkbook.Path & "\ProDats\AEs_tab.txt" For Input As #1 'Die zweite Datei(AE's zum ausgelesenen Projekt) wird ge|fffd|ffnet m:\alk_Alle\Vorlagen\St|fffd|cklisten aus AXALANT\BETA\ProDats\AEs_tab.txt #1=Dateiname mit Pfad.
    '*******************************************
    'Zweite Liste wird in die Variable liste() gelesen.
    Do While Not EOF(1)
        Line Input #1, zeile 'liest die Zeile aus Datei AEs_tab.txt (DateiName hei|fffd|t hier #1) in die Variable "zeile"
        datensatz = Split(zeile, vbTab) 'gelesene Zeile splitten in ein Array namens datensatz(0-4);  Trennzeichen f|fffd|r Spalten in der Datei ist Tab(VbTab)-->Beispiel 4711 ProjektA   001 AE_001_ProjektA Benenn2 Artikel_ProjA_AE001
        If datensatz(0) = kennwort1 Then 'pr|fffd|fen ob im Array0(der in diesem Augenblick gelesenen Zeile)der Projname |fffd|bereinstimmt mit dem ausgew|fffd|hlten Projekt aus Listbox1 entspricht Beispiel "4711 ProjektA";  datensatz(0)="4711 ProjektA" = kennwort1="4711 ProjektA"
            liste(n, 1) = datensatz(1) 'erste Spalte also 001 wird gelesen; n steht auf 1 denn in der Listbox2 steht in der ersten Zeile die liste(0)="--- Alle ---"
            liste(n, 2) = datensatz(2) & " " & datensatz(3) '"AE_001_ProjektA" und "Benenn2" zusammenf|fffd|gen Ergebnis="AE_001_ProjektB Benenn2"
            liste(n, 0) = datensatz(4) 'Artikel_ProjA_AE001
            n = n + 1
        End If
    Loop
    
    Close #1

    
    For z = n To 800 'die restlichen nicht gebrauchten Array-Werte werden nun mit ZZZ NonRelev f|fffd|llen. Dies war n|fffd|tig da am Anfang noch nicht bekannt ist wieviele AEs ein Projekt hat; 800 ist sehr hoch
        liste(z, 0) = "ZZZ NonRelev"
    Next
    'das Schreiben in listbox2 weiter unten(listbox2 f|fffd|llen) hinter der Sortierroutine


'-------------------------------------------------------Sortierroutine sortiert standardm|fffd||fffd|ig nach Pfeil3--------------------------------------------------------------
    
'Sortierroutine, Sortieren der listbox2 mit Hilfe der Pfeile also nach den 3 Spalten. Standardsortierung ist Spalt3 also Basic Spalte 2;
'sollte einer der Sortierpfeile bet|fffd|tigt worden sein, geht es oben in diesem Modul in die Knopf-Subroutine z.B."Private Sub CommandButton3_Click()" dort wird die Var sortspalte gesetzt
    zaehler = 1
    getauscht = True
    Do While getauscht = True
        getauscht = False
        For n = 1 To 799
            If UCase(liste(n, sortspalte)) > UCase(liste(n + 1, sortspalte)) Then 'Sortierung der Spalte 2+3 zu der n|fffd|chsten Zeile mit spalte 2+3
                hilf0 = liste(n, 0) 'hilfXX sind ZwischenSpeicherVariablen um den Wert nicht zu verlieren.
                hilf1 = liste(n, 1)
                hilf2 = liste(n, 2)
                
                liste(n, 0) = liste(n + 1, 0)
                liste(n, 1) = liste(n + 1, 1)
                liste(n, 2) = liste(n + 1, 2)
                
                liste(n + 1, 0) = hilf0
                liste(n + 1, 1) = hilf1
                liste(n + 1, 2) = hilf2
                
                getauscht = True
                                
            End If
        Next
        zaehler = zaehler + 1
    Loop
    
'------------------------------------------------------- listbox2 f|fffd|llen  ----------------------------------------------------------------
    z = 0

    For n = 0 To 800
        If liste(n, 0) <> "ZZZ NonRelev" Then 'ZZZ NonRelev-Eintr|fffd|ge sollen rausfliegen 'die Position 0 des Arrays wird verglichen
            ListBox2.AddItem 'Zeilen hinzuf|fffd|gen in die Listbox
            ListBox2.List(z, 0) = liste(n, 0) 'Spalte1 in der Listbox2 f|fffd|llen
            ListBox2.List(z, 1) = liste(n, 1) 'Spalte2 in der Listbox2 f|fffd|llen
            ListBox2.List(z, 2) = liste(n, 2) 'Spalte3 in der Listbox2 f|fffd|llen
            z = z + 1
        End If
    Next
    
    Exit Sub 'Nun geht es in End Sub und dann wartet VB auf eine Aktion. Sinnvollerweise auf Auswahl(oder vorher sortieren) in Listbox2 und Knopf
raushier: 'Ziel hierhin springt man von irgendwo im Code
    
    antwort = MsgBox("Datei AEs_tab.txt nicht gefunden", vbCritical, "Abbruch")
    End
End Sub

Private Sub ListBox2_Click()

End Sub

Private Sub UserForm_Click()

End Sub


INQUEST-PP=macro
