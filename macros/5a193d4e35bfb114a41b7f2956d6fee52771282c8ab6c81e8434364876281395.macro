Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "EHSR_Headline"
'Called by Table_Riskassessment when something changes in EHSR
'ApplyToColumn deal with column RAColl_HazardExists
'ApplyToColumn deal with column RAColl_HazardCovered
Sub ChangeEHSR(target As Range, Optional ApplyToColumn As String = "RAColl_HazardExists")
    
    Dim EHSRarray() As String
    EHSRarray = CreateEHSRarray(ApplyToColumn)

    Dim row_start As Long
    Dim row_end As Long
    Dim LastRow As Long
    
    row_start = target.row
    row_end = target.row + target.Rows.Count - 1
    
    LastRow = Table_RiskAssessment.ListObjects("Table_RiskAssessment").HeaderRowRange.row _
            + Table_RiskAssessment.ListObjects("Table_RiskAssessment").DataBodyRange.Rows.Count
    
    'if last line was manually deleted, array would be out of bounds later
    If row_end > LastRow Then
        Exit Sub
    End If
    
    Dim i As Long
    For i = row_start To row_end
        'check if headline
        'react to x and X
        If LCase(EHSRarray(i, 1)) = "x" Then
            'headline
            EHSRarray = ChangeApplyEHSRHeadline(EHSRarray, i, ApplyToColumn)
        End If
        'check if all sub headlines are same and apply to headlines
        EHSRarray = ChangeApplyEHSRSub(EHSRarray, i, ApplyToColumn)
    Next i
End Sub

'Creating a MultiDimensional
Private Function CreateEHSRarray(Optional ApplyToColumn As String = "RAColl_HazardExists") As String()

    Dim i As Long
    Dim endLoop As Long
    Dim Arr() As String


    endLoop = Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count + 5
    
    ReDim Arr(1 To endLoop, 1 To 5)
    
    For i = 6 To endLoop
        Arr(i, 1) = Table_RiskAssessment.Range("RAColl_Headline").Rows(i).Value
        Arr(i, 2) = Table_RiskAssessment.Range("RAColl_Directive").Rows(i).Value
        Arr(i, 3) = Table_RiskAssessment.Range("RAColl_EHSRNumber").Rows(i).Value
        Arr(i, 4) = Table_RiskAssessment.Range(ApplyToColumn).Rows(i).Value
        Arr(i, 5) = Table_RiskAssessment.Range("RAColl_HazardExists").Rows(i).Value
    Next i
    
    CreateEHSRarray = Arr
    
End Function


Private Function ChangeApplyEHSRHeadline(EHSRarray() As String, ChangedRow As Long, Optional ApplyToColumn As String = "RAColl_HazardExists") As String()

    Dim i As Long
    
    For i = LBound(EHSRarray) To UBound(EHSRarray)
        'if both items are from the same directive
        If EHSRarray(ChangedRow, 2) = EHSRarray(i, 2) Then
            'if the chapter number is a subnumber / sub chapter of the chaned one
            If EHSRarray(ChangedRow, 3) = Left(EHSRarray(i, 3), Len(EHSRarray(ChangedRow, 3))) Then
                EHSRarray(i, 4) = EHSRarray(ChangedRow, 4)
                Table_RiskAssessment.Range(ApplyToColumn).Rows(i).Value = EHSRarray(ChangedRow, 4)
            End If
        End If
    Next i

    ChangeApplyEHSRHeadline = EHSRarray
End Function

Private Function ChangeApplyEHSRSub(EHSRarray() As String, ChangedRow As Long, Optional ApplyToColumn As String = "RAColl_HazardExists") As String()
    Dim subHeadlines() As String
    Dim subContent() As String
    Dim ArrayDim As Integer
    Dim i As Integer
    Dim j As Integer
    Dim searchString As String
        
    'cut the last .
    searchString = Left(EHSRarray(ChangedRow, 3), Len(EHSRarray(ChangedRow, 3)) - 1)
    'split array
    subHeadlines = Split(searchString, ".")
    
    'creating an array with headlines and sub headlines
    'e.g. {1. , 1.2. , 1.2.4.} from 1.2.4.
    If UBound(subHeadlines) > 0 Then
        'putting the . back to base Headline
        subHeadlines(0) = subHeadlines(0) & "."
        If UBound(subHeadlines) > 0 Then
            For i = 1 To UBound(subHeadlines)
                'putting the headline back together
                subHeadlines(i) = subHeadlines(i - 1) & subHeadlines(i) & "."
            Next i
        End If
    End If
    
    'second array for content of headline
    ReDim subContent(0 To UBound(subHeadlines))
    For j = LBound(subContent) To UBound(subContent)
        If ApplyToColumn = "RAColl_HazardExists" Then
            subContent(j) = "-"
        Else
            subContent(j) = "x"
        End If
    Next j
    
    'checking all rows, what the content of the top headline needs to be
    'for every row
    For i = LBound(EHSRarray) To UBound(EHSRarray)
        'if both items are from the same directive
        If EHSRarray(ChangedRow, 2) = EHSRarray(i, 2) And LCase(EHSRarray(i, 1)) <> "x" Then
            'for every headline
            For j = LBound(subHeadlines) To UBound(subHeadlines)
                'if current row is sub of headline and not a headline itself
                If subHeadlines(j) = Left(EHSRarray(i, 3), Len(subHeadlines(j))) Then
                    If ApplyToColumn = "RAColl_HazardCovered" Then
                        'special fill up behaviour for RAColl_HazardCovered
                        If LCase(EHSRarray(i, 5)) = "-" Then
                            'do nothing: this line is not interesting for hazard covered
                        Else
                            If LCase(subContent(j)) = "x" Then
                                subContent(j) = EHSRarray(i, 4)
                            End If
                        End If
                    Else
                        'not empty, compare with Item
                        'fill with x, ? or - in order
                        '   at least one x is x,
                        '   at least one ? and no x is ?,
                        '   only - is -
                        If subContent(j) = "-" Or subContent(j) = "'-" Then
                            subContent(j) = EHSRarray(i, 4)
                        End If
                        If subContent(j) = "?" And LCase(EHSRarray(i, 4)) = "x" Then
                            'items are not same, fill resut with "x" for at least one is active
                            subContent(j) = "x"
                        End If
                    End If
                End If
            Next j
        End If
    Next i

    'setting headlines to determined value
    'for every row
    For i = LBound(EHSRarray) To UBound(EHSRarray)
        'if both items are from the same directive
        If EHSRarray(ChangedRow, 2) = EHSRarray(i, 2) Then
            'check if row is headline
            If LCase(EHSRarray(i, 1)) = "x" Then
                'for every headline
                For j = LBound(subHeadlines) To UBound(subHeadlines)
                    If subHeadlines(j) = EHSRarray(i, 3) Then
                        EHSRarray(i, 4) = subContent(j)
                        Table_RiskAssessment.Range(ApplyToColumn).Rows(i).Value = subContent(j)
                    End If
                Next j
            End If
        End If
    Next i
    
    ChangeApplyEHSRSub = EHSRarray
End Function


Attribute VB_Name = "FormControl"
Sub ShowFormSettings()
    FormSettings.Show
End Sub
Attribute VB_Name = "FormPrinting"
Attribute VB_Base = "0{EABE408B-4B01-46F9-AEFB-DA8870AFACDC}{7A6539CE-73B7-4099-ACF7-0515F63574D0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim ProgressbarMinimum As Double
Dim ProgressbarMaximum As Double


Sub UpdateProgressbar(Value As Double)

    Dim MaxNumberOfSigns As Integer
    MaxNumberOfSigns = 25

    Dim Range As Double
    Range = ProgressbarMaximum - ProgressbarMinimum
    
    Dim Percent As Double
    Percent = (Value * 100) / Range
    
    Dim NumberOfSigns As Integer
    NumberOfSigns = (Percent / 100) * MaxNumberOfSigns '25 is the number of characters that will fit
    If NumberOfSigns > MaxNumberOfSigns Then
        NumberOfSigns = MaxNumberOfSigns
    End If
    
    Dim Printstring As String
    Printstring = ""
    For i = 1 To NumberOfSigns
        Printstring = Printstring & ">"
    Next i
    
    Label_ProgressBar.Caption = Printstring
    
End Sub

Sub SetProgressbar(minimum As Double, maximum As Double)
    ProgressbarMaximum = maximum
    ProgressbarMinimum = minimum
End Sub

Private Sub UserForm_Initialize()

    Me.Caption = Table_Language.Range("label_PrintingInProgress").Value
    Me.Label_ProjectDataItemsPrinted.Caption = Table_Language.Range("label_ProjectDataItemsPrinted").Value
    Me.Label_ProjectDataItemsToBePrinted.Caption = Table_Language.Range("label_ProjectDataItemsTBPrinted").Value
    Me.Label_LinesPrinted.Caption = Table_Language.Range("label_LinesPrinted").Value
    Me.Label_LinesToBePrinted.Caption = Table_Language.Range("label_LinesToBePrinted").Value

End Sub
Attribute VB_Name = "FormSettings"
Attribute VB_Base = "0{BECBCD8A-BD3F-4677-A1F3-D2F301E0A159}{F7C2300E-6DC7-4EC0-A417-4F52A53378F0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButtonApply_Click()
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    'All changes are done before showing
    Application.ScreenUpdating = False
    
    'apply the selected language
    Dim selectLanguage As Integer
    If True = OptionButtonLanguageGerman Then
        selectLanguage = 1
    End If
    If True = OptionButtonLanguageEnglish Then
        selectLanguage = 2
    End If
    If True = OptionButtonLanguageFrench Then
        selectLanguage = 3
    End If
    If Range("Language_select").Value <> selectLanguage Then
        Select_Language (selectLanguage)
    End If
    
    'apply the selected columns
    Update_AllVisibleColsCheckBox
    
    'show changes
    Application.ScreenUpdating = True
    'enable Private Sub Worksheet_Calculate()
    Application.EnableEvents = True
    
    'close the form
    Unload FormSettings
End Sub

Private Sub CommandButtonCancel_Click()
    Unload FormSettings
End Sub

Private Sub CommandButtonDeleteLog_Click()
    Clear_RiskAssessment_Log
End Sub

Private Sub CommandButtonLifeCycleAll_Click()
'FrameLifeCycle
    For Each CheckBox In Me.MultiPage1.page2.FrameLifeCycle.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonLifeCycleNone_Click()
'FrameLifeCycle
    For Each CheckBox In Me.MultiPage1.page2.FrameLifeCycle.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub

Private Sub CommandButtonResetFormat_Click()
    'new in v2.5
    FormatConditionsResetting
End Sub

Private Sub CommandButtonResetLinksToOldFile_Click()
    'new in v2.5.6.4
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Interactive = False
    Application.DisplayAlerts = False

    ResetLinksToOldVersion

    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Interactive = True
    Application.DisplayAlerts = True
End Sub

Private Sub CommandButtonRiskAssessmentAfterAll_Click()
'FrameRiskAssessmentAfter
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskAssessmentAfter.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonRiskAssessmentAfterNone_Click()
'FrameRiskAssessmentAfter
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskAssessmentAfter.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub

Private Sub CommandButtonRiskAssessmentBeforeAll_Click()
'FrameRiskAssessmentBefore
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskAssessmentBefore.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonRiskAssessmentBeforeNone_Click()
'FrameRiskAssessmentBefore
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskAssessmentBefore.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub

Private Sub CommandButtonRiskReduktionAll_Click()
'FrameRiskReduktion
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskReduktion.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonRiskReduktionNone_Click()
'FrameRiskReduktion
    For Each CheckBox In Me.MultiPage1.page2.FrameRiskReduktion.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub

Private Sub CommandButtonSelectAll_Click()
    For Each CheckBox In Me.MultiPage1.page2.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonSelectFile_Click()
'taken from
'http://msdn.microsoft.com/de-de/library/office/ff196794%28v=office.15%29.aspx
'adapted to get path and file seperately
   
   ' Requires reference to Microsoft Office 11.0 Object Library.
   Dim fDialog As Office.FileDialog
   Dim filePathName As String
   
   Set fDialog = Application.FileDialog(msoFileDialogFilePicker)

   With fDialog

      .AllowMultiSelect = False

      ' Set the title of the dialog box.
      .Title = "Please select the old file."

      ' Clear out the current filters, and add our own.
      .Filters.Clear
      .Filters.Add "MBT-RAT - Excel 2010 Macro", "*.xlsm"
      .Filters.Add "All Files", "*.*"

      ' Show the dialog box. If the .Show method returns True, the
      ' user picked at least one file. If the .Show method returns
      ' False, the user clicked Cancel.
      If .Show = True Then
        filePathName = .SelectedItems(1)
        Me.TextBoxSelectedFile = StrReverse(Split(StrReverse(filePathName), "\")(0))
        Me.TextBoxSelectedPath = Left(filePathName, Len(filePathName) - Len(Me.TextBoxSelectedFile)) 'Split(filePathName, Me.TextBoxSelectedFile)(0)
      End If
   End With
End Sub

Private Sub CommandButtonSelectNone_Click()
    For Each CheckBox In Me.MultiPage1.page2.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub

Private Sub CommandButtonStandartAll_Click()
'FrameStandart
    For Each CheckBox In Me.MultiPage1.page2.FrameStandart.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = True
        End If
    Next
End Sub

Private Sub CommandButtonStandartNone_Click()
'FrameStandart
    For Each CheckBox In Me.MultiPage1.page2.FrameStandart.Controls
        If "CheckBox" = TypeName(CheckBox) Then
            CheckBox.Value = False
        End If
    Next
End Sub


Private Sub CommandButtonUpdate_Click()
    'activate Update
    Update_Versions.Update Me.TextBoxSelectedPath, Me.TextBoxSelectedFile
End Sub

Private Sub UserForm_Initialize()
    'set up the language to be displayed
    'Pictures from Microsoft.com
    Me.Caption = Table_Language.Range("Name_Setup").Value
    Me.CommandButtonCancel.Caption = Table_Language.Range("Text_cancel").Value
    Me.CommandButtonApply.Caption = Table_Language.Range("Text_apply").Value
    Me.CommandButtonApply.Left = Me.Width - Me.CommandButtonApply.Width - 11
    Me.MultiPage1.page1.Caption = Table_Language.Range("Text_general").Value
    Me.FrameLanguage.Caption = Table_Language.Range("Text_language").Value
    Me.CommandButtonDeleteLog.Caption = Table_Language.Range("Text_deleteLog").Value
    Me.CommandButtonDeleteLog.Left = Me.MultiPage1.Left + Me.MultiPage1.Width - Me.CommandButtonDeleteLog.Width - 30
    Me.MultiPage1.page2.Caption = Table_Language.Range("Text_visibleColumns").Value
    
    'new in v2.5
    Me.CommandButtonResetFormat.Caption = Table_Language.Range("Text_resetFormats").Value
    
    
    'set up the language select buttons based on the current language
    Me.OptionButtonLanguageGerman.Value = False
    Me.OptionButtonLanguageEnglish.Value = False
    Me.OptionButtonLanguageFrench.Value = False
    If Range("Language_select").Value = 1 Then
        Me.OptionButtonLanguageGerman.Value = True
    End If
    If Range("Language_select").Value = 2 Then
        Me.OptionButtonLanguageEnglish.Value = True
    End If
    If Range("Language_select").Value = 3 Then
        Me.OptionButtonLanguageFrench.Value = True
    End If
    
    'set up Import buttons
    Me.FrameUpdate.Caption = Table_Language.Range("Text_FrameUpdate").Value
    Me.LabelFolder.Caption = Table_Language.Range("Text_Folder").Value
    Me.LabelFile.Caption = Table_Language.Range("Text_File").Value
    Me.CommandButtonSelectFile.Caption = Table_Language.Range("Text_Select").Value
    Me.CommandButtonUpdate.Caption = Table_Language.Range("Text_Import").Value
    Me.CommandButtonResetLinksToOldFile.Caption = Table_Language.Range("text_deleteOldLinks").Value
    
    'set up the checkBoxes based on hidden / visible status of columns
    On Error Resume Next 'could be a Column was deleted...
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Richtlinie, _
            "text_directive", _
            "Richtlinie"
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Maschinentyp, _
            "text_machine_type", _
            "Maschinentyp"
        
        'Standards
        Initialise_FrameVisibleCols _
            Me.FrameStandart, _
            "text_HazardAccordingToStandard", _
            Me.CommandButtonStandartAll, _
            Me.CommandButtonStandartNone
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_InhaltBereitsAbgedeckt, _
            "text_contentCovered", _
            "Inhalt bereits abgedeckt?"
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_NormTyp, _
            "text_StandardType", _
            "Norm-Typ"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_NormNummer, _
            "text_StandardNumber", _
            "Norm Nummer"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_NormTitel, _
            "text_StandardTitle", _
            "Norm Titel"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_AbschnittDetail, _
            "text_StandardSubclause", _
            "Abschnitt / Detail"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Norminhalt, _
            "text_StandardContent", _
            "Norminhalt (eingek|fffd|rzt und bearbeitet)"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Ursprung, _
            "text_StandardOrigin", _
            "Ursprung"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_MoeglicheAuswirkung, _
            "text_PotentialConsequences", _
            "m|fffd|gliche Auswirkung"
    
        'no caption
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_OrtBereich, _
            "text_StandardPlace", _
            "Ort / Gefahrbereich / Position in Zeichnung"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Gefaehrdung, _
            "text_hazardousEvent", _
            "Gef|fffd|hrdung / Gef|fffd|hrdungssituation"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_GefaehrdetePerson, _
            "text_StandardPersonInDanger", _
            "Gef|fffd|hrdete Personen"
    
        'life cycle
        Initialise_FrameVisibleCols _
            Me.FrameLifeCycle, _
            "text_LifeCycle", _
            Me.CommandButtonLifeCycleAll, _
            Me.CommandButtonLifeCycleNone
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Alle, _
            "text_LifeCycleAll", _
            "Alle"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Transport, _
            "text_LifeCycleTransport", _
            "Transport"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Montage, _
            "text_LifeCycleAssembly", _
            "Montage und Installation In Betrieb nehmen"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Einrichten, _
            "text_LifeCycleSetting", _
            "Einrichten Einlernen (Teachen)/ Programmieren und/oder Umr|fffd|sten"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Betrieb, _
            "text_LifeCycleOperation", _
            "Betrieb"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Reinigung, _
            "text_LifeCycleCleaning", _
            "Reinigung Instandhaltung"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Fehlersuche, _
            "text_LifeCycleFaultFinding", _
            "Fehlersuche und -beseitigung"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Demontage, _
            "text_LifeCycleDismantling", _
            "Demontage Au|fffd|er Betrieb nehmen"
    
        'Risk estimation before
        Initialise_FrameVisibleCols _
            Me.FrameRiskAssessmentBefore, _
            "text_RiskAssessment", _
            Me.CommandButtonRiskAssessmentBeforeAll, _
            Me.CommandButtonRiskAssessmentBeforeNone
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Normvorgabe, _
            "text_RiskAssessmentStandard", _
            "Normvorgabe"
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_S, _
            "text_RiskAssessmentS", _
            "S"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_F, _
            "text_RiskAssessmentF", _
            "F"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_P, _
            "text_RiskAssessmentP", _
            "P"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_W, _
            "text_RiskAssessmentO", _
            "W"
    
         Initialise_CheckBoxVisibleCols _
            Me.CheckBox_S62061, _
            "text_RiskAssessmentS", _
            "S62061"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_F62061, _
            "text_RiskAssessmentF", _
            "F62061"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_P62061, _
            "text_RiskAssessmentP", _
            "P62061"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_W62061, _
            "text_RiskAssessmentO", _
            "W62061"
       
       Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Risiko, _
            "text_RiskEstimationRisk", _
            "Risiko"
    
        'Risk reduction
        Initialise_FrameVisibleCols _
            Me.FrameRiskReduktion, _
            "text_RiskReduction", _
            Me.CommandButtonRiskReduktionAll, _
            Me.CommandButtonRiskReduktionNone
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_konstruktiv, _
            "text_designConstruction", _
            "konstruktiv"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_sicherheitstechnisch, _
            "text_protectiveMeasures", _
            "sicherheitstechnisch"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_informativ, _
            "text_information", _
            "informativ"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_BeschreibungRisikominderung, _
            "text_DescriptionOfReduction", _
            "Beschreibung der Risikominderung"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_angewandteSpezifikationNorm, _
            "text_appliedStandardNumber", _
            "angewandte technische Spezifikation / harmonisierte B / C Norm"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_angewandteTitel, _
            "text_title", _
            "Titel"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_FundstelleInNorm, _
            "text_appliedStandardSubclause", _
            "Fundstelle in Norm"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Sicherheitsfunktion, _
            "text_SafetyFunction", _
            "Sicherheitsfunktion"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_VerifikationValidation, _
            "text_Verificationfile", _
            "Verifikation Validation"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_technischerBericht, _
            "text_technicalReport", _
            "technischer Bericht / Pr|fffd|fergebnis"
    
        'Risk reduction
        Initialise_FrameVisibleCols _
            Me.FrameRiskAssessmentAfter, _
            "text_RiskAssessment2", _
            Me.CommandButtonRiskAssessmentAfterAll, _
            Me.CommandButtonRiskAssessmentAfterNone
        
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_S2, _
            "text_RiskAssessmentS2", _
            "S2"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_F2, _
            "text_RiskAssessmentF2", _
            "F2"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_P2, _
            "text_RiskAssessmentP2", _
            "P2"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_W2, _
            "text_RiskAssessmentO2", _
            "W2"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Risiko2, _
            "text_RiskAssessmentRisk2", _
            "Risiko2"
    
        'no frame
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_WeitereReduzierung, _
            "text_FurtherReductionNecessary", _
            "Weitere Reduzierung notwendig?"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Kommentar, _
            "text_comment", _
            "Kommentar"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_Bearbeiter, _
            "text_PersonInCharge", _
            "Bearbeiter"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_GefaehrdungBehandelt, _
            "text_HazardCovered", _
            "Gef|fffd|hrdung ist behandelt?"
    
        Initialise_CheckBoxVisibleCols _
            Me.CheckBox_SpracheZeile, _
            "text_LanguageOfRow", _
            "Sprache der Zeile"
    On Error GoTo 0
        
    Me.CommandButtonSelectAll.Caption = Table_Language.Range("text_selectAll").Value
    Me.CommandButtonSelectNone.Caption = Table_Language.Range("text_selectNone").Value
End Sub

Private Sub Initialise_CheckBoxVisibleCols(ThisCheckBox As Object, CaptionText As String, _
                                            ColumnText As String, Optional MaxCaption As Integer = 30)

    Dim SelectedColumn As Integer
    SelectedColumn = Table_RiskAssessment.Range("Table_RiskAssessment[" & ColumnText & "]").column
    
    ThisCheckBox.Caption = Left(Replace(Table_Language.Range(CaptionText).Value, vbLf, " "), MaxCaption)
    If False = Table_RiskAssessment.Columns(SelectedColumn).Hidden Then
        ThisCheckBox.Value = True
    End If
    
    ThisCheckBox.ControlTipText = Replace(Table_Language.Range(CaptionText).Value, vbLf, " ")

End Sub

Private Sub Initialise_FrameVisibleCols(ThisFrame As Object, CaptionText As String, _
                                            ThisButtonAll As Object, ThisButtonNone As Object, Optional MaxCaption As Integer = 40)

    ThisFrame.Caption = Left(Replace(Table_Language.Range(CaptionText).Value, vbLf, " "), MaxCaption)
    
    ThisFrame.ControlTipText = Replace(Table_Language.Range(CaptionText).Value, vbLf, " ")
    
    ThisButtonAll.Caption = Table_Language.Range("text_selectAll").Value
    ThisButtonNone.Caption = Table_Language.Range("text_selectNone").Value

End Sub

Private Sub Update_VisibleColCheckBox(ThisCheckBox As Object, ColumnText As String)

    Dim SelectedColumn As Integer
    SelectedColumn = Table_RiskAssessment.Range("Table_RiskAssessment[" & ColumnText & "]").column
    
    If ThisCheckBox.Value = Table_RiskAssessment.Columns(SelectedColumn).Hidden Then
        Table_RiskAssessment.Columns(SelectedColumn).Hidden = Not ThisCheckBox.Value
    End If
    
End Sub

Private Sub Update_AllVisibleColsCheckBox()

    On Error Resume Next 'could be a Column was deleted...
        Update_VisibleColCheckBox _
            Me.CheckBox_Richtlinie, _
            "Richtlinie"
        
        Update_VisibleColCheckBox _
            Me.CheckBox_Maschinentyp, _
            "Maschinentyp"
        
        'Standards
        
        Update_VisibleColCheckBox _
            Me.CheckBox_InhaltBereitsAbgedeckt, _
            "Inhalt bereits abgedeckt?"
        
        Update_VisibleColCheckBox _
            Me.CheckBox_NormTyp, _
            "Norm-Typ"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_NormNummer, _
            "Norm Nummer"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_NormTitel, _
            "Norm Titel"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_AbschnittDetail, _
            "Abschnitt / Detail"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Norminhalt, _
            "Norminhalt (eingek|fffd|rzt und bearbeitet)"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Ursprung, _
            "Ursprung"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_MoeglicheAuswirkung, _
            "m|fffd|gliche Auswirkung"
    
        'no caption
        Update_VisibleColCheckBox _
            Me.CheckBox_OrtBereich, _
            "Ort / Gefahrbereich / Position in Zeichnung"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Gefaehrdung, _
            "Gef|fffd|hrdung / Gef|fffd|hrdungssituation"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_GefaehrdetePerson, _
            "Gef|fffd|hrdete Personen"
    
        'life cycle
        
        Update_VisibleColCheckBox _
            Me.CheckBox_Alle, _
            "Alle"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Transport, _
            "Transport"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Montage, _
            "Montage und Installation In Betrieb nehmen"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Einrichten, _
            "Einrichten Einlernen (Teachen)/ Programmieren und/oder Umr|fffd|sten"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Betrieb, _
            "Betrieb"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Reinigung, _
            "Reinigung Instandhaltung"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Fehlersuche, _
            "Fehlersuche und -beseitigung"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Demontage, _
            "Demontage Au|fffd|er Betrieb nehmen"
    
        'Risk estimation before
        
        Update_VisibleColCheckBox _
            Me.CheckBox_Normvorgabe, _
            "Normvorgabe"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_S, _
            "S"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_F, _
            "F"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_P, _
            "P"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_W, _
            "W"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_S62061, _
            "S62061"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_F62061, _
            "F62061"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_P62061, _
            "P62061"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_W62061, _
            "W62061"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Risiko, _
            "Risiko"
    
        'Risk reduction
        
        Update_VisibleColCheckBox _
            Me.CheckBox_konstruktiv, _
            "konstruktiv"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_sicherheitstechnisch, _
            "sicherheitstechnisch"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_informativ, _
            "informativ"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_BeschreibungRisikominderung, _
            "Beschreibung der Risikominderung"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_angewandteSpezifikationNorm, _
            "angewandte technische Spezifikation / harmonisierte B / C Norm"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_angewandteTitel, _
            "Titel"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_FundstelleInNorm, _
            "Fundstelle in Norm"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Sicherheitsfunktion, _
            "Sicherheitsfunktion"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_VerifikationValidation, _
            "Verifikation Validation"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_technischerBericht, _
            "technischer Bericht / Pr|fffd|fergebnis"
    
        'Risk reduction
        
        Update_VisibleColCheckBox _
            Me.CheckBox_S2, _
            "S2"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_F2, _
            "F2"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_P2, _
            "P2"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_W2, _
            "W2"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Risiko2, _
            "Risiko2"
    
        'no frame
        Update_VisibleColCheckBox _
            Me.CheckBox_WeitereReduzierung, _
            "Weitere Reduzierung notwendig?"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Kommentar, _
            "Kommentar"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_Bearbeiter, _
            "Bearbeiter"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_GefaehrdungBehandelt, _
            "Gef|fffd|hrdung ist behandelt?"
    
        Update_VisibleColCheckBox _
            Me.CheckBox_SpracheZeile, _
            "Sprache der Zeile"
    On Error GoTo 0
    
End Sub

Attribute VB_Name = "Norm_list"
Sub Create_Standard_list()
' erstellt von MBT Mechtersheimer GbR
' Create_Standard_list Makro
' Kopiert die angegebenen Normen aus der Risikobeurteilung in die Projekt Daten und l|fffd|scht alle Mehrfachnennungen
' Copies the standards from the risk assessment into project data and deletes all duplicates
    
    Dim row_start_PD As Long
    Dim row_start_RA As Long
    Dim col_start_PD As Long
    Dim col_start_RA As Long
    Dim col_start_RA2 As Long
    Dim row_number As Long
    
    With Table_ProjectData
        row_start_PD = .Range("Range_Norm_Number_Target").row + 1 'starts below
        col_start_PD = .Range("Range_Norm_Number_Target").column
    End With
    With Table_RiskAssessment
        row_start_RA = .Range("Range_Norm_Number").row
        col_start_RA = .Range("Range_Norm_Number").column
        col_start_RA2 = .Range("Range_Norm_Number2").column
        row_number = .Range("Range_Norm_Number").Rows.Count
    End With
    
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    'All changes are done before showing
    Application.ScreenUpdating = False
    
    'get all standards in Hazards
    Table_RiskAssessment.Range("Range_Standard_Name_Number").Copy
    'paste into Project data
    'paste standards in Hazards
    Table_ProjectData.Cells(row_start_PD, col_start_PD).PasteSpecial _
        Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    'get all standards in Hazards
    Table_RiskAssessment.Range("Range_Standard_Name_Number2").Copy
    'paste standards in risk reduction
    Table_ProjectData.Cells(row_start_PD + row_number, col_start_PD).PasteSpecial _
        Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    'clean doubles
    Table_ProjectData.Range(Cells(row_start_PD, col_start_PD), _
        Cells(row_start_PD + row_number + row_number, col_start_PD + 1)).RemoveDuplicates Columns:=1, Header:=xlNo
    
    'sorting the standards for Numbers
    'new in v2.5
    'pd_NormNumberTargetStart should be Cell A,161
    With Table_ProjectData.Sort
        .SortFields.Clear
        .SortFields.Add Key:= _
        Table_ProjectData.Range("pd_NormNumberTargetStart"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
        
        .SetRange Table_ProjectData.Range(Cells(row_start_PD, col_start_PD), _
        Cells(row_start_PD + row_number + row_number, col_start_PD + 1))
        
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

    'deleting first line if it is "---"
    'new in v2.5
    If Table_ProjectData.Range("pd_NormNumberTargetStart").Value = "---" Then
        Table_ProjectData.Range("pd_NormNumberTargetStart").ClearContents
    End If
    
    'stop copy mode and select first line
    Application.CutCopyMode = False
    Range("Range_Norm_Number_Target").Select
    
    'All changes are shown
    Application.ScreenUpdating = True
    'enable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = True
End Sub



Attribute VB_Name = "Print_Wordfile"
'#####################################################################
'# (c) Dokpro GmbH, W. Schmitz, 04/2015 (wilhelm.schmitz@dokpro.eu)  #
'# Berichtsfunktion f|fffd|r MBT-Risk Assessmenttool 2.4.1 alpha          #
'#                    Version 1.0 beta                               #
'#                                                                   #
'# Funktion: Schreibt die Daten in ein Word-Dokument                 #
'#-------------------------------------------------------------------#
'# Angepasst von MBT Mechtersheimer GbR                              #
'# f|fffd|r MBT-Risk Assessmenttool 2.5                                   #
'#                    Version 1.1                                    #
'#                                                                   #
'# |fffd|nderung: Code-Cleanup, Absolute Bez|fffd|ge in relative umgewandelt,  #
'#           Men|fffd| mit Fortschrittsanzeige eingef|fffd|gt                  #
'#####################################################################


Sub RB_Report()

    If MsgBox(Table_Language.Range("message_startPrint").Value, vbOKCancel, Table_Language.Range("message_BoxPrintRA").Value) = vbCancel Then
        Exit Sub
    End If

'################### Start of Setup ###################

    '### Word-File to be used
    Dim ReportFile As String
    ReportFile = ThisWorkbook.Path & "\Report_RB_Vorlage_2_6.dotm" 'change here to give a general location or different filename
    
    If Len(Dir(ReportFile)) = 0 Then
        MsgBox Table_Language.Range("message_missingDOTMfile").Value & ReportFile, vbOKOnly, Table_Language.Range("message_BoxPrintRA").Value
        Exit Sub
    End If
    
    '### HazardNumberSeparator ist the sign between Main and Sub Number
    'change to any value you need, default is ;
    Dim HazardNumberSeparator As String
    HazardNumberSeparator = ":"
    
    Dim PagesBeforeHazards As Double
    PagesBeforeHazards = 6
    
    '### Colours
    ColGr = RGB(0, 255, 0)    'gr|fffd|n
    ColHGr = RGB(130, 255, 130)    ' helles gr|fffd|n
    ColYe = RGB(255, 255, 0)    ' gelb
    ColHRe = RGB(255, 130, 130)    'helles rot
    ColRe = RGB(255, 0, 0)    'rot
    ColDef = -553582797    'Defaultwert: Tabellenfarbe in Word
    
    defaultValueForO = "2" 'Value if O is not given in Risk Estimation
    Dim OWillBeSet As Boolean
 
    '-----------Microsoft Word-Sitzung erstellen--------------------------
    Dim wd As Object
    Set wd = CreateObject("word.application")
        
    On Error GoTo ErrorWordFileOpen
        wd.Documents.Add (ReportFile)       'Neues Dokument in Microsoft Word erstellen
    On Error GoTo 0
    GoTo NoErrorWordFileOpen
ErrorWordFileOpen: 'an error happened during opening the wordfile
    If Err.Number = 5981 Then
        MsgBox Table_Language.Range("text_ErrorMessageWordFileNotOpened").Value & ReportFile, vbOKOnly + vbCritical, Table_Language.Range("message_BoxPrintRA").Value
    Else
        MsgBox Table_Language.Range("text_ErrorMessageErrorInSubRB").Value _
            & Table_Language.Range("text_ErrorMessageErrorNumber").Value & Err.Number _
            & Table_Language.Range("text_ErrorMessageErrorDescription").Value & Err.Description, _
            vbOKOnly + vbCritical, Table_Language.Range("message_BoxPrintRA").Value
    End If
    Exit Sub
NoErrorWordFileOpen: 'skipping the error
        
    wd.Visible = False 'Don't show document during creation. This takes approximately only 1/3 of the time than with showing.
    
    Set ws = wd.ActiveDocument

    Dim MissingBookmark As String
    Dim MissingBookmarkBool As Boolean
    MissingBookmark = ""
    MissingBookmarkBool = False
    
    'testing all bookmarks in Wordfile
    If ws.Bookmarks.exists("File_Start") = False Then
        MissingBookmark = MissingBookmark & "File_Start; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("RBStart") = False Then
        MissingBookmark = MissingBookmark & "RBStart; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("RBEnd") = False Then
        MissingBookmark = MissingBookmark & "RBEnd; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_ProjectData") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_ProjectData; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_ProjectMembers") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_ProjectMembers; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_IntendedUse") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_IntendedUse; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_SpaceLimits") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_SpaceLimits; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_TimeLimits") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_TimeLimits; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_OtherLimits") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_OtherLimits; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_LifeCycle") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_LifeCycle; "
        MissingBookmarkBool = True
    End If
    If ws.Bookmarks.exists("PD_Table_Subcontractors") = False Then
        MissingBookmark = MissingBookmark & "PD_Table_Subcontractors; "
        MissingBookmarkBool = True
    End If
    
    If MissingBookmarkBool = True Then
        MissingBookmark = Left(MissingBookmark, Len(MissingBookmark) - 2) 'cutting last "; "
        MsgBox Table_Language.Range("message_BookmarkInWordMissing").Value & ReportFile & " : " & MissingBookmark, vbOKOnly, Table_Language.Range("message_BoxPrintRA").Value
        Exit Sub
    End If
    
    'disable events during printing (just in case)
    Application.EnableEvents = False
    'disable inputs during printing (errors)
    Application.Interactive = False
    'disable screen movement for printing (faster)
    Application.ScreenUpdating = False
    'show message in statusbar
    Application.DisplayStatusBar = True
    Application.StatusBar = Table_Language.Range("text_PatienceDuringPrinting").Value
'################### End of Setup ###################

    Dim RowNeedsToBePrinted As Boolean
    Dim CurrentRow As Long
    Dim CheckToDO As Long
    Dim SelectedColumn As Integer
    Dim selectedColumn2 As Integer
    
    Dim i As Integer

'################### Start of Progressbar ###################
    
    CheckToDO = 0
    For CurrentRow = 1 To Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
        'checking if line needs to be printed
        RowNeedsToBePrinted = True
        SelectedColumn = Table_RiskAssessment.Range("RAColl_HazardExists").column
        If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "-" Then
            RowNeedsToBePrinted = False
        End If
        If Table_RiskAssessment.Range("Table_RiskAssessment").Rows(CurrentRow).EntireRow.Hidden = True Then
            RowNeedsToBePrinted = False
        End If
        If RowNeedsToBePrinted = True Then
            CheckToDO = CheckToDO + 1
        End If
    Next
    ' Statusmen|fffd| vorbereiten und anzeigen
    
    With FormPrinting
     .SetProgressbar 0, PagesBeforeHazards + CheckToDO
     .UpdateProgressbar 0
     .Label_ProjectDataItemsPrintedNumber.Caption = 0
     .Label_ProjectDataItemsToBePrintedNumber.Caption = 9
     .Label_LinesPrintedNumber.Caption = 0
     .Label_LinesToBePrintedNumber.Caption = CheckToDO
     .Show vbModeless
    End With
'################### End of Progressbar ###################


'################### Start of Project Data ###################

    'Tabelle Projektdaten auf Titelseite
    Call WordTableWriter(ws, "PD_Table_ProjectData", "PD_Table_ProjectData", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 1
     .Label_ProjectDataItemsPrintedNumber.Caption = 1
    End With

    'Tabelle Projektverantwortliche
    Call WordTableWriter(ws, "PD_Table_ProjectMembers", "PD_Table_ProjectMembers", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 1
     .Label_ProjectDataItemsPrintedNumber.Caption = 2
    End With

    'Tabelle Best. Verwendung
    Call WordTableWriter(ws, "PD_Table_IntendedUse", "PD_Table_IntendedUse", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 1
     .Label_ProjectDataItemsPrintedNumber.Caption = 3
    End With
    
    'Tabelle R|fffd|umliche Grenzen
    Call WordTableWriter(ws, "PD_Table_SpaceLimits", "PD_Table_SpaceLimits", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 1
     .Label_ProjectDataItemsPrintedNumber.Caption = 4
    End With

    'Tabelle zeitliche Grenzen
    Call WordTableWriter(ws, "PD_Table_TimeLimits", "PD_Table_TimeLimits", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 2
     .Label_ProjectDataItemsPrintedNumber.Caption = 5
    End With

    'Tabelle weitere Grenzen
    Call WordTableWriter(ws, "PD_Table_OtherLimits", "PD_Table_OtherLimits", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 2
     .Label_ProjectDataItemsPrintedNumber.Caption = 6
    End With

    'Tabelle Unterlieferanten
    Call WordTableWriter(ws, "PD_Table_Subcontractors", "PD_Table_Subcontractors", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 2
     .Label_ProjectDataItemsPrintedNumber.Caption = 7
    End With
    
    'Tabelle Qualifikationen
    Call WordTableWriter(ws, "PD_Table_LifeCycle", "PD_Table_LifeCycle", Table_ProjectData)
    With FormPrinting
     .UpdateProgressbar 5
     .Label_ProjectDataItemsPrintedNumber.Caption = 8
    End With

    '###################Start Report: Normenliste ########################
 
    'Call Create_Standard_list 'Normenliste aktualisieren kann hier standardm|fffd||fffd|ig aktiviert werden
    Dim StandardCounter As Long
    Dim StandardNumber As String
    Dim StandardTitle As String
    Dim StandardRowNumber As Long
    
    'setup for 1st cycle
    StandardCounter = 1
    StandardRowNumber = Table_ProjectData.Range("Range_Norm_Number_Target").row + 1
    StandardNumber = Table_ProjectData.Cells(StandardRowNumber, 1).Value
    StandardTitle = Table_ProjectData.Cells(StandardRowNumber, 2).Value
    
    'jump one empty line
    If StandardNumber = "" Then
        StandardCounter = 2
        StandardNumber = Table_ProjectData.Cells(StandardRowNumber + 1, 1).Value
        StandardTitle = Table_ProjectData.Cells(StandardRowNumber + 1, 2).Value
    End If
    
    'runs till first empty cell in first row
    Do While Not StandardNumber = ""
        'adds another line below first, if needed
        If StandardCounter > 1 Then
            ws.Bookmarks("PD_Table_StandardList").Range.Tables(1).Rows(StandardCounter).Select
            wd.Selection.InsertRowsBelow
        End If
        
        
        With ws.Bookmarks("PD_Table_StandardList").Range.Tables(1)
            .cell(StandardCounter + 1, 1).Range.Text = StandardNumber
            .cell(StandardCounter + 1, 2).Range.Text = StandardTitle
        End With
        
        'setup for next cycle
        StandardNumber = Table_ProjectData.Cells(StandardRowNumber + StandardCounter, 1).Value
        StandardTitle = Table_ProjectData.Cells(StandardRowNumber + StandardCounter, 2).Value
        
        StandardCounter = StandardCounter + 1
    Loop

    With FormPrinting
     .UpdateProgressbar 6
     .Label_ProjectDataItemsPrintedNumber.Caption = 9
    End With

'################### End of Project Data ###################

'################### Start Risk Reduction Parameters ###################

    ws.Bookmarks("RB_RiskGraphKey").Select

    With wd
        .Selection.typetext Text:=Table_Language.Range("text_RiskGraphKey").Value 'EHSR longform
    End With

'################### End Risk Reduction Parameters ###################

'################### Start Report: Risikobeurteilung ###################
    ws.Bookmarks("RBStart").Select
 
    'textfields for selections
    Dim HazardNumber As String
    Dim HazardNumberMain As String
    Dim HazardNumberSub As String
    Dim PhasesOfLifeCycle As String
    Dim RiskReductionBy As String
    
    Dim RowsPrinted As Integer
    RowsPrinted = 0
    
    For CurrentRow = 1 To Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
        'checking if line needs to be printed
        RowNeedsToBePrinted = True
        SelectedColumn = Table_RiskAssessment.Range("RAColl_HazardExists").column
        If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "-" Then
            RowNeedsToBePrinted = False
        End If
        If Table_RiskAssessment.Range("Table_RiskAssessment").Rows(CurrentRow).EntireRow.Hidden = True Then
            RowNeedsToBePrinted = False
        End If
        
        If RowNeedsToBePrinted = True Then
        
            'setting up Textfields from selections
            'Textfield: HazardNumber
            HazardNumberMain = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, Table_RiskAssessment.Range("RAColl_NumberMain").column).Value
            HazardNumberSub = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, Table_RiskAssessment.Range("RAColl_NumberSub").column).Value
            If HazardNumberMain = "" Then
                If HazardNumberSub = "" Then
                    HazardNumber = ""
                Else
                    HazardNumber = "0" & HazardNumberSeparator & " " & HazardNumberSub
                End If
            Else
                If HazardNumberSub = "" Then
                    HazardNumber = HazardNumberMain & HazardNumberSeparator & " 0"
                Else
                    HazardNumber = HazardNumberMain & HazardNumberSeparator & " " & HazardNumberSub
                End If
            End If
            
            'Textfield: PhasesOfLifeCycle
            PhasesOfLifeCycle = ""
            SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_All").column
            If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                PhasesOfLifeCycle = Table_Language.Range("text_LifeCycles_all").Value
            Else
                'checking every field individually, so that deleted fields can be skipped (throws error here, needs to be deleted by hand right now)
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Transport").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_transport").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Assembly").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_assembly").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Setting").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_setting").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Operation").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_operation").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Cleaning").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_cleaning").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_FaultFinding").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_faultfinding").Value & "; "
                End If
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PhaseOfLifeCycle_Dismantling").column
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    PhasesOfLifeCycle = PhasesOfLifeCycle & Table_Language.Range("text_LifeCycles_dismantling").Value & "; "
                End If
                'cutting away the last "; " if any exists
                If Len(PhasesOfLifeCycle) > 2 Then
                    PhasesOfLifeCycle = Left(PhasesOfLifeCycle, Len(PhasesOfLifeCycle) - 2)
                End If
            End If
            
            'Textfield: RiskReductionBy
            RiskReductionBy = ""
            For i = 1 To Table_RiskAssessment.Range("RAColl_RiskReduction_By").Columns.Count
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_By").column + i - 1
                If Not Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                    RiskReductionBy = RiskReductionBy & Table_RiskAssessment.Range("RAColl_RiskReduction_By").Cells(3, i).Value & "; "
                End If
            Next
            If Len(RiskReductionBy) > 2 Then
               RiskReductionBy = Left(RiskReductionBy, Len(RiskReductionBy) - 2)
            End If
            
            'Textfield EHSR is applied "x" or unknown "?"
            EHSRValue_Col = wdColorAutomatic                                        'Const wdColorAutomatic    -16777216
            SelectedColumn = Table_RiskAssessment.Range("RAColl_HazardExists").column
            If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "x" Then
               EHSRValue = Table_Language.Range("text_applies").Value 'trifft zu
            ElseIf Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "?" Then
               EHSRValue = Table_Language.Range("text_toBeDecided").Value 'muss noch entschieden werden
               EHSRValue_Col = ColRe
            End If
            
            'Textfield Hazard covered by applied Standard
            SelectedColumn = Table_RiskAssessment.Range("RAColl_ContentAlreadyCovered").column
            HazardCovered_Col = wdColorAutomatic
            HazardCovered_Bool = False
            If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "x" Then
               HazardCovered = Table_Language.Range("text_covered").Value 'Inhalt ist abgedeckt / erledigt
               HazardCovered_Bool = True
            Else
               HazardCovered = Table_Language.Range("text_mustBeConsidered").Value 'muss behandelt werden
               HazardCovered_Col = ColRe
            End If
            
            
            '########################################################################################################################
            'printing each column as one page in Word
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing headline
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            With wd
            '##GSA##
                .Selection.typetext Text:=Table_Language.Range("text_EHSR").Value 'EHSR longform
                .Selection.Style = wd.ActiveDocument.Styles("GSA")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_EHSRNumber").column
                selectedColumn2 = Table_RiskAssessment.Range("RAColl_EHSRTitle").column
                .Selection.typetext Text:=Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value _
                                            & " " & Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, selectedColumn2).Value 'EHSR Number + Title
                .Selection.Style = wd.ActiveDocument.Styles("myHeadline 2")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
            End With
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 1st table with general information
            With wd
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 2, 4 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            
            With ws.Tables(TabNr) 'Tabelle anpassen
                .cell(1, 1).Range.Text = Table_Language.Range("text_HazardExists").Value 'Gef|fffd|hrdung vorhanden:
                .cell(2, 1).Range.Text = EHSRValue
                .cell(2, 1).Range.Font.Color = EHSRValue_Col
                'new since 2.6
                'only print text_EHSRcoveredByStandard if it is covered
                'else this is unnecessary
                If HazardCovered_Bool Then
                    .cell(1, 2).Range.Text = Table_Language.Range("text_EHSRcoveredByStandard").Value 'Inhalt bereits abgedeckt
                    .cell(2, 2).Range.Text = HazardCovered
                    .cell(2, 2).Range.Font.Color = HazardCovered_Col
                End If
                '##Gef|fffd|hrdungsnummer##
                .cell(1, 3).Range.Text = Table_Language.Range("text_UID").Value
                .cell(2, 3).Range.Text = HazardNumber
                '##|fffd|nderungsdatum##
                .cell(1, 4).Range.Text = Table_Language.Range("text_DateOfLastChange").Value 'Datum der letzten |fffd|nderung:"
                SelectedColumn = Table_RiskAssessment.Range("RAColl_LastChange").column
                .cell(2, 4).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 2nd table: standard information
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_HazardAccordingToStandard").Value 'Gef|fffd|hrdungen nach (harmonisierter) Norm
                .Selection.Style = wd.ActiveDocument.Styles("myHeadline 3")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 9, 2 'Makro in Word starten: Tabelle anlegen
            End With
                TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                .cell(1, 1).Range.Text = Table_Language.Range("text_StandardNumber").Value & ", " & Table_Language.Range("text_StandardTitle").Value 'Norm Nummer, Norm Titel
                'Abschnitt / Detail:
                .cell(2, 1).Range.Text = Table_Language.Range("text_StandardSubclause").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_StandardSubclause").column
                .cell(2, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Norminhalt (eingek|fffd|rzt und bearbeitet)
                .cell(3, 1).Range.Text = Table_Language.Range("text_StandardContent").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_StandardContent").column
                .cell(3, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Ursprung:
                .cell(4, 1).Range.Text = Table_Language.Range("text_StandardOrigin").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_StandardOriginOfHazard").column
                .cell(4, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'm|fffd|gliche Auswirkung:
                .cell(5, 1).Range.Text = Table_Language.Range("text_StandardPotentialConseq").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_StandardConsequencesOfHazard").column
                .cell(5, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Ort / Gefahrbereich / Position in Zeichnung:
                .cell(6, 1).Range.Text = Table_Language.Range("text_StandardPlace").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_Place").column
                .cell(6, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Gef|fffd|hrdung / Gef|fffd|hrdungssituation:
                .cell(7, 1).Range.Text = Table_Language.Range("text_StandardHazard").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_Hazard").column
                .cell(7, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Gef|fffd|hrdete Personen:
                .cell(8, 1).Range.Text = Table_Language.Range("text_StandardPersonInDanger").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_PersonInDanger").column
                .cell(8, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                'Lebensphase (nach EN ISO 12100, Tabelle B.3):
                .cell(9, 1).Range.Text = Table_Language.Range("text_LifeCycle").Value
                .cell(9, 2).Range.Text = PhasesOfLifeCycle
            End With
            
            'Normnummer und Normtext mit Absatz trennen
            SelectedColumn = Table_RiskAssessment.Range("RAColl_StandardNumber").column
            selectedColumn2 = Table_RiskAssessment.Range("RAColl_StandardTitle").column
            'Norm schreiben |fffd|berspringen, wenn keine Norm angegeben ist
            If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" _
                    Or Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "---") Then
                'Makro in Word starten: Norm schreiben
                If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, selectedColumn2).Text = "#NV" Then      ' .Text necessary to prevent type mismatch with error messages
                    wd.Run "Norm_Schreiben", _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value, _
                        ""
                Else
                    wd.Run "Norm_Schreiben", _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value, _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, selectedColumn2).Text       ' .Text necessary to prevent type mismatch with error messages
                End If
            End If
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 3rd table: risk estimation before
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_RiskEstimationBefore").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 2, 5 'Makro in Word starten: Tabelle anlegen
            End With
           
            'Auswertung Risikostufe f|fffd|r Hintergrundfarbe
            SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskBefore_Risk").column
            RB_Summe = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            If RB_Summe = "a" Then
                RB_Color = ColGr
            ElseIf RB_Summe = "b" Then
                RB_Color = ColHGr
            ElseIf RB_Summe = "c" Then
                RB_Color = ColYe
            ElseIf RB_Summe = "d" Then
                RB_Color = ColHRe
            ElseIf RB_Summe = "e" Then
                RB_Color = ColRe
            Else
                RB_Color = ColDef
            End If
        
            OWillBeSet = False
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                'Schwere der Verletzung (S)
                .cell(1, 1).Range.Text = Table_Language.Range("text_RiskEstimationS").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskBefore_S").column
                .cell(2, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'H|fffd|ufigkeit (F)
                .cell(1, 2).Range.Text = Table_Language.Range("text_RiskEstimationF").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskBefore_F").column
                .cell(2, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'M|fffd|glichkeit der Vermeidung (P)
                .cell(1, 3).Range.Text = Table_Language.Range("text_RiskEstimationP").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskBefore_P").column
                .cell(2, 3).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'Wahrscheinlichkeit (W)
                .cell(1, 4).Range.Text = Table_Language.Range("text_RiskEstimationO").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskBefore_W").column
                If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" And OWillBeSet Then
                    .cell(2, 4).Range.Text = defaultValueForO 'default Value for O = "2"
                Else
                    .cell(2, 4).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                End If
                'Risiko
                .cell(1, 5).Range.Text = Table_Language.Range("text_RiskEstimationRisk").Value
                .cell(2, 5).Range.Text = RB_Summe
                .cell(2, 5).Shading.BackgroundPatternColor = RB_Color
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 4th table: protective measures
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_RiskReduction").Value  'Risikominimierung
                .Selection.Style = wd.ActiveDocument.Styles("myHeadline 3")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_protectiveMeasure").Value  'Schutzma|fffd|nahme
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count

            With ws.Tables(TabNr) 'Tabelle anpassen
                .cell(1, 1).Range.Text = RiskReductionBy
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 5th table: risk reduction description
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_DescriptionOfReduction").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_Description").column
                .cell(1, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 6th table: standard risk reduction
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_appliedStandardNumber").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 2, 2 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                .cell(1, 1).Range.Text = Table_Language.Range("text_appliedStandardNumber").Value
                .cell(2, 1).Range.Text = Table_Language.Range("text_appliedStandardSubclause").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_AppliedStandardSubclause").column
                .cell(2, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            'Normnummer und Normtext mit Absatz trennen
            SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_AppliedStandardNumber").column
            selectedColumn2 = Table_RiskAssessment.Range("RAColl_RiskReduction_AppliedStandardTitle").column
            'Norm schreiben |fffd|berspringen, wenn keine Norm angegeben ist
            If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" _
                    Or Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "---") Then
                'Makro in Word starten: Norm schreiben
                If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, selectedColumn2).Text = "#NV" Then      ' .Text necessary to prevent type mismatch with error messages
                    wd.Run "Norm_Schreiben", _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value, _
                        ""
                Else
                    wd.Run "Norm_Schreiben", _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value, _
                        Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, selectedColumn2).Text       ' .Text necessary to prevent type mismatch with error messages
                End If
            End If
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 7th table: solution by safety function
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_SafetyFunction").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
                
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_SafetyFunction").column
                .cell(1, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
                
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 8th table: validation
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_Verificationfile").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_VerificationFile").column
                .cell(1, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 9th table: validation
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_technicalReport").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
    
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskReduction_ReportFile").column
                .cell(1, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
             
            '------------------------------------------------------------------------------------------------------------------------
            'printing 10th table: risk after
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_RiskEstimationAfter").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 2, 5 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            
            SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskAfter_Risk").column
            RB_Summe = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            If RB_Summe = "a" Then
                RB_Color = ColGr
            ElseIf RB_Summe = "b" Then
                RB_Color = ColHGr
            ElseIf RB_Summe = "c" Then
                RB_Color = ColYe
            ElseIf RB_Summe = "d" Then
                RB_Color = ColHRe
            ElseIf RB_Summe = "e" Then
                RB_Color = ColRe
            Else
                RB_Color = ColDef
            End If
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            OWillBeSet = False
            With ws.Tables(TabNr) 'Tabelle anpassen
                'Schwere der Verletzung (S)
                .cell(1, 1).Range.Text = Table_Language.Range("text_RiskEstimationS").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskAfter_S").column
                .cell(2, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'H|fffd|ufigkeit (F)
                .cell(1, 2).Range.Text = Table_Language.Range("text_RiskEstimationF").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskAfter_F").column
                .cell(2, 2).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'M|fffd|glichkeit der Vermeidung (P)
                .cell(1, 3).Range.Text = Table_Language.Range("text_RiskEstimationP").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskAfter_P").column
                .cell(2, 3).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                If Not (Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "") Then
                    OWillBeSet = True
                End If
                'Wahrscheinlichkeit (W)
                .cell(1, 4).Range.Text = Table_Language.Range("text_RiskEstimationO").Value
                SelectedColumn = Table_RiskAssessment.Range("RAColl_RiskAfter_W").column
                If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" And OWillBeSet Then
                    .cell(2, 4).Range.Text = defaultValueForO 'default Value for O = "2"
                Else
                    .cell(2, 4).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                End If
                'Risiko
                .cell(1, 5).Range.Text = Table_Language.Range("text_RiskEstimationRisk").Value
                .cell(2, 5).Range.Text = RB_Summe
                .cell(2, 5).Shading.BackgroundPatternColor = RB_Color
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 11th table: Comment
            
            With wd
                '.Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.typetext Text:=Table_Language.Range("text_comment").Value
                .Selection.Style = wd.ActiveDocument.Styles("BeText")
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 1, 1 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            With ws.Tables(TabNr) 'Tabelle anpassen
                SelectedColumn = Table_RiskAssessment.Range("RAColl_Comment").column
                .cell(1, 1).Range.Text = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'printing 12th table:
            
            With wd
                .Selection.TypeParagraph   'Absatz einf|fffd|gen
                .Selection.Style = wd.ActiveDocument.Styles("TabText")
                .Run "Tab_Anlegen", 2, 3 'Makro in Word starten: Tabelle anlegen
            End With
            
            TabNr = wd.ActiveDocument.Range(0, wd.Selection.Tables(1).Range.End).Tables.Count
            SelectedColumn = Table_RiskAssessment.Range("RAColl_FurtherReductionNecessary").column
            If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "x" Then
                WRed = Table_Language.Range("text_mustBeConsidered").Value 'weitere Reduzierung notwendig
                Wred_Color = ColRe
            ElseIf Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "-" Then
                WRed = Table_Language.Range("text_noFurtherReduction").Value 'keine weitere Reduzierung notwendig
                Wred_Color = wdColorAutomatic
            Else
                WRed = Table_Language.Range("text_provideInformation").Value 'BITTE ANGABEN MACHEN!
                Wred_Color = ColRe
            End If
            
            SelectedColumn = Table_RiskAssessment.Range("RAColl_HazardCovered").column
            If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "x" Then
                GefBe = Table_Language.Range("text_EHSRcovered").Value 'behandelt / betrachtet, Zeile ist fertig
                GefBe_Color = wdColorAutomatic
            Else
                GefBe = Table_Language.Range("text_EHSRnotCovered").Value 'Nicht behandelt / betrachtet, Zeile muss noch bearbeitet werden
                GefBe_Color = ColRe
            End If
            
            SelectedColumn = Table_RiskAssessment.Range("RAColl_PersonInCharge").column
            If Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value = "" Then
                BearbRB = Table_Language.Range("text_provideInformation").Value 'BITTE ANGABEN MACHEN!
                BearbRB_Color = ColRe
            Else
                BearbRB = Table_RiskAssessment.Range("Table_RiskAssessment").Cells(CurrentRow, SelectedColumn).Value
                BearbRB_Color = wdColorAutomatic
            End If
            
            With ws.Tables(TabNr) 'Tabelle anpassen
                .cell(1, 1).Range.Text = Table_Language.Range("text_FurtherReductionNecessary").Value 'Weitere Reduzierung notwendig?"
                .cell(2, 1).Range.Text = WRed
                .cell(2, 1).Range.Font.Color = Wred_Color
                .cell(1, 2).Range.Text = Table_Language.Range("text_PersonInCharge").Value 'Bearbeiter
                .cell(2, 2).Range.Text = BearbRB
                .cell(2, 2).Range.Font.Color = BearbRB_Color
                .cell(1, 3).Range.Text = Table_Language.Range("text_HazardCovered").Value 'Gef|fffd|hrdung ist behandelt?
                .cell(2, 3).Range.Text = GefBe
                .cell(2, 3).Range.Font.Color = GefBe_Color
            End With
            
            Call nTab(ws, wd) 'zu Textmarke wechseln / n|fffd|chste Einf|fffd|gestelle
            
            '------------------------------------------------------------------------------------------------------------------------
            'finished last table
            
            RowsPrinted = RowsPrinted + 1
            With FormPrinting
                .UpdateProgressbar 6 + RowsPrinted
                .Label_LinesPrintedNumber.Caption = RowsPrinted
            End With

            
        End If 'end of table not printed
    Next 'CurrentRow

    'Activating Excel before opening Word
    'else Excel might not get reactivated
    Application.Interactive = True
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.StatusBar = False
    ThisWorkbook.Activate
    
    ws.Bookmarks("File_Start").Select
    With wd
        .Run "AlleFldAktualisieren"
        .Visible = True 'Dokument anzeigen
        .WindowState = 1
    End With
    Beep
    If ActivateWord(wd) = False Then
        MsgBox Table_Language.Range("message_ReportPrinted").Value, vbOKOnly, Table_Language.Range("message_BoxPrintRA").Value
    End If
    
    Unload FormPrinting
    Set wd = Nothing
    Set ws = Nothing
End Sub


Sub WordTableWriter(ws, WordTableName, ExcelTableName, ExcelSheetName)
'#####################################################################
'# MBT-Makro                                                         #
'# DiesesMakro schreibt alle Daten einer Exeltabelle in die          #
'# entsprechende Wordtabelle                                         #
'# i/o ws: Wordobjekt mit Dokument                                   #
'# i/o WordTableName: Ziel Tabelle                                   #
'# i/o ExcelTableName: Quell Tabelle                                 #
'# i/o ExcelSheetName: Quell Blatt                                   #
'#####################################################################
    Dim MyRows As Integer ': Zeilenzahl der Tabelle
    Dim MyCols As Integer ': Spaltenzahl der Tabelle
    'Dim WordTable As Table
    
    Dim rowcounter As Integer
    Dim colcounter As Integer
    
    MyRows = ExcelSheetName.Range(ExcelTableName).Rows.Count
    MyCols = ExcelSheetName.Range(ExcelTableName).Columns.Count
    'WordTable = WS.Bookmarks(WordTableName).Range.Tables(1)
    
    For rowcounter = 1 To (MyRows)
        For colcounter = 1 To (MyCols)
            On Error Resume Next                                'sloppy programming, needs to skip cells that don't exist cause of merging
                                                                'need to find a clean way to test cells for existance
            With ws.Bookmarks(WordTableName).Range.Tables(1)
                .cell(rowcounter, colcounter).Range.Text = ExcelSheetName.Range(ExcelTableName).Cells(rowcounter, colcounter).Value
            End With
            On Error GoTo 0                                     'reactivates error handling
        Next
    Next
End Sub

Sub nTab(ws, wd)
'###################################################
'# MBT-GbR
'# Dieses Makro spingt in Word an das Ende der Datei
'# = n|fffd|chste Einf|fffd|gestelle f|fffd|r die n|fffd|chste Tabelle
'###################################################
    wd.Selection.endkey 6, 0
End Sub

Function ActivateWord(wd) As Boolean
'tries to give the focus to the wordfile
'if not successfull, quitts
    
    On Error GoTo WordFileDidNotBecomeFocus

        Application.Wait Now + TimeSerial(0, 0, 1)
        wd.Activate                                     '1st methode to give focus
        AppActivate wd.Caption                          '2nd methode: loops here on error, most likely Word has not loaded yet

    On Error GoTo 0
    ActivateWord = True
    Exit Function

WordFileDidNotBecomeFocus:
    On Error GoTo 0
    ActivateWord = False
End Function
Attribute VB_Name = "Reset"
Sub FormatConditionsResetting()
Attribute FormatConditionsResetting.VB_ProcData.VB_Invoke_Func = " \n14"
' erstellt von MBT Mechtersheimer GbR
' FormatConditionsResetting Makro
' L|fffd|scht alle bedingten Formate in Tabelle Risikobeurteilung und setzt die Originalformate neu
' Delets all conditional formats from table risk assessment and reinitiates the original formats
    
    Dim Bereich As Range
    
    Set Bereich = Table_RiskAssessment.Range("A:BH")
    With Bereich
        .FormatConditions.Delete
    End With
    
    Set Bereich = Table_RiskAssessment.Range("E:E") 'E= Nr. (GSA Nummer)
    With Bereich
        ' Format f|fffd|r "Gef|fffd|hrdung behandelt = x"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($BG1=""x"")" 'BG= Gef|fffd|hrdung ist behandelt?
        ' Hintergrund gr|fffd|n
        With .FormatConditions(1).Interior ' TODO .FormatConditions.Count could work?
            .Color = 5296274
        End With
        
        ' Format f|fffd|r "Gef|fffd|hrdung vorhanden = x"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($I1=""x"";$I1=""?"")" 'I= Gef|fffd|hrdung vorhanden?
        ' Hintergrund rot
        With .FormatConditions(2).Interior
            .Color = 13551615
        End With
    End With
    
    'delete colouring from versions before 2.6
    With Table_RiskAssessment.Range("Table_RiskAssessment[Nr.]").Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    
    Set Bereich = Table_RiskAssessment.Range("AN:AN") 'AN= Risiko
    With Bereich
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER(AN1=""a"";AN1=""1"";AN1=1)"
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(1)
            .Interior.Color = 5287936
            .Font.Color = 12379352
        End With
        
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER(AN1=""b"";AN1=""2"";AN1=""AM"";AN1=2)"
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(2)
            .Interior.Color = 13561798
            .Font.Color = 24832
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER(AN1=""c"";AN1=""3"";AN1=""Sil1"";AN1=3)"
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(3)
            .Interior.Color = 10284031
            .Font.Color = 26012
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER(AN1=""d"";AN1=""4"";AN1=""Sil2"";AN1=4)"
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(4)
            .Interior.Color = 13551615
            .Font.Color = 393372
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER(AN1=""e"";AN1=""5"";AN1=""Sil3"";AN1=5)"
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(5)
            .Interior.Color = 255
            .Font.Color = 12040422
        End With
    End With
    
    Set Bereich = Table_RiskAssessment.Range("BC:BC") 'BC= Risiko2
    With Bereich
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlCellValue, _
            Operator:=xlEqual, _
            Formula1:="=""a"""
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(1)
            .Interior.Color = 5287936
            .Font.Color = 12379352
        End With
        
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlCellValue, _
            Operator:=xlEqual, _
            Formula1:="=""b"""
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(2)
            .Interior.Color = 13561798
            .Font.Color = 24832
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlCellValue, _
            Operator:=xlEqual, _
            Formula1:="=""c"""
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(3)
            .Interior.Color = 10284031
            .Font.Color = 26012
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlCellValue, _
            Operator:=xlEqual, _
            Formula1:="=""d"""
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(4)
            .Interior.Color = 13551615
            .Font.Color = 393372
        End With
    
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlCellValue, _
            Operator:=xlEqual, _
            Formula1:="=""e"""
        ' Hintergrund rot / Schrift rot
        With .FormatConditions(5)
            .Interior.Color = 255
            .Font.Color = 12040422
        End With
    End With
    
    
    Set Bereich = Table_RiskAssessment.Range("M:S") 'M = Norm-Typ ; S= m|fffd|gliche Auswirkung
    With Bereich
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($M1=1;$M1=""C"";$M1=""c"")"
        ' Schrift FETT und rot
        With .FormatConditions(1).Interior
            .Color = 10213316
            '.ColorIndex = 40
        End With
        
        ' Format f|fffd|r "Inhalt = 2"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($M1=2;$M1=""B"";$M1=""b"";$M1=""B1"";$M1=""b1"")"
        ' Schrift FETT und rot
        With .FormatConditions(2).Interior
            .Color = 11851260
            '.ColorIndex = 15
        End With
        
        ' Format f|fffd|r "Inhalt = 3"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($M1=3;$M1=""B2"";$M1=""b2"")"
        ' Schrift FETT und rot
        With .FormatConditions(3).Interior
            .Color = 13082801
            '.ColorIndex = 40
        End With
        
        ' Format f|fffd|r "Inhalt = 4"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($M1=4;$M1=""A"";$M1=""a"")"
        ' Schrift FETT und rot
        With .FormatConditions(4).Interior
            .Color = 14470546
            '.ColorIndex = 15
        End With
        
    End With

    'Formatting of headlines: grey backround and bold
    Set Bereich = Table_RiskAssessment.Range("A:BH") ' komplette Tabelle
    With Bereich
        ' Format f|fffd|r "Inhalt = 1"
        .FormatConditions.Add Type:=xlExpression, _
            Formula1:="=ODER($H1=""x"")" ' H= Leere |fffd|berschrift
        ' Hintergrund Grauer Streifen
        With .FormatConditions(.FormatConditions.Count).Interior
            .Pattern = xlPatternLinearGradient
            .Gradient.Degree = 90
            .Gradient.ColorStops.Clear
            With .Gradient.ColorStops.Add(0)
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = -5.09659108249153E-02
            End With
            With .Gradient.ColorStops.Add(0.5)
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = -0.349009674367504
            End With
            With .Gradient.ColorStops.Add(1)
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = -5.09659108249153E-02
            End With
        End With
        With .FormatConditions(.FormatConditions.Count).Font
            .Bold = True
        End With
    End With
End Sub

Sub ResetStandardDataselection()
' erstellt von MBT Mechtersheimer GbR
' setzt die Daten|fffd|berpr|fffd|fungen f|fffd|r die Norm Nummern zur|fffd|ck auf default
' sinnvoll z.B. nach dem Kopieren alter Dateneintr|fffd|ge

    Dim RArng As Range
    Dim RAcell As Range
    Dim RAselectedColumn As Long
    Dim RAsecondSelectionColumn As Long
    Dim RACurrentRow As Long
    
    Set RArng = Table_RiskAssessment.Range("Table_RiskAssessment_StandardNumber")
    RAsecondSelectionColumn = Table_RiskAssessment.Range("Table_RiskAssessment_StandardNumberReduction").column
        
    RACurrentRow = 0
    For Each RAcell In RArng
        RACurrentRow = RACurrentRow + 1
        
        RAcell.Validation.Delete
        Table_RiskAssessment.Cells(RAcell.row, RAsecondSelectionColumn).Validation.Delete
        
        EnterEHSRstandardSelectionInCell RAcell
        EnterEHSRstandardSelectionInCell Table_RiskAssessment.Cells(RAcell.row, RAsecondSelectionColumn)
    Next RAcell
End Sub

Sub ResetDataselection()
    Dim RArng As Range
    Dim Validationstring As String
    Dim RAtableStart As Long
    Dim RAtableEnd As Long
    
    RAtableStart = Table_RiskAssessment.Range("Table_RiskAssessment").row
    RAtableEnd = Table_RiskAssessment.Range("Table_RiskAssessment").row + Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
    
    Set RArng = Table_RiskAssessment.Range("RAColl_HazardExists")
    'Validationstring = "x,-,?"
    Validationstring = "=DD_RAColl_HazardExists"
    ResetDataselectionInColumn RArng, Validationstring, RAtableStart, RAtableEnd
    
    Set RArng = Table_RiskAssessment.Range("RAColl_ContentAlreadyCovered")
    'Validationstring = "x,-"
    Validationstring = "=DD_RAColl_ContentAlreadyCovered"
    ResetDataselectionInColumn RArng, Validationstring, RAtableStart, RAtableEnd
    
    Set RArng = Table_RiskAssessment.Range("RAColl_StandardType")
    'Validationstring = "1,2,3,4"
    Validationstring = "=DD_RAColl_StandardType"
    ResetDataselectionInColumn RArng, Validationstring, RAtableStart, RAtableEnd
    
    Set RArng = Table_RiskAssessment.Range("RAColl_FurtherReductionNecessary")
    'Validationstring = "x,-"
    Validationstring = "=DD_RAColl_FurtherReductionNecessary"
    ResetDataselectionInColumn RArng, Validationstring, RAtableStart, RAtableEnd
    
    Set RArng = Table_RiskAssessment.Range("RAColl_HazardCovered")
    'Validationstring = "x,-"
    Validationstring = "=DD_RAColl_HazardCovered"
    ResetDataselectionInColumn RArng, Validationstring, RAtableStart, RAtableEnd
End Sub

Private Sub ResetDataselectionInColumn(RArng As Range, Validationstring As String, RAtableStart As Long, RAtableEnd As Long)
    Dim RAcell As Range
    
    For Each RAcell In RArng
        If RAcell.row < RAtableStart Then
            'nothing
        Else
            If RAcell.row >= RAtableEnd Then Exit For
            
            RAcell.Validation.Delete
            
            'add new validation in front
            With RAcell.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:=Validationstring
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = ""
                .InputMessage = ""
                .ErrorMessage = ""
                .ShowInput = True
                .ShowError = False
            End With
        End If
    Next RAcell
End Sub

Sub ResetLinksToOldVersion()
    'there is a problem with copying content from old files
    'links inside the file will be copied as links TO the old file
    'since the cells in Table_RiskAssessment.Range("RAColl_EHSRTitle") should be linked to Table_Language.Name this is the point to check
    'if the first in the row (after 5 headlines) is linked to another file, this link is to be killed
    
    Dim RAcell As Range
    Dim LinkToOldFile As String
    Dim NameOfLanguageFolder As String
    Dim OldFormula As String
    Dim NewFormula As String
    Dim FirstCharacterPosition As Integer
    Dim LastCharacterPosition As Integer
    
    LinkToOldFile = Table_RiskAssessment.Range("RAColl_EHSRTitle").FormulaR1C1(6, 1)
    NameOfLanguageFolder = Table_Language.Name
    
    FirstCharacterPosition = InStr(LinkToOldFile, NameOfLanguageFolder)
    
    If FirstCharacterPosition > 2 Then
        LinkToOldFile = Mid(LinkToOldFile, 2, FirstCharacterPosition - 2)
        
        For Each RAcell In Table_RiskAssessment.Range("Table_RiskAssessment")
            'test for a link to old file
            FirstCharacterPosition = InStr(RAcell.FormulaR1C1, LinkToOldFile)
            Do While FirstCharacterPosition > 0
                LastCharacterPosition = InStr(FirstCharacterPosition + 1, RAcell.FormulaR1C1, "'")
                'cut the closing '
                OldFormula = RAcell.FormulaR1C1
                NewFormula = Mid(OldFormula, 1, LastCharacterPosition - 1) & Mid(OldFormula, LastCharacterPosition + 1)
'                RAcell.FormulaR1C1 = Replace(RAcell.FormulaR1C1, "'", "", LastCharacterPosition - 1, 1)
                'cut the link in front
                RAcell.FormulaR1C1 = Replace(NewFormula, LinkToOldFile, "", 1, 1)
                
            'test for another link to old file
            FirstCharacterPosition = InStr(RAcell.FormulaR1C1, LinkToOldFile)
            Loop
        Next RAcell
    End If
End Sub

Sub ResetRunningSubs()
' erstellt von MBT Mechtersheimer GbR
' ResetRunningSubs Makro
' f|fffd|rs Debugging: wenn ein Skript abbricht, werden keine anderen automatischen Skripte mehr ausgef|fffd|hrt
' for debugging purpose: if a script stops with an error, no other automated scripts will run

    'enable Private Sub Worksheet_Change()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Interactive = True
    Application.StatusBar = False
    Application.DisplayAlerts = True
    'Application.EnableCancelKey = xlInterrupt
    
End Sub
Attribute VB_Name = "RiskGraph"
Sub doRiskGraph(target As Range)
' erstellt von MBT Mechtersheimer GbR
' setzt den Wert des Risikos in die Spalte RAColl_RiskBefore_Risk
' 13849 wird z.B. EN ISO 13849-1:2008

'RAColl_RiskBefore
'RAColl_RiskBefore_Standard
'RAColl_RiskBefore_13849
'RAColl_RiskBefore_62061
'RAColl_RiskBefore_Risk
'RAColl_RiskReduction_ByProtective


    Dim target_row As Range
    Dim target_cel As Range

    Dim col_start As Integer
    Dim col_end As Integer
    Dim risk_width As Integer
    Dim Standard_to_Risk As Integer
    Dim S13849_to_Risk As Integer
    
    Dim RiskResult As Integer
    Dim RiskResult_partial As Integer
    
    Dim calculate_any As Boolean
    Dim calculate_13849 As Boolean
    Dim calculate_62061 As Boolean
    
        
    col_start = target.column
    col_end = target.column + target.Columns.Count - 1
    risk_width = Range("RAColl_RiskBefore").column + Range("RAColl_RiskBefore").Columns.Count - 1
    Standard_to_Risk = Range("RAColl_RiskBefore_Risk").column - Range("RAColl_RiskBefore_Standard").column
    S13849_to_Risk = Range("RAColl_RiskBefore_Risk").column - Range("RAColl_RiskBefore_S").column

    
    For Each target_row In target.Rows
        'setup each row seperately
        RiskResult = 0
        RiskResult_partial = 0
        calculate_any = True
        calculate_62061 = False
        calculate_13849 = False
                
        If Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_Standard").column).Value) Then
            'do not calculate from values, since value directly given
            calculate_any = False
        End If
        For Each target_cel In target_row.Cells
            'transcribe directly if standard gives a value
            If target_cel.column = Range("RAColl_RiskBefore_Standard").column Then
                Cells(target_cel.row, Range("RAColl_RiskBefore_Risk").column).Value = target_cel.Value
                calculate_any = False
            End If
            
            'calculate from graphs
            If calculate_any Then
                'use 13849
                If target_cel.column >= Range("RAColl_RiskBefore_13849").column And Range("RAColl_RiskBefore_13849").column + Range("RAColl_RiskBefore_13849").Columns.Count - 1 >= target_cel.column Then
                    If target_cel.Value = 1 Or target_cel.Value = 2 Then
                        calculate_13849 = True
                    End If
                End If
                'use 62061
                If target_cel.column >= Range("RAColl_RiskBefore_62061").column And Range("RAColl_RiskBefore_62061").column + Range("RAColl_RiskBefore_62061").Columns.Count - 1 >= target_cel.column Then
                    If target_cel.Value > 0 And target_cel.Value < 6 Then
                        calculate_62061 = True
                    End If
                End If
            End If
        Next target_cel
    
        If calculate_13849 And Not calculate_62061 Then
            Cells(target_row.row, Range("RAColl_RiskBefore_Risk").column).Value = calculate13849graph(target_row)
        End If
        
        If calculate_62061 And Not calculate_13849 Then
            Cells(target_row.row, Range("RAColl_RiskBefore_Risk").column).Value = calculate62061graph(target_row)
        End If
    Next target_row
End Sub

Sub translateRiskGraph(target As Range)
'RAColl_RiskBefore
'RAColl_RiskBefore_Standard
'RAColl_RiskBefore_13849
'RAColl_RiskBefore_62061
'RAColl_RiskBefore_Risk
'RAColl_RiskReduction_ByProtective
    
    Dim calculate_any As Boolean
    Dim calculate_13849 As Boolean
    Dim calculate_62061 As Boolean

    Dim target_row As Range
    Dim target_cel As Range

    For Each target_row In target.Rows
        'setup each row seperately
        RiskResult = 0
        RiskResult_partial = 0
        calculate_any = False
        calculate_62061 = False
        calculate_13849 = False
                
        For Each target_cel In target_row.Cells
            If target_cel.column = Range("RAColl_RiskReduction_ByProtective").column Then
                calculate_any = True
            End If
        Next target_cel
        
        If Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_Standard").column).Value) Then
            'do not calculate from values, since value directly given
            calculate_any = False
        End If
        
        If calculate_any Then
            If Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_S").column).Value) And _
               Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_F").column).Value) And _
               Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_P").column).Value) Then
                'W is not necessary for 13849 --- it will be set to 2
                calculate_13849 = True
            End If
            If Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_S62061").column).Value) And _
               Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_F62061").column).Value) And _
               Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_P62061").column).Value) And _
               Not IsEmpty(Cells(target_row.row, Range("RAColl_RiskBefore_W62061").column).Value) Then
                calculate_62061 = True
            End If
            
            If calculate_13849 And Not calculate_62061 Then
                Cells(target_row.row, Range("RAColl_RiskBefore_Risk").column).Value = calculate13849graph(target_row)
            End If
            
            If calculate_62061 And Not calculate_13849 Then
                Cells(target_row.row, Range("RAColl_RiskBefore_Risk").column).Value = calculate62061graph(target_row)
            End If
        End If
    Next target_row
End Sub


Function calculate62061graph(target_row As Range) As Variant
    calculate62061graph = ""
    Dim RiskResult As Integer
    
    'RiskResult_partial = frequency of hazard + possibility of avoidance + probability of occurance
    RiskResult_partial = Cells(target_row.row, Range("RAColl_RiskBefore_F62061").column).Value _
                       + Cells(target_row.row, Range("RAColl_RiskBefore_P62061").column).Value _
                       + Cells(target_row.row, Range("RAColl_RiskBefore_W62061").column).Value
    'go through SIL Table
    Select Case Cells(target_row.row, Range("RAColl_RiskBefore_S62061").column).Value
        Case 1
            If RiskResult_partial < 14 Then
                RiskResult = 2
            Else
                RiskResult = 3
            End If
        Case 2
            If RiskResult_partial < 14 Then
                RiskResult = 3
            Else
                RiskResult = 4
            End If
            If RiskResult_partial < 11 Then
                RiskResult = 2
            End If
        Case 3
            If RiskResult_partial < 14 Then
                RiskResult = 4
            Else
                RiskResult = 5
            End If
            If RiskResult_partial < 11 Then
                RiskResult = 3
            End If
            If RiskResult_partial < 8 Then
                RiskResult = 2
            End If
        Case 4
            If RiskResult_partial < 11 Then
                RiskResult = 4
            Else
                RiskResult = 5
            End If
    End Select
    'if protective measures should be taken, display SIL Level
    If "x" = Cells(target_row.row, Range("RAColl_RiskReduction_ByProtective").column).Value Then
        Select Case RiskResult
            Case 1
                calculate62061graph = "AM"
            Case 2
                calculate62061graph = "AM"
            Case 3
                calculate62061graph = "SIL 1"
            Case 4
                calculate62061graph = "SIL 2"
            Case 5
                calculate62061graph = "SIL 3"
        End Select
    Else
        calculate62061graph = RiskResult
    End If
    
    'clear cell if result out of bounds
    If Cells(target_row.row, Range("RAColl_RiskBefore_S62061").column).Value < 1 Or Cells(target_row.row, Range("RAColl_RiskBefore_S62061").column).Value > 4 Then
        calculate62061graph = ""
    End If
    If Cells(target_row.row, Range("RAColl_RiskBefore_F62061").column).Value < 1 Or Cells(target_row.row, Range("RAColl_RiskBefore_F62061").column).Value > 5 Then
        calculate62061graph = ""
    End If
    If Cells(target_row.row, Range("RAColl_RiskBefore_P62061").column).Value < 1 Or Cells(target_row.row, Range("RAColl_RiskBefore_P62061").column).Value > 5 Then
        calculate62061graph = ""
    End If
    If Cells(target_row.row, Range("RAColl_RiskBefore_W62061").column).Value < 1 Or Cells(target_row.row, Range("RAColl_RiskBefore_W62061").column).Value > 5 Then
        calculate62061graph = ""
    End If
End Function

Function calculate13849graph(target_row As Range) As Variant
    calculate13849graph = ""
    Dim RiskResult As Integer

    'severity of injury
    If Cells(target_row.row, Range("RAColl_RiskBefore_S").column).Value = 1 Then
        RiskResult = 3
    ElseIf Cells(target_row.row, Range("RAColl_RiskBefore_S").column).Value = 2 Then
        RiskResult = 5
    Else
        RiskResult = 10
    End If
    'frequency of hazard
    If Cells(target_row.row, Range("RAColl_RiskBefore_F").column).Value = 1 Then
        RiskResult = RiskResult - 1
    ElseIf Cells(target_row.row, Range("RAColl_RiskBefore_F").column).Value = 2 Then
        'nothing
    Else
        RiskResult = 10
    End If
    'possibility of avoidance
    If Cells(target_row.row, Range("RAColl_RiskBefore_P").column).Value = 1 Then
        RiskResult = RiskResult - 1
    ElseIf Cells(target_row.row, Range("RAColl_RiskBefore_P").column).Value = 2 Then
        'nothing
    Else
        RiskResult = 10
    End If
    'probability of occurance -- value not necessary, since old 13849 did not need it and new leaves it as an option
    If Cells(target_row.row, Range("RAColl_RiskBefore_W").column).Value = 1 Then
        RiskResult = RiskResult - 1
    Else
        'nothing
    End If
    If RiskResult = 0 Then
        RiskResult = 1
    End If
    
    If "x" = Cells(target_row.row, Range("RAColl_RiskReduction_ByProtective").column).Value Then
        Select Case RiskResult
            Case 1
                calculate13849graph = "a"
            Case 2
                calculate13849graph = "b"
            Case 3
                calculate13849graph = "c"
            Case 4
                calculate13849graph = "d"
            Case 5
                calculate13849graph = "e"
        End Select
    Else
        If RiskResult < 6 Then
            calculate13849graph = RiskResult
        End If
        'if value bigger than 5, if will be left as ""
    End If
End Function
Attribute VB_Name = "StandardSelection"

'----------------------------------------------------------------------------------------
'new since Version 2.5.5
'if a standard is entered:
' -- it is replaced with its real number
' -- a selection is offered for other standards with the same number
' -- its title is entered one cell to the right


'return the first full number in a string
'e.g. EN ISO 13849-1 becomes 13849
' erstellt von MBT Mechtersheimer GbR
Function ReturnFirstNumber(StandardNumber As String, Optional IgnoreDash As Boolean = True) As String
    Dim i As Integer
    Dim myString As String
    Dim returnString As String
    Dim numberStarted As Boolean
    Dim numberEnded As Boolean
        
    returnString = ""
    numberStarted = False
    numberEnded = False
    
    i = 1
    For i = 1 To Len(StandardNumber)
        myString = Mid(StandardNumber, i, 1)
        
        If True = numberStarted And Not IsNumeric(myString) Then
            If IgnoreDash And myString = "-" Then
                'nothing
            Else
                numberEnded = True
            End If
        End If
        
        If False = numberStarted And myString <> " " And IsNumeric(myString) Then
            numberStarted = True
        End If
        
        If numberStarted And Not numberEnded Then
            returnString = returnString & Mid(StandardNumber, i, 1)
        End If
    Next i

    ReturnFirstNumber = returnString
End Function

'checks if the entered standard already exists
' erstellt von MBT Mechtersheimer GbR
Function CheckForExistingStandards(StandardNumber As String) As Boolean

    CheckForExistingStandards = False

    Dim STrng As Range
    Dim STcell As Range

    Set STrng = Table_BStandard.Range("Table_Standards_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Then
            CheckForExistingStandards = True
            Exit Function
        End If
        If StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            CheckForExistingStandards = True
            Exit Function
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Own_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Then
            CheckForExistingStandards = True
            Exit Function
        End If
        If StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            CheckForExistingStandards = True
            Exit Function
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Old_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Then
            CheckForExistingStandards = True
            Exit Function
        End If
        If StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            CheckForExistingStandards = True
            Exit Function
        End If
    Next STcell

End Function

'returns a list of all standards with the same first number
'e.g. 13849-1, 13849-2
' erstellt von MBT Mechtersheimer GbR
Function ReturnListOfSimilarStandards(StandardNumber As String) As String
    
    ReturnListOfSimilarStandards = ""

    Dim STrng As Range
    Dim STcell As Range
    Dim ContainsDash As Boolean
    
    ContainsDash = False
    If Len(StandardNumber) > 1 Then
        If InStr(StandardNumber, "-") > 0 Then
            ContainsDash = True
        End If
    End If
    
    'Excel 2010 has a problem of saving dropdownlists with more than 13 individual items
    '2 items are warning message
    Dim MaxLenghtOfList As Integer
    MaxLenghtOfList = 10
    Dim LenghtOfList As Integer
    LenghtOfList = 0
    
    Set STrng = Table_BStandard.Range("Table_Standards_StandardNumber")

    'find any standard with same number and create a list
    For Each STcell In STrng
        If StandardNumber = ReturnFirstNumber(STcell.Text, ContainsDash) And LenghtOfList < MaxLenghtOfList Then
            ReturnListOfSimilarStandards = ReturnListOfSimilarStandards & STcell.Text & ","
            LenghtOfList = LenghtOfList + 1
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Old_StandardNumber")

    'find any standard with same number and create a list
    For Each STcell In STrng
        If StandardNumber = ReturnFirstNumber(STcell.Text, ContainsDash) And LenghtOfList < MaxLenghtOfList Then
            ReturnListOfSimilarStandards = ReturnListOfSimilarStandards & STcell.Text & ","
            LenghtOfList = LenghtOfList + 1
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Own_StandardNumber")

    'find any standard with same number and create a list
    For Each STcell In STrng
        If StandardNumber = ReturnFirstNumber(STcell.Text, ContainsDash) And LenghtOfList < MaxLenghtOfList Then
            ReturnListOfSimilarStandards = ReturnListOfSimilarStandards & STcell.Text & ","
            LenghtOfList = LenghtOfList + 1
        End If
    Next STcell
    
    'Msg_dropDownToLong
    If LenghtOfList = MaxLenghtOfList Then
        ReturnListOfSimilarStandards = ReturnListOfSimilarStandards & Table_Language.Range("Msg_dropDownToLong").Text & ","
    End If

    'remove last comma
    If Len(ReturnListOfSimilarStandards) > 2 Then
        ReturnListOfSimilarStandards = Left(ReturnListOfSimilarStandards, Len(ReturnListOfSimilarStandards) - 1)
    End If

End Function

Sub StandardDataselection(RArng As Range)
' erstellt von MBT Mechtersheimer GbR
' setzt die Daten|fffd|berpr|fffd|fungen auf Werte, die der Norm |fffd|hneln
' 13849 wird z.B. EN ISO 13849-1:2008

    Dim StandardNumber As String
    StandardNumber = RArng.Text
    
    If ReturnFirstNumber(StandardNumber) = "" Or StandardNumber = "'---" Then
        RArng.Validation.Delete
        EnterEHSRstandardSelectionInCell RArng
        RArng.Offset(0, 1).FormulaR1C1 = ""
        Exit Sub
    End If
    If Not IsNumeric(Mid(StandardNumber, 1, 1)) Then
        If CheckForExistingStandards(StandardNumber) Then
            EnterStandardName StandardNumber, RArng
        Else
            RArng.Offset(0, 1).FormulaR1C1 = ""
        End If
        Exit Sub
    End If
    
    StandardNumber = ReturnFirstNumber(StandardNumber)
    
    Dim ValidationList As String
    
    ValidationList = ReturnListOfSimilarStandards(StandardNumber)
    
    If Len(ValidationList) > 1 Then
        If InStr(ValidationList, ",") > 0 Then
            StandardNumber = Mid(ValidationList, 1, InStr(ValidationList, ",") - 1)
            
            'add new validation
            With RArng.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:=ValidationList
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = ""
                .InputMessage = ""
                .ErrorMessage = ""
                .ShowInput = True
                .ShowError = False
            End With
        Else
            RArng.Validation.Delete
            StandardNumber = ValidationList
        End If
        RArng.Value = StandardNumber
        EnterStandardName StandardNumber, RArng
    Else
        RArng.Offset(0, 1).FormulaR1C1 = ""
        RArng.Validation.Delete
    End If
End Sub

'enters a link to the standards name one cell to the right
Sub EnterStandardName(StandardNumber As String, target As Range)
    Dim column As Long
    Dim row As Long
    Dim StandardName As String
    
    Dim STrng As Range
    Dim STcell As Range

    Set STrng = Table_BStandard.Range("Table_Standards_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Or StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            column = STcell.column + 1
            row = STcell.row
            target.Offset(0, 1).FormulaR1C1 = "='" & Table_BStandard.Name & "'!" & "R" & row & "C" & column
            Exit Sub
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Own_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Or StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            column = STcell.column + 1
            row = STcell.row
            target.Offset(0, 1).FormulaR1C1 = "='" & Table_BStandard.Name & "'!" & "R" & row & "C" & column
            Exit Sub
        End If
    Next STcell

    Set STrng = Table_BStandard.Range("Table_Standards_Old_StandardNumber")

    'find any standard with same title
    For Each STcell In STrng
        If StandardNumber = STcell.Text Or StandardNumber = Replace(STcell.Text, ",", Chr(130)) Then
            column = STcell.column + 1
            row = STcell.row
            target.Offset(0, 1).FormulaR1C1 = "='" & Table_BStandard.Name & "'!" & "R" & row & "C" & column
            Exit Sub
        End If
    Next STcell
    
    target.Offset(0, 1).FormulaR1C1 = ""
End Sub

Sub EnterEHSRstandardSelectionInCell(RAcell As Range)
    Dim STrng As Range
    Dim STcell As Range
    Dim STselectedColumnNumber As Long
    Dim STselectedColumnName As Long
    Dim STCurrentRow As Long
    Dim EHSR_Number As String
    Dim Validationstring As String
    Dim ValidationBool As Boolean
    Dim STstart As String
    Dim STend As String
    
    Set STrng = Table_BStandard.Range("Table_Standards_EHSR")
    STselectedColumnNumber = Table_BStandard.Range("Table_Standards_StandardNumber").column
    STselectedColumnName = Table_BStandard.Range("Table_Standards_StandardName").column
    
    'get the EHSR number of the row
    EHSR_Number = Table_RiskAssessment.Cells(RAcell.row, Table_RiskAssessment.Range("RAColl_EHSRNumber").column).Text
    'fix for imports from Version < 2.5.6.1
    If EHSR_Number = "1.2.1. " Then
        EHSR_Number = "1.2.1."
    End If
    
    'find the list of standards with same EHSR number and create string
    STstart = ""
    STend = ""
    
    STCurrentRow = 0
    Validationstring = ""
    ValidationBool = False
    For Each STcell In STrng
        STCurrentRow = STCurrentRow + 1
        If EHSR_Number = STcell.Text And STstart = "" Then
            STstart = STcell.row
            ValidationBool = True
        End If
        If EHSR_Number = STcell.Text Then
            'one more row for ---
            STend = STcell.row + 1
        End If
    Next STcell
    
    If ValidationBool Then
        'put the non-selection value on
        Validationstring = "='" & Table_BStandard.Name & "'!$B$" & STstart & ":$B$" & STend
        
        'add new validation in front
        With RAcell.Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=Validationstring
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = False
        End With
        
    End If

End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_BStandard"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_EHSR"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_ENISO12100"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_Language"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_OwnCells"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_ProjectData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal target As Range)
' erstellt von MBT Mechtersheimer GbR
' new since v2.5
' Worksheet_Change Makro
' Wenn eine Auswahl Komformit|fffd|tsbewertung oder Einsatzbereich |fffd|ndert wird der Text durch einen Verweis ersetzt. Notwendig f|fffd|r |fffd|bersetzung
' If a selection from a dropdown is made, it is replaced by the formula pointing to the text. Needed for translation

    ' if the change affects more than one cell, e.g. deleting of a line, this script is stopped
    ' else Target = Range("???") throws an error
    If target.Count > 1 Then
        Exit Sub
    End If
    
    'disable Private Sub Worksheet_Change() for next changes (!recursive)
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    If target.row = Range("pd_assessmentOfConformity").row And target.column = Range("pd_assessmentOfConformity").column Then
        Select Case target.Value
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_select").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_select").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexX").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexX").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_X").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_X").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX_X").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX_X").Address
            Case Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX_X").Value
                target.Formula = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX_X").Address
        End Select
    End If
    
    If target.row = Range("pd_rangeOfApplication").row And target.column = Range("pd_rangeOfApplication").column Then
        Select Case target.Value
            Case Table_Language.Range("text_multiselect_Application_select").Value
                target.Value = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_select").Address
            Case Table_Language.Range("text_multiselect_Application_private").Value
                target.Value = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_private").Address
            Case Table_Language.Range("text_multiselect_Application_commercial").Value
                target.Value = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_commercial").Address
            Case Table_Language.Range("text_multiselect_Application_private_commercial").Value
                target.Value = "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_private_commercial").Address
        End Select
    End If

    'enable Private Sub Worksheet_Change()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub



Attribute VB_Name = "Table_RiskAssessment"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal target As Range)
' erstellt von MBT Mechtersheimer GbR
' Worksheet_Change Makro
' Wenn sich eine Zelle |fffd|ndert in der Risikobeurteilung wird hier entschieden, welche Folgeprozedur gestartet wird.
' If a cell changes, it is decided here, which followuup procedure is to be executed
    
    'new since version > 2.3.4.3
    'checking if the whole table has been changed
    'this usually means that the table has been enlarged
    'Logging will use up a lot of time, so automatic actions are skipped
    'current dowside: if the whole table is selected and contents are deleted, no logging is done
    If Table_RiskAssessment.Range("Table_RiskAssessment").Columns.Count = target.Columns.Count _
            And (Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count + 1) = target.Rows.Count _
            And Table_RiskAssessment.Range("Table_RiskAssessment").column = target.column _
            And (Table_RiskAssessment.Range("Table_RiskAssessment").row - 1) = target.row Then
        Exit Sub
    End If
    'end new
    
    'new since version >= 2.6
    'checking if editing has been done below the table
    'editing below the table is not logged and scripts are not executed
    If Table_RiskAssessment.ListObjects("Table_RiskAssessment").DataBodyRange.Rows.Count + _
            Table_RiskAssessment.ListObjects("Table_RiskAssessment").HeaderRowRange.row < _
            target.row Then
        Exit Sub
    End If
    
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Dim UserAutoFillFormulasInLists As Boolean
    UserAutoFillFormulasInLists = Application.AutoCorrect.AutoFillFormulasInLists
    Application.AutoCorrect.AutoFillFormulasInLists = False
    
    Dim col_start As Integer
    Dim col_end As Integer
    
    col_start = target.column
    col_end = target.column + target.Columns.Count - 1
    
    If col_start <= Range("Range_Lifecycle_all").column And Range("Range_Lifecycle_all").column <= col_end Then
        '"all" in life cycles got ticked / unticked --> check for ticks
        Enter_All_Lifecycles target
    End If
    If col_start <= Range("EHSR").column And Range("EHSR").column <= col_end Then
        '"EHSR does not apply" got ticked / unticked --> check if unticked and if unticked is OK
        MandatoryEHSR target
        'check for Headline changed or needed to be changed
        ChangeEHSR target, "RAColl_HazardExists"
    End If
    If col_start = Range("RAColl_StandardNumber").column And target.Columns.Count = 1 And target.Rows.Count = 1 Then
        'a standard number was entered; do a selection list or replace if only one number matches
        StandardDataselection target
    End If
    If col_start = Range("RAColl_RiskReduction_AppliedStandardNumber").column And target.Columns.Count = 1 And target.Rows.Count = 1 Then
        'a standard number was entered; do a selection list or replace if only one number matches
        'method from module "StandardSelection"
        StandardDataselection target
    End If
    If col_start <= Range("RAColl_HazardCovered").column And Range("RAColl_HazardCovered").column <= col_end Then
        '"hazard is done" got ticked / unticked --> check if tick and if tick is OK
        If Stop_Hazard_is_done(target) Then
            'do nothing, line was reset
        Else
            'check for Headline changed or needed to be changed
            ChangeEHSR target, "RAColl_HazardCovered"
        End If
    End If
    'new since version >= 2.6.1
    'Risk graph no longer done by function but by macro
    If col_start >= Range("RAColl_RiskBefore").column And Range("RAColl_RiskBefore").column + Range("RAColl_RiskBefore").Columns.Count - 1 >= col_end Then
        'do Risk Graph
        doRiskGraph target
    End If
    If col_start <= Range("RAColl_RiskReduction_ByProtective").column And Range("RAColl_RiskReduction_ByProtective").column <= col_end Then
        'do Risk Graph
        translateRiskGraph target
    End If
    
    
    
    'any change is logged, always (automatic changes, like language or standard names are never logged)
    'deactivate next row, if problems arise with logging
    Log_Changes target
    
    'reset Date of last change in affected rows
    Set_Date_of_Lastchange target
    
    'enable Private Sub Worksheet_Calculate()
    Application.AutoCorrect.AutoFillFormulasInLists = UserAutoFillFormulasInLists
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Sub Enter_All_Lifecycles(target As Range)
' erstellt von MBT Mechtersheimer GbR
' Enter_All_Lifecycles Makro
' Alle Lebenszyklen werden mit einem X ausgef|fffd|llt.
' All life cycles are filled with an X
    
    Dim row_start As Integer
    Dim row_end As Integer
    
    row_start = target.row
    row_end = target.row + target.Rows.Count - 1
    
    Dim i As Integer
    Dim j As Integer
    'react to x and X
    For i = row_start To row_end
        If Cells(i, Range("Range_Lifecycle_all").column).Value = "x" Or Cells(i, Range("Range_Lifecycle_all").column).Value = "X" Then
            'go through all life cycles
            For j = 0 To Range("Range_Lifecycle").Columns.Count - 1
                'put an x
                Cells(i, Range("Range_Lifecycle").column + j).Value = "x"
            Next j
        End If
    Next i
End Sub

Sub MandatoryEHSR(target As Range)
' erstellt von MBT Mechtersheimer GbR
' MandatoryEHSR Makro
' "X" bei 1.1.2; 1.7.3; 1.7.4 mit Hinweis versehen:
' Achtung bei vollst|fffd|ndigen Maschinen Pflicht
    
    Dim row_start As Integer
    Dim row_end As Integer
    
    row_start = target.row
    row_end = target.row + target.Rows.Count - 1
    
    Dim NumberOfEHSR As String
    For target_row = row_start To row_end
        If UCase(Cells(target_row, Range("EHSR").column).Value) <> "X" Then
            NumberOfEHSR = Cells(target_row, Range("EHSRNumber").column).Value
            If NumberOfEHSR = "1.1.2." Or NumberOfEHSR = "1.7.3." Or NumberOfEHSR = "1.7.4." Then
                MsgBox (Table_Language.Range("Text_ToggleEHSRApplies").Value)
                Exit For
            End If
        End If
    Next
End Sub

Private Function Stop_Hazard_is_done(target As Range) As Boolean
' erstellt von MBT Mechtersheimer GbR
' Enter_All_Lifecycles Makro
' |fffd|berpr|fffd|ft ob Gef|fffd|hrdung wirklich bearbeitet ist.
' Checks if Hazard is really dealt with
    
    Dim current_Line As Range
    Dim i As Integer
    Dim target_row As Integer
    Dim Main_No As Integer
    Dim Sub_No As Integer
    Dim row_start As Integer
    Dim row_end As Integer
    
    row_start = target.row
    row_end = target.row + target.Rows.Count - 1

    Dim next_row As Boolean
    Stop_Hazard_is_done = False
    
    For target_row = row_start To row_end
        'react to x and X
        If Cells(target_row, Range("Hazard_is_done").column).Value = "x" Or Cells(target_row, Range("Hazard_is_done").column).Value = "X" Then
            next_row = False
            If Cells(target_row, Range("Further_reduction").column).Value = "-" Then
                'Exit Sub
                next_row = True
            End If
            If next_row = False Then
                If Cells(target_row, Range("Further_reduction").column).Value = "" Then
                    MsgBox (Table_Language.Range("Text_Further_reduction").Value)
                    'MsgBox ("Weitere Reduzierung beurteilen")
                    Cells(target_row, Range("Hazard_is_done").column).Value = "-"
                    'Exit Sub
                    next_row = True
                    Stop_Hazard_is_done = True
                End If
            End If
            If next_row = False Then
                If Cells(target_row, Range("Running_No_Main").column).Value = "" Then
                    MsgBox (Table_Language.Range("Text_Running_No_Main").Value)
                    'MsgBox ("Fehlende HauptNummer")
                    Cells(target_row, Range("Hazard_is_done").column).Value = "-"
                    'Exit Sub
                    next_row = True
                    Stop_Hazard_is_done = True
                End If
            End If
            If next_row = False Then
                If Cells(target_row, Range("Running_No_Sub").column).Value = "" Then
                    MsgBox (Table_Language.Range("Text_Running_No_Sub").Value)
                    'MsgBox ("Fehlende UnterNummer")
                    Cells(target_row, Range("Hazard_is_done").column).Value = "-"
                    'Exit Sub
                    next_row = True
                    Stop_Hazard_is_done = True
                End If
            End If
            If next_row = False Then
               If Cells(target_row, Range("Further_reduction").column).Value = "x" Or Cells(target_row, Range("Further_reduction").column).Value = "X" Then
                    Main_No = Cells(target_row, Range("Running_No_Main").column).Value
                    Sub_No = Cells(target_row, Range("Running_No_Sub").column).Value
                    For Each current_Line In Range("Running_No_Main")
                        If Cells(current_Line.row, Range("Running_No_Main").column).Value = Main_No Then
                            If Cells(current_Line.row, Range("Running_No_Sub").column).Value = Sub_No + 1 Then
                                'Exit Sub
                                next_row = True
                            End If
                        End If
                    Next
                    If next_row = False Then
                        MsgBox (Table_Language.Range("Text_Further_reduction_necessary").Value)
                        'MsgBox ("Bei weiterer ben|fffd|tigter Reduzierung, erst neue Untergefahr erstellen.")
                        Cells(target_row, Range("Hazard_is_done").column).Value = "-"
                        Stop_Hazard_is_done = True
                    End If
                End If
            End If
        End If
    Next target_row
End Function

Sub Log_Changes(target As Range)
' erstellt von MBT Mechtersheimer GbR
' Log_Changes Makro
' Schreibt |fffd|nderungen mit. Hierzu wird in oberster Zeile und linker Spalte ein Index angelegt, damit der Log
' auch nach dem Sortieren noch funktioniert.
' Logs changes. An Index in the top row and leftmost column is generated, to ensure correct logging throughout
' sorting.
    
    Dim row_start As Long
    Dim row_end As Long
    Dim row As Long
    Dim col_start As Long
    Dim col_end As Long
    Dim col As Long
    
    'if a next column or row is added, millions of changes are counted. here numbers are reduced to the table only
    col_start = target.column
    If target.Columns.Count < (Table_RiskAssessment.Range("Table_RiskAssessment").Columns.Count) Then
        col_end = target.column + target.Columns.Count - 1
    Else
        col_end = Table_RiskAssessment.Range("Table_RiskAssessment").Columns.Count
    End If
    
    row_start = target.row
    If target.Rows.Count < (5 + Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count) Then
        row_end = target.row + target.Rows.Count - 1
    Else
        row_end = 5 + Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
    End If
    
    Dim i As Long
    Dim j As Long
    For i = row_start To row_end
        If i <> 5 Then
            For j = col_start To col_end
                'indexes are only generated when an entry is done.
                If Cells(i, 1).Value = "" Then
                    Cells(i, 1).Value = Application.WorksheetFunction.Max(Range(Cells(2, 1), Cells(ActiveSheet.UsedRange.Rows.Count - 1, 1))) + 1
                    Cells(2, 1).Value = Cells(i, 1).Value
                End If
                If Cells(1, j).Value = "" Then
                    Cells(1, j).Value = Application.WorksheetFunction.Max(Range("1:1")) + 1
                    Cells(1, 1).Value = Cells(1, j).Value
                End If
                'logs are written into the indexes. this ensures a working log after sorting of the table
                row = Cells(i, 1).Value
                col = Cells(1, j).Value
                If Table_RiskAssessment_Log.Cells(row, col).Value = "" Then
                    Table_RiskAssessment_Log.Cells(row, col).Value = Date & " " & Time & " " & Application.UserName & ": " & Cells(i, j).Text ' .Text necessary to prevent type mismatch with error messages
                Else
                    Table_RiskAssessment_Log.Cells(row, col).Value = Table_RiskAssessment_Log.Cells(row, col).Value & vbLf & Date & " " & Time & " " & Application.UserName & ": " & Cells(i, j).Text ' .Text necessary to prevent type mismatch with error messages
                End If
            Next j
        End If
    Next i
End Sub

Sub Set_Date_of_Lastchange(target As Range)
' erstellt von MBT Mechtersheimer GbR
' Set_Date_of_Lastchange Makro
' Schreibt |fffd|nderungs-Datum mit. --> Range_Date_of_Lastchange
' Logs date of changes.
    
    Dim row_start As Long
    Dim row_end As Long
    Dim row As Long
    Dim col_start As Long
    Dim col_end As Long
    Dim col As Long
    
    'if a next column or row is added, millions of changes are counted. here numbers are reduced to the table only
    col_start = target.column
    If target.Columns.Count < (Table_RiskAssessment.Range("Table_RiskAssessment").Columns.Count) Then
        col_end = target.column + target.Columns.Count - 1
    Else
        col_end = Table_RiskAssessment.Range("Table_RiskAssessment").Columns.Count
    End If
    
    row_start = target.row
    If target.Rows.Count < (5 + Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count) Then
        row_end = target.row + target.Rows.Count - 1
    Else
        row_end = 5 + Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
    End If

    If col_start <= Range("Range_Date_of_Lastchange").column And col_end >= Range("Range_Date_of_Lastchange").column Then
        Exit Sub
    End If

    Dim i As Long
    For i = row_start To row_end
        If i > 5 Then
            Cells(i, Range("Range_Date_of_Lastchange").column).Value = Date
        End If
    Next i
End Sub
Attribute VB_Name = "Table_RiskAssessment_Log"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Table_Version"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Update_Versions"
Dim wbOldFile As Workbook

Dim tableProjectData As Integer
Dim tableRiskAssessment As Integer
Dim tableRiskAssessmentLog As Integer
Dim tableBStandard As Integer
Dim tableENISO12100 As Integer
Dim tableLanguage As Integer
Dim tableOwnCells As Integer
Dim tableVersion As Integer

Dim oldVersionNumber As Integer

Sub Update(oldPath As String, oldFile As String)
'main method to be called from outside
'checks if file is available,
'then gets the version and the nmbering of the sheets,
'then fills out cells of this file

    If (oldPath & oldFile) = "" Then
        MsgBox ("File Not Found")
        Exit Sub
    End If
    If Len(Dir(oldPath & oldFile)) = 0 Then
        MsgBox ("File Not Found")
        Exit Sub
    End If
    
    ' turn off the screen updating
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Interactive = True
    Application.DisplayAlerts = False
    'find out the version of the old file
    Dim oldVersion As String
    Dim i As Integer
    
    'open old file
    Set wbOldFile = Workbooks.Open(oldPath & oldFile, True, True)
    'get Numbers of Tables
    SetTableNumbers
    'transpose Version Number to Integer
    SetOldVersionNumber
    
    'put in the contents of the old file
    FillOutCells
    
    'reset the dropdownlists for selecting standards in table RiskAssessment
    ResetStandardDataselection
    'reset other dropdownlists
    ResetDataselection
    
    'reset conditional formats
    FormatConditionsResetting
    'reset links that point to an old version
    ResetLinksToOldVersion
    
    wbOldFile.Close False ' close the source workbook without saving any changes
    Set wbOldFile = Nothing ' free memory
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Interactive = True
    Application.DisplayAlerts = True
End Sub

Private Sub FillOutCells()
'find the right cells from old versions and put them in the corresponding fields
    FillOutObjectsProjectData
    FillOutCellsProjectData
    
    FillOutColumnsOwnStandards
    
    FillOutColumnsRiskAssessment
    UpdateRiskAssessmentEHSR
End Sub

Private Sub FillOutObjectsProjectData()
    'changed in v2.5
    'before Version 2.5 theese fields were checkboxes
    'all possible selections are tested and filled out
    If oldVersionNumber <= 21 Then
        Dim assessmentOfConformity As Integer
        assessmentOfConformity = 0
        If wbOldFile.Sheets(tableProjectData).CheckBoxes("Control_Annex_VIII").Value = 1 Then
            assessmentOfConformity = assessmentOfConformity + 1
        End If
        If wbOldFile.Sheets(tableProjectData).CheckBoxes("Control_Annex_IX").Value = 1 Then
            assessmentOfConformity = assessmentOfConformity + 2
        End If
        If wbOldFile.Sheets(tableProjectData).CheckBoxes("Control_Annex_X").Value = 1 Then
            assessmentOfConformity = assessmentOfConformity + 4
        End If
        
        Select Case assessmentOfConformity
            Case 0
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_select").Address
            Case 1
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII").Address
            Case 2
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX").Address
            Case 3
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX").Address
            Case 4
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexX").Address
            Case 5
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_X").Address
            Case 6
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexIX_X").Address
            Case 7
                Table_ProjectData.Range("pd_assessmentOfConformity").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_AssessmentOfConformity_AnnexVIII_IX_X").Address
        End Select

        
        Dim rangeOfApplication As Integer
        rangeOfApplication = 0
        If wbOldFile.Sheets(tableProjectData).CheckBoxes("Control_Privat").Value = 1 Then
            rangeOfApplication = rangeOfApplication + 1
        End If
        If wbOldFile.Sheets(tableProjectData).CheckBoxes("Control_Industrial").Value = 1 Then
            rangeOfApplication = rangeOfApplication + 2
        End If
        
        Select Case rangeOfApplication
            Case 0
                Table_ProjectData.Range("pd_rangeOfApplication").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_select").Address
            Case 1
                Table_ProjectData.Range("pd_rangeOfApplication").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_private").Address
            Case 2
                Table_ProjectData.Range("pd_rangeOfApplication").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_commercial").Address
            Case 3
                Table_ProjectData.Range("pd_rangeOfApplication").Formula = _
                "=" & Table_Language.Name & "!" & Table_Language.Range("text_multiselect_Application_private_commercial").Address
        End Select
    End If
    
    'after Version 2.5 theese fields can be copied
    If oldVersionNumber >= 22 Then
        With Table_ProjectData
            .Range("pd_assessmentOfConformity").Formula = GetOldCellFor("pd_assessmentOfConformity", tableProjectData).Formula
            .Range("pd_rangeOfApplication").Formula = GetOldCellFor("pd_rangeOfApplication", tableProjectData).Formula
        End With
    End If
End Sub

Private Sub FillOutCellsProjectData()
    'fill out Table_ProjectData
    With Table_ProjectData
        'Basic Data
            'since 2.2.5 = 9
        If 9 <= oldVersionNumber Then
            .Range("pd_manufacturer").Value = GetOldCellFor("pd_manufacturer", tableProjectData).Value
            .Range("pd_address").Value = GetOldCellFor("pd_address", tableProjectData).Value
            .Range("pd_version").Value = GetOldCellFor("pd_version", tableProjectData).Value
            .Range("pd_dateOfLastChange").Value = GetOldCellFor("pd_dateOfLastChange", tableProjectData).Value
        End If
            'since 2.0
        .Range("pd_nameMachine").Value = GetOldCellFor("pd_nameMachine", tableProjectData).Value
        .Range("pd_typeMachine").Value = GetOldCellFor("pd_typeMachine", tableProjectData).Value
        .Range("pd_serialNumber").Value = GetOldCellFor("pd_serialNumber", tableProjectData).Value
            'since 2.4
        If 19 <= oldVersionNumber Then
            .Range("pd_yearOfConstruction").Value = GetOldCellFor("pd_yearOfConstruction", tableProjectData).Value
        End If
            'since 2.0
        .Range("pd_machineDescription").Value = GetOldCellFor("pd_machineDescription", tableProjectData).Value
        .Range("pd_notifiedBody").Value = GetOldCellFor("pd_notifiedBody", tableProjectData).Value
        'Project leader
        .Range("Project_Leader").Value = GetOldCellFor("Project_Leader", tableProjectData).Value
        'Designer
        .Range("Mechanical_Designer").Value = GetOldCellFor("Mechanical_Designer", tableProjectData).Value
        .Range("Electrical_Designer").Value = GetOldCellFor("Electrical_Designer", tableProjectData).Value
        .Range("Control_System_Designer").Value = GetOldCellFor("Control_System_Designer", tableProjectData).Value
        .Range("Communication_Medium_Designer").Value = GetOldCellFor("Communication_Medium_Designer", tableProjectData).Value
        .Range("authorised_person").Value = GetOldCellFor("authorised_person", tableProjectData).Value
        'usage
        .Range("pd_usage").Value = GetOldCellFor("pd_usage", tableProjectData).Value
        .Range("pd_misuse").Value = GetOldCellFor("pd_misuse", tableProjectData).Value
        .Range("pd_operatingModes").Value = GetOldCellFor("pd_operatingModes", tableProjectData).Value
        'space limits
        .Range("Overview_Drawing").Value = GetOldCellFor("Overview_Drawing", tableProjectData).Value
        .Range("Requirement_Design_Spec").Value = GetOldCellFor("Requirement_Design_Spec", tableProjectData).Value
        .Range("Technical_Spec").Value = GetOldCellFor("Technical_Spec", tableProjectData).Value
        .Range("Description_on_Setup").Value = GetOldCellFor("Description_on_Setup", tableProjectData).Value
        .Range("Technical_Data").Value = GetOldCellFor("Technical_Data", tableProjectData).Value
        'time limits
        .Range("Lifcycle_machine").Value = GetOldCellFor("Lifcycle_machine", tableProjectData).Value
        .Range("Lifecycle_wear_parts").Value = GetOldCellFor("Lifecycle_wear_parts", tableProjectData).Value
        .Range("Recommanded_maintenance").Value = GetOldCellFor("Recommanded_maintenance", tableProjectData).Value
        'other limits
        .Range("Materials_processed").Value = GetOldCellFor("Materials_processed", tableProjectData).Value
        .Range("Necessary_cleanliness").Value = GetOldCellFor("Necessary_cleanliness", tableProjectData).Value
        .Range("Max_min_temperature").Value = GetOldCellFor("Max_min_temperature", tableProjectData).Value
        .Range("Max_min_temperature_environment").Value = GetOldCellFor("Max_min_temperature_environment", tableProjectData).Value
        .Range("Operation_in_out").Value = GetOldCellFor("Operation_in_out", tableProjectData).Value
        .Range("dry_wet_weather").Value = GetOldCellFor("dry_wet_weather", tableProjectData).Value
        .Range("direct_indirect_sunlight").Value = GetOldCellFor("direct_indirect_sunlight", tableProjectData).Value
        .Range("dust_moisture").Value = GetOldCellFor("dust_moisture", tableProjectData).Value
            'since 2.2
        If 4 <= oldVersionNumber Then
            .Range("pd_aggressiveEnvironment").Value = GetOldCellFor("pd_aggressiveEnvironment", tableProjectData).Value 'seit 2.2
        End If
            'since 2.0
        .Range("pd_moreLimits").Value = GetOldCellFor("pd_moreLimits", tableProjectData).Value
        'subcontractors
        .Range("pd_mechanicalSubSteel").Value = GetOldCellFor("pd_mechanicalSubSteel", tableProjectData).Value
        .Range("pd_mechanicalSubAccess").Value = GetOldCellFor("pd_mechanicalSubAccess", tableProjectData).Value
        .Range("pd_electricalSub").Value = GetOldCellFor("pd_electricalSub", tableProjectData).Value
        .Range("pd_hydraulicSub").Value = GetOldCellFor("pd_hydraulicSub", tableProjectData).Value
        .Range("pd_pneumaticSub").Value = GetOldCellFor("pd_pneumaticSub", tableProjectData).Value
        .Range("pd_fluidSub").Value = GetOldCellFor("pd_fluidSub", tableProjectData).Value
        '12100 table
        .Range("pd_operatorMatrix").Value = GetOldCellFor("pd_operatorMatrix", tableProjectData).Value
        'standard list
        'Set rngZelle = Range("pd_NormNumberTargetStart").End(xlUp)
    End With
End Sub

Private Function GetOldCellFor(cellName As String, tableNumber As Integer) As Range
    Dim nameExists As Boolean
    Dim oldPosition As String
    Dim oldPosition1 As String
    Dim oldPosition2 As String
    
    nameExists = False
    On Error Resume Next
        nameExists = wbOldFile.Sheets(tableNumber).Range(cellName).Rows.Count <> 0
    On Error GoTo 0
    'if the name exists, the cell is taken ELSE the cell is taken from a database where it should be
    'this is less error prone, because the user can have deleted cells
    'cell names are only complete since version 2.4.1
    If True = nameExists Then
        Set GetOldCellFor = wbOldFile.Sheets(tableNumber).Range(cellName)
    Else
        If tableNumber = tableProjectData Then
            oldPosition = GetOldCellForProject(cellName)
        End If
        
        'cell might be deleted or otherwise not found
        'only return value if cell exists
        If oldPosition <> "" Then
            oldPosition1 = Split(oldPosition, ",")(0)
            If 0 < UBound(Split(oldPosition, ",")) Then 'Ubound returns 1 if 2 elements exist
                oldPosition2 = Split(oldPosition, ",")(1)
            Else
                oldPosition2 = oldPosition1
            End If
            Set GetOldCellFor = wbOldFile.Sheets(tableNumber).Range(oldPosition1, oldPosition2)
        End If
    End If
End Function

Private Sub FillOutColumnsRiskAssessment()
    'remove filters before copying
    If wbOldFile.Sheets(tableRiskAssessment).ListObjects(1).AutoFilter.FilterMode Then
        'wbOldFile.Sheets(tableRiskAssessment).ShowAllData 'did not work as expected. Some filters were removed, others resulted in errors
        wbOldFile.Sheets(tableRiskAssessment).AutoFilterMode = False 'new version... hope this works. If you keep running into errors here, remove filter in old files manually!
    End If
    
    CopyRiskAssessmentColumn "Haupt"
    CopyRiskAssessmentColumn "Unter"
    CopyRiskAssessmentColumn "Nr." ', , True
    CopyRiskAssessmentColumn "Bezeichnung" ', , True
    CopyRiskAssessmentColumn "Original", "Spalte212" 'new name since 2.6
    CopyRiskAssessmentColumn "Gef|fffd|hrdung vorhanden", "Spalte3" 'new name since 2.6
    CopyRiskAssessmentColumn "Datum der letzten |fffd|nderung"
    CopyRiskAssessmentColumn "Maschinentyp"
    CopyRiskAssessmentColumn "Inhalt bereits abgedeckt?"
    CopyRiskAssessmentColumn "Norm-Typ"
    CopyRiskAssessmentColumn "Norm Nummer"
    CopyRiskAssessmentColumn "Norm Titel", , False
    CopyRiskAssessmentColumn "Abschnitt / Detail"
    CopyRiskAssessmentColumn "Norminhalt (eingek|fffd|rzt und bearbeitet)"
    CopyRiskAssessmentColumn "Ursprung"
    CopyRiskAssessmentColumn "m|fffd|gliche Auswirkung"
    CopyRiskAssessmentColumn "Ort / Gefahrbereich / Position in Zeichnung"
    CopyRiskAssessmentColumn "Gef|fffd|hrdung / Gef|fffd|hrdungssituation"
    CopyRiskAssessmentColumn "Gef|fffd|hrdete Personen"
    CopyRiskAssessmentColumn "Alle"
    CopyRiskAssessmentColumn "Transport"
    CopyRiskAssessmentColumn "Montage und Installation In Betrieb nehmen"
    CopyRiskAssessmentColumn "Einrichten Einlernen (Teachen)/ Programmieren und/oder Umr|fffd|sten"
    CopyRiskAssessmentColumn "Betrieb"
    CopyRiskAssessmentColumn "Reinigung Instandhaltung"
    CopyRiskAssessmentColumn "Fehlersuche und -beseitigung"
    CopyRiskAssessmentColumn "Demontage Au|fffd|er Betrieb nehmen"
    CopyRiskAssessmentColumn "Normvorgabe"
    CopyRiskAssessmentColumn "S"
    CopyRiskAssessmentColumn "F"
    CopyRiskAssessmentColumn "P"
    CopyRiskAssessmentColumn "W"
    'CopyRiskAssessmentColumn "Risiko" --> Formula
    CopyRiskAssessmentColumn "konstruktiv"
    CopyRiskAssessmentColumn "sicherheitstechnisch"
    CopyRiskAssessmentColumn "informativ"
    CopyRiskAssessmentColumn "Beschreibung der Risikominderung"
    CopyRiskAssessmentColumn "angewandte technische Spezifikation / harmonisierte B / C Norm"
    CopyRiskAssessmentColumn "Titel", , False
    CopyRiskAssessmentColumn "Fundstelle in Norm"
    CopyRiskAssessmentColumn "Sicherheitsfunktion", "Spalte4" 'new name since 2.6
    CopyRiskAssessmentColumn "Verifikation Validation", "Spalte2" 'new name since 2.6
    CopyRiskAssessmentColumn "technischer Bericht / Pr|fffd|fergebnis"
    CopyRiskAssessmentColumn "S2"
    CopyRiskAssessmentColumn "F2", "F3"
    CopyRiskAssessmentColumn "P2", "P4"
    CopyRiskAssessmentColumn "W2"
    'CopyRiskAssessmentColumn "Risiko2" --> Formula
    CopyRiskAssessmentColumn "Weitere Reduzierung notwendig?"
    CopyRiskAssessmentColumn "Kommentar"
    CopyRiskAssessmentColumn "Bearbeiter"
    CopyRiskAssessmentColumn "Gef|fffd|hrdung ist behandelt?"
    CopyRiskAssessmentColumn "Sprache der Zeile", "Spalte5" 'new name since 2.6
End Sub

Private Sub UpdateRiskAssessmentEHSR()

    Dim i As Long
    Dim j As Long
    Dim EntryNo As Long
    Dim LastRow As Long
    Dim EHSRarray() As String
    Dim HyperlinkRow As Long
    Dim HyperlinkColumn As Long
    
    EHSRarray = GetEHSRarray()
        
    'for all rows of Table_RiskAssessment
    For i = 1 To Table_RiskAssessment.Range("Table_RiskAssessment").Rows.Count
        If Table_RiskAssessment.Range("Range_DirectiveNo").Rows(i).Value = "" Then
            Table_RiskAssessment.Range("Range_DirectiveNo").Rows(i).Value = "2006 / 42"
        End If
        'fix for imports from Version < 2.5.6.1
        If Table_RiskAssessment.Range("Range_GSA_Number").Rows(i).Value = "1.2.1. " Then
            Table_RiskAssessment.Range("Range_GSA_Number").Rows(i).Value = "1.2.1."
        End If
        
        EntryNo = 0
        'for all entries of EHSRarray
        For j = LBound(EHSRarray) To UBound(EHSRarray)
            'if same directive and number
            If EHSRarray(j, 2) = Table_RiskAssessment.Range("Range_DirectiveNo").Rows(i).Value _
               And EHSRarray(j, 3) = Table_RiskAssessment.Range("Range_GSA_Number").Rows(i).Value Then
                'remember the EHSRarray number of current line
                EntryNo = j
                'tick of this entry as found, if line is original
                If LCase(Table_RiskAssessment.Range("Range_IsOriginal").Rows(i).Value) = "x" Then
                    EHSRarray(j, 1) = "exists"
                End If
                Exit For
            End If
        Next j
        'EHSRarray(entryNO, ?) is the original of current line i
        
        If EntryNo > 0 Then
            Table_RiskAssessment.Range("Range_DirectiveNo").Rows(i).Value = EHSRarray(EntryNo, 2)
            Table_RiskAssessment.Range("Range_GSA_Number").Rows(i).Value = EHSRarray(EntryNo, 3)
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).Formula = EHSRarray(EntryNo, 4)
            Table_RiskAssessment.Range("Range_IsHeadline").Rows(i).Value = EHSRarray(EntryNo, 5)
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).Hyperlinks.Delete
            If EHSRarray(EntryNo, 6) <> "" Then
                HyperlinkRow = Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).row
                HyperlinkColumn = Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).column
                Table_RiskAssessment.Hyperlinks.Add _
                        anchor:=Table_RiskAssessment.Cells(HyperlinkRow, HyperlinkColumn), _
                        Address:=EHSRarray(EntryNo, 6)
            End If
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).WrapText = True 'Text umbrechen
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(i).Font.Underline = xlUnderlineStyleNone
        End If
    Next i

    LastRow = Table_RiskAssessment.ListObjects("Table_RiskAssessment").DataBodyRange.Rows.Count
    For j = LBound(EHSRarray) To UBound(EHSRarray)
        'do stuff with EHSRarray(?, 1) <> "exists"
        If EHSRarray(j, 1) = "" Then
            'increase size of table by one row
            ExpandTableRiskassessmentByOneRow
            LastRow = LastRow + 1
            'fill in missing line
            Table_RiskAssessment.Range("Range_DirectiveNo").Rows(LastRow).Value = EHSRarray(j, 2)
            Table_RiskAssessment.Range("Range_GSA_Number").Rows(LastRow).Value = EHSRarray(j, 3)
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(LastRow).Formula = EHSRarray(j, 4)
            Table_RiskAssessment.Range("Range_IsHeadline").Rows(LastRow).Value = EHSRarray(j, 5)
            If EHSRarray(j, 6) <> "" Then
                HyperlinkRow = Table_RiskAssessment.Range("Range_GSA_Title").Rows(LastRow).row
                HyperlinkColumn = Table_RiskAssessment.Range("Range_GSA_Title").Rows(LastRow).column
                Table_RiskAssessment.Hyperlinks.Add _
                        anchor:=Table_RiskAssessment.Cells(HyperlinkRow, HyperlinkColumn), _
                        Address:=EHSRarray(j, 6)
            End If
            Table_RiskAssessment.Range("Range_IsOriginal").Rows(LastRow).Value = "x"
            Table_RiskAssessment.Range("Range_HazardIsPresent").Rows(LastRow).Value = "x"
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(LastRow).WrapText = True
            Table_RiskAssessment.Range("Range_GSA_Title").Rows(LastRow).Font.Underline = xlUnderlineStyleNone
        End If
    Next j
        'http://stackoverflow.com/questions/3017852/vba-get-unique-values-from-array
End Sub

Private Function GetEHSRarray() As String()

    Dim i As Long
    Dim endLoop As Long
    Dim Arr() As String

    endLoop = Table_EHSR.Range("Table_EHSR_Setup").Rows.Count
    
    ReDim Arr(1 To endLoop, 1 To 6)
    '1 = present in RiskAssessment table
    '2 = RA_Setup_Directive
    '3 = RA_Setup_EHSR
    '4 = RA_Setup_Text
    '5 = RA_Setup_IsHeadline
    '6 = RA_Setup_Link
    
    For i = 1 To endLoop
        Arr(i, 1) = ""
        Arr(i, 2) = Table_EHSR.Range("RA_Setup_Directive").Rows(i).Value
        Arr(i, 3) = Table_EHSR.Range("RA_Setup_EHSR").Rows(i).Value
        Arr(i, 4) = Table_EHSR.Range("RA_Setup_Text").Rows(i).Formula
        Arr(i, 5) = Table_EHSR.Range("RA_Setup_IsHeadline").Rows(i).Value
        Arr(i, 6) = Table_EHSR.Range("RA_Setup_Link").Rows(i).Value
    Next i
    
    GetEHSRarray = Arr
    
End Function

Private Sub ExpandTableRiskassessmentByOneRow()
    Dim row_top As Long, row_bottom As Long, column_left As Long, column_right As Long

    With Table_RiskAssessment.ListObjects("Table_RiskAssessment")
        column_left = .DataBodyRange.column
        row_top = .HeaderRowRange.row
        column_right = .DataBodyRange.column + .DataBodyRange.Columns.Count - 1
        row_bottom = .HeaderRowRange.row + .DataBodyRange.Rows.Count + 1
    
        .Resize Range(Cells(row_top, column_left), Cells(row_bottom, column_right))
    End With
End Sub



'changed default false in PasteWithFormat to true in 2.5.6.4
Private Sub CopyRiskAssessmentColumn(ColumnName As String, _
            Optional OldColumnName As String = "doesNotExist", _
            Optional PasteWithFormat As Boolean = True)
    Dim TargetColumn As Integer
    Dim RangeExistsOld As Boolean
    Dim RangeExistsNew As Boolean
    
    RangeExistsOld = False
    'skipping errors and finding out if the range name exists at all
    On Error Resume Next
        RangeExistsOld = wbOldFile.Sheets(tableRiskAssessment).Range("Table_RiskAssessment[" & ColumnName & "]").column <> 0
        If RangeExistsOld Then
            OldColumnName = ColumnName
        Else
            RangeExistsOld = wbOldFile.Sheets(tableRiskAssessment).Range("Table_RiskAssessment[" & OldColumnName & "]").column <> 0
        End If
    On Error GoTo 0
    
    'should be no problem, just in case
    RangeExistsNew = False
    On Error Resume Next
        RangeExistsNew = Table_RiskAssessment.Range("Table_RiskAssessment[" & ColumnName & "]").column <> 0
    On Error GoTo 0
    
    If RangeExistsOld And RangeExistsNew Then
        TargetColumn = Table_RiskAssessment.Range("Table_RiskAssessment[" & ColumnName & "]").column
        wbOldFile.Sheets(tableRiskAssessment).Range("Table_RiskAssessment[" & OldColumnName & "]").Copy
        If PasteWithFormat Then
            'for formatting and hyperlinks
            Table_RiskAssessment.Cells(6, TargetColumn).PasteSpecial _
                Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Else
            Table_RiskAssessment.Cells(6, TargetColumn).PasteSpecial _
                Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End If
    End If
End Sub

Private Sub FillOutColumnsOwnStandards()
    'remove filters before copying
    If wbOldFile.Sheets(tableBStandard).ListObjects(1).AutoFilter.FilterMode Or _
        wbOldFile.Sheets(tableBStandard).ListObjects(2).AutoFilter.FilterMode Or _
        wbOldFile.Sheets(tableBStandard).ListObjects(3).AutoFilter.FilterMode Then
        wbOldFile.Sheets(tableBStandard).ShowAllData
    End If

    CopyOwnStandardColumn "GSA"
    CopyOwnStandardColumn "Nummer"
    CopyOwnStandardColumn "Bezeichnung"
    CopyOwnStandardColumn "Deutsch"
    CopyOwnStandardColumn "English"
    CopyOwnStandardColumn "Fran|fffd|ais"
End Sub

Private Sub CopyOwnStandardColumn(ColumnName As String, _
            Optional OldColumnName As String = "doesNotExist", _
            Optional PasteWithFormat As Boolean = False)
    Dim TargetColumn As Integer
    Dim RangeExistsOld As Boolean
    Dim RangeExistsNew As Boolean
    
    RangeExistsOld = False
    'skipping errors and finding out if the range name exists at all
    On Error Resume Next
        RangeExistsOld = wbOldFile.Sheets(tableBStandard).Range("Table_Standards_Own[" & ColumnName & "]").column <> 0
        If RangeExistsOld Then
            OldColumnName = ColumnName
        Else
            RangeExistsOld = wbOldFile.Sheets(tableBStandard).Range("Table_Standards_Own[" & OldColumnName & "]").column <> 0
        End If
    On Error GoTo 0
    
    'should be no problem, just in case
    RangeExistsNew = False
    On Error Resume Next
        RangeExistsNew = Table_BStandard.Range("Table_Standards_Own[" & ColumnName & "]").column <> 0
    On Error GoTo 0
    
    If RangeExistsOld And RangeExistsNew Then
        TargetColumn = Table_BStandard.Range("Table_Standards_Own[" & ColumnName & "]").column
        wbOldFile.Sheets(tableBStandard).Range("Table_Standards_Own[" & OldColumnName & "]").Copy
        If PasteWithFormat Then
            'for formatting and hyperlinks
            Table_BStandard.Cells(Table_BStandard.Range("Table_Standards_Own").row, TargetColumn).PasteSpecial _
                Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Else
            Table_BStandard.Cells(Table_BStandard.Range("Table_Standards_Own").row, TargetColumn).PasteSpecial _
                Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End If
    End If
End Sub


Private Function GetOldCellForProject(cellName As String) As String
    Select Case cellName
        Case "pd_manufacturer"
            Select Case oldVersionNumber
                Case 9 To 19 'since 2.2.5 = 9
                    GetOldCellForProject = "B3"
                Case Default 'did not exist before or was deleted by user if later version has not found it
                    GetOldCellForProject = ""
            End Select
        Case "pd_address"
            Select Case oldVersionNumber
                Case 9 To 19 'since 2.2.5 = 9
                    GetOldCellForProject = "B4"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_version"
            Select Case oldVersionNumber
                Case 9 To 19 'since 2.2.5 = 9
                    GetOldCellForProject = "B5"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_dateOfLastChange"
            Select Case oldVersionNumber
                Case 9 To 19 'since 2.2.5 = 9
                    GetOldCellForProject = "B6"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_nameMachine"
            Select Case oldVersionNumber
                Case 9 To 19
                    GetOldCellForProject = "B7"
                Case 1 To 8
                    GetOldCellForProject = "B3"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_typeMachine"
            Select Case oldVersionNumber
                Case 9 To 19
                    GetOldCellForProject = "B8"
                Case 1 To 8
                    GetOldCellForProject = "B4"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_serialNumber"
            Select Case oldVersionNumber
                Case 9 To 19
                    GetOldCellForProject = "B9"
                Case 1 To 8
                    GetOldCellForProject = "B5"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_yearOfConstruction"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B10"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_machineDescription"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B11"
                Case 9 To 18
                    GetOldCellForProject = "B10"
                Case 1 To 8
                    GetOldCellForProject = "B6"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_notifiedBody"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B13"
                Case 9 To 18
                    GetOldCellForProject = "B12"
                Case 1 To 8
                    GetOldCellForProject = "B8"
                Case Default
                    GetOldCellForProject = ""
            End Select
'       'Project leader named since version 1
'       'Designer named since version 1
'       'usage
        Case "pd_usage"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B24"
                Case 9 To 18
                    GetOldCellForProject = "B23"
                Case 1 To 8
                    GetOldCellForProject = "B19"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_misuse"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B25"
                Case 15 To 18
                    GetOldCellForProject = "B24"
                Case 9 To 14
                    GetOldCellForProject = "B25"
                Case 1 To 8
                    GetOldCellForProject = "B21"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_operatingModes"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B27"
                Case 15 To 18
                    GetOldCellForProject = "B26"
                Case 9 To 14
                    GetOldCellForProject = "B29" ' "B29,B32"
                Case 1 To 8
                    GetOldCellForProject = "B25" ' "B25,B28"
                Case Default
                    GetOldCellForProject = ""
            End Select
'       'space limits named since version 1
'       'time limits named since version 1
'       'other limits named since version 1
'           'since 2.2
        Case "pd_aggressiveEnvironment"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B62"
                Case 15 To 18
                    GetOldCellForProject = "B61"
                Case 9 To 14
                    GetOldCellForProject = "B67"
                Case 4 To 8
                    GetOldCellForProject = "B63"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_moreLimits"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "B63"
                Case 15 To 18
                    GetOldCellForProject = "B62"
                Case 9 To 14
                    GetOldCellForProject = "B68"
                Case 4 To 8
                    GetOldCellForProject = "B64"
                Case Default
                    GetOldCellForProject = ""
            End Select
'       'subcontractors
        Case "pd_mechanicalSubSteel"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C69"
                Case 15 To 18
                    GetOldCellForProject = "C68"
                Case 9 To 14
                    GetOldCellForProject = "C74"
                Case 4 To 8
                    GetOldCellForProject = "C70"
                Case 1 To 3
                    GetOldCellForProject = "C68"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_mechanicalSubAccess"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C70"
                Case 15 To 18
                    GetOldCellForProject = "C69"
                Case 9 To 14
                    GetOldCellForProject = "C75"
                Case 4 To 8
                    GetOldCellForProject = "C71"
                Case 1 To 3
                    GetOldCellForProject = "C69"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_electricalSub"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C71"
                Case 15 To 18
                    GetOldCellForProject = "C70"
                Case 9 To 14
                    GetOldCellForProject = "C76"
                Case 4 To 8
                    GetOldCellForProject = "C72"
                Case 1 To 3
                    GetOldCellForProject = "C70"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_hydraulicSub"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C72"
                Case 15 To 18
                    GetOldCellForProject = "C71"
                Case 9 To 14
                    GetOldCellForProject = "C77"
                Case 4 To 8
                    GetOldCellForProject = "C73"
                Case 1 To 3
                    GetOldCellForProject = "C71"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_pneumaticSub"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C73"
                Case 15 To 18
                    GetOldCellForProject = "C72"
                Case 9 To 14
                    GetOldCellForProject = "C78"
                Case 4 To 8
                    GetOldCellForProject = "C74"
                Case 1 To 3
                    GetOldCellForProject = "C72"
                Case Default
                    GetOldCellForProject = ""
            End Select
        Case "pd_fluidSub"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C74"
                Case 15 To 18
                    GetOldCellForProject = "C73"
                Case 9 To 14
                    GetOldCellForProject = "C79"
                Case 4 To 8
                    GetOldCellForProject = "C75"
                Case 1 To 3
                    GetOldCellForProject = "C73"
                Case Default
                    GetOldCellForProject = ""
            End Select
'       '12100 table
        Case "pd_operatorMatrix"
            Select Case oldVersionNumber
                Case 19
                    GetOldCellForProject = "C82,E150"
                Case 15 To 18
                    GetOldCellForProject = "C81,E149"
                Case 9 To 14
                    GetOldCellForProject = "C87,E155"
                Case 4 To 8
                    GetOldCellForProject = "C83,E151"
                Case 1 To 3
                    GetOldCellForProject = "C81,E149"
                Case Default
                    GetOldCellForProject = ""
            End Select
'       'standard list
        Case "pd_NormNumberTargetStart_End"
            GetOldCellForProject = Range("Range_Norm_Number_Target").Address
            
'       'Set rngZelle = Range("pd_NormNumberTargetStart").End(xlUp)
        Case Default
            GetOldCellForProject = ""
    End Select
End Function

Private Sub SetTableNumbers()
    'cannot call tables directly
    'setting up numbers of the tables for access
    For i = 1 To wbOldFile.Sheets.Count
        Select Case Sheets(i).CodeName
            Case "Table_ProjectData"
                tableProjectData = i
            Case "Table_RiskAssessment"
                tableRiskAssessment = i
            Case "Table_RiskAssessment_Log"
                tableRiskAssessmentLog = i
            Case "Table_BStandard"
                tableBStandard = i
            Case "Table_ENISO12100"
                tableENISO12100 = i
            Case "Table_Language"
                tableLanguage = i
            Case "Table_OwnCells"
                tableOwnCells = i
            Case "Table_Version"
                tableVersion = i
        End Select
    Next i
End Sub

Private Sub SetOldVersionNumber()
    oldVersion = wbOldFile.Sheets(tableVersion).Range("A2")

    Select Case oldVersion
        Case "2.0"
            oldVersionNumber = 1
        Case "2.1"
            oldVersionNumber = 2
        Case "2.1.1"
            oldVersionNumber = 3
        Case "2.2"
            oldVersionNumber = 4
        Case "2.2.1"
            oldVersionNumber = 5
        Case "2.2.2"
            oldVersionNumber = 6
        Case "2.2.3"
            oldVersionNumber = 7
        Case "2.2.4"
            oldVersionNumber = 8
        Case "2.2.5"
            oldVersionNumber = 9
        Case "2.3"
            oldVersionNumber = 10
        Case "2.3.1"
            oldVersionNumber = 11
        Case "2.3.2"
            oldVersionNumber = 12
        Case "2.3.2.1"
            oldVersionNumber = 13
        Case "2.3.3"
            oldVersionNumber = 14
        Case "2.3.4"
            oldVersionNumber = 15
        Case "2.3.4.1"
            oldVersionNumber = 16
        Case "2.3.4.2"
            oldVersionNumber = 17
        Case "2.3.4.3"
            oldVersionNumber = 18
        Case "2.4"
            oldVersionNumber = 19
        Case "2.4.1"
            oldVersionNumber = 20
        Case "2.4.1a"
            oldVersionNumber = 21
        Case "2.5"
            oldVersionNumber = 22
        Case "2.5.1"
            oldVersionNumber = 23
        Case "2.5.2"
            oldVersionNumber = 24
        Case "2.5.3"
            oldVersionNumber = 25
        Case "2.5.4"
            oldVersionNumber = 26
        Case "2.5.5"
            oldVersionNumber = 27
        Case "2.5.6"
            oldVersionNumber = 28
        Case "2.5.6.1"
            oldVersionNumber = 29
        Case "2.5.6.2"
            oldVersionNumber = 30
        Case "2.5.6.3"
            oldVersionNumber = 31
        Case "2.5.6.4"
            oldVersionNumber = 32
        Case "2.5.6.5"
            oldVersionNumber = 33
        Case "2.6"
            oldVersionNumber = 34
        Case "2.6.0.1"
            oldVersionNumber = 35
        Case "2.6.0.2"
            oldVersionNumber = 36
        Case "2.6.0.3"
            oldVersionNumber = 37
        Case "2.6.0.4"
            oldVersionNumber = 38
        Case "2.6.1"
            oldVersionNumber = 39
        Case Else
            oldVersionNumber = 9999
    End Select
End Sub

Attribute VB_Name = "add_remove_rows"
Sub Neue_Zeile()
' erstellt von MBT Mechtersheimer GbR
' Neue_Zeile Makro
' Erstellt eine neue Zeile unter der aktuell ausgew|fffd|hlten
' Creates a new row below the currently active one

'
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    'All changes are done before showing
    Application.ScreenUpdating = False
    Dim Zeilennummer As Long
    Dim Directive_Nr As Long
    Dim Row_GSA_Nr As Long
    Dim Row_GSA_Name As Long
    Dim Row_GSA_applies As Long
    Dim Is_Headline As Long
    Dim Standard_Nr_1 As Long
    Dim Standard_Name_1 As Long
    Dim Standard_Nr_2 As Long
    Dim Standard_Name_2 As Long
    Dim Top_Rows As Integer
    
    Dim Filter_active As Boolean
    Filter_active = False
    'remember all filters
'_________________________________________________________________________________________
    'code taken from Peter_SSs from the following site:
    'http://www.mrexcel.com/forum/excel-questions/333961-capture-autofilter-state.html
    Dim w As Worksheet
    Dim filterArray()
    Dim currentFiltRange As String
    Dim col As Integer
        
    Set w = ActiveSheet
    
    ' Capture AutoFilter settings
    With w.AutoFilter
        currentFiltRange = .Range.Address
        With .Filters
            ReDim filterArray(1 To .Count, 1 To 3)
            For f = 1 To .Count
                With .Item(f)
                    If .On Then
                        Filter_active = True
                        filterArray(f, 1) = .Criteria1
                        If .Operator Then
                            filterArray(f, 2) = .Operator
                            filterArray(f, 3) = .Criteria2
                        End If
                    End If
                End With
            Next f
        End With
    End With
'_________________________________________________________________________________________
    
    'Remove AutoFilter
    If Filter_active = True Then
        w.ShowAllData
    End If
    
    Top_Rows = 5 'number of headlines
    
    Directive_Nr = Range("Range_Directive_Nr").column
    Row_GSA_Nr = Range("Range_GSA_Number").column
    Row_GSA_Name = Range("Range_GSA_Title").column
    Row_GSA_applies = Range("EHSR").column
    Is_Headline = Range("Range_IsHeadline").column
    Standard_Nr_1 = Range("Range_Norm_Number").column
    Standard_Name_1 = Range("Range_Norm_Title").column
    Standard_Nr_2 = Range("Range_Norm_Number2").column
    Standard_Name_2 = Range("Range_Norm_Title2").column

    
    '+1 for being below -Top_Rows for headlines
    Zeilennummer = ActiveCell.row + 1 - Top_Rows '+1 drunter einf|fffd|gen -Top_Rows f|fffd|r |fffd|berschrift Zeilen
    
    If ActiveCell.row > Top_Rows Then
        'put new line
        Selection.ListObject.ListRows.Add (Zeilennummer)
    
        'set back to original line
        Zeilennummer = Zeilennummer - 1 + Top_Rows
        
        With Table_RiskAssessment
            'copy Directive NR
            .Cells(Zeilennummer, Directive_Nr).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Directive_Nr)
            
            'copy the number and name of EHSR
            .Cells(Zeilennummer, Row_GSA_Nr).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Row_GSA_Nr)
            .Cells(Zeilennummer, Row_GSA_Name).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Row_GSA_Name)
            .Cells(Zeilennummer, Row_GSA_applies).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Row_GSA_applies)
            .Cells(Zeilennummer, Is_Headline).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Is_Headline)
            
            'copy B-Standard selection if present
            .Cells(Zeilennummer, Standard_Nr_1).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Standard_Nr_1)
            .Cells(Zeilennummer, Standard_Name_1).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Standard_Name_1)
            
            'copy B-Standard selection if present
            .Cells(Zeilennummer, Standard_Nr_2).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Standard_Nr_2)
            .Cells(Zeilennummer, Standard_Name_2).Copy _
                Destination:=Sheets(Range("Name_Table_RiskAssessment").Value).Cells(Zeilennummer + 1, Standard_Name_2)
        End With
        
        Application.CutCopyMode = False
        'back to first cell
        Range("G" & Zeilennummer + 1).Select
    End If
    
    'reset all filters
    currentFiltRange = w.AutoFilter.Range.Address
'_________________________________________________________________________________________
    'code taken from Peter_SSs from the following site:
    'http://www.mrexcel.com/forum/excel-questions/333961-capture-autofilter-state.html
    ' Restore Filter settings
    
    For col = 1 To UBound(filterArray(), 1)
        If Not IsEmpty(filterArray(col, 1)) Then
            If filterArray(col, 2) Then
                w.Range(currentFiltRange).AutoFilter field:=col, _
                Criteria1:=filterArray(col, 1), _
                Operator:=filterArray(col, 2), _
                Criteria2:=filterArray(col, 3)
            Else
                w.Range(currentFiltRange).AutoFilter field:=col, _
                Criteria1:=filterArray(col, 1)
            End If
        End If
    Next col
'_________________________________________________________________________________________
    
    'show changes
    Application.ScreenUpdating = True
    'enable Private Sub Worksheet_Calculate()
    Application.EnableEvents = True
End Sub
Sub Zeile_L|fffd|schen()
' erstellt von MBT Mechtersheimer GbR
' Zeile_L|fffd|schen Makro
' Deletes the currently active row

'
    Dim Zeilennummer As Long
    Dim Top_Rows As Integer
    Top_Rows = 5
    
    'Message for undeletable headline
    If ActiveCell.row < (Top_Rows + 1) Then
        'MsgBox ("Diese Zeile k|fffd|nnen Sie nicht l|fffd|schen." & vbLf & vbLf & "Dies ist eine |fffd|berschrift.")
        MsgBox (Range("Message_Headline").Value)
        Exit Sub
    End If
    
    'Message for undeletable row
    If Cells(ActiveCell.row, Range("Row_is_deletable").column) = "x" Then
        'MsgBox ("Diese Zeile k|fffd|nnen Sie nicht l|fffd|schen." & vbLf & vbLf & "Wenn diese GSA nicht zutrifft, l|fffd|schen Sie bitte das X aus Spalte F und blenden die Zeile |fffd|ber den Filter aus.")
        MsgBox (Range("Message_FirstEHSR").Value)
        Exit Sub
    End If
    
    'warning that data are deleted
    'If MsgBox("Alle Daten in der ausgew|fffd|hlten Zeile werden gel|fffd|scht. Sind Sie sicher?", vbYesNo + vbQuestion) = vbNo Then
    If MsgBox(Range("Message_Delete").Value, vbYesNo + vbQuestion) = vbNo Then
        Exit Sub
    Else
        'start deleting
        'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
        Application.EnableEvents = False
        Application.ScreenUpdating = False
        
    Dim Filter_active As Boolean
    Filter_active = False
    'remember all filters
'_________________________________________________________________________________________
    'code taken from Peter_SSs from the following site:
    'http://www.mrexcel.com/forum/excel-questions/333961-capture-autofilter-state.html
    Dim w As Worksheet
    Dim filterArray()
    Dim currentFiltRange As String
    Dim col As Integer
        
    Set w = ActiveSheet
    
    ' Capture AutoFilter settings
    With w.AutoFilter
        currentFiltRange = .Range.Address
        With .Filters
            ReDim filterArray(1 To .Count, 1 To 3)
            For f = 1 To .Count
                With .Item(f)
                    If .On Then
                        Filter_active = True
                        filterArray(f, 1) = .Criteria1
                        If .Operator Then
                            filterArray(f, 2) = .Operator
                            filterArray(f, 3) = .Criteria2
                        End If
                    End If
                End With
            Next f
        End With
    End With
'_________________________________________________________________________________________
    
    'Remove AutoFilter
    If Filter_active = True Then
        w.ShowAllData
    End If
        
        
        
        'double check on conditions... should be caught already
        If ActiveCell.row > Top_Rows Then
            If Cells(ActiveCell.row, Range("Row_is_deletable").column) <> "x" Then
                'delete
                Zeilennummer = ActiveCell.row - Top_Rows '-4 for 4 rows of headline
                Selection.ListObject.ListRows(Zeilennummer).Delete
            End If
        End If
        
        
    'reset all filters
    'does not work if last row is deleted. Then w.AutoFilter = Nothing
    If Not (w.AutoFilter Is Nothing) Then
        currentFiltRange = w.AutoFilter.Range.Address
    End If
'_________________________________________________________________________________________
    'code taken from Peter_SSs from the following site:
    'http://www.mrexcel.com/forum/excel-questions/333961-capture-autofilter-state.html
    ' Restore Filter settings
    For col = 1 To UBound(filterArray(), 1)
        If Not IsEmpty(filterArray(col, 1)) Then
            If filterArray(col, 2) Then
                w.Range(currentFiltRange).AutoFilter field:=col, _
                Criteria1:=filterArray(col, 1), _
                Operator:=filterArray(col, 2), _
                Criteria2:=filterArray(col, 3)
            Else
                w.Range(currentFiltRange).AutoFilter field:=col, _
                Criteria1:=filterArray(col, 1)
            End If
        End If
    Next col
'_________________________________________________________________________________________
        
        Application.ScreenUpdating = True
        'enable Private Sub Worksheet_Calculate()
        Application.EnableEvents = True
    End If
End Sub

Attribute VB_Name = "change_language"
Sub Select_Language(Optional ByVal selectLanguage As Integer = -1)
Attribute Select_Language.VB_Description = "Changes the selected language and fills out the special fields"
Attribute Select_Language.VB_ProcData.VB_Invoke_Func = " \n14"
' erstellt von MBT Mechtersheimer GbR
' Select_Language Makro
' Changes the selected language and fills out the special fields
' new since version > 2.5: dropped renaming of obsolete CheckBoxes, added renaming of Report Button
' new since version > 2.3.4.3:(Optional ByVal selectLanguage As Integer = -1)

'
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim intLanguage As Integer
    Dim intMaxLanguage As Integer
    
    'increase the language by 1 or reset to 1 if at the end
    intLanguage = Range("Language_select").Value
    intMaxLanguage = Range("Table_Language").Columns.Count - 1 '1 for the selection, the rest is the number of languages
    
    'new since version > 2.3.4.3
    'if no language is selected, next language is selected
    If -1 = selectLanguage Then
        If (intLanguage = intMaxLanguage) Then
            intLanguage = 1
        Else
            intLanguage = intLanguage + 1
        End If
    Else
        'new since version > 2.3.4.3
        'direct selection possible
        intLanguage = selectLanguage
    End If
    
    Dim strLanguage As String
    strLanguage = ""
    If intLanguage = 1 Then
        strLanguage = "_Ger"
    End If
    If intLanguage = 2 Then
        strLanguage = "_Eng"
    End If
    
    'put new value in the language select sheet and in the sheet for user specific fields
    Range("Language_select").Value = intLanguage
    Range("Language_Select_Own").Value = intLanguage
    
    'normal cells have been updated, now the special fields (buttons, comments, checkboxes) need to be updated
    With Table_ProjectData
        'comments:
        .Range("Project_Leader").Comment.Text Text:=Range("Information_Name_Company_Function").Value
        .Range("Mechanical_Designer").Comment.Text Text:=Range("Information_Name_Company_Function").Value
        .Range("Electrical_Designer").Comment.Text Text:=Range("Information_Name_Company_Function").Value
        .Range("Control_System_Designer").Comment.Text Text:=Range("Information_Name_Company_Function").Value
        .Range("Communication_Medium_Designer").Comment.Text Text:=Range("Information_Name_Company_Function").Value
        .Range("authorised_person").Comment.Text Text:=Range("Information_authorised_person").Value
        .Range("Overview_Drawing").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Requirement_Design_Spec").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Technical_Spec").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Description_on_Setup").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Technical_Data").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Lifcycle_machine").Comment.Text Text:=Range("Information_20years").Value
        .Range("Lifecycle_wear_parts").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Recommanded_maintenance").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Materials_processed").Comment.Text Text:=Range("Information_Filename_Version").Value
        .Range("Necessary_cleanliness").Comment.Text Text:=Range("Information_Necessary_cleanliness").Value
        .Range("Max_min_temperature").Comment.Text Text:=Range("Information_Max_min_temperature").Value
        .Range("Max_min_temperature_environment").Comment.Text Text:=Range("Information_Max_min_temperature").Value
        .Range("Operation_in_out").Comment.Text Text:=Range("Information_Operation_in_out").Value
        .Range("dust_moisture").Comment.Text Text:=Range("Information_dust_moisture").Value
        
        'the name of the worksheet is changed
        .Name = Range("Name_Table_ProjectData").Value
        
        'dropped since version > 2.5
        'Project Data has check boxes
        '.CheckBoxes("xxx").Caption = Range("xxx").Value
        
        'Text fields in forms
        .Shapes.Range(Array("Textfield_Instructions")).TextFrame2.TextRange.Characters.Text = Range("Content_Textfield_Instructions" & strLanguage).Value
        .Shapes.Range(Array("Textfield_Copyrights")).TextFrame2.TextRange.Characters.Text = Range("Content_Textfield_Copyrights" & strLanguage).Value & Range("Content_Textfield_Version").Value
        .Shapes.Range(Array("Textfield_License")).TextFrame2.TextRange.Characters.Text = Range("Content_Textfield_License" & strLanguage).Value
        .Shapes.Range(Array("Textfield_Refresh_Standards")).TextFrame2.TextRange.Characters.Text = Range("Content_Textfield_Refresh_Standards").Value
        .Shapes.Range(Array("Button_Setup_Projectdata")).TextFrame2.TextRange.Characters.Text = Range("Name_Setup").Value
        'new since v2.5
        .Shapes.Range(Array("Button_Print_RiskAssessment")).TextFrame2.TextRange.Characters.Text = Range("Content_Button_PrintRA").Value
    End With 'Table_ProjectData
    
    With Table_RiskAssessment
        'comments:
        .Range("EHSR").Comment.Text Text:=Range("Information_EHSR").Value
        .Range("Content").Comment.Text Text:=Range("Information_Content").Value
        .Range("Normtype").Comment.Text Text:=Range("Information_Normtype").Value
        .Range("Cell_RiskAssessment").Comment.Text Text:=Range("Information_RiskAssessment").Value
        .Range("Cell_RiskAssessment2").Comment.Text Text:=Range("Information_RiskAssessment").Value
        .Range("Further_reduction").Comment.Text Text:=Range("Information_Further_reduction").Value
        .Range("Hazard_is_done").Comment.Text Text:=Range("Information_Hazard_is_done").Value
    
        'the name of the worksheet is changed
        .Name = Range("Name_Table_RiskAssessment").Value
        'the GroupBox that has the add / remove line
        .Shapes.Range(Array("Insert_Delete_Rows_Field")).TextFrame.Characters.Text = Range("Text_Insert_Delete_Rows_Field").Value
        .Shapes.Range(Array("Textfield_Copyrights")).TextFrame2.TextRange.Characters.Text = Range("Content_Textfield_Copyrights" & strLanguage).Value & Range("Content_Textfield_Version").Value
        .Shapes.Range(Array("Button_Setup_RiskAssessment")).TextFrame2.TextRange.Characters.Text = Range("Name_Setup").Value
    End With 'Table_RiskAssessment
    
    With Table_BStandard
        .Name = Range("Name_Table_BStandard").Value
    End With
    
    With Table_ENISO12100
        .Name = Range("Name_Table_ENISO12100").Value
    End With
    
    With Table_Language
        .Name = Range("Name_Table_Language").Value
    End With
    
    With Table_OwnCells
        .Name = Range("Name_Table_OwnCells").Value
    End With
    
    With Table_RiskAssessment_Log
        .Name = Range("Name_Table_RiskAssessment_Log").Value
    End With
    
    'formulas for StandardNumbers are automated by macro since v2.5.5
    'previous coding was cut here
    
    Application.ScreenUpdating = True
    'enable Private Sub Worksheet_Calculate()
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "read_log"
Sub Read_RiskAssessment_Log()
' erstellt von MBT Mechtersheimer GbR
' Read_RiskAssessment_Log Makro
' Wenn ein Log Eintrag zur aktuellen Zelle vorhanden ist wird dieser angezeigt, sonst eine Fehlermeldung
' If a log entry is present it ist shown, else an error message is displayed
    
    row = Cells(ActiveCell.row, 1).Value
    col = Cells(1, ActiveCell.column).Value
    'look up if cell is indexed and if indexed cell has entry
    If row > 0 And col > 0 Then
        'split in conditions needed, cause VBA checks all conditions and does not stop at first false
        'empty row / cell leads to error without split
        If Table_RiskAssessment_Log.Cells(row, col).Value <> "" Then
            'display entry
            MsgBox (Table_RiskAssessment_Log.Cells(row, col).Value)
        Else
            'no log exists
            MsgBox (Range("Message_No_History").Value)
        End If
    Else
        'no log exists
        MsgBox (Range("Message_No_History").Value)
    End If
End Sub
Sub Clear_RiskAssessment_Log()
' erstellt von MBT Mechtersheimer GbR
' Clear_RiskAssessment_Log Makro
' Alle Hinweise auf die Historie von Eintr|fffd|gen werden gel|fffd|scht. Diese Funktion ist vor Weitergabe der RB gedacht.
' All hints at the history of changes are deleted. To be executed, before the RA is sent out to customers.
    
    If MsgBox(Range("Message_Delete_History").Value, vbYesNo + vbQuestion) = vbNo Then
        Exit Sub
    End If
    
    'disable Private Sub Worksheet_Calculate() for next changes (!recursive)
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    'clear indexes
    Table_RiskAssessment.Range("A:A").ClearContents
    Table_RiskAssessment.Range("1:1").ClearContents
    'clear contents of log
    Table_RiskAssessment_Log.Cells.ClearContents
    
    'enable Private Sub Worksheet_Calculate()
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

' InQuest injected base64 decoded content
' :WUz
' &z{@~
' &z{@~
' &z{@~
' &z{Ay
' +x	e
' #zKoz
' &z{K
' BzYl>
' rF+$

INQUEST-PP=macro
