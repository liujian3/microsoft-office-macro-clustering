Attribute VB_Name = "Module1"
Sub ShowPass()

UserForm1.Show

End Sub

Sub ResetSIG()
Dim pwd As String

' Turn off application events to prevent problems with the page updating
Application.EnableEvents = False

' Get the SIG password
pwd = ActiveWorkbook.Worksheets("Drops").Range("A17").Value

' Reset all of the tabs to their default
Application.Run "Module2.ColHide", pwd

' And password protect the sheets
Application.Run "module2.ProtectOnly", pwd

'Move to the Scoping tab
ActiveWorkbook.Worksheets(4).Select

' Turn application events back on
Application.EnableEvents = True


End Sub

Sub ScopingPWProtect()

PWPass1.Show

End Sub
Attribute VB_Name = "Module2"
Option Private Module
Public Sub ProtectUnprotect(pwd As String, ColShowHide As Boolean, Protect As Boolean, Automation As Boolean, DeleteCont As Boolean)
Dim TabNum As Long

' move to the first worksheet
ActiveWorkbook.Worksheets(1).Select

' Turn off application events to prevent problems with the page updating
Application.EnableEvents = False

' Unhide all of the worksheets
For TabNum = 1 To ActiveWorkbook.Sheets.Count Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the SIG
    ActiveWorkbook.Worksheets(TabNum).Visible = True
Next TabNum

If DeleteCont = True Then
    Call DeleteContents
End If

If Automation = True Then
    Call UncheckAuto
    Else
    Call CheckAuto
End If

If ColShowHide = False And Protect = False Then
    Call Unprotect(pwd)
    Call ColUnhide
    GoTo finish
End If

If ColShowHide = True And Protect = True Then
    Call ColHide(pwd)
    Call ProtectOnly(pwd)
    GoTo finish
End If

If ColShowHide = False And Protect = True Then
    Call ProtectOnly(pwd)
    GoTo finish
End If

If ColShowHide = True And Protect = False Then
    Call ColHide(pwd)
    GoTo finish
End If

finish:
' move to the first worksheet
ActiveWorkbook.Worksheets(1).Select

' Turn application events back on
Application.EnableEvents = True

' Give the status bar back to Excel
Application.StatusBar = False

End Sub

Private Sub ColHide(pwd)
Dim col As Long
Dim TabNum As Long
Dim HideArray As Variant
Dim VersionText As String
Dim TempArray As Variant
Dim StartCell As String
Dim EndCell As String
Dim LastRow As Long
Dim row As Long
Dim DoWhat As String
Dim ActiveColumn As Long
Dim CheckedArray As Variant
Dim TabArray As Variant
Dim ProtectState As Boolean

' Get the current version text from the instructions tab. This will be used in the header
VersionText = ActiveWorkbook.Worksheets("Instructions").Range("VerText").Value

' Size the hide array as appropriate
ReDim HideArray(1 To 32, 1 To 5)

'If the array element is blank then do nothing so only populate the array elements that are needed.
' Column 1 of HideArray is the first column to hide (column A, ser num column)
' Column 2 or HideArray is the second set of columns to hide (I - X)
' Column 3 of HideArray is the third set of columns to hide (AB - AH, lite tab only, automation filter column)
' Column 4 of HideArray is the fourth set of columns to hide (automation filter column)
' Column 5 of HideArray is the cell pointer value
' This sets set up the unique values, the rest are common so they are in a loop after these
HideArray(1, 5) = "A1" ' Copyright
HideArray(2, 5) = "A1" ' Terms of Use
HideArray(3, 5) = "A1" ' Instructions
' The scoping tab hides all of its columns when it is selected so the only thing needed is the landing
HideArray(4, 5) = "C4" ' Scoping tab landing
HideArray(5, 5) = "A1" ' Cybersecurity Guidenance landing
HideArray(6, 1) = "G1" ' Dashboard filter column
HideArray(6, 5) = "A1" ' Dashboard Landing
HideArray(7, 1) = "A1" ' Business Info (ser num
HideArray(7, 2) = "E1:G1" ' Business Info (formulas)
HideArray(7, 5) = "D4" ' Bus info landing
HideArray(8, 1) = "A1" ' Documentation (ser num)
HideArray(8, 5) = "C3" ' Documentation landing
HideArray(28, 5) = "A1" ' Additional Questions landing
HideArray(29, 5) = "A1" ' Glossary landing
HideArray(30, 5) = "A1" ' Formula Notes landing
HideArray(31, 1) = "A1:D1" ' Full first columns
HideArray(31, 5) = "E1" ' Full landing
' Fill the array with the coiumns to hide using a loop for Lite --> U question tabs
For col = 10 To 27 Step 1
    HideArray(col, 1) = "A1" ' ser num colunm to hide
    HideArray(col, 2) = "J1:Y1" ' formula columns
    HideArray(col, 3) = "AB1:AF1" ' Filter; scoring, maturity n/a, filtr type and Question Level columns
    HideArray(col, 5) = "B1" ' landing
Next col

' The tabs need to be unhidden for this sub to work so loop through all of the detail tabs and unhide them if they are hidden
' Unhide all of the worksheets
For TabNum = 1 To ActiveWorkbook.Sheets.Count Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the SIG
    ActiveWorkbook.Worksheets(TabNum).Visible = True
Next TabNum

' Check to see if the Scoping tab password has been set and remove it here
If ActiveWorkbook.Worksheets("Drops").Range("ScopeState").Value = True Then
    ' First unprotect the sheet
    ActiveWorkbook.Worksheets("Scoping").Unprotect Password:=ActiveWorkbook.Worksheets("Drops").Range("A16").Value
    ' Then update the drops tab with the SIG password
    ActiveWorkbook.Worksheets("Drops").Range("A16").Value = ActiveWorkbook.Worksheets("Drops").Range("A17").Value
End If

' Reset the master value
ActiveWorkbook.Worksheets("Drops").Range("Master").Value = ""
Call UpdateMaster

' Select each tab in the workbook and apply the values in the HideArray to each tab
For TabNum = 1 To UBound(HideArray) Step 1
    For col = 1 To 5 Step 1 ' loop through the hide array and hide columns as necessary
        If HideArray(TabNum, col) <> "" Then
            If col <= 4 Then
                ActiveWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
'                ActiveWorkbook.Worksheets(TabNum).Select
                ' Now hide only the columns pointed to by HideArray
                ActiveWorkbook.Worksheets(TabNum).Range(HideArray(TabNum, col)).EntireColumn.Hidden = True
            Else ' If we are on the fifth column of HideArray move the cell pointer to the cell in HideArray
                ActiveWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
                ActiveWorkbook.Worksheets(TabNum).Select
                ActiveWorkbook.Worksheets(TabNum).Range(HideArray(TabNum, col)).Select
            End If
        Else ' Do nothing
        End If
    Next col
    ' Turn off all of the autofilters
    If ActiveWorkbook.Worksheets(TabNum).AutoFilterMode Then ActiveWorkbook.Worksheets(TabNum).AutoFilterMode = False
    ' and hide the tab if it's a detail tab
    If TabNum >= 10 Then
        If TabNum <= 27 Then
            ' Hide the tab
            ActiveWorkbook.Worksheets(TabNum).Visible = False
            ' Put x's in the scoping filter column
            ' Get the total rows this is found in cell Y86
            LastRow = ActiveWorkbook.Worksheets(TabNum).Cells(1, 25).Value
            ' Create the temp array to write the x's
            ReDim TempArray(1 To LastRow - 4, 1 To 2)
            ' Load the temp array with x's
            For row = 1 To UBound(TempArray) Step 1
                TempArray(row, 1) = "x"
            Next row
            ' Define the start cell it will always start in cell AE5
            StartCell = "$AE$5"
            ' Define the end cell
            EndCell = "$AE$" & LastRow
            ' Write the x's
            ActiveWorkbook.Worksheets(TabNum).Range(StartCell, EndCell) = TempArray
            ' Delete the scoped as text
            ActiveWorkbook.Worksheets(TabNum).Range("C2").Value = ""
        End If
    End If
    ' Change the header to the correct version and date
    ActiveWorkbook.Worksheets(TabNum).PageSetup.RightHeader = "&R " & VersionText
Next TabNum

' Process the scoping tab
' move to the scoping tab
ActiveWorkbook.Worksheets(4).Select
' Clear the sub-categories first
DoWhat = "Clear All"
' Set the active column to the sub selection column
ActiveColumn = 22
' Call CheckClearAll to clear out the sub-category selections
Call CallCheckClearAll(DoWhat, CheckedArray, ActiveColumn)
' Now clear out the
DoWhat = "Clear All"
' Get the active column
ActiveColumn = 16
' Call CheckClearAll to update the values in the checked fields
Call CallCheckClearAll(DoWhat, CheckedArray, ActiveColumn)
' Clear out or change to Disable all of these cells
ActiveWorkbook.Worksheets(4).Range("T4") = "Disable" ' Disable sub-categories
ActiveWorkbook.Worksheets(4).Range("N4") = "Disable" ' Disable categories
ActiveWorkbook.Worksheets(4).Range("F4:H4") = "" ' Delete the contents of the service fields
ActiveWorkbook.Worksheets(4).Range("C4") = "" ' Delete the contents of the SIG Detail Level field

'--------------------------------------------------------------------
' Process the Dashboard:
' Reset the tab array values on the dashboard and filter it. Go to the dashboard tab first
'--------------------------------------------------------------------
' TabArray will be used to identify the rows to be hidden on the Dashboard. Initially size it to the total tabs in the SIG starting in row 9
ReDim TabArray(1 To 29, 1 To 2)
' now fill it with x's
For row = 1 To UBound(TabArray) Step 1
    TabArray(row, 1) = "x"
Next row

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveWorkbook.Worksheets("Dashboard").ProtectContents
' Only unprotect a protected sheet
If ProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Unprotect Password:=pwd
' Turn off all of the autofilters for the worksheet
ActiveWorkbook.Worksheets("Dashboard").AutoFilterMode = False
' Focus on the Dashboard tab
ActiveWorkbook.Worksheets("Dashboard").Select
' Start Cell and end cell will always be the same
StartCell = "$G$5"
EndCell = "$G$33"
' Write the values
ActiveWorkbook.Worksheets("Dashboard").Range(StartCell, EndCell) = TabArray
' Turn on the fitlers
ActiveWorkbook.Worksheets("Dashboard").Range(StartCell, EndCell).AutoFilter Field:=1, Criteria1:="<>" 'column G
' Put the proctection back to where we found it
If ProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Protect Password:=pwd

' Make the Drops and old Lite tabs very hidden so the user can't unhide it from the UI
ActiveWorkbook.Worksheets("Drops").Visible = xlSheetVeryHidden
ActiveWorkbook.Worksheets("Lite").Visible = xlSheetVeryHidden

' Turn off maintenance Mode
Worksheets("Drops").Range("Maintenance").Value = False

' Delete the Master text from the Drops tab
ActiveWorkbook.Worksheets("Drops").Range("Master") = ""

End Sub

Private Sub ColUnhide()
Dim TabNum As Long

For TabNum = 1 To ActiveWorkbook.Sheets.Count Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the open master SIG
    If ActiveWorkbook.Worksheets(TabNum).ProtectContents = False Then
'        ActiveWorkbook.Worksheets(TabNum).Select
        ActiveWorkbook.Worksheets(TabNum).Cells.EntireColumn.Hidden = False
        ActiveWorkbook.Worksheets(TabNum).Cells.EntireRow.Hidden = False
    Else
    GoTo pwprot
    End If
Next TabNum

' Unhide the Drops tab since it's very hidden
ActiveWorkbook.Worksheets("Drops").Visible = True

Exit Sub

pwprot:
MsgBox ("This sheet is password protected, remove the password befor unhiding the columns")

End Sub

Private Sub ProtectOnly(pwd As String)
Dim TabNum As Long
Dim WBName As String

For TabNum = 1 To ActiveWorkbook.Sheets.Count - 1 Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the open master SIG
    ' Turn off all of the autofilters. This is done to make sure if macros are not enabled the tab will still operate like it did in earlier versions with the colors.
    If ActiveWorkbook.Worksheets(TabNum).AutoFilterMode Then ActiveWorkbook.Worksheets(TabNum).AutoFilterMode = False
    ' password protect the page
    ActiveWorkbook.Worksheets(TabNum).Protect Password:=pwd
Next TabNum

' Update the scope password in all of these places
ActiveWorkbook.Worksheets("Drops").Range("A16").Value = pwd ' Scope tab password on the Drops tab
ActiveWorkbook.Worksheets("Drops").Range("A17").Value = pwd ' SIG password on the Drops tab
ActiveWorkbook.Worksheets("Drops").Range("A17").Value = pwd ' SIG password on the Formula Notes tab

End Sub

Private Sub Unprotect(pwd As String)
Dim TabNum As Long
Dim ScopePW As String

' Get the Scope tab password from the drops tab (this may be different from the SIG password.
ScopePW = ActiveWorkbook.Worksheets("Drops").Range("A16").Value

For TabNum = 1 To ActiveWorkbook.Sheets.Count - 1 Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the open master SIG
    ' Check for the sheet number if it's four then use the Scopeing tab password not the SIG password.
    If TabNum <> 4 Then
        'Unprotect the SIG tab
        ActiveWorkbook.Worksheets(TabNum).Unprotect Password:=pwd
    Else
        'Unprotect the Scoping tab
        ActiveWorkbook.Worksheets(TabNum).Unprotect Password:=ScopePW
    End If
Next TabNum

End Sub
Private Sub UncheckAuto()
Dim TabNum As Long

For TabNum = 10 To 27 Step 1
'    ActiveWorkbook.Worksheets(TabNum).Select
    If ActiveWorkbook.Worksheets(TabNum).Cells(2, 8).Value = "Disable" Then ActiveWorkbook.Worksheets(TabNum).Cells(2, 8).Value = "Enable"
Next TabNum

End Sub
Private Sub CheckAuto()
Dim TabNum As Long

For TabNum = 10 To 27 Step 1 'ActiveWorkbook.Sheets.Count is the number of tabs in the open master SIG
'    ActiveWorkbook.Worksheets(TabNum).Select
    If ActiveWorkbook.Worksheets(TabNum).Cells(2, 8).Value = "Enable" Then ActiveWorkbook.Worksheets(TabNum).Cells(2, 8).Value = "Disable"
Next TabNum

End Sub
Private Sub DeleteContents()
' This sub will delete all of the responses, maturity and additional informion in the SIG
Dim RowCount As Long
Dim EraseArray As Variant
Dim TabNum As Long
Dim EndCell As String

' Go to each tab and delete the contents
For TabNum = 10 To 27 Step 1
    ' Get the total rows from the current tab, cell Y1
    RowCount = ActiveWorkbook.Worksheets(TabNum).Range("Y1").Value
    ' Resize the erase array to the total rows - 5
    ReDim EraseArray(1 To RowCount - 4, 1 To 3)
    ' Find the end cell it will always be column F
    EndCell = "$F$" & RowCount
    ' Write the erase array to the current tab always starting at cell D5
    ActiveWorkbook.Worksheets(TabNum).Range("$D$5", EndCell) = EraseArray
Next TabNum

' Delete the responses on the Business Info and Documentation tabs
' ***** Note ***** These are hard coded values and may change if the business info tab is updated
' Business Info
ReDim EraseArray(1 To 58, 1 To 2)
StartCell = "$D$4"
EndCell = "$D$61"
ActiveWorkbook.Worksheets("Business Information").Range(StartCell, EndCell) = EraseArray
' Documentation
ReDim EraseArray(1 To 29, 1 To 2)
StartCell = "$C$3"
EndCell = "$D$31"
ActiveWorkbook.Worksheets("Documentation").Range(StartCell, EndCell) = EraseArray

End Sub
Public Sub SheetSelected(FormOff As Long)
'--------------------------------------------------------------------
' This sub is called when ever the sheet is selected. It will apply autofilters to columns AC - AE and filter on the values relative to the automation selction
'--------------------------------------------------------------------
Dim ProtectState As Boolean
Dim TotalRows As Long
Dim LocalArray As Variant

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents

' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A17").Value

' Turn off all of the filters we will apply the filters in a minute if the checkbox is active
ActiveSheet.AutoFilterMode = False

' Get the last row of the current sheet
TotalRows = ActiveSheet.Range("B" & Rows.Count).End(xlUp).row

' Identify if either to filter on the automation and scoping columns or just the scoping columns depending on the state of the automation dropdown.
If ActiveSheet.Cells(2, 8).Value = "Disable" Then
    ' Always filter on the scoping field
    ActiveSheet.Range(Cells(4, FormOff + 2), Cells(TotalRows, FormOff + 2)).AutoFilter
    ActiveSheet.Range(Cells(4, FormOff + 2), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=1, Criteria1:="<>" ' This is the scoping filter
Else
    ' Filter the tab on the values in the filter column
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=3, Criteria1:="<>"  ' This is the scoping filter
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2 ' This is the automation filter
End If

'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A17").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub
Public Sub SheetDelta(FormOff As Long, Target As Excel.Range)
'--------------------------------------------------------------------
' This sub will run anytime a change is made to the tab.
' It will use the autofilter in column AB to filter the tab
' so No or N/A questions are hidden.
'--------------------------------------------------------------------
Dim ProtectState As Boolean
Dim FilterArray As Variant
Dim TempArray As Variant
Dim TotalRows As Long
Dim StartCell As String
Dim EndCell As String
Dim MaxQuesLvl As Long
Dim row As Long
Dim row1 As Long
Dim col As Long
Dim RespFlag As Boolean
Dim TargetLevel As Long
Dim ParentLevel As Long

'Turn off screen updating
Application.ScreenUpdating = False

' Check to see what changed on the sheet. Only update if the response or maturity changed.
If Target.Column < 4 Or Target.Column > 8 Then GoTo DoNothing

' Autofilters don't work on protected sheets, so unprotect the sheet if it's already protected
' Get the value of the current sheet protection state, we don't want to protect it if it's not protected now
ProtectState = ActiveSheet.ProtectContents

' Check for for sheet password protection, if it's protected we need to unprotect before we can mess with the autofilters.
' We'll check this once we have updated the sheet at the end of this sub and put it back on if necessary
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A17").Value

' This code will change the background in the maturity field relative to the response value
' First check the column, if it's not the response column do nothing
' Note: The offset below is relative to the target column
On Error Resume Next
If Target.Column = 4 Then
    ' Check for a 1 in cloumn 30 (AD). This identifies a hard coded value
    If Target.Offset(0, 26) = 1 Then
        ' Don't do anything since this is a value not changed by the response
        Else
        ' There was no value so check what the user changed the response to
        If Target.Value = "No" Or Target.Value = "N/A" Then
            ' Value changed to no or n/a so clear out the validation, fill and add a 1 to column 30 (AD)
            Target.Offset(0, 1).Interior.Color = xlNone
            Target.Offset(0, 1).Validation.Delete
            Target.Offset(0, 1).Value = ""
            Target.Offset(0, 26).Value = 2
        Else
            ' Check for a 2 in column 30 if there is one then copy otherwise do nothing
            If Target.Offset(0, 26) = 2 Then
                Target.Offset(0, 1).Interior.Color = RGB(204, 255, 255)
                With Target.Offset(0, 1).Validation
                    .Delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=ScaledLarge"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = "Select 1 - 5"
                    .ErrorTitle = ""
                    .InputMessage = "1 - Informal, ad hoc process without formal implementation" & Chr(10) & " 2 - Partially in place with no approved plans to further implement" & Chr(10) & "3 - Partially in place with approved plans to further implement" & Chr(10) & "4 - In place with exclusions" & Chr(10) & "5 - In place with no exclusions"
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = True
                End With
                Target.Offset(0, 26).Value = ""
            Else
            ' Do nothing
            End If
        End If
    ' Come here if the Maturity N/A field is set to 1
    End If
End If

' Turn off all of the autofilters for the worksheet
ActiveSheet.AutoFilterMode = False

' Get the question levels into an array
TotalRows = ActiveSheet.UsedRange.Rows.Count

' Check for the worksheet automation checkbox. If it's diabled then take off the filters and leave
If ActiveSheet.Cells(2, 8).Value = "Disable" Then
    ' Remove the bold for all of the question text
    For row = 5 To ActiveWorkbook.ActiveSheet.Range("Y1").Value
        ' Remove the bold
        ActiveWorkbook.ActiveSheet.Cells(row, 3).Font.Bold = False
    Next row
    GoTo DontFilter
End If

' Assume the text will always start on row 5 column J (question depth)
StartCell = ActiveSheet.Cells(5, 10).Address
' and ends on the total rows -4 and column AC (filter)
EndCell = ActiveSheet.Cells(TotalRows, 23).Address
' Size the Temp array to 19 columns and total rows -4
ReDim TempArray(1 To TotalRows - 4, 1 To 13) As Variant
' Get the values from the tab into the temp array
TempArray = ActiveSheet.Range(StartCell, EndCell)

' Size the filter array to the total rows and two columns
ReDim FilterArray(1 To TotalRows - 4, 1 To 2)

' Find out what the max level is so we can loop through all of the levels and get their responses
For row = 1 To UBound(TempArray) Step 1
    If TempArray(row, 1) > MaxQuesLvl Then MaxQuesLvl = TempArray(row, 1)
Next row

If MaxQuesLvl > 1 Then
    ' Create multiple loops thorugh the temp array starting at the lowest level questions and moving to the level 1 questions
    For col = 3 To MaxQuesLvl + 2 Step 1
        ' Loop trough the entire contents of the temp array and update the filter array for the level of questions being checked.
        For row = 1 To UBound(TempArray) Step 1
            ' Check if it's a level 1 question and identify it in the filter array
            If TempArray(row, 1) = 1 Then FilterArray(row, 1) = 1
            ' Check for a level 1 table question, do this since all of it's children should be displayed.
            If TempArray(row, 2) = 1 And TempArray(row, 1) = 1 Then
                ' It was a table question so write a 2 to unfilter this table question
                FilterArray(row, 1) = 2
                ' loop through the next set of questions to find the table responses starting on the next question
                For row1 = row + 1 To UBound(TempArray) Step 1
                    ' Check to see if the table calculation flag is 0
                    If TempArray(row1, 11) = 0 Then
                        ' The table calculation flag is set so unfilter this question
                        FilterArray(row1, 1) = 2
                    Else
                        ' We found the end of the table so add the count of the table questions to the row count plus 1...
                        row = row1 - 1
                        ' ...and exit this table loop
                        Exit For
                    End If
                Next row1
            Else
            ' This was not a level 1 table question
            End If
            ' Check to see if this is a Yes response or a table question. We only need to display children of questions where their parent's response is yes or it's a table top.
            If TempArray(row, 13) = 1 Then
                ' The parent question response is Yes, so set the response flag to true so we can process it's children...
                RespFlag = True
                ' ...Add a 2 to identify there is a response here.
                FilterArray(row, 1) = 2
                ' Identify the current question level
                TargetLevel = TempArray(row, col + 1)
            Else
                ' Check to see if the question level equals the current parent level. If so process the children if not reset the response flag.
                If TempArray(row, col) = ParentLevel Then
                    ' Check to see if this a child of the changed question (one level down only), if so update the filter array to display it.
                    If TempArray(row, col + 1) = TargetLevel + 1 Then
                        ' Check if the response flag is set if so...
                        If RespFlag = True Then
                            ' Check to see if this is a table question...
                            If TempArray(row, 2) = 1 Then
                                ' ...It was a table question so write a 2 to unfilter this table question
                                FilterArray(row, 1) = 2
                                ' loop through the next set of questions to find the table responses starting on the next question
                                For row1 = row + 1 To UBound(TempArray) Step 1
                                    ' Check to see if the table calculation flag is 0
                                    If TempArray(row1, 11) = 0 Then
                                        ' The table calculation flag is set so unfilter this question
                                        FilterArray(row1, 1) = 2
                                     Else
                                        ' We found the end of the table so add the count of the table questions to the row count plus 1...
                                        row = row1 - 1
                                        ' ...and exit this table loop
                                        Exit For
                                    End If
                                Next row1
                            Else
                                '...It was only a child so update the filter array
                                FilterArray(row, 1) = 2
                            End If
                        Else
                        End If
                    End If
                Else
                    ' The question level went down so reset the response flag
                    RespFlag = False
                End If
            End If
            ' Identify the current question level
            TargetLevel = TempArray(row, col + 1)
            ' Identify the current parent level
            ParentLevel = TempArray(row, col)
        Next row
    Next col
Else
End If

' Write the filter array
StartCell = ActiveSheet.Cells(5, FormOff).Address
' and ends on the total rows -4 and column AC (filter)
EndCell = ActiveSheet.Cells(TotalRows, FormOff).Address
' Write the filter array
ActiveSheet.Range(StartCell, EndCell) = FilterArray

' Bold the parent question text
For row = 5 To ActiveWorkbook.ActiveSheet.Range("Y1").Value - 1 Step 1
    ' Start by removing the bold from the cell pointed to by row, this will be updated in a second
    ActiveWorkbook.ActiveSheet.Cells(row, 3).Font.Bold = False
    ' Start looking at the sourounding cells and see if this is a parent. Check to see if there is a response
    If ActiveWorkbook.ActiveSheet.Cells(row, 19) = 0 Then
        ' Now check for a blank in the automation filter on the next row
        If ActiveWorkbook.ActiveSheet.Cells(row + 1, 29) = "" Then
            ' Finally check to see if tab automation is enabled
            If ActiveWorkbook.ActiveSheet.Cells(2, 8) = "Enable" Then
                ' Bold the text in the current cell
                ActiveWorkbook.ActiveSheet.Cells(row, 3).Font.Bold = True
            End If
        End If
    End If
Next row

' either come here if there is no filter or run this code to check for a filter, this will eleminate the issues with removing
' the filter from coolum AC
DontFilter:
If ActiveSheet.Cells(2, 8).Value = "Disable" Then
    ' Always filter on the scoping field
    ActiveSheet.Range(Cells(4, FormOff + 2), Cells(TotalRows, FormOff + 2)).AutoFilter
    ActiveSheet.Range(Cells(4, FormOff + 2), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=1, Criteria1:="<>" ' This is the scoping filter
Else
    ' Filter the tab on the values in the filter column
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=3, Criteria1:="<>"  ' This is the scoping filter
    ActiveSheet.Range(Cells(4, FormOff), Cells(TotalRows, FormOff + 2)).AutoFilter Field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2 ' This is the automation filter
End If

' Check to see if the tab was password protected, if it was then re-protect the sheet
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A17").Value

DoNothing:

' Give control back to the user
Application.ScreenUpdating = True

End Sub
Sub UpdateMaster()
Dim TabNum As Long
Dim ProtectState As Boolean

' Turn off screen events, this eleminates a problem with the Mac
Application.EnableEvents = False

' Select Disable for all automation dropdowns on all of the tabs when Master is selected
If ActiveWorkbook.Sheets("Drops").Range("Master") = "Master" Then
    For TabNum = 10 To 27 Step 1
        ' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
        ProtectState = ActiveWorkbook.Sheets(TabNum).ProtectContents
        ' Only unprotect a protected sheet
        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Unprotect Password:=Worksheets("Drops").Range("A17").Value
        ' Check to see of the tab is unhidden and if so unhide it
        If ActiveWorkbook.Worksheets(TabNum).Visible = False Then ActiveWorkbook.Sheets(TabNum).Visible = True
        ' Disable the tab automation
        If ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Enable" Then ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Disable"
        ' Unhide the Optional Scoring and Question level columns
        ActiveWorkbook.Sheets(TabNum).Range("AB1, AF1").EntireColumn.Hidden = False
        ' If the tab was protected , protected it back
        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Protect Password:=Worksheets("Drops").Range("A17").Value
    Next TabNum
    ' Add the word Master to the right footer in bold red to every tab
    For TabNum = 1 To 32 Step 1
        ActiveWorkbook.Worksheets(TabNum).PageSetup.RightFooter = "&""-,Bold""&KFF0000Master"
        ' Hide the Optional Scoring and Question level columns
'        ActiveWorkbook.Worksheets(TabNum).Range("AB1, AF1").EntireColumn.Hidden = True
    Next TabNum
Else
    For TabNum = 10 To 27 Step 1
        ' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
        ProtectState = ActiveWorkbook.Sheets(TabNum).ProtectContents
        ' Only unprotect a protected sheet
        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Unprotect Password:=Worksheets("Drops").Range("A17").Value
        ' Check to see of the tab is unhidden and if so unhide it
        If ActiveWorkbook.Worksheets(TabNum).Visible = False Then ActiveWorkbook.Sheets(TabNum).Visible = True
        ' Enable the tab automation
        If ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Disable" Then ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Enable"
        ' Hide the Optional Scoring and Question level columns
        ActiveWorkbook.Sheets(TabNum).Range("AB1, AF1").EntireColumn.Hidden = True
        ' If the tab was protected , protected it back
        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Protect Password:=Worksheets("Drops").Range("A17").Value
    Next TabNum
    ' Remove the word Master to the right footer on every tab
    For TabNum = 1 To 32 Step 1
        ActiveWorkbook.Worksheets(TabNum).PageSetup.RightFooter = ""
    Next TabNum

End If

'If ActiveWorkbook.Sheets("Drops").Range("Master") = "" Then
'    For TabNum = 10 To 27 Step 1
'        ' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
'        ProtectState = ActiveWorkbook.Sheets(TabNum).ProtectContents
'        ' Only unprotect a protected sheet
'        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Unprotect Password:=Worksheets("Drops").Range("A17").Value
'        ' Check to see of the tab is unhidden and if so unhide it
'        If ActiveWorkbook.Worksheets(TabNum).Visible = False Then ActiveWorkbook.Sheets(TabNum).Visible = True
'        ' Disable the tab automation
'        If ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Enable" Then ActiveWorkbook.Sheets(TabNum).Cells(2, 8).Value = "Disable"
'        ' Unhide the Optional Scoring and Question level columns
'        ActiveWorkbook.Sheets(TabNum).Range("AB1, AF1").EntireColumn.Hidden = False
'        ' If the tab was protected , protected it back
'        If ProtectState = True Then ActiveWorkbook.Sheets(TabNum).Protect Password:=Worksheets("Drops").Range("A17").Value
'    Next TabNum
'    ' Remove the word Master to the right footer on every tab
'    For TabNum = 1 To 32 Step 1
'        ActiveWorkbook.Worksheets(TabNum).PageSetup.RightFooter = ""
'    Next TabNum
'End If

' move back to the Scoping worksheet
ActiveWorkbook.Worksheets("Scoping").Select

' Turn Screen events back on
Application.EnableEvents = True

End Sub
Public Sub ApplyFilters()
' This sub will go to each tab in the SIG pull the category, sub-category and question levels
Dim ProtectState As Boolean
Dim DetProtectState As Boolean
Dim TabNum As Long
Dim row As Long
Dim row1 As Long
Dim col As Long
Dim StartCell As String
Dim EndCell As String
Dim LastUsedRow As Long
Dim TotalRows As Long
Dim TabFilterArray As Variant
Dim TempArray As Variant
Dim FilterAray As Variant
Dim WriteFilterArray As Variant
Dim RowPoint As Long
Dim DetailValue As Variant
Dim CatEnabled As Boolean
Dim SubEnabled As Boolean
Dim TabVisible As Boolean
Dim FilterRow As Long
Dim TabArray As Variant
Dim DetPW As String
Dim ScopeSelection As String

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents
' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A16").Value

' Let's grab this from the sheet, we'll need it later
DetailValue = ActiveWorkbook.Worksheets("Scoping").Range("DetailValue").Value

' Check to see if the user has slected a detail level
If DetailValue = 0 Then
    MsgBox ("Scoping cannot continue until you select a SIG Detail Level from the dropdown in cell C4.")
    GoTo NoLevel
End If

' Check to see if Master was selected
If DetailValue = "Master" Then
    ' They selected Master so Write Master to the drops tab
    ActiveWorkbook.Sheets("Drops").Range("Master").Value = "Master"
    ' And update the SIG
    Call UpdateMaster
    ' and leave
    GoTo NoLevel
Else
    ' They selected something other than Master so remove Master to the drops tab
    ActiveWorkbook.Sheets("Drops").Range("Master").Value = ""
    ' And update the SIG
    Call UpdateMaster
End If

' Turn off all of the autofilters for the worksheet
ActiveSheet.AutoFilterMode = False

' Let's grab the text of the detail level. This will be written to each tab to identify the SIG level selected
ScopeSelection = ActiveWorkbook.Worksheets("Scoping").Range("C4").Value

' Check to see if sub-categories are enabled if so update the sub enabled flag
If ActiveSheet.Range("DisplayCat") = "Enable" Then CatEnabled = True Else CatEnabled = False

' Check to see if sub-categories are enabled if so update the sub enabled flag
If ActiveSheet.Range("DisplaySub") = "Enable" Then SubEnabled = True Else SubEnabled = False

'----------------------------------------------------
' Get the filter criteria from the entire tab
' What's the last row used on the page
LastUsedRow = ActiveSheet.UsedRange.Rows.Count

' Pull all of the data on the scoping tab where a selection may have been made
ReDim TempArray(1 To LastUsedRow - 3, 1 To 13)
' Where does the data start
StartCell = ActiveSheet.Cells(4, 10).Address
' Go to the end
EndCell = ActiveSheet.Cells(LastUsedRow, 22).Address
' Get the data into temp array
TempArray = ActiveSheet.Range(StartCell, EndCell)

' Size the tab filter array with the maximum we could have, we'll reduce the loops once we have all of the data
ReDim TabFilterArray(1 To LastUsedRow - 3, 1 To 3)

' Start with Section count at 1. This will count how many sections were enabled
SectionCount = 0

' Look in each section to see if the user has enabled any of fields
' Only look in columns 1 - 10 the last two columns will only ever contain data to review
For col = 1 To 11 Step 1
    ' Check for the value Enable for the field. Only look in row 1
    If TempArray(1, col) = "Enable" Then
        ' Found one enabled so increment this so we know how many fields to filter on later and to point to the correct column in the array
        SectionCount = SectionCount + 1
        ' Start FilterRow at 1
        FilterRow = 1
        ' Check to see if this is sub-category field is enabled, if so overwrite the categories since we will get this with the sub-category field
        If col = 11 Then
            ' Now move the data from the temp file to the tab filter array
            For row = 1 To UBound(TempArray) Step 1
                ' Check for the text Checked in the field, if it's checked then move the value in the type field to the tab fitler array
                If TempArray(row, col + 2) = "Selected" Then
                    ' Add the checked value in the previous column to the TabFilterArray in the next row
                    TabFilterArray(FilterRow, SectionCount) = TempArray(row, col + 1)
                    ' Also add the category value to the TabFilterArray. This value is found in hidden column Q
                    TabFilterArray(FilterRow, SectionCount - 1) = TempArray(row, col - 3)
                    ' Increment the filter row to point to the next row in the TabArrayFilter
                    FilterRow = FilterRow + 1
                End If
            Next row
        Else
            ' Come here to process the categories, this will be overwritten if subs are enabled
            ' Now move the data from the temp file to the tab filter array
            For row = 1 To UBound(TempArray) Step 1
                ' Check for the text Checked in the field, if it's checked then move the value in the type field to the tab fitler array
                If TempArray(row, col + 2) = "Selected" Then
                    ' Add the checked value in the previous column to the TabFilterArray in the next row
                    TabFilterArray(FilterRow, SectionCount) = TempArray(row, col + 1)
                    ' Increment the filter row to point to the next row in the TabArrayFilter
                    FilterRow = FilterRow + 1
                End If
            Next row
        End If
    Else
    ' Come here if the text Enabled wasn't found
    End If
Next col

' TabArray will be used to identify the rows to be hidden on the Dashboard. Initially size it to the total tabs in the SIG starting in row 9
ReDim TabArray(1 To 29, 1 To 2)
' now fill it with x's
For row = 1 To UBound(TabArray) Step 1
    TabArray(row, 1) = "x"
Next row

' Get the sheet protect password from the formula drops tab
DetPW = ActiveWorkbook.Worksheets("Drops").Range("A17").Value

' First loop through each detail tab and pull the filter type, category and sub-category into an array
For TabNum = 10 To 27 Step 1
    ' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
    ' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
    DetProtectState = ActiveWorkbook.Worksheets(TabNum).ProtectContents
    ' Only unprotect a protected sheet
    If DetProtectState = True Then ActiveWorkbook.Worksheets(TabNum).Unprotect Password:=DetPW
    ' Turn off all of the autofilters for the worksheet
    ActiveWorkbook.Worksheets(TabNum).AutoFilterMode = False
    ' Write the detail selected to the tab
    ActiveWorkbook.Worksheets(TabNum).Range("C2").Value = ScopeSelection
    ' Figure out the last used row. This value is calculated in the SIG in cell Y1
    LastUsedRow = ActiveWorkbook.Worksheets(TabNum).Cells(1, 25).Value
    ' Size the temp array to the total rows and three columns
    ReDim TempArray(1 To LastUsedRow - 4, 1 To 3)
    ' Size the write filter array to the total rows and two columns, we'll use this array to write the filter values later
    ReDim WriteFilterArray(1 To LastUsedRow - 4, 1 To 2)
    ' The starting cell will always start here
    StartCell = "$Y$5"
    ' Get the last cell
    EndCell = "$AA$" & LastUsedRow
    ' Get the data from the current tab
    TempArray = ActiveWorkbook.Worksheets(TabNum).Range(StartCell, EndCell)
    ' let's start checking the values in the tab to the values the user selected. loop through the tab filter array for as many columns as we found
    ' But first lets see what the user selected and what we have to combine. Check for cat or sub enabled
    If SectionCount = 0 Then
        ' Look at each cell in the SIG
        For row1 = 1 To UBound(TempArray) Step 1
            ' This is an easy one just check the levels to the first column and put an x for any values = or less than what's in the filter array
            If TempArray(row1, 1) <= DetailValue Then
                ' Write an x in the write filter array
                WriteFilterArray(row1, 1) = "x"
                ' And identify if this tab should be visible
                TabVisible = True
            Else
            End If
        Next row1
    ' Catenabled was false so come here
    Else
    ' There are only two fields to check although TabFilterArray has 3. The last two columns will be the category and sub-category values. Only two will be useed if only categories are enabled
    For col = 1 To 2 Step 1
        ' Then starting a loop to look at each row in the tab filter array
        For row = 1 To UBound(TabFilterArray) Step 1
            ' Check to see if the tab filter array is empty and jump out of this loop to save some time
            If TabFilterArray(row, col) = "" Then Exit For
                ' Now finally look at each cell in the SIG
                For row1 = 1 To UBound(TempArray) Step 1
                    ' Compare the values from the SIG to the tab filter array. We'll compare all three columns from the SIG here so as not to create yet another loop...
                    ' Oops categories are enabled now check to see if subs are eabled
                    If SubEnabled = False Then
                        ' This is a little easier since we only have to compare two values, start with the detail value
                        If TempArray(row1, 1) <= DetailValue Then
                            ' Now check the category
                            If TempArray(row1, 2) = TabFilterArray(row, col) Then
                                ' Write the x
                                WriteFilterArray(row1, 1) = "x"
                                ' And identify if this tab should be visible
                                TabVisible = True
                            End If
                        End If
                    Else
                    ' Sub enabled was true so come here and compare three values
                        If TempArray(row1, 1) <= DetailValue Then
                            ' Now check the category
                            If TempArray(row1, 2) = TabFilterArray(row, col) Then
                                ' Check the sub
                                If TempArray(row1, 3) = TabFilterArray(row, col + 1) Then
                                    ' Write the x
                                    WriteFilterArray(row1, 1) = "x"
                                    ' And identify if this tab should be visible
                                    TabVisible = True
                                End If
                            End If
                        End If
                    End If
                Next row1
        Next row
    Next col
    End If
    ' We now have the necessary filter info let's write it and unhide the tab
    ' Write the filter values. Always stat at cell AE5
    StartCell = "$AE$5"
    ' Where do we end?
    EndCell = "$AE$" & LastUsedRow
    ' Write the values
    ActiveWorkbook.Worksheets(TabNum).Range(StartCell, EndCell) = WriteFilterArray
    ' Put the proctection back to where we found it
    If ProtectState = True Then ActiveWorkbook.Worksheets(TabNum).Protect Password:=DetPW
    ' Now unhide the tab if there is content to display
    If ActiveWorkbook.Worksheets(TabNum).Visible = False Then
        If TabVisible = True Then ActiveWorkbook.Worksheets(TabNum).Visible = True Else ActiveWorkbook.Worksheets(TabNum).Visible = False
    End If
    ' And remove the x in the tab array if it's not supposed to be visible
    If TabVisible = False Then TabArray(TabNum - 4, 1) = ""
Next TabNum
        
'--------------------------------------------------------------------
' Process the Dashboard:
' Write the tab array values to the dashboard and filter it. Go to the dashboard tab first
'--------------------------------------------------------------------
' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
DetProtectState = ActiveWorkbook.Worksheets("Dashboard").ProtectContents
' Only unprotect a protected sheet
If DetProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Unprotect Password:=DetPW
' Turn off all of the autofilters for the worksheet
ActiveWorkbook.Worksheets("Dashboard").AutoFilterMode = False
' Focus on the Dashboard tab
ActiveWorkbook.Worksheets("Dashboard").Select
' Start Cell and end cell will always be the same
StartCell = "$G$5"
EndCell = "$G$33"
' Write the values
ActiveWorkbook.Worksheets("Dashboard").Range(StartCell, EndCell) = TabArray
' Turn on the fitlers
ActiveWorkbook.Worksheets("Dashboard").Range(StartCell, EndCell).AutoFilter Field:=1, Criteria1:="<>" 'column G
' Put the proctection back to where we found it
If DetProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Protect Password:=DetPW

' Move focus back to the scoping tab
ActiveWorkbook.Worksheets(4).Select

' Put the filter back to where it was
If ActiveSheet.Range("DisplayCat").Value = "Enable" Then
    ' The user selected categories so filter on the final filter column (column V)
    ActiveSheet.Range(Cells(4, 23), Cells(LastUsedRow, 23)).AutoFilter Field:=1, Criteria1:="<>" 'column W
End If

NoLevel:

'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A16").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub

Private Sub CallCheckClearAll(DoWhat, CheckedArray, ActiveColumn)
Application.Run "Sheet04.CheckClearAll", DoWhat, CheckedArray, ActiveColumn
End Sub

' This sub will run when the user clicks on the Protect Tab button on the Scoping Tab. This will either change the password to what was provided or reset it to the standard SIG PW
Public Sub PasswordProtectScope(TextBox1, PWMatch)
Dim ProtectState As Boolean
Dim LastUsedRow As Long

'Turn off screen updating
Application.ScreenUpdating = False

' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents

' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A16").Value

' Check if the passwords matched
If PWMatch = False Then
    MsgBox ("The passwords you entered don't match. Please try entering the password again.")
    GoTo NoPassword
End If

' Check to see if the user provided a password
If TextBox1 = "" Then
    ' No password was provided so inform the user and leave
    MsgBox ("No password was provided, please provide a password to protect/unprotect this tab")
    GoTo NoPassword
End If

' Process the password text entered here...
If Len(TextBox1) < 8 Then
    MsgBox ("The password must be at least 8 characters. The password has not been changed.")
    GoTo NoPassword
End If

' Turn off all of the autofilters for the worksheet. They will be re-applied when the sheet changes
ActiveWorkbook.Worksheets("Scoping").AutoFilterMode = False

' We'll grab this here since it's no better then anywhere else...
LastUsedRow = ActiveWorkbook.Sheets("Scoping").UsedRange.Rows.Count

' Check the SIG password and see if the same as the scoping password
If ActiveWorkbook.Worksheets("Drops").Range("ScopeState").Value = False Then
    ' The password has not been set yet so set the password to what was provided and write the new password to the drops tab
    ' Check to see if its the same password as the SIG password, if so just leave
    If TextBox1 = ActiveWorkbook.Worksheets("Drops").Range("A17").Value Then GoTo NoPassword
    ' Unprotect protected the sheet
    If ProtectState = True Then ActiveWorkbook.Worksheets("Scoping").Unprotect Password:=ActiveWorkbook.Worksheets("Drops").Range("A16").Value
    ' Set the font color to white for the instruction cells
    ActiveWorkbook.Worksheets("Scoping").Range("B1").Font.Color = vbWhite
    ActiveWorkbook.Worksheets("Scoping").Range("N1").Font.Color = vbWhite
    ActiveWorkbook.Worksheets("Scoping").Range("T1").Font.Color = vbWhite
    ' Hide the Create and Reset buttons
    ActiveWorkbook.Worksheets("Scoping").Buttons("CreateSIG").Visible = False
    ActiveWorkbook.Worksheets("Scoping").Buttons("ResetScope").Visible = False
    ' Update the text in cell G1 to reflect the state of the tab
    ActiveWorkbook.Worksheets("Scoping").Range("G1").Value = "Scoping has been disabled by the assessor:" & Chr(10) & Chr(10) & "To enable Scoping, provide the password used to protect this tab."
    ' Hide all of the Scoping Selection Rows
    ActiveWorkbook.Worksheets("Scoping").Rows("2:" & LastUsedRow).Hidden = True
    ' Protect the tab with the user entered password
    If ProtectState = True Then ActiveWorkbook.Worksheets("Scoping").Protect Password:=TextBox1
    ' Store the SIG password on the drops tab
    If ProtectState = True Then ActiveWorkbook.Worksheets("Drops").Range("A16").Value = TextBox1
Else
    ' The password has been set so check to see if they provided the correct password
    If TextBox1 = ActiveWorkbook.Worksheets("Drops").Range("A16").Value Then
        ' The user entered the correct password so reset the sheet password to the SIG password and save it to the drops tab
        ' Unprotect protected the sheet
        If ProtectState = True Then ActiveWorkbook.Worksheets("Scoping").Unprotect Password:=ActiveWorkbook.Worksheets("Drops").Range("A16").Value
        ' Unhide all of the Scoping Selection Rows
        ActiveWorkbook.Worksheets("Scoping").Rows.EntireRow.Hidden = False
        ' Unhide the Create SIG and Reset SIG buttons
        ActiveWorkbook.Worksheets("Scoping").Buttons("CreateSIG").Visible = True
        ActiveWorkbook.Worksheets("Scoping").Buttons("ResetScope").Visible = True
        ' Update the text in cell G1 to reflect the state of the tab
        ActiveWorkbook.Worksheets("Scoping").Range("G1").Value = "Disable Scoping:" & Chr(10) & "When a SIG is sent, scoping should be disabled. To do this:" & Chr(10) & "1) Click the Disable Scoping button" & Chr(10) & "2) Enter a password with at least 8 characters and click Save" & Chr(10) & "3) Enter the password again and click Save" & Chr(10) & "4) When locked the Scoping fields will not display"
        ' Format the cell text
        ActiveWorkbook.Worksheets("Scoping").Range("G1").Font.Bold = False
        ActiveWorkbook.Worksheets("Scoping").Range("G1").Characters(Start:=1, Length:=16).Font.FontStyle = "Bold"
        ' Reset the font color to black for the instruction cells
        ActiveWorkbook.Worksheets("Scoping").Range("B1").Font.Color = vbBlack
        ActiveWorkbook.Worksheets("Scoping").Range("N1").Font.Color = vbBlack
        ActiveWorkbook.Worksheets("Scoping").Range("T1").Font.Color = vbBlack
        ' Protect the tab with the SIG password
        If ProtectState = True Then ActiveWorkbook.Worksheets("Scoping").Protect Password:=ActiveWorkbook.Worksheets("Drops").Range("A17").Value
        ' Store the SIG password on the drops tab
        If ProtectState = True Then ActiveWorkbook.Worksheets("Drops").Range("A16").Value = ActiveWorkbook.Worksheets("Drops").Range("A17").Value
    Else
    ' The entered the wrong password so let them know.
        MsgBox ("The password you provided does not match the current Scoping tab password. Please enter the correct password to unprotect this tab.")
    End If
End If

NoPassword:

' For some reason I can't get the buttons to update in this code but they will update when the tab is selected, so go to another tab and come back to the scoping tab to update the buttons.
ActiveWorkbook.Worksheets("Instructions").Select
ActiveWorkbook.Worksheets("Scoping").Select

' Move the cell pointer to cell A1
ActiveWorkbook.Worksheets("Scoping").Range("A1").Select

'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A16").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub
Private Sub GlossaryUpdate()
Dim row As Long
Dim row1 As Long
Dim row2 As Long
Dim col As Long
Dim CurrentTabArray As Variant
Dim GlossaryArray As Variant
Dim StartCell As String
Dim EndCell As String
Dim LastUsedRow As Long
Dim StringStart As Long
Dim QuesText As String
Dim FoundArray As Variant

'--------------------------------------------------------------------
' This sub, when called manually will look at the glossary entries then update the SIG question text with
' hyperlinks to glossary terms.
' This sub only needs to run once the glossary or SIG is updated.
' This sub is private intentionnally and must be run manually
' Prior to running this perform the following:
' 1) Copy the existing contents of the glossary terms (column B) to column F
' 2) Add column next to the glossary term on the glossary tab
' 3) Add a formula in the new column to get the lowercase glossary terms e.g., =Lower(C4)
' 4) Click on any row in this sub
' 5) Click F5 or click Run - Run Sub
' Results:
' This will get the list of glossary terms (upper and lowercase) find it on the detail tab and italicize and capitalize them
' It will also identify the terms if found in column H by placing either a 1 or 2 in the column. If the term was not found this cell will be blank
' You will have to review the list of blanks to see if the term was mis-spelled or is actually missing.
'--------------------------------------------------------------------

' Get the Glossary terms into an array
' Where is the end of the glossary?
LastUsedRow = ActiveWorkbook.Sheets("Glossary").Cells(ActiveWorkbook.Sheets("Glossary").Rows.Count, 2).End(xlUp).row
' Resize the found array
ReDim FoundArray(1 To LastUsedRow - 3, 1 To 2)
' Resize the Glossary array
ReDim GlossaryArray(1 To LastUsedRow - 3, 1 To 2)
' Get the start cell for the fist entry in the glossary
StartCell = ActiveWorkbook.Sheets("Glossary").Cells(4, 2).Address ' Always start in cell B4
' Get the end cell address
EndCell = ActiveWorkbook.Sheets("Glossary").Cells(LastUsedRow, 3).Address ' End in the last row used in colum O
' Get the values from the glossery into the array
GlossaryArray = ActiveWorkbook.Sheets("Glossary").Range(StartCell, EndCell)

' Start a loop for each tab and get the contents of the tab into the current tab array
For row = 10 To 27 Step 1
    ' Get the contents of the tab into an array
    ' Where is the end of the question text
    LastUsedRow = ActiveWorkbook.Sheets(row).Cells(ActiveWorkbook.Sheets(row).Rows.Count, 3).End(xlUp).row
    ' Resize the array
    ReDim CurrentTabArray(1 To LastUsedRow - 5, 1 To 2)
    ' Where does the data start?
    StartCell = ActiveWorkbook.Sheets(row).Cells(5, 3).Address
    ' Where does the data end?
    EndCell = ActiveWorkbook.Sheets(row).Cells(LastUsedRow, 4).Address
    ' Get the question text
    CurrentTabArray = ActiveWorkbook.Sheets(row).Range(StartCell, EndCell)
    ' Start a loop to look for the glossary term
    For row1 = 1 To UBound(GlossaryArray) Step 1
        ' Start another loop to look at each question and see if there is a glossary term
        For row2 = 1 To UBound(CurrentTabArray) Step 1
            ' Check for the glossary term in the text
            If InStr(1, CurrentTabArray(row2, 1), GlossaryArray(row1, 1)) > 0 Then
                ' Found the string so lets get where the string starts in the cell
                StringStart = InStr(1, CurrentTabArray(row2, 1), GlossaryArray(row1, 1))
                ' Italizize the glossary text
                ActiveWorkbook.Sheets(row).Cells(row2 + 4, 3).Characters(Start:=StringStart, Length:=Len(GlossaryArray(row1, 1))).Font.FontStyle = "Italic"
                ' Update the glossary array saying it was found
                FoundArray(row1, 1) = "1"
            Else
            ' Do nothing here
            End If
        Next row2
    Next row1
    ' Loop through again looking at the lower case values and replace with upper case if found
    For row1 = 1 To UBound(GlossaryArray) Step 1
        ' Start another loop to look at each question and see if there is a glossary term
        For row2 = 1 To UBound(CurrentTabArray) Step 1
            ' Check for the glossary term in the text
            If InStr(1, CurrentTabArray(row2, 1), GlossaryArray(row1, 2)) > 0 Then
                ' Check to see if we have already updaed this and jump past if so
                If FoundArray(row1, 1) = "" Then
                    ' Found the string so lets get where the string starts in the cell
                    StringStart = InStr(1, CurrentTabArray(row2, 1), GlossaryArray(row1, 2))
                    ' Replace the existing text with the text from the glossary
                    ActiveWorkbook.Sheets(row).Cells(row2 + 4, 3).Value = Replace(ActiveWorkbook.Sheets(row).Cells(row2 + 4, 3).Value, GlossaryArray(row1, 2), GlossaryArray(row1, 1))
                    ' Italizize the glossary text
                    ActiveWorkbook.Sheets(row).Cells(row2 + 4, 3).Characters(Start:=StringStart, Length:=Len(GlossaryArray(row1, 2))).Font.FontStyle = "Italic"
                    ' Update the glossary array saying it was found
                    FoundArray(row1, 1) = "2"
                Else
                ' Already updated so do nothing
                End If
            Else
            ' Do nothing here
            End If
        Next row2
    Next row1
Next row

' Write the values found in the glossary
' Where is the end of the glossary?
LastUsedRow = ActiveWorkbook.Sheets("Glossary").Cells(ActiveWorkbook.Sheets("Glossary").Rows.Count, 2).End(xlUp).row
' Get the start cell for the fist entry in the glossary
StartCell = ActiveWorkbook.Sheets("Glossary").Cells(4, 8).Address ' Always start in cell B3
' Get the end cell address
EndCell = ActiveWorkbook.Sheets("Glossary").Cells(LastUsedRow, 8).Address ' End in the last row used in colum O
' Get the values from the category columns into the checkedarray
ActiveWorkbook.Sheets("Glossary").Range(StartCell, EndCell) = FoundArray


End Sub

Sub ShowDrops()

ActiveWorkbook.Worksheets("Drops").Visible = True

End Sub
Attribute VB_Name = "Module3"
Function getScore(response As String, ByVal maturity, base As String, x1 As String, x2 As String, x3 As String, x4 As String, x5 As String)

If response = "Correct" And maturity = "1" Then
    getScore = x1
ElseIf response = "Correct" And maturity = 2 Then
    getScore = x2
ElseIf response = "Correct" And maturity = 3 Then
    getScore = x3
ElseIf response = "Correct" And maturity = 4 Then
    getScore = x4
ElseIf response = "Correct" And maturity = 5 Then
    getScore = x5
Else
    getScore = base
End If

End Function

Function lastModified()

lastModified = _
    ActiveWorkbook.BuiltinDocumentProperties("Last Save Time") & _
    " By: " & _
    ActiveWorkbook.BuiltinDocumentProperties("Last Author")

End Function

Sub FNF_Review()
    On Error GoTo DoNothing
    sigpass = InputBox("password")
    
    For Each Worksheet In ActiveWorkbook.Worksheets
        Worksheet.Unprotect Password:=sigpass
        Worksheet.Columns("AL:BB").Hidden = False
    Next
        
    Exit Sub

DoNothing:

End Sub
Attribute VB_Name = "PWPass1"
Attribute VB_Base = "0{81C35952-A2F9-411D-B949-4C489A6D3ED0}{E4DCDB26-C0C4-43BB-ACC6-F3D21E331DC8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub PWPass1_Click()
Dim PWMatch As Boolean

' Check to see if the password recovery text was entered
If TextBox1 = "RecoverMe" Then
    MsgBox (ActiveWorkbook.Worksheets("Drops").Range("A16").Value)
    GoTo Done
End If

' Check to see if the user is changeing the password here if they are then show the second password box
If ActiveWorkbook.Sheets("Drops").Range("ScopeState") = False Then
    Me.Hide
    PWPass2.Show
End If

' Check to see if the passwords match and set PWMatch to true
If TextBox1 = PWPass2.TextBox2.Value Then PWMatch = True Else PWMatch = False

' If the user is resetting the password we need to set PWMatch to true to let the called sub check the password
If ActiveWorkbook.Sheets("Drops").Range("ScopeState") = True Then PWMatch = True

' Call the sub with the text entered and the PWMatch flag
Call PasswordProtectScope(TextBox1, PWMatch)


Done:
Unload PWPass2
Unload Me

End Sub

Private Sub TextBox1_Change()

End Sub
Attribute VB_Name = "PWPass2"
Attribute VB_Base = "0{AFD89C50-B7BB-433E-9BE9-5F3029E65CD7}{34BAE020-A346-440F-8495-417DD2F97162}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub TextBox2_Change()

End Sub
Private Sub PWPass2_Click()

Me.Hide

End Sub

Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
Dim ProtectState As Boolean

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents

' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A16").Value

' Check to see if the sheet is protected with a password other than the SIG password
If ActiveWorkbook.Worksheets("Drops").Range("ScopeState").Value = True Then
    ' The password does not match the SIG password so change the button text
    ActiveWorkbook.Worksheets("Scoping").Buttons("PasswordButton").Caption = "Enable Scoping"
    ' And hide the Create SIG and Reset Scope buttons
    ActiveWorkbook.Worksheets("Scoping").Buttons("CreateSIG").Visible = False
    ActiveWorkbook.Worksheets("Scoping").Buttons("ResetScope").Visible = False
Else
    ' The password is the same as the SIG password so update the button text
    ActiveWorkbook.Worksheets("Scoping").Buttons("PasswordButton").Text = "Disable Scoping"
    ' And show the Create SIG and Reset Scope buttons
    ActiveWorkbook.Worksheets("Scoping").Buttons("CreateSIG").Visible = True
    ActiveWorkbook.Worksheets("Scoping").Buttons("ResetScope").Visible = True
End If

' Hide all of these columns when the tab is selected
ActiveSheet.Columns("D").EntireColumn.Hidden = True ' SIG detail level value
ActiveSheet.Columns("F").EntireColumn.Hidden = True ' SIG detail level value
ActiveSheet.Columns("H").EntireColumn.Hidden = True ' Extra service name column that was not necessary
ActiveSheet.Columns("W:AB").EntireColumn.Hidden = True ' Final filter column and service selections
ActiveSheet.Columns("Q:S").EntireColumn.Hidden = True ' Cat, sub-cat formula columns

' There are a number of columns that will be used in the future, hide them anytime the Scoping tab is selected
ActiveSheet.Columns("I:L").EntireColumn.Hidden = True

'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A16").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Dim ProtectState As Boolean
Dim LastRow As Long
Dim CheckedArray As Variant
Dim DoWhat As String
Dim ActiveColumn As Long
Dim ServiceName As String
Dim ServiceOps As String
Dim Loc As Long
Dim ErrCode As Long

'Turn off screen updating
Application.ScreenUpdating = False

' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveSheet.ProtectContents

' Only unprotect a protected sheet
If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Drops").Range("A16").Value

' Turn off all of the autofilters for the worksheet
ActiveSheet.AutoFilterMode = False

' Get the last row of the current sheet
LastRow = ActiveSheet.UsedRange.Rows.Count '+ 1

' Check if they selected a group operation for the Categories. If so process what the user wanted
If Target.row = 2 Then
    ' Check to see if clear all was selected for the categories and Clear All was selected clear both the categories and the sub-categories
    If Target.Column = 16 Or Target.Column = 22 Then
        If Target.Value = "Clear All" Then
            ' Clear the sub-categories first
            DoWhat = "Clear All"
            ' Set the active column to the sub selection column
            ActiveColumn = 22
            ' Call CheckClearAll to clear out the sub-category selections
            Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
            ' Now clear out the
            DoWhat = Target.Value
            ' Get the active column
            ActiveColumn = Target.Column
            ' Call CheckClearAll to update the values in the checked fields
            Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
        Else
            ' We know the group operation has changed
            DoWhat = Target.Value
            ' Get the active column
            ActiveColumn = Target.Column
            ' Call CheckClearAll to update the values in the checked fields
            Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
        End If
    End If
End If

' Check for change to the selection fields
' Only check for only changes in row 4 since this is where all of the functional changes exist
If Target.row = 4 Then
    ' Check for a change to the category selection in cell N4 (column 14)
    If Target.Column = 7 Then
        ' Load what the user wants to do
        ServiceOps = ActiveSheet.Range("G4").Value
        ' Get the name from G4
        ServiceName = ActiveSheet.Range("F4").Value
        ' load the location of the settings
        Loc = ActiveSheet.Range("H4").Value
        ' Process the user selection
        Call ProcessSelection(ServiceName, ServiceOps, Loc, ErrCode, CheckedArray)
    End If
    ' Check for a change to the category selection in cell N4 (column 14)
    If Target.Column = 14 Then
        ' The category selection has changed so update what the user wants
        Call CatSlected(CheckedArray)
    End If
    ' Check for a change to the sub-category selection in cell T4 (column 20)
    If Target.Column = 20 Then
        'The sub-category selection has changed so update what the user wants
        Call SubSelected(CheckedArray)
    End If
End If

' Always filter on the final filter column (column V)
''''IF THE NEXT TWO LINES ARE COMMEENTED UNCOMMENT THEM FOR PRODUCTION'''
ActiveWorkbook.Sheets("Scoping").Range(Cells(3, 23), Cells(LastRow, 23)).AutoFilter
ActiveWorkbook.Sheets("Scoping").Range(Cells(3, 23), Cells(LastRow, 23)).AutoFilter Field:=1, Criteria1:="<>" 'column V

'--------------------------------------------------------------------
' Check to see if the tab was password protected when we first started. If it was protected, protected it back
' if it wasn't protected don't protect it.
'--------------------------------------------------------------------
If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Drops").Range("A16").Value

' Give control back to the user
Application.ScreenUpdating = True

End Sub

Private Sub CheckClearAll(DoWhat As String, CheckedArray As Variant, ActiveColumn As Long)
Dim row As Long
Dim ChangeTo As String

' Stop the worksheet change events
Application.EnableEvents = False

' Adjust the changefrom and change to variables to what the user wanted
If DoWhat = "Select All" Then ChangeTo = "Selected" Else ChangeTo = ""

' We only want the sub-category column so find the last row in that column
LastUsedRow = ActiveSheet.Cells(ActiveSheet.Rows.Count, ActiveColumn - 1).End(xlUp).row

' Check to see if there is anything to clear. If there is nothing to clear LastUsedRow will be 3
If DoWhat = "Select All" Then
    ' change the values to the what the Group Operations field has changed to
    ' Size the checkedarray to the max number of rows and two columns
    ReDim CheckedArray(1 To LastUsedRow - 4, 1 To 2)
    ' Get the start cell from the active column -1. This will be the content we will check to see if there is content since some cells may be blank and we don't need to populate
    StartCell = ActiveSheet.Cells(4, ActiveColumn - 1).Address ' Always start in cell O4
    ' Get the end cell address
    EndCell = ActiveSheet.Cells(LastUsedRow, ActiveColumn - 1).Address ' End in the last row used in colum O
    ' Get the values from the category columns into the checkedarray
    CheckedArray = ActiveSheet.Range(StartCell, EndCell)
    ' Loop through the array and add the text checked to any non-blank fields
    For row = 1 To UBound(CheckedArray) Step 1
        If CheckedArray(row, 1) <> "" Then CheckedArray(row, 1) = ChangeTo
    Next row
    ' Get the start cell. This will be the same column as the change took place.
    StartCell = ActiveSheet.Cells(4, ActiveColumn).Address ' Always start in cell P4
    ' Get the end cell address
    EndCell = ActiveSheet.Cells(LastUsedRow, ActiveColumn).Address  ' End in the last row used in colum P
    ' Write the array with what the user wanted to change
    ActiveSheet.Range(StartCell, EndCell) = CheckedArray
    ' And Clear this field since we have processed what the user wanted.
    ActiveSheet.Cells(2, ActiveColumn) = ""
Else
    ' The useer selected Clear All so come here
    If DoWhat = LastUsedRow < 4 Then
        ' change the values to the what the Group Operations field has changed to
        ' Size the checkedarray to the max number of rows and two columns
        ReDim CheckedArray(1 To LastUsedRow - 4, 1 To 2)
        ' Get the start cell from the active column -1. This will be the content we will check to see if there is content since some cells may be blank and we don't need to populate
        StartCell = ActiveSheet.Cells(4, ActiveColumn - 1).Address ' Always start in cell O4
        ' Get the end cell address
        EndCell = ActiveSheet.Cells(LastUsedRow, ActiveColumn - 1).Address ' End in the last row used in colum O
        ' Get the values from the category columns into the checkedarray
        CheckedArray = ActiveSheet.Range(StartCell, EndCell)
        ' Loop through the array and add the text checked to any non-blank fields
        For row = 1 To UBound(CheckedArray) Step 1
            If CheckedArray(row, 1) <> "" Then CheckedArray(row, 1) = ChangeTo
        Next row
        ' Get the start cell. This will be the same column as the change took place.
        StartCell = ActiveSheet.Cells(4, ActiveColumn).Address ' Always start in cell P4
        ' Get the end cell address
        EndCell = ActiveSheet.Cells(LastUsedRow, ActiveColumn).Address  ' End in the last row used in colum P
        ' Write the array with what the user wanted to change
        ActiveSheet.Range(StartCell, EndCell) = CheckedArray
        ' And Clear this field since we have processed what the user wanted.
        ActiveSheet.Cells(2, ActiveColumn) = ""
    Else
    End If
End If

' Turn events back on
Application.EnableEvents = True

End Sub
Private Sub CatSlected(CheckedArray As Variant)
Dim LastUsedRow As Long
Dim ActiveColumn As Long
Dim DoWhat As String

'Check for categories enabled change
If ActiveSheet.Range("DisplayCat").Value = "Enable" Then
    ' Unhide the categories columns...
    ActiveSheet.Columns("O:P").EntireColumn.Hidden = False ' we only want the text unhidden so only unhide these columns (Category and selection)
    ' ...and the sub cat selection dropdown
    ActiveSheet.Columns("T").EntireColumn.Hidden = False ' we only want the text unhidden so only unhide this column (Sub-category selection)
    ' Stop the worksheet change events so we don't trigger a change
    Application.EnableEvents = False
    ' And since it changed to enable then clear out the sub enabled field
    ActiveSheet.Range("T4").Value = "Disable"
    ' Now clear out all of the checked boxes for the subs
    DoWhat = "Clear All"
    ' Now set the active column to the sub-category selection column (column V)
    ActiveColumn = 22
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' There are no sub categories checked so hide the sub-categores
    ActiveSheet.Columns("U:V").EntireColumn.Hidden = True
    ' Check all of the categories by default
    DoWhat = "Select All"
    ' Set the active column to the category selection column (column P)
    ActiveColumn = 16
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' Turn events back on
    Application.EnableEvents = True
Else
    ' The selection was set to disable
    ' Clear out the sub enabled field
    ActiveSheet.Range("T4").Value = "Disable"
    ' Clear out all of the checked boxes for the categories
    DoWhat = "Clear All"
    ' Now set the active column to the category selection column (column P)
    ActiveColumn = 16
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' Also delete the sub-category selections as well
    DoWhat = "Clear All"
    ' Now set the active column to the sub-category selection column (column V)
    ActiveColumn = 22
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' Hide these columns
    ActiveSheet.Columns("O:V").EntireColumn.Hidden = True
End If

End Sub
Private Sub SubSelected(CheckedArray As Variant)
Dim LastUsedRow As Long
Dim ActiveColumn As Long
Dim DoWhat As String

' Check for enabled sub-categories
If ActiveSheet.Range("DisplaySub").Value = "Enable" Then
    ' They have enabled sub-categories so unhide the sub-categories
    ActiveSheet.Columns("U:V").EntireColumn.Hidden = False
    ' Stop the worksheet change events so we don't trigger a change
    Application.EnableEvents = False
    ' Check all of the sub-categories by default
    DoWhat = "Select All"
    ' Set the active column to the category selection column (column P)
    ActiveColumn = 22
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' Turn events back on
    Application.EnableEvents = True
Else
    ' The selected disable so clear out all of the checked boxes for the subs
    DoWhat = "Clear All"
    ' Now set the active column to V
    ActiveColumn = 22
    ' Call CheckClearAll to update the values in the checked fields
    Call CheckClearAll(DoWhat, CheckedArray, ActiveColumn)
    ' Since they selected disable then hide these columns
    ActiveSheet.Columns("U:V").EntireColumn.Hidden = True
End If

End Sub
Private Sub ProcessSelection(ServiceName As String, ServiceOps As String, Loc As Long, ErrCode As Long, CheckedArray As Variant)

' Stop the worksheet change events
Application.EnableEvents = False

' Delete the service name value
ActiveWorkbook.Sheets("Scoping").Range("F4").Value = ""
' Delete the service operation value
ActiveWorkbook.Sheets("Scoping").Range("G4").Value = ""

' Check for blank service name
If ServiceName = "" Then
    ' Tell the user to add a name and leave
'---------------------------------------
' Remove the comment below when the service selection is available.
'    MsgBox ("Please enter a name for this service in cell F4.")
    GoTo NoName
End If

' Perform the action the user selected
If ServiceOps = "Save Selection" Then Call SaveSelection(ServiceName, Loc, ErrCode)

If ServiceOps = "Recall Selection" Then
    If ActiveWorkbook.Sheets("Drops").Cells(99, 1).Value = "" Then
    ' There are no saved names notify the user and leave
    MsgBox ("There are no saved names. Please select a saved name to restore it.")
    Else
    Call RecallSelection(ServiceName, Loc, ErrCode, CheckedArray)
    End If
End If

If ServiceOps = "Delete Selection" Then
    ' Check to see if the user wants to delete the selection
    Answer = MsgBox("Are you sure you want to delete this service?", vbQuestion + vbYesNo)
    If Answer = 6 Then Call DeleteSelection(ServiceName, Loc, ErrCode)
Else
' The user chose not to save the name
End If

NoName:

' Turn events back on
Application.EnableEvents = True

End Sub

Private Sub SaveSelection(ServiceName As String, Loc As Long, ErrCode As Long)
Dim ServiceArray As Variant
Dim row As Long
Dim StartCell As String
Dim EndCell As String
Dim ServiceNameArray As Variant
Dim EndRow As Long
Dim TempArray As Variant
Dim LastOff As Long
Dim ServiceArraySize As Long

' Get the service values from the tab, these are located in a named range on the scoping tab
ServiceArray = ActiveWorkbook.ActiveSheet.Range("ServiceValues").Value

' Save the service array size
ServiceArraySize = UBound(ServiceArray)

' Update the Service Name named range
' Check to see if there are any names saved
If ActiveWorkbook.Sheets("Drops").Cells(99, 1).Value <> "" Then
    ' There are names saved so find the last row
    EndRow = ActiveWorkbook.Sheets("Drops").Cells(ActiveWorkbook.Sheets("Drops").Rows.Count, "A").End(xlUp).row
    ' Size the service name array to the current array size
    ReDim ServiceNameArray(1 To EndRow - 100, 1 To 2)
    ' Find the beginning cell of the range starting in column A
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(101, 1).Address
    ' Identify where the end of the list is ending in column B
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow, 2).Address
    ' Get the existing values into the service name array
    ServiceNameArray = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)
    ' Check to see if there is a duplicate name in the array
    For row = 1 To UBound(ServiceNameArray) Step 1
        ' Check for duplicate
        If ServiceNameArray(row, 1) = ServiceName Then
            ' Tell the user there was a duplicate and see what they want to do
            Answer = MsgBox("The name: " & ServiceName & " exits. Do you want to update the serive with these settings?", vbQuestion + vbYesNo)
            If Answer <> 6 Then
            ' They don't want to overwrite so leave
            GoTo DupName
            Else
            ' They want to overwrite the name so come here update lastoff with the dup offset
            LastOff = ServiceNameArray(row, 2)
            ' Jump out of here and bypass all of the other updates and just write the code
            GoTo WriteVal
            End If
        End If
    Next row
    ' There was no issue so write the new name to the array
    ' First create the temp array with two additional rows, one for a blank selection and one to add the new name
    ReDim TempArray(1 To UBound(ServiceNameArray) + 2, 1 To 2)
    ' loop through the existing service name array and add the existing names and offsets to the array.
    For row = 1 To UBound(ServiceNameArray) Step 1
        ' Write the row and column. Start on the second row to leave a blank in the top row
        TempArray(row + 1, 1) = ServiceNameArray(row, 1)
        TempArray(row + 1, 2) = ServiceNameArray(row, 2)
        ' Capture what the last offset was, we will add 5 to this to calculate the offset for the new service name
        LastOff = ServiceNameArray(row, 2)
    Next row
    ' Write the new value to the array. Row will point to the last value in the array
    TempArray(row + 1, 1) = ServiceName
    ' Calculate and write the offset for that serivce. Each service requires five columns
    LastOff = LastOff + 5
    TempArray(row + 1, 2) = LastOff
    ' Find out the start and end cells, these will be used for the named range and to write the values in the named range
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(100, 1).Address
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow + 1, 1).Address
    ' Update the named range with the new service value
    ActiveWorkbook.Names("ServiceNames").RefersTo = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)
    ' Update the end cell to point to the last column of the array
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow + 1, 2).Address
    ' Write the service names to the sheet
    ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell) = TempArray
Else
    ' come here if there are no existing names
    ' Check to see if there is a named range, and delete it if so
    If ActiveWorkbook.Sheets("Drops").Cells(99, 1).Value <> "" Then ActiveWorkbook.Names.Delete
    ' First create the temp array with two additional rows, one for a blank selection and one to add the new name
    ReDim TempArray(1 To 2 + 3, 1 To 2)
    ' Write the service array size in the first row of the array. This will add number of rows in the service array in cell A99 to identify there are existing names and tell recall how many rows the array needs.
    TempArray(1, 1) = ServiceArraySize
    ' Write the new value to the array starting in row three to add a blank row at the top
    TempArray(3, 1) = ServiceName
    ' set lastoff to 1 and write the offset for this serivce.
    LastOff = 3
    TempArray(3, 2) = LastOff
    ' Find out the start and end cells, these will be used for the named range
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(100, 1).Address
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(101, 1).Address
    ' Update the named range with the new service value
    ActiveWorkbook.Names.Add Name:="ServiceNames", RefersTo:=ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)
    ' Update the start and end cells to write the full array and the x
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(99, 1).Address
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(101, 2).Address
    ' Write the service names to the sheet
    ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell) = TempArray
    ' Update the data validation in cell G4 with the named range
    ActiveWorkbook.Sheets("Scoping").Range("F4").Validation.Modify Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=ServiceNames"
    ActiveWorkbook.Sheets("Scoping").Range("F4").Validation.InputMessage = "Type new Service Name here or use the dropdown to select an existing service."
End If

WriteVal:
' Write the service values
' Where do we start writing the service values?
StartCell = ActiveWorkbook.Sheets("Drops").Cells(100, LastOff).Address
' Where is the end of the service values?
EndCell = Cells(UBound(ServiceArray) + 99, LastOff + 4).Address
' Save the values
ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell) = ServiceArray

' Come here if there was a duplicate
DupName:

End Sub
Private Sub DeleteSelection(ServiceName As String, Loc As Long, ErrCode As Long)
' When a selection is deleted the data will not be deleted it will only be removed from the data validation on the Scoping tab
' the data will remain and the name and index will be moved to the top of the data
Dim ServiceArray As Variant
Dim row As Long
Dim FoundName As Boolean
Dim StartCell As String
Dim EndCell As String
Dim ServiceNameArray As Variant
Dim EndRow As Long
Dim TempArray As Variant
Dim LastOff As Long
Dim NamePos As Long

' Start these with these values
FoundName = False
NamePos = 2

' Update the Service Name named range
' Check to see if there are any names saved
If ActiveWorkbook.Sheets("Drops").Cells(99, 1).Value <> "" Then
    ' There are names saved so find the last row
    EndRow = ActiveWorkbook.Sheets("Drops").Cells(ActiveWorkbook.Sheets("Drops").Rows.Count, "A").End(xlUp).row
    ' Size the service name array to the current array size
    ReDim ServiceNameArray(1 To EndRow - 100, 1 To 2)
    ' Find the beginning cell of the range starting in column A
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(101, 1).Address
    ' Identify where the end of the list is ending in column B
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow, 2).Address
    ' Get the existing values into the service name array
    ServiceNameArray = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)
    ' Create the temp array with one less row, to accomodate the existing names minus the one deleted
    ReDim TempArray(1 To UBound(ServiceNameArray) + 1, 1 To 2)
    ' loop through the existing service name array and add the existing names and offsets to the array.
    For row = 1 To UBound(ServiceNameArray) Step 1
        ' Check to see if the row is pointing to the name selected
        If ServiceNameArray(row, 1) <> ServiceName Then
            ' Write the row and column. Start on the second row to leave a blank in the top row
            TempArray(NamePos, 1) = ServiceNameArray(row, 1)
            TempArray(NamePos, 2) = ServiceNameArray(row, 2)
            ' Increment this
            NamePos = NamePos + 1
        Else
            ' Found the name so write the name and offset to just above the data
            ActiveWorkbook.Sheets("Drops").Cells(99, ServiceNameArray(row, 2)).Value = ServiceNameArray(row, 1)
            ActiveWorkbook.Sheets("Drops").Cells(99, ServiceNameArray(row, 2) + 1).Value = ServiceNameArray(row, 2)
            ' Set the found flag
            FoundName = True
        End If
    Next row
    ' Check to see if there was a name found
    If FoundName = False Then
        ' Notify the user of the missinig name and leave
        MsgBox ("The name selected was not found. Please select a name from the list using the dropdown.")
        GoTo NoNameFound
    End If
    ' Find out the start and end cells, these will be used for the named range and to write the values in the named range
    StartCell = ActiveWorkbook.Sheets("Drops").Cells(100, 1).Address
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow - 1, 1).Address
    ' Update the named range with the new service value
    ActiveWorkbook.Names("ServiceNames").RefersTo = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)
    ' Update the end cell to point to the last column of the array
    EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow, 2).Address
    ' Write the service names to the sheet
    ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell) = TempArray
Else
    ' come here if there are no names
    MsgBox ("There was no name provided. Please enter a Service Name to remove it")
End If

' Come here if there was no name
NoNameFound:

End Sub
Private Sub RecallSelection(ServiceName As String, Loc As Long, ErrCode As Long, CheckedArray As Variant)
Dim ServiceArray As Variant
Dim row As Long
Dim col As Long
Dim StartCell As String
Dim EndCell As String
Dim ServiceNameArray As Variant
Dim EndRow As Long
Dim TempArray As Variant
Dim LastOff As Long
Dim NamePos As Long
Dim ServiceArraySize As Long
Dim WriteColArray As Variant
Dim FoundName As Boolean

' Set this initial value
FoundName = False

' There are names saved so get the names into the service name array
EndRow = ActiveWorkbook.Sheets("Drops").Cells(ActiveWorkbook.Sheets("Drops").Rows.Count, "A").End(xlUp).row
' Size the service name array to the current array size
ReDim ServiceNameArray(1 To EndRow - 100, 1 To 2)
' Find the beginning cell of the range starting in column A
StartCell = ActiveWorkbook.Sheets("Drops").Cells(101, 1).Address
' Identify where the end of the list is ending in column B
EndCell = ActiveWorkbook.Sheets("Drops").Cells(EndRow, 2).Address
' Get the existing values into the service name array
ServiceNameArray = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)

' Loop through the names to find the offset
For row = 1 To UBound(ServiceNameArray) Step 1
    If ServiceNameArray(row, 1) = ServiceName Then
        ' Found the name
        NamePos = ServiceNameArray(row, 2)
        ' Update this
        FoundName = True
    End If
Next row

' Check to see if the name was found, if not leave
If FoundName = False Then GoTo NoNameFound

' How many rows are there in the named array
ServiceArraySize = ActiveWorkbook.Sheets("Drops").Range("A99").Value

' Size the service array to the number of rows in the service array. This number of rows in cell A99 on the drops tab (value saved by SaveSelection)
ReDim ServiceArray(1 To ServiceArraySize, 1 To 5)

' Get the saved service selections into the array
' Where does it start
StartCell = ActiveWorkbook.Sheets("Drops").Cells(100, NamePos).Address
' Where does it end
EndCell = ActiveWorkbook.Sheets("Drops").Cells(ServiceArraySize + 99, NamePos + 4).Address
' Get the existing values into the service name array
ServiceArray = ActiveWorkbook.Sheets("Drops").Range(StartCell, EndCell)

' To make writing a little more efficient set up an array with the column numbers of where to write the selections
ReDim WriteColArray(1 To 5)
' Populate the array with the column numbers to write
WriteColArray(1) = 14 ' Category Enable
WriteColArray(2) = 20 ' Sub-category Enable
WriteColArray(3) = 16 ' Category Selections
WriteColArray(4) = 3 ' SIG Detail
WriteColArray(5) = 22 ' Sub-category Selections

' We now have all of the elments in place to write the selections. Create a loop for the first two columns
' Check to see if the Category enable value changes from what is there
If ActiveWorkbook.Sheets("Scoping").Range("N4").Value <> ServiceArray(2, 2) Then
    ' Write the new value
    ActiveWorkbook.Sheets("Scoping").Cells(4, 14) = ServiceArray(2, 2)
    ' Update the sheet
    Call CatSlected(CheckedArray)
Else
' Don't change anything
End If

' Check to see if the sub category enable value changed from what is there
If ActiveWorkbook.Sheets("Scoping").Range("T4").Value <> ServiceArray(2, 4) Then
    ' Write the new value
    ActiveWorkbook.Sheets("Scoping").Cells(4, 20) = ServiceArray(2, 4)
    ' Update the sheet
    Call SubSelected(CheckedArray)
Else
' Don't change anything
End If

For col = 3 To 5 Step 2
    ' Check to see if there is anything to write
    If ServiceArray(1, col) > 0 Then
        ' There are lots to write so size the temp array
        ReDim TempArray(1 To UBound(ServiceArray) - 1, 1 To 2)
        ' Copy the values in the service array to the wirte array
        For row = 1 To UBound(ServiceArray) - 1 Step 1
            TempArray(row, 1) = ServiceArray(row + 1, col)
        Next row
        ' Where to start writing
        StartCell = ActiveWorkbook.Sheets("Scoping").Cells(4, WriteColArray(col)).Address
        ' Where to end writing
        EndCell = ActiveWorkbook.Sheets("Scoping").Cells(UBound(ServiceArray) + 2, WriteColArray(col)).Address
        ' Write the array
        ActiveWorkbook.Sheets("Scoping").Range(StartCell, EndCell) = TempArray
    Else
    ' Don't write anything just go to the next column
    End If
Next col

' Write the single value for the SIG level directly to the tab
ActiveWorkbook.Sheets("Scoping").Cells(4, 3) = ServiceArray(2, 1)

NoNameFound:

End Sub

Attribute VB_Name = "Sheet05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim ProtectState As Boolean
Dim SheetPW As String

' Get the sheet protection password from the Formula Notes tab
SheetPW = ActiveWorkbook.Worksheets("Drops").Range("A17").Value
' Autofilters don't work on protected sheets, so unprotect the sheet if it's protected
' Keep the value of the current sheet protection, we don't want to protect it if it's not protected when we finish
ProtectState = ActiveWorkbook.Worksheets("Dashboard").ProtectContents
' Only unprotect a protected sheet
If ProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Unprotect Password:=SheetPW
' Turn off all of the autofilters for the worksheet
ActiveWorkbook.Worksheets("Dashboard").AutoFilterMode = False
' Check for Master and Turn on the fitlers if it's not enabled
If ActiveWorkbook.Worksheets("Drops").Range("Master").Value <> "Master" Then ActiveWorkbook.Worksheets("Dashboard").Range("$G$4", "$G$33").AutoFilter Field:=1, Criteria1:="<>" 'column G
' Put the proctection back to where we found it
If ProtectState = True Then ActiveWorkbook.Worksheets("Dashboard").Protect Password:=SheetPW

End Sub
Attribute VB_Name = "Sheet07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet09"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Activate()
''--------------------------------------------------------------------
'' This sub is used to write the text "Yes" or "No" from the HL response
'' column to the response column. This is only used if there is a HL response
'' on the Business Info tab that needs to be written. No additional information
'' is written since there is no additional information on the Bus Info tab
''--------------------------------------------------------------------
''Dim LastRow As Long
''Dim row As Long
''Dim SheetType As Long
'
''Turn off screen updating
'Application.ScreenUpdating = False
'
'' Autofilters don't work on protected sheets, so unprotect the sheet if it's already protected
'' Get the value of the current sheet protection, we don't want to protect it if it's not protected now
'ProtectState = ActiveSheet.ProtectContents
'
'' Get the last row of the current sheet
'LastRow = ActiveSheet.UsedRange.Rows.Count
'
'' Check for for sheet password protection, if it's protected we need to unprotect before we can use filter.
'If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Formula Notes").Range("B44").Value
'
'' Turn off all of the autofilters for the worksheet
'ActiveSheet.AutoFilterMode = False
'
'' Check for the worksheet automation checkbox. If it's diabled then take off the filters and leave
'If ActiveSheet.Cells(2, 8).Value = "Disable" Then GoTo NoChange
'
'' and check for password protection and protect again
'If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Formula Notes").Range("B44").Value
'
'' Loop through the entire sheet to see if there is a value in the HL Ans column from the Bus Info tab. If there is
'' convert to text and write it
'For row = 5 To LastRow Step 1
'    If ActiveSheet.Cells(row, 16) > 0 Then
'        ' it's Yes or No so conver to text and write the text in the response the response can only be Yes or No
'        If ActiveSheet.Cells(row, 16) = 1 Then
'            ActiveSheet.Cells(row, 4) = "Yes"
'            Else
'            ActiveSheet.Cells(row, 4) = "No"
'        End If
'    End If
'Next row
'
'' Get the question levels into an array
'TotalRows = ActiveSheet.UsedRange.Rows.Count
'
'' Filter the tab on the values in the filter column
'ActiveSheet.Range(Cells(4, 29), Cells(TotalRows, 29)).AutoFilter
'ActiveSheet.Range(Cells(4, 29), Cells(TotalRows, 29)).AutoFilter Field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2
'
''Turn on screen updating
'Application.ScreenUpdating = True
'
'NoChange:
'
'End Sub
'Private Sub Worksheet_Change(ByVal Target As Range)
'Dim FormOff As Long
'
''Turn off screen updating
'Application.ScreenUpdating = False
'
'' Check to see what changed on the sheet. Only update if the response or maturity changed.
'If Target.Column < 4 Or Target.Column > 8 Then GoTo DoNothing
'
'' Autofilters don't work on protected sheets, so unprotect the sheet if it's already protected
'' Get the value of the current sheet protection state, we don't want to protect it if it's not protected now
'ProtectState = ActiveSheet.ProtectContents
'
'' Check for for sheet password protection, if it's protected we need to unprotect before we can mess with the autofilters.
'' We'll check this once we have updated the sheet at the end of this sub and put it back on if necessary
'If ProtectState = True Then ActiveSheet.Unprotect Password:=Worksheets("Formula Notes").Range("B44").Value
'
'' Turn off all of the autofilters for the worksheet
'ActiveSheet.AutoFilterMode = False
'
'' Check for the worksheet automation checkbox. If it's diabled then take off the filters and leave
'If ActiveSheet.Cells(2, 8).Value = "Disable" Then GoTo DontFilter
'
'' This code will change the background in the maturity field relative to the response value
'' First check the column, if it's not the response column do nothing
'' Note: The offset below is relative to the target column
'On Error Resume Next
'If Target.Column = 4 Then
'    ' Check for a 1 in cloumn 30 (AD). This identifies a hard coded value
'    If Target.Offset(0, 32) = 1 Then
'        ' Don't do anything since this is a value not changed by the response
'        Else
'        ' There was no value so check what the user changed the response to
'        If Target.Value = "No" Or Target.Value = "N/A" Then
'            ' Value changed to no or n/a so clear out the validation, fill and add a 1 to column 30 (AD)
'            Target.Offset(0, 1).Interior.Color = xlNone
'            Target.Offset(0, 1).Validation.Delete
'            Target.Offset(0, 1).Value = ""
'            Target.Offset(0, 26).Value = 2
'        Else
'            ' Check for a 2 in column 30 if there is one then copy otherwise do nothing
'            If Target.Offset(0, 26) = 2 Then
'                Target.Offset(0, 1).Interior.Color = RGB(204, 255, 255)
'                With Target.Offset(0, 1).Validation
'                    .Delete
'                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=ScaledLarge"
'                    .IgnoreBlank = True
'                    .InCellDropdown = True
'                    .InputTitle = "Select 1 - 5"
'                    .ErrorTitle = ""
'                    .InputMessage = "1 - Informal, ad hoc process without formal implementation" & Chr(10) & " 2 - Partially in place with no approved plans to further implement" & Chr(10) & "3 - Partially in place with approved plans to further implement" & Chr(10) & "4 - In place with exclusions" & Chr(10) & "5 - In place with no exclus"
'                    .ErrorMessage = ""
'                    .ShowInput = True
'                    .ShowError = True
'                End With
'                Target.Offset(0, 26).Value = ""
'            Else
'            ' Do nothing
'            End If
'        End If
'    ' Come here if the Maturity N/A field is set to 1
'    End If
'End If
'
'' Get the question levels into an array
'TotalRows = ActiveSheet.UsedRange.Rows.Count
'
'' Filter the tab on the values in the filter column
'ActiveSheet.Range(Cells(4, 29), Cells(TotalRows, 29)).AutoFilter
'ActiveSheet.Range(Cells(4, 29), Cells(TotalRows, 29)).AutoFilter Field:=1, Criteria1:=1, Operator:=xlOr, Criteria2:=2
'
'DontFilter:
'
'' Check to see if the tab was password protected, if it was then re-protect the sheet
'If ProtectState = True Then ActiveSheet.Protect Password:=Worksheets("Formula Notes").Range("B44").Value
'
'DoNothing:
'
'' Give control back to the user
'Application.ScreenUpdating = True
'
'End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub


Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub

Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If ActiveWorkbook.Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime the sheet is selected
Call SheetSelected(FormOff)

SkipFilter:

End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim FormOff As Long

' Check to see if maintenance mode is enabled. If it is bypass the autofilters
If Worksheets("Drops").Range("Maintenance").Value = True Then GoTo SkipFilter

' Set this to the column where the autofilters will be applied, tabs A - U = 29
FormOff = 29
' Call this module anytime a cell changes on the sheet, this will update the autofilters to display the correct questions.
Call SheetDelta(FormOff, Target)

SkipFilter:

End Sub
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet99"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{65F0DE4C-B47E-420B-B1D7-33E8331277B6}{33255230-2092-4FC4-92BB-4CEB86CD79C3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Automation_Click()

End Sub

Private Sub ColHide_Click()

End Sub

Private Sub CommandButton1_Click()

Call ProtectUnprotect(TextBox1, ColHide, Protect, Automation, DeleteCont)

Unload Me

End Sub

Private Sub HideCol_Click()

End Sub

Private Sub protect_Click()

End Sub

Private Sub DeleteCont_Click()

End Sub


INQUEST-PP=macro
