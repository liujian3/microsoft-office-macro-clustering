Attribute VB_Name = "MyWorkspace"
Attribute VB_Base = "0{9DD1EC79-69A4-41F5-99B1-D844DE65D69C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function GetWorkspaceVersion(l As Long) As Long
'!!! DO NOT CHANGE OR DELETE THIS FUNCTION !!!
    GetWorkspaceVersion = 4
    'Version 4 29.01.2013 AR: Updated for zenon 7.10
End Function


Private Sub ZenWorkspace_OnElementDoubleClicked(ByVal obElement As Element)

#If Win64 Then
    Exit Sub
#Else
    'Show Symbol Wizard for linked Symbols,
    'if the symbol has outlined properties.
    If obElement.Type = 130 Then
        'symbol...
        If SymbolHasProps(obElement) = True Then
            'start wizard
            frmSymbol.InitWizard obElement
            frmSymbol.Show
        End If
    End If
    #End If
End Sub

Function SymbolHasProps(zELE As Element) As Boolean
    Dim v As Variant
    Dim i As Integer
    Dim s As String
    'check DynProperties of Symbol...
    v = zELE.DynPropertiesEnum("")
    For i = 0 To UBound(v)
        s = v(i)
        s = Mid(s, 1, InStr(1, s, ",") - 1)
        If InStr(1, s, "\") <> 0 Then
            SymbolHasProps = True
            Exit Function
        End If
    Next i
End Function

Private Sub ZenWorkspace_OnObjectCreated(ByVal obObject As Object)
'this Event is fired, when a new object is created within a project...
Dim strObjectType As String
Dim obTemplate As Template
Dim obPicture As DynPicture
Dim obFunction As RtFunction
Dim obElement As Element
Dim obUser As User
Dim obRema As Rema
Dim obScript As Script
Dim obEdLimit As EdLimit
Dim obRGMRecipe As RGMRecipe
Dim obRecipe As Recipe
Dim ObVarAssignment As VarAssignment
Dim obVariable As Variable
Dim obTimeFunction As TimeFunction
Dim ErrH As Label
On Error GoTo ErrH
    'depending to the type of the created object, different actions can be done...
    strObjectType = TypeName(obObject)
    Select Case strObjectType
        Case "ITemplate"
            Set obTemplate = obObject
            Debug.Print "Template created......> " & obTemplate.Name
            Debug.Print "----- in Project......> " & obTemplate.Parent.Parent.Name
        Case "IDynPicture"
            Set obPicture = obObject
            Debug.Print "Picture created.......> " & obPicture.Name
            Debug.Print "---- in Project.......> " & obPicture.Parent.Parent.Name
        Case "IRtFunction"
            Set obFunction = obObject
            Debug.Print "Function created......> " & obFunction.Name
            Debug.Print "----- in Project......> " & obFunction.Parent.Parent.Name
        Case "IElement"
            Set obElement = obObject
            Debug.Print "Element created.......> " & obElement.Name
            Debug.Print "---- in Picture.......> " & obElement.Parent.Parent.Name
            Debug.Print "---- in Project.......> " & obElement.Parent.Parent.Parent.Parent.Name
        Case "IScript"
            Set obScript = obObject
            Debug.Print "Script created........> " & obScript.Name
            Debug.Print "--- in Project........> " & obScript.Parent.Parent.Name
        Case "IRema"
            Set obRema = obObject
            Debug.Print "REMA created..........> " & obRema.Name
            Debug.Print "- in Project..........> " & obRema.Parent.Parent.Name
        Case "IUser"
            Set obUser = obObject
            Debug.Print "User created..........> " & obUser.Name
            Debug.Print "- in Project..........> " & obUser.Parent.Parent.Name
        Case "IEdLimit"
            Set obEdLimit = obObject
            Debug.Print "Limit created.........> "
            Debug.Print "---- Variable.........> " & obEdLimit.Parent.Name
            Debug.Print "-- in Project.........> " & obEdLimit.Parent.Parent.Parent.Name
        Case "IRGMRecipe"
            Set obRGMRecipe = obObject
            Debug.Print "RMG Recipe created....> " & obRGMRecipe.DynProperties("RecipeName")
            Debug.Print "----- in RGM Group....> " & obRGMRecipe.Parent.DynProperties("Name")
            Debug.Print "------- in Project....> " & obRGMRecipe.Parent.Parent.Parent.Name
        Case "IRecipe"
            Set obRecipe = obObject
            Debug.Print "Recipe created........> " & obRecipe.Name
            Debug.Print "--- in Project........> " & obRecipe.Parent.Parent.Name
        Case "ITimeFunction"
            Set obTimeFunction = obObject
            Debug.Print "TimeFunction created..> " & obTimeFunction.Name
            Debug.Print "--------- in Project..> " & obTimeFunction.Parent.Parent.Name
        Case "IVarAssignment"
            Set ObVarAssignment = obObject
            Debug.Print "VarAssignment created.> " & ObVarAssignment.Name
            Debug.Print "---------- in Project.> " & ObVarAssignment.Parent.Parent.Name
        Case "IVariable"
            Set obVariable = obObject
            Debug.Print "Variable created......> " & obVariable.Name
            Debug.Print "----- in Project......> " & obVariable.Parent.Parent.Name
        Case Else
            Debug.Print strObjectType
    End Select
    Exit Sub
ErrH:
    Debug.Print "[ERROR] " & Err.Number & " - " & Err.Description
    Resume Next
End Sub

Private Sub ZenWorkspace_OnPreBuild(ByVal ObProject As IProject)
    Debug.Print Now & " Runtimefiles will be built... [" & ObProject.Name & "]"
End Sub
Private Sub ZenWorkspace_OnPostBuild(ByVal ObProject As IProject)
    Debug.Print Now & " Runtimefiles were built... [" & ObProject.Name & "]"
End Sub

Private Sub ZenWorkspace_OnPreTransport(ByVal ObProject As IProject)
    Debug.Print Now & " Remote-Tranport started... [" & ObProject.Name & "]"
End Sub
Private Sub ZenWorkspace_OnPostTransport(ByVal ObProject As IProject, ByVal bSuccess As Boolean)
    If bSuccess = True Then
        Debug.Print Now & " Remote-Tranport succeeded... [" & ObProject.Name & "]"
    Else
        Debug.Print Now & " Remote-Tranport failed... [" & ObProject.Name & "]"
    End If
End Sub

Private Sub ZenWorkspace_OnRTConnect(ByVal ObProject As IProject)
    Debug.Print Now & " Remote-Tranport connected... [" & ObProject.Name & "]"
End Sub
Private Sub ZenWorkspace_OnRTConnectionFailed(ByVal ObProject As IProject)
    Debug.Print Now & " Remote-Tranport connection failed... [" & ObProject.Name & "]"
End Sub
Private Sub ZenWorkspace_OnRTConnectionTerminated(ByVal ObProject As IProject)
    Debug.Print Now & " Remote-Tranport connection terminated... [" & ObProject.Name & "]"
End Sub


Attribute VB_Name = "frmCreateVariables"
Attribute VB_Base = "0{DFCE3D05-8D6F-4A11-863C-FD93D095993F}{D69656CF-CABB-40FD-91C4-AB099CBB2BD3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
    ' *                               Create Variable  Wizard                                    *
    ' *********************************************************************************************
    ' *                      Version:             9                                              *
    ' *                      Created:             31.01.2011                                      *
    ' *                      Created by:          unknown                                         *
    ' *                      Last change:         25.03.2013                                      *
    ' *                      Last change by:      Alexander Resinger                              *
    ' *                      Optimized for:       7.10                                            *
    ' *********************************************************************************************
    ' *    Description:       Works f|fffd|r 32bit and 64 bit                                          *
    ' *                                                                                           *
    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
Option Explicit

Private m_iCurrentPage As Integer
Private m_iPreviousPage As Integer
Private m_obDriver As Driver
Private m_obVarType As VarType
Private m_nChannelType As Integer

Private Const COLOR_DARKGREY As Long = &H808080
Private Const COLOR_GREEN As Long = vbGreen
Private Const strSHP_MAP As String = "shpMap"
Private Const strLBL_MAP As String = "lblMap"


'*************************************************************************************
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardName() As String
    GetWizardName = "Variable creation wizard"
End Function
Public Function GetWizardInfo() As String
    GetWizardInfo = "This wizard can create a number of variables for the drivers available in your project." & _
                    vbCrLf & "> NOT FOR MULTIUSER-PROJECTS <"
End Function
Public Function GetWizardCategory() As String
    GetWizardCategory = "Variables"
End Function
Public Function IsZenOnWizard() As Boolean
    IsZenOnWizard = True
End Function
Public Function GetWizardVersion() As Integer
    GetWizardVersion = 9
    '(3) 11.09.2006 RF: UserForm_Initialize replaced with UserForm_Activate
    '(4) 05.03.2007 RF: removed some Channeltypes from list, only standard is shown...
    '(5) 04.06.2007 RF: REDESIGNED
    '(6) 24.11.2008 RF: REDESIGNED
    '(7) 09.04.2009 GH: adapted for 6.50
    '(8) 03.11.2009 RF: REDESIGNED
    '(9) 28.01.2013 AR: Update for 7.10
End Function
'*************************************************************************************



'****************************************************************************
' Methode:      cbDriver_Change
' Parameter:
' Description:  Driver selection changed - re-initialising the types
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub cbDriver_Change()
    cmdNext.Enabled = True
    
    Set m_obDriver = MyWorkspace.ActiveDocument.Drivers.Item(cbDriver.value)
    If (Not m_obDriver Is Nothing) Then
        InitializeVarType
        InitializeChannelType
    End If
    
End Sub

Private Sub cbKanaltyp_Change()
    m_nChannelType = GetChannelType(cbKanaltyp.value)
End Sub

Private Sub cbVarType_Change()
    Set m_obVarType = MyWorkspace.ActiveDocument.VarTypes.Item(cbVarType.value)
End Sub

'****************************************************************************
' Methode:      cmdBack_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub cmdBack_Click()
    If m_iCurrentPage <> 0 Then
        m_iPreviousPage = m_iCurrentPage
        mpgWizardPage.value = m_iCurrentPage - 1
    End If
End Sub

'****************************************************************************
' Methode:      cmdCancel_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub cmdCancel_Click()
    Unload Me
End Sub

'****************************************************************************
' Methode:      cmdFinish_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub cmdFinish_Click()
    
    On Error GoTo Error
    If (cbVarType.ListIndex = -1) Then
        MsgBox "Please select a data type"
        cbVarType.SetFocus
        Exit Sub
    End If
    
    If (cbKanaltyp.ListIndex = -1) Then
        MsgBox "Please select a variable type"
        cbKanaltyp.SetFocus
        Exit Sub
    End If
    
    If (txtStart.value = "" Or txtCount.value = "" Or txtStep.value = "") Then
        MsgBox "Please enter a starting offset, amount of variables and the increment"
        txtStart.SetFocus
    End If
    
    If (m_obVarType Is Nothing) Then
        MsgBox "Data type " + cbVarType.Name + " doesn't exist!"
        Exit Sub
    End If
    
    Dim nPrvMousePtr As Integer
    nPrvMousePtr = MousePointer
    MousePointer = fmMousePointerHourGlass
    DoEvents
    
    Dim strName As String
    Dim nIndex As Long, nVarIndex As Integer
    Dim nStartOff As Long, nStep As Integer
        
    nVarIndex = 1
    nStartOff = CLng(txtStart.value)
    nStep = CLng(txtStep.value)
    For nIndex = 0 To CLng(txtCount.value - 1)
        Dim obVar As Variable
        strName = txtName.value + "_" + CStr(nIndex + 1)
        
        '*** Guaranteeing uniqueness of the variable name
        Dim bResult As Boolean
        bResult = False
        Do
            Set obVar = MyWorkspace.ActiveDocument.Variables.Item(strName)
            If (obVar Is Nothing) Then
                bResult = True
            Else
                nVarIndex = nVarIndex + 1
                strName = txtName.value + "_" + CStr(nVarIndex)
            End If
        Loop While bResult = False
        
        '*** Create variable
        Set obVar = MyWorkspace.ActiveDocument.Variables.CreateVar(strName, m_obDriver, m_nChannelType, m_obVarType)
        If (Not obVar Is Nothing) Then
            If UCase(m_obDriver.Name) <> "INTERN" Then
                obVar.Offset = nStartOff
                nStartOff = nStartOff + nStep
            End If
        Else
            MsgBox "Creation of variable " + strName + " failed: The driver doesn't support the variable type"
            cbKanaltyp.SetFocus
            MousePointer = nPrvMousePtr
            Exit Sub
        End If
    Next nIndex
    
    MousePointer = nPrvMousePtr
    
    Unload Me
    Exit Sub
Error:
    MousePointer = nPrvMousePtr
    MsgBox "Error occurs: " + Err.Description + " Source " + Err.Source
End Sub

'****************************************************************************
' Methode:      cmdNext_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub cmdNext_Click()
    If (m_obDriver Is Nothing) And mpgWizardPage.value = 1 Then
        MsgBox "Please select a driver"
        mpgWizardPage.value = 1
        cbDriver.SetFocus
        Exit Sub
    ElseIf (txtName.value = "") And mpgWizardPage.value = 1 Then
        MsgBox "You must enter a name for the variables!"
        mpgWizardPage.value = 1
        txtName.SetFocus
        Exit Sub
    End If

    If m_iCurrentPage < 4 Then
        m_iPreviousPage = m_iCurrentPage
        mpgWizardPage.value = m_iCurrentPage + 1
    End If
End Sub

Private Sub mpgWizardPage_Click(ByVal index As Long)
    If (m_obDriver Is Nothing) And mpgWizardPage.value > 1 Then
        MsgBox "Please select a driver"
        mpgWizardPage.value = 1
        cbDriver.SetFocus
        Exit Sub
    ElseIf (txtName.value = "") And mpgWizardPage.value > 1 Then
        MsgBox "You must enter a name for the variables!"
        mpgWizardPage.value = 1
        txtName.SetFocus
        Exit Sub
    End If
End Sub

'****************************************************************************
' Methode:      UserForm_Initialize()
' Parameter:
' Description:  Initialisierung des Formulars
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub UserForm_Activate()
    If InStr(1, ApplicationED.Name, "zenon") <> 0 Then
        Header.Picture = Image_zenOn.Picture
    Else
        Header.Picture = Image_OEM.Picture
    End If
    cmdBack.Visible = False
    cmdFinish.Enabled = False
    m_iCurrentPage = 0
    m_iPreviousPage = 0
    mpgWizardPage.value = m_iCurrentPage
        
    txtStart.value = CStr(FindHighestOffsetVar + 1)

    InitializeDriver
End Sub

Private Sub cmdNext_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdNext.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdBack_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdFinish_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdFinish.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdCancel.BackColor = rgb(160, 234, 255)
End Sub
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(232, 232, 232)
    cmdNext.BackColor = rgb(232, 232, 232)
    cmdFinish.BackColor = rgb(232, 232, 232)
    cmdCancel.BackColor = rgb(232, 232, 232)
End Sub

'****************************************************************************
' Methode:      Private Sub FindHighestOffsetVar()
' Parameter:
' Description:  Searching for variable with the highest offset
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Function FindHighestOffsetVar() As Long
    On Error GoTo Error
    
    Dim nIndex As Long, nOffset As Long
    For nIndex = 0 To MyWorkspace.ActiveDocument.Variables.Count - 1
        Dim obVar As Variable
        Set obVar = MyWorkspace.ActiveDocument.Variables.Item(nIndex)
        If (Not obVar Is Nothing) Then
            'Dim nTemp As Long
            'nTemp = obVar.DynProperties("Offset")
            On Error GoTo ErrStruct
            If (obVar.Offset > nOffset) Then
                nOffset = obVar.Offset
            End If
ErrStruct:
        End If
    Next nIndex
    
    FindHighestOffsetVar = nOffset
    Exit Function
Error:
    MsgBox "Error occurs: " + Err.Description + " Source " + Err.Source
End Function
'****************************************************************************
' Methode:      Private Sub InitializeVarType()
' Parameter:
' Description:  Initialising the combo-box with the variable types
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub InitializeVarType()
    On Error GoTo Error
    
    If (Not m_obDriver Is Nothing) Then
        
        cbVarType.Clear
        
        Dim nIndex As Long, nSelect As Integer
        For nIndex = 0 To MyWorkspace.ActiveDocument.VarTypes.Count() - 1
            Dim obVarType As VarType
            Set obVarType = MyWorkspace.ActiveDocument.VarTypes.Item(nIndex)
            If (Not obVarType Is Nothing And obVarType.IsSimple = True) Then
                cbVarType.AddItem obVarType.Name
                If (obVarType.Name = "INT") Then
                    nSelect = nIndex
                End If
            End If
        Next nIndex
        
        cbVarType.ListIndex = nSelect
    End If

    Exit Sub
Error:
    MsgBox "Error occurs: " + Err.Description + " Source " + Err.Source
End Sub

'****************************************************************************
' Methode:      Private Function GetChannelType() As tpKanaltypes
' Parameter:    strType As String...Ausgew|fffd|hlter String
' Description:  Determining constants for the selected channel type
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Function GetChannelType(strType As String) As Integer

    Select Case strType
        Case "Control status"
            GetChannelType = tpControlStatus
        Case "AD-Channel"
            GetChannelType = tpAdChan
        Case "DA-Channel"
            GetChannelType = tpDaChan
        Case "Digital"
            GetChannelType = tpDigital
        Case "Filter"
            GetChannelType = tpFilter
        Case "Strings"
            GetChannelType = tpStrings
        Case "Config-Def"
            GetChannelType = tpConfigDef
        Case "Virtual"
            GetChannelType = tpVirtuell
        Case "PLC marker"
            GetChannelType = tpSPSMerker
        Case "Special marker"
            GetChannelType = tpSonderMerker
        Case "Input"
            GetChannelType = tpSPSEingang
        Case "Output"
            GetChannelType = tpSPSAusgang
        Case "Timer Event"
            GetChannelType = tpTimerEvent
        Case "Trigger Event"
            GetChannelType = tpTriggerEvent
        Case "Initfile"
            GetChannelType = tpInitFile
        Case "Data block"
            GetChannelType = tpDataBlock
        Case "Terminal"
            GetChannelType = tpTerminal
        Case "Virtual online"
            GetChannelType = tpVirtuellOnlBerechnen
        Case "Datatakerchan"
            GetChannelType = tpDataTakerChan
        Case "Program"
            GetChannelType = tpProgram
        Case "PLC data register"
            GetChannelType = tpSPSDatenRegister
        Case "PLC file register"
            GetChannelType = tpSPSFileRegister
        Case "Time"
            GetChannelType = tpSPSTimer
        Case "Counter"
            GetChannelType = tpSPSZaehler
        Case "Status"
            GetChannelType = tpHWStatus
        Case "Datablock"
            GetChannelType = tpDataBlock
        Case "RT object"
            GetChannelType = tpEzObjekt
        Case "System variable"
            GetChannelType = tpSystemVariable
        Case "Ext. Datablock"
            GetChannelType = tpExBaustein
        Case "Driver variable"
            GetChannelType = tpDriverVariable
        Case "Special marker 1"
            GetChannelType = tpSonderMerker1
        Case "Internal variable"
            GetChannelType = tpSystemVariable
    End Select
    
End Function
'****************************************************************************
' Methode:      Private Sub InitializeChannelType()
' Parameter:
' Description:  Initialize the channel types
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub InitializeChannelType()
    On Error GoTo Error
    cbKanaltyp.Clear
    If UCase(m_obDriver.Name) <> "INTERN" Then
    '    cbKanaltyp.AddItem "Control status"     '> NOT NEEDED
    '    cbKanaltyp.AddItem "AD-Channel"         '> NOT NEEDED
    '    cbKanaltyp.AddItem "DA-Channel"         '> NOT NEEDED
    '    cbKanaltyp.AddItem "Digital"            '> NOT NEEDED
    '    cbKanaltyp.AddItem "Filter"             '> NOT NEEDED
    '    cbKanaltyp.AddItem "Strings"            '> NOT NEEDED
    '    cbKanaltyp.AddItem "Config-Def"         '> NOT NEEDED
    '    cbKanaltyp.AddItem "Virtual"            '> NOT NEEDED
        cbKanaltyp.AddItem "PLC marker"
    '    cbKanaltyp.AddItem "Special marker"     '> NOT NEEDED
        cbKanaltyp.AddItem "Input"
        cbKanaltyp.AddItem "Output"
    '    cbKanaltyp.AddItem "Timer Event"        '> NOT NEEDED
    '    cbKanaltyp.AddItem "Trigger Event"      '> NOT NEEDED
    '    cbKanaltyp.AddItem "Initfile"           '> NOT NEEDED
        cbKanaltyp.AddItem "Data block"
    '    cbKanaltyp.AddItem "Terminal"           '> NOT NEEDED
    '    cbKanaltyp.AddItem "Virtual online"     '> NOT NEEDED
    '    cbKanaltyp.AddItem "Datatakerchan"      '> NOT NEEDED
    '    cbKanaltyp.AddItem "Program"            '> NOT NEEDED
    '    cbKanaltyp.AddItem "PLC data register"  '> NOT NEEDED
    '    cbKanaltyp.AddItem "PLC file register"  '> NOT NEEDED
    '    cbKanaltyp.AddItem "Time"               '> NOT NEEDED
    '    cbKanaltyp.AddItem "Counter"            '> NOT NEEDED
    '    cbKanaltyp.AddItem "Status"             '> NOT NEEDED
    '    cbKanaltyp.AddItem "Datablock"          '> NOT NEEDED
    '    cbKanaltyp.AddItem "RT object"          '> NOT NEEDED
    '    cbKanaltyp.AddItem "System variable"    '> NOT NEEDED
    '    cbKanaltyp.AddItem "Ext. Datablock"     '> NOT NEEDED
    '    cbKanaltyp.AddItem "Driver variable"    '> NOT NEEDED
    '    cbKanaltyp.AddItem "Special marker 1"   '> NOT NEEDED
    Else
        cbKanaltyp.AddItem "Internal variable"  '> NUR INTERN
    End If
    cbKanaltyp.ListIndex = 0
    Exit Sub
Error:
    MsgBox "Error occurs: " + Err.Description + " Source " + Err.Source
End Sub

'****************************************************************************
' Methode:      Private Sub InitializeDriver()
' Parameter:
' Description:  Initialize the combobox with the drivers
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub InitializeDriver()
    On Error GoTo Error
    
    cbDriver.Clear
    
    Dim nIndex As Long
    For nIndex = 0 To MyWorkspace.ActiveDocument.Drivers.Count - 1
        Dim obDriver As Driver
        Set obDriver = MyWorkspace.ActiveDocument.Drivers.Item(nIndex)
        If (Not obDriver Is Nothing) Then
            If UCase(obDriver.Name) <> "MATHDR32" And UCase(obDriver.Name) <> "SYSDRV" Then
                cbDriver.AddItem obDriver.Identification
            End If
        End If
    Next nIndex
    
    If (cbDriver.ListCount > 0) Then
        cbDriver.ListIndex = 0
    End If
    
    Exit Sub
Error:
    MsgBox "Error occurs: " + Err.Description + " Source " + Err.Source
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Unload Me
End Sub

'****************************************************************************
' Methode:      MpgWizardPage_Change
' Parameter:
' Description:  The register of the tab element has been changed (with the button Back/Next).
'               On switching the new of the form has to be changed, the current step has to be
'               coloured and the buttons have to be de/activated depending on the position.
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub mpgWizardPage_Change()
    With frmCreateVariables
        m_iCurrentPage = mpgWizardPage.value
        
        Select Case m_iCurrentPage
            Case 0
                .cmdBack.Visible = False
                .cmdNext.Visible = True
                .cmdFinish.Enabled = False
            Case 1
                .cmdBack.Visible = True
                .cmdNext.Visible = True
                .cmdFinish.Enabled = False
            Case 2
                .cmdBack.Visible = True
                .cmdNext.Visible = False
                .cmdFinish.Enabled = True
        End Select
    End With
End Sub

'****************************************************************************
' Methode:      lblMap0_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub lblMap0_Click()
    m_iPreviousPage = m_iCurrentPage
    mpgWizardPage.value = 0
End Sub

'****************************************************************************
' Methode:      lblMap1_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub lblMap1_Click()
    m_iPreviousPage = m_iCurrentPage
    mpgWizardPage.value = 1
End Sub

'****************************************************************************
' Methode:      shpMap0_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub shpMap0_Click()
    m_iPreviousPage = m_iCurrentPage
    mpgWizardPage.value = 0
End Sub

'****************************************************************************
' Methode:      shpMap1_Click
' Parameter:
' Description:
' Autor:        Scharfetter Matthias    Datum:  06.08.2003
'****************************************************************************
Private Sub shpMap1_Click()
    m_iPreviousPage = m_iCurrentPage
    mpgWizardPage.value = 1
End Sub

Attribute VB_Name = "frmDocuWizardEx"
Attribute VB_Base = "0{1E64B8B1-CA4F-4E52-B762-1EBD7850FC9F}{F4987EA5-F77C-4199-AB17-E113C9DF56C1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
    ' *                                  Documentation-Wizard                                    *
    ' *********************************************************************************************
    ' *                      Version:             14                                              *
    ' *                      Created:             31.01.2011                                      *
    ' *                      Created by:          unknown                                         *
    ' *                      Last change:         25.03.2013                                      *
    ' *                      Last change by:      Alexander Resinger                              *
    ' *                      Optimized for:       7.10                                            *
    ' *********************************************************************************************
    ' *    Description:                Only for zenon ED 32bit                                    *
    ' *                                                                                           *
    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
Option Explicit

#If Not Win64 Then
    Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" ( _
        ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, _
        ByVal lpString As Any, _
        ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" ( _
        ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, _
        ByVal lpDefault As String, _
        ByVal lpReturnedString As String, _
        ByVal nSize As Long, _
        ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
        ByVal hwnd As Long, ByVal lpOperation As String, _
        ByVal lpFile As String, _
        ByVal lpParameters As String, _
        ByVal lpDirectory As String, _
        ByVal nShowCmd As Long) As Long
    Private Declare PtrSafe Function GetDesktopWindow Lib "user32" () As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" ( _
        ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, _
        ByVal lpString As Any, _
        ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" ( _
        ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, _
        ByVal lpDefault As String, _
        ByVal lpReturnedString As String, _
        ByVal nSize As Long, _
        ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
        ByVal hwnd As Long, _
        ByVal lpOperation As String, _
        ByVal lpFile As String, _
        ByVal lpParameters As String, _
        ByVal lpDirectory As String, _
        ByVal nShowCmd As Long) As Long
    Private Declare PtrSafe Function GetDesktopWindow Lib "user32" () As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If
Public Enum OpenUrlShowConstants
  swHide = 0
  swNormal = 1
  swShowMaximized = 3
  swShowMinimized = 2
  swShowMinNoAcive = 7
End Enum

Private m_bWindowsCE As Boolean             'Indicates whether the current project is a Windows CE project.
Private PR_strDestination As String             'Contains Output path
Private PR_strDestinationDefaultValue As Boolean
Private PR_strMyDocuments As String
Private PR_obProject As Project
Private PR_PictureTreeParents As String
Private PR_PictureTreeHasChildren As String
Private PR_PictureTreeFoundPictures As String
Private PR_Var_PropertiesForVariables As Variant
Private PR_Var_PropertiesForPictures As Variant
Private XSLPictureTreeCtrlBase As MSXML2.IXMLDOMElement
Private nLoopedElements As Integer
Private strElementsForTable As String
Private strElementsForTableHeader As String
Private strElementsForTable_link As String
Private nLoopedMenuItems As Integer
Private strMenuItemsForTable As String
Private strMenuItemsForTableHeaders As String
Private strVarTypesForTable As String
Private strVarTypesForTableHeader As String
Private strVarTypesAlreadyInTable As String
Private strVarTypesForTableLinks As String
Private nLoopedVarTypes As Integer
Private nElementID As Integer
Private m_bXML As Boolean                   'Output format XML or HTML
Private nCounterChapters As Integer
Private nCounterSubChapters As Integer
Private nID As Integer
Private nCurColor As Integer
Private nGetNewColor As Integer
Private Indexparent As MSXML2.IXMLDOMElement
Private astrVariableUsage As Variant
Private nCurVUArraySize As Integer
Private nCurDTLArraySize As Integer
Private astrFunctionUsage As Variant
Private nCurFUArraySize As Integer
Private astrPictureTypes As Variant
Private astrFunctionTypes As Variant
Private astrElementTypes As Variant
Private astrProps_MenuItems As Variant
Private strWantedPropertiesElement As String
Private strWantedPropertiesElementFromWizard As String
Private strArrWantedPropertiesElements() As String
Private nSelectedCountElements As Integer
Private strDatatypesToCheck As String
Private curXMLDoc As MSXML2.DOMDocument
Private curXMLItem As MSXML2.IXMLDOMElement
Private strVariablesArray() As String
Private strFileNamesArray() As String
Private strCurColor As String

'Declarations for "GetPath" used to get the MyDocuments-Folder
#If Not Win64 Then
    Private Declare PtrSafe Function SHGetSpecialFolderPath _
        Lib "shell32.dll" _
        Alias "SHGetSpecialFolderPathA" _
        (ByVal hwnd As Long, _
        ByVal lpszPath As String, _
        ByVal nFolder As Integer, _
        ByVal fCreate As Boolean) As Boolean
    Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32.dll" _
        (ByVal hMem As Long)
    Private Declare PtrSafe Function lstrcat Lib "kernel32" _
       Alias "lstrcatA" (ByVal lpString1 As String, _
       ByVal lpString2 As String) As Long
    Private Declare PtrSafe Function SHGetPathFromIDList Lib "shell32" _
       (ByVal pidList As Long, ByVal lpBuffer As String) As Long
    Private Declare PtrSafe Function GetActiveWindow Lib "user32" () _
      As Long
   #Else
       Private Declare PtrSafe Function SHGetSpecialFolderPath _
        Lib "shell32.dll" _
        Alias "SHGetSpecialFolderPathA" _
        (ByVal hwnd As Long, _
        ByVal lpszPath As String, _
        ByVal nFolder As Integer, _
        ByVal fCreate As Boolean) As Boolean
    Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32.dll" _
        (ByVal hMem As Long)
    Private Declare PtrSafe Function lstrcat Lib "kernel32" _
       Alias "lstrcatA" (ByVal lpString1 As String, _
       ByVal lpString2 As String) As Long
    Private Declare PtrSafe Function SHGetPathFromIDList Lib "shell32" _
       (ByVal pidList As Long, ByVal lpBuffer As String) As Long
    Private Declare PtrSafe Function GetActiveWindow Lib "user32" () _
      As Long
   #End If
   
          Private Const CSIDL_PERSONAL = &H5
    Private Const BIF_RETURNONLYFSDIRS = 1
    Private Const MAX_PATH = 260


'Folders for Wizard
    Const C_PATHFOLDER_SYSTEM = "System"
    Const C_PATHFOLDER_SCRIPTS = "Scripts"
    Const C_PATHFILE_SCRIPTS = C_PATHFOLDER_SCRIPTS & "\Scripts.html"
    Const C_PATHFOLDER_PROJECTINFO = "Projectdetails"
    Const C_PATHFILE_PROJECTINFO = C_PATHFOLDER_PROJECTINFO & "\Projectdetails.html"
    Const C_PATHFOLDER_VARIABLES = "Variables"
    Const C_PATHFILE_VARIABLES_MAIN = C_PATHFOLDER_VARIABLES & "\Variables.html"
    Const C_PATHFILE_VARIABLES_PARTNAMING = C_PATHFOLDER_VARIABLES & "\VariablesPart"
    Const C_PATHFILE_VARIABLES_USAGE = C_PATHFOLDER_VARIABLES & "\" & C_PATHFOLDER_VARIABLES & "-Usage.html"
    Const C_PATHFILE_VARIABLES_LIMITS = C_PATHFOLDER_VARIABLES & "\" & C_PATHFOLDER_VARIABLES & "-Limits.html"
    Const C_PATHFOLDER_VARTYPES = "Datatypes"
    Const C_PATHFILE_VARTYPES = C_PATHFOLDER_VARTYPES & "\Datatypes.html"
    Const C_PATHFILE_VARTYPES_LIMITS = C_PATHFOLDER_VARTYPES & "\" & C_PATHFOLDER_VARTYPES & "-Limits.html"
    Const C_PATHFOLDER_FUNCTIONS = "Functions"
    Const C_PATHFILE_FUNCTIONS = C_PATHFOLDER_FUNCTIONS & "\Functions.html"
    Const C_PATHFILE_FUNCTIONS_USAGE = C_PATHFOLDER_FUNCTIONS & "\" & C_PATHFOLDER_FUNCTIONS & "-Usage.html"
    Const C_PATHFOLDER_TEMPLATES = "Frames"
    Const C_PATHFILE_TEMPLATES = C_PATHFOLDER_TEMPLATES & "\Frames.html"
    Const C_PATHFOLDER_RECIPES = "Recipes"
    Const C_PATHFILE_RECIPES = C_PATHFOLDER_RECIPES & "\Recipes.html"
    Const C_PATHFOLDER_RGM = "RGM"
    Const C_PATHFILE_RGM = C_PATHFOLDER_RGM & "\RGM.html"
    Const C_PATHFOLDER_ARCHIVES = "Historian"
    Const C_PATHFILE_ARCHIVES = C_PATHFOLDER_ARCHIVES & "\Historian.html"
    Const C_PATHFOLDER_USERS = "Users"
    Const C_PATHFILE_USERS = C_PATHFOLDER_USERS & "\Users.html"
    Const C_PATHFOLDER_TIMECONTROLS = "TimeControls"
    Const C_PATHFILE_TIMECONTROLS = C_PATHFOLDER_TIMECONTROLS & "\TimeControls.html"
    Const C_PATHFOLDER_REMAS = "Remas"
    Const C_PATHFILE_REMAS = C_PATHFOLDER_REMAS & "\Remas.html"
    Const C_PATHFOLDER_DRIVERS = "Drivers"
    Const C_PATHFILE_DRIVERS = C_PATHFOLDER_DRIVERS & "\Drivers.html"
    Const C_PATHFOLDER_MENUS = "Menus"
    Const C_PATHFILE_MENUS = C_PATHFOLDER_MENUS & "\Menus.html"
    Const C_PATHFOLDER_PICTURES = "Screens"
    Const C_PATHFOLDER_PICTURES_DETAILS = C_PATHFOLDER_PICTURES & "\Details"
    Const C_PATHFILE_PICTURES = C_PATHFOLDER_PICTURES & "\Screens.html"
    Const C_PATHFILE_PICTURETREE = C_PATHFOLDER_PICTURES & "\ScreenTree.html"
    Const C_PATHFILE_INDEX = "Index.html"
    
Const dhcMissing = -2

'Initialize VariableProperties
Const C_STR_VARIABLE_PROPERTIES_DEFAULTS = "|Alignment||Bit number||Data block||Datatype||Decimals||Driver|" & _
    "|Driver object type||HD active||Identification||Max. set value||Measuring range max.||Measuring range min.|" & _
    "|Min. set value||Net address||Number of values||Offset||Reaction matrix||Recording type|" & _
    "|Rema Active||Scan rate [s]||Setting values active||Signal resolution max.||Signal resolution min.|" & _
    "|String length||Unit|"
Const C_STR_VARIABLE_PROPERTIES_SELECTED = "|Alignment||Bit number||Data block||Datatype||Decimals||Driver|" & _
    "|Driver object type||Identification||Measuring range max.||Measuring range min.||Net address|" & _
    "|Offset||Setting values active||Signal resolution max.||Signal resolution min.||String length||Unit|"
Const C_STR_VARIABLE_PROPERTIES_MORE = "|Acknowledgement value||Acknowledgement variable||Active|" & _
    "|AdjustHardwareValue||AdjustZenOnValue||Alarm variable 1||Alarm variable 2||Alarm variable 3|" & _
    "|Alternate value||Array size||Counter group||DDE active||Ext. address parameters|" & _
    "|External init value||External profile name||External read/write||External variable group|" & _
    "|Externally visible||Interlocking||Logging||Maximum gradient||Negative|" & _
    "|Non linear value adjustment via macros||Normal value||Old and new value||Only read from standby|" & _
    "|Positive||Priority||Resources label||Save in IPA database||Setting values with VBA|" & _
    "|String alternative value|"

'Initialize VariableLimitProperties
Const C_STR_VAR_LIMIT_PROPERTIES_DEFAULTS = "|Active||Alarm class||Alarm group||as Alarm|" & _
    "|Call via alarms administration||Color||Delay time [s]||Dynamic Limit Active||Flashing||Function||Help chapter||Help file|" & _
    "|in CEL||invisible||Limit||Limit text||Minimum / Maximum||Print||to acknowledge||To delete||Treshold value|" & _
    "|User property 1||User property 2||Variable|"
Const C_STR_VAR_LIMIT_PROPERTIES_SELECTED = "|Active||as Alarm||in CEL||Limit||Limit text||Minimum / Maximum||to acknowledge|"

'Initialize DatatypeLimitProperties
Const C_STR_VARTYPE_LIMIT_PROPERTIES_DEFAULTS = "|Active||Alarm class||Alarm group||as Alarm|" & _
    "|Call via alarms administration||Color||Delay time [s]||Dynamic Limit Active||Flashing||Function||Help chapter||Help file|" & _
    "|in CEL||invisible||Limit||Limit text||Minimum / Maximum||Print||to acknowledge||To delete||Treshold value|" & _
    "|User property 1||User property 2||Variable|"
Const C_STR_VARTYPE_LIMIT_PROPERTIES_SELECTED = "|Active||as Alarm||in CEL||Limit||Limit text||Minimum / Maximum||to acknowledge|"

'Initialize DataTypProperties
Const C_STR_DATATYPE_PROPERTIES_DEFAULTS = "|Array Dim 1||Array Dim 2||Array Dim 3||Bit offset||Decimals||Description|" & _
    "|HD active||Identification||IEC datatype||Max. set value||Measuring range max.||Measuring range min.||Min. set value|" & _
    "|Number of values||Offset||Pos. in structure||Reaction matrix||Recording type||Rema Active||Scan rate [s]|" & _
    "|Setting values active||Signal resolution max.||Signal resolution min.||String length||Unit|"
Const C_STR_DATATYPE_PROPERTIES_SELECTED = "|Decimals||Identification||IEC datatype||Measuring range max.|" & _
    "|Measuring range min.||Setting values active||Signal resolution max.||Signal resolution min.|" & _
    "|Unit|"
Const C_STR_DATATYPE_PROPERTIES_MORE = "|Acknowledgement value||Acknowledgement variable||Active|" & _
    "|AdjustHardwareValue||AdjustZenOnValue||Alarm variable 1||Alarm variable 2||Alarm variable 3|" & _
    "|Alternate value||Array size||Array start index||Counter group||DDE active||Interlocking||Logging|" & _
    "|Maximum gradient||negative||Non linear value adjustment via macros||Normal value||Old and new value|" & _
    "|Only read from standby||positive||Priority||Resources label||save in IPA database|" & _
    "|Setting values with VBA||String alternative value|"

'Initialize TemplateProperties
Const C_STR_TEMPLATE_PROPERTIES_DEFAULTS = "|Alignment||Always in the foreground||Background color||Border type|" & _
    "|Bottom [pixels]||Left [pixels]||Min/Max Buttons||Picture||Right [pixels]||System menu||Title|" & _
    "|Top [pixels]|"
Const C_STR_TEMPLATE_PROPERTIES_SELECTED = "|Background color||Bottom [pixels]||Left [pixels]||Right [pixels]|" & _
    "|Top [pixels]|"

'Initialize PictureProperties
Const C_STR_PICTURE_PROPERTIES_DEFAULTS = "|Alignment||Background color||Border style||Display title||End function|" & _
    "|Height [pixels]||Modal dialog||Picture||Screen type||Size from Frame||Start function||Frame|" & _
    "|Width [pixels]|"
Const C_STR_PICTURE_PROPERTIES_SELECTED = "|Background color||Height [pixels]||Screen type||Frame|" & _
    "|Width [pixels]|"
Const C_STR_PICTURE_PROPERTIES_MORE = "|Screen active variable||Visible under CE|"

'Initialize PictureElementProperties
Const C_STR_PICTURE_ELEMENT_PROPERTIES_DEFAULTS = "|3D||Alignment horizontal||Alignment vertical||Angle|" & _
    "|Authorization group||Background color||Bar color||Bitmap||Bitmap size||Border type|" & _
    "|Button Background color||Button filling||Button shape||Combi Elem. Transparent||Coordinates||Display status of variable|" & _
    "|Display status with red square||Display Unit||Display value in percent||End point X [pixels]|" & _
    "|End point Y [pixels]||Filling color||Filling pattern||Font||Function||Function execution on pressing|" & _
    "|Height [pixels]||Interlocking||Invert colour gradient||Key combination||Letter slant||Line color||Line type|" & _
    "|Line width||Menu||Name of linked symbol||Percent display||Screen type spec. function|" & _
    "|propose current value||Set value / change by||Set value during mouse-move||Set value via|" & _
    "|Setting values active||Start point X [pixels]||Start point Y [pixels]||Symbol number|" & _
    "|Take set value limits from variable||Text||Text color||Text line 1||Text line 2||Text when pressed||Transparent|" & _
    "|Type of display||Type||Variable||Width [pixels]||without dialog|"
Const C_STR_PICTURE_ELEMENT_PROPERTIES_SELECTED = "|Background color||Bar color||Button filling||Button shape||Combi Elem. Transparent|" & _
    "|Coordinates||Filling color||Font||Function||Invert colour gradient||Line color||Line width||Screen type spec. function|" & _
    "|Setting values active||Text||Text color||Text line 1||Text line 2||Transparent||Type||Variable|"
Const C_STR_PICTURE_ELEMENT_PROPERTIES_MORE = "|Absolute amount||Accessible via keyboard||ActiveX settings|" & _
    "|Alarm classes||Alignment||always available||Animate Always||Animate Variable||Arc of circle|" & _
    "|Autom. reset||Autom. reset after [min]||Bar explicit||Base for display||Bitmap for status HIGH(1)|" & _
    "|Bitmap for status LOW(0)||Bitmaps pre-defined||Blink Back Color||Bottom [pixels]||Brightness inside|" & _
    "|Brightness outside||Broken line color 1||Broken line color 2||Case sensitive||Change height active|" & _
    "|Change width active||Change X direction active||Change Y direction active||Clock display type|" & _
    "|Color max. value||Color min. value||Color only filler area||Colour from ALC||Column selection||Control type|" & _
    "|Current value||Direction||Discrete||Discrete steps||Display axes||Display curve info|" & _
    "|Display curves as areas||Display legend||Display limit text||Display mode||Display multiple sources||Display Range dyn. Max.|" & _
    "|Display Range dyn. Min.||Display Range Max.||Display Range Min.||Display scale||Display slave pointer|" & _
    "|Display title||Display values||Do not interpolate||DragBegin||DragDrop||DragOver||Draw|" & _
    "|Dynamic Background/filling color||Dynamic Text/line color||Edge width||End angle||Explicit|" & _
    "|Exported Screen type spec. funct.||External program||Fast reaction||Fill Only|" & _
    "|First alarm class to be displayed||Flashing background color||Flashing background transparent|" & _
    "|Formatting||From zero||Function type||Global||Help chapter||Help file||Hierarchical names||hold pressed status|" & _
    "|Holding time [ms]||Horizontal||Image of the selected alarm classes||In original size||Indicator type|" & _
    "|Indicator/Bar color||Init||invisible||Is Back Color||Is Text||KillFocus||Knob color||Knob type|" & _
    "|Left [pixels]||LeftClickDown||LeftClickUp||LeftDoubleClick||Legend color||Legend Distance [pixels]|" & _
    "|Legend text||Light effect shifted||Line activation||Line width Protected||Link number||Logarithmic|" & _
    "|Main tick color||Main ticks||MDI Control type||Milliseconds||Momentary switch||Momentary switch On|" & _
    "|MouseOver||Name f. object list||Object name as link||Only filler area||Opening angle||Original Size|" & _
    "|Overlapping||Screen symbol||Screen symbol active||Priority||Project|" & _
    "|Recognize flashing of all variables||Refresh Hours||Refresh Minute||Refresh Seconds||Represent. Hours|" & _
    "|Represent. Minute||Represent. Seconds||Reverse direction||Ribbon||Right [pixels]||RightClickDown|" & _
    "|RightClickUp||RightDoubleClick||Scale Distance [pixels]||Scale Height [pixels]||Scale Start angle|"
Const C_STR_PICTURE_ELEMENT_PROPERTIES_EVENMORE = "|Scroll width [%]||Separate colors||Separate flashing|" & _
    "|Separator||Set value dyn. Max.||Set value dyn. Min.||Set value Max.||Set value Min.||SetFocus||Shape|" & _
    "|Show knob||Show value||Sign split (several times)||Sign split elsewhere||Signature necessary||Signature text|" & _
    "|Slave pointer Display||Source (e.g: TANK1*)||Source||Start angle||Stati||Style||Style H||Style L|" & _
    "|Sub tick color||Sub ticks||Supply number||Switch||Switch Function||Symbol||Symbol F1|" & _
    "|Symbol F1 colors||Symbol F2||Symbol F2 colors||Symbol FGES||Symbol FGES colors|" & _
    "|Take color of main variable||Take flashing from main variable||Target (e.g: TANK2)||Text chained|" & _
    "|Text file||Time for text change [s]||Time stamp||Title color||Title position||Title text||Tooltip|" & _
    "|Top [pixels]||Topology type||Transformer side||Twist Max. rotation [|fffd|]|" & _
    "|Twist Max. variable value||Twist Min. rotation [|fffd|]||Twist Min. variable value||Twist Rotation active|" & _
    "|Twist Variable||Two-lined display||Value color||Value Distance [pixels]||Value position||Variable SS_1_1|" & _
    "|Variable SS_1_2||Variable SS_1_3||Variable SS_1_4||Variable SS_2_1||Variable SS_2_2||Variable SS_2_3|" & _
    "|Variable SS_2_4||Variable standard dividing point||Variable Start1||Variable Start2||Vertical|" & _
    "|via variable name||Visibility From||Visibility From Limit||Visibility level||Visibility Variable|" & _
    "|Visibility To||Visible from||Visible to||Visible under WinCE||With brightness values||Word wrap|" & _
    "|X Position Max. movement [pixels]||X Position Max. variable value||X Position Min. movement [pixels]|" & _
    "|X Position Min. variable value||X Position Variable||X Zoom Max. variable value||X Zoom Max. width [%]|" & _
    "|X Zoom Min. variable value||X Zoom Min. width [%]||X Zoom Variable||Y Position Max. movement [pixels]|" & _
    "|Y Position Max. variable value||Y Position Min. movement [pixels]||Y Position Min. variable value|" & _
    "|Y Position Variable||Y Zoom Max. height [%]||Y Zoom Max. variable value||Y Zoom Min. height [%]|" & _
    "|Y Zoom Min. variable value||Y Zoom Variable|"

'Initialize ProjectProperties
Const C_STR_PROJECT_PROPERTIES_DEFAULTS = "|AML - Save ring buffer spont.||Archive entries||Autom. function call|" & _
    "|Autom. keyboard||Autom. Logout||CEL - Save ring buffer spont.||Change recipes||Data directory|" & _
    "|Deleting users||display||Execute limit function at RT start||Filling color||Flash freq. [tenth sec]|" & _
    "|Function||Keyboard size [%]||Line color||Lines per page||locked keys||Log function set value|" & _
    "|Main menus active||Max. password error||Max. user error||Min. password length||Net active|" & _
    "|Net. Authorization||Print Active||Project name||Pwd. period of validity [D]||Runtime directory|" & _
    "|Runtime title||Send recipes||Server||Standby||Start Screen||Temp. Login||Time [min]|" & _
    "|Time without operation||Timeout [s]||Timeout for confirmation||Timeout for request [s]||WindowsCE project|"
Const C_STR_PROJECT_PROPERTIES_SELECTED = "|Net active||Project name||Runtime directory||Server||Standby|" & _
    "|Start Screen|"
Const C_STR_PROJECT_PROPERTIES_MORE = "|Autom. allow changes||Buffer size||Comments||Cursor visible||Database|" & _
    "|Detailing level||Display not translated keywords||Driver invisible||Equip. ident.||Equip. ident. with|" & _
    "|GUID||History of changes||IPA active||Multiuser project||Pre-define time filter||Printing for|" & _
    "|Redundancy type||Saving cycle||Selection with border||Start Screen GUID||Table name||Termination box|" & _
    "|Text export in Unicode||Trend and HD values in milliseconds|"

'Initialize RecipeProperties
Const C_STR_RECIPE_PROPERTIES_DEFAULTS = "|Authorization group||Timeout [ms]||Write synchronous|"
Const C_STR_RECIPE_PROPERTIES_SELECTED = ""

'Initialize RecipeVariableProperties
Const C_STR_RECIPE_VARIABLES_PROPERTIES_DEFAULTS = "|Identification||Maximum||Minimum||Set value||Unit|"
Const C_STR_RECIPE_VARIABLES_PROPERTIES_SELECTED = "|Set value|"

'Initialize MenuProperties
Const C_STR_MENU_PROPERTIES_DEFAULTS = "|Action type||Active||Alignment||Authorization group||Bitmap||Chapter|" & _
    "|Check mark||Dialog||File||Function||Screen||Propose current value||seperator||Set value/Change by|" & _
    "|Submenu||Tipp text||Variable||Variable from element||VBA macro||visible|"
Const C_STR_MENU_PROPERTIES_SELECTED = "|Action type||Active||Chapter||File||Function||Set value/Change by|" & _
    "|Submenu||Variable||Variable from element||VBA macro|"
Const C_STR_MENU_PROPERTIES_MORE = "|Signature necessary||Signature text|"

'Initialize UserProperties
Const C_STR_USER_PROPERTIES_DEFAULTS = "|Active||Administrator||Identification||Level 0||Level 1||Level 2||Level 3||Locked|"
Const C_STR_USER_PROPERTIES_SELECTED = "|Active||Administrator||Identification||Level 0||Level 1||Level 2||Level 3||Locked|"

'Initialize FunctionProperties
Const C_STR_FUNCTION_PROPERTIES_DEFAULTS = "|Actual||Client||Server||Standby||Parameter||Type|"
Const C_STR_FUNCTION_PROPERTIES_SELECTED = "|Parameter||Type|"

'Initialize TimeControlProperties
Const C_STR_TIME_PROPERTIES_DEFAULTS = "|Active||Execution type||Friday||Function||interval||Monday|" & _
    "|Saturday||Start time||Sunday||Thursday||Tuesday||Turn of month||Turn of year||Wednesday|"
Const C_STR_TIME_PROPERTIES_SELECTED = "|Active||Execution type||Function||interval|"

'Initialize ArchiveProperties
Const C_STR_ARCHIVE_PROPERTIES_DEFAULTS = "|Charge Variable||Cycle||CycleStart||End Function||Event Variable|" & _
    "|Format||Mode||Scan Cycle||Start Function|"
Const C_STR_ARCHIVE_PROPERTIES_SELECTED = "|Cycle||Mode||Scan Cycle|"
Const C_STR_ARCHIVE_PROPERTIES_MORE = "|Archives in Ringbuffer||Begin Time||End Time||Export in Unicode|" & _
    "|File Format||Last Index||Modus||Offset||Short Name Base Archive||SQL Data Source||Status|" & _
    "|Textfiles in Unicode|"

'Initialize ArchiveVariablesProperties
Const C_STR_ARCHIVE_VARIABLES_PROPERTIES_DEFAULTS = "|Calculation|"
Const C_STR_ARCHIVE_VARIABLES_PROPERTIES_SELECTED = "|Calculation|"

'Initialize RGMVariablesProperties
Const C_STR_RGM_VARIABLES_PROPERTIES_DEFAULTS = "|Max||Min|"
Const C_STR_RGM_VARIABLES_PROPERTIES_SELECTED = "|Max||Min|"

'Initialize RGMRecipeProperties
Const C_STR_RGM_RECIPE_PROPERTIES_DEFAULTS = "|Password Level||Recipe Number||Timeout [ms]|" & _
    "|Write synchronous|"
Const C_STR_RGM_RECIPE_PROPERTIES_SELECTED = "|Recipe Number|"

'Initialize RGMRecipeVariablesProperties
Const C_STR_RGM_RECIPE_PROPERTIES_VARIABLES_DEFAULTS = "|Source Variable||String Value||Value|"
Const C_STR_RGM_RECIPE_PROPERTIES_VARIABLES_SELECTED = "|String Value||Value|"

'Initialize RemaProperties
Const C_STR_REMA_PROPERTIES_DEFAULTS = "|Type|"
Const C_STR_REMA_PROPERTIES_SELECTED = "|Type|"

'Initialize StateProperties
Const C_STR_STATE_PROPERTIES_DEFAULTS = "|Alarm||Class||Color||Delay Time||Function||Group||Hysteresis|" & _
    "|Status||String Value||Trigger Value||Value|"
Const C_STR_STATE_PROPERTIES_SELECTED = "|Status||Value|"
Const C_STR_STATE_PROPERTIES_MORE = "|Alarm to||All values||Case Sensitive||Check Art||Mask Value|" & _
    "|Status Ext||Status Mask Ext||Status Std||Status Trigger Ext||Status Trigger Std||Wildcards|"

'Constants for IconFileNames
Const C_VARTYPE_SIMPLE = "..\" & C_PATHFOLDER_SYSTEM & "\datatype.gif"
Const C_VARTYPE_STRUCTURE = "..\" & C_PATHFOLDER_SYSTEM & "\structured_datatype.gif"
Const C_VARTYPE_STRUCTURE_ELEMENT_LINKED = "..\" & C_PATHFOLDER_SYSTEM & "\structured_element_linked.gif"
Const C_VARTYPE_STRUCTURE_ELEMENT_EMBEDDED = "..\" & C_PATHFOLDER_SYSTEM & "\structured_element_embedded.gif"
Const C_MENUITEMTYPE_PULLDOWN = "..\" & C_PATHFOLDER_SYSTEM & "\Pulldown.bmp"
Const C_MENUITEMTYPE_PULLDOWNITEM = "..\" & C_PATHFOLDER_SYSTEM & "\PulldownItem.bmp"
Const C_MENUITEMTYPE_POPUP = "..\" & C_PATHFOLDER_SYSTEM & "\Popup.bmp"
Const C_PICTURETREE_FOLDER = "..\" & C_PATHFOLDER_SYSTEM & "\open.gif"
Const C_PICTURETREE_STEPBACK = "..\" & C_PATHFOLDER_SYSTEM & "\more.gif"
Const C_PICTURETREE_DEFAULT = "..\" & C_PATHFOLDER_SYSTEM & "\pic.gif"
Const C_PICTURETREE_NOTFOUNDINTREE = "..\" & C_PATHFOLDER_SYSTEM & "\error.gif"

Const C_COLS_VARIABLELIST = 2
Const C_COLS_VARTYPELIST = 2
Const C_COLS_VARIABLELIMITSLIST = 3
Const C_COLS_DATATYPELIMITSLIST = 3
Const C_COLS_PICTURELIST = 2
Const C_COLS_ELEMENTLIST = 2
Const C_COLS_FUNCTIONLIST = 2
Const C_COLS_TEMPLATELIST = 2
Const C_COLS_TIMECONTROLLIST = 2
Const C_COLS_ARCHIVELIST = 4
Const C_COLS_ARCHIVEVARIABLESLIST = 3
Const C_COLS_RECIPEVARIABLESLIST = 2
Const C_COLS_RECIPEHEADERLIST = 3
Const C_COLS_REMAHEADERLIST = 3
Const C_COLS_STATELIST = 2
Const C_COLS_RGMVARIABLESLIST = 2
Const C_COLS_RGMRECIPELIST = 4
Const C_COLS_RGMRECIPEVALUESLIST = 2
Const C_COLS_DRIVERSLIST = 2
Const C_COLS_SCRIPTSLIST = 2
Const C_COLS_USERSLIST = 2
Const C_COLS_MENUITEMSLIST = 2
Const C_MAXLEVEL_PICTURETREE = 6
Const C_MAXLEVEL_ELEMENTTREE = 6

Const C_AMOUNT_OF_COLORS_IN_CSS = 5

Const C_AMOUNT_OF_VARIABLES_PER_FILE = 1000 'has to be a multiple of C_COLS_VARIABLELIST!!!

Const C_MAX_WIDTH_PICTURES_IN_CM = 8

Private PR_XMLWorkspace As MSXML2.IXMLDOMElement         'Workspace node
Private PR_XLSRoot As MSXML2.IXMLDOMElement              'Root node
Private PR_XSLBody As MSXML2.IXMLDOMElement              'Body node
Private PR_XSL_ColumnHeader As MSXML2.IXMLDOMElement     'Temp header node
Private PR_XSL_DataHeader As MSXML2.IXMLDOMElement       'Data node
Private PR_XSLDoc As MSXML2.DOMDocument                  'The Document
Private PR_PartsSelected(17) As Boolean                 'Array containing the module Selection
Private PR_bHardcopySlides As Boolean                   'TRUE= include bitmap from the selected slides.
Private TreeID As Integer                               'ID for TreeControl

'Type needed for timeconversion
Private Type SYSTEMTIME
 wYear As Integer
 wMonth As Integer
 wDayOfWeek As Integer
 wDay As Integer
 wHour As Integer
 wMinute As Integer
 wSecond As Integer
 wMilliseconds As Integer
End Type

'API-Function needed for the timeconversion
#If Not Win64 Then
    Private Declare PtrSafe Function SystemTimeToTzSpecificLocalTime Lib "kernel32" ( _
    ByVal lpTimeZoneInformation As Long, lpUniversalTime As SYSTEMTIME, lpLocalTime As SYSTEMTIME) As Long
#Else
    Private Declare PtrSafe Function SystemTimeToTzSpecificLocalTime Lib "kernel32" ( _
    ByVal lpTimeZoneInformation As Long, lpUniversalTime As SYSTEMTIME, lpLocalTime As SYSTEMTIME) As Long
#End If
Dim strProjectProperties_Selection As String
Dim strVariableProperties_Selection As String
Dim strVarLimitProperties_Selection As String
Dim strDatatypeProperties_Selection As String
Dim strPictureProperties_Selection As String
Dim strPictureElementProperties_Selection As String
Dim strVartypeLimitProperties_Selection As String
Dim strFunctionProperties_Selection As String
Dim strTemplateProperties_Selection As String
Dim strRecipeProperties_Selection As String
Dim strRecipeVariablesProperties_Selection As String
Dim strRGMVariablesProperties_Selection As String
Dim strRGMRecipeProperties_Selection As String
Dim strRGMRecipePropertiesVariables_Selection As String
Dim strTimeProperties_Selection As String
Dim strArchiveProperties_Selection As String
Dim strArchiveVariablesProperties_Selection As String
Dim strRemaProperties_Selection As String
Dim strStateProperties_Selection As String
Dim strMenuProperties_Selection As String
Dim strUserProperties_Selection As String
Dim strVTInfo(5) As String

'*************************************************************************************
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardVersion() As Integer
    GetWizardVersion = 14
    'RF 06.09.2006
    'UserFrom_Initialize replaced with UserForm_Activate --> startup problems when no project loaded
    'unused Functions/Procedures deleted
    '( 8) RF 21.12.2006 Changed from XML 2.0 to XML 3.0 >> Reference has also been changed
    '( 9) RF 01.03.2007 Straton project documentation added...
    '(10) RF 06.06.2007 REDESIGN of the Wizard
    '(11) RF 14.11.2008 Redesign + Bugfix 17161
    '(12) RF 03.11.2009 Redesign + Name changes...
    '(13) RF 17.08.2010 Defect#22977 - Straton W5Main.exe changed to W6Main.exe
    '                   wrong folder was used for Straton Docu, when the foldername was not the project name.
    '(14) 25.01.2013 AR: Redesign and updated for zenon 7.10
End Function
Public Function GetWizardName() As String
    GetWizardName = "Documentation-Wizard"
End Function
Public Function GetWizardInfo() As String
    GetWizardInfo = "Creates a complete HTML based documentation of the active project.(only zenon ED 32bit)"
End Function
Public Function GetWizardCategory() As String
    GetWizardCategory = "Project"
End Function
Public Function IsZenOnWizard() As Boolean
    #If Win64 Then
        IsZenOnWizard = False
    #Else
        IsZenOnWizard = True
    #End If
End Function
'*************************************************************************************

Private Sub cbxSettings_Click()
    Dim bXMLError As Boolean
    
    If cbxSettings.Text = "" Then Exit Sub
    'load settings from file...
    bXMLError = LoadSettingsXML(cbxSettings.Text & ".xml")
    If Not bXMLError Then  'Settings File was OK
        Call RestoreSettings(bXMLError)
    End If
    'cbxSettings.Text = ""
End Sub

'****************************************************************************
' Methode:      ChkBox_InclHardcopy_Click()
' Parameter:
' Description:  The user has changed the Hardcopy selection
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub ChkBox_InclHardcopy_Click()
    PR_bHardcopySlides = ChkBox_InclHardcopy.value
End Sub

Private Sub CmboBox_Pictures_Change()
    OptBtn_PictTreeviaPicture = True
End Sub

Private Sub CmdBtn_Archives_Click()
    ChkBox_Archives = True
    NavigateToMultiPage ("Historian")
End Sub

Private Sub CmdBtn_Datatypes_Click()
    ChkBox_Datatypes = True
    NavigateToMultiPage ("Datatypes")
End Sub

Private Sub CmdBtn_ElementProperties_Click()
    ChkBox_InclHardcopy = True
    NavigateToMultiPage ("Screen Elements")
End Sub

Private Sub CmdBtn_Functions_Click()
    ChkBox_Functions = True
    NavigateToMultiPage ("Functions")
End Sub

Private Sub CmdBtn_KonfArchive_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_ArchiveProperties.ListCount - 1
        LstBox_ArchiveProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfArchive_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfArchive_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_ARCHIVE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_ArchiveProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_ArchiveProperties.List(i) Then
                LstBox_ArchiveProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfArchive_Less.Enabled = False
    CmdBtn_KonfArchive_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfArchive_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfArchive_More_Click
    strTempCollection = C_STR_ARCHIVE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_ArchiveProperties.AddItem strTEMP
    Wend
    
    CmdBtn_KonfArchive_More.Enabled = False
    CmdBtn_KonfArchive_Less.Enabled = True
Exit Sub
Err_CmdBtn_KonfArchive_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfArchive_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_ArchiveProperties.ListCount - 1
        LstBox_ArchiveProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfFunct_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_FunctionProperties.ListCount - 1
        LstBox_FunctionProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfFunct_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfFunct_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_FunctionProperties.ListCount - 1
        LstBox_FunctionProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfMenus_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfMenus_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_MENU_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_MenuItemProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_MenuItemProperties.List(i) Then
                LstBox_MenuItemProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfMenus_Less.Enabled = False
    CmdBtn_KonfMenus_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfMenus_MenuItem_DeselectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_MenuItemProperties.ListCount - 1
        LstBox_MenuItemProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfMenus_MenuItem_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_MenuItemProperties.ListCount - 1
        LstBox_MenuItemProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfMenus_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfMenus_More_Click
    strTempCollection = C_STR_MENU_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_MenuItemProperties.AddItem strTEMP
    Wend
    CmdBtn_KonfMenus_Less.Enabled = True
    CmdBtn_KonfMenus_More.Enabled = False

Exit Sub
Err_CmdBtn_KonfMenus_More_Click:
    Resume Next
End Sub



Private Sub CmdBtn_KonfPict_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfPict_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_PICTURE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_PictureProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_PictureProperties.List(i) Then
                LstBox_PictureProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfPict_Less.Enabled = False
    CmdBtn_KonfPict_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfPict_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfPict_More_Click
    strTempCollection = C_STR_PICTURE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_PictureProperties.AddItem strTEMP
    Wend

    CmdBtn_KonfPict_More.Enabled = False
    CmdBtn_KonfPict_Less.Enabled = True
Exit Sub
Err_CmdBtn_KonfPict_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfPict_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_PictureProperties.ListCount - 1
        LstBox_PictureProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfPict_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_PictureProperties.ListCount - 1
        LstBox_PictureProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfPictElem_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_PICTURE_ELEMENT_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_ElementProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_ElementProperties.List(i) Then
                LstBox_ElementProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfPictElem_Less.Enabled = False
    CmdBtn_KonfPictElem_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfPictElem_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfPictElem_More_Click
    strTempCollection = C_STR_PICTURE_ELEMENT_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_ElementProperties.AddItem strTEMP
    Wend
    strTempCollection = C_STR_PICTURE_ELEMENT_PROPERTIES_EVENMORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_ElementProperties.AddItem strTEMP
    Wend

    CmdBtn_KonfPictElem_More.Enabled = False
    CmdBtn_KonfPictElem_Less.Enabled = True
Exit Sub
Err_CmdBtn_KonfPictElem_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfPictTree_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Screens")
End Sub

Private Sub CmdBtn_KonfProject_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_ProjectProperties.ListCount - 1
        LstBox_ProjectProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfProject_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfProject_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_ProjectProperties.ListCount - 1
        LstBox_ProjectProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRec_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfRec_Rec_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RecipeProperties.ListCount - 1
        LstBox_RecipeProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRec_Rec_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RecipeProperties.ListCount - 1
        LstBox_RecipeProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRec_Var_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
        LstBox_RecipeVariableProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRec_Var_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
        LstBox_RecipeVariableProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRema_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RemaProperties.ListCount - 1
        LstBox_RemaProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRema_done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfRema_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RemaProperties.ListCount - 1
        LstBox_RemaProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRema_States_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_StateProperties.ListCount - 1
        LstBox_StateProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRema_States_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_StateProperties.ListCount - 1
        LstBox_StateProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRemas_State_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_STATE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_StateProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_StateProperties.List(i) Then
                LstBox_StateProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfRemas_State_Less.Enabled = False
    CmdBtn_KonfRemas_State_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfRemas_State_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfRemas_State_More_Click
    strTempCollection = C_STR_STATE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_StateProperties.AddItem strTEMP
    Wend

    CmdBtn_KonfRemas_State_More.Enabled = False
    CmdBtn_KonfRemas_State_Less.Enabled = True
Exit Sub
Err_CmdBtn_KonfRemas_State_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfRGM_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfRGM_RGMRec_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
        LstBox_RGMRecipeProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRGM_RGMRec_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
        LstBox_RGMRecipeProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRGM_RGMRecVar_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
        LstBox_RGMRecipeVariableProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRGM_RGMRecVar_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
        LstBox_RGMRecipeVariableProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfRGM_RGMVar_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
        LstBox_RGMVariableProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfRGM_RGMVar_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
        LstBox_RGMVariableProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfTempl_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_TemplateProperties.ListCount - 1
        LstBox_TemplateProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfTempl_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfTempl_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_TemplateProperties.ListCount - 1
        LstBox_TemplateProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfTime_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_TimeControlProperties.ListCount - 1
        LstBox_TimeControlProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfTime_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfTime_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_TimeControlProperties.ListCount - 1
        LstBox_TimeControlProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonftPictElem_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Screens")
End Sub

Private Sub CmdBtn_KonfUser_DeselectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_UserProperties.ListCount - 1
        LstBox_UserProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfUser_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfUser_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_UserProperties.ListCount - 1
        LstBox_UserProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfVar_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_VariableProperties.ListCount - 1
        LstBox_VariableProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfVar_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfVar_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_VARIABLE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_VariableProperties.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_VariableProperties.List(i) Then
                LstBox_VariableProperties.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfVar_Less.Enabled = False
    CmdBtn_KonfVar_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfVar_Limits_Click()
    ChkBox_InclVarLimits = True
    NavigateToMultiPage ("Limits")
End Sub

Private Sub CmdBtn_KonfVar_More_Click()
Dim strTempCollection As String
Dim strTEMP As String
On Error GoTo Err_CmdBtn_KonfVar_More_Click
    strTempCollection = C_STR_VARIABLE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_VariableProperties.AddItem strTEMP
    Wend
 
    CmdBtn_KonfVar_More.Enabled = False
    CmdBtn_KonfVar_Less.Enabled = True
Exit Sub
Err_CmdBtn_KonfVar_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfVar_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_VariableProperties.ListCount - 1
        LstBox_VariableProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfVarLimits_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_VarLimits.ListCount - 1
        LstBox_VarLimits.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfVarLimits_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Variables")
End Sub

Private Sub CmdBtn_KonfVarLimits_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_VarLimits.ListCount - 1
        LstBox_VarLimits.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfVarTypeLimits_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
        LstBox_KonfVarTypeLimitsProperties.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfVarTypeLimits_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Datatypes")
End Sub

Private Sub CmdBtn_KonfVarTypeLimits_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
        LstBox_KonfVarTypeLimitsProperties.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_KonfVarTypes_DeSelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_Vartypes.ListCount - 1
        LstBox_Vartypes.Selected(i) = False
    Next
End Sub

Private Sub CmdBtn_KonfVarTypes_Done_Click()
    mpgWizardPage.Pages(mpgWizardPage.value).Visible = False
    NavigateToMultiPage ("Overview")
End Sub

Private Sub CmdBtn_KonfVarTypes_InclVarTypeLimits_Click()
    ChkBox_InclVarTypesLimits = True
    NavigateToMultiPage ("Datatype Limits")
End Sub

Private Sub CmdBtn_KonfVarTypes_Less_Click()
Dim strTempCollection As String
Dim strTEMP As String
Dim i As Integer
On Error GoTo Err_Less_Click
    strTempCollection = C_STR_DATATYPE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        For i = LstBox_Vartypes.ListCount - 1 To 0 Step -1
            If strTEMP = LstBox_Vartypes.List(i) Then
                LstBox_Vartypes.RemoveItem (i)
                'Exit For
            End If
        Next i
    Wend
    CmdBtn_KonfVarTypes_Less.Enabled = False
    CmdBtn_KonfVarTypes_More.Enabled = True
Exit Sub
Err_Less_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfVarTypes_More_Click()

Dim strTempCollection As String
Dim strTEMP As String
 
On Error GoTo Err_CmdBtn_KonfVarTypes_More_Click
    strTempCollection = C_STR_DATATYPE_PROPERTIES_MORE
    While Not strTempCollection = ""
        strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
        strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
        LstBox_Vartypes.AddItem strTEMP
    Wend
    CmdBtn_KonfVarTypes_Less.Enabled = True
    CmdBtn_KonfVarTypes_More.Enabled = False

Exit Sub
Err_CmdBtn_KonfVarTypes_More_Click:
    Resume Next
End Sub

Private Sub CmdBtn_KonfVarTypes_SelectAll_Click()
    Dim i As Integer
    For i = 0 To LstBox_Vartypes.ListCount - 1
        LstBox_Vartypes.Selected(i) = True
    Next
End Sub

Private Sub CmdBtn_Menus_Click()
    ChkBox_Menus = True
    NavigateToMultiPage ("Menus")
End Sub

Private Sub CmdBtn_Pictures_Click()
    ChkBox_Pictures = True
    NavigateToMultiPage ("Screens")
End Sub

Private Function NavigateToMultiPage(PageName As String)

    Dim i As Integer
    For i = 0 To mpgWizardPage.Pages.Count - 1
        If (mpgWizardPage.Pages(i).Caption = PageName) Then
            mpgWizardPage.Pages(i).Visible = True
            mpgWizardPage.value = mpgWizardPage.Pages(i).index
            Exit For
        End If
    Next

End Function


Private Sub CmdBtn_PictureTree_Click()
    ChkBox_InclPictureTree = True
    NavigateToMultiPage ("Screen Tree")
End Sub

Private Sub CmdBtn_Project_Click()
    ChkBox_Project = True
    NavigateToMultiPage ("Project")
End Sub

Private Sub CmdBtn_Recipes_Click()
    ChkBox_Recipes = True
    NavigateToMultiPage ("Standard Recipes")
End Sub

Private Sub CmdBtn_Remas_Click()
    ChkBox_Remas = True
    NavigateToMultiPage ("Remas")
End Sub

Private Sub CmdBtn_RGM_Click()
    ChkBox_RGM = True
    NavigateToMultiPage ("Recipe Group Manager")
End Sub

Private Sub CmdBtn_SelectAllModuls_Click()
    ChkBox_Project.value = True
    ChkBox_Variables.value = True
    ChkBox_Datatypes.value = True
    ChkBox_Pictures.value = True
    ChkBox_Functions.value = True
    ChkBox_Templates.value = True
    ChkBox_Recipes.value = True
    ChkBox_RGM.value = True
    ChkBox_Drivers.value = True
    ChkBox_Scripts.value = True
    ChkBox_TimeControls.value = True
    ChkBox_Archives.value = True
    ChkBox_Users.value = True
    ChkBox_Menus.value = True
    ChkBox_Remas.value = True
    ChkBox_Straton.value = True
End Sub

Private Sub CmdBtn_DeSelectAllModuls_Click()
    ChkBox_Project.value = False
    ChkBox_Variables.value = False
    ChkBox_Datatypes.value = False
    ChkBox_Pictures.value = False
    ChkBox_Functions.value = False
    ChkBox_Templates.value = False
    ChkBox_Recipes.value = False
    ChkBox_RGM.value = False
    ChkBox_Drivers.value = False
    ChkBox_Scripts.value = False
    ChkBox_TimeControls.value = False
    ChkBox_Archives.value = False
    ChkBox_Users.value = False
    ChkBox_Menus.value = False
    ChkBox_Remas.value = False
    ChkBox_Straton.value = False
End Sub

Private Sub CmdBtn_Templates_Click()
    ChkBox_Templates = True
    NavigateToMultiPage ("Frames")
End Sub

Private Sub CmdBtn_TimeControls_Click()
    ChkBox_TimeControls = True
    NavigateToMultiPage ("Time Control")
End Sub

Private Sub CmdBtn_Variables_Click()
    ChkBox_Variables = True
    NavigateToMultiPage ("Variables")
End Sub

Private Sub cmdDeleteSetting_Click()
    Dim i As Integer
    Dim strDestPath As String
        
    If cbxSettings.Text = "" Then Exit Sub
    For i = 0 To cbxSettings.ListCount - 1
        strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
        If cbxSettings.List(i) = cbxSettings.Text Then
            'delete file
            strDestPath = strDestPath & "Wizards\DocuWizard\" & cbxSettings.Text & ".xml"
            Kill strDestPath
            cbxSettings.RemoveItem (i)
            Exit For
        End If
    Next i
    Write_INI "SETTINGS", "COUNT", CStr(cbxSettings.ListCount)
    For i = 0 To cbxSettings.ListCount - 1
        Write_INI "SETTINGS", "SET" & i, cbxSettings.List(i)
    Next i
    cbxSettings.Text = ""
End Sub

'****************************************************************************
' Methode:      cmdDone_Click()
' Parameter:
' Description:  The wizard is done,lets unload the wizard
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub cmdDone_Click()
    OpenURL PR_strDestination & "index.html"
    Unload Me
End Sub

Sub OpenURL(URL As String, Optional ByVal ShowMode As OpenUrlShowConstants = swNormal)
    ShellExecute GetDesktopWindow(), "Open", URL, "", "", ShowMode
End Sub
'****************************************************************************
' Methode:      CloseXML(....)
' Parameter:    XMLDoc As MSXML2.DOMDocument, XSLDoc As MSXML2.DOMDocument
' Description:  The wizard has finished collecting the required information,
'               lets save the output file.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function CloseXML(XMLDoc As MSXML2.DOMDocument, XSLDoc As MSXML2.DOMDocument)
Dim StyleSheet As New MSXML2.DOMDocument
Dim strHTML As String
LogMessage ("Writing output:'" & PR_strDestination & "'")
On Error GoTo Err_Last
'    'Write XML and XSL
'        XMLDoc.Save (PR_strDestinationXML)
'        XSLDoc.Save (Replace(PR_strDestinationXML, ".xml", ".xsl"))
'    'Create and write HTML
'        StyleSheet.Load (Replace(PR_strDestinationXML, ".xml", ".xsl"))
'            strHTML = XMLDoc.transformNode(StyleSheet)
'            Open PR_strDestinationHTML For Output As #1
'                Print #1, strHTML
'            Close #1
    'Free Memory
        Set XMLDoc = Nothing
        Set XSLDoc = Nothing
    
    ModifyLastLogMessage ("..Done")
Exit Function
Err_Last:
    Resume Next
End Function

'****************************************************************************
' Methode:      addElement(....)
' Parameter:    xdoc, xparent, Name, value
' Description:  Adds an item to a node and return the new item.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function addElement(xdoc, xparent, Name, value)
    Dim xele As MSXML2.IXMLDOMElement
    
    Set xele = xdoc.CreateElement(Name)
    xele.Text = value
    
    xparent.appendChild xele
    Set addElement = xele
End Function

Private Sub cmdRestoreDefaults_Click()
    Call RestoreSettings(True)
End Sub

Private Sub cmdSaveSettings_Click()
Dim XMLSettingsDoc As MSXML2.DOMDocument
Dim XMLLastSettings As New MSXML2.DOMDocument
Dim node As IXMLDOMElement
Dim nodeID As IXMLDOMAttribute
Dim ObProject As Project 'save xml file....
Dim strSetting As String
Dim i As Integer
Dim bExists As Boolean

    Set ObProject = MyWorkspace.ActiveDocument
    strSetting = InputBox("Please enter a name for the current settings:", "Save Settings As", ObProject.Name)
    If strSetting = "" Then Exit Sub
    If XMLSettingsDoc Is Nothing Then
    'Save current Settings
        Set XMLSettingsDoc = CreateObject("Microsoft.XMLDOM")
        Set XMLSettingsDoc = CollectInformationForSaveSettings(ObProject, XMLSettingsDoc)
    'Get Destinationpath
        Dim strDestPath As String
'        strDestPath = MyWorkspace.Application.Path
'        strDestPath = Replace(strDestPath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
'RF: NEW Method >= 6.21!
        strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
        strDestPath = strDestPath & "Wizards\DocuWizard\" & strSetting & ".xml"
    'Save XML
        XMLSettingsDoc.Save (strDestPath)
    End If
    Set XMLSettingsDoc = Nothing
    
    bExists = False
    For i = 0 To cbxSettings.ListCount - 1
        If strSetting = cbxSettings.List(i) Then bExists = True
    Next i
    If bExists = False Then cbxSettings.AddItem strSetting
    cbxSettings.Text = strSetting
    'set ini file
    Write_INI "SETTINGS", "COUNT", CStr(cbxSettings.ListCount)
    For i = 0 To cbxSettings.ListCount - 1
        Write_INI "SETTINGS", "SET" & i, cbxSettings.List(i)
    Next i
    
End Sub

Private Sub cmdSelectDestinationHTML_Click()
On Error GoTo errorHandler
#If Win64 Then
    MsgBox ("ERROR Only works with zenon x86!")
#Else
    Debug.Print ("32")
        Dim strTEMP As String
        Dim i As Integer
        Dim CDLG As Object
        
        Set CDLG = CreateObject("MSComDlg.CommonDialog")
        
        'set init path
        CDLG.InitDir = lblDestination.Caption
        CDLG.FileName = "index.html"
        ' Display the Open dialog box
        CDLG.ShowSave
        ' Display name of selected file
        strTEMP = CDLG.FileName
        If strTEMP = "" Then Exit Sub
        If LCase(strTEMP) = "index.html" Then Exit Sub
        'Remove filename after last \
        For i = Len(strTEMP) To 1 Step -1
            If Mid(strTEMP, i, 1) = "\" Then
                strTEMP = Mid(strTEMP, 1, i)
                Exit For
            End If
        Next i
        
        PR_strDestination = strTEMP '& "\"
        lblDestination.Caption = PR_strDestination
        If (Trim(PR_strDestination) = "") Then
            cmdFinish.Enabled = False
        Else
            cmdFinish.Enabled = True
        End If
        PR_strDestinationDefaultValue = False
  #End If
    Exit Sub
errorHandler:
            MsgBox ("ERROR Only works with zenon x86!: " & Err.Description)
    Resume Next
End Sub

Private Sub CommandButton1_Click()
    Dim i As Integer
    For i = 0 To LstBox_ElementProperties.ListCount - 1
        LstBox_ElementProperties.Selected(i) = True
    Next
End Sub

Private Sub CommandButton2_Click()

    Dim i As Integer
    Dim strCurSelected As String
    Dim strSelectedProperties As String
    Dim nSelected As Integer
    Dim j As Integer
    Dim VarTemp As Variant
    
    For i = 0 To LstBox_VariableProperties.ListCount - 1
        If (LstBox_VariableProperties.Selected(i)) Then
            strSelectedProperties = strSelectedProperties & "|" & i & "|"
            nSelected = nSelected + 1
        End If
    Next

    LstBox_VariableProperties.Clear
    
    While Not strSelectedProperties = ""
        j = Mid(strSelectedProperties, 2, InStr(2, strSelectedProperties, "|") - 2)
        strSelectedProperties = Replace(strSelectedProperties, "|" & j & "|", "")
        j = j + 1
        VarTemp = Split(PR_Var_PropertiesForVariables(j), ",")
        LstBox_VariableProperties.AddItem VarTemp(2)
    Wend

End Sub

Private Sub CommandButton32_Click()
    ChkBox_Users = True
    NavigateToMultiPage ("Users")
End Sub

Private Sub CommandButton53_Click()
    Dim i As Integer
    For i = 0 To LstBox_ElementProperties.ListCount - 1
        LstBox_ElementProperties.Selected(i) = False
    Next
End Sub

'****************************************************************************
' Methode:      imgCD_Logo_Click()
' Parameter:
' Description:  Opens the COPA-DATA Homepage!
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub imgCD_Logo_Click()
    Hyperlink
End Sub

'****************************************************************************
' Methode:      imgWEB_Click()
' Parameter:
' Description:  Opens the COPA-DATA Homepage!
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub imgWEB_Click()
    Hyperlink
End Sub

'****************************************************************************
' Methode:      imgzenOn_Logo_Click()
' Parameter:
' Description:  Opens the COPA-DATA Homepage!
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub imgzenOn_Logo_Click()
    Hyperlink
End Sub

'****************************************************************************
' Methode:      imgzenOn_Logo_Click()
' Parameter:
' Description:  Starts explore with the "COPA-DATA Homepage"-url.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub Hyperlink()
On Error GoTo HandleErr
    Call Shell("explorer.exe http://www.copadata.com", vbMaximizedFocus)
    Exit Sub
HandleErr:
    Select Case Err.Number
        Case Else
            MsgBox "Error " & Err.Number & ": " & vbCrLf & Err.Description, vbCritical, "frmProjectWizard.Hyperlink"
    End Select
End Sub


'****************************************************************************
' Methode:      UserForm_Activate()
' Parameter:
' Description:  Initialize the Wizards form, set default values and fill the listboxes.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub UserForm_Activate()
Dim ObProject As Project
Dim strProjectName As String
Dim i As Integer
Dim strTempCollection As String
Dim strTEMP As String
Dim strLastSign As String
Dim bXMLError As Boolean
Dim strDestPath As String
    
    If InStr(1, ApplicationED.Name, "zenon") <> 0 Then
        Header.Picture = Image_zenOn.Picture
    Else
        Header.Picture = Image_OEM.Picture
    End If
    
PR_bHardcopySlides = False
mpgWizardPage.value = 0
mpgWizardPage_Change
OptBtn_PictTreeviaStart = True

CmdBtn_KonfVar_Less.Enabled = False
CmdBtn_KonfArchive_Less.Enabled = False
CmdBtn_KonfPict_Less.Enabled = False
CmdBtn_KonfPictElem_Less.Enabled = False
CmdBtn_KonfMenus_Less.Enabled = False
CmdBtn_KonfRemas_State_Less.Enabled = False
CmdBtn_KonfVarTypes_Less.Enabled = False

#If Win64 Then
            MsgBox ("This wizard works only in zenon ED 32bit!")
#Else
#End If
'strDestPath = MyWorkspace.Application.Path
'strDestPath = Replace(strDestPath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
'RF: NEW Method >= 6.21!
strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
strDestPath = strDestPath & "Wizards\"

PR_strDestinationDefaultValue = True
Set ObProject = MyWorkspace.ActiveDocument
Set PR_obProject = ObProject
    On Error GoTo Err_Proj
        If (Not ObProject Is Nothing) Then
            m_bWindowsCE = ObProject.DynProperties("WindowsCE")
            strProjectName = ObProject.Name
        End If
bXMLError = True

PR_strMyDocuments = GetPath(CSIDL_PERSONAL)
'Last character has to be a \
strLastSign = Right(PR_strMyDocuments, 1)
If strLastSign <> "\" Then PR_strMyDocuments = PR_strMyDocuments & "\"

'Initial Settings
    
    'Fill Listboxes with Default-Entrys
        On Error GoTo Err_Fill_LstBox_VariableProperties
            strTempCollection = C_STR_VARIABLE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_VariableProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_PictureProperties
            strTempCollection = C_STR_PICTURE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_PictureProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_ElementProperties
            strTempCollection = C_STR_PICTURE_ELEMENT_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_ElementProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_KonfVarTypeLimitsProperties
            strTempCollection = C_STR_VARTYPE_LIMIT_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_KonfVarTypeLimitsProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_FunctionProperties
            strTempCollection = C_STR_FUNCTION_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_FunctionProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_TemplateProperties
            strTempCollection = C_STR_TEMPLATE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_TemplateProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RecipeProperties
            strTempCollection = C_STR_RECIPE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RecipeProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RecipeVariableProperties
            strTempCollection = C_STR_RECIPE_VARIABLES_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RecipeVariableProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_ProjectProperties
            strTempCollection = C_STR_PROJECT_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_ProjectProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RGMRecipeVariableProperties
            strTempCollection = C_STR_RGM_RECIPE_PROPERTIES_VARIABLES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RGMRecipeVariableProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RGMVariableProperties
            strTempCollection = C_STR_RGM_VARIABLES_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RGMVariableProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RGMRecipeProperties
            strTempCollection = C_STR_RGM_RECIPE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RGMRecipeProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_VartypeProperties
            strTempCollection = C_STR_DATATYPE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_Vartypes.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_TimeControlProperties
            strTempCollection = C_STR_TIME_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_TimeControlProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_ArchiveProperties
            strTempCollection = C_STR_ARCHIVE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_ArchiveProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_ArchiveVariablesProperties
            strTempCollection = C_STR_ARCHIVE_VARIABLES_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_ArchiveVariablesProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_UserProperties
            strTempCollection = C_STR_USER_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_UserProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_MenuItemProperties
            strTempCollection = C_STR_MENU_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_MenuItemProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_RemaProperties
            strTempCollection = C_STR_REMA_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_RemaProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_StateProperties
            strTempCollection = C_STR_STATE_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_StateProperties.AddItem strTEMP
            Wend
        On Error GoTo Err_Fill_LstBox_Limits
            strTempCollection = C_STR_VAR_LIMIT_PROPERTIES_DEFAULTS
            While Not strTempCollection = ""
                strTEMP = Mid(strTempCollection, 2, InStr(2, strTempCollection, "|") - 2)
                strTempCollection = Replace(strTempCollection, "|" & strTEMP & "|", "")
                LstBox_VarLimits.AddItem strTEMP
            Wend
    
        bXMLError = LoadSettingsXML("LastSettings.xml")
        cbxSettings.Clear
        For i = 0 To Val(Read_INI("SETTINGS", "COUNT")) - 1
            cbxSettings.AddItem Read_INI("SETTINGS", "SET" & i)
        Next i
        
        Call RestoreSettings(bXMLError)
        
'PictureTypes
ReDim astrPictureTypes(0 To 23) As String
    astrPictureTypes(0) = "Standard"
    astrPictureTypes(1) = "List"
    astrPictureTypes(2) = "Alarm"
    astrPictureTypes(3) = "Archive revision"
    astrPictureTypes(4) = "Chronologic event list"
    astrPictureTypes(5) = "Extended trend"
    astrPictureTypes(6) = "Video"
    astrPictureTypes(7) = "Reports"
    astrPictureTypes(12) = "Recipegroup Manager"
    astrPictureTypes(13) = "Login"
    astrPictureTypes(14) = "Html"
    astrPictureTypes(15) = "Keyboard"
    astrPictureTypes(16) = "Scheduler - PFS"
    astrPictureTypes(17) = "Standard recipe"
    astrPictureTypes(19) = "Worldview"
    astrPictureTypes(21) = "Variablen status test"
    astrPictureTypes(23) = "Industrial Performance Analyzer"

'Element-Types
ReDim astrElementTypes(0 To 136, 1 To 2) As String
    astrElementTypes(102, 1) = "Rectangle"
    astrElementTypes(102, 2) = "rectangle.gif"
    astrElementTypes(101, 1) = "Line"
    astrElementTypes(101, 2) = "line.gif"
    astrElementTypes(127, 1) = "Rounded rectangle"
    astrElementTypes(127, 2) = "rounded_rectangle.gif"
    astrElementTypes(103, 1) = "Ellipse/circle"
    astrElementTypes(103, 2) = "circle.gif"
    astrElementTypes(128, 1) = "Polygon"
    astrElementTypes(128, 2) = "polygon.gif"
    astrElementTypes(104, 1) = "Polyline"
    astrElementTypes(104, 2) = "polyline.gif"
    astrElementTypes(108, 1) = "Arc of circle"
    astrElementTypes(108, 2) = "arc_of_circle.gif"
    astrElementTypes(107, 1) = "Static text"
    astrElementTypes(107, 2) = "static_text.gif"
    astrElementTypes(136, 1) = "Tube"
    astrElementTypes(136, 2) = "tube.gif"
    astrElementTypes(0, 1) = "Bar graph"
    astrElementTypes(0, 2) = "bar_graph.gif"
    astrElementTypes(1, 1) = "Numerical value"
    astrElementTypes(1, 2) = "numerical_value.gif"
    astrElementTypes(2, 1) = "Link text"
    astrElementTypes(2, 2) = "link_text.gif"
    astrElementTypes(4, 1) = "Trend Graph"
    astrElementTypes(4, 2) = "trend_curve.gif"
    astrElementTypes(5, 1) = "Indicating Instrument"
    astrElementTypes(5, 2) = "indicating_instrument.gif"
    astrElementTypes(6, 1) = "Move element"
    astrElementTypes(6, 2) = "default.gif"
    astrElementTypes(7, 1) = "Binary Element"
    astrElementTypes(7, 2) = "binary_element.gif"
    astrElementTypes(8, 1) = "Bitmap button"
    astrElementTypes(8, 2) = "bitmap_button.gif"
    astrElementTypes(9, 1) = "Invisible Button"
    astrElementTypes(9, 2) = "invisible_button.gif"
    astrElementTypes(10, 1) = "Text Button"
    astrElementTypes(10, 2) = "text_button.gif"
    astrElementTypes(11, 1) = "Switch"
    astrElementTypes(11, 2) = "switch.gif"
    astrElementTypes(12, 1) = "Multibin"
    astrElementTypes(12, 2) = "multibin.gif"
    astrElementTypes(13, 1) = "Message"
    astrElementTypes(13, 2) = "message.gif"
    astrElementTypes(14, 1) = "Clock"
    astrElementTypes(14, 2) = "clock.gif"
    astrElementTypes(16, 1) = "Combi element"
    astrElementTypes(16, 2) = "combi_element.gif"
    astrElementTypes(20, 1) = "ActiveX"
    astrElementTypes(20, 2) = "activex_element.gif"
    astrElementTypes(23, 1) = "Universal slider"
    astrElementTypes(23, 2) = "universal_slider.gif"
    astrElementTypes(24, 1) = "Combo/Listbox"
    astrElementTypes(24, 2) = "combo_listbox.gif"
    astrElementTypes(133, 1) = "WMF"
    astrElementTypes(133, 2) = "default.gif"
    astrElementTypes(135, 1) = "Arc"
    astrElementTypes(135, 2) = "default.gif"
    astrElementTypes(111, 1) = "Trace Dr"
    astrElementTypes(111, 2) = "default.gif"
    astrElementTypes(129, 1) = "Symbol"
    astrElementTypes(129, 2) = "symbol.gif"
    astrElementTypes(109, 1) = "Solid"
    astrElementTypes(109, 2) = "default.gif"
    astrElementTypes(131, 1) = "DXF Segement"
    astrElementTypes(131, 2) = "default.gif"
    astrElementTypes(121, 1) = "Pie"
    astrElementTypes(121, 2) = "default.gif"
    astrElementTypes(114, 1) = "Cone"
    astrElementTypes(114, 2) = "default.gif"
    astrElementTypes(116, 1) = "Filled Triangle"
    astrElementTypes(116, 2) = "default.gif"
    astrElementTypes(115, 1) = "Filled Para"
    astrElementTypes(115, 2) = "default.gif"
    astrElementTypes(117, 1) = "Filled Block"
    astrElementTypes(117, 2) = "default.gif"
    astrElementTypes(134, 1) = "EMF"
    astrElementTypes(134, 2) = "default.gif"
    astrElementTypes(21, 1) = "Topological Line"
    astrElementTypes(21, 2) = "default.gif"
    astrElementTypes(22, 1) = "Topological Line"
    astrElementTypes(22, 2) = "default.gif"
    astrElementTypes(17, 1) = "Screen Alarm"
    astrElementTypes(17, 2) = "picture_alarm.gif"
    astrElementTypes(15, 1) = "Command Button"
    astrElementTypes(15, 2) = "command_element.gif"
    astrElementTypes(100, 1) = "Dot"
    astrElementTypes(100, 2) = "default.gif"
    astrElementTypes(19, 1) = "Aegel"
    astrElementTypes(19, 2) = "default.gif"

'Function-Types
ReDim astrFunctionTypes(1 To 125) As String
    astrFunctionTypes(3) = "Screen Switch"
    astrFunctionTypes(4) = "Screen: Return to last"
    astrFunctionTypes(5) = "Print alarm- or CEL-list"
    astrFunctionTypes(6) = "Export alarms"
    astrFunctionTypes(8) = "Print a hard-copy"
    astrFunctionTypes(10) = "Alarms : ackn. Flashing"
    astrFunctionTypes(12) = "Exit program"
    astrFunctionTypes(13) = "Send value to hardware"
    astrFunctionTypes(14) = "Play sound-file"
    astrFunctionTypes(15) = "Execute a program"
    astrFunctionTypes(17) = "Close the Frame"
    astrFunctionTypes(18) = "Read dBase file"
    astrFunctionTypes(19) = "Script : select online"
    astrFunctionTypes(20) = "Script : execute"
    astrFunctionTypes(22) = "Printing : Switch online priniting on/off"
    astrFunctionTypes(23) = "Print actual values"
    astrFunctionTypes(26) = "Screen : close"
    astrFunctionTypes(29) = "Export data"
    astrFunctionTypes(30) = "Recipe single with offline dialog"
    astrFunctionTypes(31) = "Recipe single with online dialog"
    astrFunctionTypes(32) = "Recipe single directly"
    astrFunctionTypes(33) = "Redundancy Switch"
    astrFunctionTypes(34) = "Alarm-connection : activate"
    astrFunctionTypes(35) = "Alarm-connection : inactivate"
    astrFunctionTypes(38) = "Alarm-connection : Activate / deactivate"
    astrFunctionTypes(39) = "Create ALARM.TXT file (NEW: Export alarms)"
    astrFunctionTypes(42) = "Functions on/off"
    astrFunctionTypes(43) = "Trend-values on/off"
    astrFunctionTypes(44) = "Trend-values on"
    astrFunctionTypes(45) = "Trend-values off"
    astrFunctionTypes(46) = "Archive: Start"
    astrFunctionTypes(47) = "Archive: Stop"
    astrFunctionTypes(48) = "Archive: List of active archives"
    astrFunctionTypes(49) = "Index archive"
    astrFunctionTypes(51) = "Functions on"
    astrFunctionTypes(52) = "Functions off"
    astrFunctionTypes(60) = "Command output activate"
    astrFunctionTypes(61) = "Create shift-change protocol"
    astrFunctionTypes(70) = "Login"
    astrFunctionTypes(71) = "Logout"
    astrFunctionTypes(72) = "Change password"
    astrFunctionTypes(73) = "Sound beep"
    astrFunctionTypes(74) = "Sound beep finish"
    astrFunctionTypes(76) = "Export cel"
    astrFunctionTypes(77) = "Print report"
    astrFunctionTypes(78) = "Login without password"
    astrFunctionTypes(79) = "Language change"
    astrFunctionTypes(80) = "Export Report"
    astrFunctionTypes(81) = "Create online-protocol"
    astrFunctionTypes(82) = "File operations"
    astrFunctionTypes(83) = "Driver Commands"
    astrFunctionTypes(84) = "Alarms : Acknowledge"
    astrFunctionTypes(85) = "Window to the background"
    astrFunctionTypes(86) = "Window to foreground"
    astrFunctionTypes(87) = "Focus : set to Frame"
    astrFunctionTypes(88) = "Focus : delete from Frame"
    astrFunctionTypes(89) = "Focus to the next element (look SetFocus)"
    astrFunctionTypes(90) = "Focus to the previous element (look SetFocus)"
    astrFunctionTypes(91) = "Focus : activate input to the element with the focus"
    astrFunctionTypes(92) = "Report : execute"
    astrFunctionTypes(93) = "Recipegroup Manager"
    astrFunctionTypes(95) = "Export archive"
    astrFunctionTypes(96) = "Overview Window"
    astrFunctionTypes(97) = "Edit user"
    astrFunctionTypes(98) = "Monitor assign"
    astrFunctionTypes(99) = "Alarms / Groups / Classes"
    astrFunctionTypes(100) = "Send a Message"
    astrFunctionTypes(101) = "VBA Show Visual Basic Editor"
    astrFunctionTypes(102) = "VBA Show Macro Dialog"
    astrFunctionTypes(103) = "Show PCE"
    astrFunctionTypes(104) = "VBA Execute Macro"
    astrFunctionTypes(105) = "Authorization in network"
    astrFunctionTypes(106) = "Reload project online"
    astrFunctionTypes(107) = "Show recipient-database"
    astrFunctionTypes(108) = "Alarms : Save AML and CEL memory buffer"
    astrFunctionTypes(109) = "Focus : Set"
    astrFunctionTypes(110) = "Screen with index"
    astrFunctionTypes(111) = "Alarms : Activate / deactivate alarmgroup connection"
    astrFunctionTypes(112) = "Write time to variable"
    astrFunctionTypes(113) = "Read time from variable"
    astrFunctionTypes(114) = "Alarms : delete"
    astrFunctionTypes(115) = "Send Message: activate"
    astrFunctionTypes(116) = "Send Message: deactivate"
    astrFunctionTypes(117) = "execute PFS event"
    astrFunctionTypes(118) = "Screen : Move center"
    astrFunctionTypes(119) = "Select printer"
    astrFunctionTypes(120) = "Switch online printer"
    astrFunctionTypes(121) = "Show menu"
    astrFunctionTypes(122) = "Simulate right click"
    astrFunctionTypes(123) = "Switch on/off simulation"
    astrFunctionTypes(124) = "Recipe Standard"
    astrFunctionTypes(125) = "Open help"

On Error GoTo Err_Fill_CmboBox_Pictures
    For i = 0 To ObProject.DynPictures.Count - 1
        CmboBox_Pictures.AddItem ObProject.DynPictures.Item(i).Name
    Next

    If Val(Read_ProjectINI("Straton", "Count")) = 0 Then
        ChkBox_Straton.Enabled = False
        ChkBox_Straton.value = Unchecked
    End If

Exit Sub

Err_Proj:
    LstOutput.AddItem "Error while checking CE-Flag.."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    m_bWindowsCE = True
    DoEvents
    Resume Next
    
Err_Fill_CollectFrom:
    LstOutput.AddItem "Error while filling controls.."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_KonfVarTypeLimitsProperties:
    LstOutput.AddItem "Error while filling controls(DatatypeLimitsProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_VariableProperties:
    LstOutput.AddItem "Error while filling controls(VariableProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_PictureProperties:
    LstOutput.AddItem "Error while filling controls(ScreenProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next
    
Err_Fill_LstBox_ElementProperties:
    LstOutput.AddItem "Error while filling controls(ElementProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_FunctionProperties:
    LstOutput.AddItem "Error while filling controls(FunctionProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next
    
Err_Fill_LstBox_TemplateProperties:
    LstOutput.AddItem "Error while filling controls(FrameProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RecipeProperties:
    LstOutput.AddItem "Error while filling controls(RecipeProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RecipeVariableProperties:
    LstOutput.AddItem "Error while filling controls(RecipeVariablesProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RGMVariableProperties:
    LstOutput.AddItem "Error while filling controls(RGMVariableProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RGMRecipeProperties:
    LstOutput.AddItem "Error while filling controls(RGMRecipeProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_ProjectProperties:
    LstOutput.AddItem "Error while filling controls(ProjectProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_VartypeProperties:
    LstOutput.AddItem "Error while filling controls(DatatypeProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RGMRecipeVariableProperties:
    LstOutput.AddItem "Error while filling controls(RGMRecipeVariableProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_TimeControlProperties:
    LstOutput.AddItem "Error while filling controls(TimeControlProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_ArchiveProperties:
    LstOutput.AddItem "Error while filling controls(ArchiveProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_ArchiveVariablesProperties:
    LstOutput.AddItem "Error while filling controls(ArchiveVariableProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_UserProperties:
    LstOutput.AddItem "Error while filling controls(UserProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_MenuItemProperties:
    LstOutput.AddItem "Error while filling controls(MenuProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_RemaProperties:
    LstOutput.AddItem "Error while filling controls(RemaProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next
    
Err_Fill_LstBox_StateProperties:
    LstOutput.AddItem "Error while filling controls(StateProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_LstBox_Limits:
    LstOutput.AddItem "Error while filling controls(LimitProperties).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next

Err_Fill_CmboBox_Pictures:
    LstOutput.AddItem "Error while filling controls(Screens).."
    LstOutput.ListIndex = LstOutput.ListCount - 1
    DoEvents
    Resume Next
End Sub

Sub RestoreSettings(bXMLError As Boolean)
Dim ObProject As Project
Dim i As Integer
Dim strTEMP As String

Set ObProject = MyWorkspace.ActiveDocument
'Default Values = XML-load has failed or the Default Settings Button has been clicked
If (bXMLError) Then
    'Init Checkboxes in Wizard
        ChkBox_Project = "True"
        ChkBox_Variables = "True"
        ChkBox_InclVariableUsage = "False"
        ChkBox_InclVarLimits = "False"
        ChkBox_Datatypes = "False"
        ChkBox_InclVarTypesLimits = "False"
        ChkBox_Pictures = "True"
        ChkBox_InclHardcopy = "True" 'make Screenshot
        ChkBox_FrameHardcopy = "True" 'Draw black Border around Screenshot
        ChkBox_InclPictureTree = "True" 'Create PictureTree
        If (Not ObProject.DynProperties("StartPictureName") = "") Then 'Is the Startpicture-Property of the Projet filled?
            OptBtn_PictTreeviaPicture = "True" 'Start with selected Picture
            CmboBox_Pictures = ObProject.DynProperties("StartPictureName") 'Select the Startpicture-Property as Picture
        End If
        ChkBox_Functions = "True"
        ChkBox_InclFunctionUsage = "False"
        ChkBox_Templates = "True"
        ChkBox_Recipes = "False"
        ChkBox_RGM = "False"
        ChkBox_Drivers = "True"
        ChkBox_Scripts = "False"
        ChkBox_TimeControls = "False"
        ChkBox_Archives = "False"
        ChkBox_Users = "False"
        ChkBox_Menus = "False"
        ChkBox_Remas = "False"
        ChkBox_Straton = "False"
    
    'Default Preselections for Listboxes
        strVariableProperties_Selection = C_STR_VARIABLE_PROPERTIES_SELECTED
        strPictureProperties_Selection = C_STR_PICTURE_PROPERTIES_SELECTED
        strPictureElementProperties_Selection = C_STR_PICTURE_ELEMENT_PROPERTIES_SELECTED
        strVartypeLimitProperties_Selection = C_STR_VARTYPE_LIMIT_PROPERTIES_SELECTED
        strFunctionProperties_Selection = C_STR_FUNCTION_PROPERTIES_SELECTED
        strTemplateProperties_Selection = C_STR_TEMPLATE_PROPERTIES_SELECTED
        strRecipeProperties_Selection = C_STR_RECIPE_PROPERTIES_SELECTED
        strRecipeVariablesProperties_Selection = C_STR_RECIPE_VARIABLES_PROPERTIES_SELECTED
        strRGMVariablesProperties_Selection = C_STR_RGM_VARIABLES_PROPERTIES_SELECTED
        strRGMRecipeProperties_Selection = C_STR_RGM_RECIPE_PROPERTIES_SELECTED
        strProjectProperties_Selection = C_STR_PROJECT_PROPERTIES_SELECTED
        strDatatypeProperties_Selection = C_STR_DATATYPE_PROPERTIES_SELECTED
        strRGMRecipePropertiesVariables_Selection = C_STR_RGM_RECIPE_PROPERTIES_VARIABLES_SELECTED
        strTimeProperties_Selection = C_STR_TIME_PROPERTIES_SELECTED
        strArchiveProperties_Selection = C_STR_ARCHIVE_PROPERTIES_SELECTED
        strArchiveVariablesProperties_Selection = C_STR_ARCHIVE_VARIABLES_PROPERTIES_SELECTED
        strRemaProperties_Selection = C_STR_REMA_PROPERTIES_SELECTED
        strStateProperties_Selection = C_STR_STATE_PROPERTIES_SELECTED
        strVarLimitProperties_Selection = C_STR_VAR_LIMIT_PROPERTIES_SELECTED
        strMenuProperties_Selection = C_STR_MENU_PROPERTIES_SELECTED
        strUserProperties_Selection = C_STR_USER_PROPERTIES_SELECTED
        
    'DestinationPaths
        PR_strDestination = PR_strMyDocuments & PR_obProject.Name & "\"
        lblDestination.Caption = PR_strMyDocuments & PR_obProject.Name & "\"
        
    'Make Hardcopies max. xx cm wide
        m_TxtBox_HardcopyMaxWide.value = 8
        
        CmdBtn_KonfVar_Less_Click
        CmdBtn_KonfArchive_Less_Click
        CmdBtn_KonfPict_Less_Click
        CmdBtn_KonfPictElem_Less_Click
        CmdBtn_KonfMenus_Less_Click
        CmdBtn_KonfRemas_State_Less_Click
        CmdBtn_KonfVarTypes_Less_Click
End If


    'Preselect Default-Values or Saved Values in Listboxes
    For i = 0 To LstBox_VariableProperties.ListCount - 1
        strTEMP = LstBox_VariableProperties.List(i)
        If (InStr(1, strVariableProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_VariableProperties.Selected(i) = True
        Else
            LstBox_VariableProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_PictureProperties.ListCount - 1
        strTEMP = LstBox_PictureProperties.List(i)
        If (InStr(1, strPictureProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_PictureProperties.Selected(i) = True
        Else
            LstBox_PictureProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_ElementProperties.ListCount - 1
        strTEMP = LstBox_ElementProperties.List(i)
        If (InStr(1, strPictureElementProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_ElementProperties.Selected(i) = True
        Else
            LstBox_ElementProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
        strTEMP = LstBox_KonfVarTypeLimitsProperties.List(i)
        If (InStr(1, strVartypeLimitProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_KonfVarTypeLimitsProperties.Selected(i) = True
        Else
            LstBox_KonfVarTypeLimitsProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_FunctionProperties.ListCount - 1
        strTEMP = LstBox_FunctionProperties.List(i)
        If (InStr(1, strFunctionProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_FunctionProperties.Selected(i) = True
        Else
            LstBox_FunctionProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_TemplateProperties.ListCount - 1
        strTEMP = LstBox_TemplateProperties.List(i)
        If (InStr(1, strTemplateProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_TemplateProperties.Selected(i) = True
        Else
            LstBox_TemplateProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RecipeProperties.ListCount - 1
        strTEMP = LstBox_RecipeProperties.List(i)
        If (InStr(1, strRecipeProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RecipeProperties.Selected(i) = True
        Else
            LstBox_RecipeProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
        strTEMP = LstBox_RecipeVariableProperties.List(i)
        If (InStr(1, strRecipeVariablesProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RecipeVariableProperties.Selected(i) = True
        Else
            LstBox_RecipeVariableProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
        strTEMP = LstBox_RGMVariableProperties.List(i)
        If (InStr(1, strRGMVariablesProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RGMVariableProperties.Selected(i) = True
        Else
            LstBox_RGMVariableProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
        strTEMP = LstBox_RGMRecipeProperties.List(i)
        If (InStr(1, strRGMRecipeProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RGMRecipeProperties.Selected(i) = True
        Else
            LstBox_RGMRecipeProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_ProjectProperties.ListCount - 1
        strTEMP = LstBox_ProjectProperties.List(i)
        If (InStr(1, strProjectProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_ProjectProperties.Selected(i) = True
        Else
            LstBox_ProjectProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_Vartypes.ListCount - 1
        strTEMP = LstBox_Vartypes.List(i)
        If (InStr(1, strDatatypeProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_Vartypes.Selected(i) = True
        Else
            LstBox_Vartypes.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
        strTEMP = LstBox_RGMRecipeVariableProperties.List(i)
        If (InStr(1, strRGMRecipePropertiesVariables_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RGMRecipeVariableProperties.Selected(i) = True
        Else
            LstBox_RGMRecipeVariableProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_TimeControlProperties.ListCount - 1
        strTEMP = LstBox_TimeControlProperties.List(i)
        If (InStr(1, strTimeProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_TimeControlProperties.Selected(i) = True
        Else
            LstBox_TimeControlProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_ArchiveProperties.ListCount - 1
        strTEMP = LstBox_ArchiveProperties.List(i)
        If (InStr(1, strArchiveProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_ArchiveProperties.Selected(i) = True
        Else
            LstBox_ArchiveProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_ArchiveVariablesProperties.ListCount - 1
        strTEMP = LstBox_ArchiveVariablesProperties.List(i)
        If (InStr(1, strArchiveVariablesProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_ArchiveVariablesProperties.Selected(i) = True
        Else
            LstBox_ArchiveVariablesProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_UserProperties.ListCount - 1
        strTEMP = LstBox_UserProperties.List(i)
        If (InStr(1, strUserProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_UserProperties.Selected(i) = True
        Else
            LstBox_UserProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_MenuItemProperties.ListCount - 1
        strTEMP = LstBox_MenuItemProperties.List(i)
        If (InStr(1, strMenuProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_MenuItemProperties.Selected(i) = True
        Else
            LstBox_MenuItemProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_RemaProperties.ListCount - 1
        strTEMP = LstBox_RemaProperties.List(i)
        If (InStr(1, strRemaProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_RemaProperties.Selected(i) = True
        Else
            LstBox_RemaProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_StateProperties.ListCount - 1
        strTEMP = LstBox_StateProperties.List(i)
        If (InStr(1, strStateProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_StateProperties.Selected(i) = True
        Else
            LstBox_StateProperties.Selected(i) = False
        End If
    Next
    For i = 0 To LstBox_VarLimits.ListCount - 1
        strTEMP = LstBox_VarLimits.List(i)
        If (InStr(1, strVarLimitProperties_Selection, "|" & strTEMP & "|") > 0) Then
            LstBox_VarLimits.Selected(i) = True
        Else
            LstBox_VarLimits.Selected(i) = False
        End If
    Next
End Sub

'****************************************************************************
' Methode:      UserForm_QueryClose(....)
' Parameter:    Cancel As Integer, CloseMode As Integer
' Description:  Close the wizard
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Unload Me
End Sub

'****************************************************************************
' Methode:      cmdBack_Click()
' Parameter:
' Description:  Switch to the previous Page (when available).
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub cmdBack_Click()
Dim nIncrement As Integer
    nIncrement = 1
    If mpgWizardPage.value > 0 Then
        Do
            If mpgWizardPage.Pages.Item(mpgWizardPage.value - nIncrement).Visible = True Then
                mpgWizardPage.value = mpgWizardPage.value - nIncrement
                Exit Do
            End If
            nIncrement = nIncrement + 1
        Loop
    End If
End Sub

'****************************************************************************
' Methode:      cmdNext_Click()
' Parameter:
' Description:  Switch to the next Page (when available).
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub cmdNext_Click()
Dim nIncrement As Integer
    nIncrement = 1
    If mpgWizardPage.value < mpgWizardPage.Pages.Count - 1 Then
        Do
            If mpgWizardPage.Pages.Item(mpgWizardPage.value + nIncrement).Visible = True Then
                mpgWizardPage.value = mpgWizardPage.value + nIncrement
                Exit Do
            End If
            nIncrement = nIncrement + 1
        Loop
    End If
End Sub

'****************************************************************************
' Methode:      mpgWizardPage_Change()
' Parameter:
' Description:  The page index changed, disable/enable the buttons
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub mpgWizardPage_Change()
    Select Case mpgWizardPage.Pages.Item(mpgWizardPage.value).Caption
        Case "Welcome" 'Start Page
            cmdBack.Visible = False
            cmdNext.Visible = True
            cmdFinish.Enabled = False
        Case "Finish"
            cmdBack.Visible = True
            cmdNext.Visible = False
            cmdFinish.Enabled = False
        Case Else
            cmdBack.Visible = True
            cmdNext.Visible = True
            cmdFinish.Enabled = True
    End Select
End Sub

'****************************************************************************
' Methode:      cmdCancel_Click()
' Parameter:
' Description:  Cancel and Close the wizard
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub cmdCancel_Click()
    Unload Me
End Sub

'****************************************************************************
' Methode:      cmdFinish_Click()
' Parameter:
' Description:  The user has selected the required modules, gather information
'               and create the output-file(s)
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub cmdFinish_Click()
Dim nListIndex As Integer
    LstOutput.Clear
    mpgWizardPage.Pages.Item(19).Enabled = True
    NavigateToMultiPage ("Finish")
    CollectInformation
    LogMessage " "
    LogMessage "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    LogMessage "THE WIZARD WILL BE CLOSED IN 3 SECONDs"
    LogMessage "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    cmdFinish.Enabled = False
    cmdCancel.Enabled = True
    Sleep (3000)
    Unload Me
End Sub

'****************************************************************************
' Methode:      CollectInformation()
' Parameter:
' Description:  Create the root item of the xml file and call the collect
'               routines for the selected modules.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectInformation()
Dim nFreeFileNumber As Integer
Dim XLSDoc As MSXML2.DOMDocument
Dim XMLSettingsDoc As MSXML2.DOMDocument
Dim xpi As MSXML2.IXMLDOMProcessingInstruction
Dim VariableUsageGroup As MSXML2.IXMLDOMElement
Dim FunctionUsageGroup As MSXML2.IXMLDOMElement
Dim ObProject As Project
Dim XMLTemp As MSXML2.IXMLDOMElement
Dim XMLDocIndex As MSXML2.DOMDocument
Dim XMLItemIndex As MSXML2.IXMLDOMElement
Dim XMLDoc As MSXML2.DOMDocument

LogMessage "Preparing output location.."
    
    'Disable Cancel-Button
        cmdCancel.Enabled = False
    
    'Create Project-Folder if necessary
        On Error GoTo Err_CreateProjectFolder
            If (PR_strDestinationDefaultValue) Then
                If Not (CreateFolder(PR_strMyDocuments, PR_obProject.Name)) Then
                    LogMessage "Error Creating the Project-Folder!"
                    Exit Sub
                End If
            End If
        
    On Error GoTo Err_Main
        
        'Add Project-name
            Set ObProject = MyWorkspace.ActiveDocument
            Dim obScript As Script
            Dim obFunction As RtFunction
            Dim obVariable As Variable
            Dim obPicture As DynPicture
            Dim i As Integer
                
        If XMLSettingsDoc Is Nothing Then
        'Save current Settings
            Set XMLSettingsDoc = CreateObject("Microsoft.XMLDOM")
            Set XMLSettingsDoc = CollectInformationForSaveSettings(ObProject, XMLSettingsDoc)
        'Get Destinationpath
            Dim strDestPath As String
'            strDestPath = MyWorkspace.Application.Path
'            strDestPath = Replace(strDestPath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
            'RF: NEW Method >= 6.21!
            strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
            strDestPath = strDestPath & "Wizards\DocuWizard\LastSettings.xml"
        'Save XML
            XMLSettingsDoc.Save (strDestPath)
        End If
        
        If (Not ObProject Is Nothing) Then
    
            'Create XML-Document
                Call CreateDOMDoc(0)
                Set XMLDocIndex = curXMLDoc
                Set XMLItemIndex = curXMLItem
                
            'Image
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 0, 0, "header", "", "", "img")
                
            'Document-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 0, 0, "content", "CONTENT", "CONTENT", "name")
    
            If (ChkBox_Project) Then
            'Project
                'Get a color for the current Module
                    Call GetColorForTable
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Project", C_PATHFILE_PROJECTINFO, "href")
                'Collect Information about the Project
                    CollectProjectInformation ObProject
            End If
            If ChkBox_Variables Then
            'Variables -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Variables", C_PATHFILE_VARIABLES_MAIN, "href")
            'Variables List -- sub
                'Increase Subchapter-Counter and Add Index-SubItem
                    nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables List", C_PATHFILE_VARIABLES_MAIN, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                'Collect Information about the Variables in the Project
                    CollectVariableInformation ObProject
            'Variables Limits -- sub
                If (ChkBox_InclVarLimits) Then
                    'Increase Chapter-Counter and Add Index-Item
                        nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables Limits", C_PATHFILE_VARIABLES_LIMITS, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                    'Collect Information about the used Variable-Limits in the Project
                        CollectVariableLimits ObProject
                End If
            'Variables Usage -- sub
                If (ChkBox_InclVariableUsage) Then
                    'Increase Chapter-Counter and Add Index-Item
                        nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables Usage", C_PATHFILE_VARIABLES_USAGE, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                    'Collect Information about the VariableUsage in the Project
                        CollectVariableUsageInformation ObProject
                End If
            End If
            If (ChkBox_Datatypes) Then
            'Datatypes -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Datatypes", C_PATHFILE_VARTYPES, "href")
                'Increase Subchapter-Counter and Add Index-Item
                    nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes Tree", C_PATHFILE_VARTYPES, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                    nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes List", C_PATHFILE_VARTYPES, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                'Collect Information about the DataTypes in the Project
                    CollectDatatypesInformation ObProject, XMLDoc, XLSDoc
            'Datatypes Limits -- sub
                If (ChkBox_InclVarTypesLimits) Then
                    'Increase Subchapter-Counter and Add Index-Item
                        nCounterSubChapters = nCounterSubChapters + 1
                        Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes Limits", C_PATHFILE_VARTYPES_LIMITS, "href")
                            XMLTemp.setAttribute "style", "margin-left:25px"
                    'Collect Information about the used Variable-Limits in the Project
                        CollectDatatypeLimits ObProject, XMLDoc
                End If
            End If
            If ChkBox_Pictures Then
            'Pictures -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Screens", C_PATHFILE_PICTURES, "href")
            'Pictures List & Details -- sub
                'Collect Information about the Picture and their Elements in the Project. This Function does also
                    'Increase Chapter-Counter and Add Index-Item
                        nCounterSubChapters = nCounterSubChapters + 1
                        Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Screens List", C_PATHFILE_PICTURES, "href")
                            XMLTemp.setAttribute "style", "margin-left:25px"
                'collect the Information for the Element-Tree's
                    CollectPictureInformation ObProject
            'PictureTree -- sub
                If (ChkBox_InclPictureTree) Then
                    'Increase Chapter-Counter and Add Index-Item
                        nCounterSubChapters = nCounterSubChapters + 1
                        Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Screen Tree", C_PATHFILE_PICTURETREE, "href")
                            XMLTemp.setAttribute "style", "margin-left:25px"
                    'Collect Information for the PictureTree analyzing e.g. the StartFunction in Pictures or other Functions in Elements
                        CollectPictureTreeInformation ObProject, XMLDoc
                End If
            End If
            If ChkBox_Functions Then
            'Functions -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Functions", C_PATHFILE_FUNCTIONS, "href")
                'Increase SubChapter-Counter and Add Index-SubItem
                    nCounterSubChapters = nCounterSubChapters + 1
                    Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Functions List", C_PATHFILE_FUNCTIONS, "href")
                        XMLTemp.setAttribute "style", "margin-left:25px"
                'Collect Information about the Functions in the Project
                    CollectFunctions ObProject, XMLDoc
            'Functions Usage -- sub
                If (ChkBox_InclFunctionUsage) Then
                    'Increase SubChapter-Counter and Add Index-SubItem
                        nCounterSubChapters = nCounterSubChapters + 1
                        Set XMLTemp = AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & nCounterSubChapters & ". " & "Functions Usage", C_PATHFILE_FUNCTIONS_USAGE, "href")
                            XMLTemp.setAttribute "style", "margin-left:25px"
                    'Collect Information about the Usage of Functions in this Project
                        CollectFunctionUsageInformation ObProject, XMLDoc, FunctionUsageGroup
                End If
            End If
            If ChkBox_Templates Then
            'Templates -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Frames", C_PATHFILE_TEMPLATES, "href")
                'Collect Information about the Templates in the Project
                    CollectTemplateInformation ObProject, XMLDoc
            End If
            If ChkBox_Recipes Then
            'Recipes -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Recipes", C_PATHFILE_RECIPES, "href")
                'Collect Information about the Recipes in the Project
                    CollectRecipeInformation ObProject, XMLDoc
            End If
            If ChkBox_RGM Then
            'RGM -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Recipe Group Manager", C_PATHFILE_RGM, "href")
                'Collect the Information in the RecipeGroupManager in the Project
                    CollectRGMInformation ObProject, XMLDoc
            End If
            If ChkBox_Drivers Then
            'Drivers -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Drivers", C_PATHFILE_DRIVERS, "href")
                'Collect Information about the Drivers in the Project
                    CollectDriverInformation ObProject, XMLDoc
            End If
            If ChkBox_Scripts Then
            'Scripts -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Scripts", C_PATHFILE_SCRIPTS, "href")
                'Collect Information about the Scripts in the Project and the Functions that are used in the Scripts
                    CollectScriptsInformation ObProject, XMLDoc
            End If
            If ChkBox_TimeControls Then
            'TimeControls -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "TimeControls", C_PATHFILE_TIMECONTROLS, "href")
                'Collect Information about the TimeControls in the Project
                    CollectTimeControlInformation ObProject, XMLDoc
            End If
            If ChkBox_Archives Then
            'Archives -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Historian", C_PATHFILE_ARCHIVES, "href")
                'Collect Information about the Archives in the Project
                    CollectArchiveInformation ObProject, XMLDoc
            End If
            If ChkBox_Users Then
            'Users -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Users", C_PATHFILE_USERS, "href")
                'Collect Information about the Users in the Project
                    CollectUserInformation ObProject, XMLDoc
            End If
            If ChkBox_Menus Then
            'Menus -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Menus", C_PATHFILE_MENUS, "href")
                'Collect Information about the MenuItems in the Project
                    CollectMenus ObProject, XMLDoc
            End If
            If ChkBox_Remas Then
            'Remas -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Increase Chapter-Counter and Add Index-Item
                    nCounterChapters = nCounterChapters + 1
                    Call AddHTMLTitle(XMLDocIndex, XMLItemIndex, 0, 0, "indexitem", nCounterChapters & ". " & "Remas", C_PATHFILE_REMAS, "href")
                'Collect Information about the Projects Remas and their States
                    CollectREMAInformation ObProject, XMLDoc
            End If
            If ChkBox_Straton Then
            'Straton -- main
                'Get a color for the current Module
                    Call GetColorForTable
                'Reset Subchapter-Counter
                    nCounterSubChapters = 0
                'Collect Information about the Projects Remas and their States
                    CollectStratonInformation ObProject, XMLDocIndex, XMLItemIndex
            End If
        End If
        
        'Create and Fill the Systemfolder with the files needed for the html-output
            If Not (CreateAndFillSystemfolder) Then
                LogMessage "Error creating or filling the Systemfolder!"
            End If
    
        'Write Index-File
            If Not (SaveXMLFileAsHTML(XMLDocIndex, C_PATHFILE_INDEX)) Then
                LogMessage ("Error while Saving Index-File!")
            End If
        
'Free Memory
    Set ObProject = Nothing
    Set PR_obProject = Nothing
    Set PR_Var_PropertiesForPictures = Nothing
    Set PR_Var_PropertiesForVariables = Nothing
    Set XSLPictureTreeCtrlBase = Nothing
    Set Indexparent = Nothing
    Set astrVariableUsage = Nothing
    Set astrFunctionUsage = Nothing
    Set astrPictureTypes = Nothing
    Set astrFunctionTypes = Nothing
    Set astrElementTypes = Nothing
    Set astrProps_MenuItems = Nothing
    ReDim strArrWantedPropertiesElements(0 To 0) As String
    Set curXMLDoc = Nothing
    Set curXMLItem = Nothing
    Set PR_XMLWorkspace = Nothing
    Set PR_XLSRoot = Nothing
    Set PR_XSLBody = Nothing
    Set PR_XSL_ColumnHeader = Nothing
    Set PR_XSL_DataHeader = Nothing
    Set PR_XSLDoc = Nothing
    Set XLSDoc = Nothing
    Set XMLSettingsDoc = Nothing
    Set xpi = Nothing
    Set VariableUsageGroup = Nothing
    Set FunctionUsageGroup = Nothing
    Set XMLTemp = Nothing
    Set XMLDocIndex = Nothing
    Set XMLItemIndex = Nothing
    Set XMLDoc = Nothing
    Set obScript = Nothing
    Set obFunction = Nothing
    Set obVariable = Nothing
    Set obPicture = Nothing
            
    LogMessage "Output Finished!"
Exit Sub
Err_CreateProjectFolder:
    If Not (Err.Number = 58) Then '58 = Folder exists
        LogMessage ("Error while Creating Project-Folder!")
    End If
    Resume Next
Err_Main:
    Resume Next
End Sub

'Create the System-Folder for the output and fill it with the files needed for the HTML
Private Function CreateAndFillSystemfolder() As Boolean

    'Create System-Folder if necessary
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_SYSTEM)) Then
        LogMessage "Error creating System-Folder!"
        CreateAndFillSystemfolder = False
        Exit Function
    End If
        
On Error GoTo ErrHandler:
    'Get the Wizard-Directory in the ZenOn-Resources
        Dim strSourcePath As String
        Dim strDestPath As String
'        strSourcePath = MyWorkspace.Application.Path
        strDestPath = PR_strDestination & C_PATHFOLDER_SYSTEM & "\"
'        strSourcePath = Replace(strSourcePath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
        'RF: NEW Method >= 6.21!
        strSourcePath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
        strSourcePath = strSourcePath & "Wizards\DocuWizard\FilesForHTML\"
    'Copy Icons and the CSS-File to the Destination-Directory
        FileCopy strSourcePath & "DocuWizardHeader.jpg", strDestPath & "DocuWizardHeader.jpg"
        FileCopy strSourcePath & "open.gif", strDestPath & "open.gif"
        FileCopy strSourcePath & "error.gif", strDestPath & "error.gif"
        FileCopy strSourcePath & "more.gif", strDestPath & "more.gif"
        FileCopy strSourcePath & "pic.gif", strDestPath & "pic.gif"
        FileCopy strSourcePath & "doc.gif", strDestPath & "doc.gif"
        FileCopy strSourcePath & "docuwizard.css", strDestPath & "docuwizard.css"
        FileCopy strSourcePath & "symbol.gif", strDestPath & "symbol.gif"
        FileCopy strSourcePath & "PulldownItem.bmp", strDestPath & "PulldownItem.bmp"
        FileCopy strSourcePath & "Pulldown.bmp", strDestPath & "Pulldown.bmp"
        FileCopy strSourcePath & "Popup.bmp", strDestPath & "Popup.bmp"
        FileCopy strSourcePath & "datatype.gif", strDestPath & "datatype.gif"
        FileCopy strSourcePath & "structured_datatype.gif", strDestPath & "structured_datatype.gif"
        FileCopy strSourcePath & "structured_element_embedded.gif", strDestPath & "structured_element_embedded.gif"
        FileCopy strSourcePath & "structured_element_linked.gif", strDestPath & "structured_element_linked.gif"
        FileCopy strSourcePath & "activex_element.gif", strDestPath & "activex_element.gif"
        FileCopy strSourcePath & "arc_of_circle.gif", strDestPath & "arc_of_circle.gif"
        FileCopy strSourcePath & "activex_element.gif", strDestPath & "activex_element.gif"
        FileCopy strSourcePath & "activex_element.gif", strDestPath & "activex_element.gif"
        FileCopy strSourcePath & "bar_graph.gif", strDestPath & "bar_graph.gif"
        FileCopy strSourcePath & "binary_element.gif", strDestPath & "binary_element.gif"
        FileCopy strSourcePath & "bitmap_button.gif", strDestPath & "bitmap_button.gif"
        FileCopy strSourcePath & "circle.gif", strDestPath & "circle.gif"
        FileCopy strSourcePath & "clock.gif", strDestPath & "clock.gif"
        FileCopy strSourcePath & "combi_element.gif", strDestPath & "combi_element.gif"
        FileCopy strSourcePath & "combo_listbox.gif", strDestPath & "combo_listbox.gif"
        FileCopy strSourcePath & "command_element.gif", strDestPath & "command_element.gif"
        FileCopy strSourcePath & "default.gif", strDestPath & "default.gif"
        FileCopy strSourcePath & "indicating_instrument.gif", strDestPath & "indicating_instrument.gif"
        FileCopy strSourcePath & "invisible_button.gif", strDestPath & "invisible_button.gif"
        FileCopy strSourcePath & "line.gif", strDestPath & "line.gif"
        FileCopy strSourcePath & "link_text.gif", strDestPath & "link_text.gif"
        FileCopy strSourcePath & "message.gif", strDestPath & "message.gif"
        FileCopy strSourcePath & "moved_symbol.gif", strDestPath & "moved_symbol.gif"
        FileCopy strSourcePath & "multibin.gif", strDestPath & "multibin.gif"
        FileCopy strSourcePath & "numerical_value.gif", strDestPath & "numerical_value.gif"
        FileCopy strSourcePath & "picture_alarm.gif", strDestPath & "picture_alarm.gif"
        FileCopy strSourcePath & "polygon.gif", strDestPath & "polygon.gif"
        FileCopy strSourcePath & "polyline.gif", strDestPath & "polyline.gif"
        FileCopy strSourcePath & "rectangle.gif", strDestPath & "rectangle.gif"
        FileCopy strSourcePath & "rounded_rectangle.gif", strDestPath & "rounded_rectangle.gif"
        FileCopy strSourcePath & "static_text.gif", strDestPath & "static_text.gif"
        FileCopy strSourcePath & "switch.gif", strDestPath & "switch.gif"
        FileCopy strSourcePath & "text_button.gif", strDestPath & "text_button.gif"
        FileCopy strSourcePath & "trend_curve.gif", strDestPath & "trend_curve.gif"
        FileCopy strSourcePath & "tube.gif", strDestPath & "tube.gif"
        FileCopy strSourcePath & "universal_slider.gif", strDestPath & "universal_slider.gif"

CreateAndFillSystemfolder = True
Exit Function

ErrHandler:
    LogMessage "Error copying Files to Systemfolder!"
    CreateAndFillSystemfolder = False
    Exit Function
End Function


'****************************************************************************
' Methode:      ConvertLongToDate(...) As String
' Parameter:    lTime As Long
' Description:  Converts from long (seconds since 1970) to "Date"-String
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function ConvertLongToDate(lTime As Long) As String
Dim dDate As Date
Dim lTimeLeft As Long
Dim lDaysPassed As Long
lDaysPassed = lTime \ 86400
lTimeLeft = lTime - (lDaysPassed * 86400)
If lTimeLeft > 0 Then
    lDaysPassed = lDaysPassed + 1
End If
dDate = CDate("1.1.1970")
dDate = dDate + lDaysPassed
ConvertLongToDate = ConvertLongToDate & " " & Str(dDate)
End Function

Private Sub CollectRGMInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim nSelectedCount_RGMVariable As Integer
Dim nSelectedCount_RGMRecipe As Integer
Dim nSelectedCount_RGMRecipeVars As Integer
Dim obRGMGroup As RGMRecipeGroup
Dim obRGMRecipe As RGMRecipe
Dim obRGMValue As RGMRecipeValue
Dim obRGMVariable As RGMRecipeVar
Dim nRGMGroupsIndex As Integer
Dim nRGMRecipesIndex As Integer
Dim nRGMVariablesIndex As Integer
Dim nRGMValuesIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim strArrWantedPropertiesRGMVariable() As String
Dim strArrWantedPropertiesRGMRecipe() As String
Dim strArrWantedPropertiesRGMRecipeValue() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strVarArray() As String
Dim obVarArrObjects() As RGMRecipeVar
Dim strVarArrUsableDynProperties() As String
Dim nCurVarArrDim As Integer
Dim strValArray() As String
Dim obValArrObjects() As RGMRecipeValue
Dim strValArrUsableDynProperties() As String
Dim nCurValArrDim As Integer

ReDim strVarArray(1 To (C_COLS_RGMVARIABLESLIST + 1), 1 To 3) As String
ReDim obVarArrObjects(1 To C_COLS_RGMVARIABLESLIST) As RGMRecipeVar
ReDim strVarArrUsableDynProperties(1 To C_COLS_RGMVARIABLESLIST) As String
nCurVarArrDim = 1

ReDim strValArray(1 To (C_COLS_RGMRECIPEVALUESLIST + 1), 1 To 3) As String
ReDim obValArrObjects(1 To C_COLS_RGMRECIPEVALUESLIST) As RGMRecipeValue
ReDim strValArrUsableDynProperties(1 To C_COLS_RGMRECIPEVALUESLIST) As String
nCurValArrDim = 1

'Initialize RGMRecipeProperties for Translation
Dim astrProps_RGMRecipeProperties(1 To 5, 1 To 2)
    astrProps_RGMRecipeProperties(1, 1) = "Password Level"
    astrProps_RGMRecipeProperties(1, 2) = "PWLevel"
    astrProps_RGMRecipeProperties(2, 1) = "Recipe Name"
    astrProps_RGMRecipeProperties(2, 2) = "RecipeName"
    astrProps_RGMRecipeProperties(3, 1) = "Recipe Number"
    astrProps_RGMRecipeProperties(3, 2) = "RecipeNumber"
    astrProps_RGMRecipeProperties(4, 1) = "Timeout [ms]"
    astrProps_RGMRecipeProperties(4, 2) = "WriteTimeout"
    astrProps_RGMRecipeProperties(5, 1) = "Write synchronous"
    astrProps_RGMRecipeProperties(5, 2) = "WriteSync"

'Initialize RGMRecipeVariablesProperties for Translation
Dim astrProps_RGMRecipeVarsProperties(1 To 4, 1 To 2)
    astrProps_RGMRecipeVarsProperties(1, 1) = "Source Variable"
    astrProps_RGMRecipeVarsProperties(1, 2) = "SourceVar"
    astrProps_RGMRecipeVarsProperties(2, 1) = "String Value"
    astrProps_RGMRecipeVarsProperties(2, 2) = "StringValue"
    astrProps_RGMRecipeVarsProperties(3, 1) = "Value"
    astrProps_RGMRecipeVarsProperties(3, 2) = "Value"
    astrProps_RGMRecipeVarsProperties(4, 1) = "Variable"
    astrProps_RGMRecipeVarsProperties(4, 2) = "Variable"

'Initialize RGMVariablesProperties for Translation
Dim astrProps_RGMVarsProperties(1 To 3, 1 To 2)
    astrProps_RGMVarsProperties(1, 1) = "Max"
    astrProps_RGMVarsProperties(1, 2) = "Max"
    astrProps_RGMVarsProperties(2, 1) = "Min"
    astrProps_RGMVarsProperties(2, 2) = "Min"
    astrProps_RGMVarsProperties(3, 1) = "Variable"
    astrProps_RGMVarsProperties(3, 2) = "Variable"

On Error GoTo Err_CollectRGMInformation

'Get the Selected RGMVariableProperties from Control
    'Count selected entries
        For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
            If (LstBox_RGMVariableProperties.Selected(i)) Then
                nSelectedCount_RGMVariable = nSelectedCount_RGMVariable + 1
            End If
        Next
    If (nSelectedCount_RGMVariable > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedPropertiesRGMVariable(1 To nSelectedCount_RGMVariable, 1 To 2)
            j = 1
            For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
                If (LstBox_RGMVariableProperties.Selected(i)) Then
                    strArrWantedPropertiesRGMVariable(j, 1) = LstBox_RGMVariableProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedPropertiesRGMVariable)
                    strTEMP = strArrWantedPropertiesRGMVariable(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_RGMVarsProperties)
                            If (astrProps_RGMVarsProperties(j, 1) = strTEMP) Then
                                strArrWantedPropertiesRGMVariable(i, 2) = astrProps_RGMVarsProperties(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
'Get the Selected RGMRecipeProperties from Control
    'Count selected entries
        For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
            If (LstBox_RGMRecipeProperties.Selected(i)) Then
                nSelectedCount_RGMRecipe = nSelectedCount_RGMRecipe + 1
            End If
        Next
    If (nSelectedCount_RGMRecipe > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedPropertiesRGMRecipe(1 To nSelectedCount_RGMRecipe, 1 To 2)
            j = 1
            For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
                If (LstBox_RGMRecipeProperties.Selected(i)) Then
                    strArrWantedPropertiesRGMRecipe(j, 1) = LstBox_RGMRecipeProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedPropertiesRGMRecipe)
                    strTEMP = strArrWantedPropertiesRGMRecipe(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_RGMRecipeProperties)
                            If (astrProps_RGMRecipeProperties(j, 1) = strTEMP) Then
                                strArrWantedPropertiesRGMRecipe(i, 2) = astrProps_RGMRecipeProperties(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
'Get the Selected RGMRecipeVariableProperties from Control
    'Count selected entries
        For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
            If (LstBox_RGMRecipeVariableProperties.Selected(i)) Then
                nSelectedCount_RGMRecipeVars = nSelectedCount_RGMRecipeVars + 1
            End If
        Next
    If (nSelectedCount_RGMRecipeVars > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedPropertiesRGMRecipeValue(1 To nSelectedCount_RGMRecipeVars, 1 To 2)
            j = 1
            For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
                If (LstBox_RGMRecipeVariableProperties.Selected(i)) Then
                    strArrWantedPropertiesRGMRecipeValue(j, 1) = LstBox_RGMRecipeVariableProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedPropertiesRGMRecipeValue)
                    strTEMP = strArrWantedPropertiesRGMRecipeValue(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_RGMRecipeVarsProperties)
                            If (astrProps_RGMRecipeVarsProperties(j, 1) = strTEMP) Then
                                strArrWantedPropertiesRGMRecipeValue(i, 2) = astrProps_RGMRecipeVarsProperties(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
    LogMessage ("Collecting RecipeGroupManager information..")

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "Recipe Group Manager", "Recipe Group Manager", "name")
    
    For nRGMGroupsIndex = 0 To (ObProject.RGMGroups.Count) - 1
        Set obRGMValue = Nothing
        Set obRGMRecipe = Nothing
        Set obRGMVariable = Nothing
        Set obRGMGroup = Nothing
        Set obRGMGroup = ObProject.RGMGroups.Item(nRGMGroupsIndex)
        If (Not obRGMGroup Is Nothing) Then
            'Sub-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", "Recipe-Group: " & obRGMGroup.DynProperties("Name"), "RGM-Group[Entry-Name='" & obRGMGroup.DynProperties("Name") & "']", "name")
            'Loop RGM-Variables
                For nRGMVariablesIndex = 0 To (obRGMGroup.VariableCount) - 1
                    Set obRGMVariable = Nothing
                    Set obRGMVariable = obRGMGroup.VariableItem(nRGMVariablesIndex)
                    If (Not obRGMVariable Is Nothing) Then
                        'Save Object in Array
                            Set obVarArrObjects(nCurVarArrDim) = obRGMVariable
                        If (nCurVarArrDim = C_COLS_RGMVARIABLESLIST Or nRGMVariablesIndex = (obRGMGroup.VariableCount) - 1) Then
                            'Do we need more columns than we have data for?
                                If (nCurVarArrDim < C_COLS_RGMVARIABLESLIST) Then
                                    For i = nCurVarArrDim + 1 To C_COLS_RGMVARIABLESLIST
                                        Set obVarArrObjects(i) = Nothing
                                    Next
                                End If
    
                            'Start Table
                                Set Table = Nothing
                                Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                'Fill Array - Header Row
                                    strVarArray(1, 1) = "Name"
                                    strVarArray(1, 2) = ""
                                    strVarArray(1, 3) = ""
                            
                            'Get Information from objects
                                'Loop Array
                                    For i = 1 To C_COLS_RGMVARIABLESLIST
                                        If (obVarArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strVarArray(i + 1, 1) = ""
                                                strVarArray(i + 1, 2) = ""
                                                strVarArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                strVarArray(i + 1, 1) = obVarArrObjects(i).Name
                                                strVarArray(i + 1, 2) = "name"
                                                strVarArray(i + 1, 3) = "RGM-Group[Entry-Name='" & obRGMGroup.DynProperties("Name") & "']/RGM-Variable[Entry-Name='" & obVarArrObjects(i).Name & "']"
                                            'Usable Dynproperties for this object
                                                strVarArrUsableDynProperties(i) = GetUsableDynProperties(obVarArrObjects(i).DynPropertiesEnum(""))
                                        End If
                                    Next
                                'Write 1st Row
                                    Call AddHTMLTableRow(curXMLDoc, Table, strVarArray, C_COLS_RGMVARIABLESLIST + 1, 0)
                            'Get Properties from objects
                                'Loop Wanted Properties
                                    For i = 1 To UBound(strArrWantedPropertiesRGMVariable)
                                        'Get Property
                                            strTEMP = strArrWantedPropertiesRGMVariable(i, 2)
                                        'Row - 1st Column
                                            strVarArray(1, 1) = strArrWantedPropertiesRGMVariable(i, 1)
                                            strVarArray(1, 2) = ""
                                            strVarArray(1, 3) = ""
                                        'Loop Array
                                            For j = 1 To C_COLS_RGMVARIABLESLIST
                                                'Row - following Columns
                                                    If (obVarArrObjects(j) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strVarArray(j + 1, 1) = ""
                                                            strVarArray(j + 1, 2) = ""
                                                            strVarArray(j + 1, 3) = ""
                                                    Else
                                                        'Is the current Property available in this object?
                                                            If (InStr(1, strVarArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                strVarArray(j + 1, 1) = obVarArrObjects(j).DynProperties(strTEMP)
                                                                strVarArray(j + 1, 2) = ""
                                                                strVarArray(j + 1, 3) = ""
                                                            Else
                                                                strVarArray(j + 1, 1) = ""
                                                                strVarArray(j + 1, 2) = ""
                                                                strVarArray(j + 1, 3) = ""
                                                            End If
                                                    End If
                                            Next
                                        'Write Row
                                            Call AddHTMLTableRow(curXMLDoc, Table, strVarArray, C_COLS_RGMVARIABLESLIST + 1, i)
                                    Next
                            'Reset Counter and Array
                                nCurVarArrDim = 0
                                ReDim strVarArray(1 To C_COLS_RGMVARIABLESLIST + 1, 1 To 3) As String
                                ReDim obVarArrObjects(1 To C_COLS_RGMVARIABLESLIST) As RGMRecipeVar
                        End If
                        'Add to counter
                            nCurVarArrDim = nCurVarArrDim + 1
                    End If
                Next
            'Loop Recipes in Recipe-Group
                For nRGMRecipesIndex = 0 To (obRGMGroup.RecipeCount) - 1
                    Set obRGMRecipe = Nothing
                    Set obRGMRecipe = obRGMGroup.RecipeItem(nRGMRecipesIndex)
                    If (Not obRGMRecipe Is Nothing) Then
                        'Sub-Title
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 0, 1, "subheader", "Recipe: " & obRGMRecipe.DynProperties("RecipeName"), "RGM-Group[Entry-Name='" & obRGMGroup.DynProperties("Name") & "']/RGM-Recipe[Entry-Name='" & obRGMRecipe.DynProperties("RecipeName") & "']", "name")
                        'Add Table for RecipeGroupRecipe-Information in HTML
                            Call CollectRGMInformationHeader(obRGMRecipe, strArrWantedPropertiesRGMRecipe)
                        'Loop RecipeGroupRecipeValues
                            For nRGMValuesIndex = 0 To obRGMRecipe.ValueCount - 1
                                Set obRGMValue = Nothing
                                Set obRGMValue = obRGMRecipe.ValueItem(nRGMValuesIndex)
                                If (Not obRGMValue Is Nothing) Then
                                    'Save Object in Array
                                        Set obValArrObjects(nCurValArrDim) = obRGMValue
                                    If (nCurValArrDim = C_COLS_RGMRECIPEVALUESLIST Or nRGMValuesIndex = obRGMRecipe.ValueCount - 1) Then
                                        'Do we need more columns than we have data for?
                                            If (nCurValArrDim < C_COLS_RGMRECIPEVALUESLIST) Then
                                                For i = nCurValArrDim + 1 To C_COLS_RGMRECIPEVALUESLIST
                                                    Set obValArrObjects(i) = Nothing
                                                Next
                                            End If
                
                                        'Start Table
                                            Set Table = Nothing
                                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                            'Fill Array - Header Row
                                                strValArray(1, 1) = "Variable-Name"
                                                strValArray(1, 2) = ""
                                                strValArray(1, 3) = ""
                                        
                                        'Get Information from objects
                                            'Loop Array
                                                For i = 1 To C_COLS_RGMRECIPEVALUESLIST
                                                    If (obValArrObjects(i) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strValArray(i + 1, 1) = ""
                                                            strValArray(i + 1, 2) = ""
                                                            strValArray(i + 1, 3) = ""
                                                    Else
                                                        'Information for Column
                                                            strValArray(i + 1, 1) = obValArrObjects(i).VarName
                                                            strValArray(i + 1, 2) = "name"
                                                            strValArray(i + 1, 3) = "RGM-Group[Entry-Name='" & obRGMGroup.DynProperties("Name") & "']/RGM-Recipe[Entry-Name='" & obRGMRecipe.DynProperties("RecipeName") & "/Recipe-Value[Entry-Name='" & obValArrObjects(i).VarName & "']"
                                                        'Usable Dynproperties for this object
                                                            strValArrUsableDynProperties(i) = GetUsableDynProperties(obValArrObjects(i).DynPropertiesEnum(""))
                                                    End If
                                                Next
                                            'Write 1st Row
                                                Call AddHTMLTableRow(curXMLDoc, Table, strValArray, C_COLS_RGMRECIPEVALUESLIST + 1, 0)
                                        'Get Properties from objects
                                            'Loop Wanted Properties
                                                For i = 1 To UBound(strArrWantedPropertiesRGMRecipeValue)
                                                    'Get Property
                                                        strTEMP = strArrWantedPropertiesRGMRecipeValue(i, 2)
                                                    'Row - 1st Column
                                                        strValArray(1, 1) = strArrWantedPropertiesRGMRecipeValue(i, 1)
                                                        strValArray(1, 2) = ""
                                                        strValArray(1, 3) = ""
                                                    'Loop Array
                                                        For j = 1 To C_COLS_RGMRECIPEVALUESLIST
                                                            'Row - following Columns
                                                                If (obValArrObjects(j) Is Nothing) Then
                                                                    'Filler needed = Empty Column
                                                                        strValArray(j + 1, 1) = ""
                                                                        strValArray(j + 1, 2) = ""
                                                                        strValArray(j + 1, 3) = ""
                                                                Else
                                                                    'Is the current Property available in this object?
                                                                        If (InStr(1, strValArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                            strValArray(j + 1, 1) = obValArrObjects(j).DynProperties(strTEMP)
                                                                            strValArray(j + 1, 2) = ""
                                                                            strValArray(j + 1, 3) = ""
                                                                        Else
                                                                            strValArray(j + 1, 1) = ""
                                                                            strValArray(j + 1, 2) = ""
                                                                            strValArray(j + 1, 3) = ""
                                                                        End If
                                                                End If
                                                        Next
                                                    'Write Row
                                                        Call AddHTMLTableRow(curXMLDoc, Table, strValArray, C_COLS_RGMRECIPEVALUESLIST + 1, i)
                                                Next
                                        'Reset Counter and Array
                                            nCurValArrDim = 0
                                            ReDim strValArray(1 To C_COLS_RGMRECIPEVALUESLIST + 1, 1 To 3) As String
                                            ReDim obValArrObjects(1 To C_COLS_RGMRECIPEVALUESLIST) As RGMRecipeValue
                                    End If
                                    'Add to counter
                                        nCurValArrDim = nCurValArrDim + 1
                                End If
                            Next
                    End If
                Next
        End If
    Next
    
'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_RGM)) Then
        LogMessage ("Error while creating RGM-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_RGM)) Then
        LogMessage ("Error while Saving RGM-Output!")
    End If
    
    ModifyLastLogMessage ("..Done")
    
'Free Memory
    Set obRGMGroup = Nothing
    Set obRGMRecipe = Nothing
    Set obRGMValue = Nothing
    Set obRGMVariable = Nothing
    Set Table = Nothing
    ReDim strArrWantedPropertiesRGMVariable(0 To 0) As String
    ReDim strArrWantedPropertiesRGMRecipe(0 To 0) As String
    ReDim strArrWantedPropertiesRGMRecipeValue(0 To 0) As String
    ReDim strVarArray(0 To 0) As String
    ReDim strVarArrUsableDynProperties(0 To 0) As String
    ReDim strValArrUsableDynProperties(0 To 0) As String
    ReDim obVarArrObjects(0 To 0) As RGMRecipeVar
    ReDim obValArrObjects(0 To 0) As RGMRecipeValue

Exit Sub
Err_CollectRGMInformation:
    Resume Next
End Sub

Private Function CollectArchiveInformationHeader(obArchive As ArchiveED, strArrWantedProperties() As String, strObjects As String, strHrefLinksVariables As String)

Dim strTEMP As String
Dim obVariableLink As Variable
Dim i As Integer
Dim j As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strUsableDynProperties As String
Dim strDynProperties() As String
Dim strArray() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To C_COLS_ARCHIVELIST, 1 To 3) As String
ReDim strDynProperties(1 To C_COLS_ARCHIVELIST, 1 To 2) As String
nCurArrDim = 1

'Which Properties are usable with this Object?
    strUsableDynProperties = GetUsableDynProperties(obArchive.DynPropertiesEnum(""))

On Error GoTo ErrHandler

    'Loop Wanted Properties
        For i = 1 To UBound(strArrWantedProperties)
            'Save Information in Array
                strDynProperties(i, 1) = strArrWantedProperties(i, 1)
                strDynProperties(i, 2) = strArrWantedProperties(i, 2)
            If (nCurArrDim = C_COLS_ARCHIVELIST Or i = UBound(strArrWantedProperties)) Then
                'Do we need more columns than we have data for?
                    If (nCurArrDim < C_COLS_ARCHIVELIST) Then
                        For j = nCurArrDim + 1 To C_COLS_ARCHIVELIST
                            strDynProperties(j, 1) = ""
                            strDynProperties(j, 2) = ""
                        Next
                    End If
                'Start Table
                    Set Table = Nothing
                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                'Fill 1st Row
                    For j = 1 To C_COLS_ARCHIVELIST
                        strArray(j, 1) = strDynProperties(j, 1)
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 1st Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ARCHIVELIST, 0)
                'Fill 2nd Row
                    For j = 1 To C_COLS_ARCHIVELIST
                        If (strDynProperties(j, 2) = "") Then
                            strArray(j, 1) = ""
                            strArray(j, 2) = ""
                            strArray(j, 3) = ""
                        Else
                            'Which DynProperties are Objects?
                                If (InStr(1, strObjects, "|" & strDynProperties(j, 2) & "|") > 0) Then
                                    'Which DynProperties need to be linked to Variables in HTML?
                                        If (InStr(1, strHrefLinksVariables, "|" & strDynProperties(j, 2) & "|") > 0) Then
                                            On Error GoTo Err_SetObject
                                                Set obVariableLink = obArchive.DynProperties(strDynProperties(j, 2))
                                            On Error GoTo ErrHandler
                                            If (Not obVariableLink Is Nothing) Then
                                                strArray(j, 1) = obVariableLink.Name
                                                If (ChkBox_Variables) Then
                                                    strArray(j, 2) = "href"
                                                    strArray(j, 3) = "..\" & GetLinkForVariable(obVariableLink.Name)
                                                Else
                                                    strArray(j, 2) = ""
                                                    strArray(j, 3) = ""
                                                End If
                                                Set obVariableLink = Nothing
                                            Else
                                                strArray(j, 1) = ""
                                                strArray(j, 2) = ""
                                                strArray(j, 3) = ""
                                            End If
                                        End If
                                Else
                                    strArray(j, 1) = obArchive.DynProperties(strDynProperties(j, 2))
                                    strArray(j, 2) = ""
                                    strArray(j, 3) = ""
                                End If
                        End If
                    Next
                'Write 2nd Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ARCHIVELIST, 1)
                    
                'Reset Counter and Array
                    nCurArrDim = 0
                    ReDim strArray(1 To C_COLS_ARCHIVELIST + 1, 1 To 3) As String
                    ReDim strDynProperties(1 To C_COLS_ARCHIVELIST) As String
            End If
            'Add to Counter
                nCurArrDim = nCurArrDim + 1
        Next
    
    'Free Memory
        Set Table = Nothing
        Set obVariableLink = Nothing
        ReDim strDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
ErrHandler:
    Resume Next
Err_SetObject:
    Resume Next
End Function

'****************************************************************************
' Methode:      CollectArchiveInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Archives
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectArchiveInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obArchive As ArchiveED
Dim obArchiveVar As ArchiveVarED
Dim obVariable As Variable
Dim nArchiveIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim nSelectedCountVariables As Integer
Dim nArchiveVariablesCount As Integer
Dim strHrefLinksVariables As String
Dim strObjects As String
Dim strHrefLinksVariables_Var As String
Dim strObjects_Var As String
Dim strArrWantedProperties() As String
Dim strVarArrWantedProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As Variable
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To (C_COLS_ARCHIVEVARIABLESLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_ARCHIVEVARIABLESLIST) As Variable
ReDim strArrUsableDynProperties(1 To C_COLS_ARCHIVEVARIABLESLIST) As String
nCurArrDim = 1

'Which DynProperties are Objects?
    strObjects = "|ChargeVar||EventVar|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|ChargeVar||EventVar|"

'Which DynProperties are Objects?
    strObjects_Var = "|Variable|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables_Var = "|Variable|"

'Initialize ArchiveProperties for Translation
Dim astrProps_Archives(1 To 23, 1 To 2)
    astrProps_Archives(1, 1) = "Archives in Ringbuffer"
    astrProps_Archives(1, 2) = "Count"
    astrProps_Archives(2, 1) = "Begin Time"
    astrProps_Archives(2, 2) = "BeginTime"
    astrProps_Archives(3, 1) = "Charge Variable"
    astrProps_Archives(3, 2) = "ChargeVar"
    astrProps_Archives(4, 1) = "Cycle"
    astrProps_Archives(4, 2) = "Cycle"
    astrProps_Archives(5, 1) = "CycleStart"
    astrProps_Archives(5, 2) = "CycleStart"
    astrProps_Archives(6, 1) = "End Function"
    astrProps_Archives(6, 2) = "FktEnd"
    astrProps_Archives(7, 1) = "End Time"
    astrProps_Archives(7, 2) = "EndTime"
    astrProps_Archives(8, 1) = "Event Variable"
    astrProps_Archives(8, 2) = "EventVar"
    astrProps_Archives(9, 1) = "Export in Unicode"
    astrProps_Archives(9, 2) = "AuslUnicode"
    astrProps_Archives(10, 1) = "File Format"
    astrProps_Archives(10, 2) = "FileFormat"
    astrProps_Archives(11, 1) = "Format"
    astrProps_Archives(11, 2) = "Format"
    astrProps_Archives(12, 1) = "Last Index"
    astrProps_Archives(12, 2) = "LastIndex"
    astrProps_Archives(13, 1) = "Long Name"
    astrProps_Archives(13, 2) = "LongName"
    astrProps_Archives(14, 1) = "Mode"
    astrProps_Archives(14, 2) = "Cyclic"
    astrProps_Archives(15, 1) = "Modus"
    astrProps_Archives(15, 2) = "Modus"
    astrProps_Archives(16, 1) = "Offset"
    astrProps_Archives(16, 2) = "Offset"
    astrProps_Archives(17, 1) = "Scan Cycle"
    astrProps_Archives(17, 2) = "TimeGap"
    astrProps_Archives(18, 1) = "Short Name"
    astrProps_Archives(18, 2) = "ShortName"
    astrProps_Archives(19, 1) = "Short Name Base Archive"
    astrProps_Archives(19, 2) = "SourceShortName"
    astrProps_Archives(20, 1) = "SQL Data Source"
    astrProps_Archives(20, 2) = "DataSource"
    astrProps_Archives(21, 1) = "Start Function"
    astrProps_Archives(21, 2) = "FktStart"
    astrProps_Archives(22, 1) = "Status"
    astrProps_Archives(22, 2) = "Flags"
    astrProps_Archives(23, 1) = "Textfiles in Unicode"
    astrProps_Archives(23, 2) = "Unicode"

'Initialize ArchiveVariableProperties for Translation
Dim astrProps_ArchiveVars(1 To 2, 1 To 2)
    astrProps_ArchiveVars(1, 1) = "Calculation"
    astrProps_ArchiveVars(1, 2) = "Calculation"
    astrProps_ArchiveVars(2, 1) = "Variable"
    astrProps_ArchiveVars(2, 2) = "Variable"

'Get the Selected Archive-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_ArchiveProperties.ListCount - 1
            If (LstBox_ArchiveProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_ArchiveProperties.ListCount - 1
                If (LstBox_ArchiveProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_ArchiveProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Archives)
                            If (astrProps_Archives(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Archives(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Get the Selected ArchiveVariable-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_ArchiveVariablesProperties.ListCount - 1
            If (LstBox_ArchiveVariablesProperties.Selected(i)) Then
                nSelectedCountVariables = nSelectedCountVariables + 1
            End If
        Next
    If (nSelectedCountVariables > 0) Then
        'Prepare Array and save selected entries
            ReDim strVarArrWantedProperties(1 To nSelectedCountVariables, 1 To 2)
            j = 1
            For i = 0 To LstBox_ArchiveVariablesProperties.ListCount - 1
                If (LstBox_ArchiveVariablesProperties.Selected(i)) Then
                    strVarArrWantedProperties(j, 1) = LstBox_ArchiveVariablesProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strVarArrWantedProperties)
                    strTEMP = strVarArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_ArchiveVars)
                            If (astrProps_ArchiveVars(j, 1) = strTEMP) Then
                                strVarArrWantedProperties(i, 2) = astrProps_ArchiveVars(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "HISTORIAN", "HISTORIAN", "name")

On Error GoTo Err_CollectArchiveInformation
LogMessage "Collecting Archive information.."
    If (Not ObProject Is Nothing) Then
        If (ObProject.ArchivesED.Count) Then
            'Loop Archives
                For nArchiveIndex = 0 To ObProject.ArchivesED.Count - 1
                    Set obArchive = ObProject.ArchivesED.Item(nArchiveIndex)
                    If (Not obArchive Is Nothing) Then
                        'Sub-Title
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", obArchive.DynProperties("ShortName") & "-" & obArchive.DynProperties("LongName"), "Archive[Entry-Name='" & obArchive.DynProperties("ShortName") & "']", "name")
                        'Add Table for Recipe-Information to HTML
                            Call CollectArchiveInformationHeader(obArchive, strArrWantedProperties, strObjects, strHrefLinksVariables)
                        On Error GoTo Err_CountVariablesInArchive
                            nArchiveVariablesCount = obArchive.Count
                        On Error GoTo Err_CollectArchiveInformation
                        'Loop Variables in current Archive
                            If (nArchiveVariablesCount > 0) Then
                                For nArchiveVariablesCount = 0 To obArchive.Count - 1
                                    Set obArchiveVar = obArchive.Item(nArchiveVariablesCount)
                                    If (Not obArchiveVar Is Nothing) Then
                                        Set obVariable = obArchiveVar.DynProperties("Variable")
                                        'Save Object in Array
                                            Set obArrObjects(nCurArrDim) = obVariable
                                        If (nCurArrDim = C_COLS_ARCHIVEVARIABLESLIST Or nArchiveVariablesCount = obArchive.Count - 1) Then
                                            'Do we need more columns than we have data for?
                                                If (nCurArrDim < C_COLS_ARCHIVEVARIABLESLIST) Then
                                                    For i = nCurArrDim + 1 To C_COLS_ARCHIVEVARIABLESLIST
                                                        Set obArrObjects(i) = Nothing
                                                    Next
                                                End If
                    
                                            'Start Table
                                                Set Table = Nothing
                                                Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                                'Fill Array - Header Row
                                                    strArray(1, 1) = "Name"
                                                    strArray(1, 2) = ""
                                                    strArray(1, 3) = ""
                                            
                                            'Get Information from objects
                                                'Loop Array
                                                    For i = 1 To C_COLS_ARCHIVEVARIABLESLIST
                                                        If (obArrObjects(i) Is Nothing) Then
                                                            'Filler needed = Empty Column
                                                                strArray(i + 1, 1) = ""
                                                                strArray(i + 1, 2) = ""
                                                                strArray(i + 1, 3) = ""
                                                        Else
                                                            'Information for Column
                                                                strArray(i + 1, 1) = obArrObjects(i).Name
                                                                strArray(i + 1, 2) = "name"
                                                                strArray(i + 1, 3) = "Archive[Entry-Name='" & obArchive.DynProperties("ShortName") & "']/Variable[Entry-Name='" & obArrObjects(i).Name & "']"
                                                            'Usable Dynproperties for this object
                                                                strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                                        End If
                                                    Next
                                                'Write 1st Row
                                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ARCHIVEVARIABLESLIST + 1, 0)
                                            'Get Properties from objects
                                                'Loop Wanted Properties
                                                    For i = 1 To UBound(strVarArrWantedProperties)
                                                        'Get Property
                                                            strTEMP = strVarArrWantedProperties(i, 2)
                                                        'Row - 1st Column
                                                            strArray(1, 1) = strVarArrWantedProperties(i, 1)
                                                            strArray(1, 2) = ""
                                                            strArray(1, 3) = ""
                                                        'Loop Array
                                                            For j = 1 To C_COLS_ARCHIVEVARIABLESLIST
                                                                'Row - following Columns
                                                                    If (obArrObjects(j) Is Nothing) Then
                                                                        'Filler needed = Empty Column
                                                                            strArray(j + 1, 1) = ""
                                                                            strArray(j + 1, 2) = ""
                                                                            strArray(j + 1, 3) = ""
                                                                    Else
                                                                        'Is the current Property available in this object?
                                                                            If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                                strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                                strArray(j + 1, 2) = ""
                                                                                strArray(j + 1, 3) = ""
                                                                            Else
                                                                                strArray(j + 1, 1) = ""
                                                                                strArray(j + 1, 2) = ""
                                                                                strArray(j + 1, 3) = ""
                                                                            End If
                                                                    End If
                                                            Next
                                                        'Write Row
                                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ARCHIVEVARIABLESLIST + 1, i)
                                                    Next
                                            'Reset Counter and Array
                                                nCurArrDim = 0
                                                ReDim strArray(1 To C_COLS_ARCHIVEVARIABLESLIST + 1, 1 To 3) As String
                                                ReDim obArrObjects(1 To C_COLS_ARCHIVEVARIABLESLIST) As Variable
                                        End If
                                        'Add to counter
                                            nCurArrDim = nCurArrDim + 1
                                    End If
                                Next
                            End If
                    End If
                Next
        End If

    End If


'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_ARCHIVES)) Then
        LogMessage ("Error while creating Historian-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_ARCHIVES)) Then
        LogMessage ("Error while Saving Historian-Output!")
    End If

'Free Memory

ModifyLastLogMessage ("..Done")
Exit Sub
Err_CollectArchiveInformation:
    LogMessage ("Error while trying to retrieve information from Archive")
    Resume Next
Err_CountVariablesInArchive:
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Private Function CollectRGMInformationHeader(obRGMRecipe As RGMRecipe, strArrWantedProperties() As String)

Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strUsableDynProperties As String
Dim strDynProperties() As String
Dim strArray() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To C_COLS_RGMRECIPELIST, 1 To 3) As String
ReDim strDynProperties(1 To C_COLS_RGMRECIPELIST, 1 To 2) As String
nCurArrDim = 1

'Which Properties are usable with this Object?
    strUsableDynProperties = GetUsableDynProperties(obRGMRecipe.DynPropertiesEnum(""))

On Error GoTo ErrHandler

    'Loop Wanted Properties
        For i = 1 To UBound(strArrWantedProperties)
            'Save Information in Array
                strDynProperties(i, 1) = strArrWantedProperties(i, 1)
                strDynProperties(i, 2) = strArrWantedProperties(i, 2)
            If (nCurArrDim = C_COLS_RGMRECIPELIST Or i = UBound(strArrWantedProperties)) Then
                'Do we need more columns than we have data for?
                    If (nCurArrDim < C_COLS_RGMRECIPELIST) Then
                        For j = nCurArrDim + 1 To C_COLS_RGMRECIPELIST
                            strDynProperties(j, 1) = ""
                            strDynProperties(j, 2) = ""
                        Next
                    End If
                'Start Table
                    Set Table = Nothing
                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                'Fill 1st Row
                    For j = 1 To C_COLS_RGMRECIPELIST
                        strArray(j, 1) = strDynProperties(j, 1)
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 1st Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RGMRECIPELIST, 0)
                'Fill 2nd Row
                    For j = 1 To C_COLS_RGMRECIPELIST
                        If (strDynProperties(j, 2) = "") Then
                            strArray(j, 1) = ""
                        Else
                            strArray(j, 1) = obRGMRecipe.DynProperties(strDynProperties(j, 2))
                        End If
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 2nd Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RGMRECIPELIST, 1)
                    
                'Reset Counter and Array
                    nCurArrDim = 0
                    ReDim strArray(1 To C_COLS_RGMRECIPELIST + 1, 1 To 3) As String
                    ReDim strDynProperties(1 To C_COLS_RGMRECIPELIST) As String
            End If
            'Add to Counter
                nCurArrDim = nCurArrDim + 1
        Next
    
    'Free Memory
        Set Table = Nothing
        ReDim strDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
ErrHandler:
    Resume Next
End Function

Private Function CollectRecipeInformationHeader(obRecipe As Recipe, strArrWantedProperties() As String)

Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strUsableDynProperties As String
Dim strDynProperties() As String
Dim strArray() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To C_COLS_RECIPEHEADERLIST, 1 To 3) As String
ReDim strDynProperties(1 To C_COLS_RECIPEHEADERLIST, 1 To 2) As String
nCurArrDim = 1

'Which Properties are usable with this Object?
    strUsableDynProperties = GetUsableDynProperties(obRecipe.DynPropertiesEnum(""))

On Error GoTo ErrHandler

    'Loop Wanted Properties
        For i = 1 To UBound(strArrWantedProperties)
            'Save Information in Array
                strDynProperties(i, 1) = strArrWantedProperties(i, 1)
                strDynProperties(i, 2) = strArrWantedProperties(i, 2)
            If (nCurArrDim = C_COLS_RECIPEHEADERLIST Or i = UBound(strArrWantedProperties)) Then
                'Do we need more columns than we have data for?
                    If (nCurArrDim < C_COLS_RECIPEHEADERLIST) Then
                        For j = nCurArrDim + 1 To C_COLS_RECIPEHEADERLIST
                            strDynProperties(j, 1) = ""
                            strDynProperties(j, 2) = ""
                        Next
                    End If
                'Start Table
                    Set Table = Nothing
                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                'Fill 1st Row
                    For j = 1 To C_COLS_RECIPEHEADERLIST
                        strArray(j, 1) = strDynProperties(j, 1)
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 1st Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RECIPEHEADERLIST, 0)
                'Fill 2nd Row
                    For j = 1 To C_COLS_RECIPEHEADERLIST
                        If (strDynProperties(j, 2) = "") Then
                            strArray(j, 1) = ""
                        Else
                            strArray(j, 1) = obRecipe.DynProperties(strDynProperties(j, 2))
                        End If
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 2nd Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RECIPEHEADERLIST, 1)
                    
                'Reset Counter and Array
                    nCurArrDim = 0
                    ReDim strArray(1 To C_COLS_RECIPEHEADERLIST + 1, 1 To 3) As String
                    ReDim strDynProperties(1 To C_COLS_RECIPEHEADERLIST) As String
            End If
            'Add to Counter
                nCurArrDim = nCurArrDim + 1
        Next
    
    'Free Memory
        Set Table = Nothing
        ReDim strDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
ErrHandler:
    Resume Next
End Function


'****************************************************************************
' Methode:      CollectRecipeInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Recipes
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectRecipeInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obRecipes As Recipes
Dim obRecipe As Recipe
Dim ObRecipeValue As RecipeValue
Dim nRecipesIndex As Integer
Dim nRecipeIndex As Integer
Dim i As Integer
Dim j As Integer
Dim nSelectedCountRecipe As Integer
Dim nSelectedCountVariable As Integer
Dim strTEMP As String
Dim strArrWantedProperties() As String
Dim strVarArrWantedProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As RecipeValue
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To (C_COLS_RECIPEVARIABLESLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_RECIPEVARIABLESLIST) As RecipeValue
ReDim strArrUsableDynProperties(1 To C_COLS_RECIPEVARIABLESLIST) As String
nCurArrDim = 1

'Initialize RecipeProperties Translation
ReDim astrProps_Recipes(1 To 4, 1 To 2)
    astrProps_Recipes(1, 1) = "Authorization group"
    astrProps_Recipes(1, 2) = "PasswordLevel"
    astrProps_Recipes(2, 1) = "Name"
    astrProps_Recipes(2, 2) = "RecipeName"
    astrProps_Recipes(3, 1) = "Timeout [ms]"
    astrProps_Recipes(3, 2) = "SyncWriteTimeout"
    astrProps_Recipes(4, 1) = "Write synchronous"
    astrProps_Recipes(4, 2) = "SyncWrite"

'Initialize RecipeVariableProperties Translation
ReDim astrProps_RecipeVars(1 To 6, 1 To 2)
    astrProps_RecipeVars(1, 1) = "Identification"
    astrProps_RecipeVars(1, 2) = "VarTagName"
    astrProps_RecipeVars(2, 1) = "Maximum"
    astrProps_RecipeVars(2, 2) = "Maximum"
    astrProps_RecipeVars(3, 1) = "Minimum"
    astrProps_RecipeVars(3, 2) = "Minimum"
    astrProps_RecipeVars(4, 1) = "Set value"
    astrProps_RecipeVars(4, 2) = "SetValue"
    astrProps_RecipeVars(5, 1) = "Unit"
    astrProps_RecipeVars(5, 2) = "VarUnit"
    astrProps_RecipeVars(6, 1) = "Variable"
    astrProps_RecipeVars(6, 2) = "VarName"

'Get the Selected Recipe-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_RecipeProperties.ListCount - 1
            If (LstBox_RecipeProperties.Selected(i)) Then
                nSelectedCountRecipe = nSelectedCountRecipe + 1
            End If
        Next
    If (nSelectedCountRecipe > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCountRecipe, 1 To 2)
            j = 1
            For i = 0 To LstBox_RecipeProperties.ListCount - 1
                If (LstBox_RecipeProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_RecipeProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Recipes)
                            If (astrProps_Recipes(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Recipes(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Get the Selected RecipeVariable-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
            If (LstBox_RecipeVariableProperties.Selected(i)) Then
                nSelectedCountVariable = nSelectedCountVariable + 1
            End If
        Next
    If (nSelectedCountVariable > 0) Then
        'Prepare Array and save selected entries
            ReDim strVarArrWantedProperties(1 To nSelectedCountVariable, 1 To 2)
            j = 1
            For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
                If (LstBox_RecipeVariableProperties.Selected(i)) Then
                    strVarArrWantedProperties(j, 1) = LstBox_RecipeVariableProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strVarArrWantedProperties)
                    strTEMP = strVarArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_RecipeVars)
                            If (astrProps_RecipeVars(j, 1) = strTEMP) Then
                                strVarArrWantedProperties(i, 2) = astrProps_RecipeVars(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "RECIPES", "RECIPES", "name")

LogMessage ("Collecting Recipe information..")

On Error GoTo Err_CollectRecipeInformation
    Set obRecipes = ObProject.Recipes
    If (Not obRecipes Is Nothing) Then
        'Loop Recipes in Project
            For nRecipesIndex = 0 To obRecipes.Count - 1
                Set obRecipe = obRecipes.Item(nRecipesIndex)
                If (Not obRecipe Is Nothing) Then
                    'Sub-Title
                        Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", obRecipe.DynProperties("RecipeName"), "Recipe[Entry-Name='" & obRecipe.DynProperties("RecipeName") & "']", "name")
                    'Add Table for Recipe-Information to HTML
                        Call CollectRecipeInformationHeader(obRecipe, strArrWantedProperties)
                    'Loop RecipeValues
                        For nRecipeIndex = 0 To obRecipe.Count - 1
                            Set ObRecipeValue = obRecipe.Item(nRecipeIndex)
                            If (Not ObRecipeValue Is Nothing) Then
                                'Save Object in Array
                                    Set obArrObjects(nCurArrDim) = ObRecipeValue
                                If (nCurArrDim = C_COLS_RECIPEVARIABLESLIST Or nRecipeIndex = obRecipe.Count - 1) Then
                                    'Do we need more columns than we have data for?
                                        If (nCurArrDim < C_COLS_RECIPEVARIABLESLIST) Then
                                            For i = nCurArrDim + 1 To C_COLS_RECIPEVARIABLESLIST
                                                Set obArrObjects(i) = Nothing
                                            Next
                                        End If
            
                                    'Start Table
                                        Set Table = Nothing
                                        Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                        'Fill Array - Header Row
                                            strArray(1, 1) = "Name"
                                            strArray(1, 2) = ""
                                            strArray(1, 3) = ""
                                    
                                    'Get Information from objects
                                        'Loop Array
                                            For i = 1 To C_COLS_RECIPEVARIABLESLIST
                                                If (obArrObjects(i) Is Nothing) Then
                                                    'Filler needed = Empty Column
                                                        strArray(i + 1, 1) = ""
                                                        strArray(i + 1, 2) = ""
                                                        strArray(i + 1, 3) = ""
                                                Else
                                                    'Information for Column
                                                        strArray(i + 1, 1) = obArrObjects(i).DynProperties("VarName")
                                                        strArray(i + 1, 2) = "name"
                                                        strArray(i + 1, 3) = "Recipe[Entry-Name='" & obRecipe.Name & "']/Recipe-Value[Entry-Name='" & obArrObjects(i).DynProperties("VarName") & "']"
                                                    'Usable Dynproperties for this object
                                                        strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                                End If
                                            Next
                                        'Write 1st Row
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RECIPEVARIABLESLIST + 1, 0)
                                    'Get Properties from objects
                                        'Loop Wanted Properties
                                            For i = 1 To UBound(strVarArrWantedProperties)
                                                'Get Property
                                                    strTEMP = strVarArrWantedProperties(i, 2)
                                                'Row - 1st Column
                                                    strArray(1, 1) = strVarArrWantedProperties(i, 1)
                                                    strArray(1, 2) = ""
                                                    strArray(1, 3) = ""
                                                'Loop Array
                                                    For j = 1 To C_COLS_RECIPEVARIABLESLIST
                                                        'Row - following Columns
                                                            If (obArrObjects(j) Is Nothing) Then
                                                                'Filler needed = Empty Column
                                                                    strArray(j + 1, 1) = ""
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                            Else
                                                                'Is the current Property available in this object?
                                                                    If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                        strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                        strArray(j + 1, 2) = ""
                                                                        strArray(j + 1, 3) = ""
                                                                    Else
                                                                        strArray(j + 1, 1) = ""
                                                                        strArray(j + 1, 2) = ""
                                                                        strArray(j + 1, 3) = ""
                                                                    End If
                                                            End If
                                                    Next
                                                'Write Row
                                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_RECIPEVARIABLESLIST + 1, i)
                                            Next
                                    'Reset Counter and Array
                                        nCurArrDim = 0
                                        ReDim strArray(1 To C_COLS_RECIPEVARIABLESLIST + 1, 1 To 3) As String
                                        ReDim obArrObjects(1 To C_COLS_RECIPEVARIABLESLIST) As RecipeValue
                                End If
                                'Add to counter
                                    nCurArrDim = nCurArrDim + 1
                            End If
                        Next
                End If
            Next
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_RECIPES)) Then
        LogMessage ("Error while creating Recipes-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_RECIPES)) Then
        LogMessage ("Error while Saving Recipes-Output!")
    End If
    
'Free Memory
    Set obRecipes = Nothing
    Set obRecipe = Nothing
    Set ObRecipeValue = Nothing
    Set Table = Nothing
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strVarArrWantedProperties(0 To 0) As String
    ReDim strArray(0 To 0) As String
    ReDim obArrObjects(0 To 0) As RecipeValue
    ReDim strArrUsableDynProperties(0 To 0) As String

ModifyLastLogMessage ("..Done")

Exit Sub

Err_CollectRecipeInformation:
    LogMessage ("Problem while collection information from Recipes")
    Resume Next
End Sub
Private Sub CollectVariableUsageInformation(ObProject As Project)

Dim obPicture As DynPicture
Dim obElement As Element
Dim obEdLimit As EdLimit
Dim obVarType As VarType
Dim obArchiveED As ArchiveED
Dim obArchiveVarED As ArchiveVarED
Dim obRGMRecipeGroup As RGMRecipeGroup
Dim obRGMRecipeValue As RGMRecipeValue
Dim obRGMRecipeVar As RGMRecipeVar
Dim obRGMRecipe As RGMRecipe
Dim obZenMenu As ZenMenu
Dim obZenMenuItem As ZenMenuItem
Dim Vari As Variant
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim obVariable As Variable
Dim strTEMP As String
Dim strVUinElement As String
Dim strVUinDynPicture As String
Dim strVUinEdLimit As String
Dim strVUinArchiveED As String
Dim strVUinArchiveVarED As String
Dim strVUinRGMRecipeValue As String
Dim strVUinRGMRecipeVar As String
Dim strVUinZenMenuItem As String
Dim strVUTempCollection As String
Dim strVUTemp As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim nRowCounter As Integer
Dim strTempLimitName As String

nRowCounter = 1
ReDim strArray(1 To 4, 1 To 3) As String

'Which DynProperties contain VariableUsage in their Modules?
    strVUinElement = "|BackColorVariable||LineColorVariable||TwistVariable||VisibilityVariable||XVariable||XZoomVariable||YVariable||YZoomVariable||SetValueDynMax||SetValueDynMin||TwistVariable||Variable||DynMaxVar||DynMinVar||AnimateVar||Variable_Anfang1||Variable_Anfang2||Variable_Norm||Variable_SS_1_1||Variable_SS_1_2||Variable_SS_1_3||Variable_SS_1_4||Variable_SS_2_1||Variable_SS_2_2||Variable_SS_2_3||Variable_SS_2_4|"
    strVUinDynPicture = "|PicActivVar|"
    strVUinEdLimit = "|Variable|"
    strVUinArchiveED = "|ChangeVar||EventVar|"
    strVUinArchiveVarED = "|Variable|"
    strVUinRGMRecipeValue = "|SourceVar||Variable|"
    strVUinRGMRecipeVar = "|Variable|"
    strVUinZenMenuItem = "|Variable|"

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "VARIABLES", "VARIABLES", "name")

'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables Usage", "Variables Usage", "name")

'Table
    Set Table = Nothing
    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
    'Fill Array - Header Row
        strArray(1, 1) = "Variable"
        strArray(1, 2) = ""
        strArray(1, 3) = ""
        strArray(2, 1) = "Object"
        strArray(2, 2) = ""
        strArray(2, 3) = ""
        strArray(3, 1) = "Parent-Object"
        strArray(3, 2) = ""
        strArray(3, 3) = ""
        strArray(4, 1) = "Object-Type"
        strArray(4, 2) = ""
        strArray(4, 3) = ""
    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, 0)


LogMessage "Collecting VariableUsage information.."
On Error GoTo Err_VariableUsage
    If (Not ObProject Is Nothing) Then
    'Loop Variables and their Limits for VariableUsageInformation
        For i = 0 To ObProject.Variables.Count - 1
            On Error GoTo Err_SetObject
                Set obVariable = ObProject.Variables.Item(i)
            On Error GoTo Err_VariableUsage
            If (Not obVariable Is Nothing) Then
            'Gather VariableUsageInformation in Variable
                'Rema or Limits?
                    If (obVariable.IsRemaActiv) Then
                    'Linked to Rema
                    Else
                    'Loop Limits in Variable
                        For j = 0 To obVariable.EdLimitCount - 1
                            On Error GoTo Err_SetObject
                                Set obEdLimit = obVariable.EdLimitItem(j)
                            On Error GoTo Err_VariableUsage
                                strTempLimitName = "Limit[" & (j + 1) & "]"
                            'Gather VariableUsageInformation from Limit
                                strVUTempCollection = strVUinEdLimit
                                While Not strVUTempCollection = ""
                                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                                    On Error GoTo Err_SetObject
                                        Set obVariable = obEdLimit.DynProperties(strVUTemp)
                                    On Error GoTo Err_VariableUsage
                                    If (Not obVariable Is Nothing) Then
                                        'Row
                                            strArray(1, 1) = obVariable.Name
                                            If (ChkBox_Variables) Then
                                                strArray(1, 2) = "href"
                                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                            Else
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                            End If
                                            strArray(2, 1) = strTempLimitName
                                            If (ChkBox_InclVarLimits) Then
                                                strArray(2, 2) = "href"
                                                strArray(2, 3) = "..\" & C_PATHFILE_VARIABLES_LIMITS & "#Variable[Entry-Name='" & obVariable.Name & "']/Limit[Entry-Name='" & strTempLimitName & "']"
                                            Else
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                            End If
                                            strArray(3, 1) = obVariable.Name
                                            If (ChkBox_Variables) Then
                                                strArray(3, 2) = "href"
                                                strArray(3, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                            Else
                                                strArray(3, 2) = ""
                                                strArray(3, 3) = ""
                                            End If
                                            strArray(4, 1) = "Variable-Limit"
                                            strArray(4, 2) = ""
                                            strArray(4, 3) = ""
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                            nRowCounter = nRowCounter + 1
                                        Set obVariable = Nothing
                                    End If
                                Wend
                        Next
                        Set obEdLimit = Nothing
                    End If
                Set obVariable = Nothing
            End If
        Next

    'Loop Datatypes and their Limits for VariableUsageInformation
        For i = 0 To ObProject.VarTypes.Count - 1
            On Error GoTo Err_SetObject
                Set obVarType = ObProject.VarTypes.Item(i)
            On Error GoTo Err_VariableUsage
            If (Not obVarType Is Nothing) Then
            'Gather VariableUsageInformation in Variable
                'Not every Datatype is needed for the output-document
                    If ((InStr(1, obVarType.Name, "/<") = 0) And (obVarType.IsSimple = True)) Then
                    'Rema or Limits?
                        If (obVarType.DynProperties("IsRemaActiv")) Then
                        'Linked to Rema
                        Else
                        'Loop Limits in Variable
                            For j = 0 To obVarType.EdLimitCount - 1
                                On Error GoTo Err_SetObject
                                    Set obEdLimit = obVarType.EdLimitItem(j)
                                On Error GoTo Err_VariableUsage
                                    strTempLimitName = "Limit[" & (j + 1) & "]"
                                'Gather VariableUsageInformation from Limit
                                    strVUTempCollection = strVUinEdLimit
                                    While Not strVUTempCollection = ""
                                        strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                                        strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                                        On Error GoTo Err_SetObject
                                            Set obVariable = obEdLimit.DynProperties(strVUTemp)
                                        On Error GoTo Err_VariableUsage
                                        If (Not obVariable Is Nothing) Then
                                            'Row
                                                strArray(1, 1) = obVariable.Name
                                                If (ChkBox_Variables) Then
                                                    strArray(1, 2) = "href"
                                                    strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                                Else
                                                    strArray(1, 2) = ""
                                                    strArray(1, 3) = ""
                                                End If
                                                strArray(2, 1) = strTempLimitName
                                                If (ChkBox_InclVarTypesLimits And ChkBox_Datatypes) Then
                                                    strArray(2, 2) = "href"
                                                    strArray(2, 3) = "..\" & C_PATHFILE_VARTYPES_LIMITS & "#Datatype[Entry-Name='" & obVarType.Name & "']/Limit[Entry-Name='" & strTempLimitName & "']"
                                                Else
                                                    strArray(2, 2) = ""
                                                    strArray(2, 3) = ""
                                                End If
                                                strArray(3, 1) = obVarType.DynProperties("Name")
                                                If (ChkBox_Datatypes) Then
                                                    strArray(3, 2) = "href"
                                                    strArray(3, 3) = "..\" & C_PATHFILE_VARTYPES & "#Datatype[Entry-ID='ID" & obVarType.id & "']"
                                                Else
                                                    strArray(3, 2) = ""
                                                    strArray(3, 3) = ""
                                                End If
                                                strArray(4, 1) = "Datatype-Limit"
                                                strArray(4, 2) = ""
                                                strArray(4, 3) = ""
                                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                                nRowCounter = nRowCounter + 1
                                            Set obVariable = Nothing
                                        End If
                                    Wend
                                Set obEdLimit = Nothing
                            Next
                        End If
                    End If
            End If
            Set obVarType = Nothing
        Next
    
    'Loop Pictures and their Elements for VariableUsageInformation
        For i = 0 To ObProject.DynPictures.Count - 1
            On Error GoTo Err_SetObject
                Set obPicture = ObProject.DynPictures.Item(i)
            On Error GoTo Err_VariableUsage
            If (Not obPicture Is Nothing) Then
            'Gather VariableUsageInformation in Picture
                strVUTempCollection = strVUinDynPicture
                While Not strVUTempCollection = ""
                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obVariable = obPicture.DynProperties(strVUTemp)
                    On Error GoTo Err_VariableUsage
                    If (Not obVariable Is Nothing) Then
                        'Row
                            strArray(1, 1) = obVariable.Name
                            If (ChkBox_Variables) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = obPicture.Name
                            If (ChkBox_Pictures) Then
                                strArray(2, 2) = "href"
                                If (ChkBox_InclHardcopy) Then
                                    strArray(2, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html"
                                Else
                                    strArray(2, 3) = "..\" & C_PATHFILE_PICTURES & "#Screen[Entry-Name='" & obPicture.Name & "']"
                                End If
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = ObProject.Name
                            If (ChkBox_Project) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "Screen"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obVariable = Nothing
                    End If
                Wend
            'Loop Elements in Picture
                Dim strTempForElements As String
                For j = 0 To obPicture.Elements.Count - 1
                    On Error GoTo Err_SetObject
                        Set obElement = obPicture.Elements.Item(j)
                    On Error GoTo Err_VariableUsage
                    If (Not obElement Is Nothing) Then
                        Call CollectVariableUsageInformationAnalyzeElement(obPicture, obElement, strVUinElement, nRowCounter, Table)
                        Set obElement = Nothing
                    End If
                Next
                Set obPicture = Nothing
            End If
        Next
        
    'Loop Archives and their Variables for VariableUsageInformation
        For i = 0 To ObProject.ArchivesED.Count - 1
            On Error GoTo Err_SetObject
                Set obArchiveED = ObProject.ArchivesED.Item(i)
            On Error GoTo Err_VariableUsage
            'Gather VariableUsageInformation in Archives
                strVUTempCollection = strVUinArchiveED
                While Not strVUTempCollection = ""
                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obVariable = obArchiveED.DynProperties(strVUTemp)
                    On Error GoTo Err_VariableUsage
                    If (Not obVariable Is Nothing) Then
                        'Row
                            strArray(1, 1) = obVariable.Name
                            If (ChkBox_Variables) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = obArchiveED.DynProperties("ShortName") & "-" & obArchiveED.DynProperties("LongName")
                            If (ChkBox_Archives) Then
                                strArray(2, 2) = "href"
                                strArray(2, 3) = "..\" & C_PATHFILE_ARCHIVES & "#Archive[Entry-Name='" & obArchiveED.DynProperties("ShortName") & "']"
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = ObProject.Name
                            If (ChkBox_Project) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "Archive"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obVariable = Nothing
                    End If
                Wend
            'Loop Variables in Archive
                If (Not obArchiveED Is Nothing) Then
                    For j = 0 To obArchiveED.Count - 1
                        On Error GoTo Err_SetObject
                            Set obArchiveVarED = obArchiveED.Item(j)
                        On Error GoTo Err_VariableUsage
                        If (Not obArchiveVarED Is Nothing) Then
                            'Gather VariableUsageInformation in Variable
                                strVUTempCollection = strVUinArchiveVarED
                                While Not strVUTempCollection = ""
                                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                                    On Error GoTo Err_SetObject
                                        Set obVariable = obArchiveVarED.DynProperties(strVUTemp)
                                    On Error GoTo Err_VariableUsage
                                    If (Not obVariable Is Nothing) Then
                                        'Row
                                            strArray(1, 1) = obVariable.Name
                                            If (ChkBox_Variables) Then
                                                strArray(1, 2) = "href"
                                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                            Else
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                            End If
                                            strArray(2, 1) = obVariable.Name
                                            If (ChkBox_Archives) Then
                                                strArray(2, 2) = "href"
                                                strArray(2, 3) = "..\" & C_PATHFILE_ARCHIVES & "#Archive[Entry-Name='" & obArchiveED.DynProperties("ShortName") & "']/Variable[Entry-Name='" & obVariable.Name & "']"
                                            Else
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                            End If
                                            strArray(3, 1) = obArchiveED.DynProperties("ShortName") & "-" & obArchiveED.DynProperties("LongName")
                                            If (ChkBox_Archives) Then
                                                strArray(3, 2) = "href"
                                                strArray(3, 3) = "..\" & C_PATHFILE_ARCHIVES & "#Archive[Entry-Name='" & obArchiveED.DynProperties("ShortName") & "']"
                                            Else
                                                strArray(3, 2) = ""
                                                strArray(3, 3) = ""
                                            End If
                                            strArray(4, 1) = "Archive-Variable"
                                            strArray(4, 2) = ""
                                            strArray(4, 3) = ""
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                            nRowCounter = nRowCounter + 1
                                        Set obVariable = Nothing
                                    End If
                                Wend
                                Set obArchiveED = Nothing
                        End If
                    Next
                    Set obArchiveED = Nothing
                End If
        Next

    'Loop RGMRecipeValues and RGMRecipeVars for VariableUsageInformation
        For i = 0 To ObProject.RGMGroups.Count - 1
            On Error GoTo Err_SetObject
                Set obRGMRecipeGroup = ObProject.RGMGroups.Item(i)
            On Error GoTo Err_VariableUsage
            If (Not obRGMRecipeGroup Is Nothing) Then
                'Loop Variables in RecipeGroup
                    For j = 0 To obRGMRecipeGroup.VariableCount - 1
                        On Error GoTo Err_SetObject
                            Set obRGMRecipeVar = obRGMRecipeGroup.VariableItem(j)
                        On Error GoTo Err_VariableUsage
                        If (Not obRGMRecipeVar Is Nothing) Then
                            'Gather VariableUsageInformation in RGMRecipeVar
                                strVUTempCollection = strVUinRGMRecipeVar
                                While Not strVUTempCollection = ""
                                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                                    On Error GoTo Err_SetObject
                                        Set obVariable = obRGMRecipeVar.DynProperties(strVUTemp)
                                    On Error GoTo Err_VariableUsage
                                    If (Not obVariable Is Nothing) Then
                                        'Row
                                            strArray(1, 1) = obVariable.Name
                                            If (ChkBox_Variables) Then
                                                strArray(1, 2) = "href"
                                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                            Else
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                            End If
                                            strArray(2, 1) = obVariable.Name
                                            If (ChkBox_RGM) Then
                                                strArray(2, 2) = "href"
                                                strArray(2, 3) = "..\" & C_PATHFILE_RGM & "#RGM-Group[Entry-Name='" & obRGMRecipeGroup.DynProperties("Name") & "']/RGM-Variable[Entry-Name='" & obVariable.Name & "']"
                                            Else
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                            End If
                                            strArray(3, 1) = obRGMRecipeGroup.DynProperties("Name")
                                            If (ChkBox_RGM) Then
                                                strArray(3, 2) = "href"
                                                strArray(3, 3) = "..\" & C_PATHFILE_RGM & "#RGM-Group[Entry-Name='" & obRGMRecipeGroup.DynProperties("Name") & "']"
                                            Else
                                                strArray(3, 2) = ""
                                                strArray(3, 3) = ""
                                            End If
                                            strArray(4, 1) = "RGM-Variable"
                                            strArray(4, 2) = ""
                                            strArray(4, 3) = ""
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                            nRowCounter = nRowCounter + 1
                                        Set obVariable = Nothing
                                    End If
                                Wend
                                Set obRGMRecipeVar = Nothing
                        End If
                    Next
                'Loop Recipes in RecipeGroup
                    For j = 0 To obRGMRecipeGroup.RecipeCount - 1
                        On Error GoTo Err_SetObject
                            Set obRGMRecipe = obRGMRecipeGroup.RecipeItem(j)
                        On Error GoTo Err_VariableUsage
                        If (Not obRGMRecipe Is Nothing) Then
                            'Loop RecipeValues in RecipeGroup-Recipe
                                For k = 0 To obRGMRecipe.ValueCount - 1
                                    On Error GoTo Err_SetObject
                                        Set obRGMRecipeValue = obRGMRecipe.ValueItem(k)
                                    On Error GoTo Err_VariableUsage
                                    If (Not obRGMRecipeValue Is Nothing) Then
                                        'Gather VariableUsageInformation in RGMRecipeValues
                                            strVUTempCollection = strVUinRGMRecipeValue
                                            While Not strVUTempCollection = ""
                                                strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                                                strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                                                On Error GoTo Err_SetObject
                                                    Set obVariable = obRGMRecipeVar.DynProperties(strVUTemp)
                                                On Error GoTo Err_VariableUsage
                                                If (Not obVariable Is Nothing) Then
                                                    'Row
                                                        strArray(1, 1) = obVariable.Name
                                                        If (ChkBox_Variables) Then
                                                            strArray(1, 2) = "href"
                                                            strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                                        Else
                                                            strArray(1, 2) = ""
                                                            strArray(1, 3) = ""
                                                        End If
                                                        strArray(2, 1) = obVariable.Name
                                                        If (ChkBox_RGM) Then
                                                            strArray(2, 2) = "href"
                                                            strArray(2, 3) = "..\" & C_PATHFILE_RGM & "#RGM-Group[Entry-Name='" & obRGMRecipeGroup.DynProperties("Name") & "']/RGM-Recipe[Entry-Name='" & obRGMRecipe.DynProperties("RecipeName") & "/Recipe-Value[Entry-Name='" & obRGMRecipeValue.VarName & "']"
                                                        Else
                                                            strArray(2, 2) = ""
                                                            strArray(2, 3) = ""
                                                        End If
                                                        strArray(3, 1) = obRGMRecipe.DynProperties("RecipeName")
                                                        If (ChkBox_RGM) Then
                                                            strArray(3, 2) = "href"
                                                            strArray(3, 3) = "..\" & C_PATHFILE_RGM & "#RGM-Group[Entry-Name='" & obRGMRecipeGroup.DynProperties("Name") & "']/Recipe[Entry-Name='" & obRGMRecipe.DynProperties("RecipeName") & "']"
                                                        Else
                                                            strArray(3, 2) = ""
                                                            strArray(3, 3) = ""
                                                        End If
                                                        strArray(4, 1) = "RGM-Recipe-Value"
                                                        strArray(4, 2) = ""
                                                        strArray(4, 3) = ""
                                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                                        nRowCounter = nRowCounter + 1
                                                    Set obVariable = Nothing
                                                End If
                                            Wend
                                            Set obRGMRecipeValue = Nothing
                                    End If
                                Next
                            Set obRGMRecipe = Nothing
                        End If
                    Next
                Set obRGMRecipeGroup = Nothing
            End If
        Next

    'Loop Menus and their Items for VariableUsageInformation
        For i = 0 To ObProject.ZenMenus.Count - 1
            On Error GoTo Err_SetObject
                Set obZenMenu = ObProject.ZenMenus.Item(i)
            On Error GoTo Err_VariableUsage
            If (Not obZenMenu Is Nothing) Then
                'Loop Items in Menu
                    For j = 0 To obZenMenu.Count - 1
                        On Error GoTo Err_SetObject
                            Set obZenMenuItem = obZenMenu.Item(j)
                        On Error GoTo Err_VariableUsage
                            If (Not obZenMenuItem Is Nothing) Then
                                Call CollectVariableUsageInformationAnalyzeMenuItem(obZenMenuItem, obZenMenu, strVUinZenMenuItem, nRowCounter, Table)
                                Set obZenMenuItem = Nothing
                            End If
                    Next
                    Set obZenMenu = Nothing
            End If
        Next
    
    End If
    
'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_VARIABLES)) Then
        LogMessage ("Error while creating Variable-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARIABLES_USAGE)) Then
        LogMessage ("Error while Saving Variable-Usage-Output!")
    End If
    
    ModifyLastLogMessage ("..Done")
    
'Free Memory
    Set obPicture = Nothing
    Set obElement = Nothing
    Set obEdLimit = Nothing
    Set obVarType = Nothing
    Set obArchiveED = Nothing
    Set obArchiveVarED = Nothing
    Set obRGMRecipeGroup = Nothing
    Set obRGMRecipeValue = Nothing
    Set obRGMRecipeVar = Nothing
    Set obRGMRecipe = Nothing
    Set obZenMenu = Nothing
    Set obZenMenuItem = Nothing
    Set Vari = Nothing
    Set obVariable = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0) As String
    
Exit Sub
Err_VariableUsage:
    Resume Next
Err_SetObject:
    Resume Next
End Sub


Private Sub CollectFunctionUsageInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument, FunctionUsageGroup As MSXML2.IXMLDOMElement)

Dim obPicture As DynPicture
Dim obRema As Rema
Dim obState As State
Dim obElement As Element
Dim obEdLimit As EdLimit
Dim obVariable As Variable
Dim obVarType As VarType
Dim obFunctionForLoop As RtFunction
Dim obZenMenu As ZenMenu
Dim obZenMenuItem As ZenMenuItem
Dim obScript As Script
Dim obTimeFunction As TimeFunction
Dim Vari As Variant
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim obFunction As RtFunction
Dim strTEMP As String
Dim strFUinElement As String
Dim strFUinState As String
Dim strFUinEdLimit As String
Dim strFUinDynPicture As String
Dim strFUinProject As String
Dim strFUinTimeFunction As String
Dim strFUinZenMenuItem As String
Dim strFUTempCollection As String
Dim strFUTemp As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim nRowCounter As Integer
Dim strTempLimitName As String
Dim strTempStateCaption As String

nRowCounter = 1
ReDim strArray(1 To 4, 1 To 3) As String

'Which DynProperties contain FunctionUsage in their Modules?
    strFUinElement = "|Function|"
    strFUinEdLimit = "|Function|"
    strFUinDynPicture = "|EndFunction||StartFunction|"
    strFUinProject = "|Function|"
    strFUinState = "|Function|"
    strFUinTimeFunction = "|Function|"
    strFUinZenMenuItem = "|Function|"

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "FUNCTIONS", "FUNCTIONS", "name")

'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Functions Usage", "Functions Usage", "name")

'Table
    Set Table = Nothing
    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
    'Fill Array - Header Row
        strArray(1, 1) = "Variable"
        strArray(1, 2) = ""
        strArray(1, 3) = ""
        strArray(2, 1) = "Object"
        strArray(2, 2) = ""
        strArray(2, 3) = ""
        strArray(3, 1) = "Parent-Object"
        strArray(3, 2) = ""
        strArray(3, 3) = ""
        strArray(4, 1) = "Object-Type"
        strArray(4, 2) = ""
        strArray(4, 3) = ""
    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, 0)

LogMessage "Collecting FunctionUsage information.."
On Error GoTo Err_FunctionUsage
    If (Not ObProject Is Nothing) Then
    'Loop Variables and their Limits for VariableUsageInformation
        For i = 0 To ObProject.Variables.Count - 1
            On Error GoTo Err_SetObject
                Set obVariable = ObProject.Variables.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obVariable Is Nothing) Then
            'Gather FunctionUsageInformation in Variable
                'Rema or Limits?
                    If (obVariable.IsRemaActiv) Then
                    'Linked to Rema
                    Else
                    'Loop Limits in Variable
                        For j = 0 To obVariable.EdLimitCount - 1
                            On Error GoTo Err_SetObject
                                Set obEdLimit = obVariable.EdLimitItem(j)
                            On Error GoTo Err_FunctionUsage
                                strTempLimitName = "Limit[" & (j + 1) & "]"
                            'Gather FunctionUsageInformation from Limit
                                strFUTempCollection = strFUinEdLimit
                                While Not strFUTempCollection = ""
                                    strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
                                    strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
                                    On Error GoTo Err_SetObject
                                        Set obFunction = obEdLimit.DynProperties(strFUTemp)
                                    On Error GoTo Err_FunctionUsage
                                    If (Not obFunction Is Nothing) Then
                                        'Row
                                            strArray(1, 1) = obFunction.Name
                                            If (ChkBox_Functions) Then
                                                strArray(1, 2) = "href"
                                                strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                            Else
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                            End If
                                            strArray(2, 1) = strTempLimitName
                                            If (ChkBox_InclVarLimits) Then
                                                strArray(2, 2) = "href"
                                                strArray(2, 3) = "..\" & C_PATHFILE_VARIABLES_LIMITS & "#Variable[Entry-Name='" & obVariable.Name & "']/Limit[Entry-Name='" & strTempLimitName & "']"
                                            Else
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                            End If
                                            strArray(3, 1) = obVariable.Name
                                            If (ChkBox_Variables) Then
                                                strArray(3, 2) = "href"
                                                strArray(3, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                            Else
                                                strArray(3, 2) = ""
                                                strArray(3, 3) = ""
                                            End If
                                            strArray(4, 1) = "Variable-Limit"
                                            strArray(4, 2) = ""
                                            strArray(4, 3) = ""
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                            nRowCounter = nRowCounter + 1
                                        Set obFunction = Nothing
                                    End If
                                Wend
                        Next
                        Set obEdLimit = Nothing
                    End If
                Set obVariable = Nothing
            End If
        Next

    'Loop Datatypes and their Limits for VariableUsageInformation
        For i = 0 To ObProject.VarTypes.Count - 1
            On Error GoTo Err_SetObject
                Set obVarType = ObProject.VarTypes.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obVarType Is Nothing) Then
            'Gather FunctionUsageInformation in Variable
                'Not every Datatype is needed for the output-document
                    If ((InStr(1, obVarType.Name, "/<") = 0) And (obVarType.IsSimple = True)) Then
                    'Rema or Limits?
                        If (obVarType.DynProperties("IsRemaActiv")) Then
                        'Linked to Rema
                        Else
                        'Loop Limits in Variable
                            For j = 0 To obVarType.EdLimitCount - 1
                                On Error GoTo Err_SetObject
                                    Set obEdLimit = obVarType.EdLimitItem(j)
                                On Error GoTo Err_FunctionUsage
                                    strTempLimitName = "Limit[" & (j + 1) & "]"
                                'Gather FunctionUsageInformation from Limit
                                    strFUTempCollection = strFUinEdLimit
                                    While Not strFUTempCollection = ""
                                        strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
                                        strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
                                        On Error GoTo Err_SetObject
                                            Set obFunction = obEdLimit.DynProperties(strFUTemp)
                                        On Error GoTo Err_FunctionUsage
                                        If (Not obFunction Is Nothing) Then
                                            'Row
                                                strArray(1, 1) = obFunction.Name
                                                If (ChkBox_Functions) Then
                                                    strArray(1, 2) = "href"
                                                    strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                                Else
                                                    strArray(1, 2) = ""
                                                    strArray(1, 3) = ""
                                                End If
                                                strArray(2, 1) = strTempLimitName
                                                If (ChkBox_InclVarTypesLimits And ChkBox_Datatypes) Then
                                                    strArray(2, 2) = "href"
                                                    strArray(2, 3) = "..\" & C_PATHFILE_VARTYPES_LIMITS & "#Datatype[Entry-Name='" & obVarType.Name & "']/Limit[Entry-Name='" & strTempLimitName & "']"
                                                Else
                                                    strArray(2, 2) = ""
                                                    strArray(2, 3) = ""
                                                End If
                                                strArray(3, 1) = obVarType.DynProperties("Name")
                                                If (ChkBox_Datatypes) Then
                                                    strArray(3, 2) = "href"
                                                    strArray(3, 3) = "..\" & C_PATHFILE_VARTYPES & "#Datatype[Entry-ID='ID" & obVarType.id & "']"
                                                Else
                                                    strArray(3, 2) = ""
                                                    strArray(3, 3) = ""
                                                End If
                                                strArray(4, 1) = "Datatype-Limit"
                                                strArray(4, 2) = ""
                                                strArray(4, 3) = ""
                                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                                nRowCounter = nRowCounter + 1
                                            Set obFunction = Nothing
                                        End If
                                    Wend
                                Set obEdLimit = Nothing
                            Next
                        End If
                    End If
                Set obVarType = Nothing
            End If
        Next
        
        'Loop Pictures and their Elements for FunctionUsageInformation
        For i = 0 To ObProject.DynPictures.Count - 1
            On Error GoTo Err_SetObject
                Set obPicture = ObProject.DynPictures.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obPicture Is Nothing) Then
            'Gather FunctionUsageInformation in Picture
                strFUTempCollection = strFUinDynPicture
                While Not strFUTempCollection = ""
                    strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
                    strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obFunction = obPicture.DynProperties(strFUTemp)
                    On Error GoTo Err_FunctionUsage
                    If (Not obFunction Is Nothing) Then
                        'Row
                            strArray(1, 1) = obFunction.Name
                            If (ChkBox_Functions) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = obPicture.Name
                            If (ChkBox_Pictures) Then
                                strArray(2, 2) = "href"
                                If (ChkBox_InclHardcopy) Then
                                    strArray(2, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html"
                                Else
                                    strArray(2, 3) = "..\" & C_PATHFILE_PICTURES & "#Screen[Entry-Name='" & obPicture.Name & "']"
                                End If
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = ObProject.Name
                            If (ChkBox_Project) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "Screen"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obFunction = Nothing
                    End If
                Wend
            'Loop Elements in Picture
                Dim strTempForElements As String
                For j = 0 To obPicture.Elements.Count - 1
                    On Error GoTo Err_SetObject
                        Set obElement = obPicture.Elements.Item(j)
                    On Error GoTo Err_FunctionUsage
                    If (Not obElement Is Nothing) Then
                        Call CollectFunctionUsageInformationAnalyzeElement(obPicture, obElement, strFUinElement, nRowCounter, Table)
                        Set obElement = Nothing
                    End If
                Next
                Set obPicture = Nothing
            End If
        Next

    'Loop Menus and their Items for FunctionUsageInformation
        For i = 0 To ObProject.ZenMenus.Count - 1
            On Error GoTo Err_SetObject
                Set obZenMenu = ObProject.ZenMenus.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obZenMenu Is Nothing) Then
            'Loop Items in Menu (Root e.g. Main)
                For j = 0 To obZenMenu.Count - 1
                    On Error GoTo Err_SetObject
                        Set obZenMenuItem = obZenMenu.Item(j)
                    On Error GoTo Err_FunctionUsage
                        If (Not obZenMenuItem Is Nothing) Then
                            Call CollectFunctionUsageInformationAnalyzeMenuItem(obZenMenuItem, obZenMenu, strFUinZenMenuItem, nRowCounter, Table)
                            Set obZenMenuItem = Nothing
                        End If
                Next
                Set obZenMenu = Nothing
            End If
        Next

    'Loop Remas for FunctionUsageInformation
        For i = 0 To ObProject.Remas.Count - 1
            On Error GoTo Err_SetObject
                Set obRema = ObProject.Remas.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obRema Is Nothing) Then
                If (obRema.StateCount > 0) Then
                    For j = 0 To obRema.StateCount - 1
                        On Error GoTo Err_SetObject
                            Set obState = obRema.StateItem(j)
                        On Error GoTo Err_FunctionUsage
                        If (Not obState Is Nothing) Then
                            'For States without Caption
                                If (obState.DynProperties("Text") = "") Then
                                    strTempStateCaption = "<Empty>"
                                Else
                                    strTempStateCaption = obState.DynProperties("Text")
                                End If
                            'Gather FunctionUsageInformation in State
                                strFUTempCollection = strFUinState
                                While Not strFUTempCollection = ""
                                    strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
                                    strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
                                    On Error GoTo Err_SetObject
                                        Set obFunction = obState.DynProperties(strFUTemp)
                                    On Error GoTo Err_FunctionUsage
                                    If (Not obFunction Is Nothing) Then
                                        'Row
                                            strArray(1, 1) = obFunction.Name
                                            If (ChkBox_Functions) Then
                                                strArray(1, 2) = "href"
                                                strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                            Else
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                            End If
                                            strArray(2, 1) = strTempStateCaption
                                            If (ChkBox_Remas) Then
                                                strArray(2, 2) = "href"
                                                strArray(2, 3) = "..\" & C_PATHFILE_REMAS & "#Rema[Entry-Name='" & obRema.Name & "']"
                                            Else
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                            End If
                                            strArray(3, 1) = obRema.Name
                                            If (ChkBox_Remas) Then
                                                strArray(3, 2) = "href"
                                                strArray(3, 3) = "..\" & C_PATHFILE_REMAS & "#Rema[Entry-Name='" & obRema.Name & "']"
                                            Else
                                                strArray(3, 2) = ""
                                                strArray(3, 3) = ""
                                            End If
                                            strArray(4, 1) = "Rema-State"
                                            strArray(4, 2) = ""
                                            strArray(4, 3) = ""
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                            nRowCounter = nRowCounter + 1
                                        Set obFunction = Nothing
                                    End If
                                Wend
                            Set obState = Nothing
                            strTempStateCaption = ""
                        End If
                    Next
                End If
                Set obRema = Nothing
            End If
        Next

    'Loop Scripts for FunctionUsageInformation
        For i = 0 To ObProject.Scripts.Count - 1
            On Error GoTo Err_SetObject
                Set obScript = ObProject.Scripts.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obScript Is Nothing) Then
                For j = 0 To obScript.Count - 1
                    On Error GoTo Err_SetObject
                        Set obFunction = obScript.Item(j)
                    On Error GoTo Err_FunctionUsage
                    If (Not obFunction Is Nothing) Then
                        'Row
                            strArray(1, 1) = obFunction.Name
                            If (ChkBox_Functions) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = obScript.Name
                            If (ChkBox_Scripts) Then
                                strArray(2, 2) = "href"
                                strArray(2, 3) = "..\" & C_PATHFILE_SCRIPTS & "#Script[Entry-Name='" & obScript.Name & "']"
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = ObProject.Name
                            If (ChkBox_Project) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "Script"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obFunction = Nothing
                    End If
                Next
                Set obScript = Nothing
            End If
        Next
        
    'Gather FuntionUsageInformation from Project-Data
        strFUTempCollection = strFUinProject
        While Not strFUTempCollection = ""
            strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
            strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
            On Error GoTo Err_SetObject
                Set obFunction = ObProject.DynProperties(strFUTemp)
            On Error GoTo Err_FunctionUsage
            If (Not obFunction Is Nothing) Then
                'Row
                    strArray(1, 1) = obFunction.Name
                    If (ChkBox_Functions) Then
                        strArray(1, 2) = "href"
                        strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    Else
                        strArray(1, 2) = ""
                        strArray(1, 3) = ""
                    End If
                    strArray(2, 1) = ObProject.Name
                    If (ChkBox_Project) Then
                        strArray(2, 2) = "href"
                        strArray(2, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                    Else
                        strArray(2, 2) = ""
                        strArray(2, 3) = ""
                    End If
                    strArray(3, 1) = ObProject.Name
                    If (ChkBox_Project) Then
                        strArray(3, 2) = "href"
                        strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                    Else
                        strArray(3, 2) = ""
                        strArray(3, 3) = ""
                    End If
                    strArray(4, 1) = "Project"
                    strArray(4, 2) = ""
                    strArray(4, 3) = ""
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                    nRowCounter = nRowCounter + 1
                Set obFunction = Nothing
            End If
        Wend

    'Loop TimeFunctions for FunctionUsageInformation
        For i = 0 To ObProject.TimeFunctions.Count - 1
            On Error GoTo Err_SetObject
                Set obTimeFunction = ObProject.TimeFunctions.Item(i)
            On Error GoTo Err_FunctionUsage
            If (Not obTimeFunction Is Nothing) Then
            'Gather FunctionUsageInformation in TimeFunction
                strFUTempCollection = strFUinTimeFunction
                While Not strFUTempCollection = ""
                    strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
                    strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obFunction = obTimeFunction.DynProperties(strFUTemp)
                    On Error GoTo Err_FunctionUsage
                    If (Not obFunction Is Nothing) Then
                        'Row
                            strArray(1, 1) = obFunction.Name
                            If (ChkBox_Functions) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = obTimeFunction.Name
                            If (ChkBox_TimeControls) Then
                                strArray(2, 2) = "href"
                                strArray(2, 3) = "..\" & C_PATHFILE_TIMECONTROLS & "#TimeControl[Entry-Name='" & obTimeFunction.Name & "']"
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = ObProject.Name
                            If (ChkBox_Project) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_PROJECTINFO & "#PROJECT"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "TimeControls"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obFunction = Nothing
                    End If
                Wend
                Set obTimeFunction = Nothing
            End If
        Next
    End If
    
'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_FUNCTIONS)) Then
        LogMessage ("Error while creating Functions-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_FUNCTIONS_USAGE)) Then
        LogMessage ("Error while Saving Functions-Usage-Output!")
    End If
    
'Free Memory
    Set obPicture = Nothing
    Set obElement = Nothing
    Set obEdLimit = Nothing
    Set obFunctionForLoop = Nothing
    Set obZenMenu = Nothing
    Set obZenMenuItem = Nothing
    Set obScript = Nothing
    Set obTimeFunction = Nothing
    Set Vari = Nothing
    Set obFunction = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0) As String
    
    ModifyLastLogMessage ("..Done")
Exit Sub
Err_FunctionUsage:
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Private Sub CollectFunctionUsageInformationAnalyzeElement(obPicture As DynPicture, obElement As Element, strFUinElement As String, nRowCounter As Integer, Table As MSXML2.IXMLDOMElement)

Dim obFunction As RtFunction
Dim i As Integer
Dim strFUTempCollection As String
Dim strFUTemp As String
Dim obElement_local As Element
Dim nElementCount As Integer
Dim strTempForElements As String
Dim strTempForElements_link As String
Dim strArray() As String

ReDim strArray(1 To 4, 1 To 3) As String
Set obElement_local = obElement

On Error GoTo Err_FUAnalyzeElement
    'Is the current Element a Symbol?
    If (obElement_local.SymbolNo < 65534) Then
        On Error GoTo Err_SetElementCount
            nElementCount = obElement_local.Elements.Count
        On Error GoTo Err_FUAnalyzeElement
        'Does it have SubItems?
            For i = 0 To nElementCount - 1
                Set obElement_local = obElement_local.Elements.Item(i)
                Call CollectFunctionUsageInformationAnalyzeElement(obPicture, obElement_local, strFUinElement, nRowCounter, Table)
            Next
    Else
    'Gather FunctionUsageInformation in Element
        strFUTempCollection = strFUinElement
        While Not strFUTempCollection = ""
            strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
            strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
            On Error GoTo Err_SetObject
                Set obFunction = obElement_local.DynProperties(strFUTemp)
            On Error GoTo Err_FUAnalyzeElement
            If (Not obFunction Is Nothing) Then
                 'Create string for Elements without name
                    If (obElement_local.Name = "") Then
                        strTempForElements = "<Empty>"
                        strTempForElements_link = "Position: " & obElement_local.DynProperties("StartX") & ";" & obElement_local.DynProperties("StartY") & ";" & obElement_local.DynProperties("EndX") & ";" & obElement_local.DynProperties("EndY") & ";"
                    Else
                        strTempForElements = obElement_local.Name
                        strTempForElements_link = obElement_local.Name
                    End If
                'Row
                    strArray(1, 1) = obFunction.Name
                    If (ChkBox_Functions) Then
                        strArray(1, 2) = "href"
                        strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    Else
                        strArray(1, 2) = ""
                        strArray(1, 3) = ""
                    End If
                    strArray(2, 1) = strTempForElements
                    If (ChkBox_Pictures) Then
                        If (ChkBox_InclHardcopy) Then
                            strArray(2, 2) = "href"
                            strArray(2, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html#" & strTempForElements_link
                        End If
                    Else
                        strArray(2, 2) = ""
                        strArray(2, 3) = ""
                    End If
                    strArray(3, 1) = obPicture.Name
                    If (ChkBox_Pictures) Then
                        strArray(3, 2) = "href"
                        If (ChkBox_InclHardcopy) Then
                            strArray(3, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html"
                        Else
                            strArray(3, 3) = "..\" & C_PATHFILE_PICTURES & "#Screen[Entry-Name='" & obPicture.Name & "']"
                        End If
                    Else
                        strArray(3, 2) = ""
                        strArray(3, 3) = ""
                    End If
                    strArray(4, 1) = "Screen-Element"
                    strArray(4, 2) = ""
                    strArray(4, 3) = ""
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                    nRowCounter = nRowCounter + 1
                Set obFunction = Nothing
            End If
        Wend
    End If

'Free Memory
    Set obFunction = Nothing
    Set obElement_local = Nothing
    ReDim strArray(0 To 0) As String

Err_SetElementCount:
    Resume Next
Err_FUAnalyzeElement:
    Resume Next
Err_SetObject:
    Resume Next
End Sub


Private Sub CollectFunctionUsageInformationAnalyzeMenuItem(obZenMenuItem As ZenMenuItem, obZenMenuRoot As ZenMenu, strFUinZenMenuItem As String, nRowCounter As Integer, Table As MSXML2.IXMLDOMElement)

Dim obFunction As RtFunction
Dim i As Integer
Dim strFUTempCollection As String
Dim strFUTemp As String
Dim obZenMenuItem_local As ZenMenuItem
Dim nZenMenuItemCount As Integer
Dim strTempCaption As String
Dim strArray() As String

ReDim strArray(1 To 4, 1 To 3) As String
Set obZenMenuItem_local = obZenMenuItem
If (obZenMenuItem_local.Caption = "") Then
    strTempCaption = "<Empty>"
Else
    strTempCaption = obZenMenuItem.Caption
End If

On Error GoTo Err_FUAnalyzeZenMenuItem
    If (obZenMenuItem_local.Count > 0) Then
        On Error GoTo Err_SetZenMenuItemCount
            nZenMenuItemCount = obZenMenuItem_local.Count
        On Error GoTo Err_FUAnalyzeZenMenuItem
        For i = 0 To nZenMenuItemCount - 1
            Set obZenMenuItem_local = obZenMenuItem_local.Item(i)
            Call CollectFunctionUsageInformationAnalyzeMenuItem(obZenMenuItem_local, obZenMenuRoot, strFUinZenMenuItem, nRowCounter, Table)
        Next
    Else
    'Gather FunctionUsageInformation in ZenMenuItem
        strFUTempCollection = strFUinZenMenuItem
        While Not strFUTempCollection = ""
            strFUTemp = Mid(strFUTempCollection, 2, InStr(2, strFUTempCollection, "|") - 2)
            strFUTempCollection = Replace(strFUTempCollection, "|" & strFUTemp & "|", "")
            On Error GoTo Err_SetObject
                Set obFunction = obZenMenuItem_local.DynProperties(strFUTemp)
            On Error GoTo Err_FUAnalyzeZenMenuItem
            If (Not obFunction Is Nothing) Then
                'Row
                    strArray(1, 1) = obFunction.Name
                    If (ChkBox_Functions) Then
                        strArray(1, 2) = "href"
                        strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    Else
                        strArray(1, 2) = ""
                        strArray(1, 3) = ""
                    End If
                    strArray(2, 1) = strTempCaption
                    If (ChkBox_Menus) Then
                        strArray(2, 2) = "href"
                        strArray(2, 3) = "..\" & C_PATHFILE_MENUS & "#Menu[Entry-Name='" & obZenMenuRoot.Name & "']/MenuEntry[Entry-ID='ID" & obZenMenuItem_local.id & "']"
                    Else
                        strArray(2, 2) = ""
                        strArray(2, 3) = ""
                    End If
                    strArray(3, 1) = obZenMenuItem_local.Caption
                    If (ChkBox_Menus) Then
                        strArray(3, 2) = "href"
                        strArray(3, 3) = "..\" & C_PATHFILE_MENUS & "#Menu[Entry-Name='" & obZenMenuRoot.Name & "']/MenuEntry[Entry-ID='ID" & obZenMenuItem_local.id & "']"
                    Else
                        strArray(3, 2) = ""
                        strArray(3, 3) = ""
                    End If
                    strArray(4, 1) = "Menu-Item"
                    strArray(4, 2) = ""
                    strArray(4, 3) = ""
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                    nRowCounter = nRowCounter + 1
                Set obFunction = Nothing
            End If
        Wend
    End If

'Free Memory
    Set obFunction = Nothing
    Set obZenMenuItem_local = Nothing
    ReDim strArray(0 To 0) As String

Err_SetZenMenuItemCount:
    Resume Next
Err_FUAnalyzeZenMenuItem:
    Resume Next
Err_SetObject:
    Resume Next
End Sub



Private Sub CollectVariableUsageInformationAnalyzeElement(obPicture As DynPicture, obElement As Element, strVUinElement As String, nRowCounter As Integer, Table As MSXML2.IXMLDOMElement)

Dim obVariable As Variable
Dim i As Integer
Dim strVUTempCollection As String
Dim strVUTemp As String
Dim obElement_local As Element
Dim nElementCount As Integer
Dim strTempForElements As String
Dim strTempForElements_link As String
Dim strArray() As String

Set obElement_local = obElement
ReDim strArray(1 To 4, 1 To 3) As String

On Error GoTo Err_VUAnalyzeElement
    'Is Element a Symbol?
        If (obElement_local.SymbolNo < 65534) Then
            'Does it have SubItems?
                On Error GoTo Err_SetElementCount
                    nElementCount = obElement_local.Elements.Count
                On Error GoTo Err_VUAnalyzeElement
                For i = 0 To nElementCount - 1
                    Set obElement_local = obElement_local.Elements.Item(i)
                    Call CollectVariableUsageInformationAnalyzeElement(obPicture, obElement_local, strVUinElement, nRowCounter, Table)
                Next
        Else
            'Gather VariableUsageInformation in Element
                strVUTempCollection = strVUinElement
                While Not strVUTempCollection = ""
                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obVariable = obElement_local.DynProperties(strVUTemp)
                    On Error GoTo Err_VUAnalyzeElement
                    If (Not obVariable Is Nothing) Then
                            'Create string for Elements without name
                                If (obElement_local.Name = "") Then
                                    strTempForElements = "<Empty>"
                                    strTempForElements_link = "Position: " & obElement_local.DynProperties("StartX") & ";" & obElement_local.DynProperties("StartY") & ";" & obElement_local.DynProperties("EndX") & ";" & obElement_local.DynProperties("EndY") & ";"
                                Else
                                    strTempForElements = obElement_local.Name
                                    strTempForElements_link = obElement_local.Name
                                End If
                            'Row
                                strArray(1, 1) = obVariable.Name
                                If (ChkBox_Variables) Then
                                    strArray(1, 2) = "href"
                                    strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                                Else
                                    strArray(1, 2) = ""
                                    strArray(1, 3) = ""
                                End If
                                strArray(2, 1) = strTempForElements
                                If (ChkBox_Pictures) Then
                                    If (ChkBox_InclHardcopy) Then
                                        strArray(2, 2) = "href"
                                        strArray(2, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html#" & strTempForElements_link
                                    End If
                                Else
                                    strArray(2, 2) = ""
                                    strArray(2, 3) = ""
                                End If
                                strArray(3, 1) = obPicture.Name
                                If (ChkBox_Pictures) Then
                                    strArray(3, 2) = "href"
                                    If (ChkBox_InclHardcopy) Then
                                        strArray(3, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html"
                                    Else
                                        strArray(3, 3) = "..\" & C_PATHFILE_PICTURES & "#Screen[Entry-Name='" & obPicture.Name & "']"
                                    End If
                                Else
                                    strArray(3, 2) = ""
                                    strArray(3, 3) = ""
                                End If
                                strArray(4, 1) = "Screen-Element"
                                strArray(4, 2) = ""
                                strArray(4, 3) = ""
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                                nRowCounter = nRowCounter + 1
                        Set obVariable = Nothing
                    End If
                Wend
        End If
        
'Free Memory
    Set obVariable = Nothing
    Set obElement_local = Nothing
    ReDim strArray(0 To 0) As String

Err_SetElementCount:
    Resume Next
Err_VUAnalyzeElement:
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Private Sub CollectVariableUsageInformationAnalyzeMenuItem(obZenMenuItem As ZenMenuItem, obZenMenuRoot As ZenMenu, strVUinZenMenuItem As String, nRowCounter As Integer, Table As MSXML2.IXMLDOMElement)

Dim obVariable As Variable
Dim i As Integer
Dim strVUTempCollection As String
Dim strVUTemp As String
Dim obZenMenuItem_local As ZenMenuItem
Dim nZenMenuItemCount As Integer
Dim strTempCaption As String
Dim strArray() As String

ReDim strArray(1 To 4, 1 To 3) As String
Set obZenMenuItem_local = obZenMenuItem
If (obZenMenuItem_local.Caption = "") Then
    strTempCaption = "<Empty>"
Else
    strTempCaption = obZenMenuItem.Caption
End If

On Error GoTo Err_VUAnalyzeZenMenuItem
    'Does this MenuItem have SubItems?
        If (obZenMenuItem_local.Count > 0) Then
            'Loop SubItems and analyze them
                On Error GoTo Err_SetZenMenuItemCount
                    nZenMenuItemCount = obZenMenuItem_local.Count
                On Error GoTo Err_VUAnalyzeZenMenuItem
                For i = 0 To nZenMenuItemCount - 1
                    Set obZenMenuItem_local = obZenMenuItem_local.Item(i)
                    Call CollectVariableUsageInformationAnalyzeMenuItem(obZenMenuItem_local, obZenMenuRoot, strVUinZenMenuItem, nRowCounter, Table)
                Next
        Else
            'Gather VariableUsageInformation in ZenMenuItem
                strVUTempCollection = strVUinZenMenuItem
                While Not strVUTempCollection = ""
                    strVUTemp = Mid(strVUTempCollection, 2, InStr(2, strVUTempCollection, "|") - 2)
                    strVUTempCollection = Replace(strVUTempCollection, "|" & strVUTemp & "|", "")
                    On Error GoTo Err_SetObject
                        Set obVariable = obZenMenuItem_local.DynProperties(strVUTemp)
                    On Error GoTo Err_VUAnalyzeZenMenuItem
                    If (Not obVariable Is Nothing) Then
                        'Row
                            strArray(1, 1) = obVariable.Name
                            If (ChkBox_Variables) Then
                                strArray(1, 2) = "href"
                                strArray(1, 3) = "..\" & GetLinkForVariable(obVariable.Name)
                            Else
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                            End If
                            strArray(2, 1) = strTempCaption
                            If (ChkBox_Menus) Then
                                strArray(2, 2) = "href"
                                strArray(2, 3) = "..\" & C_PATHFILE_MENUS & "#Menu[Entry-Name='" & obZenMenuRoot.Name & "']/MenuEntry[Entry-ID='ID" & obZenMenuItem_local.id & "']"
                            Else
                                strArray(2, 2) = ""
                                strArray(2, 3) = ""
                            End If
                            strArray(3, 1) = obZenMenuItem_local.Caption
                            If (ChkBox_Menus) Then
                                strArray(3, 2) = "href"
                                strArray(3, 3) = "..\" & C_PATHFILE_MENUS & "#Menu[Entry-Name='" & obZenMenuRoot.Name & "']/MenuEntry[Entry-ID='ID" & obZenMenuItem_local.id & "']"
                            Else
                                strArray(3, 2) = ""
                                strArray(3, 3) = ""
                            End If
                            strArray(4, 1) = "Menu-Item"
                            strArray(4, 2) = ""
                            strArray(4, 3) = ""
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 4, nRowCounter)
                            nRowCounter = nRowCounter + 1
                        Set obVariable = Nothing
                    End If
                Wend
        End If

Err_SetZenMenuItemCount:
    Resume Next
Err_VUAnalyzeZenMenuItem:
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Private Function CollectDatatypesInformationGetArrayTagFromVarType(obVarType As VarType) As String

Dim obVarType_local As VarType
Dim VariProperties As Variant
Dim i As Integer
Dim strTEMP As String
Dim strRet As String
Set obVarType_local = obVarType
VariProperties = obVarType_local.DynPropertiesEnum("")

On Error GoTo Err_GetArrayVarType
    'Does this VarType have Dimension-Properties?
        For i = 0 To UBound(VariProperties)
            strTEMP = Left(VariProperties(i), InStr(1, VariProperties(i), ",") - 1)
            If (InStr(1, strTEMP, "Dim") > 0) Then
                'We only need to make sure that there is at least one Dimension-Property in the VarType
                'Are any of the Dimensions filled?
                    If (obVarType_local.DynProperties("Dim1") Or obVarType_local.DynProperties("Dim2") Or obVarType_local.DynProperties("Dim3")) Then
                        strRet = "["
                        If (obVarType_local.DynProperties("Dim1")) Then
                            strRet = strRet & obVarType_local.DynProperties("Dim1")
                        Else
                            strRet = strRet & "0"
                        End If
                        If (obVarType_local.DynProperties("Dim2")) Then
                            strRet = strRet & "," & obVarType_local.DynProperties("Dim2")
                        Else
                            If (obVarType_local.DynProperties("Dim3")) Then
                                strRet = strRet & ",0"
                            End If
                        End If
                        If (obVarType_local.DynProperties("Dim3")) Then
                            strRet = strRet & "," & obVarType_local.DynProperties("Dim3")
                        End If
                        strRet = strRet & "]"
                    End If
                'Exit Function if there are no Dimension-Properties or none are filled
                    CollectDatatypesInformationGetArrayTagFromVarType = strRet
                    Exit Function
            End If
        Next
    
CollectDatatypesInformationGetArrayTagFromVarType = strRet

'Free Memory
    Set obVarType_local = Nothing
    Set VariProperties = Nothing

Exit Function
Err_GetArrayVarType:
    Resume Next

End Function
Private Function CollectDatatypesInformationGetArrayTagFromComplexItem(obComplexItem As ComplexItem) As String

Dim obComplexItem_local As ComplexItem
Dim VariProperties As Variant
Dim i As Integer
Dim strTEMP As String
Dim strRet As String
Set obComplexItem_local = obComplexItem
VariProperties = obComplexItem_local.DynPropertiesEnum("")

On Error GoTo Err_GetArrayTagComplexItem
    'Does this ComplexItem have Dimension-Properties?
        For i = 0 To UBound(VariProperties)
            strTEMP = Left(VariProperties(i), InStr(1, VariProperties(i), ",") - 1)
            If (InStr(1, strTEMP, "Dim") > 0) Then
                'We only need to make sure that there is at least one Dimension-Property in the ComplexItem
                'Are any of the Dimensions filled?
                    If (obComplexItem_local.DynProperties("Dim1") Or obComplexItem_local.DynProperties("Dim2") Or obComplexItem_local.DynProperties("Dim3")) Then
                        strRet = "["
                        If (obComplexItem_local.DynProperties("Dim1")) Then
                            strRet = strRet & obComplexItem_local.DynProperties("Dim1")
                        Else
                            strRet = strRet & "0"
                        End If
                        If (obComplexItem_local.DynProperties("Dim2")) Then
                            strRet = strRet & "," & obComplexItem_local.DynProperties("Dim2")
                        Else
                            If (obComplexItem_local.DynProperties("Dim3")) Then
                                strRet = strRet & ",0"
                            End If
                        End If
                        If (obComplexItem_local.DynProperties("Dim3")) Then
                            strRet = strRet & "," & obComplexItem_local.DynProperties("Dim3")
                        End If
                        strRet = strRet & "]"
                    End If
                'Exit Function if there are no Dimension-Properties or none are filled
                    CollectDatatypesInformationGetArrayTagFromComplexItem = strRet
                    Exit Function
            End If
        Next

CollectDatatypesInformationGetArrayTagFromComplexItem = strRet

'Free Memory
    Set obComplexItem_local = Nothing
    Set VariProperties = Nothing
    
Exit Function
Err_GetArrayTagComplexItem:
    Resume Next

End Function

'****************************************************************************
' Methode:      CollectDatatypesInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Variables
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectDatatypesInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument, ByVal XLSDoc As MSXML2.DOMDocument)
Dim obVarType As VarType
Dim obVarTypeFromElement As VarType
Dim obComplexItem As ComplexItem
Dim nVarIndex As Integer
Dim nComplexIndex As Integer
Dim strTEMP As String
Dim XSLStartPointForVarTypesList As MSXML2.IXMLDOMElement
Dim XSLStartPointForVarTypesTree As MSXML2.IXMLDOMElement
Dim XSLStartPointForVarTypesTree_local As MSXML2.IXMLDOMElement
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim obArrObjects() As VarType
Dim nCurArrDim As Integer
Dim strArrayTree() As String
Dim strArrWantedProperties() As String
Dim strArrayNames() As String

ReDim strArrayNames(1 To (C_COLS_VARTYPELIST + 1)) As String
ReDim obArrObjects(1 To C_COLS_VARTYPELIST) As VarType
ReDim strArrayTree(1 To 10) As String
nCurArrDim = 1

'Initialize Properties for Translation
Dim astrProps_VarTypes(1 To 52, 1 To 2)
    astrProps_VarTypes(1, 1) = "Acknowledgement value"
    astrProps_VarTypes(1, 2) = "AlarmQuitPVValue"
    astrProps_VarTypes(2, 1) = "Acknowledgement variable"
    astrProps_VarTypes(2, 2) = "AlarmQuitPV"
    astrProps_VarTypes(3, 1) = "Active"
    astrProps_VarTypes(3, 2) = "NormalStateActive"
    astrProps_VarTypes(4, 1) = "AdjustHardwareValue"
    astrProps_VarTypes(4, 2) = "AdjustHardware"
    astrProps_VarTypes(5, 1) = "AdjustZenOnValue"
    astrProps_VarTypes(5, 2) = "AdjustZenon"
    astrProps_VarTypes(6, 1) = "Alarm variable 1"
    astrProps_VarTypes(6, 2) = "AlarmPV0"
    astrProps_VarTypes(7, 1) = "Alarm variable 2"
    astrProps_VarTypes(7, 2) = "AlarmPV1"
    astrProps_VarTypes(8, 1) = "Alarm variable 3"
    astrProps_VarTypes(8, 2) = "AlarmPV2"
    astrProps_VarTypes(9, 1) = "Alternate value"
    astrProps_VarTypes(9, 2) = "AlternateValue"
    astrProps_VarTypes(10, 1) = "Array Dim 1"
    astrProps_VarTypes(10, 2) = "Dim1"
    astrProps_VarTypes(11, 1) = "Array Dim 2"
    astrProps_VarTypes(11, 2) = "Dim2"
    astrProps_VarTypes(12, 1) = "Array Dim 3"
    astrProps_VarTypes(12, 2) = "Dim3"
    astrProps_VarTypes(13, 1) = "Array size"
    astrProps_VarTypes(13, 2) = "ArraySizeOld"
    astrProps_VarTypes(14, 1) = "Counter group"
    astrProps_VarTypes(14, 2) = "CounterGroup"
    astrProps_VarTypes(15, 1) = "DDE active"
    astrProps_VarTypes(15, 2) = "DDEActive"
    astrProps_VarTypes(16, 1) = "Decimals"
    astrProps_VarTypes(16, 2) = "Digits"
    astrProps_VarTypes(17, 1) = "Description"
    astrProps_VarTypes(17, 2) = "Description"
    astrProps_VarTypes(18, 1) = "HD active"
    astrProps_VarTypes(18, 2) = "HDActive"
    astrProps_VarTypes(19, 1) = "Identification"
    astrProps_VarTypes(19, 2) = "Tagname"
    astrProps_VarTypes(20, 1) = "IEC datatype"
    astrProps_VarTypes(20, 2) = "ID_DataTyp"
    astrProps_VarTypes(21, 1) = "Interlocking"
    astrProps_VarTypes(21, 2) = "Locking"
    astrProps_VarTypes(22, 1) = "Logging"
    astrProps_VarTypes(22, 2) = "SetValueProtocol"
    astrProps_VarTypes(23, 1) = "Max. set value"
    astrProps_VarTypes(23, 2) = "ValueMax"
    astrProps_VarTypes(24, 1) = "Maximum gradient"
    astrProps_VarTypes(24, 2) = "MaxGradient"
    astrProps_VarTypes(25, 1) = "Measuring range max."
    astrProps_VarTypes(25, 2) = "RangeMax"
    astrProps_VarTypes(26, 1) = "Measuring range min."
    astrProps_VarTypes(26, 2) = "RangeMin"
    astrProps_VarTypes(27, 1) = "Min. set value"
    astrProps_VarTypes(27, 2) = "ValueMin"
    astrProps_VarTypes(28, 1) = "negative"
    astrProps_VarTypes(28, 2) = "HystNeg"
    astrProps_VarTypes(29, 1) = "Non linear value adjustment via macros"
    astrProps_VarTypes(29, 2) = "UseMacro"
    astrProps_VarTypes(30, 1) = "Normal value"
    astrProps_VarTypes(30, 2) = "NormalState"
    astrProps_VarTypes(31, 1) = "Number of values"
    astrProps_VarTypes(31, 2) = "HDSize"
    astrProps_VarTypes(32, 1) = "Old and new value"
    astrProps_VarTypes(32, 2) = "SV_Act"
    astrProps_VarTypes(33, 1) = "Only read from standby"
    astrProps_VarTypes(33, 2) = "Standby"
    astrProps_VarTypes(34, 1) = "Pos. in structure"
    astrProps_VarTypes(34, 2) = "ItemIndex"
    astrProps_VarTypes(35, 1) = "positive"
    astrProps_VarTypes(35, 2) = "HystPos"
    astrProps_VarTypes(36, 1) = "Priority"
    astrProps_VarTypes(36, 2) = "UpdatePriority"
    astrProps_VarTypes(37, 1) = "Reaction matrix"
    astrProps_VarTypes(37, 2) = "Rema"
    astrProps_VarTypes(38, 1) = "Recording type"
    astrProps_VarTypes(38, 2) = "IsKDAActiv"
    astrProps_VarTypes(39, 1) = "Rema Active"
    astrProps_VarTypes(39, 2) = "IsRemaActiv"
    astrProps_VarTypes(40, 1) = "Resources label"
    astrProps_VarTypes(40, 2) = "Recourceslabel"
    astrProps_VarTypes(41, 1) = "save in IPA database"
    astrProps_VarTypes(41, 2) = "VarInASM"
    astrProps_VarTypes(42, 1) = "Scan rate [s]"
    astrProps_VarTypes(42, 2) = "HDUpdate"
    astrProps_VarTypes(43, 1) = "Setting values active"
    astrProps_VarTypes(43, 2) = "InOut"
    astrProps_VarTypes(44, 1) = "Setting values with VBA"
    astrProps_VarTypes(44, 2) = "SV_VBA"
    astrProps_VarTypes(45, 1) = "Signal resolution max."
    astrProps_VarTypes(45, 2) = "SignalMax"
    astrProps_VarTypes(46, 1) = "Signal resolution min."
    astrProps_VarTypes(46, 2) = "SignalMin"
    astrProps_VarTypes(47, 1) = "String alternative value"
    astrProps_VarTypes(47, 2) = "AlternateValueString"
    astrProps_VarTypes(48, 1) = "String length"
    astrProps_VarTypes(48, 2) = "MaxStringLen"
    astrProps_VarTypes(49, 1) = "Unit"
    astrProps_VarTypes(49, 2) = "Unit"
    astrProps_VarTypes(50, 1) = "Array start index"
    astrProps_VarTypes(50, 2) = "LBound"
    astrProps_VarTypes(51, 1) = "Bit offset"
    astrProps_VarTypes(51, 2) = "BitOffset"
    astrProps_VarTypes(52, 1) = "Offset"
    astrProps_VarTypes(52, 2) = "Offset"

    
'Get the Selected VariableProperties from Control
    'Count selected entries
        For i = 0 To LstBox_Vartypes.ListCount - 1
            If (LstBox_Vartypes.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_Vartypes.ListCount - 1
                If (LstBox_Vartypes.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_Vartypes.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_VarTypes)
                            If (astrProps_VarTypes(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_VarTypes(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "DATATYPES", "DATATYPES", "name")

'Sub-Title
    nCounterSubChapters = 1
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes Tree", "Datatypes Tree", "name")

'Base for DatatypeTree
    Set XSLStartPointForVarTypesTree = AddBaseForHTMLTree(curXMLDoc, curXMLItem)

'Sub-Title
    nCounterSubChapters = 2
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes List", "Datatypes List", "name")

'Base for Datatypelist
    Set XSLStartPointForVarTypesList = curXMLItem

'Get Variable-Information
On Error GoTo Err_VartypeInfo
LogMessage "Collecting Datatypes information.."
    If (Not ObProject Is Nothing) Then
        nVarIndex = ObProject.VarTypes.Count
        If (nVarIndex > 0) Then
        'Loop through VarTypes
            For nVarIndex = 0 To ObProject.VarTypes.Count - 1
                Set obVarType = ObProject.VarTypes.Item(nVarIndex)
                If (Not obVarType Is Nothing) Then
                    'Datatypes having "/<" in their names are not wanted in the final document
                    If (InStr(1, obVarType.Name, "/<") = 0) Then
                        If (obVarType.IsSimple = True) Then
                            'Simple Datatype and not part of a structure
                            strVTInfo(nCurArrDim) = "SIMPLE"
                            Call CollectDatatypesInformationAnalyzeDatatype(XMLDoc, obVarType, strArrWantedProperties, XSLStartPointForVarTypesList, XSLStartPointForVarTypesTree, "", C_VARTYPE_SIMPLE, obArrObjects, nCurArrDim, strArrayNames)
                        End If
                        If (obVarType.IsSimple = False) Then
                            'Structure
                                'Loop SubItems for Structure-Elements
                                    'Tree-Entry
                                        ReDim strArrayTree(1 To 10) As String
                                        strArrayTree(1) = obVarType.Name & CollectDatatypesInformationGetArrayTagFromVarType(obVarType)
                                        strArrayTree(2) = "Datatype-TreeEntry[caption='" & obVarType.Name & "']"
                                        strArrayTree(3) = "name"
                                        strArrayTree(4) = C_VARTYPE_STRUCTURE
                                        Set XSLStartPointForVarTypesTree_local = AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForVarTypesTree)
                                    For nComplexIndex = 0 To obVarType.SubItemCount - 1
                                        Set obComplexItem = obVarType.SubItem(nComplexIndex)
                                        'Get VarType-Object linked to ComplexItem-Object
                                            Set obVarTypeFromElement = CollectDatatypesInformationGetDT(obComplexItem.DynProperties("ID_DataTyp"), obComplexItem)
                                        'Linked Element?
                                            If (obComplexItem.DynProperties("HasRef") = True) Then
                                                strVTInfo(nCurArrDim) = "LINKED"
                                                strVarTypesAlreadyInTable = Replace(strVarTypesAlreadyInTable, "|ID" & obVarTypeFromElement.id & "|", "")
                                                Call CollectDatatypesInformationAnalyzeDatatype(XMLDoc, obVarTypeFromElement, strArrWantedProperties, XSLStartPointForVarTypesList, XSLStartPointForVarTypesTree_local, obComplexItem.DynProperties("Name") & CollectDatatypesInformationGetArrayTagFromComplexItem(obComplexItem), C_VARTYPE_STRUCTURE_ELEMENT_LINKED, obArrObjects, nCurArrDim, strArrayNames)
                                            Else
                                                strVTInfo(nCurArrDim) = "EMBEDDED"
                                                Call CollectDatatypesInformationAnalyzeDatatype(XMLDoc, obVarTypeFromElement, strArrWantedProperties, XSLStartPointForVarTypesList, XSLStartPointForVarTypesTree_local, obComplexItem.DynProperties("Name") & CollectDatatypesInformationGetArrayTagFromComplexItem(obComplexItem), C_VARTYPE_STRUCTURE_ELEMENT_EMBEDDED, obArrObjects, nCurArrDim, strArrayNames)
                                            End If
                                    Next
                        End If
                    End If
                End If
            Next
            
        'Filler needed for Last Table?
            If (nCurArrDim > 1) Then
                'Fill up Object-Array
                    For i = (nCurArrDim + 1) To UBound(obArrObjects)
                        obArrObjects(i) = Nothing
                        strArrayNames(i) = ""
                    Next
                'Create HTML-Table
                    strVTInfo(nCurArrDim) = "EMPTY"
                    Call CollectDatatypesInformationCreateHTMLTable(strArrWantedProperties, XSLStartPointForVarTypesList, obArrObjects, nCurArrDim, strArrayNames)
            End If
        
        End If

    End If
    
    'Write Files
        If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_VARTYPES)) Then
            LogMessage ("Error while creating Datatypes-Folder!")
        End If
        If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARTYPES)) Then
            LogMessage ("Error while Saving Datatypes-Output!")
        End If
    
    'Free Memory
        Set obVarType = Nothing
        Set obVarTypeFromElement = Nothing
        Set obComplexItem = Nothing
        Set XSLStartPointForVarTypesList = Nothing
        Set XSLStartPointForVarTypesTree = Nothing
        Set XSLStartPointForVarTypesTree_local = Nothing
        Set Table = Nothing
        ReDim obArrObjects(0 To 0) As VarType
        ReDim strArrayTree(0 To 0) As String
        ReDim strUsableDynProperties(0 To 0) As String
        ReDim strArrWantedProperties(0 To 0) As String
        ReDim strArrayNames(0 To 0) As String
                                        
    ModifyLastLogMessage ("..Done")
Exit Sub
Err_VartypeInfo:
    LogMessage ("Problem while collecting information from Datatypes")
    Resume Next
End Sub
Function CollectDatatypesInformationAnalyzeDatatype(XMLDoc As MSXML2.DOMDocument, obVarType As VarType, strArrWantedProperties() As String, XSLStartPointForVarTypesList As MSXML2.IXMLDOMElement, XSLStartPointForVarTypesTree As MSXML2.IXMLDOMElement, strNameFromStructureElement As String, strEntryType As String, obArrObjects() As VarType, nCurArrDim As Integer, strArrayNames() As String)

Dim XSLStartPointForVarTypesTree_local As MSXML2.IXMLDOMElement
Dim obVarType_local As VarType
Dim strName As String
Dim strID As String
Dim nComplexIndex As Integer
Dim obComplexItem As ComplexItem
Dim obVarTypeFromElement As VarType
Dim strArrayTree() As String

Set obVarType_local = obVarType

On Error GoTo Err_CollectDatatypesInformationAnalyzeDatatype
    'When analyzing a Structure-Element the Name must be taken from the ComplexItem not from the VarType
        If (Not strNameFromStructureElement = "") Then
            strName = strNameFromStructureElement
        Else
            strName = obVarType_local.DynProperties("Name") & CollectDatatypesInformationGetArrayTagFromVarType(obVarType_local)
        End If
    strID = "ID" & obVarType_local.id
    If (obVarType_local.IsSimple = True) Then
        'Simple Datatype
            If (InStr(1, strVarTypesAlreadyInTable, "|" & strID & "|") = 0) Then
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = strName
                    strArrayTree(2) = "..\" & C_PATHFILE_VARTYPES & "#Datatype[Entry-ID='" & strID & "']"
                    strArrayTree(3) = "href"
                    strArrayTree(4) = strEntryType
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForVarTypesTree)
                'Save Items in Arrays
                    Set obArrObjects(nCurArrDim) = obVarType_local
                    strArrayNames(nCurArrDim) = strName
                'Are there enough objects in the array to write a table?
                    If (nCurArrDim = C_COLS_VARTYPELIST) Then
                        'Create HTML Table
                            Call CollectDatatypesInformationCreateHTMLTable(strArrWantedProperties, XSLStartPointForVarTypesList, obArrObjects, nCurArrDim, strArrayNames)
                    End If
                    'Add to counter
                        nCurArrDim = nCurArrDim + 1
                'Gather Information for Limit-Checking
                    strDatatypesToCheck = strDatatypesToCheck + "<|" & strName & "||" & obVarType_local.Name & "||" & strID & "|>"
                    nCurDTLArraySize = nCurDTLArraySize + 1
            End If
    End If
    If (obVarType_local.IsSimple = False) Then
        'Structure
            'Loop SubItems for Simple Datatypes
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = obVarType_local.Name
                    strArrayTree(2) = "DatatypeTreeEntry[caption='" & obVarType_local.Name & "']"
                    strArrayTree(3) = "name"
                    strArrayTree(4) = C_VARTYPE_STRUCTURE
                    Set XSLStartPointForVarTypesTree_local = AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForVarTypesTree)
                For nComplexIndex = 0 To obVarType_local.SubItemCount - 1
                    Set obComplexItem = obVarType_local.SubItem(nComplexIndex)
                    Set obVarTypeFromElement = CollectDatatypesInformationGetDT(obComplexItem.DynProperties("ID_DataTyp"), obComplexItem)
                    'Linked Element?
                        If (obComplexItem.DynProperties("HasRef") = True) Then
                            strVarTypesAlreadyInTable = Replace(strVarTypesAlreadyInTable, "|ID" & obVarTypeFromElement.id & "|", "")
                            Call CollectDatatypesInformationAnalyzeDatatype(XMLDoc, obVarTypeFromElement, strArrWantedProperties, XSLStartPointForVarTypesList, XSLStartPointForVarTypesTree_local, obComplexItem.DynProperties("Name") & CollectDatatypesInformationGetArrayTagFromComplexItem(obComplexItem), C_VARTYPE_STRUCTURE_ELEMENT_LINKED, obArrObjects, nCurArrDim, strArrayNames)
                        Else
                            Call CollectDatatypesInformationAnalyzeDatatype(XMLDoc, obVarTypeFromElement, strArrWantedProperties, XSLStartPointForVarTypesList, XSLStartPointForVarTypesTree_local, obComplexItem.DynProperties("Name") & CollectDatatypesInformationGetArrayTagFromComplexItem(obComplexItem), C_VARTYPE_STRUCTURE_ELEMENT_EMBEDDED, obArrObjects, nCurArrDim, strArrayNames)
                        End If
                Next
    End If
    
    'Free Memory
        Set XSLStartPointForVarTypesTree_local = Nothing
        Set obVarType_local = Nothing
        Set obComplexItem = Nothing
        Set obVarTypeFromElement = Nothing
        ReDim strArrayTree(0 To 0) As String
        
Err_CollectDatatypesInformationAnalyzeDatatype:
    'Resume Next
End Function

Function CollectDatatypesInformationCreateHTMLTable(strArrWantedProperties() As String, XSLStartPointForVarTypesList As MSXML2.IXMLDOMElement, obArrObjects() As VarType, nCurArrDim As Integer, strArrayNames() As String)

Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim strArrUsableDynProperties() As String
ReDim strArrUsableDynProperties(1 To C_COLS_VARTYPELIST) As String
ReDim strArray(1 To (C_COLS_VARTYPELIST + 1), 1 To 3) As String
Dim i As Integer
Dim j As Integer
Dim n As Integer
Dim strTEMP As String
Dim vResult As Variant
Dim zVType As VarType

On Error GoTo ErrHandler
    'Start Table
        Set Table = Nothing
        Set Table = AddHTMLTableStart(curXMLDoc, XSLStartPointForVarTypesList)
    '1st Row
        strArray(1, 1) = "Name"
        strArray(1, 2) = ""
        strArray(1, 3) = ""
        'Loop Array
            For i = 1 To C_COLS_VARTYPELIST
                If (obArrObjects(i) Is Nothing) Then
                    'Filler needed = Empty Column
                        strArray(i + 1, 1) = ""
                        strArray(i + 1, 2) = ""
                        strArray(i + 1, 3) = ""
                Else
                    'Information for Column
                        strArray(i + 1, 1) = strArrayNames(i)
                        strArray(i + 1, 2) = "name"
                        strArray(i + 1, 3) = "Datatype[Entry-ID='ID" & obArrObjects(i).id & "']"
                    'Usable Dynproperties for this object
                        strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                End If
            Next
    'Write 1st Row
        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARTYPELIST + 1, 0)
    'Get Properties from objects
        'Loop Wanted Properties
            For i = 1 To UBound(strArrWantedProperties)
                'Get Property
                    strTEMP = strArrWantedProperties(i, 2)
                'Row - 1st Column
                    strArray(1, 1) = strArrWantedProperties(i, 1)
                    strArray(1, 2) = ""
                    strArray(1, 3) = ""
                'Loop Array
                    For j = 1 To C_COLS_VARTYPELIST
                        'Row - following Columns
                        If (obArrObjects(j) Is Nothing) Then
                            'Filler needed = Empty Column
                                strArray(j + 1, 1) = ""
                                strArray(j + 1, 2) = ""
                                strArray(j + 1, 3) = ""
                        Else
                            'Is the current Property available in this object?
                            If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                strArray(j + 1, 2) = ""
                                strArray(j + 1, 3) = ""
                                
                                If strTEMP = "ID_DataTyp" Then
                                    For n = 0 To MyWorkspace.ActiveDocument.VarTypes.Count - 1
                                        If Val(obArrObjects(j).DynProperties("ID_DataTyp")) = MyWorkspace.ActiveDocument.VarTypes.Item(n).id Then
                                            strArray(j + 1, 1) = MyWorkspace.ActiveDocument.VarTypes.Item(n).Name
                                        End If
                                    Next n
                                End If
                                'The "Description" of Structure Elements (Embedded or Linked Types) is set at the Structure definition and not at the element itself
                                If strTEMP = "Description" And (strVTInfo(j) = "EMBEDDED" Or strVTInfo(j) = "LINKED") Then
                                    'Structure element or LinkedType
                                    Set zVType = obArrObjects(j)
                                    vResult = GetStruktMain(zVType, strTEMP)
                                    If Not IsError(vResult) Then
                                        strArray(j + 1, 1) = vResult
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                    Else
                                        strArray(j + 1, 1) = ""
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                    End If
                                End If
                            Else
                                'Some properties of Structure Elements (Embedded or Linked Types)are not found at the Element. they have to be collected at the structure definition
                                If strVTInfo(j) = "EMBEDDED" Or strVTInfo(j) = "LINKED" Then
                                    Set zVType = obArrObjects(j)
                                    vResult = GetStruktMain(zVType, strTEMP)
                                    If Not IsError(vResult) Then
                                        strArray(j + 1, 1) = vResult
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                    Else
                                        strArray(j + 1, 1) = ""
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                    End If
                                Else
                                    strArray(j + 1, 1) = ""
                                    strArray(j + 1, 2) = ""
                                    strArray(j + 1, 3) = ""
                                End If
                            End If
                        End If
                    Next
                'Write Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARTYPELIST + 1, i)
            Next
    'Reset Counter and Array
        nCurArrDim = 0
        ReDim strArray(1 To C_COLS_VARTYPELIST + 1, 1 To 3) As String
        ReDim obArrObjects(1 To C_COLS_VARTYPELIST) As VarType
    
    'Free Memory
        Set Table = Nothing
        ReDim strArrUsableDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function

ErrHandler:
    Resume Next
End Function

Function GetStruktMain(zVarType As VarType, strTEMP As String) As Variant
' Collects the demanded DynProperty from the Structure definition. This Properties are not stored at the Structure element
Dim i As Integer
Dim n As Integer
    For i = 0 To MyWorkspace.ActiveDocument.VarTypes.Count - 1
        For n = 0 To MyWorkspace.ActiveDocument.VarTypes.Item(i).SubItemCount - 1
            If Val(MyWorkspace.ActiveDocument.VarTypes.Item(i).SubItem(n).DynProperties("ID_DataTyp")) = Val(zVarType.id) Then
                GetStruktMain = MyWorkspace.ActiveDocument.VarTypes.Item(i).SubItem(n).DynProperties(strTEMP)
                Exit Function
            End If
        Next n
    Next i
End Function

Function CollectDatatypesInformationGetDT(lID As Long, obComplexItem As ComplexItem) As VarType
    
    Dim i As Integer
    'Loop VarTypes to get the DataType-Object linked in the ComplexItem
    For i = 0 To MyWorkspace.ActiveDocument.VarTypes.Count - 1
        If MyWorkspace.ActiveDocument.VarTypes.Item(i).id = lID Then
            Set CollectDatatypesInformationGetDT = MyWorkspace.ActiveDocument.VarTypes.Item(i)
            Exit Function
        End If
    Next i
    
    Set CollectDatatypesInformationGetDT = Nothing
    
End Function


'****************************************************************************
' Methode:      CollectVariableInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Variables
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectVariableInformation(ObProject As Project)
Dim obVariable As Variable
Dim lVarIndex As Long
Dim Vari As Variant
Dim strTEMP As String
Dim strArrWantedProperties() As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As Variable
Dim strArrUsableDynProperties() As String
Dim nCurArrVarDim As Integer
Dim nCurFileNumber As Integer
Dim nCurMod As Integer

ReDim strArray(1 To (C_COLS_VARIABLELIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_VARIABLELIST) As Variable
ReDim strArrUsableDynProperties(1 To C_COLS_VARIABLELIST) As String
nCurArrVarDim = 1
nCurFileNumber = 1

'Initialize Properties for Translation
Dim astrProps_Variables(0 To 57, 1 To 2)
    astrProps_Variables(0, 1) = "Acknowledgement value"
    astrProps_Variables(0, 2) = "AlarmQuitPVValue"
    astrProps_Variables(1, 1) = "Acknowledgement variable"
    astrProps_Variables(1, 2) = "AlarmQuitPV"
    astrProps_Variables(2, 1) = "Active"
    astrProps_Variables(2, 2) = "NormalStateActive"
    astrProps_Variables(3, 1) = "AdjustHardwareValue"
    astrProps_Variables(3, 2) = "AdjustHardware"
    astrProps_Variables(4, 1) = "AdjustZenOnValue"
    astrProps_Variables(4, 2) = "AdjustZenon"
    astrProps_Variables(5, 1) = "Alarm variable 1"
    astrProps_Variables(5, 2) = "AlarmPV0"
    astrProps_Variables(6, 1) = "Alarm variable 2"
    astrProps_Variables(6, 2) = "AlarmPV1"
    astrProps_Variables(7, 1) = "Alarm variable 3"
    astrProps_Variables(7, 2) = "AlarmPV2"
    astrProps_Variables(8, 1) = "Alignment"
    astrProps_Variables(8, 2) = "Alignment"
    astrProps_Variables(9, 1) = "Alternate value"
    astrProps_Variables(9, 2) = "AlternateValue"
    astrProps_Variables(10, 1) = "Array size"
    astrProps_Variables(10, 2) = "ArraySizeOld"
    astrProps_Variables(11, 1) = "Bit number"
    astrProps_Variables(11, 2) = "BitAddr"
    astrProps_Variables(12, 1) = "Counter group"
    astrProps_Variables(12, 2) = "CounterGroup"
    astrProps_Variables(13, 1) = "Data block"
    astrProps_Variables(13, 2) = "DataBlock"
    astrProps_Variables(14, 1) = "Datatype"
    astrProps_Variables(14, 2) = "ID_DataTyp"
    astrProps_Variables(15, 1) = "DDE active"
    astrProps_Variables(15, 2) = "DDEActive"
    astrProps_Variables(16, 1) = "Decimals"
    astrProps_Variables(16, 2) = "Digits"
    astrProps_Variables(17, 1) = "Driver"
    astrProps_Variables(17, 2) = "Driver"
    astrProps_Variables(18, 1) = "Driver object type"
    astrProps_Variables(18, 2) = "ID_DriverTyp"
    astrProps_Variables(19, 1) = "Ext. address parameters"
    astrProps_Variables(19, 2) = "Adressparam"
    astrProps_Variables(20, 1) = "External init value"
    astrProps_Variables(20, 2) = "InitialValue"
    astrProps_Variables(21, 1) = "External profile name"
    astrProps_Variables(21, 2) = "Profilename"
    astrProps_Variables(22, 1) = "External read/write"
    astrProps_Variables(22, 2) = "ReadWrite"
    astrProps_Variables(23, 1) = "External variable group"
    astrProps_Variables(23, 2) = "Vargroup"
    astrProps_Variables(24, 1) = "Externally visible"
    astrProps_Variables(24, 2) = "ExternVisible"
    astrProps_Variables(25, 1) = "HD active"
    astrProps_Variables(25, 2) = "HDActive"
    astrProps_Variables(26, 1) = "Identification"
    astrProps_Variables(26, 2) = "Tagname"
    astrProps_Variables(27, 1) = "Interlocking"
    astrProps_Variables(27, 2) = "Locking"
    astrProps_Variables(28, 1) = "Logging"
    astrProps_Variables(28, 2) = "SetValueProtocol"
    astrProps_Variables(29, 1) = "Max. set value"
    astrProps_Variables(29, 2) = "ValueMax"
    astrProps_Variables(30, 1) = "Maximum gradient"
    astrProps_Variables(30, 2) = "MaxGradient"
    astrProps_Variables(31, 1) = "Measuring range max."
    astrProps_Variables(31, 2) = "RangeMax"
    astrProps_Variables(32, 1) = "Measuring range min."
    astrProps_Variables(32, 2) = "RangeMin"
    astrProps_Variables(33, 1) = "Min. set value"
    astrProps_Variables(33, 2) = "ValueMin"
    astrProps_Variables(34, 1) = "Name"
    astrProps_Variables(34, 2) = "Name"
    astrProps_Variables(35, 1) = "Negative"
    astrProps_Variables(35, 2) = "HystNeg"
    astrProps_Variables(36, 1) = "Net address"
    astrProps_Variables(36, 2) = "NetAddr"
    astrProps_Variables(37, 1) = "Non linear value adjustment via macros"
    astrProps_Variables(37, 2) = "UseMacro"
    astrProps_Variables(38, 1) = "Normal value"
    astrProps_Variables(38, 2) = "NormalState"
    astrProps_Variables(39, 1) = "Number of values"
    astrProps_Variables(39, 2) = "HDSize"
    astrProps_Variables(40, 1) = "Offset"
    astrProps_Variables(40, 2) = "Offset"
    astrProps_Variables(41, 1) = "Old and new value"
    astrProps_Variables(41, 2) = "SV_Act"
    astrProps_Variables(42, 1) = "Only read from standby"
    astrProps_Variables(42, 2) = "Standby"
    astrProps_Variables(43, 1) = "Positive"
    astrProps_Variables(43, 2) = "HystPos"
    astrProps_Variables(44, 1) = "Priority"
    astrProps_Variables(44, 2) = "UpdatePriority"
    astrProps_Variables(45, 1) = "Reaction matrix"
    astrProps_Variables(45, 2) = "Rema"
    astrProps_Variables(46, 1) = "Recording type"
    astrProps_Variables(46, 2) = "IsKDAActiv"
    astrProps_Variables(47, 1) = "Rema Active"
    astrProps_Variables(47, 2) = "IsRemaActiv"
    astrProps_Variables(48, 1) = "Resources label"
    astrProps_Variables(48, 2) = "Recourceslabel"
    astrProps_Variables(49, 1) = "Save in IPA database"
    astrProps_Variables(49, 2) = "VarInASM"
    astrProps_Variables(50, 1) = "Scan rate [s]"
    astrProps_Variables(50, 2) = "HDUpdate"
    astrProps_Variables(51, 1) = "Setting values active"
    astrProps_Variables(51, 2) = "InOut"
    astrProps_Variables(52, 1) = "Setting values with VBA"
    astrProps_Variables(52, 2) = "SV_VBA"
    astrProps_Variables(53, 1) = "Signal resolution max."
    astrProps_Variables(53, 2) = "SignalMax"
    astrProps_Variables(54, 1) = "Signal resolution min."
    astrProps_Variables(54, 2) = "SignalMin"
    astrProps_Variables(55, 1) = "String alternative value"
    astrProps_Variables(55, 2) = "AlternateValueString"
    astrProps_Variables(56, 1) = "String length"
    astrProps_Variables(56, 2) = "StringLength"
    astrProps_Variables(57, 1) = "Unit"
    astrProps_Variables(57, 2) = "Unit"

On Error GoTo Err_VariableInfo

'Get the Selected VariableProperties from Control
    'Count selected entries
        For i = 0 To LstBox_VariableProperties.ListCount - 1
            If (LstBox_VariableProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_VariableProperties.ListCount - 1
                If (LstBox_VariableProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_VariableProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 0 To UBound(astrProps_Variables)
                            If (astrProps_Variables(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Variables(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
'Create Variables-Folder
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_VARIABLES)) Then
        LogMessage ("Error while creating Variables-Folder!")
    End If

'Get Variable-Information
LogMessage "Collecting Variable information.."
    If (Not ObProject Is Nothing) Then
        If (ObProject.Variables.Count > 0) Then
        'Store Variable-Names in Array
            'ReDim String-Arrays for actual needed Values
                ReDim strVariablesArray(1 To ObProject.Variables.Count) As String
                ReDim strFileNamesArray(1 To ObProject.Variables.Count, 1 To 2) As String
            'Loop Variables and fill Array
                For lVarIndex = 1 To UBound(strVariablesArray)
                    Set obVariable = Nothing
                    Set obVariable = ObProject.Variables.Item(lVarIndex - 1)
                    If (Not obVariable Is Nothing) Then
                        strVariablesArray(lVarIndex) = obVariable.Name
                    End If
                Next
            'Sort Array
                Call dhQuickSort(strVariablesArray)
        'Create DOMDocument for VariablesParts
            'Create XML-Document
                Call CreateDOMDoc(1)
            'Document-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "VARIABLES", "VARIABLES", "name")
            'Sub-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables List", "Variables List", "name")
        'Loop through Variables
            For lVarIndex = 1 To UBound(strVariablesArray)
                'Get Object
                    Set obVariable = Nothing
                    Set obVariable = ObProject.Variables.Item(strVariablesArray(lVarIndex))
                    'Save Object in Array
                        Set obArrObjects(nCurArrVarDim) = obVariable
                    'Save Information for the FileName-Array
                        strFileNamesArray(lVarIndex, 1) = obVariable.Name
                        strFileNamesArray(lVarIndex, 2) = C_PATHFILE_VARIABLES_PARTNAMING & nCurFileNumber & ".html" & "#Variable[Entry-Name='" & obVariable.Name & "']"
                    If (nCurArrVarDim = C_COLS_VARIABLELIST Or lVarIndex = UBound(strVariablesArray)) Then
                        'Do we need more columns than we have data for?
                            If (nCurArrVarDim < C_COLS_VARIABLELIST) Then
                                For i = nCurArrVarDim + 1 To C_COLS_VARIABLELIST
                                    Set obArrObjects(i) = Nothing
                                Next
                            End If

                        'Start Table
                            Set Table = Nothing
                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                            'Fill Array - Header Row
                                strArray(1, 1) = "Name"
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                        
                        'Get Information from objects
                            'Loop Array
                                For i = 1 To C_COLS_VARIABLELIST
                                    If (obArrObjects(i) Is Nothing) Then
                                        'Filler needed = Empty Column
                                            strArray(i + 1, 1) = ""
                                            strArray(i + 1, 2) = ""
                                            strArray(i + 1, 3) = ""
                                    Else
                                        'Information for Column
                                            strArray(i + 1, 1) = obArrObjects(i).Name
                                            strArray(i + 1, 2) = "name"
                                            strArray(i + 1, 3) = "Variable[Entry-Name='" & obArrObjects(i).Name & "']"
                                        'Usable Dynproperties for this object
                                            strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                    End If
                                Next
                            'Write 1st Row
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARIABLELIST + 1, 0)
                        'Get Properties from objects
                            'Loop Wanted Properties
                                For i = 1 To UBound(strArrWantedProperties)
                                    'Get Property
                                        strTEMP = strArrWantedProperties(i, 2)
                                    'Row - 1st Column
                                        strArray(1, 1) = strArrWantedProperties(i, 1)
                                        strArray(1, 2) = ""
                                        strArray(1, 3) = ""
                                    'Loop Array
                                        For j = 1 To C_COLS_VARIABLELIST
                                            'Row - following Columns
                                                If (obArrObjects(j) Is Nothing) Then
                                                    'Filler needed = Empty Column
                                                        strArray(j + 1, 1) = ""
                                                        strArray(j + 1, 2) = ""
                                                        strArray(j + 1, 3) = ""
                                                Else
                                                    'Is the current Property available in this object?
                                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                            strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        Else
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        End If
                                                End If
                                        Next
                                    'Write Row
                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARIABLELIST + 1, i)
                                Next
                        'Reset Counter and Array
                            nCurArrVarDim = 0
                            ReDim strArray(1 To C_COLS_VARIABLELIST + 1, 1 To 3) As String
                            ReDim obArrObjects(1 To C_COLS_VARIABLELIST) As Variable
                    End If
                    'Add to counter
                        nCurArrVarDim = nCurArrVarDim + 1
                'Can we write a File already?
                    nCurMod = lVarIndex Mod C_AMOUNT_OF_VARIABLES_PER_FILE
                    If (nCurMod = 0 Or lVarIndex = UBound(strVariablesArray)) Then
                        'Write File
                            If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARIABLES_PARTNAMING & nCurFileNumber & ".html")) Then
                                LogMessage ("Error while Saving Variables-Output!")
                            End If
                        'Next Document
                            'Create XML-Document
                                Call CreateDOMDoc(1)
                            'Document-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "VARIABLES", "VARIABLES", "name")
                            'Sub-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables List", "Variables List", "name")
                        'Add to Counter
                            nCurFileNumber = nCurFileNumber + 1
                    End If
            Next
        'Create Indexfile
            'Create XML-Document
                Call CreateDOMDoc(1)
            'Document-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "VARIABLES", "VARIABLES", "name")
            'Sub-Title
                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables List", "Variables List", "name")
            'Fill File
                'Prepare for Table-Creation
                    Dim nTemp As Integer
                    ReDim strArray(1 To 1, 1 To 3) As String
                'Start Table
                    Set Table = Nothing
                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                    'Fill Array - Header Row
                        strArray(1, 1) = "Name"
                        strArray(1, 2) = ""
                        strArray(1, 3) = ""
                    'Write 1st Row
                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, 1, 0)
                For lVarIndex = 1 To UBound(strFileNamesArray)
                    'Fill Array - subsequent Row
                        strArray(1, 1) = strFileNamesArray(lVarIndex, 1)
                        strArray(1, 2) = "href"
                        strArray(1, 3) = "..\" & strFileNamesArray(lVarIndex, 2)
                    'Write subsequent Row
                        nTemp = lVarIndex
                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, 1, nTemp)
                Next
            'Write File
                If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARIABLES_MAIN)) Then
                    LogMessage ("Error while Saving Variables-Output!")
                End If
        End If
    End If
    
    ModifyLastLogMessage ("..Done")
    
'Free Memory
    Set obVariable = Nothing
    Set Vari = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0)
    ReDim obArrObjects(0 To 0)
    ReDim strArrUsableDynProperties(0 To 0)
    
Exit Sub
Err_VariableInfo:
    LogMessage ("Problem while collecting information from variable:#" & Trim(Str(lVarIndex)))
    Resume Next
End Sub

Private Sub CollectVariableLimits(ObProject As Project)
Dim obVariable As Variable
Dim nVarIndex As Integer
Dim obRema As Rema
Dim obEdLimit As EdLimit
Dim nLimitIndex As Integer
Dim nLimitCount As Integer
Dim strTemp_Limits As String
Dim strLinkIn As String
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim strObjects As String
Dim strArrLimitname() As String
Dim strColorObjects As String
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strArrWantedProperties() As String
Dim strArrUsableDynProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As EdLimit
Dim nCurArrDim As Integer
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer

ReDim strArray(1 To (C_COLS_VARIABLELIMITSLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_VARIABLELIMITSLIST) As EdLimit
ReDim strArrLimitname(1 To C_COLS_VARIABLELIMITSLIST) As String
ReDim strArrUsableDynProperties(1 To C_COLS_VARIABLELIMITSLIST) As String
nCurArrDim = 1

'Which DynProperties are Objects?
    strObjects = "|Variable||Function||Color|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|Variable|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"
'Which DynProperties should be linked in HTML?
    strLinkIn = "|Variable||Function|"
'Which DynProperties are Color-Objects?
    strColorObjects = "|Color|"

'Initialize VariableLimitProperties for Translation
Dim astrProps_VariableLimits(1 To 24, 1 To 2)
    astrProps_VariableLimits(1, 1) = "Active"
    astrProps_VariableLimits(1, 2) = "Active"
    astrProps_VariableLimits(2, 1) = "Color"
    astrProps_VariableLimits(2, 2) = "Color"
    astrProps_VariableLimits(3, 1) = "Flashing"
    astrProps_VariableLimits(3, 2) = "Blinking"
    astrProps_VariableLimits(4, 1) = "invisible"
    astrProps_VariableLimits(4, 2) = "Invisible"
    astrProps_VariableLimits(5, 1) = "Alarm class"
    astrProps_VariableLimits(5, 2) = "Class"
    astrProps_VariableLimits(6, 1) = "Alarm group"
    astrProps_VariableLimits(6, 2) = "group"
    astrProps_VariableLimits(7, 1) = "Print"
    astrProps_VariableLimits(7, 2) = "Print"
    astrProps_VariableLimits(8, 1) = "To delete"
    astrProps_VariableLimits(8, 2) = "AlarmDelete"
    astrProps_VariableLimits(9, 1) = "as Alarm"
    astrProps_VariableLimits(9, 2) = "Alarm"
    astrProps_VariableLimits(10, 1) = "in CEL"
    astrProps_VariableLimits(10, 2) = "Cel"
    astrProps_VariableLimits(11, 1) = "to acknowledge"
    astrProps_VariableLimits(11, 2) = "AlarmAcknowledge"
    astrProps_VariableLimits(12, 1) = "Variable"
    astrProps_VariableLimits(12, 2) = "Variable"
    astrProps_VariableLimits(13, 1) = "Call via alarms administration"
    astrProps_VariableLimits(13, 2) = "AML_Call"
    astrProps_VariableLimits(14, 1) = "Function"
    astrProps_VariableLimits(14, 2) = "Function"
    astrProps_VariableLimits(15, 1) = "Help chapter"
    astrProps_VariableLimits(15, 2) = "HelpCapture"
    astrProps_VariableLimits(16, 1) = "Help file"
    astrProps_VariableLimits(16, 2) = "HelpFile"
    astrProps_VariableLimits(17, 1) = "Delay time [s]"
    astrProps_VariableLimits(17, 2) = "Delay"
    astrProps_VariableLimits(18, 1) = "Limit"
    astrProps_VariableLimits(18, 2) = "LimitValue"
    astrProps_VariableLimits(19, 1) = "Limit text"
    astrProps_VariableLimits(19, 2) = "Text"
    astrProps_VariableLimits(20, 1) = "Minimum / Maximum"
    astrProps_VariableLimits(20, 2) = "IsMax"
    astrProps_VariableLimits(21, 1) = "Treshold value"
    astrProps_VariableLimits(21, 2) = "TresholdValue"
    astrProps_VariableLimits(22, 1) = "User property 1"
    astrProps_VariableLimits(22, 2) = "UserProperty1"
    astrProps_VariableLimits(23, 1) = "User property 2"
    astrProps_VariableLimits(23, 2) = "UserProperty2"
    astrProps_VariableLimits(24, 1) = "Dynamic Limit Active"
    astrProps_VariableLimits(24, 2) = "IsVariable"
    

On Error GoTo Err_Limits
    
'Get the Selected VariableProperties from Control
    'Count selected entries
        For i = 0 To LstBox_VarLimits.ListCount - 1
            If (LstBox_VarLimits.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_VarLimits.ListCount - 1
                If (LstBox_VarLimits.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_VarLimits.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTemp_Limits = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_VariableLimits)
                            If (astrProps_VariableLimits(j, 1) = strTemp_Limits) Then
                                strArrWantedProperties(i, 2) = astrProps_VariableLimits(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If


'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "VARIABLES", "VARIABLES", "name")

'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Variables Limits", "Variables Limits", "name")

    If (Not ObProject Is Nothing) Then
        If (ObProject.Variables.Count) Then
            For nVarIndex = 0 To ObProject.Variables.Count - 1
                Set obVariable = ObProject.Variables.Item(nVarIndex)
                If (Not obVariable Is Nothing) Then
                    If (obVariable.IsRemaActiv) Then
                        'Variable is linked to ReMa
                            'Sub-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", obVariable.Name, "..\" & GetLinkForVariable(obVariable.Name), "href")
                            Set obRema = ObProject.Remas.ItemById(obVariable.DynProperties("Rema"))
                            If (Not obRema Is Nothing) Then
                                Call AddNormalHTMLText(0, 0, curXMLDoc, curXMLItem, "Variable is linked to Rema: ", "", "")
                                Call AddNormalHTMLText(0, 1, curXMLDoc, curXMLItem, obRema.Name, "..\" & C_PATHFILE_REMAS & "#Rema[Entry-Name='" & obRema.Name & "']", "href")
                            End If
                    Else
                        'Variable has its own Limits
                        nLimitCount = obVariable.EdLimitCount
                        If (nLimitCount > 0) Then
                            'Sub-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", obVariable.Name, "..\" & GetLinkForVariable(obVariable.Name), "href")
                            For nLimitIndex = 0 To nLimitCount - 1
                                Set obEdLimit = obVariable.EdLimitItem(nLimitIndex)
                                If (Not obEdLimit Is Nothing) Then
                                    'Save Object in Array
                                        Set obArrObjects(nCurArrDim) = obEdLimit
                                    'Save Limitname in Array
                                        strArrLimitname(nCurArrDim) = "Limit[" & (nLimitIndex + 1) & "]"
                                    If (nCurArrDim = C_COLS_VARIABLELIMITSLIST Or nLimitIndex = nLimitCount - 1) Then
                                        'Do we need more columns than we have data for?
                                            If (nCurArrDim < C_COLS_VARIABLELIMITSLIST) Then
                                                For i = nCurArrDim + 1 To C_COLS_VARIABLELIMITSLIST
                                                    Set obArrObjects(i) = Nothing
                                                Next
                                            End If
                                        'Start Table
                                            Set Table = Nothing
                                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                            'Fill Array - Header Row
                                                strArray(1, 1) = "Name"
                                                strArray(1, 2) = ""
                                                strArray(1, 3) = ""
                                        'Get Information from objects
                                            'Loop Array
                                                For i = 1 To C_COLS_VARIABLELIMITSLIST
                                                    If (obArrObjects(i) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strArray(i + 1, 1) = ""
                                                            strArray(i + 1, 2) = ""
                                                            strArray(i + 1, 3) = ""
                                                    Else
                                                        'Information for Column
                                                            strArray(i + 1, 1) = strArrLimitname(i)
                                                            strArray(i + 1, 2) = "name"
                                                            strArray(i + 1, 3) = "Variable[Entry-Name='" & obVariable.Name & "']/Limit[Entry-Name='" & strArrLimitname(i) & "']"
                                                        'Usable Dynproperties for this object
                                                            strArrUsableDynProperties(i) = GetUsableDynProperties(obEdLimit.DynPropertiesEnum(""))
                                                    End If
                                                Next
                                            'Write 1st Row
                                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARIABLELIMITSLIST + 1, 0)
                                        'Get Properties from objects
                                            'Loop Wanted Properties
                                                For i = 1 To UBound(strArrWantedProperties)
                                                    'Get Property
                                                        strTemp_Limits = strArrWantedProperties(i, 2)
                                                    'Row - 1st Column
                                                        strArray(1, 1) = strArrWantedProperties(i, 1)
                                                        strArray(1, 2) = ""
                                                        strArray(1, 3) = ""
                                                    'Loop Array
                                                        For j = 1 To C_COLS_VARIABLELIMITSLIST
                                                            'Row - following Columns
                                                                If (obArrObjects(j) Is Nothing) Then
                                                                    'Filler needed = Empty Column
                                                                        strArray(j + 1, 1) = ""
                                                                        strArray(j + 1, 2) = ""
                                                                        strArray(j + 1, 3) = ""
                                                                Else
                                                                    'Is the current Property available in this object?
                                                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTemp_Limits & "|", 1) > 0) Then
                                                                           'Is DynProperty an Object?
                                                                                If (InStr(1, strObjects, "|" & strTemp_Limits & "|") > 0) Then
                                                                                    'Does it have to be linked to a Function?
                                                                                        If (InStr(1, strHrefLinksFunctions, "|" & strTemp_Limits & "|") > 0) Then
                                                                                            On Error GoTo Err_SetObject
                                                                                                Set obFunctionLink = obEdLimit.DynProperties(strTemp_Limits)
                                                                                            On Error GoTo Err_Limits
                                                                                            If (Not obFunctionLink Is Nothing) Then
                                                                                                strArray(j + 1, 1) = obFunctionLink.Name
                                                                                                If (ChkBox_Functions) Then
                                                                                                    strArray(j + 1, 2) = "href"
                                                                                                    strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                                                Else
                                                                                                    strArray(j + 1, 2) = ""
                                                                                                    strArray(j + 1, 3) = ""
                                                                                                End If
                                                                                                Set obFunctionLink = Nothing
                                                                                            Else
                                                                                                strArray(j + 1, 1) = ""
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                            End If
                                                                                        End If
                                                                                    'Does it have to be linked to a Variable?
                                                                                        If (InStr(1, strHrefLinksVariables, "|" & strTemp_Limits & "|") > 0) Then
                                                                                            On Error GoTo Err_SetObject
                                                                                                Set obVariableLink = obEdLimit.DynProperties(strTemp_Limits)
                                                                                            On Error GoTo Err_Limits
                                                                                            If (Not obVariableLink Is Nothing) Then
                                                                                                strArray(j + 1, 1) = obVariableLink.Name
                                                                                                If (ChkBox_Variables) Then
                                                                                                    strArray(j + 1, 2) = "href"
                                                                                                    strArray(j + 1, 3) = "..\" & GetLinkForVariable(obVariableLink.Name)
                                                                                                Else
                                                                                                    strArray(j + 1, 2) = ""
                                                                                                    strArray(j + 1, 3) = ""
                                                                                                End If
                                                                                                Set obVariableLink = Nothing
                                                                                            Else
                                                                                                strArray(j + 1, 1) = ""
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                            End If
                                                                                        End If
                                                                                    'Is it a Color-Object?
                                                                                        If (InStr(1, strColorObjects, "|" & strTemp_Limits & "|", 1) > 0) Then
                                                                                            'Converting the Color-Objects Output to HEX and adding it to XML
                                                                                                strArray(j + 1, 1) = ColorToHex(obEdLimit.DynProperties(strTemp_Limits))
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                        End If
                                                                                Else
                                                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTemp_Limits)
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                                End If
                                                                        Else
                                                                            strArray(j + 1, 1) = ""
                                                                            strArray(j + 1, 2) = ""
                                                                            strArray(j + 1, 3) = ""
                                                                        End If
                                                                End If
                                                        Next
                                                    'Write Row
                                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARIABLELIMITSLIST + 1, i)
                                                Next
                                        'Reset Counter and Array
                                            nCurArrDim = 0
                                            ReDim strArray(1 To C_COLS_VARIABLELIMITSLIST + 1, 1 To 3) As String
                                            ReDim obArrObjects(1 To C_COLS_VARIABLELIMITSLIST) As EdLimit
                                    End If
                                    'Add to counter
                                        nCurArrDim = nCurArrDim + 1
                                End If
                                Set obEdLimit = Nothing
                            Next
                        End If
                    End If
                End If
            Next
        End If
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_VARIABLES)) Then
        LogMessage ("Error while creating Variable-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARIABLES_LIMITS)) Then
        LogMessage ("Error while Saving Variable-Limits-Output!")
    End If

'Free Memory
    Set obVariable = Nothing
    Set obRema = Nothing
    Set obEdLimit = Nothing
    Set obVariableLink = Nothing
    Set obFunctionLink = Nothing
    Set Table = Nothing
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strArrUsableDynProperties(0 To 0) As String
    ReDim obArrObjects(0 To 0, 0 To 0) As EdLimit
    ReDim strArrLimitname(0 To 0) As String
    
Exit Sub
Err_Limits:
    Resume Next
Err_SetObject:
    Resume Next
End Sub
Private Function GetVarTypebyName(ByVal strName As String) As VarType
    Dim i As Integer
    'Loop VarTypes to get the DataType-Object linked in the ComplexItem
    For i = 0 To MyWorkspace.ActiveDocument.VarTypes.Count - 1
        If MyWorkspace.ActiveDocument.VarTypes.Item(i).Name = strName Then
            Set GetVarTypebyName = MyWorkspace.ActiveDocument.VarTypes.Item(i)
            Exit Function
        End If
    Next i
    
    Set GetVarTypebyName = Nothing

Exit Function
Err_GetVarTypebyName:
    Resume Next
End Function


Private Sub CollectDatatypeLimits(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obDataType As VarType
Dim nVarIndex As Integer
Dim obRema As Rema
Dim obEdLimit As EdLimit
Dim nLimitIndex As Integer
Dim nLimitCount As Integer
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim strObjects As String
Dim strLimitname As String
Dim strColorObjects As String
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strVisibleName As String
Dim strArrWantedProperties() As String
Dim strArrLimitname() As String
Dim strArrUsableDynProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As EdLimit
Dim nCurArrDim As Integer
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim strTemp_Limits As String

ReDim strArray(1 To (C_COLS_DATATYPELIMITSLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_DATATYPELIMITSLIST) As EdLimit
ReDim strArrLimitname(1 To C_COLS_DATATYPELIMITSLIST) As String
ReDim strArrUsableDynProperties(1 To C_COLS_DATATYPELIMITSLIST) As String
nCurArrDim = 1

'Which DynProperties are Objects?
    strObjects = "|Variable||Function||Color|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|Variable|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"
'Which DynProperties are Color-Objects?
    strColorObjects = "|Color|"

'Initialize DatatypeLimitProperties for Translation
Dim astrProps_DatatypeLimits(1 To 24, 1 To 2)
    astrProps_DatatypeLimits(1, 1) = "Active"
    astrProps_DatatypeLimits(1, 2) = "Active"
    astrProps_DatatypeLimits(2, 1) = "Color"
    astrProps_DatatypeLimits(2, 2) = "Color"
    astrProps_DatatypeLimits(3, 1) = "Flashing"
    astrProps_DatatypeLimits(3, 2) = "Blinking"
    astrProps_DatatypeLimits(4, 1) = "invisible"
    astrProps_DatatypeLimits(4, 2) = "Invisible"
    astrProps_DatatypeLimits(5, 1) = "Alarm class"
    astrProps_DatatypeLimits(5, 2) = "Class"
    astrProps_DatatypeLimits(6, 1) = "Alarm group"
    astrProps_DatatypeLimits(6, 2) = "group"
    astrProps_DatatypeLimits(7, 1) = "Print"
    astrProps_DatatypeLimits(7, 2) = "Print"
    astrProps_DatatypeLimits(8, 1) = "To delete"
    astrProps_DatatypeLimits(8, 2) = "AlarmDelete"
    astrProps_DatatypeLimits(9, 1) = "as Alarm"
    astrProps_DatatypeLimits(9, 2) = "Alarm"
    astrProps_DatatypeLimits(10, 1) = "in CEL"
    astrProps_DatatypeLimits(10, 2) = "Cel"
    astrProps_DatatypeLimits(11, 1) = "to acknowledge"
    astrProps_DatatypeLimits(11, 2) = "AlarmAcknowledge"
    astrProps_DatatypeLimits(12, 1) = "Variable"
    astrProps_DatatypeLimits(12, 2) = "Variable"
    astrProps_DatatypeLimits(13, 1) = "Call via alarms administration"
    astrProps_DatatypeLimits(13, 2) = "AML_Call"
    astrProps_DatatypeLimits(14, 1) = "Function"
    astrProps_DatatypeLimits(14, 2) = "Function"
    astrProps_DatatypeLimits(15, 1) = "Help chapter"
    astrProps_DatatypeLimits(15, 2) = "HelpCapture"
    astrProps_DatatypeLimits(16, 1) = "Help file"
    astrProps_DatatypeLimits(16, 2) = "HelpFile"
    astrProps_DatatypeLimits(17, 1) = "Delay time [s]"
    astrProps_DatatypeLimits(17, 2) = "Delay"
    astrProps_DatatypeLimits(18, 1) = "Limit"
    astrProps_DatatypeLimits(18, 2) = "LimitValue"
    astrProps_DatatypeLimits(19, 1) = "Limit text"
    astrProps_DatatypeLimits(19, 2) = "Text"
    astrProps_DatatypeLimits(20, 1) = "Minimum / Maximum"
    astrProps_DatatypeLimits(20, 2) = "IsMax"
    astrProps_DatatypeLimits(21, 1) = "Treshold value"
    astrProps_DatatypeLimits(21, 2) = "TresholdValue"
    astrProps_DatatypeLimits(22, 1) = "User property 1"
    astrProps_DatatypeLimits(22, 2) = "UserProperty1"
    astrProps_DatatypeLimits(23, 1) = "User property 2"
    astrProps_DatatypeLimits(23, 2) = "UserProperty2"
    astrProps_DatatypeLimits(24, 1) = "Dynamic Limit Active"
    astrProps_DatatypeLimits(24, 2) = "IsVariable"

On Error GoTo Err_Limits

    'Get the Selected VariableProperties from Control
        'Count selected entries
            For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
                If (LstBox_KonfVarTypeLimitsProperties.Selected(i)) Then
                    nSelectedCount = nSelectedCount + 1
                End If
            Next
        If (nSelectedCount > 0) Then
            'Prepare Array and save selected entries
                ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
                j = 1
                For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
                    If (LstBox_KonfVarTypeLimitsProperties.Selected(i)) Then
                        strArrWantedProperties(j, 1) = LstBox_KonfVarTypeLimitsProperties.List(i)
                        j = j + 1
                    End If
                Next
            'Translate to DynProperties
                'Loop Selected Properties
                    For i = 1 To UBound(strArrWantedProperties)
                        strTemp_Limits = strArrWantedProperties(i, 1)
                        'Loop Array for DynProperty-Name
                            For j = 1 To UBound(astrProps_DatatypeLimits)
                                If (astrProps_DatatypeLimits(j, 1) = strTemp_Limits) Then
                                    strArrWantedProperties(i, 2) = astrProps_DatatypeLimits(j, 2)
                                    Exit For
                                End If
                            Next
                    Next
        End If
    
'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "DATATYPES", "DATATYPES", "name")

'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Datatypes Limits", "Datatypes Limits", "name")

'Get Datatypes to check in Array
    ReDim astrDatatypesToCheck(nCurDTLArraySize, 3)
        'N,1 = Visible Name
        'N,2 = Datatype Name if other
        'N,3 = ID in Datatype-Tree for Navigation
    Dim nCur As Integer
    Dim strTEMP As String
    For nCur = 1 To nCurDTLArraySize
        'Store 1st Value in Array
            astrDatatypesToCheck(nCur, 1) = Mid(strDatatypesToCheck, 3, InStr(1, strDatatypesToCheck, "||") - 3)
        'Delete 1st Value from String
            strDatatypesToCheck = Mid(strDatatypesToCheck, Len(astrDatatypesToCheck(nCur, 1)) + 2 + 2 + 1, Len(strDatatypesToCheck))
        'Store 2nd Value in Array
            astrDatatypesToCheck(nCur, 2) = Mid(strDatatypesToCheck, 1, InStr(1, strDatatypesToCheck, "||") - 1)
        'Delete 2nd Value from String
            strDatatypesToCheck = Mid(strDatatypesToCheck, Len(astrDatatypesToCheck(nCur, 2)) + 2 + 1, Len(strDatatypesToCheck))
        'Store 3rd Value in Array
            astrDatatypesToCheck(nCur, 3) = Mid(strDatatypesToCheck, 1, InStr(1, strDatatypesToCheck, "|>") - 1)
        'Delete 3rd Value from String
            strDatatypesToCheck = Mid(strDatatypesToCheck, Len(astrDatatypesToCheck(nCur, 3)) + 2 + 1, Len(strDatatypesToCheck))
    Next
    
For nCur = 1 To UBound(astrDatatypesToCheck)
    Set obDataType = Nothing
    If (InStr(1, astrDatatypesToCheck(nCur, 2), "/<")) Then 'embedded Datatype
        Set obDataType = GetVarTypebyName(astrDatatypesToCheck(nCur, 2))
    ElseIf (astrDatatypesToCheck(nCur, 1) <> astrDatatypesToCheck(nCur, 2)) Then 'linked Datatype
        Set obDataType = GetVarTypebyName(astrDatatypesToCheck(nCur, 2))
    Else 'simple Datatype
        Set obDataType = GetVarTypebyName(astrDatatypesToCheck(nCur, 1))
    End If
    strVisibleName = astrDatatypesToCheck(nCur, 1)
    'Handling Limits or Remas
        If (Not obDataType Is Nothing) Then
            If (obDataType.DynProperties("IsRemaActiv")) Then
                'Datatype is linked to ReMa
                    'Sub-Title
                        If (ChkBox_Variables) Then
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", strVisibleName, "..\" & C_PATHFILE_VARTYPES & "#Datatype[Entry-ID='" & astrDatatypesToCheck(nCur, 3) & "']", "href")
                        Else
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", strVisibleName, "", "")
                        End If
                    Set obRema = ObProject.Remas.ItemById(obDataType.DynProperties("Rema"))
                    If (Not obRema Is Nothing) Then
                        Call AddNormalHTMLText(0, 0, curXMLDoc, curXMLItem, "Datatype is linked to Rema: ", "", "")
                        If (ChkBox_Remas) Then
                            Call AddNormalHTMLText(0, 1, curXMLDoc, curXMLItem, obRema.Name, "..\" & C_PATHFILE_REMAS & "#Rema[Entry-Name='" & obRema.Name & "']", "href")
                        Else
                            Call AddNormalHTMLText(0, 1, curXMLDoc, curXMLItem, obRema.Name, "", "")
                        End If
                    End If
            Else
                'Datatype has its own Limits
                nLimitCount = obDataType.EdLimitCount
                If (nLimitCount > 0) Then
                    'Sub-Title
                        If (ChkBox_Variables) Then
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", strVisibleName, "..\" & C_PATHFILE_VARTYPES & "#Datatype[Entry-ID='" & astrDatatypesToCheck(nCur, 3) & "']", "href")
                        Else
                            Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", strVisibleName, "", "")
                        End If
                    For nLimitIndex = 0 To nLimitCount - 1
                        Set obEdLimit = obDataType.EdLimitItem(nLimitIndex)
                        If (Not obEdLimit Is Nothing) Then
                            'Save Object in Array
                                Set obArrObjects(nCurArrDim) = obEdLimit
                            'Save Limitname in Array
                                strArrLimitname(nCurArrDim) = "Limit[" & (nLimitIndex + 1) & "]"
                            If (nCurArrDim = C_COLS_DATATYPELIMITSLIST Or nLimitIndex = nLimitCount - 1) Then
                                'Do we need more columns than we have data for?
                                    If (nCurArrDim < C_COLS_DATATYPELIMITSLIST) Then
                                        For i = nCurArrDim + 1 To C_COLS_DATATYPELIMITSLIST
                                            Set obArrObjects(i) = Nothing
                                        Next
                                    End If
                                'Start Table
                                    Set Table = Nothing
                                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                    'Fill Array - Header Row
                                        strArray(1, 1) = "Name"
                                        strArray(1, 2) = ""
                                        strArray(1, 3) = ""
                                        'Get Information from objects
                                            'Loop Array
                                                For i = 1 To C_COLS_DATATYPELIMITSLIST
                                                    If (obArrObjects(i) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strArray(i + 1, 1) = ""
                                                            strArray(i + 1, 2) = ""
                                                            strArray(i + 1, 3) = ""
                                                    Else
                                                        'Information for Column
                                                            strArray(i + 1, 1) = strArrLimitname(i)
                                                            strArray(i + 1, 2) = "name"
                                                            strArray(i + 1, 3) = "Datatype[Entry-Name='" & astrDatatypesToCheck(nCur, 1) & "']/Limit[Entry-Name='" & strArrLimitname(i) & "']"
                                                        'Usable Dynproperties for this object
                                                            strArrUsableDynProperties(i) = GetUsableDynProperties(obEdLimit.DynPropertiesEnum(""))
                                                    End If
                                                Next
                                            'Write 1st Row
                                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_DATATYPELIMITSLIST + 1, 0)
                                        'Get Properties from objects
                                            'Loop Wanted Properties
                                                For i = 1 To UBound(strArrWantedProperties)
                                                    'Get Property
                                                        strTemp_Limits = strArrWantedProperties(i, 2)
                                                    'Row - 1st Column
                                                        strArray(1, 1) = strArrWantedProperties(i, 1)
                                                        strArray(1, 2) = ""
                                                        strArray(1, 3) = ""
                                                    'Loop Array
                                                        For j = 1 To C_COLS_DATATYPELIMITSLIST
                                                            'Row - following Columns
                                                                If (obArrObjects(j) Is Nothing) Then
                                                                    'Filler needed = Empty Column
                                                                        strArray(j + 1, 1) = ""
                                                                        strArray(j + 1, 2) = ""
                                                                        strArray(j + 1, 3) = ""
                                                                Else
                                                                    'Is the current Property available in this object?
                                                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTemp_Limits & "|", 1) > 0) Then
                                                                           'Is DynProperty an Object?
                                                                                If (InStr(1, strObjects, "|" & strTemp_Limits & "|") > 0) Then
                                                                                    'Does it have to be linked to a Function?
                                                                                        If (InStr(1, strHrefLinksFunctions, "|" & strTemp_Limits & "|") > 0) Then
                                                                                            On Error GoTo Err_SetObject
                                                                                                Set obFunctionLink = obEdLimit.DynProperties(strTemp_Limits)
                                                                                            On Error GoTo Err_Limits
                                                                                            If (Not obFunctionLink Is Nothing) Then
                                                                                                strArray(j + 1, 1) = obFunctionLink.Name
                                                                                                If (ChkBox_Functions) Then
                                                                                                    strArray(j + 1, 2) = "href"
                                                                                                    strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                                                Else
                                                                                                    strArray(j + 1, 2) = ""
                                                                                                    strArray(j + 1, 3) = ""
                                                                                                End If
                                                                                                Set obFunctionLink = Nothing
                                                                                            Else
                                                                                                strArray(j + 1, 1) = ""
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                            End If
                                                                                        End If
                                                                                    'Does it have to be linked to a Variable?
                                                                                        If (InStr(1, strHrefLinksVariables, "|" & strTemp_Limits & "|") > 0) Then
                                                                                            On Error GoTo Err_SetObject
                                                                                                Set obVariableLink = obEdLimit.DynProperties(strTemp_Limits)
                                                                                            On Error GoTo Err_Limits
                                                                                            If (Not obVariableLink Is Nothing) Then
                                                                                                strArray(j + 1, 1) = obVariableLink.Name
                                                                                                If (ChkBox_Variables) Then
                                                                                                    strArray(j + 1, 2) = "href"
                                                                                                    strArray(j + 1, 3) = "..\" & GetLinkForVariable(obVariableLink.Name)
                                                                                                Else
                                                                                                    strArray(j + 1, 2) = ""
                                                                                                    strArray(j + 1, 3) = ""
                                                                                                End If
                                                                                                Set obVariableLink = Nothing
                                                                                            Else
                                                                                                strArray(j + 1, 1) = ""
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                            End If
                                                                                        End If
                                                                                    'Is it a Color-Object?
                                                                                        If (InStr(1, strColorObjects, "|" & strTemp_Limits & "|", 1) > 0) Then
                                                                                            'Converting the Color-Objects Output to HEX and adding it to XML
                                                                                                strArray(j + 1, 1) = ColorToHex(obEdLimit.DynProperties(strTemp_Limits))
                                                                                                strArray(j + 1, 2) = ""
                                                                                                strArray(j + 1, 3) = ""
                                                                                        End If
                                                                                Else
                                                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTemp_Limits)
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                                End If
                                                                        Else
                                                                            strArray(j + 1, 1) = ""
                                                                            strArray(j + 1, 2) = ""
                                                                            strArray(j + 1, 3) = ""
                                                                        End If
                                                                End If
                                                        Next
                                                    'Write Row
                                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_VARIABLELIMITSLIST + 1, i)
                                                Next
                                        'Reset Counter and Array
                                            nCurArrDim = 0
                                            ReDim strArray(1 To C_COLS_VARIABLELIMITSLIST + 1, 1 To 3) As String
                                            ReDim obArrObjects(1 To C_COLS_VARIABLELIMITSLIST) As EdLimit
                            End If
                            'Add to counter
                                nCurArrDim = nCurArrDim + 1
                        End If
                        Set obEdLimit = Nothing
                    Next
                End If
            End If
        End If
Next

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_VARTYPES)) Then
        LogMessage ("Error while creating Datatypes-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_VARTYPES_LIMITS)) Then
        LogMessage ("Error while Saving Datatypes-Limits-Output!")
    End If

Exit Sub
Err_Limits:
    Resume Next
Err_SetObject:
    Resume Next
End Sub

'****************************************************************************
' Methode:      LogMessage(...)
' Parameter:    strMessage As String
' Description:  Adds a log-message to the output box.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub LogMessage(strMessage As String)
LstOutput.AddItem strMessage
LstOutput.ListIndex = LstOutput.ListCount - 1
DoEvents
End Sub

'****************************************************************************
' Methode:      LogMessage(...)
' Parameter:    strMessage As String
' Description:  Modifies the last entry in the output box
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub ModifyLastLogMessage(strMessage As String)
LstOutput.List(LstOutput.ListCount - 1) = LstOutput.List(LstOutput.ListCount - 1) & strMessage
DoEvents
End Sub

'****************************************************************************
' Methode:      CollectDriverInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Drivers
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectDriverInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)

Dim obDriver As Driver
Dim nDriverIndex As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As Driver
Dim nCurArrDim As Integer
Dim i As Integer
    
ReDim strArray(1 To (C_COLS_DRIVERSLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_DRIVERSLIST) As Driver
nCurArrDim = 1

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "DRIVERS", "DRIVERS", "name")

'Get Function-Information
On Error GoTo Err_Driver
LogMessage "Collecting Driver information.."
    If (Not ObProject Is Nothing) Then
        'Clear previous retrieved information
        If (ObProject.Drivers.Count) Then
        ' Loop through Drivers
            For nDriverIndex = 0 To ObProject.Drivers.Count - 1
                Set obDriver = ObProject.Drivers.Item(nDriverIndex)
                If (Not obDriver Is Nothing) Then
                     'Save Object in Array
                        Set obArrObjects(nCurArrDim) = obDriver
                    If (nCurArrDim = C_COLS_DRIVERSLIST Or nDriverIndex = ObProject.Drivers.Count - 1) Then
                        'Do we need more columns than we have data for?
                            If (nCurArrDim < C_COLS_DRIVERSLIST) Then
                                For i = nCurArrDim + 1 To C_COLS_DRIVERSLIST
                                    Set obArrObjects(i) = Nothing
                                Next
                            End If

                        'Start Table
                            Set Table = Nothing
                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                            'Get Information for 1st Row
                                strArray(1, 1) = "Name"
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                        
                                'Loop Array
                                    For i = 1 To C_COLS_DRIVERSLIST
                                        If (obArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strArray(i + 1, 1) = ""
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                strArray(i + 1, 1) = obArrObjects(i).Name
                                                strArray(i + 1, 2) = "name"
                                                strArray(i + 1, 3) = "Function[Entry-Name='" & obDriver.Name & "']"
                                        End If
                                    Next
                            'Write 1st Row
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_DRIVERSLIST + 1, 0)
                            'Get Information for 2nd Row
                                strArray(1, 1) = "Driver"
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                        
                                'Loop Array
                                    For i = 1 To C_COLS_DRIVERSLIST
                                        If (obArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strArray(i + 1, 1) = ""
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                strArray(i + 1, 1) = obArrObjects(i).Name
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        End If
                                    Next
                            'Write 2nd Row
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_DRIVERSLIST + 1, 1)
                        'Reset Counter and Array
                            nCurArrDim = 0
                            ReDim strArray(1 To C_COLS_DRIVERSLIST + 1, 1 To 3) As String
                            ReDim obArrObjects(1 To C_COLS_DRIVERSLIST) As Driver
                    End If
                    'Add to counter
                        nCurArrDim = nCurArrDim + 1
                End If
            Next
        End If
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_DRIVERS)) Then
        LogMessage ("Error while creating Drives-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_DRIVERS)) Then
        LogMessage ("Error while Saving Drivers-Output!")
    End If
    
'Free Memory
    Set obDriver = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0) As String
    ReDim obArrObjects(0 To 0) As Driver

ModifyLastLogMessage "..Done"
Exit Sub
Err_Driver:
    LogMessage ("Error while trying to retrieve information from driver:#" & Trim(Str(nDriverIndex)))
    Resume Next
End Sub

'****************************************************************************
' Methode:      CollectUserInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Users
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectUserInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obUser As User
Dim obPassword As Passwords
Dim nUserIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim strArrWantedProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As User
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To (C_COLS_USERSLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_USERSLIST) As User
ReDim strArrUsableDynProperties(1 To C_COLS_USERSLIST) As String
nCurArrDim = 1

'Initialize Properties for Translation
Dim astrProps_Users(1 To 9, 1 To 2)
    astrProps_Users(1, 1) = "Active"
    astrProps_Users(1, 2) = "UserActive"
    astrProps_Users(2, 1) = "Administrator"
    astrProps_Users(2, 2) = "Admin"
    astrProps_Users(3, 1) = "complete name"
    astrProps_Users(3, 2) = "UserName"
    astrProps_Users(4, 1) = "Locked"
    astrProps_Users(4, 2) = "UserLocked"
    astrProps_Users(5, 1) = "Level 0"
    astrProps_Users(5, 2) = "UserLevel0"
    astrProps_Users(6, 1) = "Level 1"
    astrProps_Users(6, 2) = "UserLevel1"
    astrProps_Users(7, 1) = "Level 2"
    astrProps_Users(7, 2) = "UserLevel2"
    astrProps_Users(8, 1) = "Level 3"
    astrProps_Users(8, 2) = "UserLevel3"
    astrProps_Users(9, 1) = "Identification"
    astrProps_Users(9, 2) = "UserIdentification"
    
'Get the Selected Properties from Control
    'Count selected entries
        For i = 0 To LstBox_UserProperties.ListCount - 1
            If (LstBox_UserProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_UserProperties.ListCount - 1
                If (LstBox_UserProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_UserProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Users)
                            If (astrProps_Users(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Users(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "USERS", "USERS", "name")

On Error GoTo Err_CollectUserInformation
LogMessage "Collecting User information.."
    If (Not ObProject Is Nothing) Then
        If (ObProject.Passwords.CountUser) Then
            'Loop Users
                For nUserIndex = 0 To ObProject.Passwords.CountUser - 1
                    Set obUser = ObProject.Passwords.ItemUser(nUserIndex)
                    If (Not obUser Is Nothing) Then
                        'Save Object in Array
                            Set obArrObjects(nCurArrDim) = obUser
                        If (nCurArrDim = C_COLS_USERSLIST Or nUserIndex = ObProject.Passwords.CountUser - 1) Then
                            'Do we need more columns than we have data for?
                                If (nCurArrDim < C_COLS_USERSLIST) Then
                                    For i = nCurArrDim + 1 To C_COLS_USERSLIST
                                        Set obArrObjects(i) = Nothing
                                    Next
                                End If
    
                            'Start Table
                                Set Table = Nothing
                                Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                'Fill Array - Header Row
                                    strArray(1, 1) = "Name"
                                    strArray(1, 2) = ""
                                    strArray(1, 3) = ""
                            
                            'Get Information from objects
                                'Loop Array
                                    For i = 1 To C_COLS_USERSLIST
                                        If (obArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strArray(i + 1, 1) = ""
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                strArray(i + 1, 1) = obArrObjects(i).Name
                                                strArray(i + 1, 2) = "name"
                                                strArray(i + 1, 3) = "User[Entry-Name='" & obArrObjects(i).Name & "']"
                                            'Usable Dynproperties for this object
                                                strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                        End If
                                    Next
                                'Write 1st Row
                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_USERSLIST + 1, 0)
                            'Get Properties from objects
                                'Loop Wanted Properties
                                    For i = 1 To UBound(strArrWantedProperties)
                                        'Get Property
                                            strTEMP = strArrWantedProperties(i, 2)
                                        'Row - 1st Column
                                            strArray(1, 1) = strArrWantedProperties(i, 1)
                                            strArray(1, 2) = ""
                                            strArray(1, 3) = ""
                                        'Loop Array
                                            For j = 1 To C_COLS_USERSLIST
                                                'Row - following Columns
                                                    If (obArrObjects(j) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                    Else
                                                        'DynProperty "UserIdentification" needs special Handling
                                                            If (strTEMP = "UserIdentification") Then
                                                                strArray(j + 1, 1) = obArrObjects(j).Identification
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            Else
                                                                'Is the current Property available in this object?
                                                                    If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                        strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                    Else
                                                                        strArray(j + 1, 1) = ""
                                                                    End If
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                            End If
                                                    End If
                                            Next
                                        'Write Row
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_USERSLIST + 1, i)
                                    Next
                            'Reset Counter and Array
                                nCurArrDim = 0
                                ReDim strArray(1 To C_COLS_USERSLIST + 1, 1 To 3) As String
                                ReDim obArrObjects(1 To C_COLS_USERSLIST) As User
                        End If
                        'Add to counter
                            nCurArrDim = nCurArrDim + 1
                    End If
                Next
        End If

    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_USERS)) Then
        LogMessage ("Error while creating Users-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_USERS)) Then
        LogMessage ("Error while Saving Users-Output!")
    End If
    
'Free Memory
    Set obUser = Nothing
    Set obPassword = Nothing
    ReDim obArrObjects(0 To 0) As User
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strArray(0 To 0) As String
    ReDim strArrUsableDynProperties(0 To 0) As String
    
ModifyLastLogMessage ("..Done")
Exit Sub
Err_CollectUserInformation:
    LogMessage ("Error while trying to retrieve information from User")
    Resume Next
End Sub

'****************************************************************************
' Methode:      CollectTemplateInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Templates
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectTemplateInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obTemplate As Template
Dim nTemplateIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim strObjects As String
Dim strColorObjects As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As Template
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer
    
ReDim strArray(1 To (C_COLS_TEMPLATELIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_TEMPLATELIST) As Template
ReDim strArrUsableDynProperties(1 To C_COLS_TEMPLATELIST) As String
nCurArrDim = 1

'Initialize Properties for Translation
Dim astrProps_Templates(1 To 13, 1 To 2)
    astrProps_Templates(1, 1) = "Alignment"
    astrProps_Templates(1, 2) = "BackgroundPictureStyle"
    astrProps_Templates(2, 1) = "Always in the foreground"
    astrProps_Templates(2, 2) = "ShowForeground"
    astrProps_Templates(3, 1) = "Background color"
    astrProps_Templates(3, 2) = "BackgroundColor"
    astrProps_Templates(4, 1) = "Border type"
    astrProps_Templates(4, 2) = "BorderStyle"
    astrProps_Templates(5, 1) = "Bottom [pixels]"
    astrProps_Templates(5, 2) = "PosBottom"
    astrProps_Templates(6, 1) = "Left [pixels]"
    astrProps_Templates(6, 2) = "PosLeft"
    astrProps_Templates(7, 1) = "Min/Max Buttons"
    astrProps_Templates(7, 2) = "ShowMinimize"
    astrProps_Templates(8, 1) = "Name"
    astrProps_Templates(8, 2) = "TemplateName"
    astrProps_Templates(9, 1) = "Picture"
    astrProps_Templates(9, 2) = "BackgroundPicture"
    astrProps_Templates(10, 1) = "Right [pixels]"
    astrProps_Templates(10, 2) = "PosRight"
    astrProps_Templates(11, 1) = "System menu"
    astrProps_Templates(11, 2) = "ShowSysMenu"
    astrProps_Templates(12, 1) = "Title"
    astrProps_Templates(12, 2) = "ShowTitle"
    astrProps_Templates(13, 1) = "Top [pixels]"
    astrProps_Templates(13, 2) = "PosTop"

'Get the Selected Properties from Control
    'Count selected entries
        For i = 0 To LstBox_TemplateProperties.ListCount - 1
            If (LstBox_TemplateProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_TemplateProperties.ListCount - 1
                If (LstBox_TemplateProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_TemplateProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Templates)
                            If (astrProps_Templates(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Templates(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
'Which DynProperties are Objects?
    strObjects = "|BackgroundColor|"
'Which DynProperties are Color-Objects?
    strColorObjects = "|BackgroundColor|"

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "FRAMES", "FRAMES", "name")

'Get Template-Information
On Error GoTo Err_Template
LogMessage "Collecting Frame information.."
    If (Not ObProject Is Nothing) Then
        'Clear previous retrieved information
        If (ObProject.Templates.Count) Then
        ' Loop through Functions
            For nTemplateIndex = 0 To ObProject.Templates.Count - 1
                Set obTemplate = ObProject.Templates.Item(nTemplateIndex)
                If (Not obTemplate Is Nothing) Then
                    'Save Object in Array
                        Set obArrObjects(nCurArrDim) = obTemplate
                    If (nCurArrDim = C_COLS_TEMPLATELIST Or nTemplateIndex = ObProject.Templates.Count - 1) Then
                        'Do we need more columns than we have data for?
                            If (nCurArrDim < C_COLS_TEMPLATELIST) Then
                                For i = nCurArrDim + 1 To C_COLS_TEMPLATELIST
                                    Set obArrObjects(i) = Nothing
                                Next
                            End If

                        'Start Table
                            Set Table = Nothing
                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                            'Fill Array - Header Row
                                strArray(1, 1) = "Name"
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                        
                        'Get Information from objects
                            'Loop Array
                                For i = 1 To C_COLS_TEMPLATELIST
                                    If (obArrObjects(i) Is Nothing) Then
                                        'Filler needed = Empty Column
                                            strArray(i + 1, 1) = ""
                                            strArray(i + 1, 2) = ""
                                            strArray(i + 1, 3) = ""
                                    Else
                                        'Information for Column
                                            strArray(i + 1, 1) = obArrObjects(i).Name
                                            strArray(i + 1, 2) = "name"
                                            strArray(i + 1, 3) = "Frame[Entry-Name='" & obArrObjects(i).Name & "']"
                                        'Usable Dynproperties for this object
                                            strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                    End If
                                Next
                            'Write 1st Row
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_TEMPLATELIST + 1, 0)
                        'Get Properties from objects
                            'Loop Wanted Properties
                                For i = 1 To UBound(strArrWantedProperties)
                                    'Get Property
                                        strTEMP = strArrWantedProperties(i, 2)
                                    'Row - 1st Column
                                        strArray(1, 1) = strArrWantedProperties(i, 1)
                                        strArray(1, 2) = ""
                                        strArray(1, 3) = ""
                                    'Loop Array
                                        For j = 1 To C_COLS_TEMPLATELIST
                                            'Row - following Columns
                                                If (obArrObjects(j) Is Nothing) Then
                                                    'Filler needed = Empty Column
                                                        strArray(j + 1, 1) = ""
                                                        strArray(j + 1, 2) = ""
                                                        strArray(j + 1, 3) = ""
                                                Else
                                                    'Is the current Property available in this object?
                                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                            If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                                                'the current DynProperty is an Object
                                                                    If (InStr(1, strColorObjects, strTEMP) > 0) Then
                                                                        'Color-Object
                                                                            strArray(j + 1, 1) = ColorToHex(obArrObjects(j).DynProperties(strTEMP))
                                                                    End If
                                                            Else
                                                                strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                            End If
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        Else
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        End If
                                                End If
                                        Next
                                    'Write Row
                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_TEMPLATELIST + 1, i)
                                Next
                        'Reset Counter and Array
                            nCurArrDim = 0
                            ReDim strArray(1 To C_COLS_TEMPLATELIST + 1, 1 To 3) As String
                            ReDim obArrObjects(1 To C_COLS_TEMPLATELIST) As Template
                    End If
                    'Add to counter
                        nCurArrDim = nCurArrDim + 1
                End If
            Next
        End If
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_TEMPLATES)) Then
        LogMessage ("Error while creating Frames-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_TEMPLATES)) Then
        LogMessage ("Error while Saving Frames-Output!")
    End If
    
'Free Memory
    Set obTemplate = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0) As String
    ReDim obArrObjects(0 To 0) As Template
    ReDim strArrUsableDynProperties(0 To 0) As String

ModifyLastLogMessage ("..Done")
Exit Sub
Err_Template:
    LogMessage ("Error while trying to retrieve information from Frame:#" & Trim(Str(nTemplateIndex)))
    Resume Next
End Sub


'****************************************************************************
' Methode:      GetFunction(...)
' Parameter:    ID As Long
' Description:  Returns the RTFunction-object from a given ID
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function GetFunction(id As Long) As RtFunction
Dim ObProject As Project
Dim obFunction As RtFunction
Dim lFunctionCounter As Long
Set ObProject = MyWorkspace.ActiveDocument
If (Not ObProject Is Nothing) Then
    If (Not ObProject.RtFunctions Is Nothing) Then
        For lFunctionCounter = 0 To ObProject.RtFunctions.Count - 1
            Set obFunction = ObProject.RtFunctions.Item(lFunctionCounter)
            If (Not obFunction Is Nothing) Then
                If obFunction.id = id Then
                    Set GetFunction = obFunction
                End If
            End If
        Next
    End If
End If
End Function

'Loops the given Variant to write the its contents formatted to a string
Private Function GetUsableDynProperties(ByRef Vari As Variant) As String

Dim i As Integer
Dim strTEMP As String

For i = 0 To UBound(Vari)
    strTEMP = strTEMP & "|" & Left(Vari(i), InStr(1, Vari(i), ",") - 1) & "|"
Next

'Free Memory
    Set Vari = Nothing
    
GetUsableDynProperties = strTEMP

End Function

Private Function BuildPathToSystemFolder(nFolderlevels As Integer) As String

Dim i As Integer
Dim strPath As String

    If (nFolderlevels > 0) Then
        'Build Path to CSS-File
        For i = 1 To nFolderlevels
            strPath = strPath & "..\"
        Next
    End If
    strPath = strPath & C_PATHFOLDER_SYSTEM

BuildPathToSystemFolder = strPath

End Function

'Create DOMDocument to store the collected data html-style
Private Function CreateDOMDoc(nFolderlevels As Integer) As Boolean

Dim XMLDoc As MSXML2.DOMDocument
Dim xpi As MSXML2.IXMLDOMProcessingInstruction
Dim ParentTag As MSXML2.IXMLDOMElement
Dim HeadTag As MSXML2.IXMLDOMElement
Dim BodyTag As MSXML2.IXMLDOMElement

On Error GoTo ErrHandler
    
    Set XMLDoc = CreateObject("Microsoft.XMLDOM")
    Set xpi = XMLDoc.createProcessingInstruction("xml", " version=""1.0"" encoding=""utf-16""")
    Set ParentTag = addElement(XMLDoc, XMLDoc, "html", "")
    Set HeadTag = addElement(XMLDoc, ParentTag, "head", "")
    Set HeadTag = addElement(XMLDoc, HeadTag, "meta", "")
        HeadTag.setAttribute "http-equiv", "content-type"
        HeadTag.setAttribute "content", "text/html; charset=UTF-16"
    Set HeadTag = addElement(XMLDoc, ParentTag, "link", "")
        HeadTag.setAttribute "rel", "stylesheet"
        HeadTag.setAttribute "type", "text/css"
        HeadTag.setAttribute "href", BuildPathToSystemFolder(nFolderlevels) & "\docuwizard.css"
    Set BodyTag = addElement(XMLDoc, ParentTag, "body", "")
    
    Set curXMLDoc = XMLDoc
    Set curXMLItem = BodyTag
    
    CreateDOMDoc = True

    GoTo Exit_Function

ErrHandler:
    CreateDOMDoc = False
    GoTo Exit_Function
Exit_Function:
    'Free Memory
        Set XMLDoc = Nothing
        Set xpi = Nothing
        Set ParentTag = Nothing
        Set HeadTag = Nothing
        Set BodyTag = Nothing
    Exit Function
End Function

'Create a folder of the given Name in the Default-Destination
Private Function CreateFolder(strSource As String, strName As String) As Boolean

Dim strTEMP As String
Dim fs

strTEMP = strSource & strName
Set fs = CreateObject("Scripting.FileSystemObject")

'Does the Folder already exist?
If (fs.FolderExists(strTEMP)) Then
    CreateFolder = True
    GoTo Exit_Function
End If

'Create Folder
On Error GoTo ErrHandler
    fs.CreateFolder (strTEMP)
    CreateFolder = True
    GoTo Exit_Function

ErrHandler:
    CreateFolder = False
    GoTo Exit_Function
Exit_Function:
    'Free Memory
        Set fs = Nothing
    Exit Function
End Function

'Save a file of the given Name in the Default-Destination plus the given Foldername
Private Function SaveXMLFileAsHTML(XMLDoc As MSXML2.DOMDocument, strName As String) As Boolean

On Error GoTo ErrHandler
    XMLDoc.Save (PR_strDestination & strName)
    SaveXMLFileAsHTML = True
    Exit Function

ErrHandler:
    SaveXMLFileAsHTML = False
    Exit Function
End Function


'****************************************************************************
' Methode:      CollectScriptsInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Scripts
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectScriptsInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)

Dim obScript As Script
Dim obFunction As RtFunction
Dim nScriptRow As Integer
Dim nCurLoop As Integer
Dim nScriptIndex As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strArray(1 To 3, 1 To 3) As String

'Create XML-Document
    Call CreateDOMDoc(1)

'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "SCRIPTS", "SCRIPTS", "name")

'Get Scripts-Information
On Error GoTo Err_CollectScriptsInformation
LogMessage "Collecting Script information.."
    If (Not ObProject Is Nothing) Then
        If (ObProject.Scripts.Count) Then
            For nScriptIndex = 0 To ObProject.Scripts.Count - 1
                Set obScript = ObProject.Scripts.Item(nScriptIndex)
                If (Not obScript Is Nothing) Then
                    'Sub-Title
                        Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "sub", obScript.Name, "Script[Entry-Name='" & obScript.Name & "']", "name")
                    'Table
                        Set Table = Nothing
                        Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                        'Fill Array - Header Row
                            strArray(1, 1) = "Function"
                            strArray(1, 2) = ""
                            strArray(1, 3) = ""
                            strArray(2, 1) = "ParamString"
                            strArray(2, 2) = ""
                            strArray(2, 3) = ""
                            strArray(3, 1) = "Project"
                            strArray(3, 2) = ""
                            strArray(3, 3) = ""
                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, 3, 0)
                    If (obScript.Count > 0) Then
                        nCurLoop = 0
                        For nScriptRow = 0 To obScript.Count
                            Set obFunction = obScript.Item(nScriptRow)
                            If (Not obFunction Is Nothing) Then
                                'Row
                                    strArray(1, 1) = obFunction.Name
                                    If (ChkBox_Functions) Then
                                        strArray(1, 2) = "href"
                                        strArray(1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                    Else
                                        strArray(1, 2) = ""
                                        strArray(1, 3) = ""
                                    End If
                                    strArray(2, 1) = obFunction.ParamString
                                    strArray(2, 2) = ""
                                    strArray(2, 3) = ""
                                    strArray(3, 1) = obFunction.Parent.Parent.Name
                                    strArray(3, 2) = ""
                                    strArray(3, 3) = ""
                                    nCurLoop = nCurLoop + 1
                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, 3, nCurLoop)
                                Set obFunction = Nothing
                            End If
                        Next
                    End If
                    'Write Files
                        If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_SCRIPTS)) Then
                            LogMessage ("Error while creating Script-Folder!")
                        End If
                        If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_SCRIPTS)) Then
                            LogMessage ("Error while Saving Scripts-Output!")
                        End If
                End If
                Set obScript = Nothing
            Next
        End If
    End If

'Free Memory
    Set obScript = Nothing
    Set obFunction = Nothing
    Set Table = Nothing

ModifyLastLogMessage ("..Done")
Exit Sub
Err_CollectScriptsInformation:
    LogMessage ("Error while trying to retrieve information from script:#" & Trim(Str(nScriptIndex)))
    Resume Next
End Sub

Private Function AddHTMLTitle(XMLDoc As MSXML2.DOMDocument, XMLStartPoint As MSXML2.IXMLDOMElement, nSpacesBefore As Integer, nSpacesAfter As Integer, strClass As String, strTITLE As String, strLink As String, strLinktype As String) As MSXML2.IXMLDOMElement

Dim XMLItem As MSXML2.IXMLDOMElement
Dim XMLItemA As MSXML2.IXMLDOMElement
Dim i As Integer

Set XMLItem = XMLStartPoint

'On Error GoTo ErrHandler

    'Enter image
        If (strLinktype = "img") Then
            Set XMLItem = addElement(XMLDoc, XMLStartPoint, "div", "")
                Set XMLItemA = addElement(XMLDoc, XMLItem, "img", "")
                XMLItemA.setAttribute "src", "System/DocuWizardHeader.jpg"
        End If

    'Spaces before
        If (nSpacesBefore > 0) Then
            For i = 1 To nSpacesBefore
                Set XMLItem = addElement(XMLDoc, XMLStartPoint, "br", "")
            Next
        End If
    
    'Title
        If (strLinktype <> "") Then
            Set XMLItem = addElement(XMLDoc, XMLStartPoint, "div", "")
                Set XMLItemA = addElement(XMLDoc, XMLItem, "a", strTITLE)
                    XMLItemA.setAttribute "class", strClass
                    XMLItemA.setAttribute strLinktype, strLink
        Else
            Set XMLItem = addElement(XMLDoc, XMLStartPoint, "div", strTITLE)
                XMLItem.setAttribute "class", strClass
        End If
    
    'Spaces after
        If (nSpacesAfter > 0) Then
            For i = 1 To nSpacesAfter
                Set XMLItem = addElement(XMLDoc, XMLStartPoint, "br", "")
            Next
        End If
    
    Set AddHTMLTitle = XMLItem
    
    'Free Memory
        Set XMLItem = Nothing
        Set XMLItemA = Nothing

Exit Function
ErrHandler:
    Resume Next
End Function


Private Function AddHTMLTableStart(XMLDoc As MSXML2.DOMDocument, XMLStartPoint As MSXML2.IXMLDOMElement) As MSXML2.IXMLDOMElement
Dim XSLTable As MSXML2.IXMLDOMElement
 
On Error GoTo ErrHandler
    Set XSLTable = addElement(XMLDoc, XMLStartPoint, "table", "")
        XSLTable.setAttribute "class", strCurColor & "table"
        
    'Return-Value
        Set AddHTMLTableStart = XSLTable
        
    'Free Memory
        Set XSLTable = Nothing

Exit Function
ErrHandler:
    Resume Next
End Function
Private Function AddHTMLTableRow(XMLDoc As MSXML2.DOMDocument, XMLStartPoint As MSXML2.IXMLDOMElement, strArray() As String, nColumns As Integer, nCurLoop As Integer) As MSXML2.IXMLDOMElement
Dim XSLItemTR As MSXML2.IXMLDOMElement
Dim XSLItemTD As MSXML2.IXMLDOMElement
Dim XSLItem As MSXML2.IXMLDOMElement
Dim i As Integer
Dim nColWidth As Integer
 
'Array-Details:
  'n,1 = Value
  'n,2 = Linktype, if needed
  'n,3 = Link, if needed
    
On Error GoTo ErrHandler
    
    nColWidth = 100 / nColumns
 
    'Row
    Set XSLItemTR = addElement(XMLDoc, XMLStartPoint, "tr", "")
        'Light-, Dark- or Header-Row
        If (nCurLoop > 0) Then
            If (nCurLoop Mod 2 > 0) Then
                XSLItemTR.setAttribute "class", strCurColor & "lightrow"
            Else
                XSLItemTR.setAttribute "class", strCurColor & "darkrow"
            End If
        Else
            XSLItemTR.setAttribute "class", strCurColor & "header"
        End If
        
    'Columns
    For i = 1 To nColumns
        Set XSLItemTD = addElement(XMLDoc, XSLItemTR, "td", "")
            XSLItemTD.setAttribute "class", "cell"
            XSLItemTD.setAttribute "width", nColWidth & "%"
            'Linked Element?
            If (strArray(i, 2) <> "") Then
                Set XSLItem = addElement(XMLDoc, XSLItemTD, "a", "")
                    XSLItem.setAttribute strArray(i, 2), strArray(i, 3)
            Else
                'Set Base if not linked Element
                Set XSLItem = XSLItemTD
            End If
            Set XSLItem = addElement(XMLDoc, XSLItem, "div", strArray(i, 1))
    Next
 
'Return-Value
    Set AddHTMLTableRow = XSLItemTR
    
'Free Memory
    Set XSLItemTR = Nothing
    Set XSLItemTD = Nothing
    Set XSLItem = Nothing


Exit Function
ErrHandler:
    Resume Next
End Function

'****************************************************************************
' Methode:      CollectTimeControlInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : TimeControl
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectTimeControlInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obTimeControl As TimeFunction
Dim nTimeControlIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim strObjects As String
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strArrWantedProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As TimeFunction
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To (C_COLS_TIMECONTROLLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_TIMECONTROLLIST) As TimeFunction
ReDim strArrUsableDynProperties(1 To C_COLS_TIMECONTROLLIST) As String
nCurArrDim = 1

'Which DynProperties are Objects?
    strObjects = "|Function|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"

'Initialize Properties for Translation
Dim astrProps_TimeControls(1 To 15, 1 To 2)
    astrProps_TimeControls(1, 1) = "Active"
    astrProps_TimeControls(1, 2) = "Active"
    astrProps_TimeControls(2, 1) = "Execution type"
    astrProps_TimeControls(2, 2) = "Type"
    astrProps_TimeControls(3, 1) = "Friday"
    astrProps_TimeControls(3, 2) = "Friday"
    astrProps_TimeControls(4, 1) = "Function"
    astrProps_TimeControls(4, 2) = "Function"
    astrProps_TimeControls(5, 1) = "interval"
    astrProps_TimeControls(5, 2) = "Interval"
    astrProps_TimeControls(6, 1) = "Monday"
    astrProps_TimeControls(6, 2) = "Monday"
    astrProps_TimeControls(7, 1) = "Name"
    astrProps_TimeControls(7, 2) = "Name"
    astrProps_TimeControls(8, 1) = "Saturday"
    astrProps_TimeControls(8, 2) = "Saturday"
    astrProps_TimeControls(9, 1) = "Start time"
    astrProps_TimeControls(9, 2) = "ExecuteDate"
    astrProps_TimeControls(10, 1) = "Sunday"
    astrProps_TimeControls(10, 2) = "Sunday"
    astrProps_TimeControls(11, 1) = "Thursday"
    astrProps_TimeControls(11, 2) = "Thursday"
    astrProps_TimeControls(12, 1) = "Tuesday"
    astrProps_TimeControls(12, 2) = "Tuesday"
    astrProps_TimeControls(13, 1) = "Turn of month"
    astrProps_TimeControls(13, 2) = "Monthly"
    astrProps_TimeControls(14, 1) = "Turn of year"
    astrProps_TimeControls(14, 2) = "Yearly"
    astrProps_TimeControls(15, 1) = "Wednesday"
    astrProps_TimeControls(15, 2) = "Wednesday"

'Get the Selected Properties from Control
    'Count selected entries
        For i = 0 To LstBox_TimeControlProperties.ListCount - 1
            If (LstBox_TimeControlProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_TimeControlProperties.ListCount - 1
                If (LstBox_TimeControlProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_TimeControlProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_TimeControls)
                            If (astrProps_TimeControls(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_TimeControls(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "TIMECONTROLS", "TIMECONTROLS", "name")

On Error GoTo Err_TimeControl
LogMessage "Collecting TimeControl information.."
    If (Not ObProject Is Nothing) Then
        If (ObProject.TimeFunctions.Count) Then
            'Loop TimeControls
                For nTimeControlIndex = 0 To ObProject.TimeFunctions.Count - 1
                    Set obTimeControl = ObProject.TimeFunctions.Item(nTimeControlIndex)
                    If (Not obTimeControl Is Nothing) Then
                        'Save Object in Array
                            Set obArrObjects(nCurArrDim) = obTimeControl
                        If (nCurArrDim = C_COLS_TIMECONTROLLIST Or nTimeControlIndex = ObProject.TimeFunctions.Count - 1) Then
                            'Do we need more columns than we have data for?
                                If (nCurArrDim < C_COLS_TIMECONTROLLIST) Then
                                    For i = nCurArrDim + 1 To C_COLS_TIMECONTROLLIST
                                        Set obArrObjects(i) = Nothing
                                    Next
                                End If
    
                            'Start Table
                                Set Table = Nothing
                                Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                'Fill Array - Header Row
                                    strArray(1, 1) = "Name"
                                    strArray(1, 2) = ""
                                    strArray(1, 3) = ""
                            
                            'Get Information from objects
                                'Loop Array
                                    For i = 1 To C_COLS_TIMECONTROLLIST
                                        If (obArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strArray(i + 1, 1) = ""
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                strArray(i + 1, 1) = obArrObjects(i).Name
                                                strArray(i + 1, 2) = "name"
                                                strArray(i + 1, 3) = "TimeControl[Entry-Name='" & obArrObjects(i).Name & "']"
                                            'Usable Dynproperties for this object
                                                strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                        End If
                                    Next
                                'Write 1st Row
                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_TIMECONTROLLIST + 1, 0)
                            'Get Properties from objects
                                'Loop Wanted Properties
                                    For i = 1 To UBound(strArrWantedProperties)
                                        'Get Property
                                            strTEMP = strArrWantedProperties(i, 2)
                                        'Row - 1st Column
                                            strArray(1, 1) = strArrWantedProperties(i, 1)
                                            strArray(1, 2) = ""
                                            strArray(1, 3) = ""
                                        'Loop Array
                                            For j = 1 To C_COLS_TIMECONTROLLIST
                                                'Row - following Columns
                                                    If (obArrObjects(j) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                    Else
                                                        'Is the current Property available in this object?
                                                            If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                                                    'Does it have to be linked to a Function?
                                                                        If (InStr(1, strHrefLinksFunctions, "|" & strTEMP & "|") > 0) Then
                                                                            On Error GoTo Err_SetObject
                                                                                Set obFunctionLink = obArrObjects(j).DynProperties(strTEMP)
                                                                            On Error GoTo Err_TimeControl
                                                                            If (Not obFunctionLink Is Nothing) Then
                                                                                strArray(j + 1, 1) = obFunctionLink.Name
                                                                                If (ChkBox_Functions) Then
                                                                                    strArray(j + 1, 2) = "href"
                                                                                    strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                                Else
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                                End If
                                                                                Set obFunctionLink = Nothing
                                                                            Else
                                                                                strArray(j + 1, 1) = ""
                                                                                strArray(j + 1, 2) = ""
                                                                                strArray(j + 1, 3) = ""
                                                                            End If
                                                                        End If
                                                                Else
                                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                                End If
                                                            Else
                                                                strArray(j + 1, 1) = ""
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            End If
                                                    End If
                                            Next
                                        'Write Row
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_TIMECONTROLLIST + 1, i)
                                    Next
                            'Reset Counter and Array
                                nCurArrDim = 0
                                ReDim strArray(1 To C_COLS_TIMECONTROLLIST + 1, 1 To 3) As String
                                ReDim obArrObjects(1 To C_COLS_TIMECONTROLLIST) As TimeFunction
                        End If
                        'Add to counter
                            nCurArrDim = nCurArrDim + 1
                    End If
                Next
        End If
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_TIMECONTROLS)) Then
        LogMessage ("Error while creating TimeControls-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_TIMECONTROLS)) Then
        LogMessage ("Error while Saving TimeControls-Output!")
    End If

'Free Memory
    Set obTimeControl = Nothing
    Set obFunctionLink = Nothing
    Set Table = Nothing
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strArray(0 To 0) As String
    ReDim strArrUsableDynProperties(0 To 0) As String
    ReDim obArrObjects(0 To 0) As TimeFunction

ModifyLastLogMessage ("..Done")
Exit Sub
Err_TimeControl:
    LogMessage ("Error while trying to retrieve information from Time Control Function")
    Resume Next
Err_SetObject:
    Resume Next
End Sub

'****************************************************************************
' Methode:      DateToString(...)
' Parameter:    dDate As Date
' Description:  Converts "Date" to String
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function DateToString(dDate As Date) As String
Dim strMonth, strDay, StrYear As String
strDay = Trim$(Str$(Day(dDate)))
strMonth = Trim$(Str$(Month(dDate)))
StrYear = Trim$(Str$(Year(dDate)))
If Len(strDay) < 2 Then
    strDay = "0" & strDay
End If
If Len(strMonth) < 2 Then
    strMonth = "0" & strMonth
End If
DateToString = strDay & "." & strMonth & "." & StrYear
End Function

'****************************************************************************
' Methode:      TimeToString(...)
' Parameter:    lTime As Long
' Description:  Converts Time(long) to String
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function TimeToString(lTime As Long) As String
Dim strMin, strSec, StrHour As String
Dim lTimeLeft As Long
Dim lMin, lSec, lHour As Long
lHour = lTime \ 3600
lTimeLeft = lTime - (lHour * 3600)
lMin = lTimeLeft \ 60
lSec = lTimeLeft - (lMin * 60)
strMin = Trim$(Str$(lMin))
strSec = Trim$(Str$(lSec))
StrHour = Trim$(Str$(lHour))
If Len(strMin) < 2 Then
    strMin = "0" & strMin
End If
If Len(strSec) < 2 Then
    strSec = "0" & strSec
End If
If Len(StrHour) < 2 Then
    StrHour = "0" & StrHour
End If
TimeToString = StrHour & ":" & strMin & ":" & strSec
End Function

'****************************************************************************
' Methode:      CollectStratonInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Rema
' Autor:        Robert Ficker   Datum:  01.03.2007
'****************************************************************************
Private Sub CollectStratonInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument, XMLItem As MSXML2.IXMLDOMElement)
Dim strShell As String
Dim strParam As String
Dim strStratonProjectPath As String
Dim strOutputPath As String
Dim lCount As Long
Dim i As Integer
Dim idProg As Long, iExit As Long
Dim ErrHandler As Label

On Error GoTo ErrHandler
    'RF 081124: type conflict solved (Val instead of Clng)
    lCount = Val(Read_ProjectINI("Straton", "Count"))
    If lCount = 0 Then
        MsgBox "No STRATON projects included!", vbInformation
        Exit Sub
    End If
    For i = 0 To lCount - 1
        strStratonProjectPath = Read_ProjectINI("Straton", ("Project" & i))
        strOutputPath = PR_strDestination & "\Straton_" & strStratonProjectPath
        nCounterChapters = nCounterChapters + 1
        Call AddHTMLTitle(XMLDoc, XMLItem, 0, 0, "indexitem", nCounterChapters & ". STRATON [" & strStratonProjectPath & "]", strOutputPath & "\index.htm", "href")
        strStratonProjectPath = PR_obProject.Path & "straton\" & strStratonProjectPath
        strShell = ApplicationED.zenOnPath(tpzenOnExePath) & "W6MAIN.exe "
        strParam = strStratonProjectPath & " " & "/PRINT=" & Chr(&H22)
        strParam = strParam & strOutputPath & Chr(&H22)
        ShellExecute ApplicationED.hwnd, "open", strShell, strParam, "", 1
    Next i
    Exit Sub
ErrHandler:
    MsgBox Err.Number & " -- " & Err.Description
End Sub

'****************************************************************************
' Methode:      CollectREMAInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Rema
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectREMAInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)

Dim obRema As Rema
Dim obState As State
Dim nRemasIndex As Integer
Dim nRemaIndex As Integer
Dim nStateIndex As Integer
Dim i As Integer
Dim j As Integer
Dim nSelectedCountRema As Integer
Dim nSelectedCountState As Integer
Dim strTempRema As String
Dim strTempState As String
Dim strTempStateCaption As String
Dim strObjectsStates As String
Dim strHrefLinksFunctionsStates As String
Dim obFunctionLink As RtFunction
Dim strArrWantedProperties() As String
Dim strStateArrWantedProperties() As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As State
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer
Dim strObjectNames() As String

ReDim strArray(1 To (C_COLS_STATELIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_STATELIST) As State
ReDim strObjectNames(1 To C_COLS_STATELIST) As String
ReDim strArrUsableDynProperties(1 To C_COLS_STATELIST) As String
nCurArrDim = 1

'Initialize Properties for Translation
Dim astrProps_RemaStates(1 To 25, 1 To 2)
    astrProps_RemaStates(1, 1) = "Alarm"
    astrProps_RemaStates(1, 2) = "ReaAlarm"
    astrProps_RemaStates(2, 1) = "Alarm to"
    astrProps_RemaStates(2, 2) = "ReaAlarmBis"
    astrProps_RemaStates(3, 1) = "All values"
    astrProps_RemaStates(3, 2) = "AllValues"
    astrProps_RemaStates(4, 1) = "Case Sensitive"
    astrProps_RemaStates(4, 2) = "CaseSensitive"
    astrProps_RemaStates(5, 1) = "Check Art"
    astrProps_RemaStates(5, 2) = "CheckArt"
    astrProps_RemaStates(6, 1) = "Class"
    astrProps_RemaStates(6, 2) = "KlasseIdx"
    astrProps_RemaStates(7, 1) = "Color"
    astrProps_RemaStates(7, 2) = "Color"
    astrProps_RemaStates(8, 1) = "Counter"
    astrProps_RemaStates(8, 2) = "Counter"
    astrProps_RemaStates(9, 1) = "Delay Time"
    astrProps_RemaStates(9, 2) = "DelayTime"
    astrProps_RemaStates(10, 1) = "Function"
    astrProps_RemaStates(10, 2) = "Function"
    astrProps_RemaStates(11, 1) = "Group"
    astrProps_RemaStates(11, 2) = "GruppeIdx"
    astrProps_RemaStates(12, 1) = "Hysteresis"
    astrProps_RemaStates(12, 2) = "Hysterese"
    astrProps_RemaStates(13, 1) = "Mask Value"
    astrProps_RemaStates(13, 2) = "ReaWertMaske"
    astrProps_RemaStates(14, 1) = "Status"
    astrProps_RemaStates(14, 2) = "Status"
    astrProps_RemaStates(15, 1) = "Status Ext"
    astrProps_RemaStates(15, 2) = "ReaStatusExt"
    astrProps_RemaStates(16, 1) = "Status Mask Ext"
    astrProps_RemaStates(16, 2) = "ReaStatusMaskeExt"
    astrProps_RemaStates(17, 1) = "Status Mask Std"
    astrProps_RemaStates(17, 2) = "ReaStatusMaskeStd"
    astrProps_RemaStates(18, 1) = "Status Std"
    astrProps_RemaStates(18, 2) = "ReaStatusStd"
    astrProps_RemaStates(19, 1) = "Status Trigger Ext"
    astrProps_RemaStates(19, 2) = "ReaStatusFlankeExt"
    astrProps_RemaStates(20, 1) = "Status Trigger Std"
    astrProps_RemaStates(20, 2) = "ReaStatusFlankeStd"
    astrProps_RemaStates(21, 1) = "String Value"
    astrProps_RemaStates(21, 2) = "ReaStringValue"
    astrProps_RemaStates(22, 1) = "Text"
    astrProps_RemaStates(22, 2) = "Text"
    astrProps_RemaStates(23, 1) = "Trigger Value"
    astrProps_RemaStates(23, 2) = "ReaWertFlanke"
    astrProps_RemaStates(24, 1) = "Value"
    astrProps_RemaStates(24, 2) = "ReaWert"
    astrProps_RemaStates(25, 1) = "Wildcards"
    astrProps_RemaStates(25, 2) = "Wildcards"

'Get the Selected Rema-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_RemaProperties.ListCount - 1
            If (LstBox_RemaProperties.Selected(i)) Then
                nSelectedCountRema = nSelectedCountRema + 1
            End If
        Next
    If (nSelectedCountRema > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCountRema, 1 To 2)
            j = 1
            For i = 0 To LstBox_RemaProperties.ListCount - 1
                If (LstBox_RemaProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_RemaProperties.List(i)
                    strArrWantedProperties(j, 2) = LstBox_RemaProperties.List(i)
                    j = j + 1
                End If
            Next
        'No Translation needed!
    End If

'Get the Selected State-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_StateProperties.ListCount - 1
            If (LstBox_StateProperties.Selected(i)) Then
                nSelectedCountState = nSelectedCountState + 1
            End If
        Next
    If (nSelectedCountState > 0) Then
        'Prepare Array and save selected entries
            ReDim strStateArrWantedProperties(1 To nSelectedCountState, 1 To 2)
            j = 1
            For i = 0 To LstBox_StateProperties.ListCount - 1
                If (LstBox_StateProperties.Selected(i)) Then
                    strStateArrWantedProperties(j, 1) = LstBox_StateProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strStateArrWantedProperties)
                    strTempState = strStateArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_RemaStates)
                            If (astrProps_RemaStates(j, 1) = strTempState) Then
                                strStateArrWantedProperties(i, 2) = astrProps_RemaStates(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Which DynProperties are Objects?
    strObjectsStates = "|Function|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctionsStates = "|Function|"

'Create XML-Document
    Call CreateDOMDoc(1)

'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "REMAS", "REMAS", "name")

LogMessage ("Collecting Rema information..")

On Error GoTo ErrHandler
    If (Not ObProject Is Nothing) Then
        'Loop Remas
            For nRemasIndex = 0 To ObProject.Remas.Count - 1
                Set obRema = ObProject.Remas.Item(nRemasIndex)
                If (Not obRema Is Nothing) Then
                    'Sub-Title
                        Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", obRema.Name, "Rema[Entry-Name='" & obRema.Name & "']", "name")
                    'Add Table for Recipe-Information to HTML
                        Call CollectRemaInformationHeader(obRema, strArrWantedProperties)
                    'Loop States in current Rema
                        For nStateIndex = 1 To obRema.StateCount
                            Set obState = obRema.StateItem(nStateIndex)
                            If (Not obState Is Nothing) Then
                                'For States without Caption
                                    If (obState.DynProperties("Text") = "") Then
                                        strTempStateCaption = "<Empty>"
                                    Else
                                        strTempStateCaption = obState.DynProperties("Text")
                                    End If
                                'Save Object in Array
                                    Set obArrObjects(nCurArrDim) = obState
                                    strObjectNames(nCurArrDim) = strTempStateCaption
                                If (nCurArrDim = C_COLS_STATELIST Or nStateIndex = obRema.StateCount - 1) Then
                                    'Do we need more columns than we have data for?
                                        If (nCurArrDim < C_COLS_STATELIST) Then
                                            For i = nCurArrDim + 1 To C_COLS_STATELIST
                                                Set obArrObjects(i) = Nothing
                                            Next
                                        End If
            
                                    'Start Table
                                        Set Table = Nothing
                                        Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                                        'Fill Array - Header Row
                                            strArray(1, 1) = "Name"
                                            strArray(1, 2) = ""
                                            strArray(1, 3) = ""
                                    
                                    'Get Information from objects
                                        'Loop Array
                                            For i = 1 To C_COLS_STATELIST
                                                If (obArrObjects(i) Is Nothing) Then
                                                    'Filler needed = Empty Column
                                                        strArray(i + 1, 1) = ""
                                                        strArray(i + 1, 2) = ""
                                                        strArray(i + 1, 3) = ""
                                                Else
                                                    'Information for Column
                                                        strArray(i + 1, 1) = strObjectNames(i)
                                                        strArray(i + 1, 2) = ""
                                                        strArray(i + 1, 3) = ""
                                                    'Usable Dynproperties for this object
                                                        strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                                End If
                                            Next
                                        'Write 1st Row
                                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_STATELIST + 1, 0)
                                    'Get Properties from objects
                                        'Loop Wanted Properties
                                            For i = 1 To UBound(strStateArrWantedProperties)
                                                'Get Property
                                                    strTempState = strStateArrWantedProperties(i, 2)
                                                'Row - 1st Column
                                                    strArray(1, 1) = strStateArrWantedProperties(i, 1)
                                                    strArray(1, 2) = ""
                                                    strArray(1, 3) = ""
                                                'Loop Array
                                                    For j = 1 To C_COLS_STATELIST
                                                        'Row - following Columns
                                                            If (obArrObjects(j) Is Nothing) Then
                                                                'Filler needed = Empty Column
                                                                    strArray(j + 1, 1) = ""
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                            Else
                                                                'Is the current Property available in this object?
                                                                    If (InStr(1, strArrUsableDynProperties(j), "|" & strTempState & "|", 1) > 0) Then
                                                                        If (InStr(1, strObjectsStates, "|" & strTempState & "|") > 0) Then
                                                                            'Does it have to be linked to a Function?
                                                                                If (InStr(1, strHrefLinksFunctionsStates, "|" & strTempState & "|") > 0) Then
                                                                                    On Error GoTo Err_SetObject
                                                                                        Set obFunctionLink = obArrObjects(j).DynProperties(strTempState)
                                                                                    On Error GoTo ErrHandler
                                                                                    If (Not obFunctionLink Is Nothing) Then
                                                                                        strArray(j + 1, 1) = obFunctionLink.Name
                                                                                        If (ChkBox_Functions) Then
                                                                                            strArray(j + 1, 2) = "href"
                                                                                            strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                                        Else
                                                                                            strArray(j + 1, 2) = ""
                                                                                            strArray(j + 1, 3) = ""
                                                                                        End If
                                                                                        Set obFunctionLink = Nothing
                                                                                    Else
                                                                                        strArray(j + 1, 1) = ""
                                                                                        strArray(j + 1, 2) = ""
                                                                                        strArray(j + 1, 3) = ""
                                                                                    End If
                                                                                End If
                                                                        Else
                                                                            strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTempState)
                                                                            strArray(j + 1, 2) = ""
                                                                            strArray(j + 1, 3) = ""
                                                                        End If
                                                                    Else
                                                                        strArray(j + 1, 1) = ""
                                                                        strArray(j + 1, 2) = ""
                                                                        strArray(j + 1, 3) = ""
                                                                    End If
                                                            End If
                                                    Next
                                                'Write Row
                                                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_STATELIST + 1, i)
                                            Next
                                    'Reset Counter and Array
                                        nCurArrDim = 0
                                        ReDim strArray(1 To C_COLS_STATELIST + 1, 1 To 3) As String
                                        ReDim obArrObjects(1 To C_COLS_STATELIST) As State
                                        ReDim strObjectNames(1 To C_COLS_STATELIST) As String
                                End If
                                'Add to counter
                                    nCurArrDim = nCurArrDim + 1
                            End If
                        Next
                End If
            Next
    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_REMAS)) Then
        LogMessage ("Error while creating Remas-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_REMAS)) Then
        LogMessage ("Error while Saving Remas-Output!")
    End If

'Free Memory
    Set obRema = Nothing
    Set obState = Nothing
    Set obFunctionLink = Nothing
    Set Table = Nothing
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strStateArrWantedProperties(0 To 0) As String
    ReDim strArray(0 To 0) As String
    ReDim strArrUsableDynProperties(0 To 0) As String
    ReDim strObjectNames(0 To 0) As String
    ReDim obArrObjects(0 To 0) As State
        
ModifyLastLogMessage ("..Done")

Exit Sub

Err_SetObject:
    Resume Next
ErrHandler:
    LogMessage ("Problem while collection information from Remas")
    Resume Next
End Sub

Private Function CollectRemaInformationHeader(obRema As Rema, strArrWantedProperties() As String)

Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strUsableDynProperties As String
Dim strDynProperties() As String
Dim strArray() As String
Dim nCurArrDim As Integer

ReDim strArray(1 To C_COLS_REMAHEADERLIST, 1 To 3) As String
ReDim strDynProperties(1 To C_COLS_REMAHEADERLIST, 1 To 2) As String
nCurArrDim = 1

'Which Properties are usable with this Object?
    strUsableDynProperties = GetUsableDynProperties(obRema.DynPropertiesEnum(""))

On Error GoTo ErrHandler

    'Loop Wanted Properties
        For i = 1 To UBound(strArrWantedProperties)
            'Save Information in Array
                strDynProperties(i, 1) = strArrWantedProperties(i, 1)
                strDynProperties(i, 2) = strArrWantedProperties(i, 2)
            If (nCurArrDim = C_COLS_REMAHEADERLIST Or i = UBound(strArrWantedProperties)) Then
                'Do we need more columns than we have data for?
                    If (nCurArrDim < C_COLS_REMAHEADERLIST) Then
                        For j = nCurArrDim + 1 To C_COLS_REMAHEADERLIST
                            strDynProperties(j, 1) = ""
                            strDynProperties(j, 2) = ""
                        Next
                    End If
                'Start Table
                    Set Table = Nothing
                    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                'Fill 1st Row
                    For j = 1 To C_COLS_REMAHEADERLIST
                        strArray(j, 1) = strDynProperties(j, 1)
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 1st Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_REMAHEADERLIST, 0)
                'Fill 2nd Row
                    For j = 1 To C_COLS_REMAHEADERLIST
                        If (strDynProperties(j, 2) = "") Then
                            strArray(j, 1) = ""
                        Else
                            strArray(j, 1) = obRema.DynProperties(strDynProperties(j, 2))
                        End If
                        strArray(j, 2) = ""
                        strArray(j, 3) = ""
                    Next
                'Write 2nd Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_REMAHEADERLIST, 1)
                    
                'Reset Counter and Array
                    nCurArrDim = 0
                    ReDim strArray(1 To C_COLS_REMAHEADERLIST + 1, 1 To 3) As String
                    ReDim strDynProperties(1 To C_COLS_REMAHEADERLIST) As String
            End If
            'Add to Counter
                nCurArrDim = nCurArrDim + 1
        Next
    
    'Free Memory
        Set Table = Nothing
        ReDim strDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
ErrHandler:
    Resume Next
End Function

'****************************************************************************
' Methode:      RemoveIllegalCharForLink()
' Parameter:    Text As String
' Description:  Removes Illegal Characters from Strings for Links
'****************************************************************************

Private Function RemoveIllegalCharForLink(Text As String) As String

Text = Replace(Text, " ", "_")
Text = Replace(Text, "\", "_")
Text = Replace(Text, "/", "_")
Text = Replace(Text, "#", "_")
Text = Replace(Text, ",", "_")
Text = Replace(Text, ":", "_")
Text = Replace(Text, ";", "_")
Text = Replace(Text, ".", "_")
Text = Replace(Text, "@", "_")
Text = Replace(Text, "<", "_")
Text = Replace(Text, ">", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "(", "_")
Text = Replace(Text, ")", "_")
Text = Replace(Text, "[", "_")
Text = Replace(Text, "]", "_")
Text = Replace(Text, "&", "_")
Text = Replace(Text, "%", "_")
Text = Replace(Text, "$", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "^", "_")
Text = Replace(Text, "?", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "+", "_")
Text = Replace(Text, "*", "_")
Text = Replace(Text, "~", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "|fffd|", "_")
Text = Replace(Text, "|fffd|", "_")

RemoveIllegalCharForLink = Text

End Function
Private Function CollectPictureInformationInitElementProperties()

On Error GoTo Err_InitElementProperties:
    Dim i As Integer
    Dim j As Integer
    Dim strTEMP As String
    Dim strWantedPropertiesElementFromWizardTemp As String
    'Initialize Array for Translating from DynProperty-Names to Wizard-Names
        Dim astrProps_PictureElements(1 To 299, 1 To 2)
            astrProps_PictureElements(1, 1) = "3D"
            astrProps_PictureElements(1, 2) = "ThreeDimensional"
            astrProps_PictureElements(2, 1) = "Absolute amount"
            astrProps_PictureElements(2, 2) = "Absolute"
            astrProps_PictureElements(3, 1) = "Accessible via keyboard"
            astrProps_PictureElements(3, 2) = "Tab"
            astrProps_PictureElements(4, 1) = "ActiveX settings"
            astrProps_PictureElements(4, 2) = "ActiveX"
            astrProps_PictureElements(5, 1) = "Alarm classes"
            astrProps_PictureElements(5, 2) = "BAKlassen"
            astrProps_PictureElements(6, 1) = "Alignment"
            astrProps_PictureElements(6, 2) = "Align"
            astrProps_PictureElements(7, 1) = "Alignment horizontal"
            astrProps_PictureElements(7, 2) = "HorizontalAlign"
            astrProps_PictureElements(8, 1) = "Alignment vertical"
            astrProps_PictureElements(8, 2) = "VerticalAlign"
            astrProps_PictureElements(9, 1) = "always available"
            astrProps_PictureElements(9, 2) = "AlwaysSelectable"
            astrProps_PictureElements(10, 1) = "Angle"
            astrProps_PictureElements(10, 2) = "TextAngle"
            astrProps_PictureElements(11, 1) = "Animate Always"
            astrProps_PictureElements(11, 2) = "Animate"
            astrProps_PictureElements(12, 1) = "Animate Variable"
            astrProps_PictureElements(12, 2) = "AnimateVar"
            astrProps_PictureElements(13, 1) = "Arc of circle"
            astrProps_PictureElements(13, 2) = "Pie"
            astrProps_PictureElements(14, 1) = "Authorization group"
            astrProps_PictureElements(14, 2) = "Passwordlevel"
            astrProps_PictureElements(15, 1) = "Autom. reset"
            astrProps_PictureElements(15, 2) = "AutoReset"
            astrProps_PictureElements(16, 1) = "Autom. reset after [min]"
            astrProps_PictureElements(16, 2) = "AutoResetTime"
            astrProps_PictureElements(17, 1) = "Background color"
            astrProps_PictureElements(17, 2) = "BackColor"
            astrProps_PictureElements(18, 1) = "Bar color"
            astrProps_PictureElements(18, 2) = "TextColor"
            astrProps_PictureElements(19, 1) = "Bar explicit"
            astrProps_PictureElements(19, 2) = "Explicit"
            astrProps_PictureElements(20, 1) = "Base for display"
            astrProps_PictureElements(20, 2) = "ValueBase"
            astrProps_PictureElements(21, 1) = "Bitmap"
            astrProps_PictureElements(21, 2) = "FileName"
            astrProps_PictureElements(22, 1) = "Bitmap for status HIGH(1)"
            astrProps_PictureElements(22, 2) = "BitmapHigh"
            astrProps_PictureElements(23, 1) = "Bitmap for status LOW(0)"
            astrProps_PictureElements(23, 2) = "BitmapLow"
            astrProps_PictureElements(24, 1) = "Bitmap size"
            astrProps_PictureElements(24, 2) = "Representation"
            astrProps_PictureElements(25, 1) = "Bitmaps pre-defined"
            astrProps_PictureElements(25, 2) = "PredefinedBitmaps"
            astrProps_PictureElements(26, 1) = "Blink Back Color"
            astrProps_PictureElements(26, 2) = "BlinkBackColor"
            astrProps_PictureElements(27, 1) = "Border type"
            astrProps_PictureElements(27, 2) = "Frame"
            astrProps_PictureElements(28, 1) = "Bottom [pixels]"
            astrProps_PictureElements(28, 2) = "BottomFrame"
            astrProps_PictureElements(29, 1) = "Brightness inside"
            astrProps_PictureElements(29, 2) = "InnerBrightness"
            astrProps_PictureElements(30, 1) = "Brightness outside"
            astrProps_PictureElements(30, 2) = "OuterBrightness"
            astrProps_PictureElements(31, 1) = "Broken line color 1"
            astrProps_PictureElements(31, 2) = "BrokenLine1"
            astrProps_PictureElements(32, 1) = "Broken line color 2"
            astrProps_PictureElements(32, 2) = "BrokenLine2"
            astrProps_PictureElements(33, 1) = "Button Background color"
            astrProps_PictureElements(33, 2) = "ButtonFillColor"
            astrProps_PictureElements(34, 1) = "Case sensitive"
            astrProps_PictureElements(34, 2) = "SubstituteMatchCase"
            astrProps_PictureElements(35, 1) = "Change height active"
            astrProps_PictureElements(35, 2) = "IsYZoomActive"
            astrProps_PictureElements(36, 1) = "Change width active"
            astrProps_PictureElements(36, 2) = "IsXZoomActive"
            astrProps_PictureElements(37, 1) = "Change X direction active"
            astrProps_PictureElements(37, 2) = "IsXActive"
            astrProps_PictureElements(38, 1) = "Change Y direction active"
            astrProps_PictureElements(38, 2) = "IsYActive"
            astrProps_PictureElements(39, 1) = "Clock display type"
            astrProps_PictureElements(39, 2) = "ViewType"
            astrProps_PictureElements(40, 1) = "Color max. value"
            astrProps_PictureElements(40, 2) = "MaxColor"
            astrProps_PictureElements(41, 1) = "Color min. value"
            astrProps_PictureElements(41, 2) = "MinColor"
            astrProps_PictureElements(42, 1) = "Color only filler area"
            astrProps_PictureElements(42, 2) = "FillArea"
            astrProps_PictureElements(43, 1) = "Column selection"
            astrProps_PictureElements(43, 2) = "Variable"
            astrProps_PictureElements(44, 1) = "Combi Elem. Transparent"
            astrProps_PictureElements(44, 2) = "Transparent"
            astrProps_PictureElements(45, 1) = "Control type"
            astrProps_PictureElements(45, 2) = "ControlType"
            astrProps_PictureElements(46, 1) = "Current value"
            astrProps_PictureElements(46, 2) = "LinkType"
            astrProps_PictureElements(47, 1) = "Direction"
            astrProps_PictureElements(47, 2) = "Direction"
            astrProps_PictureElements(48, 1) = "Discrete"
            astrProps_PictureElements(48, 2) = "Discrete"
            astrProps_PictureElements(49, 1) = "Discrete steps"
            astrProps_PictureElements(49, 2) = "DiscreteSteps"
            astrProps_PictureElements(50, 1) = "Display axes"
            astrProps_PictureElements(50, 2) = "Axes"
            astrProps_PictureElements(51, 1) = "Display curve info"
            astrProps_PictureElements(51, 2) = "Addresses"
            astrProps_PictureElements(52, 1) = "Display curves as areas"
            astrProps_PictureElements(52, 2) = "Area"
            astrProps_PictureElements(53, 1) = "Display legend"
            astrProps_PictureElements(53, 2) = "ShowLegend"
            astrProps_PictureElements(54, 1) = "Display limit text"
            astrProps_PictureElements(54, 2) = "ContitionText"
            astrProps_PictureElements(55, 1) = "Display mode"
            astrProps_PictureElements(55, 2) = "DisplayMode"
            astrProps_PictureElements(56, 1) = "Display Range dyn. Max."
            astrProps_PictureElements(56, 2) = "DynMaxVar"
            astrProps_PictureElements(57, 1) = "Display Range dyn. Min."
            astrProps_PictureElements(57, 2) = "DynMinVar"
            astrProps_PictureElements(58, 1) = "Display Range Max."
            astrProps_PictureElements(58, 2) = "ViewMax"
            astrProps_PictureElements(59, 1) = "Display Range Min."
            astrProps_PictureElements(59, 2) = "ViewMin"
            astrProps_PictureElements(60, 1) = "Display scale"
            astrProps_PictureElements(60, 2) = "ShowScale"
            astrProps_PictureElements(61, 1) = "Display slave pointer"
            astrProps_PictureElements(61, 2) = "MinMaxView"
            astrProps_PictureElements(62, 1) = "Display status of variable"
            astrProps_PictureElements(62, 2) = "ShowState"
            astrProps_PictureElements(63, 1) = "Display status with red square"
            astrProps_PictureElements(63, 2) = "RedPoint"
            astrProps_PictureElements(64, 1) = "Display title"
            astrProps_PictureElements(64, 2) = "ShowTitle"
            astrProps_PictureElements(65, 1) = "Display Unit"
            astrProps_PictureElements(65, 2) = "ShowUnit"
            astrProps_PictureElements(66, 1) = "Display value in percent"
            astrProps_PictureElements(66, 2) = "Percentage"
            astrProps_PictureElements(67, 1) = "Display values"
            astrProps_PictureElements(67, 2) = "NumericalValues"
            astrProps_PictureElements(68, 1) = "Do not interpolate"
            astrProps_PictureElements(68, 2) = "NoInterpolation"
            astrProps_PictureElements(69, 1) = "DragBegin"
            astrProps_PictureElements(69, 2) = "DragBegin"
            astrProps_PictureElements(70, 1) = "DragDrop"
            astrProps_PictureElements(70, 2) = "DragDrop"
            astrProps_PictureElements(71, 1) = "DragOver"
            astrProps_PictureElements(71, 2) = "DragOver"
            astrProps_PictureElements(72, 1) = "Draw"
            astrProps_PictureElements(72, 2) = "Draw"
            astrProps_PictureElements(73, 1) = "Dynamic Background/filling color"
            astrProps_PictureElements(73, 2) = "BackColorVariable"
            astrProps_PictureElements(74, 1) = "Dynamic Text/line color"
            astrProps_PictureElements(74, 2) = "LineColorVariable"
            astrProps_PictureElements(75, 1) = "Edge width"
            astrProps_PictureElements(75, 2) = "SaumWidth"
            astrProps_PictureElements(76, 1) = "End angle"
            astrProps_PictureElements(76, 2) = "End"
            astrProps_PictureElements(77, 1) = "End point X [pixels]"
            astrProps_PictureElements(77, 2) = "EndX"
            astrProps_PictureElements(78, 1) = "End point Y [pixels]"
            astrProps_PictureElements(78, 2) = "EndY"
            astrProps_PictureElements(79, 1) = "Explicit"
            astrProps_PictureElements(79, 2) = "Explicit"
            astrProps_PictureElements(80, 1) = "Exported Screen type spec. funct."
            astrProps_PictureElements(80, 2) = "MDIFunctionEx"
            astrProps_PictureElements(81, 1) = "External program"
            astrProps_PictureElements(81, 2) = "SetProgram"
            astrProps_PictureElements(82, 1) = "Fast reaction"
            astrProps_PictureElements(82, 2) = "FastReaction"
            astrProps_PictureElements(83, 1) = "Fill Only"
            astrProps_PictureElements(83, 2) = "FillOnly"
            astrProps_PictureElements(84, 1) = "Filling color"
            astrProps_PictureElements(84, 2) = "BackColor"
            astrProps_PictureElements(85, 1) = "Filling pattern"
            astrProps_PictureElements(85, 2) = "FillPattern"
            astrProps_PictureElements(86, 1) = "First alarm class to be displayed"
            astrProps_PictureElements(86, 2) = "Offset"
            astrProps_PictureElements(87, 1) = "Flashing background color"
            astrProps_PictureElements(87, 2) = "BlinkingBackColor"
            astrProps_PictureElements(88, 1) = "Flashing background transparent"
            astrProps_PictureElements(88, 2) = "BlinkingBackGroundTransparent"
            astrProps_PictureElements(89, 1) = "Font"
            astrProps_PictureElements(89, 2) = "Font"
            astrProps_PictureElements(90, 1) = "Formatting"
            astrProps_PictureElements(90, 2) = "Format"
            astrProps_PictureElements(91, 1) = "From zero"
            astrProps_PictureElements(91, 2) = "FromZero"
            astrProps_PictureElements(92, 1) = "Function"
            astrProps_PictureElements(92, 2) = "Function"
            astrProps_PictureElements(93, 1) = "Function execution on pressing"
            astrProps_PictureElements(93, 2) = "FktOnDown"
            astrProps_PictureElements(94, 1) = "Global"
            astrProps_PictureElements(94, 2) = "BAGlobal"
            astrProps_PictureElements(95, 1) = "Height [pixels]"
            astrProps_PictureElements(95, 2) = "Height"
            astrProps_PictureElements(96, 1) = "Help chapter"
            astrProps_PictureElements(96, 2) = "HelpCapture"
            astrProps_PictureElements(97, 1) = "Help file"
            astrProps_PictureElements(97, 2) = "Helpfile"
            astrProps_PictureElements(98, 1) = "Hierarchical names"
            astrProps_PictureElements(98, 2) = "SubstituteCombinedName"
            astrProps_PictureElements(99, 1) = "hold pressed status"
            astrProps_PictureElements(99, 2) = "StayPressed"
            astrProps_PictureElements(100, 1) = "Holding time [ms]"
            astrProps_PictureElements(100, 2) = "ReactionTime"
            astrProps_PictureElements(101, 1) = "Horizontal"
            astrProps_PictureElements(101, 2) = "HorizontalOrigin"
            astrProps_PictureElements(102, 1) = "Image of the selected alarm classes"
            astrProps_PictureElements(102, 2) = "AbbModus"
            astrProps_PictureElements(103, 1) = "In original size"
            astrProps_PictureElements(103, 2) = "OriginalSize"
            astrProps_PictureElements(104, 1) = "Indicator type"
            astrProps_PictureElements(104, 2) = "Pointer"
            astrProps_PictureElements(105, 1) = "Indicator/Bar color"
            astrProps_PictureElements(105, 2) = "PointerColor"
            astrProps_PictureElements(106, 1) = "Init"
            astrProps_PictureElements(106, 2) = "Init"
            astrProps_PictureElements(107, 1) = "Interlocking"
            astrProps_PictureElements(107, 2) = "Locking"
            astrProps_PictureElements(108, 1) = "invisible"
            astrProps_PictureElements(108, 2) = "BAUnsichtbar"
            astrProps_PictureElements(109, 1) = "Is Back Color"
            astrProps_PictureElements(109, 2) = "IsBackColor"
            astrProps_PictureElements(110, 1) = "Is Text"
            astrProps_PictureElements(110, 2) = "IsText"
            astrProps_PictureElements(111, 1) = "Key combination"
            astrProps_PictureElements(111, 2) = "ShortCut"
            astrProps_PictureElements(112, 1) = "KillFocus"
            astrProps_PictureElements(112, 2) = "KillFocus"
            astrProps_PictureElements(113, 1) = "Knob color"
            astrProps_PictureElements(113, 2) = "KnobColor"
            astrProps_PictureElements(114, 1) = "Knob type"
            astrProps_PictureElements(114, 2) = "KnobStyle"
            astrProps_PictureElements(115, 1) = "Left [pixels]"
            astrProps_PictureElements(115, 2) = "LeftFrame"
            astrProps_PictureElements(116, 1) = "LeftClickDown"
            astrProps_PictureElements(116, 2) = "LeftClickDown"
            astrProps_PictureElements(117, 1) = "LeftClickUp"
            astrProps_PictureElements(117, 2) = "LeftClickUp"
            astrProps_PictureElements(118, 1) = "LeftDoubleClick"
            astrProps_PictureElements(118, 2) = "LeftDClick"
            astrProps_PictureElements(119, 1) = "Legend color"
            astrProps_PictureElements(119, 2) = "LegendColor"
            astrProps_PictureElements(120, 1) = "Legend Distance [pixels]"
            astrProps_PictureElements(120, 2) = "LegendDistance"
            astrProps_PictureElements(121, 1) = "Legend text"
            astrProps_PictureElements(121, 2) = "Legend"
            astrProps_PictureElements(122, 1) = "Letter slant"
            astrProps_PictureElements(122, 2) = "TextLetterAngle"
            astrProps_PictureElements(123, 1) = "Light effect shifted"
            astrProps_PictureElements(123, 2) = "Shifted"
            astrProps_PictureElements(124, 1) = "Line activation"
            astrProps_PictureElements(124, 2) = "ColVars"
            astrProps_PictureElements(125, 1) = "Line color"
            astrProps_PictureElements(125, 2) = "LineColor"
            astrProps_PictureElements(126, 1) = "Line type"
            astrProps_PictureElements(126, 2) = "LineType"
            astrProps_PictureElements(127, 1) = "Line width"
            astrProps_PictureElements(127, 2) = "LineWidth"
            astrProps_PictureElements(128, 1) = "Line width Protected"
            astrProps_PictureElements(128, 2) = "LineWidthFGES"
            astrProps_PictureElements(129, 1) = "Logarithmic"
            astrProps_PictureElements(129, 2) = "Logarithmic"
            astrProps_PictureElements(130, 1) = "Main tick color"
            astrProps_PictureElements(130, 2) = "MainTickColor"
            astrProps_PictureElements(131, 1) = "Main ticks"
            astrProps_PictureElements(131, 2) = "MainTicks"
            astrProps_PictureElements(132, 1) = "MDI Control type"
            astrProps_PictureElements(132, 2) = "MDIControlType"
            astrProps_PictureElements(133, 1) = "Menu"
            astrProps_PictureElements(133, 2) = "Menu"
            astrProps_PictureElements(134, 1) = "Milliseconds"
            astrProps_PictureElements(134, 2) = "RefreshMilliSecond"
            astrProps_PictureElements(135, 1) = "Momentary switch"
            astrProps_PictureElements(135, 2) = "Scanner"
            astrProps_PictureElements(136, 1) = "Momentary switch On"
            astrProps_PictureElements(136, 2) = "ScannerOn"
            astrProps_PictureElements(137, 1) = "MouseOver"
            astrProps_PictureElements(137, 2) = "MouseOver"
            astrProps_PictureElements(138, 1) = "Name f. object list"
            astrProps_PictureElements(138, 2) = "Stationname"
            astrProps_PictureElements(139, 1) = "Name of linked symbol"
            astrProps_PictureElements(139, 2) = "LinkName"
            astrProps_PictureElements(140, 1) = "Object name"
            astrProps_PictureElements(140, 2) = "Name"
            astrProps_PictureElements(141, 1) = "Object name as link"
            astrProps_PictureElements(141, 2) = "OBJNameLink"
            astrProps_PictureElements(142, 1) = "Only filler area"
            astrProps_PictureElements(142, 2) = "FillAreaOnly"
            astrProps_PictureElements(143, 1) = "Opening angle"
            astrProps_PictureElements(143, 2) = "OpeningAngle"
            astrProps_PictureElements(144, 1) = "Original Size"
            astrProps_PictureElements(144, 2) = "OriginalSize"
            astrProps_PictureElements(145, 1) = "Overlapping"
            astrProps_PictureElements(145, 2) = "Overlapping"
            astrProps_PictureElements(146, 1) = "Percent display"
            astrProps_PictureElements(146, 2) = "Percentage"
            astrProps_PictureElements(147, 1) = "Screen symbol"
            astrProps_PictureElements(147, 2) = "PictureSymbol"
            astrProps_PictureElements(148, 1) = "Screen symbol active"
            astrProps_PictureElements(148, 2) = "IsPictureSymbol"
            astrProps_PictureElements(149, 1) = "Screen type spec. function"
            astrProps_PictureElements(149, 2) = "MDIFunction"
            astrProps_PictureElements(150, 1) = "Priority"
            astrProps_PictureElements(150, 2) = "BAPriorit|fffd|t"
            astrProps_PictureElements(151, 1) = "Project"
            astrProps_PictureElements(151, 2) = "BAProjekt"
            astrProps_PictureElements(152, 1) = "propose current value"
            astrProps_PictureElements(152, 2) = "Preset"
            astrProps_PictureElements(153, 1) = "Recognize flashing of all variables"
            astrProps_PictureElements(153, 2) = "BlinkingFromAllVariables"
            astrProps_PictureElements(154, 1) = "Refresh Hours"
            astrProps_PictureElements(154, 2) = "RefreshHour"
            astrProps_PictureElements(155, 1) = "Refresh Minute"
            astrProps_PictureElements(155, 2) = "RefreshMinute"
            astrProps_PictureElements(156, 1) = "Refresh Seconds"
            astrProps_PictureElements(156, 2) = "RefreshSecond"
            astrProps_PictureElements(157, 1) = "Represent. Hours"
            astrProps_PictureElements(157, 2) = "RepresentationHour"
            astrProps_PictureElements(158, 1) = "Represent. Minute"
            astrProps_PictureElements(158, 2) = "RepresentationMinute"
            astrProps_PictureElements(159, 1) = "Represent. Seconds"
            astrProps_PictureElements(159, 2) = "RepresentationSecond"
            astrProps_PictureElements(160, 1) = "Reverse direction"
            astrProps_PictureElements(160, 2) = "ReverseDirection"
            astrProps_PictureElements(161, 1) = "Ribbon"
            astrProps_PictureElements(161, 2) = "Ribbon"
            astrProps_PictureElements(162, 1) = "Right [pixels]"
            astrProps_PictureElements(162, 2) = "RightFrame"
            astrProps_PictureElements(163, 1) = "RightClickDown"
            astrProps_PictureElements(163, 2) = "RightClickDown"
            astrProps_PictureElements(164, 1) = "RightClickUp"
            astrProps_PictureElements(164, 2) = "RightClickUp"
            astrProps_PictureElements(165, 1) = "RightDoubleClick"
            astrProps_PictureElements(165, 2) = "RightDClick"
            astrProps_PictureElements(166, 1) = "Scale Distance [pixels]"
            astrProps_PictureElements(166, 2) = "ScaleDistance"
            astrProps_PictureElements(167, 1) = "Scale Height [pixels]"
            astrProps_PictureElements(167, 2) = "ScaleHeight"
            astrProps_PictureElements(168, 1) = "Scale Start angle"
            astrProps_PictureElements(168, 2) = "StartAngle"
            astrProps_PictureElements(169, 1) = "Scroll width [%]"
            astrProps_PictureElements(169, 2) = "ScrollWidth"
            astrProps_PictureElements(170, 1) = "Separate colors"
            astrProps_PictureElements(170, 2) = "SeparateColors"
            astrProps_PictureElements(171, 1) = "Separate flashing"
            astrProps_PictureElements(171, 2) = "SeparateBlinking"
            astrProps_PictureElements(172, 1) = "Separator"
            astrProps_PictureElements(172, 2) = "Separator"
            astrProps_PictureElements(173, 1) = "Set value / change by"
            astrProps_PictureElements(173, 2) = "SetValue"
            astrProps_PictureElements(174, 1) = "Set value during mouse-move"
            astrProps_PictureElements(174, 2) = "MouseMovement"
            astrProps_PictureElements(175, 1) = "Set value dyn. Max."
            astrProps_PictureElements(175, 2) = "SetValueDynMax"
            astrProps_PictureElements(176, 1) = "Set value dyn. Min."
            astrProps_PictureElements(176, 2) = "SetValueDynMin"
            astrProps_PictureElements(177, 1) = "Set value Max."
            astrProps_PictureElements(177, 2) = "Max"
            astrProps_PictureElements(178, 1) = "Set value Min."
            astrProps_PictureElements(178, 2) = "Min"
            astrProps_PictureElements(179, 1) = "Set value via"
            astrProps_PictureElements(179, 2) = "SetValueWith"
            astrProps_PictureElements(180, 1) = "SetFocus"
            astrProps_PictureElements(180, 2) = "SetFocus"
            astrProps_PictureElements(181, 1) = "Setting values active"
            astrProps_PictureElements(181, 2) = "IsSetValue"
            astrProps_PictureElements(182, 1) = "Shape"
            astrProps_PictureElements(182, 2) = "Shape"
            astrProps_PictureElements(183, 1) = "Show knob"
            astrProps_PictureElements(183, 2) = "ShowKnob"
            astrProps_PictureElements(184, 1) = "Show value"
            astrProps_PictureElements(184, 2) = "ShowValue"
            astrProps_PictureElements(185, 1) = "Sign split (several times)"
            astrProps_PictureElements(185, 2) = "ExtraPoints"
            astrProps_PictureElements(186, 1) = "Sign split elsewhere"
            astrProps_PictureElements(186, 2) = "DistributionLineCharacter"
            astrProps_PictureElements(187, 1) = "Signature necessary"
            astrProps_PictureElements(187, 2) = "Signature"
            astrProps_PictureElements(188, 1) = "Signature text"
            astrProps_PictureElements(188, 2) = "SignatureText"
            astrProps_PictureElements(189, 1) = "Slave pointer Display"
            astrProps_PictureElements(189, 2) = "MinMaxShape"
            astrProps_PictureElements(190, 1) = "Source (e.g: TANK1*)"
            astrProps_PictureElements(190, 2) = "SubstituteSource"
            astrProps_PictureElements(191, 1) = "Start angle"
            astrProps_PictureElements(191, 2) = "Start"
            astrProps_PictureElements(192, 1) = "Start point X [pixels]"
            astrProps_PictureElements(192, 2) = "StartX"
            astrProps_PictureElements(193, 1) = "Start point Y [pixels]"
            astrProps_PictureElements(193, 2) = "StartY"
            astrProps_PictureElements(194, 1) = "Stati"
            astrProps_PictureElements(194, 2) = "Status"
            astrProps_PictureElements(195, 1) = "Style"
            astrProps_PictureElements(195, 2) = "Style"
            astrProps_PictureElements(196, 1) = "Style H"
            astrProps_PictureElements(196, 2) = "StyleH"
            astrProps_PictureElements(197, 1) = "Style L"
            astrProps_PictureElements(197, 2) = "StyleL"
            astrProps_PictureElements(198, 1) = "Sub tick color"
            astrProps_PictureElements(198, 2) = "SmallTickColor"
            astrProps_PictureElements(199, 1) = "Sub ticks"
            astrProps_PictureElements(199, 2) = "SmallTicks"
            astrProps_PictureElements(200, 1) = "Supply number"
            astrProps_PictureElements(200, 2) = "SupplyNumber"
            astrProps_PictureElements(201, 1) = "Switch"
            astrProps_PictureElements(201, 2) = "Switch"
            astrProps_PictureElements(202, 1) = "Switch Function"
            astrProps_PictureElements(202, 2) = "SwitchFunction"
            astrProps_PictureElements(203, 1) = "Symbol"
            astrProps_PictureElements(203, 2) = "Symbol"
            astrProps_PictureElements(204, 1) = "Symbol F1"
            astrProps_PictureElements(204, 2) = "SymbolF1"
            astrProps_PictureElements(205, 1) = "Symbol F1 colors"
            astrProps_PictureElements(205, 2) = "SymbolF1_Mode"
            astrProps_PictureElements(206, 1) = "Symbol F2"
            astrProps_PictureElements(206, 2) = "SymbolF2"
            astrProps_PictureElements(207, 1) = "Symbol F2 colors"
            astrProps_PictureElements(207, 2) = "SymbolF2_Mode"
            astrProps_PictureElements(208, 1) = "Symbol FGES"
            astrProps_PictureElements(208, 2) = "SymbolFGES"
            astrProps_PictureElements(209, 1) = "Symbol FGES colors"
            astrProps_PictureElements(209, 2) = "SymbolFGES_Mode"
            astrProps_PictureElements(210, 1) = "Symbol number"
            astrProps_PictureElements(210, 2) = "PropSymbolNumber"
            astrProps_PictureElements(211, 1) = "Take color of main variable"
            astrProps_PictureElements(211, 2) = "ColorFromVariable"
            astrProps_PictureElements(212, 1) = "Take flashing from main variable"
            astrProps_PictureElements(212, 2) = "BlinkingFromVariable"
            astrProps_PictureElements(213, 1) = "Take set value limits from variable"
            astrProps_PictureElements(213, 2) = "LimitFromVar"
            astrProps_PictureElements(214, 1) = "Target (e.g: TANK2)"
            astrProps_PictureElements(214, 2) = "SubstituteDestination"
            astrProps_PictureElements(215, 1) = "Text"
            astrProps_PictureElements(215, 2) = "Text"
            astrProps_PictureElements(216, 1) = "Text chained"
            astrProps_PictureElements(216, 2) = "Chained"
            astrProps_PictureElements(217, 1) = "Text color"
            astrProps_PictureElements(217, 2) = "TextColor"
            astrProps_PictureElements(218, 1) = "Text file"
            astrProps_PictureElements(218, 2) = "MessageText"
            astrProps_PictureElements(219, 1) = "Text line 1"
            astrProps_PictureElements(219, 2) = "Text1"
            astrProps_PictureElements(220, 1) = "Text line 2"
            astrProps_PictureElements(220, 2) = "Text2"
            astrProps_PictureElements(221, 1) = "Text when pressed"
            astrProps_PictureElements(221, 2) = "DownText"
            astrProps_PictureElements(222, 1) = "Time for text change [s]"
            astrProps_PictureElements(222, 2) = "TextChangeTime"
            astrProps_PictureElements(223, 1) = "Time stamp"
            astrProps_PictureElements(223, 2) = "RegardAllVarBlinking"
            astrProps_PictureElements(224, 1) = "Title color"
            astrProps_PictureElements(224, 2) = "TitleColor"
            astrProps_PictureElements(225, 1) = "Title position"
            astrProps_PictureElements(225, 2) = "TitlePos"
            astrProps_PictureElements(226, 1) = "Title text"
            astrProps_PictureElements(226, 2) = "TitleText"
            astrProps_PictureElements(227, 1) = "Tooltip"
            astrProps_PictureElements(227, 2) = "Tooltip"
            astrProps_PictureElements(228, 1) = "Top [pixels]"
            astrProps_PictureElements(228, 2) = "TopFrame"
            astrProps_PictureElements(229, 1) = "Topology type"
            astrProps_PictureElements(229, 2) = "TopologyType"
            astrProps_PictureElements(230, 1) = "Transformer side"
            astrProps_PictureElements(230, 2) = "TransformerSide"
            astrProps_PictureElements(231, 1) = "Transparent"
            astrProps_PictureElements(231, 2) = "FillColor"
            astrProps_PictureElements(232, 1) = "Twist Max. rotation [|fffd|]"
            astrProps_PictureElements(232, 2) = "TwistViewMax"
            astrProps_PictureElements(233, 1) = "Twist Max. variable value"
            astrProps_PictureElements(233, 2) = "TwistVarMax"
            astrProps_PictureElements(234, 1) = "Twist Min. rotation [|fffd|]"
            astrProps_PictureElements(234, 2) = "TwistViewMin"
            astrProps_PictureElements(235, 1) = "Twist Min. variable value"
            astrProps_PictureElements(235, 2) = "TwistVarMin"
            astrProps_PictureElements(236, 1) = "Twist Rotation active"
            astrProps_PictureElements(236, 2) = "IsTwistActive"
            astrProps_PictureElements(237, 1) = "Twist Variable"
            astrProps_PictureElements(237, 2) = "TwistVariable"
            astrProps_PictureElements(238, 1) = "Two-lined display"
            astrProps_PictureElements(238, 2) = "TwoLines"
            astrProps_PictureElements(239, 1) = "Type of display"
            astrProps_PictureElements(239, 2) = "RepresentationStyle"
            astrProps_PictureElements(240, 1) = "Value color"
            astrProps_PictureElements(240, 2) = "ValueColor"
            astrProps_PictureElements(241, 1) = "Value Distance [pixels]"
            astrProps_PictureElements(241, 2) = "ValueDistance"
            astrProps_PictureElements(242, 1) = "Value position"
            astrProps_PictureElements(242, 2) = "ValuePos"
            astrProps_PictureElements(243, 1) = "Variable"
            astrProps_PictureElements(243, 2) = "Variable"
            astrProps_PictureElements(244, 1) = "Variable SS_1_1"
            astrProps_PictureElements(244, 2) = "Variable_SS_1_1"
            astrProps_PictureElements(245, 1) = "Variable SS_1_2"
            astrProps_PictureElements(245, 2) = "Variable_SS_1_2"
            astrProps_PictureElements(246, 1) = "Variable SS_1_3"
            astrProps_PictureElements(246, 2) = "Variable_SS_1_3"
            astrProps_PictureElements(247, 1) = "Variable SS_1_4"
            astrProps_PictureElements(247, 2) = "Variable_SS_1_4"
            astrProps_PictureElements(248, 1) = "Variable SS_2_1"
            astrProps_PictureElements(248, 2) = "Variable_SS_2_1"
            astrProps_PictureElements(249, 1) = "Variable SS_2_1"
            astrProps_PictureElements(249, 2) = "Variable_SS_2_1"
            astrProps_PictureElements(250, 1) = "Variable SS_2_2"
            astrProps_PictureElements(250, 2) = "Variable_SS_2_2"
            astrProps_PictureElements(251, 1) = "Variable SS_2_3"
            astrProps_PictureElements(251, 2) = "Variable_SS_2_3"
            astrProps_PictureElements(252, 1) = "Variable SS_2_4"
            astrProps_PictureElements(252, 2) = "Variable_SS_2_4"
            astrProps_PictureElements(253, 1) = "Variable standard dividing point"
            astrProps_PictureElements(253, 2) = "VariableStandardIsolatingPoint"
            astrProps_PictureElements(254, 1) = "Variable Start1"
            astrProps_PictureElements(254, 2) = "Variable_Start1"
            astrProps_PictureElements(255, 1) = "Variable Start2"
            astrProps_PictureElements(255, 2) = "Variable_Start2"
            astrProps_PictureElements(256, 1) = "Vertical"
            astrProps_PictureElements(256, 2) = "VerticalOrigin"
            astrProps_PictureElements(257, 1) = "via variable name"
            astrProps_PictureElements(257, 2) = "SubstituteOnName"
            astrProps_PictureElements(258, 1) = "Visibility From"
            astrProps_PictureElements(258, 2) = "VisibilityFrom"
            astrProps_PictureElements(259, 1) = "Visibility From Limit"
            astrProps_PictureElements(259, 2) = "VisibilityFromLimit"
            astrProps_PictureElements(260, 1) = "Visibility level"
            astrProps_PictureElements(260, 2) = "Layer"
            astrProps_PictureElements(261, 1) = "Visibility Variable"
            astrProps_PictureElements(261, 2) = "VisibilityVariable"
            astrProps_PictureElements(262, 1) = "Visibility To"
            astrProps_PictureElements(262, 2) = "VisibilityTo"
            astrProps_PictureElements(263, 1) = "Visible from"
            astrProps_PictureElements(263, 2) = "ZoomMin"
            astrProps_PictureElements(264, 1) = "Visible to"
            astrProps_PictureElements(264, 2) = "ZoomMax"
            astrProps_PictureElements(265, 1) = "Visible under WinCE"
            astrProps_PictureElements(265, 2) = "UnderCE"
            astrProps_PictureElements(266, 1) = "Width [pixels]"
            astrProps_PictureElements(266, 2) = "Width"
            astrProps_PictureElements(267, 1) = "With brightness values"
            astrProps_PictureElements(267, 2) = "Brightness"
            astrProps_PictureElements(268, 1) = "without dialog"
            astrProps_PictureElements(268, 2) = "HWDirect"
            astrProps_PictureElements(269, 1) = "Word wrap"
            astrProps_PictureElements(269, 2) = "Wordbreak"
            astrProps_PictureElements(270, 1) = "X Position Max. movement [pixels]"
            astrProps_PictureElements(270, 2) = "XViewMax"
            astrProps_PictureElements(271, 1) = "X Position Max. variable value"
            astrProps_PictureElements(271, 2) = "XVarMax"
            astrProps_PictureElements(272, 1) = "X Position Min. movement [pixels]"
            astrProps_PictureElements(272, 2) = "XViewMin"
            astrProps_PictureElements(273, 1) = "X Position Min. variable value"
            astrProps_PictureElements(273, 2) = "XVarMin"
            astrProps_PictureElements(274, 1) = "X Position Variable"
            astrProps_PictureElements(274, 2) = "XVariable"
            astrProps_PictureElements(275, 1) = "X Zoom Max. variable value"
            astrProps_PictureElements(275, 2) = "XZoomVarMax"
            astrProps_PictureElements(276, 1) = "X Zoom Max. width [%]"
            astrProps_PictureElements(276, 2) = "XZoomViewMax"
            astrProps_PictureElements(277, 1) = "X Zoom Min. variable value"
            astrProps_PictureElements(277, 2) = "XZoomVarMin"
            astrProps_PictureElements(278, 1) = "X Zoom Min. width [%]"
            astrProps_PictureElements(278, 2) = "XZoomViewMin"
            astrProps_PictureElements(279, 1) = "X Zoom Variable"
            astrProps_PictureElements(279, 2) = "XZoomVariable"
            astrProps_PictureElements(280, 1) = "Y Position Max. movement [pixels]"
            astrProps_PictureElements(280, 2) = "YViewMax"
            astrProps_PictureElements(281, 1) = "Y Position Max. variable value"
            astrProps_PictureElements(281, 2) = "YVarMax"
            astrProps_PictureElements(282, 1) = "Y Position Min. movement [pixels]"
            astrProps_PictureElements(282, 2) = "YViewMin"
            astrProps_PictureElements(283, 1) = "Y Position Min. variable value"
            astrProps_PictureElements(283, 2) = "YVarMin"
            astrProps_PictureElements(284, 1) = "Y Position Variable"
            astrProps_PictureElements(284, 2) = "YVariable"
            astrProps_PictureElements(285, 1) = "Y Zoom Max. height [%]"
            astrProps_PictureElements(285, 2) = "YZoomViewMax"
            astrProps_PictureElements(286, 1) = "Y Zoom Max. variable value"
            astrProps_PictureElements(286, 2) = "YZoomVarMax"
            astrProps_PictureElements(287, 1) = "Y Zoom Min. height [%]"
            astrProps_PictureElements(287, 2) = "YZoomViewMin"
            astrProps_PictureElements(288, 1) = "Y Zoom Min. variable value"
            astrProps_PictureElements(288, 2) = "YZoomVarMin"
            astrProps_PictureElements(289, 1) = "Y Zoom Variable"
            astrProps_PictureElements(289, 2) = "YZoomVariable"
            astrProps_PictureElements(290, 1) = "Type"
            astrProps_PictureElements(290, 2) = "Type"
            astrProps_PictureElements(291, 1) = "Invert colour gradient"
            astrProps_PictureElements(291, 2) = "BtnStyleInvert"
            astrProps_PictureElements(292, 1) = "Button shape"
            astrProps_PictureElements(292, 2) = "BtnStyleBorder"
            astrProps_PictureElements(293, 1) = "Button filling"
            astrProps_PictureElements(293, 2) = "BtnStyleFill"
            astrProps_PictureElements(294, 1) = "Colour from ALC"
            astrProps_PictureElements(294, 2) = "ALCUseColor"
            astrProps_PictureElements(295, 1) = "Display multiple sources"
            astrProps_PictureElements(295, 2) = "ALCMultiSource"
            astrProps_PictureElements(296, 1) = "Function type"
            astrProps_PictureElements(296, 2) = "ALCType"
            astrProps_PictureElements(297, 1) = "Source"
            astrProps_PictureElements(297, 2) = "ALCSourceID"
            astrProps_PictureElements(298, 1) = "Link number"
            astrProps_PictureElements(298, 2) = "ALCLinkID"
            astrProps_PictureElements(299, 1) = "Coordinates"
            astrProps_PictureElements(299, 2) = "Coordinates"
            
'Get the Selected Element-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_ElementProperties.ListCount - 1
            If (LstBox_ElementProperties.Selected(i)) Then
                nSelectedCountElements = nSelectedCountElements + 1
            End If
        Next
    If (nSelectedCountElements > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedPropertiesElements(1 To nSelectedCountElements, 1 To 2)
            j = 1
            For i = 0 To LstBox_ElementProperties.ListCount - 1
                If (LstBox_ElementProperties.Selected(i)) Then
                    strArrWantedPropertiesElements(j, 1) = LstBox_ElementProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedPropertiesElements)
                    strTEMP = strArrWantedPropertiesElements(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_PictureElements)
                            If (astrProps_PictureElements(j, 1) = strTEMP) Then
                                strArrWantedPropertiesElements(i, 2) = astrProps_PictureElements(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If
    
Exit Function
Err_InitElementProperties:
    Resume Next
End Function


'****************************************************************************
' Methode:      CollectPictureInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Pictures
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************

Private Sub CollectPictureInformation(ObProject As Project)

Dim obPicture As DynPicture
Dim obPicture_Element As Element
Dim nPictureIndex As Integer
Dim strHardcopyFileName As String
Dim nWidth As Integer
Dim nHeight As Integer
Dim i As Integer
Dim j As Integer
Dim strTEMP As String
Dim nPropertyIndexElement As Integer
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim strColorObjects As String
Dim nSelectedCountPicture As Integer
Dim strObjects As String
Dim strArrWantedProperties() As String
Dim XMLMainDoc As MSXML2.DOMDocument
Dim XMLMainItem As MSXML2.IXMLDOMElement
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As DynPicture
Dim obArrObjectsElements() As Element
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer
Dim nCurArrDimElements As Integer
Dim StartPointForElementTree As MSXML2.IXMLDOMElement
Dim strArrayNames() As String
Dim strArrayLinks() As String
Dim strHrefLinksFunctionsElements As String
Dim strHrefLinksVariablesElements As String
Dim strColorObjectsElements As String
Dim strObjectsElements As String

ReDim strArrayNames(1 To (C_COLS_ELEMENTLIST + 1)) As String
ReDim strArrayLinks(1 To (C_COLS_ELEMENTLIST + 1)) As String
ReDim strArray(1 To (C_COLS_PICTURELIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_PICTURELIST) As DynPicture
ReDim obArrObjectsElements(1 To C_COLS_ELEMENTLIST) As Element
ReDim strArrUsableDynProperties(1 To C_COLS_PICTURELIST) As String
nCurArrDim = 1
nCurArrDimElements = 1

LogMessage "Collecting Screen information.."

'Objects for Picture-Properties
    'Which DynProperties are Objects?
        strObjects = "|BackgroundColor||EndFunction||StartFunction||PicActivVar|"
    'Which DynProperties need to be linked to Functions in HTML?
        strHrefLinksFunctions = "|EndFunction||StartFunction|"
    'Which DynProperties need to be linked to Variables in HTML?
        strHrefLinksVariables = "|PicActivVar|"
    'Which DynProperties are Color-Objects?
        strColorObjects = "|BackgroundColor|"

'Objects for Picture-Element-Properties
    'Which DynProperties are Objects?
        strObjectsElements = "|BackColor||TextColor||LineColor||KnobColor||LegendColor||MainTickColor||MaxColor||MinColor|" & _
            "|PointerColor||SmallTickColor||TitleColor||ValueColor||BlinkBackColor||BlinkingBackColor||ButtonFillColor|" & _
            "|Function||BackColorVariable||LineColorVariable||TwistVariable||VisibilityVariable||XVariable||XZoomVariable|" & _
            "|YVariable||YZoomVariable||SetValueDynMax||SetValueDynMin||TwistVariable||Variable||DynMaxVar||DynMinVar|" & _
            "|AnimateVar||Variable_Anfang1||Variable_Anfang2||Variable_Norm||Variable_SS_1_1||Variable_SS_1_2|" & _
            "|Variable_SS_1_3||Variable_SS_1_4||Variable_SS_2_1||Variable_SS_2_2||Variable_SS_2_3||Variable_SS_2_4||Name||Type|"
    'Which DynProperties are Color-Objects?
        strColorObjectsElements = "|BackColor||TextColor||LineColor||KnobColor||LegendColor||MainTickColor||MaxColor||MinColor|" & _
            "|PointerColor||SmallTickColor||TitleColor||ValueColor||BlinkBackColor||BlinkingBackColor||ButtonFillColor|"
    'Which DynProperties need to be linked to Functions in HTML?
        strHrefLinksFunctionsElements = "|Function|"
    'Which DynProperties need to be linked to Variables in HTML?
        strHrefLinksVariablesElements = "|BackColorVariable||LineColorVariable||TwistVariable||VisibilityVariable||XVariable|" & _
            "|XZoomVariable||YVariable||YZoomVariable||SetValueDynMax||SetValueDynMin||TwistVariable||Variable|" & _
            "|DynMaxVar||DynMinVar||AnimateVar||Variable_Anfang1||Variable_Anfang2||Variable_Norm||Variable_SS_1_1|" & _
            "|Variable_SS_1_2||Variable_SS_1_3||Variable_SS_1_4||Variable_SS_2_1||Variable_SS_2_2||Variable_SS_2_3|" & _
            "|Variable_SS_2_4|"

'Initialize PictureProperties for Translation
Dim astrProps_Pictures(1 To 16, 1 To 2)
    astrProps_Pictures(1, 1) = "Alignment"
    astrProps_Pictures(1, 2) = "BackgroundPicStyle"
    astrProps_Pictures(2, 1) = "Background color"
    astrProps_Pictures(2, 2) = "BackgroundColor"
    astrProps_Pictures(3, 1) = "Border style"
    astrProps_Pictures(3, 2) = "BorderStyle"
    astrProps_Pictures(4, 1) = "Display title"
    astrProps_Pictures(4, 2) = "ShowTitle"
    astrProps_Pictures(5, 1) = "End function"
    astrProps_Pictures(5, 2) = "EndFunction"
    astrProps_Pictures(6, 1) = "Height [pixels]"
    astrProps_Pictures(6, 2) = "Height"
    astrProps_Pictures(7, 1) = "Modal dialog"
    astrProps_Pictures(7, 2) = "Modal"
    astrProps_Pictures(8, 1) = "Name"
    astrProps_Pictures(8, 2) = "Title"
    astrProps_Pictures(9, 1) = "Picture"
    astrProps_Pictures(9, 2) = "BackgroundPic"
    astrProps_Pictures(10, 1) = "Screen active variable"
    astrProps_Pictures(10, 2) = "PicActivVar"
    astrProps_Pictures(11, 1) = "Screen type"
    astrProps_Pictures(11, 2) = "Type"
    astrProps_Pictures(12, 1) = "Size from Frame"
    astrProps_Pictures(12, 2) = "SizeFromTemplate"
    astrProps_Pictures(13, 1) = "Start function"
    astrProps_Pictures(13, 2) = "StartFunction"
    astrProps_Pictures(14, 1) = "Frame"
    astrProps_Pictures(14, 2) = "Template"
    astrProps_Pictures(15, 1) = "Visible under CE"
    astrProps_Pictures(15, 2) = "ShowInCE"
    astrProps_Pictures(16, 1) = "Width [pixels]"
    astrProps_Pictures(16, 2) = "Width"

'Get the Selected Picture-Properties from Control
    'Count selected entries
        For i = 0 To LstBox_PictureProperties.ListCount - 1
            If (LstBox_PictureProperties.Selected(i)) Then
                nSelectedCountPicture = nSelectedCountPicture + 1
            End If
        Next
    If (nSelectedCountPicture > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCountPicture, 1 To 2)
            j = 1
            For i = 0 To LstBox_PictureProperties.ListCount - 1
                If (LstBox_PictureProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_PictureProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Pictures)
                            If (astrProps_Pictures(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Pictures(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Get and translate the selected Element-Properties from Control
    Call CollectPictureInformationInitElementProperties

'Create Picturefolders
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_PICTURES)) Then
        LogMessage ("Error while creating Screens-Folder!")
    End If
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_PICTURES_DETAILS)) Then
        LogMessage ("Error while creating Screendetails-Folder!")
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    Set XMLMainDoc = curXMLDoc
    Set XMLMainItem = curXMLItem
    
'Document-Title
    Call AddHTMLTitle(XMLMainDoc, XMLMainItem, 2, 1, "header", nCounterChapters & ". " & "SCREENS", "SCREENS", "name")

'Sub-Title
    Call AddHTMLTitle(XMLMainDoc, XMLMainItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Screens List", "Screens List", "name")

On Error GoTo Err_Picture
    If (Not ObProject Is Nothing) Then
        'Does this Picture have Elements?
            If (ObProject.DynPictures.Count > 0) Then
                For nPictureIndex = 0 To ObProject.DynPictures.Count - 1
                'Loop through Pictures
                    Set obPicture = ObProject.DynPictures.Item(nPictureIndex)
                    If (Not obPicture Is Nothing) Then
                        'Save Object in Array
                            Set obArrObjects(nCurArrDim) = obPicture
                        If (nCurArrDim = C_COLS_PICTURELIST Or nPictureIndex = ObProject.DynPictures.Count - 1) Then
                            'Do we need more columns than we have data for?
                                If (nCurArrDim < C_COLS_PICTURELIST) Then
                                    For i = nCurArrDim + 1 To C_COLS_PICTURELIST
                                        Set obArrObjects(i) = Nothing
                                    Next
                                End If
    
                            'Start Table
                                Set Table = Nothing
                                Set Table = AddHTMLTableStart(XMLMainDoc, XMLMainItem)
                                'Fill Array - Header Row
                                    strArray(1, 1) = "Name"
                                    strArray(1, 2) = ""
                                    strArray(1, 3) = ""
                            
                            'Get Information from objects
                                'Loop Array
                                    For i = 1 To C_COLS_PICTURELIST
                                        If (obArrObjects(i) Is Nothing) Then
                                            'Filler needed = Empty Column
                                                strArray(i + 1, 1) = ""
                                                strArray(i + 1, 2) = ""
                                                strArray(i + 1, 3) = ""
                                        Else
                                            'Information for Column
                                                'Headers need to be linked directly to the Details if there are any Details
                                                    If (ChkBox_InclHardcopy) Then
                                                        strArray(i + 1, 1) = obArrObjects(i).Name
                                                        strArray(i + 1, 2) = "href"
                                                        strArray(i + 1, 3) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obArrObjects(i).Name & ".html"
                                                    Else
                                                        strArray(i + 1, 1) = obArrObjects(i).Name
                                                        strArray(i + 1, 2) = "name"
                                                        strArray(i + 1, 3) = "Screen[Entry-Name='" & obArrObjects(i).Name & "']"
                                                    End If
                                            'Usable Dynproperties for this object
                                                strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                        End If
                                    Next
                                'Write 1st Row
                                    Call AddHTMLTableRow(XMLMainDoc, Table, strArray, C_COLS_PICTURELIST + 1, 0)
                            'Get Properties from objects
                                'Loop Wanted Properties
                                    For i = 1 To UBound(strArrWantedProperties)
                                        'Get Property
                                            strTEMP = strArrWantedProperties(i, 2)
                                        'Row - 1st Column
                                            strArray(1, 1) = strArrWantedProperties(i, 1)
                                            strArray(1, 2) = ""
                                            strArray(1, 3) = ""
                                        'Loop Array
                                            For j = 1 To C_COLS_PICTURELIST
                                                'Row - following Columns
                                                    If (obArrObjects(j) Is Nothing) Then
                                                        'Filler needed = Empty Column
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                    Else
                                                        'Is the current Property available in this object?
                                                            If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                                'Is DynProperty an Object?
                                                                    If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                                                        'Does it have to be linked to a Function?
                                                                            If (InStr(1, strHrefLinksFunctions, "|" & strTEMP & "|") > 0) Then
                                                                                On Error GoTo Err_SetObject
                                                                                    Set obFunctionLink = obArrObjects(j).DynProperties(strTEMP)
                                                                                On Error GoTo Err_Picture
                                                                                If (Not obFunctionLink Is Nothing) Then
                                                                                    strArray(j + 1, 1) = obFunctionLink.Name
                                                                                    If (ChkBox_Functions) Then
                                                                                        strArray(j + 1, 2) = "href"
                                                                                        strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                                    Else
                                                                                        strArray(j + 1, 2) = ""
                                                                                        strArray(j + 1, 3) = ""
                                                                                    End If
                                                                                    Set obFunctionLink = Nothing
                                                                                Else
                                                                                    strArray(j + 1, 1) = ""
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                                End If
                                                                            End If
                                                                        'Does it have to be linked to a Variable?
                                                                            If (InStr(1, strHrefLinksVariables, "|" & strTEMP & "|") > 0) Then
                                                                                On Error GoTo Err_SetObject
                                                                                    Set obVariableLink = obArrObjects(j).DynProperties(strTEMP)
                                                                                On Error GoTo Err_Picture
                                                                                If (Not obVariableLink Is Nothing) Then
                                                                                    strArray(j + 1, 1) = obVariableLink.Name
                                                                                    If (ChkBox_Variables) Then
                                                                                        strArray(j + 1, 2) = "href"
                                                                                        strArray(j + 1, 3) = "..\" & GetLinkForVariable(obVariableLink.Name)
                                                                                    Else
                                                                                        strArray(j + 1, 2) = ""
                                                                                        strArray(j + 1, 3) = ""
                                                                                    End If
                                                                                    Set obVariableLink = Nothing
                                                                                Else
                                                                                    strArray(j + 1, 1) = ""
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                                End If
                                                                            End If
                                                                        'Is it a Color-Object?
                                                                            If (InStr(1, strColorObjects, "|" & strTEMP & "|", 1) > 0) Then
                                                                                'Converting the Color-Objects Output to HEX and adding it to XML
                                                                                    strArray(j + 1, 1) = ColorToHex(obArrObjects(j).DynProperties(strTEMP))
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                            End If
                                                                    Else
                                                                        'Other Handling
                                                                            If (strTEMP = "Type") Then
                                                                                'Converting Type-Number to understable Text and adding it to XML
                                                                                    strArray(j + 1, 1) = astrPictureTypes(obArrObjects(j).DynProperties(strTEMP))
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                            Else
                                                                                'Default-Handling if Property is available
                                                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                                    strArray(j + 1, 2) = ""
                                                                                    strArray(j + 1, 3) = ""
                                                                            End If
                                                                    End If
                                                            Else
                                                                'Handling if Property is not available
                                                                    strArray(j + 1, 1) = ""
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                            End If
                                                    End If
                                            Next
                                        'Write Row
                                            Call AddHTMLTableRow(XMLMainDoc, Table, strArray, C_COLS_PICTURELIST + 1, i)
                                    Next
                            'Reset Counter and Array
                                nCurArrDim = 0
                                ReDim strArray(1 To C_COLS_PICTURELIST + 1, 1 To 3) As String
                                ReDim obArrObjects(1 To C_COLS_PICTURELIST) As DynPicture
                        End If
                    'Create Hardcopies and Picture-Elements
                        If (ChkBox_InclHardcopy) Then
                            nCurArrDimElements = 1
                            'Create XML-Document for the current Picture-Details
                                Call CreateDOMDoc(2)
                            'Document-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "subsubheader", obPicture.Name, obPicture.Name, "name")
                            'Add Image-Screenshot
                                'Generate a BMP file from the current slide.
                                    strHardcopyFileName = obPicture.Name & ".bmp"
                                    Call obPicture.Hardcopy(PR_strDestination & "\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & strHardcopyFileName, tpBMP)
                                'Add in XML
                                    Call AddImageItem(strHardcopyFileName, curXMLItem, obPicture.Height, obPicture.Width)
                            'Tree-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "subsubheader", obPicture.Name & " - Elements", obPicture.Name & " - Elements", "name")
                            'Base for Element-Tree
                                Set StartPointForElementTree = AddBaseForHTMLTree(curXMLDoc, curXMLItem)
                            'Details-Title
                                Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "subsubheader", obPicture.Name & " - Element Details", obPicture.Name & " - Element Details", "name")
                            'Loop through Picture-Elements
                                For nPropertyIndexElement = 0 To obPicture.Elements.Count - 1
                                    Set obPicture_Element = obPicture.Elements.Item(nPropertyIndexElement)
                                    Call CollectPictureInformationAnalyzeElement(obPicture_Element, obPicture, StartPointForElementTree, strArrayNames, strArrayLinks, nCurArrDimElements, obArrObjectsElements)
                                    'Free Memory
                                        Set obPicture_Element = Nothing
                                Next
                            'Filler needed for Last Table?
                                If (nCurArrDimElements > 1) Then
                                    'Fill up Object-Array
                                        For i = (nCurArrDimElements + 1) To UBound(obArrObjectsElements)
                                            obArrObjectsElements(i) = Nothing
                                            strArrayNames(i) = ""
                                        Next
                                    'Create HTML-Table
                                        Call CollectPictureElementsCreateHTMLTable(curXMLItem, obArrObjectsElements(), nCurArrDimElements, strArrayNames, strArrayLinks, strObjectsElements, strHrefLinksFunctionsElements, strHrefLinksVariablesElements, strColorObjectsElements)
                                End If
                            'Write PictureDetails-File
                                If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFOLDER_PICTURES_DETAILS & "\" & obPicture.Name & ".html")) Then
                                    LogMessage ("Error while Saving Details-Output for Screen " & obPicture.Name & "!")
                                    'Free Memory
                                        Set curXMLDoc = Nothing
                                End If
                        End If
                        'Add to counter
                            nCurArrDim = nCurArrDim + 1
                        'Reset data
                            Set obPicture = Nothing
                    End If
                    'Free Memory
                        Set curXMLDoc = Nothing
                        Set curXMLItem = Nothing
                        Set Table = Nothing
                        Set obPicture = Nothing
                        Set StartPointForElementTree = Nothing
                Next
            End If
    Else
        GoTo Err_Picture
    End If

'Write Main Picturelisting Files
    If Not (SaveXMLFileAsHTML(XMLMainDoc, C_PATHFILE_PICTURES)) Then
        LogMessage ("Error while Saving Frames-Output!")
        'Free Memory
            Set XMLMainDoc = Nothing
    End If
    
'Free Memory
    Set obPicture = Nothing
    Set obPicture_Element = Nothing
    Set obFunctionLink = Nothing
    Set obVariableLink = Nothing
    Set XMLMainDoc = Nothing
    Set XMLMainItem = Nothing
    Set StartPointForElementTree = Nothing
    Set Table = Nothing
    ReDim strArrWantedProperties(0 To 0) As String
    ReDim strArray(0 To 0) As String
    ReDim strArrUsableDynProperties(0 To 0) As String
    ReDim strArrayNames(0 To 0) As String
    ReDim strArrayLinks(0 To 0) As String
    ReDim obArrObjects(0 To 0) As DynPicture
    ReDim obArrObjectsElements(0 To 0) As Element

ModifyLastLogMessage ("..Done")
Exit Sub
Err_Picture:
    LogMessage ("Error while retrieving information from Screen:#" & Trim(Str(nPictureIndex)))
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Private Function CollectPictureInformationAnalyzeElement(ByRef obPicture_Element As Element, ByRef obPicture As DynPicture, ByRef XMLStartPointForElementTree As MSXML2.IXMLDOMElement, ByRef strArrayNames() As String, ByRef strArrayLinks() As String, ByRef nCurArrDimElements As Integer, ByRef obArrObjectsElements() As Element)

Dim i As Integer
Dim nSymbolIndexElement As Integer
Dim nSymbolElementsCount As Integer
Dim obPicture_Element_local As Element
Dim strTempName As String
Dim strTempType As String
Dim strTempName_link As String
Dim strTempInfo As String
Dim XSLStartPointForElementTree_local As MSXML2.IXMLDOMElement
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim strObjects As String
Dim strColorObjects As String
Dim strArrayTree() As String

Set obPicture_Element_local = obPicture_Element
Set XSLStartPointForElementTree_local = XMLStartPointForElementTree

'Which DynProperties are Objects?
    strObjects = "|BackColor||TextColor||LineColor||KnobColor||LegendColor||MainTickColor||MaxColor||MinColor|" & _
        "|PointerColor||SmallTickColor||TitleColor||ValueColor||BlinkBackColor||BlinkingBackColor||ButtonFillColor|" & _
        "|Function||BackColorVariable||LineColorVariable||TwistVariable||VisibilityVariable||XVariable||XZoomVariable|" & _
        "|YVariable||YZoomVariable||SetValueDynMax||SetValueDynMin||TwistVariable||Variable||DynMaxVar||DynMinVar|" & _
        "|AnimateVar||Variable_Anfang1||Variable_Anfang2||Variable_Norm||Variable_SS_1_1||Variable_SS_1_2|" & _
        "|Variable_SS_1_3||Variable_SS_1_4||Variable_SS_2_1||Variable_SS_2_2||Variable_SS_2_3||Variable_SS_2_4||Name||Type|"
'Which DynProperties are Color-Objects?
    strColorObjects = "|BackColor||TextColor||LineColor||KnobColor||LegendColor||MainTickColor||MaxColor||MinColor|" & _
        "|PointerColor||SmallTickColor||TitleColor||ValueColor||BlinkBackColor||BlinkingBackColor||ButtonFillColor|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|BackColorVariable||LineColorVariable||TwistVariable||VisibilityVariable||XVariable|" & _
        "|XZoomVariable||YVariable||YZoomVariable||SetValueDynMax||SetValueDynMin||TwistVariable||Variable|" & _
        "|DynMaxVar||DynMinVar||AnimateVar||Variable_Anfang1||Variable_Anfang2||Variable_Norm||Variable_SS_1_1|" & _
        "|Variable_SS_1_2||Variable_SS_1_3||Variable_SS_1_4||Variable_SS_2_1||Variable_SS_2_2||Variable_SS_2_3|" & _
        "|Variable_SS_2_4|"

On Error GoTo Err_CollectPictureInformationAnalyzeElement
    If (Not obPicture_Element_local Is Nothing) Then
        'Build String as a replacement for Elements with no name. The Second string is important for linking these Elements
            strTempName = obPicture_Element_local.Name
            strTempName_link = obPicture_Element_local.Name
            If (strTempName = "") Then
                strTempName = "<Empty>"
                strTempName_link = "Position: " & obPicture_Element_local.DynProperties("StartX") & ";" & obPicture_Element_local.DynProperties("StartY") & ";" & obPicture_Element_local.DynProperties("EndX") & ";" & obPicture_Element_local.DynProperties("EndY") & ";"
            End If
        strTempInfo = "Position: " & obPicture_Element_local.DynProperties("StartX") & ";" & obPicture_Element_local.DynProperties("StartY") & ";" & obPicture_Element_local.DynProperties("EndX") & ";" & obPicture_Element_local.DynProperties("EndY") & ";"
        'Is Element a Symbol?
            If (obPicture_Element_local.SymbolNo < 65534) Then
                'Loop through SubItems
                    On Error GoTo Err_CollectPictureInformationAnalyzeElementCountElements
                    nSymbolElementsCount = obPicture_Element_local.Elements.Count
                    On Error GoTo Err_CollectPictureInformationAnalyzeElement
                    If (nSymbolElementsCount > 0) Then
                        'Tree-Entry
                            'Icon for HTML-Output
                                strTempType = astrElementTypes(obPicture_Element_local.Type, 2)
                                If (strTempType = "") Then
                                    strTempType = "default.gif"
                                End If
                            'Entry-Data
                                ReDim strArrayTree(1 To 10) As String
                                strArrayTree(1) = strTempName
                                strArrayTree(2) = "#" & strTempName_link
                                strArrayTree(3) = "href"
                                strArrayTree(4) = BuildPathToSystemFolder(2) & "\" & strTempType
                                strArrayTree(7) = strTempInfo
                            'Add StartPoint for Tree-Entry
                                Set XSLStartPointForElementTree_local = AddSpanForHTML(curXMLDoc, XMLStartPointForElementTree, "branch")
                            'Write-Entry
                                Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForElementTree_local)
                        'Save Items in Arrays
                            Set obArrObjectsElements(nCurArrDimElements) = obPicture_Element_local
                            strArrayNames(nCurArrDimElements) = strTempName
                            strArrayLinks(nCurArrDimElements) = strTempName_link
                        'Are there enough objects in the array to write a table?
                            If (nCurArrDimElements = C_COLS_ELEMENTLIST) Then
                                'Create HTML Table
                                    Call CollectPictureElementsCreateHTMLTable(curXMLItem, obArrObjectsElements, nCurArrDimElements, strArrayNames, strArrayLinks, strObjects, strHrefLinksFunctions, strHrefLinksVariables, strColorObjects)
                            End If
                            'Add to counter
                                nCurArrDimElements = nCurArrDimElements + 1
                        For nSymbolIndexElement = 0 To obPicture_Element_local.Elements.Count - 1
                            Call CollectPictureInformationAnalyzeElement(obPicture_Element_local.Elements.Item(nSymbolIndexElement), obPicture, XSLStartPointForElementTree_local, strArrayNames, strArrayLinks, nCurArrDimElements, obArrObjectsElements)
                        Next
                    Else
                        'Tree-Entry
                            'Icon for HTML-Output
                                strTempType = astrElementTypes(obPicture_Element_local.Type, 2)
                                If (strTempType = "") Then
                                    strTempType = "default.gif"
                                End If
                            'Entry-Data
                                ReDim strArrayTree(1 To 10) As String
                                strArrayTree(1) = strTempName
                                strArrayTree(2) = "#" & strTempName_link
                                strArrayTree(3) = "href"
                                strArrayTree(4) = BuildPathToSystemFolder(2) & "\" & strTempType
                                strArrayTree(7) = strTempInfo
                            'Add StartPoint for Tree-Entry
                                Set XSLStartPointForElementTree_local = AddSpanForHTML(curXMLDoc, XMLStartPointForElementTree, "branch")
                            'Write-Entry
                                Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForElementTree_local)
                        'Save Items in Arrays
                            Set obArrObjectsElements(nCurArrDimElements) = obPicture_Element_local
                            strArrayNames(nCurArrDimElements) = strTempName
                            strArrayLinks(nCurArrDimElements) = strTempName_link
                        'Are there enough objects in the array to write a table?
                            If (nCurArrDimElements = C_COLS_ELEMENTLIST) Then
                                'Create HTML Table
                                    Call CollectPictureElementsCreateHTMLTable(curXMLItem, obArrObjectsElements, nCurArrDimElements, strArrayNames, strArrayLinks, strObjects, strHrefLinksFunctions, strHrefLinksVariables, strColorObjects)
                            End If
                            'Add to counter
                                nCurArrDimElements = nCurArrDimElements + 1
                    End If
            Else
                'Tree-Entry
                    'Icon for HTML-Output
                        strTempType = astrElementTypes(obPicture_Element_local.Type, 2)
                        If (strTempType = "") Then
                            strTempType = "default.gif"
                        End If
                    'Entry-Data
                        ReDim strArrayTree(1 To 10) As String
                        strArrayTree(1) = strTempName
                        strArrayTree(2) = "#" & strTempName_link
                        strArrayTree(3) = "href"
                        strArrayTree(4) = BuildPathToSystemFolder(2) & "\" & strTempType
                        strArrayTree(7) = strTempInfo
                    'Add StartPoint for Tree-Entry
                        Set XSLStartPointForElementTree_local = AddSpanForHTML(curXMLDoc, XMLStartPointForElementTree, "branch")
                    'Write-Entry
                        Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForElementTree_local)
                'Save Items in Arrays
                    Set obArrObjectsElements(nCurArrDimElements) = obPicture_Element_local
                    strArrayNames(nCurArrDimElements) = strTempName
                    strArrayLinks(nCurArrDimElements) = strTempName_link
                'Are there enough objects in the array to write a table?
                    If (nCurArrDimElements = C_COLS_ELEMENTLIST) Then
                        'Create HTML Table
                            Call CollectPictureElementsCreateHTMLTable(curXMLItem, obArrObjectsElements, nCurArrDimElements, strArrayNames, strArrayLinks, strObjects, strHrefLinksFunctions, strHrefLinksVariables, strColorObjects)
                    End If
                    'Add to counter
                        nCurArrDimElements = nCurArrDimElements + 1
            End If
    End If

'Free Memory
    Set obPicture_Element_local = Nothing
    Set obFunctionLink = Nothing
    Set obVariableLink = Nothing
    Set XSLStartPointForElementTree_local = Nothing
    ReDim strArrayTree(0 To 0) As String
    strObjects = ""
    strColorObjects = ""
    strHrefLinksFunctions = ""
    strHrefLinksVariables = ""

Exit Function
Err_CollectPictureInformationAnalyzeElementCountElements:
    'Resume Next
Err_CollectPictureInformationAnalyzeElement:
    'Resume Next
Err_SetObject:
    'Resume Next
End Function
Function CollectPictureElementsCreateHTMLTable(ByRef XMLStartPoint As MSXML2.IXMLDOMElement, ByRef obArrObjects() As Element, ByRef nCurArrDim As Integer, ByRef strArrayNames() As String, ByRef strArrayLinks() As String, ByRef strObjects As String, ByRef strHrefLinksFunctions As String, ByRef strHrefLinksVariables As String, ByRef strColorObjects As String)

Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim strArrUsableDynProperties() As String
ReDim strArrUsableDynProperties(1 To C_COLS_ELEMENTLIST) As String
ReDim strArray(1 To (C_COLS_ELEMENTLIST + 1), 1 To 3) As String
Dim i As Integer
Dim j As Integer
Dim strTEMP As String
Dim obFunctionLink As RtFunction
Dim obVariableLink As Variable

On Error GoTo ErrHandler
    'Start Table
        Set Table = Nothing
        Set Table = AddHTMLTableStart(curXMLDoc, XMLStartPoint)
    '1st Row
        strArray(1, 1) = "Name"
        strArray(1, 2) = ""
        strArray(1, 3) = ""
        'Loop Array
            For i = 1 To C_COLS_ELEMENTLIST
                If (obArrObjects(i) Is Nothing) Then
                    'Filler needed = Empty Column
                        strArray(i + 1, 1) = ""
                        strArray(i + 1, 2) = ""
                        strArray(i + 1, 3) = ""
                Else
                    'Information for Column
                        strArray(i + 1, 1) = strArrayNames(i)
                        strArray(i + 1, 2) = "name"
                        strArray(i + 1, 3) = strArrayLinks(i)
                        Dim VARITEMP As Variant
                    'Usable Dynproperties for this object
                        strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                        '"Type" is always available
                            strArrUsableDynProperties(i) = strArrUsableDynProperties(i) & "|Type|"
                        ReDim strArrUsableDynProperties(0 To 0) As String
                End If
            Next
    'Write 1st Row
        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ELEMENTLIST + 1, 0)
    'Get Properties from objects
        'Loop Wanted Properties
            For i = 1 To UBound(strArrWantedPropertiesElements)
                'Get Property
                    strTEMP = strArrWantedPropertiesElements(i, 2)
                'Row - 1st Column
                    strArray(1, 1) = strArrWantedPropertiesElements(i, 1)
                    strArray(1, 2) = ""
                    strArray(1, 3) = ""
                'Loop Array
                    For j = 1 To C_COLS_ELEMENTLIST
                        'Row - following Columns
                            If (obArrObjects(j) Is Nothing) Then
                                'Filler needed = Empty Column
                                    strArray(j + 1, 1) = ""
                                    strArray(j + 1, 2) = ""
                                    strArray(j + 1, 3) = ""
                            Else
                                If (obArrObjects(j) Is Nothing) Then
                                    'Filler needed = Empty Column
                                        strArray(j + 1, 1) = ""
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                Else
                                    'Is the current Property available in this object?
                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                            'Which DynProperties are Objects?
                                                If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                                    'Which DynProperties need to be linked to Functions in HTML?
                                                        If (InStr(1, strHrefLinksFunctions, "|" & strTEMP & "|") > 0) Then
                                                            On Error GoTo Err_SetObject
                                                                Set obFunctionLink = obArrObjects(j).DynProperties(strTEMP)
                                                            On Error GoTo ErrHandler
                                                            If (Not obFunctionLink Is Nothing) Then
                                                                strArray(j + 1, 1) = obFunctionLink.Name
                                                                If (ChkBox_Functions) Then
                                                                    strArray(j + 1, 2) = "href"
                                                                    strArray(j + 1, 3) = "..\..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                Else
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                                End If
                                                                Set obFunctionLink = Nothing
                                                            Else
                                                                strArray(j + 1, 1) = ""
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            End If
                                                        End If
                                                    'Which DynProperties need to be linked to Variables in HTML?
                                                        If (InStr(1, strHrefLinksVariables, "|" & strTEMP & "|") > 0) Then
                                                            On Error GoTo Err_SetObject
                                                                Set obVariableLink = obArrObjects(j).DynProperties(strTEMP)
                                                            On Error GoTo ErrHandler
                                                            If (Not obVariableLink Is Nothing) Then
                                                                strArray(j + 1, 1) = obVariableLink.Name
                                                                If (ChkBox_Variables) Then
                                                                    strArray(j + 1, 2) = "href"
                                                                    strArray(j + 1, 3) = "..\..\" & GetLinkForVariable(obVariableLink.Name)
                                                                Else
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                                End If
                                                                Set obVariableLink = Nothing
                                                            Else
                                                                strArray(j + 1, 1) = ""
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            End If
                                                        End If
                                                    'Is it a Color-Object?
                                                        If (InStr(1, strColorObjects, "|" & strTEMP & "|") > 0) Then
                                                            'Converting the Color-Objects Output to HEX and adding it to XML
                                                                strArray(j + 1, 1) = ColorToHex(obArrObjects(j).DynProperties(strTEMP))
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                        End If
                                                    'The "Name"-DynProperty does not always contain a Value
                                                        If (strTEMP = "Name") Then
                                                            If (obArrObjects(j).DynProperties(strTEMP) = "") Then
                                                                strArray(j + 1, 1) = strTEMP
                                                            Else
                                                                strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                            End If
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        End If
                                                    'The "Type"-DynProperty needs to be converted into readable Text
                                                        If (strTEMP = "Type") Then
                                                            strArray(j + 1, 1) = astrElementTypes(obArrObjects(j).Type, 1)
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        End If
                                                Else
                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                    strArray(j + 1, 2) = ""
                                                    strArray(j + 1, 3) = ""
                                                End If
                                        Else
                                            strArray(j + 1, 1) = ""
                                            strArray(j + 1, 2) = ""
                                            strArray(j + 1, 3) = ""
                                        End If
                                End If
                            End If
                    Next
                'Write Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_ELEMENTLIST + 1, i)
                'Reset
                    ReDim strArray(1 To C_COLS_ELEMENTLIST + 1, 1 To 3) As String
            Next
    'Reset Counter and Array
        nCurArrDim = 0
        ReDim strArray(1 To C_COLS_ELEMENTLIST + 1, 1 To 3) As String
        ReDim obArrObjects(1 To C_COLS_ELEMENTLIST) As Element
    
    'Free Memory
        Set Table = Nothing
        Set obFunctionLink = Nothing
        Set obVariableLink = Nothing
        ReDim strArrUsableDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
Err_SetObject:
    Resume Next
ErrHandler:
    Resume Next
End Function


Private Function CollectPictureTreeInformationAnalyzeFunction(ObProject As Project, XMLDoc As MSXML2.DOMDocument, obPicture As DynPicture, nCurLevel As Integer, obFunction As RtFunction, XSLPictureTreeCtrlChild As MSXML2.IXMLDOMElement)

Dim Vari As Variant
Dim vari_Script As Variant
Dim i As Integer
Dim j As Integer
Dim strCurScript As String
Dim nScriptIndex As Integer
Dim obScript As Script
Dim strCurProperty As String
Dim strPicturesSeen_Backup As String
Dim XSLPictureTreeCtrlChild_local As MSXML2.IXMLDOMElement
Dim XMLStartPointForTreeEntry As MSXML2.IXMLDOMElement

Set XSLPictureTreeCtrlChild_local = XSLPictureTreeCtrlChild

On Error GoTo Err_PictureTreeLoopFunctions

Vari = obFunction.DynPropertiesEnum("")
For i = 0 To UBound(Vari) - 1
'Looping through DynProperties for PictSwitch or Script execute
    strCurProperty = Left(Vari(i), InStr(1, Vari(i), ",") - 1)
    If (strCurProperty = "PictSwitch") Then
        'Already known Picture?
        If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then
            'Add StartPoint for Tree-Entry
                Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
            'Add StartPoint for subsequent Tree-Entrys
                Set XSLPictureTreeCtrlChild_local = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
            'Add Picture To PicturesHasChildren
                If (Not InStr(1, PR_PictureTreeHasChildren, "|" & obPicture.Name & "|") > 0) Then
                    PR_PictureTreeHasChildren = PR_PictureTreeHasChildren & "|" & obPicture.Name & "|"
                End If
            'Add Picture to FoundPictures
                If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then
                    PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obFunction.DynProperties("Picture") & "|"
                End If
            'Add Picture to Parents
                PR_PictureTreeParents = PR_PictureTreeParents & "|" & obFunction.DynProperties("Picture") & "|"
            If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Analyze Picture in this Function
                    Call CollectPictureTreeInformationAnalyzePicture(ObProject, XMLDoc, ObProject.DynPictures.Item(obFunction.DynProperties("Picture")), nCurLevel, XSLPictureTreeCtrlChild_local)
                'Add Picture to Parents
                    PR_PictureTreeParents = Replace(PR_PictureTreeParents, "|" & obFunction.DynProperties("Picture") & "|", "")
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = obFunction.DynProperties("Picture")
                    strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obFunction.DynProperties("Picture") & ".html"
                    strArrayTree(3) = "href"
                    'Is this Picture a Parent and therefore a step back in the Tree?
                        If (InStr(1, PR_PictureTreeParents, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then 'PR_PictureTreeHasChildren
                            strArrayTree(4) = C_PICTURETREE_STEPBACK
                            strArrayTree(8) = ""
                        ElseIf (InStr(1, PR_PictureTreeHasChildren, obFunction.DynProperties("Picture"))) Then
                            'Does this Picture have Children?
                                strArrayTree(4) = C_PICTURETREE_FOLDER
                                strArrayTree(8) = "bold"
                        Else
                            strArrayTree(4) = C_PICTURETREE_DEFAULT
                            strArrayTree(8) = "bold"
                        End If
                    strArrayTree(5) = "Fkt: " & obFunction.Name
                    strArrayTree(6) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    strArrayTree(7) = " - Param: " & obFunction.ParamString
                    strArrayTree(9) = "Italic"
                    strArrayTree(10) = "Italic"
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
            End If
        Else
            If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Add StartPoint for Tree-Entry
                    Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Add StartPoint for subsequent Tree-Entrys
                    Set XSLPictureTreeCtrlChild_local = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = obFunction.DynProperties("Picture")
                    strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obFunction.DynProperties("Picture") & ".html"
                    strArrayTree(3) = "href"
                    'Is this Picture a Parent and therefore a step back in the Tree?
                        If (InStr(1, PR_PictureTreeParents, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then 'PR_PictureTreeHasChildren
                            strArrayTree(4) = C_PICTURETREE_STEPBACK
                            strArrayTree(8) = ""
                        Else
                            strArrayTree(4) = C_PICTURETREE_DEFAULT
                            strArrayTree(8) = "bold"
                        End If
                    strArrayTree(5) = "Fkt: " & obFunction.Name
                    strArrayTree(6) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    strArrayTree(7) = " - Param: " & obFunction.ParamString
                    strArrayTree(8) = "bold"
                    strArrayTree(9) = "Italic"
                    strArrayTree(10) = "Italic"
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
                'Add Picture To PicturesHasChildren
                    If (Not InStr(1, PR_PictureTreeHasChildren, "|" & obPicture.Name & "|") > 0) Then
                        PR_PictureTreeHasChildren = PR_PictureTreeHasChildren & "|" & obPicture.Name & "|"
                    End If
                'Add Picture to FoundPictures
                    If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then
                        PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obFunction.DynProperties("Picture") & "|"
                    End If
            End If
        End If
        Exit For
    End If
    If (strCurProperty = "Script") Then
    ' Get Script-Object
        Set obScript = GetobScriptFromName(ObProject, obFunction.DynProperties("Script"))
        strCurScript = obScript.Name
    ' Loop Scripts-Rows/Functions in Script
        For nScriptIndex = 0 To obScript.Count - 1
            Set obFunction = obScript.Item(nScriptIndex)
            If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Analyze Function in this Script
                    Call CollectPictureTreeInformationAnalyzeFunction(ObProject, XMLDoc, obPicture, nCurLevel, obScript.Item(nScriptIndex), XSLPictureTreeCtrlChild_local)
            End If
        Next
    End If
Next

'Free Memory
    Set Vari = Nothing
    Set vari_Script = Nothing
    Set obScript = Nothing
    Set XSLPictureTreeCtrlChild_local = Nothing
    Set XMLStartPointForTreeEntry = Nothing

Exit Function
Err_PictureTreeLoopFunctions:
    LogMessage ("Error while retrieving information from ScreenTreeLoopAnalyzeFunction")
    Resume Next
End Function

'****************************************************************************
' Methode:      CollectPictureTreeInformationAnalyzePicture(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument, obPicture As DynPicture, nCurLevel As Integer, XMLPictureTreeGroup As MSXML2.IXMLDOMElement, XMLPictureTreeParent As MSXML2.IXMLDOMElement, strPicturesSeen As String
' Description:  Loops Pictures to gather Information for the PictureTree
'****************************************************************************

Private Function CollectPictureTreeInformationAnalyzePicture(ObProject As Project, XMLDoc As MSXML2.DOMDocument, obPicture As DynPicture, nCurLevel As Integer, XSLPictureTreeCtrlChild As MSXML2.IXMLDOMElement)

Dim obFunction As RtFunction
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim strCurProperty As String
Dim vari_Function As Variant
Dim Vari As Variant
Dim strCurProperty_Function As String
Dim obElement As Element
Dim obPicture_local As DynPicture
Dim strPicturesSeen_Backup As String
Dim XSLPictureTreeCtrlChild_local As MSXML2.IXMLDOMElement
Dim XMLStartPointForTreeEntry As MSXML2.IXMLDOMElement
 
On Error GoTo Err_PictureTreeLoop

Set obPicture_local = obPicture

Set XSLPictureTreeCtrlChild_local = XSLPictureTreeCtrlChild

' Get Function-Object
    If (obPicture.StartFunction > 0) Then
    'StartFunction used in Picture?
        Set obFunction = obPicture.DynProperties("StartFunction")
        nCurLevel = nCurLevel + 1
        If (obFunction.Parent.Parent.Name = ObProject.Name) Then
        'Still in local Project?
            If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Analyze StartFunction in this Picture
                    Call CollectPictureTreeInformationAnalyzeFunction(ObProject, XMLDoc, obPicture, nCurLevel, obFunction, XSLPictureTreeCtrlChild)
            End If
        Else
            If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Add StartPoint for Tree-Entry
                    Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Add StartPoint for subsequent Tree-Entrys
                    Set XSLPictureTreeCtrlChild_local = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = CmboBox_Pictures
                    strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & CmboBox_Pictures & ".html"
                    strArrayTree(3) = "href"
                    strArrayTree(4) = C_PICTURETREE_DEFAULT
                    strArrayTree(7) = "User-chosen Startpoint for Tree"
                    strArrayTree(8) = "bold"
                    strArrayTree(10) = "Italic"
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
                'Add Picture To PicturesHasChildren
                    If (Not InStr(1, PR_PictureTreeHasChildren, "|" & obPicture.Name & "|") > 0) Then
                        PR_PictureTreeHasChildren = PR_PictureTreeHasChildren & "|" & obPicture.Name & "|"
                    End If
                'Add Picture to FoundPictures
                    If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then
                        PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obFunction.DynProperties("Picture") & "|"
                    End If
            End If
        End If
        nCurLevel = nCurLevel - 1
    End If

'Loop through Elements in Picture
    Dim strElement As String
    Dim nSymbolElementsIndex As Integer
    
    If (obPicture.Elements.Count > 0) Then
        nCurLevel = nCurLevel + 1
        For i = 0 To obPicture.Elements.Count - 1
            Set obElement = obPicture.Elements.Item(i)
            If (Not obElement Is Nothing) Then
                'Analyze Element in Picture
                    Call CollectPictureTreeInformationAnalyzeElement(obElement, ObProject, XMLDoc, obPicture, nCurLevel, XSLPictureTreeCtrlChild)
            End If
        Next
        nCurLevel = nCurLevel - 1
    End If

'Free Memory
    Set obFunction = Nothing
    Set vari_Function = Nothing
    Set Vari = Nothing
    Set obElement = Nothing
    Set obPicture_local = Nothing
    Set XSLPictureTreeCtrlChild_local = Nothing
    Set XMLStartPointForTreeEntry = Nothing

Exit Function

Err_PictureTreeLoop:
    LogMessage ("Error while retrieving information from ScreenTreeAnalyzeScreen")
    Resume Next
End Function

Private Function CollectPictureTreeInformationAnalyzeElement(obElement As Element, ObProject As Project, XMLDoc As MSXML2.DOMDocument, obPicture As DynPicture, nCurLevel As Integer, XSLPictureTreeCtrlChild As MSXML2.IXMLDOMElement)

Dim i As Integer
Dim obElement_local As Element
Dim Vari As Variant
Dim j As Integer
Dim strCurProperty As String
Dim obFunction As RtFunction
Dim strCurFunction As String
Dim strCurProject As String
Dim nSymbolElementsIndex As Integer
Dim XSLPictureTreeCtrlChild_local As MSXML2.IXMLDOMElement
Dim XMLStartPointForTreeEntry As MSXML2.IXMLDOMElement

Set XSLPictureTreeCtrlChild_local = XSLPictureTreeCtrlChild

On Error GoTo Err_CollectPictureTreeInformationAnalyzeElement
    'Is Element a Symbol?
    If (obElement.SymbolNo < 65534) Then
        'Error Trap
            On Error GoTo Err_PictureTreeLoop_GetFunctionObject
            Set obFunction = obElement.DynProperties("Function")
            On Error GoTo Err_CollectPictureTreeInformationAnalyzeElement
        'Does this Symbol have a Function and is therefore an Element in a Symbol
        If (Not obFunction Is Nothing) Then
            strCurFunction = obFunction.Name
            strCurProject = obFunction.Parent.Parent.Name
            If (obFunction.Parent.Parent.Name = ObProject.Name) Then
            ' Still in local Project?
                If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                    'Analyze Function of this Element
                    Call CollectPictureTreeInformationAnalyzeFunction(ObProject, XMLDoc, obPicture, nCurLevel, obFunction, XSLPictureTreeCtrlChild)
                End If
            Else
                If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                'Add StartPoint for Tree-Entry
                    Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Add StartPoint for subsequent Tree-Entrys
                    Set XSLPictureTreeCtrlChild_local = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = obFunction.Parent.Parent.Name & "#" & obFunction.DynProperties("Picture")
                    strArrayTree(2) = ""
                    strArrayTree(3) = ""
                    strArrayTree(4) = C_PICTURETREE_DEFAULT
                    strArrayTree(5) = "Fkt: " & obFunction.Name
                    strArrayTree(6) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                    strArrayTree(7) = " - Param: " & obFunction.ParamString
                    strArrayTree(8) = "bold"
                    strArrayTree(9) = "Italic"
                    strArrayTree(10) = "Italic"
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
                    'Add Picture To PicturesHasChildren
                        If (Not InStr(1, PR_PictureTreeHasChildren, "|" & obPicture.Name & "|") > 0) Then
                            PR_PictureTreeHasChildren = PR_PictureTreeHasChildren & "|" & obPicture.Name & "|"
                        End If
                    'Add Picture to FoundPictures
                        If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obPicture.Name & "|") > 0) Then
                            PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obPicture.Name & "|"
                        End If
                End If
            End If
        End If
        'Error Trap
            On Error GoTo ErrPictureTreeLoop_GetElementsInSymbol
            nSymbolElementsIndex = obElement.Elements.Count
            On Error GoTo Err_CollectPictureTreeInformationAnalyzeElement
        'Does this Symbol have Elements?
        If (nSymbolElementsIndex > 0) Then
            For i = 0 To nSymbolElementsIndex - 1
                Set obElement_local = obElement.Elements.Item(i)
                If (Not obElement_local Is Nothing) Then
                    'Analyze Elements in Symbol
                        Call CollectPictureTreeInformationAnalyzeElement(obElement_local, ObProject, XMLDoc, obPicture, nCurLevel, XSLPictureTreeCtrlChild_local)
                    'Free Memory
                        Set obElement_local = Nothing
                End If
            Next
        End If
    Else
        Vari = obElement.DynPropertiesEnum("")
        For j = 0 To UBound(Vari)
        'Loop through DynProperties of the Element
            strCurProperty = Left(Vari(j), InStr(1, Vari(j), ",") - 1)
            If (strCurProperty = "Function") Then
            'Get Function-Object of Element has Property "Function"
                'Error Trap
                    On Error GoTo Err_PictureTreeLoop_GetFunctionObject
                    Set obFunction = obElement.DynProperties("Function")
                    On Error GoTo Err_CollectPictureTreeInformationAnalyzeElement
                'Does this Element have a function?
                If (Not obFunction Is Nothing) Then
                    strCurFunction = obFunction.Name
                    strCurProject = obFunction.Parent.Parent.Name
                    If (obFunction.Parent.Parent.Name = ObProject.Name) Then
                    ' Still in local Project?
                        If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                            'Analyze Function of this Element
                            Call CollectPictureTreeInformationAnalyzeFunction(ObProject, XMLDoc, obPicture, nCurLevel, obFunction, XSLPictureTreeCtrlChild)
                        End If
                    Else
                        If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                            'Add StartPoint for Tree-Entry
                                Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                            'Add StartPoint for subsequent Tree-Entrys
                                Set XSLPictureTreeCtrlChild_local = AddSpanForHTML(curXMLDoc, XSLPictureTreeCtrlChild, "branch")
                            'Tree-Entry
                                ReDim strArrayTree(1 To 10) As String
                                strArrayTree(1) = obFunction.Parent.Parent.Name & "#" & obFunction.DynProperties("Picture")
                                strArrayTree(2) = ""
                                strArrayTree(3) = ""
                                strArrayTree(4) = C_PICTURETREE_DEFAULT
                                strArrayTree(5) = "Fkt: " & obFunction.Name
                                strArrayTree(6) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                strArrayTree(7) = " - Param: " & obFunction.ParamString
                                strArrayTree(8) = "bold"
                                strArrayTree(9) = "Italic"
                                strArrayTree(10) = "Italic"
                                Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
                            'Add Picture To PicturesHasChildren
                                If (Not InStr(1, PR_PictureTreeHasChildren, "|" & obPicture.Name & "|") > 0) Then
                                    PR_PictureTreeHasChildren = PR_PictureTreeHasChildren & "|" & obPicture.Name & "|"
                                End If
                            'Add Picture to FoundPictures
                                If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & obPicture.Name & "|") > 0) Then
                                    PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obPicture.Name & "|"
                                End If
                        End If
                    End If
                    'Free Memory
                        Set obFunction = Nothing
                    Exit For
                End If
            End If
        Next
    End If

'Free Memory
    Set obElement_local = Nothing
    Set Vari = Nothing
    Set obFunction = Nothing
    Set XSLPictureTreeCtrlChild_local = Nothing
    Set XMLStartPointForTreeEntry = Nothing

Exit Function

ErrPictureTreeLoop_GetElementsInSymbol:
    Resume Next
Err_PictureTreeLoop_GetFunctionObject:
    Set obFunction = Nothing
    Resume Next
Err_CollectPictureTreeInformationAnalyzeElement:
    LogMessage ("Error while retrieving information from PictureTreeAnalyzeElement")
    Resume Next
End Function

'****************************************************************************
' Methode:      CollectPictureTreeInformation(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers Information for the PictureTree
'****************************************************************************
Private Sub CollectPictureTreeInformation(ObProject As Project, XMLDoc As MSXML2.DOMDocument)

Dim obPicture As DynPicture
Dim nScriptsIndex As Integer
Dim obScript As Script
Dim obFunction As RtFunction
Dim nScriptIndex As Integer
Dim nCurLevel As Integer
Dim i As Integer
Dim XSLPictureTreeCtrlChild As MSXML2.IXMLDOMElement
Dim Vari As Variant
Dim strCurProperty As String
Dim XMLStartPointForTree As MSXML2.IXMLDOMElement
Dim XMLStartPointForTreeEntry As MSXML2.IXMLDOMElement
Dim strArrayTree() As String

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "SCREENS", "SCREENS", "name")
    
'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Screen Tree", "Screen Tree", "name")
    
'Add Base for PictureTree
    Set XMLStartPointForTree = AddBaseForHTMLTree(curXMLDoc, curXMLItem)

LogMessage "Collecting ScreenTree information.."
On Error GoTo Err_PictureTree
    nCurLevel = 1 'Base-Level of the Tree
    If (Not ObProject Is Nothing) Then
        If (OptBtn_PictTreeviaPicture = True And Not CmboBox_Pictures = "") Then
        ' Starts with User-chosen Picture
            'Add StartPoint for Tree-Entry
                Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
            'Add StartPoint for subsequent Tree-Entrys
                Set XSLPictureTreeCtrlChild = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
            'Add Picture to Parents
                PR_PictureTreeParents = PR_PictureTreeParents & "|" & CmboBox_Pictures & "|"
            'Add Picture to FoundPictures
                PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & CmboBox_Pictures & "|"
            'Analyze User-chosen Picture
                Call CollectPictureTreeInformationAnalyzePicture(ObProject, XMLDoc, ObProject.DynPictures.Item(CmboBox_Pictures), nCurLevel, XSLPictureTreeCtrlChild)
            'Remove Picture from Parents
                PR_PictureTreeParents = Replace(PR_PictureTreeParents, "|" & CmboBox_Pictures & "|", "")
            'Tree-Entry
                ReDim strArrayTree(1 To 10) As String
                strArrayTree(1) = CmboBox_Pictures
                strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & CmboBox_Pictures & ".html"
                strArrayTree(3) = "href"
                'Does this Picture have Children?
                    If (InStr(1, PR_PictureTreeHasChildren, "|" & CmboBox_Pictures & "|") > 0) Then
                        strArrayTree(4) = C_PICTURETREE_FOLDER
                    Else
                        strArrayTree(4) = C_PICTURETREE_DEFAULT
                    End If
                strArrayTree(7) = "User-chosen Startpoint for Tree"
                strArrayTree(8) = "bold"
                strArrayTree(10) = "Italic"
                Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
        Else
            ' Starts with StartPicture
            If (Not ObProject.DynProperties("StartPictureName") = "") Then
                'Add StartPoint for Tree-Entry
                    Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
                'Add StartPoint for subsequent Tree-Entrys
                    Set XSLPictureTreeCtrlChild = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
                'Add Picture to Parents
                    PR_PictureTreeParents = PR_PictureTreeParents & "|" & ObProject.DynProperties("StartPictureName") & "|"
                'Add Picture to FoundPictures
                    PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & ObProject.DynProperties("StartPictureName") & "|"
                'Analyze StartPicture
                    Call CollectPictureTreeInformationAnalyzePicture(ObProject, XMLDoc, ObProject.DynPictures.Item(ObProject.DynProperties("StartPictureName")), nCurLevel, XSLPictureTreeCtrlChild)
                'Remove Picture from Parents
                    PR_PictureTreeParents = Replace(PR_PictureTreeParents, "|" & ObProject.DynProperties("StartPictureName") & "|", "")
                'Tree-Entry
                    ReDim strArrayTree(1 To 10) As String
                    strArrayTree(1) = ObProject.DynProperties("StartPictureName")
                    strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & ObProject.DynProperties("StartPictureName") & ".html"
                    strArrayTree(3) = "href"
                    'Does this Picture have Children?
                        If (InStr(1, PR_PictureTreeHasChildren, "|" & ObProject.DynProperties("StartPictureName") & "|") > 0) Then
                            strArrayTree(4) = C_PICTURETREE_FOLDER
                        Else
                            strArrayTree(4) = C_PICTURETREE_DEFAULT
                        End If
                    strArrayTree(7) = "StartScreen Project"
                    strArrayTree(8) = "bold"
                    strArrayTree(10) = "Italic"
                    Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
            End If
            
            'Starts with AUTOSTART-Script
            For nScriptsIndex = 0 To ObProject.Scripts.Count - 1
                Set obScript = ObProject.Scripts.Item(nScriptsIndex)
                If (obScript.Name = "AUTOSTART") Then
                ' Loop through Script-Rows/Functions
                    For nScriptIndex = 0 To obScript.Count - 1
                        Set obFunction = obScript.Item(nScriptIndex)
                        Vari = obFunction.DynPropertiesEnum("")
                        For i = 0 To UBound(Vari)
                        ' Loop through Function-Properties
                            strCurProperty = Left(Vari(i), InStr(1, Vari(i), ",") - 1)
                            If (strCurProperty = "PictSwitch") Then
                                If (InStr(1, PR_PictureTreeFoundPictures, obFunction.DynProperties("Picture")) = 0) Then
                                    'Add StartPoint for Tree-Entry
                                        Set XMLStartPointForTreeEntry = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
                                    'Add StartPoint for subsequent Tree-Entrys
                                        Set XSLPictureTreeCtrlChild = AddSpanForHTML(curXMLDoc, XMLStartPointForTree, "")
                                    'Add Picture to Parents
                                        PR_PictureTreeParents = PR_PictureTreeParents & "|" & obFunction.DynProperties("Picture") & "|"
                                    'Add Picture to FoundPictures
                                        PR_PictureTreeFoundPictures = PR_PictureTreeFoundPictures & "|" & obFunction.DynProperties("Picture") & "|"
                                    If (nCurLevel <= C_MAXLEVEL_PICTURETREE) Then
                                        Call CollectPictureTreeInformationAnalyzePicture(ObProject, XMLDoc, ObProject.DynPictures.Item(obFunction.DynProperties("Picture")), nCurLevel, XSLPictureTreeCtrlChild)
                                        'Remove Picture from Parents
                                            PR_PictureTreeParents = Replace(PR_PictureTreeParents, "|" & obFunction.DynProperties("Picture") & "|", "")
                                        'Tree-Entry
                                            ReDim strArrayTree(1 To 10) As String
                                            strArrayTree(1) = obFunction.DynProperties("Picture")
                                            strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & obFunction.DynProperties("Picture") & ".html"
                                            strArrayTree(3) = "href"
                                            'Does this Picture have Children?
                                                If (InStr(1, PR_PictureTreeHasChildren, "|" & obFunction.DynProperties("Picture") & "|") > 0) Then
                                                    strArrayTree(4) = C_PICTURETREE_FOLDER
                                                Else
                                                    strArrayTree(4) = C_PICTURETREE_DEFAULT
                                                End If
                                            strArrayTree(5) = "Fkt: " & obFunction.Name
                                            strArrayTree(6) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunction.Name & "']"
                                            strArrayTree(7) = " - Param: " & obFunction.ParamString
                                            strArrayTree(8) = "bold"
                                            strArrayTree(9) = "Italic"
                                            strArrayTree(10) = "Italic"
                                            Call AddEntryForHTMLTree(strArrayTree, curXMLDoc, XMLStartPointForTreeEntry)
                                    End If
                                End If
                                Exit For
                            End If
                        Next
                    Next
                    Exit For
                End If
            Next
        End If
    End If

'Get Pictures Not Found in the Tree
    Call CollectPicturesNotInPictureTree(ObProject, curXMLDoc, curXMLItem)

'Write Files
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_PICTURETREE)) Then
        LogMessage ("Error while Saving ScreenTree-Output!")
    End If

'Free Memory
    Set obPicture = Nothing
    Set obScript = Nothing
    Set obFunction = Nothing
    Set XSLPictureTreeCtrlChild = Nothing
    Set Vari = Nothing
    Set XMLStartPointForTree = Nothing
    Set XMLStartPointForTreeEntry = Nothing
    ReDim strArrayTree(0 To 0) As String
    
ModifyLastLogMessage ("..Done")
Exit Sub
Err_PictureTree:
    LogMessage ("Error while retrieving information from ScreenTree")
    Resume Next
End Sub

Private Function GetobScriptFromName(ObProject As Project, strName As String) As Script

Dim i As Integer
Dim obScript As Script

For i = 0 To ObProject.Scripts.Count - 1
    If (ObProject.Scripts.Item(i).Name = strName) Then
        Set obScript = ObProject.Scripts.Item(i)
        Exit For
    End If
Next

Set GetobScriptFromName = obScript

End Function


'****************************************************************************
' Methode:      CollectPicturesNotInPictureTree(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument, strPicturesSeen As String
' Description:  Gathers the Pictures not used in PictureTree
'****************************************************************************

Private Sub CollectPicturesNotInPictureTree(ObProject As Project, XMLDoc As MSXML2.DOMDocument, XMLItem As MSXML2.IXMLDOMElement)

Dim i As Integer
Dim strArrayTree() As String

For i = 0 To ObProject.DynPictures.Count - 1
    If (Not InStr(1, PR_PictureTreeFoundPictures, "|" & ObProject.DynPictures.Item(i).Name & "|") > 0) Then
        ReDim strArrayTree(1 To 10) As String
        strArrayTree(1) = ObProject.DynPictures.Item(i).Name
        strArrayTree(2) = "..\" & C_PATHFOLDER_PICTURES_DETAILS & "\" & ObProject.DynPictures.Item(i).Name & ".html"
        strArrayTree(3) = "href"
        strArrayTree(4) = C_PICTURETREE_NOTFOUNDINTREE
        strArrayTree(7) = "Not found in Tree"
        strArrayTree(8) = "bold"
        Call AddEntryForHTMLTree(strArrayTree, XMLDoc, XMLItem)
    End If
Next

'Free Memory
    ReDim strArrayTree(0 To 0) As String

End Sub

Private Function CollectProjectInformationTranslateToWizard(strText As String) As String

Dim i As Integer
Dim astrProps_Project(1 To 66, 1 To 2)
    astrProps_Project(1, 1) = "AML - Save ring buffer spont."
    astrProps_Project(1, 2) = "SaveAmlStack"
    astrProps_Project(2, 1) = "Archive entries"
    astrProps_Project(2, 2) = "ArchiveChangeToCEL"
    astrProps_Project(3, 1) = "Autom. allow changes"
    astrProps_Project(3, 2) = "ChangeLogCheckout"
    astrProps_Project(4, 1) = "Autom. function call"
    astrProps_Project(4, 2) = "FuncActive"
    astrProps_Project(5, 1) = "Autom. keyboard"
    astrProps_Project(5, 2) = "Touchscreen"
    astrProps_Project(6, 1) = "Autom. Logout"
    astrProps_Project(6, 2) = "AutoLogout"
    astrProps_Project(7, 1) = "Buffer size"
    astrProps_Project(7, 2) = "AsmBufferSize"
    astrProps_Project(8, 1) = "CEL - Save ring buffer spont."
    astrProps_Project(8, 2) = "SavelCelStack"
    astrProps_Project(9, 1) = "Change recipes"
    astrProps_Project(9, 2) = "RecipeChangeToCEL"
    astrProps_Project(10, 1) = "Comments"
    astrProps_Project(10, 2) = "SameComments"
    astrProps_Project(11, 1) = "Cursor visible"
    astrProps_Project(11, 2) = "CursorVisible"
    astrProps_Project(12, 1) = "Data directory"
    astrProps_Project(12, 2) = "AltDataPath"
    astrProps_Project(13, 1) = "Database"
    astrProps_Project(13, 2) = "AsmDns"
    astrProps_Project(14, 1) = "Deleting users"
    astrProps_Project(14, 2) = "DelUser"
    astrProps_Project(15, 1) = "Detailing level"
    astrProps_Project(15, 2) = "ChangeLogState"
    astrProps_Project(16, 1) = "display"
    astrProps_Project(16, 2) = "ShowLock"
    astrProps_Project(17, 1) = "Display not translated keywords"
    astrProps_Project(17, 2) = "ShowNotTranslated"
    astrProps_Project(18, 1) = "Driver invisible"
    astrProps_Project(18, 2) = "DriverInvisible"
    astrProps_Project(19, 1) = "Equip. ident."
    astrProps_Project(19, 2) = "AKZ"
    astrProps_Project(20, 1) = "Equip. ident. with"
    astrProps_Project(20, 2) = "AkzMode"
    astrProps_Project(21, 1) = "Execute limit function at RT start"
    astrProps_Project(21, 2) = "LimitFunctionOnStart"
    astrProps_Project(22, 1) = "Filling color"
    astrProps_Project(22, 2) = "LockFillColor"
    astrProps_Project(23, 1) = "Flash freq. [tenth sec]"
    astrProps_Project(23, 2) = "BlinkRate"
    astrProps_Project(24, 1) = "Function"
    astrProps_Project(24, 2) = "Function"
    astrProps_Project(25, 1) = "GUID"
    astrProps_Project(25, 2) = "GUID"
    astrProps_Project(26, 1) = "History of changes"
    astrProps_Project(26, 2) = "ChangeLogAktiv"
    astrProps_Project(27, 1) = "IPA active"
    astrProps_Project(27, 2) = "AsmActive"
    astrProps_Project(28, 1) = "Keyboard size [%]"
    astrProps_Project(28, 2) = "KeyboardSize"
    astrProps_Project(29, 1) = "Line color"
    astrProps_Project(29, 2) = "LockLineColor"
    astrProps_Project(30, 1) = "Lines per page"
    astrProps_Project(30, 2) = "PrintLines"
    astrProps_Project(31, 1) = "locked keys"
    astrProps_Project(31, 2) = "DisabledButtonStyle"
    astrProps_Project(32, 1) = "Log function set value"
    astrProps_Project(32, 2) = "CELPokeAck"
    astrProps_Project(33, 1) = "Main menus active"
    astrProps_Project(33, 2) = "EnableMenu"
    astrProps_Project(34, 1) = "Max. password error"
    astrProps_Project(34, 2) = "PasswordTries"
    astrProps_Project(35, 1) = "Max. user error"
    astrProps_Project(35, 2) = "UserTries"
    astrProps_Project(36, 1) = "Min. password length"
    astrProps_Project(36, 2) = "MinPwLength"
    astrProps_Project(37, 1) = "Multiuser project"
    astrProps_Project(37, 2) = "MultiUser"
    astrProps_Project(38, 1) = "net active"
    astrProps_Project(38, 2) = "NetActive"
    astrProps_Project(39, 1) = "Net. Authorization"
    astrProps_Project(39, 2) = "NetTokenActive"
    astrProps_Project(40, 1) = "Pre-define time filter"
    astrProps_Project(40, 2) = "PredefFilter"
    astrProps_Project(41, 1) = "Print active"
    astrProps_Project(41, 2) = "PrintActive"
    astrProps_Project(42, 1) = "Printing for"
    astrProps_Project(42, 2) = "PrintCEL"
    astrProps_Project(43, 1) = "Project name"
    astrProps_Project(43, 2) = "Name"
    astrProps_Project(44, 1) = "Pwd. period of validity [D]"
    astrProps_Project(44, 2) = "PWValid"
    astrProps_Project(45, 1) = "Redundancy type"
    astrProps_Project(45, 2) = "NetType"
    astrProps_Project(46, 1) = "Runtime directory"
    astrProps_Project(46, 2) = "WorkingPath"
    astrProps_Project(47, 1) = "Runtime title"
    astrProps_Project(47, 2) = "MainWindowStyle"
    astrProps_Project(48, 1) = "Saving cycle"
    astrProps_Project(48, 2) = "AsmCycleTime"
    astrProps_Project(49, 1) = "Selection with border"
    astrProps_Project(49, 2) = "SelBorder"
    astrProps_Project(50, 1) = "Send recipes"
    astrProps_Project(50, 2) = "RecipeWriteToCEL"
    astrProps_Project(51, 1) = "Server"
    astrProps_Project(51, 2) = "NetServer"
    astrProps_Project(52, 1) = "Standby"
    astrProps_Project(52, 2) = "NetSB"
    astrProps_Project(53, 1) = "Standby as data server"
    astrProps_Project(53, 2) = "NetDataServer"
    astrProps_Project(54, 1) = "Start Screen"
    astrProps_Project(54, 2) = "StartPictureName"
    astrProps_Project(55, 1) = "Start Screen GUID"
    astrProps_Project(55, 2) = "StartPictureGuid"
    astrProps_Project(56, 1) = "Table name"
    astrProps_Project(56, 2) = "AsmTable"
    astrProps_Project(57, 1) = "Temp. Login"
    astrProps_Project(57, 2) = "TempLogin"
    astrProps_Project(58, 1) = "Termination box"
    astrProps_Project(58, 2) = "AppCloseBox"
    astrProps_Project(59, 1) = "Text export in Unicode"
    astrProps_Project(59, 2) = "ExportUnicode"
    astrProps_Project(60, 1) = "Time [min]"
    astrProps_Project(60, 2) = "AutoLogoutTime"
    astrProps_Project(61, 1) = "Time without operation"
    astrProps_Project(61, 2) = "FuncActiveTime"
    astrProps_Project(62, 1) = "Timeout [s]"
    astrProps_Project(62, 2) = "NetTimeout"
    astrProps_Project(63, 1) = "Timeout for confirmation [s]"
    astrProps_Project(63, 2) = "NetTokenQuit"
    astrProps_Project(64, 1) = "Timeout for request [s]"
    astrProps_Project(64, 2) = "NetTokenQuestion"
    astrProps_Project(65, 1) = "Trend and HD values in milliseconds"
    astrProps_Project(65, 2) = "TrendMilliSec"
    astrProps_Project(66, 1) = "WindowsCE project"
    astrProps_Project(66, 2) = "WindowsCE"

For i = 1 To UBound(astrProps_Project)
    If (astrProps_Project(i, 2) = strText) Then
       CollectProjectInformationTranslateToWizard = astrProps_Project(i, 1)
       Exit Function
    End If
Next

End Function

Private Function CollectInformationForSaveSettings(ObProject As Project, XMLSettingsDoc As MSXML2.DOMDocument) As MSXML2.DOMDocument
Dim XMLDoc As MSXML2.DOMDocument
Dim XMLSettingsItem As MSXML2.IXMLDOMElement
Dim XMLSettingsItemSub As MSXML2.IXMLDOMElement
Dim XMLSettingsItemSubSub As MSXML2.IXMLDOMElement
Dim strTEMP As String
Dim i As Integer
       
Set XMLDoc = XMLSettingsDoc
Set XMLSettingsItem = addElement(XMLDoc, XMLDoc, "root", "")
Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Projectname", ObProject.Name)

'Main Options
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "MainOptions", "")
    'Checkboxes
        If (ChkBox_Project.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Project", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Project", "0")
        End If
        If (ChkBox_Variables.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Variables", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Variables", "0")
        End If
        If (ChkBox_Datatypes.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Datatypes", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Datatypes", "0")
        End If
        If (ChkBox_Pictures.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Pictures", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Pictures", "0")
        End If
         If (ChkBox_Functions.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Functions", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Functions", "0")
        End If
         If (ChkBox_Templates.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Templates", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Templates", "0")
        End If
         If (ChkBox_Recipes.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Recipes", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Recipes", "0")
        End If
         If (ChkBox_RGM.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_RGM", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_RGM", "0")
        End If
         If (ChkBox_Drivers.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Drivers", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Drivers", "0")
        End If
         If (ChkBox_Scripts.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Scripts", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Scripts", "0")
        End If
         If (ChkBox_TimeControls.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_TimeControls", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_TimeControls", "0")
        End If
         If (ChkBox_Archives.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Archives", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Archives", "0")
        End If
         If (ChkBox_Users.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Users", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Users", "0")
        End If
         If (ChkBox_Menus.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Menus", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Menus", "0")
        End If
        If (ChkBox_Remas.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Remas", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Remas", "0")
        End If
        If (ChkBox_Straton.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Straton", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_Straton", "0")
        End If
    
    'DestinationPaths
        Call addElement(XMLDoc, XMLSettingsItemSub, "PR_strDestination", PR_strDestination)

'Project
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Project", "")
    'Loop ProjectListbox
        strTEMP = ""
        For i = 0 To LstBox_ProjectProperties.ListCount - 1
            If (LstBox_ProjectProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_ProjectProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)

'Variables
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Variables", "")
    'Main Form
        'Loop VariablesListbox
            strTEMP = ""
            For i = 0 To LstBox_VariableProperties.ListCount - 1
                If (LstBox_VariableProperties.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_VariableProperties.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
        'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
            If Not (CmdBtn_KonfVar_More.Enabled) Then
                Call addElement(XMLDoc, XMLSettingsItemSub, "MoreEnabled", "")
            End If
        'Chkbox "Include VariableUsage"
            If (ChkBox_InclVariableUsage.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVariableUsage", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVariableUsage", "0")
            End If
        'Chkbox "Include Limits / Remas"
            If (ChkBox_InclVarLimits.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVarLimits", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVarLimits", "0")
            End If
    'VariablesLimits Form
        Set XMLSettingsItemSubSub = addElement(XMLDoc, XMLSettingsItemSub, "VariablesLimits", "")
        'Loop VariablesLimitsListbox
            strTEMP = ""
            For i = 0 To LstBox_VarLimits.ListCount - 1
                If (LstBox_VarLimits.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_VarLimits.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "Selections", strTEMP)

'Datatypes
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Datatypes", "")
    'Main Form
        'Loop DatatypesListbox
            strTEMP = ""
            For i = 0 To LstBox_Vartypes.ListCount - 1
                If (LstBox_Vartypes.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_Vartypes.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
        'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
            If Not (CmdBtn_KonfVarTypes_More.Enabled) Then
                Call addElement(XMLDoc, XMLSettingsItemSub, "MoreEnabled", "")
            End If
        'Chkbox "Include Limits / Remas"
            If (ChkBox_InclVarTypesLimits.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVarTypesLimits", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclVarTypesLimits", "0")
            End If
    'DatatypesLimits Form
        Set XMLSettingsItemSubSub = addElement(XMLDoc, XMLSettingsItemSub, "DatatypesLimits", "")
        'Loop DatatypesLimitsListbox
            strTEMP = ""
            For i = 0 To LstBox_KonfVarTypeLimitsProperties.ListCount - 1
                If (LstBox_KonfVarTypeLimitsProperties.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_KonfVarTypeLimitsProperties.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "Selections", strTEMP)
        
'Pictures
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Screens", "")
    'Main Form
        Set XMLSettingsItemSubSub = addElement(XMLDoc, XMLSettingsItemSub, "Main", "")
        'Loop PicturesListbox
            strTEMP = ""
            For i = 0 To LstBox_PictureProperties.ListCount - 1
                If (LstBox_PictureProperties.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_PictureProperties.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "Selections", strTEMP)
        'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
            If Not (CmdBtn_KonfPict_More.Enabled) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "MoreEnabled", "")
            End If
        'Chkbox "Include Hardcopy/Slide"
            If (ChkBox_InclHardcopy.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_InclHardcopy", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_InclHardcopy", "0")
            End If
        'TxtBox "max. XX cm wide"
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "m_TxtBox_HardcopyMaxWide", m_TxtBox_HardcopyMaxWide.value)
        'Chkbox "Include PictureTree"
            If (ChkBox_InclPictureTree.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_InclPictureTree", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_InclPictureTree", "0")
            End If
        'Chkbox "Draw Border"
            If (ChkBox_InclVariableUsage.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_FrameHardcopy", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "ChkBox_FrameHardcopy", "0")
            End If
    'PictureTree Form
        Set XMLSettingsItemSubSub = addElement(XMLDoc, XMLSettingsItemSub, "ScreenTree", "")
        'OptionButton "StartPicture or Autostart-Script"
            If (OptBtn_PictTreeviaStart.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "OptBtn_PictTreeviaStart", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "OptBtn_PictTreeviaStart", "0")
            End If
        'OptionButton "Picture"
            If (OptBtn_PictTreeviaPicture.value) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "OptBtn_PictTreeviaPicture", "1")
            Else
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "OptBtn_PictTreeviaPicture", "0")
            End If
        'CmboBox Picture
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "CmboBox_Pictures", CmboBox_Pictures)
    'PictureElements Form
        Set XMLSettingsItemSubSub = addElement(XMLDoc, XMLSettingsItemSub, "ScreenElements", "")
        'Loop PicturesListbox
            strTEMP = ""
            For i = 0 To LstBox_ElementProperties.ListCount - 1
                If (LstBox_ElementProperties.Selected(i) = True) Then
                    strTEMP = strTEMP & "|" & LstBox_ElementProperties.List(i) & "|"
                End If
            Next
        'Save selected Entrys
            Call addElement(XMLDoc, XMLSettingsItemSubSub, "Selections", strTEMP)
        'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
            If Not (CmdBtn_KonfPictElem_More.Enabled) Then
                Call addElement(XMLDoc, XMLSettingsItemSubSub, "MoreEnabled", "")
            End If

'Functions
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Functions", "")
    'Loop FunctionsListbox
        strTEMP = ""
        For i = 0 To LstBox_FunctionProperties.ListCount - 1
            If (LstBox_FunctionProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_FunctionProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
    'Chkbox "Include FunctionUsage"
        If (ChkBox_InclFunctionUsage.value) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclFunctionUsage", "1")
        Else
            Call addElement(XMLDoc, XMLSettingsItemSub, "ChkBox_InclFunctionUsage", "0")
        End If
        
'Templates
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Frames", "")
    'Loop TemplatesListbox
        strTEMP = ""
        For i = 0 To LstBox_TemplateProperties.ListCount - 1
            If (LstBox_TemplateProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_TemplateProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)

'Recipes
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Recipes", "")
    'Loop RecipesListbox
        strTEMP = ""
        For i = 0 To LstBox_RecipeProperties.ListCount - 1
            If (LstBox_RecipeProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RecipeProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
    'Loop RecipesVariablesListbox
        strTEMP = ""
        For i = 0 To LstBox_RecipeVariableProperties.ListCount - 1
            If (LstBox_RecipeVariableProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RecipeVariableProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "VariablesSelections", strTEMP)
        
'RGM
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "RGM", "")
    'Loop VariablesListbox
        strTEMP = ""
        For i = 0 To LstBox_RGMVariableProperties.ListCount - 1
            If (LstBox_RGMVariableProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RGMVariableProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "VariablesSelections", strTEMP)
    'Loop RecipesListbox
        strTEMP = ""
        For i = 0 To LstBox_RGMRecipeProperties.ListCount - 1
            If (LstBox_RGMRecipeProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RGMRecipeProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "RecipesSelections", strTEMP)
    'Loop RecipeVariablesListbox
        strTEMP = ""
        For i = 0 To LstBox_RGMRecipeVariableProperties.ListCount - 1
            If (LstBox_RGMRecipeVariableProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RGMRecipeVariableProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "RecipeVariablesSelections", strTEMP)

'TimeControls
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "TimeControls", "")
    'Loop TemplatesListbox
        strTEMP = ""
        For i = 0 To LstBox_TimeControlProperties.ListCount - 1
            If (LstBox_TimeControlProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_TimeControlProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)

'Archives
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Historian", "")
    'Loop RecipesListbox
        strTEMP = ""
        For i = 0 To LstBox_ArchiveProperties.ListCount - 1
            If (LstBox_ArchiveProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_ArchiveProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
    'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
        If Not (CmdBtn_KonfArchive_More.Enabled) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "MoreEnabled", "")
        End If
    'Loop RecipesVariablesListbox
        strTEMP = ""
        For i = 0 To LstBox_ArchiveVariablesProperties.ListCount - 1
            If (LstBox_ArchiveVariablesProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_ArchiveVariablesProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "VariablesSelections", strTEMP)
        
'Users
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Users", "")
    'Loop TemplatesListbox
        strTEMP = ""
        For i = 0 To LstBox_UserProperties.ListCount - 1
            If (LstBox_UserProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_UserProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
        
'Menus
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Menus", "")
    'Loop TemplatesListbox
        strTEMP = ""
        For i = 0 To LstBox_MenuItemProperties.ListCount - 1
            If (LstBox_MenuItemProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_MenuItemProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
    'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
        If Not (CmdBtn_KonfMenus_More.Enabled) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "MoreEnabled", "")
        End If
        
'Remas
    Set XMLSettingsItemSub = addElement(XMLDoc, XMLSettingsItem, "Remas", "")
    'Loop RecipesListbox
        strTEMP = ""
        For i = 0 To LstBox_RemaProperties.ListCount - 1
            If (LstBox_RemaProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_RemaProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "Selections", strTEMP)
    'Loop RecipesVariablesListbox
        strTEMP = ""
        For i = 0 To LstBox_StateProperties.ListCount - 1
            If (LstBox_StateProperties.Selected(i) = True) Then
                strTEMP = strTEMP & "|" & LstBox_StateProperties.List(i) & "|"
            End If
        Next
    'Save selected Entrys
        Call addElement(XMLDoc, XMLSettingsItemSub, "StatesSelections", strTEMP)
    'Save the "More..."-Button and therefore the status of the extended Properties in the Listbox
        If Not (CmdBtn_KonfRemas_State_More.Enabled) Then
            Call addElement(XMLDoc, XMLSettingsItemSub, "StatesMoreEnabled", "")
        End If

'Return value
    Set CollectInformationForSaveSettings = XMLDoc
End Function

Private Sub CollectProjectInformation(ObProject As Project)
Dim Vari As Variant
Dim nPropertyIndex As Integer
Dim strTEMP As String
Dim strTempFromWizard As String
Dim nLoopedFunctions As Integer
Dim strWantedProperties As String
Dim strWantedPropertiesFromWizard As String
Dim strWantedPropertiesFromWizardTemp As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim strProjectdataForTable As String
Dim nRowCounter As Integer
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strObjects As String
Dim Table As MSXML2.IXMLDOMElement
Dim strArray(1 To 2, 1 To 3) As String

nRowCounter = 1

'Initialize Properties for Translation from Wizard-Name to DynProperty-Name
Dim astrProps_Project(1 To 66, 1 To 2)
    astrProps_Project(1, 1) = "AML - Save ring buffer spont."
    astrProps_Project(1, 2) = "SaveAmlStack"
    astrProps_Project(2, 1) = "Archive entries"
    astrProps_Project(2, 2) = "ArchiveChangeToCEL"
    astrProps_Project(3, 1) = "Autom. allow changes"
    astrProps_Project(3, 2) = "ChangeLogCheckout"
    astrProps_Project(4, 1) = "Autom. function call"
    astrProps_Project(4, 2) = "FuncActive"
    astrProps_Project(5, 1) = "Autom. keyboard"
    astrProps_Project(5, 2) = "Touchscreen"
    astrProps_Project(6, 1) = "Autom. Logout"
    astrProps_Project(6, 2) = "AutoLogout"
    astrProps_Project(7, 1) = "Buffer size"
    astrProps_Project(7, 2) = "AsmBufferSize"
    astrProps_Project(8, 1) = "CEL - Save ring buffer spont."
    astrProps_Project(8, 2) = "SavelCelStack"
    astrProps_Project(9, 1) = "Change recipes"
    astrProps_Project(9, 2) = "RecipeChangeToCEL"
    astrProps_Project(10, 1) = "Comments"
    astrProps_Project(10, 2) = "SameComments"
    astrProps_Project(11, 1) = "Cursor visible"
    astrProps_Project(11, 2) = "CursorVisible"
    astrProps_Project(12, 1) = "Data directory"
    astrProps_Project(12, 2) = "AltDataPath"
    astrProps_Project(13, 1) = "Database"
    astrProps_Project(13, 2) = "AsmDns"
    astrProps_Project(14, 1) = "Deleting users"
    astrProps_Project(14, 2) = "DelUser"
    astrProps_Project(15, 1) = "Detailing level"
    astrProps_Project(15, 2) = "ChangeLogState"
    astrProps_Project(16, 1) = "display"
    astrProps_Project(16, 2) = "ShowLock"
    astrProps_Project(17, 1) = "Display not translated keywords"
    astrProps_Project(17, 2) = "ShowNotTranslated"
    astrProps_Project(18, 1) = "Driver invisible"
    astrProps_Project(18, 2) = "DriverInvisible"
    astrProps_Project(19, 1) = "Equip. ident."
    astrProps_Project(19, 2) = "AKZ"
    astrProps_Project(20, 1) = "Equip. ident. with"
    astrProps_Project(20, 2) = "AkzMode"
    astrProps_Project(21, 1) = "Execute limit function at RT start"
    astrProps_Project(21, 2) = "LimitFunctionOnStart"
    astrProps_Project(22, 1) = "Filling color"
    astrProps_Project(22, 2) = "LockFillColor"
    astrProps_Project(23, 1) = "Flash freq. [tenth sec]"
    astrProps_Project(23, 2) = "BlinkRate"
    astrProps_Project(24, 1) = "Function"
    astrProps_Project(24, 2) = "Function"
    astrProps_Project(25, 1) = "GUID"
    astrProps_Project(25, 2) = "GUID"
    astrProps_Project(26, 1) = "History of changes"
    astrProps_Project(26, 2) = "ChangeLogAktiv"
    astrProps_Project(27, 1) = "IPA active"
    astrProps_Project(27, 2) = "AsmActive"
    astrProps_Project(28, 1) = "Keyboard size [%]"
    astrProps_Project(28, 2) = "KeyboardSize"
    astrProps_Project(29, 1) = "Line color"
    astrProps_Project(29, 2) = "LockLineColor"
    astrProps_Project(30, 1) = "Lines per page"
    astrProps_Project(30, 2) = "PrintLines"
    astrProps_Project(31, 1) = "locked keys"
    astrProps_Project(31, 2) = "DisabledButtonStyle"
    astrProps_Project(32, 1) = "Log function set value"
    astrProps_Project(32, 2) = "CELPokeAck"
    astrProps_Project(33, 1) = "Main menus active"
    astrProps_Project(33, 2) = "EnableMenu"
    astrProps_Project(34, 1) = "Max. password error"
    astrProps_Project(34, 2) = "PasswordTries"
    astrProps_Project(35, 1) = "Max. user error"
    astrProps_Project(35, 2) = "UserTries"
    astrProps_Project(36, 1) = "Min. password length"
    astrProps_Project(36, 2) = "MinPwLength"
    astrProps_Project(37, 1) = "Multiuser project"
    astrProps_Project(37, 2) = "MultiUser"
    astrProps_Project(38, 1) = "Net active"
    astrProps_Project(38, 2) = "NetActive"
    astrProps_Project(39, 1) = "Net. Authorization"
    astrProps_Project(39, 2) = "NetTokenActive"
    astrProps_Project(40, 1) = "Pre-define time filter"
    astrProps_Project(40, 2) = "PredefFilter"
    astrProps_Project(41, 1) = "Print Active"
    astrProps_Project(41, 2) = "PrintActive"
    astrProps_Project(42, 1) = "Printing for"
    astrProps_Project(42, 2) = "PrintCEL"
    astrProps_Project(43, 1) = "Project name"
    astrProps_Project(43, 2) = "Name"
    astrProps_Project(44, 1) = "Pwd. period of validity [D]"
    astrProps_Project(44, 2) = "PWValid"
    astrProps_Project(45, 1) = "Redundancy type"
    astrProps_Project(45, 2) = "NetType"
    astrProps_Project(46, 1) = "Runtime directory"
    astrProps_Project(46, 2) = "WorkingPath"
    astrProps_Project(47, 1) = "Runtime title"
    astrProps_Project(47, 2) = "MainWindowStyle"
    astrProps_Project(48, 1) = "Saving cycle"
    astrProps_Project(48, 2) = "AsmCycleTime"
    astrProps_Project(49, 1) = "Selection with border"
    astrProps_Project(49, 2) = "SelBorder"
    astrProps_Project(50, 1) = "Send recipes"
    astrProps_Project(50, 2) = "RecipeWriteToCEL"
    astrProps_Project(51, 1) = "Server"
    astrProps_Project(51, 2) = "NetServer"
    astrProps_Project(52, 1) = "Standby"
    astrProps_Project(52, 2) = "NetSB"
    astrProps_Project(53, 1) = "Standby as data server"
    astrProps_Project(53, 2) = "NetDataServer"
    astrProps_Project(54, 1) = "Start Screen"
    astrProps_Project(54, 2) = "StartPictureName"
    astrProps_Project(55, 1) = "Start Screen GUID"
    astrProps_Project(55, 2) = "StartPictureGuid"
    astrProps_Project(56, 1) = "Table name"
    astrProps_Project(56, 2) = "AsmTable"
    astrProps_Project(57, 1) = "Temp. Login"
    astrProps_Project(57, 2) = "TempLogin"
    astrProps_Project(58, 1) = "Termination box"
    astrProps_Project(58, 2) = "AppCloseBox"
    astrProps_Project(59, 1) = "Text export in Unicode"
    astrProps_Project(59, 2) = "ExportUnicode"
    astrProps_Project(60, 1) = "Time [min]"
    astrProps_Project(60, 2) = "AutoLogoutTime"
    astrProps_Project(61, 1) = "Time without operation"
    astrProps_Project(61, 2) = "FuncActiveTime"
    astrProps_Project(62, 1) = "Timeout [s]"
    astrProps_Project(62, 2) = "NetTimeout"
    astrProps_Project(63, 1) = "Timeout for confirmation"
    astrProps_Project(63, 2) = "NetTokenQuit"
    astrProps_Project(64, 1) = "Timeout for request [s]"
    astrProps_Project(64, 2) = "NetTokenQuestion"
    astrProps_Project(65, 1) = "Trend and HD values in milliseconds"
    astrProps_Project(65, 2) = "TrendMilliSec"
    astrProps_Project(66, 1) = "WindowsCE project"
    astrProps_Project(66, 2) = "WindowsCE"

'Get the Selected ProjectProperties from Control
    For i = 0 To LstBox_ProjectProperties.ListCount - 1
        If (LstBox_ProjectProperties.Selected(i)) Then
            strWantedPropertiesFromWizard = strWantedPropertiesFromWizard & "|" & LstBox_ProjectProperties.List(i) & "|"
            nSelectedCount = nSelectedCount + 1
        End If
    Next
    'Translate to DynProperties
        strWantedPropertiesFromWizardTemp = strWantedPropertiesFromWizard
        'Loop Selected Properties
            For i = 0 To nSelectedCount - 1
                strTEMP = Mid(strWantedPropertiesFromWizardTemp, 2, InStr(2, strWantedPropertiesFromWizardTemp, "|") - 2)
                'Loop Array for DynProperty-Name
                    For j = 1 To UBound(astrProps_Project)
                        If (astrProps_Project(j, 1) = strTEMP) Then
                            strWantedProperties = strWantedProperties & "|" & astrProps_Project(j, 2) & "|"
                            Exit For
                        End If
                    Next
                strWantedPropertiesFromWizardTemp = Replace(strWantedPropertiesFromWizardTemp, "|" & strTEMP & "|", "", 1, 1)
            Next

'Which DynProperties are Objects?
    strObjects = "|Function|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"
    

'Create XML-Document
    Call CreateDOMDoc(1)

'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 3, 2, "header", nCounterChapters & ". " & "PROJECT", "PROJECT", "name")

'Table
    Set Table = Nothing
    Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
    'Fill Array - Header Row
        'No Header Row!

'Get Function-Information
On Error GoTo Err_CollectProjectInformation
LogMessage "Collecting Project information.."
    If (Not ObProject Is Nothing) Then
        ' Loop through DynProperties to get the selected Properties
            Vari = ObProject.DynPropertiesEnum("")
            For nPropertyIndex = 0 To UBound(Vari)
                strTEMP = Left(Vari(nPropertyIndex), InStr(1, Vari(nPropertyIndex), ",") - 1)
                'Is the current Property selected in the Control?
                    If (InStr(1, strWantedProperties, "|" & strTEMP & "|", 1) > 0) Then
                        'Row - 1st Column
                            strArray(1, 1) = CollectProjectInformationTranslateToWizard(strTEMP)
                            strArray(1, 2) = ""
                            strArray(1, 3) = ""
                        'Is the current DynProperty an Object?
                            If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                'Does it need to be linked to Functions in HTML
                                    If (InStr(1, strHrefLinksFunctions, "|" & strTEMP & "|") > 0) Then
                                        On Error GoTo Err_SetObject
                                            Set obFunctionLink = ObProject.DynProperties(strTEMP)
                                        On Error GoTo Err_CollectProjectInformation
                                        If (Not obFunctionLink Is Nothing) Then
                                            'Row - 2nd Column
                                                strArray(2, 1) = obFunctionLink.Name
                                                If (ChkBox_Functions) Then
                                                    strArray(2, 2) = "href"
                                                    strArray(2, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                Else
                                                    strArray(2, 2) = ""
                                                    strArray(2, 3) = ""
                                                End If
                                            Set obFunctionLink = Nothing
                                        Else
                                            'Row - 2nd Column
                                                strArray(2, 1) = ""
                                                strArray(2, 2) = ""
                                                strArray(2, 3) = ""
                                        End If
                                    End If
                            Else
                                'Row - 2nd Column
                                    strArray(2, 1) = ObProject.DynProperties(strTEMP)
                                    strArray(2, 2) = ""
                                    strArray(2, 3) = ""
                            End If
                        'The RowCounter is used to determine the current Row-Color
                            nRowCounter = nRowCounter + 1
                        'Add Row
                            Call AddHTMLTableRow(curXMLDoc, Table, strArray, 2, nRowCounter)
                    End If
            Next
        'Write Files
            If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_PROJECTINFO)) Then
                LogMessage ("Error while creating Project-Folder!")
            End If
            If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_PROJECTINFO)) Then
                LogMessage ("Error while Saving Project-Output!")
            End If
    End If
    
'Free Memory
    Set obFunctionLink = Nothing
    Set Vari = Nothing
    Set Table = Nothing

ModifyLastLogMessage ("..Done")
Exit Sub
Err_CollectProjectInformation:
    LogMessage ("Error while retrieving information from Project")
    Resume Next
Err_SetObject:
    Resume Next
End Sub

'****************************************************************************
' Methode:      CollectFunctions(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Functions
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectFunctions(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obFunction As RtFunction
Dim nFunctionIndex As Integer
Dim nPropertyIndex As Integer
Dim strTEMP As String
Dim i As Integer
Dim j As Integer
Dim nSelectedCount As Integer
Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim obArrObjects() As RtFunction
Dim strArrUsableDynProperties() As String
Dim nCurArrDim As Integer
    
ReDim strArray(1 To (C_COLS_FUNCTIONLIST + 1), 1 To 3) As String
ReDim obArrObjects(1 To C_COLS_FUNCTIONLIST) As RtFunction
ReDim strArrUsableDynProperties(1 To C_COLS_FUNCTIONLIST) As String
nCurArrDim = 1

'Initialize Properties for Translation
Dim astrProps_Functions(1 To 9, 1 To 2)
    astrProps_Functions(1, 1) = "Actual"
    astrProps_Functions(1, 2) = "IsActual"
    astrProps_Functions(2, 1) = "Client"
    astrProps_Functions(2, 2) = "IsClient"
    astrProps_Functions(3, 1) = "Execution"
    astrProps_Functions(3, 2) = "Execution"
    astrProps_Functions(4, 1) = "General"
    astrProps_Functions(4, 2) = "General"
    astrProps_Functions(5, 1) = "Name"
    astrProps_Functions(5, 2) = "Name"
    astrProps_Functions(6, 1) = "Parameter"
    astrProps_Functions(6, 2) = "Parameters"
    astrProps_Functions(7, 1) = "Server"
    astrProps_Functions(7, 2) = "IsServer"
    astrProps_Functions(8, 1) = "Standby"
    astrProps_Functions(8, 2) = "IsStandBy"
    astrProps_Functions(9, 1) = "Type"
    astrProps_Functions(9, 2) = "Type"

'Get the Selected Properties from Control
    'Count selected entries
        For i = 0 To LstBox_FunctionProperties.ListCount - 1
            If (LstBox_FunctionProperties.Selected(i)) Then
                nSelectedCount = nSelectedCount + 1
            End If
        Next
    If (nSelectedCount > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCount, 1 To 2)
            j = 1
            For i = 0 To LstBox_FunctionProperties.ListCount - 1
                If (LstBox_FunctionProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_FunctionProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTEMP = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_Functions)
                            If (astrProps_Functions(j, 1) = strTEMP) Then
                                strArrWantedProperties(i, 2) = astrProps_Functions(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "FUNCTIONS", "FUNCTIONS", "name")

'Sub-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 1, "subheader", nCounterChapters & ". " & nCounterSubChapters & ". " & "Functions List", "Functions List", "name")

'Get Function-Information
On Error GoTo Err_FunctionInfo
LogMessage "Collecting Function information.."
    If (Not ObProject Is Nothing) Then
        'Clear previous retrieved information
        If (ObProject.RtFunctions.Count) Then
        ' Loop through Functions
            For nFunctionIndex = 0 To ObProject.RtFunctions.Count - 1
                Set obFunction = ObProject.RtFunctions.Item(nFunctionIndex)
                If (Not obFunction Is Nothing) Then
                    'Save Object in Array
                        Set obArrObjects(nCurArrDim) = obFunction
                    If (nCurArrDim = C_COLS_FUNCTIONLIST Or nFunctionIndex = ObProject.RtFunctions.Count - 1) Then
                        'Do we need more columns than we have data for?
                            If (nCurArrDim < C_COLS_FUNCTIONLIST) Then
                                For i = nCurArrDim + 1 To C_COLS_FUNCTIONLIST
                                    Set obArrObjects(i) = Nothing
                                Next
                            End If

                        'Start Table
                            Set Table = Nothing
                            Set Table = AddHTMLTableStart(curXMLDoc, curXMLItem)
                            'Fill Array - Header Row
                                strArray(1, 1) = "Name"
                                strArray(1, 2) = ""
                                strArray(1, 3) = ""
                        
                        'Get Information from objects
                            'Loop Array
                                For i = 1 To C_COLS_FUNCTIONLIST
                                    If (obArrObjects(i) Is Nothing) Then
                                        'Filler needed = Empty Column
                                            strArray(i + 1, 1) = ""
                                            strArray(i + 1, 2) = ""
                                            strArray(i + 1, 3) = ""
                                    Else
                                        'Information for Column
                                            strArray(i + 1, 1) = obArrObjects(i).Name
                                            strArray(i + 1, 2) = "name"
                                            strArray(i + 1, 3) = "Function[Entry-Name='" & obArrObjects(i).Name & "']"
                                        'Usable Dynproperties for this object
                                            strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                                    End If
                                Next
                            'Write 1st Row
                                Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_FUNCTIONLIST + 1, 0)
                        'Get Properties from objects
                            'Loop Wanted Properties
                                For i = 1 To UBound(strArrWantedProperties)
                                    'Get Property
                                        strTEMP = strArrWantedProperties(i, 2)
                                    'Row - 1st Column
                                        strArray(1, 1) = strArrWantedProperties(i, 1)
                                        strArray(1, 2) = ""
                                        strArray(1, 3) = ""
                                    'Loop Array
                                        For j = 1 To C_COLS_FUNCTIONLIST
                                            'Row - following Columns
                                                If (obArrObjects(j) Is Nothing) Then
                                                    'Filler needed = Empty Column
                                                        strArray(j + 1, 1) = ""
                                                        strArray(j + 1, 2) = ""
                                                        strArray(j + 1, 3) = ""
                                                Else
                                                    'Is the current Property available in this object?
                                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                                            If (strTEMP = "FktType" Or strTEMP = "Type") Then
                                                                'The "Type"-DynProperty needs to be translated to readable Text
                                                                    strArray(j + 1, 1) = astrFunctionTypes(obArrObjects(j).Type)
                                                            ElseIf (strTEMP = "Parameter" Or strTEMP = "Parameters") Then
                                                                'The "Parameters"-DynProperty needs to reflect the static Property ParamString
                                                                    strArray(j + 1, 1) = obArrObjects(j).ParamString
                                                            Else
                                                                On Error GoTo Err_DynProperties
                                                                strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                                On Error GoTo Err_FunctionInfo
                                                            End If
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        Else
                                                            strArray(j + 1, 1) = ""
                                                            strArray(j + 1, 2) = ""
                                                            strArray(j + 1, 3) = ""
                                                        End If
                                                End If
                                        Next
                                    'Write Row
                                        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_FUNCTIONLIST + 1, i)
                                Next
                        'Reset Counter and Array
                            nCurArrDim = 0
                            ReDim strArray(1 To C_COLS_FUNCTIONLIST + 1, 1 To 3) As String
                            ReDim obArrObjects(1 To C_COLS_FUNCTIONLIST) As RtFunction
                    End If
                    'Add to counter
                        nCurArrDim = nCurArrDim + 1
                End If
            Next
        End If

    End If

'Write Files
    If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_FUNCTIONS)) Then
        LogMessage ("Error while creating Functions-Folder!")
    End If
    If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_FUNCTIONS)) Then
        LogMessage ("Error while Saving Functions-Output!")
    End If

'Free Memory
    Set obFunction = Nothing
    Set Table = Nothing
    ReDim strArray(0 To 0) As String
    ReDim obArrObjects(0 To 0) As RtFunction
    ReDim strArrUsableDynProperties(0 To 0) As String

ModifyLastLogMessage ("..Done")
Exit Sub
Err_DynProperties:
    'Problems with not existing Dyn Properties
    Resume Next
Err_FunctionInfo:
    LogMessage ("Error while retrieving information from Function:#" & Trim(Str(nFunctionIndex)))
    Resume Next
End Sub

'****************************************************************************
' Methode:      CollectMenus(...)
' Parameter:    obProject As Project, XMLDoc As MSXML2.DOMDocument
' Description:  Gathers the Information for the module : Menus
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Sub CollectMenus(ObProject As Project, XMLDoc As MSXML2.DOMDocument)
Dim obZenMenu As ZenMenu
Dim obZenMenuItem As ZenMenuItem
Dim nMenusIndex As Integer
Dim nMenuIndex As Integer
Dim nMenuItemIndex As Integer
Dim i As Integer
Dim j As Integer
Dim nSelectedCountMenuItem As Integer
Dim strTempMenuItem As String
Dim XSLStartPointForMenuTree As MSXML2.IXMLDOMElement
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim strObjects As String
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strMenuType As String
Dim Table As MSXML2.IXMLDOMElement
Dim obArrObjects() As ZenMenuItem
Dim nCurArrDim As Integer
Dim strArrayTree() As String
Dim strArrWantedProperties() As String
Dim strArrayNames() As String

ReDim strArrayNames(1 To (C_COLS_MENUITEMSLIST + 1)) As String
ReDim obArrObjects(1 To C_COLS_MENUITEMSLIST) As ZenMenuItem
ReDim strArrayTree(1 To 7) As String
nCurArrDim = 1

'Which DynProperties are Objects?
    strObjects = "|Function||Variable|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|Variable|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"

'Initialize MenuItemProperties Translation
ReDim astrProps_MenuItems(1 To 24, 1 To 2)
    astrProps_MenuItems(1, 1) = "Action type"
    astrProps_MenuItems(1, 2) = "Type"
    astrProps_MenuItems(2, 1) = "Active"
    astrProps_MenuItems(2, 2) = "Enabled"
    astrProps_MenuItems(3, 1) = "Alignment"
    astrProps_MenuItems(3, 2) = "BackgroundPicRepres"
    astrProps_MenuItems(4, 1) = "Authorization group"
    astrProps_MenuItems(4, 2) = "Password"
    astrProps_MenuItems(5, 1) = "Bitmap"
    astrProps_MenuItems(5, 2) = "Picture"
    astrProps_MenuItems(6, 1) = "Chapter"
    astrProps_MenuItems(6, 2) = "HelpCapture"
    astrProps_MenuItems(7, 1) = "Check mark"
    astrProps_MenuItems(7, 2) = "Checked"
    astrProps_MenuItems(8, 1) = "Dialog"
    astrProps_MenuItems(8, 2) = "SWDialog"
    astrProps_MenuItems(9, 1) = "File"
    astrProps_MenuItems(9, 2) = "HelpFile"
    astrProps_MenuItems(10, 1) = "Function"
    astrProps_MenuItems(10, 2) = "Function"
    astrProps_MenuItems(11, 1) = "Name"
    astrProps_MenuItems(11, 2) = "Name"
    astrProps_MenuItems(12, 1) = "Picture"
    astrProps_MenuItems(12, 2) = "BackgroundPicture"
    astrProps_MenuItems(13, 1) = "Propose current value"
    astrProps_MenuItems(13, 2) = "ActValue"
    astrProps_MenuItems(14, 1) = "seperator"
    astrProps_MenuItems(14, 2) = "Seperator"
    astrProps_MenuItems(15, 1) = "Set value/Change by"
    astrProps_MenuItems(15, 2) = "Sollwert"
    astrProps_MenuItems(16, 1) = "Signature necessary"
    astrProps_MenuItems(16, 2) = "Signature"
    astrProps_MenuItems(17, 1) = "Signature text"
    astrProps_MenuItems(17, 2) = "SignatureText"
    astrProps_MenuItems(18, 1) = "Submenu"
    astrProps_MenuItems(18, 2) = "Popup-Menu"
    astrProps_MenuItems(19, 1) = "Text"
    astrProps_MenuItems(19, 2) = "Caption"
    astrProps_MenuItems(20, 1) = "Tipp text"
    astrProps_MenuItems(20, 2) = "TipText"
    astrProps_MenuItems(21, 1) = "Variable"
    astrProps_MenuItems(21, 2) = "Variable"
    astrProps_MenuItems(22, 1) = "Variable from element"
    astrProps_MenuItems(22, 2) = "FromElem"
    astrProps_MenuItems(23, 1) = "VBA macro"
    astrProps_MenuItems(23, 2) = "VBA-Macro"
    astrProps_MenuItems(24, 1) = "visible"
    astrProps_MenuItems(24, 2) = "Visible"

'Get the Selected Properties from Control
    'Count selected entries
        For i = 0 To LstBox_MenuItemProperties.ListCount - 1
            If (LstBox_MenuItemProperties.Selected(i)) Then
                nSelectedCountMenuItem = nSelectedCountMenuItem + 1
            End If
        Next
    If (nSelectedCountMenuItem > 0) Then
        'Prepare Array and save selected entries
            ReDim strArrWantedProperties(1 To nSelectedCountMenuItem, 1 To 2)
            j = 1
            For i = 0 To LstBox_MenuItemProperties.ListCount - 1
                If (LstBox_MenuItemProperties.Selected(i)) Then
                    strArrWantedProperties(j, 1) = LstBox_MenuItemProperties.List(i)
                    j = j + 1
                End If
            Next
        'Translate to DynProperties
            'Loop Selected Properties
                For i = 1 To UBound(strArrWantedProperties)
                    strTempMenuItem = strArrWantedProperties(i, 1)
                    'Loop Array for DynProperty-Name
                        For j = 1 To UBound(astrProps_MenuItems)
                            If (astrProps_MenuItems(j, 1) = strTempMenuItem) Then
                                strArrWantedProperties(i, 2) = astrProps_MenuItems(j, 2)
                                Exit For
                            End If
                        Next
                Next
    End If

LogMessage ("Collecting Menu information..")

'Create XML-Document
    Call CreateDOMDoc(1)
    
'Document-Title
    Call AddHTMLTitle(curXMLDoc, curXMLItem, 2, 1, "header", nCounterChapters & ". " & "MENUS", "MENUS", "name")

On Error GoTo Err_CollectMenus
    If (Not ObProject Is Nothing) Then
        'Loop Menu-Objects
            For nMenusIndex = 0 To ObProject.ZenMenus.Count - 1
                Set obZenMenu = ObProject.ZenMenus.Item(nMenusIndex)
                If (Not obZenMenu Is Nothing) Then
                    'Is the Menu Pulldown- or Popup-Menu?
                        If (obZenMenu.IsPulldown = True) Then
                            strMenuType = C_MENUITEMTYPE_PULLDOWN
                        Else
                            strMenuType = C_MENUITEMTYPE_POPUP
                        End If
                    'Tree-Title
                        Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 0, "subsubheader", obZenMenu.Name & " - Tree", "", "")
                    'Add Base for Tree
                        Set XSLStartPointForMenuTree = AddBaseForHTMLTree(curXMLDoc, curXMLItem)
                    'Details-Title
                        Call AddHTMLTitle(curXMLDoc, curXMLItem, 1, 0, "subsubheader", obZenMenu.Name & " - Details", "", "")
                    'Loop MenuItems
                        For nMenuIndex = 0 To obZenMenu.Count - 1
                            Set obZenMenuItem = obZenMenu.Item(nMenuIndex)
                            If Not (obZenMenuItem Is Nothing) Then
                                Call CollectMenusAnalyzeItem(obZenMenuItem, obZenMenu, strArrWantedProperties, XSLStartPointForMenuTree, strMenuType, obArrObjects, nCurArrDim, strArrayNames)
                            End If
                        Next
                    'Last Table, if needed
                        If (nCurArrDim > 1) Then
                            'Fill up Object-Array
                                For i = (nCurArrDim + 1) To UBound(obArrObjects)
                                    obArrObjects(i) = Nothing
                                    strArrayNames(i) = ""
                                Next
                            'Create HTML-Table
                                Call CollectMenusCreateHTMLTable(strArrWantedProperties, curXMLItem, obArrObjects, nCurArrDim, strArrayNames, strObjects, strHrefLinksFunctions, strHrefLinksVariables)
                        End If
                    'Reset Data
                        nCurArrDim = 1
                        Set obZenMenu = Nothing
                        Set XSLStartPointForMenuTree = Nothing
                        Set obZenMenuItem = Nothing
                End If
            Next
    End If

    'Write Files
        If Not (CreateFolder(PR_strDestination, C_PATHFOLDER_MENUS)) Then
            LogMessage ("Error while creating Menus-Folder!")
        End If
        If Not (SaveXMLFileAsHTML(curXMLDoc, C_PATHFILE_MENUS)) Then
            LogMessage ("Error while Saving Menus-Output!")
        End If
    
    'Free Memory
        Set obZenMenu = Nothing
        Set obZenMenuItem = Nothing
        Set XSLStartPointForMenuTree = Nothing
        Set obVariableLink = Nothing
        Set obFunctionLink = Nothing
        Set Table = Nothing
        ReDim obArrObjects(0 To 0) As ZenMenuItem
        ReDim strArrayTree(0 To 0) As String
        ReDim strArrWantedProperties(0 To 0) As String
        ReDim strArrayNames(0 To 0) As String

ModifyLastLogMessage ("..Done")
Exit Sub
Err_CollectMenus:
    LogMessage ("Error while retrieving information from Zenon Menu")
    Resume Next
Err_SetObject:
    Resume Next
End Sub

Function CollectMenusCreateHTMLTable(strArrWantedProperties() As String, XSLStartPoint As MSXML2.IXMLDOMElement, obArrObjects() As ZenMenuItem, nCurArrDim As Integer, strArrayNames() As String, strObjects As String, strHrefLinksFunctions As String, strHrefLinksVariables As String)

Dim Table As MSXML2.IXMLDOMElement
Dim strArray() As String
Dim strArrUsableDynProperties() As String
ReDim strArrUsableDynProperties(1 To C_COLS_MENUITEMSLIST) As String
ReDim strArray(1 To (C_COLS_MENUITEMSLIST + 1), 1 To 3) As String
Dim i As Integer
Dim j As Integer
Dim strTEMP As String
Dim obFunctionLink As RtFunction
Dim obVariableLink As Variable

On Error GoTo ErrHandler
    'Start Table
        Set Table = Nothing
        Set Table = AddHTMLTableStart(curXMLDoc, XSLStartPoint)
    '1st Row
        strArray(1, 1) = "Name"
        strArray(1, 2) = ""
        strArray(1, 3) = ""
        'Loop Array
            For i = 1 To C_COLS_MENUITEMSLIST
                If (obArrObjects(i) Is Nothing) Then
                    'Filler needed = Empty Column
                        strArray(i + 1, 1) = ""
                        strArray(i + 1, 2) = ""
                        strArray(i + 1, 3) = ""
                Else
                    'Information for Column
                        strArray(i + 1, 1) = strArrayNames(i)
                        strArray(i + 1, 2) = ""
                        strArray(i + 1, 3) = ""
                    'Usable Dynproperties for this object
                        strArrUsableDynProperties(i) = GetUsableDynProperties(obArrObjects(i).DynPropertiesEnum(""))
                End If
            Next
    'Write 1st Row
        Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_MENUITEMSLIST + 1, 0)
    'Get Properties from objects
        'Loop Wanted Properties
            For i = 1 To UBound(strArrWantedProperties)
                'Get Property
                    strTEMP = strArrWantedProperties(i, 2)
                'Row - 1st Column
                    strArray(1, 1) = strArrWantedProperties(i, 1)
                    strArray(1, 2) = ""
                    strArray(1, 3) = ""
                'Loop Array
                    For j = 1 To C_COLS_MENUITEMSLIST
                        'Row - following Columns
                            If (obArrObjects(j) Is Nothing) Then
                                'Filler needed = Empty Column
                                    strArray(j + 1, 1) = ""
                                    strArray(j + 1, 2) = ""
                                    strArray(j + 1, 3) = ""
                            Else
                                If (obArrObjects(j) Is Nothing) Then
                                    'Filler needed = Empty Column
                                        strArray(j + 1, 1) = ""
                                        strArray(j + 1, 2) = ""
                                        strArray(j + 1, 3) = ""
                                Else
                                    'Is the current Property available in this object?
                                        If (InStr(1, strArrUsableDynProperties(j), "|" & strTEMP & "|", 1) > 0) Then
                                            'Which DynProperties are Objects?
                                                If (InStr(1, strObjects, "|" & strTEMP & "|") > 0) Then
                                                    'Which DynProperties need to be linked to Functions in HTML?
                                                        If (InStr(1, strHrefLinksFunctions, "|" & strTEMP & "|") > 0) Then
                                                            On Error GoTo Err_SetObject
                                                                Set obFunctionLink = obArrObjects(j).DynProperties(strTEMP)
                                                            On Error GoTo ErrHandler
                                                            If (Not obFunctionLink Is Nothing) Then
                                                                strArray(j + 1, 1) = obFunctionLink.Name
                                                                If (ChkBox_Functions) Then
                                                                    strArray(j + 1, 2) = "href"
                                                                    strArray(j + 1, 3) = "..\" & C_PATHFILE_FUNCTIONS & "#Function[Entry-Name='" & obFunctionLink.Name & "']"
                                                                Else
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                                End If
                                                                Set obFunctionLink = Nothing
                                                            Else
                                                                strArray(j + 1, 1) = ""
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            End If
                                                        End If
                                                    'Which DynProperties need to be linked to Variables in HTML?
                                                        If (InStr(1, strHrefLinksVariables, "|" & strTEMP & "|") > 0) Then
                                                            On Error GoTo Err_SetObject
                                                                Set obVariableLink = obArrObjects(j).DynProperties(strTEMP)
                                                            On Error GoTo ErrHandler
                                                            If (Not obVariableLink Is Nothing) Then
                                                                strArray(j + 1, 1) = obVariableLink.Name
                                                                If (ChkBox_Variables) Then
                                                                    strArray(j + 1, 2) = "href"
                                                                    strArray(j + 1, 3) = "..\" & GetLinkForVariable(obVariableLink.Name)
                                                                Else
                                                                    strArray(j + 1, 2) = ""
                                                                    strArray(j + 1, 3) = ""
                                                                End If
                                                                Set obVariableLink = Nothing
                                                            Else
                                                                strArray(j + 1, 1) = ""
                                                                strArray(j + 1, 2) = ""
                                                                strArray(j + 1, 3) = ""
                                                            End If
                                                        End If
                                                Else
                                                    strArray(j + 1, 1) = obArrObjects(j).DynProperties(strTEMP)
                                                    strArray(j + 1, 2) = ""
                                                    strArray(j + 1, 3) = ""
                                                End If
                                        Else
                                            strArray(j + 1, 1) = ""
                                            strArray(j + 1, 2) = ""
                                            strArray(j + 1, 3) = ""
                                        End If
                                End If
                            End If
                    Next
                'Write Row
                    Call AddHTMLTableRow(curXMLDoc, Table, strArray, C_COLS_MENUITEMSLIST + 1, i)
            Next
    'Reset Counter and Array
        nCurArrDim = 0
        ReDim strArray(1 To C_COLS_MENUITEMSLIST + 1, 1 To 3) As String
        ReDim obArrObjects(1 To C_COLS_MENUITEMSLIST) As ZenMenuItem
    
    'Free Memory
        Set Table = Nothing
        Set obFunctionLink = Nothing
        Set obVariableLink = Nothing
        ReDim strArrUsableDynProperties(0 To 0) As String
        ReDim strArray(0 To 0) As String

Exit Function
Err_SetObject:
    Resume Next
ErrHandler:
    Resume Next
End Function


Public Function ColorToHex(Color As Long) As String

Dim r, g, b As Byte
Dim hex1, hex2, hex3 As String
Dim strTEMP As String

r = Color And 255
g = (Color \ 256) And 255
b = (Color \ 65536) And 255
strTEMP = r & "," & g & "," & b

'get the r value
If r < 16 Then
    hex1 = 0 & Hex(r)
Else
    hex1 = Hex(r)
End If

'get the g value
If r < 16 Then
    hex2 = 0 & Hex(g)
Else
    hex2 = Hex(g)
End If

'get the b value
If b < 16 Then
    hex3 = 0 & Hex(b)
Else
    hex3 = Hex(b)
End If

ColorToHex = "#" & hex1 & hex2 & hex3

End Function

Private Function CollectMenusAnalyzeItem(obZenMenuItem As ZenMenuItem, obZenMenu As ZenMenu, strArrWantedProperties() As String, XSLStartPointForMenuTree As MSXML2.IXMLDOMElement, strMenuType As String, obArrObjects() As ZenMenuItem, nCurArrDim As Integer, strArrayNames() As String)

Dim obZenMenuItem_subitem As ZenMenuItem
Dim nItemIndex As Integer
Dim strObjects As String
Dim strHrefLinksFunctions As String
Dim obFunctionLink As RtFunction
Dim strHrefLinksVariables As String
Dim obVariableLink As Variable
Dim XSLStartPointForMenuTree_local As MSXML2.IXMLDOMElement
Dim strTempCaption As String
Dim strID As String
Dim strArrayTree() As String

Set XSLStartPointForMenuTree_local = XSLStartPointForMenuTree

'Which DynProperties are Objects?
    strObjects = "|Function||Variable|"
'Which DynProperties need to be linked to Functions in HTML?
    strHrefLinksFunctions = "|Function|"
'Which DynProperties need to be linked to Variables in HTML?
    strHrefLinksVariables = "|Variable|"

On Error GoTo Err_CollectMenusAnalyzeItem
    If (Not obZenMenuItem Is Nothing) Then
        strID = "ID" & obZenMenuItem.id
        'For MenuItems without Caption
            If (obZenMenuItem.Caption = "") Then
                strTempCaption = "<Empty>"
            Else
                strTempCaption = obZenMenuItem.Caption
            End If
        'Which Icon for the Tree
            If (obZenMenuItem.Count > 0) Then
                If ((obZenMenuItem.Parent.Name <> obZenMenu.Name) And strMenuType <> C_MENUITEMTYPE_POPUP) Then
                    strMenuType = C_MENUITEMTYPE_PULLDOWNITEM
                End If
            Else
                If (strMenuType <> C_MENUITEMTYPE_POPUP) Then
                    strMenuType = C_MENUITEMTYPE_PULLDOWNITEM
                End If
            End If
        'Tree-Entry
            ReDim strArrayTree(1 To 10) As String
            strArrayTree(1) = strTempCaption
            strArrayTree(2) = "#Menu[Entry-Name='" & obZenMenu.Name & "']/MenuEntry[Entry-ID='" & strID & "']"
            strArrayTree(3) = "href"
            strArrayTree(4) = strMenuType
            Set XSLStartPointForMenuTree_local = AddEntryForHTMLTree(strArrayTree, curXMLDoc, XSLStartPointForMenuTree)
        'Save Items in Arrays
            Set obArrObjects(nCurArrDim) = obZenMenuItem
            strArrayNames(nCurArrDim) = strTempCaption
        'Are there enough objects in the array to write a table?
            If (nCurArrDim = C_COLS_MENUITEMSLIST) Then
                'Create HTML Table
                    Call CollectMenusCreateHTMLTable(strArrWantedProperties, curXMLItem, obArrObjects, nCurArrDim, strArrayNames, strObjects, strHrefLinksFunctions, strHrefLinksVariables)
            End If
            'Add to counter
                nCurArrDim = nCurArrDim + 1
        'Does this MenuItem have SubItems?
            If (obZenMenuItem.Count > 0) Then
                'Loop SubItems
                    For nItemIndex = 0 To obZenMenuItem.Count
                        Set obZenMenuItem_subitem = obZenMenuItem.Item(nItemIndex)
                        Call CollectMenusAnalyzeItem(obZenMenuItem_subitem, obZenMenu, strArrWantedProperties, XSLStartPointForMenuTree_local, strMenuType, obArrObjects, nCurArrDim, strArrayNames)
                    Next
            End If
    End If

Exit Function
Err_CollectMenusAnalyzeItem:
    Resume Next
Err_SetObject:
    Resume Next
End Function



Private Function AddNormalHTMLText(nNewLinesBefore As Integer, nNewLinesAfter As Integer, XMLDoc As MSXML2.DOMDocument, XMLParent As MSXML2.IXMLDOMElement, strText As String, strLink As String, strLinktype As String)

Dim XMLItem As MSXML2.IXMLDOMElement
Dim i As Integer

On Error GoTo Err_Handler
    
    'New Lines Before
        If (nNewLinesBefore > 0) Then
            For i = 1 To nNewLinesBefore
                Call addElement(XMLDoc, XMLParent, "br", "")
            Next
        End If

    'Link needed?
        If (strLinktype <> "") Then
            Set XMLItem = addElement(XMLDoc, XMLParent, "a", "")
                XMLItem.setAttribute strLinktype, strLink
        Else
            Set XMLItem = XMLParent
        End If

    'Text
        Set XMLItem = addElement(XMLDoc, XMLItem, "span", strText)
            XMLItem.setAttribute "class", "Normal_line"

    'New Lines After
        If (nNewLinesAfter > 0) Then
            For i = 1 To nNewLinesAfter
                Call addElement(XMLDoc, XMLParent, "br", "")
            Next
        End If

    'Free Memory
        Set XMLItem = Nothing

Exit Function
Err_Handler:
    Resume Next
End Function



'****************************************************************************
' Methode:      AddImageItem(...)
' Parameter:    strFilename As String, XMLDoc As MSXML2.DOMDocument, XMLParent As MSXML2.IXMLDOMElement, nHeight As Integer, nWidth As Integer
' Description:  Adds an Image-item to the outputfile.
' Autor:        Stephan Raats   Datum:  07.04.2005
'****************************************************************************
Private Function AddImageItem(strFileName As String, XMLItem As MSXML2.IXMLDOMElement, nHeight As Integer, nWidth As Integer)
Dim Image As MSXML2.IXMLDOMElement
Dim Link As MSXML2.IXMLDOMElement
Dim nTemp As Double
Dim nHeightcm As Double

'Calculate the Height in cm for the HTML-Output
    nTemp = nWidth / nHeight
    nHeightcm = m_TxtBox_HardcopyMaxWide.value / nTemp

On Error GoTo Err_ItemHeader
    Set Link = addElement(curXMLDoc, XMLItem, "a", "")
        Link.setAttribute "href", strFileName
        Set Image = addElement(curXMLDoc, Link, "img", "")
        If (nWidth <= 378 And nHeight <= 256) Then
            Image.setAttribute "width", nWidth
            Image.setAttribute "height", nHeight
        Else
            Image.setAttribute "style", "width:" & m_TxtBox_HardcopyMaxWide.value & "cm;height:" & nHeightcm & "cm"
        End If
        Image.setAttribute "src", strFileName
        If (ChkBox_FrameHardcopy) Then
            Image.setAttribute "border", 1
        End If
    Call addElement(curXMLDoc, XMLItem, "br", "")

'Free Memory
    Set Image = Nothing
        
Exit Function
Err_ItemHeader:
    LogMessage ("Error while adding item Image:" & strFileName)
    Resume Next
End Function

Private Function AddBaseForHTMLTree(XMLDoc As MSXML2.DOMDocument, XMLNode As MSXML2.IXMLDOMElement) As MSXML2.IXMLDOMElement
    Set AddBaseForHTMLTree = addElement(XMLDoc, XMLNode, "span", "")
End Function

Private Function AddSpanForHTML(XMLDoc As MSXML2.DOMDocument, XMLNode As MSXML2.IXMLDOMElement, strClass As String) As MSXML2.IXMLDOMElement

Dim XMLItemTemp As MSXML2.IXMLDOMElement

Set XMLItemTemp = addElement(XMLDoc, XMLNode, "span", "")
If (Not strClass = "") Then
    XMLItemTemp.setAttribute "class", strClass
End If

Set AddSpanForHTML = XMLItemTemp

End Function

Private Function AddEntryForHTMLTree(strArray() As String, XMLDoc As MSXML2.DOMDocument, XMLStartItem As MSXML2.IXMLDOMElement) As MSXML2.IXMLDOMElement

'Details on the Array
'1: Entry-Caption
'2: Link for the Caption
'3: Linktype for the Caption
'4: Entry-Type
'5: Additional Information to be linked
'6: Link for the Additional Information
'7: Additional Information without link
'8: style-class for Entry-Caption
'9: style-class for linked additional information
'10: style-class for additional information without link

Dim XMLItem As MSXML2.IXMLDOMElement
Dim XMLItemChild As MSXML2.IXMLDOMElement
Dim XMLItemGrandchild As MSXML2.IXMLDOMElement

'span for class
Set XMLItem = addElement(XMLDoc, XMLStartItem, "span", "")
    XMLItem.setAttribute "class", "TreeEntry"
    
    'Icon
        Set XMLItemChild = addElement(XMLDoc, XMLItem, "img", "")
            XMLItemChild.setAttribute "src", strArray(4)
            XMLItemChild.setAttribute "border", "0"
        
    'Caption-Link
        If (Not strArray(2) = "") Then
            Set XMLItemChild = addElement(XMLDoc, XMLItem, "a", "")
                XMLItemChild.setAttribute strArray(3), strArray(2)
        Else
            Set XMLItemChild = XMLItem
        End If
    'Caption
        Set XMLItemGrandchild = addElement(XMLDoc, XMLItemChild, "span", strArray(1))
        If (strArray(8) <> "") Then
            XMLItemGrandchild.setAttribute "class", strArray(8)
        End If

    If (Not strArray(5) = "" Or Not strArray(7) = "") Then
        'left parenthesis
            Call addElement(XMLDoc, XMLItem, "span", " (")
    End If

    'Additional Information linked Information
        If (Not strArray(5) = "" And Not strArray(6) = "") Then
            'Link
                Set XMLItemChild = addElement(XMLDoc, XMLItem, "a", "")
                    XMLItemChild.setAttribute "href", strArray(6)
                'Additional Information
                    Set XMLItemGrandchild = addElement(XMLDoc, XMLItemChild, "span", strArray(5))
                    If (strArray(9) <> "") Then
                        XMLItemGrandchild.setAttribute "class", strArray(9)
                    End If
        ElseIf (Not strArray(5) = "") Then
            'Additional linked Information without link
                Set XMLItemChild = addElement(XMLDoc, XMLItem, "span", strArray(5))
                If (strArray(9) <> "") Then
                    XMLItemChild.setAttribute "class", strArray(9)
                End If
        End If
    
    'Additional Information without Link
        If (Not strArray(7) = "") Then
            'Additional Information without Link
                Set XMLItemChild = addElement(XMLDoc, XMLItem, "span", " " & strArray(7))
                If (strArray(10) <> "") Then
                    XMLItemChild.setAttribute "class", strArray(10)
                End If
        End If
        
    If (Not strArray(5) = "" Or Not strArray(7) = "") Then
        'right parenthesis
            Call addElement(XMLDoc, XMLItem, "span", ")")
    End If
        
Set AddEntryForHTMLTree = XMLItem

'Free Memory
    Set XMLItem = Nothing
    Set XMLItemChild = Nothing
    Set XMLItemGrandchild = Nothing

End Function


Private Function GetColorForTable()
'Increments the Color Number and translates the number to a string for the CSS Stylesheet
    If (nCurColor = C_AMOUNT_OF_COLORS_IN_CSS) Then
        nCurColor = 1
    Else
        nCurColor = nCurColor + 1
    End If
    ' Convert Colornummer to a Color-string
    Select Case nCurColor
        Case 1
            strCurColor = "one"
        Case 2
            strCurColor = "two"
        Case 3
            strCurColor = "three"
        Case 4
            strCurColor = "four"
        Case 5
            strCurColor = "five"
        Case Else    ' Andere Werte.
            strCurColor = "one"
            Debug.Print "C_AMOUNT_OF_COLORS_IN_CSS is bigger than the conversion to Strings"
    End Select
End Function


Function dhQuickSort(varArray As Variant, _
 Optional intLeft As Integer = dhcMissing, _
 Optional intRight As Integer = dhcMissing)

    ' From "VBA Developer's Handbook"
    ' by Ken Getz and Mike Gilbert
    ' Copyright 1997; Sybex, Inc. All rights reserved.
    
    ' Entry point for sorting the array.
    
    ' This technique uses the recursive Quicksort
    ' algorithm to perform its sort.
    
    ' In:
    '   varArray:
    '       A variant pointing to an array to be sorted.
    '       This had better actually be an array, or the
    '       code will fail, miserably. You could add
    '       a test for this:
    '       If Not IsArray(varArray) Then Exit Sub
    '       but hey, that would slow this down, and it's
    '       only YOU calling this procedure.
    '       Make sure it's an array. It's your problem.
    '   intLeft:
    '   intRight:
    '       Lower and upper bounds of the array to be sorted.
    '       If you don't supply these values (and normally, you won't)
    '       the code uses the LBound and UBound functions
    '       to get the information. In recursive calls
    '       to the sort, the caller will pass this information in.
    '       To allow for passing integers around (instead of
    '       larger, slower variants), the code uses -2 to indicate
    '       that you've not passed a value. This means that you won't
    '       be able to use this mechanism to sort arrays with negative
    '       indexes, unless you modify this code.
    ' Out:
    '       The data in varArray will be sorted.
    
    Dim i As Integer
    Dim j As Integer
    Dim varTestVal As Variant
    Dim intMid As Integer

    If intLeft = dhcMissing Then intLeft = LBound(varArray)
    If intRight = dhcMissing Then intRight = UBound(varArray)
   
    If intLeft < intRight Then
        intMid = (intLeft + intRight) \ 2
        varTestVal = varArray(intMid)
        i = intLeft
        j = intRight
        Do
            Do While varArray(i) < varTestVal
                i = i + 1
            Loop
            Do While varArray(j) > varTestVal
                j = j - 1
            Loop
            If i <= j Then
                SwapElements varArray, i, j
                i = i + 1
                j = j - 1
            End If
        Loop Until i > j
        ' To optimize the sort, always sort the
        ' smallest segment first.
        If j <= intMid Then
            Call dhQuickSort(varArray, intLeft, j)
            Call dhQuickSort(varArray, i, intRight)
        Else
            Call dhQuickSort(varArray, i, intRight)
            Call dhQuickSort(varArray, intLeft, j)
        End If
    End If
End Function


Private Sub SwapElements(varItems As Variant, intItem1 As Integer, intItem2 As Integer)
    Dim VarTemp As Variant

    VarTemp = varItems(intItem2)
    varItems(intItem2) = varItems(intItem1)
    varItems(intItem1) = VarTemp
End Sub


Private Function GetPath(value As Long) As String
    Dim blnReturn As Long
    Dim strBuffer As String
    strBuffer = Space(255)
    blnReturn = SHGetSpecialFolderPath(value, _
        strBuffer, _
        value, _
        False)
    strBuffer = Left(strBuffer, InStr(strBuffer, Chr(0)) - 1)
    GetPath = strBuffer
End Function


Private Function GetLinkForVariable(strName As String) As String

Dim i As Integer

For i = 1 To UBound(strFileNamesArray, 1)
    If (strFileNamesArray(i, 1) = strName) Then
        GetLinkForVariable = strFileNamesArray(i, 2)
        Exit Function
    End If
Next

GetLinkForVariable = ""

End Function

Sub GetSettingList()
'read lastsettings.xml for saved saettings
    Dim XMLLastSettings As New MSXML2.DOMDocument
    Dim node As IXMLDOMElement
    Dim nodeID As IXMLDOMAttribute
    Dim strSourcePath As String
    Dim SettingsCount As Integer
    Dim i As Integer
    
    XMLLastSettings.async = False
    'Get Destinationpath
'    strSourcePath = MyWorkspace.Application.Path
'    strSourcePath = Replace(strSourcePath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
    'RF: NEW Method >= 6.21!
    strSourcePath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
    strSourcePath = strSourcePath & "Wizards\DocuWizard\LastSettings.xml"
    XMLLastSettings.Load strSourcePath
    If (XMLLastSettings.parseError.errorCode <> 0) Then
        cbxSettings.Visible = False
        cmdSaveSettings.Visible = False
        Exit Sub
    Else
        'XML has been loaded
        Set node = XMLLastSettings.selectSingleNode("//root//SettingsCount")
        SettingsCount = Val(node.Text)
        cbxSettings.Clear
        For i = 1 To SettingsCount
            Set node = XMLLastSettings.selectSingleNode("//root//SettingsFile[" & i & "]")
            cbxSettings.AddItem node.Text
        Next i
    End If
End Sub

Function LoadSettingsXML(Optional Setting2Load As String = "LastSettings.xml") As Boolean
'Load LastSettings.xml
    Dim ObProject As Project
    Dim XMLLastSettings As New MSXML2.DOMDocument
    Dim node As IXMLDOMElement
    Dim nodeID As IXMLDOMAttribute
    On Error Resume Next
    Set ObProject = MyWorkspace.ActiveDocument
    XMLLastSettings.async = False
    'Get Destinationpath
        Dim strSourcePath As String
'        strSourcePath = MyWorkspace.Application.Path
'        strSourcePath = Replace(strSourcePath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
        'RF: NEW Method >= 6.21!
        strSourcePath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
        strSourcePath = strSourcePath & "Wizards\DocuWizard\" 'LastSettings.xml"
        strSourcePath = strSourcePath & Setting2Load
    XMLLastSettings.Load strSourcePath
    If (XMLLastSettings.parseError.errorCode <> 0) Then
        LoadSettingsXML = True
        'DestinationPaths
        PR_strDestination = PR_strMyDocuments & ObProject.Name & "\"
        lblDestination.Caption = PR_strMyDocuments & ObProject.Name & "\"
    Else
        'XML has been loaded
            LoadSettingsXML = False
            Set node = XMLLastSettings.selectSingleNode("//root//SettingsCount")
            
            Set node = XMLLastSettings.selectSingleNode("//root//Projectname")
            If (node.Text <> ObProject.Name) Then    'Project has changed since last Save of settings
                'DestinationPaths
                PR_strDestination = PR_strMyDocuments & PR_obProject.Name & "\"
                lblDestination.Caption = PR_strMyDocuments & PR_obProject.Name & "\"
            Else   'Same Project take path from last settings
                'DestinationPaths
                Set node = XMLLastSettings.selectSingleNode("//root/MainOptions//PR_strDestination")
                lblDestination.Caption = node.Text
                PR_strDestination = node.Text
            End If
            
            'Main Options
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Project")
                    ChkBox_Project = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Variables")
                    ChkBox_Variables = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Datatypes")
                    ChkBox_Datatypes = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Pictures")
                    ChkBox_Pictures = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Functions")
                    ChkBox_Functions = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Templates")
                    ChkBox_Templates = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Recipes")
                    ChkBox_Recipes = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_RGM")
                    ChkBox_RGM = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Drivers")
                    ChkBox_Drivers = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Scripts")
                    ChkBox_Scripts = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_TimeControls")
                    ChkBox_TimeControls = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Archives")
                    ChkBox_Archives = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Users")
                    ChkBox_Users = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Menus")
                    ChkBox_Menus = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Remas")
                    ChkBox_Remas = node.Text
                Set node = XMLLastSettings.selectSingleNode("//root//MainOptions//ChkBox_Straton")
                    ChkBox_Straton = node.Text
            'Project
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Project//Selections")
                        strProjectProperties_Selection = node.Text
            'Variables
                'Main Form
                    'Add Extended Properties if they have been enabled the last time
                        Set node = XMLLastSettings.selectSingleNode("//root//Variables//MoreEnabled")
                        If Not (node Is Nothing) Then
                            Call CmdBtn_KonfVar_More_Click
                        Else
                            Call CmdBtn_KonfVar_Less_Click
                        End If
                    'Set Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Variables//Selections")
                            strVariableProperties_Selection = node.Text
                    'Chkbox "Include VariableUsage"
                        Set node = XMLLastSettings.selectSingleNode("//root//Variables//ChkBox_InclVariableUsage")
                            ChkBox_InclVariableUsage = node.Text
                    'Chkbox "Include Limits / Remas"
                        Set node = XMLLastSettings.selectSingleNode("//root//Variables//ChkBox_InclVarLimits")
                            ChkBox_InclVarLimits = node.Text
                'VariableLimits Forms
                    'Set Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Variables//VariablesLimits//Selections")
                            strVarLimitProperties_Selection = node.Text
            'Datatypes
                'Main Form
                    'Add Extended Properties if they have been enabled the last time
                        Set node = XMLLastSettings.selectSingleNode("//root//Datatypes//MoreEnabled")
                        If Not (node Is Nothing) Then
                            Call CmdBtn_KonfVarTypes_More_Click
                        Else
                            Call CmdBtn_KonfVarTypes_Less_Click
                        End If
                    'Set Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Datatypes//Selections")
                            strDatatypeProperties_Selection = node.Text
                    'Chkbox "Include Limits / Remas"
                        Set node = XMLLastSettings.selectSingleNode("//root//Datatypes//ChkBox_InclVarTypesLimits")
                            ChkBox_InclVarTypesLimits = node.Text
                'DatatypesLimits Forms
                    'Set Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Datatypes//DatatypesLimits//Selections")
                            strVartypeLimitProperties_Selection = node.Text
             'Pictures
                'Main Form
                    'Add Extended Properties if they have been enabled the last time
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//MoreEnabled")
                        If Not (node Is Nothing) Then
                            Call CmdBtn_KonfPict_More_Click
                        Else
                            Call CmdBtn_KonfPict_Less_Click
                        End If
                    'Set Main Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//Selections")
                            strPictureProperties_Selection = node.Text
                    'Chkbox "Include Hardcopy/Slide"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//ChkBox_InclHardcopy")
                            ChkBox_InclHardcopy = node.Text
                    'TxtBox "m_TxtBox_HardcopyMaxWide"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//m_TxtBox_HardcopyMaxWide")
                            m_TxtBox_HardcopyMaxWide.value = node.Text
                    'Chkbox "Include PictureTree"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//ChkBox_InclPictureTree")
                            ChkBox_InclPictureTree = node.Text
                    'Chkbox "Draw Border"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//Main//ChkBox_FrameHardcopy")
                            ChkBox_FrameHardcopy = node.Text
                'PictureTree Form
                    'CmboBox Picture
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//ScreenTree//CmboBox_Pictures")
                            CmboBox_Pictures = node.Text
                    'OptionButton "StartPicture or Autostart-Script"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//ScreenTree//OptBtn_PictTreeviaStart")
                            OptBtn_PictTreeviaStart = node.Text
                    'OptionButton "Picture"
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//ScreenTree//OptBtn_PictTreeviaPicture")
                            OptBtn_PictTreeviaPicture = node.Text
                'PictureElements Forms
                    'Add Extended Properties if they have been enabled the last time
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//ScreenElements//MoreEnabled")
                        If Not (node Is Nothing) Then
                            Call CmdBtn_KonfPictElem_More_Click
                        Else
                            Call CmdBtn_KonfPictElem_Less_Click
                        End If
                    'Set Main Selections for Listbox
                        Set node = XMLLastSettings.selectSingleNode("//root//Screens//ScreenElements//Selections")
                            strPictureElementProperties_Selection = node.Text
            'Functions
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Functions//Selections")
                        strFunctionProperties_Selection = node.Text
                'Chkbox "Include FunctionUsage"
                    Set node = XMLLastSettings.selectSingleNode("//root//Functions//ChkBox_InclFunctionUsage")
                        ChkBox_InclFunctionUsage = node.Text
            'Templates
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Frames//Selections")
                        strTemplateProperties_Selection = node.Text
            'Recipes
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Recipes//Selections")
                        strRecipeProperties_Selection = node.Text
                'Set Selections for VariablesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Recipes//VariablesSelections")
                        strRecipeVariablesProperties_Selection = node.Text
            'RGM
                'Set Selections for VariablesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//RGM//VariablesSelections")
                        strRGMVariablesProperties_Selection = node.Text
                'Set Selections for RecipesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//RGM//RecipesSelections")
                        strRGMRecipeProperties_Selection = node.Text
                'Set Selections for RecipeVariablesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//RGM//RecipeVariablesSelections")
                        strRGMRecipePropertiesVariables_Selection = node.Text
            'TimeControls
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//TimeControls//Selections")
                        strTimeProperties_Selection = node.Text
            'Archives
                'Add Extended Properties if they have been enabled the last time
                    Set node = XMLLastSettings.selectSingleNode("//root//Historian//MoreEnabled")
                    If Not (node Is Nothing) Then
                        Call CmdBtn_KonfArchive_More_Click
                    Else
                        Call CmdBtn_KonfArchive_Less_Click
                    End If
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Historian//Selections")
                        strArchiveProperties_Selection = node.Text
                'Set Selections for VariablesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Historian//VariablesSelections")
                        strArchiveVariablesProperties_Selection = node.Text
            'Users
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Users//Selections")
                        strUserProperties_Selection = node.Text
            'Menus
                'Add Extended Properties if they have been enabled the last time
                    Set node = XMLLastSettings.selectSingleNode("//root//Menus//MoreEnabled")
                    If Not (node Is Nothing) Then
                        Call CmdBtn_KonfMenus_More_Click
                    Else
                        Call CmdBtn_KonfMenus_Less_Click
                    End If
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Menus//Selections")
                        strMenuProperties_Selection = node.Text
            'Remas
                'Set Selections for Listbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Remas//Selections")
                        strRemaProperties_Selection = node.Text
                'Add Extended Properties if they have been enabled the last time
                    Set node = XMLLastSettings.selectSingleNode("//root//Remas//StatesMoreEnabled")
                    If Not (node Is Nothing) Then
                        Call CmdBtn_KonfRemas_State_More_Click
                    Else
                        Call CmdBtn_KonfRemas_State_Less_Click
                    End If
                'Set Selections for VariablesListbox
                    Set node = XMLLastSettings.selectSingleNode("//root//Remas//StatesSelections")
                        strStateProperties_Selection = node.Text
                    
'            Else
'                'The current Project is not the one the settings where saved for
'                LoadSettingsXML = True
'            End If
        'Free Memory
            Set node = Nothing
    End If
End Function

'************************************************************************'
'                  FUNCTIONS FOR READ/WRITE INI FILES                    '
'************************************************************************'
'########################################################################'
'# Function for reading information from an INI file                    #'
'########################################################################'
Function Read_ProjectINI(SECTION As String, xKey As String) As String
    Dim lpDefault$, lpReturnString$
    Dim Size%, Valid%, Succ%
    Dim strDestPath As String
    On Error GoTo FileError
    
    strDestPath = PR_obProject.Path & "zenon\system\project.ini"
    
    lpDefault$ = ""
    lpReturnString$ = Space$(128)
    Size% = Len(lpReturnString$)
    Valid% = GetPrivateProfileString(SECTION, xKey, lpDefault$, lpReturnString$, Size%, strDestPath)
    DoEvents
    Read_ProjectINI = Left$(lpReturnString$, Valid%)
    Exit Function
FileError:
    Resume Next
End Function

'########################################################################'
'# Function for reading information from an INI file                    #'
'########################################################################'
Function Read_INI(SECTION As String, xKey As String) As String
    Dim lpDefault$, lpReturnString$
    Dim Size%, Valid%, Succ%
    Dim strDestPath As String
    On Error GoTo FileError
    
'    strDestPath = MyWorkspace.Application.Path
'    strDestPath = Replace(strDestPath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
    'RF: NEW Method >= 6.21!
    strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
    strDestPath = strDestPath & "Wizards\DocuWizard\Settings.ini"
    
    lpDefault$ = ""
    lpReturnString$ = Space$(128)
    Size% = Len(lpReturnString$)
    Valid% = GetPrivateProfileString(SECTION, xKey, lpDefault$, lpReturnString$, Size%, strDestPath)
    DoEvents
    Read_INI = Left$(lpReturnString$, Valid%)
    Exit Function
FileError:
    Resume Next
End Function

'########################################################################'
'# Function to save information into an INI file                        #'
'########################################################################'
Function Write_INI(SECTION As String, xKey As String, xString As String)
    Dim strDestPath As String
    On Error GoTo FileError
    
'    strDestPath = MyWorkspace.Application.Path
'    strDestPath = Replace(strDestPath, "ZENONE32.exe", "", 1, -1, vbTextCompare)
    'RF: NEW Method >= 6.21!
    strDestPath = ApplicationED.zenOnPath(tpzenOnAppDataPath)
    strDestPath = strDestPath & "Wizards\DocuWizard\Settings.ini"
    Write_INI = WritePrivateProfileString(SECTION, xKey, xString, strDestPath)
    Exit Function
FileError:
    Resume Next
End Function

Private Sub cmdNext_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdNext.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdBack_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdFinish_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdFinish.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdCancel.BackColor = rgb(160, 234, 255)
End Sub
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(232, 232, 232)
    cmdNext.BackColor = rgb(232, 232, 232)
    cmdFinish.BackColor = rgb(232, 232, 232)
    cmdCancel.BackColor = rgb(232, 232, 232)
End Sub

Sub EnableMore()
Dim i As Integer
Dim MyCtrl As Control
On Error Resume Next
    For i = 0 To Me.Controls.Count - 1
        Set MyCtrl = Me.Controls.Item(i)
        If InStr(1, MyCtrl.Caption, "More") > 0 Then
            MyCtrl.Enabled = True
        End If
    Next i
End Sub


Attribute VB_Name = "frmFLImportWizard"
Attribute VB_Base = "0{47279450-0177-4023-869E-24ECE2AD57A6}{BC633D10-6A2B-49CA-BC3B-724E8A5FD432}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
    ' *                               FactoryLink Import Wizard                                   *
    ' *********************************************************************************************
    ' *                      Version:             10                                              *
    ' *                      Created:             31.01.2011                                      *
    ' *                      Created by:          unknown                                         *
    ' *                      Last change:         25.03.2013                                      *
    ' *                      Last change by:      Alexander Resinger                              *
    ' *                      Optimized for:       7.10                                            *
    ' *********************************************************************************************
    ' *    Description:  Only for zenon ED 32bit                                                  *
    ' *                                                                                           *
    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
Option Explicit

'*************** For ShowBrowseFolderDialog ****************
Private Type BrowseInfo
    lngHwnd        As Long
    pIDLRoot       As Long
    pszDisplayName As Long
    lpszTitle      As Long
    ulFlags        As Long
    lpfnCallback   As Long
    lParam         As Long
    iImage         As Long
End Type

Private Const BIF_RETURNONLYFSDIRS = 1
Private Const MAX_PATH = 260
#If Not Win64 Then
    Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32.dll" (ByVal hMem As Long)
    Private Declare PtrSafe Function lstrcat Lib "kernel32" _
       Alias "lstrcatA" (ByVal lpString1 As String, _
       ByVal lpString2 As String) As Long
    Private Declare PtrSafe Function SHBrowseForFolder Lib "shell32" (lpbi As BrowseInfo) As Long
    Private Declare PtrSafe Function SHGetPathFromIDList Lib "shell32" _
            (ByVal pidList As Long, ByVal lpBuffer As String) As Long
#Else
    Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32.dll" (ByVal hMem As Long)
    Private Declare PtrSafe Function lstrcat Lib "kernel32" _
       Alias "lstrcatA" (ByVal lpString1 As String, _
       ByVal lpString2 As String) As LongPtr
    Private Declare PtrSafe Function SHBrowseForFolder Lib "shell32" (lpbi As BrowseInfo) As Long
    Private Declare PtrSafe Function SHGetPathFromIDList Lib "shell32" _
            (ByVal pidList As LongPtr, ByVal lpBuffer As String) As Long
#End If
'************** /For ShowBrowseFolderDialog ****************

Private Type tpItem
    PropValue() As String
End Type

Private Type EntryItem
    Name As String
    nPropCount As Integer
    nItemCount As Integer
    PropName() As String
    Items() As tpItem
End Type

Private m_PRJ_ObjectsAsc As EntryItem
Private m_PRJ_IML_TagsAsc As EntryItem

Private m_MimicFilePaths As EntryItem
Private m_TemplateFilePaths As EntryItem
Private m_BitmapFilePaths As EntryItem
Private m_SymbolFilePaths As EntryItem

Private m_zInternDriver As Driver

'Private m_arStrNotImportedVars() As String
'Private m_nNotImportedVarsCounter As Integer

Private Type Color
    index As Long
    RGBvalue As Long
    Transparent As Boolean
    Gradient As Boolean
    RGBGradient As Long
    RGBGradient2 As Long
    ColorGradientOffset As Integer
    ColorGradientAngle As Integer
    
End Type

Private Type ColorInformation
    Colors() As Color
    Count As Long
    PictureName As String
    SymbolName As String
End Type

Private m_ColorInformation As ColorInformation

Private Type FontInformation
    Fonts() As New StdFont
    Count As Long
    PictureName As String
End Type

Private m_FontInformation As FontInformation

Private Type SymbolList
    Symbol As Element
    Name As String
End Type

Private m_SymbolList As SymbolList

Private m_nElementsCounter As Integer

Private Type LanguageInformation
    Count As Integer
    MultiLang() As Variant
End Type

Dim m_SymbolColors As ColorInformation
Dim m_SymbolFonts As FontInformation

Private m_LanguageInformation As LanguageInformation

Public m_ProgressFactor As Integer

'**********************************************************************************************************************
'********************************************* Wizard Informations ****************************************************
'
'
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardName() As String
    GetWizardName = "FactoryLink Import Wizard"
End Function
Public Function GetWizardInfo() As String
    GetWizardInfo = "This wizard imports FactoryLink projects into zenon.(only zenon ED 32bit)"
End Function
Public Function GetWizardCategory() As String
    GetWizardCategory = "Export/Import"
End Function
Public Function IsZenOnWizard() As Boolean
    #If Win64 Then
        IsZenOnWizard = False
    #Else
        IsZenOnWizard = True
    #End If
End Function
Public Function GetWizardVersion() As Integer
    GetWizardVersion = 10
    '27.08.2008 - version 1 - templates, mimic creation, object creation in mimics working
    '04.09.2008 - version 2 - fixed some bugs, language creation, enhanced mimic creation,
    '                         added project import wizard possibility and project reload
    '10.10.2008 - version 3 - templates changed, symbol import, ColorBit animation conversion
    '                         fixed some bugs, increased performance dramatically
    '23.10.2008 - version 4 - templates changed again -> added popup support, DisplayRegister
    '                         animation, implemented ColorBit for all elements, fixed BackColor
    '13.11.2008 - version 5 - manual symbol import, OBG animation support, filters in event list
    '                         wizard now can take symbols out of the local symbol library
    '09.07.2009 - version 6 - several bugfixes
    '10.08.2010 - version 7 - fixed a positioning bug for zenon 6.50 and 6.51. Sorry it took so long.
    '22.09.2010 - version 8 - problem was a fix path for testing...
    '02.04.2012 - version 9 - fixed problem with symbols Def# 26413,24750
    '25.01.2013 - version 10 -  Redesign and updated for zenon 7.10
End Function
'
'
'**********************************************************************************************************************
'*********************************************/ Wizard Informations ***************************************************

'Public m_TakeSymbolsFromLibrary As Boolean


'******************* JUST FOR TESTING **************************
Private Sub DeleteVariables()
    Dim i As Integer
    For i = 0 To MyWorkspace.ActiveDocument.Variables.Count - 1
        MyWorkspace.ActiveDocument.Variables.DeleteVar (MyWorkspace.ActiveDocument.Variables.Item(i).Name)
    Next
    MsgBox ("All variables were deleted")
        
End Sub
'****************** /JUST FOR TESTING **************************

'******************* JUST FOR TESTING **************************
Private Sub DeleteTemplates()
    Dim i As Integer

    If MyWorkspace.ActiveDocument Is Nothing Then
        Exit Sub
    End If

    If (MyWorkspace.ActiveDocument.Templates.Count > 0) Then
        For i = MyWorkspace.ActiveDocument.Templates.Count - 1 To 0 Step -1

            If MyWorkspace.ActiveDocument.Templates.Item(i) Is Nothing Then
                Exit For
            End If

            If MyWorkspace.ActiveDocument.Templates.Item(i).Name = "" Then
                Exit For
            End If

            MyWorkspace.ActiveDocument.Templates.Delete (MyWorkspace.ActiveDocument.Templates.Item(i).Name)
        Next
    End If

    If (MyWorkspace.ActiveDocument.DynPictures.Count > 0) Then
        For i = MyWorkspace.ActiveDocument.DynPictures.Count - 1 To 0 Step -1

            If MyWorkspace.ActiveDocument.DynPictures.Item(i) Is Nothing Then
                Exit For
            End If

            If MyWorkspace.ActiveDocument.DynPictures.Item(i).Name = "" Then
                Exit For
            End If

            MyWorkspace.ActiveDocument.DynPictures.Delete (MyWorkspace.ActiveDocument.DynPictures.Item(i).Name)
        Next
    End If

    MsgBox ("All templates and pictures were deleted")
End Sub
'****************** /JUST FOR TESTING **************************

'#############################################################################
'resets parameters and runs the ReadAsc function
'#############################################################################

Private Sub ReadIml_Tag(ByRef strFilePath As String)
    ReDim m_PRJ_IML_TagsAsc.Items(0)
    ReDim m_PRJ_IML_TagsAsc.PropName(0)
    m_PRJ_IML_TagsAsc.nItemCount = 0
    m_PRJ_IML_TagsAsc.nPropCount = 0
    m_PRJ_IML_TagsAsc = ReadAsc(strFilePath)
End Sub

'#############################################################################
'resets parameters and runs the ReadAsc function
'#############################################################################

Private Sub ReadObjectsAsc(ByRef strFilePath As String)
    ReDim m_PRJ_ObjectsAsc.Items(0)
    ReDim m_PRJ_ObjectsAsc.PropName(0)
    m_PRJ_ObjectsAsc.nItemCount = 0
    m_PRJ_ObjectsAsc.nPropCount = 0
    m_PRJ_ObjectsAsc = ReadAsc(strFilePath)
End Sub

'#############################################################################
'this function is used to read in the asc-files where FactoryLink stores the information
'about all variables and which drivers/data types are used
'#############################################################################

Private Function ReadAsc(strName As String) As EntryItem
    
    Dim nFileNr As Integer
    Dim strLine As String
    Dim nItemCounter As Integer
    Dim nPropCounter As Integer
    Dim bHeaderEnd As Boolean
    
    nFileNr = FreeFile
    nPropCounter = 0
    
    'first, we're going to read in the information of the selected asc-file line for line
    On Error GoTo Fileopenerror
    Open strName For Input As #nFileNr
        Do While Not EOF(nFileNr)
            On Error GoTo Filereaderror
            Line Input #nFileNr, strLine
            'if our parsed line is not empty and is not a commentary, then continue reading out valid lines, else skip line
            If (Trim(strLine) <> "" And InStr(1, strLine, "#") <= 0) Then
                If (InStr(1, strLine, """") > 0) Then
                    If (InStr(1, strLine, ",") > 0) Then
                        'Entry Item
                        ReDim Preserve ReadAsc.Items(ReadAsc.nItemCount)
                        ReDim Preserve ReadAsc.Items(ReadAsc.nItemCount).PropValue(ReadAsc.nPropCount)
                        For nItemCounter = 0 To ReadAsc.nPropCount - 1
                            ReadAsc.Items(ReadAsc.nItemCount).PropValue(nItemCounter) = GetItem(strLine, nItemCounter)
                        Next
                        ReadAsc.nItemCount = ReadAsc.nItemCount + 1
                    Else
                        If (Not bHeaderEnd) Then
                            'Column definition
                            ReDim Preserve ReadAsc.PropName(ReadAsc.nPropCount)
                            strLine = Replace(strLine, """", "")
                            ReadAsc.PropName(ReadAsc.nPropCount) = strLine
                            ReadAsc.nPropCount = ReadAsc.nPropCount + 1
                        End If
                    End If
                End If
            Else
                bHeaderEnd = True
            End If
        Loop
    Close #nFileNr
    Exit Function
    
Fileopenerror:
    MsgBox ("File " + strName + " not found!")
    Exit Function
    
Filereaderror:
    MsgBox ("Error while reading file: " + strName)
    Close #nFileNr
    Exit Function
    
End Function

'#############################################################################
'this function is used to get items out of the parsed information by index
'#############################################################################

Private Function GetItem(ByVal strEntry As String, nIndex As Integer) As String

    On Error GoTo IndexError
    
    Dim strReturn As String
    Dim strToFind As String
    Dim nPosFound As Integer
    Dim nPrevPos As Integer
    Dim nSearchedTimes As Integer
    
    nPosFound = 1
    strToFind = ","
    
    'search for "," in the strEntry string and get back the last position where it was found
    For nSearchedTimes = 0 To nIndex
  
        'if the next occuring char is a ", then search for the next " because this indicates a string
        'commas in strings should not be seperated and the comma after the last " should be taken
        If InStr(nPosFound + 1, strEntry, Chr(34)) = nPosFound + 1 Then
            nPrevPos = nPosFound
            nPosFound = InStr(nPosFound + 2, strEntry, Chr(34))
            nPosFound = InStr(nPosFound, strEntry, strToFind)
        'else if there is no " after a comma and it is a simple property
        Else
            nPrevPos = nPosFound
            nPosFound = InStr(nPosFound + 1, strEntry, strToFind)
        End If

    Next
    
    If (nPosFound = 0) Then
        nPosFound = Len(strEntry) + 1
    End If
    
    'set return value as the string which is located between the last and the previous comma
    GetItem = Mid(strEntry, nPrevPos, nPosFound - nPrevPos)
    GetItem = Replace(GetItem, ",", "", 1, 1)
    GetItem = Replace(GetItem, """", "")
    

    Exit Function

IndexError:
GetItem = ""
Exit Function
    
End Function

'#############################################################################
'this function runs through a array which contains the information about the variables
'it returns the index where the property name occurs
'#############################################################################

Private Function PropertyIndex(Item As EntryItem, strPropName As String) As Integer

    Dim nUbound As Integer
    Dim nPropIndex As Integer
    Dim nPropCount As Integer
    
    nPropCount = Item.nPropCount
    
    If (nPropCount > 0) Then
        For nPropIndex = 0 To nPropCount - 1
            If (Item.PropName(nPropIndex) = strPropName) Then
                PropertyIndex = nPropIndex
                Exit Function
            End If
        Next
    End If
    
    PropertyIndex = -1
    
End Function

'#############################################################################
'used for all the "select folder" dialogs used in the wizard
'#############################################################################

Private Function ShowBrowseFolderDialog(ByVal lngHwnd As Long, ByVal strPrompt As String) As String
#If Win64 Then
            MsgBox ("This wizard works only in zenon ED 32bit!")
            ShowBrowseFolderDialog = Empty
                
#Else
    On Error GoTo ehBrowseForFolder 'Trap for errors

    Dim intNull As Integer
    Dim lngIDList As Long, lngResult As Long
    Dim strPath As String
    Dim udtBI As BrowseInfo

    'Set API properties (housed in a UDT)
    With udtBI
        .lngHwnd = lngHwnd
        .lpszTitle = lstrcat(strPrompt, "")
        .ulFlags = BIF_RETURNONLYFSDIRS
        '.lpfnCallback = GetAddress(AddressOf BrowseCallbackProc) 'test
    End With

    'Display the browse folder...
    lngIDList = SHBrowseForFolder(udtBI)

    If lngIDList <> 0 Then
        'Create string of nulls so it will fill in with the path
        strPath = String(MAX_PATH, 0)

        'Retrieves the path selected, places in the null
         'character filled string
        lngResult = SHGetPathFromIDList(lngIDList, strPath)

        'Frees memory
        Call CoTaskMemFree(lngIDList)

        'Find the first instance of a null character,
         'so we can get just the path
        intNull = InStr(strPath, vbNullChar)
        'Greater than 0 means the path exists...
        If intNull > 0 Then
            'Set the value
            strPath = Left(strPath, intNull - 1)
        End If
    End If

    'm_strLastSelectedFolder = strPath

    'Return the path name
    ShowBrowseFolderDialog = strPath
    Exit Function 'Abort

ehBrowseForFolder:

    'Return no value
    ShowBrowseFolderDialog = Empty
#End If


End Function

'#############################################################################
'used for the "open file" dialog which is used in the function for tag selection
'#############################################################################

Private Function ShowOpenDialog(ByRef strFilter As String, ByRef strFileName As String) As String
    #If Win64 Then
            MsgBox ("This wizard works only in zenon ED 32bit!")
    #Else

   On Error GoTo ErrHandler
        Dim cdlgTagSelection As Object
        Set cdlgTagSelection = CreateObject("MSComDlg.CommonDialog")
        With cdlgTagSelection
            .Filter = strFilter
            .FileName = strFileName
            .CancelError = True
            .ShowOpen
    
            If (.FileName <> "") Then
                If (Dir(.FileName) <> "") Then
                    ShowOpenDialog = Left(.FileName, InStrRev(.FileName, "\"))
                End If
            End If
            
        End With
        
        Exit Function
    
ErrHandler:
        If Err.Number = 32755 Then
            ShowOpenDialog = ""
        End If
    #End If
    
End Function

'#############################################################################
'used for getting the path of the *.asc files with which ReadIml_Tag() and ReadObjectsAsc() are then run
'#############################################################################

Private Sub TagSelection()

    Dim strProjectPath As String
    strProjectPath = ShowOpenDialog("Tags IML file|imltags.asc", "imltags.asc")
    
    If (strProjectPath = "") Then
        Exit Sub
    End If
    
    lblSource.Caption = strProjectPath
    
    'Call ReadIml_Tag(strProjectPath + "imltags.asc")
    Call ReadObjectsAsc(strProjectPath + "object.asc")
    
    lblImlTags.Caption = "Tags found in object.asc: " & Trim(Str(m_PRJ_ObjectsAsc.nItemCount))
End Sub



'#############################################################################
'method in which the variables are read out of the array and imported into zenon
'#############################################################################

Private Sub ImportVariables()
    
    Dim nOBJCount As Integer
    Dim nOBJFieldNameIndex As Integer
    
    Dim nObjectCount As Integer
    Dim nObjectFieldNameIndex As Integer
    
    Dim strVarName As String
    Dim strVarType As String
    Dim strVarDesc As String
    
    Dim zVariable As Variable
    
    'check if workspace exists
    If MyWorkspace.ActiveDocument Is Nothing Then
        If (MsgBox("No Workspace found!" + vbNewLine + vbNewLine + "Please create a workspace with an active project", vbCritical) = vbOK) Then
        End If
        Exit Sub
    End If
    
    'DeleteVariables '******************* JUST FOR TESTING **************************
    
    MyWorkspace.ActiveDocument.Variables.DoAutoSave (False)
    
    'check if array is not empty
    If (m_PRJ_ObjectsAsc.nItemCount > 0) Then
    
        Dim zDriver As Driver
        Set zDriver = GetZenonInternDriver()
        
        If zDriver Is Nothing Then
            Call AddWarning("zenon INTERN driver could not be found!", "VARIABLE")
            Exit Sub
        End If
        
        Dim zDatatype As VarType
                    
        'Retrieve additional information from object.asc file
        For nObjectCount = 0 To m_PRJ_ObjectsAsc.nItemCount - 1
                
            strVarName = m_PRJ_ObjectsAsc.Items(nObjectCount).PropValue(PropertyIndex(m_PRJ_ObjectsAsc, "TAGNAME"))
            'Retrieve Variable datatype

            strVarType = m_PRJ_ObjectsAsc.Items(nObjectCount).PropValue(PropertyIndex(m_PRJ_ObjectsAsc, "TAGTYPE"))
            
            'Retrieve Variable description
            strVarDesc = m_PRJ_ObjectsAsc.Items(nObjectCount).PropValue(PropertyIndex(m_PRJ_ObjectsAsc, "TAGDESCR"))
            
            
            Set zDatatype = GetZenonDataType(strVarType)
            
            'check if datatype exists - if yes, then create variable in zenon with this type, else use INT datatype
            If Not zDatatype Is Nothing Then
                Set zVariable = MyWorkspace.ActiveDocument.Variables.CreateVar(strVarName, zDriver, tpSystemVariable, zDatatype)
            Else
                Set zVariable = MyWorkspace.ActiveDocument.Variables.CreateVar(strVarName, zDriver, tpSystemVariable, GetZenonDataType("ANALOG"))
                Call AddWarning(strVarName + ": No datatype found! -> Mapped to INT within zenon", "VARIABLE")
            End If
            
            Call PrintProgress(Round((((nObjectCount + 1) / m_PRJ_ObjectsAsc.nItemCount) * m_ProgressFactor) + 0.5), "Importing variable: " + Str(nObjectCount + 1) + "/" + Str(m_PRJ_ObjectsAsc.nItemCount) + " - " + strVarName, "VAR")
            
            'if variable was created successfully, write the var description into zenon and fill the output listbox
            If Not zVariable Is Nothing Then
                zVariable.Tagname = strVarDesc
                LstDrivers.AddItem "Variable " & Trim(Str(nObjectCount)) + 1 & " of " & Trim(Str(m_PRJ_ObjectsAsc.nItemCount)) & " created: " & strVarName
            Else
                Call AddWarning(strVarName + " not created: variable with the same name already exists!", "VARIABLE")
            End If
            
        Next
    End If
    
'    Dim nCount As Integer
'    For nCount = 0 To m_nNotImportedVarsCounter - 1
'        LstDrivers.AddItem (m_arStrNotImportedVars(nCount))
'    Next
    
    MyWorkspace.ActiveDocument.Variables.DoAutoSave (True)
    
    MsgBox ("Variable import finished")
        
End Sub

'#############################################################################
'initializes the import of templates and used bitmap files into zenon and starts parsing the mimics
'#############################################################################

Private Sub ImportMimics()

    Dim nMimicFilesCount As Integer
    
    If ckbx_SymbolsFromLibrary.value = False Then
        Call BitmapReferenceCreation
    End If
    Call ImportTemplates

    'as long as there are mimic files
    For nMimicFilesCount = 0 To m_MimicFilePaths.nItemCount - 1
        If InStr(m_MimicFilePaths.Items(nMimicFilesCount).PropValue(m_MimicFilePaths.nPropCount), "Declutter") <> 0 Then
            Dim bla As Integer
            bla = 1235
        End If
            
        Call ParseMimicFile(m_MimicFilePaths.Items(nMimicFilesCount).PropValue(m_MimicFilePaths.nPropCount))
        'reset the object creation counter
        m_nElementsCounter = 0
        'set progress
        Call PrintProgress(Round((((nMimicFilesCount + 1) / m_MimicFilePaths.nItemCount) * m_ProgressFactor) + 0.5), "Importing Mimics: " + Str(nMimicFilesCount + 1) + "/" + Str(m_MimicFilePaths.nItemCount) + " - " + m_MimicFilePaths.Items(nMimicFilesCount).PropValue(m_MimicFilePaths.nPropCount))
    Next nMimicFilesCount
    
    For nMimicFilesCount = 0 To MyWorkspace.ActiveDocument.DynPictures.Count - 1
        MyWorkspace.ActiveDocument.DynPictures.Item(nMimicFilesCount).Save
    Next nMimicFilesCount
    
    MsgBox ("Mimic import finished")
    
    mpgWizardPage.Pages(0).Enabled = False
    mpgWizardPage.Pages(1).Enabled = False
    mpgWizardPage.Pages(2).Enabled = False
    mpgWizardPage.Pages(3).Enabled = False
    
End Sub

'#############################################################################
'sub used to update the progress bar used in the wizard
'#############################################################################

Private Sub PrintProgress(nProgress As Integer, strLabelInfo As String, Optional strType As String)

    Dim i As Integer

    'reset progress bar
    lblProgressBar.Caption = ""

    'write progress into progress bar
    For i = 0 To nProgress
        lblProgressBar.Caption = lblProgressBar.Caption + ChrW(9608)
    Next
    
    'set label for file that is read in currently
    If strType = "VAR" Then
    lblVarRead.Caption = strLabelInfo
    Else
    lblProgressCount.Caption = strLabelInfo
    End If
    
    'for refreshing the window - maybe not the best solution, but it works
    DoEvents

End Sub



'#############################################################################
'initializes the parsing of the template files
'#############################################################################

Private Sub ImportTemplates()
 
    Dim nTemplateFilesCount As Integer
    
    'Call DeleteTemplates  '********* TESTING **********
    
    For nTemplateFilesCount = 0 To m_TemplateFilePaths.nItemCount - 1

        Call ParseTemplateFile(m_TemplateFilePaths.Items(nTemplateFilesCount).PropValue(m_MimicFilePaths.nPropCount))
        Call ParseMimicFile(m_TemplateFilePaths.Items(nTemplateFilesCount).PropValue(m_MimicFilePaths.nPropCount), True)
        'set progress bare and output
        Call PrintProgress(Round((((nTemplateFilesCount + 1) / m_TemplateFilePaths.nItemCount) * m_ProgressFactor) + 0.5), "Importing Templates: " + Str(nTemplateFilesCount + 1) + "/" + Str(m_TemplateFilePaths.nItemCount) + " - " + m_TemplateFilePaths.Items(nTemplateFilesCount).PropValue(m_TemplateFilePaths.nPropCount))
    Next
    
End Sub

'#############################################################################
'returning a specified line with a given property that is searched for and an optional parameter for the end string
'#############################################################################

Private Function GetNextLineByProperty(strProperty As String, pFilePointer As Integer, Optional strSearchEnd As String = ",END") As String

    Dim strLine As String
    On Error GoTo ErrHandler
    
    'on end of file, return ""
    If EOF(pFilePointer) Then
        GetNextLineByProperty = ""
        Exit Function
    End If
    
    'read in line and replace tab character
    Line Input #pFilePointer, strLine
    strLine = Replace(strLine, Chr$(9), "")
    
    'check for string and read lines until searched string occurs and return that line
    If strProperty <> "" Then
        
        While Not (InStr(UCase(strLine), UCase(strProperty) + ",") <> 0 Or InStr(UCase(strLine), strSearchEnd) <> 0)
            Line Input #pFilePointer, strLine
        Wend
        If (InStr(UCase(strLine), strSearchEnd) <> 0) Then
            GetNextLineByProperty = ""
            Exit Function
        End If
    End If
    
    GetNextLineByProperty = strLine
    Exit Function
    
ErrHandler:
    MsgBox (Error)

End Function

'#############################################################################
'create templates in zenon with information out of the template files
'#############################################################################

Private Sub TemplateCreation(strHeader As String, pFilePointer As Integer)
    
    Dim zTemplate As Template
    Dim strLine As String
    
    'check for existing workspace
    If MyWorkspace.ActiveDocument Is Nothing Then
        Exit Sub
    End If
    
    On Error GoTo TemplateCreationFailed
    
    'get template name and replace "_ASCII" with ""
    strLine = GetItem(strHeader, 2)
    strLine = Replace(UCase(strLine), "_ASCII", "")
    
    'create the template in zenon
    Set zTemplate = MyWorkspace.ActiveDocument.Templates.Create(strLine, True)
    
    'if creation failed, exit sub
    If zTemplate Is Nothing Then
        Exit Sub
    End If

    'get position of the template and set it in zenon
    strLine = GetNextLineByProperty("POSITION", pFilePointer)
    If strLine = "" Then
        Exit Sub
    End If
    
    'set left and top properties
    zTemplate.Left = Val(GetItem(strLine, 1))
    zTemplate.Top = Val(GetItem(strLine, 2))
    
    'get size of the template and set it in zenon
    strLine = GetNextLineByProperty("SIZE", pFilePointer)
    If strLine = "" Then
        Exit Sub
    End If
    
    'set remaining positioning properties
    zTemplate.Right = zTemplate.Left + Val(GetItem(strLine, 3))
    zTemplate.Bottom = zTemplate.Top + Val(GetItem(strLine, 4))
    
Exit Sub

TemplateCreationFailed:
    MsgBox ("An error occured while creating template " + GetItem(strHeader, 3) + ": " + Error)
    Exit Sub
    
End Sub

'#############################################################################
'creates the mimics in zenon with information out of the mimic files
'#############################################################################

Private Function MimicCreation(strHeader As String, pFilePointer As Integer, Optional isTemplate As Boolean) As String
    
    Dim zPicture As DynPicture
    Dim zTemplate As Template
    Dim zCorrespondingTemplatePicture As DynPicture
    Dim strLine As String
        
    'check for existing workspace
    If MyWorkspace.ActiveDocument Is Nothing Then
        Exit Function
    End If
    
    If isTemplate <> True Then
        'search for line which contains the template
        strLine = GetNextLineByProperty("TEMPLATE", 1)
        If strLine = "" Then
            Exit Function
        End If
    
    
        strLine = GetItem(strLine, 1)
        
        'if strLine is empty, this means that the picture is a popup
        If strLine = "" Then
            If MyWorkspace.ActiveDocument.Templates.Item("POPUP") Is Nothing Then
                Set zTemplate = MyWorkspace.ActiveDocument.Templates.Create("POPUP", True)
            End If
            
            strLine = "POPUP"
            
        'if template with this name does not exist
        ElseIf MyWorkspace.ActiveDocument.Templates.Item(UCase(strLine)) Is Nothing Then
            'if no templates have been created
            If MyWorkspace.ActiveDocument.Templates.Count = 0 Then
                'create template template_0
                Set zTemplate = MyWorkspace.ActiveDocument.Templates.Create("template_0", True)
                
                'was creation successful?
                If MyWorkspace.ActiveDocument.Templates.Count = 0 Then
                    Exit Function
                End If
                
                Call AddWarning("Mimic " + GetItem(strHeader, 2) + " has no corresponding template, so a template has been created", "TEMPLATE")
            End If
            
            'set the first template as the used template
            strLine = MyWorkspace.ActiveDocument.Templates.Item(0).Name
            Call AddWarning("Mimic " + GetItem(strHeader, 2) + " has no corresponding template, so " + strLine + " was chosen as template", "TEMPLATE")
        End If
        
        On Error GoTo PictureCreationFailed
        
        Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Create(UCase(GetItem(strHeader, 2)), UCase(strLine), tpStandard)
        
        If InStr(strLine, "POPUP") = 0 Then
            Set zCorrespondingTemplatePicture = MyWorkspace.ActiveDocument.DynPictures.Item("TPL_" + strLine)
            zPicture.Copy zCorrespondingTemplatePicture
        End If
    
    ElseIf isTemplate = True Then
    
        Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Create(UCase("TPL_" + (GetItem(strHeader, 2))), UCase(GetItem(strHeader, 2)), tpStandard)
        
    End If
    
    'exit function if picture could not be created
    If zPicture Is Nothing Then
        Exit Function
    End If
    
    'return the name of the picture
    MimicCreation = zPicture.Name
    
    Exit Function

PictureCreationFailed:
    MsgBox ("An error occured while creating picture " + GetItem(strHeader, 2) + ": " + Error)
    MimicCreation = ""
    Exit Function
    
End Function

'#############################################################################
'loads the bitmap files from FactoryLink projects into zenon
'#############################################################################

Private Sub BitmapReferenceCreation()

    Dim zFileManager As FileManager 'Object from type FileManager
    Dim zFileManagerFolder As FileManagerFolder 'Child object from type FileManager
    
    'Assign FileManager
    Set zFileManager = MyWorkspace.ActiveDocument.FileManager
    If zFileManager Is Nothing Then
        Exit Sub
    End If
    
    'Assign the "graphics list"
    Set zFileManagerFolder = zFileManager.FolderItem(2)
    If zFileManagerFolder Is Nothing Then
        Exit Sub
    End If
    
    Dim i As Integer

    For i = 0 To m_BitmapFilePaths.nItemCount - 1
        'Add a new item into the list
        zFileManagerFolder.AddItem (m_BitmapFilePaths.Items(i).PropValue(0))
        Call PrintProgress(Round((((i + 1) / m_BitmapFilePaths.nItemCount) * m_ProgressFactor) + 0.5), "Importing Bitmaps: " + Str(i + 1) + "/" + Str(m_BitmapFilePaths.nItemCount) + " - " + m_BitmapFilePaths.Items(i).PropValue(m_BitmapFilePaths.nPropCount))
    Next
    
    'Debug.Print (MyWorkspace.ActiveDocument.name)
    
    
End Sub

'#############################################################################
'parses the template file and calls the template creation method
'#############################################################################

Private Sub ParseTemplateFile(ByRef strTemplatePath As String)

    Dim nFileNr As Integer
    Dim strLine As String
    
    nFileNr = FreeFile
    
    On Error GoTo Fileopenerror
    Open strTemplatePath For Input As #nFileNr
    
    'search for template information and call creation method until end of file
    Do While Not EOF(nFileNr)
        On Error GoTo Filereaderror
        Line Input #nFileNr, strLine
        
        If (InStr(UCase(strLine), "W,BEGIN") <> 0) Then
            Call TemplateCreation(strLine, nFileNr)
        End If
    Loop
    
    On Error GoTo FileCloseError
    Close #nFileNr
    
    Exit Sub
    
Fileopenerror:
    MsgBox ("File " + strTemplatePath + " not found!")
    Exit Sub
    
Filereaderror:
    MsgBox ("Error while reading file: " + strTemplatePath)
    Close #nFileNr
    Exit Sub

FileCloseError:
    MsgBox ("Error while closing file: " + strTemplatePath)
    Exit Sub

End Sub

'#############################################################################
'parses the mimic files, calls mimic creation and object creation methods and stores color and font information
'#############################################################################

Private Sub ParseMimicFile(ByRef strMimicPath As String, Optional isTemplate As Boolean)
    
    Dim nFileNr As Integer
    Dim strLine As String
    Dim strPictureName As String
    
    nFileNr = FreeFile

    On Error GoTo Fileopenerror
    Open strMimicPath For Input As #nFileNr
    
    Do While Not EOF(nFileNr)
        On Error GoTo Filereaderror
        Line Input #nFileNr, strLine
        
        'search for mimic information and create mimic if found
        If (InStr(UCase(strLine), "W,BEGIN") <> 0) Then
            If isTemplate = True Then
                strPictureName = MimicCreation(strLine, nFileNr, isTemplate)
            Else
                strPictureName = MimicCreation(strLine, nFileNr)
            End If
        End If
        
        'check if picture was created successfully
        If (strPictureName <> "") Then
            'check line for object information and call creation method if found
            If (InStr(UCase(strLine), "O,BEGIN") <> 0) Then
                Call MimicCreateObject(strLine, nFileNr, strPictureName)
            End If
            
            'check line for font information and start reading it in if found
            If (InStr(UCase(strLine), "FONTS,BEGIN") <> 0) Then
                strLine = GetNextLineByProperty("", nFileNr) '1. parameter FONT
                'loop for getting all font information
                Do While strLine <> "" And strLine <> "FONTS,END"
                    'on new mimic, delete old font information and set new mimic name
                    If m_FontInformation.PictureName <> strPictureName Then
                        m_FontInformation.PictureName = strPictureName
                        m_FontInformation.Count = 0
                        ReDim m_FontInformation.Fonts(0)
                    Else
                        ReDim Preserve m_FontInformation.Fonts(0 To m_FontInformation.Count)
                    End If
                    
                    'get font information
                    If Abs(Val(GetItem(strLine, 2))) > 0 Then
                        m_FontInformation.Fonts(m_FontInformation.Count).Size = Abs(Val(GetItem(strLine, 2)))
                    Else
                        m_FontInformation.Fonts(m_FontInformation.Count).Size = 8
                    End If
                    m_FontInformation.Fonts(m_FontInformation.Count).Weight = Val(GetItem(strLine, 4))
                    m_FontInformation.Fonts(m_FontInformation.Count).Italic = Val(GetItem(strLine, 5))
                    m_FontInformation.Fonts(m_FontInformation.Count).Underline = Val(GetItem(strLine, 6))
                    m_FontInformation.Fonts(m_FontInformation.Count).Name = Val(GetItem(strLine, 7))
                    m_FontInformation.Fonts(m_FontInformation.Count).Strikethrough = Val(GetItem(strLine, 8))
                    m_FontInformation.Fonts(m_FontInformation.Count).CharSet = Val(GetItem(strLine, 9))
                    strLine = GetNextLineByProperty("FONT", nFileNr)
                    m_FontInformation.Count = m_FontInformation.Count + 1
                Loop 'strline <> ""
            End If

            'check line for color information and start reading it in if found
            If (InStr(UCase(strLine), "COLORS,BEGIN") <> 0) Then

                strLine = GetNextLineByProperty("COLOR", nFileNr)
                'loop for getting all color information
                Do While (strLine <> "")
                    'on new mimic, delete old color information and set new mimic name
                    If m_ColorInformation.PictureName <> strPictureName Then
                        m_ColorInformation.PictureName = strPictureName
                        m_ColorInformation.Count = 0
                        ReDim m_ColorInformation.Colors(0)
                    Else
                        ReDim Preserve m_ColorInformation.Colors(0 To m_ColorInformation.Count)
                    End If
                    
                    'get color information
                    m_ColorInformation.Colors(m_ColorInformation.Count).index = Val(GetItem(strLine, 1))
                    m_ColorInformation.Colors(m_ColorInformation.Count).RGBvalue = rgb(Val(GetItem(strLine, 2)), Val(GetItem(strLine, 3)), Val(GetItem(strLine, 4)))
                    m_ColorInformation.Colors(m_ColorInformation.Count).ColorGradientOffset = 100
                    m_ColorInformation.Colors(m_ColorInformation.Count).ColorGradientAngle = 180
                    If (GetItem(strLine, 7) = 1) Then
                        m_ColorInformation.Colors(m_ColorInformation.Count).Transparent = True
                    Else
                        m_ColorInformation.Colors(m_ColorInformation.Count).Transparent = False
                    End If

                    If InStr(strLine, "GRADIENT") <> 0 Then
                        m_ColorInformation.Colors(m_ColorInformation.Count).Gradient = True
                        m_ColorInformation.Colors(m_ColorInformation.Count).RGBGradient = rgb(Val(GetItem(strLine, 17)), Val(GetItem(strLine, 18)), Val(GetItem(strLine, 19)))
                        m_ColorInformation.Colors(m_ColorInformation.Count).RGBGradient2 = rgb(Val(GetItem(strLine, 21)), Val(GetItem(strLine, 22)), Val(GetItem(strLine, 23)))
                    Else
                        m_ColorInformation.Colors(m_ColorInformation.Count).Gradient = False
                    End If
                    m_ColorInformation.Count = m_ColorInformation.Count + 1
                    
                    strLine = GetNextLineByProperty("COLOR", nFileNr)
                Loop
            End If
            
        End If

    Loop
    
    On Error GoTo FileCloseError
    Close #nFileNr
    
    Exit Sub
    
Fileopenerror:
    MsgBox ("File " + strMimicPath + " not found!")
    Exit Sub
    
Filereaderror:
    MsgBox ("Error while reading file: " + strMimicPath)
    MsgBox (Error)
    Close #nFileNr
    Exit Sub

FileCloseError:
    MsgBox ("Error while closing file: " + strMimicPath)
    Exit Sub

rgbfailed:
    MsgBox (Error)
End Sub

'#############################################################################
'sub used to create a rectangle in a zenon picture
'#############################################################################

Private Sub CreateRectangle(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)
     
Dim PosStartX As Integer
Dim PosStartY  As Integer
Dim PosWidth  As Integer
Dim PosHeight As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim LineWidth As Integer
Dim BackColor As Long
Dim FillPattern As Integer

Dim bIsAnimated As Boolean
Dim bButtonCreated As Boolean
bButtonCreated = False
bIsAnimated = False

Dim bInvalidColorBit As Boolean
bInvalidColorBit = False
        
    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If
        
    Dim nColorIndex As Long
    
    'get basic properties of the rectangle, if not found, then exit sub
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    PosStartX = Val(GetItem(strLine, 1))
    PosStartY = Val(GetItem(strLine, 2))
    PosWidth = Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    PosHeight = Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))

    'get style properties of the rectangle, if not found, then exit sub
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set style properties
    LineWidth = Val(GetItem(strLine, 2))
    nColorIndex = Val(GetItem(strLine, 4)) - 1
    
    If BelongsToSymbol Then
        LineColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
    Else
        LineColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
    End If
    
    LineType = Val(GetItem(strLine, 1))

    nColorIndex = Val(GetItem(strLine, 10)) - 1

    'Check the fill pattern style and the color - depending if it belongs to a symbol or not
    Select Case Val(GetItem(strLine, 7))
        Case 0
            FillPattern = 6
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
        Case 1
            'Set transparent fill style pattern
            FillPattern = 7
        Case 2
            'Set fill pattern from "Hatch style pattern" property
            FillPattern = Val(GetItem(strLine, 8))
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
    End Select

    'check if color is set to transparent in the FactoryLink project
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    End If
    
    'get advanced style information and set the line type and the color if found
    strLine = GetNextLineByProperty("", nFileNr)
    If InStr(strLine, "AST") <> 0 Then
'        zElement.DynProperties("LineType") = tpSolid
'        zElement.DynProperties("LineColor") = vbBlack
        LineType = tpSolid
        LineColor = vbBlack
    End If


    'get animation of the text - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)

        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            On Error GoTo ColorbitError
            
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)
            If IsEmpty(ColorBit(0)) Then
                bInvalidColorBit = True
            End If

        End If
                                                     
        strLine = GetNextLineByProperty("", nFileNr)
                                             
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String
        
        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
    'create a rectangle in zenon with the provided object name
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpRectangle)
        
    'check if zElement exists
    If zElement Is Nothing Then
        Exit Sub
    End If

    'set positioning properties
    zElement.DynProperties("StartX") = PosStartX
    zElement.DynProperties("StartY") = PosStartY
    zElement.Width = PosWidth
    zElement.Height = PosHeight
    
    'set style properties
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("LineWidth") = LineWidth
    zElement.DynProperties("FillPattern") = FillPattern
    If Not BelongsToSymbol And m_ColorInformation.Colors(nColorIndex).Gradient Then
        zElement.DynProperties("FillPattern") = 8
        zElement.DynProperties("BackColor") = m_ColorInformation.Colors(nColorIndex).RGBGradient
        zElement.DynProperties("BackColor2") = m_ColorInformation.Colors(nColorIndex).RGBGradient2
        zElement.DynProperties("ColorGradientOffset") = 100
        zElement.DynProperties("ColorGradientAngle") = 180
    Else
        zElement.DynProperties("FillPattern") = FillPattern
        If FillPattern <> 7 Then zElement.DynProperties("BackColor") = BackColor
    End If

    lstMimicOutput.AddItem "Rectangle " + strObjectName + " created."
    
    'if the object is animated, call the conversion routine for the colorbit animation
    If bIsAnimated And Not bInvalidColorBit Then
        Call ConvertColorBit(zElement, ColorBit, strPictureName, SymbolName, CombiName, PosStartX, PosStartY, PosWidth, PosHeight)
    End If 'bIsAnimated
   
Exit Sub

ColorbitError:
MsgBox (Error)
Exit Sub

End Sub

'#############################################################################
'sub used to create a line in a zenon picture
'#############################################################################

Private Sub CreateLine(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)
        
    Dim nColorIndex As Long
    Dim PosStartX As Integer
    Dim PosStartY  As Integer
    Dim PosWidth  As Integer
    Dim PosHeight As Integer
    Dim LineColor As Long
    Dim LineType As Integer
    Dim LineWidth As Integer
    Dim bIsAnimated As Boolean
    Dim bButtonCreated As Boolean
    bButtonCreated = False
    bIsAnimated = False

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If

    'get basic properties of the line
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    PosStartX = Val(GetItem(strLine, 1))
    PosStartY = Val(GetItem(strLine, 2))
    PosWidth = Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    PosHeight = Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))

    'get style information of the line
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set style information of the line
    'zElement.DynProperties("LineWidth") = Val(GetItem(strLine, 2))
    LineWidth = Val(GetItem(strLine, 2))
    nColorIndex = Val(GetItem(strLine, 4)) - 1
    
    'if belongs to a symbol, take symbol colors
    If BelongsToSymbol Then
        'zElement.DynProperties("LineColor") = m_SymbolColors.Colors(nColorIndex).RGBvalue
        LineColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
    Else
        'zElement.DynProperties("LineColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
        LineColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
    End If
    
    'zElement.DynProperties("LineType") = Val(GetItem(strLine, 1))
    LineType = Val(GetItem(strLine, 1))
    
    'check if line color is set to transparent - if so, set it to transparent in zenon
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            LineType = 5
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            LineType = 5
        End If
    End If
    
    'get properties specific for lines
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'check position of basic properties with those in specific properties and overwrite if necessary
    If (PosStartX <> Val(GetItem(strLine, 1))) Then
        PosStartX = Val(GetItem(strLine, 1))
    End If
    If (PosStartY <> Val(GetItem(strLine, 2))) Then
        PosStartY = Val(GetItem(strLine, 2))
    End If
    If (PosWidth <> Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))) Then
        PosWidth = Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    End If
    If (PosHeight <> Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))) Then
        PosHeight = Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))
    End If

    'get animation of the text - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)
        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)
        End If
        strLine = GetNextLineByProperty("", nFileNr)
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String
        
        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
    'create a line in zenon with the provided object name
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpLine)

    'set positioning properties
    zElement.DynProperties("StartX") = PosStartX
    zElement.DynProperties("StartY") = PosStartY
    zElement.Width = PosWidth
    zElement.Height = PosHeight
    'set style properties
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("LineWidth") = LineWidth

    lstMimicOutput.AddItem "Line " + strObjectName + " created."
    
    'if the object is animated, call the conversion routine for the colorbit animation
    If bIsAnimated Then
        Call ConvertColorBit(zElement, ColorBit, strPictureName, SymbolName, CombiName, PosStartX, PosStartY, PosWidth, PosHeight)
    End If 'bIsAnimated

End Sub

'#############################################################################
'sub used to create a rounded rectangle in a zenon picture
'#############################################################################

Private Sub CreateRoundedRectangle(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)

Dim nColorIndex As Integer
Dim PosStartX As Integer
Dim PosStartY  As Integer
Dim PosWidth  As Integer
Dim PosHeight As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim LineWidth As Integer
Dim BackColor As Long
Dim FillPattern As Integer
Dim Offset_H As Integer
Dim Offset_V As Integer
Dim bIsAnimated As Boolean
Dim bButtonCreated As Boolean
bButtonCreated = False
bIsAnimated = False

    On Error GoTo RoundedRectangleError

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set the position of the rectangle
    PosStartX = Val(GetItem(strLine, 1))
    PosStartY = Val(GetItem(strLine, 2))
    PosWidth = Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    PosHeight = Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))

    'get the style information
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set style of the rectangle in zenon
    LineWidth = Val(GetItem(strLine, 2))
    nColorIndex = Val(GetItem(strLine, 4)) - 1
    
    If BelongsToSymbol Then
        LineColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
    Else
        LineColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
    End If
    
    LineType = Val(GetItem(strLine, 1))

    nColorIndex = Val(GetItem(strLine, 10)) - 1

    'Check the fill pattern style
    Select Case Val(GetItem(strLine, 7))
        Case 0
            FillPattern = 6    'Set solid fill style pattern
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
        Case 1
            'Set transparent fill style pattern
            FillPattern = 7
        Case 2
            'Set fill pattern from "Hatch style pattern" property
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                '##########################################HOTFIX##########################################
                '########################################## strObjectName = "C003" ##########################################
                '########################################## strPicture Name = "SEDE_UNIFILARE_AE_20080208111111111" ##########################################
                If m_SymbolColors.Count > nColorIndex Then
                    BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
                End If
            End If
    End Select

    'check if color is set to transparent in the FactoryLink project
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    End If

    'get properties specific for rounded rectangles
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set roundness of the "corners"
    Offset_H = GetItem(strLine, 1)
    Offset_V = GetItem(strLine, 2)

    strLine = GetNextLineByProperty("", nFileNr)
    
    'get animation of the text - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)

        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)
        End If
                                                     
        strLine = GetNextLineByProperty("", nFileNr)
                                             
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String
        
        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
    'create the circle/ellipse
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpRoundRect)
        
    'check if zElement exists
    If zElement Is Nothing Then
        Exit Sub
    End If


    'set positioning properties
    zElement.DynProperties("StartX") = PosStartX
    zElement.DynProperties("StartY") = PosStartY
    zElement.Width = PosWidth
    zElement.Height = PosHeight
    
    'set style properties
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("LineWidth") = LineWidth
    
    If Not BelongsToSymbol And m_ColorInformation.Colors(nColorIndex).Gradient Then
        zElement.DynProperties("FillPattern") = 8
        zElement.DynProperties("BackColor") = m_ColorInformation.Colors(nColorIndex).RGBGradient
        zElement.DynProperties("BackColor2") = m_ColorInformation.Colors(nColorIndex).RGBGradient2
        zElement.DynProperties("ColorGradientOffset") = 100
        zElement.DynProperties("ColorGradientAngle") = 180
    Else
        zElement.DynProperties("FillPattern") = FillPattern
        If FillPattern <> 7 Then zElement.DynProperties("BackColor") = BackColor
    End If

    lstMimicOutput.AddItem "Rounded rectangle " + strObjectName + " created."
    
    'if the object is animated, call the conversion routine for the colorbit animation
    If bIsAnimated Then
        Call ConvertColorBit(zElement, ColorBit, strPictureName, SymbolName, CombiName, PosStartX, PosStartY, PosWidth, PosHeight)
    End If 'bIsAnimated
Exit Sub

RoundedRectangleError:
MsgBox (Error)
MsgBox (strPictureName & strObjectName & strLine)
Exit Sub

End Sub

'#############################################################################
'sub used to create an ellipse or a circle in a zenon picture
'#############################################################################

Private Sub CreateEllipse(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)
        
Dim PosStartX As Integer
Dim PosStartY As Integer
Dim PosEndX As Integer
Dim PosEndY As Integer

Dim PosWidth As Integer
Dim PosHeight As Integer
Dim LineWidth As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim FillPattern As Integer
Dim BackColor As Long
Dim zCombi As Element
        
Dim nLineColorIndex As Long
Dim nColorIndex As Long

Dim bIsAnimated As Boolean
Dim bButtonCreated As Boolean
bButtonCreated = False
bIsAnimated = False

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'have to do a dirty little workaround here because of a strange behaviour in FactoryLink as it
    'is not always clear which point the start and which the end point is, so we have to compare
    If Val(GetItem(strLine, 3)) > Val(GetItem(strLine, 1)) Then
        'set position of the ellipse
        PosStartX = Val(GetItem(strLine, 1))
        PosStartY = Val(GetItem(strLine, 2))
        PosWidth = Abs(Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1)))
        PosHeight = Abs(Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2)))
        PosEndX = PosStartX + PosWidth
        PosEndY = PosStartY + PosHeight
    Else
        PosStartX = Val(GetItem(strLine, 3))
        PosStartY = Val(GetItem(strLine, 4))
        PosWidth = Abs(Val(GetItem(strLine, 1)) - Val(GetItem(strLine, 3)))
        PosHeight = Abs(Val(GetItem(strLine, 2)) - Val(GetItem(strLine, 4)))
        PosEndX = PosStartX + PosWidth
        PosEndY = PosStartY + PosHeight
    End If
    
    'get style properties
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set style properties for the object in zenon
    nLineColorIndex = Val(GetItem(strLine, 4)) - 1
    nColorIndex = Val(GetItem(strLine, 10)) - 1
    
    LineWidth = Val(GetItem(strLine, 2))
    If BelongsToSymbol Then
        LineColor = m_SymbolColors.Colors(nLineColorIndex).RGBvalue
    Else
        LineColor = m_ColorInformation.Colors(nLineColorIndex).RGBvalue
    End If
    
    'set line type
    LineType = Val(GetItem(strLine, 1))

    'Check the fill pattern style
    Select Case Val(GetItem(strLine, 7))
        Case 0
            FillPattern = 6  'Set solid fill style pattern
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
        Case 1
            FillPattern = 7    'Set transparent fill style pattern
        Case 2
            FillPattern = Val(GetItem(strLine, 8)) 'Set fill pattern from "Hatch style pattern" property
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
    End Select

    'check if color is set to transparent in the FactoryLink project
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    End If

    strLine = GetNextLineByProperty("", nFileNr)
    
    'get animation of the text - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)

        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)

        End If
                                                     
        strLine = GetNextLineByProperty("", nFileNr)
                                             
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String

        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
    'create the circle/ellipse
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpCircle)
        
    'check if zElement exists
    If zElement Is Nothing Then
        Exit Sub
    End If
    
    'set positioning properties
    zElement.Width = PosWidth
    zElement.Height = PosHeight
    
    zElement.DynProperties("StartX") = PosStartX
    zElement.DynProperties("StartY") = PosStartY
    zElement.DynProperties("EndX") = PosEndX
    zElement.DynProperties("EndY") = PosEndY

    'set style properties
    zElement.DynProperties("LineWidth") = LineWidth
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("FillPattern") = FillPattern
    If FillPattern <> 7 Then zElement.DynProperties("BackColor") = BackColor

    lstMimicOutput.AddItem "Ellipse/circle " + strObjectName + " created."
    
    'if the object is animated, call the conversion routine for the colorbit animation
    If bIsAnimated Then
        Call ConvertColorBit(zElement, ColorBit, strPictureName, SymbolName, CombiName, PosStartX, PosStartY, PosEndX, PosEndY)
    End If 'bIsAnimated
Exit Sub

End Sub

'#############################################################################
'sub used to map the ColorBit animation to a zenon combi element
'#############################################################################

Private Sub ConvertColorBit(zElement As Element, ColorBit As Variant, strPictureName As String, SymbolName As String, CombiName As String, PosStartX As Integer, PosStartY As Integer, PosEndX As Integer, PosEndY As Integer)

    Dim zCombi As Element
    Dim zSymbol As Element
        
        'create a symbol because the combi element can only do animation on symbols
        Set zSymbol = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(SymbolName, tpSymbol)
        
        zSymbol.DynProperties("StartX") = PosStartX
        zSymbol.DynProperties("StartY") = PosStartY
        
        zSymbol.Width = PosEndX - PosStartX
        zSymbol.Height = PosEndY - PosStartY
        
        zSymbol.DynProperties("EndX") = PosEndX
        zSymbol.DynProperties("EndY") = PosEndY
        
        'reset the position of the ellipse because since 6.50, positions are now relative to the position of the symbol
        zElement.DynProperties("StartX") = 0
        zElement.DynProperties("StartY") = 0
    
        'add the element to the symbol
        zSymbol.Elements.Add zElement
                
        'set combi element for mapping the animation
        Set zCombi = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(CombiName, tpDynStatus)
        
        'set positioning
        zCombi.Width = PosEndX - PosStartX
        zCombi.Height = PosEndY - PosStartY
        
        zCombi.DynProperties("StartX") = PosStartX
        zCombi.DynProperties("StartY") = PosStartY
        zCombi.DynProperties("EndX") = PosEndX
        zCombi.DynProperties("EndY") = PosEndY

        zCombi.DynProperties("FillColor") = True
        
        'set presentation style
        zCombi.DynProperties("RepresentationStyle") = 0
        zCombi.DynProperties("PictureSymbol") = zSymbol.SymbolNo
   
        'set DynProperties for the combi element containing the variables
        If CInt(zCombi.DynProperties("DynEleVar[-1]")) = 0 Then
            zCombi.CreateDynProperty ("DynEleVar")
        End If
        
        'if an error occurs, go to error handle
        On Error GoTo CombiVarError
        
        'link variable by name
        zCombi.DynProperties("DynEleVar[0].ProjectVar") = CStr(ColorBit(3))
        
        Dim i As Integer
        Dim strProp As String
        
        'set options for each state
        For i = 1 To 3
            If CInt(zCombi.DynProperties("States[-1]")) < i Then
              zCombi.CreateDynProperty ("States")
              strProp = "States[" & i - 1 & "]."
              Select Case i
                Case 2
                  zCombi.DynProperties(strProp & "Value") = 0
                  zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                  zCombi.DynProperties(strProp & "Color") = ColorBit(0)
                Case 3
                  zCombi.DynProperties(strProp & "Value") = 1
                  zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                  zCombi.DynProperties(strProp & "Color") = ColorBit(1)
              End Select
            End If
        Next i

    Call AddWarning("ColorBit animation " & SymbolName & " in picture " & strPictureName & " was mapped to a combi element.", "ANIM")
    
        
Exit Sub

CombiVarError:
MsgBox ("An error occured when trying to convert FactoryLink animations to a zenon combi element:" + Error)
Exit Sub

End Sub

'#############################################################################
'sub used to get the colorbit animation
'#############################################################################

Private Function GetColorBit(nFileNr As Integer, Optional BelongsToSymbol As Boolean) As Variant

Dim strLine As String
Dim ColorBit() As Variant
Dim LoopCount As Integer
Dim strVarName As String

ReDim ColorBit(0 To 3)
            
    'get specific properties for the color bit animation
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        GetColorBit = ColorBit()
        Exit Function
    End If
          
    'write variable name into array
    ColorBit(3) = GetItem(strLine, 1)
    
    strLine = GetNextLineByProperty("COL", nFileNr)
        
    LoopCount = 0
              
    'run through loop as long as there are color information and write the color information into the array
    Do While InStr(strLine, "COL") <> 0 And LoopCount < 3
                    
        Select Case LoopCount
            Case 0:
                If BelongsToSymbol Then
                    ColorBit(0) = m_SymbolColors.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                Else
                    ColorBit(0) = m_ColorInformation.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                End If
            Case 1:
                If BelongsToSymbol Then
                    ColorBit(1) = m_SymbolColors.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                Else
                    ColorBit(1) = m_ColorInformation.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                End If
            Case 2:
                If BelongsToSymbol Then
                    ColorBit(2) = m_SymbolColors.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                Else
                    ColorBit(2) = m_ColorInformation.Colors(Val(GetItem(strLine, 3)) - 1).RGBvalue
                End If
        End Select
                        
        'get next line containing color information
        strLine = GetNextLineByProperty("COL", nFileNr)
        LoopCount = LoopCount + 1
        
    Loop 'instr(strline,"COL") loop
    
    'Return ColorBit array with RGB values and the name of the variable
    GetColorBit = ColorBit

End Function

'#############################################################################
'sub used to create a pie in a zenon picture
'#############################################################################

Private Sub CreatePie(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)


Dim PosStartX As Integer
Dim PosStartY As Integer
Dim PosEndX As Integer
Dim PosEndY As Integer
Dim PosWidth As Integer
Dim PosHeight As Integer
Dim LineWidth As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim FillPattern As Integer
Dim BackColor As Long
Dim zCombi As Element
        
Dim nLineColorIndex As Long
Dim nColorIndex As Long

Dim bIsAnimated As Boolean
Dim bButtonCreated As Boolean
bButtonCreated = False
bIsAnimated = False

'pie specific start and end values
Dim startX As Integer
Dim startY As Integer

'specific information about the pie type and the angles
Dim nPieType As Integer
Dim nAngleA As Integer
Dim nAngleB As Integer
           
           
    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'get position and store it in the variables
    PosStartX = GetItem(strLine, 1)
    PosStartY = GetItem(strLine, 2)
    PosEndX = GetItem(strLine, 3)
    PosEndY = GetItem(strLine, 4)


    'get style properties for the arc/pie
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set the style properties for the arc/pie in zenon
'    zElement.DynProperties("LineWidth") = Val(GetItem(strLine, 2))
    LineWidth = Val(GetItem(strLine, 2))
    nColorIndex = Val(GetItem(strLine, 4)) - 1
'    zElement.DynProperties("LineColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
    LineColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
'    zElement.DynProperties("LineType") = Val(GetItem(strLine, 1))
    LineType = Val(GetItem(strLine, 1))

    nColorIndex = Val(GetItem(strLine, 10)) - 1

    'Check the fill pattern style
    Select Case Val(GetItem(strLine, 7))
        Case 0
            'zElement.DynProperties("FillPattern") = 6    'Set solid fill style pattern
            FillPattern = 6
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
        Case 1
            'zElement.DynProperties("FillPattern") = 7    'Set transparent fill style pattern
            FillPattern = 7
        Case 2
            'zElement.DynProperties("FillPattern") = Val(GetItem(strLine, 8)) 'Set fill pattern from "Hatch style pattern" property
            FillPattern = Val(GetItem(strLine, 8))
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
    End Select

    'check if color is set to transparent in the FactoryLink project
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            FillPattern = 7
        End If
    End If

    'get properties specific for arcs/pies
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set angles for the pie
    nPieType = GetItem(strLine, 2)
    nAngleA = Val(GetItem(strLine, 3)) - 180
    nAngleB = Val(GetItem(strLine, 4)) - 270

    'get animation of the ellipse - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)

        'check for begin of animation and append to the ellipse element
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)
        End If
                                                     
        strLine = GetNextLineByProperty("", nFileNr)
                                             
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String
        
        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
    'create an arc/pie in zenon
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, 131)
        
    'check if zElement exists
    If zElement Is Nothing Then
        Exit Sub
    End If
    
    zElement.DynProperties("StartX") = PosStartX
    zElement.DynProperties("StartY") = PosStartY
    zElement.Width = PosEndX - PosStartX
    zElement.Height = PosEndY - PosStartY

    'set style properties
    zElement.DynProperties("LineWidth") = LineWidth
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("FillPattern") = FillPattern
    If FillPattern <> 7 Then zElement.DynProperties("BackColor") = BackColor

    'if the object is animated, call the conversion routine for the colorbit animation
    If bIsAnimated Then
        
        Call ConvertColorBit(zElement, ColorBit, strPictureName, SymbolName, CombiName, PosStartX, PosStartY, PosWidth, PosHeight)
        
    End If 'bIsAnimated

    'determine whether it is it a quarter of an ellipse, half an ellipse or a pie and set the right properties
    Select Case nPieType
        Case 0
            Call ScalePie(zElement, 0, PosStartX, PosStartY, PosEndX, PosEndY)
            Call SetPieAngle(zElement, PosStartX, PosStartY, PosEndX, PosEndY, 0, 0)
        Case 1
            Call ScalePie(zElement, 1, PosStartX, PosStartY, PosEndX, PosEndY)
            Call SetPieAngle(zElement, PosStartX, PosStartY, PosEndX, PosEndY, 0, 90)
        Case 3
            Call SetPieAngle(zElement, PosStartX, PosStartY, PosEndX, PosEndY, nAngleA, nAngleB)
        Case Else
            Call AddWarning("Object " + strObjectName + " was not imported properly because this kind of object is not supported by zenon.", "MIMIC")
    End Select

    lstMimicOutput.AddItem "Pie/arc " + strObjectName + " created."

End Sub

'#############################################################################
'sub used to create a bitmap object in a zenon picture
'#############################################################################

Private Sub CreateBitmapObject(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If
             
    'create bitmap object in zenon
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpDynBitmap)

    'stretch bitmap to button size so it is displayed properly in the runtime
    zElement.DynProperties("Representation") = 1

    'check if object was created successfully
    If zElement Is Nothing Then
        Exit Sub
    End If

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set position of the bitmap object
    If BelongsToSymbol Then
        zElement.DynProperties("StartX") = 0
        zElement.DynProperties("StartY") = 0
    Else
        zElement.DynProperties("StartX") = Val(GetItem(strLine, 1))
        zElement.DynProperties("StartY") = Val(GetItem(strLine, 2))
    End If

    zElement.Width = Val(GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    zElement.Height = Val(GetItem(strLine, 4)) - Val(GetItem(strLine, 2))

    'get properties specific for bitmaps
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'initialize object and a child object from type FileManager
    Dim zFileManager As FileManager
    Dim zFileManagerFolder As FileManagerFolder

    'Assign FileManager
    Set zFileManager = MyWorkspace.ActiveDocument.FileManager
    If zFileManager Is Nothing Then
        Exit Sub
    End If

    'Assign the "graphics list"
    Set zFileManagerFolder = zFileManager.FolderItem(2)
    If zFileManagerFolder Is Nothing Then
        Exit Sub
    End If

    'set the bitmap file names
    Dim i As Integer
    For i = 0 To zFileManagerFolder.FileCount - 1
        If (GetItem(strLine, 1) = zFileManagerFolder.FileItem(i).FileName) Then
            zElement.DynProperties("FileName") = zFileManagerFolder.FileItem(i).FileName
            Exit For
        End If
    Next
    
    lstMimicOutput.AddItem "Bitmap " + strObjectName + " imported."
     
End Sub

'#############################################################################
'sub used to create a polyline in a zenon picture
'#############################################################################

Private Sub CreatePolyline(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)

Dim nColorIndex As Long

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        
    End If

    'create a polyline object in zenon
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpPolyLine)

    'check if creation was successful
    If zElement Is Nothing Then
        Exit Sub
    End If

    'get style information
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'get color
    nColorIndex = Val(GetItem(strLine, 4)) - 1

    'set style properties in zenon
    zElement.DynProperties("LineType") = Val(GetItem(strLine, 1))
    zElement.DynProperties("LineWidth") = Val(GetItem(strLine, 2))
    
    If BelongsToSymbol Then
        zElement.DynProperties("LineColor") = m_SymbolColors.Colors(nColorIndex).RGBvalue
    Else
        zElement.DynProperties("LineColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
    End If
    
    'check if used color is set to transparent
    If BelongsToSymbol Then
        If m_SymbolColors.Colors(nColorIndex).Transparent = True Then
            zElement.DynProperties("LineType") = 5
        End If
    Else
        If m_ColorInformation.Colors(nColorIndex).Transparent = True Then
            zElement.DynProperties("LineType") = 5
        End If
    End If

    'get properties specific to polylines
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    Dim strPolylineCoordinates As String

    'read in line as long as there are properties specific to the polyline
    Do While (InStr(strLine, "PP") <> 0)
        Dim nPLPointCount As Integer

        For nPLPointCount = 1 To 10
            If GetItem(strLine, nPLPointCount) <> "" Then
                'x coordinate
                strPolylineCoordinates = strPolylineCoordinates + GetItem(strLine, nPLPointCount) + "/"
                nPLPointCount = nPLPointCount + 1
                'y coordinate
                strPolylineCoordinates = strPolylineCoordinates + GetItem(strLine, nPLPointCount) + ";"
            Else
                Exit For
            End If
        Next

        strLine = GetNextLineByProperty("", nFileNr)
        If strLine = "" Then
            Exit Sub
        End If
    Loop

    zElement.DynProperties("Coordinates") = strPolylineCoordinates
    lstMimicOutput.AddItem "Polyline " + strObjectName + " imported."

End Sub

'#############################################################################
'sub used to create a polygon in a zenon picture
'#############################################################################

Private Sub CreatePolygon(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)

Dim nColorIndex As Integer
Dim LineWidth As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim FillPattern As Integer
Dim BackColor As Long
Dim bIsAnimated As Boolean
Dim bButtonCreated As Boolean
bButtonCreated = False
bIsAnimated = False

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If
    
        'create a polygon object in zenon
    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpPolygon)

    'check if creation was successful
    If zElement Is Nothing Then
        Exit Sub
    End If

    'get style information
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    'set style properties
    'zElement.DynProperties("LineWidth") = Val(GetItem(strLine, 2))
    LineWidth = Val(GetItem(strLine, 2))
    
    nColorIndex = Val(GetItem(strLine, 4)) - 1
    
    If BelongsToSymbol Then
        'zElement.DynProperties("LineColor") = m_SymbolColors.Colors(nColorIndex).RGBvalue
        LineColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
    Else
        'zElement.DynProperties("LineColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
        LineColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
    End If
    
    'zElement.DynProperties("LineType") = Val(GetItem(strLine, 1))
    LineType = Val(GetItem(strLine, 1))

    nColorIndex = Val(GetItem(strLine, 10)) - 1

    'Check the fill pattern style
    Select Case Val(GetItem(strLine, 7))
        Case 0
            'zElement.DynProperties("FillPattern") = 6    'Set solid fill style pattern
            FillPattern = 6
            If BelongsToSymbol Then
                'zElement.DynProperties("BackColor") = m_SymbolColors.Colors(nColorIndex).RGBvalue
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                'zElement.DynProperties("BackColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
        Case 1
            'zElement.DynProperties("FillPattern") = 7    'Set transparent fill style pattern
            FillPattern = 7
        Case 2
            'zElement.DynProperties("FillPattern") = Val(GetItem(strLine, 8)) 'Set fill pattern from "Hatch style pattern" property
            FillPattern = Val(GetItem(strLine, 8))
            If BelongsToSymbol Then
                'zElement.DynProperties("BackColor") = m_SymbolColors.Colors(nColorIndex).RGBvalue
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                'zElement.DynProperties("BackColor") = m_ColorInformation.Colors(nColorIndex).RGBvalue
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
            End If
    End Select

    'check if color is set to transparent in the FactoryLink project
    If BelongsToSymbol Then
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            'zElement.DynProperties("FillPattern") = 7
            FillPattern = 7
        End If
    Else
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            'zElement.DynProperties("FillPattern") = 7
            FillPattern = 7
        End If
    End If

    'get properties specific to polygons
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If

    Dim strPolygonCoordinates As String

    'read in line as long as there are properties specific to the polygon
    Do While (InStr(strLine, "PP") <> 0)
        Dim nPGPointCount As Integer
        For nPGPointCount = 1 To 10
            If GetItem(strLine, nPGPointCount) <> "" Then
                'x coordinate
                strPolygonCoordinates = strPolygonCoordinates + GetItem(strLine, nPGPointCount) + "/"
                nPGPointCount = nPGPointCount + 1
                'y coordinate
                strPolygonCoordinates = strPolygonCoordinates + GetItem(strLine, nPGPointCount) + ";"
            Else
                Exit For
            End If
        Next
        strLine = GetNextLineByProperty("", nFileNr)
        If strLine = "" Then
            Exit Sub
        End If
    Loop

    'get animation of the text - if not available, get next line and check for end of object
    Do While (InStr(strLine, "O,END") = 0)

        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,CB") <> 0) And bButtonCreated = False Then
            
            Dim zVariable As Variable
            Dim ColorBit() As Variant
            ReDim ColorBit(0 To 3)
            bIsAnimated = True
            ColorBit = GetColorBit(nFileNr, BelongsToSymbol)

        End If
                                                     
        strLine = GetNextLineByProperty("", nFileNr)
                                             
    Loop 'O,END loop
    
    'if the element contains an animation, check for duplicate names and rename if necessary
    If bIsAnimated Then
        Dim CombiName As String
        Dim SymbolName As String
        
        'check for multiple names
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("cmb_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            CombiName = "cmb_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            CombiName = "cmb_" + strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            SymbolName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            SymbolName = strObjectName
        End If
        
        If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item("obj_" + strObjectName) Is Nothing) Then
            m_nElementsCounter = m_nElementsCounter + 1
            strObjectName = "obj_" + strObjectName + "_" + Trim(Str(m_nElementsCounter))
        Else
            strObjectName = "obj_" + strObjectName
        End If
    End If
    
'    'create a polygon object in zenon
'    Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpPolygon)
'
'    'check if zElement exists
'    If zElement Is Nothing Then
'        Exit Sub
'    End If
'
    zElement.DynProperties("Coordinates") = strPolygonCoordinates

    'set style properties
    zElement.DynProperties("LineWidth") = LineWidth
    zElement.DynProperties("LineColor") = LineColor
    zElement.DynProperties("LineType") = LineType
    zElement.DynProperties("FillPattern") = FillPattern
    If FillPattern <> 7 Then zElement.DynProperties("BackColor") = BackColor

    lstMimicOutput.AddItem "Polygon " + strObjectName + " imported."

End Sub

'#############################################################################
'sub used to create a text object in a zenon picture
'#############################################################################

Private Sub CreateTextObject(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String, Optional BelongsToSymbol As Boolean)

Dim PosStartX As Integer
Dim PosStartY As Integer
Dim PosWidth As Integer
Dim PosHeight As Integer
Dim LineWidth As Integer
Dim LineColor As Long
Dim LineType As Integer
Dim FillPattern As Integer
Dim BackColor As Long

Dim Transparency As Boolean
Dim PunchFrameEnabled As Boolean
Dim PunchFrameColor As Long
Dim TextElementText As String
Dim HorizontalAlign As Integer
Dim VerticalAlign As Integer
Dim WordBreak As Boolean
Dim TextFontSize As String

Dim nColorIndex As Long
Dim bButtonCreated As Boolean
Dim ButtonKeyWord As String

On Error GoTo TextObjectCreationFailed

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        'Call AddWarning(strObjectName + " in picture " + strPictureName + " was renamed to " + strObjectName + "_" + str(m_nElementsCounter) + " because an object with the same name exists.", "MIMIC")
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    'set positioning
    PosWidth = Abs((GetItem(strLine, 3)) - Val(GetItem(strLine, 1)))
    PosHeight = Abs((GetItem(strLine, 4)) - Val(GetItem(strLine, 2)))
    PosStartX = Val(GetItem(strLine, 1))
    PosStartY = Val(GetItem(strLine, 2))

    'get style information
    strLine = GetNextLineByProperty("ST", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
     
    nColorIndex = Val(GetItem(strLine, 10)) - 1

     'Check the fill pattern style
    Select Case Val(GetItem(strLine, 7))
        Case 0 'set back color of the element if back color is used
            Transparency = False
            'check if the element belongs to a symbol and take the right color informations
            If BelongsToSymbol Then
                BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
                If BackColor = 0 Then
                    Transparency = True
                End If
            End If
            
         Case 1 'set element to transparent if transparency is used
            Transparency = True
         
         Case 2 'set back color of the element when hatched style is used
            Transparency = False
            
            'check if the element belongs to a symbol and take the right color informations
            If BelongsToSymbol Then
               BackColor = m_SymbolColors.Colors(nColorIndex).RGBvalue
            Else
                BackColor = m_ColorInformation.Colors(nColorIndex).RGBvalue
                If BackColor = 0 Then
                    Transparency = True
                End If
            End If
            
     End Select
     
    If BelongsToSymbol Then
        'check if used color is transparent
        If (m_SymbolColors.Colors(nColorIndex).Transparent = True) Then
            Transparency = True
        End If
    Else
        'check if used color is transparent
        If (m_ColorInformation.Colors(nColorIndex).Transparent = True) Then
            Transparency = True
        End If
    End If
                    
    'get next line - used because the property AST (advanced style property) is optional
    strLine = GetNextLineByProperty("", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    'set punch frame to false, making it possible to activate it when necessary
    
    PunchFrameEnabled = False
    
    'check if selected line contains the advanced style properties
    If InStr(strLine, "AST") = 1 Then
        'switch punch frame to active
        PunchFrameEnabled = True
        'check if color in advanced style is set to transparent
        If BelongsToSymbol Then
           If (m_SymbolColors.Colors(Val(GetItem(strLine, 4)) - 1).Transparent = True) Then
               'set punch frame color to black
               PunchFrameColor = vbBlack
           Else
               'set punch frame color to the specified color
               PunchFrameColor = m_SymbolColors.Colors(Val(GetItem(strLine, 4)) - 1).RGBvalue
           End If
        Else
            If (m_ColorInformation.Colors(Val(GetItem(strLine, 4)) - 1).Transparent = True) Then
               'set punch frame color to black
               PunchFrameColor = vbBlack
            Else
               'set punch frame color to the specified color
               PunchFrameColor = m_ColorInformation.Colors(Val(GetItem(strLine, 4)) - 1).RGBvalue
            End If

        End If
         
         '############################### TODO: GET BACKCOLOR WORKING FLAWLESSLY ###############################
         
         'disable transparency and set the back color
         'zElement.DynProperties("Transparent") = True
         Transparency = True
         'zElement.DynProperties("BackColor") = m_ColorInformation.Colors(Val(GetItem(strLine, 6)) - 1).RGBvalue
         '############################### TODO: GET BACKCOLOR WORKING FLAWLESSLY ###############################
    End If
     
    'check for properties specific for text and get them if necessary
    If Not (InStr(strLine, "PP") <> 0) Then
        strLine = GetNextLineByProperty("PP", nFileNr)
    End If
     
    'delete all \\n out of the text and write them into the zenon static text object
    TextElementText = Replace(GetItem(strLine, 8), "\\n", vbCrLf)
             
    Select Case GetItem(strLine, 9) 'check for align
              
        Case "36" 'SingleLine: horizontal align = Left and vertical align = Center
        
            HorizontalAlign = 0
            VerticalAlign = 0
            WordBreak = False
            
        Case "37" 'SingleLine: horizontal align = Center and vertical align = Center
        
            HorizontalAlign = 8
            VerticalAlign = 0
            WordBreak = False
            
        Case "38" 'SingleLine: horizontal align = Right and vertical align = Center
        
            HorizontalAlign = 4
            VerticalAlign = 0
            WordBreak = False
            
        Case "84" 'MultiLine: horizontal align = Left and vertical align = Center
            
            HorizontalAlign = 0
            VerticalAlign = 2
            WordBreak = True
            
        Case "85" 'MultiLine: horizontal align = Center und vertical align = Center
            
            HorizontalAlign = 8
            VerticalAlign = 2
            WordBreak = True
            
        Case "86" 'MultiLine: horizontal align = Right and vertical align = Center
            
            HorizontalAlign = 4
            VerticalAlign = 2
            WordBreak = True
            
        Case Else
            
    End Select
     
    Dim FontSize As Integer
    
    'check if the element belongs to a symbol and take the right font information
    If (BelongsToSymbol = True) And Not (strLine = "") Then
        FontSize = Round(m_SymbolFonts.Fonts((GetItem(strLine, 7)) - 1).Size)
    ElseIf Not (strLine = "") Then
        FontSize = Round(m_FontInformation.Fonts((GetItem(strLine, 7)) - 1).Size)
    End If
    
    Select Case FontSize
    Case Is < 11
        TextFontSize = "0 1 0 0 0 0 0 0 0 0 0 0 0"
        FontSize = 1
    Case Is >= 20
        TextFontSize = "0 5 0 0 0 0 0 0 0 0 0 0 0"
        FontSize = 5
    Case Is >= 15
        TextFontSize = "0 4 0 0 0 0 0 0 0 0 0 0 0"
        FontSize = 4
    Case Is >= 13
        TextFontSize = "0 3 0 0 0 0 0 0 0 0 0 0 0"
        FontSize = 3
    Case Is >= 11
        TextFontSize = "0 2 0 0 0 0 0 0 0 0 0 0 0"
        FontSize = 2
    End Select
    
     strLine = GetNextLineByProperty("", nFileNr)
     
     'get animation of the text - if not available, check for end of object
    Do While (InStr(strLine, "O,END") = 0)
           
        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,SR") <> 0) And bButtonCreated = False Then

            'create the button
            Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpDynButton)
            'set position and style properties of the text button
            zElement.Width = PosWidth
            zElement.Height = PosHeight
            zElement.DynProperties("StartX") = PosStartX
            zElement.DynProperties("StartY") = PosStartY
            zElement.DynProperties("Text1") = TextElementText
            zElement.DynProperties("HorizontalAlign") = HorizontalAlign
            zElement.DynProperties("VerticalAlign") = VerticalAlign
            zElement.DynProperties("Wordbreak") = WordBreak
            zElement.DynProperties("Font") = FontSize

            lstMimicOutput.AddItem "Text button " + strObjectName + " created."

            bButtonCreated = True
            Call AddWarning("Text object " + strObjectName + " in the picture " + strPictureName + " was converted to a text button", "ANIM")

            strLine = GetNextLineByProperty("", nFileNr)

            'if there are properties specific for the button, set the keyword out of these properties
            If GetItem(strLine, 0) = "PP" Then
                ButtonKeyWord = GetItem(strLine, 1)
            End If

        End If
        
        'check for begin of animation and change the text element to a button if an animation is used
        If (InStr(UCase(strLine), "A,BEGIN,DR") <> 0) And bButtonCreated = False Then
            
            While InStr(strLine, "PP,") = 0
                strLine = GetNextLineByProperty("", nFileNr)
            Wend
            
            If strLine = "" Then
                Exit Sub
            End If
            
            Dim DisplayedVariable As String
            
            DisplayedVariable = GetItem(strLine, 1)
            
            'create the button
            Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpDynZahlenElem)
            'set position and style properties of the text button
            zElement.DynProperties("StartX") = PosStartX
            zElement.DynProperties("StartY") = PosStartY
            zElement.Width = PosWidth
            zElement.Height = PosHeight
            zElement.DynProperties("Variable") = DisplayedVariable
            zElement.DynProperties("HorizontalAlign") = HorizontalAlign
            
            lstMimicOutput.AddItem "Display Value element " + strObjectName + " created."
            
            bButtonCreated = True
            Call AddWarning("Text object " + strObjectName + " in the picture " + strPictureName + " was converted to a ""Numerical Value"" element", "ANIM")
    
        End If
                                     
        'if MULTILANG block occurs
        If (InStr(UCase(strLine), "MULTILANG,BEGIN") <> 0) Then
            'execute until MULTILANG block ends
            Do While (InStr(strLine, "MULTILANG,END") = 0)
                'if specific language start occurs
                If GetItem(strLine, 0) = "LANG" And GetItem(strLine, 1) = "BEGIN" Then
                    'resize array
                    ReDim Preserve m_LanguageInformation.MultiLang(2, m_LanguageInformation.Count)
                    
                    'if a button was created, take the information from the animation block
                    If bButtonCreated Then
                        m_LanguageInformation.MultiLang(1, m_LanguageInformation.Count) = ButtonKeyWord
                    Else
                        m_LanguageInformation.MultiLang(1, m_LanguageInformation.Count) = TextElementText
                    End If
                    
                    'get the language id
                    m_LanguageInformation.MultiLang(0, m_LanguageInformation.Count) = GetItem(strLine, 2)
                    
                    strLine = GetNextLineByProperty("ROLE", nFileNr)
                    
                    'write the information into the language information array and delete all \\n
                    m_LanguageInformation.MultiLang(2, m_LanguageInformation.Count) = Replace(GetItem(strLine, 2), "\\n", vbCrLf)
                    
                    'increase count by 1
                    m_LanguageInformation.Count = m_LanguageInformation.Count + 1
                End If
                'get the next line for checking if the multilang block is over
                strLine = GetNextLineByProperty("", nFileNr)
                
            Loop 'MULTILANG,END loop
        End If
        
        'get the next line for checking if the object block is over
        strLine = GetNextLineByProperty("", nFileNr)
        
    Loop 'O,END loop

    'if no button was created, create a text object
    If bButtonCreated = False Then
        
        'create a new text object
        Set zElement = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strObjectName, tpText)
        
        'check if it exists
        If zElement Is Nothing Then
            Exit Sub
        End If
        
        zElement.DynProperties("StartX") = PosStartX
        zElement.DynProperties("StartY") = PosStartY
        zElement.Width = PosWidth
        zElement.Height = PosHeight
        
        zElement.VerticalOrigin = 0
        zElement.VerticalOrigin = 1
        zElement.VerticalOrigin = 2
        
        'set colouring and style properties
        zElement.DynProperties("Transparent") = Transparency
        If Transparency = False Then
            zElement.DynProperties("BackColor") = BackColor
        End If
        zElement.DynProperties("EnablePunchFrame") = PunchFrameEnabled
        If PunchFrameEnabled Then
            zElement.DynProperties("PunchFrameColor") = PunchFrameColor
            zElement.DynProperties("PunchFrameOffset") = 1
        End If
        
        'set text properties
        zElement.DynProperties("Text") = TextElementText
        zElement.DynProperties("HorizontalAlign") = HorizontalAlign
        zElement.DynProperties("VerticalAlign") = VerticalAlign
        zElement.DynProperties("Wordbreak") = WordBreak
        zElement.DynProperties("Font") = TextFontSize
    
        lstMimicOutput.AddItem "Static text " + strObjectName + " created."
    End If
    
    bButtonCreated = False
    If m_ColorInformation.Colors(nColorIndex).Gradient Then
        zElement.DynProperties("Transparent") = False
        zElement.DynProperties("BackColor") = m_ColorInformation.Colors(nColorIndex).RGBGradient2
    End If
    
    Exit Sub
    
TextObjectCreationFailed:
    MsgBox ("Text object creation failed: " + strObjectName + " in Picture " + strPictureName + ". Reason: " + Error)
Exit Sub

End Sub

'#############################################################################
'sub used to create a symbol in a zenon picture
'#############################################################################

Private Sub CreateSymbol(zElement As Element, strObjectName As String, strPictureName As String, nFileNr As Integer, strLine As String)

Dim PosStartX As Integer
Dim PosStartY As Integer
Dim PosWidth As Integer
Dim PosHeight As Integer
Dim strSymbolFileName As String
Dim zSymbol As Element
Dim zPicture As DynPicture
Dim zCombi As Element

    'get basic properties
    strLine = GetNextLineByProperty("B", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    'get positioning information
    PosStartX = Val(GetItem(strLine, 1))
    PosStartY = Val(GetItem(strLine, 2))
    PosWidth = (GetItem(strLine, 3)) - Val(GetItem(strLine, 1))
    PosHeight = (GetItem(strLine, 4)) - Val(GetItem(strLine, 2))
    
    'get specific properties
    strLine = GetNextLineByProperty("PP", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    'get name of the file in which the symbol information is stored
    strSymbolFileName = GetItem(strLine, 1)
    
    On Error GoTo errSymbolLibraryError
    
    If ckbx_SymbolsFromLibrary.value = True Then
        
        Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName)
        zPicture.InsertSymbol strSymbolFileName, "", True
        Set zSymbol = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strSymbolFileName)
    
    Else
        'start parsing the file containing the symbol information
        Call ParseSymbolFile(zSymbol, strSymbolFileName, strPictureName, strObjectName, PosStartX, PosStartY, PosWidth, PosHeight)
    End If
    
    
    'if zSymbol was created, then set the position
    If Not zSymbol Is Nothing Then
        zSymbol.DynProperties("StartX") = PosStartX
        zSymbol.DynProperties("StartY") = PosStartY
    End If
    
    
    'get next line
    strLine = GetNextLineByProperty("", nFileNr)
    If strLine = "" Then
        Exit Sub
    End If
    
    'continue until end of object occurs
    Do While (InStr(strLine, "O,END") = 0)
        
        'check for begin of symbol bit group animation
        If (InStr(UCase(strLine), "A,BEGIN,OBG") <> 0) Then
    
            Dim OBGSymbolName As String
            Dim strSymObjectName As String
            
            'get the name of the file containing the symbol information
            strSymObjectName = GetItem(strLine, 3)
            
            'get next line and check for specific symbol properties
            strLine = GetNextLineByProperty("", nFileNr)
            If InStr(strLine, "PP") <> 1 Then
                Exit Sub
            End If
            
            If ckbx_SymbolsFromLibrary.value = False Then
                
                'get the first symbol listed in the animation and store the name
                OBGSymbolName = GetItem(strLine, 11)
                
                'parse the file containing the first symbol used in the animation
                Call ParseSymbolFile(zSymbol, OBGSymbolName, strPictureName, strSymObjectName, PosStartX, PosStartY, PosWidth, PosHeight)
                
                'if zSymbol was created, set the position
                If Not zSymbol Is Nothing Then
                    zSymbol.DynProperties("StartX") = PosStartX
                    zSymbol.DynProperties("StartY") = PosStartY
                End If
            
            ElseIf ckbx_SymbolsFromLibrary.value = True Then
                           
                On Error GoTo combierror
                'set combi element for mapping the animation
                If MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strSymObjectName) Is Nothing Then
                    Set zCombi = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strSymObjectName, tpDynStatus)
                Else
                    strSymObjectName = strSymObjectName & "_" & m_nElementsCounter
                    m_nElementsCounter = m_nElementsCounter + 1
                    Set zCombi = MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Create(strSymObjectName, tpDynStatus)
                End If
                 
                'set positioning
                zCombi.DynProperties("StartX") = PosStartX
                zCombi.DynProperties("StartY") = PosStartY
                zCombi.Width = PosWidth
                zCombi.Height = PosHeight
                zCombi.DynProperties("FillColor") = True
                
                'set presentation style
                zCombi.DynProperties("RepresentationStyle") = 4
                             
                'set DynProperties for the combi element containing the variables
                Do While CInt(zCombi.DynProperties("DynEleVar[-1]")) <= 1
                    zCombi.CreateDynProperty ("DynEleVar")
                Loop
                
                'link variable by name
                zCombi.DynProperties("DynEleVar[0].ProjectVar") = GetItem(strLine, 1)
                zCombi.DynProperties("DynEleVar[1].ProjectVar") = GetItem(strLine, 2)
                       
                On Error GoTo StateSetError
                
                Dim i As Integer
                Dim strProp As String
                
                Dim nMaxActive As Integer
                Dim nMaxCount As Integer
                
                nMaxCount = 10
                nMaxActive = 1
                
                
                Do While nMaxActive = 1 And nMaxCount <= 40
                
                    nMaxActive = GetItem(strLine, nMaxCount)
                    nMaxCount = nMaxCount + 2
                
                Loop
                
                'set options for each state
                For i = 1 To 5
                    If CInt(zCombi.DynProperties("States[-1]")) < i Then
                      zCombi.CreateDynProperty ("States")
                      strProp = "States[" & i - 1 & "]."
                      Select Case i
                        Case 2
                          zCombi.DynProperties(strProp & "Formula") = "(X01.Value = 0) AND (X02.Value = 0)"
                          zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                          zCombi.DynProperties(strProp & "SymbolName") = GetItem(strLine, 11)
                        Case 3
                          zCombi.DynProperties(strProp & "Formula") = "(X01.Value = 1) AND (X02.Value = 0)"
                          zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                          zCombi.DynProperties(strProp & "SymbolName") = GetItem(strLine, 13)
                        Case 4
                          zCombi.DynProperties(strProp & "Formula") = "(X01.Value = 0) AND (X02.Value = 1)"
                          zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                          zCombi.DynProperties(strProp & "SymbolName") = GetItem(strLine, 15)
                        Case 5
                          zCombi.DynProperties(strProp & "Formula") = "(X01.Value = 1) AND (X02.Value = 1)"
                          zCombi.DynProperties(strProp & "ValueMask") = 4294967295#
                          zCombi.DynProperties(strProp & "SymbolName") = GetItem(strLine, 17)
                        Case Else
                          'to be defined
                      End Select
                    End If
                Next i
                    
             End If
            
        End If
    
        'get next line
        strLine = GetNextLineByProperty("", nFileNr)
    
    Loop 'O,END loop
    
Exit Sub

errSymbolLibraryError:
MsgBox ("An error occured when trying to access the symbol file " & strSymbolFileName & " used for " & strPictureName & "." & vbCrLf & "Please check if the symbol exists")
Exit Sub

combierror:
MsgBox ("An error occured when trying to create a combi element used for the symbol group animation in " & strPictureName)
Exit Sub
    
StateSetError:
MsgBox ("An error occured when setting the states for the element " & zCombi.Name & " in Picture " & strPictureName)

End Sub

'#############################################################################
'sub used for creating all the objects that appear in the mimic files
'#############################################################################

Private Sub MimicCreateObject(strHeader As String, nFileNr As Integer, strPictureName As String)

Dim strObjectName As String
Dim strLine As String

'used for elements
Dim zElement As Element

On Error GoTo ObjectCreationFailed

'get the object name
strObjectName = GetItem(strHeader, 3)

'check if workspace exists
If MyWorkspace.ActiveDocument Is Nothing Then
    Exit Sub
End If


'get the type of object that has to be created
Select Case GetItem(strHeader, 2)

    Case "R"  'if the object is a rectangle
        Call CreateRectangle(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "L" 'if the object is a line
        Call CreateLine(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "RR" 'if the object is a rounded rectangle
        Call CreateRoundedRectangle(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "E" 'if object is an ellipse
        Call CreateEllipse(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "A" 'if object is an arc/pie
        Call CreatePie(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "BM" 'if object is a bitmap
        Call CreateBitmapObject(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "I" 'if object is a polyline
        Call CreatePolyline(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "P" 'if object is a polygon
        Call CreatePolygon(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "T" 'if object is a text
        Call CreateTextObject(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case "S" 'if object is a symbol
        Call CreateSymbol(zElement, strObjectName, strPictureName, nFileNr, strLine)
    Case Else
End Select


Exit Sub

ObjectCreationFailed:
    MsgBox ("An error occured while creating the object " + strObjectName + ": " + Error)
    Exit Sub

End Sub


'#############################################################################
'used for setting the correct width and heigth of an ellipse
'#############################################################################

Private Sub ScalePie(ByRef zPie As Element, PieType As Integer, startX As Integer, startY As Integer, endX As Integer, endY As Integer)
    
    Select Case PieType 'which type of ellipse was used?
        Case 0 'quarter of an ellipse
            'set right position and size
            zPie.DynProperties("StartX") = zPie.DynProperties("StartX") - zPie.Width
            zPie.Width = 2 * zPie.Width
            zPie.Height = 2 * zPie.Height

        Case 1 'half of an ellipse
            'check for the quadrant in which the ellipse occurs
            If (startX < endX) Then
                If (startY < endY) Then
                
                    '4th quadrant
                    zPie.DynProperties("StartX") = zPie.DynProperties("StartX") - zPie.Width
                    zPie.Width = 2 * zPie.Width
                Else
                
                    '1st quadrant
                    zPie.Height = 2 * zPie.Height
                End If
            Else
                If (startY < endY) Then
                
                    '3rd quadrant
                    zPie.Height = 2 * zPie.Height
                Else
                
                    '2nd quadrant
                    zPie.DynProperties("StartX") = zPie.DynProperties("StartX") - zPie.Width
                    zPie.Width = 2 * zPie.Width
                End If
                
            End If
    End Select
End Sub

'#############################################################################
'sets the right angle of a pie
'#############################################################################

Private Sub SetPieAngle(ByRef zPie As Element, startX As Integer, startY As Integer, endX As Integer, endY As Integer, offsetAngleStart As Integer, offsetAngleEnd As Integer)
    
    'check if pie exists
    If zPie Is Nothing Then
        Exit Sub
    End If
    
    'check for the quadrant of the pie and set the right angle
    If (startX < endX) Then
        If (startY < endY) Then
            '4th quadrant
            zPie.DynProperties("DxfStartX") = zPie.DynProperties("StartX")
            zPie.DynProperties("DxfStartY") = zPie.DynProperties("StartY")
            zPie.DynProperties("DxfEndX") = zPie.DynProperties("StartX") + zPie.Width
            zPie.DynProperties("DxfEndY") = zPie.DynProperties("StartY") + zPie.Height
            zPie.DynProperties("SegStartAngle") = 270# + CDbl(Str(offsetAngleStart))
            zPie.DynProperties("SegEndAngle") = 0# + CDbl(Str(offsetAngleEnd))
        Else
            '1st quadrant
            zPie.DynProperties("DxfStartX") = zPie.DynProperties("StartX")
            zPie.DynProperties("DxfStartY") = zPie.DynProperties("StartY")
            zPie.DynProperties("DxfEndX") = zPie.DynProperties("StartX") + zPie.Width
            zPie.DynProperties("DxfEndY") = zPie.DynProperties("StartY") + zPie.Height
            zPie.DynProperties("SegStartAngle") = 0# + CDbl(Str(offsetAngleStart))
            zPie.DynProperties("SegEndAngle") = 90# + CDbl(Str(offsetAngleEnd))
        End If
    Else
        If (startY < endY) Then
            '3rd quadrant
            zPie.DynProperties("DxfStartX") = zPie.DynProperties("StartX")
            zPie.DynProperties("DxfStartY") = zPie.DynProperties("StartY")
            zPie.DynProperties("DxfEndX") = zPie.DynProperties("StartX") + zPie.Width
            zPie.DynProperties("DxfEndY") = zPie.DynProperties("StartY") + zPie.Height
            zPie.DynProperties("SegStartAngle") = 180# + CDbl(Str(offsetAngleStart))
            zPie.DynProperties("SegEndAngle") = 270# + CDbl(Str(offsetAngleEnd))
        Else
            '2nd quadrant
            zPie.DynProperties("DxfStartX") = zPie.DynProperties("StartX")
            zPie.DynProperties("DxfStartY") = zPie.DynProperties("StartY")
            zPie.DynProperties("DxfEndX") = zPie.DynProperties("StartX") + zPie.Width
            zPie.DynProperties("DxfEndY") = zPie.DynProperties("StartY") + zPie.Height
            zPie.DynProperties("SegStartAngle") = 90# + CDbl(Str(offsetAngleStart))
            zPie.DynProperties("SegEndAngle") = 180# + CDbl(Str(offsetAngleEnd))
        End If
    End If

End Sub

'#############################################################################
'Folder selection method that contains the call of the folder dialog window
'#############################################################################

Private Function FolderSelection(strCaption As String, strFileExtension As String) As EntryItem

    Dim FSO As Scripting.FileSystemObject ' Reference Microsoft Scripting Runtime C:\Windows\SysWOW64\scrunn.dll
    Dim SourceFolder As Scripting.Folder, SubFolder As Scripting.Folder
    Dim strFilePath As String
    Dim FileItem As Scripting.File

    strFilePath = ShowBrowseFolderDialog(MyWorkspace.Application.hwnd, strCaption)
    'strFilePath = strCaption '*********** TESTING PURPOSE *************
        
    'check if selection was successful
    If (strFilePath = "") Then
        Exit Function
    End If
    
    Set FSO = New Scripting.FileSystemObject
    
    On Error GoTo errFolderNotFound
    
    'set the source folder to the path received by the file dialog
    Set SourceFolder = FSO.GetFolder(strFilePath)
    
    'get all files without file extension in the specified folder if the search string is empty
    If (strFileExtension = "") Then
        For Each FileItem In SourceFolder.Files
            If (InStr(FileItem.Name, ".") = 0) Then 'Check for files without extension
                ReDim Preserve FolderSelection.Items(FolderSelection.nItemCount)
                ReDim Preserve FolderSelection.Items(FolderSelection.nItemCount).PropValue(FolderSelection.nPropCount)
                FolderSelection.Items(FolderSelection.nItemCount).PropValue(FolderSelection.nPropCount) = FileItem.Path
                FolderSelection.Name = strFilePath
                FolderSelection.nItemCount = FolderSelection.nItemCount + 1
            End If
        Next FileItem
    Else 'if the search string contains a file extension to search for
        For Each FileItem In SourceFolder.Files
            If (InStr(UCase(FileItem.Path), UCase("." + strFileExtension)) <> 0) Then
                ReDim Preserve FolderSelection.Items(FolderSelection.nItemCount)
                ReDim Preserve FolderSelection.Items(FolderSelection.nItemCount).PropValue(FolderSelection.nPropCount)
                FolderSelection.Items(FolderSelection.nItemCount).PropValue(FolderSelection.nPropCount) = FileItem.Path
                FolderSelection.Name = strFilePath
                FolderSelection.nItemCount = FolderSelection.nItemCount + 1
            End If
        Next FileItem
    End If
   
    'reset all objects
    Set FileItem = Nothing
    Set SourceFolder = Nothing
    Set FSO = Nothing
    
    Exit Function

errFolderNotFound:
    
    If (vbOK = MsgBox("Unable to access the selected item. Please choose another folder.", vbExclamation)) Then
    End If
    
End Function

'#############################################################################
'sub that adds warning into the warnings list box on the issue page of the wizard
'#############################################################################

Private Sub AddWarning(ByVal strMessage As String, WarningType As String)
    
    Select Case WarningType
        Case "VARIABLE"
            lb_VariableEvents.AddItem (strMessage)
        Case "MIMIC"
            lb_PictureEvents.AddItem (strMessage)
        Case "TEMPLATE"
            lb_PictureEvents.AddItem (strMessage)
        Case "ANIM"
            lb_AnimationEvents.AddItem (strMessage)
        Case Else
    End Select
    
    lb_AllEvents.AddItem (strMessage)

End Sub

'#############################################################################
'function which returns the zenon intern driver
'#############################################################################

Private Function GetZenonInternDriver() As Driver
    
    
    'check if driver already exists
    If m_zInternDriver Is Nothing Then
        
        'is there an active document in the workspace?
        If MyWorkspace.ActiveDocument Is Nothing Then
            GetZenonInternDriver = Nothing
        Else
            Dim nDriverCount As Integer
            
            'Search for "INTERN" Driver and return as Object
            'check for version because Driver object changed in 6.50
            If Replace(zenOn.ApplicationED.Version, ".", "") <= "622" Then
                For nDriverCount = 0 To MyWorkspace.ActiveDocument.Drivers.Count - 1
                    If UCase(MyWorkspace.ActiveDocument.Drivers.Item(nDriverCount).Driver) = "INTERN" Then
                        Set m_zInternDriver = MyWorkspace.ActiveDocument.Drivers.Item(nDriverCount)
                        Exit For
                    End If
                Next
            ElseIf Replace(zenOn.ApplicationED.Version, ".", "") >= "650" Then
                For nDriverCount = 0 To MyWorkspace.ActiveDocument.Drivers.Count - 1
                    If UCase(MyWorkspace.ActiveDocument.Drivers.Item(nDriverCount).Name) = "INTERN" Then
                        Set m_zInternDriver = MyWorkspace.ActiveDocument.Drivers.Item(nDriverCount)
                        Exit For
                    End If
                Next
            End If
        End If
        
    End If
    
    Set GetZenonInternDriver = m_zInternDriver
    
End Function

'#############################################################################
'this function is used for mapping FactoryLink data types to valid zenon data types
'#############################################################################

Private Function GetZenonDataType(ByRef strDataType As String) As VarType
    
    Dim strZenonVarType As String
    
    Select Case UCase(strDataType) 'check which datatype is used and map it to an equivalent zenon datatype
        Case "ANALOG"
            strZenonVarType = "INT"
        Case "DIGITAL"
            strZenonVarType = "BOOL"
        Case "FLOAT"
            strZenonVarType = "REAL"
        Case "LONGANA"
            strZenonVarType = "DINT"
        Case "MESSAGE"
            strZenonVarType = "STRING"
        Case "MAILBOX"
            strZenonVarType = "STRING"
        Case Else
            Set GetZenonDataType = Nothing
            Exit Function 'Just in case function does not return
    End Select
    
    'return data type
    Set GetZenonDataType = MyWorkspace.ActiveDocument.VarTypes.Item(strZenonVarType)
    
End Function

'#############################################################################
'triggered on the Symbols from Library check box, displays information
'#############################################################################

Private Sub ckbx_SymbolsFromLibrary_Click()

If ckbx_SymbolsFromLibrary.value = True Then
    MsgBox ("For using this feature, make sure you have selected the symbol folder and press the Symbol Import button." & vbCrLf & vbCrLf & _
    "A new picture named SymbolPicture will be created. When the creation of the symbols is finished, you need to put them into the LOCAL symbol library." & vbCrLf & vbCrLf & _
    "It is important that they have the same name like in the picture. Then you can continue with importing the mimics.")
    
    cmd_CreateSymbolPicture.Enabled = True
    
Else
    cmd_CreateSymbolPicture.Enabled = False
End If

End Sub

'#############################################################################
'triggered on the Create Symbol Picture command button, runs the symbol picture sub
'#############################################################################

Private Sub cmd_CreateSymbolPicture_Click()

    Call CreateSymbolPicture

End Sub

'#############################################################################
'creates a symbol picture with all symbols found
'#############################################################################

Private Sub CreateSymbolPicture()

    On Error GoTo CreateSymbolPictureFailed
    
    Dim nSymbolFilesCount As Integer
    Dim zSymbol As Element
    Dim zPicture As DynPicture
    Dim zTemplate As Template
    Dim strSymbolName As String
    Dim strObjectName As String
    
    'check for symbol template and create one if necessary - same for symbol picture
    If MyWorkspace.ActiveDocument.Templates.Item("FLWizardSymbolTemplate") Is Nothing Then
        Set zTemplate = MyWorkspace.ActiveDocument.Templates.Create("FLWizardSymbolTemplate", True)
        Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Create("FLWizardSymbolPicture", "FLWizardSymbolTemplate", tpStandard)
    Else
        Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Item("FLWizardSymbolPicture")
    End If
    
    'call bitmap import method
    Call BitmapReferenceCreation
    
    'if no symbols are found, exit
    If m_SymbolFilePaths.nItemCount = 0 Then
        MsgBox ("No symbol information found. Please check if you selected the right folder and if there are files containing symbol information in it")
        Exit Sub
    End If
    
    'as long as there are symbol files, run through and parse them
    For nSymbolFilesCount = 0 To m_SymbolFilePaths.nItemCount - 1
           
        strSymbolName = Right(m_SymbolFilePaths.Items(nSymbolFilesCount).PropValue(0), Len(m_SymbolFilePaths.Items(nSymbolFilesCount).PropValue(0)) - InStrRev(m_SymbolFilePaths.Items(nSymbolFilesCount).PropValue(0), "\"))
        strObjectName = strSymbolName
                
        Call ParseSymbolFile(zSymbol, strSymbolName, "FLWizardSymbolPicture", strObjectName, "10", "10", 1, 1)
        
        m_nElementsCounter = 0
                
    Next
    
    'save the picture
    zPicture.Save
    MsgBox ("Symbol picture creation was successful")
    
Exit Sub

CreateSymbolPictureFailed:
MsgBox ("An error occured when trying to create the symbol picture")

End Sub

'#############################################################################
'sub which is fired when clicking on the symbol source selection button
'#############################################################################

Private Sub cmdSymbolSourceSelection_Click()
    m_SymbolFilePaths = FolderSelection("Select FactoryLink symbols folder", "")
    lblSymbolSource.Caption = m_SymbolFilePaths.Name
    lblFoundSymbols.Caption = "Symbol files found: " + Trim(Str(m_SymbolFilePaths.nItemCount))
End Sub

'#############################################################################
'sub which is fired when clicking on the bitmap source selection button
'#############################################################################

Private Sub cmdBitmapSourceSelection_Click()
    m_BitmapFilePaths = FolderSelection("Select FactoryLink bitmap folder", "bmp")
    lblBitmapSource.Caption = m_BitmapFilePaths.Name
    lblFoundBitmaps.Caption = "Bitmap files found: " + Trim(Str(m_BitmapFilePaths.nItemCount))
End Sub

'#############################################################################
'sub which is fired when clicking on the template source selection button
'#############################################################################

Private Sub cmdTemplateSourceSelection_Click()
    m_TemplateFilePaths = FolderSelection("Select FactoryLink template folder", "")
    lblTemplateSource.Caption = m_TemplateFilePaths.Name
    lblFoundTemplates.Caption = "Template files found: " + Trim(Str(m_TemplateFilePaths.nItemCount))
End Sub

'#############################################################################
'sub which is fired when clicking on the mimic source selection button
'#############################################################################

Private Sub cmdMimicSourceSelection_Click()
    m_MimicFilePaths = FolderSelection("Select FactoryLink mimics folder", "")
    lblMimicSource.Caption = m_MimicFilePaths.Name
    lblFoundMimics.Caption = "Mimic files found: " + Trim(Str(m_MimicFilePaths.nItemCount))
End Sub

'#############################################################################
'sub used for creating an empty project
'#############################################################################

Private Sub cmdCreateEmptyProject_Click()

'create a new project
ApplicationED.Projects.Create

End Sub

'#############################################################################
'sub which is used to write the font information into a xml file which can be imported into zenon
'#############################################################################

'Private Sub WriteFontInformationIntoFile()

'Dim FilePath As String
''Dim FSO As Scripting.FileSystemObject
''Dim FileItem As Scripting.File
''Dim FileStream As Scripting.TextStream
'Dim i As Integer
'Dim j As Integer
'Dim strFontProperties As String
'
'
''set file path to the path the user selected
'FilePath = ShowBrowseFolderDialog(MyWorkspace.Application.hwnd, "Please select a folder where to save the font information")
'FilePath = FilePath + "\FontInformation.xml"
'
'    'initialize the file system object and the stream
'    'Set FSO = New Scripting.FileSystemObject
'    'Set FileStream = FSO.CreateTextFile(FilePath, True, False)
'
'    'set stream and properties
'    Set Stream = CreateObject("ADODB.Stream")
'    Stream.Open
'    Stream.Charset = "utf-8"
'
'    On Error GoTo FileWriteError
'
'    'write the information necessary for the font xml
'    Stream.WriteText ("<?xml version=""1.0"" encoding=""utf-8""?>")
'    Stream.WriteText ("<Subject ShortName=""zenOn(R) exported project"" MainVersion=""6220"">")
'    Stream.WriteText ("<Apartment ShortName=""zenOn(R) font list"" Version=""6220"">")
'
'    For i = 0 To UBound(m_FontInformation)
'
'        Stream.WriteText ("<Fontlist ShortName=""Fontlist" + LTrim(str(i)) + """>")
'        Stream.WriteText ("<Name>Fontlist" + LTrim(str(i)) + "</Name>")
'
'            For j = 0 To m_FontInformation(i).Count - 1
'
'                Stream.WriteText ("<Font ShortName=""Defaultfont" + LTrim(str(j)) + """>")
'                Stream.WriteText ("<Name>Font" + LTrim(str(j)) + "</Name>")
'
'                strFontProperties = ("<Font>-" + LTrim(str(Round(m_FontInformation(i).Fonts(j).Size))) + " 0 0 0 " + LTrim(str(m_FontInformation(i).Fonts(j).Weight)) + " " + LTrim(str(CInt(m_FontInformation(i).Fonts(j).Italic))) + " " + LTrim(str(CInt(m_FontInformation(i).Fonts(j).Underline))) + " " + LTrim(str(CInt(m_FontInformation(i).Fonts(j).Strikethrough))) + " 0 3 2 5 34 " + LTrim(CStr(m_FontInformation(i).Fonts(j).name)) + "</Font>")
'
'                Stream.WriteText (strFontProperties)
'
'                Stream.WriteText ("<Number>" + LTrim(str(j + 1)) + "</Number>")
'                Stream.WriteText ("</Font>")
'
'            Next
'
'        Stream.WriteText ("</Fontlist>")
'    Next
'
'    Stream.WriteText ("</Apartment>")
'    Stream.WriteText ("</Subject>")
'
'    'deinitialize all file objects
'    'Set FileStream = Nothing
'    'Set FileItem = Nothing
'    'Set FSO = Nothing
'
'    'save everything and reset the stream
'    Call Stream.SaveToFile(FilePath, 2)
'    Set Stream = Nothing
'
'Exit Sub
'
'FileWriteError:
'
'If (vbOK = MsgBox("Unable to access the selected item. Please choose another folder.", vbExclamation)) Then
'End If
'Exit Sub
'
'InputWrong:
'MsgBox ("Input wrong")
'Exit Sub

'End Sub

'#############################################################################
'sub which is fired when clicking on the import variable button
'#############################################################################

Private Sub cmdVarImport_Click()

    ApplicationED.Hide = True
    'ApplicationED.Show = False
    cmdCancel.Enabled = False
    cmdVarImport.Enabled = False
    
    Call ImportVariables

    ApplicationED.Hide = False
    'ApplicationED.Show = True
    cmdCancel.Enabled = True
    cmdVarImport.Enabled = True
    
    
End Sub

'#############################################################################
'sub which is fired when clicking on the import mimics button
'#############################################################################

Private Sub cmdMimicImport_Click()

    ApplicationED.Hide = True '########Testing########
    cmdCancel.Enabled = False
    cmdMimicImport.Enabled = False
    
    'Call ImportFonts
    Call ImportMimics
    Call ImportLanguages
    
    ApplicationED.Hide = False '########Testing########
    cmdCancel.Enabled = True
    
End Sub

'#############################################################################
'sub for parsing the symbol file objects which are needed to create the symbol objects
'#############################################################################

Private Sub ParseSymbolFile(zSymbol As Element, strSymbolFileName As String, strPictureName As String, strObjectName As String, PosStartX As Integer, PosStartY As Integer, PosWidth As Integer, PosHeight As Integer)

Dim nSymFileNr As Integer
Dim strLine As String
Dim zElement As Element
'Dim zSymbol As Element
Dim strSymbolPath As String
Dim zPicture As DynPicture
Dim SymbolFileCounter As Integer
Dim startX As Integer
Dim startY As Integer
Dim endX As Integer
Dim endY As Integer

    'if object already exists, create a counter and add the number to the object name
    'this is necessary as in FactoryLink, there can be multiple objects with the same name
    If Not (MyWorkspace.ActiveDocument.DynPictures.Item(strPictureName).Elements.Item(strObjectName) Is Nothing) Then
        m_nElementsCounter = m_nElementsCounter + 1
        strObjectName = strObjectName + "_" + Trim(Str(m_nElementsCounter))
    End If
    
    'search for the right symbol file in the FactoryLink symbol folder
    For SymbolFileCounter = 0 To m_SymbolFilePaths.nItemCount - 1
        If m_SymbolFilePaths.Items(SymbolFileCounter).PropValue(m_SymbolFilePaths.nPropCount) = m_SymbolFilePaths.Name + "\" + strSymbolFileName Then
            strSymbolPath = m_SymbolFilePaths.Name + "\" + strSymbolFileName
            Exit For
        End If
    Next
    
    'if the symbol file could not be found, exit
    If strSymbolPath = "" Then
        Exit Sub
    End If
    
    Dim i As Integer
    'get the right picture where the symbol occurs
    For i = 0 To MyWorkspace.ActiveDocument.DynPictures.Count - 1
        If MyWorkspace.ActiveDocument.DynPictures.Item(i).Name = strPictureName Then
            Set zPicture = MyWorkspace.ActiveDocument.DynPictures.Item(i)
            Exit For
        End If
    Next
    'open a new file object
    nSymFileNr = FreeFile
    
    On Error GoTo Fileopenerror
    Open strSymbolPath For Input As #nSymFileNr
    
    'create the symbol
    'Set zSymbol = zPicture.Elements.Create(strObjectName, tpSymbol)
    
    Do While Not EOF(nSymFileNr)
        On Error GoTo Filereaderror
        Line Input #nSymFileNr, strLine
            'check for color information
            If (InStr(UCase(strLine), "COLORS,BEGIN") <> 0) Then
                strLine = GetNextLineByProperty("COLOR", nSymFileNr)

                'loop for getting all color information
                Do While (strLine <> "")
                    'on new symbol, delete old color information and set new symbol object name
                    If m_SymbolColors.SymbolName <> strObjectName Then
                        m_SymbolColors.SymbolName = strObjectName
                        m_SymbolColors.Count = 0
                        ReDim m_SymbolColors.Colors(0)
                    Else
                        ReDim Preserve m_SymbolColors.Colors(0 To m_SymbolColors.Count)
                    End If
                    'get color information
                    m_SymbolColors.Colors(m_SymbolColors.Count).index = Val(GetItem(strLine, 1))
                    m_SymbolColors.Colors(m_SymbolColors.Count).RGBvalue = rgb(Val(GetItem(strLine, 2)), Val(GetItem(strLine, 3)), Val(GetItem(strLine, 4)))
                    If (GetItem(strLine, 7) = 1) Then
                        m_SymbolColors.Colors(m_SymbolColors.Count).Transparent = True
                    Else
                        m_SymbolColors.Colors(m_SymbolColors.Count).Transparent = False
                    End If
                    m_SymbolColors.Count = m_SymbolColors.Count + 1
                    strLine = GetNextLineByProperty("COLOR", nSymFileNr)
                Loop
            End If
            'check line for font information and start reading it in if found
            If (InStr(UCase(strLine), "FONTS,BEGIN") <> 0) Then
                strLine = GetNextLineByProperty("", nSymFileNr) '1. parameter FONT
                'loop for getting all font information
                Do While strLine <> "" And strLine <> "FONTS,END"
                    'on new mimic, delete old font information and set new mimic name
                    If m_SymbolFonts.PictureName <> strPictureName Then
                        m_SymbolFonts.PictureName = strPictureName
                        m_SymbolFonts.Count = 0
                        ReDim m_SymbolFonts.Fonts(0)
                    Else
                        ReDim Preserve m_SymbolFonts.Fonts(0 To m_SymbolFonts.Count)
                    End If
                    'get font information
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Size = Abs(Val(GetItem(strLine, 2)))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Weight = Val(GetItem(strLine, 4))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Italic = Val(GetItem(strLine, 5))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Underline = Val(GetItem(strLine, 6))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Name = Val(GetItem(strLine, 7))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).Strikethrough = Val(GetItem(strLine, 8))
                    m_SymbolFonts.Fonts(m_SymbolFonts.Count).CharSet = Val(GetItem(strLine, 9))
                    strLine = GetNextLineByProperty("FONT", nSymFileNr)
                    m_SymbolFonts.Count = m_SymbolFonts.Count + 1
                Loop 'strline <> ""
            End If
        
        'check line for object information and call creation method if found
        If (InStr(UCase(strLine), "O,BEGIN") <> 0) Then
            If (InStr(strLine, strObjectName) <> 0) Then
                Line Input #nSymFileNr, strLine
                If (InStr(strLine, "B") <> 0) Then
                    startX = GetItem(strLine, 1)
                    startY = GetItem(strLine, 2)
                    endX = GetItem(strLine, 3)
                    endY = GetItem(strLine, 4)
                End If
            End If
            If strLine = "O,BEGIN,GRP,""""" Then
                Line Input #nSymFileNr, strLine
                If (InStr(strLine, "B") <> 0) Then
                    startX = GetItem(strLine, 1)
                    startY = GetItem(strLine, 2)
                    endX = GetItem(strLine, 3)
                    endY = GetItem(strLine, 4)
                End If
            End If
            Select Case GetItem(strLine, 2)
                Case "R"  'if the object is a rectangle
                    Call CreateRectangle(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "L" 'if the object is a line
                    Call CreateLine(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "RR" 'if the object is a rounded rectangle
                    Call CreateRoundedRectangle(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "E" 'if object is an ellipse
                    Call CreateEllipse(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "A" 'if object is an arc/pie
                    Call CreatePie(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "BM" 'if object is a bitmap
                    Call CreateBitmapObject(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = PosStartX '(zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = PosStartY '(zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "I" 'if object is a polyline
                    Call CreatePolyline(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "P" 'if object is a polygon
                    Call CreatePolygon(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case "T" 'if object is a text
                    Call CreateTextObject(zElement, CStr(GetItem(strLine, 3)), strPictureName, nSymFileNr, strLine, True)
                    zElement.DynProperties("StartX") = (zElement.DynProperties("StartX") - startX) + PosStartX
                    zElement.DynProperties("StartY") = (zElement.DynProperties("StartY") - startY) + PosStartY
                    zElement.Update
                Case Else
            End Select
        End If
    
    Loop
    zPicture.Save
    Close #nSymFileNr
    
Exit Sub

Fileopenerror:
MsgBox ("An error has occured while trying to open the symbol file " + strSymbolFileName + ": " + Error)
Close #nSymFileNr
Exit Sub

Filereaderror:
MsgBox ("An error has occured while trying to parse the symbol files. Symbol file " + strSymbolFileName + " in Picture " + strPictureName + " produced this error: " + Error)
Close #nSymFileNr
End Sub

'#############################################################################
'imports all the language information into zenon
'#############################################################################

Private Sub ImportLanguages()

Dim nCounterID As Integer
Dim nCounterUsedIDs As Integer
Dim usedIDs() As String
Dim bIDFound As Boolean

ReDim usedIDs(0)

'if there are any language information, set the first id from the array
If m_LanguageInformation.Count > 0 Then
    usedIDs(0) = m_LanguageInformation.MultiLang(0, 0)
End If

'run through all IDs in the language information array
For nCounterID = 1 To m_LanguageInformation.Count - 1

    'indicates that new ID has been found - initialized as True
    bIDFound = True
        
    'run through all used ids
    For nCounterUsedIDs = 0 To UBound(usedIDs)
        'if matching IDs found, quit searching through all others and set the bIDFound to false
        If usedIDs(nCounterUsedIDs) = m_LanguageInformation.MultiLang(0, nCounterID) And Not usedIDs(nCounterUsedIDs) = "" Then
            bIDFound = False
            Exit For
        End If
    Next
    
    'if a new ID has been found, add it into the array
    If bIDFound = True Then
        ReDim Preserve usedIDs(UBound(usedIDs) + 1)
        usedIDs(UBound(usedIDs)) = m_LanguageInformation.MultiLang(0, nCounterID)
    End If
     
Next

Dim nWrCount As Integer
Dim LangTablesCreated As Integer

'delete all the old language files if there are already any
Do While MyWorkspace.ActiveDocument.FileManager.FolderItem(tpPathLanguage).FileCount <> 0
    MyWorkspace.ActiveDocument.FileManager.FolderItem(tpPathLanguage).DeleteFile (0)
Loop

'as long as there are language ids left, write language files with the id used as the file name
On Error GoTo LangError
For nWrCount = 0 To UBound(usedIDs)
    Call WriteIntoLanguageFile(MyWorkspace.ActiveDocument.ModulePath(tpPathLanguage) + "\" + usedIDs(nWrCount) + ".txt", ByVal usedIDs(nWrCount))
Next

Exit Sub

LangError:

'if Language information cannot be imported
MsgBox ("Unable to import the language information")

End Sub

'#############################################################################
'Sub which writes the information from the language array into a text file that is imported into zenon
'#############################################################################

Private Sub WriteIntoLanguageFile(FilePath As String, ByVal id As Integer)
    Dim FSO As Scripting.FileSystemObject
    Dim FileItem As Scripting.File
    Dim FileStream As Scripting.TextStream
    Dim i As Integer
    
    'initialize the file system object and the stream
    Set FSO = New Scripting.FileSystemObject
    Set FileStream = FSO.CreateTextFile(FilePath, True, True)

    'run through all keywords
    For i = 0 To m_LanguageInformation.Count - 1
        'if the keyword has the id that is being searched for, write it into the file
        If m_LanguageInformation.MultiLang(0, i) = id Then
            If m_LanguageInformation.MultiLang(1, i) <> "" And m_LanguageInformation.MultiLang(2, i) <> "" Then
                FileStream.WriteLine (LTrim(m_LanguageInformation.MultiLang(1, i)) + "|" + LTrim(m_LanguageInformation.MultiLang(2, i)))
            End If
        End If
    Next i

    'deinitialize all file objects
    Set FileStream = Nothing
    Set FileItem = Nothing
    Set FSO = Nothing
End Sub


'#############################################################################
'sub which is fired when clicking on the variable source selection button
'#############################################################################

Private Sub cmdSelectVarSource_Click()
    Call TagSelection
End Sub


'#############################################################################
'displays the global event list
'#############################################################################

Private Sub rd_AllEvents_Click()

    lb_AllEvents.Visible = True
    lb_AnimationEvents.Visible = False
    lb_PictureEvents.Visible = False
    lb_VariableEvents.Visible = False
    lbl_events.Caption = "Events: All events"

End Sub

'#############################################################################
'switches through the event lists to animation events
'#############################################################################

Private Sub rd_AnimationEvents_Click()

    lb_AllEvents.Visible = False
    lb_AnimationEvents.Visible = True
    lb_PictureEvents.Visible = False
    lb_VariableEvents.Visible = False
    lbl_events.Caption = "Events: Animation events"
    
End Sub

'#############################################################################
'switches through the event lists to picture events
'#############################################################################

Private Sub rd_PictureEvents_Click()

    lb_AllEvents.Visible = False
    lb_AnimationEvents.Visible = False
    lb_PictureEvents.Visible = True
    lb_VariableEvents.Visible = False
    lbl_events.Caption = "Events: Picture events"
    
End Sub

'#############################################################################
'switches through the event lists to variable events
'#############################################################################

Private Sub rd_VariableEvents_Click()

    lb_AllEvents.Visible = False
    lb_AnimationEvents.Visible = False
    lb_PictureEvents.Visible = False
    lb_VariableEvents.Visible = True
    lbl_events.Caption = "Events: Variable events"
    
End Sub

'#############################################################################
'sub which is fired on activation of the user form
'#############################################################################

Private Sub UserForm_Activate()
    If InStr(1, ApplicationED.Name, "zenon") <> 0 Then
        Header.Picture = Image_zenOn.Picture
    Else
        Header.Picture = Image_OEM.Picture
    End If
        
    m_ProgressFactor = 47
    
    cmd_CreateSymbolPicture.Enabled = False
    
    ApplicationED.Hide = False
    lb_AnimationEvents.Visible = False
    lb_PictureEvents.Visible = False
    lb_VariableEvents.Visible = False
        
    mpgWizardPage.value = 0
    cmdBack.Visible = False
    cmdFinish.Enabled = False
    #If Win64 Then
        MsgBox ("This Wizard works only in zenon ED 32bit !")
    #Else
    #End If
    
End Sub



'#############################################################################
'sub which is fired when terminating the wizard
'#############################################################################

Private Sub UserForm_Terminate()
    
    On Error GoTo terminate
    ApplicationED.Hide = False
    Unload Me
    
Exit Sub

terminate:
Unload Me
    
End Sub

'#############################################################################
'sub which is fired when clicking on the "back" command button
'#############################################################################

Private Sub cmdBack_Click()
    If mpgWizardPage.value > 0 Then
        mpgWizardPage.value = mpgWizardPage.value - 1
    End If
End Sub

'#############################################################################
'sub which is fired when clicking on the "cancel" command button
'#############################################################################

Private Sub cmdCancel_Click()

    ApplicationED.Hide = False
    Unload Me

End Sub

'#############################################################################
'sub which is fired when clicking on the "finish" command button
'#############################################################################

Private Sub cmdFinish_Click()
    'TODO: Add here the code to execute the options
   
   'ask the user for reloading the project and execute it if Yes is pressed
   If MsgBox("It is necessary to reload the project for the changes to take effect." & vbCrLf & _
             "Do you want to reload the project?", vbYesNo, "Reload Project") = vbYes Then
        '*** Reload project
        
        Dim strGuid As String
        
        'read the unique identifier for the project (GUID) from the active project
        strGuid = MyWorkspace.ActiveDocument.DynProperties("GUID")
        
        'unload the project and then load it in again to make the language information be displayed in zenon
        MyWorkspace.UnloadProject strGuid
        MyWorkspace.LoadProject strGuid
        
    End If
   
    ApplicationED.Hide = False
   
    Unload Me

End Sub

'#############################################################################
'sub which is fired when clicking on the "next" command button
'#############################################################################

Private Sub cmdNext_Click()
    If mpgWizardPage.value < mpgWizardPage.Pages.Count - 1 Then
        mpgWizardPage.value = mpgWizardPage.value + 1
    End If
End Sub

'#############################################################################
'sub which is fired when a change to the currently displayed wizard page occurs
'#############################################################################

Private Sub mpgWizardPage_Change()
    Select Case mpgWizardPage.value
        Case 0
            cmdBack.Visible = False
            cmdNext.Visible = True
            cmdFinish.Enabled = False
        Case mpgWizardPage.Pages.Count - 1
            cmdBack.Visible = True
            cmdNext.Visible = False
            cmdFinish.Enabled = True
        Case Else
            cmdBack.Visible = True
            cmdNext.Visible = True
            cmdFinish.Enabled = False
    End Select
End Sub

Private Sub cmdNext_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdNext.BackColor = rgb(160, 234, 255)
End Sub

Private Sub cmdBack_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(160, 234, 255)
End Sub

Private Sub cmdFinish_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdFinish.BackColor = rgb(160, 234, 255)
End Sub

Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdCancel.BackColor = rgb(160, 234, 255)
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(232, 232, 232)
    cmdNext.BackColor = rgb(232, 232, 232)
    cmdFinish.BackColor = rgb(232, 232, 232)
    cmdCancel.BackColor = rgb(232, 232, 232)
    
End Sub



Attribute VB_Name = "frmImport2008"
Attribute VB_Base = "0{5B56975D-C13D-435E-953A-FF9BC97138A7}{F6D7F019-5A21-46A1-AFC3-7FAAEE052C91}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************
    ' *                               XML Import Wizard                                           *
    ' *********************************************************************************************
    ' *                      Version:             4                                               *
    ' *                      Created:             19.11.2007                                      *
    ' *                      Created by:          Robert Ficker                                   *
    ' *                      Last change:         25.03.2013                                      *
    ' *                      Last change by:      Alexander Resinger                              *
    ' *                      Optimized for:       7.10                                            *
    ' *********************************************************************************************
    ' *    Description:       Works f|fffd|r 32bit and 64 bit                                          *
    ' *                                                                                           *
    ' *********************************************************************************************
    ' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
    ' *********************************************************************************************

    '#################################################################################
    '## Created by: Robert Ficker, COPA-DATA GmbH                        19.11.2007 ##
    '## --------------------------------------------------------------------------- ##
    '## XML Import Wizard - to import multiple files within one step and to avoid   ##
    '##                     known problems with referenced objects in the XML file. ##
    '## --------------------------------------------------------------------------- ##
    '## Used References: Scripting Runtime, Common Dialog Control 6.0               ##
    '#################################################################################
Option Explicit
Dim strParts() As String
Dim zPRJ As Project
Dim mFSO As New Scripting.FileSystemObject


Private Sub UserForm_Activate()
  If InStr(1, ApplicationED.Name, "zenon") <> 0 Then
    Header.Picture = Image_zenOn.Picture
  Else
    Header.Picture = Image_OEM.Picture
  End If
  If CLng(ApplicationED.VersionNumber) < 650 Then
    MsgBox "Wizard will need Version 6.50 or higher!", vbCritical, "Wrong Version"
    End
  End If
  Set zPRJ = MyWorkspace.ActiveDocument
  If zPRJ Is Nothing Then
    MsgBox "Activate/Create a project to use this wizard!", vbExclamation
    End
  End If
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
    #End If
  'define descriptions of project parts
  ReDim strParts(21)
  strParts(1) = "Frame(s)"
  strParts(2) = "Screen(s)"
  strParts(3) = "Datatype(s)"
  strParts(4) = "Variable(s)"
  strParts(5) = "Script(s)"
  strParts(6) = "Function(s)"
  strParts(7) = "Reaction matrix"
  strParts(8) = "Standard Recipe(s)"
  strParts(9) = "Recipegroup Manager"
  strParts(10) = "Historian"
  strParts(11) = "User(s)"
  strParts(12) = "Menu(s)"
  strParts(13) = "Time control(s)"
  strParts(14) = "Allocation(s)"
  strParts(15) = "Interlocking(s)"
  strParts(16) = "Command(s)"
  strParts(17) = "Color Palette(s)"
  strParts(18) = "Unit(s)"
  strParts(19) = "Fontlist(s)"
  strParts(20) = "User(s)"
  strParts(21) = "Usergroup(s)"
  Call AddDescriptions
  Call LoadSettings
  'load project info
  lblProject.Caption = zPRJ.Name & vbCrLf & vbCrLf & _
                       zPRJ.DynProperties("GUID") & vbCrLf & vbCrLf & _
                       zPRJ.Path
  'check for energy licence
  If InStr(1, ApplicationED.Name, "Energy", vbTextCompare) = 0 Then
    chkXML16.Enabled = False
    cmdXML16.Enabled = False
    txtXML16.Enabled = False
  End If
  'import not possible now...
  chkXML17.Enabled = False
  cmdXML17.Enabled = False
  txtXML17.Enabled = False
  
  'set layout defaults...
  mpgWizardPage.Pages.Item(1).ScrollTop = 0
  mpgWizardPage.value = 0
  cmdBack.Visible = False
  cmdFinish.Enabled = False
End Sub

Private Sub cmdFinish_Click()
Dim bResult As Boolean
Dim ErrHandler As Label
  On Error GoTo ErrHandler
  'import depending to selected settings...
  lstResult.Clear
  mpgWizardPage.value = 2
  Call SaveSettings
  'checkout project (for multiuser projects)
  zPRJ.CheckOut
'- Template(s) -------------------------------------------------------------------------
  If chkXML01.value = True And CheckPath(txtXML01) = True Then
    lstResult.AddItem "+ " & chkXML01.Caption & " import..."
    bResult = zPRJ.Templates.Import(txtXML01.Text)
    Call AddResult(bResult, chkXML01.Caption, txtXML01.Text)
  Else
    Call AddInfo(chkXML01, txtXML01)
  End If
'- Datatype(s) -------------------------------------------------------------------------
  If chkXML03.value = True And CheckPath(txtXML03) = True Then
    lstResult.AddItem "+ " & chkXML03.Caption & " import..."
    bResult = zPRJ.VarTypes.Import(txtXML03.Text)
    Call AddResult(bResult, chkXML03.Caption, txtXML03.Text)
  Else
    Call AddInfo(chkXML03, txtXML03)
  End If
'- Variable(s) -------------------------------------------------------------------------
  If chkXML04.value = True And CheckPath(txtXML04) = True Then
    lstResult.AddItem "+ " & chkXML04.Caption & " import..."
'- Variable(s)- Variable(s)
    bResult = zPRJ.Variables.ImportDirect(txtXML04.Text, False, False)
    Call AddResult(bResult, chkXML04.Caption, txtXML04.Text)
  Else
    Call AddInfo(chkXML04, txtXML04)
  End If
'- Function(s) -------------------------------------------------------------------------
  If chkXML06.value = True And CheckPath(txtXML06) = True Then
    lstResult.AddItem "+ " & chkXML06.Caption & " import..."
    bResult = zPRJ.RtFunctions.Import(txtXML06.Text)
    Call AddResult(bResult, chkXML06.Caption, txtXML06.Text)
  Else
    Call AddInfo(chkXML06, txtXML06)
  End If
'- Picture(s) --------------------------------------------------------------------------
  If chkXML02.value = True And CheckPath(txtXML02) = True Then
    lstResult.AddItem "+ " & chkXML02.Caption & " import..."
'- Picture(s)- Variable(s)
    If chkPIC03.value = True Then
      bResult = zPRJ.Variables.ImportDirect(txtXML02.Text, False, False)
      Call AddResult(bResult, "Picture(s) - " & chkPIC03.Caption, txtXML02.Text)
    Else
      lstResult.AddItem "+ " & "Picture(s) - " & chkPIC03.Caption & " inactive"
    End If
'- Picture(s)- Function(s)
    If chkPIC02.value = True Then
      bResult = zPRJ.RtFunctions.Import(txtXML02.Text)
      Call AddResult(bResult, "Picture(s) - " & chkPIC02.Caption, txtXML02.Text)
    Else
      lstResult.AddItem "+ " & "Picture(s) - " & chkPIC02.Caption & " inactive"
    End If
'- Picture(s)- Template(s)
    If chkPIC01.value = True Then
      bResult = zPRJ.Templates.Import(txtXML02.Text)
      Call AddResult(bResult, "Picture(s) - " & chkPIC01.Caption, txtXML02.Text)
    Else
      lstResult.AddItem "+ " & "Picture(s) - " & chkPIC01.Caption & " inactive"
    End If
'- Picture(s)- Picture(s)
    bResult = zPRJ.DynPictures.Import(txtXML02.Text)
    Call AddResult(bResult, chkXML02.Caption, txtXML02.Text)
  Else
    Call AddInfo(chkXML02, txtXML02)
  End If
'- Standard Recipe(s) ------------------------------------------------------------------
  If chkXML08.value = True And CheckPath(txtXML08) = True Then
    lstResult.AddItem "+ " & chkXML08.Caption & " import..."
'- Standard Recipe(s)- Variable(s)
    If chkRCP01.value = True Then
      bResult = zPRJ.Variables.ImportDirect(txtXML08.Text, False, False)
      Call AddResult(bResult, "Recipe(s) - " & chkRCP01.Caption, txtXML08.Text)
    Else
      lstResult.AddItem "+ " & "Recipe(s) - " & chkRCP01.Caption & " inactive"
    End If
'- Standard Recipe(s)- Standard Recipe(s)
    bResult = zPRJ.Recipes.ImportXML(txtXML08.Text)
    Call AddResult(bResult, chkXML08.Caption, txtXML08.Text)
  Else
    Call AddInfo(chkXML08, txtXML08)
  End If
'- Reaction matrix ---------------------------------------------------------------------
  If chkXML07.value = True And CheckPath(txtXML07) = True Then
    lstResult.AddItem "+ " & chkXML07.Caption & " import..."
    bResult = zPRJ.Remas.Import(txtXML07.Text)
    Call AddResult(bResult, chkXML07.Caption, txtXML07.Text)
  Else
    Call AddInfo(chkXML07, txtXML07)
  End If
'- Script(s) ---------------------------------------------------------------------------
  If chkXML05.value = True And CheckPath(txtXML05) = True Then
    lstResult.AddItem "+ " & chkXML05.Caption & " import..."
    bResult = zPRJ.Scripts.Import(txtXML05.Text)
    Call AddResult(bResult, chkXML05.Caption, txtXML05.Text)
  Else
    Call AddInfo(chkXML05, txtXML05)
  End If
'- Recipegroup Manager -----------------------------------------------------------------
  If chkXML09.value = True And CheckPath(txtXML09) = True Then
    lstResult.AddItem "+ " & chkXML09.Caption & " import..."
    bResult = zPRJ.RGMGroups.Import(txtXML09.Text)
    Call AddResult(bResult, chkXML09.Caption, txtXML09.Text)
  Else
    Call AddInfo(chkXML09, txtXML09)
  End If
'- Archive Server" ---------------------------------------------------------------------
  If chkXML10.value = True And CheckPath(txtXML10) = True Then
    lstResult.AddItem "+ " & chkXML10.Caption & " import..."
    bResult = zPRJ.ArchivesED.Import(txtXML10.Text)
    Call AddResult(bResult, chkXML10.Caption, txtXML10.Text)
  Else
    Call AddInfo(chkXML10, txtXML10)
  End If
'- User(s) -----------------------------------------------------------------------------
  If chkXML11.value = True And CheckPath(txtXML11) = True Then
    lstResult.AddItem "+ " & chkXML11.Caption & " import..."
    bResult = zPRJ.Passwords.Import(txtXML11.Text)
    Call AddResult(bResult, chkXML11.Caption, txtXML11.Text)
  Else
    Call AddInfo(chkXML11, txtXML11)
  End If
'- Menu(s) -----------------------------------------------------------------------------
  If chkXML12.value = True And CheckPath(txtXML12) = True Then
    lstResult.AddItem "+ " & chkXML12.Caption & " import..."
    bResult = zPRJ.ZenMenus.Import(txtXML12.Text)
    Call AddResult(bResult, chkXML12.Caption, txtXML12.Text)
  Else
    Call AddInfo(chkXML12, txtXML12)
  End If
'- Time control(s) ---------------------------------------------------------------------
  If chkXML13.value = True And CheckPath(txtXML13) = True Then
    lstResult.AddItem "+ " & chkXML13.Caption & " import..."
    bResult = zPRJ.TimeFunctions.Import(txtXML13.Text)
    Call AddResult(bResult, chkXML13.Caption, txtXML13.Text)
  Else
    Call AddInfo(chkXML13, txtXML13)
  End If
'- Allocation(s)" ----------------------------------------------------------------------
  If chkXML14.value = True And CheckPath(txtXML14) = True Then
    lstResult.AddItem "+ " & chkXML14.Caption & " import..."
    bResult = zPRJ.VarAssignments.Import(txtXML14.Text)
    Call AddResult(bResult, chkXML14.Caption, txtXML14.Text)
  Else
    Call AddInfo(chkXML14, txtXML14)
  End If
'- Interlocking(s)" --------------------------------------------------------------------
  If chkXML15.value = True And CheckPath(txtXML15) = True Then
    lstResult.AddItem "+ " & chkXML15.Caption & " import..."
    bResult = zPRJ.Interlockings.Import(txtXML15.Text, False)
    Call AddResult(bResult, chkXML15.Caption, txtXML15.Text)
  Else
    Call AddInfo(chkXML15, txtXML15)
  End If
'- Command(s) --------------------------------------------------------------------------
  If chkXML16.Visible = True Then
    If chkXML16.value = True And CheckPath(txtXML16) = True Then
      lstResult.AddItem "+ " & chkXML16.Caption & " import..."
      bResult = zPRJ.Interlockings.Import(txtXML16.Text, True)
      Call AddResult(bResult, chkXML16.Caption, txtXML16.Text)
    Else
      Call AddInfo(chkXML16, txtXML16)
    End If
  End If
'- Color Palette(s) --------------------------------------------------------------------------
  If chkXML17.value = True And CheckPath(txtXML17) = True Then
    lstResult.AddItem "+ " & chkXML17.Caption & " import..."
    bResult = zPRJ.ColorPalettes.Import(txtXML17.Text)
    Call AddResult(bResult, chkXML17.Caption, txtXML17.Text)
  Else
    Call AddInfo(chkXML17, txtXML17)
  End If
'- Unit(s) --------------------------------------------------------------------------
  If chkXML18.value = True And CheckPath(txtXML18) = True Then
    lstResult.AddItem "+ " & chkXML18.Caption & " import..."
    bResult = zPRJ.Units.Import(txtXML18.Text)
    Call AddResult(bResult, chkXML18.Caption, txtXML18.Text)
  Else
    Call AddInfo(chkXML18, txtXML18)
  End If
'- Fontlist(s) --------------------------------------------------------------------------
  If chkXML19.value = True And CheckPath(txtXML19) = True Then
    lstResult.AddItem "+ " & chkXML19.Caption & " import..."
    bResult = zPRJ.FontLists.Import(txtXML19.Text)
    Call AddResult(bResult, chkXML19.Caption, txtXML19.Text)
  Else
    Call AddInfo(chkXML19, txtXML19)
  End If
'- User(s) --------------------------------------------------------------------------
  If chkXML20.value = True And CheckPath(txtXML20) = True Then
    lstResult.AddItem "+ " & chkXML20.Caption & " import..."
    bResult = zPRJ.Passwords.Import(txtXML20.Text)
    Call AddResult(bResult, chkXML20.Caption, txtXML20.Text)
  Else
    Call AddInfo(chkXML20, txtXML20)
  End If
'- Usergroup(s) --------------------------------------------------------------------------
  If chkXML21.value = True And CheckPath(txtXML21) = True Then
    lstResult.AddItem "+ " & chkXML21.Caption & " import..."
    bResult = zPRJ.Passwords.ImportGroup(txtXML21.Text)
    Call AddResult(bResult, chkXML21.Caption, txtXML21.Text)
  Else
    Call AddInfo(chkXML21, txtXML21)
  End If
'+ Variable(s) 2nd time ----------------------------------------------------------------
  If chkXML04.value = True And CheckPath(txtXML04) = True Then
    lstResult.AddItem "+ " & chkXML04.Caption & " import 2nd time..."
    bResult = zPRJ.Variables.ImportDirect(txtXML04.Text, False, False)
    Call AddResult(bResult, chkXML04.Caption, txtXML04.Text)
  End If
  If chkXML02.value = True And chkPIC03.value = True And CheckPath(txtXML02) = True Then
    lstResult.AddItem "+ " & chkXML02.Caption & " import 2nd time..."
    bResult = zPRJ.Variables.ImportDirect(txtXML02.Text, False, False)
    Call AddResult(bResult, "Picture(s) - " & chkPIC03.Caption, txtXML02.Text)
  End If
'+ Function(s) 2nd time ----------------------------------------------------------------
  If chkXML06.value = True And CheckPath(txtXML06) = True Then
    bResult = zPRJ.RtFunctions.Import(txtXML06.Text)
    Call AddResult(bResult, chkXML06.Caption, txtXML06.Text)
  End If
  If chkXML02.value = True And chkPIC02.value = True And CheckPath(txtXML02) = True Then
    bResult = zPRJ.RtFunctions.Import(txtXML02.Text)
    Call AddResult(bResult, "Picture(s) - " & chkPIC02.Caption, txtXML02.Text)
  End If
'+ Picture(s) 2nd time------------------------------------------------------------------
  If chkXML02.value = True And CheckPath(txtXML02) = True Then
    bResult = zPRJ.DynPictures.Import(txtXML02.Text)
    Call AddResult(bResult, chkXML02.Caption, txtXML02.Text)
  End If
  'checkin project (for multiuser projects)
  zPRJ.CheckIn
  lstResult.AddItem String(69, "~")
  lstResult.AddItem "~                         Import is finished                        ~"
  lstResult.AddItem "~      Close the wizard or go back to import something else...      ~"
  lstResult.AddItem String(69, "~")
  lstResult.Selected(lstResult.ListCount - 1) = True
  Exit Sub
ErrHandler:
  lstResult.AddItem "~ [" & Err.Number & "] " & Err.Description
  lstResult.Selected(lstResult.ListCount - 1) = True
  Resume Next
End Sub

Sub AddResult(bResult As Boolean, txtModule As String, txtPath As String)
Dim strTMP As String
    If bResult = True Then
      strTMP = "  - " & txtModule
      strTMP = "  - " & txtModule & String(30 - Len(strTMP), " ")
      lstResult.AddItem strTMP & " imported from: " & txtPath
    Else
      lstResult.AddItem "  - ERROR [" & txtModule & "]"
    End If
    lstResult.Selected(lstResult.ListCount - 1) = True
    DoEvents
End Sub

Sub AddInfo(obCHK As CheckBox, obTXT As TextBox)
Dim strTMP As String
    strTMP = "+ " & obCHK.Caption
    strTMP = "+ " & obCHK.Caption & String(30 - Len(strTMP), " ")
    If obCHK.value = False Then
      lstResult.AddItem strTMP & " inactive!"
    ElseIf obTXT.value <> "" Then
      lstResult.AddItem strTMP & " file not found: " & obTXT.Text
    ElseIf obTXT.value = "" Then
      lstResult.AddItem strTMP & " no file selected!"
    End If
    lstResult.Selected(lstResult.ListCount - 1) = True
End Sub

Private Function CheckPath(ByRef obControl As TextBox) As Boolean
    On Error GoTo Error
    If (Not obControl Is Nothing) Then
      If (obControl.value <> "" And mFSO.FileExists(obControl.value) = False) Then
        MsgBox "The given file for '" & obControl.Caption & "' doesn't exist!" & vbCrLf & _
               "Please select a file.", vbExclamation, "File not found"
        obControl.SetFocus
        CheckPath = False
        Exit Function
      ElseIf obControl.value = "" Then
        CheckPath = False
        Exit Function
      End If
      CheckPath = True
    End If
    Exit Function
Error:
End Function

Private Sub chkXML02_Click() 'PICTURES
  chkPIC01.Enabled = chkXML02.value
  chkPIC02.Enabled = chkXML02.value
  chkPIC03.Enabled = chkXML02.value
  If chkXML02.value = True Then
    chkPIC01.value = True
    chkPIC02.value = True
    chkPIC03.value = True
  End If
End Sub

Private Sub chkPIC01_Click() 'TEMPLATE
  If chkPIC01.value = False Then
    MsgBox "The Picture(s) need the specified Template(s)!" & vbCrLf & "Disable only when the Template(s) already exists...", vbInformation, "Import Picture(s)"
  End If
End Sub

Private Sub chkPIC02_Click()  'FUNCTION
  If chkPIC02.value = False Then
    MsgBox "The Picture(s) need the linked Function(s)!" & vbCrLf & "Disable only when the Function(s) already exists...", vbInformation, "Import Picture(s)"
  End If
End Sub

Private Sub chkPIC03_Click()  'VARIABLE
  If chkPIC03.value = False Then
    MsgBox "The Picture(s) need the linked Variable(s)!" & vbCrLf & "Disable only when the Variable(s) already exists...", vbInformation, "Import Picture(s)"
  End If
End Sub

Private Sub chkXML08_Click() 'STANDARD RECIPES
  chkRCP01.Enabled = chkXML08.value
  If chkXML08.value = True Then
    chkRCP01.value = True
  End If
End Sub

Private Sub chkRCP01_Click()  'VARIABLE
  If chkRCP01.value = False Then
    MsgBox "The Recipe(s) need the linked Variable(s)!" & vbCrLf & "Disable only when the Variable(s) already exists...", vbInformation, "Import Standard Recipe(s)"
  End If
End Sub

Private Sub cmdFILE_Click()
#If Win64 Then
    MsgBox "This wizard only works in zenon ED 32bit!"
#Else

    Dim i  As Integer
    Dim myControl As Control
    Dim CDLG_XML As Object
    
    Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
      CDLG_XML.ShowOpen
      txtFilePath.Text = CDLG_XML.FileName
      For i = 0 To mpgWizardPage.Pages.Item(1).Controls.Count - 1
        Set myControl = mpgWizardPage.Pages.Item(1).Controls.Item(i)
        If Left(myControl.Name, 6) = "txtXML" Then
          myControl.Text = txtFilePath.Text
        End If
      Next i
#End If

End Sub

Private Sub cmdXML01_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
      CDLG_XML.ShowOpen
      txtXML01.Text = CDLG_XML.FileName
      chkXML01.value = True
     #End If
End Sub

Private Sub cmdXML02_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML02.Text = CDLG_XML.FileName
        chkXML02.value = True
    #End If
End Sub

Private Sub cmdXML03_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML03.Text = CDLG_XML.FileName
        chkXML03.value = True
  #End If
End Sub

Private Sub cmdXML04_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML04.Text = CDLG_XML.FileName
        chkXML04.value = True
  #End If
End Sub

Private Sub cmdXML05_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML05.Text = CDLG_XML.FileName
        chkXML05.value = True
  #End If
End Sub

Private Sub cmdXML06_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML06.Text = CDLG_XML.FileName
        chkXML06.value = True
  #End If
End Sub

Private Sub cmdXML07_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML07.Text = CDLG_XML.FileName
        chkXML07.value = True
  #End If
End Sub

Private Sub cmdXML08_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML08.Text = CDLG_XML.FileName
        chkXML08.value = True
  #End If
End Sub

Private Sub cmdXML09_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML09.Text = CDLG_XML.FileName
        chkXML09.value = True
  #End If
End Sub

Private Sub cmdXML10_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML10.Text = CDLG_XML.FileName
        chkXML10.value = True
  #End If
End Sub

Private Sub cmdXML11_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML11.Text = CDLG_XML.FileName
        chkXML11.value = True
  #End If
End Sub

Private Sub cmdXML12_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML12.Text = CDLG_XML.FileName
        chkXML12.value = True
  #End If
End Sub

Private Sub cmdXML13_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML13.Text = CDLG_XML.FileName
        chkXML13.value = True
#End If
End Sub

Private Sub cmdXML14_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML14.Text = CDLG_XML.FileName
        chkXML14.value = True
  #End If
End Sub

Private Sub cmdXML15_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML15.Text = CDLG_XML.FileName
        chkXML15.value = True
  #End If
End Sub

Private Sub cmdXML16_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML16.Text = CDLG_XML.FileName
        chkXML16.value = True
  #End If
End Sub

Private Sub cmdXML17_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML17.Text = CDLG_XML.FileName
        chkXML17.value = True
  #End If
End Sub

Private Sub cmdXML18_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML18.Text = CDLG_XML.FileName
        chkXML18.value = True
  #End If
End Sub

Private Sub cmdXML19_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML19.Text = CDLG_XML.FileName
        chkXML19.value = True
  #End If
End Sub

Private Sub cmdXML20_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML20.Text = CDLG_XML.FileName
        chkXML20.value = True
  #End If
End Sub

Private Sub cmdXML21_Click()
    #If Win64 Then
        MsgBox "This wizard only works in zenon ED 32bit!"
    #Else
        Dim CDLG_XML As Object
        Set CDLG_XML = CreateObject("MSComDlg.CommonDialog")
        CDLG_XML.ShowOpen
        txtXML21.Text = CDLG_XML.FileName
        chkXML21.value = True
        #End If
End Sub


Private Sub optMore_Click()
'different files
  txtFilePath.Enabled = False
  cmdFILE.Enabled = False
  Call EnableDisable("ENABLE")
End Sub

Private Sub optOne_Click()
'one file 4 all
  txtFilePath.Enabled = True
  cmdFILE.Enabled = True
  Call EnableDisable("DISABLE")
End Sub

Sub EnableDisable(strParam As String)
'enable/disable controls
Dim i  As Integer
Dim myControl As Control
  For i = 0 To mpgWizardPage.Pages.Item(1).Controls.Count - 1
    Set myControl = mpgWizardPage.Pages.Item(1).Controls.Item(i)
    If Left(myControl.Name, 6) = "cmdXML" Or Left(myControl.Name, 6) = "txtXML" Then
      If strParam = "ENABLE" Then
        myControl.Enabled = True
      ElseIf strParam = "DISABLE" Then
        myControl.Enabled = False
      End If
    End If
  Next i
End Sub

Sub AddDescriptions()
Dim i  As Integer
Dim myControl As Control
  For i = 0 To mpgWizardPage.Pages.Item(1).Controls.Count - 1
    Set myControl = mpgWizardPage.Pages.Item(1).Controls.Item(i)
    If Left(myControl.Name, 6) = "chkXML" Then
      myControl.Caption = strParts(CLng(Right(myControl.Name, 2)))
    End If
  Next i
End Sub

Sub SaveSettings()
Dim i  As Integer
Dim myControl As Control
  For i = 0 To mpgWizardPage.Pages.Item(1).Controls.Count - 1
    Set myControl = mpgWizardPage.Pages.Item(1).Controls.Item(i)
    Select Case Left(myControl.Name, 6)
      Case "chkXML", "chkPIC", "chkRCP"
        Call SaveSetting("zenOn", "XMLImportWizard", myControl.Name, CInt(myControl.value))
      Case "txtXML"
        Call SaveSetting("zenOn", "XMLImportWizard", myControl.Name, myControl.value)
    End Select
  Next i
End Sub

Sub LoadSettings()
Dim i  As Integer
Dim myControl As Control
  For i = 0 To mpgWizardPage.Pages.Item(1).Controls.Count - 1
    Set myControl = mpgWizardPage.Pages.Item(1).Controls.Item(i)
    Select Case Left(myControl.Name, 6)
      Case "chkXML", "chkPIC", "chkRCP"
        myControl.value = CInt(Right(GetSetting("zenOn", "XMLImportWizard", myControl.Name, "0"), 1))
      Case "txtXML"
        myControl.value = GetSetting("zenOn", "XMLImportWizard", myControl.Name, "")
    End Select
  Next i
End Sub

Private Sub lstResult_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim strFile As String
Dim TS As TextStream
Dim i As Integer
  If MsgBox("Do you want to save the LOG?", vbYesNo, "Save") = vbYes Then
    strFile = InputBox("Enter Filepath:", "Save", "C:\ImportWiz.txt")
    'RF 081124: if cancel was pressed, there is not path...
    If Not strFile = "" Then
      Set TS = mFSO.CreateTextFile(strFile, True, True)
      For i = 0 To lstResult.ListCount - 1
        TS.WriteLine lstResult.List(i)
      Next i
      TS.Close
    End If
  End If
End Sub

Private Sub cmdBack_Click()
  If mpgWizardPage.value > 0 Then
    mpgWizardPage.value = mpgWizardPage.value - 1
  End If
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdNext_Click()
  If mpgWizardPage.value < mpgWizardPage.Pages.Count - 1 Then
    mpgWizardPage.value = mpgWizardPage.value + 1
  End If
End Sub

Private Sub mpgWizardPage_Change()
  Select Case mpgWizardPage.value
    Case 0
      cmdBack.Visible = False
      cmdNext.Visible = True
      cmdFinish.Enabled = False
    Case mpgWizardPage.Pages.Count - 1
      cmdBack.Visible = True
      cmdNext.Visible = False
      cmdFinish.Enabled = False
    Case Else
      cmdBack.Visible = True
      cmdNext.Visible = True
      cmdFinish.Enabled = True
  End Select
End Sub

Private Sub cmdNext_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
  cmdNext.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdBack_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
  cmdBack.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdFinish_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
  cmdFinish.BackColor = rgb(160, 234, 255)
End Sub
Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
  cmdCancel.BackColor = rgb(160, 234, 255)
End Sub

Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
  cmdBack.BackColor = rgb(232, 232, 232)
  cmdNext.BackColor = rgb(232, 232, 232)
  cmdFinish.BackColor = rgb(232, 232, 232)
  cmdCancel.BackColor = rgb(232, 232, 232)
End Sub

'*************************************************************************************
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardName() As String
  GetWizardName = "XML Import Wizard"
End Function
Public Function GetWizardInfo() As String
  GetWizardInfo = "Imports XML files in the correct order to avoid problems...(only zenon ED 32bit)"
End Function
Public Function GetWizardCategory() As String
  GetWizardCategory = "Export/Import"
End Function
Public Function IsZenOnWizard() As Boolean
    #If Win64 Then
        IsZenOnWizard = False
    #Else
        IsZenOnWizard = True
    #End If
End Function
Public Function GetWizardVersion() As Integer
  GetWizardVersion = 4
  '(1) 19.11.2007 RF: CREATED (with 6.22)
  '(2) 24.11.2008 RF: REDESIG + BugFix 17144
  '(3) 20.10.2009 RF: new import methods (6.50) added + Redesign
  '(4) 28.01.2013 AR: updated for 7.10
End Function
'*************************************************************************************

Attribute VB_Name = "frmPDIAGWizard"
Attribute VB_Base = "0{D31C7F14-64CB-4E8B-ABC5-48F9EF98B0BD}{B9669E04-95EF-4F2B-8607-48229C0D4B3A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





' *********************************************************************************************
' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
' *********************************************************************************************
' *                                     PDIAG Import Wizard                                   *
' *********************************************************************************************
' *                      Version:             5                                               *
' *                      Created:             19.11.2007                                      *
' *                      Created by:          Bernd Wimmer                                    *
' *                      Last change:         19.03.2014                                      *
' *                      Last change by:      Bernd Wimmer                                    *
' *                      Optimized for:       7.20                                            *
' *********************************************************************************************
' *    Description:       Works for zenon ED 32bit                                            *
' *                                                                                           *
' *********************************************************************************************
' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
' *********************************************************************************************

Option Explicit

'****************************************************************************
' Import Wizard for PDIAG messages from XML file
'
' you have to link the library "Microsoft XML 3.0"
'****************************************************************************

Private zDriver As Driver
Private zVarType As VarType
Private zChannelType As Integer

Dim varNetAdress As String
Dim obVar As Variable
Dim nOffset As Long
Dim Count As Long

' PDIAG element from XML file
Dim PDiagMessageNumber As String
Dim PDiagAlarmtext As String
Dim PDiagAlarmClass As String
Dim PDiagNameVariable As String
Dim PDiagNameAttribute As String


Dim Unit1String As String
Dim Unit2String As String
Dim FDef1String As String
Dim FDef2String As String
Dim FDefBasisString As String
Dim FDefCount As Integer  ' ErrorCount overall
Dim FDef1Count As Integer ' ErrorCount level unit1
Dim FDef2Count As Integer ' ErrorCoutn level unit2
Dim StepString As String
Dim StepCount As Integer  ' Count Steps
Dim StepBasisString As String
Dim TransString As String
Dim ChainName As String
Dim ChainNumber As String
Dim ChainKeyWord As String

Const cdlOFNFileMustExist = &H1000&
Const cdlOFNHideReadOnly = &H4&
Const cdlOFNNoLongNames = &H40000
Const cdlOFNPathMustExist = &H800&
Const cdlOFNLongNames = &H200000
Const strVersion = "V6/20.03.2014"

Dim obXML As MSXML2.DOMDocument30
'Dim obXML As Object
'*************************************************************************************
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardName() As String
    GetWizardName = "PDIAG Wizard"
End Function
Public Function GetWizardInfo() As String
    GetWizardInfo = "Wizard imports PDIAG messages from XML-export-file."
End Function
Public Function GetWizardCategory() As String
    GetWizardCategory = "Export/Import"
End Function
Public Function IsZenOnWizard() As Boolean
    #If Win64 Then
        IsZenOnWizard = False
    #Else
        IsZenOnWizard = True
    #End If
End Function
Public Function GetWizardVersion() As Integer
    GetWizardVersion = 6
    '1 > 2 02.11.2009 RF: Graphics changed and Driver-Property "Driver" replaced with "Name"
    '2 > 3 04.11.2009 BW: Name of the driver in ComboBox corrected
    '3 > 4 19.04.2010 BW: Bugfix S7Graph message with attribute at end of text
    '4 > 5 29.01.2013 AR: Update for 7.10
    '5 > 6 20.03.2014 BW: Bugfix S7Graph message & new property "prefix in name"
End Function
'*************************************************************************************

'****************************************************************************
' ShowOpenFileDialog
' Show open dialog and returns the selected file. The selected
' directory is pufferd in the variable m_strDirectory
'****************************************************************************
Private Function ShowOpenFileDialog() As String
#If Win64 Then
    MsgBox ("This Wizard only works with zenon ED 32bit")
#Else
        On Error GoTo Error
        Dim OpenDlg As Object
        Set OpenDlg = CreateObject("MSComDlg.CommonDialog")
        OpenDlg.Flags = (cdlOFNFileMustExist Or cdlOFNHideReadOnly Or cdlOFNLongNames Or cdlOFNPathMustExist)
        OpenDlg.Filter = "XML-Files (*.XML)|*.XML"
        OpenDlg.InitDir = txtXMLfile.value
        OpenDlg.ShowOpen
        
        ShowOpenFileDialog = OpenDlg.FileName
        Exit Function
Error:
        MsgBox Err.Description
    #End If
End Function


'****************************************************************************
' cmbBrowse_Click
' works with the button in the form -> ShowOpenFileDialog
'****************************************************************************

Private Sub cmbBrowse_Click()
   txtXMLfile.value = ShowOpenFileDialog
End Sub
'****************************************************************************
' WizardStart
' when wizard starts do something
'****************************************************************************
Private Sub WizardStart()
Dim index As Long

    txtVersion.Caption = strVersion

    ' show bitmap
    If InStr(1, ApplicationED.Name, "zenon") <> 0 Then
        Header.Picture = Image_zenOn.Picture
    Else
        Header.Picture = Image_OEM.Picture
    End If

    ' set defaults in the form
    txtNetAdress.value = 0
    txtAlarmGroup.value = 0
    
    lbAusgabe.Clear
    lbAusgabe.AddItem "Import Wizard for PDIAG export file (XML-Format)."
    lbAusgabe.AddItem " "
    txtXMLfile.value = "c:\S7Export\pdiag-export.xml"
#If Win64 Then
    MsgBox ("This Wizard only works with zenon ED 32bit")
#Else
    ' search S7-TCP drivers in the project
    cbDriver.Clear
    For index = 0 To MyWorkspace.ActiveDocument.Drivers.Count - 1
        If MyWorkspace.ActiveDocument.Drivers.Item(index).Name = "S7TCP32" Then ' only S7-TCP drivers
            Set zDriver = MyWorkspace.ActiveDocument.Drivers.Item(index)
            cbDriver.AddItem zDriver.Identification
        End If
    Next index
  
    If (cbDriver.ListCount > 0) Then
        cbDriver.ListIndex = 0
    Else
        MsgBox "No S7-TCP driver found!"
        Unload Me
    End If
    
    mpgWizardPage.value = 0
    cmdBack.Visible = False
    cmdFinish.Enabled = False
#End If

End Sub
'****************************************************************************
' cbDriver_Change
' change the driver object with the combobox
'****************************************************************************
Private Sub cbDriver_Change()
    Set zDriver = MyWorkspace.ActiveDocument.Drivers.Item(cbDriver.value)
 End Sub


'****************************************************************************
' UserForm_Activate
' call the WizardStart
'****************************************************************************
Private Sub UserForm_Activate()
    WizardStart
End Sub
'****************************************************************************
' CreatePDIAGVariable
' create PDIAG variable and associated value variable
' change the limit text
'****************************************************************************
Private Sub CreatePDIAGVariable()
Dim strDummy1 As String
Dim strDummy2 As String
Dim strDummy3 As String
Dim intDummy1 As Integer
Dim strVarNameDummy As String
    
    If PDiagMessageNumber = "" Then
        lbAusgabe.AddItem ">> message without message-number!"
        lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
        Exit Sub
    End If
    
    ' variable for associated value
    If InStr(PDiagAlarmtext, "@1X%2d@") Or InStr(PDiagAlarmtext, "@1X%3d@") Or InStr(PDiagAlarmtext, "@1X%4d@") Or InStr(PDiagAlarmtext, "@1W%t#") Or InStr(PDiagAlarmtext, "@1X%t#") Then
        
        ' create variable
        zChannelType = 65 '65 = Alarm-S Attribute (Begleitwert)
        Set zVarType = MyWorkspace.ActiveDocument.VarTypes.Item("UINT")
        
        Set obVar = MyWorkspace.ActiveDocument.Variables.CreateVar(PDiagNameAttribute, zDriver, zChannelType, zVarType)
        Set obVar = MyWorkspace.ActiveDocument.Variables.Item(PDiagNameAttribute)
        lbAusgabe.AddItem "  > create attribute variable for dynamic limit text!"
        If (Not obVar Is Nothing) Then
            obVar.NetAddr = txtNetAdress.value  ' set net-adress
            nOffset = CLng(PDiagMessageNumber) ' convert offset
            obVar.Offset = nOffset ' offset = message number from PDIAG
            obVar.DynProperties("BitAddr") = 16 ' adress for associated value
            obVar.Tagname = txtIdentification.value  ' set identification
            obVar.DynProperties("Recourceslabel") = "PDIAG-Import"
            obVar.DynProperties("SetValueProtocol") = 2 ' no protocol in CEL
            obVar.DynProperties("SV_VBA") = False ' no protocol in CEL with VBA
            Count = Count + 1
        End If
    End If
    ' end of variable for associated value
    
    ' set the limit text
    If InStr(PDiagAlarmtext, "@1X%2d@") Or InStr(PDiagAlarmtext, "@1X%3d@") Or InStr(PDiagAlarmtext, "@1X%4d@") Then
        
        If InStr(PDiagAlarmtext, "@1X%2d@") Then intDummy1 = InStr(1, PDiagAlarmtext, "@1X%2d@")
        If InStr(PDiagAlarmtext, "@1X%3d@") Then intDummy1 = InStr(1, PDiagAlarmtext, "@1X%3d@")
        If InStr(PDiagAlarmtext, "@1X%4d@") Then intDummy1 = InStr(1, PDiagAlarmtext, "@1X%4d@")
        strDummy1 = Left(PDiagAlarmtext, intDummy1 - 1)

        If (intDummy1 + 7) < Len(PDiagAlarmtext) Then
            strDummy2 = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - intDummy1 - 7)
        Else
            strDummy2 = ""
        End If
        PDiagAlarmtext = strDummy1 & " ;%" & PDiagNameAttribute & ";" & strDummy2
        If Left(PDiagAlarmtext, 1) <> "$" Then
            PDiagAlarmtext = "$" & PDiagAlarmtext
        End If
    End If
    
    ' limit text for textlists
    If InStr(PDiagAlarmtext, "@1W%t#") Or InStr(PDiagAlarmtext, "@1X%t#") Then
        
        If InStr(PDiagAlarmtext, "@1W%t#") Then intDummy1 = InStr(1, PDiagAlarmtext, "@1W%t#")
        If InStr(PDiagAlarmtext, "@1X%t#") Then intDummy1 = InStr(1, PDiagAlarmtext, "@1X%t#")
        
        strDummy1 = Left(PDiagAlarmtext, intDummy1 - 1)
        strDummy2 = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - intDummy1 - 5)
        intDummy1 = InStr(1, strDummy2, "@")
        strDummy3 = Left(strDummy2, intDummy1 - 1) ' = name of the textlist
        strDummy2 = Right(strDummy2, Len(strDummy2) - intDummy1)
        
        PDiagAlarmtext = strDummy1 & " ;%@" & strDummy3 & "+" & PDiagNameAttribute & ";" & strDummy2
        
        If Left(PDiagAlarmtext, 1) <> "$" Then
            PDiagAlarmtext = "$" & PDiagAlarmtext
        End If
        
    End If
    ' end limit text
    
    ' create message variable
    zChannelType = tpSonderMerker
    Set zVarType = MyWorkspace.ActiveDocument.VarTypes.Item("BOOL")
    
    Set obVar = MyWorkspace.ActiveDocument.Variables.CreateVar(PDiagNameVariable, zDriver, zChannelType, zVarType)
    lbAusgabe.AddItem "  working with message number: " + PDiagMessageNumber + " (name = " + PDiagNameVariable + ")"
    
    Set obVar = MyWorkspace.ActiveDocument.Variables.Item(PDiagNameVariable)
    If (Not obVar Is Nothing) Then
        nOffset = CLng(PDiagMessageNumber) ' convert offset
        obVar.Offset = nOffset ' offset = message number from PDIAG
        obVar.Tagname = txtIdentification.value ' set identification
        obVar.NetAddr = txtNetAdress.value  ' set net adress
        If (obVar.EdLimitCount = 0) Then
            lbAusgabe.AddItem "    create limit!"
            obVar.CreateEdLimit ' Limit[0] is not active
            obVar.CreateEdLimit ' Limit[1] is active - settings below
        End If
        obVar.DynProperties("Recourceslabel") = "PDIAG-Import"
        
        obVar.DynProperties("Limits[0].Active") = False ' limit[0] is not active
        If Len(PDiagAlarmtext) >= 128 Then
            lbAusgabe.AddItem "  > message text too long!"
            PDiagAlarmtext = Left(PDiagAlarmtext, 127)
        End If
        obVar.DynProperties("Limits[1].Text") = PDiagAlarmtext ' limit text
        obVar.DynProperties("Limits[1].Alarm") = True ' limit as alarm
        obVar.DynProperties("Limits[1].AlarmAcknowledge") = False ' limit is not acknowledge
        obVar.DynProperties("Limits[1].IsMax") = True ' value is max
        obVar.DynProperties("Limits[1].LimitValue") = 1  ' value = 1
        obVar.DynProperties("Limits[1].Group") = txtAlarmGroup.value
        
        obVar.DynProperties("SetValueProtocol") = 2 ' no protocol in CEL
        obVar.DynProperties("SV_VBA") = False ' no protocol in CEL with VBA
        
        If (cbClass.value = True) And (PDiagAlarmClass <> "") Then
            obVar.DynProperties("Limits[1].Class") = CInt(PDiagAlarmClass)
        Else
            obVar.DynProperties("Limits[1].Class") = 0
        End If
        
        ' settings for IPA
        If (cbIPA.value = True) Then
            obVar.DynProperties("VarInASM") = True
        Else
            obVar.DynProperties("VarInASM") = False
        End If
        
        lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
        Count = Count + 1
    Else
        lbAusgabe.AddItem "  there were problems with: " & PDiagNameVariable
    End If
        
End Sub
'****************************************************************************
' FDefReading
' read the FDef properties from XML file
'****************************************************************************
Private Sub FDefReading()

Dim FDefIndex As Integer
Dim FDefAtCount As Integer
Dim index As Integer
Dim XML61105 As Boolean
Dim XML61104 As Boolean
Dim XML61107 As Boolean
         
    For FDefIndex = 1 To FDefCount
        PDiagMessageNumber = ""
        PDiagAlarmtext = ""
        PDiagAlarmClass = ""
        PDiagNameVariable = ""
        PDiagNameAttribute = ""
        XML61105 = False
        XML61104 = False
        XML61107 = False

        FDef1String = FDefBasisString & Format(FDefIndex) & "]"

        FDef1String = FDef1String & "/At"
        FDefAtCount = obXML.documentElement.selectNodes(FDef1String).length
        For index = 0 To FDefAtCount - 1
    
            DoEvents
            FDef2String = FDef1String & "[" & Format(index) & "]"
            Select Case obXML.documentElement.selectSingleNode(FDef2String).Attributes(0).Text
                
                Case "61105" ' Message Text
                    XML61105 = True
                    PDiagAlarmtext = obXML.documentElement.selectSingleNode(FDef2String).Text
                
                Case "61104" ' Message Number
                    XML61104 = True
                    PDiagMessageNumber = obXML.documentElement.selectSingleNode(FDef2String).Text
        
                Case "61107" ' Priority
                    XML61107 = True
                    PDiagAlarmClass = obXML.documentElement.selectSingleNode(FDef2String).Text
                    
            End Select
            
        Next
        If (XML61105 = True) And (XML61104 = True) And (XML61107 = True) Then
            PDiagNameVariable = "S" & CStr(varNetAdress) & "_PDIAG_" & PDiagMessageNumber
            If (cbPrefix.value = True) Then
                PDiagNameVariable = txtIdentification.value + "_" + PDiagNameVariable
            Else
                PDiagNameVariable = PDiagNameVariable
            End If
            PDiagNameAttribute = PDiagNameVariable & "A"
            CreatePDIAGVariable
        End If
            
    Next

End Sub
'****************************************************************************
' StepVariable
' create variable for graph7 steps messages
'****************************************************************************
Private Sub StepVariable()
Dim strDummy1 As String
Dim strDummy2 As String
Dim strDummy3 As String
Dim intDummy1 As Integer

    If PDiagMessageNumber = "" Then
        lbAusgabe.AddItem ">> message without message-number!"
        lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
        Exit Sub
    End If
    
    If Left(PDiagMessageNumber, 1) = " " Then
        PDiagMessageNumber = Right(PDiagMessageNumber, Len(PDiagMessageNumber) - 1)
    End If
        
    ' check the alarmtext
    If Left(PDiagAlarmtext, 1) = " " Then
        PDiagAlarmtext = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - 1)
    End If
    
    PDiagAlarmtext = "$" & PDiagAlarmtext ' dynamic limit text
    ' set the chain name
    If InStr(1, PDiagAlarmtext, "@S7GraphSym@") Then
        intDummy1 = InStr(1, PDiagAlarmtext, "@S7GraphSym@")
        strDummy1 = Left(PDiagAlarmtext, intDummy1 - 1)
        strDummy2 = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - intDummy1 - 12)
        PDiagAlarmtext = strDummy1 & ChainName & " " & strDummy2
    End If
    
    ' set the chain number
    If InStr(1, PDiagAlarmtext, "@1W%03u@") Then
        intDummy1 = InStr(1, PDiagAlarmtext, "@1W%03u@")
        strDummy1 = Left(PDiagAlarmtext, intDummy1 - 1)
        strDummy2 = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - intDummy1 - 8)
        
        PDiagAlarmtext = strDummy1 & ";%" & PDiagNameAttribute & PDiagMessageNumber & "; " & strDummy2
    End If
    
    'set the chain number as text
    strDummy3 = "@1W%t#S7GraphFB" & ChainNumber & "@"
    If InStr(1, PDiagAlarmtext, strDummy3) Then
        intDummy1 = InStr(1, PDiagAlarmtext, strDummy3)
        strDummy1 = Left(PDiagAlarmtext, intDummy1 - 1)
        If Len(PDiagAlarmtext) >= (intDummy1 + Len(strDummy3)) Then
            strDummy2 = Right(PDiagAlarmtext, Len(PDiagAlarmtext) - intDummy1 - Len(strDummy3))
        Else
            strDummy2 = ""
        End If
        
        PDiagAlarmtext = strDummy1 & ";%@" & ChainKeyWord & "+" & PDiagNameAttribute & PDiagMessageNumber & "; " & strDummy2
    End If
    
    ' create message variable
    zChannelType = tpSonderMerker
    Set zVarType = MyWorkspace.ActiveDocument.VarTypes.Item("BOOL")
    Set obVar = MyWorkspace.ActiveDocument.Variables.CreateVar(PDiagNameVariable, zDriver, zChannelType, zVarType)
    Set obVar = MyWorkspace.ActiveDocument.Variables.Item(PDiagNameVariable)
        
    lbAusgabe.AddItem "  working with message number: " + PDiagMessageNumber + " (name = " + PDiagNameVariable + ")"
    If (Not obVar Is Nothing) Then
        nOffset = CLng(PDiagMessageNumber) ' convert message number
        obVar.Offset = nOffset ' offset = message number from PDIAG
        obVar.Tagname = txtIdentification.value  ' set identification
        obVar.NetAddr = txtNetAdress.value  ' set net adress
        If (obVar.EdLimitCount = 0) Then
            lbAusgabe.AddItem "   create limit"
            obVar.CreateEdLimit ' Limit[0] is not active
            obVar.CreateEdLimit ' Limit[1] active - configuration below
        End If
        obVar.DynProperties("Recourceslabel") = "PDIAG-Import"
        
        obVar.DynProperties("Limits[0].Active") = False ' limit[0] is not active
        If Len(PDiagAlarmtext) >= 128 Then
            lbAusgabe.AddItem "  > message text too long!"
            PDiagAlarmtext = Left(PDiagAlarmtext, 127)
        End If
        obVar.DynProperties("Limits[1].Text") = PDiagAlarmtext ' limit text
        obVar.DynProperties("Limits[1].Alarm") = True ' limit as alarm
        obVar.DynProperties("Limits[1].AlarmAcknowledge") = False ' limit is not acknowledge
        obVar.DynProperties("Limits[1].IsMax") = True ' value is max
        obVar.DynProperties("Limits[1].LimitValue") = 1  ' value is 1

        obVar.DynProperties("Limits[1].Group") = txtAlarmGroup.value
        obVar.DynProperties("SetValueProtocol") = 2 ' no protocol in CEL
        obVar.DynProperties("SV_VBA") = False ' no protocol in CEL with VBA
        
        If (cbClass.value = True) And (PDiagAlarmClass <> "") Then
            obVar.DynProperties("Limits[1].Class") = CInt(PDiagAlarmClass)
        Else
            obVar.DynProperties("Limits[1].Class") = 0
        End If
        
        ' set the IPA property
        If (cbIPA.value = True) Then
            obVar.DynProperties("VarInASM") = True
        Else
            obVar.DynProperties("VarInASM") = False
        End If
                
        lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
        
        Count = Count + 1
    End If
End Sub
'****************************************************************************
' StepAttribute
' create variable for graph7 steps associate value
'****************************************************************************
Private Sub StepAttribute()
        
    zChannelType = 65 '65 = Alarm-S Attribute
    Set zVarType = MyWorkspace.ActiveDocument.VarTypes.Item("UINT")
    nOffset = CLng(PDiagMessageNumber) ' convert offset
        
    Set obVar = MyWorkspace.ActiveDocument.Variables.CreateVar(txtIdentification.value + "_" + PDiagNameAttribute, zDriver, zChannelType, zVarType)
    Set obVar = MyWorkspace.ActiveDocument.Variables.Item(PDiagNameAttribute)
    If (Not obVar Is Nothing) Then
        obVar.NetAddr = txtNetAdress.value  ' set net adress
        obVar.Offset = nOffset ' offset = message number from PDIAG
        obVar.DynProperties("BitAddr") = 0 ' for associate value
        obVar.Tagname = txtIdentification.value ' set identification
        obVar.DynProperties("Recourceslabel") = "PDIAG-Import"
        obVar.DynProperties("SetValueProtocol") = 2 ' no protocol in CEL
        obVar.DynProperties("SV_VBA") = False ' no protocol in CEL with VBA
            
        Count = Count + 1
    End If
    
End Sub
'****************************************************************************
' StepReading
' reading the Step properties from XML file
'****************************************************************************
Private Sub StepReading()
Dim FDefAtCount As Integer
Dim index1 As Integer
Dim index2 As Integer
Dim strDummy As String
Dim AtCount As Integer
Dim MessageAdress As Long
             
    FDef1String = StepBasisString & "1]/Fdefa"
        
    FDefAtCount = obXML.documentElement.selectNodes(FDef1String).length
        
    For index1 = 1 To FDefAtCount
        PDiagMessageNumber = ""
        PDiagNameVariable = ""
        PDiagNameAttribute = ""

        DoEvents
        FDef2String = FDef1String & "[" & Format(index1) & "]/At"
        AtCount = obXML.documentElement.selectNodes(FDef2String).length
        For index2 = 1 To AtCount
            On Error Resume Next
            strDummy = FDef2String & "[" & Format(index2) & "]"
        
            Select Case obXML.documentElement.selectSingleNode(strDummy).Attributes(0).Text
                Case "61105" ' message text
                    PDiagAlarmtext = obXML.documentElement.selectSingleNode(strDummy).Text
                Case "61104" ' message number
                    PDiagMessageNumber = obXML.documentElement.selectSingleNode(strDummy).Text
                    MessageAdress = Val(PDiagMessageNumber)
                    MessageAdress = 2097152 + MessageAdress ' konstanter Offset 200000hex
                    PDiagMessageNumber = Format(MessageAdress)
                Case "61107" ' priority
            End Select
        
        Next ' At inside Fdefa
        ' create variables
        If MessageAdress > 0 Then
            PDiagNameVariable = "S" & CStr(varNetAdress) & "_PDIAG_" & PDiagMessageNumber
            If (cbPrefix.value = True) Then
                PDiagNameVariable = txtIdentification.value + "_" + PDiagNameVariable
            Else
                PDiagNameVariable = PDiagNameVariable
            End If
            PDiagNameAttribute = PDiagNameVariable & "A"
            StepAttribute
            StepVariable
        End If
    
    Next ' Fdefa inside Step
    
End Sub
'****************************************************************************
' StepReading
' reading the Step properties from XML file
'****************************************************************************
Private Sub cmdFinish_Click()
Dim UnitLevel1 As Integer
Dim Unit1Index As Integer
Dim Unit2Index As Integer
Dim Unit2Count As Integer
Dim strDummy As String
Dim index As Integer
Dim obFileSystem

#If Win64 Then
    MsgBox ("This Wizard only works with zenon ED 32bit")
#Else
Set obFileSystem = CreateObject("Scripting.FileSystemObject") ' Dateisystem anlegen
    
    ' check if import file exists
    If obFileSystem.FileExists(txtXMLfile.value) = False Then
        MsgBox "Import file not found!", vbCritical
        Exit Sub
    End If
    
    lbAusgabe.Clear
    
    ' set the form
    cmbBrowse.Enabled = False
    cmdFinish.Enabled = False
    cmdCancel.Enabled = False
    Me.MousePointer = fmMousePointerHourGlass
      
    lbAusgabe.AddItem "importing message variables:"
    lbAusgabe.AddItem ""
    lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
   
    Count = 0
        
    Set obXML = New MSXML2.DOMDocument30
    
    If Not obXML.Load(txtXMLfile.value) Then
        MsgBox "error reading the file!", vbCritical
        Set obXML = Nothing
        Exit Sub
    End If
    
    UnitLevel1 = obXML.documentElement.selectNodes("/Container/Unit").length
    
    varNetAdress = txtNetAdress.value
    
    For Unit1Index = 1 To UnitLevel1
        DoEvents
        
        Unit1String = "/Container/Unit[" & Format(Unit1Index) & "]"
        FDef1String = Unit1String & "/Fdef" ' Fdef = ErrorDefinition
        FDef1Count = obXML.documentElement.selectNodes(FDef1String).length
        
        Unit2String = Unit1String & "/Unit"
        Unit2Count = obXML.documentElement.selectNodes(Unit2String).length

        If FDef1Count > 0 Then
            FDefCount = FDef1Count
            FDefBasisString = Unit1String & "/Fdef["
            FDefReading
        End If
        
        If Unit2Count > 0 Then
            For Unit2Index = 1 To Unit2Count
                DoEvents
                Unit2String = Unit1String & "/Unit[" & Format(Unit2Index) & "]"
                FDef2String = Unit2String & "/Fdef"
                FDef2Count = obXML.documentElement.selectNodes(FDef2String).length
                If FDef2Count > 0 Then
                    FDefCount = FDef2Count
                    FDefBasisString = Unit2String & "/Fdef["
                    FDefReading
                End If
            Next ' unit2index
        End If ' Unit2
            
        ' importing step messages
                
        StepString = Unit1String & "/Step" ' Step
                
        StepCount = obXML.documentElement.selectNodes(StepString).length
        If StepCount > 0 Then
            ChainNumber = obXML.documentElement.selectSingleNode(Unit1String).Attributes(2).Text ' reading "Num"
            ChainKeyWord = "S7GRAPH_FB" & Format(ChainNumber) & "_"

            Unit2String = Unit1String & "/At"
            Unit2Count = obXML.documentElement.selectNodes(Unit2String).length
            For index = 1 To Unit2Count - 1 ' search inside At for step name
                DoEvents
                strDummy = Unit2String & "[" & Format(index) & "]"
                If obXML.documentElement.selectSingleNode(strDummy).Attributes(0).Text = "1001" Then
                    ChainName = obXML.documentElement.selectSingleNode(strDummy).Text
                    If Left(ChainName, 1) = Chr(34) Then ' delete "
                        ChainName = Mid(ChainName, 2, Len(ChainName) - 2)
                    End If
                End If
            Next

            StepBasisString = Unit1String & "/Step["
            StepReading
        End If
    Next ' Unit1Index
    
    
    Set obXML = Nothing
    lbAusgabe.AddItem ""
    lbAusgabe.AddItem "there were " & Count & " messages imported..."
    lbAusgabe.ListIndex = lbAusgabe.ListCount - 1
    
    ' set the form
    cmbBrowse.Enabled = True
    cmdFinish.Enabled = True
    cmdCancel.Enabled = True
    Me.MousePointer = fmMousePointerDefault
#End If
End Sub
'****************************************************************************
' cmdCancel_Click
' exit the form
'****************************************************************************
Private Sub cmdCancel_Click()
    Unload Me
End Sub
'****************************************************************************
' cmdBack_Click
' manage the multi page form
'****************************************************************************
Private Sub cmdBack_Click()
    If mpgWizardPage.value > 0 Then
        mpgWizardPage.value = mpgWizardPage.value - 1
    End If
End Sub
'****************************************************************************
' cmdNext_Click
' manage the multi page form
'****************************************************************************
Private Sub cmdNext_Click()
    If mpgWizardPage.value < mpgWizardPage.Pages.Count - 1 Then
        mpgWizardPage.value = mpgWizardPage.value + 1
    End If
End Sub
'****************************************************************************
' mpgWizardPage_Change
' manage the multi page form
'****************************************************************************
Private Sub mpgWizardPage_Change()
    'txtVersion.Caption = Str(mpgWizardPage.value)
    Select Case mpgWizardPage.value
        Case 0
            cmdBack.Visible = False
            cmdNext.Visible = True
            cmdFinish.Enabled = False
        Case 1
            cmdBack.Visible = True
            cmdNext.Visible = True
            cmdFinish.Enabled = False
        Case 2
            cmdBack.Visible = True
            cmdNext.Visible = False
            cmdFinish.Enabled = True
        
        Case Else
            cmdBack.Visible = True
            cmdNext.Visible = True
            cmdFinish.Enabled = True
    End Select
End Sub
'****************************************************************************
' cmdNext_MouseMove
' manage the buttons
'****************************************************************************
Private Sub cmdNext_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdNext.BackColor = rgb(160, 234, 255)
End Sub
'****************************************************************************
' cmdBack_MouseMove
' manage the buttons
'****************************************************************************
Private Sub cmdBack_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(160, 234, 255)
End Sub
'****************************************************************************
' cmdFinish_MouseMove
' manage the buttons
'****************************************************************************
Private Sub cmdFinish_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdFinish.BackColor = rgb(160, 234, 255)
End Sub
'****************************************************************************
' cmdCancel_MouseMove
' manage the buttons
'****************************************************************************
Private Sub cmdCancel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdCancel.BackColor = rgb(160, 234, 255)
End Sub
'****************************************************************************
' Userform_MouseMove
' manage the buttons
'****************************************************************************
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    cmdBack.BackColor = rgb(232, 232, 232)
    cmdNext.BackColor = rgb(232, 232, 232)
    cmdFinish.BackColor = rgb(232, 232, 232)
    cmdCancel.BackColor = rgb(232, 232, 232)
End Sub


Attribute VB_Name = "frmSymbol"
Attribute VB_Base = "0{C89F7EE3-201A-4121-BD28-72148A41E032}{C5E9F524-8DA6-40EB-B871-AAE034821B6F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' *********************************************************************************************
' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
' *********************************************************************************************
' *                                           Symbol Wizard                                   *
' *********************************************************************************************
' *                      Version:             7                                               *
' *                      Created:             08.11.2006                                      *
' *                      Created by:          Robert Ficker                                   *
' *                      Last change:         12.06.2015                                      *
' *                      Last change by:      Bernhard Feldbacher                             *
' *                      Optimized for:       7.10                                            *
' *********************************************************************************************
' *    Description:          Works f|fffd|r only for 32bit                                         *
' *                                                                                           *
' *********************************************************************************************
' * COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA COPA-DATA *
' ***************************************************************************************
'#######################################################################
'## This Wizard is Event-Triggered by zenOn Events:                   ##
'##     - ZenWorkspace_OnElementCreated (now deleted!!!)              ##
'##     - ZenWorkspace_OnElementDoubleClicked                         ##
'##                                                                   ##
'## Only Elements of Type Symbol (130) with inherited properties are  ##
'## able to use this wizard, everybody can freely enhace this wizard. ##
'## ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ##
'## Needed Recources:                                                 ##
'##     - Microsoft Common Dialog Control 6.0 (SP6)                   ##
'##     - Microsoft Visual Basic for Application Extensibility 5.3    ##
'## ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ##
'## Autor: Robert Ficker, COPA-DATA                        08.11.2006 ##
'#######################################################################
Option Explicit
Dim zPRJ As Project         'zenOn Project Object
Dim zPIC As DynPicture      'zenOn Picture Object
Dim zELE As Element         'zenOn Element Object
Dim zVAR As Variable        'zenOn Variable Object
Dim zFCT As RtFunction      'zenOn Function Object
Dim zMNU As ZenMenu         'zenOn Menu Object
Dim vProps As Variant       'Variant Array - Properties
Dim strDynProp As String    'DynProperty String
Dim nIndex As Integer       'DynProperty Index of Array

'*************************************************************************************
'The following methods define the form as a control system Wizard. If IsZenOnWizard is set to false,
'the Wizard does not appear in the system.
Public Function GetWizardVersion() As Integer
    GetWizardVersion = 7
    '(6) 28.01.2013 AR: Update for 7.10
    '(7) 12.06.2015 BF: Defect 34352
End Function
Public Function GetWizardName() As String
    GetWizardName = "Wizard for inherited Symbols"
End Function
Public Function GetWizardInfo() As String
    GetWizardInfo = "Symbol Wizard (Only for zenon ED 32bit)"
End Function
Public Function GetWizardCategory() As String
    GetWizardCategory = "Pictures"
End Function
Public Function IsZenOnWizard() As Boolean
    IsZenOnWizard = False
End Function
'*************************************************************************************


'#######################################################################
'## Init UserForm dependent properties...                             ##
'#######################################################################
Private Sub UserForm_Initialize()
    Me.PictureAlignment = fmPictureAlignmentCenter
    Me.PictureSizeMode = fmPictureSizeModeStretch
    Call AllInVisible
End Sub

'#######################################################################
'## Init Wizard from created or doubleclicked element object...       ##
'#######################################################################
Public Sub InitWizard(obElement As Element)
Dim i As Integer
    Set zELE = obElement
    'read inherited Dynproperties of the symbol
    vProps = GetSymbolProps(zELE)
    cbxElements.Clear
    'add Elements of the Symbol to the combobox
    For i = 0 To UBound(vProps, 2)
        If ExistsInElements(CStr(vProps(0, i))) = False Then cbxElements.AddItem vProps(0, i)
    Next i
    cbxElements.Text = cbxElements.List(0)
    cbxVAR.Clear
    Set zPRJ = MyWorkspace.ActiveDocument
    'add all variables of the active project to the combobox
    For i = 0 To zPRJ.Variables.Count - 1
        Set zVAR = zPRJ.Variables.Item(i)
        cbxVAR.AddItem zVAR.Name
    Next i
    cbxFCT.Clear
    For i = 0 To zPRJ.RtFunctions.Count - 1
        'add all functions of the active project to the combobox
        Set zFCT = zPRJ.RtFunctions.Item(i)
        cbxFCT.AddItem zFCT.Name
    Next i
    cbxMNU.Clear
    For i = 0 To zPRJ.ZenMenus.Count - 1
        'add all context menus of the active project to the combobox
        Set zMNU = zPRJ.ZenMenus.Item(i)
        If zMNU.IsPulldown = False Then cbxMNU.AddItem zMNU.Name
    Next i
    lblINFO.Visible = False
End Sub

'#######################################################################
'## Get all inherited properties for the selected element...          ##
'#######################################################################
Private Sub cbxElements_Click()
Dim i As Integer
    lstProps.Clear
    For i = 0 To UBound(vProps, 2)
        'add properties of the selected element to the listbox
        If vProps(0, i) = cbxElements.Text Then
            lstProps.AddItem vProps(3, i) & " (" & vProps(1, i) & ")"
        End If
    Next i
End Sub


'#######################################################################
'## Get and show actual property values for the selected property     ##
'#######################################################################
Private Sub lstProps_Click()
Dim strTMP As String
Dim strType As String
    strTMP = lstProps.Text
    strTMP = Mid(strTMP, InStr(1, strTMP, "("))
    strTMP = Mid(strTMP, 2, Len(strTMP) - 2)
    nIndex = GetID(cbxElements.Text, strTMP)
    strType = vProps(2, nIndex)
    Select Case strType
' BOOLEAN ----------------------------------------------------------------
        Case "Boolean"
            'checkbox...
            Call AllInVisible
            chkBOOL.Caption = vProps(3, nIndex) & " (" & vProps(1, nIndex) & ")"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            'set actual value
            chkBOOL.value = zELE.DynProperties(strDynProp)
            chkBOOL.Visible = True
' LONG - DOUBLE - STRING -------------------------------------------------
        Case "Long", "Double", "String"
            'textbox...
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            'set actual value
            If vProps(1, nIndex) = "Menu" Then
                cbxMNU.Text = zELE.DynProperties(strDynProp)
                cbxMNU.Visible = True
            Else
                txtVALUE.Text = zELE.DynProperties(strDynProp)
                txtVALUE.Visible = True
            End If
            lblDesc.Visible = True

' VARIABLE ---------------------------------------------------------------
        Case "ZT_VARIABLE_DYN"
            'combobox (cbxVAR)
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            'set actual value
            If IsObject(zELE.DynProperties(strDynProp)) = True Then
                Set zVAR = zELE.DynProperties(strDynProp)
                If Not zVAR Is Nothing Then
                    cbxVAR.Text = zVAR.Name
                End If
            Else
                cbxVAR.Text = ""
            End If
            lblDesc.Visible = True
            cbxVAR.Visible = True
' FUNCTION ---------------------------------------------------------------
        Case "ZT_FUNCTION_DYN"
            'combobox (cbxFCT)
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            'set actual value
            If IsObject(zELE.DynProperties(strDynProp)) = True Then
                Set zFCT = zELE.DynProperties(strDynProp)
                'Only set combobox text if function is from the same project as the element (Defect 34352)
                If zFCT.Parent.Parent.Name = zELE.Parent.Parent.Parent.Parent.Name Then
                    If Not zFCT Is Nothing Then
                        cbxFCT.Text = zFCT.Name
                    End If
                End If
            Else
                cbxFCT.Text = ""
            End If
            lblDesc.Visible = True
            cbxFCT.Visible = True
' COLOR ------------------------------------------------------------------
        Case "ZT_COLOR"
            'txtcolor
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            On Error Resume Next
                txtColor.Text = zELE.DynProperties(strDynProp)
                lblCOLOR.BackColor = txtColor.Text
            If Err.Number = 6 Then ' Defect# 26229
                'Overflow caused by using color paletts
                lblCOLOR.BackColor = 0
                Debug.Print "Color palettes not supported. Please use only colors for this wizard!"
            End If
            txtColor.Visible = True
            lblCOLOR.Visible = True
            cmdColor.Visible = True
            lblDesc.Visible = True
' VBA MACRO --------------------------------------------------------------
        Case "ZT_VBAMAKRO"
            'Combobox (cbxVBA)
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            Call GetVBAProcs(vProps(1, nIndex))
            cbxVBA.Text = zELE.DynProperties(strDynProp)
            lblDesc.Visible = True
            cbxVBA.Visible = True
' FILE -------------------------------------------------------------------
        Case "ZT_FILE"
            'TextField
            Call AllInVisible
            lblDesc.Caption = vProps(3, nIndex) & vbCrLf & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & "):"
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            txtVALUE.Text = zELE.DynProperties(strDynProp)
            txtVALUE.Visible = True
            lblDesc.Visible = True
            cmdFILE.Visible = True
' ELSE -------------------------------------------------------------------
        Case Else
            'nicht unterst|fffd|tzt
            Call AllInVisible
            strDynProp = vProps(0, nIndex) & "\" & vProps(1, nIndex)
            Debug.Print zELE.DynProperties(strDynProp)
            lblDesc.Caption = "This exported property can not be edited by this wizard. Please use the property-window for changes." & vbCrLf & _
                              vProps(3, nIndex) & " (" & vProps(1, nIndex) & " As " & vProps(2, nIndex) & ")"
            lblDesc.Visible = True
    End Select
End Sub

'#######################################################################
'## Set a variable for different variable-properties...               ##
'#######################################################################
Private Sub cbxVAR_Click()
    zELE.DynProperties(strDynProp) = cbxVAR.Text
    zELE.Update
    zELE.Parent.Parent.Save
End Sub

'#######################################################################
'## Set a function for different function-properties...               ##
'#######################################################################
Private Sub cbxFCT_Change()
    zELE.DynProperties(strDynProp) = cbxFCT.Text
    zELE.Update
    zELE.Parent.Parent.Save
End Sub

'#######################################################################
'## Set a VBA Macro for different VBA Events...                       ##
'#######################################################################
Private Sub cbxVBA_Change()
    zELE.DynProperties(strDynProp) = cbxVBA.Text
    zELE.Update
    zELE.Parent.Parent.Save
End Sub

'#######################################################################
'## Set a Context Menu...                                             ##
'#######################################################################
Private Sub cbxMNU_Change()
    zELE.DynProperties(strDynProp) = cbxMNU.Text
    zELE.Update
    zELE.Parent.Parent.Save
End Sub

'#######################################################################
'## Select a file...                                                  ##
'#######################################################################
Private Sub cmdFILE_Click()
#If Win64 Then
    MsgBox ("This wizard only works in zenon ED 32bit")
#Else
    Dim CommonDialog As Object
    Dim CommonDialog1 As Object
    Set CommonDialog = CreateObject("MSComDlg.CommonDialog")
    CommonDialog.Filter = "Helpfile (*.chm)|*.chm"
    CommonDialog.CancelError = False
    
    Set CommonDialog1 = CreateObject("MSComDlg.CommonDialog")
    CommonDialog1.Filter = "All Files (*.*)|*.*|"
    CommonDialog1.CancelError = False
    
    If vProps(1, nIndex) = "Helpfile" Then
        CommonDialog.FilterIndex = 1
        CommonDialog.InitDir = MyWorkspace.ActiveDocument.ModulePath(tpPathHelp)
        DoEvents
        CommonDialog.ShowOpen
        If CommonDialog.FileTitle <> "" Then txtVALUE.Text = CommonDialog.FileTitle
    ElseIf vProps(1, nIndex) = "FileName" Then
        CommonDialog1.FilterIndex = 1
        CommonDialog1.InitDir = MyWorkspace.ActiveDocument.ModulePath(tpPathBMP)
        DoEvents
        CommonDialog1.ShowOpen
        If CommonDialog1.FileTitle <> "" Then txtVALUE.Text = CommonDialog1.FileTitle
    Else
        Exit Sub
    End If
#End If

End Sub

'#######################################################################
'## Set all BOOLEAN properties...                                     ##
'#######################################################################
Private Sub chkBOOL_Click()
Dim ErrHandler As Label
On Error Resume Next
    If zELE.DynProperties(strDynProp) = chkBOOL.value Then Exit Sub
    zELE.DynProperties(strDynProp) = chkBOOL.value
    If Err.Number = 1010 Then
        MsgBox "Read Only - check dependencies...", vbExclamation, "Read-Only Parameter"
        Exit Sub
    ElseIf Err.Number <> 0 Then
        GoTo ErrHandler
    End If
    zELE.Update
    zELE.Parent.Parent.Save
    Exit Sub
ErrHandler:
    MsgBox Err.Description, vbCritical, "Error " & Err.Number
End Sub

'#######################################################################
'## Set numerical and textual inputs...                               ##
'#######################################################################
Private Sub txtVALUE_Change()
Dim ErrHandler As Label
On Error Resume Next

    'If zELE.DynProperties(strDynProp) = txtVALUE.Text Then Exit Sub
    If vProps(2, nIndex) = "Long" Or vProps(2, nIndex) = "Double" Then
        'RF 081124: changed because of type conflicts...
        If Val(zELE.DynProperties(strDynProp)) = Val(txtVALUE.Text) Then Exit Sub
        If Not IsNumeric(txtVALUE.Text) Then
            MsgBox "Only " & vProps(2, nIndex) & " is allowed!", vbInformation, "Invalid Type!"
            txtVALUE.Text = zELE.DynProperties(strDynProp)
        End If
    Else
        'RF 081124: changed because of type conflicts...
        If zELE.DynProperties(strDynProp) = txtVALUE.Text Then Exit Sub
    End If
    zELE.DynProperties(strDynProp) = txtVALUE.Text
    If Err.Number = 1010 Then
        MsgBox "Read Only - check dependencies...", vbExclamation, "Read-Only Parameter"
        Exit Sub
    ElseIf Err.Number <> 0 Then
        GoTo ErrHandler
    End If
    zELE.Update
    zELE.Parent.Parent.Save
    Exit Sub
ErrHandler:
    MsgBox Err.Description, vbCritical, "Error " & Err.Number
End Sub

'#######################################################################
'## Show Dialog to select and set color properties...                 ##
'#######################################################################
Private Sub cmdColor_Click()
#If Win64 Then
    MsgBox ("This wizard only works in zenon ED 32bit")
#Else
Dim v As Variant
Dim ErrHandler As Label
Dim CommonDialog As Object
On Error Resume Next

    Set CommonDialog = CreateObject("MSComDlg.CommonDialog")
    CommonDialog.Color = txtColor.Text
    CommonDialog.ShowColor
    txtColor.Text = CommonDialog.Color
    lblCOLOR.BackColor = CommonDialog.Color
    zELE.DynProperties(strDynProp) = txtColor.Text
    If Err.Number = 1010 Then
        MsgBox "This property can not (yet) be modified. Activating an associated property may release this property for editing.", vbExclamation, "Read-Only"
        Exit Sub
    ElseIf Err.Number <> 0 Then
        GoTo ErrHandler
    End If
    zELE.Update
    zELE.Parent.Parent.Save
    Exit Sub
ErrHandler:
    MsgBox Err.Description, vbCritical, "Error " & Err.Number
#End If
End Sub

'#######################################################################
'## Close / Unload the userform - WIZARD                              ##
'#######################################################################
Private Sub cmdExit_Click()
    Unload Me
End Sub

'|---------->>>>>   SEVERAL Functions and Procedures    <<<<<----------|

'#######################################################################
'## Switch all property depending elements invisible...               ##
'#######################################################################
Sub AllInVisible()
    chkBOOL.Visible = False
    txtVALUE.Visible = False
    cbxVAR.Visible = False
    cbxFCT.Visible = False
    cbxVBA.Visible = False
    cbxMNU.Visible = False
    txtColor.Visible = False
    cmdColor.Visible = False
    lblCOLOR.Visible = False
    lblDesc.Visible = False
    cmdFILE.Visible = False
End Sub

'#######################################################################
'## Get all inherited dynproperties of the given inherited symbol     ##
'#######################################################################
Function GetSymbolProps(zElem As Element) As Variant
Dim v As Variant
Dim i As Integer
Dim s As String
Dim Result() As String
Dim n As Integer
Dim Pos As Integer
    v = zElem.DynPropertiesEnum("")
    ReDim Result(3, 0)
    n = 0
    For i = 0 To UBound(v)
        s = v(i)
        s = Mid(s, 1, InStr(1, s, ",") - 1)
        If InStr(1, s, "\") <> 0 Then
            Result(0, n) = Mid(s, 1, InStr(1, s, "\") - 1)
            Result(1, n) = Mid(s, InStr(1, s, "\") + 1)
            Pos = InStr(1, v(i), ",") + 1
            Result(2, n) = Mid(v(i), Pos, InStr(Pos, v(i), ",") - Pos)
            Pos = InStr(Pos, v(i), ",") + 1
            Result(3, n) = Mid(v(i), Pos)
            n = n + 1
            ReDim Preserve Result(3, n)
        End If
    Next i
    GetSymbolProps = Result
End Function

'#######################################################################
'## Get all Makros of ModuleElement depending to the given property   ##
'#######################################################################
Sub GetVBAProcs(strPart As Variant)
Dim obVBProj As VBProject
Dim obComp As VBComponent
Dim strProjectName As String
Dim nLine As Integer
Dim nLines As Integer
Dim strLine As String
Dim v As Variant
On Error Resume Next
    cbxVBA.Clear
    ReDim v(0)
    strProjectName = "Z" & MyWorkspace.ActiveDocument.Name
    Set obVBProj = MyWorkspace.VBE.VBProjects.Item(strProjectName)
    If (Not obVBProj Is Nothing) Then
        Set obComp = obVBProj.VBComponents.Item("ModuleElement")
        If (Not obComp Is Nothing) Then
            nLines = obComp.CodeModule.CountOfLines
            For nLine = 1 To nLines
                strLine = obComp.CodeModule.Lines(nLine, 1)
                If InStr(1, strLine, strPart) <> 0 And InStr(1, strLine, "Public Sub") <> 0 Then
                    strLine = Mid(strLine, InStr(1, strLine, strPart))
                    strLine = Left(strLine, InStr(1, strLine, "(") - 1)
                    
                    cbxVBA.AddItem strLine
                End If
            Next nLine
        End If
    End If
End Sub

'#######################################################################
'## Check if Text exists already within the Combobox of Elements      ##
'#######################################################################
Function ExistsInElements(NewText As String) As Boolean
Dim i As Integer
    If NewText = "" Then
        ExistsInElements = True
        Exit Function
    End If
    For i = 0 To cbxElements.ListCount - 1
        If cbxElements.List(i) = NewText Then
            ExistsInElements = True
            Exit Function
        End If
    Next i
End Function

'#######################################################################
'## Get ID from String-Array by selected Element and DynProperty      ##
'#######################################################################
Function GetID(sElem As String, sProp As String) As Integer
Dim i As Integer
    For i = 0 To UBound(vProps, 2)
        If vProps(0, i) = sElem And vProps(1, i) = sProp Then
            GetID = i
            Exit Function
        End If
    Next i
End Function



' InQuest injected base64 decoded content
' :q%zg
' :.nW
' j{^t
' j{^t
' ^t*.
' *^r&
' *^r&
' *^.)
' K+-zd
' ^r*^>
' ^r*^>
' rgRzW
' *^.)
' Szjej
' ^t*.
' ^t*.
' K+-zo
' j{^t
' Z+.)
' j{^t
' y'+y
' '>'-
' .+-n
' ^t*.
' -"jh
' rgSzjej
' *'"{h
' y+kz

INQUEST-PP=macro
