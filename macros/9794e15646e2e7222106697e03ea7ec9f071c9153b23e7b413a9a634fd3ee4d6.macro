Attribute VB_Name = "Module1"
Option Explicit

Public Function QuickSortCell(rng As String)
    Dim i As Integer
    Dim arr As Variant
    Dim strg As String
    arr = Split(rng)
    QuickSort arr, LBound(arr), UBound(arr)
    For i = LBound(arr) To UBound(arr)
        strg = strg & CStr(arr(i)) & " "
    Next i
    QuickSortCell = Trim(strg)
End Function

Public Sub QuickSort(vArray As Variant, inLow As Long, inHi As Long)

  Dim pivot   As Variant
  Dim tmpSwap As Variant
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (vArray(tmpLow) < pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot < vArray(tmpHi) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        tmpSwap = vArray(tmpLow)
        vArray(tmpLow) = vArray(tmpHi)
        vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then QuickSort vArray, inLow, tmpHi
  If (tmpLow < inHi) Then QuickSort vArray, tmpLow, inHi

End Sub
Public Sub OptimizeON(Optional a As Integer)
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    ActiveSheet.DisplayPageBreaks = False
    Application.DisplayStatusBar = False
    Application.DisplayAlerts = False
End Sub
Public Sub OptimizeOFF(Optional a As Integer)
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    ActiveSheet.DisplayPageBreaks = True
    Application.DisplayStatusBar = True
    Application.DisplayAlerts = True
End Sub
Attribute VB_Name = "PLEX_UDFs"
Public Function MultiCat(ByRef rng As Excel.Range, Optional ByVal DELIM As String = "") As String
    Dim rCell As Range
    For Each rCell In rng
        MultiCat = MultiCat & DELIM & rCell.Text
    Next rCell
    MultiCat = Mid(MultiCat, Len(DELIM) + 1)
End Function
Public Function Substring(txt, Optional Delimiter As String = " ", Optional n As Integer = 1) As String
    Dim x As Variant
    x = Split(txt, Delimiter)
    If n > 0 And n - 1 <= UBound(x) Then
        Substring = x(n - 1)
    Else
        Substring = ""
    End If
End Function
Attribute VB_Name = "SEM_UDFs"
Public Function deldupincell(rng As String) As String
Dim arr() As String
arr() = Split(rng)
strg = " "
For i = LBound(arr) To UBound(arr)
    If InStr(1, strg, " " & arr(i) & " ", vbBinaryCompare) > 0 Then
    strg = " " & strg & " "
    Else
    strg = " " & strg & arr(i) & " "
    End If
Next i
deldupincell = Application.WorksheetFunction.Trim(strg)
End Function
Sub arrdeldupinrange()
Dim i As Long, arr()
OptimizeON
arr = Range(Range("B3"), Range("B3").End(xlDown)).Value
    For i = LBound(arr) To UBound(arr)
        arr(i, 1) = deldupincell(CStr(arr(i, 1)))
    Next
Range(Range("B3"), Range("B3").End(xlDown)).Value = arr
OptimizeOFF
End Sub
Function SortArr(ByVal arr)
Dim i&, j&, n&, tmp$
If Not IsArray(arr) Then SortArr = arr: Exit Function
n = UBound(arr)
For i = 0 To n - 1
    For j = i + 1 To n
        If arr(i) > arr(j) Then tmp = arr(i): arr(i) = arr(j): arr(j) = tmp
Next j, i
SortArr = arr
End Function
Function SortArrDesc(ByVal arr)
Dim i&, j&, n&, tmp$
If Not IsArray(arr) Then SortArrDesc = arr: Exit Function
n = UBound(arr)
For i = 0 To n - 1
    For j = i + 1 To n
        If arr(i) < arr(j) Then tmp = arr(i): arr(i) = arr(j): arr(j) = tmp
Next j, i
SortArrDesc = arr
End Function
Function SortCell$(s$)
Dim arr
arr = Split(Replace(s, vbLf, ""), " ")
SortCell = Join(SortArr(arr), " ")
End Function
Sub SortRngInsideCell()
OptimizeON
    With Range("B3", Range("B3").End(xlDown)).Offset(0, 1)
    .FormulaR1C1 = "=SortCell(RC[-1])"
    .Copy
    .PasteSpecial Paste:=xlPasteValues
    End With
OptimizeOFF
End Sub
Sub arrremnum()
Dim arr()
OptimizeON
'
arr = Range("b3", Range("b3").End(xlDown)).Value
For i = LBound(arr) To UBound(arr)
    subarr = Split(arr(i, 1), " ")
        For j = LBound(subarr) To UBound(subarr)
            If subarr(j) < 1E+33 Then
            subarr(j) = ""
            Else: subarr(j) = subarr(j)
            End If
        Next
    arr(i, 1) = Application.WorksheetFunction.Trim(Join(subarr, " "))
Next
Range("b3", Range("b3").End(xlDown)).Value = arr
OptimizeOFF
End Sub
Public Function categorize_allwords(rng As String) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim arr() As String
arr() = Split(rng)
For i = LBound(arr) To UBound(arr)
  strg = strg & binsearchfindonly(arr(i), Range("markerdict"), 2) & " "
Next i
categorize_allwords = Application.WorksheetFunction.Trim(strg)
End Function
Sub Clusterize()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UDF
OptimizeON
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ActiveWorkbook.Names.Add Name:="markerdict", RefersToR1C1:= _
        Range(Range("F3:G3"), Range("F6:G6").End(xlDown))
'
arr = Range(Range("C3"), Range("C3").End(xlDown)).Value
    For i = LBound(arr) To UBound(arr)
        arr(i, 1) = categorize_allwords(CStr(arr(i, 1)))
    Next
Range(Range("C3"), Range("C3").End(xlDown)).Offset(0, 1).Value = arr
OptimizeOFF
End Sub
Sub Freq_dictionary()
Dim x As Variant, txt As String, i As Integer, r As Long, dict As Object, a()
OptimizeON
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Sheets("Counter").Select
    Range(Range("I6:J6"), Range("I6:J6").End(xlDown)).Clear
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
    Cells.Clear
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    Range(Sheets("Counter").Range("B3"), Sheets("Counter").Range("B3").End(xlDown)).Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
    Range("A2").Select
    Selection.PasteSpecial Paste:=xlPasteValues
    Cells.FormatConditions.Delete

Set dict = CreateObject("Scripting.Dictionary")
r = 2
Do While Cells(r, 1) <> ""
    txt = Cells(r, 1)
    x = Split(txt, " ")
    For i = 0 To UBound(x)
    If dict.exists(x(i)) Then
    dict.Item(x(i)) = dict.Item(x(i)) + 1
    Else
    dict.Add x(i), 1
    End If
    Next i
    r = r + 1
Loop
With dict
    Cells(2, 3).Resize(.Count) = Application.Transpose(.Keys)
    Cells(2, 4).Resize(.Count) = Application.Transpose(.Items)
End With
    Range(Range("C2"), Range("C2").End(xlDown)).Select
a = Selection.Value
For i = LBound(a) To UBound(a)
a(i, 1) = "!" & a(i, 1)
Next i
Selection.Value = a
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Range(Range("C2:D2"), Range("C2:D2").End(xlDown)).Sort Range("C2"), xlAscending
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
    ActiveSheet.Range(Range("C2:D2"), Range("C2:D2").End(xlDown)).Copy
    ActiveWorkbook.Worksheets("Counter").Select
    ActiveSheet.Range("I6").PasteSpecial Paste:=xlPasteValues
    ActiveWorkbook.Worksheets("Counter").Range("A3").Select
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
'
    Cells(1, 3) = "|fffd||fffd||fffd||fffd||fffd|"
    Cells(1, 4) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Range("C1:D1").Select
    Selection.AutoFilter
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields.Add _
        Key:=Range("D1"), SortOn:=xlSortOnValues, Order:=xlDescending, _
        DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ActiveWorkbook.Worksheets("Counter").Select
    ActiveWorkbook.Names.Add Name:="freqdict", RefersToR1C1:= _
    Range(Range("I3:J3"), Range("I6:J6").End(xlDown))
OptimizeOFF
End Sub
Public Function freqclustercell(rng As String) As String
Dim arr() As String
arr() = Split(rng)
For i = LBound(arr) To UBound(arr)
  strg = strg & bsfoc("!" & arr(i), Range("freqdict"), Range("h1").Value) & " "
Next i
freqclustercell = Application.WorksheetFunction.Trim(strg)
End Function
Public Function sortcellbyfreq(rng) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
Dim arr() As String
Dim x As String
arr() = Split(rng, " ")
For i = LBound(arr) To UBound(arr)
  strg = strg & 1000000 - binsearch("!" & arr(i), Range("freqdict"), 2) & "\" & arr(i) & " "
Next i
x = Application.WorksheetFunction.Trim(strg)
sortcellbyfreq = QuickSortCell(x)
End Function
Sub Sort_by_freq()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Call Freq_dictionary
OptimizeON
'
    ActiveWorkbook.Worksheets("Counter").Select
    Range(Range("b3"), Range("b3").End(xlDown)).Copy
    ActiveSheet.Range("C3").PasteSpecial Paste:=xlPasteValues
    Range("C3").FormulaR1C1 = "=sortcellbyfreq(RC[-1])"
    Range("C3").Copy
    Range(Range("C3"), Range("C3").End(xlDown)).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Calculate
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Replace What:="??????\", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
'
OptimizeOFF
End Sub
Sub weight_clusterer()
'
OptimizeON
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ActiveWorkbook.Names.Add Name:="freqdict", RefersToR1C1:= _
        Range(Range("I3:J3"), Range("I3:J3").End(xlDown))
    freq_limit = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Type:=1)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UDF
    Range("H1") = freq_limit
    Range(Range("C3"), Range("C3").End(xlDown)).Copy
    Range("D3").PasteSpecial Paste:=xlPasteValues
    Range("D3").Select
    Application.CutCopyMode = False
    Range("D3").FormulaR1C1 = "=freqclustercell(RC[-1])"
    Range("D3").Copy
    Range(Range("D3"), Range("D3").End(xlDown)).PasteSpecial xlPasteFormulas
    Calculate
    Range(Range("D3"), Range("D3").End(xlDown)).Copy
    Range("D3").PasteSpecial Paste:=xlPasteValues
'
    Range(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("A2"), Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("B2").End(xlDown)).Clear
    Range(Sheets("Counter").Range("D3"), Sheets("Counter").Range("D3").End(xlDown)).Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("A2").PasteSpecial Paste:=xlPasteValues
    Range(Sheets("Counter").Range("A3"), Sheets("Counter").Range("A3").End(xlDown)).Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("B2").PasteSpecial Paste:=xlPasteValues
    Application.CutCopyMode = False
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields _
        .Clear
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields _
        .Add Key:=Range("A1"), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
    Range("A1").Select
'
OptimizeOFF
End Sub
Sub findduplicate()
'
OptimizeON
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").Select
    Range(Range("A2:C2"), Range("A2:C2").End(xlDown)).ClearContents
'
    Sheets("Counter").Select
    Range(Range("A3:C3"), Range("A3:C3").End(xlDown)).Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").Range("A2").PasteSpecial Paste:=xlPasteValues
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").Select
    Range("C2").Select
    Range(Range("C2"), Range("C2").End(xlDown)).Copy
    Range("B2").Select
    ActiveSheet.Paste
    Range("B1").Select
    Application.CutCopyMode = False
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort.SortFields.Add _
        Key:=Range("B1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption _
        :=xlSortNormal
    With ActiveWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|").AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    Range("C2").Select
    ActiveCell.FormulaR1C1 = "=OR(RC[-1]=R[-1]C[-1],RC[-1]=R[1]C[-1])"
    Range("C2").Copy
    Range(Range("C2"), Range("C2").End(xlDown)).Select
    ActiveSheet.Paste
    Calculate
    Application.CutCopyMode = False
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
'
OptimizeOFF
End Sub
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|()
    Range("D7").Copy
    Range("E2").PasteSpecial Paste:=xlPasteValues
    Range("E2").Select
    SendKeys "{F2}", True
    SendKeys "{Enter}", True
End Sub
Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|()
'
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    ActiveSheet.DisplayPageBreaks = False
    Application.DisplayStatusBar = False
    Application.DisplayAlerts = False
'
    Range(Range("E10"), Range("E10").End(xlDown)).Copy
    Range("D10").PasteSpecial Paste:=xlPasteValues
    Range(Range("B10"), Range("B10").End(xlDown)).Copy
    Range("A10").PasteSpecial Paste:=xlPasteValues
    Range("C10").PasteSpecial Paste:=xlPasteValues
    Range("E2").Copy
    With Range(Range("D10"), Range("D10").End(xlDown)):
        .PasteSpecial Paste:=xlPasteFormulas
        .Copy
        .PasteSpecial Paste:=xlPasteValues
    End With
    Range("E2").Copy
    With Range(Range("A10"), Range("A10").End(xlDown)):
        .PasteSpecial Paste:=xlPasteFormulas
        .Copy
        .PasteSpecial Paste:=xlPasteValues
    End With
    Application.CutCopyMode = False
    Range(Range("D10"), Range("D10").End(xlDown)).Copy
    Range("XFD1").PasteSpecial Paste:=xlPasteValues
'
    ActiveWorkbook.Names.Add Name:="temp", RefersToR1C1:= _
        Range(Range("XFD1"), Range("XFD1").End(xlDown))
    ActiveWorkbook.Worksheets("""|fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("""|fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Sort.SortFields.Add _
        Key:=Range("XFD1"), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("""|fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Sort
        .SetRange Range("temp")
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
'
    Range("C10").Select
    ActiveCell.FormulaR1C1 = _
        "=IFERROR(IF(VLOOKUP(RC[-2],temp,1,1)=RC[-2],""|fffd||fffd||fffd||fffd|"",""""),"""")"
    Range("C10").Copy
    With Range(Range("C10"), Range("C10").End(xlDown)):
        .PasteSpecial Paste:=xlPasteFormulas
        .Copy
        .PasteSpecial Paste:=xlPasteValues
    End With
    Range("temp").Clear
'
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    ActiveSheet.DisplayPageBreaks = True
    Application.DisplayStatusBar = True
    Application.DisplayAlerts = True
End Sub
Sub RemWordsThroughDict()
Dim x As Variant, i As Integer, r As Long, dictgrams1 As Object
Dim w()
Dim a()
OptimizeON
ActiveWorkbook.Names.Add Name:="words", RefersToR1C1:=Range("a3", Range("a3").End(xlDown))
ActiveWorkbook.Names.Add Name:="monograms", RefersToR1C1:=Range("ab3", Range("ab3").End(xlDown))
    a = Range("monograms").Value
    w = Range("words").Value
    Set dictgrams1 = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
            dictgrams1.Add a(r, 1), False
        Next
For r = LBound(w) To UBound(w):
    x = Split(w(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dictgrams1.exists(x(i)) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
            w(r, 1) = Application.WorksheetFunction.Trim(Replace(w(r, 1), x(i), ""))
            End If
        Next
Next
    Range("words").Offset(0, 1).Value = w
OptimizeOFF
End Sub
Sub Rem2GramsThroughDict()
Dim x As Variant, txt As String, i As Integer, r As Long, dict As Object, dictTops As Object, dictPreps As Object
Dim a()
Dim b()
Dim c()
OptimizeON
ActiveWorkbook.Names.Add Name:="words", RefersToR1C1:=Range("A3", Range("A3").End(xlDown))
ActiveWorkbook.Names.Add Name:="word1", RefersToR1C1:=Range(Range("u3"), Range("u3").End(xlDown))
ActiveWorkbook.Names.Add Name:="word2", RefersToR1C1:=Range("v3", Range("v3").End(xlDown))
    a = Range("words").Value
    b = Range("word1").Value
    c = Range("word2").Value
    Set dictPreps = CreateObject("Scripting.Dictionary")
        For r = LBound(b) To UBound(b)
            dictPreps.Add b(r, 1), False
        Next
    Set dictTops = CreateObject("Scripting.Dictionary")
        For r = LBound(c) To UBound(c)
            dictTops.Add c(r, 1), False
        Next
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x) - 1 '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            If dictPreps.exists(x(i)) And dictTops.exists(x(i + 1)) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
            a(r, 1) = Application.WorksheetFunction.Trim(Replace(a(r, 1), x(i) & " " & x(i + 1), ""))
            End If
        Next
Next
    Range("words").Offset(0, 1).Value = a
OptimizeOFF
End Sub
Sub Rem3GramsThroughDict()
Dim x As Variant, i As Integer, r As Long, dictgrams1 As Object, dictgrams2 As Object, dictgrams3 As Object
Dim w()
Dim a()
Dim b()
Dim c()
OptimizeON
ActiveWorkbook.Names.Add Name:="words", RefersToR1C1:=Range("a3", Range("a3").End(xlDown))
ActiveWorkbook.Names.Add Name:="gram1", RefersToR1C1:=Range("x3", Range("x3").End(xlDown))
ActiveWorkbook.Names.Add Name:="gram2", RefersToR1C1:=Range(Range("y3"), Range("y3").End(xlDown))
ActiveWorkbook.Names.Add Name:="gram3", RefersToR1C1:=Range("z3", Range("z3").End(xlDown))
    a = Range("gram1").Value
    b = Range("gram2").Value
    c = Range("gram3").Value
    w = Range("words").Value
    Set dictgrams1 = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
            dictgrams1.Add a(r, 1), False
        Next
    Set dictgrams2 = CreateObject("Scripting.Dictionary")
        For r = LBound(b) To UBound(b)
            dictgrams2.Add b(r, 1), False
        Next
    Set dictgrams3 = CreateObject("Scripting.Dictionary")
        For r = LBound(c) To UBound(c)
            dictgrams3.Add c(r, 1), False
        Next
For r = LBound(w) To UBound(w):
    x = Split(w(r, 1), " ")
        For i = LBound(x) To UBound(x) - 2 '|fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If dictgrams1.exists(x(i)) And dictgrams2.exists(x(i + 1)) And dictgrams3.exists(x(i + 2)) Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
            w(r, 1) = Application.WorksheetFunction.Trim(Replace(w(r, 1), x(i) & " " & x(i + 1) & " " & x(i + 2), ""))
            End If
        Next
Next
    Range("words").Offset(0, 1).Value = w
OptimizeOFF
End Sub
Attribute VB_Name = "binsearch_udfs"
Public Function binsearch(a As Variant, b As Range, c As Integer) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    binsearch = Application.VLookup(a, b, c, True)
Else
    binsearch = a
End If
If Err <> 0 Then binsearch = "0"
End Function
Public Function bsbof(a, b As Range, c As Integer) As String
'Binary Search - blank on find (function to delete values found in other data)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "", |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    bsbof = ""
Else
    bsbof = a
End If
If Err <> 0 Then bsbof = "0"
End Function
Public Function binsearchfindonly(a, b As Range, c As Integer) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    binsearchfindonly = Application.VLookup(a, b, c, True)
Else
    binsearchfindonly = ""
End If
If Err <> 0 Then binsearchfindonly = ""
End Function
Public Function bsfoc(a, b As Range, c As Long) As String
'binary search finding on condition
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    If Application.VLookup(a, b, 2, True) > c Then
    bsfoc = a
    Else
    bsfoc = ""
    End If
Else
    bsfoc = ""
End If
If Err <> 0 Then bsfoc = ""
End Function
Attribute VB_Name = "lemm_udfs_subs"
Public Function lemmatstr(str As String)
lemmatstr = binsearch(str, Range("dict1"), 2)
End Function
Public Function Lemmatize(rng) As String
Dim arr() As String
arr() = Split(rng)
For i = LBound(arr) To UBound(arr)
  strg = strg & lemmatstr(arr(i)) & " "
Next i
Lemmatize = Application.WorksheetFunction.Trim(strg)
End Function
Sub arrlemmthroughdict()
Dim x As Variant, txt As String, i As Integer, r As Long, dict As Object
Dim a()
OptimizeON
ActiveWorkbook.Names.Add Name:="dict1", RefersToR1C1:=Range(Range("o1:p1"), Range("o1:p1").End(xlDown))
ActiveWorkbook.Names.Add Name:="words", RefersToR1C1:=Range("A3", Range("A3").End(xlDown))
    a = Range("words").Value
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = dict.Item(x(i))
            Else
            dict.Add x(i), lemmatstr(CStr(x(i)))
            x(i) = dict.Item(x(i))
            End If
            a(r, 1) = Join(x, " ")
        Next
Next
    Range("words").Offset(0, 1).Value = a
OptimizeOFF
End Sub
Public Function ReplWords(str As String)
ReplWords = binsearch(str, Range("dict2"), 2)
End Function
Public Function ReplAllWords(rng) As String
Dim arr() As String
arr() = Split(rng)
For i = LBound(arr) To UBound(arr)
  strg = strg & ReplWords(arr(i)) & " "
Next i
ReplAllWords = Application.WorksheetFunction.Trim(strg)
End Function
Sub ArrReplWordsThroughDict2()
Dim x As Variant, txt As String, i As Integer, r As Long, dict As Object
Dim a()
OptimizeON
ActiveWorkbook.Names.Add Name:="dict2", RefersToR1C1:=Range(Range("r1:s1"), Range("r1:s1").End(xlDown))
ActiveWorkbook.Names.Add Name:="words2", RefersToR1C1:=Range("b3", Range("b3").End(xlDown))
    a = Range("words2").Value
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = dict.Item(x(i))
            Else
            dict.Add x(i), ReplWords(CStr(x(i)))
            x(i) = dict.Item(x(i))
            End If
            a(r, 1) = Join(x, " ")
        Next
Next
    Range("words2").Value = a
OptimizeOFF
End Sub
Attribute VB_Name = "regex_udfs_subs"
Attribute VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Function rgxExtract(Optional ByVal Target As Variant, _
    Optional Pattern As String = "", _
    Optional ByVal Item As Long = 0, _
    Optional CaseSensitive As Boolean = False, _
    Optional FailOnError As Boolean = True, _
    Optional Persist As Boolean = False) _
  As Variant
    
  'Regular expression matching function suitable for use
  'in VB/A generally and in Access queries.
  'By John Nurick. Updated 14 Jan 06.
    
  'Takes a search string (Target) and a regular expression
  '(Pattern), and an optional Item argument.
  '- If Item is omitted and a substring of Target matches Pattern,
  '  returns that substring.
  '- If Pattern includes grouping parentheses, a substring of Target
  '  matches Pattern, and Item is an integer, returns the submatch
  '  specified by Item (first submatch is item 0). If there aren't
  '  enough submatches, returns Null. Negative values of Item start
  '  counting with the last submatch.
  '- If no match, returns Null.
  '- Returns Null on error unless FailOnError is True.
  '  Always matches against the entire Target (i.e. Global and
  '  Multiline are True).
   
  'CaseSensitive matches regardless of case.
  
  'Persist controls whether the compiled RegExp object
  'remains in memory ready for the next call to the
  'function or whether it is disposed of immediately. This
  'means the function can be used in queries without having
  'to create, compile, use and destroy a new RegExp object for
  'each row being processed. But it also means that the object
  'remains in memory after the query has run. To destroy the
  'object and release the memory, call this function one
  'last time with no arguments.
  '
  'Calling the function with different arguments (e.g. a new
  'Pattern) recompiles the RegExp object, so
  'the function can be used in different queries. However there
  'may be problems if two threads are calling the function at
  'the same time.
  
  Const rgxPROC_NAME = "rgxExtract"
  Static oRE As Object 'VBScript_RegExp_55.RegExp
    'Static declaration means we don't have to create
    'and compile the RegExp object every single time
    'the function is called.
  Dim oMatches As Object 'VBScript_RegExp_55.MatchCollection
    
  On Error GoTo ErrHandler
  rgxExtract = Null 'Default return value
    'NB: if FailOnError is false, returns Null on error
  
  If IsMissing(Target) Then
    'This is the signal to dispose of oRE
    Set oRE = Nothing
    Exit Function 'with default value
  End If
    
  'Create the RegExp object if necessary
  If oRE Is Nothing Then
    Set oRE = CreateObject("VBScript.Regexp")
  End If
  
  With oRE
    'Check whether the current arguments (other than Target)
    'are different from those stored in oRE, and update them
    '(thereby recompiling the regex) only if necessary.
    If CaseSensitive = .IgnoreCase Then
      .IgnoreCase = Not .IgnoreCase
    End If
    .Global = True
    .Multiline = True
'    If Multiline <> .Multiline Then
'      .Multiline = Multiline
'    End If
    If Pattern <> .Pattern Then
      .Pattern = Pattern
    End If
  
  'Finally, execute the match
    If IsNull(Target) Then
      rgxExtract = Null
    Else
      Set oMatches = oRE.Execute(Target)
      If oMatches.Count > 0 Then
        If oMatches(0).SubMatches.Count = 0 Then
          'No ( ) group in Pattern: return the match
          If Item < 0 Then 'we're counting from last item
            'convert to count from the first item
            Item = oMatches.Count + Item
          End If
          Select Case Item
            Case Is < 0
              'Negative Item originally passed exceeded the
              'number of matches
              rgxExtract = Null
              If FailOnError Then
                Err.Raise 9
              End If
            Case Is >= oMatches.Count
              'Positive Item exceeded the number of matches
              rgxExtract = Null
              If FailOnError Then
                Err.Raise 9
              End If
            Case Else
              rgxExtract = oMatches(Item)
          End Select
          
        Else  'There are one or more ( ) captured groups in Pattern
              'return the one specified by Item
          With oMatches(0).SubMatches
            If Item < 0 Then 'we're counting from last item
              'convert to count from the first item
              Item = .Count + Item
            End If
            Select Case Item
              Case Is < 0
                'Negative Item originally passed exceeded the
                'number of submatches
                rgxExtract = Null
                If FailOnError Then
                  Err.Raise 9
                End If
              Case Is >= .Count
                'Positive Item exceeded the number of submatches
                rgxExtract = Null
                If FailOnError Then
                  Err.Raise 9
                End If
              Case Else 'valid Item number
                rgxExtract = .Item(Item)
            End Select
          End With
        End If
      Else
        rgxExtract = Null
      End If
    End If
  End With
  
  'Tidy up and normal exit
  If Not Persist Then Set oRE = Nothing
  Exit Function
  
ErrHandler:
  If FailOnError Then
    With Err
      Select Case .Number
        'Replace the default "object-defined error" message
        Case 9: .Description = "Subscript out of range (the Item number requested " _
          & "was greater than the number of matches found, or than the number of " _
          & "(...) grouping/capturing parentheses in the Pattern)."
        Case 13: .Description = "Type mismatch, probably because " _
          & "the ""Target"" argument could not be converted to a string"
        Case 5017: .Description = "Syntax error in regular expression"
        Case 5018: .Description = "Unexpected quantifier in regular expression"
        Case 5019: .Description = "Expected ']' in regular expression"
        Case 5020: .Description = "Expected ')' in regular expression"
      Case Else
        If oRE Is Nothing Then 'Failed to create Regexp object
          .Description = "Could not create VBScript.RegExp object. " & Err.Description
        Else 'Unexpected error
          .Description = rgxPROC_NAME & ": " & .Description
        End If
      End Select
      Set oRE = Nothing
      .Raise Err.Number, rgxPROC_NAME, _
          rgxPROC_NAME & "(): " & .Description
    End With
  Else 'Fail silently
    Err.Clear
    Set oRE = Nothing
  End If
End Function
Public Function RegExpFindReplace(str As String, _
                        Pattern As String, _
                        Replace As String, _
                        Optional Globa1 As Boolean = True, _
                        Optional IgnoreCase As Boolean = False, _
                        Optional Multiline As Boolean = False) _
                As String
     
    RegExpFindReplace = str
     
    If Not str Like "" And Not Pattern Like "" Then
     
        Dim RegExp As Object
         
        Set RegExp = CreateObject("VBScript.RegExp")
        With RegExp
            .Global = Globa1
            .IgnoreCase = IgnoreCase
            .Multiline = Multiline
            .Pattern = Pattern
        End With
 
        On Error Resume Next
        RegExpFindReplace = RegExp.Replace(str, Replace)
         
        Set RegExp = Nothing
     
    End If
     
End Function
Public Function removepunctuation(r As String)
removepunctuation = Application.WorksheetFunction.Trim(RegExpFindReplace(r, "[^[a-zA-Z|fffd|-|fffd||fffd|-|fffd|0-9|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\s]", " ", True, True))
End Function
Sub arrrempunct()
OptimizeON
ActiveWorkbook.Names.Add Name:="words", RefersToR1C1:=Range("A3", Range("A3").End(xlDown))
Dim a()
a = Range("words").Value
For i = LBound(a) To UBound(a):
    a(i, 1) = LCase(removepunctuation(CStr(a(i, 1))))
    Next
Range("words").Value = a
OptimizeOFF
End Sub
Attribute VB_Name = "stopwords_udfs_subs"
Public Function deletestopword(str As String) As String
On Error Resume Next
Err.Clear
If Application.VLookup(str, Range("stopslova"), 1, True) = str Then
deletestopword = ""
Else
deletestopword = str
End If
If Err <> 0 Then str = "0"
End Function
Public Function Deletestopwords(rng) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
Dim arr() As String
arr() = Split(rng)
For i = LBound(arr) To UBound(arr)
  strg = strg & deletestopword(arr(i)) & " "
Next i
Deletestopwords = Application.WorksheetFunction.Trim(strg)
End Function
Sub arrdelstopthroughdict()
Dim x As Variant, txt As String, i As Integer, j As Integer, r As Long, dictstop As Object, a(), b()
OptimizeON
ActiveWorkbook.Names.Add Name:="dict1", RefersToR1C1:=Range(Range("o1:p1"), Range("o1:p1").End(xlDown))
ActiveWorkbook.Names.Add Name:="lemmas", RefersToR1C1:=Range("B3", Range("B3").End(xlDown))
ActiveWorkbook.Names.Add Name:="stopslova", RefersToR1C1:=Range(Range("L3"), Range("L3").End(xlDown))
    a = Range("lemmas").Value
    b = Range("stopslova").Value
Set dictstop = CreateObject("Scripting.Dictionary")
    For j = LBound(b) To UBound(b)
        dictstop.Add (b(j, 1)), j
    Next
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dictstop.exists(x(i)) Then
            x(i) = ""
            End If
            a(r, 1) = Join(x, " ")
        Next
Next
    Range("lemmas").Value = a
    Range("lemmas").Select
SpaceKill
OptimizeOFF
End Sub
Sub SpaceKill()
Dim a(), i As Long
    a = Selection.Value
For i = LBound(a) To UBound(a)
a(i, 1) = Application.WorksheetFunction.Trim(a(i, 1))
Next i
Selection.Value = a
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
