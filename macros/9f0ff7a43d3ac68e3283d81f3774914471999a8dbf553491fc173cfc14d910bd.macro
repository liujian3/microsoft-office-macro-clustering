Attribute VB_Name = "Nepali_Calender"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'the original sorce code of this program is found in sourceforge.net
'the code in php was translated to VBA
'this add-in is copyfree and can be distributed freely in multiple copies
'the user should be responsible for the use of this add in
'the author is not liable for any damage that may occur by using this add-in
'modification to the code is welcome. Any additional data in the code if notified over the internet will be usefull to all
'***********************************************************************************************************
'*******currently can only calculate the date between BS 2000-2089 and AD 1944-2033*************************
'***********************************************************************************************************
'Coder: Nirmal Raj Joshi
'@copyfree nirmaljoshi.com.np,2010
'joshi.amn@gmail.com

Private bs As Variant
Public nep_date As Dictionary
Public eng_date As Dictionary
Public debug_info
Sub initilizeClass()
    ReDim bs(90)
    bs(0) = Array(2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(1) = Array(2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(2) = Array(2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(3) = Array(2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(4) = Array(2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(5) = Array(2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(6) = Array(2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(7) = Array(2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(8) = Array(2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31)
    bs(9) = Array(2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(10) = Array(2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(11) = Array(2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(12) = Array(2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30)
    bs(13) = Array(2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(14) = Array(2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(15) = Array(2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(16) = Array(2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30)
    bs(17) = Array(2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(18) = Array(2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(19) = Array(2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(20) = Array(2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(21) = Array(2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(22) = Array(2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30)
    bs(23) = Array(2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(24) = Array(2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(25) = Array(2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(26) = Array(2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(27) = Array(2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(28) = Array(2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(29) = Array(2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30)
    bs(30) = Array(2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(31) = Array(2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(32) = Array(2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(33) = Array(2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(34) = Array(2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(35) = Array(2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31)
    bs(36) = Array(2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(37) = Array(2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(38) = Array(2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(39) = Array(2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30)
    bs(40) = Array(2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(41) = Array(2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(42) = Array(2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(43) = Array(2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30)
    bs(44) = Array(2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(45) = Array(2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(46) = Array(2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(47) = Array(2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(48) = Array(2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(49) = Array(2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30)
    bs(50) = Array(2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(51) = Array(2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(52) = Array(2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(53) = Array(2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30)
    bs(54) = Array(2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(55) = Array(2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(56) = Array(2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30)
    bs(57) = Array(2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(58) = Array(2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(59) = Array(2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(60) = Array(2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(61) = Array(2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(62) = Array(2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31)
    bs(63) = Array(2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(64) = Array(2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(65) = Array(2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(66) = Array(2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31)
    bs(67) = Array(2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(68) = Array(2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(69) = Array(2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(70) = Array(2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30)
    bs(71) = Array(2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(72) = Array(2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30)
    bs(73) = Array(2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31)
    bs(74) = Array(2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(75) = Array(2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(76) = Array(2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30)
    bs(77) = Array(2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31)
    bs(78) = Array(2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(79) = Array(2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30)
    bs(80) = Array(2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30)
    bs(81) = Array(2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(82) = Array(2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(83) = Array(2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(84) = Array(2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(85) = Array(2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30)
    bs(86) = Array(2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(87) = Array(2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30)
    bs(88) = Array(2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30)
    bs(89) = Array(2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30)
    bs(90) = Array(2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30)

    Set nep_date = New Dictionary
        nep_date.Add "year", 0
        nep_date.Add "month", 0
        nep_date.Add "date", 0
        nep_date.Add "day", 0
        nep_date.Add "nmonth", 0
        nep_date.Add "num_day", 0
    Set eng_date = New Dictionary
        eng_date.Add "year", 0
        eng_date.Add "month", 0
        eng_date.Add "date", 0
        eng_date.Add "day", 0
        eng_date.Add "emonth", 0
        eng_date.Add "num_day", 0



End Sub
    
'        /**
'         * Calculates wheather english year is leap year or not
'         *
'         * @param integer $year
'         * @return boolean
'         */'
        Public Function is_leap_year(year) As Boolean
            Dim a, returnVal
            a = year
            If a Mod 100 = 0 Then
            
                If a Mod 400 = 0 Then
                    returnVal = True
                Else
                    returnVal = False
                End If
             
                
            Else
                If a Mod 4 = 0 Then
                   returnVal = True
                Else
                    returnVal = False
                End If
            End If
            is_leap_year = returnVal

        End Function
        
        Public Function get_nepali_month(m)
        Dim n_month
            n_month = False
            
            Select Case m
                Case 1:
                    n_month = "Baishak"
                Case 2:
                    n_month = "Jestha"
                    
                Case 3:
                    n_month = "Ashad"
                Case 4:
                    n_month = "Shrawn"
                Case 5:
                    n_month = "Bhadra"
                Case 6:
                    n_month = "Ashwin"
                Case 7:
                    n_month = "Kartik"
                Case 8:
                    n_month = "Mangshir"
                Case 9:
                    n_month = "Poush"
                Case 10:
                    n_month = "Magh"
                Case 11:
                    n_month = "Falgun"
                Case 12:
                    n_month = "Chaitra"
                End Select
                
            
            get_nepali_month = n_month
        End Function
        
        Public Function get_english_month(m)
            Dim eMonth
            eMonth = False
            Select Case m
                Case 1
                    eMonth = "January"
                Case 2:
                    eMonth = "February"
                Case 3:
                    eMonth = "March"
                Case 4:
                    eMonth = "April"
                Case 5:
                    eMonth = "May"
                Case 6:
                    eMonth = "June"
                Case 7:
                    eMonth = "July"
                Case 8:
                    eMonth = "August"
                Case 9:
                    eMonth = "September"
                Case 10:
                    eMonth = "October"
                Case 11:
                    eMonth = "November"
                Case 12:
                    eMonth = "December"
                End Select
                
             get_english_month = eMonth

        End Function
        
        Public Function get_day_of_week(d)
        Dim day
        day = False
            Select Case d
                Case 1:
                    day = "Sunday"
                Case 2:
                    day = "Monday"
                Case 3:
                    day = "Tuesday"
                Case 4:
                    day = "Wednesday"
                Case 5:
                    day = "Thursday"
                Case 6:
                    day = "Friday"
                Case 7:
                    day = "Saturday"
                End Select
            get_day_of_week = day
            
        
        End Function
        Public Function is_range_eng(yy, mm, dd)
            Dim returnVal
            returnVal = True
            If (yy < 1944 Or yy > 2033) Then
                debug_info = "Supported only between 1944-2022"
                returnVal = False
            End If
            If (mm < 1 Or mm > 12) Then
                debug_info = "Error! value 1-12 only"
                returnVal = False
            End If
            If (dd < 1 Or dd > 31) Then
                debug_info = "Error! value 1-31 only"
                returnVal = False
            End If
            is_range_eng = returnVal
        End Function
        
        Public Function is_range_nep(yy, mm, dd)
            Dim returnVal
            returnVal = True

            If (yy < 2000 Or yy > 2089) Then
                debug_info = "Supported only between 2000-2089"
                returnVal = False
            End If
            If (mm < 1 Or mm > 12) Then
                debug_info = "Error! value 1-12 only"
                returnVal = False
            End If
            
            If (dd < 1 Or dd > 32) Then
                debug_info = "Error! value 1-31 only"
                returnVal = False
            End If
            is_range_nep = returnVal
        End Function
        
'                /**
'         * currently can only calculate the date between AD 1944-2033...
'         *
'         * @param unknown_type $yy
'         * @param unknown_type $mm
'         * @param unknown_type $dd
'         * @return unknown
'         */
        Public Sub eng_to_nep(yy, mm, dd)
            If (is_range_eng(yy, mm, dd) = False) Then
                debug_info = "Out of range"
            Else
                
'                // english month data.
            Dim month, lmonth
                month = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
                lmonth = Array(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
                
            Dim def_eyy, def_nyy, def_nmm, def_ndd
            Dim total_eDays, total_nDays, a, day
            Dim m, y, i, j
            Dim numDay
                def_eyy = 1944 '                                    //spear head english date...
                def_nyy = 2000: def_nmm = 9: def_ndd = 17 - 1 '     //spear head nepali date...
                total_eDays = 0: total_nDays = 0: a = 0: day = 7 - 1 '    //all the initializations...
                m = 0: y = 0: i = 0: j = 0
                numDay = 0
                
                '// count total no. of days in-terms of year
                For i = 0 To yy - def_eyy - 1 ' //total days for month calculation...(english)
                    If (is_leap_year(def_eyy + i) = True) Then
                        For j = 0 To 12 - 1
                            total_eDays = total_eDays + lmonth(j)
                        Next j
                    Else
                        For j = 0 To 12 - 1
                            total_eDays = total_eDays + month(j)
                        Next j
                    End If
                Next i
                
                '// count total no. of days in-terms of month
                For i = 0 To (mm - 1) - 1
                    If (is_leap_year(yy) = True) Then
                        total_eDays = total_eDays + lmonth(i)
                    Else
                        total_eDays = total_eDays + month(i)
                    End If
                Next i
                
               ' // count total no. of days in-terms of date
                total_eDays = total_eDays + dd
                
                
                i = 0: j = def_nmm
                total_nDays = def_ndd
                m = def_nmm
                y = def_nyy
                
                '// count nepali date from array
                Do While (total_eDays <> 0)
                    a = bs(i)(j)
                    total_nDays = total_nDays + 1 '     //count the days
                    day = day + 1 '                            //count the days interms of 7 days
                    If (total_nDays > a) Then
                        m = m + 1
                        total_nDays = 1
                        j = j + 1
                    End If
                    If (day > 7) Then
                        day = 1
                    End If
                    If (m > 12) Then
                        y = y + 1
                        m = 1
                    End If
                    If (j > 12) Then
                        j = 1: i = i + 1
                    End If
                    total_eDays = total_eDays - 1
                    
                Loop
                numDay = day
                
                nep_date("year") = y
                nep_date("month") = m
                nep_date("date") = total_nDays
                nep_date("day") = get_day_of_week(day)
                nep_date("nmonth") = get_nepali_month(m)
                nep_date("num_day") = numDay
            End If
        
        End Sub
'
'        /**
'         * currently can only calculate the date between BS 2000-2089
'         *
'         * @param unknown_type $yy
'         * @param unknown_type $mm
'         * @param unknown_type $dd
'         * @return unknown
'         */
        Public Sub nep_to_eng(yy, mm, dd)
            Dim def_eyy, def_emm, def_edd
            Dim def_nyy, def_nmm, def_ndd
            Dim total_eDays, total_nDays, a, day
            Dim m, y, i, j
            Dim k, numDay
            Dim month, lmonth
            
            def_eyy = 1943: def_emm = 4: def_edd = 14 - 1   '// init english date.
            def_nyy = 2000: def_nmm = 1: def_ndd = 1 '        // equivalent nepali date.
            total_eDays = 0: total_nDays = 0: a = 0: day = 4 - 1 '     // initializations...
            m = 0: y = 0: i = 0
            k = 0: numDay = 0
            
            month = Array(0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
            lmonth = Array(0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
            
            If (is_range_nep(yy, mm, dd) = False) Then
                debug_info = "Out of range"
            Else
                
                '// count total days in-terms of year
                For i = 0 To yy - def_nyy - 1
                    For j = 1 To 12
                        total_nDays = total_nDays + bs(k)(j)
                    Next j
                    k = k + 1
                Next i
                
                
                '// count total days in-terms of month
                For j = 1 To mm - 1
                    total_nDays = total_nDays + bs(k)(j)
                Next j
                
                '// count total days in-terms of dat
                total_nDays = total_nDays + dd
                
                '//calculation of equivalent english date...
                total_eDays = def_edd
                m = def_emm
                y = def_eyy
                Do While (total_nDays <> 0)
                    If (is_leap_year(y)) Then
                    
                        a = lmonth(m)
                    
                    Else
                    
                        a = month(m)
                    End If
                    total_eDays = total_eDays + 1
                    day = day + 1
                    If (total_eDays > a) Then
                        m = m + 1
                        total_eDays = 1
                        If (m > 12) Then
                            y = y + 1
                            m = 1
                        End If
                    End If
                    If (day > 7) Then day = 1
                    total_nDays = total_nDays - 1
                Loop
                numDay = day
                
                eng_date("year") = y
                eng_date("month") = m
                eng_date("date") = total_eDays
                eng_date("day") = get_day_of_week(day)
                eng_date("emonth") = get_english_month(m)
                eng_date("num_day") = numDay
                
        End If
  
        End Sub
            
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Student Tracking"
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Leave Info"
End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Income"
End Sub

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Physical Details"
End Sub

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Student Marks"
End Sub

Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Subjects"
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Buttons"
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "General"
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Information"
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Personal Info"
End Sub

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Educational Info"
End Sub

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Teaching History"
End Sub

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Educational History"
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Deactivate()
    Me.Name = "Teacher Training Info"
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    'initialise the names of all report sheets as an array so that they can be deleted
    'before the workbook is closed
    Dim deleteList(1 To 10) As String
    
    deleteList(1) = "Student Report Card"
    deleteList(2) = "Teacher Report"
    deleteList(3) = "PRD Report"
    deleteList(4) = "Scholarship Report"
    deleteList(5) = "Score Report"
    deleteList(6) = "Attendance Report"
    deleteList(7) = "Teacher Profile"
    deleteList(8) = "Physical Report"
    deleteList(9) = "Student Tracking Card"
    deleteList(10) = "Student Marksheet"
    
    For Each sheet In deleteList
        If worksheetExists(sheet) Then
            Application.DisplayAlerts = False
            Worksheets(sheet).Delete
            Application.DisplayAlerts = True
        End If
    Next sheet
End Sub

Private Sub Workbook_Open()
    'skip lines with error
    'On Error Resume Next
    
    'init public password and private password
    Dim publicPassword As String
    Dim privatePassword As String
    
    
    publicPassword = "apple"
    'private password is only for the developer
    privatePassword = "moenepal"
    
    'to lock all other sheets other than buttons
    ActiveWorkbook.Sheets("General").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Student Tracking").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Student Marks").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Personal Info").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Educational Info").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Teaching History").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Educational History").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Training Info").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Leave Info").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Teacher Income").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Physical Details").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Subjects").Protect Password:=publicPassword, UserInterfaceOnly:=True
    ActiveWorkbook.Sheets("Information").Protect Password:=publicPassword, UserInterfaceOnly:=True
    
    'lock buttons sheet with public password
    ActiveWorkbook.Sheets("Buttons").Protect Password:=publicPassword, UserInterfaceOnly:=True
    
    'to prevent scrolling of sheet
    ActiveWorkbook.Sheets("Buttons").ScrollArea = "A1:T25"
    ActiveWorkbook.Sheets("Student Tracking").ScrollArea = "A:BQ"
    
    'protect the structure of the workbook
    
    'to unprotect class area
    'ActiveWorkbook.Sheets("Student Tracking").Unprotect Password:=publicPassword
    'ActiveWorkbook.Sheets("Student Tracking").Range("O:Z").Cells.Locked = False
    'ActiveWorkbook.Sheets("Student Tracking").Protect Password:=publicPassword, UserInterfaceOnly:=True
    
    
    'to always open buttons sheet first and update the summary
    'update the summary and activate the "Buttons" sheet
    updateSummary
    'frmYear.Show
End Sub
Attribute VB_Name = "commonFunctions"
Public Const startingRow = 9
'for determinig page number and no of rows per page in update student forms
'they have been assigned default values in the frmUpdateStudentOptions onclick event
Public pageNo, perPage As Integer

'in order to use the same form for adding new teacher as well as edit
'existing ones, teacherFormMode is a
'variable that defines a mode for each of the teachers forms
'a value 1 indicates that the form is being opened to add a new teacher
'a value 2 indicates that the form is being opened to update a teacher
Public teacherFormMode As Integer


'stores the teacherID being curretly added or edited in the teachers form
Public teacherID As String

'** function that converts a string representation of a class into its integer equivalent
'** @param strClass -> class in string i.e "ECD","NUR"....."11","12"
'** @return ->integer representation of class
Function convertClassToInteger(ByVal strClass As String)
    Dim intClass As Integer
    
    If strClass = "ECD" Or strClass = "ECD/PPC" Then
        intClass = -1
    ElseIf strClass = "NUR" Then
        intClass = -5
    ElseIf strClass = "LKG" Then
        intClass = -4
    ElseIf strClass = "UKG" Then
        intClass = -3
    ElseIf strClass = "KG" Then
        intClass = -2
    ElseIf strClass = "PAD" Or strClass = "FAD" Or strClass = "" Then
        intClass = 0
    Else
        intClass = CInt(strClass)
    End If
    
    convertClassToInteger = intClass
End Function


'** function that returns the Numeric representation of Option selected
'** in the combo box
'** @param strRange ->column in the information sheet that has
'**                  information relating to the combo box
'** @param comboBox ->the combobox object whose value
'**                 needs to be enumerated

Public Function returnNumber(column As String, comboBox As Object)
    Dim optionTypes()
    Dim selectedOption, columnNum, count As Integer
    
    columnNum = Range(column & 1).column
    optionTypes = Application.Transpose(Worksheets("Information").Range(column & "2:" & column & Worksheets("Information").Cells(Rows.count, columnNum).End(xlUp).row).value)
    count = 1
    For Each Item In optionTypes
        If Item = comboBox.Text Then
            selectedOption = count
        End If
        count = count + 1
    Next Item
    returnNumber = selectedOption
End Function

'** function that returns the String representation of Numeric Option selected
'** @param strRange ->column in the information sheet that has
'**                  information relating to the combo box
'** @param num ->the number which needs to be converted into string

Public Function returnString(column As String, num As Integer)
    Dim optionTypes()
    Dim selectedOption As String
    Dim columnNum, count As Integer
    
    columnNum = Range(column & 1).column
    optionTypes = Application.Transpose(Worksheets("Information").Range(column & "2:" & column & Worksheets("Information").Cells(Rows.count, columnNum).End(xlUp).row).value)
    count = 1
    For Each Item In optionTypes
        If count = num Then
            selectedOption = Item
        End If
        count = count + 1
    Next Item
    returnString = selectedOption
End Function

'** function that returns an auto-incremented value depending on the
'** number of rows that a sheet currently has
'** @param strSheet ->Name of Sheet
'** @param column ->position of column in which
'**                 the serial couter is positioned

Public Function getnextCount(strSheet As String, columnPosition As Integer)
    Dim lastRow As Long
    lastRow = Worksheets(strSheet).Cells(Rows.count, 1).End(xlUp).row - 1
    
    If lastRow >= startingRow Then
        getnextCount = Worksheets(strSheet).Cells(lastRow, columnPosition).value + 1
    ElseIf lastRow < startingRow Then
        getnextCount = 1
    End If
End Function

'** function that generates teacher id from school id and year
'** using the format xxxxxxxx=>school id,xx=>last digits of nepali year,xxx=teacher count
'** @param strSheet ->Name of Sheet
'** @param column ->position of column in which
'**                 the serial couter is positioned
Public Function generateTeacherID(strSheet As String, columnPosition As String)
    Dim lastRow As Long
    Dim lastRegID As Long
    Dim regId As String
    
    lastRow = Worksheets(strSheet).Cells(Rows.count, 2).End(xlUp).row
    lastRegID = CLng(Right(Worksheets("General").Range("b5").Text, 2)) * 1000
    
    
    If lastRow >= startingRow Then
        'get the total teacher count for the current year
        For Each cell In Worksheets(strSheet).Range(columnPosition & startingRow & ":" & columnPosition & lastRow)
            'this is just a grotesque way of saying a=b
            'comapring year in row with the current year of the software
            'and find out the maximum teacherID
            If (cell.Offset(0, 1).value - Worksheets("General").Range("B5").value) = 0 And (lastRegID - CLng(cell.value) < 0) Then
                lastRegID = CLng(cell.value)
            End If
        Next cell
        
        'now that we have the teacher count we create a regID for the teacher
        regId = CStr(lastRegID + 1)
        Do While Len(regId) <= 2
            regId = "0" & regId
        Loop
    ElseIf lastRow < startingRow Then
        regId = "001"
    End If

    generateTeacherID = regId
End Function


'** function that allows only numbers to be input into the text field
'** assigns zero if the key pressed is not numeric
'** @param KeyAscii ->ASCII code of the key pressed by value

Public Sub allowOnlyNumbers(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 48 Or KeyAscii > 57) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub



'** function that allows only alphabetical characters
'** (non-numeric and non-special characters) to be input into text field
'** assigns zero if the key passed is numeric or is a special character
'** @param KeyAscii->ASCII code of the key pressed by value
Public Sub allowOnlyAlphabets(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub


'** function that allows only alphabets or numers to be input into the text field
'** assigns zero if the key pressed is not alphanumeric i.e special characters like-,.?":
'** @param KeyAscii ->ASCII code of the key pressed by value

Public Sub allowOnlyAlphaNumeric(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 48 Or (KeyAscii > 57 And KeyAscii < 65) Or (KeyAscii > 90 And KeyAscii < 97) Or KeyAscii > 122) Then
        KeyAscii = 0
    End If
End Sub

'** function that generates sn for teacher teaching history,trainings and qualifications
'** starts with latest achievement at SN = 1,2,3...
'** SN will repeat with teachersID but will remain unique for a single teacher
'** for the same year
'** no matter how many qualifications,teaching experience the teacher has
'** @param strSheet -> The name of sheet
'** @param idColumn  ->column address of the unique key
'** @param snColumn  ->column address of the SN field
'** @param uniqueID  ->unique id that identifies the record

Public Function returnHistorySN(strSheet As String, idColumn As String, snColumn As String, uniqueID As String)
    Dim lastRow As Long
    Dim nextSn As Integer
    
    lastRow = Worksheets(strSheet).Cells(Rows.count, 1).End(xlUp).row + 1
    nextSn = 1
    For Each rcell In Worksheets(strSheet).Range(idColumn & startingRow & ":" & idColumn & lastRow)
         If rcell.Text = uniqueID And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
             nextSn = nextSn + 1
        End If
    Next
    returnHistorySN = nextSn
End Function


'** function that checks if an ID has related information in a specified sheet
'** i.e can be used to determine whether personal info,education has been
'** filled for a certain teacherID
'** @param uniqueID ->ID to check
'** @param idColumn -> column in sheet that holds the id field
'** @param strSheet ->name of the sheet
Public Function isDataInSheet(uniqueID As String, idColumn As String, strSheet As String)
    Dim lastRow As Long
    Dim dataPresent As String
    
    lastRow = Worksheets(strSheet).Cells(Rows.count, 1).End(xlUp).row
    dataPresent = "No"
    For Each rcell In Worksheets(strSheet).Range(idColumn & startingRow & ":" & idColumn & lastRow)
         If uniqueID = rcell.Text Then
             dataPresent = "Yes"
        End If
    Next
    isDataInSheet = dataPresent
End Function

'** funtion that returns the current class of a student when the rowno containing the
'** students information is passed to the function
'** extensively used only in the update class,scholarship and marks module
'** @param r->row number that has student information
'** @return ->class in which the student currently is
Public Function currentClass(ByVal r As Double) As Integer
    Dim rngMain As Range
    Dim rCellMain As Range
    Dim maxClass As Integer
    Dim maxClassAddress As String
    
    'to add class first we find out the maximum class value
        Set rngMain = Worksheets("Student Tracking").Range("O" & r & ":Z" & r)
       
        
        maxClass = 0.5                  'a atudent can be in class 1 as well so we take 0.5(0 is for dropouts)
        For Each rCellMain In rngMain
            'first check if the student has dropped out,no need to go
            'further if the student has already left the school
            If rCellMain.Text = "FAD" Or rCellMain.Text = "PAD" Then
                maxClass = 0
                maxClassAddress = rCellMain.address
                Exit For
            End If
            
            
            If rCellMain.Text = "ECD/PPC" Then    '-1 is for ECD
                maxClass = -1
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "KG" Then
                maxClass = -2
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "UKG" Then
                maxClass = -3
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "LKG" Then
                maxClass = -4
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "NUR" Then
                maxClass = -5
                maxClassAddress = rCellMain.address
            Else
                If rCellMain.value >= maxClass And Not Len(rCellMain.Text) = 0 Then
                    maxClass = rCellMain.value
                    maxClassAddress = rCellMain.address
                End If
            End If
            
        Next rCellMain
        column = Mid(maxClassAddress, 2, 1)
        maxYear = Worksheets("Student Tracking").Range(column & "7").value
    
        'to return current class to the calling procedure
        If frmUpdateStudentOptions.selectedYear = maxYear Then
            currentClass = maxClass
        Else
            currentClass = 9999
        End If
End Function


'** to count the total no of students in the specified class for the update modules
'** and the generate report module
'** @param selectedClass->class
'** @return->no of students in that class

Public Function countStudentsInClass(selectedClass As Integer) As Integer
    Dim count As Double
    Dim preoccupiedRows As Integer
    count = 0
    preoccupiedRows = 7
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If selectedClass = currentClass(i + preoccupiedRows) Then
            count = count + 1
        End If
    Next i
    
    countStudentsInClass = count
End Function

'** to count the no of students in ECD,NUR,KG,UKG,LKG in the current year
'** for the update modules
'** returns the no of students in specified ECD No
'** @param -> ECD No
'** @return->no of students in ECD No

Public Function countECDStudents(ByVal ecdNO As Integer) As Integer
    Dim count As Double
    Dim preoccupiedRows As Integer
    count = 0
    preoccupiedRows = 7
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If currentClass(i + preoccupiedRows) < 0 And ecdNO = CInt(Worksheets("Student Tracking").Range("BO" & (i + preoccupiedRows)).value) Then
            count = count + 1
        End If
    Next i
    
    countECDStudents = count
End Function

'** function that returns the count of total students currently in ECD+NUR+KG+LKG+UKG
'** for the update modules
'** return ->total no of students in ECD/PPC
Public Function getTotalECDPPCStudents()
    Dim count As Double
    Dim preoccupiedRows As Integer
    count = 0
    preoccupiedRows = 7
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If selectedClass >= currentClass(i + preoccupiedRows) Then
            count = count + 1
        End If
    Next i
    
    getTotalECDPPCStudents = count
End Function


'** function that returns the name of school for use in excel forms
'** like edit and update
'** @return->name of the school
Public Function getSchoolname() As String
    Dim school As String
    If Len(Worksheets("General").Range("f1").Text) = 0 Then
        frmSchool.Show
    End If
    
    school = Worksheets("General").Range("F1").value
    getSchoolname = Mid(school, 12, Len(school) - 11)
End Function


'** funtion that returns the cell address of current class
'** used in update class,scholarship and marks
'** @param r->row number of the record
'** @return cell address of the current class
Public Function currentClassAddress(ByVal r As Double) As String
    Dim rngMain As Range
    Dim rCellMain As Range
    Dim maxClass As Integer
    Dim maxClassAddress As String
    'to add class first we find out the maximum class value
        Set rngMain = Worksheets("Student Tracking").Range("O" & r & ":Z" & r)
        maxClass = 0.5                          'a atudent can be in class 1 as well so we take 0.5(0 is for dropouts)
        For Each rCellMain In rngMain
            If rCellMain.Text = "ECD/PPC" Then
                maxClass = -1
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "KG" Then
                maxClass = -2
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "UKG" Then
                maxClass = -3
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "LKG" Then
                maxClass = -4
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "NUR" Then
                maxClass = -5
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "FAD" Or rCellMain.Text = "PAD" Then
                maxClass = 0
                maxClassAddress = rCellMain.address
                Exit For
            ElseIf rCellMain.value >= maxClass And Not Len(rCellMain.Text) = 0 Then
                    maxClass = rCellMain.value
                    maxClassAddress = rCellMain.address
            End If
        Next rCellMain
        'to return current class to the calling procedure
        currentClassAddress = maxClassAddress
End Function


'** subprocedure that updates the summary box on the buttons page with the actual count
'** of the no of rows in each sheet and the year
Public Sub updateSummary()

    Worksheets("Buttons").Range("M19").value = Worksheets("General").Range("B5").value
    Worksheets("Buttons").Range("F21").value = countTotalStudents
    Worksheets("Buttons").Range("H21").value = countTeachersInYear(Worksheets("General").Range("B5").value)
    
    If checkPhysicalInYear(Worksheets("General").Range("B5").value) = True Then
        Worksheets("Buttons").Range("J21").value = "Yes"
    Else
        Worksheets("Buttons").Range("J21").value = "No"
    End If
    
    'Activate the "Buttons" sheet
    ActiveWorkbook.Worksheets("Buttons").Activate
End Sub


'** procedure that checks whether a sheet has any records of the teacherID passed
'** sets the value of teacherFormMode to 1 ie add mode if there is no record on the sheet
'** sets the value 2 ie edit mode if there is trace of record
'** @param sheet->name of the sheet
'** @param teacherID->the unique ID of the teacher whose record has to be checked
Public Sub setTeacherFormMode(ByVal sheet As String, ByVal teacherID As String)
    Dim recordFound As Boolean
    recordFound = False
    
    'search for teachers information on on the sheet
    For Each rcell In Worksheets(sheet).Range("B" & startingRow & ":B" & Worksheets(sheet).Cells(Rows.count, 2).End(xlUp).row)
        If rcell.Text = teacherID Then
            recordFound = True
            Exit For
        End If
    Next rcell
    
    'if teachers info has been found then set the teacherFormMode to edit
    'else to add
    If recordFound = True Then
        teacherFormMode = 2
    Else
        teacherFormMode = 1
    End If
    
End Sub

'** procedure that deletes specified element in array
'** preserving the order of the array
'** @param list()->array of elements of undefined type
'** @param value->string that needs to be deleted
Public Sub delete_element(ByRef list(), value As String)
    Dim i, badIndex As Integer
    For i = LBound(list) To UBound(list)
    
        If list(i) = value Then
            badIndex = i
            Exit For
        End If
    Next i
    For i = badIndex To UBound(list) - 1
        list(i) = list(i + 1)
    Next i
    ReDim Preserve list(1 To UBound(list) - 1)
End Sub

'** function that returns the total number of teachers in the year passed
'** counts the no of rows in the "Teacher Personal Details" for the year
'** and returns that value
'** @param year -> the year for which the no of teachers has to be evaluated
'** @return total no of teachers in this year
Function countTeachersInYear(ByVal year As Integer) As Integer
    Dim teacherCount As Integer
    teacherCount = 0
    
    For Each cell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & (Worksheets("Teacher Personal Info").Cells(Rows.count, 2).End(xlUp).row + 1))
        If year > 0 And (cell.Offset(0, 1).value - year = 0) Then
            teacherCount = teacherCount + 1
        End If
    Next cell
    countTeachersInYear = teacherCount
End Function

'** function that returns the total number of students in the excel sheet
'** counts the no of rows in the "Student Tracking" for the year
'** and returns that value
'** @return total no of students
Function countTotalStudents() As Integer
    Dim studentCount As Integer
    studentCount = 0
    
    For Each cell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & (Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1))
        If Not IsEmpty(cell.value) Then
            studentCount = studentCount + 1
        End If
    Next cell
    countTotalStudents = studentCount
End Function

'** function that returns whether the physical details have been filled for the year passed
'** checks whether there is a row in the "Physical Details" sheet with the provided year
'** and returns TRUE/FALSE
'** @param year -> the year for which physical details has to be checked
'** @return TRUE/FALSE
Function checkPhysicalInYear(ByVal year As Integer) As Boolean
    Dim physicalStatus As Boolean
    physicalStatus = False
    
    For Each cell In Worksheets("Physical Details").Range("B" & startingRow & ":B" & (Worksheets("Physical Details").Cells(Rows.count, 2).End(xlUp).row + 1))
        If year > 0 And (cell.value - year) = 0 Then
            physicalStatus = True
            Exit For
        End If
    Next cell
    checkPhysicalInYear = physicalStatus
End Function


'** funtion that checks whether a worksheet with a certain name exists
'** the name of the sheet is passed as parameter and the function returns a boolean
'** value depending on whether a worksheet exists with the name
'** @param sheetName -> Name of the worksheet
'** @return Boolean -> whether worksheet exists
Function worksheetExists(ByVal sheetName As String) As Boolean
  worksheetExists = False
  For Each ws In Worksheets
    If sheetName = ws.Name Then
      worksheetExists = True
      Exit Function
    End If
  Next ws
End Function

'** procedure that deletes and creates a new worksheet with the name passed as parameter
'** @param sheetName -> Name of the worksheet to delete and create
Sub recreateSheet(ByVal sheetName As String)
    Dim privatePassword As String
    privatePassword = "apple"
    
    'delete worksheet if it already exists
    If worksheetExists(sheetName) Then
        Application.DisplayAlerts = False
        Worksheets(sheetName).Delete
        Application.DisplayAlerts = True
    End If
    
    'create the worksheet,initialise the sheet and activate the first cell
    Worksheets.Add(After:=Worksheets(Worksheets.count)).Name = sheetName
    Worksheets(sheetName).Protect Password:=privatePassword, UserInterfaceOnly:=True
End Sub

'** procedure that loops through all of the forms open and checks whether the form specified
'** is open
'** @param UFName ->Name of the userform
'** @return Boolean ->whether form is open
Function FormIsLoaded(UFName As String) As Boolean
    Dim UF As Integer
    For UF = 0 To VBA.UserForms.count - 1
    FormIsLoaded = UserForms(UF).Name = UFName
    If FormIsLoaded Then Exit Function
    Next UF
End Function


'** funtion that returns the current class of a student when the rowno containing the
'** students information is passed to the function
'** extensively used except in the update class,scholarship and marks module
'** @param r->row number that has student information
'** @return ->class in which the student currently is
Function getCurrentClass(ByVal r As Integer)
    Dim rngMain As Range
    Dim rCellMain As Range
    Dim maxClass As Integer
    Dim maxClassAddress As String
    
    'to add class first we find out the maximum class value
        Set rngMain = Worksheets("Student Tracking").Range("O" & r & ":Z" & r)
       
        
        maxClass = 0.5                  'a atudent can be in class 1 as well so we take 0.5(0 is for dropouts)
        For Each rCellMain In rngMain
            'first check if the student has dropped out,no need to go
            'further if the student has already left the school
            If rCellMain.Text = "FAD" Or rCellMain.Text = "PAD" Then
                maxClass = 0
                maxClassAddress = rCellMain.address
                Exit For
            End If
            
            
            If rCellMain.Text = "ECD" Or rCellMain.Text = "ECD/PPC" Then   '-1 is for ECD
                maxClass = -1
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "KG" Then
                maxClass = -2
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "UKG" Then
                maxClass = -3
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "LKG" Then
                maxClass = -4
                maxClassAddress = rCellMain.address
            ElseIf rCellMain.Text = "NUR" Then
                maxClass = -5
                maxClassAddress = rCellMain.address
            Else
                If rCellMain.value >= maxClass And Not Len(rCellMain.Text) = 0 Then
                    maxClass = rCellMain.value
                    maxClassAddress = rCellMain.address
                End If
            End If
        Next rCellMain
        
        getCurrentClass = maxClass
End Function

'** function that resturns Yes/No depending on the paramter passed by converting to Bool
'** @param flag-> the integer variable to check
'** @return -> "Yes" or "No"
Function returnYesNo(ByVal flag As Integer)
    If CBool(flag) = True Then
        returnYesNo = "Yes"
    Else
        returnYesNo = "No"
    End If
End Function
Attribute VB_Name = "dateConverter"
Public Function nepaliToEnglish(yy, mm, dd, formate)
' this function depends on Nepali_calander class
'@copyfree nirmaljoshi.com.np,2010
    'formateType default=2010/1/25
    'formateType 1=2010-jan-25
    'formateType 2=2010-jan-25-saturday
    If IsMissing(formate) Then formateType = 0
    'MsgBox formateType
    Dim a As Nepali_Calender
    Set a = New Nepali_Calender
    Call a.initilizeClass
    Call a.nep_to_eng(yy, mm, dd)
    If a.debug_info = "" Then
        Select Case formate
           Case 1:
           output = a.eng_date("year") & "-" & a.eng_date("emonth") & "-" & a.eng_date("date")
           Case 2:
           output = a.eng_date("year") & "-" & a.eng_date("emonth") & "-" & a.eng_date("date") & "-" & a.eng_date("day")
           Case Else:
           output = a.eng_date("date") & "/" & a.eng_date("month") & "/" & a.eng_date("year")
        End Select
    Else
        output = a.debug_info
    End If
   
    nepaliToEnglish = output
End Function

Public Function englishToNepali(yy, mm, dd, formate)
' this function depends on Nepali_calander class
'@copyfree nirmaljoshi.com.np,2010
    'formateType default=20671/25
    'formateType 1=2067-mangsir-25
    'formateType 2=2067-mangsir-25-saturday
    If IsMissing(formate) Then formateType = 0
    'MsgBox formateType
    Dim a As Nepali_Calender
    Set a = New Nepali_Calender
    Call a.initilizeClass
    Call a.eng_to_nep(yy, mm, dd)
    
    If a.debug_info = "" Then

        Select Case formate
           Case 1:
           output = a.nep_date("year") & "-" & a.nep_date("nmonth") & "-" & a.nep_date("date")
           Case 2:
           output = a.nep_date("year") & "-" & a.nep_date("nmonth") & "-" & a.nep_date("date") & "-" & a.nep_date("day")
           Case Else:
           output = a.nep_date("year") & "/" & a.nep_date("month") & "/" & a.nep_date("date")
        End Select
    Else
        output = a.debug_info
    End If
   
    englishToNepali = output
End Function
Attribute VB_Name = "excelFunctions"
Sub Student_Tracking_Module()
  If Len(Worksheets("General").Range("f1").Text) = 0 Or Worksheets("General").Range("E9").value = "" Then
    frmSchool.Show
  ElseIf Len(Worksheets("General").Range("B5").Text) = 0 Then
    frmYear.Show
  Else
    frmStudentOptions.Show
  End If
End Sub

Sub Tmis_Module()
  If Len(Worksheets("General").Range("f1").Text) = 0 Or Worksheets("General").Range("E9").value = "" Then
    frmSchool.Show
  ElseIf Len(Worksheets("General").Range("B5").Text) = 0 Then
    frmYear.Show
  Else
    frmTeacherOptions.Show
  End If
End Sub

Sub Physical_Module()
  If Len(Worksheets("General").Range("f1").Text) = 0 Or Worksheets("General").Range("E9").value = "" Then
    frmSchool.Show
  ElseIf Len(Worksheets("General").Range("B5").Text) = 0 Then
    frmYear.Show
  Else
    'if the physical details has already been filled for this year then
    'display the form with filled values
    For Each rcell In Worksheets("Physical Details").Range("A" & startingRow & ":A" & Worksheets("Physical Details").Cells(Rows.count, 1).End(xlUp).row + 1)
        'if there is already a row with the current year then set formDisplayMode to edit
        If rcell.Offset(0, 1).Text = Worksheets("General").Range("B5").Text Then
            frmGeneralPhysical.initializeValues (rcell.row)
        End If
    Next rcell
    frmGeneralPhysical.Show
  End If
End Sub

Sub Subjects_Module()
    If Len(Worksheets("General").Range("f1").Text) = 0 Or Worksheets("General").Range("E9").value = "" Then
        frmSchool.Show
    ElseIf Len(Worksheets("General").Range("B5").Text) = 0 Then
        frmYear.Show
    Else
        frmEditSubjects.Show
    End If
End Sub

'macro that displays the year select year combobox
Sub Display_Choose_Year()
    'Display important notice and ask for confirmation from user before the action
    'if user has already set a year
    If Not Len(Worksheets("General").Range("B5").value) = 0 Then
        answer = MsgBox("Are you sure that you want to change the year?Some features might not work with an incorrect year!", vbYesNo, "Important Notice")
        If answer = vbYes Then
            frmYear.Show
        Else
            MsgBox "I thought so!"
        End If
    Else
        frmYear.Show
    End If
End Sub

'exit the report sheet and activate the buttons sheet
Sub Display_MainMenu()
    Worksheets("Buttons").Activate
End Sub


'macro that displays the report list to choose from
Sub Display_Choose_Report()
    frmReportList.Show
End Sub


Attribute VB_Name = "frmAddStudent"
Attribute VB_Base = "0{DB9A275D-9FA4-46E1-8BEF-1AD4E3EF5116}{1926EF12-EC41-43FF-B03A-A755EB61689A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim regId As Long
Public fileName As String
Dim lastRegID As Long
Const sAlphaNum = "0123456789abcdefghijklmnopqrstuvwxyz"
   
Private Sub cboCaste_Change()
     'for Scholarship
    initialiseSch
End Sub

Private Sub cboClass_Change()
    'for ECD
    If cboClass.Text = "ECD/PPC" Then
        chkEcd.value = True
        chkEcd.Enabled = False
        cboECDType.Enabled = True
        cboECDNumber.Enabled = True
        'select "School Based" by default
        cboECDType.ListIndex = 0
    Else
        chkEcd.value = False
        chkEcd.Enabled = True
        cboECDType.Enabled = False
        cboECDNumber.Enabled = False
        cboECDType.value = ""
        cboECDNumber.value = ""
    End If
    
    'to activate the stream for 10+2
    If cboClass.ListIndex > 10 Then
        cboStream.Enabled = True
    Else
        cboStream.Enabled = False
    End If
    
    'for Scholarship
    initialiseSch
    
End Sub

Private Sub cboDisability_Change()
    'for Scholarship
    initialiseSch
End Sub

Private Sub cboSch_Change()
    'disable scholarship amount,bank name and ac number if "None" is selected
    'in the scholarship list
    If returnNumber("F", cboSch) = 1 Then
        Me.txtBankName.Enabled = False
        Me.txtAcNo.Enabled = False
        Me.txtReceivedSchAmount.Enabled = False
    Else
        Me.txtBankName.Enabled = True
        Me.txtAcNo.Enabled = True
        Me.txtReceivedSchAmount.Enabled = True
    End If
End Sub

Private Sub cboStream_Change()

End Sub

Private Sub cmdAdd_Click()
    If txtFirstName.Text = "" Then
        MsgBox ("Enter First Name")
        txtFirstName.SetFocus
        Exit Sub
    End If
    
    If txtLastName.Text = "" Then
        MsgBox ("Enter Last Name")
        txtLastName.SetFocus
        Exit Sub
    End If
    
    If cboYear.value = "" Then
        MsgBox ("Please select year")
        cboYear.SetFocus
        Exit Sub
    End If
    
    If cboClass.value = "" Then
        MsgBox ("Please select Students Class")
        cboYear.SetFocus
        Exit Sub
    End If
    
    'vaidate previous school
    If (Not Len(Me.txtPrevSchool.value) = 9) And (Not Len(Me.txtPrevSchool.value) = 0) Then
        MsgBox ("Please enter a valid code for Previous School")
        Me.txtPrevSchool.SetFocus
        Exit Sub
    End If
    
    'validate ECD Type if class is ECD
    If cboECDType.Enabled = True And cboECDType.value = "" Then
        MsgBox "Please select an ECD Type"
        cboECDType.SetFocus
        Exit Sub
    End If
    
    'validate ECD Number if class is ECD
    If cboECDNumber.Enabled = True And cboECDNumber.value = "" Then
        MsgBox "Please select an ECD Number"
        cboECDType.SetFocus
        Exit Sub
    End If
    
    'validate stream if the combobox has been enabled
    If cboStream.Enabled = True And cboStream.value = "" Then
        MsgBox "Please select a Stream!"
        cboStream.SetFocus
        Exit Sub
    End If
    
    If cboCaste.value = "" Then
        MsgBox ("Please select a Caste")
        cboCaste.SetFocus
        Exit Sub
    End If
    
    If cboSch.value = "" And cboSch.Enabled = True Then
        MsgBox ("Please select a scholarship or select none")
        cboSch.SetFocus
        Exit Sub
    End If
    
    
    
    ' check for validity of date of birth
    If (cboDobYear.value = "") Or (cboDobMonth.value = "") Or (cboDobDay.value = "") Then
        MsgBox ("Please Enter Date of Birth")
        Exit Sub
    End If
    
   
    If optMale.value = False And optFemale.value = False Then
        MsgBox ("Please Select Gender")
        optMale.SetFocus
        Exit Sub
    End If
    
    
    
    'to select name of school
    Dim schoolID As String
    ActiveWorkbook.Worksheets("General").Activate
    Range("F1").Select
    schoolID = Mid(activeCell.Text, 2, 9)
    
     'to activate the main worksheet in excel and to hide the add student form
    ActiveWorkbook.Worksheets("Student Tracking").Activate
    Me.Hide
    
    'to find the first empty row starting from A10
    Range("A9").Select
    Do
        If IsEmpty(activeCell) = False Then
            activeCell.Offset(1, 0).Select
        End If
    Loop Until IsEmpty(activeCell) = True
    
     
    'to initialise option button,dob,ecd....
    Dim sex As String
    Dim dob As String
    Dim ecd As String
    
    If optMale.value = True Then
        sex = "Male"
    End If
    If optFemale.value = True Then
        sex = "Female"
    End If
    
    'to initialise english and Nepali date
    'to calculate english date
    Dim engDOB As String
    Dim nepaliDOB As String
    Dim engYear As Integer
    Dim engMonth As Integer
    Dim engDay As Integer
     
        
    'convert nepali date to english date using macro
    nepaliDOB = cboDobDay.value & "/" & cboDobMonth.value & "/" & cboDobYear.value
    engDOB = nepaliToEnglish(cboDobYear.value, cboDobMonth.value, cboDobDay.value, 3)
   
    
    If chkEcd.value = True Then
        ecd = "Yes"
    Else
        ecd = "No"
    End If
    
    'for initialization of no of shifts from attendance column to input class information at corresponding date
    Dim shifts As Integer
    shifts = cboYear.value - 2069
    
    'identify scholarship by unique order as specified in information sheet
     Dim schList()
     Dim schNum, count As Integer

     schList = Application.Transpose(Worksheets("Information").Range("F2:F15").value)
     count = 0
     For Each Item In schList
        If Item = cboSch.Text Then
            schNum = count
        End If
        count = count + 1
     Next Item
     
    'to populate the excel table at the first empty row
    activeCell.value = schoolID
    activeCell.Offset(0, 1).value = cboYear.value
    activeCell.Offset(0, 2).value = txtRegId.value
    activeCell.Offset(0, 3).value = StrConv(txtFirstName.value, vbProperCase)
    activeCell.Offset(0, 4).value = StrConv(txtLastName.value, vbProperCase)
    activeCell.Offset(0, 5).value = sex
    activeCell.Offset(0, 6).value = StrConv(txtFather.value, vbProperCase)
    activeCell.Offset(0, 7).value = StrConv(txtMother.value, vbProperCase)
    activeCell.Offset(0, 8).value = nepaliDOB
    activeCell.Offset(0, 9).value = engDOB
    activeCell.Offset(0, 10).value = cboCaste.value
    activeCell.Offset(0, 11).value = cboDisability.value
    activeCell.Offset(0, 12).value = ecd
    activeCell.Offset(0, 13).value = fileName
    activeCell.Offset(0, 13 + shifts).value = cboClass.value
    
    'set scholarship if not 0 i.e. not none
    If schNum > 0 Then
         activeCell.Offset(0, 25 + shifts).value = schNum
    End If
    
    
    activeCell.Offset(0, 50).value = StrConv(txtBankName.value, vbProperCase)
    activeCell.Offset(0, 51).value = txtAcNo.value
    activeCell.Offset(0, 51 + shifts).value = txtReceivedSchAmount.value
    activeCell.Offset(0, 64).value = returnNumber("R", cboStream)
    activeCell.Offset(0, 65).value = returnNumber("AC", cboECDType)
    activeCell.Offset(0, 66).value = cboECDNumber.value
    activeCell.Offset(0, 67).value = txtPrevSchool.value
    
    'MsgBox ("Student Successfully Added!")

    'to reset the picture for student
    fileName = ""
    lastRegID = txtRegId.value
    
    Unload Me
    
    frmAddStudent.Show
    frmAddStudent.lblAdded.Caption = lastRegID & " added successfully!"
    
    'update the summary sheet and activate the "Buttons" sheet
    updateSummary
    
    'to reset the form after all columns are inserted
End Sub

Private Sub cmdLoadPicture_Click()
    'to extract the name of the picture from absolute address/location and load it into image box
    getLocation ("add")
    'ThisWorkbook.Sheets("Student Tracking").Range("D6") = frmAddStudent.imgStudent.Picture
    
End Sub

Private Sub cmdReset_Click()
'to initialise automatic generation of regid
    Dim lastRow As Long
    Dim lastRegID As String
    
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    lastRegID = Worksheets("Student Tracking").Cells(lastRow, 3).value
    

    If lastRow >= 9 Then
        lastRegID = lastRegID + 1
        
        Do While Len(lastRegID) <= 4
            lastRegID = "0" & lastRegID
        Loop
    ElseIf lastRow < 9 Then
        lastRegID = "00001"
    End If
    txtRegId.Text = lastRegID

    Unload Me
    frmAddStudent.Show
'to empty the form
    'txtFirstName.Value = ""
    'txtLastName.Value = ""
    'txtFather.Value = ""
    'txtMother.Value = ""
    'cboDobYear.Value = ""
    'cboDobMonth.Value = ""
    'cboDobDay.Value = ""
    'cboCaste.Value = " "
    'cboDisability.Value = ""
    'optMale.Value = False
    'optFemale.Value = False
    'chkEcd.Value = False
    'cboClass.Value = ""
    'cboYear.Value = ""
    
    'to place cursor on the first field of the form
    'txtRegId.SetFocus
End Sub

Private Sub optFemale_Click()
    'to initialise the scholarship field
    initialiseSch
End Sub

Private Sub optMale_Change()
    'to initialise the scholarship field
    initialiseSch
End Sub


Private Sub txtAcNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphaNumeric(KeyAscii)
End Sub

Private Sub txtFather_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtFirstName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub


Private Sub txtLastName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtMother_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtPrevSchool_Change()

End Sub

Private Sub txtPrevSchool_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
    If Len(Me.txtPrevSchool) > 8 Then
        Me.txtPrevSchool.BackColor = &HFF&
    Else
        Me.txtPrevSchool.BackColor = &H80000005&
    End If
End Sub

Private Sub txtReceivedSchAmount_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub UserForm_Initialize()
'for initialisation of dob
    'for dob year
        With Me.cboDobYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    'for dob month
        With Me.cboDobMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
    'for dob month
        With Me.cboDobDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        
    'for scholarship
        With Me.cboSch
            .list() = Application.Transpose(Worksheets("Information").Range("F2:F15").value)
        End With


    'for streams
    With Me.cboStream
        .list() = Application.Transpose(Worksheets("Information").Range("R2:R" & Worksheets("Information").Cells(Rows.count, 18).End(xlUp).row).value)
    End With


    'to initialise year combobox
        With Me.cboYear
            For i = 2070 To 2081 Step 1
                .AddItem i
            Next
        End With
     'select current year and disable this field in form
     Me.cboYear.value = Worksheets("General").Range("B5").value
     Me.cboYear.Enabled = False
    
    'to initialise class combobox
    With Me.cboClass
        .AddItem "ECD/PPC"
        For i = 1 To 12 Step 1
            .AddItem i
        Next
    End With
    
    'for ECD type combobox
    With Me.cboECDType
        .list() = Application.Transpose(Worksheets("Information").Range("AC2:AC" & Worksheets("Information").Cells(Rows.count, 29).End(xlUp).row).value)
    End With
    
    'for ECD NUmber combobox
    With Me.cboECDNumber
        For i = 1 To 15 Step 1
            .AddItem i
        Next
    End With
    
    'to initialise disability combobox
    With Me.cboDisability
        'disabilities can be added in column B after second row by the operator
        For i = 2 To Worksheets("Information").Cells(Rows.count, 2).End(xlUp).row
            .AddItem Worksheets("Information").Range("B" & i).Text
        Next i
    End With

    
    'to initialise caste combobpx
    With Me.cboCaste
        .AddItem " "        'in case of no caste/not applicable
        'Castes can be added in in column C after second row by the operator
        For i = 2 To Worksheets("Information").Cells(Rows.count, 3).End(xlUp).row
            .AddItem Worksheets("Information").Range("C" & i).Text
        Next i
    End With
    
    
    'bank name and scholarship amount should only be enabled if student
    'has a scholarship
    Me.txtBankName.Enabled = False
    Me.txtAcNo.Enabled = False
    Me.txtReceivedSchAmount.Enabled = False
      
    'to initialise automatic generation of regid
    Dim lastRow As Long
    Dim lastRegID As String
    
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    lastRegID = Worksheets("Student Tracking").Cells(lastRow, 3).value
    
    If lastRow >= 9 Then
        lastRegID = lastRegID + 1
        Do While Len(lastRegID) <= 4
            lastRegID = "0" & lastRegID
        Loop
    ElseIf lastRow < 9 Then
        lastRegID = "00001"
    End If
    txtRegId.Text = lastRegID
    
End Sub

Public Sub getLocation(Source As String)

    Dim iPos As Integer
    Dim strPicture As String
    Dim workbookPath As String
     
    workbookPath = ThisWorkbook.path
    strPicture = Application.GetOpenFilename
    
    'iPos = InStrRev(strPicture, "\", , vbTextCompare)
    iPos = InStrRev(strPicture, workbookPath, , vbTextCompare)
    
    'checks whether the image is inside the wrokbook directory
    If iPos = 1 Then
        If Source = "add" Then
            imgStudent.Picture = LoadPicture(strPicture)
            imgStudent.BorderStyle = fmBorderStyleNone
            fileName = Right(strPicture, Len(strPicture) - Len(workbookPath))
            'filename now consists of the required relative path that points to picture.filename is added to excel table as address of picture
        ElseIf Source = "edit" Then
            frmEditStudent.imgStudent.Picture = LoadPicture(strPicture)
            frmEditStudent.imgStudent.BorderStyle = fmBorderStyleNone
            fileName = Right(strPicture, Len(strPicture) - Len(workbookPath))
            'filename now consists of the required relative path that points to picture.filename is added to excel table as address of picture
        End If
        
        'to embed picture into the workbook itself
        'Worksheets("Information").OLEObjects.Add(fileName:=strPicture, Link:=True, DisplayAsIcon:=True).Select
    Else
        If strPicture = "False" Then
        MsgBox ("Please select a photograph!")
        fileName = ""
        
        Else
        MsgBox ("Path correction required:First move the picture(s) to the same folder as the excel workbook before assigning it to a student!")
        fileName = ""
        End If
    End If
    
End Sub

'procedure that initialises the scholarship field whenever relevant fields are changed
Private Sub initialiseSch()
    Dim priList()
    Dim secList()
    Dim finalSchList()
    Dim disabledString
    disabledString = "Disabled"
    
    priList() = Application.Transpose(Worksheets("Information").Range("D2:D11").value)
    secList() = Application.Transpose(Worksheets("Information").Range("E2:E12").value)
     
    'enable the scholarship frame
    cboSch.Enabled = True
    txtBankName.Enabled = True
    txtAcNo.Enabled = True
    txtReceivedSchAmount.Enabled = True
    
    'assign arrays to finallist depending on the level of students and gender
    'disable the scholarship for ecd students.
    '0->ECD
    
    'for ecd the scholarship field is disabled and the initialisation if scholarship ends
    'for others we assign different lists of scholarships
    If cboClass.ListIndex = 0 Then
        cboSch.Enabled = False
        txtBankName.Enabled = False
        txtAcNo.Enabled = False
        txtReceivedSchAmount.Enabled = False
        Exit Sub
    ElseIf cboClass.ListIndex < 6 Then
        finalSchList = priList
        If optMale.value = True Or (optMale.value = False And optFemale.value = False) Then
            delete_element finalSchList, "Girls from Karnali"
            delete_element finalSchList, "100% Primary Girls"
        End If
    Else
        finalSchList = secList
        If optMale.value = True Or (optMale.value = False And optFemale.value = False) Then
            delete_element finalSchList, "Girls from Karnali"
        End If
    End If
    
    'No need to display disabled scholarship if student is not disabled
    If cboDisability.value = "" Or cboDisability.value = " " Then
        delete_element finalSchList, "Disabled"
    End If
    
    'no need to display caste specific scholarship if student is not of that caste
    If Not cboCaste.value = "Dalit" Then
        delete_element finalSchList, "Dalit"
    End If
    If Not cboCaste.value = "Janajati" Then
        delete_element finalSchList, "Janajati and Marginalized"
    End If
    
    With Me.cboSch
           .Clear
           .list() = finalSchList
    End With
End Sub

'preocedure that deletes specified element in array preserving the order of the array
Private Sub delete_element(ByRef list(), value)
    Dim i, badIndex As Integer
    For i = LBound(list) To UBound(list)
    
        If list(i) = value Then
            badIndex = i
            Exit For
        End If
    Next i
    For i = badIndex To UBound(list) - 1
        list(i) = list(i + 1)
    Next i
    ReDim Preserve list(1 To UBound(list) - 1)
End Sub



Private Sub txtBankName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Attribute VB_Name = "frmEditSheet"
Attribute VB_Base = "0{857D2F6F-3F01-4386-AF33-42CB4434A9A5}{5B809060-F66C-4460-91DD-EA25C7E8CB4E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim lblEditsheet() As MSForms.Label           'array of lblEditsheet to create a table

'for the edit buttons
Dim btnEditStudent() As MSForms.Label

Dim preoccupiedRows As Double            'to store the no of preoccupied rows by header in the main sheet
Dim totalRows As Double

'to determine the no of columns from the table to display on the edit sheet
Dim noColumns As Integer

'for storing the width of columns
Dim dobWidth As Double
Dim regidWidth As Double

'event handling for the edit buttons
Dim editEventsArray() As New reviewEventClass

Private Sub UserForm_Activate()
    With Me.editFrame
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 21 * Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
        '.ScrollWidth = .InsideWidth * 9
    End With
End Sub

Private Sub UserForm_Initialize()
    'Calculate the total no of rows in main sheet
    totalRows = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    
    'define the no of columns to display in the sheet
    noColumns = 11
    
    'to set the name of the school
    lblHeader.Caption = getSchoolname()

    'to fix the no of lblEditsheet,checkboxes and redim the arrays accordingly
    
    ReDim lblEditsheet(totalRows + 10)
    ReDim btnEditStudent(1 To totalRows)
    
    
    preoccupiedRows = 7
    dobWidth = 0
    regidWidth = 0
    
    
    
    'to retrieve all reg no,name and surname including table headers
    
    For i = 1 To (totalRows - preoccupiedRows) Step 1 'the no of rows
        For j = 1 To noColumns          'no of columns
            k = i + j           'index of label array lblEditsheet()
            Set lblEditsheet(k) = frmEditSheet.editFrame.Controls.Add("Forms.Label.1", "lbl")
            With lblEditsheet(k)
                If i = 1 Then
                    .Top = 20
                Else
                    .Top = i * 20
                End If
                .Left = (j * 70) - 50 + dobWidth - regidWidth
                
                .BackColor = RGB(255, 255, 255)
                .BorderColor = RGB(0, 0, 0)
                .BorderStyle = fmBorderStyleSingle
                .Caption = " " & Worksheets("Student Tracking").Range("c" & preoccupiedRows + i).Offset(0, j - 1).value
            End With
            
                'to color the first row is header
                If i = 1 Then
                   lblEditsheet(k).BackColor = &HC000&
                End If
                
             
                'to decrease the width of regId column as we donot require column of same width as others
                If j = 1 Then
                    lblEditsheet(k).Width = 37
                    regidWidth = 37
                End If
                
                'to format the regid ie the first column(j=1) to display uniform numbers
                If j = 1 And Not i = 1 Then
                    lblEditsheet(k).Caption = Trim(lblEditsheet(k).Caption)
                    While Len(lblEditsheet(k).Caption) < 5
                        lblEditsheet(k).Caption = "0" & lblEditsheet(k).Caption
                    Wend
                    lblEditsheet(k).Caption = "   " & lblEditsheet(k).Caption
                End If
                'to decrease size of ECD column
                If j = 11 Then
                    lblEditsheet(k).Width = 30
                End If
        Next j
        dobWidth = 0
        regidWidth = 0
        
        'to add all the edit buttons except for the header row
        If i > 1 Then
            createEditButtons (i)
        End If
    Next i
End Sub

'** procedure that adds edit buttons on each row of the table which when clicked
'** brings up the edit student form.
'** click events are linked to the reviewEventClass and controltip text is used to identify
'** the student
'** @param i -> count of the rows that have been rendered so far
Private Sub createEditButtons(ByVal i As Double)
        Set btnEditStudent(i) = frmEditSheet.editFrame.Controls.Add("Forms.Label.1", "lbl")
        With btnEditStudent(i)
            .Top = i * 20
            .Left = (noColumns * 70) - 50
            .Height = 15
            .Width = 30
            .Caption = "Edit"
            .Font.Size = 9
            .SpecialEffect = fmSpecialEffectRaised
            .TextAlign = fmTextAlignCenter
            .ControlTipText = Worksheets("Student Tracking").Range("c" & preoccupiedRows + i).Text
        End With
        
        ReDim Preserve editEventsArray(1 To i)
        Set editEventsArray(i).btnEditStudentEvents = btnEditStudent(i)
End Sub

'** procedure that displays the edit students form when the regID of that student
'** is passed to this form
'**@param string regID->regID of student whose information needs to be loaded up
Public Sub showEditStudentForm(ByVal regId As String)
    Dim firstStudent, lastStudent, rowCount As Double
    
    firstStudent = 9
    lastStudent = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    rowCount = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("c" & firstStudent & ":c" & lastStudent)
        'retrieve row into userform if the specified regid matches the one on table
        If regId = rcell.Text Then
            frmEditStudent.txtRegId.Text = regId
            frmEditStudent.txtFirstName.value = rcell.Offset(0, 1).value
            frmEditStudent.txtLastName.value = rcell.Offset(0, 2).value
            If rcell.Offset(0, 3).value = "Male" Then
                frmEditStudent.optMale.value = True
            Else
                frmEditStudent.optFemale.value = True
            End If
            frmEditStudent.txtFather.value = rcell.Offset(0, 4).value
            frmEditStudent.txtMother.value = rcell.Offset(0, 5).value
            
            'for dob
            'setDOB rcell.Offset(0, 6).Value
            
            dob = rcell.Offset(0, 6).value
            frmEditStudent.cboDobDay.value = Split(dob, "/")(0)
            frmEditStudent.cboDobMonth.value = Split(dob, "/")(1)
            frmEditStudent.cboDobYear.value = Split(dob, "/")(2)

            
            frmEditStudent.cboCaste.value = rcell.Offset(0, 8).value
            frmEditStudent.cboDisability.value = rcell.Offset(0, 9).value
            If rcell.Offset(0, 10).value = "Yes" Then
                frmEditStudent.chkEcd.value = True
            Else
                frmEditStudent.chkEcd.value = True
            End If
            
            'to display picture of student
            If Not Len(rcell.Offset(0, 11).value) = 0 Then
                frmEditStudent.imgStudent.Picture = LoadPicture(ThisWorkbook.path + rcell.Offset(0, 11).value)
                frmEditStudent.imgStudent.BorderStyle = fmBorderStyleNone
            End If
            
            frmEditStudent.txtBankName.value = rcell.Offset(0, 48).value
            frmEditStudent.txtAcNo.value = rcell.Offset(0, 49).value
            
            'enable and retrieve the value of stream only if the student is currently in grade 11 or 12
            Dim Class As Variant
            Class = Worksheets("Student Tracking").Range(currentClassAddress(rcell.row)).value
            If Class = 11 Or Class = 12 Then
                frmEditStudent.cboStream.Enabled = True
                frmEditStudent.cboStream.value = returnString("R", rcell.Offset(0, 62).value)
            End If
            
            'enable and retrieve the value of ECD type and Number only if the student is currently in ECD
            If rcell.Offset(0, 63).value > 0 And rcell.Offset(0, 64).value > 0 Then
                frmEditStudent.cboECDType.Enabled = True
                frmEditStudent.cboECDType.value = returnString("AC", rcell.Offset(0, 63).value)
                frmEditStudent.cboECDNumber.Enabled = True
                frmEditStudent.cboECDNumber.value = rcell.Offset(0, 64).value
            End If
            
            'now retrieve the previous school(if present)
            If Len(rcell.Offset(0, 65).Text) = 9 Then
                frmEditStudent.txtPrevSchool.value = rcell.Offset(0, 65).Text
            End If
            
            frmEditStudent.Show
            
        End If
        rowCount = rowCount + 1
    Next
End Sub
Attribute VB_Name = "frmEditStudent"
Attribute VB_Base = "0{5058B73C-303F-4374-A655-F478FDEBBACB}{D3240E17-72E6-4F1C-B555-BC760ED364BE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private regId As String
Private startingRow As Double



Private Sub cmdChangePicture_Click()
    
    'to extract the name of the picture from absolute address/location and load it into image box
    'paremeter defines the source or image box to change ie add/edit
    frmAddStudent.getLocation ("edit")
    
End Sub

Private Sub cmdSave_Click()
    Dim firstStudent, lastStudent As Double
    regId = txtRegId.Text
    firstStudent = 9
    lastStudent = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    
    'to check for validity of data input/changed by user
     If txtFirstName.Text = "" Then
        MsgBox ("Enter First Name")
        txtFirstName.SetFocus
        Exit Sub
    End If
    
    If txtLastName.Text = "" Then
        MsgBox ("Enter Last Name")
        txtLastName.SetFocus
        Exit Sub
    End If
    
    'vaidate previous school
    If (Not Len(Me.txtPrevSchool.value) = 9) And (Not Len(Me.txtPrevSchool.value) = 0) Then
        MsgBox ("Please enter a valid code for Previous School")
        Me.txtPrevSchool.SetFocus
        Exit Sub
    End If
    
    'validate ECD Type if class is ECD
    If cboECDType.Enabled = True And cboECDType.value = "" Then
        MsgBox "Please select an ECD Type"
        cboECDType.SetFocus
        Exit Sub
    End If
    
    'validate ECD Number if class is ECD
    If cboECDNumber.Enabled = True And cboECDNumber.value = "" Then
        MsgBox "Please select an ECD Number"
        cboECDType.SetFocus
        Exit Sub
    End If
    
    'validate stream if the control is active i.e student is in high school
    If cboStream.Enabled = True And cboStream.value = "" Then
        MsgBox "Please select a Stream!"
        cboStream.SetFocus
        Exit Sub
    End If
    
    If cboCaste.value = "" Or Len(cboCaste.value) <= 1 Then
        MsgBox ("Please select a Caste")
        cboCaste.SetFocus
        Exit Sub
    End If
    
    'check for validity of date of birth
    If (cboDobYear.value = "") Or (cboDobMonth.value = "") Or (cboDobDay.value = "") Then
        MsgBox ("Please Enter Date of Birth")
        Exit Sub
    End If
       
       
       
       
    'to initialise english and Nepali date
    'to calculate english date
    Dim engDOB As String
    Dim nepaliDOB As String
    
    'convert nepali date to english date using macro
    nepaliDOB = cboDobDay.value & "/" & cboDobMonth.value & "/" & cboDobYear.value
    engDOB = nepaliToEnglish(cboDobYear.value, cboDobMonth.value, cboDobDay.value, 3)
   
    
    
    
    For Each rcell In Worksheets("Student Tracking").Range("c" & firstStudent & ":c" & lastStudent)
        'we insert the updated version in the row where the specified regid matches the one on table
        If regId = rcell.Text Then
            rcell.Offset(0, 1).value = frmEditStudent.txtFirstName.value
            rcell.Offset(0, 2).value = frmEditStudent.txtLastName.value
            If frmEditStudent.optMale.value = True Then
                rcell.Offset(0, 3).value = "Male"
            Else
                rcell.Offset(0, 3).value = "Female"
            End If
            rcell.Offset(0, 4).value = frmEditStudent.txtFather.value
            rcell.Offset(0, 5).value = frmEditStudent.txtMother.value
            
            'for dob
            rcell.Offset(0, 6).value = nepaliDOB
            rcell.Offset(0, 7).value = engDOB
                        
                        
            rcell.Offset(0, 8).value = frmEditStudent.cboCaste.value
            rcell.Offset(0, 9).value = frmEditStudent.cboDisability.value
            If frmEditStudent.chkEcd.value = True Then
                rcell.Offset(0, 10).value = "Yes"
            Else
                rcell.Offset(0, 10).value = "No"
            End If
            rcell.Offset(0, 11).value = frmAddStudent.fileName
            
            rcell.Offset(0, 48).value = StrConv(frmEditStudent.txtBankName.value, vbProperCase)
            rcell.Offset(0, 49).value = frmEditStudent.txtAcNo.value
            rcell.Offset(0, 62).value = returnNumber("R", frmEditStudent.cboStream)
            rcell.Offset(0, 63).value = returnNumber("AC", cboECDType)
            rcell.Offset(0, 64).value = cboECDNumber.value
            rcell.Offset(0, 65).value = txtPrevSchool.value
        End If
    Next rcell
    
    'to update the edit table according to new data
    Unload Me
    Unload frmEditSheet
    frmEditSheet.Show
End Sub


Private Sub txtAcNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphaNumeric(KeyAscii)
End Sub

Private Sub txtBankName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Private Sub txtFather_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtFirstName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtLastName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub


Private Sub txtMother_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If (KeyAscii < 65 Or KeyAscii > 122 Or (KeyAscii > 90 And KeyAscii < 97)) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub


Private Sub txtPrevSchool_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
    If Len(Me.txtPrevSchool) > 8 Then
        Me.txtPrevSchool.BackColor = &HFF&
    Else
        Me.txtPrevSchool.BackColor = &H80000005&
    End If
End Sub

Private Sub UserForm_Initialize()

    'set the row from which data entry begins
    startingRow = 9
    
    'for initialisation of dob
    'for dob year
        With Me.cboDobYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    'for dob month
        With Me.cboDobMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
    'for dob month
        With Me.cboDobDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        
     'for ECD type combobox
    With Me.cboECDType
        .list() = Application.Transpose(Worksheets("Information").Range("AC2:AC" & Worksheets("Information").Cells(Rows.count, 29).End(xlUp).row).value)
    End With
    
    'for ECD NUmber combobox
    With Me.cboECDNumber
        For i = 1 To 15 Step 1
            .AddItem i
        Next
    End With
        
    'for streams
    With Me.cboStream
        .list() = Application.Transpose(Worksheets("Information").Range("R2:R" & Worksheets("Information").Cells(Rows.count, 18).End(xlUp).row).value)
    End With
    
    
    
    'to initialise disability combobox
    With Me.cboDisability
        'disabilities can be added in in column B after second row by the operator
        For i = 2 To Worksheets("Information").Cells(Rows.count, 2).End(xlUp).row
            .AddItem Worksheets("Information").Range("B" & i).Text
        Next i
    End With

    
    'to initialise caste combobpx
    With Me.cboCaste
        .AddItem " "        'in case of no caste/not applicable
        'Castes can be added in in column C after second row by the operator
        For i = 2 To Worksheets("Information").Cells(Rows.count, 3).End(xlUp).row
            .AddItem Worksheets("Information").Range("C" & i).Text
        Next i
    End With
End Sub
Attribute VB_Name = "frmEditSubjects"
Attribute VB_Base = "0{27F1D935-0CE2-4795-83F3-6823B4D4434F}{BB084D77-8EC5-44EA-8D4C-617536815EA4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'to identify the subject column and its numeric representation
Dim subjectColumn As String
Dim subjectColumnNo As Integer

Private Sub cmdAddSubject_Click()
    'validate subject Name
    If txtAddSubjectName.value = "" Then
        MsgBox "Please enter the Subject Name!"
        Exit Sub
    End If
    
    'validate full marks
    If txtAddFullMarks.value = "" Then
        MsgBox "Please enter the Full Marks for this Subject!"
        Exit Sub
    End If
    
    'validate pass marks
    If txtAddPassMarks.value = "" Then
        MsgBox "Please enter the Pass Marks for this Subject!"
        Exit Sub
    End If
    
    'find the last row in the subject list for that level
    ActiveWorkbook.Worksheets("Subjects").Activate
    
    'to find the first empty row starting from second row of whichever level is being
    'currently selected
    Range(subjectColumn & startingRow).Select
    Do
        If IsEmpty(activeCell) = False Then
            activeCell.Offset(1, 0).Select
        End If
    Loop Until IsEmpty(activeCell) = True
    
    'add the subject to the required list and reload the list on the form
    activeCell.value = StrConv(txtAddSubjectName.value, vbProperCase)
    activeCell.Offset(0, 1).value = txtAddFullMarks.value
    activeCell.Offset(0, 2).value = txtAddPassMarks.value
    displaySubjects
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    MsgBox "Successfully added!"
    
    'reload the form
    Unload Me
    frmEditSubjects.Show
End Sub

Private Sub cmdUpdate_Click()
    'update the contents of the edit frame
    Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).value = txtEditSubjectName.value
    Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).Offset(0, 1).value = txtEditFullMarks.value
    Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).Offset(0, 2).value = txtEditPassMarks.value
    
    MsgBox "Successfully Updated!"
    'reload the form
    Unload Me
    frmEditSubjects.Show
End Sub

Private Sub lstSubjectList_Change()
    'enable the edit frame when user selects a value
    frameEdit.Enabled = True
    
    'retrive the subjects details when users selects the subject in the list box
    txtEditSubjectName.value = Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).value
    txtEditFullMarks.value = Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).Offset(0, 1).value
    txtEditPassMarks.value = Worksheets("Subjects").Range(subjectColumn & (lstSubjectList.ListIndex + startingRow)).Offset(0, 2).value
End Sub


Private Sub optClass1_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass2_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass3_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass4_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass5_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass6_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass7_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass8_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass9_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass10_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass11_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optClass12_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub optECD_Change()
    'change the subjects in listbox
    displaySubjects
End Sub

Private Sub txtAddFullMarks_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtAddPassMarks_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub UserForm_Initialize()
    'load the primary level subjects
    optClass1.value = True
    displaySubjects
End Sub

'procedure that is invoked when user clicks on subjects for a certain level
Public Sub displaySubjects()
    'check which option has been enabled
    If optECD.value = True Then
        subjectColumn = "A"
        subjectColumnNo = 1
    ElseIf optClass1.value = True Then
        subjectColumn = "D"
        subjectColumnNo = 4
    ElseIf optClass2.value = True Then
        subjectColumn = "G"
        subjectColumnNo = 7
    ElseIf optClass3.value = True Then
        subjectColumn = "J"
        subjectColumnNo = 10
    ElseIf optClass4.value = True Then
        subjectColumn = "M"
        subjectColumnNo = 13
    ElseIf optClass5.value = True Then
        subjectColumn = "P"
        subjectColumnNo = 16
    ElseIf optClass6.value = True Then
        subjectColumn = "S"
        subjectColumnNo = 19
    ElseIf optClass7.value = True Then
        subjectColumn = "V"
        subjectColumnNo = 22
    ElseIf optClass8.value = True Then
        subjectColumn = "Y"
        subjectColumnNo = 25
    ElseIf optClass9.value = True Then
        subjectColumn = "AB"
        subjectColumnNo = 28
    ElseIf optClass10.value = True Then
        subjectColumn = "AE"
        subjectColumnNo = 31
    ElseIf optClass11.value = True Then
        subjectColumn = "AH"
        subjectColumnNo = 34
    ElseIf optClass12.value = True Then
        subjectColumn = "AK"
        subjectColumnNo = 37
    End If
    
    'finally display subjects of that level
    lblSubjects.Caption = "Subjects of " & Worksheets("Subjects").Range(subjectColumn & (startingRow - 2)).value
    With Me.lstSubjectList
        .list() = Application.Transpose(Worksheets("Subjects").Range(subjectColumn & startingRow & ":" & subjectColumn & Worksheets("Subjects").Cells(Rows.count, subjectColumnNo).End(xlUp).row).value)
    End With
End Sub
Attribute VB_Name = "frmGeneralPhysical"
Attribute VB_Base = "0{83C8FE85-8B89-404F-B1AB-82110B04379F}{819DEDB2-05D4-4F1A-A68E-D5323DDDE690}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public formDisplayMode As Integer

Private Sub cmdNext_Click()
    
    'select the second page if the user is on the first page
    'and enable the previous button
    'or if user is on the second page and clicks on next then save all data from
    'both of the pages
    If frmGeneralPhysical.mpGeneralPhysical.value = 0 Then
        frmGeneralPhysical.mpGeneralPhysical.Pages(0).Visible = False
        frmGeneralPhysical.mpGeneralPhysical.Pages(1).Visible = True
        frmGeneralPhysical.mpGeneralPhysical.value = 1

        frmGeneralPhysical.cmdPrevious.Enabled = True
        Exit Sub
    End If

    Dim dateSIP, dateSA, dateFA As String
    
    'validate the SIP date
    If cboSIPDay.value = "" Or cboSIPMonth.value = "" Or cboSIPYear.value = "" Then
        'display a others required message if one of them has been seleted
        If Not cboSIPDay.value = "" Or Not cboSIPMonth.value = "" Or Not cboSIPYear.value = "" Then
            MsgBox "Please Enter the Full SIP date"
            Exit Sub
        Else
            dateSIP = ""
        End If
    Else
        dateSIP = cboSIPDay.value & "/" & cboSIPMonth.value & "/" & cboSIPYear.value
    End If
    
    'validate the SA date
    If cboSADay.value = "" Or cboSAMonth.value = "" Or cboSAYear.value = "" Then
        'display a others required message if one of them has been seleted
        If Not cboSADay.value = "" Or Not cboSAMonth.value = "" Or Not cboSAYear.value = "" Then
            MsgBox "Please Enter the Full Social Audit date"
            Exit Sub
        Else
            dateSA = ""
        End If
    Else
        dateSA = cboSADay.value & "/" & cboSAMonth.value & "/" & cboSAYear.value
    End If
    
    'validate the FA date
    If cboFADay.value = "" Or cboFAMonth.value = "" Or cboFAYear.value = "" Then
        'display a others required message if one of them has been seleted
        If Not cboFADay.value = "" Or Not cboFAMonth.value = "" Or Not cboFAYear.value = "" Then
            MsgBox "Please Enter the Full Financial Audit date"
            Exit Sub
        Else
            dateFA = ""
        End If
    Else
        dateFA = cboFADay.value & "/" & cboFAMonth.value & "/" & cboFAYear.value
    End If
    
    ActiveWorkbook.Worksheets("Physical Details").Activate
    
    'if there is no data on physical details for the current year then the
    'first empty cell is selected for inserting data
    Range("A9").Select
    Do
        If IsEmpty(activeCell) = False Then
            activeCell.Offset(1, 0).Select
        End If
    Loop Until IsEmpty(activeCell) = True
    
    'if the physical details has already been filled for this year then
    'choose the row to update
    For Each rcell In Worksheets("Physical Details").Range("A" & startingRow & ":A" & Worksheets("Physical Details").Cells(Rows.count, 1).End(xlUp).row + 1)
        'if there is already a row with the current year then set formDisplayMode to edit
        If rcell.Offset(0, 1).Text = Worksheets("General").Range("B5").Text Then
            rcell.Select
        End If
    Next rcell
    
    'insert the content one by one for the first page
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = Worksheets("General").Range("B5").Text
    activeCell.Offset(0, 2).value = chkFirstQuarter.value
    activeCell.Offset(0, 3).value = chkFirstMonth1.value
    activeCell.Offset(0, 4).value = chkSecondMonth1.value
    activeCell.Offset(0, 5).value = chkThirdMonth1.value
    activeCell.Offset(0, 6).value = chkFourthMonth1.value
    activeCell.Offset(0, 7).value = chkSecondQuarter.value
    activeCell.Offset(0, 8).value = chkFirstMonth2.value
    activeCell.Offset(0, 9).value = chkSecondMonth2.value
    activeCell.Offset(0, 10).value = chkThirdMonth2.value
    activeCell.Offset(0, 11).value = chkFourthMonth2.value
    activeCell.Offset(0, 12).value = dateSIP
    activeCell.Offset(0, 13).value = dateSA
    activeCell.Offset(0, 14).value = dateFA
    activeCell.Offset(0, 15).value = txtSMCMeetings.value
    activeCell.Offset(0, 16).value = txtMonitorRperson.value
    activeCell.Offset(0, 17).value = txtMonitorSsupervisor.value
    activeCell.Offset(0, 18).value = txtMonitorDEO.value
    activeCell.Offset(0, 19).value = txtMonitorMOEDOE.value
    activeCell.Offset(0, 20).value = txtMonitorOthers.value
    activeCell.Offset(0, 21).value = txtMedicalDistance.value
    activeCell.Offset(0, 22).value = chkFirstAid.value
    activeCell.Offset(0, 23).value = chkChildClubStatus.value
    activeCell.Offset(0, 24).value = returnNumber("V", cboMainWaterSource)
    activeCell.Offset(0, 25).value = txtTotalToilets.value
    activeCell.Offset(0, 26).value = txtGirlsToilets.value
    activeCell.Offset(0, 27).value = txtTeachersToilets.value
    activeCell.Offset(0, 28).value = txtWaterToilets.value
    activeCell.Offset(0, 29).value = chkUrinalTeachers.value
    activeCell.Offset(0, 30).value = chkUrinalBoys.value
    activeCell.Offset(0, 31).value = txtTotalBuildings.value
    activeCell.Offset(0, 32).value = txtPakkiBuildings.value
    activeCell.Offset(0, 33).value = txtKachhiBuildings.value
    activeCell.Offset(0, 34).value = returnNumber("W", cboCompoundType)
    activeCell.Offset(0, 35).value = txtRetrofittingNumber.value
    activeCell.Offset(0, 36).value = txtRehabilitationNumber.value
    activeCell.Offset(0, 37).value = chkPlaygroundAvailable.value
    activeCell.Offset(0, 38).value = chkEnoughSpace.value
    activeCell.Offset(0, 39).value = chkElectricityStatus.value
    activeCell.Offset(0, 40).value = txtTotalComputers.value
    activeCell.Offset(0, 41).value = txtTeachingComputers.value
    activeCell.Offset(0, 42).value = txtAdministrationComputers.value
    activeCell.Offset(0, 43).value = chkInternetStatus.value
    activeCell.Offset(0, 44).value = txtLibraryBooks.value
    activeCell.Offset(0, 45).value = txtLandBigha.value
    activeCell.Offset(0, 46).value = txtLandKattha.value
    activeCell.Offset(0, 47).value = txtLandDhur.value
    activeCell.Offset(0, 48).value = txtLandRopani.value
    activeCell.Offset(0, 49).value = txtLandAana.value
    activeCell.Offset(0, 50).value = txtLandPaisa.value
    activeCell.Offset(0, 51).value = txtLandDam.value
    
    'now the second page
    'the classroom status
    activeCell.Offset(0, 52).value = txtECDRooms.value
    activeCell.Offset(0, 53).value = txtECDPakkiRooms.value
    activeCell.Offset(0, 54).value = txtClass1Rooms.value
    activeCell.Offset(0, 55).value = txtClass1PakkiRooms.value
    activeCell.Offset(0, 56).value = txtClass2Rooms.value
    activeCell.Offset(0, 57).value = txtClass2PakkiRooms.value
    activeCell.Offset(0, 58).value = txtClass3Rooms.value
    activeCell.Offset(0, 59).value = txtClass3PakkiRooms.value
    activeCell.Offset(0, 60).value = txtClass4Rooms.value
    activeCell.Offset(0, 61).value = txtClass4PakkiRooms.value
    activeCell.Offset(0, 62).value = txtClass5Rooms.value
    activeCell.Offset(0, 63).value = txtClass5PakkiRooms.value
    activeCell.Offset(0, 64).value = txtClass6Rooms.value
    activeCell.Offset(0, 65).value = txtClass6PakkiRooms.value
    activeCell.Offset(0, 66).value = txtClass7Rooms.value
    activeCell.Offset(0, 67).value = txtClass7PakkiRooms.value
    activeCell.Offset(0, 68).value = txtClass8Rooms.value
    activeCell.Offset(0, 69).value = txtClass8PakkiRooms.value
    activeCell.Offset(0, 70).value = txtClass9Rooms.value
    activeCell.Offset(0, 71).value = txtClass9PakkiRooms.value
    activeCell.Offset(0, 72).value = txtClass10Rooms.value
    activeCell.Offset(0, 73).value = txtClass10PakkiRooms.value
    activeCell.Offset(0, 74).value = txtClass11Rooms.value
    activeCell.Offset(0, 75).value = txtClass11PakkiRooms.value
    activeCell.Offset(0, 76).value = txtClass12Rooms.value
    activeCell.Offset(0, 77).value = txtClass12PakkiRooms.value
    
    'now for the grant amount status
    activeCell.Offset(0, 78).value = txtGABooksECD.value
    activeCell.Offset(0, 79).value = txtGABooksPrimary.value
    activeCell.Offset(0, 80).value = txtGABooksLsec.value
    activeCell.Offset(0, 81).value = txtGABooksSec.value
    activeCell.Offset(0, 82).value = txtGABooksHsec.value
    activeCell.Offset(0, 83).value = txtGAScholarshipECD.value
    activeCell.Offset(0, 84).value = txtGAScholarshipPrimary.value
    activeCell.Offset(0, 85).value = txtGAScholarshipLsec.value
    activeCell.Offset(0, 86).value = txtGAScholarshipSec.value
    activeCell.Offset(0, 87).value = txtGAScholarshipHsec.value
    activeCell.Offset(0, 88).value = txtGAPCFECD.value
    activeCell.Offset(0, 89).value = txtGAPCFPrimary.value
    activeCell.Offset(0, 90).value = txtGAPCFLsec.value
    activeCell.Offset(0, 91).value = txtGAPCFSec.value
    activeCell.Offset(0, 92).value = txtGAPCFHsec.value
    activeCell.Offset(0, 93).value = txtGACASECD.value
    activeCell.Offset(0, 94).value = txtGACASPrimary.value
    activeCell.Offset(0, 95).value = txtGACASLsec.value
    activeCell.Offset(0, 96).value = txtGACASSec.value
    activeCell.Offset(0, 97).value = txtGACASHsec.value
    activeCell.Offset(0, 98).value = txtGAOperationalECD.value
    activeCell.Offset(0, 99).value = txtGAOperationalPrimary.value
    activeCell.Offset(0, 100).value = txtGAOperationalLsec.value
    activeCell.Offset(0, 101).value = txtGAOperationalSec.value
    activeCell.Offset(0, 102).value = txtGAOperationalHsec.value


    'now for the textbook,curriculum and other material details
    activeCell.Offset(0, 103).value = txtMaterialTextbookECD.value
    activeCell.Offset(0, 104).value = txtMaterialTextbookPrimary.value
    activeCell.Offset(0, 105).value = txtMaterialTextbookLsec.value
    activeCell.Offset(0, 106).value = txtMaterialTextbookSec.value
    activeCell.Offset(0, 107).value = txtMaterialTextbookHsec.value
    activeCell.Offset(0, 108).value = txtMaterialGuideECD.value
    activeCell.Offset(0, 109).value = txtMaterialGuidePrimary.value
    activeCell.Offset(0, 110).value = txtMaterialGuideLsec.value
    activeCell.Offset(0, 111).value = txtMaterialGuideSec.value
    activeCell.Offset(0, 112).value = txtMaterialGuideHsec.value
    activeCell.Offset(0, 113).value = txtMaterialChildMaterialECD.value
    activeCell.Offset(0, 114).value = txtMaterialChildMaterialPrimary.value
    activeCell.Offset(0, 115).value = txtMaterialChildMaterialLsec.value
    activeCell.Offset(0, 116).value = txtMaterialChildMaterialSec.value
    activeCell.Offset(0, 117).value = txtMaterialChildMaterialHsec.value
    activeCell.Offset(0, 118).value = txtMaterialBookCornerECD.value
    activeCell.Offset(0, 119).value = txtMaterialBookCornerPrimary.value
    activeCell.Offset(0, 120).value = txtMaterialBookCornerLsec.value
    activeCell.Offset(0, 121).value = txtMaterialBookCornerSec.value
    activeCell.Offset(0, 122).value = txtMaterialBookCornerHsec.value
    activeCell.Offset(0, 123).value = chkMaterialCurriculumAvailabilityECD.value
    activeCell.Offset(0, 124).value = chkMaterialCurriculumAvailabilityPrimary.value
    activeCell.Offset(0, 125).value = chkMaterialCurriculumAvailabilityLsec.value
    activeCell.Offset(0, 126).value = chkMaterialCurriculumAvailabilitySec.value
    activeCell.Offset(0, 127).value = chkMaterialCurriculumAvailabilityHsec.value
    activeCell.Offset(0, 128).value = txtMaterialLocalCurriculumECD.value
    activeCell.Offset(0, 129).value = txtMaterialLocalCurriculumPrimary.value
    activeCell.Offset(0, 130).value = txtMaterialLocalCurriculumLsec.value
    activeCell.Offset(0, 131).value = txtMaterialLocalCurriculumSec.value
    activeCell.Offset(0, 132).value = txtMaterialLocalCurriculumHsec.value
    activeCell.Offset(0, 133).value = txtMaterialReferenceECD.value
    activeCell.Offset(0, 134).value = txtMaterialReferencePrimary.value
    activeCell.Offset(0, 135).value = txtMaterialReferenceLsec.value
    activeCell.Offset(0, 136).value = txtMaterialReferenceSec.value
    activeCell.Offset(0, 137).value = txtMaterialReferenceHsec.value

    'now the new construction status for this year
    activeCell.Offset(0, 138).value = txtConstructionNBDEO.value
    activeCell.Offset(0, 139).value = txtConstructionNBLocal.value
    activeCell.Offset(0, 140).value = txtConstructionNBOthers.value
    activeCell.Offset(0, 141).value = txtConstructionRBDEO.value
    activeCell.Offset(0, 142).value = txtConstructionRBLocal.value
    activeCell.Offset(0, 143).value = txtConstructionRBOthers.value
    activeCell.Offset(0, 144).value = txtConstructionNCDEO.value
    activeCell.Offset(0, 145).value = txtConstructionNCLocal.value
    activeCell.Offset(0, 146).value = txtConstructionNCOthers.value
    activeCell.Offset(0, 147).value = txtConstructionRCDEO.value
    activeCell.Offset(0, 148).value = txtConstructionRCLocal.value
    activeCell.Offset(0, 149).value = txtConstructionRCOthers.value
    activeCell.Offset(0, 150).value = txtConstructionToiletDEO.value
    activeCell.Offset(0, 151).value = txtConstructionToiletLocal.value
    activeCell.Offset(0, 152).value = txtConstructionToiletOthers.value
    activeCell.Offset(0, 153).value = txtConstructionGTDEO.value
    activeCell.Offset(0, 154).value = txtConstructionGTLocal.value
    activeCell.Offset(0, 155).value = txtConstructionGTOthers.value
    activeCell.Offset(0, 156).value = txtConstructionWaterDEO.value
    activeCell.Offset(0, 157).value = txtConstructionWaterLocal.value
    activeCell.Offset(0, 158).value = txtConstructionWaterOthers.value
    activeCell.Offset(0, 159).value = txtConstructionBCDEO.value
    activeCell.Offset(0, 160).value = txtConstructionBCLocal.value
    activeCell.Offset(0, 161).value = txtConstructionBCOthers.value
    
    'school opening days status
    activeCell.Offset(0, 162).value = txtTotalOpenPlanned.value
    activeCell.Offset(0, 163).value = txtTotalOpenActual.value
    activeCell.Offset(0, 164).value = txtTeachingPlanned.value
    activeCell.Offset(0, 165).value = txtTeachingActual.value
    activeCell.Offset(0, 166).value = txtExamPlanned.value
    activeCell.Offset(0, 167).value = txtExamActual.value
    activeCell.Offset(0, 168).value = txtExtraCurricularPlanned.value
    activeCell.Offset(0, 169).value = txtExtraCurricularActual.value
    activeCell.Offset(0, 170).value = txtHolidaysPlanned.value
    activeCell.Offset(0, 171).value = txtHolidaysActual.value
    activeCell.Offset(0, 172).value = txtFestivalsPlanned.value
    activeCell.Offset(0, 173).value = txtFestivalsActual.value
    activeCell.Offset(0, 174).value = txtOthersPlanned.value
    activeCell.Offset(0, 175).value = txtOthersActual.value

    'for the additional classroom status
    activeCell.Offset(0, 176).value = txtNoHTRoom.value
    activeCell.Offset(0, 177).value = txtNoComputerRoom.value
    activeCell.Offset(0, 178).value = txtNoStaffRoom.value
    activeCell.Offset(0, 179).value = txtNoStoreRoom.value
    activeCell.Offset(0, 180).value = txtNoSportsRoom.value
    activeCell.Offset(0, 181).value = txtNoLibraryRoom.value
    activeCell.Offset(0, 182).value = txtNoScienceLabRoom.value
    activeCell.Offset(0, 183).value = txtNoUnusedRoom.value

    Unload Me
    MsgBox "Physical Information Saved!"
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update that the physical details has been filled in the summary
    Worksheets("Buttons").Range("J21").value = "Yes"
End Sub


Private Sub cmdPrevious_Click()
    'display the first page,hide the secong page and disable the previous button
    'if user is on the second page
    If frmGeneralPhysical.mpGeneralPhysical.value = 1 Then
        frmGeneralPhysical.mpGeneralPhysical.Pages(0).Visible = True
        frmGeneralPhysical.mpGeneralPhysical.Pages(1).Visible = False
        frmGeneralPhysical.mpGeneralPhysical.value = 0

        'disable the previous button
        frmGeneralPhysical.cmdPrevious.Enabled = False
        Exit Sub
    End If
End Sub






Private Sub txtClass10PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass10Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass11PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass11Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass12PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass12Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass1PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass1Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtClass2PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass2Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtClass3PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass3Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtClass4PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass4Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtClass5PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass5Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtClass6PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass6Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass7PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass7Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass8PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass8Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtClass9PakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtClass9Rooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionBCDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionBCLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionBCOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionGTDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionGTLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionGTOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNBDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNBLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNBOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNCDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNCLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionNCOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRBDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRBLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRBOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRCDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRCLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionRCOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionToiletDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionToiletLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionToiletOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionWaterDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionWaterLocal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtConstructionWaterOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub




Private Sub txtECDPakkiRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtECDRooms_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtExamActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtExamPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtExtraCurricularActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtExtraCurricularPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtFestivalsActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtFestivalsPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGABooksECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGABooksHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGABooksLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGABooksPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtGABooksSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGACASECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGACASHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGACASLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGACASPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGACASSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAOperationalECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAOperationalHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAOperationalLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAOperationalPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAOperationalSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAPCFECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAPCFHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAPCFLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAPCFPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAPCFSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAScholarshipECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAScholarshipHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAScholarshipLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAScholarshipPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGAScholarshipSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtHolidaysActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtHolidaysPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtKachhiBuildings_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandAana_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandBigha_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandDam_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandDhur_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandKattha_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandPaisa_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLandRopani_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtAdministrationComputers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtLibraryBooks_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtMaterialBookCornerECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialBookCornerHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialBookCornerLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialBookCornerPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialBookCornerSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialChildMaterialECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialChildMaterialHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialChildMaterialLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialChildMaterialPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialChildMaterialSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialLocalCurriculumECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialLocalCurriculumHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialLocalCurriculumLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialLocalCurriculumPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialLocalCurriculumSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialGuideECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialGuideHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialGuideLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialGuidePrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialGuideSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialReferenceECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialReferenceHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialReferenceLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialReferencePrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialReferenceSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialTextbookECD_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialTextbookHsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialTextbookLsec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialTextbookPrimary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMaterialTextbookSec_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMedicalDistance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMonitorDEO_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMonitorMOEDOE_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtMonitorOthers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMonitorRperson_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMonitorSsupervisor_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub




Private Sub txtNoComputerRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtNoHTRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub





Private Sub txtNoLibraryRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtNoScienceLabRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtNoSportsRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtNoStaffRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtNoStoreRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtNoUnusedRoom_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtOthersActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtOthersPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtPakkiBuildings_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtRehabilitationNumber_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtRetrofittingNumber_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtSMCMeetings_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTeachingActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTeachingComputers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTeachingPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTotalBuildings_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtTotalComputers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtTotalOpenActual_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTotalOpenPlanned_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTotalToilets_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGirlsToilets_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtTeachersToilets_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtWaterToilets_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub UserForm_Initialize()
    'disable form elements if the school type is private i.e. 2
        If Worksheets("General").Range("E9").value = 2 Then
            frameGovernementFundStatus.Enabled = False
            frameRetrofittingStatus.Enabled = False
            frameGrantAmountStatus.Enabled = False
            
            'disable the DEO fields in this years construction
            txtConstructionNBDEO.Enabled = False
            txtConstructionRBDEO.Enabled = False
            txtConstructionNCDEO.Enabled = False
            txtConstructionRCDEO.Enabled = False
            txtConstructionToiletDEO.Enabled = False
            txtConstructionGTDEO.Enabled = False
            txtConstructionWaterDEO.Enabled = False
            txtConstructionBCDEO.Enabled = False
        End If
    'for initializing year
        With Me.cboSIPYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
        With Me.cboSAYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
        With Me.cboFAYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
        
    'for initializing month
        With Me.cboSIPMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
        With Me.cboSAMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
        With Me.cboFAMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With

    'for initializing day
        With Me.cboSIPDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        With Me.cboSADay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        With Me.cboFADay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        
    'for initializing water source
        With Me.cboMainWaterSource
            .list() = Application.Transpose(Worksheets("Information").Range("V2:V" & Worksheets("Information").Cells(Rows.count, 22).End(xlUp).row).value)
        End With
    
    'initialize the year in the new construction and rehabilitation frame label
    frameNewConstructionStatus.Caption = "New Construction and Rehabilitation(" & Worksheets("General").Range("B5").value & ")"
    
    'for initializing compound type
        With Me.cboCompoundType
            .list() = Application.Transpose(Worksheets("Information").Range("W2:W" & Worksheets("Information").Cells(Rows.count, 23).End(xlUp).row).value)
        End With
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form opened for editing
Public Sub initializeValues(ByVal rowNo As Double)
    Dim rcell As Range
    'As the rowNo has already been determined and passed to this procedure
    'we dont need to apply any loops or condition checking to determine the row
    Set rcell = Worksheets("Physical Details").Range("A" & rowNo)

    'insert the content one by one for the first page
    Me.chkFirstQuarter.value = CBool(rcell.Offset(0, 2).value)
    Me.chkFirstMonth1.value = CBool(rcell.Offset(0, 3).value)
    Me.chkSecondMonth1.value = CBool(rcell.Offset(0, 4).value)
    Me.chkThirdMonth1.value = CBool(rcell.Offset(0, 5).value)
    Me.chkFourthMonth1.value = CBool(rcell.Offset(0, 6).value)
    Me.chkSecondQuarter.value = CBool(rcell.Offset(0, 7).value)
    Me.chkFirstMonth2.value = CBool(rcell.Offset(0, 8).value)
    Me.chkSecondMonth2.value = CBool(rcell.Offset(0, 9).value)
    Me.chkThirdMonth2.value = CBool(rcell.Offset(0, 10).value)
    Me.chkFourthMonth2.value = CBool(rcell.Offset(0, 11).value)
    'we cannot split date by "/" if none have been defined
    If Len(rcell.Offset(0, 12).value) > 0 Then
        Me.cboSIPDay.value = Split(rcell.Offset(0, 12).value, "/")(0)
        Me.cboSIPMonth.value = Split(rcell.Offset(0, 12).value, "/")(1)
        Me.cboSIPYear.value = Split(rcell.Offset(0, 12).value, "/")(2)
    End If
    If Len(rcell.Offset(0, 13).value) > 0 Then
        Me.cboSADay.value = Split(rcell.Offset(0, 13).value, "/")(0)
        Me.cboSAMonth.value = Split(rcell.Offset(0, 13).value, "/")(1)
        Me.cboSAYear.value = Split(rcell.Offset(0, 13).value, "/")(2)
    End If
    If Len(rcell.Offset(0, 14).value) > 0 Then
        Me.cboFADay.value = Split(rcell.Offset(0, 14).value, "/")(0)
        Me.cboFAMonth.value = Split(rcell.Offset(0, 14).value, "/")(1)
        Me.cboFAYear.value = Split(rcell.Offset(0, 14).value, "/")(2)
    End If
    Me.txtSMCMeetings.value = rcell.Offset(0, 15).value
    Me.txtMonitorRperson.value = rcell.Offset(0, 16).value
    Me.txtMonitorSsupervisor.value = rcell.Offset(0, 17).value
    Me.txtMonitorDEO.value = rcell.Offset(0, 18).value
    Me.txtMonitorMOEDOE.value = rcell.Offset(0, 19).value
    Me.txtMonitorOthers.value = rcell.Offset(0, 20).value
    Me.txtMedicalDistance.value = rcell.Offset(0, 21).value
    Me.chkFirstAid.value = CBool(rcell.Offset(0, 22).value)
    Me.chkChildClubStatus.value = CBool(rcell.Offset(0, 23).value)
    Me.cboMainWaterSource.value = returnString("V", rcell.Offset(0, 24).value)
    Me.txtTotalToilets.value = rcell.Offset(0, 25).value
    Me.txtGirlsToilets.value = rcell.Offset(0, 26).value
    Me.txtTeachersToilets.value = rcell.Offset(0, 27).value
    Me.txtWaterToilets.value = rcell.Offset(0, 28).value

    Me.chkUrinalTeachers.value = CBool(rcell.Offset(0, 29).value)
    Me.chkUrinalBoys.value = CBool(rcell.Offset(0, 30).value)
    Me.txtTotalBuildings.value = rcell.Offset(0, 31).value
    Me.txtPakkiBuildings.value = rcell.Offset(0, 32).value
    Me.txtKachhiBuildings.value = rcell.Offset(0, 33).value
    Me.cboCompoundType.value = returnString("W", rcell.Offset(0, 34).value)
    Me.txtRetrofittingNumber.value = rcell.Offset(0, 35).value
    Me.txtRehabilitationNumber.value = rcell.Offset(0, 36).value
    Me.chkPlaygroundAvailable.value = CBool(rcell.Offset(0, 37).value)
    Me.chkEnoughSpace.value = CBool(rcell.Offset(0, 38).value)
    Me.chkElectricityStatus.value = CBool(rcell.Offset(0, 39).value)
    Me.txtTotalComputers.value = rcell.Offset(0, 40).value
    Me.txtTeachingComputers.value = rcell.Offset(0, 41).value
    Me.txtAdministrationComputers.value = rcell.Offset(0, 42).value
    Me.chkInternetStatus.value = CBool(rcell.Offset(0, 43).value)
    Me.txtLibraryBooks.value = rcell.Offset(0, 44).value
    Me.txtLandBigha.value = rcell.Offset(0, 45).value
    Me.txtLandKattha.value = rcell.Offset(0, 46).value
    Me.txtLandDhur.value = rcell.Offset(0, 47).value
    Me.txtLandRopani.value = rcell.Offset(0, 48).value
    Me.txtLandAana.value = rcell.Offset(0, 49).value
    Me.txtLandPaisa.value = rcell.Offset(0, 50).value
    Me.txtLandDam.value = rcell.Offset(0, 51).value
    
    'now the second page
    'the classroom status
    Me.txtECDRooms.value = rcell.Offset(0, 52).value
    Me.txtECDPakkiRooms.value = rcell.Offset(0, 53).value
    Me.txtClass1Rooms.value = rcell.Offset(0, 54).value
    Me.txtClass1PakkiRooms.value = rcell.Offset(0, 55).value
    Me.txtClass2Rooms.value = rcell.Offset(0, 56).value
    Me.txtClass2PakkiRooms.value = rcell.Offset(0, 57).value
    Me.txtClass3Rooms.value = rcell.Offset(0, 58).value
    Me.txtClass3PakkiRooms.value = rcell.Offset(0, 59).value
    Me.txtClass4Rooms.value = rcell.Offset(0, 60).value
    Me.txtClass4PakkiRooms.value = rcell.Offset(0, 61).value
    Me.txtClass5Rooms.value = rcell.Offset(0, 62).value
    Me.txtClass5PakkiRooms.value = rcell.Offset(0, 63).value
    Me.txtClass6Rooms.value = rcell.Offset(0, 64).value
    Me.txtClass6PakkiRooms.value = rcell.Offset(0, 65).value
    Me.txtClass7Rooms.value = rcell.Offset(0, 66).value
    Me.txtClass7PakkiRooms.value = rcell.Offset(0, 67).value
    Me.txtClass8Rooms.value = rcell.Offset(0, 68).value
    Me.txtClass8PakkiRooms.value = rcell.Offset(0, 69).value
    Me.txtClass9Rooms.value = rcell.Offset(0, 70).value
    Me.txtClass9PakkiRooms.value = rcell.Offset(0, 71).value
    Me.txtClass10Rooms.value = rcell.Offset(0, 72).value
    Me.txtClass10PakkiRooms.value = rcell.Offset(0, 73).value
    Me.txtClass11Rooms.value = rcell.Offset(0, 74).value
    Me.txtClass11PakkiRooms.value = rcell.Offset(0, 75).value
    Me.txtClass12Rooms.value = rcell.Offset(0, 76).value
    Me.txtClass12PakkiRooms.value = rcell.Offset(0, 77).value
    
    
    'now for the grant amount status
    Me.txtGABooksECD.value = rcell.Offset(0, 78).value
    Me.txtGABooksPrimary.value = rcell.Offset(0, 79).value
    Me.txtGABooksLsec.value = rcell.Offset(0, 80).value
    Me.txtGABooksSec.value = rcell.Offset(0, 81).value
    Me.txtGABooksHsec.value = rcell.Offset(0, 82).value
    Me.txtGAScholarshipECD.value = rcell.Offset(0, 83).value
    Me.txtGAScholarshipPrimary.value = rcell.Offset(0, 84).value
    Me.txtGAScholarshipLsec.value = rcell.Offset(0, 85).value
    Me.txtGAScholarshipSec.value = rcell.Offset(0, 86).value
    Me.txtGAScholarshipHsec.value = rcell.Offset(0, 87).value
    Me.txtGAPCFECD.value = rcell.Offset(0, 88).value
    Me.txtGAPCFPrimary.value = rcell.Offset(0, 89).value
    Me.txtGAPCFLsec.value = rcell.Offset(0, 90).value
    Me.txtGAPCFSec.value = rcell.Offset(0, 91).value
    Me.txtGAPCFHsec.value = rcell.Offset(0, 92).value
    Me.txtGACASECD.value = rcell.Offset(0, 93).value
    Me.txtGACASPrimary.value = rcell.Offset(0, 94).value
    Me.txtGACASLsec.value = rcell.Offset(0, 95).value
    Me.txtGACASSec.value = rcell.Offset(0, 96).value
    Me.txtGACASHsec.value = rcell.Offset(0, 97).value
    Me.txtGAOperationalECD.value = rcell.Offset(0, 98).value
    Me.txtGAOperationalPrimary.value = rcell.Offset(0, 99).value
    Me.txtGAOperationalLsec.value = rcell.Offset(0, 100).value
    Me.txtGAOperationalSec.value = rcell.Offset(0, 101).value
    Me.txtGAOperationalHsec.value = rcell.Offset(0, 102).value
    
    'now for the textbook,curriculum and other material details
    Me.txtMaterialTextbookECD.value = rcell.Offset(0, 103).value
    Me.txtMaterialTextbookPrimary.value = rcell.Offset(0, 104).value
    Me.txtMaterialTextbookLsec.value = rcell.Offset(0, 105).value
    Me.txtMaterialTextbookSec.value = rcell.Offset(0, 106).value
    Me.txtMaterialTextbookHsec.value = rcell.Offset(0, 107).value
    Me.txtMaterialGuideECD.value = rcell.Offset(0, 108).value
    Me.txtMaterialGuidePrimary.value = rcell.Offset(0, 109).value
    Me.txtMaterialGuideLsec.value = rcell.Offset(0, 110).value
    Me.txtMaterialGuideSec.value = rcell.Offset(0, 111).value
    Me.txtMaterialGuideHsec.value = rcell.Offset(0, 112).value
    Me.txtMaterialChildMaterialECD.value = rcell.Offset(0, 113).value
    Me.txtMaterialChildMaterialPrimary.value = rcell.Offset(0, 114).value
    Me.txtMaterialChildMaterialLsec.value = rcell.Offset(0, 115).value
    Me.txtMaterialChildMaterialSec.value = rcell.Offset(0, 116).value
    Me.txtMaterialChildMaterialHsec.value = rcell.Offset(0, 117).value
    Me.txtMaterialBookCornerECD.value = rcell.Offset(0, 118).value
    Me.txtMaterialBookCornerPrimary.value = rcell.Offset(0, 119).value
    Me.txtMaterialBookCornerLsec.value = rcell.Offset(0, 120).value
    Me.txtMaterialBookCornerSec.value = rcell.Offset(0, 121).value
    Me.txtMaterialBookCornerHsec.value = rcell.Offset(0, 122).value
    Me.chkMaterialCurriculumAvailabilityECD.value = CBool(rcell.Offset(0, 123).value)
    Me.chkMaterialCurriculumAvailabilityPrimary.value = CBool(rcell.Offset(0, 124).value)
    Me.chkMaterialCurriculumAvailabilityLsec.value = CBool(rcell.Offset(0, 125).value)
    Me.chkMaterialCurriculumAvailabilitySec.value = CBool(rcell.Offset(0, 126).value)
    Me.chkMaterialCurriculumAvailabilityHsec.value = CBool(rcell.Offset(0, 127).value)
    Me.txtMaterialLocalCurriculumECD.value = rcell.Offset(0, 128).value
    Me.txtMaterialLocalCurriculumPrimary.value = rcell.Offset(0, 129).value
    Me.txtMaterialLocalCurriculumLsec.value = rcell.Offset(0, 130).value
    Me.txtMaterialLocalCurriculumSec.value = rcell.Offset(0, 131).value
    Me.txtMaterialLocalCurriculumHsec.value = rcell.Offset(0, 132).value
    Me.txtMaterialReferenceECD.value = rcell.Offset(0, 133).value
    Me.txtMaterialReferencePrimary.value = rcell.Offset(0, 134).value
    Me.txtMaterialReferenceLsec.value = rcell.Offset(0, 135).value
    Me.txtMaterialReferenceSec.value = rcell.Offset(0, 136).value
    Me.txtMaterialReferenceHsec.value = rcell.Offset(0, 137).value
    
    'now the new construction status for this year
    Me.txtConstructionNBDEO.value = rcell.Offset(0, 138).value
    Me.txtConstructionNBLocal.value = rcell.Offset(0, 139).value
    Me.txtConstructionNBOthers.value = rcell.Offset(0, 140).value
    Me.txtConstructionRBDEO.value = rcell.Offset(0, 141).value
    Me.txtConstructionRBLocal.value = rcell.Offset(0, 142).value
    Me.txtConstructionRBOthers.value = rcell.Offset(0, 143).value
    Me.txtConstructionNCDEO.value = rcell.Offset(0, 144).value
    Me.txtConstructionNCLocal.value = rcell.Offset(0, 145).value
    Me.txtConstructionNCOthers.value = rcell.Offset(0, 146).value
    Me.txtConstructionRCDEO.value = rcell.Offset(0, 147).value
    Me.txtConstructionRCLocal.value = rcell.Offset(0, 148).value
    Me.txtConstructionRCOthers.value = rcell.Offset(0, 149).value
    Me.txtConstructionToiletDEO.value = rcell.Offset(0, 150).value
    Me.txtConstructionToiletLocal.value = rcell.Offset(0, 151).value
    Me.txtConstructionToiletOthers.value = rcell.Offset(0, 152).value
    Me.txtConstructionGTDEO.value = rcell.Offset(0, 153).value
    Me.txtConstructionGTLocal.value = rcell.Offset(0, 154).value
    Me.txtConstructionGTOthers.value = rcell.Offset(0, 155).value
    Me.txtConstructionWaterDEO.value = rcell.Offset(0, 156).value
    Me.txtConstructionWaterLocal.value = rcell.Offset(0, 157).value
    Me.txtConstructionWaterOthers.value = rcell.Offset(0, 158).value
    Me.txtConstructionBCDEO.value = rcell.Offset(0, 159).value
    Me.txtConstructionBCLocal.value = rcell.Offset(0, 160).value
    Me.txtConstructionBCOthers.value = rcell.Offset(0, 161).value
    
    'school opening days status
    Me.txtTotalOpenPlanned.value = rcell.Offset(0, 162).value
    Me.txtTotalOpenActual.value = rcell.Offset(0, 163).value
    Me.txtTeachingPlanned.value = rcell.Offset(0, 164).value
    Me.txtTeachingActual.value = rcell.Offset(0, 165).value
    Me.txtExamPlanned.value = rcell.Offset(0, 166).value
    Me.txtExamActual.value = rcell.Offset(0, 167).value
    Me.txtExtraCurricularPlanned.value = rcell.Offset(0, 168).value
    Me.txtExtraCurricularActual.value = rcell.Offset(0, 169).value
    Me.txtHolidaysPlanned.value = rcell.Offset(0, 170).value
    Me.txtHolidaysActual.value = rcell.Offset(0, 171).value
    Me.txtFestivalsPlanned.value = rcell.Offset(0, 172).value
    Me.txtFestivalsActual.value = rcell.Offset(0, 173).value
    Me.txtOthersPlanned.value = rcell.Offset(0, 174).value
    Me.txtOthersActual.value = rcell.Offset(0, 175).value
    
    'for the additional classroom status information
    Me.txtNoHTRoom.value = rcell.Offset(0, 176).value
    Me.txtNoComputerRoom.value = rcell.Offset(0, 177).value
    Me.txtNoStaffRoom.value = rcell.Offset(0, 178).value
    Me.txtNoStoreRoom.value = rcell.Offset(0, 179).value
    Me.txtNoSportsRoom.value = rcell.Offset(0, 180).value
    Me.txtNoLibraryRoom.value = rcell.Offset(0, 181).value
    Me.txtNoScienceLabRoom.value = rcell.Offset(0, 182).value
    Me.txtNoUnusedRoom.value = rcell.Offset(0, 183).value
    
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim reply As VbMsgBoxResult
    If CloseMode = 0 Then
        'If you want to prevent closing UserForm by Close (|fffd|) button in the right-top corner of the UserForm, just uncomment the following line:
        reply = MsgBox("Are you sure you want to quit? Any Unsaved changes will be Discarded!", vbYesNo, "Save Data")
        If Not reply = vbYes Then
            Cancel = True
        End If
    End If
End Sub
Attribute VB_Name = "frmReportList"
Attribute VB_Base = "0{91D9ED72-886A-4A39-9316-C51524E4177C}{E34B6B86-54E1-4B86-8EC5-F0EA6265B83B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cboClass_Change()
    If Not Me.cboClass.ListIndex = -1 Then
        'enable the filter by student for student tracking card and student marksheet
        'year needs to be selected for student marksheet,default year is considered for tracking card
        If (Me.cboReportList.ListIndex = 9) Then
            Call initialiseByStudentCombo(CInt(Worksheets("General").Range("B5").value), CInt(Me.cboClass.value))
        ElseIf (Me.cboReportList.ListIndex = 7 And (Not Me.cboYear.ListIndex = -1)) Then
            Call initialiseByStudentCombo(CInt(Me.cboYear.value), CInt(Me.cboClass.value))
        End If
    Else
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
    End If
End Sub

Private Sub cboReportList_Change()
    'disable the filters depending on the report type
    'for the indicator report
    If Me.cboReportList.ListIndex = 0 Then
        Me.cboYear.Enabled = False
        Me.cboYear.ListIndex = -1
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = False
        Me.cboCaste.ListIndex = -1
        Me.cboGender.Enabled = False
        Me.cboGender.ListIndex = -1
        Me.cboDisability.Enabled = False
        Me.cboDisability.ListIndex = -1
    'score report
    ElseIf Me.cboReportList.ListIndex = 1 Then
        Me.cboYear.Enabled = True
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = False
        Me.cboCaste.ListIndex = -1
        Me.cboGender.Enabled = False
        Me.cboGender.ListIndex = -1
        Me.cboDisability.Enabled = False
        Me.cboDisability.ListIndex = -1
    'scholarship report
    ElseIf Me.cboReportList.ListIndex = 2 Then
        Me.cboYear.Enabled = False
        Me.cboYear.ListIndex = -1
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = False
        Me.cboCaste.ListIndex = -1
        Me.cboGender.Enabled = False
        Me.cboGender.ListIndex = -1
        Me.cboDisability.Enabled = False
        Me.cboDisability.ListIndex = -1
    'teacher report
    ElseIf Me.cboReportList.ListIndex = 3 Then
        Me.cboYear.Enabled = True
        Me.cboClass.ListIndex = -1
        Me.cboClass.Enabled = False
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = True
        Me.cboGender.Enabled = True
        Me.cboDisability.Enabled = True
    'Attendance Report
    ElseIf Me.cboReportList.ListIndex = 4 Then
        Me.cboYear.Enabled = True
        Me.cboClass.Enabled = False
        Me.cboClass.ListIndex = -1
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = False
        Me.cboCaste.ListIndex = -1
        Me.cboGender.Enabled = False
        Me.cboGender.ListIndex = -1
        Me.cboDisability.Enabled = False
        Me.cboDisability.ListIndex = -1
    'student Details
    ElseIf Me.cboReportList.ListIndex = 5 Then
        Me.cboYear.Enabled = True
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = True
        Me.cboGender.Enabled = True
        Me.cboDisability.Enabled = True
    'teacher profile
    ElseIf Me.cboReportList.ListIndex = 6 Then
        Me.cboYear.Enabled = True
        Me.cboClass.ListIndex = -1
        Me.cboClass.Enabled = False
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = True
        Me.cboGender.Enabled = True
        Me.cboDisability.Enabled = True
    'student Marksheet
    ElseIf Me.cboReportList.ListIndex = 7 Then
        Me.cboYear.Enabled = True
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = True
        Me.cboGender.Enabled = True
        Me.cboDisability.Enabled = True
    'Physical report
    ElseIf Me.cboReportList.ListIndex = 8 Then
        Me.cboYear.Enabled = True
        Me.cboClass.Enabled = False
        Me.cboClass.ListIndex = -1
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = False
        Me.cboCaste.ListIndex = -1
        Me.cboGender.Enabled = False
        Me.cboGender.ListIndex = -1
        Me.cboDisability.Enabled = False
        Me.cboDisability.ListIndex = -1
    'student tracking card
    ElseIf Me.cboReportList.ListIndex = 9 Then
        Me.cboYear.Enabled = False
        Me.cboYear.ListIndex = -1
        Me.cboClass.Enabled = True
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
        Me.cboCaste.Enabled = True
        Me.cboGender.Enabled = True
        Me.cboDisability.Enabled = True
    End If
End Sub


Private Sub cboYear_Change()
    If Not Me.cboClass.ListIndex = -1 Then
        'enable the filter by student for student tracking card and student marksheet
        'year needs to be selected for student marksheet,default year is considered for tracking card
        If (Me.cboReportList.ListIndex = 9) Then
            Call initialiseByStudentCombo(CInt(Worksheets("General").Range("B5").value), CInt(Me.cboClass.value))
        ElseIf (Me.cboReportList.ListIndex = 7 And (Not Me.cboYear.ListIndex = -1)) Then
            Call initialiseByStudentCombo(CInt(Me.cboYear.value), CInt(Me.cboClass.value))
        End If
    Else
        Me.cboStudent.Enabled = False
        Me.cboStudent.ListIndex = -1
    End If
End Sub

Private Sub cmdGenerateReport_Click()
    
    'validate report
     If cboReportList.value = "" Then
        MsgBox "Please select the type of Report!"
        Exit Sub
    End If
    
    'if year must be selected for Student,Teacher and Score reports
    If cboYear.ListIndex = -1 And cboYear.Enabled = True Then
        MsgBox "Please select the year to generate Report!"
        Exit Sub
    End If
    
    Dim selectedClass As Integer
    If cboClass.Enabled = True And cboClass.value = "" Then
        MsgBox "Please Select class!"
        Exit Sub
    ElseIf (Not cboClass.ListIndex = -1) Then
        selectedClass = CInt(cboClass.value)
    End If
    
    Dim selectedCaste As Integer
    Dim selectedGender As Integer
    Dim selectedDisability As Integer
    
    
    selectedCaste = cboCaste.ListIndex + 1
    selectedGender = cboGender.ListIndex + 1
    selectedDisability = cboDisability.ListIndex + 1
    
    
    Dim selectedStudent As String
    If cboStudent.ListIndex = -1 Then
        selectedStudent = ""
    Else
        selectedStudent = Left(Split(cboStudent.value, "(")(1), 5)
    End If
    
    Me.Hide
    
    If Me.cboReportList.value = "Student Details" Then
        Call generateStudentReport(cboYear.value, selectedClass, selectedCaste, selectedGender, selectedDisability)
    ElseIf Me.cboReportList.value = "Teacher" Then
        Call generateTeacherReport(cboYear.value, selectedCaste, selectedGender, selectedDisability)
    ElseIf Me.cboReportList.value = "Indicator" Then
        Call generateIndicatorReport(selectedClass)
    ElseIf Me.cboReportList.value = "Scholarship" Then
        Call generateScholarshipReport(selectedClass)
    ElseIf Me.cboReportList.value = "Score" Then
        Call generateScoreReport(cboYear.value, selectedClass)
    ElseIf Me.cboReportList = "Attendance" Then
        Call generateAttendanceReport(cboYear.value)
    ElseIf Me.cboReportList = "Teacher Profile" Then
        Call generateTeacherProfile(cboYear.value, selectedCaste, selectedGender, selectedDisability)
    ElseIf Me.cboReportList = "Physical Report" Then
        Call generatePhysicalReport(cboYear.value)
    ElseIf Me.cboReportList = "Student Tracking Card" Then
        Call generateStudentTrackingCard(selectedClass, selectedStudent, selectedCaste, selectedGender, selectedDisability)
    ElseIf Me.cboReportList = "Student Marksheet" Then
        Call generateStudentMarksheet(cboYear.value, selectedClass, selectedStudent, selectedCaste, selectedGender, selectedDisability)
    End If
End Sub

Private Sub frameReports_Click()

End Sub

Private Sub UserForm_Initialize()
    'initialize the list of reports
    With Me.cboReportList
        .list() = Application.Transpose(Worksheets("Information").Range("AB2:AB" & Worksheets("Information").Cells(Rows.count, 28).End(xlUp).row).value)
    End With
    
    'initialize the classes
    With Me.cboClass
        For i = 1 To 12
            .AddItem i
        Next i
    End With
    
    'initialise the year
    With Me.cboYear
        For i = 2070 To 2081
            .AddItem i
        Next i
    End With
    
    'for initialising caste
    With Me.cboCaste
        .list() = Application.Transpose(Worksheets("Information").Range("C2:C" & Worksheets("Information").Cells(Rows.count, 3).End(xlUp).row).value)
    End With
    
    'for initializing Gender
    With Me.cboGender
        .AddItem "Female"
        .AddItem "Male"
    End With
    
    'for initialising disability
    With Me.cboDisability
        .list() = Application.Transpose(Worksheets("Information").Range("B2:B" & Worksheets("Information").Cells(Rows.count, 2).End(xlUp).row).value)
    End With
    
End Sub

'procedure that generates teachers report depending on the year passed
Private Sub generateTeacherReport(ByVal year As Integer, ByVal selectedCaste As Integer, ByVal selectedGender As Integer, selectedDisability As Integer)
    Dim headerList(0 To 42) As String
    Dim sheetName As String
    Dim reportStartingRow As Integer
    
    'set the name of the newly created sheet
    sheetName = "Teacher Report"
    
    'starting row from which the rows will be filled in the new report
    reportStartingRow = 5
    
    headerList(0) = "School ID"
    headerList(1) = "Year"
    headerList(2) = "Teacher ID"
    headerList(3) = "Name"
    headerList(4) = "Sex"
    headerList(5) = "Caste/Ethnicity"
    headerList(6) = "Nationality"
    headerList(7) = "DOB(Citizenship)"
    headerList(8) = "DOB(Certificate)"
    headerList(9) = "DOB(Others)"
    headerList(10) = "Citizenship No"
    headerList(11) = "Issue District"
    headerList(12) = "Father's Name"
    headerList(13) = "Mother's Name"
    headerList(14) = "Spouse's Name"
    headerList(15) = "Will Person"
    headerList(16) = "Mothertongue"
    headerList(17) = "Disability"
    headerList(18) = "Email"
    headerList(19) = "Telephone/Mobile No"
    headerList(20) = "Current Level"
    headerList(21) = "Rank"
    headerList(22) = "Position"
    headerList(23) = "Teacher Type"
    headerList(24) = "Teaching Language"
    headerList(25) = "License No"
    headerList(26) = "Insurance No"
    headerList(27) = "PF Account No"
    headerList(28) = "Trk No"
    headerList(29) = "Bank Account No"
    headerList(30) = "Bank Name"
    headerList(31) = "Current Qualification"
    headerList(32) = "Monthly Salary"
    headerList(33) = "Grade"
    headerList(34) = "Amount"
    headerList(35) = "Head Teacher Allowance"
    headerList(36) = "Remote Allowance"
    headerList(37) = "Insurance"
    headerList(38) = "Mahangi Allowance"
    headerList(39) = "Dress Allowance"
    headerList(40) = "Festival Allowance"
    headerList(41) = "Provident Fund"
    headerList(42) = "Citizen Investment Trust"
    
    recreateSheet sheetName
    ActiveSheet.Range("A" & (reportStartingRow - 1)).Activate
    
    'change cell format of the regid column to text
    Worksheets(sheetName).Columns(1).NumberFormat = "@"
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
    
    'Add header to the report
    For i = 0 To UBound(headerList)
        activeCell.Offset(0, i).value = headerList(i)
        activeCell.Offset(0, i).Borders.LineStyle = XlLineStyle.xlContinuous
        activeCell.Offset(0, i).Interior.Color = RGB(217, 217, 217)
    Next i
    
     'now add information about each teacher
    For Each rcell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Personal Info").Cells(Rows.count, 2).End(xlUp).row + 1)
        If (rcell.Offset(0, 1).value - year) = 0 Then
            'filter the teacher by filter parameters
            If (selectedCaste = 0 Or (Not selectedCaste = 0 And (rcell.Offset(0, 4).value - selectedCaste) = 0)) And (selectedGender = 0 Or (Not selectedGender = 0 And (rcell.Offset(0, 3) - selectedGender) = 0)) And (selectedDisability = 0 Or (Not selectedDisability = 0 And (rcell.Offset(0, 16) - selectedDisability) = 0)) Then
                'identify the first empty cell
                Range("A" & reportStartingRow).Select
                Do
                    If IsEmpty(activeCell) = False Then
                        activeCell.Offset(1, 0).Select
                    End If
                Loop Until IsEmpty(activeCell) = True
                
                'now retrieve the teachers info into the report
                activeCell.Offset(0, 0).value = rcell.Offset(0, -1).Text
                activeCell.Offset(0, 1).value = rcell.Offset(0, 1).value
                activeCell.Offset(0, 2).value = rcell.Offset(0, 0).value
                activeCell.Offset(0, 3).value = rcell.Offset(0, 2).value
                
                'identify sex
                If rcell.Offset(0, 3).value = 1 Then
                    activeCell.Offset(0, 4).value = "Female"
                ElseIf rcell.Offset(0, 3).value = 2 Then
                    activeCell.Offset(0, 4).value = "Male"
                Else
                    activeCell.Offset(0, 4).value = "Other"
                End If
                
                activeCell.Offset(0, 5).value = returnString("C", rcell.Offset(0, 4).value)
                activeCell.Offset(0, 6).value = returnString("G", rcell.Offset(0, 5).value)
                activeCell.Offset(0, 7).value = rcell.Offset(0, 6).value
                activeCell.Offset(0, 8).value = rcell.Offset(0, 7).value
                activeCell.Offset(0, 9).value = rcell.Offset(0, 8).value
                activeCell.Offset(0, 10).value = rcell.Offset(0, 9).value
                activeCell.Offset(0, 11).value = rcell.Offset(0, 10).value
                activeCell.Offset(0, 12).value = rcell.Offset(0, 11).value
                activeCell.Offset(0, 13).value = rcell.Offset(0, 12).value
                activeCell.Offset(0, 14).value = rcell.Offset(0, 13).value
                activeCell.Offset(0, 15).value = rcell.Offset(0, 14).value
                activeCell.Offset(0, 16).value = returnString("H", rcell.Offset(0, 15).value)
                activeCell.Offset(0, 17).value = returnString("B", rcell.Offset(0, 16).value)
                activeCell.Offset(0, 18).value = rcell.Offset(0, 17).value
                activeCell.Offset(0, 19).value = rcell.Offset(0, 18).value
                activeCell.Offset(0, 20).value = returnString("I", rcell.Offset(0, 19).value)
                activeCell.Offset(0, 21).value = returnString("J", rcell.Offset(0, 20).value)
                activeCell.Offset(0, 22).value = returnString("K", rcell.Offset(0, 21).value)
                activeCell.Offset(0, 23).value = returnString("L", rcell.Offset(0, 22).value)
                activeCell.Offset(0, 24).value = returnString("M", rcell.Offset(0, 23).value)
                activeCell.Offset(0, 25).value = rcell.Offset(0, 24).value
                activeCell.Offset(0, 26).value = rcell.Offset(0, 25).value
                activeCell.Offset(0, 27).value = rcell.Offset(0, 26).value
                activeCell.Offset(0, 28).value = rcell.Offset(0, 27).value
                activeCell.Offset(0, 29).value = rcell.Offset(0, 28).value
                activeCell.Offset(0, 30).value = rcell.Offset(0, 29).value
                
                'now add latest qualification of the teacher
                For Each cell In Worksheets("Teacher Educational Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Educational Info").Cells(Rows.count, 2).End(xlUp).row + 1)
                    'check if it is the same teacher and the latest qualification is of the correct year
                    If cell.value = rcell.Text And (cell.Offset(0, 1).value - year) = 0 Then
                        activeCell.Offset(0, 31).value = returnString("N", cell.Offset(0, 2).value)
                    End If
                Next cell
                
                
                'now the income details of the teacher from the "Teacher Income" sheet
                For Each cell In Worksheets("Teacher Income").Range("B" & startingRow & ":B" & Worksheets("Teacher Income").Cells(Rows.count, 2).End(xlUp).row + 1)
                    'check if it is the same teacher and the year
                    If cell.value = rcell.Text And (cell.Offset(0, 1).value - year) = 0 Then
                        activeCell.Offset(0, 32).value = cell.Offset(0, 2).value
                        activeCell.Offset(0, 33).value = cell.Offset(0, 3).value
                        activeCell.Offset(0, 34).value = cell.Offset(0, 4).value
                        activeCell.Offset(0, 35).value = cell.Offset(0, 5).value
                        activeCell.Offset(0, 36).value = cell.Offset(0, 6).value
                        activeCell.Offset(0, 37).value = cell.Offset(0, 7).value
                        activeCell.Offset(0, 38).value = cell.Offset(0, 8).value
                        activeCell.Offset(0, 39).value = cell.Offset(0, 9).value
                        activeCell.Offset(0, 40).value = cell.Offset(0, 10).value
                        activeCell.Offset(0, 41).value = cell.Offset(0, 12).value
                        activeCell.Offset(0, 42).value = cell.Offset(0, 13).value
                    End If
                Next cell
            End If
        End If
    Next rcell
    
    'now prepare for printing
    With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 20
    End With
    
    ActiveSheet.Range("A:AQ").Columns.AutoFit
    ActiveSheet.Range("AS:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A" & reportStartingRow).Select
End Sub

'procedure that generates students report depending on the year passed
Private Sub generateStudentReport(ByVal year As Integer, ByVal selectedClass As Integer, ByVal selectedCaste As Integer, ByVal selectedGender As Integer, ByVal selectedDisability As Integer)
    Dim headerList(0 To 25) As String
    Dim sheetName As String
    Dim reportStartingRow As Integer
    Dim subjectColumn As Integer
    Dim scholarshipList
    Dim genderLookup(0 To 2) As String
    
    'set the name of the newly created sheet
    sheetName = "Student Report Card"
    scholarshipList = Application.Transpose(Worksheets("Information").Range("F2:" & "F" & Worksheets("Information").Cells(Rows.count, 6).End(xlUp).row).value)
    ReDim Preserve scholarshipList(0 To UBound(scholarshipList))
    
    'starting row from which the rows will be filled in the new report
    reportStartingRow = 5
    
    genderLookup(1) = "Female"
    genderLookup(2) = "Male"
    
    headerList(0) = "Reg ID"
    headerList(1) = "Year"
    headerList(2) = "Student Name"
    headerList(3) = "Sex"
    headerList(4) = "Caste"
    headerList(5) = "DOB"
    headerList(6) = "Age"
    headerList(7) = "Father's Name"
    headerList(8) = "Mother's Name"
    headerList(9) = "Class"
    headerList(10) = "Attended Days"
    headerList(11) = "Scholarship"
    
    'now retrieve subject names
    Dim listCount As Integer
    listCount = 12
    subjectColumn = Worksheets("Subjects").Range("A" & startingRow).Offset(0, 3 * selectedClass).column
    
    For Each rcell In Worksheets("Subjects").Range(Worksheets("Subjects").Cells(startingRow, subjectColumn), Worksheets("Subjects").Cells(Worksheets("Subjects").Cells(Rows.count, subjectColumn).End(xlUp).row, subjectColumn))
        headerList(listCount) = rcell.value
        listCount = listCount + 1
    Next rcell
    
    recreateSheet sheetName
    ActiveSheet.Range("A" & (reportStartingRow - 1)).Activate
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
    
    'Add header to the report
    For i = 0 To UBound(headerList)
        activeCell.Offset(0, i).value = headerList(i)
        activeCell.Offset(0, i).Borders.LineStyle = XlLineStyle.xlContinuous
        activeCell.Offset(0, i).Interior.Color = RGB(217, 217, 217)
    Next i
    
    'change cell format of the regid column to text
    Worksheets(sheetName).Columns(1).NumberFormat = "@"
    
    'now add information about each student
    For Each rcell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1)
        If Not rcell.value = "" And (convertClassToInteger(Worksheets("Student Tracking").Range("O" & rcell.row).Offset(0, year - 2070)) - selectedClass = 0) Then
            'apply the various  filters
            If (selectedCaste = 0 Or (Not selectedClass = 0 And rcell.Offset(0, 8) = returnString("C", selectedCaste))) And (selectedGender = 0 Or (Not selectedGender = 0 And rcell.Offset(0, 3) = genderLookup(selectedGender))) And (selectedDisability = 0 Or (Not selectedDisability = 0 And rcell.Offset(0, 9) = returnString("B", selectedDisability))) Then
                'identify the first empty cell
                Range("A" & reportStartingRow).Select
                Do
                    If IsEmpty(activeCell) = False Then
                        activeCell.Offset(1, 0).Select
                    End If
                Loop Until IsEmpty(activeCell) = True
                
                'skip only the line if there is error in it
                On Error Resume Next
                
                'now retrieve the students into the report
                activeCell.Offset(0, 0).value = rcell.Offset(0, 0).Text
                activeCell.Offset(0, 1).value = rcell.Offset(0, -1).value
                activeCell.Offset(0, 2).value = rcell.Offset(0, 1).value & " " & rcell.Offset(0, 2).value
                activeCell.Offset(0, 3).value = rcell.Offset(0, 3).value
                activeCell.Offset(0, 4).value = rcell.Offset(0, 8).value
                activeCell.Offset(0, 5).value = rcell.Offset(0, 6).value
                activeCell.Offset(0, 5).HorizontalAlignment = xlCenter
                activeCell.Offset(0, 6).value = year - Split(rcell.Offset(0, 6).value, "/")(2)
                activeCell.Offset(0, 7).value = rcell.Offset(0, 4).value
                activeCell.Offset(0, 8).value = rcell.Offset(0, 5).value
                activeCell.Offset(0, 9).value = selectedClass
                activeCell.Offset(0, 10).value = Worksheets("Student Tracking").Range("O" & rcell.row).Offset(0, (year - 2070) + 24)
                activeCell.Offset(0, 11).value = scholarshipList(Worksheets("Student Tracking").Range("O" & rcell.row).Offset(0, (year - 2070) + 12))
            End If
        
            'now add marks if they have already been updated
            For Each cell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & Worksheets("Student Marks").Cells(Rows.count, 3).End(xlUp).row + 1)
                'check if it is the same student and that the marks is of the correct class and year
                If cell.Text = rcell.Text And (cell.Offset(0, 1).value - selectedClass) = 0 Then
                    activeCell.Offset(0, 12).value = cell.Offset(0, 2).value
                    activeCell.Offset(0, 13).value = cell.Offset(0, 3).value
                    activeCell.Offset(0, 14).value = cell.Offset(0, 4).value
                    activeCell.Offset(0, 15).value = cell.Offset(0, 5).value
                    activeCell.Offset(0, 16).value = cell.Offset(0, 6).value
                    activeCell.Offset(0, 17).value = cell.Offset(0, 7).value
                    activeCell.Offset(0, 18).value = cell.Offset(0, 8).value
                    activeCell.Offset(0, 19).value = cell.Offset(0, 9).value
                    activeCell.Offset(0, 20).value = cell.Offset(0, 10).value
                    activeCell.Offset(0, 21).value = cell.Offset(0, 11).value
                End If
            Next cell
        End If
    Next rcell
    
    'now prepare for printing
    With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 40
    End With
    
    ActiveSheet.Range(ActiveSheet.Cells(1, 1), ActiveSheet.Cells(ActiveSheet.Cells(Rows.count, listCount).End(xlUp).row, listCount)).EntireColumn.AutoFit
    ActiveSheet.Range(ActiveSheet.Cells(1, listCount + 1), ActiveSheet.Cells(1, 256)).EntireColumn.Hidden = True
    ActiveSheet.Range("A" & reportStartingRow).Select
End Sub


'procedure that generates students report depending on the class passed
Private Sub generateIndicatorReport(ByVal selectedClass As Integer)
    Dim indicatorList(0 To 9) As String
    Dim sheetName As String
    Dim j As Integer
    
    'set the name of the newly created sheet
    sheetName = "PRD Report"
    
    'starting row from which the rows will be filled in the new report
    reportStartingRow = 3
    
    indicatorList(0) = "Grand Total"
    indicatorList(1) = "Girls Total"
    indicatorList(2) = "Boys Total"
    indicatorList(3) = "Dalit Total"
    indicatorList(4) = "Dalit Girls"
    indicatorList(5) = "Dalit Boys"
    indicatorList(6) = "Janjati Total"
    indicatorList(7) = "Janjati Girls"
    indicatorList(8) = "Janjati Boys"
    indicatorList(9) = "Disabled Total"
    
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
   'now the rest of the header
    With ActiveSheet.Range("A1:N1")
        .Merge
        .value = "Promotion,Repetition and Dropout Details"
        '.Interior.Color = RGB(191, 191, 191)
        .RowHeight = 28
        .Font.Size = 20
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    'the name of school
    With ActiveSheet.Range("A2:N2")
        .Merge
        .value = Worksheets("General").Range("D9").value
        .Font.Size = 14
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    
    'summary indicator text
    With ActiveSheet.Range("A3:N3")
        .Merge
        .value = "Summary Indicator"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'now the information in summary
    ActiveSheet.Range("A4:N4").Font.Bold = True
    ActiveSheet.Range("A4:N7").Font.Bold = True
    ActiveSheet.Range("A4:B4").Merge
    ActiveSheet.Range("A4:B4").Borders.LineStyle = XlLineStyle.xlContinuous
    ActiveSheet.Range("A4").value = "INDICATOR(RATE)"
    ActiveSheet.Range("A5:B5").Merge
    ActiveSheet.Range("A5").value = "Promotion"
    ActiveSheet.Range("A6:B6").Merge
    ActiveSheet.Range("A6").value = "Repetition"
    ActiveSheet.Range("A7:B7").Merge
    ActiveSheet.Range("A7").value = "Dropout"
    
    'now the years
    j = 4
    Do While j < 46
        'the years in summary indicators
        If j = 4 Then
            For i = 0 To 11
                ActiveSheet.Range("A" & j).Borders.LineStyle = XlLineStyle.xlContinuous
                With ActiveSheet.Range("C" & j).Offset(0, i)
                    .value = 2070 + i
                    .Font.Bold = True
                    .Borders.LineStyle = XlLineStyle.xlContinuous
                    .HorizontalAlignment = xlCenter
                End With
            Next i
            j = j + 5
        'now the rest of them
        Else
            ActiveSheet.Range("A" & j & ":N" & j).Font.Bold = True
            For i = 0 To 11
                ActiveSheet.Range("A" & j).value = "Class"
                ActiveSheet.Range("A" & j).Borders.LineStyle = XlLineStyle.xlContinuous
                With ActiveSheet.Range("B" & j)
                    .value = selectedClass
                    .Borders.LineStyle = XlLineStyle.xlContinuous
                    .HorizontalAlignment = xlCenter
                End With
                With ActiveSheet.Range("C" & j).Offset(0, i)
                    .value = 2070 + i
                    .Borders.LineStyle = XlLineStyle.xlContinuous
                    .HorizontalAlignment = xlCenter
                End With
            Next i
            j = j + 12
        End If
    Loop
    
    'enrollment details text
    With ActiveSheet.Range("A8:N8")
        .Merge
        .value = "ENROLLMENT DETAILS"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'promotion details text
    With ActiveSheet.Range("A20:N20")
        .Merge
        .value = "PROMOTION DETAILS"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'repetition details text
    With ActiveSheet.Range("A32:N32")
        .Merge
        .value = "REPETITION DETAILS"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'dropout details text
    With ActiveSheet.Range("A44:N44")
        .Merge
        .value = "DROPOUT DETAILS"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    
    
    j = 10
    Do While j < 47
        ActiveSheet.Range("A" & j).Activate
        For i = 0 To UBound(indicatorList)
            ActiveSheet.Range("A" & (i + j) & ":B" & (i + j)).Merge
            ActiveSheet.Range("A" & (i + j)).value = indicatorList(i)
            ActiveSheet.Range("A" & (i + j) & ":B" & (i + j)).Borders.LineStyle = XlLineStyle.xlContinuous
            ActiveSheet.Range("A" & (i + j)).Interior.Color = RGB(217, 217, 217)
        Next i
        j = j + 12
    Loop
    
    
    'now finally the data
    ActiveSheet.Range("C10:N55").HorizontalAlignment = xlCenter
    For i = 2070 To 2081 Step 1
        
        'calculate the enrollment details
        'the grand total enrollment
        ActiveSheet.Range("C10").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 1, 1, False)
        'the girls total enrollment
        ActiveSheet.Range("C11").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 2, 1, False)
        'boys total enrollment
        ActiveSheet.Range("C12").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 3, 1, False)
        'dalit total enrollment
        ActiveSheet.Range("C13").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 1, 2, False)
        'dalit girls enrollment
        ActiveSheet.Range("C14").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 2, 2, False)
        'dalit boys enrollment
        ActiveSheet.Range("C15").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 3, 2, False)
        'janajati total enrollment
        ActiveSheet.Range("C16").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 1, 3, False)
        'janajati girls enrollment
        ActiveSheet.Range("C17").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 2, 3, False)
        'janajati boys enrollment
        ActiveSheet.Range("C18").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 3, 3, False)
        'disabled total enrollment
        ActiveSheet.Range("C19").Offset(0, i - 2070).value = getEnrolledStudents(selectedClass, i, 1, 1, True)
        
        
        'calculate the promotion details
        'the grand total promoted
        ActiveSheet.Range("C22").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 1, 1, False)
        'the girls total promoted
        ActiveSheet.Range("C23").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 2, 1, False)
        'boys total promoted
        ActiveSheet.Range("C24").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 3, 1, False)
        'dalit total promoted
        ActiveSheet.Range("C25").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 1, 2, False)
        'dalit girls promoted
        ActiveSheet.Range("C26").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 2, 2, False)
        'dalit boys promoted
        ActiveSheet.Range("C27").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 3, 2, False)
        'janajati total promoted
        ActiveSheet.Range("C28").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 1, 3, False)
        'janajati girls promoted
        ActiveSheet.Range("C29").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 2, 3, False)
        'janajati boys promoted
        ActiveSheet.Range("C30").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 3, 3, False)
        'disabled total promoted
        ActiveSheet.Range("C31").Offset(0, i - 2070).value = getPromotedFromStudents(selectedClass, i, 1, 1, True)
        
        
        'calculate repetition details
        'the grand total repeated
        ActiveSheet.Range("C34").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 1, 1, False)
        'the girls total repeated
        ActiveSheet.Range("C35").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 2, 1, False)
        'boys total repeated
        ActiveSheet.Range("C36").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 3, 1, False)
        'dalit total repeated
        ActiveSheet.Range("C37").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 1, 2, False)
        'dalit girls repeated
        ActiveSheet.Range("C38").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 2, 2, False)
        'dalit boys repeated
        ActiveSheet.Range("C39").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 3, 2, False)
        'janajati total repeated
        ActiveSheet.Range("C40").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 1, 3, False)
        'janajati girls repeated
        ActiveSheet.Range("C41").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 2, 3, False)
        'janajati boys repeated
        ActiveSheet.Range("C42").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 3, 3, False)
        'disabled total repeated
        ActiveSheet.Range("C43").Offset(0, i - 2070).value = getRepeatingStudents(selectedClass, i, 1, 1, True)
        
        'calculate the dropout details
        'the grand total dropped out
        ActiveSheet.Range("C46").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 1, 1, False)
        'the girls total dropped out
        ActiveSheet.Range("C47").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 2, 1, False)
        'boys total dropped out
        ActiveSheet.Range("C48").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 3, 1, False)
        'dalit total dropped out
        ActiveSheet.Range("C49").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 1, 2, False)
        'dalit girls dropped out
        ActiveSheet.Range("C50").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 2, 2, False)
        'dalit boys dropped out
        ActiveSheet.Range("C51").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 3, 2, False)
        'janajati total dropped out
        ActiveSheet.Range("C52").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 1, 3, False)
        'janajati girls dropped out
        ActiveSheet.Range("C53").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 2, 3, False)
        'janajati boys dropped out
        ActiveSheet.Range("C54").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 3, 3, False)
        'disabled total dropped out
        ActiveSheet.Range("C55").Offset(0, i - 2070).value = getDroppedOutStudents(selectedClass, i, 1, 1, True)
        
        
        
        'finally the summary of all three details and the rates
        'calculate the promotion rate=(total promoted/total enrolled)*100
        On Error Resume Next
        ActiveSheet.Range("C5").Offset(0, i - 2070).value = (ActiveSheet.Range("C22").Offset(0, i - 2070).value / ActiveSheet.Range("C10").Offset(0, i - 2070).value) * 100
        'calculate the repetition rate=(total repeated/total enrolled)*100
        ActiveSheet.Range("C6").Offset(0, i - 2070).value = (ActiveSheet.Range("C34").Offset(0, i - 2070).value / ActiveSheet.Range("C10").Offset(0, i - 2070).value) * 100
        'calculate the dropout rate=(total dropped out/total enrolled)*100
        ActiveSheet.Range("C7").Offset(0, i - 2070).value = (ActiveSheet.Range("C46").Offset(0, i - 2070).value / ActiveSheet.Range("C10").Offset(0, i - 2070).value) * 100
        On Error GoTo 0
        
    Next i
    
    'now prepare for printing
    With ActiveSheet
        .PageSetup.Orientation = xlPortrait
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 65
    End With
    
    ActiveSheet.Range("A4").Columns.AutoFit
    ActiveSheet.Range("O:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1").Select
End Sub

'procedure that generates scholarship report
Sub generateScholarshipReport(ByVal selectedClass As Integer)
    Dim scholarshipList()
    Dim sheetName As String
    Dim j As Integer
    
    'set the name of the newly created sheet
    sheetName = "Scholarship Report"
    scholarshipList = Application.Transpose(Worksheets("Information").Range("F2:" & "F" & Worksheets("Information").Cells(Rows.count, 6).End(xlUp).row).value)
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
   'now the rest of the header
    With ActiveSheet.Range("A1:N1")
        .Merge
        .value = "Scholarship Details"
        '.Interior.Color = RGB(191, 191, 191)
        .RowHeight = 28
        .Font.Size = 20
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    'the name of school
    With ActiveSheet.Range("A2:N2")
        .Merge
        .value = Worksheets("General").Range("D9").value
        .Font.Size = 14
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    
    'Scholarship Girls Header
    With ActiveSheet.Range("A3:N3")
        .Merge
        .value = "Scholarship Details - Girls"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'Scholarship Boys Header
    With ActiveSheet.Range("A19:N19")
        .Merge
        .value = "Scholarship Details - Boys"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'Scholarship Total Header
    With ActiveSheet.Range("A35:N35")
        .Merge
        .value = "Scholarship Details - Total"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    j = 4
    Do While j < 37
        ActiveSheet.Range("A" & j & ":N" & j).Font.Bold = True
        For i = 0 To 11
            ActiveSheet.Range("A" & j).value = "Class"
            ActiveSheet.Range("A" & j).Borders.LineStyle = XlLineStyle.xlContinuous
            With ActiveSheet.Range("B" & j)
                .value = selectedClass
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Range("C" & j).Offset(0, i)
                .value = 2070 + i
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
            End With
        Next i
        j = j + 16
    Loop
    
    j = 4
    Do While j < 37
        ActiveSheet.Range("A" & j).Activate
        For i = 1 To UBound(scholarshipList)
            ActiveSheet.Range("A" & (i + j) & ":B" & (i + j)).Merge
            ActiveSheet.Range("A" & (i + j)).value = scholarshipList(i)
            ActiveSheet.Range("A" & (i + j) & ":B" & (i + j)).Borders.LineStyle = XlLineStyle.xlContinuous
            ActiveSheet.Range("A" & (i + j)).Interior.Color = RGB(217, 217, 217)
        Next i
        j = j + 16
    Loop
    
    
    'now finally the data
    ActiveSheet.Range("C5:N50").HorizontalAlignment = xlCenter
    
    For i = 0 To 11
        For j = 1 To UBound(scholarshipList)
            'count the scholarship details for girls
            ActiveSheet.Range("C5").Offset((j - 1), i).value = getScholarshipReceivedCount((j - 1), 2, selectedClass, 2070 + i)
            'now for the boys
            ActiveSheet.Range("C21").Offset((j - 1), i).value = getScholarshipReceivedCount((j - 1), 3, selectedClass, 2070 + i)
            'now the total scholarship
            ActiveSheet.Range("C37").Offset((j - 1), i).value = getScholarshipReceivedCount((j - 1), 1, selectedClass, 2070 + i)
        Next j
    Next i
    
    'now prepare for printing
    With ActiveSheet
        .PageSetup.Orientation = xlPortrait
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 70
    End With
    
    ActiveSheet.Range("A4").EntireColumn.AutoFit
    ActiveSheet.Range("O:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1").Select
End Sub


Private Sub generateScoreReport(ByVal year As Integer, ByVal selectedClass As Integer)
    Dim subjectList()
    Dim subjectColumn As Integer
    Dim sheetName As String
    Dim i, j As Integer
    
    'set the name of the newly created sheet
    sheetName = "Score Report"
    subjectColumn = Worksheets("Subjects").Range("A" & startingRow).Offset(0, 3 * selectedClass).column
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
   'now the rest of the header
    With ActiveSheet.Range("A1:P1")
        .Merge
        .value = "Final Examination Results"
        '.Interior.Color = RGB(191, 191, 191)
        .RowHeight = 28
        .Font.Size = 20
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    'the name of school
    With ActiveSheet.Range("A2:P2")
        .Merge
        .value = Worksheets("General").Range("D9").value
        .Font.Size = 14
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    
    'now the class and year information
    With ActiveSheet.Range("A3:P3")
        .Font.Bold = True
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    ActiveSheet.Range("A3").value = "Year"
    ActiveSheet.Range("B3").value = year
    ActiveSheet.Range("M3").value = "Class"
    ActiveSheet.Range("N3").value = selectedClass
    
    'average scores header
    With ActiveSheet.Range("A4:P4")
        .Merge
        .value = "Average Scores"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'average scores header
    With ActiveSheet.Range("A18:P18")
        .Merge
        .value = "Appeared in Exam"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    'average scores header
    With ActiveSheet.Range("A32:P32")
        .Merge
        .value = "Passed in Exam"
        .Font.Size = 11
        .Font.Bold = True
        .Borders.LineStyle = XlLineStyle.xlContinuous
        .Interior.Color = RGB(166, 166, 166)
        .HorizontalAlignment = xlCenter
    End With
    
    
    
    'add the subject names and header information for each section of the report
    j = 5
    Do While j < 34
        'add the subjects header
        With ActiveSheet.Range("A" & j & ":A" & (j + 1))
            .Merge
            .value = "Subjects"
            .Font.Size = 11
            .Font.Bold = True
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
        End With
        
        'now the caste header
        With ActiveSheet.Range("B" & j & ":D" & j)
            .Merge
            .Font.Size = 11
            .Font.Bold = True
            .value = "Total"
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range("E" & j & ":G" & j)
            .Merge
            .Font.Size = 11
            .Font.Bold = True
            .value = returnString("C", 1)
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range("H" & j & ":J" & j)
            .Merge
            .Font.Size = 11
            .Font.Bold = True
            .value = returnString("C", 2)
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range("K" & j & ":M" & j)
            .Merge
            .Font.Size = 11
            .Font.Bold = True
            .value = returnString("C", 3)
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range("N" & j & ":P" & j)
            .Merge
            .Font.Size = 11
            .Font.Bold = True
            .value = returnString("C", 4)
            .HorizontalAlignment = xlCenter
        End With
        
        'now the header that specofoes gender
        For k = 0 To 4 Step 1
            ActiveSheet.Range("B" & j + 1).Offset(0, k * 3).value = "Male"
            ActiveSheet.Range("C" & j + 1).Offset(0, k * 3).value = "Female"
            ActiveSheet.Range("D" & j + 1).Offset(0, k * 3).value = "Total"
        Next k
        
        i = 0
        For Each rcell In Worksheets("Subjects").Range(Worksheets("Subjects").Cells(startingRow, subjectColumn), Worksheets("Subjects").Cells(Worksheets("Subjects").Cells(Rows.count, subjectColumn).End(xlUp).row, subjectColumn))
                ActiveSheet.Range("A" & (j + 2)).Offset(i, 0).value = rcell.value
                i = i + 1
        Next rcell
        j = j + 14
    Loop
    
    'now to fill in the average marks
    j = 0
    'loop through each of the subjects
    For Each rcell In Worksheets("Subjects").Range(Worksheets("Subjects").Cells(startingRow, subjectColumn), Worksheets("Subjects").Cells(Worksheets("Subjects").Cells(Rows.count, subjectColumn).End(xlUp).row, subjectColumn))
        'loop through each of the caste
        For filterCaste = 0 To 4 Step 1
            'loop through each gender
            For filterGender = 1 To 3
                ActiveSheet.Range("B7").Offset(j, filterCaste * 3 + (filterGender - 1)).value = getAverageMarks(year, selectedClass, j + 1, filterCaste, filterGender)
                ActiveSheet.Range("B21").Offset(j, filterCaste * 3 + (filterGender - 1)).value = getNoofStudentsAppearedInExam(year, selectedClass, j + 1, filterCaste, filterGender)
                ActiveSheet.Range("B35").Offset(j, filterCaste * 3 + (filterGender - 1)).value = getNoofStudentsPassedInExam(year, selectedClass, j + 1, filterCaste, filterGender)
            Next filterGender
        Next filterCaste
        j = j + 1
    Next rcell
    
    'now prepare for printing
    With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 75
    End With
    
    ActiveSheet.Range("B6:P45").HorizontalAlignment = xlCenter
    ActiveSheet.Range("A1").EntireColumn.AutoFit
    ActiveSheet.Range("Q:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1").Select
End Sub


'procedure that generates the attendance report
Private Sub generateAttendanceReport(ByVal year As Integer)
    Dim sheetName As String
    Dim selectedCaste As Integer
    Dim i, j, counter As Integer
    Dim sumAttendance As Long
    
    
    'set the name of the newly created sheet
    sheetName = "Attendance Report"
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
   'now the rest of the header
    With ActiveSheet.Range("A1:O1")
        .Merge
        .value = "Attendance Report Card"
        '.Interior.Color = RGB(191, 191, 191)
        .RowHeight = 28
        .Font.Size = 20
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    'the name of school
    With ActiveSheet.Range("A2:O2")
        .Merge
        .value = Worksheets("General").Range("D9").value
        .Font.Size = 14
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    
    'caste/ethnicity/gender
    With ActiveSheet.Range("A3:B4")
        .Merge
        .value = "Caste/Ethnicity/Gender"
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    
    With ActiveSheet.Range("C3:O3")
        .Merge
        .value = "Class"
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    
    'now add the respective classes
    For i = 0 To 12
        If i = 0 Then
            ActiveSheet.Range("C4").Offset(0, i).value = "ECD/PPC"
        Else
            ActiveSheet.Range("C4").Offset(0, i).value = i
        End If
    Next i
    
    'now fill in the table with information regarding the data
    ActiveSheet.Range("A5:O19").Borders.LineStyle = XlLineStyle.xlContinuous
    selectedCaste = 0
    Do While selectedCaste < 5
        If selectedCaste = 0 Then
            ActiveSheet.Range("A5").Offset(selectedCaste * 3, 0).value = "All"
        Else
            ActiveSheet.Range("A5").Offset(selectedCaste * 3, 0).value = returnString("C", selectedCaste)
        End If
        ActiveSheet.Range("A5:O5").Offset(selectedCaste * 3, 0).Interior.Color = RGB(166, 166, 166)
        ActiveSheet.Range("B5").Offset(selectedCaste * 3, 0).value = "Total"
        ActiveSheet.Range("B6").Offset(selectedCaste * 3, 0).value = "Male"
        ActiveSheet.Range("B7").Offset(selectedCaste * 3, 0).value = "Female"
        
        selectedCaste = selectedCaste + 1
    Loop
    
    'finally we compute the attendance for each category
    'total,dalit,janajati,b/c and others
    For j = 0 To 4 Step 1
        'total,male,female
        For k = 0 To 2 Step 1
            'ECD/PPC,1,2,3...12
            For i = 0 To 12 Step 1
                'for ECD
                If i = 0 Then
                    ActiveSheet.Range("C5").Offset((j * 3 + k), i).value = getAvgAttendance(year, -1, j, k)
                Else
                    ActiveSheet.Range("C5").Offset((j * 3 + k), i).value = getAvgAttendance(year, i, j, k)
                End If
            Next i
        Next k
    Next j
    
    'now compute the total avg. attendance for each category
    For j = 0 To 4 Step 1
        For k = 1 To 2 Step 1
            counter = 0
            sumAttendance = 0
            For i = 0 To 12 Step 1
                If Len(ActiveSheet.Range("C5").Offset((j * 3 + k), i).value) > 0 Then
                    sumAttendance = sumAttendance + ActiveSheet.Range("C5").Offset(j * 3 + k, i).value
                    counter = counter + 1
                End If
            Next i
            If (Not sumAttendance = 0) And (Not counter = 0) Then
                ActiveSheet.Range("A5").Offset(j * 3 + k, 0).value = Round(sumAttendance / counter, 0)
            End If
        Next k
        
    Next j
    
    ActiveSheet.Range("A3:O19").HorizontalAlignment = xlCenter
    ActiveSheet.Range("A3").EntireColumn.AutoFit
    ActiveSheet.Range("P:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1").Select
    
End Sub

Private Sub generateTeacherProfile(ByVal year As Integer, ByVal selectedCaste As Integer, ByVal selectedGender As Integer, selectedDisability As Integer)
    Dim teacherIDs As Collection
    Dim sheetName As String
    Dim teacherRow As Integer
    Dim i As Long
    Dim j As Integer
    
    Set teacherIDs = getTeacherIDs(year, selectedCaste, selectedGender, selectedDisability)
    If teacherIDs.count = 0 Then
        MsgBox ("There are no Teachers to Display!")
        Exit Sub
    End If
    
    'set the name of the newly created sheet
    sheetName = "Teacher Profile"
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main"
        .Name = "cmdMain" & i
    End With
    
    ActiveSheet.Range("N:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1:L3").Merge
    
    i = 0
    teacherRow = startingRow
    For Each ID In teacherIDs
        'find out the row no of the teacher in the "Teacher Personal Info" sheet
         For Each rcell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Personal Info").Cells(Rows.count, 2).End(xlUp).row + 1)
            If rcell.value = ID Then
                teacherRow = rcell.row
            End If
        Next rcell

        ActiveSheet.Range(Cells(4 + i, 1), Cells(8 + i, 2)).Merge       '"A4:B8"
        ActiveSheet.Range(Cells(4 + i, 1), Cells(8 + i, 2)).Borders.LineStyle = XlLineStyle.xlContinuous
        ActiveSheet.Range(Cells(4 + i, 11), Cells(8 + i, 12)).Merge     '"K4:L8"
        ActiveSheet.Range(Cells(4 + i, 11), Cells(8 + i, 12)).Borders.LineStyle = XlLineStyle.xlContinuous
        
        'teacher Profile text
        With ActiveSheet.Range(Cells(4 + i, 3), Cells(4 + i, 10))   '"C4:J4"
            .Merge
            .value = "Teacher Profile"
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'Name of the Teacher
        With ActiveSheet.Range(Cells(5 + i, 3), Cells(5 + i, 10))    '"C5:J5"
            .Merge
            .value = "Name : " & UCase(Worksheets("Teacher Personal Info").Range("D" & teacherRow).value)
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'Name of the School
        With ActiveSheet.Range(Cells(6 + i, 3), Cells(6 + i, 10))    '"C6:J6"
            .Merge
            .value = "School : " & UCase(Worksheets("General").Range("D" & startingRow).value)
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'School Code
        With ActiveSheet.Range(Cells(7 + i, 3), Cells(7 + i, 10))    '"C7:J7"
            .Merge
            .value = "School Code : " & Mid(Worksheets("General").Range("F1").value, 2, 9)
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'School type
        With ActiveSheet.Range(Cells(8 + i, 3), Cells(8 + i, 10))    '"C8:J8"
            .Merge
            .value = "School Type : " & returnString("U", Worksheets("General").Range("E" & startingRow).value)
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'general information
        With ActiveSheet.Range(Cells(9 + i, 1), Cells(9 + i, 12))     '"A9:L9"
            .Merge
            .value = "General Information"
            .Font.Bold = True
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'now the general information subfields
        ActiveSheet.Range(Cells(10 + i, 1), Cells(17 + i, 12)).Borders.LineStyle = XlLineStyle.xlContinuous
        For j = 10 To 17
            'now the subheading in general information
            With ActiveSheet.Range(Cells(j + i, 1), Cells(j + i, 2))
                .Merge
                .Interior.Color = RGB(166, 166, 166)
            End With
            With ActiveSheet.Range(Cells(j + i, 3), Cells(j + i, 4))
                .Merge
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Range(Cells(j + i, 5), Cells(j + i, 6))
                .Merge
                .Interior.Color = RGB(166, 166, 166)
            End With
            With ActiveSheet.Range(Cells(j + i, 7), Cells(j + i, 8))
                .Merge
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Range(Cells(j + i, 9), Cells(j + i, 10))
                .Merge
                .Interior.Color = RGB(166, 166, 166)
            End With
            With ActiveSheet.Range(Cells(j + i, 11), Cells(j + i, 12))
                .Merge
                .HorizontalAlignment = xlCenter
            End With
        Next j
        ActiveSheet.Range(Cells(10 + i, 1), Cells(10 + i, 2)).value = "Sex"
        ActiveSheet.Range(Cells(11 + i, 1), Cells(11 + i, 2)).value = "Caste/Ethnicity"
        ActiveSheet.Range(Cells(12 + i, 1), Cells(12 + i, 2)).value = "As per Citizenship"
        ActiveSheet.Range(Cells(13 + i, 1), Cells(13 + i, 2)).value = "As per Certificate"
        ActiveSheet.Range(Cells(14 + i, 1), Cells(14 + i, 2)).value = "As per Sheet role"
        ActiveSheet.Range(Cells(15 + i, 1), Cells(15 + i, 2)).value = "Nationality"
        ActiveSheet.Range(Cells(16 + i, 1), Cells(16 + i, 2)).value = "Mother Tongue"
        ActiveSheet.Range(Cells(17 + i, 1), Cells(17 + i, 2)).value = "Teaching Language"
        ActiveSheet.Range(Cells(10 + i, 5), Cells(10 + i, 6)).value = "Father's Name"
        ActiveSheet.Range(Cells(11 + i, 5), Cells(11 + i, 6)).value = "Mother's Name"
        ActiveSheet.Range(Cells(12 + i, 5), Cells(12 + i, 6)).value = "Spouse's Name"
        ActiveSheet.Range(Cells(13 + i, 5), Cells(13 + i, 6)).value = "Nominee's Name"
        ActiveSheet.Range(Cells(14 + i, 5), Cells(14 + i, 6)).value = "Current Level"
        ActiveSheet.Range(Cells(15 + i, 5), Cells(15 + i, 6)).value = "Current Rank"
        ActiveSheet.Range(Cells(16 + i, 5), Cells(16 + i, 6)).value = "Current Position"
        ActiveSheet.Range(Cells(10 + i, 9), Cells(10 + i, 10)).value = "Teachers Licence No."
        ActiveSheet.Range(Cells(11 + i, 9), Cells(11 + i, 10)).value = "Insurance No."
        ActiveSheet.Range(Cells(12 + i, 9), Cells(12 + i, 10)).value = "Citizenship No."
        ActiveSheet.Range(Cells(13 + i, 9), Cells(13 + i, 10)).value = "TRK Office No."
        ActiveSheet.Range(Cells(14 + i, 9), Cells(14 + i, 10)).value = "Provident Fund No."
        ActiveSheet.Range(Cells(15 + i, 9), Cells(15 + i, 10)).value = "Telephone No."
        ActiveSheet.Range(Cells(16 + i, 9), Cells(16 + i, 10)).value = "Email"
        
        ActiveSheet.Range(Cells(10 + i, 3), Cells(10 + i, 4)).value = returnString("AD", Worksheets("Teacher Personal Info").Range("E" & teacherRow).value)
        ActiveSheet.Range(Cells(11 + i, 3), Cells(11 + i, 4)).value = returnString("C", Worksheets("Teacher Personal Info").Range("F" & teacherRow).value)
        ActiveSheet.Range(Cells(12 + i, 3), Cells(12 + i, 4)).value = Worksheets("Teacher Personal Info").Range("H" & teacherRow).value
        ActiveSheet.Range(Cells(13 + i, 3), Cells(13 + i, 4)).value = Worksheets("Teacher Personal Info").Range("I" & teacherRow).value
        ActiveSheet.Range(Cells(14 + i, 3), Cells(14 + i, 4)).value = Worksheets("Teacher Personal Info").Range("J" & teacherRow).value
        ActiveSheet.Range(Cells(15 + i, 3), Cells(15 + i, 4)).value = returnString("G", Worksheets("Teacher Personal Info").Range("G" & teacherRow).value)
        ActiveSheet.Range(Cells(16 + i, 3), Cells(16 + i, 4)).value = returnString("H", Worksheets("Teacher Personal Info").Range("Q" & teacherRow).value)
        ActiveSheet.Range(Cells(17 + i, 3), Cells(17 + i, 4)).value = returnString("M", Worksheets("Teacher Personal Info").Range("Y" & teacherRow).value)
        ActiveSheet.Range(Cells(10 + i, 7), Cells(10 + i, 8)).value = Worksheets("Teacher Personal Info").Range("M" & teacherRow).value
        ActiveSheet.Range(Cells(11 + i, 7), Cells(11 + i, 8)).value = Worksheets("Teacher Personal Info").Range("N" & teacherRow).value
        ActiveSheet.Range(Cells(12 + i, 7), Cells(12 + i, 8)).value = Worksheets("Teacher Personal Info").Range("O" & teacherRow).value
        ActiveSheet.Range(Cells(13 + i, 7), Cells(13 + i, 8)).value = Worksheets("Teacher Personal Info").Range("P" & teacherRow).value
        ActiveSheet.Range(Cells(14 + i, 7), Cells(14 + i, 8)).value = returnString("I", Worksheets("Teacher Personal Info").Range("U" & teacherRow).value)
        ActiveSheet.Range(Cells(15 + i, 7), Cells(15 + i, 8)).value = returnString("J", Worksheets("Teacher Personal Info").Range("V" & teacherRow).value)
        ActiveSheet.Range(Cells(16 + i, 7), Cells(16 + i, 8)).value = returnString("K", Worksheets("Teacher Personal Info").Range("W" & teacherRow).value)
        ActiveSheet.Range(Cells(10 + i, 11), Cells(10 + i, 12)).value = Worksheets("Teacher Personal Info").Range("Z" & teacherRow).value
        ActiveSheet.Range(Cells(11 + i, 11), Cells(11 + i, 12)).value = Worksheets("Teacher Personal Info").Range("AA" & teacherRow).value
        ActiveSheet.Range(Cells(12 + i, 11), Cells(12 + i, 12)).value = Worksheets("Teacher Personal Info").Range("K" & teacherRow).value
        ActiveSheet.Range(Cells(13 + i, 11), Cells(13 + i, 12)).value = Worksheets("Teacher Personal Info").Range("AC" & teacherRow).value
        ActiveSheet.Range(Cells(14 + i, 11), Cells(14 + i, 12)).value = Worksheets("Teacher Personal Info").Range("AB" & teacherRow).value
        ActiveSheet.Range(Cells(15 + i, 11), Cells(15 + i, 12)).value = Worksheets("Teacher Personal Info").Range("T" & teacherRow).value
        ActiveSheet.Range(Cells(16 + i, 11), Cells(16 + i, 12)).value = Worksheets("Teacher Personal Info").Range("S" & teacherRow).value
        
        'appointment information
        With ActiveSheet.Range(Cells(18 + i, 1), Cells(18 + i, 12))  '"A18:L18"
            .Merge
            .value = "Appointment Information"
            .Font.Bold = True
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        'now the appointment information subfields
        For j = 1 To 6
            With ActiveSheet.Range(Cells(19 + i, 2 * j - 1), Cells(19 + i, 2 * j))
                .Merge
                .HorizontalAlignment = xlCenter
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            For k = 1 To 7
                With ActiveSheet.Range(Cells((19 + i) + k, 2 * j - 1), Cells((19 + i) + k, 2 * j))
                    .Merge
                    .HorizontalAlignment = xlCenter
                End With
            Next k
        Next j
        ActiveSheet.Range(Cells(19 + i, 1), Cells(19 + i, 2)).value = "Dates"
        ActiveSheet.Range(Cells(19 + i, 3), Cells(19 + i, 4)).value = "Level"
        ActiveSheet.Range(Cells(19 + i, 5), Cells(19 + i, 6)).value = "Rank"
        ActiveSheet.Range(Cells(19 + i, 7), Cells(19 + i, 8)).value = "Types"
        ActiveSheet.Range(Cells(19 + i, 9), Cells(19 + i, 10)).value = "Types in Detail"
        ActiveSheet.Range(Cells(19 + i, 11), Cells(19 + i, 12)).value = "District"
        
        'loop through and check if it is the same teacher and fill in the appointment details
        j = 0
        For Each rcell In Worksheets("Teacher Teaching History").Range("B" & startingRow & ":B" & Worksheets("Teacher Teaching History").Cells(Rows.count, 2).End(xlUp).row + 1)
            If rcell.Text = Worksheets("Teacher Personal Info").Range("B" & teacherRow).Text Then
                ActiveSheet.Range(Cells(20 + i + j, 1), Cells(20 + i + j, 2)).value = rcell.Offset(0, 3).value
                ActiveSheet.Range(Cells(20 + i + j, 3), Cells(20 + i + j, 4)).value = rcell.Offset(0, 5).value
                ActiveSheet.Range(Cells(20 + i + j, 5), Cells(20 + i + j, 6)).value = returnString("J", rcell.Offset(0, 6).value)
                ActiveSheet.Range(Cells(20 + i + j, 7), Cells(20 + i + j, 8)).value = returnString("K", rcell.Offset(0, 7).value)
                
                ActiveSheet.Range(Cells(20 + i + j, 11), Cells(20 + i + j, 12)).value = rcell.Offset(0, 8).value
                j = j + 1
            End If
        Next rcell
        
        'teaching clas and teaching subject details
        With ActiveSheet.Range(Cells(27 + i, 1), Cells(27 + i, 12)) '"A27:L27"
            .Merge
            .value = "Teaching Class and Teaching Subject Details"
            .Font.Bold = True
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        'now the teaching class details
        For j = 1 To 7
            With ActiveSheet.Cells(27 + i + j, 1)
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            With ActiveSheet.Cells(27 + i + j, 4)
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            With ActiveSheet.Range(Cells(27 + i + j, 2), Cells(27 + i + j, 3))
                .Merge
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Range(Cells(27 + i + j, 6), Cells(27 + i + j, 7))
                .Merge
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            With ActiveSheet.Range(Cells(27 + i + j, 9), Cells(27 + i + j, 10))
                .Merge
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            With ActiveSheet.Range(Cells(27 + i + j, 11), Cells(27 + i + j, 12))
                .Merge
                .HorizontalAlignment = xlCenter
            End With
            'now the empty cells
        Next j
        
        ActiveSheet.Cells(28 + i, 1).value = "ECD/PPC"
        ActiveSheet.Cells(29 + i, 1).value = "Class 1"
        ActiveSheet.Cells(30 + i, 1).value = "Class 2"
        ActiveSheet.Cells(31 + i, 1).value = "Class 3"
        ActiveSheet.Cells(32 + i, 1).value = "Class 4"
        ActiveSheet.Cells(33 + i, 1).value = "Class 5"
        ActiveSheet.Cells(28 + i, 4).value = "Class 6"
        ActiveSheet.Cells(29 + i, 4).value = "Class 7"
        ActiveSheet.Cells(30 + i, 4).value = "Class 8"
        ActiveSheet.Cells(31 + i, 4).value = "Class 9"
        ActiveSheet.Cells(32 + i, 4).value = "Class 10"
        ActiveSheet.Cells(33 + i, 4).value = "Class 11"
        ActiveSheet.Cells(34 + i, 4).value = "Class 12"
        ActiveSheet.Range(Cells(28 + i, 6), Cells(28 + i, 7)).value = "English"
        ActiveSheet.Range(Cells(29 + i, 6), Cells(29 + i, 7)).value = "Nepali"
        ActiveSheet.Range(Cells(30 + i, 6), Cells(30 + i, 7)).value = "Math"
        ActiveSheet.Range(Cells(31 + i, 6), Cells(31 + i, 7)).value = "Science"
        ActiveSheet.Range(Cells(32 + i, 6), Cells(32 + i, 7)).value = "Social"
        ActiveSheet.Range(Cells(33 + i, 6), Cells(33 + i, 7)).value = "Account"
        ActiveSheet.Range(Cells(28 + i, 9), Cells(28 + i, 10)).value = "Sanskrit"
        ActiveSheet.Range(Cells(29 + i, 9), Cells(29 + i, 10)).value = "Population and Health"
        ActiveSheet.Range(Cells(30 + i, 9), Cells(30 + i, 10)).value = "Environment"
        ActiveSheet.Range(Cells(31 + i, 9), Cells(31 + i, 10)).value = "Economics"
        ActiveSheet.Range(Cells(32 + i, 9), Cells(32 + i, 10)).value = "Optional"
        ActiveSheet.Range(Cells(33 + i, 9), Cells(33 + i, 10)).value = "Others"
        
        'fill in information about teaching classes and subjects
        For Each rcell In Worksheets("Teacher Educational Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Educational Info").Cells(Rows.count, 2).End(xlUp).row + 1)
            If rcell.Text = Worksheets("Teacher Personal Info").Range("B" & teacherRow).Text Then
                ActiveSheet.Cells(28 + i, 2).value = returnYesNo(rcell.Offset(0, 8).value)
                ActiveSheet.Cells(29 + i, 2).value = returnYesNo(rcell.Offset(0, 9).value)
                ActiveSheet.Cells(30 + i, 2).value = returnYesNo(rcell.Offset(0, 10).value)
                ActiveSheet.Cells(31 + i, 2).value = returnYesNo(rcell.Offset(0, 11).value)
                ActiveSheet.Cells(32 + i, 2).value = returnYesNo(rcell.Offset(0, 12).value)
                ActiveSheet.Cells(33 + i, 2).value = returnYesNo(rcell.Offset(0, 13).value)
                ActiveSheet.Cells(28 + i, 5).value = returnYesNo(rcell.Offset(0, 14).value)
                ActiveSheet.Cells(29 + i, 5).value = returnYesNo(rcell.Offset(0, 15).value)
                ActiveSheet.Cells(30 + i, 5).value = returnYesNo(rcell.Offset(0, 16).value)
                ActiveSheet.Cells(31 + i, 5).value = returnYesNo(rcell.Offset(0, 17).value)
                ActiveSheet.Cells(32 + i, 5).value = returnYesNo(rcell.Offset(0, 18).value)
                ActiveSheet.Cells(33 + i, 5).value = returnYesNo(rcell.Offset(0, 19).value)
                ActiveSheet.Cells(34 + i, 5).value = returnYesNo(rcell.Offset(0, 20).value)
                ActiveSheet.Cells(28 + i, 8).value = returnYesNo(rcell.Offset(0, 21).value)
                ActiveSheet.Cells(29 + i, 8).value = returnYesNo(rcell.Offset(0, 22).value)
                ActiveSheet.Cells(30 + i, 8).value = returnYesNo(rcell.Offset(0, 23).value)
                ActiveSheet.Cells(31 + i, 8).value = returnYesNo(rcell.Offset(0, 24).value)
                ActiveSheet.Cells(32 + i, 8).value = returnYesNo(rcell.Offset(0, 25).value)
                ActiveSheet.Cells(33 + i, 8).value = returnYesNo(rcell.Offset(0, 26).value)
                ActiveSheet.Cells(28 + i, 11).value = returnYesNo(rcell.Offset(0, 27).value)
                ActiveSheet.Cells(29 + i, 11).value = returnYesNo(rcell.Offset(0, 28).value)
                ActiveSheet.Cells(30 + i, 11).value = returnYesNo(rcell.Offset(0, 29).value)
                ActiveSheet.Cells(31 + i, 11).value = returnYesNo(rcell.Offset(0, 30).value)
                ActiveSheet.Cells(32 + i, 11).value = returnYesNo(rcell.Offset(0, 31).value)
                ActiveSheet.Cells(33 + i, 11).value = returnYesNo(rcell.Offset(0, 32).value)
            End If
        Next rcell
        
        'qualification information
        With ActiveSheet.Range(Cells(35 + i, 1), Cells(35 + i, 12)) '"A35:L35"
            .Merge
            .value = "Qualification Information"
            .Font.Bold = True
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        'qualification information subfields
        For j = 1 To 4
            With ActiveSheet.Range(Cells(36 + i, 2 * j - 1), Cells(36 + i, 2 * j))
                .Merge
                .HorizontalAlignment = xlCenter
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            For k = 1 To 9
                With ActiveSheet.Range(Cells((36 + i) + k, 2 * j - 1), Cells((36 + i) + k, 2 * j))
                    .Merge
                    .HorizontalAlignment = xlCenter
                End With
                With ActiveSheet.Range(Cells((36 + i) + k, 9), Cells((36 + i) + k, 12))
                    .Merge
                    .HorizontalAlignment = xlCenter
                End With
            Next k
        Next j
        With ActiveSheet.Range(Cells(36 + i, 9), Cells(36 + i, 12))
            .Merge
            .value = "Faculty"
            .HorizontalAlignment = xlCenter
            .Interior.Color = RGB(166, 166, 166)
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        ActiveSheet.Range(Cells(36 + i, 1), Cells(36 + i, 2)).value = "Degree"
        ActiveSheet.Range(Cells(36 + i, 3), Cells(36 + i, 4)).value = "College/University"
        ActiveSheet.Range(Cells(36 + i, 5), Cells(36 + i, 6)).value = "Passed Division"
        ActiveSheet.Range(Cells(36 + i, 7), Cells(36 + i, 8)).value = "Passed Year"
        
        'now fill in teacher information about qualification
        j = 0
        For Each rcell In Worksheets("Teacher Educational History").Range("B" & startingRow & ":B" & Worksheets("Teacher Educational History").Cells(Rows.count, 2).End(xlUp).row + 1)
            If rcell.Text = Worksheets("Teacher Personal Info").Range("B" & teacherRow).Text Then
                ActiveSheet.Range(Cells(37 + i + j, 1), Cells(37 + i + j, 2)).value = returnString("N", rcell.Offset(0, 3).value)
                ActiveSheet.Range(Cells(37 + i + j, 3), Cells(37 + i + j, 4)).value = rcell.Offset(0, 4).value
                ActiveSheet.Range(Cells(37 + i + j, 5), Cells(37 + i + j, 6)).value = rcell.Offset(0, 7).value
                ActiveSheet.Range(Cells(37 + i + j, 7), Cells(37 + i + j, 8)).value = rcell.Offset(0, 5).value
                ActiveSheet.Range(Cells(37 + i + j, 9), Cells(37 + i + j, 12)).value = rcell.Offset(0, 6).value
                j = j + 1
            End If
        Next rcell
        
        'training information
        With ActiveSheet.Range(Cells(46 + i, 1), Cells(46 + i, 12)) '"A46:L46"
            .Merge
            .value = "Training Information"
            .Font.Bold = True
            .Interior.Color = RGB(166, 166, 166)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        'training information subfields
        For j = 1 To 4
            With ActiveSheet.Range(Cells(47 + i, 2 * j - 1), Cells(47 + i, 2 * j))
                .Merge
                .HorizontalAlignment = xlCenter
                .Interior.Color = RGB(166, 166, 166)
                .Borders.LineStyle = XlLineStyle.xlContinuous
            End With
            For k = 1 To 9
                With ActiveSheet.Range(Cells((47 + i) + k, 2 * j - 1), Cells((47 + i) + k, 2 * j))
                    .Merge
                    .HorizontalAlignment = xlCenter
                End With
                With ActiveSheet.Range(Cells((47 + i) + k, 9), Cells((47 + i) + k, 12))
                    .Merge
                    .HorizontalAlignment = xlCenter
                End With
            Next k
        Next j
        With ActiveSheet.Range(Cells(47 + i, 9), Cells(47 + i, 12))
            .Merge
            .value = "Organizer"
            .HorizontalAlignment = xlCenter
            .Interior.Color = RGB(166, 166, 166)
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        ActiveSheet.Range(Cells(47 + i, 1), Cells(47 + i, 2)).value = "Type"
        ActiveSheet.Range(Cells(47 + i, 3), Cells(47 + i, 4)).value = "Subject"
        ActiveSheet.Range(Cells(47 + i, 5), Cells(47 + i, 6)).value = "Year"
        ActiveSheet.Range(Cells(47 + i, 7), Cells(47 + i, 8)).value = "Duration"
        
        'finally fill in teacher information about training
        j = 0
        For Each rcell In Worksheets("Teacher Training Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Training Info").Cells(Rows.count, 2).End(xlUp).row + 1)
            If rcell.Text = Worksheets("Teacher Personal Info").Range("B" & teacherRow).Text Then
                ActiveSheet.Range(Cells(48 + i + j, 1), Cells(48 + i + j, 2)).value = returnString("AA", rcell.Offset(0, 4).value)
                ActiveSheet.Range(Cells(48 + i + j, 3), Cells(48 + i + j, 4)).value = rcell.Offset(0, 5).value
                ActiveSheet.Range(Cells(48 + i + j, 5), Cells(48 + i + j, 6)).value = rcell.Offset(0, 3).value
                ActiveSheet.Range(Cells(48 + i + j, 7), Cells(48 + i + j, 8)).value = rcell.Offset(0, 6).value
                ActiveSheet.Range(Cells(48 + i + j, 9), Cells(48 + i + j, 12)).value = rcell.Offset(0, 7).value
                j = j + 1
            End If
        Next rcell
        
        'add borders to all the cells in the table
        'ActiveSheet.Range(Cells(4 + i, 1), Cells(56 + i, 12)).Borders.LineStyle = XlLineStyle.xlContinuous '"A4:L56"
        'now the next teacher
        
        'now add a page break after 4 rows and setup page for printing
        With ActiveSheet
            .PageSetup.Orientation = xlPortrait
            .HPageBreaks.Add Before:=Rows(i + 57)
            .PageSetup.PaperSize = xlPaperA4
            .PageSetup.Zoom = 75
        End With
        
        
        i = i + 56
    Next ID
    ActiveSheet.Range("A1").Select
End Sub

'procedure that generates physical report depending on the year
Private Sub generatePhysicalReport(ByVal year As Integer)
    Dim sheetName As String
    Dim rowNo As Integer
    Dim j As Integer
    
    'get the row number depending on the required year
    rowNo = 0
    For Each rcell In Worksheets("Physical Details").Range("B" & startingRow & ":B" & Worksheets("Physical Details").Cells(Rows.count, 2).End(xlUp).row + 1)
        If (rcell.value - year = 0) Then
            rowNo = rcell.row
        End If
    Next rcell
    
    'exit if a row was not found
    If rowNo = 0 Then
        MsgBox "The Physical Details for the year has not been entered!"
        Exit Sub
    End If
    
    'set the name of the newly created sheet
    sheetName = "Physical Report"
    
    
    recreateSheet sheetName
    
    'hide all the unwanted cells
    ActiveSheet.Range("A1:l1").Merge
    ActiveSheet.Range("N:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A50:A65536").EntireRow.Hidden = True
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main" & i
        .Name = "cmdMain" & i
    End With
   'now the rest of the header
    With ActiveSheet.Range("A2:L2")
        .Merge
        .value = "Physical Infrastructure Report"
        '.Interior.Color = RGB(191, 191, 191)
        .RowHeight = 28
        .Font.Size = 20
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    
    
    'government fund status section
    With ActiveSheet.Range("A3:I3")
        .Merge
        .value = "Government Fund Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    With ActiveSheet.Range("A4:A5")
        .Merge
        .Interior.Color = RGB(191, 191, 191)
    End With
    With ActiveSheet.Range("B4:E4")
        .Merge
        .value = "1st quarter(in month)"
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    With ActiveSheet.Range("F4:I4")
        .Merge
        .value = "2nd quarter(in month)"
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    For i = 1 To 4
        ActiveSheet.Range("B5").Offset(0, i - 1).value = i
        ActiveSheet.Range("B5").Offset(0, i - 1).HorizontalAlignment = xlCenter
        ActiveSheet.Range("F5").Offset(0, i - 1).value = i
        ActiveSheet.Range("F5").Offset(0, i - 1).HorizontalAlignment = xlCenter
        'now the values
        ActiveSheet.Range("B6").Offset(0, i - 1).value = returnYesNo(CInt(Worksheets("Physical Details").Range("C" & rowNo).Offset(0, i).value))
        ActiveSheet.Range("B6").Offset(0, i - 1).HorizontalAlignment = xlCenter
        ActiveSheet.Range("F6").Offset(0, i - 1).value = returnYesNo(CInt(Worksheets("Physical Details").Range("H" & rowNo).Offset(0, i).value))
        ActiveSheet.Range("F6").Offset(0, i - 1).HorizontalAlignment = xlCenter
    Next i
    ActiveSheet.Range("A6").value = "Status"
    
    'school land status
    With ActiveSheet.Range("A7:I7")
        .Merge
        .value = "School Land Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    With ActiveSheet.Range("A8:A9")
        .Merge
        .value = "Status"
    End With
    ActiveSheet.Range("B8").Offset(0, 0).value = "Bigha"
    ActiveSheet.Range("B8").Offset(0, 1).value = "Kattha"
    ActiveSheet.Range("B8").Offset(0, 2).value = "Dhur"
    ActiveSheet.Range("B8").Offset(0, 4).value = "Ropani"
    ActiveSheet.Range("B8").Offset(0, 5).value = "Aana"
    ActiveSheet.Range("B8").Offset(0, 6).value = "Paisa"
    ActiveSheet.Range("B8").Offset(0, 7).value = "Dam"
    'now the values
    For i = 0 To 7
        If i < 3 Then
            ActiveSheet.Range("B9").Offset(0, i).value = Worksheets("Physical Details").Range("AT" & rowNo).Offset(0, i).value
        ElseIf i > 3 Then
            ActiveSheet.Range("B9").Offset(0, i).value = Worksheets("Physical Details").Range("AT" & rowNo).Offset(0, i - 1).value
        End If
    Next i
    
    
    
    'room status
    With ActiveSheet.Range("A10:I10")
        .Merge
        .value = "Room Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    For i = 0 To 2
        If i < 2 Then
            ActiveSheet.Range("A11").Offset(0, i * 3).value = "Class"
            ActiveSheet.Range("A11").Offset(0, 1 + i * 3).value = "Rooms"
            ActiveSheet.Range("A11").Offset(0, 2 + i * 3).value = "Pakki"
        Else
            ActiveSheet.Range("A11").Offset(0, i * 3).value = "Others"
            ActiveSheet.Range("A11").Offset(0, 1 + i * 3).value = "Rooms"
        End If
    Next i
    ActiveSheet.Range("A11").Offset(1, 0).value = "ECD"
    ActiveSheet.Range("B12").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 0).value
    ActiveSheet.Range("B12").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 1).value
    ActiveSheet.Range("A11").Offset(2, 0).value = "Grade 1"
    ActiveSheet.Range("B13").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 2).value
    ActiveSheet.Range("B13").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 3).value
    ActiveSheet.Range("A11").Offset(3, 0).value = "Grade 2"
    ActiveSheet.Range("B14").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 4).value
    ActiveSheet.Range("B14").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 5).value
    ActiveSheet.Range("A11").Offset(4, 0).value = "Grade 3"
    ActiveSheet.Range("B15").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 6).value
    ActiveSheet.Range("B15").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 7).value
    ActiveSheet.Range("A11").Offset(5, 0).value = "Grade 4"
    ActiveSheet.Range("B16").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 8).value
    ActiveSheet.Range("B16").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 9).value
    ActiveSheet.Range("A11").Offset(6, 0).value = "Grade 5"
    ActiveSheet.Range("B17").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 10).value
    ActiveSheet.Range("B17").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 11).value
    ActiveSheet.Range("A11").Offset(1, 3).value = "Grade 6"
    ActiveSheet.Range("E12").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 12).value
    ActiveSheet.Range("E12").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 13).value
    ActiveSheet.Range("A11").Offset(2, 3).value = "Grade 7"
    ActiveSheet.Range("E13").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 14).value
    ActiveSheet.Range("E13").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 15).value
    ActiveSheet.Range("A11").Offset(3, 3).value = "Grade 8"
    ActiveSheet.Range("E14").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 16).value
    ActiveSheet.Range("E14").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 17).value
    ActiveSheet.Range("A11").Offset(4, 3).value = "Grade 9"
    ActiveSheet.Range("E15").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 18).value
    ActiveSheet.Range("E15").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 19).value
    ActiveSheet.Range("A11").Offset(5, 3).value = "Grade 10"
    ActiveSheet.Range("E16").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 20).value
    ActiveSheet.Range("E16").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 21).value
    ActiveSheet.Range("A11").Offset(6, 3).value = "Grade 11"
    ActiveSheet.Range("E17").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 22).value
    ActiveSheet.Range("E17").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 23).value
    ActiveSheet.Range("A11").Offset(7, 3).value = "Grade 12"
    ActiveSheet.Range("E18").Offset(0, 0).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 24).value
    ActiveSheet.Range("E18").Offset(0, 1).value = Worksheets("Physical Details").Range("BA" & rowNo).Offset(0, 25).value
    'now the rest of the rooms
    ActiveSheet.Range("A11").Offset(1, 6).value = "Office"
    ActiveSheet.Range("A11").Offset(1, 7).value = Worksheets("Physical Details").Range("FW" & rowNo).value
    ActiveSheet.Range("A11").Offset(2, 6).value = "Computer"
    ActiveSheet.Range("A11").Offset(2, 7).value = Worksheets("Physical Details").Range("FV" & rowNo).value
    ActiveSheet.Range("A11").Offset(3, 6).value = "Sports"
    ActiveSheet.Range("A11").Offset(3, 7).value = Worksheets("Physical Details").Range("FY" & rowNo).value
    ActiveSheet.Range("A11").Offset(4, 6).value = "Library"
    ActiveSheet.Range("A11").Offset(4, 7).value = Worksheets("Physical Details").Range("FZ" & rowNo).value
    
    
    'now the granr amount status
    With ActiveSheet.Range("A19:I19")
        .Merge
        .value = "Grant Amount Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    'merge the required cells
    For i = 0 To 5
        ActiveSheet.Range(Cells(20 + i, 4), Cells(20 + i, 5)).Merge
        ActiveSheet.Range(Cells(20 + i, 6), Cells(20 + i, 7)).Merge
        ActiveSheet.Range(Cells(20 + i, 8), Cells(20 + i, 9)).Merge
    Next i
    ActiveSheet.Range("A20").Offset(0, 0).value = "Materials"
    ActiveSheet.Range("A20").Offset(0, 1).value = "ECD/PPC"
    ActiveSheet.Range("A20").Offset(0, 2).value = "Primary"
    ActiveSheet.Range("A20").Offset(0, 3).value = "Lower Secondary"
    ActiveSheet.Range("A20").Offset(0, 5).value = "Secondary"
    ActiveSheet.Range("A20").Offset(0, 7).value = "Higher Secondary"
    ActiveSheet.Range("A20").Offset(1, 0).value = "Books"
    ActiveSheet.Range("A20").Offset(2, 0).value = "Scholarship"
    ActiveSheet.Range("A20").Offset(3, 0).value = "PCF"
    ActiveSheet.Range("A20").Offset(4, 0).value = "Grant for CAS"
    ActiveSheet.Range("A20").Offset(5, 0).value = "School Operational Grants"
    'now fill in the Grant Amount information
    For i = 0 To 4
        ActiveSheet.Range("B21").Offset(i, 0).value = Worksheets("Physical Details").Range("CA" & rowNo).Offset(0, i * 5).value
        ActiveSheet.Range("B21").Offset(i, 1).value = Worksheets("Physical Details").Range("CA" & rowNo).Offset(0, i * 5 + 1).value
        ActiveSheet.Range("B21").Offset(i, 2).value = Worksheets("Physical Details").Range("CA" & rowNo).Offset(0, i * 5 + 2).value
        ActiveSheet.Range("B21").Offset(i, 4).value = Worksheets("Physical Details").Range("CA" & rowNo).Offset(0, i * 5 + 3).value
        ActiveSheet.Range("B21").Offset(i, 6).value = Worksheets("Physical Details").Range("CA" & rowNo).Offset(0, i * 5 + 4).value
    Next i
    
    
    
    'now the textbook,curriculum and other status
    With ActiveSheet.Range("A26:I26")
        .Merge
        .value = "Textbook, Curriculum and Other Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    'merge the required cells
    For i = 0 To 7
        ActiveSheet.Range(Cells(27 + i, 4), Cells(27 + i, 5)).Merge
        ActiveSheet.Range(Cells(27 + i, 6), Cells(27 + i, 7)).Merge
        ActiveSheet.Range(Cells(27 + i, 8), Cells(27 + i, 9)).Merge
    Next i
    ActiveSheet.Range("A27").Offset(0, 0).value = "Materials"
    ActiveSheet.Range("A27").Offset(0, 1).value = "ECD/PPC"
    ActiveSheet.Range("A27").Offset(0, 2).value = "Primary"
    ActiveSheet.Range("A27").Offset(0, 3).value = "Lower Secondary"
    ActiveSheet.Range("A27").Offset(0, 5).value = "Secondary"
    ActiveSheet.Range("A27").Offset(0, 7).value = "Higher Secondary"
    ActiveSheet.Range("A27").Offset(1, 0).value = "Textbook"
    ActiveSheet.Range("A27").Offset(2, 0).value = "Teacher's Guide"
    ActiveSheet.Range("A27").Offset(3, 0).value = "Child Material"
    ActiveSheet.Range("A27").Offset(4, 0).value = "Book Corner"
    ActiveSheet.Range("A27").Offset(5, 0).value = "Availibility of Curriculum"
    ActiveSheet.Range("A27").Offset(6, 0).value = "Local Curriculum"
    ActiveSheet.Range("A27").Offset(7, 0).value = "Reference Materials"
    'now fill in the Textboook curriculum and other status
    For i = 0 To 6
        'display yes/no for availibility of curriculum
        If i = 4 Then
            ActiveSheet.Range("B32:I32").HorizontalAlignment = xlRight
            ActiveSheet.Range("B28").Offset(i, 0).value = returnYesNo(Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5).value)
            ActiveSheet.Range("B28").Offset(i, 1).value = returnYesNo(Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 1).value)
            ActiveSheet.Range("B28").Offset(i, 2).value = returnYesNo(Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 2).value)
            ActiveSheet.Range("B28").Offset(i, 4).value = returnYesNo(Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 3).value)
            ActiveSheet.Range("B28").Offset(i, 6).value = returnYesNo(Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 4).value)
        Else
            ActiveSheet.Range("B28").Offset(i, 0).value = Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5).value
            ActiveSheet.Range("B28").Offset(i, 1).value = Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 1).value
            ActiveSheet.Range("B28").Offset(i, 2).value = Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 2).value
            ActiveSheet.Range("B28").Offset(i, 4).value = Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 3).value
            ActiveSheet.Range("B28").Offset(i, 6).value = Worksheets("Physical Details").Range("CZ" & rowNo).Offset(0, i * 5 + 4).value
        End If
        
    Next i
    
    'now the new construction and rehabilitation status
    With ActiveSheet.Range("A35:I35")
        .Merge
        .value = "Fund Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    For i = 0 To 1
        ActiveSheet.Range("A36").Offset(0, i * 4).value = "Activities"
        ActiveSheet.Range("A36").Offset(0, i * 4 + 1).value = "DEO"
        ActiveSheet.Range("A36").Offset(0, i * 4 + 2).value = "VDC/NP/DDC"
        ActiveSheet.Range("A36").Offset(0, i * 4 + 3).value = "Other Agencies"
    Next i
    ActiveSheet.Range("A36").Offset(1, 0).value = "New Building"
    ActiveSheet.Range("A36").Offset(2, 0).value = "Building Rehabilitation"
    ActiveSheet.Range("A36").Offset(3, 0).value = "New Classroom"
    ActiveSheet.Range("A36").Offset(4, 0).value = "Classroom Rehabilitation"
    ActiveSheet.Range("A36").Offset(1, 4).value = "Toilet"
    ActiveSheet.Range("A36").Offset(2, 4).value = "Toilet for Girls"
    ActiveSheet.Range("A36").Offset(3, 4).value = "Water"
    ActiveSheet.Range("A36").Offset(4, 4).value = "Book Corner"
    'now fill in the information
    For j = 0 To 3
        For i = 0 To 2
            ActiveSheet.Range("B37").Offset(j, i).value = Worksheets("Physical Details").Range("EI" & rowNo).Offset(0, j * 3 + i).value
            ActiveSheet.Range("F37").Offset(j, i).value = Worksheets("Physical Details").Range("EU" & rowNo).Offset(0, j * 3 + i).value
        Next i
    Next j
    
   'now the school opening days status
   With ActiveSheet.Range("A41:I41")
        .Merge
        .value = "School Opening Days Status"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    ActiveSheet.Range("A42").Offset(0, 0).value = "Details"
    ActiveSheet.Range("A42").Offset(0, 1).value = "Planned"
    ActiveSheet.Range("A42").Offset(0, 2).value = "Actual"
    ActiveSheet.Range("A42").Offset(1, 0).value = "Total Open Days"
    ActiveSheet.Range("A42").Offset(2, 0).value = "Teaching"
    ActiveSheet.Range("A42").Offset(3, 0).value = "Exam"
    ActiveSheet.Range("A42").Offset(4, 0).value = "Extra Curricular"
    ActiveSheet.Range("A42").Offset(5, 0).value = "Public Holidays"
    ActiveSheet.Range("A42").Offset(6, 0).value = "Festivals"
    ActiveSheet.Range("A42").Offset(7, 0).value = "Other Activities"
    'fill in information about holidays
    For j = 0 To 6
        For i = 0 To 1
            ActiveSheet.Range("B43").Offset(j, i).value = Worksheets("Physical Details").Range("FG" & rowNo).Offset(0, j * 2 + i).value
        Next i
    Next j
    
    
    'now the activities in sidebar
    With ActiveSheet.Range("J3:L3")
        .Merge
        .value = "Activities"
        .Interior.Color = RGB(191, 191, 191)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    For i = 0 To 36
        With ActiveSheet.Range("J" & (i + 4) & ":K" & (i + 4))
            .Merge
            If i = 4 Or i = 10 Or i = 13 Or i = 14 Or i = 15 Or i = 19 Or i = 22 Or i = 27 Or i = 29 Or i = 30 Or i > 33 Then
                .Font.Bold = True
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .Interior.Color = RGB(191, 191, 191)
            End If
        End With
        
        With ActiveSheet.Range("L" & (i + 4))
            .HorizontalAlignment = xlRight
        End With
    Next i
    ActiveSheet.Range("J4").Offset(0, 0).value = "SIP"
    ActiveSheet.Range("J4").Offset(1, 0).value = "Social Audit"
    ActiveSheet.Range("J4").Offset(2, 0).value = "Financial Audit"
    ActiveSheet.Range("J4").Offset(3, 0).value = "SMC Meeting"
    ActiveSheet.Range("J4").Offset(4, 0).value = "External Monitoring"
    ActiveSheet.Range("J4").Offset(5, 0).value = "RP"
    ActiveSheet.Range("J4").Offset(6, 0).value = "SS"
    ActiveSheet.Range("J4").Offset(7, 0).value = "DEO"
    ActiveSheet.Range("J4").Offset(8, 0).value = "DOE/MOE"
    ActiveSheet.Range("J4").Offset(9, 0).value = "Others"
    ActiveSheet.Range("J4").Offset(10, 0).value = "Medical Facility"
    ActiveSheet.Range("J4").Offset(11, 0).value = "Distance"
    ActiveSheet.Range("J4").Offset(12, 0).value = "First Aid Service"
    ActiveSheet.Range("J4").Offset(13, 0).value = "Child Club"
    ActiveSheet.Range("J4").Offset(14, 0).value = "Water Source"
    ActiveSheet.Range("J4").Offset(15, 0).value = "Toilet Status"
    ActiveSheet.Range("J4").Offset(16, 0).value = "Boys"
    ActiveSheet.Range("J4").Offset(17, 0).value = "Girls"
    ActiveSheet.Range("J4").Offset(18, 0).value = "Teachers"
    ActiveSheet.Range("J4").Offset(19, 0).value = "Urinal"
    ActiveSheet.Range("J4").Offset(20, 0).value = "Boys"
    ActiveSheet.Range("J4").Offset(21, 0).value = "Teachers"
    ActiveSheet.Range("J4").Offset(22, 0).value = "Total Buildings"
    ActiveSheet.Range("J4").Offset(23, 0).value = "Pakki"
    ActiveSheet.Range("J4").Offset(24, 0).value = "Kachhi"
    ActiveSheet.Range("J4").Offset(25, 0).value = "Retrofitting"
    ActiveSheet.Range("J4").Offset(26, 0).value = "Rehabilitation"
    ActiveSheet.Range("J4").Offset(27, 0).value = "Playground"
    ActiveSheet.Range("J4").Offset(28, 0).value = "Enough Space"
    ActiveSheet.Range("J4").Offset(29, 0).value = "Compound"
    ActiveSheet.Range("J4").Offset(30, 0).value = "Electricity"
    ActiveSheet.Range("J4").Offset(31, 0).value = "Computers"
    ActiveSheet.Range("J4").Offset(32, 0).value = "Teaching"
    ActiveSheet.Range("J4").Offset(33, 0).value = "Learning"
    ActiveSheet.Range("J4").Offset(34, 0).value = "Internet"
    ActiveSheet.Range("J4").Offset(35, 0).value = "Books in Library"
    
    'now fill in data for sidebar activities
    ActiveSheet.Range("L4").Offset(0, 0).value = Worksheets("Physical Details").Cells(rowNo, 13).value
    ActiveSheet.Range("L4").Offset(1, 0).value = Worksheets("Physical Details").Cells(rowNo, 14).value
    ActiveSheet.Range("L4").Offset(2, 0).value = Worksheets("Physical Details").Cells(rowNo, 15).value
    ActiveSheet.Range("L4").Offset(3, 0).value = Worksheets("Physical Details").Cells(rowNo, 16).value
    ActiveSheet.Range("L4").Offset(5, 0).value = Worksheets("Physical Details").Cells(rowNo, 17).value
    ActiveSheet.Range("L4").Offset(6, 0).value = Worksheets("Physical Details").Cells(rowNo, 18).value
    ActiveSheet.Range("L4").Offset(7, 0).value = Worksheets("Physical Details").Cells(rowNo, 19).value
    ActiveSheet.Range("L4").Offset(8, 0).value = Worksheets("Physical Details").Cells(rowNo, 20).value
    ActiveSheet.Range("L4").Offset(9, 0).value = Worksheets("Physical Details").Cells(rowNo, 21).value
    ActiveSheet.Range("L4").Offset(11, 0).value = Worksheets("Physical Details").Cells(rowNo, 22).value
    ActiveSheet.Range("L4").Offset(12, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 23).value))
    ActiveSheet.Range("L4").Offset(13, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 24).value))
    ActiveSheet.Range("L4").Offset(14, 0).value = Worksheets("Physical Details").Cells(rowNo, 25).value
    ActiveSheet.Range("L4").Offset(16, 0).value = Worksheets("Physical Details").Cells(rowNo, 26).value - Worksheets("Physical Details").Cells(rowNo, 27).value
    ActiveSheet.Range("L4").Offset(17, 0).value = Worksheets("Physical Details").Cells(rowNo, 27).value
    ActiveSheet.Range("L4").Offset(18, 0).value = Worksheets("Physical Details").Cells(rowNo, 28).value
    ActiveSheet.Range("L4").Offset(20, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 31).value))
    ActiveSheet.Range("L4").Offset(21, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 30).value))
    'total buildings
    ActiveSheet.Range("L4").Offset(22, 0).value = Worksheets("Physical Details").Cells(rowNo, 32).value
    ActiveSheet.Range("L4").Offset(23, 0).value = Worksheets("Physical Details").Cells(rowNo, 33).value
    ActiveSheet.Range("L4").Offset(24, 0).value = Worksheets("Physical Details").Cells(rowNo, 34).value
    ActiveSheet.Range("L4").Offset(25, 0).value = Worksheets("Physical Details").Cells(rowNo, 36).value
    ActiveSheet.Range("L4").Offset(26, 0).value = Worksheets("Physical Details").Cells(rowNo, 37).value
    'playground status
    ActiveSheet.Range("L4").Offset(27, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 38).value))
    ActiveSheet.Range("L4").Offset(28, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 39).value))
    'compound
    ActiveSheet.Range("L4").Offset(29, 0).value = returnString("W", Worksheets("Physical Details").Cells(rowNo, 35).value)
    'electricity and computers
    ActiveSheet.Range("L4").Offset(30, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 40).value))
    ActiveSheet.Range("L4").Offset(31, 0).value = Worksheets("Physical Details").Cells(rowNo, 41).value
    ActiveSheet.Range("L4").Offset(32, 0).value = Worksheets("Physical Details").Cells(rowNo, 42).value
    ActiveSheet.Range("L4").Offset(33, 0).value = Worksheets("Physical Details").Cells(rowNo, 43).value
    ActiveSheet.Range("L4").Offset(34, 0).value = returnYesNo(CInt(Worksheets("Physical Details").Cells(rowNo, 44).value))
    ActiveSheet.Range("L4").Offset(35, 0).value = Worksheets("Physical Details").Cells(rowNo, 45).value
    
    
    
    'now the blank space at the bottom
    With ActiveSheet.Range("D42:K49")
         .Merge
        .Interior.Color = RGB(191, 191, 191)
        .Borders.LineStyle = XlLineStyle.xlContinuous
    End With
    
    'now add a page break after 4 rows and setup page for printing
    With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        .PageSetup.PaperSize = xlPaperA4
        .PageSetup.Zoom = 75
        .PageSetup.TopMargin = Application.InchesToPoints(0.2)
        .PageSetup.BottomMargin = Application.InchesToPoints(0.2)
    End With
    
    'now autofit every cell
    ActiveSheet.Range("A:L").EntireColumn.AutoFit
End Sub

'generate the student tracking card
Private Sub generateStudentTrackingCard(ByVal selectedClass As Integer, ByVal selectedStudent As String, ByVal selectedCaste As Integer, ByVal selectedGender As Integer, ByVal selectedDisability As Integer)
    Dim studentIDs As Collection
    Dim sheetName As String
    Dim stduentRow As Integer
    Dim i As Long
    Dim j As Integer
    
    Set studentIDs = getStudentIDs(CInt(Worksheets("General").Range("B5").value), selectedClass, selectedStudent, selectedCaste, selectedGender, selectedDisability)
    If studentIDs.count = 0 Then
        MsgBox ("There are no Students to Display!")
        Exit Sub
    End If
    
    'set the name of the newly created sheet
    sheetName = "Student Tracking Card"
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main"
        .Name = "cmdMain" & i
    End With
    
    ActiveSheet.Range("O:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1:M3").Merge
    
    i = 1
    For Each row In studentIDs
        With ActiveSheet.Range(Cells(i + 3, 1), Cells(i + 7, 1))
            .Merge
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        With ActiveSheet.Range(Cells(i + 3, 11), Cells(i + 7, 13))
            .Merge
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'the report header
        With ActiveSheet.Range(Cells(i + 3, 2), Cells(i + 5, 10))
            .Merge
            .value = "Student Report/Transfer Card"
            '.Interior.Color = RGB(191, 191, 191)
            .Font.Bold = True
            .Font.Size = 17
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        With ActiveSheet.Range(Cells(i + 6, 2), Cells(i + 7, 10))
            .Merge
            .value = "Provided By: " & UCase(Worksheets("General").Range("D9").value) & "," & Mid(Worksheets("General").Range("F1").Text, 2, 9)
            '.Interior.Color = RGB(191, 191, 191)
            .Font.Bold = True
            .Font.Size = 15
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        
        'now the student information
        With ActiveSheet.Cells(i + 8, 1)
            .Interior.Color = RGB(191, 191, 191)
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .value = "Student Information"
        End With
        With ActiveSheet.Range(Cells(i + 8, 2), Cells(i + 8, 13))
            .Interior.Color = RGB(191, 191, 191)
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .Merge
        End With
        For j = 0 To 3
            With ActiveSheet.Range(Cells(i + j + 9, 2), Cells(i + j + 9, 6))
                .Merge
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Cells(i + j + 9, 1)
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
            End With
        Next j
        ActiveSheet.Cells(i + 9, 1).value = "Student Name"
        ActiveSheet.Cells(i + 9, 2).value = UCase(Worksheets("Student Tracking").Cells(row, 4).value & " " & Worksheets("Student Tracking").Cells(row, 5).value)
        ActiveSheet.Cells(i + 10, 1).value = "Caste/Ethnicity/Group"
        ActiveSheet.Cells(i + 10, 2).value = Worksheets("Student Tracking").Cells(row, 11).value
        ActiveSheet.Cells(i + 11, 1).value = "Father's Name"
        ActiveSheet.Cells(i + 11, 2).value = UCase(Worksheets("Student Tracking").Cells(row, 7).value)
        ActiveSheet.Cells(i + 12, 1).value = "Mother's Name"
        ActiveSheet.Cells(i + 12, 2).value = UCase(Worksheets("Student Tracking").Cells(row, 8).value)
        For j = 0 To 2
            With ActiveSheet.Range(Cells(i + j + 9, 7), Cells(i + j + 9, 10))
                .Merge
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
            End With
            With ActiveSheet.Range(Cells(i + j + 9, 11), Cells(i + j + 9, 13))
                .Borders.LineStyle = XlLineStyle.xlContinuous
                .HorizontalAlignment = xlCenter
                .Merge
            End With
        Next j
        ActiveSheet.Cells(i + 9, 7).value = "Registration ID"
        ActiveSheet.Cells(i + 9, 11).value = Worksheets("Student Tracking").Cells(row, 1).Text & Worksheets("Student Tracking").Cells(row, 3).Text
        ActiveSheet.Cells(i + 9, 11).NumberFormat = "00000"
        ActiveSheet.Cells(i + 10, 7).value = "Sex"
        ActiveSheet.Cells(i + 10, 11).value = Worksheets("Student Tracking").Cells(row, 6).value
        ActiveSheet.Cells(i + 11, 7).value = "Date of Birth"
        ActiveSheet.Cells(i + 11, 11).value = Worksheets("Student Tracking").Cells(row, 9).value
        With ActiveSheet.Range(Cells(i + 12, 7), Cells(i + 12, 13))
            .Merge
            .Interior.Color = RGB(191, 191, 191)
            .Borders.LineStyle = XlLineStyle.xlContinuous
        End With
        
        'now other detail information
        With ActiveSheet.Range(Cells(i + 13, 1), Cells(i + 13, 13))
            .Merge
            .Interior.Color = RGB(191, 191, 191)
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .Font.Bold = True
            .HorizontalAlignment = xlLeft
            .value = "Other Details"
        End With
        For j = 0 To 6
            ActiveSheet.Cells(i + j + 14, 1).Borders.LineStyle = XlLineStyle.xlContinuous
        Next j
        ActiveSheet.Cells(i + 14, 1).value = "Tracking Items"
        ActiveSheet.Cells(i + 15, 1).value = "School"
        ActiveSheet.Cells(i + 16, 1).value = "Class"
        ActiveSheet.Cells(i + 17, 1).value = "Scholarship"
        ActiveSheet.Cells(i + 18, 1).value = "Disability"
        ActiveSheet.Cells(i + 19, 1).value = "Marks in Final Exams (%)"
        ActiveSheet.Cells(i + 20, 1).value = "Attendance (Days)"
        For j = 0 To 11
            ActiveSheet.Cells(i + 14, 2).Offset(0, j).value = 2070 + j
        Next j
        With ActiveSheet.Range(Cells(i + 14, 2), Cells(i + 20, 13))
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
        End With
        'now the tracking values
        For j = 0 To 11
            If Len(Worksheets("Student Tracking").Cells(row, 15 + j).value) > 0 Then
                ActiveSheet.Cells(i + 15, 2 + j).value = Mid(Worksheets("General").Range("F1").Text, 2, 9)
                ActiveSheet.Cells(i + 16, 2 + j).value = Worksheets("Student Tracking").Cells(row, 15 + j).value
                ActiveSheet.Cells(i + 17, 2 + j).value = Worksheets("Student Tracking").Cells(row, 27 + j).value
                ActiveSheet.Cells(i + 18, 2 + j).value = Worksheets("Student Tracking").Cells(row, 12).value
                ActiveSheet.Cells(i + 19, 2 + j).value = getStudentPercentage(Worksheets("Student Tracking").Cells(row, 3).Text, 2070 + j, convertClassToInteger(Worksheets("Student Tracking").Cells(row, 15 + j).value))
                ActiveSheet.Cells(i + 20, 2 + j).value = Worksheets("Student Tracking").Cells(row, 39 + j).value
                
                'now autofit the columns
                For k = 0 To 5
                    ActiveSheet.Cells(i + k + 15, 2 + j).EntireColumn.AutoFit
                Next k
            End If
        Next j
        
        
        'now the footer stuff
        ActiveSheet.Cells(i + 25, 1).value = "Signature"
        ActiveSheet.Cells(i + 25, 1).Borders(xlEdgeTop).LineStyle = xlContinuous
        ActiveSheet.Cells(i + 26, 1).value = "Head Teacher"
        
        ActiveSheet.Cells(i + 25, 6).value = "Signature"
        ActiveSheet.Range(Cells(i + 25, 6), Cells(i + 25, 7)).Borders(xlEdgeTop).LineStyle = xlContinuous
        ActiveSheet.Cells(i + 26, 6).value = "SMC Chairperson"
        
        ActiveSheet.Cells(i + 25, 12).value = "Signature"
        ActiveSheet.Range(Cells(i + 25, 12), Cells(i + 25, 13)).Borders(xlEdgeTop).LineStyle = xlContinuous
        ActiveSheet.Cells(i + 26, 12).value = "Parent"
        
        With ActiveSheet.Range(Cells(i + 29, 1), Cells(i + 29, 6))
            .Merge
            .value = "Student Report Card Printed on |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Font.Bold = True
        End With
        With ActiveSheet.Range(Cells(i + 30, 1), Cells(i + 30, 8))
            .Merge
            .value = "This card is not transferable and hence should be returned to school if lost and found"
            .Font.Bold = True
        End With
        
        'now add a page break after 4 rows and setup page for printing
        With ActiveSheet
            .PageSetup.Orientation = xlLandscape
            .HPageBreaks.Add Before:=Rows(i + 35)
            .PageSetup.PaperSize = xlPaperA4
            .PageSetup.Zoom = 90
        End With
        
        
        
        
        i = i + 35
    Next row
    
     'now autofit only the first cell
    ActiveSheet.Range("A1").EntireColumn.AutoFit
    
    
End Sub

'generate the marksheet of a student
Private Sub generateStudentMarksheet(ByVal year As Integer, ByVal selectedClass As Integer, ByVal selectedStudent As String, ByVal selectedCaste As Integer, ByVal selectedGender As Integer, ByVal selectedDisability As Integer)
    Dim studentIDs As Collection
    Dim sheetName As String
    Dim subjectCount, subjectColumnNo, lastRow As Integer
    Dim studentMarksRowNo As Long
    Dim fullMarksSum As Double
    Dim obtainedMarksSum As Double
    Dim studentFailed As Boolean
    Dim marksEnteredFlag As Boolean
    
    Dim i As Long
    Dim j As Integer
    
    Set studentIDs = getStudentIDs(year, selectedClass, selectedStudent, selectedCaste, selectedGender, selectedDisability)
    If studentIDs.count = 0 Then
        MsgBox ("There are no Students to Display!")
        Exit Sub
    End If
    
    'set the name of the newly created sheet
    sheetName = "Student Marksheet"
    
    recreateSheet sheetName
    
    'set the button with the following parameters:left,top,width,height
    Set cmdMain = ActiveSheet.Buttons.Add(4, 4, 51.75, 20.75)
    With cmdMain
        .Placement = xlFreeFloating
        .OnAction = "Display_MainMenu"
        .Caption = "<< Main"
        .Name = "cmdMain" & i
    End With
    
    ActiveSheet.Range("L:IV").EntireColumn.Hidden = True
    ActiveSheet.Range("A1:M3").Merge
    
    i = 1
    For Each row In studentIDs
    
        'header of the marksheet
        With ActiveSheet.Range(Cells(i + 3, 1), Cells(i + 3, 8))
            .Merge
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .value = "SCHOOL LEVEL ANNUAL EXAMINATION"
            '.Interior.Color = RGB(191, 191, 191)
            .Font.Bold = True
            .Font.Size = 15
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With
        With ActiveSheet.Range(Cells(i + 4, 1), Cells(i + 4, 8))
            .Merge
            .value = "MARKSHEET"
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range(Cells(i + 5, 1), Cells(i + 5, 8))
            .Merge
            .value = "CLASS : " & selectedClass
            .Borders(xlEdgeRight).LineStyle = xlContinuous
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .HorizontalAlignment = xlCenter
        End With
        
        'space for logo
        With ActiveSheet.Range(Cells(i + 3, 9), Cells(i + 5, 10))
            .Merge
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .VerticalAlignment = xlCenter
            .HorizontalAlignment = xlCenter
            .value = "LOGO"
        End With
        
        'merge cells for dob
        ActiveSheet.Range(Cells(i + 8, 4), Cells(i + 8, 5)).Merge
        ActiveSheet.Range(Cells(i + 8, 4), Cells(i + 8, 5)).HorizontalAlignment = xlLeft
        ActiveSheet.Range(Cells(i + 8, 9), Cells(i + 8, 10)).Merge
        ActiveSheet.Range(Cells(i + 8, 9), Cells(i + 8, 10)).HorizontalAlignment = xlLeft
        
        'now the student information
        ActiveSheet.Cells(i + 7, 1).value = "THE MARKS SECURED BY "
        ActiveSheet.Cells(i + 7, 4).value = UCase(Worksheets("Student Tracking").Cells(row, 4).value & " " & Worksheets("Student Tracking").Cells(row, 5).value)
        ActiveSheet.Cells(i + 8, 1).value = "DATE OF BIRTH (BS)"
        ActiveSheet.Cells(i + 8, 4).value = Worksheets("Student Tracking").Cells(row, 9).value
        ActiveSheet.Cells(i + 8, 8).value = "(AD)"
        ActiveSheet.Cells(i + 8, 9).value = Worksheets("Student Tracking").Cells(row, 10).value
        ActiveSheet.Cells(i + 9, 1).value = "SON/DAUGHTER OF "
        ActiveSheet.Cells(i + 9, 4).value = UCase(Worksheets("Student Tracking").Cells(row, 7).value)
        ActiveSheet.Cells(i + 9, 7).value = "AND"
        ActiveSheet.Cells(i + 9, 8).value = UCase(Worksheets("Student Tracking").Cells(row, 8).value)
        ActiveSheet.Cells(i + 10, 1).value = "REGISTRATION NO "
        ActiveSheet.Cells(i + 10, 4).value = Worksheets("Student Tracking").Cells(row, 3).Text
        ActiveSheet.Cells(i + 10, 4).NumberFormat = "00000"
        ActiveSheet.Cells(i + 11, 1).value = "OF "
        ActiveSheet.Cells(i + 11, 4).value = Worksheets("General").Range("D9").value
        ActiveSheet.Cells(i + 12, 1).value = "IN THE SCHOOL LEVEL ANNUAL EXAMINATION OF "
        ActiveSheet.Cells(i + 12, 6).value = year
        ActiveSheet.Cells(i + 12, 8).value = "ARE GIVEN BELOW "
        
        'add borders on the right and left of the marksheet
        With ActiveSheet.Range(Cells(i + 3, 1), Cells(i + 13, 1))
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
        End With
        With ActiveSheet.Range(Cells(i + 3, 10), Cells(i + 30, 10))
            .Borders(xlEdgeRight).LineStyle = xlContinuous
        End With
        
        
        'now the subjects and marks
        With ActiveSheet.Range(Cells(i + 14, 1), Cells(i + 14, 6))
            .Merge
            .value = "SUBJECTS"
            .RowHeight = 30
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Cells(i + 14, 7)
            .Merge
            .value = "FULL MARKS"
            .ColumnWidth = 9
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
            .WrapText = True
        End With
        With ActiveSheet.Cells(i + 14, 8)
            .Merge
            .value = "PASS MARKS"
            .ColumnWidth = 9
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
            .WrapText = True
        End With
        With ActiveSheet.Cells(i + 14, 9)
            .Merge
            .value = "OBTAINED MARKS"
            .ColumnWidth = 10
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
            .WrapText = True
        End With
        With ActiveSheet.Cells(i + 14, 10)
            .Merge
            .value = "REMARKS"
            .ColumnWidth = 9
            .Borders.LineStyle = XlLineStyle.xlContinuous
            .HorizontalAlignment = xlCenter
        End With
        For j = 1 To 14
            With ActiveSheet.Range(Cells(i + j + 14, 1), Cells(i + j + 14, 6))
                .Merge
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
            End With
            ActiveSheet.Cells(i + j + 14, 7).Borders(xlEdgeRight).LineStyle = xlContinuous
            ActiveSheet.Cells(i + j + 14, 8).Borders(xlEdgeRight).LineStyle = xlContinuous
            ActiveSheet.Cells(i + j + 14, 9).Borders(xlEdgeRight).LineStyle = xlContinuous
        Next j
        ActiveSheet.Range(Cells(i + 28, 1), Cells(i + 28, 10)).Borders(xlEdgeBottom).LineStyle = xlContinuous
        With ActiveSheet.Cells(i + 29, 1)
            .value = "FULL MARKS"
            .ColumnWidth = 11
        End With
        With ActiveSheet.Range(Cells(i + 29, 2), Cells(i + 29, 3))
            .Merge
            .RowHeight = 18
            .value = "1ST DIV WITH DIST."
        End With
        ActiveSheet.Cells(i + 29, 4).value = "1ST DIV"
        ActiveSheet.Cells(i + 29, 5).value = "2ND DIV"
        ActiveSheet.Cells(i + 29, 6).value = "3RD DIV"
        With ActiveSheet.Range(Cells(i + 29, 7), Cells(i + 29, 8))
            .Merge
            .value = "GRAND TOTAL"
            .HorizontalAlignment = xlCenter
        End With
        With ActiveSheet.Range(Cells(i + 30, 7), Cells(i + 30, 8))
            .Merge
            .value = "RESULT"
            .HorizontalAlignment = xlCenter
        End With
        ActiveSheet.Range(Cells(i + 29, 1), Cells(i + 30, 10)).Borders.LineStyle = XlLineStyle.xlContinuous
        ActiveSheet.Range(Cells(i + 30, 2), Cells(i + 30, 3)).Merge
        
        'now fill in the subjects and marks
        'identify the row no in "Student Marks" sheet
        lastRow = Worksheets("Student Marks").Cells(Rows.count, 3).End(xlUp).row + 1
        marksEnteredFlag = False
        For Each rcell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & lastRow)
            If (rcell.Offset(0, -1).value - year = 0) And (rcell.Text = Worksheets("Student Tracking").Range("C" & row).Text) And (convertClassToInteger(rcell.Offset(0, 1).value) - selectedClass = 0) Then
                studentMarksRowNo = rcell.row
                marksEnteredFlag = True
            End If
        Next rcell
        
        'set the value of the student's row in the marksheet sheet even if
        'marks has not been entered
        If Not marksEnteredFlag Then
            studentMarksRowNo = lastRow + 1
        End If
        
        'fill in the subject names,full marks and pass marks
        subjectColumnNo = Worksheets("Subjects").Range("A" & startingRow).Offset(0, selectedClass * 3).column
        lastRow = Worksheets("Subjects").Cells(Rows.count, subjectColumnNo).End(xlUp).row + 1
        fullMarksSum = 0
        obtainedMarksSum = 0
        subjectCount = 0
        studentFailed = False
        j = 1
        For Each rcell In Worksheets("Subjects").Range(Cells(startingRow, subjectColumnNo).address, Cells(lastRow, subjectColumnNo).address)
            ActiveSheet.Cells(i + j + 14, 1).value = rcell.value
            ActiveSheet.Cells(i + j + 14, 7).value = rcell.Offset(0, 1).value
            ActiveSheet.Cells(i + j + 14, 8).value = rcell.Offset(0, 2).value
            ActiveSheet.Cells(i + j + 14, 9).value = Worksheets("Student Marks").Range("D" & studentMarksRowNo).Offset(0, j).value
            ActiveSheet.Range(Cells(i + j + 14, 7), Cells(i + j + 14, 9)).HorizontalAlignment = xlCenter
            
            'now add an asterisk after the obtained marks if it is less than the pass marks
            If Worksheets("Student Marks").Range("D" & studentMarksRowNo).Offset(0, j).value - rcell.Offset(0, 2).value < 0 Then
                studentFailed = True
                ActiveSheet.Cells(i + j + 14, 9).value = ActiveSheet.Cells(i + j + 14, 9).value & "*"
            End If
            
            If Len(rcell.value) > 0 Then
                subjectCount = subjectCount + 1
            End If
            fullMarksSum = fullMarksSum + rcell.Offset(0, 1).value
            obtainedMarksSum = obtainedMarksSum + Worksheets("Student Marks").Range("D" & studentMarksRowNo).Offset(0, j).value
            j = j + 1
        Next rcell
        'fill in the fullmarks,and division scores
        With ActiveSheet.Range(Cells(i + 30, 1), Cells(i + 30, 6))
            .HorizontalAlignment = xlCenter
        End With
        ActiveSheet.Range(Cells(i + 29, 9), Cells(i + 30, 9)).HorizontalAlignment = xlCenter
        ActiveSheet.Cells(i + 30, 1).value = fullMarksSum
        ActiveSheet.Cells(i + 30, 2).value = 0.8 * fullMarksSum
        ActiveSheet.Cells(i + 30, 4).value = 0.6 * fullMarksSum
        ActiveSheet.Cells(i + 30, 5).value = 0.45 * fullMarksSum
        ActiveSheet.Cells(i + 30, 6).value = 0.32 * fullMarksSum
        ActiveSheet.Cells(i + 29, 9).value = obtainedMarksSum
        
        'finally the percentage of the student and the division
        If (Not obtainedMarksSum = 0) And (Not subjectCount = 0) Then
            ActiveSheet.Cells(i + 30, 9).value = Round(obtainedMarksSum / subjectCount, 2) & "%"
        End If
        
        With ActiveSheet.Range(Cells(i + 29, 10), Cells(i + 30, 10))
            .Merge
            .VerticalAlignment = xlCenter
            .HorizontalAlignment = xlCenter
            .RowHeight = 30
            .WrapText = True
        End With
        'display the division of the student only if he/she has passed in all subjects
        If Not studentFailed Then
            If obtainedMarksSum >= (0.8 * fullMarksSum) Then
                ActiveSheet.Range(Cells(i + 29, 10), Cells(i + 30, 10)).value = ActiveSheet.Cells(i + 29, 2).value
            ElseIf obtainedMarksSum >= (0.6 * fullMarksSum) And obtainedMarksSum < (0.8 * fullMarksSum) Then
                ActiveSheet.Range(Cells(i + 29, 10), Cells(i + 30, 10)).value = ActiveSheet.Cells(i + 29, 4).value
            ElseIf obtainedMarksSum >= (0.45 * fullMarksSum) And obtainedMarksSum < (0.6 * fullMarksSum) Then
                ActiveSheet.Range(Cells(i + 29, 10), Cells(i + 30, 10)).value = ActiveSheet.Cells(i + 29, 5).value
            ElseIf obtainedMarksSum >= (0.32 * fullMarksSum) And obtainedMarksSum < (0.45 * fullMarksSum) Then
                ActiveSheet.Range(Cells(i + 29, 10), Cells(i + 30, 10)).value = ActiveSheet.Cells(i + 29, 6).value
            End If
        End If
        
        'now the footer
        ActiveSheet.Cells(i + 32, 1).value = "1) A - Absent"
        ActiveSheet.Cells(i + 33, 1).value = "2) W - Withheld"
        ActiveSheet.Cells(i + 34, 1).value = "3) C - Subject Cancelled"
        ActiveSheet.Cells(i + 32, 9).value = "Date: "
        
        'now add a page break after 3 rows and setup page for printing
        With ActiveSheet
            .PageSetup.Orientation = xlPortrait
            .HPageBreaks.Add Before:=Rows(i + 38)
            .PageSetup.PaperSize = xlPaperA4
            .PageSetup.LeftMargin = Application.InchesToPoints(0.24)
            .PageSetup.RightMargin = Application.InchesToPoints(0.24)
        End With
        
        i = i + 38
    Next row
End Sub

Attribute VB_Name = "frmSchool"
Attribute VB_Base = "0{AE16C48C-F3C9-4B3C-B3D0-C31FD2AB6D58}{52B6CEB2-9B2C-443D-AE3C-87C3E38598A1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdOk_Click()
    If cboSchoolName.Text = "" Then
        MsgBox "Please Enter the Name of Your School"
    ElseIf cboSchoolType.Text = "" Then
        MsgBox "Please Enter the type of School"
    Else
        'add the name of school in the table header of general sheet
        Worksheets("General").Range("F1").value = cboSchoolName.Text
        
        'now add a row in the general sheet
        Worksheets("General").Activate
        Range("A9").Select
        
        activeCell.value = Mid(cboSchoolName.Text, 2, 2)
        activeCell.Offset(0, 1).value = Mid(cboSchoolName.Text, 4, 3)
        activeCell.Offset(0, 2).value = Mid(cboSchoolName.Text, 7, 4)
        activeCell.Offset(0, 3).value = Mid(cboSchoolName.Text, 13)
        activeCell.Offset(0, 4).value = returnNumber("U", cboSchoolType)

        Unload Me
        Worksheets("Buttons").Activate
    End If
End Sub

Private Sub UserForm_Initialize()
    'initialise the schoolname combobox
    With cboSchoolName
        For i = 1 To Worksheets("Information").Cells(Rows.count, 1).End(xlUp).row
            .AddItem (Worksheets("Information").Range("A" & i).Text)
        Next i
            
        'set the name of school if it has already been selected
        If Not Len(Worksheets("General").Range("f1").Text) = 0 Then
            .Enabled = False
            .value = Worksheets("General").Range("f1").Text
        End If
    End With
    
    'now the school type dropdown
    With cboSchoolType
        For i = 2 To Worksheets("Information").Cells(Rows.count, 21).End(xlUp).row
            .AddItem (Worksheets("Information").Range("U" & i).Text)
        Next i
    End With
End Sub
Attribute VB_Name = "frmStudentOptions"
Attribute VB_Base = "0{AA8E8091-3D1D-4FE7-8276-4412BEEEE538}{7E64D9A5-E4E1-43C7-8883-C8A904A1F3B8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdAddStudent_Click()
    Unload Me
    frmAddStudent.Show
End Sub

Private Sub cmdEditStudent_Click()
     Unload Me
     frmEditSheet.Show
End Sub

Private Sub cmdUpdateStudent_Click()
    Unload Me
    frmUpdateStudentOptions.Show
End Sub
Attribute VB_Name = "frmTeacherAcademics"
Attribute VB_Base = "0{81CBDDF7-4701-4536-AFB5-2844F73069C7}{A2A0790A-75C9-4316-8E74-21405D32D46B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher As Double

Private Sub cboTeacherQualification_Change()
    'disable education checkbox when qualification is PHD,SLC or <SLC
    If cboTeacherQualification.ListIndex = 0 Or cboTeacherQualification.ListIndex > 3 Then
        CheckBoxEduCourse.Enabled = False
        txtStream.Enabled = False
        txtStream.value = ""
    Else
        CheckBoxEduCourse.Enabled = True
        txtStream.Enabled = True
    End If
End Sub

Private Sub cmdNext_Click()
     'validate educational qualification
    If Me.cboTeacherQualification.value = "" Then
        MsgBox ("Please select Teacher Qualification")
        cboTeacherQualification.SetFocus
        Exit Sub
    End If
    
    
    'validate classes taught by teacher
    If Me.chkEcd.value = False And Me.chkClass1.value = False And Me.chkClass2.value = False And Me.chkClass3.value = False And Me.chkClass4.value = False And Me.chkClass5.value = False And Me.chkClass6.value = False And Me.chkClass7.value = False And Me.chkClass8.value = False And Me.chkClass9.value = False And Me.chkClass10.value = False And Me.chkClass11.value = False And Me.chkClass12.value = False Then
        MsgBox ("Please Select at least one Class taught by Teacher")
        chkEcd.SetFocus
        Exit Sub
    End If
    
    'validate subjects taught by teacher
    If Me.chkEnglish.value = False And Me.chkNepali.value = False And Me.chkMathematics.value = False And Me.chkScience.value = False And Me.chkSocial.value = False And Me.chkAccounts.value = False And Me.chkSanskrit.value = False And Me.chkPopnHealth.value = False And Me.chkEnvironment.value = False And Me.chkEconomics.value = False And Me.chkOptional.value = False And Me.chkOthers.value = False Then
        MsgBox ("Please Select at least one Subject taught by Teacher")
        chkEnglish.SetFocus
        Exit Sub
    End If
    
    'check education course
    Dim EduCourse As Integer
    If CheckBoxEduCourse.value = True Then
        EduCourse = 1
    Else
        EduCourse = 0
    End If
    
    'to activate the Teacher Educational Info worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Educational Info").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Educational Info").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid matches the one on table
            'and the record is of the current year
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = txtTeacherID.value
    frmTeachingHistory.txtTeacherID.value = activeCell.Offset(0, 1).value
    frmTeacherTraining.txtTeacherID.value = activeCell.Offset(0, 1).value
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 3).value = returnNumber("N", cboTeacherQualification)
    activeCell.Offset(0, 4).value = StrConv(txtBoard.value, vbProperCase)
    activeCell.Offset(0, 5).value = cboYear.value
    activeCell.Offset(0, 6).value = StrConv(txtStream.value, vbProperCase)
    activeCell.Offset(0, 7).value = cboDivision.value
    activeCell.Offset(0, 8).value = EduCourse

    'for classes taught
    activeCell.Offset(0, 9).value = Abs(chkEcd.value * 1)
    activeCell.Offset(0, 10).value = Abs(chkClass1.value * 1)
    activeCell.Offset(0, 11).value = Abs(chkClass2.value * 1)
    activeCell.Offset(0, 12).value = Abs(chkClass3.value * 1)
    activeCell.Offset(0, 13).value = Abs(chkClass4.value * 1)
    activeCell.Offset(0, 14).value = Abs(chkClass5.value * 1)
    activeCell.Offset(0, 15).value = Abs(chkClass6.value * 1)
    activeCell.Offset(0, 16).value = Abs(chkClass7.value * 1)
    activeCell.Offset(0, 17).value = Abs(chkClass8.value * 1)
    activeCell.Offset(0, 18).value = Abs(chkClass9.value * 1)
    activeCell.Offset(0, 19).value = Abs(chkClass10.value * 1)
    activeCell.Offset(0, 20).value = Abs(chkClass11.value * 1)
    activeCell.Offset(0, 21).value = Abs(chkClass12.value * 1)
    
    'for subjects taught
    activeCell.Offset(0, 22).value = Abs(chkEnglish.value * 1)
    activeCell.Offset(0, 23).value = Abs(chkNepali.value * 1)
    activeCell.Offset(0, 24).value = Abs(chkMathematics.value * 1)
    activeCell.Offset(0, 25).value = Abs(chkScience.value * 1)
    activeCell.Offset(0, 26).value = Abs(chkSocial.value * 1)
    activeCell.Offset(0, 27).value = Abs(chkAccounts.value * 1)
    activeCell.Offset(0, 28).value = Abs(chkSanskrit.value * 1)
    activeCell.Offset(0, 29).value = Abs(chkPopnHealth.value * 1)
    activeCell.Offset(0, 30).value = Abs(chkEnvironment.value * 1)
    activeCell.Offset(0, 31).value = Abs(chkEconomics.value * 1)
    activeCell.Offset(0, 32).value = Abs(chkOptional.value * 1)
    activeCell.Offset(0, 33).value = Abs(chkOthers.value * 1)

    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
    
    
    Unload Me
    
    'donot display teaching history and educational history for private teachers
    'skip them and navigate directly to teacher training(s)
    If (Worksheets("General").Range("E9").value - 1) = 0 Then
        'initialise the next form values and set the respective teacherFormMode
        'whether the next form needs to be opened in add or edit mode
        setTeacherFormMode "Teacher Teaching History", frmTeachingHistory.txtTeacherID.value
        If teacherFormMode = 2 Then
            frmTeachingHistory.initializeValues (frmTeachingHistory.txtTeacherID.value & "-" & "1")
        End If
        
        frmTeachingHistory.Show
    Else
        'initialise the next form values and set the respective teacherFormMode
        'whether the next form needs to be opened in add or edit mode
        setTeacherFormMode "Teacher Training Info", frmTeacherTraining.txtTeacherID.value
        If teacherFormMode = 2 Then
            frmTeacherTraining.initializeValues (frmTeacherTraining.txtTeacherID.value & "-" & "1")
        End If
        
        frmTeacherTraining.Show
    End If
    
End Sub

Private Sub txtBoard_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

'removed days atttended
'Private Sub txtDaysAttended_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'Call allowOnlyNumbers(KeyAscii)
'End Sub

Private Sub txtStream_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyAlphabets(KeyAscii)
End Sub


Private Sub UserForm_Initialize()
    'for initialising educational qualification
    With Me.cboTeacherQualification
        .list() = Application.Transpose(Worksheets("Information").Range("N2:N" & Worksheets("Information").Cells(Rows.count, 14).End(xlUp).row).value)
    End With
    
    
    'to initialise year combobox
    With Me.cboYear
        For i = 2071 To 2000 Step -1
            .AddItem i
        Next
    End With
    
    'for initialising division
    With Me.cboDivision
        .list() = Application.Transpose(Worksheets("Information").Range("O2:O" & Worksheets("Information").Cells(Rows.count, 15).End(xlUp).row).value)
    End With
End Sub


'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Educational Info").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = teacherIdentification
    
    For Each rcell In Worksheets("Teacher Educational Info").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid matches the one on table
        If rcell.Text = teacherIdentification And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
            Me.cboTeacherQualification.value = returnString("N", rcell.Offset(0, 2).value)
            Me.txtBoard.value = rcell.Offset(0, 3).value
            Me.cboYear.value = rcell.Offset(0, 4).value
            Me.txtStream.value = rcell.Offset(0, 5).value
            Me.cboDivision.value = rcell.Offset(0, 6).value
            
            If rcell.Offset(0, 7).value = 1 Then
                CheckBoxEduCourse.value = True
            ElseIf rcell.Offset(0, 7).value = 0 Then
                CheckBoxEduCourse.value = False
            End If
            
            Me.chkEcd.value = CBool(rcell.Offset(0, 8).value)
            Me.chkClass1.value = CBool(rcell.Offset(0, 9).value)
            Me.chkClass2.value = CBool(rcell.Offset(0, 10).value)
            Me.chkClass3.value = CBool(rcell.Offset(0, 11).value)
            Me.chkClass4.value = CBool(rcell.Offset(0, 12).value)
            Me.chkClass5.value = CBool(rcell.Offset(0, 13).value)
            Me.chkClass6.value = CBool(rcell.Offset(0, 14).value)
            Me.chkClass7.value = CBool(rcell.Offset(0, 15).value)
            Me.chkClass8.value = CBool(rcell.Offset(0, 16).value)
            Me.chkClass9.value = CBool(rcell.Offset(0, 17).value)
            Me.chkClass10.value = CBool(rcell.Offset(0, 18).value)
            Me.chkClass11.value = CBool(rcell.Offset(0, 19).value)
            Me.chkClass12.value = CBool(rcell.Offset(0, 20).value)
            
            Me.chkEnglish.value = CBool(rcell.Offset(0, 21).value)
            Me.chkNepali.value = CBool(rcell.Offset(0, 22).value)
            Me.chkMathematics.value = CBool(rcell.Offset(0, 23).value)
            Me.chkScience.value = CBool(rcell.Offset(0, 24).value)
            Me.chkSocial.value = CBool(rcell.Offset(0, 25).value)
            Me.chkAccounts.value = CBool(rcell.Offset(0, 26).value)
            Me.chkSanskrit.value = CBool(rcell.Offset(0, 27).value)
            Me.chkPopnHealth.value = CBool(rcell.Offset(0, 28).value)
            Me.chkEnvironment.value = CBool(rcell.Offset(0, 29).value)
            Me.chkEconomics.value = CBool(rcell.Offset(0, 30).value)
            Me.chkOptional.value = CBool(rcell.Offset(0, 31).value)
            Me.chkOthers.value = CBool(rcell.Offset(0, 32).value)
        End If
    Next
End Sub

Attribute VB_Name = "frmTeacherEduHistory"
Attribute VB_Base = "0{DAFE5151-DF27-4789-815E-92FD34C3FE6F}{BC529B8C-A894-4134-8DFE-8E4F668E4CF0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher, SN As Integer
Dim validationFailed As Boolean

Private Sub cboTeacherQualification_Change()
    'disable stream checkbox when qualification is phd,slc or under slc
    If cboTeacherQualification.ListIndex = 0 Or cboTeacherQualification.ListIndex > 3 Then
        txtStream.Enabled = False
        txtStream.value = ""
    Else
        txtStream.Enabled = True
    End If
End Sub

Private Sub cmdNext_Click()

    'if the qualification has not been filled then navigate to the next form
    'without saving anything
    If Not Me.cboTeacherQualification.ListIndex = -1 Then
        Call addNewQualification
        If validationFailed = True Then
           Exit Sub
        End If
    End If
    
    frmTeacherTraining.txtTeacherID.value = frmTeacherEduHistory.txtTeacherID.value
    Unload Me
        
    'initialise the next form values and set the respective teacherFormMode
    'whether the next form needs to be opened in add or edit mode
    setTeacherFormMode "Teacher Training Info", frmTeacherTraining.txtTeacherID.value
    If teacherFormMode = 2 Then
        frmTeacherTraining.initializeValues (frmTeacherTraining.txtTeacherID.value & "-" & "1")
    End If
    
    frmTeacherTraining.Show
End Sub

Private Sub cmdSave_Click()
    Call addNewQualification
    
    If validationFailed = True Then
        Exit Sub
    End If
    
    'for reload of form to add new history and reset mode to add
    Unload Me
    teacherFormMode = 1
    frmTeacherEduHistory.txtTeacherID.value = teacherID
    frmTeacherEduHistory.Show
    
End Sub

'procedure that validates and adds a new row that signifies
'a qualification level for a teacher
Private Sub addNewQualification()
    'validation failed needs to be set to false at the very beginning
    validationFailed = False
    
    'validate educational qualification
    If Me.cboTeacherQualification.value = "" Then
        MsgBox ("Please select Teacher Qualification")
        validationFailed = True
        cboTeacherQualification.SetFocus
        Exit Sub
    End If
    
    'validate board/University
    'If Me.txtBoard.value = "" Then
    '    MsgBox ("Please enter Board/University")
    '    validationFailed = True
    '    txtBoard.SetFocus
    '    Exit Sub
    'End If
    
     'validate year
    If Me.cboYear.value = "" Then
        MsgBox ("Please select Year")
        validationFailed = True
        cboYear.SetFocus
        Exit Sub
    End If
    
    'validate stream
    'If Me.txtStream.value = "" Then
     '   MsgBox ("Please enter stream")
     '   validationFailed = True
     '   txtStream.SetFocus
     '   Exit Sub
    'End If
    
     'validate division
    'If Me.cboDivision.value = "" Then
    '    MsgBox ("Please select Division")
    '    validationFailed = True
    '    cboDivision.SetFocus
    '    Exit Sub
    'End If
    
    teacherID = txtTeacherID.value
    
    'to activate the Teacher Education History worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Educational History").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Educational History").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid,year and SN
            'matches the one on table
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    'determine and set sn before any other fields
    'we dont need to generate sn in edit mode
    If teacherFormMode = 1 Then
        activeCell.Offset(0, 3).value = returnHistorySN("Teacher Educational History", "B", "C", txtTeacherID.value)
    End If
    
    
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = teacherID
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 4).value = returnNumber("N", cboTeacherQualification)
    activeCell.Offset(0, 5).value = StrConv(txtBoard.value, vbProperCase)
    activeCell.Offset(0, 6).value = cboYear.value
    activeCell.Offset(0, 7).value = StrConv(txtStream.value, vbProperCase)
    activeCell.Offset(0, 8).value = cboDivision.value
    
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
End Sub
Private Sub UserForm_Initialize()
    'for initialising educational qualification
    With Me.cboTeacherQualification
        .list() = Application.Transpose(Worksheets("Information").Range("N2:N" & Worksheets("Information").Cells(Rows.count, 14).End(xlUp).row).value)
    End With
    
    
    'to initialise year combobox
    With Me.cboYear
        For i = 2071 To 2000 Step -1
            .AddItem i
        Next
    End With
    
    'for initialising division
    With Me.cboDivision
        .list() = Application.Transpose(Worksheets("Information").Range("O2:O" & Worksheets("Information").Cells(Rows.count, 15).End(xlUp).row).value)
    End With
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Educational History").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = Split(teacherIdentification, "-")(0)
    SN = CInt(Split(teacherIdentification, "-")(1))
    
    For Each rcell In Worksheets("Teacher Educational History").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid,year and SN
        'matches the one on table
        If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
            Me.cboTeacherQualification.value = returnString("N", rcell.Offset(0, 3).value)
            Me.txtBoard.value = rcell.Offset(0, 4).value
            Me.cboYear.value = rcell.Offset(0, 5).value
            Me.txtStream.value = rcell.Offset(0, 6).value
            Me.cboDivision.value = rcell.Offset(0, 7).value
        End If
    Next
End Sub
Attribute VB_Name = "frmTeacherIncome"
Attribute VB_Base = "0{251BB841-F020-4806-B5BF-8A4174F6F9F9}{6A8F6B9F-3B9C-472C-90A8-C8DC9CEADCC9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher As Double

'to store whether the current teacher is a permanent one,whether he/she is Head Teacher
'and the current level of the Teacher
Dim teacherPosition, teacherType, teacherLevel As Integer

Private Sub cmdSave_Click()
    'validate Monthly Salary
    If txtMonthlySalary.Text = "" Then
        MsgBox ("Enter Monthly Salary")
        txtMonthlySalary.SetFocus
        Exit Sub
    End If
    
    'validate Grade Number
    If txtGrade.Text = "" Then
        MsgBox ("Enter Grade Number")
        txtGrade.SetFocus
        Exit Sub
    End If
    
    'validate Grade Amount
    If txtGradeAmount.Text = "" Then
        MsgBox ("Enter Grade Amount")
        txtGradeAmount.SetFocus
        Exit Sub
    End If
    
    'to activate the Teacher Income worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Income").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Income").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid and year
            'matches the one on table
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If

    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = txtTeacherID.value
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 3).value = txtMonthlySalary.value
    activeCell.Offset(0, 4).value = txtGrade.value
    activeCell.Offset(0, 5).value = txtGradeAmount.value
    activeCell.Offset(0, 6).value = txtHTAllowance.value
    activeCell.Offset(0, 7).value = txtRemoteAllowance.value
    activeCell.Offset(0, 8).value = txtInsuranceAllowance.value
    activeCell.Offset(0, 9).value = txtMahangiAllowance.value
    activeCell.Offset(0, 10).value = txtDressAllowance.value
    activeCell.Offset(0, 11).value = txtFestivalAllowance.value
    activeCell.Offset(0, 12).value = txtMedicalAllowance.value
    activeCell.Offset(0, 13).value = txtProvidentFund.value
    activeCell.Offset(0, 14).value = txtCIFund.value
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
    
    Unload Me
    MsgBox "Successfully Saved!"
End Sub

Private Sub txtCIFund_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtDressAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtFestivalAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGradeAmount_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtGradeAmount_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    computeDependentFunds
End Sub

Private Sub txtHTAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtInsuranceAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtMahangiAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtMedicalAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtMonthlySalary_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub



Private Sub txtMonthlySalary_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    computeDependentFunds
End Sub

Private Sub txtProvidentFund_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

Private Sub txtRemoteAllowance_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Income").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = Split(teacherIdentification, "-")(0)
    
    For Each rcell In Worksheets("Teacher Income").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid and year
        'matches the one on table
        If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
            Me.txtMonthlySalary.value = rcell.Offset(0, 2).value
            Me.txtGrade.value = rcell.Offset(0, 3).value
            Me.txtGradeAmount.value = rcell.Offset(0, 4).value
            Me.txtHTAllowance.value = rcell.Offset(0, 5).value
            Me.txtRemoteAllowance.value = rcell.Offset(0, 6).value
            Me.txtInsuranceAllowance.value = rcell.Offset(0, 7).value
            Me.txtMahangiAllowance.value = rcell.Offset(0, 8).value
            Me.txtDressAllowance.value = rcell.Offset(0, 9).value
            Me.txtFestivalAllowance.value = rcell.Offset(0, 10).value
            Me.txtMedicalAllowance.value = rcell.Offset(0, 11).value
            Me.txtProvidentFund.value = rcell.Offset(0, 12).value
            Me.txtCIFund.value = rcell.Offset(0, 13).value
        End If
    Next
End Sub

Private Sub UserForm_Click()

End Sub

'procedure that sets,enables or disables allowances and/or funds depending on the teacher type
'teacher position and so on
'@param teacherID->identifies a teacher uniquely in the "Teacher Personal Info" sheet
Public Sub finalizeAllowances(ByVal teacherID As String)
    teacherPosition = 0
    teacherType = 0
    teacherLevel = 0
    
    For Each rcell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & Worksheets("Teacher Personal Info").Cells(Rows.count, 2).End(xlUp).row)
        'check the values of teacher type and teacher position
        If rcell.Text = frmTeacherIncome.txtTeacherID.value Then
            teacherLevel = rcell.Offset(0, 19).value
            teacherPosition = rcell.Offset(0, 21).value
            teacherType = rcell.Offset(0, 22).value
        End If
    Next
    
    'disable fields that are generated automatically
    frmTeacherIncome.txtHTAllowance.Enabled = False
    frmTeacherIncome.txtDressAllowance.Enabled = False
    frmTeacherIncome.txtProvidentFund.Enabled = False
    frmTeacherIncome.txtFestivalAllowance.Enabled = False
    frmTeacherIncome.txtMahangiAllowance.Enabled = False
    frmTeacherIncome.txtInsuranceAllowance.Enabled = False
    
    
    'every teacher gets the mahangi bhatta
    frmTeacherIncome.txtMahangiAllowance.value = Worksheets("Information").Range("T2").value
    
    'clear the value of HT Allowance if he/she is not a head teacher
    If Not teacherType = 2 Then
        frmTeacherIncome.txtHTAllowance.value = 0
    ElseIf teacherType = 2 Then
        'if the teacher is indeed a head teacher then set the allowance depending on the level
        frmTeacherIncome.txtHTAllowance.value = returnString("X", teacherLevel)
    End If
    
    'dress allowance,festival allowance,insurance and PF are for permanent teachers only
    'festival allowance and PF will be generated when user inputs the monthly salary
    'and grade amount
    If teacherPosition = 2 Then
        'dress allowance is provided for permanent teachers only
        frmTeacherIncome.txtDressAllowance.value = Worksheets("Information").Range("Y2").value
        frmTeacherIncome.txtInsuranceAllowance.value = Worksheets("Information").Range("S2").value
    Else
        frmTeacherIncome.txtDressAllowance.value = 0
        frmTeacherIncome.txtInsuranceAllowance.value = 0
    End If
    
End Sub

'sub procedure that calculates ans sets the values of PF and festival allowance
'when user presses a key on the monthly salary or grade amount
Private Sub computeDependentFunds()
    Dim monthlySalary, gradeAmount As Long
    
    If frmTeacherIncome.txtMonthlySalary.value = "" Or Len(frmTeacherIncome.txtMonthlySalary.value) = 0 Then
        monthlySalary = 0
    Else
        monthlySalary = frmTeacherIncome.txtMonthlySalary.value
    End If
    
    If frmTeacherIncome.txtGradeAmount.value = "" Or Len(frmTeacherIncome.txtGradeAmount.value) = 0 Then
        gradeAmount = 0
    Else
        gradeAmount = frmTeacherIncome.txtGradeAmount.value
    End If
    
    'PF and Festival Allowance are only for the permanent teachers
    If teacherPosition = 2 Then
        frmTeacherIncome.txtProvidentFund.value = 0.1 * (monthlySalary + gradeAmount)
        frmTeacherIncome.txtFestivalAllowance.value = (monthlySalary + gradeAmount)
    End If
End Sub
Attribute VB_Name = "frmTeacherLeave"
Attribute VB_Base = "0{8E849072-DDBA-4BC2-84ED-7BCA67794297}{104FCFFC-CE2E-437C-B93F-2221835324C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher, SN As Integer
Dim validationFailed As Boolean

Private Sub cboLeaveToMonth_Change()

End Sub

Private Sub cmdNext_Click()
    
    'if the type has not been filled then navigate to the next form
    'without saving anything
    If Not Me.cboLeaveType.value = "" Then
         Call addNewLeave
        If validationFailed = True Then
           Exit Sub
        End If
    End If
    
    frmTeacherIncome.txtTeacherID.value = Split(frmTeacherLeave.txtTeacherID.value, "-")(0)
    Unload Me
        
    'initialise the next form values and set the respective teacherFormMode
    'whether the next form needs to be opened in add or edit mode
    setTeacherFormMode "Teacher Income", frmTeacherIncome.txtTeacherID.value
    If teacherFormMode = 2 Then
        frmTeacherIncome.initializeValues (frmTeacherIncome.txtTeacherID.value & "-" & "1")
    End If
    
    frmTeacherIncome.finalizeAllowances (frmTeacherIncome.txtTeacherID.value)
    frmTeacherIncome.Show
End Sub

Private Sub cmdSave_Click()
    Call addNewLeave
    
    If validationFailed = True Then
        Exit Sub
    End If
    
    'for reload of form to add new history
    Unload Me
    teacherFormMode = 1
    frmTeacherLeave.txtTeacherID.value = teacherID
    frmTeacherLeave.Show
End Sub

'procedure that validates and adds leave information corresponding to one row
Private Sub addNewLeave()
    
    'validation failed needs to be set to false at the very beginning
    validationFailed = False
    
    'validate Leave type
    If cboLeaveType.value = "" Then
        MsgBox ("Please select Leave Type")
        validationFailed = True
        cboLeaveType.SetFocus
        Exit Sub
    End If
    
    ' check for validity of Leave starting date
    If (cboLeaveFromYear.value = "") Or (cboLeaveFromMonth.value = "") Or (cboLeaveFromDay.value = "") Then
        MsgBox ("Please Enter Leave Starting From Date")
        validationFailed = True
        Exit Sub
    End If
    
    ' check for validity of Leave end date
    If (cboLeaveToYear.value = "") Or (cboLeaveToMonth.value = "") Or (cboLeaveToDay.value = "") Then
        MsgBox ("Please Enter Leave End Date")
        validationFailed = True
        Exit Sub
    End If
    
    Dim leaveStart, leaveEnd As String
    leaveStart = cboLeaveFromDay.value & "/" & cboLeaveFromMonth.value & "/" & cboLeaveFromYear.value
    leaveEnd = cboLeaveToDay.value & "/" & cboLeaveToMonth.value & "/" & cboLeaveToYear.value
    
    If leaveStart > leaveEnd Then
        MsgBox "Incorrect Leave From/To Dates!"
        validationFailed = True
        Exit Sub
    End If
    
    teacherID = txtTeacherID.value
    
    'to activate the Teacher Leave Info worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Leave Info").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Leave Info").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid,year and SN
            'matches the one on table
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    'determine and set sn before any other fields
    'we dont need to generate sn in edit mode
    If teacherFormMode = 1 Then
        activeCell.Offset(0, 3).value = returnHistorySN("Teacher Leave Info", "B", "C", txtTeacherID.value)
    End If
    
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = teacherID
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 4).value = returnNumber("Q", cboLeaveType)
    activeCell.Offset(0, 5).value = leaveStart
    activeCell.Offset(0, 6).value = leaveEnd
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
End Sub
Private Sub UserForm_Initialize()
    'for initialising leave type
    With Me.cboLeaveType
        .list() = Application.Transpose(Worksheets("Information").Range("Q2:Q" & Worksheets("Information").Cells(Rows.count, 17).End(xlUp).row).value)
    End With
    
    'for leave from year
    With Me.cboLeaveFromYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
    End With
    
    'for leave to year
    With Me.cboLeaveToYear
        For i = (Worksheets("General").Range("B5").value + 2) To 2000 Step -1
            .AddItem i
        Next
    End With
    
    'for leave from month
    With Me.cboLeaveFromMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
    End With
    
    'for leave to month
    With Me.cboLeaveToMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
    End With
    
    'for leave from day
    With Me.cboLeaveFromDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
    End With
    
    'for leave to day
    With Me.cboLeaveToDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
    End With
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Leave Info").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = Split(teacherIdentification, "-")(0)
    SN = CInt(Split(teacherIdentification, "-")(1))
    
    For Each rcell In Worksheets("Teacher Leave Info").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid,year and SN
        'matches the one on table
        If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
            Me.cboLeaveType.value = returnString("Q", rcell.Offset(0, 3).value)
            Me.cboLeaveFromDay.value = Split(rcell.Offset(0, 4).value, "/")(0)
            Me.cboLeaveFromMonth.value = Split(rcell.Offset(0, 4).value, "/")(1)
            Me.cboLeaveFromYear.value = Split(rcell.Offset(0, 4).value, "/")(2)
            Me.cboLeaveToDay.value = Split(rcell.Offset(0, 5).value, "/")(0)
            Me.cboLeaveToMonth.value = Split(rcell.Offset(0, 5).value, "/")(1)
            Me.cboLeaveToYear.value = Split(rcell.Offset(0, 5).value, "/")(2)
        End If
    Next
End Sub

Attribute VB_Name = "frmTeacherOptions"
Attribute VB_Base = "0{8F11A2C2-54A0-4A7C-ADD2-B6D6573A2441}{5C3531AF-3C5C-440F-B7C3-2A6A561EA74E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim btnEditTeacher() As MSForms.Label
Dim btnDeleteTeacher() As MSForms.Label
Dim lblEditsheet() As MSForms.Label            'array of lblEditsheet to create a table
Dim tableHeaders(1 To 9) As String
Dim preoccupiedRows As Double            'to store the no of preoccupied rows by header in the main sheet
Dim totalRows As Double

'to store the name of sheet
Dim sheet As String

Dim btnEditTeacherArray() As New reviewEventClass
Dim btnDeleteTeacherArray() As New reviewEventClass

Private Sub cmdAddTeacher_Click()
    
    'to indicate that the form is being opened in add mode ie 1=>add mode,2=>edit mode
    teacherFormMode = 1
    
    frmTeacherPersonal.Show
    
    'delete codes
    'frmTeacherLeave.txtTeacherID.value = "12345567"
    'frmTeacherLeave.Show
End Sub


Private Sub frameTeacherList_Click()

End Sub

Private Sub optEducationHistory_Change()
     Call displayRelatedTable
End Sub


Private Sub optEducationInfo_Change()
     Call displayRelatedTable
End Sub


Private Sub optIncomeDetails_Change()
     Call displayRelatedTable
End Sub


Private Sub optLeaveInfo_Change()
     Call displayRelatedTable
End Sub


Private Sub optOverview_Change()
    Call displayRelatedTable
End Sub


Private Sub optPersonalInfo_Change()
     Call displayRelatedTable
End Sub


Private Sub optTeachingHistory_Change()
     Call displayRelatedTable
End Sub


Private Sub optTrainingInfo_Change()
     Call displayRelatedTable
End Sub


Private Sub UserForm_Activate()
    With frameTeacherList
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 21 * Worksheets("Teacher Personal Info").Cells(Rows.count, 1).End(xlUp).row
        '.ScrollWidth = .InsideWidth * 9
    End With
End Sub

Private Sub UserForm_Initialize()
    
    'set the teacher heading fields where 1 is for teacher id and 2 is for teacher name
    tableHeaders(1) = "Teacher ID"
    tableHeaders(2) = "Name"
    tableHeaders(3) = "Personal Info"
    tableHeaders(4) = "Educational Info"
    tableHeaders(5) = "Teaching History"
    tableHeaders(6) = "Educational History"
    tableHeaders(7) = "Training Info"
    tableHeaders(8) = "Leave Info"
    tableHeaders(9) = "Income"

    preoccupiedRows = 8

    optOverview.value = True
    drawFullTable "Overview", "A", 9
    
End Sub



'** subprocedure that creates edit buttons for all the teachers
Private Sub createEditBtn(ByVal i As Double, ByVal noColumn As Double, ByVal uniqueID As String)
    Set btnEditTeacher(i) = frmTeacherOptions.frameTeacherList.Controls.Add("Forms.Label.1")
        With btnEditTeacher(i)
            .Top = (i + 1) * 15 + 1
            .Left = noColumn * 80 + 20
            .Height = 15
            .Width = 30
            .Caption = "Edit"
            .Font.Size = 9
            .SpecialEffect = fmSpecialEffectRaised
            .TextAlign = fmTextAlignCenter
            .ControlTipText = uniqueID
        End With
    ReDim Preserve btnEditTeacherArray(1 To i)
    Set btnEditTeacherArray(i).btnEditTeacherEvents = btnEditTeacher(i)
End Sub

'** subprocedure that creates delete buttons for all the teachers
Private Sub createDeleteBtn(ByVal i As Double, ByVal noColumn As Double, ByVal uniqueID As String)
    Set btnDeleteTeacher(i) = frmTeacherOptions.frameTeacherList.Controls.Add("Forms.Label.1")
        With btnDeleteTeacher(i)
            .Top = (i + 1) * 15 + 1
            .Left = noColumn * 80 + 20 + 35
            .Height = 15
            .Width = 35
            .Caption = "Delete"
            .Font.Size = 9
            .SpecialEffect = fmSpecialEffectRaised
            .TextAlign = fmTextAlignCenter
            .ControlTipText = uniqueID
        End With
    ReDim Preserve btnDeleteTeacherArray(1 To i)
    Set btnDeleteTeacherArray(i).btnDeleteTeacherEvents = btnDeleteTeacher(i)
End Sub



'function that sets values into sheet and column value when user clicks on one of the edit options
Public Sub displayRelatedTable()
    'clear the previous table
    Call clearFrame
    
    If optOverview.value = True Then
        sheet = "Overview"
        drawFullTable sheet, "A", 9
    ElseIf optPersonalInfo = True Then
        sheet = "Teacher Personal Info"
        drawFullTable sheet, "B", 9
    ElseIf optEducationInfo.value = True Then
        sheet = "Teacher Educational Info"
        drawFullTable sheet, "B", 6
    ElseIf optTeachingHistory.value = True Then
        sheet = "Teacher Teaching History"
        drawFullTable sheet, "B", 8
    ElseIf optEducationHistory.value = True Then
        sheet = "Teacher Educational History"
        drawFullTable sheet, "B", 7
    ElseIf optTrainingInfo.value = True Then
        sheet = "Teacher Training Info"
        drawFullTable sheet, "B", 7
    ElseIf optLeaveInfo.value = True Then
        sheet = "Teacher Leave Info"
        drawFullTable sheet, "B", 5
    ElseIf optIncomeDetails.value = True Then
        sheet = "Teacher Income"
        drawFullTable sheet, "B", 9
    End If
    
End Sub


'** function that draws table for specified sheet starting from given column and
'** has certain specified no of columns
'** @param sheet -> name of sheet
'** @param startingColumn -> Column from which table starts and which holds uniqueID
'** @param noColumns ->Number of columns the table consists of
'** @param yearColumn -> column that has the year

Private Sub drawFullTable(ByVal sheet As String, ByVal startingColumn As String, ByVal noColumns As Integer)
    
    'find out whether it is display of overview of the
    'entire sheets or individual sheet data
    Dim displayOverview As Boolean
    If sheet = "Overview" Then
        displayOverview = True
        sheet = "Teacher Personal Info"
    Else
        displayOverview = False
    End If
    
    'get the total no the teachers in the current year
    totalRows = Worksheets(sheet).Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows
    
    'define scrollbar height for this table
    With frameTeacherList
        'create scrollbars according to the no of columns
        If noColumns > 10 Then
            .ScrollBars = fmScrollBarsBoth
            .ScrollWidth = .InsideWidth * 1.25
        Else
            .ScrollBars = fmScrollBarsVertical
        End If
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 21 * Worksheets(sheet).Cells(Rows.count, 1).End(xlUp).row
    End With
    
    
    
    'to fix the no of lblEditsheet and redim them accordingly
    ReDim lblEditsheet(1 To noColumns)
    
    'initialise the edit and delete buttons only if there is at least one teacher
    'added
    If totalRows > 0 Then
        ReDim btnEditTeacher(1 To totalRows + 1)
        ReDim btnDeleteTeacher(1 To totalRows + 1)
    End If
    
    Call drawTableHeader(sheet, startingColumn, noColumns, displayOverview)
        
    If displayOverview = True Then
        Call drawOverviewBody(noColumns)
    Else
        Call drawTableBody(sheet, startingColumn, noColumns)
    End If
End Sub

'function that renders the table headers
Private Sub drawTableHeader(ByVal sheet As String, ByVal startingColumn As String, ByVal noColumns As Integer, ByVal displayOverview As Boolean)
    For j = 1 To noColumns          'no of columns
        Set lblEditsheet(j) = frmTeacherOptions.frameTeacherList.Controls.Add("Forms.Label.1", "lbl")
        With lblEditsheet(j)
            'settings for header rows
            .Top = 10
            .BackColor = &HC000&
            'display overview table of all
            'the sheets or individual sheets depending on the name of sheet passed
            If displayOverview = True Then
                'display table headers for the overview table
                .Caption = tableHeaders(j)
            Else
                .Caption = Worksheets(sheet).Range(startingColumn & preoccupiedRows).Offset(0, j - 1).value
            End If
            .Left = (j - 1) * 80 + 15
            .BorderColor = RGB(0, 0, 0)
            .BorderStyle = fmBorderStyleSingle
            .TextAlign = fmTextAlignCenter
            .Width = 85
        End With
    Next j
End Sub

'function that render the table body
Private Sub drawTableBody(ByVal sheet As String, ByVal startingColumn As String, ByVal noColumns As Integer)
    'to retrieve all reg no,name and surname and so on
    'to hold the row count i.e first row is header
    Dim i As Double
    Dim lastRow As Long
    
    i = 2
    lastRow = Worksheets(sheet).Cells(Rows.count, 1).End(xlUp).row
    
    If lastRow >= startingRow Then
        'the no of rows
        For Each specificcell In Worksheets(sheet).Range(startingColumn & startingRow & ":" & startingColumn & lastRow)
            'check if the row is from this year;for all sheets
            'year is always in column "C"
            If (Worksheets(sheet).Range("C" & specificcell.row).value - Worksheets("General").Range("B5").value = 0) Then
                For j = 1 To noColumns          'no of columns
                    Set lblEditsheet(j) = frmTeacherOptions.frameTeacherList.Controls.Add("Forms.Label.1", "lbl")
                    With lblEditsheet(j)
                        .Top = i * 15
                        .BackColor = &HFFFFFF
                        .Left = (j - 1) * 80 + 15
                        .BorderColor = RGB(0, 0, 0)
                        .BorderStyle = fmBorderStyleSingle
                        .TextAlign = fmTextAlignCenter
                        .Width = 85
                        .Caption = Worksheets(sheet).Range(startingColumn & specificcell.row).Offset(0, j - 1).value
                    End With
                Next j
                'to create an edit button for every row except the first row in every table
                'check if the row is uniquely identified by teacherID alone or has an
                'SN field as well which will be stored in the uniqueID
                Dim uniqueID As String
                
                If sheet = "Teacher Teaching History" Or sheet = "Teacher Educational History" Or sheet = "Teacher Training Info" Or sheet = "Teacher Leave Info" Then
                    uniqueID = Worksheets(sheet).Range(startingColumn & specificcell.row).value & "-" & Worksheets(sheet).Range(startingColumn & specificcell.row).Offset(0, 2).value
                    
                Else
                    uniqueID = Worksheets(sheet).Range(startingColumn & specificcell.row).value
                End If
                
                createEditBtn (i - 1), noColumns, uniqueID
                
                'now to create the delete button which will appear in all the tables
                createDeleteBtn (i - 1), noColumns, uniqueID
                
                i = i + 1
            End If
        Next specificcell
    End If
End Sub

'function that renders the overview table
Private Sub drawOverviewBody(ByVal noColumns As Integer)
    'boolean value which changes to true if a row's value changes with year
    'infoFilled is a flag that specifies whether the information in the sheet
    'has been filled for the current year(if applicable in case of that sheet)
    Dim infoFilled As Boolean
    Dim i As Double
    Dim lastRow As Long
    
    'row count starts from the second row as first row is the table header
    i = 2
    lastRow = Worksheets("Teacher Personal Info").Cells(Rows.count, 1).End(xlUp).row
    
    If lastRow >= startingRow Then
        For Each specificcell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & lastRow)
            'check if the row is from this year;for all sheets
            'year is always in column "C"
            If (Worksheets("Teacher Personal Info").Range("C" & specificcell.row).value - Worksheets("General").Range("B5").value = 0) Then
                'teacherID and Name are different in every row
                For j = 1 To noColumns          'no of columns
                    Set lblEditsheet(j) = frmTeacherOptions.frameTeacherList.Controls.Add("Forms.Label.1", "lbl")
                        With lblEditsheet(j)
                            .Top = i * 15
                            .BackColor = &HFFFFFF
                            .Left = (j - 1) * 80 + 15
                            .BorderColor = RGB(0, 0, 0)
                            .BorderStyle = fmBorderStyleSingle
                            .TextAlign = fmTextAlignCenter
                            .Width = 85
                            
                                      
                            If j < 3 Then
                                'display the respective names
                                .Caption = specificcell.Offset(0, j - 1)
                            Else
                                'initialise the value of infoFilled flag for this pass
                                infoFilled = False
                                For Each rcell In Worksheets("Teacher " & tableHeaders(j)).Range("B" & startingRow & ":B" & Worksheets("Teacher " & tableHeaders(j)).Cells(Rows.count, 2).End(xlUp).row)
                                    ' to display relevent caption depending on status of infoFilled flag
                                    If rcell.Text = specificcell.Text Then
                                        infoFilled = True
                                    End If
                                Next rcell
                                    
                                If infoFilled Then
                                    .Caption = "Yes"
                                Else
                                    .Caption = "No"
                                End If
                            End If
                         
                            'display red background for information that has not been entered
                            If .Caption = "No" Then
                                .BackColor = &HFF&
                            End If
                        End With
                Next j
                i = i + 1
            End If
        Next specificcell
    End If
End Sub

'** function that clears the frame of the previous table
Private Sub clearFrame()
    Dim ctrlX As MSForms.Control
    For Each ctrlX In frmTeacherOptions.frameTeacherList.Controls
        If TypeOf ctrlX Is MSForms.Label Then
            frmTeacherOptions.frameTeacherList.Controls.Remove ctrlX.Name
        End If
    Next ctrlX
End Sub



'display teacher form depending on which option button is active
'@param teacherID->ID of teacher whose data needs to be edited
'                ->teacherID may be of the form "70001" for single row records
'                ->or "70001-1" for multiple rows
Sub showEditTeacherForm(ByVal teacherID As String)
    
    If optPersonalInfo = True Then
        setTeacherFormMode "Teacher Personal Info", teacherID
        frmTeacherPersonal.initializeValues (teacherID)
        frmTeacherPersonal.Show
    ElseIf optEducationInfo.value = True Then
        setTeacherFormMode "Teacher Educational Info", teacherID
        frmTeacherAcademics.initializeValues (teacherID)
        frmTeacherAcademics.Show
    ElseIf optTeachingHistory.value = True Then
        setTeacherFormMode "Teacher Teaching History", Split(teacherID, "-")(0)
        frmTeachingHistory.initializeValues (teacherID)
        frmTeachingHistory.Show
    ElseIf optEducationHistory.value = True Then
        setTeacherFormMode "Teacher Educational History", Split(teacherID, "-")(0)
        frmTeacherEduHistory.initializeValues (teacherID)
        frmTeacherEduHistory.Show
    ElseIf optTrainingInfo.value = True Then
        setTeacherFormMode "Teacher Training Info", Split(teacherID, "-")(0)
        frmTeacherTraining.initializeValues (teacherID)
        frmTeacherTraining.Show
    ElseIf optLeaveInfo.value = True Then
        setTeacherFormMode "Teacher Leave Info", Split(teacherID, "-")(0)
        frmTeacherLeave.initializeValues (teacherID)
        frmTeacherLeave.Show
    ElseIf optIncomeDetails.value = True Then
        setTeacherFormMode "Teacher Income", teacherID
        frmTeacherIncome.initializeValues (teacherID)
        'to disable/enable or set values of certain applicable allowance/funds
        frmTeacherIncome.finalizeAllowances (teacherID)
        frmTeacherIncome.Show
    End If
End Sub

'the procedure is called when user clicks on the delete button in the teacher review
'@param teacherIdentification->ID of teacher whose data needs to be deleted
'                ->teacherIdentification may be of the form "70001" for single row records
'                ->or "70001-1" for multiple rows

Sub confirmDeleteTeacherInfo(ByVal teacherIdentification As String)
    Dim teacherID As String
    Dim SN As Integer
    'initialise the local copy of the teacherID and SN
    'set SN to 0 in sheets where SN is not applicable
    If Len(teacherIdentification) > 5 Then
        teacherID = Split(teacherIdentification, "-")(0)
        SN = CInt(Split(teacherIdentification, "-")(1))
    Else
        teacherID = teacherIdentification
        SN = 0
    End If
    
    'now determine which sheet do we need to delete data from and delete it
    deleteTeacherInfo teacherID, SN
    
    'now refresh the review form
    displayRelatedTable
End Sub

'procedure that deletes the teachers row when teacherID ans SN(if applicable)
'are passed to it
'@param teacherID
'@param SN
Private Sub deleteTeacherInfo(ByVal teacherID As String, ByVal SN As Integer)
    Dim lastRow, deletedRow As Integer
    lastRow = Worksheets(sheet).Cells(Rows.count, 1).End(xlUp).row
    deletedRow = 0
    
    For Each rcell In Worksheets(sheet).Range("B" & startingRow & ":B" & lastRow)
        'delete the row that matches with the parameters
        'store the row number of the row deleted for later
        If rcell.Text = teacherID And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And (SN = 0 Or ((Not SN = 0) And rcell.Offset(0, 2).value = SN)) Then
            deletedRow = rcell.row
            rcell.EntireRow.Delete
        End If
    Next
    
    'serialise the SN once record has been deleted
    'decrease the SN of all precedeing rows by 1 if the sheet has a SN ie not 0
    'not required if the sheet doesnot have multiple rows for the same teacher
    If Not SN = 0 Then
        For Each cell In Worksheets(sheet).Range("B" & deletedRow & ":B" & lastRow)
            If cell.Text = teacherID And (cell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
                cell.Offset(0, 2).value = cell.Offset(0, 2).value - 1
            End If
        Next cell
    End If
End Sub

'procedure that deletes all records of a specified teacher from the workbook
'(all the sheets)
'@param teacherID ->ID of the teacher to erase
Public Sub eraseAllTeacherRecords(ByVal teacherID As String)
    Dim sheetList(0 To 6) As String
    Dim deletedRow As Integer
    
    'initialise the sheets in which the teacher's records may be present
    sheetList(0) = "Teacher Income"
    sheetList(1) = "Teacher Leave Info"
    sheetList(2) = "Teacher Training Info"
    sheetList(3) = "Teacher Educational History"
    sheetList(4) = "Teacher Teaching History"
    sheetList(5) = "Teacher Educational Info"
    sheetList(6) = "Teacher Personal Info"
    
    'now delete the teacher in each of the sheets
    For Each sheetName In sheetList
evaluateAgain:
        For Each rcell In Worksheets(sheetName).Range("B" & startingRow & ":B" & Worksheets(sheetName).Cells(Rows.count, 1).End(xlUp).row + 1)
            'delete the row that matches with the parameters
            'store the row number of the row deleted which might be required later
            If rcell.Text = teacherID And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
                deletedRow = rcell.row
                rcell.EntireRow.Delete
                GoTo evaluateAgain:
            End If
        Next
    Next sheetName
    
    'now refresh the review form
    displayRelatedTable
End Sub

Attribute VB_Name = "frmTeacherPersonal"
Attribute VB_Base = "0{78E8545C-96B5-43FE-9DF8-2B3AD4AFD455}{40840133-6CF3-43C0-94B1-614242958EF7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher As Double


Private Sub cboCurrentLevel_Change()
    
    're-initialise the Position list
    cboPosition.Clear
    With Me.cboPosition
        .list() = Application.Transpose(Worksheets("Information").Range("K2:K" & Worksheets("Information").Cells(Rows.count, 11).End(xlUp).row).value)
    End With
    
    'select position according to the cchoice made in current level
    'display "ECD Facilitator" if the teacher is of ECD level
    If returnNumber("I", cboCurrentLevel) = 1 Then
        cboPosition.value = returnString("K", 1)
        cboPosition.Enabled = False
    Else
        'remove the "ECD Facilitator" from position if teacher is not ECD level
        cboPosition.RemoveItem 0
        
        'for private schools position should always be private sources
        'if current level is either primary,sec,lsec or hsec
        If Worksheets("General").Range("E9").value = 2 Then
            cboPosition.value = returnString("K", 6)
            cboPosition.Enabled = False
        Else
            cboPosition.value = ""
            cboPosition.Enabled = True
        End If
    End If
End Sub


Private Sub cboDobCitizenshipDay_Change()
    'auto fill day according to the citizenship day
    Me.cboDobCertificateDay.value = Me.cboDobCitizenshipDay.value
    Me.cboDobOthersDay.value = Me.cboDobCitizenshipDay.value
End Sub

Private Sub cboDobCitizenshipMonth_Change()
    'auto fill month according to citizenship month
    Me.cboDobCertificateMonth.value = Me.cboDobCitizenshipMonth
    Me.cboDobOthersMonth.value = Me.cboDobCitizenshipMonth
End Sub

Private Sub cboDobCitizenshipYear_Change()
    'auto fill year according to citizenship year
    Me.cboDobCertificateYear.value = Me.cboDobCitizenshipYear.value
    Me.cboDobOthersYear.value = Me.cboDobCitizenshipYear.value
End Sub

Private Sub cboMotherTongue_Change()

End Sub

Private Sub cboPosition_Change()
    'disable rank if the position is from private sources
    If returnNumber("K", cboPosition) = 6 Then
        cboRank.value = ""
        cboRank.Enabled = False
    'enable rank only if teacher is not from private sources provided that
    'the school type is also not private
    ElseIf (Not Worksheets("General").Range("E9").value - 2 = 0) Then
        cboRank.Enabled = True
    End If
End Sub

Private Sub cboTeacherNationality_Change()
    'disable the citizenship number and issue district if nationality is indian
    'or others
    If Not returnNumber("G", cboTeacherNationality) = 1 Then
        lblCitizenshipNo.Enabled = False
        txtCitizenshipNo.Enabled = False
        txtCitizenshipNo.value = ""
        
        lblIssueDistrict.Enabled = False
        txtIssueDistrict.Enabled = False
        txtIssueDistrict.value = ""
    Else
        lblCitizenshipNo.Enabled = True
        txtCitizenshipNo.Enabled = True
        
        lblIssueDistrict.Enabled = True
        txtIssueDistrict.Enabled = True
    End If
End Sub


Private Sub cmdNext_Click()

    'validate Teacher Name
    If txtTeacherName.Text = "" Then
        MsgBox ("Enter Teacher Name")
        txtTeacherName.SetFocus
        Exit Sub
    End If
    
    'validate gender
    Dim gender As Integer
    If optFemale = True Then
        gender = 1
    ElseIf optMale = True Then
        gender = 2
    ElseIf optOther = True Then
        gender = 3
    Else
        MsgBox "Please Select Gender"
        Exit Sub
    End If

    'validate caste
    If cboTeacherCaste.value = "" Then
        MsgBox ("Please select Caste/Ethnicity")
        cboTeacherCaste.SetFocus
        Exit Sub
    End If
    
    'validate nationality
    If cboTeacherNationality.value = "" Then
        MsgBox ("Please select Nationality")
        cboTeacherNationality.SetFocus
        Exit Sub
    End If
    
    ' check for validity of date of birth in citizenship
    If (cboDobCitizenshipYear.value = "") Or (cboDobCitizenshipMonth.value = "") Or (cboDobCitizenshipDay.value = "") Then
        MsgBox ("Please Enter Date of Birth in Citizenship")
        Exit Sub
    End If
    
    ' check for validity of date of birth in certificate
    If (cboDobCertificateYear.value = "") Or (cboDobCertificateMonth.value = "") Or (cboDobCertificateDay.value = "") Then
        MsgBox ("Please Enter Date of Birth in Certificate")
        Exit Sub
    End If
    
     'validate Citizenship issuing District
    If (Not txtCitizenshipNo.value = "") And txtIssueDistrict.Enabled = True And txtIssueDistrict.Text = "" Then
        MsgBox ("Enter Citizenship Issuing District")
        txtIssueDistrict.SetFocus
        Exit Sub
    End If
    
    'validate Father Name
    'If txtFatherName.Text = "" Then
    '    MsgBox ("Enter Father's Name")
    '    txtFatherName.SetFocus
    '    Exit Sub
    'End If
    
    'validate Mother Name
    'If txtMotherName.Text = "" Then
    '    MsgBox ("Enter Mother's Name")
    '    txtMotherName.SetFocus
    '    Exit Sub
    'End If
    
    
    'validate mothertongue
    'If cboMotherTongue.value = "" Then
    '    MsgBox ("Please select the Mothertongue")
    '    cboMotherTongue.SetFocus
    '    Exit Sub
    'End If
    
    'validate current level
    If cboCurrentLevel.value = "" Then
        MsgBox ("Please select Current Level")
        cboCurrentLevel.SetFocus
        Exit Sub
    End If
    
    'validate current rank
    If cboRank.Enabled = True And cboRank.value = "" Then
        MsgBox ("Please select Current Rank")
        cboRank.SetFocus
        Exit Sub
    End If
    
    'validate current position
    If cboPosition.value = "" Then
        MsgBox ("Please select Current Position")
        cboPosition.SetFocus
        Exit Sub
    End If
    
    'validate teacher type
    If cboTeacherType.value = "" Then
        MsgBox ("Please select Teacher Type")
        cboTeacherType.SetFocus
        Exit Sub
    End If
    
    'validate License No
    'If txtLicenseNo.Text = "" Then
    '    MsgBox ("Enter License Number")
    '    txtLicenseNo.SetFocus
    '    Exit Sub
    'End If
    
    'to activate the Teacher Personal Info worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Personal Info").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Personal Info").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid matches the one on table
            If rcell.Text = teacherID And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    'generate teacher id only for new teacher
    If teacherFormMode = 1 Then
        activeCell.Offset(0, 1).value = generateTeacherID("Teacher Personal Info", "B")
    End If
    frmTeacherAcademics.txtTeacherID.value = activeCell.Offset(0, 1).value
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 3).value = StrConv(txtTeacherName.value, vbProperCase)
    activeCell.Offset(0, 4).value = gender
    activeCell.Offset(0, 5).value = returnNumber("C", cboTeacherCaste)
    activeCell.Offset(0, 6).value = returnNumber("G", cboTeacherNationality)
    activeCell.Offset(0, 7).value = cboDobCitizenshipDay.value & "/" & cboDobCitizenshipMonth.value & "/" & cboDobCitizenshipYear.value
    activeCell.Offset(0, 8).value = cboDobCertificateDay.value & "/" & cboDobCertificateMonth.value & "/" & cboDobCertificateYear.value
    If Not ((cboDobOthersYear.value = "") And (cboDobOthersMonth.value = "") And (cboDobOthersDay.value = "")) Then
        activeCell.Offset(0, 9).value = cboDobOthersDay.value & "/" & cboDobOthersMonth.value & "/" & cboDobOthersYear.value
    End If
    activeCell.Offset(0, 10).value = txtCitizenshipNo.value
    activeCell.Offset(0, 11).value = StrConv(txtIssueDistrict.value, vbProperCase)
    activeCell.Offset(0, 12).value = StrConv(txtFatherName.value, vbProperCase)
    activeCell.Offset(0, 13).value = StrConv(txtMotherName.value, vbProperCase)
    activeCell.Offset(0, 14).value = StrConv(txtSpouseName.value, vbProperCase)
    activeCell.Offset(0, 15).value = StrConv(txtWillPerson.value, vbProperCase)
    activeCell.Offset(0, 16).value = returnNumber("H", cboMotherTongue)
    If Not cboDisability.value = "" Then
        activeCell.Offset(0, 17).value = returnNumber("B", cboDisability)
    End If
    activeCell.Offset(0, 18).value = txtEmail.value
    activeCell.Offset(0, 19).value = txtContactNo
    activeCell.Offset(0, 20).value = returnNumber("I", cboCurrentLevel)
    activeCell.Offset(0, 21).value = returnNumber("J", cboRank)
    activeCell.Offset(0, 22).value = returnNumber("K", cboPosition)
    activeCell.Offset(0, 23).value = returnNumber("L", cboTeacherType)
    activeCell.Offset(0, 24).value = returnNumber("M", cboTeachingLanguage)
    activeCell.Offset(0, 25).value = txtLicenseNo.value
    activeCell.Offset(0, 26).value = txtInsuranceNo.value
    activeCell.Offset(0, 27).value = txtProvidentACNo.value
    activeCell.Offset(0, 28).value = txtTrkNo.value
    activeCell.Offset(0, 29).value = txtBankACNo.value
    activeCell.Offset(0, 30).value = StrConv(txtBankName.value, vbProperCase)
     
    
    'update the summary and activate the "Buttons" sheet
    updateSummary
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
    
    'initialise the next form values and set the respective teacherFormMode
    'whether the next form needs to be opened in add or edit mode
    setTeacherFormMode "Teacher Educational Info", frmTeacherAcademics.txtTeacherID.value
    If teacherFormMode = 2 Then
        frmTeacherAcademics.initializeValues (frmTeacherAcademics.txtTeacherID.value)
    End If
    
    Unload Me
    frmTeacherAcademics.Show
End Sub

Private Sub txtBankName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Private Sub txtCitizenshipNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'Call allowOnlyNumbers(KeyAscii)
    'allow alphabet as well as numbers
    
    'clear out the red background and error message that appears
    'if user tried to entr the issuing district first
    txtCitizenshipNo.BackColor = &H80000005&
    txtIssueDistrict.ControlTipText = ""
End Sub


Private Sub txtContactNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyNumbers(KeyAscii)
End Sub




Private Sub txtFatherName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Private Sub txtInsuranceNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtIssueDistrict_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'citizenship issue district should only be enabled if citizenship no is not empty
    If Len(txtCitizenshipNo.value) > 0 Then
        Call allowOnlyAlphabets(KeyAscii)
    Else
        KeyAscii = 0
        txtCitizenshipNo.BackColor = &HFF&
        txtIssueDistrict.ControlTipText = "Please Enter Citizenship Number First"
    End If
End Sub

Private Sub txtLicenseNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtMotherName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Private Sub txtProvidentACNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtSpouseName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub

Private Sub txtTeacherName_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub



Private Sub txtTrkNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
     Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub txtWillPerson_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyAlphabets(KeyAscii)
End Sub


Private Sub UserForm_Initialize()
    'for initialising caste
    With Me.cboTeacherCaste
        .list() = Application.Transpose(Worksheets("Information").Range("C2:C" & Worksheets("Information").Cells(Rows.count, 3).End(xlUp).row).value)
    End With
    
    'for initialising Nationality,nepali should be the default
    With Me.cboTeacherNationality
        .list() = Application.Transpose(Worksheets("Information").Range("G2:G" & Worksheets("Information").Cells(Rows.count, 7).End(xlUp).row).value)
        .value = returnString("G", 1)
    End With
    
    'for initialisation of dob,decision made and appointed date
    'for citizenship dob year
        With Me.cboDobCitizenshipYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    'for certificate dob year
        With Me.cboDobCertificateYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    'for others dob year
        With Me.cboDobOthersYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
        
    'for citizenship dob month
        With Me.cboDobCitizenshipMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
    'for certificate dob month
        With Me.cboDobCertificateMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
    'for others dob month
        With Me.cboDobOthersMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
   
    'for Citizenship dob day
        With Me.cboDobCitizenshipDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
    'for certificate dob day
        With Me.cboDobCertificateDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
    'for others dob day
        With Me.cboDobOthersDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        
    'for initialising mothertongue
    With Me.cboMotherTongue
        .list() = Application.Transpose(Worksheets("Information").Range("H2:H" & Worksheets("Information").Cells(Rows.count, 8).End(xlUp).row).value)
    End With
    
    'for initialising disability
    With Me.cboDisability
        .list() = Application.Transpose(Worksheets("Information").Range("B2:B" & Worksheets("Information").Cells(Rows.count, 2).End(xlUp).row).value)
    End With

    'for initialising level
    With Me.cboCurrentLevel
        .list() = Application.Transpose(Worksheets("Information").Range("I2:I" & Worksheets("Information").Cells(Rows.count, 9).End(xlUp).row).value)
    End With
    
    'for initialising rank
    With Me.cboRank
        .list() = Application.Transpose(Worksheets("Information").Range("J2:J" & Worksheets("Information").Cells(Rows.count, 10).End(xlUp).row).value)
    End With
    
    'for initialising teacher position
    With Me.cboPosition
        .list() = Application.Transpose(Worksheets("Information").Range("K2:K" & Worksheets("Information").Cells(Rows.count, 11).End(xlUp).row).value)
    End With
    
    'for initialising teacher type
    With Me.cboTeacherType
        .list() = Application.Transpose(Worksheets("Information").Range("L2:L" & Worksheets("Information").Cells(Rows.count, 12).End(xlUp).row).value)
    End With
    
     'for initialising teaching language
    With Me.cboTeachingLanguage
        .list() = Application.Transpose(Worksheets("Information").Range("M2:M" & Worksheets("Information").Cells(Rows.count, 13).End(xlUp).row).value)
    End With
    
    'check if school is private,if yes then disable certain fields like
    'rank,trk no and so on
    If (Worksheets("General").Range("E9").value - 2 = 0) Then
        Me.cboRank.Enabled = False
        Me.txtTrkNo.Enabled = False
    End If
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Personal Info").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    teacherID = teacherIdentification
    
    For Each rcell In Worksheets("Teacher Personal Info").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid matches the one on table
        'and the row is of the same year as the current year
        If rcell.Text = teacherID And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) Then
            Me.txtTeacherName.value = rcell.Offset(0, 2).value
            If rcell.Offset(0, 3).value = 1 Then
                Me.optFemale.value = True
            ElseIf rcell.Offset(0, 3).value = 2 Then
                Me.optMale.value = True
            ElseIf rcell.Offset(0, 3).value = 3 Then
                Me.optOther.value = True
            End If
            Me.cboTeacherCaste.value = returnString("C", rcell.Offset(0, 4).value)
            Me.cboTeacherNationality.value = returnString("G", rcell.Offset(0, 5).value)
            
            If Not rcell.Offset(0, 6).value = "" Then
                Me.cboDobCitizenshipDay.value = Split(rcell.Offset(0, 6).value, "/")(0)
                Me.cboDobCitizenshipMonth.value = Split(rcell.Offset(0, 6).value, "/")(1)
                Me.cboDobCitizenshipYear.value = Split(rcell.Offset(0, 6).value, "/")(2)
            End If
            
            If Not rcell.Offset(0, 7).value = "" Then
                Me.cboDobCertificateDay.value = Split(rcell.Offset(0, 7).value, "/")(0)
                Me.cboDobCertificateMonth.value = Split(rcell.Offset(0, 7).value, "/")(1)
                Me.cboDobCertificateYear.value = Split(rcell.Offset(0, 7).value, "/")(2)
            End If
            
            If Not rcell.Offset(0, 8).value = "" Then
                Me.cboDobOthersDay.value = Split(rcell.Offset(0, 8).value, "/")(0)
                Me.cboDobOthersMonth.value = Split(rcell.Offset(0, 8).value, "/")(1)
                Me.cboDobOthersYear.value = Split(rcell.Offset(0, 8).value, "/")(2)
            End If
            
            'disable the citizenship number and issue district if nationality is indian
            'or others
            If Not rcell.Offset(0, 5).value = 1 Then
                Me.lblCitizenshipNo.Enabled = False
                Me.txtCitizenshipNo.Enabled = False
                
                Me.lblIssueDistrict.Enabled = False
                Me.txtIssueDistrict.Enabled = False
                
            Else
                Me.lblCitizenshipNo.Enabled = True
                Me.txtCitizenshipNo.Enabled = True
                Me.txtCitizenshipNo.value = rcell.Offset(0, 9).value
                
                Me.lblIssueDistrict.Enabled = True
                Me.txtIssueDistrict.Enabled = True
                Me.txtIssueDistrict.value = rcell.Offset(0, 10).value
            End If
            
            Me.txtFatherName.value = rcell.Offset(0, 11).value
            Me.txtMotherName.value = rcell.Offset(0, 12).value
            Me.txtSpouseName.value = rcell.Offset(0, 13).value
            Me.txtWillPerson.value = rcell.Offset(0, 14).value
            Me.cboMotherTongue.value = returnString("H", rcell.Offset(0, 15).value)
            Me.cboDisability.value = returnString("B", rcell.Offset(0, 16).value)
            Me.txtEmail.value = rcell.Offset(0, 17).value
            Me.txtContactNo.value = rcell.Offset(0, 18).value
            
            Me.cboCurrentLevel.value = returnString("I", rcell.Offset(0, 19).value)
            'select position according to the choice made in current level
            'for private schools position should always be private sources
            'if current level is either primary,sec,lsec or hsec
            If Me.cboCurrentLevel.Text = "ECD/PPC" Or Worksheets("General").Range("E9").value = 2 Then
                Me.cboPosition.Enabled = False
            Else
                Me.cboPosition.Enabled = True
            End If
            
            Me.cboRank.value = returnString("J", rcell.Offset(0, 20).value)
            Me.cboPosition.value = returnString("K", rcell.Offset(0, 21).value)
            Me.cboTeacherType.value = returnString("L", rcell.Offset(0, 22).value)
            Me.cboTeachingLanguage.value = returnString("M", rcell.Offset(0, 23).value)
            Me.txtLicenseNo.value = rcell.Offset(0, 24).value
            Me.txtInsuranceNo.value = rcell.Offset(0, 25).value
            Me.txtProvidentACNo.value = rcell.Offset(0, 26).value
            Me.txtTrkNo.value = rcell.Offset(0, 27).value
            Me.txtBankACNo.value = rcell.Offset(0, 28).value
            Me.txtBankName.value = rcell.Offset(0, 29).value
        End If
    Next
End Sub
Attribute VB_Name = "frmTeacherTraining"
Attribute VB_Base = "0{45084D13-EF33-4A69-8D08-D6AB3B33BEAF}{A313AC6B-E3E6-41E5-BF26-5BA8B62AD944}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher, SN As Integer
Dim validationFailed As Boolean


Private Sub cboTrainingType_Change()
    If cboTrainingType.ListIndex = 0 Then
        Me.cboYear.Enabled = False
        Me.txtSubject.Enabled = False
        Me.txtDuration.Enabled = False
        Me.txtOrganizer.Enabled = False
    ElseIf cboTrainingType.ListIndex = 8 Then
        Me.cboYear.Enabled = True
        Me.txtSubject.Enabled = True
        Me.txtDuration.Enabled = True
        Me.txtOrganizer.Enabled = True
    Else
        Me.cboYear.Enabled = True
        Me.txtSubject.Enabled = False
        Me.txtDuration.Enabled = True
        Me.txtOrganizer.Enabled = True
    End If
    
End Sub

Private Sub cmdNext_Click()

    'if the year has not been filled then navigate to the next form
    'without saving anything
    If Not Me.cboYear.value = "" Then
        Call addNewTraining
        If validationFailed = True Then
           Exit Sub
        End If
    End If
    
    frmTeacherLeave.txtTeacherID.value = frmTeacherTraining.txtTeacherID.value
    Unload Me
        
    'initialise the next form values and set the respective teacherFormMode
    'whether the next form needs to be opened in add or edit mode
    setTeacherFormMode "Teacher Leave Info", frmTeacherLeave.txtTeacherID.value
    If teacherFormMode = 2 Then
        frmTeacherLeave.initializeValues (frmTeacherLeave.txtTeacherID.value & "-" & "1")
    End If
    
    frmTeacherLeave.Show
End Sub

Private Sub cmdSave_Click()
    Call addNewTraining
    
    If validationFailed = True Then
        Exit Sub
    End If
    
    Unload Me
    'for reload of form to add new history
    teacherFormMode = 1
    frmTeacherTraining.txtTeacherID.value = teacherID
    frmTeacherTraining.Show
    
End Sub

'procedure that validates and inserts a new row of information in
'the "Teachers Training Info" sheet
Private Sub addNewTraining()
    'validation failed needs to be set to false at the very beginning
    validationFailed = False
    
    'validate year
    If Me.cboYear.value = "" Then
        MsgBox ("Please select Year")
        validationFailed = True
        cboYear.SetFocus
        Exit Sub
    End If
    
    'validate type of training
    If Me.cboTrainingType.value = "" Then
        MsgBox ("Please Select Type of Training")
        validationFailed = True
        cboTrainingType.SetFocus
        Exit Sub
    End If
    
    'validate subject
    If Me.txtSubject.Enabled And Me.txtSubject.value = "" Then
        MsgBox ("Please Enter Subject")
        validationFailed = True
        Exit Sub
    End If
    
    'validate duration
    If Me.txtDuration.value = "" Then
        MsgBox ("Please Enter Duration")
        validationFailed = True
        Exit Sub
    End If
    
    'validate Organizer
    If Me.txtOrganizer.value = "" Then
        MsgBox ("Please Enter Organizer Name")
        validationFailed = True
        Exit Sub
    End If
    
    teacherID = txtTeacherID.value
    
    'to activate the Teacher Training Info worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Training Info").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Training Info").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid,year and SN
            'matches the one on table
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    'determine and set sn before any other fields
    'we dont need to generate sn in edit mode
    If teacherFormMode = 1 Then
        activeCell.Offset(0, 3).value = returnHistorySN("Teacher Training Info", "B", "C", txtTeacherID.value)
    End If
    
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = teacherID
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 4).value = cboYear.value
    activeCell.Offset(0, 5).value = returnNumber("AA", cboTrainingType)
    activeCell.Offset(0, 6).value = StrConv(txtSubject.value, vbProperCase)
    activeCell.Offset(0, 7).value = txtDuration.value
    activeCell.Offset(0, 8).value = StrConv(txtOrganizer.value, vbProperCase)
    
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
End Sub

Private Sub txtDuration_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Call allowOnlyNumbers(KeyAscii)
End Sub


Private Sub UserForm_Initialize()
    'to initialise year combobox
    With Me.cboYear
        For i = 2071 To 2000 Step -1
            .AddItem i
        Next
    End With
    
    'initialise the teacher training types
    With Me.cboTrainingType
        .list() = Application.Transpose(Worksheets("Information").Range("AA2:AA" & Worksheets("Information").Cells(Rows.count, 27).End(xlUp).row).value)
    End With
End Sub

'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Training Info").Cells(Rows.count, 1).End(xlUp).row
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = Split(teacherIdentification, "-")(0)
    SN = CInt(Split(teacherIdentification, "-")(1))
    
    For Each rcell In Worksheets("Teacher Training Info").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid,year,SN
        'matches the one on table
        If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
            Me.cboYear.value = rcell.Offset(0, 3).value
            Me.cboTrainingType.value = returnString("AA", rcell.Offset(0, 4).value)
            Me.txtSubject.value = rcell.Offset(0, 5).value
            Me.txtDuration.value = rcell.Offset(0, 6).value
            Me.txtOrganizer.value = rcell.Offset(0, 7).value
        End If
    Next
End Sub

Attribute VB_Name = "frmTeachingHistory"
Attribute VB_Base = "0{7A80840D-324B-4722-B77A-B5906A9587BF}{BF5AB853-8460-43DE-B431-33DD673A3827}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim firstTeacher, lastTeacher, SN As Integer
Dim validationFailed As Boolean

Private Sub cboAppointmentDay_Change()


       'auto fill decision made day according to appointed day
       Me.cboDecisionMadeDay.value = Me.cboAppointmentDay.value
       
       
End Sub

Private Sub cboAppointmentMonth_Change()


       'auto fill decision made month according to appointed month
       Me.cboDecisionMadeMonth.value = Me.cboAppointmentMonth.value
       
       
End Sub

Private Sub cboAppointmentYear_Change()


       'auto fill decision made year according to appointed year
       Me.cboDecisionMadeYear.value = Me.cboAppointmentYear.value
       
       
End Sub



Private Sub cboTeacherLevel_Change()
    're-initialise the Position list
    cboPosition.Clear
    With Me.cboPosition
        .list() = Application.Transpose(Worksheets("Information").Range("K2:K" & Worksheets("Information").Cells(Rows.count, 11).End(xlUp).row).value)
    End With

    'select position according to the cchoice made in current level
    'display "ECD Facilitator" if the teacher is of ECD level
    If returnNumber("I", cboTeacherLevel) = 1 Then
        Me.cboPosition.value = returnString("K", 1)
        Me.cboPosition.Enabled = False
    Else
        'remove the "ECD Facilitator" from position if teacher is not ECD level
        cboPosition.RemoveItem 0
        
        'for private schools position should always be private sources
        'if current level is either primary,sec,lsec or hsec
        If Worksheets("General").Range("E9").value = 2 Then
            cboPosition.value = returnString("K", 6)
            cboPosition.Enabled = False
        Else
            cboPosition.value = ""
            cboPosition.Enabled = True
        End If
    End If
End Sub


Private Sub cmdNext_Click()
    'if the decision made has not been filled then navigate to the next form
    'without saving anything
    If (Not cboAppointmentYear.value = "") And (Not cboAppointmentMonth.value = "") And (Not cboAppointmentDay.value = "") Then
        Call addNewHistory
        If validationFailed = True Then
           Exit Sub
        End If
    End If
    
    frmTeacherEduHistory.txtTeacherID.value = frmTeachingHistory.txtTeacherID.value
    Unload Me
        
    'initialise the next form values and set the respective teacherFormMode
    'whether the next form needs to be opened in add or edit mode
    setTeacherFormMode "Teacher Educational History", frmTeacherEduHistory.txtTeacherID.value
    If teacherFormMode = 2 Then
        frmTeacherEduHistory.initializeValues (frmTeacherEduHistory.txtTeacherID.value & "-" & "1")
    End If
    
    frmTeacherEduHistory.Show
End Sub

Private Sub cmdSave_Click()
    Call addNewHistory
        
    If validationFailed = True Then
       Exit Sub
    End If
    
    'for reload of form to add new history and reset mode to add
    Unload Me
    frmTeachingHistory.txtTeacherID.value = teacherID
    teacherFormMode = 1
    frmTeachingHistory.Show
End Sub

'procedure that validates the teaching history form and adds a new row
Private Sub addNewHistory()
    'validation failed needs to be set to false at the very beginning
    validationFailed = False
    
    ' check for validity of decision made date
    If (cboDecisionMadeYear.value = "") Or (cboDecisionMadeMonth.value = "") Or (cboDecisionMadeDay.value = "") Then
        MsgBox ("Please Enter the Decision made date")
        validationFailed = True
        Exit Sub
    End If
    
    ' check for validity of appointment date
    If (cboAppointmentYear.value = "") Or (cboAppointmentMonth.value = "") Or (cboAppointmentDay.value = "") Then
        MsgBox ("Please Enter Appointment Date")
        validationFailed = True
        Exit Sub
    End If
    
    'validate current level
    If cboTeacherLevel.value = "" Then
        MsgBox ("Please select Level")
        validationFailed = True
        cboTeacherLevel.SetFocus
        Exit Sub
    End If
    
    'validate current rank
    If cboRank.value = "" Then
        MsgBox ("Please select Rank")
        validationFailed = True
        cboRank.SetFocus
        Exit Sub
    End If
    
    'validate current position
    If cboPosition.value = "" Then
        MsgBox ("Please select Position")
        cboPosition.SetFocus
        Exit Sub
    End If
    
    'validate current rank
    If cboDistrict.value = "" Then
        MsgBox ("Please select District")
        validationFailed = True
        cboDistrict.SetFocus
        Exit Sub
    End If
    
    teacherID = txtTeacherID.value
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Teaching History").Cells(Rows.count, 1).End(xlUp).row
    
    'to activate the Teacher Teaching History worksheet in excel and to hide the form
    ActiveWorkbook.Worksheets("Teacher Teaching History").Activate
    
    'to find the first empty row starting from A9 for new teacher or find the
    'teachers row for existing teacher
    '1=>add teacher,2=>edit teacher
    If teacherFormMode = 1 Then
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
    ElseIf teacherFormMode = 2 Then
        For Each rcell In Worksheets("Teacher Teaching History").Range("B" & firstTeacher & ":B" & lastTeacher)
            'retrieve row into userform if the specified regid,year and SN matches the one on table
            If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
                rcell.Offset(0, -1).Select
                Exit For
            End If
        Next rcell
    End If
    
    'determine and set sn before any other fields
    'we dont need to generate sn in edit mode
    If teacherFormMode = 1 Then
        activeCell.Offset(0, 3).value = returnHistorySN("Teacher Teaching History", "B", "C", txtTeacherID.value)
    End If
    
    activeCell.value = Mid(Worksheets("General").Range("f1").Text, 2, 9)
    activeCell.Offset(0, 1).value = teacherID
    activeCell.Offset(0, 2).value = Worksheets("General").Range("B5").value
    activeCell.Offset(0, 4).value = cboAppointmentDay.value & "/" & cboAppointmentMonth.value & "/" & cboAppointmentYear.value
    activeCell.Offset(0, 5).value = cboDecisionMadeDay.value & "/" & cboDecisionMadeMonth.value & "/" & cboDecisionMadeYear.value
    activeCell.Offset(0, 6).value = returnNumber("I", cboTeacherLevel)
    activeCell.Offset(0, 7).value = returnNumber("J", cboRank)
    activeCell.Offset(0, 8).value = returnNumber("K", cboPosition)
    activeCell.Offset(0, 9).value = StrConv(cboDistrict.value, vbProperCase)
    
    ActiveWorkbook.Worksheets("Buttons").Activate
    
    'update the edit sheet if teacher information has been updated
    frmTeacherOptions.displayRelatedTable
End Sub
Private Sub UserForm_Initialize()
    'for decision made year
        With Me.cboDecisionMadeYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    'for appointed year
        With Me.cboAppointmentYear
        For i = Worksheets("General").Range("B5").value To 2000 Step -1
            .AddItem i
        Next
        End With
    
     'for decision made month
        With Me.cboDecisionMadeMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
    'for appointed  month
        With Me.cboAppointmentMonth
        For i = 1 To 12 Step 1
            .AddItem i
        Next
        End With
        
    'for decision made day
        With Me.cboDecisionMadeDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
    'for appointed day
        With Me.cboAppointmentDay
        For i = 1 To 32 Step 1
            .AddItem i
        Next
        End With
        
    'for initialising level
    With Me.cboTeacherLevel
        .list() = Application.Transpose(Worksheets("Information").Range("I2:I" & Worksheets("Information").Cells(Rows.count, 9).End(xlUp).row).value)
    End With
    
    'for initialising rank
    With Me.cboRank
        .list() = Application.Transpose(Worksheets("Information").Range("J2:J" & Worksheets("Information").Cells(Rows.count, 10).End(xlUp).row).value)
    End With
    
    
    
    'for initialising teacher position
    With Me.cboPosition
        .list() = Application.Transpose(Worksheets("Information").Range("K2:K" & Worksheets("Information").Cells(Rows.count, 11).End(xlUp).row).value)
    End With
        
    
    
    'for initialising District
    With Me.cboDistrict
        .list() = Application.Transpose(Worksheets("Information").Range("P2:P" & Worksheets("Information").Cells(Rows.count, 16).End(xlUp).row).value)
    End With
    
End Sub


'procedure that initializes the values of each textbox,combobox and so on
'when form is opened for editing
Public Sub initializeValues(ByVal teacherIdentification As String)
    'whether the record has been found
    Dim recordFound As Boolean
    
    firstTeacher = 9
    lastTeacher = Worksheets("Teacher Teaching History").Cells(Rows.count, 1).End(xlUp).row
    recordFound = False
    
    'initialise the local copy of the teacherID
    txtTeacherID.value = Split(teacherIdentification, "-")(0)
    SN = CInt(Split(teacherIdentification, "-")(1))
    
    For Each rcell In Worksheets("Teacher Teaching History").Range("B" & firstTeacher & ":B" & lastTeacher)
        'retrieve row into userform if the specified regid,year and SN
        'matches the one on table
        If rcell.Text = txtTeacherID.value And (rcell.Offset(0, 1).value - Worksheets("General").Range("B5").value = 0) And rcell.Offset(0, 2).value = SN Then
            Me.cboAppointmentDay.value = Split(rcell.Offset(0, 3).value, "/")(0)
            Me.cboAppointmentMonth.value = Split(rcell.Offset(0, 3).value, "/")(1)
            Me.cboAppointmentYear.value = Split(rcell.Offset(0, 3).value, "/")(2)
            Me.cboDecisionMadeDay.value = Split(rcell.Offset(0, 4).value, "/")(0)
            Me.cboDecisionMadeMonth.value = Split(rcell.Offset(0, 4).value, "/")(1)
            Me.cboDecisionMadeYear.value = Split(rcell.Offset(0, 4).value, "/")(2)
            Me.cboTeacherLevel.value = returnString("I", rcell.Offset(0, 5).value)
            Me.cboRank.value = returnString("J", rcell.Offset(0, 6).value)
            Me.cboPosition.value = returnString("K", rcell.Offset(0, 7).value)
            Me.cboDistrict.value = rcell.Offset(0, 8).value
            
            'raise a flag that the record has been found
            recordFound = True
        End If
    Next
    
    'if record does not exist then open the form in add mode
    '1=>add mode,2=>edit mode
    If Not recordFound Then
        teacherFormMode = 1
    End If
End Sub

Attribute VB_Name = "frmUpdateClass"
Attribute VB_Base = "0{613E0278-4173-4B37-8A6E-5F6D8F7FED30}{E78B51C3-9C92-42C9-A392-4855EE5EE022}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private cmdLots() As MSForms.Label                  'array of labels to create a table
Private chkPass() As MSForms.OptionButton
Private chkRepeat() As MSForms.OptionButton
Private chkDp() As MSForms.OptionButton
Private chkPassedAndDropped() As MSForms.OptionButton
Private chkFailedAndDropped() As MSForms.OptionButton

Private txtAttendance() As MSForms.TextBox
Private lblAttendance As MSForms.Label

Dim preoccupiedRows As Double            'to store the no of preoccupied rows by header in the main sheet
Dim totalRows As Double                  'the total no of rows in the main sheet
Dim perPage As Double                   'total no of students to show in 1 page
Dim lowerCount As Double                'from which key the current display starts from
Dim upperCount As Double                'till which key the current display ends
Dim pageNo As Integer                   'which page the user is on
Dim displayList As New Collection
Dim keyArray As New Collection

Dim regId() As String
Dim address() As String

Dim dynamicControl() As New updateClassEvents
    
Private Sub cmdUpdate_Click()
    Dim totalStudents As Integer
    Dim count As Double
    totalStudents = countStudents(frmUpdateStudentOptions.selectedClass)
    count = 2
    
    ReDim regId(totalStudents + 1)
    ReDim address(totalStudents + 1)
    Dim Class As Integer
    Dim strClass As String
    
    
    'retrieve the key and cureent class address from the key array
    For Each Key In keyArray
        regId(count) = Key
        address(count) = currentClassAddress(val(Key) + 8)
        count = count + 1
    Next Key
    
    'to check whether all the checkboxes have been filled
     For i = 2 To totalStudents + 1
        'if all checkboxes from the same row are unchecked
        If chkPass(i).value = False And chkRepeat(i).value = False And chkDp(i).value = False And chkFailedAndDropped(i).value = False And chkPassedAndDropped(i).value = False Then
            MsgBox "Please select update status of all students of the class"
            Exit Sub
        ElseIf (Not frmUpdateStudentOptions.selectedClass = -1) And txtAttendance(i).value = "" Then
            MsgBox "Please Fill the Attendance of all the Students!"
            txtAttendance(i).SetFocus
            Exit Sub
        ElseIf txtAttendance(i).BackColor = &HFF& Then
            MsgBox "Please enter value of attendance in between 1 and 365!"
            txtAttendance(i).SetFocus
            Exit Sub
        End If
     Next i
    
    
    
    
    For i = 2 To totalStudents + 1
        strClass = Worksheets("Student Tracking").Range(address(i)).Text
        'in case of ECD
        If strClass = "ECD/PPC" Then
            'if pass is checked then increase class by one in the next year
            If chkPass(i).value = True Then
                'class is set to 1 if range of address is greater than X
                If Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = 1
                End If
            End If
            'if repeat is checked then stay in the same class in the next year as well
            If chkRepeat(i).value = True Then
                If Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = strClass
                End If
            End If
            'if Double Promotion is checked for ECD then promote to class two in the upcoming year
            If chkDp(i).value = True Then
                If Class < 11 And Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = 2
                End If
            End If
            'if the failed and Dropped is checked then drop the student in the upcoming year
            If chkFailedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
                Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "FAD"
            End If
            'if the passed and Dropped is checked then drop the student in the upcoming year
            If chkPassedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
                Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "PAD"
            End If
        
        'for the rest classes
        Else
            Class = Worksheets("Student Tracking").Range(address(i)).value
        
            'if pass is checked then increase class by one in the next year
            If chkPass(i).value = True Then
                'class cannot be greater than 12 and range of address shouldnt be greater than X
                If Class < 12 And Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = Class + 1
                End If
            End If
            'if repeat is checked then stay in the same class in the next year as well
            If chkRepeat(i).value = True Then
                If Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = Class
                End If
            End If
            'if Double Promotion is checked then promote two classes in the upcoming year
            If chkDp(i).value = True Then
                If Class < 11 And Mid(address(i), 2, 1) < "Z" Then
                    Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = Class + 2
                End If
            End If
            'if the failed and Dropped is checked then drop the student in the upcoming year
            If chkFailedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
                Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "FAD"
            End If
            'if the passed and Dropped is checked then drop the student in the upcoming year
            If chkPassedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
                Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "PAD"
            End If
        
        End If
        
        'to update the attendance of students whose attendance is given
        'take offset of 23 from the updated class cell address as attendance cell for the previous class is 24 cells away
        If Not IsEmpty(txtAttendance(i).value) Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 24).value = txtAttendance(i).value
        End If
    Next i
    Unload Me
    MsgBox "Successfully Updated!"
    frmUpdateClass.Show
End Sub

Private Sub UserForm_Activate()
     With Me
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 15 * Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
        '.ScrollWidth = .InsideWidth * 9
    End With
End Sub



Private Sub UserForm_Initialize()
    perPage = 25
    
    'to set the name of the school
    lblHeader.Caption = getSchoolname()
     
    'Calculate the total no of rows in main sheet
    totalRows = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
                
    'to initialise the record counter
    initCounter
    
    'to initialise the display list hash table
    initDisplaylist
    
   
    'to fix the no of labels,checkboxes and redim the arrays accordingly
    
    ReDim cmdLots(totalRows)
    ReDim chkPass(totalRows)
    ReDim chkRepeat(totalRows)
    ReDim chkDp(totalRows)
    ReDim chkFailedAndDropped(totalRows)
    ReDim chkPassedAndDropped(totalRows)
    ReDim txtAttendance(totalRows)
    
    preoccupiedRows = 7
    'to retrieve all reg no,name and surname including table headers
    For i = 1 To countStudents(frmUpdateStudentOptions.selectedClass) + 1 Step 1 'the no of rows
        For j = 1 To 3          'no of columns
            k = i + j           'index of label array cmdLots()
              If i = 1 Then
                        Set cmdLots(k) = frmUpdateClass.Controls.Add("Forms.Label.1", "lbl")
                        With cmdLots(k)
                            .Top = 70
                            .Left = (j * 70) - 50
                            .BorderColor = RGB(0, 0, 0)
                            .BorderStyle = fmBorderStyleSingle
                            .BackColor = &HC000&
                            .Caption = " " & Worksheets("Student Tracking").Range("c" & preoccupiedRows + i).Offset(0, j - 1).value
                        End With
              End If
         Next j
        'to add checkboxes and textbox for attendance
        addCheckBox (i)
    Next i
  'to populate the table
  Call populateUpdateSheet
  'to insert respective classes
  Call addClasses
  

End Sub




Sub addCheckBox(ByVal i As Integer)
'for pass checkboxes
    Set chkPass(i) = Me.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkPass(i)
             If i = 1 Then
                .Top = 70
             Else
                .Top = i * 20 + 50
             End If
            .Left = (5.02 * 75) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Passed"
            End If
            
            'disable the passed,double promoted,PAD and FAD checkboxes for class 12
            If frmUpdateStudentOptions.selectedClass = 12 Then
                .Enabled = False
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkpassEvents = chkPass(i)
'for repeat checkboxes
    Set chkRepeat(i) = Me.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkRepeat(i)
             If i = 1 Then
                .Top = 70
             Else
                .Top = i * 20 + 50
             End If
            .Left = (5.7 * 75) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Repeated"
            End If
        End With
    ReDim Preserve dynamicControl(1 To i)
    Set dynamicControl(i).chkrepeatEvents = chkRepeat(i)
'for double promotion
     Set chkDp(i) = Me.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkDp(i)
            If i = 1 Then
                .Top = 70
            Else
                .Top = i * 20 + 50
            End If
            .Left = (6.4 * 75) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Double Promoted"
            End If
            
            'disable the passed,double promoted,PAD and FAD checkboxes for class 12
            If frmUpdateStudentOptions.selectedClass = 12 Then
                .Enabled = False
            End If
        End With
        ReDim Preserve dynamicControl(1 To i)
        Set dynamicControl(i).chkdpEvents = chkDp(i)
'for failed and dropout students
     Set chkFailedAndDropped(i) = Me.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkFailedAndDropped(i)
            If i = 1 Then
                .Top = 70
            Else
                .Top = i * 20 + 50
            End If
            .Left = (7.4 * 75) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Dropped Out"
            End If
            
            'disable the passed,double promoted,PAD and FAD checkboxes for class 12
            If frmUpdateStudentOptions.selectedClass = 12 Then
                .Enabled = False
            End If
        End With
        ReDim Preserve dynamicControl(1 To i)
        Set dynamicControl(i).chkFailedAndDroppedEvents = chkFailedAndDropped(i)
        
'for passed but dropout students
     Set chkPassedAndDropped(i) = Me.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkPassedAndDropped(i)
            If i = 1 Then
                .Top = 70
            Else
                .Top = i * 20 + 50
            End If
            .Left = (9 * 75) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Passed and Transferred"
            End If
            
            'disable the passed,double promoted,PAD and FAD checkboxes for class 12
            If frmUpdateStudentOptions.selectedClass = 12 Then
                .Enabled = False
            End If
        End With
        ReDim Preserve dynamicControl(1 To i)
        Set dynamicControl(i).chkPassedAndDroppedEvents = chkPassedAndDropped(i)
                
        
    'input for attendance
    If i = 1 Then
        Set lblAttendance = Me.Controls.Add("Forms.label.1", "lbl")
        With lblAttendance
            .Top = i * 20 + 55
            .Left = (10.5 * 75) - 50
            .Caption = "Attendance"
        End With
    Else
        Set txtAttendance(i) = Me.Controls.Add("Forms.textbox.1", "txt")
            With txtAttendance(i)
                    .Top = i * 20 + 50
                    .Left = (10.5 * 75) - 50
                    .ControlTipText = "Enter Attendance of this year"
                    .Width = 30
                    .MaxLength = 3
            End With
        Set dynamicControl(i).txtAttendanceArray = txtAttendance(i)
    End If
End Sub

Sub addClasses()
    For i = 1 To countStudents(frmUpdateStudentOptions.selectedClass) + 1 Step 1     'the no of rows
            k = i + 4           'index of label array cmdLots()
            Set cmdLots(k) = frmUpdateClass.Controls.Add("Forms.Label.1", "lbl")
            If i = 1 Then               'to set column header "class"
                With cmdLots(k)
                    .Top = 70
                    .Left = (4 * 70) - 50
                    .BackColor = &HC000&
                    .BorderColor = RGB(0, 0, 0)
                    .BorderStyle = fmBorderStyleSingle
                    .Caption = " Class"
                End With
                
            'to retrieve the current class of student
            
            Else
                With cmdLots(k)
                    .Top = i * 20 + 50
                    .Left = (4 * 70) - 50
                    .BackColor = RGB(255, 255, 255)
                    .BorderColor = RGB(0, 0, 0)
                    .BorderStyle = fmBorderStyleSingle
                    If frmUpdateStudentOptions.selectedClass = -1 Then
                        cmdLots(k).Caption = " " & "ECD/PPC"
                    Else
                        cmdLots(k).Caption = " " & frmUpdateStudentOptions.selectedClass
                    End If
                    '.Caption = "  i= " & i & "  j= " & j
                End With
            End If
    Next i

End Sub


'to uncheck or check all checkboxes of a group when one group is checked
Public Sub checkall(val As Boolean, Source As String)
    Dim totalStudents As Integer
    totalStudents = countStudents(frmUpdateStudentOptions.selectedClass)
    
    If Source = "Passed" Then
        For i = 1 To totalStudents + 1
            If Not i = totalStudents + 1 Then
                chkPass(i + 1).value = val
            End If
            chkRepeat(i).value = Not val
            chkDp(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Repeated" Then
        For i = 1 To totalStudents + 1
            If Not i = totalStudents + 1 Then
                chkRepeat(i + 1).value = val
            End If
            chkPass(i).value = Not val
            chkDp(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Double Promoted" Then
        For i = 1 To totalStudents + 1
            If Not i = totalStudents + 1 Then
                chkDp(i + 1).value = val
            End If
            chkPass(i).value = Not val
            chkRepeat(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Dropped Out" Then
        For i = 1 To totalStudents + 1
            If Not i = totalStudents + 1 Then
                chkFailedAndDropped(i + 1).value = val
            End If
            chkPass(i).value = Not val
            chkRepeat(i).value = Not val
            chkDp(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Passed and Transferred" Then
        For i = 1 To totalStudents + 1
            If Not i = totalStudents + 1 Then
                chkPassedAndDropped(i + 1).value = val
            End If
            chkPass(i).value = Not val
            chkRepeat(i).value = Not val
            chkDp(i).value = Not val
            chkFailedAndDropped(i).value = Not val
        Next
    End If
End Sub



'to get the no of students that needs to be displayed on the update form
'it can return a maximum value not exceeding that of perPage
Function countStudents(selectedClass As Integer) As Double
    Dim count As Double
    count = countStudentsInClass(selectedClass)

    If count > perPage Then
        countStudents = perPage
    Else
        countStudents = count
    End If
End Function




Private Sub populateUpdateSheet()
    Dim i As Double
    i = 2    'as table is populated starting from second row
    
    For Each Key In keyArray
        For j = 1 To 3          'no of columns
            k = i + j           'index of label array cmdLots()
            Set cmdLots(k) = frmUpdateClass.Controls.Add("Forms.Label.1", "lbl")
            With cmdLots(k)
                .Top = i * 20 + 50
                .Left = (j * 70) - 50
                .BackColor = RGB(255, 255, 255)
                .BorderColor = RGB(0, 0, 0)
                .BorderStyle = fmBorderStyleSingle
                .Caption = " " & Worksheets("Student Tracking").Range("c" & val(Key) + 8).Offset(0, j - 1).Text
            End With
        Next j
        i = i + 1
    Next Key
End Sub



'** function used to generate array of students to display in the update forms
'** populate the hash table displayList with regID as indexes and
'** current class as value
Public Sub initDisplaylist()
    Dim selectedClass As Integer
    Dim count As Integer
    selectedClass = frmUpdateStudentOptions.selectedClass
    preoccupiedRows = 7
    count = 0
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If (selectedClass = currentClass(i + preoccupiedRows)) And Not count = perPage Then
            If selectedClass = -1 Then          'in case of ECD
                keyArray.Add Worksheets("Student Tracking").Range("c" & i + preoccupiedRows).Text
                displayList.Add "ECD/PPC", Worksheets("Student Tracking").Range("c" & i + preoccupiedRows).Text
            Else
                keyArray.Add Worksheets("Student Tracking").Range("c" & i + preoccupiedRows).Text
                displayList.Add selectedClass, Worksheets("Student Tracking").Range("c" & i + preoccupiedRows).Text
            End If
            count = count + 1
        End If
    Next i
End Sub


Private Sub initCounter()
    Dim selectedClass As Integer
    Dim totalStudentCount As Double
    
    selectedClass = frmUpdateStudentOptions.selectedClass
    totalStudentCount = countStudentsInClass(selectedClass)
    
    If totalStudentCount > perPage Then
        upperCount = perPage
        lowerCount = 1
    Else
        upperCount = totalStudentCount
        lowerCount = 1
    End If
    lblCounter.Caption = "Showing " & lowerCount & "-" & upperCount & " of " & countStudentsInClass(selectedClass) & " students in class - " & selectedClass
    
End Sub


Attribute VB_Name = "frmUpdateClassECD"
Attribute VB_Base = "0{2145D0FA-A308-4993-97F2-EE95CF68B2AF}{CB981430-BC17-4772-B115-6AE61D5F27C5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'for labels
Private lblCells() As MSForms.Label
Private chkGradeOne() As MSForms.OptionButton
Private chkRepeat() As MSForms.OptionButton
Private chkNUR() As MSForms.OptionButton
Private chkLKG() As MSForms.OptionButton
Private chkUKG() As MSForms.OptionButton
Private chkKG() As MSForms.OptionButton
Private chkPassedAndDropped() As MSForms.OptionButton
Private chkFailedAndDropped() As MSForms.OptionButton


Dim selectedECDNo As Integer
Dim preoccupiedRows As Integer           'to store the no of preoccupied rows by header in the main sheet

'for update operation
Dim regId() As String
Dim address() As String


'for storing the no of rows being displayed currently
Dim lowerCount, upperCount, totalRows As Double

Dim displayList As New Collection
Dim keyArray As New Collection

Dim dynamicControl() As New updateClassEvents

Private Sub cboECDNo_Change()
    'pageNo = 0
    
    'Unload Me
    'frmUpdateClassECD.Show
End Sub

Private Sub cboNext_Click()
    'increment the pageNo,empty the display array and display the next page
    pageNo = pageNo + 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateClassECD.Show
End Sub

Private Sub cboPrevious_Click()
    'increment the pageNo,empty the display array and display the previous page
    pageNo = pageNo - 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateClassECD.Show
End Sub

Private Sub cmdUpdate_Click()
    Dim totalStudents As Integer
    Dim count As Double
    totalStudents = countStudents(selectedClass)
    count = 2
    
    'get the regID and the current class address
    ReDim regId(totalStudents + 1)
    ReDim address(totalStudents + 1)
    For Each Key In keyArray
        regId(count) = Worksheets("Student Tracking").Range("C" & Key).Text
        address(count) = currentClassAddress(Key)
        count = count + 1
    Next Key
    
    'to check whether all the checkboxes have been filled
     For i = 2 To totalStudents + 1
        'if all checkboxes from the same row are unchecked
        If chkGradeOne(i).value = False And chkRepeat(i).value = False And chkNUR(i).value = False And chkLKG(i).value = False And chkUKG(i).value = False And chkKG(i).value = False And chkFailedAndDropped(i).value = False And chkPassedAndDropped(i).value = False Then
            MsgBox "Please select update status of all students of the class"
            Exit Sub
        End If
     Next i
    
    
    For i = 2 To totalStudents + 1
        'if grade one checked then put class one in the next year
        'and if column of address is less than "Z"
        If chkGradeOne(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = 1
        End If
        'if repeat is checked then stay in the same class in the next year as well
        'and if column of address is less than "Z"
        If chkRepeat(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = Worksheets("Student Tracking").Range(address(i)).Text
        End If
        'if NUR is checked for ECD then promote to Nursery in the upcoming year
        'and if column of address is less than "Z"
        If chkNUR(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "NUR"
        End If
        'if LKG is checked for ECD then promote to LKG in the upcoming year
        'and if column of address is less than "Z"
        If chkLKG(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "LKG"
        End If
        'if UKG is checked for ECD then promote to UKG in the upcoming year
        'and if column of address is less than "Z"
        If chkUKG(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "UKG"
        End If
        'if KG is checked for ECD then promote to KG in the upcoming year
        'and if column of address is less than "Z"
        If chkKG(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "KG"
        End If
        'if the failed and Dropped is checked then drop the student in the upcoming year
        'and if column of address is less than "Z"
        If chkFailedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "FAD"
        End If
        'if the passed and Dropped is checked then drop the student in the upcoming year
        If chkPassedAndDropped(i).value = True And Mid(address(i), 2, 1) < "Z" Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 1).value = "PAD"
        End If
    Next i
    Unload Me
    MsgBox "Successfully Updated!"
End Sub

Private Sub UserForm_Activate()
    With Me.frameUpdateList
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 15 * Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    End With
End Sub


Private Sub UserForm_Initialize()
    'initialise the variables that are going to be used throughtout this form
    selectedECDNo = CInt(frmUpdateStudentOptions.cboECDNo.value)
    preoccupiedRows = 7

    'to set the name of the school
    lblSchoolName.Caption = getSchoolname()
    
    'Calculate the total no of rows in main sheet
    totalRows = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    
    'render the relevant view here,pageNo is publicly defined in the commonFunctions
    'and is initialised to 0 in the frmUpdateStudentOptions
    renderView (pageNo)
End Sub


'procedure that renders the view depending on the page Number
'@param pageNo->pageNo of the view
Private Sub renderView(pageNo As Double)
    'to initialise the record counter
    initCounter (pageNo)
    
    'to initialise the display list hash table
    initDisplaylist (pageNo)
    
    'to fix the no of labels,checkboxes and redim the arrays accordingly
    ReDim lblCells(1 To totalRows)
    ReDim chkGradeOne(1 To totalRows)
    ReDim chkRepeat(1 To totalRows)
    ReDim chkNUR(1 To totalRows)
    ReDim chkLKG(1 To totalRows)
    ReDim chkUKG(1 To totalRows)
    ReDim chkKG(1 To totalRows)
    ReDim chkFailedAndDropped(1 To totalRows)
    ReDim chkPassedAndDropped(1 To totalRows)
    
     'to retrieve all reg no,name and surname including table headers
    '***** these lines render the header ********
    Dim i As Double
    i = 1
    For j = 1 To 3  'no of columns
        k = 1 + j           'index of label array cmdLots()
        Set lblCells(k) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
        With lblCells(k)
             .Top = i * 20 + 20
            .Left = (j * 70) - 50
            .BorderColor = RGB(0, 0, 0)
            .BorderStyle = fmBorderStyleSingle
            .BackColor = &HC000&
            .Caption = " " & Worksheets("Student Tracking").Range("c" & preoccupiedRows + i).Offset(0, j - 1).value
        End With
    Next j
    'add controls for the header
    '1 ->signifies first row
    '0 ->signifies that there is no row on the sheet corresponding to this
    addControls i, 0
    i = i + 1
    
    '******* end of header *********
    
    'now for the table body and controls
    For Each Key In keyArray
        'to add checkboxes and textbox for tracking of scholarship
        addControls i, Key
        i = i + 1
    Next Key
    'to populate the table
    Call populateUpdateSheet
  
End Sub

'procedure that displays the controls and retrieves values from the sheet if
'the values have been fillled previously
'@param i->row number in the display form(should not exceed 50)
'@param rowNo -> row number of the record in the sheet
Sub addControls(ByVal i As Integer, ByVal rowNo As Double)
    'for grade 1 checkboxes
    Set chkGradeOne(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkGradeOne(i)
            .Top = i * 20 + 20
            .Left = (4.2 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Grade 1"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkGradeOneEvents = chkGradeOne(i)
     
     'for repeated checkboxes
    Set chkRepeat(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkRepeat(i)
            .Top = i * 20 + 20
            .Left = (5.2 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "ECD Repeated"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkECDRepeatedEvents = chkRepeat(i)
     
     'for NUR checkboxes
    Set chkNUR(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkNUR(i)
            .Top = i * 20 + 20
            .Left = (6.3 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "NUR"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkNUREvents = chkNUR(i)
     
     'for LKG checkboxes
    Set chkLKG(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkLKG(i)
            .Top = i * 20 + 20
            .Left = (6.9 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "LKG"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkLKGEvents = chkLKG(i)
     
     'for UKG checkboxes
    Set chkUKG(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkUKG(i)
            .Top = i * 20 + 20
            .Left = (7.5 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "UKG"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkUKGEvents = chkUKG(i)
     
     'for KG checkboxes
    Set chkKG(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkKG(i)
            .Top = i * 20 + 20
            .Left = (8.1 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "KG"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkKGEvents = chkKG(i)
     
     'for failed and dropped out checkboxes
    Set chkFailedAndDropped(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkFailedAndDropped(i)
            .Top = i * 20 + 20
            .Left = (8.7 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Dropped Out"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkFailedAndDroppedEvents = chkFailedAndDropped(i)
     
     
     'for passed and dropped out checkboxes
    Set chkPassedAndDropped(i) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
        With chkPassedAndDropped(i)
            .Top = i * 20 + 20
            .Left = (9.8 * 70) - 50
            .GroupName = i
            If i = 1 Then
                .Caption = "Passed and Transferred"
            End If
        End With
     ReDim Preserve dynamicControl(1 To i)
     Set dynamicControl(i).chkPassedAndDroppedEvents = chkPassedAndDropped(i)
End Sub


'populate the hash table displayList with regID as indexes and
'current class as value depending on the Page Number
'@param pageNo->the page for which the list has to be initialised
Private Sub initDisplaylist(pageNo As Double)
    Dim count As Integer
    count = 0
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If currentClass(i + preoccupiedRows) < 0 And selectedECDNo = CInt(Worksheets("Student Tracking").Range("BO" & (i + preoccupiedRows)).value) Then
                If count >= perPage * pageNo And count < perPage * (pageNo + 1) Then
                    If selectedClass = -1 Then          'in case of ECD
                        displayList.Add "ECD/PPC", CStr(i + preoccupiedRows)
                    ElseIf selectedClass = -2 Then
                        displayList.Add "KG", CStr(i + preoccupiedRows)
                    ElseIf selectedClass = -3 Then
                        displayList.Add "UKG", CStr(i + preoccupiedRows)
                    ElseIf selectedClass = -4 Then
                        displayList.Add "LKG", CStr(i + preoccupiedRows)
                    ElseIf selectedClass = -5 Then
                        displayList.Add "NUR", CStr(i + preoccupiedRows)
                    End If
                    keyArray.Add CStr(i + preoccupiedRows)
                End If
                count = count + 1
        End If
    Next i
End Sub

'procedure that initialises the label that displays the count value
'@param pageNo->the current page number
Private Sub initCounter(pageNo As Double)
    Dim totalStudentCount As Double
    
    totalStudentCount = countECDStudents(selectedECDNo)
    
    If totalStudentCount > perPage * (pageNo + 1) Then
        upperCount = perPage * (pageNo + 1)
    Else
        upperCount = totalStudentCount
    End If
    lowerCount = (perPage * pageNo) + 1
    
    frameUpdateList.Caption = lowerCount & "-" & upperCount & " of " & totalStudentCount & " students in class : " & "ECD/PPC" & " #" & selectedECDNo
    
    'check if the next page is available.disable the next button if this is the last page
    If upperCount = totalStudentCount Then
        cboNext.Enabled = False
    End If
    
    'enable the previous page button if this is not the first page i.e. 0
    If pageNo > 0 Then
        cboPrevious.Enabled = True
    End If
End Sub



'to uncheck or check all checkboxes of a group when one group is checked
Public Sub checkall(val As Boolean, Source As String)
    Dim totalStudentCount As Integer
    totalStudentCount = countStudents(selectedClass)
    
    If Source = "Grade 1" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkGradeOne(i + 1).value = val
            End If
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "ECD Repeated" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkRepeat(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "NUR" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkNUR(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "LKG" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkLKG(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "UKG" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkUKG(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "KG" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkKG(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Dropped Out" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkFailedAndDropped(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkPassedAndDropped(i).value = Not val
        Next
    ElseIf Source = "Passed and Transferred" Then
        For i = 1 To totalStudentCount + 1
            If Not i = totalStudentCount + 1 Then
                chkPassedAndDropped(i + 1).value = val
            End If
            chkGradeOne(i).value = Not val
            chkRepeat(i).value = Not val
            chkNUR(i).value = Not val
            chkLKG(i).value = Not val
            chkUKG(i).value = Not val
            chkKG(i).value = Not val
            chkFailedAndDropped(i).value = Not val
        Next
    End If
End Sub

'procedure that populates the update form with relevent information about each row
Private Sub populateUpdateSheet()
    Dim i As Double
    i = 2    'as table is populated starting from second row
    
    For Each Key In keyArray
        For j = 1 To 3          'no of columns
            k = i + j           'index of label array lblcells()
            Set lblCells(k) = frmUpdateClassECD.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
            With lblCells(k)
                 .Top = i * 20 + 20
                .Left = (j * 70) - 50
                .BackColor = RGB(255, 255, 255)
                .BorderColor = RGB(0, 0, 0)
                .BorderStyle = fmBorderStyleSingle
                .Caption = " " & Worksheets("Student Tracking").Range("c" & val(Key)).Offset(0, j - 1).Text
            End With
        Next j
        i = i + 1
    Next Key
End Sub


'to get the no of students that needs to be displayed on the update form
'it can return a maximum value not exceeding that of perPage
Function countStudents(ByVal selectedClass As Integer) As Double
    Dim count As Double
    count = countECDStudents(selectedECDNo)

    If count > perPage Then
        countStudents = perPage
    Else
        countStudents = count
    End If
End Function

'procedure that disables repeated buttons for all the ECD students of the year
'if any one of the student has been updated to NUR,LKG,UKG or KG
Sub disableAllRepeatedButtons()
    For i = 1 To keyArray.count + 1
        chkRepeat(i).value = False
        chkRepeat(i).Enabled = False
    Next i
End Sub
Attribute VB_Name = "frmUpdateMarks"
Attribute VB_Base = "0{964DE3E6-49FE-4D2C-ADBA-1A21CF6DE5DB}{FB2A5087-83D2-4B11-94DB-882293BD68B2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'array of labels from which the header of table is rendered
Private lblHeaderElements() As MSForms.Label

'array of labels which is used to render regID,First Name and Last Name in the table
Private lblStudentsInfo() As MSForms.Label

Private txtSubjectMarks() As MSForms.TextBox
Private txtMarksEvents() As New updateMarksEvents

Dim preoccupiedRows As Double            'to store the no of preoccupied rows by header in the main sheet
Dim selectedClass As Integer            'to store the class selected by user for update
Dim selectedYear As Integer             'to store the year selected by user in update form
Dim totalRows As Double                  'the total no of rows in the main sheet
Dim lowerCount As Double                'from which key the current display starts from
Dim upperCount As Double                'till which key the current display ends

Dim displayList As New Collection
Dim keyArray As New Collection

'stores the no of subjects that students of this level study
Dim subjectCount As Integer

'identifies the column in the information sheet
'that has subjects of the current level
Public subjectColumn As String
Public subjectColumnNo As Integer


Private Sub cboNext_Click()
    'increment the pageNo,empty the display array and display the next page
    pageNo = pageNo + 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateMarks.Show
End Sub

Private Sub cboPrevious_Click()
    'increment the pageNo,empty the display array and display the next page
    pageNo = pageNo - 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateMarks.Show
End Sub

Private Sub cmdUpdate_Click()
    Dim validationFailed As Boolean
    Dim serialNo As Integer
    Dim regId As String
    serialNo = 1
    
    'validate that all subject marks have been filled and they are not already red
    '(in case of marks greater than the full marks)
    validationFailed = False
    For i = 1 To keyArray.count Step 1
        For j = 1 To subjectCount Step 1
            If Len(txtSubjectMarks(i, j)) = 0 Or txtSubjectMarks(i, j).BackColor = &HFF& Then
                txtSubjectMarks(i, j).BackColor = &HFF&
                validationFailed = True
            End If
        Next j
    Next i
    If validationFailed = True Then
        MsgBox "Please Enter Individual/Correct Marks of All the Subjects"
        Exit Sub
    End If
    
    For Each Key In keyArray
        'activate the sheet and find the last row
        'or the first empty row starting from A10
        ActiveWorkbook.Worksheets("Student Marks").Activate
    
    
        'get the regID of the student first
        regId = Worksheets("Student Tracking").Range("c" & Key).Text
        
        'if there is no data of the student in this year then the
        'first empty cell is selected for inserting data
        Range("A9").Select
        Do
            If IsEmpty(activeCell) = False Then
                activeCell.Offset(1, 0).Select
            End If
        Loop Until IsEmpty(activeCell) = True
        
        'if the student already has marks for this year then
        'choose the row to update
        For Each cell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & Worksheets("Student Marks").Cells(Rows.count, 3).End(xlUp).row + 1)
            If cell.Text = regId And cell.Offset(0, -1).value = selectedYear Then
                cell.Offset(0, -2).Select
            End If
        Next cell
            
        'firstly we need to copy the schoolID,year,regID and class
        'of the updated student to the "Student Marks" sheet
        activeCell.value = Worksheets("Student Tracking").Cells(Key, 1).Text
        activeCell.Offset(0, 1).value = selectedYear
        activeCell.Offset(0, 2).value = Worksheets("Student Tracking").Cells(Key, 3).Text
        activeCell.Offset(0, 3).value = displayList.Item(Key)
    
        'now add all the marks to the sheet
        For subjectNo = 1 To subjectCount Step 1
            activeCell.Offset(0, 3 + subjectNo).value = txtSubjectMarks(serialNo, subjectNo).value
        Next subjectNo
        serialNo = serialNo + 1
    Next Key
    
    Worksheets("Buttons").Activate
    MsgBox "Successfully Updated!"
End Sub

Private Sub frameUpdateList_Click()

End Sub

Private Sub UserForm_Initialize()
    preoccupiedRows = 7
    selectedClass = frmUpdateStudentOptions.selectedClass
    selectedYear = frmUpdateStudentOptions.selectedYear
    
    'first we need to initialise the column address
    'from which to retrieve subjects from for the class
    initialiseSubjectColumn
    
    'the no of subjects need to be initialised
    subjectCount = Worksheets("Subjects").Cells(Rows.count, subjectColumnNo).End(xlUp).row - (preoccupiedRows + 1)
    
    'to set the name of the school
    lblSchoolName.Caption = getSchoolname()
     
    'Calculate the total no of rows in main sheet
    totalRows = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
                
    'render the relevant view here,pageNo is publicly defined in the commonFunctions
    'and is initialised to 0 in the frmUpdateStudentOptions
    renderView (pageNo)
End Sub

'procedure that renders the view depending on the page Number
'@param pageNo->pageNo of the view
Private Sub renderView(pageNo As Double)
    'to initialise the record counter
    initCounter (pageNo)
    
    'to initialise the display list hash table
    initDisplaylist (pageNo)
    
    
    'the header will have labels that consist of reg_id,first name and last name
    'in addition to the names of subjects
    ReDim lblHeaderElements(subjectCount + 4)
    ReDim lblStudentsInfo((displayList.count * 3), 3)
    ReDim txtSubjectMarks(displayList.count, subjectCount)
    ReDim txtMarksEvents(displayList.count, subjectCount)
    
    
    'init the scrollbar
    initScrollbar
    
    'now we start rendering the table
    'first the header
    initHeader
    
    'now we render regID,First Name and Last Name
    initStudentsData
    
    'finally the textboxes that will hold the marks of each subject
    initTextBoxes
    
End Sub

'procedure that initialises the label that displays the count value
'@param pageNo->the current page number
Private Sub initCounter(pageNo As Double)
    Dim totalStudentCount As Double
    Dim selectedClassString As String
    
    If selectedClass < 0 Then
        selectedClassString = "ECD/PPC"
    Else
        selectedClassString = CStr(selectedClass)
    End If
    
    totalStudentCount = countStudentsInClass(selectedClass)
    
    If totalStudentCount > perPage * (pageNo + 1) Then
        upperCount = perPage * (pageNo + 1)
    Else
        upperCount = totalStudentCount
    End If
    lowerCount = (perPage * pageNo) + 1
    
    frameUpdateList.Caption = lowerCount & "-" & upperCount & " of " & totalStudentCount & " students in class : " & selectedClassString
    
    'check if the next page is available.disable the next button if this is the last page
    If upperCount = totalStudentCount Then
        cboNext.Enabled = False
    End If
    
    'enable the previous page button if this is not the first page i.e. 0
    If pageNo > 0 Then
        cboPrevious.Enabled = True
    End If
End Sub


'populate the hash table displayList with regID as indexes and
'current class as value depending on the Page Number
'@param pageNo->the page for which the list has to be initialised
Private Sub initDisplaylist(pageNo As Double)
    Dim count As Integer
    count = 0
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If (selectedClass = currentClass(i + preoccupiedRows)) Then
                If count >= perPage * pageNo And count < perPage * (pageNo + 1) Then
                    If selectedClass = -1 Then          'in case of ECD
                        displayList.Add "ECD/PPC", CStr(i + preoccupiedRows)
                    Else
                        displayList.Add selectedClass, CStr(i + preoccupiedRows)
                    End If
                    keyArray.Add CStr(i + preoccupiedRows)
                End If
                count = count + 1
        End If
    Next i
End Sub


'** sub-procedure that initialises the names of subjects in the table headers depending on the
'** list of subjects on the "Information" sheet
Private Sub initHeader()
    'column no for the subjects
    Dim column As Integer
    
    'initialise the labels for displaying regID,First Name and Last Name
    For i = 1 To 3 Step 1
        Set lblHeaderElements(i) = frmUpdateMarks.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
        With lblHeaderElements(i)
            .Top = 20
            .Left = (i * 70) - 50
            .BorderColor = RGB(0, 0, 0)
            .BorderStyle = fmBorderStyleSingle
            .BackColor = &HC000&
            .TextAlign = fmTextAlignCenter
            .Caption = " " & Worksheets("Student Tracking").Range("c" & preoccupiedRows + 1).Offset(0, i - 1).value
        End With
    Next i
    
    'initialise the labels for the name of subjects
    column = 1
    For Each cell In Worksheets("Subjects").Range(subjectColumn & startingRow & ":" & subjectColumn & Worksheets("Subjects").Cells(Rows.count, subjectColumnNo).End(xlUp).row)
        Set lblHeaderElements(column) = frmUpdateMarks.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
        With lblHeaderElements(column)
            .Top = 20
            .Left = ((column + 3) * 60)
            .BorderColor = RGB(0, 0, 0)
            .BorderStyle = fmBorderStyleSingle
            .BackColor = &HC000&
            .TextAlign = fmTextAlignCenter
            .Caption = cell.value
        End With
        column = column + 1
    Next cell
End Sub

Private Sub initStudentsData()
    Dim row As Double
    row = 2    'as table is populated starting from second row
    
    For Each Key In keyArray
        For column = 1 To 3          'no of columns
            Set lblStudentsInfo(row, column) = frmUpdateMarks.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
            With lblStudentsInfo(row, column)
                .Top = row * 20
                .Left = (column * 70) - 50
                .BackColor = RGB(255, 255, 255)
                .BorderColor = RGB(0, 0, 0)
                .BorderStyle = fmBorderStyleSingle
                .Caption = " " & Worksheets("Student Tracking").Range("c" & Key).Offset(0, column - 1).Text
            End With
        Next column
        row = row + 1
    Next Key
End Sub


'** subprocedure that renders the textboxes used to input marks
'** obtained for individual subjects
Private Sub initTextBoxes()
    Dim row As Double
    Dim regId As String
    row = 1
    
    For Each Key In keyArray
        regId = Worksheets("Student Tracking").Range("c" & Key).Text
        For column = 1 To subjectCount Step 1
            Set txtSubjectMarks(row, column) = frmUpdateMarks.frameUpdateList.Controls.Add("Forms.Textbox.1", "txt")
            With txtSubjectMarks(row, column)
                .Top = row * 20 + 20
                'validation in updateMarksEvents uses the position
                'of the textbox to validate marks.if the left position is changed here
                'then so must the validation in the updateMarksEvents
                .Left = ((column + 3.3) * 60)
                .Width = 30
                .MaxLength = 3
                
                'check if the marks for the student has alredy been entered
                'for the current year.retrieve the marks if it has been
                For Each cell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & Worksheets("Student Marks").Cells(Rows.count, 3).End(xlUp).row + 1)
                    If cell.Text = regId And cell.Offset(0, -1).value = selectedYear Then
                        .value = cell.Offset(0, column + 1).value
                    End If
                Next cell
            End With
            
            'add event listener for textboxes
            Set txtMarksEvents(row, column).txtSubjectMarks = txtSubjectMarks(row, column)
            
        Next column
        row = row + 1
    Next Key
End Sub

'** subprocedure that initialises the subjectColumn and subjectColumnNo variables that
'** differentiates the classwise subjects
Private Sub initialiseSubjectColumn()
    If selectedClass = -1 Then
        subjectColumn = "A"
        subjectColumnNo = 1
    ElseIf selectedClass = 1 Then
        subjectColumn = "D"
        subjectColumnNo = 4
    ElseIf selectedClass = 2 Then
        subjectColumn = "G"
        subjectColumnNo = 7
    ElseIf selectedClass = 3 Then
        subjectColumn = "J"
        subjectColumnNo = 10
    ElseIf selectedClass = 4 Then
        subjectColumn = "M"
        subjectColumnNo = 13
    ElseIf selectedClass = 5 Then
        subjectColumn = "P"
        subjectColumnNo = 16
    ElseIf selectedClass = 6 Then
        subjectColumn = "S"
        subjectColumnNo = 19
    ElseIf selectedClass = 7 Then
        subjectColumn = "V"
        subjectColumnNo = 22
    ElseIf selectedClass = 8 Then
        subjectColumn = "Y"
        subjectColumnNo = 25
    ElseIf selectedClass = 9 Then
        subjectColumn = "AB"
        subjectColumnNo = 28
    ElseIf selectedClass = 10 Then
        subjectColumn = "AE"
        subjectColumnNo = 34
    ElseIf selectedClass = 11 Then
        subjectColumn = "AH"
        subjectColumnNo = 31
    ElseIf selectedClass = 12 Then
        subjectColumn = "AK"
        subjectColumnNo = 37
    End If
End Sub

'procedure that initializes the scrollbar
Private Sub initScrollbar()
    With frameUpdateList
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsBoth
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 21 * Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
        .ScrollWidth = .InsideWidth * 2
    End With
End Sub
Attribute VB_Name = "frmUpdateSch"
Attribute VB_Base = "0{A99DCB0B-5851-4CB4-A0D5-26394DB795A6}{A7B6A689-39A8-4ED2-BCA1-065C2DC00798}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private cmdLots() As MSForms.Label                  'array of labels to create a table

Private chkScholarship() As MSForms.OptionButton    'array of scholarships option button
Private txtScholarshipAmount() As MSForms.TextBox
Private lblScholarshipAmount As MSForms.Label
Private schList()
Private schMasterList()                             'array of scholarship whose order maps each scholarship to its numerical value

Dim preoccupiedRows As Double           'to store the no of preoccupied rows by header in the main sheet
Dim selectedClass As Integer

'for storing the no of rows being displayed currently
Dim lowerCount, upperCount, totalRows As Double

Dim displayList As New Collection
Dim keyArray As New Collection

Dim regId() As String
Dim address() As String

Dim chkschEvents() As New updateScholarshipEvents
Dim txtschEvents() As New updateScholarshipEvents

    
Private Sub cboNext_Click()
    'increment the pageNo,empty the display array and display the next page
    pageNo = pageNo + 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateSch.Show
End Sub

Private Sub cboPrevious_Click()
    'increment the pageNo,empty the display array and display the next page
    pageNo = pageNo - 1
    Set displayList = Nothing
    Set keyArray = Nothing

    'reload the form
    Unload Me
    frmUpdateSch.Show
End Sub

Private Sub cmdUpdate_Click()
    Dim totalStudents As Integer
    totalStudents = countStudents(frmUpdateStudentOptions.selectedClass)
    ReDim regId(totalStudents + 1)
    ReDim address(totalStudents + 1)
    Dim count As Double
    Dim masterSchNum As Integer
    Dim schNum As Integer
    
    'flag to determine if student has received a scholarship
    Dim schReceived As Boolean
    
    count = 2
    
    'get the regID and the current class address
    For Each Key In keyArray
        regId(count) = Worksheets("Student Tracking").Range("C" & Key).Text
        address(count) = currentClassAddress(Key)
        count = count + 1
    Next Key
    
    'if a scholarship has been chosen then the amount must be specified
    For i = 2 To (keyArray.count + 1)
        schReceived = False
        schNum = 1
        'identify the scholarship from level wise scholarship
        For Each Item In schList
            If chkScholarship(i, schNum).ControlTipText = Item And chkScholarship(i, schNum).value = True Then
                masterSchNum = 1
                
                'get numerical value from the scholarship depending on the order of scholarship in the full list
                For Each masterItem In schMasterList
                    If Item = masterItem Then
                        schReceived = True
                        Worksheets("Student Tracking").Range(address(i)).Offset(0, 12).value = masterSchNum
                    End If
                    masterSchNum = masterSchNum + 1
                Next masterItem
            End If
            schNum = schNum + 1
        Next Item
        
        'if student has not received any scholarship then insert a "0"
        If Not schReceived Then
            Worksheets("Student Tracking").Range(address(i)).Offset(0, 12).value = 0
        End If
        
        'process and input the scholarship amount
        Worksheets("Student Tracking").Range(address(i)).Offset(0, 38).value = txtScholarshipAmount(i - 1)
    Next i
    MsgBox "Successfully Updated!"
End Sub


Private Sub frameUpdateList_Click()

End Sub

Private Sub UserForm_Activate()
     With Me.frameUpdateList
        'This will create a vertical scrollbar
        .ScrollBars = fmScrollBarsVertical
        
        'Change the values of 2 as Per your requirements
        .ScrollHeight = 15 * Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    End With
End Sub


Private Sub UserForm_Initialize()
    'initialise the variables that are going to be used throughtout this form
    selectedClass = frmUpdateStudentOptions.selectedClass
    preoccupiedRows = 7

    'to set the name of the school
    lblHeader.Caption = getSchoolname()
    
    'init master scholarship list which is in column "F" in inofrmation sheet
    initSchRange schMasterList, "F"
   
    'Calculate the total no of rows in main sheet
    totalRows = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row
    
    'render the relevant view here,pageNo is publicly defined in the commonFunctions
    'and is initialised to 0 in the frmUpdateStudentOptions
    renderView (pageNo)
  
End Sub

'procedure that renders the view depending on the page Number
'@param pageNo->pageNo of the view
Private Sub renderView(pageNo As Double)
    'to initialise the record counter
    initCounter (pageNo)
    
    'to initialise the display list hash table
    initDisplaylist (pageNo)
    
    'to fix the no of labels,checkboxes and redim the arrays accordingly
    'we assume that there are 14 types of scholarship in the information table
    'but we can exclude "none" as it is not a scholarship
    ReDim cmdLots(1 To totalRows)
    ReDim chkScholarship(1 To totalRows, 1 To 20)
    ReDim txtScholarshipAmount(1 To totalRows)
     
    ReDim chkschEvents(1 To totalRows, 1 To 20)
    ReDim txtschEvents(1 To totalRows)
    
     'to retrieve all reg no,name and surname including table headers
    '***** these lines render the header ********
    Dim i As Double
    i = 1
    For j = 1 To 3  'no of columns
        k = 1 + j           'index of label array cmdLots()
        Set cmdLots(k) = frmUpdateSch.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
        With cmdLots(k)
             .Top = i * 20 + 20
            .Left = (j * 70) - 50
            .BorderColor = RGB(0, 0, 0)
            .BorderStyle = fmBorderStyleSingle
            .BackColor = &HC000&
            .Caption = " " & Worksheets("Student Tracking").Range("c" & preoccupiedRows + i).Offset(0, j - 1).value
        End With
    Next j
    'add controls for the header
    '1 ->signifies first row
    '0 ->signifies that there is no row on the sheet corresponding to this
    addControls i, 0
    i = i + 1
    
    '******* end of header *********
    
    'now for the table body and controls
    For Each Key In keyArray
        'to add checkboxes and textbox for tracking of scholarship
        addControls i, Key
        i = i + 1
    Next Key
    'to populate the table
    Call populateUpdateSheet
  
    'to insert respective classes
    'Call addClasses
    
    'disable certain scholarships
    Call disableSch
End Sub


'procedure that displays the controls and retrieves values from the sheet if
'the values have been fillled previously
'@param i->row number in the display form(should not exceed 50)
'@param rowNo -> row number of the record in the sheet
Sub addControls(ByVal i As Integer, ByVal rowNo As Double)
    'for scholarship
    'get scholarship names corresponding to the one in information sheet in schMasterlist
    Dim schNum As Integer
    schNum = 1
    
    'get scholarship from information table from column "D" or "E" depending on the level
    If frmUpdateStudentOptions.selectedClass > 4 Then
        initSchRange schList, "E"
    Else
        initSchRange schList, "D"
    End If
    
    'add checkboxes
    For Each Item In schList
            Set chkScholarship(i, schNum) = Me.frameUpdateList.Controls.Add("Forms.Optionbutton.1", "chk")
            With chkScholarship(i, schNum)
                If i = 1 Then
                    .Top = 40
                    .Caption = Item
                Else
                    .Top = i * 20 + 20
                    .value = isScholarshipChecked(frmUpdateStudentOptions.cboYear.value, Item, rowNo)
                End If
                    .Left = 250 + (schNum - 1) * 65
                    .GroupName = i
                    .ControlTipText = Item
            End With
            'add event listener only for the first line of option buttons
            If (i = 1) Then
                Set chkschEvents(i, schNum).chkschEvents = chkScholarship(i, schNum)
            End If
            schNum = schNum + 1
    Next Item
    
    
    'add textbox for scholarship amount
    If i = 1 Then
        Set lblScholarshipAmount = Me.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
        With lblScholarshipAmount
            .Top = 40
            .Left = 250 + (schNum - 1) * 65
            .Caption = "Amount"
        End With
    ElseIf i > 1 Then
        Set txtScholarshipAmount(i - 1) = Me.frameUpdateList.Controls.Add("Forms.Textbox.1", "txt")
        With txtScholarshipAmount(i - 1)
            .Top = i * 20 + 20
            .Width = 50
            .Left = 250 + (schNum - 1) * 65
            .MaxLength = 6
            .value = Worksheets("Student Tracking").Range("BA" & rowNo).Offset(0, (frmUpdateStudentOptions.cboYear.value - 2070)).value
        End With
        Set txtschEvents(i - 1).txtschEvents = txtScholarshipAmount(i - 1)
    End If
        
End Sub

Sub addClasses()
    For i = 1 To countStudents(frmUpdateStudentOptions.selectedClass) + 1 Step 1     'the no of rows
            k = i + 4           'index of label array cmdLots()
            Set cmdLots(k) = frmUpdateSch.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
            If i = 1 Then               'to set column header "class"
                With cmdLots(k)
                    .Top = 40
                    .Left = (4 * 70) - 50
                    .BackColor = &HC000&
                    .BorderColor = RGB(0, 0, 0)
                    .BorderStyle = fmBorderStyleSingle
                    .Caption = " Class"
                End With
                
            'to retrieve the current class of student
            
            Else
                With cmdLots(k)
                    .Top = i * 20 + 20
                    .Left = (4 * 70) - 50
                    .BackColor = RGB(255, 255, 255)
                    .BorderColor = RGB(0, 0, 0)
                    .BorderStyle = fmBorderStyleSingle
                    If frmUpdateStudentOptions.selectedClass = -1 Then
                        cmdLots(k).Caption = " " & "ECD/PPC"
                    Else
                        cmdLots(k).Caption = " " & frmUpdateStudentOptions.selectedClass
                    End If
                    '.Caption = "  i= " & i & "  j= " & j
                End With
            End If
    Next i

End Sub


'to uncheck or check all checkboxes of a group when one group is checked
Public Sub checkall(val As Boolean, Source As String)
    Dim schNum As Integer
    Dim studentCount As Integer
    
    schNum = 1
    studentCount = countStudents(frmUpdateStudentOptions.selectedClass) + 1
    For Each Item In schList
        If Source = Item Then
            For i = 1 To (keyArray.count + 1)
                If chkScholarship(i, schNum).Enabled = True Then
                    chkScholarship(i, schNum) = val
                End If
            Next
        End If
        schNum = schNum + 1
    Next Item
End Sub



'to get the no of students that needs to be displayed on the update form
'it can return a maximum value not exceeding that of perPage
Function countStudents(selectedClass As Integer) As Double
    Dim count As Double
    count = countStudentsInClass(selectedClass)

    If count > perPage Then
        countStudents = perPage
    Else
        countStudents = count
    End If
End Function


Private Sub populateUpdateSheet()
    Dim i As Double
    i = 2    'as table is populated starting from second row
    
    For Each Key In keyArray
        For j = 1 To 3          'no of columns
            k = i + j           'index of label array cmdLots()
            Set cmdLots(k) = frmUpdateSch.frameUpdateList.Controls.Add("Forms.Label.1", "lbl")
            With cmdLots(k)
                .Top = i * 20 + 20
                .Left = (j * 70) - 50
                .BackColor = RGB(255, 255, 255)
                .BorderColor = RGB(0, 0, 0)
                .BorderStyle = fmBorderStyleSingle
                .Caption = " " & Worksheets("Student Tracking").Range("c" & Key).Offset(0, j - 1).Text
            End With
        Next j
        i = i + 1
    Next Key
End Sub



'populate the hash table displayList with regID as indexes and
'current class as value depending on the Page Number
'@param pageNo->the page for which the list has to be initialised
Private Sub initDisplaylist(pageNo As Double)
    Dim count As Integer
    count = 0
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        If (selectedClass = currentClass(i + preoccupiedRows)) Then
                If count >= perPage * pageNo And count < perPage * (pageNo + 1) Then
                    If selectedClass = -1 Then          'in case of ECD
                        displayList.Add "ECD/PPC", CStr(i + preoccupiedRows)
                    Else
                        displayList.Add selectedClass, CStr(i + preoccupiedRows)
                    End If
                    keyArray.Add CStr(i + preoccupiedRows)
                End If
                count = count + 1
        End If
    Next i
End Sub

Private Sub initSchRange(ByRef list(), column As String)
    Dim lastLine As Long
    lastLine = Worksheets("Information").Range(column & Rows.count).End(xlUp).row
    list = Application.Transpose(Worksheets("Information").Range(column & "3:" & column & lastLine).value)
End Sub
 
'function that disables certain scholarships
Private Sub disableSch()
    Dim i As Double
    Dim schNum As Integer
    
    i = 2   'as table is populated starting from second row
    For Each Key In keyArray
        schNum = 1
        For Each sch In schList
            chkScholarship(i, schNum).Enabled = invalidSch(sch, Key)
            schNum = schNum + 1
        Next sch
        i = i + 1
    Next Key
End Sub

'function that determines if the scholarship option button for certain student should be disabled
Private Function invalidSch(ByVal sch As String, ByVal rowNo As Double) As Boolean
    
    'check if male or female
    If Worksheets("Student Tracking").Range("f" & rowNo).Text = "Male" And (sch = "100% Primary Girls" Or sch = "Girls from Karnali") Then
        invalidSch = False
        Exit Function
    End If
    
    'check if disabled
    If IsEmpty(Worksheets("Student Tracking").Range("l" & rowNo)) And sch = "Disabled" Then
         invalidSch = False
         Exit Function
    End If
    
    'check if dalit
    If (Not Worksheets("Student Tracking").Range("k" & rowNo).Text = "Dalit") And sch = "Dalit" Then
        invalidSch = False
        Exit Function
    End If
    
    'check if janajati
    If (Not Worksheets("Student Tracking").Range("k" & rowNo).Text = "Janajati") And sch = "Janajati and Marginalized" Then
        invalidSch = False
        Exit Function
    End If

    invalidSch = True
End Function


'procedure that initialises the label that displays the count value
'@param pageNo->the current page number
Private Sub initCounter(pageNo As Double)
    Dim totalStudentCount As Double
    Dim selectedClassString As String
    
    If selectedClass < 0 Then
        selectedClassString = "ECD/PPC"
    Else
        selectedClassString = CStr(selectedClass)
    End If
    
    totalStudentCount = countStudentsInClass(selectedClass)
    
    If totalStudentCount > perPage * (pageNo + 1) Then
        upperCount = perPage * (pageNo + 1)
    Else
        upperCount = totalStudentCount
    End If
    lowerCount = (perPage * pageNo) + 1
    
    frameUpdateList.Caption = lowerCount & "-" & upperCount & " of " & totalStudentCount & " students in class : " & selectedClassString
    
    'check if the next page is available.disable the next button if this is the last page
    If upperCount = totalStudentCount Then
        cboNext.Enabled = False
    End If
    
    'enable the previous page button if this is not the first page i.e. 0
    If pageNo > 0 Then
        cboPrevious.Enabled = True
    End If
End Sub



' function that returns whether a scholarship has already been selected in the
'update scholarship form
'if the scholarship has been selected then returns a TRUE else FALSE
'@param year -> the year currently selected for update
'@param schNum-> scholarship number as it appears in the master list of the
'                    Information sheet
'@param rowNo -> row number of the record in the sheet
Function isScholarshipChecked(ByVal year As Integer, ByVal schItem As String, ByVal rowNo As Double)
    'for converting the level wise schNum into an absolute scholarship number in
    'the master list
    Dim absoluteSchNum As Integer
    absoluteSchNum = 1
    For Each masterItem In schMasterList
        If masterItem = schItem Then
            Exit For
        End If
        absoluteSchNum = absoluteSchNum + 1
    Next masterItem

    
    If Worksheets("Student Tracking").Range("AA" & rowNo).Offset(0, (year - 2070)).value = absoluteSchNum Then
        isScholarshipChecked = True
    Else
        isScholarshipChecked = False
    End If
End Function


Attribute VB_Name = "frmUpdateStudentOptions"
Attribute VB_Base = "0{615E0E49-3533-407C-9DCF-1742841034E2}{B0BF7AA7-25EB-4416-8F0C-A75E42D72B36}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public selectedClass As Integer
Public selectedECDNo As Integer
Public selectedYear As Integer
Dim preoccupiedRows As Integer


Private Sub cboClass_Change()
    'enable and initialize the ECD No combobox only if the selected class is ECD
    'and the type of update currently selected is class update
    If Me.cboClass.value = "ECD/PPC" And optClass.value = True Then
        'enable the ECD No combobox and
        'initialise the ECD Number combobox
        Me.cboECDNo.Enabled = True
        initialiseECDNumbers
    Else
        Me.cboECDNo.Enabled = False
    End If
End Sub

Private Sub cmdUpdate_Click()
    'form validation
    If optClass.value = False And optSch.value = False And optMarks.value = False Then
        MsgBox ("Please Select Content type to Update")
        optClass.SetFocus
        Exit Sub
    End If
    
     If Len(cboYear.value) = 0 Then
        MsgBox ("Please Enter a year to update")
        Exit Sub
    End If
    
    If Len(cboClass.value) = 0 Then
        MsgBox ("Please Enter a class to update")
        Exit Sub
    End If
    
    If cboECDNo.Enabled = True And cboECDNo.ListIndex = -1 Then
        MsgBox ("Please Enter a ECD/PPC Number to update")
        Exit Sub
    End If
    
    selectedYear = cboYear.value
    
    'Incorporating ECD as well
    If cboClass.Text = "ECD/PPC" Then
        selectedClass = -1
    Else
        selectedClass = cboClass.value
    End If
    Me.Hide
        
    'Donot display the userform frmUpdatesheet if there is no student in given class
    If (selectedClass > 0 And countStudentsInClass(selectedClass) = 0) Or (selectedClass = -1 And getTotalECDPPCStudents() = 0) Then
        MsgBox "No Student in the specified class ! "
        Me.Show
    Else
        'set the page numer to the initial page
        'and no of row in a page to default value
        pageNo = 0
        perPage = Worksheets("Information").Range("Z2").value
        If optClass.value = True Then
            'class cannot be updated without updating scholarship
            If scholarshipNotUpdated(selectedClass) And selectedClass > -1 Then
                MsgBox "Please update the Scholarship before you can update this Class!"
                Me.Show
            Else
                'check whether to show the ECD update form or the normal class update form
                If selectedClass = -1 Then
                    frmUpdateClassECD.Show
                Else
                    frmUpdateClass.Show
                End If
            End If
           
        ElseIf optSch.value = True Then
            frmUpdateSch.Show
        ElseIf optMarks.value = True Then
            frmUpdateMarks.Show
        End If
    End If
    End Sub
 
Private Sub optClass_Change()
    'enable ECD no combobox only if it is a class update
    If optClass.value = True And cboClass.value = "ECD/PPC" Then
        cboECDNo.Enabled = True
    Else
        cboECDNo.Enabled = False
    End If
End Sub


Private Sub optMarks_Change()
    'Marks update is currently only for students drom 1-10
    'so remove all other classes when marks update is selected
    'also disable the ECD No combobox if marks is selected
    If optMarks.value = True Then
        cboClass.RemoveItem 0
        cboClass.RemoveItem 10
        cboClass.RemoveItem 10
        cboECDNo.Enabled = False
    Else
        cboClass.AddItem "ECD/PPC", 0
        cboClass.AddItem 11
        cboClass.AddItem 12
        cboECDNo.Enabled = True
    End If
End Sub


Private Sub optSch_Change()
    'disable the ECD No combobox for scholarship update
    If optSch.value = True Then
        cboECDNo.Enabled = False
    Else
        cboECDNo.Enabled = True
    End If
End Sub


Private Sub UserForm_Initialize()
    'initialise the preoccupied rows
    preoccupiedRows = 7
    
    'initialise the comboboxes
    cboClass.AddItem ("ECD/PPC")
    For i = 1 To 12
        cboClass.AddItem (i)
    Next i
    
    For i = 2070 To 2081
        cboYear.AddItem (i)
    Next i
    
End Sub

'function that checks whether the scholarship of all the students in the class has been
'updated,because class cannot be updated without updating scholarship for that class
Private Function scholarshipNotUpdated(selectedClass As Integer) As Boolean
    Dim notUpdated As Boolean
    notUpdated = False
    
    For i = 2 To (Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row - preoccupiedRows) Step 1
        'check whether student of the row is from the class selected and whether his/her
        'scholarship has not been updated
        If selectedClass = currentClass(i + preoccupiedRows) And Worksheets("Student Tracking").Range(currentClassAddress(i + preoccupiedRows)).Offset(0, 12).value = "" Then
            notUpdated = True
        End If
    Next i
    
    scholarshipNotUpdated = notUpdated
End Function



'procedure that initialises the existing ECD Numbers in the student tracking rows
Public Sub initialiseECDNumbers()
    'to check whether a class has already been added
    Dim alreadyAdded As Boolean
    alreadyAdded = False
    'now add all the ecd numbers into the combobox
    For Each rcell In Worksheets("Student Tracking").Range("BO" & startingRow & ":BO" & Worksheets("Student Tracking").Cells(Rows.count, 67).End(xlUp).row + 1)
        If rcell.value > 0 Then
            Call addIfUnique(Me.cboECDNo, rcell.value)
            alreadyAdded = True
        End If
    Next rcell
    
    'finally sort the combobox in ascending order
    If alreadyAdded Then
        Call sortCombo(Me.cboECDNo)
        'select the first ECD Numer if the ECD No has not been set
        Me.cboECDNo.ListIndex = 0
    End If
End Sub

'procedure that adds elements to the given combox only if the combobox does not
'already have the same value in its list
Sub addIfUnique(ByRef CB As comboBox, value As String)
    If CB.listCount = 0 Then GoTo doAdd
    Dim i As Integer
    For i = 0 To CB.listCount - 1
        If LCase(CB.list(i)) = LCase(value) Then Exit Sub
    Next
doAdd:
    CB.AddItem value
End Sub

'procedure that sorts the combo box in ascending order
Sub sortCombo(ByRef oCb As comboBox)
    Dim vaItems As Variant
    Dim i As Long, j As Long
    Dim vTemp As Variant
    vaItems = oCb.list
    For i = LBound(vaItems, 1) To UBound(vaItems, 1) - 1
        For j = i + 1 To UBound(vaItems, 1)
            If CInt(vaItems(i, 0)) > CInt(vaItems(j, 0)) Then
                vTemp = vaItems(i, 0)
                vaItems(i, 0) = vaItems(j, 0)
                vaItems(j, 0) = vTemp
            End If
        Next j
    Next i
    oCb.Clear
    For i = LBound(vaItems, 1) To UBound(vaItems, 1)
        oCb.AddItem vaItems(i, 0)
    Next i
End Sub

Attribute VB_Name = "frmYear"
Attribute VB_Base = "0{D8D3D181-C4B7-42C3-87B6-5B4F6D96D5C2}{2AE85AC1-C3F3-48A5-B935-BA7D80D53CE7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdSet_Click()
    If cboYear.value = "" Then
        MsgBox ("Please select year")
        cboYear.SetFocus
        Exit Sub
    End If
    
    Worksheets("General").Range("B5").value = cboYear.value
    Worksheets("Buttons").Range("M19").value = cboYear.value
    
    'if there are rows from the previous year then migrate them to the new year
    migrateRows
    
    MsgBox "Year changed Successfully!"

    Unload Me
End Sub

Private Sub UserForm_Initialize()
    'to initialise year combobox
    With Me.cboYear
        For i = 2070 To 2082 Step 1
            .AddItem i
        Next
    End With
    
End Sub


'copy rows from the preceding year to this year
Private Sub migrateRows()
    Dim migrationList(1 To 8) As String
    'to determine the offset of the year column from the starting column
    Dim yearColumnOffset As Integer
    Dim activeCell As Range
        
    'this is the list of sheets in which a new row is created from a row of previous year
    migrationList(1) = "Teacher Personal Info"
    migrationList(2) = "Teacher Educational Info"
    migrationList(3) = "Teacher Teaching History"
    migrationList(4) = "Teacher Educational History"
    migrationList(5) = "Teacher Training Info"
    migrationList(6) = "Teacher Leave Info"
    migrationList(7) = "Teacher Income"
    migrationList(8) = "Physical Details"

    For Each sheet In migrationList
        'only the physical details has the year in "B" column
        'all of the other sheets have it in the "C" column
        If sheet = "Physical Details" Then
            yearColumnOffset = 1
        Else
            yearColumnOffset = 2
        End If
        
        For Each cell In Worksheets(sheet).Range("A" & startingRow & ":A" & Worksheets(sheet).Cells(Rows.count, (yearColumnOffset + 1)).End(xlUp).row + 1)
            'i hate microsoft for this,the below condition is basically if a=(b-1)
            'check whether the sheet contains rows from the previous year
            'create a new row and copy that information into that row
            If (cell.Offset(0, yearColumnOffset).value - Worksheets("General").Range("B5").value + 1 = 0) Then
                'to find the first empty row starting from A9
                Set activeCell = Worksheets(sheet).Range("A9")
                Do
                    If IsEmpty(activeCell) = False Then
                        Set activeCell = activeCell.Offset(1, 0)
                    End If
                Loop Until IsEmpty(activeCell) = True
                
                'loop through each of the column and copy to the new row
                For i = 0 To (Worksheets(sheet).Cells(8, Columns.count).End(xlSides).column - 1) Step 1
                    'copy every cell exactly except the teacherID and the year which
                    'needs to have incremented values
                    'for year e.g. "2070" should become "2071"(if user chooses 2071)
                    'for teacherID e.g. "70001" should become "71001"
                    If i = yearColumnOffset Then
                        'this is the year column,we increment year by 1
                        activeCell.Offset(0, i).value = cell.Offset(0, i).value + 1
                    ElseIf i = (yearColumnOffset - 1) And Not yearColumnOffset = 1 Then
                        'this is the teacherID column,first two characters is the current year
                        'and the remaining charaters are same as the previous row
                        activeCell.Offset(0, i).value = Mid(Worksheets("General").Range("B5").value, 3, 2) & Mid(cell.Offset(0, i).value, 3)
                    Else
                        activeCell.Offset(0, i).value = cell.Offset(0, i).value
                    End If
                Next i
            End If
        Next cell
    Next sheet
    
    'update the summary
    updateSummary
End Sub
Attribute VB_Name = "reportFunctions"
'****************************************************************************************
'Module that consists of functions used to generate various reports
'****************************************************************************************




'** procedure that counts the no of students enrolled in the given year
'** depending on the specified filter
'** @param class -> class of the student
'** @param year ->year for which the no of enrolled students has to be calculated
'** @param filterGender ->to filter by gender i.e 1=>Both,2=>Girls,3=>Boys
'** @param filterCaste ->to filter by caste i.e 1=>All,2=>Dalit,3=>Janjati
'** @param filterDisability->to filter by disability i.e TRUE=>filter by disability
'** @return -> no of students enrolled in given class for given year for specified category
Function getEnrolledStudents(ByVal Class As Integer, ByVal year As Integer, ByVal filterGender As Integer, ByVal filterCaste As Integer, ByVal filterDisability As Boolean)
    Dim count, lastRow As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    count = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'no need to go through all this loop if class is not filled
        If Not Len(rcell.Offset(0, year - 2070).value) = 0 Then
            'check if student is from the required class
            If (Class - convertClassToInteger(rcell.Offset(0, year - 2070).value) = 0) Then
                If filterDisability = False Then
                    'now check the gender
                    If filterGender = 1 Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 2 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Female" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 3 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Male" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    End If
                'as names od disabilities have length greater than 4
                ElseIf filterDisability = True And Len(Worksheets("Student Tracking").Range("L" & rcell.row)) > 3 Then
                    count = count + 1
                End If
            End If
        End If
    Next rcell
    
    'return the count
    If Not count = 0 Then
        getEnrolledStudents = count
    End If
End Function

'** procedure that counts the no of students promoted to higher class in the given year
'** depending on the specified filter
'** @param class -> class of the student
'** @param year ->year for which the no of promoted students has to be calculated
'** @param filterGender ->to filter by gender i.e 1=>Both,2=>Girls,3=>Boys
'** @param filterCaste ->to filter by caste i.e 1=>All,2=>Dalit,3=>Janjati
'** @param filterDisability->to filter by disability i.e TRUE=>filter by disability
'** @return -> no of students promoted from given class for given year for specified category
Function getPromotedFromStudents(ByVal Class As Integer, ByVal year As Integer, ByVal filterGender As Integer, ByVal filterCaste As Integer, ByVal filterDisability As Boolean)
    Dim count, lastRow As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    count = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'no need to go through all this loop if class is not filled
        If Not Len(rcell.Offset(0, year - 2070).value) = 0 Then
            'check if student is from the required class and has been promoted in the corresponding year
            'PAD is also included as Promoted
            If (Class - convertClassToInteger(rcell.Offset(0, year - 2070).value) = 0) And ((convertClassToInteger(rcell.Offset(0, year + 1 - 2070).value) - convertClassToInteger(rcell.Offset(0, year - 2070).value)) > 0 Or rcell.Offset(0, year + 1 - 2070) = "PAD") Then
                If filterDisability = False Then
                    'now check the gender
                    If filterGender = 1 Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 2 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Female" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 3 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Male" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    End If
                ElseIf filterDisability = True And (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "N/A") Or (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "") Then
                    count = count + 1
                End If
            End If
        End If
    Next rcell
    
    'return the count
    If Not count = 0 Then
        getPromotedFromStudents = count
    End If
End Function



'** procedure that counts the no of students repeating the same class in the given year
'** depending on the specified filter
'** @param class -> class of the student
'** @param year ->year for which the no of repeating students has to be calculated
'** @param filterGender ->to filter by gender i.e 1=>Both,2=>Girls,3=>Boys
'** @param filterCaste ->to filter by caste i.e 1=>All,2=>Dalit,3=>Janjati
'** @param filterDisability->to filter by disability i.e TRUE=>filter by disability
'** @return -> no of students repeating in given class for given year for specified category
Function getRepeatingStudents(ByVal Class As Integer, ByVal year As Integer, ByVal filterGender As Integer, ByVal filterCaste As Integer, ByVal filterDisability As Boolean)
    Dim count, lastRow As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    count = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'no need to go through all this loop if class is not filled
        If Not Len(rcell.Offset(0, year - 2070).value) = 0 Then
            'check if student is from the required class and is studying in the same class the next year
            If (Class - convertClassToInteger(rcell.Offset(0, year - 2070).value) = 0) And (convertClassToInteger(rcell.Offset(0, year + 1 - 2070).value) - convertClassToInteger(rcell.Offset(0, year - 2070).value)) = 0 Then
                If filterDisability = False Then
                    'now check the gender
                    If filterGender = 1 Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 2 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Female" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 3 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Male" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    End If
                ElseIf filterDisability = True And (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "N/A") Or (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "") Then
                    count = count + 1
                End If
            End If
        End If
    Next rcell
    
    'return the count
    If Not count = 0 Then
        getRepeatingStudents = count
    End If
End Function





'** procedure that counts the no of students dropped out in the given year
'** depending on the specified filter
'** @param class -> class of the student
'** @param year ->year for which the no of dropped students has to be calculated
'** @param filterGender ->to filter by gender i.e 1=>Both,2=>Girls,3=>Boys
'** @param filterCaste ->to filter by caste i.e 1=>All,2=>Dalit,3=>Janjati
'** @param filterDisability->to filter by disability i.e TRUE=>filter by disability
'** @return -> no of students dropped out of given class for given year for specified category
Function getDroppedOutStudents(ByVal Class As Integer, ByVal year As Integer, ByVal filterGender As Integer, ByVal filterCaste As Integer, ByVal filterDisability As Boolean)
    Dim count, lastRow As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    count = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'no need to go through all this loop if class is not filled
        If Not Len(rcell.Offset(0, year - 2070).value) = 0 Then
            'check if student is from the required class and has dropped out in the corresponding year
            If (Class - convertClassToInteger(rcell.Offset(0, year - 2070).value) = 0) And (rcell.Offset(0, year + 1 - 2070).value = "FAD") Then
                If filterDisability = False Then
                    'now check the gender
                    If filterGender = 1 Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 2 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Female" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    ElseIf filterGender = 3 And Worksheets("Student Tracking").Range("F" & rcell.row) = "Male" Then
                        'filter by caste
                        If filterCaste = 1 Then
                            count = count + 1
                        ElseIf filterCaste = 2 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C2").value Then
                            count = count + 1
                        ElseIf filterCaste = 3 And Worksheets("Student Tracking").Range("K" & rcell.row) = Worksheets("Information").Range("C3").value Then
                            count = count + 1
                        End If
                    End If
                ElseIf filterDisability = True And (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "N/A") Or (Not Worksheets("Student Tracking").Range("L" & rcell.row) = "") Then
                    count = count + 1
                End If
            End If
        End If
    Next rcell
    
    'return the count
    If Not count = 0 Then
        getDroppedOutStudents = count
    End If
End Function


'** function that returns the no of students that have received a particular
'** scholarship depending on the gender of the student for a certain year
'** @param schNo -> scholarship Number as it is listed in the information sheet
'** @param filterGender ->to filter by gender i.e 1=>Both,2=>Girls,3=>Boys
'** @param year -> year for which the scholarship has to be counted
'** @return -> no of students receiving scholarship
Function getScholarshipReceivedCount(ByVal schNo As Integer, ByVal filterGender As Integer, ByVal Class As Integer, ByVal year As Integer)
    Dim lastRow, count As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    count = 0
    
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'check if the student is from the required class
        If (convertClassToInteger(rcell.Offset(0, year - 2070).value) - Class) = 0 Then
            'check if the scholarship is not empty and the one needed
            If (Not Len(rcell.Offset(0, (year - 2070) + 12).value) = 0) And (rcell.Offset(0, (year - 2070) + 12).value - schNo) = 0 Then
                'check the gender
                If filterGender = 1 Then
                    count = count + 1
                ElseIf filterGender = 2 And rcell.Offset(0, -9).value = "Female" Then
                    count = count + 1
                ElseIf filterGender = 3 And rcell.Offset(0, -9).value = "Male" Then
                    count = count + 1
                End If
            End If
        End If
    Next rcell
    
    'return the count
    If Not count = 0 Then
        getScholarshipReceivedCount = count
    End If
End Function

'** procedure that calculates the average marks of a given subject for the year and
'** class specified depending on the specified filters
'** @param year ->year for which the average marks has to be evaluated
'** @param class -> class for which the average marks has to be evaluated
'** @param subjectNo -> the subject no which uniquely identifies the subject for that class
'** @param filterGender ->to filter by gender i.e 1=>Male,2=>Female,3=>Total
'** @param filterCaste ->to filter by caste i.e 0=>Total,1=>Dalit,2=>Janjati,3=>Brahmin/Chhetri,4=>Others
'** @return -> Avg score in the specific subject

Function getAverageMarks(ByVal year As Integer, ByVal selectedClass As Integer, ByVal subjectNo As Integer, ByVal filterCaste As Integer, ByVal filterGender As Integer)
    Dim lastRow, subjectCount As Integer
    Dim marksSum As Double
    lastRow = Worksheets("Student Marks").Cells(Rows.count, 1).End(xlUp).row + 1
    
    subjectCount = 0
    marksSum = 0
    For Each rcell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & lastRow)
        'check if it is the correct year and class
        If (rcell.Offset(0, -1) - year = 0) And (rcell.Offset(0, 1) - selectedClass = 0) Then
            'now apply the filters
            For Each cell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1)
                If rcell.Text = cell.Text Then
                    'apply the caste filter
                    If filterCaste = 0 Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 3 Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        End If
                    ElseIf filterCaste = 1 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 3 Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        End If
                    ElseIf filterCaste = 2 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 3 Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        End If
                    ElseIf filterCaste = 3 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 3 Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        End If
                    ElseIf filterCaste = 4 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3) = "Male" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3) = "Female" Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        ElseIf filterGender = 3 Then
                            marksSum = marksSum + rcell.Offset(0, 1 + subjectNo)
                            subjectCount = subjectCount + 1
                        End If
                    End If
                End If
            Next cell
        End If
    Next rcell
    
    'calculate and return the average marks
    If (Not marksSum = 0) And (Not subjectCount = 0) Then
        getAverageMarks = Round(marksSum / subjectCount, 2)
    End If
End Function


'** procedure that calculates the no of students that appeared in exam in specified year
'** of the class specified depending on the specified filters
'** @param year ->year for which the no of students has to be calculated
'** @param class -> class for which the no of students has to be calculated
'** @param subjectNo -> the subject no which uniquely identifies the subject for that class
'** @param filterGender ->to filter by gender i.e 1=>Male,2=>Female,3=>Total
'** @param filterCaste ->to filter by caste i.e 0=>Total,1=>Dalit,2=>Janjati,3=>Brahmin/Chhetri,4=>Others
'** @return -> No of students who appeared in exam

Function getNoofStudentsAppearedInExam(ByVal year As Integer, ByVal selectedClass As Integer, ByVal subjectNo As Integer, ByVal filterCaste As Integer, ByVal filterGender As Integer)
    Dim lastRow, studentsAppeared As Integer
    lastRow = Worksheets("Student Marks").Cells(Rows.count, 1).End(xlUp).row + 1
    
    studentsAppeared = 0
    For Each rcell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & lastRow)
        'check if it is the correct year,class and the marks obtained is not zero
        If (rcell.Offset(0, -1) - year = 0) And (rcell.Offset(0, 1) - selectedClass = 0) And (Not rcell.Offset(0, 1 + subjectNo) - 0 = 0) Then
            'now apply the filters
            For Each cell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1)
                If rcell.Text = cell.Text Then
                    'apply the caste filter
                    If filterCaste = 0 Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 3 Then
                            studentsAppeared = studentsAppeared + 1
                        End If
                    ElseIf filterCaste = 1 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 3 Then
                            studentsAppeared = studentsAppeared + 1
                        End If
                    ElseIf filterCaste = 2 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 3 Then
                            studentsAppeared = studentsAppeared + 1
                        End If
                    ElseIf filterCaste = 3 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 3 Then
                            studentsAppeared = studentsAppeared + 1
                        End If
                    ElseIf filterCaste = 4 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsAppeared = studentsAppeared + 1
                        ElseIf filterGender = 3 Then
                            studentsAppeared = studentsAppeared + 1
                        End If
                    End If
                End If
            Next cell
        End If
    Next rcell
    
    'calculate and return the average marks
    If (Not studentsAppeared = 0) Then
        getNoofStudentsAppearedInExam = studentsAppeared
    End If
End Function

'** procedure that calculates the no of students that passed in exam in specified year
'** of the class specified depending on the specified filters
'** @param year ->year for which the no of students has to be calculated
'** @param class -> class for which the no of students has to be calculated
'** @param subjectNo -> the subject no which uniquely identifies the subject for that class
'** @param filterGender ->to filter by gender i.e 1=>Male,2=>Female,3=>Total
'** @param filterCaste ->to filter by caste i.e 0=>Total,1=>Dalit,2=>Janjati,3=>Brahmin/Chhetri,4=>Others
'** @return -> No of students who appeared in exam

Function getNoofStudentsPassedInExam(ByVal year As Integer, ByVal selectedClass As Integer, ByVal subjectNo As Integer, ByVal filterCaste As Integer, ByVal filterGender As Integer)
    Dim lastRow, studentsPassed As Integer
    Dim passMarks As Double
    
    lastRow = Worksheets("Student Marks").Cells(Rows.count, 1).End(xlUp).row + 1
    passMarks = CDbl(Worksheets("Subjects").Range("C" & startingRow - 1).Offset(subjectNo, 3 * selectedClass))
    
    studentsPassed = 0
    For Each rcell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & lastRow)
        'check if it is the correct year,class and the marks obtained is not zero
        If (rcell.Offset(0, -1) - year = 0) And (rcell.Offset(0, 1) - selectedClass = 0) And (CDbl(rcell.Offset(0, 1 + subjectNo).value) - passMarks >= 0) Then
            'now apply the filters
            For Each cell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1)
                If rcell.Text = cell.Text Then
                    'apply the caste filter
                    If filterCaste = 0 Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 3 Then
                            studentsPassed = studentsPassed + 1
                        End If
                    ElseIf filterCaste = 1 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 3 Then
                            studentsPassed = studentsPassed + 1
                        End If
                    ElseIf filterCaste = 2 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 3 Then
                            studentsPassed = studentsPassed + 1
                        End If
                    ElseIf filterCaste = 3 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 3 Then
                            studentsPassed = studentsPassed + 1
                        End If
                    ElseIf filterCaste = 4 And cell.Offset(0, 8) = returnString("C", filterCaste) Then
                        'apply the gender filter
                        If filterGender = 1 And cell.Offset(0, 3).value = "Male" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 2 And cell.Offset(0, 3).value = "Female" Then
                            studentsPassed = studentsPassed + 1
                        ElseIf filterGender = 3 Then
                            studentsPassed = studentsPassed + 1
                        End If
                    End If
                End If
            Next cell
        End If
    Next rcell
    
    'calculate and return the average marks
    If (Not studentsPassed = 0) Then
        getNoofStudentsPassedInExam = studentsPassed
    End If
End Function


'** function that returns the avg. attendance of a given year by applying certain filters
'**@param year ->year for which attendance has to be computed
'**@param selectedClass-> class for which avg attendance has to be computed
'**@param filterCaste -> to filter students by caste i.e. 0=>Total,1=>Dalit,2=>Janajati,3=>B/C,4=>Others
'**@param filterGender ->filter by gender i.e. 0=>Total,1=>Male,2=>Female
'**@return avg. attendance for a given type of student defined by filter for specified year
Function getAvgAttendance(ByVal year As Integer, ByVal selectedClass As Integer, ByVal filterCaste As Integer, ByVal filterGender As Integer)
    Dim lastRow, studentCount As Integer
    Dim attendanceSum As Long
    
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 1).End(xlUp).row + 1
    studentCount = 0
    attendanceSum = 0
    
    For Each rcell In Worksheets("Student Tracking").Range("O" & startingRow & ":O" & lastRow)
        'check if the student is from the required class and is of the year specified
        If (convertClassToInteger(rcell.Offset(0, year - 2070).value) - selectedClass) = 0 Then
            'filter by caste
            If filterCaste = 0 Then
                'filter by gender
                If filterGender = 0 Then
                    studentCount = studentCount + 1
                    attendanceSum = attendanceSum + rcell.Offset(0, (year - 2070) + 24).value
                ElseIf (filterGender = 1 And rcell.Offset(0, -9) = "Male") Or (filterGender = 2 And rcell.Offset(0, -9) = "Female") Then
                    studentCount = studentCount + 1
                    attendanceSum = attendanceSum + rcell.Offset(0, (year - 2070) + 24).value
                End If
            ElseIf rcell.Offset(0, -4) = returnString("C", filterCaste) Then
                'filter by gender
                If filterGender = 0 Then
                    studentCount = studentCount + 1
                    attendanceSum = attendanceSum + rcell.Offset(0, (year - 2070) + 24).value
                ElseIf (filterGender = 1 And rcell.Offset(0, -9) = "Male") Or (filterGender = 2 And rcell.Offset(0, -9) = "Female") Then
                    studentCount = studentCount + 1
                    attendanceSum = attendanceSum + rcell.Offset(0, (year - 2070) + 24).value
                End If
            End If
        End If
    Next rcell
    
    If (Not studentCount = 0) And (Not attendanceSum = 0) Then
        getAvgAttendance = Round(attendanceSum / studentCount, 0)
    End If
End Function


'** function that returns an array of teacher IDs filtered by the parameters passed
'** into the function
'** @param year -> year to filter teacher
'** @param filterCaste -> caste which will be used to filter teachers i.e.0=>Total,1=>Dalit,2=>Janajati,3=>B/C,4=>Others
'** @param filterGender -> filter by Gender of the teacher i.e.0=>Both,1=>Female,2=>Male
'** @param filterDisability -> filter by disability of the teacher
Function getTeacherIDs(ByVal year As Integer, ByVal filterCaste As Integer, ByVal filterGender As Integer, ByVal filterDisability As Integer) As Object
    Dim lastRow As Integer
    Set getTeacherIDs = New Collection
    lastRow = Worksheets("Teacher Personal Info").Cells(Rows.count, 2).End(xlUp).row + 1
    
    For Each rcell In Worksheets("Teacher Personal Info").Range("B" & startingRow & ":B" & lastRow)
        'filter by year,caste,gender and disability
        If (rcell.Offset(0, 1) - year = 0) Then
            'filter by caste
            If filterCaste = 0 Or (rcell.Offset(0, 4).value - filterCaste) = 0 Then
                'filter by gender
                If filterGender = 0 Or (rcell.Offset(0, 3).value - filterGender) = 0 Then
                    'filter by disability
                    If filterDisability = 0 Or (rcell.Offset(0, 16).value - filterDisability) = 0 Then
                        getTeacherIDs.Add rcell.value
                    End If
                End If
            End If
        End If
    Next rcell
End Function


'** function that returns an array of student IDs filtered by the parameters passed
'** into the function
'** @param year -> year
'** @param selectedClass -> class to which the student belongs to in the year specified
'** @param selectedStudent ->if the user chooses by student
'** @param filterCaste -> caste which will be used to filter i.e.0=>Total,1=>Dalit,2=>Janajati,3=>B/C,4=>Others
'** @param filterGender -> filter by Gender of the teacher i.e.0=>Both,1=>Female,2=>Male
'** @param filterDisability -> filter by disability of the teacher
Function getStudentIDs(ByVal year As Integer, ByVal selectedClass As Integer, ByVal selectedStudent As String, ByVal filterCaste As Integer, ByVal filterGender As Integer, ByVal filterDisability As Integer) As Object
    Dim lastRow As Integer
    
    Set getStudentIDs = New Collection
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1
    
    For Each rcell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & lastRow)
        'check if user has selected a student for whom to generate report
        If (Len(selectedStudent) > 0) And (rcell.Text = selectedStudent) Then
            getStudentIDs.Add rcell.row
        'check if class matches the selected class in the current year
        ElseIf (Len(selectedStudent) = 0) And (selectedClass - convertClassToInteger(rcell.Offset(0, 12 + (year - 2070)).value) = 0) Then
            'filter by caste
            If filterCaste = 0 Or (rcell.Offset(0, 8).value = returnString("C", filterCaste)) Then
                'filter by gender
                If filterGender = 0 Or (rcell.Offset(0, 3).value = returnString("AD", filterGender)) Then
                    'filter by disability
                    If filterDisability = 0 Or (rcell.Offset(0, 9).value = returnString("B", filterDisability)) Then
                        getStudentIDs.Add rcell.row
                    End If
                End If
            End If
        End If
    Next rcell
End Function

'** function that returns a students percentage when studentID,year and class are passed
'** @param studentID ->Id of the student
'** @param year->year for which the percentage has to be calculated
'** @param class->class of the student
Function getStudentPercentage(ByVal studentID As String, ByVal year As Integer, ByVal Class As Integer) As Variant
    Dim lastRow, marksSum As Double
    Dim subjectCount As Integer
    lastRow = Worksheets("Student Marks").Cells(Rows.count, 3).End(xlUp).row + 1
    
    'only for class from 1-12
    If Class > 0 And Class < 12 Then
        subjectCount = (Worksheets("Subjects").Cells(Rows.count, Worksheets("Subjects").Range("A" & startingRow).Offset(0, Class * 3).column).End(xlUp).row + 1) - startingRow
        marksSum = 0
        For Each rcell In Worksheets("Student Marks").Range("C" & startingRow & ":C" & lastRow)
            If (rcell.Offset(0, -1).value - year = 0) And (rcell.Text = studentID) And (convertClassToInteger(rcell.Offset(0, 1).value) - Class = 0) Then
                For i = 0 To (subjectCount - 1)
                    marksSum = marksSum + rcell.Offset(0, 2 + i).value
                Next i
            End If
        Next rcell
        
        If (Not subjectCount = 0) And (Not marksSum = 0) Then
            getStudentPercentage = Round(marksSum / subjectCount, 1)
        End If
    End If
End Function


'** Procedure that populates the filter by student combobox in the report form
'** depending on the year and class passed
'** @param year-> year for which the combobox has to be populated
'** @param selectedClass->class of the students
Sub initialiseByStudentCombo(ByVal year As Integer, ByVal selectedClass As Integer)
    Dim lastRow As Integer
    lastRow = Worksheets("Student Tracking").Cells(Rows.count, 3).End(xlUp).row + 1
    
    'enable the combobox and clear all previous items
    With frmReportList.cboStudent
        .Clear
        .Enabled = True
    End With
    
    'add students of the defined class and year to the combobox
    For Each rcell In Worksheets("Student Tracking").Range("C" & startingRow & ":C" & lastRow)
        If rcell.Offset(0, (year - 2070) + 12).value = selectedClass Then
            frmReportList.cboStudent.AddItem rcell.Offset(0, 1).value & " " & rcell.Offset(0, 2).value & "  (" & rcell.Text & ")"
        End If
    Next rcell
End Sub
Attribute VB_Name = "reviewEventClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'for handling the edit techer button in the frmTeacherOptions Form
Public WithEvents btnEditTeacherEvents As MSForms.Label
Attribute btnEditTeacherEvents.VB_VarHelpID = -1

'for handling the edit student button on the frmEditSheet Form
Public WithEvents btnEditStudentEvents As MSForms.Label
Attribute btnEditStudentEvents.VB_VarHelpID = -1


'for handling the delete teacher button on the frmTeacherOptions Form
Public WithEvents btnDeleteTeacherEvents As MSForms.Label
Attribute btnDeleteTeacherEvents.VB_VarHelpID = -1

Private Sub btnEditTeacherEvents_Click()
    frmTeacherOptions.showEditTeacherForm btnEditTeacherEvents.ControlTipText
End Sub

'procedure that deletes a teachers records
Private Sub btnDeleteTeacherEvents_Click()
    Dim reply As VbMsgBoxResult
    'if delete button is clicked on personal info page then delete all records of the teacher from the system else
    'delete only from a specific sheet
    If frmTeacherOptions.optPersonalInfo.value = True Then
        reply = MsgBox("Are you sure you want to permanently delete this Teacher and all related records from this year?", vbYesNo, "Confirm Delete")
        If reply = vbYes Then
            frmTeacherOptions.eraseAllTeacherRecords btnDeleteTeacherEvents.ControlTipText
        End If
    Else
        reply = MsgBox("Are you sure you want to delete this record?", vbYesNo, "Confirm Delete")
        If reply = vbYes Then
            frmTeacherOptions.confirmDeleteTeacherInfo btnDeleteTeacherEvents.ControlTipText
        End If
    End If
End Sub


Private Sub btnEditStudentEvents_Click()
    frmEditSheet.showEditStudentForm btnEditStudentEvents.ControlTipText
End Sub
Attribute VB_Name = "updateClassEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents chkpassEvents As MSForms.OptionButton
Attribute chkpassEvents.VB_VarHelpID = -1
Public WithEvents chkrepeatEvents As MSForms.OptionButton
Attribute chkrepeatEvents.VB_VarHelpID = -1
Public WithEvents chkdpEvents As MSForms.OptionButton
Attribute chkdpEvents.VB_VarHelpID = -1
Public WithEvents chkFailedAndDroppedEvents As MSForms.OptionButton
Attribute chkFailedAndDroppedEvents.VB_VarHelpID = -1
Public WithEvents chkPassedAndDroppedEvents As MSForms.OptionButton
Attribute chkPassedAndDroppedEvents.VB_VarHelpID = -1
Public WithEvents txtAttendanceArray As MSForms.TextBox
Attribute txtAttendanceArray.VB_VarHelpID = -1

'for ECD class update
Public WithEvents chkGradeOneEvents As MSForms.OptionButton
Attribute chkGradeOneEvents.VB_VarHelpID = -1
Public WithEvents chkECDRepeatedEvents As MSForms.OptionButton
Attribute chkECDRepeatedEvents.VB_VarHelpID = -1
Public WithEvents chkNUREvents As MSForms.OptionButton
Attribute chkNUREvents.VB_VarHelpID = -1
Public WithEvents chkLKGEvents As MSForms.OptionButton
Attribute chkLKGEvents.VB_VarHelpID = -1
Public WithEvents chkUKGEvents As MSForms.OptionButton
Attribute chkUKGEvents.VB_VarHelpID = -1
Public WithEvents chkKGEvents As MSForms.OptionButton
Attribute chkKGEvents.VB_VarHelpID = -1



'to link checkboxes ie if the topmost checkbox is ticked then so must
'all of them till the bottom and user shouldnot be allowed to tick pass,fail,repeat
'for the same student



Private Sub chkECDRepeatedEvents_Change()
    If (chkECDRepeatedEvents.Caption = "ECD Repeated") And chkECDRepeatedEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkECDRepeatedEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub


Private Sub chkGradeOneEvents_Change()
    If (chkGradeOneEvents.Caption = "Grade 1") And chkGradeOneEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkGradeOneEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub

Private Sub chkKGEvents_Change()
    'disable the repeated button if any one of the student has been specified
    'into NUR,KG,UKG,LKG
    frmUpdateClassECD.disableAllRepeatedButtons
    If (chkKGEvents.Caption = "KG") And chkKGEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkKGEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub


Private Sub chkLKGEvents_Change()
    'disable the repeated button if any one of the student has been specified
    'into NUR,KG,UKG,LKG
    frmUpdateClassECD.disableAllRepeatedButtons
    If (chkLKGEvents.Caption = "LKG") And chkLKGEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkLKGEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub


Private Sub chkNUREvents_Change()
    'disable the repeated button if any one of the student has been specified
    'into NUR,KG,UKG,LKG
    frmUpdateClassECD.disableAllRepeatedButtons
    If (chkNUREvents.Caption = "NUR") And chkNUREvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkNUREvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub

Private Sub chkpassEvents_Change()
    If (chkpassEvents.Caption = "Passed") And chkpassEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClass.checkall True, chkpassEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub


Private Sub chkrepeatEvents_Change()
    If (chkrepeatEvents.Caption = "Repeated") And chkrepeatEvents.value = True Then       'to check all checkboxes when the header checkbox is checked
        frmUpdateClass.checkall True, chkrepeatEvents.Caption
    End If
End Sub


Private Sub chkdpEvents_Change()
    If (chkdpEvents.Caption = "Double Promoted") And chkdpEvents.value = True Then                   'to check all checkboxes when the header checkbox is checked
        frmUpdateClass.checkall True, chkdpEvents.Caption
    End If
End Sub

Private Sub chkFailedAndDroppedEvents_Change()
    If (chkFailedAndDroppedEvents.Caption = "Dropped Out") And chkFailedAndDroppedEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        If FormIsLoaded("frmUpdateClass") Then
            'to check a corresponding checkbox in case of ecd update
            frmUpdateClass.checkall True, chkFailedAndDroppedEvents.Caption
        ElseIf FormIsLoaded("frmUpdateClassECD") Then
            'to check a corresponding checkbox in case of ecd update
            frmUpdateClassECD.checkall True, chkFailedAndDroppedEvents.Caption
        End If
    End If
End Sub


Private Sub chkPassedAndDroppedEvents_Change()
    If (chkPassedAndDroppedEvents.Caption = "Passed and Transferred") And chkPassedAndDroppedEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        If FormIsLoaded("frmUpdateClass") Then
            'to check a corresponding checkbox in case of ecd update
            frmUpdateClass.checkall True, chkPassedAndDroppedEvents.Caption
        ElseIf FormIsLoaded("frmUpdateClassECD") Then
            'to check a corresponding checkbox in case of ecd update
            frmUpdateClassECD.checkall True, chkPassedAndDroppedEvents.Caption
        End If
        
    End If
End Sub


Private Sub chkUKGEvents_Change()
    'disable the repeated button if any one of the student has been specified
    'into NUR,KG,UKG,LKG
    frmUpdateClassECD.disableAllRepeatedButtons
    If (chkUKGEvents.Caption = "UKG") And chkUKGEvents.value = True Then         'to check all checkboxes when the header checkbox is checked
        frmUpdateClassECD.checkall True, chkUKGEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub


Private Sub txtAttendanceArray_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'allow only numbers
    If (KeyAscii < 48 Or KeyAscii > 57) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtAttendanceArray_change()
    'check if the attendance is greater than 365
    If Not txtAttendanceArray.value = "" Then
        If Abs(txtAttendanceArray.value) > 365 Then
            txtAttendanceArray.BackColor = &HFF&
            txtAttendanceArray.ControlTipText = "Attendance cannot be greater than 365!"
        Else
            txtAttendanceArray.BackColor = &H80000005&
            txtAttendanceArray.ControlTipText = ""
        End If
    Else
        txtAttendanceArray.BackColor = &H80000005&
        txtAttendanceArray.ControlTipText = ""
    End If
End Sub
Attribute VB_Name = "updateMarksEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents txtSubjectMarks As MSForms.TextBox
Attribute txtSubjectMarks.VB_VarHelpID = -1

Private Sub txtSubjectMarks_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'Allow only Numbers
    If (KeyAscii < 48 Or KeyAscii > 57) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtSubjectMarks_Change()
    Dim subjectNo, fullMarks As Integer
    
    'SubjectNo is calculated based on the left position of the textbox so
    'if the left position changes then so must the following line of code
    subjectNo = Round((txtSubjectMarks.Left / 60) - 3.3, 0)
    
    'retrieve the full marks for that subject
    'set 100 as default if full marks is unavailable
    If Len(Worksheets("Subjects").Range(frmUpdateMarks.subjectColumn & (subjectNo + (startingRow - 1))).Offset(0, 1).value) > 0 Then
        fullMarks = CInt(Worksheets("Subjects").Range(frmUpdateMarks.subjectColumn & (subjectNo + (startingRow - 1))).Offset(0, 1).value)
    Else
        fullMarks = 100
    End If
    
    'Check if marks entered is greater than the full marks
    'display red background to signify that there is error
    If Not txtSubjectMarks.value = "" Then
        If Abs(txtSubjectMarks.value) > fullMarks Then
            txtSubjectMarks.BackColor = &HFF&
            txtSubjectMarks.ControlTipText = "Marks cannot be greater than the Full Marks!"
        Else
            txtSubjectMarks.BackColor = &H80000005&
            txtSubjectMarks.ControlTipText = ""
        End If
    Else
        txtSubjectMarks.BackColor = &H80000005&
        txtSubjectMarks.ControlTipText = ""
    End If
End Sub


Attribute VB_Name = "updateScholarshipEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents chkschEvents As MSForms.OptionButton
Attribute chkschEvents.VB_VarHelpID = -1
Public WithEvents txtschEvents As MSForms.TextBox
Attribute txtschEvents.VB_VarHelpID = -1

'to link checkboxes ie if the topmost checkbox is ticked then so must
'all of them till the bottom and user shouldnot be allowed to tick pass,fail,repeat
'for the same student

Private Sub chkschEvents_Change()
    'check all the option buttons only if option button with caption
    If Not chkschEvents.Caption = "" And chkschEvents.value = True Then       'to check all checkboxes when the header checkbox is checked
        frmUpdateSch.checkall True, chkschEvents.Caption                                                                           'to uncheck a corresponding checkbox when an adjacent one is checked
    End If
End Sub

Private Sub txtschEvents_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    'Allow only Numbers
    If (KeyAscii < 48 Or KeyAscii > 57) And Not KeyAscii = 32 Then
        KeyAscii = 0
    End If
End Sub

' InQuest injected base64 decoded content
' y+nu
' xj/z
' ^"wbq
' z{Lj
' x	eM

INQUEST-PP=macro
