Attribute VB_Name = "Module1"
Sub Merge_Click()    'merge PO
   v_row = ActiveCell.Row
   v_po_nbr = Cells(v_row, "C")
   v_po_ln = Cells(v_row, "D")
   v_part = Cells(v_row, "E")
   v_qty = Cells(v_row, "I")
   v_pr = Cells(v_row, "Y")
   
   If IsEmpty(v_po_nbr) = True Or v_po_nbr = "PO Number" Or IsEmpty(v_po_ln) = True Or v_po_ln = "0" Then 'PO number and line number checking
     Range("C" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     Range("D" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     Range("I" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     output = MsgBox("Active row does not have valid PO number and line number.", vbExclamation, "Warning")
     Range("C" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("D" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("I" & ActiveCell.Row).Interior.ColorIndex = 0
   Else
     Range("C" & v_row).Interior.Color = RGB(0, 255, 0)
     Range("D" & v_row).Interior.Color = RGB(0, 255, 0)
     Range("I" & v_row).Interior.Color = RGB(0, 255, 0)
     v_action = MsgBox("Merge PO: " & v_po_nbr & ",line:" & v_po_ln & "with another line?", vbYesNo)
     If v_action = vbYes Then
       v_merge_ln = InputBox("Input the row number to be meraged:")
       If v_merge_ln <> vbNullString Then
         v_po_nbr2 = Cells(v_merge_ln, "C")
         v_part2 = Cells(v_merge_ln, "E")
         v_pr2 = Cells(v_merge_ln, "Y")
         v_rcv_qty = Cells(v_merge_ln, "W")
         If v_po_nbr <> v_po_nbr2 Or v_part <> v_part2 Or v_pr <> v_pr2 Or v_rcv_qty > 0 Then
           Range("C" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
           Range("D" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
           Range("I" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
           
           If v_rcv_qty > 0 Then
             output = MsgBox("Goods have been delivered, you cannot merge with row" & v_merge_ln, vbExclamation, "Warning")
           Else
             output = MsgBox("Only same PO, same item, same PR can be merged!", vbExclamation, "Warning")
           End If
           Range("C" & v_merge_ln).Interior.ColorIndex = 0
           Range("D" & v_merge_ln).Interior.ColorIndex = 0
           Range("I" & v_merge_ln).Interior.ColorIndex = 0
         Else
           v_po_ln2 = Cells(v_merge_ln, "D")
           If v_po_ln = v_po_ln2 Or IsEmpty(v_po_ln) = True Or v_po_ln2 = "0" Then
             Range("C" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
             Range("D" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
             Range("I" & v_merge_ln).Interior.Color = RGB(255, 0, 0)
             output = MsgBox("Invalid PO line!", vbExclamation, "Warning")
             Range("C" & v_merge_ln).Interior.ColorIndex = 0
             Range("D" & v_merge_ln).Interior.ColorIndex = 0
             Range("I" & v_merge_ln).Interior.ColorIndex = 0
           Else
           v_qty2 = Cells(v_merge_ln, "I")
           Range("C" & v_row).Interior.Color = RGB(0, 255, 0)
           Range("D" & v_row).Interior.Color = RGB(0, 255, 0)
           Range("I" & v_row).Interior.Color = RGB(0, 255, 0)
           Range("C" & v_merge_ln).Interior.Color = RGB(0, 255, 0)
           Range("D" & v_merge_ln).Interior.Color = RGB(0, 255, 0)
           Range("I" & v_merge_ln).Interior.Color = RGB(0, 255, 0)
           v_confirm = MsgBox("Merge PO:" & v_po_nbr & ",line:" & v_po_ln & ",Qty:" & v_qty & vbCr & "with line:" & vmerge_ln & ";PO:" & v_po_nbr2 & ",line:" & v_po_ln2 & ",Qty:" & v_qty2 & "?", vbYesNo)
           If v_confirm = vbYes Then
             Cells(v_row, "I").Value = v_qty + v_qty2
             Cells(v_row, "U").Value = "MERGE"
             Cells(v_merge_ln, "I").Value = 0
             Cells(v_merge_ln, "U").Value = "DELETE"
             MsgBox ("Merge completed.")
           End If
           Range("C" & v_row).Interior.ColorIndex = 0
           Range("D" & v_row).Interior.ColorIndex = 0
           Range("I" & v_row).Interior.ColorIndex = 0
           Range("C" & v_merge_ln).Interior.ColorIndex = 0
           Range("D" & v_merge_ln).Interior.ColorIndex = 0
           Range("I" & v_merge_ln).Interior.ColorIndex = 0
           End If
       End If
       End If
       
     End If
       Range("C" & v_row).Interior.ColorIndex = 0
       Range("D" & v_row).Interior.ColorIndex = 0
       Range("I" & v_row).Interior.ColorIndex = 0
     End If
   
   
End Sub
Sub Split_Click(p_type)   'split PO

  Dim v_po_nbr As String
  Dim v_po_ln As Integer
  Dim v_qty As Long
  Dim v_rcv_qty As Long
  Dim v_split_qty As String
  Dim v_error As String

On Error Resume Next
If Err.Number = 13 Then  'ignore type mismatch error
Err.Clear
End If

   v_error = "N"
   v_po_nbr = Cells(ActiveCell.Row, "C")
   v_po_ln = Cells(ActiveCell.Row, "D")
   v_qty = Cells(ActiveCell.Row, "I")
   v_rcv_qty = Cells(ActiveCell.Row, "W")
   
   If IsEmpty(v_po_nbr) = True Or v_po_nbr = "PO Number" Or IsEmpty(v_po_ln) = True Or v_po_ln = "0" Then 'PO number and line number checking
     Range("C" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     Range("D" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     Range("I" & ActiveCell.Row).Interior.Color = RGB(255, 0, 0)
     output = MsgBox("Active row does not have valid PO number and line number.", vbExclamation, "Warning")
     Range("C" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("D" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("I" & ActiveCell.Row).Interior.ColorIndex = 0

   Else
     'Copy and insert row
     Rows(ActiveCell.Row).Select
     Range("C" & ActiveCell.Row).Interior.Color = RGB(0, 255, 0)
     Range("D" & ActiveCell.Row).Interior.Color = RGB(0, 255, 0)
     Range("I" & ActiveCell.Row).Interior.Color = RGB(0, 255, 0)
     v_action = MsgBox("Split PO:" & v_po_nbr & ",line:" & v_po_ln & "?", vbYesNo)
     If v_action = vbYes Then
      If p_type = "single" Then  'split to one row only
       v_split_qty = InputBox("Original quantity:" & v_qty & vbCr & "Received quantity:" & v_rcv_qty & vbCr & "Split quantity:", , 0)
       If v_split_qty <> vbnullnumber Then
         If v_split_qty = 0 Then
           v_error = "Y"
           output = MsgBox("Split quantity cannot be zero!", vbExclamation, "Warning")
         End If
         If v_split_qty >= v_qty Then
           v_error = "Y"
           output = MsgBox("Split quantity must less than original quantity!", vbExclamation, "Warning")
         End If
         If v_qty - v_split_qty < v_rcv_qty Then
           v_error = "Y"
           output = MsgBox("New order quantity cannot less than received quantity!", vbExclamation, "Warning")
         End If
         
         If v_error = "N" Then
           Cells(ActiveCell.Row, "U").Value = "SPLIT"
           Selection.Copy
           Selection.Insert shift:=xlDown
           Cells(ActiveCell.Row + 1, "U").Value = "ADD"
           Cells(ActiveCell.Row + 1, "D").Value = 0
           Cells(ActiveCell.Row + 1, "V").Value = v_po_ln
           Cells(ActiveCell.Row + 1, "I").Value = v_split_qty
           Cells(ActiveCell.Row, "I").Value = Cells(ActiveCell.Row, "I").Value - v_split_qty
         End If
       End If
      ElseIf p_type = "multi" Then   'split to multi rows
         v_org_row = ActiveCell.Row
         v_out_qty = v_qty - v_rcv_qty
         v_split_row = InputBox("How many rows will be for outstanding quantity:" & v_out_qty & "?")
         If (v_split_row = "" Or v_split_row < 2) Then
           v_error = "Y"
           output = MsgBox("Please input at least 2 rows.", vbExclamation, "Warning")
         End If
         
         If v_split_row <> vbnullnumber Then
           'v_new_qty = Int(v_out_qty / v_split_row)
           v_new_qty = 0
           'If v_new_qty = "0" Then
           '  v_error = "Y"
           '  output = MsgBox("Outstanding quantity:" & v_out_qty & ", it cannot split to " & v_split_row & " rows.", vbExclamation, "Warning")
           'End If
           If v_error = "N" Then
           MsgBox (v_out_qty & " will be divided by " & v_split_row & " rows.")
           Cells(v_org_row, "U").Value = "SPLIT"
           For i = 1 To v_split_row - 1
             Selection.Copy
             Selection.Insert shift:=xlDown
             Cells(ActiveCell.Row + 1, "U").Value = "ADD"
             Cells(ActiveCell.Row + 1, "D").Value = 0
             Cells(ActiveCell.Row + 1, "V").Value = v_po_ln
             Cells(ActiveCell.Row + 1, "I").Value = v_new_qty
             Cells(v_org_row, "i").Value = Cells(v_org_row, "I").Value - v_new_qty
           Next i
           End If
         End If
      End If
     End If
     Application.CutCopyMode = False
     Range("C" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("D" & ActiveCell.Row).Interior.ColorIndex = 0
     Range("I" & ActiveCell.Row).Interior.ColorIndex = 0
     
    If v_error = "N" Then
      MsgBox ("Split order completed.")
    End If
   End If


   
End Sub

Sub split_single()
  Split_Click ("single")
End Sub

Sub split_multi()
  Split_Click ("multi")
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

If (Application.LanguageSettings.LanguageID(msoLanguageIDUI)) = 2052 Then  'Locale ID =Simplified Chinese
   Worksheets("POdetail").Buttons("bt_merge").Caption = "|fffd||3f2||fffd|"
  ' Worksheets("POdetail").Buttons("bt_split").Caption = "|fffd||fffd|-|fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd|"
   Worksheets("POdetail").Buttons("bt_split_multi").Caption = "|fffd||fffd|"
Else
   Worksheets("POdetail").Buttons("bt_merge").Caption = "Merge Order"
  ' Worksheets("POdetail").Buttons("bt_split").Caption = "Split Order" & vbCr & "[single row]"
   Worksheets("POdetail").Buttons("bt_split_multi").Caption = "Split Order"
End If

End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
