Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)
    Dim r As Integer
    Dim c As Integer
    Dim rg As Range
    Set rg = Range(Target.TableRange1.Address)
    r = rg.Rows.Count
    c = rg.Columns.Count
    
    Dim rgTotals As Range
    Set rgTotals = rg.Offset(r - 1, 1).Resize(1, c - 2)
    
    Dim rgLabels As Range
    Set rgLabels = rg.Offset(1, 1).Resize(1, c - 2)

    Dim r1 As Integer
    Dim r2 As Integer
    Dim c1 As Integer
    Dim c2 As Integer
    Dim sheetName As String
    sheetName = ActiveSheet.Name
    
    r1 = rgTotals.Row
    r2 = rgLabels.Row
    c1 = rgTotals.Column
    c2 = c1 + rgTotals.Columns.Count - 1

    CorrectChartName_IR

    ActiveSheet.ChartObjects("IR Risk").Activate
    ActiveChart.SeriesCollection(1).XValues = "='" & sheetName & "'!R" & r2 & "C" & c1 & ":R" & r2 & "C" & c2
    ActiveChart.SeriesCollection(1).Values = "='" & sheetName & "'!R" & r1 & "C" & c1 & ":R" & r1 & "C" & c2

    Range("A1").Select
End Sub

Private Sub CorrectChartName_IR()
    'assumes there is one and only one chart on the sheet.

    For Each co In ActiveSheet.ChartObjects
        co.Name = "IR Risk"
    Next
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TemplateSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=============================================================================
' Copyright (C) 1996-2008 NumeriX LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'=============================================================================

Option Explicit

'------------------------------------------------------------------------------
' fields
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the pricing model, or <c>Nothing</c> if there is no
    '''     pricing-model range
    ''' </summary>
    Private m_rngModel As Range
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the numerical method, or <c>Nothing</c> if there is
    '''     no numerical-method range
    ''' </summary>
    Private m_rngMethod As Range
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' overridden/implemented methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet activates.
    ''' </summary>
    Private Sub Worksheet_Activate()
    
        Dim strAddInFileName As String: strAddInFileName = ""
        Dim strSubroutineName As String: strSubroutineName = ""
        Dim objButton As Object: Set objButton = Nothing
        Dim wks As Worksheet: Set wks = Nothing
        
        On Error Resume Next
        strAddInFileName = GetNumerixToolbarAddInFileName()
        For Each wks In ThisWorkbook.Sheets
        
            For Each objButton In wks.Buttons
            
                strSubroutineName = RemoveWorkbookReferenceFromAction(objButton.OnAction)
                If (VBA.Len(strAddInFileName) = 0&) Then
                
                    objButton.OnAction = strSubroutineName
                
                Else
                
                    objButton.OnAction = ("'" & _
                                          strAddInFileName & _
                                          "'!" & _
                                          strSubroutineName)
                
                End If
            
            Next objButton
        
        Next wks
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet changes.
    ''' </summary>
    ''' <param name="rngTarget">
    '''     the range of this worksheet that has changed
    ''' </param>
    Private Sub Worksheet_Change(ByVal rngTarget As Range)
    
        '
        ' get the model and method ranges
        '
        Call GetRanges
        If ((m_rngModel Is Nothing) Or (m_rngMethod Is Nothing)) Then
        
            Exit Sub
        
        End If
        
        '
        ' set the method validation, if necessary
        '
        If (StrComp(rngTarget.Address, m_rngModel.Address, vbTextCompare) = 0) Then
        
            With m_rngMethod.Validation
            
                Call .Delete
                Call .Add(Type:=xlValidateList, _
                          AlertStyle:=xlValidAlertStop, _
                          Operator:=xlBetween, _
                          Formula1:=GetListOfMethods(m_rngModel.Value))
                .InCellDropdown = True
                .ErrorTitle = "Method Selection Error"
                .ErrorMessage = "The model does not support this method."
                .ShowError = False
                
            End With
            
        End If
    
    End Sub
    '--------------------------------------------------------------------------
    
'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the list of methods that correspond to a specified model.
    ''' </summary>
    ''' <param name="strModelID">
    '''     the ID of the model to use
    ''' </param>
    ''' <returns>
    ''' </returns>
    Private Function GetListOfMethods(ByVal strModelID As String) As String
    
        Dim strModelType As String: strModelType = ""
        Dim strOutput As String: strOutput = ""
        Dim i As Integer: i = 0
        Dim j As Integer: j = 0
        Dim intModelsCount As Integer: intModelsCount = 0
        Dim intMethodsCount As Integer: intMethodsCount = 0
        Dim vntHeadings As Variant
        Dim vntValues As Variant
        Dim vntModelMethods As Variant
        
        '
        ' initialize the error handler
        '
        On Error GoTo errorHandler
        
        '
        ' get views for the headings and values
        '
        vntHeadings = Application.Run("nxLibView", strModelID, "CALL HEADERS")
        vntValues = Application.Run("nxLibView", strModelID, "CALL VALUES")
        
        '
        ' search for the model type
        '
        For i = 1 To UBound(vntHeadings)
        
            If (StrComp(vntHeadings(i, 1), "MODEL", vbTextCompare) = 0) Then
            
                strModelType = vntValues(i, 1)
                strModelType = RemoveSpaces(strModelType)
                Exit For
                
            End If
            
        Next i
        
        '
        ' get the supported methods
        '
        vntModelMethods = Application.Run("nxLibView", "GLOBAL.ModelMethods")
        intModelsCount = UBound(vntModelMethods)
        intMethodsCount = UBound(vntModelMethods, 2)
        For i = 2 To intModelsCount
        
            If (StrComp(CStr(vntModelMethods(i, 1)), strModelType, vbTextCompare) = 0) Then
            
                For j = 2 To intMethodsCount
                
                    If (vntModelMethods(i, j) = 1) Then
                    
                        strOutput = (strOutput & vntModelMethods(1, j) & ",")
                        
                    End If
                    
                Next j
                
                GetListOfMethods = VBA.Left$(strOutput, (Len(strOutput) - 1))
                Exit Function
                
            End If
            
        Next i
        
errorHandler:

        GetListOfMethods = "BackwardPDE,BackwardLattice,BackwardTree,BackwardAnalytic,BackwardMC,ForwardMC,ForwardAnalytic"
        Exit Function
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the name of the Numerix Toolbar add-in file.
    ''' </summary>
    ''' <returns>
    '''     the name of the Numerix Toolbar add-in file, or an empty string
    '''     if this function failed to get the name of the Numerix Toolbar
    '''     add-in file
    ''' </returns>
    Private Function GetNumerixToolbarAddInFileName() As String
    
        Dim strFileName As String: strFileName = ""
        Dim objAddIn As AddIn: Set objAddIn = Nothing
        
        For Each objAddIn In Application.AddIns
        
            If (objAddIn.Installed And _
                (VBA.InStr(1&, objAddIn.Name, "Numerix", vbTextCompare) > 0&) And _
                (VBA.InStr(1&, objAddIn.Name, "Toolbar", vbTextCompare) > 0&) And _
                (VBA.InStr(1&, objAddIn.Name, ".xla", vbTextCompare) > 0&)) Then
                
                strFileName = objAddIn.FullName
                
                Exit For
            
            End If
        
        Next objAddIn
        
        GetNumerixToolbarAddInFileName = strFileName
        Exit Function
    
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the pricing-model and numerical-method ranges.
    ''' </summary>
    Private Sub GetRanges()
    
        On Error GoTo errorHandler
        Set m_rngModel = Range("Nx_D_" & Me.Name & "_ModelID")
        Set m_rngMethod = Range("Nx_D_" & Me.Name & "_NumMethod")
        
        Exit Sub
        
errorHandler:

        Set m_rngModel = Nothing
        Set m_rngMethod = Nothing
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes all spaces from a specified string.
    ''' </summary>
    ''' <param name="strInput">
    '''     the string from which to remove all spaces
    ''' </param>
    ''' <returns>
    '''     a copy of the specified string, with spaces removed
    ''' </returns>
    Private Function RemoveSpaces(ByVal strInput As String) As String
    
        Dim strResult As String: strResult = ""
        Dim ch As String * 1
        Dim i As Integer: i = 0
        
        For i = 1 To Len(strInput)
        
            ch = VBA.Mid$(strInput, i, 1)
            If (StrComp(ch, " ", vbBinaryCompare) <> 0) Then
            
                strResult = (strResult & ch)
                
            End If
            
        Next
        
        RemoveSpaces = strResult
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes a workbook reference from a specified action.  For
    '''     example, if the specified action is
    '''     <c>MyAddIn.xla!MySubroutine</c>, this function will return
    '''     <c>MySubroutine</c>.
    ''' </summary>
    ''' <param name="strAction">
    '''     the action whose workbook reference to remove
    ''' </param>
    ''' <returns>
    '''     the specified action without a workbook reference
    ''' </returns>
    Private Function RemoveWorkbookReferenceFromAction(ByVal strAction As String) As String
    
        Dim strResult As String: strResult = ""
        Dim lngExclamationPointIndex As Long: lngExclamationPointIndex = 0&
        
        lngExclamationPointIndex = VBA.InStr(1&, strAction, "!", vbBinaryCompare)
        If (lngExclamationPointIndex = 0&) Then
        
            strResult = strAction
        
        Else
        
            strResult = VBA.Mid$(strAction, (lngExclamationPointIndex + 1&))
        
        End If
        
        RemoveWorkbookReferenceFromAction = strResult
        Exit Function
    
    End Function
    '--------------------------------------------------------------------------

Attribute VB_Name = "TemplateSheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'=============================================================================
' Copyright (C) 1996-2008 NumeriX LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'=============================================================================

Option Explicit

'------------------------------------------------------------------------------
' fields
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the pricing model, or <c>Nothing</c> if there is no
    '''     pricing-model range
    ''' </summary>
    Private m_rngModel As Range
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     the range of the numerical method, or <c>Nothing</c> if there is
    '''     no numerical-method range
    ''' </summary>
    Private m_rngMethod As Range
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' overridden/implemented methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet activates.
    ''' </summary>
    Private Sub Worksheet_Activate()
    
        Dim strAddInFileName As String: strAddInFileName = ""
        Dim strSubroutineName As String: strSubroutineName = ""
        Dim objButton As Object: Set objButton = Nothing
        Dim wks As Worksheet: Set wks = Nothing
        
        On Error Resume Next
        strAddInFileName = GetNumerixToolbarAddInFileName()
        For Each wks In ThisWorkbook.Sheets
        
            For Each objButton In wks.Buttons
            
                strSubroutineName = RemoveWorkbookReferenceFromAction(objButton.OnAction)
                If (VBA.Len(strAddInFileName) = 0&) Then
                
                    objButton.OnAction = strSubroutineName
                
                Else
                
                    objButton.OnAction = ("'" & _
                                          strAddInFileName & _
                                          "'!" & _
                                          strSubroutineName)
                
                End If
            
            Next objButton
        
        Next wks
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this worksheet changes.
    ''' </summary>
    ''' <param name="rngTarget">
    '''     the range of this worksheet that has changed
    ''' </param>
    Private Sub Worksheet_Change(ByVal rngTarget As Range)
    
        '
        ' get the model and method ranges
        '
        Call GetRanges
        If ((m_rngModel Is Nothing) Or (m_rngMethod Is Nothing)) Then
        
            Exit Sub
        
        End If
        
        '
        ' set the method validation, if necessary
        '
        If (StrComp(rngTarget.Address, m_rngModel.Address, vbTextCompare) = 0) Then
        
            With m_rngMethod.Validation
            
                Call .Delete
                Call .Add(Type:=xlValidateList, _
                          AlertStyle:=xlValidAlertStop, _
                          Operator:=xlBetween, _
                          Formula1:=GetListOfMethods(m_rngModel.Value))
                .InCellDropdown = True
                .ErrorTitle = "Method Selection Error"
                .ErrorMessage = "The model does not support this method."
                .ShowError = False
                
            End With
            
        End If
    
    End Sub
    '--------------------------------------------------------------------------
    
'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the list of methods that correspond to a specified model.
    ''' </summary>
    ''' <param name="strModelID">
    '''     the ID of the model to use
    ''' </param>
    ''' <returns>
    ''' </returns>
    Private Function GetListOfMethods(ByVal strModelID As String) As String
    
        Dim strModelType As String: strModelType = ""
        Dim strOutput As String: strOutput = ""
        Dim i As Integer: i = 0
        Dim j As Integer: j = 0
        Dim intModelsCount As Integer: intModelsCount = 0
        Dim intMethodsCount As Integer: intMethodsCount = 0
        Dim vntHeadings As Variant
        Dim vntValues As Variant
        Dim vntModelMethods As Variant
        
        '
        ' initialize the error handler
        '
        On Error GoTo errorHandler
        
        '
        ' get views for the headings and values
        '
        vntHeadings = Application.Run("nxLibView", strModelID, "CALL HEADERS")
        vntValues = Application.Run("nxLibView", strModelID, "CALL VALUES")
        
        '
        ' search for the model type
        '
        For i = 1 To UBound(vntHeadings)
        
            If (StrComp(vntHeadings(i, 1), "MODEL", vbTextCompare) = 0) Then
            
                strModelType = vntValues(i, 1)
                strModelType = RemoveSpaces(strModelType)
                Exit For
                
            End If
            
        Next i
        
        '
        ' get the supported methods
        '
        vntModelMethods = Application.Run("nxLibView", "GLOBAL.ModelMethods")
        intModelsCount = UBound(vntModelMethods)
        intMethodsCount = UBound(vntModelMethods, 2)
        For i = 2 To intModelsCount
        
            If (StrComp(CStr(vntModelMethods(i, 1)), strModelType, vbTextCompare) = 0) Then
            
                For j = 2 To intMethodsCount
                
                    If (vntModelMethods(i, j) = 1) Then
                    
                        strOutput = (strOutput & vntModelMethods(1, j) & ",")
                        
                    End If
                    
                Next j
                
                GetListOfMethods = VBA.Left$(strOutput, (Len(strOutput) - 1))
                Exit Function
                
            End If
            
        Next i
        
errorHandler:

        GetListOfMethods = "BackwardPDE,BackwardLattice,BackwardTree,BackwardAnalytic,BackwardMC,ForwardMC,ForwardAnalytic"
        Exit Function
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the name of the Numerix Toolbar add-in file.
    ''' </summary>
    ''' <returns>
    '''     the name of the Numerix Toolbar add-in file, or an empty string
    '''     if this function failed to get the name of the Numerix Toolbar
    '''     add-in file
    ''' </returns>
    Private Function GetNumerixToolbarAddInFileName() As String
    
        Dim strFileName As String: strFileName = ""
        Dim objAddIn As AddIn: Set objAddIn = Nothing
        
        For Each objAddIn In Application.AddIns
        
            If (objAddIn.Installed And _
                (VBA.InStr(1&, objAddIn.Name, "Numerix", vbTextCompare) > 0&) And _
                (VBA.InStr(1&, objAddIn.Name, "Toolbar", vbTextCompare) > 0&) And _
                (VBA.InStr(1&, objAddIn.Name, ".xla", vbTextCompare) > 0&)) Then
                
                strFileName = objAddIn.FullName
                
                Exit For
            
            End If
        
        Next objAddIn
        
        GetNumerixToolbarAddInFileName = strFileName
        Exit Function
    
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the pricing-model and numerical-method ranges.
    ''' </summary>
    Private Sub GetRanges()
    
        On Error GoTo errorHandler
        Set m_rngModel = Range("Nx_D_" & Me.Name & "_ModelID")
        Set m_rngMethod = Range("Nx_D_" & Me.Name & "_NumMethod")
        
        Exit Sub
        
errorHandler:

        Set m_rngModel = Nothing
        Set m_rngMethod = Nothing
        
    End Sub
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes all spaces from a specified string.
    ''' </summary>
    ''' <param name="strInput">
    '''     the string from which to remove all spaces
    ''' </param>
    ''' <returns>
    '''     a copy of the specified string, with spaces removed
    ''' </returns>
    Private Function RemoveSpaces(ByVal strInput As String) As String
    
        Dim strResult As String: strResult = ""
        Dim ch As String * 1
        Dim i As Integer: i = 0
        
        For i = 1 To Len(strInput)
        
            ch = VBA.Mid$(strInput, i, 1)
            If (StrComp(ch, " ", vbBinaryCompare) <> 0) Then
            
                strResult = (strResult & ch)
                
            End If
            
        Next
        
        RemoveSpaces = strResult
        
    End Function
    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Removes a workbook reference from a specified action.  For
    '''     example, if the specified action is
    '''     <c>MyAddIn.xla!MySubroutine</c>, this function will return
    '''     <c>MySubroutine</c>.
    ''' </summary>
    ''' <param name="strAction">
    '''     the action whose workbook reference to remove
    ''' </param>
    ''' <returns>
    '''     the specified action without a workbook reference
    ''' </returns>
    Private Function RemoveWorkbookReferenceFromAction(ByVal strAction As String) As String
    
        Dim strResult As String: strResult = ""
        Dim lngExclamationPointIndex As Long: lngExclamationPointIndex = 0&
        
        lngExclamationPointIndex = VBA.InStr(1&, strAction, "!", vbBinaryCompare)
        If (lngExclamationPointIndex = 0&) Then
        
            strResult = strAction
        
        Else
        
            strResult = VBA.Mid$(strAction, (lngExclamationPointIndex + 1&))
        
        End If
        
        RemoveWorkbookReferenceFromAction = strResult
        Exit Function
    
    End Function
    '--------------------------------------------------------------------------

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'==============================================================================
' Copyright (C) 1996-2010 Numerix LLC. All rights reserved.
'
' This software comprises valuable trade secrets and may be used, copied,
' transmitted, stored, and distributed only in accordance with the terms
' of a written license or trial agreement and with the inclusion of this
' copyright notice.
'==============================================================================

'------------------------------------------------------------------------------
'
' ThisWorkbook Module
'
' Author  : Christopher McGeorge, Numerix LLC
' Version : 1.0.0.0, 2010/06/29
'
'------------------------------------------------------------------------------

Option Explicit

'------------------------------------------------------------------------------
' event handlers
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Called when this workbook opens.
    ''' </summary>
    Private Sub Workbook_Open()
    
        Dim lngExclamationPointIndex As Long: lngExclamationPointIndex = 0&
        Dim strAddInFileName As String: strAddInFileName = GetNumerixToolbarAddInFileName()
        Dim strOnAction As String: strOnAction = ""
        Dim wkb As Workbook: Set wkb = Application.ThisWorkbook
        Dim wks As Worksheet: Set wks = Nothing
        Dim objButton As Object: Set objButton = Nothing
        
        '
        ' change the OnAction properties of the button in this workbook to
        '     reference the currently installed Numerix Toolbar add-in
        '     (for TTPro 8042 ("Blotter Buttons Reference Wrong Add-In"))
        '
        On Error Resume Next
        If (VBA.Len(strAddInFileName) > 0&) Then
        
            For Each wks In wkb.Sheets
            
                For Each objButton In wks.Buttons
                
                    lngExclamationPointIndex = VBA.InStr(1&, objButton.OnAction, "!", vbBinaryCompare)
                    If (lngExclamationPointIndex > 0&) Then
                    
                        strOnAction = ("'" & _
                                       strAddInFileName & _
                                       "'" & _
                                       VBA.Mid$(objButton.OnAction, lngExclamationPointIndex))
                        objButton.OnAction = strOnAction

                    End If
                
                Next objButton
            
            Next wks
            
        End If
        On Error GoTo 0
    
    End Sub
    '--------------------------------------------------------------------------

'------------------------------------------------------------------------------
' private methods
'

    '--------------------------------------------------------------------------
    ''' <summary>
    '''     Gets the name of the installed Numerix Toolbar add-in file.
    ''' </summary>
    ''' <returns>
    '''     the name of the installed Numerix Toolbar add-in file, or an empty
    '''     string if this function failed to get the name of the installed
    '''     Numerix Toolbar add-in file
    ''' </returns>
    Private Function GetNumerixToolbarAddInFileName() As String
    
        Dim strFileName As String: strFileName = ""
        Dim objAddIn As AddIn: Set objAddIn = Nothing

        On Error GoTo errorHandler
        For Each objAddIn In Application.AddIns
        
            If (objAddIn.Installed) Then
            
                If ((VBA.InStr(1&, objAddIn.Name, "Numerix", vbTextCompare) > 0&) And _
                    (VBA.InStr(1&, objAddIn.Name, "Toolbar", vbTextCompare) > 0&) And _
                    (VBA.InStr(1&, objAddIn.Name, ".xla", vbTextCompare) > 0&)) Then
                    
                    strFileName = objAddIn.FullName
                    
                    Exit For
                    
                End If
            
            End If
        
        Next objAddIn
        
        GetNumerixToolbarAddInFileName = strFileName
        Exit Function
        
errorHandler:

        GetNumerixToolbarAddInFileName = ""
        Exit Function
    
    End Function
    '--------------------------------------------------------------------------



' InQuest injected base64 decoded content
' ]"qb

INQUEST-PP=macro
