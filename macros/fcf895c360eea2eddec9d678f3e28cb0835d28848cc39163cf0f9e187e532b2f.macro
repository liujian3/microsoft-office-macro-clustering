Attribute VB_Name = "Batch_menu"
Attribute VB_Base = "0{8373E79F-5730-4660-BD71-EBF2728EEF5B}{2DF3F31B-A4FA-4C2C-8557-9442D8B82436}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Dim key_number As Integer
Dim key_code As Integer
Dim i As Integer

Private Sub UserForm_Initialize()
    Data_Sheet_Row.Text = ActiveWorkbook.Sheets("data sheet").Range("AL9").End(xlDown).Row
End Sub

Private Sub GO_Click()
    If Not Batch_menu.Data_Sheet_Row.Value < 12 Then
        i = 2
        key_code = Sheets("KEY CODES").Range("A" & i).Value
        
        Do Until Len(Sheets("KEY CODES").Range("A" & i).Value) < 1
            key_code = Sheets("KEY CODES").Range("A" & i).Value
            
            key_number = 12                                         'begin key number on data sheet column
            Do Until key_number > Batch_menu.Data_Sheet_Row.Value   'end key number on data sheet column
                If Sheets("data sheet").Range("H" & key_number).Value = key_code Or Sheets("data sheet").Range("I" & key_number).Value = key_code Then
                    If Len(Sheets("KEY CODES").Range("G" & i).Value) > 0 Then
                        If Not Sheets("KEY CODES").Range("G" & key_code + 1).Value = Sheets("data sheet").Range("BA" & key_number).Value Then
                            Sheets("KEY CODES").Range("H" & i).Value = Sheets("data sheet").Range("BA" & key_number).Value
                        End If
                    Else
                        Sheets("KEY CODES").Range("G" & i).Value = Sheets("data sheet").Range("BA" & key_number).Value
                    End If
                End If
                key_number = key_number + 1
            Loop
            i = i + 1
        Loop
        Batch_menu.Hide
    Else
        MsgBox "Insert value above 12.", , "Netherlocks Safety Systems"
    End If
End Sub
Attribute VB_Name = "Blad1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Blad3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "KeyCodes"
Option Explicit

'Declaraties
Dim BESTAND As String
Dim PROGRAMMANUMMER As String
Dim ORDERNUMMER As String
Dim LETTERKLEM  As Integer
Dim CIJFERKLEM As Integer
Dim GRAFEERKLEM As Integer
Dim WAARDE As String
Dim Rijnummer As Integer
Dim Codelijst(32000, 21) As String
Dim INDEX1 As Integer
Dim INDEX2 As Integer
Dim SleutelsInklemmen As Integer
Dim LetterHoogte As String
Dim Xpositie As String

Sub MakeKeyCodeFile()

'Ga naar sheet
Dim oWS As Excel.Worksheet
Set oWS = ActiveWorkbook.Sheets("KEY CODES")
oWS.Activate

'Pad aangeven
BESTAND = "M:\"

'Programmanummer in geheugen zetten
'    Sheets("KEY CODES").TextBox2.Value = Empty
'    Range("D2").Select
'    Application.CutCopyMode = False
'    Selection.Copy
'    Sheets("KEY CODES").TextBox2.Paste
    PROGRAMMANUMMER = Range("D2").Value
    
    If Len(PROGRAMMANUMMER) < 3 Then
        MsgBox "No FileName can be assigned, D2 has incorrect Value??"
        Exit Sub
    End If
    
    'Sheets("KEY CODES").TextBox2.Text
    PROGRAMMANUMMER = VBA.Mid$(PROGRAMMANUMMER, 3, Len(PROGRAMMANUMMER) - 2)
    BESTAND = BESTAND & "O00" & PROGRAMMANUMMER & ".txt"
    
'Controle bestaand bestand
    On Error GoTo Schrijven
    Open BESTAND For Input As #1
    MsgBox "Bestandsnaam bestaat al."
    Close #1
    GoTo NietSchrijven
Schrijven:
    
'Ordernummer in geheugen zetten
'    Sheets("KEY CODES").TextBox3.Value = Empty
'    Range("E2").Select
'    Application.CutCopyMode = False
'    Selection.Copy
'    Sheets("KEY CODES").TextBox3.Paste
    ORDERNUMMER = Range("E2").Value 'Sheets("KEY CODES").TextBox3.Text
  ' ORDERNUMMER = VBA.Mid$(ORDERNUMMER, 1, Len(ORDERNUMMER) - 2)
    
'keycodes uit excel halen en indexiren
    Rijnummer = 1
    Do
'    Sheets("KEY CODES").TextBox1.Value = Empty
    Rijnummer = Rijnummer + 1
    Range("B" & Rijnummer).Select
    'Application.CutCopyMode = False
    'Selection.Copy
'    Sheets("KEY CODES").TextBox1.Paste
    WAARDE = Range("B" & Rijnummer).Value 'Sheets("KEY CODES").TextBox1.Text
 '  WAARDE = VBA.Mid$(WAARDE, 1, Len(WAARDE) - 2)
    
'volledige code
    Codelijst(Rijnummer, 21) = WAARDE
    If WAARDE = "MASTER" Then WAARDE = "ABCDEFGHJK0123456789"
'letters
    If VBA.Mid$(WAARDE, 1, 1) = "A" Or VBA.Mid$(WAARDE, 2, 1) = "A" Or VBA.Mid$(WAARDE, 3, 1) = "A" Or VBA.Mid$(WAARDE, 4, 1) = "A" Or VBA.Mid$(WAARDE, 5, 1) = "A" Or VBA.Mid$(WAARDE, 6, 1) = "A" Or VBA.Mid$(WAARDE, 7, 1) = "A" Or VBA.Mid$(WAARDE, 8, 1) = "A" Or VBA.Mid$(WAARDE, 9, 1) = "A" Or VBA.Mid$(WAARDE, 10, 1) = "A" Then Codelijst(Rijnummer, 1) = 1 Else Codelijst(Rijnummer, 1) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "B" Or VBA.Mid$(WAARDE, 2, 1) = "B" Or VBA.Mid$(WAARDE, 3, 1) = "B" Or VBA.Mid$(WAARDE, 4, 1) = "B" Or VBA.Mid$(WAARDE, 5, 1) = "B" Or VBA.Mid$(WAARDE, 6, 1) = "B" Or VBA.Mid$(WAARDE, 7, 1) = "B" Or VBA.Mid$(WAARDE, 8, 1) = "B" Or VBA.Mid$(WAARDE, 9, 1) = "B" Or VBA.Mid$(WAARDE, 10, 1) = "B" Then Codelijst(Rijnummer, 2) = 1 Else Codelijst(Rijnummer, 2) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "C" Or VBA.Mid$(WAARDE, 2, 1) = "C" Or VBA.Mid$(WAARDE, 3, 1) = "C" Or VBA.Mid$(WAARDE, 4, 1) = "C" Or VBA.Mid$(WAARDE, 5, 1) = "C" Or VBA.Mid$(WAARDE, 6, 1) = "C" Or VBA.Mid$(WAARDE, 7, 1) = "C" Or VBA.Mid$(WAARDE, 8, 1) = "C" Or VBA.Mid$(WAARDE, 9, 1) = "C" Or VBA.Mid$(WAARDE, 10, 1) = "C" Then Codelijst(Rijnummer, 3) = 1 Else Codelijst(Rijnummer, 3) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "D" Or VBA.Mid$(WAARDE, 2, 1) = "D" Or VBA.Mid$(WAARDE, 3, 1) = "D" Or VBA.Mid$(WAARDE, 4, 1) = "D" Or VBA.Mid$(WAARDE, 5, 1) = "D" Or VBA.Mid$(WAARDE, 6, 1) = "D" Or VBA.Mid$(WAARDE, 7, 1) = "D" Or VBA.Mid$(WAARDE, 8, 1) = "D" Or VBA.Mid$(WAARDE, 9, 1) = "D" Or VBA.Mid$(WAARDE, 10, 1) = "D" Then Codelijst(Rijnummer, 4) = 1 Else Codelijst(Rijnummer, 4) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "E" Or VBA.Mid$(WAARDE, 2, 1) = "E" Or VBA.Mid$(WAARDE, 3, 1) = "E" Or VBA.Mid$(WAARDE, 4, 1) = "E" Or VBA.Mid$(WAARDE, 5, 1) = "E" Or VBA.Mid$(WAARDE, 6, 1) = "E" Or VBA.Mid$(WAARDE, 7, 1) = "E" Or VBA.Mid$(WAARDE, 8, 1) = "E" Or VBA.Mid$(WAARDE, 9, 1) = "E" Or VBA.Mid$(WAARDE, 10, 1) = "E" Then Codelijst(Rijnummer, 5) = 1 Else Codelijst(Rijnummer, 5) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "F" Or VBA.Mid$(WAARDE, 2, 1) = "F" Or VBA.Mid$(WAARDE, 3, 1) = "F" Or VBA.Mid$(WAARDE, 4, 1) = "F" Or VBA.Mid$(WAARDE, 5, 1) = "F" Or VBA.Mid$(WAARDE, 6, 1) = "F" Or VBA.Mid$(WAARDE, 7, 1) = "F" Or VBA.Mid$(WAARDE, 8, 1) = "F" Or VBA.Mid$(WAARDE, 9, 1) = "F" Or VBA.Mid$(WAARDE, 10, 1) = "F" Then Codelijst(Rijnummer, 6) = 1 Else Codelijst(Rijnummer, 6) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "G" Or VBA.Mid$(WAARDE, 2, 1) = "G" Or VBA.Mid$(WAARDE, 3, 1) = "G" Or VBA.Mid$(WAARDE, 4, 1) = "G" Or VBA.Mid$(WAARDE, 5, 1) = "G" Or VBA.Mid$(WAARDE, 6, 1) = "G" Or VBA.Mid$(WAARDE, 7, 1) = "G" Or VBA.Mid$(WAARDE, 8, 1) = "G" Or VBA.Mid$(WAARDE, 9, 1) = "G" Or VBA.Mid$(WAARDE, 10, 1) = "G" Then Codelijst(Rijnummer, 7) = 1 Else Codelijst(Rijnummer, 7) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "H" Or VBA.Mid$(WAARDE, 2, 1) = "H" Or VBA.Mid$(WAARDE, 3, 1) = "H" Or VBA.Mid$(WAARDE, 4, 1) = "H" Or VBA.Mid$(WAARDE, 5, 1) = "H" Or VBA.Mid$(WAARDE, 6, 1) = "H" Or VBA.Mid$(WAARDE, 7, 1) = "H" Or VBA.Mid$(WAARDE, 8, 1) = "H" Or VBA.Mid$(WAARDE, 9, 1) = "H" Or VBA.Mid$(WAARDE, 10, 1) = "H" Then Codelijst(Rijnummer, 8) = 1 Else Codelijst(Rijnummer, 8) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "J" Or VBA.Mid$(WAARDE, 2, 1) = "J" Or VBA.Mid$(WAARDE, 3, 1) = "J" Or VBA.Mid$(WAARDE, 4, 1) = "J" Or VBA.Mid$(WAARDE, 5, 1) = "J" Or VBA.Mid$(WAARDE, 6, 1) = "J" Or VBA.Mid$(WAARDE, 7, 1) = "J" Or VBA.Mid$(WAARDE, 8, 1) = "J" Or VBA.Mid$(WAARDE, 9, 1) = "J" Or VBA.Mid$(WAARDE, 10, 1) = "J" Then Codelijst(Rijnummer, 9) = 1 Else Codelijst(Rijnummer, 9) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "K" Or VBA.Mid$(WAARDE, 2, 1) = "K" Or VBA.Mid$(WAARDE, 3, 1) = "K" Or VBA.Mid$(WAARDE, 4, 1) = "K" Or VBA.Mid$(WAARDE, 5, 1) = "K" Or VBA.Mid$(WAARDE, 6, 1) = "K" Or VBA.Mid$(WAARDE, 7, 1) = "K" Or VBA.Mid$(WAARDE, 8, 1) = "K" Or VBA.Mid$(WAARDE, 9, 1) = "K" Or VBA.Mid$(WAARDE, 10, 1) = "K" Then Codelijst(Rijnummer, 10) = 1 Else Codelijst(Rijnummer, 10) = 0
'cijfers
    If VBA.Mid$(WAARDE, 1, 1) = "0" Or VBA.Mid$(WAARDE, 2, 1) = "0" Or VBA.Mid$(WAARDE, 3, 1) = "0" Or VBA.Mid$(WAARDE, 4, 1) = "0" Or VBA.Mid$(WAARDE, 5, 1) = "0" Or VBA.Mid$(WAARDE, 6, 1) = "0" Or VBA.Mid$(WAARDE, 7, 1) = "0" Or VBA.Mid$(WAARDE, 8, 1) = "0" Or VBA.Mid$(WAARDE, 9, 1) = "0" Or VBA.Mid$(WAARDE, 10, 1) = "0" Or VBA.Mid$(WAARDE, 11, 1) = "0" Or VBA.Mid$(WAARDE, 12, 1) = "0" Or VBA.Mid$(WAARDE, 13, 1) = "0" Or VBA.Mid$(WAARDE, 14, 1) = "0" Or VBA.Mid$(WAARDE, 15, 1) = "0" Or VBA.Mid$(WAARDE, 16, 1) = "0" Or VBA.Mid$(WAARDE, 17, 1) = "0" Or VBA.Mid$(WAARDE, 18, 1) = "0" Or VBA.Mid$(WAARDE, 19, 1) = "0" Or VBA.Mid$(WAARDE, 20, 1) = "0" Then Codelijst(Rijnummer, 11) = 1 Else Codelijst(Rijnummer, 11) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "1" Or VBA.Mid$(WAARDE, 2, 1) = "1" Or VBA.Mid$(WAARDE, 3, 1) = "1" Or VBA.Mid$(WAARDE, 4, 1) = "1" Or VBA.Mid$(WAARDE, 5, 1) = "1" Or VBA.Mid$(WAARDE, 6, 1) = "1" Or VBA.Mid$(WAARDE, 7, 1) = "1" Or VBA.Mid$(WAARDE, 8, 1) = "1" Or VBA.Mid$(WAARDE, 9, 1) = "1" Or VBA.Mid$(WAARDE, 10, 1) = "1" Or VBA.Mid$(WAARDE, 11, 1) = "1" Or VBA.Mid$(WAARDE, 12, 1) = "1" Or VBA.Mid$(WAARDE, 13, 1) = "1" Or VBA.Mid$(WAARDE, 14, 1) = "1" Or VBA.Mid$(WAARDE, 15, 1) = "1" Or VBA.Mid$(WAARDE, 16, 1) = "1" Or VBA.Mid$(WAARDE, 17, 1) = "1" Or VBA.Mid$(WAARDE, 18, 1) = "1" Or VBA.Mid$(WAARDE, 19, 1) = "1" Or VBA.Mid$(WAARDE, 20, 1) = "1" Then Codelijst(Rijnummer, 12) = 1 Else Codelijst(Rijnummer, 12) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "2" Or VBA.Mid$(WAARDE, 2, 1) = "2" Or VBA.Mid$(WAARDE, 3, 1) = "2" Or VBA.Mid$(WAARDE, 4, 1) = "2" Or VBA.Mid$(WAARDE, 5, 1) = "2" Or VBA.Mid$(WAARDE, 6, 1) = "2" Or VBA.Mid$(WAARDE, 7, 1) = "2" Or VBA.Mid$(WAARDE, 8, 1) = "2" Or VBA.Mid$(WAARDE, 9, 1) = "2" Or VBA.Mid$(WAARDE, 10, 1) = "2" Or VBA.Mid$(WAARDE, 11, 1) = "2" Or VBA.Mid$(WAARDE, 12, 1) = "2" Or VBA.Mid$(WAARDE, 13, 1) = "2" Or VBA.Mid$(WAARDE, 14, 1) = "2" Or VBA.Mid$(WAARDE, 15, 1) = "2" Or VBA.Mid$(WAARDE, 16, 1) = "2" Or VBA.Mid$(WAARDE, 17, 1) = "2" Or VBA.Mid$(WAARDE, 18, 1) = "2" Or VBA.Mid$(WAARDE, 19, 1) = "2" Or VBA.Mid$(WAARDE, 20, 1) = "2" Then Codelijst(Rijnummer, 13) = 1 Else Codelijst(Rijnummer, 13) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "3" Or VBA.Mid$(WAARDE, 2, 1) = "3" Or VBA.Mid$(WAARDE, 3, 1) = "3" Or VBA.Mid$(WAARDE, 4, 1) = "3" Or VBA.Mid$(WAARDE, 5, 1) = "3" Or VBA.Mid$(WAARDE, 6, 1) = "3" Or VBA.Mid$(WAARDE, 7, 1) = "3" Or VBA.Mid$(WAARDE, 8, 1) = "3" Or VBA.Mid$(WAARDE, 9, 1) = "3" Or VBA.Mid$(WAARDE, 10, 1) = "3" Or VBA.Mid$(WAARDE, 11, 1) = "3" Or VBA.Mid$(WAARDE, 12, 1) = "3" Or VBA.Mid$(WAARDE, 13, 1) = "3" Or VBA.Mid$(WAARDE, 14, 1) = "3" Or VBA.Mid$(WAARDE, 15, 1) = "3" Or VBA.Mid$(WAARDE, 16, 1) = "3" Or VBA.Mid$(WAARDE, 17, 1) = "3" Or VBA.Mid$(WAARDE, 18, 1) = "3" Or VBA.Mid$(WAARDE, 19, 1) = "3" Or VBA.Mid$(WAARDE, 20, 1) = "3" Then Codelijst(Rijnummer, 14) = 1 Else Codelijst(Rijnummer, 14) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "4" Or VBA.Mid$(WAARDE, 2, 1) = "4" Or VBA.Mid$(WAARDE, 3, 1) = "4" Or VBA.Mid$(WAARDE, 4, 1) = "4" Or VBA.Mid$(WAARDE, 5, 1) = "4" Or VBA.Mid$(WAARDE, 6, 1) = "4" Or VBA.Mid$(WAARDE, 7, 1) = "4" Or VBA.Mid$(WAARDE, 8, 1) = "4" Or VBA.Mid$(WAARDE, 9, 1) = "4" Or VBA.Mid$(WAARDE, 10, 1) = "4" Or VBA.Mid$(WAARDE, 11, 1) = "4" Or VBA.Mid$(WAARDE, 12, 1) = "4" Or VBA.Mid$(WAARDE, 13, 1) = "4" Or VBA.Mid$(WAARDE, 14, 1) = "4" Or VBA.Mid$(WAARDE, 15, 1) = "4" Or VBA.Mid$(WAARDE, 16, 1) = "4" Or VBA.Mid$(WAARDE, 17, 1) = "4" Or VBA.Mid$(WAARDE, 18, 1) = "4" Or VBA.Mid$(WAARDE, 19, 1) = "4" Or VBA.Mid$(WAARDE, 20, 1) = "4" Then Codelijst(Rijnummer, 15) = 1 Else Codelijst(Rijnummer, 15) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "5" Or VBA.Mid$(WAARDE, 2, 1) = "5" Or VBA.Mid$(WAARDE, 3, 1) = "5" Or VBA.Mid$(WAARDE, 4, 1) = "5" Or VBA.Mid$(WAARDE, 5, 1) = "5" Or VBA.Mid$(WAARDE, 6, 1) = "5" Or VBA.Mid$(WAARDE, 7, 1) = "5" Or VBA.Mid$(WAARDE, 8, 1) = "5" Or VBA.Mid$(WAARDE, 9, 1) = "5" Or VBA.Mid$(WAARDE, 10, 1) = "5" Or VBA.Mid$(WAARDE, 11, 1) = "5" Or VBA.Mid$(WAARDE, 12, 1) = "5" Or VBA.Mid$(WAARDE, 13, 1) = "5" Or VBA.Mid$(WAARDE, 14, 1) = "5" Or VBA.Mid$(WAARDE, 15, 1) = "5" Or VBA.Mid$(WAARDE, 16, 1) = "5" Or VBA.Mid$(WAARDE, 17, 1) = "5" Or VBA.Mid$(WAARDE, 18, 1) = "5" Or VBA.Mid$(WAARDE, 19, 1) = "5" Or VBA.Mid$(WAARDE, 20, 1) = "5" Then Codelijst(Rijnummer, 16) = 1 Else Codelijst(Rijnummer, 16) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "6" Or VBA.Mid$(WAARDE, 2, 1) = "6" Or VBA.Mid$(WAARDE, 3, 1) = "6" Or VBA.Mid$(WAARDE, 4, 1) = "6" Or VBA.Mid$(WAARDE, 5, 1) = "6" Or VBA.Mid$(WAARDE, 6, 1) = "6" Or VBA.Mid$(WAARDE, 7, 1) = "6" Or VBA.Mid$(WAARDE, 8, 1) = "6" Or VBA.Mid$(WAARDE, 9, 1) = "6" Or VBA.Mid$(WAARDE, 10, 1) = "6" Or VBA.Mid$(WAARDE, 11, 1) = "6" Or VBA.Mid$(WAARDE, 12, 1) = "6" Or VBA.Mid$(WAARDE, 13, 1) = "6" Or VBA.Mid$(WAARDE, 14, 1) = "6" Or VBA.Mid$(WAARDE, 15, 1) = "6" Or VBA.Mid$(WAARDE, 16, 1) = "6" Or VBA.Mid$(WAARDE, 17, 1) = "6" Or VBA.Mid$(WAARDE, 18, 1) = "6" Or VBA.Mid$(WAARDE, 19, 1) = "6" Or VBA.Mid$(WAARDE, 20, 1) = "6" Then Codelijst(Rijnummer, 17) = 1 Else Codelijst(Rijnummer, 17) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "7" Or VBA.Mid$(WAARDE, 2, 1) = "7" Or VBA.Mid$(WAARDE, 3, 1) = "7" Or VBA.Mid$(WAARDE, 4, 1) = "7" Or VBA.Mid$(WAARDE, 5, 1) = "7" Or VBA.Mid$(WAARDE, 6, 1) = "7" Or VBA.Mid$(WAARDE, 7, 1) = "7" Or VBA.Mid$(WAARDE, 8, 1) = "7" Or VBA.Mid$(WAARDE, 9, 1) = "7" Or VBA.Mid$(WAARDE, 10, 1) = "7" Or VBA.Mid$(WAARDE, 11, 1) = "7" Or VBA.Mid$(WAARDE, 12, 1) = "7" Or VBA.Mid$(WAARDE, 13, 1) = "7" Or VBA.Mid$(WAARDE, 14, 1) = "7" Or VBA.Mid$(WAARDE, 15, 1) = "7" Or VBA.Mid$(WAARDE, 16, 1) = "7" Or VBA.Mid$(WAARDE, 17, 1) = "7" Or VBA.Mid$(WAARDE, 18, 1) = "7" Or VBA.Mid$(WAARDE, 19, 1) = "7" Or VBA.Mid$(WAARDE, 20, 1) = "7" Then Codelijst(Rijnummer, 18) = 1 Else Codelijst(Rijnummer, 18) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "8" Or VBA.Mid$(WAARDE, 2, 1) = "8" Or VBA.Mid$(WAARDE, 3, 1) = "8" Or VBA.Mid$(WAARDE, 4, 1) = "8" Or VBA.Mid$(WAARDE, 5, 1) = "8" Or VBA.Mid$(WAARDE, 6, 1) = "8" Or VBA.Mid$(WAARDE, 7, 1) = "8" Or VBA.Mid$(WAARDE, 8, 1) = "8" Or VBA.Mid$(WAARDE, 9, 1) = "8" Or VBA.Mid$(WAARDE, 10, 1) = "8" Or VBA.Mid$(WAARDE, 11, 1) = "8" Or VBA.Mid$(WAARDE, 12, 1) = "8" Or VBA.Mid$(WAARDE, 13, 1) = "8" Or VBA.Mid$(WAARDE, 14, 1) = "8" Or VBA.Mid$(WAARDE, 15, 1) = "8" Or VBA.Mid$(WAARDE, 16, 1) = "8" Or VBA.Mid$(WAARDE, 17, 1) = "8" Or VBA.Mid$(WAARDE, 18, 1) = "8" Or VBA.Mid$(WAARDE, 19, 1) = "8" Or VBA.Mid$(WAARDE, 20, 1) = "8" Then Codelijst(Rijnummer, 19) = 1 Else Codelijst(Rijnummer, 19) = 0
    If VBA.Mid$(WAARDE, 1, 1) = "9" Or VBA.Mid$(WAARDE, 2, 1) = "9" Or VBA.Mid$(WAARDE, 3, 1) = "9" Or VBA.Mid$(WAARDE, 4, 1) = "9" Or VBA.Mid$(WAARDE, 5, 1) = "9" Or VBA.Mid$(WAARDE, 6, 1) = "9" Or VBA.Mid$(WAARDE, 7, 1) = "9" Or VBA.Mid$(WAARDE, 8, 1) = "9" Or VBA.Mid$(WAARDE, 9, 1) = "9" Or VBA.Mid$(WAARDE, 10, 1) = "9" Or VBA.Mid$(WAARDE, 11, 1) = "9" Or VBA.Mid$(WAARDE, 12, 1) = "9" Or VBA.Mid$(WAARDE, 13, 1) = "9" Or VBA.Mid$(WAARDE, 14, 1) = "9" Or VBA.Mid$(WAARDE, 15, 1) = "9" Or VBA.Mid$(WAARDE, 16, 1) = "9" Or VBA.Mid$(WAARDE, 17, 1) = "9" Or VBA.Mid$(WAARDE, 18, 1) = "9" Or VBA.Mid$(WAARDE, 19, 1) = "9" Or VBA.Mid$(WAARDE, 20, 1) = "9" Then Codelijst(Rijnummer, 20) = 1 Else Codelijst(Rijnummer, 20) = 0
    
    Loop Until WAARDE = ""
    Rijnummer = Rijnummer - 2
    'MsgBox (Rijnummer)
'Einde indexeren

'Bestand schrijven
    INDEX1 = 2
    INDEX2 = 2
    LETTERKLEM = 1
    CIJFERKLEM = 7
    GRAFEERKLEM = 8
    
    Call OpenBestand
    Call SleutelsVernieuwen
    
    Do
    INDEX2 = INDEX2 + 12
        Do
        Call LettersFrezen((Codelijst(INDEX1, 1)), (Codelijst(INDEX1, 2)), (Codelijst(INDEX1, 3)), (Codelijst(INDEX1, 4)), (Codelijst(INDEX1, 5)), (Codelijst(INDEX1, 6)), (Codelijst(INDEX1, 7)), (Codelijst(INDEX1, 8)), (Codelijst(INDEX1, 9)), (Codelijst(INDEX1, 10)))
        Call CijfersFrezen((Codelijst(INDEX1 + 1, 11)), (Codelijst(INDEX1 + 1, 12)), (Codelijst(INDEX1 + 1, 13)), (Codelijst(INDEX1 + 1, 14)), (Codelijst(INDEX1 + 1, 15)), (Codelijst(INDEX1 + 1, 16)), (Codelijst(INDEX1 + 1, 17)), (Codelijst(INDEX1 + 1, 18)), (Codelijst(INDEX1 + 1, 19)), (Codelijst(INDEX1 + 1, 20)))
        Call Graveren(Codelijst(INDEX1 + 1, 21))
        INDEX1 = INDEX1 + 2
        LETTERKLEM = LETTERKLEM + 1
        CIJFERKLEM = CIJFERKLEM + 1
        GRAFEERKLEM = GRAFEERKLEM + 1
        Loop Until INDEX1 = INDEX2
        
    Call SleutelsDraaien
    LETTERKLEM = 1
    CIJFERKLEM = 7
    GRAFEERKLEM = 8
    INDEX1 = INDEX1 - 12
        Do
        Call LettersFrezen((Codelijst(INDEX1 + 1, 1)), (Codelijst(INDEX1 + 1, 2)), (Codelijst(INDEX1 + 1, 3)), (Codelijst(INDEX1 + 1, 4)), (Codelijst(INDEX1 + 1, 5)), (Codelijst(INDEX1 + 1, 6)), (Codelijst(INDEX1 + 1, 7)), (Codelijst(INDEX1 + 1, 8)), (Codelijst(INDEX1 + 1, 9)), (Codelijst(INDEX1 + 1, 10)))
        Call CijfersFrezen((Codelijst(INDEX1, 11)), (Codelijst(INDEX1, 12)), (Codelijst(INDEX1, 13)), (Codelijst(INDEX1, 14)), (Codelijst(INDEX1, 15)), (Codelijst(INDEX1, 16)), (Codelijst(INDEX1, 17)), (Codelijst(INDEX1, 18)), (Codelijst(INDEX1, 19)), (Codelijst(INDEX1, 20)))
        Call Graveren(Codelijst(INDEX1, 21))
        INDEX1 = INDEX1 + 2
        LETTERKLEM = LETTERKLEM + 1
        CIJFERKLEM = CIJFERKLEM + 1
        GRAFEERKLEM = GRAFEERKLEM + 1
        Loop Until INDEX1 = INDEX2
        If Rijnummer > INDEX1 - 2 Then Call SleutelsVernieuwen
    Loop Until INDEX1 - 1 > Rijnummer
    Call ProgrammaAfsluiten
NietSchrijven:
End Sub

'Bestand openen
Private Function OpenBestand()
    Open BESTAND For Output As #1
    Print #1, "%"
    Print #1, "O00" & PROGRAMMANUMMER & " (" & ORDERNUMMER & ")"
    Print #1, ""
End Function

'letters frezen
Private Function LettersFrezen(La As String, Lb As String, Lc As String, Ld As String, Le As String, Lf As String, Lg As String, Lh As String, Lj As String, Lk As String)
'If La = 0 And Lb = 0 And Lc = 0 And Ld = 0 And Le = 0 And Lf = 0 And Lg = 0 And Lh = 0 And Lj = 0 And Lk = 0 Then GoTo GeenLetters
If La = "0" And Lb = "0" And Lc = "0" And Ld = "0" And Le = "0" And Lf = "0" And Lg = "0" And Lh = "0" And Lj = "0" And Lk = "0" Then GoTo GeenLetters
If La = "" And Lb = "" And Lc = "" And Ld = "" And Le = "" And Lf = "" And Lg = "" And Lh = "" And Lj = "" And Lk = "" Then GoTo GeenLetters

    Print #1, "G65 P900" & LETTERKLEM & " A1. " & "I" & La & ". J" & Lb & ". K" & Lc & ". I" & Ld & ". J" & Le & "."
    Print #1, "G65 P900" & LETTERKLEM & " A2. " & "I" & Lf & ". J" & Lg & ". K" & Lh & ". I" & Lj & ". J" & Lk & "."
    Print #1, "M01"
    Print #1, ""
GeenLetters:
End Function

'cijfers frezen
Private Function CijfersFrezen(C0 As String, C1 As String, C2 As String, C3 As String, C4 As String, C5 As String, C6 As String, C7 As String, C8 As String, C9 As String)
If C0 = "0" And C1 = "0" And C2 = "0" And C3 = "0" And C4 = "0" And C5 = "0" And C6 = "0" And C7 = "0" And C8 = "0" And C9 = "0" Then GoTo GeenCijfers
If C0 = "" And C1 = "" And C2 = "" And C3 = "" And C4 = "" And C5 = "" And C6 = "" And C7 = "" And C8 = "" And C9 = "" Then GoTo GeenCijfers
    
If CIJFERKLEM < 10 Then
    Print #1, "G65 P900" & CIJFERKLEM & " A1. " & "I" & C0 & ". J" & C1 & ". K" & C2 & ". I" & C3 & ". J" & C4 & "."
    Print #1, "G65 P900" & CIJFERKLEM & " A2. " & "I" & C5 & ". J" & C6 & ". K" & C7 & ". I" & C8 & ". J" & C9 & "."
End If

If CIJFERKLEM > 9 Then
    Print #1, "G65 P90" & CIJFERKLEM & " A1. " & "I" & C0 & ". J" & C1 & ". K" & C2 & ". I" & C3 & ". J" & C4 & "."
    Print #1, "G65 P90" & CIJFERKLEM & " A2. " & "I" & C5 & ". J" & C6 & ". K" & C7 & ". I" & C8 & ". J" & C9 & "."
End If

    Print #1, "M01"
    Print #1, ""
GeenCijfers:
End Function
    
'graveren
Private Function Graveren(Code As String)
If Code = "0" Or Code = "" Then GoTo GeenGraferen
If Len(Code) = 1 Then
Xpositie = "14.4"
LetterHoogte = "3.5"
End If
If Len(Code) = 2 Then
Xpositie = "12.5"
LetterHoogte = "3.5"
End If
If Len(Code) = 3 Then
Xpositie = "10.6"
LetterHoogte = "3.5"
End If
If Len(Code) = 4 Then
Xpositie = "8.7"
LetterHoogte = "3.5"
End If
If Len(Code) = 5 Then
Xpositie = "6.8"
LetterHoogte = "3.5"
End If
If Len(Code) > 6 Then GoTo GeenGraferen
If Len(Code) = 6 Then
Xpositie = "4.9"
LetterHoogte = "3.5"
End If

    Print #1, "G154 P" & GRAFEERKLEM
    Print #1, "G00 g90 x0. y0.z2."
    Print #1, "g01 g91 x5 y-98"
    Print #1, "G47 P0 X" & Xpositie & " Y-98.5 I0 J" & LetterHoogte & " R2. Z-1.3 E300. F800 (" & Code & ")"
    Print #1, ""
GeenGraferen:
End Function

'sleutels draaien
Private Function SleutelsDraaien()
    Print #1, "M09"
    Print #1, "G00 G28 G91 Z0"
    Print #1, "G49 Z0"
    Print #1, "G90 G53 X-380. Y0."
    Print #1, "M00"
    Print #1, "(Draai de gefreesde sleutels om.)"
    Print #1, "(Swap the milled key.)"
    Print #1, "(Odwr|fffd|c klucz.)"
    Print #1, "(Na het draaien, druk op Cycle Start.)"
    Print #1, "(After swapping, press Cycle Start.)"
    Print #1, "(Po odwr|fffd|ceniu klucza nacisnij przycisk Cycle Start.)"
    Print #1, ""
End Function

'sleutels vernieuwen
Private Function SleutelsVernieuwen()
SleutelsInklemmen = Rijnummer - (INDEX2 - 1) + 1
If SleutelsInklemmen > 12 Then SleutelsInklemmen = 12 Else SleutelsInklemmen = SleutelsInklemmen
    Print #1, "M09"
    Print #1, "G00 G28 G91 Z0"
    Print #1, "G49 Z0"
    Print #1, "G90 G53 X-380. Y0."
    Print #1, "M00"
    Print #1, "(Aantal sleutels inklemmen: " & SleutelsInklemmen & ")"
    Print #1, "(Quantity of keys to fix: " & SleutelsInklemmen & ")"
    Print #1, "(Ilosc kluczy do zrobienia: " & SleutelsInklemmen & ")"
    Print #1, "(Na het vullen, druk op Cycle Start.)"
    Print #1, "(After fixing, press Cycle Start.)"
    Print #1, "(Po zamocowaniu kluczy nacisnij przycisk Cycle Start.)"
    Print #1, ""
    LETTERKLEM = 1
    CIJFERKLEM = 7
    GRAFEERKLEM = 8
End Function

'EINDE PROGRAMMA
Private Function ProgrammaAfsluiten()
Print #1, "G00 G28 G91 Z0"
Print #1, "G49 Z0"
Print #1, "G90 G53 X-380. Y0."
Print #1, "M01"
Print #1, ""
Print #1, "M30"
Print #1, ""
Print #1, "(Frezen van de sleutels gereed. Ordernummer: " & ORDERNUMMER & ") "
Print #1, "(Milling of the keys is finished. Ordernumber: " & ORDERNUMMER & ") "
Print #1, "(Proces zostal zakonczony. Numer projektu: " & ORDERNUMMER & ") "
Print #1, "(Verwijder a.u.b. het bestand " & BESTAND & " van de laptop) "
Print #1, "(Please delete the file " & BESTAND & " on the laptop) "
Print #1, "(Wykasuj plik " & BESTAND & " z laptopa) "
Print #1, "(Prettige dag verder.)"
Print #1, "(Have a nice day.)"
Print #1, "(Koniec-ps.nie pij dzis wieczorem za duzo piwa. Daniel)"
Print #1, ""
Print #1, "%"
Close #1
MsgBox "Gereed. Uitvoer: " & BESTAND
End Function



Attribute VB_Name = "Module_KingData"
Option Explicit

Sub AddSheetFromTemplate()
    uAddSheet.Show
End Sub

Sub GetKingArtikelData()
    'On Error GoTo ErrorHandler
    
    On Error Resume Next
    
    Dim btn As Button
    Set btn = ActiveSheet.Buttons(1)
    
'    For Each btn In ActiveSheet.Buttons
''        MsgBox (btn.Text)
'        btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Start"
'    Next
    
    btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Start"
    
    Application.ScreenUpdating = False
    
    Dim sText As String

    Dim pt As PivotTable
    Set pt = ActiveSheet.PivotTables("Draaitabel5")
    
    Dim pi As PivotItem
           
    btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Refresh PivotTable"
    Call TruePivotRefresh(pt)

    Dim sField As String

    Dim i As Integer

    For i = 1 To pt.RowFields(1).PivotItems.Count
    
        Set pi = pt.RowFields(1).PivotItems(i)
        pi.Visible = True
        
        If pi.Value <> "(blank)" Then
            sField = pi.Value
            If sField <> "" Then
                sText = sText & "KingSystem.tabArtikel.ArtCode = '" & sField & "' OR "
            End If
        Else
            If pi.Value = "(blank)" And i = 1 Then
                If pt.RowFields(1).PivotItems.Count <> 1 Then
                    pi.Visible = False
                End If
            End If
        End If
        
    Next


    If sText = "" Then
        btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - No Data"
        Application.ScreenUpdating = True
        Exit Sub
    Else
        sText = Left(sText, Len(sText) - 4)
    End If
    
    btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Update Query"
    'Pass the Parameters values to the Stored Procedure used in the Data Connection
    ActiveWorkbook.Connections("Query from KingDataDigger_NL_Art").ODBCConnection.BackgroundQuery = False
    ActiveWorkbook.Connections("Query from KingDataDigger_NL_Art").ODBCConnection.CommandText = _
        "SELECT KingSystem.tabArtikel.ArtCode, KingSystem.tabArtikel.ArtOms, KingSystem.tabVrART000000.vrART000000Veld92 AS NL_Instruction," & _
            "KingSystem.tabVrART000000.vrART000000Veld94 AS NL_TitleLine00, KingSystem.tabVrART000000.vrART000000Veld95 AS NL_TitleLine01," & _
            "KingSystem.tabVrART000000.vrART000000Veld96 AS NL_TitleLine02, KingSystem.tabVrART000000.vrART000000Veld97 AS NL_TitleLine03," & _
            "KingSystem.tabVrART000000.vrART000000Veld98 AS NL_TitleLine04, KingSystem.tabVrART000000.vrART000000Veld99 AS NL_TitleLine05," & _
            "KingSystem.tabVrART000000.vrART000000Veld100 AS NL_TitleLine06, KingSystem.tabVrART000000.vrART000000Veld103 AS BOM_Structure" & _
        " FROM KingSystem.tabArtikel, KingSystem.tabVrART000000" & _
        " WHERE KingSystem.tabArtikel.ArtGid = KingSystem.tabVrART000000.VrART000000RecordId AND (" & sText & ")"
    
    btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Refresh Query"
    ActiveWorkbook.Connections("Query from KingDataDigger_NL_Art").Refresh
    
'    ActiveSheet.Range("E3").Value = ActiveWorkbook.Connections("Query from KingDataDigger_NL_Art").ODBCConnection.CommandText
'    ActiveSheet.Range("E4").Value = sText

    Call AutoFillFormula

    btn.Caption = "Get King Artikel Data" & vbCr & Now() & " - Done"
  
'ErrorHandler:
    Application.ScreenUpdating = True

End Sub

Private Sub AutoFillFormula()

    Dim lastRow As Integer
    lastRow = Range("B7").End(xlDown).Row

    Range("A8").AutoFill Destination:=Range("A8:A" & lastRow)
    Range("D8:M8").AutoFill Destination:=Range("D8:M" & lastRow)
    
End Sub

Sub TruePivotRefresh(pt As PivotTable)
    Dim ptF As PivotField, ptI As PivotItem
    With pt
        On Error Resume Next
        For Each ptF In .PivotFields
            For Each ptI In ptF.PivotItems
                ptI.Delete
            Next ptI
        Next ptF
        On Error GoTo 0
        .PivotCache.Refresh
    End With
End Sub
Attribute VB_Name = "PrintModule"
Option Explicit

Private STDprint As String
Private NewPrinter As String
Private sOn As String

Public Enum PrintEnum
    P_ViewAViewB
    P_ViewA
    P_ViewB
    P_ViewUser
End Enum

Public Enum WOcolorEnum
    C_Blue
    C_Orange
    C_White
End Enum

#If Win64 Then
    ' Win64 API declarations
    Private Declare PtrSafe Function GetProfileString Lib "kernel32" Alias "GetProfileStringA" _
            (ByVal lpAppName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, _
            ByVal lpReturnedString As String, ByVal nSize As LongPtr) As Long
#Else
    ' Win32 API declarations
    Private Declare Function GetProfileString Lib "kernel32" Alias "GetProfileStringA" _
            (ByVal lpAppName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, _
            ByVal lpReturnedString As String, ByVal nSize As Long) As Long
#End If

Sub Batch()
    Batch_menu.Show
End Sub

Sub Printlois()
    If Cells(1, 1).Value = "D" Then
      Call SetPrintRanges(3)
    Else
      uPrintLoisOptions.Show
    End If
End Sub

Sub SetPrintRanges(ByVal ePrint As PrintEnum)

    Dim iRow As Integer

    Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("data sheet")
    oSheet.Select
    'Sheets("data sheet").Select'32809
    
    Select Case ePrint
        Case PrintEnum.P_ViewA
            Call ViewA
            iRow = (Range("C8192").End(xlUp).Row)
        Case PrintEnum.P_ViewB
            Call ViewB
            iRow = (Range("P8192").End(xlUp).Row)
        Case PrintEnum.P_ViewUser
            iRow = (Range("B8192").End(xlUp).Row)
    End Select
    
    Select Case iRow
        Case 0, 1
            ActiveSheet.PageSetup.PrintArea = ""
        Case Else
            If Cells(1, 1).Value = "D" Then
                ActiveSheet.PageSetup.PrintArea = Range(Range("A1"), Range("AV1").Offset(iRow, 0)).Address
                ActiveSheet.PrintOut
            Else
                ActiveSheet.PageSetup.PrintArea = Range(Range("A1"), Range("AL1").Offset(iRow, 0)).Address
            End If
    End Select

End Sub

Sub PrintToUser()

    If STDprint = "" Then
        STDprint = Application.ActivePrinter
        sOn = LanguageCheck(STDprint)
    Else
        Application.ActivePrinter = STDprint
    End If
        
End Sub

Public Function LanguageCheck(ByVal sInput As String) As String
    On Error GoTo ErrHandler:
        LanguageCheck = " " & Split(sInput, " ")(UBound(Split(sInput, " ")) - 1) & " "
    Exit Function
ErrHandler:
    LanguageCheck = ""
End Function

Sub PrintToPDF()
    NewPrinter = GetNewPrinter("PDF-XChange 4.0")
    If NewPrinter <> "" Then
        Call ChangeActivePrinter(NewPrinter)
    Else
        If MsgBox("PDF printer could not be selected, Macro will Abort", vbOK, "Printer Driver Error") = vbOK Then
            PrintToUser
            End
        End If
    End If
End Sub

Sub PrintToOrange(Printer As String)
    If Printer <> "" Then
        Call ChangeActivePrinter(Printer)
    Else
        MsgBox ("Please select Orange Printer.")
    End If
End Sub

Sub PrintToBlue(Printer As String)
    If Printer <> "" Then
        Call ChangeActivePrinter(Printer)
    Else
        MsgBox ("Please select Blue Printer.")
    End If
End Sub

Sub PrintToWhite(Printer As String)
    If Printer <> "" Then
        Call ChangeActivePrinter(Printer)
    Else
        MsgBox ("Please select White Printer.")
    End If
End Sub

'Sub PrintToNormal()
'    NewPrinter = GetNewPrinter("\\DC02\Xerox 7545 Beneden Black PS")
'    If NewPrinter <> "" Then
'        Call ChangeActivePrinter(NewPrinter)
'    Else
'        If MsgBox("Normal Sheet could not be selected, Click No to Abort, Click Yes to try PDF Print", vbYesNo, "Printer Driver Error") = vbNo Then
'            PrintToUser
'            End
'        Else
'            PrintToPDF
'        End If
'    End If
'End Sub

Sub ChangeActivePrinter(sPrinter As String)
    On Error GoTo ErrHandler:
    If sOn = "" Then GoTo ErrHandler:
    Application.ActivePrinter = sPrinter
    Exit Sub
ErrHandler:
    MsgBox "Printer could not be Selected" & vbNewLine & sPrinter, vbExclamation, "Printer not Available"
    PrintToUser
    End
End Sub

Function PrintKeyCodes() As Boolean
    Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("KEY CODES")
    oSheet.Select
    'Sheets("KEY CODES").Select'32809
    Dim iRow As Integer
    iRow = (Range("B8192").End(xlUp).Row) - 1
    
    Select Case iRow
        Case 0
            PrintKeyCodes = False
        Case Else
            oSheet.PageSetup.PrintArea = Range(Range("A1"), Range("A1").Offset(iRow, 5)).Address
            PrintKeyCodes = True
    End Select
End Function

Function PrintDrawingList() As Boolean
    Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("drawing list")
    oSheet.Select
    'Sheets("drawing list").Select'32809
    oSheet.PivotTables("Draaitabel5").PivotCache.Refresh
    If Range("C8") <> "" Then
        PrintDrawingList = True
    End If
End Function

Sub PrintHardCopy(ByVal ePrint As PrintEnum, ByVal eWOcolor As WOcolorEnum, ByVal bPreview As Boolean, BluePrinter As String, OrangePrinter As String, WhitePrinter As String)
    If Not bPreview Then
        Call PrintToUser
            Select Case eWOcolor
        Case C_Blue
            Call PrintToBlue(BluePrinter)
        Case C_Orange
            Call PrintToOrange(OrangePrinter)
        Case C_White
            Call PrintToWhite(WhitePrinter)
        End Select
    End If
    
    Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("WO")
    oSheet.Select
    'Sheets("WO").Select'32809

    ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
    
    If Not bPreview Then
        Call PrintToWhite(WhitePrinter)
    End If
      
    If PrintKeyCodes Then
        ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
    End If
 
    Select Case ePrint
        Case P_ViewAViewB
            Call SetPrintRanges(P_ViewA)
            ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
            Call SetPrintRanges(P_ViewB)
            ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
        Case Else
            Call SetPrintRanges(ePrint)
            ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
    End Select

    'Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("tag plate list")
    oSheet.Select
    'Sheets("tag plate list").Select'32809

    ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
  
    If PrintDrawingList Then
        ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, Preview:=bPreview
    End If
    
    'Dim oSheet As Worksheet
    Set oSheet = ActiveWorkbook.Sheets("data sheet")
    oSheet.Activate
    'Sheets("data sheet").Select'32809
    'Sheets("data sheet").Activate
    
    If Not bPreview Then
        Call PrintToUser
    End If
    
        Call ViewA
End Sub

''Function GetNewPrinter(sPrinter As String) As String
''    On Error GoTo ErrHandler:
    
''    Dim registryKey As String
''    Dim sValue As String
 
     ' get string value from registry
''     sValue = (GetStringValFromRegistry("Software\Microsoft\Windows NT\CurrentVersion\Devices", sPrinter))
    
''    If Len(sValue) >= 5 Then
''        GetNewPrinter = sPrinter & sOn & Right(sValue, 5)
''    Else
''        GoTo ErrHandler:
''    End If
    
''    Exit Function
''ErrHandler:
''    GetNewPrinter = ""
    
''End Function

'Enum Hive
'  HKEY_CLASSES_ROOT
'  HKEY_CURRENT_USER
'  HKEY_LOCAL_MACHINE
'  HKEY_USERS
'  HKEY_CURRENT_CONFIG
'End Enum
'
'Function GetHive(hivetype As Hive) As Variant
'' return enumerated value depending on the hive chosen
'  Select Case hivetype
'    Case 0
'      GetHive = &H80000000  ' HKEY_CLASSES_ROOT
'    Case 1
'      GetHive = &H80000001  ' HKEY_CURRENT_USER
'    Case 2
'      GetHive = &H80000002  ' HKEY_LOCAL_MACHINE
'    Case 3
'      GetHive = &H80000003  ' HKEY_USERS
'    Case 4
'      GetHive = &H80000005  ' HKEY_CURRENT_CONFIG
'  End Select
'
'End Function

'Function GetStringValFromRegistry(registryKey As String, keyValue As String) As String
 
'Dim objReg As Object
''Dim strKeyPath As String
'Dim ValueName As String
'Dim strValue As String
 
''  Set objReg = GetStdRegProv
 
''  strKeyPath = registryKey
''  ValueName = keyValue
 
  ' put key value into strValue variable
''  objReg.GetStringValue &H80000001, strKeyPath, ValueName, strValue
''  GetStringValFromRegistry = strValue
 
''End Function
 
''Function GetStdRegProv() As Object
' http://msdn.microsoft.com/en-us/library/aa394600(VS.85).aspx
''Dim strComputer As String
 
''  strComputer = "."
 
''  Set GetStdRegProv = GetObject("winmgmts:" _
''                              & "{impersonationLevel=impersonate}!\\" _
''                              & strComputer & "\root\default:StdRegProv")
''End Function

Function PrinterList() As Collection
    Dim Buffer As String
    Dim BufSize As Long
    Dim nChars As Long
    Dim Devices() As String
    Dim NetPort As String
    Dim i As Long
    
    Set PrinterList = New Collection
        
    ' VB5 fails because it never expands this value!
    ' Start with a reasonably sized buffer.
    BufSize = 512
    
    
    ' Attempt to get list of installed printers
    ' by looping until successful.
    Do
       Buffer = Space$(BufSize)
       nChars = GetProfileString("Devices", vbNullString, "", Buffer, BufSize)
       If nChars = (BufSize - 2) Then
          ' MSDN: If either lpAppName or lpKeyName is NULL and
          ' the supplied destination buffer is too small to hold
          ' all the strings, the last string is truncated and
          ' followed by two null characters. In this case, the
          ' return value is equal to nSize minus two.
          BufSize = BufSize * 2
       ElseIf nChars = 0 Then
          ' The call failed entirely.
          Exit Do
       Else
          ' We got a reasonable return.
          Exit Do
       End If
    Loop
    
    
    ' Build a list compatible with Application.ActivePrinter?
    Call ExtractStringZ(Buffer, Devices())
    For i = LBound(Devices) To UBound(Devices)
       nChars = GetProfileString("Devices", Devices(i), "", Buffer, BufSize)
       NetPort = Mid$(TrimNull(Buffer), InStr(Buffer, ",") + 1)
       Call PrinterList.Add(Devices(i) + " on " + NetPort)
    Next i
    
End Function

' *********************************************
' Private Methods
' *********************************************
Private Function ExtractStringZ(Buffer As String, OutArray() As String) As Long
   Dim StartPos As Long
   Dim NullPos As Long
   Dim BuffLen As Long
   Dim Elements As Long

   ' Extract null terminated strings from large
   ' double-null terminated buffer.
   StartPos = 1
   Elements = 0
   BuffLen = Len(Buffer)


   ' Loop through buffer looking for nulls.
   Do While StartPos < BuffLen
      NullPos = InStr(StartPos, Buffer, vbNullChar)
      If NullPos = StartPos Then
         ' We've hit the double-null terminator.
         Exit Do
      Else
         ' Expand array, store new substring, and
         ' increment counters.
         ReDim Preserve OutArray(0 To Elements) As String
         OutArray(Elements) = Mid$(Buffer, StartPos, NullPos - StartPos)
         StartPos = NullPos + 1
         Elements = Elements + 1
      End If
   Loop


   ' Return number of substrings found.
   ExtractStringZ = Elements
End Function

Private Function TrimNull(ByVal StrIn As String) As String
   Dim nul As Long

   ' Truncate input string at first null.
   ' If no nulls, perform ordinary Trim.
   nul = InStr(StrIn, vbNullChar)
   Select Case nul
      Case Is > 1
         TrimNull = Left$(StrIn, nul - 1)
      Case 1
         TrimNull = ""
      Case 0
         TrimNull = Trim$(StrIn)
   End Select
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "TextBox3, 3, 0, MSForms, TextBox"
Attribute VB_Control = "TextBox2, 2, 1, MSForms, TextBox"
Attribute VB_Control = "TextBox1, 1, 2, MSForms, TextBox"
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Views"
Option Explicit

Sub ViewA()
Attribute ViewA.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ViewA Macro
    Range("A1").Value = "A"
    Call HideTopWorkStatus
    Worksheets("data sheet").Columns("A:BM").Hidden = False
    
    Worksheets("data sheet").Columns("AM:AN").Hidden = True
    Worksheets("data sheet").Columns("AB:AD").Hidden = True
    
    Worksheets("data sheet").Columns("U").Hidden = HideEmpty("U9")
    Worksheets("data sheet").Columns("V").Hidden = HideEmpty("V9")
    Worksheets("data sheet").Columns("W").Hidden = HideEmpty("W9")
    Worksheets("data sheet").Columns("X").Hidden = HideEmpty("X9")
    
    Worksheets("data sheet").Columns("Y").Hidden = HideEmpty("Y9")
    Worksheets("data sheet").Columns("Z").Hidden = HideEmpty("Z9")
    Worksheets("data sheet").Columns("AA").Hidden = HideEmpty("AA9")
    
    Worksheets("data sheet").Columns("J:Q").Hidden = True
    Worksheets("data sheet").Columns("D:E").Hidden = True
    Worksheets("data sheet").Columns("A:A").Hidden = True
    Worksheets("data sheet").Columns("AP:AS").Hidden = True
    
    'Update Locations in SPRF sheet WHvB
   ActiveWorkbook.Names("LOCATIE").RefersToR1C1 = "=King_Data!R2C18:R100C18"
    
End Sub

Sub ViewB()
Attribute ViewB.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ViewB Macro
    Range("A1").Value = "B"
    Call HideTopWorkStatus
    Worksheets("data sheet").Columns("A:BM").Hidden = False
    
    Worksheets("data sheet").Columns("AG:BM").Hidden = True
    Worksheets("data sheet").Columns("R:AA").Hidden = True
    Worksheets("data sheet").Columns("D:D").Hidden = True
End Sub

Sub ViewC()
Attribute ViewC.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ViewC Macro
    Range("A1").Value = "C"
    Call HideTopWorkStatus
    Worksheets("data sheet").Columns("A:BM").Hidden = False
    Worksheets("data sheet").Columns("AP:BM").Hidden = True
End Sub

Sub ViewD()
'
' ViewD Macro
    Range("A1").Value = "D"
    Call HideTopWorkStatus
    Worksheets("data sheet").Columns("A:BM").Hidden = False
    
    Worksheets("data sheet").Columns("AM:AN").Hidden = True
    Worksheets("data sheet").Columns("AB:AD").Hidden = True
    
    Worksheets("data sheet").Columns("U").Hidden = HideEmpty("U9")
    Worksheets("data sheet").Columns("V").Hidden = HideEmpty("V9")
    Worksheets("data sheet").Columns("W").Hidden = HideEmpty("W9")
    Worksheets("data sheet").Columns("X").Hidden = HideEmpty("X9")
    
    Worksheets("data sheet").Columns("Y").Hidden = HideEmpty("Y9")
    Worksheets("data sheet").Columns("Z").Hidden = HideEmpty("Z9")
    Worksheets("data sheet").Columns("AA").Hidden = HideEmpty("AA9")
    
    Worksheets("data sheet").Columns("J:Q").Hidden = True
    Worksheets("data sheet").Columns("D:E").Hidden = True
    Worksheets("data sheet").Columns("A:A").Hidden = True
    Worksheets("data sheet").Columns("AO:AU").Hidden = True
    Worksheets("data sheet").Columns("AW:BM").Hidden = True

End Sub

Sub ViewE()
'
' ViewE Macro
    Range("A1").Value = "E"
    Call HideTopWorkStatus
    Worksheets("data sheet").Columns("A:BM").Hidden = False
    
    Worksheets("data sheet").Columns("U").Hidden = HideEmpty("U9")
    Worksheets("data sheet").Columns("V").Hidden = HideEmpty("V9")
    Worksheets("data sheet").Columns("W").Hidden = HideEmpty("W9")
    Worksheets("data sheet").Columns("X").Hidden = HideEmpty("X9")
    
    Worksheets("data sheet").Columns("Y").Hidden = HideEmpty("Y9")
    Worksheets("data sheet").Columns("Z").Hidden = HideEmpty("Z9")
    Worksheets("data sheet").Columns("AA").Hidden = HideEmpty("AA9")
    
    Worksheets("data sheet").Columns("J:Q").Hidden = True
    Worksheets("data sheet").Columns("D:E").Hidden = True
    Worksheets("data sheet").Columns("A:A").Hidden = True
    Worksheets("data sheet").Columns("U:AD").Hidden = True
    Worksheets("data sheet").Columns("AG:AS").Hidden = True
    Worksheets("data sheet").Columns("BD:BL").Hidden = True
End Sub

Sub ToggleTopWorkStatus()
    If (Worksheets("data sheet").Columns("AQ").Hidden = True) Then

        Worksheets("data sheet").Columns("A:AZ").Hidden = True
        
        Worksheets("data sheet").Columns("B").Hidden = False
        Worksheets("data sheet").Columns("C").Hidden = False
        
        Worksheets("data sheet").Columns("F").Hidden = False
        Worksheets("data sheet").Columns("G").Hidden = False
        
        Worksheets("data sheet").Columns("R").Hidden = False
        Worksheets("data sheet").Columns("S").Hidden = False
        Worksheets("data sheet").Columns("T").Hidden = False
        Worksheets("data sheet").Columns("AG").Hidden = False
        Worksheets("data sheet").Columns("AH").Hidden = False
        Worksheets("data sheet").Columns("AI").Hidden = False
        Worksheets("data sheet").Columns("AJ").Hidden = False
        Worksheets("data sheet").Columns("AK").Hidden = False
        Worksheets("data sheet").Columns("AQ").Hidden = False
        Worksheets("data sheet").Columns("AR").Hidden = False
        Worksheets("data sheet").Columns("AS").Hidden = False
    Else
        Call ViewA
    End If
End Sub

Sub HideTopWorkStatus()
    Worksheets("data sheet").Columns("AQ:AS").Hidden = True
End Sub

Function HideEmpty(oRange)
    HideEmpty = False
    
    Dim startCell As Range, firstNonEmptyCell As Range
    Set startCell = Range(oRange) 'change this depending on which column you are looking at

    If VBA.IsEmpty(startCell.Value) Then
'        MsgBox "No data in this column"
        HideEmpty = True
    Else
        If startCell.End(xlDown).Row > 65000 Then
            HideEmpty = True
        End If
    End If

End Function

Sub OptionButtonAll_Click()
    Call ShowPlanning("")
End Sub

Sub OptionButton6_Click()
    Call ShowPlanning("6")
End Sub

Sub OptionButton8_Click()
    Call ShowPlanning("8")
End Sub

Sub OptionButton10_Click()
    Call ShowPlanning("10")
End Sub

Sub OptionButton12_Click()
    Call ShowPlanning("12")
End Sub

Sub OptionButtonspecial_Click()
    Call ShowPlanning("special")
End Sub

Sub ShowPlanning(ByVal sWeek As String)
    'Switch off screen updating for additional performance
    Application.ScreenUpdating = False
    'Hide all Rows with variable planning data
    Range("9:143").EntireRow.Hidden = True
    Range("J:V").EntireColumn.Hidden = True

    Select Case sWeek
        
        Case ""
            'Show all planning data
            Range(Cells(9, 1), Cells(143, 1)).EntireRow.Hidden = False
            Range("C:V").EntireColumn.Hidden = False
        
        Case "6"
            'Show Planning data # weeks
            Range(Cells(9, 1), Cells(33, 1)).EntireRow.Hidden = False
            Range("C:I").EntireColumn.Hidden = False
           
        Case "8"
            'Show Planning data # weeks
            Range(Cells(35, 1), Cells(59, 1)).EntireRow.Hidden = False
            Range("C:K").EntireColumn.Hidden = False

        Case "10"
            'Show Planning data # weeks
            Range(Cells(61, 1), Cells(84, 1)).EntireRow.Hidden = False
            Range("C:M").EntireColumn.Hidden = False
                        
        Case "12"
            'Show Planning data # weeks
            Range(Cells(86, 1), Cells(110, 1)).EntireRow.Hidden = False
            Range("C:P").EntireColumn.Hidden = False
                           
        Case "special"
            'Show Planning data # weeks
            Range(Cells(112, 1), Cells(142, 1)).EntireRow.Hidden = False
            Range("C:V").EntireColumn.Hidden = False
                              
    End Select
    
    'Active ScreenUpdating for user experience
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "uAddSheet"
Attribute VB_Base = "0{E55CDD3B-9A62-490F-B1EC-E386123E1E84}{5CE03CD5-762C-446B-A460-05058542A94C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Const TemplateRoot As String = "L:\Manuals and Documentation\LOIS - keycodes\TemplateSheets"
Private aWB As Excel.Workbook
Private sFileRef As String
Private sFullFileRef As String

Private Sub btnAddSelectedSheets_Click()
    Dim i As Integer
    Dim sNames As Collection
    Set sNames = New Collection
    
    For i = 0 To lstSheets.ListCount - 1
        If lstSheets.Selected(i) = True Then
             sNames.Add lstSheets.List(i)
        End If
    Next i
    
    If sNames.Count <> 0 Then
        
        aWB.RefreshAll
        
        Application.ScreenUpdating = True
        
        sFileRef = cmbFiles.Text
        sFullFileRef = TemplateRoot & "\" & sFileRef
        
        Dim oWB As Excel.Workbook
        Set oWB = Application.Workbooks.Open(sFullFileRef, ReadOnly:=True)
    
        Dim oWS As Excel.Worksheet
        Dim s As Variant
        For Each s In sNames
            oWB.Worksheets(s).Copy _
            before:=aWB.Worksheets(cmbWBSheets.Text)
            
            If chkRepair.Value Then
                '# Same name issue
                'Call RemLinks(aWB.Worksheets(s))
                Call RemLinks(aWB.ActiveSheet)
                Call ReplaceOnAction(aWB.ActiveSheet)
            End If
            
        Next
        
        oWB.Close (False)
        
        Application.ScreenUpdating = False
        
        If chkRepair.Value Then


                Dim aLinks As Variant
                aLinks = aWB.LinkSources(xlExcelLinks)
                If Not IsEmpty(aLinks) Then
                    'Dim i As Integer
                    For i = 1 To UBound(aLinks)
                        If InStr(aLinks(i), sFileRef) <> 0 Then
                            ActiveWorkbook.ChangeLink Name:= _
                                aLinks(i) _
                                , NewName:= _
                                aWB.FullName _
                                , Type:=xlExcelLinks
                        End If
                    Next i
                End If

        End If
        
        Dim sCheck As String
        sCheck = CheckLinks(aWB)
        
        Call CleanUp
        
        If sCheck <> "" Then
            MsgBox sCheck, vbCritical, "External Links Found -> Data - Edit Links"
        End If
        
        Unload Me
    End If
    
End Sub

Private Sub cmbFiles_Change()

    lstSheets.Clear

    Dim oWB As Excel.Workbook
    Set oWB = Application.Workbooks.Open(TemplateRoot & "/" & cmbFiles.Text, ReadOnly:=True)

    Dim oWS As Excel.Worksheet
    For Each oWS In oWB.Sheets
        If InStr(UCase(oWS.Name), "KING") <> 1 And oWS.Visible = xlSheetVisible Then
            lstSheets.AddItem oWS.Name
        End If
    Next
    
    oWB.Close (False)
    
End Sub

Private Sub lstSheets_Click()

End Sub

Private Sub UserForm_Error(ByVal Number As Integer, ByVal Description As MSForms.ReturnString, ByVal SCode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, ByVal CancelDisplay As MSForms.ReturnBoolean)
    Call CleanUp
End Sub

Private Sub UserForm_Initialize()
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Call ActiveSheets
    Call FindSheets
End Sub

Sub ActiveSheets()

    Set aWB = ActiveWorkbook
    
    Dim oWS As Excel.Worksheet
    
    For Each oWS In aWB.Worksheets
        cmbWBSheets.AddItem oWS.Name
    Next

    cmbWBSheets.ListIndex = 0

End Sub

Sub FindSheets()

    Dim o As Variant

    Dim cFiles As Collection
    Set cFiles = LoopThroughFiles(TemplateRoot)
    
    For Each o In cFiles
        cmbFiles.AddItem o
    Next
    
    If cFiles.Count = 0 Then
        cmbFiles.Enabled = False
        cmbFiles.Text = "No Files Found in Template Folder"
    Else
        cmbFiles.ListIndex = 0
    End If

End Sub

Function LoopThroughFiles(ByVal sFolder As String) As Collection
    Set LoopThroughFiles = New Collection
    Dim StrFile As String
    StrFile = Dir(sFolder & "\*xl*")
    Do While Len(StrFile) > 0
        LoopThroughFiles.Add StrFile
        StrFile = Dir
    Loop
End Function

Private Sub UserForm_Terminate()
    Call CleanUp
End Sub

Private Sub RemLinks(oWS As Excel.Worksheet)
'    'Call oWS.Cells.Replace("'*" & TemplateRoot & "*!", "CLEAR")
'    'Call oWS.Cells.Replace("'*'!", "", xlPart)
'    Dim rng As Range
'    Dim fAdr As String
''    Dim Temp As String
'
'    Dim cRange As Collection
'    Set cRange = New Collection
'
'    Set rng = oWS.Cells.Find("=*!")
'    If Not rng Is Nothing Then
'        'On Error Resume Next
'        fAdr = rng.Address
'        Do
'            cRange.Add (rng.Address)
'            Set rng = oWS.Cells.FindNext(rng)
'        Loop Until rng Is Nothing Or rng.Address = fAdr
'
'        Dim r As Variant
'        For Each r In cRange
'            On Error GoTo SetAsText
'            Call Range(r).Replace("=*!Q_KingData", "=Q_KingData", xlPart, MatchCase:=False)
'            Call Range(r).Replace("'L*data sheet'!", "'data sheet'!", xlPart, MatchCase:=False)
'            GoTo Replaced
'SetAsText:
'            Range(r).Value = "'" & Range(r).FormulaR1C1
'Replaced:
'        Next
'    End If

'    oWS.Cells.Replace What:="=*!Q_KingData", Replacement:="=Q_KingData", _
'        LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:= _
'        False, ReplaceFormat:=False
'
'    oWS.Cells.Replace What:="'L*data sheet'!", Replacement:="'data sheet'!", _
'        LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:= _
'        False, ReplaceFormat:=False


'    Dim sht As Worksheet
    Dim fndList As Variant
    Dim rplcList As Variant
    Dim x As Long
    
    fndList = Array("=*!Q_KingData", "'L*data sheet'!")
    rplcList = Array("=Q_KingData", "'data sheet'!")

    'Loop through each item in Array lists
  For x = LBound(fndList) To UBound(fndList)
    'Loop through each worksheet in ActiveWorkbook
      'For Each sht In ActiveWorkbook.Worksheets
        oWS.Cells.Replace What:=fndList(x), Replacement:=rplcList(x), _
          LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
          SearchFormat:=False, ReplaceFormat:=False
      'Next sht
  
  Next x

End Sub


Private Function CheckLinks(oWB As Excel.Workbook) As String

    Dim aLinks As Variant
    aLinks = oWB.LinkSources(xlExcelLinks)
    If Not IsEmpty(aLinks) Then
        Dim i As Integer
        For i = 1 To UBound(aLinks)
            CheckLinks = CheckLinks & vbCr & aLinks(i)
        Next i
    End If

End Function

Sub CleanUp()
    Set aWB = Nothing
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

Sub ReplaceOnAction(oWS As Worksheet)

    Dim oShape As Shape
    Dim aString As String
    Dim iEx As Integer
    
    For Each oShape In oWS.Shapes
        If oShape.OnAction <> "" Then
            Debug.Print oShape.Name
            aString = oShape.OnAction
            
            iEx = InStr(aString, "!")
            
            If iEx <> 0 Then
               oShape.OnAction = Mid(aString, iEx + 1, Len(aString) - iEx)
            End If
                        
            Debug.Print oShape.OnAction
        End If
    Next

End Sub

Attribute VB_Name = "uPrintLoisOptions"
Attribute VB_Base = "0{16D1E688-C24B-4D51-98A1-8B0B8C66EBF6}{11FA4526-A0C5-4D5D-82F3-4B26350DEBFA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub CommandButton1_Click()
       
    Dim ePrint As PrintEnum
       
    If OptionButton1.Value Then
        ePrint = PrintEnum.P_ViewB
    ElseIf OptionButton3.Value Then
        ePrint = PrintEnum.P_ViewAViewB
    Else
        ePrint = PrintEnum.P_ViewUser
    End If
              
    Dim eWOcolor As WOcolorEnum
    
    If OptionButton4.Value Then
        eWOcolor = C_Blue
    ElseIf OptionButton5.Value Then
        eWOcolor = C_Orange
    Else
        eWOcolor = C_White
    End If
              
    Unload Me

    Call PrintHardCopy(ePrint, eWOcolor, chkPreviewPrint.Value, Me.BluePrinter, Me.OrangePrinter, Me.WhitePrinter)
                
End Sub

Private Sub CommandButton2_Click()
    End
End Sub

Private Sub UserForm_Activate()
    LoadPrinters
    

End Sub

Public Sub LoadPrinters()
    Dim MyPrinters As Collection
    Dim CurrentPrinter As String
    Dim pName As Variant
    Dim pNo As Integer
    Me.BluePrinter.Clear
    Me.OrangePrinter.Clear
    Me.WhitePrinter.Clear
    
    Set MyPrinters = PrinterList()
    CurrentPrinter = Application.ActivePrinter
    For pNo = 1 To MyPrinters.Count
        BluePrinter.AddItem (MyPrinters.Item(pNo))
        OrangePrinter.AddItem (MyPrinters.Item(pNo))
        WhitePrinter.AddItem (MyPrinters.Item(pNo))
    Next pNo
    BluePrinter = CurrentPrinter
    OrangePrinter = CurrentPrinter
    WhitePrinter = CurrentPrinter
    For Each pName In BluePrinter.List
        If InStr(1, "Blue", pName) > 0 Then
            BluePrinter = pName
            Exit For
        End If
    Next pName
    For Each pName In OrangePrinter.List
        If InStr(1, "Orange", pName) > 0 Then
            OrangePrinter = pName
            Exit For
        End If
    Next pName
    For Each pName In WhitePrinter.List
        If InStr(1, "White", pName) > 0 Then
            WhitePrinter = pName
            Exit For
        End If
    Next pName
End Sub


INQUEST-PP=macro
