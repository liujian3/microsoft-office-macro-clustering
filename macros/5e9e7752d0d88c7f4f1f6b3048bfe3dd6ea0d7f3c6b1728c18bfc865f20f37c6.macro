Attribute VB_Name = "SWS_Contents"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation.


Option Explicit
Private Sub Worksheet_Activate()

' * ' Initialize
      On Error Resume Next
      
      Me.DisplayPageBreaks = False
      
   '  ActiveWindow.DisplayHeadings = True


ES: ' End of Sub
   '  Me.Protect UserInterfaceOnly:=True

End Sub
Private Sub Worksheet_Deactivate()

' * ' Initialize
      On Error Resume Next
      
      Me.DisplayPageBreaks = False
      

ES: ' End of Sub
   '  Me.Protect UserInterfaceOnly:=True

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation.


' Module level constant for development purpose
  Private Const Module_DebugPrint As Boolean = False

Option Explicit
Private Sub Workbook_Open()

' * ' Initialize
      On Error Resume Next

      If ThisWorkbook.Path Like "http*" Then
            Application.DisplayAlerts = False
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then
                  If MsgBox("Denne regnearksfil skal gemmes p|fffd| computeren f|fffd|r regnearksfilen kan benyttes." & vbNewLine & vbNewLine & "Gem regnearksfilen nu?", vbYesNo + vbExclamation) = vbNo Then ThisWorkbook.Close SaveChanges:=False
            Else
                  If MsgBox("This workbook must be saved before using it." & vbNewLine & vbNewLine & "Save it now?.", vbYesNo + vbExclamation) = vbYes Then ThisWorkbook.Close SaveChanges:=False
            End If
            ThisWorkbook.Save
      End If

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .CellDragAndDrop = True
            .AskToUpdateLinks = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False         ' Won't work in XL2007 or earlier
            .IgnoreRemoteRequests = False
            .Calculation = xlCalculationManual
      End With
      ThisWorkbook.UpdateRemoteReferences = True
      ThisWorkbook.UpdateLinks = xlUpdateLinksAlways


' * ' Define variable
      Dim Language As String
      Language = Application.Run("LOCEA")       ' Requires EXCELGAARD's 'LOCEA' function to be available/installed
      If Language = vbNullString Then
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then Language = "Danish"
      End If

      Dim QuitFlag As Boolean
      QuitFlag = False


' * ' Workbook specific
      Call Resetup
      SWS_Contents.Select


' * ' Version warning
      If xlRelease("Version") < xlExcel2010 Then
            QuitFlag = True
            Application.Cursor = xlDefault
            Application.ScreenUpdating = True
            Select Case Language
                  Case "Danish":    MsgBox "Denne Excel fil kr|fffd|ver mindst Excel 2013 eller nyere, og vil IKKE virke med " & xlRelease & " eller |fffd|ldre versioner!" & vbNewLine & vbNewLine & "Opdater din Excel f|fffd|r du benytter denne Excel fil!", vbOKOnly + vbCritical
                  Case Else:        MsgBox "This Excel workbook requires Excel 2013 or newer, and will NOT work with " & xlRelease & " or older versions!" & vbNewLine & vbNewLine & "Update your Excel before using this Excel workbook!", vbOKOnly + vbCritical
            End Select
      ElseIf xlRelease("Version") < xlExcel2013 Then
            QuitFlag = False
            Application.Cursor = xlDefault
            Application.ScreenUpdating = True
            Select Case Language
                  Case "Danish":    MsgBox "Denne Excel fil kr|fffd|ver mindst Excel 2013 eller nyere!" & vbNewLine & vbNewLine & "N|fffd|r dette s|fffd| er sagt, s|fffd| er der en rimelig sandsynlighed for at Excel filen m|fffd|ske ogs|fffd| vil virke med " & xlRelease & ", da denne version er relativ kompatibel." & vbNewLine & vbNewLine & "Men, virker det ikke, s|fffd| skal du opdater din Excel f|fffd|r du benytter denne Excel fil!", vbOKOnly + vbExclamation
                  Case Else:        MsgBox "This Excel workbook requires at least Excel 2013 or newer!" & vbNewLine & vbNewLine & "However, there a good chance that the workbook will work with " & xlRelease & ", since this version of Excel is relative compatible." & vbNewLine & vbNewLine & "But, if it doesn't work, you must update your Excel before using this workbook!", vbOKOnly + vbExclamation
            End Select
      End If


ES: ' End of Sub
      With Application
            .ExecuteExcel4Macro "SHOW.TOOLBAR(""Ribbon"",True)"
            .Calculation = xlCalculationAutomatic
            .CommandBars("Column").Enabled = True
            .CommandBars("Cell").Enabled = True
            .CommandBars("Row").Enabled = True
            .CommandBars("Ply").Enabled = True
            .EnableCancelKey = xlInterrupt
            .ScreenUpdating = True
            .DisplayAlerts = Not (QuitFlag)
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With

      If QuitFlag = False Then
            Application.OnTime Now + TimeSerial(0, 0, 1), "ThisWorkbook.Workbook_Saved"
      Else
            ThisWorkbook.Saved = True           ' In case that volatile functions are in use...
            If Workbooks.Count < 2 Then
                  Application.Quit
            Else
                  ThisWorkbook.Close SaveChanges:=False
            End If
      End If

End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

' * ' Initialize
      On Error Resume Next

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False         ' Won't work in XL2007 or earlier
            .Calculation = xlCalculationManual
      End With


' * ' Allways save in English
      Call Resetup(True)


ES: ' End of Sub
      Application.EnableEvents = True

End Sub
Private Sub Workbook_AfterSave(ByVal Success As Boolean)

' * ' Initialize
      On Error Resume Next


' * ' Reset to other language than English, if needed
      Call Resetup


ES: ' End of Sub
      With Application
            .Calculation = xlCalculationAutomatic
            .EnableCancelKey = xlInterrupt
            .ScreenUpdating = True
            .DisplayAlerts = True
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With

    ' Application.OnTime Now + TimeSerial(0, 0, 1), "ThisWorkbook.Workbook_Saved"

End Sub
Private Sub Workbook_Saved(Optional Dont_Activate_Custom_Ribbon As Boolean = False)

' * ' Initialize
      On Error Resume Next
      
      
' * ' Define variables
      If Custom_Ribbon_Visible = False Then Dont_Activate_Custom_Ribbon = True


' * ' Active ribbon
      If Dont_Activate_Custom_Ribbon = False Then Application.Run "EXCELGAARD_RibbonX_ActivateControl", "Tab_EXCELGAARD"


ES: ' End of Sub
      ThisWorkbook.Saved = True

End Sub
Attribute VB_Name = "UDF_LoadURLPicture"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation

' Workbook MUST have reference to 'OLE Automation' library


' User data types
  Private Type GUID                                                                       ' Declare a UDT to store a GUID for the IPicture OLE Interface
      Data1 As Long
      Data2 As Integer
      Data3 As Integer
      Data4(0 To 7) As Byte
  End Type

 #If VBA7 Then
      Private Type BitmapInfo                                                             ' User DataType to store the bitmap information
            Size As Long
            Type As Long
            PictureHandle As LongPtr
            PaletteHandle As LongPtr
      End Type

      Private Type GDIStartupInfo                                                         ' Declare a UDT to store the GDI+ Startup information
            GDIPlusVersion           As Long
            DebugEventCallback       As LongPtr
            SuppressBackgroundThread As Long
            SuppressExternalCodecs   As Long
      End Type
 #Else
      Private Type BitmapInfo                                                             ' User DataType to store the bitmap information
            Size As Long
            Type As Long
            PictureHandle As Long
            PaletteHandle As Long
      End Type

      Private Type GDIStartupInfo                                                         ' Declare a UDT to store the GDI+ Startup information
            GDIPlusVersion           As Long
            DebugEventCallback       As Long
            SuppressBackgroundThread As Long
            SuppressExternalCodecs   As Long
      End Type
 #End If

' API calls
 #If VBA7 Then
      Private Declare PtrSafe Sub GdiplusShutdown Lib "GDIPlus" (ByVal Token As LongPtr)
      Private Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As LongPtr) As Long
      Private Declare PtrSafe Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal Filename As LongPtr, Bitmap As LongPtr) As Long
      Private Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal Bitmap As LongPtr, ReturnValue As LongPtr, ByVal Background As LongPtr) As Long
      Private Declare PtrSafe Function GdiplusStartup Lib "GDIPlus" (Token As LongPtr, InputBuffer As GDIStartupInfo, Optional ByVal OutputBuffer As LongPtr = 0) As Long
      
      Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As BitmapInfo, RefIID As GUID, ByVal PictureHandle As Long, IPic As IPicture) As Long
      
      Private Declare PtrSafe Function MakeDIRs Lib "ImageHLP.DLL" Alias "MakeSureDirectoryPathExists" (ByVal lpPath As String) As Long
      Private Declare PtrSafe Function DownloadURLToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal Caller As Long, ByVal SourceURL As String, ByVal DestinationFile As String, ByVal GetURL As Long, ByVal CB As Long) As Long
 
      Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
      Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long
      Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long
      Private Declare PtrSafe Function OpenClipboard Lib "user32" (Optional ByVal hwnd As Long = 0) As Long
 #Else
      Private Declare Sub GdiplusShutdown Lib "GDIPlus" (ByVal Token As Long)
      Private Declare Function GdipDisposeImage Lib "GDIPlus" (ByVal Image As Long) As Long
      Private Declare Function GdipCreateBitmapFromFile Lib "GDIPlus" (ByVal Filename As Long, Bitmap As Long) As Long
      Private Declare Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal Bitmap As Long, ReturnValue As Long, ByVal Background As Long) As Long
      Private Declare Function GdiplusStartup Lib "GDIPlus" (Token As Long, InputBuffer As GDIStartupInfo, Optional ByVal OutputBuffer As Long = 0) As Long
      Private Declare Function OleCreatePictureIndirect Lib "oleaut32" (PicDesc As BitmapInfo, RefIID As GUID, ByVal PictureHandle As Long, IPic As IPicture) As Long
      
      Private Declare Function MakeDIRs Lib "ImageHLP.DLL" Alias "MakeSureDirectoryPathExists" (ByVal lpPath As String) As Long
      Private Declare Function DownloadURLToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal Caller As Long, ByVal SourceURL As String, ByVal DestinationFile As String, ByVal GetURL As Long, ByVal CB As Long) As Long
 
      Private Declare Function CloseClipboard Lib "user32" () As Long
      Private Declare Function EmptyClipboard Lib "user32" () As Long
      Private Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long
      Private Declare Function OpenClipboard Lib "user32" (Optional ByVal hwnd As Long = 0) As Long
 #End If

Option Private Module   ' To prevent the function(s) from appearing the worksheet list of functions (it's a 'for macros only' function)
Option Explicit
Function LoadURLPicture(ByVal PictureFullURL As String, Optional ForceFetch As Boolean = False) As Variant

' The purpose of this function is to insert pictures directly into either UserForms or as icons in the Ribbon
'
' The 'OLE Library' already has a function for this, called 'LoadPicture', but that function will only allow you to insert pictures
' into UserForms from a local path.
'
' This function, 'LoadURLPicture', will not only allow you to also insert pictures as icons into the ribbon, but also allow you to
' fetch those pictures either directly from an URL on your Intranet or from the Internet, and will also work with UNC-paths (\\).
'
' And, as an extra added bonus the function will also give you the opportunity to use a huge collection of predesigned user icons for
' either your UserForm or in your ribbons - read more about all this at  www.EXCELGAARD.dk
'
' Finally you can use the good old FaceIDs from the menus and toolbars.
' All you have to do is to pass the picture argument with the prefix of "FaceID", and then the number of the FaceID.
'
' Examples: Set MyPicture  =  LoadURLPicture("http://www.EXCELGAARD.dk/Files/Sample Logo File.GIF")   ' Load picture into variable from Internet
'           Set MyPicture  =  LoadURLPicture("C:\Pictures\MyPicture.JPG")                             ' Load picture into variable from local path
'           Set MyPicture  =  LoadURLPicture("uiEXCELGAARD")                                          ' Use one of the custom icons of the function (.PNG - transparent background))
'           Image1.Picture =  LoadURLPicture("uiEXCELGAARD.BMP")                                      ' Use one of the custom icons in an UserForm  (.BMP - grey background))
'           Image1.Picture =  LoadURLPicture("FaceID 1234")                                           ' Use one of the FaceIDs in an UserForm
'
'           Sub RibbonX_GetImage(RibCTRL As IRibbonControl, ByRef Item_Image)                         ' \
'                                                                                                     '  \
'                 Set Item_Image = LoadURLPicture("uiEXCELGAARD")                                     '   \
'                 Set Item_Image = LoadURLPicture("FaceID 1234")                                      '    > Callback procedure for using the function to provide icons to the Ribbon
'                 Set Item_Image = LoadURLPicture("C:\MyIcons\MyIcon.PNG")                            '   /
'                                                                                                     '  /
'           End Sub                                                                                   ' /
'
' Notice:   The FaceIDs are original only 16 |fffd| 16 pixels in sixe, so you should probably not use these with too much enlargement :-)


' * ' Initialize
      If Replace(PictureFullURL, " ", vbNullString) = vbNullString Then Exit Function     ' Empty string passed = no picture to fetch

      On Error Resume Next


' * ' Local path and filename of last fetched picture
      PictureFullURL = Replace(Replace(Replace(Replace(Replace(Replace(PictureFullURL, "|fffd|", "A"), "|fffd|", "a"), "|fffd|", "O"), "|fffd|", "o"), "|fffd|", "Aa"), "|fffd|", "aa")
      If UCase$(Left$(Replace(PictureFullURL, " ", vbNullString), 4)) = UCase$("Last") Then
            LoadURLPicture = GetSetting("EXCELGARD", "LoadURLPicture", "Last Picture", vbNullString)
            Exit Function
      End If


' * ' Define variables
      Dim FaceID_Number As Long

      Dim SubURL As String
      SubURL = UCase$(Replace(Replace(Replace(Replace(Replace(Replace(PictureFullURL, ".", vbNullString), ",", vbNullString), "-", vbNullString), ":", vbNullString), "=", vbNullString), " ", vbNullString))
      If Left$(SubURL, 6) = "FACEID" Then
            SubURL = Replace(SubURL, "FACEID", vbNullString)
            FaceID_Number = Val(SubURL)
            If FaceID_Number < 1 Then FaceID_Number = 0
      End If

      SubURL = vbNullString
      If InStrRev(PictureFullURL, "/") < 1 Then                                           ' No URL separator and...
      If InStrRev(PictureFullURL, "\") < 1 Then                                           ' ...no path separator either = we've requested one of the  online icons
            If UCase$(Left$(PictureFullURL, 7)) = UCase$("msoIcon") Then
                  PictureFullURL = "msoIcon" & WorksheetFunction.Proper(Replace(Replace(UCase$(PictureFullURL), UCase$("msoIcon"), vbNullString), UCase$("Alert"), "Alert"))
            Else
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("ms") Then PictureFullURL = "ms" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("ui") Then PictureFullURL = "ui" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("vb") Then PictureFullURL = "vb" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
                  If LCase$(Left$(PictureFullURL, 2)) = LCase("xl") Then PictureFullURL = "xl" & UCase$(Mid$(PictureFullURL, 3, 1)) & LCase$(Mid$(PictureFullURL, 4))
            End If

            Select Case Left$(PictureFullURL, 2)
                  Case "ms":  SubURL = "Assistant"
                  Case "vb":  SubURL = "MsgBox"
                  Case "xl":  SubURL = "RibbonX"
                  Case "ui":  SubURL = "User"
            End Select
            PictureFullURL = "http://www.EXCELGAARD.dk/Files/Icons/" & SubURL & "/" & PictureFullURL

            If UCase$(Right$(PictureFullURL, 4)) <> ".BMP" And UCase$(Right$(PictureFullURL, 4)) <> ".GIF" And UCase$(Right$(PictureFullURL, 4)) <> ".PNG" Then
                  PictureFullURL = PictureFullURL & ".BMP"                          ' Default icon format is .BMP - use .PNG, if inserting icon into the ribbon
            Else
                  PictureFullURL = Left$(PictureFullURL, InStrRev(PictureFullURL, ".")) & UCase$(Mid$(PictureFullURL, InStrRev(PictureFullURL, ".") + 1))
            End If
      End If
      End If

      Dim PictureFormatOK As Boolean
      Select Case UCase$(Mid$(PictureFullURL, InStrRev(PictureFullURL, ".")))       ' Test if picture is of one of the allowed formats in a UserForm
            Case ".BMP":      PictureFormatOK = True
            Case ".CUR":      PictureFormatOK = True
            Case ".DB":       PictureFormatOK = True
            Case ".EMF":      PictureFormatOK = True
            Case ".ICO":      PictureFormatOK = True
            Case ".GIF":      PictureFormatOK = True
            Case ".JPG":      PictureFormatOK = True
            Case ".JPEG":     PictureFormatOK = True
            Case ".PNG":      PictureFormatOK = True                                ' For Ribbons, but not for UserForms
            Case ".WMF":      PictureFormatOK = True
            Case Else:        PictureFormatOK = False
      End Select
      If PictureFormatOK = False And FaceID_Number < 1 Then Exit Function

      Dim HTTP As Object
      Set HTTP = CreateObject("MSXML2.XMLHTTP")

      Dim Path_Temp As String                                                       ' Local Temp Path
      Path_Temp = Application.Run("GetSpecialFolder", 23)                           ' It is recommended to use EXCELGAARD's 'GetSpecialFolder' function
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = Environ("TMP")
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = Environ("Temp")
      If Replace(Path_Temp, " ", vbNullString) = vbNullString Then Path_Temp = "C:\Temp\"
      If Right$(Path_Temp, 1) <> Application.PathSeparator Then Path_Temp = Path_Temp & Application.PathSeparator
      Path_Temp = Path_Temp & "EXCELGAARD\LoadURLPictures\"
      If Left$(Path_Temp, 1) = "\" And Left$(Path_Temp, 2) <> "\\" Then Path_Temp = "\" & Path_Temp
      SetAttr Path_Temp, vbNormal

      Dim File_Temp As String
      File_Temp = Mid$(PictureFullURL, InStrRev(PictureFullURL, "/") + 1)
      If File_Temp = PictureFullURL Then File_Temp = Mid$(PictureFullURL, InStrRev(PictureFullURL, Application.PathSeparator) + 1)
      If File_Temp = PictureFullURL And FaceID_Number < 1 Then Exit Function

      Dim LocalCopy As Boolean
      LocalCopy = False

     #If VBA7 Then
            Dim Pic_Handle As LongPtr
     #Else
            Dim Pic_Handle As Long
     #End If


' * ' The image requested is one of the good old FaceIDs :-)
      If FaceID_Number > 0 Then
            Dim CB As CommandBarControl
            Set CB = CommandBars.Add(Position:=msoBarFloating, MenuBar:=False, temporary:=True).Controls.Add(Type:=msoControlButton, temporary:=True)
            
            CB.FaceId = FaceID_Number
            CB.CopyFace

            OpenClipboard
            Pic_Handle = GetClipboardData(2)
            CloseClipboard
            
            Set LoadURLPicture = CreateIPictureObject(Pic_Handle)
            
            CB.Delete
            Set CB = Nothing
            
            GoTo EF:
      End If


' * ' Make sure local path exists before downloading
      MakeDIRs Path_Temp
      SetAttr Path_Temp, vbNormal
      If Dir(Left$(Path_Temp, InStrRev(Path_Temp, Application.PathSeparator) - 1), vbDirectory + vbHidden + vbSystem) = vbNullString Then Exit Function


' * ' We have requested a local file (like with the normal 'LoadPicture')
      If Mid$(PictureFullURL, 2, 2) = ":\" Then
            If Dir(PictureFullURL, vbHidden + vbNormal + vbReadOnly + vbSystem) <> vbNullString Then
                  SetAttr Path_Temp & File_Temp, vbNormal
                  Kill Path_Temp & File_Temp
                  FileCopy PictureFullURL, Path_Temp & File_Temp
                  GoTo EF:
            Else
                  If Dir(Path_Temp & File_Temp, vbNormal + vbHidden + vbReadOnly + vbSystem) <> vbNullString Then GoTo EF:
                  Exit Function
            End If
      End If


' * ' Does a local copy already exists?
      If Dir(Path_Temp & File_Temp, vbNormal + vbHidden + vbReadOnly + vbSystem) <> vbNullString Then
            LocalCopy = True
            If ForceFetch = False Then
                  GoTo EF:
            Else
                  SetAttr Path_Temp & File_Temp, vbNormal
                  Name Path_Temp & File_Temp As Path_Temp & "OLD-" & File_Temp      ' Rename as old file, but keep in case online fetching fails
            End If
      End If


' * ' Clear internet cache
      If ForceFetch = True Then
            Shell "RunDLL32.EXE InetCpl.cpl,ClearMyTracksByProcess 8"               ' Clear Internet cache so we truly fetch, and not just fetch a cached version of the picture
            Application.Wait Now + TimeSerial(0, 0, 3)                              ' Give process time to empty internet cache
      End If


' * ' Test if HTTP URL exists
      HTTP.Open "HEAD", PictureFullURL, False
      HTTP.Send
      PictureFormatOK = (HTTP.Status = 200)                                         ' Re-use of variable
      If PictureFormatOK = False And LocalCopy = False Then Exit Function


' * ' No online file was found, but we have a local copy
      If PictureFormatOK = False And LocalCopy = True Then
            Name Path_Temp & "OLD-" & File_Temp As Path_Temp & File_Temp            ' Rename old file back
            GoTo EF:
      End If


' * ' Now we're (finally :-) going to fetch file online
      PictureFormatOK = DownloadURLToFile(0, PictureFullURL, Path_Temp & File_Temp, 16, 0) = 0


' * ' Man!  Even with all our tests, something went wrong anyway!!!
      If PictureFormatOK = False Then
            If LocalCopy = True Then
                  Name Path_Temp & "OLD-" & File_Temp As Path_Temp & File_Temp      ' Rename old file back
            Else
                  Exit Function
            End If
      End If


EF: ' End of Function
      Set HTTP = Nothing
      
      If FaceID_Number < 1 Then
            SetAttr Path_Temp & "OLD-" & File_Temp, vbNormal
            Kill Path_Temp & "OLD-" & File_Temp                                           ' Kill old file
            SetAttr Path_Temp, vbHidden + vbSystem

            SaveSetting "EXCELGAARD", "LoadURLPicture", "Last Picture", Path_Temp & File_Temp
      
            Set LoadURLPicture = LoadPictureGDI(Path_Temp & File_Temp)                    ' Requires reference to 'OLE Automation'
      Else
          ' Application.OnTime Now + TimeSerial(0, 0, 1), " ClearFaceIDFromClipBoard"
      End If

      Err.Clear

End Function
Private Function LoadPictureGDI(ByVal FileFullName As String) As IPicture

' * ' Initialize
      On Error Resume Next

      If Dir(FileFullName, vbHidden + vbSystem) = vbNullString Then Exit Function   ' File not found


' * ' Define variables
      Dim TestValue As Long
      Dim GDI_Input As GDIStartupInfo

     #If VBA7 Then
            Dim GDI_Bitmap As LongPtr
            Dim GDI_Handle As LongPtr
            Dim Pic_Handle As LongPtr
     #Else
            Dim GDI_Bitmap As Long
            Dim GDI_Handle As Long
            Dim Pic_Handle As Long
     #End If


' * ' Initialize GDI+
      GDI_Input.GDIPlusVersion = 1
      TestValue = GdiplusStartup(GDI_Handle, GDI_Input)
      If TestValue <> 0 Then Exit Function                                          ' GDI could not be initialized


' * ' Load the image
      TestValue = GdipCreateBitmapFromFile(StrPtr(FileFullName), GDI_Bitmap)
      If TestValue <> 0 Then Exit Function                                          ' Wrong filetype
           
           
' * ' Create a bitmap handle from the GDI image
      GdipCreateHBITMAPFromBitmap GDI_Bitmap, Pic_Handle, 0


EF: ' End of Function
      Set LoadPictureGDI = CreateIPictureObject(Pic_Handle)                         ' Create the IPicture object from the bitmap handle

      GdipDisposeImage GDI_Bitmap
      GdiplusShutdown GDI_Handle

End Function
Private Function CreateIPictureObject(ByVal PictureHandle As Variant) As IPicture

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Interface_GUID As GUID                                                    ' User Defined DataType
      Dim IPictureObject As IPicture                                                ' Requires reference to 'OLE Automation'
      Dim Pic_BitmapInfo As BitmapInfo                                              ' User Defined DataType


' * ' Create the Interface GUID (for the IPicture interface)
      With Interface_GUID
            .Data1 = 2079852928
            .Data2 = -16590
            .Data3 = 4122
            .Data4(0) = 139
            .Data4(1) = 187
            .Data4(2) = 0
            .Data4(3) = 170
            .Data4(4) = 0
            .Data4(5) = 48
            .Data4(6) = 12
            .Data4(7) = 171
      End With


' * ' Fill Pic_BitmapInfo with data for picture
      With Pic_BitmapInfo
            .Size = Len(Pic_BitmapInfo)                                             ' Size of picture
            .Type = 1                                                               ' Type of picture (Bitmap)
            .PictureHandle = PictureHandle                                          ' Handle to picture
            .PaletteHandle = 0                                                      ' Handle to palette (if bitmap)
      End With


' * ' Create the Picture object.
      OleCreatePictureIndirect Pic_BitmapInfo, Interface_GUID, True, IPictureObject


EF: ' End of Function
      Set CreateIPictureObject = IPictureObject                                     ' Return the new IPicture object
      Set IPictureObject = Nothing

End Function
Private Function ClearFaceIDFromClipBoard()

' Hopefully it doesn't come as a big surprise that this little function clears the Windows Clipboard :-)


      On Error Resume Next
      
      Application.CutCopyMode = False
      
      OpenClipboard
      EmptyClipboard
      CloseClipboard

End Function
Attribute VB_Name = "UDF_xlRelease"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation


' Public constants for the releases
  Public Const xlExcel5    As Long = 5    ' We start from Excel 5, since Excel prior to that version didn't have VBA
  Public Const xlExcel95   As Long = 7
  Public Const xlExcel97   As Long = 8
  Public Const xlExcel2000 As Long = 9
  Public Const xlExcelXP   As Long = 10
  Public Const xlExcel2003 As Long = 11
  Public Const xlExcel2007 As Long = 12
  Public Const xlExcel2010 As Long = 14
  Public Const xlExcel2013 As Long = 15
  Public Const xlExcel2016 As Long = 16

' Module leves constant
  Private Const xlRelease_DataBaseSaveName As String = "Excel Editions/Releases/Versions"

Option Private Module
Option Explicit
Function xlRelease(Optional ByVal InfoType As String = "Name", Optional ByVal Excel_Version As Long = 0) As Variant

' It is fairly simple to find information about release version of the current Excel in VBA.
' But, I'm lazy...   :-)
'
' So, I devised this little User-Cefined Function (UDF), which acts as a xlConstant, making it even easier to use in your own macros.
'
' Workbook MUST have reference to 'MS Office Object Library'
'
' Some usages of this could be:  If Val(Application.Version) < xlExcel2010 Then...
'                                MsgBox "You must use at least " & xlRelease("Name", xlExcel2010) & " to use this workbook."
'                                MsgBox "You are using " & xlRelease("Name")
'                                If xlRelease("Bit") <> 32 Then ...
'
' Notice, that many of the information are actually fetched from an on-line database.
' The major benefit of using this function/method is that when ever a new version of Excel is released,
' I don't have to change all the codes in all my projects.
' All I have to do is to update the on-line database, and all the rest of my code, that uses the release/version for anything, will work :-)
' But, don't worry - you won't suffer from loss of speed or band width...
' ...the function will save the database locally (in the Registry) for future usage (and also for off-line usage :-)
'
' Currently the function will tell you... xlRelease("Bit")        Bit architeture of Excel  (16-, 32- or 64-bit)
'                                         xlRelease("GUID")       Global Unique ID of Excel (Same as Application.ProductCode)
'                                         xlRelease("Language")   msoLanguageID             (Same as 'Application.LanguageSettings.LanguageID(msoLanguageIDUI)')
'                                         xlRelease("Name")       Name of Excel as string   (Default = You can also just use 'xlRelease')
'                                         xlRelease("Note")       Small description/note/remarks about the edition/release/version
'                                         xlRelease("Version")    Major version number      (Same as 'Val(Application.Version)')
'                                         xlRelease("Year")       Release year              (Release year of Windows edition)

' ' ' Initialize
      On Error Resume Next


' * ' Define variable
      If Excel_Version < 1 Then Excel_Version = Val(Application.Version)
      
      Dim Excel_Bit As Long
      Excel_Bit = 32
      If Excel_Version < 7 Then Excel_Bit = 16
      If Excel_Version >= 14 Then
           #If Win64 Then
                  Excel_Bit = 64
           #End If
      End If


' * ' Fetch database if needed
      If GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Name", vbNullString) = vbNullString And _
         GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Note", vbNullString) = vbNullString And _
         GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Year", vbNullString) = vbNullString Then
          ' Debug.Print "Database for Excel version not fetched yet..."
            Call xlRelease_Fetch
      ElseIf CLng(GetSetting(xlRelease_DataBaseSaveName, "Last Database Update", "Date, Long", 0)) < CLng(Date - 366) Then
          ' Debug.Print "Database more than a year old..."
            Call xlRelease_Fetch
      End If


EF: ' End of Function
      Select Case UCase$(Replace(InfoType, " ", vbNullString))
            Case UCase$("Bit"):           xlRelease = Excel_Bit
            Case UCase$("GUID"):          xlRelease = Application.ProductCode
            Case UCase$("Language"):      xlRelease = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
            Case UCase$("Version"):       xlRelease = Excel_Version
            Case UCase$("Year"):          xlRelease = Val(GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Year", Year(Date)))
            Case UCase$("Note"):          xlRelease = GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Note", vbNullString)
            Case Else:                    xlRelease = GetSetting(xlRelease_DataBaseSaveName, Excel_Version, "Name", vbNullString)
      End Select

End Function
Function xlRelease_Fetch() As Boolean

' This function will fetch a small "database" of Excel releases over the years (actually it is just a small text-file :-)
'
' The "database" will be fetched everytime the 'xlRelease' function encounters a new/unknown version of Excel,
' thus the function needs to go on-line and fetch the database everytime you upgrade your Excel to a new/unknown version,
' hence, the function will probably do this once every 4-5 years - no much bandwidth used for this :-)
'
' The text-file is located at: http://www.EXCELGAARD.dk/Files/Excels.TXT
' ...and, if you're uncertain of its contents, you can download and open it in 'NotePad' first - but it really is totally safe :-)
'
' Once the "database" is downloaded, it is stored in the Windows Registry under the key: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\
' Feel free to take a look at it yourself, to ensure that nothing 'spooky' is going on :-)
'
' Workbook MUST have VB Reference to 'MS WinHTTP Services'


' * ' Initialize
      Const URL As String = "http://www.EXCELGAARD.dk/Files/Excels.TXT"

      On Error Resume Next


' * ' Define variables
      Dim DataCounter    As Long
      Dim ExcelsCounter  As Long
      Dim Excels         As Variant
      Dim ExcelsData     As Variant
      Dim ExcelsDatabase As String
      Dim NewestVersion  As Long

      Dim HTTPRequest As Object
      Set HTTPRequest = CreateObject("MSXML2.ServerXMLHTTP")
      If TypeName(HTTPRequest) = "Nothing" Then Set HTTPRequest = CreateObject("WinHttp.WinHttpRequest.5.1")
    ' Dim HTTPRequest    As New WinHttpRequest
      If TypeName(HTTPRequest) = "Nothing" Then GoTo EF:


' * ' Fetch database
      With HTTPRequest
            .Option(0) = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"
            .Open "GET", URL, False
            .Send
         If .Status = 200 Then
            ExcelsDatabase = .ResponseText
            xlRelease_Fetch = True
         Else
            xlRelease_Fetch = False
            GoTo EF:
         End If
      End With


' * ' Substract and save information
      ExcelsDatabase = Replace(Replace(ExcelsDatabase, vbNewLine, vbLf), vbCr, vbLf)
      Excels = Split(ExcelsDatabase, vbLf)
      For ExcelsCounter = LBound(Excels) To UBound(Excels)
            If InStr(1, Excels(ExcelsCounter), "|") > 1 Then
                  ExcelsData = Split(Excels(ExcelsCounter), "|")
                  ExcelsData(0) = Replace(Replace(Replace(ExcelsData(0), " ", vbNullString), "|", vbNullString), vbLf, vbNullString)
                  ExcelsData(1) = WorksheetFunction.Trim(Replace(Replace(ExcelsData(1), "|", vbNullString), vbLf, vbNullString))
                  ExcelsData(2) = Replace(Replace(Replace(ExcelsData(2), " ", vbNullString), "|", vbNullString), vbLf, vbNullString)
                  ExcelsData(3) = WorksheetFunction.Trim(Replace(Replace(Replace(ExcelsData(3), vbLf, vbNullString), "|", vbNullString), ".  ", vbNewLine))
      
                  If Val(ExcelsData(0)) > 0 Then
                        NewestVersion = WorksheetFunction.Max(NewestVersion, Val(ExcelsData(0)))
                        If Len(ExcelsData(1)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Name", ExcelsData(1)
                        If Len(ExcelsData(2)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Year", ExcelsData(2)
                        If Len(ExcelsData(3)) > 0 Then SaveSetting xlRelease_DataBaseSaveName, ExcelsData(0), "Note", ExcelsData(3)
                  End If
            End If
      Next
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Date", Format(Date, "dd.mm.yyyy")
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Date, Long", CLng(Date)
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Source", URL
      SaveSetting xlRelease_DataBaseSaveName, "Last Database Update", "Newest Version", NewestVersion


EF: ' End of Function
      If IsArray(Excels) Then Erase Excels
      If IsArray(ExcelsData) Then Erase ExcelsData

      Set HTTPRequest = Nothing

End Function
Sub xlRelease_Fetch_Now()

' Hit [F5] with the cursor placed in this macro to run the macro
'
' This small macro just force a fetch of the on-line "database" - for more info, take a look at the function 'xlRelease_Fetch' above.


' * ' Initialize
      Const DefaultKeyToOpenAt As String = "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & xlRelease_DataBaseSaveName

      On Error Resume Next


' * ' Define variables
      Dim WSH As Object                         ' Windows Script Host
      Set WSH = CreateObject("WScript.Shell")   ' |fffd|       |fffd|      |fffd|

      Dim OpenAtKey As String
      If Len(DefaultKeyToOpenAt) > 0 Then OpenAtKey = CreateObject("Shell.Application").Namespace(17).Self.Name & "\" & DefaultKeyToOpenAt


' * ' Fetch database
      Call xlRelease_Fetch


' * ' Open registry editor
      WSH.RegWrite "HKCU\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit\Lastkey", OpenAtKey, "REG_SZ"
    ' Shell "RegEdit.EXE", vbMaximizedFocus     ' Enable this, if you want to see the fetch database in the Registry


ES: ' End of Sub
      Set WSH = Nothing

End Sub
Sub xlRelease_View_Database_Online()

      On Error Resume Next
      ActiveWorkbook.FollowHyperlink Address:="http://www.EXCELGAARD.dk/Files/Excels.TXT", NewWindow:=True, AddHistory:=False

End Sub
Sub xlRelease_View_Database_Registry()

' This macro will open the "Registry Editor", at the "Database" of the 'xlRelease()' function,
' if you hit [F5] with the cursor placed in this macro.


' * ' Initialize
      Const DefaultKeyToOpenAt As String = "HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & xlRelease_DataBaseSaveName

      On Error Resume Next


' * ' Define variables
      Dim WSH As Object                         ' Windows Script Host
      Set WSH = CreateObject("WScript.Shell")   ' |fffd|       |fffd|      |fffd|

      Dim OpenAtKey As String
      If Len(DefaultKeyToOpenAt) > 0 Then OpenAtKey = CreateObject("Shell.Application").Namespace(17).Self.Name & "\" & DefaultKeyToOpenAt


' * ' Open registry editor
      WSH.RegWrite "HKCU\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit\Lastkey", OpenAtKey, "REG_SZ"
      Shell "RegEdit.EXE", vbMaximizedFocus


ES: ' End of Sub
      Set WSH = Nothing

End Sub
Sub xlRelease_Test()

' Call this macro (or hit [F5] with the cursor placed in this macro) to
' view the information, that can be obtained with the 'xlRelease' function.


' * ' Initialize
      On Error Resume Next


' * ' Define variavles
      Dim Excel_Version As Long
      Excel_Version = Val(Application.Version)
      
      Dim MsgBoxText As String
      MsgBoxText = MsgBoxText & "Name           " & vbTab & ":  " & xlRelease("Name", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Version        " & vbTab & ":  " & xlRelease("Version", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "GUID           " & vbTab & ":  " & xlRelease("GUID", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Language       " & vbTab & ":  " & xlRelease("Language", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Bit            " & vbTab & ":  " & xlRelease("Bit", Excel_Version) & vbNewLine
      MsgBoxText = MsgBoxText & "Year           " & vbTab & ":  " & xlRelease("Year", Excel_Version) & vbNewLine & vbNewLine
      MsgBoxText = MsgBoxText & xlRelease("Note", Excel_Version)

      If xlRelease("Version", Excel_Version) < xlExcel2010 Then
            MsgBoxText = MsgBoxText & vbNewLine & vbNewLine & "Recommendation " & vbTab & ":  " & "Upgrade to at least Excel 2010."
            If xlRelease("Bit", Excel_Version) <> 32 Then
                  MsgBoxText = MsgBoxText & vbNewLine & vbTab & vbTab & "   Make sure you install the 32-bit edition," & vbNewLine & vbTab & vbTab & "   and NOT the 64-bit edition!"
            End If
      ElseIf xlRelease("Bit", Excel_Version) <> 32 Then
            MsgBoxText = MsgBoxText & vbNewLine & vbNewLine & "Recommendation " & vbTab & ":  " & "Uninstall this 64-bit edition of Excel," & vbNewLine & vbTab & vbTab & "   and install the 32-bit edition instead!"
      End If


' * ' Display information about the release
      MsgBox MsgBoxText, vbOKOnly, " Microsoft Excel"

End Sub



Attribute VB_Name = "VBA_Projects_Unlock_Hook"

' (C) Dan Elgaard (www.EXCELGAARD.dk)

' In this module, you'll find the code that will allow you to unloack all current VB Project, by using a so-called 'Hook'.
'
' The code works like this:
'
' What Excel does, when you try to access a password protected VBA project, is to call a system function to create the password dialog box.
' If the user enters the right password and click [OK], the system function returns the value 1 (true).
' If the user enters the wrong password or click [Cancel], the system function returns 0 (false).
' After the dialog box is closed, Excel will check the returned value of the system function, and
' if the returned value is 1 (true), Excel will interpret this as if the password is right - and the locked VBA project will be opened.
'
' The code below swaps the memory of the original function, used to display the password dialog, with a User-Defined Function (UDF),
' which will always return 1 (true) when being called, trickering Excel to treat all VBA projects of all current open workbooks as unlocked.
'
' Just run the macro, 'Unlock_VBA_Projects_Hook', and start exploring the VBA projects in the Visual Basic Editor (VBE).
' The hook should stay active until you close Excel completely (close all open instances of Excel).
'
' The code will work in Excel 2007 and onwards, and should work in both 32-bit and 64-bit editions of Excel.
'
' However, no guarantee is given in anyway - maybe it won't work in future versions of Excel,
'                                          - maybe it wont work in current versions, if Microsoft patches this in a Service Pack or update,
'                                          - maybe the API will change, or the Windows system will counteract this (in the future?)
'
' To put it short: Use at your own risk, and remember always to backup.

' Module level variables
  Dim VBA_Projects_Unlock_Flag                As Boolean
  Dim VBA_Projects_Unlock_HookBytes(0 To 5)   As Byte
  Dim VBA_Projects_Unlock_OriginBytes(0 To 5) As Byte
 
 #If VBA7 And Win64 Then
        Dim VBA_Projects_Unlock_Handle        As LongPtr
 #Else
        Dim VBA_Projects_Unlock_Handle        As Long
 #End If

' API Calls
 #If VBA7 And Win64 Then
      Private Declare PtrSafe Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As LongPtr, Source As LongPtr, ByVal Length As LongPtr)
      Private Declare PtrSafe Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As LongPtr
      Private Declare PtrSafe Function GetProcAddress Lib "kernel32" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr
      Private Declare PtrSafe Function VirtualProtect Lib "kernel32" (lpAddress As LongPtr, ByVal dwSize As LongPtr, ByVal flNewProtect As LongPtr, lpflOldProtect As LongPtr) As LongPtr
      Private Declare PtrSafe Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As LongPtr, ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer
 #Else
      Private Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Long, Source As Long, ByVal Length As Long)
      Private Declare Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As Long
      Private Declare Function GetProcAddress Lib "kernel32" (ByVal hModule As Long, ByVal lpProcName As String) As Long
      Private Declare Function VirtualProtect Lib "kernel32" (lpAddress As Long, ByVal dwSize As Long, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long
      Private Declare Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As Long, ByVal pTemplateName As Long, ByVal hWndParent As Long, ByVal lpDialogFunc As Long, ByVal dwInitParam As Long) As Integer
 #End If

Option Explicit
Sub VBProjects_Unlock_Hook()

' This is the macro to run to apply the hook, thus unlocking all VBA projects

' * ' Initialize
      On Error Resume Next


' * ' Define variable
      Dim MsgBoxAnswer As Long


' * ' Hook the system function
      If VBA_Projects_Unlock_Hook = True Then
            MsgBoxAnswer = MsgBox("All VBA Project(s) will now be unlocked, until you close Excel completely down (close all open Excel instances)." & vbNewLine & vbNewLine & "Open Visual Basic Editor (VBE)?", vbYesNo + vbInformation, " VBA Project")
      Else
          ' MsgBox "No locked VBA projects found!" & vbNewLine & vbNewLine & "(Perhaps you already unlocked them?)", vbOKOnly + vbExclamation, " VBA Project"
      End If


ES: ' End of Sub
      If MsgBoxAnswer = vbYes Then
            With Application.VBE.MainWindow
                  .Visible = True
                  .WindowState = 2                                                                                      ' vbext_ws_Maximize
            End With
      End If

End Sub
Public Function VBA_Projects_Unlock_Hook() As Boolean

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      VBA_Projects_Unlock_Hook = False                                                                                  ' Default value of function

      Dim TmpBytes(0 To 5) As Byte
     #If VBA7 And Win64 Then
            Dim HookPointer      As LongPtr
            Dim OriginProtect    As LongPtr
            Debug.Print "VB Projects Unlock Hook :  Using 64-bit"
     #Else
            Dim HookPointer      As Long
            Dim OriginProtect    As Long
            Debug.Print "VB Projects Unlock Hook :  Using 32-bit"
     #End If
 
      VBA_Projects_Unlock_Handle = GetProcAddress(GetModuleHandleA("user32.dll"), "DialogBoxParamA")                    ' Module level variable


' * ' Perform the hook
      If VirtualProtect(ByVal VBA_Projects_Unlock_Handle, 6, &H40, OriginProtect) <> 0 Then
            MoveMemory ByVal VarPtr(TmpBytes(0)), ByVal VBA_Projects_Unlock_Handle, 6                                   ' API Call
            If TmpBytes(0) <> &H68 Then
                  MoveMemory ByVal VarPtr(VBA_Projects_Unlock_OriginBytes(0)), ByVal VBA_Projects_Unlock_Handle, 6      ' API Call

                  HookPointer = VBA_Projects_Unlock_Pointer(AddressOf VBA_Projects_Unlock_DialogBox_Return_Value)       ' Sub-Function

                  VBA_Projects_Unlock_HookBytes(0) = &H68
                  MoveMemory ByVal VarPtr(VBA_Projects_Unlock_HookBytes(1)), ByVal VarPtr(HookPointer), 4               ' API Call
                  VBA_Projects_Unlock_HookBytes(5) = &HC3

                  MoveMemory ByVal VBA_Projects_Unlock_Handle, ByVal VarPtr(VBA_Projects_Unlock_HookBytes(0)), 6        ' API Call
                  VBA_Projects_Unlock_Flag = True
                  VBA_Projects_Unlock_Hook = True
            End If
      End If

End Function
Private Sub VBA_Projects_Unlock_Recover_Bytes()

      On Error Resume Next
      If VBA_Projects_Unlock_Flag = True Then MoveMemory ByVal VBA_Projects_Unlock_Handle, ByVal VarPtr(VBA_Projects_Unlock_OriginBytes(0)), 6

End Sub
 
' Below are the same two functions twice: One version for 32-bit (using 'Long' variables), and one verson for 64-bit (Using 'LongPtr' variables).
 
 #If VBA7 And Win64 Then
      Private Function VBA_Projects_Unlock_DialogBox_Return_Value(ByVal hInstance As LongPtr, ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer
      
            On Error Resume Next
            If pTemplateName = 4070 Then
                  VBA_Projects_Unlock_DialogBox_Return_Value = 1                                                              ' Trick Excel into 'thinking' the VBA project in unlocked
            Else
                  VBA_Projects_Unlock_Recover_Bytes
                  VBA_Projects_Unlock_DialogBox_Return_Value = DialogBoxParam(hInstance, pTemplateName, hWndParent, lpDialogFunc, dwInitParam)
                  VBA_Projects_Unlock_Hook
            End If
      
      End Function
      Private Function VBA_Projects_Unlock_Pointer(ByVal HookPointerValue As LongPtr) As LongPtr
      
            On Error Resume Next
            VBA_Projects_Unlock_Pointer = HookPointerValue
      
      End Function
 #Else
      Private Function VBA_Projects_Unlock_DialogBox_Return_Value(ByVal hInstance As Long, ByVal pTemplateName As Long, ByVal hWndParent As Long, ByVal lpDialogFunc As Long, ByVal dwInitParam As Long) As Integer
      
            On Error Resume Next
            If pTemplateName = 4070 Then
                  VBA_Projects_Unlock_DialogBox_Return_Value = 1                                                              ' Trick Excel into 'thinking' the VBA project in unlocked
            Else
                  VBA_Projects_Unlock_Recover_Bytes
                  VBA_Projects_Unlock_DialogBox_Return_Value = DialogBoxParam(hInstance, pTemplateName, hWndParent, lpDialogFunc, dwInitParam)
                  VBA_Projects_Unlock_Hook
            End If
      
      End Function
      Private Function VBA_Projects_Unlock_Pointer(ByVal HookPointerValue As Long) As Long
      
            On Error Resume Next
            VBA_Projects_Unlock_Pointer = HookPointerValue
      
      End Function
 #End If

Attribute VB_Name = "VBA_Resetup"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation


' Purpose of the macros in this module is to resetup the sheet(s) in this workbook, in case the user have corrupted the sheet(s) by mistake.
'
' Secondary, the macros will also change the language of the contents in the sheet(s) between Danish or English.
' Danish is my native language, so that why I have that language as secondary language (default/main language is always English).
'
' The macros are made as a kind of 'standard' setup, so i more or less can use the macros in all my projects - the main difference
' is in the main macro, called 'Resetup', where I create project/workbook specific contents/example/info...
'
' The rest of the macros are sub-macros to the main macro, 'Resetup', which is the one to be called (from Ribbon or other macros).


' Module level variable
  Private UseEnglishFlag As Boolean

Option Private Module
Option Explicit
Sub Resetup(Optional UseEnglish As Boolean = False)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      On Error Resume Next

      ThisWorkbook.Unprotect                          ' Just in case :-)

      ActiveSheet.DisplayPageBreaks = False
      With Application
            .Cursor = xlWait
            .EnableEvents = False
            .FormulaBarHeight = 1
            .DisplayAlerts = False
            .ScreenUpdating = False
            .CellDragAndDrop = True
            .AskToUpdateLinks = False
            .WindowState = xlMaximized
          ' .PrintCommunication = False               ' Won't work in XL2007 or earlier
            .IgnoreRemoteRequests = False
            .Calculation = xlCalculationManual
      End With


' * ' Define variable
      UseEnglishFlag = UseEnglish

      Dim WAI As Object                               ' Where Am I?
      Set WAI = ActiveSheet                           ' To be able to return to original sheet

      Dim WS As Worksheet


' * ' Contents
      Set WS = SWS_Contents
      Call Resetup_Prepare_Worksheet(WS)
      If WS.ProtectContents = False Then
            With WS
            With .Range("B5")
                  .Value = "VBA_Projects_Unlock_Hook"
                  .Offset(0, 2).Value = ResetupString("Macro")
                  .Offset(0, 4).Value = "VBProjects_Unlock_Hook"
                  .Offset(0, 6).Value = "Macro that can unlock VBA projects, using a 'Hook'."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Makro, der kan |fffd|bne kodeordsbeskyttede VBA projekter, ved hj|fffd|lp af en s|fffd|kaldt 'Hook'."
            End With
            End With
            Call Resetup_Standard_Contents(WS)
      End If


ES: ' End of Sub
      Set WS = Nothing
      UseEnglishFlag = False

      WAI.Select

End Sub
Private Sub Resetup_Prepare_Worksheet(WSP As Worksheet)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      Const SheetClassContents As Long = 16764108     ' \
      Const SheetClassChart    As Long = 10485920     '  \
      Const SheetClassExample  As Long = 61680        '   > http://www.EXCELGAARD.dk/Lib/SheetClass/
      Const SheetClassInfo     As Long = 13143180     '  /
      Const SheetClassTable    As Long = 16760832     ' /

      On Error Resume Next


' * ' Prepare sheet
      With WSP

      If ThisWorkbook.IsAddin = False Then
            .Select
            If Application.ScreenUpdating = True Then ActiveWindow.FreezePanes = False
      End If

      .DisplayPageBreaks = False

      .Unprotect
      If .ProtectContents = True Then Exit Sub

      .Tab.ColorIndex = xlColorIndexNone
      .Names("EXCELGAARD_SheetClass_Property").Delete


' * ' Prepare cells
      .Cells.UnMerge
      .Cells.Comment.Delete
      .Cells.Validation.Delete
      .Cells.FormatConditions.Delete
      .Cells.EntireRow.Hidden = False
      .Cells.EntireColumn.Hidden = False

      .Cells.Delete
      
      .Cells.NumberFormat = "General"
      .Cells.HorizontalAlignment = xlLeft
      
      .Cells.Font.Size = 11
      .Cells.Font.Name = "Times New Roman"
      
      .Cells.Interior.ColorIndex = xlNone
      
      .Cells.Locked = True
      .Cells.FormulaHidden = False


' * ' Table worksheet
      If Left$(.CodeName, 6) = "Table_" Or Left$(.CodeName, 6) = "Tabel_" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassTable

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassTable, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetTable"

            .Name = "Table"
            If ResetupLanguage = "Danish" Then .Name = "Tabel"
      End If


' * ' Example worksheet
      If .CodeName = "SWS_Example" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassExample

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassExample, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetExample"

            .Name = "Example"
            If ResetupLanguage = "Danish" Then .Name = "Eksempel"
      End If


' * ' Information worksheet
      If Left$(.CodeName, 8) = "SWS_Info" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassInfo

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassInfo, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetInfo"

            .Name = "Info"
      End If


' * ' Contents worksheet
      If .CodeName = "SWS_Contents" Then
            .Move Before:=ThisWorkbook.Sheets(1)
            .Tab.Color = SheetClassContents

            Err.Clear
            .Names.Add Name:="EXCELGAARD_SheetClass_Property", RefersToR1C1:="=" & SheetClassContents, Visible:=False
            If Err.Number = 0 Then .Names("EXCELGAARD_SheetClass_Property").Comment = "xlSheetContents"

            .Name = "Contents"
            If ResetupLanguage = "Danish" Then .Name = "Indhold"

            .Rows(2).Font.Bold = True
            .Rows(3).RowHeight = 3

            With .Range("B3:L3").Borders(xlEdgeBottom)
                  .LineStyle = xlContinuous
                  .Color = rgbBlack
                  .Weight = xlThin
            End With

            .Range("B2:H2").Value = Array("Component", "", "Type", "", "Name", "", "Purpose")
            If ResetupLanguage = "Danish" Then .Range("B2:H2").Value = Array("Komponent", "", "Type", "", "Navn", "", "Form|fffd|l")
      End If


ES: ' End of Sub
      End With

End Sub
Private Sub Resetup_Standard_Contents(WSS As Worksheet)

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim Counter As Long
      Dim NextRow As Long
      For Counter = 1 To 26
            NextRow = WorksheetFunction.Max(NextRow, WSS.Cells(WSS.Rows.Count, Counter).End(xlUp).Row)
      Next

      Dim CDS As Chart
      Dim WST As Worksheet


' * ' Let's start...
      With WSS


' * ' Make devider between specific modules and standard modules
      NextRow = NextRow + 1
      With .Range("B" & NextRow & ":L" & NextRow).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbBlack
            .Weight = xlThin
      End With
      NextRow = NextRow + 1


' * ' Contents worksheet
      If ResetupCMUF("SWS_Contents") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "SWS_Contents"
                  .Offset(0, 2).Value = ResetupString("Worksheet")
                  .Offset(0, 4).FormulaR1C1 = "=MID(CELL(""Filename"",R1C1),SEARCH(""]"",CELL(""Filename"",R1C1))+1,99)"
                  .Offset(0, 6).Value = "This worksheet with this list of the contents of this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Dette regneark med denne oversigt over indholdet i denne regnearksfil."
            End With
      End If


' * ' Information worksheet
      If ResetupCMUF("SWS_Information") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "SWS_Information"
                  .Offset(0, 2).Value = ResetupString("Worksheet")
                  .Offset(0, 4).Value = "Information"
                  .Offset(0, 6).Value = "Information about the usage of this workbook and its contents."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Information om brugen af denne regnearksfil og indholdet i filen."
            End With
      End If


' * ' Example worksheet
      If ResetupCMUF("SWS_Example") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "SWS_Example"
                  .Offset(0, 2).Value = ResetupString("Worksheet")
                  .Offset(0, 4).Value = "Example"
                  If ResetupLanguage = "Danish" Then .Offset(0, 4).Value = "Eksempel"
                  .Offset(0, 6).Value = "Example on the usage of this workbook and its contents."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Eksempel p|fffd| brugen af denne regnearksfil og indholdet i filen."
            End With
      End If


' * ' Tables worksheet
      For Each WST In ThisWorkbook.Worksheets
            WST.DisplayPageBreaks = False
            If WST.Visible = xlSheetVisible Then
            If Left$(WST.CodeName, 6) = "Table_" Or Left$(WST.CodeName, 6) = "Tabel_" Then

            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = WST.CodeName
                  .Offset(0, 2).Value = ResetupString("Table")
                  .Offset(0, 4).Value = "Table with data for use in this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Tabel med data til brug for denne regnearksfil."
            End With
            
            End If
            End If
      Next


' * ' Charts
      For Each CDS In ThisWorkbook.Charts
            CDS.Tab.Color = 10485920
            If CDS.Visible = xlSheetVisible Then

            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = CDS.CodeName
                  .Offset(0, 2).Value = ResetupString("Chart")
                  .Offset(0, 4).Value = "Chart, that shows the result/usage of the contents in this workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Diagram/graf, der viser resultat/brug af indholdet i denne regnearksfil."
            End With

            End If
      Next


' * ' TTP_Colors
      If ResetupCMUF("TTP_Colors") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "TTP_Colors"
                  .Offset(0, 2).Value = ResetupString("Code Module")
                  .Offset(0, 6).Value = "Code module for setting up the colors used in this project/workbook."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Kodemodul til ops|fffd|tning af de farver, der benytter i dette projekt/regnearksfil."
            End With
      End If


' * ' Credentials ()
      If ResetupCMUF("UDF_Credentials") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_Credentials"
                  .Offset(0, 2).Value = ResetupString("UDF")
                  .Offset(0, 4).Value = "Credentials ()"
                  .Offset(0, 6).Value = "Function to find/get/obtain/read/retrieve credentials for use in this projects."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Funktion til at finde/hente/l|fffd|se/skaffe adgangsinformationer til brug i dette project."
            End With
      End If
      If ResetupCMUF("WUF_Credentials") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "WUF_Credentials"
                  .Offset(0, 2).Value = ResetupString("UserForm")
                  .Offset(0, 4).Value = "WUF_Credentials"
                  .Offset(0, 6).Value = "Used for setting credentials used in the project."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Benyttes til at angive adgangsoplysninger for projektet."
            End With
      End If


' * ' GetSpecialFolder ()
      If ResetupCMUF("UDF_GetSpecialFolder") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_GetSpecialFolder"
                  .Offset(0, 2).Value = ResetupString("UDF")
                  .Offset(0, 4).Value = "GetSpecialFolder ()"
                  .Offset(0, 6).Value = "Function for finding the miscellanous system folders - used as a 'sub-function' in this project."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Funktion til at finde stien til de foreskellige system mapper - benyttes som en 'under-funktion' til dette projekt."
            End With
      End If
      If ResetupCMUF("WUF_GetSpecialFolder") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "WUF_GetSpecialFolder"
                  .Offset(0, 2).Value = ResetupString("UserForm")
                  .Offset(0, 4).Value = "WUF_GetSpecialFolder"
                  .Offset(0, 6).Value = "Used for setting and/or selecting project specific folders."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Benyttes til at angive og/eller v|fffd|lge specifikke mapper for projektet."
            End With
      End If


' * ' LoadURLPicture ()
      If ResetupCMUF("UDF_LoadURLPicture") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_LoadURLPicture"
                  .Offset(0, 2).Value = ResetupString("UDF")
                  .Offset(0, 4).Value = "LoadURLPicture ()"
                  .Offset(0, 6).Value = "Function for inserting custom icons in the Ribbon and/or into UserForms."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Funktion til at s|fffd|tte bruger-ikoner ind i b|fffd|ndet (Ribbon) og/eller i dialogvinduer (UserForms)."
            End With
      End If


' * ' xlRelease
      If ResetupCMUF("UDF_xlRelease") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "UDF_xlRelease"
                  .Offset(0, 2).Value = ResetupString("UDF")
                  .Offset(0, 4).Value = "xlRelease"
                  .Offset(0, 6).Value = "Function to test if this Excel is compatible with this project (version, language, 32-bit or 64-bit, etc.)."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Funktion til at teste om den aktuelle Excel er kompatibel med dette projekt (version, sprog, 32-bit eller 64-bit, o.s.v.)."
            End With
      End If


' * ' Resetup
      If ResetupCMUF("VBA_Resetup") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "VBA_Resetup"
                  .Offset(0, 2).Value = ResetupString("Macro")
                  .Offset(0, 4).Value = "Resetup"
                  .Offset(0, 6).Value = "Macro for recreating/resetup this contents worksheet, if you click the button [" & RibCTRLLabel("Button_EXCELGAARD_Resetup") & "] in the Ribbon, under the '" & RibCTRLLabel("Tab_EXCELGAARD") & "' tab."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Makro til at genoprette dette indholdsregneark, hvis man trykker p|fffd| knappen [" & RibCTRLLabel("Button_EXCELGAARD_Resetup") & "] i b|fffd|ndet (Ribbon), under '" & RibCTRLLabel("Tab_EXCELGAARD") & "' fanen."
            End With
      End If


' * ' RibbonX CallBacks
      If ResetupCMUF("VBA_RibbonX_CallBacks") = True Then
            NextRow = NextRow + 1
            With .Range("B" & NextRow)
                  .Value = "VBA_RibbonX_CallBacks"
                  .Offset(0, 2).Value = ResetupString("Code Module")
                  .Offset(0, 6).Value = "Code module containing all the 'Call Backs' for setting up the custom Ribbon of this workbook, under the '" & RibCTRLLabel("Tab_EXCELGAARD") & "' tab."
                  If ResetupLanguage = "Danish" Then .Offset(0, 6).Value = "Kodemodul med alle 'Call Backs' til ops|fffd|tning af det tilpassede b|fffd|nd (Ribbon) i denne regnearksfil, under '" & RibCTRLLabel("Tab_EXCELGAARD") & "' fanen."
            End With
      End If


' * ' Make devider between contents and texts describtions
      NextRow = NextRow + 1
      With .Range("B" & NextRow & ":L" & NextRow).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = rgbBlack
            .Weight = xlThin
      End With
      NextRow = NextRow + 1


' * ' Text describtions
      If ResetupLanguage = "Danish" Then
            .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Tryk p|fffd| [Alt] + [F11] for at |fffd|bne Visual Basic Editor (VBE) og for at se alt makro kode"
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "I alle modulerne og i alle makroerne, kan man finde n|fffd|rmere dokumentation og forklaring, eller man kan bes|fffd|ge websitet for fuld for full dokumentation og forklaring til alt i denne regnearksfil."
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "Hvis man benytter noget, fundet i denne regnearksfil, s|fffd| giv da, venligst, beh|fffd|rig kredit og link til www.EXCELGAARD.dk - p|fffd| forh|fffd|nd tak :-)"
      Else
            .Range("B" & .Rows.Count).End(xlUp).Offset(3, 0).Value = "Press [Alt] + [F11] to open the Visual Basic Editor (VBE), and to view the macro code"
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "In all the modules and in all the macros, you find a full in-debt documetion/explanation, or you can visit the website for full documentation and explanation of everything found in this workbook."
            .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0).Value = "If you use anything found in this workbook in your own projects, please, give proper credit and link to www.EXCELGAARD.dk - thank you in advance :-)"
      End If

      With .Range("B" & .Rows.Count).End(xlUp).Offset(2, 0)
            .FormulaHidden = True
            .Formula = "=" & ThisWorkbook.VBProject.Name
      End With


ES: ' End of Sub
      .Protect UserInterfaceOnly:=True

      If ActiveSheet.Name = .Name And ThisWorkbook.IsAddin = False Then
            ActiveWindow.Zoom = 100
            ActiveWindow.FreezePanes = False
            Application.ScreenUpdating = True

            Range("A1").Select
      End If

      End With

      Application.Run "EXCELGAARD_RibbonX_Update", False

      Set CDS = Nothing
      Set WST = Nothing

End Sub
Private Function ResetupCMUF(ComponentName As String) As Boolean

' The purpose of the little function is simply to test if a VB Component with the given name exists in this workbook.
'
' Notice that if the workbook is locked/unreadable, we assume that the VB Component exists, thus returning 'True'
' You can change that for specific VB Components at the end of the function.
'
' For this function to work, the workbook MUST have VB Reference to the 'MS VBA Extensibility' library.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      ComponentName = UCase$(Replace(ComponentName, " ", "_"))

      Dim VBC As VBComponent
      Dim TWB As Workbook
      Set TWB = ThisWorkbook

      Dim TempResult As Boolean
      If TWB.VBProject.VBComponents.Count > 0 Then
            TempResult = False
      Else
            TempResult = True
            GoTo EF:
      End If


' * ' Search for the given VB Component
      For Each VBC In TWB.VBProject.VBComponents
            If UCase$(VBC.Name) = ComponentName Then TempResult = True
      Next


EF: ' End of Function
      If TWB.VBProject.VBComponents.Count < 1 Then    ' Set specific VB Components to 'False' if VB Project is locked/unreadable
            Select Case ComponentName
                  Case UCase$("SWS_Information"):           TempResult = False
                  Case UCase$("SWS_Example"):               TempResult = False
                  Case UCase$("TTP_Colors"):                TempResult = False
                  Case UCase$("UDF_Credentials"):           TempResult = False
                  Case UCase$("WUF_Credentials"):           TempResult = False
                  Case UCase$("UDF_GetSpecialFolder"):      TempResult = False
                  Case UCase$("WUF_GetSpecialFolder"):      TempResult = False
            End Select
      End If

      ResetupCMUF = TempResult

      Set TWB = Nothing
      Set VBC = Nothing

End Function
Private Function ResetupLanguage() As String

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.
'
' Purpose of this little function is simply to test if we're using Danish or Non-Danish (English) language.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim TempLanguage As String


' * ' (Try to) find language of current Excel
      TempLanguage = Application.Run("LOCEA")         ' Requires EXCELGAARD's 'LOCEA' function to be available/installed
      If Len(TempLanguage) < 1 Then
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then TempLanguage = "Danish"
      End If


EF: ' End of Function
      If UseEnglishFlag = True Or Len(TempLanguage) < 2 Then TempLanguage = "English"

      ResetupLanguage = TempLanguage

End Function
Private Function ResetupString(StringKey As String) As String

' View explanation of this macro, and the other macros in this module, in the 'Declaration Area' at the top of this module.
'
' Purpose of this little function is simply to provide standard translations of standard texts in this projects/workbook.


' * ' Initialize
      On Error Resume Next


' * ' Define variables
      StringKey = UCase$(Replace(StringKey, " ", vbNullString))
      Dim TempString As String


' * ' Find translated string
      If ResetupLanguage = "Danish" Then
            Select Case StringKey
                  Case UCase$("Chart"):         TempString = "Diagram/Graf"
                  Case UCase$("ClassModule"):   TempString = "VBA Klasse Modul"
                  Case UCase$("CodeModule"):    TempString = "VBA Kode Modul"
                  Case UCase$("Macro"):         TempString = "Makro"
                  Case UCase$("Table"):         TempString = "Tabel (regneark)"
                  Case UCase$("UDF"):           TempString = "Bruger-Defineret Funktion (UDF)"
                  Case UCase$("UserForm"):      TempString = "Dialogboks (UserForm)"
                  Case UCase$("Worksheet"):     TempString = "Regneark"
                  Case UCase$("Workbook"):      TempString = "Regnearksfil"
                  Case Else:                    TempString = vbNullString
            End Select
      Else
            Select Case StringKey
                  Case UCase$("Chart"):         TempString = "Chart/Diagram"
                  Case UCase$("ClassModule"):   TempString = "VBA Class Module"
                  Case UCase$("CodeModule"):    TempString = "VBA Code Module"
                  Case UCase$("Macro"):         TempString = "Macro"
                  Case UCase$("Table"):         TempString = "Table (worksheet)"
                  Case UCase$("UDF"):           TempString = "User-Defined Function (UDF)"
                  Case UCase$("UserForm"):      TempString = "UserForm"
                  Case UCase$("Worksheet"):     TempString = "Worksheet"
                  Case UCase$("Workbook"):      TempString = "Workbook"
                  Case Else:                    TempString = vbNullString
            End Select
      End If


EF: ' End of Function
      ResetupString = TempString

End Function

Attribute VB_Name = "VBA_RibbonX_CallBacks"
Attribute VB_Description = "(C) Dan Elgaard   (www.EXCELGAARD.dk)"

' (C) Dan Elgaard   (www.EXCELGAARD.dk)
' Visit website for full explanation and documentation

' This module contains all the call backs of the custom Ribbon built into this project/workbook.
' The workbook MUST have VB Reference to 'MS Office Object Library'


' Constant for showing the ribbon or not
  Public Const Custom_Ribbon_Visible As Boolean = True

' Constant for development purposes
  Const Module_DebugPrint As Boolean = False

' Assign Ribbon to variable for using it later on...
  Private RibbonX As IRibbonUI                                                            ' Workbook Ribbon Object   (Requires references to 'MS Office Object' Libray (Required for workbooks containing custom rebbons)

' API functions
 #If VBA7 And Win64 Then
      Private Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Long
      Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal Length As LongPtr)
      Private Declare PtrSafe Function MaximizeWindow Lib "user32" Alias "ShowWindow" (ByVal hwnd As Long, Optional ByVal WinState As Long = 3) As Long
 #Else
      Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Long
      Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)
      Private Declare Function MaximizeWindow Lib "user32" Alias "ShowWindow" (ByVal hwnd As Long, Optional ByVal WinState As Long = 3) As Long
 #End If

Option Private Module
Option Explicit
Private Sub RibbonX_Update_Manual()

' Hit [F5] with the cursor placed in this macro, to run this macro...

      On Error Resume Next
      Call EXCELGAARD_RibbonX_Update(False)

End Sub
Sub EXCELGAARD_RibbonX_OnAction(RibCTRL As IRibbonControl)

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim SD As Boolean
      SD = CBool(GetKeyState(vbKeyShift) And -128)
      If CLng(GetKeyState(vbKeyShift) And -128) = 0 Then SD = False

      Dim URL(9) As String
      URL(1) = "http://www.EXCELGAARD.dk/Lib/"
      URL(2) = "http://www.EXCELGAARD.dk/Lib/Password/VBA/Hook/"
      URL(3) = "http://www.EXCELGAARD.dk/Lib/FAQ/Disclaimer/"
      URL(4) = "http://www.EXCELGAARD.dk/Lib/FAQ/Donation/"
      If RibbonXLanguage = "Danish" Then
            URL(1) = "http://www.EXCELGAARD.dk/Bib/"
            URL(2) = "http://www.EXCELGAARD.dk/Bib/Password/VBA/Hook/"
            URL(3) = "http://www.EXCELGAARD.dk/Bib/FAQ/Forbehold/"
            URL(4) = "http://www.EXCELGAARD.dk/Bib/FAQ/Donation/"
      End If

      URL(5) = URL(5) & "Name" & vbTab & ": " & RTrim$(LTrim$(ThisWorkbook.BuiltinDocumentProperties("Title").Value)) & vbNewLine & vbNewLine
      If Len(Replace(ThisWorkbook.CustomDocumentProperties("Version").Value, " ", vbNullString)) > 1 Then URL(5) = URL(5) & "Version" & vbTab & ": " & RTrim$(LTrim$(ThisWorkbook.CustomDocumentProperties("Version").Value)) & vbNewLine & vbNewLine
      URL(5) = URL(5) & LTrim(ThisWorkbook.BuiltinDocumentProperties("Comments")) & vbNewLine & vbNewLine
      URL(5) = URL(5) & Evaluate(ThisWorkbook.Names("EXCELGAARD").Value)

      URL(6) = "http://www.DE152.dk/WWW/Files/Links/Wikipedia/Link.Wikipedia, Hooking.HTM"
      If RibbonXLanguage = "Danish" Then URL(6) = "http://www.DE152.dk/WWW/Files/Links/Wikipedia/Link.Wikipedia, Hooking.HTML"
      URL(7) = "http://www.DE152.dk/WWW/Files/Links/Wikipedia/Link.Wikipedia, Microsoft Office, Password Protection.HTM"
      If RibbonXLanguage = "Danish" Then URL(7) = "Link.Wikipedia, Microsoft Office, Kodeordsbeskyttelse.HTML"


' * ' Perform selected action
      Select Case RibCTRL.ID
            Case "Button_EXCELGAARD_View_Code":       With Application.VBE.MainWindow     ' View code
                                                            .Visible = True
                                                            .SetFocus
                                                            .WindowState = 2              ' Maximized
                                                      End With
            Case "Button_EXCELGAARD_Resetup":         Application.Run "Resetup"
            Case "Button_EXCELGAARD_Help_Button":     ActiveWorkbook.FollowHyperlink Address:=URL(2), NewWindow:=True
            Case "Button_EXCELGAARD_Website":         ActiveWorkbook.FollowHyperlink Address:=URL(1), NewWindow:=True, AddHistory:=True
            Case "Button_EXCELGAARD_Help_Menu":       ActiveWorkbook.FollowHyperlink Address:=URL(2), NewWindow:=True
            Case "Button_EXCELGAARD_Disclaimer":      ActiveWorkbook.FollowHyperlink Address:=URL(3), NewWindow:=True
            Case "Button_EXCELGAARD_Donation":        ActiveWorkbook.FollowHyperlink Address:=URL(4), NewWindow:=True
            Case "Button_EXCELGAARD_Info":            MsgBox URL(5), vbOKOnly + vbInformation, " " & RTrim$(LTrim$(ThisWorkbook.BuiltinDocumentProperties("Title").Value))
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Application.Run "VBProjects_Unlock_Hook"
            Case "Button_EXCELGAARD_AB":              Application.VBE.CommandBars(1).FindControl(ID:=2578, Recursive:=True).Execute
            Case "Button_EXCELGAARD_BA":              ActiveWorkbook.FollowHyperlink Address:=URL(6), NewWindow:=True, AddHistory:=False
            Case "Button_EXCELGAARD_BB":              ActiveWorkbook.FollowHyperlink Address:=URL(7), NewWindow:=True, AddHistory:=False
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'OnAction'   :  " & RibCTRL.ID
      End Select


ES: ' End of Sub
      With Application
            .Calculation = xlCalculationAutomatic
            .EnableCancelKey = xlInterrupt
          ' .PrintCommunication = False                                                   ' Won't work in XL2007 or earlier
            .ScreenUpdating = True
            .DisplayAlerts = True
            .EnableEvents = True
            .Interactive = True
            .Cursor = xlDefault
            .StatusBar = False
      End With
      ActiveSheet.DisplayPageBreaks = False

End Sub
Function RibCTRLLabel(RibbonControlID As String, Optional RemoveNewLine As Boolean = False) As String

' We set the labels of the RibbonX control using this function, instead of directly setting the labels.
' Reason for using this approch, is to be able to refer to the labels from other macros.
' (And it also makes it easier to add new labels and/or new languages :-)


' * ' Initialize
      On Error Resume Next


' * ' Define variable
      Dim TempLabel As String


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibbonControlID
                  Case "Tab_EXCELGAARD":                    TempLabel = "EXCELGAARD"
                  Case "Group_EXCELGAARD_Generic":          TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_View_Code":       TempLabel = "Vis makro kode"
                  Case "Button_EXCELGAARD_Resetup":         TempLabel = "Genopret regneark"
                  Case "Button_EXCELGAARD_Help_Button":     TempLabel = "On-line hj|fffd|lp"
                  Case "Menu_EXCELGAARD":                   TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_Website":         TempLabel = "www.EXCELGAARD.dk"
                  Case "Button_EXCELGAARD_Help_Menu":       TempLabel = "On-line hj|fffd|lp"
                  Case "Button_EXCELGAARD_Disclaimer":      TempLabel = "Ansvarsfraskrivelse"
                  Case "Button_EXCELGAARD_Donation":        TempLabel = "Donation"
                  Case "Button_EXCELGAARD_Info":            TempLabel = "Information"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_A":                TempLabel = RTrim$(LTrim$(ThisWorkbook.BuiltinDocumentProperties("Title")))
                  Case "Button_EXCELGAARD_AA":              TempLabel = "Opl|fffd|s" & vbNewLine & "VBA Projekter"
                  Case "Button_EXCELGAARD_AB":              TempLabel = "VBA Projekt" & vbNewLine & "Egenskaber"
                  Case "Group_EXCELGAARD_B":                TempLabel = "Wikipedia"
                  Case "Button_EXCELGAARD_BA":              TempLabel = "Hook" & vbNewLine & "Programmering"
                  Case "Button_EXCELGAARD_BB":              TempLabel = "Office" & vbNewLine & "Beskyttelse"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case Else:                                TempLabel = vbNullString
            End Select
      Else                                                                                ' Use 'ElseIf' when building in more languages
            Select Case RibbonControlID
                  Case "Tab_EXCELGAARD":                    TempLabel = "EXCELGAARD"
                  Case "Group_EXCELGAARD_Generic":          TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_View_Code":       TempLabel = "Show macro code"
                  Case "Button_EXCELGAARD_Resetup":         TempLabel = "Resetup spreadsheet"
                  Case "Button_EXCELGAARD_Help_Button":     TempLabel = "On-line help"
                  Case "Menu_EXCELGAARD":                   TempLabel = "EXCELGAARD"
                  Case "Button_EXCELGAARD_Website":         TempLabel = "www.EXCELGAARD.dk"
                  Case "Button_EXCELGAARD_Help_Menu":       TempLabel = "On-line help"
                  Case "Button_EXCELGAARD_Disclaimer":      TempLabel = "Disclaimer"
                  Case "Button_EXCELGAARD_Donation":        TempLabel = "Donation"
                  Case "Button_EXCELGAARD_Info":            TempLabel = "Information"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case "Group_EXCELGAARD_A":                TempLabel = ThisWorkbook.BuiltinDocumentProperties("Title").Value
                  Case "Button_EXCELGAARD_AA":              TempLabel = "Unlock" & vbNewLine & "VBA Projects"
                  Case "Button_EXCELGAARD_AB":              TempLabel = "VBA Project" & vbNewLine & "Properties"
                  Case "Group_EXCELGAARD_B":                TempLabel = "Wikipedia"
                  Case "Button_EXCELGAARD_BA":              TempLabel = "Hook" & vbNewLine & "Programming"
                  Case "Button_EXCELGAARD_BB":              TempLabel = "Office" & vbNewLine & "Protection"
                ' ---------------------------------------------------------------------------------------------------------------------- '
                  Case Else:                                TempLabel = vbNullString
            End Select
      End If


EF: ' End of function
      If Len(TempLabel) < 1 Then TempLabel = vbNullString
      
      If RemoveNewLine = True Then
            TempLabel = WorksheetFunction.Trim(Replace(Replace(Replace(Replace(TempLabel, vbNewLine, " "), vbCr, " "), vbLf, " "), "&#13;", " "))
      End If

      RibCTRLLabel = TempLabel

End Function
Sub EXCELGAARD_RibbonX_GetLabel(RibCTRL As IRibbonControl, ByRef Item_Label)

' The labels are fetched using the function, 'RibCTRLLabel', above.


' * ' Initialize
      On Error Resume Next


' * ' Get the label from the labeling function
      Item_Label = RibCTRLLabel(RibCTRL.ID)


ES: ' End of Sub
      If Len(Item_Label) < 1 Then
            Item_Label = "???"                                                            ' Use a space (" "), if you really don't want a label to show
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Label'      :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetScreenTip(RibCTRL As IRibbonControl, ByRef Item_ScreenTip)

' We rarely uses 'ScreenTip', but instead we set the ScreenTip to the same as the Label of the control, at the end of this macro.


' * ' Initialize
      On Error Resume Next


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Resetup":         Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Help_Button":     Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Website":         Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Help_Menu":       Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Disclaimer":      Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Donation":        Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Info":            Item_ScreenTip = ""
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_AB":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_BA":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_BB":              Item_ScreenTip = ""
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_ScreenTip = vbNullString
            End Select
      Else
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Resetup":         Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Help_Button":     Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Website":         Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Help_Menu":       Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Disclaimer":      Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Donation":        Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_Info":            Item_ScreenTip = ""
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_AB":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_BA":              Item_ScreenTip = ""
                  Case "Button_EXCELGAARD_BB":              Item_ScreenTip = ""
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_ScreenTip = vbNullString
            End Select
      End If


ES: ' End of Sub
      If Len(Item_ScreenTip) < 1 Then
            Item_ScreenTip = RibCTRLLabel(RibCTRL.ID, True)
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'ScreenTip'  :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetSuperTip(RibCTRL As IRibbonControl, ByRef Item_SuperTip)

' Notice    : To insert a new line in a SuperTip use:  &#13;
' Like this : SuperTip="This is line 1 of the supertip&#13;and this is line 2."
'                                                     |fffd||fffd||fffd||fffd||fffd|
' This macro will also allow you to use the vbConstant, vbNewline, if you want to.


' * ' Initialize
      On Error Resume Next


' * ' Label the ribbon items
      If RibbonXLanguage = "Danish" Then
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_SuperTip = "|fffd|bn Visual Basic Editor (VBE) for at se makro koden."
                  Case "Button_EXCELGAARD_Resetup":         Item_SuperTip = "Genopret (hj|fffd|lpe-) ark."
                  Case "Button_EXCELGAARD_Help_Button":     Item_SuperTip = "Vis projektets side p|fffd| Internettet." & "!DK!"
                  Case "Button_EXCELGAARD_Website":         Item_SuperTip = "Bes|fffd|g www.EXCELGAARD.dk" & "!DK!"
                  Case "Button_EXCELGAARD_Help_Menu":       Item_SuperTip = "Vis projektets side p|fffd| Internettet." & "!DK!"
                  Case "Button_EXCELGAARD_Disclaimer":      Item_SuperTip = "Vis ansvarsfraskrivelse og forbehold for brug af indholdet i dette regneark og andet materiale fundet p|fffd| EXCELGAARD's website." & "!DK!"
                  Case "Button_EXCELGAARD_Donation":        Item_SuperTip = "Giv en donation til EXCELGAARD og hj|fffd|lp med til websites forsatte best|fffd|en." & "!DK!"
                  Case "Button_EXCELGAARD_Info":            Item_SuperTip = "Vis de grundl|fffd|ggende information om dette projekt."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_SuperTip = "Klikker man p|fffd| denne knap k|fffd|res en makro, der l|fffd|ser op for VBA projekterne." & vbNewLine & vbNewLine & "Man kan eventuelt kigge i Visual Basic Editor (VBE) f|fffd|rst, for at f|fffd| bekr|fffd|ftet, at der er VBA projekter, som er beskyttet og l|fffd|st med et kodeord." & vbNewLine & "(Kodeordet er 'EXCELGAARD')."
                  Case "Button_EXCELGAARD_AB":              Item_SuperTip = "Vil vise egenskaberne for VBA projektet." & vbNewLine & vbNewLine & "Hvis VBA projektet er l|fffd|st, vil man blive bedt om at indtaste kodeoret." & vbNewLine & "(Kodeordet er 'EXCELGAARD')."
                  Case "Button_EXCELGAARD_BA":              Item_SuperTip = "L|fffd|s mere p|fffd| Wikipedia." & "!DK!"
                  Case "Button_EXCELGAARD_BB":              Item_SuperTip = "L|fffd|s mere p|fffd| Wikipedia." & "!DK!"
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_SuperTip = vbNullString
            End Select
      Else
            Select Case RibCTRL.ID
                  Case "Button_EXCELGAARD_View_Code":       Item_SuperTip = "Open Visual Basic Editor (VBE) to view the macro code."
                  Case "Button_EXCELGAARD_Resetup":         Item_SuperTip = "Resetup (help-) sheet."
                  Case "Button_EXCELGAARD_Help_Button":     Item_SuperTip = "Show the homepage of this project on the Internet." & "!EN!"
                  Case "Button_EXCELGAARD_Website":         Item_SuperTip = "Visit www.EXCELGAARD.dk" & "!EN!"
                  Case "Button_EXCELGAARD_Help_Menu":       Item_SuperTip = "Show the homepage of this project on the Internet." & "!EN!"
                  Case "Button_EXCELGAARD_Disclaimer":      Item_SuperTip = "Show disclaimer for the use of the contents in this workbook and for anything else found on the EXCELGAARD website." & "!EN!"
                  Case "Button_EXCELGAARD_Donation":        Item_SuperTip = "Please, give a donation to EXCELGAARD and help support the continued existence of the website." & "!EN!"
                  Case "Button_EXCELGAARD_Info":            Item_SuperTip = "Show summary information about this project."
                ' --------------------------------------------------------------------------------------------------- '
                  Case "Button_EXCELGAARD_AA":              Item_SuperTip = "Clicking this button will run a macro that will unlock the VBA projects." & vbNewLine & vbNewLine & "You could check in the Visual Basic Editor first, to confirm, that there are VBProjects, which is password protected." & vbNewLine & "(Password is 'EXCELGAARD')."
                  Case "Button_EXCELGAARD_AB":              Item_SuperTip = "Show the properties of the VBA project." & vbNewLine & vbNewLine & "If the VBProject is locked, you will be prompted for the password." & vbNewLine & "(Password is 'EXCELGAARD')."
                  Case "Button_EXCELGAARD_BA":              Item_SuperTip = "Read more on Wikipedia." & "!EN!"
                  Case "Button_EXCELGAARD_BB":              Item_SuperTip = "Read more on Wikipedia." & "!EN!"
                ' --------------------------------------------------------------------------------------------------- '
                  Case Else:                                Item_SuperTip = vbNullString
            End Select
      End If
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!DK!", vbNewLine & vbNewLine & "Kr|fffd|ver Internet adgang og vil |fffd|bne et nyt vindue i din Internet browser")
      Item_SuperTip = Replace(CStr(Item_SuperTip), "!EN!", vbNewLine & vbNewLine & "Requires Internet access and will open a new window in your Internet browser")


ES: ' End of Sub
      If Len(Item_SuperTip) < 1 Then
            Item_SuperTip = ThisWorkbook.BuiltinDocumentProperties("Hyperlink base").Value
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'SuperTip'   :  " & RibCTRL.ID
      End If

      If Val(Application.Version) < 14 Then Item_SuperTip = Replace(Replace(Replace(CStr(Item_SuperTip), vbCrLf, vbCr), vbLf, vbCr), vbCr, "&#13;")

    ' Debug.Print vbNewLine & RibCTRL.ID & vbNewLine & Item_SuperTip & vbNewLine

End Sub
Sub EXCELGAARD_RibbonX_GetImage(RibCTRL As IRibbonControl, ByRef Item_Image)

' This macro will use the User-Defined Function (UDF), called 'LoadURLPicture', to insert custom icons in the Ribbon,
' thus, the function, 'LoadURLPicture', MUST be included in the workbook also!
'
' The function, 'LoadURLPicture', is made by EXCELGAARD, and you can read all about it at: http://www.EXCELGAARD.dk/


' * ' Initialize
      On Error Resume Next


' * ' Set image of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD_Generic":          Item_Image = "uiEXCELGAARD"
            Case "Button_EXCELGAARD_View_Code":       Item_Image = "ViewVisualBasicCode"
            Case "Button_EXCELGAARD_Resetup":         Item_Image = "uiSheetBuild"
            Case "Button_EXCELGAARD_Help_Button":     Item_Image = "Help"
            Case "Menu_EXCELGAARD":                   Item_Image = "uiEXCELGAARD"
            Case "Button_EXCELGAARD_Website":         Item_Image = "uiInternetSurfer"
            Case "Button_EXCELGAARD_Help_Menu":       Item_Image = "Help"
            Case "Button_EXCELGAARD_Disclaimer":      Item_Image = "uiThemis"
            Case "Button_EXCELGAARD_Donation":        Item_Image = "uiDonation"
            Case "Button_EXCELGAARD_Info":            Item_Image = "Info"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_A":                Item_Image = "uiEXCELGAARD"
            Case "Button_EXCELGAARD_AA":              Item_Image = "uiUnlockVBA"
            Case "Button_EXCELGAARD_AB":              Item_Image = "uiProperties"
            Case "Group_EXCELGAARD_B":                Item_Image = "uiWikipedia"
            Case "Button_EXCELGAARD_BA":              Item_Image = "uiWikipedia"
            Case "Button_EXCELGAARD_BB":              Item_Image = "uiWikipedia"
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Image = vbNullString
      End Select


' * ' No image set...
      If Len(Item_Image) < 1 Then
            Item_Image = "ChangeToTentativeAcceptInvitation"                                    ' Default image = Question Marks (???)
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Image'      :  " & RibCTRL.ID
      End If


' * ' User Icon selected
      If Left(Item_Image, 2) = "ui" Then
            Item_Image = Replace(Item_Image, " ", vbNullString)
            If UCase(Right(Item_Image, 4)) = ".BMP" Then Item_Image = Left(Item_Image, Len(Item_Image) - 4)
            If UCase(Right(Item_Image, 4)) <> ".PNG" Then Item_Image = Item_Image & ".PNG"
            Set Item_Image = Application.Run("LoadURLPicture", Item_Image)
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetSize(RibCTRL As IRibbonControl, ByRef Item_Size)

' * ' Initialize
      Const rbxItemSizeNormal As Long = 0
      Const rbxItemSizeLarge  As Long = 1                                                       ' Default

      On Error Resume Next


' * ' Set size of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD":                  Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_View_Code":       Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Resetup":         Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Help_Button":     Item_Size = rbxItemSizeNormal
            Case "Menu_EXCELGAARD":                   Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Website":         Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Help_Menu":       Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Disclaimer":      Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Donation":        Item_Size = rbxItemSizeNormal
            Case "Button_EXCELGAARD_Info":            Item_Size = rbxItemSizeNormal
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Item_Size = rbxItemSizeLarge
            Case "Button_EXCELGAARD_AB":              Item_Size = rbxItemSizeLarge
            Case "Button_EXCELGAARD_BA":              Item_Size = rbxItemSizeLarge
            Case "Button_EXCELGAARD_BB":              Item_Size = rbxItemSizeLarge
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Size = xlNone
      End Select


ES: ' End of Sub
      If Item_Size = xlNone Then
            Item_Size = rbxItemSizeLarge                                                        ' Default
            If Module_DebugPrint = True Then Debug.Print ThisWorkbook.Name, "Missing 'Size'       :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetVisible(RibCTRL As IRibbonControl, ByRef Item_Visible)

' * ' Initialize
      On Error Resume Next


' * ' Set visibility of ribbon items
      Select Case RibCTRL.ID
            Case "Tab_EXCELGAARD":                    Item_Visible = Custom_Ribbon_Visible
            Case "Group_EXCELGAARD_Generic":          Item_Visible = True
            Case "Button_EXCELGAARD_View_Code":       Item_Visible = True
            Case "Button_EXCELGAARD_Resetup":         Item_Visible = True
            Case "Button_EXCELGAARD_Help_Button":     Item_Visible = False
            Case "Menu_EXCELGAARD":                   Item_Visible = True
            Case "Button_EXCELGAARD_Website":         Item_Visible = True
            Case "Button_EXCELGAARD_Help_Menu":       Item_Visible = True
            Case "Button_EXCELGAARD_Disclaimer":      Item_Visible = True
            Case "Button_EXCELGAARD_Donation":        Item_Visible = True
            Case "Button_EXCELGAARD_Info":            Item_Visible = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Group_EXCELGAARD_A":                Item_Visible = True
            Case "Button_EXCELGAARD_AA":              Item_Visible = True
            Case "Button_EXCELGAARD_AB":              Item_Visible = True
            Case "Group_EXCELGAARD_B":                If RibbonXLanguage = "Danish" Then Item_Visible = False Else Item_Visible = True
            Case "Button_EXCELGAARD_BA":              Item_Visible = True
            Case "Button_EXCELGAARD_BB":              Item_Visible = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Visible = xlNone
      End Select


ES: ' End of Sub
      If Item_Visible = xlNone Then
            If Left$(RibCTRL.ID, 9) = "Separator" Then
                  Item_Visible = False
            Else
                  Item_Visible = True
                  If Module_DebugPrint = True And RibCTRL.ID <> "TabDeveloper" Then Debug.Print ThisWorkbook.Name, "Missing 'Visibility' :  " & RibCTRL.ID
            End If
      End If

End Sub
Sub EXCELGAARD_RibbonX_GetEnabled(RibCTRL As IRibbonControl, ByRef Item_Enabled)

' * ' Initialize
      On Error Resume Next


' * ' Set visibility of ribbon items
      Select Case RibCTRL.ID
            Case "Group_EXCELGAARD":                  Item_Enabled = True
            Case "Button_EXCELGAARD_View_Code":       Item_Enabled = True
            Case "Button_EXCELGAARD_Resetup":         Item_Enabled = True
            Case "Button_EXCELGAARD_Help_Button":     Item_Enabled = True
            Case "Menu_EXCELGAARD":                   Item_Enabled = True
            Case "Button_EXCELGAARD_Website":         Item_Enabled = True
            Case "Button_EXCELGAARD_Help_Menu":       Item_Enabled = True
            Case "Button_EXCELGAARD_Disclaimer":      Item_Enabled = True
            Case "Button_EXCELGAARD_Donation":        Item_Enabled = True
            Case "Button_EXCELGAARD_Info":            Item_Enabled = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case "Button_EXCELGAARD_AA":              Item_Enabled = True
            Case "Button_EXCELGAARD_AB":              Item_Enabled = True
            Case "Button_EXCELGAARD_BA":              Item_Enabled = True
            Case "Button_EXCELGAARD_BB":              Item_Enabled = True
          ' --------------------------------------------------------------------------------------------------------------------------- '
            Case Else:                                Item_Enabled = xlNone
      End Select


ES: ' End of Sub
      If Item_Enabled = xlNone Then
            Item_Enabled = True
            If Module_DebugPrint = True And RibCTRL.ID <> "TabDeveloper" Then Debug.Print ThisWorkbook.Name, "Missing 'Enabled'    :  " & RibCTRL.ID
      End If

End Sub
Sub EXCELGAARD_RibbonX_OnLoad(CustumRibbon As IRibbonUI)

' * ' Initialize
      On Error Resume Next


' * ' Define variable
      Set RibbonX = CustumRibbon


' * ' Save Ribbon handle, in case of state loss
      ThisWorkbook.Names.Add Name:="RibbonX_Handle", RefersToR1C1:=ObjPtr(RibbonX), Visible:=ThisWorkbook.IsAddin
      ThisWorkbook.Names("RibbonX_Handle").Comment = "Stored handle for custom ribbon in case of state loss."


ES: ' End of Sub
      Call EXCELGAARD_RibbonX_Update

End Sub
Sub EXCELGAARD_RibbonX_Update(Optional RecoverStateLoss As Long = 2)

' * ' Initialize
      Const TryToRecoveLossState As Boolean = False

      On Error Resume Next

      If Custom_Ribbon_Visible = False Then Exit Sub


' * ' Define variable
      Dim TempRibbon As Object
      If RecoverStateLoss = 2 Then RecoverStateLoss = TryToRecoveLossState                ' Use default, if not set upon calling

      Dim RibbonHandle As Variant
      RibbonHandle = Mid(ThisWorkbook.Names("RibbonX_Handle").Value, 2)                   ' Get Ribbon handle stored in name upon 'OnLoad'

      Dim StateLossText As String
      StateLossText = "RibbonX State was lost - State restored with handle: " & RibbonHandle


' * ' Update ribbon
      If RibbonX Is Nothing Then
            If CBool(RecoverStateLoss) = True Then
                  CopyMemory TempRibbon, CLng(RibbonHandle), LenB(RibbonHandle)
                  If Not TempRibbon Is Nothing Then Set RibbonX = TempRibbon
                  If Module_DebugPrint = True Then Debug.Print StateLossText
                ' MsgBox StateLossText
            Else
                  If Module_DebugPrint = True Then Debug.Print "RibbonX State was lost - State recovery not executed - Ribbon not updated!"
            End If
      End If
      RibbonX.Invalidate


ES: ' End of Sub
      Call EXCELGAARD_RibbonX_ActivateControl("Tab_EXCELGAARD")

      Set TempRibbon = Nothing

End Sub
Sub EXCELGAARD_RibbonX_ActivateControl(Optional RibCTRL As String = "TabHome")

' * ' Initialize
      On Error Resume Next


' * ' Active the given control (tab)
      Select Case RibCTRL
            Case "Tab_EXCELGAARD":  RibbonX.ActivateTab ControlID:="Tab_EXCELGAARD"
            Case Else:              RibbonX.ActivateTabMso "TabHome"
      End Select


ES: ' End of Sub
      If Err.Number <> 0 Then
          If Module_DebugPrint = True Then Debug.Print RibCTRL, Err.Number & ", " & Err.Description
      End If

End Sub
Private Function RibbonXLanguage() As String

' * ' Initialize
      On Error Resume Next


' * ' Define variables
      Dim TempLanguage As String


' * ' (Try to) find language of current Excel
      TempLanguage = Application.Run("LOCEA")                                             ' Requires EXCELGAARD's 'LOCEA' function to be available/installed
      If Len(TempLanguage) < 1 Then
            If Application.LanguageSettings.LanguageID(2) = 1030 Or Application.LanguageSettings.LanguageID(2) = 1080 Then TempLanguage = "Danish"
      End If


EF: ' End of Function
      RibbonXLanguage = TempLanguage

End Function


INQUEST-PP=macro
