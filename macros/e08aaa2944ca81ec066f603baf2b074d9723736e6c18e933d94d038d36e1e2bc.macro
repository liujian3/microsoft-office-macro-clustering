Attribute VB_Name = "Module1"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit
Const epsilon As Double = 0.0001
Const column_offset As Long = 11
Const width_limit As Double = 300
Const height_limit As Double = 300
Const displacement_multiplier As Double = 0.353

Function CheckWorksheetExistence(sheetName As String) As Boolean
    
    Dim WorksheetExists As Boolean
    WorksheetExists = False
    Dim Sht As Worksheet
    For Each Sht In ThisWorkbook.Worksheets
        If (Sht.Name = sheetName) Then
            WorksheetExists = True
        End If
    Next Sht
    
    CheckWorksheetExistence = WorksheetExists
End Function

Sub SetupConsoleWorksheet()

    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("CLP Solver Console")
    
    Dim reply As Integer
    If WorksheetExists = False Then
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "CLP Solver Console"
    End If
    
    ThisWorkbook.Worksheets("CLP Solver Console").Activate
    
    'Problem parameters
    
    Cells(1, 1).Value = "Sequence"
    Cells(1, 1).Select
    Selection.Font.Bold = True
    
    Cells(1, 2).Value = "Parameter"
    Cells(1, 3).Value = "Value"
    Cells(1, 4).Value = "Remarks"
    
    Range(Cells(1, 1), Cells(1, 4)).Select
    Selection.Interior.ColorIndex = 1
    Selection.Font.ColorIndex = 2
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    'GIS License
    
    Cells(2, 1).Value = "1.Items"
    Cells(2, 1).Select
    Selection.Font.Bold = True
    
    Cells(2, 2).Value = "Number of types of items"
    
    Cells(2, 3).Validation.Delete
    With Cells(2, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="100"
        .ErrorMessage = "Please enter an integer from 1 to 100"
    End With
    
    If Cells(2, 3).Value = "" Then
        Cells(2, 3).Value = 1
    End If
    
    Cells(2, 3).Font.ColorIndex = 2
    Cells(2, 3).Interior.ColorIndex = 50
    Cells(2, 4).Value = "[1,100]"
    
    Range(Cells(2, 1), Cells(2, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Cells(4, 1).Value = "2.Containers"
    Cells(4, 1).Select
    Selection.Font.Bold = True
    
    Cells(4, 2).Value = "Number of types of containers"
    Cells(4, 3).Validation.Delete
    With Cells(4, 3).Validation
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="1", Formula2:="10"
        .ErrorMessage = "Please enter an integer from 1 to 10"
    End With
    
    If Cells(4, 3).Value = "" Then
        Cells(4, 3).Value = 1
    End If
    
    Cells(4, 3).Font.ColorIndex = 2
    Cells(4, 3).Interior.ColorIndex = 50
    Cells(4, 4).Value = "[1,10]"
    
    Range(Cells(4, 1), Cells(4, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Cells(6, 1).Value = "3.Solution"
    Cells(6, 1).Select
    Selection.Font.Bold = True
    
    Cells(6, 2).Value = "Front side support required?"
    
    Cells(6, 3).Validation.Delete
    With Cells(6, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(6, 3).Value = "No"
    Cells(6, 3).Font.ColorIndex = 2
    Cells(6, 3).Interior.ColorIndex = 50
    Cells(6, 4).Value = ""
    
    Range(Cells(6, 1), Cells(6, 4)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    'Visualization parameters
    
    Cells(8, 1).Value = "4.Visualization"
    Cells(8, 1).Select
    Selection.Font.Bold = True
    
    Cells(8, 2).Value = "Item labels"
    
    Cells(8, 3).Validation.Delete
    With Cells(8, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(8, 3).Value = "Yes"
    Cells(8, 3).Font.ColorIndex = 2
    Cells(8, 3).Interior.ColorIndex = 50

    Cells(9, 2).Value = "Container labels"
        
    Cells(9, 3).Validation.Delete
    With Cells(9, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(9, 3).Value = "No"
    Cells(9, 3).Font.ColorIndex = 2
    Cells(9, 3).Interior.ColorIndex = 50
    
    Cells(10, 2).Value = "Animation advances by:"
    
    Cells(10, 3).Validation.Delete
    With Cells(10, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="One second intervals, Message box between every two items"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(10, 3).Value = "One second intervals"
    Cells(10, 3).Font.ColorIndex = 2
    Cells(10, 3).Interior.ColorIndex = 50
    
    Range(Cells(8, 1), Cells(10, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    'Algorithmic parameters
    
    Cells(12, 1).Value = "5.Solver"
    Cells(12, 1).Select
    Selection.Font.Bold = True
    
    Cells(12, 2).Value = "First-Fit-Decreasing based on:"
    
    Cells(12, 3).Validation.Delete
    With Cells(12, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Volume, Weight, Max {width; height; length}"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(12, 3).Value = "Volume"
    Cells(12, 3).Font.ColorIndex = 2
    Cells(12, 3).Interior.ColorIndex = 50
    
    Cells(13, 2).Value = "Constructive heuristic:"
    
    Cells(13, 3).Validation.Delete
    With Cells(13, 3).Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Column-building, Layer-building, Wall-building"
        .IgnoreBlank = True
        .InCellDropdown = True
    End With
    Cells(13, 3).Value = "Wall-building"
    Cells(13, 3).Font.ColorIndex = 2
    Cells(13, 3).Interior.ColorIndex = 50
       
    Cells(13, 4).Value = ""
        
    Cells(14, 2).Value = "CPU time limit (seconds)"
    
    Cells(14, 3).Validation.Delete
    With Cells(14, 3).Validation
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreaterEqual, Formula1:="10"
        .ErrorMessage = "Please enter a value greater than or equal to 10 seconds."
    End With
    
    If Cells(14, 3).Value = "" Then
        Cells(14, 3).Value = 60
    End If
    Cells(14, 3).Font.ColorIndex = 2
    Cells(14, 3).Interior.ColorIndex = 50
    
    Cells(14, 4).Value = "Recommendation: At least one second per item."
            
    Range(Cells(12, 1), Cells(14, 4)).Select
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Columns("A").AutoFit
    Columns("B").AutoFit
    'Columns("C").AutoFit
    Columns("D").AutoFit
    
    Columns("C").EntireColumn.ColumnWidth = 35
     
    Rows("1").Select
    Selection.Font.Bold = True
    Cells(1, 1).Select
End Sub
Sub SetupItemsWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("1.Items")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing item data, and erase container, solution, and visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.Items").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "1.Items"
                        
            WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("2.Containers")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.Containers").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "1.Items"
    End If
    
    ThisWorkbook.Worksheets("1.Items").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim formula_delimiter As String
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        formula_delimiter = ","
    Else
        formula_delimiter = ";"
    End If
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim formulaText As String
    
    Cells(1, 8).Value = "Can be placed on:"
    
    Cells(2, 1).Value = "Item Type ID"
    Cells(2, 2).Value = "Name"
    Cells(2, 3).Value = "Colour / Image file name"
    Cells(2, 4).Value = "Width (x)"
    Cells(2, 5).Value = "Height (y)"
    Cells(2, 6).Value = "Length (z)"
    Cells(2, 7).Value = "Volume         "
    Cells(2, 8).Value = "x/z surface?"
    Cells(2, 9).Value = "x/y surface?"
    Cells(2, 10).Value = "y/z surface?"
    Cells(2, 11).Value = "Weight         "
    Cells(2, 12).Value = "Heavy item?"
    Cells(2, 13).Value = "Fragile item?"
    Cells(2, 14).Value = "Must be packed?"
    Cells(2, 15).Value = "Profit"
    Cells(2, 16).Value = "Number of items"
    
    Range(Cells(1, 1), Cells(2, 16)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Range(Cells(1, 8), Cells(2, 10)).Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    Selection.Interior.ColorIndex = 15
    
    Dim i As Long
    
    For i = 1 To num_item_types
    
        Range(Cells(2 + i, 1), Cells(2 + i, 16)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 50
        
        If i Mod 2 = 0 Then
            Selection.Interior.TintAndShade = 0.02
        Else
            Selection.Interior.TintAndShade = -0.02
        End If
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .weight = xlThin
        End With
        
        Cells(2 + i, 1).Value = i
        Cells(2 + i, 1).Font.ColorIndex = 2
        Cells(2 + i, 1).Interior.ColorIndex = 1
        
        Cells(2 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(2 + i, 1).Address & ")"
        Cells(2 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 2).Value = "Item type " & i
        
        Cells(2 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(2 + i, 2).Address & ")"
        Cells(2 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(2 + i, 3).Value = ""
        Cells(2 + i, 3).Interior.ColorIndex = (3 + i) Mod 57
        
        Cells(2 + i, 4).NumberFormat = "0.00"
        Cells(2 + i, 4).Value = 1
        
        With Cells(2 + i, 4).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(2 + i, 5).NumberFormat = "0.00"
        Cells(2 + i, 5).Value = 1
        
        With Cells(2 + i, 5).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(2 + i, 6).NumberFormat = "0.00"
        Cells(2 + i, 6).Value = 1
        
        With Cells(2 + i, 6).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(2 + i, 7).NumberFormat = "0.00"
        Cells(2 + i, 7).Formula = "=" & Cells(2 + i, 4).Address(False, False) & "*" & Cells(2 + i, 5).Address(False, False) & "*" & Cells(2 + i, 6).Address(False, False)
        Cells(2 + i, 7).Interior.ColorIndex = 36
        Cells(2 + i, 7).Font.ColorIndex = 1
        
        Cells(2 + i, 8).Value = "Yes"
        Cells(2 + i, 8).Interior.ColorIndex = 1
        Cells(2 + i, 8).Font.ColorIndex = 2
        
        With Cells(2 + i, 9).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(2 + i, 9).Value = "Yes"
        
        Cells(2 + i, 9).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
        Cells(2 + i, 9).FormatConditions(1).Interior.ColorIndex = 43
        
        With Cells(2 + i, 10).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(2 + i, 10).Value = "Yes"
        
        Cells(2 + i, 10).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
        Cells(2 + i, 10).FormatConditions(1).Interior.ColorIndex = 43
        
        Cells(2 + i, 11).NumberFormat = "0.00"
        Cells(2 + i, 11).Value = 0
        
        With Cells(2 + i, 11).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        With Cells(2 + i, 12).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(2 + i, 12).Value = "No"
        
        Cells(2 + i, 12).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Yes"
        Cells(2 + i, 12).FormatConditions(1).Interior.ColorIndex = 4
        
        With Cells(2 + i, 13).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(2 + i, 13).Value = "No"
        
        Cells(2 + i, 13).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Yes"
        Cells(2 + i, 13).FormatConditions(1).Interior.ColorIndex = 4
        
        With Cells(2 + i, 14).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Must be packed, May be packed, Do not pack"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(2 + i, 14).Value = "Must be packed"
        
        Cells(2 + i, 14).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="May be packed"
        Cells(2 + i, 14).FormatConditions(1).Interior.ColorIndex = 4
        
        Cells(2 + i, 14).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Do not pack"
        Cells(2 + i, 14).FormatConditions(2).Interior.ColorIndex = 43
        
        Cells(2 + i, 15).NumberFormat = "0.00"
        Cells(2 + i, 15).Value = 0
        
        With Cells(2 + i, 15).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
                
        Cells(2 + i, 16).Value = 1
        
        With Cells(2 + i, 16).Validation
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
            .ErrorMessage = "Please enter a positive integer value"
        End With
    Next i
    
    'total volume requirement
    
    Cells(3 + num_item_types, 6).Value = "Total volume:"
    Cells(3 + num_item_types, 7).Formula = "=SUMPRODUCT(" & Cells(3, 7).Address(False, False) & ":" & Cells(2 + num_item_types, 7).Address(False, False) & "," & Cells(3, 16).Address(False, False) & ":" & Cells(2 + num_item_types, 16).Address(False, False) & ")"

    Cells(3 + num_item_types, 7).Interior.ColorIndex = 36
    Cells(3 + num_item_types, 7).Font.ColorIndex = 1
    Cells(3 + num_item_types, 7).NumberFormat = "0.00"
    
    Cells(3 + num_item_types, 6).Font.Bold = True
    Cells(3 + num_item_types, 7).Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThick
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThick
    End With
    
    'total weight requirement
    
    Cells(3 + num_item_types, 10).Value = "Total weight:"
    Cells(3 + num_item_types, 11).Formula = "=SUMPRODUCT(" & Cells(3, 11).Address(False, False) & ":" & Cells(2 + num_item_types, 11).Address(False, False) & "," & Cells(3, 16).Address(False, False) & ":" & Cells(2 + num_item_types, 16).Address(False, False) & ")"

    Cells(3 + num_item_types, 11).Interior.ColorIndex = 36
    Cells(3 + num_item_types, 11).Font.ColorIndex = 1
    Cells(3 + num_item_types, 11).NumberFormat = "0.00"
    
    Cells(3 + num_item_types, 10).Font.Bold = True
    Cells(3 + num_item_types, 11).Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThick
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThick
    End With
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(1 + num_item_types, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Dim item_width As Double
    Dim item_height As Double
    Dim item_length As Double
    
    Dim nw_x As Double
    Dim nw_y As Double
    
    item_width = Columns("D").width + Columns("E").width + Columns("F").width
    item_height = item_width
    item_length = item_width
    
    nw_x = Columns("A").width + Columns("B").width + Columns("C").width
    nw_y = ((num_item_types + 5) * Rows(1).height) + item_length * displacement_multiplier
    
    ActiveSheet.Shapes.AddShape(msoShapeRectangle, nw_x, nw_y, item_width, item_height).Select 'type, left, top, width, height
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Transparency = 1
    
    With Selection.ShapeRange.ThreeD
        .Visible = True
        .depth = item_length
        .ContourWidth = 0.2
        .ExtrusionColor.RGB = RGB(255, 255, 255) 'for containers
        .SetExtrusionDirection msoExtrusionTopRight
        .PresetLightingDirection = msoLightingTopRight
        .PresetMaterial = msoMaterialTranslucentPowder 'for containers
    End With
    
    ActiveSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, nw_x + item_width / 2, nw_y + item_height, Columns("D").width, 2 * Rows(1).height).TextFrame.Characters.Text = "x"
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Size = 11
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Bold = True
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Visible = msoFalse
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Line.Visible = msoFalse
    
    ActiveSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, nw_x, nw_y + item_height / 2, Columns("D").width, 2 * Rows(1).height).TextFrame.Characters.Text = "y"
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Size = 11
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Bold = True
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Visible = msoFalse
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Line.Visible = msoFalse
            
    ActiveSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, nw_x + item_width * (1 + displacement_multiplier / 2), nw_y + item_height * 0.75, Columns("D").width, 2 * Rows(1).height).TextFrame.Characters.Text = "z"
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Size = 11
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).TextFrame.Characters.Font.Bold = True
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Visible = msoFalse
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Line.Visible = msoFalse
    
    Columns("A:P").AutoFit
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupContainersWorksheet()
   
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("2.Containers")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing container data, and erase solution and visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("2.Containers").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.Containers"
            
            WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("3.Solution")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("3.Solution").Delete
            End If
            
            WorksheetExists = CheckWorksheetExistence("4.Visualization")
            If WorksheetExists = True Then
                ThisWorkbook.Worksheets("4.Visualization").Delete
            End If
            
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "2.Containers"
    End If
    
    ThisWorkbook.Worksheets("2.Containers").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim formulaText As String
    
    Cells(1, 1).Value = "Container Type ID"
    Cells(1, 2).Value = "Name"
    Cells(1, 3).Value = "Width (x)"
    Cells(1, 4).Value = "Height (y)"
    Cells(1, 5).Value = "Length (z)"
    Cells(1, 6).Value = "Volume capacity"
    Cells(1, 7).Value = "Weight capacity"
    Cells(1, 8).Value = "May be used?"
    Cells(1, 9).Value = "Cost"
    Cells(1, 10).Value = "Estimated number of containers"
    Cells(1, 11).Value = "Number of containers"
    
    Range(Cells(1, 1), Cells(1, 11)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Dim i As Long
    
    For i = 1 To num_container_types
    
        Range(Cells(1 + i, 1), Cells(1 + i, 11)).Select
        Selection.Font.ColorIndex = 2
        Selection.Interior.ColorIndex = 50
        
        If i Mod 2 = 0 Then
            Selection.Interior.TintAndShade = 0.02
        Else
            Selection.Interior.TintAndShade = -0.02
        End If
        
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .weight = xlThin
        End With
        
        Cells(1 + i, 1).Value = i
        Cells(1 + i, 1).Font.ColorIndex = 2
        Cells(1 + i, 1).Interior.ColorIndex = 1
        
        Cells(1 + i, 1).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 1).Address(False, False) & ")"
        Cells(1 + i, 1).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 2).Value = "Container type " & i
        
        Cells(1 + i, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(1 + i, 2).Address(False, False) & ")"
        Cells(1 + i, 2).FormatConditions(1).Interior.ColorIndex = 3
        
        Cells(1 + i, 3).NumberFormat = "0.00"
        Cells(1 + i, 3).Value = 1
        
        With Cells(1 + i, 3).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 4).NumberFormat = "0.00"
        Cells(1 + i, 4).Value = 1
        
        With Cells(1 + i, 4).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 5).NumberFormat = "0.00"
        Cells(1 + i, 5).Value = 1
        
        With Cells(1 + i, 5).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        Cells(1 + i, 6).NumberFormat = "0.00"
        Cells(1 + i, 6).Formula = "=" & Cells(1 + i, 3).Address(False, False) & "*" & Cells(1 + i, 4).Address(False, False) & "*" & Cells(1 + i, 5).Address(False, False)
        Cells(1 + i, 6).Interior.ColorIndex = 36
        Cells(1 + i, 6).Font.ColorIndex = 1
        
        Cells(1 + i, 7).NumberFormat = "0.00"
        Cells(1 + i, 7).Value = 1
        
        With Cells(1 + i, 7).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=0
            .ErrorMessage = "Please enter a positive value"
        End With
        
        With Cells(1 + i, 8).Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="May be used, Do not use" 'removed Must be used
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        Cells(1 + i, 8).Value = "May be used"
        
        Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Must be used"
        Cells(1 + i, 8).FormatConditions(1).Interior.ColorIndex = 4
        
        Cells(1 + i, 8).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="Do not use"
        Cells(1 + i, 8).FormatConditions(2).Interior.ColorIndex = 43
        
        Cells(1 + i, 9).NumberFormat = "0.00"
        Cells(1 + i, 9).Value = 1
        
        With Cells(1 + i, 9).Validation
            .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
            .ErrorMessage = "Please enter a nonnegative value"
        End With
        
        Cells(1 + i, 10).Formula = "=ROUNDUP(MAX('1.Items'!" & Cells(3 + num_item_types, 7).Address(False, False) & "/ (" & num_container_types & " * " & Cells(1 + i, 6).Address(False, False) & "), " & "'1.Items'!" & Cells(3 + num_item_types, 11).Address(False, False) & "/ (" & num_container_types & " * " & Cells(1 + i, 7).Address(False, False) & ")), 0)"
        Cells(1 + i, 10).Interior.ColorIndex = 36
        Cells(1 + i, 10).Font.ColorIndex = 1
        
        Cells(1 + i, 11).Value = 1
        
        With Cells(1 + i, 11).Validation
            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:="0"
            .ErrorMessage = "Please enter a positive integer value"
        End With
    Next i
    
    
    ' Display all duplicate values in red
    Dim uv As UniqueValues
    Set uv = Range(Cells(2, 2), Cells(1 + num_container_types, 2)).FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.ColorIndex = 3
    uv.StopIfTrue = False
    
    Columns("A:K").AutoFit
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupItemItemCompatibilityWorksheet()
   
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("1.Items")
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Items must exist for the item-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    If num_item_types = 1 Then
        MsgBox "There should be more than one type of item for the item-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
    
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing item-item compatibility data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "1.3.Item-Item Compatibility"
                        
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "1.3.Item-Item Compatibility"
    End If
    
    ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Cells(2, 1).Value = "Item Type 1"
    Cells(2, 2).Value = "Item type 2"
    Cells(2, 3).Value = "Compatible?"
    
    Range(Cells(1, 1), Cells(2, 3)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    k = 3
    For i = 1 To num_item_types
    
        For j = i + 1 To num_item_types
        
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Range(Cells(k, 1), Cells(k, 3)).Select
            Selection.Font.ColorIndex = 2
            
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .weight = xlThin
            End With
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Value = ThisWorkbook.Sheets("1.Items").Cells(2 + i, 2).Value
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 1).Interior.ColorIndex = 1
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Value = ThisWorkbook.Sheets("1.Items").Cells(2 + j, 2).Value
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 2).Interior.ColorIndex = 1
            
            With ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            Cells(k, 3).Value = "Yes"
            
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3).Interior.ColorIndex = 50
            
            k = k + 1
        
        Next j
    Next i
    
    ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Activate
    
    Range(Cells(1, 3), Cells(k - 1, 3)).Select
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
    Selection.FormatConditions(1).Interior.ColorIndex = 43
        
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    
    Cells(1, 1).Value = "Two items are compatible if they can be placed into the same container."
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub

Sub SetupContainerItemCompatibilityWorksheet()
   
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items and 2.Containers must exist for the container-item compatibility worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
    Dim reply As Integer
    If WorksheetExists = True Then
        reply = MsgBox("This will overwrite existing container-item compatibility data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        Else
            Application.DisplayAlerts = False
            
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "2.3.Container-ItemCompatibility"
                        
            Application.DisplayAlerts = True
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "2.3.Container-ItemCompatibility"
    End If
    
    ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Cells(2, 1).Value = "Container Type"
    Cells(2, 2).Value = "Item type"
    Cells(2, 3).Value = "Compatible?"
    
    Range(Cells(1, 1), Cells(2, 3)).Select
    
    Selection.Font.Bold = True
    
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 16
        .TintAndShade = 0
        .weight = xlThin
    End With
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    k = 3
    For i = 1 To num_container_types
    
        For j = 1 To num_item_types
        
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Range(Cells(k, 1), Cells(k, 3)).Select
            Selection.Font.ColorIndex = 2
            
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 16
                .TintAndShade = 0
                .weight = xlThin
            End With
            
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 1).Value = ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 2).Value
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 1).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 1).Interior.ColorIndex = 1
            
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 2).Value = ThisWorkbook.Sheets("1.Items").Cells(2 + j, 2).Value
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 2).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 2).Interior.ColorIndex = 1
            
            With ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 3).Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes, No"
                .IgnoreBlank = True
                .InCellDropdown = True
            End With
            
            Cells(k, 3).Value = "Yes"
            
            If ((ThisWorkbook.Sheets("1.Items").Cells(2 + j, 4).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 3).Value) And (ThisWorkbook.Sheets("1.Items").Cells(2 + j, 4).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 4).Value)) _
             Or ((ThisWorkbook.Sheets("1.Items").Cells(2 + j, 5).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 3).Value) And (ThisWorkbook.Sheets("1.Items").Cells(2 + j, 5).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 4).Value)) Then
                Cells(k, 3).Value = "No"
            End If
            
            If ((ThisWorkbook.Sheets("1.Items").Cells(2 + j, 4).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 3).Value) Or _
               (ThisWorkbook.Sheets("1.Items").Cells(2 + j, 4).Value > ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 4).Value)) And _
               (ThisWorkbook.Sheets("1.Items").Cells(2 + j, 7).Value = "No") Then
                Cells(k, 3).Value = "No"
            End If
            
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 3).Font.ColorIndex = 2
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 3).Interior.ColorIndex = 50
            
            k = k + 1
        
        Next j
    Next i
    
    ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Activate
    
    Range(Cells(1, 3), Cells(k - 1, 3)).Select
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="No"
    Selection.FormatConditions(1).Interior.ColorIndex = 43
        
    Columns("A").AutoFit
    Columns("B").AutoFit
    Columns("C").AutoFit
    
    Cells(1, 1).Value = "A container is compatible with an item if the item can be placed into the container."
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    Cells(1, 1).Select
End Sub
Sub SetupSolutionWorksheet()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items and 2.Containers must exist for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 16).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Dim num_containers As Long
    
    num_containers = 0
    For i = 1 To num_container_types
        num_containers = num_containers + ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
    Next i
    
    If num_containers = 0 Then
        MsgBox "There must be at least one container for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim estimatedTime As Double
    estimatedTime = 0
    
    estimatedTime = num_items * num_containers * 0.03
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        WorksheetExists = CheckWorksheetExistence("4.Visualization")
        If WorksheetExists = True Then
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), overwrite existing solution data, and erase the visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("3.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("4.Visualization").Delete
                
                ThisWorkbook.Worksheets("3.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "3.Solution"
                
                Application.DisplayAlerts = True
            End If
        Else
            reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds), and overwrite existing solution data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
            If reply = vbNo Then
                ThisWorkbook.Worksheets("3.Solution").Activate
                Exit Sub
            Else
                Application.DisplayAlerts = False
            
                ThisWorkbook.Worksheets("3.Solution").Delete
                ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Solution"
                
                Application.DisplayAlerts = True
            End If
        End If
    Else
        reply = MsgBox("This will take some time (estimated " & estimatedTime & " seconds). Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "3.Solution"
    End If
    
    ThisWorkbook.Worksheets("3.Solution").Activate
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    'ActiveSheet.EnableFormatConditionsCalculation = False
    
    Dim container_count As Long
    Dim formulaText As String
    Dim objectiveFormula As String
    Dim temp_upper_bound As Double
    Dim combinedRange As Range
    
    Dim formula_delimiter As String
    If InStr(CStr(WorksheetFunction.Pi), ".") > 0 Then
        formula_delimiter = ","
    Else
        formula_delimiter = ";"
    End If
    
    objectiveFormula = "="
    Cells(1, 1).Value = "Total net profit:"
    Cells(1, 1).Font.Bold = True
    Cells(1, 2).Font.ColorIndex = 1
    Cells(1, 2).Interior.ColorIndex = 36
    
    Dim offset As Long
    offset = 0
    
    For i = 1 To num_container_types

        container_count = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
        
        For j = 1 To container_count
            
            Application.StatusBar = "Setting up container type " & i & ", container " & j
            Cells(5, 1 + offset).Value = "Item count"
            Cells(5, 2 + offset).Value = "Item type name"
            Cells(4, 3 + offset).Value = "Origin corner"
            Cells(5, 3 + offset).Value = "x coordinate"
            Cells(5, 4 + offset).Value = "y coordinate"
            Cells(5, 5 + offset).Value = "z coordinate"
            Cells(5, 6 + offset).Value = "Orientation"
            Cells(5, 7 + offset).Value = "Item type ID"
            Cells(5, 8 + offset).Value = "Volume"
            Cells(5, 9 + offset).Value = "Weight"
            Cells(5, 10 + offset).Value = "Profit"
            
            Range(Cells(4, 3 + offset), Cells(4, 5 + offset)).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Merge
            End With
            
            Range(Cells(6, 2 + offset), Cells(5 + num_items, 2 + offset)).Select

            With Selection
                .Font.ColorIndex = 1
                .Interior.ColorIndex = 33
            End With
            
            With Selection.Validation
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Items'!" & Cells(3, 2).Address & ":" & Cells(2 + num_item_types, 2).Address
                .IgnoreBlank = True
                .InCellDropdown = True
                .ErrorTitle = "Warning"
                .ErrorMessage = "Please select a value from the list available in the selected cell."
                .ShowError = True
            End With
            
            Range(Cells(6, 3 + offset), Cells(5 + num_items, 6 + offset)).Select

            With Selection
                .Font.ColorIndex = 1
                .Interior.ColorIndex = 33
                .FormatConditions.Add Type:=xlExpression, Formula1:="=ISBLANK(" & Cells(6, 2 + offset).Address(False, True) & ")"
                .FormatConditions(1).Font.ColorIndex = 33
            End With
            
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 3).Value
            Range(Cells(6, 3 + offset), Cells(5 + num_items, 3 + offset)).Select

            With Selection
            
                .Validation.Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .Validation.ErrorMessage = "Please enter a nonnegative value"
                
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(1).Interior.Pattern = xlNone
'                .FormatConditions(1).Interior.ColorIndex = 3
'                .FormatConditions(1).StopIfTrue = True
                
            End With

            'temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 4).Value
            Range(Cells(6, 4 + offset), Cells(5 + num_items, 4 + offset)).Select

            With Selection
            
                .Validation.Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator:=xlGreater, Formula1:=-epsilon
                .Validation.ErrorMessage = "Please enter a nonnegative value"
                
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(1).Interior.Pattern = xlNone
'                .FormatConditions(1).Interior.ColorIndex = 3
'                .FormatConditions(1).StopIfTrue = True
                
            End With
            
            Range(Cells(6, 6 + offset), Cells(5 + num_items, 6 + offset)).Select

            With Selection
                .Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="xyz, zyx, xzy, yzx, yxz, zxy"
                .Validation.IgnoreBlank = True
                .Validation.InCellDropdown = True
                
                .Value = "xyz"
            End With
            
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 6).Value
            Range(Cells(6, 8 + offset), Cells(5 + num_items, 8 + offset)).Select
            
            With Selection
                
                .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                .FormatConditions(1).Interior.Pattern = xlNone
                .FormatConditions(1).Interior.ColorIndex = 36
                .FormatConditions(1).StopIfTrue = True
    
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(2).Interior.Pattern = xlNone
'                .FormatConditions(2).Interior.ColorIndex = 3
'                .FormatConditions(2).StopIfTrue = True
            
            End With
            
            'temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 7).Value
            Range(Cells(6, 9 + offset), Cells(5 + num_items, 9 + offset)).Select
            
            With Selection
                            
                .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="="" """
                .FormatConditions(1).Interior.Pattern = xlNone
                .FormatConditions(1).Interior.ColorIndex = 36
                .FormatConditions(1).StopIfTrue = True
    
'                .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
'                .FormatConditions(2).Interior.Pattern = xlNone
'                .FormatConditions(2).Interior.ColorIndex = 3
'                .FormatConditions(2).StopIfTrue = True
                
            End With
            
            For k = 1 To num_items
                
                Cells(5 + k, 1 + offset).Value = k
                Cells(5 + k, 1 + offset).Font.ColorIndex = 2
                Cells(5 + k, 1 + offset).Interior.ColorIndex = 1
                
                Range(Cells(5 + k, 7 + offset), Cells(5 + k, 10 + offset)).Select
                Selection.Font.ColorIndex = 1
                Selection.Interior.ColorIndex = 36
                
                Cells(5 + k, 3 + offset).Value = 0
                Cells(5 + k, 3 + offset).NumberFormat = "0.00"
                
                Cells(5 + k, 4 + offset).Value = 0
                Cells(5 + k, 4 + offset).NumberFormat = "0.00"
                
                Cells(5 + k, 5 + offset).Value = 0
                Cells(5 + k, 5 + offset).NumberFormat = "0.00"
                          
                formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).Address(False, False) & Chr(34) & ")"
                formulaText = formulaText & ",'1.Items'!" & Cells(3, 2).Address & ":" & Cells(2 + num_item_types, 2).Address & ", 0),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
                
                Cells(5 + k, 7 + offset).Formula = formulaText

                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 7 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 7).Address(False, False) & ":" & Cells(2 + num_items, 7).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 7 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 8 + offset).Formula = formulaText
                Cells(5 + k, 8 + offset).NumberFormat = "0.00"

                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 7 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 11).Address(False, False) & ":" & Cells(2 + num_items, 11).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 7 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 9 + offset).Formula = formulaText
                Cells(5 + k, 9 + offset).NumberFormat = "0.00"
                
                formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 7 + offset).Address(False, False) & "),"
                formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 15).Address(False, False) & ":" & Cells(2 + num_items, 15).Address(False, False)
                formulaText = formulaText & "," & Cells(5 + k, 7 + offset).Address(False, False) & " ),"
                formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

                Cells(5 + k, 10 + offset).Formula = formulaText
                Cells(5 + k, 10 + offset).NumberFormat = "0.00"

                Range(Cells(5 + k, 1 + offset), Cells(5 + k, 10 + offset)).Select
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 16
                    .TintAndShade = 0
                    .weight = xlThin
                End With
                
            Next k
            
            Cells(3, 1 + offset).Value = "Container " & j & " of " & ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 2).Value
            
            Cells(3, 7 + offset).Value = "Item count"

            formulaText = "=COUNT(" & Cells(6, 7 + offset).Address & ":" & Cells(5 + num_items, 7 + offset).Address & ")"
        
            Cells(4, 7 + offset).Formula = formulaText
            Cells(4, 7 + offset).Interior.ColorIndex = 36
            
            Cells(3, 8 + offset).Value = "Total volume"

            formulaText = "=SUM(" & Cells(6, 8 + offset).Address & ":" & Cells(5 + num_items, 8 + offset).Address & ")"
        
            Cells(4, 8 + offset).Formula = formulaText
            Cells(4, 8 + offset).Interior.ColorIndex = 36
            Cells(4, 8 + offset).NumberFormat = "0.00"
            
            temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 6).Value

            Cells(4, 8 + offset).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
            Cells(4, 8 + offset).FormatConditions(1).Interior.Pattern = xlNone
            Cells(4, 8 + offset).FormatConditions(1).Interior.ColorIndex = 3
            Cells(4, 8 + offset).FormatConditions(1).StopIfTrue = True
            
            Cells(3, 9 + offset).Value = "Total weight"

            formulaText = "=SUM(" & Cells(6, 9 + offset).Address & ":" & Cells(5 + num_items, 9 + offset).Address & ")"
        
            Cells(4, 9 + offset).Formula = formulaText
            Cells(4, 9 + offset).Interior.ColorIndex = 36
            Cells(4, 9 + offset).NumberFormat = "0.00"
            
            temp_upper_bound = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 7).Value

            Cells(4, 9 + offset).FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:=temp_upper_bound
            Cells(4, 9 + offset).FormatConditions(1).Interior.Pattern = xlNone
            Cells(4, 9 + offset).FormatConditions(1).Interior.ColorIndex = 3
            Cells(4, 9 + offset).FormatConditions(1).StopIfTrue = True

            Cells(3, 10 + offset).Value = "Net profit"

            formulaText = "=SUM(" & Cells(6, 10 + offset).Address & ":" & Cells(5 + num_items, 10 + offset).Address & ")"
            formulaText = formulaText & "+ IF(COUNTA(" & "'3.Solution'!" & Cells(6, 2 + offset).Address & ":" & Cells(5 + num_items, 2 + offset).Address & "),"
            formulaText = formulaText & "-INDEX('2.Containers'!" & Cells(2, 9).Address & ":" & Cells(1 + num_container_types, 9).Address & "," & i & "), 0)"
            
            Cells(4, 10 + offset).Formula = formulaText
            Cells(4, 10 + offset).Interior.ColorIndex = 36
            Cells(4, 10 + offset).NumberFormat = "0.00"
                
            objectiveFormula = objectiveFormula & "+" & Cells(4, 10 + offset).Address
            
            offset = offset + column_offset
        Next j
    Next i
           
    Application.StatusBar = "Setting up unpacked item list"
    
    Cells(5, 1 + offset).Value = "Item count"
    Cells(5, 2 + offset).Value = "Item type name"
    Cells(5, 3 + offset).Value = "Item type ID"
    Cells(5, 4 + offset).Value = "Volume"
    Cells(5, 5 + offset).Value = "Weight"
    Cells(5, 6 + offset).Value = "Profit"
    
    Range(Cells(6, 2 + offset), Cells(5 + num_items, 2 + offset)).Select

    With Selection
        .Font.ColorIndex = 1
        .Interior.ColorIndex = 33
    End With
    
    With Selection.Validation
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="='1.Items'!" & Cells(3, 2).Address & ":" & Cells(2 + num_item_types, 2).Address
        .IgnoreBlank = True
        .InCellDropdown = True
        .ErrorTitle = "Warning"
        .ErrorMessage = "Please select a value from the list available in the selected cell."
        .ShowError = True
    End With
    
    For k = 1 To num_items
        
        Cells(5 + k, 1 + offset).Value = k
        Cells(5 + k, 1 + offset).Font.ColorIndex = 2
        Cells(5 + k, 1 + offset).Interior.ColorIndex = 15
        
        Range(Cells(5 + k, 3 + offset), Cells(5 + k, 6 + offset)).Select
        Selection.Font.ColorIndex = 1
        Selection.Interior.ColorIndex = 36
                  
        formulaText = "=IFERROR(MATCH(" & "INDIRECT(" & Chr(34) & Cells(5 + k, 2 + offset).Address(False, False) & Chr(34) & ")"
        formulaText = formulaText & ",'1.Items'!" & Cells(3, 2).Address & ":" & Cells(2 + num_item_types, 2).Address & ", 0),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")"
        
        Cells(5 + k, 3 + offset).Formula = formulaText

        formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).Address(False, False) & "),"
        formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 7).Address(False, False) & ":" & Cells(2 + num_items, 7).Address(False, False)
        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).Address(False, False) & " ),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

        Cells(5 + k, 4 + offset).Formula = formulaText
        Cells(5 + k, 4 + offset).NumberFormat = "0.00"

        formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).Address(False, False) & "),"
        formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 11).Address(False, False) & ":" & Cells(2 + num_items, 11).Address(False, False)
        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).Address(False, False) & " ),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

        Cells(5 + k, 5 + offset).Formula = formulaText
        Cells(5 + k, 5 + offset).NumberFormat = "0.00"
        
        formulaText = "=IFERROR(IF(ISNUMBER(" & Cells(5 + k, 3 + offset).Address(False, False) & "),"
        formulaText = formulaText & "INDEX('1.Items'!" & Cells(3, 15).Address(False, False) & ":" & Cells(2 + num_items, 15).Address(False, False)
        formulaText = formulaText & "," & Cells(5 + k, 3 + offset).Address(False, False) & " ),"
        formulaText = formulaText & Chr(34) & " " & Chr(34) & ")," & Chr(34) & " " & Chr(34) & ")"

        Cells(5 + k, 6 + offset).Formula = formulaText
        Cells(5 + k, 6 + offset).NumberFormat = "0.00"

        Range(Cells(5 + k, 1 + offset), Cells(5 + k, 6 + offset)).Select
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .TintAndShade = 0
            .weight = xlThin
        End With
        
    Next k
    
    Cells(3, 1 + offset).Value = "Unpacked items"
    
    Cells(3, 2 + offset).Value = "Item count"

    formulaText = "=COUNT(" & Cells(6, 3 + offset).Address & ":" & Cells(5 + num_items, 3 + offset).Address & ")"

    Cells(4, 2 + offset).Formula = formulaText
    Cells(4, 2 + offset).Interior.ColorIndex = 36
    
    Cells(3, 4 + offset).Value = "Total volume"

    formulaText = "=SUM(" & Cells(6, 4 + offset).Address & ":" & Cells(5 + num_items, 4 + offset).Address & ")"

    Cells(4, 4 + offset).Formula = formulaText
    Cells(4, 4 + offset).Interior.ColorIndex = 36
    Cells(4, 4 + offset).NumberFormat = "0.00"
    
    Cells(3, 5 + offset).Value = "Total weight"

    formulaText = "=SUM(" & Cells(6, 5 + offset).Address & ":" & Cells(5 + num_items, 5 + offset).Address & ")"

    Cells(4, 5 + offset).Formula = formulaText
    Cells(4, 5 + offset).Interior.ColorIndex = 36
    Cells(4, 5 + offset).NumberFormat = "0.00"

    Cells(3, 6 + offset).Value = "Missed profit"

    formulaText = "=SUM(" & Cells(6, 6 + offset).Address & ":" & Cells(5 + num_items, 6 + offset).Address & ")"
    
    Cells(4, 6 + offset).Formula = formulaText
    Cells(4, 6 + offset).Interior.ColorIndex = 36
    Cells(4, 6 + offset).NumberFormat = "0.00"
           
    Cells(1, 2).Value = objectiveFormula
    
    Cells(1, 2).FormatConditions.Add Type:=xlExpression, Formula1:="=ISERROR(" & Cells(1, 2).Address & ")"
    Cells(1, 2).FormatConditions(1).Interior.ColorIndex = 3
    
    Rows("1:5").Select
    Selection.Font.Bold = True
    
    Columns.AutoFit
    
    Cells(num_items + 7, 1).Value = "List of detected infeasibilities"
    Cells(num_items + 7, 1).Font.Bold = True
    
    offset = 0

    For i = 1 To num_container_types

        container_count = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
        
        For j = 1 To container_count

            Columns(7 + offset).EntireColumn.Hidden = True

            offset = offset + column_offset
        Next j
    Next i
    
    Columns(3 + offset).EntireColumn.Hidden = True
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    'ActiveSheet.EnableFormatConditionsCalculation = True
    
    Cells(1, 1).Select
    
    MsgBox ("Solution worksheet setup complete.")
    
End Sub
Sub SetupVisualizationWorksheet()

    Dim WorksheetExists As Boolean
    Dim MissingCoordinates As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Containers, and 3.Solution must exist for the visualization worksheet to be setup."
        Exit Sub
    End If
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 16).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the solution worksheet to be setup."
        Exit Sub
    End If
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Dim num_containers As Long
    
    num_containers = 0
    For i = 1 To num_container_types
        num_containers = num_containers + ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
    Next i
    
    If num_containers = 0 Then
        MsgBox "There must be at least one container for the solution worksheet to be setup."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        
        reply = MsgBox("This will overwrite existing visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")

        If reply = vbNo Then
            ThisWorkbook.Worksheets("4.Visualization").Activate
            Exit Sub
        Else
            Application.DisplayAlerts = False
            ThisWorkbook.Worksheets("4.Visualization").Delete
            Application.DisplayAlerts = True
            ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Visualization"
        End If
    Else
        ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)).Name = "4.Visualization"
    End If
    
    Call RefreshVisualizationWorksheet
End Sub
Sub RefreshVisualizationWorksheet()
    
    Dim WorksheetExists As Boolean
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = False Then
        Exit Sub
    End If
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    ActiveSheet.Shapes.SelectAll
    Selection.Delete
    
    Rows("1").Select
    Selection.Clear
    Cells(1, 1).Select
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 16).Value
    Next i
   
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Dim num_containers As Long
    Dim container_count As Long
    
    num_containers = 0
    For i = 1 To num_container_types
        num_containers = num_containers + ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
    Next i
    
    Dim item_label_option As String
    item_label_option = ThisWorkbook.Worksheets("CLP Solver Console").Cells(8, 3).Value
    
    Dim container_label_option As String
    container_label_option = ThisWorkbook.Worksheets("CLP Solver Console").Cells(9, 3).Value

    Application.ScreenUpdating = False
            
    'scaling - determine the maximum width and height of the containers
    
    Dim focus_shape As Long
    focus_shape = 0
    
    Dim row_index As Long
    Dim file_name As String
    
    Dim v_scale As Double
    Dim offset As Long
    Dim x_offset As Long
    Dim y_offset As Double
    Dim item_x_offset As Double
    Dim item_y_offset As Double
    
    Dim nw_x As Double
    Dim nw_y As Double
    
    Dim container_width As Double
    Dim container_height As Double
    Dim container_length As Double
    Dim max_x As Double
    Dim max_y As Double
    
    Dim rotation As String
    
    Dim original_item_width As Double
    Dim original_item_height As Double
    Dim original_item_length As Double
    
    Dim rotated_item_width As Double
    Dim rotated_item_height As Double
    Dim rotated_item_length As Double
    
    Dim max_item_dimension As Double
    
    Dim swap_double As Double
    
    Dim row_height As Double
    row_height = Rows("1").height
        
    Dim column_width As Double
    column_width = Columns("Z").width
    
    max_x = ThisWorkbook.Sheets("2.Containers").Cells(2, 3) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(2, 5))
    max_y = ThisWorkbook.Sheets("2.Containers").Cells(2, 4) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(2, 5))
    
    For i = 1 To num_container_types
        
        If max_x < ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 3) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 5)) Then
            max_x = ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 3) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 5))
        End If
               
        If max_y < ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 4) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 5)) Then
            max_y = ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 4) + (displacement_multiplier * ThisWorkbook.Sheets("2.Containers").Cells(1 + i, 5))
        End If
    Next i
    
    If max_x >= max_y Then
        v_scale = width_limit / max_x
    Else
        v_scale = width_limit / max_y
    End If
    
    'v_scale = v_scale * 2
    'ActiveWindow.Zoom = 50
    'MsgBox v_scale
    
    offset = 0
    
    x_offset = 1
    y_offset = 2 * row_height
    
    For i = 1 To num_container_types
    
        container_count = ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
        
        For j = 1 To container_count
            
            container_width = v_scale * ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 3).Value
            container_height = v_scale * ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 4).Value
            container_length = v_scale * ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 5).Value
            
            nw_x = column_width * x_offset
            nw_y = y_offset + v_scale * max_y - container_height
            
            Cells(1, 1 + x_offset).Value = ThisWorkbook.Worksheets("3.Solution").Cells(3, 1 + offset).Value
            Cells(1, 1 + x_offset).Font.Bold = msoTrue
            
            ActiveSheet.Shapes.AddShape(msoShapeRectangle, nw_x, nw_y, container_width, container_height).Select 'type, left, top, width, height
            ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Fill.Transparency = 1
            ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Name = "Container"
            Selection.Interior.ColorIndex = 50
            
            
            With Selection.ShapeRange.ThreeD
                .Visible = True
                .depth = container_length
                .ContourWidth = 0.2
                .ExtrusionColor.RGB = RGB(255, 255, 255) 'for containers
                .SetExtrusionDirection msoExtrusionTopRight
                .PresetLightingDirection = msoLightingTopRight
                .PresetMaterial = msoMaterialTranslucentPowder 'for containers
            End With
            
            If container_label_option = "Yes" Then
                Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(3, 1 + offset).Value
            End If
            Selection.ShapeRange.TextFrame2.TextRange.Font.Bold = msoTrue
            Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
            Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
            
            l = ThisWorkbook.Worksheets("3.Solution").Cells(4, 7 + offset).Value

            If (l > 0) And (focus_shape = 0) Then
                focus_shape = ActiveSheet.Shapes.Count
            End If
            
            
            For k = 1 To l

                If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value <> "" Then

                    rotation = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Text
                    row_index = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 7).Value + 2

                    original_item_width = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 4)
                    original_item_height = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 5)
                    original_item_length = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 6)

                    ' rotate it
                    
                    If rotation = "xyz" Then
                        rotated_item_width = original_item_width
                        rotated_item_height = original_item_height
                        rotated_item_length = original_item_length
                    End If
                    
                    If rotation = "zyx" Then
                        rotated_item_width = original_item_length
                        rotated_item_height = original_item_height
                        rotated_item_length = original_item_width
                    End If
                    
                    If rotation = "xzy" Then
                        rotated_item_width = original_item_width
                        rotated_item_height = original_item_length
                        rotated_item_length = original_item_height
                    End If
                    
                    If rotation = "yzx" Then
                        rotated_item_width = original_item_height
                        rotated_item_height = original_item_length
                        rotated_item_length = original_item_width
                    End If
                    
                    If rotation = "yxz" Then
                        rotated_item_width = original_item_height
                        rotated_item_height = original_item_width
                        rotated_item_length = original_item_length
                    End If
                    
                    If rotation = "zxy" Then
                        rotated_item_width = original_item_length
                        rotated_item_height = original_item_width
                        rotated_item_length = original_item_height
                    End If
                    
                    max_item_dimension = rotated_item_width + (displacement_multiplier * rotated_item_length)
                    If max_item_dimension < original_item_height + (displacement_multiplier * rotated_item_length) Then
                        max_item_dimension = original_item_height + (displacement_multiplier * rotated_item_length)
                    End If

                    'create it at the max_item_dimension, max_item_dimension

                    ActiveSheet.Shapes.AddShape(msoShapeRectangle, max_item_dimension, max_item_dimension, rotated_item_width, rotated_item_height).Select
                    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Name = "Item"

                    If item_label_option = "Yes" Then
                        Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value
                        Selection.ShapeRange.TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
                        'Selection.ShapeRange.TextFrame2.WordWrap = msoFalse
                    End If

                    Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
                    Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter

                    file_name = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)

                    If file_name <> "" Then

                        #If Mac Then
                            file_name = Application.ThisWorkbook.Path & ":" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                        #Else
                            file_name = Application.ThisWorkbook.Path & "\" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                        #End If

                        If Dir(file_name) <> "" Then
                            With Selection.ShapeRange.Fill
                                .UserPicture file_name
                            End With
                        End If

                    Else
                        Selection.Interior.Color = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3).Interior.Color
                    End If

                    With Selection.ShapeRange.ThreeD
                        .Visible = True
                        .depth = rotated_item_length
                        .ContourWidth = 0
                        .ExtrusionColor.RGB = RGB(255, 255, 255) 'for items
                        .SetExtrusionDirection msoExtrusionTopRight
                        .PresetLightingDirection = msoLightingTopRight
                        .PresetMaterial = msoMaterialClear 'for items
                    End With
                    
                    'carry it to the sw corner

                    Selection.ShapeRange.IncrementLeft nw_x - max_item_dimension
                    Selection.ShapeRange.IncrementTop nw_y + container_height - rotated_item_height - max_item_dimension
                    
                    'carry it to the origin
                    
                    Selection.ShapeRange.IncrementLeft displacement_multiplier * (container_length - rotated_item_length)
                    Selection.ShapeRange.IncrementTop -displacement_multiplier * (container_length - rotated_item_length)

                    'carry it to its place

                    Selection.ShapeRange.IncrementLeft (v_scale * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 3).Value) - v_scale * displacement_multiplier * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 5).Value
                    Selection.ShapeRange.IncrementTop -(v_scale * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 4).Value) + v_scale * displacement_multiplier * ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 5).Value

                Else
                    Exit For
                End If

            Next k
            
            offset = offset + column_offset
            
            x_offset = x_offset + Int(v_scale * max_x / column_width) + 2
            
        Next j
        
    Next i
    
    'visualize unpacked items
    
    Cells(1, 1 + x_offset).Value = "Unpacked items"
    Cells(1, 1 + x_offset).Font.Bold = True
    
    item_x_offset = x_offset * column_width

    l = ThisWorkbook.Worksheets("3.Solution").Cells(4, 2 + offset).Value

    For k = 1 To l

        If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value <> "" Then

            row_index = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 3).Value + 2

            original_item_width = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 4)
            original_item_height = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 5)
            original_item_length = v_scale * ThisWorkbook.Worksheets("1.Items").Cells(row_index, 6)

            rotated_item_width = original_item_width
            rotated_item_height = original_item_height
            rotated_item_length = original_item_length

            max_item_dimension = rotated_item_width + (displacement_multiplier * rotated_item_length)
            If max_item_dimension < original_item_height + (displacement_multiplier * rotated_item_length) Then
                max_item_dimension = original_item_height + (displacement_multiplier * rotated_item_length)
            End If

            'create it at the max_item_dimension, max_item_dimension

            ActiveSheet.Shapes.AddShape(msoShapeRectangle, max_item_dimension, max_item_dimension, rotated_item_width, rotated_item_height).Select

            If item_label_option = "Yes" Then
                Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2).Value
                Selection.ShapeRange.TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
            End If

            Selection.ShapeRange.TextFrame2.VerticalAnchor = msoAnchorMiddle
            Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter

            file_name = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)

            If file_name <> "" Then

                #If Mac Then
                    file_name = Application.ThisWorkbook.Path & ":" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                #Else
                    file_name = Application.ThisWorkbook.Path & "\" & ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3)
                #End If

                If Dir(file_name) <> "" Then
                    With Selection.ShapeRange.Fill
                        .UserPicture file_name
                    End With
                End If

            Else
                Selection.Interior.Color = ThisWorkbook.Worksheets("1.Items").Cells(row_index, 3).Interior.Color
            End If

            With Selection.ShapeRange.ThreeD
                .Visible = True
                .depth = rotated_item_length
                .ContourWidth = 0
                .ExtrusionColor.RGB = RGB(255, 255, 255) 'for items
                .SetExtrusionDirection msoExtrusionTopRight
                .PresetLightingDirection = msoLightingTopRight
                .PresetMaterial = msoMaterialClear 'for items
            End With

            'carry it to the sw corner

            Selection.ShapeRange.IncrementLeft item_x_offset - max_item_dimension
            Selection.ShapeRange.IncrementTop height_limit - max_item_dimension

            item_x_offset = item_x_offset + rotated_item_width + 5
        Else
            Exit For
        End If

    Next k
            
    Cells(1, 1).Select
    
    Application.ScreenUpdating = True
    
End Sub


Sub AnimateVisualizationWorksheet()

    Application.EnableCancelKey = xlErrorHandler
    On Error Resume Next
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers") And CheckWorksheetExistence("3.Solution") And CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Containers, 3.Solution, and 4.Visualization must exist for the animation to start."
        Exit Sub
    End If
    
    Dim i As Long
    
    Dim max_row As Long
    max_row = (height_limit / Rows(1).RowHeight) + 2
    
    Dim offset As Long
    offset = 1
    Dim offset_increment As Long
    offset_increment = (width_limit / Columns(1).ColumnWidth) + 1
    
    Dim original_zoom As Long
    original_zoom = ActiveWindow.Zoom
    
    Dim selection_column_index As Long
    selection_column_index = ActiveCell.Column
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    
    Dim num_items As Long
    
    num_items = 0
    For i = 1 To num_item_types
        num_items = num_items + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 16).Value
    Next i
    
    If num_items = 0 Then
        MsgBox "There must be at least one item for the animation to start."
        Exit Sub
    End If
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    Dim num_containers As Long
    
    num_containers = 0
    For i = 1 To num_container_types
        num_containers = num_containers + ThisWorkbook.Worksheets("2.Containers").Cells(1 + i, 11).Value
    Next i
    
    If num_containers = 0 Then
        MsgBox "There must be at least one container for the animation to start."
        Exit Sub
    End If
    
    reply = MsgBox("This will take up to " & num_items + num_containers & " seconds. You can speed up the animation by pressing (or holding down) the <Esc> key. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
    If reply = vbNo Then
        Exit Sub
    End If
    
    Dim animation_advance_type As Long
    
    If ThisWorkbook.Worksheets("CLP Solver Console").Cells(10, 3).Value = "One second intervals" Then
        animation_advance_type = 0
    Else
        animation_advance_type = 1
    End If
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    Cells(1, 1).Select
    
    ActiveSheet.Shapes.SelectAll

    Selection.Visible = False

    DoEvents

    Application.Wait (Now() + TimeValue("0:00:01"))

    For i = 1 To ActiveSheet.Shapes.Count
    
        If ActiveSheet.Shapes(i).Name = "Container" Then
            Range(Cells(1, offset), Cells(max_row, offset + column_offset)).Select
            ActiveWindow.Zoom = True
            offset = offset + offset_increment
        End If
        
        ActiveSheet.Shapes(i).Visible = True
        DoEvents
        Cells(1, ActiveSheet.Shapes(i).BottomRightCell.Column).Select
        DoEvents
        If animation_advance_type = 0 Then
            Application.Wait (Now() + TimeValue("0:00:01"))
            DoEvents
        ElseIf i < ActiveSheet.Shapes.Count Then
            reply = MsgBox("Next item?", vbOKOnly, "CLP Spreadsheet Solver")
        End If
    Next i
    
    ThisWorkbook.Worksheets("4.Visualization").Activate
    
    Cells(1, selection_column_index).Select
    
    ActiveWindow.Zoom = original_zoom
    
    reply = MsgBox("Animation finished.         ", vbOKOnly, "CLP Spreadsheet Solver")
    
End Sub


Private Sub About()
    Dim reply As Integer
    
    reply = MsgBox("CLP Spreadsheet Solver v1.21" & Chr(13) & "Open source, developed by Dr Gunes Erdogan, 2019 (G.Erdogan@bath.ac.uk), School of Management, University of Bath." & Chr(13) _
& Chr(13) & "The latest version of the solver can be downloaded at: http://people.bath.ac.uk/ge277/index.php/clp-spreadsheet-solver/" & Chr(13) & Chr(13) & "DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE ORIGINAL DEVELOPER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", vbOKOnly, "CLP Spreadsheet Solver")
End Sub
Private Sub SendFeedback()
    ThisWorkbook.FollowHyperlink "mailto:G.Erdogan@bath.ac.uk&subject=CLP Spreadsheet Solver"
End Sub


Private Sub ResetWorkbook()

    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    reply = MsgBox("This will delete all existing problem data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
    If reply = vbNo Then
        Exit Sub
    Else
    
        Application.EnableEvents = False
        Application.DisplayAlerts = False
        
        WorksheetExists = CheckWorksheetExistence("4.Visualization")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("4.Visualization").Delete
            DoEvents
        End If

        WorksheetExists = CheckWorksheetExistence("3.Solution")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("3.Solution").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("2.Containers")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("2.Containers").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Delete
            DoEvents
        End If
        
        WorksheetExists = CheckWorksheetExistence("1.Items")
        If WorksheetExists = True Then
            ThisWorkbook.Worksheets("1.Items").Delete
            DoEvents
        End If
    
        WorksheetExists = CheckWorksheetExistence("CLP Solver Console")
        If WorksheetExists = False Then
            Call SetupConsoleWorksheet
        End If
        
        Application.DisplayAlerts = True
    End If

    WorksheetExists = CheckWorksheetExistence("CLP Solver Console")
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    Application.EnableEvents = True
    ThisWorkbook.Worksheets("CLP Solver Console").Activate
End Sub

Sub SortItemTypes()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_item_types As Long
    num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
        
    WorksheetExists = CheckWorksheetExistence("1.Items")
    If WorksheetExists = False Then
        MsgBox "Worksheet 1.Items must exist for the items to be sorted."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Containers") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing container, solution, and visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    ThisWorkbook.Worksheets("1.Items").Activate
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("3.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.Containers")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.Containers").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("1.3.Item-Item Compatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Item-Item Compatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    Range(Cells(3, 2), Cells(num_item_types + 2, 16)).Select
    
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
End Sub

Sub SortContainerTypes()
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    Dim num_container_types As Long
    num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
        
    WorksheetExists = CheckWorksheetExistence("2.Containers")
    If WorksheetExists = False Then
        MsgBox "Worksheet 2.Containers must exist for the containers to be sorted."
        Exit Sub
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        reply = MsgBox("This will delete existing solution and visualization data. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Exit Sub
        End If
    End If
    
    WorksheetExists = CheckWorksheetExistence("4.Visualization")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("4.Visualization").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("3.Solution")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("3.Solution").Delete
        Application.DisplayAlerts = True
    End If
    
    WorksheetExists = CheckWorksheetExistence("2.3.Container-ItemCompatibility")
    If WorksheetExists = True Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Delete
        Application.DisplayAlerts = True
    End If
    
    ThisWorkbook.Worksheets("2.Containers").Activate
    
    Range(Cells(2, 2), Cells(num_container_types + 1, 11)).Select
    
    Selection.Sort Key1:=Columns("B"), Order1:=xlAscending, Header:=xlNo
    
End Sub
Sub SetupMenuItems()
    Call ThisWorkbook.Workbook_Activate
End Sub

Private Sub WatchTutorial()
    ThisWorkbook.FollowHyperlink "https://www.youtube.com/watch?v=-0MCkd-CjD0"
End Sub


' ribbon calls and tab activation

#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then

Sub ResetWorkbookRibbonCall(control As IRibbonControl)
    Call ResetWorkbook
End Sub
Sub SetupItemsWorksheetRibbonCall(control As IRibbonControl)
    Call SetupItemsWorksheet
End Sub
Sub SortItemsRibbonCall(control As IRibbonControl)
    Call SortItemTypes
End Sub
Sub SetupItemItemCompatibilityWorksheetRibbonCall(control As IRibbonControl)
    Call SetupItemItemCompatibilityWorksheet
End Sub
Sub SetupContainersWorksheetRibbonCall(control As IRibbonControl)
    Call SetupContainersWorksheet
End Sub
Sub SortContainerTypesRibbonCall(control As IRibbonControl)
    Call SortContainerTypes
End Sub
Sub SetupContainerItemCompatibilityWorksheetRibbonCall(control As IRibbonControl)
    Call SetupContainerItemCompatibilityWorksheet
End Sub
Sub SetupSolutionWorksheetRibbonCall(control As IRibbonControl)
    Call SetupSolutionWorksheet
End Sub
Sub SetupVisualizationWorksheetRibbonCall(control As IRibbonControl)
    Call SetupVisualizationWorksheet
End Sub
Sub AnimateVisualizationWorksheetRibbonCall(control As IRibbonControl)
    Call AnimateVisualizationWorksheet
End Sub
Private Sub SendFeedbackRibbonCall(control As IRibbonControl)
    Call SendFeedback
End Sub
Private Sub WatchTutorialRibbonCall(control As IRibbonControl)
    Call WatchTutorial
End Sub
Private Sub AboutRibbonCall(control As IRibbonControl)
    Call About
End Sub
Sub tabActivate(ribbon As IRibbonUI)
    ribbon.ActivateTab ("CLPSpreadsheetSolver")
End Sub

#End If
Attribute VB_Name = "Module2"
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Const epsilon As Double = 0.0001
Const column_offset As Long = 11

'data declarations

Private Type item_type_data
    id As Long
    width As Double
    height As Double
    length As Double
    volume As Double
    weight As Double
    xy_rotatable As Boolean
    yz_rotatable As Boolean
    heavy As Boolean
    fragile As Boolean
    mandatory As Long
    profit As Double
    number_requested As Long
    sort_criterion As Double
End Type

Private Type item_list_data
    num_item_types As Long
    total_number_of_items As Long
    item_types() As item_type_data
End Type

Dim item_list As item_list_data

Private Type container_type_data
    type_id As Long
    width As Double
    height As Double
    length As Double
    volume_capacity As Double
    weight_capacity As Double
    mandatory As Long
    cost As Double
    number_available As Long
End Type

Private Type container_list_data
    num_container_types As Long
    container_types() As container_type_data
End Type

Dim container_list As container_list_data

Private Type compatibility_data
    item_to_item() As Boolean
    container_to_item() As Boolean
End Type

Dim compatibility_list As compatibility_data

Private Type item_location
    origin_x As Double
    origin_y As Double
    origin_z As Double
    next_to_item_type As Long
End Type

Private Type item_in_container
    item_type As Long
    rotation As Long '1 to 6
    mandatory As Long
    origin_x As Double
    origin_y As Double
    origin_z As Double
    opposite_x As Double
    opposite_y As Double
    opposite_z As Double
End Type

Private Type container_data
    type_id As Long
    width As Double
    height As Double
    length As Double
    volume_capacity As Double
    weight_capacity As Double
    cost As Double
    item_cnt As Long
    mandatory As Long
    items() As item_in_container
    addition_point_count As Long
    addition_points() As item_location
    repack_item_count() As Long
    volume_packed As Double
    weight_packed As Double
End Type

Private Type solution_data
    num_containers As Long
    feasible As Boolean
    net_profit As Double
    total_volume As Double
    total_weight As Double
    total_dispersion As Double
    total_distance As Double
    total_x_moment As Double
    total_yz_moment As Double
    rotation_order() As Long
    item_type_order() As Long
    container() As container_data
    unpacked_item_count() As Long
End Type

Private Type instance_data
    front_side_support As Boolean
    item_item_compatibility_worksheet As Boolean 'true if the data exists
    container_item_compatibility_worksheet As Boolean 'true if the data exists
End Type

Dim instance As instance_data

Private Type solver_option_data
    CPU_time_limit As Double
    item_sort_criterion As Long
    column_building As Boolean
    layer_building As Boolean
    wall_building As Boolean
End Type

Dim solver_options As solver_option_data

Private Type candidate_data
    mandatory As Long
    net_profit As Double
    total_volume As Double
    item_type_to_be_added As Long
End Type
Private Sub SortContainers(solution As solution_data, random_reorder_probability As Double)
    
    Dim i As Long
    Dim j As Long
    Dim candidate_index As Long
    Dim max_mandatory As Long
    Dim max_volume_packed As Double
    Dim min_ratio As Double
    Dim swap_container As container_data
        
    'insertion sort

    If Rnd < 1 - random_reorder_probability Then
        
        'insertion sort
    
        With solution
    
            For i = 1 To .num_containers
                candidate_index = i
                max_mandatory = .container(i).mandatory
                max_volume_packed = .container(i).volume_packed
                min_ratio = .container(i).cost / .container(i).volume_capacity
    
                For j = i + 1 To .num_containers
    
                    If (.container(j).mandatory > max_mandatory) Or _
                        ((.container(j).mandatory = max_mandatory) And (.container(j).volume_packed > max_volume_packed + epsilon)) Or _
                        ((.container(j).mandatory = 0) And (max_mandatory = 0) And (.container(j).volume_packed > max_volume_packed - epsilon) And ((.container(j).cost / .container(j).volume_capacity) < min_ratio)) Then
    
                        candidate_index = j
                        max_mandatory = .container(j).mandatory
                        max_volume_packed = .container(j).volume_packed
                        min_ratio = .container(j).cost / .container(j).volume_capacity
    
                    End If
    
                Next j
    
                If candidate_index <> i Then
                    swap_container = .container(candidate_index)
                    .container(candidate_index) = .container(i)
                    .container(i) = swap_container
                End If
    
            Next i

        End With
    Else
        
        With solution
            For i = 1 To .num_containers
                
                candidate_index = Int((.num_containers - i + 1) * Rnd + i)
    
                If candidate_index <> i Then
                    swap_container = .container(candidate_index)
                    .container(candidate_index) = .container(i)
                    .container(i) = swap_container
                End If
    
            Next i
        End With
        
    End If
    
End Sub
Private Sub PerturbSolution(solution As solution_data, container_id As Long, percent_time_left As Double)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim swap_long As Long
    
    Dim operator_selection As Double
    Dim container_emptying_probability As Double
    Dim item_removal_probability As Double
    Dim repack_flag As Boolean
    Dim continue_flag As Boolean
    
    Dim max_z As Double
    
    With solution.container(container_id)
    
'            container_emptying_probability = 1 - 0.8 * (.volume_packed / .volume_capacity)
'            item_removal_probability = 1 - 0.8 * (.volume_packed / .volume_capacity)
        
        'test
        
        container_emptying_probability = 0.05 + 0.15 * percent_time_left
        item_removal_probability = 0.05 + 0.15 * percent_time_left
        
        If .item_cnt > 0 Then
        
            If Rnd() < container_emptying_probability Then
                
                'empty the container
                
                For j = 1 To .item_cnt
                
                    solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1
                    solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit
                    
                Next j
                
                solution.net_profit = solution.net_profit + .cost
                solution.total_volume = solution.total_volume - .volume_packed
                solution.total_weight = solution.total_weight - .weight_packed
                
                .item_cnt = 0
                .volume_packed = 0
                .weight_packed = 0
                .addition_point_count = 1
                .addition_points(1).origin_x = 0
                .addition_points(1).origin_y = 0
                .addition_points(1).origin_z = 0
                
            Else
            
                repack_flag = False

                operator_selection = Rnd
                
                If operator_selection < 0.3 Then

                    For j = 1 To .item_cnt

                        If ((solution.feasible = False) And (.items(j).mandatory = 0)) Or (Rnd() < item_removal_probability) Then

                            solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1

                            solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit

                            .items(j).item_type = 0

                            repack_flag = True
                        End If

                    Next j
                   
                ElseIf operator_selection < 0.3 Then
                    
                    max_z = 0
                    For j = 1 To .item_cnt
                        If max_z < .items(j).opposite_z Then max_z = .items(j).opposite_z
                    Next j
                    
                    max_z = max_z * (0.1 + 0.5 * percent_time_left * Rnd)
                    
                    For j = 1 To .item_cnt

                        If ((solution.feasible = False) And (.items(j).mandatory = 0)) Or (.items(j).opposite_z < max_z) Then

                            solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1

                            solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit

                            .items(j).item_type = 0

                            repack_flag = True
                        End If

                    Next j
                    
                Else
                    
                    max_z = 0
                    For j = 1 To .item_cnt
                        If max_z < .items(j).opposite_z Then max_z = .items(j).opposite_z
                    Next j
                    
                    max_z = max_z * (0.6 - 0.5 * percent_time_left * Rnd)
                    
                    For j = 1 To .item_cnt

                        If ((solution.feasible = False) And (.items(j).mandatory = 0)) Or (.items(j).opposite_z > max_z) Then

                            solution.unpacked_item_count(.items(j).item_type) = solution.unpacked_item_count(.items(j).item_type) + 1

                            solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit

                            .items(j).item_type = 0

                            repack_flag = True
                        End If

                    Next j
                
                End If

                If repack_flag = True Then

                    For j = 1 To .item_cnt

                        If .items(j).item_type > 0 Then
                            solution.net_profit = solution.net_profit - item_list.item_types(.items(j).item_type).profit
                        End If

                    Next j
                    solution.net_profit = solution.net_profit + .cost
                    solution.total_volume = solution.total_volume - .volume_packed
                    solution.total_weight = solution.total_weight - .weight_packed

                    For j = 1 To item_list.num_item_types
                        .repack_item_count(j) = 0
                    Next j

                    For j = 1 To .item_cnt

                        If .items(j).item_type > 0 Then
                            .repack_item_count(.items(j).item_type) = .repack_item_count(.items(j).item_type) + 1
                        End If

                    Next j

                    .volume_packed = 0
                    .weight_packed = 0
                    .item_cnt = 0
                    .addition_point_count = 1
                    .addition_points(1).origin_x = 0
                    .addition_points(1).origin_y = 0
                    .addition_points(1).origin_z = 0

                    'repack now

                    For j = 1 To item_list.num_item_types

                        continue_flag = True
                        Do While (.repack_item_count(solution.item_type_order(j)) > 0) And (continue_flag = True)
                            continue_flag = AddItemToContainer(solution, container_id, solution.item_type_order(j), 2, True)
                        Loop

                        ' put the remaining items in the unpacked items list

                        solution.unpacked_item_count(solution.item_type_order(j)) = solution.unpacked_item_count(solution.item_type_order(j)) + .repack_item_count(solution.item_type_order(j))
                        .repack_item_count(solution.item_type_order(j)) = 0

                    Next j

                End If
            
            End If
        
        End If
        
    End With
    
End Sub
Private Sub PerturbRotationAndOrderOfItems(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim swap_long As Long
    
    'change the preferred rotation order randomly
    
    For i = 1 To item_list.num_item_types
        
        For j = 1 To 6
            
            k = Int((6 - j + 1) * Rnd + j) ' the order to swap with
            
            swap_long = solution.rotation_order(i, j)
            solution.rotation_order(i, j) = solution.rotation_order(i, k)
            solution.rotation_order(i, k) = swap_long
            
        Next j
        
        'MsgBox ("Item type " & i & " rotation order: " & solution.rotation_order(i, 1) & solution.rotation_order(i, 2) & solution.rotation_order(i, 3) & solution.rotation_order(i, 4) & solution.rotation_order(i, 5) & solution.rotation_order(i, 6))
        
    Next i
    
    'change the item order randomly - test

    For i = 1 To item_list.num_item_types

        j = Int((item_list.num_item_types - i + 1) * Rnd + i) ' the order to swap with

        swap_long = solution.item_type_order(i)
        solution.item_type_order(i) = solution.item_type_order(j)
        solution.item_type_order(j) = swap_long

    Next i
    
End Sub
Private Function AddItemToContainer(solution As solution_data, container_index As Long, item_type_index As Long, add_type As Long, item_cohesion As Boolean)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim rotation_index As Long
    
    Dim origin_x As Double
    Dim origin_y As Double
    Dim origin_z As Double
    Dim opposite_x As Double
    Dim opposite_y As Double
    Dim opposite_z As Double
    
    Dim min_x As Double
    Dim min_y As Double
    Dim min_z As Double
    Dim next_to_item_type As Long
    
    Dim candidate_position As Double
    Dim current_rotation As Long
    Dim candidate_rotation As Long
    
    Dim area_supported As Double
    Dim area_required As Double
    Dim intersection_right As Double
    Dim intersection_left As Double
    Dim intersection_top As Double
    Dim intersection_bottom As Double
    Dim support_flag As Boolean
    
    With solution.container(container_index)
    
        min_x = .width + 1
        min_y = .height + 1
        min_z = .length + 1
        next_to_item_type = 0
        
        candidate_position = 0
        
        'compatibility check
        
        If instance.container_item_compatibility_worksheet = True Then
            If compatibility_list.container_to_item(.type_id, item_list.item_types(item_type_index).id) = False Then GoTo AddItemToContainer_Finish
        End If
        
        'volume size check
        
        If .volume_packed + item_list.item_types(item_type_index).volume > .volume_capacity Then GoTo AddItemToContainer_Finish
        
        'weight capacity check
        
        If .weight_packed + item_list.item_types(item_type_index).weight > .weight_capacity Then GoTo AddItemToContainer_Finish
        
        'item to item compatibility check
        
        If instance.item_item_compatibility_worksheet = True Then
            For i = 1 To .item_cnt
                If compatibility_list.item_to_item(item_list.item_types(item_type_index).id, item_list.item_types(.items(i).item_type).id) = False Then GoTo AddItemToContainer_Finish
            Next i
        End If
    
        For rotation_index = 1 To 6
        
            'test
            'If candidate_position <> 0 Then GoTo AddItemToContainer_Finish
        
            current_rotation = solution.rotation_order(item_type_index, rotation_index)
            
            'forbidden rotations
            
            If ((current_rotation = 3) Or (current_rotation = 4)) And (item_list.item_types(item_type_index).xy_rotatable = False) Then
                GoTo next_rotation_iteration
            End If

            If ((current_rotation = 5) Or (current_rotation = 6)) And (item_list.item_types(item_type_index).yz_rotatable = False) Then
                GoTo next_rotation_iteration
            End If
            
            'symmetry breaking
            
            If (current_rotation = 2) And (Abs(item_list.item_types(item_type_index).width - item_list.item_types(item_type_index).length) < epsilon) Then
                GoTo next_rotation_iteration
            End If
            
            If (current_rotation = 4) And (Abs(item_list.item_types(item_type_index).width - item_list.item_types(item_type_index).height) < epsilon) Then
                GoTo next_rotation_iteration
            End If
            
            If (current_rotation = 6) And (Abs(item_list.item_types(item_type_index).height - item_list.item_types(item_type_index).length) < epsilon) Then
                GoTo next_rotation_iteration
            End If
                
            For i = 1 To .addition_point_count
                
                If (item_cohesion = True) And (candidate_position <> 0) And (next_to_item_type = item_type_index) And (.addition_points(i).next_to_item_type <> item_type_index) Then GoTo next_iteration
                
                origin_x = .addition_points(i).origin_x
                origin_y = .addition_points(i).origin_y
                origin_z = .addition_points(i).origin_z
                
                If (item_list.item_types(item_type_index).heavy = True) And (origin_y > epsilon) Then GoTo next_iteration ' heavy item cannot be placed on any other item
                
                If current_rotation = 1 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).width
                    opposite_y = origin_y + item_list.item_types(item_type_index).height
                    opposite_z = origin_z + item_list.item_types(item_type_index).length
                ElseIf current_rotation = 2 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).length
                    opposite_y = origin_y + item_list.item_types(item_type_index).height
                    opposite_z = origin_z + item_list.item_types(item_type_index).width
                ElseIf current_rotation = 3 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).width
                    opposite_y = origin_y + item_list.item_types(item_type_index).length
                    opposite_z = origin_z + item_list.item_types(item_type_index).height
                ElseIf current_rotation = 4 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).height
                    opposite_y = origin_y + item_list.item_types(item_type_index).length
                    opposite_z = origin_z + item_list.item_types(item_type_index).width
                ElseIf current_rotation = 5 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).height
                    opposite_y = origin_y + item_list.item_types(item_type_index).width
                    opposite_z = origin_z + item_list.item_types(item_type_index).length
                ElseIf current_rotation = 6 Then
                    opposite_x = origin_x + item_list.item_types(item_type_index).length
                    opposite_y = origin_y + item_list.item_types(item_type_index).width
                    opposite_z = origin_z + item_list.item_types(item_type_index).height
                End If
                
                'check the feasibility of all four corners, w.r.t to the other items
                
                If (opposite_x > .width + epsilon) Or (opposite_y > .height + epsilon) Or (opposite_z > .length + epsilon) Then GoTo next_iteration
                
                For j = 1 To .item_cnt
                               
                    If (opposite_x < .items(j).origin_x + epsilon) Or _
                        (.items(j).opposite_x < origin_x + epsilon) Or _
                        (opposite_y < .items(j).origin_y + epsilon) Or _
                        (.items(j).opposite_y < origin_y + epsilon) Or _
                        (opposite_z < .items(j).origin_z + epsilon) Or _
                        (.items(j).opposite_z < origin_z + epsilon) Then
                        'no conflict
                    Else
                        'conflict
                        GoTo next_iteration
                    End If
                Next j
                                
                'vertical support
                
                If origin_y < epsilon Then
                    support_flag = True
                Else
                    area_supported = 0
                    area_required = ((opposite_x - origin_x) * (opposite_z - origin_z))
                    support_flag = False
                    For j = .item_cnt To 1 Step -1
                                
                        If (Abs(origin_y - .items(j).opposite_y) < epsilon) Then
                            
                            'check for intersection
                            
                            intersection_right = opposite_x
                            If intersection_right > .items(j).opposite_x Then intersection_right = .items(j).opposite_x
                            
                            intersection_left = origin_x
                            If intersection_left < .items(j).origin_x Then intersection_left = .items(j).origin_x
                            
                            intersection_top = opposite_z
                            If intersection_top > .items(j).opposite_z Then intersection_top = .items(j).opposite_z
                            
                            intersection_bottom = origin_z
                            If intersection_bottom < .items(j).origin_z Then intersection_bottom = .items(j).origin_z
                            
                            If (intersection_right > intersection_left) And (intersection_top > intersection_bottom) Then
                                
                                'check for fragile items
                                If item_list.item_types(.items(j).item_type).fragile = True Then
                                    GoTo next_iteration
                                Else
                                    area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom)
                                    If area_supported > area_required - epsilon Then
                                        support_flag = True
                                        Exit For
                                    End If
                                End If
                                
                            End If
                            
                        End If
                    Next j
                    
                End If
                
                If support_flag = False Then GoTo next_iteration
                
                'front side support

                If instance.front_side_support = True Then
                    If origin_z < epsilon Then
                        support_flag = True
                    Else
                        area_supported = 0
                        area_required = ((opposite_x - origin_x) * (opposite_y - origin_y))
                        support_flag = False
                        For j = .item_cnt To 1 Step -1
    
                            If (Abs(origin_z - .items(j).opposite_z) < epsilon) Then
    
                                'check for intersection
    
                                intersection_right = opposite_x
                                If intersection_right > .items(j).opposite_x Then intersection_right = .items(j).opposite_x
    
                                intersection_left = origin_x
                                If intersection_left < .items(j).origin_x Then intersection_left = .items(j).origin_x
    
                                intersection_top = opposite_y
                                If intersection_top > .items(j).opposite_y Then intersection_top = .items(j).opposite_y
    
                                intersection_bottom = origin_y
                                If intersection_bottom < .items(j).origin_y Then intersection_bottom = .items(j).origin_y
    
                                If (intersection_right > intersection_left) And (intersection_top > intersection_bottom) Then
                                    area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom)
                                    If area_supported > area_required - epsilon Then
                                        support_flag = True
                                        Exit For
                                    End If
                                End If
    
                            End If
                        Next j
    
                    End If
                End If
                
                If support_flag = False Then GoTo next_iteration
                
                'no conflicts at this point
                
                If (item_cohesion = True) And (next_to_item_type <> item_type_index) And (.addition_points(i).next_to_item_type = item_type_index) Then
                   min_x = origin_x
                   min_y = origin_y
                   min_z = origin_z
                   candidate_position = i
                   candidate_rotation = current_rotation
                   next_to_item_type = .addition_points(i).next_to_item_type
                Else
                    If solver_options.wall_building = True Then
                    
                        If (origin_z < min_z) Or _
                          ((origin_z <= min_z + epsilon) And (origin_y < min_y)) Or _
                          ((origin_z <= min_z + epsilon) And (origin_y <= min_y + epsilon) And (origin_x < min_x)) Then 'Or _
                          ((origin_z <= min_z + epsilon) And (origin_y <= min_y + epsilon) And (origin_x <= min_x + epsilon) And ((opposite_x > .width + epsilon) Or (opposite_y > .height + epsilon))) Then
                           min_x = origin_x
                           min_y = origin_y
                           min_z = origin_z
                           candidate_position = i
                           candidate_rotation = current_rotation
                           next_to_item_type = .addition_points(i).next_to_item_type
                        End If
                    
                    ElseIf solver_options.layer_building = True Then
                    
                        If (origin_y < min_y) Or _
                          ((origin_y <= min_y + epsilon) And (origin_z < min_z)) Or _
                          ((origin_y <= min_y + epsilon) And (origin_z <= min_z + epsilon) And (origin_x < min_x)) Then 'Or _
                          ((origin_y <= min_y + epsilon) And (origin_x <= min_x + epsilon) And (origin_z <= min_z + epsilon) And ((opposite_x > .width + epsilon) Or (opposite_y > .height + epsilon))) Then
                           min_x = origin_x
                           min_y = origin_y
                           min_z = origin_z
                           candidate_position = i
                           candidate_rotation = current_rotation
                           next_to_item_type = .addition_points(i).next_to_item_type
                        End If
                        
                    ElseIf solver_options.column_building = True Then
                    
                        If (origin_z < min_z) Or _
                          ((origin_z <= min_z + epsilon) And (origin_x < min_x)) Or _
                          ((origin_z <= min_z + epsilon) And (origin_x <= min_x + epsilon) And (origin_y < min_x)) Then 'Or _
                          ((origin_z <= min_z + epsilon) And (origin_x <= min_x + epsilon) And (origin_y <= min_y + epsilon) And ((opposite_x > .width + epsilon) Or (opposite_y > .height + epsilon))) Then
                           min_x = origin_x
                           min_y = origin_y
                           min_z = origin_z
                           candidate_position = i
                           candidate_rotation = current_rotation
                           next_to_item_type = .addition_points(i).next_to_item_type
                        End If

                    End If
                End If

next_iteration:
            Next i

next_rotation_iteration:
        Next rotation_index
        
    End With
    
AddItemToContainer_Finish:

    If candidate_position = 0 Then
        AddItemToContainer = False
    Else
        With solution.container(container_index)
            .item_cnt = .item_cnt + 1
            .items(.item_cnt).item_type = item_type_index
            .items(.item_cnt).origin_x = .addition_points(candidate_position).origin_x
            .items(.item_cnt).origin_y = .addition_points(candidate_position).origin_y
            .items(.item_cnt).origin_z = .addition_points(candidate_position).origin_z
            .items(.item_cnt).rotation = candidate_rotation
            .items(.item_cnt).mandatory = item_list.item_types(item_type_index).mandatory
            
            If candidate_rotation = 1 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).width
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).height
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).length
            ElseIf candidate_rotation = 2 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).length
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).height
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).width
            ElseIf candidate_rotation = 3 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).width
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).length
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).height
            ElseIf candidate_rotation = 4 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).height
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).length
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).width
            ElseIf candidate_rotation = 5 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).height
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).width
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).length
            ElseIf candidate_rotation = 6 Then
                .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).length
                .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).width
                .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).height
            End If
            
            .volume_packed = .volume_packed + item_list.item_types(item_type_index).volume
            .weight_packed = .weight_packed + item_list.item_types(item_type_index).weight

            If add_type = 2 Then
                .repack_item_count(item_type_index) = .repack_item_count(item_type_index) - 1
            End If
            
            'update the addition points
            
            For i = candidate_position To .addition_point_count - 1
                .addition_points(i) = .addition_points(i + 1)
            Next i
            
            .addition_point_count = .addition_point_count - 1
            
            If (.items(.item_cnt).opposite_x < .width - epsilon) And (.items(.item_cnt).origin_y < .height - epsilon) And (.items(.item_cnt).origin_z < .length - epsilon) Then
            
                .addition_point_count = .addition_point_count + 1
                .addition_points(.addition_point_count).origin_x = .items(.item_cnt).opposite_x
                .addition_points(.addition_point_count).origin_y = .items(.item_cnt).origin_y
                .addition_points(.addition_point_count).origin_z = .items(.item_cnt).origin_z
                .addition_points(.addition_point_count).next_to_item_type = item_type_index
                
            End If
            
            If item_list.item_types(item_type_index).fragile = False Then ' no addition point on top of fragile items
            
                If (.items(.item_cnt).origin_x < .width - epsilon) And (.items(.item_cnt).opposite_y < .height - epsilon) And (.items(.item_cnt).origin_z < .length - epsilon) Then
                    
                    .addition_point_count = .addition_point_count + 1
                    .addition_points(.addition_point_count).origin_x = .items(.item_cnt).origin_x
                    .addition_points(.addition_point_count).origin_y = .items(.item_cnt).opposite_y
                    .addition_points(.addition_point_count).origin_z = .items(.item_cnt).origin_z
                    .addition_points(.addition_point_count).next_to_item_type = item_type_index
                    
                End If
            
            End If
            
            If (.items(.item_cnt).origin_x < .width - epsilon) And (.items(.item_cnt).origin_y < .height - epsilon) And (.items(.item_cnt).opposite_z < .length - epsilon) Then
            
                .addition_point_count = .addition_point_count + 1
                .addition_points(.addition_point_count).origin_x = .items(.item_cnt).origin_x
                .addition_points(.addition_point_count).origin_y = .items(.item_cnt).origin_y
                .addition_points(.addition_point_count).origin_z = .items(.item_cnt).opposite_z
                .addition_points(.addition_point_count).next_to_item_type = item_type_index
                        
            End If
            
        End With
        
        With solution
            'update the profit
            
            If .container(container_index).item_cnt = 1 Then
                .net_profit = .net_profit + item_list.item_types(item_type_index).profit - .container(container_index).cost
            Else
                .net_profit = .net_profit + item_list.item_types(item_type_index).profit
            End If
            
            'update the volume per container and the total volume
            
            .total_volume = .total_volume + item_list.item_types(item_type_index).volume
            .total_weight = .total_weight + item_list.item_types(item_type_index).weight
            
            'update the unpacked items
            
            If add_type = 1 Then
                .unpacked_item_count(item_type_index) = .unpacked_item_count(item_type_index) - 1
            End If
            
        End With
        
        AddItemToContainer = True
    End If
    
End Function

Private Sub GetSolverOptions()
    ThisWorkbook.Worksheets("CLP Solver Console").Activate
    
    With solver_options
        
        If Cells(12, 3).Value = "Volume" Then
            .item_sort_criterion = 1
        ElseIf Cells(12, 3).Value = "Weight" Then
            .item_sort_criterion = 2
        Else
            .item_sort_criterion = 3
        End If
        
        If Cells(13, 3).Value = "Column-building" Then
            .column_building = True
        Else
            .column_building = False
        End If
        
        If Cells(13, 3).Value = "Layer-building" Then
            .layer_building = True
        Else
            .layer_building = False
        End If
        
        If Cells(13, 3).Value = "Wall-building" Then
            .wall_building = True
        Else
            .wall_building = False
        End If
        
        .CPU_time_limit = Cells(14, 3).Value
        
    End With
End Sub
Private Sub GetItemData()
    
    item_list.num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
    item_list.total_number_of_items = 0
    
    ReDim item_list.item_types(1 To item_list.num_item_types)
    
    ThisWorkbook.Worksheets("1.Items").Activate
    
    Dim i As Long
    Dim max_volume As Double
    Dim max_weight As Double
    
    max_volume = 0
    max_weight = 0
    
    With item_list
        
        For i = 1 To .num_item_types
            
            .item_types(i).id = i
            
            .item_types(i).width = Cells(2 + i, 4).Value
            .item_types(i).height = Cells(2 + i, 5).Value
            .item_types(i).length = Cells(2 + i, 6).Value
            
            .item_types(i).volume = Cells(2 + i, 7).Value
            
            If max_volume < .item_types(i).volume Then
                max_volume = .item_types(i).volume
            End If
            
            If Cells(2 + i, 9).Value = "Yes" Then
                .item_types(i).xy_rotatable = True
            Else
                .item_types(i).xy_rotatable = False
            End If
            
            If Cells(2 + i, 10).Value = "Yes" Then
                .item_types(i).yz_rotatable = True
            Else
                .item_types(i).yz_rotatable = False
            End If
            
            If (Abs(.item_types(i).width - .item_types(i).height) < epsilon) And (Abs(.item_types(i).width - .item_types(i).length) < epsilon) Then
                .item_types(i).xy_rotatable = False
                .item_types(i).yz_rotatable = False
            End If
            
            .item_types(i).weight = Cells(2 + i, 11).Value
            
            If max_weight < .item_types(i).weight Then
                max_weight = .item_types(i).weight
            End If
            
            If Cells(2 + i, 12).Value = "Yes" Then
                .item_types(i).heavy = True
            Else
                .item_types(i).heavy = False
            End If
            
            If Cells(2 + i, 13).Value = "Yes" Then
                .item_types(i).fragile = True
            Else
                .item_types(i).fragile = False
            End If
            
            If Cells(2 + i, 14).Value = "Must be packed" Then
                .item_types(i).mandatory = 1
            ElseIf Cells(2 + i, 14).Value = "May be packed" Then
                .item_types(i).mandatory = 0
            ElseIf Cells(2 + i, 14).Value = "Don't pack" Then
                .item_types(i).mandatory = -1
            End If
            
            .item_types(i).profit = Cells(2 + i, 15).Value
            
            .item_types(i).number_requested = Cells(2 + i, 16).Value
            
            item_list.total_number_of_items = item_list.total_number_of_items + .item_types(i).number_requested
        
        Next i
        
        For i = 1 To .num_item_types
        
            If solver_options.item_sort_criterion = 1 Then
                .item_types(i).sort_criterion = .item_types(i).volume * (max_weight + 1) + .item_types(i).weight
            ElseIf solver_options.item_sort_criterion = 2 Then
                .item_types(i).sort_criterion = .item_types(i).weight * (max_volume + 1) + .item_types(i).volume
            Else
                .item_types(i).sort_criterion = .item_types(i).width
                If .item_types(i).sort_criterion < .item_types(i).height Then
                    .item_types(i).sort_criterion = .item_types(i).height
                End If
                If .item_types(i).sort_criterion < .item_types(i).length Then
                    .item_types(i).sort_criterion = .item_types(i).length
                End If
                
                .item_types(i).sort_criterion = .item_types(i).sort_criterion * (max_volume + 1) + .item_types(i).volume
            End If
        Next i
    
    End With
    
End Sub
Private Sub GetContainerData()
    
    container_list.num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value
    
    ReDim container_list.container_types(1 To container_list.num_container_types)
    
    ThisWorkbook.Worksheets("2.Containers").Activate
    
    Dim i As Long
    
    With container_list
        
        For i = 1 To .num_container_types
            
            .container_types(i).type_id = i
            
            .container_types(i).width = Cells(1 + i, 3).Value
            .container_types(i).height = Cells(1 + i, 4).Value
            .container_types(i).length = Cells(1 + i, 5).Value
            
            .container_types(i).volume_capacity = Cells(1 + i, 6).Value
            .container_types(i).weight_capacity = Cells(1 + i, 7).Value
            
            If Cells(1 + i, 8).Value = "Must be used" Then
                .container_types(i).mandatory = 1
            ElseIf Cells(1 + i, 8).Value = "May be used" Then
                .container_types(i).mandatory = 0
            ElseIf Cells(1 + i, 8).Value = "Do not use" Then
                .container_types(i).mandatory = -1
            End If
            
            .container_types(i).cost = Cells(1 + i, 9).Value
            
            .container_types(i).number_available = Cells(1 + i, 11).Value
        
        Next i
    
    End With
    
End Sub
Private Sub GetCompatibilityData()
    
    With compatibility_list
        
        Dim i As Long
        Dim j As Long
        Dim k As Long

        If instance.item_item_compatibility_worksheet = True Then
        
            ReDim .item_to_item(1 To item_list.num_item_types, 1 To item_list.num_item_types)
            
            For i = 1 To item_list.num_item_types
                For j = 1 To item_list.num_item_types
                
                    .item_to_item(i, j) = True
                    
                Next j
            Next i
            
            k = 3
            For i = 1 To item_list.num_item_types
                For j = i + 1 To item_list.num_item_types
                
                    If ThisWorkbook.Worksheets("1.3.Item-Item Compatibility").Cells(k, 3) = "No" Then
                        .item_to_item(i, j) = False
                        .item_to_item(j, i) = False
                    End If
                        
                    k = k + 1
                Next j
            Next i
            
        End If
        
        If instance.container_item_compatibility_worksheet = True Then
        
            ReDim .container_to_item(1 To container_list.num_container_types, 1 To item_list.num_item_types)
            
            For i = 1 To container_list.num_container_types
                For j = 1 To item_list.num_item_types
                
                    .container_to_item(i, j) = True
                    
                Next j
            Next i
            
            k = 3
            For i = 1 To container_list.num_container_types
                For j = 1 To item_list.num_item_types
                
                    If ThisWorkbook.Worksheets("2.3.Container-ItemCompatibility").Cells(k, 3) = "No" Then
                        .container_to_item(i, j) = False
                    End If
                        
                    k = k + 1
                Next j
            Next i
            
        End If

    End With
    
End Sub
Private Sub InitializeSolution(solution As solution_data)
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    With solution
        .feasible = False
        .net_profit = 0
        .total_volume = 0
        .total_weight = 0
        .total_dispersion = 0
        .total_distance = 0
        .total_x_moment = 0
        .total_yz_moment = 0
        
        .num_containers = 0
        For i = 1 To container_list.num_container_types
            If container_list.container_types(i).mandatory >= 0 Then
                .num_containers = .num_containers + container_list.container_types(i).number_available
            End If
        Next i
        
        ReDim .rotation_order(1 To item_list.num_item_types, 1 To 6)
        For i = 1 To item_list.num_item_types
            For j = 1 To 6
                .rotation_order(i, j) = j
            Next j
        Next i
        
        ReDim .item_type_order(1 To item_list.num_item_types)
        For i = 1 To item_list.num_item_types
            .item_type_order(i) = i
        Next i
        
        ReDim .container(1 To .num_containers)
        For i = 1 To .num_containers
            ReDim .container(i).items(1 To item_list.total_number_of_items)
            ReDim .container(i).addition_points(1 To 3 * item_list.total_number_of_items)
            ReDim .container(i).repack_item_count(1 To item_list.total_number_of_items)
        Next i
        
        ReDim .unpacked_item_count(1 To item_list.num_item_types)
        
        l = 1
        For i = 1 To container_list.num_container_types
            If container_list.container_types(i).mandatory >= 0 Then
                For j = 1 To container_list.container_types(i).number_available
                    
                    .container(l).width = container_list.container_types(i).width
                    .container(l).height = container_list.container_types(i).height
                    .container(l).length = container_list.container_types(i).length
                    .container(l).volume_capacity = container_list.container_types(i).volume_capacity
                    .container(l).weight_capacity = container_list.container_types(i).weight_capacity
                    .container(l).cost = container_list.container_types(i).cost
                    .container(l).mandatory = container_list.container_types(i).mandatory
                    .container(l).type_id = i
                    .container(l).volume_packed = 0
                    .container(l).weight_packed = 0
                    .container(l).item_cnt = 0
                    
                    .container(l).addition_point_count = 1
                    
                    For k = 1 To item_list.total_number_of_items
                        .container(l).items(k).item_type = 0
                        .container(l).addition_points(k).origin_x = 0
                        .container(l).addition_points(k).origin_y = 0
                        .container(l).addition_points(k).origin_z = 0
                        .container(l).addition_points(k).next_to_item_type = 0
                    Next k
                    
                    For k = 1 To item_list.total_number_of_items
                        .container(l).repack_item_count(k) = 0
                    Next k
                    
                    l = l + 1
                Next j
            End If
        Next i
        
        For i = 1 To item_list.num_item_types
            .unpacked_item_count(i) = item_list.item_types(i).number_requested
        Next i
        
    End With
    
End Sub

Private Sub GetInstanceData()
    
    If ThisWorkbook.Worksheets("CLP SOlver Console").Cells(6, 3).Value = "Yes" Then
        instance.front_side_support = True
    Else
        instance.front_side_support = False
    End If
    
    If CheckWorksheetExistence("1.3.Item-Item Compatibility") = True Then
        instance.item_item_compatibility_worksheet = True
    Else
        instance.item_item_compatibility_worksheet = False
    End If
        
    If CheckWorksheetExistence("2.3.Container-ItemCompatibility") = True Then
        instance.container_item_compatibility_worksheet = True
    Else
        instance.container_item_compatibility_worksheet = False
    End If
    
End Sub
Private Sub WriteSolution(solution As solution_data)
   
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
            
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim container_index As Long
    
    Dim swap_container As container_data
    
    'sort the containers
    
    For i = 1 To solution.num_containers
        For j = solution.num_containers To 2 Step -1
            If (solution.container(j).type_id < solution.container(j - 1).type_id) Or _
                ((solution.container(j).type_id = solution.container(j - 1).type_id) And (solution.container(j).volume_packed > solution.container(j - 1).volume_packed)) Then
                swap_container = solution.container(j)
                solution.container(j) = solution.container(j - 1)
                solution.container(j - 1) = swap_container
            End If
        Next j
    Next i
    
    ThisWorkbook.Worksheets("3.Solution").Activate

    If solution.feasible = False Then
        Cells(2, 1) = "Warning: Last solution returned by the solver does not satisfy all constraints."
        Range(Cells(2, 1), Cells(2, 10)).Interior.ColorIndex = 45
    Else
        Cells(2, 1) = vbNullString
        Range(Cells(2, 1), Cells(2, 10)).Interior.Pattern = xlNone
        Range(Cells(2, 1), Cells(2, 10)).Interior.TintAndShade = 0
        Range(Cells(2, 1), Cells(2, 10)).Interior.PatternTintAndShade = 0
    End If
    
    Dim offset As Long
    
    offset = 0
    container_index = 1
    
    With solution
    
        For i = 1 To container_list.num_container_types
        
            For j = 1 To container_list.container_types(i).number_available
    
                Range(Cells(6, offset + 2), Cells(5 + 2 * item_list.total_number_of_items, offset + 2)).Value = vbNullString
                Range(Cells(6, offset + 3), Cells(5 + 2 * item_list.total_number_of_items, offset + 5)).ClearContents
                Range(Cells(6, offset + 6), Cells(5 + 2 * item_list.total_number_of_items, offset + 6)).Value = vbNullString
                
                
                If container_list.container_types(i).mandatory >= 0 Then
                        
                    For k = 1 To .container(container_index).item_cnt
                        Cells(5 + k, offset + 2).Value = ThisWorkbook.Worksheets("1.Items").Cells(2 + item_list.item_types(.container(container_index).items(k).item_type).id, 2).Value
                        Cells(5 + k, offset + 3).Value = .container(container_index).items(k).origin_x
                        Cells(5 + k, offset + 4).Value = .container(container_index).items(k).origin_y
                        Cells(5 + k, offset + 5).Value = .container(container_index).items(k).origin_z
                        If .container(container_index).items(k).rotation = 1 Then
                            Cells(5 + k, offset + 6).Value = "xyz"
                        ElseIf .container(container_index).items(k).rotation = 2 Then
                            Cells(5 + k, offset + 6).Value = "zyx"
                        ElseIf .container(container_index).items(k).rotation = 3 Then
                            Cells(5 + k, offset + 6).Value = "xzy"
                        ElseIf .container(container_index).items(k).rotation = 4 Then
                            Cells(5 + k, offset + 6).Value = "yzx"
                        ElseIf .container(container_index).items(k).rotation = 5 Then
                            Cells(5 + k, offset + 6).Value = "yxz"
                        ElseIf .container(container_index).items(k).rotation = 6 Then
                            Cells(5 + k, offset + 6).Value = "zxy"
                        End If
                    Next k
                        
                    container_index = container_index + 1
                End If
                
                Columns(2 + offset).AutoFit
                
                offset = offset + column_offset
            Next j
        Next i
        
        Range(Cells(6, offset + 2), Cells(5 + 2 * item_list.total_number_of_items, offset + 2)).Value = vbNullString
        
        k = 1
        For i = 1 To item_list.num_item_types
            For j = 1 To .unpacked_item_count(i)
                Cells(5 + k, offset + 2).Value = ThisWorkbook.Worksheets("1.Items").Cells(2 + item_list.item_types(i).id, 2).Value
                k = k + 1
            Next j
        Next i
                    
    End With
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub

Sub ReadSolution(solution As solution_data)
       
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
            
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim container_index As Long
    Dim item_type_index As Long
    
    Dim offset As Long
    
    offset = 0
    container_index = 1
    
    With solution
    
        For i = 1 To container_list.num_container_types
        
            For j = 1 To container_list.container_types(i).number_available
                    
                If container_list.container_types(i).mandatory >= 0 Then
                    
                    With .container(container_index)
                        
                        l = Cells(4, offset + 7).Value
                        
                        For k = 1 To l
                            If IsNumeric(Cells(5 + k, offset + 7).Value) = True Then
                            
                                .item_cnt = .item_cnt + 1
                                
                                item_type_index = Cells(5 + k, offset + 7).Value
                                
                                solution.unpacked_item_count(item_type_index) = solution.unpacked_item_count(item_type_index) - 1
                                
                                .items(.item_cnt).item_type = item_type_index
                                .items(.item_cnt).origin_x = Cells(5 + k, offset + 3).Value
                                .items(.item_cnt).origin_y = Cells(5 + k, offset + 4).Value
                                .items(.item_cnt).origin_z = Cells(5 + k, offset + 5).Value
                                
                                If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "xyz" Then
                                    .items(.item_cnt).rotation = 1
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).width
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).height
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).length
                                ElseIf ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "zyx" Then
                                    .items(.item_cnt).rotation = 2
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).length
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).height
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).width
                                ElseIf ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "xzy" Then
                                    .items(.item_cnt).rotation = 3
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).width
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).length
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).height
                                ElseIf ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "yzx" Then
                                    .items(.item_cnt).rotation = 4
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).height
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).length
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).width
                                ElseIf ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "yxz" Then
                                    .items(.item_cnt).rotation = 5
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).height
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).width
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).length
                                ElseIf ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value = "zxy" Then
                                    .items(.item_cnt).rotation = 6
                                    .items(.item_cnt).opposite_x = .items(.item_cnt).origin_x + item_list.item_types(item_type_index).length
                                    .items(.item_cnt).opposite_y = .items(.item_cnt).origin_y + item_list.item_types(item_type_index).width
                                    .items(.item_cnt).opposite_z = .items(.item_cnt).origin_z + item_list.item_types(item_type_index).height
                                End If
                        
                                .volume_packed = .volume_packed + item_list.item_types(item_type_index).volume
                                .weight_packed = .weight_packed + item_list.item_types(item_type_index).weight
                                
                                If .item_cnt = 1 Then
                                    solution.net_profit = solution.net_profit + item_list.item_types(item_type_index).profit - .cost
                                Else
                                    solution.net_profit = solution.net_profit + item_list.item_types(item_type_index).profit
                                End If
                                
                            End If
                        Next k
                        
                    End With
                    
                    container_index = container_index + 1
                End If
                
                offset = offset + column_offset
            Next j
        Next i
    End With
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub
Sub CLP_Solver()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Containers, and 3.Solution must exist for the CLP Spreadsheet Solver to function."
        Application.ScreenUpdating = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    Else
        reply = MsgBox("This will take " & ThisWorkbook.Worksheets("CLP Solver Console").Cells(14, 3).Value & " seconds. Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo CLP_Solver_Finish
    
    'Allocate memory and get the data
    
    Call GetSolverOptions
    Call GetItemData
    Call GetContainerData
    Call GetInstanceData
    Call GetCompatibilityData
    
    Call SortItems
    
    Dim incumbent As solution_data
    Call InitializeSolution(incumbent)
        
    Dim best_known As solution_data
    Call InitializeSolution(best_known)
    best_known = incumbent
    
    Dim iteration As Long
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    
    Dim nonempty_container_cnt As Long
    Dim container_id As Long
    
    Dim start_time As Double
    Dim end_time As Double
    
    Dim continue_flag As Boolean
    Dim sort_criterion As Double
    Dim selected_rotation As Double
    
    'infeasibility check
    
    Dim infeasibility_count As Long
    Dim infeasibility_string As String

    Call FeasibilityCheckData(infeasibility_count, infeasibility_string)

    If infeasibility_count > 0 Then
        reply = MsgBox("Infeasibilities detected." & Chr(13) & infeasibility_string & "Do you want to continue?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbNo Then
            Application.ScreenUpdating = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    start_time = Timer
    end_time = Timer
        
    'constructive phase
    
    Application.ScreenUpdating = True
    Application.StatusBar = "Constructive phase..."
    Application.ScreenUpdating = False
    
    Call SortContainers(incumbent, 0)
    
    For i = 1 To incumbent.num_containers
        
        'sort the rotation order for this container
        
        For j = 1 To item_list.num_item_types
            
            sort_criterion = 0
            selected_rotation = 0
            
            If sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).width) * item_list.item_types(j).width) * (Int(incumbent.container(i).height / item_list.item_types(j).height) * item_list.item_types(j).height) Then
                sort_criterion = (Int(incumbent.container(i).width / item_list.item_types(j).width) * item_list.item_types(j).width) * (Int(incumbent.container(i).height / item_list.item_types(j).height) * item_list.item_types(j).height)
                selected_rotation = 1
            End If
            
            If sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).length) * item_list.item_types(j).length) * (Int(incumbent.container(i).height / item_list.item_types(j).height) * item_list.item_types(j).height) Then
                sort_criterion = (Int(incumbent.container(i).width / item_list.item_types(j).length) * item_list.item_types(j).length) * (Int(incumbent.container(i).height / item_list.item_types(j).height) * item_list.item_types(j).height)
                selected_rotation = 2
            End If
            
            If (item_list.item_types(j).xy_rotatable = True) And (sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).width) * item_list.item_types(j).width) * (Int(incumbent.container(i).height / item_list.item_types(j).length) * item_list.item_types(j).length)) Then
                sort_criterion = (Int(incumbent.container(i).width / item_list.item_types(j).width) * item_list.item_types(j).width) * (Int(incumbent.container(i).height / item_list.item_types(j).length) * item_list.item_types(j).length)
                selected_rotation = 3
            End If
            
            If (item_list.item_types(j).xy_rotatable = True) And (sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).height) * item_list.item_types(j).height) * (Int(incumbent.container(i).height / item_list.item_types(j).length) * item_list.item_types(j).length)) Then
                sort_criterion = sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).height) * item_list.item_types(j).height) * (Int(incumbent.container(i).height / item_list.item_types(j).length) * item_list.item_types(j).length)
                selected_rotation = 4
            End If
            
            If (item_list.item_types(j).yz_rotatable = True) And (sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).height) * item_list.item_types(j).height) * (Int(incumbent.container(i).height / item_list.item_types(j).width) * item_list.item_types(j).width)) Then
                sort_criterion = (Int(incumbent.container(i).width / item_list.item_types(j).height) * item_list.item_types(j).height) * (Int(incumbent.container(i).height / item_list.item_types(j).width) * item_list.item_types(j).width)
                selected_rotation = 5
            End If
            
            If (item_list.item_types(j).yz_rotatable = True) And (sort_criterion < (Int(incumbent.container(i).width / item_list.item_types(j).length) * item_list.item_types(j).length) * (Int(incumbent.container(i).height / item_list.item_types(j).width) * item_list.item_types(j).width)) Then
                sort_criterion = (Int(incumbent.container(i).width / item_list.item_types(j).length) * item_list.item_types(j).length) * (Int(incumbent.container(i).height / item_list.item_types(j).width) * item_list.item_types(j).width)
                selected_rotation = 6
            End If
            
            If selected_rotation = 0 Then
                selected_rotation = 1
            End If
            
            incumbent.rotation_order(j, 1) = selected_rotation
            incumbent.rotation_order(j, selected_rotation) = 1
        Next j
        
        For j = 1 To item_list.num_item_types
        
            continue_flag = True
            Do While (incumbent.unpacked_item_count(incumbent.item_type_order(j)) > 0) And (continue_flag = True)
                continue_flag = AddItemToContainer(incumbent, i, incumbent.item_type_order(j), 1, False)
            Loop
        Next j
        
        incumbent.feasible = True
        For j = 1 To item_list.num_item_types
            If (incumbent.unpacked_item_count(j) > 0) And (item_list.item_types(j).mandatory = 1) Then
                incumbent.feasible = False
                Exit For
            End If
        Next j
        
        Call CalculateDispersion(incumbent)

        If ((incumbent.feasible = True) And (best_known.feasible = False)) Or _
           ((incumbent.feasible = False) And (best_known.feasible = False) And (incumbent.total_volume > best_known.total_volume + epsilon)) Or _
           ((incumbent.feasible = True) And (best_known.feasible = True) And (incumbent.net_profit > best_known.net_profit + epsilon)) Or _
           ((incumbent.feasible = True) And (best_known.feasible = True) And (incumbent.net_profit > best_known.net_profit - epsilon) And (incumbent.total_volume > best_known.total_volume + epsilon)) Then

            best_known = incumbent
            
        End If
        
    Next i
    
    'GoTo CLP_Solver_Finish
    
    'end_time = Timer
    'MsgBox "Constructive phase result: " & best_known.net_profit & " time: " & end_time - start_time
    
    'improvement phase

    iteration = 0

    Do
        
        If iteration Mod 100 = 0 Then
            Application.ScreenUpdating = True
            If best_known.feasible = True Then
                Application.StatusBar = "Starting iteration " & iteration & ". Best net profit found so far: " & best_known.net_profit & " Dispersion: " & best_known.total_dispersion
            Else
                Application.StatusBar = "Starting iteration " & iteration & ". Best net profit found so far: N/A" & " Dispersion: " & best_known.total_dispersion
            End If
            Application.ScreenUpdating = False
            DoEvents
        End If

        If Rnd < 0.5 Then ' < ((end_time - start_time) / solver_options.CPU_time_limit) ^ 2 Then

             incumbent = best_known

        End If
        
        With incumbent
        
            For i = 1 To .num_containers
                Call PerturbSolution(incumbent, i, 1 - ((end_time - start_time) / solver_options.CPU_time_limit))
            Next i
            Call PerturbRotationAndOrderOfItems(incumbent)
            
        End With
        
        Call SortContainers(incumbent, 0.2)

        With incumbent
        
            For i = 1 To .num_containers
    
                For j = 1 To item_list.num_item_types
                    
                    continue_flag = True
                    Do While (.unpacked_item_count(.item_type_order(j)) > 0) And (continue_flag = True)
                        continue_flag = AddItemToContainer(incumbent, i, .item_type_order(j), 1, False)
                        'DoEvents
                    Loop
                Next j
    
                .feasible = True
                For j = 1 To item_list.num_item_types
                    If (.unpacked_item_count(j) > 0) And (item_list.item_types(j).mandatory = 1) Then
                        .feasible = False
                        Exit For
                    End If
                Next j
                
                If .feasible = True Then
                    Call CalculateDispersion(incumbent)
                End If
                
                If ((.feasible = True) And (best_known.feasible = False)) Or _
                   ((.feasible = False) And (best_known.feasible = False) And (.total_volume > best_known.total_volume + epsilon)) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit + epsilon)) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume > best_known.total_volume + epsilon)) Or _
                   ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume > best_known.total_volume - epsilon) And (.total_dispersion < best_known.total_dispersion - epsilon)) Then
        
                    best_known = incumbent
                    
                End If
    
            Next i
            
        End With

        iteration = iteration + 1
        
        end_time = Timer
        
        If end_time < start_time - 0.01 Then
            solver_options.CPU_time_limit = solver_options.CPU_time_limit - (86400 - start_time)
            start_time = end_time
        End If
        
    Loop While end_time - start_time < solver_options.CPU_time_limit / 3
    
    ' reorganize now
    
    nonempty_container_cnt = 0
    With best_known
        For i = 1 To .num_containers

            If .container(i).item_cnt > 0 Then
                nonempty_container_cnt = nonempty_container_cnt + 1
            End If

        Next i
    End With

    For container_id = 1 To best_known.num_containers

        Call CalculateDistance(best_known, container_id)
            
        Application.ScreenUpdating = True
        If best_known.feasible = True Then
            Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: " & best_known.net_profit & " Distance: " & best_known.total_distance
        Else
            Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: N/A" & " Distance: " & best_known.total_distance
        End If
        Application.ScreenUpdating = False

        If best_known.container(container_id).item_cnt > 0 Then

            incumbent = best_known

            start_time = Timer
            end_time = Timer

            Do
                If iteration Mod 100 = 0 Then
                
                    Application.ScreenUpdating = True
                    If best_known.feasible = True Then
                        Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: " & best_known.net_profit & " Distance: " & best_known.total_distance
                    Else
                        Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: N/A" & " Distance: " & best_known.total_distance
                    End If
                    Application.ScreenUpdating = False
                    
                    DoEvents
                End If

                Call PerturbSolution(incumbent, container_id, 0.1 + 0.2 * ((end_time - start_time) / ((solver_options.CPU_time_limit * 0.666) / nonempty_container_cnt)))
                Call PerturbRotationAndOrderOfItems(incumbent)

                With incumbent

                    For j = 1 To item_list.num_item_types

                        continue_flag = True
                        Do While (.unpacked_item_count(.item_type_order(j)) > 0) And (continue_flag = True)
                            continue_flag = AddItemToContainer(incumbent, container_id, .item_type_order(j), 1, True)
                            'DoEvents
                        Loop
                    Next j

                    .feasible = True
                    For j = 1 To item_list.num_item_types
                        If (.unpacked_item_count(j) > 0) And (item_list.item_types(j).mandatory = 1) Then
                            .feasible = False
                            Exit For
                        End If
                    Next j

                    Call CalculateDistance(incumbent, container_id)

                    If ((.feasible = True) And (best_known.feasible = False)) Or _
                       ((.feasible = False) And (best_known.feasible = False) And (.total_volume > best_known.total_volume + epsilon)) Or _
                       ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit + epsilon)) Or _
                       ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume < best_known.total_volume - epsilon)) Or _
                       ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume < best_known.total_volume + epsilon)) And (.total_distance < best_known.total_distance - epsilon) Or _
                       ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume < best_known.total_volume + epsilon)) And (.total_distance < best_known.total_distance + epsilon) And (.total_x_moment < best_known.total_x_moment - epsilon) Or _
                       ((.feasible = True) And (best_known.feasible = True) And (.net_profit > best_known.net_profit - epsilon) And (.total_volume < best_known.total_volume + epsilon)) And (.total_distance < best_known.total_distance + epsilon) And (.total_x_moment < best_known.total_x_moment + epsilon) And (.total_yz_moment < best_known.total_yz_moment - epsilon) Then
            
                        best_known = incumbent
                        
'                        If best_known.feasible = True Then
'                            Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: " & best_known.net_profit & " Distance: " & best_known.total_distance
'                        Else
'                            Application.StatusBar = "Reorganizing container " & container_id & ". Best net profit found so far: N/A" & " Distance: " & best_known.total_distance
'                        End If
                        
                    End If

                End With

                iteration = iteration + 1
                
                end_time = Timer
                
                If end_time < start_time - 0.01 Then
                    solver_options.CPU_time_limit = solver_options.CPU_time_limit - (86400 - start_time)
                    start_time = end_time
                End If

            Loop While end_time - start_time < (solver_options.CPU_time_limit * 0.666) / nonempty_container_cnt

        End If

    Next container_id

    'MsgBox "Iterations performed: " & iteration
    
CLP_Solver_Finish:
    
    'ensure loadability

    Dim min_x As Double
    Dim min_y As Double
    Dim min_z As Double

    Dim intersection_right As Double
    Dim intersection_left As Double
    Dim intersection_top As Double
    Dim intersection_bottom As Double

    Dim selected_item_index As Long
    Dim swap_item As item_in_container

    Dim area_supported As Double
    Dim area_required As Double
    Dim support_flag As Boolean

    For i = 1 To best_known.num_containers

        With best_known.container(i)

            For j = 1 To .item_cnt

                selected_item_index = 0
                min_x = .width
                min_y = .height
                min_z = .length
                
                For k = j To .item_cnt

                    If (.items(k).origin_z < min_z - epsilon) Or _
                        ((.items(k).origin_z < min_z + epsilon) And (.items(k).origin_y < min_y - epsilon)) Or _
                        ((.items(k).origin_z < min_z + epsilon) And (.items(k).origin_y < min_y + epsilon) And (.items(k).origin_x < min_x - epsilon)) Then

                        'check for support
                    
                        If .items(k).origin_y < epsilon Then
                            support_flag = True
                        Else
                            area_supported = 0
                            area_required = ((.items(k).opposite_x - .items(k).origin_x) * (.items(k).opposite_z - .items(k).origin_z))
                            support_flag = False
                            For l = j - 1 To 1 Step -1
                                        
                                If (Abs(.items(k).origin_y - .items(l).opposite_y) < epsilon) Then
                                    
                                    'check for intersection
                                    
                                    intersection_right = .items(k).opposite_x
                                    If intersection_right > .items(l).opposite_x Then intersection_right = .items(l).opposite_x
                                    
                                    intersection_left = .items(k).origin_x
                                    If intersection_left < .items(l).origin_x Then intersection_left = .items(l).origin_x
                                    
                                    intersection_top = .items(k).opposite_z
                                    If intersection_top > .items(l).opposite_z Then intersection_top = .items(l).opposite_z
                                    
                                    intersection_bottom = .items(k).origin_z
                                    If intersection_bottom < .items(l).origin_z Then intersection_bottom = .items(l).origin_z
                                    
                                    If (intersection_right > intersection_left) And (intersection_top > intersection_bottom) Then
                                        area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom)
                                        If area_supported > area_required - epsilon Then
                                            support_flag = True
                                            Exit For
                                        End If
                                    End If
                                    
                                End If
                            Next l
                            
                        End If
                        
                        If support_flag = True Then
                            selected_item_index = k

                            min_x = .items(k).origin_x
                            min_y = .items(k).origin_y
                            min_z = .items(k).origin_z
                        End If
                    End If
                
                Next k

                If selected_item_index > 0 Then
                    swap_item = .items(selected_item_index)
                    .items(selected_item_index) = .items(j)
                    .items(j) = swap_item
                Else
                    MsgBox ("Loading order could not be constructed.")
                End If
            Next j

        End With
    Next i
        
    'write the solution
    
    'MsgBox best_known.total_distance
    
    If best_known.feasible = True Then
        reply = MsgBox("CLP Spreadsheet Solver performed " & iteration & " LNS iterations and found a solution with a net profit of " & best_known.net_profit & ". Do you want to overwrite the current solution with the best found solution?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    ElseIf infeasibility_count > 0 Then
        Call WriteSolution(best_known)
    Else
        reply = MsgBox("The best found solution after " & iteration & " LNS iterations does not satisfy all constraints. Do you want to overwrite the current solution with the best found solution?", vbYesNo, "CLP Spreadsheet Solver")
        If reply = vbYes Then
            Call WriteSolution(best_known)
        End If
    End If
    
    'Erase the data
    
    Erase item_list.item_types
    Erase container_list.container_types
    Erase compatibility_list.item_to_item
    Erase compatibility_list.container_to_item

    For i = 1 To incumbent.num_containers
        Erase incumbent.container(i).items
    Next i
    Erase incumbent.container
    Erase incumbent.unpacked_item_count
    
    For i = 1 To best_known.num_containers
        Erase best_known.container(i).items
    Next i
    Erase best_known.container
    Erase best_known.unpacked_item_count
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    If CheckWorksheetExistence("4.Visualization") Then
        ThisWorkbook.Worksheets("4.Visualization").Activate
    Else
        ThisWorkbook.Worksheets("3.Solution").Activate
    End If
    Cells(1, 1).Select
    
End Sub
Sub FeasibilityCheckData(infeasibility_count As Long, infeasibility_string As String)
    
    Dim i As Long
    Dim j As Long
    Dim feasibility_flag As Boolean
    
    infeasibility_count = 0
    infeasibility_string = vbNullString
    
    Range(ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 9, 1), ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + (4 * item_list.total_number_of_items), 1)).Clear
    
    Dim volume_capacity_required As Double
    Dim volume_capacity_available As Double
    
    Dim weight_capacity_required As Double
    Dim weight_capacity_available As Double
    
    Dim max_width As Double
    Dim max_heigth As Double
    Dim max_length As Double
    
    volume_capacity_required = 0
    volume_capacity_available = 0
    
    weight_capacity_required = 0
    weight_capacity_available = 0
    
    max_width = 0
    max_heigth = 0
    max_length = 0
    
    With item_list
        For i = 1 To .num_item_types
            If .item_types(i).mandatory = 1 Then
                volume_capacity_required = volume_capacity_required + (.item_types(i).volume * .item_types(i).number_requested)
                weight_capacity_required = weight_capacity_required + (.item_types(i).weight * .item_types(i).number_requested)
            End If
        Next i
    End With
    
    With container_list
        For i = 1 To .num_container_types
            If .container_types(i).mandatory >= 0 Then
                
                volume_capacity_available = volume_capacity_available + (.container_types(i).volume_capacity * .container_types(i).number_available)
                weight_capacity_available = weight_capacity_available + (.container_types(i).weight_capacity * .container_types(i).number_available)
                
                If .container_types(i).width > max_width Then max_width = .container_types(i).width
                If .container_types(i).height > max_heigth Then max_heigth = .container_types(i).height
                If .container_types(i).length > max_length Then max_length = .container_types(i).length
                
            End If
        Next i
    End With
    
    If volume_capacity_required > volume_capacity_available + epsilon Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of available volume is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available volume is not enough to pack the mandatory items."
    End If
    
    If weight_capacity_required > weight_capacity_available + epsilon Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of available weight capacity is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available weight capacity is not enough to pack the mandatory items."
    End If
    
    With item_list
        For i = 1 To .num_item_types
            With .item_types(i)
                If (.mandatory = 1) And (.xy_rotatable = False) And (.yz_rotatable = False) And ((.width > max_width + epsilon) Or (.height > max_heigth + epsilon) Or (.length > max_length + epsilon)) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too large to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any container."
                End If

                If (.mandatory = 1) And (.width > max_width + epsilon) And (.width > max_heigth + epsilon) And (.width > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too wide to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too wide to fit into any container."
                End If

                If (.mandatory = 1) And (.height > max_width + epsilon) And (.height > max_heigth + epsilon) And (.height > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too tall to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too tall to fit into any container."
                End If
                
                If (.mandatory = 1) And (.length > max_width + epsilon) And (.length > max_heigth + epsilon) And (.length > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too long to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too long to fit into any container."
                End If
            End With
        Next i
    End With
    
    If instance.container_item_compatibility_worksheet = True Then
    
        For i = 1 To item_list.num_item_types
            
            feasibility_flag = False
            
            For j = 1 To container_list.num_container_types
                If compatibility_list.container_to_item(j, i) = True Then
                    feasibility_flag = True
                    Exit For
                End If
            Next j
            
            If feasibility_flag = False Then
                
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Item type " & i & " is not compatible with any container." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is not compatible with any container."
            End If
            
        Next i
    End If
    
End Sub
Sub FeasibilityCheckDataAndSolution()
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Dim WorksheetExists As Boolean
    Dim reply As Integer
    
    WorksheetExists = CheckWorksheetExistence("1.Items") And CheckWorksheetExistence("2.Containers") And CheckWorksheetExistence("3.Solution")
    If WorksheetExists = False Then
        MsgBox "Worksheets 1.Items, 2.Containers, and 3.Solution must exist for the Feasibility Check."
        Exit Sub
    End If
    
    Call GetItemData
    Call GetContainerData
    Call GetInstanceData
    Call GetCompatibilityData

    ThisWorkbook.Worksheets("3.Solution").Activate
    
    Range(Cells(2, 1), Cells(2, 10)).Clear
    Range(ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 9, 1), ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + (4 * item_list.total_number_of_items), 1)).Clear
    
    Dim infeasibility_count As Long
    infeasibility_count = 0
    
    Dim infeasibility_string As String
    infeasibility_string = vbNullString
    
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim container_index As Long
        
    Dim offset As Long
    Dim container_name As String
    Dim feasibility_flag As Boolean
        
    Dim incumbent As solution_data
    
    Call InitializeSolution(incumbent)
    Call ReadSolution(incumbent)
    
    Dim volume_capacity_required As Double
    Dim volume_capacity_available As Double
    
    Dim weight_capacity_required As Double
    Dim weight_capacity_available As Double
    
    Dim area_supported As Double
    Dim intersection_right As Double
    Dim intersection_left As Double
    Dim intersection_top As Double
    Dim intersection_bottom As Double
    
    Dim max_width As Double
    Dim max_heigth As Double
    Dim max_length As Double
    
    volume_capacity_required = 0
    volume_capacity_available = 0
    
    weight_capacity_required = 0
    weight_capacity_available = 0
    
    max_width = 0
    max_heigth = 0
    max_length = 0
    
    With item_list
        For i = 1 To .num_item_types
            If .item_types(i).mandatory = 1 Then
                volume_capacity_required = volume_capacity_required + (.item_types(i).volume * .item_types(i).number_requested)
                weight_capacity_required = weight_capacity_required + (.item_types(i).weight * .item_types(i).number_requested)
            End If
        Next i
    End With
    
    With container_list
        For i = 1 To .num_container_types
            If .container_types(i).mandatory >= 0 Then
                
                volume_capacity_available = volume_capacity_available + (.container_types(i).volume_capacity * .container_types(i).number_available)
                weight_capacity_available = weight_capacity_available + (.container_types(i).weight_capacity * .container_types(i).number_available)
                
                If .container_types(i).width > max_width Then max_width = .container_types(i).width
                If .container_types(i).height > max_heigth Then max_heigth = .container_types(i).height
                If .container_types(i).length > max_length Then max_length = .container_types(i).length
                
            End If
        Next i
    End With
    
    If volume_capacity_required > volume_capacity_available + epsilon Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of available volume is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available volume is not enough to pack the mandatory items."
    End If
    
    If weight_capacity_required > weight_capacity_available + epsilon Then
        infeasibility_count = infeasibility_count + 1
        infeasibility_string = infeasibility_string & "The amount of available weight capacity is not enough to pack the mandatory items." & Chr(13)
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available weight capacity is not enough to pack the mandatory items."
    End If
    
    With item_list
        For i = 1 To .num_item_types
            With .item_types(i)
                If (.mandatory = 1) And (.xy_rotatable = False) And (.yz_rotatable = False) And ((.width > max_width + epsilon) Or (.height > max_heigth + epsilon) Or (.length > max_length + epsilon)) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too large to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too large to fit into any container."
                End If

                If (.mandatory = 1) And (.width > max_width + epsilon) And (.width > max_heigth + epsilon) And (.width > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too wide to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too wide to fit into any container."
                End If

                If (.mandatory = 1) And (.height > max_width + epsilon) And (.height > max_heigth + epsilon) And (.height > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too tall to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too tall to fit into any container."
                End If
                
                If (.mandatory = 1) And (.length > max_width + epsilon) And (.length > max_heigth + epsilon) And (.length > max_length + epsilon) Then
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "Item type " & i & " is too long to fit into any container." & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is too long to fit into any container."
                End If
            End With
        Next i
    End With
    
    offset = 0
    For i = 1 To container_list.num_container_types
        For j = 1 To container_list.container_types(i).number_available
            If container_list.container_types(i).mandatory = -1 Then
                
                feasibility_flag = True
                For k = 1 To item_list.total_number_of_items
                    If ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2) <> vbNullString Then
                        feasibility_flag = False
                        Exit For
                    End If
                Next k
                
                If feasibility_flag = False Then
                
                    infeasibility_count = infeasibility_count + 1
                    If infeasibility_count < 5 Then
                        infeasibility_string = infeasibility_string & "There are item(s) in the unavailable " & ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1) & Chr(13)
                    End If
                    If infeasibility_count = 5 Then
                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                    End If
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "There are item(s) in the unavailable " & ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                    
                End If
            End If
            
            offset = offset + column_offset
        Next j
    Next i
    
    offset = 0
    container_index = 1
    For i = 1 To container_list.num_container_types
    
        For j = 1 To container_list.container_types(i).number_available
                
            If container_list.container_types(i).mandatory >= 0 Then

                For k = 1 To incumbent.container(container_index).item_cnt
                
                    If ((incumbent.container(container_index).items(k).rotation = 3) Or (incumbent.container(container_index).items(k).rotation = 4)) And (item_list.item_types(incumbent.container(container_index).items(k).item_type).xy_rotatable = False) Then

                        container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)

                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is placed on its xy surface, which is not allowed." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is placed on its xy surface, which is not allowed."

                    End If
                    
                    If ((incumbent.container(container_index).items(k).rotation = 5) Or (incumbent.container(container_index).items(k).rotation = 6)) And (item_list.item_types(incumbent.container(container_index).items(k).item_type).yz_rotatable = False) Then

                        container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)

                        infeasibility_count = infeasibility_count + 1
                        If infeasibility_count < 5 Then
                            infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is placed on its yz surface, which is not allowed." & Chr(13)
                        End If
                        If infeasibility_count = 5 Then
                            infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                        End If
                        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is placed on its yz surface, which is not allowed."

                    End If
                Next k
                
                container_index = container_index + 1
            End If
            
            offset = offset + column_offset
        
        Next j
        
    Next i
    
    With incumbent
        For i = 1 To item_list.num_item_types
            If (item_list.item_types(i).mandatory = 1) And (.unpacked_item_count(i) > 0) Then
            
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "There are " & .unpacked_item_count(i) & " item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) & " that are not packed in the available containers." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "There are " & .unpacked_item_count(i) & " item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) & " that are not packed in the available containers."
                
            End If
            
            If .unpacked_item_count(i) < 0 Then
            
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Too many item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) & " are packed." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Too many item(s) of type " & ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) & " are packed."
                
            End If
        Next i
    End With
    
    If instance.container_item_compatibility_worksheet = True Then
    
        For i = 1 To item_list.num_item_types
            
            feasibility_flag = False
            
            For j = 1 To container_list.num_container_types
                If compatibility_list.container_to_item(j, i) = True Then
                    feasibility_flag = True
                    Exit For
                End If
            Next j
            
            If feasibility_flag = False Then
                
                infeasibility_count = infeasibility_count + 1
                If infeasibility_count < 5 Then
                    infeasibility_string = infeasibility_string & "Item type " & i & " is not compatible with any container." & Chr(13)
                End If
                If infeasibility_count = 5 Then
                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                End If
                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " & i & " is not compatible with any container."
            End If
            
        Next i
        
    End If
        
    If instance.item_item_compatibility_worksheet = True Then
    
        offset = 0
        container_index = 1
        For i = 1 To container_list.num_container_types
        
            For j = 1 To container_list.container_types(i).number_available
                    
                If container_list.container_types(i).mandatory >= 0 Then

                    For k = 1 To incumbent.container(container_index).item_cnt
                    
                        For l = k + 1 To incumbent.container(container_index).item_cnt
                            
                            If compatibility_list.item_to_item(incumbent.container(container_index).items(k).item_type, incumbent.container(container_index).items(l).item_type) = False Then
                                
                                container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Items " & k & " and " & l & " in " & container_name & " are incompatible." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Items " & k & " and " & l & " in " & container_name & " are incompatible."
                            
                            End If
                            
                        Next l
                    Next k
                    
                    container_index = container_index + 1
                End If
                
                offset = offset + column_offset
            
            Next j
            
        Next i
        
    End If
    
    
    offset = 0
    container_index = 1
    For i = 1 To container_list.num_container_types
    
        For j = 1 To container_list.container_types(i).number_available
                
            If container_list.container_types(i).mandatory >= 0 Then

                With incumbent.container(container_index)
            
                    For k = 1 To incumbent.container(container_index).item_cnt
                    
                        If (.items(k).origin_y > epsilon) And (item_list.item_types(.items(k).item_type).heavy = True) Then
                            container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is a heavy item that rests on another item." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                            End If
                            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is a heavy item that rests on another item."
                        End If
                        
                        If (.items(k).opposite_x > container_list.container_types(i).width + epsilon) Or (.items(k).opposite_y > container_list.container_types(i).height + epsilon) Or (.items(k).opposite_z > container_list.container_types(i).length + epsilon) Then
                            container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                
                            infeasibility_count = infeasibility_count + 1
                            If infeasibility_count < 5 Then
                                infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is out of the bounds of the container." & Chr(13)
                            End If
                            If infeasibility_count = 5 Then
                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                            End If
                            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is out of the bounds of the container."
                        End If
                    
                        For l = k + 1 To incumbent.container(container_index).item_cnt
                                
                            If (.items(k).opposite_x < .items(l).origin_x + epsilon) Or _
                                (.items(l).opposite_x < .items(k).origin_x + epsilon) Or _
                                (.items(k).opposite_y < .items(l).origin_y + epsilon) Or _
                                (.items(l).opposite_y < .items(k).origin_y + epsilon) Or _
                                (.items(k).opposite_z < .items(l).origin_z + epsilon) Or _
                                (.items(l).opposite_z < .items(k).origin_z + epsilon) Then
                                'no conflict
                            Else
                                'conflict
                                                            
                                container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Items " & k & " and " & l & " in " & container_name & " are overlapping." & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Items " & k & " and " & l & " in " & container_name & " are overlapping."
                            End If
                            
                        Next l
                    Next k
                                        
                End With

                container_index = container_index + 1
            End If
            
            offset = offset + column_offset
        
        Next j
        
    Next i
    
    'vertical support
    
    offset = 0
    container_index = 1
    For i = 1 To container_list.num_container_types
    
        For j = 1 To container_list.container_types(i).number_available
                
            If container_list.container_types(i).mandatory >= 0 Then

                With incumbent.container(container_index)
            
                    For k = 1 To incumbent.container(container_index).item_cnt
                        
                        If .items(k).origin_y < epsilon Then
                            'supported by the floor
                        Else
                            area_supported = 0
                            For l = 1 To incumbent.container(container_index).item_cnt
                                
                                If (Abs(.items(k).origin_y - .items(l).opposite_y) < epsilon) Then
                                    
                                    'check for intersection
                                    
                                    intersection_right = .items(k).opposite_x
                                    If intersection_right > .items(l).opposite_x Then intersection_right = .items(l).opposite_x
                                    
                                    intersection_left = .items(k).origin_x
                                    If intersection_left < .items(l).origin_x Then intersection_left = .items(l).origin_x
                                    
                                    intersection_top = .items(k).opposite_z
                                    If intersection_top > .items(l).opposite_z Then intersection_top = .items(l).opposite_z
                                    
                                    intersection_bottom = .items(k).origin_z
                                    If intersection_bottom < .items(l).origin_z Then intersection_bottom = .items(l).origin_z
                                    
                                    If (intersection_right > intersection_left) And (intersection_top > intersection_bottom) Then
                                        
                                        If item_list.item_types(.items(l).item_type).fragile = True Then
                                            
                                            'infeasible - resting on a fragile item
                                
                                            container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                            
                                            infeasibility_count = infeasibility_count + 1
                                            If infeasibility_count < 5 Then
                                                infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is resting on fragile item " & l & "." & Chr(13)
                                            End If
                                            If infeasibility_count = 5 Then
                                                infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                            End If
                                            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is resting on fragile item " & l & "."
                                        End If
                                        
                                        area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom)
                                    End If
                                End If
                            Next l
                            
                            If area_supported < (.items(k).opposite_x - .items(k).origin_x) * (.items(k).opposite_z - .items(k).origin_z) - epsilon Then
                                
                                'infeasible
                                
                                container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                
                                infeasibility_count = infeasibility_count + 1
                                If infeasibility_count < 5 Then
                                    infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " is not supported. " & area_supported & " " & (.items(k).opposite_x - .items(k).origin_x) * (.items(k).opposite_z - .items(k).origin_z) & Chr(13)
                                End If
                                If infeasibility_count = 5 Then
                                    infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                End If
                                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " is not supported."
                                
                            End If
                            
                        End If
                        
                    Next k
                                        
                End With

                container_index = container_index + 1
            End If
            
            offset = offset + column_offset
        
        Next j
        
    Next i
    
    'front side support
    
    If instance.front_side_support = True Then
    
        offset = 0
        container_index = 1
        For i = 1 To container_list.num_container_types
        
            For j = 1 To container_list.container_types(i).number_available
                    
                If container_list.container_types(i).mandatory >= 0 Then
    
                    With incumbent.container(container_index)
                
                        For k = 1 To incumbent.container(container_index).item_cnt
                            
                            If .items(k).origin_z < epsilon Then
                                'supported by the front wall
                            Else
                                area_supported = 0
                                For l = 1 To incumbent.container(container_index).item_cnt
                                    
                                    If (Abs(.items(k).origin_z - .items(l).opposite_z) < epsilon) Then
                                        
                                        'check for intersection
                                        
                                        intersection_right = .items(k).opposite_x
                                        If intersection_right > .items(l).opposite_x Then intersection_right = .items(l).opposite_x
                                        
                                        intersection_left = .items(k).origin_x
                                        If intersection_left < .items(l).origin_x Then intersection_left = .items(l).origin_x
                                        
                                        intersection_top = .items(k).opposite_y
                                        If intersection_top > .items(l).opposite_y Then intersection_top = .items(l).opposite_y
                                        
                                        intersection_bottom = .items(k).origin_y
                                        If intersection_bottom < .items(l).origin_y Then intersection_bottom = .items(l).origin_y
                                        
                                        If (intersection_right > intersection_left) And (intersection_top > intersection_bottom) Then
                                            area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom)
                                        End If
                                    End If
                                Next l
                                
                                If area_supported < (.items(k).opposite_x - .items(k).origin_x) * (.items(k).opposite_y - .items(k).origin_y) - epsilon Then
                                    
                                    'infeasible
                                    
                                    container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1)
                                    
                                    infeasibility_count = infeasibility_count + 1
                                    If infeasibility_count < 5 Then
                                        infeasibility_string = infeasibility_string & "Item " & k & " in " & container_name & " does not have sufficient front side support. " & area_supported & " " & (.items(k).opposite_x - .items(k).origin_x) * (.items(k).opposite_z - .items(k).origin_z) & Chr(13)
                                    End If
                                    If infeasibility_count = 5 Then
                                        infeasibility_string = infeasibility_string & "More can be found in the list of detected infeasibilities in the solution worksheet." & Chr(13)
                                    End If
                                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " & k & " in " & container_name & " does not have sufficient front side support."
                                    
                                End If
                                
                            End If
                            
                        Next k
                                            
                    End With
    
                    container_index = container_index + 1
                End If
                
                offset = offset + column_offset
            
            Next j
            
        Next i
            
    End If
            
    If infeasibility_count > 0 Then
        Cells(2, 1) = "Warning: Last infeasibility check found problems with the solution."
        Range(Cells(2, 1), Cells(2, 10)).Interior.ColorIndex = 45
        Range(Cells(2, 1), Cells(2, 10)).Font.Bold = True
        infeasibility_string = infeasibility_string & "The solution is infeasible."
        MsgBox (infeasibility_string)
        Cells(7 + item_list.total_number_of_items, 1).Select
    Else
        MsgBox ("The solution is feasible.")
        Cells(1, 1).Select
    End If
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic

End Sub


Private Sub SortItems()

    Dim i As Long
    Dim j As Long
    
    Dim swap_item_type As item_type_data
    
    If item_list.num_item_types > 1 Then
       For i = 1 To item_list.num_item_types
           For j = item_list.num_item_types To 2 Step -1
               If (item_list.item_types(j).mandatory > item_list.item_types(j - 1).mandatory) Or _
                   ((item_list.item_types(j).mandatory = 1) And (item_list.item_types(j - 1).mandatory = 1) And (item_list.item_types(j).sort_criterion > item_list.item_types(j - 1).sort_criterion)) Or _
                   ((item_list.item_types(j).mandatory = 0) And (item_list.item_types(j - 1).mandatory = 0) And ((item_list.item_types(j).profit / item_list.item_types(j).volume) > (item_list.item_types(j - 1).profit / item_list.item_types(j - 1).volume))) Then
                   
                   swap_item_type = item_list.item_types(j)
                   item_list.item_types(j) = item_list.item_types(j - 1)
                   item_list.item_types(j - 1) = swap_item_type
                   
               End If
           Next j
       Next i
    End If
    
'    For i = 1 To item_list.num_item_types
'       MsgBox item_list.item_types(i).id & " " & item_list.item_types(i).weight & " " & item_list.item_types(i).sort_criterion
'    Next i
    
End Sub

Private Sub CalculateDistance(solution As solution_data, container_id As Long)

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Long
    Dim max_z As Double

    With solution
    
        .total_distance = 0
        '.total_x_moment = 0
        '.total_yz_moment = 0
        
        With .container(container_id)
            max_z = 0
            For k = 1 To .item_cnt
                   For l = k + 1 To .item_cnt
                       If .items(k).item_type = .items(l).item_type Then
                           solution.total_distance = solution.total_distance + Abs(.items(k).opposite_x + .items(k).origin_x - .items(l).opposite_x - .items(l).origin_x) + Abs(.items(k).opposite_y + .items(k).origin_y - .items(l).opposite_y - .items(l).origin_y) + Abs(.items(k).opposite_z + .items(k).origin_z - .items(l).opposite_z - .items(l).origin_z)
                       End If

                      'solution.total_distance = solution.total_distance + .items(k).opposite_z
                   Next l

                If max_z < .items(k).opposite_z Then max_z = .items(k).opposite_z

               'solution.total_distance = solution.total_distance + penalty * max_z
               solution.total_distance = solution.total_distance + .items(k).opposite_z

              ' solution.total_x_moment = solution.total_x_moment + (.items(k).origin_y + .items(k).opposite_y) * item_list.item_types(.items(k).item_type).weight

            Next k

            solution.total_distance = solution.total_distance + .item_cnt * .item_cnt * max_z

        End With

    End With
    
End Sub

Private Sub CalculateDispersion(solution As solution_data)

    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim max_z As Double
    Dim item_flag As Boolean
    Dim container_count As Long
    
    With solution
    
        .total_dispersion = 0

        For i = 1 To item_list.num_item_types
            container_count = 0
            For j = 1 To .num_containers

                 With .container(j)
                     item_flag = False
                     For k = 1 To .item_cnt
                            If .items(k).item_type = i Then
                                item_flag = True
                                Exit For
                            End If
                     Next k

                     If item_flag = True Then container_count = container_count + 1
                 End With

            Next j

            solution.total_dispersion = solution.total_dispersion + container_count * container_count
        Next i
    End With
    
End Sub

' ribbon calls and tab activation

#If Win32 Or Win64 Or (MAC_OFFICE_VERSION >= 15) Then

Sub CLP_Solver_ribbon_call(control As IRibbonControl)
    Call CLP_Solver
End Sub
Sub FeasibilityCheckDataAndSolutionRibbonCall(control As IRibbonControl)
    Call FeasibilityCheckDataAndSolution
End Sub

#End If
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

Option Explicit

Private Const CLP_TAG = "CLPSolverXla"
Private Const CLP_TOOLS_MENU_ID As Long = 30007&
Friend Sub Workbook_Open()
    
    Dim WorksheetExists As Boolean
    WorksheetExists = CheckWorksheetExistence("CLP Solver Console")
    
    If WorksheetExists = False Then
        Call SetupConsoleWorksheet
    End If
    
    'ThisWorkbook.Worksheets("VRP Solver Console").Activate
    
    Application.DefaultFilePath = CStr(Application.ActiveWorkbook.Path)
    
    'From http://www.cpearson.com/excel/createaddinsamplecode.aspx

#If Mac And (MAC_OFFICE_VERSION < 15) Then

    DeleteControls
    
    Dim ToolsMenu As Office.CommandBarControl
    Dim ToolsMenuItem As Office.CommandBarControl
    Dim ToolsMenuControl As Office.CommandBarControl
    
    Set ToolsMenu = Application.CommandBars.FindControl(id:=CLP_TOOLS_MENU_ID)
    If ToolsMenu Is Nothing Then
        MsgBox "Unable to access Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    Set ToolsMenuItem = ToolsMenu.Controls.Add(Type:=msoControlPopup, temporary:=True)
    If ToolsMenuItem Is Nothing Then
        MsgBox "Unable to add item to the Tools menu.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuItem
        .Caption = "&CLP Spreadsheet Solver"
        .BeginGroup = True
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "0. Optional - Reset the workbook"
        .OnAction = "'" & ActiveWorkbook.Name & "'!ResetWorkbook"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.1 Setup Items Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupItemsWorksheet"
        .Tag = CLP_TAG
    End With
    
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.2 Optional - Sort items alphabetically"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SortItemTypes"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "1.3 Optional - Setup item-item compatibility worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupItemItemCompatibilityWorksheet"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.1 Setup Containers Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupContainersWorksheet"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.2 Optional - Sort containers alphabetically"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SortContainerTypes"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "2.3 Optional - Setup container-item compatibility worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupContainerItemCompatibilityWorksheet"
        .Tag = CLP_TAG
    End With
        
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "3. Setup Solution Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupSolutionWorksheet"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "4.1 Optional - Setup Visualization Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SetupVisualizationWorksheet"
        .Tag = CLP_TAG
    End With
       
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "4.2 Optional - Animate Visualization Worksheet"
        .OnAction = "'" & ActiveWorkbook.Name & "'!AnimateVisualizationWorksheet"
        .Tag = CLP_TAG
    End With
       
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "5.1 Engage CLP Spreadsheet Solver"
        .OnAction = "'" & ActiveWorkbook.Name & "'!CLP_Solver"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "5.2 Optional - Feasibility Check"
        .OnAction = "'" & ActiveWorkbook.Name & "'!FeasibilityCheckDataAndSolution"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "Watch the tutorial video on YouTube"
        .OnAction = "'" & ActiveWorkbook.Name & "'!WatchTutorial"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "Send feedback / ask a question"
        .OnAction = "'" & ActiveWorkbook.Name & "'!SendFeedback"
        .Tag = CLP_TAG
    End With
    
    Set ToolsMenuControl = ToolsMenuItem.Controls.Add(Type:=msoControlButton, temporary:=True)
    If ToolsMenuControl Is Nothing Then
        MsgBox "Unable to add item to Tools menu item.", vbOKOnly
        Exit Sub
    End If
    
    With ToolsMenuControl
        .Caption = "About"
        .OnAction = "'" & ActiveWorkbook.Name & "'!About"
        .Tag = CLP_TAG
    End With
  

#End If
    
    Columns.AutoFit
    
    Application.StatusBar = False

End Sub

#If Mac And (MAC_OFFICE_VERSION < 15) Then

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    DeleteControls
End Sub

Private Sub DeleteControls()

Dim Ctrl As Office.CommandBarControl

On Error Resume Next
Set Ctrl = Application.CommandBars.FindControl(Tag:=CLP_TAG)

Do Until Ctrl Is Nothing
    Ctrl.Delete
    Set Ctrl = Application.CommandBars.FindControl(Tag:=CLP_TAG)
Loop

End Sub
Private Sub Workbook_Deactivate()
    DeleteControls
End Sub

#End If

Sub Workbook_SheetActivate(ByVal Sh As Object)
    
    If Sh.Name = "4.Visualization" Then
        
        Call RefreshVisualizationWorksheet
    
    End If
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

    Dim reply As Integer
    Dim num_item_types As Long
    Dim num_container_types As Long

    If Sh.Name = "CLP Solver Console" Then

        If Not Intersect(Target, Sh.Range("C2")) Is Nothing Then
            If CheckWorksheetExistence("1.Items") Or CheckWorksheetExistence("2.Containers") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization") Then
                reply = MsgBox("Warning! You are changing the problem size parameters, which will not be reflected on the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If

        If Not Intersect(Target, Sh.Range("C4")) Is Nothing Then
            If CheckWorksheetExistence("2.Containers") Or CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization") Then
                reply = MsgBox("Warning! You are changing the problem size parameters, which will not be reflected on the existing worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If

        If Not Intersect(Target, Sh.Range("C6")) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Or CheckWorksheetExistence("4.Visualization") Then
                reply = MsgBox("Warning! You are changing a loading constraint, which may render the existing solution infeasible or suboptimal. Please run a feasibility check or re-run the solver to ensure feasibility.", vbExclamation, "VRP Spreadsheet Solver")
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If
    End If

    If Sh.Name = "1.Items" Then

        num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value

        If Not Intersect(Target, Sh.Range(Cells(3, 1).Address & ":" & Cells(2 + num_item_types, 2).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If

        If Not Intersect(Target, Sh.Range(Cells(3, 4).Address & ":" & Cells(2 + num_item_types, 15).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If

        If Not Intersect(Target, Sh.Range(Cells(3, 12).Address & ":" & Cells(2 + num_item_types, 14).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                reply = MsgBox("Warning! You are changing parameters regarding items, which may render the current solution infeasible or suboptimal, and will not be reflected on the subsequent worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If

    End If

    If Sh.Name = "1.3.Item-Item Compatibility" Then

        num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value

        If Not Intersect(Target, Sh.Range(Cells(3, 1).Address & ":" & Cells(2 + num_item_types * (num_item_types - 1), 3).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If

    End If

    If Sh.Name = "2.Containers" Then

        num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value

        If Not Intersect(Target, Sh.Range(Cells(2, 1).Address & ":" & Cells(1 + num_container_types, 9).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If

        If Not Intersect(Target, Sh.Range(Cells(2, 11).Address & ":" & Cells(1 + num_container_types, 11).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                reply = MsgBox("Warning! You are changing parameters regarding containers, which may render the current solution infeasible or suboptimal, and the change will not be reflected on the solution and visualization worksheets until you set them up again.", vbExclamation, "VRP Spreadsheet Solver")
            End If
        End If

    End If

    If Sh.Name = "2.3.Container-ItemCompatibility" Then

        num_item_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(2, 3).Value
        num_container_types = ThisWorkbook.Worksheets("CLP Solver Console").Cells(4, 3).Value

        If Not Intersect(Target, Sh.Range(Cells(1, 1).Address & ":" & Cells(2 + num_item_types * num_container_types, 3).Address)) Is Nothing Then
            If CheckWorksheetExistence("3.Solution") Then
                ThisWorkbook.Worksheets("3.Solution").Cells(2, 1) = "Warning: Problem data has changed since the last feasibility check / solver run."
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Interior.ColorIndex = 45
                ThisWorkbook.Worksheets("3.Solution").Range(Cells(2, 1).Address & ":" & Cells(2, 10).Address).Font.Bold = True
            End If
        End If

    End If


End Sub


' InQuest injected base64 decoded content
' bn)b

INQUEST-PP=macro
