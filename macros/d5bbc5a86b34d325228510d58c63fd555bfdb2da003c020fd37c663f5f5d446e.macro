Attribute VB_Name = "Hoja17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Hoja7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ModEnlaces"
Option Explicit

'David Gonz|fffd|lez Garz|fffd|n - 5/2018

Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long

Sub AbreSecuencia(ByVal Secuencia As String)

    Secuencia = Replace(Secuencia, " ", "")
    Secuencia = Replace(Secuencia, "|", "")
    Secuencia = Replace(Secuencia, "_", "")
    
    Select Case Left(Secuencia, 3)
    
        Case "REC", "BOL", "PRE", "EXT"
            AbreEnRemedy Secuencia
        Case "INC"
            ShellExecute Application.hwnd, "OPEN", "https://gri.sdr.tesa/iGRI/abrirBoletinINC.do?secuencia=" & Mid(Secuencia, 5), "", "", 10
        Case "BTP"
            ShellExecute Application.hwnd, "OPEN", "https://gri.sdr.tesa/iGRI/abrirBoletinBTP.do?secuencia=" & Mid(Secuencia, 5), "", "", 10
        Case Else
            
            If IsNumeric(Secuencia) Then 'Actuaci|fffd|n
                If Len(Secuencia) >= 9 Then 'Actuaci|fffd|n
                    Secuencia = String(15 - Len(Secuencia), "0") & Secuencia
                    ShellExecute Application.hwnd, "OPEN", "http://gaomsdr.cnso:5757/IFDespachoGenericServlet?_operation_id=consultarDetalle&codActuacion=" & Secuencia, "", "", 10
                End If
            End If
    End Select
            
End Sub


Sub AbreEnRemedy(AVAV As String)
Dim Txt As String, Formulario As String, frf As Integer, FTask As String
    
    Select Case UCase(Left(AVAV, 3))
        Case "REC"
            Formulario = "Reclamaciones"
        Case "BOL"
            Formulario = "Reclamacion SIRIO"
        Case "PRE"
            Formulario = "Mantenimiento Preventivo"
        Case "EXT"
            Formulario = "Trabajo Externo"
        Case Else
            Exit Sub
    End Select
    
    Txt = "[Shortcut]" & vbCrLf & _
          "Name = " & Formulario & vbCrLf & _
          "Type = 1" & vbCrLf & _
          "Server = scgri1.sdr.tesa" & vbCrLf & _
          "Join = 0" & vbCrLf & _
          "QBE Data =" & Chr(1) & "1=" & AVAV & Chr(1) & vbCrLf
    
    FTask = PathTemp & "\gri.artask"
    
    frf = FreeFile
    Open FTask For Binary As #frf
    Put #frf, , Txt
    Close frf
    
    ShellExecute Application.hwnd, "OPEN", FTask, "", "", 3
        
    DoEvents
    
End Sub

Private Function PathTemp() As String
Dim FSO As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")
    PathTemp = FSO.GetSpecialFolder(2)
End Function




Attribute VB_Name = "ModMain"
Option Explicit

'David Gonz|fffd|lez Garz|fffd|n - 5/2018

Sub Ajustar()
Dim objWhs As Worksheet
    
    On Error Resume Next
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    ThisWorkbook.Activate
    DoEvents
    
    For Each objWhs In ThisWorkbook.Sheets
        If objWhs.Range("A2") = "" Then
            objWhs.Delete
        Else
            AjustaColumnas objWhs
            AplicarFormatoCondicional objWhs
            objWhs.Activate
            objWhs.Range("A1").Select
            End If
        DoEvents
    Next
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    ThisWorkbook.Sheets(1).Activate

End Sub

'Se ocultan las columnas a partir de la columna FC, inclusive
Private Sub AjustaColumnas(objWhs As Worksheet)
Dim i As Long, RUC As String, UC As Long
    
    RUC = UltimaCelda(objWhs)
    UC = Range(RUC).Column
    
    objWhs.Select
    Cells.Select
    With Selection
        .RowHeight = 5
        .Cells.EntireColumn.AutoFit ''
        .ColumnWidth = 50
        .Cells.EntireColumn.AutoFit
        
        For i = 1 To UC
            If .Columns(N2L(i) & ":" & N2L(i)).ColumnWidth > 50 Then
                .Columns(N2L(i) & ":" & N2L(i)).ColumnWidth = 50
            End If
        Next
        .Cells.EntireRow.AutoFit
        
        .Columns(N2L(Range(BuscaCelda(objWhs, "FC")).Column) & ":" & N2L(UC)).EntireColumn.Hidden = True
    End With
    
End Sub


Private Sub AplicarFormatoCondicional(objWhs As Worksheet)
Dim ColFC As Long, Fil As Long, CadFC As String, CeldaColFC As String, TxtFC As String, UltCol As Long
Dim arFC() As String, i As Long
    
    UltCol = Range(UltimaCelda(objWhs)).Column
    CeldaColFC = BuscaCelda(objWhs, "FC")
    ColFC = Range(CeldaColFC).Column 'Busca la columna que contiene las cadenas para hacer los formatos condicionales
    objWhs.Activate
    objWhs.Range("A1").Select
    DoEvents

    For Fil = 2 To Range(UltimaCelda(objWhs, , 6)).Row
        TxtFC = objWhs.Cells(Fil, ColFC)

        arFC = Split(TxtFC, ",", -1, vbBinaryCompare)
        
        If EnMatriz(arFC, "R") Then 'Ra|fffd|z

            objWhs.Range("A" & Fil & ":" & N2L(UltCol) & Fil).Select
            
            
'            'Color de fondo
            With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
'                .ThemeColor = xlThemeColorAccent2 'Rojo
                .ThemeColor = xlThemeColorAccent6 'Naranja
                .TintAndShade = 0.8
                .PatternTintAndShade = 0
            End With
            
'            'L|fffd|nea doble
'            With Selection.Borders(xlEdgeTop)
'                .LineStyle = xlDouble
'                .ThemeColor = 1
'                .TintAndShade = -0.5
'                .Weight = xlThick
'            End With
        
        End If
        
        If EnMatriz(arFC, "P") Then 'Puente
            objWhs.Range("A" & Fil & ":" & N2L(UltCol) & Fil).Select
            With Selection.Font 'Texto gris
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = -0.499984740745262
            End With
        End If
    
        For i = 0 To UBound(arFC) 'DAGA no se corresponde con la hoja
            If Left(arFC(i), 2) = "H=" Then
                If Mid(arFC(i), 3) <> objWhs.Name Then
                
                    objWhs.Range("A" & Fil & ":" & N2L(UltCol) & Fil).Select
                    With Selection.Font
                        .Color = -16776961 'Texto rojo
                        .TintAndShade = 0
                    End With
                
                End If
                Exit For
            End If
        Next

    Next

End Sub

'Indica si una cadena es un elemento de una matriz
Private Function EnMatriz(Matriz() As String, Cadena As String) As Boolean
Dim i As Long
    
    For i = 0 To UBound(Matriz)
        If StrComp(Matriz(i), Cadena, vbTextCompare) = 0 Then
            EnMatriz = True
            Exit For
        End If
    Next

End Function


'David Gonz|fffd|lez Garz|fffd|n - 12/5/2018
'Entrega la celda desde Origen que contiene TxtCol
'Sentido: 3 hacia la derecha, 9 hacia la izquierda, 12 hacia arriba, 6 hacia abajo (nemot|fffd|cnico Reloj)
'Exacto: True ->El valor de la celda es igual a TxtBuscar (No se distinguen May/Min)
'        False->El valor de la cenda contiene a TxtBuscar (No se distinguen May/Min)
Public Function BuscaCelda(objWsh As Worksheet, _
                         TxtBuscar As String, _
                Optional Origen As String = "A1", _
                Optional Sentido As Byte = 3, _
                Optional Exacto As Boolean = True) As String
                         
Dim PosCol As Long, PosRow As Long, r As Range, Encontrado As Boolean
    
    With objWsh
        PosCol = .Range(Origen).Column
        PosRow = .Range(Origen).Row
        Do
            Set r = .Cells(PosRow, PosCol)
            
            If Exacto Then
                Encontrado = (StrComp(r.Value, TxtBuscar, vbTextCompare) = 0)
            Else
                Encontrado = (InStr(1, r.Value, TxtBuscar) <> 0)
            End If
            
            If Encontrado Then
                BuscaCelda = r.Address(False, False)
                Exit Do
            End If
            PosCol = PosCol - (Sentido = 3) + (Sentido = 9)
            PosRow = PosRow - (Sentido = 6) + (Sentido = 12)
        Loop Until r.Value = "" Or PosCol = 0 Or PosRow = 0
    End With
End Function


'Entrega la |fffd|ltima Celda que contenga valor, partiendo desde Origen
'Sentido: 0 hacia la derecha, 9 hacia la izquierda, 12 hacia arriba, 6 hacia abajo
Private Function UltimaCelda(objWsh As Worksheet, _
                    Optional Origen As String = "A1", _
                    Optional Sentido As Byte = 3) As String
Dim Celda As String

    Celda = BuscaCelda(objWsh, "", Origen, Sentido, True)
    
    Select Case Sentido
        Case 9 'hacia la izquierda
            If Celda = "" Then
                UltimaCelda = Cells(Range(Origen).Row, 1).Address(False, False)
            Else
                UltimaCelda = Cells(Range(Origen).Row, objWsh.Range(Celda).Column + 1).Address(False, False)
            End If
        Case 12 'hacia arriba
            If Celda = "" Then
                UltimaCelda = Cells(1, Range(Celda).Column).Address(False, False)
            Else
                UltimaCelda = Cells(Range(Celda).Row + 1, objWsh.Range(Origen).Column).Address(False, False)
            End If
        Case 3 'hacia la derecha
            UltimaCelda = Cells(Range(Origen).Row, objWsh.Range(Celda).Column - 1).Address(False, False)
        Case 6 'hacia abajo
            UltimaCelda = Cells(Range(Celda).Row - 1, objWsh.Range(Origen).Column).Address(False, False)
    End Select

End Function


Private Function L2N(LetraCol As String) As Long
    L2N = Range(LetraCol & 1).Column
End Function

Private Function N2L(NumCol As Long) As String
    N2L = Split(Cells(, NumCol).Address, "$")(1)
End Function


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'David Gonz|fffd|lez Garz|fffd|n - 5/2018

Private RangosSecs() As String


Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, _
                                            ByVal Target As Range, _
                                                  Cancel As Boolean)
Dim RS As String

    On Error Resume Next
    RS = RangosSecs(ThisWorkbook.ActiveSheet.Index - 1)
    If RS = "" Then CargaRangosSecs
    
    If Not Application.Intersect(Target, Range(RS)) Is Nothing Then
        AbreSecuencia Target.Value
    End If
    Cancel = True
End Sub


Private Sub Workbook_Open()
    Application.WindowState = xlMaximized
End Sub
 
'Carga en la matriz RangosSecs las columnas que tienen alg|fffd|n tipo de Secuencia, con formato "BB;CC"
'El |fffd|ndice de la matriz es el n|fffd| de hoja menos 1
Private Sub CargaRangosSecs()
Dim objWsh As Worksheet, i As Long
    
    ReDim RangosSecs(ThisWorkbook.Sheets.Count - 1)
    
    For i = 1 To ThisWorkbook.Sheets.Count
        Set objWsh = ThisWorkbook.Sheets(i)
        RangosSecs(i - 1) = RangoSecuencias(objWsh)
    Next
    
End Sub


Private Function RangoSecuencias(objWsh As Worksheet) As String
Dim Col As String, sep As String, BC As String

    BC = BuscaCelda(objWsh, "Secuencia")
    If BC <> "" Then
        Col = Split(Range(BC).Address, "$")(1)
        RangoSecuencias = Col & Col
        sep = ";"
    End If
    
    BC = BuscaCelda(objWsh, "CODACTUACION")
    If BC <> "" Then
        Col = Split(Range(BC).Address, "$")(1)
        RangoSecuencias = RangoSecuencias & sep & Col & Col
        sep = ";"
    End If
    
End Function


' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
