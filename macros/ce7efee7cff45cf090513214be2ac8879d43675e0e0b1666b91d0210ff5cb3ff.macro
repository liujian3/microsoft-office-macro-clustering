Attribute VB_Name = "Ecriture_Lignes"
Sub Ecrire_comptes()
Dim MaLigneEcritures As Integer
Dim MonLibell|fffd|, MesObservations, ModeLigne As String
Dim Formule As String, MonSolde As Currency

With UF_Comptes
    If .Titre.Caption = "Ajouter un Compte" Then
        ' AJOUT *******************************************************
        ModeLigne = "Ajout"
        MaLigneCompte = Range("Comptes").Row + 1
    Else
        'MODIF *******************************************************
        ModeLigne = "Modif"
    End If
    
    'Contr|fffd|les
    If Not Len(.TB_Libell|fffd|.Value) > 0 Then
        Message = "Veuillez entrer un libell|fffd| valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Libell|fffd|.SetFocus
        Exit Sub
    End If
    
    If Not IsNumeric(.TB_Solde_Initial.Value) Then
        Message = "Veuillez entrer un solde initial valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Solde_Initial.SetFocus
        Exit Sub
    End If
    
    MonLibell|fffd| = .TB_Libell|fffd|.Value
    MonSolde = .TB_Solde_Initial.Value
    MesObservations = .TB_Observations.Value
End With

Sheets("Comptes").Activate
Call D|fffd|prot|fffd|ger

If ModeLigne = "Ajout" Then
    Application.ScreenUpdating = False
    With Sheets("Comptes")
        .Rows(MaLigneCompte).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Selection.ClearContents
        Application.CutCopyMode = False
    End With
End If

With Sheets("Comptes")
    'Libell|fffd| (colonne A)
    .Range("A" & MaLigneCompte).Value = MonLibell|fffd|
    
    'Solde initial (colonne B)
    .Range("B" & MaLigneCompte).Value = MonSolde
     
   'Recettes (colonne C) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!A:A;A:A;Ecritures!F:F;"Recette")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!A:A,A:A,Ecritures!F:F," & Chr(34) & "Recette" & Chr(34) & ")"
    .Range("C" & MaLigneCompte).Formula = Formule
    
     'D|fffd|penses (colonne D) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!A:A;A:A;Ecritures!F:F;"D|fffd|pense")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!A:A,A:A,Ecritures!F:F," & Chr(34) & "D|fffd|pense" & Chr(34) & ")"
    .Range("D" & MaLigneCompte).Formula = Formule
    
    'Solde (colonne E) : =B5+C5+D5
    Formule = "=B" & MaLigneCompte & "+C" & MaLigneCompte & "+D" & MaLigneCompte
    .Range("E" & MaLigneCompte).Formula = Formule
 
    'Observations (colonne F)
    .Range("F" & MaLigneCompte).Value = MesObservations
           
    .Range("A" & MaLigneCompte).Select
End With
Call Prot|fffd|ger

'Test de changement d'un libell|fffd| de Compte impliquant une mise |fffd| jour des Rubriques
If ModeLigne = "Modif" Then

    If MonLibell|fffd| <> MonAncienLibell|fffd| Then
        MaLigneRubrique = Range("Rubriques").Row + 1
        Application.ScreenUpdating = False
        With Sheets("Rubriques")
            ActiveSheet.Unprotect
Boucle_MAJ:
            If Len(.Range("A" & MaLigneRubrique).Value) = 0 Then GoTo Fin_Boucle_MAJ
            If .Range("B" & MaLigneRubrique).Value = MonAncienLibell|fffd| Then .Range("B" & MaLigneRubrique).Value = MonLibell|fffd|
            MaLigneRubrique = MaLigneRubrique + 1
            GoTo Boucle_MAJ
            
Fin_Boucle_MAJ:
            ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:= _
                False, AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:= _
                True
        End With
    End If
    Sheets("Comptes").Activate
End If
End Sub

Sub Ecrire_Cat|fffd|gories()
Dim MonLibell|fffd|, MesObservations, ModeLigne As String
Dim Formule As String, MaLigneRubrique As Integer

With UF_Cat|fffd|gories
    If .Titre.Caption = "Ajouter une Cat|fffd|gorie" Then
        ' AJOUT *******************************************************
        ModeLigne = "Ajout"
        MaLigneCat|fffd|gorie = Range("Cat|fffd|gories").Row + 1
    Else
        'MODIF *******************************************************
        ModeLigne = "Modif"
    End If
    
    'Contr|fffd|les
    If Not Len(.TB_Libell|fffd|.Value) > 0 Then
        Message = "Veuillez entrer un libell|fffd| valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Libell|fffd|.SetFocus
        Exit Sub
    End If
    
    MonLibell|fffd| = .TB_Libell|fffd|.Value
    MesObservations = .TB_Observations.Value
End With

Sheets("Cat|fffd|gories").Activate
Call D|fffd|prot|fffd|ger

If ModeLigne = "Ajout" Then
    Application.ScreenUpdating = False
    With Sheets("Cat|fffd|gories")
        .Rows(MaLigneCat|fffd|gorie).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Selection.ClearContents
        Application.CutCopyMode = False
    End With
End If

With Sheets("Cat|fffd|gories")
    'Libell|fffd| (colonne A)
    .Range("A" & MaLigneCat|fffd|gorie).Value = MonLibell|fffd|
    
    'Recettes (colonne B) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!O:O;A:A;Ecritures!F:F;"Recette")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!O:O,A:A,Ecritures!F:F," & Chr(34) & "Recette" & Chr(34) & ")"
    .Range("B" & MaLigneCat|fffd|gorie).Formula = Formule
    
     'D|fffd|penses (colonne C) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!O:O;A:A;Ecritures!F:F;"D|fffd|pense")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!O:O,A:A,Ecritures!F:F," & Chr(34) & "D|fffd|pense" & Chr(34) & ")"
    .Range("C" & MaLigneCat|fffd|gorie).Formula = Formule
    
    'Solde (colonne D) : =B5+C5
    Formule = "=B" & MaLigneCat|fffd|gorie & "+C" & MaLigneCat|fffd|gorie
    .Range("D" & MaLigneCat|fffd|gorie).Formula = Formule
        
   'Observations (colonne E)
    .Range("E" & MaLigneCat|fffd|gorie).Value = MesObservations
           
    .Range("A" & MaLigneCat|fffd|gorie).Select
End With
Call Prot|fffd|ger

'Test de changement d'un libell|fffd| de Cat|fffd|gorie impliquant une mise |fffd| jour des Rubriques
If ModeLigne = "Modif" Then

    If MonLibell|fffd| <> MonAncienLibell|fffd| Then
        MaLigneRubrique = Range("Rubriques").Row + 1
        Application.ScreenUpdating = False
        With Sheets("Rubriques")
            ActiveSheet.Unprotect
Boucle_MAJ:
            If Len(.Range("A" & MaLigneRubrique).Value) = 0 Then GoTo Fin_Boucle_MAJ
            If .Range("B" & MaLigneRubrique).Value = MonAncienLibell|fffd| Then .Range("B" & MaLigneRubrique).Value = MonLibell|fffd|
            MaLigneRubrique = MaLigneRubrique + 1
            GoTo Boucle_MAJ
            
Fin_Boucle_MAJ:
            ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:= _
                False, AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:= _
                True
        End With
    End If
    Sheets("Cat|fffd|gories").Activate
End If
End Sub
Sub Ecrire_Rubriques()
Dim MonLibell|fffd|, MaCat|fffd|gorie, MesObservations, ModeLigne As String
Dim Formule As String, MaLigneEcriture As Integer

With UF_Rubriques
    If .Titre.Caption = "Ajouter une Rubrique" Then
        ' AJOUT *******************************************************
        ModeLigne = "Ajout"
        MaLigneRubrique = Range("Rubriques").Row + 1
    Else
        'MODIF *******************************************************
        ModeLigne = "Modif"
    End If
    
    'Contr|fffd|les
    If Not Len(.TB_Libell|fffd|.Value) > 0 Then
        Message = "Veuillez entrer un libell|fffd| valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Libell|fffd|.SetFocus
        Exit Sub
    End If
    
    MonLibell|fffd| = .TB_Libell|fffd|.Value
    MaCat|fffd|gorie = .CB_Cat|fffd|gorie.Text
    MesObservations = .TB_Observations.Value
End With

Sheets("Rubriques").Activate
Call D|fffd|prot|fffd|ger

If ModeLigne = "Ajout" Then
    Application.ScreenUpdating = False
    With Sheets("Rubriques")
        .Rows(MaLigneRubrique).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Selection.ClearContents
        Application.CutCopyMode = False
    End With
End If

With Sheets("Rubriques")
    'Libell|fffd| (colonne A)
    .Range("A" & MaLigneRubrique).Value = MonLibell|fffd|
    
    'Cat|fffd|gorie (colonne B)
    .Range("B" & MaLigneRubrique).Value = MaCat|fffd|gorie
    
    'Recettes (colonne C) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!D:D;A:A;Ecritures!F:F;"Recette")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!D:D,A:A,Ecritures!F:F," & Chr(34) & "Recette" & Chr(34) & ")"
    .Range("C" & MaLigneRubrique).Formula = Formule
    
     'D|fffd|penses (colonne D) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!D:D;A:A;Ecritures!F:F;"D|fffd|pense")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!D:D,A:A,Ecritures!F:F," & Chr(34) & "D|fffd|pense" & Chr(34) & ")"
    .Range("D" & MaLigneRubrique).Formula = Formule
    
    'Solde (colonne E) : =C5+D5
    Formule = "=C" & MaLigneRubrique & "+D" & MaLigneRubrique
    .Range("E" & MaLigneRubrique).Formula = Formule
        
   'Observations (colonne F)
    .Range("F" & MaLigneRubrique).Value = MesObservations
           
    .Range("A" & MaLigneRubrique).Select
End With
Call Prot|fffd|ger

'Test de changement d'un libell|fffd| de Rubrique impliquant une mise |fffd| jour des Ecritures
If ModeLigne = "Modif" Then

    If MonLibell|fffd| <> MonAncienLibell|fffd| Then
        MaLigneEcriture = Range("Ecritures").Row + 1
        Application.ScreenUpdating = False
        With Sheets("Ecritures")
            ActiveSheet.Unprotect
Boucle_MAJ:
            If Len(.Range("A" & MaLigneEcriture).Value) = 0 Then GoTo Fin_Boucle_MAJ
            If .Range("B" & MaLigneEcriture).Value = MonAncienLibell|fffd| Then .Range("B" & MaLigneEcriture).Value = MonLibell|fffd|
            MaLigneEcriture = MaLigneEcriture + 1
            GoTo Boucle_MAJ
            
Fin_Boucle_MAJ:
            ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:= _
                False, AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:= _
                True
        End With
    End If
    Sheets("Rubriques").Activate
End If
End Sub
Sub Ecrire_Regroupements()
Dim MonLibell|fffd|, MesObservations, ModeLigne As String
Dim Formule As String, MaLigneRubrique As Integer

With UF_Regroupements
    If .Titre.Caption = "Ajouter un Regroupement" Then
        ' AJOUT *******************************************************
        ModeLigne = "Ajout"
        MaLigneRegroupement = Range("Regroupements").Row + 1
    Else
        'MODIF *******************************************************
        ModeLigne = "Modif"
    End If
    
    'Contr|fffd|les
    If Not Len(.TB_Libell|fffd|.Value) > 0 Then
        Message = "Veuillez entrer un libell|fffd| valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Libell|fffd|.SetFocus
        Exit Sub
    End If
    
    MonLibell|fffd| = .TB_Libell|fffd|.Value
    MesObservations = .TB_Observations.Value
End With

Sheets("Regroupements").Activate
Call D|fffd|prot|fffd|ger

If ModeLigne = "Ajout" Then
    Application.ScreenUpdating = False
    With Sheets("Regroupements")
        .Rows(MaLigneRegroupement).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Selection.ClearContents
        Application.CutCopyMode = False
    End With
End If

With Sheets("Regroupements")
    'Libell|fffd| (colonne A)
    .Range("A" & MaLigneRegroupement).Value = MonLibell|fffd|
    
    'Recettes (colonne B) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!E:E;A:A;Ecritures!F:F;"Recette")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!E:E,A:A,Ecritures!F:F," & Chr(34) & "Recette" & Chr(34) & ")"
    .Range("B" & MaLigneRegroupement).Formula = Formule
    
     'D|fffd|penses (colonne C) : =SOMME.SI.ENS(Ecritures!N:N;Ecritures!E:E;A:A;Ecritures!F:F;"D|fffd|pense")
    Formule = "=sumifs(Ecritures!N:N,Ecritures!E:E,A:A,Ecritures!F:F," & Chr(34) & "D|fffd|pense" & Chr(34) & ")"
    .Range("C" & MaLigneRegroupement).Formula = Formule
    
    'Solde (colonne D) : =B5+C5
    Formule = "=B" & MaLigneRegroupement & "+C" & MaLigneRegroupement
    .Range("D" & MaLigneRegroupement).Formula = Formule
        
   'Observations (colonne E)
    .Range("E" & MaLigneRegroupement).Value = MesObservations
           
    .Range("A" & MaLigneRegroupement).Select
End With
Call Prot|fffd|ger

'Test de changement d'un libell|fffd| de Regroupement impliquant une mise |fffd| jour des Rubriques
If ModeLigne = "Modif" Then

    If MonLibell|fffd| <> MonAncienLibell|fffd| Then
        MaLigneRubrique = Range("Rubriques").Row + 1
        Application.ScreenUpdating = False
        With Sheets("Rubriques")
            ActiveSheet.Unprotect
Boucle_MAJ:
            If Len(.Range("A" & MaLigneRubrique).Value) = 0 Then GoTo Fin_Boucle_MAJ
            If .Range("B" & MaLigneRubrique).Value = MonAncienLibell|fffd| Then .Range("B" & MaLigneRubrique).Value = MonLibell|fffd|
            MaLigneRubrique = MaLigneRubrique + 1
            GoTo Boucle_MAJ
            
Fin_Boucle_MAJ:
            ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:= _
                False, AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:= _
                True
        End With
    End If
    Sheets("Regroupements").Activate
End If
End Sub

Sub Ecrire_Ecritures()
Dim MonMontant As Currency
Dim MonCompte, MaRubrique, MaR|fffd|f|fffd|rence, MonMode, MonSens, MonRegroupement As String
Dim MonLibell|fffd|, MonTiers, MesObservations, ModeLigne As String
Dim MaDate, MaDateBanque As Date
Dim Formule As String

With UF_Ecritures
    If .Titre.Caption = "Ajouter une Ecriture" Then
        ' AJOUT *******************************************************
        ModeLigne = "Ajout"
        MaLigneEcriture = Range("Ecritures").Row + 1
    Else
        'MODIF *******************************************************
        ModeLigne = "Modif"
        'MaLigneEcriture = ActiveCell.Row
    End If
    
    'Contr|fffd|les
    If Not IsDate(.TB_Date.Value) Then
        Message = "Veuillez entrer une date valide"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Contr|fffd|le de saisie")
        .TB_Date.SetFocus
        Exit Sub
    End If
    
    If Not IsDate(.TB_Date_Banque.Value) And Len(.TB_Date_Banque.Value) > 0 Then
        Message = "Veuillez entrer une date valide"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Contr|fffd|le de saisie")
        .TB_Date_Banque.SetFocus
        Exit Sub
    End If
    
    If Len(.TB_Libell|fffd|.Value) = 0 Then
        Message = "Veuillez entrer un libell|fffd|"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Contr|fffd|le de saisie")
        .TB_Libell|fffd|.SetFocus
        Exit Sub
    End If
    
    If Len(.TB_Tiers.Value) = 0 Then
        Message = "Veuillez entrer un tiers"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Contr|fffd|le de saisie")
        .TB_Tiers.SetFocus
        Exit Sub
    End If
    
    If Not IsNumeric(.TB_Montant.Value) Then
        Message = "Veuillez entrer un montant valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .TB_Montant.SetFocus
        Exit Sub
    End If
    
    If .LB_Mode.ListIndex = 0 Then
        Message = "Veuillez entrer un Mode valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .LB_Mode.SetFocus
        Exit Sub
    End If
    
    If .CB_Rubrique.ListIndex = 0 Then
        Message = "Veuillez entrer une Rubrique valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .CB_Rubrique.SetFocus
        Exit Sub
    End If
    
    If .CB_Regroupement.ListIndex = 0 Or Len(.CB_Regroupement.Value) = 0 Then
        Message = "Veuillez entrer un Regroupement valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .CB_Regroupement.SetFocus
        Exit Sub
    End If
    
    If .CB_Compte.ListIndex = 0 Then
        Message = "Veuillez entrer un Compte valide !"
        R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
        .CB_Compte.SetFocus
        Exit Sub
    End If
    
    MonCompte = .CB_Compte.Value
    MaDate = .TB_Date.Value
    If .TB_Date_Banque.Value <> "" Then MaDateBanque = .TB_Date_Banque.Value
    MonMode = .LB_Mode.Value
    MonLibell|fffd| = .TB_Libell|fffd|.Value
    MonRegroupement = .CB_Regroupement.Value
    MaRubrique = .CB_Rubrique.Value
    MonTiers = .TB_Tiers.Value
    MaR|fffd|f|fffd|rence = .TB_R|fffd|f|fffd|rence.Value
    MesObservations = .TB_Observations.Value
    If .OB_D|fffd|pense = True Then MonSens = "D|fffd|pense"
    If .OB_Recette = True Then MonSens = "Recette"
    MonMontant = .TB_Montant.Value
    'If MonSens = "D|fffd|pense" Then MonMontant = MonMontant * -1
End With
'UF_Ecritures.Hide

Sheets("Ecritures").Activate
Call D|fffd|prot|fffd|ger
Application.ScreenUpdating = False
'si on est en mode Ajout, on ins|fffd|re une ligne
If ModeLigne = "Ajout" Then
    With Sheets("Ecritures")
        .Rows(MaLigneEcriture).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Selection.ClearContents
    
        Application.CutCopyMode = False
    End With
End If

With Sheets("Ecritures")
    'Compte (colonne A)
    .Range("A" & MaLigneEcriture).Value = MonCompte
    'Date du jour (colonne B)
    .Range("B" & MaLigneEcriture).Value = MaDate
    'Objet (colonne C)
    .Range("C" & MaLigneEcriture).Value = MonLibell|fffd|
    'Compte (colonne D)
    .Range("D" & MaLigneEcriture).Value = MaRubrique
    'Regroupement (colonne E)
    .Range("E" & MaLigneEcriture).Value = MonRegroupement
    'Sens (colonne F)
    .Range("F" & MaLigneEcriture).Value = MonSens
    'Mode (colonne G)
    .Range("G" & MaLigneEcriture).Value = MonMode
    'R|fffd|f|fffd|rence (colonne H)
    .Range("H" & MaLigneEcriture).Value = MaR|fffd|f|fffd|rence
    'Montant (colonne I)
    .Range("I" & MaLigneEcriture).Value = MonMontant
     'Tiers (colonne J)
    .Range("J" & MaLigneEcriture).Value = MonTiers
    'Date banque (colonne K)
    If MaDateBanque > 0 Then
        .Range("K" & MaLigneEcriture).Value = MaDateBanque
    Else
        .Range("K" & MaLigneEcriture).Value = ""
    End If
    'Observations (colonne L)
    .Range("L" & MaLigneEcriture).Value = MesObservations
    
    'P|fffd|riode (colonne M) :
    '=SI(ESTNUM(B5);ANNEE(B5)&"-"&TEXTE(MOIS(B5);"00");"")
    Formule = "=Year(B" & MaLigneEcriture
    Formule = Formule & ")" & Chr(38) & Chr(34) & "-" & Chr(34) & Chr(38)
    Formule = Formule & "Text(Month(B" & MaLigneEcriture & ")," & Chr(34)
    Formule = Formule & "00" & Chr(34) & ")"
    Worksheets("Ecritures").Range("M" & MaLigneEcriture).Formula = Formule
        
    'Montant comptable (colonne N) : '=SI(F5="D|fffd|pense";I5*-1;I5)
    Formule = "=if(F" & MaLigneEcriture & "=" & Chr(34) & "D|fffd|pense" & Chr(34)
    Formule = Formule & ",I" & MaLigneEcriture & "*-1,I" & MaLigneEcriture & ")"
    Worksheets("Ecritures").Range("N" & MaLigneEcriture).Formula = Formule

    'Cat|fffd|gorie (colonne O)
    '=SI(ESTTEXTE(RECHERCHEV(D5;Rubriques;2;FAUX));RECHERCHEV(D5;Rubriques;2;FAUX);"")
    Formule = "=if(istext(vlookup(D" & MaLigneEcriture & ",Rubriques,2,false)),"
    Formule = Formule & "vlookup(D" & MaLigneEcriture & ",Rubriques,2,false),"
    Formule = Formule & Chr(34) & Chr(34) & ")"
    Worksheets("Ecritures").Range("O" & MaLigneEcriture).Formula = Formule
    
    .Range("A" & MaLigneEcriture).Select
End With
Call Prot|fffd|ger

End Sub
Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Afficher_Form_Ajout_Ecriture()
With UF_Ecritures

    .TB_Date.Text = Format(Now, "DD/MM/YYYY")
    .TB_Date_Banque.Text = ""
    .TB_Libell|fffd|.Text = ""
    .TB_R|fffd|f|fffd|rence.Text = ""
    .TB_Montant.Text = 0
    .TB_Tiers.Text = ""
    .TB_Observations.Text = ""
  
    .TB_Date.SelStart = 0
    .TB_Date_Banque.SelStart = 0
    .TB_Libell|fffd|.SelStart = 0
    .TB_R|fffd|f|fffd|rence.SelStart = 0
    .TB_Montant.SelStart = 0
    .TB_Tiers.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Date.SelLength = Len(.TB_Date.Value)
    .TB_Date_Banque.SelLength = Len(.TB_Date.Value)
    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_R|fffd|f|fffd|rence.SelLength = Len(.TB_R|fffd|f|fffd|rence.Value)
    .TB_Montant.SelLength = Len(.TB_Montant.Value)
    .TB_Tiers.SelLength = Len(.TB_Observations.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .OB_D|fffd|pense.Value = True
    .OB_Recette.Value = False
    
    .CB_Compte.RowSource = "Liste_Comptes"
    .CB_Compte.ListIndex = Evaluate("=MATCH(VD_Compte,Liste_Comptes,0)-1")
    
    .CB_Rubrique.RowSource = "Liste_Rubriques"
    .CB_Rubrique.ListIndex = Evaluate("=MATCH(VD_Rubrique,Liste_Rubriques,0)-1")
    
    .CB_Regroupement.RowSource = "Liste_Regroupements"
    .CB_Regroupement.ListIndex = Evaluate("=MATCH(VD_Regroupement,Liste_Regroupements,0)-1")

    .LB_Mode.RowSource = "Liste_Modes"
    .LB_Mode.ListIndex = Evaluate("=MATCH(VD_Mode,Liste_Modes,0)-1")
    
    .Titre.Caption = "Ajouter une Ecriture"
End With
Call Oter_Filtre
UF_Ecritures.Show
End Sub

Sub Afficher_Form_Modif_Ecriture()
Dim R|fffd|ponse As Integer

MaLigneEcriture = ActiveCell.Row

'V|fffd|rifier qu'on est dans la plage des Ecritures
If MaLigneEcriture < Range("Ecritures").Row + 1 Or MaLigneEcriture > Range("Ecritures").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("S|fffd|lection incorrecte", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If

Call Oter_Filtre
Call Lire_Ecritures
UF_Ecritures.Show
End Sub

Sub Trier_Ecritures()
Sheets("Ecritures").Activate
Call D|fffd|prot|fffd|ger
With Sheets("Ecritures").Range("Ecritures")
    .Sort Key1:=ActiveCell, Order1:=xlAscending, Header:= _
    xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortTextAsNumbers
End With
Call Prot|fffd|ger
End Sub
Sub Supprimer_Ecriture()
Dim MesLignesEcriture, MaLigneEcriture, R|fffd|ponse As Integer
Dim Message, MaCellule, Formule As String

On Error GoTo Supprimer_Erreur

Worksheets("Ecritures").Activate
'Contr|fffd|ler si s|fffd|lection multiple

If Selection.Cells.Count > 1 Then
    R|fffd|ponse = MsgBox("S|fffd|lectionnez une seule cellule !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If
MaCellule = "L" & ActiveCell.Row

'Interdire la suppression de la derni|fffd|re ligne :
MaLigneEcriture = Range("Ecritures").Row + 1 ' Worksheets("Param|fffd|tres").Range("Premi|fffd|re_Ligne_Ecritures").Value
Formule = "=CountA(Ecritures!A:A)-CountA(Ecritures!$A$1:$A$" & MaLigneEcriture - 1 & ")"
MesLignesEcriture = Evaluate(Formule)

If MesLignesEcriture = 1 Then
    R|fffd|ponse = MsgBox("Cette ligne sert de mod|fffd|le : modifiez plut|fffd|t ses valeurs !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une cellule verrouill|fffd|e :
If Worksheets("Ecritures").Range(MaCellule).Locked = True Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Suppression effective
R|fffd|ponse = MsgBox("Voulez-vous r|fffd|ellement supprimer cette ligne ?", vbYesNo, "Suppression d|fffd|finitive d'une ligne")
Select Case R|fffd|ponse
Case vbYes
    D|fffd|prot|fffd|ger
    'Application.ScreenUpdating = False
    Selection.EntireRow.Delete
    Prot|fffd|ger
End Select

Supprimer_Exit:
Exit Sub
Supprimer_Erreur:
Message = MsgBox(Error$)
Resume Supprimer_Exit
End Sub







Attribute VB_Name = "Feuil10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Afficher_Form_Ajout_Rubrique()
With UF_Rubriques

    .TB_Libell|fffd|.Text = ""
    .TB_Observations.Text = ""
  
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .CB_Cat|fffd|gorie.RowSource = "Liste_Cat|fffd|gories"
    .CB_Cat|fffd|gorie.ListIndex = Evaluate("=MATCH(VD_Cat|fffd|gorie,Liste_Cat|fffd|gories)-1")

    .Titre.Caption = "Ajouter une Rubrique"
End With
Call Oter_Filtre
UF_Rubriques.Show
End Sub

Sub Afficher_Form_Modif_Rubrique()
Dim R|fffd|ponse As Integer

MaLigneRubrique = ActiveCell.Row

'V|fffd|rifier qu'on est dans la plage des Rubriques
If MaLigneRubrique < Range("Rubriques").Row + 1 Or MaLigneRubrique > Range("Rubriques").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("S|fffd|lection incorrecte", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
Call Oter_Filtre
Call Lire_Rubriques
UF_Rubriques.Show
End Sub

Sub Trier_Rubriques()
Sheets("Rubriques").Activate
Call D|fffd|prot|fffd|ger
With Sheets("Rubriques").Range("Rubriques")
    .Sort Key1:=ActiveCell, Order1:=xlAscending, Header:= _
    xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortTextAsNumbers
End With
Call Prot|fffd|ger
End Sub
Sub Supprimer_Rubrique()
Dim MesLignesRubrique, MaLigneRubrique, R|fffd|ponse As Integer
Dim Message, MaCellule, Formule As String

On Error GoTo Supprimer_Erreur

Worksheets("Rubriques").Activate
'Contr|fffd|ler si s|fffd|lection multiple

If Selection.Cells.Count > 1 Then
    R|fffd|ponse = MsgBox("S|fffd|lectionnez une seule cellule !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If
MaCellule = "F" & ActiveCell.Row

'Interdire la suppression de la derni|fffd|re ligne :
MaLigneRubrique = Range("Rubriques").Row + 1 ' Worksheets("Param|fffd|tres").Range("Premi|fffd|re_Ligne_Rubriques").Value
Formule = "=CountA(Rubriques!A:A)-CountA(Rubriques!$A$1:$A$" & MaLigneRubrique - 1 & ")"
MesLignesRubrique = Evaluate(Formule)

If MesLignesRubrique = 1 Then
    R|fffd|ponse = MsgBox("Cette ligne sert de mod|fffd|le : modifiez plut|fffd|t ses valeurs !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une cellule verrouill|fffd|e :
If Worksheets("Rubriques").Range(MaCellule).Locked = True Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une Rubrique utilis|fffd|e dans les Ecritures (colonne C : Montants)
With Worksheets("Rubriques")
    On Error Resume Next
    MesLignesRubrique = .Range("C" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesRubrique <> 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : cette Rubrique est utilis|fffd|e dans les Ecritures !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une valeur par d|fffd|faut:
If Worksheets("Rubriques").Range("A" & ActiveCell.Row).Value = Worksheets("Param|fffd|tres").Range("VD_Rubrique").Value Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e (valeur par d|fffd|faut)!", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Suppression effective
R|fffd|ponse = MsgBox("Voulez-vous r|fffd|ellement supprimer cette ligne ?", vbYesNo, "Suppression d|fffd|finitive d'une ligne")
Select Case R|fffd|ponse
Case vbYes
    D|fffd|prot|fffd|ger
    'Application.ScreenUpdating = False
    Selection.EntireRow.Delete
    Prot|fffd|ger
End Select

Supprimer_Exit:
Exit Sub
Supprimer_Erreur:
Message = MsgBox(Error$)
Resume Supprimer_Exit
End Sub





Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Afficher_Form_Ajout_Regroupement()
With UF_Regroupements

    .TB_Libell|fffd|.Text = ""
    .TB_Observations.Text = ""
  
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .Titre.Caption = "Ajouter un Regroupement"
End With
Call Oter_Filtre
UF_Regroupements.Show
End Sub

Sub Afficher_Form_Modif_Regroupement()
Dim R|fffd|ponse As Integer

MaLigneRegroupement = ActiveCell.Row

'V|fffd|rifier qu'on est dans la plage des Regroupements
If MaLigneRegroupement < Range("Regroupements").Row + 1 Or MaLigneRegroupement > Range("Regroupements").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("S|fffd|lection incorrecte", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
Call Oter_Filtre
Call Lire_Regroupements
UF_Regroupements.Show
End Sub

Sub Trier_Regroupements()
Sheets("Regroupements").Activate
Call D|fffd|prot|fffd|ger
With Sheets("Regroupements").Range("Regroupements")
    .Sort Key1:=ActiveCell, Order1:=xlAscending, Header:= _
    xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortTextAsNumbers
End With
Call Prot|fffd|ger
End Sub
Sub Supprimer_Regroupement()
Dim MesLignesRegroupement, MaLigneRegroupement, R|fffd|ponse As Integer
Dim Message, MaCellule, Formule As String

On Error GoTo Supprimer_Erreur

Worksheets("Regroupements").Activate
'Contr|fffd|ler si s|fffd|lection multiple

If Selection.Cells.Count > 1 Then
    R|fffd|ponse = MsgBox("S|fffd|lectionnez une seule cellule !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If
MaCellule = "E" & ActiveCell.Row

'Interdire la suppression de la derni|fffd|re ligne :
MaLigneRegroupement = Range("Regroupements").Row + 1 ' Worksheets("Param|fffd|tres").Range("Premi|fffd|re_Ligne_Regroupements").Value
Formule = "=CountA(Regroupements!A:A)-CountA(Regroupements!$A$1:$A$" & MaLigneRegroupement - 1 & ")"
MesLignesRegroupement = Evaluate(Formule)

If MesLignesRegroupement = 1 Then
    R|fffd|ponse = MsgBox("Cette ligne sert de mod|fffd|le : modifiez plut|fffd|t ses valeurs !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une cellule verrouill|fffd|e :
If Worksheets("Regroupements").Range(MaCellule).Locked = True Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une Regroupement utilis|fffd|e dans les Ecritures (colonne B : Montants)
With Worksheets("Regroupements")
    On Error Resume Next
    MesLignesRegroupement = .Range("B" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesRegroupement <> 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : ce Regroupement est utilis|fffd|e dans les Ecritures !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une valeur par d|fffd|faut:
If Worksheets("Regroupements").Range("A" & ActiveCell.Row).Value = Worksheets("Param|fffd|tres").Range("VD_Regroupement").Value Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e (valeur par d|fffd|faut)!", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Suppression effective
R|fffd|ponse = MsgBox("Voulez-vous r|fffd|ellement supprimer cette ligne ?", vbYesNo, "Suppression d|fffd|finitive d'une ligne")
Select Case R|fffd|ponse
Case vbYes
    D|fffd|prot|fffd|ger
    'Application.ScreenUpdating = False
    Selection.EntireRow.Delete
    Prot|fffd|ger
End Select

Supprimer_Exit:
Exit Sub
Supprimer_Erreur:
Message = MsgBox(Error$)
Resume Supprimer_Exit
End Sub



Attribute VB_Name = "Feuil5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Afficher_Form_Ajout_Cat|fffd|gorie()
With UF_Cat|fffd|gories

    .TB_Libell|fffd|.Text = ""
    .TB_Observations.Text = ""
  
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .Titre.Caption = "Ajouter une Cat|fffd|gorie"
End With
Call Oter_Filtre
UF_Cat|fffd|gories.Show
End Sub

Sub Afficher_Form_Modif_Cat|fffd|gorie()
Dim R|fffd|ponse As Integer

MaLigneCat|fffd|gorie = ActiveCell.Row

'V|fffd|rifier qu'on est dans la plage des Cat|fffd|gories
If MaLigneCat|fffd|gorie < Range("Cat|fffd|gories").Row + 1 Or MaLigneCat|fffd|gorie > Range("Cat|fffd|gories").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("S|fffd|lection incorrecte", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
Call Oter_Filtre
Call Lire_Cat|fffd|gories
UF_Cat|fffd|gories.Show

End Sub

Sub Trier_Cat|fffd|gories()
Sheets("Cat|fffd|gories").Activate
Call D|fffd|prot|fffd|ger
With Sheets("Cat|fffd|gories").Range("Cat|fffd|gories")
    .Sort Key1:=ActiveCell, Order1:=xlAscending, Header:= _
    xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortTextAsNumbers
End With
Call Prot|fffd|ger
End Sub
Sub Supprimer_Cat|fffd|gorie()
Dim MesLignesCat|fffd|gorie, R|fffd|ponse As Integer
Dim Message, MaCellule, Formule As String

On Error GoTo Supprimer_Erreur

Worksheets("Cat|fffd|gories").Activate

'Contr|fffd|ler si s|fffd|lection multiple
If Selection.Cells.Count > 1 Then
    R|fffd|ponse = MsgBox("S|fffd|lectionnez une seule cellule !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If
MaCellule = "E" & ActiveCell.Row

'Interdire la suppression de la derni|fffd|re ligne :
MaLigneCat|fffd|gorie = Range("Cat|fffd|gories").Row + 1 ' Worksheets("Param|fffd|tres").Range("Premi|fffd|re_Ligne_Cat|fffd|gories").Value
Formule = "=CountA(Cat|fffd|gories!A:A)-CountA(Cat|fffd|gories!$A$1:$A$" & MaLigneCat|fffd|gorie - 1 & ")"
MesLignesCat|fffd|gorie = Evaluate(Formule)

If MesLignesCat|fffd|gorie = 1 Then
    R|fffd|ponse = MsgBox("Cette ligne sert de mod|fffd|le : modifiez plut|fffd|t ses valeurs !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une cellule verrouill|fffd|e :
If Worksheets("Cat|fffd|gories").Range(MaCellule).Locked = True Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une Cat|fffd|gorie utilis|fffd|e dans les Recettes (colonne B)
With Worksheets("Cat|fffd|gories")
    On Error Resume Next
    MesLignesCat|fffd|gorie = .Range("B" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesCat|fffd|gorie > 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : cette Cat|fffd|gorie est utilis|fffd|e dans les Ecritures !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une Cat|fffd|gorie utilis|fffd|e dans les D|fffd|penses (colonne C)
With Worksheets("Cat|fffd|gories")
    On Error Resume Next
    MesLignesCat|fffd|gorie = .Range("C" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesCat|fffd|gorie > 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : cette Cat|fffd|gorie est utilis|fffd|e dans les Ecritures !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une valeur par d|fffd|faut:
If Worksheets("Cat|fffd|gories").Range("A" & ActiveCell.Row).Value = Worksheets("Param|fffd|tres").Range("VD_Cat|fffd|gorie").Value Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e (valeur par d|fffd|faut)!", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Suppression effective
R|fffd|ponse = MsgBox("Voulez-vous r|fffd|ellement supprimer cette ligne ?", vbYesNo, "Suppression d|fffd|finitive d'une ligne")
Select Case R|fffd|ponse
Case vbYes
    D|fffd|prot|fffd|ger
    Application.ScreenUpdating = False
    Selection.EntireRow.Delete
    Prot|fffd|ger
End Select

Supprimer_Exit:
Exit Sub
Supprimer_Erreur:
Message = MsgBox(Error$)
Resume Supprimer_Exit
End Sub

Attribute VB_Name = "Feuil6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Feuil7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Afficher_Form_Ajout_Compte()
With UF_Comptes

    .TB_Libell|fffd|.Text = ""
    .TB_Solde_Initial.Text = 0
    .TB_Observations.Text = ""
      
    .TB_Libell|fffd|.SelStart = 0
    .TB_Solde_Initial.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Solde_Initial.SelLength = Len(.TB_Solde_Initial.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .Titre.Caption = "Ajouter un Compte"
End With
Call Oter_Filtre
UF_Comptes.Show
End Sub

Sub Afficher_Form_Modif_Compte()
Dim R|fffd|ponse As Integer

MaLigneCompte = ActiveCell.Row

'V|fffd|rifier qu'on est dans la plage des Comptes
If MaLigneCompte < Range("Comptes").Row + 1 Or MaLigneCompte > Range("Comptes").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("S|fffd|lection incorrecte", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
Call Oter_Filtre
Call Lire_Comptes
UF_Comptes.Show
End Sub

Sub Trier_Comptes()
Sheets("Comptes").Activate
Call D|fffd|prot|fffd|ger
With Sheets("Comptes").Range("Comptes")
    .Sort Key1:=ActiveCell, Order1:=xlAscending, Header:= _
    xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortTextAsNumbers
End With
Call Prot|fffd|ger
End Sub
Sub Supprimer_Compte()
Dim MesLignesCompte, MaLigneCompte, R|fffd|ponse As Integer
Dim Message, MaCellule, Formule As String

On Error GoTo Supprimer_Erreur

Worksheets("Comptes").Activate
'Contr|fffd|ler si s|fffd|lection multiple

If Selection.Cells.Count > 1 Then
    R|fffd|ponse = MsgBox("S|fffd|lectionnez une seule cellule !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If
MaCellule = "F" & ActiveCell.Row

'Interdire la suppression de la derni|fffd|re ligne :
MaLigneCompte = Range("Comptes").Row + 1 ' Worksheets("Param|fffd|tres").Range("Premi|fffd|re_Ligne_Comptes").Value
Formule = "=CountA(Comptes!A:A)-CountA(Comptes!$A$1:$A$" & MaLigneCompte - 1 & ")"
MesLignesCompte = Evaluate(Formule)

If MesLignesCompte = 1 Then
    R|fffd|ponse = MsgBox("Cette ligne sert de mod|fffd|le : modifiez plut|fffd|t ses valeurs !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une cellule verrouill|fffd|e :
If Worksheets("Comptes").Range(MaCellule).Locked = True Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e !", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Interdire la suppression d'une Compte utilis|fffd|e dans les Ecritures (colonne C : Recettes)
With Worksheets("Comptes")
    On Error Resume Next
    MesLignesCompte = .Range("C" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesCompte <> 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : ce Compte est utilis|fffd|e dans des |fffd|critures de recette !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une Compte utilis|fffd|e dans les Ecritures (colonne D : D|fffd|penses)
With Worksheets("Comptes")
    MesLignesCompte = .Range("D" & ActiveCell.Row).Value
    On Error GoTo Supprimer_Erreur
    If MesLignesCompte <> 0 Then
        R|fffd|ponse = MsgBox("Suppression impossible : ce Compte est utilis|fffd|e dans des |fffd|critures de d|fffd|pense !", vbOKOnly, "Contr|fffd|le avant suppression")
        If R|fffd|ponse = vbOK Then Exit Sub
    End If
End With

'Interdire la suppression d'une valeur par d|fffd|faut:
If Worksheets("Comptes").Range("A" & ActiveCell.Row).Value = Worksheets("Param|fffd|tres").Range("VD_Compte").Value Then
    R|fffd|ponse = MsgBox("Suppression de cette ligne non autoris|fffd|e (valeur par d|fffd|faut)!", vbOKOnly, "Contr|fffd|le de suppression")
    Exit Sub
End If

'Suppression effective
R|fffd|ponse = MsgBox("Voulez-vous r|fffd|ellement supprimer cette ligne ?", vbYesNo, "Suppression d|fffd|finitive d'une ligne")
Select Case R|fffd|ponse
Case vbYes
    D|fffd|prot|fffd|ger
    Application.ScreenUpdating = False
    Selection.EntireRow.Delete
    Prot|fffd|ger
End Select

Supprimer_Exit:
Exit Sub
Supprimer_Erreur:
Message = MsgBox(Error$)
Resume Supprimer_Exit
End Sub



Attribute VB_Name = "Feuil8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "Feuil9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Lecture_Lignes"
Sub Lire_Comptes()
Dim R|fffd|ponse As Integer
Dim MonLibell|fffd|, MesObservations  As String, MonSoldeInitial As Currency
Dim MesD|fffd|penses, MesRecettes, MonSolde As Currency

With Worksheets("Comptes")
    MonLibell|fffd| = .Range("A" & MaLigneCompte).Value
    MonAncienLibell|fffd| = .Range("A" & MaLigneCompte).Value
    MonSoldeInitial = .Range("B" & MaLigneCompte).Value
    MesObservations = .Range("F" & MaLigneCompte).Value
    MesRecettes = .Range("C" & MaLigneCompte).Value
    MesD|fffd|penses = .Range("D" & MaLigneCompte).Value
    MonSolde = .Range("E" & MaLigneCompte).Value
End With

With UF_Comptes
    .TB_Libell|fffd|.Text = MonLibell|fffd|
    .TB_Solde_Initial.Text = MonSoldeInitial
    .TB_Observations.Text = MesObservations
    
    .TB_Recettes.Text = Format$(MesRecettes, "Currency")
    .TB_D|fffd|penses.Text = Format$(MesD|fffd|penses, "Currency")
    .TB_Solde.Text = Format$(MonSolde, "Currency")
    
    .TB_Libell|fffd|.SelStart = 0
    .TB_Solde_Initial.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Solde_Initial.SelLength = Len(.TB_Solde_Initial.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .TB_Libell|fffd|.SetFocus
    .Titre.Caption = "Modifier un Compte"
End With
End Sub
Sub Lire_Cat|fffd|gories()
Dim R|fffd|ponse As Integer
Dim MonLibell|fffd|, MesObservations  As String, MonSoldeInitial As Currency
Dim MesD|fffd|penses, MesRecettes, MonSolde As Currency

With Worksheets("Cat|fffd|gories")
    MonLibell|fffd| = .Range("A" & MaLigneCat|fffd|gorie)
    MonAncienLibell|fffd| = .Range("A" & MaLigneCat|fffd|gorie)
    MesObservations = .Range("E" & MaLigneCat|fffd|gorie)
    MesRecettes = .Range("B" & MaLigneCat|fffd|gorie).Value
    MesD|fffd|penses = .Range("C" & MaLigneCat|fffd|gorie).Value
    MonSolde = .Range("D" & MaLigneCat|fffd|gorie).Value
End With

With UF_Cat|fffd|gories
    .TB_Libell|fffd|.Text = MonLibell|fffd|
    .TB_Observations.Text = MesObservations
    
    .TB_Recettes.Text = Format$(MesRecettes, "Currency")
    .TB_D|fffd|penses.Text = Format$(MesD|fffd|penses, "Currency")
    .TB_Solde.Text = Format$(MonSolde, "Currency")
    
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .TB_Libell|fffd|.SetFocus
    .Titre.Caption = "Modifier une Cat|fffd|gorie"

End With
End Sub
Sub Lire_Rubriques()
Dim MonLibell|fffd|, MesObservations, MaCat|fffd|gorie As String
Dim MesD|fffd|penses, MesRecettes, MonSolde As Currency

With Worksheets("Rubriques")
    MonLibell|fffd| = .Range("A" & MaLigneRubrique)
    MonAncienLibell|fffd| = .Range("A" & MaLigneRubrique)
    MesObservations = .Range("F" & MaLigneRubrique)
    MaCat|fffd|gorie = .Range("B" & MaLigneRubrique)

End With

With UF_Rubriques
    .TB_Libell|fffd|.Text = MonLibell|fffd|
    .TB_Observations.Text = MesObservations
    
    .TB_Recettes.Text = Format$(MesRecettes, "Currency")
    .TB_D|fffd|penses.Text = Format$(MesD|fffd|penses, "Currency")
    .TB_Solde.Text = Format$(MonSolde, "Currency")
    
    .TB_Recettes.Text = Format$(MesRecettes, "Currency")
    .TB_D|fffd|penses.Text = Format$(MesD|fffd|penses, "Currency")
    .TB_Solde.Text = Format$(MonSolde, "Currency")
    
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
        
    .CB_Cat|fffd|gorie.RowSource = "Liste_Cat|fffd|gories"
    .CB_Cat|fffd|gorie.Text = MaCat|fffd|gorie

    .TB_Libell|fffd|.SetFocus
    .Titre.Caption = "Modifier une Rubrique"
End With
End Sub
Sub Lire_Regroupements()
Dim R|fffd|ponse As Integer
Dim MonLibell|fffd|, MesObservations  As String, MonSoldeInitial As Currency
Dim MesD|fffd|penses, MesRecettes, MonSolde As Currency

With Worksheets("Regroupements")
    MonLibell|fffd| = .Range("A" & MaLigneRegroupement)
    MonAncienLibell|fffd| = .Range("A" & MaLigneRegroupement)
    MesObservations = .Range("E" & MaLigneRegroupement)
    MesRecettes = .Range("B" & MaLigneRegroupement).Value
    MesD|fffd|penses = .Range("C" & MaLigneRegroupement).Value
    MonSolde = .Range("D" & MaLigneRegroupement).Value
End With

With UF_Regroupements
    .TB_Libell|fffd|.Text = MonLibell|fffd|
    .TB_Observations.Text = MesObservations
    
    .TB_Recettes.Text = Format$(MesRecettes, "Currency")
    .TB_D|fffd|penses.Text = Format$(MesD|fffd|penses, "Currency")
    .TB_Solde.Text = Format$(MonSolde, "Currency")
    
    .TB_Libell|fffd|.SelStart = 0
    .TB_Observations.SelStart = 0

    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    
    .TB_Libell|fffd|.SetFocus
    .Titre.Caption = "Modifier un Regroupement"

End With
End Sub
Sub Lire_Ecritures()
Dim R|fffd|ponse As Integer
Dim MonCompte, MonLibell|fffd|, MesObservations As String
Dim MaRubrique, MonRegroupement, MonMode, MonSens, MaR|fffd|f|fffd|rence, MonTiers As String
Dim MonMontant As Currency, MaDate, MaDateBanque As Date
    
With Worksheets("Ecritures")
    MonCompte = .Range("A" & MaLigneEcriture)
    MaDate = .Range("B" & MaLigneEcriture)
    MonLibell|fffd| = .Range("C" & MaLigneEcriture)
    MaRubrique = .Range("D" & MaLigneEcriture)
    MonRegroupement = .Range("E" & MaLigneEcriture)
    MonSens = .Range("F" & MaLigneEcriture)
    MonMode = .Range("G" & MaLigneEcriture)
    MaR|fffd|f|fffd|rence = .Range("H" & MaLigneEcriture)
    MonMontant = .Range("I" & MaLigneEcriture)
    MonTiers = .Range("J" & MaLigneEcriture)
    MaDateBanque = .Range("K" & MaLigneEcriture)
    MesObservations = .Range("L" & MaLigneEcriture)

End With

With UF_Ecritures
    .TB_Date.Text = MaDate
    .TB_Libell|fffd|.Text = MonLibell|fffd|
    .TB_R|fffd|f|fffd|rence.Text = MaR|fffd|f|fffd|rence
    .TB_Montant.Text = MonMontant
    .TB_Date_Banque.Text = MaDateBanque
    .TB_Observations.Text = MesObservations
    .TB_Tiers.Text = MonTiers
    
    .TB_Date.SelStart = 0
    .TB_Libell|fffd|.SelStart = 0
    .TB_R|fffd|f|fffd|rence.SelStart = 0
    .TB_Montant.SelStart = 0
    .TB_Date_Banque.SelStart = 0
    .TB_Observations.SelStart = 0
    .TB_Tiers.SelStart = 0

    .TB_Date.SelLength = Len(.TB_Date.Value)
    .TB_Date_Banque.SelLength = Len(.TB_Date_Banque.Value)
    .TB_Libell|fffd|.SelLength = Len(.TB_Libell|fffd|.Value)
    .TB_R|fffd|f|fffd|rence.SelLength = Len(.TB_R|fffd|f|fffd|rence.Value)
    .TB_Montant.SelLength = Len(.TB_Montant.Value)
    .TB_Observations.SelLength = Len(.TB_Observations.Value)
    .TB_Tiers.SelLength = Len(.TB_Tiers.Value)
    
    .TB_Date.SetFocus
    .Titre.Caption = "Modifier une Ecriture"

    .CB_Compte.Text = MonCompte
    .CB_Compte.RowSource = "Liste_Comptes"
    
    .CB_Rubrique.Text = MaRubrique
    .CB_Rubrique.RowSource = "Liste_Rubriques"
    
    .CB_Regroupement.Text = MonRegroupement
    .CB_Regroupement.RowSource = "Liste_Regroupements"

    .LB_Mode.RowSource = "Liste_Modes"
    .LB_Mode.Text = MonMode

    .OB_D|fffd|pense.Value = MonSens = "D|fffd|pense"
    .OB_Recette.Value = MonSens = "Recette"
End With
End Sub
Attribute VB_Name = "Routines"
Option Explicit
Public MonAncienLibell|fffd| As String, MaLigneCompte, MaLigneCat|fffd|gorie, MaLigneRubrique, MaLigneRegroupement, MaLigneEcriture As Integer
Sub D|fffd|prot|fffd|ger()
    ActiveSheet.Unprotect
End Sub
Sub Prot|fffd|ger()
'Exit Sub
On Error GoTo Prot|fffd|ger_Erreur
       
  ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
        , AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        
Prot|fffd|ger_exit:
Exit Sub
    
Prot|fffd|ger_Erreur:
MsgBox Error$
Resume Prot|fffd|ger_exit

End Sub
Sub Actualiser_TCD()
Dim T As Integer
On Error Resume Next
For T = 1 To 10
ActiveSheet.PivotTables("Tableau crois|fffd| dynamique" & T).PivotCache.Refresh
Next T
End Sub
Sub quitter()
Application.Quit
End Sub
Sub Oter_Filtre()
Dim MonFiltre As Boolean

MonFiltre = ActiveSheet.AutoFilterMode
If MonFiltre = True Then
    Call D|fffd|prot|fffd|ger
    ActiveSheet.Range("A3").AutoFilter
    Call Prot|fffd|ger
End If
End Sub

Sub Mettre_Filtre()
Dim MonFiltre As Boolean

MonFiltre = ActiveSheet.AutoFilterMode
If MonFiltre = False Then
    Call D|fffd|prot|fffd|ger
    ActiveSheet.Range("A3").AutoFilter
    Call Prot|fffd|ger
End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
Sheets("Accueil").Activate
Call Prot|fffd|ger
End Sub
Attribute VB_Name = "UF_Cat|fffd|gories"
Attribute VB_Base = "0{35F0EAB0-2DB6-4D43-832E-6858E229A955}{C8723ADE-1498-472B-8F7E-5C76B670BD6A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Bouton_Annuler_Cat|fffd|gorie_Click()
UF_Cat|fffd|gories.Hide
Call Mettre_Filtre
End Sub

Private Sub Bouton_Dernier_Click()
Call Ecrire_Cat|fffd|gories
MaLigneCat|fffd|gorie = Range("Cat|fffd|gories").End(xlDown).Row
Lecture_ligne:
Call Lire_Cat|fffd|gories
'If ActiveSheet.Range("A" & MaLigneCat|fffd|gorie).Height = 0 Then
'    MaLigneCat|fffd|gorie = MaLigneCat|fffd|gorie - 1
'    GoTo Lecture_ligne
'End If
End Sub

Private Sub Bouton_Pr|fffd|c|fffd|dent_Click()
Call Ecrire_Cat|fffd|gories
If MaLigneCat|fffd|gorie - 1 < Range("Cat|fffd|gories").Row + 1 Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en d|fffd|but de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If

Lecture_ligne:
MaLigneCat|fffd|gorie = MaLigneCat|fffd|gorie - 1
Call Lire_Cat|fffd|gories
'If ActiveSheet.Range("A" & MaLigneCat|fffd|gorie).Height = 0 Then
'    GoTo Lecture_ligne
'End If
End Sub

Private Sub Bouton_Premier_Click()
Call Ecrire_Cat|fffd|gories
MaLigneCat|fffd|gorie = Range("Cat|fffd|gories").Row + 1
Lecture_ligne:
Call Lire_Cat|fffd|gories
'If ActiveSheet.Range("A" & MaLigneCat|fffd|gorie).Height = 0 Then
'    MaLigneCat|fffd|gorie = MaLigneCat|fffd|gorie + 1
'    GoTo Lecture_ligne
'End If
End Sub

Private Sub Bouton_Suivant_Click()
Call Ecrire_Cat|fffd|gories
If MaLigneCat|fffd|gorie + 1 > Range("Cat|fffd|gories").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en fin de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If

Lecture_ligne:
MaLigneCat|fffd|gorie = MaLigneCat|fffd|gorie + 1
Call Lire_Cat|fffd|gories
'If ActiveSheet.Range("A" & MaLigneCat|fffd|gorie).Height = 0 Then
'    GoTo Lecture_ligne
'End If
End Sub
Private Sub Bouton_Valider_Click()
Call Ecrire_Cat|fffd|gories
UF_Cat|fffd|gories.Hide
Call Mettre_Filtre
End Sub

Private Sub TB_Libell|fffd|_AfterUpdate()
Dim Message As String, R|fffd|ponse As Integer

If Len(Me.TB_Libell|fffd|.Value) = 0 Then
    Message = "Veuillez entrer un libell|fffd| valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Libell|fffd|.SetFocus
    Exit Sub
End If

End Sub
Attribute VB_Name = "UF_Comptes"
Attribute VB_Base = "0{826DB60F-B816-4EE6-8029-4AA367456990}{341E6BDD-AD9A-4991-8A48-F015FC8493CA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Bouton_Annuler_Click()
Unload Me
End Sub

Private Sub Bouton_Dernier_Click()
Call Ecrire_comptes
MaLigneCompte = Range("Comptes").End(xlDown).Row
Call Lire_Comptes
End Sub

Private Sub Bouton_Pr|fffd|c|fffd|dent_Click()
Call Ecrire_comptes
If MaLigneCompte - 1 < Range("Comptes").Row + 1 Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en d|fffd|but de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneCompte = MaLigneCompte - 1
Call Lire_Comptes
End Sub

Private Sub Bouton_Premier_Click()
Call Ecrire_comptes
MaLigneCompte = Range("Comptes").Row + 1
Call Lire_Comptes
End Sub

Private Sub Bouton_Suivant_Click()
Call Ecrire_comptes
If MaLigneCompte + 1 > Range("Comptes").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en fin de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneCompte = MaLigneCompte + 1
Call Lire_Comptes
End Sub

Private Sub Bouton_Valider_Click()
Call Ecrire_comptes
UF_Comptes.Hide
Call Mettre_Filtre
End Sub

Private Sub TB_Libell|fffd|_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Len(Me.TB_Libell|fffd|.Value) = 0 Then
    Message = "Veuillez entrer un libell|fffd| valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Libell|fffd|.SetFocus
    Exit Sub
End If
End Sub

Private Sub TB_Solde_Initial_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Not IsNumeric(Me.TB_Solde_Initial.Value) Then
    Message = "Veuillez entrer un solde initial valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Solde_Initial.SetFocus
    Exit Sub
End If

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "UF_Ecritures"
Attribute VB_Base = "0{440A1983-26E9-4928-9BA7-0598BE26A824}{E6DDFBB0-81E7-4986-BF1F-97836664F174}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Bouton_Annuler_Click()
UF_Ecritures.Hide
Call Mettre_Filtre
End Sub

Private Sub Bouton_Dernier_Click()
Call Ecrire_Ecritures
MaLigneEcriture = Range("Ecritures").End(xlDown).Row
Call Lire_Ecritures
End Sub

Private Sub Bouton_Pr|fffd|c|fffd|dent_Click()
Call Ecrire_Ecritures
If MaLigneEcriture - 1 < Range("Ecritures").Row + 1 Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en d|fffd|but de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneEcriture = MaLigneEcriture - 1
Call Lire_Ecritures
End Sub

Private Sub Bouton_Premier_Click()
Call Ecrire_Ecritures
MaLigneEcriture = Range("Ecritures").Row + 1
Call Lire_Ecritures
End Sub

Private Sub Bouton_Suivant_Click()
Call Ecrire_Ecritures
If MaLigneEcriture + 1 > Range("Ecritures").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en fin de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneEcriture = MaLigneEcriture + 1
Call Lire_Ecritures
End Sub
Private Sub Bouton_Valider_Click()
Call Ecrire_Ecritures
UF_Ecritures.Hide
Call Mettre_Filtre
End Sub

Private Sub CB_Compte_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer
If Me.CB_Compte.ListIndex = 0 Then
    Message = "Veuillez entrer un Compte valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    'Undo
    Me.CB_Compte.SetFocus
    Exit Sub
End If
End Sub
Private Sub CB_Rubrique_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer
If Me.CB_Rubrique.ListIndex = 0 Then
    Message = "Veuillez entrer une Rubrique valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    'Undo
    Me.CB_Rubrique.SetFocus
    Exit Sub
End If
End Sub

Private Sub CB_Regroupement_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer
If Me.CB_Regroupement.ListIndex = 0 Or Len(Me.CB_Regroupement.Value) = 0 Then
    Message = "Veuillez entrer un Regroupement valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.CB_Regroupement.SetFocus
    Exit Sub
End If

End Sub

Private Sub TB_Date_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Not IsDate(Me.TB_Date.Value) Then
    Message = "Veuillez entrer une date valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Date.SetFocus
Else
    Me.TB_Date.Value = Format(Me.TB_Date.Value, "dd/mm/yyyy")
End If
End Sub

Private Sub TB_Date_Banque_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Not IsDate(Me.TB_Date_Banque.Value) And Len(Me.TB_Date_Banque.Value) > 0 Then
    Message = "Veuillez entrer une date valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Date_Banque.SetFocus
Else
    Me.TB_Date_Banque.Value = Format(Me.TB_Date_Banque.Value, "dd/mm/yyyy")
End If
End Sub

Private Sub TB_Montant_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Not IsNumeric(Me.TB_Montant.Value) Then
    Message = "Veuillez entrer un montant valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Montant.SetFocus
    Exit Sub
Else
    Me.TB_Montant.Value = Format(Me.TB_Montant.Value, "currency")
End If
    
End Sub

Private Sub TB_Libell|fffd|_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Len(Me.TB_Libell|fffd|.Value) = 0 Then
    Message = "Veuillez entrer un libell|fffd| valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Libell|fffd|.SetFocus
    Exit Sub
End If

End Sub
Private Sub TB_Tiers_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Len(Me.TB_Tiers.Value) = 0 Then
    Message = "Veuillez entrer un Tiers valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Tiers.SetFocus
    Exit Sub
End If

End Sub
Private Sub LB_Mode_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer
If Me.LB_Mode.ListIndex = 0 Then
    Message = "Veuillez entrer un Mode valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    'Undo
    Me.LB_Mode.SetFocus
    Exit Sub
End If
End Sub
Attribute VB_Name = "UF_Regroupements"
Attribute VB_Base = "0{2CA4A9CB-4F84-438F-BE6D-E1FD7680E664}{D051FE8C-51D0-4F8B-B2DF-214026529A36}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub Bouton_Annuler_Regroupement_Click()
UF_Regroupements.Hide
Call Mettre_Filtre
End Sub

Private Sub Bouton_Annuler_Rubrique_Click()
UF_Regroupements.Hide
Call Mettre_Filtre
End Sub

Private Sub Bouton_Dernier_Click()
Call Ecrire_Regroupements
MaLigneRegroupement = Range("Regroupements").End(xlDown).Row
Call Lire_Regroupements
End Sub

Private Sub Bouton_Pr|fffd|c|fffd|dent_Click()
Call Ecrire_Regroupements
If MaLigneRegroupement - 1 < Range("Regroupements").Row + 1 Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en d|fffd|but de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneRegroupement = MaLigneRegroupement - 1
Call Lire_Regroupements
End Sub

Private Sub Bouton_Premier_Click()
Call Ecrire_Regroupements
MaLigneRegroupement = Range("Regroupements").Row + 1
Call Lire_Regroupements
End Sub

Private Sub Bouton_Suivant_Click()
Call Ecrire_Regroupements
If MaLigneRegroupement + 1 > Range("Regroupements").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en fin de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneRegroupement = MaLigneRegroupement + 1
Call Lire_Regroupements
End Sub
Private Sub Bouton_Valider_Click()
Call Ecrire_Regroupements
UF_Regroupements.Hide
Call Mettre_Filtre
End Sub

Private Sub TB_Libell|fffd|_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Len(Me.TB_Libell|fffd|.Value) = 0 Then
    Message = "Veuillez entrer un libell|fffd| valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Libell|fffd|.SetFocus
    Exit Sub
End If

End Sub


Attribute VB_Name = "UF_Rubriques"
Attribute VB_Base = "0{3E92BFF2-CDC5-40C4-8E0A-95C6EFCC6ED5}{73C58598-F972-4FEC-A3DA-6BA87268C111}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Bouton_Annuler_Rubrique_Click()
UF_Rubriques.Hide
Call Mettre_Filtre
End Sub

Private Sub Bouton_Dernier_Click()
Call Ecrire_Rubriques
MaLigneRubrique = Range("Rubriques").End(xlDown).Row
Call Lire_Rubriques
End Sub

Private Sub Bouton_Pr|fffd|c|fffd|dent_Click()
Call Ecrire_Rubriques
If MaLigneRubrique - 1 < Range("Rubriques").Row + 1 Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en d|fffd|but de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneRubrique = MaLigneRubrique - 1
Call Lire_Rubriques
End Sub

Private Sub Bouton_Premier_Click()
Call Ecrire_Rubriques
MaLigneRubrique = Range("Rubriques").Row + 1
Call Lire_Rubriques
End Sub

Private Sub Bouton_Suivant_Click()
Call Ecrire_Rubriques
If MaLigneRubrique + 1 > Range("Rubriques").End(xlDown).Row Then
    R|fffd|ponse = MsgBox("Vous |fffd|tes en fin de liste", vbOKOnly, "Modification de ligne")
    If R|fffd|ponse Then Exit Sub
End If
MaLigneRubrique = MaLigneRubrique + 1
Call Lire_Rubriques
End Sub
Private Sub Bouton_Valider_Click()
Call Ecrire_Rubriques
UF_Rubriques.Hide
Call Mettre_Filtre
End Sub

Private Sub CB_Cat|fffd|gorie_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Me.CB_Cat|fffd|gorie.ListIndex = 0 Then
    Message = "Veuillez entrer une Cat|fffd|gorie valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.CB_Cat|fffd|gorie.SetFocus
    Exit Sub
End If

End Sub

Private Sub TB_Libell|fffd|_AfterUpdate()
Dim Message As String
Dim R|fffd|ponse As Integer

If Len(Me.TB_Libell|fffd|.Value) = 0 Then
    Message = "Veuillez entrer un libell|fffd| valide !"
    R|fffd|ponse = MsgBox(Message, vbOKOnly, "Controle de saisie")
    Me.TB_Libell|fffd|.SetFocus
    Exit Sub
End If
End Sub


INQUEST-PP=macro
