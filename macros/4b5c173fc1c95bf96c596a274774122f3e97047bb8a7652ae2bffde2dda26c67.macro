Attribute VB_Name = "HSE_HAVCalcFunctions"
' HAV Exposure Calculator version 5.5
' June 2015
' ================================================================================

' Modified by PPitts for poosible use by IFA, with different data set
' ================================================================================

' The range names assigned to the following constants
' correspond to the ranges defined in the spreadsheet

Private Const RangeNameVibMagnitude = "HSE_VibrationMagnitudes"
Private Const RangeNameExpDuration = "HSE_ExposureDurations"
Private Const RangeNameLockSelection = "HSE_NameLock"
Private Const RangeNameLockCompanyCalcBy = "HSE_CompanyLock"
Private Const RangeNameTandPnames = "HSE_TandPnames"
Private Const RangeNameCalculator = "HSE_CalcRange"
Private Const RangeNameEmployeeInfo = "HSE_EmployeeID"
Private Const RangeNameCompanyName = "HSE_CompanyName"
Private Const RangeNameCalcByInfo = "HSE_CalcBy"
Private Const RangeNameHelp = "HSE_HelpRange"
Private Const RangeNameCalcDate = "HSE_CalcDate"

Private Const SheetPassword = "L140HAVcalcPA55:)"
'

Private Sub HSEButton_Reset()
Attribute HSEButton_Reset.VB_Description = "Macro recorded 15/04/2003 by Chris Nelson"
Attribute HSEButton_Reset.VB_ProcData.VB_Invoke_Func = " \n14"
'
' HSEButton_Reset
' Clears the input regions of the HAV spreadsheet
'

    On Error GoTo HSEButtonResetErrorHandler
    
    Application.ScreenUpdating = False
    
    Range(RangeNameEmployeeInfo).ClearContents
    Range(RangeNameExpDuration).ClearContents
    
    If Not Range(RangeNameLockSelection) Then
        ' Only clear this area if the option to lock tool or process name is not locked
        Range(RangeNameTandPnames).ClearContents
        Range(RangeNameTandPnames).ClearComments
        Range(RangeNameVibMagnitude).ClearContents
    End If
    
    If Not Range(RangeNameLockCompanyCalcBy) Then
        ' Only clear this area if the option to lock company and calc. by name names is not locked
        Range(RangeNameCompanyName).ClearContents
        Range(RangeNameCalcByInfo).ClearContents
    End If
       
    ' clear calculation date
    Range(RangeNameCalcDate).Value = ""
    
    ' return to first input cell
    Range(RangeNameVibMagnitude).Cells(1, 1).Select
    
    Application.ScreenUpdating = True
    
    Exit Sub    'avoid error handler
        
HSEButtonResetErrorHandler:
    
    MsgBox "Error HSEButton_Reset - can't find ranges for clearing"
    
End Sub

Private Sub HSEButton_print()

    Range("HSE_CalcRange").PrintPreview

End Sub


Private Sub ZoomToFitCalc()
'
' ZoomToFit Macro
'

'
    Range(RangeNameCalculator).Select
    ActiveWindow.Zoom = True
    Range("A1").Select

End Sub

Private Sub ZoomToFitHelp()
'
' ZoomToFit Macro
'

'
    Range(RangeNameHelp).Select
    ActiveWindow.Zoom = True
    Range("A1").Select
    
End Sub

Private Sub GotoHelp()
    
    Worksheets("Help").Select
    
End Sub

Private Sub GotoCalc()

    Worksheets("HAV Calculator").Select
    
End Sub

Private Sub ProtectSheets()
' Run this function prior to saving/issuing calculator

    Sheets("HELP").Select
    ActiveWindow.DisplayHeadings = False
    ActiveSheet.Protect SheetPassword

    Sheets("HSELookupTable").Select
    ActiveWindow.DisplayHeadings = False
    ActiveSheet.Protect SheetPassword
    ActiveSheet.Visible = xlSheetVeryHidden
  
    Sheets("HAV calculator").Select
    ActiveWindow.DisplayHeadings = False
    ActiveSheet.Protect SheetPassword
    
End Sub

Private Sub UnProtectSheets()
' used during development and debugging to give access to all calculator sheets
    
    Sheets("HELP").Select
    ActiveSheet.Unprotect SheetPassword
    ActiveWindow.DisplayHeadings = True
    
    Sheets("HSELookupTable").Visible = True
    Sheets("HSELookupTable").Select
    ActiveSheet.Unprotect SheetPassword
    ActiveWindow.DisplayHeadings = True
    
    Sheets("HAV calculator").Select
    ActiveSheet.Unprotect SheetPassword
    ActiveWindow.DisplayHeadings = True
    
End Sub

Public Sub setHSEvalues(LookUpCell As Range, LookupIndex As Integer)
' Wites vibration magnitude from lookup table into calculator
    
    Dim ProtectionStatus As Boolean
    
    ProtectionStatus = ActiveSheet.ProtectContents
    
    If ProtectionStatus Then ' useful for editing / debugging
                             ' (only turns protection on/off if it starts in protected mode)
        ActiveSheet.Unprotect SheetPassword
    End If
    
    Range("HSE_VibrationMagnitudes")(LookupIndex) = ""
        ' clear comment box and remove inverse blue "i" from info cell
        Range("HSEInfoBoxes")(LookupIndex).ClearComments
        ClearInfoBoxCell (Range("HSEInfoBoxes")(LookupIndex))
        
        ' select associated vibration magnitude cell
        ' (need to navigate away from drop-down list in name cell)
        Range("HSE_VibrationMagnitudes")(LookupIndex).Select
        
        ' if the name is Tool or process name is currently not blank (i.e something has been selected) AND
        ' there is a match in the lookup table
        If Not Range("HSE_TandPnames")(LookupIndex) = "" And Not IsError(LookUpCell.Value) Then
            
            ' put the vibration value in the magnitude cell
            Range("HSE_VibrationMagnitudes")(LookupIndex) = LookUpCell.Value
            
            ' create the new comment box (note: chr(10) = linefeed)
            With Range("HSEInfoBoxes")(LookupIndex)
                .AddComment
                .Comment.Text Text:=Range("HSE_TandPnames")(LookupIndex) & Chr(10) & _
                    "Industry: " & Range("HSELookupIndustry")(LookupIndex) & Chr(10) & _
                    "HSE recommended initial value: " & Range("HSELookUpValues")(LookupIndex) & " m/s|fffd|  " & _
                    "(Range: " & Range("HSELookupLowerUpper")(LookupIndex) & " m/s|fffd|)" & Chr(10) & _
                    Range("HSELookupNotes")(LookupIndex).Value
                .Comment.Visible = True
                .Comment.Shape.Select True
                Selection.ShapeRange.ScaleWidth 1.8, msoFalse, msoScaleFromTopLeft
                Selection.ShapeRange.ScaleHeight 1.2, msoFalse, msoScaleFromTopLeft
                .Comment.Visible = False
                SetInfoBoxCell (Range("HSEInfoBoxes")(LookupIndex))
            End With ' comment boxes
        
            'return to name cell
            Range("HSE_TandPnames")(LookupIndex).Select
            
        End If ' not "" and not error
    
    ' protect sheet
    If ProtectionStatus Then ' useful for editing / debugging
                             ' (only turns protection on/off if it starts in protected mode)
        ActiveSheet.Protect SheetPassword
    End If
    
End Sub
Private Sub ClearInfoBoxCell(Infocell As Range)
' Clear comment and inverse blue "i" from info cell

' NOTE - This blue info box cell is actually a work around of an Excel feature
' such that when a sheet is protected, and you have to use a drop down list
' the comment box does not work on the selected cell (so you have to de-select the cell to show it.
' the creating a second 'info box cell' is a work around.

    Infocell.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.249977111117893
        .PatternTintAndShade = 0
    End With
    Selection.ClearContents
    
End Sub
    
Private Sub SetInfoBoxCell(Infocell As Range)
' create inverse blue "i" cell in the identified info cell
    
    Infocell.Select
    ActiveCell.Value = "i"
    
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 12611584
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

Dim LookUpCell As Range
Dim LookupIndex As Integer

    LookupIndex = 1
        
    If Not Intersect(Target, Me.Range("HSE_TandPnames")) Is Nothing Then
        ' Only do this if the changed cell is in the task and process names range has changed
        
        For Each LookUpCell In Me.Range("HSELookupValues")
            ' scan though the look up range - which finds the selected machine and
            ' provides an index number (using the MATCH function) for the machine
            
            If Not Intersect(Target, Me.Range("HSE_TandPnames")(LookupIndex)) Is Nothing Then
                ' If there is a match, the use the function setHSE values to write this into the
                ' vibration magnitude cell
            
                setHSEvalues LookUpCell, LookupIndex
                
            End If 'intersect with each individual entry row
            
            LookupIndex = LookupIndex + 1
            
        Next ' lookUpCell
        
    End If ' intersect with tool or process name range
        
    If Not (Intersect(Target, Me.Range("HSE_TandPnames")) Is Nothing And _
            Intersect(Target, Me.Range("HSE_VibrationMagnitudes")) Is Nothing And _
            Intersect(Target, Me.Range("HSE_CompanyName")) Is Nothing And _
            Intersect(Target, Me.Range("HSE_EmployeeID")) Is Nothing And _
            Intersect(Target, Me.Range("HSE_CalcBy")) Is Nothing And _
            Intersect(Target, Me.Range("HSE_ExposureDurations")) Is Nothing) Then
        ' If anything important changes in whole sheet, then update the displayed calculation date
        
        Me.Range("HSE_CalcDate").Value = Now()
    
    End If

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' jwez

INQUEST-PP=macro
