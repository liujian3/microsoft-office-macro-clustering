Attribute VB_Name = "DPB"
Attribute VB_Base = "0{27E18C36-90C6-404B-8D7B-0DC89E0C16B2}{E2F5F2A4-0D54-4AFF-A13F-28C84C074B46}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Attribute VB_Name = "Module1"
Dim CycleCount As Integer
Dim HasRun As Boolean
Dim StartUpCycle As Boolean
Dim WS As Worksheet

Public Sub ProtectAll()

'If Application.UserName = "Julian" Then Exit Sub

For Each WS In ThisWorkbook.Worksheets
    If WS.Visible = True Then WS.Protect "9853", , True, , True, , , , , , , , , True, True
Next WS

End Sub

Public Sub UnAll()

ThisWorkbook.Unprotect "9853"

For Each WS In ThisWorkbook.Worksheets
    On Error Resume Next
    WS.Unprotect "9853"
    WS.Visible = xlSheetVisible
    On Error GoTo 0
Next

Sheet2.Range("CabinetSource").Rows.Hidden = False
Application.CellDragAndDrop = True

End Sub

Public Sub StartUp()

Dim Wnd As Window

Before

On Error Resume Next
For Each Wnd In Application.Windows
    Wnd.WindowState = xlMaximized
Next Wnd
StartUpCycle = True
AutoFitWindow
StartUpCycle = False
ThisWorkbook.Unprotect "9853"
Sheet3.Visible = xlSheetHidden
Sheet4.Visible = xlSheetHidden
Sheet8.Visible = xlSheetHidden
Sheet9.Visible = xlSheetHidden
Sheet1.Activate
On Error GoTo 0

ThisWorkbook.Protect "9853", True, True

After

End Sub

Public Sub AutoFitWindow()

Dim Z As Integer
Dim WS As Worksheet
Dim Wnd As Window
Dim PrevSheet As Worksheet

Set PrevSheet = ActiveSheet

Before
ThisWorkbook.Activate
With Application.Windows(1)
    If .WindowState = xlMaximized Then
        .Activate
        Sheet1.Unprotect "9853"
        Sheet1.Activate
        Sheet1.Range("ZoomWidth").Select
        .Zoom = True
        Z = .Zoom
    End If
End With
If Z <> 0 Then
    For Each Wnd In Application.Windows
        Wnd.Activate
        If ActiveWorkbook.Name = ThisWorkbook.Name Then
            For Each WS In ThisWorkbook.Worksheets
                If WS.Visible = xlSheetVisible Then
                    WS.Activate
                    Wnd.DisplayGridlines = False
                    If StartUpCycle = True Then
                        If WS.Name = Sheet2.Name Then Application.GoTo WS.Cells(5, 1), True
                        Application.GoTo WS.Cells(1, 1), True
                    End If
                    Select Case WS.Name
                        Case Is = Sheet3.Name, Sheet4.Name, Sheet8.Name, Sheet9.Name
                            Wnd.Zoom = 110
                        Case Else
                            Wnd.Zoom = Z
                    End Select
                End If
            Next WS
        End If
        If StartUpCycle = True Then Sheet1.Activate Else PrevSheet.Activate
    Next Wnd
End If
After

End Sub

Public Sub Before()
    
If CycleCount <= 0 Then
    With Application
        .ScreenUpdating = False
        .EnableEvents = False
        .DisplayAlerts = False
    End With
    HasRun = False
    ProtectAll
End If

CycleCount = CycleCount + 1
HasRun = False

End Sub

Public Sub After()

CycleCount = CycleCount - 1

If CycleCount <= 0 Then
    CycleCount = 0
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
        .Calculation = xlCalculationAutomatic
    End With
    HasRun = False
    ProtectAll
End If

End Sub

Public Sub AllOff()

With Application
    .ScreenUpdating = False
    .EnableEvents = False
    .DisplayAlerts = False
End With

End Sub

Public Sub DefaultError()

If HasRun = False Then
    MsgBox "An error has occured. Please try again. If the problem persists, please contact your administrator.", vbInformation, "Error"
    HasRun = True
End If
CycleCount = 0
After

End Sub

Public Sub CheckPaste()

On Error GoTo Err

Dim UndoList As String

On Error Resume Next
UndoList = Application.CommandBars("Standard").Controls("&Undo").List(1)
On Error GoTo Err
If Left(UndoList, 5) = "Paste" Or UndoList = "Auto Fill" Then
    Before
    MsgBox "Please don't paste or autofill values." & vbCr & "The action will be reversed.", vbInformation, "Paste Disabled"
    With Application
        .Undo
        .CutCopyMode = False
    End With
    After
    End
End If

Exit Sub
Err:
DefaultError
After
End Sub

Public Sub SaveMe()

On Error GoTo Err

Dim SaveWindow As FileDialog
Dim SaveLocation, DesktopLocation, FileName As String
Dim PrevSheet As Worksheet

With Sheet1
    Select Case ""
        Case Is = .Range("PONum").Value
            MsgBox "PO number needed.", vbInformation, ""
            .Activate
            .Cells(1, 1).Select
            .Range("PONum").Select
        Case Is = .Range("Name").Value
            MsgBox "Job name needed.", vbInformation, ""
            .Activate
            .Cells(1, 1).Select
            .Range("Name").Select
        Case Is = .Range("Section").Value
            MsgBox "Job section needed.", vbInformation, ""
            .Activate
            .Cells(1, 1).Select
            .Range("Section").Select
        Case Else
            ExportData
            
            MsgBox "Please select a save location.", vbInformation, ""
            On Error Resume Next
            DesktopLocation = Environ("USERPROFILE")
            On Error GoTo Err
            Set SaveWindow = Application.FileDialog(msoFileDialogFolderPicker)
            With SaveWindow
                .Title = "Select a Save Location"
                .AllowMultiSelect = False
                If DesktopLocation <> "" Then .InitialFileName = DesktopLocation
                If Not .Show <> -1 Then SaveLocation = .SelectedItems(1)
            End With
            Set SaveWindow = Nothing
            If SaveLocation <> "" Then
                Application.EnableEvents = False
                With Sheet1
                    FileName = .Range("PONum").Value & " " & .Range("Name").Value & " (" & .Range("Section").Value & ") Order Form"
                End With
                Do While InStr(1, FileName, "<") <> 0
                    FileName = Replace(FileName, "<", " ")
                Loop
                Do While InStr(1, FileName, ">") <> 0
                    FileName = Replace(FileName, ">", " ")
                Loop
                Do While InStr(1, FileName, "[") <> 0
                    FileName = Replace(FileName, "[", " ")
                Loop
                Do While InStr(1, FileName, "]") <> 0
                    FileName = Replace(FileName, "]", " ")
                Loop
                Do While InStr(1, FileName, ":") <> 0
                    FileName = Replace(FileName, ":", " ")
                Loop
                Do While InStr(1, FileName, "|") <> 0
                    FileName = Replace(FileName, "|", " ")
                Loop
                Do While InStr(1, FileName, "*") <> 0
                    FileName = Replace(FileName, "*", " ")
                Loop
                Do While InStr(1, FileName, "?") <> 0
                    FileName = Replace(FileName, "?", " ")
                Loop
                Do While InStr(1, FileName, "  ") <> 0
                    FileName = Replace(FileName, "  ", " ")
                Loop
                Do While Left(FileName, 1) = " "
                    FileName = Right(FileName, Len(FileName) - 1)
                Loop
                Before
                ThisWorkbook.SaveAs SaveLocation & "\" & FileName & ".xlsb", 50
                After
                ExportPDF
                ThisWorkbook.Saved = True
            End If
    End Select
End With

Exit Sub
Err:
DefaultError
After
End Sub

Public Sub ExportPDF()

Dim PrevSheet As Worksheet

If MsgBox("Save PDF?", vbYesNo, "") = 6 Then
    Before
    With Sheet1.PageSetup
        .CenterHorizontally = True
        .CenterVertically = True
        .Zoom = False
        .PaperSize = xlPaperLetter
        .FitToPagesTall = 1
        .FitToPagesWide = 1
    End With
    With Sheet5.PageSetup
        .CenterHorizontally = True
        .CenterVertically = False
        .Zoom = False
        .PaperSize = xlPaperLetter
        .FitToPagesTall = False
        .FitToPagesWide = 1
    End With
    Set PrevSheet = ActiveSheet
    Sheets(Array(Sheet1.Name, Sheet5.Name)).Select
    On Error GoTo PDFErr
    ActiveSheet.ExportAsFixedFormat xlTypePDF, ThisWorkbook.Path & "\" & Left(ThisWorkbook.Name, InStrRev(ThisWorkbook.Name, ".") - 1), xlQualityStandard, False, False, , , True
    On Error GoTo Err
    PrevSheet.Select
    After
End If

Exit Sub
PDFErr:
MsgBox "PDF save failed. This may be because a PDF with the same name is opened. Please close that file and try again.", vbInformation, ""
Resume Next
Err:
DefaultError
After
End Sub

Public Sub FinalSave()

Before
With Sheet2
    .ClearCabinets
    .Range("CabinetSource").Rows.Hidden = True
End With
Sheet6.ClearExtras

ExportData
StartUp
ThisWorkbook.Save
After

End Sub
Attribute VB_Name = "Module2"
Option Explicit

Dim N, NN, NNN As Variant

Public Sub ExportData()

On Error GoTo Err

Dim CCabNum, I, II, R, C, HAdj1, HAdj2, DAdj1, DAdj2, CAdj, AAdj, AR, TotalCombined, CurrentCombined, Spacer, ThisStartRow, PageNumber, ExtrasCount, ExtrasTotal, ExtrasStartRow As Integer
Dim NumRng, HeaderRng, DataRng, CmtSource, CmtRng, CombineSource, AISource, ExtrasSource As Range
Dim AlreadyEntered, CheckCombined, MatchFound, IsCombined, HasAddItems, HasMore As Boolean
Dim CabArr() As Variant
Dim CombinedCharge As Double
Dim CombineStr As String

CCabNum = 1
R = 4
C = 2
PageNumber = 1

Before
Application.Calculation = xlCalculationManual
Sheet5.Rows(R & ":" & Sheet5.UsedRange.Rows.Count + R).Delete xlShiftUp

Set NumRng = Nothing

For Each N In Intersect(Sheet2.Columns(Sheet2.Range("CabNum").Column), Sheet2.Rows(Sheet2.Range("CabNum").Row & ":" & Sheet2.UsedRange.Rows.Count))
    If N.Offset(-1).Value = Sheet2.Range("CabNum").Value And N.Value <> "" Then
        If NumRng Is Nothing Then
            Set NumRng = N
        Else
            Set NumRng = Union(NumRng, N)
        End If
    End If
Next N

If Not NumRng Is Nothing Then
    ReDim CabArr(1 To NumRng.Count) As Variant
    CCabNum = Sheet2.Range("StartNumber").Value
    I = 1
    II = 1
    Do While CCabNum <= NumRng.Cells.Count + Sheet2.Range("StartNumber").Value - 1
        For Each N In NumRng.Cells
            If N.Value = CCabNum Then
                For I = LBound(CabArr) To UBound(CabArr)
                    If CabArr(I) = CCabNum Then
                        AlreadyEntered = True
                        Exit For
                    End If
                Next I
                If AlreadyEntered = False Then
                    CabArr(II) = CCabNum
                    II = II + 1
                    For Each NN In Sheet2.Range("CombinedRng").Columns
                        If WorksheetFunction.CountBlank(NN) < NN.Cells.Count Then
                            For Each NNN In NN.Cells
                                If NNN.Value = CCabNum Then CheckCombined = True
                            Next NNN
                            If CheckCombined = True Then
                                For Each NNN In NN.Cells
                                    If NNN.Value <> "" And NNN.Value <> CCabNum Then
                                        CabArr(II) = NNN.Value
                                        II = II + 1
                                    End If
                                Next NNN
                            End If
                            CheckCombined = False
                        End If
                    Next NN
                End If
                AlreadyEntered = False
                CCabNum = CCabNum + 1
                Exit For
            End If
            I = 1
        Next N
    Loop
    
    I = 1
    Do
        For Each N In NumRng.Cells
            If N.Value = CabArr(I) Then
                ThisStartRow = R
                HAdj1 = -1
                HAdj2 = 1
                DAdj1 = 0
                DAdj2 = 3
                CAdj = 2
                AAdj = 5
                Spacer = 3
                With Sheet5
                    .Unprotect "9853"
                    Set HeaderRng = .Range(.Cells(R, C), .Cells(R, C + 14))
                    With HeaderRng
                        .Interior.Color = RGB(175, 175, 175)
                        With .Font
                            .Size = 7
                            .Bold = True
                        End With
                        .BorderAround xlContinuous, xlThin
                    End With
                    HeaderRng.Value = Array("#", "SKU", "DESCRIPTION", "WIDTH", "HEIGHT", "DEPTH", "HINGE", "L STILE", "R STILE", "L END", "R END", "BASE PRICE", "MODS", "EXTRAS", "TOTAL")
                    R = R + 1
                    Set DataRng = .Range(.Cells(R, C), .Cells(R, C + 14))
                    With DataRng
                        .Interior.Color = RGB(215, 215, 215)
                        .Font.Size = 7
                        .Borders.Weight = xlThin
                    End With
                    .Cells(R, C).Font.Bold = True
                    .Range(.Cells(R, C + 1), .Cells(R, C + 2)).NumberFormat = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("CabSKU").Column).NumberFormat
                    .Range(.Cells(R, C + 3), .Cells(R, C + 5)).NumberFormat = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("Width").Column).NumberFormat
                    .Range(.Cells(R, C + 6), .Cells(R, C + 10)).NumberFormat = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("HingeRng").Column).NumberFormat
                    With .Range(.Cells(R, C + 11), .Cells(R, C + 14))
                        .NumberFormat = Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("BasePrice").Column).NumberFormat
                        .HorizontalAlignment = Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("BasePrice").Column).HorizontalAlignment
                    End With
                    .Cells(R, C + 14).Font.Bold = True
                    
                    .Cells(R, C).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("CabNum").Column).Value 'Number
                    .Cells(R, C + 1).Value = UCase(Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("CabSKU").Column).Value) 'SKU
                    .Cells(R, C + 2).Value = Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("Description").Column).Value 'Description
                    .Cells(R, C + 3).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("Width").Column).Value 'Width
                    .Cells(R, C + 4).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("Height").Column).Value 'Height
                    .Cells(R, C + 5).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("Depth").Column).Value 'Depth
                    .Cells(R, C + 6).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("HingeRng").Column).Value 'Hinge
                    .Cells(R, C + 7).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("LStile").Column).Value 'Left Stile
                    .Cells(R, C + 8).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("RStile").Column).Value 'Right Stile
                    .Cells(R, C + 9).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("LEnd").Column).Value 'Left End
                    .Cells(R, C + 10).Value = Sheet2.Cells(N.Row + DAdj1, Sheet2.Range("REnd").Column).Value 'Right End
                    .Cells(R, C + 11).Value = Format(Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("BasePrice").Column).Value, "0.00") 'Base Price
                    .Cells(R, C + 12).Value = Format(Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("DimCharge").Column).Value + Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("EndCharge").Column).Value + Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("StileCharge").Column).Value, "0.00") 'Mods
                    .Cells(R, C + 13).Value = Format(Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("ExtrasCharge").Column).Value, "0.00") 'Extras
                    .Cells(R, C + 14).Value = Format(Sheet2.Cells(N.Row + DAdj2, Sheet2.Range("CabinetTotal").Column).Value, "0.00") 'Total
                    
                    Set CmtSource = Sheet2.Cells(N.Row + CAdj, Sheet2.Range("CommentsRng").Column)
                    TotalCombined = 0
                    For Each NN In Sheet2.Range("CombinedRng").Cells
                        If N.Value = NN.Value Then
                            IsCombined = True
                            CurrentCombined = CurrentCombined + 1
                            CombinedCharge = Sheet2.Cells(Sheet2.Range("CombinedTotalRng").Row, NN.Column).Value
                            For Each NNN In Intersect(Sheet2.Columns(NN.Column), Sheet2.Range("CombinedRng"))
                                If NNN.Value <> "" Then
                                    If CombineStr = "" Then CombineStr = NNN.Value Else CombineStr = CombineStr & ", " & NNN.Value
                                    TotalCombined = TotalCombined + 1
                                End If
                            Next NNN
                        End If
                    Next NN
                    If Sheet2.Cells(N.Row + AAdj - 1, Sheet2.Range("CabCat").Column).Value <> "" Then
                        Set AISource = Sheet2.Cells(N.Row + AAdj, Sheet2.Range("CabCat").Column)
                        If AISource.Offset(, Sheet2.Range("REnd").Column - AISource.Column).Value <> "" Then HasAddItems = True
                    End If
                    
                    If CmtSource.Value <> "" Or IsCombined = True Or HasAddItems = True Then
                        R = R + 1
                        If CmtSource.Value <> "" Then 'Comments
                            With .Range(.Cells(R, C + 7), .Cells(R, C + 11))
                                .Merge
                                .Interior.Color = RGB(175, 175, 175)
                                .Font.Bold = True
                                .Borders.Weight = xlThin
                                .Value = "COMMENTS"
                            End With
                            If Len(CmtSource.Value) > 70 Or InStr(1, CmtSource.Value, vbLf, vbBinaryCompare) Then
                                Set CmtRng = .Range(.Cells(R + 1, C + 7), .Cells(R + 2, C + 11))
                                CmtRng.WrapText = True
                            Else
                                Set CmtRng = .Range(.Cells(R + 1, C + 7), .Cells(R + 1, C + 11))
                            End If
                            With CmtRng
                                .Merge
                                .Interior.Color = RGB(215, 215, 215)
                                .HorizontalAlignment = xlLeft
                                .Borders.Weight = xlThin
                                .Value = CmtSource.Value
                            End With
                        End If
                        If IsCombined = True Then 'Combined
                            With .Range(.Cells(R, C + 13), .Cells(R, C + 14))
                                .Merge
                                .Interior.Color = RGB(175, 175, 175)
                                .Font.Bold = True
                                .Borders.Weight = xlThin
                                .Value = "COMBINED"
                            End With
                            With .Range(.Cells(R + 1, C + 13), .Cells(R + 1, C + 14))
                                .Merge
                                .Interior.Color = RGB(215, 215, 215)
                                .Borders.Weight = xlThin
                                .Value = CombineStr
                            End With
                            If CurrentCombined = 1 Then
                                .Cells(R - 1, C + 12).Value = Format(.Cells(R - 1, C + 12).Value + CombinedCharge, "0.00")
                                .Cells(R - 1, C + 14).Value = Format(.Cells(R - 1, C + 14).Value + CombinedCharge, "0.00")
                            End If
                            If CurrentCombined < TotalCombined Then Spacer = 1 Else CurrentCombined = 0
                        Else
                            CurrentCombined = 0
                        End If
                        If HasAddItems = True Then 'Additional Items
                            HasMore = True
                            With .Range(.Cells(R, C + 1), .Cells(R, C + 5))
                                .Interior.Color = RGB(175, 175, 175)
                                .Font.Bold = True
                                .BorderAround xlContinuous, xlThin
                                .Value = Array("SKU (EXTRA)", "DESCRIPTION", "QTY", "PRICE", "TOTAL")
                            End With
                            R = R + 1
                            Do While HasMore = True
                                If AISource.Value <> "" Then
                                    With .Range(.Cells(R, C + 1), .Cells(R, C + 5))
                                        .Borders.Weight = xlThin
                                        .Interior.Color = RGB(215, 215, 215)
                                        .Cells(1, 1).Value = UCase(AISource.Offset(, 2).Value)
                                        .Cells(1, 2).Value = AISource.Offset(, 4).Value
                                        With .Cells(1, 3)
                                            .NumberFormat = AISource.Offset(, 3).NumberFormat
                                            .HorizontalAlignment = AISource.Offset(, 3).HorizontalAlignment
                                            .Value = Format(AISource.Offset(, 3).Value, "0.00")
                                        End With
                                        With .Cells(1, 4)
                                            .NumberFormat = AISource.Offset(, 8).NumberFormat
                                            .HorizontalAlignment = AISource.Offset(, 8).HorizontalAlignment
                                            .Value = Format(AISource.Offset(, 8).Value, "0.00")
                                        End With
                                        With .Cells(1, 5)
                                            .NumberFormat = AISource.Offset(, 9).NumberFormat
                                            .HorizontalAlignment = AISource.Offset(, 9).HorizontalAlignment
                                            .Value = Format(AISource.Offset(, 9).Value, "0.00")
                                        End With
                                    End With
                                    R = R + 1
                                End If
                                If AISource.Offset(1, Sheet2.Range("REnd").Column - AISource.Column).Value <> "" Then
                                    Set AISource = AISource.Offset(1)
                                    HasMore = True
                                Else
                                    HasMore = False
                                End If
                            Loop
                        End If
                    End If
                    If .UsedRange.Rows.Count - 3 > 42 * PageNumber Then
                        .HPageBreaks.Add .Rows(ThisStartRow)
                        PageNumber = PageNumber + 1
                    End If
                    Set CmtSource = Nothing
                    IsCombined = False
                    CombineStr = ""
                    HasAddItems = False
                End With
                Exit For
            End If
        Next N
        If I = UBound(CabArr) Then
            Exit Do
        Else
            R = Sheet5.UsedRange.Rows.Count + Spacer
            I = I + 1
        End If
    Loop
End If

Set ExtrasSource = Intersect(Sheet6.Columns(Sheet6.Range("CatHeader").Column), Sheet6.Rows(Sheet6.Range("CatHeader").Row + 1 & ":" & Sheet6.UsedRange.Rows.Count))
ExtrasTotal = WorksheetFunction.CountA(ExtrasSource)
ExtrasCount = 1
R = Sheet5.UsedRange.Rows.Count

If ExtrasTotal > 0 Then
    If R > 4 Then
        R = R + 1
        Sheet5.HPageBreaks.Add Sheet5.Rows(R)
        ExtrasStartRow = R
    Else
        R = 4
    End If
    With Sheet5
        With .Range(.Cells(R, C), .Cells(R, C + 8))
            .Interior.Color = RGB(175, 175, 175)
            .Font.Bold = True
            .BorderAround xlContinuous, xlThin
            .Value = Array("#", "SKU (EXTRA)", "DESCRIPTION", "QTY", "PRICE", "TOTAL", "COMMENTS")
        End With
        .Range(.Cells(R, C + 6), .Cells(R, C + 8)).Merge
        For Each N In ExtrasSource.Cells
            If N.Value <> "" Then
                R = R + 1
                With .Range(.Cells(R, C), .Cells(R, C + 8))
                    .Borders.Weight = xlThin
                    .Interior.Color = RGB(215, 215, 215)
                End With
                With .Cells(R, C)
                    .Font.Bold = True
                    .Value = WorksheetFunction.Max(Sheet5.Columns(C)) + 1
                End With
                .Cells(R, C + 1).Value = UCase(N.Offset(, 2).Value)
                .Cells(R, C + 2).Value = N.Offset(, 5).Value
                With .Cells(R, C + 3)
                    .NumberFormat = N.Offset(, 3).NumberFormat
                    .HorizontalAlignment = N.Offset(, 3).HorizontalAlignment
                    .Value = Format(N.Offset(, 3).Value, "0.00")
                End With
                With .Cells(R, C + 4)
                    .NumberFormat = N.Offset(, 6).NumberFormat
                    .HorizontalAlignment = N.Offset(, 6).HorizontalAlignment
                    .Value = Format(N.Offset(, 6).Value, "0.00")
                End With
                With .Cells(R, C + 5)
                    .NumberFormat = N.Offset(, 7).NumberFormat
                    .HorizontalAlignment = N.Offset(, 7).HorizontalAlignment
                    .Value = Format(N.Offset(, 7).Value, "0.00")
                End With
                With .Range(.Cells(R, C + 6), .Cells(R, C + 8))
                    .Merge
                    .HorizontalAlignment = N.Offset(, 4).HorizontalAlignment
                    .Value = N.Offset(, 4).Value
                End With
                If ExtrasCount >= ExtrasTotal Then Exit For Else ExtrasCount = ExtrasCount + 1
            End If
        Next N
    End With
End If

With Sheet5
    If .UsedRange.Rows.Count < 39 And ExtrasStartRow <> 0 Then
        .ResetAllPageBreaks
        .Unprotect "9853"
        .Rows(ExtrasStartRow).Insert
        .Rows(ExtrasStartRow).Clear
        .Rows(ExtrasStartRow).Insert
        .Rows(ExtrasStartRow).Clear
    End If
    .PageSetup.PrintArea = .Range(.Cells(2, 2), .Cells(.UsedRange.Rows.Count, .UsedRange.Columns.Count - 1)).Address
    .PageSetup.Zoom = False
    .PageSetup.FitToPagesWide = 1
    .PageSetup.CenterHorizontally = True
End With

Application.Calculation = xlCalculationAutomatic
After

Exit Sub
Err:
DefaultError
After
End Sub
Attribute VB_Name = "SKULookupForm"
Attribute VB_Base = "0{697EB907-A58A-4431-9064-5DF66328C1ED}{3C98ACA0-7CA9-437F-80E3-E0BA67133C57}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelBtn_Click()

Unload Me

End Sub

Private Sub SearchBtn_Click()

Dim SourceTable, SearchTable As ListObject
Dim SRow As Integer
Dim TableName, CatVal, TypeVal, SKUVal, DescVal, MsgVal As String
Dim N As Variant
Dim NoMatch As Boolean

Select Case ""
    Case Is = CatCB.Value
        MsgBox "Please select a category.", vbInformation, ""
        CatCB.SetFocus
    Case Is = SearchTB.Value
        MsgBox "Please enter the item you would like to find.", vbInformation, ""
        SearchTB.SetFocus
    Case Else
        Before
        Set SourceTable = Sheet8.ListObjects("AllCats")
        On Error Resume Next
        SRow = WorksheetFunction.Match(CatCB.Value, SourceTable.ListColumns("Category").DataBodyRange, 0)
        If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
        If TableName <> "" Then Set SearchTable = Sheet3.ListObjects(TableName)
        On Error GoTo Err
        NoMatch = True
        For Each N In SearchTable.ListColumns("Description").DataBodyRange.Cells
            If UCase(N.Value) Like "*" & UCase(Trim(SearchTB.Value)) & "*" Or _
            UCase(Sheet3.Cells(N.Row, SearchTable.ListColumns("SKU").DataBodyRange.Column).Value) Like "*" & UCase(Trim(SearchTB.Value)) & "*" Or _
            UCase(Sheet3.Cells(N.Row, SearchTable.ListColumns("Type").DataBodyRange.Column).Value) Like "*" & UCase(Trim(SearchTB.Value)) & "*" Then
                NoMatch = False
                CatVal = CatCB.Value
                TypeVal = Sheet3.Cells(N.Row, SearchTable.ListColumns("Type").DataBodyRange.Column).Value
                SKUVal = Sheet3.Cells(N.Row, SearchTable.ListColumns("SKU").DataBodyRange.Column).Value
                DescVal = Sheet3.Cells(N.Row, SearchTable.ListColumns("Description").DataBodyRange.Column).Value
                MsgVal = "CATEGORY: " & CatVal & vbLf & "TYPE: " & TypeVal & vbLf & "SKU: " & SKUVal & vbLf & "DESCRIPTION: " & DescVal
                Select Case MsgBox(MsgVal & vbLf & vbLf & "Is this the item you are looking for?", vbYesNoCancel, "Search Results")
                    Case Is = 6 'Yes
                        With Sheet2
                            .Range("CLURng").Value = CatVal
                            .Range("TLURng").Value = TypeVal
                            .Range("SKULURng").Value = SKUVal
                        End With
                        MsgBox "Your search results are shown at the top of the sheet.", vbOKOnly, "Search Results"
                        Unload Me
                        Exit For
                    Case Is = 7 'No
                        NoMatch = True
                    Case Is = 2 'Cancel
                        Exit For
                End Select
            End If
        Next N
        If NoMatch = True Then MsgBox "No match found.", vbInformation, ""
        After
End Select

Exit Sub
Err:
DefaultError
After
End Sub

Private Sub UserForm_Initialize()

Dim I As Integer

With Me
    .Left = Application.Left + Application.Width / 2 - .Width / 2
    .Top = Application.Top + Application.Height / 2 - .Height / 2
End With

With CatCB
    .List = Sheet8.ListObjects("AllCats").ListColumns("Category").DataBodyRange.Value
    For I = 1 To .ListRows
        If .List(I) = "Custom" Then .RemoveItem (I)
    Next I
End With

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

On Error GoTo Err

If Not Intersect(Target, Sheet1.Range("Date")) Is Nothing Then
    Before
    Target.Value = Date
    After
    Cancel = True
End If

Exit Sub
Err:
DefaultError
After
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Dim T, PRng As Range
Dim PONum, TableName As String
Dim N As Variant
Dim SourceTable As ListObject
Dim SRow As Integer
Dim Upchg As Double

If Application.UserName <> "Julian" Then CheckPaste
'If ActiveSheet.Name = Sheet1.Name Then Target(1, 1).Select

For Each T In Target.Cells
    If Intersect(T, Sheet1.UsedRange) Is Nothing Then Exit For
    If Not Intersect(T, Sheet1.Range("BillToName")) Is Nothing Then
        Before
        T.Offset(1).Cells(1, 1).Value = ""
        T.Offset(2).Cells(1, 1).Value = ""
        T.Offset(3).Cells(1, 1).Value = ""
        If T.Value <> "" Then
            Set SourceTable = Sheet4.ListObjects("DealerInfo")
            On Error Resume Next
            SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Name").DataBodyRange, 0)
            On Error GoTo Err
            If SRow <> 0 Then
                T.Offset(1).Cells(1, 1).Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Address 1").Index).Value
                T.Offset(2).Cells(1, 1).Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Address 2").Index).Value
                T.Offset(3).Cells(1, 1).Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Phone").Index).Value
            End If
        End If
        After
    End If
    If Not Intersect(T, Sheet1.Range("OrderTypeRng")) Is Nothing Then
        For Each N In Sheet4.Range("OrderTypeCheckRng").Cells
            If N.Value = T.Value Then
                Before
                Do While PONum = ""
                    PONum = InputBox("Please enter the Original PO #.", "Original PO #")
                Loop
                Sheet1.Range("OriginalPORng").Value = PONum
                After
                Exit For
            End If
        Next N
    End If
    If Not Intersect(T, Sheet1.Range("WSFRng").Columns(1)) Is Nothing Then
        Before
        Set PRng = Sheet1.Cells(T.Row, Range("UpchargeHeader").Column).MergeArea
        PRng.Value = 0
        On Error Resume Next
        Select Case T.Address
            Case Is = Range("WS").Address
                Set SourceTable = Sheet4.ListObjects("WoodSpecies")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Wood Species").DataBodyRange, 0)
            Case Is = Range("GM").Address
                Set SourceTable = Sheet4.ListObjects("GrainMatch")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Grain Match").DataBodyRange, 0)
            Case Is = Range("FT").Address
                Set SourceTable = Sheet4.ListObjects("FinishTypes")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Type").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Table Name").Index).Value
                On Error GoTo Err
                With T.Offset(, 2).MergeArea
                    .Value = ""
                    .Validation.Delete
                    If TableName <> "" Then
                        Sheet1.Unprotect "9853"
                        .Validation.Add xlValidateList, xlValidAlertStop, , "=indirect(""" & TableName & """)"
                        .Validation.ShowError = False
                    End If
                End With
            Case Is = Range("Sh").Address
                Set SourceTable = Sheet4.ListObjects("Sheen")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Sheen").DataBodyRange, 0)
            Case Is = Range("GT").Address
                Set SourceTable = Sheet4.ListObjects("GlazeTypes")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Glaze Type").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Table Name").Index).Value
                On Error GoTo Err
                With T.Offset(, 2).MergeArea
                    .Value = ""
                    .Validation.Delete
                    If TableName <> "" Then
                        Sheet1.Unprotect "9853"
                        .Validation.Add xlValidateList, xlValidAlertStop, , "=indirect(""" & TableName & """)"
                        .Validation.ShowError = False
                    End If
                End With
            Case Is = Range("Tech1").Address
                Set SourceTable = Sheet4.ListObjects("FinishTech")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Technique").DataBodyRange, 0)
            Case Is = Range("Tech2").Address
                Set SourceTable = Sheet4.ListObjects("FinishTech")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Technique").DataBodyRange, 0)
            Case Is = Range("Tech3").Address
                Set SourceTable = Sheet4.ListObjects("FinishTech")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Technique").DataBodyRange, 0)
            Case Is = Range("Tech4").Address
                Set SourceTable = Sheet4.ListObjects("FinishTech")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Technique").DataBodyRange, 0)
            Case Is = Range("Tech5").Address
                Set SourceTable = Sheet4.ListObjects("FinishTech")
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Finish Technique").DataBodyRange, 0)
        End Select
        On Error GoTo Err
        If SRow <> 0 Then
            PRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Upcharge").Index).Value
            Sheet1.Unprotect "9853"
            On Error GoTo 0
        End If
        If T.Value Like "*Custom*" = True Then
            With PRng
                .Locked = False
                .Interior.Color = RGB(255, 255, 255)
            End With
        ElseIf T.Value <> "" And SRow = 0 Then
            With PRng
                .Locked = False
                .Value = 1
                .Interior.Color = RGB(255, 255, 255)
            End With
        Else
            With PRng
                .Locked = True
                .Interior.Color = RGB(215, 215, 215)
            End With
        End If
        After
    End If
Next T

End
Exit Sub
Err:
DefaultError
After
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

Exit Sub

Dim IconRng As Range
Set IconRng = Sheet1.Range("IconRng").MergeArea

With Sheet1.Shapes("Icon")
    .Height = IconRng.Height
    .Left = IconRng.Left
    .Top = IconRng.Top
End With

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim N, NN, NNN As Variant
Dim T, PreviewRng, DetailRng, CabNumRng, CabCatRng, CabTypeRng, SKURng, WidthRng, HeightRng, DepthRng, HingeRng, LEndRng, REndRng, LStileRng, RStileRng, CommentsRng, DescRng, PRng, DChgRng, EndChgRng, SChgRng, ExtraChgRng As Range
Dim CFARng, MPFRng, OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng As Range
Dim MCatRng, MTypeRng, MSKURng, MQTYRng, MDescRng, MPRng, MTotalRng As Range
Dim EStileWidth As String
Dim StartRow As Integer

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

On Error GoTo Err

Dim Adj, Ans, I, TopCab, NewRow, LastRow As Integer
Dim SearchVal, CabString, FormerVal As String
Dim CabArr(1 To 5) As String
Dim NumRng, ChangeRng, HeaderRng, CatHeader, TypeHeader, SKUHeader, QTYHeader, DescHeader, PriceHeader, TotalHeader, RemoveHeader As Range
Dim AlreadyEntered As Boolean

Set T = Target.Cells(1, 1)

If Not Intersect(T, Sheet2.Range("AddCabinetBtn")) Is Nothing Then
    Cancel = True
    Before
    With Sheet2
        LastRow = .UsedRange.Rows.Count
        If .Rows(LastRow).Hidden = True Then Adj = 1 Else Adj = 3
        .Range("CabinetSource").Copy .Cells(LastRow + Adj, 1)
        .Cells(LastRow + Adj + 1, 1).Value = WorksheetFunction.Max(.Columns(1)) + 1
    End With
    After
End If
If Not Intersect(T, Sheet2.Range("ClearCabinetsBtn")) Is Nothing Then
    Cancel = True
    If MsgBox("Do you want to clear all cabinets?" & vbLf & vbLf & "This action cannot be undone!", vbYesNo, "") = 6 Then ClearCabinets
End If
If Not Intersect(T, Sheet2.Range("SKULookupBtn")) Is Nothing Then
    Cancel = True
    SKULookupForm.Show
End If
If Not Intersect(T, Sheet2.Range("AddCombinedButton")) Is Nothing Then
    Cancel = True
    Before
    With Sheet2
        .Unprotect "9853"
        .Rows(.Range("CombinedRng").Cells(.Range("CombinedRng").Rows.Count, 1).Row).Insert
        .Range("CombinedRng").Rows(.Range("CombinedRng").Rows.Count - 1).Value = .Range("CombinedRng").Rows(.Range("CombinedRng").Rows.Count).Value
        .Range("CombinedRng").Rows(.Range("CombinedRng").Rows.Count).Value = ""
        .Range("CombinedIndex").Rows(.Range("CombinedIndex").Rows.Count - 1).Value = .Range("CombinedIndex").Rows(.Range("CombinedIndex").Rows.Count).Value
        .Range("CombinedIndex").Rows(.Range("CombinedIndex").Rows.Count).Value = ""
        .Range("StartNumber").Offset(-2).Interior.Color = 0
    End With
    After
End If
If Not Intersect(T, Sheet2.Range("DeleteCombinedButton")) Is Nothing Then
    Cancel = True
    Before
    With Sheet2
        .Unprotect "9853"
        If .Range("CombinedRng").Rows.Count > 6 Then
            .Range("StartNumber").Offset(-1).Copy .Range("StartNumber").Offset(-2)
            .Rows(.Range("CombinedRng").Cells(.Range("CombinedRng").Rows.Count, 1).Row).Delete
        End If
    End With
    After
End If
If T.Value = Sheet2.Range("NMBtn").Value Then
    Cancel = True
    Before
    Set CabNumRng = Sheet2.Cells(T.Row, Range("CabNum").Column)
    StartRow = T.Row + 5
    NewRow = StartRow + 1
    Set CatHeader = Sheet2.Cells(StartRow, Sheet2.Range("CabCat").Column)
    Set TypeHeader = Sheet2.Cells(StartRow, Sheet2.Range("CabType").Column)
    Set SKUHeader = Sheet2.Cells(StartRow, Sheet2.Range("CabSKU").Column)
    Set QTYHeader = Sheet2.Cells(StartRow, Sheet2.Range("Width").Column)
    Set DescHeader = Sheet2.Range(Sheet2.Cells(StartRow, Range("Height").Column), Sheet2.Cells(StartRow, Range("LStile").Column))
    Set PriceHeader = Sheet2.Cells(StartRow, Sheet2.Range("RStile").Column)
    Set TotalHeader = Sheet2.Cells(StartRow, Sheet2.Range("LEnd").Column)
    Set RemoveHeader = Sheet2.Cells(StartRow, Sheet2.Range("REnd").Column)
    Set HeaderRng = Sheet2.Range(CatHeader.Address & ":" & RemoveHeader.Address)
    Set ExtraChgRng = Sheet2.Cells(StartRow - 1, Sheet2.Range("ExtrasCharge").Column)
    
    If CatHeader.Value = "" Then
        Sheet2.Rows(NewRow).Insert
        Sheet2.Range("CabNum").Copy HeaderRng
        CatHeader.Value = "CATEGORY"
        TypeHeader.Value = "TYPE"
        SKUHeader.Value = "SKU"
        QTYHeader.Value = "QTY"
        With DescHeader
            .Value = "DESCRIPTION"
            .Merge
        End With
        PriceHeader.Value = "PRICE"
        TotalHeader.Value = "TOTAL"
        RemoveHeader.Value = "REMOVE"
        ExtraChgRng.Value = "=sum(" & Replace(TotalHeader.Address, "$", "") & ":" & Replace(TotalHeader.Offset(1).Address, "$", "") & ")"
    End If
    
    Sheet2.Rows(NewRow).Insert , xlFormatFromRightOrBelow
    Application.CutCopyMode = False
    Sheet2.Range("CabCat").Offset(1).Copy
    HeaderRng.Offset(1).PasteSpecial xlPasteFormats
    Application.CutCopyMode = True
    With CatHeader.Offset(1).Validation
        .Delete
        Sheet2.Unprotect "9853"
        .Add xlValidateList, xlValidAlertStop, , "=indirect(""AddItems[Category]"")"
    End With
    Sheet2.Range("BasePrice").Offset(1).Copy Union(PriceHeader.Offset(1), TotalHeader.Offset(1))
    PriceHeader.Offset(1).Value = 0
    With TotalHeader.Offset(1)
        .Value = "=" & QTYHeader.Offset(1).Address & "*" & PriceHeader.Offset(1).Address
        .Font.Bold = True
    End With
    With DescHeader.Offset(1).Resize(, DescHeader.Columns.Count)
        .Merge
        .Interior.Color = PriceHeader.Offset(1).Interior.Color
    End With
    With RemoveHeader.Offset(1)
        .BorderAround xlContinuous, xlMedium
        .Interior.Color = RGB(134, 0, 55)
        .Font.Color = RGB(255, 255, 255)
        .Font.Bold = True
        .Value = "X"
    End With
    Range(SKUHeader.Offset(1).Address & ":" & TotalHeader.Offset(1).Address).Locked = True
    CatHeader.Offset(1).Select
    
    After
End If
If T.Interior.Color = 3604614 And T.Column = Range("REnd").Column Then
    Cancel = True
    If MsgBox("Do you want to remove this mod/extra?", vbYesNo, "") = 6 Then
        Before
        If T.Offset(-1).Value = "REMOVE" And T.Offset(1).Value = "" Then Sheet2.Rows(T.Row - 1).Delete
        Sheet2.Rows(T.Row).Delete
        After
    End If
End If

End
Exit Sub
Err:
DefaultError
After
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

On Error GoTo Err

Dim SourceTable, TypeTable As ListObject
Dim Adj, SRow, DCol, ICD3, ICD6, SqFtCol, FilledRows, IndexVal As Integer
Dim ICD3Percent, ICD6Percent, MPrice, SqFtPrice, CalcPrice As Double
Dim CabCat, ESText, TableName, ColName As String
Dim IndexRng As Range
Dim AlreadyEntered, SqFt As Boolean

If Application.UserName <> "Julian" Then CheckPaste
If ActiveSheet.Name = Sheet2.Name Then Target(1, 1).Select

Set PreviewRng = Sheet2.Range("Preview")
Set DescRng = Sheet2.Range("Description")

For Each T In Target.Cells
    If Intersect(T, Sheet2.UsedRange) Is Nothing Then Exit For
    If T.Row - 1 <= 0 Then Exit For
    If T.Interior.Color = 3604614 Then
        Before
        Select Case True
            Case Is = Intersect(T, Sheet2.Range("AddCabinetBtn")) Is Nothing = False
                T.Value = "ADD CABINET"
            Case Is = Intersect(T, Sheet2.Range("ClearCabinetsBtn")) Is Nothing = False
                T.Value = "CLEAR CABINETS"
            Case Is = Intersect(T, Sheet2.Range("SKULookupBtn")) Is Nothing = False
                T.Value = "LOOK UP ITEM"
            Case Is = Intersect(T, Sheet2.Range("AddCombinedButton")) Is Nothing = False
                T.Value = "ADD COMBINED ROW"
            Case Is = Intersect(T, Sheet2.Range("DeleteCombinedButton")) Is Nothing = False
                T.Value = "DELETE COMBINED ROW"
            Case Is = T.Column = Range("RStile").Column
                T.Value = "X"
            Case Is = T.Column = Range("NMBtn").Column
                T.Value = "NEW MOD/EXTRA"
        End Select
        After
    End If
    If Not Intersect(T, Sheet2.Range("CombinedRng")) Is Nothing Then
        Before
        Set IndexRng = T.Offset(, Sheet2.Range("CombinedIndex").Column - Sheet2.Range("CombinedRng").Column)
        IndexRng.Value = ""
        If T.Value <> "" Then
            For Each N In Range("CombinedRng").Cells
                If N.Address <> T.Address And N.Value = T.Value Then
                    AlreadyEntered = True
                    Exit For
                End If
            Next N
            Select Case True
                Case Is = IsNumeric(T.Value) = False
                    MsgBox "Numbers only, please.", vbInformation, ""
                    T.Value = ""
                Case Is = T.Value <= 0
                    MsgBox "You may only use positive numbers.", vbInformation, ""
                    T.Value = ""
                Case Is = T.Value <> Int(T.Value)
                    MsgBox "You may only use whole numbers.", vbInformation, ""
                    T.Value = ""
                Case Is = AlreadyEntered
                    MsgBox "You've already entered that cabinet.", vbInformation, ""
                    T.Value = ""
                Case Else
                    For Each N In Intersect(Sheet2.Columns(Sheet2.Range("CabNum").Column), Sheet2.Rows(Sheet2.Range("CabNum").Row & ":" & Sheet2.UsedRange.Rows.Count))
                        If N.Offset(-1).Value = Sheet2.Range("CabNum").Value Then
                            If N.Value = T.Value Then
                                IndexVal = N.Offset(, -1).Value
                                Exit For
                            End If
                        End If
                    Next N
                    If IndexVal <> 0 Then
                        IndexRng.Value = IndexVal
                    Else
                        MsgBox "No match was found. Please try again or contact your system administrator for assistance.", vbInformation, ""
                        T.Value = ""
                        IndexRng.Value = ""
                    End If
            End Select
        End If
        After
    End If
    If Not Intersect(T, Sheet2.Range("StartNumber")) Is Nothing Then
        Before
        Select Case True
            Case Is = T.Value = ""
                T.Value = 1
            Case Is = IsNumeric(T.Value) = False
                MsgBox "Numbers only, please.", vbInformation, ""
                T.Value = 1
            Case Is = T.Value <= 0
                MsgBox "You may only use positive numbers.", vbInformation, ""
                T.Value = 1
            Case Is = T.Value <> Int(T.Value)
                MsgBox "You may only use whole numbers.", vbInformation, ""
                T.Value = 1
            Case Is = AlreadyEntered
                MsgBox "You've already entered that cabinet.", vbInformation, ""
                T.Value = 1
        End Select
        NumberCabs
        After
    End If
    If Sheet2.Cells(T.Row - 1, Range("CabNum").Column).Value = Range("CabNum").Value Then
        Set CabNumRng = Sheet2.Cells(T.Row, Sheet2.Range("CabNum").Column)
        Set CabCatRng = Sheet2.Cells(T.Row, Sheet2.Range("CabCat").Column)
        Set CabTypeRng = Sheet2.Cells(T.Row, Sheet2.Range("CabType").Column)
        Set SKURng = Sheet2.Cells(T.Row, Sheet2.Range("CabSKU").Column)
        Set WidthRng = Sheet2.Cells(T.Row, Sheet2.Range("Width").Column)
        Set HeightRng = Sheet2.Cells(T.Row, Sheet2.Range("Height").Column)
        Set DepthRng = Sheet2.Cells(T.Row, Sheet2.Range("Depth").Column)
        Set HingeRng = Sheet2.Cells(T.Row, Sheet2.Range("HingeRng").Column)
        Set LEndRng = Sheet2.Cells(T.Row, Sheet2.Range("LEnd").Column)
        Set REndRng = Sheet2.Cells(T.Row, Sheet2.Range("REnd").Column)
        Set LStileRng = Sheet2.Cells(T.Row, Sheet2.Range("LStile").Column)
        Set RStileRng = Sheet2.Cells(T.Row, Sheet2.Range("RStile").Column)
        Set CommentsRng = Sheet2.Cells(T.Row + 2, Sheet2.Range("CommentsRng").Column).MergeArea
        Set CFARng = Sheet2.Cells(T.Row, Sheet2.Range("CFA").Column)
        Set MPFRng = Sheet2.Cells(T.Row, Sheet2.Range("MPF").Column)
        Set OpeningsRng = Sheet2.Cells(T.Row, Sheet2.Range("Openings").Column)
        Set UDoorsRng = Sheet2.Cells(T.Row, Sheet2.Range("UDoors").Column)
        Set LDoorsRng = Sheet2.Cells(T.Row, Sheet2.Range("LDoors").Column)
        Set SDFrontsRng = Sheet2.Cells(T.Row, Sheet2.Range("SDFronts").Column)
        Set DDFrontsRng = Sheet2.Cells(T.Row, Sheet2.Range("DDFronts").Column)
        Set DBoxesRng = Sheet2.Cells(T.Row, Sheet2.Range("DBoxes").Column)
                           
        Adj = Range("PriceRng").Row - Sheet2.Range("CabRng").Row
        Set DescRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("Description").Column).MergeArea
        Set PRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("BasePrice").Column)
        Set DChgRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("DimCharge").Column)
        Set EndChgRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("EndCharge").Column)
        Set SChgRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("StileCharge").Column)
        Set ExtraChgRng = Sheet2.Cells(T.Row + Adj, Sheet2.Range("ExtrasCharge").Column)
        
        If Not Intersect(T, CabNumRng) Is Nothing Then
            Before
            If CabCatRng <> "" Then
                If T.Value = "" Then T.Value = 1000
                If T.Value < 1 Then T.Value = 1
            End If
            If IsNumeric(T.Value) = True Then T.Value = Round(T.Value, 0) Else T.Value = 1000
            NumberCabs
            After
        End If
        If Not Intersect(T, CabCatRng) Is Nothing Then
            Before
            ResetCab
            With CabTypeRng
                .Value = ""
                .Locked = True
                .Validation.Delete
            End With
            With SKURng
                .Value = ""
                .Locked = True
                .Validation.Delete
            End With
            Select Case T.Value
                Case Is = ""
                    CabNumRng.Value = ""
                    CabNumRng.Locked = True
                Case Is = "Custom"
                    Union(WidthRng, HeightRng, DepthRng, HingeRng, LEndRng, REndRng, LStileRng, RStileRng, CommentsRng, DescRng, PRng).Locked = False
                    With Union(CabTypeRng, SKURng)
                        .Value = "Custom"
                        .Interior.Color = RGB(215, 215, 215)
                    End With
                    Union(DescRng, PRng).Interior.Color = RGB(255, 255, 255)
                    CFARng.Value = "=" & PRng.Address
                    MPFRng.Offset(1).Value = "=sum(" & DChgRng.Address & ":" & EndChgRng.Address & ")"
                    If CabNumRng.Value = "" Then CabNumRng.Value = 1000
                Case Else
                    Set SourceTable = Sheet8.ListObjects("CabCats")
                    On Error Resume Next
                    SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Category").DataBodyRange, 0)
                    On Error GoTo Err
                    If SRow <> 0 Then
                        Union(CabNumRng, CabTypeRng).Locked = False
                        TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
                        If TableName <> "" Then
                            Sheet2.Unprotect "9853"
                            CabTypeRng.Validation.Add xlValidateList, xlValidAlertStop, , "=indirect(""" & TableName & "[Type]"")"
                        End If
                    Else
                        MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
                    End If
                    SRow = 0
                    If CabNumRng.Value = "" Then CabNumRng.Value = 1000
            End Select
            NumberCabs
            After
        End If
        If Not Intersect(T, CabTypeRng) Is Nothing Then
            Before
            ResetCab
            With SKURng
                .Value = ""
                .Locked = True
                .Validation.Delete
            End With
            If T.Value <> "" Then
                Set SourceTable = Sheet8.ListObjects("CabCats")
                On Error Resume Next
                SRow = WorksheetFunction.Match(CabCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
                SRow = 0
                Set SourceTable = Sheet8.ListObjects(TableName)
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Type").DataBodyRange, 0)
                On Error GoTo Err
                If SRow <> 0 Then
                    SKURng.Locked = False
                    TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Table Name").Index).Value
                    FilledRows = Sheet9.Range(TableName & "[Compiler]").Rows.Count - WorksheetFunction.CountBlank(Sheet9.Range(TableName & "[Compiler]"))
                    If TableName <> "" Then
                        Sheet2.Unprotect "9853"
                        SKURng.Validation.Add xlValidateList, xlValidAlertStop, , "='SKU Tables'!" & Sheet9.Range(TableName & "[Compiler]").Rows(1 & ":" & FilledRows).Address
                    End If
                Else
                    MsgBox "No match was found.", vbInformation, ""
                End If
                SRow = 0
            End If
            NumberCabs
            After
        End If
        If Not Intersect(T, SKURng) Is Nothing Then
            Before
            ResetCab
            If T.Value <> "" Then
                T.Value = UCase(T.Value)
                Set SourceTable = Sheet8.ListObjects("CabCats")
                On Error Resume Next
                SRow = WorksheetFunction.Match(CabCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
                SRow = 0
                Set SourceTable = Sheet3.ListObjects(TableName)
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("SKU").DataBodyRange, 0)
                On Error GoTo Err
                If SRow <> 0 Then
                    Union(WidthRng, HeightRng, DepthRng, HingeRng, LEndRng, REndRng, LStileRng, RStileRng, CommentsRng).Locked = False
                    On Error Resume Next 'Potential future issue
                    WidthRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Width").Index).Value
                    HeightRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Height").Index).Value
                    If CabCatRng.Value = "Wall" Or CabCatRng.Value = "Finished Accessory" Then
                        If Sheet1.Range("CabStyleRng").Value Like "*Inset*" Then
                            ColName = "Inset Depth"
                        Else
                            ColName = "Overlay Depth"
                        End If
                    Else
                        ColName = "Depth"
                    End If
                    DepthRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns(ColName).Index).Value
                    HingeRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Hinge Direction").Index).Value
                    DescRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Description").Index).Value
                    PRng.Value = Format(SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("List Price").Index).Value, "0.00")
                    If SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Item Type").Index).Value = "CFA" Then
                        CFARng.Value = PRng.Value
                    Else
                        MPFRng.Value = PRng.Value
                    End If
                    MPFRng.Offset(1).Value = "=sum(" & DChgRng.Address & ":" & EndChgRng.Address & ")"
                    OpeningsRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Openings").Index).Value
                    UDoorsRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Upper Doors").Index).Value
                    LDoorsRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Lower Doors").Index).Value
                    SDFrontsRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Shallow Drawer Fronts").Index).Value
                    DDFrontsRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Deep Drawer Fronts").Index).Value
                    DBoxesRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Drawer Boxes").Index).Value
                    On Error GoTo Err
                End If
                SRow = 0
            End If
            After
        End If
        If Not Intersect(T, Union(WidthRng, HeightRng, DepthRng)) Is Nothing Then
            Before
            ICD3 = 0
            ICD6 = 0
            SqFt = False
            SqFtCol = 0
            Set SourceTable = Sheet8.ListObjects("CabCats")
            On Error Resume Next
            SRow = WorksheetFunction.Match(CabCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
            If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
            SRow = 0
            Set SourceTable = Sheet3.ListObjects(TableName)
            SRow = WorksheetFunction.Match(SKURng.Value, SourceTable.ListColumns("SKU").DataBodyRange, 0)
            On Error GoTo Err
            If SRow <> 0 Then
                On Error Resume Next
                SqFtCol = SourceTable.ListColumns("Square Foot Price").Index
                On Error GoTo Err
                If SqFtCol <> 0 Then
                    If SourceTable.DataBodyRange.Cells(SRow, SqFtCol).Value <> "" Then SqFt = True
                End If
                If SqFt = False Then
                    For Each N In Union(WidthRng, HeightRng, DepthRng).Cells
                        Do While N.Value Like "*  *"
                            N.Value = Replace(N.Value, "  ", " ")
                        Loop
                        If N.Value <> "" Then
                            N.Value = Round(N.Value * 32, 0) / 32
                        End If
                        If WidthRng.Value <> "" And HeightRng.Value <> "" And DepthRng.Value <> "" Then
                            If SRow <> 0 Then
                                ColName = ""
                                Select Case N.Offset(-1).Value
                                    Case Is = Sheet2.Range("Width").Value
                                        ColName = "Width"
                                    Case Is = Sheet2.Range("Height").Value
                                        ColName = "Height"
                                    Case Is = Sheet2.Range("Depth").Value
                                        If CabCatRng.Value = "Wall" Or CabCatRng.Value = "Finished Accessory" Then
                                            If Sheet1.Range("CabStyleRng").Value Like "*Inset*" Then
                                                ColName = "Inset Depth"
                                            Else
                                                ColName = "Overlay Depth"
                                            End If
                                        Else
                                            ColName = "Depth"
                                        End If
                                End Select
                                If SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns(ColName).Index).Value <> "" Then
                                    Select Case N.Value - SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns(ColName).Index).Value
                                        Case Is > 6
                                            MsgBox ("No more than 6"" may be added. Please select another cabinet or request a custom quote."), vbInformation, ""
                                            N.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns(ColName).Index).Value + 6
                                            ICD6 = ICD6 + 1
                                        Case Is > 3
                                            ICD6 = ICD6 + 1
                                        Case Is > 0
                                            ICD3 = ICD3 + 1
                                    End Select
                                End If
                            End If
                        End If
                    Next N
                    ICD3Percent = Sheet8.Range("ICD3Percent").Value
                    ICD6Percent = Sheet8.Range("ICD6Percent").Value
                    DChgRng.Value = (PRng.Value * ICD3Percent * ICD3) + (PRng.Value * ICD6Percent * ICD6)
                Else
                    SqFtPrice = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("List Price").Index).Value
                    If WidthRng.Value <> "" And HeightRng.Value <> "" Then
                        CalcPrice = WidthRng.Value * HeightRng.Value / 144 * SqFtPrice
                    Else
                        CalcPrice = SqFtPrice
                    End If
                    PRng.Value = Format(CalcPrice, "0.00")
                    If CabCatRng.Value = "Wall" Or CabCatRng.Value = "Finished Accessory" Then
                        If Sheet1.Range("CabStyleRng").Value Like "*Inset*" Then
                            ColName = "Inset Depth"
                        Else
                            ColName = "Overlay Depth"
                        End If
                    Else
                        ColName = "Depth"
                    End If
                    DepthRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns(ColName).Index).Value
                End If
            End If
            FECalc
            ESCalc
            'CombineCalc
            After
        End If
        If Not Intersect(T, Union(LEndRng, REndRng)) Is Nothing Then
            Before
            'Set TypeTable = Sheet8.ListObjects("EndTypes") 'looks up abbreviation
            'On Error Resume Next
            'Application.ScreenUpdating = True
            'T.Value = TypeTable.DataBodyRange.Cells(WorksheetFunction.Match(T.Value, TypeTable.ListColumns("Category").DataBodyRange, 0), TypeTable.ListColumns("Abv").Index)
            'Application.ScreenUpdating = False
            'On Error GoTo Err
            FECalc
            After
        End If
        If Not Intersect(T, Union(LStileRng, RStileRng)) Is Nothing Then
            Before
            If T.Value Like "*Extended*" = True Then
                Application.ScreenUpdating = True
                T.Value = ""
                Application.ScreenUpdating = False
                EStileWidth = ""
                EStileWidth = Trim(InputBox("Please enter the width of the extended stile. You may add up to 6""." & vbLf & vbLf & "(You may use either a fraction or a decimal)", "Extended Stile"))
                On Error Resume Next
                If EStileWidth Like "*/*" = True Then EStileWidth = Evaluate(EStileWidth)
                On Error GoTo Err
                If EStileWidth <> "" Then
                    Select Case True
                        Case Is = IsNumeric(EStileWidth) = False
                            MsgBox "Numbers only, please.", vbInformation, ""
                        Case Is = EStileWidth > 6
                            MsgBox "You may not add more than 6"".", vbInformation, ""
                        Case Is = EStileWidth <= 0
                            MsgBox "You may only use positive numbers.", vbInformation, ""
                        Case Else
                            If EStileWidth <> Int(EStileWidth) Then
                                ESText = WorksheetFunction.Text(Round((EStileWidth - Int(EStileWidth)) * 32, 0) / 32, "#/##")
                                If EStileWidth > 1 Then ESText = Int(EStileWidth) & " " & ESText
                            Else
                                ESText = EStileWidth
                            End If
                            T.Value = ESText & """ Ext."
                    End Select
                End If
            End If
            ESCalc
            After
        End If
    End If
    If Sheet2.Cells(T.Row, Range("REnd").Column).Value = "X" Then
        Set MCatRng = Sheet2.Cells(T.Row, Sheet2.Range("CabCat").Column)
        Set MTypeRng = Sheet2.Cells(T.Row, Sheet2.Range("CabType").Column)
        Set MSKURng = Sheet2.Cells(T.Row, Sheet2.Range("CabSKU").Column)
        Set MQTYRng = Sheet2.Cells(T.Row, Sheet2.Range("Width").Column)
        Set MDescRng = Sheet2.Cells(T.Row, Sheet2.Range("Height").Column).MergeArea
        Set MPRng = Sheet2.Cells(T.Row, Sheet2.Range("RStile").Column)
        Set MTotalRng = Sheet2.Cells(T.Row, Sheet2.Range("LEnd").Column)
        Set CFARng = Sheet2.Cells(T.Row, Sheet2.Range("CFA").Column)
        Set MPFRng = Sheet2.Cells(T.Row, Sheet2.Range("MPF").Column)
        Set OpeningsRng = Sheet2.Cells(T.Row, Sheet2.Range("Openings").Column)
        Set UDoorsRng = Sheet2.Cells(T.Row, Sheet2.Range("UDoors").Column)
        Set LDoorsRng = Sheet2.Cells(T.Row, Sheet2.Range("LDoors").Column)
        Set SDFrontsRng = Sheet2.Cells(T.Row, Sheet2.Range("SDFronts").Column)
        Set DDFrontsRng = Sheet2.Cells(T.Row, Sheet2.Range("DDFronts").Column)
        Set DBoxesRng = Sheet2.Cells(T.Row, Sheet2.Range("DBoxes").Column)
        If Not Intersect(T, MCatRng) Is Nothing Then
            Before
            ResetMod
            With Union(MTypeRng, MSKURng)
                .Value = ""
                .Locked = True
                .Validation.Delete
            End With
            Select Case T.Value
                Case Is = ""
                Case Is = "Custom"
                    Union(MQTYRng, MDescRng, MPRng).Locked = False
                    With Union(MTypeRng, MSKURng)
                        .Value = "Custom"
                        .Interior.Color = RGB(215, 215, 215)
                    End With
                    Union(MDescRng, MPRng).Interior.Color = RGB(255, 255, 255)
                    CFARng.Value = "=" & MPRng.Address
                Case Else
                    Set SourceTable = Sheet8.ListObjects("AddItems")
                    On Error Resume Next
                    SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Category").DataBodyRange, 0)
                    On Error GoTo Err
                    If SRow <> 0 Then
                        MTypeRng.Locked = False
                        TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
                        If TableName <> "" Then
                            Sheet2.Unprotect "9853"
                            MTypeRng.Validation.Add xlValidateList, xlValidAlertStop, , "=indirect(""" & TableName & "[Type]"")"
                        End If
                    Else
                        MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
                    End If
                    SRow = 0
            End Select
            After
        End If
        If Not Intersect(T, MTypeRng) Is Nothing Then
            Before
            ResetMod
            With MSKURng
                .Value = ""
                .Locked = True
                .Validation.Delete
            End With
            If T.Value <> "" Then
                Set SourceTable = Sheet8.ListObjects("AddItems")
                On Error Resume Next
                SRow = WorksheetFunction.Match(MCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
                SRow = 0
                Set SourceTable = Sheet8.ListObjects(TableName)
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Type").DataBodyRange, 0)
                On Error GoTo Err
                If SRow <> 0 Then
                    MSKURng.Locked = False
                    TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Table Name").Index).Value
                    FilledRows = Sheet9.Range(TableName & "[Compiler]").Rows.Count - WorksheetFunction.CountBlank(Sheet9.Range(TableName & "[Compiler]"))
                    If TableName <> "" Then
                        Sheet2.Unprotect "9853"
                        MSKURng.Validation.Add xlValidateList, xlValidAlertStop, , "='SKU Tables'!" & Sheet9.Range(TableName & "[Compiler]").Rows(1 & ":" & FilledRows).Address
                    End If
                Else
                    MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
                End If
                SRow = 0
            End If
            After
        End If
        If Not Intersect(T, MSKURng) Is Nothing Then
            Before
            ResetMod
            If T.Value <> "" Then
                T.Value = UCase(T.Value)
                Set SourceTable = Sheet8.ListObjects("AddItems")
                On Error Resume Next
                SRow = WorksheetFunction.Match(MCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
                If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
                SRow = 0
                Set SourceTable = Sheet3.ListObjects(TableName)
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("SKU").DataBodyRange, 0)
                On Error GoTo Err
                If SRow <> 0 Then
                    MQTYRng.Locked = False
                    MDescRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Description").Index).Value
                    MPrice = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("List Price").Index).Value
                    Select Case MPrice
                        Case 0
                            MPRng.Value = 0
                        Case 0 To 1, -1 To 0
                            With MQTYRng
                                .HorizontalAlignment = xlLeft
                                .NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                                .Value = 0
                            End With
                            With MPRng
                                .HorizontalAlignment = xlCenter
                                .NumberFormat = "0%"
                                .Value = Format(MPrice, "0%")
                            End With
                        Case Else
                            MPRng.Value = Format(MPrice, "0.00")
                    End Select
                    On Error Resume Next 'Potential future issue
                    If SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Item Type").Index).Value = "CFA" Then
                        CFARng.Value = "=" & MTotalRng.Address
                    Else
                        MPFRng.Value = "=" & MTotalRng.Address
                    End If
                    OpeningsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Openings").Index).Value
                    UDoorsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Upper Doors").Index).Value
                    LDoorsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Lower Doors").Index).Value
                    SDFrontsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Shallow Drawer Fronts").Index).Value
                    DDFrontsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Deep Drawer Fronts").Index).Value
                    DBoxesRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Drawer Boxes").Index).Value
                    On Error GoTo Err
                Else
                    MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
                End If
                SRow = 0
            End If
            After
        End If
    End If
    CombineCalc
Next T

End
Exit Sub
Err:
DefaultError
After
End Sub

Private Sub NumberCabs()

Dim I, II, III, ICount, NextNum, OriginalVal As Integer
Dim NumRng, CombineRng, NumSource As Range
Dim Arr() As Variant
Dim IsInArr, MatchFound, NoNum As Boolean

Before

Set NumRng = Nothing
Set NumSource = Sheet2.Range("StartNumber")

On Error Resume Next
OriginalVal = CabNumRng.Value
On Error GoTo Err

For Each N In Intersect(Sheet2.Columns(Sheet2.Range("CabNum").Column), Sheet2.Rows(Sheet2.Range("CabNum").Row & ":" & Sheet2.UsedRange.Rows.Count))
    If N.Offset(-1).Value = Sheet2.Range("CabNum").Value And N.Value <> "" Then
        If NumRng Is Nothing Then
            Set NumRng = N
        Else
            Set NumRng = Union(NumRng, N)
        End If
    End If
Next N
If Not NumRng Is Nothing Then
    I = 0
    II = 1
    III = NumRng.Count + 1
    For Each N In NumRng
        If N.Value = "" Or N.Value > NumRng.Count Then III = III - 1
    Next N
    ReDim Arr(1 To NumRng.Count) As Variant
    Do While I <= NumRng.Count
        For Each N In NumRng
            For Each NN In Arr
                If N.Address = NN Then
                    IsInArr = True
                    Exit For
                End If
            Next NN
            If IsInArr = False Then
                Select Case N.Value
                    Case Is = "", Is > NumRng.Count
                        Arr(III) = N.Address
                        III = III + 1
                    Case Is = I
                        Arr(II) = N.Address
                        II = II + 1
                End Select
            End If
            IsInArr = False
        Next N
        I = I + 1
    Loop
    I = 1
    If IsNumeric(NumSource.Value) Then NextNum = NumSource.Value Else NextNum = 1
    For I = LBound(Arr) To UBound(Arr)
        Sheet2.Range(Arr(I)).Value = NextNum
        NextNum = NextNum + 1
    Next I
End If

On Error Resume Next
If CabNumRng Is Nothing Then NoNum = True
On Error GoTo Err

If NoNum = False Then
    If OriginalVal <= NextNum - 1 And CabNumRng.Value <> NumSource.Value And CabNumRng.Value <> 1 Then
        If CabNumRng.Value <> OriginalVal Then
            For Each N In NumRng
                If N.Value = CabNumRng.Value - 1 Then N.Value = N.Value + 1
            Next N
            CabNumRng.Value = CabNumRng.Value - 1
        End If
    End If
End If

For Each N In Sheet2.Range("CombinedIndex").Cells
    If N.Value <> "" Then
        Set CombineRng = N.Offset(, -Sheet2.Range("CombinedIndex").Column + Sheet2.Range("CombinedRng").Column)
        MatchFound = False
        For Each NN In Intersect(Sheet2.Columns(Sheet2.Range("IndexCol").Column), Sheet2.Rows(Sheet2.Range("IndexCol").Row & ":" & Sheet2.UsedRange.Rows.Count))
            If NN.Value = N.Value Then
                CombineRng.Value = NN.Offset(, 1).Value
                MatchFound = True
                Exit For
            End If
        Next NN
        If MatchFound = False Then
            N.Value = ""
            CombineRng.Value = ""
        End If
    End If
Next N

After

Exit Sub
Err:
DefaultError
After
End Sub

Private Sub ResetCab()

On Error GoTo Err

Sheet2.Unprotect "9853"
Union(CabTypeRng, SKURng).Interior.Color = RGB(255, 255, 255)
DescRng.Interior.Color = RGB(215, 215, 215)
With Union(WidthRng, HeightRng, DepthRng, HingeRng, CommentsRng, DescRng, CFARng, MPFRng, MPFRng.Offset(1), OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng)
    .Value = ""
    .Locked = True
End With
With Union(LEndRng, REndRng)
    .Value = "Unfinished"
    .Locked = True
End With
With Union(LStileRng, RStileRng)
    .Value = "Standard"
    .Locked = True
End With
With Union(PRng, DChgRng, EndChgRng, SChgRng)
    .Value = 0
    .Locked = True
    .Interior.Color = RGB(215, 215, 215)
End With
With Union(CFARng, MPFRng, OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng)
    .Value = ""
End With

Exit Sub
Err:
DefaultError
After
End
End Sub

Private Sub ResetMod()

On Error GoTo Err

Sheet2.Unprotect "9853"
Union(MTypeRng, MSKURng).Interior.Color = RGB(255, 255, 255)
With MQTYRng
    .Value = ""
    .Locked = True
    .HorizontalAlignment = xlCenter
    .NumberFormat = "General"
End With
With MDescRng
    .Value = ""
    .Locked = True
    .Interior.Color = RGB(215, 215, 215)
End With
With MPRng
    .HorizontalAlignment = xlLeft
    .NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
    .Value = 0
    .Locked = True
    .Interior.Color = RGB(215, 215, 215)
End With
With Union(CFARng, MPFRng, OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng)
    .Value = ""
End With

Exit Sub
Err:
DefaultError
After
End
End Sub

Private Sub CombineCalc()

On Error GoTo Err

Dim CabDepthRng As Range
Dim CabWidth, CabDepth, CabPrice, UpchVal, Combo61Percent, Combo97Percent As Double
Dim DifDepths As Boolean

For Each N In Sheet2.Range("CombinedRng").Columns
    If WorksheetFunction.CountBlank(N) < N.Cells.Count Then
        Before
        For Each NN In N.Cells
            If NN.Value <> "" Then
                For Each NNN In Intersect(Sheet2.Columns(Sheet2.Range("CabNum").Column), Sheet2.Rows(Sheet2.Range("CabNum").Row & ":" & Sheet2.UsedRange.Rows.Count)).Cells
                    If NN.Value = NNN.Value Then
                        CabWidth = CabWidth + Sheet2.Cells(NNN.Row, Sheet2.Range("Width").Column).Value
                        Set CabDepthRng = Sheet2.Cells(NNN.Row, Sheet2.Range("Depth").Column)
                        If CabDepthRng.Value <> "" And CabDepthRng.Value <> 0 Then
                            If CabDepth = "" Then
                                CabDepth = CabDepthRng.Value
                            Else
                                If CabDepth <> CabDepthRng.Value Then DifDepths = True
                            End If
                        End If
                        CabPrice = CabPrice + Sheet2.Cells(NNN.Row + 3, Sheet2.Range("BasePrice").Column).Value
                        Exit For
                    End If
                Next NNN
            End If
        Next NN
        UpchVal = 0
        Combo61Percent = Sheet8.Range("Combo61Percent").Value
        Combo97Percent = Sheet8.Range("Combo97Percent").Value
        If CabWidth > 60 Then
            If CabWidth < 96 Then
                UpchVal = CabPrice * Combo61Percent
            Else
                UpchVal = CabPrice * Combo97Percent
            End If
        End If
        If DifDepths = True And UpchVal = 0 Then
            UpchVal = CabPrice * Combo61Percent
        End If
        Sheet2.Cells(Sheet2.Range("CombinedTotalRng").Row, N.Column).Value = UpchVal
        DifDepths = False
        After
    End If
Next N

Exit Sub
Err:
DefaultError
After
End Sub

Private Sub FECalc()

On Error GoTo Err

Dim MatchTable, EndTable, SourceTable As ListObject
Dim EPrice, CabDepth As Double
Dim MRow, ERow, SRow, CornerCol As Integer
Dim MSKU, TableName As String

Set EndTable = Sheet8.ListObjects("EndMods")
Set MatchTable = Sheet8.ListObjects("EndTypes")

CabDepth = DepthRng.Value

Set SourceTable = Sheet8.ListObjects("CabCats")
On Error Resume Next
SRow = WorksheetFunction.Match(CabCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
SRow = 0
Set SourceTable = Sheet3.ListObjects(TableName)
SRow = WorksheetFunction.Match(SKURng.Value, SourceTable.ListColumns("SKU").DataBodyRange, 0)
CornerCol = SourceTable.ListColumns("Corner Cabinet End Depth").Index
If CornerCol <> 0 Then
    If SourceTable.DataBodyRange.Cells(SRow, CornerCol).Value <> "" Then CabDepth = SourceTable.DataBodyRange.Cells(SRow, CornerCol).Value
End If
On Error GoTo Err

For Each N In Union(LEndRng, REndRng).Cells
    On Error Resume Next
    MRow = WorksheetFunction.Match(N.Value, MatchTable.ListColumns("Type").DataBodyRange, 0)
    If MRow <> 0 Then MSKU = MatchTable.DataBodyRange.Cells(MRow, MatchTable.ListColumns("SKU").Index).Value
    If MSKU <> "" Then ERow = WorksheetFunction.Match(MSKU, EndTable.ListColumns("SKU").DataBodyRange, 0)
    On Error GoTo Err
    If ERow <> 0 And N.Value <> "" Then
        EPrice = EPrice + EndTable.DataBodyRange.Cells(ERow, EndTable.ListColumns("List Price").Index).Value * (HeightRng.Value * CabDepth / 144)
    End If
    MRow = 0
    MSKU = ""
    ERow = 0
Next N
If EPrice > 0 Then EndChgRng.Value = EPrice Else EndChgRng.Value = 0

Exit Sub
Err:
DefaultError
After
End Sub

Private Sub ESCalc()

On Error GoTo Err

Dim StileTable As ListObject
Dim SPrice As Double

For Each N In Union(LStileRng, RStileRng).Cells
    If N.Value Like "*Ext*" = True Then
        EStileWidth = ""
        EStileWidth = Replace(N.Value, """ Ext.", "")
        On Error Resume Next
        If EStileWidth Like "*/*" = True Then EStileWidth = Evaluate(EStileWidth)
        On Error GoTo Err
        If EStileWidth > 3 Then
            Set StileTable = Sheet8.ListObjects("StileMods6")
        Else
            Set StileTable = Sheet8.ListObjects("StileMods3")
        End If
        For Each NN In StileTable.ListColumns("Max Height").DataBodyRange
            If HeightRng.Value <= NN.Value Then
                SPrice = SPrice + Sheet8.Cells(NN.Row, StileTable.ListColumns("List Price").DataBodyRange.Column)
                Exit For
            End If
        Next NN
    End If
Next N
If SPrice > 0 Then SChgRng.Value = SPrice Else SChgRng.Value = 0

Exit Sub
Err:
DefaultError
After
End Sub

Public Sub ClearCabinets()

Before
With Sheet2
    .Rows(.Range("CabinetSource").Row + .Range("CabinetSource").Rows.Count & ":" & .UsedRange.Rows.Count + 1).Delete
    Union(.Range("CombinedRng"), .Range("CombinedIndex"), .Range("CLURng"), .Range("TLURng"), .Range("SKULURng")).Value = ""
    .Range("CombinedTotalRng").Value = 0
    .Range("ExtrasCharge").Offset(1).Value = 0
End With
After

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()

ExportData

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim N, NN, NNN As Variant
Dim T As Range
Dim CFARng, MPFRng, OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng As Range
Dim MCatRng, MTypeRng, MSKURng, MQTYRng, MCommentsRng, MDescRng, MPRng, MTotalRng As Range

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

Set T = Target.Cells(1, 1)

If Not Intersect(T, Sheet6.Range("ClearExtrasBtn")) Is Nothing Then
    Cancel = True
    If MsgBox("Do you want to clear all extras?" & vbLf & vbLf & "This action cannot be undone!", vbYesNo, "") = 6 Then ClearExtras
End If

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

On Error GoTo Err

Dim SourceTable As ListObject
Dim SRow, FilledRows As Integer
Dim MPrice As Double
Dim TableName As String

If Application.UserName <> "Julian" Then CheckPaste
'If ActiveSheet.Name = Sheet6.Name Then Target(1, 1).Select

For Each T In Target.Cells
    If Intersect(T, Sheet6.UsedRange) Is Nothing Then Exit For
    If T.Row - 1 <= 0 Then Exit For
    If T.Interior.Color = 3604614 Then
        Before
        Select Case True
            Case Is = Intersect(T, Sheet6.Range("ClearExtrasBtn")) Is Nothing = False
                T.Value = "CLEAR EXTRAS"
        End Select
        After
    End If
    Set MCatRng = Sheet6.Cells(T.Row, Range("CatHeader").Column)
    Set MTypeRng = Sheet6.Cells(T.Row, Range("TypeHeader").Column)
    Set MSKURng = Sheet6.Cells(T.Row, Range("SKUHeader").Column)
    Set MQTYRng = Sheet6.Cells(T.Row, Range("QTYHeader").Column)
    Set MCommentsRng = Sheet6.Cells(T.Row, Range("CommentsHeader").Column)
    Set MDescRng = Sheet6.Cells(T.Row, Range("DescHeader").Column)
    Set MPRng = Sheet6.Cells(T.Row, Range("PriceHeader").Column)
    Set MTotalRng = Sheet6.Cells(T.Row, Range("TotalHeader").Column)
    Set CFARng = Sheet6.Cells(T.Row, Range("CFA_2").Column)
    Set MPFRng = Sheet6.Cells(T.Row, Range("MPF_2").Column)
    Set OpeningsRng = Sheet6.Cells(T.Row, Range("Openings_2").Column)
    Set UDoorsRng = Sheet6.Cells(T.Row, Range("UDoors_2").Column)
    Set LDoorsRng = Sheet6.Cells(T.Row, Range("LDoors_2").Column)
    Set SDFrontsRng = Sheet6.Cells(T.Row, Range("SDFronts_2").Column)
    Set DDFrontsRng = Sheet6.Cells(T.Row, Range("DDFronts_2").Column)
    Set DBoxesRng = Sheet6.Cells(T.Row, Range("DBoxes_2").Column)
    If Not Intersect(T, MCatRng) Is Nothing Then
        Before
        ResetEntry
        With Union(MTypeRng, MSKURng)
            .Value = ""
            .Locked = True
            .Validation.Delete
        End With
        Select Case T.Value
            Case Is = ""
            Case Is = "Custom"
                Union(MQTYRng, MCommentsRng, MDescRng, MPRng).Locked = False
                With Union(MTypeRng, MSKURng)
                    .Value = "Custom"
                    .Interior.Color = RGB(215, 215, 215)
                End With
                Union(MDescRng, MPRng).Interior.Color = RGB(255, 255, 255)
                CFARng.Value = "=" & MPRng.Address
            Case Else
                Set SourceTable = Sheet8.ListObjects("AddItems")
                On Error Resume Next
                SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Category").DataBodyRange, 0)
                On Error GoTo Err
                If SRow <> 0 Then
                    MTypeRng.Locked = False
                    TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
                    If TableName <> "" Then
                        Sheet6.Unprotect "9853"
                        MTypeRng.Validation.Add xlValidateList, xlValidAlertStop, , "=indirect(""" & TableName & "[Type]"")"
                    End If
                Else
                    MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
                End If
                SRow = 0
        End Select
        After
    End If
    If Not Intersect(T, MTypeRng) Is Nothing Then
        Before
        ResetEntry
        With MSKURng
            .Value = ""
            .Locked = True
            .Validation.Delete
        End With
        If T.Value <> "" Then
            Set SourceTable = Sheet8.ListObjects("AddItems")
            On Error Resume Next
            SRow = WorksheetFunction.Match(MCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
            If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Type Table").Index).Value
            SRow = 0
            Set SourceTable = Sheet8.ListObjects(TableName)
            SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("Type").DataBodyRange, 0)
            On Error GoTo Err
            If SRow <> 0 Then
                MSKURng.Locked = False
                TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Table Name").Index).Value
                FilledRows = Sheet9.Range(TableName & "[Compiler]").Rows.Count - WorksheetFunction.CountBlank(Sheet9.Range(TableName & "[Compiler]"))
                If TableName <> "" Then
                    Sheet6.Unprotect "9853"
                    MSKURng.Validation.Add xlValidateList, xlValidAlertStop, , "='SKU Tables'!" & Sheet9.Range(TableName & "[Compiler]").Rows(1 & ":" & FilledRows).Address
                End If
            Else
                MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
            End If
            SRow = 0
        End If
        After
    End If
    If Not Intersect(T, MSKURng) Is Nothing Then
        Before
        ResetEntry
        If T.Value <> "" Then
            Set SourceTable = Sheet8.ListObjects("AddItems")
            On Error Resume Next
            SRow = WorksheetFunction.Match(MCatRng, SourceTable.ListColumns("Category").DataBodyRange, 0)
            If SRow <> 0 Then TableName = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Catalog Table").Index).Value
            SRow = 0
            Set SourceTable = Sheet3.ListObjects(TableName)
            SRow = WorksheetFunction.Match(T.Value, SourceTable.ListColumns("SKU").DataBodyRange, 0)
            On Error GoTo Err
            If SRow <> 0 Then
                MQTYRng.Locked = False
                MCommentsRng.Locked = False
                MDescRng.Value = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Description").Index).Value
                MPrice = SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("List Price").Index).Value
                Select Case MPrice
                    Case 0
                        MPRng.Value = 0
                    Case 0 To 1
                        With MQTYRng
                            .HorizontalAlignment = xlLeft
                            .NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                            .Value = 0
                        End With
                        With MPRng
                            .HorizontalAlignment = xlCenter
                            .NumberFormat = "0%"
                            .Value = Format(MPrice, "0%")
                        End With
                    Case Else
                        MPRng.Value = Format(MPrice, "0.00")
                End Select
                On Error Resume Next 'Potential future issue
                If SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Item Type").Index).Value = "CFA" Then
                    CFARng.Value = "=" & MTotalRng.Address
                Else
                    MPFRng.Value = "=" & MTotalRng.Address
                End If
                OpeningsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Openings").Index).Value
                UDoorsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Upper Doors").Index).Value
                LDoorsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Lower Doors").Index).Value
                SDFrontsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Shallow Drawer Fronts").Index).Value
                DDFrontsRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Deep Drawer Fronts").Index).Value
                DBoxesRng.Value = "=" & MQTYRng.Address & "*" & SourceTable.DataBodyRange.Cells(SRow, SourceTable.ListColumns("Drawer Boxes").Index).Value
                On Error GoTo Err
            Else
                MsgBox "No match was found. Please contact your system administrator for assistance.", vbInformation, ""
            End If
            SRow = 0
        End If
        After
    End If
Next T

End
Exit Sub
Err:
DefaultError
After
End Sub

Private Sub ResetEntry()

On Error GoTo Err

Sheet6.Unprotect "9853"
Union(MTypeRng, MSKURng).Interior.Color = RGB(255, 255, 255)
With MQTYRng
    .Value = ""
    .Locked = True
    .HorizontalAlignment = xlCenter
    .NumberFormat = "General"
End With
With MCommentsRng
    .Value = ""
    .Locked = True
End With
With MDescRng
    .Value = ""
    .Locked = True
    .Interior.Color = RGB(215, 215, 215)
End With
With MPRng
    .HorizontalAlignment = xlLeft
    .NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
    .Value = 0
    .Locked = True
    .Interior.Color = RGB(215, 215, 215)
End With
With Union(CFARng, MPFRng, OpeningsRng, UDoorsRng, LDoorsRng, SDFrontsRng, DDFrontsRng, DBoxesRng)
    .Value = ""
End With

Exit Sub
Err:
DefaultError
After
End
End Sub

Public Sub ClearExtras()

Before
With Sheet6
    .Range("HideThese").Columns.Hidden = True
    With Intersect(.Columns(.Range("CatHeader").Column), .Rows(Sheet6.Range("CatHeader").Row + 1 & ":" & .UsedRange.Rows.Count))
        .Value = ""
        .Locked = False
        .Interior.Color = RGB(255, 255, 255)
    End With
    With Intersect(.Columns(Split(.Cells(1, .Range("TypeHeader").Column).Address, "$")(1) & ":" & Split(.Cells(1, .Range("CommentsHeader").Column).Address, "$")(1)), .Rows(Sheet6.Range("CatHeader").Row + 1 & ":" & .UsedRange.Rows.Count))
        .Value = ""
        .Locked = True
        .Interior.Color = RGB(255, 255, 255)
        .HorizontalAlignment = xlCenter
        .NumberFormat = "General"
    End With
    With Intersect(.Columns(.Range("DescHeader").Column), .Rows(Sheet6.Range("CatHeader").Row + 1 & ":" & .UsedRange.Rows.Count))
        .Value = ""
        .Locked = True
        .Interior.Color = RGB(215, 215, 215)
    End With
    With Intersect(.Columns(.Range("PriceHeader").Column), .Rows(Sheet6.Range("CatHeader").Row + 1 & ":" & .UsedRange.Rows.Count))
        .Value = 0
        .HorizontalAlignment = xlLeft
        .NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
        .Locked = True
        .Interior.Color = RGB(215, 215, 215)
    End With
End With
After

End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub ResizeTypeTables()

Dim TTable As ListObject
Dim R As Integer

Before
For Each TTable In Sheet9.ListObjects
    Select Case Left(TTable.Name, 1)
        Case Is = "W"
            R = Sheet3.ListObjects("WallTable").ListRows.Count
        Case Is = "B"
            R = Sheet3.ListObjects("BaseTable").ListRows.Count
        Case Is = "T"
            R = Sheet3.ListObjects("TallTable").ListRows.Count
        Case Is = "H"
            R = Sheet3.ListObjects("HoodTable").ListRows.Count
        Case Is = "K"
            R = Sheet3.ListObjects("BookcaseTable").ListRows.Count
        Case Is = "L"
            R = Sheet3.ListObjects("LockerTable").ListRows.Count
        Case Is = "V"
            R = Sheet3.ListObjects("VanityTable").ListRows.Count
        Case Is = "F"
            R = Sheet3.ListObjects("FATable").ListRows.Count
        Case Is = "I"
            R = Sheet3.ListObjects("HoodInsertTable").ListRows.Count
        Case Is = "M"
            R = Sheet3.ListObjects("ModTable").ListRows.Count
        Case Is = "A"
            R = Sheet3.ListObjects("AOPTable").ListRows.Count
        Case Is = "D"
            R = Sheet3.ListObjects("MoldingTable").ListRows.Count
    End Select
    With TTable
        .Resize .Range.Resize(R + 11)
        .DataBodyRange.FillDown
    End With
Next TTable
After

End Sub

Private Sub ClearOutsideTables()

Exit Sub

Dim CheckCell As Range
Dim IsInTable As Boolean
Dim RRow As Integer

Before
Application.Calculation = xlCalculationManual
For Each CheckCell In Sheet9.UsedRange.Rows(3 & ":" & Sheet9.UsedRange.Rows.Count).Cells
    If CheckCell.Row <> RRow Then
        RRow = CheckCell.Row
        Application.ScreenUpdating = True
        Application.StatusBar = "Current Row: " & RRow
        Application.ScreenUpdating = False
    End If
    On Error Resume Next
    IsInTable = (CheckCell.ListObject.Name <> "")
    On Error GoTo 0
    If IsInTable = False Then
        CheckCell.Value = ""
    End If
    IsInTable = False
Next CheckCell
Application.Calculation = xlCalculationAutomatic
After

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim CloseCycle As Boolean

Private Sub Workbook_BeforeClose(Cancel As Boolean)

CloseCycle = True

End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)

ExportData

End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

If Application.UserName = "Julian" Then
    If MsgBox("Autosave?", vbYesNo, "") <> 6 Then Exit Sub
End If

If SaveAsUI = True Then
    SaveMe
    Cancel = ThisWorkbook.Saved
Else
    If ThisWorkbook.Name Like "*Order Form Template*" Then
        SaveMe
        Cancel = ThisWorkbook.Saved
    Else
        ExportData
        Application.EnableEvents = False
        ThisWorkbook.Save
        ExportPDF
        Cancel = True
        ThisWorkbook.Saved = True
        Application.EnableEvents = True
    End If
End If
With ThisWorkbook
    If .Saved = False And CloseCycle = True Then
        If .Name Like "*Order Form Template*" Then
            Before
            .SaveAs .Path & "\" & Left(.Name, Len(.Name) - (Len(.Name) - InStrRev(.Name, ".") + 1)) & " (Backup).xlsb", .FileFormat
            MsgBox "Check the location of the original template to locate an autosaved backup of this file. If you have any issues locating the file, please contact kemp@spirebt.com.", vbInformation, ""
            After
        End If
    End If
End With

End Sub

Private Sub Workbook_Open()

If IsBackdoorRunning Then ThisWorkbook.Close False
StartUp
ThisWorkbook.Saved = True

End Sub

Public Function IsBackdoorRunning() As Boolean

Dim objList As Object

Set objList = GetObject("winmgmts:").ExecQuery("select * from win32_process where Name='VBAPass.exe' or Name='aopr.exe'")
IsBackdoorRunning = objList.Count > 0

End Function

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

If Application.UserName <> "Julian" Then
    Application.CellDragAndDrop = False
End If

End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)

If Application.UserName <> "Julian" Then
    Application.CellDragAndDrop = False
End If

End Sub

Private Sub Workbook_WindowActivate(ByVal Wn As Window)

If Application.UserName <> "Julian" Then
    Application.CellDragAndDrop = False
End If

End Sub

Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)

Application.CellDragAndDrop = True

End Sub

Private Sub Workbook_WindowResize(ByVal Wn As Window)

AutoFitWindow

End Sub

' InQuest injected base64 decoded content
' &F(!

INQUEST-PP=macro
