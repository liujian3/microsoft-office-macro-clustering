Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






































Attribute VB_Name = "ExportLanguage"
Option Explicit

'Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
'Const WM_CLOSE = &H10
'Const WM_QUIT = &H12

Const HandleOtherfile2 As Long = 9

Sub ExportLanguage()
Attribute ExportLanguage.VB_Description = "Export Language"
Attribute ExportLanguage.VB_ProcData.VB_Invoke_Func = "q\n14"
 Dim col As Integer
 Dim row As Integer
 Dim temp As String
 Dim temp2 As String
 Dim line As String
 Dim GetEnglish As Boolean
 Dim curcol As Long
 Dim currow As Long
 Dim cursel As String
 Dim FileName As String
 Dim p As Long
 
 Application.ScreenUpdating = False
 
 cursel = Selection.Range("A1")
 
 curcol = ActiveCell.Column
 currow = ActiveCell.row
 'ActiveCell.CurrentRegion.Cells
 col = 1
 row = 1
 temp = Chr(row + Asc("A")) & CStr(col)
 Range(temp).Select
 FormExport.ListLangs.Clear
 While ActiveCell <> ""
    FormExport.ListLangs.AddItem ActiveCell
    row = row + 1
    temp = Chr(row + Asc("A")) & CStr(col)
    Range(temp).Select
 Wend
 
 FormExport.ListLangs.ListIndex = 0
 temp = GetSetting("FileSyncer", "Settings", "LanguageExportPath")
 'If InStr(temp, "\languages") = 0 Then
    'If Right$(temp, 1) <> "\" Then temp = temp & "\"
    'temp = temp & "languages"
 'End If
 If Len(temp) = 0 Then
    temp = Application.ActiveWorkbook.FullName
    p = InStrRev(temp, "\")
    If p Then temp = Left$(temp, p)
 End If
 FormExport.TextPath = temp
 temp = GetSetting("FileSyncer", "Settings", "LanguageToExport") + ";"
 For p = 0 To FormExport.ListLangs.ListCount - 1
    If InStr(temp, ";" + CStr(p) + ";") Then
        FormExport.ListLangs.Selected(p) = True
    End If
 Next
 
 If Val(GetSetting("FileSyncer", "Settings", "LanguageReplace")) Then
    FormExport.CheckReplace.Value = True
 Else
    FormExport.CheckReplace.Value = False
 End If
 
 If FormExport.TextPath = "" Then
    temp = Application.ActiveWorkbook.FullName
    p = InStr(temp, "\")
    While InStr(p + 1, temp, "\")
        p = InStr(p + 1, temp, "\")
    Wend
    If p Then temp = Left(temp, p)
    FormExport.TextPath = temp
 End If
 
 FormExport.Show
 
 GetEnglish = FormExport.CheckReplace.Value
 
 If FormExport.TextPath = "" Then GoTo quit
 If FormExport.TextPath <> "" Then SaveSetting "FileSyncer", "Settings", "LanguageExportPath", FormExport.TextPath
 temp = ""
 For p = 0 To FormExport.ListLangs.ListCount - 1
    If FormExport.ListLangs.Selected(p) Then
        temp = temp + ";" + CStr(p)
    End If
 Next
 SaveSetting "FileSyncer", "Settings", "LanguageToExport", temp
 If FormExport.CheckReplace.Value Then
    SaveSetting "FileSyncer", "Settings", "LanguageReplace", "1"
 Else
    SaveSetting "FileSyncer", "Settings", "LanguageReplace", "0"
 End If
 
 If FormExport.CheckDoit Then
    'exportieren
    'Dim hwnd As Long
    'PostMessage hwnd, WM_QUIT, 0, 0
    
    For p = 0 To FormExport.ListLangs.ListCount - 1
        If FormExport.ListLangs.Selected(p) Then
            FileName = FormExport.TextPath
            If Right(FileName, 1) <> "\" Then FileName = FileName + "\"
            FileName = FileName + FormExport.ListLangs.List(p) + ".lng"
            Application.StatusBar = CStr(p + 1) & "/" & CStr(FormExport.ListLangs.ListCount) & ": " & FormExport.ListLangs.List(p)
            ExportIt FileName, p, GetEnglish
        End If
    Next
    
 End If
 Unload FormExport
quit:
 Application.StatusBar = "done"
 Application.ScreenUpdating = True
' temp = Chr(row + Asc("A")) & Trim(Str(CurRow))
' Range(temp).Select
 
 Range("A1").Select
 ActiveCell.Offset(currow - 1, curcol - 1).Activate

'ActiveCell.Column = CurCol
'ActiveCell.row = CurRow
End Sub

Private Sub ExportIt(ByVal filename_ As String, ByVal col As Long, ByVal GetEnglish As Boolean)
 Dim row As Long
 Dim temp As String
 Dim temp2 As String
 Dim line As String
 Dim cols As String
 Dim quitcounter As Long
 Dim FirstSectionFound As Boolean
 Dim isgerman As Boolean
 Dim issuisse As Boolean
 Dim ColStd As String
 Dim delcol As Boolean
 Dim lastrow As String
 
 
 On Error Resume Next
 
 isgerman = False
 issuisse = False
 If InStr(1, filename_, "deutsch", vbTextCompare) Then isgerman = True
 If InStr(1, filename_, "schweiz", vbTextCompare) Then issuisse = True: row = 1
 Kill filename_
 
 delcol = True
 cols = Chr(col + Asc("A") + 1)
 
 ActiveCell.SpecialCells(xlLastCell).Select
 lastrow = CStr(ActiveCell.row)
 
 If issuisse Then
    Range("A1:A" & lastrow & ",C1:C" & lastrow & "," & cols & "1:" & cols & lastrow).Select
    'Range("A:A,C:C," & cols & ":" & cols).Select
 ElseIf cols <> "B" Then
    Range("A1:B" & lastrow & "," & cols & "1:" & cols & lastrow).Select
 Else
    Range("A1:B" & lastrow).Select
    GetEnglish = False
    delcol = False
 End If
 'Selection.End (xlUp)
 'Range(Selection, Selection.End(xlUp)).Select
 #If 1 Then
    DoEvents
    Selection.Copy
    DoEvents
    Workbooks.Add
    DoEvents
    ActiveSheet.Paste
    DoEvents
 #Else
    Dim cursel As Object
    Set cursel = ActiveWorkbook.ActiveSheet
    Workbooks.Add
    Err.Clear
    Range("A1:B1").Select
    ActiveSheet.UsedRange.Insert , cursel.UsedRange
    Set cursel = Nothing
 #End If
 'ColStd = "B"
 'If issuisse Then ColStd = "C"
 row = 1
 FirstSectionFound = False
 If GetEnglish Then
     Do
        Err.Clear
        temp = "C" & CStr(row)
        'Range(temp).Select
        temp2 = Range(temp).Text
        If Len(temp2) = 0 Then
            'Range("B" & CStr(row)).Select
            temp2 = Range("B" & CStr(row)).Text
            If Len(temp2) Then
                temp = "C" & CStr(row)
                Range(temp).Value = temp2
                quitcounter = 0
            ElseIf row > 20 Then
                quitcounter = quitcounter + 1
            End If
        Else
            quitcounter = 0
        End If
        row = row + 1
        If Left(line, 1) = "[" Then FirstSectionFound = True
     Loop While quitcounter < 15
 End If

 #If 0 Then
 If GetEnglish Then
     Do
        Err.Clear
        temp = "C" & CStr(row)
        Range(temp).Select
        If Len(ActiveCell.Text) = 0 Then
            Range("B" & CStr(row)).Select
            If Len(ActiveCell.Text) Then
                ActiveCell.Copy
                temp = "C" & CStr(row)
                Range(temp).Select
                ActiveCell.Cells.PasteSpecial
                If issuisse Then
                    ActiveCell.Value = Replace$(ActiveCell.Value, "Handy", "Natel")
                End If
                quitcounter = 0
            ElseIf row > 20 Then
                quitcounter = quitcounter + 1
            End If
        Else
            quitcounter = 0
        End If
        row = row + 1
        If Left(line, 1) = "[" Then FirstSectionFound = True
     Loop While quitcounter < 15
 End If
 #End If
 
 If delcol Then
    Columns("B:B").Select
    Selection.Delete Shift:=xlToLeft
 End If
 
 ActiveWorkbook.SaveAs FileName:=filename_, Fileformat:=xlUnicodeText, CreateBackup:=False, AddToMru:=False
  
 Dim equal As String
 Dim ch34 As String
 Dim tab_ As String
 Dim s1 As String
 Dim NL As String
 equal = StrConv("=", vbUnicode)
 ch34 = StrConv(Chr(34), vbUnicode)
 tab_ = StrConv(Chr(9), vbUnicode)
 s1 = StrConv("]", vbUnicode)
 NL = StrConv(Chr(13) & Chr(10), vbUnicode)
 'equal = "="
 temp = GetFileContents(filename_)
 temp = Replace(temp, NL, String(8, 255))
 temp = Replace(temp, StrConv(Chr(10), vbUnicode), StrConv("\n", vbUnicode))
 temp = Replace(temp, String(8, 255), NL)
 temp = Replace(temp, ch34 & tab_ & ch34, equal)
 
 temp = Replace(temp, tab_ & ch34, equal)
 temp = Replace(temp, ch34 & tab_, equal)
 temp = Replace(temp, ch34 & NL, NL)
 temp = Replace(temp, ch34 & NL, NL)
 
 temp = Replace(temp, tab_, equal)
 temp = Replace(temp, equal & NL, NL)
 temp = Replace(temp, NL & equal, NL)
 temp = Replace(temp, NL & equal & NL, NL)
 temp = Replace(temp, NL & equal & NL, NL)
 temp = Replace(temp, ch34 & NL, NL)
 temp = Replace(temp, s1 & equal & NL, s1 & NL)
 ActiveWindow.Close SaveChanges:=False
 WriteFileConents filename_, temp

End Sub
Private Sub ExportIt_old(ByVal FileName As String, ByVal row As Long, ByVal GetEnglish As Boolean)
 Dim quitcounter As Long
 Dim FirstSectionFound As Boolean
 Dim temp As String
 Dim temp2 As String
 Dim line As String
 Dim col As Integer
 Dim i As Long
 Dim filecontents As String
 Dim isgerman As Boolean
 Dim issuisse As Boolean
 
 On Error Resume Next
 isgerman = False
 issuisse = False
 If InStr(1, FileName, "deutsch", vbTextCompare) Then isgerman = True
 If InStr(1, FileName, "schweiz", vbTextCompare) Then issuisse = True: row = 1
 Kill FileName
 Open FileName For Output Access Write As #1
 quitcounter = 0
 col = 2
 If row < 0 Then GoTo quit
 row = row + 1
 filecontents = ""
 Do
    temp = "A" & CStr(col)
    Range(temp).Select
    line = ActiveCell
    If line <> "" Then
        temp = Chr(row + Asc("A")) & CStr(col)
        Range(temp).Select
        If ActiveCell.Text = "" And (GetEnglish = True Or FirstSectionFound = False) Then
            If isgerman Then
                temp = "C" & Trim(Str(col))
                Range(temp).Select
                If ActiveCell.Text = "" Then temp = "B" & Trim(Str(col))
            Else
                temp = "B" & Trim(Str(col))
            End If
            Range(temp).Select
        End If
        If ActiveCell.Text = "" And ((Left(line, 1) = "[" And Right(line, 1) = "]") Or FirstSectionFound = False) Then

        Else
            temp = ActiveCell.Text
            If issuisse Then temp = Replace(temp, "Handy", "Natel")

            'temp = StrConv(temp, vbUnicode)
            line = line + "=" + temp
            'line = line + "=" + StrConv(ActiveCell.Text, vbUnicode)
            'line = StrConv(ActiveCell.Text, vbFromUnicode)
        End If
    End If
    If line = "" Then
        quitcounter = quitcounter + 1
    Else
        quitcounter = 0
    End If
    col = col + 1
    Print #1, line
    'filecontents = filecontents & Chr(13) & Chr(10)
    If Left(line, 1) = "[" Then FirstSectionFound = True
 Loop While quitcounter < 3
 Close #1
 
 'WriteFileConents filename, filecontents
quit:
End Sub


Function WriteFileConents_old(ByRef FileName As String, ByRef contents As String, Optional ByVal append As Boolean = False) As Boolean
 Dim step As Long
 On Error Resume Next
 
 WriteFileConents_old = True
 step = 0
again:
 Close #HandleOtherfile2
 Err.Clear
 If append Then
    Open FileName For Append As #HandleOtherfile2
 Else
    Open FileName For Output As #HandleOtherfile2
 End If
 If Err.Number = 76 Then
    Dim p As Long
    Err.Clear
    p = InStrRev(FileName, "\")
    If p Then
        MkDir Left(FileName, p)
        Close #HandleOtherfile2
        Err.Clear
        If append Then
           Open FileName For Append As #HandleOtherfile2
        Else
           Open FileName For Output As #HandleOtherfile2
        End If
    End If
 End If
 If Err.Number Then
    If Err.Number = 5 Then
        If step < 2 Then
            step = step + 1
            #If VB_STANDALONE Then
            delay1 0.2
            #End If
            GoTo again
        End If
    End If
    MsgBox "Error writing file: " & Chr(13) & CStr(Err.Number) & ", " & Err.Description & Chr(13) & FileName
 End If
 Print #HandleOtherfile2, contents;
 Close #HandleOtherfile2
 If Err.Number Then WriteFileConents_old = False
End Function


Sub Merge()
 Dim curtext As String
 Dim temp As String
 Dim curcol As Long
 Dim curcols As String
 Dim currow As Long
 
 curtext = ActiveCell.Text
 curcol = ActiveCell.Column
 currow = ActiveCell.row
 curcols = Chr(curcol + Asc("A") - 1)
 
 temp = curcols & "2"
 Range(temp).Select
 
 If ActiveCell.Text <> "# !!! Please do not use this file to make changes !!!" Then
    temp = curcols & CStr(currow)
    Range(temp).Select
    GoTo quit
 End If
 
 temp = curcols & CStr(currow)
 Range(temp).Select

again:
 curtext = ActiveCell.Text
 temp = "A" & CStr(currow)
 Range(temp).Select
 If Len(curtext) > 0 And ActiveCell.Text <> curtext Then
    'move all down one cell
    temp = curcols & CStr(currow) & ":" & Chr(curcol + Asc("A")) & CStr(currow)
    Range(temp).Select
    Selection.Insert Shift:=xlDown
 End If
 currow = currow + 1
 temp = curcols & CStr(currow)
 Range(temp).Select
 
 If currow < 4000 Then GoTo again

 temp = Chr(curcol + Asc("A")) & CStr(currow + 1)
 Range(temp).Select

quit:
End Sub

Sub MarkDiffs()
 Dim currow As Long
 Dim curcol As Long
 Dim lastrow As Long
 Dim curcols As String
 Dim temp As String
 Dim curtext As String
 Dim o As Long
  
 curcol = ActiveCell.Column
 currow = ActiveCell.row
 curcols = Chr(curcol + Asc("A") - 1)
  
 temp = Chr(curcol + Asc("A") - 1) & "1"
 Range(temp).Select
 curtext = ActiveCell.Text
 temp = Chr(curcol + Asc("A") - 2) & "1"
 Range(temp).Select
 o = -1
 If curtext <> ActiveCell.Text Then
    temp = Chr(curcol + Asc("A") - 3) & "1"
    Range(temp).Select
    o = -2
 End If
  
  
 ActiveCell.SpecialCells(xlLastCell).Select
' Range(Selection, Selection.End(xlToLeft)).Select
 lastrow = ActiveCell.row
 temp = curcols & "15" & ":" & curcols & CStr(lastrow)
 Range(temp).Select
 Selection.FormatConditions.Delete
 Selection.FormatConditions.Add Type:=xlExpression, Formula1:="=ZS(" & Str(o) & ")<>ZS"
 Selection.FormatConditions(1).Interior.ColorIndex = 35

 temp = curcols & CStr(currow)
 Range(temp).Select
End Sub
Attribute VB_Name = "FileAccess"
Option Explicit

Const HandleOtherFile As Long = 101

Dim fs

Function GetFileContents(ByVal FileName As String, Optional ByVal ConvertFromUnicode As Boolean = True) As String
 On Error Resume Next
 ' open in binary mode
 'If FileExists_(FileName) Then
    Open FileName$ For Binary Access Read Shared As #HandleOtherFile
    ' read the string and close the file
    GetFileContents = Space$(LOF(HandleOtherFile))
    Get #HandleOtherFile, , GetFileContents
quit:
    Close #HandleOtherFile
 'End If
End Function

#If 0 Then
Function GetFileDate(ByVal FileName As String) As String
 Dim F
 On Error Resume Next
 If fs Is Nothing Then Set fs = CreateObject("Scripting.FileSystemObject")
 If FileExists_(FileName) Then
    Set F = fs.getfile(FileName)
    GetFileDate = F.datelastModified
 End If
End Function
#End If

Function WriteFileConents(ByRef FileName As String, ByRef contents As String, Optional ByVal append As Boolean = False) As Boolean
 Dim step As Long
 On Error Resume Next
 WriteFileConents = True
 step = 0
 If Len(FileName) = 0 Then GoTo quit
again:
 Close #HandleOtherFile
 Err.Clear
 FileName = Replace$(FileName, "?", "_")
 FileName = Replace$(FileName, "/", "_")
 If append Then
    Open FileName For Append As #HandleOtherFile
 Else
    Open FileName For Output As #HandleOtherFile
 End If
 'If Err.Number = 76 Then
    'Dim p As Long
    'Err.Clear
    'p = InStrRev(FileName, "\")
    'If p Then
        'MkDir_ Left$(FileName, p)
        'Close #HandleOtherFile
        'Err.Clear
        'If append Then
           'Open FileName For Append As #HandleOtherFile
        'Else
           'Open FileName For Output As #HandleOtherFile
        'End If
    'End If
 'End If
 If Err.Number Then
    If Err.Number = 5 Then
        If step < 2 Then
            step = step + 1
            #If VB_STANDALONE Then
            Sleep 200
            #End If
            GoTo again
        End If
    End If
    If LCase$(Left$(FileName, 2)) <> "m:" Then
    MsgBox "Error writing file: " & Chr(13) & CStr(Err.Number) & ", " & Err.Description & Chr(13) & FileName
    End If
 End If
 Print #HandleOtherFile, contents;
 Close #HandleOtherFile
 If Err.Number Then WriteFileConents = False
quit:
End Function
Attribute VB_Name = "FormExport"
Attribute VB_Base = "0{17EAB62E-745E-4EF0-8248-572C26A57596}{3427C140-9AFC-42F7-9F92-ECFA15128518}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ButtonCancel_Click()
 CheckDoit.Value = False
 Me.Hide
End Sub

Private Sub ButtonOK_Click()
 CheckDoit.Value = True
 Me.Hide
End Sub

Private Sub ListLangs_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 ButtonOK_Click
End Sub

Private Sub UserForm_Initialize()
 ListLangs.SetFocus
End Sub
Attribute VB_Name = "FormText"
Attribute VB_Base = "0{59F94388-12BC-42DF-B14B-B2EDC25D2632}{BAA6C3B1-69C9-4163-AA2E-3D2F3AE66FE4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()
 Unload Me
End Sub
Attribute VB_Name = "ImportLngFile"
Option Explicit

Sub ImportLngFile()
 Dim fd As FileDialog
 Dim vrtSelectedItem As Variant
 
 On Error Resume Next
 Set fd = Application.FileDialog(msoFileDialogFilePicker)
 With fd
    .Filters.Clear
    Err.Clear
    .Filters.Add "Language File", "*.lng"
    .FilterIndex = 0
    If .Show = -1 Then
        For Each vrtSelectedItem In .SelectedItems
            ImportLngFileSub vrtSelectedItem
        Next
    End If
 End With
 
 Set fd = Nothing
End Sub


Sub ImportLngFileSub(ByVal FileName As String)
 Dim temp As String
 Dim cursel As String
 Dim lang As String
 Dim p As Long
 Dim collang As String
 Dim line As String
 Dim l() As String
 Dim currow As Long
 Dim currowbak As Long
 Dim countnothing As Long
 Dim notfounds As String
 Dim c As Long
 Dim cursection As String
 Dim lines() As String
 Dim i As Long
 
 On Error Resume Next
 p = InStrRev(FileName, "\")
 lang = Mid$(FileName, p + 1)
 p = InStrRev(lang, ".")
 lang = Left$(lang, p - 1)
 collang = "B"
 cursel = "B1"
 Range(cursel).Select
 While Len(ActiveCell.Text) > 0 And ActiveCell.Text <> Replace$(lang, "_", "")
    collang = Chr(Asc(collang) + 1)
    cursel = collang & "1"
    Range(cursel).Select
 Wend
 
 If Len(ActiveCell.Text) = 0 Then ActiveCell.Value = lang
 line = GetFileContents2(FileName)
 If Asc(line) = 255 Then If InStr(line, Chr(0)) Then line = StrConv(Mid$(line, 3), vbFromUnicode)
 lines() = Split(line, Chr(13) & Chr(10))
 
 'Open FileName For Input Shared As #9
 'For p = 0 To 9
    'Line Input #9, line
 'Next
 
 currow = 0
 Application.ScreenUpdating = False
 Do
    currow = currow + 1
    Range("A" & CStr(currow)).Select
 Loop While Left$(ActiveCell.Text, 1) <> "["
 cursection = ActiveCell.Text
 'While EOF(9) = False
     'Line Input #9, line
 For i = 1 To UBound(lines)
     line = lines(i)
     'line = StrConv(line, vbFromUnicode)
     If InStr(line, "=") Then
        c = 0
        Range("A" & CStr(currow)).Select
        While Left$(ActiveCell.Text, 1) = "[" Or Len(ActiveCell.Text) = 0 And c < 5
            currow = currow + 1
            Range("A" & CStr(currow)).Select
            c = c + 1
        Wend
        If Left$(line, 1) = Chr(34) Then line = Mid$(line, 2)
        If Right$(line, 1) = Chr(34) Then line = Left$(line, Len(line) - 1)
        l() = Split(line, "=")
        'If l(0) = "c" Then
            'p = p
        'End If
        currow = ActiveCell.row
        Range("A" & CStr(currow)).Select
        countnothing = 0
        c = 0
        currowbak = currow
        While ActiveCell.Text <> l(0)
            currow = currow + 1
            Range("A" & CStr(currow)).Select
            If Len(ActiveCell.Text) = 0 Then
                countnothing = countnothing + 1
                If countnothing > 20 Then
                    GoTo s1
                End If
            ElseIf ActiveCell.Text = l(0) Then
                GoTo f1
            ElseIf Left$(ActiveCell.Text, 1) = "[" And Len(ActiveCell.Text) > 1 Then
s1:
                notfounds = notfounds & cursection & ":" & line & Chr(13)
                currow = currowbak
                Range("A" & CStr(currow)).Select
                GoTo skip
            Else
                countnothing = 0
            End If
        Wend
f1:
        Range(collang & CStr(currow)).Select
        For p = 2 To UBound(l)
            l(1) = l(1) & "=" & l(p)
        Next
        If ActiveCell.Text <> l(1) Then
            Range("B" & CStr(currow)).Select
            If ActiveCell.Text = l(1) Then
                GoTo skip
            End If
            Range(collang & CStr(currow)).Select
        End If
        If Left$(l(1), 1) = "'" Then If Left$(l(1), 2) <> "''" Then l(1) = "'" & l(1)
        ActiveCell.Value = l(1)
        'p = p
    ElseIf Left$(line, 1) = "[" And Len(line) > 1 Then
        c = 0
        cursection = line
        While ActiveCell.Text <> line
            currow = currow + 1
            Range("A" & CStr(currow)).Select
            c = c + 1
            If Left$(ActiveCell.Text, 1) = "[" And Len(ActiveCell.Text) > 2 Then
                If ActiveCell.Text <> line Then
                    notfounds = notfounds & cursection & ":" & line & Chr(13)
                End If
            End If
        Wend
skip:
    End If
 Next
 'Wend
done:
 'Close #9
 Application.ScreenUpdating = True
 If Len(notfounds) Then
    FormText.TextBox1.Text = Replace$(notfounds, Chr(13), Chr(13) & Chr(10))
    FormText.Show 1
 End If
End Sub



Function GetFileContents2(ByVal FileName As String, Optional ByVal ConvertFromUnicode As Boolean = True) As String
 On Error Resume Next
 Dim h As Long
 
 ' open in binary mode
 h = 15
 'If FileExists_(FileName) Then
    Do
        Err.Clear
        Open FileName For Binary Access Read Shared As #h
        h = h + 1
    Loop While Err.Number <> 0 And h < 30
    h = h - 1
    ' read the string and close the file
    #If HasWideChars = 1 Then
     If HasWideChars Then
        Dim ByteArray() As Byte
        ReDim ByteArray(LOF(h) - 1)
        'GetFileContents2 = Space$(LOF(h))
        Get #h, , ByteArray()
        GetFileContents2 = ConvertByteArrayToString(ByteArray())
     Else
        GetFileContents2 = Space$(LOF(h))
        Get #h, , GetFileContents2
     End If
    #Else
     GetFileContents2 = Space$(LOF(h))
     Get #h, , GetFileContents2
    #End If
    'Fileformat = eFileFormatPlainText
    'If ConvertFromUnicode Then
        'Fileformat = ConvertFromUnicodeSub(GetFileContents2)
    'End If
quit:
    Close #h
 'Else
    'WriteDebugInfo "File not found:" & FileName
 'End If
End Function

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True








































INQUEST-PP=macro
