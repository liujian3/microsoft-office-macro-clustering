Attribute VB_Name = "AboutForm"
Attribute VB_Base = "0{D64124D5-FB80-4E75-91A5-05580C1519FB}{E8E35068-10A6-40AD-852A-455607C46ABE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton3_Click()
Unload Me
End Sub

Private Sub UserForm_Initialize()
 If Docaddonproperties.AddinLanguage.Value = "English" Then
 CommandButton3.Caption = "Close"
 Label1.Caption = "WeCo Accessibilty Add-In" & vbNewLine & vbNewLine & "Version: WeCo Office Accessibilty V3.6.7" & vbNewLine & vbNewLine & "Release Date: 15.11.2019"
 
 Label6.Caption = "It is strictly forbidden to copy the extension or part and/or to transfer to a person or entity that is not part of the organization subject to the terms of use"
Label2.Caption = "All rights reserved to WeCo Solutions Ltd"
 Else
 End If
  Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub
Attribute VB_Name = "AccountantFormat"


Sub CELLFORMAT(control As IRibbonControl)
    On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If

    Dim Tbl As Table, cel As Cell, I, k As Long, n As Long, fEmpty As Boolean
    With ActiveDocument
        If ActiveDocument.TableS.Count < 1 Then
         If Docaddonproperties.AddinLanguage.Value = "English" Then
 usernote = MsgBox("No Tables was detected", vbOKOnly, "")
  Else
            usernote = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")
            End If
            Exit Sub
        Else
            ActiveDocument.Paragraphs(1).Range.Select
            ActiveDocument.TableS(1).Select
        End If
        For k = 1 To ActiveDocument.TableS.Count
            
            Set Tbl = ActiveDocument.TableS(k)
            Tbl.Select
                 If Docaddonproperties.AddinLanguage.Value = "English" Then
UsrInput = MsgBox(" Would you like to convert this document accounting format to regular text?", vbYesNoCancel, "")
 Else
            UsrInput = MsgBox("?|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbYesNoCancel, "")
            End If
            If UsrInput = 7 Then GoTo NXT
            If UsrInput = 2 Then
                Exit Sub
            Else
                
                Application.ScreenUpdating = False
                If Tbl.ID = "AccF" Then
                  If Docaddonproperties.AddinLanguage.Value = "English" Then
  UsrInput2 = MsgBox("The selected Table was allready converted, would like to convert it once again?", vbYesNoCancel, "|fffd||fffd||fffd||fffd||fffd||fffd|")
 Else
                    UsrInput2 = MsgBox("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNoCancel, "|fffd||fffd||fffd||fffd||fffd||fffd|")
                    End If
                    If UsrInput2 = 7 Then GoTo NXT
                    GoTo NXT
                Else:
                Tbl.ID = "AccF"
                End If
                Application.ScreenUpdating = False
                With Selection
                        
                       
                    Tbl.Select
                    n = Tbl.rows.Count
                    nn = Tbl.Columns.Count
                    If n < 3 Then GoTo NXT
                    For Y = 2 To n
                        For X = 2 To nn
                            
                            Set rng = Tbl.Cell(Y, X).Range
                            If InStr(1, rng.Text, "-", vbBinaryCompare) <> 0 And All0(rng.Text) = False And Mid(rng.Text, 1, 1) = "-" Then
                                Tbl.Cell(Y, X).Select
                              
                                       
                            
                                With Selection.Find
                                    .ClearFormatting
                                    .Text = "-"
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = "0"
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                            End If
                            If Tbl.Cell(Y, X).Range.ParagraphFormat.ReadingOrder = wdReadingOrderRtl Then
                                
                                If InStr(1, rng.Text, "(", vbBinaryCompare) <> 0 And InStr(1, rng.Text, ")", vbBinaryCompare) <> 0 Then   'And AllDigits(rng.Text) = True
                                 
                                    Tbl.Cell(Y, X).Select
                              
                                
                            
                                    With Selection.Find
                                        .ClearFormatting
                                        .Text = "("
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = " "
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                    Tbl.Cell(Y, X).Select
                                    With Selection.Find
                                    
                                        .ClearFormatting
                                        .Text = ")"
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = "-"
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                    Tbl.Cell(Y, X).Select
                                    With Selection.Find
                                    
                                        .ClearFormatting
                                        .Text = "*-"
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = "*)"
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                End If
                            Else
                                If InStr(1, rng.Text, "(", vbBinaryCompare) <> 0 And InStr(1, rng.Text, ")", vbBinaryCompare) <> 0 Then   'And AllDigits(rng.Text) = True
                                 
                                    Tbl.Cell(Y, X).Select
                              
                                
                            
                                    With Selection.Find
                                        .ClearFormatting
                                        .Text = ")"
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = " "
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                    Tbl.Cell(Y, X).Select
                                    With Selection.Find
                                    
                                        .ClearFormatting
                                        .Text = "("
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = "-"
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                    Tbl.Cell(Y, X).Select
                                    With Selection.Find
                                    
                                        .ClearFormatting
                                        .Text = "*-"
                                        .Replacement.ClearFormatting
                                        .Replacement.Text = "(*"
                                        .Execute Replace:=wdReplaceOne, Forward:=True, _
                                            Wrap:=wdFindContinue
                                    End With
                                End If
                                 
                            End If
                                  
                                  
                        Next
                        Application.ScreenUpdating = True
                    Next
                             
                                
                    '
                            
                End With
            End If
NXT:
            Application.ScreenUpdating = True
        Next
        Application.ScreenUpdating = True

    End With
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.ScreenUpdating = True

End Sub
Private Function AllDigits(ByVal txt As String) As Boolean
    Dim ch As String
    Dim I As Integer

    AllDigits = True
    For I = 1 To Len(txt)
        ' See if the next character is a non-digit.
        ch = Mid(txt, I, 1)
        
        If ch <> "0" And ch <> "1" And ch <> "2" And ch <> "3" And ch <> "4" And ch <> "5" And ch <> "6" And ch <> "7" And ch <> "8" And ch <> "9" And ch <> "0" And ch <> ")" And ch <> "(" And ch <> "*" And ch <> " " Then
            
            ' This is not a digit.
            AllDigits = False
            Exit For
        End If

    Next I
End Function
Private Function All0(ByVal txt As String) As Boolean
    Dim ch As String
    Dim I As Integer

    All0 = True
    For I = 1 To Len(txt)
      
        ch = Mid(txt, I, 1)
        If Len(txt) > 3 Then
            All0 = False
            Exit For
        End If
        If ch <> "-" Then
            
        
            All0 = False
            Exit For
        End If

    Next I
End Function

Sub SingleTableCELLFORMAT(control As IRibbonControl)
    On Error Resume Next


    Dim Tbl As Table, cel As Cell, I, k As Long, n As Long, fEmpty As Boolean
    With Selection
        If .TableS.Count <> 1 Then
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   Usr = MsgBox("Please select single Table", vbOKOnly, "")
  Else
            Usr = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "")
            End If
            Exit Sub
        End If
    End With
    With ActiveDocument

        
        Set Tbl = Selection.TableS(1)
        Tbl.Select
           If Docaddonproperties.AddinLanguage.Value = "English" Then
     UsrInput = MsgBox("Would you like to convert the selected table cells format from Accounting format to regular text?", vbYesNoCancel, "")
  Else
        UsrInput = MsgBox("?|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbYesNoCancel, "")
        End If
        If UsrInput = 7 Then GoTo NXT
        If UsrInput = 2 Then
            Exit Sub
        Else
            Application.ScreenUpdating = False
                    
            With Selection
                            
                           
                Tbl.Select
                n = Tbl.rows.Count
                nn = Tbl.Columns.Count
                If n < 3 Then GoTo NXT
                For Y = 2 To n
                    For X = 2 To nn
                                
                        Set rng = Tbl.Cell(Y, X).Range
                        If InStr(1, rng.Text, "-", vbBinaryCompare) <> 0 And All0(rng.Text) = False And Mid(rng.Text, 1, 1) = "-" Then
                            Tbl.Cell(Y, X).Select
                                  
                                           
                                
                            With Selection.Find
                                .ClearFormatting
                                .Text = "-"
                                .Replacement.ClearFormatting
                                .Replacement.Text = "0"
                                .Execute Replace:=wdReplaceOne, Forward:=True, _
                                    Wrap:=wdFindContinue
                            End With
                        End If
                        If Tbl.Cell(Y, X).Range.ParagraphFormat.ReadingOrder = wdReadingOrderRtl Then
                                    
                            If InStr(1, rng.Text, "(", vbBinaryCompare) <> 0 And InStr(1, rng.Text, ")", vbBinaryCompare) <> 0 Then   'And AllDigits(rng.Text) = True
                                     
                                Tbl.Cell(Y, X).Select
                                  
                                    
                                
                                With Selection.Find
                                    .ClearFormatting
                                    .Text = "("
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = " "
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                                Tbl.Cell(Y, X).Select
                                With Selection.Find
                                        
                                    .ClearFormatting
                                    .Text = ")"
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = "-"
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                                Tbl.Cell(Y, X).Select
                                With Selection.Find
                                        
                                    .ClearFormatting
                                    .Text = "*-"
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = "*)"
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                            End If
                        Else
                            If InStr(1, rng.Text, "(", vbBinaryCompare) <> 0 And InStr(1, rng.Text, ")", vbBinaryCompare) <> 0 Then   'And AllDigits(rng.Text) = True
                                     
                                Tbl.Cell(Y, X).Select
                                  
                                    
                                
                                With Selection.Find
                                    .ClearFormatting
                                    .Text = ")"
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = " "
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                                Tbl.Cell(Y, X).Select
                                With Selection.Find
                                        
                                    .ClearFormatting
                                    .Text = "("
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = "-"
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                                Tbl.Cell(Y, X).Select
                                With Selection.Find
                                        
                                    .ClearFormatting
                                    .Text = "*-"
                                    .Replacement.ClearFormatting
                                    .Replacement.Text = "(*"
                                    .Execute Replace:=wdReplaceOne, Forward:=True, _
                                        Wrap:=wdFindContinue
                                End With
                            End If
                                     
                        End If
                                      
                                      
                    Next
                Next
                                 
                                    
                '
                                
            End With
        End If
NXT:
        
        '  Next
    End With
End Sub




Attribute VB_Name = "CustomLists"
Public Sub TaxList_A(control As IRibbonControl)
On Error Resume Next
Call TaxList_Af(1)
End Sub
Public Sub TaxList_B(control As IRibbonControl)
On Error Resume Next
Call TaxList_Bf(1)
End Sub

Public Sub TaxList_Af(n As Long)

    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(1)
        .NumberFormat = "%1."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0.11)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(0.63)
        .TabPosition = wdUndefined
        .ResetOnHigher = 0
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(2)
        .NumberFormat = "%1.%2."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0.63)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(1.37)
        .TabPosition = wdUndefined
        .ResetOnHigher = 1
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(3)
        .NumberFormat = "%1.%2.%3."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(1.37)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(2)
        .TabPosition = wdUndefined
        .ResetOnHigher = 2
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(4)
        .NumberFormat = "%4."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleHebrew1
        .NumberPosition = CentimetersToPoints(2.59)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(3.26) '(2.65)
        .TabPosition = wdUndefined
        .ResetOnHigher = 3
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(5)
        .NumberFormat = "%5)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(3.26)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(3.89)
        .TabPosition = wdUndefined
        .ResetOnHigher = 4
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(6)
        .NumberFormat = "(%6)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleHebrew1
        .NumberPosition = CentimetersToPoints(3.89)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(4.52)
        .TabPosition = wdUndefined
        .ResetOnHigher = 5
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    '''''''''''
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(7)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdList
        .NumberPosition = CentimetersToPoints(4.52)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(4.52)
        .TabPosition = wdUndefined
        .ResetOnHigher = 6
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(8)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleLowercaseLetter
        .NumberPosition = CentimetersToPoints(4.44)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(5.08)
        .TabPosition = wdUndefined
        .ResetOnHigher = 7
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(9)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleLowercaseRoman
        .NumberPosition = CentimetersToPoints(5.08)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(5.71)
        .TabPosition = wdUndefined
        .ResetOnHigher = 8
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    '''''''''''
    ListGalleries(wdOutlineNumberGallery).ListTemplates(1).Name = "Tax_List_A"
    Selection.Range.ListFormat.ApplyListTemplateWithLevel ListTemplate:= _
        ListGalleries(wdOutlineNumberGallery).ListTemplates(1), _
        ContinuePreviousList:=False, ApplyTo:=wdListApplyToWholeList, _
        DefaultListBehavior:=wdWord6ListBehavior
       
End Sub
Public Sub TaxList_Bf(n As Long)

   With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(1)
        .NumberFormat = "%1."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0.11)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(0.63)
        .TabPosition = wdUndefined
        .ResetOnHigher = 0
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(2)
        .NumberFormat = "%2."
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleHebrew1
        .NumberPosition = CentimetersToPoints(0.63)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(1.26)
        .TabPosition = wdUndefined
        .ResetOnHigher = 1
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(3)
        .NumberFormat = "%3)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(1.26)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(1.89)
        .TabPosition = wdUndefined
        .ResetOnHigher = 2
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(4)
        .NumberFormat = "%4)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleHebrew1
        .NumberPosition = CentimetersToPoints(1.89)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(2.52) '(2.65)
        .TabPosition = wdUndefined
        .ResetOnHigher = 3
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(5)
        .NumberFormat = "(%5)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(2.52)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(3.15)
        .TabPosition = wdUndefined
        .ResetOnHigher = 4
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(6)
        .NumberFormat = "(%6)"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleHebrew1
        .NumberPosition = CentimetersToPoints(3.15)
        .alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(3.78)
        .TabPosition = wdUndefined
        .ResetOnHigher = 5
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = False
            .Subscript = False
            .Superscript = False
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = False
            .Hidden = False
            .Underline = wdUnderlineNone
            .color = wdColorAutomatic
            .Size = 12
            .Animation = wdUndefined
            .DoubleStrikeThrough = False
            .Name = "Arial"
            .SizeBi = 12
            .NameBi = "Arial"
            .BoldBi = False
            .ItalicBi = False
        End With
        .LinkedStyle = ""
    End With
    '''''''''''
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(7)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdList
        .NumberPosition = CentimetersToPoints(3.78)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(3.78)
        .TabPosition = wdUndefined
        .ResetOnHigher = 6
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(8)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleLowercaseLetter
        .NumberPosition = CentimetersToPoints(4.44)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(5.08)
        .TabPosition = wdUndefined
        .ResetOnHigher = 7
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    With ListGalleries(wdOutlineNumberGallery).ListTemplates(1).ListLevels(9)
        .NumberFormat = ""
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleLowercaseRoman
        .NumberPosition = CentimetersToPoints(5.08)
        .alignment = wdListLevelAlignRight
        .TextPosition = CentimetersToPoints(5.71)
        .TabPosition = wdUndefined
        .ResetOnHigher = 8
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
            .SizeBi = wdUndefined
            .NameBi = ""
            .BoldBi = wdUndefined
            .ItalicBi = wdUndefined
        End With
        .LinkedStyle = ""
    End With
    '''''''''''
    ListGalleries(wdOutlineNumberGallery).ListTemplates(1).Name = "Tax_List_B"
    Selection.Range.ListFormat.ApplyListTemplateWithLevel ListTemplate:= _
        ListGalleries(wdOutlineNumberGallery).ListTemplates(1), _
        ContinuePreviousList:=False, ApplyTo:=wdListApplyToWholeList, _
        DefaultListBehavior:=wdWord6ListBehavior
End Sub

Attribute VB_Name = "DocForms"
Attribute VB_Base = "0{51546EB6-CF54-4398-A358-402657FC688E}{DF374626-D3EF-4A4C-A2EE-482B3D618AAF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 


Private Sub CommandButton3_Click()
Unload Me
End Sub

Private Sub CommandButton5_Click()
 If checkGRHL(1) = True Then
        Me.Hide
        Unload Me
        Unload DocShapes
        DocShapes.Show vbModeless
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
        DocShapes.Show vbModeless
    Else
        If ActiveDocument.TableS.Count > 0 Then
            Me.Hide
            Unload Me
            DocTables.Show vbModeless

            ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        Else
            Me.Hide
            Unload Me
            DocHeading.Show vbModeless
            ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        End If
   
    End If
End Sub

Private Sub CommandButton6_Click()
 ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 5 - |fffd||fffd||fffd||fffd| " & Chr(10)
    docfinish.Show vbModeless
End Sub

Private Sub FieldSearch_Click()
Dim w As Range '
Dim UsrInput
Dim X
For Each w In ActiveDocument.Words
If InStr(1, w, "...") Or InStr(1, w, "___") Or InStr(1, CStr(w.Font.Name), "Wingdings") Then  'InStr(1, w, CStr(ChrW(9746))) Or InStr(1, w, CStr(ChrW(9745))) Or InStr(1, w, CStr(ChrW(11036))) Or InStr(1, w, CStr(ChrW(9744))) Or InStr(1, w, CStr(ChrW(163))) Or InStr(1, w, CStr(Chr(163))) Then
w.Select
  UsrInput = MsgBox("?|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|", vbYesNoCancel, "")
       '     End If
            If UsrInput = 7 Then GoTo NXT
            If UsrInput = 2 Then
                Exit Sub
            Else
            
    '     If Docaddonproperties.AddinLanguage.Value = "English" Then
         '       UsrInput = MsgBox(" Would you like to add instructions to this table ?", vbYesNoCancel, "")
       '     Else
          
         
            Selection.MoveLeft Unit:=wdCharacter, Count:=1
                 X = InputBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|", "WeCo")
                 Call addpic(CStr(X))
             
          End If
         
End If
NXT:
Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
  MASSAGE_BOX.TextBox1.Caption = " Additional Fields was not found"
   Else
   MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
   End If
   MASSAGE_BOX.Show
               
End Sub

Private Sub tablesearch_Click()
On Error Resume Next
Dim UsrInput
Dim X
Dim UsrInput2
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
       Call SwithchTrackChangeOff(1)
       TCCHECK = 1
    End If

    Dim Tbl As Table, cel As Cell, I, k As Long, n As Long, fEmpty As Boolean
    With ActiveDocument
        If ActiveDocument.TableS.Count < 1 Then
           
        Else
            ActiveDocument.Paragraphs(1).Range.Select
            ActiveDocument.TableS(1).Select
        End If
        For k = 1 To ActiveDocument.TableS.Count
            
            Set Tbl = ActiveDocument.TableS(k)
            Tbl.Select
       '     If Docaddonproperties.AddinLanguage.Value = "English" Then
         '       UsrInput = MsgBox(" Would you like to add instructions to this table ?", vbYesNoCancel, "")
       '     Else
                UsrInput = MsgBox("?|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", vbYesNoCancel, "")
       '     End If
            If UsrInput = 7 Then GoTo NXT
            If UsrInput = 2 Then
                Exit Sub
            Else
            
                
                Application.ScreenUpdating = False
                If Tbl.ID = "AccF" Then
                    If Docaddonproperties.AddinLanguage.Value = "English" Then
                        UsrInput2 = MsgBox("you allready set an instrctions to this table, would you like to edit it?", vbYesNoCancel, "|fffd||fffd||fffd||fffd||fffd||fffd|")
                    Else
                        UsrInput2 = MsgBox("?|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbYesNoCancel, "|fffd||fffd||fffd||fffd||fffd||fffd|")
                    End If
                    If UsrInput2 = 7 Then GoTo NXT
                    GoTo NXT
                Else:
                Tbl.ID = "AccF"
                End If
                Application.ScreenUpdating = False
                With Selection
                        
                 Tbl.Cell(1, 1).Range.Select
                 Selection.HomeKey Unit:=wdLine
                  Selection.MoveUp Unit:=wdLine, Count:=1
                 X = InputBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "WeCo")
                 Call addpic(CStr(X))
                End With
            End If
NXT:
            Application.ScreenUpdating = True
        Next
        Load MASSAGE_BOX
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Additional Tables was not found"
   Else
   MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
   End If
   MASSAGE_BOX.Show
               
        Application.ScreenUpdating = True

    End With
   If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.ScreenUpdating = True
End Sub

Public Sub UserForm_Initialize()

  
    Dim Language As String
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
  
    

End Sub

Sub addpic(des As String)
Dim pic As InlineShape
 Selection.HomeKey Unit:=wdLine

   Selection.InlineShapes.AddPicture(Application.StartupPath & "\AccHeader2.png", False, True).AlternativeText = CStr(des)


End Sub
Attribute VB_Name = "DocHeaderText"
Attribute VB_Base = "0{67FA0C73-E2AF-46CB-8CD1-373FEDFE07D8}{99E688AC-9F4D-4DA0-9F06-F1981F003238}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton3_Click()

Me.Hide
End Sub

Private Sub CommandButton8_Click()

            Call updateSetting("HeaderText", Me.HeaderText.Value)
             Call updateSetting("FooterText", Me.FooterText.Value)
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
 If getAdmSetting("HeaderText") <> "NA" Then Me.HeaderText = getAdmSetting("HeaderText")
 If getAdmSetting("FooterText") <> "NA" Then Me.FooterText = getAdmSetting("FooterText")
  If Docaddonproperties.AddinLanguage.Value = "English" Then
  Label1.Caption = "First Page Header Alt Text:"
   Label2.Caption = "First Page Footer Alt Text:"
  CommandButton3.Caption = "Exit"
  CommandButton8.Caption = "Save Changes"
  
  Else
  End If
   Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub
Attribute VB_Name = "DocHeading"
Attribute VB_Base = "0{564AD745-188A-4204-B893-7367DA228FB6}{A8AA6E3F-C764-4598-99DD-816C151DF007}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub AutoLevel_Click()
    Unload DocHeading

    ActiveDocument.Activate
    Load DocHeading

    t = Now
    Do
        DoEvents
    Loop Until Now >= DateAdd("s", 2, t)
    DocHeading.Show vbModeless
    System.Cursor = wdCursorNormal

End Sub



Private Sub CommandButton12_Click()
   

End Sub

Private Sub BRHeadingTag_Click()
    On Error Resume Next
    Dim StartTime As Double
    Dim SecondsElapsed As Double
    Dim ch As Integer
    'Remember time when macro starts
    StartTime = Timer
    Me.RecordH.Value = False
    Dim V As Variable
    Dim m, n As Variant
    Dim kkk, Q As Integer
    Dim para As Paragraph
    Dim colFontsUsed As New Collection
    kkk = 0
    Dim I As Integer
    Application.ScreenUpdating = False
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" Then
            colFontsUsed.Add Trim(getDocVarHBR(V.Name))
            kkk = kkk + 1
        End If
    Next V
  
    If kkk = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " User Predefined Heading Business Rules were not found, please record your Heading Tags and perform the action once again "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
        End If
        MASSAGE_BOX.Show
        Call speedOff(1)
        Exit Sub
    End If
    '  MsgBox m
    If ActiveDocument.Paragraphs.Count > 150 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " This action might take several minute , in order to speed it up the application will run on backround, please wait until you recieve notification "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
        End If
        MASSAGE_BOX.Show
        Call speedOn(1)
    Else
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Headings Auto Tagging proccessing "
        FractionComplete (0.05)
    End If
    Dim kp As Integer
    Dim parar As Paragraph
    kkk = 0
    kp = ActiveDocument.Paragraphs.Count
    'For Each parar In ActiveDocument.Paragraphs
    For I = 1 To ActiveDocument.Paragraphs.Count
        Set parar = ActiveDocument.Paragraphs(I)
        kkk = kkk + 1
        Pro_Bar.Caption = "WeCo - Headings Auto Tagging proccessing "
        FractionComplete (0.05 + 0.95 * (kkk / kp))
        '
        parar.Range.Select
        If parar.Range.Characters.Count < 3 Then
            If parar.OutlineLevel <> wdOutlineLevelBodyText Then
                parar.Range.Select
                Call HHXList(1)
            End If
            GoTo NXT1
        End If
       
        If Trim(parar.Range.Text) = "" Or parar.Range.Text = "" Or parar.Range.Words.First = "^12" Or parar.Range.Words.First = "^13" Then
            If parar.OutlineLevel <> wdOutlineLevelBodyText Then
                parar.Range.Select
                Call HHXList(1)
                GoTo NXT1
            End If
        End If
        If parar.Range.Characters.Count = 1 And parar.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
            parar.Range.Select
            Call HHXList(1)
            GoTo NXT1
        End If
     
        If Left(parar.Format.Style.NameLocal, 3) = "TOC" Then GoTo NXT1
        If parar.Range.Hyperlinks.Count > 0 Then GoTo NXT1
        If parar.Range.Information(wdWithInTable) Then GoTo NXT1
        
       
        m = Trim(CStr(getHproperties(parar.Range)))
        
        ch = 0
        For Q = colFontsUsed.Count To 1 Step -1
                   
       
            
            n = Trim(CStr(colFontsUsed(Q)))
            

            parar.Range.Select
            '  MsgBox m & vbNewLine & n
            If InStr(1, n, m) <> 0 Then
                parar.Range.Select
                ch = ch + 1
                Select Case Val(Font_H(colFontsUsed(Q)))
                    Case "1"
                                        
                        Call HH1
                        GoTo NXT1
                    Case "2"
                        Call HH2
                        GoTo NXT1
                    Case "3"
                        Call HH3
                        GoTo NXT1
                    Case "4"
                        Call HH4
                        GoTo NXT1
                    Case "5"
                        Call HH5
                        GoTo NXT1
                    Case "6"
                        Call HH6
                        GoTo NXT1
                    Case Else
                        Call HHXList(1)
                        GoTo NXT1
                End Select
              
                
            End If
        Next Q
         If ch = 0 And parar.OutlineLevel <> wdOutlineLevelBodyText Then
                parar.Range.Select
                Call HHXList(1)
                GoTo NXT1
            End If
                    
        
      
NXT1:
        Application.ScreenUpdating = False
        Pro_Bar.Caption = "WeCo - Headings Auto Tagging proccessing "
        FractionComplete (0.05 + 0.95 * (kkk / ActiveDocument.Paragraphs.Count))
    Next I
    ActiveDocument.Paragraphs(1).Range.Select
    Unload Pro_Bar
    SecondsElapsed = Round(Timer - StartTime, 2)
    Call speedOff(1)
    MsgBox "This code ran successfully in " & SecondsElapsed & " seconds", vbInformation
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = " WeCo Auto Heading Tagging proccess was completed, please review the Document Headings before proceeding"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
    Call speedOff(1)
End Sub

Private Sub CommandButton11_Click()
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim Doc As Document
    Dim para As Paragraph
    Dim r, k, kk As Integer
    Set Doc = ActiveDocument
    Application.ScreenUpdating = False
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.05)
    'HeadingDesign.Show vbModeless
    For k = 1 To Doc.Paragraphs.Count
        Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.05 + 0.95 * k / Doc.Paragraphs.Count)
        Set para = Doc.Paragraphs(k)
        If Left(para.Format.Style.NameLocal, 3) = "TOC" Then GoTo NXT1
    
        If para.Range.Information(wdWithInTable) Then GoTo NXT1
        If (para.Range.Font.Name = HeadingDesign.H1_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H1_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H1_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H1_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H1_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H1_FONT_Italic.Value) Then
            para.Range.Select
            Call HH1
            GoTo NXT1
        End If
        
        If (para.Range.Font.Name = HeadingDesign.H2_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H2_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H2_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H2_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H2_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H2_FONT_Italic.Value) Then
            para.Range.Select
            Call HH2
            GoTo NXT1
        End If
        
        If (para.Range.Font.Name = HeadingDesign.H3_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H3_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H3_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H3_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H3_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H3_FONT_Italic.Value) Then
            para.Range.Select
            Call HH3
            GoTo NXT1
        End If
        
        If (para.Range.Font.Name = HeadingDesign.H4_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H4_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H4_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H4_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H4_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H4_FONT_Italic.Value) Then
            para.Range.Select
            Call HH4
            GoTo NXT1
        End If
        
        If (para.Range.Font.Name = HeadingDesign.H5_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H5_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H5_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H5_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H5_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H5_FONT_Italic.Value) Then
            para.Range.Select
            Call HH5
            GoTo NXT1
        End If
        If (para.Range.Font.Name = HeadingDesign.H6_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H6_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H6_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H6_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H6_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H6_FONT_Italic.Value) Then
            para.Range.Select
            Call HH6
            GoTo NXT1
        End If
        para.Range.Select
        HHXList (1)
NXT1:
    Next k
    Unload Pro_Bar
    ActiveDocument.Paragraphs(1).Range.Select
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButton13_Click()

End Sub

Private Sub CommandButton3_Click()
    Me.Hide
    Unload Me
End Sub

Private Sub CommandButton5_Click()
     Me.Hide
    Unload Me
    Call docPropertiesFormback(1)
    If Docaddonproperties.AddinLanguage.Value = "English" Then
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Properties" & Chr(10)
    Else
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
    End If
   
End Sub


Private Sub CommandButton7_Click()
    Dim para As Paragraph, rng As Range, iLvl As Long, I As Integer
    Me.NextH.Value = 1
    Me.LastH.Value = 0
    I = 1
    lastpar = ActiveDocument.Paragraphs.Count
   
    While I < lastpar
    
    
    
        If IsNumeric(ActiveDocument.Paragraphs(I).Range.Words(1).Characters(1)) = True Then
            ActiveDocument.Paragraphs(I).Range.Select
        End If
    
        If Me.NextH.Value - Me.NextH.Value = 2 Then
            I = I + 1
            Me.LastH.Value = Me.LastH.Value + 1
        Else
            I = I - 1
        End If
    Wend
    
End Sub
Public Function checkGRHL(n As Integer) As Boolean
    Dim astory As Range
    checkGRHL = False
    For Each astory In ActiveDocument.StoryRanges
        If Docaddonproperties.Pic_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT1
            Else
             
                If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
NXT1:
        If Docaddonproperties.Links_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT2
            Else
               
                If astory.Hyperlinks.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.Hyperlinks.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
          
NXT2:
    Next
NXT:
End Function

Private Sub CommandButton6_Click()
    On Error Resume Next
    If Docaddonproperties.VStage2 = True And (Me.Vstage2Check <> 1) Then
    Load MASSAGE_BOX
     If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Please Complete the heading review procedure Via The Accessibilty Wizard"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
       End If
        MASSAGE_BOX.Show
        Me.NextH.SetFocus
        Exit Sub
    End If
    Me.Hide
    If checkGRHL(1) = False And ActiveDocument.TableS.Count = 0 Then
        If Docaddonproperties.VStageAlert = True Then
        Load MASSAGE_BOX
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "The Document does not contain ant Table, HyperLinks or Graphical Element, so we will skip this stage "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
       End If
        MASSAGE_BOX.Show
        End If
        Unload docfinish
        docfinish.Show vbModeless
        If Docaddonproperties.AddinLanguage.Value = "English" Then
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Final" & Chr(10)
        Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 5 - |fffd||fffd||fffd||fffd| " & Chr(10)
        End If
        
    
Else:
        Me.Hide

        If ActiveDocument.TableS.Count > 0 Then
            Unload DocTables
            DocTables.Show vbModeless
   
Else:
  
        
             If Docaddonproperties.VStageAlert = True Then
            Load MASSAGE_BOX
             If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Tables were not detected on this document so we will skip this stage"
  Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
           End If
            MASSAGE_BOX.Show
            End If
            DocShapes.Show vbModeless
          
        End If

         If Docaddonproperties.AddinLanguage.Value = "English" Then
          ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Tables" & Chr(10)
         Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        End If
        If Docaddonproperties.savebystep = True Then ActiveDocument.Save
        
        

    
    End If
   
  
  
  
   
    
End Sub



Private Sub FH1_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,1")
    End If
    
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then
    Call HHXList(1)
    para.Select
    Call HH1
    Else
    para.Select
    Call HH1
    End If
    para.Select
''''
   If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
'''
 para.Select
    Application.ScreenUpdating = True

End Sub

Private Sub FH2_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,2")
    End If
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel2 Then
    Call HHXList(1)
    para.Select
    Call HH2
    Else
    para.Select
    Call HH2
    End If
   If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
     para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub FH3_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,3")
    End If
     If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel3 Then
    Call HHXList(1)
    para.Select
    Call HH3
    Else
    para.Select
    Call HH3
    End If
  para.Select
   If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
     para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub FH4_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
   If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,4")
    End If
     If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel4 Then
    Call HHXList(1)
    para.Select
    Call HH4
    Else
    para.Select
    Call HH4
    End If
  para.Select
 If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
     para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub FH5_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
  If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,5")
    End If
   If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel5 Then
    Call HHXList(1)
    para.Select
    Call HH5
    Else
    para.Select
    Call HH5
    End If
  para.Select
     If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
     para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub FH6_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
  If Me.RecordH.Value = True Then
    m = getHproperties(para)
     Call setDocVarHBR(m & ",I,6")
    End If
   If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel6 Then
    Call HHXList(1)
    para.Select
    Call HH6
    Else
    para.Select
    Call HH6
    End If
  para.Select
     If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
    para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub FH7_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    Call HH7(1)
    para.Select
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
    Application.ScreenUpdating = True
End Sub

Private Sub FH8_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    Call HH8(1)
    para.Select

     If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
    Application.ScreenUpdating = True
    
End Sub

Private Sub FHeadingSplit_Click()
    Call L2P2(1)
End Sub

Private Sub FHX_Click()
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    Call HHXList(1)
    para.Select

     If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.ParagraphFormat.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.ParagraphFormat.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
     para.Select
    Application.ScreenUpdating = True
End Sub

Private Sub HELPB_Click()
    If Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
        Me.FORMHELP.Visible = True
        Me.Frame1.Visible = False
        Me.HELPB.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        Me.FORMHELP.Visible = False
        Me.Frame1.Visible = True
        Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Private Sub HInfo_Click()
    On Error Resume Next
    Me.RecordH.Value = False
    Dim V As Variable
    Dim m, n As Variant
    Dim kkk, Q As Integer
    Dim cc As control
    Dim para As Paragraph
    Dim colFontsUsed As New Collection
    Dim colFontsUsed2 As New Collection
    kkk = 0
    Application.ScreenUpdating = False
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" Then
        ''''''''''''''
          
            colFontsUsed.Add Trim(getDocVarHBR(V.Name))
            kkk = kkk + 1
        End If
    Next V
 
    If kkk = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " User Predefined Heading Business Rules were not found, please record your Heading Tags and perform the action once again "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
     
            MASSAGE_BOX.Show
            Call speedOff(1)
            Exit Sub
        End If
    End If
    For Q = colFontsUsed.Count To 1 Step -1
        colFontsUsed2.Add Trim(colFontsUsed(Q))
    Next
    For Q = 1 To colFontsUsed2.Count
        With HeadingsBR
            For Each cc In HeadingsBR.Controls
                If Q < 10 Then
                     If Mid(cc.Name, 1, 3) = "BR" & Q Then cc.Visible = True
                    If Mid(cc.Name, 1, 2) = "I" & Q Then
                        cc.Visible = True
                        If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then cc.Caption = "H" & CStr(Font_H(colFontsUsed2(Q)))
                        If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then cc.Caption = CStr(Font_size(colFontsUsed2(Q)))
                      
                        If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                            If CStr(Font_Bold(colFontsUsed2(Q))) = "False" Then
                                cc.Caption = "X"
                                
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                            If CStr(Font_Under(colFontsUsed2(Q))) = "0" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                            '  If CStr(Font_Col(colFontsUsed2(Q))) = "1" Then
                            '  cc.Caption = "Black"
                            '  Else
                            cc.Caption = CStr(Font_Col(colFontsUsed2(Q)))
                            If InStr(CStr(Font_Col(colFontsUsed2(Q))), "1677721") Then
                                cc.ForeColor = wdBlack
                                cc.BackColor = wdBlack
                            Else
                            
                                cc.ForeColor = CLng(cc.Caption)
                                cc.BackColor = CLng(cc.Caption)
                            End If
                        End If
                        '  MsgBox CStr(Font_Col(colFontsUsed2(Q)))
                        '  End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "A" Then
                            Select Case Val(Trim(CStr(Font_Allign(colFontsUsed2(Q)))))
                                Case 1
                                    cc.Caption = "Center"
                                Case 0
                                    cc.Caption = "Left"
                                Case 2
                                    cc.Caption = "Right"
                                Case 4
                                    cc.Caption = "justified"
                                Case 3
                                    cc.Caption = "justified"
                                Case Else
                                    cc.Caption = "justified"
                            End Select
                      
                        End If
                    End If
                Else
                    If Mid(cc.Name, 1, 3) = "I" & Q Then
                        cc.Visible = True
                        If Mid(cc.Name, 1, 4) = "I" & Q & "H" Then cc.Caption = "H" & CStr(Font_H(colFontsUsed2(Q)))
                        If Mid(cc.Name, 1, 4) = "I" & Q & "F" Then cc.Caption = CStr(Font_size(colFontsUsed2(Q)))
                      
                        If Mid(cc.Name, 1, 4) = "I" & Q & "B" Then
                            If CStr(Font_size(colFontsUsed2(Q))) = "False" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "U" Then
                            If CStr(Font_Under(colFontsUsed2(Q))) = "0" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                            '  If CStr(Font_Col(colFontsUsed2(Q))) = "1" Then
                            '  cc.Caption = "Black"
                            '  Else
                            If InStr(CStr(Font_Col(colFontsUsed2(Q))), "1677721") Then
                                cc.ForeColor = wdBlack
                                cc.BackColor = wdBlack
                            Else
                            
                                cc.ForeColor = CLng(cc.Caption)
                                cc.BackColor = CLng(cc.Caption)
                            End If
                        End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "A" Then
                            Select Case Val(Trim(CStr(Font_Allign(colFontsUsed2(Q)))))
                                Case 1
                                    cc.Caption = "Center"
                                Case 0
                                    cc.Caption = "Left"
                                Case 2
                                    cc.Caption = "Right"
                                Case 4
                                    cc.Caption = "justified"
                                Case 3
                                    cc.Caption = "justified"
                                Case Else
                                    cc.Caption = "justified"
                            End Select
                            'cc.Caption = CStr(Font_Allign(colFontsUsed2(Q)))
                        
                        End If
                    End If
                End If
            Next
        End With
    Next
    HeadingsBR.Show vbModeless
End Sub

Private Sub HLevel_Change()
    Temp = Me.HLevel.Value
    With Selection.ParagraphFormat
                                
        Select Case Temp
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                '                  .OutlineLevel = wdOutlineLevel1
                Call HH1
                   
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                '                     .OutlineLevel = wdOutlineLevel2
                Call HH2
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                '                    .OutlineLevel = wdOutlineLevel3
                Call HH3
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                '                  .OutlineLevel = wdOutlineLevel4
                Call HH4
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                '                  .OutlineLevel = wdOutlineLevel5
                Call HH5
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                '                  .OutlineLevel = wdOutlineLevel6
                Call HH6
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                '                .OutlineLevel = wdOutlineLevel7
                Call HH7(1)
            Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                '                    .OutlineLevel = wdOutlineLevel8
                Call HH8(1)
            Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                '                   .OutlineLevel = wdOutlineLevelBodyText
                Call HHXList(1)
        End Select

    End With
    ActiveDocument.Paragraphs(Me.parac.Value - 1).Range.Select
    If Me.NextH.Enabled = True Then Me.NextH.SetFocus

End Sub

 

Private Sub LastH_Click()

    If Application.Documents.Count < 1 Then Exit Sub
   
    On Error Resume Next
    Dim Doc As Document
    Dim para As Paragraph
    Dim k, kk As Integer
    '''
    
  
    k = Me.parac.Value
   
    '  Me.parac.Value = k
    If k >= 1 Then
        Me.parac.Value = k - 1
        Me.HLevel.Value = ""
    Else
        Me.parac.Value = k
      
    End If
    If Me.parac.Value = 0 Then

        Load MASSAGE_BOX
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Aditional Heading was not detected "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
       End If
       MASSAGE_BOX.Show
 
        Me.NextH.SetFocus
        Me.parac.Value = 1
        Exit Sub
    End If



    With ActiveDocument.Range
        Set Doc = ActiveDocument
        If Me.parac.Value > 0 Then
   
            For k = Me.parac.Value To 1 Step -1
                kk = 0
                Set para = Doc.Paragraphs(k)
       
                Set rng = para.Range.Words.First
                If rng Like "*|fffd||fffd||fffd||fffd||fffd|*" Or para.Range.Text Like "*|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Or para.Range.Text Like "*|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Then GoTo NXT
                ' If IsEmpty(Doc.Paragraphs(k).Range.Text) = True Or IsEmpty(Trim(Doc.Paragraphs(k).Range.Text)) = True Or Trim(Rng) Like "" Or Trim(Rng) Like "\" Or Trim(Rng) Like "/" Or Trim(Doc.Paragraphs(k).Range.Text) = "" Or Rng = " " Then
                If para.Range.Characters.Count = 1 Then
                    If para.OutlineLevel <> wdOutlineLevelBodyText Then
                        para.Range.Select
                        Call HHXList(1)
                        GoTo NXTk
                    Else
                        GoTo NXTk
                    End If
                End If
                If Doc.Paragraphs(k).Range.Hyperlinks.Count > 0 Then GoTo NXTk
                If Doc.Paragraphs(k).Range.Information(wdWithInTable) Then
                    r = Doc.Paragraphs(k).Range.TableS(1).Range.Paragraphs.Count
                    If r > 1 Then
                      
                        k = k - r + 1
                       
                        GoTo NXTk
                    Else
                        GoTo NXTk
                    End If
                End If
                
                
              
                If Left(para.Format.Style.NameLocal, 3) = "TOC" Then GoTo NXTk
    
                
                With rng
                    If Docaddonproperties.HUnderline = True And para.Range.Characters.Count > 1 And (rng.Font.Underline = wdUnderlineSingle Or rng.Font.Underline = wdUnderlineDouble) Then
                        If (Docaddonproperties.MaxWordsFlag = True And para.Range.Words.Count < Docaddonproperties.MaxWord.Value) Or (Docaddonproperties.MaxWordsFlag = False) Then
                            '    pcheck = 1
                            GoTo NXT
                        End If
                    End If
                    If Docaddonproperties.HBoldLoop = True And para.Range.Characters.Count > 2 And rng.Font.Bold = True And rng.Information(wdWithInTable) = False Then
                        If (Docaddonproperties.MaxWordsFlag = True And para.Range.Words.Count < Docaddonproperties.MaxWord.Value) Or (Docaddonproperties.MaxWordsFlag = False) Then
                            '  pcheck = 1
                            GoTo NXT
                        End If
                    End If
                    If Docaddonproperties.FontSIzeFlag = True And para.Range.Words.First.Font.Size > Val(Me.minfontsize.Text) Then  'Docaddonproperties.BodyMinFontVal Then 'Docaddonproperties.BodyMinFontVal Then
                        ' pcheck = 1
                        GoTo NXT
                    End If
                End With
           
                If Docaddonproperties.Autunumberloop = True And IsNumberedPara(para.Range) Then GoTo NXT
                If para.OutlineLevel <> wdOutlineLevelBodyText Then GoTo NXT
NXTk:
            Next k
NXT:

            para.Range.Select
   
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                If para.OutlineLevel = 10 Then
                    Me.OriginalHLevel.Value = "No Heading Level"
                Else
                    Select Case para.OutlineLevel
                        Case "1"
                            Me.OriginalHLevel.Value = "Heading Level 1"
                        Case "2"
                            Me.OriginalHLevel.Value = "Heading Level 2"
                        Case "3"
                            Me.OriginalHLevel.Value = "Heading Level 3"
                        Case "4"
                            Me.OriginalHLevel.Value = "Heading Level 4"
                        Case "5"
                            Me.OriginalHLevel.Value = "Heading Level 5"
                        Case "6"
                            Me.OriginalHLevel.Value = "Heading Level 6"
                        Case "7"
                            Me.OriginalHLevel.Value = "Heading Level 7"
                        Case "8"
                            Me.OriginalHLevel.Value = "Heading Level 8"
                        Case "10"
                            Me.OriginalHLevel.Value = "No Heading Level"
                    End Select
                End If
                 Label19.Caption = "Progress bar"
        CommandButton6.Caption = "Next"
        CommandButton5.Caption = "Previous"
        CommandButton3.Caption = "Cancel"
        Label26.Caption = "Document Headings"
            Else
                If para.OutlineLevel = 10 Then
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                Else
                    Select Case para.OutlineLevel
                        Case "1"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                        Case "2"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                        Case "3"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                        Case "4"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                        Case "5"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                        Case "6"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                        Case "7"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                        Case "8"
                            Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                        Case "10"
                            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                    End Select
                End If
            End If
            para.Range.Select
            ActiveWindow.ScrollIntoView Selection.Range, True
            'para.OutlineLevel = wdOutlineLevelBodyText
            m = para.Range.Revisions.Count
            If ActiveDocument.TrackRevisions = True And m > 1 And Docaddonproperties.trackc = True Then
                para.Range.Revisions.AcceptAll
                Me.HeadingText = para.Range.Text
                ActiveDocument.Undo
                If Trim(Me.HeadingText.Text) = "\" Or Trim(Me.HeadingText.Text) = "" Or Trim(para.Range.Text) = "" Then
                    If para.OutlineLevel <> wdOutlineLevelBodyText Then Call HHXList(1)
                    GoTo NXTk
                End If
            Else
                Me.HeadingText = para.Range.Text
                If Trim(Me.HeadingText.Text) = "\" Or Trim(Me.HeadingText.Text) = "" Or Trim(para.Range.Text) = "" Then
                    If para.OutlineLevel <> wdOutlineLevelBodyText Then Call HHXList(1)
                    GoTo NXTk
                End If
            End If
   






            Me.parac.Value = k
            ' If k <= Doc.Paragraphs.Count Then
            '     Me.parac.Value = k + 1
            '     Me.HLevel.Value = ""
            ' Else
            '   Me.parac.Value = k
      
            '  End If
        End If
    End With
ENDSUB:
    
    If Me.NextH.Enabled = True Then Me.NextH.SetFocus
    Me.HLevel.Value = ""
   
    
    para.Range.Select
    Call setDocVarPara("ParaNumber")


End Sub


Private Sub NextH_Click()
    '''
      On Error Resume Next
      Me.NextH.BackColor = &H8000000E
    Me.NextH.ForeColor = &H0
    If Application.Documents.Count < 1 Then Exit Sub

    Dim m As Variant
    Dim Doc As Document
    Dim para As Paragraph
    Dim r, k, kk As Integer
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'If Me.firstpara = 1 Then
    '   Me.parac.Value = 1
    '   Me.firstpara.Value = 0
    'Else
    '   Me.parac.Value = Me.parac.Value + 1
    
    'End If
   
    k = Me.parac.Value
   
    If Me.parac.Value > ActiveDocument.Paragraphs.Count And Me.lastk.Value = ActiveDocument.Paragraphs.Count Then
        Me.Vstage2Check.Value = 1
     If Docaddonproperties.AddinLanguage.Value = "English" Then
    MsgBox "Aditional Headings were not detected"
  Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        Exit Sub
    End If
    If Me.parac.Value > 1 And ActiveDocument.Paragraphs.Count > 1 Then Me.LastH.Enabled = True
  
    With ActiveDocument.Range
        Set Doc = ActiveDocument
        If Me.parac.Value > 0 Then
            '
            ' If Me.firstpara = 1 Then
            '    Me.parac.Value = 0
            '    Me.firstpara = 0
            'End If
            '
            
            For k = Me.parac.Value To Doc.Paragraphs.Count
                ' MsgBox (Doc.Paragraphs(k).Range.Text)
                Me.lastk.Value = k
                kk = 0
                pcheck = 0
                Set para = Doc.Paragraphs(k)
                Set rng = para.Range.Words.First
                
                If rng Like "*|fffd||fffd||fffd||fffd||fffd|*" Or para.Range.Text Like "*|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Or para.Range.Text Like "*|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*" Then GoTo NXT
                ' If IsEmpty(Doc.Paragraphs(k).Range.Text) = True Or IsEmpty(Trim(Doc.Paragraphs(k).Range.Text)) = True Or Trim(Rng) Like "" Or Trim(Rng) Like "\" Or Trim(Rng) Like "/" Or Trim(Doc.Paragraphs(k).Range.Text) = "" Or Rng = " " Or Rng = "" Or InStr(1, Rng, "^") = True Then
                If para.Range.Characters.Count = 1 Then
                    If para.OutlineLevel <> wdOutlineLevelBodyText Then
                        para.Range.Select
                        Call HHXList(1)
                        GoTo NXTk
                    Else
                        GoTo NXTk
                    End If
                    
                End If
                ''''''''''''
                If Doc.Paragraphs(k).Range.Hyperlinks.Count > 0 Then GoTo NXTk
                '''''''''''''
                If Doc.Paragraphs(k).Range.Information(wdWithInTable) Then
               
                    r = Doc.Paragraphs(k).Range.TableS(1).Range.Paragraphs.Count
                    If r > 1 Then
                        k = k + r - 1
                        GoTo NXTk
                    Else
                        GoTo NXTk
                    End If
                End If
                If Left(para.Format.Style.NameLocal, 3) = "TOC" Then GoTo NXTk
    
                If para.Range.Information(wdWithInTable) Then GoTo NXTk
                With rng
                    If Docaddonproperties.HUnderline = True And para.Range.Characters.Count > 1 And (rng.Font.Underline = wdUnderlineSingle Or rng.Font.Underline = wdUnderlineDouble) Then
                        If (Docaddonproperties.MaxWordsFlag = True And para.Range.Words.Count < Docaddonproperties.MaxWord.Value) Or (Docaddonproperties.MaxWordsFlag = False) Then
                            pcheck = 1
                            GoTo NXT
                        End If
                    End If
                    If Docaddonproperties.HBoldLoop = True And para.Range.Characters.Count > 2 And rng.Font.Bold = True And rng.Information(wdWithInTable) = False Then
                        If (Docaddonproperties.MaxWordsFlag = True And para.Range.Words.Count < Docaddonproperties.MaxWord.Value) Or (Docaddonproperties.MaxWordsFlag = False) Then
                            pcheck = 1
                            GoTo NXT
                        End If
                    End If
                    If Docaddonproperties.FontSIzeFlag = True And para.Range.Words.First.Font.Size > Val(Me.minfontsize.Text) Then 'Docaddonproperties.BodyMinFontVal Then
                        pcheck = 1
                        GoTo NXT
                    End If
                End With
           
                If Docaddonproperties.Autunumberloop = True And IsNumberedPara(para.Range) Then
                    pcheck = 1
                    GoTo NXT
                End If
                If para.OutlineLevel <> wdOutlineLevelBodyText Then
                    pcheck = 1
                    GoTo NXT
                End If
            
NXTk:
            Next k
            
NXT:
            
            
            If k = Doc.Paragraphs.Count And pcheck = 0 Then
               Load MASSAGE_BOX
                If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Aditional Heading was not detected"
  Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
                MASSAGE_BOX.Show
                 Me.Vstage2Check.Value = 1
              
                Exit Sub
            End If
            para.Range.Select
            If SelectionAtEndOfDocument And pcheck = 0 Then
                Load MASSAGE_BOX
                 If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Aditional Heading was not detected"
  Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
               End If
                MASSAGE_BOX.Show
                 Me.Vstage2Check.Value = 1
               
                Exit Sub
            End If
            ''
            ' If Trim(Me.HeadingText.Text) = "\" Or Trim(Me.HeadingText.Text) = "" Or Trim(para.Range.Text) = "" Or para.Range.Text = "" Then
            If Trim(para.Range.Text) = "" Or para.Range.Text = "" Or rng = "^12" Or rng = "^13" Then
                If para.OutlineLevel <> wdOutlineLevelBodyText Then Call HHXList(1)
                GoTo NXTk
            End If
            ''
              If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
    Else
        If para.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
            
           '''
      
            para.Range.Select
            ActiveWindow.ScrollIntoView Selection.Range, True
           
            m = para.Range.Revisions.Count
            If ActiveDocument.TrackRevisions = True And m > 1 And Docaddonproperties.trackc = True Then
                para.Range.Revisions.AcceptAll
                Me.HeadingText = para.Range.Text
                ActiveDocument.Undo
                
            Else
                Me.HeadingText = para.Range.Text
               
            End If
           
            para.Range.Select

            Me.parac.Value = k
            If k <= Doc.Paragraphs.Count Then
                Me.parac.Value = k + 1
                Me.HLevel.Value = ""
            Else
                Me.parac.Value = k
      
            End If
        End If
        
    End With
ENDSUB:
    
    If Me.NextH.Enabled = True Then Me.NextH.SetFocus
    Me.HLevel.Value = ""
    
    
    para.Range.Select
    Call setDocVarPara("ParaNumber")
NXTP:
End Sub
   

Private Sub pause_Click()
    'DocMetaData.pauses = 0

 

    Me.Hide

End Sub





Public Sub serchh_Click()
    ''
    Dim flip
    If ActiveDocument.Paragraphs.Count > 0 Then
         If (getDocVar("ParaNumber")) <> 0 And (getDocVar("ParaNumber")) > 1 Then
          If Docaddonproperties.AddinLanguage.Value = "English" Then
                        flip = MsgBox("Headings were allready tagged in this document and currently shown, would you like to run the procedure once again? ", vbYesNo, "WeCo")
                    Else
                        flip = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?", vbYesNo, "WeCo")
                    End If
                    If flip = vbYes Then GoTo NXT
         Else
NXT:
        ActiveDocument.Paragraphs(1).Range.Select
        Call setDocVarPara("ParaNumber")
        Me.parac.Value = 1
        
        Me.firstpara = 1

        Me.checkN = 0
        Me.HeadingText.Value = ""
        Me.OriginalHLevel.Value = ""
        Me.HLevel.Value = ""
        Me.NextH.Enabled = True
      Me.NextH.BackColor = &H8000000D
        Me.NextH.ForeColor = &H80000014
        Me.NextH.SetFocus
    End If
    End If
    Call NextH_Click
    Me.serchh.BackColor = &H8000000E
    Me.serchh.ForeColor = &H8000000D
    
End Sub

Private Sub serchh_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.parac.Value = 1
    Call NextH_Click

End Sub

Private Sub ToggleButton1_Click()
    On Error Resume Next

    Dim V As Variable
    Dim m, n As Variant
    Dim kkk, Q As Integer
    Dim para As Paragraph
    Dim colFontsUsed As New Collection
    kkk = 0
    Application.ScreenUpdating = False
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" Then
            colFontsUsed.Add Trim(getDocVarHBR(V.Name))
            kkk = kkk + 1
        End If
    Next V
    m = "BR:"
    ' For Q = 1 To colFontsUsed.Count
    '     m = m & vbNewLine & Q & "-" & colFontsUsed(Q)
    ' Next
    If kkk = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " User Predefined Heading Business Rules were not found, please record your Heading Tags and perform the action once again "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
        End If
        MASSAGE_BOX.Show
        Call speedOff(1)
        Exit Sub
    Else
     m = "The following Headings were taged as Heading Business Rules "
    'For Q =  colFontsUsed.Count To 1 step -1
    '     m = m & vbNewLine & Q & "-" & colFontsUsed(Q)
    ' Next
    End If
End Sub

Private Sub UserForm_Activate()
On Error Resume Next
ActiveDocument.Paragraphs(Me.parac).Range.Select
End Sub

Public Sub UserForm_Initialize()
On Error Resume Next
    Dim para As Paragraph
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
 
    
    On Error Resume Next
    If (getDocVar("ParaNumber")) <> 0 Then
        Me.parac = getDocVar("ParaNumber")
        ActiveDocument.Paragraphs(Me.parac).Range.Select
        Me.NextH.BackColor = &H8000000D
        Me.NextH.ForeColor = &H80000014
        Me.parac = getDocVar("ParaNumber")
        ActiveDocument.Paragraphs(Me.parac).Range.Select
        Me.HeadingText = ActiveDocument.Paragraphs(Me.parac).Range.Text
        Me.OriginalHLevel = ActiveDocument.Paragraphs(Me.parac).OutlineLevel
        ActiveDocument.Paragraphs(Val(Me.parac)).Range.Select
        ActiveDocument.Activate
        ' Me.NextH.SetFocus
       
    Else
        Me.parac = 1
        Me.serchh.BackColor = &H8000000D
        Me.serchh.ForeColor = &H80000014
        ActiveDocument.Paragraphs(1).Range.Select
        Call setDocVarPara("ParaNumber")
        Call serchh_Click
        
        ' Me.serchh.SetFocus
    End If
    ''''
    If ActiveDocument.Paragraphs(Val(Me.parac)).Range.Information(wdWithInTable) Then
   Me.parac = 1
        Me.serchh.BackColor = &H8000000D
        Me.serchh.ForeColor = &H80000014
        ActiveDocument.Paragraphs(1).Range.Select
        Call setDocVarPara("ParaNumber")
    End If
    
    ''''
    With HLevel
        .AddItem "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
        .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
    End With
    
    
    If Docaddonproperties.HLevel = True Then
        Me.HLevel.Visible = True
        Me.FH1.Visible = False
        Me.FH2.Visible = False
        Me.FH3.Visible = False
        Me.FH4.Visible = False
        Me.FH5.Visible = False
        Me.FH6.Visible = False
        Me.FHeadingSplit = False
        Me.FHX.Visible = False
    Else
        Me.HLevel.Visible = False
        Me.FH1.Visible = True
        Me.FH2.Visible = True
        Me.FH3.Visible = True
        Me.FH4.Visible = True
        Me.FH5.Visible = True
        Me.FH6.Visible = True
        Me.FHeadingSplit = True
        Me.FHX.Visible = True
    End If
    Me.lasrparac.Value = 1
    Me.checkL = 0
    Me.checkN = 0
    
    ' Me.NextH.Enabled = False
    ' Me.LastH.Enabled = False
 
    ActiveDocument.Paragraphs(ActiveDocument.Variables("ParaNumber")).Range.Select
    Set para = ActiveDocument.Paragraphs(ActiveDocument.Variables("ParaNumber"))
   
    If Docaddonproperties.headingsBRFlag = True Then
    Me.RecordH.Visible = True
     Me.HInfo.Visible = True
      Me.BRHeadingTag.Visible = True
    End If
    
    
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        If para.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "No Heading Level"
        Else
            Select Case para.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "Heading Level 1"
                Case "2"
                    Me.OriginalHLevel.Value = "Heading Level 2"
                Case "3"
                    Me.OriginalHLevel.Value = "Heading Level 3"
                Case "4"
                    Me.OriginalHLevel.Value = "Heading Level 4"
                Case "5"
                    Me.OriginalHLevel.Value = "Heading Level 5"
                Case "6"
                    Me.OriginalHLevel.Value = "Heading Level 6"
                Case "7"
                    Me.OriginalHLevel.Value = "Heading Level 7"
                Case "8"
                    Me.OriginalHLevel.Value = "Heading Level 8"
                Case "10"
                    Me.OriginalHLevel.Value = "No Heading Level"
            End Select
        End If
        Label20.TextAlign = fmTextAlignLeft
        Label20.Caption = "Properly configuring the document hierarchy allows users of assistive technologies, such as screen readers, to navigate through the various elements of a document and to visualize the ability to review the document" & vbNewLine & vbNewLine & " The H1 header level should be set to the main heading, the H2 header level to give the next heading, and so on."
        Label19.Caption = "Progress bar"
        CommandButton6.Caption = "Next"
        CommandButton5.Caption = "Previous"
        CommandButton3.Caption = "Cancel"
        Label22.Caption = "Heading Text:"
        Label23.Caption = "Requested Heading Level"
        Label26.Caption = "Document Headings"
        Label24.Caption = "Selected Paragraph Heading Level"
        NextH.Caption = "<<Next Heading"
        LastH.Caption = "Previous Heading>>"
        serchh.Caption = "Search Headings"
        FHeadingSplit.Caption = "Split Heading"
        RecordH.ControlTipText = "Record Headings Tagging"
        HInfo.ControlTipText = "Show Tagging Rules"
        BRHeadingTag.ControlTipText = "Run Headings Tagging Procedure"
    Else
        If para.OutlineLevel = 10 Then
            Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            Select Case para.OutlineLevel
                Case "1"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
                Case "2"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
                Case "3"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
                Case "4"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
                Case "5"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
                Case "6"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
                Case "7"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
                Case "8"
                    Me.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
                Case "10"
                    Me.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End Select
        End If
    End If
    Me.minfontsize.Text = Docaddonproperties.BodyMinFontVal.Value
    Me.minfontsize.Text = hAI()
    ActiveWindow.DocumentMap = True
    ActiveDocument.Paragraphs(Val(Me.parac)).Range.Select
    ActiveDocument.Activate

End Sub
Sub showDovMetaData()
    DocMetaData.Show vbModeless
    
End Sub

Private Sub Label1_Click()

End Sub


Private Sub TextBox1_Change()
    Dim Title As String
   
    Title = ActiveDocument.BuiltInDocumentProperties("Title")
    TextBox1.Text = Title
    
End Sub
Private Function Font_H(sh As String) As String
   On Error Resume Next
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder

    Font_H = arrChoices(6)
    'fbold = arrChoices(1)
    'funder = arrChoices(2)
    If Trim(Font_H) <> "" Then GoTo NXT

    Err.Clear
    Font_H = 1
NXT:
End Function

Private Function Font_size(sh As String) As Long
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder

    Font_size = arrChoices(0)
    'fbold = arrChoices(1)
    'funder = arrChoices(2)
End Function
Private Function Font_Bold(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder


    Font_Bold = arrChoices(1)

End Function
Private Function Font_Under(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Under = arrChoices(2)
End Function
Private Function Font_Allign(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Allign = arrChoices(4)
End Function
Private Function Font_Col(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Col = arrChoices(3)
End Function
Private Function fcnLongToHex(ByRef lngColor As Long) As String
    Dim hRed, hGreen, hBlue
    hRed = Hex(lngColor Mod 256)
    If Len(hRed) = 1 Then hRed = "0" & hRed
    hGreen = Hex((lngColor \ 256) Mod 256)
    If Len(hGreen) = 1 Then hGreen = "0" & hGreen
    hBlue = Hex((lngColor \ 256 \ 256) Mod 256)
    If Len(hBlue) = 1 Then hBlue = "0" & hBlue
    fcnLongToHex = hRed & hBlue & hGreen
End Function

Public Function HEXCOL2RGB(ByVal HexColor As String) As String

    'The input at this point could be HexColor = "#00FF1F"

Dim Red As String
Dim Green As String
Dim Blue As String
Dim color  As String
color = Replace(HexColor, "#", "")
    'Here HexColor = "00FF1F"

Red = Val("&H" & Mid(HexColor, 1, 2))
    'The red value is now the long version of "00"

Green = Val("&H" & Mid(HexColor, 3, 2))
    'The red value is now the long version of "FF"

Blue = Val("&H" & Mid(HexColor, 5, 2))
    'The red value is now the long version of "1F"


HEXCOL2RGB = RGB(Red, Green, Blue)
    'The output is an RGB value

End Function
Function VBA_Long_To_RGB(lColor As Long) As String
    Dim iRed, iGreen, iBlue
    
    'Convert Decimal Color Code to RGB
    iRed = (lColor Mod 256)
    iGreen = (lColor \ 256) Mod 256
    iBlue = (lColor \ 65536) Mod 256
    
    'Return RGB Code
    VBA_Long_To_RGB = iRed & "," & iGreen & "," & iBlue
End Function
Private Function hAI() As Double
    Application.ScreenUpdating = True
 
    Dim rngStory As Word.Range
    Dim rngChar As Range
    Dim fldType As Long
    Dim fSize As Single
    Dim oShp As Word.Shape
    Dim FontName As String
    Dim FBOLD, funder
    Dim lngIndex As Long
    Dim lngChar As Long
    Dim lngCharCount As Long
    Dim colFontsUsed As New Collection
    Dim colFontsUsed2 As New Collection
    Dim colFontsUsed3 As New Collection
    Dim colFontsUsed0 As New Collection
    Dim colFontsUsed00 As New Collection
    Dim colFontsUsed000 As New Collection
    Dim j As Long
    Dim Max, maxx As Long
    Dim maxxx
    Dim k As Long
    Dim ccc As Integer
    Dim fe
    Dim mes As String
    For Each rngStory In ActiveDocument.StoryRanges
        If rngStory.StoryType <> wdMainTextStory Then GoTo NEXTO
        If ActiveDocument.Paragraphs.Count > 100 Then
            ccc = 100
            Else
            ccc = ctiveDocument.Paragraphs.Count
        End If
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Font evaluation  "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        For k = 1 To ccc
             Pro_Bar.Caption = "WeCo - Font evaluation  "
            Pro_Bar.Label1.Caption = 10 & "% Completed"
           FractionComplete (0.1 + 0.9 * (k / ccc))
            If ActiveDocument.Paragraphs(k).Range.ParagraphFormat.ReadingOrder = wdReadingOrderLtr Then
                Call AddToCollection2(colFontsUsed0, ActiveDocument.Paragraphs(k).Range.Font.Size)
                Call AddToCollection(colFontsUsed00, ActiveDocument.Paragraphs(k).Range.Font.Size)
            Else
                Call AddToCollection2(colFontsUsed0, ActiveDocument.Paragraphs(k).Range.Font.SizeBi)
                Call AddToCollection(colFontsUsed00, ActiveDocument.Paragraphs(k).Range.Font.SizeBi)
            End If
        Next
        mes = ""
  
        For j = colFontsUsed00.Count To 1 Step -1
            Max = 0
            For k = colFontsUsed0.Count To 1 Step -1
                If colFontsUsed0(k) = colFontsUsed00(j) Then Max = Max + 1
    
            Next
            If Max > maxx Then
                maxx = Max
                maxxx = colFontsUsed00(j)
            End If
            Call AddToCollection(colFontsUsed000, colFontsUsed00(j) & "-" & Max)
        Next
     
        hAI = Val(maxxx)
NEXTO:
    Next
       Unload Pro_Bar
    Application.ScreenUpdating = True
End Function
Private Sub NewAddToCollection(cl As Collection, ItmStr As String)
    Dim k As Long
  
       
    cl.Add Item:=ItmStr, After:=cl.Count
        
    cl.Add Item:=ItmStr
End Sub
Private Sub UpdateCollection(cl As Collection, ItmStr As String, hh As String)
On Error Resume Next
    Dim k As Long
    For k = 1 To cl.Count
        If cl(k) = ItmStr Then 'Exit Sub
      '  If ItmStr < cl(k) Then
          
            cl.Remove (k)
              cl.Add Item:=ItmStr & "," & hh, Before:=k
            Exit Sub
        End If
    Next k
  
End Sub

Private Sub AddToCollection(cl As Collection, ItmStr As String)
    Dim k As Long
    For k = 1 To cl.Count
        If cl(k) = ItmStr Then Exit Sub
        If ItmStr < cl(k) Then
            cl.Add Item:=ItmStr, Before:=k
            Exit Sub
        End If
    Next k
    cl.Add Item:=ItmStr
End Sub

Private Sub AddToCollection2(cl As Collection, ItmStr As String)
    Dim k As Long
    For k = 1 To cl.Count
        '  If cl(k) = ItmStr Then Exit Sub
        If ItmStr < cl(k) Then
            cl.Add Item:=ItmStr, Before:=k
            Exit Sub
        End If
    Next k
    cl.Add Item:=ItmStr
End Sub
Attribute VB_Name = "DocMetaData"
Attribute VB_Base = "0{18D2B4E9-C37B-4B6A-B585-2DF4C2DC84F1}{2CDC684E-4745-4AD0-84EA-1FD3CCDBFDB4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Sub CommandButton1_Click()
    ''
    On Error Resume Next
    Dim mme As String
    mme = ActiveDocument.FullName
    Application.DisplayAlerts = wdAlertsNone
    Dim w As Words
    Dim astory
    Application.ScreenUpdating = False
    Application.Options.Pagination = False
    
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
   
    ActiveDocument.BuiltInDocumentProperties("Author") = Me.DocAuthor
    If Me.LanguageListBox <> "" Then
        ActiveDocument.BuiltInDocumentProperties("language") = Me.LanguageListBox.Value
      
    End If
    If DocMetaData.docTitle.Value = "" And Docaddonproperties.vDocTitleForce = True Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = "Cant proceed before Document Title will be set"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.docTitle.SetFocus
        Exit Sub
    End If
    If DocMetaData.DocFont.Value = "" And Docaddonproperties.VFont_force = True Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = "Can't Proceed without Font Setting"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.DocFont.SetFocus
        Exit Sub
    
    End If
    
    Pro_Bar.Label1.Visible = True
    If Docaddonproperties.BackupFileFlag = True Then
        Call SaveIt(1)
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - File Backuping "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        Pro_Bar.Label1.Caption = 50 & "% Completed"
        FractionComplete (0.5)
        Pro_Bar.Label1.Caption = 100 & "% Completed"
        FractionComplete (1)
        Unload Pro_Bar
    End If
   
    DoEvents
    If Me.DocFont.Value <> "" Then
        For Each astory In ActiveDocument.StoryRanges
            Selection.WholeStory
            Selection.Font.Name = Me.DocFont
        Next
    End If
    If Me.DelEmptyrows = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Remove empty paragraphs proccessing "
        FractionComplete (0.1)
        FractionComplete (0.5)
        Call DeleteEmptyParas(1)
        Unload Pro_Bar
    End If
    ''
    If Me.ItallicConvert = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Italic font converting  proccessing "
        FractionComplete (0.1)
        Call ItalicFontControl(1)
        FractionComplete (0.9)
        Unload Pro_Bar
    End If
    If Me.RemoveUnderline = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Underline  converting  proccessing "
        FractionComplete (0.1)
        Call UnderFontControl(1)
        FractionComplete (0.9)
        Unload Pro_Bar
    End If
    
    
    If Me.DeDoublSpaces = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
         
        Pro_Bar.Caption = "WeCo - Delete multiple spaces "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        Call EliminateMultipleSpaces(1)
    
        Pro_Bar.Label1.Caption = 50 & "% Completed"
        FractionComplete (0.5)
        DoEvents
        Pro_Bar.Label1.Caption = 100 & "% Completed"
        FractionComplete (1)
        Unload Pro_Bar
    End If
    
    
    If Me.GrayScale = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Color contrast proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        Call createGrayscaletDoc(1)
        Unload Pro_Bar
    End If
    If Me.MinLineSpaceFlag = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        Call minlinespace(1)
        
        DoEvents
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.5)
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.6)
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.75)
        Unload Pro_Bar
    End If
    If Me.BodyMinFont = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Minimum Document Body font size proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.2)
        Call BodyMinFontControl(1)
        Unload Pro_Bar
    End If
   
    If Me.FootNotesMinFont = True Then
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Minimum Document FootNotes font size proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.2)
        Call FNMinFontControl(1)
        Unload Pro_Bar
    End If
    If Docaddonproperties.SmartReplaceFlag = True Then
        Load SmartReplace
        Call SmartReplace_Auto(1)
    End If
    If checkGRHL(1) = True Then
          
        If Docaddonproperties.AutoHL = True Then
            Application.ScreenUpdating = False
            Unload Pro_Bar
            Pro_Bar.Show vbModeless
            Pro_Bar.Caption = "WeCo - update hyperlinks "
            Pro_Bar.Label1.Caption = 10 & "% Completed"
            FractionComplete (0.1)
            Call HL_Auto(1)
            Application.ScreenUpdating = True
            Unload Pro_Bar
        End If
    End If
    Application.ScreenUpdating = True
    'Call Tablewrap(1)
    ActiveDocument.Paragraphs(1).Range.Select
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
   
    Me.Hide
    Documents(mme).Activate
    Unload DocHeading
    DocHeading.Show vbModeless
    DoEvents
    If Docaddonproperties.AddinLanguage.Value = "English" Then
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Headings" & Chr(10)
    Else
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Chr(10)
    End If
    DoEvents
    If Docaddonproperties.savebystep = True Then ActiveDocument.Save
    Application.StatusBar = False
    Application.Options.Pagination = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = wdAlertsAll
End Sub



Private Sub CommandButton3_Click()
     
    Me.Hide
    Unload Me
End Sub

Private Sub docTitle_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    ActiveDocument.BuiltInDocumentProperties("title") = Me.docTitle
End Sub

Private Sub HELPB_Click()
    If Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
        Me.FORMHELP.Visible = True
        Me.Frame1.Visible = False
        Me.HELPB.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        Me.FORMHELP.Visible = False
        Me.Frame1.Visible = True
        Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Public Sub UserForm_Initialize()
    
    With DocFormat
        .AddItem "PDF"
        .AddItem "Word"
    '    .AddItem "Form"
    End With
    If Docaddonproperties.DocFormat.Value = "Word" Then
        Me.DocFormat.ListIndex = 1
    Else
        Me.DocFormat.ListIndex = 0
    End If
    If Docaddonproperties.DOCORPDF.Value = True Then
        Me.DocFormat.Enabled = True
       
    Else
        Me.DocFormat.Enabled = False
    End If
    If Docaddonproperties.DelEmptyrows.Value = True Then
        Me.DelEmptyrows.Enabled = True
        Me.DelEmptyrows = True
    Else
        Me.DelEmptyrows.Enabled = False
        Me.DelEmptyrows = False
    End If
    If Docaddonproperties.DeDoublSpaces.Value = True Then
        Me.DeDoublSpaces.Enabled = True
        Me.DeDoublSpaces = True
    Else
        Me.DeDoublSpaces.Enabled = False
        Me.DeDoublSpaces.Value = False
    End If
 
    If Docaddonproperties.ItallicConvert.Value = True Then
        Me.ItallicConvert.Enabled = True
        Me.ItallicConvert = True
    Else
        Me.ItallicConvert.Enabled = False
        Me.ItallicConvert = False
    End If
    If Docaddonproperties.GrayScale.Value = True Then
        Me.GrayScale.Enabled = True
        Me.GrayScale = True
    Else
        Me.GrayScale.Enabled = False
        Me.GrayScale = False
    End If
    
    If Docaddonproperties.RemoveUnderline.Value = True Then
        Me.RemoveUnderline.Enabled = True
        Me.RemoveUnderline = True
    Else
        Me.RemoveUnderline.Enabled = False
        Me.RemoveUnderline = False
    End If
  
    
    
    If Docaddonproperties.MinLineSpaceFlag.Value = True Then
        Me.MinLineSpaceFlag.Enabled = True
        Me.MinLineSpaceFlag = True
        Me.minLineSpaceVal.Enabled = True
        Me.minLineSpaceVal.Value = Docaddonproperties.minLineSpaceVal.Value
    Else
        Me.MinLineSpaceFlag.Enabled = False
        Me.MinLineSpaceFlag = False
        Me.minLineSpaceVal.Enabled = False
        Me.minLineSpaceVal.Value = Docaddonproperties.minLineSpaceVal.Value
    End If
    If Docaddonproperties.BodyMinFont.Value = True Then
        Me.BodyMinFont.Enabled = True
        Me.BodyMinFont = True
        Me.BodyMinFontVal.Enabled = True
        Me.BodyMinFontVal.Value = Docaddonproperties.BodyMinFontVal.Value
    Else
        Me.BodyMinFont.Enabled = False
        Me.BodyMinFont = False
        Me.BodyMinFontVal.Enabled = False
        Me.BodyMinFontVal.Value = Docaddonproperties.BodyMinFontVal.Value
    End If
   
    If Docaddonproperties.FootNotesMinFont.Value = True Then
        Me.FootNotesMinFont.Enabled = True
        Me.FootNotesMinFont = True
        Me.FootNotesMinFontVal.Enabled = True
        Me.FootNotesMinFontVal.Value = Docaddonproperties.FootNotesMinFontVal.Value
    Else
        Me.FootNotesMinFont.Enabled = False
        Me.FootNotesMinFont = False
        Me.FootNotesMinFontVal.Enabled = False
        Me.FootNotesMinFontVal.Value = Docaddonproperties.FootNotesMinFontVal.Value
    End If
    Application.ScreenUpdating = False: Application.Options.Pagination = False: Application.CheckLanguage = False
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "WeCo - Accessibilty wizard Initialize "
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.1)
   
    
  
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.2)
    DoEvents
    If InStrRev(ActiveDocument.Name, ".") <> 0 And ActiveDocument.BuiltInDocumentProperties("title").Value = "" Then   '
        Me.docTitle = Left(ActiveDocument.Name, InStrRev(ActiveDocument.Name, ".") - 1)
      
        DoEvents
    Else
        Me.docTitle = ActiveDocument.BuiltInDocumentProperties("title").Value
    
        DoEvents
    End If
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.5)
    DoEvents
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.7)
     
    Me.DocAuthor = ActiveDocument.BuiltInDocumentProperties("Author").Value
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.75)
    DoEvents
    
    
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.8)
    With DocFont
       
        If Docaddonproperties.F_Arial = True Then .AddItem "Arial"
        If Docaddonproperties.F_Verdana = True Then .AddItem "Verdana"
        If Docaddonproperties.F_Tahoma = True Then .AddItem "Tahoma"
        If Docaddonproperties.F_Helvetica = True Then .AddItem "Helvetica"
        If Docaddonproperties.F_DAVID = True Then .AddItem "David"
        If Docaddonproperties.F_Calibri = True Then .AddItem "Calibri"
        If Docaddonproperties.F_Other_1 = True Then .AddItem Docaddonproperties.F_Other_List1.Value
        If Docaddonproperties.F_Other_2 = True Then .AddItem Docaddonproperties.F_Other_List2.Value
    End With
   
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.9)
    
     
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (1)
    Pro_Bar.Hide
    Unload Pro_Bar
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        Label22.Caption = "General"
        Label20.TextAlign = fmTextAlignLeft
        Label20.Caption = "The process of making a document accessible to people with visual impairments begins with defining the document so that users who use assistive technology can consume the information contained in it.For example, settings such as the language of the document and the direction of reading may dramatically affect the ability of users of screen readers to consume the content. " & vbNewLine & vbNewLine & "Make sure that the title of the document matches the essence of the document as this is the first information to be read to the user in a screen reader." & vbNewLine & vbNewLine & "The various options must be selected according to the organization's information accessibility policy." & vbNewLine & "Note that some settings may affect the layout of the document."
        Label19.Caption = "Progress bar"
        CommandButton1.Caption = "Next"
        CommandButton3.Caption = "Cancel"
        DocFormat.Left = 100
        Label23.Left = 4
        Label23.Caption = "Publication format"
        Label23.TextAlign = fmTextAlignLeft
        Label1.Caption = "Document Title"
        Label1.Left = 6
        Label1.TextAlign = fmTextAlignLeft
        DocLanguage.Caption = "Documument Language"
        DocLanguage.Left = 6
        DocLanguage.TextAlign = fmTextAlignLeft
        Label2.Caption = "Author"
        Label2.TextAlign = fmTextAlignLeft
        Label2.Left = 6
        Label15.Caption = "Font Enforcement"
        Label15.Left = 6
        Label15.TextAlign = fmTextAlignLeft
        DelEmptyrows.Caption = "Remove Empty lines"
        DelEmptyrows.TextAlign = fmTextAlignRight
        DelEmptyrows.Left = 2
        DelEmptyrows.alignment = fmTextAlignLeft
        
        DeDoublSpaces.Caption = "Remove double spaces"
        DeDoublSpaces.TextAlign = fmTextAlignLeft
        DeDoublSpaces.Left = 2
        DeDoublSpaces.alignment = fmAlignmentRight
        ItallicConvert.Caption = "Remove Italic Formating"
        ItallicConvert.TextAlign = fmTextAlignLeft
        ItallicConvert.Left = 2
        ItallicConvert.alignment = fmAlignmentRight
        RemoveUnderline.Caption = "Remove Underlines"
        RemoveUnderline.TextAlign = fmTextAlignLeft
        RemoveUnderline.Left = 2
        RemoveUnderline.alignment = fmAlignmentRight
        GrayScale.Caption = "Convert to B&W"
        GrayScale.TextAlign = fmTextAlignLeft
        GrayScale.Left = 2
        GrayScale.alignment = fmAlignmentRight
        MinLineSpaceFlag.Caption = "Min Line Space"
        MinLineSpaceFlag.TextAlign = fmTextAlignLeft
        MinLineSpaceFlag.Left = 2
        MinLineSpaceFlag.alignment = fmAlignmentRight
        minLineSpaceVal.Left = 133
        BodyMinFont.Caption = "Min BodyText Font size"
        BodyMinFont.TextAlign = fmTextAlignLeft
        BodyMinFont.Left = 2
        BodyMinFont.alignment = fmAlignmentRight
        BodyMinFontVal.Left = 133
        FootNotesMinFont.Caption = "Min footNotes Font size"
        FootNotesMinFont.TextAlign = fmTextAlignLeft
        FootNotesMinFont.Left = 2
        FootNotesMinFont.alignment = fmAlignmentRight
        FootNotesMinFontVal.Left = 133
        
        With LanguageListBox
            .AddItem "English"
            .AddItem "Hebrew'"
            .AddItem "French"
            .AddItem "Russian"
            .AddItem "Spanish"
            .AddItem "Arabic"
        End With
        Me.LanguageListBox.ListIndex = 0 ') = True
    Else
        With LanguageListBox
            .AddItem "|fffd||fffd||fffd||fffd||fffd|"
            .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
            .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
            .AddItem "|fffd||fffd||fffd||fffd||fffd|"
            .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
            .AddItem "|fffd||fffd||fffd||fffd||fffd|"
        End With
        Me.LanguageListBox.ListIndex = 0 ') = True
    End If
    Application.ScreenUpdating = True
    Me.docTitle.SetFocus
    'Application.Options.Pagination = True
End Sub

Public Function checkGRHL(n As Integer) As Boolean
    Dim astory As Range
    checkGRHL = False
    For Each astory In ActiveDocument.StoryRanges
     
            If astory.InlineShapes.Count > 0 Then checkGRHL = True
            If astory.ShapeRange.Count > 0 Then checkGRHL = True
             If astory.Hyperlinks.Count > 0 Then checkGRHL = True
    Next
End Function

Attribute VB_Name = "DocMetaDataMoudle"
Public gobjRibbon As IRibbonUI
Public B1 As Boolean
Public B2 As Boolean
Public B3 As Boolean
Public B4 As Boolean
Public B5 As Boolean
Public B6 As Boolean
Public HS As Integer
Public BX As Boolean

Public Sub OnRibbonLoad(objRibbon As IRibbonUI)
On Error Resume Next

'If getAdmSetting("HStatus") = "True" Then

Set gobjRibbon = objRibbon

B1 = False
B2 = False
B3 = False
B4 = False
B5 = False
B6 = False
BX = False
Call Register_Event_Handler2(1)
'End If
'Call callingProcedureMSWordObjLibrary(1)
'Err.Clear
End Sub








Sub PopOuterTable2(Tbl As Table)
    Dim t As Table
    For Each t In Tbl.Parent.TableS
        If Tbl.Range.InRange(t.Range) And Tbl.nestingLevel > 1 Then
            t.ConvertToText wdSeparateByParagraphs, False

            Exit Sub
        End If
    Next t

End Sub



Sub TablesDesciption(X As Long)
    '
    ' RipOutTables Macro
    ' Macro to find and delete tables
    Dim I As Integer
    Dim oTable As Table
    I = 1
    For Each oTable In ActiveDocument.TableS
        oTable.Select
 
        oTableDesc = InputBox("Please enter table alternative description", "Accessibility", "Table " & I)
        oTable.Title = "Table " & I
        oTable.Descr = oTableDesc
        'atable.Rows.ConvertToText Separator:=wdSeparateByParagraphs
  
 
 
        I = I + 1
    Next oTable

End Sub










Sub setFontAndSize(X As Long)
    '
    ' setFontAndSize Macro
    ' need to add dropdown list for selecting the font (from san serif list of fonts)
    cFont = "Arial"
    Selection.WholeStory
    Selection.Font.Size = 12
    Selection.Font.Name = cFont
    Options.DefaultHighlightColorIndex = wdNoHighlight
    Selection.Range.HighlightColorIndex = wdNoHighlight
End Sub
Sub alignment(X As Long)
    ' Alignment Macro'
    Selection.WholeStory
    Selection.ParagraphFormat.alignment = wdAlignParagraphRight
End Sub

Sub delEmptyLines(X As Long)
    ' remove all the empty row in the word doc
    Selection.WholeStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "^l"
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchByte = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = False
        .MatchFuzzy = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
End Sub

Sub delEmptyLineParaAndspaces(X As Long)

    Dim MyRange As Range, oTable As Table, oCell As Cell

    With Selection.Find
        .Text = "^13{2,}"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
        .Execute Replace:=wdReplaceAll
    End With

    Set MyRange = ActiveDocument.Paragraphs(1).Range
    If MyRange.Text = vbCr Then MyRange.Delete

    Set MyRange = ActiveDocument.Paragraphs.Last.Range
    If MyRange.Text = vbCr Then MyRange.Delete

    For Each oTable In ActiveDocument.TableS
  

        'Set a range to the para following the current table
        Set MyRange = oTable.Range
        MyRange.Collapse wdCollapseEnd
        'if para after table empty, delete it
        If MyRange.Paragraphs(1).Range.Text = vbCr Then
            MyRange.Paragraphs(1).Range.Delete
        End If

        'Set a range to the para preceding the current table
        Set MyRange = oTable.Range
        MyRange.Collapse wdCollapseStart
        MyRange.Move wdParagraph, -1
        'if para before table empty, delete it
        If MyRange.Paragraphs(1).Range.Text = vbCr Then
            MyRange.Paragraphs(1).Range.Delete
        End If

    Next oTable

    ' remove doubble spaces from doc
    Selection.WholeStory
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "  "
        .Replacement.Text = " "
        .Forward = True
        .Wrap = wdFindAsk
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchKashida = False
        .MatchDiacritics = False
        .MatchAlefHamza = False
        .MatchControl = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll


End Sub
Sub ReadAllRows(X As Long)
    Dim NbRows As Integer
    Dim NbColumns As Integer
    Dim I, j As Integer
    Dim SplitStr() As String

    Dim col1 As String
    Dim col2 As String
    Dim col3 As String
    Dim col4 As String

    'note : my table here is a public value that i get thanks to bookmarks
    NbRows = Table.rows.Count
    NbColumns = Table.Columns.Count

    For I = 3 To NbRows
        'We put each value of each columns in a dim
        'We do that to remember previously entered row value if the application encounters an error
        'Because of merged rows, some cells on each row will not exist and return an error
        'When the application encounters an error, it just proceeds to next column
        'As previous existing value of this column was stocked in a Dim, we can get the full row at the end of the column loop
        For j = 1 To NbColumns
            On Error GoTo ErrorHandler

            SplitStr = Split(Table.Cell(I, j).Range.Text, Chr(13))
            Select Case j
                Case 1:
                    col1 = SplitStr(0)
                Case 2:
                    col2 = SplitStr(0)
                Case 3:
                    col3 = SplitStr(0)
                Case 4:
                    col4 = SplitStr(0)

                    'ect...
            End Select
NextRow:
        Next j

        'We have here all the values of the line
        MsgBox "col1: " & col1 & Chr(10) & _
            "col2: " & col2 & Chr(10) & _
            "col3: " & col3 & Chr(10) & _
            "col4: " & col4 & Chr(10)
    Next I

    'This Error handler will skip the whole Select Case and thus will proceed towards next cell
ErrorHandler:
    If Err.Number = 5941 Then
        Err.Clear
        Resume NextRow
    End If

End Sub
Sub headingStyle(X As Long)
    Selection.HomeKey wdStory
    With Selection.Find
        Do While .Execute(FindText:="[0-9]{1,}.[0-9]{1,}.[0-9]{1,}.[1-9]{1,}^t[A-z]{1,}", Forward:=True, _
            MatchWildcards:=True, Wrap:=wdFindContinue) = True
            With Selection
                .Paragraphs(1).Style = wdStyleHeading4
                .Text = Mid(.Text, InStr(.Text, vbTab) + 1)
            End With
        Loop
    End With
    With Selection.Find
        Do While .Execute(FindText:="[0-9]{1,}.[0-9]{1,}.[1-9]{1,}^t[A-z]{1,}", Forward:=True, _
            MatchWildcards:=True, Wrap:=wdFindContinue) = True
            With Selection
                .Paragraphs(1).Style = wdStyleHeading3
                .Text = Mid(.Text, InStr(.Text, vbTab) + 1)
            End With
        Loop
    End With
    With Selection.Find
        Do While .Execute(FindText:="[0-9]{1,}.[1-9]{1,}^t[A-z]{1,}", Forward:=True, _
            MatchWildcards:=True, Wrap:=wdFindContinue) = True
            With Selection
                .Paragraphs(1).Style = wdStyleHeading2
                .Text = Mid(.Text, InStr(.Text, vbTab) + 1)
            End With
        Loop
    End With
    With Selection.Find
        Do While .Execute(FindText:="[0-9]{1,}.0^t", Forward:=True, _
            MatchWildcards:=True, Wrap:=wdFindContinue) = True
            With Selection
                .Paragraphs(1).Style = wdStyleHeading1
                .Text = Mid(.Text, InStr(.Text, vbTab) + 1)
            End With
        Loop
    End With
End Sub


Sub TablesPopoutTool(X As Long)
    '

   
    Dim Tbl, oTable As Table
    Dim var As Boolean
   
    With ActiveDocument
        For Each Tbl In ActiveDocument.TableS
            If Tbl.nestingLevel > 1 Then
                Dim rngTemp As Range
                Set rngTemp = Tbl.Range
                ' Expand rngTemp to the outermost table containing tbl
                Do While rngTemp.TableS(1).nestingLevel > 1
                    ' Expand the range one character beyond the nested table
                    rngTemp.MoveEnd wdCharacter, 1
                    ' .Tables(1) now refers to the containing table; expand rngTemp
                    ' to that entire table
                    Set rngTemp = rngTemp.TableS(1).Range
                Loop
                ' Convert ONLY the outermost table's content to text
                rngTemp.TableS(1).ConvertToText Separator:=wdSeparateByParagraphs, _
                    NestedTables:=False
                ' Clean up object variables and return TRUE
                If Not (rngTemp Is Nothing) Then Set rngTemp = Nothing
                If Not (Tbl Is Nothing) Then Set Tbl = Nothing
            Else
            End If
                
        Next Tbl
    End With
End Sub

Sub PopOuterTable(Tbl As Word.Table)
    If Tbl.nestingLevel = 1 Then
        'Nothing to do, clean up objects and return FALSE
        If Not (Tbl Is Nothing) Then Set Tbl = Nothing
        'PopOuterTable = False
        Exit Sub
    End If
    Dim rngTemp As Range
    Set rngTemp = Tbl.Range
    ' Expand rngTemp to the outermost table containing tbl
    Do While rngTemp.TableS(1).nestingLevel > 1
        ' Expand the range one character beyond the nested table
        rngTemp.MoveEnd wdCharacter, 1
        ' .Tables(1) now refers to the containing table; expand rngTemp
        ' to that entire table
        Set rngTemp = rngTemp.TableS(1).Range
    Loop
    ' Convert ONLY the outermost table's content to text
    rngTemp.TableS(1).ConvertToText Separator:=wdSeparateByParagraphs, _
        NestedTables:=False
    ' Clean up object variables and return TRUE
    If Not (rngTemp Is Nothing) Then Set rngTemp = Nothing
    If Not (Tbl Is Nothing) Then Set Tbl = Nothing
    'PopOuterTable = True
End Sub
Sub ConvertTablesToOLE(X As Long)
    Dim rgeTable As Range
 
    With ActiveDocument
        Do While .TableS.Count > 0
            'Set range to first table and cut table
            Set rgeTable = .TableS(1).Range
            .TableS(1).Range.Cut
 
            'Create OLE
            rgeTable.PasteSpecial Placement:=XLInLine, _
                dataType:=XLPasteOLEObject
        Loop
    End With
 
End Sub
Sub UpOrDown(control As IRibbonControl, ByRef returnedVal)
Select Case control.ID
Case "BcustomButton2"
returnedVal = B1

Case "BcustomButton3"
returnedVal = B2
Case "BcustomButton4"
returnedVal = B3
Case "BcustomButton5"
returnedVal = B4
Case "BcustomButton6"
returnedVal = B5
Case "BcustomButton7"
returnedVal = B6
Case "BcustomButton8"
returnedVal = BX
End Select
End Sub
Sub H1(control As IRibbonControl, pressed As Boolean)
    On Error Resume Next
    Call Register_Event_Handler2(1)
    B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False

    gobjRibbon.Invalidate
   
    Dim para As Range
    Set para = Selection.Range
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then
    Call HHXList(1)
    para.Select
    Call HH1
    Else
    para.Select
    Call HH1
    End If
  
End Sub
Sub H2(control As IRibbonControl, pressed As Boolean)
     On Error Resume Next
     Call Register_Event_Handler2(1)
    B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
    gobjRibbon.Invalidate
   On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
   If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel2 Then
    Call HHXList(1)
    para.Select
    Call HH2
    Else
    para.Select
    Call HH2
    End If
   
End Sub
Sub H3(control As IRibbonControl, pressed As Boolean)
    '
 On Error Resume Next
    Call Register_Event_Handler2(1)
  B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
    gobjRibbon.Invalidate
    
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel3 Then
    Call HHXList(1)
    para.Select
    Call HH3
    Else
    para.Select
    Call HH3
    End If
  
End Sub
Sub H4(control As IRibbonControl, pressed As Boolean)
    '
  On Error Resume Next
    Call Register_Event_Handler2(1)
    B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
gobjRibbon.Invalidate
 
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel4 Then
    Call HHXList(1)
    para.Select
    Call HH4
    Else
    para.Select
    Call HH4
    End If

End Sub
Sub H5(control As IRibbonControl, pressed As Boolean)
  On Error Resume Next
    Call Register_Event_Handler2(1)
 
    B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
    gobjRibbon.Invalidate
    
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel5 Then
    Call HHXList(1)
    para.Select
    Call HH5
    Else
    para.Select
    Call HH5
    End If
End Sub
Sub H6(control As IRibbonControl, pressed As Boolean)
  On Error Resume Next
    Call Register_Event_Handler2(1)
    B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
    gobjRibbon.Invalidate
    On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    If para.ParagraphFormat.OutlineLevel <> 10 And para.ParagraphFormat.OutlineLevel <> wdOutlineLevel6 Then
    Call HHXList(1)
    para.Select
    Call HH6
    Else
    para.Select
    Call HH6
    End If
End Sub
Sub H7(control As IRibbonControl)
    '
    Call HH7(1)
    
End Sub

Sub H8(control As IRibbonControl)
    '
    Call HH8(1)
    
End Sub
Sub HX(control As IRibbonControl, pressed As Boolean)
  On Error Resume Next
    Call Register_Event_Handler2(1)
   B1 = False
    B2 = False
    B3 = False
    B4 = False
    B5 = False
    B6 = False
    BX = False
    gobjRibbon.Invalidate
    
    Call HHXList(1)
End Sub

Sub HXLIST(control As IRibbonControl)
 On Error Resume Next
    Dim para As Range
    Set para = Selection.Range
    para.Select
    Call HHXList(1)
End Sub
Sub GetStyleDescription(X As Long)
    Dim showMe As Variant
    showMe = Selection.Style.Description
    MsgBox showMe
End Sub

Sub Word_ExportPDF(X As Long)
    On Error Resume Next
    Dim picalign As String
    ' Call speedOn(1)
    Dim CurrentFolder As String
    Dim FileName As String
    Dim myPath As String
    Dim UniqueName As Boolean
    Dim pic As InlineShape
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (0.1)
    ActiveDocument.BuiltInDocumentProperties("Keywords") = "Produced By WeCo Office Accessibilty"
    ''''
    If Docaddonproperties.AccPic = False And Docaddonproperties.HeaderPic = False Then GoTo NXTP

    If ActiveDocument.Paragraphs(1).Range.ParagraphFormat.alignment = wdAlignParagraphLeft And ActiveDocument.Paragraphs(1).Range.ParagraphFormat.ReadingOrder = wdReadingOrderLtr Then
        picalign = "RIGHT"
    Else
        picalign = "LEFT"
    End If
  
    If Docaddonproperties.AccPic = True Then
        Selection.HomeKey Unit:=wdStory
        
        Selection.InlineShapes.AddPicture FileName:= _
            Application.StartupPath & "\ACCCOMP.png", LinkToFile:=False, _
            SaveWithDocument:=True
       
        Set pic = ActiveDocument.InlineShapes(1)
        ''
    
        ''
        Selection.TypeParagraph
        If picalign = "LEFT" Then
            pic.Range.ParagraphFormat.alignment = wdAlignParagraphLeft
           
        Else
            pic.Range.ParagraphFormat.alignment = wdAlignParagraphRight
             
        End If
       
    
        If Docaddonproperties.HeaderPic = True Then
            pic.AlternativeText = DocHeaderText.HeaderText & vbNewLine & DocHeaderText.FooterText
        Else
            pic.AlternativeText = "Decorative" 'pic.Decorative = msoTrue
        End If
        ActiveDocument.Paragraphs(1).Range.Select
        ActiveDocument.Paragraphs(1).Range.Font.Underline = wdUnderlineNone
        Call HHXList(1)
        ActiveDocument.Paragraphs(1).Range.Font.Size = 2
        ActiveDocument.Paragraphs(1).Range.ParagraphFormat.SpaceAfter = 0
        ActiveDocument.Paragraphs(1).Range.ParagraphFormat.SpaceBefore = 12 '''''''''''''''''
        ActiveDocument.Paragraphs(1).Range.ParagraphFormat.LineSpacing = 2
    Else
        If Docaddonproperties.HeaderPic = True Then
            Selection.HomeKey Unit:=wdStory
            Selection.InlineShapes.AddPicture FileName:= _
                Application.StartupPath & "\AccHeader.png", LinkToFile:=False, _
                SaveWithDocument:=True
      
            Set pic = ActiveDocument.InlineShapes(1)
      
            Selection.TypeParagraph
            If picalign = "LEFT" Then
                pic.Range.ParagraphFormat.alignment = wdAlignParagraphLeft
            Else
                pic.Range.ParagraphFormat.alignment = wdAlignParagraphRight
            End If
            pic.AlternativeText = DocHeaderText.HeaderText & vbNewLine & DocHeaderText.FooterText
            pic.ConvertToShape
            ActiveDocument.Paragraphs(1).Range.Select
            Call HHXList(1)
            ActiveDocument.Paragraphs(1).Range.Font.Size = 2
            ActiveDocument.Paragraphs(1).Range.ParagraphFormat.SpaceAfter = 0
            ActiveDocument.Paragraphs(1).Range.ParagraphFormat.SpaceBefore = 0
            ActiveDocument.Paragraphs(1).Range.ParagraphFormat.LineSpacing = 2
        End If
    End If
   
    '''
NXTP:
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (0.3)
    Call TableswitchOn(1)
    UniqueName = False
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (0.5)
    'Store Information About Word File
    myPath = ActiveDocument.FullName
    If Docaddonproperties.SavePathFlag = True Then
       CurrentFolder = ActiveDocument.Path & "\"
    Else
NXTF:
        With Application.FileDialog(msoFileDialogFolderPicker)
            If .Show = -1 Then ' if OK is pressed
                CurrentFolder = .SelectedItems(1) & "\"
           
            End If
        End With
 
    
        If CurrentFolder = "" Then ' if a file was chosen
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = " Please select a Folder"
   
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
            GoTo NXTF
        End If
    End If
    FileName = Mid(myPath, InStrRev(myPath, "\") + 1, _
        InStrRev(myPath, ".") - InStrRev(myPath, "\") - 1)

    'Does File Already Exist?
    Do While UniqueName = False
        DirFile = CurrentFolder & FileName & ".pdf"
        If Len(Dir(DirFile)) <> 0 Then
            UserAnswer = MsgBox("File Already Exists! Click " & _
                "[Yes] to override. Click [No] to Rename.", vbYesNoCancel)
      
            If UserAnswer = vbYes Then
                UniqueName = True
            ElseIf UserAnswer = vbNo Then
                Do
                    'Retrieve New File Name
                    FileName = InputBox("Provide New File Name " & _
                        "(will ask again if you provide an invalid file name)", _
                        "Enter File Name", FileName)
          
                    'Exit if User Wants To
                    If FileName = "False" Or FileName = "" Then Exit Sub
                Loop While ValidFileName(FileName) = False
            Else
                Exit Sub 'Cancel
            End If
        Else
            UniqueName = True
        End If
    Loop
  
    'Save As PDF Document
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (0.7)
    ' Call speedOn(1)
    On Error GoTo ProblemSaving
    ActiveDocument.ExportAsFixedFormat _
        OutputFileName:=CurrentFolder & FileName & ".pdf", ExportFormat:= _
        wdExportFormatPDF, OpenAfterExport:=True, OptimizeFor:= _
        wdExportOptimizeForPrint, Range:=wdExportAllDocument, From:=1, To:=1, _
        Item:=wdExportDocumentWithMarkup, IncludeDocProps:=True, KeepIRM:=True, _
        CreateBookmarks:=wdExportCreateHeadingBookmarks, DocStructureTags:=True, _
        BitmapMissingFonts:=True, UseISO19005_1:=False
  
    On Error GoTo 0
    Call speedOff(1)
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (0.9)
    Pro_Bar.Caption = "WeCo - Generate PDF File "
    FractionComplete (1)
    Unload Pro_Bar
    'Confirm Save To User
    With ActiveDocument
        FolderName = Mid(.Path, InStrRev(.Path, "\") + 1, Len(.Path) - InStrRev(.Path, "\"))
    End With
    '
    ActiveDocument.ActiveWindow.Activate
    Application.Visible = True
    '
    pdexportMsg.Msg.Caption = FolderName
    pdexportMsg.Show vbModeless

    Call TableswitchOff(1)
  
    If Docaddonproperties.HeaderPic = True Or Docaddonproperties.AccPic = True Then
        pic.Delete
        Selection.HomeKey Unit:=wdStory
        Selection.Delete Unit:=wdCharacter, Count:=1
    End If
    Call speedOff(1)
    Exit Sub

    'Error Handlers
ProblemSaving:
    MsgBox "There was a problem saving your PDF. This is most commonly caused" & _
        " by the original PDF file already being open."
    Call TableswitchOff(1)
    Call speedOff(1)
    Exit Sub
    Call speedOff(1)
End Sub
Function ValidFileName(FileName As String) As Boolean

    Dim TempPath As String
    Dim Doc As Document

    'Determine Folder Where Temporary Files Are Stored
    TempPath = Environ("TEMP")


    'File Name is Valid
    ValidFileName = True

    Exit Function

    'ERROR HANDLERS
InvalidFileName:
    'File Name is Invalid
    ValidFileName = False

End Function
Sub Deleemptylines(X As Long)
    Selection.WholeStory
    With Selection.Find
        .Text = "^13{2,}"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
        .Execute Replace:=wdReplaceAll
    End With

End Sub

Public Sub DeleteEmptyParas(X As Long)
    On Error Resume Next
    Dim MyRange As Range, oTable As Table, oCell As Cell
    ActiveDocument.StoryRanges(wdMainTextStory).Select
    With Selection.Find
        .Text = "^13{2,}"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
        .Execute Replace:=wdReplaceAll
    End With

    Set MyRange = ActiveDocument.Paragraphs(1).Range
    If MyRange.Text = vbCr Then MyRange.Delete

    Set MyRange = ActiveDocument.Paragraphs.Last.Range
    If MyRange.Text = vbCr Then MyRange.Delete

    For Each oTable In ActiveDocument.TableS
#If VBA6 Then
        'The following is only compiled and run if Word 2000 or 2002 is in use
        'It speeds up the table and your code
        oTable.AllowAutoFit = False
#End If

        'Set a range to the para following the current table
        Set MyRange = oTable.Range
        MyRange.Collapse wdCollapseEnd
        'if para after table empty, delete it
        If MyRange.Paragraphs(1).Range.Text = vbCr Then
            MyRange.Paragraphs(1).Range.Delete
        End If

        'Set a range to the para preceding the current table
        Set MyRange = oTable.Range
        MyRange.Collapse wdCollapseStart
        MyRange.Move wdParagraph, -1
        'if para before table empty, delete it
        If MyRange.Paragraphs(1).Range.Text = vbCr Then
            MyRange.Paragraphs(1).Range.Delete
        End If

    Next oTable

End Sub

Public Sub EliminateMultipleSpaces(X As Long)
    'If something goes wrong, go to the errorhandler
    On Error GoTo ErrorHandler
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    'Checks the document for excessive spaces between words
  
    With Selection
        .HomeKey Unit:=wdStory
   
         
      '  With .Find
      '      'This time its looking for excessive spaces after a paragraph mark
      '      .Text = "^w"
      '      .Replacement.Text = " "
      '      .MatchWildcards = False
      '      .Wrap = wdFindStop
      '      .Format = False
      '      .Forward = True
      '      'Execute the replace
      '      .Execute Replace:=wdReplaceAll
      '  End With
       With .Find
            .ClearFormatting
            .Replacement.ClearFormatting
             'Here is where it is actually looking for spaces between words
            .Text = " [ ]@([! ])"
             'This line tells it to replace the excessive spaces with one space
            .Replacement.Text = " \1"
            .MatchWildcards = True
            .Wrap = wdFindStop
            .Format = False
            .Forward = True
             'execute the replace
            .Execute Replace:=wdReplaceAll
        End With
    End With
  
ErrorHandler:
    With Selection
        .ExtendMode = False
        .HomeKey Unit:=wdStory
    End With
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)

End Sub



Sub AutoNumber(X As Long)
    Dim para As Paragraph, rng As Range, iLvl As Long
    Application.ScreenUpdating = False

    

    With ActiveDocument.Range
        For Each para In .Paragraphs
            Set rng = para.Range.Words.First
            wl = ""
            para.OutlineLevel = wdOutlineLevelBodyText
            With rng
                
                If IsNumeric(.Text) Then
                    While .Characters.Last.Next.Text Like "[0-9. " & vbTab & "]"
                        .End = .End + 1
                    Wend
                    iLvl = UBound(Split(.Text, "."))
                    If IsNumeric(Split(.Text, ".")(UBound(Split(.Text, ".")))) Then iLvl = iLvl + 1
                    If iLvl < 10 Then
                        wl = "WdOutlineLevel" & iLvl
                        '.Text = vbNullString
                        ' Paragraph.OutlineLevel1 = wl
                        
                    End If
                     
                End If
                If rng.Font.Underline = wdUnderlineSingle Then GoTo NXT
            End With
           
            Select Case iLvl
                Case "1"
                    para.OutlineLevel = wdOutlineLevel1
                Case "2"
                    para.OutlineLevel = wdOutlineLevel2
                Case "3"
                    para.OutlineLevel = wdOutlineLevel3
                Case "4"
                    para.OutlineLevel = wdOutlineLevel4
                Case "5"
                    para.OutlineLevel = wdOutlineLevel5
                Case "6"
                    para.OutlineLevel = wdOutlineLevel6
                Case "7"
                    para.OutlineLevel = wdOutlineLevel7
                Case "8"
                    para.OutlineLevel = wdOutlineLevel8
            End Select
NXT:
            para.OutlineLevel = wdOutlineLevel2
        Next
    End With
    Application.ScreenUpdating = True


End Sub




Sub ReportAllStyles(X As Long)
    Dim sty As Style, StrAttr As String, rng As Range
    StrAttr = "Style Name" & vbTab & "Type" & vbTab & "Built In" & vbTab & "In Use"
    With ActiveDocument
        For Each sty In .Styles
            With sty
                StrAttr = StrAttr & vbCr & .NameLocal & vbTab
                Select Case .Type
                    Case wdStyleTypeCharacter:     StrAttr = StrAttr & "Character" & vbTab
                    Case wdStyleTypeLinked:        StrAttr = StrAttr & "Linked" & vbTab
                    Case wdStyleTypeList:          StrAttr = StrAttr & "List" & vbTab
                    Case wdStyleTypeParagraph:     StrAttr = StrAttr & "Paragraph" & vbTab
                    Case wdStyleTypeParagraphOnly: StrAttr = StrAttr & "ParagraphOnly" & vbTab
                    Case wdStyleTypeTable:         StrAttr = StrAttr & "Table" & vbTab
                End Select
                Select Case .BuiltIn
                    Case True:                     StrAttr = StrAttr & "Y" & vbTab
                    Case Else:                     StrAttr = StrAttr & "N" & vbTab
                End Select
                Select Case .InUse
                    Case True:                     StrAttr = StrAttr & "Y"
                    Case Else:                     StrAttr = StrAttr & "N"
                End Select
            End With
        Next
        Set rng = .Characters.Last
        With rng
            .InsertAfter vbCr
            .Collapse wdCollapseEnd
            .Text = StrAttr
            .ConvertToTable Separator:=vbTab, NumColumns:=4, AutoFit:=True, _
                AutoFitBehavior:=wdAutoFitContent, DefaultTableBehavior:=wdWord9TableBehavior
            With .TableS(1)
                With .rows(1)
                    .HeadingFormat = True
                    .Range.Font.Bold = True
                End With
                .Borders.Enable = False
                .rows.alignment = wdAlignRowCenter
                .Sort ExcludeHeader:=True, CaseSensitive:=False, LanguageID:=wdLanguageNone, _
                    FieldNumber:="Column 2", SortFieldType:=wdSortFieldAlphanumeric, SortOrder:=wdSortOrderAscending, _
                    FieldNumber2:="Column 3", SortFieldType2:=wdSortFieldAlphanumeric, SortOrder2:=wdSortOrderAscending, _
                    FieldNumber3:="Column 4", SortFieldType3:=wdSortFieldAlphanumeric, SortOrder3:=wdSortOrderAscending
            End With
        End With
    End With
End Sub
Public Sub CopyHeadingsInNewDoc(control As IRibbonControl)
    Dim docOutline As Word.Document
    Dim docSource As Word.Document
    Dim rng As Word.Range

    Dim astrHeadings As Variant
    Dim strText As String
    Dim longLevel As Integer
    Dim longItem As Integer

    Set docSource = ActiveDocument
    Set docOutline = Documents.Add

    ' Content returns only the
    ' main body of the document, not
    ' the headers and footer.
    Set rng = docOutline.Content
    astrHeadings = _
        docSource.GetCrossReferenceItems(wdRefTypeHeading)

    For intItem = LBound(astrHeadings) To UBound(astrHeadings)
        ' Get the text and the level.
        strText = Trim$(astrHeadings(intItem))
        intLevel = GetLevel(CStr(astrHeadings(intItem)))

        ' Add the text to the document.
        rng.InsertAfter strText & vbNewLine

        ' Set the style of the selected range and
        ' then collapse the range for the next entry.
        ' rng.Style = "Heading " & intLevel
        ' rng.Collapse wdCollapseEnd
    Next intItem
End Sub

Private Function GetLevel(strItem As String) As Integer
    ' Return the heading level of a header from the
    ' array returned by Word.

    ' The number of leading spaces indicates the
    ' outline level (2 spaces per level: H1 has
    ' 0 spaces, H2 has 2 spaces, H3 has 4 spaces.

    Dim strTemp As String
    Dim strOriginal As String
    Dim longDiff As Integer

    ' Get rid of all trailing spaces.
    strOriginal = RTrim$(strItem)

    ' Trim leading spaces, and then compare with
    ' the original.
    strTemp = LTrim$(strOriginal)

    ' Subtract to find the number of
    ' leading spaces in the original string.
    longDiff = Len(strOriginal) - Len(strTemp)
    GetLevel = (longDiff / 2) + 1
End Function





Public Sub Languagedetection(X As Long)
    With ActiveDocument
        MsgBox "This is " & .Range.LanguageID
        If .LanguageDetected = True Then
            X = MsgBox("This document has already " _
                & "been checked. Do you want to check " _
                & "it again?", vbYesNo)
            If X = vbYes Then
                .LanguageDetected = False
                .DetectLanguage
            End If
        Else
            .DetectLanguage
        End If
        MsgBox "This is " & .Range.LanguageID
   
    End With
End Sub


Public Function IsNumberedPara(rOf As Range) As Boolean
    If rOf Is Nothing Then ' if the document doesn't have numbered sections, this will cause changes to be enumerated in the whole thing
        IsNumberedPara = True
    ElseIf rOf.ListFormat.ListString <> "" Then
        If Asc(rOf.ListFormat.ListString) <> 63 Then
            IsNumberedPara = True
        End If
    End If
End Function

Public Sub DeleteEmptyTablerowsandcolumns(X As Long)
    Application.ScreenUpdating = False
    Dim Tbl As Table, cel As Cell, I As Long, n As Long, fEmpty As Boolean
    With ActiveDocument
        For Each Tbl In .TableS
            n = Tbl.Columns.Count
            For I = n To 1 Step -1
                fEmpty = True
                For Each cel In Tbl.Columns(I).Cells
                    If Len(cel.Range.Text) > 2 Then
                        fEmpty = False
                        Exit For
                    End If
                Next cel
                If fEmpty = True Then Tbl.Columns(I).Delete
            Next I
        Next Tbl
    End With
    With ActiveDocument
        For Each Tbl In .TableS
            n = Tbl.rows.Count
            For I = n To 1 Step -1
                fEmpty = True
                For Each cel In Tbl.rows(I).Cells
                    If Len(cel.Range.Text) > 2 Then
                        fEmpty = False
                        Exit For
                    End If
                Next cel
                If fEmpty = True Then Tbl.rows(I).Delete
            Next I
        Next Tbl
    End With
    Set cel = Nothing: Set Tbl = Nothing
    Application.ScreenUpdating = True
End Sub



Sub AutoHyperLINK(X As Long)


    Dim Doc As Document
    Dim para As Paragraph
    Dim k As Integer
    Dim t As String
    With Selection
           
        If .Hyperlinks(1).Address Like "*www.*" Then .Hyperlinks(1).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If .Hyperlinks(1).Address Like "*mailto:*" Or .Hyperlinks(1).Address Like "*mailto:*" Or .Hyperlinks(1).Address Like "*@*.*" Or .Hyperlinks(1).TextToDisplay Like "*@*.*" Then .Hyperlinks(1).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
     
        
        
  
  
    



    End With
End Sub
Sub AutoHyperLINK2(X As Long)

    On Error Resume Next
    Dim Doc As Document
    Dim para As Paragraph
    Dim k As Integer
    Dim t, m As String
    With ActiveDocument.Range
        Set Doc = ActiveDocument
        Dim shp As Word.InlineShape
        If ActiveDocument.Hyperlinks.Count > 0 Then
            For k = 1 To ActiveDocument.Hyperlinks.Count
                ActiveDocument.Hyperlinks(k).Range.Select
                m = ActiveDocument.Hyperlinks(k).ScreenTip
                If IsNull(Trim(m)) Then
                    If ActiveDocument.Hyperlinks(k).Address Like "*www.*" Then ActiveDocument.Hyperlinks(k).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If ActiveDocument.Hyperlinks(k).Address Like "*mailto:*" Then ActiveDocument.Hyperlinks(k).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Next k
        
        
  
  
    


        End If

    End With
       Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " HyperLinks Auto update was completed"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
 
End Sub
Sub Word_ExportDOC(X As Long)
   
    Dim CurrentFolder As String
    Dim FileName As String
    Dim myPath As String
    Dim UniqueName As Boolean
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    UniqueName = False

    'Store Information About Word File
    myPath = ActiveDocument.FullName
    
    If Docaddonproperties.SavePathFlag = True Then
       CurrentFolder = ActiveDocument.Path & "\"
    Else
NXTF:
        With Application.FileDialog(msoFileDialogFolderPicker)
            If .Show = -1 Then ' if OK is pressed
                CurrentFolder = .SelectedItems(1) & "\"
           
            End If
        End With
 
    
        If CurrentFolder = "" Then ' if a file was chosen
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = " Please select a Folder"
   
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
            GoTo NXTF
        End If
    End If
    
    'CurrentFolder = ActiveDocument.Path & "\"
    FileName = Mid(myPath, InStrRev(myPath, "\") + 1, _
        InStrRev(myPath, ".") - InStrRev(myPath, "\") - 1)

    'Does File Already Exist?
    Do While UniqueName = False
        DirFile = CurrentFolder & FileName & " |fffd||fffd||fffd||fffd||fffd| " & ".docx"
        If Len(Dir(DirFile)) <> 0 Then
            UserAnswer = MsgBox("File Already Exists! Click " & _
                "[Yes] to override. Click [No] to Rename.", vbYesNoCancel)
      
            If UserAnswer = vbYes Then
                UniqueName = True
            ElseIf UserAnswer = vbNo Then
                Do
                    'Retrieve New File Name
                    FileName = InputBox("Provide New File Name " & _
                        "(will ask again if you provide an invalid file name)", _
                        "Enter File Name", FileName)
          
                    'Exit if User Wants To
                    If FileName = "False" Or FileName = "" Then Exit Sub
                Loop While ValidFileName(FileName) = False
            Else
                Exit Sub 'Cancel
            End If
        Else
            UniqueName = True
        End If
    Loop
  
    'Save As PDF Document
    On Error GoTo ProblemSaving
    ActiveDocument.SaveAs (DirFile)
   
   
    On Error GoTo 0
  
   

    'Confirm Save To User
    With ActiveDocument
        FolderName = Mid(.Path, InStrRev(.Path, "\") + 1, Len(.Path) - InStrRev(.Path, "\"))
    End With
  
    MsgBox "doc Saved in the Folder: " & CurrentFolder

    Exit Sub

    'Error Handlers
ProblemSaving:
    MsgBox "There was a problem saving your doc. This is most commonly caused" & _
        " by the original doc file already being open."
    Exit Sub
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub


Sub FormatLinks(X As Long)
    Dim h As Hyperlink

    For Each h In ActiveDocument.Hyperlinks
        h.Range.Select                                      ' (A)
        Selection.ClearFormatting                           ' (B)

        '    H.Range.Style = ActiveDocument.Styles("Hyperlink")  ' (C)
    Next h
End Sub

Sub RestoreHyperlinkStyle(X As Long)
    Dim hl As Hyperlink
    For Each hl In ActiveDocument.Hyperlinks
        hl.Range.Font.colorIndex = wdBlue
        hl.Range.Font.Bold = False
        On Error Resume Next
    Next
End Sub
Sub TableswitchOn(X As Long)
    '

    On Error Resume Next
    Application.ScreenUpdating = False
    Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tbl.Select
        With Tbl
            If IsNull(.Descr) Then
                GoTo NXT
            Else
                .Title = .Descr
                .Descr = ""
                
            End If
        
NXT:
        End With
    Next
    Unload Pro_Bar
    Application.ScreenUpdating = True
    
End Sub
Sub TableswitchOff(X As Long)

    Application.ScreenUpdating = False
    On Error Resume Next
    Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tbl.Select
        With Tbl
            If IsNull(.Title) Then
                GoTo NXT
            Else
                .Descr = .Title
                .Title = ""
            End If
        
NXT:
        End With
    Next
    Unload Pro_Bar
    Application.ScreenUpdating = True
    
End Sub



Sub TableTagger1(control As IRibbonControl)
    '
 '   Call speedOn(1)
  
    Dim TCCHECK As Integer
    Dim Tbl As Table
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
     Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)

        Tbl.Select
        '  With Tbl
        '      .ApplyStyleFirstColumn = False
        '      .ApplyStyleHeadingRows = False
        '  End With
        '  Tbl.Select
        With Tbl
            .rows(1).HeadingFormat = True
            .ApplyStyleFirstColumn = True
            .ApplyStyleHeadingRows = True
        End With
        Tbl.Select
        With Selection
            addBookmarkToTables "Title_", True
        End With
    Next
    ' For Each Tbl In ActiveDocument.Tables
        
    '  Next
    
   
    If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
     Unload Pro_Bar
    Call speedOff(1)
End Sub
Sub TableTagger2(control As IRibbonControl)
    '
   ' Call speedOn(1)
  
    Dim TCCHECK As Integer
    Dim Tbl As Table
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
   Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tbl.Select
        '  With Tbl
        '      .ApplyStyleFirstColumn = False
        '      .ApplyStyleHeadingRows = False
        '  End With
        '  Tbl.Select
        With Tbl
            .rows(1).HeadingFormat = False
            .ApplyStyleFirstColumn = True
            .ApplyStyleHeadingRows = True
        End With
        Tbl.Select
        With Selection
            addBookmarkToTables "ColumnTitle_", False
        End With
    Next
    ' For Each Tbl In ActiveDocument.Tables
        
    '  Next
    
   
    If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
   Unload Pro_Bar
    Call speedOff(1)
End Sub
Sub TableTagger3(control As IRibbonControl)
    '
    'Call speedOn(1)
  
    Dim TCCHECK As Integer
    Dim Tbl As Table
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
    Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tbl.Select
        '  With Tbl
        '      .ApplyStyleFirstColumn = False
        '      .ApplyStyleHeadingRows = False
        '  End With
        '  Tbl.Select
        With Tbl
            .rows(1).HeadingFormat = True
            .ApplyStyleFirstColumn = False
            .ApplyStyleHeadingRows = True
        End With
        Tbl.Select
        With Selection
            addBookmarkToTables "RowTitle_", True
        End With
    Next
    ' For Each Tbl In ActiveDocument.Tables
        
    '  Next
    
   
    If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
     Unload Pro_Bar
    Call speedOff(1)
End Sub
Sub TableTagger4(control As IRibbonControl)
    '
    Call speedOn(1)
  
    Dim TCCHECK As Integer
    Dim Tbl As Table
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
     Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tbl.Select
        '  With Tbl
        '      .ApplyStyleFirstColumn = False
        '      .ApplyStyleHeadingRows = False
        '  End With
        '  Tbl.Select
        With Tbl
            .rows(1).HeadingFormat = False
            .ApplyStyleFirstColumn = False
            .ApplyStyleHeadingRows = False
        End With
        Tbl.Select
        With Selection
            addBookmarkToTables "layout_", False
        End With
    Next
    ' For Each Tbl In ActiveDocument.Tables
        
    '  Next
    
   
    If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
     Unload Pro_Bar
  '  Call speedOff(1)
End Sub

Sub Tablewrap(X As Long)
    '
  Dim k As Integer
     Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
   
    
   Application.ScreenUpdating = False
    Dim TCCHECK As Integer
    Dim Tbl As Table
    Dim I As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
      Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo -Table wrap proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.1)
    For I = 1 To ActiveDocument.TableS.Count
      If ActiveDocument.TableS(I).rows.WrapAroundText = True Then
        ActiveDocument.TableS(I).Select
        ''
         FractionComplete (0.5 + 0.5 * I / ActiveDocument.TableS.Count)
   
  '  Selection.Cut
  '  Selection.TypeParagraph
  '  Selection.MoveLeft Unit:=wdCharacter, Count:=1
  '  Selection.EndKey Unit:=wdLine
   
 '  Selection.PasteAndFormat (wdFormatOriginalFormatting)
 ''   Selection.Cut
 ''   Selection.EndKey Unit:=wdLine
 ''   Selection.PasteAndFormat (wdFormatOriginalFormatting)
 '  Selection.MoveUp Unit:=wdLine, Count:=1
   ' Selection.EndKey Unit:=wdLine
 '   Selection.TypeParagraph
   'Selection.MoveUp Unit:=wdLine, Count:=1
  '  k = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
  '  Selection.TypeParagraph
  '  ActiveDocument.TableS(i).Select

   ' Selection.Cut
  '  Selection.TypeParagraph
  ' Selection.EndKey Unit:=wdLine
   'ActiveDocument.Paragraphs(k + 1).Range.Select
   ' Selection.MoveDown Unit:=wdLine, Count:=1
   ' Selection.PasteAndFormat (wdFormatOriginalFormatting)
   
   
       
       ActiveDocument.TableS(I).rows.WrapAroundText = True
         ActiveDocument.TableS(I).rows.WrapAroundText = False
       ActiveDocument.TableS(I).AutoFitBehavior (wdAutoFitWindow)
          DataObj.SetText ""
    DataObj.PutInClipboard
       End If
    Next
    ' For Each Tbl In ActiveDocument.Tables
        
    '  Next
    
    Unload Pro_Bar
    If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
 Application.ScreenUpdating = True
End Sub
''
Sub TableTagger5(control As IRibbonControl)


On Error Resume Next
     Dim DataObj As New MSForms.DataObject 'empty the clipboard
   Dim Tshade As Boolean
   Dim rng As Range
    DataObj.SetText ""
    DataObj.PutInClipboard
    Dim TCCHECK As Integer
    Dim Tbl As Table
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
    On Error Resume Next
     Unload Pro_Bar
    Dim I As Integer
    I = 0
    For Each Tbl In ActiveDocument.TableS
      I = I + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (I / ActiveDocument.TableS.Count)
        Tshade = False
        Tbl.Select
        If Tbl.rows(1).Shading.Texture = wdTextureNone And Tbl.rows(1).Shading.ForegroundPatternColor = wdColorAutomatic And Tbl.rows(1).Shading.BackgroundPatternColor = wdColorAutomatic And Tbl.Columns(1).Shading.Texture = wdTextureNone And Tbl.Columns(1).Shading.ForegroundPatternColor = wdColorAutomatic And Tbl.Columns(1).Shading.BackgroundPatternColor = wdColorAutomatic Then
        Tshade = False
        Else
        Tshade = True
        End If
        With Tbl
            If Tbl.Borders.InsideLineStyle = wdLineStyleNone And Tbl.Borders.OutsideLineStyle = wdLineStyleNone And Tshade = False Then
              .rows(1).HeadingFormat = False
            .ApplyStyleFirstColumn = False
            .ApplyStyleHeadingRows = False
            Else
            .rows(1).HeadingFormat = True
            .ApplyStyleFirstColumn = True
            .ApplyStyleHeadingRows = True
             Tbl.Select
        With Selection
            addBookmarkToTables "Title_", True
        End With
        End If
        End With
       
    Next
    
     If TCCHECK = 1 Then Call SwithchTrackChangeOn(1)
    Application.ScreenUpdating = True
    Application.Visible = True
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.CheckLanguage = True
     Unload Pro_Bar
  
    End Sub
''
Function IsUserFormLoaded(ByVal UFName As String) As Boolean
    Dim UForm As Object
    For Each UForm In VBA.UserForms
        IsUserFormLoaded = UForm.Name = UFName
        If IsUserFormLoaded Then
            Exit For
        End If
    Next
End Function


Sub DirectFormat(control As IRibbonControl)
    On Error Resume Next
    DocList.Show vbModeless
End Sub


Public Sub DeleteEmptyRows(X As Long)

    Dim oTable As Table, oRow, oCol As Range, oCell As Cell, Counter As Long, _
        NumRows, Numcol As Long, TextInRow As Boolean

    ' Specify which table you want to work on.
    Set oTable = Selection.TableS(1)
    ' Set a range variable to the first row's range
    Set oRow = oTable.rows(1).Range
    NumRows = oTable.rows.Count
    Numcol = oTable.Columns.Count
    Application.ScreenUpdating = False

    For Counter = 1 To NumRows

        ' StatusBar = "Row " & Counter
        TextInRow = False

        For Each oCell In oRow.rows(1).Cells
            If Len(oCell.Range.Text) > 2 Then
                'end of cell marker is actually 2 characters
                TextInRow = True
                Exit For
            End If
        Next oCell

        If TextInRow Then
            Set oRow = oRow.Next(wdRow)
        Else
            oRow.rows(1).Delete
        End If

    Next Counter



    Application.ScreenUpdating = True

End Sub
Sub DeleteEmptyCol(X As Long)
    Dim Tbl As Table, cel As Cell, I As Long, fEmpty As Boolean

    With ActiveDocument
        Set Tbl = Selection.TableS(1)
        'Debug.Print "--------------------------"
        For I = Tbl.Columns.Count To 1 Step -1
            'Debug.Print "Col: " & i
            fEmpty = True
            For Each cel In Tbl.Columns(I).Cells
                'Debug.Print cel.Range.Text
                If (cel.Range.Text <> Chr(13) & Chr(7)) And cel.Row.Index > 1 Then
                    fEmpty = False
                End If
                'Exit For
            Next cel
            If fEmpty = True Then
                'Debug.Print "Delete Col: " & i
                Tbl.Columns(I).Delete
            End If
        Next I
      
    End With
    Set cel = Nothing: Set Tbl = Nothing
End Sub
Function ThisTableNumber() As Integer
    Dim CurrentSelection As Long
    Dim T_Start As Long
    Dim T_End As Long
    Dim oTable As Table
    Dim j As Long
    CurrentSelection = Selection.Range.start
    For Each oTable In ActiveDocument.TableS
        T_Start = oTable.Range.start
        T_End = oTable.Range.End
        j = j + 1
        '        ThisTableNumber = "Couldn't determine table number" ' Added error message
        If CurrentSelection >= T_Start And _
            CurrentSelection <= T_End Then ' added "="
            ThisTableNumber = j
            Exit For
        End If
    Next
End Function

Sub HPLUS1(X As Long)
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Application.ScreenUpdating = False
    For Each para In ActiveDocument.Paragraphs
        With para
            If para.OutlineLevel <> wdOutlineLevelBodyText Then
                Temp = para.OutlineLevel
                
                
                
                Select Case Temp
                    Case "1"
                        .OutlineLevel = wdOutlineLevel2
                                    
                    Case "2"
                        .OutlineLevel = wdOutlineLevel3
                      
                    Case "3"
                        .OutlineLevel = wdOutlineLevel4
                        'Call H3
                    Case "4"
                        .OutlineLevel = wdOutlineLevel5
                    Case "5"
                        .OutlineLevel = wdOutlineLevel6
                    Case "6"
                        .OutlineLevel = wdOutlineLevel7
                    Case "7"
                        .OutlineLevel = wdOutlineLevel8
                End Select
            End If
           
        End With
    Next
    Application.ScreenUpdating = True
End Sub
Sub speedOn(X As Long)
    Application.ScreenUpdating = False
    Application.Visible = False
  
    Application.CheckLanguage = False
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
End Sub

Sub speedOff(X As Long)
    Application.ScreenUpdating = True
    Application.Visible = True
  
    Application.CheckLanguage = True
    '  Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
End Sub
Public Function SelectionAtEndOfDocument() As Boolean
    With Selection
        If .End = .start Then
            SelectionAtEndOfDocument = (.End = ActiveDocument.Content.End - 1)
        Else
            SelectionAtEndOfDocument = (.End = ActiveDocument.Content.End)
        End If
    End With
End Function



Public Sub MinBodyFontSize(X As Long)
Dim I As Integer
'
For I = 1 To 11
With ActiveDocument.Content.Find
    .ClearFormatting

    With .Font
        .Size = I
    End With

    .Format = True

    With .Replacement
        .ClearFormatting
        With .Font
            .Size = 12
        End With
    End With

    .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
End With
Next I
End Sub
Public Sub UnderFontControl(X As Long)
On Error Resume Next
Application.ScreenUpdating = False
Dim hl As Hyperlink

Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width
 
    '''
   With ActiveDocument.Content.Find
    .ClearFormatting
     With .Font
        .Underline = True
    End With
     With .Replacement
        .ClearFormatting
        With .Font
            .Underline = False
        End With
    End With
    .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With
    
    
    Dim I As Integer
     For I = 1 To 200
        FractionComplete (I / 200)
        Pro_Bar.Label1.Caption = I & "% Completed"
    Next
    
    For Each hl In ActiveDocument.Hyperlinks
        hl.Range.Font.Underline = wdUnderlineSingle
    Next
     FractionComplete (0.9)
    Application.ScreenUpdating = True

 

End Sub
Public Sub ItalicFontControl(X As Long)
On Error Resume Next
Application.ScreenUpdating = False
Dim I As Integer

Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width
 
    
    With ActiveDocument.Content.Find
    .ClearFormatting
     With .Font
        .Italic = True
    End With
     With .Replacement
        .ClearFormatting
        With .Font
            .Italic = False
        End With
    End With
    .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With
    For I = 1 To 200
        FractionComplete (I / 200)
        Pro_Bar.Label1.Caption = I & "% Completed"
    Next
    
     With ActiveDocument.Content.Find
    .ClearFormatting
     With .Font
        .ItalicBi = True
    End With
     With .Replacement
        .ClearFormatting
        With .Font
            .ItalicBi = False
        End With
    End With
    .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With
     FractionComplete (0.9)
    
 

End Sub
Public Sub BodyMinFontControl(X As Long)
On Error Resume Next
Application.ScreenUpdating = False
Dim I, m
'
m = DocMetaData.BodyMinFontVal * 2 - 1
For I = 2 To m
Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width
Selection.Find.ClearFormatting
    Selection.Find.Font.SizeBi = I / 2
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Replacement.Font.SizeBi = DocMetaData.BodyMinFontVal.Value
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchKashida = False
        .MatchDiacritics = False
        .MatchAlefHamza = False
        .MatchControl = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    'Unload Pro_Bar
 Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Minumum Font Size Proccessing "
    Selection.Find.ClearFormatting
    Selection.Find.Font.Size = I / 2
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Replacement.Font.Size = DocMetaData.BodyMinFontVal.Value
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchKashida = False
        .MatchDiacritics = False
        .MatchAlefHamza = False
        .MatchControl = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
 FractionComplete (0.1 + 0.9 * I / m)

Pro_Bar.Label1.Caption = I


Next I
'Unload Pro_Bar
End Sub

Public Sub FNMinFontControl(X As Long)
On Error Resume Next
Application.ScreenUpdating = False
Dim I, m
'
m = DocMetaData.FootNotesMinFontVal * 2 - 1
ActiveDocument.StoryRanges(wdFootnotesStory).Select
With selections
For I = 2 To m
Application.StatusBar = "Minimum Document Footnotes Font size proccessing"
Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width * 1
Selection.Find.ClearFormatting
    Selection.Find.Font.SizeBi = I / 2
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Replacement.Font.SizeBi = DocMetaData.FootNotesMinFontVal.Value
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchKashida = False
        .MatchDiacritics = False
        .MatchAlefHamza = False
        .MatchControl = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
     FractionComplete (0.1 + 0.9 * 0.5 * I / m)
  
    Selection.Find.ClearFormatting
    Selection.Find.Font.Size = I / 2
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Replacement.Font.Size = DocMetaData.FootNotesMinFontVal.Value
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchKashida = False
        .MatchDiacritics = False
        .MatchAlefHamza = False
        .MatchControl = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
 FractionComplete (0.1 + 0.9 * 0.5 * I / m)

Next I
End With
End Sub

Public Sub HL_Auto(JJ As Integer)
    Dim hl As Hyperlink
    Dim I As Integer
    Dim TCCHECK As Integer
    Dim fj
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    On Error Resume Next
    Dim astory As Range
     Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - update hyperlinks "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1)
        fj = 0.1
    For Each astory In ActiveDocument.StoryRanges
        If astory.Hyperlinks.Count > 0 Then
            For Each hl In astory.Hyperlinks
                If Trim(hl.SubAddress) <> "" Then GoTo NXT1
                For I = 1 To 55
                    If hl.Address Like getAdmSetting0("HL" & I & "Address") Or hl.Address Like getAdmSetting0("HL" & I & "Address") & "\" Or hl.Address Like getAdmSetting0("HL" & I & "Address") & "/" Then
                        hl.TextToDisplay = getAdmSetting1("HL" & I & "Address")
                        hl.ScreenTip = getAdmSetting2("HL" & I & "Address")
                        GoTo NXT1
                    End If
                Next I
NXT1:
                If Trim(hl.ScreenTip) = "" Then
                    If hl.Address Like "*www.*" Then hl.ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    If hl.Address Like "*mailto:*" Then hl.ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Next hl
        End If
         Pro_Bar.Caption = "WeCo - update hyperlinks "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (fj + 0.1)
    Next astory
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub
Public Sub SmartReplace_Auto(JJ As Integer)
    On Error GoTo ErrorHandler
    Dim TCCHECK As Integer
    Dim I As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    'Checks the document for excessive spaces between words
    For I = 1 To 15
    With Selection
        .HomeKey Unit:=wdStory
   
       With .Find
            .ClearFormatting
            .Replacement.ClearFormatting
             'Here is where it is actually looking for spaces between words
            .Text = getAdmSmartReplaceSetting0("Find" & I)
             'This line tells it to replace the excessive spaces with one space
            .Replacement.Text = getAdmSmartReplaceSetting1("Find" & I) & " "
            .MatchWildcards = True
            .Wrap = wdFindStop
            .Format = False
            .Forward = True
             'execute the replace
            .Execute Replace:=wdReplaceAll
        End With
    End With
    Next I
  
ErrorHandler:
    With Selection
        .ExtendMode = False
        .HomeKey Unit:=wdStory
    End With
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub


Sub setDocVarPara(DocVar As String)
    On Error Resume Next
    strVal = ActiveDocument.Variables(DocVar).Value
    If Err.Number = 0 Then
        
    Else
        ActiveDocument.Variables.Add DocVar, String(1000, ".")
    End If
    
   
    ActiveDocument.Variables(DocVar) = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
End Sub
Function getDocVar(DocVar As String) As Integer
    On Error Resume Next
    strVal = ActiveDocument.Variables(DocVar).Value
    If Err.Number = 0 Then
        getDocVar = 0
    Else
        ActiveDocument.Variables.Add DocVar, String(1000, ".")
    End If
    
   
    getDocVar = ActiveDocument.Variables(DocVar).Value
End Function
Sub setDocVarTable(DocVar As String)
    On Error Resume Next
    strVal = ActiveDocument.Variables(DocVar).Value
    If Err.Number = 0 Then
        
    Else
        ActiveDocument.Variables.Add DocVar, String(1000, ".")
    End If
    
   
    ActiveDocument.Variables(DocVar) = ActiveDocument.Range(0, Selection.TableS(1).Range.End).TableS.Count
End Sub
Attribute VB_Name = "DocShapes"
Attribute VB_Base = "0{89083FF0-7815-46F2-B353-1D3EAC6588D8}{4C3D3C15-A397-456D-A293-007CF3B265DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Sub HLMapping(n As Long)
    On Error Resume Next
    Dim aastory As Range
    Dim k, I As Integer
    Dim m
    singleLinkss.lbHyperlinks.Clear
    singleLinkss.lbHyperlinksCount.Clear
     singleLinkss.lbHyperlinks_Index.Clear
     singleLinkss.lbHyperlinks_story.Clear
    ''
    k = 0
    
    Application.ScreenUpdating = False
    For Each aastory In ActiveDocument.StoryRanges
        If Docaddonproperties.Links_Other = False Then
        If aastory.StoryType <> wdMainTextStory And aastory.StoryType <> wdFootnotesStory And aastory.StoryType <> wdEndnotesStory Then GoTo NXT
        End If
        If aastory.Hyperlinks.Count > 0 Then
            For I = 1 To aastory.Hyperlinks.Count
      
                aastory.Hyperlinks(I).Range.Select
                With Selection
                    If Left(.Paragraphs(1).Format.Style.NameLocal, 3) <> "TOC" Then
                        singleLinkss.lbHyperlinks.AddItem aastory.Hyperlinks(I).Address
                        k = k + 1
                        singleLinkss.lbHyperlinksCount.AddItem k
                        singleLinkss.lbHyperlinks_Index.AddItem I
                        singleLinkss.lbHyperlinks_story.AddItem aastory.StoryType
                        m = aastory.Hyperlinks(I).ScreenTip
                        If IsNull(Trim(m)) Then
                            If aastory.Hyperlinks(I).Address Like "*www.*" Then
                                aastory.Hyperlinks(I).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                            Else
                                If aastory.Hyperlinks(I).Address Like "*mailto:*" Then
                                    aastory.Hyperlinks(I).ScreenTip = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                Else
                           
                                End If
                            End If
            
                        End If
         
         
         
                    End If
                End With
       
         
         
       
        
                '   For Each Hyperlink In ActiveDocument.Hyperlinks
                '     lbHyperlinks.AddItem Hyperlink.Address
            Next
        End If
NXT:
    Next aastory
    
    Application.ScreenUpdating = True
    ActiveDocument.Activate
    '  singleLinkss.CommandButton6.SetFocus
End Sub
 

Sub GraphicsMapping1(n As Long)
    On Error Resume Next
  
    Application.ScreenUpdating = False
    Const sBkMk = "ReturnHere"
    Dim colGraphic As New Collection
   
    Dim lngSections As Long
    Dim lngSectionCounter As Long
    Dim lngMainDocInlineShapes As Long
    Dim lngMainDocShapes As Long
    Dim lngHdrInlineShapes As Long
    Dim lngHdrShapeRange As Long
    Dim lngFtrInlineShapes As Long
    Dim lngFtrShapeRange As Long
    Dim lngTotalInlineShapes As Long
    Dim lngTotalShapes As Long
    Dim sMsgText As String
    Dim k As Integer
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    
   
    'Get the number of sections in the document.
    lngSections = ActiveDocument.Sections.Count

    'Get the number of inline objects and
    'shape objects in the main document
    lngMainDocInlineShapes = ActiveDocument.InlineShapes.Count
    lngMainDocShapes = ActiveDocument.Shapes.Count

    'Insert a bookmark to return to this place in the document.
    ActiveDocument.Bookmarks.Add sBkMk, Selection.Range

    'Go to the first page of the document.
    Selection.HomeKey wdStory, wdMove

    'Cycle through all of the sections in the document
    'looking in headers and footers for graphics
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "WeCo - Graphic Elements Proccessing "
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.1)
    For lngSectionCounter = 1 To lngSections
        'Go to the header of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageHeader
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngHdrInlineShapes = lngHdrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngHdrShapeRange = lngHdrShapeRange _
            + Selection.Range.ShapeRange.Count

        'Go to the footer of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageFooter
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngFtrInlineShapes = lngFtrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngFtrShapeRange = lngFtrShapeRange _
            + Selection.Range.ShapeRange.Count

        Selection.GoTo wdGoToSection, wdGoToNext
    Next
   

    'Go to the main body of the document.
    ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument


    'Go to the bookmark that was inserted earlier.
    If ActiveDocument.Bookmarks.Exists(sBkMk) Then
        Selection.GoTo wdGoToBookmark, , , sBkMk
        ActiveDocument.Bookmarks(sBkMk).Delete
    Else
        MsgBox "The bookmark '" & sBkMk & "' does not exist."
    End If

    'Calculate the total number of inlineshape objects
    'and (shape and shaperange) objects
    lngTotalInlineShapes = lngMainDocInlineShapes _
        + lngHdrInlineShapes + lngFtrInlineShapes
    lngTotalShapes = lngMainDocShapes _
        + lngHdrShapeRange + lngFtrShapeRange

    'Include the values from the variables into the
    'text of the message
    Dim strShapeName As String
    Dim astory As Range
    Dim ishape As InlineShape
    Dim iCount, hltotal, hlNoDesc, HlOut, Hlin As Integer
    Dim hl  As Hyperlink
    Dim shp As Shape
    Dim STYPE As Integer
    On Error Resume Next
    '
    hltotal = 0
    iCount = 0
    hlNoDesc = 0
    HlOut = 0
    Hlin = 0
    Pro_Bar.Caption = "WeCo - Graphic Elements Proccessing "
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.2)
    STYPE = 0
    For Each astory In ActiveDocument.StoryRanges
        If Docaddonproperties.Links_Other = False Then
            If astory.StoryType <> 1 And astory.StoryType <> 2 And astory.StoryType <> 3 Then GoTo nextstory
        End If
        STYPE = STYPE + 1
        Pro_Bar.Caption = "WeCo - Graphic Elements Proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.2 + 0.8 * STYPE / 17)
          
   
        '  if astory.StoryType <> wdCommentsStory and astory.StoryType <>
        If astory.InlineShapes.Count >= 1 Then
            k = 0
             
            For Each ishape In astory.InlineShapes
                If astory.StoryType = wdMainTextStory Then
                
                    If ishape.Type <> wdInlineShapeLinkedPicture And ishape.Type <> wdInlineShapePicture Then
                        ishape.Select
                        Selection.Cut
                        Selection.PasteSpecial Link:=False, dataType:=wdPasteEnhancedMetafile, _
                            Placement:=wdInLine, DisplayAsIcon:=False
                    End If
                    
                
                    DataObj.SetText ""
                    DataObj.PutInClipboard
                End If
            Next
            For Each ishape In astory.InlineShapes
                If Trim(getstorytype(astory.StoryType)) <> "" Then
                k = k + 1
                iCount = iCount + 1
                Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".InlineShapes( " & k & ")")
                '     If Trim(ishape.AlternativeText) = "" Then 'And ishape.Decorative = msoFalse Then
                '       iCount = iCount + 1
                '       Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".InlineShapes( " & k & ")")
                '  '    End If
                 
                End If
        
            Next
        End If
    
        If astory.ShapeRange.Count >= 1 Then
          
            For Each shp In astory.ShapeRange
                If (shp.Type = msoTextBox Or shp.Type = msoCanvas Or shp.Type = msoLine Or shp.Type = msoAutoShape Or shp.Type = msoTextEffect Or shp.Type = msoFreeform) And Trim(shp.AlternativeText) = "" Then
              
                    If Len(shp.AlternativeText) < 3 Then
                        If Len(shp.TextFrame.TextRange.Text) < 3 Then
                            shp.AlternativeText = "Decorative"
                        Else
                
                            If Len(shp.TextFrame.TextRange.Text) > 3 Then shp.AlternativeText = shp.TextFrame.TextRange.Text
                        End If
                    End If
                End If
            Next
            k = 0
            For Each shp In astory.ShapeRange
                If Trim(getstorytype(astory.StoryType)) <> "" Then
                strShapeName = ""
                If shp.Type = msoLine Or shp.Type = msoDiagram Or shp.Type = msoFormControl Or shp.Type = msoChart Then
                shp.Name = "Shape-" & astory.StoryType & "-" & k '"Shape-" & k
                End If
                strShapeName = shp.Name
                k = k + 1
                Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".ShapeRange(" & shp.Name & ")")
                '    If InStr(strShapeName, "WordPictureWatermark") = 0 Then
                '        If Trim(shp.AlternativeText) = "" Then 'And shp.Decorative = msoFalse Then
                '            iCount = iCount + 1
                 
                
                '            Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".ShapeRange( " & shp.Name & ")")
                 
                
                '        End If
                '    End If
                End If
            Next
        End If
        '   If astory.Hyperlinks.Count >= 1 Then
        '       For Each hl In astory.Hyperlinks
        '           hltotal = hltotal + 1
        '           If Trim(hl.ScreenTip) = "" And hl.Address <> "" Then hlNoDesc = hlNoDesc + 1
        '           If hl.Address <> "" Then HlOut = HlOut + 1
        '           If hl.Address = "" And hl.SubAddress <> "" Then Hlin = Hlin + 1
        '       Next
        '   End If
nextstory:
    Next


    'Display the results of the procedure.

    k = 0
    If colGraphic.Count > 0 Then
    
        For k = 1 To colGraphic.Count
            singleShapes.PicList.AddItem colGraphic(k)
            singleShapes.PicListCount.AddItem k
        Next k
        'Enable automatic screen updates
        Application.ScreenUpdating = True
        Application.ScreenRefresh
        '   singleShapes.PicListC.Value = Val(k) - 1
        '      singleShapes.PicListC.Value = Me.PicListC.Value - 1
        singleShapes.PicListCount.ListIndex = 1
        singleShapes.PicList.ListIndex = 1
        singleShapes.PicListCount.ListIndex = 0
        singleShapes.PicList.ListIndex = 0
    End If
    Unload Pro_Bar
    singleShapes.start.Value = 1
End Sub
Private Sub AddToCollection(cl As Collection, ItmStr As String)
    Dim k As Long
    For k = 1 To cl.Count
        If cl(k) = ItmStr Then Exit Sub
        If ItmStr < cl(k) Then
            cl.Add Item:=ItmStr, Before:=k
            Exit Sub
        End If
    Next k
    cl.Add Item:=ItmStr
End Sub



Private Sub CommandButton13_Click()

End Sub



Private Sub CommandButton3_Click()
    ' DocShapes.pauses.Value = "0"
    Me.Hide
    Unload Me
End Sub


Private Sub DocFont_Click()

End Sub

Private Sub DocMetaData_Click()

End Sub

Private Sub Label3_Click()

End Sub

Private Sub Label4_Click()

End Sub

Private Sub Label5_Click()

End Sub

Private Sub LanguageListBox_Click()

End Sub

Private Sub ListBox1_Click()

End Sub

Private Sub ListBox2_Click()

End Sub

Private Sub OptionButton1_Click()

End Sub

Private Sub OptionButton3_Click()

End Sub

Private Sub OptionButton9_Click()

End Sub


Private Sub CommandButton5_Click()
      
    Me.Hide
    If ActiveDocument.TableS.Count > 0 Then
        DocTables.Show vbModeless

        If Docaddonproperties.AddinLanguage.Value = "English" Then
          ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Tables" & Chr(10)
         Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        End If
    Else
        DocHeading.Show vbModeless
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10) & Chr(10)
         If Docaddonproperties.AddinLanguage.Value = "English" Then
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Headings" & Chr(10)
    Else
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Chr(10)
    End If
    End If
End Sub





Private Sub CommandButton6_Click()
'
If Me.HLEXEC.Value = 0 And Me.GREXECHECK = 0 And Docaddonproperties.VStage4 = True Then
       Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please note: you didn't execute the the Graphic elements and HyperLinks procedures"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
              End If
               MASSAGE_BOX.Show
            
               Exit Sub
    Else
          If Me.HLEXEC.Value = 0 And Docaddonproperties.VStage4 = True Then
          Load MASSAGE_BOX
             If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please note: you didn't execute the the  HyperLinks procedure"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
   
               Exit Sub
          Else
         If Me.GREXECHECK = 0 And Docaddonproperties.VStage4 = True Then
         Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please note: you didn't execute the the Graphic elements procedure"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        End If
               MASSAGE_BOX.Show
               
               Exit Sub
               End If
          End If
    End If
    Me.Hide

   '  If DocMetaData.DocFormat.Value = "Form" Then
    '    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 4.5- |fffd||fffd||fffd||fffd||fffd| " & Chr(10)
    '    DocForms.Show vbModeless
   ' Else
      If Docaddonproperties.AddinLanguage.Value = "English" Then
         ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Final" & Chr(10)
        Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 5 - |fffd||fffd||fffd||fffd| " & Chr(10)
        End If
        
    docfinish.Show vbModeless
   ' End If
   '

    If Docaddonproperties.savebystep = True Then ActiveDocument.Save
End Sub

Private Sub Frame4_Click()

End Sub

Private Sub HELPB_Click()
    If Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
        Me.FORMHELP.Visible = True
        Me.Frame1.Visible = False
        Me.HELPB.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        Me.FORMHELP.Visible = False
        Me.Frame1.Visible = True
        Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub








Private Sub pause_Click()

    
    Me.Hide
End Sub




Public Sub SearchHyperlink_Click()
    On Error Resume Next
'''
    Dim m As Variant
    
    Me.HLEXEC.Value = 1
    If ActiveDocument.Hyperlinks.Count > 0 Then
        Me.HLSTART.Value = 0
        singleLinkss.Show vbModeless
        Call HLMapping(1)
        Me.HLSTART.Value = 1
        singleLinkss.start.Value = 1
       On Error Resume Next
         singleLinkss.lbHyperlinks.Selected(singleLinkss.lbHyperlinks.ListIndex) = False
         singleLinkss.lbHyperlinksCount.Selected(singleLinkss.lbHyperlinksCount.ListIndex) = False
        singleLinkss.lbHyperlinks.ListIndex = 0
        singleLinkss.lbHyperlinksCount.ListIndex = 0
        
    Else
      
        Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Hyperlinks was not detected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
  
    End If
End Sub

Public Sub serchh_Click()
On Error Resume Next
''
    singleShapes.Show vbModeless
    Me.PICStart.Value = 0
    Call GraphicsMapping1(1)
    On Error Resume Next
    Me.PICStart.Value = 1

    singleShapes.PicList.Selected(singleShapes.PicList.ListIndex) = False
    singleShapes.PicList.ListIndex = 0
    singleShapes.piccounter.Value = 0


End Sub




Public Function checkGRlocal(n As Integer) As Boolean
    Dim astory As Range
    checkGRlocal = False
    For Each astory In ActiveDocument.StoryRanges
        If Docaddonproperties.Pic_Other.Value = False Then
        If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdTextFrameStory And astory.StoryType Then GoTo nextstory
        End If
        If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
            checkGRlocal = True
            GoTo NXT
        End If
nextstory:
    Next
NXT:
End Function
Public Function checkHllocal(n As Integer) As Boolean
    Dim astory As Range
    checkHllocal = False
    For Each astory In ActiveDocument.StoryRanges
            If Docaddonproperties.Links_Other.Value = False Then
        If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdTextFrameStory And astory.StoryType Then GoTo nextstory
        End If
        If astory.Hyperlinks.Count > 0 Then
            checkHllocal = True
            GoTo NXT
        End If
nextstory:
    Next
NXT:
End Function
Public Sub UserForm_Initialize()
    Dim Language As String
'
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
 
   
    Me.parac2 = 1
    If checkGRlocal(1) = False Then
        Me.Frame3.Visible = False
        Me.Frame4.Top = 6
        Me.GREXECHECK.Value = 1
    End If
    If checkHllocal(1) = False Then
        Me.Frame4.Visible = False
     Me.HLEXEC.Value = 1
    End If
   
     If Docaddonproperties.AddinLanguage.Value = "English" Then
     
     Label23.Caption = "Grapic and HyperLinks"
     Label20.Caption = "Users with visual impairments who use assistive technologies, such as screen reader software, are unable to consume visual content, such as charts and images, and as part of the document accessibility process, we must provide each image or diagrams with alternate text that will include the main message we want to convey through the image or chart."
    Label20.TextAlign = fmTextAlignLeft
    Label19.Caption = "Progress bar"
        CommandButton6.Caption = "Next"
        CommandButton5.Caption = "Previous"
        CommandButton3.Caption = "Cancel"
        Frame3.Caption = " Grapic and Charts "
        serchh.Caption = "Search For Grapic Elements"
        Frame4.Caption = "HyperLinks Wizard"
        SearchHyperlink.Caption = "Search Hyperlinks"
     Else
    ' Label23.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    ' Label20.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
    'Label20.TextAlign = fmTextAlignRight
    ' Label19.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '      CommandButton6.Caption = "|fffd||fffd||fffd|"
    '      CommandButton5.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    '      CommandButton3.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    '       Frame3.Caption = " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '        serchh.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '        Frame4.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '        SearchHyperlink.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
     End If
   
 
  
   
End Sub
Sub showDovMetaData()
    DocMetaData.Show vbModeless
    
End Sub

Private Sub Label1_Click()

End Sub




Attribute VB_Name = "DocTables"
Attribute VB_Base = "0{8B00C455-C620-44A7-97CF-E00378AEBA98}{3739B901-E5E2-4141-8867-0045990CC56D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 


Private Sub CommandButton3_Click()
 
    Me.Hide
    Unload Me

End Sub



Private Sub HELPB_Click()
If Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
Me.FORMHELP.Visible = True
Me.Frame1.Visible = False
Me.HELPB.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Else
   Me.FORMHELP.Visible = False
   Me.Frame1.Visible = True
   Me.HELPB.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End If
End Sub

Private Sub CommandButton5_Click()
    Me.Hide
    Unload Me
    DocHeading.Show vbModeless
    If Docaddonproperties.AddinLanguage.Value = "English" Then
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Headings" & Chr(10)
    Else
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Chr(10)
    End If
    If Docaddonproperties.savebystep = True Then ActiveDocument.Save
    
End Sub

Private Sub CommandButton6_Click()
    If Docaddonproperties.VStage3 = True And Me.parac.Value < ActiveDocument.TableS.Count Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " Please complete the table review via the wizard "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.NextT.SetFocus
        Exit Sub
    End If
    Me.Hide
    '  'Unload Me
    If checkGRHL(1) = True Then
        Unload DocShapes
        DocShapes.Show vbModeless
         If Docaddonproperties.AddinLanguage.Value = "English" Then
         ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Grapics and HyperLinks" & Chr(10)
         Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
        End If
        '   If Docaddonproperties.savebystep = True Then ActiveDocument.Save
        ' If Docaddonproperties.AutoHL = True Then
        '     Application.ScreenUpdating = False
        '     Call HL_Auto(1)
        '      Application.ScreenUpdating = True
        '   End If
    
Else:
        'm = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")
        If Docaddonproperties.VStageAlert = True Then
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = " This Document does not includes Hyperlinks or Graphic elements, so we will skip this stage"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|"
            End If
            MASSAGE_BOX.Show
        End If
        Unload docfinish
        docfinish.Show vbModeless
        If Docaddonproperties.AddinLanguage.Value = "English" Then
         ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Final" & Chr(10)
        Else
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 5 - |fffd||fffd||fffd||fffd| " & Chr(10)
        End If
        
        
        

    
    End If
  
  
  
  
  
    
End Sub
Public Function checkGRHL(n As Integer) As Boolean
     Dim astory As Range
    checkGRHL = False
    For Each astory In ActiveDocument.StoryRanges
        If Docaddonproperties.Pic_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT1
            Else
             
                If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
NXT1:
        If Docaddonproperties.Links_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT2
            Else
               
                If astory.Hyperlinks.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.Hyperlinks.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
          
NXT2:
    Next
NXT:
End Function


Public Sub LastT_Click() '

    Dim TCCHECK As Variant
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim m, X, cc, cellscount, cellsCalc, n, XX, Y, I, j, k, UsrInput, TC, LastRow, countR, countC, LastCol, tid, iRow, iCol As Integer
    Dim Tbl, oTable As Word.Table
    Dim cel, oCell As Cell
    Dim fEmpty As Boolean
    Dim wdCell As Word.Cell
    Dim t As Table
    Dim cellcheck As Integer
      Dim UsrInput3
    Dim iZoom As Long
    Dim des, oTableDesc As String
  
    '  iZoom = ActiveWindow.View.Zoom
    ' iZoom = 65
    '  ActiveWindow.View.Zoom = iZoom
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If

    
    TC = 1
    j = 1
    tid = ""
    If Me.parac.Value <> 0 And Docaddonproperties.VStage3T = True And Me.OptionButton1 = False And Me.OptionButton2 = False And Me.OptionButton3 = False And Me.OptionButton4 = False Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " Please select table headings Tag before you proceed "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.NextT.SetFocus
        Exit Sub
    End If
    If Me.parac.Value = 1 Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " Previous Table was not found"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.NextT.Enabled = True
        Exit Sub
    Else
        With ActiveDocument
            Me.parac.Value = Me.parac.Value - 1
            For k = Me.parac.Value To 1 Step -1
                    
                Set Tbl = ActiveDocument.TableS(k)
                Tbl.Select
              
                With Selection
                  
                    If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                        Err.Number = 5991
                        GoTo mergeerror
                    End If
                End With
                With Tbl
                    cellcheck = 0
                    n = Tbl.Columns.Count
                    For I = n To 1 Step -1
                    fEmpty = True
                    
                    For Each cel In Tbl.Columns(I).Cells
                            On Error GoTo mergeerror
                            If Len(Trim(cel.Range.Text)) > 1 Then
                                fEmpty = False
                                Exit For
                            End If
                        Next cel
                                    
                    Next I
                    n = Tbl.rows.Count
                    For I = n To 1 Step -1
                        fEmpty = True
                        For Each cel In Tbl.rows(I).Cells
                            On Error GoTo mergeerror
                              If Len(Trim(cel.Range.Text)) > 1 Then
                               fEmpty = False
                               
                            End If
                        Next cel
                       Next I
           
                 
mergeerror:
                End With
                If Err.Number <> 0 Then
                    Err.Clear
                   If Docaddonproperties.tableMergeCheck = True And Tbl.Range.rows.Count * Tbl.Range.Columns.Count <> Tbl.Range.Cells.Count Then 'm = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")  'MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd|")
                        Load MASSAGE_BOX
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            MASSAGE_BOX.TextBox1.Caption = " Merged Cells was detected, please edit the Table"
                        Else
                            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                        End If
                        MASSAGE_BOX.Show
                    End If
                    '  If m = 6 Then Call TableManipulation(k)
              
            
                End If
NXT1:
                Set Tbl = ActiveDocument.TableS(k)
          
                Tbl.Select
          
                Application.ScreenUpdating = True
                Me.TableDesc.Value = Tbl.Descr
                Set Tbl = ActiveDocument.TableS(k)
                Tbl.Select
                ' If Me.TableConvert.Value = True Then
            
                Tbl.Select
                If Selection.Bookmarks.Count = 0 Then
                    If Docaddonproperties.TableHDefault = True Then
            Me.OptionButton4 = True
            Else
            Me.OptionButton4 = False
            End If
                Else
                    If Selection.Bookmarks.Exists("Title_" & "*") Then Me.OptionButton1 = True
                    If Selection.Bookmarks.Exists("ColumnTitle_" & "*") Then Me.OptionButton2 = True
                    If Selection.Bookmarks.Exists("RowTitle_" & "*") Then Me.OptionButton3 = True
                End If

                Selection.MoveUp Unit:=wdParagraph, Count:=2, Extend:=wdMove
                Application.Selection.Expand wdParagraph
                des = Application.Selection.Text
                Application.ScreenUpdating = False
                m = Selection.Range.Revisions.Count
                m = Selection.Range.Revisions.Count
                If m > 1 And Docaddonproperties.trackc = True Then
                    Selection.Range.Revisions.AcceptAll
                    des = Selection.Range.Text
                    ActiveDocument.Undo
                Else
                    des = Selection.Range.Text
                End If
                                     
                GoTo NXT2
            Next
        End With
NXT2:
   
        Set Tbl = ActiveDocument.TableS(k)
        Me.TableDesc.Value = Tbl.Descr
 
        Application.ScreenUpdating = True
   
        Tbl.Select
        Tbl.Title = "Table " & k
  
        If Trim(Me.TableDesc.Value) = "" Then
            Me.TableDesc.Value = des
    
        End If
        Tbl.Descr = Me.TableDesc.Value
        Application.ScreenUpdating = False
                      
                      

  
        If k < 1 Then
            Me.parac.Value = 1
            GoTo NXT3
        End If
    
   
  
 
        Me.parac.Value = k

 
NXT3:
   
  
        Application.ScreenUpdating = True
        Application.ScreenUpdating = True
      

    End If
   
     On Error Resume Next
    Tbl.Select
    Selection.rows.AllowBreakAcrossPages = False
    Selection.TableS(1).ApplyStyleFirstColumn = True
    Selection.rows.HeadingFormat = False
    If Me.OptionButton4 = True Then Selection.rows.HeadingFormat = False
    Selection.rows.AllowBreakAcrossPages = False
    If Me.NextT.Enabled = True Then Me.NextT.SetFocus
    Tbl.rows.HeadingFormat = False
    Tbl.Select
    ActiveWindow.ScrollIntoView Selection.Range, True
    Call setDocVarTable("DocTable")
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub


Public Sub NextT_Click()
    '
   Me.NextT.BackColor = &H8000000E
    Me.NextT.ForeColor = &H0
    Dim TCCHECK As Variant
    Dim flip As Variant
    If Application.Documents.Count < 1 Then Exit Sub
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim UsrInput2
    Dim UsrInput
    Dim Usr
    Dim oldesc As String
    On Error Resume Next
    Dim tr1, tr2, m, cc, kk, rr, cellscount, cellsCalc, n, X, XX, Y, I, j, k, TC, LastRow, countR, countC, LastCol, tid, iRow, iCol As Integer
    Dim Tbl, oTable As Word.Table
    Dim cel, oCell As Cell
    Dim fEmpty As Boolean
    Dim wdCell As Word.Cell
    Dim t As Table
    Dim objExcel, objWorkbook, ObjWorksheet As Object
    Dim iZoom As Long
    Dim des, oTableDesc As String
    Dim lay As Boolean
    Dim cellcheck As Integer
    Dim UsrInput3
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
    If Me.parac.Value > 1 Then Me.LastT.Enabled = True
    
    TC = 1
    j = 1
    tid = ""
   
    If Me.parac.Value <> 0 And Docaddonproperties.VStage3T = True And Me.OptionButton1 = False And Me.OptionButton2 = False And Me.OptionButton3 = False And Me.OptionButton4 = False Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " Please select table headings Tag before you proceed "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.NextT.SetFocus
        Exit Sub
    End If
    If Me.parac.Value > 0 Then
        Application.ScreenUpdating = False
        Set Tbl = ActiveDocument.TableS(Me.parac.Value)
        Tbl.Select
        lay = False
        If OptionButton1 = True Then
            addBookmarkToTables "Title_", True
        ElseIf OptionButton2 = True Then
            addBookmarkToTables "ColumnTitle_", False
        ElseIf OptionButton3 = True Then
            addBookmarkToTables "RowTitle_", True
         
            ''this options makes the table a layout table
        ElseIf OptionButton4 = True Then

            addBookmarkToTables "layout", True 'False
            lay = True
        End If
        ''''''
        Me.OptionButton1 = False
        Me.OptionButton2 = False
        Me.OptionButton3 = False
        If Docaddonproperties.TableHDefault.Value = True Then
            Me.OptionButton4 = True
        Else
            Me.OptionButton4 = False
        End If
     
        Tbl.rows(1).HeadingFormat = False
        Tbl.rows(1).HeadingFormat = True
     
    End If
    '**
    
    
    If Me.parac.Value < ActiveDocument.TableS.Count Then
        Me.parac.Value = Me.parac.Value + 1
    Else
      
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " Additional Tables was not found"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Tbl.rows(1).HeadingFormat = False
        Tbl.rows(1).HeadingFormat = True
        Tbl.Select
        Exit Sub
    End If
    
    With ActiveDocument
        For k = Me.parac.Value To ActiveDocument.TableS.Count
        
            Set Tbl = ActiveDocument.TableS(k)
          
            Tbl.Select
         
            '
            With Selection
                'On Error GoTo mergeerror
                If detetTableLanguae = True And Tbl.TableDirection = wdTableDirectionLtr Then
                    Tbl.Select
                    If Docaddonproperties.AddinLanguage.Value = "English" Then
                        flip = MsgBox("The Table reading order is Left to Right, there's indication that the table reading order should be Right to Left, would you like to change the reading order? ", vbYesNo, "WeCo")
                    Else
                        flip = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "WeCo")
                    End If
                    If flip = vbYes Then Call TableFlip(1)
                Else
                    If detetTableLanguae = False And Tbl.TableDirection = wdTableDirectionRtl Then
                        Tbl.Select
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            flip = MsgBox("The Table reading order is Right to Left, there's indication that the table reading order should be Left to Right, would you like to change the reading order? ", vbYesNo, "WeCo")
                        Else
                            flip = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "WeCo")
                        End If
                        If flip = vbYes Then Call TableFlip(1)
                    End If
                End If
                
                '  If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                '       Err.Number = 5991
                '       GoTo mergeerror
                '   End If
            End With
          
             Tbl.Select
           
            With Tbl
                If Docaddonproperties.tableEmptyRows = True Then
                    cellcheck = 0
                    n = Tbl.Columns.Count
               
                    For I = n To 1 Step -1
                        fEmpty = True
                    
                        For Each cel In Tbl.Columns(I).Cells
                            On Error GoTo mergeerror
                            If Len(cel.Range.Text) > 2 Then
                                fEmpty = False
                                Exit For
                            End If
                        Next cel
                        If fEmpty = True And Docaddonproperties.tableEmptyRows = True Then
                            cellcheck = cellcheck + 1
                            GoTo nxtempty
                        End If
                
                    Next I
                    n = Tbl.rows.Count
                    For I = n To 1 Step -1
                        fEmpty = True
                        For Each cel In Tbl.rows(I).Cells
                            On Error GoTo mergeerror
                            If Len(cel.Range.Text) > 2 Then
                                fEmpty = False
                                Exit For
                               
                            End If
                        Next cel
                        If fEmpty = True And Docaddonproperties.tableEmptyRows.Value = True Then
                            cellcheck = cellcheck + 1
                            GoTo nxtempty
                        End If
                    Next I
                Else
                    cellcheck = 0
                End If
nxtempty:

                If cellcheck > 0 And Docaddonproperties.tableEmptyRows.Value = True Then
                    '''''''''''''''''''''''''''''''''''''''''''''''''''
                   ' If Tbl.Columns.Count * Tbl.rows.Count <> Tbl.Range.Cells.Count Then
                    '      If Docaddonproperties.AddinLanguage.Value = "English" Then
                    '         Usr = MsgBox("This Table contains empty rows or columns but since your table contain merged Cells, it can't be modified", vbOKOnly, "")
                           
                    '        GoTo mergeerror
                    '     Else
                    '     Usr = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "")
                        
                    '     GoTo mergeerror
                    ' End If
                     'End If
                    If Docaddonproperties.AddinLanguage.Value = "English" Then
                        UsrInput3 = MsgBox("This Tables contain empty Row and\or columns, would like to delete them ?", vbYesNo, "WeCo")
                    Else
                        UsrInput3 = MsgBox("?|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbYesNo, "WeCo")
                    End If
                    
                End If
                If UsrInput3 = vbYes Then
                    Tbl.Select
                    On Error GoTo mergeerror2
                    
                    cellcheck = wecoDeletetableemptyRC()
                    On Error GoTo mergeerror2
                    If cellcheck = 1 Then
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            UsrInput3 = MsgBox("This action could not be completed, due to Merged Cells ", , "WeCo")
                        Else
                            UsrInput3 = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "WeCo")
                        End If
                        GoTo mergeerror2
                    End If
                End If
                
            
           
           
mergeerror:
 
            End With
mergeerror2:
           
            If Err.Number <> 0 Then
                Err.Clear
                On Error Resume Next
                If Docaddonproperties.tableMergeCheck = True And Tbl.Range.rows.Count * Tbl.Range.Columns.Count <> Tbl.Range.Cells.Count Then
                    Err.Clear
                    If DocMetaData.DocFormat.Value <> "Word" And Docaddonproperties.TableAlt = True Then
                        Tbl.Select
                        oldesc = ""
                        If Tbl.ID = "AccF" Then GoTo NXTB
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            UsrInput = MsgBox("Merged Cells was detected, Would you like to add instructions to this table ?", vbYesNo, "WeCo")
                        Else
                            UsrInput = MsgBox("?|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|", vbYesNo, "WeCo")
                        End If
                        If UsrInput = vbNo Then GoTo NXTT
                        
            
NXTB:
                        Application.ScreenUpdating = False
                        If Tbl.ID = "AccF" Then
                            If Docaddonproperties.AddinLanguage.Value = "English" Then
                                UsrInput2 = MsgBox("Merged Cells was detected|fffd| you allready set an instrctions to this table, would you like to edit it?", vbYesNo, "WeCo")
                            Else
                                UsrInput2 = MsgBox("?|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbYesNo, "WeCo")
                            End If
                            If UsrInput2 = vbNo Then
                                GoTo NXTT
                            Else
                                'Tbl.Cell(1, 1).Range.Select
                                Tbl.Range.Select
                                Selection.HomeKey Unit:=wdLine
                                Selection.MoveUp Unit:=wdLine, Count:=1
                                Selection.HomeKey Unit:=wdLine
                                Selection.Expand wdLine
                                oldesc = Selection.Range.InlineShapes(1).AlternativeText
                                Selection.Range.InlineShapes(1).Delete
                            End If
                            
                                
                            '  GoTo NXTT
                        Else:
                        Tbl.ID = "AccF"
                        End If
                        Application.ScreenUpdating = False
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            X = InputBox("Please add instructions to this table", "WeCo", oldesc)
                        Else
                            X = InputBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "WeCo", oldesc)
                        End If
                        With Selection
                        
                            'Tbl.Cell(1, 1).Range.Select
                            Tbl.Range.Select
                            Selection.HomeKey Unit:=wdLine
                            Selection.MoveUp Unit:=wdLine, Count:=1
                            Selection.HomeKey Unit:=wdLine

   
                            Call addpic(CStr(X))
                        End With
                        
NXTT:
                        Err.Clear
                        Application.ScreenUpdating = True
                        '    Next
                    Else
                        Load MASSAGE_BOX
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            MASSAGE_BOX.TextBox1.Caption = " Merged Cells was detected, please edit the table"
                        Else
                            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                        End If
                        MASSAGE_BOX.Show
                    End If
                End If
                ' If m = 6 Then Call TableManipulation(k)
            End If
NXT1:
            Err.Clear
            
            Selection.MoveUp Unit:=wdParagraph, Count:=2, Extend:=wdMove
            
            Application.Selection.Expand wdParagraph
            des = Application.Selection.Text
            Application.ScreenUpdating = False
            m = Selection.Range.Revisions.Count
              
            If m > 1 And Docaddonproperties.trackc = True Then
                Selection.Range.Revisions.AcceptAll
                des = Selection.Range.Text
                ActiveDocument.Undo
            Else
                des = Selection.Range.Text
            End If
                        
             
            GoTo NXT2
        Next
    End With
   
NXT2:
    Set Tbl = ActiveDocument.TableS(k)
    Me.TableDesc.Value = Tbl.Descr
    'Me.TableDesc.Value = des
    Application.ScreenUpdating = True
    ' oTableDesc = Me.TableDesc.Value
    Tbl.Select
    Tbl.Title = "Table " & k
   
    If Trim(Me.TableDesc.Value) = "" Then
        Me.TableDesc.Value = des
    
    End If
    Tbl.Descr = Me.TableDesc.Value
    Application.ScreenUpdating = False
    Me.parac.Value = k
NXT3:
    
    Application.ScreenUpdating = True
  
    Set Tbl = ActiveDocument.TableS(k)
    Tbl.Select
      
  
        
   
NXT4:

   
    Application.ScreenUpdating = True
  
    Set Tbl = ActiveDocument.TableS(k)
    
    Tbl.Select
    If Me.parac.Value <= ActiveDocument.TableS.Count Then
        If Selection.Bookmarks.Count = 0 Then
            If Docaddonproperties.TableHDefault = True Then
                Me.OptionButton4 = True
            Else
                Me.OptionButton4 = False
            End If
        Else
            If InStr(1, Selection.Bookmarks(1).Name, "Title_") Then Me.OptionButton1 = True
            If InStr(1, Selection.Bookmarks(1).Name, "ColumnTitle_") Then Me.OptionButton2 = True
            If InStr(1, Selection.Bookmarks(1).Name, "RowTitle_") Then Me.OptionButton3 = True
             
        End If
    End If
    '   Selection.Tables(1).ApplyStyleHeadingRows = True
    On Error Resume Next
    Tbl.Select
    Selection.rows.AllowBreakAcrossPages = False
    Selection.TableS(1).ApplyStyleFirstColumn = True
    Selection.rows.HeadingFormat = False
    If Me.OptionButton4 = True Then Selection.rows.HeadingFormat = False
    Selection.rows.AllowBreakAcrossPages = False
    If Me.NextT.Enabled = True Then Me.NextT.SetFocus
    Tbl.rows.HeadingFormat = False
    Tbl.Select
    Call setDocVarTable("DocTable")
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub


Private Sub serchh_Click()

    Dim m As Variant
     Pro_Bar.Show vbModeless
          Pro_Bar.Caption = "WeCo - Tables Proccessing"
          
           Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.1)
    If Docaddonproperties.TablePop = True Then
    Call WecoPopuploop(1)
    Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.25)
    Call WecoPopuploop(1)
    Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.5)
    Call WecoPopuploop(1)
      Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.7)
    Call WecoPopuploop(1)
      Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.8)
    Call WecoPopuploop(1)
    End If
      Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (1)
      Unload Pro_Bar
    Me.OptionButton1 = False
    Me.OptionButton2 = False
    Me.OptionButton3 = False
    If Docaddonproperties.TableHDefault.Value = True Then
    Me.OptionButton4 = True
    Else
    Me.OptionButton4 = False
    End If
    Application.ScreenUpdating = True
    If ActiveDocument.TableS.Count > 0 Then
        Me.parac.Value = 0
        Call NextT_Click
        Me.NextT.Enabled = True
        
        
    Else
      '  m = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")
         Load MASSAGE_BOX
          If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Tables was not detected on this Document, so we will skip this stage"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
    End If
    Me.serchh.BackColor = &H8000000E
    Me.serchh.ForeColor = &H8000000D
End Sub

Private Sub TableConvert_Click()

End Sub

Private Sub TableDesc_Change()
    Dim Tbl  As Word.Table
    Set Tbl = ActiveDocument.TableS(Me.parac.Value)
    Tbl.Descr = Me.TableDesc.Value
End Sub

Public Sub UserForm_Initialize()

    If DocMetaData.DocFormat.Value = "Word" Then
        Me.TableDesc.Visible = True
        Me.TableLABLE.Visible = True
    Else
        Me.TableDesc.Visible = False
        Me.TableLABLE.Visible = False
    End If
    Dim Language As String
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
  
    Me.parac.Value = 1
    If Docaddonproperties.TablePop = True Then
        Call WecoPopuploop(1)
        Call WecoPopuploop(1)
        Call WecoPopuploop(1)
        Call WecoPopuploop(1)
        Call WecoPopuploop(1)
    End If
    If getDocVar("DocTable") <> 0 And Val(getDocVar("DocTable")) <= ActiveDocument.TableS.Count Then
        Me.NextT.BackColor = &H8000000D
        Me.NextT.ForeColor = &H80000014
        Me.parac.Value = getDocVar("DocTable")
        ActiveDocument.TableS(Me.parac.Value).Select
       
        Me.TableDesc.Value = ActiveDocument.TableS(Me.parac.Value).Descr
        ActiveDocument.TableS(Me.parac.Value).Select
        With Selection
            If Selection.Bookmarks.Count = 0 Then
                Me.OptionButton4 = True
            Else
                If InStr(1, Selection.Bookmarks(1).Name, "Title_") Then Me.OptionButton1 = True
                If InStr(1, Selection.Bookmarks(1).Name, "ColumnTitle_") Then Me.OptionButton2 = True
                If InStr(1, Selection.Bookmarks(1).Name, "RowTitle_") Then Me.OptionButton3 = True
             
            End If
        End With
        
        ' Me.NextT.SetFocus
    Else
        Me.serchh.BackColor = &H8000000D
        Me.serchh.ForeColor = &H80000014
        Me.NextT.Enabled = False
        Me.LastT.Enabled = False
        ActiveDocument.TableS(1).Select
        Call setDocVarTable("DocTable")
        Call serchh_Click
        
        ' Me.serchh.SetFocus
    End If
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        Label22.Caption = "Tables"
        Label22.TextAlign = fmTextAlignCenter
        Label20.Caption = "In Order to  enable visually impaired users to consume tabular information, we need to address a number of issues:" & vbNewLine & vbNewLine & "a) Adding a concise description of the information in the table" & vbNewLine & vbNewLine & "b) Set the table reading order" & vbNewLine & vbNewLine & "c) Set Table Headers Tagging" & vbNewLine & vbNewLine & "d) Remove empty rows and columns and split merged cells"
        Label20.TextAlign = fmTextAlignLeft
        NextT.Caption = "<< Next Table"
        LastT.Caption = "Previous Table >>"
        serchh.Caption = "Search for Tables"
        Image2.Left = 98
        Image3.Left = 98
        Image4.Left = 98
        Image5.Left = 98
        OptionButton1.Left = 4
     
         OptionButton1.TextAlign = fmTextAlignLeft
            OptionButton2.TextAlign = fmTextAlignLeft
               OptionButton3.TextAlign = fmTextAlignLeft
                  OptionButton4.TextAlign = fmTextAlignLeft
        OptionButton1.Caption = "Rows & Columns"
        OptionButton2.Left = 4
          OptionButton1.alignment = fmAlignmentRight
        OptionButton2.alignment = fmAlignmentRight
          OptionButton3.alignment = fmAlignmentRight
            OptionButton4.alignment = fmAlignmentRight
        OptionButton2.Caption = "Rows Only"
        OptionButton3.Left = 4
        OptionButton3.Caption = "Columns Only"
        OptionButton4.Left = 4
        OptionButton4.Caption = "Layout Table"
        TableLABLE.Caption = "Table Description"
        TableLABLE.TextAlign = fmTextAlignLeft
        Label19.Caption = "Progress bar"
        CommandButton6.Caption = "Next"
        CommandButton5.Caption = "Previous"
        CommandButton3.Caption = "Cancel"
    Else
    '    Label22.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    Label22.TextAlign = fmTextAlignCenter
    '    Label20.Caption = "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & "|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & "|fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    Label20.TextAlign = fmTextAlignRight
    '    serchh.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    '    NextT.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    '    LastT.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"""
    '    Image2.Left = 6
    '    Image3.Left = 95.5
    '    Image4.Left = 95.5
    '    Image5.Left = 95.5
    '    OptionButton1.TextAlign = fmTextAlignRight
    '        OptionButton2.TextAlign = fmTextAlignRight
    '           OptionButton3.TextAlign = fmTextAlignRight
    '              OptionButton4.TextAlign = fmTextAlignRight
    '               OptionButton1.alignment = fmAlignmentRight
    '    OptionButton2.alignment = fmAlignmentRight
    '      OptionButton3.alignment = fmAlignmentRight
    '        OptionButton4.alignment = fmAlignmentRight
    '    OptionButton1.Left = 68.5
    '    OptionButton1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    OptionButton2.Left = 68.5
    '    OptionButton2.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    '    OptionButton3.Left = 68.5
    '    OptionButton3.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    '    OptionButton4.Left = 68.5
    '    OptionButton4.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    TableLABLE.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    '    TableLABLE.TextAlign = fmTextAlignRight
    '    Label19.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '    CommandButton6.Caption = "|fffd||fffd||fffd|"
    '    CommandButton5.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    '    CommandButton3.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    End If
    
End Sub





Function detetTableLanguae() As Boolean
 
  detetTableLanguae = False
  On Error Resume Next
   Dim myArray As Collection
   Set myArray = New Collection
  ActiveDocument.DetectLanguage
  Dim Tbl As Table, I, j As Long
       With Selection
        If .TableS.Count <> 1 Then
     
            Exit Function
        End If
    End With
    
   
     Set Tbl = Selection.TableS(1)
    For I = 1 To Tbl.Columns.Count
    For j = 1 To Tbl.rows.Count
     If CStr(Tbl.Cell(j, I).Range.LanguageID) = "1037" Or CStr(Tbl.Cell(j, I).Range.LanguageID) = "1025" Then
     Tbl.Cell(j, I).Range.Select
     detetTableLanguae = True
     Application.ScreenUpdating = True
     
     GoTo NXT
     End If
  
    Next
    Next

NXT:
 
End Function
Sub addpic(des As String)
On Error Resume Next
Dim pic As InlineShape
 Selection.HomeKey Unit:=wdLine

   Selection.InlineShapes.AddPicture(Application.StartupPath & "\AccHeader.png", False, True).AlternativeText = CStr(des)


End Sub
Attribute VB_Name = "Docaddonproperties"
Attribute VB_Base = "0{7990AC64-2C88-4497-8F71-391FD1B40477}{0480CFA9-4974-4B9F-B50E-5304C37F9013}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton11_Click()

End Sub

Private Sub AddinLanguage_DropButtonClick()
If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " In Order to Change the Language, Please save the properties and restart the word application"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
End Sub

Private Sub CommandButton10_Click()
HyperLinkBR.Show vbModeless
End Sub

Private Sub CommandButton3_Click()
    Me.Hide
    Unload Me
End Sub

Private Sub CommandButton6_Click()
    Me.Hide
End Sub

Private Sub CommandButton7_Click()
    Dim sfolder As String
    ' Open the select folder prompt
    With Application.FileDialog(msoFileDialogFolderPicker)
        If .Show = -1 Then ' if OK is pressed
            sfolder = .SelectedItems(1)
            Me.folderpath.Value = sfolder
        End If
    End With
        
    
    If sfolder = "" Then ' if a file was chosen
        Load MASSAGE_BOX
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Please select a Folder"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        '  MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
End Sub

Private Sub CommandButton8_Click()
    On Error Resume Next

          
    Dim cc As control
    For Each cc In Me.Controls
        If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "CommandButton8" And cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" Then
            Call updateSetting(cc.Name, cc.Value)
        End If
    Next
    Call updateSetting("F_Other_List1", F_Other_List1.Value)
    Call updateSetting("F_Other_List2", F_Other_List2.Value)
    MsgBox "weco setting was modified"
End Sub

Private Sub CommandButton9_Click()
    Login.Show
End Sub

Private Sub ListBox1_Click()

End Sub

Private Sub shapeTextbox_Click()

End Sub

Private Sub HeadingFormatSetting_Click()
    HeadingDesign.Show
End Sub

Private Sub ShowSmartReplace_Click()
    SmartReplace.Show
End Sub

Public Sub UserForm_Initialize()
    
    Dim sDir As String
    Dim sFile As String
    Dim TextFile As Integer
   
    
    
    sDir = Application.StartupPath & "\"
    sFile = "weco.txt"
    Dim cc As control
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    With DocFormat
        .AddItem "PDF"
        .AddItem "Word"
        .AddItem "Form"
    End With
    With AddinLanguage
        .AddItem "English"
        .AddItem "Hebrew"
    End With
    Me.Autunumberloop = False
    Me.tableEmptyRows = False
    Me.tableMergeCheck = False
   
    'If InStrRev(ActiveDocument.Name, ".") <> 0 Then
    ' Me.docTitle = Left(ActiveDocument.Name, InStrRev(ActiveDocument.Name, ".") - 1)
    '  End If
   
    mydocs = Environ("USERPROFILE") & "\My Documents"
    sfolder = mydocs & "\AccBackup"
    Me.folderpath = sfolder
    Me.HTOC = False
    Dim FontList() As String: FontList = getFontList()
    Dim I As Integer
    For I = LBound(FontList) To UBound(FontList)
        
        With F_Other_List1
            .AddItem FontList(I)
        End With
        With F_Other_List2
            .AddItem FontList(I)
        End With
    Next I
    
    
    On Error Resume Next

    If Dir(sDir & sFile) <> sFile Then
        TextFile = FreeFile
        Open sDir & sFile For Output As TextFile
        Print #TextFile, "Field,value"
        Close TextFile
    
   
    End If
    For Each cc In Me.Controls
        If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "CommandButton8" And cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" And cc.Name <> "folderpath" Then
            If getAdmSetting(cc.Name) <> "NA" Then cc = getAdmSetting(cc.Name)
        End If
    Next
    For I = LBound(FontList) To UBound(FontList)
        
        With F_Other_List1
            If FontList(I) = getAdmSetting("F_Other_List1") Then .ListIndex = I
        End With
        With F_Other_List2
            If FontList(I) = getAdmSetting("F_Other_List2") Then .ListIndex = I
        End With
    Next I
    Me.F_Other_List1.Enabled = False
  
    'Me.F_Other_List1.ForeColor = RGB(0, 0, 0)
    ' Me.F_Other_List2.ForeColor = RGB(0, 0, 0)
    For Each cc In Me.Controls

        If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "MultiPage1" And cc.Name <> "AddinLanguage" Then cc.Enabled = False
    Next
    Me.F_Other_List1.Enabled = False
    Me.F_Other_List2.Enabled = False
    Me.AddinLanguage.Enabled = True
    Me.CommandButton8.Enabled = True
   If Docaddonproperties.AddinLanguage.Value = "English" Then
   Docaddonproperties.MultiPage1.Pages(0).Caption = "General"
    Docaddonproperties.MultiPage1.Pages(1).Caption = "Policy"
     Docaddonproperties.MultiPage1.Pages(2).Caption = "Headings"
      Docaddonproperties.MultiPage1.Pages(3).Caption = "Validation Rules"
      ''General pane
      Docaddonproperties.Label33.Caption = "General Settings"
      Docaddonproperties.Label33.TextAlign = fmTextAlignLeft
      Docaddonproperties.savebystep.Caption = "Auto saving between wizard stages"
      Docaddonproperties.savebystep.TextAlign = fmTextAlignLeft
      Docaddonproperties.savebystep.alignment = fmAlignmentRight
      Docaddonproperties.BackupFileFlag.Caption = "Create Document Backup"
      Docaddonproperties.BackupFileFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.BackupFileFlag.alignment = fmAlignmentRight
       Docaddonproperties.Label34.Caption = "Backup Folder path"
      Docaddonproperties.Label34.TextAlign = fmTextAlignLeft
      Docaddonproperties.CommandButton7.Caption = "Set Backup Folder path"
     
      Docaddonproperties.SavePathFlag.Caption = "Generate accessible document on the original folder"
      Docaddonproperties.SavePathFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.SavePathFlag.alignment = fmAlignmentRight
      
      Docaddonproperties.Label35.Caption = "Accessibilty Wizard display setting"
      Docaddonproperties.Label35.TextAlign = fmTextAlignLeft
      Docaddonproperties.trackc.Caption = "Show Final Headings text while working in Track Changes"
      Docaddonproperties.trackc.TextAlign = fmTextAlignLeft
      Docaddonproperties.trackc.alignment = fmAlignmentRight
      Docaddonproperties.HLevel.Caption = "Use List box view in Headings Wizard"
      Docaddonproperties.HLevel.TextAlign = fmTextAlignLeft
      Docaddonproperties.HLevel.alignment = fmAlignmentRight
      Docaddonproperties.Pic_Other.Caption = "Look for Graphic Elements which are not included in main story"
      Docaddonproperties.Pic_Other.TextAlign = fmTextAlignLeft
      Docaddonproperties.Pic_Other.alignment = fmAlignmentRight
      Docaddonproperties.Links_Other.Caption = "Look for HyperLinks which are not included in main story"
      Docaddonproperties.Links_Other.TextAlign = fmTextAlignLeft
      Docaddonproperties.Links_Other.alignment = fmAlignmentRight
      
       Docaddonproperties.TableHDefault.Caption = "Set Default Table Heading value"
      Docaddonproperties.TableHDefault.TextAlign = fmTextAlignLeft
      Docaddonproperties.TableHDefault.alignment = fmAlignmentRight
      
      Docaddonproperties.Label36.Caption = "Alternative Header Text  setting"
      Docaddonproperties.Label36.TextAlign = fmTextAlignLeft
      Docaddonproperties.HeaderPic.Caption = "Use Alternative Header Text"
      Docaddonproperties.HeaderPic.TextAlign = fmTextAlignLeft
      Docaddonproperties.HeaderPic.alignment = fmAlignmentRight
      Docaddonproperties.AccPic.Caption = "Use Accessibilty Mark on Generated PDF Text"
      Docaddonproperties.AccPic.TextAlign = fmTextAlignLeft
      Docaddonproperties.AccPic.alignment = fmAlignmentRight
      Docaddonproperties.Label49.Caption = "User Interface Language"
      Docaddonproperties.Label49.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label49.Left = 6
      Docaddonproperties.AddinLanguage.Left = 150
      ''Headings Pane
      Docaddonproperties.Label36.Caption = "Headings Wizard properties"
      Docaddonproperties.Label36.TextAlign = fmTextAlignLeft
      Docaddonproperties.Autunumberloop.Caption = "Search for Auto-Numbering format"
      Docaddonproperties.Autunumberloop.TextAlign = fmTextAlignLeft
      Docaddonproperties.Autunumberloop.alignment = fmAlignmentRight
      Docaddonproperties.HUnderline.Caption = "Search for Underline format"
      Docaddonproperties.HUnderline.TextAlign = fmTextAlignLeft
      Docaddonproperties.HUnderline.alignment = fmAlignmentRight
      Docaddonproperties.HBoldLoop.Caption = "Search for Bold format"
      Docaddonproperties.HBoldLoop.TextAlign = fmTextAlignLeft
      Docaddonproperties.HBoldLoop.alignment = fmAlignmentRight
      Docaddonproperties.HTOC.Caption = "Search for TOC paragraphs"
      Docaddonproperties.HTOC.TextAlign = fmTextAlignLeft
      Docaddonproperties.HTOC.alignment = fmAlignmentRight
      Docaddonproperties.FontSIzeFlag.Caption = "Search for Large Font Sized paragraphs"
      Docaddonproperties.FontSIzeFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.FontSIzeFlag.alignment = fmAlignmentRight
      Docaddonproperties.MaxWordsFlag.Caption = "Ignore Potential Heading by max amount of words"
      Docaddonproperties.MaxWordsFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.MaxWordsFlag.alignment = fmAlignmentRight
      Docaddonproperties.Label24.Caption = "Max Words threshold "
      Docaddonproperties.Label24.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label24.Left = 12
      Docaddonproperties.Label32.Caption = "Auto Format Headings properties "
      Docaddonproperties.Label32.TextAlign = fmTextAlignLeft
      Docaddonproperties.HeadingFormatFalg.Caption = "Change Headings Formating"
      Docaddonproperties.HeadingFormatFalg.TextAlign = fmTextAlignLeft
      Docaddonproperties.HeadingFormatFalg.alignment = fmAlignmentRight
      Docaddonproperties.HeadingFormatSetting.Caption = "Set Headings format properties "
      Docaddonproperties.Label50.Caption = "Headings business rules "
      Docaddonproperties.Label50.TextAlign = fmTextAlignLeft
      Docaddonproperties.headingsBRFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.headingsBRFlag.alignment = fmAlignmentRight
      Docaddonproperties.headingsBRFlag.Caption = "Display Headings business rules mechanism  "
      Docaddonproperties.HStatus.TextAlign = fmTextAlignLeft
      Docaddonproperties.HStatus.alignment = fmAlignmentRight
      Docaddonproperties.HStatus.Caption = "Apply Heading Level Indication by default"
      
      '' Validation pane
      Docaddonproperties.Label43.Caption = "Default Validation report checks "
      Docaddonproperties.Label43.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label38.Caption = "General "
      Docaddonproperties.Label38.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label39.Caption = "Headings "
      Docaddonproperties.Label39.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label40.Caption = "Tables "
      Docaddonproperties.Label40.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label41.Caption = "Graphics & HyperLinks "
      Docaddonproperties.Label41.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label42.Caption = "Manual Numbering "
      Docaddonproperties.Label42.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label44.Caption = "Accessibilty Wizard validation rules "
      Docaddonproperties.Label44.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label45.Caption = "General Setting "
      Docaddonproperties.Label45.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label46.Caption = "Headings "
      Docaddonproperties.Label46.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label47.Caption = "Tables "
      Docaddonproperties.Label47.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label48.Caption = "Graphic Elements & HyperLinks "
      Docaddonproperties.Label48.TextAlign = fmTextAlignLeft
      Docaddonproperties.VFontTypeCheck.Caption = "Font Type Check"
      Docaddonproperties.VFontTypeCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VFontTypeCheck.alignment = fmAlignmentRight
      Docaddonproperties.VMinLineSpaceCheck.Caption = "Min Line Space Check"
      Docaddonproperties.VMinLineSpaceCheck.Left = 12
      Docaddonproperties.VMinLineSpaceCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VMinLineSpaceCheck.alignment = fmAlignmentRight
      Docaddonproperties.VFontSizeCheck.Caption = "Min Font Size Check"
      Docaddonproperties.VFontSizeCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VFontSizeCheck.alignment = fmAlignmentRight
      Docaddonproperties.VUnderlineCheck.Caption = "Underline Format Check"
      Docaddonproperties.VUnderlineCheck.Left = 12
      Docaddonproperties.VUnderlineCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VUnderlineCheck.alignment = fmAlignmentRight
      Docaddonproperties.VFontItalicCheck.Caption = "Italic Format Check"
      Docaddonproperties.VFontItalicCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VFontItalicCheck.alignment = fmAlignmentRight
      Docaddonproperties.VHeadingsCheck.Caption = "Headings Hierarchy Check"
      Docaddonproperties.VHeadingsCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VHeadingsCheck.alignment = fmAlignmentRight
      Docaddonproperties.VTablesCheck.Caption = "Tables Validation Check"
      Docaddonproperties.VTablesCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VTablesCheck.alignment = fmAlignmentRight
      Docaddonproperties.VAltTextCheck.Caption = "Graphical Elements & HyperLinks Check"
      Docaddonproperties.VAltTextCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VAltTextCheck.alignment = fmAlignmentRight
      Docaddonproperties.VManualListCheck.Caption = "Manual Numbering Check"
      Docaddonproperties.VManualListCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.VManualListCheck.alignment = fmAlignmentRight
      Docaddonproperties.vDocTitleForce.Caption = "Enforce Document Title field"
      Docaddonproperties.vDocTitleForce.TextAlign = fmTextAlignLeft
      Docaddonproperties.vDocTitleForce.alignment = fmAlignmentRight
      Docaddonproperties.VFont_force.Caption = "Enforce Font Selection"
      Docaddonproperties.VFont_force.TextAlign = fmTextAlignLeft
      Docaddonproperties.VFont_force.alignment = fmAlignmentRight
      Docaddonproperties.HeadingNestingFlag.Caption = "Nested Headings validation"
      Docaddonproperties.HeadingNestingFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.HeadingNestingFlag.alignment = fmAlignmentRight
      Docaddonproperties.VStage2.Caption = "Enforce Headings wizard completion"
      Docaddonproperties.VStage2.TextAlign = fmTextAlignLeft
      Docaddonproperties.VStage2.alignment = fmAlignmentRight
      Docaddonproperties.tableMergeCheck.Caption = "Tables Merged Cells warning"
      Docaddonproperties.tableMergeCheck.TextAlign = fmTextAlignLeft
      Docaddonproperties.tableMergeCheck.alignment = fmAlignmentRight
      Docaddonproperties.VStage3.Caption = "Enforce Tables wizard completion"
      Docaddonproperties.VStage3.TextAlign = fmTextAlignLeft
      Docaddonproperties.VStage3.alignment = fmAlignmentRight
      
     Docaddonproperties.VStage3T.Caption = "Enforce Tables Headings Taging completion"
      Docaddonproperties.VStage3T.TextAlign = fmTextAlignLeft
      Docaddonproperties.VStage3T.alignment = fmAlignmentRight
      
      Docaddonproperties.HLReject.Caption = "Reject Empty  Text for display for HyperLinks"
      Docaddonproperties.HLReject.TextAlign = fmTextAlignLeft
      Docaddonproperties.HLReject.alignment = fmAlignmentRight
      Docaddonproperties.AltTextReject.Caption = "Reject Empty Alt Text for Graphic Elements"
      Docaddonproperties.AltTextReject.TextAlign = fmTextAlignLeft
      Docaddonproperties.AltTextReject.alignment = fmAlignmentRight
      Docaddonproperties.VStage4.Caption = "Enforce Graphic and Hyperlinks wizard completion"
      Docaddonproperties.VStage4.TextAlign = fmTextAlignLeft
      Docaddonproperties.VStage4.alignment = fmAlignmentRight
       Docaddonproperties.VStageAlert.Caption = "Give the user feedback regarding unrelevant wizard stages"
      Docaddonproperties.VStageAlert.TextAlign = fmTextAlignLeft
      Docaddonproperties.VStageAlert.alignment = fmAlignmentRight
      
      ''Policy
       Docaddonproperties.Label25.Caption = "Set Default rules for General Wizard Automatics Processes  "
      Docaddonproperties.Label25.TextAlign = fmTextAlignLeft
       Docaddonproperties.Label19.Caption = "legitimate Font types  "
      Docaddonproperties.Label19.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label26.Caption = "Document Publication format  "
      Docaddonproperties.Label26.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label27.Caption = "Set Default rules for Tables Wizard Automatics Processes   "
      Docaddonproperties.Label27.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label28.Caption = "Set Default rules for Graphical Elements Wizard Automatics Processes   "
      Docaddonproperties.Label28.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label29.Caption = "Set Default rules for HyperLinks Wizard Automatics Processes   "
      Docaddonproperties.Label29.TextAlign = fmTextAlignLeft
       Docaddonproperties.Label30.Caption = "Set Default rules for Expressions and Acronyms Automatics  Processes   "
      Docaddonproperties.Label30.TextAlign = fmTextAlignLeft
      Docaddonproperties.CommandButton10.Caption = "HyperLinks Dictionary"
      Docaddonproperties.ShowSmartReplace.Caption = "Expressions and Acronyms Dictionary"
      Docaddonproperties.DeDoublSpaces.Caption = "Remove double spaces"
      Docaddonproperties.DeDoublSpaces.TextAlign = fmTextAlignLeft
      Docaddonproperties.DeDoublSpaces.alignment = fmAlignmentRight
       Docaddonproperties.RemoveUnderline.Caption = "Convert Underline format"
      Docaddonproperties.RemoveUnderline.TextAlign = fmTextAlignLeft
      Docaddonproperties.RemoveUnderline.alignment = fmAlignmentRight
      Docaddonproperties.TGrayScale.Caption = "Convert Table format to B&W"
      Docaddonproperties.TGrayScale.TextAlign = fmTextAlignLeft
      Docaddonproperties.TGrayScale.alignment = fmAlignmentRight
        Docaddonproperties.DelEmptyrows.Caption = "Remove Empty Paragraphs"
      Docaddonproperties.DelEmptyrows.TextAlign = fmTextAlignLeft
      Docaddonproperties.DelEmptyrows.alignment = fmAlignmentRight
      Docaddonproperties.ItallicConvert.Caption = "Convert Italic format"
      Docaddonproperties.ItallicConvert.TextAlign = fmTextAlignLeft
      Docaddonproperties.ItallicConvert.alignment = fmAlignmentRight
          Docaddonproperties.GrayScale.Caption = "Convert Text to B&W "
      Docaddonproperties.GrayScale.TextAlign = fmTextAlignLeft
      Docaddonproperties.GrayScale.alignment = fmAlignmentRight
      Docaddonproperties.MinLineSpaceFlag.Left = 18.75
      Docaddonproperties.MinLineSpaceFlag.Width = 190
        Docaddonproperties.MinLineSpaceFlag.Caption = "Min Line-Space enforcement "
      Docaddonproperties.MinLineSpaceFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.MinLineSpaceFlag.alignment = fmAlignmentRight
        Docaddonproperties.BodyMinFont.Caption = "Min Font Size enforcement "
        Docaddonproperties.BodyMinFont.Left = 18.75
        Docaddonproperties.BodyMinFont.Width = 190
      Docaddonproperties.BodyMinFont.TextAlign = fmTextAlignLeft
      Docaddonproperties.BodyMinFont.alignment = fmAlignmentRight
       Docaddonproperties.FootNotesMinFont.Caption = "Min FN Font Size enforcement "
       Docaddonproperties.FootNotesMinFont.Left = 18.75
       Docaddonproperties.FootNotesMinFont.Width = 190
      Docaddonproperties.FootNotesMinFont.TextAlign = fmTextAlignLeft
      Docaddonproperties.FootNotesMinFont.alignment = fmAlignmentRight
      Docaddonproperties.minLineSpaceVal.Left = 140
     Docaddonproperties.BodyMinFontVal.Left = 140
     Docaddonproperties.FootNotesMinFontVal.Left = 140
     Docaddonproperties.F_Calibri.Left = 18.75
      Docaddonproperties.F_Calibri.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Calibri.alignment = fmAlignmentRight
      Docaddonproperties.F_Verdana.Left = 18.75
      Docaddonproperties.F_Verdana.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Verdana.alignment = fmAlignmentRight
       Docaddonproperties.F_Other_1.Left = 18.75
      Docaddonproperties.F_Other_1.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Other_1.alignment = fmAlignmentRight
      Docaddonproperties.F_Other_2.Left = 18.75
      Docaddonproperties.F_Other_2.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Other_2.alignment = fmAlignmentRight
   
      Docaddonproperties.F_DAVID.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_DAVID.alignment = fmAlignmentRight
     
      Docaddonproperties.F_Arial.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Arial.alignment = fmAlignmentRight
      Docaddonproperties.F_Tahoma.Left = 110
      Docaddonproperties.F_Tahoma.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Tahoma.alignment = fmAlignmentRight
      Docaddonproperties.F_Helvetica.Left = 110
      Docaddonproperties.F_Helvetica.TextAlign = fmTextAlignLeft
      Docaddonproperties.F_Helvetica.alignment = fmAlignmentRight
      Docaddonproperties.F_Other_List1.Left = 70
      Docaddonproperties.F_Other_List2.Left = 70
      
      Docaddonproperties.DOCORPDF.Caption = "Enable user to change the publication format"
      Docaddonproperties.DOCORPDF.TextAlign = fmTextAlignLeft
      Docaddonproperties.DOCORPDF.alignment = fmAlignmentRight
      Docaddonproperties.DOCORPDF.Left = 18.75
      Docaddonproperties.Label21.Caption = " Default publication format"
      Docaddonproperties.Label21.TextAlign = fmTextAlignLeft
      Docaddonproperties.Label21.Left = 18.75
      Docaddonproperties.DocFormat.Left = 120
      
      Docaddonproperties.tableEmptyRows.Caption = "Automatically delete tables empty rows and columns"
      Docaddonproperties.tableEmptyRows.TextAlign = fmTextAlignLeft
      Docaddonproperties.tableEmptyRows.alignment = fmAlignmentRight
      Docaddonproperties.tableEmptyRows.Left = 18.75
      
        Docaddonproperties.TablePop.Caption = "Automatically extract nested tables"
      Docaddonproperties.TablePop.TextAlign = fmTextAlignLeft
      Docaddonproperties.TablePop.alignment = fmAlignmentRight
      Docaddonproperties.TablePop.Left = 18.75
      
       Docaddonproperties.TableAlt.Caption = "Table Alt Description"
      Docaddonproperties.TableAlt.TextAlign = fmTextAlignLeft
      Docaddonproperties.TableAlt.alignment = fmAlignmentRight
      Docaddonproperties.TableAlt.Left = 18.75
      
      Docaddonproperties.PicConvert.Caption = "Convert Diagrams and charts to simple images"
      Docaddonproperties.PicConvert.TextAlign = fmTextAlignLeft
      Docaddonproperties.PicConvert.alignment = fmAlignmentRight
      Docaddonproperties.PicConvert.Left = 18.75
      
      Docaddonproperties.AutoHL.Caption = "Automatically Convert HL Text"
      Docaddonproperties.AutoHL.TextAlign = fmTextAlignLeft
      Docaddonproperties.AutoHL.alignment = fmAlignmentRight
      Docaddonproperties.AutoHL.Left = 18.75
      Docaddonproperties.CommandButton10.Left = 155
      Docaddonproperties.SmartReplaceFlag.Caption = "Automatically Replace Expressions"
      Docaddonproperties.SmartReplaceFlag.TextAlign = fmTextAlignLeft
      Docaddonproperties.SmartReplaceFlag.alignment = fmAlignmentRight
      Docaddonproperties.SmartReplaceFlag.Left = 18.75
      Docaddonproperties.ShowSmartReplace.Left = 155
      Docaddonproperties.CommandButton8.Caption = "Save Changes"
       Docaddonproperties.CommandButton6.Caption = "Apply & Exit"
       Docaddonproperties.CommandButton9.Caption = "Update Settings"
   Else
   End If
   For Each cc In Docaddonproperties.Controls
   If cc.Name = "AddinLanguage" Or cc.Name = "Frame11" Then cc.Enabled = True
   Next
    
End Sub

'Dim AllOptions As Collection

Function getFontList()

    Dim FontList As CommandBarControl



    On Error Resume Next

    Set FontList = Application.CommandBars("Formatting").FindControl(ID:=1728)

    On Error GoTo 0

    If FontList Is Nothing Then

        Dim Tempbar As CommandBar

        Set Tempbar = Application.CommandBars.Add

        Set FontList = Tempbar.Controls.Add(ID:=1728)

    End If

    Dim arr() As String: ReDim arr(FontList.ListCount - 1)

    Dim I As Integer

    For I = 0 To UBound(arr)

        arr(I) = FontList.List(I + 1)

    Next I

    getFontList = arr

    On Error Resume Next

    Tempbar.Delete

End Function

Attribute VB_Name = "EventClassModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WithEvents App As Word.Application
Attribute App.VB_VarHelpID = -1


Private Sub App_WindowSelectionChange(ByVal Sel As Selection)

    '  If Docaddonproperties.HLevelStatus = True Then
    On Error Resume Next
    Dim RIBC As IRibbonControl
    Dim RIB As IRibbonUI
    Dim Temp
   
    'If Docaddonproperties.HLevelStatus = True Then
    App.DisplayStatusBar = True
   
    With Sel.ParagraphFormat
        Temp = Sel.ParagraphFormat.OutlineLevel
        Select Case Temp
            Case "1"
                App.StatusBar = "H1"
                B1 = True
                B2 = False
                B3 = False
                B4 = False
                B5 = False
                B6 = False
                BX = False
                gobjRibbon.Invalidate
                   
            Case "2"
                App.StatusBar = "H2"
                B1 = False
                B2 = True
                B3 = False
                B4 = False
                B5 = False
                B6 = False
                BX = False
                gobjRibbon.Invalidate
            Case "3"
                App.StatusBar = "H3"
                B1 = False
                B2 = False
                B3 = True
                B4 = False
                B5 = False
                B6 = False
                BX = False
                gobjRibbon.Invalidate
            Case "4"
                App.StatusBar = "H4"
                B1 = False
                B2 = False
                B3 = False
                B4 = True
                B5 = False
                B6 = False
                BX = False
                gobjRibbon.Invalidate
            Case "5"
                App.StatusBar = "H5"
                B1 = False
                B2 = False
                B3 = False
                B4 = False
                B5 = True
                B6 = False
                BX = False
                gobjRibbon.Invalidate
            Case "6"
                App.StatusBar = "H6"
                B1 = False
                B2 = False
                B3 = False
                B4 = False
                B5 = False
                B6 = True
                BX = False
                gobjRibbon.Invalidate
            Case "7"
                App.StatusBar = "H7"
            Case "8"
                App.StatusBar = "H8"
           Case Else
                App.StatusBar = ""
                B1 = False
                B2 = False
                B3 = False
                B4 = False
                B5 = False
                B6 = False
                BX = False
                gobjRibbon.Invalidate
        End Select

    End With
   
    App.DisplayStatusBar = False
    Err.Clear
End Sub


Attribute VB_Name = "HeadingDesign"
Attribute VB_Base = "0{99E532FC-94C6-4341-974A-C0C2A412F271}{06A341F9-8122-46FD-A3F8-8B37D91A953D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



  Function getRGB(col As Long, Optional opt As Integer) As String
    Dim c As Long
    Dim r As Long
    Dim G As Long
    Dim b As Long

  
    r = col Mod 256
    G = col \ 256 Mod 256
    b = col \ 65536 Mod 256

    If opt = 1 Then
        getRGB = r
    ElseIf opt = 2 Then
        getRGB = G
    ElseIf opt = 3 Then
        getRGB = b
    Else
        getRGB = r & "," & G & "," & b
    End If
End Function
  Public Function PickColor(Optional OriginalColor As Variant = 8421376) 'You can define any colour as default instead of 8421376)
   
End Function

Function getFontList()

   Dim FontList As CommandBarControl



    On Error Resume Next

    Set FontList = Application.CommandBars("Formatting").FindControl(ID:=1728)

    On Error GoTo 0

    If FontList Is Nothing Then

        Dim Tempbar As CommandBar

        Set Tempbar = Application.CommandBars.Add

        Set FontList = Tempbar.Controls.Add(ID:=1728)

        End If

    Dim arr() As String: ReDim arr(FontList.ListCount - 1)

    Dim I As Integer

    For I = 0 To UBound(arr)

        arr(I) = FontList.List(I + 1)

        Next I

    getFontList = arr

    On Error Resume Next

    Tempbar.Delete

    End Function


Private Sub HeadingForm_Click()

End Sub

Private Sub F_Other_List1_Change()

End Sub

Private Sub CheckBox1_Click()

End Sub

Private Sub CheckBox3_Click()

End Sub

Private Sub CommandButton1_Click()
Dim H1Dial As Dialog
Dim Temp As Variant
Set H1Dial = Dialogs(wdDialogFormatDefineStyleFont)
'Application.Dialogs (wdDialogFormatFont)
H1Dial.Show
With H1Dial
'Me.H1_FONT_NAME.Value = Font.Name
'Me.H1_FONTBi_NAME.Value = Font.Name
'Me.H1_FONT_Size.Value = Font.Size
'Me.H1_FONTBi_Size.Value = Font.SizeBi
End With
'Me.H1_FONT_Size = H1Dial.Font.Size

End Sub

Private Sub Command1_Click()
 
End Sub

Private Sub Body_FONT_Underline_style_Change()
Select Case Body_FONT_Underline_style.Value
Case "None"
Me.Body_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.Body_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.Body_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub CommandButton6_Click()
Unload Me
End Sub

Private Sub CommandButton8_Click()
On Error Resume Next

          
  Dim cc As control
  For Each cc In Me.Controls
  If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "CommandButton8" And cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" Then
     Call updateSetting(cc.Name, cc.Value)
     End If
  Next
    Call updateSetting("H1_FONT_Underline_style", H1_FONT_Underline_style.Value)
    Call updateSetting("H2_FONT_Underline_style", H2_FONT_Underline_style.Value)
    Call updateSetting("H3_FONT_Underline_style", H3_FONT_Underline_style.Value)
    Call updateSetting("H4_FONT_Underline_style", H4_FONT_Underline_style.Value)
    Call updateSetting("H5_FONT_Underline_style", H5_FONT_Underline_style.Value)
    Call updateSetting("H6_FONT_Underline_style", H6_FONT_Underline_style.Value)
    MsgBox "weco setting was modified"
End Sub

Private Sub H1_FONT_Color_Picker_Click()
 Dim sColor As String

End Sub

Private Sub H1_FONT_EX_Click()

End Sub

Private Sub H1_FONT_Underline_Click()

End Sub



Private Sub H1_FONT_Underline_style_Change()
Select Case H1_FONT_Underline_style.Value
Case "None"
Me.H1_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H1_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H1_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
 
End Sub

Private Sub H2_FONT_Underline_style_Change()
Select Case H2_FONT_Underline_style.Value
Case "None"
Me.H2_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H2_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H2_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub H3_FONT_Underline_style_Change()
Select Case H3_FONT_Underline_style.Value
Case "None"
Me.H3_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H3_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H3_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub H4_FONT_Underline_style_Change()
Select Case H4_FONT_Underline_style.Value
Case "None"
Me.H4_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H4_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H4_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub H5_FONT_Underline_style_Change()
Select Case H5_FONT_Underline_style.Value
Case "None"
Me.H5_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H5_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H5_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub H6_FONT_Underline_style_Change()
Select Case H6_FONT_Underline_style.Value
Case "None"
Me.H6_FONT_Underline_style_value.Value = 0 '"wdUnderlineNone"

Case "Single Line"
Me.H6_FONT_Underline_style_value.Value = 1 '"wdUnderlineSingle"


Case "Double Line"
Me.H6_FONT_Underline_style_value.Value = 3 '"wdUnderlineDouble"

End Select
End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Initialize()
On Error Resume Next
 Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
Dim FontList() As String: FontList = getFontList()
    Dim I, I1, I2, j As Integer
    Dim cc As control
    For I = LBound(FontList) To UBound(FontList)
        
        With H1_FONT_NAME
        .AddItem FontList(I)
        End With
        With H1_FONTBi_NAME
        .AddItem FontList(I)
        End With
         With H2_FONT_NAME
        .AddItem FontList(I)
        End With
        With H2_FONTBi_NAME
        .AddItem FontList(I)
        End With
       With H3_FONT_NAME
        .AddItem FontList(I)
        End With
        With H3_FONTBi_NAME
        .AddItem FontList(I)
        End With
         With H4_FONT_NAME
        .AddItem FontList(I)
        End With
        With H4_FONTBi_NAME
        .AddItem FontList(I)
        End With
         With H5_FONT_NAME
        .AddItem FontList(I)
        End With
        With H5_FONTBi_NAME
        .AddItem FontList(I)
        End With
         With H6_FONT_NAME
        .AddItem FontList(I)
        End With
        With H6_FONTBi_NAME
        .AddItem FontList(I)
        End With
    Next I
    With Me.H1_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
      With Me.H2_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
       With Me.H3_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
       With Me.H4_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
       With Me.H5_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
       With Me.H6_FONT_Underline_style
    .AddItem "None"
    .AddItem "Single Line"
    .AddItem "Double Line"
    End With
      For Each cc In Me.Controls
  If cc.Name <> "H1_FONT_Color_Picker" And cc.Name <> "H2_FONT_Color_Picker" And cc.Name <> "H3_FONT_Color_Picker" And cc.Name <> "H4_FONT_Color_Picker" And cc.Name <> "H5_FONT_Color_Picker" And cc.Name <> "H6_FONT_Color_Picker" And cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" And cc.Name <> "folderpath" Then
     If getAdmSetting(cc.Name) <> "NA" Then cc = getAdmSetting(cc.Name)
     End If
  Next
 
   If Trim(Me.H1_FONT_Color_Picker_value.Value) <> "" Then Me.H1_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H1_FONT_Color_Picker_value.Text, 1), getRGB(Me.H1_FONT_Color_Picker_value.Text, 2), getRGB(H1_FONT_Color_Picker_value.Text, 3))
  If Trim(Me.H2_FONT_Color_Picker_value.Value) <> "" Then Me.H2_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H2_FONT_Color_Picker_value.Text, 1), getRGB(Me.H2_FONT_Color_Picker_value.Text, 2), getRGB(H2_FONT_Color_Picker_value.Text, 3))
   If Trim(Me.H3_FONT_Color_Picker_value.Value) <> "" Then Me.H3_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H3_FONT_Color_Picker_value.Text, 1), getRGB(Me.H3_FONT_Color_Picker_value.Text, 2), getRGB(H3_FONT_Color_Picker_value.Text, 3))
    If Trim(Me.H4_FONT_Color_Picker_value.Value) <> "" Then Me.H4_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H4_FONT_Color_Picker_value.Text, 1), getRGB(Me.H4_FONT_Color_Picker_value.Text, 2), getRGB(H4_FONT_Color_Picker_value.Text, 3))
     If Trim(Me.H5_FONT_Color_Picker_value.Value) <> "" Then Me.H5_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H5_FONT_Color_Picker_value.Text, 1), getRGB(Me.H5_FONT_Color_Picker_value.Text, 2), getRGB(H5_FONT_Color_Picker_value.Text, 3))
     If Trim(Me.H6_FONT_Color_Picker_value.Value) <> "" Then Me.H6_FONT_Color_Picker.BackColor = RGB(getRGB(Me.H6_FONT_Color_Picker_value.Text, 1), getRGB(Me.H6_FONT_Color_Picker_value.Text, 2), getRGB(H6_FONT_Color_Picker_value.Text, 3))
    If getAdmSetting(H1_FONT_Underline_style_value) <> "NA" Then Me.H1_FONT_Underline_style.Value = getAdmSetting(H1_FONT_Underline_style_value)
    If getAdmSetting(H2_FONT_Underline_style_value) <> "NA" Then Me.H2_FONT_Underline_style.Value = getAdmSetting(H2_FONT_Underline_style_value)
    If getAdmSetting(H3_FONT_Underline_style_value) <> "NA" Then Me.H3_FONT_Underline_style.Value = getAdmSetting(H3_FONT_Underline_style_value)
       If getAdmSetting(H4_FONT_Underline_style_value) <> "NA" Then Me.H4_FONT_Underline_style.Value = getAdmSetting(H4_FONT_Underline_style_value)
          If getAdmSetting(H5_FONT_Underline_style_value) <> "NA" Then Me.H5_FONT_Underline_style.Value = getAdmSetting(H5_FONT_Underline_style_value)
       If getAdmSetting(H6_FONT_Underline_style_value) <> "NA" Then Me.H6_FONT_Underline_style.Value = getAdmSetting(H6_FONT_Underline_style_value)
       
       If Docaddonproperties.AddinLanguage.Value = "English" Then
       Me.Label5.Caption = "Right to Left languages"
       Me.Label5.TextAlign = fmTextAlignLeft
        Me.Label17.Caption = "Right to Left languages"
         Me.Label17.TextAlign = fmTextAlignLeft
         Me.Label29.Caption = "Right to Left languages"
          Me.Label29.TextAlign = fmTextAlignLeft
          Me.Label41.Caption = "Right to Left languages"
           Me.Label41.TextAlign = fmTextAlignLeft
           Me.Label53.Caption = "Right to Left languages"
            Me.Label53.TextAlign = fmTextAlignLeft
            Me.Label65.Caption = "Right to Left languages"
             Me.Label65.TextAlign = fmTextAlignLeft
             Me.Label83.Caption = "Right to Left languages"
              Me.Label83.TextAlign = fmTextAlignLeft
             Me.Label6.Caption = "Left to Right languages"
              Me.Label6.TextAlign = fmTextAlignLeft
               Me.Label18.Caption = "Left to Right languages"
              Me.Label18.TextAlign = fmTextAlignLeft
               Me.Label30.Caption = "Left to Right languages"
              Me.Label30.TextAlign = fmTextAlignLeft
               Me.Label42.Caption = "Left to Right languages"
              Me.Label42.TextAlign = fmTextAlignLeft
               Me.Label54.Caption = "Left to Right languages"
              Me.Label54.TextAlign = fmTextAlignLeft
               Me.Label66.Caption = "Left to Right languages"
              Me.Label66.TextAlign = fmTextAlignLeft
               Me.Label84.Caption = "Left to Right languages"
              Me.Label84.TextAlign = fmTextAlignLeft
               Me.Label9.Caption = "Font Formatings"
              Me.Label9.TextAlign = fmTextAlignLeft
                Me.Label21.Caption = "Font Formatings"
              Me.Label21.TextAlign = fmTextAlignLeft
                Me.Label33.Caption = "Font Formatings"
              Me.Label33.TextAlign = fmTextAlignLeft
                Me.Label45.Caption = "Font Formatings"
              Me.Label45.TextAlign = fmTextAlignLeft
                Me.Label57.Caption = "Font Formatings"
              Me.Label57.TextAlign = fmTextAlignLeft
                Me.Label69.Caption = "Font Formatings"
              Me.Label69.TextAlign = fmTextAlignLeft
                Me.Label87.Caption = "Font Formatings"
              Me.Label87.TextAlign = fmTextAlignLeft
              
                Me.Label11.Caption = "LineSpace"
              Me.Label11.TextAlign = fmTextAlignLeft
               Me.Label23.Caption = "LineSpace"
              Me.Label23.TextAlign = fmTextAlignLeft
               Me.Label35.Caption = "LineSpace"
                Me.Label35.TextAlign = fmTextAlignLeft
             
               Me.Label47.Caption = "LineSpace"
              Me.Label47.TextAlign = fmTextAlignLeft
               Me.Label59.Caption = "LineSpace"
                Me.Label59.TextAlign = fmTextAlignLeft
              Me.Label71.TextAlign = fmTextAlignLeft
                Me.Label71.Caption = "LineSpace"
              Me.Label89.TextAlign = fmTextAlignLeft
              Me.Label89.Caption = "LineSpace"
              
              Me.Label1.TextAlign = fmTextAlignLeft
              Me.Label1.Caption = "Font Name"
               Me.Label1.Left = 6
              Me.Label14.TextAlign = fmTextAlignLeft
              Me.Label14.Caption = "Font Name"
               Me.Label14.Left = 6
              Me.Label26.TextAlign = fmTextAlignLeft
              Me.Label26.Caption = "Font Name"
               Me.Label26.Left = 6
              Me.Label38.TextAlign = fmTextAlignLeft
              Me.Label38.Caption = "Font Name"
               Me.Label38.Left = 6
              Me.Label50.TextAlign = fmTextAlignLeft
              Me.Label50.Caption = "Font Name"
               Me.Label50.Left = 6
              Me.Label62.TextAlign = fmTextAlignLeft
              Me.Label62.Caption = "Font Name"
               Me.Label62.Left = 6
              Me.Label80.TextAlign = fmTextAlignLeft
              Me.Label80.Caption = "Font Name"
               Me.Label80.Left = 6
              
              Me.Label7.TextAlign = fmTextAlignLeft
              Me.Label7.Caption = "Font Name"
               Me.Label7.Left = 6
              Me.Label19.TextAlign = fmTextAlignLeft
              Me.Label19.Caption = "Font Name"
               Me.Label19.Left = 6
              Me.Label31.TextAlign = fmTextAlignLeft
              Me.Label31.Caption = "Font Name"
               Me.Label31.Left = 6
              Me.Label43.TextAlign = fmTextAlignLeft
              Me.Label43.Caption = "Font Name"
               Me.Label43.Left = 6
              Me.Label55.TextAlign = fmTextAlignLeft
              Me.Label55.Caption = "Font Name"
               Me.Label55.Left = 6
              Me.Label67.TextAlign = fmTextAlignLeft
              Me.Label67.Caption = "Font Name"
               Me.Label67.Left = 6
              Me.Label85.TextAlign = fmTextAlignLeft
              Me.Label85.Caption = "Font Name"
               Me.Label85.Left = 6
              
              Me.Label2.TextAlign = fmTextAlignLeft
              Me.Label2.Caption = "Size"
               Me.Label2.Left = 168
              Me.Label15.TextAlign = fmTextAlignLeft
              Me.Label15.Caption = "Size"
              Me.Label15.Left = 168
              Me.Label27.TextAlign = fmTextAlignLeft
              Me.Label27.Caption = "Size"
              Me.Label27.Left = 168
              Me.Label39.TextAlign = fmTextAlignLeft
              Me.Label39.Caption = "Size"
              Me.Label39.Left = 168
              Me.Label51.TextAlign = fmTextAlignLeft
              Me.Label51.Caption = "Size"
              Me.Label51.Left = 168
              Me.Label63.TextAlign = fmTextAlignLeft
              Me.Label63.Caption = "Size"
              Me.Label63.Left = 168
              Me.Label81.TextAlign = fmTextAlignLeft
              Me.Label81.Caption = "Size"
              Me.Label81.Left = 168
              
              Me.Label8.TextAlign = fmTextAlignLeft
              Me.Label8.Caption = "Size"
              Me.Label8.Left = 168
              Me.Label20.TextAlign = fmTextAlignLeft
              Me.Label20.Caption = "Size"
              Me.Label20.Left = 168
              Me.Label32.TextAlign = fmTextAlignLeft
              Me.Label32.Caption = "Size"
              Me.Label32.Left = 168
              Me.Label44.TextAlign = fmTextAlignLeft
              Me.Label44.Caption = "Size"
              Me.Label44.Left = 168
              Me.Label56.TextAlign = fmTextAlignLeft
              Me.Label56.Caption = "Size"
              Me.Label56.Left = 168
              Me.Label68.TextAlign = fmTextAlignLeft
              Me.Label68.Caption = "Size"
              Me.Label68.Left = 168
              Me.Label86.TextAlign = fmTextAlignLeft
              Me.Label86.Caption = "Size"
              Me.Label86.Left = 168
              Me.Body_FONTBi_Size.Left = 200
              Me.Body_FONT_Size.Left = 200
              Me.H1_FONTBi_Size.Left = 200
              Me.H1_FONT_Size.Left = 200
              Me.H2_FONTBi_Size.Left = 200
              Me.H2_FONT_Size.Left = 200
              Me.H3_FONTBi_Size.Left = 200
              Me.H3_FONT_Size.Left = 200
              Me.H4_FONTBi_Size.Left = 200
              Me.H4_FONT_Size.Left = 200
              Me.H5_FONTBi_Size.Left = 200
              Me.H5_FONT_Size.Left = 200
              Me.H6_FONTBi_Size.Left = 200
              Me.H6_FONT_Size.Left = 200
              Me.H1_FONT_Bold.Left = 6
              Me.H1_FONT_Bold.Caption = "Bold"
              Me.H1_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H1_FONT_Bold.alignment = fmAlignmentRight
              Me.H1_FONT_Italic.Left = 6
              Me.H1_FONT_Italic.Caption = "Italic"
              Me.H1_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H1_FONT_Italic.alignment = fmAlignmentRight
              Me.H2_FONT_Bold.Left = 6
              Me.H2_FONT_Bold.Caption = "Bold"
              Me.H2_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H2_FONT_Bold.alignment = fmAlignmentRight
              Me.H2_FONT_Italic.Left = 6
              Me.H2_FONT_Italic.Caption = "Italic"
              Me.H2_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H2_FONT_Italic.alignment = fmAlignmentRight
              
              Me.H3_FONT_Bold.Left = 6
              Me.H3_FONT_Bold.Caption = "Bold"
              Me.H3_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H3_FONT_Bold.alignment = fmAlignmentRight
              Me.H3_FONT_Italic.Left = 6
              Me.H3_FONT_Italic.Caption = "Italic"
              Me.H3_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H3_FONT_Italic.alignment = fmAlignmentRight
              Me.H4_FONT_Bold.Left = 6
              Me.H4_FONT_Bold.Caption = "Bold"
              Me.H4_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H4_FONT_Bold.alignment = fmAlignmentRight
              Me.H4_FONT_Italic.Left = 6
              Me.H4_FONT_Italic.Caption = "Italic"
              Me.H4_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H4_FONT_Italic.alignment = fmAlignmentRight
              Me.H5_FONT_Bold.Left = 6
              Me.H5_FONT_Bold.Caption = "Bold"
              Me.H5_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H5_FONT_Bold.alignment = fmAlignmentRight
              Me.H5_FONT_Italic.Left = 6
              Me.H5_FONT_Italic.Caption = "Italic"
              Me.H5_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H5_FONT_Italic.alignment = fmAlignmentRight
              Me.H6_FONT_Bold.Left = 6
              Me.H6_FONT_Bold.Caption = "Bold"
              Me.H6_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.H6_FONT_Bold.alignment = fmAlignmentRight
              Me.H6_FONT_Italic.Left = 6
              Me.H6_FONT_Italic.Caption = "Italic"
              Me.H6_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.H6_FONT_Italic.alignment = fmAlignmentRight
              Me.Body_FONT_Bold.Left = 6
              Me.Body_FONT_Bold.Caption = "Bold"
              Me.Body_FONT_Bold.TextAlign = fmTextAlignLeft
              Me.Body_FONT_Bold.alignment = fmAlignmentRight
              Me.Body_FONT_Italic.Left = 6
              Me.Body_FONT_Italic.Caption = "Italic"
              Me.Body_FONT_Italic.TextAlign = fmTextAlignLeft
              Me.Body_FONT_Italic.alignment = fmAlignmentRight
              Me.Label88.Left = 6
              Me.Label88.Caption = "Underline"
                Me.Label10.Left = 6
              Me.Label10.Caption = "Underline"
                Me.Label22.Left = 6
              Me.Label22.Caption = "Underline"
                Me.Label34.Left = 6
              Me.Label34.Caption = "Underline"
                Me.Label46.Left = 6
              Me.Label46.Caption = "Underline"
                Me.Label58.Left = 6
              Me.Label58.Caption = "Underline"
                Me.Label70.Left = 6
              Me.Label70.Caption = "Underline"
              
                Me.Label12.Left = 6
                Me.Label12.TextAlign = fmTextAlignLeft
              Me.Label12.Caption = "Space Before"
               Me.Label24.Left = 6
              Me.Label24.Caption = "Space Before"
              Me.Label24.TextAlign = fmTextAlignLeft
               Me.Label36.Left = 6
              Me.Label36.Caption = "Space Before"
              Me.Label36.TextAlign = fmTextAlignLeft
               Me.Label48.Left = 6
              Me.Label48.Caption = "Space Before"
              Me.Label48.TextAlign = fmTextAlignLeft
               Me.Label60.Left = 6
              Me.Label60.Caption = "Space Before"
              Me.Label60.TextAlign = fmTextAlignLeft
               Me.Label72.Left = 6
              Me.Label72.Caption = "Space Before"
              Me.Label72.TextAlign = fmTextAlignLeft
               Me.Label90.Left = 6
              Me.Label90.Caption = "Space Before"
              Me.Label90.TextAlign = fmTextAlignLeft
              
                 Me.Label13.Left = 6
              Me.Label13.Caption = "Space After"
              Me.Label13.TextAlign = fmTextAlignLeft
               Me.Label25.Left = 6
              Me.Label25.Caption = "Space After"
              Me.Label25.TextAlign = fmTextAlignLeft
               Me.Label37.Left = 6
              Me.Label37.Caption = "Space After"
              Me.Label37.TextAlign = fmTextAlignLeft
               Me.Label49.Left = 6
              Me.Label49.Caption = "Space After"
              Me.Label49.TextAlign = fmTextAlignLeft
               Me.Label61.Left = 6
              Me.Label61.Caption = "Space After"
              Me.Label61.TextAlign = fmTextAlignLeft
               Me.Label73.Left = 6
              Me.Label73.Caption = "Space After"
              Me.Label73.TextAlign = fmTextAlignLeft
               Me.Label91.Left = 6
              Me.Label91.Caption = "Space After"
              Me.Label91.TextAlign = fmTextAlignLeft
              
               Me.Label74.Left = 6
              Me.Label74.Caption = "Space Between"
              Me.Label74.TextAlign = fmTextAlignLeft
               Me.Label75.Left = 6
              Me.Label75.Caption = "Space Between"
               Me.Label75.TextAlign = fmTextAlignLeft
               Me.Label76.Left = 6
              Me.Label76.Caption = "Space Between"
               Me.Label76.TextAlign = fmTextAlignLeft
               Me.Label77.Left = 6
              Me.Label77.Caption = "Space Between"
               Me.Label77.TextAlign = fmTextAlignLeft
               Me.Label78.Left = 6
              Me.Label78.Caption = "Space Between"
               Me.Label78.TextAlign = fmTextAlignLeft
               Me.Label79.Left = 6
                Me.Label79.TextAlign = fmTextAlignLeft
              Me.Label79.Caption = "Space Between"
               Me.Label92.Left = 6
              Me.Label92.Caption = "Space Between"
               Me.Label92.TextAlign = fmTextAlignLeft
              Me.CommandButton8.Caption = "Save Changes"
               Me.CommandButton6.Caption = "Exit"
              
       Else
       End If
End Sub




Attribute VB_Name = "HeadingsBR"
Attribute VB_Base = "0{70DFCC3D-FFEF-4D22-845D-A246965F6344}{E13730D8-6F95-4135-A3A7-21B3F4CACF9D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub BR1_Click()
    Dim Q As Integer
    Q = 1
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
          
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
   
End Sub

Private Sub BR2_Click()
 Dim Q As Integer
    Q = 2
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
           
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR3_Click()
 Dim Q As Integer
    Q = 3
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
           
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR4_Click()
 Dim Q As Integer
    Q = 4
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
       
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR5_Click()
 Dim Q As Integer
    Q = 5
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
           
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR6_Click()
 Dim Q As Integer
    Q = 6
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
           
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR7_Click()
 Dim Q As Integer
    Q = 7
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
           
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR8_Click()
 Dim Q As Integer
    Q = 8
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
          
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub BR9_Click()
 Dim Q As Integer
    Q = 9
    Dim cc As control
    Dim nn As String
    Dim hh As String
    nn = ""
    With HeadingsBR

        For Each cc In HeadingsBR.Controls
                
                   
            If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then nn = cc.Caption
            If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "False"
                Else
                    nn = nn & "," & "True"
                End If
            End If
            If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                If cc.Caption = "X" Then
                    nn = nn & "," & "0"
                Else
                    nn = nn & "," & "1"
                End If
                         
            End If
                         
            If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                nn = nn & "," & cc.Caption
            End If
                         
                         
                        
            If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then hh = Mid(cc.Caption, 2, 4)
                       
                      
        Next
    End With
    Dim V As Variable
  
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" And InStr(1, V.Name, nn) And Right(V.Name, 1) = hh Then
        ''''''''''''''
        
            V.Delete
            
        End If
    Next V
    Unload Me
    Call HInfo_Click2(1)
End Sub

Private Sub CommandButton3_Click()
Unload Me
End Sub

Private Sub UserForm__Initialize()
 If Docaddonproperties.AddinLanguage.Value = "English" Then
 CommandButton3.Caption = "Exit"
 End If
  Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub

Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{9C6E95F1-DAF3-472C-A305-A18C8BED3650}{B50214D1-EAD6-4291-80FF-5673EB80F66B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "HyperLinkBR"
Attribute VB_Base = "0{FF5A2CC5-342C-4705-9DA0-8B827B0ABA4C}{8F9A2664-EF0C-405B-8686-120300673E8C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton8_Click()
On Error Resume Next
Dim I As Integer
          
  Dim cc As control
 For I = 1 To 55
  For Each cc In Me.Controls
  
  If cc.Name = "HL" & I & "Address" Then  'HL1Address
    
 ' If Me.Controls.Name("HL" & i & "Address").Value <> "" Then
     Call updateHLSetting(cc.Name, cc.Value, Me.Controls("HL" & I & "Text").Value, Me.Controls("HL" & I & "ToolTip").Value)
    
     End If
     '
     
   '  End If
  Next
  Next
  For I = 1 To 10
  For Each cc In Me.Controls
  
  If cc.Name = "HL_Reject_Text_" & I Then  'HL1Address
    
 ' If Me.Controls.Name("HL" & i & "Address").Value <> "" Then
     Call updateHLSetting(cc.Name, cc.Value, cc.Value, cc.Value)
    
     End If
     'HL_Reject_Text_" & i
     
   '  End If
  Next
  Next
    MsgBox "weco HyperLinks BR was modified"
End Sub

Private Sub TextBox30_Change()

End Sub



Public Sub UserForm_Initialize()
    Dim Language As String
    Dim sDir As String
    Dim sFile As String
    Dim TextFile As Integer
    Dim cc As control
     Dim I As Integer

    
     sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"
    
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
  
    
   On Error Resume Next

  If Dir(sDir & sFile) <> sFile Then
   TextFile = FreeFile
    Open sDir & sFile For Output As TextFile
    Print #TextFile, "NAME,Address,Text To Display,ToolTip" & vbNewLine
    Close TextFile
    Call clearconfigfromemptylineHL(1)
   
  End If
 
          
 
 For I = 1 To 55
  For Each cc In Me.Controls
  
  If cc.Name = "HL" & I & "Address" Then  'HL1Address
   
     If getAdmSetting0(cc.Name) <> "NA" Then
     Me.Controls("HL" & I & "Address").Value = getAdmSetting0(cc.Name)
     Me.Controls("HL" & I & "Text").Value = getAdmSetting1(cc.Name)
     Me.Controls("HL" & I & "ToolTip").Value = getAdmSetting2(cc.Name)
     
     End If
     End If
  Next
  Next
   For I = 1 To 10
  For Each cc In Me.Controls
  
  If cc.Name = "HL_Reject_Text_" & I Then   'HL1Address
   
     If getAdmSetting0(cc.Name) <> "NA" Then
     Me.Controls("HL_Reject_Text_" & I).Value = getAdmSetting0(cc.Name)
  
     
     End If
     End If
  Next
  Next
    
  '  For Each cc In Me.Controls

  '      If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "MultiPage1" Then cc.Enabled = False
  '  Next
 
     If Docaddonproperties.AddinLanguage.Value = "English" Then
        CommandButton8.Caption = "Save Changes"
        Label4.Caption = "A list of words and phrases that will not allow progress if they are defined as text to display for HyperLinks"
         Label4.TextAlign = fmTextAlignLeft
         Label1.Caption = "Link Address"
         Label2.Caption = "Text to Display"
           Label3.Caption = "ToolTip"
         '  Page2.Caption = "List of rejected words and phrases"
         '  page1.Caption = "Automatic Hyperlink update "
           MultiPage1.Pages(0).Caption = "Automatic Hyperlink update "
            MultiPage1.Pages(1).Caption = "List of rejected words and phrases"
           
             For Each cc In Me.Controls
  
             If cc.Name = "HL_Reject_Text_" & I Then
   
          Me.Controls("HL_Reject_Text_" & I).TextAlign = fmTextAlignLeft
            
     
     End If
     Next
           
     Else
     End If
    
End Sub

Attribute VB_Name = "Language"
Option Explicit
Sub getLabeladdin(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "WeCo Accessibilty"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd| WeCo"
 End If
End Sub

Sub getLabelAcustAomButton1S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Generate PDF"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelGeneral(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "General"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton1(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Generate PDF"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton1S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to generate Accessible PDF"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton2(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "New Document"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton2S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this button in order to open New Document"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
 End If
End Sub


Sub getLabelAcustomButton3(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Accessibilty Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton3S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to start the Document Accessibilty Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelProp(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Settings"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelPropS(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to change the settings"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton1(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Settings"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton2(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "New Document Properties"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton2S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to change new docoment settings"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton3(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Alternative Header Text Setting"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton3S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to change Alternative Header Text Setting"
 Else
  returnedVal = " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAcustomButton4(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Status"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoPropButton4S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to get the current document Accessibilty Status and get back to the last working stage in the accessibilty wizard"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoreports(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Reports"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoreportsA(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "WeCo Validation Report"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelWeCoreportsAS(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to run WeCo Validation Report"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| WeCo"
 End If
End Sub
Sub getLabelWeCoreportsB(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Microsoft Validation Report"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub

Sub getLabelHeadings(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Headings"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton0(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Headings Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton0S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to run Headings Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton1(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Display Heading Outline Level"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton1S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Display Heading Outline Level"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton2S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H1"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H1"
 End If
End Sub
Sub getLabelBcustomButton3S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H2"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H2"
 End If
End Sub
Sub getLabelBcustomButton4S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H3"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H3"
 End If
End Sub
Sub getLabelBcustomButton5S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H4"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H4"
 End If
End Sub
Sub getLabelBcustomButton6S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H5"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H5"
 End If
End Sub
Sub getLabelBcustomButton7S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set selected paragraph Heading Outline Level to H6"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| H6"
 End If
End Sub
Sub getLabelBcustomButton8(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Cancel Heading Outline Level"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton8S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Cancel Heading Outline Level"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton11(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Selected Paragraph merging"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton11S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Selected Paragraph merging to single paragraph"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton121(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Selected Paragraph Spliting"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton121S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Selected Paragraph Spliting to seperated paragraphs"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
 End If
End Sub
Sub getLabelBcustomButton777(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Design all Headers by Company formating Policy"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelBcustomButton777S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Design all Headers by Company formating Policy"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelFormating(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Formatting"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelTables(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Tables"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton2(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Tables Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton2S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to run the Accessibilty Tables Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton3(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Single Table Tagging"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton3S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to run Single Table Tagging"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
 End If
End Sub
Sub getLabelTableTag(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging"
 Else
  returnedVal = " |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton41(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging - Rows and columns"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton43(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging - Columns Headings Only"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton42(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging - Rows Headings Only"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton44(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging - Tag as Layout Tables"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton45(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Batch Table Tagging - Auto Tagging"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub

Sub getLabelTablesEdit(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Table Edit"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton69(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Table Splitting"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton69S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to split the selected Table"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-2 |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton66(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Delete Empty Rows and Columns"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton66S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Delete Empty Rows and Columns"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton67(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Merged cells processing"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton67S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to  run Merged cells processing on the selected Table"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton68(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Vertical Merging of selected cells"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton689(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "convert row to formatted text"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton689S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "convert row to formatted text - used for tag table row as heading"
 Else
  returnedVal = " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|- |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton68S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to  run Vertical Merging of selected cells"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton699(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Change selected Table Reading Order"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelCcustomButton699S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Change selected Table Reading Order"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelSHAPES(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Grapic and HyperLinks"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelDcustomButton3(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Grapic and HyperLinks Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelDcustomButton3S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to run Grapic and HyperLinks Wizard"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub

Sub getLabelDcustomButton1(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Set Alt Text"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelDcustomButton1S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Set Alt Text"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If '
End Sub
Sub getLabelDcustomButton2(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Set HyperLink Text"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelDcustomButton2S(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to Set HyperLink Text"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAbout(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "About"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd|"
 End If
End Sub
Sub getLabelAboutS(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to find more about WeCo Accessibilty "
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| WeCo"
 End If
End Sub
Sub getLabelCustomListA(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "1st Custom List"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1"
 End If
End Sub
Sub getLabelCustomListAS(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set 1st customized list on selected paragraph "
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbTab & ".1" & vbNewLine & vbTab & vbTab & ".1.1" & vbNewLine & vbTab & vbTab & vbTab & ".1.1.1" & vbNewLine & vbTab & vbTab & vbTab & vbTab & "|fffd|." & vbNewLine & vbTab & vbTab & vbTab & vbTab & vbTab & "(1" & vbNewLine & vbTab & vbTab & vbTab & vbTab & vbTab & vbTab & "(|fffd|)"
 End If
End Sub
Sub getLabelCustomListB(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "2nd Custom List"
 Else
  returnedVal = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2"
 End If
End Sub
Sub getLabelCustomListBS(control As IRibbonControl, ByRef returnedVal)
On Error Resume Next
If Docaddonproperties.AddinLanguage.Value = "English" Then
 returnedVal = "Press this Button in order to set 2nd customized list on selected paragraph "
 Else
  returnedVal = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & vbTab & ".1" & vbNewLine & vbTab & vbTab & "|fffd|." & vbNewLine & vbTab & vbTab & vbTab & "(1" & vbNewLine & vbTab & vbTab & vbTab & vbTab & "|fffd|)" & vbNewLine & vbTab & vbTab & vbTab & vbTab & vbTab & "(1)" & vbNewLine & vbTab & vbTab & vbTab & vbTab & vbTab & vbTab & "(|fffd|)"

 End If
End Sub
Attribute VB_Name = "Login"
Attribute VB_Base = "0{414CA2FC-EE5E-4320-9DAA-5190F4F13E6B}{44CD62EC-07BB-4047-A063-6252FFF69910}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton3_Click()
Me.Hide
End Sub

Private Sub CommandButton6_Click()
Dim cc As control
If Me.USENAME = "Admin" And Me.Password = "!Admin321" Then
   Me.Hide
   For Each cc In Docaddonproperties.Controls
        cc.Enabled = True
   Next
   For Each cc In NewDocDesign.Controls
        cc.Enabled = True
   Next
 'For Each cc In WeCoPreFlight.Controls
 '       cc.Enabled = True
 '  Next
    Docaddonproperties.F_Other_List1.Enabled = True
     Docaddonproperties.F_Other_List2.Enabled = True

Else
 Load MASSAGE_BOX
          If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Your Credentials is not correct, please try once again or connect your system administrator"
  Else
        MASSAGE_BOX.TextBox1.Caption = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
'   MsgBox " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End If
End Sub
Public Sub UserForm_Initialize()
    On Error Resume Next
    Me.USENAME.SetFocus
   If Docaddonproperties.AddinLanguage.Value = "English" Then
        Label1.Caption = "User Name:"
        Label1.TextAlign = fmTextAlignLeft
        Label1.Left = 20
         Label2.Caption = "Password:"
        Label2.TextAlign = fmTextAlignLeft
        Label2.Left = 20
        CommandButton6.Caption = "Login"
        CommandButton3.Caption = "Cancel"
        USENAME.Left = 100
        Password.Left = 100
   End If
     Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
    End Sub
Attribute VB_Name = "MASSAGE_BOX"
Attribute VB_Base = "0{4649EA83-3D77-452E-8685-07A47F7E575E}{D37C66F6-58A9-454C-A09B-657D0257FF6A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton3_Click()
Me.TextBox1.Caption = ""
Unload Me
End Sub

Private Sub REPHL_Click()
Dim Link
Link = Me.REPHL.Caption

    On Error GoTo Label1_Err
    ActiveDocument.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub

Label1_Err:
    MsgBox "Cannot open " & Link
End Sub

Private Sub UserForm_Initialize()
 If Docaddonproperties.AddinLanguage.Value = "English" Then
 CommandButton3.Caption = "OK"
 End If
  Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub
Attribute VB_Name = "NewDocDesign"
Attribute VB_Base = "0{93B9C23D-6B68-4861-AEBA-8902E96C8318}{26A6DB53-E086-4C35-BD79-765B5878C153}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Function getFontList()

   Dim FontList As CommandBarControl



    On Error Resume Next

    Set FontList = Application.CommandBars("Formatting").FindControl(ID:=1728)

    On Error GoTo 0

    If FontList Is Nothing Then

        Dim Tempbar As CommandBar

        Set Tempbar = Application.CommandBars.Add

        Set FontList = Tempbar.Controls.Add(ID:=1728)

        End If

    Dim arr() As String: ReDim arr(FontList.ListCount - 1)

    Dim I As Integer

    For I = 0 To UBound(arr)

        arr(I) = FontList.List(I + 1)

        Next I

    getFontList = arr

    On Error Resume Next

    Tempbar.Delete

    End Function



Private Sub CommandButton1_Click()
Dim H1Dial As Dialog
Dim Temp As Variant
Set H1Dial = Dialogs(wdDialogFormatDefineStyleFont)
'Application.Dialogs (wdDialogFormatFont)
H1Dial.Show
With H1Dial
'Me.H1_FONT_NAME.Value = Font.Name
'Me.H1_FONTBi_NAME.Value = Font.Name
'Me.H1_FONT_Size.Value = Font.Size
'Me.H1_FONTBi_Size.Value = Font.SizeBi
End With
'Me.H1_FONT_Size = H1Dial.Font.Size

End Sub



Private Sub CommandButton6_Click()
Unload Me
End Sub

Private Sub CommandButton8_Click()
On Error Resume Next

          
  Dim cc As control
  For Each cc In Me.Controls
  If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "CommandButton8" And cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" Then
     Call updateSetting(cc.Name, cc.Value)
     End If
  Next
 
    MsgBox "WeCo  setting was modified"
End Sub




Private Sub TextBox1_Change()

End Sub

Private Sub CommandButton9_Click()
Login.Show
End Sub

Private Sub UserForm_Initialize()
On Error Resume Next
 If Docaddonproperties.AddinLanguage.Value = "English" Then
 Me.Label75.Caption = "Document properties"
 Me.Label75.TextAlign = fmTextAlignLeft
 
 Me.Label76.Caption = "Deafault Reading Order"
 Me.Label76.TextAlign = fmTextAlignLeft
 Me.Label76.Left = 6
 Me.NewDOC_ReadingOrder.TextAlign = fmTextAlignLeft
 Me.NewDOC_ReadingOrder.Left = 140
 Me.Label77.Caption = "Deafault Document Language"
 Me.Label77.TextAlign = fmTextAlignLeft
 Me.Label77.Left = 6
 Me.NewDOC_Language.TextAlign = fmTextAlignLeft
 Me.NewDOC_Language.Left = 140
 
 Me.Label78.Caption = "Margins"
 Me.Label78.TextAlign = fmTextAlignLeft
 Me.Label79.Caption = "Top"
 Me.Label79.TextAlign = fmTextAlignLeft
 Me.Label79.Left = 6

 Me.NewDOC_Top.TextAlign = fmTextAlignLeft
 Me.NewDOC_Top.Left = 60
 
 Me.Label81.Caption = "Right"
 Me.Label81.TextAlign = fmTextAlignLeft
 Me.Label81.Left = 130
 
 Me.NewDOC_Right.TextAlign = fmTextAlignLeft
 Me.NewDOC_Right.Left = 190

 Me.Label80.Caption = "Buttom"
 Me.Label80.TextAlign = fmTextAlignLeft
 Me.Label80.Left = 130
 Me.NewDOC_Buttom.TextAlign = fmTextAlignLeft
 Me.NewDOC_Buttom.Left = 190
 
 Me.Label82.Caption = "Left"
 Me.Label82.TextAlign = fmTextAlignLeft
 Me.Label82.Left = 6
 Me.NewDOC_Left.TextAlign = fmTextAlignLeft
 Me.NewDOC_Left.Left = 60
 
 Me.Label5.Caption = "Right to Left Languages"
 Me.Label5.TextAlign = fmTextAlignLeft
 Me.Label5.Top = 171
 Me.Label1.Caption = "Font Type"
 Me.Label1.TextAlign = fmTextAlignLeft
 Me.Label1.Left = 6
 Me.Label1.Top = 189
 Me.NewDOC_FONTBi_NAME.TextAlign = fmTextAlignLeft
 Me.NewDOC_FONTBi_NAME.Left = 60
 Me.NewDOC_FONTBi_NAME.Top = 189
 Me.Label2.Caption = "Size"
 Me.Label2.TextAlign = fmTextAlignLeft
 Me.Label2.Left = 165
 Me.Label2.Top = 189
 
 Me.NewDOC_FONTBi_Size.TextAlign = fmTextAlignLeft
 Me.NewDOC_FONTBi_Size.Left = 190
 Me.NewDOC_FONTBi_Size.Top = 189
  Me.Label6.Caption = "Left to Right Languages"
 Me.Label6.TextAlign = fmTextAlignLeft
 Me.Label6.Top = 132
 
 
Me.Label7.Caption = "Font Type"
 Me.Label7.TextAlign = fmTextAlignLeft
 Me.Label7.Left = 6
 Me.Label7.Top = 153
 Me.NewDOC_FONTBi_Size.Top = 189
 Me.NewDOC_FONT_NAME.TextAlign = fmTextAlignLeft
 Me.NewDOC_FONT_NAME.Top = 153
 Me.NewDOC_FONT_NAME.Left = 60
 Me.Label8.Caption = "Size"
 Me.Label8.TextAlign = fmTextAlignLeft
 Me.Label8.Left = 165
  Me.Label8.Top = 153
 Me.NewDOC_FONT_Size.TextAlign = fmTextAlignLeft
 Me.NewDOC_FONT_Size.Left = 190
  Me.NewDOC_FONT_Size.Top = 153
  Me.Label11.Caption = "Line Space"
 Me.Label11.TextAlign = fmTextAlignLeft
 Me.Label12.Caption = "Default Line Space"
 Me.Label12.TextAlign = fmTextAlignLeft
 Me.Label12.Left = 6
 Me.NewDOC_FONT_Linespace.TextAlign = fmTextAlignLeft
 Me.NewDOC_FONT_Linespace.Left = 90
 Me.CommandButton8.Caption = "Save"
 Me.CommandButton6.Caption = "Apply & Exit"
 Me.CommandButton9.Caption = "Update Settings"
 Else
 End If


Dim FontList() As String: FontList = getFontList()
    Dim I, I1, I2, j As Integer
    Dim cc As control
    For I = LBound(FontList) To UBound(FontList)
        
        With NewDOC_FONTBi_NAME
        .AddItem FontList(I)
        End With
        With NewDOC_FONT_NAME
        .AddItem FontList(I)
        End With
     
    Next I
    With Me.NewDOC_ReadingOrder
    .AddItem "Right to Left"
    .AddItem "Left to Right"
   
    End With
     If Docaddonproperties.AddinLanguage.Value = "English" Then
     
     With Me.NewDOC_Language
    .AddItem "Hebrew"
    .AddItem "English"
     .AddItem "Arabic"
     .AddItem "Russian"
     .AddItem "Spanish"
    End With
     Else
    With Me.NewDOC_Language
    .AddItem "|fffd||fffd||fffd||fffd||fffd|"
    .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
     .AddItem "|fffd||fffd||fffd||fffd||fffd|"
     .AddItem "|fffd||fffd||fffd||fffd||fffd|"
     .AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    End With
   End If
      For Each cc In Me.Controls
  If cc.Name <> "MultiPage1" And cc.Name <> "Frame" & "*" And cc.Name <> "F_Other_List1" And cc.Name <> "F_Other_List2" And cc.Name <> "folderpath" Then
     If getAdmSetting(cc.Name) <> "NA" Then cc = getAdmSetting(cc.Name)
     End If
     If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton66" And cc.Name <> "CommandButton9" And cc.Name <> "MultiPage1" And cc.Name <> "AddinLanguage" Then cc.Enabled = False
  Next
   Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub




Attribute VB_Name = "Pro_Bar"
Attribute VB_Base = "0{05A33972-0039-4308-8067-8EB9FF6EF99A}{A80367CF-44B0-48DF-B177-64D6FEA2E071}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (1)
              Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
End Sub


Attribute VB_Name = "Report_Check"
Attribute VB_Base = "0{32FA93FC-9C29-4C2F-B20F-7C50BDC144F7}{E828A752-9CE2-45D7-B476-97CED03D81C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CheckType_Change()
If Me.CheckType.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Or Me.CheckType.Value = "Organization's policy Accessibility Report" Then

Me.VUnderlineCheck.Value = Docaddonproperties.VUnderlineCheck.Value
Me.VFontTypeCheck.Value = Docaddonproperties.VFontTypeCheck.Value
Me.VFontSizeCheck.Value = Docaddonproperties.VFontSizeCheck.Value
Me.VMinLineSpaceCheck.Value = Docaddonproperties.VMinLineSpaceCheck.Value
Me.VFontItalicCheck.Value = Docaddonproperties.VFontItalicCheck.Value
Me.VHeadingsCheck.Value = Docaddonproperties.VHeadingsCheck.Value
Me.VTablesCheck.Value = Docaddonproperties.VTablesCheck.Value
Me.VAltTextCheck.Value = Docaddonproperties.VAltTextCheck.Value
Me.VManualListCheck.Value = Docaddonproperties.VManualListCheck.Value
Me.Height = 110
Else
Me.Height = 370
End If
End Sub

Private Sub CommandButton1_Click()
    On Error Resume Next
    Application.ScreenUpdating = False
    Me.Hide
   
        Unload WeCoCheckerLight
       
        WeCoCheckerLight.Show vbModeless
         WeCoCheckerLight.Hide
      

        Call WeCOLight(1)
         WeCoCheckerLight.Show vbModeless
        
  '  Else
      '  Unload WeCoCheckerLight
    '    Unload WeCoChecker
     '   WeCoChecker.Show vbModeless
  '  End If
    Unload Report_Check
    Application.ScreenUpdating = True
End Sub

Private Sub UserForm_Initialize()
 Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
Me.Height = 110
If Docaddonproperties.AddinLanguage.Value = "English" Then
With Me.CheckType
    .AddItem "Organization's policy Accessibility Report"
    .AddItem "Customized Accessibility Report"
End With
Me.Frame6.Caption = "General"
Me.VFontTypeCheck.Caption = "Font Type Test"
Me.VFontTypeCheck.TextAlign = fmTextAlignLeft
Me.VFontTypeCheck.alignment = fmAlignmentRight
Me.VFontSizeCheck.Caption = "Font Size Test"
Me.VFontSizeCheck.TextAlign = fmTextAlignLeft
Me.VFontSizeCheck.alignment = fmAlignmentRight
Me.VFontItalicCheck.Caption = "Italic Formating Test"
Me.VFontItalicCheck.TextAlign = fmTextAlignLeft
Me.VFontItalicCheck.alignment = fmAlignmentRight
Me.VMinLineSpaceCheck.Caption = "Minimum Line Space Test"
Me.VMinLineSpaceCheck.TextAlign = fmTextAlignLeft
Me.VMinLineSpaceCheck.alignment = fmAlignmentRight

Me.VUnderlineCheck.Caption = "UnderLine formating Test"
Me.VUnderlineCheck.TextAlign = fmTextAlignLeft
Me.VUnderlineCheck.alignment = fmAlignmentRight
Me.Frame7.Caption = "Headings"
Me.VHeadingsCheck.Caption = "Headings Validation Test"
Me.VHeadingsCheck.TextAlign = fmTextAlignLeft
Me.VHeadingsCheck.alignment = fmAlignmentRight
Me.Frame8.Caption = "Tables"
Me.VTablesCheck.Caption = "Tables Validation Test"
Me.VTablesCheck.TextAlign = fmTextAlignLeft
Me.VTablesCheck.alignment = fmAlignmentRight
Me.Frame9.Caption = "Graphic Elements & HyperLinks"
Me.VAltTextCheck.Caption = "Graphic Elements & HyperLink Validation Test"
Me.VAltTextCheck.TextAlign = fmTextAlignLeft
Me.VAltTextCheck.alignment = fmAlignmentRight
Me.Frame9.Caption = "Manual Numbering"
Me.VManualListCheck.Caption = "Manual Numbering Validation Test"
Me.VManualListCheck.TextAlign = fmTextAlignLeft
Me.VManualListCheck.alignment = fmAlignmentRight
Me.CommandButton1.Caption = "Run Test"
Me.Label3.Caption = "Please select the requested tests"
Me.Label2.Caption = "Please Choose the requested Report"
Else
With Me.CheckType
    .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    .AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
End With
End If
Me.CheckType.ListIndex = 0
'If Docaddonproperties.VUnderlineCheck.Value = True Then Me.VUnderlineCheck.Value = True
'If Docaddonproperties.VFontTypeCheck.Value = True Then Me.VFontTypeCheck.Value = True
'If Docaddonproperties.VFontSizeCheck.Value = True Then Me.VFontSizeCheck.Value = True
'If Docaddonproperties.VMinLineSpaceCheck.Value = True Then Me.VMinLineSpaceCheck.Value = True
''If Docaddonproperties.VFontItalicCheck.Value = True Then Me.VFontItalicCheck.Value = True
'If Docaddonproperties.VHeadingsCheck.Value = True Then Me.VHeadingsCheck.Value = True
'If Docaddonproperties.VTablesCheck.Value = True Then Me.VTablesCheck.Value = True
'If Docaddonproperties.VAltTextCheck.Value = True Then Me.VAltTextCheck.Value = True
'If Docaddonproperties.VManualListCheck.Value = True Then Me.VManualListCheck.Value = True
Me.VUnderlineCheck.Value = Docaddonproperties.VUnderlineCheck.Value
Me.VFontTypeCheck.Value = Docaddonproperties.VFontTypeCheck.Value
Me.VFontSizeCheck.Value = Docaddonproperties.VFontSizeCheck.Value
Me.VMinLineSpaceCheck.Value = Docaddonproperties.VMinLineSpaceCheck.Value
Me.VFontItalicCheck.Value = Docaddonproperties.VFontItalicCheck.Value
Me.VHeadingsCheck.Value = Docaddonproperties.VHeadingsCheck.Value
Me.VTablesCheck.Value = Docaddonproperties.VTablesCheck.Value
Me.VAltTextCheck.Value = Docaddonproperties.VAltTextCheck.Value
Me.VManualListCheck.Value = Docaddonproperties.VManualListCheck.Value
End Sub
Attribute VB_Name = "SmartReplace"
Attribute VB_Base = "0{CD7B17FF-BB96-4481-B376-3BCCCD9322E5}{7D4999E7-9611-4B88-B6A1-85EB984B3EDF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton8_Click()
On Error Resume Next
Dim I As Integer
          
  Dim cc As control
 For I = 1 To 15
  For Each cc In Me.Controls
  
  If cc.Name = "Find" & I Then
    
 ' If Me.Controls.Name("HL" & i & "Address").Value <> "" Then
     Call updateSmartreplaceSetting(Me.Controls("Find" & I).Name, Me.Controls("Find" & I).Value, Me.Controls("Replace" & I).Value)
    
     End If
   '  End If
  Next
  Next
    MsgBox "weco Smart Replace was modified"
End Sub

Private Sub TextBox30_Change()

End Sub

Public Sub UserForm_Initialize()
    Dim Language As String
    Dim sDir As String
    Dim sFile As String
    Dim TextFile As Integer
    Dim cc As control
     Dim I As Integer
 
    
     sDir = Application.StartupPath & "\"
    sFile = "SmartReplace.txt"
    
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
  
    
   On Error Resume Next

  If Dir(sDir & sFile) <> sFile Then
   TextFile = FreeFile
    Open sDir & sFile For Output As TextFile
    Print #TextFile, "Name,Find,Replace" & vbNewLine
    Close TextFile
    Call clearSmartReplacefromemptyline(1)
   
  End If
 
          
 
 For I = 1 To 15
  For Each cc In Me.Controls
  
  If cc.Name = "Find" & I Then
   
     If getAdmSmartReplaceSetting0(cc.Name) <> "NA" Then
     Me.Controls("Find" & I).Value = getAdmSmartReplaceSetting0(cc.Name)
     Me.Controls("Replace" & I).Value = getAdmSmartReplaceSetting1(cc.Name)
    
     
     End If
     End If
  Next
  Next
    
    
  '  For Each cc In Me.Controls

  '      If cc.Name <> "CommandButton3" And cc.Name <> "CommandButton6" And cc.Name <> "CommandButton9" And cc.Name <> "MultiPage1" Then cc.Enabled = False
  '  Next
  If Docaddonproperties.AddinLanguage.Value = "English" Then
  Label2.Caption = "Alternative Phase"
  Label1.Caption = "Original Phase"
  CommandButton8.Caption = "Save Changes"
  Else
  End If
     Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
    
End Sub

Attribute VB_Name = "StatusForm"
Attribute VB_Base = "0{278A222F-0AFE-49F3-B294-1A097C5758C5}{635BB5E5-F4EC-4017-A016-4841E240DBBA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton3_Click()
Me.TextBox1.Caption = ""
Unload Me
End Sub
  
  


Private Sub gotowizzard_Click()
Select Case ActiveDocument.BuiltInDocumentProperties("Comments").Value
 
 
 Case "|fffd||fffd||fffd| 1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
        Unload Me
        DocMetaData.Show vbModeless
 Case "Document Properties" & Chr(10)
        Unload Me
        DocMetaData.Show vbModeless
Case "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Chr(10)
        Unload Me
        DocHeading.Show vbModeless
Case "Document Headings" & Chr(10)
     Unload Me
        DocHeading.Show vbModeless
Case "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
         Unload Me
         DocTables.Show vbModeless
Case "Document Tables" & Chr(10)
Unload Me
         DocTables.Show vbModeless
Case "|fffd||fffd||fffd| 4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
         Unload Me
         DocShapes.Show vbModeless
  Case "Document Grapics and HyperLinks" & Chr(10)
    Unload Me
         DocShapes.Show vbModeless
Case "|fffd||fffd||fffd| 5 - |fffd||fffd||fffd||fffd| " & Chr(10)
         Unload Me
         docfinish.Show vbModeless
Case "Final" & Chr(10)
    Unload Me
         docfinish.Show vbModeless
End Select
End Sub

  Public Sub UserForm_Initialize()

  
  If Application.Documents.Count < 1 Then Exit Sub '
    If Docaddonproperties.AddinLanguage.Value = "English" Then
     On Error Resume Next
    If ActiveDocument.BuiltInDocumentProperties("Comments") = "" Then
   
         Me.TextBox1.Caption = "No previous use in Accessibilty Wizard was Detected"
         Me.gotowizzard.Visible = False
    Else
         Me.TextBox1.Caption = "The Last Stage that was used : " & ActiveDocument.BuiltInDocumentProperties("Comments") & ""
           
    End If
    Me.CommandButton3.Caption = "Exit"
    gotowizzard.Caption = "Go To the the current stage"
    Else
    On Error Resume Next
    If ActiveDocument.BuiltInDocumentProperties("Comments") = "" Then
    
         Me.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         Me.gotowizzard.Visible = False
    Else
         Me.TextBox1.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & ActiveDocument.BuiltInDocumentProperties("Comments") & ""
           
    End If
   End If
    Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
  End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "WeCoCheckerLight"
Attribute VB_Base = "0{EAF40ECF-0489-4E6F-B853-2C656B6D3C41}{BE744030-59FE-4681-A1CE-B9848EA20FC7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private DocProp(30) As String
Private aTabHasItems(6) As Boolean
Private iTabNum As Integer
Private oDoc As Object

Private aFonts() As String
Private aFontsPS() As String
Private aStyles() As String
Private aSections() As String
Private aTabChosen(6) As Boolean

Private aNumItems(6) As Integer
Private aTabName(6) As String
Private StatusMsg(6) As String
Private aReportDone(6) As Boolean
Private aReportCols(6) As Integer
Private aShowReportButton(6) As Boolean
Private aAllowGoTo(6) As Boolean
Private aLastLoc(6, 1) As Integer
Private bReportCreated As Boolean
Private strFN As String 'Filename
Private oTable As Object
Private oCell As Object
Private oRow As Object

Private oRDoc As Object

Private sMacroName As String
Private iCount As Integer
Private I As Integer
Private Q$
Private strFontSampleText As String
Private DocStats(9, 1) As String

Private Sub CommandButton1_Click()
Call HighlightFonts(1)

End Sub

Private Sub CommandButton2_Click()
Call UnHighlightAll(1)
End Sub

Private Sub CommandButton10_Click()
Unload WeCoCheckerLight


End Sub




Private Sub CommandButton4_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer

If ValidHeadingButton.Caption = "Show" Then
    iMoveIt = 200
    Me.ValidTables.Height = Me.ValidHeading.Height + iMoveIt
    ValidHeadingButton.Caption = "Hide"
Else
    iMoveIt = -200
    ValidHeadingButton.Caption = "Show"
     Me.ValidHeading.Height = Me.ValidHeading.Height + iMoveIt
End If


Me.Height = Me.Height + iMoveIt

For Each ufCtrl In Me.ValidHeading.Controls
    Select Case UCase(ufCtrl.Tag)
        Case "HIDE"
            ufCtrl.Visible = Not ufCtrl.Visible
        Case "MOVE"
            ufCtrl.Top = ufCtrl.Top + iMoveIt
        Case Else
            ' do nothing
    End Select
        
Next
For Each ufCtrl In Me.Controls
    Select Case UCase(ufCtrl.Tag)
        Case "HIDE"
            ufCtrl.Visible = Not ufCtrl.Visible
        Case "MOVE"
            ufCtrl.Top = ufCtrl.Top + iMoveIt
        Case Else
            ' do nothing
    End Select
        
Next
End Sub
Private Function FontSCHECK(fnt As String) As Boolean




 Selection.HomeKey Unit:=wdStory
   Selection.Find.ClearFormatting
   With Selection.Find
       .Text = ""
       .Font.Name = fnt
       .Forward = True
       .Format = True
       .Execute
       If .Found Then
        FontSCHECK = True
        Exit Function
       Else
          FontSCHECK = False
          Exit Function
       End If
   End With

End Function



Private Sub CommandButton11_Click()
Call ValRepExp(1)
End Sub

Private Sub FontItalicS_Click()
On Error Resume Next

WeCoCheckerLight.FontItalicS.Visible = False
WeCoCheckerLight.FontItalicSNext.Visible = True
Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
  
    With oRng.Find
       
        .ClearFormatting
   
        .Text = ""
    
        .Font.Italic = True
     
        While .Execute
        
             oRng.Select
             Application.ScreenUpdating = True
              oRng.Select
              WeCoChecker.FontItalicSState.Caption = "1"
              Do Until WeCoCheckerLight.FontItalicSState.Caption = "0"
               DoEvents
              Loop
           
    
        Wend
    End With
   Load MASSAGE_BOX
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = "No more suspects were found"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
    
    FontItalicS.Visible = True
FontItalicSNext.Visible = False
FontItalicSState.Caption = "0"
End Sub

Private Sub FontS_Click()
    With WeCoCheckerLight.FontsListbox
        j = .ListIndex
        If j = -1 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
   
                MsgBox "No Fonts was selected"
            Else
                MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
      
            Exit Sub
        End If
        fnt = Trim(.List(j))
    
 
    End With
  
  
    WeCoCheckerLight.FontS.Visible = False
    WeCoCheckerLight.FontSNext.Visible = True
    Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
  
    With oRng.Find
        
        .ClearFormatting
      
        .Text = ""
    
        .Font.Name = fnt
      
     
        While .Execute
        
            oRng.Select
           
            Application.ScreenUpdating = True
            oRng.Select
            WeCoCheckerLight.FontSState.Caption = "1"
            Do Until WeCoCheckerLight.FontSState.Caption = "0"
                DoEvents
            Loop

     
        Wend
    End With
    With oRng.Find
      
        .ClearFormatting
      
        .Text = ""
     
        .Font.NameBi = fnt
      
   
        While .Execute
       
            oRng.Select
           
            Application.ScreenUpdating = True
            oRng.Select
            WeCoCheckerLight.FontSState.Caption = "1"
            Do Until WeCoCheckerLight.FontSState.Caption = "0"
                DoEvents
            Loop

      
        Wend
    End With
    If Docaddonproperties.AddinLanguage.Value = "English" Then
   
        MsgBox "Aditional suspect was not detected"
    Else
  
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    WeCoCheckerLight.FontS.Visible = True
    WeCoCheckerLight.FontSNext.Visible = False
    FontSState.Caption = "0"
End Sub



Private Sub FontSizeS_Click()
On Error Resume Next
Dim I As Integer
Dim mm, m As Variant
WeCoCheckerLight.FontSizeS.Visible = False
WeCoCheckerLight.FontSizeSNext.Visible = True

    mm = Val(Docaddonproperties.BodyMinFontVal.Value) * 2
  
    For I = 2 To mm - 1
   

   Call fontminsizec(I / 2)
    
   If I = mm - 1 Then GoTo NXT1
   Next I
NXT1:
    Load MASSAGE_BOX
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = "No more suspects were found"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
   WeCoCheckerLight.FontSizeS.Visible = True
WeCoCheckerLight.FontSizeSNext.Visible = False
FontSizeSState.Caption = "0"
End Sub

Private Sub FontsListbox_Change()
FontS.Visible = True
FontSNext.Visible = False
End Sub

Private Sub FontsListbox_click()
FontS.Visible = True
FontSNext.Visible = False
End Sub

Private Sub FontSNext_Click()
WeCoCheckerLight.FontSState.Caption = "0"
End Sub



Private Sub FontUnderlineS_Click()
On Error Resume Next

WeCoCheckerLight.FontUnderlineS.Visible = False
WeCoCheckerLight.FontUnderlineSNext.Visible = True
Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
   
    With oRng.Find
      
        .ClearFormatting
      
        .Text = ""
     
        .Font.Underline = True
        
     
        While .Execute
       
             oRng.Select
            If oRng.Hyperlinks.Count > 0 Then GoTo NXT1
             Application.ScreenUpdating = True
              oRng.Select
              WeCoCheckerLight.FontUnderlineSState.Caption = "1"
              Do Until WeCoCheckerLight.FontUnderlineSState.Caption = "0"
               DoEvents
              Loop
NXT1:
      
        Wend
    End With
   Load MASSAGE_BOX
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = "No more suspects were found"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
   WeCoCheckerLight.FontUnderlineS.Visible = True
WeCoCheckerLight.FontUnderlineSNext.Visible = False
FontUnderlineSState.Caption = "0"
End Sub

Private Sub HeadingS_Change()
On Error Resume Next
 With Selection
   n = Trim(Mid(HeadingS.Value, InStr(1, HeadingS.Value, "(") + 1, InStr(1, HeadingS.Value, ")") - 1))
   If InStr(n, ")") = 0 Then
   l = n ' = Len(n)
   Else
    l = Mid(n, 1, Len(n) - 1)
   End If
  
   m = l ' Mid(n, 1, l)
  

    ActiveDocument.Paragraphs(m).Range.Select
  End With
End Sub

Private Sub HeadingS_Click()
On Error Resume Next
With Selection
   n = Trim(Mid(HeadingS.Value, InStr(1, HeadingS.Value, "(") + 1, InStr(1, HeadingS.Value, ")") - 1))
   If InStr(n, ")") = 0 Then
   l = n ' = Len(n)
   Else
    l = Mid(n, 1, Len(n) - 1)
   End If
  
   m = l ' Mid(n, 1, l)
  

    ActiveDocument.Paragraphs(m).Range.Select

  End With
End Sub

Private Sub Image6_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal DragState As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)

End Sub

Private Sub HeadingS_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
On Error Resume Next
 With Selection
   n = Trim(Mid(HeadingS.Value, InStr(1, HeadingS.Value, "(") + 1, InStr(1, HeadingS.Value, ")") - 1))
   If InStr(n, ")") = 0 Then
   l = n ' = Len(n)
   Else
    l = Mid(n, 1, Len(n) - 1)
   End If
  
   m = l ' Mid(n, 1, l)
  

    ActiveDocument.Paragraphs(m).Range.Select
  End With
End Sub

Private Sub lbGraphic_change()
'''''

''''
 On Error Resume Next
    Dim astory As Range
    Dim shp As Shape
    Dim aAnchor As Range
   ' Application.ScreenUpdating = False
    ActiveDocument.Paragraphs(1).Range.Select
    ActiveWindow.View.Type = wdPrintView
     If ActiveWindow.View.SplitSpecial = wdPaneNone Then
       ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
    n = Trim(Mid(Me.lbGraphic.Value, 1, InStr(1, Me.lbGraphic.Value, ".") - 1))
    m = Trim(Mid(Me.lbGraphic.Value, InStr(1, Me.lbGraphic.Value, ".") + 1, InStr(1, Me.lbGraphic.Value, "(") - 1))
    j = Trim(Mid(m, 1, InStr(1, m, "(") - 1))
    s = Trim(Mid(m, InStr(1, m, "(") + 1, Len(m)))
    SS = Trim(Mid(s, 1, Len(s) - 1))
  
    Application.ScreenUpdating = True
    For Each astory In ActiveDocument.StoryRanges
       
                     Select Case astory.StoryType
                      Case "wdEvenPagesFooterStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                       ActiveWindow.View.Type = wdPrintView
                      Case "wdEvenPagesHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                     ActiveWindow.View.Type = wdPrintView
                      Case "wdFirstPageFooterStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                      ActiveWindow.View.Type = wdPrintView
                     Case "wdFirstPageHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                      ActiveWindow.View.Type = wdPrintView
                       Case "wdPrimaryFooterStory"
                       ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                       ActiveWindow.View.Type = wdPrintView
                       Case "wdPrimaryHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                      ActiveWindow.View.Type = wdPrintView
                       Case Else
                       ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
                      ActiveWindow.View.Type = wdPrintView
                    End Select
            If j = "ShapeRange" Then
             
                For Each shp In astory.ShapeRange
                    If shp.Name = SS Then
                  
                    ' shp.Select
                      Set aAnchor = shp.Anchor
                     aAnchor.Select
                     '    With Selection
                     '    .Range.Select
                     '    End With
                     shp.Select
                     With Selection
                     If Trim(shp.AlternativeText) = "" Then
                     shp.AlternativeText = shp.Title
                     shp.Title = ""
                     Me.G_AltText.Text = shp.AlternativeText
                     Else
                     Me.G_AltText.Text = shp.AlternativeText
                     End If
                      
                     End With
                       '  Me.G_AltText.Text = Selection.ShapeRange(1).AlternativeText & vbNewLine & j  'shp.AlternativeText
                     Exit Sub
                    End If
                Next
           End If
    
            If j = "InlineShapes" Then
            astory.InlineShapes(SS).Select
            With Selection
                     If Trim(astory.InlineShapes(SS).AlternativeText) = "" Then
                      astory.InlineShapes(SS).AlternativeText = AlternativeTextastory.InlineShapes(SS).Title
                      AlternativeTextastory.InlineShapes(SS).Title = ""
                      Me.G_AltText.Text = astory.InlineShapes(SS).AlternativeText
                      Else
                      Me.G_AltText.Text = astory.InlineShapes(SS).AlternativeText
                     End If
                     ' Me.G_AltText.Text = "TILE: " & AlternativeTextastory.InlineShapes(SS).Title & vbNewLine & "DEDC:" & astory.InlineShapes(SS).AlternativeText
                     End With
           '  Me.G_AltText.Text = Selection.InlineShapes(1).AlternativeText & vbNewLine & j ' astory.InlineShapes(SS).AlternativeText
             Exit Sub
            End If

        
    Next astory

  
  WeCoCheckerLight.lbGraphiccount.SetFocus
End Sub

Private Sub lbGraphiccount_change()
WeCoCheckerLight.lbGraphic.Value = WeCoCheckerLight.lbGraphic.List(lbGraphiccount.Value - 1)
WeCoCheckerLight.lbGraphic.SetFocus
'
End Sub

Private Sub lbHyperlinks_Change()
    On Error Resume Next
    Dim astory As Range
    Application.ScreenUpdating = False
     ActiveWindow.View.Type = wdPrintView
    ActiveDocument.Paragraphs(1).Range.Select
    System.Cursor = wdCursorWait
    If aNumItems(iTabNum) > 0 Then
        ActiveDocument.Hyperlinks(lbHyperlinks.ListIndex + 1).Range.Select
        With Selection
            UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
        End With
   
    End If
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    If Selection.Range.Text <> ActiveDocument.Paragraphs(1).Range.Text Then
        With Selection
            Me.HLToolTip = .Hyperlinks(1).ScreenTip
            Me.HLText = .Hyperlinks(1).TextToDisplay
            .Hyperlinks(1).Range.Select
        End With
    Else
      
        
        For Each astory In ActiveDocument.StoryRanges
            If astory.StoryType <> wdMainTextStory Then
                If astory.Hyperlinks.Count > 0 Then
                    For I = 1 To astory.Hyperlinks.Count
                        If astory.Hyperlinks(I).Address = Me.lbHyperlinks.Value Then
                            astory.Hyperlinks(I).Range.Select
                            With Selection
                                Me.HLToolTip = .Hyperlinks(1).ScreenTip
                                Me.HLText = .Hyperlinks(1).TextToDisplay
                                .Hyperlinks(1).Range.Select
                            End With
                            Exit Sub
                        End If
                      
                    Next
                End If
            End If
        Next astory
  
  
        Selection.GoTo What:=wdGoToField, Name:=Me.lbHyperlinks.Value
    End If
End Sub



Private Sub LineSpaceS_Click()
On Error Resume Next

Dim I As Integer
Dim mm As Variant
WeCoCheckerLight.LineSpaceS.Visible = False
WeCoCheckerLight.LineSpaceSNext.Visible = True
Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
   
    mm = LinesToPoints(Docaddonproperties.minLineSpaceVal)
 
    For I = mm - 1 To 1 Step -1
   '
    With oRng.Find
 
        .ClearFormatting
      
        .Text = ""
    
        .ParagraphFormat.LineSpacing = I
        
    
        While .Execute
        
             oRng.Select
           
             Application.ScreenUpdating = True
              oRng.Select
              WeCoChecker.LineSpaceSState.Caption = "1"
              Do Until WeCoCheckerLight.LineSpaceSState.Caption = "0"
               DoEvents
              Loop
NXT1:
      
        Wend
    End With
    Next I
   Load MASSAGE_BOX
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = "No more suspects were found"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
 WeCoCheckerLight.LineSpaceS.Visible = True
WeCoCheckerLight.LineSpaceSNext.Visible = False
LineSpaceSState.Caption = "0"
End Sub

Private Sub ManList_Change()
On Error Resume Next
 With Selection
   n = Trim(Mid(ManList.Value, InStr(1, ManList.Value, "@") + 1, InStr(1, ManList.Value, ")")))
   If InStr(n, ")") = 0 Then
   l = n ' = Len(n)
   Else
    l = Mid(n, 1, Len(n) - 1)
   End If
  
   m = l ' Mid(n, 1, l)
  

    ActiveDocument.Paragraphs(m).Range.Select

  End With
End Sub


Private Sub ManList_Click()
On Error Resume Next
 With Selection
   n = Trim(Mid(ManList.Value, InStr(1, ManList.Value, "@") + 1, InStr(1, ManList.Value, ")")))
   If InStr(n, ")") = 0 Then
   l = n ' = Len(n)
   Else
    l = Mid(n, 1, Len(n) - 1)
   End If
  
   m = l ' Mid(n, 1, l)
  

    ActiveDocument.Paragraphs(m).Range.Select

  End With

End Sub

Private Sub TableS_Change()
On Error Resume Next
If WeCoCheckerLight.T_STAT_V.Visible = True Then Exit Sub

With Selection
  If Docaddonproperties.AddinLanguage.Value = "English" Then
    n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, ",") - 6))
     l = Len(n)
  Else
   n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, "|fffd|") - 7))
    l = Len(n) - 1
   End If
  
   m = Mid(n, 1, l)
  
    ActiveDocument.TableS(m).Select
  End With
  lbTables.ListIndex = m - 1
End Sub

Private Sub TableS_Click()
On Error Resume Next
If WeCoCheckerLight.T_STAT_V.Visible = True Then Exit Sub

With Selection
  If Docaddonproperties.AddinLanguage.Value = "English" Then
    n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, ",") - 6))
     l = Len(n)
  Else
   n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, "|fffd|") - 7))
    l = Len(n) - 1
   End If
  
   m = Mid(n, 1, l)
  
    ActiveDocument.TableS(m).Select
  End With
  lbTables.ListIndex = m - 1
End Sub

Private Sub TreeView1_BeforeLabelEdit(Cancel As Integer)

End Sub


Private Sub TableS_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
On Error Resume Next
If WeCoCheckerLight.T_STAT_V.Visible = True Then Exit Sub

With Selection
  If Docaddonproperties.AddinLanguage.Value = "English" Then
    n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, ",") - 6))
     l = Len(n)
  Else
   n = Trim(Mid(TableS.Value, 6, InStr(1, TableS.Value, "|fffd|") - 7))
    l = Len(n) - 1
   End If
  
   m = Mid(n, 1, l)
  
    ActiveDocument.TableS(m).Select
  End With
  lbTables.ListIndex = m - 1
End Sub

Public Sub UserForm_Initialize()
On Error Resume Next
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        Me.Label146.Caption = "General Information"
        Me.Label146.TextAlign = fmTextAlignLeft
        Me.Label1.Caption = "Document name:"
        Me.Label1.TextAlign = fmTextAlignLeft
        Me.Label1.Left = 6
        Me.Label1.Width = 100
        Me.lblFileName.Left = 110
        Me.lblFileName.Width = 158
        Me.lblFileName.TextAlign = fmTextAlignLeft
        Me.Label3.Caption = "Document Title:"
        Me.Label3.TextAlign = fmTextAlignLeft
        Me.Label3.Left = 6
        Me.Label3.Width = 100
        Me.lblTitle.Left = 110
        Me.lblTitle.Width = 158
        Me.lblTitle.TextAlign = fmTextAlignLeft
        Me.Label7.Caption = "Folder Path:"
        Me.Label7.TextAlign = fmTextAlignLeft
        Me.Label7.Left = 6
        Me.Label7.Width = 100
        Me.lblLocation.Left = 110
        Me.lblLocation.Width = 158
        Me.lblLocation.TextAlign = fmTextAlignLeft
        Me.Label6.Caption = "Number of Pages:"
        Me.Label6.TextAlign = fmTextAlignLeft
        Me.Label6.Left = 6
        Me.Label6.Width = 100
        Me.lblPages.Left = 95
        Me.lblPages.Width = 15
        Me.Label5.Caption = "Primary Language:"
        Me.Label5.TextAlign = fmTextAlignLeft
        Me.Label5.Left = 120
        Me.Label5.Width = 100
        Me.lbLanguage.Left = 210
        Me.Label144.Caption = "Fonts:"
        Me.Label144.TextAlign = fmTextAlignLeft
        Me.Label144.Left = 6
        Me.FontS_Genreal.TextAlign = fmTextAlignLeft
        Me.FontSNext.Caption = "Next"
        Me.FontSNext.Left = 230
        Me.FontS.Caption = "Search"
        Me.FontS.Left = 230
        Me.Label8.Caption = "Invalid fonts used:"
        Me.Label8.TextAlign = fmTextAlignLeft
        Me.Label8.Left = 6
        Me.FontsListbox.Left = 110
        
        
       Me.Label164.Caption = "Invalid fonts size used:"
       Me.Label164.TextAlign = fmTextAlignLeft
        Me.Label164.Left = 6
        Me.FontSizeS.Left = 230
        Me.FontSizeS.Caption = "Search"
        Me.FontSizeSNext.Left = 230
        Me.FontSizeSNext.Caption = "Next"
        Me.FontSize.Left = 200
        Me.Label163.Caption = "Invalid Line Space used:"
        'Me.LineSpaceSState.Left = 180
       Me.Label163.TextAlign = fmTextAlignLeft
        Me.Label163.Left = 6
        Me.LineSpaceS.Left = 230
        Me.LineSpaceS.Caption = "Search"
        Me.LineSpaceSNext.Left = 230
        Me.LineSpaceSNext.Caption = "Next"
        Me.LineSpace.Left = 200
         Me.Label160.Caption = "Invalid  use in Italic format:"
       Me.Label160.TextAlign = fmTextAlignLeft
        Me.Label160.Left = 6
        Me.FontItalicS.Left = 230
        Me.FontItalicS.Caption = "Search"
        Me.FontItalicSNext.Left = 230
        Me.FontItalicSNext.Caption = "Next"
        'Me.FontItalicSState.Left = 180
        Me.FontItalic.Left = 200
          Me.Label162.Caption = "Invalid  use in Underline format:"
       Me.Label162.TextAlign = fmTextAlignLeft
        Me.Label162.Left = 6
       Me.FontUnderlineS.Left = 230
       Me.FontUnderlineS.Caption = "Search"
        Me.FontUnderlineSNext.Left = 230
       ' Me.FontUnderlineSState.Left = 230
       Me.FontUnderlineSNext.Caption = "Next"
      ' Me.FontUnderlineSState.Left = 180
       Me.FontUnderline.Left = 200
        ''Headings
        Me.HeadingS_General.TextAlign = fmTextAlignLeft
        Me.HeadingS.TextAlign = fmTextAlignLeft
        Me.Label115.Caption = "Headings"
        Me.Label115.TextAlign = fmTextAlignLeft
        Me.Label10.Caption = "H1:"
        Me.Label10.TextAlign = fmTextAlignLeft
        Me.Label10.Left = 6
        Me.O1.Left = 42
        Me.Label11.Caption = "H2:"
        Me.Label11.TextAlign = fmTextAlignLeft
        Me.Label11.Left = 6
        Me.O2.Left = 42
        Me.Label12.Caption = "H3:"
        Me.Label12.TextAlign = fmTextAlignLeft
        Me.Label12.Left = 6
        Me.O3.Left = 42
        Me.Label13.Caption = "H4:"
        Me.Label13.TextAlign = fmTextAlignLeft
        Me.Label13.Left = 108
        Me.O4.Left = 120
        Me.Label14.Caption = "H5:"
        Me.Label14.TextAlign = fmTextAlignLeft
        Me.Label14.Left = 108
        Me.O5.Left = 120
        Me.Label15.Caption = "H6:"
        Me.Label15.TextAlign = fmTextAlignLeft
        Me.Label15.Left = 108
        Me.O6.Left = 120
        Me.Label16.Caption = "H7:"
        Me.Label16.TextAlign = fmTextAlignLeft
        Me.Label16.Left = 192
        Me.O7.Left = 215
        Me.Label17.Caption = "H8:"
        Me.Label17.TextAlign = fmTextAlignLeft
        Me.Label17.Left = 192
        Me.O8.Left = 215
        Me.Label18.Caption = "Total:"
        Me.Label18.TextAlign = fmTextAlignLeft
        Me.Label18.Left = 192
        Me.OTotal.Left = 215
        ''Tables
        Me.TableS_General.TextAlign = fmTextAlignLeft
        Me.TableS.TextAlign = fmTextAlignLeft
        Me.Label116.Caption = "Tables"
        Me.Label116.TextAlign = fmTextAlignLeft
        Me.Label137.Caption = "Document Total Tables:"
        Me.Label137.Left = 6
        Me.Label137.TextAlign = fmTextAlignLeft
        Me.Label137.Width = 180
        Me.STTotal.Left = 200
        Me.Label138.Caption = "Tables without description:"
        Me.Label138.Left = 6
        Me.Label138.TextAlign = fmTextAlignLeft
        Me.Label138.Width = 180
        Me.STDescr.Left = 200
        Me.Label139.Caption = "Tables with merged Cells:"
        Me.Label139.Left = 6
        Me.Label139.TextAlign = fmTextAlignLeft
        Me.Label139.Width = 180
        Me.STMerge.Left = 200
        Me.Label140.Caption = "Tables without Headings:"
        Me.Label140.Left = 6
        Me.Label140.TextAlign = fmTextAlignLeft
        Me.Label140.Width = 180
        Me.STHead.Left = 200
  
        Me.Label106.Caption = "Number of Rows:"
        Me.Label106.Left = 6
        Me.Label106.TextAlign = fmTextAlignLeft
        Me.Label106.Width = 110
        Me.Label107.Caption = "Number of Columns:"
        Me.Label107.Left = 6
        Me.Label107.TextAlign = fmTextAlignLeft
        Me.Label107.Width = 110
        Me.Label108.Caption = "Table Includes Merged Cells:"
        Me.Label108.Left = 6
        Me.Label108.TextAlign = fmTextAlignLeft
        Me.Label108.Width = 110
        Me.Label109.Caption = "Table Reading Order:"
        Me.Label109.Left = 6
        Me.Label109.TextAlign = fmTextAlignLeft
        Me.Label109.Width = 110
        Me.Label110.Caption = "Table Description:"
        Me.Label110.Left = 6
        Me.Label110.TextAlign = fmTextAlignLeft
        Me.Label110.Width = 110
        Me.Label111.Caption = "Table Includes Heading Tag:"
        Me.Label111.Left = 6
        Me.Label111.TextAlign = fmTextAlignLeft
        Me.Label111.Width = 120
        Me.Label112.Caption = "Table rows break across pages:"
        Me.Label112.Left = 6
        Me.Label112.TextAlign = fmTextAlignLeft
        Me.Label112.Width = 120
        Me.Label113.Caption = "Table Headings Taging:"
        Me.Label113.Left = 6
        Me.Label113.TextAlign = fmTextAlignLeft
        Me.Label113.Width = 110
        Me.OptionButton1.Left = 6
        Me.OptionButton1.alignment = fmAlignmentRight
        Me.OptionButton1.TextAlign = fmTextAlignLeft
        Me.OptionButton1.Caption = "Rows & Columns"
        Me.OptionButton1.Width = 100
        Me.OptionButton2.Left = 6
        Me.OptionButton2.alignment = fmAlignmentRight
        Me.OptionButton2.TextAlign = fmTextAlignLeft
        Me.OptionButton2.Caption = "Rows Only"
        Me.OptionButton2.Width = 100
        Me.OptionButton3.Left = 6
        Me.OptionButton3.alignment = fmAlignmentRight
        Me.OptionButton3.TextAlign = fmTextAlignLeft
        Me.OptionButton3.Caption = "Columns Only"
        Me.OptionButton3.Width = 100
        Me.OptionButton4.Left = 6
        Me.OptionButton4.alignment = fmAlignmentRight
        Me.OptionButton4.TextAlign = fmTextAlignLeft
        Me.OptionButton4.Caption = "Layout Table"
        Me.OptionButton4.Width = 100
  
        Me.lbTables.Left = 200
        Me.Label35.Caption = "Tables List"
        Me.Label35.Left = 190
        Me.lblTableRows.Left = 140
        Me.lblTableColumns.Left = 140
        Me.lblTableUniform.Left = 140
        Me.lblTableAlignment.Left = 140
        Me.TableDesc.Left = 6
        Me.lblTableHeading.Left = 140
        Me.lblTableAllowBreak.Left = 140
        '' Graphic Elements
        Me.AltText_General.TextAlign = fmTextAlignLeft
        Me.G_AltText.TextAlign = fmTextAlignLeft
        Me.Label145.Caption = "Alternative Text"
        Me.Label145.TextAlign = fmTextAlignLeft
        Me.Label21.Caption = "Document Body Graphic Elements:"
        Me.Label21.Left = 6
        Me.Label21.TextAlign = fmTextAlignLeft
        Me.Label21.Width = 140
        Me.Label22.Caption = "Document Header Graphic Elements:"
        Me.Label22.Left = 6
        Me.Label22.TextAlign = fmTextAlignLeft
        Me.Label22.Width = 140
        Me.Label23.Caption = "Document Footer Graphic Elements:"
        Me.Label23.Left = 6
        Me.Label23.TextAlign = fmTextAlignLeft
        Me.Label23.Width = 140
        Me.Label24.Caption = "Total Graphic Elements:"
        Me.Label24.Left = 6
        Me.Label24.TextAlign = fmTextAlignLeft
        Me.Label24.Width = 140
        Me.Label29.Caption = "Graphic Elements without Alt Text:"
        Me.Label29.Left = 6
        Me.Label29.TextAlign = fmTextAlignLeft
        Me.Label29.Width = 140
     
        Me.Label150.Caption = "Alternative Text:"
        Me.Label150.TextAlign = fmTextAlignLeft
        Me.Label150.Left = 6
  
        Me.lbGraphiccount.Left = 193
        Me.G_AltText.Width = 274
        Me.G_AltText.Left = 6
        Me.SBodyS.Left = 150
        Me.SHeaderS.Left = 150
        Me.SFooters.Left = 150
        Me.STotals.Left = 150
        Me.SNoDescT.Left = 150
        ''HyperLinks
        Me.HyperLinks_General.TextAlign = fmTextAlignLeft
        Me.HLText.TextAlign = fmTextAlignLeft
        Me.HLToolTip.TextAlign = fmTextAlignLeft
        Me.Label147.Caption = "HyperLinks"
        Me.Label147.TextAlign = fmTextAlignLeft
        Me.Label33.Caption = "Internal HyperLinks:"
        Me.Label33.Left = 6
        Me.Label33.TextAlign = fmTextAlignLeft
        Me.Label33.Width = 140
        Me.Hlin.Left = 130
        Me.Label34.Caption = "External HyperLinks:"
        Me.Label34.Left = 6
        Me.Label34.TextAlign = fmTextAlignLeft
        Me.Label34.Width = 140
        Me.HlOut.Left = 130
        Me.Label31.Caption = "Total HyperLinks:"
        Me.Label31.Left = 6
        Me.Label31.TextAlign = fmTextAlignLeft
        Me.Label31.Width = 140
        Me.HTotal.Left = 130
        Me.Label32.Caption = "HyperLinks without ToolTip:"
        Me.Label32.Left = 6
        Me.Label32.TextAlign = fmTextAlignLeft
        Me.Label32.Width = 130
        
         Me.Label174.Caption = "HyperLinks with invalid Text"
        Me.Label174.Left = 6
        Me.Label174.TextAlign = fmTextAlignLeft
        Me.Label174.Width = 140
        
        Me.lbHyperlinks.Left = 156
        Me.lbHyperlinks.Width = 120
        Me.HNoDesc.Left = 130
        Me.HLInValidText.Left = 130
        Me.Label148.Caption = "HyperLink Text To Display:"
        Me.Label148.Left = 6
        Me.Label148.TextAlign = fmTextAlignLeft
        Me.Label149.Caption = "HyperLink ToolTip:"
        Me.Label149.Left = 6
        Me.Label149.TextAlign = fmTextAlignLeft
        Me.HLText.Width = 270
        Me.HLToolTip.Width = 270
        ''Manual Lists
        Me.Label151.Caption = "Manual Numbering"
        Me.Label151.TextAlign = fmTextAlignLeft
        Me.ManList_General.TextAlign = fmTextAlignLeft
        Me.ManList.TextAlign = fmTextAlignLeft
        Me.CommandButton10.Caption = "Exit"
        Me.CommandButton11.Caption = "Report Export"
        
        
    Else
    End If
    Me.Top = Application.Top + (Application.UsableHeight / 2)
    Me.Left = Application.Left + (Application.UsableWidth / 2)
   On Error Resume Next
Set gobjRibbon = objRibbon

B1 = False
B2 = False
B3 = False
B4 = False
B5 = False
B6 = False
BX = False
Call Register_Event_Handler2(1)
'Call callingProcedureMSWordObjLibrary(1)
Err.Clear
End Sub
'



Private Sub DisplayGoTo(n As Boolean)
  With frmSuperDoc
    .lblPage1.Visible = n
    .lblPage.Visible = n
    .lblSection1.Visible = n
    .lblSection.Visible = n
    .cmdGoTo.Visible = n
  End With
End Sub
Private Sub cmdGoTo_Click()
System.Cursor = wdCursorWait
Select Case iTabNum
  Case 1 'Fonts
    Selection.HomeKey Unit:=wdStory
    With Selection.Find
      .Forward = True
      .ClearFormatting
      .Font.Name = lbFonts.List(lbFonts.ListIndex)
      .Wrap = wdFindContinue
      .Execute FindText:=""
    End With
  Case 2 'Styles
    Selection.HomeKey Unit:=wdStory
    With Selection.Find
      .Forward = True
      .ClearFormatting
      .Style = lbStyles.List(lbStyles.ListIndex)
      .Wrap = wdFindContinue
      .Execute FindText:=""
    End With
  Case 3 'Sections
    Selection.GoTo What:=wdGoToSection, Which:=wdGoToFirst, Count:=lbSections.ListIndex + 1, Name:=""
  Case 4 'Hyperlinks
    oDoc.Hyperlinks(lbHyperlinks.ListIndex + 1).Follow
  Case 5 'Tables
    oDoc.TableS(lbTables.ListIndex + 1).Select
  Case 6 'Fields
    oDoc.Fields(lbFields.ListIndex + 1).Select
End Select
Selection.Collapse
AdjustReport
Unload Me
End Sub
Private Sub AdjustReport()
If bReportCreated Then
  oRDoc.Activate
  Selection.TypeBackspace
End If
End Sub
Private Sub UpdateTableInfo()
Application.ScreenUpdating = False
lblTableUniform = ""
AllowBreakAcrossPages = ""

On Error Resume Next
  I = lbTables.ListIndex + 1
  With oDoc.TableS(I)
    .Select
    lblTableRows = .rows.Count
    lblTableColumns = .Columns.Count
    If .TableDirection = wdTableDirectionRtl Then
    lblTableAlignment = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    Else
     lblTableAlignment = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End If
    .Select
    If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
    lblTableUniform = "|fffd||fffd|"
    Else
    lblTableUniform = "|fffd||fffd|"
    End If
    TableDesc = .Descr
    If .Descr = "" Then TableDesc = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    
  End With
  With oDoc.TableS(I)
    .Select
   
        If Selection.Bookmarks.Count = 0 Then
            Me.OptionButton4 = True
            If .rows(1).HeadingFormat = True Then
              '   Me.OptionButton2 = True
           
            End If
        Else
            If InStr(1, Selection.Bookmarks(1).Name, "Title_") Then Me.OptionButton1 = True
            If InStr(1, Selection.Bookmarks(1).Name, "ColumnTitle_") Then Me.OptionButton2 = True
            If InStr(1, Selection.Bookmarks(1).Name, "RowTitle_") Then Me.OptionButton3 = True
             
        End If
End With
  With oDoc.TableS(I).rows(1)
  .Select
    If .AllowBreakAcrossPages = True Then
    lblTableAllowBreak = "|fffd||fffd|"
    Else
    lblTableAllowBreak = "|fffd||fffd|"
    End If
    .Select
    If .HeadingFormat = True Then
    lblTableHeading = "|fffd||fffd|"
    Else
    lblTableHeading = "|fffd||fffd|"
    End If
   
  End With
   
Application.ScreenUpdating = True
End Sub
Private Sub lbTables_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  If aNumItems(iTabNum) > 0 Then
    TableNum = lbTables.ListIndex + 1
    lblStatus.Caption = S169 + Str(TableNum) + "..."
    DoEvents
    UpdateTableInfo
    With Selection
      UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
    End With
  End If
  ActiveDocument.TableS(TableNum).Select
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub
Private Function TAFText(n)
  Select Case n
    Case 0: TAFText = S30                       'None
    Case 1 To 3: TAFText = S154 + Str(n - 0)     'Simple
    Case 4 To 7: TAFText = S155 + Str(n - 3)     'Classic
    Case 8 To 10: TAFText = S156 + Str(n - 7)    'Colorful
    Case 11 To 15: TAFText = S157 + Str(n - 10)  'Columns
    Case 16 To 23: TAFText = S158 + Str(n - 15)  'Grid
    Case 24 To 31: TAFText = S159 + Str(n - 23)  'List
    Case 32 To 34: TAFText = S160 + Str(n - 31)  '3D Effects
    Case 35: TAFText = S161
    Case 36: TAFText = S162
    Case 37: TAFText = S163
    Case 38 To 39: TAFText = s160a + Str(n - 37)  'Subtle
    Case Else: TAFText = S164
  End Select
End Function


Private Function TAText(n As Integer)
  Select Case n
    Case 0: TAText = S165
    Case 1: TAText = S147
    Case 2: TAText = S166
    Case Else: TAText = S167
  End Select
End Function



Function ClnStr(Z$, Max)       ' Cleans out lower ascii codes for text display in  the dialog box
  n = InStr(Z$, Chr$(19))     'Check for left field code bracket
  While n <> 0
      Z$ = Left$(Z$, n - 1) + "{" + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(19))
  Wend
  n = InStr(Z$, Chr$(21))     'Check for right field code bracket
  While n <> 0
      Z$ = Left$(Z$, n - 1) + "}" + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(21))
  Wend
  n = InStr(Z$, Chr$(12))     'Check for section breaks
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S4$ + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(12))
  Wend
  n = InStr(Z$, Chr$(1))      'Check for graphics
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S5$ + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(1))
  Wend
  n = InStr(Z$, Chr$(13) + Chr$(7) + Chr$(13) + Chr$(7))      'Check for tables
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S7$ + Right$(Z$, Len(Z$) - n - 3)
      n = InStr(Z$, Chr$(13) + Chr$(7) + Chr$(13) + Chr$(7))
  Wend
  n = InStr(Z$, Chr$(13) + Chr$(7))       'Check for tables
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S8$ + Right$(Z$, Len(Z$) - n - 1)
      n = InStr(Z$, Chr$(13) + Chr$(7))
  Wend
  If Len(Z$) > Max - 3 Then Z$ = Left$(Z$, Max - 3) + "..."
  ClnStr = Z$
End Function


Private Function BoolStr(n)
  Select Case n
    Case -1: BoolStr = S120
    Case 0: BoolStr = S121
    Case Else: BoolStr = S122
  End Select
End Function


Private Function FillText(n, a, b, c)
  Select Case n
    Case 0: FillText = a
    Case 1: FillText = b
    Case Else: FillText = c
  End Select
End Function
Private Sub UpdateGoToInfo(p, s)
  lblPage.Caption = p
  lblSection.Caption = s
  aLastLoc(iTabNum, 0) = p
  aLastLoc(iTabNum, 1) = s
End Sub
Function GetParNum2(r As Range) As Integer
    Dim rParagraphs As Range
    Dim CurPos As Long
     
    r.Select
    CurPos = ActiveDocument.Bookmarks("\startOfSel").start
    Set rParagraphs = ActiveDocument.Range(start:=0, End:=CurPos)
    GetParNum2 = rParagraphs.Paragraphs.Count
End Function

Private Sub UserForm_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
SendKeys "%({ }M)", True 'replicate Alt + Space + M

SendKeys "{DOWN}", True 'replicate any arrow key
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

Unload WeCoCheckerLight
End Sub

Private Sub UserForm_Terminate()
  
Unload WeCoCheckerLight
End Sub

Private Sub ValidAltTextButton_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidAltTextButton.Caption = "+" Then
   Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   If Me.G_STAT_X.Visible = True Then
   Me.ValidAltText.Height = 190
   Else
   Me.ValidAltText.Height = 40
   End If
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "-"
   iMoveIt = Me.ValidAltText.Height - 40
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174 + iMoveIt
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216 + iMoveIt
   Me.ValidManListButton.Caption = "+"
Else
  
  Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
  
End If
Me.lbGraphic.SetFocus
End Sub

Private Sub ValidFontsButton_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidFontsButton.Caption = "+" Then
 '   ''Me.ValidFontsButton.Caption = "-"
    'Me.ValidFonts.Height = 90
    'Me.ValidFonts.Top = 48
    
    ValidGeneralInfo.Height = 40
    ValidGeneralInfoButton.Caption = "+"
    ''Me.ValidFonts.Height = 40
   ' 'Me.ValidFonts.Top = 138
   ' ''Me.ValidFontsButton.Caption = "+"
    
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 140
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 182
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 224
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 266
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 258
   Me.ValidManListButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 258 + 50
   Me.ValidManListButton.Caption = "+"
Else
  
    Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
    
    'Me.ValidFonts.Height = 40
    'Me.ValidFonts.Top = 48
    ''Me.ValidFontsButton.Caption = "+"
    
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 90
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 132
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 174
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 216
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 258
   Me.ValidManListButton.Caption = "+"
 
End If
End Sub

Private Sub ValidGeneralInfoButton_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidGeneralInfoButton.Caption = "+" Then
    Me.ValidGeneralInfoButton.Caption = "-"
    If Me.F_STAT_V.Visible = True Then
    Me.ValidGeneralInfo.Height = 174
    Else
    If Report_Check.VFontTypeCheck = True Or Report_Check.VFontSizeCheck = True Or Report_Check.VFontItalicCheck = True Or Report_Check.VUnderlineCheck = True Or Report_Check.VMinLineSpaceCheck = True Then
    Me.ValidGeneralInfo.Height = 370
    Else
    Me.ValidGeneralInfo.Height = 144
    End If
    End If
    iMoveIt = Me.ValidGeneralInfo.Height - 40
    
    'Me.ValidFonts.Height = 40
    'Me.ValidFonts.Top = 138
    ''Me.ValidFontsButton.Caption = "+"
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48 + iMoveIt
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90 + iMoveIt
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132 + iMoveIt
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174 + iMoveIt
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216 + iMoveIt
   Me.ValidManListButton.Caption = "+"
   
Else
  
    Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
 
End If
End Sub

Private Sub ValidHeadingButton_Click()

Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidHeadingButton.Caption = "+" Then
    Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    
    If Me.H_STAT_X.Visible = True Then
    Me.ValidHeading.Height = 160
    Else
    Me.ValidHeading.Height = 90
    End If
    Me.ValidHeading.Top = 48
    iMoveIt = Me.ValidHeading.Height - 40
    
    Me.ValidHeadingButton.Caption = "-"
   
    Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90 + iMoveIt
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132 + iMoveIt
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174 + iMoveIt
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216 + iMoveIt
   Me.ValidManListButton.Caption = "+"
   
Else
  
   Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
End If

End Sub

Private Sub ValidHyperLinksButton_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer
Dim astory As Range
iMoveIt = 0
'Me.lbHyperlinks.Clear
If ValidHyperLinksButton.Caption = "+" Then
    If ValidHyperLinksButton.Tag <> "V" Then
      System.Cursor = wdCursorWait
      aNumItems(iTabNum) = ActiveDocument.Hyperlinks.Count
    '''
        Application.ScreenUpdating = False
      For Each astory In ActiveDocument.StoryRanges
         If astory.Hyperlinks.Count > 0 Then
         For I = 1 To astory.Hyperlinks.Count
        If Trim(astory.Hyperlinks(I).Address) <> "" And Trim(astory.Hyperlinks(I).SubAddress) = "" Then
            astory.Hyperlinks(I).Range.Select
            With Selection
         If Left(.Paragraphs(1).Format.Style.NameLocal, 3) <> "TOC" Then lbHyperlinks.AddItem astory.Hyperlinks(I).Address
         End With
       End If
       
        
   '   For Each Hyperlink In ActiveDocument.Hyperlinks
   '     lbHyperlinks.AddItem Hyperlink.Address
      Next
      End If
      Next astory
      If aNumItems(iTabNum) > 0 Then
        aTabHasItems(iTabNum) = True
        aAllowGoTo(iTabNum) = True
        aShowReportButton(iTabNum) = True
        cmdReport.Enabled = True
        lblBaseHyperlink.Caption = ActiveDocument.BuiltInDocumentProperties(29).Value
      Else
        lbHyperlinks.AddItem S29
        lblStatus.Caption = ""
      End If
      If aNumItems(iTabNum) = 1 Then
       ' lblHyperlinks.Caption = S174 & strFN & conColon
      Else
       ' lblHyperlinks.Caption = aNumItems(iTabNum) & S175 & strFN & conColon
      End If
      ValidHyperLinksButton.Tag = "V"
    ''
    End If
   Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    
    'Me.ValidFonts.Height = 40
    'Me.ValidFonts.Top = 48
    ''Me.ValidFontsButton.Caption = "+"
    
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   If Me.HL_STAT_X.Visible = True Then
   Me.ValidHyperLinks.Height = 216
   Else
   Me.ValidHyperLinks.Height = 40
   End If
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "-"
   iMoveIt = Me.ValidHyperLinks.Height - 40
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216 + iMoveIt
   Me.ValidManListButton.Caption = "+"
Else
  
  Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
 
End If
Application.ScreenUpdating = True
End Sub

Private Sub ValidManListButton_Click()
Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidManListButton.Caption = "+" Then
  Me.ValidManListButton.Caption = "-"
  
  Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   If Me.ML_STAT_V.Visible = True Then
  Me.ValidManList.Height = 40
   Else
   Me.ValidManList.Height = 170
   End If
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "-"
   
 
   
Else
  
  Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
 
End If

End Sub





Private Sub ValidTableButton_Click()

Dim ufCtrl As control
Dim iMoveIt As Integer
iMoveIt = 0
If ValidTableButton.Caption = "+" Then
   If ValidTableButton.Tag <> "V" Then
      System.Cursor = wdCursorWait
      aNumItems(iTabNum) = ActiveDocument.TableS.Count
      If aNumItems(iTabNum) > 0 Then
        For I = 1 To aNumItems(iTabNum)
          lbTables.AddItem Str(I)
        Next I
        aTabHasItems(iTabNum) = True
        aShowReportButton(iTabNum) = True
        cmdReport.Enabled = True
        aAllowGoTo(iTabNum) = True
        lbTables.ListIndex = 0 'simulate click on first table
      Else
        lbTables.AddItem S30
        lblStatus.Caption = ""
      End If
      ValidTableButton.Tag = "V"
    
   End If
   Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    
    'Me.ValidFonts.Height = 40
    'Me.ValidFonts.Top = 48
    ''Me.ValidFontsButton.Caption = "+"
    
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   If Me.T_STAT_V.Visible = False Then
   Me.ValidTables.Height = 120
   Else
   Me.ValidTables.Height = 40
   End If
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "-"
   iMoveIt = Me.ValidTables.Height - 40
   
  Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132 + iMoveIt
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174 + iMoveIt
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216 + iMoveIt
   Me.ValidManListButton.Caption = "+"
Else
  
   Me.ValidGeneralInfoButton.Caption = "+"
    Me.ValidGeneralInfo.Height = 40
    Me.ValidGeneralInfo.Top = 6
          
    Me.ValidHeading.Height = 40
    Me.ValidHeading.Top = 48
    Me.ValidHeadingButton.Caption = "+"
   
   Me.ValidTables.Height = 40
   Me.ValidTables.Top = 90
   Me.ValidTableButton.Caption = "+"
   
   Me.ValidAltText.Height = 40
   Me.ValidAltText.Top = 132
   Me.ValidAltTextButton.Caption = "+"
   
   Me.ValidHyperLinks.Height = 40
   Me.ValidHyperLinks.Top = 174
   Me.ValidHyperLinksButton.Caption = "+"
   
   Me.ValidManList.Height = 40
   Me.ValidManList.Top = 216
   Me.ValidManListButton.Caption = "+"
 
End If

End Sub


Public Function SortCollection(ByVal oCol As Collection) As Collection
Dim arrIndex() As Long
Dim lngCount As Long
Dim I As Long
Dim m As Long
Dim oColSorted As New Collection

lngCount = oCol.Count
If lngCount = 0 Then
  Set SortCollection = New Collection
  Exit Function
End If
'Allocate an index array.
ReDim arrIndex(0 To lngCount - 1) As Long
'Fill the index array.
For I = 0 To lngCount - 1
 arrIndex(I) = I + 1
Next I
'Generate an ordered heap.
For I = lngCount \ 2 - 1 To 0 Step -1
  Heapify oCol, arrIndex, I, lngCount
Next I
'Sort the index array
For m = lngCount To 2 Step -1
  Exchange arrIndex, 0, m - 1
  Heapify oCol, arrIndex, 0, m - 1
Next
For I = 0 To lngCount - 1
  oColSorted.Add oCol.Item(arrIndex(I))
Next  ' fill output collection
Set SortCollection = oColSorted
End Function
Private Sub Heapify(oCol As Collection, arrIndexPasssed() As Long, lngIndex As Long, lngCount As Long)
Dim lngMidCount As Long
Dim I As Long
lngMidCount = lngCount \ 2
Do While lngIndex < lngMidCount
  I = 2 * lngIndex + 1
  If I + 1 < lngCount Then
    If oCol.Item(arrIndexPasssed(I)) < oCol.Item(arrIndexPasssed(I + 1)) Then
      I = I + 1
    End If
  End If
  If oCol.Item(arrIndexPasssed(lngIndex)) >= oCol.Item(arrIndexPasssed(I)) Then
    Exit Do
  End If
  Exchange arrIndexPasssed, lngIndex, I
  lngIndex = I
Loop
End Sub
Private Sub Exchange(Index() As Long, I As Long, j As Long)
Dim Temp As Long
  Temp = Index(I)
  Index(I) = Index(j)
  Index(j) = Temp
End Sub



Private Sub AddToCollection(cl As Collection, ItmStr As String)
Dim k As Long
  For k = 1 To cl.Count
    If cl(k) = ItmStr Then Exit Sub
    If ItmStr < cl(k) Then
      cl.Add Item:=ItmStr, Before:=k
      Exit Sub
    End If
  Next k
  cl.Add Item:=ItmStr
End Sub

Sub HighlightFonts(n As Long)
Dim fontColor As Long
Dim lngChar As Long
Dim lngCharCount As Long
Dim fnt As String
Dim FontName As String
Dim fldType As Long
Dim fSize As Single
Dim rngStory As Word.Range
Dim rngChar As Range
Dim oShp As Word.Shape
Dim j As Long
Dim k As Long
Dim rng As Range
Application.ScreenUpdating = False
  fontColor = wdTurquoise
 
  With WeCoCheckerLight.FontsListbox
    j = .ListIndex
    If j = -1 Then
    Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
       MASSAGE_BOX.TextBox1.Caption = "Font was not selected"
      Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
      'MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      Exit Sub
    End If
    fnt = .List(j)
    
    'If InStr(fnt, "Field type") > 0 Then
    
    'End If
    'fnt = Trim(.List(j))
    'j = Len(fnt)
    'k = j - 1
    'Do While Mid(fnt, k, 1) <> " " And k > 1
    '  k = k - 1
    'Loop
    'fSize = Val(Mid(fnt, k + 1))
    'fnt = Trim(Left(fnt, k - 1))
  End With

  For Each rngStory In ActiveDocument.StoryRanges
    lngChar = 0
    lngCharCount = rngStory.Characters.Count
    Do
      For Each rngChar In rngStory.Characters
        lngChar = lngChar + 1
        fSize = rngChar.Font.Size
         FontName = rngChar.Font.Name '& Str(fSize)
         If fSize = 9999999 Or rngChar.Font.Name = "" Then
           If rngChar.Fields.Count > 0 Then
             fldType = rngChar.Fields(1).Type
             FontName = FontName & " Field type" & Str(fldType)
           End If
         End If
    '     FontName = rngChar.Font.Name & " " & Str(rngChar.Font.Size)
        If lngChar Mod 1000 = 1 Then
        '    WeCoCheckerLight.ProgressLabel.Caption = "Character " & lngChar & _
          '   " of " & lngCharCount & " characters in the story range"
             DoEvents
        End If
        
        If FontName = fnt Then
      '  If rngChar.Font.Name = fnt And rngChar.Font.Size = fSize Then
          rngChar.HighlightColorIndex = fontColor
        End If
      Next rngChar
     
      Select Case rngStory.StoryType
        Case 6, 7, 8, 9, 10, 11
          'No shape will throw an error that we handle and skip
          On Error GoTo Err_Handler
          If rngStory.ShapeRange.Count > 0 Then
            For Each oShp In rngStory.ShapeRange
              If oShp.TextFrame.HasText Then
                lngChar = 0
                lngCharCount = oShp.TextFrame.TextRange.Characters.Count
                For Each rngChar In oShp.TextFrame.TextRange.Characters
                  lngChar = lngChar + 1
                  fSize = rngChar.Font.Size
                  FontName = rngChar.Font.Name & Str(fSize)
                  If fSize = 9999999 Or rngChar.Font.Name = "" Then
                    If rngChar.Fields.Count > 0 Then
                      fldType = rngChar.Fields(1).Type
                      FontName = FontName & " Field type" & Str(fldType)
                    End If
                  End If
                  If FontName = fnt Then
                  'If rngChar.Font.Name = fnt And rngChar.Font.Size = fSize Then
                    rngChar.HighlightColorIndex = fontColor
                  End If
                Next rngChar
              End If
            Next oShp
          End If
      End Select
SkipRange:
      On Error GoTo 0
      'Get next linked story (if any)
      Set rngStory = rngStory.NextStoryRange
    Loop Until rngStory Is Nothing
  Next rngStory
 ' WeCoCheckerLight.ProgressLabel.Caption = "Text with selected font highlighted"
  Exit Sub
Err_Handler:
  Resume SkipRange
  
  Application.ScreenUpdating = True
End Sub

Sub UnHighlightAll(n As Long)
Application.ScreenUpdating = False
Dim rngStory As Range
Dim aShape As Shape
Dim arange As Range
Dim txtFrame As TextFrame
  For Each rngStory In ActiveDocument.StoryRanges
    rngStory.HighlightColorIndex = wdAuto
    Select Case rngStory.StoryType
      Case 6, 7, 8, 9, 10, 11
        For Each aShape In rngStory.ShapeRange
          Set txtFrame = aShape.TextFrame
          If Not txtFrame Is Nothing Then
            If txtFrame.HasText Then
              Set arange = txtFrame.TextRange
              If arange.HighlightColorIndex = wdTurquoise Then arange.HighlightColorIndex = wdAuto
            End If
          End If
        Next aShape
    End Select
  Next rngStory
  Application.ScreenUpdating = True
End Sub

Sub CountHeading_(n As Long)
    On Error Resume Next
    Application.ScreenUpdating = False
  
    Dim Headingstr As String
    Dim manStr As String
    Dim I, k, iRow, iCol As Integer
    Dim colHeading As New Collection
     Dim colMan As New Collection
    Dim LastH, CurrentH
   Dim rng As Range
    Dim para As Paragraph
    Dim O1, O2, O3, O4, O5, O6, O7, O8, OEmpty As Integer
    O1 = 0: O2 = 0: O3 = 0: O4 = 0: O5 = 0: O6 = 0: O7 = 0: O8 = 0: OEmpty = 0
  
    LastH = 0: CurrentH = 0
    With WeCoCheckerLight
    .HeadingS.Clear
    .ManList.Clear
    End With
     Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Headings Evaluating..."
     Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05)
    DoEvents
    With ActiveDocument
     For k = 1 To ActiveDocument.Paragraphs.Count
       Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.1 + 0.9 * (k / ActiveDocument.Paragraphs.Count))
            
             DoEvents
                Set para = .Paragraphs(k)
  
      '  For Each para In ActiveDocument.Paragraphs 'j = 1 To ActiveDocument.Tables.Count
            'Application.ScreenUpdating = True
            If para.OutlineLevel <> wdOutlineLevelBodyText And para.Range.Information(wdWithInTable) <> True Then
               ' para.Range.Select
           '     n = GetAbsoluteLineNum(Selection.Range)
            With para.Range
                Select Case para.OutlineLevel
                    Case wdOutlineLevel1
                        O1 = O1 + 1
                        CurrentH = 1
                    Case wdOutlineLevel2
                        O2 = O2 + 1
                         CurrentH = 2
                    Case wdOutlineLevel3
                        O3 = O3 + 1
                         CurrentH = 3
                    Case wdOutlineLevel4
                        O4 = O4 + 1
                         CurrentH = 4
                    Case wdOutlineLevel5
                        O5 = O5 + 1
                         CurrentH = 5
                    Case wdOutlineLevel6
                        O6 = O6 + 1
                         CurrentH = 6
                    Case wdOutlineLevel7
                        O7 = O7 + 1
                         CurrentH = 7
                    Case wdOutlineLevel8
                        O8 = O8 + 1
                         CurrentH = 8
                End Select
            End With
              If para.Range.Characters.Count = 1 Then
                OEmpty = OEmpty + 1
             
            Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  " & para.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & k & ")"
              Call AddToCollection(colHeading, Headingstr)
            End If
            End If
            If CurrentH > LastH + 1 Then
              Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| , |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & para.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & k & ")"
              Call AddToCollection(colHeading, Headingstr)
            End If
           
            LastH = CurrentH
           
          '''
          Set rng = para.Range.Words.First
            If para.Range.Information(wdWithInTable) Or para.Range.ListParagraphs.Count = 1 Then GoTo NXTk
          '  With rng
      
        
          '      If (Mid(para.Range.Text, 2, 1) = "." Or Mid(para.Range.Text, 3, 1) = "." Or InStr(1, .Text, Chr(45)) Or InStr(1, .Text, Chr(46)) <> 0 Or InStr(1, .Text, Chr(42)) Or InStr(1, .Text, Chr(40)) Or InStr(1, .Text, Chr(41)) Or InStr(1, .Text, ".")) And IsNumberedPara(para.Range) = False Then
          '      manStr = Mid(para.Range.Text, 1, 50) & " (@" & k & ")"
          '      Call AddToCollection(colMan, manStr)
          '      End If
          '  End With
          '''
NXTk:
           
        Next k 'para
       
       WeCoCheckerLight.O1.Caption = O1: WeCoCheckerLight.O2.Caption = O2: WeCoCheckerLight.O3.Caption = O3: WeCoCheckerLight.O4.Caption = O4: WeCoCheckerLight.O5.Caption = O5: WeCoCheckerLight.O6.Caption = O6: WeCoCheckerLight.O7.Caption = O7: WeCoCheckerLight.O8.Caption = O8
         WeCoCheckerLight.OTotal.Caption = O1 + O2 + O3 + O4 + O5 + O6 + O7 + O8


      For k = 1 To colHeading.Count
      WeCoCheckerLight.HeadingS.AddItem colHeading(k)
    Next k
    For k = 1 To colMan.Count
      WeCoCheckerLight.ManList.AddItem colMan(k)
    Next k
     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption = 0 Then WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"

     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty = 0 Then WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty <> 0 Then WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & OEmpty & " " & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
     If colMan.Count = 0 Then WeCoCheckerLight.ManList.AddItem " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    End With
   
    
  Unload Pro_Bar
 
    
      
    Application.ScreenUpdating = True
   
End Sub


Sub TableSum2(n As Long)
    On Error Resume Next
    
    '
    Dim colTable As New Collection
    Dim I, j, k As Integer
    Dim Tbl, oTable As Word.Table
    Dim Tbldes, TblMerge, TblHead As Integer
    Dim Tablestr, Tdesc, THead, TMerge, Tpage As String
    Application.ScreenUpdating = False
    With WeCoCheckerLight
    .TableS.Clear
    .TableS_General.Clear
    End With
    Tbldes = 0
    TblHead = 0
    TblMerge = 0
   

    ActiveDocument.Activate
    
  
    j = 0
     Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Tables Evaluating..."
        Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05)
    DoEvents
    With ActiveDocument
  
        For Each Tbl In ActiveDocument.TableS 'j = 1 To ActiveDocument.Tables.Count
            Pro_Bar.Label1.Caption = 10 & "% Completed"
              Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05 + 0.95 * (j / ActiveDocument.TableS.Count))
         
            'Application.ScreenUpdating = True
            Tdesc = ""
            THead = ""
            TMerge = ""
            Tbl.Select
            Tpage = Tbl.Range.Information(wdActiveEndAdjustedPageNumber)
           If Trim(Tbl.Descr) = "" And DocMetaData.DocFormat.Value = "Word" Then
            Tdesc = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "
            Tbldes = Tbldes + 1
            End If
          Tbl.Select
          With Selection
                If Selection.Bookmarks.Count = 0 Then
                    If .rows(1).HeadingFormat <> True Then
                    THead = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
                     TblHead = TblHead + 1
                     End If
                End If
            End With
          
           With Selection
                'On Error GoTo mergeerror

                If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                    TMerge = " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                    TblMerge = TblMerge + 1
                End If
            
mergeerror:
            End With
           ' If Err.Number <> 0 Then
           '     Err.Clear
                
               'If Docaddonproperties.tableMergeCheck = True Then m = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|") 'MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd|")
                ' If m = 6 Then Call TableManipulation(k)
                
           ' End If
           
       '    If Tbl.Rows.Count * Tbl.Columns.Count <> Tbl.Cells.Count Then TMerge = " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
           j = j + 1
           If Trim(Tdesc & THead & TMerge) <> "" Then
          ' Tablestr = "|fffd||fffd||fffd||fffd||fffd| " & j & "|fffd||fffd||fffd||fffd||fffd||fffd| " & Tpage & ":" & Tdesc & THead & TMerge
             Call AddToCollection(colTable, "|fffd||fffd||fffd||fffd||fffd| " & j & ", |fffd||fffd||fffd||fffd||fffd||fffd| " & Tpage & ":" & Tdesc & THead & TMerge)
             
           End If
           
            
        Next Tbl
    
      For k = 1 To colTable.Count
      WeCoCheckerLight.TableS.AddItem colTable(k)
      Next k
     If j = 0 Then
     WeCoCheckerLight.TableS.AddItem " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
      WeCoCheckerLight.TableS_General.AddItem " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
     Else
      
     If colTable.Count = 0 Then WeCoCheckerLight.TableS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
    If colTable.Count = 0 Then
        WeCoCheckerLight.TableS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
        
       
        WeCoCheckerLight.T_STAT_V.Visible = True
      
    End If
    If colTable.Count <> 0 Then
        WeCoCheckerLight.TableS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
       ' WeCoCheckerLight.TableS_General.Font.Bold = True
         WeCoCheckerLight.T_STAT_X.Visible = True
    End If
    End If
    End With
     With WeCoCheckerLight
     .STTotal.Caption = j
   
   If DocMetaData.DocFormat.Value = "Word" Then
    .STDescr.Caption = Tbldes
    Else
        .STDescr.Visible = False
    End If
    .STHead.Caption = TblHead
    .STMerge.Caption = TblMerge
    End With
    Unload Pro_Bar
  '  Application.ScreenUpdating = True
    
End Sub
Sub CountGraphics(n As Long)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Const sBkMk = "ReturnHere"
    Dim colGraphic As New Collection
   
    Dim lngSections As Long
    Dim lngSectionCounter As Long
    Dim lngMainDocInlineShapes As Long
    Dim lngMainDocShapes As Long
    Dim lngHdrInlineShapes As Long
    Dim lngHdrShapeRange As Long
    Dim lngFtrInlineShapes As Long
    Dim lngFtrShapeRange As Long
    Dim lngTotalInlineShapes As Long
    Dim lngTotalShapes As Long
    Dim sMsgText As String
    Dim k As Integer

    Application.ScreenUpdating = False
   
    'Get the number of sections in the document.
    lngSections = ActiveDocument.Sections.Count

    'Get the number of inline objects and
    'shape objects in the main document
    lngMainDocInlineShapes = ActiveDocument.InlineShapes.Count
    lngMainDocShapes = ActiveDocument.Shapes.Count

    'Insert a bookmark to return to this place in the document.
    ActiveDocument.Bookmarks.Add sBkMk, Selection.Range

    'Go to the first page of the document.
    Selection.HomeKey wdStory, wdMove

    'Cycle through all of the sections in the document
    'looking in headers and footers for graphics
    For lngSectionCounter = 1 To lngSections
        'Go to the header of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageHeader
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngHdrInlineShapes = lngHdrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngHdrShapeRange = lngHdrShapeRange _
            + Selection.Range.ShapeRange.Count

        'Go to the footer of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageFooter
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngFtrInlineShapes = lngFtrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngFtrShapeRange = lngFtrShapeRange _
            + Selection.Range.ShapeRange.Count

        Selection.GoTo wdGoToSection, wdGoToNext
    Next

    'Go to the main body of the document.
    ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument

    'Enable automatic screen updates
    Application.ScreenUpdating = True
    Application.ScreenRefresh

    'Go to the bookmark that was inserted earlier.
    If ActiveDocument.Bookmarks.Exists(sBkMk) Then
        Selection.GoTo wdGoToBookmark, , , sBkMk
        ActiveDocument.Bookmarks(sBkMk).Delete
    Else
        MsgBox "The bookmark '" & sBkMk & "' does not exist."
    End If

    'Calculate the total number of inlineshape objects
    'and (shape and shaperange) objects
    lngTotalInlineShapes = lngMainDocInlineShapes _
        + lngHdrInlineShapes + lngFtrInlineShapes
    lngTotalShapes = lngMainDocShapes _
        + lngHdrShapeRange + lngFtrShapeRange

    'Include the values from the variables into the
    'text of the message
   Dim strShapeName As String
    Dim astory As Range
    Dim ishape As InlineShape
    Dim iCount, hltotal, hlNoDesc, HlOut, Hlin As Integer
    Dim hl  As Hyperlink
    Dim shp As Shape
    On Error Resume Next
    '
    hltotal = 0
    iCount = 0
    hlNoDesc = 0
    HlOut = 0
    Hlin = 0
    
    For Each astory In ActiveDocument.StoryRanges
      '  if astory.StoryType <> wdCommentsStory and astory.StoryType <>
        If astory.InlineShapes.Count >= 1 Then
            k = 0
            For Each ishape In astory.InlineShapes
                k = k + 1
                 If Trim(ishape.AlternativeText) = "" Then 'And ishape.Decorative = msoFalse Then
                 iCount = iCount + 1
                Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".InlineShapes( " & k & ")")
                End If
               
            Next
        End If
    
        If astory.ShapeRange.Count >= 1 Then
             k = 0
            For Each shp In astory.ShapeRange
                strShapeName = ""
                strShapeName = shp.Name
                k = k + 1
                If InStr(strShapeName, "WordPictureWatermark") = 0 Then
                If Trim(shp.AlternativeText) = "" Then 'And shp.Decorative = msoFalse Then
                iCount = iCount + 1
                 
                
                 Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".ShapeRange( " & shp.Name & ")")
                 
                
                End If
                  End If
            Next
        End If
        If astory.Hyperlinks.Count >= 1 Then
            For Each hl In astory.Hyperlinks
                hltotal = hltotal + 1
                If Trim(hl.ScreenTip) = "" And hl.Address <> "" Then hlNoDesc = hlNoDesc + 1
                If hl.Address <> "" Then HlOut = HlOut + 1
                If hl.Address = "" And hl.SubAddress <> "" Then Hlin = Hlin + 1
            Next
        End If
    Next


    'Display the results of the procedure.
    
    With WeCoCheckerLight
        .Hlin = Hlin
        .HlOut = HlOut
        .HTotal.Caption = hltotal
        .HNoDesc.Caption = hlNoDesc
        .SBodyS.Caption = lngMainDocInlineShapes + lngMainDocShapes
        .SHeaderS.Caption = lngHdrInlineShapes + lngHdrShapeRange
        .SFooters.Caption = lngFtrInlineShapes + lngFtrShapeRange
        .STotals.Caption = lngTotalInlineShapes + lngTotalShapes
        .SNoDescT.Caption = iCount
        If .HNoDesc.Caption <> 0 And hltotal > 0 Then
            .HyperLinks_General.AddItem "|fffd||fffd||fffd||fffd||fffd| " & .HNoDesc.Caption & " " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
            .HL_STAT_X.Visible = True
        Else
            If hltotal > 0 Then
                .HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                .HL_STAT_V.Visible = True
            Else
                .HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            
            End If
            .HL_STAT_V.Visible = True
        
        End If
        If iCount <> 0 And .STotals.Caption > 0 Then
            .AltText_General.AddItem "|fffd||fffd||fffd||fffd||fffd| " & iCount & " " & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .G_STAT_X.Visible = True
        Else
            If .STotals.Caption > 0 Then
                .AltText_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            Else
                .AltText_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
            .G_STAT_V.Visible = True
           
        End If
    
    End With
   
    For k = 1 To colGraphic.Count
      WeCoCheckerLight.lbGraphic.AddItem colGraphic(k)
      WeCoCheckerLight.lbGraphiccount.AddItem k
      Next k
End Sub
Function GetParNum(r As Range) As Integer
    Dim rParagraphs As Range
    Dim CurPos As Long
     
    r.Select
    CurPos = ActiveDocument.Bookmarks("\startOfSel").start
    Set rParagraphs = ActiveDocument.Range(start:=0, End:=CurPos)
    GetParNum = rParagraphs.Paragraphs.Count
End Function
 Function GetAbsoluteLineNum(r As Range) As Integer
    Dim I1 As Integer, I2 As Integer, Count As Integer, rTemp As Range
     
    r.Select
    Do
        I1 = Selection.Information(wdFirstCharacterLineNumber)
        Selection.GoTo What:=wdGoToLine, Which:=wdGoToPrevious, Count:=1, Name:=""
         
        Count = Count + 1
        I2 = Selection.Information(wdFirstCharacterLineNumber)
    Loop Until I1 = I2
     
    r.Select
    GetAbsoluteLineNum = Count
End Function
Public Sub docManLsit(n As Long)
 
    
    ''''''''
    
    On Error Resume Next
    Application.ScreenUpdating = False
    On Error Resume Next
    Application.ScreenUpdating = False
   
    Dim Headingstr As String
    Dim k, iRow, iCol As Integer
    Dim colHeading As New Collection
    
  '  Dim para As Paragraph
    Dim rng As Range
  
    Dim SS(9) As String

    SS(0) = "^13?[" & Chr(46) & "]"
    SS(1) = "^13??[" & Chr(46) & "]"
    SS(2) = "^13???[" & Chr(46) & "]"
    SS(3) = "^13[" & Chr(45) & "]"
    SS(4) = "^13[" & Chr(42) & "]"
    SS(5) = "^13[" & Chr(42) & "]" & "[" & Chr(42) & "]"
    SS(6) = "^13[" & Chr(42) & "]" & "[" & Chr(42) & "]" & "[" & Chr(42) & "]"
    SS(7) = "^13[" & Chr(40) & "]"
    SS(8) = "^13[" & Chr(41) & "]"

    Dim oRng As Object
    Dim bStarted As Boolean
    Dim I, II, pn As Integer
    Dim para As Range

    On Error Resume Next


    With WeCoCheckerLight
        .ManList.Clear
    End With
     Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Manual list & Numbering Evaluating..."
      Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05)
    DoEvents
    II = UBound(SS, 1) ' - LBound(SS, 1) + 1
    For I = 0 To II 'UBound(SS, 1) - LBound(SS, 1) + 1
          Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05 + 0.95 * (I / II))
        For Each oRng In ActiveDocument.StoryRanges
            With oRng.Find
                .MatchWildcards = True
                Do While .Execute(FindText:=SS(I))
                    oRng.Select
                    pn = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
                    ActiveDocument.Paragraphs(pn).Range.Select
                    Set para = Selection.Range
                    para.Select
                    If Not para.Information(wdWithInTable) Then  'And para.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
                    Headingstr = Mid(ActiveDocument.Paragraphs(pn).Range.Text, 1, 50) & " (@" & pn & ")"
                    Call AddToCollection(colHeading, Headingstr)
                    End If
                    ' MsgBox pn
                    ' oRng.Collapse 0
               
                Loop
            End With
            If oRng.StoryType <> wdMainTextStory Then
                While Not (oRng.NextStoryRange Is Nothing)
                    Set oRng = oRng.NextStoryRange
                    With oRng.Find
                        .MatchWildcards = True
                        Do While .Execute(FindText:=SS(I))
                            oRng.Select
                              pn = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
                    ActiveDocument.Paragraphs(pn).Range.Select
                    Set para = Selection.Range
                    para.Select
                            If Not para.Information(wdWithInTable) Then 'And para.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
                    Headingstr = Mid(ActiveDocument.Paragraphs(pn).Range.Text, 1, 50) & " (@" & pn & ")"
                    Call AddToCollection(colHeading, Headingstr)
                    End If
                            ' MsgBox pn
              
                            ' oRng.Collapse 0
               
                        Loop
                    End With
                Wend
            End If
        Next oRng
    Next I
    For k = 1 To colHeading.Count
        WeCoCheckerLight.ManList.AddItem colHeading(k)
    Next k
    If colHeading.Count = 0 Then
        WeCoCheckerLight.ManList_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        WeCoCheckerLight.ML_STAT_V.Visible = True
    Else
     WeCoCheckerLight.ManList_General.AddItem " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        WeCoCheckerLight.ML_STAT_I.Visible = True
    End If
    Set oRng = Nothing
   ' Set SS = Nothing
    Unload Pro_Bar
    Application.ScreenUpdating = True
End Sub
Public Sub docManLsit_old(n As Long)
 
    
    ''''''''
    
      On Error Resume Next
    Application.ScreenUpdating = False
   
    Dim Headingstr As String
    Dim I, k, iRow, iCol As Integer
    Dim colHeading As New Collection
    Dim LastH, CurrentH
   
    Dim para As Paragraph
    Dim rng As Range
  
  
    With WeCoCheckerLight
    .ManList.Clear
    End With
     Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Manual list & Numbering Evaluating..."
     Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05)
    DoEvents
    With ActiveDocument
     For k = 1 To ActiveDocument.Paragraphs.Count
              Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05 + 0.95 * (k / ActiveDocument.Paragraphs.Count))
             'DoEvents
                Set para = .Paragraphs(k)
  
             
            Set rng = para.Range.Words.First
            If para.Range.Information(wdWithInTable) Or para.Range.ListParagraphs.Count = 1 Then GoTo NXTk
            With rng
      
        
                If (Mid(para.Range.Text, 2, 1) = "." Or Mid(para.Range.Text, 3, 1) = "." Or InStr(1, .Text, Chr(45)) Or InStr(1, .Text, Chr(46)) <> 0 Or InStr(1, .Text, Chr(42)) Or InStr(1, .Text, Chr(40)) Or InStr(1, .Text, Chr(41)) Or InStr(1, .Text, ".")) And IsNumberedPara(para.Range) = False Then
                Headingstr = Mid(para.Range.Text, 1, 50) & " (@" & k & ")"
                Call AddToCollection(colHeading, Headingstr)
                End If
            End With
NXTk:
    

        Next k
     ''

    

      For k = 1 To colHeading.Count
      WeCoCheckerLight.ManList.AddItem colHeading(k)
      Next k
  
    End With
   
    
  Unload Pro_Bar
 
    
      
    Application.ScreenUpdating = True
End Sub

Sub CountHeading(n As Long)

 On Error Resume Next
  Unload Pro_Bar
  Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Headings Evaluating..."
     Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05)
   ' DoEvent
    Application.ScreenUpdating = False
  
    Dim Headingstr As String
    Dim manStr As String
    Dim JJ, I, k, iRow, iCol, pp As Integer
    Dim colHeading As New Collection
     Dim colMan As New Collection
    Dim LastH, CurrentH
   Dim rng As Range
    Dim para As Paragraph
    Dim O1, O2, O3, O4, O5, O6, O7, O8, OEmpty As Integer
    O1 = 0: O2 = 0: O3 = 0: O4 = 0: O5 = 0: O6 = 0: O7 = 0: O8 = 0: OEmpty = 0
  
    LastH = 0: CurrentH = 0
    With WeCoCheckerLight
    .HeadingS.Clear
    .ManList.Clear
    .HeadingS_General.Clear
    End With
Dim objShape As Shape

Dim hh As Hyperlink
Set objShape = ActiveDocument.Shapes.AddTextbox _
(Orientation:=msoTextOrientationHorizontal, _
Left:=100, Top:=100, Width:=65, Height:=65)
With objShape
.RelativeHorizontalPosition = wdRelativeHorizontalPositionColumn
.RelativeVerticalPosition = wdRelativeVerticalPositionMargin
.Left = wdShapeCenter
.Top = wdShapeTop
.Name = "TEMPTOC"
' the variable "strAddressData" needs to be populated
' before you get here
'.TextFrame.TextRange = strAddressData
'.TextFrame.TextRange.ParagraphFormat.Alignment = wdAlignParagraphCenter
End With
ActiveDocument.Shapes.Range(Array("TEMPTOC")).Select
ActiveDocument.TablesOfContents.Add Range:=Selection.Range, _
        RightAlignPageNumbers:=True, _
        UseHeadingStyles:=False, _
        UpperHeadingLevel:=1, _
        LowerHeadingLevel:=9, _
        IncludePageNumbers:=True, _
        AddedStyles:="", _
        UseHyperlinks:=True, _
        HidePageNumbersInWeb:=True, _
        UseOutlineLevels:=True
JJ = 0
Dim tocItems As Variant
        WeCoCheckerLight.O1.Caption = 0
       JJ = JJ + 1
       pp = 0
      ' Application.ScreenUpdating = False
       For Each hh In ActiveDocument.Shapes.Range(Array("TEMPTOC")).TextFrame.TextRange.Hyperlinks
       pp = pp + 1
         Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.05 + 0.95 * (pp / ActiveDocument.Shapes.Range(Array("TEMPTOC")).TextFrame.TextRange.Hyperlinks.Count))
      
       DoEvents
        Application.ScreenUpdating = False
        hh.Follow
        k = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        CurrentH = Selection.ParagraphFormat.OutlineLevel
        Select Case CurrentH
                    Case wdOutlineLevel1
                        O1 = O1 + 1
                        CurrentH = 1
                    Case wdOutlineLevel2
                        O2 = O2 + 1
                         CurrentH = 2
                    Case wdOutlineLevel3
                        O3 = O3 + 1
                         CurrentH = 3
                    Case wdOutlineLevel4
                        O4 = O4 + 1
                         CurrentH = 4
                    Case wdOutlineLevel5
                        O5 = O5 + 1
                         CurrentH = 5
                    Case wdOutlineLevel6
                        O6 = O6 + 1
                         CurrentH = 6
                    Case wdOutlineLevel7
                        O7 = O7 + 1
                         CurrentH = 7
                    Case wdOutlineLevel8
                        O8 = O8 + 1
                         CurrentH = 8
                End Select
         If Selection.Range.Characters.Count = 1 Then
                             OEmpty = OEmpty + 1
            Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & k & ")"
              Call AddToCollection(colHeading, Headingstr)
        End If
        
       ' msg = msg & Selection.Range.Text & "  " & Selection.ParagraphFormat.OutlineLevel & " (" & k & ")" & vbNewLine
     '   msg = msg & ActiveDocument.Shapes.Range(Array("TEMPTOC")).TextFrame.TextRange.Paragraphs(i).Range.Text '& vbNewLine
         If CurrentH > LastH + 1 Then
              Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| , |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & k & ")"
              Call AddToCollection(colHeading, Headingstr)
            End If
     LastH = CurrentH
     Next
         
       For k = 1 To colHeading.Count
      WeCoCheckerLight.HeadingS.AddItem colHeading(k)
    Next k
    WeCoCheckerLight.O1.Caption = O1: WeCoCheckerLight.O2.Caption = O2: WeCoCheckerLight.O3.Caption = O3: WeCoCheckerLight.O4.Caption = O4: WeCoCheckerLight.O5.Caption = O5: WeCoCheckerLight.O6.Caption = O6: WeCoCheckerLight.O7.Caption = O7: WeCoCheckerLight.O8.Caption = O8
         WeCoCheckerLight.OTotal.Caption = O1 + O2 + O3 + O4 + O5 + O6 + O7 + O8
     If colHeading.Count > 0 Then
     WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
     WeCoCheckerLight.H_STAT_X.Visible = True
     End If
     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption = 0 Then
        WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        WeCoCheckerLight.H_STAT_I.Visible = True
    End If
     
      If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty = 0 Then
        WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
         WeCoCheckerLight.H_STAT_V.Visible = True
    End If
     
     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty <> 0 Then WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & OEmpty & " " & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
     If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty <> 0 Then WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & OEmpty & " " & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
   
     
     
    ActiveDocument.Shapes.Range(Array("TEMPTOC")).Delete
    Unload Pro_Bar
    
  'UserForm1.TextBox1.Value = msg
  Application.ScreenUpdating = True
  '  UserForm1.Show
    
End Sub


Public Function getstorytype(a As Integer) As String
Select Case a
    Case "1"
        getstorytype = "wdMainTextStory"
    Case "2"
         getstorytype = "wdFootnotesStory"
    Case "3"
         getstorytype = "wdEndnotesStory"
    Case "4"
        getstorytype = "wdCommentsStory"
    Case "5"
         getstorytype = "wdTextFrameStory"
    Case "6"
        getstorytype = "wdEvenPagesHeaderStory"
    Case "7"
         getstorytype = "wdPrimaryHeaderStory"
    Case "8"
         getstorytype = "wdEvenPagesFooterStory"
    Case "9"
         getstorytype = "wdPrimaryFooterStory"
    Case "10"
        getstorytype = "wdFirstPageHeaderStory"
    Case "11"
         getstorytype = "wdFirstPageFooterStory"
     Case "12"
         getstorytype = "wdFootnoteSeparatorStory"
     Case "13"
         getstorytype = "wdFootnoteContinuationSeparatorStory"
     Case "14"
         getstorytype = "wdFootnoteContinuationNoticeStory"
     Case "15"
         getstorytype = "wdEndnoteSeparatorStory"
     Case "16"
         getstorytype = "wdEndnoteContinuationSeparatorStory"
    Case "17"
         getstorytype = "wdEndnoteContinuationNoticeStory"
    Case Else
        getstorytype = "ERROR"
End Select
End Function



Private Sub ValRepExp(n As Long)
    On Error Resume Next

    '
    Dim dt As String
    Dim I, j, iRow, iCol As Integer
    Dim Tbl, oTable As Word.Table
    Dim oCell As Cell
    Dim wdCell As Word.Cell
    Dim t As Table
    Application.ScreenUpdating = False
    Dim objExcel As Object
    Dim r As Integer
    TC = 1
    j = 1
    tid = ""
    Set objExcel = CreateObject("Excel.Application")
    objExcel.Visible = False
    UsrInput = Mid(Replace(ActiveDocument.Name, ".doc*", ""), 1, 30)
    

    ActiveDocument.Activate
    dt = Format(CStr(Now), "mm_hh_yyyy_mm_dd")
    Set objWorkbook = objExcel.Workbooks.Add
    Set ObjWorksheet = objWorkbook.Worksheets(1)
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        ObjWorksheet.DisplayRightToLeft = False
    Else
        ObjWorksheet.DisplayRightToLeft = True
    End If
    objWorkbook.Worksheets(1).Name = "Validation Report"
    ObjWorksheet.Range("a1").Value = "WeCo Accessibilty Validation Report"
    ObjWorksheet.Range("a1").HorizontalAlignment = xlCenter
    ObjWorksheet.Range("a1").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a1").WrapText = False
    ObjWorksheet.Range("a1").MergeCells = True
    ObjWorksheet.Range("a1").Font.Bold = True
    ObjWorksheet.Range("a1").Font.Size = 20
    ObjWorksheet.Range("A1:C1").Merge
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        ObjWorksheet.Range("a2").Value = "The information that provided within this report is in accordance to the organization's accessibility policy and  intended only for internal use and therefore does not constitute official confirmation of the accessibility validity of  the document"
    Else
        ObjWorksheet.Range("a2").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End If
     ObjWorksheet.rows("2:2").RowHeight = 30
     ObjWorksheet.rows("2:2").WrapText = True
   
     ObjWorksheet.Range("b4").Value = ActiveDocument.Name
        ObjWorksheet.Range("b5").Value = Format(CStr(Now), "dd-mm-yyyy | hh:mm")
        ObjWorksheet.Range("b6").Value = Application.UserName
    
    ObjWorksheet.Range("A2:C2").Merge
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        ObjWorksheet.Range("a4").Value = "File Name:"
        ObjWorksheet.Range("a5").Value = "Date:"
        ObjWorksheet.Range("a6").Value = "User Name:"
        ObjWorksheet.Range("a8").Value = "Summary:" '''
        ObjWorksheet.Range("A8:C8").Merge
        ObjWorksheet.Range("a11").Value = "Rule:"
        ObjWorksheet.Range("B11").Value = "Status:"
        ObjWorksheet.Range("C11").Value = "Description:"
        ObjWorksheet.Range("a10").Value = "Document:"
       
        ObjWorksheet.Range("a12").Value = "Title"
        ObjWorksheet.Range("a13").Value = "Primary language"
        ObjWorksheet.Range("a14").Value = "Logical reading order"
        ObjWorksheet.Range("a15").Value = "Color contrast"
        ObjWorksheet.Range("a16").Value = "Fonts"
        ObjWorksheet.Range("a18").Value = "Rule:"
        ObjWorksheet.Range("B18").Value = "Status:"
        ObjWorksheet.Range("C18").Value = "Description:"
        ObjWorksheet.Range("a17").Value = "Headings:" '''
        
        ObjWorksheet.Range("a19").Value = "Appropriate nesting"
        ObjWorksheet.Range("a21").Value = "Rule:"
        ObjWorksheet.Range("B21").Value = "Status:"
        ObjWorksheet.Range("C21").Value = "Description:"
        ObjWorksheet.Range("a20").Value = "Tables:"
        ObjWorksheet.Range("a22").Value = "Regularity"
        ObjWorksheet.Range("a23").Value = "Headers"
        ObjWorksheet.Range("a24").Value = "Summary"
        ObjWorksheet.Range("a26").Value = "Rule:"
        ObjWorksheet.Range("B26").Value = "Status:"
        ObjWorksheet.Range("C26").Value = "Description:"
        ObjWorksheet.Range("a25").Value = "Alt Text:"
        ObjWorksheet.Range("A25:C25").Merge
        ObjWorksheet.Range("a27").Value = "Figures alternate text"
        ObjWorksheet.Range("a28").Value = "HyperLinks:"
        ObjWorksheet.Range("a29").Value = "Rule:"
        ObjWorksheet.Range("B29").Value = "Status:"
        ObjWorksheet.Range("C29").Value = "Description:"
        ObjWorksheet.Range("a30").Value = "HyperLinks Tooltip"
        ObjWorksheet.Range("a31").Value = "HyperLinks Text to Dispaly"
        ObjWorksheet.Range("a32").Value = "Lists:"
        ObjWorksheet.Range("a33").Value = "Rule:"
        ObjWorksheet.Range("B33").Value = "Status:"
        ObjWorksheet.Range("C33").Value = "Description:"
        ObjWorksheet.Range("a34").Value = "Manual List"
        
        ObjWorksheet.Range("C12").Value = "Document title is defined"
        ObjWorksheet.Range("C13").Value = "Text language is specified"
        ObjWorksheet.Range("C14").Value = "Document structure provides a logical reading order"
        ObjWorksheet.Range("C15").Value = "Document has appropriate color contrast"
        ObjWorksheet.Range("C16").Value = "Document has appropriate fonts"
       
        ObjWorksheet.Range("C19").Value = "Document has appropriate Headings nesting"
      
        ObjWorksheet.Range("C22").Value = "Tables must contain the same number of columns in each row and rows in each column"
        ObjWorksheet.Range("C23").Value = "Tables should have headers"
        ObjWorksheet.Range("C24").Value = "Tables must have a summary"
     
        ObjWorksheet.Range("C27").Value = "Figures require alternate text"
        ObjWorksheet.Range("C30").Value = "Document HyperLinks has appropriate Tooltip"
        ObjWorksheet.Range("C31").Value = "Document HyperLinks has appropriate Text to Dispaly"
       
        ObjWorksheet.Range("C34").Value = "Document Lists should be set by auto numbering or bullets"
        If Trim(WeCoCheckerLight.lblTitle.Caption) = "" Then
            ObjWorksheet.Range("b12").Value = "Failed"
        Else
            ObjWorksheet.Range("b12").Value = "Passed"
        End If
        If Trim(WeCoCheckerLight.lbLanguage.Caption) = "" Then
            ObjWorksheet.Range("b13").Value = "Failed"
        Else
            ObjWorksheet.Range("b13").Value = "Passed"
        End If
        ObjWorksheet.Range("b14").Value = "Needs manual check"
        ObjWorksheet.Range("b15").Value = "Needs manual check"
        If WeCoCheckerLight.F_STAT_V.Visible = True Then
            ObjWorksheet.Range("b16").Value = "Passed"
        Else
            If WeCoCheckerLight.F_STAT_X.Visible = True Then
                ObjWorksheet.Range("b16").Value = "Failed"
            Else
                ObjWorksheet.Range("b16").Value = "Needs manual check"
            End If
        
        End If
        If WeCoCheckerLight.H_STAT_V.Visible = True Then
            ObjWorksheet.Range("b19").Value = "Passed"
        Else
            If WeCoCheckerLight.H_STAT_X.Visible = True Then
                ObjWorksheet.Range("b19").Value = "Failed"
            Else
                ObjWorksheet.Range("b19").Value = "Needs manual check"
            End If
        
        End If
        If Val(WeCoCheckerLight.STMerge.Caption) = 0 Then
            ObjWorksheet.Range("b22").Value = "Passed"
        Else
            ObjWorksheet.Range("b22").Value = "Failed"
        End If
        
        If Val(WeCoCheckerLight.STHead.Caption) = 0 Then
            ObjWorksheet.Range("b23").Value = "Passed"
        Else
            ObjWorksheet.Range("b23").Value = "Failed"
        End If
        If Val(WeCoCheckerLight.STDescr.Caption) = 0 Then
            ObjWorksheet.Range("b24").Value = "Passed"
        Else
            ObjWorksheet.Range("b24").Value = "Failed"
        End If
        If WeCoCheckerLight.STDescr.Visible = False Then ObjWorksheet.Range("b24").Value = "Skipped"
        If WeCoCheckerLight.G_STAT_V.Visible = True Or WeCoCheckerLight.G_STAT_I.Visible = True Then
            ObjWorksheet.Range("b27").Value = "Passed"
        Else
            ObjWorksheet.Range("b27").Value = "Failed"
        End If
        If Val(WeCoCheckerLight.HNoDesc.Caption) = 0 Then
            ObjWorksheet.Range("b30").Value = "Passed"
        Else
            ObjWorksheet.Range("b30").Value = "Failed"
        End If
         If Val(WeCoCheckerLight.HLInValidText.Caption) = 0 Then
            ObjWorksheet.Range("b31").Value = "Passed"
        Else
            ObjWorksheet.Range("b31").Value = "Failed"
        End If
        
        If WeCoCheckerLight.HL_STAT_I.Visible = True Then ObjWorksheet.Range("b30").Value = "Skipped"
        If Val(WeCoCheckerLight.ManList.ListCount) > 0 Then
            ObjWorksheet.Range("b34").Value = "Needs manual check"
        Else
            ObjWorksheet.Range("b34").Value = "Passed"
        End If
        If WeCoCheckerLight.ValidManList.Visible = False Then ObjWorksheet.Range("b34").Value = "Skipped"
        
        
        ''''''''''''''''''''''''''''''''''''''''''''''''''
        ObjWorksheet.Range("a36").Value = "Detailed Report"
        r = 37
        If WeCoCheckerLight.F_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "Inappropriate fonts use:"
            For I = 0 To WeCoCheckerLight.FontsListbox.ListCount
                ObjWorksheet.Range("b" & r).Value = WeCoCheckerLight.FontsListbox.List(I)
                r = r + 1
            Next
        End If
        If WeCoCheckerLight.H_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "Nesting Headings:"
            For I = 0 To Me.HeadingS.ListCount
                If Trim(Me.HeadingS.List(I)) <> "" Then
        
                    ObjWorksheet.Range("b" & r).Value = Trim(Me.HeadingS.List(I))
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    ObjWorksheet.Range("b" & r).WrapText = True
                    r = r + 1
                End If
            Next I
        End If
        If ObjWorksheet.Range("b22").Value = "Failed" Or ObjWorksheet.Range("b23").Value = "Failed" Or ObjWorksheet.Range("b24").Value = "Failed" Then
            ObjWorksheet.Range("a" & r).Value = "Tables:"
            For I = 0 To Me.TableS.ListCount
                If Trim(Me.TableS.List(I)) <> "" Then
                    ObjWorksheet.Range("B" & r).Value = Trim(Me.TableS.List(I))
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    r = r + 1
       
                End If
            Next I
        End If
        If WeCoCheckerLight.G_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "Alt Text:"
            ObjWorksheet.Range("b" & r).Value = "The document includes " & WeCoCheckerLight.SNoDescT.Caption & " Figures with no alternate Text"
            r = r + 1
        
        End If
        If Val(WeCoCheckerLight.HNoDesc.Caption) > 0 And WeCoCheckerLight.HL_STAT_I.Visible = False Then
            ObjWorksheet.Range("a" & r).Value = "HyperLinks:"
            ObjWorksheet.Range("b" & r).Value = "The document includes " & WeCoCheckerLight.HNoDesc.Caption & " HyperLinks with no ToolTip"
            If WeCoCheckerLight.HLInValidText.Caption <> 0 Then
                r = r + 1
                 ObjWorksheet.Range("b" & r).Value = "The document includes " & WeCoCheckerLight.HLInValidText.Caption & "HyperLinks with invalid text to display"
            End If
            r = r + 1
        End If
        If ObjWorksheet.Range("b34").Value = "Needs manual check" Then
            ObjWorksheet.Range("a" & r).Value = "Manual Lists:"
            For I = 0 To Me.ManList.ListCount
                If Trim(Me.ManList.List(I)) <> "" Then
                    ObjWorksheet.Range("b" & r).Value = Me.ManList.List(I) & Chr(13)
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    r = r + 1
                End If
            Next I
        End If
    Else
        ObjWorksheet.Range("a4").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a5").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a6").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a8").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:" '''
        ObjWorksheet.Range("a11").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B11").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C11").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a10").Value = "|fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a12").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a13").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a14").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a15").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a16").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a18").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B18").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C18").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a17").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|:" '''
        ObjWorksheet.Range("a19").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a20").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a21").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B21").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C21").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a22").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a23").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a24").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a26").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B26").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C26").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a25").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a27").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a28").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a29").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B29").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C29").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a30").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a31").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("a32").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a33").Value = "|fffd||fffd||fffd|:"
        ObjWorksheet.Range("B33").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("C33").Value = "|fffd||fffd||fffd||fffd||fffd|:"
        ObjWorksheet.Range("a34").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        
        ObjWorksheet.Range("C12").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C13").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C14").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C15").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C16").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
       
        ObjWorksheet.Range("C19").Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      
        ObjWorksheet.Range("C22").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C23").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C24").Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
     
        ObjWorksheet.Range("C27").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C30").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("C31").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"

        ObjWorksheet.Range("C34").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        
        If Trim(WeCoCheckerLight.lblTitle.Caption) = "" Then
            ObjWorksheet.Range("b12").Value = "|fffd||fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b12").Value = "|fffd||fffd||fffd|"
        End If
        If Trim(WeCoCheckerLight.lbLanguage.Caption) = "" Then
            ObjWorksheet.Range("b13").Value = "|fffd||fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b13").Value = "|fffd||fffd||fffd|"
        End If
        ObjWorksheet.Range("b14").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        ObjWorksheet.Range("b15").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        If WeCoCheckerLight.F_STAT_V.Visible = True Then
            ObjWorksheet.Range("b16").Value = "|fffd||fffd||fffd|"
        Else
            If WeCoCheckerLight.F_STAT_X.Visible = True Then
                ObjWorksheet.Range("b16").Value = "|fffd||fffd||fffd||fffd|"
            Else
                ObjWorksheet.Range("b16").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
        
        End If
        If WeCoCheckerLight.H_STAT_V.Visible = True Then
            ObjWorksheet.Range("b19").Value = "|fffd||fffd||fffd|"
        Else
            If WeCoCheckerLight.H_STAT_X.Visible = True Then
                ObjWorksheet.Range("b19").Value = "|fffd||fffd||fffd||fffd|"
            Else
                ObjWorksheet.Range("b19").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
        
        End If
        If Val(WeCoCheckerLight.STMerge.Caption) = 0 Then
            ObjWorksheet.Range("b22").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b22").Value = "|fffd||fffd||fffd||fffd|"
        End If
        
        If Val(WeCoCheckerLight.STHead.Caption) = 0 Then
            ObjWorksheet.Range("b23").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b23").Value = "|fffd||fffd||fffd||fffd|"
        End If
        If Val(WeCoCheckerLight.STDescr.Caption) = 0 Then
            ObjWorksheet.Range("b24").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b24").Value = "|fffd||fffd||fffd||fffd|"
        End If
        If WeCoCheckerLight.STDescr.Visible = False Then ObjWorksheet.Range("b24").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd|"
        If WeCoCheckerLight.G_STAT_V.Visible = True Or WeCoCheckerLight.G_STAT_I.Visible = True Then
            ObjWorksheet.Range("b27").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b27").Value = "|fffd||fffd||fffd||fffd|"
        End If
        If Val(WeCoCheckerLight.HNoDesc.Caption) = 0 Then
            ObjWorksheet.Range("b30").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b30").Value = "|fffd||fffd||fffd||fffd|"
        End If
        If Val(WeCoCheckerLight.HLInValidText.Caption) = 0 Then
            ObjWorksheet.Range("b31").Value = "|fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b31").Value = "|fffd||fffd||fffd||fffd|"
        End If
        If WeCoCheckerLight.HL_STAT_I.Visible = True Then ObjWorksheet.Range("b30").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd|"
        If Val(WeCoCheckerLight.ManList.ListCount) > 0 Then
            ObjWorksheet.Range("b34").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        Else
            ObjWorksheet.Range("b34").Value = "|fffd||fffd||fffd|"
        End If
        If WeCoCheckerLight.ValidManList.Visible = False Then ObjWorksheet.Range("b34").Value = "|fffd||fffd| |fffd||fffd||fffd||fffd|"
        
        ''''''''''''''''''''''''''''''''''''
        ObjWorksheet.Range("a36").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        r = 37
        If WeCoCheckerLight.F_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:"
            For I = 0 To WeCoCheckerLight.FontsListbox.ListCount
                ObjWorksheet.Range("b" & r).Value = WeCoCheckerLight.FontsListbox.List(I)
                r = r + 1
            Next
        End If
        If WeCoCheckerLight.H_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd||fffd||fffd|:"
            For I = 0 To Me.HeadingS.ListCount
                If Trim(Me.HeadingS.List(I)) <> "" Then
        
                    ObjWorksheet.Range("b" & r).Value = Trim(Me.HeadingS.List(I))
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    ObjWorksheet.Range("b" & r).WrapText = True
                    r = r + 1
                End If
            Next I
        End If
        If ObjWorksheet.Range("b22").Value = "|fffd||fffd||fffd||fffd|" Or ObjWorksheet.Range("b23").Value = "|fffd||fffd||fffd||fffd|" Or ObjWorksheet.Range("b24").Value = "|fffd||fffd||fffd||fffd|" Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd||fffd||fffd|"
            For I = 0 To Me.TableS.ListCount
                If Trim(Me.TableS.List(I)) <> "" Then
                    ObjWorksheet.Range("B" & r).Value = Trim(Me.TableS.List(I))
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    r = r + 1
       
                End If
            Next I
        End If
        If WeCoCheckerLight.G_STAT_X.Visible = True Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            ObjWorksheet.Range("b" & r).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  " & WeCoCheckerLight.SNoDescT.Caption & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
            r = r + 1
        
        End If
        If Val(WeCoCheckerLight.HNoDesc.Caption) > 0 And WeCoCheckerLight.HL_STAT_I.Visible = False Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
            ObjWorksheet.Range("b" & r).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & WeCoCheckerLight.HNoDesc.Caption & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
            If WeCoCheckerLight.HLInValidText.Caption <> 0 Then
                r = r + 1
                 ObjWorksheet.Range("b" & r).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & WeCoCheckerLight.HLInValidText.Caption & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            r = r + 1
        End If
        If ObjWorksheet.Range("b34").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" Then
            ObjWorksheet.Range("a" & r).Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            For I = 0 To Me.ManList.ListCount
                If Trim(Me.ManList.List(I)) <> "" Then
                    ObjWorksheet.Range("b" & r).Value = Me.ManList.List(I) & Chr(13)
                    ObjWorksheet.Range("b" & r & ":c" & r).Merge
                    r = r + 1
                End If
            Next I
        End If
    End If
    ObjWorksheet.Range("A8:C8").Merge
    ObjWorksheet.Range("a8").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a8").WrapText = False
    ObjWorksheet.Range("a8").MergeCells = True
    ObjWorksheet.Range("a8").Font.Bold = True
    ObjWorksheet.Range("a8").Font.Size = 18
    ObjWorksheet.Range("A17:C17").Merge
    ObjWorksheet.Range("a17").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a17").WrapText = False
    ObjWorksheet.Range("a17").MergeCells = True
    ObjWorksheet.Range("a17").Font.Bold = True
    ObjWorksheet.Range("a17").Font.Size = 13
    ObjWorksheet.Range("A10:C10").Merge
    ObjWorksheet.Range("a10").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a10").WrapText = False
    ObjWorksheet.Range("a10").MergeCells = True
    ObjWorksheet.Range("a10").Font.Bold = True
    ObjWorksheet.Range("a10").Font.Size = 13
    
         
    ObjWorksheet.Range("A20:C20").Merge
    ObjWorksheet.Range("a20").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a20").WrapText = False
    ObjWorksheet.Range("a20").MergeCells = True
    ObjWorksheet.Range("a20").Font.Bold = True
    ObjWorksheet.Range("a20").Font.Size = 13
         
    ObjWorksheet.Range("A25:C25").Merge
    ObjWorksheet.Range("a25").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a25").WrapText = False
    ObjWorksheet.Range("a25").MergeCells = True
    ObjWorksheet.Range("a25").Font.Bold = True
    ObjWorksheet.Range("a25").Font.Size = 13
         
    ObjWorksheet.Range("A28:C28").Merge
    ObjWorksheet.Range("a28").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a28").WrapText = False
    ObjWorksheet.Range("a28").MergeCells = True
    ObjWorksheet.Range("a28").Font.Bold = True
    ObjWorksheet.Range("a28").Font.Size = 13
         
    ObjWorksheet.Range("A32:C32").Merge
    ObjWorksheet.Range("a32").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a32").WrapText = False
    ObjWorksheet.Range("a32").MergeCells = True
    ObjWorksheet.Range("a32").Font.Bold = True
    ObjWorksheet.Range("a32").Font.Size = 13
         
    ObjWorksheet.Range("A36:C36").Merge
    ObjWorksheet.Range("a36").VerticalAlignment = xlBottom
    ObjWorksheet.Range("a36").WrapText = False
    ObjWorksheet.Range("a36").MergeCells = True
    ObjWorksheet.Range("a36").Font.Bold = True
    ObjWorksheet.Range("a36").Font.Size = 18
    With ObjWorksheet.Cells.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
        
    With ObjWorksheet.Range("A11:C11").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
   
    With ObjWorksheet.Range("A12:C16").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A18:C18").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A19:C19").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A21:C21").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A22:C24").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A26:C26").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A27:C27").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A29:C29").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A30:C31").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A33:C33").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.349986266670736
        .PatternTintAndShade = 0
    End With
    With ObjWorksheet.Range("A34:C34").Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
         
    
    ObjWorksheet.rows("3:" & r).EntireRow.AutoFit
    ObjWorksheet.Columns("A:C").EntireColumn.AutoFit
    
      
    '''
    
    ObjWorksheet.Cells.Borders(xlDiagonalDown).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlDiagonalUp).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlEdgeLeft).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlEdgeTop).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlEdgeBottom).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlEdgeRight).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlInsideVertical).LineStyle = xlNone
    ObjWorksheet.Cells.Borders(xlInsideHorizontal).LineStyle = xlNone
   
  
    ObjWorksheet.Cells.Borders(xlEdgeLeft).ThemeColor = 1
    ObjWorksheet.Cells.Borders(xlEdgeTop).ThemeColor = 1
    ObjWorksheet.Cells.Borders(xlEdgeBottom).ThemeColor = 1
    ObjWorksheet.Cells.Borders(xlEdgeRight).ThemeColor = 1
    ObjWorksheet.Cells.Borders(xlInsideVertical).ThemeColor = 1
    ObjWorksheet.Cells.Borders(xlInsideHorizontal).ThemeColor = 1
     
    Dim LastRow As Long
    With ObjWorksheet.Cells
        LastRow = .rows(.rows.Count).Row
    End With
    
    Dim LastColumn As Long
    With ActiveSheet.Cells
        LastColumn = .Columns(.Columns.Count).Column
    End With
    
    Dim ColumnLetter As String
    ObjWorksheet.rows(r + 1 & ":" & LastRow).EntireRow.Hidden = True
    ColumnLetter = Split(ObjWorksheet.Cells(1, LastColumn).Address, "$")(1)
   
    ObjWorksheet.Columns("D:" & ColumnLetter).EntireColumn.Hidden = True
    '''
     
      
      
      
    Application.ScreenUpdating = True
    
    'ActiveWorkbook.Protect
    ' ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
   
    'ActiveWorkbook.SaveAs FileName:=ActiveDocument.Path & "\" & Split(ActiveDocument.Name, ".")(0) & "-Acc Report-" & Format(CStr(Now), "ddmmyyyy_hh_mm") & ".mhtml", _
     '   FileFormat:=xlWebArchive, CreateBackup:=False
       '''
       Dim mm, mmm As String
       mmm = Split(ActiveDocument.Name, ".")(0) & "-Acc Report-" & Format(CStr(Now), "ddmmyyyy_hh_mm")
       mm = ActiveDocument.Path & "\" & Split(ActiveDocument.Name, ".")(0) & "-Acc Report-" & Format(CStr(Now), "ddmmyyyy_hh_mm") & ".htm"
       With ActiveWorkbook.PublishObjects.Add(xlSourceSheet, _
       mm _
        , "Validation Report", "", xlHtmlStatic, _
        mmm, "")
        .Publish (True)
        .AutoRepublish = False
    End With
    ChDir ActiveDocument.Path
       
       '''
         
    objWorkbook.Close SaveChanges:=False
   ' objExcel.Visible = True
    ' objExcel.Close
    
   objExcel.Quit
   
    Load MASSAGE_BOX
          
   
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = " The Validation Report was exported to the following path: "
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|:"
    End If
    MASSAGE_BOX.REPHL.Visible = True
    MASSAGE_BOX.REPHL.Caption = mm
    MASSAGE_BOX.Show
    
End Sub
Private Sub FontUnderlineSNext_Click()
WeCoCheckerLight.FontUnderlineSState.Caption = "0"
End Sub
Private Sub FontItalicSNext_Click()
WeCoCheckerLight.FontItalicSState.Caption = "0"
End Sub
Private Sub LineSpaceSNext_Click()
WeCoCheckerLight.LineSpaceSState.Caption = "0"
End Sub

Private Sub FontSizeSNext_Click()
WeCoCheckerLight.FontSizeSState.Caption = "0"
End Sub




Attribute VB_Name = "checker"
Private DocProp(30) As String
Private aTabHasItems(6) As Boolean
Private iTabNum As Integer
Private oDoc As Object

Private aFonts() As String
Private aFontsPS() As String
Private aStyles() As String
Private aSections() As String
Private aTabChosen(6) As Boolean

Private aNumItems(6) As Integer
Private aTabName(6) As String
Private StatusMsg(6) As String
Private aReportDone(6) As Boolean
Private aReportCols(6) As Integer
Private aShowReportButton(6) As Boolean
Private aAllowGoTo(6) As Boolean
Private aLastLoc(6, 1) As Integer
Private bReportCreated As Boolean
Private strFN As String 'Filename
Private oTable As Object
Private oCell As Object
Private oRow As Object

Private oRDoc As Object

Private sMacroName As String
Private iCount As Integer
Private I As Integer
Private Q$
Private strFontSampleText As String
Private DocStats(9, 1) As String
Public Sub WeCOLight(n As Integer)
 On Error Resume Next
    Dim oDoc  As Document
    Dim I As Integer

    Application.ScreenUpdating = False
    DoEvents
    System.Cursor = wdCursorWait
    Set oDoc = ActiveDocument
  
    I = 0
    On Error Resume Next
 
    For Each prop In oDoc.BuiltInDocumentProperties
        I = I + 1
        DocProp(I) = prop.Value
    Next
    WeCoCheckerLight.lblFileName.Caption = ActiveDocument.Name
    WeCoCheckerLight.lblLocation.Caption = ActiveDocument.Path
    'WeCoCheckerLight.lblAuthor.Caption = DocProp(3)
  
    WeCoCheckerLight.lblPages.Caption = DocProp(14)
  
    WeCoCheckerLight.lblTitle.Caption = DocProp(1)
   ' If Trim(WeCoCheckerLight.lblTitle.Caption) = "" Then
   '     If Docaddonproperties.AddinLanguage.Value = "English" Then
   '         WeCoCheckerLight.lblTitle.Caption = "Document Title was not set"
   '     Else
   '         WeCoCheckerLight.lblTitle.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
   '     End If
   '     WeCoCheckerLight.GEN_STAT_X.Visible = True
   ' End If
    WeCoCheckerLight.lbLanguage.Caption = oDoc.BuiltInDocumentProperties("language")
    If Trim(WeCoCheckerLight.lbLanguage.Caption) = "" Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.lbLanguage.Caption = "Language was not set"
        Else
            WeCoCheckerLight.lbLanguage.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
        End If
    End If
    If Trim(WeCoCheckerLight.lblTitle.Caption) = "" Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.GeneralS_general.AddItem "Document Title was not set"
        Else
            WeCoCheckerLight.GeneralS_general.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.GEN_STAT_X.Visible = True
   
    Else
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.GeneralS_general.AddItem "Document Title was set"
        Else
            WeCoCheckerLight.GeneralS_general.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.GEN_STAT_V.Visible = True
   
    End If
    If Report_Check.VFontTypeCheck = True Then
        Call ListFontsInDoc(1)
    Else
        With WeCoCheckerLight
            .FontsListbox.Clear
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                .FontsListbox.AddItem "Test was not performed"
            Else
                .FontsListbox.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
        End With
    End If
     If Report_Check.VFontSizeCheck = True Then
        Call FindMinFontSize(1)
    Else
        WeCoChecker.FontSize.Caption = "N/A"
    End If
    If Report_Check.VMinLineSpaceCheck = True Then
        Call FindLineSpace(1)
    Else
        WeCoChecker.LineSpace.Caption = "N/A"
    End If
    If Report_Check.VUnderlineCheck = True Then
        Call FindUderLine(1)
    Else
        WeCoChecker.FontUnderline.Caption = "N/A"
    End If
    If Report_Check.VFontItalicCheck = True Then
        Call FindItalic(1)
    Else
        WeCoChecker.FontItalic.Caption = "N/A"
    End If
    
    If Report_Check.VFontTypeCheck = False And Report_Check.VFontSizeCheck = False And Report_Check.VMinLineSpaceCheck = False And Report_Check.VUnderlineCheck = False And Report_Check.VFontItalicCheck = False Then
   
  
    Else
        With WeCoChecker
            .FontS_Genreal.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End With
    End If
    
    '  If Report_Check.VFontTypeCheck = False And Report_Check.VFontSizeCheck = False And Report_Check.VMinLineSpaceCheck = False And Report_Check.VUnderlineCheck = False And Report_Check.VFontItalicCheck = False Then
   
  
    'Else
    '    With WeCoCheckerLight
    '     .FontS_Genreal.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    '  End With
    'End If


    If Report_Check.VHeadingsCheck = True Then
        Call CountHeading(1)
    Else
        With WeCoCheckerLight
            .HeadingS.Clear
            ' .Show
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                .HeadingS.AddItem "Test was not performed"
                .HeadingS_General.AddItem "Test was not performed"
            Else
                .HeadingS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                .HeadingS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
            .H_STAT_I.Visible = True
        End With
  
    End If
    If Report_Check.VTablesCheck = True Then
        Call TableSum(1)
    Else
        With WeCoCheckerLight
            .TableS.Clear
        End With
        ' .Show
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            'With WeCoCheckerLight
                WeCoCheckerLight.TableS.AddItem "Test was not performed"
                WeCoCheckerLight.TableS_General.AddItem "Test was not performed"
           ' End With
        Else
           ' With WeCoCheckerLight
                WeCoCheckerLight.TableS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                WeCoCheckerLight.TableS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
           ' End With
        End If
        'With WeCoCheckerLight
            WeCoCheckerLight.T_STAT_I.Visible = True
        'End With
    End If
    If Report_Check.VAltTextCheck = True Then
        Call CountGraphics(1)
    Else
        
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            With WeCoCheckerLight
                .AltText_General.AddItem "Test was not performed"
    
                .HyperLinks_General.AddItem "Test was not performed"
            End With
        Else
            With WeCoCheckerLight
                .AltText_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    
                .HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End With
        End If
        With WeCoCheckerLight
            .G_STAT_I.Visible = True
            .HL_STAT_I.Visible = True
        End With
       
    End If
    If Report_Check.VManualListCheck = True Then
        Call docManLsit(1)
    Else
        WeCoCheckerLight.ValidManList.Visible = False
    End If
   ' WeCoCheckerLight.Show vbModeless
   ' Application.ScreenUpdating = True
End Sub
Public Sub ListFontsInDoc(n As Integer)
    On Error Resume Next
    Dim lngJunk As Long
    Dim rngStory As Word.Range
    Dim oShp As Word.Shape
    Dim FontName As String
    Dim lngIndex As Long
    Dim lngChar As Long
    Dim lngCharCount As Long
    Dim rngChar As Range
    Dim colFontsUsed As New Collection
    Dim oDocList As Word.Document
    Dim fontc As Boolean
    Dim k, I As Integer
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Fonts Evaluating..."
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.1)
    lngJunk = ActiveDocument.Sections(1).Headers(1).Range.StoryType
    I = 0
    For Each rngStory In ActiveDocument.StoryRanges
        I = I + 1
       
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1 + 0.9 * (I / ActiveDocument.StoryRanges.Count))
        lngChar = 0
        lngCharCount = rngStory.Characters.Count
        Do
            Pro_Bar.Label1.Caption = 10 & "% Completed"
            FractionComplete (0.1 + 0.9 * (I / ActiveDocument.StoryRanges.Count))
    
            'Evaluate each character.
            For Each rngChar In rngStory.Characters
                lngChar = lngChar + 1
                FontName = rngChar.Font.Name
                'StatusBar = "Evaluauting character " & lngChar & " of " & lngCharCount & " characters in the story range."
                'Check if font used for this character is already in the list.
                On Error Resume Next
                'Collection key prevents adding fonts already in the collection.
                ''Call AddToCollection(colFontsUsed, rngChar.Font.Name)
                If Asc(rngChar) <> 0 And Asc(rngChar) <> 13 And Asc(rngChar) <> 3 And Asc(rngChar) <> 4 Then Call AddToCollection(colFontsUsed, rngChar.Font.Name)
                'colFontsUsed.Add rngChar.Font.Name, rngChar.Font.Name
                On Error GoTo 0
            Next rngChar
           
            'Evaluated shaped in headers and footers.
            Select Case rngStory.StoryType
                Case 6, 7, 8, 9, 10, 11
                    'No shape will throw an error that we handle and skip.
                    On Error GoTo Err_Handler
                    If rngStory.ShapeRange.Count > 0 Then
                        For Each oShp In rngStory.ShapeRange
                            If oShp.TextFrame.HasText Then
                                lngChar = 0
                                lngCharCount = oShp.TextFrame.TextRange.Characters.Count
                                For Each rngChar In oShp.TextFrame.TextRange.Characters
                                    lngChar = lngChar + 1
                                    FontName = rngChar.Font.Name
                                    ' StatusBar = "Evaluauting character " & lngChar & " of " & lngCharCount & " characters in the story range."
                                    On Error Resume Next
                                    If Asc(rngChar) <> 0 And Asc(rngChar) <> 13 And Asc(rngChar) <> 3 And Asc(rngChar) <> 4 Then Call AddToCollection(colFontsUsed, rngChar.Font.Name)
                                    '  Call AddToCollection(colFontsUsed, rngChar.Font.Name)
                                    '  colFontsUsed.Add rngChar.Font.Name, rngChar.Font.Name
                                    On Error GoTo 0
                                Next rngChar
                            End If
                        Next oShp
                    End If
                Case Else
                    'Do Nothing
            End Select
SkipRange:
            On Error GoTo 0
            'Get next linked story (if any)
            Set rngStory = rngStory.NextStoryRange
        Loop Until rngStory Is Nothing
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.1 + 0.9 * (I / ActiveDocument.StoryRanges.Count))
      
    Next rngStory
    Application.StatusBar = ""

    Set colFontsUsed = SortCollection(colFontsUsed)

    With WeCoCheckerLight.FontsListbox
        
        For k = 1 To colFontsUsed.Count
            If colFontsUsed(k) <> "" Then
                fontc = False
                For I = 0 To DocMetaData.DocFont.ListCount - 1
                    If colFontsUsed(k) = DocMetaData.DocFont.List(I) Then
                        fontc = True
                        GoTo nextkk
                    End If
                Next I
                '    MsgBox colFontsUsed(k) & " - " & fontc & "-" & FontSCHECK(colFontsUsed(k))
                If fontc = False And FontSCHECK(colFontsUsed(k)) = True Then WeCoCheckerLight.FontsListbox.AddItem colFontsUsed(k)
            End If
nextkk:
        Next k
    End With
    WeCoCheckerLight.FontS_Genreal.Clear
    Application.ScreenUpdating = True
    If WeCoCheckerLight.FontsListbox.ListCount = 0 Then
        WeCoCheckerLight.FontS_Genreal.Clear
         If Docaddonproperties.AddinLanguage.Value = "English" Then
         WeCoCheckerLight.FontS_Genreal.AddItem "No Font Issues was detected"
         Else
        WeCoCheckerLight.FontS_Genreal.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.F_STAT_V.Visible = True
    Else
        WeCoCheckerLight.FontS_Genreal.Clear
         If Docaddonproperties.AddinLanguage.Value = "English" Then
         WeCoCheckerLight.FontS_Genreal.AddItem "Font Issues was detected"""
         Else
        WeCoCheckerLight.FontS_Genreal.AddItem " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.F_STAT_X.Visible = True
        WeCoCheckerLight.GEN_STAT_V.Visible = False
        WeCoCheckerLight.GEN_STAT_I.Visible = True
        WeCoCheckerLight.GeneralS_general.Clear
         If Docaddonproperties.AddinLanguage.Value = "English" Then
         WeCoCheckerLight.GeneralS_general.AddItem "General issues was detected, please expand the view"
         Else
        WeCoCheckerLight.GeneralS_general.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    Unload Pro_Bar
    Exit Sub
Err_Handler:
    Resume SkipRange
End Sub


Private Sub AddToCollection(cl As Collection, ItmStr As String)
    On Error Resume Next
    Dim k As Long
    For k = 1 To cl.Count
        If cl(k) = ItmStr Then Exit Sub
        If ItmStr < cl(k) Then
            cl.Add Item:=ItmStr, Before:=k
            Exit Sub
        End If
    Next k
    cl.Add Item:=ItmStr
End Sub
Public Function SortCollection(ByVal oCol As Collection) As Collection
    Dim arrIndex() As Long
    Dim lngCount As Long
    Dim I As Long
    Dim m As Long
    Dim oColSorted As New Collection

    lngCount = oCol.Count
    If lngCount = 0 Then
        Set SortCollection = New Collection
        Exit Function
    End If
    'Allocate an index array.
    ReDim arrIndex(0 To lngCount - 1) As Long
    'Fill the index array.
    For I = 0 To lngCount - 1
        arrIndex(I) = I + 1
    Next I
    'Generate an ordered heap.
    For I = lngCount \ 2 - 1 To 0 Step -1
        Heapify oCol, arrIndex, I, lngCount
    Next I
    'Sort the index array
    For m = lngCount To 2 Step -1
        Exchange arrIndex, 0, m - 1
        Heapify oCol, arrIndex, 0, m - 1
    Next
    For I = 0 To lngCount - 1
        oColSorted.Add oCol.Item(arrIndex(I))
    Next  ' fill output collection
    Set SortCollection = oColSorted
End Function
Private Function FontSCHECK(fnt As String) As Boolean

    Dim j As Integer
    j = 0
    On Error Resume Next
    Selection.HomeKey Unit:=wdStory
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = ""
        .Font.Name = fnt
        .Forward = True
        .Format = True
        .Execute
        If .Found Then
            j = j + 1
            ' FontSCHECK = True
            ' Exit Function
        Else
       
            ' FontSCHECK = False
            '   Exit Function
        End If
    End With
    Selection.HomeKey Unit:=wdStory
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = ""
        .Font.NameBi = fnt
        .Forward = True
        .Format = True
        .Execute
        If .Found Then
            j = j + 1
            ' FontSCHECK = True
            ' Exit Function
        Else
       
            ' FontSCHECK = False
            '   Exit Function
        End If
     
    End With
    If j = 0 Then
        FontSCHECK = False
    Else
        FontSCHECK = True
    End If
End Function
Private Sub Heapify(oCol As Collection, arrIndexPasssed() As Long, lngIndex As Long, lngCount As Long)
    Dim lngMidCount As Long
    Dim I As Long
    lngMidCount = lngCount \ 2
    Do While lngIndex < lngMidCount
        I = 2 * lngIndex + 1
        If I + 1 < lngCount Then
            If oCol.Item(arrIndexPasssed(I)) < oCol.Item(arrIndexPasssed(I + 1)) Then
                I = I + 1
            End If
        End If
        If oCol.Item(arrIndexPasssed(lngIndex)) >= oCol.Item(arrIndexPasssed(I)) Then
            Exit Do
        End If
        Exchange arrIndexPasssed, lngIndex, I
        lngIndex = I
    Loop
End Sub
Private Sub Exchange(Index() As Long, I As Long, j As Long)
    Dim Temp As Long
    Temp = Index(I)
    Index(I) = Index(j)
    Index(j) = Temp
End Sub
Sub FindMinFontSize(n As Long)
    Dim I As Integer
    Dim mm, m As Variant
    'WeCoCheckerLight.LineSpaceS.Visible = False
    'WeCoCheckerLight.LineSpaceSNext.Visible = True
    Dim oRng As Word.Range
    If Docaddonproperties.AddinLanguage.Value = "English" Then
    WeCoCheckerLight.FontSize.Caption = "No"
    Else
    WeCoCheckerLight.FontSize.Caption = "|fffd||fffd|"
    End If
    
    Set oRng = ActiveDocument.Content
    ' WeCoCheckerLight.FontItalic.Caption = "|fffd||fffd|"
    mm = Docaddonproperties.BodyMinFontVal
    For I = 2 * mm - 1 To 1 Step -1
        m = I / 2
        With oRng.Find
            ' to ensure that unwanted formats aren't included as criteria
            .ClearFormatting
            'You don't care what the text is
            .Text = ""
            'Find the italic text
            .Font.Size = m
        
            'Loop for each match and set a color
            While .Execute
                '  oRng.HighlightColorIndex = wdDarkYellow
                '   oRng.Collapse wdCollapseEnd
                oRng.Select
           
                Application.ScreenUpdating = True
                oRng.Select
                If Docaddonproperties.AddinLanguage.Value = "English" Then
    WeCoCheckerLight.FontSize.Caption = "Yes"
    Else
    WeCoCheckerLight.FontSize.Caption = "|fffd||fffd|"
    End If
                WeCoCheckerLight.FontSizeS.Visible = True
                Exit Sub

            Wend
        End With
        With oRng.Find
            ' to ensure that unwanted formats aren't included as criteria
            .ClearFormatting
            'You don't care what the text is
            .Text = ""
            'Find the italic text
            .Font.SizeBi = m
        
            'Loop for each match and set a color
            While .Execute
                '  oRng.HighlightColorIndex = wdDarkYellow
                '   oRng.Collapse wdCollapseEnd
                oRng.Select
           
                Application.ScreenUpdating = True
                oRng.Select
                If Docaddonproperties.AddinLanguage.Value = "English" Then
    WeCoCheckerLight.FontSize.Caption = "Yes"
    Else
    WeCoCheckerLight.FontSize.Caption = "|fffd||fffd|"
    End If
              
              
                WeCoCheckerLight.FontSizeS.Visible = True
                WeCoCheckerLight.GEN_STAT_V.Visible = False
                WeCoCheckerLight.GEN_STAT_I.Visible = True
                WeCoCheckerLight.GeneralS_general.Clear
               ' WeCoCheckerLight.GeneralS_general.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Sub

            Wend
        End With
    Next I
   
End Sub


Sub CountHeading(n As Long)

    On Error Resume Next
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Headings Evaluating..."
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.05)
    ' DoEvent
    Application.ScreenUpdating = False
    Dim currentp As Range
    Dim Headingstr As String
    Dim manStr As String
    Dim JJ, I, k, iRow, iCol, pp As Integer
    Dim colHeading As New Collection
    Dim colMan As New Collection
    Dim LastH, CurrentH
    Dim rng As Range
    Dim para As Paragraph
    Dim O1, O2, O3, O4, O5, O6, O7, O8, OEmpty As Integer
    O1 = 0: O2 = 0: O3 = 0: O4 = 0: O5 = 0: O6 = 0: O7 = 0: O8 = 0: OEmpty = 0
  
   
    WeCoCheckerLight.O1.Caption = 0
    JJ = JJ + 1
    pp = 0
    ' Application.ScreenUpdating = False
    For pp = hh To ActiveDocument.Paragraphs.Count
        'pp = pp + 1
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.05 + 0.95 * (pp / ActiveDocument.Paragraphs.Count))
      
        DoEvents
        Application.ScreenUpdating = False
        hh.Follow
        'hh.Range.Select
     '   k = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        If ActiveDocument.Paragraphs(pp).Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText Then GoTo NXTHH
        If ActiveDocument.Paragraphs(pp).Range.Information(wdWithInTable) Then GoTo NXTHH
       
        ActiveDocument.Paragraphs(pp).Range.Select
        CurrentH = Selection.ParagraphFormat.OutlineLevel
        Set currentp = Selection.Range
        Select Case CurrentH
            Case wdOutlineLevel1
                O1 = O1 + 1
                CurrentH = 1
            Case wdOutlineLevel2
                O2 = O2 + 1
                CurrentH = 2
            Case wdOutlineLevel3
                O3 = O3 + 1
                CurrentH = 3
            Case wdOutlineLevel4
                O4 = O4 + 1
                CurrentH = 4
            Case wdOutlineLevel5
                O5 = O5 + 1
                CurrentH = 5
            Case wdOutlineLevel6
                O6 = O6 + 1
                CurrentH = 6
            Case wdOutlineLevel7
                O7 = O7 + 1
                CurrentH = 7
            Case wdOutlineLevel8
                O8 = O8 + 1
                CurrentH = 8
        End Select
  
        '  If Len(currentp.Text) < 2 Then
        If Trim(currentp.Text) = "" Or Len(currentp.Text) < 2 Then
            OEmpty = OEmpty + 1
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                Headingstr = "Empty Heading in Level " & CurrentH & "  " & " was detected in page  " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & pp & ")"
            Else
                Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & pp & ")"
            End If
            Call AddToCollection(colHeading, Headingstr)
        End If
        
        If CurrentH > LastH + 1 And CurrentH < 7 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                Headingstr = "Heading in Level " & CurrentH & "  " & "with wrong nesting was found in page " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & pp & ")"
            Else
                Headingstr = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & CurrentH & "  " & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| , |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & Selection.Range.Information(wdActiveEndAdjustedPageNumber) & " (" & pp & ")"
            End If
            Call AddToCollection(colHeading, Headingstr)
        End If
        LastH = CurrentH
NXTHH:
    Next
         
    For k = 1 To colHeading.Count
        WeCoCheckerLight.HeadingS.AddItem colHeading(k)
    Next k
    WeCoCheckerLight.O1.Caption = O1: WeCoCheckerLight.O2.Caption = O2: WeCoCheckerLight.O3.Caption = O3: WeCoCheckerLight.O4.Caption = O4: WeCoCheckerLight.O5.Caption = O5: WeCoCheckerLight.O6.Caption = O6: WeCoCheckerLight.O7.Caption = O7: WeCoCheckerLight.O8.Caption = O8
    WeCoCheckerLight.OTotal.Caption = O1 + O2 + O3 + O4 + O5 + O6 + O7 + O8
    If colHeading.Count > 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HeadingS_General.AddItem "Headings issues was detected"
        Else
            WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        End If
        WeCoCheckerLight.H_STAT_X.Visible = True
    End If
    If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HeadingS_General.AddItem "The Document does not contains any Headings"
        Else
            WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.H_STAT_I.Visible = True
    End If
     
    If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HeadingS.AddItem "No Headings Issues was detected"
            WeCoCheckerLight.HeadingS_General.AddItem "No Headings Issues was detected"
        Else
        
            WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.H_STAT_V.Visible = True
    End If
     
    If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty <> 0 Then WeCoCheckerLight.HeadingS.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & OEmpty & " " & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    If colHeading.Count = 0 And WeCoCheckerLight.OTotal.Caption <> 0 And OEmpty <> 0 Then WeCoCheckerLight.HeadingS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & OEmpty & " " & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
   
     
     
    ActiveDocument.Shapes.Range(Array("TEMPTOC")).Delete
    Unload Pro_Bar
    
    'UserForm1.TextBox1.Value = msg
    Application.ScreenUpdating = True
    '  UserForm1.Show
    
End Sub


Public Function getstorytype(a As Integer) As String
    Select Case a
       Case "1"
        getstorytype = "wdMainTextStory"
    Case "2"
         getstorytype = "wdFootnotesStory"
    Case "3"
         getstorytype = "wdEndnotesStory"
    Case "4"
        getstorytype = "wdCommentsStory"
    Case "5"
         getstorytype = "wdTextFrameStory"
    Case "6"
        getstorytype = "wdEvenPagesHeaderStory"
    Case "7"
         getstorytype = "wdPrimaryHeaderStory"
    Case "8"
         getstorytype = "wdEvenPagesFooterStory"
    Case "9"
         getstorytype = "wdPrimaryFooterStory"
    Case "10"
        getstorytype = "wdFirstPageHeaderStory"
    Case "11"
         getstorytype = "wdFirstPageFooterStory"
     Case "12"
         getstorytype = "wdFootnoteSeparatorStory"
     Case "13"
         getstorytype = "wdFootnoteContinuationSeparatorStory"
     Case "14"
         getstorytype = "wdFootnoteContinuationNoticeStory"
     Case "15"
         getstorytype = "wdEndnoteSeparatorStory"
     Case "16"
         getstorytype = "wdEndnoteContinuationSeparatorStory"
    Case "17"
         getstorytype = "wdEndnoteContinuationNoticeStory"
    Case Else
        getstorytype = "ERROR"
    End Select
End Function

Sub TableSum(n As Long)
    On Error Resume Next
    
    '
    Application.ScreenUpdating = False
    Dim colTable As New Collection
    Dim I, j, k As Integer
    Dim Tbl, oTable As Word.Table
    Dim Tbldes, TblMerge, TblHead As Integer
    Dim Tablestr, Tdesc, THead, TMerge, Tpage As String
    Application.ScreenUpdating = False
    With WeCoCheckerLight
        .TableS.Clear
        .TableS_General.Clear
    End With
    Tbldes = 0
    TblHead = 0
    TblMerge = 0
   

    ActiveDocument.Activate
    
  
    j = 0
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Tables Evaluating..."
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.05)
    DoEvents
    With ActiveDocument
  
        For Each Tbl In ActiveDocument.TableS 'j = 1 To ActiveDocument.Tables.Count
            Pro_Bar.Label1.Caption = 10 & "% Completed"
            Pro_Bar.Label1.Caption = 10 & "% Completed"
            FractionComplete (0.05 + 0.95 * (j / ActiveDocument.TableS.Count))
         
            Application.ScreenUpdating = False
            Tdesc = ""
            THead = ""
            TMerge = ""
            Tbl.Select
            Tpage = Tbl.Range.Information(wdActiveEndAdjustedPageNumber)
            If Trim(Tbl.Descr) = "" And DocMetaData.DocFormat.Value = "Word" Then
                If Docaddonproperties.AddinLanguage.Value = "English" Then
                    Tdesc = "Table description was not set"
                Else
                    Tdesc = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "
                End If
                Tbldes = Tbldes + 1
            End If
            Tbl.Select
            With Selection
                If Selection.Bookmarks.Count = 0 Then
                    If .rows(1).HeadingFormat <> True Then
                        If Docaddonproperties.AddinLanguage.Value = "English" Then
                            THead = "Table headings was not Taged"
                        Else
                            THead = " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
                        End If
                        TblHead = TblHead + 1
                    End If
                End If
            End With
          
            With Selection
                'On Error GoTo mergeerror

                If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                    If Docaddonproperties.AddinLanguage.Value = "English" Then
                        TMerge = "Table Merged Cells was detected"
                    Else
                        TMerge = " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                    End If
                    TblMerge = TblMerge + 1
                End If
            
mergeerror:
            End With
            ' If Err.Number <> 0 Then
            '     Err.Clear
                
            'If Docaddonproperties.tableMergeCheck = True Then m = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|") 'MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd|")
            ' If m = 6 Then Call TableManipulation(k)
                
            ' End If
           
            '    If Tbl.Rows.Count * Tbl.Columns.Count <> Tbl.Cells.Count Then TMerge = " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
            j = j + 1
            If Trim(Tdesc & THead & TMerge) <> "" Then
                ' Tablestr = "|fffd||fffd||fffd||fffd||fffd| " & j & "|fffd||fffd||fffd||fffd||fffd||fffd| " & Tpage & ":" & Tdesc & THead & TMerge
                If Docaddonproperties.AddinLanguage.Value = "English" Then
                    Call AddToCollection(colTable, "Table " & j & ", on page " & Tpage & ":" & Tdesc & THead & TMerge)
                Else
                    Call AddToCollection(colTable, "|fffd||fffd||fffd||fffd||fffd| " & j & ", |fffd||fffd||fffd||fffd||fffd||fffd| " & Tpage & ":" & Tdesc & THead & TMerge)
                End If
            End If
           
            
        Next Tbl
    
        For k = 1 To colTable.Count
            WeCoCheckerLight.TableS.AddItem colTable(k)
        Next k
        If j = 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.TableS.AddItem "Document does not contain any Tables"
                WeCoCheckerLight.TableS_General.AddItem "Document does not contain any Tables"
            Else
                WeCoCheckerLight.TableS.AddItem " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
                WeCoCheckerLight.TableS_General.AddItem " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
            End If
            WeCoCheckerLight.T_STAT_I.Visible = True
        Else
      
            If colTable.Count = 0 Then
                If Docaddonproperties.AddinLanguage.Value = "English" Then
                    WeCoCheckerLight.TableS.AddItem "No Tables Issues was detected"
                    WeCoCheckerLight.TableS_General.AddItem "No Tables Issues was detected"
                Else
                    WeCoCheckerLight.TableS.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
                    WeCoCheckerLight.TableS_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
                End If
                WeCoCheckerLight.T_STAT_V.Visible = True
      
               
            Else
                If Docaddonproperties.AddinLanguage.Value = "English" Then
                    WeCoCheckerLight.TableS_General.AddItem "Tables Issues was detected"
                Else
                    WeCoCheckerLight.TableS_General.AddItem "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                End If
                WeCoCheckerLight.T_STAT_X.Visible = True
            End If
            ' WeCoCheckerLight.TableS_General.Font.Bold = True
               
        End If
        
    End With
    With WeCoCheckerLight
        .STTotal.Caption = j
   
        If DocMetaData.DocFormat.Value = "Word" Then
            .STDescr.Caption = Tbldes
            
        Else
            .STDescr.Visible = False
            .Label138.Visible = False
        End If
        .STHead.Caption = TblHead
        .STMerge.Caption = TblMerge
    End With
    Unload Pro_Bar
      Application.ScreenUpdating = True
    '  Application.ScreenUpdating = True
    
End Sub
Sub CountGraphics(n As Long)
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Const sBkMk = "ReturnHere"
    Dim colGraphic As New Collection
   
    Dim lngSections As Long
    Dim lngSectionCounter As Long
    Dim lngMainDocInlineShapes As Long
    Dim lngMainDocShapes As Long
    Dim lngHdrInlineShapes As Long
    Dim lngHdrShapeRange As Long
    Dim lngFtrInlineShapes As Long
    Dim lngFtrShapeRange As Long
    Dim lngTotalInlineShapes As Long
    Dim lngTotalShapes As Long
    Dim sMsgText As String
    Dim k As Integer

    Application.ScreenUpdating = False
   
    'Get the number of sections in the document.
    lngSections = ActiveDocument.Sections.Count

    'Get the number of inline objects and
    'shape objects in the main document
    lngMainDocInlineShapes = ActiveDocument.InlineShapes.Count
    lngMainDocShapes = ActiveDocument.Shapes.Count

    'Insert a bookmark to return to this place in the document.
    ActiveDocument.Bookmarks.Add sBkMk, Selection.Range

    'Go to the first page of the document.
    Selection.HomeKey wdStory, wdMove

    'Cycle through all of the sections in the document
    'looking in headers and footers for graphics
    For lngSectionCounter = 1 To lngSections
        'Go to the header of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageHeader
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngHdrInlineShapes = lngHdrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngHdrShapeRange = lngHdrShapeRange _
            + Selection.Range.ShapeRange.Count

        'Go to the footer of the current page
        ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageFooter
        Selection.WholeStory
        'Get the number of inline objects and shape objects
        lngFtrInlineShapes = lngFtrInlineShapes _
            + Selection.Range.InlineShapes.Count
        lngFtrShapeRange = lngFtrShapeRange _
            + Selection.Range.ShapeRange.Count

        Selection.GoTo wdGoToSection, wdGoToNext
    Next

    'Go to the main body of the document.
    ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument

    'Enable automatic screen updates
    Application.ScreenUpdating = True
    Application.ScreenRefresh

    'Go to the bookmark that was inserted earlier.
    If ActiveDocument.Bookmarks.Exists(sBkMk) Then
        Selection.GoTo wdGoToBookmark, , , sBkMk
        ActiveDocument.Bookmarks(sBkMk).Delete
    Else
        MsgBox "The bookmark '" & sBkMk & "' does not exist."
    End If

    'Calculate the total number of inlineshape objects
    'and (shape and shaperange) objects
    lngTotalInlineShapes = lngMainDocInlineShapes _
        + lngHdrInlineShapes + lngFtrInlineShapes
    lngTotalShapes = lngMainDocShapes _
        + lngHdrShapeRange + lngFtrShapeRange

    'Include the values from the variables into the
    'text of the message
    Dim strShapeName As String
    Dim astory As Range
    Dim ishape As InlineShape
    Dim iCount, hltotal, hlNoDesc, HlOut, Hlin, HLInValidText As Integer
    Dim hl  As Hyperlink
    Dim shp As Shape
    On Error Resume Next
    '
    hltotal = 0
    iCount = 0
    hlNoDesc = 0
    HlOut = 0
    Hlin = 0
    HLInValidText = 0
    For Each astory In ActiveDocument.StoryRanges
        If astory.StoryType <> wdMainTextStory And DocMetaData.DocFormat.Value <> "Word" Then GoTo nextstory
        '  if astory.StoryType <> wdCommentsStory and astory.StoryType <>
        If astory.InlineShapes.Count >= 1 Then
            k = 0
            For Each ishape In astory.InlineShapes
                k = k + 1
                If Trim(ishape.AlternativeText) = "" And Trim(ishape.Title) = "" Then  'And ishape.Decorative = msoFalse Then
                    iCount = iCount + 1
                    Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".InlineShapes( " & k & ")")
                Else
                    If Trim(ishape.Title) <> "" And Trim(ishape.AlternativeText) = "" Then
                        ishape.AlternativeText = ishape.Title
                        ishape.Title = ""
                    Else
                        
                    End If
                        
                End If
               
            Next
        End If
    
        If astory.ShapeRange.Count >= 1 Then
            k = 0
            For Each shp In astory.ShapeRange
                strShapeName = ""
                strShapeName = shp.Name
                k = k + 1
                If InStr(strShapeName, "WordPictureWatermark") = 0 Then
                    If Trim(shp.AlternativeText) = "" And Trim(shp.Title) = "" Then  'And shp.Decorative = msoFalse Then
                        iCount = iCount + 1
                               
                        Call AddToCollection(colGraphic, getstorytype(astory.StoryType) & ".ShapeRange( " & shp.Name & ")")
                 
                    Else
                        If Trim(shp.Title) <> "" And Trim(shp.AlternativeText) = "" Then
                            shp.AlternativeText = shp.Title
                            shp.Title = ""
                        End If
                    End If
                End If
            Next
        End If
        If astory.Hyperlinks.Count >= 1 Then
            For Each hl In astory.Hyperlinks
                hltotal = hltotal + 1
                If Trim(hl.ScreenTip) = "" And hl.Address <> "" Then hlNoDesc = hlNoDesc + 1
                For III = 1 To 10
                    If Trim(hl.TextToDisplay) Like getAdmSetting0("HL_Reject_Text_" & III) And Trim(getAdmSetting0("HL_Reject_Text_" & III)) <> "" Then HLInValidText = HLInValidText + 1
                Next
                If hl.Address <> "" Then HlOut = HlOut + 1
                If hl.Address = "" And hl.SubAddress <> "" Then Hlin = Hlin + 1
            Next
        End If
nextstory:
    Next


    'Display the results of the procedure.
    
    With WeCoCheckerLight
        .Hlin = Hlin
        .HlOut = HlOut
        .HTotal.Caption = hltotal
        .HNoDesc.Caption = hlNoDesc
        .HLInValidText.Caption = HLInValidText
        .SBodyS.Caption = lngMainDocInlineShapes + lngMainDocShapes
        .SHeaderS.Caption = lngHdrInlineShapes + lngHdrShapeRange
        .SFooters.Caption = lngFtrInlineShapes + lngFtrShapeRange
        .STotals.Caption = lngTotalInlineShapes + lngTotalShapes
        .SNoDescT.Caption = iCount
    End With
    If hltotal > 0 Then
        If WeCoCheckerLight.HNoDesc.Caption <> 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.HyperLinks_General.AddItem WeCoCheckerLight.HNoDesc.Caption & " " & "HyperLinks with no ToolTip was detected "
            Else
                WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd||fffd||fffd||fffd| " & WeCoCheckerLight.HNoDesc.Caption & " " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
            End If
            WeCoCheckerLight.HL_STAT_X.Visible = True
        End If
        If WeCoCheckerLight.HLInValidText.Caption <> 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.HyperLinks_General.AddItem WeCoCheckerLight.HLInValidText.Caption & " " & "HyperLinks with invalid Text to display "
            Else
                WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd||fffd||fffd||fffd| " & WeCoCheckerLight.HLInValidText.Caption & " " & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "
            End If
            WeCoCheckerLight.HL_STAT_X.Visible = True
        End If
            
            
    Else
        If hltotal > 0 And WeCoCheckerLight.HLInValidText.Caption = 0 And WeCoCheckerLight.HNoDesc.Caption = 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.HyperLinks_General.AddItem "No HyperLinks Issues was detected"
            Else
                WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            WeCoCheckerLight.HL_STAT_V.Visible = True
            WeCoCheckerLight.HL_STAT_I.Visible = False
            WeCoCheckerLight.HL_STAT_X.Visible = False
            GoTo SETHLREP
        Else
            If hltotal < 1 Then
                If Docaddonproperties.AddinLanguage.Value = "English" Then
                    WeCoCheckerLight.HyperLinks_General.AddItem "The Document does not contains HyperLinks"
                Else
                    WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                End If
            End If
            WeCoCheckerLight.HL_STAT_V.Visible = True
            WeCoCheckerLight.HL_STAT_I.Visible = False
            WeCoCheckerLight.HL_STAT_X.Visible = False
            GoTo SETHLREP
        End If
    End If
        
    If DocMetaData.DocFormat.Value <> "Word" And Report_Check.VAltTextCheck = False Then
        WeCoCheckerLight.HyperLinks_General.Clear
        WeCoCheckerLight.HL_STAT_V.Visible = False
        WeCoCheckerLight.HL_STAT_X.Visible = False
        WeCoCheckerLight.HL_STAT_I.Visible = True
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HyperLinks_General.AddItem "HyperLinks did not tested"
        Else
            WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.HL_STAT_V.Visible = False
        WeCoCheckerLight.HL_STAT_X.Visible = False
        WeCoCheckerLight.HL_STAT_I.Visible = True
        GoTo SETHLREP
    End If
        
    ''''
    If hltotal > 0 And WeCoCheckerLight.HLInValidText.Caption = 0 And WeCoCheckerLight.HNoDesc.Caption = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HyperLinks_General.AddItem "No HyperLinks Issues was detected"
        Else
            WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.HL_STAT_V.Visible = True
    Else
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.HyperLinks_General.AddItem "The Document does not contains HyperLinks"
        Else
            WeCoCheckerLight.HyperLinks_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    WeCoCheckerLight.HL_STAT_V.Visible = True
    WeCoCheckerLight.HL_STAT_X.Visible = False
    WeCoCheckerLight.HL_STAT_I.Visible = False
       
       
    ''''
SETHLREP:
        
        
        
        
        
    If iCount <> 0 And Val(WeCoCheckerLight.STotals.Caption) > 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.AltText_General.AddItem iCount & " " & "Graphic Elements with no missing Alt Text"
        Else
            WeCoCheckerLight.AltText_General.AddItem "|fffd||fffd||fffd||fffd||fffd| " & iCount & " " & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.G_STAT_X.Visible = True
    Else
        If Val(WeCoCheckerLight.STotals.Caption) > 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.AltText_General.AddItem "No Alt Text Issues was detected"
            Else
                WeCoCheckerLight.AltText_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
        Else
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                WeCoCheckerLight.AltText_General.AddItem "The Document does not contain any graphic Elements"
            Else
                WeCoCheckerLight.AltText_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
        End If
        WeCoCheckerLight.G_STAT_V.Visible = True
           
    End If
    
    
   
    For k = 1 To colGraphic.Count
        WeCoCheckerLight.lbGraphic.AddItem colGraphic(k)
        WeCoCheckerLight.lbGraphiccount.AddItem k
    Next k
End Sub
Function GetParNum(r As Range) As Integer
    Dim rParagraphs As Range
    Dim CurPos As Long
     
    r.Select
    CurPos = ActiveDocument.Bookmarks("\startOfSel").start
    Set rParagraphs = ActiveDocument.Range(start:=0, End:=CurPos)
    GetParNum = rParagraphs.Paragraphs.Count
End Function
Function GetAbsoluteLineNum(r As Range) As Integer
    Dim I1 As Integer, I2 As Integer, Count As Integer, rTemp As Range
     
    r.Select
    Do
        I1 = Selection.Information(wdFirstCharacterLineNumber)
        Selection.GoTo What:=wdGoToLine, Which:=wdGoToPrevious, Count:=1, Name:=""
         
        Count = Count + 1
        I2 = Selection.Information(wdFirstCharacterLineNumber)
    Loop Until I1 = I2
     
    r.Select
    GetAbsoluteLineNum = Count
End Function
Public Sub docManLsit(n As Long)
 
    
    ''''''''
    
    On Error Resume Next
    Application.ScreenUpdating = False
    On Error Resume Next
    Application.ScreenUpdating = False
   
    Dim Headingstr As String
    Dim k, iRow, iCol As Integer
    Dim colHeadingm As New Collection
    
    '  Dim para As Paragraph
    Dim rng As Range
  
    Dim SS(9) As String

    SS(0) = "^13?[" & Chr(46) & "]"
    SS(1) = "^13??[" & Chr(46) & "]"
    SS(2) = "^13???[" & Chr(46) & "]"
    SS(3) = "^13[" & Chr(45) & "]"
    SS(4) = "^13[" & Chr(42) & "]"
    SS(5) = "^13[" & Chr(42) & "]" & "[" & Chr(42) & "]"
    SS(6) = "^13[" & Chr(42) & "]" & "[" & Chr(42) & "]" & "[" & Chr(42) & "]"
    SS(7) = "^13[" & Chr(40) & "]"
    SS(8) = "^13[" & Chr(41) & "]"

    Dim oRng As Object
    Dim bStarted As Boolean
    Dim I, II, pn As Integer
    Dim para As Range

    On Error Resume Next


    With WeCoCheckerLight
        .ManList.Clear
    End With
    Unload Pro_Bar
    Pro_Bar.Show vbModeless
    Pro_Bar.Caption = "Document Manual list & Numbering Evaluating..."
    Pro_Bar.Label1.Caption = 10 & "% Completed"
    FractionComplete (0.05)
    DoEvents
    II = UBound(SS, 1) ' - LBound(SS, 1) + 1
    
    For I = 0 To II - 1 'UBound(SS, 1) - LBound(SS, 1) + 1
    
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        FractionComplete (0.05 + 0.95 * (I / II))
        For Each oRng In ActiveDocument.StoryRanges
            With oRng.Find
                .MatchWildcards = True
                Do While .Execute(FindText:=SS(I))
                    oRng.Select
                    pn = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
                    ActiveDocument.Paragraphs(pn).Range.Select
                    Set para = Selection.Range
                    para.Select
                    If Not para.Information(wdWithInTable) Then  'And para.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
                        Headingstr = Mid(ActiveDocument.Paragraphs(pn).Range.Text, 1, 50) & " (@" & pn & ")"
                        Call AddToCollection(colHeadingm, Headingstr)
                    End If
                    ' MsgBox pn
                    ' oRng.Collapse 0
               
                Loop
            End With
           
            If oRng.StoryType <> wdMainTextStory Then
                While Not (oRng.NextStoryRange Is Nothing)
                    Set oRng = oRng.NextStoryRange
                    With oRng.Find
                        .MatchWildcards = True
                        Do While .Execute(FindText:=SS(I))
                            oRng.Select
                            pn = ActiveDocument.Range(0, Selection.End).Paragraphs.Count
                            ActiveDocument.Paragraphs(pn).Range.Select
                            Set para = Selection.Range
                            para.Select
                            If Not para.Information(wdWithInTable) Then 'And para.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
                                Headingstr = Mid(ActiveDocument.Paragraphs(pn).Range.Text, 1, 50) & " (@" & pn & ")"
                                Call AddToCollection(colHeadingm, Headingstr)
                            End If
                            ' MsgBox pn
              
                            ' oRng.Collapse 0
               
                        Loop
                    End With
                Wend
            End If
        Next oRng
       
    Next I
   
    For k = 1 To colHeadingm.Count
        WeCoCheckerLight.ManList.AddItem colHeadingm(k)
    Next k
    If colHeadingm.Count = 0 Then
     If Docaddonproperties.AddinLanguage.Value = "English" Then
     WeCoCheckerLight.ManList_General.AddItem "Manual Lists was not detected"
     Else
        WeCoCheckerLight.ManList_General.AddItem "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.ML_STAT_V.Visible = True
    Else
         If Docaddonproperties.AddinLanguage.Value = "English" Then
         WeCoCheckerLight.ManList_General.AddItem "Manual Lists was detected"
         Else
        WeCoCheckerLight.ManList_General.AddItem " |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        WeCoCheckerLight.ML_STAT_I.Visible = True
    End If
    Set oRng = Nothing
    ' Set SS = Nothing
    Unload Pro_Bar
    Application.ScreenUpdating = True
End Sub
Sub FindLineSpace(n As Long)
Dim I As Integer
Dim mm As Variant
WeCoCheckerLight.LineSpaceS.Visible = False
WeCoCheckerLight.LineSpaceSNext.Visible = True
Dim oRng As Word.Range
  If Docaddonproperties.AddinLanguage.Value = "English" Then
               WeCoCheckerLight.LineSpace.Caption = "No"
               Else
               WeCoCheckerLight.LineSpace.Caption = "|fffd||fffd|"
               End If
                WeCoCheckerLight.LineSpaceS.Visible = True
    Set oRng = ActiveDocument.Content
    ' WeCoChecker.FontItalic.Caption = "|fffd||fffd|"
    mm = LinesToPoints(Docaddonproperties.minLineSpaceVal)
    For I = mm - 1 To 1 Step -1
   '
    With oRng.Find
        ' to ensure that unwanted formats aren't included as criteria
        .ClearFormatting
        'You don't care what the text is
        .Text = ""
        'Find the italic text
        .ParagraphFormat.LineSpacing = I
        
        'Loop for each match and set a color
        While .Execute
          '  oRng.HighlightColorIndex = wdDarkYellow
         '   oRng.Collapse wdCollapseEnd
             oRng.Select
           
             Application.ScreenUpdating = True
              oRng.Select
               If Docaddonproperties.AddinLanguage.Value = "English" Then
               WeCoCheckerLight.LineSpace.Caption = "Yes"
               Else
               WeCoCheckerLight.LineSpace.Caption = "|fffd||fffd|"
               End If
               WeCoCheckerLight.LineSpaceS.Visible = True
               Exit Sub
NXT1:
       '  MsgBox oRng.Text
        Wend
    End With
    Next I
   
End Sub
Sub fontminsizec(m As Variant)
Dim mm As Variant

mm = Val(m) * 1
If mm = (Docaddonproperties.BodyMinFontVal.Value) Then Exit Sub
Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
    With oRng.Find
       
        .ClearFormatting
    
        .Text = ""
       
        .Font.Size = m
     
        While .Execute
        
             
             oRng.Select
             If Selection.Range.Paragraphs.Count = ActiveDocument.Paragraphs.Count Then GoTo NXT2
        
             Application.ScreenUpdating = True
             oRng.Select
             
            
              WeCoCheckerLight.FontSizeSState.Caption = "1"
              Do Until WeCoCheckerLight.FontSizeSState.Caption = "0"
            
               DoEvents
               Loop
NXT1:
        Wend

    End With
NXT2:
    Set oRng = Nothing
End Sub
Sub FindUderLine(n As Long)
    Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
      If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.FontUnderline.Caption = "No"
            Else
            WeCoCheckerLight.FontUnderline.Caption = "|fffd||fffd|"
            End If
            Exit Sub
    With oRng.Find
        ' to ensure that unwanted formats aren't included as criteria
        .ClearFormatting
        'You don't care what the text is
        .Text = ""
        'Find the italic text
        .Font.Underline = True
        'Loop for each match and set a color
        While .Execute
          '  oRng.HighlightColorIndex = wdDarkYellow
         '   oRng.Collapse wdCollapseEnd
           '  oRng.Select
           If oRng.Hyperlinks.Count = 0 Then
            If Docaddonproperties.AddinLanguage.Value = "English" Then
            WeCoCheckerLight.FontUnderline.Caption = "Yes"
            Else
            WeCoCheckerLight.FontUnderline.Caption = "|fffd||fffd|"
            End If
            Exit Sub
            End If
       '  MsgBox oRng.Text
        Wend
    End With
End Sub
Sub FindItalic(n As Long)
    Dim oRng As Word.Range
    Set oRng = ActiveDocument.Content
     If Docaddonproperties.AddinLanguage.Value = "English" Then
              WeCoCheckerLight.FontItalic.Caption = "No"
              Else
            WeCoCheckerLight.FontItalic.Caption = "|fffd||fffd|"
            End If
    With oRng.Find
        ' to ensure that unwanted formats aren't included as criteria
        .ClearFormatting
        'You don't care what the text is
        .Text = ""
        'Find the italic text
        .Font.Italic = True
        'Loop for each match and set a color
        While .Execute
          '  oRng.HighlightColorIndex = wdDarkYellow
         '   oRng.Collapse wdCollapseEnd
           '  oRng.Select
              If Docaddonproperties.AddinLanguage.Value = "English" Then
              WeCoCheckerLight.FontItalic.Caption = "Yes"
              Else
            WeCoCheckerLight.FontItalic.Caption = "|fffd||fffd|"
            End If
            Exit Sub
       '  MsgBox oRng.Text
        Wend
    End With
End Sub
Attribute VB_Name = "config"

Public Function getAdmSetting(sSetting As String) As String
    'open settings .txt file
    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "weco.txt"
    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
 
        sField = Split(sLineString, ",")
        
       
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSetting = sField(1)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSetting = "NA"
    End If

ExitMe:

End Function
Public Function getAdmSetting0(sSetting As String) As String
 
    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"

    
    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
  
        sField = Split(sLineString, ",")
        
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSetting0 = sField(1)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSetting0 = "NA"
    End If

ExitMe:

End Function
Public Function getAdmSetting1(sSetting As String) As String

    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"
  
    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
     
        sField = Split(sLineString, ",")
        
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSetting1 = sField(2)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSetting1 = "NA"
    End If

ExitMe:

End Function
Public Function getAdmSetting2(sSetting As String) As String
 
    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"

    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
  
        sField = Split(sLineString, ",")
        
   
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSetting2 = sField(3)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSetting2 = "NA"
    End If

ExitMe:

End Function
Public Function getAdmSmartReplaceSetting0(sSetting As String) As String

    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "SmartReplace.txt"
    
 
    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
   
        sField = Split(sLineString, ",")
  
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSmartReplaceSetting0 = sField(1)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSmartReplaceSetting0 = "NA"
    End If

ExitMe:

End Function
Public Function getAdmSmartReplaceSetting1(sSetting As String) As String
 
    Dim bFoundIt As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim sLineString As String
    Dim sField() As String
    Dim TextFile As Integer
     sDir = Application.StartupPath & "\"
    sFile = "SmartReplace.txt"
  
    TextFile = FreeFile
    Open sDir & sFile For Input As #TextFile

    Do Until EOF(1)
        Line Input #TextFile, sLineString
   
        sField = Split(sLineString, ",")
      
        If sField(0) = sSetting Then
            bFoundIt = True
            getAdmSmartReplaceSetting1 = sField(2)
        End If
        
    Loop

    Close #TextFile


    If Not bFoundIt Then
       getAdmSmartReplaceSetting1 = "NA"
    End If

ExitMe:

End Function
Sub getcheck(X As Long)
Dim m, s As String

MsgBox getAdmSetting("minLineSpaceVal")

End Sub
Sub setcheck(X As Long)
Dim m, s As String

Call updateSetting("BodyMinFontVal", "15")
MsgBox getAdmSetting("BodyMinFontVal")
End Sub

Public Sub updateSetting(sSetting As String, setAdmSetting As String)
    'open settings .txt file
    Dim bFoundIt, check As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "weco.txt"
    r = sSetting & "," & setAdmSetting
    If getAdmSetting(sSetting) = "NA" Then
    check = False
    rl = Trim(sSetting & "," & setAdmSetting)
    Else
    check = True
    rl = Trim(sSetting & "," & getAdmSetting(sSetting))
    End If
 ''''''
 Dim TextFile As Integer
Dim FilePath As String
Dim FileContent As String

'File Path of Text File
  FilePath = sDir & sFile

'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Read State
  Open FilePath For Input As #TextFile

'Store file content inside a variable
  FileContent = Input(LOF(TextFile), TextFile)

'Clost Text File
  Close TextFile
  
'Find/Replace
  If check = False Then
  FileContent = FileContent & vbNewLine & rl
  Else
  FileContent = Replace(FileContent, rl, r)
 End If
'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Write State
  Open FilePath For Output As TextFile
  
'Write New Text data to file
  Print #TextFile, Trim(FileContent)

'Close Text File
  Close TextFile
  Call clearconfigfromemptyline(1)
End Sub
Public Sub updateHLSetting(sSettingNAME As String, sSetting As String, setAdmSetting1 As String, setAdmSetting2 As String)
  Dim bFoundIt, check As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"
    Call clearconfigfromemptylineHL(1)
    r = sSettingNAME & "," & sSetting & "," & setAdmSetting1 & "," & setAdmSetting2
    If getAdmSetting0(sSettingNAME) = "NA" Then
    check = False
 
    rl = Trim(sSettingNAME & "," & sSetting & "," & setAdmSetting1 & "," & setAdmSetting2)
     
    Else
    check = True
    
    rl = Trim(sSettingNAME & "," & getAdmSetting0(sSettingNAME) & "," & getAdmSetting1(sSettingNAME) & "," & getAdmSetting2(sSettingNAME))
    End If
  
 ''''''
 Dim TextFile As Integer
Dim FilePath As String
Dim FileContent As String

'File Path of Text File
  FilePath = sDir & sFile

'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Read State
  Open FilePath For Input As #TextFile

'Store file content inside a variable
  FileContent = Input(LOF(TextFile), TextFile)

'Clost Text File
  Close TextFile
  
'Find/Replace
  If check = False Then
  FileContent = FileContent & vbNewLine & rl & vbNewLine
  Else
  FileContent = Replace(FileContent, rl, r)
 End If
'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Write State
  Open FilePath For Output As TextFile
  
'Write New Text data to file
  Print #TextFile, Trim(FileContent)

'Close Text File
  Close TextFile
  Call clearconfigfromemptylineHL(1)
End Sub
Public Sub updateSmartreplaceSetting(sSettingNAME As String, sSetting As String, setAdmSetting1 As String)
  Dim bFoundIt, check As Boolean
    
    Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "SmartReplace.txt"
    Call clearSmartReplacefromemptyline(1)
    r = sSettingNAME & "," & sSetting & "," & setAdmSetting1
    If getAdmSmartReplaceSetting0(sSettingNAME) = "NA" Then
    check = False
 
    rl = Trim(sSettingNAME & "," & sSetting & "," & setAdmSetting1 & " ")
     
    Else
    check = True
    
    rl = Trim(sSettingNAME & "," & getAdmSmartReplaceSetting0(sSettingNAME) & "," & getAdmSmartReplaceSetting1(sSettingNAME) & " ")
    End If
  
 ''''''
 Dim TextFile As Integer
Dim FilePath As String
Dim FileContent As String

'File Path of Text File
  FilePath = sDir & sFile

'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Read State
  Open FilePath For Input As #TextFile

'Store file content inside a variable
  FileContent = Input(LOF(TextFile), TextFile)

'Clost Text File
  Close TextFile
  
'Find/Replace
  If check = False Then
  FileContent = FileContent & vbNewLine & rl & vbNewLine
  Else
  FileContent = Replace(FileContent, rl, r)
 End If
'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file in a Write State
  Open FilePath For Output As TextFile
  
'Write New Text data to file
  Print #TextFile, Trim(FileContent)

'Close Text File
  Close TextFile
  Call clearSmartReplacefromemptyline(1)
End Sub
Sub clearconfigfromemptyline(X As Long)
   Dim inFile As String
   Dim outFile As String
   Dim Data As String
     Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "weco.txt"
   inFile = sDir & sFile
   Open inFile For Input As #1

   outFile = inFile & ".alt"
   Open outFile For Output As #2

   Do Until EOF(1)
      Line Input #1, Data

      If Trim(Data) <> "" Then
         Print #2, Data
      End If
   Loop

   Close #1
   Close #2

   Kill inFile
   Name outFile As inFile

  
End Sub
'
Sub clearSmartReplacefromemptyline(X As Long)
   Dim inFile As String
   Dim outFile As String
   Dim Data As String
     Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "SmartReplace.txt"
   inFile = sDir & sFile
   Open inFile For Input As #1

   outFile = inFile & ".alt"
   Open outFile For Output As #2

   Do Until EOF(1)
      Line Input #1, Data

      If Trim(Data) <> "" Then
         Print #2, Data
      End If
   Loop

   Close #1
   Close #2

   Kill inFile
   Name outFile As inFile

  
End Sub
Sub clearconfigfromemptylineHL(X As Long)
   Dim inFile As String
   Dim outFile As String
   Dim Data As String
     Dim sDir As String
    Dim sFile As String
    Dim r, rl As String
    
    sDir = Application.StartupPath & "\"
    sFile = "wecoHyperLinksBR.txt"
   inFile = sDir & sFile
   Open inFile For Input As #1

   outFile = inFile & ".alt"
   Open outFile For Output As #2

   Do Until EOF(1)
      Line Input #1, Data

      If Trim(Data) <> "" Then
         Print #2, Data
      End If
   Loop

   Close #1
   Close #2

   Kill inFile
   Name outFile As inFile

  
End Sub

Attribute VB_Name = "docfinish"
Attribute VB_Base = "0{FFED511A-C924-4B5B-A5B9-7BA48FC3F72B}{68C1C722-4946-49B2-839B-CD5567464E60}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
 
Private Sub CommandButton1_Click()
    '
    docfinish.pauses.Value = "0"
    Me.Hide
    Unload Me
    If Docaddonproperties.savebystep = True Then ActiveDocument.Save
End Sub

Private Sub CommandButton3_Click()
    '    docfinish.pauses.Value = "0"
    Me.Hide
    Unload Me
End Sub

Private Sub CommandButton4_Click()
  
    
    If checkGRHL(1) = True Then
        Me.Hide
        Unload Me
        Unload DocShapes
        DocShapes.Show vbModeless
        ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
        DocShapes.Show vbModeless
    Else
        If ActiveDocument.TableS.Count > 0 Then
            Me.Hide
            Unload Me
            DocTables.Show vbModeless

            ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        Else
            Me.Hide
            Unload Me
            DocHeading.Show vbModeless
            ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
        End If
   
    End If
End Sub



Private Sub CommandButton5_Click()
    Me.Hide
    Application.DisplayDocumentInformationPanel = True

End Sub

Private Sub CommandButton6_Click()
    Me.Hide
 
    On Error Resume Next
    If Application.Documents.Count < 1 Then
        Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please save the document before generating the PDF"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| PDF"
        End If
        MASSAGE_BOX.Show
 
        Exit Sub
    End If
    
    Call Word_ExportPDF(1)
End Sub

Private Sub CommandButton6_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    docfinish.pauses.Value = "0"
End Sub

Private Sub CommandButton7_Click()
    Me.Hide
    Call Word_ExportDOC(1)
End Sub



Private Sub ToggleButton1_Click()
    DoEvents
End Sub

Private Sub CommandButton8_Click()
    Me.Hide
    On Error Resume Next
    If Application.Documents.Count < 1 Then
        Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please save the document before generating the PDF"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| PDF"
        End If
        MASSAGE_BOX.Show
   
        Exit Sub
    End If
    
    Call Word_ExportPDF(1)
    Call Word_ExportDOC(1)
    
End Sub


Public Sub UserForm_Initialize()
    
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    If Docaddonproperties.AddinLanguage.Value = "English" Then
    Label22.Caption = "Accessibilty Final stage "
    Frame1.Caption = "Guidlines"
     
     CommandButton6.Caption = "Generate Accessible PDF File"
      CommandButton7.Caption = "Generate Accessible Word File"
      Label20.Caption = "The accessibility process is complete. Please Run the Microsoft accessibility checker or WeCo validation report and generate the  the documentin the requested format"
      Label20.TextAlign = fmTextAlignLeft
        CommandButton8.Caption = "Generate Both Accessible Word & PDF Files"
        Label19.Caption = "Progress bar"
        CommandButton1.Caption = "Finish"
        CommandButton4.Caption = "Previous"
        CommandButton3.Caption = "Cancel"
    Else
    'Label22.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
    'Frame1.Caption = -"|fffd||fffd||fffd||fffd||fffd||fffd|"
    
    'Label20.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Word |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| WeCo |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    'Label20.TextAlign = fmTextAlignRight
    '  CommandButton6.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd|"
    '    CommandButton7.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| WORD |fffd||fffd||fffd||fffd|"
    '    CommandButton8.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Word |fffd||fffd||fffd||fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd||fffd|"
    '     Label19.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    '      CommandButton1.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    '      CommandButton4.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    '      CommandButton3.Caption = "|fffd||fffd||fffd||fffd||fffd|"
    End If
    Me.pauses.Value = "0"
End Sub

Public Function checkGRHL(n As Integer) As Boolean
    Dim astory As Range
    checkGRHL = False
    For Each astory In ActiveDocument.StoryRanges
     
            If astory.InlineShapes.Count > 0 Then checkGRHL = True
            If astory.ShapeRange.Count > 0 Then checkGRHL = True
             If astory.Hyperlinks.Count > 0 Then checkGRHL = True
    Next
End Function
Attribute VB_Name = "eventsModule"


Dim X As New EventClassModule
Sub Register_Event_Handler(control As IRibbonControl)
On Error Resume Next
  Set X.App = Word.Application
   ActiveWindow.DocumentMap = True
   
Err.Clear
End Sub

Sub Register_Event_Handler2(n As Long)
On Error Resume Next
 If getAdmSetting("HStatus") = "True" Then

  Set X.App = Word.Application
  End If
 '  ActiveWindow.DocumentMap = True
Err.Clear
End Sub

Attribute VB_Name = "formModule"
Sub HeadingTagger(control As IRibbonControl)
On Error Resume Next

  If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim Doc As Document
    Dim para As Paragraph
    Dim r, k, kk As Integer
    Set Doc = ActiveDocument
    Application.ScreenUpdating = False
     Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05)
    'HeadingDesign.Show vbModeless
    For k = 1 To Doc.Paragraphs.Count
         Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05 + 0.95 * k / Doc.Paragraphs.Count)
        Set para = Doc.Paragraphs(k)
           If Left(para.Format.Style.NameLocal, 3) = "TOC" Then GoTo NXT1
    
                If para.Range.Information(wdWithInTable) Then GoTo NXT1
        If (para.Range.Font.Name = HeadingDesign.H1_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H1_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H1_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H1_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H1_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H1_FONT_Italic.Value) Then
        para.Range.Select
        Call HH1
        GoTo NXT1
        End If
        
          If (para.Range.Font.Name = HeadingDesign.H2_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H2_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H2_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H2_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H2_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H2_FONT_Italic.Value) Then
        para.Range.Select
        Call HH2
        GoTo NXT1
        End If
        
          If (para.Range.Font.Name = HeadingDesign.H3_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H3_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H3_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H3_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H3_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H3_FONT_Italic.Value) Then
        para.Range.Select
        Call HH3
        GoTo NXT1
        End If
        
          If (para.Range.Font.Name = HeadingDesign.H4_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H4_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H4_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H4_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H4_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H4_FONT_Italic.Value) Then
        para.Range.Select
        Call HH4
        GoTo NXT1
        End If
        
          If (para.Range.Font.Name = HeadingDesign.H5_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H5_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H5_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H5_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H5_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H5_FONT_Italic.Value) Then
        para.Range.Select
        Call HH5
        GoTo NXT1
        End If
          If (para.Range.Font.Name = HeadingDesign.H6_FONT_NAME.Value Or para.Range.Font.NameBi = HeadingDesign.H6_FONTBi_NAME.Value) And (para.Range.Font.Size = HeadingDesign.H6_FONT_Size.Value) And (para.Range.Font.Bold = HeadingDesign.H6_FONT_Bold.Value) And (para.Range.Font.Underline = Trim(HeadingDesign.H6_FONT_Underline_style_value.Value)) And (para.Range.Font.Italic = HeadingDesign.H6_FONT_Italic.Value) Then
        para.Range.Select
        Call HH6
        GoTo NXT1
        End If
         para.Range.Select
         HHXList (1)
NXT1:
    Next k
    Unload Pro_Bar
    ActiveDocument.Paragraphs(1).Range.Select
    Application.ScreenUpdating = True
End Sub
Sub HeadDesign(control As IRibbonControl)
On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim Doc As Document
    Dim para As Paragraph
    Dim r, k, kk As Integer
    Set Doc = ActiveDocument
    Application.ScreenUpdating = False
     Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05)
    'HeadingDesign.Show vbModeless
    For k = 1 To Doc.Paragraphs.Count
         Pro_Bar.Caption = "WeCo - Headings Format Design proccessing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05 + 0.95 * k / Doc.Paragraphs.Count)
        Set para = Doc.Paragraphs(k)
        para.Range.Select
        Select Case para.Range.ParagraphFormat.OutlineLevel
            Case "1"
              If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H1_FONT_Size.Value
                .SizeBi = HeadingDesign.H1_FONTBi_Size.Value
                .Name = HeadingDesign.H1_FONT_NAME.Value
                .NameBi = HeadingDesign.H1_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H1_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
             
                .Bold = HeadingDesign.H1_FONT_Bold.Value
                .BoldBi = HeadingDesign.H1_FONT_Bold.Value
                .Italic = HeadingDesign.H1_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H1_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H1_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H1_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H1_FONT_Linespace
            End With
        End If
            Case "2"
                If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H2_FONT_Size.Value
                .SizeBi = HeadingDesign.H2_FONTBi_Size.Value
                .Name = HeadingDesign.H2_FONT_NAME.Value
                .NameBi = HeadingDesign.H2_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H2_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
         
                .Bold = HeadingDesign.H2_FONT_Bold.Value
                .BoldBi = HeadingDesign.H2_FONT_Bold.Value
                .Italic = HeadingDesign.H2_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H2_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H2_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H2_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H2_FONT_Linespace
            End With
        End If
            Case "3"
              If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H3_FONT_Size.Value
                .SizeBi = HeadingDesign.H3_FONTBi_Size.Value
                .Name = HeadingDesign.H3_FONT_NAME.Value
                .NameBi = HeadingDesign.H3_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H3_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
            
                .Bold = HeadingDesign.H3_FONT_Bold.Value
                .BoldBi = HeadingDesign.H3_FONT_Bold.Value
                .Italic = HeadingDesign.H3_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H3_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H3_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H3_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H3_FONT_Linespace
            End With
        End If
            Case "4"
              If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H4_FONT_Size.Value
                .SizeBi = HeadingDesign.H4_FONTBi_Size.Value
                .Name = HeadingDesign.H4_FONT_NAME.Value
                .NameBi = HeadingDesign.H4_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H4_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
          
                .Bold = HeadingDesign.H4_FONT_Bold.Value
                .BoldBi = HeadingDesign.H4_FONT_Bold.Value
                .Italic = HeadingDesign.H4_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H4_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H4_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H4_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H4_FONT_Linespace
            End With
        End If
            Case "5"
             If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H5_FONT_Size.Value
                .SizeBi = HeadingDesign.H5_FONTBi_Size.Value
                .Name = HeadingDesign.H5_FONT_NAME.Value
                .NameBi = HeadingDesign.H5_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H5_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
           
                .Bold = HeadingDesign.H5_FONT_Bold.Value
                .BoldBi = HeadingDesign.H5_FONT_Bold.Value
                .Italic = HeadingDesign.H5_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H5_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H5_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H5_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H5_FONT_Linespace
            End With
        End If
            Case "6"
                If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H6_FONT_Size.Value
                .SizeBi = HeadingDesign.H6_FONTBi_Size.Value
                .Name = HeadingDesign.H6_FONT_NAME.Value
                .NameBi = HeadingDesign.H6_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H6_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
      
                .Bold = HeadingDesign.H6_FONT_Bold.Value
                .BoldBi = HeadingDesign.H6_FONT_Bold.Value
                .Italic = HeadingDesign.H6_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H6_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                  .SpaceBefore = HeadingDesign.H6_FONT_Space_before.Value
                 .SpaceBeforeAuto = False
                 .SpaceAfter = HeadingDesign.H6_FONT_Space_After.Value
                 .SpaceAfterAuto = False
                 .LineSpacing = HeadingDesign.H6_FONT_Linespace
            End With
        End If
            
        End Select
    Next k
    Unload Pro_Bar
    ActiveDocument.Paragraphs(1).Range.Select
    Application.ScreenUpdating = True
End Sub
Sub Valid_Rep(control As IRibbonControl)
On Error Resume Next
Report_Check.Show vbModeless
End Sub
Sub P2L(control As IRibbonControl)
    On Error Resume Next '''
    Dim I, j, TCCHECK As Integer
  
    Application.ScreenUpdating = False
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
  
    If ActiveDocument.Range(0, Selection.start).Paragraphs.Count = 1 Then j = 1 Else j = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1
     For I = ActiveDocument.Range(0, Selection.End).Paragraphs.Count - 1 To j Step -1
    
      ActiveDocument.Paragraphs(I).Range.Select
  
         With Selection
            Selection.EndKey Unit:=wdLine
    Selection.Delete Unit:=wdCharacter, Count:=1
    Selection.TypeText Text:=Chr(11)
   
         End With
   
     
       
    Next I
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
     Application.ScreenUpdating = True
End Sub
Sub L2P(control As IRibbonControl)
    On Error Resume Next '''
    Dim I, j, r, TCCHECK As Integer
    Dim IND As Single
    Application.ScreenUpdating = False
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim arr() As Variant
    Dim k As Byte
    If Selection.Paragraphs(1).Range.ComputeStatistics(wdStatisticLines) > 1 And Asc(Right(Selection.Bookmarks("\Line").Range.Text, 1)) = 11 Then
        If IsNumberedPara(Selection.Range) Then
            j = ActiveDocument.Range(0, Selection.Paragraphs(1).Range.End).Paragraphs.Count
            IND = (Selection.ParagraphFormat.LeftIndent)
        
            Selection.Find.ClearFormatting
            Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
            arr = Array("^l") ' "^m", "^n")
            For k = LBound(arr) To UBound(arr)
                r = 0
                With Selection.Find
                    .ClearFormatting
                    .Text = arr(k)
                    .Replacement.Text = "^p"
                End With
              
            Next
            Selection.Find.Execute Replace:=wdReplaceOne 'wdReplaceOne
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Selection.Range.ListFormat.RemoveNumbers 'wdNumberListNum
            ActiveDocument.Paragraphs(j + 1).Range.ParagraphFormat.LeftIndent = IND
      
        Else
           
         j = ActiveDocument.Range(0, Selection.Paragraphs(1).Range.End).Paragraphs.Count
            IND = (Selection.ParagraphFormat.LeftIndent)
        
            Selection.Find.ClearFormatting
            Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
            arr = Array("^l") ' "^m", "^n")
            For k = LBound(arr) To UBound(arr)
                r = 0
                With Selection.Find
                    .ClearFormatting
                    .Text = arr(k)
                    .Replacement.Text = "^p"
                End With
              
            Next
            Selection.Find.Execute Replace:=wdReplaceOne 'wdReplaceOne
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Selection.Range.ListFormat.RemoveNumbers 'wdNumberListNum
            ActiveDocument.Paragraphs(j + 1).Range.ParagraphFormat.LeftIndent = IND
         
        End If
        
        ActiveDocument.Paragraphs(j).Range.Select
    End If
     
End Sub
Sub L2P2(h As Integer)
    On Error Resume Next '''
    Dim I, j, r, TCCHECK As Integer
    Dim IND As Single
    Application.ScreenUpdating = False
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim arr() As Variant
    Dim k As Byte
    If Selection.Paragraphs(1).Range.ComputeStatistics(wdStatisticLines) > 1 And Asc(Right(Selection.Bookmarks("\Line").Range.Text, 1)) = 11 Then
        If IsNumberedPara(Selection.Range) Then
            j = ActiveDocument.Range(0, Selection.Paragraphs(1).Range.End).Paragraphs.Count
            IND = (Selection.ParagraphFormat.LeftIndent)
        
            Selection.Find.ClearFormatting
            Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
            arr = Array("^l") ' "^m", "^n")
            For k = LBound(arr) To UBound(arr)
                r = 0
                With Selection.Find
                    .ClearFormatting
                    .Text = arr(k)
                    .Replacement.Text = "^p"
                End With
              
            Next
            Selection.Find.Execute Replace:=wdReplaceOne 'wdReplaceOne
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Selection.Range.ListFormat.RemoveNumbers 'wdNumberListNum
            ActiveDocument.Paragraphs(j + 1).Range.ParagraphFormat.LeftIndent = IND
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Call HHXList(1)
            '   Selection.Find.ClearFormatting
            '   Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
        Else
           
         j = ActiveDocument.Range(0, Selection.Paragraphs(1).Range.End).Paragraphs.Count
            IND = (Selection.ParagraphFormat.LeftIndent)
        
            Selection.Find.ClearFormatting
            Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
            arr = Array("^l") ' "^m", "^n")
            For k = LBound(arr) To UBound(arr)
                r = 0
                With Selection.Find
                    .ClearFormatting
                    .Text = arr(k)
                    .Replacement.Text = "^p"
                End With
              
            Next
            Selection.Find.Execute Replace:=wdReplaceOne 'wdReplaceOne
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Selection.Range.ListFormat.RemoveNumbers 'wdNumberListNum
            ActiveDocument.Paragraphs(j + 1).Range.ParagraphFormat.LeftIndent = IND
            ActiveDocument.Paragraphs(j + 1).Range.Select
            Call HHXList(1)
            '   Selection.Find.ClearFormatting
            '   Selection.Find.Replacement.ClearFormatting
            '"^b" - Selection Breaks, "^m" - Page Break, "^n" - Column Break
        End If
        
        ActiveDocument.Paragraphs(j).Range.Select
    End If
     ActiveDocument.Paragraphs(j).Range.Select
     Dim para As Range
Set para = Selection.Range

para.Select

 Select Case para.ParagraphFormat.OutlineLevel
    Case "1"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 1"
    Case "2"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 2"
    Case "3"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 3"
    Case "4"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 4"
    Case "5"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 5"
    Case "6"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 6"
    Case "7"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 7"
    Case "8"
     DocHeading.OriginalHLevel.Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 8"
    Case "10"
    DocHeading.OriginalHLevel.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    End Select
End Sub
Private Sub ChgParagraphsToLineBreaks(ByVal Item As Object)
    Dim strBody As String
    strBody = Item.Body
    strBody = Replace(strBody, "^p", "^l")
    Item.Body = strBody
End Sub
Public Sub docPropertiesForm(X As Long)
    Application.ScreenUpdating = False
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    'Application.Templates.LoadBuildingBlocks
    Unload DocMetaData
    
    If ActiveDocument.Name <> "*docx" Then ActiveDocument.Convert
NXT:
    ActiveDocument.Save
    If ActiveDocument.Saved = False Then
     Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "The Current Document was not saved, Please save it before you continue"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show

       If m = 2 Then
       Exit Sub
       Else
        GoTo NXT
        End If
    End If
    
    Unload DocMetaData
    DocMetaData.Show vbModeless
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
End Sub

Public Sub docHeadingsForm(control As IRibbonControl)
On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
   If ActiveDocument.Name <> "*docx" Then
    'If Docaddonproperties.DocFormat.Value = "Word" Then
        ActiveDocument.Convert
    
   ' End If
   End If

    DocHeading.Show vbModeless
    ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & Chr(10)
End Sub

Public Sub docPropertiesFormback(X As Long)
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    If ActiveDocument.Name <> "*docx" Then
    'If Docaddonproperties.DocFormat.Value = "Word" Then
        ActiveDocument.Convert
    
   ' End If
   End If

    DocMetaData.Show vbModeless
End Sub
Public Sub doctableshow(X As Long)
    If Application.Documents.Count < 1 Then Exit Sub
    If ActiveDocument.Name <> "*docx" Then
    'If Docaddonproperties.DocFormat.Value = "Word" Then
        ActiveDocument.Convert
    
   ' End If
   End If
    On Error Resume Next
    DocTables.Show vbModeless
End Sub
Public Function checkGRHL(n As Integer) As Boolean
    Dim astory As Range
    checkGRHL = False
    For Each astory In ActiveDocument.StoryRanges
        If Docaddonproperties.Pic_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT1
            Else
             
                If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.InlineShapes.Count > 0 Or astory.ShapeRange.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
NXT1:
        If Docaddonproperties.Links_Other.Value = False Then
            If astory.StoryType <> wdMainTextStory And astory.StoryType <> wdFootnotesStory And astory.StoryType <> wdTextFrameStory And astory.StoryType <> wdEndnotesStory Then
                GoTo NXT2
            Else
               
                If astory.Hyperlinks.Count > 0 Then
                    checkGRHL = True
                    GoTo NXT
                End If
            End If
        Else
            If astory.Hyperlinks.Count > 0 Then
                checkGRHL = True
                GoTo NXT
            End If
        End If
          
NXT2:
    Next
NXT:
End Function
Public Sub docShapeshow(control As IRibbonControl)
    If Application.Documents.Count < 1 Then Exit Sub
   
  
    On Error Resume Next
    If checkGRHL(1) = True Then
    DocShapes.Show vbModeless
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 4 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
     Else
         Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Grapic element and hyperlinks were not detected"
  Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
     End If
End Sub

Public Sub wizzardprop(X As Long)
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Docaddonproperties.Show vbModeless
End Sub

Public Sub singletabletool(control As IRibbonControl)
    On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    singleTable.Show vbModeless

End Sub

Public Sub ShapeAltForm(control As IRibbonControl)
  
    
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    
    If Selection.InlineShapes.Count < 1 Then
        If Selection.Range.ShapeRange.Count < 1 And Selection.Range.ShapeRange.Type <> msoTextBox Then
          If Selection.StoryType <> WdStoryType.wdTextFrameStory Then
       '   If Selection.Range.ShapeRange(1).Type <> msoTextBox Then
            Load MASSAGE_BOX
               If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "No Grapic Element was selected"
  Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
         
            Exit Sub
        End If
        End If
    End If

    singleShape.Show vbModeless

       
     

End Sub
Public Sub LinkAltForm(control As IRibbonControl)
  
    
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    
    If Selection.Hyperlinks.Count < 1 Then
        If Selection.Range.ShapeRange.Count < 1 Then
               Load MASSAGE_BOX
                  If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "No HyperLink was selected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
      
            Exit Sub
        End If
    End If

    singleLink.Show vbModeless
    Application.ScreenUpdating = True
       
     

End Sub
Sub SelectAllShapes(X As Long)
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    ActiveDocument.Shapes.SelectAll

End Sub



Sub P2LB(control As IRibbonControl)
    On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
    Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = "^l"
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    Selection.MoveDown Unit:=wdLine, Count:=1
    Selection.HomeKey Unit:=wdLine
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub
Sub FractionComplete(pctdone As Single)
With Pro_Bar
    .LabelCaption.Caption = pctdone * 100 & "% Complete"
    .LabelProgress.Width = pctdone * (.FrameProgress.Width)
End With
DoEvents
End Sub
Sub NewDocDesignform(control As IRibbonControl)
NewDocDesign.Show
End Sub
Sub HeaderTextForm(control As IRibbonControl)
DocHeaderText.Show
End Sub

Sub exrow(control As IRibbonControl)
Dim col As Variant
  If Selection.TableS.Count <> 1 Then
 MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
 Exit Sub
  End If
  col = Selection.Shading.BackgroundPatternColor

Dim borderr, borderl, bordert, borderb, LINDENT, LINDENTt
With Selection
borderr = Selection.Borders.DistanceFromRight
borderl = .Borders.DistanceFromLeft
bordert = .Borders.DistanceFromTop
borderb = .Borders.DistanceFromBottom

LINDENTt = Selection.Information(wdHorizontalPositionRelativeToTextBoundary)
End With
Selection.rows.ConvertToText Separator:=wdSeparateByParagraphs, _
        NestedTables:=True
    With Selection.Sections(1)
        .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        .Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        With .Borders
            .DistanceFrom = wdBorderDistanceFromPageEdge
            .AlwaysInFront = True
            .SurroundHeader = True
            .SurroundFooter = True
            .JoinBorders = False
            .DistanceFromTop = bordert
            .DistanceFromLeft = borderl
            .DistanceFromBottom = borderb
            .DistanceFromRight = borderr
            .Shadow = False
            .EnableFirstPageInSection = True
            .EnableOtherPagesInSection = True
            .ApplyPageBordersToAllSections
        End With
    End With
    With Selection.ParagraphFormat
        With .Shading
            .Texture = wdTextureNone
            .ForegroundPatternColor = wdColorAutomatic
            .BackgroundPatternColor = col
        End With
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorAutomatic
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorAutomatic
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorAutomatic
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorAutomatic
        End With
        With .Borders
            .DistanceFromTop = bordert
            .DistanceFromLeft = borderl
            .DistanceFromBottom = borderb
            .DistanceFromRight = borderr
            .Shadow = False
        End With
    End With
    With Options
        .DefaultBorderLineStyle = wdLineStyleSingle
        .DefaultBorderLineWidth = wdLineWidth050pt
        .DefaultBorderColor = wdColorAutomatic
    End With
   With Selection.ParagraphFormat
        .RightIndent = CentimetersToPoints(0.07)
    .FirstLineIndent = CentimetersToPoints(-1.33)
  
           .SpaceBeforeAuto = False
        .SpaceAfterAuto = False
    End With
   
End Sub

Sub setDocVarHBR(DocVar As String)
    On Error Resume Next
    strVal = ActiveDocument.Variables(DocVar).Value
    If Err.Number = 0 Then
        
    Else
        ActiveDocument.Variables.Add DocVar, String(1000, ".")
    End If
    
   
    ActiveDocument.Variables(DocVar) = "@@@"
End Sub
Function getDocVarHBR(DocVar As String) As String
    On Error Resume Next
    strVal = ActiveDocument.Variables(DocVar).Value
    If Err.Number = 0 Then
        getDocVarHBR = ""
    Else
        ActiveDocument.Variables.Add DocVar, String(1000, ".")
    End If
    
   
    getDocVarHBR = ActiveDocument.Variables(DocVar).Name
End Function


Function getHproperties(para As Range) As String
   
       
        
        paraalligment = para.ParagraphFormat.alignment
       ' MsgBox paraalligment
        FBOLD = False
        If para.ParagraphFormat.ReadingOrder = wdReadingOrderLtr Then
            fSize = para.Font.Size
            paracolor = para.Font.TextColor
            If para.Font.Bold = True And para.Words(1).Font.Bold = True Then FBOLD = True
            funder = para.Words(1).Font.Underline 'funder = para.Range.Font.Underline
        Else
            fSize = para.Font.SizeBi
            paracolor = para.Font.TextColor
            If para.Font.BoldBi = True And para.Words(1).Font.BoldBi = True Then FBOLD = True
            funder = para.Words(1).Font.Underline 'para.Range.Font.Underline
            
        End If
       
        
        
  getHproperties = Str(fSize) & "," & FBOLD & "," & funder & "," & paracolor & "," & paraalligment
End Function
 Public Sub HInfo_Click2(nnn As Long)
    On Error Resume Next
    DocHeading.RecordH.Value = False
    Dim V As Variable
    Dim m, n As Variant
    Dim kkk, Q As Integer
    Dim cc As control
    Dim para As Paragraph
    Dim colFontsUsed As New Collection
    Dim colFontsUsed2 As New Collection
    kkk = 0
    Application.ScreenUpdating = False
    For Each V In ActiveDocument.Variables
        
        If getDocVarHBR(V.Value) Like "@@@" Then
        ''''''''''''''
           
            colFontsUsed.Add Trim(getDocVarHBR(V.Name))
            kkk = kkk + 1
        End If
    Next V
 
    If kkk = 0 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " User Predefined Heading Business Rules were not found, please record your Heading Tags and perform the action once again "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
     
            MASSAGE_BOX.Show
            Call speedOff(1)
            Exit Sub
        End If
    End If
    For Q = colFontsUsed.Count To 1 Step -1
        colFontsUsed2.Add Trim(colFontsUsed(Q))
    Next
    For Q = 1 To colFontsUsed2.Count
        With HeadingsBR
            For Each cc In HeadingsBR.Controls
                If Q < 10 Then
                    If Mid(cc.Name, 1, 2) = "I" & Q Then
                        cc.Visible = True
                        If Mid(cc.Name, 1, 3) = "I" & Q & "H" Then cc.Caption = "H" & CStr(Font_H(colFontsUsed2(Q)))
                        If Mid(cc.Name, 1, 3) = "I" & Q & "F" Then cc.Caption = CStr(Font_size(colFontsUsed2(Q)))
                      
                        If Mid(cc.Name, 1, 3) = "I" & Q & "B" Then
                            If CStr(Font_Bold(colFontsUsed2(Q))) = "False" Then
                                cc.Caption = "X"
                                
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "U" Then
                            If CStr(Font_Under(colFontsUsed2(Q))) = "0" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                            '  If CStr(Font_Col(colFontsUsed2(Q))) = "1" Then
                            '  cc.Caption = "Black"
                            '  Else
                            cc.Caption = CStr(Font_Col(colFontsUsed2(Q)))
                            If InStr(CStr(Font_Col(colFontsUsed2(Q))), "1677721") Then
                                cc.ForeColor = wdBlack
                                cc.BackColor = wdBlack
                            Else
                            
                                cc.ForeColor = CLng(cc.Caption)
                                cc.BackColor = CLng(cc.Caption)
                            End If
                        End If
                        '  MsgBox CStr(Font_Col(colFontsUsed2(Q)))
                        '  End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "A" Then
                            Select Case Val(Trim(CStr(Font_Allign(colFontsUsed2(Q)))))
                                Case 1
                                    cc.Caption = "Center"
                                Case 0
                                    cc.Caption = "Left"
                                Case 2
                                    cc.Caption = "Right"
                                Case 4
                                    cc.Caption = "justified"
                                Case 3
                                    cc.Caption = "justified"
                                Case Else
                                    cc.Caption = "justified"
                            End Select
                      
                        End If
                    End If
                Else
                    If Mid(cc.Name, 1, 3) = "I" & Q Then
                        cc.Visible = True
                        If Mid(cc.Name, 1, 4) = "I" & Q & "H" Then cc.Caption = "H" & CStr(Font_H(colFontsUsed2(Q)))
                        If Mid(cc.Name, 1, 4) = "I" & Q & "F" Then cc.Caption = CStr(Font_size(colFontsUsed2(Q)))
                      
                        If Mid(cc.Name, 1, 4) = "I" & Q & "B" Then
                            If CStr(Font_size(colFontsUsed2(Q))) = "False" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "U" Then
                            If CStr(Font_Under(colFontsUsed2(Q))) = "0" Then
                                cc.Caption = "X"
                            Else
                                cc.Caption = "V"
                            End If
                        End If
                        If Mid(cc.Name, 1, 3) = "I" & Q & "C" Then
                            '  If CStr(Font_Col(colFontsUsed2(Q))) = "1" Then
                            '  cc.Caption = "Black"
                            '  Else
                            If InStr(CStr(Font_Col(colFontsUsed2(Q))), "1677721") Then
                                cc.ForeColor = wdBlack
                                cc.BackColor = wdBlack
                            Else
                            
                                cc.ForeColor = CLng(cc.Caption)
                                cc.BackColor = CLng(cc.Caption)
                            End If
                        End If
                        If Mid(cc.Name, 1, 4) = "I" & Q & "A" Then
                            Select Case Val(Trim(CStr(Font_Allign(colFontsUsed2(Q)))))
                                Case 1
                                    cc.Caption = "Center"
                                Case 0
                                    cc.Caption = "Left"
                                Case 2
                                    cc.Caption = "Right"
                                Case 4
                                    cc.Caption = "justified"
                                Case 3
                                    cc.Caption = "justified"
                                Case Else
                                    cc.Caption = "justified"
                            End Select
                            'cc.Caption = CStr(Font_Allign(colFontsUsed2(Q)))
                        
                        End If
                    End If
                End If
            Next
        End With
    Next
    HeadingsBR.Show vbModeless
End Sub
Private Function Font_H(sh As String) As String
   On Error Resume Next
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder

    Font_H = arrChoices(6)
    'fbold = arrChoices(1)
    'funder = arrChoices(2)
    If Trim(Font_H) <> "" Then GoTo NXT

    Err.Clear
    Font_H = 1
NXT:
End Function

Private Function Font_size(sh As String) As Long
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder

    Font_size = arrChoices(0)
    'fbold = arrChoices(1)
    'funder = arrChoices(2)
End Function
Private Function Font_Bold(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder


    Font_Bold = arrChoices(1)

End Function
Private Function Font_Under(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Under = arrChoices(2)
End Function
Private Function Font_Allign(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Allign = arrChoices(4)
End Function
Private Function Font_Col(sh As String) As String
    Dim arrChoices() As String
    arrChoices = Split(sh, ",")
    Dim fSize, FBOLD, funder



    Font_Col = arrChoices(3)
End Function

Attribute VB_Name = "global_utils"
Sub SwithchTrackChangeOff(X As Integer)
    ActiveDocument.TrackRevisions = False
    ActiveDocument.TrackFormatting = False
End Sub
Sub SwithchTrackChangeOn(X As Integer)
    ActiveDocument.TrackRevisions = True
    ActiveDocument.TrackFormatting = True

End Sub

Public Sub minlinespace(X As Integer)
On Error Resume Next
Dim m, mm, TCCHECK As Variant
'''
    Dim I As Integer
    Dim astory As Range
    m = DocMetaData.minLineSpaceVal.Value
    mm = LinesToPoints(m)
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Application.ScreenUpdating = False
    ''
    Dim CurrentStory As String
    On Error Resume Next
 
    Dim V, VV As Variant
    Dim c As Integer
    Dim d, p As String
    c = 0
  
    For Each astory In ActiveDocument.StoryRanges
        Application.StatusBar = "Minimum line space proccessing"
        
         
        Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width + 20
        Pro_Bar.Label1.Caption = I & "% Completed"
    
        ''
       astory.Select
       With Selection.ParagraphFormat
         .LineSpacingRule = wdLineSpaceAtLeast
         .LineSpacing = mm
       End With
     '
    Next astory
   
If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
          ActiveDocument.Paragraphs(1).Range.Select
    End If
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
  
End Sub
Public Sub createGrayscaletDoc(X As Integer)
    On Error Resume Next
    Application.ScreenUpdating = False
    Dim Tshade As Boolean
    Dim t As Table
    Dim rng As Range, Sctn As Section, HdFt As HeaderFooter
    Dim pic As InlineShape
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim astory As StoryRanges
       Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.2)
  For Each astory In ActiveDocument.StoryRanges
    Application.StatusBar = "Color Contrast Proccesing"
     Selection.WholeStory
      Selection.Font.color = 526600
            Selection.Range.HighlightColorIndex = wdNoHighlight
  Next astory
    Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.3)
    With ActiveDocument
       
            'set black as the backround color
            Selection.WholeStory
       
            ActiveDocument.Background.Fill.Visible = msoFalse
     
          Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.5)
        Dim ct, it As Long
        ct = ActiveDocument.TableS.Count
         it = 0
         If Docaddonproperties.TGrayScale = True Then
        For Each t In ActiveDocument.TableS
            it = it + 1
               Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.8 + 0.2 * (it / ct))
            '''
             If t.rows(1).Shading.Texture = wdTextureNone And t.rows(1).Shading.ForegroundPatternColor = wdColorAutomatic And t.rows(1).Shading.BackgroundPatternColor = wdColorAutomatic And Tbl.Columns(1).Shading.Texture = wdTextureNone And t.Columns(1).Shading.ForegroundPatternColor = wdColorAutomatic And t.Columns(1).Shading.BackgroundPatternColor = wdColorAutomatic Then
        Tshade = False
        Else
        Tshade = True
        End If
     
            If t.Borders.InsideLineStyle <> wdLineStyleNone And t.Borders.OutsideLineStyle <> wdLineStyleNone And Tshade = False Then
            
            
            With t.Shading
                .Texture = wdTextureNone
                .ForegroundPatternColor = wdColorAutomatic
                .BackgroundPatternColor = wdColorAutomatic
            End With
           
            
            With t.Borders(wdBorderLeft)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .color = 526600
            End With
           
           
            With t.Borders(wdBorderRight)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .color = 526600
            End With
        
            With t.Borders(wdBorderTop)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .color = 526600
            End With
           
            With t.Borders(wdBorderBottom)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .color = 526600
            End With
           
            With t.Borders(wdBorderHorizontal)
                .LineStyle = wdLineStyleSingle
                '
                .color = 526600
            End With
            
            With t.Borders(wdBorderVertical)
                .LineStyle = wdLineStyleSingle
                '
                .color = 526600
            End With
       
             End If
         
             Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.8 + 0.2 * (it / ct))
             
  
       
        Next
        End If
    End With
    
   
    Application.StatusBar = "Color Contrast Proccesing"
    ActiveWindow.View.Type = wdPrintView
    Selection.WholeStory
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
     Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (0.91)
    Dim hl As Hyperlink
    For Each hl In ActiveDocument.Hyperlinks
        If hl.Address <> "" Then hl.Range.Style = wdStyleHyperlink
    Next
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
     Pro_Bar.Label1.Caption = 10 & "% Completed"
             FractionComplete (1)
End Sub


Public Sub WecoPopuploop(X As Integer)



    Dim Tbl As Word.Table
    Application.ScreenUpdating = False


    For Each Tbl In ActiveDocument.TableS
             
        With Tbl
            ' convert text box table to regular paragraph
            If (Tbl.Columns.Count = 1) And (Tbl.rows.Count = 1) Then
                Tbl.Select
                Selection.rows.ConvertToText Separator:=wdSeparateByParagraphs, _
                    NestedTables:=False
                GoTo NXT2
            Else
            '    If (Tbl.Columns.Count = 1) And (Tbl.rows.Count > 1) Then
                                            
             '       Tbl.Select
             '       Selection.rows.ConvertToText Separator:=wdSeparateByParagraphs, _
             '           NestedTables:=False
                                             
             '   End If
            End If
             
        End With
NXT2:
    Next Tbl
    Application.ScreenUpdating = True

End Sub
Sub wecoDeleteEmptyParagraphs(X As Integer)
    Dim oPara As Word.Paragraph
    
    For Each oPara In ActiveDocument.Paragraphs
        Application.StatusBar = "Empty Pragraph delete Proccesing"
        If Len(oPara.Range) = 1 Then oPara.Range.Delete
    Next
End Sub

Sub DeleteEmptyTablerowsandcolumns(X As Integer)
    Application.ScreenUpdating = False
    Dim Tbl As Table, cel As Cell, I As Long, n As Long, fEmpty As Boolean
    With ActiveDocument
        For Each Tbl In .TableS
            n = Tbl.Columns.Count
            For I = n To 1 Step -1
                fEmpty = True
                For Each cel In Tbl.Columns(I).Cells
                    If Len(cel.Range.Text) > 2 Then
                        fEmpty = False
                        Exit For
                    End If
                Next cel
                If fEmpty = True Then Tbl.Columns(I).Delete
            Next I
        Next Tbl
    End With
    With ActiveDocument
        For Each Tbl In .TableS
            n = Tbl.rows.Count
            For I = n To 1 Step -1
                fEmpty = True
                For Each cel In Tbl.rows(I).Cells
                    If Len(cel.Range.Text) > 2 Then
                        fEmpty = False
                        Exit For
                    End If
                Next cel
                If fEmpty = True Then Tbl.rows(I).Delete
            Next I
        Next Tbl
    End With
    Set cel = Nothing: Set Tbl = Nothing

End Sub


Sub WecoShapeDescription(X As Integer)
    Dim intCount As Integer
    Dim I, j As Integer
    Dim rng As Range, Sctn As Section, HdFt As HeaderFooter
    Application.ScreenUpdating = False
    'loop through inline shapes
    For I = 1 To ActiveDocument.InlineShapes.Count
        'check if the current shape is an picture
        If InlineShapes.Item(I).Type = _
            wdInlineShapePicture Then
            ActiveDocument.Shapes.Item(I).Select
            oShapeDesc = InputBox("Please enter shape alternative description", "Accessibility", "Shape " & I)
            ActiveDocument.Shapes.Item(I).Title = oShapeDesc
            ActiveDocument.Shapes.Item(I).Name = oShapeDesc
            ActiveDocument.Shapes.Item(I).AlternativeText = oShapeDesc

        End If
    Next I

    For j = 1 To ActiveDocument.Shapes.Count
        'check if the current shape is an picture
        If ActiveDocument.Shapes.Item(j).Type = msoPicture Then
            ActiveDocument.Shapes.Item(j).Select

            oShapeDesc = InputBox("Please enter shape alternative description", "Accessibility", "Shape " & I + j)
            ActiveDocument.Shapes.Item(j).Title = oShapeDesc
            ActiveDocument.Shapes.Item(j).Name = oShapeDesc
            ActiveDocument.Shapes.Item(j).AlternativeText = oShapeDesc

        End If
    Next j

   
    Dim hdr As HeaderFooter
    Dim ftr As HeaderFooter
    Dim sec As Section
    Dim sh As Shape
    
    For Each sec In ActiveDocument.Sections
      
      
      
        For Each hdr In sec.Headers
            With hdr
                If .LinkToPrevious = False Then
                    Set rng = hdr.Range
                    For Each sh In hdr.Shapes
                        sh.Select
                        oShapeDesc = InputBox("Please enter shape alternative description", "Accessibility", "company logo")
                        sh.Title = oShapeDesc
                        sh.AlternativeText = Len(oShapeDesc)
                    Next sh
                End If
            End With
        Next hdr
        
    Next sec

          
          
   ' Application.ScreenUpdating = True
          
          
End Sub


Sub reverse(X As Integer)
    '
    ' Macro2 Macro
    '
    '
    For Each sentence In ActiveDocument.StoryRanges
        For Each w In sentence.Words
            w = StrReverse(w)
        Next
    Next
End Sub

Sub singleTableAltText(X As Integer)
    '
    ' Macro2 Macro
    '
    '
    With Selection
        If Selection.TableS.Count <> 1 Then
           Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "No Table was selected "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
    
            Exit Sub
        End If
        Selection.TableS(1).Title = "Table " & j
        Selection.TableS(1).Descr = InputBox("Please enter table alternative description", "We-Co Accessibility", des)
        Selection.TableS(1).Title = Selection.TableS(1).Descr
    End With
End Sub


Sub removeheadings(X As Integer)
    '
 
    '
    Dim k As Integer
    
    k = MsgBox("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd|")
    If k = 6 Then
        Selection.WholeStory
        With Selection.ParagraphFormat
            .SpaceBeforeAuto = False
            .SpaceAfterAuto = False
            .OutlineLevel = wdOutlineLevelBodyText
        End With
        MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    Else
        MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
    End If
End Sub

Sub SaveIt(X As Integer)
Application.ScreenUpdating = False
    Dim dt As String, wbNam, sfolder, SourceFile, DestinationFile As String
   ' sfolder = Docaddonproperties.folderpath
    
    Dim mydocs As String
    mydocs = Environ("USERPROFILE") & "\My Documents"
    sfolder = mydocs & "\AccBackup\"

    
    
    If Len(Dir(sfolder, vbDirectory)) = 0 Then
        MkDir sfolder
    End If

    wbNam = sfolder & Left(ActiveDocument.Name, InStrRev(ActiveDocument.Name, ".") - 1)
    dt = Format(CStr(Now), "mm_hh_yyyy_mm_dd")
       

    SourceFile = ActiveDocument.FullName ' Define source file name.
    DestinationFile = wbNam & "_" & dt & ".docx" ' Define target file name.


    WordBasic.CopyFileA FileName:=SourceFile, _
        Directory:=DestinationFile
End Sub
Function GetFolder(strPath As String) As String
    Dim fldr As FileDialog
    Dim sItem As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = strPath
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
NextCode:
    GetFolder = sItem
    Set fldr = Nothing
End Function

Sub mydocsbackup(X As Integer)
    Dim mydocs, sfolder As String
    mydocs = Environ("USERPROFILE") & "\My Documents"
    sfolder = mydocs & "\AccBackup\"
    If Len(Dir(sfolder, vbDirectory)) = 0 Then
        MkDir sfolder
    End If
End Sub

Sub storyshapeloopconvert(X As Integer)

    Dim CurrentStory As String
    Dim astory As Range
    Dim t As String
    On Error Resume Next
    For Each astory In ActiveDocument.StoryRanges
        If astory.InlineShapes.Count > 0 Then
  
  
   
            For I = 1 To astory.InlineShapes.Count
                t = ""
                If Trim(astory.InlineShapes(I).AlternativeText) <> "" Then t = astory.InlineShapes(I).AlternativeText
    
                astory.InlineShapes(I).Select
                astory.InlineShapes(I).ConvertToShape
                With selction
                    astory.ShapeRange(1).AlternativeText = t
                End With
            Next I
        End If
 
 
 
 
    Next astory
    
End Sub
Attribute VB_Name = "hLevelsSetup"


Sub HH1(Optional ByVal O As String)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    Dim p As Long
    DataObj.SetText ""
    DataObj.PutInClipboard
    Selection.Expand wdParagraph
    Application.ScreenUpdating = False
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m, FAllign, FItalic, FBOLD, FUnderline As Variant
    Dim para As Paragraph
    Dim fnt As Font
    Dim dd As Long
    Dim pfmt As ParagraphFormat
    Dim TCCHECK As Integer
    Dim cc, ccc As Boolean
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If ActiveDocument.Range(0, Selection.End).Paragraphs.Count = 1 Then p = 0 Else p = 1

       
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + p To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
   
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        dd = 0
HH1X:
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel1
        End With
        If ActiveDocument.Paragraphs(I).Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then
            '''''
            para.Range.Select
            cc = para.Range.ListFormat.SingleList
            If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
            If para.Range.ListFormat.ListValue = "1" And para.Range.ListFormat.ListLevelNumber < 2 Then
                para.Range.Characters(1).Select
                ccc = True
                Call HHXList(1)
             '   Application.CommandBars.ExecuteMso ("NumberingRestart")
            End If
            '''''
            Call SuperH(wdOutlineLevel1)
           '  If ccc = True Then Application.CommandBars.ExecuteMso ("NumberingRestart")
        End If
        
        If ActiveDocument.Paragraphs(I).Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel1 Then
            FAllign = Selection.ParagraphFormat.alignment
            FBOLD = Selection.Range.Bold
            FUnderline = Selection.Range.Underline
            FItalic = Selection.Range.Italic
            Selection.HomeKey Unit:=wdLine
            Selection.TypeParagraph
           ' Call HHX
            Selection.HomeKey Unit:=wdLine
            Selection.TypeBackspace
            Selection.ParagraphFormat.alignment = FAllign
            
            
            ActiveDocument.Paragraphs(I).Range.Font.Bold = FBOLD
            ActiveDocument.Paragraphs(I).Range.Font.Underline = FUnderline
            ActiveDocument.Paragraphs(I).Range.Font.Italic = FItalic
            dd = dd + 1
            If dd < 2 Then
                GoTo HH1X
            Else
                ActiveDocument.Paragraphs(I).Range.Select
               ' Call HHX
                ActiveDocument.Paragraphs(I).Range.ParagraphFormat.OutlineLevel = wdOutlineLevel1
            End If
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H1_FONT_Size.Value
                .SizeBi = HeadingDesign.H1_FONTBi_Size.Value
                .Name = HeadingDesign.H1_FONT_NAME.Value
                .NameBi = HeadingDesign.H1_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H1_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H1_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H1_FONT_Bold.Value
                .BoldBi = HeadingDesign.H1_FONT_Bold.Value
                .Italic = HeadingDesign.H1_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H1_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H1_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H1_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H1_FONT_Linespace
            End With
        End If
    Next I
    ActiveDocument.Paragraphs(I - 1).Range.Select
    ''''
  
    '''''
    Call setDocVarPara("ParaNumber")
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
   
    Err.Clear
End Sub
Sub HH2(Optional ByVal O As String)
    '
    Application.ScreenUpdating = False
    Application.ScreenUpdating = False
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim cc, ccc As Boolean
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel2"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Selection.StoryType = WdStoryType.wdTextFrameStory Then
        Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevel2
        Exit Sub
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
          
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = " It's not recomended to use First heading which is not H1"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
         
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel2
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel2 Then
            '''''
            para.Range.Select
            cc = para.Range.ListFormat.SingleList
            If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
            If para.Range.ListFormat.ListValue = "1" And para.Range.ListFormat.ListLevelNumber < 2 Then
                para.Range.Characters(1).Select
                ccc = True
                Call HHXList(1)
         '       Application.CommandBars.ExecuteMso ("NumberingRestart")
            End If
            '''''
            para.Range.Select
            Call SuperH(wdOutlineLevel2)
       '   If ccc = True Then Application.CommandBars.ExecuteMso ("NumberingRestart")
       
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H2_FONT_Size.Value
                .SizeBi = HeadingDesign.H2_FONTBi_Size.Value
                .Name = HeadingDesign.H2_FONT_NAME.Value
                .NameBi = HeadingDesign.H2_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H2_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H2_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H2_FONT_Bold.Value
                .BoldBi = HeadingDesign.H2_FONT_Bold.Value
                .Italic = HeadingDesign.H2_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H2_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H2_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H2_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H2_FONT_Linespace
            End With
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
    Err.Clear
End Sub
Sub HH3(Optional ByVal O As String)
    '
    Application.ScreenUpdating = False
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim cc, ccc As Boolean
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel3"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Selection.StoryType = WdStoryType.wdTextFrameStory Then
        Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevel3
        Exit Sub
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            '  MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else

                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            ' MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
               
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel3
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel3 Then
            '''''
            para.Range.Select
            cc = para.Range.ListFormat.SingleList
            If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
            If para.Range.ListFormat.ListValue = "1" And para.Range.ListFormat.ListLevelNumber < 2 Then
                para.Range.Characters(1).Select
                ccc = True
                Call HHXList(1)
            '    Application.CommandBars.ExecuteMso ("NumberingRestart")
            End If
            '''''
            para.Range.Select
            Call SuperH(wdOutlineLevel3)
            '''''
         '   If ccc = True Then Application.CommandBars.ExecuteMso ("NumberingRestart")
            ''''
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H3_FONT_Size.Value
                .SizeBi = HeadingDesign.H3_FONTBi_Size.Value
                .Name = HeadingDesign.H3_FONT_NAME.Value
                .NameBi = HeadingDesign.H3_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H3_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H3_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H3_FONT_Bold.Value
                .BoldBi = HeadingDesign.H3_FONT_Bold.Value
                .Italic = HeadingDesign.H3_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H3_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H3_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H3_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H3_FONT_Linespace
            End With
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
    Err.Clear
End Sub
Sub HH4(Optional ByVal O As String)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
    Dim cc, ccc As Boolean
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel4"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Selection.StoryType = WdStoryType.wdTextFrameStory Then
        Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevel4
        Exit Sub
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            '   MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            ' MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
              
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel4
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel4 Then
            Call SuperH(wdOutlineLevel4)
       
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H4_FONT_Size.Value
                .SizeBi = HeadingDesign.H4_FONTBi_Size.Value
                .Name = HeadingDesign.H4_FONT_NAME.Value
                .NameBi = HeadingDesign.H4_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H4_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H4_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H4_FONT_Bold.Value
                .BoldBi = HeadingDesign.H4_FONT_Bold.Value
                .Italic = HeadingDesign.H4_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H4_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H4_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H4_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H4_FONT_Linespace
            End With
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
    Err.Clear
End Sub
Sub HH5(Optional ByVal O As String)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
   
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel5"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Selection.StoryType = WdStoryType.wdTextFrameStory Then
        Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevel5
        Exit Sub
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            '  MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            '   MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
             
              
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel5
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel5 Then
            Call SuperH(wdOutlineLevel5)
       
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H5_FONT_Size.Value
                .SizeBi = HeadingDesign.H5_FONTBi_Size.Value
                .Name = HeadingDesign.H5_FONT_NAME.Value
                .NameBi = HeadingDesign.H5_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H5_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H5_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H5_FONT_Bold.Value
                .BoldBi = HeadingDesign.H5_FONT_Bold.Value
                .Italic = HeadingDesign.H5_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H5_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H5_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H5_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H5_FONT_Linespace
            End With
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
    Err.Clear
End Sub
Sub HH6(Optional ByVal O As String)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
   
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel6"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Selection.StoryType = WdStoryType.wdTextFrameStory Then
        Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevel6
        Exit Sub
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            ' MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else

                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            '   MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
          
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel6
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel6 Then
            Call SuperH(wdOutlineLevel6)
       
        End If
        ActiveDocument.Paragraphs(I).Range.Select
        If Docaddonproperties.HeadingFormatFalg = True Then
            With Selection.Font
                .Size = HeadingDesign.H6_FONT_Size.Value
                .SizeBi = HeadingDesign.H6_FONTBi_Size.Value
                .Name = HeadingDesign.H6_FONT_NAME.Value
                .NameBi = HeadingDesign.H6_FONTBi_NAME.Value
           
                .Underline = Trim(HeadingDesign.H6_FONT_Underline_style_value.Value)
                .UnderlineColor = wdColorAutomatic
                .color = HeadingDesign.H6_FONT_Color_Picker_value.Value
                .Bold = HeadingDesign.H6_FONT_Bold.Value
                .BoldBi = HeadingDesign.H6_FONT_Bold.Value
                .Italic = HeadingDesign.H6_FONT_Italic.Value
                .ItalicBi = HeadingDesign.H6_FONT_Italic.Value
            End With
            With Selection.ParagraphFormat
                .SpaceBefore = HeadingDesign.H6_FONT_Space_before.Value
                .SpaceBeforeAuto = False
                .SpaceAfter = HeadingDesign.H6_FONT_Space_After.Value
                .SpaceAfterAuto = False
                .LineSpacing = HeadingDesign.H6_FONT_Linespace
            End With
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
   
    
    ActiveDocument.Paragraphs(k).Range.Select
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then Application.ScreenUpdating = True
    Err.Clear
End Sub
Sub HH7(n As Long)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
   
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel7"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            ' MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else

                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            '  MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
              
            GoTo NXT2
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel7
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel7 Then
            Call SuperH(wdOutlineLevel7)
        End If
    Next I
    para.Range.Select
    Call setDocVarPara("ParaNumber")
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.ScreenUpdating = True
End Sub

Sub HH8(n As Long)
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph

    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim m As Variant
   
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim prevlevel, curlevel As Variant
    curlevel = "wdOutlineLevel8"
    curlevelVal = Mid(curlevel, 15, 15)
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    If Docaddonproperties.HeadingNestingFlag = True Then
        For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count To 1 Step -1
            If ActiveDocument.Paragraphs(I).OutlineLevel <> 10 Then
                prevlevel = ActiveDocument.Paragraphs(I).OutlineLevel
       
                GoTo NXT
            End If
        
        Next I
NXT:
        If prevlevel = "" Then prevlevel = 0
        prevlevel = Val(prevlevel)
        curlevelVal = Val(curlevelVal)
        If prevlevel = 0 And curlevelVal > 1 Then
            ' MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "It's not recomended to use First heading which is not H1"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| H1"
            End If
            MASSAGE_BOX.Show
            GoTo NXT2
        End If
        If curlevelVal > prevlevel + 1 Then
            '   MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|")
            Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
                MASSAGE_BOX.TextBox1.Caption = "The requested Heading Outline Level is -" & " " & curlevelVal & " " & "'while the previous heading level is " & prevlevel & " - " & "Please set lower heading level"
            Else
                MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -" & " " & curlevelVal & " " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| " & prevlevel & " - " & "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            End If
            MASSAGE_BOX.Show
             
        End If
    End If
    For I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1 To ActiveDocument.Range(0, Selection.End).Paragraphs.Count
        Set para = ActiveDocument.Paragraphs(I)
        para.Range.Select
        With Selection
            .Range.ParagraphFormat.OutlineLevel = wdOutlineLevel8
        End With
        If Selection.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevel8 Then
            Call SuperH(wdOutlineLevel8)
       
        End If
    Next I
   
  
NXT2:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.ScreenUpdating = True
End Sub
Sub HHX(Optional ByVal O As String)
    On Error Resume Next
    
    
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
 
    If Application.Documents.Count < 1 Then Exit Sub
    Application.ScreenUpdating = False
    Application.DisplayAlerts = wdAlertsNone
    On Error Resume Next
    Dim X As Integer
    Dim m, Y  As Variant
    Dim para, lpara As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim cc, ccc, CCCC, pp As Boolean
    Dim III As Long
    Dim TCCHECK As Integer
    Dim myParas As Paragraphs
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
      If Selection.StoryType = WdStoryType.wdTextFrameStory Then
      Selection.Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText
      Exit Sub
      End If
    Set myParas = Selection.Range.Paragraphs
    X = Selection.Range.Paragraphs.Count
    If X > 75 Then
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "You have reach the max limitaion of paragraph , please select smaller amount of paragraphs and perform this action once again"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        '   |fffd| = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd||fffd|")
        GoTo NXT
    End If
    If X > 5 Then
        pp = True
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo  "
        FractionComplete (0.1)
        
        Pi = 1
    End If
    For Each para In myParas
        FractionComplete (0.1 + 0.9 * Pi / X)
        
        'System.Cursor = wdCursorWait
        para.Range.Select
      
        cc = para.Range.ListFormat.SingleList
        If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
        If cc = True And para.Range.ListParagraphs.Count = 1 And para.Range.ListFormat.ListValue = 1 And para.Range.ListFormat.ListLevelNumber < 2 Then  'Selection.Paragraphs(1).Range.ListParagraphs.Count = 1
            ccc = True
        Else
            ccc = False
        End If
           
       
        para.Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText
  
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
         '   If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Font.BoldBi = True Then
         '       CCCC = False
        '        If para.Range.Font.Bold = True Or para.Range.Font.BoldBi = True Then CCCC = True
                
         '       para.Range.Words(1).Characters(1).Select
         '       Selection.Font.Bold = False
         '       Selection.Font.BoldBi = False
            
         '       para.Range.Select
         '       Call SuperH(wdOutlineLevelBodyText)
         '       If CCCC = True Then
         '           para.Range.Select
         '       Else
                
         '           para.Range.Words(1).Characters(1).Select
         '       End If
         '       Selection.Font.Bold = True
         ''       Selection.Font.BoldBi = True
            
        '    Else
                Call SuperH(wdOutlineLevelBodyText)
       '     End If
      End If
        If pp = True Then Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width * 1
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
            
            para.Range.Select
            If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Characters(1).Font.BoldBi = True Then
             
                para.Range.Words(1).Characters(1).Select
                Selection.Font.Bold = False
                Selection.Font.BoldBi = False
                para.Range.Select
                Call HHCX
                If CCCC = True Then
                    para.Range.Select
                Else
                
                    para.Range.Words(1).Characters(1).Select
                End If
                Selection.Font.Bold = True
                Selection.Font.BoldBi = True
            Else
                Call HHCX
            End If
        End If
        If pp = True Then Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width * 1
        CCCC = False
        If cc = False Then
            para.Range.Select
           'Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
            With Selection.ParagraphFormat
                .LeftIndent = III
                .SpaceBeforeAuto = False
                .SpaceAfterAuto = False
        
            End With
        Else
            '''
            If ccc = True Then
                '    MsgBox "BOOM"
                para.Range.Select
               ' With Selection
                '    Selection.Paragraphs(1).SelectNumber
                 '   Selection.MoveLeft Unit:=wdCharacter, Count:=1
                 '   Set myField = Selection.Fields.Add(Range:=Selection.Range, Type:=wdFieldEmpty, Text:=" LISTNUM  \l 1 \s 0 ")
              '  End With
                 
               ' myField.Select
               ' With Selection
                '    Selection.Range.Font.Hidden = True
                'End With
                ccc = False
                Set myField = Nothing
            End If
           
        End If
        ' Set lpara = para
        If pp = True Then Pro_Bar.LabelProgress.Width = Pro_Bar.LabelProgress.Width * 1
    Next para
    If pp = True Then Pro_Bar.Hide
    pp = False
NXT:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    If Trim(O) <> "" Then
    Application.DisplayAlerts = wdAlertsAll
     Application.ScreenUpdating = True
     End If
    Unload Pro_Bar
    para.Range.Select
    Call setDocVarPara("ParaNumber")
   
   
End Sub


Sub HHX_C()
    On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
 
    If Application.Documents.Count < 1 Then Exit Sub
    Application.ScreenUpdating = False
    On Error Resume Next
    Dim X As Integer
    Dim m, Y  As Variant
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim cc, ccc As Boolean
    Dim III As Long
    Dim TCCHECK As Integer
    Dim myParas As Paragraphs
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
       
    Set myParas = Selection.Range.Paragraphs
    X = Selection.Range.Paragraphs.Count
    If X > 75 Then
        ' |fffd| = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = "You have reach the max limitaion of paragraph , please select smaller amount of paragraphs and perform this action once again"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        GoTo NXT
    End If
    For Each para In myParas
        para.Range.Select
      
        cc = para.Range.ListFormat.SingleList
        If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
        If para.Range.ListFormat.ListValue = 1 And para.Range.ListFormat.ListLevelNumber < 2 Then ccc = True
           
       
        para.Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText
  
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
            If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Characters(1).Font.BoldBi = True Then
              
                para.Range.Characters(1).Select
                Selection.Font.Bold = False
                Selection.Font.BoldBi = False
            
                para.Range.Select
                Call SuperH(wdOutlineLevelBodyText)
                para.Range.Characters(1).Select
                Selection.Font.Bold = True
                Selection.Font.BoldBi = True
            
            Else
                Call SuperH(wdOutlineLevelBodyText)
            End If
        End If
        
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
            para.Range.Select
            If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Characters(1).Font.BoldBi = True Then
             
                para.Range.Characters(1).Select
                Selection.Font.Bold = False
                Selection.Font.BoldBi = False
                para.Range.Select
                Call HHCX
                para.Range.Characters(1).Select
                Selection.Font.Bold = True
                Selection.Font.BoldBi = True
            Else
                Call HHCX
            End If
        End If
        If cc = False Then
            para.Range.Select
            Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
            With Selection.ParagraphFormat
                .LeftIndent = III
                .SpaceBeforeAuto = False
                .SpaceAfterAuto = False
        
            End With
        Else
            ' If ccc = True Then
            '     para.Range.Select
            '     With Selection
            '         Selection.Paragraphs(1).SelectNumber
            '         Selection.MoveLeft Unit:=wdCharacter, Count:=1
            '         Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:="  LISTNUM \l 1 \s 0", PreserveFormatting:=False
            '     End With
            '     Selection.GoTo What:=wdGoToField, which:=wdGoToLast
            '     Selection.Range.Font.Hidden = True
            ' End If
           
        End If
    Next para
NXT:
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.ScreenUpdating = True
End Sub

Sub ListSuperH(OTL As Variant)
    On Error Resume Next
    Dim showMe As Variant
    Dim objStyle As Style
    Dim cc, ccc As Boolean
    Dim xxx, stylex, FBOLD, FUnderline, FItalic, FAllign, FName, fSize As String
    On Error Resume Next
    Dim para As Range
    Dim ListName As String
    sName = Selection.Style.NameLocal
    FBOLD = "False"
    FUnderline = "False"
    FItalic = "False"
    
    I = 1
    xxx = "Normal"

    If styleExists("Normal10", ActiveDocument) = True Then xxx = "Normal_"
    If styleExists("Normal_10", ActiveDocument) = True Then xxx = "Normal__"
    If styleExists("Normal__10", ActiveDocument) = True Then xxx = "Normal___"
    If styleExists("Normal___10", ActiveDocument) = True Then xxx = "Normal____"
    If styleExists("Normal____10", ActiveDocument) = True Then xxx = "Normal_____"
    If styleExists("Normal_____10", ActiveDocument) = True Then xxx = "Normal______"
    If styleExists("Normal______10", ActiveDocument) = True Then xxx = "Normal_______"
    If styleExists("Normal_______10", ActiveDocument) = True Then xxx = "Normal________"
    If styleExists("Normal________10", ActiveDocument) = True Then xxx = "Normal_________"
    If styleExists("Normal_________10", ActiveDocument) = True Then xxx = "Normal__________"
    If styleExists("Normal__________10", ActiveDocument) = True Then xxx = "Normal___________"
    If styleExists("Normal___________10", ActiveDocument) = True Then xxx = "Normal____________"
    If styleExists("Normal____________10", ActiveDocument) = True Then xxx = "Normal_____________"
    If styleExists("Normal_____________10", ActiveDocument) = True Then xxx = "Normal______________"
    If styleExists("Normal______________10", ActiveDocument) = True Then xxx = "Normal_______________"
    If styleExists("Normal_______________10", ActiveDocument) = True Then xxx = "Normal________________"
    If styleExists("Normal________________10", ActiveDocument) = True Then xxx = "Normal_________________"
    If styleExists("Normal_________________10", ActiveDocument) = True Then xxx = "Normal__________________"
    If styleExists("Normal__________________10", ActiveDocument) = True Then xxx = "Normal___________________"
    If styleExists("Normal___________________10", ActiveDocument) = True Then xxx = "Normal____________________"
    If styleExists("Normal____________________10", ActiveDocument) = True Then xxx = "Normal_____________________"
    If styleExists("Normal_____________________10", ActiveDocument) = True Then xxx = "Normal______________________"
    If styleExists("Normal______________________10", ActiveDocument) = True Then xxx = "Normal_______________________"
    If styleExists("Normal_______________________10", ActiveDocument) = True Then xxx = "Normal________________________"
    If styleExists("Normal________________________10", ActiveDocument) = True Then xxx = "Normal_________________________"
    If styleExists("Normal_________________________10", ActiveDocument) = True Then xxx = "Normal__________________________"
    If styleExists("Normal__________________________10", ActiveDocument) = True Then xxx = "Normal___________________________"
    ''
    If styleExists("Normal 10", ActiveDocument) = True Then xxx = "Normal  "
    If styleExists("Normal  10", ActiveDocument) = True Then xxx = "Normal   "
    If styleExists("Normal   10", ActiveDocument) = True Then xxx = "Normal    "
    If styleExists("Normal    10", ActiveDocument) = True Then xxx = "Normal     "
    If styleExists("Normal     10", ActiveDocument) = True Then xxx = "Normal      "
    If styleExists("Normal      10", ActiveDocument) = True Then xxx = "Normal       "
    If styleExists("Normal       10", ActiveDocument) = True Then xxx = "Normal        "
    If styleExists("Normal        10", ActiveDocument) = True Then xxx = "Normal         "
    If styleExists("Normal         10", ActiveDocument) = True Then xxx = "Normal          "
    If styleExists("Normal          10", ActiveDocument) = True Then xxx = "Normal           "
    If styleExists("Normal           10", ActiveDocument) = True Then xxx = "Normal            "
    If styleExists("Normal            10", ActiveDocument) = True Then xxx = "Normal             "
    If styleExists("Normal             10", ActiveDocument) = True Then xxx = "Normal              "
    If styleExists("Normal              10", ActiveDocument) = True Then xxx = "Normal               "
    If styleExists("Normal               10", ActiveDocument) = True Then xxx = "Normal                "
    If styleExists("Normal                10", ActiveDocument) = True Then xxx = "Normal                 "
    If styleExists("Normal                 10", ActiveDocument) = True Then xxx = "Normal                  "
    If styleExists("Normal                  10", ActiveDocument) = True Then xxx = "Normal                   "
    If styleExists("Normal                   10", ActiveDocument) = True Then xxx = "Normal                    "
    If styleExists("Normal                    10", ActiveDocument) = True Then xxx = "Normal                     "
    If styleExists("Normal                     10", ActiveDocument) = True Then xxx = "Normal                      "
    If styleExists("Normal                      10", ActiveDocument) = True Then xxx = "Normal                       "
    If styleExists("Normal                       10", ActiveDocument) = True Then xxx = "Normal                        "
    If styleExists("Normal                        10", ActiveDocument) = True Then xxx = "Normal                         "
    If styleExists("Normal                         10", ActiveDocument) = True Then xxx = "Normal                          "
    If styleExists("Normal                          10", ActiveDocument) = True Then xxx = "Normal                           "

    ''


    For Each objStyle In ActiveDocument.Styles
        If objStyle.NameLocal Like xxx & "*" Then
            If Val(Mid(objStyle.NameLocal, Len(xxx) + 1, 10)) = I Then
                I = I + 1
            End If
        End If
    Next
    Set para = Selection.Range
    With Selection.Range
      
       
        FBOLD = .Bold
        
        FUnderline = .Underline
        FItalic = .Italic
        'FAllign = .ParagraphFormat.alignment
        FName = .Font.Name
        fSize = .Font.Size
        FLIST = .ListParagraphs.Count
        cc = para.ListFormat.SingleList
        If cc = True And para.ListParagraphs.Count = 1 And para.ListFormat.ListValue = 1 And para.ListFormat.ListLevelNumber < 2 Then
            ccc = True
        Else
            ccc = False
        End If
        
    End With
     
    ActiveDocument.Styles.Add Name:=xxx & I, Type:=wdStyleTypeParagraph
    ActiveDocument.Styles(xxx & I).BaseStyle = sName
    ActiveDocument.Styles(xxx & I).ParagraphFormat.OutlineLevel = OTL
    ''
    ActiveDocument.Styles(xxx & I).Font.Name = FName
    ActiveDocument.Styles(xxx & I).Font.Size = fSize
    ''
    ActiveDocument.Styles(xxx & I).Font.Bold = FBOLD
    ActiveDocument.Styles(xxx & I).Font.Underline = FUnderline
    ActiveDocument.Styles(xxx & I).Font.Italic = FItalic
    ''
   
    If FLIST = 1 Then
        ListName = xxx & I & "List"
        ActiveDocument.Styles(xxx & I).ListTemplate.Name = xxx & I & "List"
    End If
  
    '''''
    If ccc = True Then
        para.Select
        With Selection
            '         Application.CommandBars.ExecuteMso ("NumberingRestart")
            '       Selection.Paragraphs(1).SelectNumber
            '       Selection.MoveLeft Unit:=wdCharacter, Count:=1
            '       Set myField = Selection.Fields.Add(Range:=Selection.Range, Type:=wdFieldEmpty, Text:=" LISTNUM " & ListName & "  \l 1 \s 0 ")
        End With
                 
        '   myField.Select
        '    With Selection
        ''       Selection.Range.Font.Hidden = True
        '  End With
        ccc = False
        ' Set myField = Nothing
    End If
    '''''
    para.Select
    ''
      
    ''
    
    Selection.Range.Style = xxx & I
    
    
    


End Sub

Sub HHCX()
    Selection.Expand wdParagraph
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Dim II As Integer
    Dim m As Variant
    Dim myArray As Collection
    Set myArray = New Collection
    Dim myArrayb As Collection
    Set myArrayb = New Collection
    Dim para As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    I = ActiveDocument.Range(0, Selection.start).Paragraphs.Count + 1
        Set para = ActiveDocument.Paragraphs(I)
        With para.Range
            For II = 1 To .Characters.Count
                If .Characters(II).Underline <> wdUnderlineNone Then myArray.Add II
                If .Characters(II).Bold <> False Or .Characters(II).BoldBi <> False Then myArrayb.Add II
            Next
        End With
        With para
            If .Style <> "|fffd||fffd||fffd||fffd|" And .Style <> .Range.ParagraphFormat.Style <> wdStyleNormal And .Format.Style <> wdStyleNormal Then
                Set fnt = .Style.Font
                Set pfmt = .Style.ParagraphFormat
                .Style = wdStyleNormal
                .Range.Font = fnt
                .Range.ParagraphFormat = pfmt
            End If
        End With
        With para.Range
            For II = 0 To myArray.Count
                .Characters(myArray(II)).Font.Underline = wdUnderlineSingle
            Next
            myArray.Clear
            For II = 0 To myArrayb.Count
                .Characters(myArray(II)).Font.Bold = True
            Next
            myArrayb.Clear
        End With
   
    With Selection
                
        .Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText
                
                    
    End With
 
   
End Sub


Function styleExists(ByVal styleToTest As String, ByVal docToTest As Word.Document) As Boolean
    Dim testStyle As Word.Style
    On Error Resume Next
    Set testStyle = docToTest.Styles(styleToTest)
    styleExists = Not testStyle Is Nothing
End Function

Sub SuperH(OTL As Variant)
    Dim myArray As Collection
    Set myArray = New Collection
    Dim myArrayb As Collection
    Set myArrayb = New Collection
    Dim showMe As Variant
    Dim objStyle As Style
    Dim cc As Boolean
    Dim xxx, stylex, FBOLD, FUnderline, FItalic, FAllign, FName, fSize As String
    On Error Resume Next

    sName = Selection.Style.NameLocal
    FBOLD = "False"
    FUnderline = "False"
    FItalic = "False"
    
    I = 1
    xxx = "Normal"

    If styleExists("Normal10", ActiveDocument) = True Then xxx = "Normal_"
    If styleExists("Normal_10", ActiveDocument) = True Then xxx = "Normal__"
    If styleExists("Normal__10", ActiveDocument) = True Then xxx = "Normal___"
    If styleExists("Normal___10", ActiveDocument) = True Then xxx = "Normal____"
    If styleExists("Normal____10", ActiveDocument) = True Then xxx = "Normal_____"
    If styleExists("Normal_____10", ActiveDocument) = True Then xxx = "Normal______"
    If styleExists("Normal______10", ActiveDocument) = True Then xxx = "Normal_______"
    If styleExists("Normal_______10", ActiveDocument) = True Then xxx = "Normal________"
    If styleExists("Normal________10", ActiveDocument) = True Then xxx = "Normal_________"
    If styleExists("Normal_________10", ActiveDocument) = True Then xxx = "Normal__________"
    If styleExists("Normal__________10", ActiveDocument) = True Then xxx = "Normal___________"
    If styleExists("Normal___________10", ActiveDocument) = True Then xxx = "Normal____________"
    If styleExists("Normal____________10", ActiveDocument) = True Then xxx = "Normal_____________"
    If styleExists("Normal_____________10", ActiveDocument) = True Then xxx = "Normal______________"
    If styleExists("Normal______________10", ActiveDocument) = True Then xxx = "Normal_______________"
    If styleExists("Normal_______________10", ActiveDocument) = True Then xxx = "Normal________________"
    If styleExists("Normal________________10", ActiveDocument) = True Then xxx = "Normal_________________"
    If styleExists("Normal_________________10", ActiveDocument) = True Then xxx = "Normal__________________"
    If styleExists("Normal__________________10", ActiveDocument) = True Then xxx = "Normal___________________"
    If styleExists("Normal___________________10", ActiveDocument) = True Then xxx = "Normal____________________"
    If styleExists("Normal____________________10", ActiveDocument) = True Then xxx = "Normal_____________________"
    If styleExists("Normal_____________________10", ActiveDocument) = True Then xxx = "Normal______________________"
    If styleExists("Normal______________________10", ActiveDocument) = True Then xxx = "Normal_______________________"
    If styleExists("Normal_______________________10", ActiveDocument) = True Then xxx = "Normal________________________"
    If styleExists("Normal________________________10", ActiveDocument) = True Then xxx = "Normal_________________________"
    If styleExists("Normal_________________________10", ActiveDocument) = True Then xxx = "Normal__________________________"
    If styleExists("Normal__________________________10", ActiveDocument) = True Then xxx = "Normal___________________________"
    ''
    If styleExists("Normal 10", ActiveDocument) = True Then xxx = "Normal  "
    If styleExists("Normal  10", ActiveDocument) = True Then xxx = "Normal   "
    If styleExists("Normal   10", ActiveDocument) = True Then xxx = "Normal    "
    If styleExists("Normal    10", ActiveDocument) = True Then xxx = "Normal     "
    If styleExists("Normal     10", ActiveDocument) = True Then xxx = "Normal      "
    If styleExists("Normal      10", ActiveDocument) = True Then xxx = "Normal       "
    If styleExists("Normal       10", ActiveDocument) = True Then xxx = "Normal        "
    If styleExists("Normal        10", ActiveDocument) = True Then xxx = "Normal         "
    If styleExists("Normal         10", ActiveDocument) = True Then xxx = "Normal          "
    If styleExists("Normal          10", ActiveDocument) = True Then xxx = "Normal           "
    If styleExists("Normal           10", ActiveDocument) = True Then xxx = "Normal            "
    If styleExists("Normal            10", ActiveDocument) = True Then xxx = "Normal             "
    If styleExists("Normal             10", ActiveDocument) = True Then xxx = "Normal              "
    If styleExists("Normal              10", ActiveDocument) = True Then xxx = "Normal               "
    If styleExists("Normal               10", ActiveDocument) = True Then xxx = "Normal                "
    If styleExists("Normal                10", ActiveDocument) = True Then xxx = "Normal                 "
    If styleExists("Normal                 10", ActiveDocument) = True Then xxx = "Normal                  "
    If styleExists("Normal                  10", ActiveDocument) = True Then xxx = "Normal                   "
    If styleExists("Normal                   10", ActiveDocument) = True Then xxx = "Normal                    "
    If styleExists("Normal                    10", ActiveDocument) = True Then xxx = "Normal                     "
    If styleExists("Normal                     10", ActiveDocument) = True Then xxx = "Normal                      "
    If styleExists("Normal                      10", ActiveDocument) = True Then xxx = "Normal                       "
    If styleExists("Normal                       10", ActiveDocument) = True Then xxx = "Normal                        "
    If styleExists("Normal                        10", ActiveDocument) = True Then xxx = "Normal                         "
    If styleExists("Normal                         10", ActiveDocument) = True Then xxx = "Normal                          "
    If styleExists("Normal                          10", ActiveDocument) = True Then xxx = "Normal                           "

    ''


    For Each objStyle In ActiveDocument.Styles
        If objStyle.NameLocal Like xxx & "*" Then
            If Val(Mid(objStyle.NameLocal, Len(xxx) + 1, 10)) = I Then
                I = I + 1
            End If
        End If
    Next

    With Selection.Range
            
        FName = .Font.Name
        fSize = .Font.Size
        FBOLD = .Characters(1).Bold
        FUnderline = .Characters(1).Underline
        FItalic = .Italic
        'FAllign = .ParagraphFormat.alignment
        '  If .Font.Underline = WdConstants.wdUndefined Then
   
        For II = 1 To .Characters.Count
            If .Characters(II).Underline <> wdUnderlineNone Then myArray.Add II
            If .Characters(II).Bold <> False Or .Characters(II).BoldBi <> False Then myArrayb.Add II
        Next
        '   End If
    End With
    ActiveDocument.Styles.Add Name:=xxx & I, Type:=wdStyleTypeParagraph
    ActiveDocument.Styles(xxx & I).BaseStyle = sName
    ActiveDocument.Styles(xxx & I).ParagraphFormat.OutlineLevel = OTL
    '   ActiveDocument.Styles(xxx & i).ParagraphFormat.alignment = FAllign
    ActiveDocument.Styles(xxx & I).Font.Bold = False 'FBOLD
    ActiveDocument.Styles(xxx & I).Font.Underline = wdUnderlineNone 'FUnderline
    ActiveDocument.Styles(xxx & I).Font.Italic = FItalic
    ActiveDocument.Styles(xxx & I).Font.Size = fSize
    ActiveDocument.Styles(xxx & I).Font.Name = FName

    Selection.Range.Style = xxx & I
    With Selection.Range
        For II = 0 To myArray.Count
            .Characters(myArray(II)).Font.Underline = wdUnderlineSingle
        Next
        myArray.Clear
        For II = 0 To myArrayb.Count
            .Characters(myArray(II)).Font.Bold = True
        Next
        myArrayb.Clear
    End With

    


End Sub
Sub HHXList(n As Long)
    On Error Resume Next
    
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    DataObj.SetText ""
    DataObj.PutInClipboard
    Application.ScreenUpdating = False
    Selection.Expand wdParagraph
 
    If Application.Documents.Count < 1 Then Exit Sub
    Application.ScreenUpdating = False
    Application.DisplayAlerts = wdAlertsNone
    On Error Resume Next
    Dim X As Integer
    Dim m, Y  As Variant
    Dim para, lpara As Paragraph
    Dim fnt As Font
    Dim pfmt As ParagraphFormat
    Dim cc, ccc, CCCC As Boolean
    Dim III As Long
    Dim TCCHECK As Integer
    Dim myParas As Paragraphs
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
       
    Set myParas = Selection.Range.Paragraphs
    X = Selection.Range.Paragraphs.Count
    If X > 50 Then
        '  |fffd| = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Load MASSAGE_BOX
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = "You have reach the max limitaion of paragraph , please select smaller amount of paragraphs and perform this action once again"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        GoTo NXT
    End If
    If X > 5 Then
        pp = True
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Renove Heading Level "
        FractionComplete (0.1)
        
        Pi = 1
    End If
    For Each para In myParas
        FractionComplete (0.1 + 0.9 * Pi / X)
   
        Pi = Pi + 1
        cc = para.Range.ListFormat.SingleList
        If cc = False Then III = para.Range.ParagraphFormat.LeftIndent
                   
        If cc = True And para.Range.ListParagraphs.Count = 1 And para.Range.ListFormat.ListValue = 1 And para.Range.ListFormat.ListLevelNumber < 2 Then  'Selection.Paragraphs(1).Range.ListParagraphs.Count = 1
            ccc = True
        Else
            ccc = False
        End If
           
       
        para.Range.ParagraphFormat.OutlineLevel = wdOutlineLevelBodyText
  
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
            If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Font.BoldBi = True Then
                If para.Range.Font.Bold = True Or para.Range.Font.BoldBi = True Then CCCC = True
                
                para.Range.Words(1).Characters(1).Select
                Selection.Font.Bold = False
                Selection.Font.BoldBi = False
            
                para.Range.Select
                
                Call ListSuperH(wdOutlineLevelBodyText)
               
                If CCCC = True Then
                    para.Range.Select
                Else
                
                    para.Range.Words(1).Characters(1).Select
                End If
                Selection.Font.Bold = True
                Selection.Font.BoldBi = True
            
            Else
               
                Call ListSuperH(wdOutlineLevelBodyText)
              
            End If
        End If
        
        If para.Range.ParagraphFormat.OutlineLevel <> wdOutlineLevelBodyText Then
      
            para.Range.Select
            If para.Range.Words(1).Characters(1).Font.Bold = True Or para.Range.Words(1).Characters(1).Font.BoldBi = True Then
             
                para.Range.Words(1).Characters(1).Select
                Selection.Font.Bold = False
                Selection.Font.BoldBi = False
                para.Range.Select
                Call HHX
              '  Call HHCX
                If CCCC = True Then
                    para.Range.Select
                Else
                
                    para.Range.Words(1).Characters(1).Select
                End If
                Selection.Font.Bold = True
                Selection.Font.BoldBi = True
            Else
              
              '  Call HHCX
               Call HHX
            End If
        End If
        CCCC = False
        If cc = False Then
            para.Range.Select
            Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
            With Selection.ParagraphFormat
                .LeftIndent = III
                .SpaceBeforeAuto = False
                .SpaceAfterAuto = False
        
            End With
        Else
            '''
            If ccc = True Then
                '    MsgBox "BOOM"
                '      para.Range.Select
                '      With Selection
                '           Selection.Paragraphs(1).SelectNumber
                '           Selection.MoveLeft Unit:=wdCharacter, Count:=1
                '           Set myField = Selection.Fields.Add(Range:=Selection.Range, Type:=wdFieldEmpty, Text:=" LISTNUM  \l 1 \s 0 ")
                '       End With
                 
                '       myField.Select
                '      With Selection
                '           Selection.Range.Font.Hidden = True
                '       End With
                '    CCC = False
                '    Set myField = Nothing
            End If
           
        End If
        ' Set lpara = para
        If ccc = True And Selection.Range.ListFormat.ListValue <> "1" Then
            para.Select
            ' MsgBox para.Range.Text
            Application.CommandBars.ExecuteMso ("NumberingRestart")
        End If
    Next para
   
NXT:
    Unload Pro_Bar
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    Application.DisplayAlerts = wdAlertsAll
    Application.ScreenUpdating = True
End Sub

Sub headingsRemove()
  On Error Resume Next
    Dim StartTime As Double
    Dim SecondsElapsed As Double
    Dim ch As Integer
    'Remember time when macro starts
    StartTime = Timer
   
    Dim V As Variable
    Dim m, n As Variant
    Dim kkk, Q As Integer
    Dim para As Paragraph
    Dim colFontsUsed As New Collection
    kkk = 0
    Dim I As Integer
    Application.ScreenUpdating = False
   
    '  MsgBox m
    If ActiveDocument.Paragraphs.Count > 150 Then
        If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " This action might take several minute , in order to speed it up the application will run on backround, please wait until you recieve notification "
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "
        End If
        MASSAGE_BOX.Show
        Call speedOn(1)
    Else
        Unload Pro_Bar
        Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Headings Auto Tagging proccessing "
        FractionComplete (0.05)
    End If
    Dim kp As Integer
    Dim parar As Paragraph
    kkk = 0
    kp = ActiveDocument.Paragraphs.Count
    'For Each parar In ActiveDocument.Paragraphs
    For I = 1 To ActiveDocument.Paragraphs.Count
        Set parar = ActiveDocument.Paragraphs(I)
        kkk = kkk + 1
        Pro_Bar.Caption = "WeCo - Headings Auto Tagging proccessing "
        FractionComplete (0.05 + 0.95 * (kkk / kp))
        '
        parar.Range.Select
       
            If parar.OutlineLevel <> wdOutlineLevelBodyText Then
                parar.Range.Select
                Call HHXList(1)
            End If
           
    Next I
    ActiveDocument.Paragraphs(1).Range.Select
    Unload Pro_Bar
    SecondsElapsed = Round(Timer - StartTime, 2)
    Call speedOff(1)
    MsgBox "This code ran successfully in " & SecondsElapsed & " seconds", vbInformation
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        MASSAGE_BOX.TextBox1.Caption = " WeCo Auto Heading Tagging proccess was completed, please review the Document Headings before proceeding"
    Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    MASSAGE_BOX.Show
    Call speedOff(1)
End Sub
Attribute VB_Name = "pdexportMsg"
Attribute VB_Base = "0{93894E7A-3A2B-4F4E-8AFD-5FA9C17A8FE4}{618CE528-677F-4792-8A13-29CF0E03B774}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public dTime As Date

Sub KillUserForm()
    Unload pdexportMsg
End Sub


Private Sub CommandButton3_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    Dim StopTime As Date
    
    StopTime = DateAdd("s", 15, Now)
    Do
        DoEvents
    Loop Until Now > StopTime
    
    Unload Me
End Sub

Public Sub UserForm_Initialize()
    Dim Language As String
    Dim sDir As String
    Dim sFile As String
    Dim TextFile As Integer
 
    
    sDir = Application.StartupPath & "\"
    sFile = "weco.txt"
    Dim cc As control
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    If Docaddonproperties.AddinLanguage.Value = "English" Then
        Label1.Caption = "The Requested Document was saved at:"
        Label1.TextAlign = fmTextAlignCenter
        CommandButton3.Caption = "OK"
    End If
 
End Sub

Attribute VB_Name = "singleButtons"
Sub AccStatus(control As IRibbonControl)
    On Error Resume Next
    StatusForm.Show vbModeless
  
End Sub
Sub TableManipulationMan(control As IRibbonControl)
   On Error Resume Next
    Dim DataObj As New MSForms.DataObject 'empty the clipboard
    Dim c As Cell
    DataObj.SetText ""
    DataObj.PutInClipboard
    Dim dd, tn As Integer
      Dim colw As Variant
    Dim Tbl, oTable As Word.Table
    tn = ActiveDocument.Range(0, Selection.TableS(1).Range.End).TableS.Count
    If Selection.TableS.Count < 1 Then
        GoTo NXT3
    End If
    Dim TINdent
    Dim TW
    Dim maxc
    Dim TPW
    Dim col As Column
    Dim ci As Integer
   

    Application.ScreenUpdating = False
      Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05)
    Set Tbl = Selection.TableS(1)
  '************************************************************
   'n = Tbl.rows.Count
            '    nn = Tbl.Columns.Count
              'With Tbl
              
           
        Tbl.Select
         n = Tbl.rows.Count
                            With Tbl.Range.Find
                                .ClearFormatting
                                .Text = "^p"
                                .Replacement.ClearFormatting
                                .Replacement.Text = " "
                                .Execute Replace:=wdReplaceOne, Forward:=True, _
                                    Wrap:=wdFindContinue
                            End With
                  
                
              
              
               
  
  '*********************************************************
      
    
    Tbl.Select
    
    
    
    
    Selection.TableS(1).AutoFitBehavior (wdAutoFitFixed)
    TINdent = PointsToCentimeters(Selection.TableS(1).rows.LeftIndent)
   ' Selection.TableS(1).PreferredWidthType = wdPreferredWidthPoints
    TW = 0
    maxc = 0
    For ci = 1 To Selection.TableS(1).rows.Count
    If maxc <= Selection.TableS(1).rows(ci).Cells.Count Then
    maxc = Selection.TableS(1).rows(ci).Cells.Count
    maxci = ci
    End If
    Next
    'MsgBox maxci
Dim cc
TW = 0
For Each cc In Selection.TableS(1).rows(maxci).Cells

TW = TW + cc.Width
Next
'MsgBox TW
    
    TPW = (Selection.TableS(1).PreferredWidthType)
    'MsgBox TINdent & vbNewLine & TW & vbNewLine & TPW
    If Selection.TableS(1).Range.Cells.Count = Selection.TableS(1).Range.Columns.Count * Selection.TableS(1).Range.rows.Count Then
    '''''
     If Docaddonproperties.AddinLanguage.Value = "English" Then
            MASSAGE_BOX.TextBox1.Caption = " The selected table does not contain merged cells, if exist empty rows and columns will be delete"
        Else
            MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "
     
            MASSAGE_BOX.Show
            
            
        End If
    GoTo NXT3
    End If
    
    Tbl.AllowAutoFit = False
     colw = Selection.TableS(1).Columns(1).Width
    If Tbl.TableDirection = wdTableDirectionRtl Then
        dd = 1
    Else
        dd = 0
    End If
    Dim I, j, JJ, iRow, iCol As Integer
   ' Dim rng, RRR As Excel.Range
    Dim oCell As Cell
    Dim wdCell, tcell As Word.Cell
    Dim t As Table
    Dim Rng1 As Excel.Range
    
    Dim mergeText As String
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
    
   
    TC = 1
    j = 1
    tid = ""
    Set objExcel = CreateObject("Excel.Application")
    Excel.Application.DisplayAlerts = False
    objExcel.Visible = False
        Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.1)
                                
    Set objWorkbook = objExcel.Workbooks.Add
    Set ObjWorksheet = objWorkbook.Worksheets(1)
    ObjWorksheet.Range("1:1,A:A").NumberFormat = "@"
    If dd = 1 Then
        ObjWorksheet.DisplayRightToLeft = True
    Else
        ObjWorksheet.DisplayRightToLeft = False
    End If
    With ActiveDocument
  
   
    
        
           
           
        Tbl.Select
           
        Selection.Copy
     
        ObjWorksheet.Range("A1").Activate
   
        ActiveSheet.Paste
        
    
 
        Set Tbl = Selection.TableS(1)
        Tbl.Select
        
        '  Selection.Delete Unit:=wdCharacter, Count:=1
        '  Selection.Cells.Merge
        '  Tbl.Select
       
        Tbl.Select
        Selection.Find.ClearFormatting
    Selection.Find.Font.color = -603914241
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Font.color = wdColorAutomatic
        If Selection.Information(wdWithInTable) Then
            Selection.Columns(1).Select
            Selection.SetRange _
                start:=Selection.Cells(3).Range.start, _
                End:=Selection.End
            Selection.rows.Delete
        End If
        Tbl.Select
        '   Selection.Delete Unit:=wdCharacter, Count:=1
        '   Selection.Cells.Merge
      
        ' delete empty rows and columns from the excel
        LastRow = ObjWorksheet.UsedRange.rows.Count
        LastCol = ObjWorksheet.UsedRange.Columns.Count
        countR = 0
        countC = 0
              Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.15)
        For X = LastRow To 1 Step (-1)
            If objExcel.WorksheetFunction.CountA(ObjWorksheet.rows(X)) = 0 Then ObjWorksheet.rows(X).Delete
        Next X
                                  
        For Y = LastCol To 1 Step (-1)
            If objExcel.WorksheetFunction.CountA(ObjWorksheet.Columns(Y)) = 0 Then ObjWorksheet.Columns(Y).Delete
        Next Y
                                   
        ' copy data to the blank cells on row level
        LastRow = ObjWorksheet.UsedRange.rows.Count
        LastCol = ObjWorksheet.UsedRange.Columns.Count
           Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.2)
                              
    
        ObjWorksheet.Select
        ObjWorksheet.Cells.Select
   
        With Selection.Font
            '   .ColorIndex = xlAutomatic
  
        End With
        'ActiveSheet.Cells.UnMerge
        For Each Rng1 In ObjWorksheet.UsedRange.Cells
            Rng1.Select
            If Rng1.MergeCells Then
                With Rng1.MergeArea
                    .UnMerge
                    .Formula = Rng1.Formula
                End With
            End If
        Next
            Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
        Q = 1
       FractionComplete (0.25)
        For Each Rng1 In ObjWorksheet.UsedRange.Cells
            Rng1.Select
            '''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If IsNumeric(Rng1) And Q = 1 Then
                If Rng1.Value < 0 Then
                    SF = Len(Split(Rng1.Value, ".")(1))
                    Select Case SF
                        Case "0"
                            Rng1.NumberFormat = "#,##0;(#,##0);""-"""
                        Case "1"
                            Rng1.NumberFormat = "#,##0.0;(#,##0.0);""-"""
                        Case "2"
                            Rng1.NumberFormat = "#,##0.00;(#,##0.00);""-"""
                        Case "3"
                            Rng1.NumberFormat = "#,##0.000;(#,##0.000);""-"""
                        Case "4"
                            Rng1.NumberFormat = "#,##0.0000;(#,##0.0000);""-"""
                        Case "5"
                           Rng1.NumberFormat = "#,##0.00000;(#,##0.00000);""-"""
                        Case Else
                         Rng1.NumberFormat = "#,##0;(#,##0);""-"""
                    End Select
                
                End If
            End If
            If dd = 1 Then
                Rng1.ReadingOrder = xlRTL
                Rng1.HorizontalAlignment = xlRight
               
                '  Rng1.Font.ColorIndex = xlAutomatic
            Else
                '  Rng1.Font.ColorIndex = xlAutomatic
               
            End If
              Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.27)
        Next Rng1
        Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.35)
        ObjWorksheet.UsedRange.Select
        ObjWorksheet.UsedRange.EntireColumn.AutoFit
        ObjWorksheet.UsedRange.EntireRow.AutoFit
        ObjWorksheet.UsedRange.Copy

       
        Tbl.Select
        Selection.PasteExcelTable _
            LinkedToExcel:=False, _
            WordFormatting:=False, _
            RTF:=False
        Set Tbl = ActiveDocument.TableS(tn)
        '     Selection.PasteExcelTable False, False, True
      '  Tbl.rows(Tbl.rows.Count).Delete
           Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.4)
        'formating the word table
       ' Tbl.AutoFitBehavior (wdAutoFitWindow)
        'Tbl.AutoFitBehavior (wdAutoFitFixed)
        ' Tbl.AutoFitBehavior (wdAutoFitContent)
        Selection.Cells.PreferredWidth = 0
        '''

  
        
        Tbl.ApplyStyleHeadingRows = Not Tbl. _
            ApplyStyleHeadingRows
        Tbl.ApplyStyleFirstColumn = Not Tbl. _
            ApplyStyleFirstColumn
        Tbl.ApplyStyleRowBands = Not Tbl. _
            ApplyStyleRowBands

        Tbl.rows.HeightRule = wdRowHeightAuto
      
        If dd = 1 Then
            Tbl.ParagraphFormat.alignment = wdAlignParagraphRight
        Else
            Tbl.ParagraphFormat.alignment = wdAlignParagraphLeft
        End If
            Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.5)
        Tbl.Select
        With Selection.Find
            .ClearFormatting
            .Replacement.ClearFormatting
            'Here is where it is actually looking for spaces between words
            .Text = " [ ]@([! ])"
            'This line tells it to replace the excessive spaces with one space
            .Replacement.Text = " \1"
            .MatchWildcards = True
            .Wrap = wdFindStop
            .Format = False
            .Forward = True
            'execute the replace
            .Execute Replace:=wdReplaceAll
        End With
            Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.6)
         Tbl.Select
          Selection.Find.ClearFormatting
    Selection.Find.Font.color = wdColorWhite
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Font.color = wdColorAutomatic
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
     
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
       For Each c In Tbl.Range.Cells
           c.Range.ParagraphFormat.SpaceAfter = 0
         
     Next
     If Tbl.rows.Last.Cells.Count <> Tbl.rows(1).Cells.Count Then Tbl.rows.Last.Cells.Delete
NXT2:
         Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.8)
    End With
    Tbl.Select
    Tbl.Columns(1).Width = colw
NXT3:
    ObjWorksheet.Cells.Delete
    ObjWorksheet.Cells.Clear
    Excel.Application.DisplayAlerts = True
    objExcel.Close
    objWorkbook.Close False
    Kill objExcel
    If objExcel.Open = True Then
        Excel.Application.Close
    End If
    Set objExcel = Nothing
    Set objWorkbook = Nothing
    Set ObjWorksheet = Nothing
    Tbl.Select
   ' Selection.TableS(1).PreferredWidthType = TPW
     Selection.TableS(1).rows.LeftIndent = CentimetersToPoints(TINdent)
     Selection.TableS(1).PreferredWidth = (TW)
     
   ' Selection.TableS(1).rows.LeftIndent = CentimetersToPoints(1.75)
   ' Selection.TableS(1).PreferredWidthType = wdPreferredWidthPoints
   ' Selection.TableS(1).PreferredWidth = CentimetersToPoints(16.24)
     
     
  '  MsgBox TINdent & "-" & CentimetersToPoints(TINdent) & vbNewLine & TW & "-" & CentimetersToPoints(TW) & vbNewLine & TPW
    Call TableEmptyRowsCol(1)
    
    Tbl.rows(1).Select
  '  Selection.Borders(wdBorderTop).LineStyle = wdLineStyleNone
     
    Tbl.Select
    Application.ScreenUpdating = True
        Pro_Bar.Caption = "WeCo -Table Proccesing "
        Pro_Bar.Label1.Caption = "90" & "% Completed"
       FractionComplete (0.9)
       Unload Pro_Bar
    objWorkbook.Close SaveChanges:=False
  
   objExcel.Quit
   
    Set objExcel = Nothing
    Set ObjWorksheet = Nothing
    Set objWorkbook = Nothing

    Err.Clear
    End
End Sub
Sub ACCWord_ExportPDF(control As IRibbonControl)
    On Error Resume Next
    If Application.Documents.Count < 1 Then
         Load MASSAGE_BOX
          If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Please save the document before PDF generation"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| PDF"
        End If
               MASSAGE_BOX.Show

        Exit Sub
    End If
    
    Call Word_ExportPDF(1)
End Sub

Sub AccWizard(control As IRibbonControl)
On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    Unload DocMetaData
   If DocMetaData.Visible = True Then Unload DocMetaData
 
  Dim m As Variant
  '  Unload DocMetaData
    
    If ActiveDocument.Name <> "*docx" Then
    'If Docaddonproperties.DocFormat.Value = "Word" Then
        ActiveDocument.Convert
    
   ' End If
   End If
NXT:
    'ActiveDocument.Save
  
   If ActiveDocument.Path = "" Then ' If ActiveDocument.Saved = False Then
     Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "The Document was not saved, please save it before you continue "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
 
       If m = 2 Then
       Exit Sub
       Else
        ActiveDocument.Save
        GoTo NXT
        End If
    End If
    DocMetaData.Show vbModeless
     If Docaddonproperties.AddinLanguage.Value = "English" Then
      ActiveDocument.BuiltInDocumentProperties("Comments").Value = "Document Properties" & Chr(10)
     Else
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(10)
     End If
End Sub

Sub AccWizardcon(control As IRibbonControl)
On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next
    'Login.Show
    Docaddonproperties.Show vbModeless
End Sub

Sub ACCdoctableshow(control As IRibbonControl)
On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
    On Error Resume Next

    DocTables.Show vbModeless
     ActiveDocument.BuiltInDocumentProperties("Comments").Value = "|fffd||fffd||fffd| 3 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Chr(10)
End Sub


Public Function isComplexx(rows As Collection, t As Table) As Boolean
  
    isComplexx = False
    
    Dim c As Cell
    Dim rIndex As Integer
    Dim rIndexPrev As Integer
    Dim cIndex As Integer
    Dim cIndexPrev As Integer
    Dim cellsPerRow As Integer
    
    Set rows = New Collection
    
    Set c = t.Cell(1, 1)
    
    rIndex = 0
    rIndexPrev = 0
    cIndex = 0
    cIndexPrev = 0
    Do While Not c Is Nothing
    
        rIndex = c.RowIndex
        
        ''new row
        If rIndex > rIndexPrev Then
            Dim ro As Collection
            Set ro = New Collection
            rows.Add ro
            
            ''if this is the second row, remember num cells in first row
            If rIndex = 2 Then
                cellsPerRow = cIndexPrev
           
                ''if this is third row or above
            ElseIf rIndex > 2 Then
                If cellsPerRow <> cIndexPrev Then
                    isComplexx = True
                    Exit Function
                End If
            End If
            
            cIndexPrev = 0
            rIndexPrev = rIndex
        End If
        
        cIndex = c.ColumnIndex
        ''rowspan from above - table is complex
        If cIndex <> cIndexPrev + 1 Then
            isComplexx = True
            Exit Function
        End If
    
        ro.Add c
        
        cIndexPrev = cIndex
        
        Set c = c.Next
    Loop
End Function
Public Sub addBookmarkToTables(bookmarkName As String, repeatHeadersAcrossPages As Boolean)

    Dim t As Table
    Dim a As Range
    Dim I As Integer
    Dim b As Bookmark
    Dim cStart As Long
    Dim cEnd As Long
    Dim dummy As Collection

    Dim numTables As Integer
    Dim s As String
    Dim k As Integer

    If Selection.TableS.Count < 1 Then
        StatusBar = "No tables selected"
        Exit Sub
    End If
    
    numTables = ActiveDocument.TableS.Count
    
    I = ActiveDocument.Range(0, Selection.TableS(1).Range.End).TableS.Count
    
    For Each t In Selection.TableS
    
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        ''first get rid of all data table related bookmarks
        ''SAME CODE as in "checkTableStatus" function
        Dim bName As String
        For Each b In t.Range.Bookmarks
            ''if inside table
            If b.Range.start >= t.Range.start And b.Range.End <= t.Range.End Then
                bName = Trim(LCase(b.Name))
                If InStr(bName, "title") = 1 Or InStr(bName, "columntitle") = 1 Or InStr(bName, "rowtitle") = 1 Then
                    b.Delete
                End If
            End If
        Next b
        '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        
        ''Adjust repeated headings as needed - needs to be done for layout tables as well
        If repeatHeadersAcrossPages Then
            ''repeat row header across all pages - t.rows.first gives error if complex table
            t.Cell(1, 1).Range.rows.HeadingFormat = True
            ''used to be t.rows.headingFormat = true
            ''macro does this: ''Selection.Rows.HeadingFormat = wdToggle
        Else
            t.Cell(1, 1).Range.rows.HeadingFormat = False
        End If
            
            
        ''if not layout table, add the actual bookmark
        If bookmarkName <> "layout" Then
    
            ''make new bookmarkname
            ''bookmarkName argument is either  "Title_", "ColumnTitle_" or "RowTitle_"
            s = bookmarkName & I
            k = numTables
            Do While ActiveDocument.Bookmarks.Exists(s)
                k = k + 1
                s = bookmarkName & I & k
                ''have loop check here xxxxx
            Loop
                    
            ''NOTE: collapsing range voids the effect it has on JAWS, so don't do that
            
            If bookmarkName = "Title_" Then
            
                ''adding bookmark to first cell in table
                Set a = t.Cell(1, 1).Range
                ActiveDocument.Bookmarks.Add Range:=a, Name:=s
            
            ElseIf bookmarkName = "ColumnTitle_" Then
             
                If Not isComplexx(dummy, t) Then
                    Set a = t.rows.First.Range
                    ActiveDocument.Bookmarks.Add Range:=a, Name:=s
                Else
                    Set a = t.Cell(1, 1).Range
                    ActiveDocument.Bookmarks.Add Range:=a, Name:=s
                End If
            
            ElseIf bookmarkName = "RowTitle_" Then
                
                ''t.Uniform is True if all the rows in a table have the same number
                ''of columns. Read-only Boolean.
                ''t.Columns.First will FAIL if cells have different preferred widths
                ''even when table looks completely uniform !!!!!!
                If Not isComplexx(dummy, t) Then
                    
                    t.Columns.First.Select
                    ActiveDocument.Bookmarks.Add Range:=Selection, Name:=s
                
                Else
                    Set a = t.Cell(1, 1).Range
                    ActiveDocument.Bookmarks.Add Range:=a, Name:=s
    
                End If
            End If
        
        End If ''end if not a layout table
        
        I = I + 1
    Next t
    
    
    Dim numTabs As Integer
    numTabs = Selection.TableS.Count
    
    If numTabs = 1 Then
        StatusBar = Selection.TableS.Count & " table done as " & bookmarkName
    Else
        StatusBar = Selection.TableS.Count & " tables done as " & bookmarkName
    End If
    
End Sub

Sub wecoDeleteEmptyTablerowsandcolumns(control As IRibbonControl)
On Error Resume Next
    Application.ScreenUpdating = False

    Dim Tbl As Table, cel As Cell, I As Long, n As Long, fEmpty As Boolean
    
    

    With Selection
        If Selection.TableS.Count <> 1 Then
           Load MASSAGE_BOX
            If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " No Table was selected "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show

            Exit Sub
        End If
        '''
        
        '''
        Set Tbl = Selection.TableS(1)
        '''
        With Selection
            Tbl.Select
            'On Error GoTo mergeerror

            If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                Err.Number = 5991
                GoTo mergeerror
            End If
        End With
        '''
        If Tbl.rows.Count <> Tbl.Columns(1).Cells.Count Then
            Err.Number = 5991
            GoTo mergeerror
        End If
        If Tbl.Columns.Count <> Tbl.rows(1).Cells.Count Then
            Err.Number = 5992
            GoTo mergeerror
        End If
        n = Tbl.Columns.Count
        For I = n To 1 Step -1
            fEmpty = True
            For Each cel In Tbl.Columns(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.Columns(I).Delete
        Next I


        n = Tbl.rows.Count
        
        For I = n To 2 Step -1
            fEmpty = True
            For Each cel In Tbl.rows(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.rows(I).Delete
        Next I
 
 
    End With
    Application.ScreenUpdating = True
    Exit Sub
    'Tbl.AutoFitBehavior (wdAutoFitWindow)
mergeerror:
    'End With
    If Err.Number <> 0 Then
        Err.Clear
                
   
          Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Merged Cells was detected on the selected Table, please edit the Table"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
        ' If m = 6 Then Call TableManipulation(k)
    End If

    Application.ScreenUpdating = True
End Sub
Public Function wecoDeletetableemptyRC() As Integer
    Application.ScreenUpdating = False

    Dim Tbl As Table, cel As Cell, I As Long, n As Long, fEmpty As Boolean
    
    

    With Selection
       
        '''
        
        '''
        Set Tbl = Selection.TableS(1)
        '''
        With Selection
            Tbl.Select
            On Error GoTo mergeerror

            If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                Err.Number = 5991
                GoTo mergeerror
            End If
        End With
        '''
        If Tbl.rows.Count <> Tbl.Columns(1).Cells.Count Then
            Err.Number = 5991
            GoTo mergeerror
        End If
        If Tbl.Columns.Count <> Tbl.rows(1).Cells.Count Then
            Err.Number = 5992
            GoTo mergeerror
        End If
        n = Tbl.Columns.Count
        For I = n To 1 Step -1
            fEmpty = True
            For Each cel In Tbl.Columns(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.Columns(I).Delete
        Next I


        n = Tbl.rows.Count
        
        For I = n To 2 Step -1
            fEmpty = True
            For Each cel In Tbl.rows(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.rows(I).Delete
        Next I
 
 
    End With
    Application.ScreenUpdating = True
    Exit Function
    'Tbl.AutoFitBehavior (wdAutoFitWindow)
mergeerror:
    'End With
    If Err.Number <> 0 Then
        Err.Clear
     wecoDeletetableemptyRC = 1
   Else
   wecoDeletetableemptyRC = 0
    End If
    
    Application.ScreenUpdating = True
End Function

Sub TableEmptyRowsCol(II As Integer)
Application.ScreenUpdating = False

    Dim Tbl As Table, cel As Cell, I As Long, n As Long, fEmpty As Boolean
    
    

    With Selection
        If Selection.TableS.Count <> 1 Then
           Load MASSAGE_BOX
       If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " No Table was selected "
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
        
            Exit Sub
        End If
        '''
        
        '''
        Set Tbl = Selection.TableS(1)
        '''
        With Selection
            Tbl.Select
            'On Error GoTo mergeerror

            If .Range.rows.Count * .Range.Columns.Count <> .Range.Cells.Count Then
                Err.Number = 5991
                GoTo mergeerror
            End If
        End With
        '''
        If Tbl.rows.Count <> Tbl.Columns(1).Cells.Count Then
            Err.Number = 5991
            GoTo mergeerror
        End If
        If Tbl.Columns.Count <> Tbl.rows(1).Cells.Count Then
            Err.Number = 5992
            GoTo mergeerror
        End If
        n = Tbl.Columns.Count
        For I = n To 1 Step -1
            fEmpty = True
            For Each cel In Tbl.Columns(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.Columns(I).Delete
        Next I


        n = Tbl.rows.Count
        
        For I = n To 2 Step -1
            fEmpty = True
            For Each cel In Tbl.rows(I).Cells
                If Len(cel.Range.Text) > 2 Then
                    fEmpty = False
                    Exit For
                End If
            Next cel
            If fEmpty = True Then Tbl.rows(I).Delete
        Next I
 
 
    End With
    Application.ScreenUpdating = True
    Exit Sub
    'Tbl.AutoFitBehavior (wdAutoFitWindow)
mergeerror:
    'End With
    If Err.Number <> 0 Then
        Err.Clear
                
  
          Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Merged Cells was detected, Please edit the table"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
    
    End If

    Application.ScreenUpdating = True
End Sub

Sub mergeCellData(control As IRibbonControl)
On Error Resume Next
    If Selection.Cells.Count < 2 Then
     If Docaddonproperties.AddinLanguage.Value = "English" Then
   MsgBox "Please select Range of Cells before you perform this action"
  Else
   
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    End If
    Exit Sub
    End If
    Application.ScreenUpdating = False
     Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo -Table cells merge Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.05)
    On Error Resume Next
    Dim iRow, iCol, I, isrow, iscol As Integer
    Dim rng As Range
    Dim mySelRange As Range
    Dim cflinestyle, cflinewidth, cflinecolor As Variant
    Set mySelRange = Selection
    
    Dim mergeText As String
    iRow = Selection.rows.Count
    iCol = Selection.Columns.Count
    isrow = Selection.Cells(1).RowIndex
    iscol = Selection.Cells(1).ColumnIndex
  Pro_Bar.Caption = "WeCo -Table cells merge Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.1)
    For I = iscol To iCol + iscol - 1
        Selection.TableS(1).Cell(isrow + iRow - 1, I).Select
        With Selection.Borders(wdBorderBottom)
            cflinestyle = .LineStyle
            cflinewidth = .LineWidth
            cflinecolor = .color
        End With
        ''
       
        ''
        With Selection.TableS(1)
            Set rng = .Cell(isrow, I).Range
            rng.End = .Cell(isrow + iRow - 1, I).Range.End
            rng.Select
  
        End With
        
        With rng.Borders(wdBorderBottom)
            '        With Selection.Borders(wdBorderBottom)
            .LineStyle = cflinestyle
            .LineWidth = cflinewidth
            .color = cflinecolor
        End With
        Selection.Cells.Merge
         Selection.MoveDown Unit:=wdLine, Count:=1
        With Selection.Borders(wdBorderTop)
        .LineStyle = cflinestyle
            .LineWidth = cflinewidth
            .color = cflinecolor
        End With
          Pro_Bar.Caption = "WeCo -Table cells merge Proccesing "
        Pro_Bar.Label1.Caption = 10 & "% Completed"
       FractionComplete (0.1 + 0.9 * I / (iCol + iscol - 1))
    Next I
   Application.ScreenUpdating = True
    Unload Pro_Bar
    '
End Sub

Sub TableSplit(control As IRibbonControl)
    On Error Resume Next
    If Application.Documents.Count < 1 Then Exit Sub
   
    
    On Error GoTo NXT
    Selection.InsertRowsAbove 1
    Selection.rows.ConvertToText Separator:=wdSeparateByTabs, NestedTables:= _
        True
        
NXT:
    If Err.Number <> 0 Then
        Load MASSAGE_BOX
         If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " No Table was selected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
    
        Err.Clear
    End If
End Sub

Sub TableFlip(n As Integer)
  On Error Resume Next
  Dim sdirection, ddirection As String
  
   Dim j As Integer
  Dim cellcheck As Integer
   Dim myArray As Collection
   Set myArray = New Collection
    Dim TW As Variant
    Dim Tbl As Table, cel As Cell, I As Long
    Dim Lefti, Righti
    With Selection
        If .TableS.Count <> 1 Then
         If Docaddonproperties.AddinLanguage.Value = "English" Then
 Usr = MsgBox("Please Select single Table", vbOKOnly, "")
  Else
            Usr = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "")
            End If
            Exit Sub
        End If
    End With
    cellcheck = 0
    Application.ScreenUpdating = False
     Set Tbl = Selection.TableS(1)
     Tbl.Select

     If Tbl.Columns.Count * Tbl.rows.Count <> Tbl.Range.Cells.Count Then
       If Docaddonproperties.AddinLanguage.Value = "English" Then
 Usr = MsgBox("Can't Execute this Action, since your table contain merged Cells", vbOKOnly, "")
  Else
         Usr = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "")
         End If
         GoTo NEXTEND
    End If
     Tbl.AutoFitBehavior (wdAutoFitFixed)
     If Tbl.rows.HorizontalPosition = wdTableLeft Then
      HorizontalP = wdTableRight
      Lefti = Tbl.rows.DistanceLeft
      Righti = Tbl.rows.DistanceRight
      Else
       Lefti = Tbl.rows.DistanceRight
      Righti = Tbl.rows.DistanceLeft
      End If
    With Tbl.rows
        .WrapAroundText = True
        .HorizontalPosition = wdTableRight
        .RelativeHorizontalPosition = wdRelativeHorizontalPositionColumn
        .DistanceLeft = CentimetersToPoints(Lefti) 'CentimetersToPoints(0.32)
        .DistanceRight = CentimetersToPoints(Righti) 'CentimetersToPoints(0.32)
        .VerticalPosition = CentimetersToPoints(0)
        .RelativeVerticalPosition = wdRelativeVerticalPositionParagraph
        .DistanceTop = CentimetersToPoints(0)
        .DistanceBottom = CentimetersToPoints(0)
        .AllowOverlap = False
    End With
     sdirection = Tbl.TableDirection
     If sdirection = wdTableDirectionLtr Then
     ddirection = wdTableDirectionRtl
     Else
      ddirection = wdTableDirectionLtr
     End If
    Tbl.TableDirection = ddirection
     

   myArray.Add "Values"
   j = 0
    For I = 1 To Tbl.Columns.Count
      j = j + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (j / Tbl.Columns.Count * 3)
      
    myArray.Add PointsToCentimeters(Val(Tbl.Cell((Tbl.rows.Count), I).Width))

    Next I
    For I = 1 To Tbl.Columns.Count
      j = j + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (j / Tbl.Columns.Count * 3)
      
    myArray.Add PointsToCentimeters(Val(Tbl.Cell((Tbl.rows.Count), I).Width))
     Tbl.Columns(Tbl.Columns.Count).Select
      Selection.Cut
      Tbl.Columns(I).Select
    Selection.PasteAndFormat (wdPasteDefault)
    Next I
    Tbl.Columns(Tbl.Columns.Count).Select
      Selection.Cut
      Tbl.Columns(I).Select
    Selection.PasteAndFormat (wdPasteDefault)
    Tbl.Select
   ' Tbl.PreferredWidthType = wdPreferredWidthPoints
    Tbl.AutoFitBehavior (wdAutoFitFixed)
     'Tbl.Columns.PreferredWidth = CentimetersToPoints(tw)
    
  For I = 1 To Tbl.Columns.Count
   j = j + 1
       Pro_Bar.Show vbModeless
        Pro_Bar.Caption = "WeCo - Table processing "
        FractionComplete (j / Tbl.Columns.Count * 3)
  Tbl.Columns(I).Select
  Selection.Columns.PreferredWidthType = wdPreferredWidthPoints
  Selection.Columns.PreferredWidth = CentimetersToPoints(myArray(Tbl.Columns.Count - I + 2))

 
    Next I

NEXTEND:
 myArray.Clear
  Unload Pro_Bar
  Application.ScreenUpdating = True
End Sub

Sub NewDocAcc(control As IRibbonControl)
    On Error Resume Next
    Dim lang
    Dim mm, mmb, mma
    Dim docNew As Document
    Set docNew = Documents.Add

    mm = LinesToPoints(NewDocDesign.NewDOC_FONT_Linespace.Value)

    '   objword.Visible = True
    '   Set objdoc = objword.Documents.Add
    With docNew
        Selection.WholeStory
        If NewDocDesign.NewDOC_ReadingOrder.Value = "Right to Left" Then
            Selection.WholeStory
            Selection.RtlPara
            
        Else
            Selection.WholeStory
            Selection.LtrPara
        End If
            
        Select Case NewDocDesign.NewDOC_Language
            Case "|fffd||fffd||fffd||fffd||fffd|"
                lang = wdHebrew
            Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
                lang = wdEnglishUS
            Case "|fffd||fffd||fffd||fffd||fffd|"
                lang = wdArabic
            Case "|fffd||fffd||fffd||fffd||fffd|"
                lang = wdRussian
            Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
                lang = wdSpanish
            Case "Hebrew"
                lang = wdHebrew
            Case "English"
                lang = wdEnglishUS
            Case "Arabic"
                lang = wdArabic
            Case "Russian"
                lang = wdRussian
            Case "Spanish"
                lang = wdSpanish
        End Select
        Selection.LanguageID = lang
        Application.Keyboard (lang)
        Dim sty As Word.Style
        For Each sty In docNew.Styles
            If sty.InUse And sty.Type = wdStyleTypeParagraph Then
                sty.Font.Name = NewDocDesign.NewDOC_FONT_NAME.Value
                sty.Font.NameBi = NewDocDesign.NewDOC_FONTBi_NAME.Value
                sty.Font.Size = NewDocDesign.NewDOC_FONT_Size.Value
                sty.Font.SizeBi = NewDocDesign.NewDOC_FONTBi_Size.Value
                sty.LanguageID = lang
                sty.ParagraphFormat.LineSpacing = mm
         
            End If
        Next
        With docNew.PageSetup
            .TopMargin = CentimetersToPoints(NewDocDesign.NewDOC_Top.Value)
            .BottomMargin = CentimetersToPoints(NewDocDesign.NewDOC_Buttom.Value)
            .LeftMargin = CentimetersToPoints(NewDocDesign.NewDOC_Left.Value)
            .RightMargin = CentimetersToPoints(NewDocDesign.NewDOC_Right.Value)
        End With
    End With
    docNew.Activate
    'objdoc.Activate
End Sub
Sub AboutWeCo(control As IRibbonControl)
On Error Resume Next
   AboutForm.Show vbModeless
End Sub


Sub tablefliper(control As IRibbonControl)
On Error Resume Next
  Call TableFlip(1)
End Sub
Attribute VB_Name = "singleLink"
Attribute VB_Base = "0{FD127684-F168-46AD-ADDA-1E3CDE04171A}{74F1E7D5-8CEA-40D6-A08E-AD27E79903C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton3_Click()
    Me.UndoAction
    Me.Hide
    Unload Me
    DocShapes.NextOlink.Value = 1
    Call UserForm_Initialize
End Sub



Private Sub CommandButton6_Click()
   Dim I As Integer
    On Error Resume Next
   On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If

    With Selection
        
        .Select
        
        
        ''
        If .Hyperlinks(1).Address = "" Then
        Temp = .Range.Text
         Selection.Range.Hyperlinks(1).Range.Fields(1).Result.Select
         Selection.Range.Hyperlinks(1).Delete
         ActiveDocument.Hyperlinks.Add Anchor:=Selection.Range, Address:= _
       Temp, SubAddress:="", ScreenTip:=" ", _
        TextToDisplay:=Temp
    Selection.Collapse Direction:=wdCollapseEnd
        ''
       End If
        If Trim(Me.TextBox1.Text) = "" Then
            .Hyperlinks(1).ScreenTip = " "
        Else
            .Hyperlinks(1).ScreenTip = Trim(Me.TextBox1.Text)
        End If
        If Trim(Me.TextBox3.Text) = "" Then
            .Hyperlinks(1).TextToDisplay = " "
        Else
            .Hyperlinks(1).TextToDisplay = Trim(Me.TextBox3.Text)
             If Trim(Me.TextBox1.Text) = "" Then .Hyperlinks(1).ScreenTip = Trim(Me.TextBox3.Text)
        End If
    End With
    If Docaddonproperties.HLReject = True Then
    For I = 1 To 10
          If Trim(Me.TextBox3.Text) Like getAdmSetting0("HL_Reject_Text_" & I) And Trim(getAdmSetting0("HL_Reject_Text_" & I)) <> "" Then
            Load MASSAGE_BOX
               If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Your Organization Policy dows not allow this text, please update it before you continue"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
          Exit Sub
          End If
    Next
    End If
    Me.Hide
    Unload Me
    
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
  
    Call UserForm_Initialize
     
End Sub

Private Sub TextBox1_Change()
    'Me.TextBox2.Text = Me.TextBox1.Text
End Sub

Public Sub UserForm_Initialize()
    On Error Resume Next
   
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
       If DocMetaData.DocFormat.Value = "Word" Then
        Me.Label1.Visible = True
        Me.TextBox1.Visible = True
        Me.TextBox3.Top = 78
        Me.TextBox3.Height = 33
    Else
        Me.Label1.Visible = False
        Me.TextBox1.Visible = False
        Me.Label2.Top = 12
        Me.TextBox3.Top = 24
        Me.TextBox3.Height = 78
    End If
    With Selection
       With Selection
        Me.TextBox1 = .Hyperlinks(1).ScreenTip
        Me.TextBox3 = .Hyperlinks(1).TextToDisplay
    End With
        
        
      
    End With
    With Selection
        Me.TextBox1 = .Hyperlinks(1).ScreenTip
        Me.TextBox3 = .Hyperlinks(1).TextToDisplay
    End With
       If Docaddonproperties.AddinLanguage.Value = "English" Then
       Label1.Caption = "Please Enter Hyperlink Tool TIp"
       Label1.TextAlign = fmTextAlignLeft
       Label1.Left = 6
        Label2.Caption = "Please Enter Hyperlink  Text to Display"
       Label2.TextAlign = fmTextAlignLeft
       Label2.Left = 6
       CommandButton6.Caption = "OK"
       CommandButton3.Caption = "Cancel"
       Else
       End If
End Sub
Attribute VB_Name = "singleLinkStory"
Attribute VB_Base = "0{774F8ACC-B669-45AA-9492-C2918EB91D63}{0B744CC2-B0B5-4D4A-917A-891792B2A08C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton3_Click()
    Me.UndoAction
    Me.Hide
    Unload Me
    Call UserForm_Initialize
End Sub



Public Sub CommandButton6_Click()
    On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
'
    With Selection
        
        .Select
       
        If Trim(Me.TextBox1.Text) = "" Then
            .Hyperlinks(1).ScreenTip = " "
        Else
            .Hyperlinks(1).ScreenTip = Trim(Me.TextBox1.Text)
        End If
         If Trim(Me.TextBox3.Text) = "" Then
            .Hyperlinks(1).TextToDisplay = " "
        Else
            .Hyperlinks(1).TextToDisplay = Trim(Me.TextBox3.Text)
                If Trim(Me.TextBox1.Text) = "" Then .Hyperlinks(1).ScreenTip = Trim(Me.TextBox3.Text)
        End If
    End With
     If Docaddonproperties.HLReject = True Then
    For I = 1 To 10
          If Trim(Me.TextBox3.Text) Like getAdmSetting0("HL_Reject_Text_" & I) And Trim(getAdmSetting0("HL_Reject_Text_" & I)) <> "" Then
            Load MASSAGE_BOX
             If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Your Organization Policy does not allow using this text, please update it before you continue"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
          Exit Sub
          End If
    Next
    End If
    Me.Hide
    Unload Me
    Me.TextBox1.Value = ""
    Me.TextBox2.Value = ""
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    ''need to check this line
    Call UserForm_Initialize
     
End Sub

Private Sub TextBox1_Change()
    'Me.TextBox2.Text = Me.TextBox1.Text
End Sub

Public Sub UserForm_Initialize()
    On Error Resume Next
  
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    
      If DocMetaData.DocFormat.Value = "Word" Then
        Me.Label1.Visible = True
        Me.TextBox1.Visible = True
        Me.TextBox3.Top = 78
        Me.TextBox3.Height = 33
    Else
        Me.Label1.Visible = False
        Me.TextBox1.Visible = False
        Me.Label2.Top = 12
        Me.TextBox3.Top = 24
        Me.TextBox3.Height = 78
    End If
    With Selection
        Me.TextBox1 = .Hyperlinks(1).ScreenTip
        Me.TextBox3 = .Hyperlinks(1).TextToDisplay
    End With
End Sub
Attribute VB_Name = "singleLinkss"
Attribute VB_Base = "0{D3DF9035-1663-409B-86FA-5AF7806FC784}{04C3ED1C-5C11-491B-90B1-E2FF122E9D8A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private iTabNum As Integer
Private aNumItems(6) As Integer
Private aLastLoc(6, 1) As Integer
Public Sub CommandButton3_Click()
On Error Resume Next
    Me.UndoAction
    Me.Hide
    Unload Me
   ' Call UserForm_Initialize
End Sub



Public Sub CommandButton6_Click()
    On Error Resume Next
    
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If

    With Selection
        
        .Select
       
        If Trim(Me.HLToolTip.Text) = "" Then
            .Hyperlinks(1).ScreenTip = " "
        Else
            .Hyperlinks(1).ScreenTip = Trim(Me.HLToolTip.Text)
        End If
        If Trim(Me.HLText.Text) = "" Then
            .Hyperlinks(1).TextToDisplay = " "
        Else
            .Hyperlinks(1).TextToDisplay = Trim(Me.HLText.Text)
                If Trim(Me.HLToolTip.Text) = "" Then .Hyperlinks(1).ScreenTip = Trim(Me.HLText.Text)
        End If
    End With
     If Docaddonproperties.HLReject = True Then
    For I = 1 To 10
          If Trim(Me.HLText.Text) Like getAdmSetting0("HL_Reject_Text_" & I) And Trim(getAdmSetting0("HL_Reject_Text_" & I)) <> "" Then
            Load MASSAGE_BOX
             If Docaddonproperties.AddinLanguage.Value = "English" Then
             MASSAGE_BOX.TextBox1.Caption = "Your Organization Policy does not allow using this text, please update before you continue"
             Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
          Exit Sub
          End If
    Next
    End If
 
    
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
 
     Dim idx As Long
idx = Me.lbHyperlinks.ListIndex
If idx <> lbHyperlinks.ListCount - 1 Then

Me.lbHyperlinks.ListIndex = idx + 1
Else
 Load MASSAGE_BOX
  If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Additional HyperLinks was not found"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
        Unload Me
End If
     
End Sub

Public Sub CommandButton7_Click()
 On Error Resume Next
 '
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If

    With Selection
        
        .Select
       
        If Trim(Me.HLToolTip.Text) = "" Then
            .Hyperlinks(1).ScreenTip = " "
        Else
            .Hyperlinks(1).ScreenTip = Trim(Me.HLToolTip.Text)
        End If
        If Trim(Me.HLText.Text) = "" Then
            .Hyperlinks(1).TextToDisplay = " "
        Else
            .Hyperlinks(1).TextToDisplay = Trim(Me.HLText.Text)
                If Trim(Me.HLToolTip.Text) = "" Then .Hyperlinks(1).ScreenTip = Trim(Me.HLText.Text)
        End If
    End With
     If Docaddonproperties.HLReject = True Then
    For I = 1 To 10
          If Trim(Me.HLText.Text) Like getAdmSetting0("HL_Reject_Text_" & I) And Trim(getAdmSetting0("HL_Reject_Text_" & I)) <> "" Then
            Load MASSAGE_BOX
             If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Your Organization Policy does not allow using this text, please update it before you continue"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
          Exit Sub
          End If
    Next
    End If
   
   
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    ''need to check this line
  '  Call UserForm_Initialize
  '  DocShapes.LastHyperlink_Click
      Dim idx As Long
idx = Val(lbHyperlinks.ListIndex)
 
If idx <> 0 Then

lbHyperlinks.ListIndex = idx - 1
Else
  Load MASSAGE_BOX
   If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Additional HyperLinks was not found"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
   End If
End Sub

Private Sub HLText_Change()
On Error Resume Next
End Sub

Private Sub lbHyperlinks_Change()
    On Error Resume Next
    If DocShapes.HLSTART.Value = 0 Then Exit Sub
    Dim astory As Range
     Dim idx As Long
     Dim II, ST As Integer
    Application.ScreenUpdating = False
     ActiveWindow.View.Type = wdPrintView
    ActiveDocument.Paragraphs(1).Range.Select
    System.Cursor = wdCursorWait
    singleLinkss.lbHyperlinks_Index.Selected(singleLinkss.lbHyperlinks.ListIndex) = True
    singleLinkss.lbHyperlinks_story.Selected(singleLinkss.lbHyperlinks.ListIndex) = True
    ST = singleLinkss.lbHyperlinks_story.List(singleLinkss.lbHyperlinks.ListIndex)
    II = singleLinkss.lbHyperlinks_Index.List(singleLinkss.lbHyperlinks.ListIndex)
    AD = singleLinkss.lbHyperlinks.List(singleLinkss.lbHyperlinks.ListIndex)
  '  MsgBox AD
   'MsgBox singleLinkss.lbHyperlinks_story.List(singleLinkss.lbHyperlinks.ListIndex) & vbNewLine & singleLinkss.lbHyperlinks_Index.List(singleLinkss.lbHyperlinks.ListIndex)
    ActiveDocument.Hyperlinks(AD).Range.Select
NXTT:
   '  AD = singleLinkss.lbHyperlinks.List(singleLinkss.lbHyperlinks.ListIndex)
   ' With Selection
   '      If Trim(AD) <> Trim(Selection.Hyperlinks(1).Address) Then
     '       Selection.GoTo What:=wdGoToField, Which:=wdGoTo
      '      GoTo NXTT
      '   End If
   ' End With
    ' ActiveDocument.Hyperlinks(II).Range.Select
    '  ActiveDocument.Hyperlinks(lbHyperlinks.ListIndex + 1).Range.Select
    
    Application.ScreenUpdating = True
    If Selection.Range.Text <> ActiveDocument.Paragraphs(1).Range.Text And Left(Selection.Paragraphs(1).Format.Style.NameLocal, 3) <> "TOC" Then  'If Left(selection.Paragraphs(1).Format.Style.NameLocal, 3) <> "TOC"
        With Selection
            Me.HLToolTip.Text = .Hyperlinks(1).ScreenTip
            Me.HLText.Text = .Hyperlinks(1).TextToDisplay
            .Hyperlinks(1).Range.Select
        End With
        If Len(Trim(Me.HLText.Text)) <= 2 Then GoTo NXT
    Else
      
NXT:
        For Each astory In ActiveDocument.StoryRanges
        
            
            ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
       
            If astory.StoryType <> wdMainTextStory Then
                If astory.Hyperlinks.Count > 0 Then
                    For I = 1 To astory.Hyperlinks.Count
                        If astory.Hyperlinks(I).Address = Me.lbHyperlinks.List(I) Then
                         MsgBox astory.Hyperlinks(I).Address & vbNewLine & Me.lbHyperlinks.List(I)
                            astory.Hyperlinks(I).Range.Select
                            With Selection
                                Me.HLToolTip.Text = astory.Hyperlinks(I).ScreenTip
                                Me.HLText.Text = astory.Hyperlinks(I).TextToDisplay
                                
                            End With
                         If Len(Trim(Me.HLText)) >= 2 Then Exit Sub
                        End If
                        
                    Next
                End If
            End If
        Next astory
 
  System.Cursor = wdCursorNormal
        'Selection.GoTo What:=wdGoToField, Name:=Me.lbHyperlinks.Value
    End If
   
End Sub

Private Sub HLToolTip_Change()
    'Me.TextBox2.Text = Me.HLToolTip.Text
    On Error Resume Next
End Sub

Private Sub lbHyperlinks_Index_Click()
On Error Resume Next
End Sub

Private Sub lbHyperlinksCount_Change()
singleLinkss.lbHyperlinks.Value = Me.lbHyperlinks.List(lbHyperlinksCount.Value - 1)
singleLinkss.lbHyperlinks_Index.Selected(singleLinkss.lbHyperlinks.ListIndex) = True
singleLinkss.lbHyperlinks_story.Selected(singleLinkss.lbHyperlinks.ListIndex) = True
'singleLinkss.lbHyperlinks_Index(
singleLinkss.lbHyperlinks.SetFocus
End Sub

Private Sub start_Change()
On Error Resume Next
End Sub

Private Sub TextBox2_Change()
On Error Resume Next
End Sub

Public Sub UserForm_Initialize()
    On Error Resume Next
    Dim k As Integer
    On Error Resume Next
  
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    If DocMetaData.DocFormat.Value = "Word" Then
        Me.Label1.Visible = True
        Me.HLToolTip.Visible = True
        Me.HLText.Top = 78
        Me.HLText.Height = 33
    Else
        Me.Label1.Visible = False
        Me.HLToolTip.Visible = False
        Me.Label2.Top = 12
        Me.HLText.Top = 24
        Me.HLText.Height = 78
    End If
   
    
    'Application.ScreenUpdating = True
    'ActiveDocument.Activate
    '   Me.CommandButton6.SetFocus
    Me.start.Value = 0
       If Docaddonproperties.AddinLanguage.Value = "English" Then
       Label1.Caption = "Please Enter Hyperlink Tool TIp"
       Label1.TextAlign = fmTextAlignLeft
       Label1.Left = 6
        Label2.Caption = "Please Enter Hyperlink  Text to Display"
       Label2.TextAlign = fmTextAlignLeft
       Label2.Left = 6
       CommandButton6.Caption = "<<Confirm & Go to next"
        CommandButton7.Caption = "Confirm & Go to Previuos>>"
       CommandButton3.Caption = "Cancel"
       Else
       End If
End Sub
Private Sub UpdateGoToInfo(p, s)
  lblPage.Caption = p
  lblSection.Caption = s
  aLastLoc(iTabNum, 0) = p
  aLastLoc(iTabNum, 1) = s
End Sub
Attribute VB_Name = "singleShape"
Attribute VB_Base = "0{EC0A8331-EC77-4706-BA36-AF2EB77E3554}{77CD6140-5362-4997-808E-AB21A6DEFC76}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CheckBox1_Change()
On Error Resume Next
  Dim arange As Range
     Set arange = Selection.Range
      Dim PrevAltText As String
     
    With Selection
        
       
        If arange.ShapeRange.Count > 0 Then
        arange.ShapeRange(1).Select
        If Trim(.ShapeRange(1).AlternativeText) = "" And Trim(.ShapeRange(1).Title) <> "" Then
        .ShapeRange(1).AlternativeText = .ShapeRange(1).Title
        .ShapeRange(1).Title = ""
        End If
        Me.TextBox1 = .ShapeRange(1).AlternativeText
        End If
        If arange.InlineShapes.Count > 0 Then
        arange.InlineShapes(1).Select
        If Trim(.InlineShapes(1).AlternativeText) = "" And Trim(.InlineShapes(1).Title) <> "" Then
        .InlineShapes(1).AlternativeText = .InlineShapes(1).Title
        .InlineShapes(1).Title = ""
        End If
        Me.TextBox1 = .InlineShapes(1).AlternativeText
        End If
      
    End With
   
   
    If CheckBox1.Value = True Then
       
        TextBox1.Text = "Decorative"
        TextBox1.Locked = True
    Else
        TextBox1.Text = PrevAltText
        TextBox1.Locked = False
    End If
    TextBox2.Text = PrevAltText
End Sub




Private Sub CheckBox2_Change()
On Error Resume Next
Dim arange As Range
     Set arange = Selection.Range
     
     
    With Selection
        
       
        If arange.ShapeRange.Count > 0 Then PrevAltText = .ShapeRange(1).AlternativeText
        If arange.InlineShapes.Count > 0 Then PrevAltText = .InlineShapes(1).AlternativeText
      
    End With
  With Selection
   If Selection.StoryType = WdStoryType.wdTextFrameStory Then

  des = .ShapeRange(1).TextFrame.TextRange
  GoTo NXT
End If
 End With
  
   With Selection
   If .Range.InlineShapes.Count < 1 Then
      Load MASSAGE_BOX
       If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " This Action cannot be execute"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
 '  MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
   Exit Sub
   Else
  Set shp = .Range.InlineShapes(1)
  End If
   End With
  
    Selection.MoveUp Unit:=wdParagraph, Count:=2, Extend:=wdMove
    Application.Selection.Expand wdParagraph
    des = Application.Selection.Text
    Application.ScreenUpdating = False
    m = Selection.Range.Revisions.Count
              
    If m > 1 And Docaddonproperties.trackc = True Then
        Selection.Range.Revisions.AcceptAll
        des = Selection.Range.Text
        ActiveDocument.Undo
    Else
        des = Selection.Range.Text
    End If
   ' PrevAltText = TextBox2.Text
NXT:
    If CheckBox2.Value = True Then
      '  PrevAltText = TextBox1.Text
        TextBox1.Text = des
        TextBox1.Locked = False
    Else
        TextBox1.Text = PrevAltText
        TextBox1.Locked = False
    End If
     TextBox2.Text = PrevAltText
    shp.Select
End Sub

Public Sub CommandButton3_Click()
    Me.UndoAction
    Me.Hide
    Unload Me
    Call UserForm_Initialize
End Sub



Public Sub CommandButton6_Click()
    On Error Resume Next
    ''
    Dim TCCHECK As Integer
    Dim arange As Range
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    
    Set arange = Selection.Range
    With Selection
        
       
       
        If Trim(Me.TextBox1.Text) = "" Then
        If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = ""
         If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = ""
        Else
           If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = Me.TextBox1.Text
         If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = Me.TextBox1.Text
          
        End If
    End With
    If Me.CheckBox1 = True Then
       If arange.ShapeRange.Count > 0 Then arange.ShapeRange(1).AlternativeText = "Decorative" ' = msoTrue"
         If arange.InlineShapes.Count > 0 Then arange.InlineShapes(1).AlternativeText = "Decorative"
    Else
           If arange.ShapeRange.Count > 0 Then arange.ShapeRange(1).AlternativeText = Me.TextBox1.Text
         If arange.InlineShapes.Count > 0 Then arange.InlineShapes(1).AlternativeText = Me.TextBox1.Text
    End If
      With Selection
   If Selection.StoryType = WdStoryType.wdTextFrameStory Then
   With Selection.ShapeRange(1)
   .AlternativeText = Me.TextBox1.Text
   End With
   
   End If
 
 
 End With
  If Docaddonproperties.AltTextReject = True And Trim(Me.TextBox1.Value) = "" Then
  Load MASSAGE_BOX
   If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = " Please Enter Alt Text before you Continue"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.TextBox1.SetFocus
        Exit Sub
  End If
    Me.Hide
    Unload Me
    Me.TextBox1.Value = ""
    Me.TextBox2.Value = ""
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
  
    Call UserForm_Initialize
   
End Sub

Private Sub TextBox1_Change()
    'Me.TextBox2.Text = Me.TextBox1.Text
End Sub

Public Sub UserForm_Initialize()
    On Error Resume Next
     Dim arange As Range
     Set arange = Selection.Range
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    
    arange.Select
       With Selection
        
       
        If arange.ShapeRange.Count > 0 Then
        arange.ShapeRange(1).Select
        Me.TextBox1 = .ShapeRange(1).AlternativeText
        End If
        If arange.InlineShapes.Count > 0 Then
        arange.InlineShapes(1).Select
        Me.TextBox1 = .InlineShapes(1).AlternativeText
        End If
      
    End With
      If Docaddonproperties.AddinLanguage.Value = "English" Then
       Label1.Caption = "Please Enter Valid Alt Text to rhe selected Element"
       Label1.Left = 6
       Label1.TextAlign = fmTextAlignLeft
       Label3.Caption = "Asign Text Based On Document Text"
       Label3.Width = 150
       Label3.Left = 45
       Label3.TextAlign = fmTextAlignLeft
        Label3.TextAlign = fmTextAlignLeft
       Label2.Caption = "Decorative Text"
       Label2.Left = 245
       CheckBox2.Left = 30
       CheckBox1.Left = 230
         CommandButton6.Caption = "OK"
       CommandButton3.Caption = "Cancel"
       Else
       End If
  
End Sub
Attribute VB_Name = "singleShapes"
Attribute VB_Base = "0{1E3D8FD0-F69C-49CF-8756-92D72318A0F5}{569E5489-A5A3-40C7-95FE-CC473DECAE14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private aNumItems(6) As Integer
Private Sub CheckBox1_Click()
   On Error Resume Next
   
      If Me.CheckBox1 = True Then Me.CheckBox2 = False
      If Me.CheckBox1 = False Then
         TextBox1.Locked = False
      Exit Sub
      End If
   Dim arange As Range
     Set arange = Selection.Range
      Dim PrevAltText As String
     
    With Selection
        
       
        If arange.ShapeRange.Count > 0 Then PrevAltText = .ShapeRange(1).AlternativeText
        If arange.InlineShapes.Count > 0 Then PrevAltText = .InlineShapes(1).AlternativeText
         
    End With
   
   
    If CheckBox1.Value = True Then
       
        TextBox1.Text = "Decorative" '"|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        TextBox1.Locked = True
    Else
        TextBox1.Text = PrevAltText
        TextBox1.Locked = False
    End If
    TextBox2.Text = PrevAltText
    
End Sub




Private Sub CheckBox2_Click()
On Error Resume Next
    If Me.CheckBox2 = True Then Me.CheckBox1 = False
    If Me.CheckBox2 = False Then Exit Sub
    Dim arange As Range
     Set arange = Selection.Range
     
     
    With Selection
        
       
        If arange.ShapeRange.Count > 0 Then PrevAltText = .ShapeRange(1).AlternativeText
        If arange.InlineShapes.Count > 0 Then PrevAltText = .InlineShapes(1).AlternativeText
      
    End With

  With Selection
   If Selection.StoryType = WdStoryType.wdTextFrameStory Then

  des = .ShapeRange(1).TextFrame.TextRange
  GoTo NXT
End If
 End With
  
   With Selection
   If .Range.InlineShapes.Count < 1 Then
      Load MASSAGE_BOX
          If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Can't excecute the requested action"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show

   Exit Sub
   Else
  Set shp = .Range.InlineShapes(1)
  End If
   End With
  
    Selection.MoveUp Unit:=wdParagraph, Count:=2, Extend:=wdMove
    Application.Selection.Expand wdParagraph
    des = Application.Selection.Text
    Application.ScreenUpdating = False
    m = Selection.Range.Revisions.Count
              
    If m > 1 And Docaddonproperties.trackc = True Then
        Selection.Range.Revisions.AcceptAll
        des = Selection.Range.Text
        ActiveDocument.Undo
    Else
        des = Selection.Range.Text
    End If
NXT:
   ' PrevAltText = TextBox2.Text
    If CheckBox2.Value = True Then
      '  PrevAltText = TextBox1.Text
        TextBox1.Text = des
        TextBox1.Locked = False
        arange.Select
    Else
        TextBox1.Text = PrevAltText
        TextBox1.Locked = False
    End If
     TextBox2.Text = PrevAltText
     arange.Select
    shp.Select
End Sub

Private Sub CommandButton11_Click()
Dim idx As Long
idx = Val(PicList.ListIndex)
 
If idx <> 0 Then
PicList.ListIndex = idx - 1
Else
PicList.ListIndex = 0
Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Previous Graphic Elements was not detected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
End If
End Sub

Private Sub CommandButton12_Click()
Dim idx As Long
idx = PicList.ListIndex
If idx <> PicList.ListCount - 1 Then
PicList.ListIndex = idx + 1
Else
PicList.ListIndex = idx
  Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Aditional Graphic Elements was not detected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show

End If
End Sub

Public Sub CommandButton3_Click()
    Me.UndoAction
    Me.Hide
    Unload Me
    Call UserForm_Initialize
End Sub



Public Sub CommandButton6_Click()
 
    
   On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim arange As Range
   
    
     
     
    With Selection
        
       
         If Trim(Me.TextBox1.Text) = "" Then
        If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = ""
         If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = ""
        Else
           If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = Me.TextBox1.Text
           If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = Me.TextBox1.Text
           
        End If
           If Me.CheckBox1 = True Then
       If arange.ShapeRange.Count > 0 Then arange.ShapeRange(1).AlternativeText = "Decorative"
         If arange.InlineShapes.Count > 0 Then arange.InlineShapes(1).AlternativeText = "Decorative"
     Else
       If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = Me.TextBox1.Text
           If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = Me.TextBox1.Text
    End If
        With Selection
   If Selection.StoryType = WdStoryType.wdTextFrameStory Then
   With Selection.ShapeRange(1)
  .AlternativeText = Me.TextBox1.Text
   End With
   End If
 
 
 End With
    End With
     If Docaddonproperties.AltTextReject = True And Trim(Me.TextBox1.Value) = "" Then
  Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please set Alt Text"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.TextBox1.SetFocus
        Exit Sub
  End If
    Me.CheckBox1.Value = False
    Me.CheckBox2.Value = False
    Me.TextBox1.Value = ""
    Me.TextBox2.Value = ""
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    ''need to check this line
   
    'Call UserForm_Initialize
   '  Unload Me
   '  Me.Hide
   ' Selection.Next(Unit:=wdCharacter, Count:=1).Select

 '  Call DocShapes.NextS_Click
   Dim idx As Long
idx = PicList.ListIndex
If idx <> PicList.ListCount - 1 Then

PicList.ListIndex = idx + 1



 
     Set arange = Selection.Range
    With Selection
        ''
       '     Me.CheckBox1 = False
       '     Me.CheckBox2 = False
        
          If .ShapeRange.Count > 0 Then
         '    If .ShapeRange(1).AlternativeText = "Decorative" Then Me.CheckBox1.Value = True
                Me.TextBox1.Text = .ShapeRange(1).AlternativeText
                 '
            End If
            If .InlineShapes.Count > 0 Then
          ''   If .InlineShapes(1).AlternativeText = "Decorative" Then Me.CheckBox1.Value = True
                Me.TextBox1.Text = .InlineShapes(1).AlternativeText
               End If
    End With
   
    Me.CommandButton6.SetFocus
     Application.ScreenUpdating = True
         ActiveDocument.Activate

Else
PicList.ListIndex = idx
  Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Aditional Graphic Elements was not detected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
           Unload Me
           If ActiveWindow.View.SplitSpecial = wdPaneNone Then
         ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
    Else
        ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
    End If
End If

End Sub

Public Sub CommandButton7_Click()
   On Error Resume Next
    
  
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If
    Dim arange As Range
    
 
     
     
    With Selection
        
       
         If Trim(Me.TextBox1.Text) = "" Then
        If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = ""
         If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = ""
        Else
           If arange.ShapeRange.Count > 0 Then .ShapeRange(1).AlternativeText = Me.TextBox1.Text
           If arange.InlineShapes.Count > 0 Then .InlineShapes(1).AlternativeText = Me.TextBox1.Text
           
        End If
           If Me.CheckBox1 = True Then
       If arange.ShapeRange.Count > 0 Then arange.ShapeRange(1).AlternativeText = "Decorative"
         If arange.InlineShapes.Count > 0 Then arange.InlineShapes(1).AlternativeText = "Decorative"
       Else
          If arange.ShapeRange.Count > 0 Then arange.ShapeRange(1).AlternativeText = "Decorative"
         If arange.InlineShapes.Count > 0 Then arange.InlineShapes(1).AlternativeText = "Decorative"
    End If
    End With
     If Docaddonproperties.AltTextReject = True And Trim(Me.TextBox1.Value) = "" Then
  Load MASSAGE_BOX
      If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Please set Alt Text"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        End If
        MASSAGE_BOX.Show
        Me.TextBox1.SetFocus
        Exit Sub
  End If
'   Me.Hide
 '   Unload Me
    Me.TextBox1.Value = ""
    Me.TextBox2.Value = ""
    Me.CheckBox1.Value = False
    Me.CheckBox2.Value = False
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
    ''need to check this line
   
    'Call UserForm_Initialize
    ' Unload Me
    ' Me.Hide
   ' Selection.Next(Unit:=wdCharacter, Count:=1).Select
    Dim idx As Long
idx = Val(PicList.ListIndex)
 
If idx <> 0 Then
'Me.CheckBox1 = False
'Me.CheckBox2 = False
PicList.ListIndex = idx - 1

 Set arange = Selection.Range
  'Me.CheckBox1 = False
      '      Me.CheckBox2 = False
    With Selection
        
          If .ShapeRange.Count > 0 Then
          '   If .ShapeRange(1).AlternativeText = "Decorative" Then Me.CheckBox1.Value = True
                Me.TextBox1.Text = .ShapeRange(1).AlternativeText
              
            End If
            If .InlineShapes.Count > 0 Then
           '   If .InlineShapes(1).AlternativeText = "Decorative" Then Me.CheckBox1.Value = True
                Me.TextBox1.Text = .InlineShapes(1).AlternativeText
               End If
    End With
   
'    Me.CommandButton6.SetFocus
     Application.ScreenUpdating = True
         ActiveDocument.Activate
Else
PicList.ListIndex = 0
Load MASSAGE_BOX
    If Docaddonproperties.AddinLanguage.Value = "English" Then
   MASSAGE_BOX.TextBox1.Caption = "Previous Graphic Elements was not detected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show
               If ActiveWindow.View.SplitSpecial = wdPaneNone Then
         ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
    Else
         ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
    End If
End If
  
 '  Me.Show
End Sub

Private Sub PicList_Change()
If DocShapes.PICStart.Value = 0 Then Exit Sub
 On Error Resume Next
    Dim astory As Range
    Dim aAnchor As Range
    Dim shp As Shape
    Dim n
    Dim m
    Dim j
    Dim jjj
    Dim s
    Dim SS
    Application.ScreenUpdating = False
    ActiveDocument.Paragraphs(1).Range.Select
    ActiveWindow.View.Type = wdPrintView
     If ActiveWindow.View.SplitSpecial = wdPaneNone Then
       ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
    n = Trim(Mid(PicList.Value, 1, InStr(1, PicList.Value, ".") - 1))
    m = Trim(Mid(PicList.Value, InStr(1, PicList.Value, ".") + 1, InStr(1, PicList.Value, "(") - 1))
    j = Trim(Mid(m, 1, InStr(1, m, "(") - 1))
    s = Trim(Mid(m, InStr(1, m, "(") + 1, Len(m)))
    SS = Trim(Mid(s, 1, Len(s) - 1))
  
    Application.ScreenUpdating = True
    For Each astory In ActiveDocument.StoryRanges
        jjj = getstorytype(astory.StoryType)
        If jjj = n Then
  
              If astory.StoryType <> wdMainTextStory Then
                     Select Case astory.StoryType
                      Case "wdEvenPagesFooterStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                       ActiveWindow.View.Type = wdPrintView
                      Case "wdEvenPagesHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                     ActiveWindow.View.Type = wdPrintView
                      Case "wdFirstPageFooterStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                      ActiveWindow.View.Type = wdPrintView
                     Case "wdFirstPageHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                      ActiveWindow.View.Type = wdPrintView
                       Case "wdPrimaryFooterStory"
                       ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
                       ActiveWindow.View.Type = wdPrintView
                       Case "wdPrimaryHeaderStory"
                      ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                      ActiveWindow.View.Type = wdPrintView
                       Case Else
                       ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
                      ActiveWindow.View.Type = wdPrintView
                    End Select
            'ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader 'wdSeekMainDocument
           '  ActiveWindow.View.Type = wdPrintView
            Else
            ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
             ActiveWindow.View.Type = wdPrintView
            End If
            
            If j = "ShapeRange" Then
             
                For Each shp In astory.ShapeRange
                    If shp.Name = SS Then
                    shp.Select
                     Set aAnchor = shp.Anchor
                     aAnchor.Select
                  '  With Selection
                  '      .Range.Select
                 '   End With
                    shp.Select
               '     With Selection
                '     .ShapeRange(1).Select
                '    End With
               
                   ' Exit Sub
                 
                   GoTo NXTT
                    End If
                Next
                
            End If
    
            If j = "InlineShapes" Then
            astory.InlineShapes(SS).Select
      
           '  Exit Sub
           GoTo NXTT
            End If

        End If
    Next astory
    
NXTT:
     'Me.Hide
  
        Dim arange As Range
     arange.Select
  With Selection
   
       
        If arange.ShapeRange.Count > 0 Then
        arange.ShapeRange(1).Select
        If Trim(.ShapeRange(1).AlternativeText) = "" And Trim(.ShapeRange(1).Title) <> "" Then
        .ShapeRange(1).AlternativeText = .ShapeRange(1).Title
        .ShapeRange(1).Title = ""
        End If
        Me.TextBox1 = .ShapeRange(1).AlternativeText
       End If
      If arange.InlineShapes.Count > 0 Then
        arange.InlineShapes(1).Select
        If Trim(.InlineShapes(1).AlternativeText) = "" And Trim(.InlineShapes(1).Title) <> "" Then
             .InlineShapes(1).AlternativeText = .InlineShapes(1).Title
             .InlineShapes(1).Title = ""
        End If
        Me.TextBox1 = .InlineShapes(1).AlternativeText
        End If
      
    End With
  Me.PicListCount.SetFocus
End Sub


Private Sub PicListCount_Change()
Me.PicList.Value = Me.PicList.List(PicListCount.Value - 1)
Me.PicList.SetFocus
End Sub
Private Sub TextBox1_Change()
    'Me.TextBox2.Text = Me.TextBox1.Text
End Sub

Public Sub UserForm_Initialize()
    On Error Resume Next
    Dim arange As Range
   '  Set arange = Selection.Range
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    '  Dim arange As Range
   '  arange.Select
 ' With Selection
   
       
   '     If arange.ShapeRange.Count > 0 Then
    '    arange.ShapeRange(1).Select
    '    Me.TextBox1 = .ShapeRange(1).AlternativeText
    '    End If
    '    If arange.InlineShapes.Count > 0 Then
     '   arange.InlineShapes(1).Select
    '    Me.TextBox1 = .InlineShapes(1).AlternativeText
    '    End If
      
   ' End With
   
    Me.CommandButton6.SetFocus
     Application.ScreenUpdating = True
         ActiveDocument.Activate
 Me.start.Value = 0
  If Docaddonproperties.AddinLanguage.Value = "English" Then
       Label1.Caption = "Please Enter Valid Alt Text to rhe selected Element"
       Label1.Left = 6
       Label1.TextAlign = fmTextAlignLeft
       Label3.Caption = "Asign Text Based On Document Text"
            Label3.Width = 150
       Label2.Caption = "Decorative Text"
       CheckBox2.Left = 30
       CheckBox1.Left = 230
        Label2.Left = 245
        Label2.TextAlign = fmTextAlignLeft
        Label3.TextAlign = fmTextAlignLeft
         Label3.Left = 45
         CommandButton6.Caption = "OK"
       CommandButton3.Caption = "Cancel"
        CommandButton6.Caption = "<<Confirm & Go to Next"
        CommandButton7.Caption = "Confirm & Go to Previous>>"
       CommandButton3.Caption = "Cancel"
       Else
       End If
End Sub
Attribute VB_Name = "singleTable"
Attribute VB_Base = "0{21D01B98-0817-4993-982F-0141FE03B827}{C7F7E532-C6FE-479E-B2ED-B3227F77CF64}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton3_Click()
    Me.Hide
    Unload Me
End Sub

Public Sub CommandButton6_Click() '
    Dim Tbl As Table
    On Error Resume Next
    Dim TCCHECK As Integer
    If ActiveDocument.TrackRevisions = True Then
        Call SwithchTrackChangeOff(1)
        TCCHECK = 1
    End If

    With Selection
       Dim tabnum
      tabnum = ActiveDocument.Range(0, Selection.TableS(1).Range.End).TableS.Count
          


        Set Tbl = ActiveDocument.TableS(tabnum)
        If Me.TableDescorig.Value <> "" Then
            Selection.TableS(1).Descr = Me.TableDescorig.Value
        End If
        Selection.rows(1).HeadingFormat = wdToggle
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If OptionButton1 = True Then
            addBookmarkToTables "Title_", True
            
        ElseIf OptionButton2 = True Then
            addBookmarkToTables "ColumnTitle_", False
        
        ElseIf OptionButton3 = True Then
            addBookmarkToTables "RowTitle_", True
       
       
       
        
            ''this options makes the table a layout table
        ElseIf OptionButton4 = True Then

            addBookmarkToTables "layout", False
        
        End If
    
        Me.Hide
        Unload Me
    End With
    ' Selection.Tables(1).ApplyStyleHeadingRows = True
    Selection.TableS(1).ApplyStyleHeadingRows = True
    Selection.TableS(1).ApplyStyleFirstColumn = True
    Selection.TableS(1).rows(1).HeadingFormat = True
    
    Selection.rows.AllowBreakAcrossPages = False
    Tbl.Select
    Call setDocVarTable("DocTable")
    If TCCHECK = 1 Then SwithchTrackChangeOn (1)
End Sub

Public Sub UserForm_Initialize()
    On Error GoTo NXT
    Dim Language As String
    
    Set TableS = New Collection
    Dim tabl
   
    For Each tabl In Selection.TableS
        TableS.Add tabl
    Next tabl

    TableNum = 1
    TableS(TableNum).Select
    
    
    If Application.Language = 1037 Then
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = 0
    Else
        Me.StartUpPosition = 0
        Me.Top = Application.Top + Application.Height - Me.Height
        Me.Left = Application.Left + Application.Width - Me.Width
    End If
    TableDescorig.Value = Selection.TableS(1).Descr
    With Selection
        If Selection.Bookmarks.Count = 0 Then
            Me.OptionButton4 = True
        Else
            If InStr(1, Selection.Bookmarks(1).Name, "Title_") Then Me.OptionButton1 = True
            If InStr(1, Selection.Bookmarks(1).Name, "ColumnTitle_") Then Me.OptionButton2 = True
            If InStr(1, Selection.Bookmarks(1).Name, "RowTitle_") Then Me.OptionButton3 = True
             
        End If
    End With
 
    
NXT:
    If Err.Number <> 0 Then
         Load MASSAGE_BOX
           If Docaddonproperties.AddinLanguage.Value = "English" Then
 MASSAGE_BOX.TextBox1.Caption = "No Table was Selected"
  Else
        MASSAGE_BOX.TextBox1.Caption = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
               MASSAGE_BOX.Show

        Err.Clear
        Me.Hide
        Unload Me
        Exit Sub
    End If
    If Docaddonproperties.AddinLanguage.Value = "English" Then
     Image2.Left = 98
        Image3.Left = 98
        Image4.Left = 98
        Image5.Left = 98
        OptionButton1.Left = 4
     
         OptionButton1.TextAlign = fmTextAlignLeft
            OptionButton2.TextAlign = fmTextAlignLeft
               OptionButton3.TextAlign = fmTextAlignLeft
                  OptionButton4.TextAlign = fmTextAlignLeft
        OptionButton1.Caption = "Rows & Columns"
        OptionButton2.Left = 4
          OptionButton1.alignment = fmAlignmentRight
        OptionButton2.alignment = fmAlignmentRight
          OptionButton3.alignment = fmAlignmentRight
            OptionButton4.alignment = fmAlignmentRight
        OptionButton2.Caption = "Rows Only"
        OptionButton3.Left = 4
        OptionButton3.Caption = "Columns Only"
        OptionButton4.Left = 4
        OptionButton4.Caption = "Layout Table"
        TableLABLE.Caption = "Table Description"
        TableLABLE.TextAlign = fmTextAlignLeft
        CommandButton6.Caption = "OK"
        CommandButton3.Caption = "Cancel"
        
        Else
        End If
End Sub

' InQuest injected base64 decoded content
' zPhw$
' *ey*Zq
' Z+a1
' a:yr
' bzW@
' ,jw\
' 'vz-y'
' 'vz-x*'
' 'vz-x*'
' +-jw
' ,jw\

INQUEST-PP=macro
