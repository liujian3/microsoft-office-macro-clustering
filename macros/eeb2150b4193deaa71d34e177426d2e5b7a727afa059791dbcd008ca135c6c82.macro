Attribute VB_Name = "AboutForm"
Attribute VB_Base = "0{6B35368B-4C18-4EEE-A768-A55432D7B614}{B36AC1DA-78CA-4788-B587-BED1D76EA846}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub AboutCancelButton_Click()
  Unload AboutForm
End Sub

Private Sub Txt4_Click()
ActiveDocument.FollowHyperlink AboutForm.Txt4.Caption
End Sub
Attribute VB_Name = "AboutModule"
Option Explicit
Sub aboutTxt1(n As Long)
Dim s As String
  With AboutForm
    s = "ABOUT EDITORKAE" & vbCrLf
    s = s & "These Microsoft Word tools are designed to improve the productivity of editors and writers. They extend Word's commands and group them in user friendly forms. For many editing and writing tasks they are more convenient and easier to use than Word's ribbon menus."
  
    .Txt1.Caption = s
    s = "VERSION NUMBERS" & vbCrLf
    s = s & "Modules have individual version numbers." & vbCrLf & _
      "See web site below for latest versions."
    .Txt2.Caption = s
    
    s = "WHY ARE SOME BUTTONS GREYED OUT?" & vbCrLf
    s = s & "Module files must be in the same folder as the Launcher file." & vbCrLf & _
    "A button is greyed out if Launcher cannot find that file."
    s = s & vbCrLf & vbCrLf & "FURTHER INFORMATION"
    .Txt3.Caption = s

    s = "http://www.editordie.com.au/editorkae"
    .Txt4.Caption = s
    .Show
    
  End With

End Sub
Attribute VB_Name = "LaunchForm"
Attribute VB_Base = "0{627F07FB-BA55-47A5-BE79-8B51467261C7}{3A872E44-4B07-4F91-8183-5F4063BCA35A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub AboutButton_Click()
  aboutTxt1 (1)
End Sub

Private Sub AnchorEditButton_Click()
  launchMacro (1)
End Sub

Private Sub BulNumButton_Click()
  launchMacro (11)
End Sub

Private Sub CancelButton_Click()
  exitLauncher (1)
End Sub

Private Sub DocStatsButton_Click()
  launchMacro (10)
End Sub

Private Sub FieldsButton_Click()
  launchMacro (2)
End Sub

Private Sub LoadMacrosButton_Click()
  launchMacro (4)
End Sub

Private Sub StyleEditingButton_Click()
    launchMacro (3)
End Sub

Private Sub InstructionButton_Click()
  ShowInstructions (1)
End Sub

Private Sub HotKeysButton_Click()
  launchMacro (9)
End Sub

Private Sub SpellingButton_Click()
  launchMacro (12)
End Sub

Private Sub TableColumnTabsButton_Click()
'  launchMacro (5) not used
End Sub

Private Sub TableEditingButton_Click()
  launchMacro (6)
End Sub

Private Sub TextEditingButton_Click()
  launchMacro (7)
End Sub

Private Sub TOCGeneratorButton_Click()
  launchMacro (8)
End Sub
Attribute VB_Name = "LauncherModule"
Option Explicit
Dim vPoints As Single
Dim hPoints As Single
Dim allAddins() As String
Dim allAddinsN As Long

Sub GO_LAUNCHER()
  Call GiveScreenPoints(hPoints, vPoints)
  With LaunchForm
    .StartUpPosition = 0
    If vPoints - .Height < 40 Then
       .Top = 0
    Else
      .Top = 40
    End If
    .Left = hPoints - .Width - 2
    .Show
  End With
  loadAddins
  setInstalled
  'LaunchForm.TOCGeneratorButton.Caption = "TOC generation &" & vbCrLf & "page numbering"
End Sub
Sub exitLauncher(n As Long)
  LaunchForm.hide
End Sub

Private Sub loadAddins()
Dim i As Long
Dim sT As String
Dim addinFile As AddIn
  allAddinsN = -1
  ReDim allAddins(0)
  For Each addinFile In AddIns
    sT = addinFile.Name
    If addinFile.Installed Then
      allAddinsN = allAddinsN + 1
      ReDim Preserve allAddins(allAddinsN)
      allAddins(allAddinsN) = sT
    End If
  Next addinFile
End Sub
Private Sub setInstalled()
Dim strng 'As String
Dim m As Long
  If allAddinsN < 0 Then Exit Sub
  With LaunchForm
    For m = 0 To allAddinsN
      strng = UCase(allAddins(m))
      Select Case strng
        Case "STYLEUTILITIES.DOTM"
          .StyleEditingButton.Enabled = True
        Case "TEXTEDITING.DOTM"
          .TextEditingButton.Enabled = True
        Case "BULLNUM.DOTM"
          .BulNumButton.Enabled = True
        Case "FIELDSEDIT.DOTM"
          .FieldsButton.Enabled = True
   '     Case "TABLECOLUMNTABS.DOTM"
   '       .TableColumnTabsButton.Enabled = True
        Case "TABLEEDITING.DOTM"
          .TableEditingButton.Enabled = True
        Case "SHAPESEDIT.DOTM"
          .AnchorEditButton.Enabled = True
        Case "TOCGENERATOR.DOTM"
          .TOCGeneratorButton.Enabled = True
        Case "DOCSTATS.DOTM"
          .DocStatsButton.Enabled = True
        Case "HOTKEYEDITING.DOTM"
          .HotKeysButton.Enabled = True
        Case "SPELLEREDIT.DOTM"
          .SpellingButton.Enabled = True
      End Select
    Next m
   ' .InstructionButton.Enabled = True
  End With
End Sub
Sub launchMacro(m As Integer)
  On Error GoTo merr
  With Application
  Select Case m
    Case 1
      .Run macroname:="GO_SHAPES"
    Case 2
      .Run macroname:="GO_FIELDS"
    Case 3
      .Run macroname:="GO_UTILITIES"
    Case 4
      .Run macroname:="GO_LOADMACROS"
   ' Case 5
   '   .Run macroname:="GO_TABLECOLUMNTABS"
    Case 6
      .Run macroname:="GO_TableEditing"
    Case 7
      .Run macroname:="GO_TEXTEDIT"
    Case 8
      .Run macroname:="GO_TOC"
    Case 9
      .Run macroname:="GO_HOTKEY"
    Case 10
      .Run macroname:="GO_DOCSTATS"
    Case 11
      .Run macroname:="GO_BULNUM"
    Case 12
      .Run macroname:="GO_SPELLER"
  End Select
  End With
  On Error GoTo 0
  Exit Sub
merr:
  On Error GoTo 0
  MsgBox "Error in launching this macro"
End Sub
Sub ShowInstructions(n As Long)
Dim startPath As String
Dim docName As String
Dim wdDoc As Object
  docName = "EDITORkae Instructions.docx"
  On Error GoTo newDoc
  Set wdDoc = Documents(docName)
  On Error GoTo 0
  wdDoc.Activate
  Exit Sub
newDoc:
  On Error GoTo noFile
  startPath = Options.DefaultFilePath(wdStartupPath)
  Documents.Open (startPath & "\" & docName)
  On Error GoTo 0
  Exit Sub
  On Error GoTo 0
noFile:
 MsgBox "Cannot find file " & startPath & "\" & docName
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit

' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbarsSub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)


Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub



INQUEST-PP=macro
